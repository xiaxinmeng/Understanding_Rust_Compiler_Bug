{"sha": "148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ4NDEzYTRlYmYwZTUzYTk1MTgzYWEzYmRmNmVmZjAzMmNiYWE1Ng==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2012-11-30T15:17:48Z"}, "committer": {"name": "Greta Yorsh", "email": "gretay@gcc.gnu.org", "date": "2012-11-30T15:17:48Z"}, "message": "For attribute named \"type\", subdivide \"alu\" into \"alu_reg\" and \"simple_alu_imm\".\n\nSet type attribute as appropriate in RTL patterns with immediate operands.\nUpdate pipeline descriptions to use the new values of type attribute.\n\ngcc/\n\n2012-11-30  Ramana Radhakrishnan <Ramana.Radhakrishnan@arm.com>\n            Greta Yorsh  <Greta.Yorsh@arm.com>\n\n        * config/arm/arm.md (type): Subdivide \"alu\" into \"alu_reg\"\n        and \"simple_alu_imm\".\n        (core_cycles): Use new names.\n        (arm_addsi3): Set type of patterns to use to alu_reg and simple_alu_imm.\n        (addsi3_compare0, addsi3_compare0_scratch): Likewise.\n        (addsi3_compare_op1, addsi3_compare_op2, compare_addsi2_op0): Likewise.\n        (compare_addsi2_op1, arm_subsi3_insn, subsi3_compare0): Likewise.\n        (subsi3_compare, arm_decscc,arm_andsi3_insn): Likewise.\n        (thumb1_andsi3_insn, andsi3_compare0_scratch): Likewise.\n        (zeroextractsi_compare0_scratch,iorsi3_insn,iorsi3_compare0): Likewise.\n        (iorsi3_compare0_scratch, arm_xorsi3, thumb1_xorsi3_insn): Likewise.\n        (xorsi3_compare0, xorsi3_compare0_scratch): Likewise.\n        (thumb1_zero_extendhisi2,arm_zero_extendhisi2_v6): Likewise.\n        (thumb1_zero_extendqisi2_v, arm_zero_extendqisi2_v6): Likewise.\n\t(thumb1_extendhisi2, arm_extendqisi_v6): Likewise.\n\t(thumb1_extendqisi2, arm_movsi_insn): Likewise.\n        (movsi_compare0, movhi_insn_arch4, movhi_bytes): Likewise.\n        (arm_movqi_insn, thumb1_movqi_insn, arm_cmpsi_insn): Likewise.\n        (movsicc_insn, if_plus_move, if_move_plus): Likewise.\n        * config/arm/neon.md (neon_mov<mode>/VDX): Likewise.\n        (neon_mov<mode>/VQXMOV): Likewise.\n        * config/arm/arm1020e.md (1020alu_op): Likewise.\n        * config/arm/fmp626.md (mp626_alu_op): Likewise.\n        * config/arm/fa726te.md (726te_alu_op): Likewise.\n        * config/arm/fa626te.md (626te_alu_op): Likewise.\n        * config/arm/fa606te.md (606te_alu_op): Likewise.\n        * config/arm/fa526.md (526_alu_op): Likewise.\n        * config/arm/cortex-r4.md (cortex_r4_alu, cortex_r4_mov): Likewise.\n        * config/arm/cortex-m4.md (cortex_m4_alu): Likewise.\n        * config/arm/cortex-a9.md (cprtex_a9_dp): Likewise.\n        * config/arm/cortex-a8.md (cortex_a8_alu, cortex_a8_mov): Likewise.\n        * config/arm/cortex-a5.md (cortex_a5_alu): Likewise.\n        * config/arm/cortex-a15.md (cortex_a15_alu): Likewise.\n        * config/arm/arm926ejs.md (9_alu_op): Likewise.\n        * config/arm/arm1136jfs.md (11_alu_op): Likewise.\n        * config/arm/arm1026ejs.md (alu_op): Likewise.\n\n\nCo-Authored-By: Greta Yorsh <greta.yorsh@arm.com>\n\nFrom-SVN: r193996", "tree": {"sha": "f4c3e4e7c9790d885a8910d5dd67b7e13d5b0b06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4c3e4e7c9790d885a8910d5dd67b7e13d5b0b06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/comments", "author": null, "committer": null, "parents": [{"sha": "5ba5e8ecc32c6c453890e97ccf94b23fcf5506fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba5e8ecc32c6c453890e97ccf94b23fcf5506fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba5e8ecc32c6c453890e97ccf94b23fcf5506fd"}], "stats": {"total": 462, "additions": 317, "deletions": 145}, "files": [{"sha": "ceba51dde88e3c5276e6de74359193db868f755a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -1,3 +1,43 @@\n+2012-11-30  Ramana Radhakrishnan <Ramana.Radhakrishnan@arm.com>\n+            Greta Yorsh  <Greta.Yorsh@arm.com>\n+\n+        * config/arm/arm.md (type): Subdivide \"alu\" into \"alu_reg\"\n+        and \"simple_alu_imm\".\n+        (core_cycles): Use new names.\n+        (arm_addsi3): Set type of patterns to use to alu_reg and simple_alu_imm.\n+        (addsi3_compare0, addsi3_compare0_scratch): Likewise.\n+        (addsi3_compare_op1, addsi3_compare_op2, compare_addsi2_op0): Likewise.\n+        (compare_addsi2_op1, arm_subsi3_insn, subsi3_compare0): Likewise.\n+        (subsi3_compare, arm_decscc,arm_andsi3_insn): Likewise.\n+        (thumb1_andsi3_insn, andsi3_compare0_scratch): Likewise.\n+        (zeroextractsi_compare0_scratch,iorsi3_insn,iorsi3_compare0): Likewise.\n+        (iorsi3_compare0_scratch, arm_xorsi3, thumb1_xorsi3_insn): Likewise.\n+        (xorsi3_compare0, xorsi3_compare0_scratch): Likewise.\n+        (thumb1_zero_extendhisi2,arm_zero_extendhisi2_v6): Likewise.\n+        (thumb1_zero_extendqisi2_v, arm_zero_extendqisi2_v6): Likewise.\n+\t(thumb1_extendhisi2, arm_extendqisi_v6): Likewise.\n+\t(thumb1_extendqisi2, arm_movsi_insn): Likewise.\n+        (movsi_compare0, movhi_insn_arch4, movhi_bytes): Likewise.\n+        (arm_movqi_insn, thumb1_movqi_insn, arm_cmpsi_insn): Likewise.\n+        (movsicc_insn, if_plus_move, if_move_plus): Likewise.\n+        * config/arm/neon.md (neon_mov<mode>/VDX): Likewise.\n+        (neon_mov<mode>/VQXMOV): Likewise.\n+        * config/arm/arm1020e.md (1020alu_op): Likewise.\n+        * config/arm/fmp626.md (mp626_alu_op): Likewise.\n+        * config/arm/fa726te.md (726te_alu_op): Likewise.\n+        * config/arm/fa626te.md (626te_alu_op): Likewise.\n+        * config/arm/fa606te.md (606te_alu_op): Likewise.\n+        * config/arm/fa526.md (526_alu_op): Likewise.\n+        * config/arm/cortex-r4.md (cortex_r4_alu, cortex_r4_mov): Likewise.\n+        * config/arm/cortex-m4.md (cortex_m4_alu): Likewise.\n+        * config/arm/cortex-a9.md (cprtex_a9_dp): Likewise.\n+        * config/arm/cortex-a8.md (cortex_a8_alu, cortex_a8_mov): Likewise.\n+        * config/arm/cortex-a5.md (cortex_a5_alu): Likewise.\n+        * config/arm/cortex-a15.md (cortex_a15_alu): Likewise.\n+        * config/arm/arm926ejs.md (9_alu_op): Likewise.\n+        * config/arm/arm1136jfs.md (11_alu_op): Likewise.\n+        * config/arm/arm1026ejs.md (alu_op): Likewise.\n+\n 2012-11-30  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-pre.c (get_expr_value_id): Do not allocate value-ids"}, {"sha": "a9f6da3b0982b7ab51b45d807016765c6eb579da", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 236, "deletions": 117, "changes": 353, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -338,8 +338,14 @@\n ; Classification of each insn\n ; Note: vfp.md has different meanings for some of these, and some further\n ; types as well.  See that file for details.\n-; alu\t\tany alu  instruction that doesn't hit memory or fp\n-;\t\tregs or have a shifted source operand\n+; simple_alu_imm  a simple alu instruction that doesn't hit memory or fp\n+;               regs or have a shifted source operand and has an immediate\n+;               operand. This currently only tracks very basic immediate\n+;               alu operations.\n+; alu_reg       any alu instruction that doesn't hit memory or fp\n+;               regs or have a shifted source operand\n+;               and does not have an immediate operand. This is\n+;               also the default\n ; alu_shift\tany data instruction that doesn't hit memory or fp\n ;\t\tregs, but has a source operand shifted by a constant\n ; alu_shift_reg\tany data instruction that doesn't hit memory or fp\n@@ -369,7 +375,8 @@\n ;\n \n (define_attr \"type\"\n- \"alu,\\\n+ \"simple_alu_imm,\\\n+  alu_reg,\\\n   alu_shift,\\\n   alu_shift_reg,\\\n   mult,\\\n@@ -415,7 +422,7 @@\n     (eq_attr \"insn\" \"smulxy,smlaxy,smlalxy,smulwy,smlawx,mul,muls,mla,mlas,\\\n \t     \t     umull,umulls,umlal,umlals,smull,smulls,smlal,smlals\")\n     (const_string \"mult\")\n-    (const_string \"alu\")))\n+    (const_string \"alu_reg\")))\n \n ; Is this an (integer side) multiply with a 64-bit result?\n (define_attr \"mul64\" \"no,yes\"\n@@ -553,7 +560,7 @@\n ; than one on the main cpu execution unit.\n (define_attr \"core_cycles\" \"single,multi\"\n   (if_then_else (eq_attr \"type\"\n-\t\t \"alu,alu_shift,float,fdivd,fdivs\")\n+\t\t \"simple_alu_imm,alu_reg,alu_shift,float,fdivd,fdivs\")\n \t\t(const_string \"single\")\n \t        (const_string \"multi\")))\n \n@@ -813,7 +820,11 @@\n   \"\n   [(set_attr \"length\" \"2,4,4,4,4,4,4,4,4,4,4,16\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"arch\" \"t2,*,*,*,t2,t2,*,*,a,t2,t2,*\")]\n+   (set_attr \"arch\" \"t2,*,*,*,t2,t2,*,*,a,t2,t2,*\")\n+   (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n+\t\t      (const_string \"simple_alu_imm\")\n+\t\t      (const_string \"alu_reg\")))\n+ ]\n )\n \n (define_insn_and_split \"*thumb1_addsi3\"\n@@ -882,30 +893,35 @@\n (define_insn \"addsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n-\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r, r\")\n-\t\t  (match_operand:SI 2 \"arm_add_operand\"    \"rI,L\"))\n+\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r, r,r\")\n+\t\t  (match_operand:SI 2 \"arm_add_operand\"    \"I,L,r\"))\n \t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_ARM\"\n   \"@\n    add%.\\\\t%0, %1, %2\n-   sub%.\\\\t%0, %1, #%n2\"\n-  [(set_attr \"conds\" \"set\")]\n+   sub%.\\\\t%0, %1, #%n2\n+   add%.\\\\t%0, %1, %2\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"simple_alu_imm, simple_alu_imm, *\")]\n )\n \n (define_insn \"*addsi3_compare0_scratch\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n-\t (plus:SI (match_operand:SI 0 \"s_register_operand\" \"r, r\")\n-\t\t  (match_operand:SI 1 \"arm_add_operand\"    \"rI,L\"))\n+\t (plus:SI (match_operand:SI 0 \"s_register_operand\" \"r, r, r\")\n+\t\t  (match_operand:SI 1 \"arm_add_operand\"    \"I,L, r\"))\n \t (const_int 0)))]\n   \"TARGET_ARM\"\n   \"@\n    cmn%?\\\\t%0, %1\n-   cmp%?\\\\t%0, #%n1\"\n+   cmp%?\\\\t%0, #%n1\n+   cmn%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"simple_alu_imm, simple_alu_imm, *\")\n+   ]\n )\n \n (define_insn \"*compare_negsi_si\"\n@@ -980,59 +996,67 @@\n (define_insn \"*addsi3_compare_op1\"\n   [(set (reg:CC_C CC_REGNUM)\n \t(compare:CC_C\n-\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t\t  (match_operand:SI 2 \"arm_add_operand\" \"rI,L\"))\n+\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n+\t\t  (match_operand:SI 2 \"arm_add_operand\" \"I,L,r\"))\n \t (match_dup 1)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"@\n    add%.\\\\t%0, %1, %2\n-   sub%.\\\\t%0, %1, #%n2\"\n-  [(set_attr \"conds\" \"set\")]\n+   sub%.\\\\t%0, %1, #%n2\n+   add%.\\\\t%0, %1, %2\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\"  \"simple_alu_imm,simple_alu_imm,*\")]\n )\n \n (define_insn \"*addsi3_compare_op2\"\n   [(set (reg:CC_C CC_REGNUM)\n \t(compare:CC_C\n-\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t\t  (match_operand:SI 2 \"arm_add_operand\" \"rI,L\"))\n+\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n+\t\t  (match_operand:SI 2 \"arm_add_operand\" \"I,L,r\"))\n \t (match_dup 2)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"@\n+   add%.\\\\t%0, %1, %2\n    add%.\\\\t%0, %1, %2\n    sub%.\\\\t%0, %1, #%n2\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"simple_alu_imm,simple_alu_imm,*\")]\n )\n \n (define_insn \"*compare_addsi2_op0\"\n   [(set (reg:CC_C CC_REGNUM)\n \t(compare:CC_C\n-\t (plus:SI (match_operand:SI 0 \"s_register_operand\" \"r,r\")\n-\t\t  (match_operand:SI 1 \"arm_add_operand\" \"rI,L\"))\n+\t (plus:SI (match_operand:SI 0 \"s_register_operand\" \"r,r,r\")\n+\t\t  (match_operand:SI 1 \"arm_add_operand\" \"I,L,r\"))\n \t (match_dup 0)))]\n   \"TARGET_32BIT\"\n   \"@\n    cmn%?\\\\t%0, %1\n-   cmp%?\\\\t%0, #%n1\"\n+   cmp%?\\\\t%0, #%n1\n+   cmn%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"simple_alu_imm,simple_alu_imm,*\")]\n )\n \n (define_insn \"*compare_addsi2_op1\"\n   [(set (reg:CC_C CC_REGNUM)\n \t(compare:CC_C\n-\t (plus:SI (match_operand:SI 0 \"s_register_operand\" \"r,r\")\n-\t\t  (match_operand:SI 1 \"arm_add_operand\" \"rI,L\"))\n+\t (plus:SI (match_operand:SI 0 \"s_register_operand\" \"r,r,r\")\n+\t\t  (match_operand:SI 1 \"arm_add_operand\" \"I,L,r\"))\n \t (match_dup 1)))]\n   \"TARGET_32BIT\"\n   \"@\n    cmn%?\\\\t%0, %1\n-   cmp%?\\\\t%0, #%n1\"\n+   cmp%?\\\\t%0, #%n1\n+   cmn%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"simple_alu_imm,simple_alu_imm,*\")]\n )\n \n (define_insn \"*addsi3_carryin_<optab>\"\n@@ -1270,14 +1294,15 @@\n \n ; ??? Check Thumb-2 split length\n (define_insn_and_split \"*arm_subsi3_insn\"\n-  [(set (match_operand:SI           0 \"s_register_operand\" \"=r,r,rk,r\")\n-\t(minus:SI (match_operand:SI 1 \"reg_or_int_operand\" \"rI,r,k,?n\")\n-\t\t  (match_operand:SI 2 \"reg_or_int_operand\" \"r,rI,r, r\")))]\n+  [(set (match_operand:SI           0 \"s_register_operand\" \"=r,r,r,rk,r\")\n+\t(minus:SI (match_operand:SI 1 \"reg_or_int_operand\" \"rI,r,r,k,?n\")\n+\t\t  (match_operand:SI 2 \"reg_or_int_operand\" \"r,I,r,r, r\")))]\n   \"TARGET_32BIT\"\n   \"@\n    rsb%?\\\\t%0, %2, %1\n    sub%?\\\\t%0, %1, %2\n    sub%?\\\\t%0, %1, %2\n+   sub%?\\\\t%0, %1, %2\n    #\"\n   \"&& (CONST_INT_P (operands[1])\n        && !const_ok_for_arm (INTVAL (operands[1])))\"\n@@ -1287,8 +1312,9 @@\n                       INTVAL (operands[1]), operands[0], operands[2], 0);\n   DONE;\n   \"\n-  [(set_attr \"length\" \"4,4,4,16\")\n-   (set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"length\" \"4,4,4,4,16\")\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\"  \"*,simple_alu_imm,*,*,*\")]\n )\n \n (define_peephole2\n@@ -1307,29 +1333,33 @@\n (define_insn \"*subsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n-\t (minus:SI (match_operand:SI 1 \"arm_rhs_operand\" \"r,I\")\n-\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rI,r\"))\n+\t (minus:SI (match_operand:SI 1 \"arm_rhs_operand\" \"r,r,I\")\n+\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"I,r,r\"))\n \t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(minus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"@\n+   sub%.\\\\t%0, %1, %2\n    sub%.\\\\t%0, %1, %2\n    rsb%.\\\\t%0, %2, %1\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\"  \"simple_alu_imm,*,*\")]\n )\n \n (define_insn \"*subsi3_compare\"\n   [(set (reg:CC CC_REGNUM)\n-\t(compare:CC (match_operand:SI 1 \"arm_rhs_operand\" \"r,I\")\n-\t\t    (match_operand:SI 2 \"arm_rhs_operand\" \"rI,r\")))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+\t(compare:CC (match_operand:SI 1 \"arm_rhs_operand\" \"r,r,I\")\n+\t\t    (match_operand:SI 2 \"arm_rhs_operand\" \"I,r,r\")))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(minus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"@\n+   sub%.\\\\t%0, %1, %2\n    sub%.\\\\t%0, %1, %2\n    rsb%.\\\\t%0, %2, %1\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"simple_alu_imm,*,*\")]\n )\n \n (define_expand \"decscc\"\n@@ -1351,7 +1381,8 @@\n    sub%d2\\\\t%0, %1, #1\n    mov%D2\\\\t%0, %1\\;sub%d2\\\\t%0, %1, #1\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"*,8\")]\n+   (set_attr \"length\" \"*,8\")\n+   (set_attr \"type\" \"simple_alu_imm,*\")]\n )\n \n (define_expand \"subsf3\"\n@@ -2207,13 +2238,14 @@\n \n ; ??? Check split length for Thumb-2\n (define_insn_and_split \"*arm_andsi3_insn\"\n-  [(set (match_operand:SI         0 \"s_register_operand\" \"=r,r,r\")\n-\t(and:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n-\t\t(match_operand:SI 2 \"reg_or_int_operand\" \"rI,K,?n\")))]\n+  [(set (match_operand:SI         0 \"s_register_operand\" \"=r,r,r,r\")\n+\t(and:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r,r\")\n+\t\t(match_operand:SI 2 \"reg_or_int_operand\" \"I,K,r,?n\")))]\n   \"TARGET_32BIT\"\n   \"@\n    and%?\\\\t%0, %1, %2\n    bic%?\\\\t%0, %1, #%B2\n+   and%?\\\\t%0, %1, %2\n    #\"\n   \"TARGET_32BIT\n    && CONST_INT_P (operands[2])\n@@ -2225,8 +2257,9 @@\n \t               INTVAL (operands[2]), operands[0], operands[1], 0);\n   DONE;\n   \"\n-  [(set_attr \"length\" \"4,4,16\")\n-   (set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"length\" \"4,4,4,16\")\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \t\"simple_alu_imm,simple_alu_imm,*,simple_alu_imm\")]\n )\n \n (define_insn \"*thumb1_andsi3_insn\"\n@@ -2236,35 +2269,40 @@\n   \"TARGET_THUMB1\"\n   \"and\\\\t%0, %2\"\n   [(set_attr \"length\" \"2\")\n+   (set_attr \"type\"  \"simple_alu_imm\")\n    (set_attr \"conds\" \"set\")])\n \n (define_insn \"*andsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n-\t (and:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t\t (match_operand:SI 2 \"arm_not_operand\" \"rI,K\"))\n+\t (and:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n+\t\t (match_operand:SI 2 \"arm_not_operand\" \"I,K,r\"))\n \t (const_int 0)))\n-   (set (match_operand:SI          0 \"s_register_operand\" \"=r,r\")\n+   (set (match_operand:SI          0 \"s_register_operand\" \"=r,r,r\")\n \t(and:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"@\n    and%.\\\\t%0, %1, %2\n-   bic%.\\\\t%0, %1, #%B2\"\n-  [(set_attr \"conds\" \"set\")]\n+   bic%.\\\\t%0, %1, #%B2\n+   and%.\\\\t%0, %1, %2\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"simple_alu_imm,simple_alu_imm,*\")]\n )\n \n (define_insn \"*andsi3_compare0_scratch\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n-\t (and:SI (match_operand:SI 0 \"s_register_operand\" \"r,r\")\n-\t\t (match_operand:SI 1 \"arm_not_operand\" \"rI,K\"))\n+\t (and:SI (match_operand:SI 0 \"s_register_operand\" \"r,r,r\")\n+\t\t (match_operand:SI 1 \"arm_not_operand\" \"I,K,r\"))\n \t (const_int 0)))\n-   (clobber (match_scratch:SI 2 \"=X,r\"))]\n+   (clobber (match_scratch:SI 2 \"=X,r,X\"))]\n   \"TARGET_32BIT\"\n   \"@\n    tst%?\\\\t%0, %1\n-   bic%.\\\\t%2, %0, #%B1\"\n-  [(set_attr \"conds\" \"set\")]\n+   bic%.\\\\t%2, %0, #%B1\n+   tst%?\\\\t%0, %1\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\"  \"simple_alu_imm,simple_alu_imm,*\")]\n )\n \n (define_insn \"*zeroextractsi_compare0_scratch\"\n@@ -2286,7 +2324,8 @@\n   return \\\"\\\";\n   \"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"simple_alu_imm\")]\n )\n \n (define_insn_and_split \"*ne_zeroextractsi\"\n@@ -2933,13 +2972,14 @@\n )\n \n (define_insn_and_split \"*iorsi3_insn\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n-\t(ior:SI (match_operand:SI 1 \"s_register_operand\" \"%r,r,r\")\n-\t\t(match_operand:SI 2 \"reg_or_int_operand\" \"rI,K,?n\")))]\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n+\t(ior:SI (match_operand:SI 1 \"s_register_operand\" \"%r,r,r,r\")\n+\t\t(match_operand:SI 2 \"reg_or_int_operand\" \"I,K,r,?n\")))]\n   \"TARGET_32BIT\"\n   \"@\n    orr%?\\\\t%0, %1, %2\n    orn%?\\\\t%0, %1, #%B2\n+   orr%?\\\\t%0, %1, %2\n    #\"\n   \"TARGET_32BIT\n    && CONST_INT_P (operands[2])\n@@ -2951,9 +2991,11 @@\n                       INTVAL (operands[2]), operands[0], operands[1], 0);\n   DONE;\n }\n-  [(set_attr \"length\" \"4,4,16\")\n-   (set_attr \"arch\" \"32,t2,32\")\n-   (set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"length\" \"4,4,4,16\")\n+   (set_attr \"arch\" \"32,t2,32,32\")\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"simple_alu_imm,simple_alu_imm,*,*\")]\n+)\n \n (define_insn \"*thumb1_iorsi3_insn\"\n   [(set (match_operand:SI         0 \"register_operand\" \"=l\")\n@@ -2979,25 +3021,27 @@\n \n (define_insn \"*iorsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (ior:SI (match_operand:SI 1 \"s_register_operand\" \"%r\")\n-\t\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI\"))\n+\t(compare:CC_NOOV (ior:SI (match_operand:SI 1 \"s_register_operand\" \"%r,r\")\n+\t\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"I,r\"))\n \t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(ior:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"orr%.\\\\t%0, %1, %2\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"simple_alu_imm,*\")]\n )\n \n (define_insn \"*iorsi3_compare0_scratch\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (ior:SI (match_operand:SI 1 \"s_register_operand\" \"%r\")\n-\t\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI\"))\n+\t(compare:CC_NOOV (ior:SI (match_operand:SI 1 \"s_register_operand\" \"%r,r\")\n+\t\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"I,r\"))\n \t\t\t (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=r\"))]\n+   (clobber (match_scratch:SI 0 \"=r,r\"))]\n   \"TARGET_32BIT\"\n   \"orr%.\\\\t%0, %1, %2\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"simple_alu_imm, *\")]\n )\n \n (define_expand \"xordi3\"\n@@ -3071,11 +3115,12 @@\n )\n \n (define_insn_and_split \"*arm_xorsi3\"\n-  [(set (match_operand:SI         0 \"s_register_operand\" \"=r,r\")\n-\t(xor:SI (match_operand:SI 1 \"s_register_operand\" \"%r,r\")\n-\t\t(match_operand:SI 2 \"reg_or_int_operand\" \"rI,?n\")))]\n+  [(set (match_operand:SI         0 \"s_register_operand\" \"=r,r,r\")\n+\t(xor:SI (match_operand:SI 1 \"s_register_operand\" \"%r,r,r\")\n+\t\t(match_operand:SI 2 \"reg_or_int_operand\" \"I,r,?n\")))]\n   \"TARGET_32BIT\"\n   \"@\n+   eor%?\\\\t%0, %1, %2\n    eor%?\\\\t%0, %1, %2\n    #\"\n   \"TARGET_32BIT\n@@ -3087,8 +3132,9 @@\n                       INTVAL (operands[2]), operands[0], operands[1], 0);\n   DONE;\n }\n-  [(set_attr \"length\" \"4,16\")\n-   (set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"length\" \"4,4,16\")\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\"  \"simple_alu_imm,*,*\")]\n )\n \n (define_insn \"*thumb1_xorsi3_insn\"\n@@ -3098,28 +3144,32 @@\n   \"TARGET_THUMB1\"\n   \"eor\\\\t%0, %2\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"conds\" \"set\")])\n+   (set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"simple_alu_imm\")]\n+)\n \n (define_insn \"*xorsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (xor:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI\"))\n+\t(compare:CC_NOOV (xor:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"I,r\"))\n \t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(xor:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"eor%.\\\\t%0, %1, %2\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"simple_alu_imm,*\")]\n )\n \n (define_insn \"*xorsi3_compare0_scratch\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (xor:SI (match_operand:SI 0 \"s_register_operand\" \"r\")\n-\t\t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"rI\"))\n+\t(compare:CC_NOOV (xor:SI (match_operand:SI 0 \"s_register_operand\" \"r,r\")\n+\t\t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"I,r\"))\n \t\t\t (const_int 0)))]\n   \"TARGET_32BIT\"\n   \"teq%?\\\\t%0, %1\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"simple_alu_imm, *\")]\n )\n \n ; By splitting (IOR (AND (NOT A) (NOT B)) C) as D = AND (IOR A B) (NOT C), \n@@ -4680,7 +4730,11 @@\n \t\t\t [(if_then_else (eq_attr \"is_arch6\" \"yes\")\n \t\t\t\t       (const_int 2) (const_int 4))\n \t\t\t (const_int 4)])\n-   (set_attr \"type\" \"alu_shift,load_byte\")]\n+   (set_attr_alternative \"type\"\n+                         [(if_then_else (eq_attr \"tune\" \"cortexa7\")\n+                                        (const_string \"simple_alu_imm\")\n+                                        (const_string \"alu_shift\"))\n+                          (const_string \"load_byte\")])]\n )\n \n (define_insn \"*arm_zero_extendhisi2\"\n@@ -4701,8 +4755,12 @@\n   \"@\n    uxth%?\\\\t%0, %1\n    ldr%(h%)\\\\t%0, %1\"\n-  [(set_attr \"type\" \"alu_shift,load_byte\")\n-   (set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr_alternative \"type\"\n+                         [(if_then_else (eq_attr \"tune\" \"cortexa7\")\n+                                        (const_string \"simple_alu_imm\")\n+                                        (const_string \"alu_shift\"))\n+                          (const_string \"load_byte\")])]\n )\n \n (define_insn \"*arm_zero_extendhisi2addsi\"\n@@ -4772,7 +4830,11 @@\n    uxtb\\\\t%0, %1\n    ldrb\\\\t%0, %1\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"type\" \"alu_shift,load_byte\")]\n+   (set_attr_alternative \"type\"\n+                         [(if_then_else (eq_attr \"tune\" \"cortexa7\")\n+                                        (const_string \"simple_alu_imm\")\n+                                        (const_string \"alu_shift\"))\n+                          (const_string \"load_byte\")])]\n )\n \n (define_insn \"*arm_zero_extendqisi2\"\n@@ -4794,7 +4856,11 @@\n   \"@\n    uxtb%(%)\\\\t%0, %1\n    ldr%(b%)\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n-  [(set_attr \"type\" \"alu_shift,load_byte\")\n+  [(set_attr_alternative \"type\"\n+                         [(if_then_else (eq_attr \"tune\" \"cortexa7\")\n+                                        (const_string \"simple_alu_imm\")\n+                                        (const_string \"alu_shift\"))\n+                          (const_string \"load_byte\")])\n    (set_attr \"predicable\" \"yes\")]\n )\n \n@@ -4968,7 +5034,11 @@\n \t\t\t [(if_then_else (eq_attr \"is_arch6\" \"yes\")\n \t\t\t\t\t(const_int 2) (const_int 4))\n \t\t\t  (const_int 4)])\n-   (set_attr \"type\" \"alu_shift,load_byte\")\n+   (set_attr_alternative \"type\"\n+                         [(if_then_else (eq_attr \"tune\" \"cortexa7\")\n+                                        (const_string \"simple_alu_imm\")\n+                                        (const_string \"alu_shift\"))\n+                          (const_string \"load_byte\")])\n    (set_attr \"pool_range\" \"*,1018\")]\n )\n \n@@ -5041,7 +5111,11 @@\n   \"@\n    sxth%?\\\\t%0, %1\n    ldr%(sh%)\\\\t%0, %1\"\n-  [(set_attr \"type\" \"alu_shift,load_byte\")\n+  [(set_attr_alternative \"type\"\n+                         [(if_then_else (eq_attr \"tune\" \"cortexa7\")\n+                                        (const_string \"simple_alu_imm\")\n+                                        (const_string \"alu_shift\"))\n+                          (const_string \"load_byte\")])\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,256\")\n    (set_attr \"neg_pool_range\" \"*,244\")]\n@@ -5141,7 +5215,11 @@\n   \"@\n    sxtb%?\\\\t%0, %1\n    ldr%(sb%)\\\\t%0, %1\"\n-  [(set_attr \"type\" \"alu_shift,load_byte\")\n+  [(set_attr_alternative \"type\"\n+                         [(if_then_else (eq_attr \"tune\" \"cortexa7\")\n+                                        (const_string \"simple_alu_imm\")\n+                                        (const_string \"alu_shift\"))\n+                          (const_string \"load_byte\")])\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,256\")\n    (set_attr \"neg_pool_range\" \"*,244\")]\n@@ -5254,7 +5332,12 @@\n \t\t\t  (const_int 2)\n \t\t\t  (if_then_else (eq_attr \"is_arch6\" \"yes\")\n \t\t\t\t\t(const_int 4) (const_int 6))])\n-   (set_attr \"type\" \"alu_shift,load_byte,load_byte\")]\n+   (set_attr_alternative \"type\"\n+                         [(if_then_else (eq_attr \"tune\" \"cortexa7\")\n+                                        (const_string \"simple_alu_imm\")\n+                                        (const_string \"alu_shift\"))\n+                          (const_string \"load_byte\")\n+                          (const_string \"load_byte\")])]\n )\n \n (define_expand \"extendsfdf2\"\n@@ -5628,7 +5711,7 @@\n    movw%?\\\\t%0, %1\n    ldr%?\\\\t%0, %1\n    str%?\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,*,*,*,load1,store1\")\n+  [(set_attr \"type\" \"*,simple_alu_imm,simple_alu_imm,simple_alu_imm,load1,store1\")\n    (set_attr \"insn\" \"mov,mov,mvn,mov,*,*\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,*,*,*,4096,*\")\n@@ -5930,7 +6013,8 @@\n   \"@\n    cmp%?\\\\t%0, #0\n    sub%.\\\\t%0, %1, #0\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"simple_alu_imm,simple_alu_imm\")]\n )\n \n ;; Subroutine to store a half word from a register into memory.\n@@ -6343,22 +6427,30 @@\n    mvn%?\\\\t%0, #%B1\\\\t%@ movhi\n    str%(h%)\\\\t%1, %0\\\\t%@ movhi\n    ldr%(h%)\\\\t%0, %1\\\\t%@ movhi\"\n-  [(set_attr \"type\" \"*,*,store1,load1\")\n-   (set_attr \"predicable\" \"yes\")\n+  [(set_attr \"predicable\" \"yes\")\n    (set_attr \"insn\" \"mov,mvn,*,*\")\n    (set_attr \"pool_range\" \"*,*,*,256\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,244\")]\n+   (set_attr \"neg_pool_range\" \"*,*,*,244\")\n+   (set_attr_alternative \"type\"\n+                         [(if_then_else (match_operand 1 \"const_int_operand\" \"\")\n+                                        (const_string \"simple_alu_imm\" )\n+                                        (const_string \"*\"))\n+                          (const_string \"simple_alu_imm\")\n+                          (const_string \"store1\")\n+                          (const_string \"load1\")])]\n )\n \n (define_insn \"*movhi_bytes\"\n-  [(set (match_operand:HI 0 \"s_register_operand\" \"=r,r\")\n-\t(match_operand:HI 1 \"arm_rhs_operand\"  \"rI,K\"))]\n+  [(set (match_operand:HI 0 \"s_register_operand\" \"=r,r,r\")\n+\t(match_operand:HI 1 \"arm_rhs_operand\"  \"I,r,K\"))]\n   \"TARGET_ARM\"\n   \"@\n+   mov%?\\\\t%0, %1\\\\t%@ movhi\n    mov%?\\\\t%0, %1\\\\t%@ movhi\n    mvn%?\\\\t%0, #%B1\\\\t%@ movhi\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"insn\" \"mov,mvn\")]\n+   (set_attr \"insn\" \"mov, mov,mvn\")\n+   (set_attr \"type\" \"simple_alu_imm,*,simple_alu_imm\")]\n )\n \n (define_expand \"thumb_movhi_clobber\"\n@@ -6483,23 +6575,24 @@\n \n \n (define_insn \"*arm_movqi_insn\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,l,Uu,r,m\")\n-\t(match_operand:QI 1 \"general_operand\" \"rI,K,Uu,l,m,r\"))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,r,l,Uu,r,m\")\n+\t(match_operand:QI 1 \"general_operand\" \"r,I,K,Uu,l,m,r\"))]\n   \"TARGET_32BIT\n    && (   register_operand (operands[0], QImode)\n        || register_operand (operands[1], QImode))\"\n   \"@\n+   mov%?\\\\t%0, %1\n    mov%?\\\\t%0, %1\n    mvn%?\\\\t%0, #%B1\n    ldr%(b%)\\\\t%0, %1\n    str%(b%)\\\\t%1, %0\n    ldr%(b%)\\\\t%0, %1\n    str%(b%)\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,*,load1,store1,load1,store1\")\n-   (set_attr \"insn\" \"mov,mvn,*,*,*,*\")\n+  [(set_attr \"type\" \"*,simple_alu_imm,simple_alu_imm,load1, store1, load1, store1\")\n+   (set_attr \"insn\" \"mov,mov,mvn,*,*,*,*\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"arch\" \"any,any,t2,t2,any,any\")\n-   (set_attr \"length\" \"4,4,2,2,4,4\")]\n+   (set_attr \"arch\" \"any,any,any,t2,t2,any,any\")\n+   (set_attr \"length\" \"4,4,4,2,2,4,4\")]\n )\n \n (define_insn \"*thumb1_movqi_insn\"\n@@ -6516,7 +6609,7 @@\n    mov\\\\t%0, %1\n    mov\\\\t%0, %1\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"type\" \"*,load1,store1,*,*,*\")\n+   (set_attr \"type\" \"simple_alu_imm,load1,store1,*,*,simple_alu_imm\")\n    (set_attr \"insn\" \"*,*,*,mov,mov,mov\")\n    (set_attr \"pool_range\" \"*,32,*,*,*,*\")\n    (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond,clob\")])\n@@ -7602,7 +7695,8 @@\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"arch\" \"t2,t2,any,any\")\n    (set_attr \"length\" \"2,2,4,4\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"*,*,*,simple_alu_imm\")]\n )\n \n (define_insn \"*cmpsi_shiftsi\"\n@@ -8167,7 +8261,20 @@\n    mvn%d3\\\\t%0, #%B1\\;mvn%D3\\\\t%0, #%B2\"\n   [(set_attr \"length\" \"4,4,4,4,8,8,8,8\")\n    (set_attr \"conds\" \"use\")\n-   (set_attr \"insn\" \"mov,mvn,mov,mvn,mov,mov,mvn,mvn\")]\n+   (set_attr \"insn\" \"mov,mvn,mov,mvn,mov,mov,mvn,mvn\")\n+   (set_attr_alternative \"type\"\n+                         [(if_then_else (match_operand 2 \"const_int_operand\" \"\")\n+                                        (const_string \"simple_alu_imm\")\n+                                        (const_string \"*\"))\n+                          (const_string \"simple_alu_imm\")\n+                          (if_then_else (match_operand 1 \"const_int_operand\" \"\")\n+                                        (const_string \"simple_alu_imm\")\n+                                        (const_string \"*\"))\n+                          (const_string \"simple_alu_imm\")\n+                          (const_string \"*\")\n+                          (const_string \"*\")\n+                          (const_string \"*\")\n+                          (const_string \"*\")])]\n )\n \n (define_insn \"*movsfcc_soft_insn\"\n@@ -9967,7 +10074,13 @@\n    sub%d4\\\\t%0, %2, #%n3\\;mov%D4\\\\t%0, %1\"\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"length\" \"4,4,8,8\")\n-   (set_attr \"type\" \"*,*,*,*\")]\n+   (set_attr_alternative \"type\"\n+                         [(if_then_else (match_operand 3 \"const_int_operand\" \"\")\n+                                        (const_string \"simple_alu_imm\" )\n+                                        (const_string \"*\"))\n+                          (const_string \"simple_alu_imm\")\n+                          (const_string \"*\")\n+                          (const_string \"*\")])]\n )\n \n (define_insn \"*ifcompare_move_plus\"\n@@ -10003,7 +10116,13 @@\n    sub%D4\\\\t%0, %2, #%n3\\;mov%d4\\\\t%0, %1\"\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"length\" \"4,4,8,8\")\n-   (set_attr \"type\" \"*,*,*,*\")]\n+   (set_attr_alternative \"type\"\n+                         [(if_then_else (match_operand 3 \"const_int_operand\" \"\")\n+                                        (const_string \"simple_alu_imm\" )\n+                                        (const_string \"*\"))\n+                          (const_string \"simple_alu_imm\")\n+                          (const_string \"*\")\n+                          (const_string \"*\")])]\n )\n \n (define_insn \"*ifcompare_arith_arith\""}, {"sha": "3d3ff23e7c64edfb6579a23ecb2cdf31b113cb15", "filename": "gcc/config/arm/arm1020e.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Farm1020e.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Farm1020e.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1020e.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -66,7 +66,7 @@\n ;; ALU operations with no shifted operand\n (define_insn_reservation \"1020alu_op\" 1 \n  (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n-      (eq_attr \"type\" \"alu\"))\n+      (eq_attr \"type\" \"alu_reg,simple_alu_imm\"))\n  \"1020a_e,1020a_m,1020a_w\")\n \n ;; ALU operations with a shift-by-constant operand"}, {"sha": "d9ed858f8614de04a80d08e2036873bdb020f84d", "filename": "gcc/config/arm/arm1026ejs.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Farm1026ejs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Farm1026ejs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1026ejs.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -66,7 +66,7 @@\n ;; ALU operations with no shifted operand\n (define_insn_reservation \"alu_op\" 1 \n  (and (eq_attr \"tune\" \"arm1026ejs\")\n-      (eq_attr \"type\" \"alu\"))\n+      (eq_attr \"type\" \"alu_reg,simple_alu_imm\"))\n  \"a_e,a_m,a_w\")\n \n ;; ALU operations with a shift-by-constant operand"}, {"sha": "ff5e614b37b6fe2a05ccc8c6f134838cfb3ea74d", "filename": "gcc/config/arm/arm1136jfs.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Farm1136jfs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Farm1136jfs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1136jfs.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -75,7 +75,7 @@\n ;; ALU operations with no shifted operand\n (define_insn_reservation \"11_alu_op\" 2\n  (and (eq_attr \"tune\" \"arm1136js,arm1136jfs\")\n-      (eq_attr \"type\" \"alu\"))\n+      (eq_attr \"type\" \"alu_reg,simple_alu_imm\"))\n  \"e_1,e_2,e_3,e_wb\")\n \n ;; ALU operations with a shift-by-constant operand"}, {"sha": "656a90e41af750134e8521d1b35e7d6b226b2ea8", "filename": "gcc/config/arm/arm926ejs.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Farm926ejs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Farm926ejs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm926ejs.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -58,7 +58,7 @@\n ;; ALU operations with no shifted operand\n (define_insn_reservation \"9_alu_op\" 1 \n  (and (eq_attr \"tune\" \"arm926ejs\")\n-      (eq_attr \"type\" \"alu,alu_shift\"))\n+      (eq_attr \"type\" \"alu_reg,simple_alu_imm,alu_shift\"))\n  \"e,m,w\")\n \n ;; ALU operations with a shift-by-register operand"}, {"sha": "f25fcee9f01f024ee3302bc154112347396fc6c2", "filename": "gcc/config/arm/cortex-a15.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fcortex-a15.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fcortex-a15.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a15.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -61,7 +61,7 @@\n ;; Simple ALU without shift\n (define_insn_reservation \"cortex_a15_alu\" 2\n   (and (eq_attr \"tune\" \"cortexa15\")\n-       (and (eq_attr \"type\" \"alu\")\n+       (and (eq_attr \"type\" \"alu_reg,simple_alu_imm\")\n             (eq_attr \"neon_type\" \"none\")))\n   \"ca15_issue1,(ca15_sx1,ca15_sx1_alu)|(ca15_sx2,ca15_sx2_alu)\")\n "}, {"sha": "1121c7effcf281e8bb0d9dd8c655864427b3b2ba", "filename": "gcc/config/arm/cortex-a5.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fcortex-a5.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fcortex-a5.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a5.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -58,7 +58,7 @@\n \n (define_insn_reservation \"cortex_a5_alu\" 2\n   (and (eq_attr \"tune\" \"cortexa5\")\n-       (eq_attr \"type\" \"alu\"))\n+       (eq_attr \"type\" \"alu_reg,simple_alu_imm\"))\n   \"cortex_a5_ex1\")\n \n (define_insn_reservation \"cortex_a5_alu_shift\" 2"}, {"sha": "7c266d3b71fd35f2bee263429108b6a9442b1913", "filename": "gcc/config/arm/cortex-a8.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fcortex-a8.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fcortex-a8.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a8.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -85,7 +85,7 @@\n ;; (source read in E2 and destination available at the end of that cycle).\n (define_insn_reservation \"cortex_a8_alu\" 2\n   (and (eq_attr \"tune\" \"cortexa8\")\n-       (ior (and (and (eq_attr \"type\" \"alu\")\n+       (ior (and (and (eq_attr \"type\" \"alu_reg,simple_alu_imm\")\n \t\t      (eq_attr \"neon_type\" \"none\"))\n \t\t (not (eq_attr \"insn\" \"mov,mvn\")))\n             (eq_attr \"insn\" \"clz\")))\n@@ -107,7 +107,7 @@\n \n (define_insn_reservation \"cortex_a8_mov\" 1\n   (and (eq_attr \"tune\" \"cortexa8\")\n-       (and (eq_attr \"type\" \"alu,alu_shift,alu_shift_reg\")\n+       (and (eq_attr \"type\" \"alu_reg,simple_alu_imm,alu_shift,alu_shift_reg\")\n             (eq_attr \"insn\" \"mov,mvn\")))\n   \"cortex_a8_default\")\n "}, {"sha": "336c4fcefae5ad05f5d31382bece8931b10a848e", "filename": "gcc/config/arm/cortex-a9.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fcortex-a9.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fcortex-a9.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a9.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -80,7 +80,7 @@ cortex_a9_p1_e2 + cortex_a9_p0_e1 + cortex_a9_p1_e1\")\n ;; which can go down E2 without any problem.\n (define_insn_reservation \"cortex_a9_dp\" 2\n   (and (eq_attr \"tune\" \"cortexa9\")\n-         (ior (and (eq_attr \"type\" \"alu\")\n+         (ior (and (eq_attr \"type\" \"alu_reg,simple_alu_imm\")\n                         (eq_attr \"neon_type\" \"none\"))\n \t      (and (and (eq_attr \"type\" \"alu_shift_reg, alu_shift\")\n \t\t\t(eq_attr \"insn\" \"mov\"))"}, {"sha": "bff17dd77fba06384363b2d9f8796deb81c4f76e", "filename": "gcc/config/arm/cortex-m4.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fcortex-m4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fcortex-m4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-m4.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -31,7 +31,7 @@\n ;; ALU and multiply is one cycle.\n (define_insn_reservation \"cortex_m4_alu\" 1\n   (and (eq_attr \"tune\" \"cortexm4\")\n-       (eq_attr \"type\" \"alu,alu_shift,alu_shift_reg,mult\"))\n+       (eq_attr \"type\" \"alu_reg,simple_alu_imm,alu_shift,alu_shift_reg,mult\"))\n   \"cortex_m4_ex\")\n \n ;; Byte, half-word and word load is two cycles."}, {"sha": "26de65aa1b3d89c949b24d203e93d1497ed1593f", "filename": "gcc/config/arm/cortex-r4.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fcortex-r4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fcortex-r4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-r4.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -78,13 +78,13 @@\n ;; for the purposes of the dual-issue constraints above.\n (define_insn_reservation \"cortex_r4_alu\" 2\n   (and (eq_attr \"tune_cortexr4\" \"yes\")\n-       (and (eq_attr \"type\" \"alu\")\n+       (and (eq_attr \"type\" \"alu_reg,simple_alu_imm\")\n             (not (eq_attr \"insn\" \"mov\"))))\n   \"cortex_r4_alu\")\n \n (define_insn_reservation \"cortex_r4_mov\" 2\n   (and (eq_attr \"tune_cortexr4\" \"yes\")\n-       (and (eq_attr \"type\" \"alu\")\n+       (and (eq_attr \"type\" \"alu_reg,simple_alu_imm\")\n             (eq_attr \"insn\" \"mov\")))\n   \"cortex_r4_mov\")\n "}, {"sha": "2b89bb5429b41e9183bc55949f2a54bf55fec7fd", "filename": "gcc/config/arm/fa526.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Ffa526.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Ffa526.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa526.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -62,7 +62,7 @@\n ;; ALU operations\n (define_insn_reservation \"526_alu_op\" 1\n  (and (eq_attr \"tune\" \"fa526\")\n-      (eq_attr \"type\" \"alu\"))\n+      (eq_attr \"type\" \"alu_reg,simple_alu_imm\"))\n  \"fa526_core\")\n \n (define_insn_reservation \"526_alu_shift_op\" 2"}, {"sha": "4725b93b6cc5bf13d375103e8769db05591661e2", "filename": "gcc/config/arm/fa606te.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Ffa606te.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Ffa606te.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa606te.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -62,7 +62,7 @@\n ;; ALU operations\n (define_insn_reservation \"606te_alu_op\" 1\n  (and (eq_attr \"tune\" \"fa606te\")\n-      (eq_attr \"type\" \"alu,alu_shift,alu_shift_reg\"))\n+      (eq_attr \"type\" \"alu_reg,simple_alu_imm,alu_shift,alu_shift_reg\"))\n  \"fa606te_core\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "bed3995a5e2548cf63f1055c3d0d7c757c479b5d", "filename": "gcc/config/arm/fa626te.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Ffa626te.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Ffa626te.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa626te.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -68,7 +68,7 @@\n ;; ALU operations\n (define_insn_reservation \"626te_alu_op\" 1\n  (and (eq_attr \"tune\" \"fa626,fa626te\")\n-      (eq_attr \"type\" \"alu\"))\n+      (eq_attr \"type\" \"alu_reg,simple_alu_imm\"))\n  \"fa626te_core\")\n \n (define_insn_reservation \"626te_alu_shift_op\" 2"}, {"sha": "a4c256ce22e7f9fdf33cdf81821ca6588c8583b3", "filename": "gcc/config/arm/fa726te.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Ffa726te.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Ffa726te.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa726te.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -85,7 +85,7 @@\n ;; Other ALU instructions 2 cycles.\n (define_insn_reservation \"726te_alu_op\" 1\n  (and (eq_attr \"tune\" \"fa726te\")\n-      (and (eq_attr \"type\" \"alu\")\n+      (and (eq_attr \"type\" \"alu_reg,simple_alu_imm\")\n            (not (eq_attr \"insn\" \"mov,mvn\"))))\n   \"fa726te_issue+(fa726te_alu0_pipe|fa726te_alu1_pipe)\")\n "}, {"sha": "228817c85e5c5fa07b7a9c83d752005017eb8da4", "filename": "gcc/config/arm/fmp626.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Ffmp626.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Ffmp626.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffmp626.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -63,7 +63,7 @@\n ;; ALU operations\n (define_insn_reservation \"mp626_alu_op\" 1\n  (and (eq_attr \"tune\" \"fmp626\")\n-      (eq_attr \"type\" \"alu\"))\n+      (eq_attr \"type\" \"alu_reg,simple_alu_imm\"))\n  \"fmp626_core\")\n \n (define_insn_reservation \"mp626_alu_shift_op\" 2"}, {"sha": "01562d4b9ffe5342331b1bff6cd0f845db43a8f8", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -193,7 +193,7 @@\n     }\n }\n  [(set_attr \"neon_type\" \"neon_int_1,*,neon_vmov,*,neon_mrrc,neon_mcr_2_mcrr,*,*,*\")\n-  (set_attr \"type\" \"*,f_stored,*,f_loadd,*,*,alu,load2,store2\")\n+  (set_attr \"type\" \"*,f_stored,*,f_loadd,*,*,alu_reg,load2,store2\")\n   (set_attr \"insn\" \"*,*,*,*,*,*,mov,*,*\")\n   (set_attr \"length\" \"4,4,4,4,4,4,8,8,8\")\n   (set_attr \"arm_pool_range\"     \"*,*,*,1020,*,*,*,1020,*\")\n@@ -239,7 +239,7 @@\n }\n   [(set_attr \"neon_type\" \"neon_int_1,neon_stm_2,neon_vmov,neon_ldm_2,\\\n                           neon_mrrc,neon_mcr_2_mcrr,*,*,*\")\n-   (set_attr \"type\" \"*,*,*,*,*,*,alu,load4,store4\")\n+   (set_attr \"type\" \"*,*,*,*,*,*,alu_reg,load4,store4\")\n    (set_attr \"insn\" \"*,*,*,*,*,*,mov,*,*\")\n    (set_attr \"length\" \"4,8,4,8,8,8,16,8,16\")\n    (set_attr \"arm_pool_range\" \"*,*,*,1020,*,*,*,1020,*\")"}, {"sha": "de573ca08104f9d875966a6411177cf850442d8c", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -1,5 +1,5 @@\n ;; ARM Thumb-2 Machine Description\n-;; Copyright (C) 2007, 2008, 2010 Free Software Foundation, Inc.\n+;; Copyright (C) 2007, 2008, 2010, 2012 Free Software Foundation, Inc.\n ;; Written by CodeSourcery, LLC.\n ;;\n ;; This file is part of GCC.\n@@ -180,7 +180,7 @@\n    ldr%?\\\\t%0, %1\n    str%?\\\\t%1, %0\n    str%?\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,*,*,*,load1,load1,store1,store1\")\n+  [(set_attr \"type\" \"*,*,simple_alu_imm,*,load1,load1,store1,store1\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,*,*,*,1018,4094,*,*\")\n    (set_attr \"neg_pool_range\" \"*,*,*,*,0,0,*,*\")]\n@@ -568,7 +568,11 @@\n   \"@\n    sxtb%?\\\\t%0, %1\n    ldr%(sb%)\\\\t%0, %1\"\n-  [(set_attr \"type\" \"alu_shift,load_byte\")\n+  [(set_attr_alternative \"type\"\n+                         [(if_then_else (eq_attr \"tune\" \"cortexa7\")\n+                                        (const_string \"simple_alu_imm\")\n+                                        (const_string \"alu_shift\"))\n+                          (const_string \"load_byte\")])\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,4094\")\n    (set_attr \"neg_pool_range\" \"*,250\")]\n@@ -581,7 +585,11 @@\n   \"@\n    uxth%?\\\\t%0, %1\n    ldr%(h%)\\\\t%0, %1\"\n-  [(set_attr \"type\" \"alu_shift,load_byte\")\n+  [(set_attr_alternative \"type\"\n+                         [(if_then_else (eq_attr \"tune\" \"cortexa7\")\n+                                        (const_string \"simple_alu_imm\")\n+                                        (const_string \"alu_shift\"))\n+                          (const_string \"load_byte\")])\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,4094\")\n    (set_attr \"neg_pool_range\" \"*,250\")]\n@@ -594,7 +602,11 @@\n   \"@\n    uxtb%(%)\\\\t%0, %1\n    ldr%(b%)\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n-  [(set_attr \"type\" \"alu_shift,load_byte\")\n+  [(set_attr_alternative \"type\"\n+                         [(if_then_else (eq_attr \"tune\" \"cortexa7\")\n+                                        (const_string \"simple_alu_imm\")\n+                                        (const_string \"alu_shift\"))\n+                          (const_string \"load_byte\")])\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,4094\")\n    (set_attr \"neg_pool_range\" \"*,250\")]\n@@ -790,8 +802,8 @@\n (define_insn \"*thumb2_addsi3_compare0_scratch\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n-\t  (plus:SI (match_operand:SI 0 \"s_register_operand\" \"l,  r\")\n-\t\t   (match_operand:SI 1 \"arm_add_operand\"    \"lPv,rIL\"))\n+\t  (plus:SI (match_operand:SI 0 \"s_register_operand\" \"l,l,  r,r\")\n+\t\t   (match_operand:SI 1 \"arm_add_operand\"    \"Pv,l,IL,r\"))\n \t  (const_int 0)))]\n   \"TARGET_THUMB2\"\n   \"*\n@@ -808,7 +820,8 @@\n       return \\\"cmn\\\\t%0, %1\\\";\n   \"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"length\" \"2,4\")]\n+   (set_attr \"length\" \"2,2,4,4\")\n+   (set_attr \"type\"   \"simple_alu_imm,*,simple_alu_imm,*\")]\n )\n \n (define_insn \"*thumb2_mulsi_short\""}, {"sha": "a5c461df36f9dd6613a03d5d68d58dab851252ba", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148413a4ebf0e53a95183aa3bdf6eff032cbaa56/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=148413a4ebf0e53a95183aa3bdf6eff032cbaa56", "patch": "@@ -77,7 +77,7 @@\n     }\n   \"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"*,*,*,*,load1,store1,r_2_f,f_2_r,fcpys,f_loads,f_stores\")\n+   (set_attr \"type\" \"*,*,simple_alu_imm,simple_alu_imm,load1,store1,r_2_f,f_2_r,fcpys,f_loads,f_stores\")\n    (set_attr \"neon_type\" \"*,*,*,*,*,*,neon_mcr,neon_mrc,neon_vmov,*,*\")\n    (set_attr \"insn\" \"mov,mov,mvn,mov,*,*,*,*,*,*,*\")\n    (set_attr \"pool_range\"     \"*,*,*,*,4096,*,*,*,*,1020,*\")"}]}