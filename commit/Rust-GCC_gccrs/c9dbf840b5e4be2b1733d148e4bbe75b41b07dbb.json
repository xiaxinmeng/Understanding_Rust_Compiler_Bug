{"sha": "c9dbf840b5e4be2b1733d148e4bbe75b41b07dbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlkYmY4NDBiNWU0YmUyYjE3MzNkMTQ4ZTRiYmU3NWI0MWIwN2RiYg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2004-11-06T03:35:49Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-11-06T03:35:49Z"}, "message": "rs6000.md (scc patterns): Replace subfc with subf when carry not used.\n\n        * config/rs6000/rs6000.md (scc patterns): Replace subfc with subf\n        when carry not used.  Suggested by Torbjorn Granlund.\n\n        * config/rs6000/rs6000.c (rs6000_emit_move): Don't force_reg\n        operand[1] unnecessarily.  Suggested by Eric Christopher.\n        (rs6000_adjust_cost): Increase latency of store to wider load.\n        (rs6000_rtx_costs): mulli only allows 16-bit constants.\n\nFrom-SVN: r90159", "tree": {"sha": "b37337cd6c4c34abe4a31e3be3402724ae1f3347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b37337cd6c4c34abe4a31e3be3402724ae1f3347"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9dbf840b5e4be2b1733d148e4bbe75b41b07dbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9dbf840b5e4be2b1733d148e4bbe75b41b07dbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9dbf840b5e4be2b1733d148e4bbe75b41b07dbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9dbf840b5e4be2b1733d148e4bbe75b41b07dbb/comments", "author": null, "committer": null, "parents": [{"sha": "77f7df83a4ca5ac2695b2079480fe0f4f41b8f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f7df83a4ca5ac2695b2079480fe0f4f41b8f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77f7df83a4ca5ac2695b2079480fe0f4f41b8f9a"}], "stats": {"total": 83, "additions": 55, "deletions": 28}, "files": [{"sha": "cdc6831889d9a82b74ec58d4469b581827996b6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9dbf840b5e4be2b1733d148e4bbe75b41b07dbb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9dbf840b5e4be2b1733d148e4bbe75b41b07dbb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9dbf840b5e4be2b1733d148e4bbe75b41b07dbb", "patch": "@@ -1,3 +1,13 @@\n+2004-11-05  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (scc patterns): Replace subfc with subf\n+\twhen carry not used.  Suggested by Torbjorn Granlund.\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_move): Don't force_reg\n+\toperand[1] unnecessarily.  Suggested by Eric Christopher.\n+\t(rs6000_adjust_cost): Increase latency of store to wider load.\n+\t(rs6000_rtx_costs): mulli only allows 16-bit constants.\n+\n 2004-11-05  Stan Shebs  <shebs@apple.com>\n \n \t* config/rs6000/rs6000.c (machopic_output_stub): Output"}, {"sha": "fffdf0ca3fdfee9cf06f112b947a5362e73a6dc3", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9dbf840b5e4be2b1733d148e4bbe75b41b07dbb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9dbf840b5e4be2b1733d148e4bbe75b41b07dbb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c9dbf840b5e4be2b1733d148e4bbe75b41b07dbb", "patch": "@@ -4264,7 +4264,8 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n       return;\n     }\n \n-  if (!no_new_pseudos && GET_CODE (operands[0]) != REG)\n+  if (!no_new_pseudos && GET_CODE (operands[0]) != REG\n+      && !gpc_reg_operand (operands[1], mode))\n     operands[1] = force_reg (mode, operands[1]);\n \n   if (mode == SFmode && ! TARGET_POWERPC\n@@ -15735,6 +15736,17 @@ rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n     {\n       /* Data dependency; DEP_INSN writes a register that INSN reads\n \t some cycles later.  */\n+\n+      /* Separate a load from a narrower, dependent store.  */\n+      if (rs6000_sched_groups\n+\t  && GET_CODE (PATTERN (insn)) == SET\n+\t  && GET_CODE (PATTERN (dep_insn)) == SET\n+\t  && GET_CODE (XEXP (PATTERN (insn), 1)) == MEM\n+\t  && GET_CODE (XEXP (PATTERN (dep_insn), 0)) == MEM\n+\t  && (GET_MODE_SIZE (GET_MODE (XEXP (PATTERN (insn), 1)))\n+\t      > GET_MODE_SIZE (GET_MODE (XEXP (PATTERN (dep_insn), 0)))))\n+\treturn cost + 14;\n+\n       switch (get_attr_type (insn))\n \t{\n \tcase TYPE_JMPREG:\n@@ -17831,7 +17843,8 @@ rs6000_rtx_costs (rtx x, int code, int outer_code, int *total)\n       return false;\n \n     case MULT:\n-      if (GET_CODE (XEXP (x, 1)) == CONST_INT)\n+      if (GET_CODE (XEXP (x, 1)) == CONST_INT\n+\t  && CONST_OK_FOR_LETTER_P (INTVAL (XEXP (x, 1)), 'I'))\n \t{\n \t  if (INTVAL (XEXP (x, 1)) >= -256\n \t      && INTVAL (XEXP (x, 1)) <= 255)"}, {"sha": "37f5883239a3af4d54e075e1463a219b30c2b12b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9dbf840b5e4be2b1733d148e4bbe75b41b07dbb/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9dbf840b5e4be2b1733d148e4bbe75b41b07dbb/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c9dbf840b5e4be2b1733d148e4bbe75b41b07dbb", "patch": "@@ -12623,14 +12623,16 @@\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r\")\n-\t(plus:SI (ltu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\"))\n-\t\t (match_operand:SI 3 \"reg_or_short_operand\" \"rI,rI\")))]\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r,&r,&r\")\n+\t(plus:SI (ltu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,r,P,P\"))\n+\t\t (match_operand:SI 3 \"reg_or_short_operand\" \"r,I,r,I\")))]\n   \"TARGET_32BIT\"\n   \"@\n-  {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;{sf%I3|subf%I3c} %0,%0,%3\n-  {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;{sf%I3|subf%I3c} %0,%0,%3\"\n+  {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;{sf|subf} %0,%0,%3\n+  {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;{sfi|subfic} %0,%0,%3\n+  {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;{sf|subf} %0,%0,%3\n+  {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;{sfi|subfic} %0,%0,%3\"\n  [(set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n@@ -12643,8 +12645,8 @@\n    (clobber (match_scratch:SI 4 \"=&r,&r,&r,&r\"))]\n   \"TARGET_32BIT\"\n   \"@\n-   {sf|subfc} %4,%2,%1\\;{sfe|subfe} %4,%4,%4\\;{sf.|subfc.} %4,%4,%3\n-   {ai|addic} %4,%1,%n2\\;{sfe|subfe} %4,%4,%4\\;{sf.|subfc.} %4,%4,%3\n+   {sf|subfc} %4,%2,%1\\;{sfe|subfe} %4,%4,%4\\;{sf.|subf.} %4,%4,%3\n+   {ai|addic} %4,%1,%n2\\;{sfe|subfe} %4,%4,%4\\;{sf.|subf.} %4,%4,%3\n    #\n    #\"\n   [(set_attr \"type\" \"compare\")\n@@ -12678,8 +12680,8 @@\n \t(plus:SI (ltu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n   \"TARGET_32BIT\"\n   \"@\n-   {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;{sf.|subfc.} %0,%0,%3\n-   {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;{sf.|subfc.} %0,%0,%3\n+   {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;{sf.|subf.} %0,%0,%3\n+   {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;{sf.|subf.} %0,%0,%3\n    #\n    #\"\n   [(set_attr \"type\" \"compare\")\n@@ -13539,26 +13541,28 @@\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r\")\n-\t(plus:SI (gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"I,rI\"))\n-\t\t (match_operand:SI 3 \"reg_or_short_operand\" \"r,rI\")))]\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r,&r\")\n+\t(plus:SI (gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r\")\n+\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"I,rI,rI\"))\n+\t\t (match_operand:SI 3 \"reg_or_short_operand\" \"r,r,I\")))]\n   \"TARGET_32BIT\"\n   \"@\n    {ai|addic} %0,%1,%k2\\;{aze|addze} %0,%3\n-   {sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;{sf%I3|subf%I3c} %0,%0,%3\"\n-  [(set_attr \"length\" \"8,12\")])\n+   {sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;{sf|subf} %0,%0,%3\n+   {sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;{sfi|subfic} %0,%0,%3\"\n+  [(set_attr \"length\" \"8,12,12\")])\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,&r\")\n-\t(plus:DI (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:DI 2 \"reg_or_short_operand\" \"I,rI\"))\n-\t\t (match_operand:DI 3 \"reg_or_short_operand\" \"r,rI\")))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,&r,&r\")\n+\t(plus:DI (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r\")\n+\t\t\t (match_operand:DI 2 \"reg_or_short_operand\" \"I,rI,rI\"))\n+\t\t (match_operand:DI 3 \"reg_or_short_operand\" \"r,r,I\")))]\n   \"TARGET_64BIT\"\n   \"@\n    addic %0,%1,%k2\\;addze %0,%3\n-   subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;subf%I3c %0,%0,%3\"\n-  [(set_attr \"length\" \"8,12\")])\n+   subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;subf %0,%0,%3\n+   subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;subfic %0,%0,%3\"\n+  [(set_attr \"length\" \"8,12,12\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n@@ -13571,7 +13575,7 @@\n   \"TARGET_32BIT\"\n   \"@\n    {ai|addic} %4,%1,%k2\\;{aze.|addze.} %4,%3\n-   {sf%I2|subf%I2c} %4,%1,%2\\;{sfe|subfe} %4,%4,%4\\;{sf.|subfc.} %4,%4,%3\n+   {sf%I2|subf%I2c} %4,%1,%2\\;{sfe|subfe} %4,%4,%4\\;{sf.|subf.} %4,%4,%3\n    #\n    #\"\n   [(set_attr \"type\" \"compare\")\n@@ -13605,7 +13609,7 @@\n   \"TARGET_64BIT\"\n   \"@\n    addic %4,%1,%k2\\;addze. %4,%3\n-   subf%I2c %4,%1,%2\\;subfe %4,%4,%4\\;subfc. %4,%4,%3\n+   subf%I2c %4,%1,%2\\;subfe %4,%4,%4\\;subf. %4,%4,%3\n    #\n    #\"\n   [(set_attr \"type\" \"compare\")\n@@ -13640,7 +13644,7 @@\n   \"TARGET_32BIT\"\n   \"@\n    {ai|addic} %0,%1,%k2\\;{aze.|addze.} %0,%3\n-   {sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;{sf.|subfc.} %0,%0,%3\n+   {sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;{sf.|subf.} %0,%0,%3\n    #\n    #\"\n   [(set_attr \"type\" \"compare\")\n@@ -13675,7 +13679,7 @@\n   \"TARGET_64BIT\"\n   \"@\n    addic %0,%1,%k2\\;addze. %0,%3\n-   subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;subfc. %0,%0,%3\n+   subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;subf. %0,%0,%3\n    #\n    #\"\n   [(set_attr \"type\" \"compare\")"}]}