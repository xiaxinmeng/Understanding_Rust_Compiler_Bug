{"sha": "294a3e20e5bf4290cf9001d1a532a155af3bca9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk0YTNlMjBlNWJmNDI5MGNmOTAwMWQxYTUzMmExNTVhZjNiY2E5Yw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-02-28T00:07:06Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-02-28T00:07:06Z"}, "message": "PR c++/88857 - ICE with value-initialization of argument in template.\n\n\t* call.c (convert_like_real): Don't call build_value_init in template.\n\n\t* g++.dg/cpp0x/initlist-value4.C: New test.\n\nFrom-SVN: r269267", "tree": {"sha": "849feb9ca1457ec69248badfd3806bd5945aeaf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/849feb9ca1457ec69248badfd3806bd5945aeaf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/294a3e20e5bf4290cf9001d1a532a155af3bca9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294a3e20e5bf4290cf9001d1a532a155af3bca9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294a3e20e5bf4290cf9001d1a532a155af3bca9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294a3e20e5bf4290cf9001d1a532a155af3bca9c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cba8a572c208078c1c6eb9845b54f960526c53c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba8a572c208078c1c6eb9845b54f960526c53c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cba8a572c208078c1c6eb9845b54f960526c53c0"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "8ad0f221efc0293c3bf6dff6d6dc3d34fdd9227f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294a3e20e5bf4290cf9001d1a532a155af3bca9c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294a3e20e5bf4290cf9001d1a532a155af3bca9c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=294a3e20e5bf4290cf9001d1a532a155af3bca9c", "patch": "@@ -1,3 +1,8 @@\n+2019-02-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/88857 - ICE with value-initialization of argument in template.\n+\t* call.c (convert_like_real): Don't call build_value_init in template.\n+\n 2019-02-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/86969 - ICE with constexpr if and recursive generic lambdas."}, {"sha": "fb67d905acdfcda0a1f5f0474035a51b2b714f29", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294a3e20e5bf4290cf9001d1a532a155af3bca9c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294a3e20e5bf4290cf9001d1a532a155af3bca9c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=294a3e20e5bf4290cf9001d1a532a155af3bca9c", "patch": "@@ -7005,7 +7005,8 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t/* If we're initializing from {}, it's value-initialization.  */\n \tif (BRACE_ENCLOSED_INITIALIZER_P (expr)\n \t    && CONSTRUCTOR_NELTS (expr) == 0\n-\t    && TYPE_HAS_DEFAULT_CONSTRUCTOR (totype))\n+\t    && TYPE_HAS_DEFAULT_CONSTRUCTOR (totype)\n+\t    && !processing_template_decl)\n \t  {\n \t    bool direct = CONSTRUCTOR_IS_DIRECT_INIT (expr);\n \t    if (abstract_virtuals_error_sfinae (NULL_TREE, totype, complain))"}, {"sha": "0b126baf7b26a230fc03cc03d2e506a9050d8c6b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294a3e20e5bf4290cf9001d1a532a155af3bca9c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294a3e20e5bf4290cf9001d1a532a155af3bca9c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=294a3e20e5bf4290cf9001d1a532a155af3bca9c", "patch": "@@ -1,3 +1,8 @@\n+2019-02-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/88857 - ICE with value-initialization of argument in template.\n+\t* g++.dg/cpp0x/initlist-value4.C: New test.\n+\n 2019-02-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/89511 - ICE with using-declaration and unscoped enumerator."}, {"sha": "427147ff7f2c6eacd13eeb3a48927125f7ae0622", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-value4.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294a3e20e5bf4290cf9001d1a532a155af3bca9c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-value4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294a3e20e5bf4290cf9001d1a532a155af3bca9c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-value4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-value4.C?ref=294a3e20e5bf4290cf9001d1a532a155af3bca9c", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/88857\n+// { dg-do compile { target c++11 } }\n+\n+class S { int a; };\n+void foo (const S &, int);\n+\n+template <int N>\n+void\n+bar ()\n+{\n+  foo ({}); // { dg-error \"too few arguments to function\" }\n+}"}]}