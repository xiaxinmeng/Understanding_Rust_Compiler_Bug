{"sha": "dc9981eb31327b7564e350d3997458f567db33d7", "node_id": "C_kwDOANBUbNoAKGRjOTk4MWViMzEzMjdiNzU2NGUzNTBkMzk5NzQ1OGY1NjdkYjMzZDc", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-07-22T09:55:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-22T09:55:16Z"}, "message": "Merge #1405\n\n1405: Allow repeating metavars alongside repetitions r=CohenArthur a=CohenArthur\n\nFixes #1400 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "abfbd4b9c9c1ca38122ee7ad9ed65a0c688f0544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abfbd4b9c9c1ca38122ee7ad9ed65a0c688f0544"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc9981eb31327b7564e350d3997458f567db33d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi2nQECRBK7hj4Ov3rIwAAf/sIAHbjOAne7MYBMmPCQVzk4gNs\nG47iyZlLYY2fUZ6Y/z5+a1M+TARC4WDI01Dq9UOP0/KTBse0NnfP+6Z1ntGENGhv\ncOjgkrja9P7AlBQk8F5US9nG4MBSw1DWjbuLarK4sU2Lax5KWReWdEhew+BZjnJy\ndhSqTFJ7DuyzMj212upS4WUYU6uZgaS6Evf6QuQDHudnQLghm00m8RoEbhQDgzo5\neZN7f/J/znlV4JwutmjiDXlo9v1AvdXN5LGpm1lFse+lxz9CUcFIZRmfshS3AHii\nxn7qmboW3FDvGcP7b5rELdawDaQ6GtP9uot+eHLlJFfwEsaTc/m/wPNz5H/9DcM=\n=prOP\n-----END PGP SIGNATURE-----\n", "payload": "tree abfbd4b9c9c1ca38122ee7ad9ed65a0c688f0544\nparent 4a8c733b470eb6b7b52722c8694af9395d7cffe1\nparent d3926e6a87abd10aebd8f41749c00efbfeef1936\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1658483716 +0000\ncommitter GitHub <noreply@github.com> 1658483716 +0000\n\nMerge #1405\n\n1405: Allow repeating metavars alongside repetitions r=CohenArthur a=CohenArthur\n\nFixes #1400 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc9981eb31327b7564e350d3997458f567db33d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc9981eb31327b7564e350d3997458f567db33d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc9981eb31327b7564e350d3997458f567db33d7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a8c733b470eb6b7b52722c8694af9395d7cffe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8c733b470eb6b7b52722c8694af9395d7cffe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a8c733b470eb6b7b52722c8694af9395d7cffe1"}, {"sha": "d3926e6a87abd10aebd8f41749c00efbfeef1936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3926e6a87abd10aebd8f41749c00efbfeef1936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3926e6a87abd10aebd8f41749c00efbfeef1936"}], "stats": {"total": 158, "additions": 133, "deletions": 25}, "files": [{"sha": "1d57e3942202a8683f30c667934717268dd5a400", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc9981eb31327b7564e350d3997458f567db33d7/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc9981eb31327b7564e350d3997458f567db33d7/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=dc9981eb31327b7564e350d3997458f567db33d7", "patch": "@@ -83,10 +83,14 @@ MacroExpander::expand_decl_macro (Location invoc_locus,\n \n       if (did_match_rule)\n \t{\n-\t  // Debugging\n-\t  //   for (auto &kv : matched_fragments)\n-\t  //     rust_debug (\"[fragment]: %s (%ld)\", kv.first.c_str (),\n-\t  // \t\tkv.second.get_fragments ().size ());\n+\t  //  // Debugging\n+\t  //  for (auto &kv : matched_fragments)\n+\t  //    rust_debug (\"[fragment]: %s (%ld - %s)\", kv.first.c_str (),\n+\t  //\t\tkv.second.get_fragments ().size (),\n+\t  //\t\tkv.second.get_kind ()\n+\t  //\t\t    == MatchedFragmentContainer::Kind::Repetition\n+\t  //\t\t  ? \"repetition\"\n+\t  //\t\t  : \"metavar\");\n \n \t  matched_rule = &rule;\n \t  break;\n@@ -481,7 +485,7 @@ MacroExpander::match_matcher (Parser<MacroInvocLexer> &parser,\n \n \t    // matched fragment get the offset in the token stream\n \t    size_t offs_end = source.get_offs ();\n-\t    sub_stack.insert_fragment (\n+\t    sub_stack.insert_metavar (\n \t      MatchedFragment (fragment->get_ident (), offs_begin, offs_end));\n \t  }\n \t  break;\n@@ -586,7 +590,14 @@ MacroExpander::match_n_matches (Parser<MacroInvocLexer> &parser,\n \n \t\t// matched fragment get the offset in the token stream\n \t\tsize_t offs_end = source.get_offs ();\n-\t\tsub_stack.insert_fragment (\n+\n+\t\t// The main difference with match_matcher happens here: Instead\n+\t\t// of inserting a new fragment, we append to one. If that\n+\t\t// fragment does not exist, then the operation is similar to\n+\t\t// `insert_fragment` with the difference that we are not\n+\t\t// creating a metavariable, but a repetition of one, which is\n+\t\t// really different.\n+\t\tsub_stack.append_fragment (\n \t\t  MatchedFragment (fragment->get_ident (), offs_begin,\n \t\t\t\t   offs_end));\n \t      }"}, {"sha": "341c5a4ad639cf0b8933e9643a83ceb9ceb48e8e", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 45, "deletions": 16, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc9981eb31327b7564e350d3997458f567db33d7/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc9981eb31327b7564e350d3997458f567db33d7/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=dc9981eb31327b7564e350d3997458f567db33d7", "patch": "@@ -76,8 +76,17 @@ struct MatchedFragment\n class MatchedFragmentContainer\n {\n public:\n-  MatchedFragmentContainer (std::vector<MatchedFragment> fragments)\n-    : fragments (fragments)\n+  // Does the container refer to a simple metavariable, different from a\n+  // repetition repeated once\n+  enum class Kind\n+  {\n+    MetaVar,\n+    Repetition,\n+  };\n+\n+  MatchedFragmentContainer (std::vector<MatchedFragment> fragments,\n+\t\t\t    Kind kind = Kind::Repetition)\n+    : fragments (fragments), kind (kind)\n   {}\n \n   /**\n@@ -92,16 +101,18 @@ class MatchedFragmentContainer\n   /**\n    * Create a valid fragment matched one time\n    */\n-  static MatchedFragmentContainer one (MatchedFragment fragment)\n+  static MatchedFragmentContainer metavar (MatchedFragment fragment)\n   {\n-    return MatchedFragmentContainer ({fragment});\n+    return MatchedFragmentContainer ({fragment}, Kind::MetaVar);\n   }\n \n   /**\n    * Add a matched fragment to the container\n    */\n   void add_fragment (MatchedFragment fragment)\n   {\n+    rust_assert (!is_single_fragment ());\n+\n     fragments.emplace_back (fragment);\n   }\n \n@@ -112,20 +123,27 @@ class MatchedFragmentContainer\n   }\n   // const std::string &get_fragment_name () const { return fragment_name; }\n \n-  bool is_single_fragment () const { return get_match_amount () == 1; }\n+  bool is_single_fragment () const\n+  {\n+    return get_match_amount () == 1 && kind == Kind::MetaVar;\n+  }\n+\n   const MatchedFragment get_single_fragment () const\n   {\n-    rust_assert (get_match_amount () == 1);\n+    rust_assert (is_single_fragment ());\n \n     return fragments[0];\n   }\n \n+  const Kind &get_kind () const { return kind; }\n+\n private:\n   /**\n    * Fragments matched `match_amount` times. This can be an empty vector\n    * in case having zero matches is allowed (i.e ? or * operators)\n    */\n   std::vector<MatchedFragment> fragments;\n+  Kind kind;\n };\n \n class SubstitutionScope\n@@ -148,23 +166,34 @@ class SubstitutionScope\n   }\n \n   /**\n-   * Insert a new matched fragment into the current substitution map\n+   * Insert a new matched metavar into the current substitution map\n    */\n-  void insert_fragment (MatchedFragment fragment)\n+  void insert_metavar (MatchedFragment fragment)\n   {\n     auto &current_map = stack.back ();\n     auto it = current_map.find (fragment.fragment_ident);\n \n     if (it == current_map.end ())\n-      {\n-\tcurrent_map.insert (\n-\t  {fragment.fragment_ident, MatchedFragmentContainer::one (fragment)});\n-      }\n+      current_map.insert ({fragment.fragment_ident,\n+\t\t\t   MatchedFragmentContainer::metavar (fragment)});\n     else\n-      {\n-\tauto &frags = it->second;\n-\tfrags.add_fragment (fragment);\n-      }\n+      gcc_unreachable ();\n+  }\n+\n+  /**\n+   * Append a new matched fragment to a repetition into the current substitution\n+   * map\n+   */\n+  void append_fragment (MatchedFragment fragment)\n+  {\n+    auto &current_map = stack.back ();\n+    auto it = current_map.find (fragment.fragment_ident);\n+\n+    if (it == current_map.end ())\n+      current_map.insert (\n+\t{fragment.fragment_ident, MatchedFragmentContainer ({fragment})});\n+    else\n+      it->second.add_fragment (fragment);\n   }\n \n   void insert_matches (std::string key, MatchedFragmentContainer matches)"}, {"sha": "9592d2d2a9e178469949dacede177c539e854567", "filename": "gcc/rust/expand/rust-macro-substitute-ctx.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc9981eb31327b7564e350d3997458f567db33d7/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc9981eb31327b7564e350d3997458f567db33d7/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc?ref=dc9981eb31327b7564e350d3997458f567db33d7", "patch": "@@ -74,15 +74,18 @@ SubstituteCtx::check_repetition_amount (size_t pattern_start,\n \t\t  is_valid = false;\n \t\t}\n \n-\t      size_t repeat_amount = it->second.get_match_amount ();\n+\t      auto &fragment = it->second;\n+\n+\t      size_t repeat_amount = fragment.get_match_amount ();\n \t      if (!first_fragment_found)\n \t\t{\n \t\t  first_fragment_found = true;\n \t\t  expected_repetition_amount = repeat_amount;\n \t\t}\n \t      else\n \t\t{\n-\t\t  if (repeat_amount != expected_repetition_amount)\n+\t\t  if (repeat_amount != expected_repetition_amount\n+\t\t      && !fragment.is_single_fragment ())\n \t\t    {\n \t\t      rust_error_at (\n \t\t\tfrag_token->get_locus (),\n@@ -152,7 +155,7 @@ SubstituteCtx::substitute_repetition (\n \t    sub_fragment = kv_match.second.get_fragments ()[i];\n \n \t  sub_map.insert (\n-\t    {kv_match.first, MatchedFragmentContainer::one (sub_fragment)});\n+\t    {kv_match.first, MatchedFragmentContainer::metavar (sub_fragment)});\n \t}\n \n       auto substitute_context = SubstituteCtx (input, new_macro, sub_map);"}, {"sha": "ba7b61b0b16632d0af2ebdb752f3d8aaca24b378", "filename": "gcc/testsuite/rust/compile/macro-issue1400-2.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc9981eb31327b7564e350d3997458f567db33d7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400-2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc9981eb31327b7564e350d3997458f567db33d7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400-2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400-2.rs?ref=dc9981eb31327b7564e350d3997458f567db33d7", "patch": "@@ -0,0 +1,32 @@\n+macro_rules! foo {\n+    ( ( $( $Trait: ident ),+ ) for $($Ty: ident)* ) => {\n+        $(\n+            impl $Trait for $Ty {\n+    // { dg-error \"different amount of matches used in merged repetitions: expected 4, got 1\" \"\" { target *-*-* } .-1 }\n+                fn bar() -> i32 {\n+                    14\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+trait Foo {\n+    fn bar() -> i32;\n+}\n+\n+trait Bar {\n+    fn bar() -> i32;\n+}\n+\n+trait Baz {\n+    fn bar() -> i32;\n+}\n+\n+trait Qux {\n+    fn bar() -> i32;\n+}\n+\n+struct S;\n+\n+foo! {(Foo, Bar, Baz, Qux) for S}"}, {"sha": "971bd778054eb46798f34e20fbca8abf05afe85a", "filename": "gcc/testsuite/rust/compile/macro-issue1400.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc9981eb31327b7564e350d3997458f567db33d7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc9981eb31327b7564e350d3997458f567db33d7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400.rs?ref=dc9981eb31327b7564e350d3997458f567db33d7", "patch": "@@ -0,0 +1,33 @@\n+// { dg-additional-options \"-w\" }\n+\n+macro_rules! foo {\n+    ( ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n+        $(\n+            impl $Trait for $Ty {\n+                fn bar() -> i32 {\n+                    14\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+trait Foo {\n+    fn bar() -> i32;\n+}\n+\n+trait Bar {\n+    fn bar() -> i32;\n+}\n+\n+trait Baz {\n+    fn bar() -> i32;\n+}\n+\n+trait Qux {\n+    fn bar() -> i32;\n+}\n+\n+struct S;\n+\n+foo! {(Foo, Bar, Baz, Qux) for S}"}]}