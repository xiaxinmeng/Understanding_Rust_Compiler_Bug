{"sha": "0444aa9c0a3357707624263ec2fd13d8f156016e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ0NGFhOWMwYTMzNTc3MDc2MjQyNjNlYzJmZDEzZDhmMTU2MDE2ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-02-09T19:31:10Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-02-09T19:31:10Z"}, "message": "[PR c/84293] Unexpected strict-alias warning\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-02/msg00510.html\n\tPR c/84293\n\tgcc/c/\n\t* c-typeck.c (build_indirect_ref, build_c_cast): Pass expr location\n\tto strict_aliasing_warning.\n\n\tgcc/c-family/\n\t* c-common.h (strict_aliasing_warning): Drop OTYPE arg, insert LOC\n\targ.\n\t* c-warn.c (strict_aliasing_warning): Drop OTYPE arg, require LOC\n\targ.  Adjust.\n\n\tgcc/cp/\n\t* typeck.c (cp_build_indirect_ref_1, build_reinterpret_cast_1):\n\tPass expr location to strict_aliasing_warning.\n\n\tgcc/testsuite/\n\t* c-c++-common/pr84293.h: New.\n\t* c-c++-common/pr84293.c: New.\n\nFrom-SVN: r257539", "tree": {"sha": "dfe37130c665a88b85c0d08c740c2ba447b3cedc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfe37130c665a88b85c0d08c740c2ba447b3cedc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0444aa9c0a3357707624263ec2fd13d8f156016e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0444aa9c0a3357707624263ec2fd13d8f156016e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0444aa9c0a3357707624263ec2fd13d8f156016e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0444aa9c0a3357707624263ec2fd13d8f156016e/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd2799cc2212a72a1b31828918f9bb9287ab9780", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2799cc2212a72a1b31828918f9bb9287ab9780", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd2799cc2212a72a1b31828918f9bb9287ab9780"}], "stats": {"total": 97, "additions": 72, "deletions": 25}, "files": [{"sha": "1f536d1b4b08bf8b60350c6cd6eb4295f3ae2849", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=0444aa9c0a3357707624263ec2fd13d8f156016e", "patch": "@@ -1,3 +1,11 @@\n+2018-02-09  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c/84293\n+\t* c-common.h (strict_aliasing_warning): Drop OTYPE arg, insert LOC\n+\targ.\n+\t* c-warn.c (strict_aliasing_warning): Drop OTYPE arg, require LOC\n+\targ.  Adjust.\n+\n 2018-02-09  Martin Sebor  <msebor@redhat.com>\n \n \tPR lto/84212"}, {"sha": "95bb0fd2b06b7f0eb6ebefddc78a81d1f473ac9d", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=0444aa9c0a3357707624263ec2fd13d8f156016e", "patch": "@@ -1260,7 +1260,7 @@ extern void warn_tautological_cmp (location_t, enum tree_code, tree, tree);\n extern void warn_logical_not_parentheses (location_t, enum tree_code, tree,\n \t\t\t\t\t  tree);\n extern bool warn_if_unused_value (const_tree, location_t);\n-extern bool strict_aliasing_warning (tree, tree, tree);\n+extern bool strict_aliasing_warning (location_t, tree, tree);\n extern void sizeof_pointer_memaccess_warning (location_t *, tree,\n \t\t\t\t\t      vec<tree, va_gc> *, tree *,\n \t\t\t\t\t      bool (*) (tree, tree));"}, {"sha": "f3fb62c7e6285d6ce2ed44783f689e90926cbb83", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=0444aa9c0a3357707624263ec2fd13d8f156016e", "patch": "@@ -599,17 +599,21 @@ warn_if_unused_value (const_tree exp, location_t locus)\n     }\n }\n \n-/* Print a warning about casts that might indicate violation\n-   of strict aliasing rules if -Wstrict-aliasing is used and\n-   strict aliasing mode is in effect. OTYPE is the original\n-   TREE_TYPE of EXPR, and TYPE the type we're casting to. */\n+/* Print a warning about casts that might indicate violation of strict\n+   aliasing rules if -Wstrict-aliasing is used and strict aliasing\n+   mode is in effect.  LOC is the location of the expression being\n+   cast, EXPR might be from inside it.  TYPE is the type we're casting\n+   to.  */\n \n bool\n-strict_aliasing_warning (tree otype, tree type, tree expr)\n+strict_aliasing_warning (location_t loc, tree type, tree expr)\n {\n+  if (loc == UNKNOWN_LOCATION)\n+    loc = input_location;\n+\n   /* Strip pointer conversion chains and get to the correct original type.  */\n   STRIP_NOPS (expr);\n-  otype = TREE_TYPE (expr);\n+  tree otype = TREE_TYPE (expr);\n \n   if (!(flag_strict_aliasing\n \t&& POINTER_TYPE_P (type)\n@@ -628,8 +632,9 @@ strict_aliasing_warning (tree otype, tree type, tree expr)\n \t if the cast breaks type based aliasing.  */\n       if (!COMPLETE_TYPE_P (TREE_TYPE (type)) && warn_strict_aliasing == 2)\n \t{\n-\t  warning (OPT_Wstrict_aliasing, \"type-punning to incomplete type \"\n-\t\t   \"might break strict-aliasing rules\");\n+\t  warning_at (loc, OPT_Wstrict_aliasing,\n+\t\t      \"type-punning to incomplete type \"\n+\t\t      \"might break strict-aliasing rules\");\n \t  return true;\n \t}\n       else\n@@ -645,15 +650,17 @@ strict_aliasing_warning (tree otype, tree type, tree expr)\n \t      && !alias_set_subset_of (set2, set1)\n \t      && !alias_sets_conflict_p (set1, set2))\n \t    {\n-\t      warning (OPT_Wstrict_aliasing, \"dereferencing type-punned \"\n-\t\t       \"pointer will break strict-aliasing rules\");\n+\t      warning_at (loc, OPT_Wstrict_aliasing,\n+\t\t\t  \"dereferencing type-punned \"\n+\t\t\t  \"pointer will break strict-aliasing rules\");\n \t      return true;\n \t    }\n \t  else if (warn_strict_aliasing == 2\n \t\t   && !alias_sets_must_conflict_p (set1, set2))\n \t    {\n-\t      warning (OPT_Wstrict_aliasing, \"dereferencing type-punned \"\n-\t\t       \"pointer might break strict-aliasing rules\");\n+\t      warning_at (loc, OPT_Wstrict_aliasing,\n+\t\t\t  \"dereferencing type-punned \"\n+\t\t\t  \"pointer might break strict-aliasing rules\");\n \t      return true;\n \t    }\n \t}\n@@ -669,8 +676,9 @@ strict_aliasing_warning (tree otype, tree type, tree expr)\n       if (!COMPLETE_TYPE_P (type)\n \t  || !alias_sets_must_conflict_p (set1, set2))\n \t{\n-\t  warning (OPT_Wstrict_aliasing, \"dereferencing type-punned \"\n-\t\t   \"pointer might break strict-aliasing rules\");\n+\t  warning_at (loc, OPT_Wstrict_aliasing,\n+\t\t      \"dereferencing type-punned \"\n+\t\t      \"pointer might break strict-aliasing rules\");\n \t  return true;\n \t}\n     }"}, {"sha": "bca7268c118f271db163c54e66881e18bc9ad988", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=0444aa9c0a3357707624263ec2fd13d8f156016e", "patch": "@@ -1,3 +1,9 @@\n+2018-02-09  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c/84293\n+\t* c-typeck.c (build_indirect_ref, build_c_cast): Pass expr location\n+\tto strict_aliasing_warning.\n+\n 2018-02-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* c-typeck.c (really_start_incremental_init, push_init_level,"}, {"sha": "1eae4ea849c84bacaa97cda080e357c33acac5ae", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=0444aa9c0a3357707624263ec2fd13d8f156016e", "patch": "@@ -2524,7 +2524,7 @@ build_indirect_ref (location_t loc, tree ptr, ref_operator errstring)\n \t     the backend.  This only needs to be done at\n \t     warn_strict_aliasing > 2.  */\n \t  if (warn_strict_aliasing > 2)\n-\t    if (strict_aliasing_warning (TREE_TYPE (TREE_OPERAND (pointer, 0)),\n+\t    if (strict_aliasing_warning (EXPR_LOCATION (pointer),\n \t\t\t\t\t type, TREE_OPERAND (pointer, 0)))\n \t      TREE_NO_WARNING (pointer) = 1;\n \t}\n@@ -5696,7 +5696,7 @@ build_c_cast (location_t loc, tree type, tree expr)\n \t\t    \"of different size\");\n \n       if (warn_strict_aliasing <= 2)\n-        strict_aliasing_warning (otype, type, expr);\n+        strict_aliasing_warning (EXPR_LOCATION (value), type, expr);\n \n       /* If pedantic, warn for conversions between function and object\n \t pointer types, except for converting a null pointer constant"}, {"sha": "cea51ff39a87050c7af81e13df6a9cc806cb9e37", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0444aa9c0a3357707624263ec2fd13d8f156016e", "patch": "@@ -1,3 +1,9 @@\n+2018-02-09  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c/84293\n+\t* typeck.c (cp_build_indirect_ref_1, build_reinterpret_cast_1):\n+\tPass expr location to strict_aliasing_warning.\n+\n 2018-02-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/84296 - ICE with qualified-id in template."}, {"sha": "dfcf71689c63aee2494735f1e2b38f04db08e3cc", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0444aa9c0a3357707624263ec2fd13d8f156016e", "patch": "@@ -3136,7 +3136,7 @@ cp_build_indirect_ref_1 (tree ptr, ref_operator errorstring,\n \t     the backend.  This only needs to be done at\n \t     warn_strict_aliasing > 2.  */\n \t  if (warn_strict_aliasing > 2)\n-\t    if (strict_aliasing_warning (TREE_TYPE (TREE_OPERAND (ptr, 0)),\n+\t    if (strict_aliasing_warning (EXPR_LOCATION (ptr),\n \t\t\t\t\t type, TREE_OPERAND (ptr, 0)))\n \t      TREE_NO_WARNING (ptr) = 1;\n \t}\n@@ -7334,7 +7334,7 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n       expr = cp_build_addr_expr (expr, complain);\n \n       if (warn_strict_aliasing > 2)\n-\tstrict_aliasing_warning (TREE_TYPE (expr), type, expr);\n+\tstrict_aliasing_warning (EXPR_LOCATION (expr), type, expr);\n \n       if (expr != error_mark_node)\n \texpr = build_reinterpret_cast_1\n@@ -7428,8 +7428,6 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n   else if ((TYPE_PTRDATAMEM_P (type) && TYPE_PTRDATAMEM_P (intype))\n \t   || (TYPE_PTROBV_P (type) && TYPE_PTROBV_P (intype)))\n     {\n-      tree sexpr = expr;\n-\n       if (!c_cast_p\n \t  && check_for_casting_away_constness (intype, type,\n \t\t\t\t\t       REINTERPRET_CAST_EXPR,\n@@ -7447,11 +7445,9 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n \twarning (OPT_Wcast_align, \"cast from %qH to %qI \"\n \t\t \"increases required alignment of target type\", intype, type);\n \n-      /* We need to strip nops here, because the front end likes to\n-\t create (int *)&a for array-to-pointer decay, instead of &a[0].  */\n-      STRIP_NOPS (sexpr);\n       if (warn_strict_aliasing <= 2)\n-\tstrict_aliasing_warning (intype, type, sexpr);\n+\t/* strict_aliasing_warning STRIP_NOPs its expr.  */\n+\tstrict_aliasing_warning (EXPR_LOCATION (expr), type, expr);\n \n       return build_nop (type, expr);\n     }"}, {"sha": "edafd888f523cd768bdbb3e4e6a9820308349ec6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0444aa9c0a3357707624263ec2fd13d8f156016e", "patch": "@@ -1,3 +1,9 @@\n+2018-02-09  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c/84293\n+\t* c-c++-common/pr84293.h: New.\n+\t* c-c++-common/pr84293.c: New.\n+\n 2018-02-09  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/57193"}, {"sha": "dfcc8598927c8412f79ec587094e94eb8fa95030", "filename": "gcc/testsuite/c-c++-common/pr84293.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr84293.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr84293.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr84293.c?ref=0444aa9c0a3357707624263ec2fd13d8f156016e", "patch": "@@ -0,0 +1,10 @@\n+/* PR c/84293 unexpected warning from system header.  */\n+#include \"./pr84293.h\"\n+struct typeobject thing;\n+\n+#pragma GCC diagnostic warning \"-Wstrict-aliasing\"\n+void __attribute__ ((optimize (2))) init ()\n+{\n+  INCREF_TDEF (&thing);\n+  INCREF_STAG (&thing);\n+}"}, {"sha": "c12989624a9001eda66dced956d4076aae8072e8", "filename": "gcc/testsuite/c-c++-common/pr84293.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr84293.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0444aa9c0a3357707624263ec2fd13d8f156016e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr84293.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr84293.h?ref=0444aa9c0a3357707624263ec2fd13d8f156016e", "patch": "@@ -0,0 +1,7 @@\n+/* PR c/84293 unexpected warning from system header expansion.  */\n+#pragma GCC system_header\n+struct typeobject { unsigned refs; };\n+typedef struct object { unsigned refs; } Object;\n+\n+#define INCREF_TDEF(op) (((Object*)(op))->refs++)\n+#define INCREF_STAG(op) (((struct object*)(op))->refs++)"}]}