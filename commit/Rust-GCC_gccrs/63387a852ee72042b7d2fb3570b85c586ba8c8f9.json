{"sha": "63387a852ee72042b7d2fb3570b85c586ba8c8f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMzODdhODUyZWU3MjA0MmI3ZDJmYjM1NzBiODVjNTg2YmE4YzhmOQ==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim.kuvyrkov@linaro.org", "date": "2015-02-01T07:29:35Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2015-02-01T07:29:35Z"}, "message": "Fix scheduling undeterminism from sorting with DEBUG_INSNs\n\n\t* haifa-sched.c (INSN_RFS_DEBUG_ORIG_ORDER): New access macro.\n\t(rank_for_schedule_debug): Split from ...\n\t(rank_for_schedule): ... this.\n\t(ready_sort): Sort DEBUG_INSNs separately from normal INSNs.\n\t* sched-int.h (struct _haifa_insn_data): New field rfs_debug_orig_order.\n\nFrom-SVN: r220316", "tree": {"sha": "f474c769c3a80021c6673baed1c44308401c2484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f474c769c3a80021c6673baed1c44308401c2484"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63387a852ee72042b7d2fb3570b85c586ba8c8f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63387a852ee72042b7d2fb3570b85c586ba8c8f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63387a852ee72042b7d2fb3570b85c586ba8c8f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63387a852ee72042b7d2fb3570b85c586ba8c8f9/comments", "author": {"login": "maxim-kuvyrkov", "id": 12545699, "node_id": "MDQ6VXNlcjEyNTQ1Njk5", "avatar_url": "https://avatars.githubusercontent.com/u/12545699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxim-kuvyrkov", "html_url": "https://github.com/maxim-kuvyrkov", "followers_url": "https://api.github.com/users/maxim-kuvyrkov/followers", "following_url": "https://api.github.com/users/maxim-kuvyrkov/following{/other_user}", "gists_url": "https://api.github.com/users/maxim-kuvyrkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxim-kuvyrkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxim-kuvyrkov/subscriptions", "organizations_url": "https://api.github.com/users/maxim-kuvyrkov/orgs", "repos_url": "https://api.github.com/users/maxim-kuvyrkov/repos", "events_url": "https://api.github.com/users/maxim-kuvyrkov/events{/privacy}", "received_events_url": "https://api.github.com/users/maxim-kuvyrkov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4fbcb1bf2f569af3e57e91132f3573f37ad3800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fbcb1bf2f569af3e57e91132f3573f37ad3800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4fbcb1bf2f569af3e57e91132f3573f37ad3800"}], "stats": {"total": 79, "additions": 59, "deletions": 20}, "files": [{"sha": "504c741b3be2cee89ae45e329d05ec6256b5b9ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63387a852ee72042b7d2fb3570b85c586ba8c8f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63387a852ee72042b7d2fb3570b85c586ba8c8f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63387a852ee72042b7d2fb3570b85c586ba8c8f9", "patch": "@@ -1,3 +1,11 @@\n+2015-02-01  Maxim Kuvyrkov  <maxim.kuvyrkov@linaro.org>\n+\n+\t* haifa-sched.c (INSN_RFS_DEBUG_ORIG_ORDER): New access macro.\n+\t(rank_for_schedule_debug): Split from ...\n+\t(rank_for_schedule): ... this.\n+\t(ready_sort): Sort DEBUG_INSNs separately from normal INSNs.\n+\t* sched-int.h (struct _haifa_insn_data): New field rfs_debug_orig_order.\n+\n 2015-01-31  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/md.texi (Machine Constraints): Alphabetize table by target."}, {"sha": "75d24217dbe187530e65fa2e874db9a081121a2c", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 48, "deletions": 20, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63387a852ee72042b7d2fb3570b85c586ba8c8f9/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63387a852ee72042b7d2fb3570b85c586ba8c8f9/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=63387a852ee72042b7d2fb3570b85c586ba8c8f9", "patch": "@@ -250,6 +250,10 @@ struct common_sched_info_def *common_sched_info;\n /* The minimal value of the INSN_TICK of an instruction.  */\n #define MIN_TICK (-max_insn_queue_index)\n \n+/* Original order of insns in the ready list.\n+   Used to keep order of normal insns while separating DEBUG_INSNs.  */\n+#define INSN_RFS_DEBUG_ORIG_ORDER(INSN) (HID (INSN)->rfs_debug_orig_order)\n+\n /* The deciding reason for INSN's place in the ready list.  */\n #define INSN_LAST_RFS_WIN(INSN) (HID (INSN)->last_rfs_win)\n \n@@ -2597,6 +2601,27 @@ rfs_result (enum rfs_decision decision, int result, rtx tmp, rtx tmp2)\n   return result;\n }\n \n+/* Sorting predicate to move DEBUG_INSNs to the top of ready list, while\n+   keeping normal insns in original order.  */\n+\n+static int\n+rank_for_schedule_debug (const void *x, const void *y)\n+{\n+  rtx_insn *tmp = *(rtx_insn * const *) y;\n+  rtx_insn *tmp2 = *(rtx_insn * const *) x;\n+\n+  /* Schedule debug insns as early as possible.  */\n+  if (DEBUG_INSN_P (tmp) && !DEBUG_INSN_P (tmp2))\n+    return rfs_result (RFS_DEBUG, -1, tmp, tmp2);\n+  else if (!DEBUG_INSN_P (tmp) && DEBUG_INSN_P (tmp2))\n+    return rfs_result (RFS_DEBUG, 1, tmp, tmp2);\n+  else if (DEBUG_INSN_P (tmp) && DEBUG_INSN_P (tmp2))\n+    return rfs_result (RFS_DEBUG, INSN_LUID (tmp) - INSN_LUID (tmp2),\n+\t\t       tmp, tmp2);\n+  else\n+    return INSN_RFS_DEBUG_ORIG_ORDER (tmp2) - INSN_RFS_DEBUG_ORIG_ORDER (tmp);\n+}\n+\n /* Returns a positive value if x is preferred; returns a negative value if\n    y is preferred.  Should never return 0, since that will make the sort\n    unstable.  */\n@@ -2609,18 +2634,6 @@ rank_for_schedule (const void *x, const void *y)\n   int tmp_class, tmp2_class;\n   int val, priority_val, info_val, diff;\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n-    {\n-      /* Schedule debug insns as early as possible.  */\n-      if (DEBUG_INSN_P (tmp) && !DEBUG_INSN_P (tmp2))\n-\treturn rfs_result (RFS_DEBUG, -1, tmp, tmp2);\n-      else if (!DEBUG_INSN_P (tmp) && DEBUG_INSN_P (tmp2))\n-\treturn rfs_result (RFS_DEBUG, 1, tmp, tmp2);\n-      else if (DEBUG_INSN_P (tmp) && DEBUG_INSN_P (tmp2))\n-\treturn rfs_result (RFS_DEBUG, INSN_LUID (tmp) - INSN_LUID (tmp2),\n-\t\t\t   tmp, tmp2);\n-    }\n-\n   if (live_range_shrinkage_p)\n     {\n       /* Don't use SCHED_PRESSURE_MODEL -- it results in much worse\n@@ -3075,13 +3088,21 @@ ready_sort (struct ready_list *ready)\n {\n   int i;\n   rtx_insn **first = ready_lastpos (ready);\n+  int n_ready_non_debug = ready->n_ready;\n \n-  if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n+  for (i = 0; i < ready->n_ready; ++i)\n     {\n-      for (i = 0; i < ready->n_ready; i++)\n-\tif (!DEBUG_INSN_P (first[i]))\n-\t  setup_insn_reg_pressure_info (first[i]);\n+      if (DEBUG_INSN_P (first[i]))\n+\t--n_ready_non_debug;\n+      else\n+\t{\n+\t  INSN_RFS_DEBUG_ORIG_ORDER (first[i]) = i;\n+\n+\t  if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n+\t    setup_insn_reg_pressure_info (first[i]);\n+\t}\n     }\n+\n   if (sched_pressure == SCHED_PRESSURE_MODEL\n       && model_curr_point < model_num_insns)\n     model_set_excess_costs (first, ready->n_ready);\n@@ -3090,10 +3111,17 @@ ready_sort (struct ready_list *ready)\n   if (sched_verbose >= 4)\n     stats1 = rank_for_schedule_stats;\n \n-  if (ready->n_ready == 2)\n-    swap_sort (first, ready->n_ready);\n-  else if (ready->n_ready > 2)\n-    qsort (first, ready->n_ready, sizeof (rtx), rank_for_schedule);\n+  if (n_ready_non_debug < ready->n_ready)\n+    /* Separate DEBUG_INSNS from normal insns.  DEBUG_INSNs go to the end\n+       of array.  */\n+    qsort (first, ready->n_ready, sizeof (rtx), rank_for_schedule_debug);\n+  else\n+    {\n+      if (n_ready_non_debug == 2)\n+\tswap_sort (first, n_ready_non_debug);\n+      else if (n_ready_non_debug > 2)\n+\tqsort (first, n_ready_non_debug, sizeof (rtx), rank_for_schedule);\n+    }\n \n   if (sched_verbose >= 4)\n     {"}, {"sha": "1b9f8d1d74f08b939323162f5a25b5c0a2cd04c9", "filename": "gcc/sched-int.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63387a852ee72042b7d2fb3570b85c586ba8c8f9/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63387a852ee72042b7d2fb3570b85c586ba8c8f9/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=63387a852ee72042b7d2fb3570b85c586ba8c8f9", "patch": "@@ -917,6 +917,9 @@ struct _haifa_insn_data\n   int reg_pressure_excess_cost_change;\n   int model_index;\n \n+  /* Original order of insns in the ready list.  */\n+  int rfs_debug_orig_order;\n+\n   /* The deciding reason for INSN's place in the ready list.  */\n   int last_rfs_win;\n "}]}