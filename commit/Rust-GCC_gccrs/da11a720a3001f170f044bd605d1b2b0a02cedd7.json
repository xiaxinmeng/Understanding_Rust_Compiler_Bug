{"sha": "da11a720a3001f170f044bd605d1b2b0a02cedd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGExMWE3MjBhMzAwMWYxNzBmMDQ0YmQ2MDVkMWIyYjBhMDJjZWRkNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-05-08T12:52:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-05-08T12:52:44Z"}, "message": "tree-vrp.c (gimple_assign_nonzero_warnv_p): Rename to ...\n\n2017-05-08  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vrp.c (gimple_assign_nonzero_warnv_p): Rename to ...\n\t(gimple_assign_nonzero): ... this and remove strict_overflow_p\n\targument.\n\t(gimple_stmt_nonzero_warnv_p): Rename to ...\n\t(gimple_stmt_nonzero_p): ... this and remove strict_overflow_p\n\targument.\n\t(vrp_stmt_computes_nonzero): Remove strict_overflow_p argument.\n\t(extract_range_basic): Adjust, do not disable propagation on\n\tstrict overflow sensitive simplification.\n\t(vrp_visit_cond_stmt): Likewise.\n\nFrom-SVN: r247738", "tree": {"sha": "b793634846607417bb1906703b0f9eee4b4f3257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b793634846607417bb1906703b0f9eee4b4f3257"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da11a720a3001f170f044bd605d1b2b0a02cedd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da11a720a3001f170f044bd605d1b2b0a02cedd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da11a720a3001f170f044bd605d1b2b0a02cedd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da11a720a3001f170f044bd605d1b2b0a02cedd7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18b8c294e261fdd0609c3c1180252e9f44a0464b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b8c294e261fdd0609c3c1180252e9f44a0464b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18b8c294e261fdd0609c3c1180252e9f44a0464b"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "b1dabfb63331ff0ea0d8116f5323a0118e5a99c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da11a720a3001f170f044bd605d1b2b0a02cedd7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da11a720a3001f170f044bd605d1b2b0a02cedd7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da11a720a3001f170f044bd605d1b2b0a02cedd7", "patch": "@@ -1,3 +1,16 @@\n+2017-05-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (gimple_assign_nonzero_warnv_p): Rename to ...\n+\t(gimple_assign_nonzero): ... this and remove strict_overflow_p\n+\targument.\n+\t(gimple_stmt_nonzero_warnv_p): Rename to ...\n+\t(gimple_stmt_nonzero_p): ... this and remove strict_overflow_p\n+\targument.\n+\t(vrp_stmt_computes_nonzero): Remove strict_overflow_p argument.\n+\t(extract_range_basic): Adjust, do not disable propagation on\n+\tstrict overflow sensitive simplification.\n+\t(vrp_visit_cond_stmt): Likewise.\n+\n 2017-05-05  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline-analysis.c (estimate_function_body_sizes): Recompute"}, {"sha": "9abf91e1ccdf16540173070097505cfc6911ab26", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da11a720a3001f170f044bd605d1b2b0a02cedd7/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da11a720a3001f170f044bd605d1b2b0a02cedd7/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=da11a720a3001f170f044bd605d1b2b0a02cedd7", "patch": "@@ -857,27 +857,28 @@ symbolic_range_based_on_p (value_range *vr, const_tree sym)\n    *STRICT_OVERFLOW_P.*/\n \n static bool\n-gimple_assign_nonzero_warnv_p (gimple *stmt, bool *strict_overflow_p)\n+gimple_assign_nonzero_p (gimple *stmt)\n {\n   enum tree_code code = gimple_assign_rhs_code (stmt);\n+  bool strict_overflow_p;\n   switch (get_gimple_rhs_class (code))\n     {\n     case GIMPLE_UNARY_RHS:\n       return tree_unary_nonzero_warnv_p (gimple_assign_rhs_code (stmt),\n \t\t\t\t\t gimple_expr_type (stmt),\n \t\t\t\t\t gimple_assign_rhs1 (stmt),\n-\t\t\t\t\t strict_overflow_p);\n+\t\t\t\t\t &strict_overflow_p);\n     case GIMPLE_BINARY_RHS:\n       return tree_binary_nonzero_warnv_p (gimple_assign_rhs_code (stmt),\n \t\t\t\t\t  gimple_expr_type (stmt),\n \t\t\t\t\t  gimple_assign_rhs1 (stmt),\n \t\t\t\t\t  gimple_assign_rhs2 (stmt),\n-\t\t\t\t\t  strict_overflow_p);\n+\t\t\t\t\t  &strict_overflow_p);\n     case GIMPLE_TERNARY_RHS:\n       return false;\n     case GIMPLE_SINGLE_RHS:\n       return tree_single_nonzero_warnv_p (gimple_assign_rhs1 (stmt),\n-\t\t\t\t\t  strict_overflow_p);\n+\t\t\t\t\t  &strict_overflow_p);\n     case GIMPLE_INVALID_RHS:\n       gcc_unreachable ();\n     default:\n@@ -891,12 +892,12 @@ gimple_assign_nonzero_warnv_p (gimple *stmt, bool *strict_overflow_p)\n    *STRICT_OVERFLOW_P.*/\n \n static bool\n-gimple_stmt_nonzero_warnv_p (gimple *stmt, bool *strict_overflow_p)\n+gimple_stmt_nonzero_p (gimple *stmt)\n {\n   switch (gimple_code (stmt))\n     {\n     case GIMPLE_ASSIGN:\n-      return gimple_assign_nonzero_warnv_p (stmt, strict_overflow_p);\n+      return gimple_assign_nonzero_p (stmt);\n     case GIMPLE_CALL:\n       {\n \ttree fndecl = gimple_call_fndecl (stmt);\n@@ -934,13 +935,13 @@ gimple_stmt_nonzero_warnv_p (gimple *stmt, bool *strict_overflow_p)\n     }\n }\n \n-/* Like tree_expr_nonzero_warnv_p, but this function uses value ranges\n+/* Like tree_expr_nonzero_p, but this function uses value ranges\n    obtained so far.  */\n \n static bool\n-vrp_stmt_computes_nonzero (gimple *stmt, bool *strict_overflow_p)\n+vrp_stmt_computes_nonzero (gimple *stmt)\n {\n-  if (gimple_stmt_nonzero_warnv_p (stmt, strict_overflow_p))\n+  if (gimple_stmt_nonzero_p (stmt))\n     return true;\n \n   /* If we have an expression of the form &X->a, then the expression\n@@ -3927,8 +3928,7 @@ extract_range_basic (value_range *vr, gimple *stmt)\n   if (INTEGRAL_TYPE_P (type)\n       && gimple_stmt_nonnegative_warnv_p (stmt, &sop))\n     set_value_range_to_nonnegative (vr, type);\n-  else if (vrp_stmt_computes_nonzero (stmt, &sop)\n-\t   && !sop)\n+  else if (vrp_stmt_computes_nonzero (stmt))\n     set_value_range_to_nonnull (vr, type);\n   else\n     set_value_range_to_varying (vr);\n@@ -7568,7 +7568,6 @@ static void\n vrp_visit_cond_stmt (gcond *stmt, edge *taken_edge_p)\n {\n   tree val;\n-  bool sop;\n \n   *taken_edge_p = NULL;\n \n@@ -7634,25 +7633,14 @@ vrp_visit_cond_stmt (gcond *stmt, edge *taken_edge_p)\n      additional checking.  Testing on several code bases (GCC, DLV,\n      MICO, TRAMP3D and SPEC2000) showed that doing this results in\n      4 more predicates folded in SPEC.  */\n-  sop = false;\n \n+  bool sop;\n   val = vrp_evaluate_conditional_warnv_with_ops (gimple_cond_code (stmt),\n \t\t\t\t\t\t gimple_cond_lhs (stmt),\n \t\t\t\t\t\t gimple_cond_rhs (stmt),\n \t\t\t\t\t\t false, &sop, NULL);\n   if (val)\n-    {\n-      if (!sop)\n-\t*taken_edge_p = find_taken_edge (gimple_bb (stmt), val);\n-      else\n-\t{\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file,\n-\t\t     \"\\nIgnoring predicate evaluation because \"\n-\t\t     \"it assumes that signed overflow is undefined\");\n-\t  val = NULL_TREE;\n-\t}\n-    }\n+    *taken_edge_p = find_taken_edge (gimple_bb (stmt), val);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {"}]}