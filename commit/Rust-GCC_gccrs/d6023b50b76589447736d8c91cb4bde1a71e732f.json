{"sha": "d6023b50b76589447736d8c91cb4bde1a71e732f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYwMjNiNTBiNzY1ODk0NDc3MzZkOGM5MWNiNGJkZTFhNzFlNzMyZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-02-20T13:21:23Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-02-20T13:21:23Z"}, "message": "i386.h (SSE_VEC_FLOAT_MODE_P): New define.\n\n\t* config/i386/i386.h (SSE_VEC_FLOAT_MODE_P): New define.\n\t* config/i386/i386.md (*sse_setcc<mode>): Macroize from *sse_setccsf\n\tand *sse_setccdf using MODEF mode iterator and SSE_FLOAT_MODE_P as\n\tinsn constraint.\n\t(smin<mode>3): Ditto from similar patterns.\n\t(smax<mode>3): Ditto.\n\t(*ieee_smin<mode>3): Ditto.\n\t(*ieee_smax<mode>3): Ditto.\n\t* config/i386/sse.md (sse): New mode attribute.\n\t(mov<mode>): Macroize expander from movv4sf and movv2df using\n\tSSEMODEF2P mode iterator.\n\t(<sse>_movnt<mode>): Ditto from similar patterns. Use\n\tSSE_VEC_FLOAT_MODE_P as insn constraint.\n\t(storent<mode>): Ditto.\n\t(storent<mode>): Macroize expander from storentsf and storentdf using\n\tMODEF mode iterator.\n\t(neg<mode>2): Macroize from negv4sf2 and negv2df2 using SSEMODEF2P\n\tmode iterator and SSE_VEC_FLOAT_MODE_P as insn constraint.\n\t(abs<mode>2): Ditto from similar patterns.\n\t(add<mode>3, *add<mode>3, <sse>_vmadd<mode>3): Ditto.\n\t(sub<mode>3, *sub<mode>3, <sse>_vmsub<mode>3): Ditto.\n\t(<sse>_div<mode>3, <sse>_vmdiv<mode>3): Ditto.\n\t(<sse>_vmsqrt<mode>2): Ditto.\n\t(smin<mode>3, *smin<mode>3_finite, *smin<mode>3)\n\t(<sse>_vmsmin<mode>3, *ieee_smin<mode>3): Ditto.\n\t(smax<mode>3, *smax<mode>3_finite, *smax<mode>3)\n\t(<sse>_vmsmax<mode>3, *ieee_smax<mode>3): Ditto.\n\t(<sse>_maskcmp<mode>3): Macroize from sse_maskcmpv4sf3,\n\tsse_maskcmpsf3, sse2_maskcmpv2df3 and sse2_maskcmpdf3 using SSEMODEF4\n\tmode iterator. Use SSE_FLOAT_MODE_P with SSE_VEC_FLOAT_MODE_P as\n\tinsn constraint.\n\t(<sse>_comi): Macroize from sse_comi and sse2_comi using MODEF mode\n\titerator and SSE_FLOAT_MODE_P as insn constraint.\n\t(<sse>_ucomi): Ditto from similar patterns.\n\t(<sse>_vmmaskcmp<mode>3): Macroize from sse_vmmaskcmpv4sf3 and\n\tsse2_vmmaskcmpv2df3 using SSEMODEF2P mode iterator and\n\tSSE_VEC_FLOAT_MODE_P as insn constraint.\n\t(vcond<mode>): Ditto from similar patterns.\n\t(and<mode>3, *and<mode>3): Ditto.\n\t(<sse>_nand<mode>3): Ditto.\n\t(ior<mode>3, *ior<mode>3): Ditto.\n\t(xor<mode>3, *xor<mode>3): Ditto.\n\t(*and<mode>3): Macroize from *andsf3 and *anddf3 using MODEF mode\n\titerator and SSE_FLOAT_MODE_P as insn constraint.\n\t(*nand<mode>3): Ditto from similar patterns.\n\t(*ior<mode>3): Ditto.\n\t(*xor<mode>3): Ditto.\n\nFrom-SVN: r132478", "tree": {"sha": "41ee7c633d0a5b0c17d4d45433e92a1a9814a49e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41ee7c633d0a5b0c17d4d45433e92a1a9814a49e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6023b50b76589447736d8c91cb4bde1a71e732f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6023b50b76589447736d8c91cb4bde1a71e732f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6023b50b76589447736d8c91cb4bde1a71e732f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6023b50b76589447736d8c91cb4bde1a71e732f/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57a65098f6ff895178456d9c8098410a096042ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a65098f6ff895178456d9c8098410a096042ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a65098f6ff895178456d9c8098410a096042ca"}], "stats": {"total": 3386, "additions": 1487, "deletions": 1899}, "files": [{"sha": "84f8296538e40644af4c641cb23619d66ba6ae6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6023b50b76589447736d8c91cb4bde1a71e732f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6023b50b76589447736d8c91cb4bde1a71e732f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6023b50b76589447736d8c91cb4bde1a71e732f", "patch": "@@ -1,3 +1,53 @@\n+2008-02-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (SSE_VEC_FLOAT_MODE_P): New define.\n+\t* config/i386/i386.md (*sse_setcc<mode>): Macroize from *sse_setccsf\n+\tand *sse_setccdf using MODEF mode iterator and SSE_FLOAT_MODE_P as\n+\tinsn constraint.\n+\t(smin<mode>3): Ditto from similar patterns.\n+\t(smax<mode>3): Ditto.\n+\t(*ieee_smin<mode>3): Ditto.\n+\t(*ieee_smax<mode>3): Ditto.\n+\t* config/i386/sse.md (sse): New mode attribute.\n+\t(mov<mode>): Macroize expander from movv4sf and movv2df using\n+\tSSEMODEF2P mode iterator.\n+\t(<sse>_movnt<mode>): Ditto from similar patterns. Use\n+\tSSE_VEC_FLOAT_MODE_P as insn constraint.\n+\t(storent<mode>): Ditto.\n+\t(storent<mode>): Macroize expander from storentsf and storentdf using\n+\tMODEF mode iterator.\n+\t(neg<mode>2): Macroize from negv4sf2 and negv2df2 using SSEMODEF2P\n+\tmode iterator and SSE_VEC_FLOAT_MODE_P as insn constraint.\n+\t(abs<mode>2): Ditto from similar patterns.\n+\t(add<mode>3, *add<mode>3, <sse>_vmadd<mode>3): Ditto.\n+\t(sub<mode>3, *sub<mode>3, <sse>_vmsub<mode>3): Ditto.\n+\t(<sse>_div<mode>3, <sse>_vmdiv<mode>3): Ditto.\n+\t(<sse>_vmsqrt<mode>2): Ditto.\n+\t(smin<mode>3, *smin<mode>3_finite, *smin<mode>3)\n+\t(<sse>_vmsmin<mode>3, *ieee_smin<mode>3): Ditto.\n+\t(smax<mode>3, *smax<mode>3_finite, *smax<mode>3)\n+\t(<sse>_vmsmax<mode>3, *ieee_smax<mode>3): Ditto.\n+\t(<sse>_maskcmp<mode>3): Macroize from sse_maskcmpv4sf3,\n+\tsse_maskcmpsf3, sse2_maskcmpv2df3 and sse2_maskcmpdf3 using SSEMODEF4\n+\tmode iterator. Use SSE_FLOAT_MODE_P with SSE_VEC_FLOAT_MODE_P as\n+\tinsn constraint.\n+\t(<sse>_comi): Macroize from sse_comi and sse2_comi using MODEF mode\n+\titerator and SSE_FLOAT_MODE_P as insn constraint.\n+\t(<sse>_ucomi): Ditto from similar patterns.\n+\t(<sse>_vmmaskcmp<mode>3): Macroize from sse_vmmaskcmpv4sf3 and\n+\tsse2_vmmaskcmpv2df3 using SSEMODEF2P mode iterator and\n+\tSSE_VEC_FLOAT_MODE_P as insn constraint.\n+\t(vcond<mode>): Ditto from similar patterns.\n+\t(and<mode>3, *and<mode>3): Ditto.\n+\t(<sse>_nand<mode>3): Ditto.\n+\t(ior<mode>3, *ior<mode>3): Ditto.\n+\t(xor<mode>3, *xor<mode>3): Ditto.\n+\t(*and<mode>3): Macroize from *andsf3 and *anddf3 using MODEF mode\n+\titerator and SSE_FLOAT_MODE_P as insn constraint.\n+\t(*nand<mode>3): Ditto from similar patterns.\n+\t(*ior<mode>3): Ditto.\n+\t(*xor<mode>3): Ditto.\n+\n 2008-02-20  Ira Rosen  <irar@il.ibm.com>\n \n \t* config/spu/spu.md (vec_unpacku_hi_v8hi, vec_unpacku_lo_v8hi,"}, {"sha": "f24298466913874950d8b6168df5d53e3e7eaf0d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6023b50b76589447736d8c91cb4bde1a71e732f/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6023b50b76589447736d8c91cb4bde1a71e732f/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=d6023b50b76589447736d8c91cb4bde1a71e732f", "patch": "@@ -1454,6 +1454,9 @@ enum reg_class\n #define SSE_FLOAT_MODE_P(MODE) \\\n   ((TARGET_SSE && (MODE) == SFmode) || (TARGET_SSE2 && (MODE) == DFmode))\n \n+#define SSE_VEC_FLOAT_MODE_P(MODE) \\\n+  ((TARGET_SSE && (MODE) == V4SFmode) || (TARGET_SSE2 && (MODE) == V2DFmode))\n+\n #define MMX_REG_P(XOP) (REG_P (XOP) && MMX_REGNO_P (REGNO (XOP)))\n #define MMX_REGNO_P(N) IN_RANGE ((N), FIRST_MMX_REG, LAST_MMX_REG)\n "}, {"sha": "84911ff5c2337194a5b54a389f1cf3b77b59a33e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 42, "deletions": 86, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6023b50b76589447736d8c91cb4bde1a71e732f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6023b50b76589447736d8c91cb4bde1a71e732f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d6023b50b76589447736d8c91cb4bde1a71e732f", "patch": "@@ -13964,25 +13964,15 @@\n ;; 0xffffffff is NaN, but not in normalized form, so we can't represent\n ;; it directly.\n \n-(define_insn \"*sse_setccsf\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(match_operator:SF 1 \"sse_comparison_operator\"\n-\t  [(match_operand:SF 2 \"register_operand\" \"0\")\n-\t   (match_operand:SF 3 \"nonimmediate_operand\" \"xm\")]))]\n-  \"TARGET_SSE && !TARGET_SSE5\"\n-  \"cmp%D1ss\\t{%3, %0|%0, %3}\"\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"*sse_setccdf\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=x\")\n-\t(match_operator:DF 1 \"sse_comparison_operator\"\n-\t  [(match_operand:DF 2 \"register_operand\" \"0\")\n-\t   (match_operand:DF 3 \"nonimmediate_operand\" \"xm\")]))]\n-  \"TARGET_SSE2 && !TARGET_SSE5\"\n-  \"cmp%D1sd\\t{%3, %0|%0, %3}\"\n+(define_insn \"*sse_setcc<mode>\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n+\t(match_operator:MODEF 1 \"sse_comparison_operator\"\n+\t  [(match_operand:MODEF 2 \"register_operand\" \"0\")\n+\t   (match_operand:MODEF 3 \"nonimmediate_operand\" \"xm\")]))]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && !TARGET_SSE5\"\n+  \"cmp%D1s<ssemodefsuffix>\\t{%3, %0|%0, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"mode\" \"DF\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*sse5_setcc<mode>\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n@@ -19663,87 +19653,53 @@\n ;; Since both the tree-level MAX_EXPR and the rtl-level SMAX operator\n ;; are undefined in this condition, we're certain this is correct.\n \n-(define_insn \"sminsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(smin:SF (match_operand:SF 1 \"nonimmediate_operand\" \"%0\")\n-\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE_MATH\"\n-  \"minss\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"smaxsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(smax:SF (match_operand:SF 1 \"nonimmediate_operand\" \"%0\")\n-\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE_MATH\"\n-  \"maxss\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"smindf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=x\")\n-\t(smin:DF (match_operand:DF 1 \"nonimmediate_operand\" \"%0\")\n-\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n-  \"minsd\\t{%2, %0|%0, %2}\"\n+(define_insn \"smin<mode>3\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n+\t(smin:MODEF\n+\t  (match_operand:MODEF 1 \"nonimmediate_operand\" \"%0\")\n+\t  (match_operand:MODEF 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n+  \"mins<ssemodefsuffix>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"mode\" \"DF\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"smaxdf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=x\")\n-\t(smax:DF (match_operand:DF 1 \"nonimmediate_operand\" \"%0\")\n-\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n-  \"maxsd\\t{%2, %0|%0, %2}\"\n+(define_insn \"smax<mode>3\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n+\t(smax:MODEF\n+\t  (match_operand:MODEF 1 \"nonimmediate_operand\" \"%0\")\n+\t  (match_operand:MODEF 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n+  \"maxs<ssemodefsuffix>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"mode\" \"DF\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n ;; These versions of the min/max patterns implement exactly the operations\n ;;   min = (op1 < op2 ? op1 : op2)\n ;;   max = (!(op1 < op2) ? op1 : op2)\n ;; Their operands are not commutative, and thus they may be used in the\n ;; presence of -0.0 and NaN.\n \n-(define_insn \"*ieee_sminsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(unspec:SF [(match_operand:SF 1 \"register_operand\" \"0\")\n-\t\t    (match_operand:SF 2 \"nonimmediate_operand\" \"xm\")]\n-\t\t   UNSPEC_IEEE_MIN))]\n-  \"TARGET_SSE_MATH\"\n-  \"minss\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"*ieee_smaxsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(unspec:SF [(match_operand:SF 1 \"register_operand\" \"0\")\n-\t\t    (match_operand:SF 2 \"nonimmediate_operand\" \"xm\")]\n-\t\t   UNSPEC_IEEE_MAX))]\n-  \"TARGET_SSE_MATH\"\n-  \"maxss\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"*ieee_smindf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=x\")\n-\t(unspec:DF [(match_operand:DF 1 \"register_operand\" \"0\")\n-\t\t    (match_operand:DF 2 \"nonimmediate_operand\" \"xm\")]\n-\t\t   UNSPEC_IEEE_MIN))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n-  \"minsd\\t{%2, %0|%0, %2}\"\n+(define_insn \"*ieee_smin<mode>3\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n+\t(unspec:MODEF\n+\t  [(match_operand:MODEF 1 \"register_operand\" \"0\")\n+\t   (match_operand:MODEF 2 \"nonimmediate_operand\" \"xm\")]\n+\t UNSPEC_IEEE_MIN))]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n+  \"mins<ssemodefsuffix>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"mode\" \"DF\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*ieee_smaxdf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=x\")\n-\t(unspec:DF [(match_operand:DF 1 \"register_operand\" \"0\")\n-\t\t    (match_operand:DF 2 \"nonimmediate_operand\" \"xm\")]\n-\t\t   UNSPEC_IEEE_MAX))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n-  \"maxsd\\t{%2, %0|%0, %2}\"\n+(define_insn \"*ieee_smax<mode>3\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n+\t(unspec:MODEF\n+\t  [(match_operand:MODEF 1 \"register_operand\" \"0\")\n+\t   (match_operand:MODEF 2 \"nonimmediate_operand\" \"xm\")]\n+\t UNSPEC_IEEE_MAX))]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n+  \"maxs<ssemodefsuffix>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"mode\" \"DF\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n ;; Make two stack loads independent:\n ;;   fld aa              fld aa"}, {"sha": "12e8b4207fc8c22683e0771264935893ba23fda9", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1392, "deletions": 1813, "changes": 3205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6023b50b76589447736d8c91cb4bde1a71e732f/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6023b50b76589447736d8c91cb4bde1a71e732f/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d6023b50b76589447736d8c91cb4bde1a71e732f"}]}