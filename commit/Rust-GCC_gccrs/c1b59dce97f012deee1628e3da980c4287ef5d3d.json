{"sha": "c1b59dce97f012deee1628e3da980c4287ef5d3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFiNTlkY2U5N2YwMTJkZWVlMTYyOGUzZGE5ODBjNDI4N2VmNWQzZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-09-15T14:13:50Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-09-15T14:13:50Z"}, "message": "genattr.c (main): Add extern prototype.\n\n\t* genattr.c (main): Add extern prototype.  Call return, not exit.\n\t* genattrtab.c (main): Likewise.\n\t* gencheck.c (main): Likewise.\n\t* gencodes.c (main): Likewise.\n\t* genconfig.c (main): Likewise.\n\t* genemit.c (main): Likewise.\n\t* genextract.c (main): Likewise.\n\t* genflags.c (main): Likewise.\n\t* gengenrtl.c (main): Likewise.\n\t* genopinit.c (main): Likewise.\n\t* genoutput.c (main): Likewise.\n\t* genpeep.c (main): Likewise.\n\t* genrecog.c (main): Likewise.\n\n\t* genattr.c (get_insn_name): Mark parameter with ATTRIBUTE_UNUSED.\n\t* genattrtab.c (get_insn_name): Likewise.\n\t* gencodes.c (get_insn_name): Likewise.\n\t* genconfig.c (get_insn_name): Likewise.\n\t* genemit.c (get_insn_name): Likewise.\n\t* genextract.c (get_insn_name): Likewise.\n\t* genflags.c (get_insn_name): Likewise.\n\t* genopinit.c (get_insn_name): Likewise.\n\t* genpeep.c (get_insn_name): Likewise.\n\n\t* gencheck.c (usage): Add static prototype.\n\t* genextract.c (print_path): Constify a char*.\n\t* genopinit.c (optabs): Likewise.\n\t* genoutput.c (operand_data, data, output_predicate_decls,\n\tcompare_operands): Likewise.\n\t* genrecog.c (write_tree): Add default case in switch.\n\nFrom-SVN: r29434", "tree": {"sha": "be3cd0dcc32b5bcf91e4c2591edf879592b85875", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be3cd0dcc32b5bcf91e4c2591edf879592b85875"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1b59dce97f012deee1628e3da980c4287ef5d3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b59dce97f012deee1628e3da980c4287ef5d3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b59dce97f012deee1628e3da980c4287ef5d3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b59dce97f012deee1628e3da980c4287ef5d3d/comments", "author": null, "committer": null, "parents": [{"sha": "7adfcfed370b82158b6351a7854baa57a69b8a08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7adfcfed370b82158b6351a7854baa57a69b8a08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7adfcfed370b82158b6351a7854baa57a69b8a08"}], "stats": {"total": 181, "additions": 110, "deletions": 71}, "files": [{"sha": "f143f1396898bc4ae85bc59c2982daecfca7bc5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1b59dce97f012deee1628e3da980c4287ef5d3d", "patch": "@@ -1,3 +1,36 @@\n+Wed Sep 15 10:09:48 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* genattr.c (main): Add extern prototype.  Call return, not exit.\n+\t* genattrtab.c (main): Likewise.\n+\t* gencheck.c (main): Likewise.\n+\t* gencodes.c (main): Likewise.\n+\t* genconfig.c (main): Likewise.\n+\t* genemit.c (main): Likewise.\n+\t* genextract.c (main): Likewise.\n+\t* genflags.c (main): Likewise.\n+\t* gengenrtl.c (main): Likewise.\n+\t* genopinit.c (main): Likewise.\n+\t* genoutput.c (main): Likewise.\n+\t* genpeep.c (main): Likewise.\n+\t* genrecog.c (main): Likewise.\n+\t\n+\t* genattr.c (get_insn_name): Mark parameter with ATTRIBUTE_UNUSED.\n+\t* genattrtab.c (get_insn_name): Likewise.\n+\t* gencodes.c (get_insn_name): Likewise.\n+\t* genconfig.c (get_insn_name): Likewise.\n+\t* genemit.c (get_insn_name): Likewise.\n+\t* genextract.c (get_insn_name): Likewise.\n+\t* genflags.c (get_insn_name): Likewise.\n+\t* genopinit.c (get_insn_name): Likewise.\n+\t* genpeep.c (get_insn_name): Likewise.\n+\t\n+\t* gencheck.c (usage): Add static prototype.\n+\t* genextract.c (print_path): Constify a char*.\n+\t* genopinit.c (optabs): Likewise.\n+\t* genoutput.c (operand_data, data, output_predicate_decls,\n+\tcompare_operands): Likewise.\n+\t* genrecog.c (write_tree): Add default case in switch.\n+\n Wed Sep 15 09:59:16 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* rtl.h (get_insn_name, print_rtl_with_bb): Add prototypes."}, {"sha": "9a3357adb9a3174f9af7c5f82bad8e8f3964f4ba", "filename": "gcc/genattr.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=c1b59dce97f012deee1628e3da980c4287ef5d3d", "patch": "@@ -219,6 +219,8 @@ xrealloc (old, size)\n   return ptr;\n }\n \n+extern int main PROTO ((int, char **));\n+\n int\n main (argc, argv)\n      int argc;\n@@ -252,7 +254,7 @@ main (argc, argv)\n   if (infile == 0)\n     {\n       perror (argv[1]);\n-      exit (FATAL_EXIT_CODE);\n+      return (FATAL_EXIT_CODE);\n     }\n \n   printf (\"/* Generated automatically by the program `genattr'\\n\\\n@@ -404,15 +406,13 @@ from the machine description file `md'.  */\\n\\n\");\n   printf(\"#define ATTR_FLAG_very_unlikely\\t0x20\\n\");\n \n   fflush (stdout);\n-  exit (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n-  /* NOTREACHED */\n-  return 0;\n+  return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n const char *\n get_insn_name (code)\n-     int code;\n+     int code ATTRIBUTE_UNUSED;\n {\n   return NULL;\n }"}, {"sha": "f0ba4de79b229e8c21a5d45d2270385677647b83", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=c1b59dce97f012deee1628e3da980c4287ef5d3d", "patch": "@@ -5955,6 +5955,8 @@ write_const_num_delay_slots ()\n }\n \n \f\n+extern int main PROTO ((int, char **));\n+\n int\n main (argc, argv)\n      int argc;\n@@ -5994,7 +5996,7 @@ main (argc, argv)\n   if (infile == 0)\n     {\n       perror (argv[1]);\n-      exit (FATAL_EXIT_CODE);\n+      return (FATAL_EXIT_CODE);\n     }\n \n   /* Set up true and false rtx's */\n@@ -6145,15 +6147,13 @@ from the machine description file `md'.  */\\n\\n\");\n   write_length_unit_log ();\n \n   fflush (stdout);\n-  exit (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n-  /* NOTREACHED */\n-  return 0;\n+  return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n const char *\n get_insn_name (code)\n-     int code;\n+     int code ATTRIBUTE_UNUSED;\n {\n   return NULL;\n }"}, {"sha": "cb2408c0fcab592481280591e76d3dfa23f55b02", "filename": "gcc/gencheck.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgencheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgencheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencheck.c?ref=c1b59dce97f012deee1628e3da980c4287ef5d3d", "patch": "@@ -29,14 +29,20 @@ const char *tree_codes[] = {\n (char*)0\n };\n \n-void usage ()\n+static void usage PROTO ((void));\n+\n+static void\n+usage ()\n {\n   fprintf (stderr,\"Usage: gencheck\\n\");\n }\n \n-int main (argc, argv)\n+extern int main PROTO ((int, char **));\n+\n+int\n+main (argc, argv)\n      int argc;\n-     char *argv[] ATTRIBUTE_UNUSED;\n+     char **argv ATTRIBUTE_UNUSED;\n {\n   int i;\n \n@@ -47,7 +53,7 @@ int main (argc, argv)\n \n     default:\n       usage ();\n-      exit (1);\n+      return (1);\n     }\n \n   printf (\"/* This file is generated using gencheck. Do not edit. */\\n\");"}, {"sha": "7abe8833eccbe3731a37e6ceafca03f30f54bf82", "filename": "gcc/gencodes.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=c1b59dce97f012deee1628e3da980c4287ef5d3d", "patch": "@@ -75,6 +75,8 @@ xrealloc (old, size)\n   return ptr;\n }\n \n+extern int main PROTO ((int, char **));\n+\n int\n main (argc, argv)\n      int argc;\n@@ -94,7 +96,7 @@ main (argc, argv)\n   if (infile == 0)\n     {\n       perror (argv[1]);\n-      exit (FATAL_EXIT_CODE);\n+      return (FATAL_EXIT_CODE);\n     }\n \n   printf (\"/* Generated automatically by the program `gencodes'\\n\\\n@@ -135,15 +137,13 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#endif /* MAX_INSN_CODE */\\n\");\n \n   fflush (stdout);\n-  exit (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n-  /* NOTREACHED */\n-  return 0;\n+  return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n const char *\n get_insn_name (code)\n-     int code;\n+     int code ATTRIBUTE_UNUSED;\n {\n   return NULL;\n }"}, {"sha": "3249c3483e2e58b111577f2f47d8243aeeaa03cf", "filename": "gcc/genconfig.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=c1b59dce97f012deee1628e3da980c4287ef5d3d", "patch": "@@ -277,6 +277,8 @@ xrealloc (old, size)\n   return ptr;\n }\n \n+extern int main PROTO ((int, char **));\n+\n int\n main (argc, argv)\n      int argc;\n@@ -296,7 +298,7 @@ main (argc, argv)\n   if (infile == 0)\n     {\n       perror (argv[1]);\n-      exit (FATAL_EXIT_CODE);\n+      return (FATAL_EXIT_CODE);\n     }\n \n   printf (\"/* Generated automatically by the program `genconfig'\\n\\\n@@ -365,15 +367,13 @@ from the machine description file `md'.  */\\n\\n\");\n     printf (\"#define HAVE_peephole2\\n\");\n \n   fflush (stdout);\n-  exit (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n-  /* NOTREACHED */\n-  return 0;\n+  return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n const char *\n get_insn_name (code)\n-     int code;\n+     int code ATTRIBUTE_UNUSED;\n {\n   return NULL;\n }"}, {"sha": "6b3687d11105455b67d92f2bfba0edb2a4400e41", "filename": "gcc/genemit.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=c1b59dce97f012deee1628e3da980c4287ef5d3d", "patch": "@@ -551,7 +551,7 @@ gen_split (split)\n {\n   register int i;\n   int operands;\n-  char *name = \"split\";\n+  const char *name = \"split\";\n \n   if (GET_CODE (split) == DEFINE_PEEPHOLE2)\n     name = \"peephole2\";\n@@ -769,6 +769,8 @@ xrealloc (old, size)\n   return ptr;\n }\n \n+extern int main PROTO ((int, char **));\n+\n int\n main (argc, argv)\n      int argc;\n@@ -788,7 +790,7 @@ main (argc, argv)\n   if (infile == 0)\n     {\n       perror (argv[1]);\n-      exit (FATAL_EXIT_CODE);\n+      return (FATAL_EXIT_CODE);\n     }\n \n   /* Assign sequential codes to all entries in the machine description\n@@ -860,15 +862,13 @@ from the machine description file `md'.  */\\n\\n\");\n   output_add_clobbers ();\n \n   fflush (stdout);\n-  exit (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n-  /* NOTREACHED */\n-  return 0;\n+  return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n const char *\n get_insn_name (code)\n-     int code;\n+     int code ATTRIBUTE_UNUSED;\n {\n   return NULL;\n }"}, {"sha": "7ce5cbfbafd89cdffbd7d1b351d9a5b75cecd389", "filename": "gcc/genextract.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=c1b59dce97f012deee1628e3da980c4287ef5d3d", "patch": "@@ -95,7 +95,7 @@ static struct code_ptr *peepholes;\n \n static void gen_insn PROTO ((rtx));\n static void walk_rtx PROTO ((rtx, const char *));\n-static void print_path PROTO ((char *));\n+static void print_path PROTO ((const char *));\n \n static void\n gen_insn (insn)\n@@ -300,7 +300,7 @@ walk_rtx (x, path)\n \n static void\n print_path (path)\n-     char *path;\n+     const char *path;\n {\n   register int len = strlen (path);\n   register int i;\n@@ -375,6 +375,8 @@ xstrdup (input)\n   return output;\n }\n \f\n+extern int main PROTO ((int, char **));\n+\n int\n main (argc, argv)\n      int argc;\n@@ -396,7 +398,7 @@ main (argc, argv)\n   if (infile == 0)\n     {\n       perror (argv[1]);\n-      exit (FATAL_EXIT_CODE);\n+      return (FATAL_EXIT_CODE);\n     }\n \n   /* Assign sequential codes to all entries in the machine description\n@@ -520,15 +522,13 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"    }\\n}\\n\");\n \n   fflush (stdout);\n-  exit (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n-  /* NOTREACHED */\n-  return 0;\n+  return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n const char *\n get_insn_name (code)\n-     int code;\n+     int code ATTRIBUTE_UNUSED;\n {\n   return NULL;\n }"}, {"sha": "916519ed2545ef9d517cbb3b9904d17fea523e4d", "filename": "gcc/genflags.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=c1b59dce97f012deee1628e3da980c4287ef5d3d", "patch": "@@ -195,6 +195,8 @@ xrealloc (old, size)\n   return ptr;\n }\n \n+extern int main PROTO ((int, char **));\n+\n int\n main (argc, argv)\n      int argc;\n@@ -220,7 +222,7 @@ main (argc, argv)\n   if (infile == 0)\n     {\n       perror (argv[1]);\n-      exit (FATAL_EXIT_CODE);\n+      return (FATAL_EXIT_CODE);\n     }\n \n   printf (\"/* Generated automatically by the program `genflags'\\n\\\n@@ -271,15 +273,13 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#endif  /* NO_MD_PROTOTYPES */\\n\");\n \n   fflush (stdout);\n-  exit (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n-  /* NOTREACHED */\n-  return 0;\n+  return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n const char *\n get_insn_name (code)\n-     int code;\n+     int code ATTRIBUTE_UNUSED;\n {\n   return NULL;\n }"}, {"sha": "778ef9b5414e5635445fa0aca7ee5bcf7858c4a7", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=c1b59dce97f012deee1628e3da980c4287ef5d3d", "patch": "@@ -391,6 +391,7 @@ xmalloc (nbytes)\n /* This is the main program.  We accept only one argument, \"-h\", which\n    says we are writing the genrtl.h file.  Otherwise we are writing the\n    genrtl.c file.  */\n+extern int main PROTO ((int, char **));\n \n int\n main (argc, argv)\n@@ -406,7 +407,5 @@ main (argc, argv)\n     gencode ();\n \n   fflush (stdout);\n-  exit (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n-  /* NOTREACHED */\n-  return 0;\n+  return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }"}, {"sha": "f364a012e06fc3396bb5f7fa7ef5a1eac447b53b", "filename": "gcc/genopinit.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=c1b59dce97f012deee1628e3da980c4287ef5d3d", "patch": "@@ -60,7 +60,7 @@ struct obstack *rtl_obstack = &obstack;\n /* The reason we use \\% is to avoid sequences of the form %-capletter-%\n    which SCCS treats as magic.  This gets warnings which you should ignore.  */\n \n-const char *optabs[] =\n+const char * const optabs[] =\n { \"extendtab[(int) %B][(int) %A][0] = CODE_FOR_%(extend%a\\%b2%)\",\n   \"extendtab[(int) %B][(int) %A][1] = CODE_FOR_%(zero_extend%a\\%b2%)\",\n   \"fixtab[(int) %A][(int) %B][0] = CODE_FOR_%(fix%F\\%a%I\\%b2%)\",\n@@ -301,6 +301,8 @@ xrealloc (old, size)\n   return ptr;\n }\n \n+extern int main PROTO ((int, char **));\n+\n int\n main (argc, argv)\n      int argc;\n@@ -320,7 +322,7 @@ main (argc, argv)\n   if (infile == 0)\n     {\n       perror (argv[1]);\n-      exit (FATAL_EXIT_CODE);\n+      return (FATAL_EXIT_CODE);\n     }\n \n   printf (\"/* Generated automatically by the program `genopinit'\\n\\\n@@ -356,15 +358,13 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"}\\n\");\n \n   fflush (stdout);\n-  exit (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n-  /* NOTREACHED */\n-  return 0;\n+  return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n const char *\n get_insn_name (code)\n-     int code;\n+     int code ATTRIBUTE_UNUSED;\n {\n   return NULL;\n }"}, {"sha": "c266342b180a054e6b2990080013c142ae785ffc", "filename": "gcc/genoutput.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=c1b59dce97f012deee1628e3da980c4287ef5d3d", "patch": "@@ -122,8 +122,8 @@ struct operand_data\n {\n   struct operand_data *next;\n   int index;\n-  char *predicate;\n-  char *constraint;\n+  const char *predicate;\n+  const char *constraint;\n   enum machine_mode mode;\n   unsigned char n_alternatives;\n   char address_p;\n@@ -154,8 +154,8 @@ static struct operand_data **odata_end = &null_operand.next;\n struct data\n {\n   struct data *next;\n-  char *name;\n-  char *template;\n+  const char *name;\n+  const char *template;\n   int code_number;\n   int index_number;\n   int n_operands;\t\t/* Number of operands this insn recognizes */\n@@ -249,7 +249,7 @@ from the machine description file `md'.  */\\n\\n\");\n static void\n output_predicate_decls ()\n {\n-  struct predicate { char *name; struct predicate *next; } *predicates = 0;\n+  struct predicate { const char *name; struct predicate *next; } *predicates = 0;\n   register struct operand_data *d;\n   struct predicate *p;\n \n@@ -545,7 +545,7 @@ static int\n compare_operands (d0, d1)\n      struct operand_data *d0, *d1;\n {\n-  char *p0, *p1;\n+  const char *p0, *p1;\n \n   p0 = d0->predicate;\n   if (!p0)\n@@ -909,6 +909,8 @@ xrealloc (old, size)\n   return ptr;\n }\n \n+extern int main PROTO ((int, char **));\n+\n int\n main (argc, argv)\n      int argc;\n@@ -928,7 +930,7 @@ main (argc, argv)\n   if (infile == 0)\n     {\n       perror (argv[1]);\n-      exit (FATAL_EXIT_CODE);\n+      return (FATAL_EXIT_CODE);\n     }\n \n   output_prologue ();\n@@ -965,11 +967,8 @@ main (argc, argv)\n   output_get_insn_name ();\n \n   fflush (stdout);\n-  exit (ferror (stdout) != 0 || have_error\n+  return (ferror (stdout) != 0 || have_error\n \t? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n-\n-  /* NOTREACHED */\n-  return 0;\n }\n \n static int"}, {"sha": "8c02ba3bc3b9f2661332891ea367fdac47eebcef", "filename": "gcc/genpeep.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=c1b59dce97f012deee1628e3da980c4287ef5d3d", "patch": "@@ -404,6 +404,8 @@ xrealloc (old, size)\n   return ptr;\n }\n \n+extern int main PROTO ((int, char **));\n+\n int\n main (argc, argv)\n      int argc;\n@@ -425,7 +427,7 @@ main (argc, argv)\n   if (infile == 0)\n     {\n       perror (argv[1]);\n-      exit (FATAL_EXIT_CODE);\n+      return (FATAL_EXIT_CODE);\n     }\n \n   printf (\"/* Generated automatically by the program `genpeep'\\n\\\n@@ -486,15 +488,13 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#endif\\n\");\n \n   fflush (stdout);\n-  exit (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n-  /* NOTREACHED */\n-  return 0;\n+  return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n const char *\n get_insn_name (code)\n-     int code;\n+     int code ATTRIBUTE_UNUSED;\n {\n   return NULL;\n }"}, {"sha": "0d6a2d10a704d25d93c20bac2372976e37080458", "filename": "gcc/genrecog.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b59dce97f012deee1628e3da980c4287ef5d3d/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=c1b59dce97f012deee1628e3da980c4287ef5d3d", "patch": "@@ -1721,6 +1721,8 @@ write_tree (tree, prevpos, afterward, initial, type)\n       name_prefix = \"recog\";\n       call_suffix = \", pnum_clobbers\";\n       break;\n+    default:\n+      abort();\n     }\n   if (! initial && tree->subroutine_number > 0)\n     {\n@@ -1868,6 +1870,8 @@ xmalloc (size)\n   return val;\n }\n \n+extern int main PROTO ((int, char **));\n+\n int\n main (argc, argv)\n      int argc;\n@@ -1892,7 +1896,7 @@ main (argc, argv)\n   if (infile == 0)\n     {\n       perror (argv[1]);\n-      exit (FATAL_EXIT_CODE);\n+      return (FATAL_EXIT_CODE);\n     }\n \n   next_insn_code = 0;\n@@ -1987,9 +1991,7 @@ from the machine description file `md'.  */\\n\\n\");\n     }\n \n   fflush (stdout);\n-  exit (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n-  /* NOTREACHED */\n-  return 0;\n+  return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */"}]}