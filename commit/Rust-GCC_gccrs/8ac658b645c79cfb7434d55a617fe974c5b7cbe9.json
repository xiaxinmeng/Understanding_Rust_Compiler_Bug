{"sha": "8ac658b645c79cfb7434d55a617fe974c5b7cbe9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFjNjU4YjY0NWM3OWNmYjc0MzRkNTVhNjE3ZmU5NzRjNWI3Y2JlOQ==", "commit": {"author": {"name": "Richard Zidlicky", "email": "rz@linux-m68k.org", "date": "2004-03-16T03:54:33Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-03-16T03:54:33Z"}, "message": "m68k.md: Fix constraints for bitfield instructions.\n\n2004-03-16   Richard Zidlicky  <rz@linux-m68k.org>\n\n\t* config/m68k/m68k.md: Fix constraints for bitfield instructions.\n\t* doc/md.texi: Clarify description of \"i\" constraint.\n\nFrom-SVN: r79523", "tree": {"sha": "254756c850fb5ded2a914d3d049309743bce7729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/254756c850fb5ded2a914d3d049309743bce7729"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ac658b645c79cfb7434d55a617fe974c5b7cbe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac658b645c79cfb7434d55a617fe974c5b7cbe9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ac658b645c79cfb7434d55a617fe974c5b7cbe9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac658b645c79cfb7434d55a617fe974c5b7cbe9/comments", "author": null, "committer": null, "parents": [{"sha": "1a4786726d0aa5081769e3c4c9965412b1414e2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4786726d0aa5081769e3c4c9965412b1414e2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a4786726d0aa5081769e3c4c9965412b1414e2f"}], "stats": {"total": 55, "additions": 30, "deletions": 25}, "files": [{"sha": "635e5ae31db5706ce84cf64a410ed973c87685ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac658b645c79cfb7434d55a617fe974c5b7cbe9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac658b645c79cfb7434d55a617fe974c5b7cbe9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ac658b645c79cfb7434d55a617fe974c5b7cbe9", "patch": "@@ -1,3 +1,8 @@\n+2004-03-16   Richard Zidlicky  <rz@linux-m68k.org>\n+\n+\t* config/m68k/m68k.md: Fix constraints for bitfield instructions.\n+\t* doc/md.texi: Clarify description of \"i\" constraint.\n+\n 2004-03-15  James E Wilson  <wilson@specifixinc.com>\n \n \t* config/mips/mips.md (type): Split load into load, fpload, fpidxload."}, {"sha": "e674ca2a7d73597be60ea50c152527307970a5d2", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac658b645c79cfb7434d55a617fe974c5b7cbe9/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac658b645c79cfb7434d55a617fe974c5b7cbe9/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=8ac658b645c79cfb7434d55a617fe974c5b7cbe9", "patch": "@@ -4737,8 +4737,8 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d\")\n \t(sign_extract:SI (match_operand:QI 1 \"memory_operand\" \"o\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di\")\n-\t\t\t (match_operand:SI 3 \"general_operand\" \"di\")))]\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"dn\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"dn\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"bfexts %1{%b3:%b2},%0\")\n \n@@ -4753,8 +4753,8 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d\")\n \t(zero_extract:SI (match_operand:QI 1 \"memory_operand\" \"o,d\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di,di\")\n-\t\t\t (match_operand:SI 3 \"general_operand\" \"di,di\")))]\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"dn,dn\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"dn,dn\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n@@ -4771,8 +4771,8 @@\n \n (define_insn \"\"\n   [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+o\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"dn\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"dn\"))\n         (xor:SI (zero_extract:SI (match_dup 0) (match_dup 1) (match_dup 2))\n \t\t(match_operand 3 \"const_int_operand\" \"n\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n@@ -4786,8 +4786,8 @@\n \n (define_insn \"\"\n   [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+o\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"dn\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"dn\"))\n \t(const_int 0))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n {\n@@ -4797,8 +4797,8 @@\n \n (define_insn \"\"\n   [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+o\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"dn\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"dn\"))\n \t(const_int -1))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n {\n@@ -4816,8 +4816,8 @@\n \n (define_insn \"\"\n   [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+o\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"dn\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"dn\"))\n \t(match_operand:SI 3 \"register_operand\" \"d\"))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"bfins %3,%0{%b2:%b1}\")\n@@ -4828,16 +4828,16 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d\")\n \t(sign_extract:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di\")\n-\t\t\t (match_operand:SI 3 \"general_operand\" \"di\")))]\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"dn\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"dn\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"bfexts %1{%b3:%b2},%0\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d\")\n \t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di\")\n-\t\t\t (match_operand:SI 3 \"general_operand\" \"di\")))]\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"dn\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"dn\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n@@ -4854,8 +4854,8 @@\n \n (define_insn \"\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+d\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"dn\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"dn\"))\n \t(const_int 0))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n {\n@@ -4865,8 +4865,8 @@\n \n (define_insn \"\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+d\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"dn\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"dn\"))\n \t(const_int -1))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n {\n@@ -4876,8 +4876,8 @@\n \n (define_insn \"\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+d\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"dn\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"dn\"))\n \t(match_operand:SI 3 \"register_operand\" \"d\"))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n {\n@@ -4899,7 +4899,7 @@\n   [(set (cc0)\n \t(zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"o\")\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"n\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di\")))]\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"dn\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n {\n   if (operands[1] == const1_rtx\n@@ -4924,7 +4924,7 @@\n   [(set (cc0)\n \t(zero_extract:SI (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"n\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di\")))]\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"dn\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n {\n   if (operands[1] == const1_rtx"}, {"sha": "f1f8dae1e52073cd9f33a74932f41f557bdd6890", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac658b645c79cfb7434d55a617fe974c5b7cbe9/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac658b645c79cfb7434d55a617fe974c5b7cbe9/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=8ac658b645c79cfb7434d55a617fe974c5b7cbe9", "patch": "@@ -800,7 +800,7 @@ register.\n @item @samp{i}\n An immediate integer operand (one with constant value) is allowed.\n This includes symbolic constants whose values will be known only at\n-assembly time.\n+assembly time or later.\n \n @cindex @samp{n} in constraint\n @item @samp{n}"}]}