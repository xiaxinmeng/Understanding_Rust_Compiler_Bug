{"sha": "6342e53f0746dc031111aa7c3a463df9238bf030", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM0MmU1M2YwNzQ2ZGMwMzExMTFhYTdjM2E0NjNkZjkyMzhiZjAzMA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2012-03-06T16:27:37Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2012-03-06T16:27:37Z"}, "message": "trans-mem.c: New typedef for tm_region_p.\n\n        * trans-mem.c: New typedef for tm_region_p.\n        Define vector types for tm_region_p.\n        (tm_region_init): Replace region_worklist to a vector called\n        bb_regions.\n\nFrom-SVN: r185000", "tree": {"sha": "b88e834e2ed77592f697207a0ca13fca8602982c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b88e834e2ed77592f697207a0ca13fca8602982c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6342e53f0746dc031111aa7c3a463df9238bf030", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6342e53f0746dc031111aa7c3a463df9238bf030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6342e53f0746dc031111aa7c3a463df9238bf030", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6342e53f0746dc031111aa7c3a463df9238bf030/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "877097dfbc6bf3d1b551ef682858ed6f78bb2c92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/877097dfbc6bf3d1b551ef682858ed6f78bb2c92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/877097dfbc6bf3d1b551ef682858ed6f78bb2c92"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "e3bba82e6bd72327178ab5dd0321eecf7e50accb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6342e53f0746dc031111aa7c3a463df9238bf030/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6342e53f0746dc031111aa7c3a463df9238bf030/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6342e53f0746dc031111aa7c3a463df9238bf030", "patch": "@@ -1,3 +1,10 @@\n+2012-03-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* trans-mem.c: New typedef for tm_region_p.\n+\tDefine vector types for tm_region_p.\n+\t(tm_region_init): Replace region_worklist to a vector called\n+\tbb_regions.\n+\n 2012-03-06  Richard Guenther  <rguenther@suse.de>\n \n \t* fold-const.c (build_fold_addr_expr_with_type_loc): Fold"}, {"sha": "2badf250650850b2d0216b150ade3d07b3567dd6", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6342e53f0746dc031111aa7c3a463df9238bf030/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6342e53f0746dc031111aa7c3a463df9238bf030/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=6342e53f0746dc031111aa7c3a463df9238bf030", "patch": "@@ -1757,6 +1757,10 @@ struct tm_region\n   bitmap irr_blocks;\n };\n \n+typedef struct tm_region *tm_region_p;\n+DEF_VEC_P (tm_region_p);\n+DEF_VEC_ALLOC_P (tm_region_p, heap);\n+\n /* True if there are pending edge statements to be committed for the\n    current function being scanned in the tmmark pass.  */\n bool pending_edge_inserts_p;\n@@ -1858,25 +1862,23 @@ tm_region_init (struct tm_region *region)\n   VEC(basic_block, heap) *queue = NULL;\n   bitmap visited_blocks = BITMAP_ALLOC (NULL);\n   struct tm_region *old_region;\n-  struct tm_region **region_worklist;\n+  VEC(tm_region_p, heap) *bb_regions = NULL;\n \n   all_tm_regions = region;\n   bb = single_succ (ENTRY_BLOCK_PTR);\n \n   /* We could store this information in bb->aux, but we may get called\n      through get_all_tm_blocks() from another pass that may be already\n      using bb->aux.  */\n-  region_worklist =\n-    (struct tm_region **) xcalloc (sizeof (struct tm_region *),\n-\t\t\t\t  last_basic_block + NUM_FIXED_BLOCKS);\n+  VEC_safe_grow_cleared (tm_region_p, heap, bb_regions, last_basic_block);\n \n   VEC_safe_push (basic_block, heap, queue, bb);\n-  region_worklist[bb->index] = region;\n+  VEC_replace (tm_region_p, bb_regions, bb->index, region);\n   do\n     {\n       bb = VEC_pop (basic_block, queue);\n-      region = region_worklist[bb->index];\n-      region_worklist[bb->index] = NULL;\n+      region = VEC_index (tm_region_p, bb_regions, bb->index);\n+      VEC_replace (tm_region_p, bb_regions, bb->index, NULL);\n \n       /* Record exit and irrevocable blocks.  */\n       region = tm_region_init_1 (region, bb);\n@@ -1898,15 +1900,15 @@ tm_region_init (struct tm_region *region)\n \t       the entry block of the new region is associated with this region.\n \t       Other successors are still part of the old region.  */\n \t    if (old_region != region && e->dest != region->entry_block)\n-\t      region_worklist[e->dest->index] = old_region;\n+\t      VEC_replace (tm_region_p, bb_regions, e->dest->index, old_region);\n \t    else\n-\t      region_worklist[e->dest->index] = region;\n+\t      VEC_replace (tm_region_p, bb_regions, e->dest->index, region);\n \t  }\n     }\n   while (!VEC_empty (basic_block, queue));\n   VEC_free (basic_block, heap, queue);\n   BITMAP_FREE (visited_blocks);\n-  free (region_worklist);\n+  VEC_free (tm_region_p, heap, bb_regions);\n }\n \n /* The \"gate\" function for all transactional memory expansion and optimization"}]}