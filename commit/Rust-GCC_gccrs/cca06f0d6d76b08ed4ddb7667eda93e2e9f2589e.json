{"sha": "cca06f0d6d76b08ed4ddb7667eda93e2e9f2589e", "node_id": "C_kwDOANBUbNoAKGNjYTA2ZjBkNmQ3NmIwOGVkNGRkYjc2NjdlZGE5M2UyZTlmMjU4OWU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-29T15:50:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-29T17:01:32Z"}, "message": "libstdc++: Avoid bogus warning in std::vector::insert [PR107852]\n\nGCC assumes that any global variable might be modified by operator new,\nand so in the testcase for this PR all data members get reloaded after\nallocating new storage. By making local copies of the _M_start and\n_M_finish members we avoid that, and then the compiler has enough info\nto remove the dead branches that trigger bogus -Warray-bounds warnings.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/107852\n\tPR libstdc++/106199\n\tPR libstdc++/100366\n\t* include/bits/vector.tcc (vector::_M_fill_insert): Copy\n\t_M_start and _M_finish members before allocating.\n\t(vector::_M_default_append): Likewise.\n\t(vector::_M_range_insert): Likewise.", "tree": {"sha": "3e22e09174f7995e1cb27b3e830aca9e419d170a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e22e09174f7995e1cb27b3e830aca9e419d170a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cca06f0d6d76b08ed4ddb7667eda93e2e9f2589e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca06f0d6d76b08ed4ddb7667eda93e2e9f2589e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cca06f0d6d76b08ed4ddb7667eda93e2e9f2589e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca06f0d6d76b08ed4ddb7667eda93e2e9f2589e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81cf0354d5f81f2c7600a3bc7ae4600757286995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81cf0354d5f81f2c7600a3bc7ae4600757286995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81cf0354d5f81f2c7600a3bc7ae4600757286995"}], "stats": {"total": 63, "additions": 37, "deletions": 26}, "files": [{"sha": "27ef1a4ee7fe59ce3a1f8d739f808ab807d4be72", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca06f0d6d76b08ed4ddb7667eda93e2e9f2589e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca06f0d6d76b08ed4ddb7667eda93e2e9f2589e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=cca06f0d6d76b08ed4ddb7667eda93e2e9f2589e", "patch": "@@ -539,9 +539,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      if (__elems_after > __n)\n \t\t{\n \t\t  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);\n-\t\t  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,\n-\t\t\t\t\t      this->_M_impl._M_finish,\n-\t\t\t\t\t      this->_M_impl._M_finish,\n+\t\t  std::__uninitialized_move_a(__old_finish - __n,\n+\t\t\t\t\t      __old_finish,\n+\t\t\t\t\t      __old_finish,\n \t\t\t\t\t      _M_get_Tp_allocator());\n \t\t  this->_M_impl._M_finish += __n;\n \t\t  _GLIBCXX_ASAN_ANNOTATE_GREW(__n);\n@@ -554,7 +554,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t{\n \t\t  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);\n \t\t  this->_M_impl._M_finish =\n-\t\t    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,\n+\t\t    std::__uninitialized_fill_n_a(__old_finish,\n \t\t\t\t\t\t  __n - __elems_after,\n \t\t\t\t\t\t  __x_copy,\n \t\t\t\t\t\t  _M_get_Tp_allocator());\n@@ -569,9 +569,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    }\n \t  else\n \t    {\n+\t      // Make local copies of these members because the compiler thinks\n+\t      // the allocator can alter them if 'this' is globally reachable.\n+\t      pointer __old_start = this->_M_impl._M_start;\n+\t      pointer __old_finish = this->_M_impl._M_finish;\n+\t      const pointer __pos = __position.base();\n+\n \t      const size_type __len =\n \t\t_M_check_len(__n, \"vector::_M_fill_insert\");\n-\t      const size_type __elems_before = __position - begin();\n+\t      const size_type __elems_before = __pos - __old_start;\n \t      pointer __new_start(this->_M_allocate(__len));\n \t      pointer __new_finish(__new_start);\n \t      __try\n@@ -584,15 +590,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n \t\t  __new_finish\n \t\t    = std::__uninitialized_move_if_noexcept_a\n-\t\t    (this->_M_impl._M_start, __position.base(),\n-\t\t     __new_start, _M_get_Tp_allocator());\n+\t\t    (__old_start, __pos, __new_start, _M_get_Tp_allocator());\n \n \t\t  __new_finish += __n;\n \n \t\t  __new_finish\n \t\t    = std::__uninitialized_move_if_noexcept_a\n-\t\t    (__position.base(), this->_M_impl._M_finish,\n-\t\t     __new_finish, _M_get_Tp_allocator());\n+\t\t    (__pos, __old_finish, __new_finish, _M_get_Tp_allocator());\n \t\t}\n \t      __catch(...)\n \t\t{\n@@ -606,12 +610,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t  _M_deallocate(__new_start, __len);\n \t\t  __throw_exception_again;\n \t\t}\n-\t      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n-\t\t\t    _M_get_Tp_allocator());\n+\t      std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());\n \t      _GLIBCXX_ASAN_ANNOTATE_REINIT;\n-\t      _M_deallocate(this->_M_impl._M_start,\n-\t\t\t    this->_M_impl._M_end_of_storage\n-\t\t\t    - this->_M_impl._M_start);\n+\t      _M_deallocate(__old_start,\n+\t\t\t    this->_M_impl._M_end_of_storage - __old_start);\n \t      this->_M_impl._M_start = __new_start;\n \t      this->_M_impl._M_finish = __new_finish;\n \t      this->_M_impl._M_end_of_storage = __new_start + __len;\n@@ -645,6 +647,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    }\n \t  else\n \t    {\n+\t      // Make local copies of these members because the compiler thinks\n+\t      // the allocator can alter them if 'this' is globally reachable.\n+\t      pointer __old_start = this->_M_impl._M_start;\n+\t      pointer __old_finish = this->_M_impl._M_finish;\n+\n \t      const size_type __len =\n \t\t_M_check_len(__n, \"vector::_M_default_append\");\n \t      pointer __new_start(this->_M_allocate(__len));\n@@ -660,7 +667,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t      _M_deallocate(__new_start, __len);\n \t\t      __throw_exception_again;\n \t\t    }\n-\t\t  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,\n+\t\t  _S_relocate(__old_start, __old_finish,\n \t\t\t      __new_start, _M_get_Tp_allocator());\n \t\t}\n \t      else\n@@ -672,7 +679,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t      __n, _M_get_Tp_allocator());\n \t\t      __destroy_from = __new_start + __size;\n \t\t      std::__uninitialized_move_if_noexcept_a(\n-\t\t\t      this->_M_impl._M_start, this->_M_impl._M_finish,\n+\t\t\t      __old_start, __old_finish,\n \t\t\t      __new_start, _M_get_Tp_allocator());\n \t\t    }\n \t\t  __catch(...)\n@@ -683,13 +690,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t      _M_deallocate(__new_start, __len);\n \t\t      __throw_exception_again;\n \t\t    }\n-\t\t  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n+\t\t  std::_Destroy(__old_start, __old_finish,\n \t\t\t\t_M_get_Tp_allocator());\n \t\t}\n \t      _GLIBCXX_ASAN_ANNOTATE_REINIT;\n-\t      _M_deallocate(this->_M_impl._M_start,\n-\t\t\t    this->_M_impl._M_end_of_storage\n-\t\t\t    - this->_M_impl._M_start);\n+\t      _M_deallocate(__old_start,\n+\t\t\t    this->_M_impl._M_end_of_storage - __old_start);\n \t      this->_M_impl._M_start = __new_start;\n \t      this->_M_impl._M_finish = __new_start + __size + __n;\n \t      this->_M_impl._M_end_of_storage = __new_start + __len;\n@@ -782,6 +788,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      }\n \t    else\n \t      {\n+\t\t// Make local copies of these members because the compiler\n+\t\t// thinks the allocator can alter them if 'this' is globally\n+\t\t// reachable.\n+\t\tpointer __old_start = this->_M_impl._M_start;\n+\t\tpointer __old_finish = this->_M_impl._M_finish;\n+\n \t\tconst size_type __len =\n \t\t  _M_check_len(__n, \"vector::_M_range_insert\");\n \t\tpointer __new_start(this->_M_allocate(__len));\n@@ -790,15 +802,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t  {\n \t\t    __new_finish\n \t\t      = std::__uninitialized_move_if_noexcept_a\n-\t\t      (this->_M_impl._M_start, __position.base(),\n+\t\t      (__old_start, __position.base(),\n \t\t       __new_start, _M_get_Tp_allocator());\n \t\t    __new_finish\n \t\t      = std::__uninitialized_copy_a(__first, __last,\n \t\t\t\t\t\t    __new_finish,\n \t\t\t\t\t\t    _M_get_Tp_allocator());\n \t\t    __new_finish\n \t\t      = std::__uninitialized_move_if_noexcept_a\n-\t\t      (__position.base(), this->_M_impl._M_finish,\n+\t\t      (__position.base(), __old_finish,\n \t\t       __new_finish, _M_get_Tp_allocator());\n \t\t  }\n \t\t__catch(...)\n@@ -808,12 +820,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t    _M_deallocate(__new_start, __len);\n \t\t    __throw_exception_again;\n \t\t  }\n-\t\tstd::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n+\t\tstd::_Destroy(__old_start, __old_finish,\n \t\t\t      _M_get_Tp_allocator());\n \t\t_GLIBCXX_ASAN_ANNOTATE_REINIT;\n-\t\t_M_deallocate(this->_M_impl._M_start,\n-\t\t\t      this->_M_impl._M_end_of_storage\n-\t\t\t      - this->_M_impl._M_start);\n+\t\t_M_deallocate(__old_start,\n+\t\t\t      this->_M_impl._M_end_of_storage - __old_start);\n \t\tthis->_M_impl._M_start = __new_start;\n \t\tthis->_M_impl._M_finish = __new_finish;\n \t\tthis->_M_impl._M_end_of_storage = __new_start + __len;"}]}