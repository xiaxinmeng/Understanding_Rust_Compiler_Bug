{"sha": "4c457b6be7e551e0c3cc9f75ee682062e3960919", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM0NTdiNmJlN2U1NTFlMGMzY2M5Zjc1ZWU2ODIwNjJlMzk2MDkxOQ==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "1999-09-18T18:05:59Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "1999-09-18T18:05:59Z"}, "message": "(USER_H): Add iso646.h back.\n\nFrom-SVN: r29497", "tree": {"sha": "9751d70fe79a88b703075a80c8548ae26410538c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9751d70fe79a88b703075a80c8548ae26410538c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c457b6be7e551e0c3cc9f75ee682062e3960919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c457b6be7e551e0c3cc9f75ee682062e3960919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c457b6be7e551e0c3cc9f75ee682062e3960919", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c457b6be7e551e0c3cc9f75ee682062e3960919/comments", "author": null, "committer": null, "parents": [{"sha": "2a780534ddb02dab07b876d08021967484161daa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a780534ddb02dab07b876d08021967484161daa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a780534ddb02dab07b876d08021967484161daa"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "0a3435e1cb8f562385188f8e44e5c75061bb7be6", "filename": "gcc/Makefile.in", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c457b6be7e551e0c3cc9f75ee682062e3960919/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c457b6be7e551e0c3cc9f75ee682062e3960919/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4c457b6be7e551e0c3cc9f75ee682062e3960919", "patch": "@@ -55,11 +55,11 @@ ALLOCA =\n ALLOCA_FLAGS =\n ALLOCA_FINISH = true\n \n-# Various ways of specifying flags for compilations:  \n+# Various ways of specifying flags for compilations:\n # CFLAGS is for the user to override to, e.g., do a bootstrap with -O2.\n # BOOT_CFLAGS is the value of CFLAGS to pass\n # to the stage2 and stage3 compilations\n-# WARN_CFLAGS are the warning flags to pass to stage2 and stage3.  \n+# WARN_CFLAGS are the warning flags to pass to stage2 and stage3.\n # (And for stage 1 if the native compiler is GCC.)  It is\n # separate from BOOT_CFLAGS because people tend to override optimization\n # flags and we'd like them to still have warnings turned on.  They are free\n@@ -114,7 +114,7 @@ MAKEOVERRIDES =\n @SET_MAKE@\n \n # Define this as & to perform parallel make on a Sequent.\n-# Note that this has some bugs, and it seems currently necessary \n+# Note that this has some bugs, and it seems currently necessary\n # to compile all the gen* files first by hand to avoid erroneous results.\n P =\n \n@@ -147,7 +147,8 @@ INSTALL_HEADERS_DIR = @build_install_headers_dir@\n # to programs compiled with GCC.\n USER_H = $(srcdir)/ginclude/stdarg.h $(srcdir)/ginclude/stddef.h \\\n     $(srcdir)/ginclude/varargs.h $(srcdir)/ginclude/proto.h \\\n-    $(srcdir)/ginclude/stdbool.h $(EXTRA_HEADERS) $(LANG_EXTRA_HEADERS)\n+    $(srcdir)/ginclude/stdbool.h $(srcdir)/ginclude/iso646.h \\\n+    $(EXTRA_HEADERS) $(LANG_EXTRA_HEADERS)\n \n # Target to use whe installing assert.h.  Some systems may\n # want to set this empty.\n@@ -339,14 +340,14 @@ LIBGCC2 = libgcc2.a\n # so that -g1 will be tested.\n #\n LIBGCC2_DEBUG_CFLAGS = -g1\n-LIBGCC2_CFLAGS = -O2 $(LIBGCC2_INCLUDES) $(GCC_CFLAGS) $(TARGET_LIBGCC2_CFLAGS) $(LIBGCC2_DEBUG_CFLAGS) $(GTHREAD_FLAGS) -DIN_LIBGCC2 -D__GCC_FLOAT_NOT_NEEDED @inhibit_libc@ \n+LIBGCC2_CFLAGS = -O2 $(LIBGCC2_INCLUDES) $(GCC_CFLAGS) $(TARGET_LIBGCC2_CFLAGS) $(LIBGCC2_DEBUG_CFLAGS) $(GTHREAD_FLAGS) -DIN_LIBGCC2 -D__GCC_FLOAT_NOT_NEEDED @inhibit_libc@\n \n # Additional options to use when compiling libgcc2.a.\n # Some targets override this to -Iinclude\n LIBGCC2_INCLUDES =\n \n # Additional target-dependent options for compiling libgcc2.a.\n-TARGET_LIBGCC2_CFLAGS = \n+TARGET_LIBGCC2_CFLAGS =\n \n # Things which must be built before building libgcc2.a.\n # Some targets override this to stmp-int-hdrs\n@@ -391,11 +392,11 @@ USE_COLLECT2 = collect2$(exeext)\n \n # List of extra C and assembler files to add to libgcc1.a.\n # Assembler files should have names ending in `.asm'.\n-LIB1FUNCS_EXTRA = \n+LIB1FUNCS_EXTRA =\n \n # List of extra C and assembler files to add to libgcc2.a.\n # Assembler files should have names ending in `.asm'.\n-LIB2FUNCS_EXTRA = \n+LIB2FUNCS_EXTRA =\n \n # Handle cpp installation.\n INSTALL_CPP=\n@@ -406,15 +407,15 @@ UNINSTALL_CPP=\n FLOAT_H=@float_h_file@\n \n # Program to convert libraries.\n-LIBCONVERT = \n+LIBCONVERT =\n \n # Control whether header files are installed.\n INSTALL_HEADERS=install-headers\n \n # Additional directories of header files to run fixincludes on.\n # These should be directories searched automatically by default\n # just as /usr/include is.\n-# *Do not* use this for directories that happen to contain \n+# *Do not* use this for directories that happen to contain\n # header files, but are not searched automatically by default.\n # On most systems, this is empty.\n OTHER_FIXINCLUDES_DIRS=\n@@ -444,7 +445,7 @@ MD_FILE = md-cpp-not-used\n HOST_PREFIX=\n # Prefix to apply to names of object files when compiling them\n # to run on the machine we are compiling on.\n-# The default for this variable is chosen to keep these rules \n+# The default for this variable is chosen to keep these rules\n # out of the way of the other rules for compiling the same source files.\n HOST_PREFIX_1=loser-\n HOST_CC=$(CC)\n@@ -488,13 +489,13 @@ RUNTEST = `if [ -f $${srcdir}/../dejagnu/runtest ] ; then \\\n RUNTESTFLAGS =\n \n # Extra symbols for fixproto to define when parsing headers.\n-FIXPROTO_DEFINES = \n+FIXPROTO_DEFINES =\n \n # Extra flags to use when compiling crt{begin,end}.o.\n-CRTSTUFF_T_CFLAGS = \n+CRTSTUFF_T_CFLAGS =\n \n # Extra flags to use when compiling [m]crt0.o.\n-CRT0STUFF_T_CFLAGS = \n+CRT0STUFF_T_CFLAGS =\n \n # \"t\" or nothing, for building multilibbed versions of, say, crtbegin.o.\n T =\n@@ -860,7 +861,7 @@ compilations: ${OBJS}\n \n # Create a list of the language-independent object files so the language\n # subdirectories needn't mention their names explicitly.\n-stamp-objlist: $(OBJS) \n+stamp-objlist: $(OBJS)\n \techo \" $(OBJS)\" | sed -e 's, \\([a-z0-9]\\), ../\\1,g' -e 's/\\.o/$(objext)/g' >stamp-objlist\n \n # We call this executable `xgcc' rather than `gcc'\n@@ -924,7 +925,7 @@ libgcc1.null: $(GCC_PASSES)\n \trm -f dummy$(objext) dummy.c\n \n # This is $(LIBGCC1) for a cross-compiler.\n-# We have no automatic way of building libgcc1.a, \n+# We have no automatic way of building libgcc1.a,\n # so it's up to the installer to find a way to do that.\n # This rule deliberately does not depend on libgcc1.a\n # so that it will fail if the installer hasn't provided it.\n@@ -1277,7 +1278,7 @@ s-crtS: crtstuff.c $(GCC_PASSES) $(CONFIG_H) \\\n   defaults.h frame.h gbl-ctors.h\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS_S) \\\n \t  -DCRT_BEGIN -DCRTSTUFFS_O -finhibit-size-directive -fno-inline-functions \\\n-\t  -fno-exceptions -g0 -c $(srcdir)/crtstuff.c \n+\t  -fno-exceptions -g0 -c $(srcdir)/crtstuff.c\n \tmv crtstuff$(objext) crtbeginS$(objext)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS_S) \\\n \t  -DCRT_END -DCRTSTUFFS_O -finhibit-size-directive -fno-inline-functions \\\n@@ -1344,7 +1345,7 @@ graph.o: graph.c $(CONFIG_H) system.h toplev.h flags.h output.h $(RTL_H) \\\n     function.h hard-reg-set.h $(BASIC_BLOCK_H)\n sbitmap.o: sbitmap.c $(CONFIG_H) system.h $(RTL_H) flags.h $(BASIC_BLOCK_H)\n \n-COLLECT2_OBJS = collect2.o tlink.o hash.o intl.o underscore.o version.o \n+COLLECT2_OBJS = collect2.o tlink.o hash.o intl.o underscore.o version.o\n collect2$(exeext): $(COLLECT2_OBJS) $(LIBDEPS)\n # Don't try modifying collect2 (aka ld) in place--it might be linking this.\n \t-rm -f collect2$(exeext)\n@@ -1574,7 +1575,7 @@ reorg.o : reorg.c $(CONFIG_H) system.h $(RTL_H) conditions.h hard-reg-set.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) insn-config.h insn-attr.h insn-flags.h \\\n    $(RECOG_H) function.h flags.h output.h $(EXPR_H) toplev.h\n alias.o : alias.c $(CONFIG_H) system.h $(RTL_H) flags.h hard-reg-set.h \\\n-   $(REGS_H) toplev.h output.h $(EXPR_H) \n+   $(REGS_H) toplev.h output.h $(EXPR_H)\n regmove.o : regmove.c $(CONFIG_H) system.h $(RTL_H) insn-config.h \\\n    $(RECOG_H) output.h reload.h $(REGS_H) hard-reg-set.h flags.h function.h \\\n    $(EXPR_H) insn-flags.h $(BASIC_BLOCK_H) toplev.h\n@@ -1624,7 +1625,7 @@ alloca.o:\t$(srcdir)/../libiberty/alloca.c\n \t  -c `echo alloca.c | sed 's,^\\./,,'`\n \t$(ALLOCA_FINISH)\n #\f\n-# Generate header and source files from the machine description, \n+# Generate header and source files from the machine description,\n # and compile them.\n \n .PRECIOUS: insn-config.h insn-flags.h insn-codes.h \\\n@@ -1762,7 +1763,7 @@ s-genrtl: gengenrtl $(srcdir)/move-if-change $(RTL_BASE_H)\n # even if GCC is being compiled to run on some other machine.\n \n # $(CONFIG_H) is omitted from the deps of the gen*.o\n-# because these programs don't really depend on anything \n+# because these programs don't really depend on anything\n # about the target machine.  They do depend on config.h itself,\n # since that describes the host machine.\n \n@@ -1915,7 +1916,7 @@ $(HOST_PREFIX_1)errors.o: errors.c\n \n # This satisfies the dependency that we get if you cross-compile a compiler\n # that does not need to compile alloca, malloc or whatever.\n-$(HOST_PREFIX_1): \n+$(HOST_PREFIX_1):\n \ttouch $(HOST_PREFIX_1)\n \n \n@@ -1959,7 +1960,7 @@ intl.distdir-fixup:\n cpp$(exeext): $(CCCP)$(exeext)\n \t-rm -f cpp$(exeext)\n \t$(LN) $(CCCP)$(exeext) cpp$(exeext)\n-CCCP_OBJS = cccp.o cexp.o intl.o prefix.o version.o @extra_cpp_objs@ mbchar.o \n+CCCP_OBJS = cccp.o cexp.o intl.o prefix.o version.o @extra_cpp_objs@ mbchar.o\n cccp$(exeext): $(CCCP_OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(CCCP_OBJS) $(LIBS)\n cexp.o: $(srcdir)/cexp.c $(CONFIG_H) system.h mbchar.h\n@@ -2016,7 +2017,7 @@ cppinit.o:  cppinit.c $(CONFIG_H) cpplib.h intl.h system.h \\\n \n proto: config.status protoize$(exeext) unprotoize$(exeext) SYSCALLS.c.X\n \n-PROTO_OBJS = intl.o version.o \n+PROTO_OBJS = intl.o version.o\n \n protoize$(exeext): protoize.o $(PROTO_OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ protoize.o $(PROTO_OBJS) $(LIBS)\n@@ -2126,7 +2127,7 @@ FIXINCSRCDIR=$(srcdir)/fixinc\n fixinc.sh: $(FIXINCSRCDIR)/mkfixinc.sh $(FIXINCSRCDIR)/fixincl.c \\\n \t$(FIXINCSRCDIR)/procopen.c $(FIXINCSRCDIR)/gnu-regex.c \\\n \t$(FIXINCSRCDIR)/server.c $(FIXINCSRCDIR)/gnu-regex.h \\\n-\t$(FIXINCSRCDIR)/server.h $(FIXINCSRCDIR)/inclhack.def \n+\t$(FIXINCSRCDIR)/server.h $(FIXINCSRCDIR)/inclhack.def\n \tMAKE=\"$(MAKE)\"; srcdir=`cd $(srcdir)/fixinc; pwd` ; \\\n \texport MAKE srcdir ; \\\n \tcd ./fixinc; $(SHELL) $${srcdir}/mkfixinc.sh $(target)\n@@ -2288,7 +2289,7 @@ cpp.dvi: $(srcdir)/cpp.texi\n \n INSTALL: $(srcdir)/install1.texi $(srcdir)/install.texi\n \tcd $(srcdir); $(MAKEINFO) -D INSTALLONLY \\\n-\t\t--no-split -o INSTALL install1.texi \n+\t\t--no-split -o INSTALL install1.texi\n #\f\n # Deletion of files made during compilation.\n # There are four levels of this:\n@@ -2309,7 +2310,7 @@ mostlyclean: intl.mostlyclean lang.mostlyclean\n # Delete the temporary source copies for cross compilation.\n \t-rm -f $(HOST_PREFIX_1)rtl.c $(HOST_PREFIX_1)rtlanal.c\n \t-rm -f $(HOST_PREFIX_1)alloca.c $(HOST_PREFIX_1)malloc.c\n-\t-rm -f $(HOST_PREFIX_1)obstack.c \n+\t-rm -f $(HOST_PREFIX_1)obstack.c\n # Delete the temp files made in the course of building libgcc.a.\n \t-rm -f tmplibgcc* tmpcopy xlimits.h libgcc1-test\n \tfor name in $(LIB1FUNCS); do rm -f $${name}.c; done\n@@ -2346,7 +2347,7 @@ mostlyclean: intl.mostlyclean lang.mostlyclean\n clean: mostlyclean intl.clean lang.clean\n # It may not be quite desirable to delete unprotoize.c here,\n # but the spec for `make clean' requires it.\n-# Using unprotoize.c is not quite right in the first place, \n+# Using unprotoize.c is not quite right in the first place,\n # but what better way is there?\n \t-rm -f libgcc.a libgcc1.a libgcc1-asm.a libgcc2.a libgcc2.ready\n \t-rm -f libgcc1.null\n@@ -2413,7 +2414,7 @@ maintainer-clean:\n \t\tintl.maintainer-clean lang.maintainer-clean\n \t-rm -f c-parse.y c-gperf.h\n \t-rm -f c-parse.c c-parse.h c-parse.output\n-\t-rm -f cexp.c cexp.output TAGS \n+\t-rm -f cexp.c cexp.output TAGS\n \t-rm -f cpp.info* cpp.??s cpp.*aux\n \t-rm -f gcc.info* gcc.??s gcc.*aux\n #\f\n@@ -2711,7 +2712,7 @@ uninstall: intl.uninstall lang.uninstall $(UNINSTALL_CPP)\n \t-rm -rf $(man1dir)/unprotoize$(manext)\n \t-rm -f $(infodir)/cpp.info* $(infodir)/gcc.info*\n #\f\n-# These targets are for the dejagnu testsuites. The file site.exp \n+# These targets are for the dejagnu testsuites. The file site.exp\n # contains global variables that all the testsuites will use.\n \n # Set to $(target_alias)/ for cross.\n@@ -2859,7 +2860,7 @@ distdir-start: doc $(srcdir)/INSTALL $(srcdir)/c-parse.y $(srcdir)/c-gperf.h \\\n \t     $$1 \" \" $$2 \" \" $$3 != \"This directory contains\"' \\\n \t  version=$(version) $(srcdir)/README > tmp.README\n \tmv tmp.README README\n-\t-rm -rf gcc-$(version) tmp\t\n+\t-rm -rf gcc-$(version) tmp\n # Put all the files in a temporary subdirectory\n # which has the name that we want to have in the tar file.\n \tmkdir tmp\n@@ -2917,7 +2918,7 @@ distdir-check:\n distdir: distdir-cvs distdir-start intl.distdir intl.distdir-fixup \\\n   lang.distdir distdir-finish\n \n-# make diff oldversion=M.N \n+# make diff oldversion=M.N\n # creates a diff file between an older distribution and this one.\n # The -P option assumes this is GNU diff.\n diff:\n@@ -3191,4 +3192,3 @@ float.h-cross:\n \techo \"#error float.h values not known for cross-compiler\" >> t-float.h-cross\n \techo \"#endif\" >> t-float.h-cross\n \tmv t-float.h-cross float.h-cross\n-"}]}