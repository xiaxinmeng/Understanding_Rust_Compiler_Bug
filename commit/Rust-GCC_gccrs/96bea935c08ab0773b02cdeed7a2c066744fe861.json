{"sha": "96bea935c08ab0773b02cdeed7a2c066744fe861", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZiZWE5MzVjMDhhYjA3NzNiMDJjZGVlZDdhMmMwNjY3NDRmZTg2MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-12-23T09:43:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-12-23T09:43:35Z"}, "message": "[C++] Fix ICE for binding lax vector conversions to references (PR 93014)\n\nThis test:\n\ntypedef unsigned int v4si __attribute__ ((vector_size(16)));\ntypedef unsigned char v16qi __attribute__ ((vector_size(16)));\nextern v16qi x;\nv4si &y = x;\n\nICEs with:\n\na.c:4:11: internal compiler error: in convert_like_real, at cp/call.c:7670\n\nThis started with r260780, which had the effect of making lvalue_kind\nlook through VIEW_CONVERT_EXPR in all cases, not just for location\nwrappers.  This also means that:\n\ntypedef unsigned int v4si __attribute__ ((vector_size(16)));\ntypedef unsigned char v16qi __attribute__ ((vector_size(16)));\nextern v16qi x;\nv4si &y = reinterpret_cast<v4si>(x);\n\nis now valid despite the result of the cast being an rvalue.\n\nThe patch attempts to fix that by calling rvalue on the input to the\nconversion, so that the tree looks the same as for:\n\n  extern v16qi x;\n  v4si &y = (v4si)x;\n\nwhich is already handled correctly.\n\n2019-12-23  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/cp/\n\t* cvt.c (ocp_convert): Apply rvalue to the source of vector\n\tconversions.\n\t* typeck.c (build_reinterpret_cast_1): Likewise.\n\ngcc/testsuite/\n\t* g++.dg/ext/vector39.C: New test.\n\nFrom-SVN: r279716", "tree": {"sha": "80e8ff4789acbb8c304cc164ccfae9dd7cdec9a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80e8ff4789acbb8c304cc164ccfae9dd7cdec9a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96bea935c08ab0773b02cdeed7a2c066744fe861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96bea935c08ab0773b02cdeed7a2c066744fe861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96bea935c08ab0773b02cdeed7a2c066744fe861", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96bea935c08ab0773b02cdeed7a2c066744fe861/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3bdc221879a222778f65d912da99779ebf3c484d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bdc221879a222778f65d912da99779ebf3c484d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bdc221879a222778f65d912da99779ebf3c484d"}], "stats": {"total": 112, "additions": 109, "deletions": 3}, "files": [{"sha": "720c3ee0e738f466236831dbb865331b455c407e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bea935c08ab0773b02cdeed7a2c066744fe861/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bea935c08ab0773b02cdeed7a2c066744fe861/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=96bea935c08ab0773b02cdeed7a2c066744fe861", "patch": "@@ -1,3 +1,9 @@\n+2019-12-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* cvt.c (ocp_convert): Apply rvalue to the source of vector\n+\tconversions.\n+\t* typeck.c (build_reinterpret_cast_1): Likewise.\n+\n 2019-12-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/92745 - bogus error when initializing array of vectors."}, {"sha": "9e29225cfbb88affc49d52a30356b057fe028467", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bea935c08ab0773b02cdeed7a2c066744fe861/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bea935c08ab0773b02cdeed7a2c066744fe861/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=96bea935c08ab0773b02cdeed7a2c066744fe861", "patch": "@@ -744,7 +744,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n       else if (TREE_CODE (type) == COMPLEX_TYPE)\n \treturn convert_to_complex_maybe_fold (type, e, dofold);\n       else if (VECTOR_TYPE_P (type))\n-\treturn convert_to_vector (type, e);\n+\treturn convert_to_vector (type, rvalue (e));\n       else if (TREE_CODE (e) == TARGET_EXPR)\n \t{\n \t  /* Don't build a NOP_EXPR of class type.  Instead, change the\n@@ -881,7 +881,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n \t\t      in_vtype, type);\n \t  return error_mark_node;\n \t}\n-      return convert_to_vector (type, e);\n+      return convert_to_vector (type, rvalue (e));\n     }\n   if (code == REAL_TYPE || code == COMPLEX_TYPE)\n     {"}, {"sha": "d2f4a001e503ab9e5321791d4838f86b61fdf839", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bea935c08ab0773b02cdeed7a2c066744fe861/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bea935c08ab0773b02cdeed7a2c066744fe861/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=96bea935c08ab0773b02cdeed7a2c066744fe861", "patch": "@@ -7858,7 +7858,7 @@ build_reinterpret_cast_1 (location_t loc, tree type, tree expr,\n       return build_nop_reinterpret (type, expr);\n     }\n   else if (gnu_vector_type_p (type))\n-    return convert_to_vector (type, expr);\n+    return convert_to_vector (type, rvalue (expr));\n   else if (gnu_vector_type_p (intype)\n \t   && INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n     return convert_to_integer_nofold (type, expr);"}, {"sha": "321d54b47fc9a4c268c791c2f44a1a2653397a85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bea935c08ab0773b02cdeed7a2c066744fe861/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bea935c08ab0773b02cdeed7a2c066744fe861/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96bea935c08ab0773b02cdeed7a2c066744fe861", "patch": "@@ -1,3 +1,7 @@\n+2019-12-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* g++.dg/ext/vector39.C: New test.\n+\n 2019-12-21  Andrew Pinski  <apinski@marvell.com>\n \n \tPR testsuite/92998"}, {"sha": "140784dfa52c0d6a3c5649d8f87bddf794340e18", "filename": "gcc/testsuite/g++.dg/ext/vector39.C", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bea935c08ab0773b02cdeed7a2c066744fe861/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bea935c08ab0773b02cdeed7a2c066744fe861/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector39.C?ref=96bea935c08ab0773b02cdeed7a2c066744fe861", "patch": "@@ -0,0 +1,96 @@\n+// { dg-options \"-flax-vector-conversions\" }\n+\n+typedef unsigned char v16qi __attribute__((vector_size(16)));\n+typedef unsigned int v4si __attribute__((vector_size(16)));\n+\n+extern v4si normal_v4si;\n+extern const v4si const_v4si;\n+extern v4si *normal_v4si_ptr;\n+extern const v4si *const_v4si_ptr;\n+extern v4si &normal_v4si_ref;\n+extern const v4si &const_v4si_ref;\n+\n+extern v16qi normal_v16qi;\n+extern const v16qi const_v16qi;\n+extern v16qi *normal_v16qi_ptr;\n+extern const v16qi *const_v16qi_ptr;\n+extern v16qi &normal_v16qi_ref;\n+extern const v16qi &const_v16qi_ref;\n+\n+namespace nonconst_refs {\n+  v16qi &ref_normal_v4si = normal_v4si; // { dg-error {cannot bind non-const lvalue} }\n+  v16qi &ref_const_v4si = const_v4si; // { dg-error {cannot bind non-const lvalue} }\n+  v16qi &ref_normal_v4si_ptr = *normal_v4si_ptr; // { dg-error {cannot bind non-const lvalue} }\n+  v16qi &ref_const_v4si_ptr = *const_v4si_ptr; // { dg-error {cannot bind non-const lvalue} }\n+  v16qi &ref_normal_v4si_ref = normal_v4si_ref; // { dg-error {cannot bind non-const lvalue} }\n+  v16qi &ref_const_v4si_ref = const_v4si_ref; // { dg-error {cannot bind non-const lvalue} }\n+\n+  v16qi &ref_normal_v16qi = normal_v16qi;\n+  v16qi &ref_const_v16qi = const_v16qi; // { dg-error {discards qualifiers} }\n+  v16qi &ref_normal_v16qi_ptr = *normal_v16qi_ptr;\n+  v16qi &ref_const_v16qi_ptr = *const_v16qi_ptr; // { dg-error {discards qualifiers} }\n+  v16qi &ref_normal_v16qi_ref = normal_v16qi_ref;\n+  v16qi &ref_const_v16qi_ref = const_v16qi_ref; // { dg-error {discards qualifiers} }\n+}\n+\n+#if __cplusplus >= 201103L\n+namespace nonconst_rvalue_refs {\n+  v16qi &&ref_normal_v4si = normal_v4si;\n+  v16qi &&ref_const_v4si = const_v4si;\n+  v16qi &&ref_normal_v4si_ptr = *normal_v4si_ptr;\n+  v16qi &&ref_const_v4si_ptr = *const_v4si_ptr;\n+  v16qi &&ref_normal_v4si_ref = normal_v4si_ref;\n+  v16qi &&ref_const_v4si_ref = const_v4si_ref;\n+\n+  v16qi &&ref_normal_v16qi = normal_v16qi; // { dg-error {cannot bind rvalue reference} \"\" { target c++11 } }\n+  v16qi &&ref_const_v16qi = const_v16qi; // { dg-error {cannot bind rvalue reference} \"\" { target c++11 } }\n+  v16qi &&ref_normal_v16qi_ptr = *normal_v16qi_ptr; // { dg-error {cannot bind rvalue reference} \"\" { target c++11 } }\n+  v16qi &&ref_const_v16qi_ptr = *const_v16qi_ptr; // { dg-error {cannot bind rvalue reference} \"\" { target c++11 } }\n+  v16qi &&ref_normal_v16qi_ref = normal_v16qi_ref; // { dg-error {cannot bind rvalue reference} \"\" { target c++11 } }\n+  v16qi &&ref_const_v16qi_ref = const_v16qi_ref; // { dg-error {cannot bind rvalue reference} \"\" { target c++11 } }\n+}\n+#endif\n+\n+namespace const_refs {\n+  const v16qi &ref_normal_v4si = normal_v4si;\n+  const v16qi &ref_const_v4si = const_v4si;\n+  const v16qi &ref_normal_v4si_ptr = *normal_v4si_ptr;\n+  const v16qi &ref_const_v4si_ptr = *const_v4si_ptr;\n+  const v16qi &ref_normal_v4si_ref = normal_v4si_ref;\n+  const v16qi &ref_const_v4si_ref = const_v4si_ref;\n+\n+  const v16qi &ref_normal_v16qi = normal_v16qi;\n+  const v16qi &ref_const_v16qi = const_v16qi;\n+  const v16qi &ref_normal_v16qi_ptr = *normal_v16qi_ptr;\n+  const v16qi &ref_const_v16qi_ptr = *const_v16qi_ptr;\n+  const v16qi &ref_normal_v16qi_ref = normal_v16qi_ref;\n+  const v16qi &ref_const_v16qi_ref = const_v16qi_ref;\n+}\n+\n+#if __cplusplus >= 201103L\n+namespace const_rvalue_refs {\n+  const v16qi &&ref_normal_v4si = normal_v4si;\n+  const v16qi &&ref_const_v4si = const_v4si;\n+  const v16qi &&ref_normal_v4si_ptr = *normal_v4si_ptr;\n+  const v16qi &&ref_const_v4si_ptr = *const_v4si_ptr;\n+  const v16qi &&ref_normal_v4si_ref = normal_v4si_ref;\n+  const v16qi &&ref_const_v4si_ref = const_v4si_ref;\n+\n+  const v16qi &&ref_normal_v16qi = normal_v16qi; // { dg-error {cannot bind rvalue reference} \"\" { target c++11 } }\n+  const v16qi &&ref_const_v16qi = const_v16qi; // { dg-error {cannot bind rvalue reference} \"\" { target c++11 } }\n+  const v16qi &&ref_normal_v16qi_ptr = *normal_v16qi_ptr; // { dg-error {cannot bind rvalue reference} \"\" { target c++11 } }\n+  const v16qi &&ref_const_v16qi_ptr = *const_v16qi_ptr; // { dg-error {cannot bind rvalue reference} \"\" { target c++11 } }\n+  const v16qi &&ref_normal_v16qi_ref = normal_v16qi_ref; // { dg-error {cannot bind rvalue reference} \"\" { target c++11 } }\n+  const v16qi &&ref_const_v16qi_ref = const_v16qi_ref; // { dg-error {cannot bind rvalue reference} \"\" { target c++11 } }\n+}\n+#endif\n+\n+namespace rvalue_reinterpret_refs {\n+  v16qi &ref_normal_v4si = reinterpret_cast<v16qi>(normal_v4si); // { dg-error {cannot bind non-const lvalue} }\n+  v16qi &ref_const_v4si = reinterpret_cast<v16qi>(const_v4si); // { dg-error {cannot bind non-const lvalue} }\n+}\n+\n+namespace ref_reinterpret_refs {\n+  v16qi &ref_normal_v4si = reinterpret_cast<v16qi &>(normal_v4si);\n+  v16qi &ref_const_v4si = reinterpret_cast<v16qi &>(const_cast<v4si &>(const_v4si));\n+}"}]}