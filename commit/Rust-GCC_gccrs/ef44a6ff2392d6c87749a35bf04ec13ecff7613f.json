{"sha": "ef44a6ff2392d6c87749a35bf04ec13ecff7613f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY0NGE2ZmYyMzkyZDZjODc3NDlhMzViZjA0ZWMxM2VjZmY3NjEzZg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-09-25T00:16:56Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-09-25T00:16:56Z"}, "message": "s390-protos.h (s390_back_chain_rtx): Add prototype.\n\n\t* config/s390/s390-protos.h (s390_back_chain_rtx): Add prototype.\n\t* config/s390/s390.c (s390_back_chain_rtx): New function.\n\t* config/s390/s390.md (\"allocate_stack\"): Use s390_back_chain_rtx.\n\tCall anti_adjust_stack.\n\t(\"restore_stack_block\"): Use s390_back_chain_rtx.  Enable pattern\n\tonly if compiling with back chain.\n\t(\"save_stack_nonlocal\", \"restore_stack_nonlocal\"): Save/restore\n\tback chain only if back chain enabled.  Use s390_back_chain_rtx.\n\nFrom-SVN: r88087", "tree": {"sha": "c377d2c5418371a0434a0914a6d03f128c8a6297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c377d2c5418371a0434a0914a6d03f128c8a6297"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef44a6ff2392d6c87749a35bf04ec13ecff7613f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef44a6ff2392d6c87749a35bf04ec13ecff7613f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef44a6ff2392d6c87749a35bf04ec13ecff7613f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef44a6ff2392d6c87749a35bf04ec13ecff7613f/comments", "author": null, "committer": null, "parents": [{"sha": "f921af3008d247df51726ee37963b06412b97154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f921af3008d247df51726ee37963b06412b97154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f921af3008d247df51726ee37963b06412b97154"}], "stats": {"total": 133, "additions": 76, "deletions": 57}, "files": [{"sha": "ab76350aa11f7e41cfb0aa07341b77cc7574adc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef44a6ff2392d6c87749a35bf04ec13ecff7613f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef44a6ff2392d6c87749a35bf04ec13ecff7613f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef44a6ff2392d6c87749a35bf04ec13ecff7613f", "patch": "@@ -1,3 +1,14 @@\n+2004-09-25  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_back_chain_rtx): Add prototype.\n+\t* config/s390/s390.c (s390_back_chain_rtx): New function.\n+\t* config/s390/s390.md (\"allocate_stack\"): Use s390_back_chain_rtx.\n+\tCall anti_adjust_stack.\n+\t(\"restore_stack_block\"): Use s390_back_chain_rtx.  Enable pattern\n+\tonly if compiling with back chain.\n+\t(\"save_stack_nonlocal\", \"restore_stack_nonlocal\"): Save/restore\n+\tback chain only if back chain enabled.  Use s390_back_chain_rtx.\n+\t\n 2004-09-25  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* doc/trouble.texi: Remove obsolete information.  Update"}, {"sha": "359e20cd87b1afed32980ec7302a89f20fc4ecc4", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef44a6ff2392d6c87749a35bf04ec13ecff7613f/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef44a6ff2392d6c87749a35bf04ec13ecff7613f/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=ef44a6ff2392d6c87749a35bf04ec13ecff7613f", "patch": "@@ -82,6 +82,7 @@ extern void s390_expand_clrmem (rtx, rtx);\n extern void s390_expand_cmpmem (rtx, rtx, rtx, rtx);\n extern bool s390_expand_addcc (enum rtx_code, rtx, rtx, rtx, rtx, rtx);\n extern rtx s390_return_addr_rtx (int, rtx);\n+extern rtx s390_back_chain_rtx (void);\n extern rtx s390_emit_call (rtx, rtx, rtx, rtx);\n \n extern bool s390_output_addr_const_extra (FILE*, rtx);"}, {"sha": "7556b322669797f3f8bde93b8155d6c864c3d287", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef44a6ff2392d6c87749a35bf04ec13ecff7613f/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef44a6ff2392d6c87749a35bf04ec13ecff7613f/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=ef44a6ff2392d6c87749a35bf04ec13ecff7613f", "patch": "@@ -5759,6 +5759,26 @@ s390_return_addr_rtx (int count, rtx frame ATTRIBUTE_UNUSED)\n   return gen_rtx_MEM (Pmode, addr);\n }\n \n+/* Return an RTL expression representing the back chain stored in\n+   the current stack frame.  */\n+\n+rtx\n+s390_back_chain_rtx (void)\n+{\n+  rtx chain;\n+\n+  gcc_assert (TARGET_BACKCHAIN || TARGET_KERNEL_BACKCHAIN);\n+\n+  if (TARGET_BACKCHAIN)\n+    chain = stack_pointer_rtx;\n+  else\n+    chain = plus_constant (stack_pointer_rtx,\n+\t\t\t   STACK_POINTER_OFFSET - UNITS_PER_WORD);\n+\n+  chain = gen_rtx_MEM (Pmode, chain);\n+  return chain;\n+}\n+\n /* Find first call clobbered register unused in a function.\n    This could be used as base register in a leaf function\n    or for holding the return address before epilogue.  */"}, {"sha": "e5e0aabf3dcd3ccf08f2457f94ab507143ab5b10", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 44, "deletions": 57, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef44a6ff2392d6c87749a35bf04ec13ecff7613f/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef44a6ff2392d6c87749a35bf04ec13ecff7613f/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=ef44a6ff2392d6c87749a35bf04ec13ecff7613f", "patch": "@@ -7207,35 +7207,18 @@\n ;\n \n (define_expand \"allocate_stack\"\n-  [(set (reg 15)\n-        (plus (reg 15) (match_operand 1 \"general_operand\" \"\")))\n-   (set (match_operand 0 \"general_operand\" \"\")\n-        (reg 15))]\n+  [(match_operand 0 \"general_operand\" \"\")\n+   (match_operand 1 \"general_operand\" \"\")]\n  \"TARGET_BACKCHAIN || TARGET_KERNEL_BACKCHAIN\"\n {\n-    rtx stack = gen_rtx_REG (Pmode, STACK_POINTER_REGNUM);\n-    rtx chain;\n-    rtx temp;\n-\n-    if (TARGET_KERNEL_BACKCHAIN)\n-      chain = plus_constant (stack, STACK_POINTER_OFFSET - UNITS_PER_WORD);\n-    else\n-      chain = stack;\n-\n-    chain = gen_rtx_MEM (Pmode, chain);\n-    temp = gen_reg_rtx (Pmode);\n-\n-    emit_move_insn (temp, chain);\n-\n-    if (TARGET_64BIT)\n-      emit_insn (gen_adddi3 (stack, stack, negate_rtx (Pmode, operands[1])));\n-    else\n-      emit_insn (gen_addsi3 (stack, stack, negate_rtx (Pmode, operands[1])));\n+  rtx temp = gen_reg_rtx (Pmode);\n \n-    emit_move_insn (chain, temp);\n+  emit_move_insn (temp, s390_back_chain_rtx ());\n+  anti_adjust_stack (operands[1]);\n+  emit_move_insn (s390_back_chain_rtx (), temp);\n \n-    emit_move_insn (operands[0], virtual_stack_dynamic_rtx);\n-    DONE;\n+  emit_move_insn (operands[0], virtual_stack_dynamic_rtx);\n+  DONE;\n })\n \n \n@@ -7274,35 +7257,39 @@\n   \"DONE;\")\n \n (define_expand \"restore_stack_block\"\n-  [(use (match_operand 0 \"register_operand\" \"\"))\n-   (set (match_dup 2) (match_dup 3))\n-   (set (match_dup 0) (match_operand 1 \"register_operand\" \"\"))\n-   (set (match_dup 3) (match_dup 2))]\n-  \"\"\n+  [(match_operand 0 \"register_operand\" \"\")\n+   (match_operand 1 \"register_operand\" \"\")]\n+  \"TARGET_BACKCHAIN || TARGET_KERNEL_BACKCHAIN\"\n {\n-  operands[2] = gen_reg_rtx (Pmode);\n-  operands[3] = gen_rtx_MEM (Pmode, operands[0]);\n+  rtx temp = gen_reg_rtx (Pmode);\n+\n+  emit_move_insn (temp, s390_back_chain_rtx ());\n+  emit_move_insn (operands[0], operands[1]);\n+  emit_move_insn (s390_back_chain_rtx (), temp);\n+\n+  DONE;\n })\n \n (define_expand \"save_stack_nonlocal\"\n   [(match_operand 0 \"memory_operand\" \"\")\n    (match_operand 1 \"register_operand\" \"\")]\n   \"\"\n {\n-  rtx temp = gen_reg_rtx (Pmode);\n+  enum machine_mode mode = TARGET_64BIT ? OImode : TImode;\n+  rtx base = gen_rtx_REG (Pmode, BASE_REGNUM);\n+\n+  /* Copy the backchain to the first word, sp to the second and the\n+     literal pool base to the third.  */\n+\n+  if (TARGET_BACKCHAIN || TARGET_KERNEL_BACKCHAIN)\n+    {\n+      rtx temp = force_reg (Pmode, s390_back_chain_rtx ());\n+      emit_move_insn (operand_subword (operands[0], 0, 0, mode), temp);\n+    }\n+\n+  emit_move_insn (operand_subword (operands[0], 1, 0, mode), operands[1]);\n+  emit_move_insn (operand_subword (operands[0], 2, 0, mode), base);\n \n-  /* Copy the backchain to the first word, sp to the second and the literal pool\n-     base to the third.  */\n-  emit_move_insn (operand_subword (operands[0], 2, 0,\n-                  TARGET_64BIT ? OImode : TImode),\n-                  gen_rtx_REG (Pmode, BASE_REGNUM));\n-  emit_move_insn (temp, gen_rtx_MEM (Pmode, operands[1]));\n-  emit_move_insn (operand_subword (operands[0], 0, 0,\n-                 TARGET_64BIT ? OImode : TImode),\n-                 temp);\n-  emit_move_insn (operand_subword (operands[0], 1, 0,\n-                 TARGET_64BIT ? OImode : TImode),\n-                 operands[1]);\n   DONE;\n })\n \n@@ -7311,23 +7298,23 @@\n    (match_operand 1 \"memory_operand\" \"\")]\n   \"\"\n {\n-  rtx temp = gen_reg_rtx (Pmode);\n+  enum machine_mode mode = TARGET_64BIT ? OImode : TImode;\n   rtx base = gen_rtx_REG (Pmode, BASE_REGNUM);\n+  rtx temp = NULL_RTX;\n \n   /* Restore the backchain from the first word, sp from the second and the\n      literal pool base from the third.  */\n-  emit_move_insn (temp,\n-                 operand_subword (operands[1], 0, 0,\n-                 TARGET_64BIT ? OImode : TImode));\n-  emit_move_insn (operands[0],\n-                 operand_subword (operands[1], 1, 0,\n-                 TARGET_64BIT ? OImode : TImode));\n-  emit_move_insn (gen_rtx_MEM (Pmode, operands[0]), temp);\n-  emit_move_insn (base,\n-                  operand_subword (operands[1], 2, 0,\n-                  TARGET_64BIT ? OImode : TImode));\n-  emit_insn (gen_rtx_USE (VOIDmode, base));\n \n+  if (TARGET_BACKCHAIN || TARGET_KERNEL_BACKCHAIN)\n+    temp = force_reg (Pmode, operand_subword (operands[1], 0, 0, mode));\n+    \n+  emit_move_insn (base, operand_subword (operands[1], 2, 0, mode));\n+  emit_move_insn (operands[0], operand_subword (operands[1], 1, 0, mode));\n+\n+  if (temp)\n+    emit_move_insn (s390_back_chain_rtx (), temp);\n+\n+  emit_insn (gen_rtx_USE (VOIDmode, base));\n   DONE;\n })\n "}]}