{"sha": "c00996a3ea28127b7392876352ad0dd32e00e1ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAwOTk2YTNlYTI4MTI3YjczOTI4NzYzNTJhZDBkZDMyZTAwZTFjYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-12-04T17:00:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-12-04T17:00:04Z"}, "message": "mangle.c (write_type): Mangle VECTOR_TYPE with \"U8__vector\".\n\n        * mangle.c (write_type): Mangle VECTOR_TYPE with \"U8__vector\".\n        (write_builtin_type): Pass intSI_type_node and the like through\n        type_for_mode.\n        * method.c (process_overload_item): Mangle VECTOR_TYPEs with 'o'.\n        Pass intSI_type_node and the like through type_for_mode.\n        * decl2.c (arg_assoc_type): Handle VECTOR_TYPE like COMPLEX_TYPE.\n        * pt.c (tsubst, unify): Likewise.\n        * tree.c (walk_tree): Likewise.\n        * error.c (dump_type): Likewise.\n        (dump_type_prefix, dump_type_suffix): Don't bother with VECTOR_TYPE.\n\n        * Make-lang.in: Tweak top comment for emacs.\n        (cp/TAGS): Restore.\n\n        * except.c (expand_throw): Use push_throw_library_fn for _Jv_Throw.\n\n        * pt.c (tsubst_decl): Call clone_function_decl here.\n        (do_decl_instantiation): Not here.\n        * class.c (clone_function_decl): Robustify.\n\n        * decl.c (store_bindings): Only search in the non modified\n        old_bindings for duplicates.\n\nFrom-SVN: r37999", "tree": {"sha": "7543491b113d205817aab1d11cfba53a22a40db7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7543491b113d205817aab1d11cfba53a22a40db7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c00996a3ea28127b7392876352ad0dd32e00e1ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c00996a3ea28127b7392876352ad0dd32e00e1ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c00996a3ea28127b7392876352ad0dd32e00e1ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c00996a3ea28127b7392876352ad0dd32e00e1ca/comments", "author": null, "committer": null, "parents": [{"sha": "d611079baa5b039340541d7f1576a3e520280b4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d611079baa5b039340541d7f1576a3e520280b4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d611079baa5b039340541d7f1576a3e520280b4f"}], "stats": {"total": 156, "additions": 114, "deletions": 42}, "files": [{"sha": "105f04789aa44491a923a35b28b4cd07978d7232", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c00996a3ea28127b7392876352ad0dd32e00e1ca", "patch": "@@ -1,3 +1,30 @@\n+2000-12-04  Jason Merrill  <jason@redhat.com>\n+\n+\t* mangle.c (write_type): Mangle VECTOR_TYPE with \"U8__vector\".\n+\t(write_builtin_type): Pass intSI_type_node and the like through \n+\ttype_for_mode.\n+\t* method.c (process_overload_item): Mangle VECTOR_TYPEs with 'o'.\n+\tPass intSI_type_node and the like through type_for_mode.\n+\t* decl2.c (arg_assoc_type): Handle VECTOR_TYPE like COMPLEX_TYPE.\n+\t* pt.c (tsubst, unify): Likewise.\n+\t* tree.c (walk_tree): Likewise.\n+\t* error.c (dump_type): Likewise.\n+\t(dump_type_prefix, dump_type_suffix): Don't bother with VECTOR_TYPE.\n+\t\n+\t* Make-lang.in: Tweak top comment for emacs.\n+\t(cp/TAGS): Restore.\n+\n+\t* except.c (expand_throw): Use push_throw_library_fn for _Jv_Throw.\n+\n+\t* pt.c (tsubst_decl): Call clone_function_decl here.\n+\t(do_decl_instantiation): Not here.\n+\t* class.c (clone_function_decl): Robustify.\n+\n+2000-12-04  Michael Matz  <matzmich@cs.tu-berlin.de>\n+\n+\t* decl.c (store_bindings): Only search in the non modified\n+\told_bindings for duplicates.\n+\n 2000-12-04  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* error.c (dump_function_decl): Use DECL_VIRTUAL_P, not"}, {"sha": "0c1347a80d834f92dc0d14c6cbc5c165112aa964", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=c00996a3ea28127b7392876352ad0dd32e00e1ca", "patch": "@@ -1,4 +1,4 @@\n-# Top level makefile fragment for GNU C++.\n+# Top level -*- makefile -*- fragment for GNU C++.\n #   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000\n #   Free Software Foundation, Inc.\n \n@@ -273,3 +273,15 @@ cp/parse.o: cp/parse.c $(CXX_TREE_H) flags.h cp/lex.h except.h output.h \\\n \tsystem.h toplev.h $(GGC_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \\\n \t\t$(srcdir)/cp/parse.c $(OUTPUT_OPTION)\n+#\f\n+# These exist for maintenance purposes.\n+\n+# Update the tags table.\n+cp/TAGS: force\n+\tcd $(srcdir)/cp ;\t\t\t\\\n+\tetags *.c *.h ;\t\t\t\t\\\n+\techo 'l' | tr 'l' '\\f' >> TAGS ;\t\\\n+\techo 'parse.y,0' >> TAGS ; \t\t\\\n+\tetags -a ../*.h ../*.c;\n+\n+.PHONY: cp/TAGS"}, {"sha": "9a71203258a4b52777e84ec5c10c9719ecdea007", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=c00996a3ea28127b7392876352ad0dd32e00e1ca", "patch": "@@ -4316,6 +4316,12 @@ clone_function_decl (fn, update_method_vec_p)\n {\n   tree clone;\n \n+  /* Avoid inappropriate cloning.  */\n+  if (! flag_new_abi\n+      || (TREE_CHAIN (fn)\n+\t  && DECL_CLONED_FUNCTION (TREE_CHAIN (fn))))\n+    return;\n+\n   if (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (fn))\n     {\n       /* For each constructor, we need two variants: an in-charge version"}, {"sha": "b84e847384a117c86fd6c630e2b41804889b71c6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c00996a3ea28127b7392876352ad0dd32e00e1ca", "patch": "@@ -2425,6 +2425,8 @@ store_bindings (names, old_bindings)\n      tree names, old_bindings;\n {\n   tree t;\n+  tree search_bindings = old_bindings;\n+\n   for (t = names; t; t = TREE_CHAIN (t))\n     {\n       tree binding, t1, id;\n@@ -2441,7 +2443,7 @@ store_bindings (names, old_bindings)\n \t  || !(IDENTIFIER_BINDING (id) || IDENTIFIER_CLASS_VALUE (id)))\n \tcontinue;\n \n-      for (t1 = old_bindings; t1; t1 = TREE_CHAIN (t1))\n+      for (t1 = search_bindings; t1; t1 = TREE_CHAIN (t1))\n \tif (TREE_VEC_ELT (t1, 0) == id)\n \t  goto skip_it;\n \n@@ -11235,7 +11237,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t    }\n \n \t  /* Until core issue 180 is resolved, allow 'friend typename A::B'.\n-\t     But don't allow implicit typenames.  */\n+\t     But don't allow implicit typenames except with a class-key.  */\n \t  if (!current_aggr && (TREE_CODE (type) != TYPENAME_TYPE\n \t\t\t\t|| IMPLICIT_TYPENAME_P (type)))\n \t    {\n@@ -13570,7 +13572,8 @@ start_function (declspecs, declarator, attrs, flags)\n   /* Initialize RTL machinery.  We cannot do this until\n      CURRENT_FUNCTION_DECL and DECL_RESULT are set up.  We do this\n      even when processing a template; this is how we get\n-     CFUN set up, and our per-function variables initialized.  */\n+     CFUN set up, and our per-function variables initialized.\n+     FIXME factor out the non-RTL stuff.  */\n   bl = current_binding_level;\n   init_function_start (decl1, input_filename, lineno);\n   current_binding_level = bl;"}, {"sha": "99e5591038f3ea2041fb14df1fd12b6f8cc9e5e9", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=c00996a3ea28127b7392876352ad0dd32e00e1ca", "patch": "@@ -4878,6 +4878,7 @@ arg_assoc_type (k, type)\n     case INTEGER_TYPE:\n     case REAL_TYPE:\n     case COMPLEX_TYPE:\n+    case VECTOR_TYPE:\n     case CHAR_TYPE:\n     case BOOLEAN_TYPE:\n       return 0;\n@@ -4888,7 +4889,6 @@ arg_assoc_type (k, type)\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n     case ARRAY_TYPE:\n-    case VECTOR_TYPE:\n       return arg_assoc_type (k, TREE_TYPE (type));\n     case UNION_TYPE:\n     case ENUMERAL_TYPE:"}, {"sha": "45863e1bd33ef9a03c65f4d76135b9fac89a693f", "filename": "gcc/cp/error.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=c00996a3ea28127b7392876352ad0dd32e00e1ca", "patch": "@@ -447,6 +447,11 @@ dump_type (t, flags)\n       dump_type (TREE_TYPE (t), flags);\n       break;\n \n+    case VECTOR_TYPE:\n+      OB_PUTS (\"vector \");\n+      dump_type (TREE_TYPE (t), flags);\n+      break;\n+\n     case INTEGER_TYPE:\n       if (!TREE_UNSIGNED (TYPE_MAIN_VARIANT (t)) && TREE_UNSIGNED (t))\n \toutput_add_string (scratch_buffer, \"unsigned \");\n@@ -503,7 +508,6 @@ dump_type (t, flags)\n \t reduces code size.  */\n     case ARRAY_TYPE:\n     case POINTER_TYPE:\n-    case VECTOR_TYPE:\n     case REFERENCE_TYPE:\n     case OFFSET_TYPE:\n     offset_type:\n@@ -662,15 +666,6 @@ dump_type_prefix (t, flags)\n \n   switch (TREE_CODE (t))\n     {\n-    case VECTOR_TYPE:\n-      padding = dump_type_prefix (TREE_TYPE (t), flags);\n-      if (padding != none)\n-\toutput_add_space (scratch_buffer);\n-      output_add_string (scratch_buffer, \"vector\");\n-      dump_qualifiers (t, before);\n-      padding = before;\n-      break;\n-\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n       {\n@@ -748,6 +743,7 @@ dump_type_prefix (t, flags)\n     case VOID_TYPE:\n     case TYPENAME_TYPE:\n     case COMPLEX_TYPE:\n+    case VECTOR_TYPE:\n       dump_type (t, flags);\n       padding = before;\n       break;\n@@ -778,7 +774,6 @@ dump_type_suffix (t, flags)\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n     case OFFSET_TYPE:\n-    case VECTOR_TYPE:\n       if (TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE)\n \tprint_right_paren (scratch_buffer);\n       dump_type_suffix (TREE_TYPE (t), flags);\n@@ -844,6 +839,7 @@ dump_type_suffix (t, flags)\n     case VOID_TYPE:\n     case TYPENAME_TYPE:\n     case COMPLEX_TYPE:\n+    case VECTOR_TYPE:\n       break;\n \n     default:"}, {"sha": "1c0d06aeef2b70f1b448c9e1cfc8ec6f2f1ee6b6", "filename": "gcc/cp/except.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=c00996a3ea28127b7392876352ad0dd32e00e1ca", "patch": "@@ -692,8 +692,9 @@ expand_end_eh_spec (raises, try_block)\n \t{\n \t  tmp = build_function_type (void_type_node, void_list_node);\n \t  fn = push_throw_library_fn (fn, tmp);\n-\t  /* Since the spec doesn't allow any exceptions, this call\n-\t     will never throw.  */\n+\t  /* Since the spec doesn't allow any exceptions, this call will\n+\t     never throw.  We use push_throw_library_fn because we do want\n+\t     TREE_THIS_VOLATILE to be set.  */\n \t  TREE_NOTHROW (fn) = 1;\n \t}\n       tmp = NULL_TREE;\n@@ -837,9 +838,7 @@ expand_throw (exp)\n \t     exception.cc.  */\n \t  tree tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n \t  tmp = build_function_type (ptr_type_node, tmp);\n-\t  fn = push_library_fn (fn, tmp);\n-\t  TREE_THIS_VOLATILE (fn) = 1;\n-\t  TREE_NOTHROW (fn) = 0;\n+\t  fn = push_throw_library_fn (fn, tmp);\n \t}\n \n       exp = build_function_call (fn, args);\n@@ -886,17 +885,18 @@ expand_throw (exp)\n \t     user function that exits via an uncaught exception.\n \n \t     So we have to protect the actual initialization of the\n-\t     exception object with terminate(), but evaluate the expression\n-\t     first.  We also expand the call to __eh_alloc\n-\t     first.  Since there could be temps in the expression, we need\n-\t     to handle that, too.  */\n+\t     exception object with terminate(), but evaluate the\n+\t     expression first.  Since there could be temps in the\n+\t     expression, we need to handle that, too.  We also expand\n+\t     the call to __eh_alloc first (which doesn't matter, since\n+\t     it can't throw).  */\n \n \t  my_friendly_assert (stmts_are_full_exprs_p () == 1, 19990926);\n \n \t  /* Store the throw expression into a temp.  This can be less\n \t     efficient than storing it into the allocated space directly, but\n-\t     oh well.  To do this efficiently we would need to insinuate\n-\t     ourselves into expand_call.  */\n+\t     if we allocated the space first we would have to deal with\n+\t     cleaning it up if evaluating this expression throws.  */\n \t  if (TREE_SIDE_EFFECTS (exp))\n \t    {\n \t      tree temp = create_temporary_var (TREE_TYPE (exp));"}, {"sha": "17bb81df6f736155ffb5ab953701636cae7a0944", "filename": "gcc/cp/gxxint.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Fgxxint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Fgxxint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fgxxint.texi?ref=c00996a3ea28127b7392876352ad0dd32e00e1ca", "patch": "@@ -1769,6 +1769,12 @@ followed by the type index of the repeated type. Due to a bug in\n g++ 2.7.2, this is only generated if index is 0. Superceded by\n @samp{n} when squangling.\n \n+@item O\n+Pointer-to-member type.\n+\n+@item o\n+vector type.\n+\n @item P\n Indicates a pointer type.  Followed by the type pointed to.\n "}, {"sha": "001a9e8f36ffc44c3813fd0f75f47bb4affed522", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=c00996a3ea28127b7392876352ad0dd32e00e1ca", "patch": "@@ -1236,10 +1236,9 @@ write_local_name (function, local_entity, entity)\n             ::= <CV-qualifier>\n             ::= P <type>    # pointer-to\n             ::= R <type>    # reference-to\n-            ::= C <type>    # complex pair (C 2000)  [not supported]\n+            ::= C <type>    # complex pair (C 2000)\n             ::= G <type>    # imaginary (C 2000)     [not supported]\n             ::= U <source-name> <type>   # vendor extended type qualifier \n-                                                     [not supported]\n \n    TYPE is a type node.  */\n \n@@ -1349,6 +1348,11 @@ write_type (type)\n \t  write_pointer_to_member_type (build_pointer_type (type));\n \t  break;\n \n+\tcase VECTOR_TYPE:\n+\t  write_string (\"U8__vector\");\n+\t  write_type (TREE_TYPE (type));\n+\t  break;\n+\n \tdefault:\n \t  my_friendly_abort (20000409);\n \t}\n@@ -1416,7 +1420,8 @@ write_CV_qualifiers_for_type (type)\n                     ::= f   # float\n                     ::= d   # double\n                     ::= e   # long double, __float80 \n-                    ::= g   # __float128          [not supported]  */\n+                    ::= g   # __float128          [not supported]\n+                    ::= u <source-name>  # vendor extended type */\n \n static void \n write_builtin_type (type)\n@@ -1446,6 +1451,7 @@ write_builtin_type (type)\n \t  size_t itk;\n \t  /* Assume TYPE is one of the shared integer type nodes.  Find\n \t     it in the array of these nodes.  */\n+\tiagain:\n \t  for (itk = 0; itk < itk_none; ++itk)\n \t    if (type == integer_types[itk])\n \t      {\n@@ -1455,8 +1461,14 @@ write_builtin_type (type)\n \t      }\n \t  \n \t  if (itk == itk_none)\n-\t    /* Couldn't find this type.  */\n-\t    my_friendly_abort (20000408);\n+\t    {\n+\t      tree t = type_for_mode (TYPE_MODE (type), TREE_UNSIGNED (type));\n+\t      if (type == t)\n+\t\t/* Couldn't find this type.  */\n+\t\tmy_friendly_abort (20000408);\n+\t      type = t;\n+\t      goto iagain;\n+\t    }\n \t}\n       break;\n "}, {"sha": "4c59822b0328881b1745559b78a83f5da43db7ac", "filename": "gcc/cp/method.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=c00996a3ea28127b7392876352ad0dd32e00e1ca", "patch": "@@ -1313,6 +1313,8 @@ process_overload_item (parmtype, extra_Gcode)\n   tree parmtype;\n   int extra_Gcode;\n {\n+  tree tmp;\n+\n   numeric_output_need_bar = 0;\n \n   /* Our caller should have already handed any qualifiers, so pull out the\n@@ -1421,6 +1423,7 @@ process_overload_item (parmtype, extra_Gcode)\n       }\n \n     case INTEGER_TYPE:\n+    iagain:\n       if (parmtype == integer_type_node\n           || parmtype == unsigned_type_node\n \t  || parmtype == java_int_type_node)\n@@ -1450,6 +1453,14 @@ process_overload_item (parmtype, extra_Gcode)\n         OB_PUTC ('x');\n       else if (parmtype == java_boolean_type_node)\n \tOB_PUTC ('b');\n+      /* Handle intSI_type_node and such like their C++ equivalents.  */\n+      else if (tmp = type_for_mode (TYPE_MODE (parmtype),\n+\t\t\t\t    TREE_UNSIGNED (parmtype)),\n+\t       parmtype != tmp)\n+\t{\n+\t  parmtype = tmp;\n+\t  goto iagain;\n+\t}\n #if HOST_BITS_PER_WIDE_INT >= 64\n       else\n \t{\n@@ -1483,6 +1494,11 @@ process_overload_item (parmtype, extra_Gcode)\n       build_mangled_name_for_type (TREE_TYPE (parmtype));\n       break;\n \n+    case VECTOR_TYPE:\n+      OB_PUTC ('o');\n+      build_mangled_name_for_type (TREE_TYPE (parmtype));\n+      break;\n+\n     case VOID_TYPE:\n       OB_PUTC ('v');\n       break;"}, {"sha": "8d7f33b32118b89d215b95681b19e2e2c8bca7e6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c00996a3ea28127b7392876352ad0dd32e00e1ca", "patch": "@@ -5786,6 +5786,7 @@ tsubst_decl (t, args, type, in_decl)\n \t    maybe_retrofit_in_chrg (r);\n \t    if (DECL_CONSTRUCTOR_P (r))\n \t      grok_ctor_properties (ctx, r);\n+\t    clone_function_decl(r, /*update_method_vec_p=*/0);\n \t  }\n \telse if (IDENTIFIER_OPNAME_P (DECL_NAME (r)))\n \t  grok_op_properties (r, DECL_VIRTUAL_P (r), DECL_FRIEND_P (r));\n@@ -6164,6 +6165,7 @@ tsubst (t, args, complain, in_decl)\n     case VOID_TYPE:\n     case REAL_TYPE:\n     case COMPLEX_TYPE:\n+    case VECTOR_TYPE:\n     case BOOLEAN_TYPE:\n     case INTEGER_CST:\n     case REAL_CST:\n@@ -8532,6 +8534,7 @@ unify (tparms, targs, parm, arg, strict)\n \n     case REAL_TYPE:\n     case COMPLEX_TYPE:\n+    case VECTOR_TYPE:\n     case INTEGER_TYPE:\n     case BOOLEAN_TYPE:\n     case VOID_TYPE:\n@@ -9222,15 +9225,6 @@ do_decl_instantiation (declspecs, declarator, storage)\n     cp_error (\"storage class `%D' applied to template instantiation\",\n \t      storage);\n \n-  /* Under the new ABI, we need to make sure to instantiate all the\n-     cloned versions of constructors or destructors.  */\n-  if (flag_new_abi &&\n-      (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (result) || \n-       DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (result)) &&\n-      !(TREE_CHAIN (result) && \n-\tDECL_CLONED_FUNCTION (TREE_CHAIN (result))))\n-    clone_function_decl(result, /*update_method_vec_p=*/0);\n-      \n   SET_DECL_EXPLICIT_INSTANTIATION (result);\n   mark_decl_instantiated (result, extern_p);\n   repo_template_instantiated (result, extern_p);"}, {"sha": "653930e423fc72dcad35f513060dd9cdda086a41", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00996a3ea28127b7392876352ad0dd32e00e1ca/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=c00996a3ea28127b7392876352ad0dd32e00e1ca", "patch": "@@ -1319,6 +1319,7 @@ walk_tree (tp, func, data, htab)\n     case TEMPLATE_TYPE_PARM:\n     case REAL_TYPE:\n     case COMPLEX_TYPE:\n+    case VECTOR_TYPE:\n     case VOID_TYPE:\n     case BOOLEAN_TYPE:\n     case TYPENAME_TYPE:\n@@ -1336,7 +1337,6 @@ walk_tree (tp, func, data, htab)\n \n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n-    case VECTOR_TYPE:\n       WALK_SUBTREE (TREE_TYPE (*tp));\n       break;\n "}]}