{"sha": "1f25038381847b32fda35dd91ae0053635509a83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYyNTAzODM4MTg0N2IzMmZkYTM1ZGQ5MWFlMDA1MzYzNTUwOWE4Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T15:13:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T15:13:25Z"}, "message": "[multiple changes]\n\n2011-08-01  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch6.adb (Enter_Overloaded_Entity): Do not warn about a\n\tdeclaration being hidden when overriding an implicit inherited\n\tsubprogram.\n\t* par-ch10.adb (P_Compilation_Unit): In syntax check only mode\n\t(-gnats), do not complain about a source file that contains only a\n\tpragma No_Body.\n\n2011-08-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Iterator_Scheme): Do not overwrite type of loop\n\tvariable if already set.\n\nFrom-SVN: r177046", "tree": {"sha": "f2a6bb372c9048c9925ba8b26c7e25266961f2d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2a6bb372c9048c9925ba8b26c7e25266961f2d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f25038381847b32fda35dd91ae0053635509a83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f25038381847b32fda35dd91ae0053635509a83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f25038381847b32fda35dd91ae0053635509a83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f25038381847b32fda35dd91ae0053635509a83/comments", "author": null, "committer": null, "parents": [{"sha": "5dabb19c6d5d5ac5d8d3c6e4407668b4b27ebdf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dabb19c6d5d5ac5d8d3c6e4407668b4b27ebdf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dabb19c6d5d5ac5d8d3c6e4407668b4b27ebdf2"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "bc668042bc789f725c3b712e9fb02b2f9a19aeaf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f25038381847b32fda35dd91ae0053635509a83/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f25038381847b32fda35dd91ae0053635509a83/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1f25038381847b32fda35dd91ae0053635509a83", "patch": "@@ -1,3 +1,17 @@\n+2011-08-01  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch6.adb (Enter_Overloaded_Entity): Do not warn about a\n+\tdeclaration being hidden when overriding an implicit inherited\n+\tsubprogram.\n+\t* par-ch10.adb (P_Compilation_Unit): In syntax check only mode\n+\t(-gnats), do not complain about a source file that contains only a\n+\tpragma No_Body.\n+\n+2011-08-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iterator_Scheme): Do not overwrite type of loop\n+\tvariable if already set.\n+\n 2011-08-01  Arnaud Charlet  <charlet@adacore.com>\n \n \t* g-socket-dummy.adb, s-osinte-linux.ads, g-socket-dummy.ads,"}, {"sha": "d3c1c162ec9751ffa4ae3c8afbd15b8393df1f98", "filename": "gcc/ada/par-ch10.adb", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f25038381847b32fda35dd91ae0053635509a83/gcc%2Fada%2Fpar-ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f25038381847b32fda35dd91ae0053635509a83/gcc%2Fada%2Fpar-ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch10.adb?ref=1f25038381847b32fda35dd91ae0053635509a83", "patch": "@@ -114,6 +114,7 @@ package body Ch10 is\n       Config_Pragmas     : List_Id;\n       P                  : Node_Id;\n       SR_Present         : Boolean;\n+      No_Body            : Boolean;\n \n       Cunit_Error_Flag : Boolean := False;\n       --  This flag is set True if we have to scan for a compilation unit\n@@ -145,6 +146,10 @@ package body Ch10 is\n \n       SR_Present := False;\n \n+      --  If we see a pragma No_Body, remember not to complain about no body\n+\n+      No_Body := False;\n+\n       if Token = Tok_Pragma then\n          Save_Scan_State (Scan_State);\n          Item := P_Pragma;\n@@ -179,6 +184,10 @@ package body Ch10 is\n          Save_Scan_State (Scan_State);\n          Item := P_Pragma;\n \n+         if Item /= Error and then Pragma_Name (Item) = Name_No_Body then\n+            No_Body := True;\n+         end if;\n+\n          if Item = Error\n            or else not Is_Configuration_Pragma_Name (Pragma_Name (Item))\n          then\n@@ -301,7 +310,12 @@ package body Ch10 is\n \n          else\n             if Operating_Mode = Check_Syntax and then Token = Tok_EOF then\n-               Error_Msg_SC (\"?file contains no compilation units\");\n+\n+               --  Do not complain if there is a pragma No_Body\n+\n+               if not No_Body then\n+                  Error_Msg_SC (\"?file contains no compilation units\");\n+               end if;\n             else\n                Error_Msg_SC (\"compilation unit expected\");\n                Cunit_Error_Flag := True;"}, {"sha": "96c778d3f833e8106830841705022c5e54c7d9b4", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f25038381847b32fda35dd91ae0053635509a83/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f25038381847b32fda35dd91ae0053635509a83/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=1f25038381847b32fda35dd91ae0053635509a83", "patch": "@@ -1947,7 +1947,16 @@ package body Sem_Ch5 is\n                Make_Index (DS, LP);\n \n                Set_Ekind (Id, E_Loop_Parameter);\n-               Set_Etype (Id, Etype (DS));\n+\n+               --  If the loop is part of a predicate or precondition, it may\n+               --  be analyzed twice, once in the source and once on the copy\n+               --  used to check conformance. Preserve the original itype\n+               --  because the second one may be created in a different scope,\n+               --  e.g. a precondition procedure, leading to a crash in GIGI.\n+\n+               if No (Etype (Id)) or else Etype (Id) = Any_Type then\n+                  Set_Etype (Id, Etype (DS));\n+               end if;\n \n                --  Treat a range as an implicit reference to the type, to\n                --  inhibit spurious warnings."}, {"sha": "2633fca02759506e87d91b3f3c11f334781f9ed8", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f25038381847b32fda35dd91ae0053635509a83/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f25038381847b32fda35dd91ae0053635509a83/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=1f25038381847b32fda35dd91ae0053635509a83", "patch": "@@ -6048,7 +6048,13 @@ package body Sem_Ch6 is\n             --  of the real danger that different operators may be applied in\n             --  various parts of the program.\n \n-            if (not Is_Overloadable (E) or else Subtype_Conformant (E, S))\n+            --  Note that if E and S have the same scope, there is never any\n+            --  hiding. Either the two conflict, and the program is illegal,\n+            --  or S is overriding an implicit inherited subprogram.\n+\n+            if Scope (E) /= Scope (S)\n+                  and then (not Is_Overloadable (E)\n+                              or else Subtype_Conformant (E, S))\n                   and then (Is_Immediately_Visible (E)\n                               or else\n                             Is_Potentially_Use_Visible (S))\n@@ -6059,8 +6065,7 @@ package body Sem_Ch6 is\n \n                elsif Nkind (S) = N_Defining_Operator_Symbol\n                  and then\n-                   Scope (\n-                     Base_Type (Etype (First_Formal (S)))) /= Scope (S)\n+                   Scope (Base_Type (Etype (First_Formal (S)))) /= Scope (S)\n                then\n                   Error_Msg_N\n                     (\"declaration of & hides predefined operator?\", S);"}]}