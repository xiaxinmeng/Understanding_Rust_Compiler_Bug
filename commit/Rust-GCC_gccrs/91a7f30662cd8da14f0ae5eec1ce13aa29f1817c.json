{"sha": "91a7f30662cd8da14f0ae5eec1ce13aa29f1817c", "node_id": "C_kwDOANBUbNoAKDkxYTdmMzA2NjJjZDhkYTE0ZjBhZTVlZWMxY2UxM2FhMjlmMTgxN2M", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-14T17:01:34Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-15T09:41:03Z"}, "message": "Implement visitor pattern for vrange.\n\nWe frequently do operations on the various (upcoming) range types.\nThe cascading if/switch statements of is_a<> are getting annoying and\nrepetitive.\n\nThe classic visitor pattern provides a clean way to implement classes\nhandling various range types without the need for endless\nconditionals.  It also helps us keep polluting the vrange API with\nfunctionality that should frankly live elsewhere.\n\nIn a follow-up patch I will add pretty printing facilities for vrange\nand unify them with the dumping code.  This is a prime candidate for\nthe pattern, as the code isn't performance sensitive.  Other instances\n(?? the dispatch code in range-ops ??) may still benefit from the hand\ncoded conditionals, since they elide vtables in favor of the\ndiscriminator bit in vrange.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* value-range.cc (irange::accept): New.\n\t(unsupported_range::accept): New.\n\t* value-range.h (class vrange_visitor): New.\n\t(class vrange): Add accept method.\n\t(class unsupported_range): Same.\n\t(class Value_Range): Same.", "tree": {"sha": "72d4637bf5e70ee228eba1abdffa9224a78df4cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72d4637bf5e70ee228eba1abdffa9224a78df4cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91a7f30662cd8da14f0ae5eec1ce13aa29f1817c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a7f30662cd8da14f0ae5eec1ce13aa29f1817c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91a7f30662cd8da14f0ae5eec1ce13aa29f1817c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a7f30662cd8da14f0ae5eec1ce13aa29f1817c/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f858fe7a8b250995bc5b0d18720a2ceb6815622d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f858fe7a8b250995bc5b0d18720a2ceb6815622d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f858fe7a8b250995bc5b0d18720a2ceb6815622d"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "8e6ec4cd74077c03ce80dcdc29fc4eb42949e6d4", "filename": "gcc/value-range.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a7f30662cd8da14f0ae5eec1ce13aa29f1817c/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a7f30662cd8da14f0ae5eec1ce13aa29f1817c/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=91a7f30662cd8da14f0ae5eec1ce13aa29f1817c", "patch": "@@ -30,6 +30,18 @@ along with GCC; see the file COPYING3.  If not see\n #include \"fold-const.h\"\n #include \"gimple-range.h\"\n \n+void\n+irange::accept (const vrange_visitor &v) const\n+{\n+  v.visit (*this);\n+}\n+\n+void\n+unsupported_range::accept (const vrange_visitor &v) const\n+{\n+  v.visit (*this);\n+}\n+\n // Convenience function only available for integers and pointers.\n \n wide_int"}, {"sha": "a7da8c5e900289526aad0638c1a3a548060617c6", "filename": "gcc/value-range.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a7f30662cd8da14f0ae5eec1ce13aa29f1817c/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a7f30662cd8da14f0ae5eec1ce13aa29f1817c/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=91a7f30662cd8da14f0ae5eec1ce13aa29f1817c", "patch": "@@ -73,6 +73,7 @@ class vrange\n   template <typename T> friend bool is_a (vrange &);\n   friend class Value_Range;\n public:\n+  virtual void accept (const class vrange_visitor &v) const = 0;\n   virtual void set (tree, tree, value_range_kind = VR_RANGE);\n   virtual tree type () const;\n   virtual bool supports_type_p (tree type) const;\n@@ -149,6 +150,7 @@ class GTY((user)) irange : public vrange\n   // Misc methods.\n   virtual bool fits_p (const vrange &r) const override;\n   virtual void dump (FILE * = stderr) const override;\n+  virtual void accept (const vrange_visitor &v) const override;\n \n   // Nonzero masks.\n   wide_int get_nonzero_bits () const;\n@@ -251,6 +253,7 @@ class unsupported_range : public vrange\n public:\n   unsupported_range ();\n   virtual void dump (FILE *) const override;\n+  virtual void accept (const vrange_visitor &v) const override;\n };\n \n // is_a<> and as_a<> implementation for vrange.\n@@ -298,6 +301,13 @@ is_a <irange> (vrange &v)\n   return v.m_discriminator == VR_IRANGE;\n }\n \n+class vrange_visitor\n+{\n+public:\n+  virtual void visit (const irange &) const { }\n+  virtual void visit (const unsupported_range &) const { }\n+};\n+\n // This is a special int_range<1> with only one pair, plus\n // VR_ANTI_RANGE magic to describe slightly more than can be described\n // in one pair.  It is described in the code as a \"legacy range\" (as\n@@ -348,6 +358,7 @@ class Value_Range\n   bool zero_p () const { return m_vrange->zero_p (); }\n   wide_int lower_bound () const; // For irange/prange compatability.\n   wide_int upper_bound () const; // For irange/prange compatability.\n+  void accept (const vrange_visitor &v) const { m_vrange->accept (v); }\n private:\n   void init (tree type);\n   unsupported_range m_unsupported;"}]}