{"sha": "6df548d2d30d517e98adb449e5f21fed9cc05a9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRmNTQ4ZDJkMzBkNTE3ZTk4YWRiNDQ5ZTVmMjFmZWQ5Y2MwNWE5YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2008-02-17T15:46:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-02-17T15:46:30Z"}, "message": "re PR libstdc++/35221 (libstdc++ broken)\n\n2008-02-17  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/35221\n\t* include/parallel/types.h: Reinstate integer types typedefs.\n\t* include/parallel/multiseq_selection.h: Adjust.\n\t* include/parallel/compatibility.h: Likewise.\n\t* include/parallel/random_shuffle.h: Likewise.\n\t* include/parallel/random_number.h: Likewise.\n\t* include/parallel/base.h: Likewise.\n\nFrom-SVN: r132380", "tree": {"sha": "0fb6724d2a6fc243683e49eb53e08ea69968b4b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fb6724d2a6fc243683e49eb53e08ea69968b4b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6df548d2d30d517e98adb449e5f21fed9cc05a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df548d2d30d517e98adb449e5f21fed9cc05a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6df548d2d30d517e98adb449e5f21fed9cc05a9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df548d2d30d517e98adb449e5f21fed9cc05a9a/comments", "author": null, "committer": null, "parents": [{"sha": "f0a77246d3d8bdf1e72502ed94c6f8c56e45333d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0a77246d3d8bdf1e72502ed94c6f8c56e45333d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0a77246d3d8bdf1e72502ed94c6f8c56e45333d"}], "stats": {"total": 136, "additions": 77, "deletions": 59}, "files": [{"sha": "f5b9e1e134e8e5366a704dabf904b4041f51cbbb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df548d2d30d517e98adb449e5f21fed9cc05a9a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df548d2d30d517e98adb449e5f21fed9cc05a9a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6df548d2d30d517e98adb449e5f21fed9cc05a9a", "patch": "@@ -1,3 +1,13 @@\n+2008-02-17  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/35221\n+\t* include/parallel/types.h: Reinstate integer types typedefs.\n+\t* include/parallel/multiseq_selection.h: Adjust.\n+\t* include/parallel/compatibility.h: Likewise.\n+\t* include/parallel/random_shuffle.h: Likewise.\n+\t* include/parallel/random_number.h: Likewise.\n+\t* include/parallel/base.h: Likewise.\n+\n 2008-02-17  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/35209"}, {"sha": "de231698cc66c8184116578dacddd49f4c6b1103", "filename": "libstdc++-v3/include/parallel/base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df548d2d30d517e98adb449e5f21fed9cc05a9a/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df548d2d30d517e98adb449e5f21fed9cc05a9a/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h?ref=6df548d2d30d517e98adb449e5f21fed9cc05a9a", "patch": "@@ -388,8 +388,8 @@ template<typename T, typename _DifferenceTp>\n   public:\n     typedef _DifferenceTp difference_type;\n \n-    // Better case down to uint64_t, than up to _DifferenceTp.\n-    typedef pseudo_sequence_iterator<T, uint64_t> iterator;\n+    // Better case down to uint64, than up to _DifferenceTp.\n+    typedef pseudo_sequence_iterator<T, uint64> iterator;\n \n     /** @brief Constructor.\n       *  @param val Element of the sequence."}, {"sha": "18514e6f8a989d935176dd6487eba76ae9007110", "filename": "libstdc++-v3/include/parallel/compatibility.h", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df548d2d30d517e98adb449e5f21fed9cc05a9a/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcompatibility.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df548d2d30d517e98adb449e5f21fed9cc05a9a/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcompatibility.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcompatibility.h?ref=6df548d2d30d517e98adb449e5f21fed9cc05a9a", "patch": "@@ -68,7 +68,7 @@ namespace __gnu_parallel\n {\n #if defined(__ICC)\n   template<typename must_be_int = int>\n-  int32_t faa32(int32_t* x, int32_t inc)\n+  int32 faa32(int32* x, int32 inc)\n   {\n     asm volatile(\"lock xadd %0,%1\"\n \t\t : \"=r\" (inc), \"=m\" (*x)\n@@ -78,7 +78,7 @@ namespace __gnu_parallel\n   }\n #if defined(__x86_64)\n   template<typename must_be_int = int>\n-  int64_t faa64(int64_t* x, int64_t inc)\n+  int64 faa64(int64* x, int64 inc)\n   {\n     asm volatile(\"lock xadd %0,%1\"\n \t\t : \"=r\" (inc), \"=m\" (*x)\n@@ -97,8 +97,8 @@ namespace __gnu_parallel\n    *  @param ptr Pointer to a 32-bit signed integer.\n    *  @param addend Value to add.\n    */\n-  inline int32_t\n-  fetch_and_add_32(volatile int32_t* ptr, int32_t addend)\n+  inline int32\n+  fetch_and_add_32(volatile int32* ptr, int32 addend)\n   {\n #if defined(__ICC)\t//x86 version\n     return _InterlockedExchangeAdd((void*)ptr, addend);\n@@ -110,7 +110,7 @@ namespace __gnu_parallel\n #elif defined(__GNUC__)\n     return __sync_fetch_and_add(ptr, addend);\n #elif defined(__SUNPRO_CC) && defined(__sparc)\n-    volatile int32_t before, after;\n+    volatile int32 before, after;\n     do\n       {\n \tbefore = *ptr;\n@@ -120,7 +120,7 @@ namespace __gnu_parallel\n     return before;\n #else\t//fallback, slow\n #pragma message(\"slow fetch_and_add_32\")\n-    int32_t res;\n+    int32 res;\n #pragma omp critical\n     {\n       res = *ptr;\n@@ -136,11 +136,11 @@ namespace __gnu_parallel\n    *  @param ptr Pointer to a 64-bit signed integer.\n    *  @param addend Value to add.\n    */\n-  inline int64_t\n-  fetch_and_add_64(volatile int64_t* ptr, int64_t addend)\n+  inline int64\n+  fetch_and_add_64(volatile int64* ptr, int64 addend)\n   {\n #if defined(__ICC) && defined(__x86_64)\t//x86 version\n-    return faa64<int>((int64_t*)ptr, addend);\n+    return faa64<int>((int64*)ptr, addend);\n #elif defined(__ECC)\t//IA-64 version\n     return _InterlockedExchangeAdd64((void*)ptr, addend);\n #elif defined(__ICL) || defined(_MSC_VER)\n@@ -156,7 +156,7 @@ namespace __gnu_parallel\n   (defined(__i686) || defined(__pentium4) || defined(__athlon))\n     return __sync_fetch_and_add(ptr, addend);\n #elif defined(__SUNPRO_CC) && defined(__sparc)\n-    volatile int64_t before, after;\n+    volatile int64 before, after;\n     do\n       {\n \tbefore = *ptr;\n@@ -170,7 +170,7 @@ namespace __gnu_parallel\n     //#warning \"please compile with -march=i686 or better\"\n #endif\n #pragma message(\"slow fetch_and_add_64\")\n-    int64_t res;\n+    int64 res;\n #pragma omp critical\n     {\n       res = *ptr;\n@@ -190,10 +190,10 @@ namespace __gnu_parallel\n   inline T\n   fetch_and_add(volatile T* ptr, T addend)\n   {\n-    if (sizeof(T) == sizeof(int32_t))\n-      return (T)fetch_and_add_32((volatile int32_t*) ptr, (int32_t)addend);\n-    else if (sizeof(T) == sizeof(int64_t))\n-      return (T)fetch_and_add_64((volatile int64_t*) ptr, (int64_t)addend);\n+    if (sizeof(T) == sizeof(int32))\n+      return (T)fetch_and_add_32((volatile int32*) ptr, (int32)addend);\n+    else if (sizeof(T) == sizeof(int64))\n+      return (T)fetch_and_add_64((volatile int64*) ptr, (int64)addend);\n     else\n       _GLIBCXX_PARALLEL_ASSERT(false);\n   }\n@@ -202,10 +202,10 @@ namespace __gnu_parallel\n #if defined(__ICC)\n \n   template<typename must_be_int = int>\n-  inline int32_t\n-  cas32(volatile int32_t* ptr, int32_t old, int32_t nw)\n+  inline int32\n+  cas32(volatile int32* ptr, int32 old, int32 nw)\n   {\n-    int32_t before;\n+    int32 before;\n     __asm__ __volatile__(\"lock; cmpxchgl %1,%2\"\n \t\t\t : \"=a\"(before)\n \t\t\t : \"q\"(nw), \"m\"(*(volatile long long*)(ptr)), \"0\"(old)\n@@ -215,10 +215,10 @@ namespace __gnu_parallel\n \n #if defined(__x86_64)\n   template<typename must_be_int = int>\n-  inline int64_t\n-  cas64(volatile int64_t *ptr, int64_t old, int64_t nw)\n+  inline int64\n+  cas64(volatile int64 *ptr, int64 old, int64 nw)\n   {\n-    int64_t before;\n+    int64 before;\n     __asm__ __volatile__(\"lock; cmpxchgq %1,%2\"\n \t\t\t : \"=a\"(before)\n \t\t\t : \"q\"(nw), \"m\"(*(volatile long long*)(ptr)), \"0\"(old)\n@@ -238,7 +238,7 @@ namespace __gnu_parallel\n    *  @param replacement Replacement value.\n    */\n   inline bool\n-  compare_and_swap_32(volatile int32_t* ptr, int32_t comparand, int32_t replacement)\n+  compare_and_swap_32(volatile int32* ptr, int32 comparand, int32 replacement)\n   {\n #if defined(__ICC)\t//x86 version\n     return _InterlockedCompareExchange((void*)ptr, replacement,\n@@ -278,7 +278,7 @@ namespace __gnu_parallel\n    *  @param replacement Replacement value.\n    */\n   inline bool\n-  compare_and_swap_64(volatile int64_t* ptr, int64_t comparand, int64_t replacement)\n+  compare_and_swap_64(volatile int64* ptr, int64 comparand, int64 replacement)\n   {\n #if defined(__ICC) && defined(__x86_64)\t//x86 version\n     return cas64<int>(ptr, comparand, replacement) == comparand;\n@@ -332,10 +332,10 @@ namespace __gnu_parallel\n   inline bool\n   compare_and_swap(volatile T* ptr, T comparand, T replacement)\n   {\n-    if (sizeof(T) == sizeof(int32_t))\n-      return compare_and_swap_32((volatile int32_t*) ptr, (int32_t)comparand, (int32_t)replacement);\n-    else if (sizeof(T) == sizeof(int64_t))\n-      return compare_and_swap_64((volatile int64_t*) ptr, (int64_t)comparand, (int64_t)replacement);\n+    if (sizeof(T) == sizeof(int32))\n+      return compare_and_swap_32((volatile int32*) ptr, (int32)comparand, (int32)replacement);\n+    else if (sizeof(T) == sizeof(int64))\n+      return compare_and_swap_64((volatile int64*) ptr, (int64)comparand, (int64)replacement);\n     else\n       _GLIBCXX_PARALLEL_ASSERT(false);\n   }"}, {"sha": "839cc4d5c1d9d947180ca8ba87293a5cacd89ada", "filename": "libstdc++-v3/include/parallel/multiseq_selection.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df548d2d30d517e98adb449e5f21fed9cc05a9a/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df548d2d30d517e98adb449e5f21fed9cc05a9a/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h?ref=6df548d2d30d517e98adb449e5f21fed9cc05a9a", "patch": "@@ -264,7 +264,7 @@ namespace __gnu_parallel\n \t    }\n \t  \n \t  difference_type skew = static_cast<difference_type>\n-\t    (static_cast<uint64_t>(total) * rank / N - leftsize);\n+\t    (static_cast<uint64>(total) * rank / N - leftsize);\n \n \t  if (skew > 0)\n \t    {"}, {"sha": "e1e11a8675c7cd699df42fc024387d86c58fe210", "filename": "libstdc++-v3/include/parallel/random_number.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df548d2d30d517e98adb449e5f21fed9cc05a9a/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_number.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df548d2d30d517e98adb449e5f21fed9cc05a9a/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_number.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_number.h?ref=6df548d2d30d517e98adb449e5f21fed9cc05a9a", "patch": "@@ -48,37 +48,37 @@ namespace __gnu_parallel\n   {\n   private:\n     std::tr1::mt19937 \tmt;\n-    uint64_t \t\tsupremum;\n-    uint64_t \t\tRAND_SUP;\n+    uint64 \t\tsupremum;\n+    uint64 \t\tRAND_SUP;\n     double \t\tsupremum_reciprocal;\n     double \t\tRAND_SUP_REC;\n \n     // Assumed to be twice as long as the usual random number.\n-    uint64_t \t\tcache;  \n+    uint64 \t\tcache;  \n \n     // Bit results.\n     int bits_left;\n     \n-    static uint32_t\n-    scale_down(uint64_t x,\n+    static uint32\n+    scale_down(uint64 x,\n #if _GLIBCXX_SCALE_DOWN_FPU\n-\t       uint64_t /*supremum*/, double supremum_reciprocal)\n+\t       uint64 /*supremum*/, double supremum_reciprocal)\n #else\n-               uint64_t supremum, double /*supremum_reciprocal*/)\n+               uint64 supremum, double /*supremum_reciprocal*/)\n #endif\n \t{\n #if _GLIBCXX_SCALE_DOWN_FPU\n-\t  return uint32_t(x * supremum_reciprocal);\n+\t  return uint32(x * supremum_reciprocal);\n #else\n-\t  return static_cast<uint32_t>(x % supremum);\n+\t  return static_cast<uint32>(x % supremum);\n #endif\n \t}\n \n   public:\n     /** @brief Default constructor. Seed with 0. */\n     random_number()\n     : mt(0), supremum(0x100000000ULL),\n-      RAND_SUP(1ULL << (sizeof(uint32_t) * 8)),\n+      RAND_SUP(1ULL << (sizeof(uint32) * 8)),\n       supremum_reciprocal(double(supremum) / double(RAND_SUP)),\n       RAND_SUP_REC(1.0 / double(RAND_SUP)),\n       cache(0), bits_left(0) { }\n@@ -87,22 +87,22 @@ namespace __gnu_parallel\n      *  @param seed Random seed.\n      *  @param supremum Generate integer random numbers in the\n      *                  interval @c [0,supremum). */\n-    random_number(uint32_t seed, uint64_t supremum = 0x100000000ULL)\n+    random_number(uint32 seed, uint64 supremum = 0x100000000ULL)\n     : mt(seed), supremum(supremum),\n-      RAND_SUP(1ULL << (sizeof(uint32_t) * 8)),\n+      RAND_SUP(1ULL << (sizeof(uint32) * 8)),\n       supremum_reciprocal(double(supremum) / double(RAND_SUP)),\n       RAND_SUP_REC(1.0 / double(RAND_SUP)),\n       cache(0), bits_left(0) { }\n \n     /** @brief Generate unsigned random 32-bit integer. */\n-    uint32_t\n+    uint32\n     operator()()\n     { return scale_down(mt(), supremum, supremum_reciprocal); }\n \n     /** @brief Generate unsigned random 32-bit integer in the\n \tinterval @c [0,local_supremum). */\n-    uint32_t\n-    operator()(uint64_t local_supremum)\n+    uint32\n+    operator()(uint64 local_supremum)\n     {\n       return scale_down(mt(), local_supremum,\n \t\t\tdouble(local_supremum * RAND_SUP_REC));\n@@ -118,7 +118,7 @@ namespace __gnu_parallel\n       bits_left -= bits;\n       if (bits_left < 32)\n \t{\n-\t  cache |= ((uint64_t(mt())) << bits_left);\n+\t  cache |= ((uint64(mt())) << bits_left);\n \t  bits_left += 32;\n \t}\n       return res;"}, {"sha": "348a3a34b378d9ef2a4c28143b6ea298468d9fc0", "filename": "libstdc++-v3/include/parallel/random_shuffle.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df548d2d30d517e98adb449e5f21fed9cc05a9a/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df548d2d30d517e98adb449e5f21fed9cc05a9a/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h?ref=6df548d2d30d517e98adb449e5f21fed9cc05a9a", "patch": "@@ -106,7 +106,7 @@ template<typename RandomAccessIterator, typename RandomNumberGenerator>\n     bin_index bins_end;\n \n     /** @brief Random seed for this thread. */\n-    uint32_t seed;\n+    uint32 seed;\n \n     /** @brief Pointer to global data. */\n     DRandomShufflingGlobalData<RandomAccessIterator>* sd;\n@@ -368,7 +368,7 @@ template<typename RandomAccessIterator, typename RandomNumberGenerator>\n                 for (; j < bin_cursor; ++j)\n                   sd.bin_proc[j] = i;\n                 pus[i].num_threads = num_threads;\n-                pus[i].seed = rng(std::numeric_limits<uint32_t>::max());\n+                pus[i].seed = rng(std::numeric_limits<uint32>::max());\n                 pus[i].sd = &sd;\n               }\n             starts[num_threads] = start;"}, {"sha": "f71db81fee1f2e546088e993533558b21d2a5262", "filename": "libstdc++-v3/include/parallel/types.h", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df548d2d30d517e98adb449e5f21fed9cc05a9a/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df548d2d30d517e98adb449e5f21fed9cc05a9a/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftypes.h?ref=6df548d2d30d517e98adb449e5f21fed9cc05a9a", "patch": "@@ -39,7 +39,6 @@\n #define _GLIBCXX_PARALLEL_TYPES_H 1\n \n #include <cstdlib>\n-#include <tr1/cstdint>\n \n namespace __gnu_parallel\n {\n@@ -70,33 +69,42 @@ namespace __gnu_parallel\n   inline bool \n   is_parallel(const parallelism __p) { return __p != sequential; }\n \n-  /// Integer Types.\n-  using std::tr1::int16_t;\n-  using std::tr1::uint16_t;\n+  // XXX need to use <cstdint>\n+  /** @brief 16-bit signed integer. */\n+  typedef short int16;\n \n-  using std::tr1::int32_t;\n-  using std::tr1::uint32_t;\n+  /** @brief 16-bit unsigned integer. */\n+  typedef unsigned short uint16;\n \n-  using std::tr1::int64_t;\n-  using std::tr1::uint64_t;\n+  /** @brief 32-bit signed integer. */\n+  typedef int int32;\n+\n+  /** @brief 32-bit unsigned integer. */\n+  typedef unsigned int uint32;\n+\n+  /** @brief 64-bit signed integer. */\n+  typedef long long int64;\n+\n+  /** @brief 64-bit unsigned integer. */\n+  typedef unsigned long long uint64;\n \n   /**\n    * @brief Unsigned integer to index elements.\n    * The total number of elements for each algorithm must fit into this type.\n    */\n-  typedef uint64_t sequence_index_t;\n+  typedef uint64 sequence_index_t;\n \n   /**\n    * @brief Unsigned integer to index a thread number.\n    * The maximum thread number (for each processor) must fit into this type.\n    */\n-  typedef uint16_t thread_index_t;\n+  typedef uint16 thread_index_t;\n \n   // XXX atomics interface?\n   /**\n    * @brief Longest compare-and-swappable integer type on this platform.\n    */\n-  typedef int64_t lcas_t;\n+  typedef int64 lcas_t;\n \n   // XXX numeric_limits::digits?\n   /**"}]}