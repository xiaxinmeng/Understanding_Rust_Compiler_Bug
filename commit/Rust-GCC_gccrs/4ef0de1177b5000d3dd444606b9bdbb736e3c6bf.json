{"sha": "4ef0de1177b5000d3dd444606b9bdbb736e3c6bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVmMGRlMTE3N2I1MDAwZDNkZDQ0NDYwNmI5YmRiYjczNmUzYzZiZg==", "commit": {"author": {"name": "Jody Goldberg", "email": "jodyg@idt.net", "date": "1997-12-07T10:41:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-12-07T10:41:01Z"}, "message": "bastring.h: Move closer to the draft standard implementation of basic_string by adding 3...\n\nSun Dec  7 02:34:40 1997  Jody Goldberg\t<jodyg@idt.net>\n\n\t* libstdc++/std/bastring.h : Move closer to the draft standard\n\timplementation of basic_string by adding 3 paramter 'Allocator'.\n\tNOTE: this still differs from the standard in not offering per\n\tinstance allocators.\n\t* libstdc++/std/bastring.cc : Likewise.\n\t* libstdc++/stlinst.cc : Handle thread safe allocators if they are the\n\tdefault.\n\nFrom-SVN: r16993", "tree": {"sha": "d904341aa74a2d332d4e2b981e699ee70baa72c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d904341aa74a2d332d4e2b981e699ee70baa72c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ef0de1177b5000d3dd444606b9bdbb736e3c6bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ef0de1177b5000d3dd444606b9bdbb736e3c6bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ef0de1177b5000d3dd444606b9bdbb736e3c6bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ef0de1177b5000d3dd444606b9bdbb736e3c6bf/comments", "author": null, "committer": null, "parents": [{"sha": "179b008f3e37dc8d713e78509fda6461dc203921", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/179b008f3e37dc8d713e78509fda6461dc203921", "html_url": "https://github.com/Rust-GCC/gccrs/commit/179b008f3e37dc8d713e78509fda6461dc203921"}], "stats": {"total": 389, "additions": 215, "deletions": 174}, "files": [{"sha": "0d1ddeba948208d26068ed573b1e118596cd2c14", "filename": "libstdc++/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef0de1177b5000d3dd444606b9bdbb736e3c6bf/libstdc%2B%2B%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef0de1177b5000d3dd444606b9bdbb736e3c6bf/libstdc%2B%2B%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2FChangeLog?ref=4ef0de1177b5000d3dd444606b9bdbb736e3c6bf", "patch": "@@ -1,3 +1,13 @@\n+Sun Dec  7 02:34:40 1997  Jody Goldberg\t<jodyg@idt.net>\n+\n+\t* libstdc++/std/bastring.h : Move closer to the draft standard\n+\timplementation of basic_string by adding 3 paramter 'Allocator'.\n+\tNOTE: this still differs from the standard in not offering per\n+\tinstance allocators.\n+\t* libstdc++/std/bastring.cc : Likewise.\n+\t* libstdc++/stlinst.cc : Handle thread safe allocators if they are the\n+\tdefault.\n+\n Sun Dec  7 02:32:20 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* iosfwd: New header."}, {"sha": "b5be65f3ee359e7e19426df54c2fcc2f4ac95c12", "filename": "libstdc++/std/bastring.cc", "status": "modified", "additions": 121, "deletions": 97, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef0de1177b5000d3dd444606b9bdbb736e3c6bf/libstdc%2B%2B%2Fstd%2Fbastring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef0de1177b5000d3dd444606b9bdbb736e3c6bf/libstdc%2B%2B%2Fstd%2Fbastring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fbastring.cc?ref=4ef0de1177b5000d3dd444606b9bdbb736e3c6bf", "patch": "@@ -29,15 +29,24 @@\n #include <std/bastring.h>\n \n extern \"C++\" {\n-template <class charT, class traits>\n-inline void * basic_string <charT, traits>::Rep::\n+template <class charT, class traits, class Allocator>\n+inline void * basic_string <charT, traits, Allocator>::Rep::\n operator new (size_t s, size_t extra)\n {\n-  return ::operator new (s + extra * sizeof (charT));\n+  return Allocator::allocate(s + extra * sizeof (charT));\n }\n \n-template <class charT, class traits>\n-inline size_t basic_string <charT, traits>::Rep::\n+template <class charT, class traits, class Allocator>\n+inline void basic_string <charT, traits, Allocator>::Rep::\n+operator delete (void * ptr)\n+{\n+  return Allocator::deallocate(ptr, sizeof(Rep) +\n+\t\t\t       reinterpret_cast<Rep *>(ptr)->res *\n+\t\t\t       sizeof (charT)); \n+}\n+\n+template <class charT, class traits, class Allocator>\n+inline size_t basic_string <charT, traits, Allocator>::Rep::\n #if _G_ALLOC_CONTROL\n default_frob (size_t s)\n #else\n@@ -49,8 +58,9 @@ frob_size (size_t s)\n   return i;\n }\n \n-template <class charT, class traits>\n-inline basic_string <charT, traits>::Rep * basic_string <charT, traits>::Rep::\n+template <class charT, class traits, class Allocator>\n+inline basic_string <charT, traits, Allocator>::Rep *\n+basic_string <charT, traits, Allocator>::Rep::\n create (size_t extra)\n {\n   extra = frob_size (extra + 1);\n@@ -61,8 +71,8 @@ create (size_t extra)\n   return p;\n }\n \n-template <class charT, class traits>\n-charT * basic_string <charT, traits>::Rep::\n+template <class charT, class traits, class Allocator>\n+charT * basic_string <charT, traits, Allocator>::Rep::\n clone ()\n {\n   Rep *p = Rep::create (len);\n@@ -71,8 +81,8 @@ clone ()\n   return p->data ();\n }\n \n-template <class charT, class traits>\n-inline bool basic_string <charT, traits>::Rep::\n+template <class charT, class traits, class Allocator>\n+inline bool basic_string <charT, traits, Allocator>::Rep::\n #ifdef _G_ALLOC_CONTROL\n default_excess (size_t s, size_t r)\n #else\n@@ -82,9 +92,9 @@ excess_slop (size_t s, size_t r)\n   return 2 * (s <= 16 ? 16 : s) < r;\n }\n \n-template <class charT, class traits>\n-inline bool basic_string <charT, traits>::\n-check_realloc (size_t s) const\n+template <class charT, class traits, class Allocator>\n+inline bool basic_string <charT, traits, Allocator>::\n+check_realloc (basic_string::size_type s) const\n {\n   s += sizeof (charT);\n   rep ()->selfish = false;\n@@ -93,9 +103,9 @@ check_realloc (size_t s) const\n \t  || Rep::excess_slop (s, capacity ()));\n }\n \n-template <class charT, class traits>\n-void basic_string <charT, traits>::\n-alloc (size_t size, bool save)\n+template <class charT, class traits, class Allocator>\n+void basic_string <charT, traits, Allocator>::\n+alloc (basic_string::size_type size, bool save)\n {\n   if (! check_realloc (size))\n     return;\n@@ -113,10 +123,11 @@ alloc (size_t size, bool save)\n   repup (p);\n }\n \n-template <class charT, class traits>\n-basic_string <charT, traits>& basic_string <charT, traits>::\n-replace (size_t pos1, size_t n1,\n-\t const basic_string& str, size_t pos2, size_t n2)\n+template <class charT, class traits, class Allocator>\n+basic_string <charT, traits, Allocator>&\n+basic_string <charT, traits, Allocator>::\n+replace (size_type pos1, size_type n1,\n+\t const basic_string& str, size_type pos2, size_type n2)\n {\n   const size_t len2 = str.length ();\n \n@@ -131,27 +142,28 @@ replace (size_t pos1, size_t n1,\n   return replace (pos1, n1, str.data () + pos2, n2);\n }\n \n-template <class charT, class traits>\n-inline void basic_string <charT, traits>::Rep::\n+template <class charT, class traits, class Allocator>\n+inline void basic_string <charT, traits, Allocator>::Rep::\n copy (size_t pos, const charT *s, size_t n)\n {\n   if (n)\n     traits::copy (data () + pos, s, n);\n }\n \n-template <class charT, class traits>\n-inline void basic_string <charT, traits>::Rep::\n+template <class charT, class traits, class Allocator>\n+inline void basic_string <charT, traits, Allocator>::Rep::\n move (size_t pos, const charT *s, size_t n)\n {\n   if (n)\n     traits::move (data () + pos, s, n);\n }\n \n-template <class charT, class traits>\n-basic_string <charT, traits>& basic_string <charT, traits>::\n-replace (size_t pos, size_t n1, const charT* s, size_t n2)\n+template <class charT, class traits, class Allocator>\n+basic_string <charT, traits, Allocator>&\n+basic_string <charT, traits, Allocator>::\n+replace (size_type pos, size_type n1, const charT* s, size_type n2)\n {\n-  const size_t len = length ();\n+  const size_type len = length ();\n   OUTOFRANGE (pos > len);\n   if (n1 > len - pos)\n     n1 = len - pos;\n@@ -176,16 +188,16 @@ replace (size_t pos, size_t n1, const charT* s, size_t n2)\n   return *this;\n }\n \n-template <class charT, class traits>\n-inline void basic_string <charT, traits>::Rep::\n+template <class charT, class traits, class Allocator>\n+inline void basic_string <charT, traits, Allocator>::Rep::\n set (size_t pos, const charT c, size_t n)\n {\n   traits::set  (data () + pos, c, n);\n }\n \n-template <class charT, class traits>\n-basic_string <charT, traits>& basic_string <charT, traits>::\n-replace (size_t pos, size_t n1, size_t n2, charT c)\n+template <class charT, class traits, class Allocator>\n+basic_string <charT, traits, Allocator>& basic_string <charT, traits, Allocator>::\n+replace (size_type pos, size_type n1, size_type n2, charT c)\n {\n   const size_t len = length ();\n   OUTOFRANGE (pos > len);\n@@ -212,9 +224,9 @@ replace (size_t pos, size_t n1, size_t n2, charT c)\n   return *this;\n }\n \n-template <class charT, class traits>\n-void basic_string <charT, traits>::\n-resize (size_t n, charT c)\n+template <class charT, class traits, class Allocator>\n+void basic_string <charT, traits, Allocator>::\n+resize (size_type n, charT c)\n {\n   LENGTHERROR (n > max_size ());\n \n@@ -224,9 +236,10 @@ resize (size_t n, charT c)\n     erase (n);\n }\n \n-template <class charT, class traits>\n-size_t basic_string <charT, traits>::\n-copy (charT* s, size_t n, size_t pos)\n+template <class charT, class traits, class Allocator>\n+basic_string <charT, traits, Allocator>::size_type\n+basic_string <charT, traits, Allocator>::\n+copy (charT* s, size_type n, size_type pos)\n {\n   OUTOFRANGE (pos > length ());\n \n@@ -237,9 +250,10 @@ copy (charT* s, size_t n, size_t pos)\n   return n;\n }\n \n-template <class charT, class traits>\n-size_t basic_string <charT, traits>::\n-find (const charT* s, size_t pos, size_t n) const\n+template <class charT, class traits, class Allocator>\n+basic_string <charT, traits, Allocator>::size_type\n+basic_string <charT, traits, Allocator>::\n+find (const charT* s, size_type pos, size_type n) const\n {\n   size_t xpos = pos;\n   for (; xpos + n <= length (); ++xpos)\n@@ -249,26 +263,29 @@ find (const charT* s, size_t pos, size_t n) const\n   return npos;\n }\n \n-template <class charT, class traits>\n-inline size_t basic_string <charT, traits>::\n-_find (const charT* ptr, charT c, size_t xpos, size_t len)\n+template <class charT, class traits, class Allocator>\n+inline basic_string <charT, traits, Allocator>::size_type\n+basic_string <charT, traits, Allocator>::\n+_find (const charT* ptr, charT c, size_type xpos, size_type len)\n {\n   for (; xpos < len; ++xpos)\n     if (traits::eq (ptr [xpos], c))\n       return xpos;\n   return npos;\n }\n \n-template <class charT, class traits>\n-size_t basic_string <charT, traits>::\n-find (charT c, size_t pos) const\n+template <class charT, class traits, class Allocator>\n+basic_string <charT, traits, Allocator>::size_type\n+basic_string <charT, traits, Allocator>::\n+find (charT c, size_type pos) const\n {\n   return _find (data (), c, pos, length ());\n }\n \n-template <class charT, class traits>\n-size_t basic_string <charT, traits>::\n-rfind (const charT* s, size_t pos, size_t n) const\n+template <class charT, class traits, class Allocator>\n+basic_string <charT, traits, Allocator>::size_type\n+basic_string <charT, traits, Allocator>::\n+rfind (const charT* s, size_type pos, size_type n) const\n {\n   if (n > length ())\n     return npos;\n@@ -284,9 +301,10 @@ rfind (const charT* s, size_t pos, size_t n) const\n   return npos;\n }\n \n-template <class charT, class traits>\n-size_t basic_string <charT, traits>::\n-rfind (charT c, size_t pos) const\n+template <class charT, class traits, class Allocator>\n+basic_string <charT, traits, Allocator>::size_type\n+basic_string <charT, traits, Allocator>::\n+rfind (charT c, size_type pos) const\n {\n   if (1 > length ())\n     return npos;\n@@ -301,9 +319,10 @@ rfind (charT c, size_t pos) const\n   return npos;\n }\n \n-template <class charT, class traits>\n-size_t basic_string <charT, traits>::\n-find_first_of (const charT* s, size_t pos, size_t n) const\n+template <class charT, class traits, class Allocator>\n+basic_string <charT, traits, Allocator>::size_type\n+basic_string <charT, traits, Allocator>::\n+find_first_of (const charT* s, size_type pos, size_type n) const\n {\n   size_t xpos = pos;\n   for (; xpos < length (); ++xpos)\n@@ -312,9 +331,10 @@ find_first_of (const charT* s, size_t pos, size_t n) const\n   return npos;\n }\n \n-template <class charT, class traits>\n-size_t basic_string <charT, traits>::\n-find_last_of (const charT* s, size_t pos, size_t n) const\n+template <class charT, class traits, class Allocator>\n+basic_string <charT, traits, Allocator>::size_type\n+basic_string <charT, traits, Allocator>::\n+find_last_of (const charT* s, size_type pos, size_type n) const\n {\n   size_t xpos = length () - 1;\n   if (xpos > pos)\n@@ -325,9 +345,10 @@ find_last_of (const charT* s, size_t pos, size_t n) const\n   return npos;\n }\n \n-template <class charT, class traits>\n-size_t basic_string <charT, traits>::\n-find_first_not_of (const charT* s, size_t pos, size_t n) const\n+template <class charT, class traits, class Allocator>\n+basic_string <charT, traits, Allocator>::size_type\n+basic_string <charT, traits, Allocator>::\n+find_first_not_of (const charT* s, size_type pos, size_type n) const\n {\n   size_t xpos = pos;\n   for (; xpos < length (); ++xpos)\n@@ -336,9 +357,10 @@ find_first_not_of (const charT* s, size_t pos, size_t n) const\n   return npos;\n }\n \n-template <class charT, class traits>\n-size_t basic_string <charT, traits>::\n-find_first_not_of (charT c, size_t pos) const\n+template <class charT, class traits, class Allocator>\n+basic_string <charT, traits, Allocator>::size_type\n+basic_string <charT, traits, Allocator>::\n+find_first_not_of (charT c, size_type pos) const\n {\n   size_t xpos = pos;\n   for (; xpos < length (); ++xpos)\n@@ -347,9 +369,10 @@ find_first_not_of (charT c, size_t pos) const\n   return npos;\n }\n \n-template <class charT, class traits>\n-size_t basic_string <charT, traits>::\n-find_last_not_of (const charT* s, size_t pos, size_t n) const\n+template <class charT, class traits, class Allocator>\n+basic_string <charT, traits, Allocator>::size_type\n+basic_string <charT, traits, Allocator>::\n+find_last_not_of (const charT* s, size_type pos, size_type n) const\n {\n   size_t xpos = length () - 1;\n   if (xpos > pos)\n@@ -360,9 +383,10 @@ find_last_not_of (const charT* s, size_t pos, size_t n) const\n   return npos;\n }\n \n-template <class charT, class traits>\n-size_t basic_string <charT, traits>::\n-find_last_not_of (charT c, size_t pos) const\n+template <class charT, class traits, class Allocator>\n+basic_string <charT, traits, Allocator>::size_type\n+basic_string <charT, traits, Allocator>::\n+find_last_not_of (charT c, size_type pos) const\n {\n   size_t xpos = length () - 1;\n   if (xpos > pos)\n@@ -373,9 +397,9 @@ find_last_not_of (charT c, size_t pos) const\n   return npos;\n }\n \n-template <class charT, class traits>\n-int basic_string <charT, traits>::\n-compare (const basic_string& str, size_t pos, size_t n) const\n+template <class charT, class traits, class Allocator>\n+int basic_string <charT, traits, Allocator>::\n+compare (const basic_string& str, size_type pos, size_type n) const\n {\n   OUTOFRANGE (pos > length ());\n \n@@ -392,9 +416,9 @@ compare (const basic_string& str, size_t pos, size_t n) const\n   return (length () - pos) - str.length ();\n }\n \n-template <class charT, class traits>\n-int basic_string <charT, traits>::\n-compare (const charT* s, size_t pos, size_t n) const\n+template <class charT, class traits, class Allocator>\n+int basic_string <charT, traits, Allocator>::\n+compare (const charT* s, size_type pos, size_type n) const\n {\n   OUTOFRANGE (pos > length ());\n \n@@ -409,9 +433,9 @@ compare (const charT* s, size_t pos, size_t n) const\n \n #include <iostream.h>\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n istream &\n-operator>> (istream &is, basic_string <charT, traits> &s)\n+operator>> (istream &is, basic_string <charT, traits, Allocator> &s)\n {\n   int w = is.width (0);\n   if (is.ipfx0 ())\n@@ -444,16 +468,16 @@ operator>> (istream &is, basic_string <charT, traits> &s)\n   return is;\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n ostream &\n-operator<< (ostream &o, const basic_string <charT, traits>& s)\n+operator<< (ostream &o, const basic_string <charT, traits, Allocator>& s)\n {\n   return o.write (s.data (), s.length ());\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n istream&\n-getline (istream &is, basic_string <charT, traits>& s, charT delim)\n+getline (istream &is, basic_string <charT, traits, Allocator>& s, charT delim)\n {\n   if (is.ipfx1 ())\n     {\n@@ -494,22 +518,22 @@ getline (istream &is, basic_string <charT, traits>& s, charT delim)\n   return is;\n }\n \n-template <class charT, class traits>\n-basic_string <charT, traits>::Rep\n-basic_string<charT, traits>::nilRep = { 0, 0, 1 };\n+template <class charT, class traits, class Allocator>\n+basic_string <charT, traits, Allocator>::Rep\n+basic_string<charT, traits, Allocator>::nilRep = { 0, 0, 1 };\n \n-template <class charT, class traits>\n-const basic_string <charT, traits>::size_type\n-basic_string <charT, traits>::npos;\n+template <class charT, class traits, class Allocator>\n+const basic_string <charT, traits, Allocator>::size_type\n+basic_string <charT, traits, Allocator>::npos;\n \n #ifdef _G_ALLOC_CONTROL\n-template <class charT, class traits>\n-bool (*basic_string <charT, traits>::Rep::excess_slop) (size_t, size_t)\n-     = basic_string <charT, traits>::Rep::default_excess;\n+template <class charT, class traits, class Allocator>\n+bool (*basic_string <charT, traits, Allocator>::Rep::excess_slop) (size_t, size_t)\n+     = basic_string <charT, traits, Allocator>::Rep::default_excess;\n \n-template <class charT, class traits>\n-size_t (*basic_string <charT, traits>::Rep::frob_size) (size_t)\n-     = basic_string <charT, traits>::Rep::default_frob;\n+template <class charT, class traits, class Allocator>\n+size_t (*basic_string <charT, traits, Allocator>::Rep::frob_size) (size_t)\n+     = basic_string <charT, traits, Allocator>::Rep::default_frob;\n #endif\n \n } // extern \"C++\""}, {"sha": "5b1d651e00f0f4ffedefb8ca173c3b04b3a6b92a", "filename": "libstdc++/std/bastring.h", "status": "modified", "additions": 83, "deletions": 76, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef0de1177b5000d3dd444606b9bdbb736e3c6bf/libstdc%2B%2B%2Fstd%2Fbastring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef0de1177b5000d3dd444606b9bdbb736e3c6bf/libstdc%2B%2B%2Fstd%2Fbastring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fbastring.h?ref=4ef0de1177b5000d3dd444606b9bdbb736e3c6bf", "patch": "@@ -35,6 +35,9 @@\n #include <cstddef>\n #include <std/straits.h>\n \n+// NOTE : This does NOT conform to the draft standard and is likely to change\n+#include <alloc.h>\n+\n extern \"C++\" {\n class istream; class ostream;\n \n@@ -58,7 +61,8 @@ extern void __length_error (const char *);\n \n #endif\n \n-template <class charT, class traits = string_char_traits<charT> >\n+template <class charT, class traits = string_char_traits<charT>,\n+\t  class Allocator = alloc >\n class basic_string\n {\n private:\n@@ -72,6 +76,7 @@ class basic_string\n     void release () { if (--ref == 0) delete this; }\n \n     inline static void * operator new (size_t, size_t);\n+    inline static void operator delete (void *);\n     inline static Rep* create (size_t);\n     charT* clone ();\n \n@@ -102,8 +107,10 @@ class basic_string\n \n public:\n // types:\n-  typedef traits traits_type;\n-  typedef charT value_type;\n+  typedef\t   traits\t\ttraits_type;\n+  typedef typename traits::char_type\tvalue_type;\n+  typedef\t   Allocator\t\tallocator_type;\n+\n   typedef size_t size_type;\n   typedef ptrdiff_t difference_type;\n   typedef charT& reference;\n@@ -386,12 +393,12 @@ class basic_string\n };\n \n #ifdef __STL_MEMBER_TEMPLATES\n-template <class charT, class traits> template <class InputIterator>\n-basic_string <charT, traits>& basic_string <charT, traits>::\n+template <class charT, class traits, class Allocator> template <class InputIterator>\n+basic_string <charT, traits, Allocator>& basic_string <charT, traits, Allocator>::\n replace (iterator i1, iterator i2, InputIterator j1, InputIterator j2)\n #else\n-template <class charT, class traits>\n-basic_string <charT, traits>& basic_string <charT, traits>::\n+template <class charT, class traits, class Allocator>\n+basic_string <charT, traits, Allocator>& basic_string <charT, traits, Allocator>::\n replace (iterator i1, iterator i2, const_iterator j1, const_iterator j2)\n #endif\n {\n@@ -426,191 +433,191 @@ replace (iterator i1, iterator i2, const_iterator j1, const_iterator j2)\n   return *this;\n }\n \n-template <class charT, class traits>\n-inline basic_string <charT, traits>\n-operator+ (const basic_string <charT, traits>& lhs,\n-\t   const basic_string <charT, traits>& rhs)\n+template <class charT, class traits, class Allocator>\n+inline basic_string <charT, traits, Allocator>\n+operator+ (const basic_string <charT, traits, Allocator>& lhs,\n+\t   const basic_string <charT, traits, Allocator>& rhs)\n {\n-  basic_string <charT, traits> str (lhs);\n+  basic_string <charT, traits, Allocator> str (lhs);\n   str.append (rhs);\n   return str;\n }\n \n-template <class charT, class traits>\n-inline basic_string <charT, traits>\n-operator+ (const charT* lhs, const basic_string <charT, traits>& rhs)\n+template <class charT, class traits, class Allocator>\n+inline basic_string <charT, traits, Allocator>\n+operator+ (const charT* lhs, const basic_string <charT, traits, Allocator>& rhs)\n {\n-  basic_string <charT, traits> str (lhs);\n+  basic_string <charT, traits, Allocator> str (lhs);\n   str.append (rhs);\n   return str;\n }\n \n-template <class charT, class traits>\n-inline basic_string <charT, traits>\n-operator+ (charT lhs, const basic_string <charT, traits>& rhs)\n+template <class charT, class traits, class Allocator>\n+inline basic_string <charT, traits, Allocator>\n+operator+ (charT lhs, const basic_string <charT, traits, Allocator>& rhs)\n {\n-  basic_string <charT, traits> str (1, lhs);\n+  basic_string <charT, traits, Allocator> str (1, lhs);\n   str.append (rhs);\n   return str;\n }\n \n-template <class charT, class traits>\n-inline basic_string <charT, traits>\n-operator+ (const basic_string <charT, traits>& lhs, const charT* rhs)\n+template <class charT, class traits, class Allocator>\n+inline basic_string <charT, traits, Allocator>\n+operator+ (const basic_string <charT, traits, Allocator>& lhs, const charT* rhs)\n {\n-  basic_string <charT, traits> str (lhs);\n+  basic_string <charT, traits, Allocator> str (lhs);\n   str.append (rhs);\n   return str;\n }\n \n-template <class charT, class traits>\n-inline basic_string <charT, traits>\n-operator+ (const basic_string <charT, traits>& lhs, charT rhs)\n+template <class charT, class traits, class Allocator>\n+inline basic_string <charT, traits, Allocator>\n+operator+ (const basic_string <charT, traits, Allocator>& lhs, charT rhs)\n {\n-  basic_string <charT, traits> str (lhs);\n+  basic_string <charT, traits, Allocator> str (lhs);\n   str.append (1, rhs);\n   return str;\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator== (const basic_string <charT, traits>& lhs,\n-\t    const basic_string <charT, traits>& rhs)\n+operator== (const basic_string <charT, traits, Allocator>& lhs,\n+\t    const basic_string <charT, traits, Allocator>& rhs)\n {\n   return (lhs.compare (rhs) == 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator== (const charT* lhs, const basic_string <charT, traits>& rhs)\n+operator== (const charT* lhs, const basic_string <charT, traits, Allocator>& rhs)\n {\n   return (rhs.compare (lhs) == 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator== (const basic_string <charT, traits>& lhs, const charT* rhs)\n+operator== (const basic_string <charT, traits, Allocator>& lhs, const charT* rhs)\n {\n   return (lhs.compare (rhs) == 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator!= (const charT* lhs, const basic_string <charT, traits>& rhs)\n+operator!= (const charT* lhs, const basic_string <charT, traits, Allocator>& rhs)\n {\n   return (rhs.compare (lhs) != 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator!= (const basic_string <charT, traits>& lhs, const charT* rhs)\n+operator!= (const basic_string <charT, traits, Allocator>& lhs, const charT* rhs)\n {\n   return (lhs.compare (rhs) != 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator< (const basic_string <charT, traits>& lhs,\n-\t    const basic_string <charT, traits>& rhs)\n+operator< (const basic_string <charT, traits, Allocator>& lhs,\n+\t    const basic_string <charT, traits, Allocator>& rhs)\n {\n   return (lhs.compare (rhs) < 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator< (const charT* lhs, const basic_string <charT, traits>& rhs)\n+operator< (const charT* lhs, const basic_string <charT, traits, Allocator>& rhs)\n {\n   return (rhs.compare (lhs) > 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator< (const basic_string <charT, traits>& lhs, const charT* rhs)\n+operator< (const basic_string <charT, traits, Allocator>& lhs, const charT* rhs)\n {\n   return (lhs.compare (rhs) < 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator> (const charT* lhs, const basic_string <charT, traits>& rhs)\n+operator> (const charT* lhs, const basic_string <charT, traits, Allocator>& rhs)\n {\n   return (rhs.compare (lhs) < 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator> (const basic_string <charT, traits>& lhs, const charT* rhs)\n+operator> (const basic_string <charT, traits, Allocator>& lhs, const charT* rhs)\n {\n   return (lhs.compare (rhs) > 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator<= (const charT* lhs, const basic_string <charT, traits>& rhs)\n+operator<= (const charT* lhs, const basic_string <charT, traits, Allocator>& rhs)\n {\n   return (rhs.compare (lhs) >= 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator<= (const basic_string <charT, traits>& lhs, const charT* rhs)\n+operator<= (const basic_string <charT, traits, Allocator>& lhs, const charT* rhs)\n {\n   return (lhs.compare (rhs) <= 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator>= (const charT* lhs, const basic_string <charT, traits>& rhs)\n+operator>= (const charT* lhs, const basic_string <charT, traits, Allocator>& rhs)\n {\n   return (rhs.compare (lhs) <= 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator>= (const basic_string <charT, traits>& lhs, const charT* rhs)\n+operator>= (const basic_string <charT, traits, Allocator>& lhs, const charT* rhs)\n {\n   return (lhs.compare (rhs) >= 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator!= (const basic_string <charT, traits>& lhs,\n-\t    const basic_string <charT, traits>& rhs)\n+operator!= (const basic_string <charT, traits, Allocator>& lhs,\n+\t    const basic_string <charT, traits, Allocator>& rhs)\n {\n   return (lhs.compare (rhs) != 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator> (const basic_string <charT, traits>& lhs,\n-\t   const basic_string <charT, traits>& rhs)\n+operator> (const basic_string <charT, traits, Allocator>& lhs,\n+\t   const basic_string <charT, traits, Allocator>& rhs)\n {\n   return (lhs.compare (rhs) > 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator<= (const basic_string <charT, traits>& lhs,\n-\t    const basic_string <charT, traits>& rhs)\n+operator<= (const basic_string <charT, traits, Allocator>& lhs,\n+\t    const basic_string <charT, traits, Allocator>& rhs)\n {\n   return (lhs.compare (rhs) <= 0);\n }\n \n-template <class charT, class traits>\n+template <class charT, class traits, class Allocator>\n inline bool\n-operator>= (const basic_string <charT, traits>& lhs,\n-\t    const basic_string <charT, traits>& rhs)\n+operator>= (const basic_string <charT, traits, Allocator>& lhs,\n+\t    const basic_string <charT, traits, Allocator>& rhs)\n {\n   return (lhs.compare (rhs) >= 0);\n }\n \n class istream; class ostream;\n-template <class charT, class traits> istream&\n-operator>> (istream&, basic_string <charT, traits>&);\n-template <class charT, class traits> ostream&\n-operator<< (ostream&, const basic_string <charT, traits>&);\n-template <class charT, class traits> istream&\n-getline (istream&, basic_string <charT, traits>&, charT delim = '\\n');\n+template <class charT, class traits, class Allocator> istream&\n+operator>> (istream&, basic_string <charT, traits, Allocator>&);\n+template <class charT, class traits, class Allocator> ostream&\n+operator<< (ostream&, const basic_string <charT, traits, Allocator>&);\n+template <class charT, class traits, class Allocator> istream&\n+getline (istream&, basic_string <charT, traits, Allocator>&, charT delim = '\\n');\n \n } // extern \"C++\"\n "}, {"sha": "b71dc7ea09a3a1d291b1970c5230a5c78ec8986c", "filename": "libstdc++/stlinst.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef0de1177b5000d3dd444606b9bdbb736e3c6bf/libstdc%2B%2B%2Fstlinst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef0de1177b5000d3dd444606b9bdbb736e3c6bf/libstdc%2B%2B%2Fstlinst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstlinst.cc?ref=4ef0de1177b5000d3dd444606b9bdbb736e3c6bf", "patch": "@@ -3,6 +3,6 @@\n \n #include <alloc.h>\n \n-template class __default_alloc_template<false, 0>;\n+template class __default_alloc_template<__NODE_ALLOCATOR_THREADS, 0>;\n \n template class  __malloc_alloc_template<0>;"}]}