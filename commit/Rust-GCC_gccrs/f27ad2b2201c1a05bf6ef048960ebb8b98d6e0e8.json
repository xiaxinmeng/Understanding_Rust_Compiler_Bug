{"sha": "f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI3YWQyYjIyMDFjMWEwNWJmNmVmMDQ4OTYwZWJiOGI5OGQ2ZTBlOA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-01-24T15:18:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-24T15:18:46Z"}, "message": "back_end.adb: Remove Short_Enums handling (handled in Ttypes/Get_Targ now) Minor added comments.\n\n2014-01-24  Robert Dewar  <dewar@adacore.com>\n\n\t* back_end.adb: Remove Short_Enums handling (handled in\n\tTtypes/Get_Targ now) Minor added comments.\n\t* freeze.adb: Change name Short_Enums_On_Target to\n\tTarget_Short_Enums.\n\t* get_targ.ads, get_targ.adb (Get_Short_Enums): New function.\n\t* opt.ads: Minor comment updates.\n\t* sem_ch13.adb: Change name Short_Enums_On_Target to\n\tTarget_Short_Enums.\n\t* set_targ.adb: Set Short_Enums from gcc back end.\n\t* set_targ.ads (Short_Enums): New variable.\n\t* targparm.ads, targparm.adb: Remove Short_Enums entries (handled in\n\tTtypes/Get_Targ now).\n\t* ttypes.ads (Target_Short_Enums): New constant boolean switch\n\nFrom-SVN: r207045", "tree": {"sha": "f64632f4ed17e9fcf165d2add6a0ad9ad98bc2c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f64632f4ed17e9fcf165d2add6a0ad9ad98bc2c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/comments", "author": null, "committer": null, "parents": [{"sha": "dd6ab508322d8e05e689777dec7be4d186107127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd6ab508322d8e05e689777dec7be4d186107127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd6ab508322d8e05e689777dec7be4d186107127"}], "stats": {"total": 106, "additions": 60, "deletions": 46}, "files": [{"sha": "686e96e7b8e879c20899db500fbc2cb82346d9fb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8", "patch": "@@ -1,3 +1,19 @@\n+2014-01-24  Robert Dewar  <dewar@adacore.com>\n+\n+\t* back_end.adb: Remove Short_Enums handling (handled in\n+\tTtypes/Get_Targ now) Minor added comments.\n+\t* freeze.adb: Change name Short_Enums_On_Target to\n+\tTarget_Short_Enums.\n+\t* get_targ.ads, get_targ.adb (Get_Short_Enums): New function.\n+\t* opt.ads: Minor comment updates.\n+\t* sem_ch13.adb: Change name Short_Enums_On_Target to\n+\tTarget_Short_Enums.\n+\t* set_targ.adb: Set Short_Enums from gcc back end.\n+\t* set_targ.ads (Short_Enums): New variable.\n+\t* targparm.ads, targparm.adb: Remove Short_Enums entries (handled in\n+\tTtypes/Get_Targ now).\n+\t* ttypes.ads (Target_Short_Enums): New constant boolean switch\n+\n 2014-01-24  Pascal Obry  <obry@adacore.com>\n \n \t* g-sercom-mingw.adb: Fix serial port name for port number > 10."}, {"sha": "a466686527e60dcb2fadddee1c1d1ae085d010d7", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8", "patch": "@@ -40,7 +40,6 @@ with Switch;    use Switch;\n with Switch.C;  use Switch.C;\n with System;    use System;\n with Types;     use Types;\n-with Targparm;\n \n with System.OS_Lib; use System.OS_Lib;\n \n@@ -54,10 +53,6 @@ package body Back_End is\n    pragma Import (C, flag_stack_check);\n    --  Indicates if stack checking is enabled, imported from misc.c\n \n-   flag_short_enums : Int;\n-   pragma Import (C, flag_short_enums);\n-   --  Indicates if C enumerations are packed, imported from misc.c\n-\n    save_argc : Nat;\n    pragma Import (C, save_argc);\n    --  Saved value of argc (number of arguments), imported from misc.c\n@@ -263,16 +258,13 @@ package body Back_End is\n    --  Start of processing for Scan_Compiler_Arguments\n \n    begin\n-      --  Acquire stack checking mode directly from GCC\n+      --  Acquire stack checking mode directly from GCC. The reason we do this\n+      --  is to make sure that the indication of stack checking being enabled\n+      --  is the same in the front end and the back end. This status obtained\n+      --  from gcc is affected by more than just the switch -fstack-check.\n \n       Opt.Stack_Checking_Enabled := (flag_stack_check /= 0);\n \n-      --  Acquire short enums flag directly from GCC\n-      --  This needs documentation in the spec ???\n-      --  So does the one above! ???\n-\n-      Targparm.Short_Enums_On_Target := (flag_short_enums /= 0);\n-\n       --  Put the arguments in Args\n \n       for Arg in Pos range 1 .. save_argc - 1 loop"}, {"sha": "4dd7347eebc9626681d527b6773fa5be643d04f4", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8", "patch": "@@ -5278,7 +5278,7 @@ package body Freeze is\n \n         --  Don't do this if Short_Enums on target\n \n-        and then not Short_Enums_On_Target\n+        and then not Target_Short_Enums\n       then\n          Init_Esize (Typ, Standard_Integer_Size);\n          Set_Alignment (Typ, Alignment (Standard_Integer));\n@@ -5301,7 +5301,7 @@ package body Freeze is\n \n            --  Don't do this if Short_Enums on target\n \n-           and then not Short_Enums_On_Target\n+           and then not Target_Short_Enums\n          then\n             Error_Msg_N\n               (\"C enum types have the size of a C int??\", Size_Clause (Typ));"}, {"sha": "661f95b5ab3f685b3532d10c65a33686813c9993", "filename": "gcc/ada/get_targ.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Fget_targ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Fget_targ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_targ.adb?ref=f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8", "patch": "@@ -23,6 +23,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  Version for use with gcc\n+\n package body Get_Targ is\n \n    --  Functions returning individual runtime. For the standard (GCC) back\n@@ -232,6 +234,17 @@ package body Get_Targ is\n       return C_Get_Bits_BE;\n    end Get_Bits_BE;\n \n+   ---------------------\n+   -- Get_Short_Enums --\n+   ---------------------\n+\n+   function Get_Short_Enums return Int is\n+      flag_short_enums : Int;\n+      pragma Import (C, flag_short_enums);\n+   begin\n+      return flag_short_enums;\n+   end Get_Short_Enums;\n+\n    --------------------------\n    -- Get_Strict_Alignment --\n    --------------------------"}, {"sha": "19f5385e12f355491c33fb7253aa90e2fa0f999c", "filename": "gcc/ada/get_targ.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Fget_targ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Fget_targ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_targ.ads?ref=f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8", "patch": "@@ -108,6 +108,13 @@ package Get_Targ is\n    --  Alignment required for Long_Long_Integer or larger integer types\n    --  or 0 if no special requirement.\n \n+   function Get_Short_Enums                return Int;\n+   --  Returns non-zero if we are in short enums mode, where foreign convention\n+   --  (in particular C and C++) enumeration types will be sized as in Ada,\n+   --  using the shortest possibility from 8,16,32 bits, signed or unsigned.\n+   --  A zero value means Short_Enums are not in use, and in this case all\n+   --  foreign convention enumeration types are given the same size as c int.\n+\n    --  Other subprograms\n \n    function Get_Max_Unaligned_Field return Pos;"}, {"sha": "28d12207677e52d42c87baf6768a0b784e22ef8d", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8", "patch": "@@ -1290,17 +1290,14 @@ package Opt is\n \n    Sprint_Line_Limit : Nat := 72;\n    --  GNAT\n-   --  Limit values for chopping long lines in Sprint output, can be reset\n-   --  by use of NNN parameter with -gnatG or -gnatD switches.\n+   --  Limit values for chopping long lines in Sprint output, can be reset by\n+   --  use of NNN parameter with -gnatG or -gnatD switches.\n \n-   Stack_Checking_Enabled : Boolean;\n+   Stack_Checking_Enabled : Boolean := False;\n    --  GNAT\n-   --  Set to indicate if -fstack-check switch is set for the compilation. True\n-   --  means that the switch is set, so that stack checking is enabled. False\n-   --  means that the switch is not set (no stack checking). This value is\n-   --  obtained from the external imported value flag_stack_check in the gcc\n-   --  backend (see Frontend) and may be referenced throughout the compilation\n-   --  phases.\n+   --  Set to indicate if stack checking is enabled for the compilation. This\n+   --  is set directly from the value in the gcc back end in the body of the\n+   --  gcc version of back_end.adb.\n \n    Style_Check : Boolean := False;\n    --  GNAT"}, {"sha": "61db885924cec641b332a07ceece50435bc32d31", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8", "patch": "@@ -10793,7 +10793,7 @@ package body Sem_Ch13 is\n \n         --  Don't do this if Short_Enums on target\n \n-        and then not Short_Enums_On_Target\n+        and then not Target_Short_Enums\n       then\n          Init_Esize (T, Standard_Integer_Size);\n       else"}, {"sha": "0dc9b839b25caa09b6afdf03e0ed4543a765bab1", "filename": "gcc/ada/set_targ.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Fset_targ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Fset_targ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fset_targ.adb?ref=f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8", "patch": "@@ -60,6 +60,7 @@ package body Set_Targ is\n    S_Maximum_Alignment          : constant Str := \"Maximum_Alignment\";\n    S_Max_Unaligned_Field        : constant Str := \"Max_Unaligned_Field\";\n    S_Pointer_Size               : constant Str := \"Pointer_Size\";\n+   S_Short_Enums                : constant Str := \"Short_Enums\";\n    S_Short_Size                 : constant Str := \"Short_Size\";\n    S_Strict_Alignment           : constant Str := \"Strict_Alignment\";\n    S_System_Allocator_Alignment : constant Str := \"System_Allocator_Alignment\";\n@@ -88,6 +89,7 @@ package body Set_Targ is\n           S_Maximum_Alignment          'Unrestricted_Access,\n           S_Max_Unaligned_Field        'Unrestricted_Access,\n           S_Pointer_Size               'Unrestricted_Access,\n+          S_Short_Enums                'Unrestricted_Access,\n           S_Short_Size                 'Unrestricted_Access,\n           S_Strict_Alignment           'Unrestricted_Access,\n           S_System_Allocator_Alignment 'Unrestricted_Access,\n@@ -114,6 +116,7 @@ package body Set_Targ is\n           Maximum_Alignment          'Address,\n           Max_Unaligned_Field        'Address,\n           Pointer_Size               'Address,\n+          Short_Enums                'Address,\n           Short_Size                 'Address,\n           Strict_Alignment           'Address,\n           System_Allocator_Alignment 'Address,"}, {"sha": "62008cd5b4e06c2d215ad21e0fe180e2836046a9", "filename": "gcc/ada/set_targ.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Fset_targ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Fset_targ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fset_targ.ads?ref=f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8", "patch": "@@ -75,6 +75,7 @@ package Set_Targ is\n    Maximum_Alignment          : Pos; -- Maximum permitted alignment\n    Max_Unaligned_Field        : Pos; -- Maximum size for unaligned bit field\n    Pointer_Size               : Pos; -- System.Address'Size\n+   Short_Enums                : Nat; -- Foreign enums use short size?\n    Short_Size                 : Pos; -- Standard.Short_Integer'Size\n    Strict_Alignment           : Nat; -- Strict alignment?\n    System_Allocator_Alignment : Nat; -- Alignment for malloc calls"}, {"sha": "3357c5dfe0eeb31a9c983926ac91411bb05d281b", "filename": "gcc/ada/targparm.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Ftargparm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Ftargparm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.adb?ref=f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8", "patch": "@@ -63,7 +63,6 @@ package body Targparm is\n       SCD,  --   Stack_Check_Default\n       SCL,  --   Stack_Check_Limits\n       SCP,  --   Stack_Check_Probes\n-      SHE,  --   Short_Enums\n       SLS,  --   Support_Long_Shifts\n       SNZ,  --   Signed_Zeros\n       SSL,  --   Suppress_Standard_Library\n@@ -102,7 +101,6 @@ package body Targparm is\n    SCD_Str : aliased constant Source_Buffer := \"Stack_Check_Default\";\n    SCL_Str : aliased constant Source_Buffer := \"Stack_Check_Limits\";\n    SCP_Str : aliased constant Source_Buffer := \"Stack_Check_Probes\";\n-   SHE_Str : aliased constant Source_Buffer := \"Short_Enums\";\n    SLS_Str : aliased constant Source_Buffer := \"Support_Long_Shifts\";\n    SNZ_Str : aliased constant Source_Buffer := \"Signed_Zeros\";\n    SSL_Str : aliased constant Source_Buffer := \"Suppress_Standard_Library\";\n@@ -141,7 +139,6 @@ package body Targparm is\n       SCD_Str'Access,\n       SCL_Str'Access,\n       SCP_Str'Access,\n-      SHE_Str'Access,\n       SLS_Str'Access,\n       SNZ_Str'Access,\n       SSL_Str'Access,\n@@ -612,7 +609,6 @@ package body Targparm is\n                      when SCD => Stack_Check_Default_On_Target       := Result;\n                      when SCL => Stack_Check_Limits_On_Target        := Result;\n                      when SCP => Stack_Check_Probes_On_Target        := Result;\n-                     when SHE => Short_Enums_On_Target               := Result;\n                      when SLS => Support_Long_Shifts_On_Target       := Result;\n                      when SSL => Suppress_Standard_Library_On_Target := Result;\n                      when SNZ => Signed_Zeros_On_Target              := Result;"}, {"sha": "11c7a7edfb36fab778cab26fb9e889b69c21fb91", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8", "patch": "@@ -605,24 +605,6 @@ package Targparm is\n    Frontend_Layout_On_Target : Boolean := False;\n    --  Set True if front end does layout\n \n-   Short_Enums_On_Target : Boolean := False;\n-   --  In most C ABI's, enumeration types always have int size. If this switch\n-   --  is False, which is the default, that's what the front end implements for\n-   --  enumeration types with a foreign convention (includ C and C++). However\n-   --  on some ABI's (notably the ARM-EABI), enumeration types have sizes that\n-   --  are minimal for the range of values. For such cases this switch is set\n-   --  True (in the appropriate System file), and the front-end uses the normal\n-   --  Ada rules for sizing enumeration types (which correspond to this method\n-   --  of selecting the shortest signed or unsigned integer representation that\n-   --  can accomodate the number of items in the type, or the range of values\n-   --  if an enumeration representation clause is used.\n-   --  the same size as C int, or Ada Integer. That's the most common case, but\n-   --  there are targets (most notably those following the ARM-EABI) where the\n-   --  size for enumeration types is the same as in Ada (i.e. the smallest\n-   --  integer type that accomodates the number of enumeration choices, or the\n-   --  range of values in an enumeration-representation clause). For such cases\n-   --  this switch is set to False in the corresponding System file.\n-\n    -----------------\n    -- Subprograms --\n    -----------------"}, {"sha": "efeea41965d5e92de11e2e007def55918183b1b0", "filename": "gcc/ada/ttypes.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Fttypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8/gcc%2Fada%2Fttypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fttypes.ads?ref=f27ad2b2201c1a05bf6ef048960ebb8b98d6e0e8", "patch": "@@ -224,6 +224,13 @@ package Ttypes is\n    --  and thus relevant only to the back end. Note that this is a variable\n    --  rather than a constant, since it can be modified (flipped) by -gnatd8.\n \n+   Target_Short_Enums : constant Boolean := Set_Targ.Short_Enums /= 0;\n+   --  True if we are in short enums mode, where foreign convention\n+   --  (in particular C and C++) enumeration types will be sized as in Ada,\n+   --  using the shortest possibility from 8,16,32 bits, signed or unsigned.\n+   --  A zero value means Short_Enums are not in use, and in this case all\n+   --  foreign convention enumeration types are given the same size as c int.\n+\n    Target_Strict_Alignment : Boolean :=\n                                Set_Targ.Strict_Alignment /= 0;\n    --  True if instructions will fail if data is misaligned. Note that this"}]}