{"sha": "85a40c43fb6f09054f535bae43e8622c971bcc48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVhNDBjNDNmYjZmMDkwNTRmNTM1YmFlNDNlODYyMmM5NzFiY2M0OA==", "commit": {"author": {"name": "Jose Ruiz", "email": "ruiz@adacore.com", "date": "2006-02-15T09:28:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:28:13Z"}, "message": "a-taster.adb (Current_Task_Fallback_Handler): Document why explicit protection against race conditions is not needed.\n\n2006-02-13  Jose Ruiz  <ruiz@adacore.com>\n\n\t* a-taster.adb (Current_Task_Fallback_Handler): Document why explicit\n\tprotection against race conditions is not needed.\n\t(Set_Dependents_Fallback_Handler): Add mutual exclusive access to the\n\tfallback handler.\n\t(Set_Specific_Handler): Add mutual exclusive access to the specific\n\thandler.\n\t(Specific_Handler): Add mutual exclusive access for retrieving the\n\tspecific handler.\n\n\t* s-tarest.adb (Task_Wrapper): Add mutual exclusive access to the fall\n\tback handler.\n\n\t* s-taskin.ads (Common_ATCB): Remove pragma Atomic for\n\tFall_Back_Handler and Specific_Handler.\n\n\t* s-tassta.adb (Task_Wrapper): Add mutual exclusive access to the task\n\ttermination handlers.\n\tSet two different owerflow depending on the maximal stack size.\n\n\t* s-solita.adb (Task_Termination_Handler_T): Document why explicit\n\tprotection against race conditions is not needed when executing the\n\ttask termination handler.\n\nFrom-SVN: r111022", "tree": {"sha": "ff0fc56323a0b3142eb004ad33e55efe4c4a9b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff0fc56323a0b3142eb004ad33e55efe4c4a9b4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85a40c43fb6f09054f535bae43e8622c971bcc48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a40c43fb6f09054f535bae43e8622c971bcc48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a40c43fb6f09054f535bae43e8622c971bcc48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a40c43fb6f09054f535bae43e8622c971bcc48/comments", "author": {"login": "JoseRuizAdaCore", "id": 22770339, "node_id": "MDQ6VXNlcjIyNzcwMzM5", "avatar_url": "https://avatars.githubusercontent.com/u/22770339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoseRuizAdaCore", "html_url": "https://github.com/JoseRuizAdaCore", "followers_url": "https://api.github.com/users/JoseRuizAdaCore/followers", "following_url": "https://api.github.com/users/JoseRuizAdaCore/following{/other_user}", "gists_url": "https://api.github.com/users/JoseRuizAdaCore/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoseRuizAdaCore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoseRuizAdaCore/subscriptions", "organizations_url": "https://api.github.com/users/JoseRuizAdaCore/orgs", "repos_url": "https://api.github.com/users/JoseRuizAdaCore/repos", "events_url": "https://api.github.com/users/JoseRuizAdaCore/events{/privacy}", "received_events_url": "https://api.github.com/users/JoseRuizAdaCore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed50c9d24adb0eebefce8f67091e8505a546fee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed50c9d24adb0eebefce8f67091e8505a546fee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed50c9d24adb0eebefce8f67091e8505a546fee9"}], "stats": {"total": 217, "additions": 173, "deletions": 44}, "files": [{"sha": "8b0be0a22f616b8183bb1229b957fbe98dce418c", "filename": "gcc/ada/a-taster.adb", "status": "modified", "additions": 86, "deletions": 5, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a40c43fb6f09054f535bae43e8622c971bcc48/gcc%2Fada%2Fa-taster.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a40c43fb6f09054f535bae43e8622c971bcc48/gcc%2Fada%2Fa-taster.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-taster.adb?ref=85a40c43fb6f09054f535bae43e8622c971bcc48", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 2005, Free Software Foundation, Inc.            --\n+--          Copyright (C) 2005-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -40,6 +40,17 @@ with System.Tasking;\n \n with System.Task_Primitives.Operations;\n --  used for Self\n+--           Write_Lock\n+--           Unlock\n+--           Lock_RTS\n+--           Unlock_RTS\n+\n+with System.Parameters;\n+--  used for Single_Lock\n+\n+with System.Soft_Links;\n+--  use for Abort_Defer\n+--          Abort_Undefer\n \n with Unchecked_Conversion;\n \n@@ -48,6 +59,9 @@ package body Ada.Task_Termination is\n    use type Ada.Task_Identification.Task_Id;\n \n    package STPO renames System.Task_Primitives.Operations;\n+   package SSL  renames System.Soft_Links;\n+\n+   use System.Parameters;\n \n    -----------------------\n    -- Local subprograms --\n@@ -68,7 +82,11 @@ package body Ada.Task_Termination is\n \n    function Current_Task_Fallback_Handler return Termination_Handler is\n    begin\n-      return To_TT (System.Tasking.Self.Common.Fall_Back_Handler);\n+      --  There is no need for explicit protection against race conditions\n+      --  for this function because this function can only be executed by\n+      --  Self, and the Fall_Back_Handler can only be modified by Self.\n+\n+      return To_TT (STPO.Self.Common.Fall_Back_Handler);\n    end Current_Task_Fallback_Handler;\n \n    -------------------------------------\n@@ -78,8 +96,26 @@ package body Ada.Task_Termination is\n    procedure Set_Dependents_Fallback_Handler\n      (Handler : Termination_Handler)\n    is\n+      Self : constant System.Tasking.Task_Id := STPO.Self;\n+\n    begin\n-      STPO.Self.Common.Fall_Back_Handler := To_ST (Handler);\n+      SSL.Abort_Defer.all;\n+\n+      if Single_Lock then\n+         STPO.Lock_RTS;\n+      end if;\n+\n+      STPO.Write_Lock (Self);\n+\n+      Self.Common.Fall_Back_Handler := To_ST (Handler);\n+\n+      STPO.Unlock (Self);\n+\n+      if Single_Lock then\n+         STPO.Unlock_RTS;\n+      end if;\n+\n+      SSL.Abort_Undefer.all;\n    end Set_Dependents_Fallback_Handler;\n \n    --------------------------\n@@ -100,7 +136,28 @@ package body Ada.Task_Termination is\n       elsif Ada.Task_Identification.Is_Terminated (T) then\n          raise Tasking_Error;\n       else\n-         To_Task_Id (T).Common.Specific_Handler := To_ST (Handler);\n+         declare\n+            Target : constant System.Tasking.Task_Id := To_Task_Id (T);\n+\n+         begin\n+            SSL.Abort_Defer.all;\n+\n+            if Single_Lock then\n+               STPO.Lock_RTS;\n+            end if;\n+\n+            STPO.Write_Lock (Target);\n+\n+            Target.Common.Specific_Handler := To_ST (Handler);\n+\n+            STPO.Unlock (Target);\n+\n+            if Single_Lock then\n+               STPO.Unlock_RTS;\n+            end if;\n+\n+            SSL.Abort_Undefer.all;\n+         end;\n       end if;\n    end Set_Specific_Handler;\n \n@@ -121,7 +178,31 @@ package body Ada.Task_Termination is\n       elsif Ada.Task_Identification.Is_Terminated (T) then\n          raise Tasking_Error;\n       else\n-         return To_TT (To_Task_Id (T).Common.Specific_Handler);\n+         declare\n+            Target : constant System.Tasking.Task_Id := To_Task_Id (T);\n+            TH     : Termination_Handler;\n+\n+         begin\n+            SSL.Abort_Defer.all;\n+\n+            if Single_Lock then\n+               STPO.Lock_RTS;\n+            end if;\n+\n+            STPO.Write_Lock (Target);\n+\n+            TH := To_TT (Target.Common.Specific_Handler);\n+\n+            STPO.Unlock (Target);\n+\n+            if Single_Lock then\n+               STPO.Unlock_RTS;\n+            end if;\n+\n+            SSL.Abort_Undefer.all;\n+\n+            return TH;\n+         end;\n       end if;\n    end Specific_Handler;\n "}, {"sha": "2bc279326329e107933b61cb126bedd8647dc73c", "filename": "gcc/ada/s-solita.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a40c43fb6f09054f535bae43e8622c971bcc48/gcc%2Fada%2Fs-solita.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a40c43fb6f09054f535bae43e8622c971bcc48/gcc%2Fada%2Fs-solita.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-solita.adb?ref=85a40c43fb6f09054f535bae43e8622c971bcc48", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -185,6 +185,10 @@ package body System.Soft_Links.Tasking is\n          Ada.Exceptions.Save_Occurrence (EO, Excep);\n       end if;\n \n+      --  There is no need for explicit protection against race conditions\n+      --  for this part because it can only be executed by the environment\n+      --  task after all the other tasks have been finalized.\n+\n       if Self_Id.Common.Specific_Handler /= null then\n          Self_Id.Common.Specific_Handler.all (Cause, Self_Id, EO);\n       elsif Self_Id.Common.Fall_Back_Handler /= null then"}, {"sha": "6c43d7ce9629cb7b321415dbc35e897675366e04", "filename": "gcc/ada/s-tarest.adb", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a40c43fb6f09054f535bae43e8622c971bcc48/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a40c43fb6f09054f535bae43e8622c971bcc48/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=85a40c43fb6f09054f535bae43e8622c971bcc48", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1999-2005, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1999-2006, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,13 +48,6 @@ pragma Polling (Off);\n with Ada.Exceptions;\n --  used for Exception_Occurrence\n \n-with System.Parameters;\n---  used for Size_Type\n---           Single_Lock\n-\n-with System.Task_Info;\n---  used for Task_Info_Type\n-\n with System.Task_Primitives.Operations;\n --  used for Enter_Task\n --           Write_Lock\n@@ -268,11 +261,38 @@ package body System.Tasking.Restricted.Stages is\n       --  neither task hierarchies (No_Task_Hierarchy) nor specific task\n       --  termination handlers (No_Specific_Termination_Handlers).\n \n+      --  There is no need for explicit protection against race conditions\n+      --  for Self_ID.Common.Fall_Back_Handler because this procedure can\n+      --  only be executed by Self, and the Fall_Back_Handler can only be\n+      --  modified by Self.\n+\n       if Self_ID.Common.Fall_Back_Handler /= null then\n-         Self_ID.Common.Fall_Back_Handler.all (Cause, Self_ID, EO);\n-      elsif Self_ID.Common.Parent.Common.Fall_Back_Handler /= null then\n-         Self_ID.Common.Parent.Common.Fall_Back_Handler.all\n-           (Cause, Self_ID, EO);\n+         Self_ID.Common.Fall_Back_Handler (Cause, Self_ID, EO);\n+      else\n+         declare\n+            TH : Termination_Handler := null;\n+\n+         begin\n+            if Single_Lock then\n+               Lock_RTS;\n+            end if;\n+\n+            Write_Lock (Self_ID.Common.Parent);\n+\n+            TH := Self_ID.Common.Parent.Common.Fall_Back_Handler;\n+\n+            Unlock (Self_ID.Common.Parent);\n+\n+            if Single_Lock then\n+               Unlock_RTS;\n+            end if;\n+\n+            --  Execute the task termination handler if we found it\n+\n+            if TH /= null then\n+               TH.all (Cause, Self_ID, EO);\n+            end if;\n+         end;\n       end if;\n \n       Terminate_Task (Self_ID);"}, {"sha": "26994efd2c9ac8327791363b389c436606a9ac9c", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a40c43fb6f09054f535bae43e8622c971bcc48/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a40c43fb6f09054f535bae43e8622c971bcc48/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=85a40c43fb6f09054f535bae43e8622c971bcc48", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -353,9 +353,9 @@ package System.Tasking is\n    --    raised by by the execution of its task_body.\n \n    type Termination_Handler is access protected procedure\n-     (Cause : in Cause_Of_Termination;\n-      T     : in Task_Id;\n-      X     : in Ada.Exceptions.Exception_Occurrence);\n+     (Cause : Cause_Of_Termination;\n+      T     : Task_Id;\n+      X     : Ada.Exceptions.Exception_Occurrence);\n    --  Used to represent protected procedures to be executed when task\n    --  terminates.\n \n@@ -375,7 +375,7 @@ package System.Tasking is\n \n    function Detect_Blocking return Boolean;\n    pragma Inline (Detect_Blocking);\n-   --  Return whether the Detect_Blocking pragma is enabled.\n+   --  Return whether the Detect_Blocking pragma is enabled\n \n    ----------------------------------------------\n    -- Ada_Task_Control_Block (ATCB) definition --\n@@ -571,7 +571,7 @@ package System.Tasking is\n       --  Task_Info pragma.\n \n       Analyzer  : System.Stack_Usage.Stack_Analyzer;\n-      --  For storing informations used to measure the stack usage.\n+      --  For storing informations used to measure the stack usage\n \n       Global_Task_Lock_Nesting : Natural;\n       --  This is the current nesting level of calls to\n@@ -583,18 +583,16 @@ package System.Tasking is\n       --  Protection: Only accessed by Self\n \n       Fall_Back_Handler : Termination_Handler;\n-      pragma Atomic (Fall_Back_Handler);\n       --  This is the fall-back handler that applies to the dependent tasks of\n       --  the task.\n       --\n-      --  Protection: atomic access\n+      --  Protection: Self.L\n \n       Specific_Handler : Termination_Handler;\n-      pragma Atomic (Specific_Handler);\n       --  This is the specific handler that applies only to this task, and not\n       --  any of its dependent tasks.\n       --\n-      --  Protection: atomic access\n+      --  Protection: Self.L\n    end record;\n \n    ---------------------------------------"}, {"sha": "38c1fca70edbd29154fd5e070bf2e458cb463f21", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a40c43fb6f09054f535bae43e8622c971bcc48/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a40c43fb6f09054f535bae43e8622c971bcc48/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=85a40c43fb6f09054f535bae43e8622c971bcc48", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2005, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,14 +44,6 @@ with System.Tasking.Debug;\n with System.Address_Image;\n --  Used for the function itself\n \n-with System.Parameters;\n---  Used for Size_Type\n---           Single_Lock\n---           Runtime_Traces\n-\n-with System.Task_Info;\n---  Used for Task_Info_Type\n-\n with System.Task_Primitives.Operations;\n --  Used for Finalize_Lock\n --           Enter_Task\n@@ -907,7 +899,11 @@ package body System.Tasking.Stages is\n       pragma Warnings (Off);\n       Secondary_Stack_Address : System.Address := Secondary_Stack'Address;\n \n-      Overflow_Guard          : constant := 16#1_000#;\n+      Small_Overflow_Guard    : constant := 4 * 1024;\n+      Big_Overflow_Guard      : constant := 16 * 1024;\n+      Small_Stack_Limit       : constant := 64 * 1024;\n+      --  ??? These three values are experimental, and seems to work on most\n+      --  platforms. They still need to be analyzed further.\n \n       Size :\n         Natural := Natural (Self_ID.Common.Compiler_Data.Pri_Stack_Info.Size);\n@@ -938,16 +934,22 @@ package body System.Tasking.Stages is\n       --  execution of its task body, then EO will contain the associated\n       --  exception occurrence. Otherwise, it will contain Null_Occurrence.\n \n+      TH : Termination_Handler := null;\n+      --  Pointer to the protected procedure to be executed upon task\n+      --  termination.\n+\n       procedure Search_Fall_Back_Handler (ID : Task_Id);\n       --  Procedure that searches recursively a fall-back handler through the\n-      --  master relationship.\n+      --  master relationship. If the handler is found, its pointer is stored\n+      --  in TH.\n \n       procedure Search_Fall_Back_Handler (ID : Task_Id) is\n       begin\n-         --  If there is a fall back handler, execute it\n+         --  If there is a fall back handler, store its pointer for later\n+         --  execution.\n \n          if ID.Common.Fall_Back_Handler /= null then\n-            ID.Common.Fall_Back_Handler.all (Cause, Self_ID, EO);\n+            TH := ID.Common.Fall_Back_Handler;\n \n          --  Otherwise look for a fall back handler in the parent\n \n@@ -964,15 +966,21 @@ package body System.Tasking.Stages is\n    begin\n       pragma Assert (Self_ID.Deferral_Level = 1);\n \n+      --  Assume a size of the stack taken at this stage\n+\n+      if Size < Small_Stack_Limit then\n+         Size := Size - Small_Overflow_Guard;\n+      else\n+         Size := Size - Big_Overflow_Guard;\n+      end if;\n+\n       if not Parameters.Sec_Stack_Dynamic then\n          Self_ID.Common.Compiler_Data.Sec_Stack_Addr :=\n            Secondary_Stack'Address;\n          SST.SS_Init (Secondary_Stack_Address, Integer (Secondary_Stack'Last));\n          Size := Size - Natural (Secondary_Stack_Size);\n       end if;\n \n-      Size := Size - Overflow_Guard;\n-\n       if System.Stack_Usage.Is_Enabled then\n          STPO.Lock_RTS;\n          Initialize_Analyzer (Self_ID.Common.Analyzer,\n@@ -1096,15 +1104,33 @@ package body System.Tasking.Stages is\n       --  the environment task. The task termination code for the environment\n       --  task is executed by SSL.Task_Termination_Handler.\n \n+      if Single_Lock then\n+         Lock_RTS;\n+      end if;\n+\n+      Write_Lock (Self_ID);\n+\n       if Self_ID.Common.Specific_Handler /= null then\n-         Self_ID.Common.Specific_Handler.all (Cause, Self_ID, EO);\n+         TH := Self_ID.Common.Specific_Handler;\n       else\n          --  Look for a fall-back handler following the master relationship\n          --  for the task.\n \n          Search_Fall_Back_Handler (Self_ID);\n       end if;\n \n+      Unlock (Self_ID);\n+\n+      if Single_Lock then\n+         Unlock_RTS;\n+      end if;\n+\n+      --  Execute the task termination handler if we found it\n+\n+      if TH /= null then\n+         TH.all (Cause, Self_ID, EO);\n+      end if;\n+\n       if System.Stack_Usage.Is_Enabled then\n          Compute_Result (Self_ID.Common.Analyzer);\n          Report_Result (Self_ID.Common.Analyzer);"}]}