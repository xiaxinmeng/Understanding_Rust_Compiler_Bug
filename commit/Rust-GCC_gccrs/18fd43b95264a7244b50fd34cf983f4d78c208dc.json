{"sha": "18fd43b95264a7244b50fd34cf983f4d78c208dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThmZDQzYjk1MjY0YTcyNDRiNTBmZDM0Y2Y5ODNmNGQ3OGMyMDhkYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-01-07T16:00:52Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-01-07T16:00:52Z"}, "message": "Fix ICE in get_initial_defs_for_reduction (PR 88567)\n\nThe use of \"j\" in:\n\n\t      init = permute_results[number_of_vectors - j - 1];\n\nwas out-of-sync with the new flat loop structure.  Now that all that\nreversing is gone, we can just use the result of duplicate_and_interleave\ndirectly.\n\nThe other cases shouldn't be affected by postponing the insertion\nof ctor_seq, since gimple_build* appends to the seq without clearing\nit first (unlike some of the gimplify routines).\n\nThe ICE is already covered by gcc.dg/vect/pr63379.c.\n\n2019-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR middle-end/88567\n\t* tree-vect-loop.c (get_initial_defs_for_reduction): Pass the\n\toutput vector directly to duplicate_and_interleave instead of\n\tgoing through a temporary.  Postpone insertion of ctor_seq to\n\tthe end of the loop.\n\nFrom-SVN: r267652", "tree": {"sha": "172176ce412363181232105e2e60d4016975e8a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/172176ce412363181232105e2e60d4016975e8a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18fd43b95264a7244b50fd34cf983f4d78c208dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18fd43b95264a7244b50fd34cf983f4d78c208dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18fd43b95264a7244b50fd34cf983f4d78c208dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18fd43b95264a7244b50fd34cf983f4d78c208dc/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e002afaa8e01395110c77de18bb7e0fa030ba019", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e002afaa8e01395110c77de18bb7e0fa030ba019", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e002afaa8e01395110c77de18bb7e0fa030ba019"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "c236588c23a5964ef7c012595fe137ec21520d7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fd43b95264a7244b50fd34cf983f4d78c208dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fd43b95264a7244b50fd34cf983f4d78c208dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18fd43b95264a7244b50fd34cf983f4d78c208dc", "patch": "@@ -1,3 +1,11 @@\n+2019-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/88567\n+\t* tree-vect-loop.c (get_initial_defs_for_reduction): Pass the\n+\toutput vector directly to duplicate_and_interleave instead of\n+\tgoing through a temporary.  Postpone insertion of ctor_seq to\n+\tthe end of the loop.\n+\n 2019-01-07  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/86891"}, {"sha": "afbf9a9901deaaf5ee5fa503879d259cce593043", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fd43b95264a7244b50fd34cf983f4d78c208dc/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fd43b95264a7244b50fd34cf983f4d78c208dc/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=18fd43b95264a7244b50fd34cf983f4d78c208dc", "patch": "@@ -4103,7 +4103,6 @@ get_initial_defs_for_reduction (slp_tree slp_node,\n   unsigned int group_size = stmts.length ();\n   unsigned int i;\n   struct loop *loop;\n-  auto_vec<tree, 16> permute_results;\n \n   vector_type = STMT_VINFO_VECTYPE (stmt_vinfo);\n \n@@ -4138,6 +4137,7 @@ get_initial_defs_for_reduction (slp_tree slp_node,\n   bool constant_p = true;\n   tree_vector_builder elts (vector_type, nunits, 1);\n   elts.quick_grow (nunits);\n+  gimple_seq ctor_seq = NULL;\n   for (j = 0; j < nunits * number_of_vectors; ++j)\n     {\n       tree op;\n@@ -4163,7 +4163,6 @@ get_initial_defs_for_reduction (slp_tree slp_node,\n \n       if (number_of_places_left_in_vector == 0)\n \t{\n-\t  gimple_seq ctor_seq = NULL;\n \t  tree init;\n \t  if (constant_p && !neutral_op\n \t      ? multiple_p (TYPE_VECTOR_SUBPARTS (vector_type), nunits)\n@@ -4189,16 +4188,11 @@ get_initial_defs_for_reduction (slp_tree slp_node,\n \t  else\n \t    {\n \t      /* First time round, duplicate ELTS to fill the\n-\t\t required number of vectors, then cherry pick the\n-\t\t appropriate result for each iteration.  */\n-\t      if (vec_oprnds->is_empty ())\n-\t\tduplicate_and_interleave (&ctor_seq, vector_type, elts,\n-\t\t\t\t\t  number_of_vectors,\n-\t\t\t\t\t  permute_results);\n-\t      init = permute_results[number_of_vectors - j - 1];\n+\t\t required number of vectors.  */\n+\t      duplicate_and_interleave (&ctor_seq, vector_type, elts,\n+\t\t\t\t\tnumber_of_vectors, *vec_oprnds);\n+\t      break;\n \t    }\n-\t  if (ctor_seq != NULL)\n-\t    gsi_insert_seq_on_edge_immediate (pe, ctor_seq);\n \t  vec_oprnds->quick_push (init);\n \n \t  number_of_places_left_in_vector = nunits;\n@@ -4207,6 +4201,8 @@ get_initial_defs_for_reduction (slp_tree slp_node,\n \t  constant_p = true;\n \t}\n     }\n+  if (ctor_seq != NULL)\n+    gsi_insert_seq_on_edge_immediate (pe, ctor_seq);\n }\n \n "}]}