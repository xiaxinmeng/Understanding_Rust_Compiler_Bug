{"sha": "fed2012bae24629914df855e05208385b04fcd38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVkMjAxMmJhZTI0NjI5OTE0ZGY4NTVlMDUyMDgzODViMDRmY2QzOA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-07-16T13:54:53Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-07-16T13:54:53Z"}, "message": "mn10300.md (movXX patterns): Make sure the destination is an ADDRESS_REG when...\n\n        * mn10300.md (movXX patterns): Make sure the destination is an\n        ADDRESS_REG when substituting \"zero_areg\" for (const_int 0).\n        (logical patterns): Split into expanders + patterns\n        (zero and sign extension patterns): Similarly.\n        (shift patterns): Similarly.\n\nFrom-SVN: r21214", "tree": {"sha": "bc180f60feb86952efc731cf0174854bafeb203f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc180f60feb86952efc731cf0174854bafeb203f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fed2012bae24629914df855e05208385b04fcd38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed2012bae24629914df855e05208385b04fcd38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fed2012bae24629914df855e05208385b04fcd38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed2012bae24629914df855e05208385b04fcd38/comments", "author": null, "committer": null, "parents": [{"sha": "52889bc8181bed43cc0dff3e285f57cff9b9d2ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52889bc8181bed43cc0dff3e285f57cff9b9d2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52889bc8181bed43cc0dff3e285f57cff9b9d2ab"}], "stats": {"total": 125, "additions": 110, "deletions": 15}, "files": [{"sha": "0162da67b2cb2d7dcce3a125ed9930d44c9ce69a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed2012bae24629914df855e05208385b04fcd38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed2012bae24629914df855e05208385b04fcd38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fed2012bae24629914df855e05208385b04fcd38", "patch": "@@ -1,3 +1,11 @@\n+Thu Jul 16 14:48:47 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* mn10300.md (movXX patterns): Make sure the destination is an\n+\tADDRESS_REG when substituting \"zero_areg\" for (const_int 0).\n+\t(logical patterns): Split into expanders + patterns\n+\t(zero and sign extension patterns): Similarly.\n+\t(shift patterns): Similarly.\n+\n Thu Jul 16 01:17:44 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* loop.c (emit_iv_add_mult): Scan the entire insn list generated"}, {"sha": "01cec17379cddb36e5a0e5ba4b2e4283181b7c9a", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 102, "deletions": 15, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed2012bae24629914df855e05208385b04fcd38/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed2012bae24629914df855e05208385b04fcd38/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=fed2012bae24629914df855e05208385b04fcd38", "patch": "@@ -410,7 +410,9 @@\n \t      {\n \t\tif (REGNO_REG_CLASS (REGNO (operands[0])) == DATA_REGS)\n \t\t  output_asm_insn (\\\"clr %L0\\\", operands);\n-\t        else if (zero_areg)\n+\t        else if (zero_areg\n+\t\t\t && (REGNO_REG_CLASS (REGNO (operands[0]))\n+\t\t\t     == ADDRESS_REGS))\n \t\t  {\n \t\t    rtx xoperands[2];\n \n@@ -433,7 +435,9 @@\n \t      {\n \t\tif (REGNO_REG_CLASS (REGNO (operands[0])) == DATA_REGS)\n \t\t  output_asm_insn (\\\"clr %H0\\\", operands);\n-\t\telse if (zero_areg)\n+\t        else if (zero_areg\n+\t\t\t && (REGNO_REG_CLASS (REGNO (operands[0]))\n+\t\t\t     == ADDRESS_REGS))\n \t\t  {\n \t\t    rtx xoperands[2];\n \n@@ -571,7 +575,9 @@\n \t      {\n \t\tif (REGNO_REG_CLASS (REGNO (operands[0])) == DATA_REGS)\n \t\t  output_asm_insn (\\\"clr %L0\\\", operands);\n-\t        else if (zero_areg)\n+\t        else if (zero_areg\n+\t\t\t && (REGNO_REG_CLASS (REGNO (operands[0]))\n+\t\t\t     == ADDRESS_REGS))\n \t\t  {\n \t\t    rtx xoperands[2];\n \n@@ -594,7 +600,9 @@\n \t      {\n \t\tif (REGNO_REG_CLASS (REGNO (operands[0])) == DATA_REGS)\n \t\t  output_asm_insn (\\\"clr %H0\\\", operands);\n-\t\telse if (zero_areg)\n+\t        else if (zero_areg\n+\t\t\t && (REGNO_REG_CLASS (REGNO (operands[0]))\n+\t\t\t     == ADDRESS_REGS))\n \t\t  {\n \t\t    rtx xoperands[2];\n \n@@ -821,7 +829,14 @@\n ;; AND INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n-(define_insn \"andsi3\"\n+(define_expand \"andsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(and:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t(match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=dx,dx\")\n \t(and:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n \t\t(match_operand:SI 2 \"nonmemory_operand\" \"N,dxi\")))]\n@@ -856,7 +871,14 @@\n ;; OR INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n-(define_insn \"iorsi3\"\n+(define_expand \"iorsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(ior:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t(match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=dx\")\n \t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t\t(match_operand:SI 2 \"nonmemory_operand\" \"dxi\")))]\n@@ -868,7 +890,14 @@\n ;; XOR INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n-(define_insn \"xorsi3\"\n+(define_expand \"xorsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(xor:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t(match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=dx\")\n \t(xor:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t\t(match_operand:SI 2 \"nonmemory_operand\" \"dxi\")))]\n@@ -880,7 +909,13 @@\n ;; NOT INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n-(define_insn \"one_cmplsi2\"\n+(define_expand \"one_cmplsi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(not:SI (match_operand:SI 1 \"register_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+ \n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=dx\")\n \t(not:SI (match_operand:SI 1 \"register_operand\" \"0\")))]\n   \"\"\n@@ -1271,7 +1306,14 @@\n ;; EXTEND INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n-(define_insn \"zero_extendqisi2\"\n+(define_expand \"zero_extendqisi2\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"\")\n+\t(zero_extend:SI\n+\t (match_operand:QI 1 \"general_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=dx,dx,dx\")\n \t(zero_extend:SI\n \t (match_operand:QI 1 \"general_operand\" \"0,d,m\")))]\n@@ -1282,7 +1324,14 @@\n   movbu %1,%0\"\n   [(set_attr \"cc\" \"none_0hit\")])\n \n-(define_insn \"zero_extendhisi2\"\n+(define_expand \"zero_extendhisi2\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"\")\n+\t(zero_extend:SI\n+\t (match_operand:HI 1 \"general_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=dx,dx,dx\")\n \t(zero_extend:SI\n \t (match_operand:HI 1 \"general_operand\" \"0,dx,m\")))]\n@@ -1295,7 +1344,14 @@\n \n ;;- sign extension instructions\n \n-(define_insn \"extendqisi2\"\n+(define_expand \"extendqisi2\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"\")\n+\t(sign_extend:SI\n+\t (match_operand:QI 1 \"general_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=dx,dx\")\n \t(sign_extend:SI\n \t (match_operand:QI 1 \"general_operand\" \"0,dx\")))]\n@@ -1305,7 +1361,14 @@\n   mov %1,%0\\;extb %0\"\n   [(set_attr \"cc\" \"none_0hit\")])\n \n-(define_insn \"extendhisi2\"\n+(define_expand \"extendhisi2\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"\")\n+\t(sign_extend:SI\n+\t (match_operand:HI 1 \"general_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=dx,dx\")\n \t(sign_extend:SI\n \t (match_operand:HI 1 \"general_operand\" \"0,dx\")))]\n@@ -1319,7 +1382,15 @@\n ;; SHIFTS\n ;; ----------------------------------------------------------------------\n \n-(define_insn \"ashlsi3\"\n+(define_expand \"ashlsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(ashift:SI\n+\t (match_operand:SI 1 \"register_operand\" \"\")\n+\t (match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=dax,dx,dx,dx,dx\")\n \t(ashift:SI\n \t (match_operand:SI 1 \"register_operand\" \"0,0,0,0,0\")\n@@ -1333,7 +1404,15 @@\n   asl %S2,%0\"\n   [(set_attr \"cc\" \"set_zn\")])\n \n-(define_insn \"lshrsi3\"\n+(define_expand \"lshrsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(lshiftrt:SI\n+\t (match_operand:SI 1 \"register_operand\" \"\")\n+\t (match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=dx\")\n \t(lshiftrt:SI\n \t (match_operand:SI 1 \"register_operand\" \"0\")\n@@ -1342,7 +1421,15 @@\n   \"lsr %S2,%0\"\n   [(set_attr \"cc\" \"set_zn\")])\n \n-(define_insn \"ashrsi3\"\n+(define_expand \"ashrsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(ashiftrt:SI\n+\t (match_operand:SI 1 \"register_operand\" \"\")\n+\t (match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=dx\")\n \t(ashiftrt:SI\n \t (match_operand:SI 1 \"register_operand\" \"0\")"}]}