{"sha": "5ad2f32df68c9fbba22e3e8333588ccbb0473252", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFkMmYzMmRmNjhjOWZiYmEyMmUzZTgzMzM1ODhjY2JiMDQ3MzI1Mg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-03-26T10:41:41Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-03-26T10:41:41Z"}, "message": "complex.h: Without __GXX_EXPERIMENTAL_CXX0X__ include_next complex.h.\n\n2007-03-26  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/c_compatibility/complex.h: Without\n\t__GXX_EXPERIMENTAL_CXX0X__ include_next complex.h.\t\n\t* include/c_compatibility/fenv.h: Same.\n\t* include/c_compatibility/inttypes.h: Same.\n\t* include/c_compatibility/stdbool.h: Same.\n\t* include/c_compatibility/stdint.h: Same.\n\t* include/c_compatibility/tgmath.h: Same.\n\n\t* include/tr1/cinttypes: Use include_next.\n\t* include/tr1/cstdint: Same.\n\t* include/tr1/cstdbool: Same.\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_C99): Add check for tgmath.h\n\t* configure: Regenerate.\n\t* config.h.in: Same.\n\nFrom-SVN: r123214", "tree": {"sha": "1f12eb6605b2c844cddddc22b3125023c374596e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f12eb6605b2c844cddddc22b3125023c374596e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ad2f32df68c9fbba22e3e8333588ccbb0473252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ad2f32df68c9fbba22e3e8333588ccbb0473252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ad2f32df68c9fbba22e3e8333588ccbb0473252", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ad2f32df68c9fbba22e3e8333588ccbb0473252/comments", "author": null, "committer": null, "parents": [{"sha": "8dde5924c6d38506f903070704352714d54e6aa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dde5924c6d38506f903070704352714d54e6aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dde5924c6d38506f903070704352714d54e6aa8"}], "stats": {"total": 248, "additions": 235, "deletions": 13}, "files": [{"sha": "5bf125a038bd065846a71c72d5279ae3ae9adc1f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5ad2f32df68c9fbba22e3e8333588ccbb0473252", "patch": "@@ -1,3 +1,21 @@\n+2007-03-26  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/c_compatibility/complex.h: Without\n+\t__GXX_EXPERIMENTAL_CXX0X__ include_next complex.h.\t\n+\t* include/c_compatibility/fenv.h: Same.\n+\t* include/c_compatibility/inttypes.h: Same.\n+\t* include/c_compatibility/stdbool.h: Same.\n+\t* include/c_compatibility/stdint.h: Same.\n+\t* include/c_compatibility/tgmath.h: Same.\n+\n+\t* include/tr1/cinttypes: Use include_next.\n+\t* include/tr1/cstdint: Same.\n+\t* include/tr1/cstdbool: Same.\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE_C99): Add check for tgmath.h\n+\t* configure: Regenerate.\n+\t* config.h.in: Same.\n+\t\n 2007-03-25  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/functional: Formatting fixes."}, {"sha": "18d1840ceb261012529f38e03b6c38b82933f522", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=5ad2f32df68c9fbba22e3e8333588ccbb0473252", "patch": "@@ -795,6 +795,7 @@ AC_DEFUN([GLIBCXX_ENABLE_C99], [\n   # This is necessary even though libstdc++ uses the builtin versions\n   # of these functions, because if the builtin cannot be used, a reference\n   # to the library function is emitted.\n+  AC_CHECK_HEADERS(tgmath.h, ac_has_tgmath_h=yes, ac_has_tgmath_h=no)\n   AC_CHECK_HEADERS(complex.h, ac_has_complex_h=yes, ac_has_complex_h=no)\n   ac_c99_complex=no;\n   if test x\"$ac_has_complex_h\" = x\"yes\"; then"}, {"sha": "a87d23d88d50216471f5b53e3950ba8546781a4c", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=5ad2f32df68c9fbba22e3e8333588ccbb0473252", "patch": "@@ -355,6 +355,9 @@\n /* Define to 1 if you have the `tanl' function. */\n #undef HAVE_TANL\n \n+/* Define to 1 if you have the <tgmath.h> header file. */\n+#undef HAVE_TGMATH_H\n+\n /* Define to 1 if the target supports thread-local storage. */\n #undef HAVE_TLS\n "}, {"sha": "55069241e7848e611d2d06636c474c8ecf11fae3", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 153, "deletions": 1, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=5ad2f32df68c9fbba22e3e8333588ccbb0473252", "patch": "@@ -7129,6 +7129,158 @@ _ACEOF\n   # of these functions, because if the builtin cannot be used, a reference\n   # to the library function is emitted.\n \n+for ac_header in tgmath.h\n+do\n+as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n+echo $ECHO_N \"checking for $ac_header... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_Header'}'`\" >&6\n+else\n+  # Is the header compilable?\n+echo \"$as_me:$LINENO: checking $ac_header usability\" >&5\n+echo $ECHO_N \"checking $ac_header usability... $ECHO_C\" >&6\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+$ac_includes_default\n+#include <$ac_header>\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_header_compiler=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_header_compiler=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+echo \"$as_me:$LINENO: result: $ac_header_compiler\" >&5\n+echo \"${ECHO_T}$ac_header_compiler\" >&6\n+\n+# Is the header present?\n+echo \"$as_me:$LINENO: checking $ac_header presence\" >&5\n+echo $ECHO_N \"checking $ac_header presence... $ECHO_C\" >&6\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <$ac_header>\n+_ACEOF\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_cpp conftest.$ac_ext\\\"\") >&5\n+  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } >/dev/null; then\n+  if test -s conftest.err; then\n+    ac_cpp_err=$ac_cxx_preproc_warn_flag\n+    ac_cpp_err=$ac_cpp_err$ac_cxx_werror_flag\n+  else\n+    ac_cpp_err=\n+  fi\n+else\n+  ac_cpp_err=yes\n+fi\n+if test -z \"$ac_cpp_err\"; then\n+  ac_header_preproc=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+  ac_header_preproc=no\n+fi\n+rm -f conftest.err conftest.$ac_ext\n+echo \"$as_me:$LINENO: result: $ac_header_preproc\" >&5\n+echo \"${ECHO_T}$ac_header_preproc\" >&6\n+\n+# So?  What about this header?\n+case $ac_header_compiler:$ac_header_preproc:$ac_cxx_preproc_warn_flag in\n+  yes:no: )\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!\" >&5\n+echo \"$as_me: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: proceeding with the compiler's result\" >&5\n+echo \"$as_me: WARNING: $ac_header: proceeding with the compiler's result\" >&2;}\n+    ac_header_preproc=yes\n+    ;;\n+  no:yes:* )\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: present but cannot be compiled\" >&5\n+echo \"$as_me: WARNING: $ac_header: present but cannot be compiled\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header:     check for missing prerequisite headers?\" >&5\n+echo \"$as_me: WARNING: $ac_header:     check for missing prerequisite headers?\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: see the Autoconf documentation\" >&5\n+echo \"$as_me: WARNING: $ac_header: see the Autoconf documentation\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header:     section \\\"Present But Cannot Be Compiled\\\"\" >&5\n+echo \"$as_me: WARNING: $ac_header:     section \\\"Present But Cannot Be Compiled\\\"\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: proceeding with the preprocessor's result\" >&5\n+echo \"$as_me: WARNING: $ac_header: proceeding with the preprocessor's result\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: in the future, the compiler will take precedence\" >&5\n+echo \"$as_me: WARNING: $ac_header: in the future, the compiler will take precedence\" >&2;}\n+    (\n+      cat <<\\_ASBOX\n+## ----------------------------------------- ##\n+## Report this to the package-unused lists.  ##\n+## ----------------------------------------- ##\n+_ASBOX\n+    ) |\n+      sed \"s/^/$as_me: WARNING:     /\" >&2\n+    ;;\n+esac\n+echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n+echo $ECHO_N \"checking for $ac_header... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  eval \"$as_ac_Header=\\$ac_header_preproc\"\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_Header'}'`\" >&6\n+\n+fi\n+if test `eval echo '${'$as_ac_Header'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_header\" | $as_tr_cpp` 1\n+_ACEOF\n+ ac_has_tgmath_h=yes\n+else\n+  ac_has_tgmath_h=no\n+fi\n+\n+done\n+\n+\n for ac_header in complex.h\n do\n as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n@@ -8029,7 +8181,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n   # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 8032 \"configure\"\n+#line 8184 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int."}, {"sha": "8ddb579773378352a187171b79dcfb4e8ffd0c12", "filename": "libstdc++-v3/include/c_compatibility/complex.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fcomplex.h?ref=5ad2f32df68c9fbba22e3e8333588ccbb0473252", "patch": "@@ -31,7 +31,15 @@\n  *  This is a Standard C++ Library header.\n  */\n \n-#include <ccomplex>\n+#include <bits/c++config.h>\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <ccomplex>\n+#else\n+# if _GLIBCXX_HAVE_COMPLEX_H\n+#  include_next <complex.h>\n+# endif\n+#endif\n \n #ifndef _GLIBCXX_COMPLEX_H\n #define _GLIBCXX_COMPLEX_H 1"}, {"sha": "44661d72c02f762d7e338531c005c23190e5c334", "filename": "libstdc++-v3/include/c_compatibility/fenv.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffenv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffenv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffenv.h?ref=5ad2f32df68c9fbba22e3e8333588ccbb0473252", "patch": "@@ -31,7 +31,15 @@\n  *  This is a Standard C++ Library header.\n  */\n \n-#include <cfenv>\n+#include <bits/c++config.h>\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <cfenv>\n+#else\n+# if _GLIBCXX_HAVE_FENV_H\n+#  include_next <fenv.h>\n+# endif\n+#endif\n \n #ifndef _GLIBCXX_FENV_H\n #define _GLIBCXX_FENV_H 1"}, {"sha": "562d0aa90633de9454215e05b3ae06c56a620336", "filename": "libstdc++-v3/include/c_compatibility/inttypes.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Finttypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Finttypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Finttypes.h?ref=5ad2f32df68c9fbba22e3e8333588ccbb0473252", "patch": "@@ -31,7 +31,15 @@\n  *  This is a Standard C++ Library header.\n  */\n \n-#include <cinttypes>\n+#include <bits/c++config.h>\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <cinttypes>\n+#else\n+# if _GLIBCXX_HAVE_INTTYPES_H\n+#  include_next <inttypes.h>\n+# endif\n+#endif\n \n #ifndef _GLIBCXX_INTTYPES_H\n #define _GLIBCXX_INTTYPES_H 1"}, {"sha": "194926920d0e62cf57f3dc9c2a1035df6cf780cd", "filename": "libstdc++-v3/include/c_compatibility/stdbool.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdbool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdbool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdbool.h?ref=5ad2f32df68c9fbba22e3e8333588ccbb0473252", "patch": "@@ -31,7 +31,15 @@\n  *  This is a Standard C++ Library header.\n  */\n \n-#include <cstdbool>\n+#include <bits/c++config.h>\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <cstdbool>\n+#else\n+# if _GLIBCXX_HAVE_STDBOOL_H\n+#  include_next <stdbool.h>\n+# endif\n+#endif\n \n #ifndef _GLIBCXX_STDBOOL_H\n #define _GLIBCXX_STDBOOL_H 1"}, {"sha": "c59a1cd76db0daeb12da3fa662b7dac0d7ce559f", "filename": "libstdc++-v3/include/c_compatibility/stdint.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdint.h?ref=5ad2f32df68c9fbba22e3e8333588ccbb0473252", "patch": "@@ -31,7 +31,15 @@\n  *  This is a Standard C++ Library header.\n  */\n \n-#include <cstdint>\n+#include <bits/c++config.h>\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <cstdint>\n+#else\n+# if _GLIBCXX_HAVE_STDINT_H\n+#  include_next <stdint.h>\n+# endif\n+#endif\n \n #ifndef _GLIBCXX_STDINT_H\n #define _GLIBCXX_STDINT_H 1"}, {"sha": "baf495f4d8388dd014fdffd1163f859cab139619", "filename": "libstdc++-v3/include/c_compatibility/tgmath.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftgmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftgmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftgmath.h?ref=5ad2f32df68c9fbba22e3e8333588ccbb0473252", "patch": "@@ -31,7 +31,15 @@\n  *  This is a Standard C++ Library header.\n  */\n \n-#include <ctgmath>\n+#include <bits/c++config.h>\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <ctgmath>\n+#else\n+# if _GLIBCXX_HAVE_TGMATH_H\n+#  include_next <tgmath.h>\n+# endif\n+#endif\n \n #ifndef _GLIBCXX_TGMATH_H\n #define _GLIBCXX_TGMATH_H 1"}, {"sha": "e2d2fcdc163e6d7e1913961e1471e7c395569e1f", "filename": "libstdc++-v3/include/tr1/cinttypes", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcinttypes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcinttypes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcinttypes?ref=5ad2f32df68c9fbba22e3e8333588ccbb0473252", "patch": "@@ -1,6 +1,6 @@\n // TR1 cinttypes -*- C++ -*-\n \n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,7 +41,7 @@\n \n // For 8.11.1/1 (see C99, Note 184) \n #define __STDC_FORMAT_MACROS\n-#include <inttypes.h>\n+#include_next <inttypes.h>\n \n // namespace std::tr1\n namespace std"}, {"sha": "939f2c7153073b68611e354222a84b53e5374d75", "filename": "libstdc++-v3/include/tr1/cstdbool", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdbool", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdbool", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdbool?ref=5ad2f32df68c9fbba22e3e8333588ccbb0473252", "patch": "@@ -1,6 +1,6 @@\n // TR1 cstdbool -*- C++ -*-\n \n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,7 +37,7 @@\n #include <bits/c++config.h>\n \n #if _GLIBCXX_HAVE_STDBOOL_H\n-#include <stdbool.h>\n+#include_next <stdbool.h>\n #endif\n \n #endif"}, {"sha": "56fa3083bf3fb2aa99f07d1a9b7ad439967a9605", "filename": "libstdc++-v3/include/tr1/cstdint", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdint", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f32df68c9fbba22e3e8333588ccbb0473252/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdint", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdint?ref=5ad2f32df68c9fbba22e3e8333588ccbb0473252", "patch": "@@ -1,6 +1,6 @@\n // TR1 cstdint -*- C++ -*-\n \n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,7 +41,7 @@\n // For 8.22.1/1 (see C99, Notes 219, 220, 222) \n #define __STDC_LIMIT_MACROS\n #define __STDC_CONSTANT_MACROS\n-#include <stdint.h>\n+#include_next <stdint.h>\n \n // namespace std::tr1\n namespace std"}]}