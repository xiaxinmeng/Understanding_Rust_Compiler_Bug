{"sha": "1bf2ca0b75a3b6ce72ab4065dbc10b7f80413d4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJmMmNhMGI3NWEzYjZjZTcyYWI0MDY1ZGJjMTBiN2Y4MDQxM2Q0Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-12-07T04:35:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-12-07T04:35:14Z"}, "message": "Fix parse/no-type-defn1.C with -std=c++1z.\n\n\t* parser.c (struct tentative_firewall): New.\n\t(cp_parser_template_id, cp_parser_decltype_expr): Use it.\n\nFrom-SVN: r231354", "tree": {"sha": "afce09c0b85c9dae374e599eab13a28b6d6b0510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afce09c0b85c9dae374e599eab13a28b6d6b0510"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bf2ca0b75a3b6ce72ab4065dbc10b7f80413d4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bf2ca0b75a3b6ce72ab4065dbc10b7f80413d4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bf2ca0b75a3b6ce72ab4065dbc10b7f80413d4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bf2ca0b75a3b6ce72ab4065dbc10b7f80413d4b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca8e4b87ad6da53a0e8c17227f7ef82e38df66fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca8e4b87ad6da53a0e8c17227f7ef82e38df66fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca8e4b87ad6da53a0e8c17227f7ef82e38df66fb"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "c4daf75d3946d3c9e69d86a62717ba8f146279ce", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf2ca0b75a3b6ce72ab4065dbc10b7f80413d4b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf2ca0b75a3b6ce72ab4065dbc10b7f80413d4b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1bf2ca0b75a3b6ce72ab4065dbc10b7f80413d4b", "patch": "@@ -1,5 +1,8 @@\n 2015-12-06  Jason Merrill  <jason@redhat.com>\n \n+\t* parser.c (struct tentative_firewall): New.\n+\t(cp_parser_template_id, cp_parser_decltype_expr): Use it.\n+\n \t* parser.h (struct cp_token): Tell GTY that CPP_DECLTYPE uses\n \ttree_check_value.\n \t* parser.c (cp_parser_decltype): Use tree_check_value."}, {"sha": "3e90f11dc0374a9ee1598db80823532b2d0ba1ac", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf2ca0b75a3b6ce72ab4065dbc10b7f80413d4b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf2ca0b75a3b6ce72ab4065dbc10b7f80413d4b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1bf2ca0b75a3b6ce72ab4065dbc10b7f80413d4b", "patch": "@@ -4326,6 +4326,43 @@ cp_parser_end_tentative_firewall (cp_parser *parser, cp_token_position start,\n   cp_lexer_purge_tokens_after (parser->lexer, start);\n }\n \n+/* Like the above functions, but let the user modify the tokens.  Used by\n+   CPP_DECLTYPE and CPP_TEMPLATE_ID, where we are saving the side-effects for\n+   later parses, so it makes sense to localize the effects of\n+   cp_parser_commit_to_tentative_parse.  */\n+\n+struct tentative_firewall\n+{\n+  cp_parser *parser;\n+  bool set;\n+\n+  tentative_firewall (cp_parser *p): parser(p)\n+  {\n+    /* If we're currently parsing tentatively, start a committed level as a\n+       firewall and then an inner tentative parse.  */\n+    if ((set = cp_parser_uncommitted_to_tentative_parse_p (parser)))\n+      {\n+\tcp_parser_parse_tentatively (parser);\n+\tcp_parser_commit_to_topmost_tentative_parse (parser);\n+\tcp_parser_parse_tentatively (parser);\n+      }\n+  }\n+\n+  ~tentative_firewall()\n+  {\n+    if (set)\n+      {\n+\t/* Finish the inner tentative parse and the firewall, propagating any\n+\t   uncommitted error state to the outer tentative parse.  */\n+\tbool err = cp_parser_error_occurred (parser);\n+\tcp_parser_parse_definitely (parser);\n+\tcp_parser_parse_definitely (parser);\n+\tif (err)\n+\t  cp_parser_simulate_error (parser);\n+      }\n+  }\n+};\n+\n /* Parse a GNU statement-expression, i.e. ({ stmts }), except for the\n    enclosing parentheses.  */\n \n@@ -12921,6 +12958,11 @@ cp_parser_decltype_expr (cp_parser *parser,\n   cp_token *id_expr_start_token;\n   tree expr;\n \n+  /* Since we're going to preserve any side-effects from this parse, set up a\n+     firewall to protect our callers from cp_parser_commit_to_tentative_parse\n+     in the expression.  */\n+  tentative_firewall firewall (parser);\n+\n   /* First, try parsing an id-expression.  */\n   id_expr_start_token = cp_lexer_peek_token (parser->lexer);\n   cp_parser_parse_tentatively (parser);\n@@ -14687,6 +14729,11 @@ cp_parser_template_id (cp_parser *parser,\n       return templ;\n     }\n \n+  /* Since we're going to preserve any side-effects from this parse, set up a\n+     firewall to protect our callers from cp_parser_commit_to_tentative_parse\n+     in the template arguments.  */\n+  tentative_firewall firewall (parser);\n+\n   /* If we find the sequence `[:' after a template-name, it's probably\n      a digraph-typo for `< ::'. Substitute the tokens and check if we can\n      parse correctly the argument list.  */"}, {"sha": "a8d6ad88ae0a20fc38784596476965c934c1e918", "filename": "gcc/testsuite/g++.dg/parse/no-type-defn1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf2ca0b75a3b6ce72ab4065dbc10b7f80413d4b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fno-type-defn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf2ca0b75a3b6ce72ab4065dbc10b7f80413d4b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fno-type-defn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fno-type-defn1.C?ref=1bf2ca0b75a3b6ce72ab4065dbc10b7f80413d4b", "patch": "@@ -3,3 +3,5 @@\n template<typename> struct A { };\n A< struct B { }* >::SomeNonSense // { dg-error \"types may not be defined\" }\n int y;\n+\n+// { dg-prune-output \"SomeNonSense\" }"}]}