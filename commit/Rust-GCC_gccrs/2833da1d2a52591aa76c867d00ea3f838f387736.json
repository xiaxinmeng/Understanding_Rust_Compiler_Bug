{"sha": "2833da1d2a52591aa76c867d00ea3f838f387736", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgzM2RhMWQyYTUyNTkxYWE3NmM4NjdkMDBlYTNmODM4ZjM4NzczNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-12-17T13:52:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-12-17T13:52:25Z"}, "message": "re PR tree-optimization/68835 (ICE in set_value_range, at tree-vrp.c:387, with __int128 bit field)\n\n\tPR tree-optimization/68835\n\t* tree.c (get_int_cst_ext_nunits): Return\n\tcst.get_precision () / HOST_BITS_PER_WIDE_INT + 1\n\tfor all unsigned wi::neg_p (cst) constants.\n\t(build_new_int_cst): If cst.get_precision is not a multiple\n\tof HOST_BITS_PER_WIDE_INT, zero extend -1 to the precision\n\t% HOST_BITS_PER_WIDE_INT.\n\n\t* gcc.dg/pr68835-1.c: New test.\n\t* gcc.dg/pr68835-2.c: New test.\n\nFrom-SVN: r231757", "tree": {"sha": "b72d48432f46da6493f758fd909b5dbd54dee777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b72d48432f46da6493f758fd909b5dbd54dee777"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2833da1d2a52591aa76c867d00ea3f838f387736", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2833da1d2a52591aa76c867d00ea3f838f387736", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2833da1d2a52591aa76c867d00ea3f838f387736", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2833da1d2a52591aa76c867d00ea3f838f387736/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4fae9c1012246c77d6167388ba85c1b6e96c084b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fae9c1012246c77d6167388ba85c1b6e96c084b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fae9c1012246c77d6167388ba85c1b6e96c084b"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "f836652c9afb2b1c7457d3a67ec4f6893cb10913", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2833da1d2a52591aa76c867d00ea3f838f387736/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2833da1d2a52591aa76c867d00ea3f838f387736/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2833da1d2a52591aa76c867d00ea3f838f387736", "patch": "@@ -1,3 +1,13 @@\n+2015-12-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/68835\n+\t* tree.c (get_int_cst_ext_nunits): Return\n+\tcst.get_precision () / HOST_BITS_PER_WIDE_INT + 1\n+\tfor all unsigned wi::neg_p (cst) constants.\n+\t(build_new_int_cst): If cst.get_precision is not a multiple\n+\tof HOST_BITS_PER_WIDE_INT, zero extend -1 to the precision\n+\t% HOST_BITS_PER_WIDE_INT.\n+\n 2015-12-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68951"}, {"sha": "193f99244634226818438ef033a2f24bce873578", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2833da1d2a52591aa76c867d00ea3f838f387736/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2833da1d2a52591aa76c867d00ea3f838f387736/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2833da1d2a52591aa76c867d00ea3f838f387736", "patch": "@@ -1,3 +1,9 @@\n+2015-12-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/68835\n+\t* gcc.dg/pr68835-1.c: New test.\n+\t* gcc.dg/pr68835-2.c: New test.\n+\n 2015-12-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68951"}, {"sha": "47aebe3c1c6103dc7e20de001c041547cb178d83", "filename": "gcc/testsuite/gcc.dg/pr68835-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2833da1d2a52591aa76c867d00ea3f838f387736/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68835-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2833da1d2a52591aa76c867d00ea3f838f387736/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68835-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68835-1.c?ref=2833da1d2a52591aa76c867d00ea3f838f387736", "patch": "@@ -0,0 +1,12 @@\n+/* PR tree-optimization/68835 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned __int128\n+foo (unsigned long a, unsigned long b)\n+{\n+  unsigned __int128 x = (unsigned __int128) a * b;\n+  struct { unsigned __int128 a : 96; } w;\n+  w.a = x;\n+  return w.a;\n+}"}, {"sha": "dd355b17223c4b6fce90147d0315b6bb148c59b3", "filename": "gcc/testsuite/gcc.dg/pr68835-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2833da1d2a52591aa76c867d00ea3f838f387736/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68835-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2833da1d2a52591aa76c867d00ea3f838f387736/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68835-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68835-2.c?ref=2833da1d2a52591aa76c867d00ea3f838f387736", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/68835 */\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+\n+__attribute__((noinline, noclone)) unsigned __int128\n+foo (void)\n+{\n+  unsigned __int128 x = (unsigned __int128) 0xffffffffffffffffULL;\n+  struct { unsigned __int128 a : 65; } w;\n+  w.a = x;\n+  w.a += x;\n+  return w.a;\n+}\n+\n+int\n+main ()\n+{\n+  unsigned __int128 x = foo ();\n+  if ((unsigned long long) x != 0xfffffffffffffffeULL\n+      || (unsigned long long) (x >> 64) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "2190cae847510f8a416a7451fe1a1e3d3e2be15f", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2833da1d2a52591aa76c867d00ea3f838f387736/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2833da1d2a52591aa76c867d00ea3f838f387736/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2833da1d2a52591aa76c867d00ea3f838f387736", "patch": "@@ -1245,11 +1245,9 @@ static unsigned int\n get_int_cst_ext_nunits (tree type, const wide_int &cst)\n {\n   gcc_checking_assert (cst.get_precision () == TYPE_PRECISION (type));\n-  /* We need an extra zero HWI if CST is an unsigned integer with its\n-     upper bit set, and if CST occupies a whole number of HWIs.  */\n-  if (TYPE_UNSIGNED (type)\n-      && wi::neg_p (cst)\n-      && (cst.get_precision () % HOST_BITS_PER_WIDE_INT) == 0)\n+  /* We need extra HWIs if CST is an unsigned integer with its\n+     upper bit set.  */\n+  if (TYPE_UNSIGNED (type) && wi::neg_p (cst))\n     return cst.get_precision () / HOST_BITS_PER_WIDE_INT + 1;\n   return cst.get_len ();\n }\n@@ -1266,7 +1264,8 @@ build_new_int_cst (tree type, const wide_int &cst)\n   if (len < ext_len)\n     {\n       --ext_len;\n-      TREE_INT_CST_ELT (nt, ext_len) = 0;\n+      TREE_INT_CST_ELT (nt, ext_len)\n+\t= zext_hwi (-1, cst.get_precision () % HOST_BITS_PER_WIDE_INT);\n       for (unsigned int i = len; i < ext_len; ++i)\n \tTREE_INT_CST_ELT (nt, i) = -1;\n     }"}]}