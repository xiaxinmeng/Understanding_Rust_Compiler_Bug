{"sha": "16155ccf588a403c033ccd7743329671bcfb27d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYxNTVjY2Y1ODhhNDAzYzAzM2NjZDc3NDMzMjk2NzFiY2ZiMjdkNQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2019-11-07T10:46:05Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-11-07T10:46:05Z"}, "message": "[arm][4/X] Add initial support for GE-setting SIMD32 intrinsics\n\nThis patch adds in plumbing for the ACLE intrinsics that set the GE bits in\nAPSR.  These are special SIMD instructions in Armv6 that pack bytes or\nhalfwords into the 32-bit general-purpose registers and set the GE bits in\nAPSR to indicate if some of the \"lanes\" of the result have overflowed or\nhave some other instruction-specific property.\nThese bits can then be used by the SEL instruction (accessed through the\n__sel intrinsic) to select lanes for further processing.\n\nThis situation is similar to the Q-setting intrinsics: we have to track\nthe GE fake register, detect when a function reads it through __sel and restrict\nexisting patterns that may generate GE-clobbering instruction from\nstraight-line C code when reading the GE bits matters.\n\n\t* config/arm/aout.h (REGISTER_NAMES): Add apsrge.\n\t* config/arm/arm.md (APSRGE_REGNUM): Define.\n\t(arm_<simd32_op>): New define_insn.\n\t(arm_sel): Likewise.\n\t* config/arm/arm.h (FIXED_REGISTERS): Add entry for apsrge.\n\t(CALL_USED_REGISTERS): Likewise.\n\t(REG_ALLOC_ORDER): Likewise.\n\t(FIRST_PSEUDO_REGISTER): Update value.\n\t(ARM_GE_BITS_READ): Define.\n\t* config/arm/arm.c (arm_conditional_register_usage): Clear\n\tAPSRGE_REGNUM from operand_reg_set.\n\t(arm_ge_bits_access): Define.\n\t* config/arm/arm-builtins.c (arm_check_builtin_call): Handle\n\tARM_BUIILTIN_sel.\n\t* config/arm/arm-protos.h (arm_ge_bits_access): Declare prototype.\n\t* config/arm/arm-fixed.md (add<mode>3): Convert to define_expand.\n\tFAIL if ARM_GE_BITS_READ.\n\t(*arm_add<mode>3): New define_insn.\n\t(sub<mode>3): Convert to define_expand.  FAIL if ARM_GE_BITS_READ.\n\t(*arm_sub<mode>3): New define_insn.\n\t* config/arm/arm_acle.h (__sel, __sadd8, __ssub8, __uadd8, __usub8,\n\t__sadd16, __sasx, __ssax, __ssub16, __uadd16, __uasx, __usax,\n\t__usub16): Define.\n\t* config/arm/arm_acle_builtins.def: Define builtins for the above.\n\t* config/arm/iterators.md (SIMD32_GE): New int_iterator.\n\t(simd32_op): Handle the above.\n\t* config/arm/unspecs.md (UNSPEC_GE_SET): Define.\n\t(UNSPEC_SEL, UNSPEC_SADD8, UNSPEC_SSUB8, UNSPEC_UADD8, UNSPEC_USUB8,\n\tUNSPEC_SADD16, UNSPEC_SASX, UNSPEC_SSAX, UNSPEC_SSUB16, UNSPEC_UADD16,\n\tUNSPEC_UASX, UNSPEC_USAX, UNSPEC_USUB16): Define.\n\n\t* gcc.target/arm/acle/simd32.c: Update test.\n\t* gcc.target/arm/acle/simd32_sel.c: New test.\n\nFrom-SVN: r277917", "tree": {"sha": "13016a110e5ae7ca9c694fd5e97afefd464e7171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13016a110e5ae7ca9c694fd5e97afefd464e7171"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16155ccf588a403c033ccd7743329671bcfb27d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16155ccf588a403c033ccd7743329671bcfb27d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16155ccf588a403c033ccd7743329671bcfb27d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16155ccf588a403c033ccd7743329671bcfb27d5/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0883673194a2b28ad888498d74dac9a4cccc513c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0883673194a2b28ad888498d74dac9a4cccc513c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0883673194a2b28ad888498d74dac9a4cccc513c"}], "stats": {"total": 378, "additions": 364, "deletions": 14}, "files": [{"sha": "82cc2ca796b1be6b474193849250dbd8c07071f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16155ccf588a403c033ccd7743329671bcfb27d5", "patch": "@@ -1,3 +1,36 @@\n+2019-11-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/aout.h (REGISTER_NAMES): Add apsrge.\n+\t* config/arm/arm.md (APSRGE_REGNUM): Define.\n+\t(arm_<simd32_op>): New define_insn.\n+\t(arm_sel): Likewise.\n+\t* config/arm/arm.h (FIXED_REGISTERS): Add entry for apsrge.\n+\t(CALL_USED_REGISTERS): Likewise.\n+\t(REG_ALLOC_ORDER): Likewise.\n+\t(FIRST_PSEUDO_REGISTER): Update value.\n+\t(ARM_GE_BITS_READ): Define.\n+\t* config/arm/arm.c (arm_conditional_register_usage): Clear\n+\tAPSRGE_REGNUM from operand_reg_set.\n+\t(arm_ge_bits_access): Define.\n+\t* config/arm/arm-builtins.c (arm_check_builtin_call): Handle\n+\tARM_BUIILTIN_sel.\n+\t* config/arm/arm-protos.h (arm_ge_bits_access): Declare prototype.\n+\t* config/arm/arm-fixed.md (add<mode>3): Convert to define_expand.\n+\tFAIL if ARM_GE_BITS_READ.\n+\t(*arm_add<mode>3): New define_insn.\n+\t(sub<mode>3): Convert to define_expand.  FAIL if ARM_GE_BITS_READ.\n+\t(*arm_sub<mode>3): New define_insn.\n+\t* config/arm/arm_acle.h (__sel, __sadd8, __ssub8, __uadd8, __usub8,\n+\t__sadd16, __sasx, __ssax, __ssub16, __uadd16, __uasx, __usax,\n+\t__usub16): Define.\n+\t* config/arm/arm_acle_builtins.def: Define builtins for the above.\n+\t* config/arm/iterators.md (SIMD32_GE): New int_iterator.\n+\t(simd32_op): Handle the above.\n+\t* config/arm/unspecs.md (UNSPEC_GE_SET): Define.\n+\t(UNSPEC_SEL, UNSPEC_SADD8, UNSPEC_SSUB8, UNSPEC_UADD8, UNSPEC_USUB8,\n+\tUNSPEC_SADD16, UNSPEC_SASX, UNSPEC_SSAX, UNSPEC_SSUB16, UNSPEC_UADD16,\n+\tUNSPEC_UASX, UNSPEC_USAX, UNSPEC_USUB16): Define.\n+\n 2019-11-07  Kyrylo Tkachov <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.md (arm_smlabb_setq): New define_insn."}, {"sha": "72782758853a869bcb9a9d69f3fa0da979cd711f", "filename": "gcc/config/arm/aout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faout.h?ref=16155ccf588a403c033ccd7743329671bcfb27d5", "patch": "@@ -72,7 +72,7 @@\n   \"wr8\",   \"wr9\",   \"wr10\",  \"wr11\",\t\t\t\t\\\n   \"wr12\",  \"wr13\",  \"wr14\",  \"wr15\",\t\t\t\t\\\n   \"wcgr0\", \"wcgr1\", \"wcgr2\", \"wcgr3\",\t\t\t\t\\\n-  \"cc\", \"vfpcc\", \"sfp\", \"afp\", \"apsrq\"\t\t\t\t\\\n+  \"cc\", \"vfpcc\", \"sfp\", \"afp\", \"apsrq\", \"apsrge\"\t\t\\\n }\n #endif\n "}, {"sha": "2d902d0b325bc1fe5e22831ef8a59a2bb37c1225", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=16155ccf588a403c033ccd7743329671bcfb27d5", "patch": "@@ -3370,6 +3370,13 @@ arm_check_builtin_call (location_t , vec<location_t> , tree fndecl,\n \t  = tree_cons (get_identifier (\"acle qbit\"), NULL_TREE,\n \t\t       DECL_ATTRIBUTES (cfun->decl));\n     }\n+  if (fcode == ARM_BUILTIN_sel)\n+    {\n+      if (cfun && cfun->decl)\n+\tDECL_ATTRIBUTES (cfun->decl)\n+\t  = tree_cons (get_identifier (\"acle gebits\"), NULL_TREE,\n+\t\t       DECL_ATTRIBUTES (cfun->decl));\n+    }\n   return true;\n }\n "}, {"sha": "6d949ba7064c0587d4c5d7b855f2c04c6d0e08e7", "filename": "gcc/config/arm/arm-fixed.md", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Farm-fixed.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Farm-fixed.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-fixed.md?ref=16155ccf588a403c033ccd7743329671bcfb27d5", "patch": "@@ -28,11 +28,22 @@\n    (set_attr \"predicable_short_it\" \"yes,no\")\n    (set_attr \"type\" \"alu_sreg\")])\n \n-(define_insn \"add<mode>3\"\n+(define_expand \"add<mode>3\"\n+  [(set (match_operand:ADDSUB 0 \"s_register_operand\")\n+\t(plus:ADDSUB (match_operand:ADDSUB 1 \"s_register_operand\")\n+\t\t     (match_operand:ADDSUB 2 \"s_register_operand\")))]\n+  \"TARGET_INT_SIMD\"\n+  {\n+    if (ARM_GE_BITS_READ)\n+      FAIL;\n+  }\n+)\n+\n+(define_insn \"*arm_add<mode>3\"\n   [(set (match_operand:ADDSUB 0 \"s_register_operand\" \"=r\")\n \t(plus:ADDSUB (match_operand:ADDSUB 1 \"s_register_operand\" \"r\")\n \t\t     (match_operand:ADDSUB 2 \"s_register_operand\" \"r\")))]\n-  \"TARGET_INT_SIMD\"\n+  \"TARGET_INT_SIMD && !ARM_GE_BITS_READ\"\n   \"sadd<qaddsub_suf>%?\\\\t%0, %1, %2\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"type\" \"alu_dsp_reg\")])\n@@ -76,11 +87,22 @@\n    (set_attr \"predicable_short_it\" \"yes,no\")\n    (set_attr \"type\" \"alu_sreg\")])\n \n-(define_insn \"sub<mode>3\"\n+(define_expand \"sub<mode>3\"\n+  [(set (match_operand:ADDSUB 0 \"s_register_operand\")\n+\t(minus:ADDSUB (match_operand:ADDSUB 1 \"s_register_operand\")\n+\t\t     (match_operand:ADDSUB 2 \"s_register_operand\")))]\n+  \"TARGET_INT_SIMD\"\n+  {\n+    if (ARM_GE_BITS_READ)\n+      FAIL;\n+  }\n+)\n+\n+(define_insn \"*arm_sub<mode>3\"\n   [(set (match_operand:ADDSUB 0 \"s_register_operand\" \"=r\")\n \t(minus:ADDSUB (match_operand:ADDSUB 1 \"s_register_operand\" \"r\")\n \t\t      (match_operand:ADDSUB 2 \"s_register_operand\" \"r\")))]\n-  \"TARGET_INT_SIMD\"\n+  \"TARGET_INT_SIMD && !ARM_GE_BITS_READ\"\n   \"ssub<qaddsub_suf>%?\\\\t%0, %1, %2\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"type\" \"alu_dsp_reg\")])"}, {"sha": "a3f246bc1770a3942a6c9d2551063cb008f37afe", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=16155ccf588a403c033ccd7743329671bcfb27d5", "patch": "@@ -61,6 +61,7 @@ extern bool arm_simd_check_vect_par_cnst_half_p (rtx op, machine_mode mode,\n extern void arm_emit_speculation_barrier_function (void);\n extern void arm_decompose_di_binop (rtx, rtx, rtx *, rtx *, rtx *, rtx *);\n extern bool arm_q_bit_access (void);\n+extern bool arm_ge_bits_access (void);\n \n #ifdef RTX_CODE\n extern void arm_gen_unlikely_cbranch (enum rtx_code, machine_mode cc_mode,"}, {"sha": "7c9cdbd7a463310ae4c9bccf9930d74ec5726488", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=16155ccf588a403c033ccd7743329671bcfb27d5", "patch": "@@ -29144,8 +29144,9 @@ arm_conditional_register_usage (void)\n \tglobal_regs[ARM_HARD_FRAME_POINTER_REGNUM] = 1;\n     }\n \n-  /* The Q bit is only accessed via special ACLE patterns.  */\n+  /* The Q and GE bits are only accessed via special ACLE patterns.  */\n   CLEAR_HARD_REG_BIT (operand_reg_set, APSRQ_REGNUM);\n+  CLEAR_HARD_REG_BIT (operand_reg_set, APSRGE_REGNUM);\n \n   SUBTARGET_CONDITIONAL_REGISTER_USAGE\n }\n@@ -32392,6 +32393,16 @@ arm_q_bit_access (void)\n   return true;\n }\n \n+/* Have we recorded an explicit access to the GE bits of PSTATE?.  */\n+bool\n+arm_ge_bits_access (void)\n+{\n+  if (cfun && cfun->decl)\n+    return lookup_attribute (\"acle gebits\",\n+\t\t\t     DECL_ATTRIBUTES (cfun->decl));\n+  return true;\n+}\n+\n #if CHECKING_P\n namespace selftest {\n "}, {"sha": "3a1ba8b9a574035407bfa0357b5b9d7359222c20", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=16155ccf588a403c033ccd7743329671bcfb27d5", "patch": "@@ -725,6 +725,8 @@ extern int arm_arch_cmse;\n \t\t\tfp exactly at all times.\n \tapsrq\t\tNor this, it is used to track operations on the Q bit\n \t\t\tof APSR by ACLE saturating intrinsics.\n+\tapsrge\t\tNor this, it is used to track operations on the GE bits\n+\t\t\tof APSR by ACLE SIMD32 intrinsics\n \n    *: See TARGET_CONDITIONAL_REGISTER_USAGE  */\n \n@@ -772,7 +774,7 @@ extern int arm_arch_cmse;\n   1,1,1,1,1,1,1,1,\t\t\\\n   1,1,1,1,\t\t\t\\\n   /* Specials.  */\t\t\\\n-  1,1,1,1,1\t\t\t\\\n+  1,1,1,1,1,1\t\t\t\\\n }\n \n /* 1 for registers not available across function calls.\n@@ -802,7 +804,7 @@ extern int arm_arch_cmse;\n   1,1,1,1,1,1,1,1,\t\t\\\n   1,1,1,1,\t\t\t\\\n   /* Specials.  */\t\t\\\n-  1,1,1,1,1\t\t\t\\\n+  1,1,1,1,1,1\t\t\t\\\n }\n \n #ifndef SUBTARGET_CONDITIONAL_REGISTER_USAGE\n@@ -977,10 +979,11 @@ extern int arm_arch_cmse;\n   ((((REGNUM) - FIRST_VFP_REGNUM) & 3) == 0 \\\n    && (LAST_VFP_REGNUM - (REGNUM) >= 2 * (N) - 1))\n \n-/* The number of hard registers is 16 ARM + 1 CC + 1 SFP + 1 AFP + 1 APSRQ.  */\n+/* The number of hard registers is 16 ARM + 1 CC + 1 SFP + 1 AFP\n+   + 1 APSRQ + 1 APSRGE.  */\n /* Intel Wireless MMX Technology registers add 16 + 4 more.  */\n /* VFP (VFP3) adds 32 (64) + 1 VFPCC.  */\n-#define FIRST_PSEUDO_REGISTER   105\n+#define FIRST_PSEUDO_REGISTER   106\n \n #define DBX_REGISTER_NUMBER(REGNO) arm_dbx_register_number (REGNO)\n \n@@ -1064,7 +1067,7 @@ extern int arm_regs_in_sequence[];\n   /* Registers not for general use.  */\t\t\\\n   CC_REGNUM, VFPCC_REGNUM,\t\t\t\\\n   FRAME_POINTER_REGNUM, ARG_POINTER_REGNUM,\t\\\n-  SP_REGNUM, PC_REGNUM, APSRQ_REGNUM\t\t\\\n+  SP_REGNUM, PC_REGNUM, APSRQ_REGNUM, APSRGE_REGNUM\t\\\n }\n \n /* Use different register alloc ordering for Thumb.  */\n@@ -1405,6 +1408,7 @@ machine_function;\n #endif\n \n #define ARM_Q_BIT_READ (arm_q_bit_access ())\n+#define ARM_GE_BITS_READ (arm_ge_bits_access ())\n \n /* As in the machine_function, a global set of call-via labels, for code \n    that is in text_section.  */"}, {"sha": "a74c93cbf951ed609cd0ed3f10f33ff0903d8ee0", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=16155ccf588a403c033ccd7743329671bcfb27d5", "patch": "@@ -40,6 +40,7 @@\n    (CC_REGNUM       100)\t; Condition code pseudo register\n    (VFPCC_REGNUM    101)\t; VFP Condition code pseudo register\n    (APSRQ_REGNUM    104)\t; Q bit pseudo register\n+   (APSRGE_REGNUM   105)\t; GE bits pseudo register\n   ]\n )\n ;; 3rd operand to select_dominance_cc_mode\n@@ -5834,8 +5835,8 @@\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(unspec:SI\n \t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t   (match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t   (match_operand:SI 3 \"s_register_operand\" \"r\")] UNSPEC_USADA8))]\n+\t  (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t  (match_operand:SI 3 \"s_register_operand\" \"r\")] UNSPEC_USADA8))]\n   \"TARGET_INT_SIMD\"\n   \"usada8%?\\\\t%0, %1, %2, %3\"\n   [(set_attr \"predicable\" \"yes\")\n@@ -5852,6 +5853,29 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"type\" \"smlald\")])\n \n+(define_insn \"arm_<simd32_op>\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:SI\n+\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 2 \"s_register_operand\" \"r\")] SIMD32_GE))\n+   (set (reg:CC APSRGE_REGNUM)\n+\t(unspec:CC [(reg:CC APSRGE_REGNUM)] UNSPEC_GE_SET))]\n+  \"TARGET_INT_SIMD\"\n+  \"<simd32_op>%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"alu_sreg\")])\n+\n+(define_insn \"arm_sel\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:SI\n+\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t   (reg:CC APSRGE_REGNUM)] UNSPEC_SEL))]\n+  \"TARGET_INT_SIMD\"\n+  \"sel%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"alu_sreg\")])\n+\n (define_expand \"extendsfdf2\"\n   [(set (match_operand:DF                  0 \"s_register_operand\")\n \t(float_extend:DF (match_operand:SF 1 \"s_register_operand\")))]"}, {"sha": "b8d02a5502f273fcba492bbeba2542b13334a8ea", "filename": "gcc/config/arm/arm_acle.h", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle.h?ref=16155ccf588a403c033ccd7743329671bcfb27d5", "patch": "@@ -431,6 +431,97 @@ __smlsldx (int16x2_t __a, int16x2_t __b, int64_t __c)\n   return __builtin_arm_smlsldx (__a, __b, __c);\n }\n \n+__extension__ extern __inline uint8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__sel (uint8x4_t __a, uint8x4_t __b)\n+{\n+  return __builtin_arm_sel (__a, __b);\n+}\n+\n+__extension__ extern __inline int8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__sadd8 (int8x4_t __a, int8x4_t __b)\n+{\n+  return __builtin_arm_sadd8 (__a, __b);\n+}\n+\n+__extension__ extern __inline int8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__ssub8 (int8x4_t __a, int8x4_t __b)\n+{\n+  return __builtin_arm_ssub8 (__a, __b);\n+}\n+\n+__extension__ extern __inline uint8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uadd8 (uint8x4_t __a, uint8x4_t __b)\n+{\n+  return __builtin_arm_uadd8 (__a, __b);\n+}\n+\n+__extension__ extern __inline uint8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__usub8 (uint8x4_t __a, uint8x4_t __b)\n+{\n+  return __builtin_arm_usub8 (__a, __b);\n+}\n+\n+__extension__ extern __inline int16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__sadd16 (int16x2_t __a, int16x2_t __b)\n+{\n+  return __builtin_arm_sadd16 (__a, __b);\n+}\n+\n+__extension__ extern __inline int16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__sasx (int16x2_t __a, int16x2_t __b)\n+{\n+  return __builtin_arm_sasx (__a, __b);\n+}\n+\n+__extension__ extern __inline int16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__ssax (int16x2_t __a, int16x2_t __b)\n+{\n+  return __builtin_arm_ssax (__a, __b);\n+}\n+\n+__extension__ extern __inline int16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__ssub16 (int16x2_t __a, int16x2_t __b)\n+{\n+  return __builtin_arm_ssub16 (__a, __b);\n+}\n+\n+__extension__ extern __inline uint16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uadd16 (uint16x2_t __a, uint16x2_t __b)\n+{\n+  return __builtin_arm_uadd16 (__a, __b);\n+}\n+\n+__extension__ extern __inline uint16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uasx (uint16x2_t __a, uint16x2_t __b)\n+{\n+  return __builtin_arm_uasx (__a, __b);\n+}\n+\n+__extension__ extern __inline uint16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__usax (uint16x2_t __a, uint16x2_t __b)\n+{\n+  return __builtin_arm_usax (__a, __b);\n+}\n+\n+__extension__ extern __inline uint16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__usub16 (uint16x2_t __a, uint16x2_t __b)\n+{\n+  return __builtin_arm_usub16 (__a, __b);\n+}\n+\n #endif\n \n #ifdef __ARM_FEATURE_SAT"}, {"sha": "715c3c94e8c8f6355e880a36eb275be80d1a3912", "filename": "gcc/config/arm/arm_acle_builtins.def", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def?ref=16155ccf588a403c033ccd7743329671bcfb27d5", "patch": "@@ -91,3 +91,19 @@ VAR1 (TERNOP, smlatb, si)\n VAR1 (TERNOP, smlatt, si)\n VAR1 (TERNOP, smlawb, si)\n VAR1 (TERNOP, smlawt, si)\n+\n+VAR1 (BINOP, sadd8, si)\n+VAR1 (BINOP, ssub8, si)\n+VAR1 (BINOP, sadd16, si)\n+VAR1 (BINOP, sasx, si)\n+VAR1 (BINOP, ssax, si)\n+VAR1 (BINOP, ssub16, si)\n+\n+VAR1 (UBINOP, uadd8, si)\n+VAR1 (UBINOP, usub8, si)\n+VAR1 (UBINOP, uadd16, si)\n+VAR1 (UBINOP, uasx, si)\n+VAR1 (UBINOP, usax, si)\n+VAR1 (UBINOP, usub16, si)\n+\n+VAR1 (UBINOP, sel, si)"}, {"sha": "2394a959d19b6a7f2cff8fb7609da6231dee14d6", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=16155ccf588a403c033ccd7743329671bcfb27d5", "patch": "@@ -448,6 +448,11 @@\n \n (define_int_iterator SMLAWBT [UNSPEC_SMLAWB UNSPEC_SMLAWT])\n \n+(define_int_iterator SIMD32_GE [UNSPEC_SADD8 UNSPEC_SSUB8 UNSPEC_UADD8\n+\t\t\t\tUNSPEC_USUB8 UNSPEC_SADD16 UNSPEC_SASX\n+\t\t\t\tUNSPEC_SSAX UNSPEC_SSUB16 UNSPEC_UADD16\n+\t\t\t\tUNSPEC_UASX UNSPEC_USAX UNSPEC_USUB16])\n+\n (define_int_iterator VQRDMLH_AS [UNSPEC_VQRDMLAH UNSPEC_VQRDMLSH])\n \n (define_int_iterator VFM_LANE_AS [UNSPEC_VFMA_LANE UNSPEC_VFMS_LANE])\n@@ -1064,7 +1069,13 @@\n \t\t\t    (UNSPEC_SXTAB16 \"sxtab16\") (UNSPEC_UXTAB16 \"uxtab16\")\n \t\t\t    (UNSPEC_USAD8 \"usad8\") (UNSPEC_SMLALD \"smlald\")\n \t\t\t    (UNSPEC_SMLALDX \"smlaldx\") (UNSPEC_SMLSLD \"smlsld\")\n-\t\t\t    (UNSPEC_SMLSLDX \"smlsldx\")])\n+\t\t\t    (UNSPEC_SMLSLDX \"smlsldx\")(UNSPEC_SADD8 \"sadd8\")\n+\t\t\t    (UNSPEC_UADD8 \"uadd8\") (UNSPEC_SSUB8 \"ssub8\")\n+\t\t\t    (UNSPEC_USUB8 \"usub8\") (UNSPEC_SADD16 \"sadd16\")\n+\t\t\t    (UNSPEC_SASX \"sasx\") (UNSPEC_SSAX \"ssax\")\n+\t\t\t    (UNSPEC_SSUB16 \"ssub16\") (UNSPEC_UADD16 \"uadd16\")\n+\t\t\t    (UNSPEC_UASX \"uasx\") (UNSPEC_USAX \"usax\")\n+\t\t\t    (UNSPEC_USUB16 \"usub16\")])\n \n ;; Both kinds of return insn.\n (define_code_iterator RETURNS [return simple_return])"}, {"sha": "dfd6dea3421aaa1e1c597d4e7c6c0ad7a856b9fe", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=16155ccf588a403c033ccd7743329671bcfb27d5", "patch": "@@ -71,6 +71,7 @@\n   UNSPEC_UNALIGNED_STORE ; Same for str/strh.\n   UNSPEC_PIC_UNIFIED    ; Create a common pic addressing form.\n   UNSPEC_Q_SET          ; Represent setting the Q bit.\n+  UNSPEC_GE_SET         ; Represent setting the GE bits.\n   UNSPEC_APSR_READ      ; Represent reading the APSR.\n \n   UNSPEC_LL\t\t; Represent an unpaired load-register-exclusive.\n@@ -132,6 +133,19 @@\n   UNSPEC_SMLSLDX\t; Represent the SMLSLDX operation.\n   UNSPEC_SMLAWB\t\t; Represent the SMLAWB operation.\n   UNSPEC_SMLAWT\t\t; Represent the SMLAWT operation.\n+  UNSPEC_SEL\t\t; Represent the SEL operation.\n+  UNSPEC_SADD8\t\t; Represent the SADD8 operation.\n+  UNSPEC_SSUB8\t\t; Represent the SSUB8 operation.\n+  UNSPEC_UADD8\t\t; Represent the UADD8 operation.\n+  UNSPEC_USUB8\t\t; Represent the USUB8 operation.\n+  UNSPEC_SADD16\t\t; Represent the SADD16 operation.\n+  UNSPEC_SASX\t\t; Represent the SASX operation.\n+  UNSPEC_SSAX\t\t; Represent the SSAX operation.\n+  UNSPEC_SSUB16\t\t; Represent the SSUB16 operation.\n+  UNSPEC_UADD16\t\t; Represent the UADD16 operation.\n+  UNSPEC_UASX\t\t; Represent the UASX operation.\n+  UNSPEC_USAX\t\t; Represent the USAX operation.\n+  UNSPEC_USUB16\t\t; Represent the USUB16 operation.\n ])\n \n "}, {"sha": "de6d58a1074276acceb0618eb6768332a463a716", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16155ccf588a403c033ccd7743329671bcfb27d5", "patch": "@@ -1,3 +1,8 @@\n+2019-11-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/arm/acle/simd32.c: Update test.\n+\t* gcc.target/arm/acle/simd32_sel.c: New test.\n+\n 2019-11-07  Kyrylo Tkachov <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/arm/acle/dsp_arith.c: Update test."}, {"sha": "d4304d867f357085877983ca08cd245e444e1958", "filename": "gcc/testsuite/gcc.target/arm/acle/simd32.c", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsimd32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsimd32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsimd32.c?ref=16155ccf588a403c033ccd7743329671bcfb27d5", "patch": "@@ -276,3 +276,99 @@ test_smlsldx (int16x2_t a, int16x2_t b, int64_t c)\n }\n \n /* { dg-final { scan-assembler-times \"\\tsmlsldx\\t...?, ...?, ...?, ...?\" 1 } } */\n+\n+int8x4_t\n+test_sadd8 (int8x4_t a, int8x4_t b)\n+{\n+  return __sadd8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tsadd8\\t...?, ...?, ...?\" 1 } } */\n+\n+int8x4_t\n+test_ssub8 (int8x4_t a, int8x4_t b)\n+{\n+  return __ssub8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tssub8\\t...?, ...?, ...?\" 1 } } */\n+\n+uint8x4_t\n+test_uadd8 (uint8x4_t a, uint8x4_t b)\n+{\n+  return __uadd8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tuadd8\\t...?, ...?, ...?\" 1 } } */\n+\n+uint8x4_t\n+test_usub8 (uint8x4_t a, uint8x4_t b)\n+{\n+  return __usub8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tusub8\\t...?, ...?, ...?\" 1 } } */\n+\n+int16x2_t\n+test_sadd16 (int16x2_t a, int16x2_t b)\n+{\n+  return __sadd16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tsadd8\\t...?, ...?, ...?\" 1 } } */\n+\n+int16x2_t\n+test_sasx (int16x2_t a, int16x2_t b)\n+{\n+  return __sasx (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tsasx\\t...?, ...?, ...?\" 1 } } */\n+\n+int16x2_t\n+test_ssax (int16x2_t a, int16x2_t b)\n+{\n+  return __ssax (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tssax\\t...?, ...?, ...?\" 1 } } */\n+\n+int16x2_t\n+test_ssub16 (int16x2_t a, int16x2_t b)\n+{\n+  return __ssub16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tssub16\\t...?, ...?, ...?\" 1 } } */\n+\n+uint16x2_t\n+test_uadd16 (uint16x2_t a, uint16x2_t b)\n+{\n+  return __uadd16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tuadd16\\t...?, ...?, ...?\" 1 } } */\n+\n+uint16x2_t\n+test_uasx (uint16x2_t a, uint16x2_t b)\n+{\n+  return __uasx (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tuasx\\t...?, ...?, ...?\" 1 } } */\n+\n+uint16x2_t\n+test_usax (uint16x2_t a, uint16x2_t b)\n+{\n+  return __usax (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tusax\\t...?, ...?, ...?\" 1 } } */\n+\n+uint16x2_t\n+test_usub16 (uint16x2_t a, uint16x2_t b)\n+{\n+  return __usub16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tusub16\\t...?, ...?, ...?\" 1 } } */"}, {"sha": "9affc7a8563c78c10f47ae27d31e8a4da00e9f1f", "filename": "gcc/testsuite/gcc.target/arm/acle/simd32_sel.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsimd32_sel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16155ccf588a403c033ccd7743329671bcfb27d5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsimd32_sel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsimd32_sel.c?ref=16155ccf588a403c033ccd7743329671bcfb27d5", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_simd32_ok } */\n+/* { dg-add-options arm_simd32 } */\n+\n+#include <arm_acle.h>\n+\n+int8x4_t\n+test_sel (int8x4_t a, int8x4_t b, uint8x4_t c, uint8x4_t d)\n+{\n+  int8x4_t res1 = __sadd8 (a, b);\n+  return __sel (c, d);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sadd8\\t...?, ...?, ...?\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sel\\t...?, ...?, ...?\" 1 } } */"}]}