{"sha": "21299dbda4ae676baf7de8fef1f19d1b0212bac3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEyOTlkYmRhNGFlNjc2YmFmN2RlOGZlZjFmMTlkMWIwMjEyYmFjMw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2003-06-22T15:59:49Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-06-22T15:59:49Z"}, "message": "safe-ctype.h (HC_UNKNOWN, [...]): Rename to HOST_CHARSET_UNKNOWN...\n\ninclude:\n\t* safe-ctype.h (HC_UNKNOWN, HC_ASCII, HC_EBCDIC): Rename to\n\tHOST_CHARSET_UNKNOWN, HOST_CHARSET_ASCII, HOST_CHARSET_EBCDIC\n\trespectively.\nlibiberty:\n\t* safe-ctype.c: Use HOST_CHARSET_ASCII and HOST_CHARSET_EBCDIC,\n\tnot HC_ASCII and HC_EBCDIC.\n\tAdd documentation in form expected by gather-docs.\n\t* hex.c: Use HOST_CHARSET, not hand-coded check of character set.\n\t* Makefile.in, functions.texi: Regenerate.\ngcc:\n\t* config/i370/i370.c, config/i370/i370.h: Use HOST_CHARSET_ASCII\n\tand HOST_CHARSET_EBCDIC, not HC_ASCII and HC_EBCDIC.\n\nFrom-SVN: r68335", "tree": {"sha": "9d764c33d79e91dfefad69c180ad544118d58cc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d764c33d79e91dfefad69c180ad544118d58cc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21299dbda4ae676baf7de8fef1f19d1b0212bac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21299dbda4ae676baf7de8fef1f19d1b0212bac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21299dbda4ae676baf7de8fef1f19d1b0212bac3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21299dbda4ae676baf7de8fef1f19d1b0212bac3/comments", "author": null, "committer": null, "parents": [{"sha": "3b9cd5c8c1ce29f3ca9d0620ad5ecae4cd25d142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b9cd5c8c1ce29f3ca9d0620ad5ecae4cd25d142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b9cd5c8c1ce29f3ca9d0620ad5ecae4cd25d142"}], "stats": {"total": 264, "additions": 233, "deletions": 31}, "files": [{"sha": "d7eee30218418a8acb7d3a072d919d4112309d27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21299dbda4ae676baf7de8fef1f19d1b0212bac3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21299dbda4ae676baf7de8fef1f19d1b0212bac3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21299dbda4ae676baf7de8fef1f19d1b0212bac3", "patch": "@@ -1,3 +1,8 @@\n+2003-06-22  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config/i370/i370.c, config/i370/i370.h: Use HOST_CHARSET_ASCII\n+\tand HOST_CHARSET_EBCDIC, not HC_ASCII and HC_EBCDIC.\n+\n 2003-06-22  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* doc/rtl.texi: Fix the @findex for pre_modify."}, {"sha": "ee9e8608c77e2d248bb0b44168c39be722b555a6", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21299dbda4ae676baf7de8fef1f19d1b0212bac3/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21299dbda4ae676baf7de8fef1f19d1b0212bac3/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=21299dbda4ae676baf7de8fef1f19d1b0212bac3", "patch": "@@ -121,7 +121,7 @@ static bool i370_rtx_costs PARAMS ((rtx, int, int, int *));\n #ifdef TARGET_HLASM\n \n #define MVS_HASH_PRIME 999983\n-#if HOST_CHARSET == HC_EBCDIC\n+#if HOST_CHARSET == HOST_CHARSET_EBCDIC\n #define MVS_SET_SIZE 256\n #else\n #define MVS_SET_SIZE 128\n@@ -156,7 +156,7 @@ static alias_node_t *alias_anchor = 0;\n    and must handled in a special manner.  */\n static const char *const mvs_function_table[MVS_FUNCTION_TABLE_LENGTH] =\n {\n-#if HOST_CHARSET == HC_EBCDIC /* Changed for EBCDIC collating sequence */\n+#if HOST_CHARSET == HOST_CHARSET_EBCDIC /* Changed for EBCDIC collating sequence */\n    \"ceil\",     \"edc_acos\", \"edc_asin\", \"edc_atan\", \"edc_ata2\", \"edc_cos\",\n    \"edc_cosh\", \"edc_erf\",  \"edc_erfc\", \"edc_exp\",  \"edc_gamm\", \"edc_lg10\",\n    \"edc_log\",  \"edc_sin\",  \"edc_sinh\", \"edc_sqrt\", \"edc_tan\",  \"edc_tanh\",\n@@ -176,7 +176,7 @@ static const char *const mvs_function_table[MVS_FUNCTION_TABLE_LENGTH] =\n #endif /* TARGET_HLASM */\n /* ===================================================== */\n \n-#if defined(TARGET_EBCDIC) && HOST_CHARSET == HC_ASCII\n+#if defined(TARGET_EBCDIC) && HOST_CHARSET == HOST_CHARSET_ASCII\n /* ASCII to EBCDIC conversion table.  */\n static const unsigned char ascebc[256] =\n {\n@@ -231,7 +231,7 @@ static const unsigned char ascebc[256] =\n };\n #endif /* target EBCDIC, host ASCII */\n \n-#if !defined(TARGET_EBCDIC) && HOST_CHARSET == HC_EBCDIC\n+#if !defined(TARGET_EBCDIC) && HOST_CHARSET == HOST_CHARSET_EBCDIC\n /* EBCDIC to ASCII conversion table.  */\n static const unsigned char ebcasc[256] =\n {\n@@ -350,11 +350,11 @@ char\n mvs_map_char (c)\n      int c;\n {\n-#if defined(TARGET_EBCDIC) && HOST_CHARSET == HC_ASCII\n+#if defined(TARGET_EBCDIC) && HOST_CHARSET == HOST_CHARSET_ASCII\n   fprintf (stderr, \"mvs_map_char: TE & !HE: c = %02x\\n\", c);\n   return ascebc[c];\n #else\n-#if !defined(TARGET_EBCDIC) && HOST_CHARSET == HC_EBCDIC\n+#if !defined(TARGET_EBCDIC) && HOST_CHARSET == HOST_CHARSET_EBCDIC\n   fprintf (stderr, \"mvs_map_char: !TE & HE: c = %02x\\n\", c);\n   return ebcasc[c];\n #else"}, {"sha": "d7933c178cd4105a7f12116a28f32b5c238bdade", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21299dbda4ae676baf7de8fef1f19d1b0212bac3/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21299dbda4ae676baf7de8fef1f19d1b0212bac3/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=21299dbda4ae676baf7de8fef1f19d1b0212bac3", "patch": "@@ -141,7 +141,7 @@ extern size_t mvs_function_name_length;\n /* but only define it if really needed, since otherwise it will break builds */\n \n #ifdef TARGET_EBCDIC\n-#if HOST_CHARSET == HC_EBCDIC\n+#if HOST_CHARSET == HOST_CHARSET_EBCDIC\n #define MAP_CHARACTER(c) ((char)(c))\n #else\n #define MAP_CHARACTER(c) ((char)mvs_map_char (c))"}, {"sha": "a76344b3a964bdd6208cd0d137b22886de8da8de", "filename": "include/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21299dbda4ae676baf7de8fef1f19d1b0212bac3/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21299dbda4ae676baf7de8fef1f19d1b0212bac3/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=21299dbda4ae676baf7de8fef1f19d1b0212bac3", "patch": "@@ -1,3 +1,9 @@\n+2003-06-22  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* safe-ctype.h (HC_UNKNOWN, HC_ASCII, HC_EBCDIC): Rename to\n+\tHOST_CHARSET_UNKNOWN, HOST_CHARSET_ASCII, HOST_CHARSET_EBCDIC\n+\trespectively.\n+\n 2003-06-21  Zack Weinberg  <zack@codesourcery.com>\n \n \t* safe-ctype.h (HC_UNKNOWN, HC_ASCII, HC_EBCDIC, HOST_CHARSET):"}, {"sha": "69a3f74cc6fc48a38e489fe9acd9e3735469881c", "filename": "include/safe-ctype.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21299dbda4ae676baf7de8fef1f19d1b0212bac3/include%2Fsafe-ctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21299dbda4ae676baf7de8fef1f19d1b0212bac3/include%2Fsafe-ctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fsafe-ctype.h?ref=21299dbda4ae676baf7de8fef1f19d1b0212bac3", "patch": "@@ -40,19 +40,19 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n /* Determine host character set.  */\n-#define HC_UNKNOWN 0\n-#define HC_ASCII   1\n-#define HC_EBCDIC  2\n+#define HOST_CHARSET_UNKNOWN 0\n+#define HOST_CHARSET_ASCII   1\n+#define HOST_CHARSET_EBCDIC  2\n \n #if  '\\n' == 0x0A && ' ' == 0x20 && '0' == 0x30 \\\n    && 'A' == 0x41 && 'a' == 0x61 && '!' == 0x21\n-#  define HOST_CHARSET HC_ASCII\n+#  define HOST_CHARSET HOST_CHARSET_ASCII\n #else\n # if '\\n' == 0x15 && ' ' == 0x40 && '0' == 0xF0 \\\n    && 'A' == 0xC1 && 'a' == 0x81 && '!' == 0x5A\n-#  define HOST_CHARSET HC_EBCDIC\n+#  define HOST_CHARSET HOST_CHARSET_EBCDIC\n # else\n-#  define HOST_CHARSET HC_UNKNOWN\n+#  define HOST_CHARSET HOST_CHARSET_UNKNOWN\n # endif\n #endif\n "}, {"sha": "913bf54a3e3d06a7954504d619e0ba539269f1e8", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21299dbda4ae676baf7de8fef1f19d1b0212bac3/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21299dbda4ae676baf7de8fef1f19d1b0212bac3/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=21299dbda4ae676baf7de8fef1f19d1b0212bac3", "patch": "@@ -1,3 +1,11 @@\n+2003-06-22  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* safe-ctype.c: Use HOST_CHARSET_ASCII and HOST_CHARSET_EBCDIC,\n+\tnot HC_ASCII and HC_EBCDIC.\n+\tAdd documentation in form expected by gather-docs.\n+\t* hex.c: Use HOST_CHARSET, not hand-coded check of character set.\n+\t* Makefile.in, functions.texi: Regenerate.\n+\n 2003-06-21  Zack Weinberg  <zack@codesourcery.com>\n \n \t* safe-ctype.c: Separate out EOF==-1 check.  Use HOST_CHARSET"}, {"sha": "5d2dc3cbf8d531e04e63fa527ca4498de84ff61b", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21299dbda4ae676baf7de8fef1f19d1b0212bac3/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21299dbda4ae676baf7de8fef1f19d1b0212bac3/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=21299dbda4ae676baf7de8fef1f19d1b0212bac3", "patch": "@@ -447,7 +447,8 @@ getpwd.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n getruntime.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n hashtab.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/hashtab.h \\\n \t$(INCDIR)/libiberty.h\n-hex.o: $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n+hex.o: $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \\\n+\t$(INCDIR)/safe-ctype.h\n lbasename.o: $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \\\n \t$(INCDIR)/safe-ctype.h\n lrealpath.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h"}, {"sha": "aac4424fd8f27927688ad205c813addb88bc7499", "filename": "libiberty/functions.texi", "status": "modified", "additions": 97, "deletions": 3, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21299dbda4ae676baf7de8fef1f19d1b0212bac3/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21299dbda4ae676baf7de8fef1f19d1b0212bac3/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=21299dbda4ae676baf7de8fef1f19d1b0212bac3", "patch": "@@ -3,6 +3,28 @@\n @c Edit the *.c files, configure with --enable-maintainer-mode,\n @c and let gather-docs build you a new copy.\n \n+@c safe-ctype.c:24\n+@defvr Extension HOST_CHARSET\n+This macro indicates the basic character set and encoding used by the\n+host: more precisely, the encoding used for character constants in\n+preprocessor @samp{#if} statements (the C \"execution character set\").\n+It is defined by @file{safe-ctype.h}, and will be an integer constant\n+with one of the following values:\n+\n+@ftable @code\n+@item HOST_CHARSET_UNKNOWN\n+The host character set is unknown - that is, not one of the next two\n+possibilities.\n+\n+@item HOST_CHARSET_ASCII\n+The host character set is ASCII.\n+\n+@item HOST_CHARSET_EBCDIC\n+The host character set is some variant of EBCDIC.  (Only one of the\n+nineteen EBCDIC varying characters is tested; exercise caution.)\n+@end ftable\n+@end defvr\n+\n @c alloca.c:26\n @deftypefn Replacement void* alloca (size_t @var{size})\n \n@@ -317,7 +339,7 @@ between calls to @code{getpwd}.\n \n @end deftypefn\n \n-@c hex.c:25\n+@c hex.c:30\n @deftypefn Extension void hex_init (void)\n \n Initializes the array mapping the current character set to\n@@ -327,7 +349,7 @@ default ASCII-based table will normally be used on ASCII systems.\n \n @end deftypefn\n \n-@c hex.c:34\n+@c hex.c:39\n @deftypefn Extension int hex_p (int @var{c})\n \n Evaluates to non-zero if the given character is a valid hex character,\n@@ -336,7 +358,7 @@ or zero if it is not.  Note that the value you pass will be cast to\n \n @end deftypefn\n \n-@c hex.c:42\n+@c hex.c:47\n @deftypefn Extension unsigned int hex_value (int @var{c})\n \n Returns the numeric equivalent of the given character when interpreted\n@@ -382,6 +404,78 @@ struct qelem @{\n \n @end deftypefn\n \n+@c safe-ctype.c:45\n+@deffn  Extension ISALPHA  (@var{c})\n+@deffnx Extension ISALNUM  (@var{c})\n+@deffnx Extension ISBLANK  (@var{c})\n+@deffnx Extension ISCNTRL  (@var{c})\n+@deffnx Extension ISDIGIT  (@var{c})\n+@deffnx Extension ISGRAPH  (@var{c})\n+@deffnx Extension ISLOWER  (@var{c})\n+@deffnx Extension ISPRINT  (@var{c})\n+@deffnx Extension ISPUNCT  (@var{c})\n+@deffnx Extension ISSPACE  (@var{c})\n+@deffnx Extension ISUPPER  (@var{c})\n+@deffnx Extension ISXDIGIT (@var{c})\n+\n+These twelve macros are defined by @file{safe-ctype.h}.  Each has the\n+same meaning as the corresponding macro (with name in lowercase)\n+defined by the standard header @file{ctype.h}.  For example,\n+@code{ISALPHA} returns true for alphabetic characters and false for\n+others.  However, there are two differences between these macros and\n+those provided by @file{ctype.h}:\n+\n+@itemize @bullet\n+@item These macros are guaranteed to have well-defined behavior for all \n+values representable by @code{signed char} and @code{unsigned char}, and\n+for @code{EOF}.\n+\n+@item These macros ignore the current locale; they are true for these\n+fixed sets of characters:\n+@multitable {@code{XDIGIT}} {yada yada yada yada yada yada yada yada}\n+@item @code{ALPHA}  @tab @kbd{A-Za-z}\n+@item @code{ALNUM}  @tab @kbd{A-Za-z0-9}\n+@item @code{BLANK}  @tab @kbd{space tab}\n+@item @code{CNTRL}  @tab @code{!PRINT}\n+@item @code{DIGIT}  @tab @kbd{0-9}\n+@item @code{GRAPH}  @tab @code{ALNUM || PUNCT}\n+@item @code{LOWER}  @tab @kbd{a-z}\n+@item @code{PRINT}  @tab @code{GRAPH ||} @kbd{space}\n+@item @code{PUNCT}  @tab @kbd{`~!@@#$%^&*()_-=+[@{]@}\\|;:'\",<.>/?}\n+@item @code{SPACE}  @tab @kbd{space tab \\n \\r \\f \\v}\n+@item @code{UPPER}  @tab @kbd{A-Z}\n+@item @code{XDIGIT} @tab @kbd{0-9A-Fa-f}\n+@end multitable\n+\n+Note that, if the host character set is ASCII or a superset thereof,\n+all these macros will return false for all values of @code{char} outside\n+the range of 7-bit ASCII.  In particular, both ISPRINT and ISCNTRL return\n+false for characters with numeric values from 128 to 255.\n+@end itemize\n+@end deffn\n+\n+@c safe-ctype.c:94\n+@deffn  Extension ISIDNUM         (@var{c})\n+@deffnx Extension ISIDST          (@var{c})\n+@deffnx Extension IS_VSPACE       (@var{c})\n+@deffnx Extension IS_NVSPACE      (@var{c})\n+@deffnx Extension IS_SPACE_OR_NUL (@var{c})\n+@deffnx Extension IS_ISOBASIC     (@var{c})\n+These six macros are defined by @file{safe-ctype.h} and provide\n+additional character classes which are useful when doing lexical\n+analysis of C or similar languages.  They are true for the following\n+sets of characters:\n+\n+@multitable {@code{SPACE_OR_NUL}} {yada yada yada yada yada yada yada yada}\n+@item @code{IDNUM}        @tab @kbd{A-Za-z0-9_}\n+@item @code{IDST}         @tab @kbd{A-Za-z_}\n+@item @code{VSPACE}       @tab @kbd{\\r \\n}\n+@item @code{NVSPACE}      @tab @kbd{space tab \\f \\v \\0}\n+@item @code{SPACE_OR_NUL} @tab @code{VSPACE || NVSPACE}\n+@item @code{ISOBASIC}     @tab @code{VSPACE || NVSPACE || PRINT}\n+@end multitable\n+@end deffn\n+\n @c lbasename.c:23\n @deftypefn Replacement {const char*} lbasename (const char *@var{name})\n "}, {"sha": "e4c5dfa2f1dc6786a02d5a9875921d361bed47d3", "filename": "libiberty/hex.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21299dbda4ae676baf7de8fef1f19d1b0212bac3/libiberty%2Fhex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21299dbda4ae676baf7de8fef1f19d1b0212bac3/libiberty%2Fhex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhex.c?ref=21299dbda4ae676baf7de8fef1f19d1b0212bac3", "patch": "@@ -19,6 +19,11 @@ Boston, MA 02111-1307, USA.  */\n \n #include <stdio.h>  /* for EOF */\n #include \"libiberty.h\"\n+#include \"safe-ctype.h\" /* for HOST_CHARSET_ASCII */\n+\n+#if EOF != -1\n+ #error \"hex.c requires EOF == -1\"\n+#endif\n \n /*\n \n@@ -62,9 +67,7 @@ systems.\n \n \n /* Are we ASCII? */\n-#if '\\n' == 0x0A && ' ' == 0x20 && '0' == 0x30 \\\n-  && 'A' == 0x41 && 'a' == 0x61 && '!' == 0x21 \\\n-  && EOF == -1\n+#if HOST_CHARSET == HOST_CHARSET_ASCII\n \n const unsigned char _hex_value[_hex_array_size] =\n {"}, {"sha": "91a0e9a25898542d808340a0163745cb8a2d7065", "filename": "libiberty/safe-ctype.c", "status": "modified", "additions": 96, "deletions": 11, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21299dbda4ae676baf7de8fef1f19d1b0212bac3/libiberty%2Fsafe-ctype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21299dbda4ae676baf7de8fef1f19d1b0212bac3/libiberty%2Fsafe-ctype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsafe-ctype.c?ref=21299dbda4ae676baf7de8fef1f19d1b0212bac3", "patch": "@@ -19,15 +19,100 @@ License along with libiberty; see the file COPYING.LIB.  If\n not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* This is a compatible replacement of the standard C library's <ctype.h>\n-   with the following properties:\n-\n-   - Implements all isxxx() macros required by C99.\n-   - Also implements some character classes useful when\n-     parsing C-like languages.\n-   - Does not change behavior depending on the current locale.\n-   - Behaves properly for all values in the range of a signed or\n-     unsigned char.  */\n+/*\n+\n+@defvr Extension HOST_CHARSET\n+This macro indicates the basic character set and encoding used by the\n+host: more precisely, the encoding used for character constants in\n+preprocessor @samp{#if} statements (the C \"execution character set\").\n+It is defined by @file{safe-ctype.h}, and will be an integer constant\n+with one of the following values:\n+\n+@ftable @code\n+@item HOST_CHARSET_UNKNOWN\n+The host character set is unknown - that is, not one of the next two\n+possibilities.\n+\n+@item HOST_CHARSET_ASCII\n+The host character set is ASCII.\n+\n+@item HOST_CHARSET_EBCDIC\n+The host character set is some variant of EBCDIC.  (Only one of the\n+nineteen EBCDIC varying characters is tested; exercise caution.)\n+@end ftable\n+@end defvr\n+\n+@deffn  Extension ISALPHA  (@var{c})\n+@deffnx Extension ISALNUM  (@var{c})\n+@deffnx Extension ISBLANK  (@var{c})\n+@deffnx Extension ISCNTRL  (@var{c})\n+@deffnx Extension ISDIGIT  (@var{c})\n+@deffnx Extension ISGRAPH  (@var{c})\n+@deffnx Extension ISLOWER  (@var{c})\n+@deffnx Extension ISPRINT  (@var{c})\n+@deffnx Extension ISPUNCT  (@var{c})\n+@deffnx Extension ISSPACE  (@var{c})\n+@deffnx Extension ISUPPER  (@var{c})\n+@deffnx Extension ISXDIGIT (@var{c})\n+\n+These twelve macros are defined by @file{safe-ctype.h}.  Each has the\n+same meaning as the corresponding macro (with name in lowercase)\n+defined by the standard header @file{ctype.h}.  For example,\n+@code{ISALPHA} returns true for alphabetic characters and false for\n+others.  However, there are two differences between these macros and\n+those provided by @file{ctype.h}:\n+\n+@itemize @bullet\n+@item These macros are guaranteed to have well-defined behavior for all \n+values representable by @code{signed char} and @code{unsigned char}, and\n+for @code{EOF}.\n+\n+@item These macros ignore the current locale; they are true for these\n+fixed sets of characters:\n+@multitable {@code{XDIGIT}} {yada yada yada yada yada yada yada yada}\n+@item @code{ALPHA}  @tab @kbd{A-Za-z}\n+@item @code{ALNUM}  @tab @kbd{A-Za-z0-9}\n+@item @code{BLANK}  @tab @kbd{space tab}\n+@item @code{CNTRL}  @tab @code{!PRINT}\n+@item @code{DIGIT}  @tab @kbd{0-9}\n+@item @code{GRAPH}  @tab @code{ALNUM || PUNCT}\n+@item @code{LOWER}  @tab @kbd{a-z}\n+@item @code{PRINT}  @tab @code{GRAPH ||} @kbd{space}\n+@item @code{PUNCT}  @tab @kbd{`~!@@#$%^&*()_-=+[@{]@}\\|;:'\",<.>/?}\n+@item @code{SPACE}  @tab @kbd{space tab \\n \\r \\f \\v}\n+@item @code{UPPER}  @tab @kbd{A-Z}\n+@item @code{XDIGIT} @tab @kbd{0-9A-Fa-f}\n+@end multitable\n+\n+Note that, if the host character set is ASCII or a superset thereof,\n+all these macros will return false for all values of @code{char} outside\n+the range of 7-bit ASCII.  In particular, both ISPRINT and ISCNTRL return\n+false for characters with numeric values from 128 to 255.\n+@end itemize\n+@end deffn\n+\n+@deffn  Extension ISIDNUM         (@var{c})\n+@deffnx Extension ISIDST          (@var{c})\n+@deffnx Extension IS_VSPACE       (@var{c})\n+@deffnx Extension IS_NVSPACE      (@var{c})\n+@deffnx Extension IS_SPACE_OR_NUL (@var{c})\n+@deffnx Extension IS_ISOBASIC     (@var{c})\n+These six macros are defined by @file{safe-ctype.h} and provide\n+additional character classes which are useful when doing lexical\n+analysis of C or similar languages.  They are true for the following\n+sets of characters:\n+\n+@multitable {@code{SPACE_OR_NUL}} {yada yada yada yada yada yada yada yada}\n+@item @code{IDNUM}        @tab @kbd{A-Za-z0-9_}\n+@item @code{IDST}         @tab @kbd{A-Za-z_}\n+@item @code{VSPACE}       @tab @kbd{\\r \\n}\n+@item @code{NVSPACE}      @tab @kbd{space tab \\f \\v \\0}\n+@item @code{SPACE_OR_NUL} @tab @code{VSPACE || NVSPACE}\n+@item @code{ISOBASIC}     @tab @code{VSPACE || NVSPACE || PRINT}\n+@end multitable\n+@end deffn\n+\n+*/\n \n #include \"ansidecl.h\"\n #include <safe-ctype.h>\n@@ -68,7 +153,7 @@ Boston, MA 02111-1307, USA.  */\n #define S  (const unsigned short) (nv|sp|bl|pr)\t/* space */\n \n /* Are we ASCII? */\n-#if HOST_CHARSET == HC_ASCII\n+#if HOST_CHARSET == HOST_CHARSET_ASCII\n \n const unsigned short _sch_istable[256] =\n {\n@@ -161,7 +246,7 @@ const unsigned char _sch_toupper[256] =\n };\n \n #else\n-# if HOST_CHARSET == HC_EBCDIC\n+# if HOST_CHARSET == HOST_CHARSET_EBCDIC\n   #error \"FIXME: write tables for EBCDIC\"\n # else\n   #error \"Unrecognized host character set\""}]}