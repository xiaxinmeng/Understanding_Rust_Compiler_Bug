{"sha": "47e5754e17e9ac3b86b88aa57a58baee6d79fe16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdlNTc1NGUxN2U5YWMzYjg2Yjg4YWE1N2E1OGJhZWU2ZDc5ZmUxNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-12-10T14:15:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-12-10T14:15:34Z"}, "message": "tree-ssa-structalias.c (struct variable_info): Add is_ipa_escape_point flag.\n\n2015-12-10  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-structalias.c (struct variable_info): Add\n\tis_ipa_escape_point flag.\n\t(new_var_info): Initialize to false.\n\t(find_func_aliases): Generate escape constraints for stores\n\tproperly in IPA mode.\n\t(ipa_pta_execute): Compute is_ipa_escape_point for globals.\n\nFrom-SVN: r231514", "tree": {"sha": "0f9a62483238bcbd831bd3f20ed80eb2afddfaaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f9a62483238bcbd831bd3f20ed80eb2afddfaaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47e5754e17e9ac3b86b88aa57a58baee6d79fe16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47e5754e17e9ac3b86b88aa57a58baee6d79fe16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47e5754e17e9ac3b86b88aa57a58baee6d79fe16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47e5754e17e9ac3b86b88aa57a58baee6d79fe16/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d747d0057c694f600da48ff11a0cf6b10aea9dbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d747d0057c694f600da48ff11a0cf6b10aea9dbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d747d0057c694f600da48ff11a0cf6b10aea9dbf"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "5e166f1da71d92e26f9f83daad823e5a239f8e3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e5754e17e9ac3b86b88aa57a58baee6d79fe16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e5754e17e9ac3b86b88aa57a58baee6d79fe16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47e5754e17e9ac3b86b88aa57a58baee6d79fe16", "patch": "@@ -1,3 +1,12 @@\n+2015-12-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-structalias.c (struct variable_info): Add\n+\tis_ipa_escape_point flag.\n+\t(new_var_info): Initialize to false.\n+\t(find_func_aliases): Generate escape constraints for stores\n+\tproperly in IPA mode.\n+\t(ipa_pta_execute): Compute is_ipa_escape_point for globals.\n+\n 2015-12-10  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/atomic.md: Add new file."}, {"sha": "7420ce16f8178a992babc61e4ddde5f2a1f2259b", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e5754e17e9ac3b86b88aa57a58baee6d79fe16/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e5754e17e9ac3b86b88aa57a58baee6d79fe16/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=47e5754e17e9ac3b86b88aa57a58baee6d79fe16", "patch": "@@ -160,6 +160,8 @@\n    The is_global_var bit which marks escape points is overly conservative\n    in IPA mode.  Split it to is_escape_point and is_global_var - only\n    externally visible globals are escape points in IPA mode.\n+   There is now is_ipa_escape_point but this is only used in a few\n+   selected places.\n \n    The way we introduce DECL_PT_UID to avoid fixing up all points-to\n    sets in the translation unit when we copy a DECL during inlining\n@@ -265,6 +267,9 @@ struct variable_info\n   /* True if this represents a global variable.  */\n   unsigned int is_global_var : 1;\n \n+  /* True if this represents a module escape point for IPA analysis.  */\n+  unsigned int is_ipa_escape_point : 1;\n+\n   /* True if this represents a IPA function info.  */\n   unsigned int is_fn_info : 1;\n \n@@ -374,6 +379,7 @@ new_var_info (tree t, const char *name, bool add_id)\n   ret->is_restrict_var = false;\n   ret->ruid = 0;\n   ret->is_global_var = (t == NULL_TREE);\n+  ret->is_ipa_escape_point = false;\n   ret->is_fn_info = false;\n   if (t && DECL_P (t))\n     ret->is_global_var = (is_global_var (t)\n@@ -4779,11 +4785,13 @@ find_func_aliases (struct function *fn, gimple *origt)\n \t}\n       /* If there is a store to a global variable the rhs escapes.  */\n       if ((lhsop = get_base_address (lhsop)) != NULL_TREE\n-\t  && DECL_P (lhsop)\n-\t  && is_global_var (lhsop)\n-\t  && (!in_ipa_mode\n-\t      || DECL_EXTERNAL (lhsop) || TREE_PUBLIC (lhsop)))\n-\tmake_escape_constraint (rhsop);\n+\t  && DECL_P (lhsop))\n+\t{\n+\t  varinfo_t vi = get_vi_for_tree (lhsop);\n+\t  if ((! in_ipa_mode && vi->is_global_var)\n+\t      || vi->is_ipa_escape_point)\n+\t    make_escape_constraint (rhsop);\n+\t}\n     }\n   /* Handle escapes through return.  */\n   else if (gimple_code (t) == GIMPLE_RETURN\n@@ -4794,8 +4802,7 @@ find_func_aliases (struct function *fn, gimple *origt)\n       if (!in_ipa_mode\n \t  || !(fi = get_vi_for_tree (fn->decl)))\n \tmake_escape_constraint (gimple_return_retval (return_stmt));\n-      else if (in_ipa_mode\n-\t       && fi != NULL)\n+      else if (in_ipa_mode)\n \t{\n \t  struct constraint_expr lhs ;\n \t  struct constraint_expr *rhsp;\n@@ -7498,7 +7505,15 @@ ipa_pta_execute (void)\n       if (var->alias && var->analyzed)\n \tcontinue;\n \n-      get_vi_for_tree (var->decl);\n+      varinfo_t vi = get_vi_for_tree (var->decl);\n+\n+      /* For the purpose of IPA PTA unit-local globals are not\n+         escape points.  */\n+      bool nonlocal_p = (var->used_from_other_partition\n+\t\t\t || var->externally_visible\n+\t\t\t || var->force_output);\n+      if (nonlocal_p)\n+\tvi->is_ipa_escape_point = true;\n     }\n \n   if (dump_file"}]}