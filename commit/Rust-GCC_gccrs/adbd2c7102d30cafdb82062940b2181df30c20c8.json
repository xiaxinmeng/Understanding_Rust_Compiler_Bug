{"sha": "adbd2c7102d30cafdb82062940b2181df30c20c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRiZDJjNzEwMmQzMGNhZmRiODIwNjI5NDBiMjE4MWRmMzBjMjBjOA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-20T16:41:42Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-20T16:41:42Z"}, "message": "libstdc++: Implement P2210 changes to rename views::split to lazy_split\n\nThis mostly mechanical patch renames split to lazy_split throughout.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges: Rename views::split to views::lazy_split,\n\tsplit_view to lazy_split_view, etc. throughout.\n\t* testsuite/std/ranges/*: Likewise.", "tree": {"sha": "8d2190ce30803d282ce7df247a9a096b431de540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d2190ce30803d282ce7df247a9a096b431de540"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adbd2c7102d30cafdb82062940b2181df30c20c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adbd2c7102d30cafdb82062940b2181df30c20c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adbd2c7102d30cafdb82062940b2181df30c20c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adbd2c7102d30cafdb82062940b2181df30c20c8/comments", "author": null, "committer": null, "parents": [{"sha": "3f631671f17f44c611c70c59ef3338eab2ab67b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f631671f17f44c611c70c59ef3338eab2ab67b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f631671f17f44c611c70c59ef3338eab2ab67b3"}], "stats": {"total": 200, "additions": 100, "deletions": 100}, "files": [{"sha": "a7885f36f7e58fed0b5d28ca85fcab0feb66e553", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=adbd2c7102d30cafdb82062940b2181df30c20c8", "patch": "@@ -2826,19 +2826,19 @@ namespace views::__adaptor\n \t&& (remove_reference_t<_Range>::size() <= 1);\n \n     template<typename _Base>\n-      struct __split_view_outer_iter_cat\n+      struct __lazy_split_view_outer_iter_cat\n       { };\n \n     template<forward_range _Base>\n-      struct __split_view_outer_iter_cat<_Base>\n+      struct __lazy_split_view_outer_iter_cat<_Base>\n       { using iterator_category = input_iterator_tag; };\n \n     template<typename _Base>\n-      struct __split_view_inner_iter_cat\n+      struct __lazy_split_view_inner_iter_cat\n       { };\n \n     template<forward_range _Base>\n-      struct __split_view_inner_iter_cat<_Base>\n+      struct __lazy_split_view_inner_iter_cat<_Base>\n       {\n       private:\n \tstatic constexpr auto\n@@ -2860,7 +2860,7 @@ namespace views::__adaptor\n       && indirectly_comparable<iterator_t<_Vp>, iterator_t<_Pattern>,\n \t\t\t       ranges::equal_to>\n       && (forward_range<_Vp> || __detail::__tiny_range<_Pattern>)\n-    class split_view : public view_interface<split_view<_Vp, _Pattern>>\n+    class lazy_split_view : public view_interface<lazy_split_view<_Vp, _Pattern>>\n     {\n     private:\n       template<bool _Const>\n@@ -2871,17 +2871,17 @@ namespace views::__adaptor\n \n       template<bool _Const>\n \tstruct _OuterIter\n-\t  : __detail::__split_view_outer_iter_cat<_Base<_Const>>\n+\t  : __detail::__lazy_split_view_outer_iter_cat<_Base<_Const>>\n \t{\n \tprivate:\n-\t  using _Parent = __detail::__maybe_const_t<_Const, split_view>;\n-\t  using _Base = split_view::_Base<_Const>;\n+\t  using _Parent = __detail::__maybe_const_t<_Const, lazy_split_view>;\n+\t  using _Base = lazy_split_view::_Base<_Const>;\n \n \t  constexpr bool\n \t  __at_end() const\n \t  { return __current() == ranges::end(_M_parent->_M_base) && !_M_trailing_empty; }\n \n-\t  // [range.split.outer] p1\n+\t  // [range.lazy.split.outer] p1\n \t  //  Many of the following specifications refer to the notional member\n \t  //  current of outer-iterator.  current is equivalent to current_ if\n \t  //  V models forward_range, and parent_->current_ otherwise.\n@@ -2915,7 +2915,7 @@ namespace views::__adaptor\n \t  using iterator_concept = conditional_t<forward_range<_Base>,\n \t\t\t\t\t\t forward_iterator_tag,\n \t\t\t\t\t\t input_iterator_tag>;\n-\t  // iterator_category defined in __split_view_outer_iter_cat\n+\t  // iterator_category defined in __lazy_split_view_outer_iter_cat\n \t  using difference_type = range_difference_t<_Base>;\n \n \t  struct value_type : view_interface<value_type>\n@@ -2969,7 +2969,7 @@ namespace views::__adaptor\n \t  operator++()\n \t  {\n \t    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t    // 3505. split_view::outer-iterator::operator++ misspecified\n+\t    // 3505. lazy_split_view::outer-iterator::operator++ misspecified\n \t    const auto __end = ranges::end(_M_parent->_M_base);\n \t    if (__current() == __end)\n \t      {\n@@ -3037,10 +3037,10 @@ namespace views::__adaptor\n \n       template<bool _Const>\n \tstruct _InnerIter\n-\t  : __detail::__split_view_inner_iter_cat<_Base<_Const>>\n+\t  : __detail::__lazy_split_view_inner_iter_cat<_Base<_Const>>\n \t{\n \tprivate:\n-\t  using _Base = split_view::_Base<_Const>;\n+\t  using _Base = lazy_split_view::_Base<_Const>;\n \n \t  constexpr bool\n \t  __at_end() const\n@@ -3088,7 +3088,7 @@ namespace views::__adaptor\n \tpublic:\n \t  using iterator_concept\n \t    = typename _OuterIter<_Const>::iterator_concept;\n-\t  // iterator_category defined in __split_view_inner_iter_cat\n+\t  // iterator_category defined in __lazy_split_view_inner_iter_cat\n \t  using value_type = range_value_t<_Base>;\n \t  using difference_type = range_difference_t<_Base>;\n \n@@ -3166,20 +3166,20 @@ namespace views::__adaptor\n \n \n     public:\n-      split_view() requires (default_initializable<_Vp>\n-\t\t\t     && default_initializable<_Pattern>)\n+      lazy_split_view() requires (default_initializable<_Vp>\n+\t\t\t\t  && default_initializable<_Pattern>)\n \t= default;\n \n       constexpr\n-      split_view(_Vp __base, _Pattern __pattern)\n+      lazy_split_view(_Vp __base, _Pattern __pattern)\n \t: _M_pattern(std::move(__pattern)), _M_base(std::move(__base))\n       { }\n \n       template<input_range _Range>\n \trequires constructible_from<_Vp, views::all_t<_Range>>\n \t  && constructible_from<_Pattern, single_view<range_value_t<_Range>>>\n \tconstexpr\n-\tsplit_view(_Range&& __r, range_value_t<_Range> __e)\n+\tlazy_split_view(_Range&& __r, range_value_t<_Range> __e)\n \t  : _M_pattern(views::single(std::move(__e))),\n \t    _M_base(views::all(std::forward<_Range>(__r)))\n \t{ }\n@@ -3231,35 +3231,35 @@ namespace views::__adaptor\n     };\n \n   template<typename _Range, typename _Pattern>\n-    split_view(_Range&&, _Pattern&&)\n-      -> split_view<views::all_t<_Range>, views::all_t<_Pattern>>;\n+    lazy_split_view(_Range&&, _Pattern&&)\n+      -> lazy_split_view<views::all_t<_Range>, views::all_t<_Pattern>>;\n \n   template<input_range _Range>\n-    split_view(_Range&&, range_value_t<_Range>)\n-      -> split_view<views::all_t<_Range>, single_view<range_value_t<_Range>>>;\n+    lazy_split_view(_Range&&, range_value_t<_Range>)\n+      -> lazy_split_view<views::all_t<_Range>, single_view<range_value_t<_Range>>>;\n \n   namespace views\n   {\n     namespace __detail\n     {\n       template<typename _Range, typename _Pattern>\n-\tconcept __can_split_view\n-\t  = requires { split_view(std::declval<_Range>(), std::declval<_Pattern>()); };\n+\tconcept __can_lazy_split_view\n+\t  = requires { lazy_split_view(std::declval<_Range>(), std::declval<_Pattern>()); };\n     } // namespace __detail\n \n-    struct _Split : __adaptor::_RangeAdaptor<_Split>\n+    struct _LazySplit : __adaptor::_RangeAdaptor<_LazySplit>\n     {\n       template<viewable_range _Range, typename _Pattern>\n-\trequires __detail::__can_split_view<_Range, _Pattern>\n+\trequires __detail::__can_lazy_split_view<_Range, _Pattern>\n \tconstexpr auto\n \toperator()(_Range&& __r, _Pattern&& __f) const\n \t{\n-\t  return split_view(std::forward<_Range>(__r), std::forward<_Pattern>(__f));\n+\t  return lazy_split_view(std::forward<_Range>(__r), std::forward<_Pattern>(__f));\n \t}\n \n-      using _RangeAdaptor<_Split>::operator();\n+      using _RangeAdaptor<_LazySplit>::operator();\n       static constexpr int _S_arity = 2;\n-      // The pattern argument of views::split is not always simple -- it can be\n+      // The pattern argument of views::lazy_split is not always simple -- it can be\n       // a non-view range, the value category of which affects whether the call\n       // is well-formed.  But a scalar or a view pattern argument is surely\n       // simple.\n@@ -3269,7 +3269,7 @@ namespace views::__adaptor\n \t\t\t\t      && copy_constructible<_Pattern>);\n     };\n \n-    inline constexpr _Split split;\n+    inline constexpr _LazySplit lazy_split;\n   } // namespace views\n \n   namespace views"}, {"sha": "b8c1e6f4f5787495752dba35851a6c5697f931c4", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/100479.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F100479.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F100479.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F100479.cc?ref=adbd2c7102d30cafdb82062940b2181df30c20c8", "patch": "@@ -90,7 +90,7 @@ test03()\n   // Propagating cached iterators during copy/move would cause these asserts\n   // to fail here.\n   auto v = views::single(1)\n-    | views::split(1)\n+    | views::lazy_split(1)\n     | views::drop(0)\n     | views::drop_while([](auto) { return false; })\n     | views::filter([](auto) { return true; });"}, {"sha": "5ef7f3f59a7ac7c724f20bd4480451bba3575dfc", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/100577.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F100577.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F100577.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F100577.cc?ref=adbd2c7102d30cafdb82062940b2181df30c20c8", "patch": "@@ -38,11 +38,11 @@ test01()\n   static_assert(__adaptor_has_simple_extra_args<decltype(views::take), int>);\n   static_assert(__adaptor_has_simple_extra_args<decltype(views::take_while), identity>);\n   static_assert(__adaptor_has_simple_extra_args<decltype(views::drop_while), identity>);\n-  static_assert(__adaptor_has_simple_extra_args<decltype(views::split), std::string_view>);\n-  static_assert(__adaptor_has_simple_extra_args<decltype(views::split), char>);\n-  static_assert(!__adaptor_has_simple_extra_args<decltype(views::split), std::string>);\n+  static_assert(__adaptor_has_simple_extra_args<decltype(views::lazy_split), std::string_view>);\n+  static_assert(__adaptor_has_simple_extra_args<decltype(views::lazy_split), char>);\n+  static_assert(!__adaptor_has_simple_extra_args<decltype(views::lazy_split), std::string>);\n \n-  // Verify all adaptor closures except for views::split(pattern) have a simple\n+  // Verify all adaptor closures except for views::lazy_split(pattern) have a simple\n   // operator().\n   using views::__adaptor::__closure_has_simple_call_op;\n   __closure_has_simple_call_op auto a00 = views::all;\n@@ -56,14 +56,14 @@ test01()\n   __closure_has_simple_call_op auto a08 = views::common;\n   __closure_has_simple_call_op auto a09 = views::reverse;\n   __closure_has_simple_call_op auto a10 = views::keys;\n-  __closure_has_simple_call_op auto a11 = views::split(' ');\n+  __closure_has_simple_call_op auto a11 = views::lazy_split(' ');\n   // Verify composition of simple closures is simple.\n   __closure_has_simple_call_op auto b\n     = (a00 | a01) | (a02 | a03) | (a04 | a05 | a06) | (a07 | a08 | a09 | a10) | a11;\n \n-  // Verify views::split(non_view_range) is an exception.\n+  // Verify views::lazy_split(non_view_range) is an exception.\n   extern std::string s;\n-  auto a12 = views::split(s);\n+  auto a12 = views::lazy_split(s);\n   static_assert(!__closure_has_simple_call_op<decltype(a12)>);\n   static_assert(!__closure_has_simple_call_op<decltype(a12 | a00)>);\n   static_assert(!__closure_has_simple_call_op<decltype(a00 | a12)>);\n@@ -91,9 +91,9 @@ test02()\n   // implemented using a fallback deleted overload, so when a call is\n   // ill-formed overload resolution succeeds but selects the deleted overload\n   // (but only when the closure is invoked as an rvalue).\n-  views::split(badarg)(x); // { dg-error \"deleted function\" }\n-  (views::split(badarg) | views::all)(x); // { dg-error \"deleted function\" }\n-  auto a0 = views::split(badarg);\n+  views::lazy_split(badarg)(x); // { dg-error \"deleted function\" }\n+  (views::lazy_split(badarg) | views::all)(x); // { dg-error \"deleted function\" }\n+  auto a0 = views::lazy_split(badarg);\n   a0(x); // { dg-error \"no match\" };\n   auto a1 = a0 | views::all;\n   a1(x); // { dg-error \"no match\" }"}, {"sha": "50af3fdf7298408249420785fd218ef1d234e018", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/join.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc?ref=adbd2c7102d30cafdb82062940b2181df30c20c8", "patch": "@@ -93,7 +93,7 @@ test05()\n {\n   using namespace std::literals;\n   std::vector<std::string> x = {\"the\", \" \", \"quick\", \" \", \"brown\", \" \", \"fox\"};\n-  auto v = x | views::join | views::split(' ');\n+  auto v = x | views::join | views::lazy_split(' ');\n   auto i = v.begin();\n   VERIFY( ranges::equal(*i++, \"the\"sv) );\n   VERIFY( ranges::equal(*i++, \"quick\"sv) );"}, {"sha": "cfd9983f34e5b4a04543bbdc809f35c9ef546e38", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/lazy_split.cc", "status": "renamed", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flazy_split.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flazy_split.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flazy_split.cc?ref=adbd2c7102d30cafdb82062940b2181df30c20c8", "patch": "@@ -39,7 +39,7 @@ test01()\n {\n   auto x = \"the  quick  brown  fox\"sv;\n   auto p = std::string{\"  \"};\n-  auto v = x | views::split(views::all(p)); // views::all is needed here after P2281.\n+  auto v = x | views::lazy_split(views::all(p)); // views::all is needed here after P2281.\n   auto i = v.begin();\n   VERIFY( ranges::equal(*i++, \"the\"sv) );\n   VERIFY( ranges::equal(*i++, \"quick\"sv) );\n@@ -52,7 +52,7 @@ void\n test02()\n {\n   auto x = \"the quick brown fox\"sv;\n-  auto v = x | views::split(' ');\n+  auto v = x | views::lazy_split(' ');\n   auto i = v.begin();\n   VERIFY( ranges::equal(*i++, \"the\"sv) );\n   VERIFY( ranges::equal(*i++, \"quick\"sv) );\n@@ -66,7 +66,7 @@ test03()\n {\n   char x[] = \"the quick brown fox\";\n   test_range<char, forward_iterator_wrapper> rx(x, x+sizeof(x)-1);\n-  auto v = rx | views::split(' ');\n+  auto v = rx | views::lazy_split(' ');\n   auto i = v.begin();\n   VERIFY( ranges::equal(*i++, \"the\"sv) );\n   VERIFY( ranges::equal(*i++, \"quick\"sv) );\n@@ -83,7 +83,7 @@ test04()\n   static_assert(!ranges::view<decltype(p)>);\n   static_assert(std::same_as<decltype(p | views::all),\n \t\t\t     ranges::ref_view<decltype(p)>>);\n-  auto v = x | views::split(views::all(p)); // views::all is needed here after P2281.\n+  auto v = x | views::lazy_split(views::all(p)); // views::all is needed here after P2281.\n   auto i = v.begin();\n   VERIFY( ranges::equal(*i++, \"the\"sv) );\n   VERIFY( ranges::equal(*i++, \"quick\"sv) );\n@@ -102,7 +102,7 @@ test05()\n   std::string str\n     = \"Now is the time for all good men to come to the aid of their county.\";\n   auto rng\n-    = str | views::split(' ') | views::transform(as_string) | views::common;\n+    = str | views::lazy_split(' ') | views::transform(as_string) | views::common;\n   std::vector<std::string> words(rng.begin(), rng.end());\n   auto not_space_p = [](char c) { return c != ' '; };\n   VERIFY( ranges::equal(words | views::join,\n@@ -113,7 +113,7 @@ void\n test06()\n {\n   std::string str = \"hello world\";\n-  auto v = str | views::transform(std::identity{}) | views::split(' ');\n+  auto v = str | views::transform(std::identity{}) | views::lazy_split(' ');\n \n   // Verify that _Iterator<false> is implicitly convertible to _Iterator<true>.\n   static_assert(!std::same_as<decltype(ranges::begin(v)),\n@@ -126,7 +126,7 @@ void\n test07()\n {\n   char str[] = \"banana split\";\n-  auto split = str | views::split(' ');\n+  auto split = str | views::lazy_split(' ');\n   auto val = *split.begin();\n   auto b = val.begin();\n   auto b2 = b++;\n@@ -139,7 +139,7 @@ test08()\n {\n   char x[] = \"the quick brown fox\";\n   test_range<char, input_iterator_wrapper> rx(x, x+sizeof(x)-1);\n-  auto v = rx | views::split(' ');\n+  auto v = rx | views::lazy_split(' ');\n   auto i = v.begin();\n   VERIFY( ranges::equal(*i, \"the\"sv) );\n   ++i;\n@@ -152,32 +152,32 @@ test08()\n   VERIFY( i == v.end() );\n }\n \n-template<auto split = views::split>\n+template<auto lazy_split = views::lazy_split>\n void\n test09()\n {\n   // Verify SFINAE behavior.\n   std::string s, p;\n-  static_assert(!requires { split(); });\n-  static_assert(!requires { split(s, p, 0); });\n-  static_assert(!requires { split(p)(); });\n-  static_assert(!requires { s | split; });\n-\n-  static_assert(!requires { s | split(p); });\n-  static_assert(!requires { split(p)(s); });\n-  static_assert(!requires { s | (split(p) | views::all); });\n-  static_assert(!requires { (split(p) | views::all)(s); });\n-\n-  static_assert(requires { s | split(views::all(p)); });\n-  static_assert(requires { split(views::all(p))(s); });\n-  static_assert(requires { s | (split(views::all(p)) | views::all); });\n-  static_assert(requires { (split(views::all(p)) | views::all)(s); });\n-\n-  auto adapt = split(p);\n+  static_assert(!requires { lazy_split(); });\n+  static_assert(!requires { lazy_split(s, p, 0); });\n+  static_assert(!requires { lazy_split(p)(); });\n+  static_assert(!requires { s | lazy_split; });\n+\n+  static_assert(!requires { s | lazy_split(p); });\n+  static_assert(!requires { lazy_split(p)(s); });\n+  static_assert(!requires { s | (lazy_split(p) | views::all); });\n+  static_assert(!requires { (lazy_split(p) | views::all)(s); });\n+\n+  static_assert(requires { s | lazy_split(views::all(p)); });\n+  static_assert(requires { lazy_split(views::all(p))(s); });\n+  static_assert(requires { s | (lazy_split(views::all(p)) | views::all); });\n+  static_assert(requires { (lazy_split(views::all(p)) | views::all)(s); });\n+\n+  auto adapt = lazy_split(p);\n   static_assert(requires { s | adapt; });\n   static_assert(requires { adapt(s); });\n \n-  auto adapt2 = split(p) | views::all;\n+  auto adapt2 = lazy_split(p) | views::all;\n   static_assert(requires { s | adapt2; });\n   static_assert(requires { adapt2(s); });\n }\n@@ -189,27 +189,27 @@ test10()\n   auto to_string = [] (auto r) {\n     return std::string(r.begin(), ranges::next(r.begin(), r.end()));\n   };\n-  auto v = \"xxyx\"sv | views::split(\"xy\"sv) | views::transform(to_string);\n+  auto v = \"xxyx\"sv | views::lazy_split(\"xy\"sv) | views::transform(to_string);\n   VERIFY( ranges::equal(v, (std::string_view[]){\"x\", \"x\"}) );\n }\n \n void\n test11()\n {\n   // LWG 3478\n-  auto v = views::split(\"text\"sv, \"text\"sv);\n+  auto v = views::lazy_split(\"text\"sv, \"text\"sv);\n   auto i = v.begin();\n   VERIFY( ranges::empty(*i++) );\n   VERIFY( ranges::empty(*i++) );\n   VERIFY( i == v.end() );\n \n-  static_assert(ranges::distance(views::split(\" text \"sv, ' ')) == 3);\n-  static_assert(ranges::distance(views::split(\" t e x t \"sv, ' ')) == 6);\n-  static_assert(ranges::distance(views::split(\"  text  \"sv, \"  \"sv)) == 3);\n-  static_assert(ranges::distance(views::split(\"  text    \"sv, \"  \"sv)) == 4);\n-  static_assert(ranges::distance(views::split(\"  text     \"sv, \"  \"sv)) == 4);\n-  static_assert(ranges::distance(views::split(\"t\"sv, 't')) == 2);\n-  static_assert(ranges::distance(views::split(\"text\"sv, \"\"sv)) == 4);\n+  static_assert(ranges::distance(views::lazy_split(\" text \"sv, ' ')) == 3);\n+  static_assert(ranges::distance(views::lazy_split(\" t e x t \"sv, ' ')) == 6);\n+  static_assert(ranges::distance(views::lazy_split(\"  text  \"sv, \"  \"sv)) == 3);\n+  static_assert(ranges::distance(views::lazy_split(\"  text    \"sv, \"  \"sv)) == 4);\n+  static_assert(ranges::distance(views::lazy_split(\"  text     \"sv, \"  \"sv)) == 4);\n+  static_assert(ranges::distance(views::lazy_split(\"t\"sv, 't')) == 2);\n+  static_assert(ranges::distance(views::lazy_split(\"text\"sv, \"\"sv)) == 4);\n }\n \n int", "previous_filename": "libstdc++-v3/testsuite/std/ranges/adaptors/split.cc"}, {"sha": "c59f828ee567fb06e20b54b2dc8e7bcc0a31b1a8", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/lazy_split_neg.cc", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flazy_split_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flazy_split_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flazy_split_neg.cc?ref=adbd2c7102d30cafdb82062940b2181df30c20c8", "patch": "@@ -30,16 +30,16 @@ test01()\n {\n   using namespace std::literals;\n   auto x = \"the  quick  brown  fox\"sv;\n-  auto v = views::split(x, std::initializer_list<char>{' ', ' '}); // { dg-error \"no match\" }\n+  auto v = views::lazy_split(x, std::initializer_list<char>{' ', ' '}); // { dg-error \"no match\" }\n }\n \n void\n test02()\n {\n   using namespace std::literals;\n   auto x = \"the  quick  brown  fox\"sv;\n-  auto v1 = views::split(std::initializer_list<char>{' ', ' '})(x); // { dg-error \"deleted\" }\n-  auto v2 = x | views::split(std::initializer_list<char>{' ', ' '}); // { dg-error \"no match\" }\n+  auto v1 = views::lazy_split(std::initializer_list<char>{' ', ' '})(x); // { dg-error \"deleted\" }\n+  auto v2 = x | views::lazy_split(std::initializer_list<char>{' ', ' '}); // { dg-error \"no match\" }\n }\n \n // { dg-prune-output \"in requirements\" }", "previous_filename": "libstdc++-v3/testsuite/std/ranges/adaptors/split_neg.cc"}, {"sha": "7950c43576d7c4997b14c93bfa04ad49fd5bac34", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/p2281.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fp2281.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fp2281.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fp2281.cc?ref=adbd2c7102d30cafdb82062940b2181df30c20c8", "patch": "@@ -34,7 +34,7 @@ void\n test01()\n {\n   auto split_into_strings = [] (auto p) {\n-    return views::split(p) | views::transform([](auto r){\n+    return views::lazy_split(p) | views::transform([](auto r){\n       return std::string(r.begin(), ranges::next(r.begin(), r.end()));\n     });\n   };\n@@ -60,19 +60,19 @@ struct move_only_range\n template<>\n   inline constexpr bool std::ranges::enable_view<move_only_range> = true;\n \n-template<auto split = views::split>\n+template<auto lazy_split = views::lazy_split>\n void\n test02()\n {\n   std::string_view s;\n   move_only_range p;\n-  static_assert(requires { s | split(std::move(p)); });\n-  static_assert(requires { split(std::move(p))(s); });\n-  static_assert(requires { split(std::move(p)) | views::all; });\n-  static_assert(requires { views::all | split(std::move(p)); });\n-  static_assert(!requires { split(p); });\n-  static_assert(!requires { split(p) | views::all; });\n-  static_assert(!requires { views::all | split(p); });\n+  static_assert(requires { s | lazy_split(std::move(p)); });\n+  static_assert(requires { lazy_split(std::move(p))(s); });\n+  static_assert(requires { lazy_split(std::move(p)) | views::all; });\n+  static_assert(requires { views::all | lazy_split(std::move(p)); });\n+  static_assert(!requires { lazy_split(p); });\n+  static_assert(!requires { lazy_split(p) | views::all; });\n+  static_assert(!requires { views::all | lazy_split(p); });\n }\n \n int"}, {"sha": "219e2a61f0732f1080c3bde09c72e069a15fba43", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/sizeof.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsizeof.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsizeof.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsizeof.cc?ref=adbd2c7102d30cafdb82062940b2181df30c20c8", "patch": "@@ -46,7 +46,7 @@ static_assert(sizeof(ranges::take_while_view<V, decltype(pred_l)>) == 3*ptr);\n static_assert(sizeof(ranges::drop_while_view<V, decltype(pred_l)>) == 3*ptr);\n static_assert(sizeof(ranges::transform_view<V, decltype(func_l)>) == 3*ptr);\n \n-static_assert(sizeof(ranges::split_view<V, std::string_view>) == 4*ptr);\n+static_assert(sizeof(ranges::lazy_split_view<V, std::string_view>) == 4*ptr);\n \n static_assert\n  (sizeof(ranges::reverse_view<ranges::filter_view<V, decltype(pred_l)>>) == 4*ptr);"}, {"sha": "0ec7e21f657b727811bbcc34c3df4975c98872a7", "filename": "libstdc++-v3/testsuite/std/ranges/p2259.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2259.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2259.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2259.cc?ref=adbd2c7102d30cafdb82062940b2181df30c20c8", "patch": "@@ -49,12 +49,12 @@ test01()\n   // Verify the changes to transform_view.\n   only_cxx20_input_range auto v2 = v0 | views::transform([](int& c) -> auto& { return c; });\n \n-  // Verify the changes to split_view.\n-  only_cxx20_input_range auto v3 = v0 | views::split(12);\n+  // Verify the changes to lazy_split_view.\n+  only_cxx20_input_range auto v3 = v0 | views::lazy_split(12);\n   static_assert(only_cxx20_input_range<decltype(*v3.begin())>);\n \n   // Verify the changes to join_view.\n-  only_cxx20_input_range auto v4 = v0 | views::split(12) | views::join;\n+  only_cxx20_input_range auto v4 = v0 | views::lazy_split(12) | views::join;\n \n   // Verify the changes to elements_view.\n   only_cxx20_input_range auto v5"}, {"sha": "4d07540902687d2278fb139690648bc4cd6b2466", "filename": "libstdc++-v3/testsuite/std/ranges/p2325.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2325.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2325.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2325.cc?ref=adbd2c7102d30cafdb82062940b2181df30c20c8", "patch": "@@ -113,14 +113,14 @@ test07()\n void\n test08()\n {\n-  // Verify split_view is conditionally default constructible.\n-  using type1 = ranges::split_view<ranges::ref_view<int[2]>, ranges::single_view<int>>;\n+  // Verify lazy_split_view is conditionally default constructible.\n+  using type1 = ranges::lazy_split_view<ranges::ref_view<int[2]>, ranges::single_view<int>>;\n   static_assert(!default_initializable<type1>);\n-  using type2 = ranges::split_view<ranges::single_view<int>, ranges::ref_view<int[2]>>;\n+  using type2 = ranges::lazy_split_view<ranges::single_view<int>, ranges::ref_view<int[2]>>;\n   static_assert(!default_initializable<type2>);\n-  using type3 = ranges::split_view<ranges::ref_view<int[2]>, ranges::ref_view<int[2]>>;\n+  using type3 = ranges::lazy_split_view<ranges::ref_view<int[2]>, ranges::ref_view<int[2]>>;\n   static_assert(!default_initializable<type3>);\n-  using type4 = ranges::split_view<ranges::single_view<int>, ranges::single_view<int>>;\n+  using type4 = ranges::lazy_split_view<ranges::single_view<int>, ranges::single_view<int>>;\n   static_assert(default_initializable<type4>);\n }\n "}, {"sha": "5228b021602ef6e7982dda4fc6ae9d9b9960283d", "filename": "libstdc++-v3/testsuite/std/ranges/p2367.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2367.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adbd2c7102d30cafdb82062940b2181df30c20c8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2367.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2367.cc?ref=adbd2c7102d30cafdb82062940b2181df30c20c8", "patch": "@@ -43,6 +43,6 @@ test01()\n   // Verify changes to views::drop.\n   auto v5 = views::drop(x, 0ull);\n \n-  // Verify changes to views::split.\n-  auto v6 = views::split(x, 5u);\n+  // Verify changes to views::lazy_split.\n+  auto v6 = views::lazy_split(x, 5u);\n }"}]}