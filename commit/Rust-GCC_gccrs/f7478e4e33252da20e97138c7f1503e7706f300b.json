{"sha": "f7478e4e33252da20e97138c7f1503e7706f300b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc0NzhlNGUzMzI1MmRhMjBlOTcxMzhjN2YxNTAzZTc3MDZmMzAwYg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-01-31T02:33:58Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-01-31T02:33:58Z"}, "message": "PR other/89106 - cast-to-union documentation incorrect w.r.t. lvalueness\n\ngcc/ChangeLog:\n\n\tPR other/89106\n\t* doc/extend.texi (cast to a union): Correct and expand.\n\nFrom-SVN: r268411", "tree": {"sha": "f02425e77f343e37f99fc34e37fa07d6eba91ee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f02425e77f343e37f99fc34e37fa07d6eba91ee6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7478e4e33252da20e97138c7f1503e7706f300b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7478e4e33252da20e97138c7f1503e7706f300b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7478e4e33252da20e97138c7f1503e7706f300b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7478e4e33252da20e97138c7f1503e7706f300b/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15b77e7407810879c20187d26c3781b9f171d86f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b77e7407810879c20187d26c3781b9f171d86f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15b77e7407810879c20187d26c3781b9f171d86f"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "8b632f5f92e57ff9133537b169f5da2fee61c4f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7478e4e33252da20e97138c7f1503e7706f300b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7478e4e33252da20e97138c7f1503e7706f300b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7478e4e33252da20e97138c7f1503e7706f300b", "patch": "@@ -1,3 +1,8 @@\n+2019-01-30  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR other/89106\n+\t* doc/extend.texi (cast to a union): Correct and expand.\n+\n 2019-01-30  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/87246"}, {"sha": "b51f4273ade4fadf1aaa29f3d51f2439817bbf3b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7478e4e33252da20e97138c7f1503e7706f300b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7478e4e33252da20e97138c7f1503e7706f300b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f7478e4e33252da20e97138c7f1503e7706f300b", "patch": "@@ -2275,27 +2275,46 @@ case 1...5:\n @cindex cast to a union\n @cindex union, casting to a\n \n-A cast to union type looks similar to other casts, except that the type\n-specified is a union type.  You can specify the type either with the\n-@code{union} keyword or with a @code{typedef} name that refers to\n-a union.  A cast to a union actually creates a compound literal and\n-yields an lvalue, not an rvalue like true casts do.\n+A cast to a union type is a C extension not available in C++.  It looks\n+just like ordinary casts with the constraint that the type specified is\n+a union type.  You can specify the type either with the @code{union}\n+keyword or with a @code{typedef} name that refers to a union.  The result\n+of a cast to a union is a temporary rvalue of the union type with a member\n+whose type matches that of the operand initialized to the value of\n+the operand.  The effect of a cast to a union is similar to a compound\n+literal except that it yields an rvalue like standard casts do.\n @xref{Compound Literals}.\n \n-The types that may be cast to the union type are those of the members\n-of the union.  Thus, given the following union and variables:\n+Expressions that may be cast to the union type are those whose type matches\n+at least one of the members of the union.  Thus, given the following union\n+and variables:\n \n @smallexample\n union foo @{ int i; double d; @};\n int x;\n double y;\n+union foo z;\n @end smallexample\n \n @noindent\n-both @code{x} and @code{y} can be cast to type @code{union foo}.\n+both @code{x} and @code{y} can be cast to type @code{union foo} and\n+the following assignments\n+@smallexample\n+  z = (union foo) x;\n+  z = (union foo) y;\n+@end smallexample\n+are shorthand equivalents of these\n+@smallexample\n+  z = (union foo) @{ .i = x @};\n+  z = (union foo) @{ .d = y @};\n+@end smallexample\n+\n+However, @code{(union foo) FLT_MAX;} is not a valid cast because the union\n+has no member of type @code{float}.\n \n Using the cast as the right-hand side of an assignment to a variable of\n-union type is equivalent to storing in a member of the union:\n+union type is equivalent to storing in a member of the union with\n+the same type\n \n @smallexample\n union foo u;"}]}