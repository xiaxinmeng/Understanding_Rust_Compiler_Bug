{"sha": "1089d083117f28f3518f5ec3c7a153236cb92334", "node_id": "C_kwDOANBUbNoAKDEwODlkMDgzMTE3ZjI4ZjM1MThmNWVjM2M3YTE1MzIzNmNiOTIzMzQ", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-05-31T09:13:21Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-06-16T01:26:36Z"}, "message": "Simplify (B * v + C) * D -> BD* v + CD when B,C,D are all INTEGER_CST.\n\nSimilar for (v + B) * C + D -> C * v + BCD.\nDon't simplify it when there's overflow and overflow is UB for type v.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/53533\n\t* match.pd: Simplify (B * v + C) * D -> BD * v + CD and\n\t(v + B) * C + D -> C * v + BCD when B,C,D are all INTEGER_CST,\n\tand there's no overflow or !TYPE_OVERFLOW_UNDEFINED.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr53533-1.c: New test.\n\t* gcc.target/i386/pr53533-2.c: New test.\n\t* gcc.target/i386/pr53533-3.c: New test.\n\t* gcc.target/i386/pr53533-4.c: New test.\n\t* gcc.target/i386/pr53533-5.c: New test.\n\t* gcc.dg/vect/slp-11a.c: Adjust testcase.", "tree": {"sha": "ef3527ef21d4ba082be241674924b1ce96d6ead6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef3527ef21d4ba082be241674924b1ce96d6ead6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1089d083117f28f3518f5ec3c7a153236cb92334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1089d083117f28f3518f5ec3c7a153236cb92334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1089d083117f28f3518f5ec3c7a153236cb92334", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1089d083117f28f3518f5ec3c7a153236cb92334/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "499b9c5f099c1b3e1ec14977abafe62a4c712bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/499b9c5f099c1b3e1ec14977abafe62a4c712bdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/499b9c5f099c1b3e1ec14977abafe62a4c712bdd"}], "stats": {"total": 252, "additions": 247, "deletions": 5}, "files": [{"sha": "c0aa3a2342b46d35f4b3b3d61d883f917ab8d6eb", "filename": "gcc/match.pd", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1089d083117f28f3518f5ec3c7a153236cb92334/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1089d083117f28f3518f5ec3c7a153236cb92334/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=1089d083117f28f3518f5ec3c7a153236cb92334", "patch": "@@ -489,6 +489,87 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (if (!overflow || TYPE_OVERFLOW_WRAPS (type))\n    (mult @0 { wide_int_to_tree (type, mul); }))))\n \n+/* Similar to above, but there could be an extra add/sub between\n+   successive multuiplications.  */\n+(simplify\n+ (mult (plus:s (mult:s@4 @0 INTEGER_CST@1) INTEGER_CST@2) INTEGER_CST@3)\n+ (with {\n+   bool overflowed = true;\n+   wi::overflow_type ovf1, ovf2;\n+   wide_int mul = wi::mul (wi::to_wide (@1), wi::to_wide (@3),\n+\t\t\t   TYPE_SIGN (type), &ovf1);\n+   wide_int add = wi::mul (wi::to_wide (@2), wi::to_wide (@3),\n+\t\t\t   TYPE_SIGN (type), &ovf2);\n+  if (TYPE_OVERFLOW_UNDEFINED (type))\n+    {\n+#if GIMPLE\n+      value_range vr0;\n+      if (ovf1 == wi::OVF_NONE && ovf2 == wi::OVF_NONE\n+\t  && get_global_range_query ()->range_of_expr (vr0, @4)\n+\t  && vr0.kind () == VR_RANGE)\n+\t{\n+\t  wide_int wmin0 = vr0.lower_bound ();\n+\t  wide_int wmax0 = vr0.upper_bound ();\n+\t  wmin0 = wi::mul (wmin0, wi::to_wide (@3), TYPE_SIGN (type), &ovf1);\n+\t  wmax0 = wi::mul (wmax0, wi::to_wide (@3), TYPE_SIGN (type), &ovf2);\n+\t  if (ovf1 == wi::OVF_NONE && ovf2 == wi::OVF_NONE)\n+\t    {\n+\t      wi::add (wmin0, add, TYPE_SIGN (type), &ovf1);\n+\t      wi::add (wmax0, add, TYPE_SIGN (type), &ovf2);\n+\t      if (ovf1 == wi::OVF_NONE && ovf2 == wi::OVF_NONE)\n+\t\toverflowed = false;\n+\t    }\n+\t}\n+#endif\n+    }\n+  else\n+   overflowed = false;\n+ }\n+  /* Skip folding on overflow.  */\n+  (if (!overflowed)\n+   (plus (mult @0 { wide_int_to_tree (type, mul); })\n+\t { wide_int_to_tree (type, add); }))))\n+\n+/* Similar to above, but a multiplication between successive additions.  */\n+(simplify\n+ (plus (mult:s (plus:s @0 INTEGER_CST@1) INTEGER_CST@2) INTEGER_CST@3)\n+ (with {\n+   bool overflowed = true;\n+   wi::overflow_type ovf1;\n+   wi::overflow_type ovf2;\n+   wide_int mul = wi::mul (wi::to_wide (@1), wi::to_wide (@2),\n+\t\t\t   TYPE_SIGN (type), &ovf1);\n+   wide_int add = wi::add (mul, wi::to_wide (@3),\n+\t\t\t   TYPE_SIGN (type), &ovf2);\n+  if (TYPE_OVERFLOW_UNDEFINED (type))\n+    {\n+#if GIMPLE\n+      value_range vr0;\n+      if (ovf1 == wi::OVF_NONE && ovf2 == wi::OVF_NONE\n+\t  && get_global_range_query ()->range_of_expr (vr0, @0)\n+\t  && vr0.kind () == VR_RANGE)\n+\t{\n+\t  wide_int wmin0 = vr0.lower_bound ();\n+\t  wide_int wmax0 = vr0.upper_bound ();\n+\t  wmin0 = wi::mul (wmin0, wi::to_wide (@2), TYPE_SIGN (type), &ovf1);\n+\t  wmax0 = wi::mul (wmax0, wi::to_wide (@2), TYPE_SIGN (type), &ovf2);\n+\t  if (ovf1 == wi::OVF_NONE && ovf2 == wi::OVF_NONE)\n+\t    {\n+\t      wi::add (wmin0, mul, TYPE_SIGN (type), &ovf1);\n+\t      wi::add (wmax0, mul, TYPE_SIGN (type), &ovf2);\n+\t      if (ovf1 == wi::OVF_NONE && ovf2 == wi::OVF_NONE)\n+\t\toverflowed = false;\n+\t    }\n+\t}\n+#endif\n+    }\n+  else\n+   overflowed = false;\n+ }\n+  /* Skip folding on overflow.  */\n+  (if (!overflowed)\n+   (plus (mult @0 @2) { wide_int_to_tree (type, add); }))))\n+\n /* Optimize A / A to 1.0 if we don't care about\n    NaNs or Infinities.  */\n (simplify"}, {"sha": "e6632fa77be8092524a202d6a322354b45e1794d", "filename": "gcc/testsuite/gcc.dg/vect/slp-11a.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1089d083117f28f3518f5ec3c7a153236cb92334/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1089d083117f28f3518f5ec3c7a153236cb92334/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11a.c?ref=1089d083117f28f3518f5ec3c7a153236cb92334", "patch": "@@ -9,14 +9,14 @@ int\n main1 ()\n {\n   int i;\n-  unsigned int out[N*8], a0, a1, a2, a3, a4, a5, a6, a7, b1, b0, b2, b3, b4, b5, b6, b7;\n-  unsigned int in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n+  int out[N*8], a0, a1, a2, a3, a4, a5, a6, a7, b1, b0, b2, b3, b4, b5, b6, b7;\n+  int in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n \n   /* Different operations - not SLPable.  */\n   for (i = 0; i < N; i++)\n     {\n       a0 = in[i*8] + 5;\n-      a1 = in[i*8 + 1] * 6;\n+      a1 = in[i*8 + 1] * 51072;\n       a2 = in[i*8 + 2] + 7;\n       a3 = in[i*8 + 3] + 8;\n       a4 = in[i*8 + 4] + 9;\n@@ -25,7 +25,7 @@ main1 ()\n       a7 = in[i*8 + 7] + 12;\n \n       b0 = a0 * 3;\n-      b1 = a1 * 2;\n+      b1 = a1 * 51072;\n       b2 = a2 * 12;\n       b3 = a3 * 5;\n       b4 = a4 * 8;\n@@ -47,7 +47,7 @@ main1 ()\n   for (i = 0; i < N; i++)\n     {\n       if (out[i*8] !=  (in[i*8] + 5) * 3 - 2\n-         || out[i*8 + 1] != (in[i*8 + 1] * 6) * 2 - 3\n+         || out[i*8 + 1] != (in[i*8 + 1] * 51072) * 51072 - 3\n          || out[i*8 + 2] != (in[i*8 + 2] + 7) * 12 - 2\n          || out[i*8 + 3] != (in[i*8 + 3] + 8) * 5 - 1\n          || out[i*8 + 4] != (in[i*8 + 4] + 9) * 8 - 8"}, {"sha": "095de66536650590d7b47f2ea76822717cf8aab7", "filename": "gcc/testsuite/gcc.target/i386/pr53533-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1089d083117f28f3518f5ec3c7a153236cb92334/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53533-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1089d083117f28f3518f5ec3c7a153236cb92334/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53533-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53533-1.c?ref=1089d083117f28f3518f5ec3c7a153236cb92334", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-final { scan-assembler-times \"imull\\[ \\t\\]\" \"1\" } } */\n+/* { dg-final { scan-assembler-times \"(?:addl|subl)\\[ \\t\\]\" \"1\" { target { ! ia32 } } } } */\n+\n+void\n+__attribute__((noipa))\n+foo (unsigned a[256], unsigned b[256])\n+{\n+  int i;\n+  for (i = 0; i < 256; ++i)\n+    {\n+      unsigned tmp = a[i] + 12345U;\n+      tmp *= 914237U;\n+      tmp += 12332U;\n+      tmp *= 914237U;\n+      tmp += 12332U;\n+      tmp *= 914237U;\n+      tmp -= 13U;\n+      tmp *= 8000U;\n+      b[i] = tmp;\n+    }\n+}"}, {"sha": "c31b6ff4dec5b37c9211e766292e91427b141571", "filename": "gcc/testsuite/gcc.target/i386/pr53533-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1089d083117f28f3518f5ec3c7a153236cb92334/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53533-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1089d083117f28f3518f5ec3c7a153236cb92334/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53533-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53533-2.c?ref=1089d083117f28f3518f5ec3c7a153236cb92334", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#include \"pr53533-1.c\"\n+\n+void\n+__attribute__((optimize(\"-O0\")))\n+foo1 (unsigned a[256], unsigned b[256])\n+{\n+  int i;\n+  for (i = 0; i < 256; ++i)\n+    {\n+      unsigned tmp = a[i] + 12345U;\n+      tmp *= 914237U;\n+      tmp += 12332U;\n+      tmp *= 914237U;\n+      tmp += 12332U;\n+      tmp *= 914237U;\n+      tmp -= 13U;\n+      tmp *= 8000U;\n+      b[i] = tmp;\n+    }\n+}\n+\n+int main()\n+{\n+  unsigned int a[256];\n+  unsigned int b[256];\n+  unsigned int c[256];\n+  for (unsigned int i = 0; i != 256; i++)\n+    {\n+      b[i] = 0;\n+      c[i] = 1;\n+      a[i] = i * i - 10 * i + 33;\n+    }\n+  foo (a, b);\n+  foo1 (a, c);\n+\n+  for (unsigned int i = 0; i != 256; i++)\n+    {\n+      if (b[i] != c[i])\n+\t__builtin_abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "3b260d134e91b23441145361faa88ab0e5870f02", "filename": "gcc/testsuite/gcc.target/i386/pr53533-3.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1089d083117f28f3518f5ec3c7a153236cb92334/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53533-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1089d083117f28f3518f5ec3c7a153236cb92334/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53533-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53533-3.c?ref=1089d083117f28f3518f5ec3c7a153236cb92334", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fwrapv\" } */\n+/* { dg-final { scan-assembler-times \"imull\\[ \\t\\]\" \"1\" } } */\n+/* { dg-final { scan-assembler-times \"(?:addl|subl)\\[ \\t\\]\" \"1\" { target { ! ia32 } } } } */\n+\n+void\n+__attribute__((noipa))\n+foo (int a[256], int b[256])\n+{\n+  int i;\n+  for (i = 0; i < 256; ++i)\n+    {\n+      int tmp = a[i] + 12345;\n+      tmp *= 914237;\n+      tmp += 12332;\n+      tmp *= 914237;\n+      tmp += 12332;\n+      tmp *= 914237;\n+      tmp -= 13;\n+      tmp *= 8000;\n+      b[i] = tmp;\n+    }\n+}\n+"}, {"sha": "c29f90a44dc4b8fb924922e33c99844c078cb786", "filename": "gcc/testsuite/gcc.target/i386/pr53533-4.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1089d083117f28f3518f5ec3c7a153236cb92334/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53533-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1089d083117f28f3518f5ec3c7a153236cb92334/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53533-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53533-4.c?ref=1089d083117f28f3518f5ec3c7a153236cb92334", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fwrapv\" } */\n+\n+#include \"pr53533-3.c\"\n+\n+void\n+__attribute__((optimize(\"-O0\")))\n+foo1 (int a[256], int b[256])\n+{\n+  int i;\n+  for (i = 0; i < 256; ++i)\n+    {\n+      int tmp = a[i] + 12345;\n+      tmp *= 914237;\n+      tmp += 12332;\n+      tmp *= 914237;\n+      tmp += 12332;\n+      tmp *= 914237;\n+      tmp -= 13;\n+      tmp *= 8000;\n+      b[i] = tmp;\n+    }\n+}\n+\n+int main()\n+{\n+  int a[256];\n+  int b[256];\n+  int c[256];\n+  for (int i = 0; i != 256; i++)\n+    {\n+      b[i] = 0;\n+      c[i] = 1;\n+      a[i] = i * i - 10 * i + 33;\n+    }\n+  foo (a, b);\n+  foo1 (a, c);\n+\n+  for (unsigned int i = 0; i != 256; i++)\n+    {\n+      if (b[i] != c[i])\n+\t__builtin_abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "56fe4f44064d0527393627b3e51e895b0fedb7de", "filename": "gcc/testsuite/gcc.target/i386/pr53533-5.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1089d083117f28f3518f5ec3c7a153236cb92334/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53533-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1089d083117f28f3518f5ec3c7a153236cb92334/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53533-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53533-5.c?ref=1089d083117f28f3518f5ec3c7a153236cb92334", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times {(?n)\\* 2147483647} 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times {(?n)\\* 1073741823} 1 \"optimized\" } } */\n+\n+#define INT_MAX 2147483647\n+int\n+foo (int a)\n+{\n+  /* When a == -2, there's no overflow for (a + 1) * INT_MAX - 1.\n+     but overflow for a * INT_MAX + (INT_MAX - 1).\n+     Don't simpify it.  */\n+  return (a + 1) * INT_MAX - 1;\n+}\n+\n+int\n+foo1 (int a)\n+{\n+  /* Be conservative here, don't simplify this as long as\n+     a * 2147483646 may overflow.  */\n+  return 1073741823 * (a * 2 + 1);\n+}"}]}