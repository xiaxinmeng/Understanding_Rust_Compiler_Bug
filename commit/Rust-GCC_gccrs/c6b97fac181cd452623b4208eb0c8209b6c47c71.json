{"sha": "c6b97fac181cd452623b4208eb0c8209b6c47c71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZiOTdmYWMxODFjZDQ1MjYyM2I0MjA4ZWIwYzgyMDliNmM0N2M3MQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2003-05-09T06:37:25Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2003-05-09T06:37:25Z"}, "message": "expr.c (move_block_from_reg): Remove \"size\" parm.\n\n\t* expr.c (move_block_from_reg): Remove \"size\" parm.  Localize vars.\n\tMove code handling pieces not larger than a word to..\n\t* function.c (assign_parms): ..here, but use change_address instead\n\tof adjust_address and operand_subword, and expand_binop instead of\n\texpand_shift.  Adjust calls to move_block_from_reg.\n\t* expr.h (move_block_from_reg): Update declaration.\n\t(copy_blkmode_from_reg): Formatting.\n\t* Makefile.in (function.o): Add $(OPTABS_H) to deps.\n\t* config/alpha/alpha.c (alpha_setup_incoming_varargs): Adjust\n\tmove_block_from_reg calls.\n\t* config/arc/arc.c (arc_setup_incoming_varargs): Likewise.\n\t* config/i960/i960.c (i960_setup_incoming_varargs): Likewise.\n\t* config/m32r/m32r.c (m32r_setup_incoming_varargs): Likewise.\n\t* config/m88k/m88k.c (m88k_builtin_saveregsk): Likewise.\n\t* config/mips/mips.c (mips_setup_incoming_varargs): Likewise.\n\t* config/pa/pa.c (hppa_builtin_saveregs): Likewise.\n\t* config/romp/romp.h (SETUP_INCOMING_VARARGS): Likewise.\n\t* config/rs6000/rs6000.c (setup_incoming_varargs): Likewise.\n\t* config/sh/sh.c (sh_builtin_saveregs): Likewise.\n\nFrom-SVN: r66623", "tree": {"sha": "11c05a6d50d52041f7b10158a9e959b9b5d5b82c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11c05a6d50d52041f7b10158a9e959b9b5d5b82c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6b97fac181cd452623b4208eb0c8209b6c47c71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b97fac181cd452623b4208eb0c8209b6c47c71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b97fac181cd452623b4208eb0c8209b6c47c71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b97fac181cd452623b4208eb0c8209b6c47c71/comments", "author": null, "committer": null, "parents": [{"sha": "8ac3815a0865eaecb5a070d1ea59f299d2c22a87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac3815a0865eaecb5a070d1ea59f299d2c22a87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ac3815a0865eaecb5a070d1ea59f299d2c22a87"}], "stats": {"total": 174, "additions": 94, "deletions": 80}, "files": [{"sha": "f56f19bb5c450d3a77c915dd55b7efd14191dd0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6b97fac181cd452623b4208eb0c8209b6c47c71", "patch": "@@ -1,3 +1,25 @@\n+2003-05-09  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* expr.c (move_block_from_reg): Remove \"size\" parm.  Localize vars.\n+\tMove code handling pieces not larger than a word to..\n+\t* function.c (assign_parms): ..here, but use change_address instead\n+\tof adjust_address and operand_subword, and expand_binop instead of\n+\texpand_shift.  Adjust calls to move_block_from_reg.\n+\t* expr.h (move_block_from_reg): Update declaration.\n+\t(copy_blkmode_from_reg): Formatting.\n+\t* Makefile.in (function.o): Add $(OPTABS_H) to deps.\n+\t* config/alpha/alpha.c (alpha_setup_incoming_varargs): Adjust\n+\tmove_block_from_reg calls.\n+\t* config/arc/arc.c (arc_setup_incoming_varargs): Likewise.\n+\t* config/i960/i960.c (i960_setup_incoming_varargs): Likewise.\n+\t* config/m32r/m32r.c (m32r_setup_incoming_varargs): Likewise.\n+\t* config/m88k/m88k.c (m88k_builtin_saveregsk): Likewise.\n+\t* config/mips/mips.c (mips_setup_incoming_varargs): Likewise.\n+\t* config/pa/pa.c (hppa_builtin_saveregs): Likewise.\n+\t* config/romp/romp.h (SETUP_INCOMING_VARARGS): Likewise.\n+\t* config/rs6000/rs6000.c (setup_incoming_varargs): Likewise.\n+\t* config/sh/sh.c (sh_builtin_saveregs): Likewise.\n+\n 2003-05-08  DJ Delorie  <dj@redhat.com>\n \n \t* config/stormy16/stormy16.c (xstormy16_expand_builtin_va_arg): Fix"}, {"sha": "563649b021f53c6917d575ebe9d15ee5b8520a76", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c6b97fac181cd452623b4208eb0c8209b6c47c71", "patch": "@@ -1509,7 +1509,7 @@ varasm.o : varasm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_\n    output.h c-pragma.h toplev.h xcoffout.h debug.h $(GGC_H) $(TM_P_H) \\\n    $(HASHTAB_H) $(TARGET_H) langhooks.h gt-varasm.h real.h\n function.o : function.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   flags.h function.h $(EXPR_H) libfuncs.h $(REGS_H) hard-reg-set.h \\\n+   flags.h function.h $(EXPR_H) $(OPTABS_H) libfuncs.h $(REGS_H) hard-reg-set.h \\\n    insn-config.h $(RECOG_H) output.h toplev.h except.h $(HASHTAB_H) $(GGC_H) \\\n    $(TM_P_H) langhooks.h gt-function.h\n stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) flags.h \\"}, {"sha": "e6a6410ebc5826c24240d6cdc8827b987559cb65", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c6b97fac181cd452623b4208eb0c8209b6c47c71", "patch": "@@ -6418,14 +6418,14 @@ alpha_setup_incoming_varargs(cum, mode, type, pretend_size, no_rtl)\n \t\t         plus_constant (virtual_incoming_args_rtx,\n \t\t\t\t        (cum + 6) * UNITS_PER_WORD));\n       set_mem_alias_set (tmp, set);\n-      move_block_from_reg (16 + cum, tmp, 6 - cum, (6 - cum) * UNITS_PER_WORD);\n+      move_block_from_reg (16 + cum, tmp, 6 - cum);\n \n       tmp = gen_rtx_MEM (BLKmode,\n \t\t         plus_constant (virtual_incoming_args_rtx,\n \t\t\t\t        cum * UNITS_PER_WORD));\n       set_mem_alias_set (tmp, set);\n       move_block_from_reg (16 + (TARGET_FPREGS ? 32 : 0) + cum, tmp,\n-\t\t\t   6 - cum, (6 - cum) * UNITS_PER_WORD);\n+\t\t\t   6 - cum);\n      }\n   *pretend_size = 12 * UNITS_PER_WORD;\n }"}, {"sha": "faf8c1be051aef4d00108b893994ca2c13832557", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=c6b97fac181cd452623b4208eb0c8209b6c47c71", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on the Argonaut ARC cpu.\n-   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002\n+   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -831,9 +831,7 @@ arc_setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n       set_mem_alias_set (regblock, get_varargs_alias_set ());\n       set_mem_align (regblock, BITS_PER_WORD);\n       move_block_from_reg (first_reg_offset, regblock,\n-\t\t\t   MAX_ARC_PARM_REGS - first_reg_offset,\n-\t\t\t   ((MAX_ARC_PARM_REGS - first_reg_offset)\n-\t\t\t    * UNITS_PER_WORD));\n+\t\t\t   MAX_ARC_PARM_REGS - first_reg_offset);\n \n       *pretend_size = ((MAX_ARC_PARM_REGS - first_reg_offset + align_slop)\n \t\t       * UNITS_PER_WORD);"}, {"sha": "dc0353c83822e5008b9c1c387f2b3702970aa4a2", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=c6b97fac181cd452623b4208eb0c8209b6c47c71", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on intel 80960.\n-   Copyright (C) 1992, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1992, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n    Free Software Foundation, Inc.\n    Contributed by Steven McGeady, Intel Corp.\n    Additional Work by Glenn Colon-Bonet, Jonathan Shapiro, Andy Wilson\n@@ -2592,8 +2592,7 @@ i960_setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n       set_mem_alias_set (regblock, get_varargs_alias_set ());\n       set_mem_align (regblock, BITS_PER_WORD);\n       move_block_from_reg (first_reg, regblock,\n-\t\t\t   NPARM_REGS - first_reg,\n-\t\t\t   (NPARM_REGS - first_reg) * UNITS_PER_WORD);\n+\t\t\t   NPARM_REGS - first_reg);\n     }\n }\n "}, {"sha": "c8f0c728e6d676f655decab06b9ab205247ead26", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=c6b97fac181cd452623b4208eb0c8209b6c47c71", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on the Mitsubishi M32R cpu.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -1405,8 +1405,7 @@ m32r_setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n \t\t\t      plus_constant (arg_pointer_rtx,\n \t\t\t\t\t     FIRST_PARM_OFFSET (0)));\n       set_mem_alias_set (regblock, get_varargs_alias_set ());\n-      move_block_from_reg (first_reg_offset, regblock,\n-\t\t\t   size, size * UNITS_PER_WORD);\n+      move_block_from_reg (first_reg_offset, regblock, size);\n \n       *pretend_size = (size * UNITS_PER_WORD);\n     }"}, {"sha": "a27d8a3acbe3e2da93318e2dacd07a882384850a", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=c6b97fac181cd452623b4208eb0c8209b6c47c71", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for Motorola 88000.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002 Free Software Foundation, Inc. \n+   2001, 2002, 2003 Free Software Foundation, Inc. \n    Contributed by Michael Tiemann (tiemann@mcc.com)\n    Currently maintained by (gcc@dg-rtp.dg.com)\n \n@@ -2594,8 +2594,7 @@ m88k_builtin_saveregs ()\n   if (fixed < 8)\n     move_block_from_reg (2 + fixed,\n \t\t\t adjust_address (addr, Pmode, fixed * UNITS_PER_WORD),\n-\t\t\t 8 - fixed,\n-\t\t\t UNITS_PER_WORD * (8 - fixed));\n+\t\t\t 8 - fixed);\n \n   /* Return the address of the save area, but don't put it in a\n      register.  This fails when not optimizing and produces worse code"}, {"sha": "dd1f6a964faeb1c4dc7f83d3e0873475db766008", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c6b97fac181cd452623b4208eb0c8209b6c47c71", "patch": "@@ -4815,7 +4815,7 @@ mips_setup_incoming_varargs (cum, mode, type, no_rtl)\n \t    MEM_SET_IN_STRUCT_P (mem, 1);\n \n \t  move_block_from_reg (local_cum.num_gprs + GP_ARG_FIRST, mem,\n-\t\t\t       gp_saved, gp_saved * UNITS_PER_WORD);\n+\t\t\t       gp_saved);\n \t}\n       if (fp_saved > 0)\n \t{"}, {"sha": "82890fdda3fcd011ae29a60aad9b2a58570007d2", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c6b97fac181cd452623b4208eb0c8209b6c47c71", "patch": "@@ -5403,7 +5403,7 @@ hppa_builtin_saveregs ()\n \t\t\t\t     -16));\n   set_mem_alias_set (dest, get_varargs_alias_set ());\n   set_mem_align (dest, BITS_PER_WORD);\n-  move_block_from_reg (23, dest, 4, 4 * UNITS_PER_WORD);\n+  move_block_from_reg (23, dest, 4);\n \n   /* move_block_from_reg will emit code to store the argument registers\n      individually as scalar stores."}, {"sha": "24fb1c25da2080ce130203b2013e710643aaef23", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=c6b97fac181cd452623b4208eb0c8209b6c47c71", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for ROMP chip.\n-   Copyright (C) 1989, 1991, 1993, 1995, 1996, 1998, 1999, 2000, 2001, 2002\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1991, 1993, 1995, 1996, 1998, 1999, 2000, 2001, 2002,\n+   2003 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@nyu.edu)\n \n This file is part of GNU CC.\n@@ -662,7 +662,7 @@ struct rt_cargs {int gregs, fregs; };\n \t   gen_rtx_MEM (BLKmode,\t\t\t\t\t\\\n \t\t\tplus_constant (virtual_incoming_args_rtx,\t\\\n \t\t\t\t       first_reg_offset * 4)), \t\t\\\n-\t   4 - first_reg_offset, (4 - first_reg_offset) * UNITS_PER_WORD); \\\n+\t   4 - first_reg_offset);\t\t\t\t\t\\\n       PRETEND_SIZE = (4 - first_reg_offset) * UNITS_PER_WORD;\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }"}, {"sha": "c5cfa14b6963886fa06d529fcaefecf0d901a1c9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c6b97fac181cd452623b4208eb0c8209b6c47c71", "patch": "@@ -3805,10 +3805,8 @@ setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n       set_mem_alias_set (mem, set);\n       set_mem_align (mem, BITS_PER_WORD);\n \n-      move_block_from_reg\n-\t(GP_ARG_MIN_REG + first_reg_offset, mem,\n-\t GP_ARG_NUM_REG - first_reg_offset,\n-\t (GP_ARG_NUM_REG - first_reg_offset) * UNITS_PER_WORD);\n+      move_block_from_reg (GP_ARG_MIN_REG + first_reg_offset, mem,\n+\t\t\t   GP_ARG_NUM_REG - first_reg_offset);\n     }\n \n   /* Save FP registers if needed.  */"}, {"sha": "871cd620e7e15dd732c694cb20cd487c20e98693", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=c6b97fac181cd452623b4208eb0c8209b6c47c71", "patch": "@@ -1,6 +1,6 @@\n /* Output routines for GCC for Hitachi / SuperH SH.\n-   Copyright (C) 1993, 1994, 1995, 1997, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1994, 1995, 1997, 1997, 1998, 1999, 2000, 2001, 2002,\n+   2003 Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com).\n    Improved by Jim Wilson (wilson@cygnus.com). \n \n@@ -5606,7 +5606,7 @@ sh_builtin_saveregs ()\n     move_block_from_reg (BASE_ARG_REG (SImode) + first_intreg,\n \t\t\t adjust_address (regbuf, BLKmode,\n \t\t\t\t\t n_floatregs * UNITS_PER_WORD),\n-\t\t\t n_intregs, n_intregs * UNITS_PER_WORD);\n+\t\t\t n_intregs);\n \n   if (TARGET_SHMEDIA)\n     /* Return the address of the regbuf.  */"}, {"sha": "07d4b14e25dd983c2dab7c8e8fe51587cf114fa8", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 40, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c6b97fac181cd452623b4208eb0c8209b6c47c71", "patch": "@@ -2162,61 +2162,26 @@ move_block_to_reg (regno, x, nregs, mode)\n }\n \n /* Copy all or part of a BLKmode value X out of registers starting at REGNO.\n-   The number of registers to be filled is NREGS.  SIZE indicates the number\n-   of bytes in the object X.  */\n+   The number of registers to be filled is NREGS.  */\n \n void\n-move_block_from_reg (regno, x, nregs, size)\n+move_block_from_reg (regno, x, nregs)\n      int regno;\n      rtx x;\n      int nregs;\n-     int size;\n {\n   int i;\n-#ifdef HAVE_store_multiple\n-  rtx pat;\n-  rtx last;\n-#endif\n-  enum machine_mode mode;\n \n   if (nregs == 0)\n     return;\n \n-  /* If SIZE is that of a mode no bigger than a word, just use that\n-     mode's store operation.  */\n-  if (size <= UNITS_PER_WORD\n-      && (mode = mode_for_size (size * BITS_PER_UNIT, MODE_INT, 0)) != BLKmode)\n-    {\n-      emit_move_insn (adjust_address (x, mode, 0), gen_rtx_REG (mode, regno));\n-      return;\n-    }\n-\n-  /* Blocks smaller than a word on a BYTES_BIG_ENDIAN machine must be aligned\n-     to the left before storing to memory.  Note that the previous test\n-     doesn't handle all cases (e.g. SIZE == 3).  */\n-  if (size < UNITS_PER_WORD && BYTES_BIG_ENDIAN)\n-    {\n-      rtx tem = operand_subword (x, 0, 1, BLKmode);\n-      rtx shift;\n-\n-      if (tem == 0)\n-\tabort ();\n-\n-      shift = expand_shift (LSHIFT_EXPR, word_mode,\n-\t\t\t    gen_rtx_REG (word_mode, regno),\n-\t\t\t    build_int_2 ((UNITS_PER_WORD - size)\n-\t\t\t\t\t * BITS_PER_UNIT, 0), NULL_RTX, 0);\n-      emit_move_insn (tem, shift);\n-      return;\n-    }\n-\n   /* See if the machine can do this with a store multiple insn.  */\n #ifdef HAVE_store_multiple\n   if (HAVE_store_multiple)\n     {\n-      last = get_last_insn ();\n-      pat = gen_store_multiple (x, gen_rtx_REG (word_mode, regno),\n-\t\t\t\tGEN_INT (nregs));\n+      rtx last = get_last_insn ();\n+      rtx pat = gen_store_multiple (x, gen_rtx_REG (word_mode, regno),\n+\t\t\t\t    GEN_INT (nregs));\n       if (pat)\n \t{\n \t  emit_insn (pat);"}, {"sha": "9a73a718f4741e4b69d04f852582686a31914b91", "filename": "gcc/expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=c6b97fac181cd452623b4208eb0c8209b6c47c71", "patch": "@@ -414,7 +414,7 @@ extern void move_block_to_reg PARAMS ((int, rtx, int, enum machine_mode));\n \n /* Copy all or part of a BLKmode value X out of registers starting at REGNO.\n    The number of registers to be filled is NREGS.  */\n-extern void move_block_from_reg PARAMS ((int, rtx, int, int));\n+extern void move_block_from_reg PARAMS ((int, rtx, int));\n \n /* Generate a non-consecutive group of registers represented by a PARALLEL.  */\n extern rtx gen_group_rtx PARAMS ((rtx));\n@@ -433,7 +433,7 @@ extern void emit_group_store PARAMS ((rtx, rtx, int));\n \n #ifdef TREE_CODE\n /* Copy BLKmode object from a set of registers.  */\n-extern rtx copy_blkmode_from_reg PARAMS ((rtx,rtx,tree));\n+extern rtx copy_blkmode_from_reg PARAMS ((rtx, rtx, tree));\n #endif\n \n /* Mark REG as holding a parameter for the next CALL_INSN.  */"}, {"sha": "ba23632e99c133382cc5c0d77f74fb2226751a12", "filename": "gcc/function.c", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b97fac181cd452623b4208eb0c8209b6c47c71/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c6b97fac181cd452623b4208eb0c8209b6c47c71", "patch": "@@ -48,6 +48,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"except.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"optabs.h\"\n #include \"libfuncs.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -4659,7 +4660,7 @@ assign_parms (fndecl)\n \n \t  else\n \t    move_block_from_reg (REGNO (entry_parm), validize_mem (stack_parm),\n-\t\t\t\t partial, int_size_in_bytes (TREE_TYPE (parm)));\n+\t\t\t\t partial);\n \n \t  entry_parm = stack_parm;\n \t}\n@@ -4769,9 +4770,9 @@ assign_parms (fndecl)\n \t  if (GET_CODE (entry_parm) == REG\n \t      || GET_CODE (entry_parm) == PARALLEL)\n \t    {\n-\t      int size_stored\n-\t\t= CEIL_ROUND (int_size_in_bytes (TREE_TYPE (parm)),\n-\t\t\t      UNITS_PER_WORD);\n+\t      int size = int_size_in_bytes (TREE_TYPE (parm));\n+\t      int size_stored = CEIL_ROUND (size, UNITS_PER_WORD);\n+\t      rtx mem;\n \n \t      /* Note that we will be storing an integral number of words.\n \t\t So we have to be careful to ensure that we allocate an\n@@ -4792,16 +4793,49 @@ assign_parms (fndecl)\n \t      else if (PARM_BOUNDARY % BITS_PER_WORD != 0)\n \t\tabort ();\n \n+\t      mem = validize_mem (stack_parm);\n+\n \t      /* Handle calls that pass values in multiple non-contiguous\n \t\t locations.  The Irix 6 ABI has examples of this.  */\n \t      if (GET_CODE (entry_parm) == PARALLEL)\n-\t\temit_group_store (validize_mem (stack_parm), entry_parm,\n-\t\t\t\t  int_size_in_bytes (TREE_TYPE (parm)));\n+\t\temit_group_store (mem, entry_parm, size);\n+\n+\t      /* If SIZE is that of a mode no bigger than a word, just use\n+\t\t that mode's store operation.  */\n+\t      else if (size <= UNITS_PER_WORD)\n+\t\t{\n+\t\t  enum machine_mode mode\n+\t\t    = mode_for_size (size * BITS_PER_UNIT, MODE_INT, 0);\n+\n+\t\t  if (mode != BLKmode)\n+\t\t    {\n+\t\t      rtx reg = gen_rtx_REG (mode, REGNO (entry_parm));\n+\t\t      emit_move_insn (change_address (mem, mode, 0), reg);\n+\t\t    }\n+\n+\t\t  /* Blocks smaller than a word on a BYTES_BIG_ENDIAN\n+\t\t     machine must be aligned to the left before storing\n+\t\t     to memory.  Note that the previous test doesn't\n+\t\t     handle all cases (e.g. SIZE == 3).  */\n+\t\t  else if (size != UNITS_PER_WORD\n+\t\t\t   && BYTES_BIG_ENDIAN)\n+\t\t    {\n+\t\t      rtx tem, x;\n+\t\t      int by = (UNITS_PER_WORD - size) * BITS_PER_UNIT;\n+\t\t      rtx reg = gen_rtx_REG (word_mode, REGNO (entry_parm));\n+\n+\t\t      x = expand_binop (word_mode, ashl_optab, reg,\n+\t\t\t\t\tGEN_INT (by), 0, 1, OPTAB_WIDEN);\n+\t\t      tem = change_address (mem, word_mode, 0);\n+\t\t      emit_move_insn (tem, x);\n+\t\t    }\n+\t\t  else\n+\t\t    move_block_from_reg (REGNO (entry_parm), mem,\n+\t\t\t\t\t size_stored / UNITS_PER_WORD);\n+\t\t}\n \t      else\n-\t\tmove_block_from_reg (REGNO (entry_parm),\n-\t\t\t\t     validize_mem (stack_parm),\n-\t\t\t\t     size_stored / UNITS_PER_WORD,\n-\t\t\t\t     int_size_in_bytes (TREE_TYPE (parm)));\n+\t\tmove_block_from_reg (REGNO (entry_parm), mem,\n+\t\t\t\t     size_stored / UNITS_PER_WORD);\n \t    }\n \t  SET_DECL_RTL (parm, stack_parm);\n \t}"}]}