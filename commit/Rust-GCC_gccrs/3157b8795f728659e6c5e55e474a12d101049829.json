{"sha": "3157b8795f728659e6c5e55e474a12d101049829", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE1N2I4Nzk1ZjcyODY1OWU2YzVlNTVlNDc0YTEyZDEwMTA0OTgyOQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2014-02-26T21:57:40Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2014-02-26T21:57:40Z"}, "message": "re PR target/57935 (ICE in rs6000_secondary_reload_inner:15181, type = load)\n\n\tPR target/57935\n\t* reload1.c (emit_input_reload_insns): When reload_override_in,\n\tset old to rl->in_reg when rl->in_reg is a subreg.\n\nFrom-SVN: r208186", "tree": {"sha": "d235d5154c69d5e4760918b48e86aa3efb258389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d235d5154c69d5e4760918b48e86aa3efb258389"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3157b8795f728659e6c5e55e474a12d101049829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3157b8795f728659e6c5e55e474a12d101049829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3157b8795f728659e6c5e55e474a12d101049829", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3157b8795f728659e6c5e55e474a12d101049829/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4be3d4fa5296e4c13116f62100dd831f4d5dada0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be3d4fa5296e4c13116f62100dd831f4d5dada0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be3d4fa5296e4c13116f62100dd831f4d5dada0"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "cdc06fb210c52d4fa449d6d8072d5ee6890b9fb8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3157b8795f728659e6c5e55e474a12d101049829/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3157b8795f728659e6c5e55e474a12d101049829/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3157b8795f728659e6c5e55e474a12d101049829", "patch": "@@ -1,3 +1,9 @@\n+2014-02-27  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/57935\n+\t* reload1.c (emit_input_reload_insns): When reload_override_in,\n+\tset old to rl->in_reg when rl->in_reg is a subreg.\n+\n 2014-02-26  Richard Biener  <rguenther@suse.de>\n \n \tPR bootstrap/60343"}, {"sha": "3d735eeeec97ef1d53a335cf5d0e2cc8087f2604", "filename": "gcc/reload1.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3157b8795f728659e6c5e55e474a12d101049829/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3157b8795f728659e6c5e55e474a12d101049829/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=3157b8795f728659e6c5e55e474a12d101049829", "patch": "@@ -7238,9 +7238,12 @@ emit_input_reload_insns (struct insn_chain *chain, struct reload *rl,\n   /* delete_output_reload is only invoked properly if old contains\n      the original pseudo register.  Since this is replaced with a\n      hard reg when RELOAD_OVERRIDE_IN is set, see if we can\n-     find the pseudo in RELOAD_IN_REG.  */\n+     find the pseudo in RELOAD_IN_REG.  This is also used to\n+     determine whether a secondary reload is needed.  */\n   if (reload_override_in[j]\n-      && REG_P (rl->in_reg))\n+      && (REG_P (rl->in_reg)\n+\t  || (GET_CODE (rl->in_reg) == SUBREG\n+\t      && REG_P (SUBREG_REG (rl->in_reg)))))\n     {\n       oldequiv = old;\n       old = rl->in_reg;"}]}