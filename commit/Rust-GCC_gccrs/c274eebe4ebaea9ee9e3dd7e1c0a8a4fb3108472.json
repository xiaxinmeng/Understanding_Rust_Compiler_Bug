{"sha": "c274eebe4ebaea9ee9e3dd7e1c0a8a4fb3108472", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI3NGVlYmU0ZWJhZWE5ZWU5ZTNkZDdlMWMwYThhNGZiMzEwODQ3Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-20T07:28:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-20T07:28:25Z"}, "message": "re PR target/82370 (AVX512 can use a memory operand for immediate-count vpsrlw, but gcc doesn't.)\n\n\tPR target/82370\n\t* config/i386/sse.md (*andnot<mode>3,\n\t<mask_codefor><code><mode>3<mask_name>, *<code><mode>3): Split\n\t(=v,v,vm) alternative into (=x,x,xm) and (=v,v,vm), for 128-bit\n\tand 256-bit vectors, the (=x,x,xm) alternative and when mask is\n\tnot applied use empty suffix even for TARGET_AVX512VL.\n\t* config/i386/subst.md (mask_prefix3, mask_prefix4): When mask\n\tis applied, supply evex,evex or evex,evex,evex instead of just\n\tevex.\n\nFrom-SVN: r253923", "tree": {"sha": "add58c57c1a3fd540a313f09f6506d00ce07b220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/add58c57c1a3fd540a313f09f6506d00ce07b220"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c274eebe4ebaea9ee9e3dd7e1c0a8a4fb3108472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c274eebe4ebaea9ee9e3dd7e1c0a8a4fb3108472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c274eebe4ebaea9ee9e3dd7e1c0a8a4fb3108472", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c274eebe4ebaea9ee9e3dd7e1c0a8a4fb3108472/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8cca31c48f15ca5d6fd451eff71de74be6f2c50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8cca31c48f15ca5d6fd451eff71de74be6f2c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8cca31c48f15ca5d6fd451eff71de74be6f2c50"}], "stats": {"total": 60, "additions": 39, "deletions": 21}, "files": [{"sha": "9893b5ed34ef618765454f7622078e8e13c98687", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c274eebe4ebaea9ee9e3dd7e1c0a8a4fb3108472/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c274eebe4ebaea9ee9e3dd7e1c0a8a4fb3108472/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c274eebe4ebaea9ee9e3dd7e1c0a8a4fb3108472", "patch": "@@ -1,3 +1,15 @@\n+2017-10-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82370\n+\t* config/i386/sse.md (*andnot<mode>3,\n+\t<mask_codefor><code><mode>3<mask_name>, *<code><mode>3): Split\n+\t(=v,v,vm) alternative into (=x,x,xm) and (=v,v,vm), for 128-bit\n+\tand 256-bit vectors, the (=x,x,xm) alternative and when mask is\n+\tnot applied use empty suffix even for TARGET_AVX512VL.\n+\t* config/i386/subst.md (mask_prefix3, mask_prefix4): When mask\n+\tis applied, supply evex,evex or evex,evex,evex instead of just\n+\tevex.\n+\n 2017-10-20  Julia Koval  <julia.koval@intel.com>\n \n \t* common/config/i386/i386-common.c (OPTION_MASK_ISA_GFNI_SET,"}, {"sha": "84e5b6888ef9ace0d410e1a3309c74d996b40f9c", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c274eebe4ebaea9ee9e3dd7e1c0a8a4fb3108472/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c274eebe4ebaea9ee9e3dd7e1c0a8a4fb3108472/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c274eebe4ebaea9ee9e3dd7e1c0a8a4fb3108472", "patch": "@@ -11568,10 +11568,10 @@\n   \"TARGET_AVX512BW\")\n \n (define_insn \"*andnot<mode>3\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"=x,v\")\n+  [(set (match_operand:VI 0 \"register_operand\" \"=x,x,v\")\n \t(and:VI\n-\t  (not:VI (match_operand:VI 1 \"register_operand\" \"0,v\"))\n-\t  (match_operand:VI 2 \"vector_operand\" \"xBm,vm\")))]\n+\t  (not:VI (match_operand:VI 1 \"register_operand\" \"0,x,v\"))\n+\t  (match_operand:VI 2 \"vector_operand\" \"xBm,xm,vm\")))]\n   \"TARGET_SSE\"\n {\n   static char buf[64];\n@@ -11606,10 +11606,11 @@\n \tcase E_V4DImode:\n \tcase E_V4SImode:\n \tcase E_V2DImode:\n-\t  ssesuffix = TARGET_AVX512VL ? \"<ssemodesuffix>\" : \"\";\n+\t  ssesuffix = (TARGET_AVX512VL && which_alternative == 2\n+\t\t       ? \"<ssemodesuffix>\" : \"\");\n \t  break;\n \tdefault:\n-\t  ssesuffix = TARGET_AVX512VL ? \"q\" : \"\";\n+\t  ssesuffix = TARGET_AVX512VL && which_alternative == 2 ? \"q\" : \"\";\n \t}\n       break;\n \n@@ -11635,6 +11636,7 @@\n       ops = \"%s%s\\t{%%2, %%0|%%0, %%2}\";\n       break;\n     case 1:\n+    case 2:\n       ops = \"v%s%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n       break;\n     default:\n@@ -11644,15 +11646,15 @@\n   snprintf (buf, sizeof (buf), ops, tmp, ssesuffix);\n   return buf;\n }\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,avx,avx\")\n    (set_attr \"type\" \"sselog\")\n    (set (attr \"prefix_data16\")\n      (if_then_else\n        (and (eq_attr \"alternative\" \"0\")\n \t    (eq_attr \"mode\" \"TI\"))\n        (const_string \"1\")\n        (const_string \"*\")))\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,vex,evex\")\n    (set (attr \"mode\")\n \t(cond [(and (match_test \"<MODE_SIZE> == 16\")\n \t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n@@ -11697,10 +11699,10 @@\n })\n \n (define_insn \"<mask_codefor><code><mode>3<mask_name>\"\n-  [(set (match_operand:VI48_AVX_AVX512F 0 \"register_operand\" \"=x,v\")\n+  [(set (match_operand:VI48_AVX_AVX512F 0 \"register_operand\" \"=x,x,v\")\n \t(any_logic:VI48_AVX_AVX512F\n-\t  (match_operand:VI48_AVX_AVX512F 1 \"vector_operand\" \"%0,v\")\n-\t  (match_operand:VI48_AVX_AVX512F 2 \"vector_operand\" \"xBm,vm\")))]\n+\t  (match_operand:VI48_AVX_AVX512F 1 \"vector_operand\" \"%0,x,v\")\n+\t  (match_operand:VI48_AVX_AVX512F 2 \"vector_operand\" \"xBm,xm,vm\")))]\n   \"TARGET_SSE && <mask_mode512bit_condition>\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n@@ -11730,7 +11732,9 @@\n \tcase E_V4DImode:\n \tcase E_V4SImode:\n \tcase E_V2DImode:\n-\t  ssesuffix = TARGET_AVX512VL ? \"<ssemodesuffix>\" : \"\";\n+\t  ssesuffix = (TARGET_AVX512VL\n+\t\t       && (<mask_applied> || which_alternative == 2)\n+\t\t       ? \"<ssemodesuffix>\" : \"\");\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();\n@@ -11759,6 +11763,7 @@\n         ops = \"%s%s\\t{%%2, %%0|%%0, %%2}\";\n       break;\n     case 1:\n+    case 2:\n       ops = \"v%s%s\\t{%%2, %%1, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%1, %%2}\";\n       break;\n     default:\n@@ -11768,15 +11773,15 @@\n   snprintf (buf, sizeof (buf), ops, tmp, ssesuffix);\n   return buf;\n }\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,avx,avx\")\n    (set_attr \"type\" \"sselog\")\n    (set (attr \"prefix_data16\")\n      (if_then_else\n        (and (eq_attr \"alternative\" \"0\")\n \t    (eq_attr \"mode\" \"TI\"))\n        (const_string \"1\")\n        (const_string \"*\")))\n-   (set_attr \"prefix\" \"<mask_prefix3>\")\n+   (set_attr \"prefix\" \"<mask_prefix3>,evex\")\n    (set (attr \"mode\")\n \t(cond [(and (match_test \"<MODE_SIZE> == 16\")\n \t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n@@ -11795,10 +11800,10 @@\n \t      (const_string \"<sseinsnmode>\")))])\n \n (define_insn \"*<code><mode>3\"\n-  [(set (match_operand:VI12_AVX_AVX512F 0 \"register_operand\" \"=x,v\")\n+  [(set (match_operand:VI12_AVX_AVX512F 0 \"register_operand\" \"=x,x,v\")\n \t(any_logic: VI12_AVX_AVX512F\n-\t  (match_operand:VI12_AVX_AVX512F 1 \"vector_operand\" \"%0,v\")\n-\t  (match_operand:VI12_AVX_AVX512F 2 \"vector_operand\" \"xBm,vm\")))]\n+\t  (match_operand:VI12_AVX_AVX512F 1 \"vector_operand\" \"%0,x,v\")\n+\t  (match_operand:VI12_AVX_AVX512F 2 \"vector_operand\" \"xBm,xm,vm\")))]\n   \"TARGET_SSE && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n   static char buf[64];\n@@ -11827,7 +11832,7 @@\n \tcase E_V16HImode:\n \tcase E_V16QImode:\n \tcase E_V8HImode:\n-\t  ssesuffix = TARGET_AVX512VL ? \"q\" : \"\";\n+\t  ssesuffix = TARGET_AVX512VL && which_alternative == 2 ? \"q\" : \"\";\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();\n@@ -11853,6 +11858,7 @@\n       ops = \"%s%s\\t{%%2, %%0|%%0, %%2}\";\n       break;\n     case 1:\n+    case 2:\n       ops = \"v%s%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n       break;\n     default:\n@@ -11862,15 +11868,15 @@\n   snprintf (buf, sizeof (buf), ops, tmp, ssesuffix);\n   return buf;\n }\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,avx,avx\")\n    (set_attr \"type\" \"sselog\")\n    (set (attr \"prefix_data16\")\n      (if_then_else\n        (and (eq_attr \"alternative\" \"0\")\n \t    (eq_attr \"mode\" \"TI\"))\n        (const_string \"1\")\n        (const_string \"*\")))\n-   (set_attr \"prefix\" \"<mask_prefix3>\")\n+   (set_attr \"prefix\" \"<mask_prefix3>,evex\")\n    (set (attr \"mode\")\n \t(cond [(and (match_test \"<MODE_SIZE> == 16\")\n \t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))"}, {"sha": "c93a526343555015e5a1e64bdd2587c82008f63c", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c274eebe4ebaea9ee9e3dd7e1c0a8a4fb3108472/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c274eebe4ebaea9ee9e3dd7e1c0a8a4fb3108472/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=c274eebe4ebaea9ee9e3dd7e1c0a8a4fb3108472", "patch": "@@ -62,8 +62,8 @@\n (define_subst_attr \"store_mask_predicate\" \"mask\" \"nonimmediate_operand\" \"register_operand\")\n (define_subst_attr \"mask_prefix\" \"mask\" \"vex\" \"evex\")\n (define_subst_attr \"mask_prefix2\" \"mask\" \"maybe_vex\" \"evex\")\n-(define_subst_attr \"mask_prefix3\" \"mask\" \"orig,vex\" \"evex\")\n-(define_subst_attr \"mask_prefix4\" \"mask\" \"orig,orig,vex\" \"evex\")\n+(define_subst_attr \"mask_prefix3\" \"mask\" \"orig,vex\" \"evex,evex\")\n+(define_subst_attr \"mask_prefix4\" \"mask\" \"orig,orig,vex\" \"evex,evex,evex\")\n (define_subst_attr \"mask_expand_op3\" \"mask\" \"3\" \"5\")\n \n (define_subst \"mask\""}]}