{"sha": "c0c2f013906a695b8a02226f119649a370d9e083", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBjMmYwMTM5MDZhNjk1YjhhMDIyMjZmMTE5NjQ5YTM3MGQ5ZTA4Mw==", "commit": {"author": {"name": "Yuliang Wang", "email": "yuliang.wang@arm.com", "date": "2019-09-30T16:55:45Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-30T16:55:45Z"}, "message": "[AArch64][SVE] Utilize ASRD instruction for division and remainder\n\n2019-09-30  Yuliang Wang  <yuliang.wang@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (sdiv_pow2<mode>3):\n\tNew pattern for ASRD.\n\t* config/aarch64/iterators.md (UNSPEC_ASRD): New unspec.\n\t* internal-fn.def (IFN_DIV_POW2): New internal function.\n\t* optabs.def (sdiv_pow2_optab): New optab.\n\t* tree-vect-patterns.c (vect_recog_divmod_pattern):\n\tModify pattern to support new operation.\n\t* doc/md.texi (sdiv_pow2$var{m3}): Documentation for the above.\n\t* doc/sourcebuild.texi (vect_sdiv_pow2_si):\n\tDocument new target selector.\n\ngcc/testsuite/\n\t* gcc.dg/vect/vect-sdiv-pow2-1.c: New test.\n\t* gcc.target/aarch64/sve/asrdiv_1.c: As above.\n\t* lib/target-supports.exp (check_effective_target_vect_sdiv_pow2_si):\n\tReturn true for AArch64 with SVE.\n\nFrom-SVN: r276343", "tree": {"sha": "6743c5d13bf23522c114e0de5e187c1dade8a1c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6743c5d13bf23522c114e0de5e187c1dade8a1c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0c2f013906a695b8a02226f119649a370d9e083", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c2f013906a695b8a02226f119649a370d9e083", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0c2f013906a695b8a02226f119649a370d9e083", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c2f013906a695b8a02226f119649a370d9e083/comments", "author": null, "committer": null, "parents": [{"sha": "dcdd0f055731a8c960a15e5de8715d041d9a7876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcdd0f055731a8c960a15e5de8715d041d9a7876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcdd0f055731a8c960a15e5de8715d041d9a7876"}], "stats": {"total": 250, "additions": 249, "deletions": 1}, "files": [{"sha": "78d296d228f6ac4c36ee208da7cfc2f1b1bac54d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0c2f013906a695b8a02226f119649a370d9e083", "patch": "@@ -1,3 +1,16 @@\n+2019-09-30  Yuliang Wang  <yuliang.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (sdiv_pow2<mode>3):\n+\tNew pattern for ASRD.\n+\t* config/aarch64/iterators.md (UNSPEC_ASRD): New unspec.\n+\t* internal-fn.def (IFN_DIV_POW2): New internal function.\n+\t* optabs.def (sdiv_pow2_optab): New optab.\n+\t* tree-vect-patterns.c (vect_recog_divmod_pattern):\n+\tModify pattern to support new operation.\n+\t* doc/md.texi (sdiv_pow2$var{m3}): Documentation for the above.\n+\t* doc/sourcebuild.texi (vect_sdiv_pow2_si):\n+\tDocument new target selector.\n+\n 2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_layout_frame): Use crtl->abi"}, {"sha": "41c8689cefd5e42295c60a571a94b0e0cf621bab", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=c0c2f013906a695b8a02226f119649a370d9e083", "patch": "@@ -71,6 +71,7 @@\n ;; ---- [INT] Binary logical operations\n ;; ---- [INT] Binary logical operations (inverted second input)\n ;; ---- [INT] Shifts\n+;; ---- [INT] Shifts (rounding towards 0)\n ;; ---- [FP] General binary arithmetic corresponding to rtx codes\n ;; ---- [FP] General binary arithmetic corresponding to unspecs\n ;; ---- [FP] Addition\n@@ -2563,6 +2564,46 @@\n   [(set_attr \"movprfx\" \"yes\")]\n )\n \n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Shifts (rounding towards 0)\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - ASRD\n+;; -------------------------------------------------------------------------\n+\n+;; Unpredicated arithmetic right shift for division by power-of-2.\n+(define_expand \"sdiv_pow2<mode>3\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(unspec:SVE_I\n+\t  [(match_dup 3)\n+\t   (unspec:SVE_I\n+\t     [(match_operand:SVE_I 1 \"register_operand\")\n+\t      (match_operand 2 \"aarch64_simd_rshift_imm\")]\n+\t    UNSPEC_ASRD)]\n+\t UNSPEC_PRED_X))]\n+  \"TARGET_SVE\"\n+  {\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n+  }\n+)\n+\n+;; Predicated ASRD with PTRUE.\n+(define_insn \"*sdiv_pow2<mode>3\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (unspec:SVE_I\n+\t     [(match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t      (match_operand 3 \"aarch64_simd_rshift_imm\")]\n+\t    UNSPEC_ASRD)]\n+\t UNSPEC_PRED_X))]\n+  \"TARGET_SVE\"\n+  \"@\n+  asrd\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+  movprfx\\t%0, %2\\;asrd\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [FP] General binary arithmetic corresponding to rtx codes\n ;; -------------------------------------------------------------------------"}, {"sha": "1e321af710bfe80606eedee7e0d191f36c70355b", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=c0c2f013906a695b8a02226f119649a370d9e083", "patch": "@@ -538,6 +538,7 @@\n     UNSPEC_SMULHRS\t; Used in aarch64-sve2.md.\n     UNSPEC_UMULHS\t; Used in aarch64-sve2.md.\n     UNSPEC_UMULHRS\t; Used in aarch64-sve2.md.\n+    UNSPEC_ASRD\t\t; Used in aarch64-sve.md.\n ])\n \n ;; ------------------------------------------------------------------"}, {"sha": "868016a31076fcf15bf8a0df43eeff07771bc252", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=c0c2f013906a695b8a02226f119649a370d9e083", "patch": "@@ -5414,6 +5414,17 @@ op0 = (narrow) (((((wide) op1 * (wide) op2) >> (N / 2 - 2)) + 1) >> 1);\n where the sign of @samp{narrow} determines whether this is a signed\n or unsigned operation, and @var{N} is the size of @samp{wide} in bits.\n \n+@cindex @code{sdiv_pow2@var{m3}} instruction pattern\n+@item @samp{sdiv_pow2@var{m3}}\n+@cindex @code{sdiv_pow2@var{m3}} instruction pattern\n+@itemx @samp{sdiv_pow2@var{m3}}\n+Signed division by power-of-2 immediate. Equivalent to:\n+@smallexample\n+signed op0, op1;\n+@dots{}\n+op0 = op1 / (1 << imm);\n+@end smallexample\n+\n @cindex @code{vec_shl_insert_@var{m}} instruction pattern\n @item @samp{vec_shl_insert_@var{m}}\n Shift the elements in vector input operand 1 left one element (i.e.@:"}, {"sha": "56967928de6eca6e626bedb1fccb801d852f852a", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=c0c2f013906a695b8a02226f119649a370d9e083", "patch": "@@ -1446,6 +1446,10 @@ of bytes.\n Target supports both signed and unsigned multiply-high-with-round-and-scale\n operations on vectors of half-words.\n \n+@item vect_sdiv_pow2_si\n+Target supports signed division by constant power-of-2 operations\n+on vectors of 4-byte integers.\n+\n @item vect_condition\n Target supports vector conditional operations.\n "}, {"sha": "a9459449fee15b17fe9c8ff1113b0305ed936bff", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=c0c2f013906a695b8a02226f119649a370d9e083", "patch": "@@ -140,6 +140,8 @@ DEF_INTERNAL_OPTAB_FN (WHILE_ULT, ECF_CONST | ECF_NOTHROW, while_ult, while)\n DEF_INTERNAL_OPTAB_FN (VEC_SHL_INSERT, ECF_CONST | ECF_NOTHROW,\n \t\t       vec_shl_insert, binary)\n \n+DEF_INTERNAL_OPTAB_FN (DIV_POW2, ECF_CONST | ECF_NOTHROW, sdiv_pow2, binary)\n+\n DEF_INTERNAL_OPTAB_FN (FMS, ECF_CONST, fms, ternary)\n DEF_INTERNAL_OPTAB_FN (FNMA, ECF_CONST, fnma, ternary)\n DEF_INTERNAL_OPTAB_FN (FNMS, ECF_CONST, fnms, ternary)"}, {"sha": "e9373158fc00b33768b2720a5366e94ab6a9b96f", "filename": "gcc/optabs.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=c0c2f013906a695b8a02226f119649a370d9e083", "patch": "@@ -347,6 +347,7 @@ OPTAB_D (smulhs_optab, \"smulhs$a3\")\n OPTAB_D (smulhrs_optab, \"smulhrs$a3\")\n OPTAB_D (umulhs_optab, \"umulhs$a3\")\n OPTAB_D (umulhrs_optab, \"umulhrs$a3\")\n+OPTAB_D (sdiv_pow2_optab, \"sdiv_pow2$a3\")\n OPTAB_D (vec_pack_sfix_trunc_optab, \"vec_pack_sfix_trunc_$a\")\n OPTAB_D (vec_pack_ssat_optab, \"vec_pack_ssat_$a\")\n OPTAB_D (vec_pack_trunc_optab, \"vec_pack_trunc_$a\")"}, {"sha": "cc31ac8cd5fc2098b7593de666e8ccbb32192bd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0c2f013906a695b8a02226f119649a370d9e083", "patch": "@@ -1,3 +1,10 @@\n+2019-09-30  Yuliang Wang  <yuliang.wang@arm.com>\n+\n+\t* gcc.dg/vect/vect-sdiv-pow2-1.c: New test.\n+\t* gcc.target/aarch64/sve/asrdiv_1.c: As above.\n+\t* lib/target-supports.exp (check_effective_target_vect_sdiv_pow2_si):\n+\tReturn true for AArch64 with SVE.\n+\n 2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/torture/simd-abi-9.c: New test."}, {"sha": "be70bc6c47e212ee510bd2a9c20b0ee8cb5903fe", "filename": "gcc/testsuite/gcc.dg/vect/vect-sdiv-pow2-1.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-sdiv-pow2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-sdiv-pow2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-sdiv-pow2-1.c?ref=c0c2f013906a695b8a02226f119649a370d9e083", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+#define DIV(x,y) ((x)/(y))\n+#define MOD(x,y) ((x)%(y))\n+\n+#define TEMPLATE(PO2,OP)\t\t\t\t\t\t\\\n+void __attribute__ ((noipa))\t\t\t\t\t\t\\\n+f_##PO2##_##OP (int *restrict a, int *restrict b, __INTPTR_TYPE__ n)\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  for (__INTPTR_TYPE__ i = 0; i < n; ++i)\t\t\t\t\\\n+    a[i] = OP (b[i], (1 << PO2));\t\t\t\t\t\\\n+}\n+#define TEMPLATES(PO2)\t\\\n+TEMPLATE (PO2,DIV);\t\\\n+TEMPLATE (PO2,MOD);\n+\n+TEMPLATES (1);\n+TEMPLATES (2);\n+TEMPLATES (3);\n+TEMPLATES (7);\n+TEMPLATES (8);\n+TEMPLATES (10);\n+TEMPLATES (15);\n+TEMPLATES (16);\n+TEMPLATES (20);\n+\n+typedef void (*func_t) (int *, int *, __INTPTR_TYPE__);\n+typedef struct {\n+  int po2;\n+  func_t div;\n+  func_t mod;\n+} fn_t;\n+const fn_t fns[] = {\n+#define FN_PAIR(PO2) { PO2, f_##PO2##_DIV, f_##PO2##_MOD }\n+  FN_PAIR (1),\n+  FN_PAIR (2),\n+  FN_PAIR (3),\n+  FN_PAIR (7),\n+  FN_PAIR (8),\n+  FN_PAIR (10),\n+  FN_PAIR (15),\n+  FN_PAIR (16),\n+  FN_PAIR (20),\n+};\n+\n+int __attribute__ ((noipa, noinline))\n+power2 (int x)\n+{\n+  return 1 << x;\n+}\n+\n+#define N 50\n+\n+int\n+main (void)\n+{\n+  int a[N], b[N], c[N];\n+\n+  for (int i = 0; i < (sizeof(fns)/sizeof(fns[0])); i++)\n+    {\n+      int p = power2 (fns[i].po2);\n+      for (int j = 0; j < N; j++)\n+        a[j] = ((p << 4) * j) / (N - 1) - (p << 5);\n+\n+      fns[i].div (b, a, N);\n+      fns[i].mod (c, a, N);\n+\n+      for (int j = 0; j < N; j++)\n+\tif (a[j] != (b[j] * p + c[j]))\n+          __builtin_abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump {\\.DIV_POW2} \"vect\" { target vect_sdiv_pow2_si } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 18 \"vect\" { target vect_sdiv_pow2_si } } } */"}, {"sha": "615d8b885edef53b5ff5dd6f201669a5258e3caa", "filename": "gcc/testsuite/gcc.target/aarch64/sve/asrdiv_1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fasrdiv_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fasrdiv_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fasrdiv_1.c?ref=c0c2f013906a695b8a02226f119649a370d9e083", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define SIGNED(S) int##S##_t\n+\n+#define DIV(x,y) ((x)/(y))\n+#define MOD(x,y) ((x)%(y))\n+\n+#define TEMPLATE(OP,SIZE)\t\t\t\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\t\t\t\\\n+f_##OP##_##SIZE (SIGNED(SIZE) *restrict a, SIGNED(SIZE) *restrict b,\t\\\n+\t\t __INTPTR_TYPE__ n)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  for (__INTPTR_TYPE__ i = 0; i < n; ++i)\t\t\t\t\\\n+    a[i] = OP (b[i], ((SIGNED(SIZE))1 << ((SIZE)/2+1)));\t\t\\\n+}\n+#define DIVMOD(SIZE)\t\\\n+TEMPLATE (DIV,SIZE);\t\\\n+TEMPLATE (MOD,SIZE);\n+\n+DIVMOD (8);\n+DIVMOD (16);\n+DIVMOD (32);\n+DIVMOD (64);\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 8 \"vect\" } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+, z[0-9]+\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasrd\\tz[0-9]+\\.b, p[0-9]+/m, z[0-9]+\\.b, #5\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, z[0-9]+\\.b, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasrd\\tz[0-9]+\\.h, p[0-9]+/m, z[0-9]+\\.h, #9\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, z[0-9]+\\.h, #9\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasrd\\tz[0-9]+\\.s, p[0-9]+/m, z[0-9]+\\.s, #17\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, z[0-9]+\\.s, #17\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasrd\\tz[0-9]+\\.d, p[0-9]+/m, z[0-9]+\\.d, #33\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, z[0-9]+\\.d, #33\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tasr\\t%} } } */\n+/* { dg-final { scan-assembler-not {\\tlsr\\t%} } } */\n+/* { dg-final { scan-assembler-not {\\tcmplt\\t%} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\t%} } } */"}, {"sha": "a7b76b69b75586e755bb7ad665b582d99e7fd90a", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=c0c2f013906a695b8a02226f119649a370d9e083", "patch": "@@ -6256,6 +6256,14 @@ proc check_effective_target_vect_mulhrs_hi {} {\n \t\t   && [check_effective_target_aarch64_sve2] }]\n }\n \n+# Return 1 if the target plus current options supports signed division\n+# by power-of-2 operations on vectors of 4-byte integers.\n+\n+proc check_effective_target_vect_sdiv_pow2_si {} {\n+    return [expr { [istarget aarch64*-*-*]\n+\t\t   && [check_effective_target_aarch64_sve] }]\n+}\n+\n # Return 1 if the target plus current options supports a vector\n # demotion (packing) of shorts (to chars) and ints (to shorts) \n # using modulo arithmetic, 0 otherwise."}, {"sha": "4dfebbefce6f8bf35fcf89bb3ccf3d29074e5aa0", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c2f013906a695b8a02226f119649a370d9e083/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=c0c2f013906a695b8a02226f119649a370d9e083", "patch": "@@ -2927,6 +2927,37 @@ vect_recog_divmod_pattern (stmt_vec_info stmt_vinfo, tree *type_out)\n       /* Pattern detected.  */\n       vect_pattern_detected (\"vect_recog_divmod_pattern\", last_stmt);\n \n+      *type_out = vectype;\n+\n+      /* Check if the target supports this internal function.  */\n+      internal_fn ifn = IFN_DIV_POW2;\n+      if (direct_internal_fn_supported_p (ifn, vectype, OPTIMIZE_FOR_SPEED))\n+\t{\n+\t  tree shift = build_int_cst (itype, tree_log2 (oprnd1));\n+\n+\t  tree var_div = vect_recog_temp_ssa_var (itype, NULL);\n+\t  gimple *div_stmt = gimple_build_call_internal (ifn, 2, oprnd0, shift);\n+\t  gimple_call_set_lhs (div_stmt, var_div);\n+\n+\t  if (rhs_code == TRUNC_MOD_EXPR)\n+\t    {\n+\t      append_pattern_def_seq (stmt_vinfo, div_stmt);\n+\t      def_stmt\n+\t\t= gimple_build_assign (vect_recog_temp_ssa_var (itype, NULL),\n+\t\t\t\t       LSHIFT_EXPR, var_div, shift);\n+\t      append_pattern_def_seq (stmt_vinfo, def_stmt);\n+\t      pattern_stmt\n+\t\t= gimple_build_assign (vect_recog_temp_ssa_var (itype, NULL),\n+\t\t\t\t       MINUS_EXPR, oprnd0,\n+\t\t\t\t       gimple_assign_lhs (def_stmt));\n+\t    }\n+\t  else\n+\t    pattern_stmt = div_stmt;\n+\t  gimple_set_location (pattern_stmt, gimple_location (last_stmt));\n+\n+\t  return pattern_stmt;\n+\t}\n+\n       cond = build2 (LT_EXPR, boolean_type_node, oprnd0,\n \t\t     build_int_cst (itype, 0));\n       if (rhs_code == TRUNC_DIV_EXPR\n@@ -3003,7 +3034,6 @@ vect_recog_divmod_pattern (stmt_vec_info stmt_vinfo, tree *type_out)\n \t\t\t\t   signmask);\n \t}\n \n-      *type_out = vectype;\n       return pattern_stmt;\n     }\n "}]}