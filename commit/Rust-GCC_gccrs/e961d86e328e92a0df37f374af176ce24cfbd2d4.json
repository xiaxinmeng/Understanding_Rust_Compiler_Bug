{"sha": "e961d86e328e92a0df37f374af176ce24cfbd2d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk2MWQ4NmUzMjhlOTJhMGRmMzdmMzc0YWYxNzZjZTI0Y2ZiZDJkNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-07-03T03:30:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-07-03T03:30:09Z"}, "message": "re PR c++/53788 (C++11 decltype sfinae static member function check (4.7.1))\n\n\tPR c++/53788\n\t* pt.c (build_non_dependent_expr): Don't wrap a dummy object.\n\nFrom-SVN: r189188", "tree": {"sha": "97abf62f4571e48455d2b7dc15434fc31b0980fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97abf62f4571e48455d2b7dc15434fc31b0980fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e961d86e328e92a0df37f374af176ce24cfbd2d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e961d86e328e92a0df37f374af176ce24cfbd2d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e961d86e328e92a0df37f374af176ce24cfbd2d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e961d86e328e92a0df37f374af176ce24cfbd2d4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "65f0c5b308fc97731b8d34236c4852ac58db2d29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f0c5b308fc97731b8d34236c4852ac58db2d29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65f0c5b308fc97731b8d34236c4852ac58db2d29"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "e09166b59cf19714301e48c21ab93b9ef0bbbc7b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e961d86e328e92a0df37f374af176ce24cfbd2d4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e961d86e328e92a0df37f374af176ce24cfbd2d4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e961d86e328e92a0df37f374af176ce24cfbd2d4", "patch": "@@ -1,5 +1,8 @@\n 2012-07-02  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/53788\n+\t* pt.c (build_non_dependent_expr): Don't wrap a dummy object.\n+\n \tPR c++/53816\n \t* class.c (resolves_to_fixed_type_p): Check uses_template_parms\n \t(current_function_decl) instead of processing_template_decl."}, {"sha": "563a1ad294f9355ce9b0fa5a4a16526197bed5f7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e961d86e328e92a0df37f374af176ce24cfbd2d4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e961d86e328e92a0df37f374af176ce24cfbd2d4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e961d86e328e92a0df37f374af176ce24cfbd2d4", "patch": "@@ -20215,6 +20215,10 @@ build_non_dependent_expr (tree expr)\n   if (BRACE_ENCLOSED_INITIALIZER_P (expr))\n     return expr;\n \n+  /* Don't wrap a dummy object, we need to be able to test for it.  */\n+  if (is_dummy_object (expr))\n+    return expr;\n+\n   if (TREE_CODE (expr) == COND_EXPR)\n     return build3 (COND_EXPR,\n \t\t   TREE_TYPE (expr),"}, {"sha": "56b83e44eaa096f963aa46b46b088f9d5bdf056d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e961d86e328e92a0df37f374af176ce24cfbd2d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e961d86e328e92a0df37f374af176ce24cfbd2d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e961d86e328e92a0df37f374af176ce24cfbd2d4", "patch": "@@ -1,5 +1,9 @@\n 2012-07-02  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/53788\n+\t* g++.dg/cpp0x/decltype39.C: New.\n+\t* g++.dg/diagnostic/method1.C: Adjust.\n+\n \tPR c++/53816\n \t* g++.dg/template/ref6.C: New.\n "}, {"sha": "4676d2de9b5810517f6ea40dd8b5b189c7e2438c", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype39.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e961d86e328e92a0df37f374af176ce24cfbd2d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e961d86e328e92a0df37f374af176ce24cfbd2d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype39.C?ref=e961d86e328e92a0df37f374af176ce24cfbd2d4", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/53788\n+// { dg-do compile { target c++11 } }\n+\n+struct t { static const bool value = true; };\n+struct f { static const bool value = false; };\n+\n+template<typename T>\n+struct has_static {\n+  template<typename X>\n+  static t check(X*, decltype(T::fun())* = 0); // { dg-error \"without object\" }\n+  static f check(...);\n+\n+  typedef decltype(check((T*)(0))) ret;\n+  static const bool value = ret::value;\n+};\n+\n+struct test { int fun() { return 0; } };\n+\n+bool b = has_static<test>::value;"}, {"sha": "0e7c580924a142e04cec7cc963cc1fbb03187d35", "filename": "gcc/testsuite/g++.dg/diagnostic/method1.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e961d86e328e92a0df37f374af176ce24cfbd2d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fmethod1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e961d86e328e92a0df37f374af176ce24cfbd2d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fmethod1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fmethod1.C?ref=e961d86e328e92a0df37f374af176ce24cfbd2d4", "patch": "@@ -10,13 +10,11 @@ template <class T>\n void\n bar ()\n {\n-  A::foo ().anything;\t// { dg-error \"request for member\" }\n+  A::foo ().anything;\t// { dg-error \"without object\" }\n }\n \n void\n baz ()\n {\n   bar <int> ();\n }\n-\n-// { dg-prune-output \"without object\" }"}]}