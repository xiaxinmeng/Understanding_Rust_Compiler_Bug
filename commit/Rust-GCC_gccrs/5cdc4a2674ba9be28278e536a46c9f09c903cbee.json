{"sha": "5cdc4a2674ba9be28278e536a46c9f09c903cbee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNkYzRhMjY3NGJhOWJlMjgyNzhlNTM2YTQ2YzlmMDljOTAzY2JlZQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-11-08T17:39:35Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-11-08T17:39:35Z"}, "message": "tree-ssa-propagate.c (set_rhs): Restructure validity tests as a test for inclusion rather than as a test for...\n\n\n\t* tree-ssa-propagate.c (set_rhs): Restructure validity tests as a\n\ttest for inclusion rather than as a test for exclusion.\n\t* tree-ssa-ccp.c (fold_stmt_r) <COND_EXPR>: Use set_rhs to modify\n\tthe condition after calling fold_binary.\n\t* fold-const.c (fold_inf_compare): Remove in_gimple_form check.\n\t(fold_binary) <LT_EXPR, GT_EXPR, LE_EXPR, GE_EXPR>: Likewise.\n\t* builtins.c (fold_builtin_isascii): Likewise.\n\t(fold_builtin_isdigit): Likewise.\n\nFrom-SVN: r118593", "tree": {"sha": "d5a3abe998fec0ea4665a0f7cb5687f9a693ae5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5a3abe998fec0ea4665a0f7cb5687f9a693ae5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cdc4a2674ba9be28278e536a46c9f09c903cbee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cdc4a2674ba9be28278e536a46c9f09c903cbee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cdc4a2674ba9be28278e536a46c9f09c903cbee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cdc4a2674ba9be28278e536a46c9f09c903cbee/comments", "author": null, "committer": null, "parents": [{"sha": "c794c06fef9e079ecdd14bae8ceb3d9046771979", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c794c06fef9e079ecdd14bae8ceb3d9046771979", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c794c06fef9e079ecdd14bae8ceb3d9046771979"}], "stats": {"total": 123, "additions": 85, "deletions": 38}, "files": [{"sha": "4fa736f8a35415f73c4aca0fb7d6c3dc8510df45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdc4a2674ba9be28278e536a46c9f09c903cbee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdc4a2674ba9be28278e536a46c9f09c903cbee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5cdc4a2674ba9be28278e536a46c9f09c903cbee", "patch": "@@ -1,3 +1,14 @@\n+2006-11-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* tree-ssa-propagate.c (set_rhs): Restructure validity tests as a\n+\ttest for inclusion rather than as a test for exclusion.\n+\t* tree-ssa-ccp.c (fold_stmt_r) <COND_EXPR>: Use set_rhs to modify\n+\tthe condition after calling fold_binary.\n+\t* fold-const.c (fold_inf_compare): Remove in_gimple_form check.\n+\t(fold_binary) <LT_EXPR, GT_EXPR, LE_EXPR, GE_EXPR>: Likewise.\n+\t* builtins.c (fold_builtin_isascii): Likewise.\n+\t(fold_builtin_isdigit): Likewise.\n+\n 2006-11-08  Carlos O'Donell  <carlos@codesourcery.com>\n \n \t* configure.ac: Do not set PREFIX_INCLUDE_DIR if $prefix is NONE."}, {"sha": "17355f723fa9fdade508e20cbb24f1e4ce60e473", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdc4a2674ba9be28278e536a46c9f09c903cbee/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdc4a2674ba9be28278e536a46c9f09c903cbee/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5cdc4a2674ba9be28278e536a46c9f09c903cbee", "patch": "@@ -8758,13 +8758,8 @@ fold_builtin_isascii (tree arglist)\n       arg = build2 (BIT_AND_EXPR, integer_type_node, arg,\n \t\t    build_int_cst (NULL_TREE,\n \t\t\t\t   ~ (unsigned HOST_WIDE_INT) 0x7f));\n-      arg = fold_build2 (EQ_EXPR, integer_type_node,\n-\t\t\t arg, integer_zero_node);\n-\n-      if (in_gimple_form && !TREE_CONSTANT (arg))\n-\treturn NULL_TREE;\n-      else\n-\treturn arg;\n+      return fold_build2 (EQ_EXPR, integer_type_node,\n+\t\t\t  arg, integer_zero_node);\n     }\n }\n \n@@ -8807,12 +8802,8 @@ fold_builtin_isdigit (tree arglist)\n       arg = fold_convert (unsigned_type_node, TREE_VALUE (arglist));\n       arg = build2 (MINUS_EXPR, unsigned_type_node, arg,\n \t\t    build_int_cst (unsigned_type_node, target_digit0));\n-      arg = fold_build2 (LE_EXPR, integer_type_node, arg,\n-\t\t\t build_int_cst (unsigned_type_node, 9));\n-      if (in_gimple_form && !TREE_CONSTANT (arg))\n-\treturn NULL_TREE;\n-      else\n-\treturn arg;\n+      return fold_build2 (LE_EXPR, integer_type_node, arg,\n+\t\t\t  build_int_cst (unsigned_type_node, 9));\n     }\n }\n "}, {"sha": "c74ffa37bdece36f524477e601cdb8bfbbf686bd", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdc4a2674ba9be28278e536a46c9f09c903cbee/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdc4a2674ba9be28278e536a46c9f09c903cbee/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5cdc4a2674ba9be28278e536a46c9f09c903cbee", "patch": "@@ -6059,11 +6059,6 @@ fold_inf_compare (enum tree_code code, tree type, tree arg0, tree arg1)\n \treturn fold_build2 (neg ? GE_EXPR : LE_EXPR, type,\n \t\t\t    arg0, build_real (TREE_TYPE (arg0), max));\n \n-      /* The transformation below creates non-gimple code and thus is\n-\t not appropriate if we are in gimple form.  */\n-      if (in_gimple_form)\n-\treturn NULL_TREE;\n-\n       temp = fold_build2 (neg ? LT_EXPR : GT_EXPR, type,\n \t\t\t  arg0, build_real (TREE_TYPE (arg0), max));\n       return fold_build1 (TRUTH_NOT_EXPR, type, temp);\n@@ -11043,8 +11038,7 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t  break;\n \t\t}\n \n-\t    else if (!in_gimple_form\n-\t\t     && TREE_INT_CST_HIGH (arg1) == signed_max_hi\n+\t    else if (TREE_INT_CST_HIGH (arg1) == signed_max_hi\n \t\t     && TREE_INT_CST_LOW (arg1) == signed_max_lo\n \t\t     && TYPE_UNSIGNED (TREE_TYPE (arg1))\n \t\t     /* signed_type does not work on pointer types.  */"}, {"sha": "0ecd221b30d3bebf045cee025f0e072acab2b5d2", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdc4a2674ba9be28278e536a46c9f09c903cbee/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdc4a2674ba9be28278e536a46c9f09c903cbee/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=5cdc4a2674ba9be28278e536a46c9f09c903cbee", "patch": "@@ -2048,12 +2048,15 @@ fold_stmt_r (tree *expr_p, int *walk_subtrees, void *data)\n         {\n \t  tree op0 = TREE_OPERAND (expr, 0);\n           tree tem = fold_binary (TREE_CODE (op0), TREE_TYPE (op0),\n-\t\t\t\t  TREE_OPERAND (op0, 0), TREE_OPERAND (op0, 1));\n-\t  if (tem && is_gimple_condexpr (tem))\n-\t    TREE_OPERAND (expr, 0) = tem;\n-\t  t = expr;\n-          break;\n+\t\t\t\t  TREE_OPERAND (op0, 0),\n+\t\t\t\t  TREE_OPERAND (op0, 1));\n+\t  if (tem && set_rhs (expr_p, tem))\n+\t    {\n+\t      t = *expr_p;\n+\t      break;\n+\t    }\n         }\n+      return NULL_TREE;\n \n     default:\n       return NULL_TREE;"}, {"sha": "e367559f0cf9a327486afd8a263aa4b75cb7a6f8", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 61, "deletions": 13, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdc4a2674ba9be28278e536a46c9f09c903cbee/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdc4a2674ba9be28278e536a46c9f09c903cbee/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=5cdc4a2674ba9be28278e536a46c9f09c903cbee", "patch": "@@ -571,26 +571,74 @@ set_rhs (tree *stmt_p, tree expr)\n   ssa_op_iter iter;\n \n   /* Verify the constant folded result is valid gimple.  */\n-  if (TREE_CODE_CLASS (code) == tcc_binary)\n+  switch (TREE_CODE_CLASS (code))\n     {\n+    case tcc_declaration:\n+      if (!is_gimple_variable(expr))\n+\treturn false;\n+      break;\n+\n+    case tcc_constant:\n+      break;\n+\n+    case tcc_binary:\n+    case tcc_comparison:\n       if (!is_gimple_val (TREE_OPERAND (expr, 0))\n \t  || !is_gimple_val (TREE_OPERAND (expr, 1)))\n \treturn false;\n-    }\n-  else if (TREE_CODE_CLASS (code) == tcc_unary)\n-    {\n+      break;\n+\n+    case tcc_unary:\n       if (!is_gimple_val (TREE_OPERAND (expr, 0)))\n \treturn false;\n+      break;\n+\n+    case tcc_expression:\n+      switch (code)\n+\t{\n+\tcase ADDR_EXPR:\n+          if (TREE_CODE (TREE_OPERAND (expr, 0)) == ARRAY_REF\n+\t      && !is_gimple_val (TREE_OPERAND (TREE_OPERAND (expr, 0), 1)))\n+\t    return false;\n+\t  break;\n+\n+\tcase TRUTH_NOT_EXPR:\n+\t  if (!is_gimple_val (TREE_OPERAND (expr, 0)))\n+\t    return false;\n+\t  break;\n+\n+\tcase TRUTH_AND_EXPR:\n+\tcase TRUTH_XOR_EXPR:\n+\tcase TRUTH_OR_EXPR:\n+\t  if (!is_gimple_val (TREE_OPERAND (expr, 0))\n+\t      || !is_gimple_val (TREE_OPERAND (expr, 1)))\n+\t    return false;\n+\t  break;\n+\n+\tcase CALL_EXPR:\n+\tcase EXC_PTR_EXPR:\n+\tcase FILTER_EXPR:\n+\t  break;\n+\n+\tdefault:\n+\t  return false;\n+\t}\n+      break;\n+\n+    case tcc_exceptional:\n+      switch (code)\n+\t{\n+\tcase SSA_NAME:\n+\t  break;\n+\n+\tdefault:\n+\t  return false;\n+\t}\n+      break;\n+\n+    default:\n+      return false;\n     }\n-  else if (code == ADDR_EXPR)\n-    {\n-      if (TREE_CODE (TREE_OPERAND (expr, 0)) == ARRAY_REF\n-\t  && !is_gimple_val (TREE_OPERAND (TREE_OPERAND (expr, 0), 1)))\n-\treturn false;\n-    }\n-  else if (code == COMPOUND_EXPR\n-\t   || code == MODIFY_EXPR)\n-    return false;\n \n   if (EXPR_HAS_LOCATION (stmt)\n       && EXPR_P (expr)"}]}