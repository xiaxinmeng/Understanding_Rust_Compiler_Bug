{"sha": "c5eab4ed45e9762dfb8a58d2b5672d358467ad89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVlYWI0ZWQ0NWU5NzYyZGZiOGE1OGQyYjU2NzJkMzU4NDY3YWQ4OQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-21T18:55:01Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-24T15:08:57Z"}, "message": "libstdc++: P0769R2 Add shift to <algorithm>\n\nThis patch adds std::shift_left and std::shift_right as per P0769R2.  Alhough\nthese are STL-style algos, this patch places them in <bits/ranges_algo.h>\nbecause they make use of some functions in the ranges namespace that are more\neasily reachable from <bits/ranges_algo.h> than from <bits/stl_algo.h>, namely\nranges::next.  In order to place these algos in <bits/stl_algo.h>, we would need\nto include <bits/range_access.h> from <bits/stl_algo.h> which would undesirably\nincrease the size of <bits/stl_algo.h>.\n\nlibstdc++-v3/ChangeLog:\n\n\tP0769R2 Add shift to <algorithm>\n\t* include/bits/ranges_algo.h (shift_left, shift_right): New.\n\t* testsuite/25_algorithms/shift_left/1.cc: New test.\n\t* testsuite/25_algorithms/shift_right/1.cc: New test.", "tree": {"sha": "ed6aeb75a5597310ddc61c3da5fd070698b5ab8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed6aeb75a5597310ddc61c3da5fd070698b5ab8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5eab4ed45e9762dfb8a58d2b5672d358467ad89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5eab4ed45e9762dfb8a58d2b5672d358467ad89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5eab4ed45e9762dfb8a58d2b5672d358467ad89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5eab4ed45e9762dfb8a58d2b5672d358467ad89/comments", "author": null, "committer": null, "parents": [{"sha": "027a3f1c38727a1ea0969088b0680b2f6bb1e977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/027a3f1c38727a1ea0969088b0680b2f6bb1e977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/027a3f1c38727a1ea0969088b0680b2f6bb1e977"}], "stats": {"total": 306, "additions": 306, "deletions": 0}, "files": [{"sha": "9996c1955d0c35107ced6af0a1a394153841194b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5eab4ed45e9762dfb8a58d2b5672d358467ad89/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5eab4ed45e9762dfb8a58d2b5672d358467ad89/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c5eab4ed45e9762dfb8a58d2b5672d358467ad89", "patch": "@@ -1,3 +1,10 @@\n+2020-02-24  Patrick Palka  <ppalka@redhat.com>\n+\n+\tP0769R2 Add shift to <algorithm>\n+\t* include/bits/ranges_algo.h (shift_left, shift_right): New.\n+\t* testsuite/25_algorithms/shift_left/1.cc: New test.\n+\t* testsuite/25_algorithms/shift_right/1.cc: New test.\n+\n 2020-02-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/stream_iterator.h (istream_iterator(default_sentinel_t)):"}, {"sha": "7d7dbf04103b76da74f68b79e988b22ae0c4bdbf", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5eab4ed45e9762dfb8a58d2b5672d358467ad89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5eab4ed45e9762dfb8a58d2b5672d358467ad89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=c5eab4ed45e9762dfb8a58d2b5672d358467ad89", "patch": "@@ -3683,6 +3683,98 @@ namespace ranges\n   inline constexpr __prev_permutation_fn prev_permutation{};\n \n } // namespace ranges\n+\n+  template<class ForwardIterator>\n+    constexpr ForwardIterator\n+    shift_left(ForwardIterator __first, ForwardIterator __last,\n+\t       typename iterator_traits<ForwardIterator>::difference_type __n)\n+    {\n+      __glibcxx_assert(__n >= 0);\n+      if (__n == 0)\n+\treturn __last;\n+\n+      auto __mid = ranges::next(__first, __n, __last);\n+      if (__mid == __last)\n+\treturn __first;\n+      return std::move(std::move(__mid), std::move(__last), std::move(__first));\n+    }\n+\n+  template<class ForwardIterator>\n+    constexpr ForwardIterator\n+    shift_right(ForwardIterator __first, ForwardIterator __last,\n+\t\ttypename iterator_traits<ForwardIterator>::difference_type __n)\n+    {\n+      __glibcxx_assert(__n >= 0);\n+      if (__n == 0)\n+\treturn __first;\n+\n+      using _Cat = iterator_traits<ForwardIterator>::iterator_category;\n+      if constexpr (derived_from<_Cat, bidirectional_iterator_tag>)\n+\t{\n+\t  auto __mid = ranges::next(__last, -__n, __first);\n+\t  if (__mid == __first)\n+\t    return __last;\n+\n+\t  return std::move_backward(std::move(__first), std::move(__mid),\n+\t\t\t\t    std::move(__last));\n+\t}\n+      else\n+\t{\n+\t  auto __result = ranges::next(__first, __n, __last);\n+\t  if (__result == __last)\n+\t    return __last;\n+\n+\t  auto __dest_head = __first, __dest_tail = __result;\n+\t  while (__dest_head != __result)\n+\t    {\n+\t      if (__dest_tail == __last)\n+\t\t{\n+\t\t  // If we get here, then we must have\n+\t\t  //     2*n >= distance(__first, __last)\n+\t\t  // i.e. we are shifting out at least half of the range.  In\n+\t\t  // this case we can safely perform the shift with a single\n+\t\t  // move.\n+\t\t  std::move(std::move(__first), std::move(__dest_head),\n+\t\t\t    std::move(__result));\n+\t\t  return __result;\n+\t\t}\n+\t      ++__dest_head;\n+\t      ++__dest_tail;\n+\t    }\n+\n+\t  for (;;)\n+\t    {\n+\t      // At the start of each iteration of this outer loop, the range\n+\t      // [__first, __result) contains those elements that after shifting\n+\t      // the whole range right by __n, should end up in\n+\t      // [__dest_head, __dest_tail) in order.\n+\n+\t      // The below inner loop swaps the elements of [__first, __result)\n+\t      // and [__dest_head, __dest_tail), while simultaneously shifting\n+\t      // the latter range by __n.\n+\t      auto __cursor = __first;\n+\t      while (__cursor != __result)\n+\t\t{\n+\t\t  if (__dest_tail == __last)\n+\t\t    {\n+\t\t      // At this point the ranges [__first, result) and\n+\t\t      // [__dest_head, dest_tail) are disjoint, so we can safely\n+\t\t      // move the remaining elements.\n+\t\t      __dest_head = std::move(__cursor, __result,\n+\t\t\t\t\t      std::move(__dest_head));\n+\t\t      std::move(std::move(__first), std::move(__cursor),\n+\t\t\t\tstd::move(__dest_head));\n+\t\t      return __result;\n+\t\t    }\n+\t\t  std::iter_swap(__cursor, __dest_head);\n+\t\t  ++__dest_head;\n+\t\t  ++__dest_tail;\n+\t\t  ++__cursor;\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // concepts"}, {"sha": "f7a716e056313d4c3fad158f0d122d7f9a92bccb", "filename": "libstdc++-v3/testsuite/25_algorithms/shift_left/1.cc", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5eab4ed45e9762dfb8a58d2b5672d358467ad89/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshift_left%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5eab4ed45e9762dfb8a58d2b5672d358467ad89/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshift_left%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshift_left%2F1.cc?ref=c5eab4ed45e9762dfb8a58d2b5672d358467ad89", "patch": "@@ -0,0 +1,104 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using __gnu_test::bidirectional_iterator_wrapper;\n+using __gnu_test::random_access_iterator_wrapper;\n+\n+struct X\n+{\n+  int a = -1;\n+  bool moved_from = false;\n+\n+  X() = default;\n+\n+  X(int a)\n+    : a(a)\n+  { }\n+\n+  X(const X&) = delete;\n+  X& operator=(const X&) = delete;\n+\n+  X(X&& other)\n+  {\n+    if (this != &other)\n+    *this = std::move(other);\n+  }\n+\n+  X&\n+  operator=(X&& other)\n+  {\n+    a = other.a;\n+    other.moved_from = true;\n+    moved_from = false;\n+    return *this;\n+  }\n+};\n+\n+template<int N, template<typename> typename Wrapper>\n+void\n+test01()\n+{\n+  for (int n = 0; n < N+5; n++)\n+    {\n+      X x[N];\n+      for (int i = 0; i < N; i++)\n+\tx[i] = X{i};\n+      test_container<X, Wrapper> cx(x);\n+      auto out = std::shift_left(cx.begin(), cx.end(), n);\n+      if (n < N)\n+\t{\n+\t  VERIFY( out.ptr == x+(N-n) );\n+\t  for (int i = 0; i < N-n; i++)\n+\t    {\n+\t      VERIFY( x[i].a == n+i );\n+\t      VERIFY( !x[i].moved_from );\n+\t    }\n+\t  for (int i = std::max(n, N-n); i < N; i++)\n+\t    VERIFY( x[i].moved_from );\n+\t}\n+      else\n+\t{\n+\t  VERIFY( out.ptr == x );\n+\t  for (int i = 0; i < N; i++)\n+\t    {\n+\t      VERIFY( x[i].a == i );\n+\t      VERIFY( !x[i].moved_from );\n+\t    }\n+\t}\n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01<23, forward_iterator_wrapper>();\n+  test01<23, bidirectional_iterator_wrapper>();\n+  test01<23, random_access_iterator_wrapper>();\n+\n+  test01<24, forward_iterator_wrapper>();\n+  test01<24, bidirectional_iterator_wrapper>();\n+  test01<24, random_access_iterator_wrapper>();\n+}"}, {"sha": "cf736ea91b19cedbb125a28e7742c7b59f8421f7", "filename": "libstdc++-v3/testsuite/25_algorithms/shift_right/1.cc", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5eab4ed45e9762dfb8a58d2b5672d358467ad89/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshift_right%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5eab4ed45e9762dfb8a58d2b5672d358467ad89/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshift_right%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshift_right%2F1.cc?ref=c5eab4ed45e9762dfb8a58d2b5672d358467ad89", "patch": "@@ -0,0 +1,103 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using __gnu_test::bidirectional_iterator_wrapper;\n+using __gnu_test::random_access_iterator_wrapper;\n+\n+struct X\n+{\n+  int a = -1;\n+  bool moved_from = false;\n+\n+  X() = default;\n+\n+  X(int a)\n+    : a(a)\n+  { }\n+\n+  X(const X&) = delete;\n+  X& operator=(const X&) = delete;\n+\n+  X(X&& other)\n+  {\n+    if (this != &other)\n+    *this = std::move(other);\n+  }\n+\n+  X&\n+  operator=(X&& other)\n+  {\n+    a = other.a;\n+    other.moved_from = true;\n+    moved_from = false;\n+    return *this;\n+  }\n+};\n+\n+template<int N, template<typename> typename Wrapper>\n+void\n+test01()\n+{\n+  for (int n = 0; n < N+5; n++)\n+    {\n+      X x[N];\n+      for (int i = 0; i < N; i++)\n+\tx[i] = X(i);\n+      test_container<X, Wrapper> cx(x);\n+      auto out = std::shift_right(cx.begin(), cx.end(), n);\n+      if (n < N)\n+\t{\n+\t  VERIFY( out.ptr == x+n );\n+\t  for (int i = n; i < N; i++)\n+\t    VERIFY( x[i].a == i-n );\n+\t  for (int i = 0; i < std::min(n, N-n); i++)\n+\t    VERIFY( x[i].moved_from );\n+\t  for (int i = std::min(n, N-n); i < std::max(n, N-n); i++)\n+\t    VERIFY( !x[i].moved_from );\n+\t}\n+      else\n+\t{\n+\t  VERIFY( out.ptr == x+N );\n+\t  for (int i = 0; i < N; i++)\n+\t    {\n+\t      VERIFY( x[i].a == i );\n+\t      VERIFY( !x[i].moved_from );\n+\t    }\n+\t}\n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01<23, forward_iterator_wrapper>();\n+  test01<23, bidirectional_iterator_wrapper>();\n+  test01<23, random_access_iterator_wrapper>();\n+\n+  test01<24, forward_iterator_wrapper>();\n+  test01<24, bidirectional_iterator_wrapper>();\n+  test01<24, random_access_iterator_wrapper>();\n+}"}]}