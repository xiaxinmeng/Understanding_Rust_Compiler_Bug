{"sha": "a8e6c82ab09c4c7a8490bc3861049b1941b84c75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThlNmM4MmFiMDljNGM3YTg0OTBiYzM4NjEwNDliMTk0MWI4NGM3NQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-01-16T19:28:11Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-01-16T19:28:11Z"}, "message": "re PR c++/13574 (array default initializer in class lets gcc consume all memory and die)\n\n\tPR c++/13574\n\t* decl.c (compute_array_index_type): Fix grammar in comment.\n\t* init.c (build_zero_init): Handle zero-sized arrays correctly.\n\n\tPR c++/13574\n\t* g++.dg/ext/array1.C: New test.\n\nFrom-SVN: r75991", "tree": {"sha": "74c2145e4dc295abb5383c732901c635ffbfe5e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74c2145e4dc295abb5383c732901c635ffbfe5e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8e6c82ab09c4c7a8490bc3861049b1941b84c75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8e6c82ab09c4c7a8490bc3861049b1941b84c75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8e6c82ab09c4c7a8490bc3861049b1941b84c75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8e6c82ab09c4c7a8490bc3861049b1941b84c75/comments", "author": null, "committer": null, "parents": [{"sha": "965514bd92689acdf4d64d47c9905099a1c7b829", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965514bd92689acdf4d64d47c9905099a1c7b829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/965514bd92689acdf4d64d47c9905099a1c7b829"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "fb2b43dd98a3ae57e0d151beea9e8d0071caacbb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e6c82ab09c4c7a8490bc3861049b1941b84c75/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e6c82ab09c4c7a8490bc3861049b1941b84c75/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a8e6c82ab09c4c7a8490bc3861049b1941b84c75", "patch": "@@ -4,6 +4,10 @@\n \n 2004-01-16  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/13574\n+\t* decl.c (compute_array_index_type): Fix grammar in comment.\n+\t* init.c (build_zero_init): Handle zero-sized arrays correctly.\n+\n \tPR c++/13178\n \t* call.c (name_as_c_string): Print conversion operator names\n \tcorrectly."}, {"sha": "b95cf1e61713837f84a833baa3607592cccec72a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e6c82ab09c4c7a8490bc3861049b1941b84c75/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e6c82ab09c4c7a8490bc3861049b1941b84c75/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a8e6c82ab09c4c7a8490bc3861049b1941b84c75", "patch": "@@ -6079,9 +6079,8 @@ compute_array_index_type (tree name, tree size)\n \t    error (\"size of array is negative\");\n \t  size = integer_one_node;\n \t}\n-      /* Except that an extension we allow zero-sized arrays.  We\n-\t always allow them in system headers because glibc uses\n-\t them.  */\n+      /* As an extension we allow zero-sized arrays.  We always allow\n+\t them in system headers because glibc uses them.  */\n       else if (integer_zerop (size) && pedantic && !in_system_header)\n \t{\n \t  if (name)"}, {"sha": "e74a5980098c21cf33959b40f76b73f8aa7118b5", "filename": "gcc/cp/init.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e6c82ab09c4c7a8490bc3861049b1941b84c75/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e6c82ab09c4c7a8490bc3861049b1941b84c75/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a8e6c82ab09c4c7a8490bc3861049b1941b84c75", "patch": "@@ -228,14 +228,17 @@ build_zero_init (tree type, tree nelts, bool static_storage_p)\n       max_index = nelts ? nelts : array_type_nelts (type);\n       my_friendly_assert (TREE_CODE (max_index) == INTEGER_CST, 20030618);\n \n-      for (index = size_zero_node;\n-\t   !tree_int_cst_lt (max_index, index);\n-\t   index = size_binop (PLUS_EXPR, index, size_one_node))\n-\tinits = tree_cons (index,\n-\t\t\t   build_zero_init (TREE_TYPE (type),\n-\t\t\t\t\t    /*nelts=*/NULL_TREE,\n-\t\t\t\t\t    static_storage_p),\n-\t\t\t   inits);\n+      /* A zero-sized array, which is accepted as an extension, will\n+\t have an upper bound of -1.  */\n+      if (!tree_int_cst_equal (max_index, integer_minus_one_node))\n+\tfor (index = size_zero_node;\n+\t     !tree_int_cst_lt (max_index, index);\n+\t     index = size_binop (PLUS_EXPR, index, size_one_node))\n+\t  inits = tree_cons (index,\n+\t\t\t     build_zero_init (TREE_TYPE (type),\n+\t\t\t\t\t      /*nelts=*/NULL_TREE,\n+\t\t\t\t\t      static_storage_p),\n+\t\t\t     inits);\n       CONSTRUCTOR_ELTS (init) = nreverse (inits);\n     }\n   else if (TREE_CODE (type) == REFERENCE_TYPE)"}, {"sha": "d08f1feee1632149770a065b02f8d0acd85f0309", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e6c82ab09c4c7a8490bc3861049b1941b84c75/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e6c82ab09c4c7a8490bc3861049b1941b84c75/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a8e6c82ab09c4c7a8490bc3861049b1941b84c75", "patch": "@@ -1,5 +1,8 @@\n 2004-01-16  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/13574\n+\t* g++.dg/ext/array1.C: New test.\n+\n \tPR c++/13178\n \t* g++.dg/conversion/op1.C: New test.\n "}, {"sha": "7e54dc91939bfa33ebda813cc254c4300ee2b61d", "filename": "gcc/testsuite/g++.dg/ext/array1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e6c82ab09c4c7a8490bc3861049b1941b84c75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farray1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e6c82ab09c4c7a8490bc3861049b1941b84c75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farray1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farray1.C?ref=a8e6c82ab09c4c7a8490bc3861049b1941b84c75", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/13574\n+// { dg-options \"\" }\n+\n+class A { \n+public: \n+  A() : argc(0), argv() { }; \n+private: \n+  int argc; \n+  char* argv[]; \n+}; \n+ \n+int main() { \n+  A y; \n+} "}]}