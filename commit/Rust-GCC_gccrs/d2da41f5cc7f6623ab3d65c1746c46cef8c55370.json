{"sha": "d2da41f5cc7f6623ab3d65c1746c46cef8c55370", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJkYTQxZjVjYzdmNjYyM2FiM2Q2NWMxNzQ2YzQ2Y2VmOGM1NTM3MA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-07-29T15:34:33Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-07-29T15:34:33Z"}, "message": "driver-alpha.c (IMPLVER_EV4_FAMILY, [...]): Define.\n\n\t* config/alpha/driver-alpha.c (IMPLVER_EV4_FAMILY,\n\tIMPLVER_EV5_FAMILY, IMPLVER_EV6_FAMILY, IMPLVER_EV7_FAMILY): Define.\n\t(AMASK_BWX, AMASK_FIX, AMASK_CIX, AMASK_MVI, AMASK_PRECISE,\n\tAMASK_LOCKPFTCHOK): Define.\n\t(host_detect_local_cpu): Remove buf, f, cpu_names.\n\tDefine cpu_types, implver, amask.\n\tUse __builtin_alpha_implver, __builtin_alpha_amask to determine\n\tnative CPU.\n\t* config.host: Also use driver-alpha.o, alpha/x-alpha on\n\talpha*-dec-osf*.\n\t* config/alpha/osf5.h [__alpha__ || __alpha]\n\t(host_detect_local_cpu): Declare.\n\t(EXTRA_SPEC_FUNCTIONS, MCPU_MTUNE_NATIVE_SPECS)\n\t(DRIVER_SELF_SPECS): Define.\n\nFrom-SVN: r176926", "tree": {"sha": "5a4ae092cf1eed8eb7d2adbb2000404601d9e786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a4ae092cf1eed8eb7d2adbb2000404601d9e786"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2da41f5cc7f6623ab3d65c1746c46cef8c55370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2da41f5cc7f6623ab3d65c1746c46cef8c55370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2da41f5cc7f6623ab3d65c1746c46cef8c55370", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2da41f5cc7f6623ab3d65c1746c46cef8c55370/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b7d763c8475f15c9acaeea799a229a338db477e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7d763c8475f15c9acaeea799a229a338db477e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b7d763c8475f15c9acaeea799a229a338db477e"}], "stats": {"total": 118, "additions": 75, "deletions": 43}, "files": [{"sha": "b838758d2c327a1fc8b153349d301572f1d18a41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2da41f5cc7f6623ab3d65c1746c46cef8c55370/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2da41f5cc7f6623ab3d65c1746c46cef8c55370/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2da41f5cc7f6623ab3d65c1746c46cef8c55370", "patch": "@@ -1,3 +1,20 @@\n+2011-07-29  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/alpha/driver-alpha.c (IMPLVER_EV4_FAMILY,\n+\tIMPLVER_EV5_FAMILY, IMPLVER_EV6_FAMILY, IMPLVER_EV7_FAMILY): Define.\n+\t(AMASK_BWX, AMASK_FIX, AMASK_CIX, AMASK_MVI, AMASK_PRECISE,\n+\tAMASK_LOCKPFTCHOK): Define.\n+\t(host_detect_local_cpu): Remove buf, f, cpu_names.\n+\tDefine cpu_types, implver, amask.\n+\tUse __builtin_alpha_implver, __builtin_alpha_amask to determine\n+\tnative CPU.\n+\t* config.host: Also use driver-alpha.o, alpha/x-alpha on\n+\talpha*-dec-osf*.\n+\t* config/alpha/osf5.h [__alpha__ || __alpha]\n+\t(host_detect_local_cpu): Declare.\n+\t(EXTRA_SPEC_FUNCTIONS, MCPU_MTUNE_NATIVE_SPECS)\n+\t(DRIVER_SELF_SPECS): Define.\n+\n 2011-07-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/47715"}, {"sha": "771be8c283fbc0e43281773215286304892eac46", "filename": "gcc/config.host", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2da41f5cc7f6623ab3d65c1746c46cef8c55370/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2da41f5cc7f6623ab3d65c1746c46cef8c55370/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=d2da41f5cc7f6623ab3d65c1746c46cef8c55370", "patch": "@@ -100,9 +100,9 @@ case ${host} in\n esac\n \n case ${host} in\n-  alpha*-*-linux*)\n+  alpha*-*-linux* | alpha*-dec-osf*)\n     case ${target} in\n-      alpha*-*-linux*)\n+      alpha*-*-linux* | alpha*-dec-osf*)\n \thost_extra_gcc_objs=\"driver-alpha.o\"\n \thost_xmake_file=\"${host_xmake_file} alpha/x-alpha\"\n \t;;"}, {"sha": "daff281fcfb5efdb0ca0a3c0a691acaff2dc6e4a", "filename": "gcc/config/alpha/driver-alpha.c", "status": "modified", "additions": 40, "deletions": 41, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2da41f5cc7f6623ab3d65c1746c46cef8c55370/gcc%2Fconfig%2Falpha%2Fdriver-alpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2da41f5cc7f6623ab3d65c1746c46cef8c55370/gcc%2Fconfig%2Falpha%2Fdriver-alpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fdriver-alpha.c?ref=d2da41f5cc7f6623ab3d65c1746c46cef8c55370", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for the gcc driver.\n-   Copyright (C) 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Arthur Loiret <aloiret@debian.org>\n \n This file is part of GCC.\n@@ -23,6 +23,22 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n \n+/* Chip family type IDs, returned by implver instruction.  */\n+#define IMPLVER_EV4_FAMILY\t0\t\t/* LCA/EV4/EV45 */\n+#define IMPLVER_EV5_FAMILY\t1\t\t/* EV5/EV56/PCA56 */\n+#define IMPLVER_EV6_FAMILY\t2\t\t/* EV6 */\n+#define IMPLVER_EV7_FAMILY\t3\t\t/* EV7 */\n+\n+/* Bit defines for amask instruction.  */\n+#define AMASK_BWX          0x1          /* byte/word extension.  */\n+#define AMASK_FIX          0x2          /* sqrt and f <-> i conversions \n+\t\t\t\t\t   extension.  */\n+#define AMASK_CIX          0x4          /* count extension.  */\n+#define AMASK_MVI          0x100        /* multimedia extension.  */\n+#define AMASK_PRECISE      0x200        /* Precise arithmetic traps.  */\n+#define AMASK_LOCKPFTCHOK  0x1000       /* Safe to prefetch lock cache\n+\t\t\t\t\t   block.  */\n+\n /* This will be called by the spec parser in gcc.c when it sees\n    a %:local_cpu_detect(args) construct.  Currently it will be called\n    with either \"cpu\" or \"tune\" as argument depending on if -mcpu=native\n@@ -39,34 +55,23 @@ along with GCC; see the file COPYING3.  If not see\n const char *\n host_detect_local_cpu (int argc, const char **argv)\n {\n-  const char *cpu = NULL;\n-  char buf[128];\n-  FILE *f;\n-\n-  static const struct cpu_names {\n-   const char *const name;\n-   const char *const cpu;\n-  } cpu_names[] = {\n-    { \"EV79\",\t\"ev67\" },\n-    { \"EV7\",\t\"ev67\" },\n-    { \"EV69\",\t\"ev67\" },\n-    { \"EV68CX\",\t\"ev67\" },\n-    { \"EV68CB\",\t\"ev67\" },\n-    { \"EV68AL\",\t\"ev67\" },\n-    { \"EV67\",\t\"ev67\" },\n-    { \"EV6\",\t\"ev6\" },\n-    { \"PCA57\",\t\"pca56\" },\n-    { \"PCA56\",\t\"pca56\" },\n-    { \"EV56\",\t\"ev56\" },\n-    { \"EV5\",\t\"ev5\" },\n-    { \"LCA45\",\t\"ev45\" },\n-    { \"EV45\",\t\"ev45\" },\n-    { \"LCA4\",\t\"ev4\" },\n-    { \"EV4\",\t\"ev4\" },\n-/*  { \"EV3\",\t\"ev3\" },  */\n-    { 0, 0 }\n+  static const struct cpu_types {\n+    long implver;\n+    long amask;\n+    const char *const cpu;\n+  } cpu_types[] = {\n+    { IMPLVER_EV7_FAMILY, AMASK_BWX|AMASK_MVI|AMASK_FIX|AMASK_CIX, \"ev67\" },\n+    { IMPLVER_EV6_FAMILY, AMASK_BWX|AMASK_MVI|AMASK_FIX|AMASK_CIX, \"ev67\" },\n+    { IMPLVER_EV6_FAMILY, AMASK_BWX|AMASK_MVI|AMASK_FIX, \"ev6\" },\n+    { IMPLVER_EV5_FAMILY, AMASK_BWX|AMASK_MVI, \"pca56\" },\n+    { IMPLVER_EV5_FAMILY, AMASK_BWX, \"ev56\" },\n+    { IMPLVER_EV5_FAMILY, 0, \"ev5\" },\n+    { IMPLVER_EV4_FAMILY, 0, \"ev4\" },\n+    { 0, 0, NULL }\n   };\n-\n+  long implver;\n+  long amask;\n+  const char *cpu;\n   int i;\n \n   if (argc < 1)\n@@ -75,24 +80,18 @@ host_detect_local_cpu (int argc, const char **argv)\n   if (strcmp (argv[0], \"cpu\") && strcmp (argv[0], \"tune\"))\n     return NULL;\n \n-  f = fopen (\"/proc/cpuinfo\", \"r\");\n-  if (f == NULL)\n-    return NULL;\n+  implver = __builtin_alpha_implver ();\n+  amask = __builtin_alpha_amask (~0L);\n+  cpu = NULL;\n \n-  while (fgets (buf, sizeof (buf), f) != NULL)\n-    if (strncmp (buf, \"cpu model\", sizeof (\"cpu model\") - 1) == 0)\n+  for (i = 0; cpu_types[i].cpu != NULL; i++)\n+    if (implver == cpu_types[i].implver\n+\t&& (~amask & cpu_types[i].amask) == cpu_types[i].amask)\n       {\n-        for (i = 0; cpu_names [i].name; i++)\n-          if (strstr (buf, cpu_names [i].name) != NULL)\n-\t    {\n-\t      cpu = cpu_names [i].cpu;\n-\t      break;\n-\t    }\n+\tcpu = cpu_types[i].cpu;\n \tbreak;\n       }\n \n-  fclose (f);\n-\n   if (cpu == NULL)\n     return NULL;\n "}, {"sha": "ee21f4b9c21a48a260a40ae9de38853ab1dc92cc", "filename": "gcc/config/alpha/osf5.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2da41f5cc7f6623ab3d65c1746c46cef8c55370/gcc%2Fconfig%2Falpha%2Fosf5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2da41f5cc7f6623ab3d65c1746c46cef8c55370/gcc%2Fconfig%2Falpha%2Fosf5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf5.h?ref=d2da41f5cc7f6623ab3d65c1746c46cef8c55370", "patch": "@@ -80,6 +80,22 @@ along with GCC; see the file COPYING3.  If not see\n #define CPP_SPEC \\\n \"%{pthread|threads:-D_REENTRANT} %{threads:-D_PTHREAD_USE_D4}\"\n \n+/* -mcpu=native handling only makes sense with compiler running on\n+   an Alpha chip.  */\n+#if defined(__alpha__) || defined(__alpha)\n+extern const char *host_detect_local_cpu (int argc, const char **argv);\n+# define EXTRA_SPEC_FUNCTIONS\t\t\t\t\t\t\\\n+  { \"local_cpu_detect\", host_detect_local_cpu },\n+\n+# define MCPU_MTUNE_NATIVE_SPECS\t\t\t\t\t\\\n+   \" %{mcpu=native:%<mcpu=native %:local_cpu_detect(cpu)}\"\t\t\\\n+   \" %{mtune=native:%<mtune=native %:local_cpu_detect(tune)}\"\n+#else\n+# define MCPU_MTUNE_NATIVE_SPECS \"\"\n+#endif\n+\n+#define DRIVER_SELF_SPECS MCPU_MTUNE_NATIVE_SPECS\n+\n /* Under DEC OSF/1 V4, -p and -pg require -lprof1, and -lprof1 requires \n    -lpdf.  */\n "}]}