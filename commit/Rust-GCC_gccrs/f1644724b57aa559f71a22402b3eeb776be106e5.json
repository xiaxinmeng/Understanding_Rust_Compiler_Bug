{"sha": "f1644724b57aa559f71a22402b3eeb776be106e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE2NDQ3MjRiNTdhYTU1OWY3MWEyMjQwMmIzZWViNzc2YmUxMDZlNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-10-05T01:24:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-10-05T01:24:38Z"}, "message": "PR c++/77852 - class deduction from list-init\n\n\t* pt.c (do_class_deduction): Handle list-initialization.\n\t(do_auto_deduction): Call it sooner.\n\t(build_deduction_guide): Use tsubst_arg_types.\n\t(rewrite_template_parm): Don't copy_type.\n\nFrom-SVN: r240765", "tree": {"sha": "52c454f1c5de6d7762449bf5b461ac803afb4a43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52c454f1c5de6d7762449bf5b461ac803afb4a43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1644724b57aa559f71a22402b3eeb776be106e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1644724b57aa559f71a22402b3eeb776be106e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1644724b57aa559f71a22402b3eeb776be106e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1644724b57aa559f71a22402b3eeb776be106e5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c84b79889a10503e5adf0e78d0509a88ca08868", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c84b79889a10503e5adf0e78d0509a88ca08868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c84b79889a10503e5adf0e78d0509a88ca08868"}], "stats": {"total": 75, "additions": 67, "deletions": 8}, "files": [{"sha": "1a16c6aaeb8c2d78bdb054ae1125aefe0e181c5e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1644724b57aa559f71a22402b3eeb776be106e5/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1644724b57aa559f71a22402b3eeb776be106e5/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f1644724b57aa559f71a22402b3eeb776be106e5", "patch": "@@ -1,3 +1,8 @@\n+2016-10-04  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-common.c (make_tree_vector_from_ctor): New.\n+\t* c-common.h: Declare it.\n+\n 2016-10-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-cppbuiltin.c (c_cpp_builtins): Don't define"}, {"sha": "2fce7933d5b2a70e7680e5a09fa1d63ee8283497", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1644724b57aa559f71a22402b3eeb776be106e5/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1644724b57aa559f71a22402b3eeb776be106e5/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=f1644724b57aa559f71a22402b3eeb776be106e5", "patch": "@@ -12612,6 +12612,18 @@ make_tree_vector_from_list (tree list)\n   return ret;\n }\n \n+/* Get a new tree vector of the values of a CONSTRUCTOR.  */\n+\n+vec<tree, va_gc> *\n+make_tree_vector_from_ctor (tree ctor)\n+{\n+  vec<tree,va_gc> *ret = make_tree_vector ();\n+  vec_safe_reserve (ret, CONSTRUCTOR_NELTS (ctor));\n+  for (unsigned i = 0; i < CONSTRUCTOR_NELTS (ctor); ++i)\n+    ret->quick_push (CONSTRUCTOR_ELT (ctor, i)->value);\n+  return ret;\n+}\n+\n /* Get a new tree vector which is a copy of an existing one.  */\n \n vec<tree, va_gc> *"}, {"sha": "28aebec6e2e2d43a3d5ef9e4dbd5abee8eaf0246", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1644724b57aa559f71a22402b3eeb776be106e5/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1644724b57aa559f71a22402b3eeb776be106e5/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=f1644724b57aa559f71a22402b3eeb776be106e5", "patch": "@@ -1111,6 +1111,7 @@ extern vec<tree, va_gc> *make_tree_vector (void);\n extern void release_tree_vector (vec<tree, va_gc> *);\n extern vec<tree, va_gc> *make_tree_vector_single (tree);\n extern vec<tree, va_gc> *make_tree_vector_from_list (tree);\n+extern vec<tree, va_gc> *make_tree_vector_from_ctor (tree);\n extern vec<tree, va_gc> *make_tree_vector_copy (const vec<tree, va_gc> *);\n \n /* Used for communication between c_common_type_for_mode and"}, {"sha": "acd1a78696c38963556eec39867aea09621f8331", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1644724b57aa559f71a22402b3eeb776be106e5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1644724b57aa559f71a22402b3eeb776be106e5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f1644724b57aa559f71a22402b3eeb776be106e5", "patch": "@@ -1,11 +1,15 @@\n-2016-09-30  Jason Merrill  <jason@redhat.com>\n+2016-10-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/77852\n+\t* pt.c (do_class_deduction): Handle list-initialization.\n+\t(do_auto_deduction): Call it sooner.\n+\t(build_deduction_guide): Use tsubst_arg_types.\n+\t(rewrite_template_parm): Don't copy_type.\n \n \tPR c++/77775\n \t* constexpr.c (cxx_eval_component_reference): Use name matching\n \tfor PMFs.\n \n-2016-10-04  Jason Merrill  <jason@redhat.com>\n-\n \tImplement P0091R2, Template argument deduction for class templates.\n \t* parser.c (cp_parser_simple_type_specifier): Parse class placeholder.\n \tUse the location of the beginning of the type-specifier."}, {"sha": "e6b1368daf75f47a85eb977597eae53bad8a2172", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1644724b57aa559f71a22402b3eeb776be106e5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1644724b57aa559f71a22402b3eeb776be106e5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f1644724b57aa559f71a22402b3eeb776be106e5", "patch": "@@ -24178,7 +24178,7 @@ rewrite_template_parm (tree olddecl, unsigned index, unsigned level,\n   if (TREE_CODE (olddecl) == TYPE_DECL\n       || TREE_CODE (olddecl) == TEMPLATE_DECL)\n     {\n-      newtype = copy_type (TREE_TYPE (olddecl));\n+      newtype = cxx_make_type (TREE_CODE (TREE_TYPE (olddecl)));\n       TYPE_MAIN_VARIANT (newtype) = newtype;\n     }\n   else\n@@ -24340,7 +24340,8 @@ build_deduction_guide (tree ctor, tree outer_args, tsubst_flags_t complain)\n       /* Now we have a final set of template parms to substitute into the\n \t function signature.  */\n       targs = template_parms_to_args (tparms);\n-      fparms = tsubst (fparms, tsubst_args, complain, ctor);\n+      fparms = tsubst_arg_types (fparms, tsubst_args, NULL_TREE,\n+\t\t\t\t complain, ctor);\n       fargs = tsubst (fargs, tsubst_args, complain, ctor);\n       if (ci)\n \tci = tsubst_constraint_info (ci, tsubst_args, complain, ctor);\n@@ -24376,6 +24377,8 @@ do_class_deduction (tree tmpl, tree init, tsubst_flags_t complain)\n   vec<tree,va_gc> *args;\n   if (TREE_CODE (init) == TREE_LIST)\n     args = make_tree_vector_from_list (init);\n+  else if (BRACE_ENCLOSED_INITIALIZER_P (init))\n+    args = make_tree_vector_from_ctor (init);\n   else\n     args = make_tree_vector_single (init);\n \n@@ -24465,6 +24468,10 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n        from ahead of time isn't worth the trouble.  */\n     return type;\n \n+  if (tree tmpl = CLASS_PLACEHOLDER_TEMPLATE (auto_node))\n+    /* C++17 class template argument deduction.  */\n+    return do_class_deduction (tmpl, init, complain);\n+\n   /* [dcl.spec.auto]: Obtain P from T by replacing the occurrences of auto\n      with either a new invented type template parameter U or, if the\n      initializer is a braced-init-list (8.5.4), with\n@@ -24510,9 +24517,6 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n \t  return error_mark_node;\n \t}\n     }\n-  else if (tree tmpl = CLASS_PLACEHOLDER_TEMPLATE (auto_node))\n-    /* C++17 class template argument deduction.  */\n-    return do_class_deduction (tmpl, init, complain);\n   else\n     {\n       tree parms = build_tree_list (NULL_TREE, type);"}, {"sha": "1c7e34e17c6cbe5316bb590ca2201959a08e6f37", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction14.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1644724b57aa559f71a22402b3eeb776be106e5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1644724b57aa559f71a22402b3eeb776be106e5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction14.C?ref=f1644724b57aa559f71a22402b3eeb776be106e5", "patch": "@@ -0,0 +1,15 @@\n+// { dg-options -std=c++1z }\n+\n+#include <vector>\n+\n+template<class T> struct container {\n+  container(T t) {}\n+  template<class Iter> container(Iter beg, Iter end);\n+};\n+template<class Iter>\n+container(Iter b, Iter e)\t// { dg-message \"iterator_traits.int\" }\n+  -> container<typename std::iterator_traits<Iter>::value_type>;\n+std::vector<double> v = { /* ... */ };\n+container c(7);\t\t  // OK, deduces int for T\n+auto d = container(v.begin(), v.end()); // OK, deduces double for T\n+container e{5, 6};\t\t// { dg-error \"\" } int is not an iterator"}, {"sha": "72ed478a1c221196e038df81bc99291fcf43d270", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction15.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1644724b57aa559f71a22402b3eeb776be106e5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1644724b57aa559f71a22402b3eeb776be106e5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction15.C?ref=f1644724b57aa559f71a22402b3eeb776be106e5", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options -std=c++1z }\n+\n+#include <utility>\n+\n+int main()\n+{\n+  std::pair x{42, 666};\n+}\n+"}, {"sha": "b32869f3fb644d2c522b147c9105316988c1271b", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction16.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1644724b57aa559f71a22402b3eeb776be106e5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1644724b57aa559f71a22402b3eeb776be106e5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction16.C?ref=f1644724b57aa559f71a22402b3eeb776be106e5", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options -std=c++1z }\n+\n+template <class... T>\n+struct A\n+{\n+  template <class...Us> A(Us&&...);\n+};\n+\n+A a(1,2);"}]}