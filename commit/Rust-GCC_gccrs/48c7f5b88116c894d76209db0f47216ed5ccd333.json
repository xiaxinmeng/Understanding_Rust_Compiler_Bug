{"sha": "48c7f5b88116c894d76209db0f47216ed5ccd333", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhjN2Y1Yjg4MTE2Yzg5NGQ3NjIwOWRiMGY0NzIxNmVkNWNjZDMzMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-11T18:03:21Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-11T18:03:21Z"}, "message": "aarch64: Add support for unpacked SVE mult, max and min\n\nThis patch makes the SVE_INT_BINARY_IMM patterns support\nunpacked arithmetic, covering MUL, SMAX, SMIN, UMAX and UMIN.\nFor min and max, the type suffix must be taken from the element\nsize rather than the container size.\n\nThe XFAILs are due to PR98602.\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (<SVE_INT_BINARY_IMM:optab><mode>3)\n\t(@aarch64_pred_<SVE_INT_BINARY_IMM:optab><mode>)\n\t(*post_ra_<SVE_INT_BINARY_IMM:optab><mode>3): Extend from SVE_FULL_I\n\tto SVE_I.\n\ngcc/testsuite/\n\tPR testsuite/98602\n\t* g++.target/aarch64/sve/max_1.C: New test.\n\t* g++.target/aarch64/sve/min_1.C: Likewise.\n\t* gcc.target/aarch64/sve/mul_2.c: Likewise.", "tree": {"sha": "6e48b19ef56b2d824a6d0dcf7f38fc9d74bbd247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e48b19ef56b2d824a6d0dcf7f38fc9d74bbd247"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48c7f5b88116c894d76209db0f47216ed5ccd333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c7f5b88116c894d76209db0f47216ed5ccd333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48c7f5b88116c894d76209db0f47216ed5ccd333", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c7f5b88116c894d76209db0f47216ed5ccd333/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b81fbfe1eb5759999c69349d6291d27444585fee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b81fbfe1eb5759999c69349d6291d27444585fee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b81fbfe1eb5759999c69349d6291d27444585fee"}], "stats": {"total": 228, "additions": 213, "deletions": 15}, "files": [{"sha": "697a55e1cad44764b670843c7467aacdff2bf633", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c7f5b88116c894d76209db0f47216ed5ccd333/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c7f5b88116c894d76209db0f47216ed5ccd333/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=48c7f5b88116c894d76209db0f47216ed5ccd333", "patch": "@@ -3628,12 +3628,12 @@\n \n ;; Unpredicated integer binary operations that have an immediate form.\n (define_expand \"<optab><mode>3\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(unspec:SVE_I\n \t  [(match_dup 3)\n-\t   (SVE_INT_BINARY_IMM:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 1 \"register_operand\")\n-\t     (match_operand:SVE_FULL_I 2 \"aarch64_sve_<sve_imm_con>_operand\"))]\n+\t   (SVE_INT_BINARY_IMM:SVE_I\n+\t     (match_operand:SVE_I 1 \"register_operand\")\n+\t     (match_operand:SVE_I 2 \"aarch64_sve_<sve_imm_con>_operand\"))]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   {\n@@ -3647,12 +3647,12 @@\n ;; and would make the instruction seem less uniform to the register\n ;; allocator.\n (define_insn_and_split \"@aarch64_pred_<optab><mode>\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, w, ?&w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, ?&w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n-\t   (SVE_INT_BINARY_IMM:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\" \"%0, 0, w, w\")\n-\t     (match_operand:SVE_FULL_I 3 \"aarch64_sve_<sve_imm_con>_operand\" \"<sve_imm_con>, w, <sve_imm_con>, w\"))]\n+\t   (SVE_INT_BINARY_IMM:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"%0, 0, w, w\")\n+\t     (match_operand:SVE_I 3 \"aarch64_sve_<sve_imm_con>_operand\" \"<sve_imm_con>, w, <sve_imm_con>, w\"))]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"@\n@@ -3665,7 +3665,7 @@\n   \"&& reload_completed\n    && !register_operand (operands[3], <MODE>mode)\"\n   [(set (match_dup 0)\n-\t(SVE_INT_BINARY_IMM:SVE_FULL_I (match_dup 2) (match_dup 3)))]\n+\t(SVE_INT_BINARY_IMM:SVE_I (match_dup 2) (match_dup 3)))]\n   \"\"\n   [(set_attr \"movprfx\" \"*,*,yes,yes\")]\n )\n@@ -3674,10 +3674,10 @@\n ;; These are generated by splitting a predicated instruction whose\n ;; predicate is unused.\n (define_insn \"*post_ra_<optab><mode>3\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(SVE_INT_BINARY_IMM:SVE_FULL_I\n-\t  (match_operand:SVE_FULL_I 1 \"register_operand\" \"0, w\")\n-\t  (match_operand:SVE_FULL_I 2 \"aarch64_sve_<sve_imm_con>_immediate\")))]\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(SVE_INT_BINARY_IMM:SVE_I\n+\t  (match_operand:SVE_I 1 \"register_operand\" \"0, w\")\n+\t  (match_operand:SVE_I 2 \"aarch64_sve_<sve_imm_con>_immediate\")))]\n   \"TARGET_SVE && reload_completed\"\n   \"@\n    <sve_int_op>\\t%0.<Vetype>, %0.<Vetype>, #%<sve_imm_prefix>2"}, {"sha": "caf9d7cd9bb40f4ad41f07d4e7b7647e8593de64", "filename": "gcc/testsuite/g++.target/aarch64/sve/max_1.C", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c7f5b88116c894d76209db0f47216ed5ccd333/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fmax_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c7f5b88116c894d76209db0f47216ed5ccd333/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fmax_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fmax_1.C?ref=48c7f5b88116c894d76209db0f47216ed5ccd333", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP_IMM(TYPE, OP, NAME, AMT) \\\n+  TYPE test##_##TYPE##_##NAME (TYPE a) { return a > AMT ? a : AMT; }\n+\n+#define TEST_OP(TYPE, MINV, MAXV) \\\n+  TYPE test##_##TYPE##_reg (TYPE a, TYPE b) { return a > b ? a : b; } \\\n+  TEST_OP_IMM (TYPE, OP, a, MINV) \\\n+  TEST_OP_IMM (TYPE, OP, b, 50) \\\n+  TEST_OP_IMM (TYPE, OP, c, MAXV)\n+\n+#define TEST_TYPE(TYPE, SIZE, MINV, MAXV) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE, MINV, MAXV)\n+\n+TEST_TYPE (int8_t, 32, -100, 100)\n+TEST_TYPE (uint8_t, 32, 2, 250)\n+\n+TEST_TYPE (int8_t, 64, -110, 110)\n+TEST_TYPE (uint8_t, 64, 3, 253)\n+TEST_TYPE (int16_t, 64, -128, 127)\n+TEST_TYPE (uint16_t, 64, 4, 255)\n+\n+TEST_TYPE (int8_t, 128, -120, 120)\n+TEST_TYPE (uint8_t, 128, 5, 251)\n+TEST_TYPE (int16_t, 128, -128, 127)\n+TEST_TYPE (uint16_t, 128, 6, 255)\n+TEST_TYPE (int32_t, 128, -128, 127)\n+TEST_TYPE (uint32_t, 128, 7, 255)\n+\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, z[0-9]+\\.b, #-100\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, z[0-9]+\\.b, #-110\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, z[0-9]+\\.b, #-120\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, z[0-9]+\\.h, #-128\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, z[0-9]+\\.s, #-128\\n} 1 { xfail *-*-* } } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, z[0-9]+\\.b, #50\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, z[0-9]+\\.h, #50\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, z[0-9]+\\.s, #50\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, z[0-9]+\\.b, #100\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, z[0-9]+\\.b, #110\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, z[0-9]+\\.b, #120\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, z[0-9]+\\.h, #127\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, z[0-9]+\\.s, #127\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, z[0-9]+\\.b, #2\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, z[0-9]+\\.b, #3\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, z[0-9]+\\.h, #4\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, z[0-9]+\\.b, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, z[0-9]+\\.h, #6\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.s, z[0-9]+\\.s, #7\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, z[0-9]+\\.b, #50\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, z[0-9]+\\.h, #50\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.s, z[0-9]+\\.s, #50\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, z[0-9]+\\.b, #250\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, z[0-9]+\\.b, #251\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, z[0-9]+\\.b, #253\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, z[0-9]+\\.h, #255\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.s, z[0-9]+\\.s, #255\\n} 1 } } */"}, {"sha": "9c84690cd1b5dc4f966f81c6f02fb618c3d69d55", "filename": "gcc/testsuite/g++.target/aarch64/sve/min_1.C", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c7f5b88116c894d76209db0f47216ed5ccd333/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fmin_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c7f5b88116c894d76209db0f47216ed5ccd333/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fmin_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fmin_1.C?ref=48c7f5b88116c894d76209db0f47216ed5ccd333", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP_IMM(TYPE, OP, NAME, AMT) \\\n+  TYPE test##_##TYPE##_##NAME (TYPE a) { return a < AMT ? a : AMT; }\n+\n+#define TEST_OP(TYPE, MINV, MAXV) \\\n+  TYPE test##_##TYPE##_reg (TYPE a, TYPE b) { return a < b ? a : b; } \\\n+  TEST_OP_IMM (TYPE, OP, a, MINV) \\\n+  TEST_OP_IMM (TYPE, OP, b, 50) \\\n+  TEST_OP_IMM (TYPE, OP, c, MAXV)\n+\n+#define TEST_TYPE(TYPE, SIZE, MINV, MAXV) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE, MINV, MAXV)\n+\n+TEST_TYPE (int8_t, 32, -100, 100)\n+TEST_TYPE (uint8_t, 32, 2, 250)\n+\n+TEST_TYPE (int8_t, 64, -110, 110)\n+TEST_TYPE (uint8_t, 64, 3, 253)\n+TEST_TYPE (int16_t, 64, -128, 127)\n+TEST_TYPE (uint16_t, 64, 4, 255)\n+\n+TEST_TYPE (int8_t, 128, -120, 120)\n+TEST_TYPE (uint8_t, 128, 5, 251)\n+TEST_TYPE (int16_t, 128, -128, 127)\n+TEST_TYPE (uint16_t, 128, 6, 255)\n+TEST_TYPE (int32_t, 128, -128, 127)\n+TEST_TYPE (uint32_t, 128, 7, 255)\n+\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, z[0-9]+\\.b, #-100\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, z[0-9]+\\.b, #-110\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, z[0-9]+\\.b, #-120\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.h, z[0-9]+\\.h, #-128\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.s, z[0-9]+\\.s, #-128\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, z[0-9]+\\.b, #50\\n} 3 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.h, z[0-9]+\\.h, #50\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.s, z[0-9]+\\.s, #50\\n} 1 { xfail *-*-* } } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, z[0-9]+\\.b, #100\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, z[0-9]+\\.b, #110\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, z[0-9]+\\.b, #120\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.h, z[0-9]+\\.h, #127\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.s, z[0-9]+\\.s, #127\\n} 1 { xfail *-*-* } } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, z[0-9]+\\.b, #2\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, z[0-9]+\\.b, #3\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, z[0-9]+\\.h, #4\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, z[0-9]+\\.b, #5\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, z[0-9]+\\.h, #6\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.s, z[0-9]+\\.s, #7\\n} 1 { xfail *-*-* } } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, z[0-9]+\\.b, #50\\n} 3 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, z[0-9]+\\.h, #50\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.s, z[0-9]+\\.s, #50\\n} 1 { xfail *-*-* } } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, z[0-9]+\\.b, #250\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, z[0-9]+\\.b, #251\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, z[0-9]+\\.b, #253\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, z[0-9]+\\.h, #255\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.s, z[0-9]+\\.s, #255\\n} 1 { xfail *-*-* } } } */"}, {"sha": "ff049f5bec0190327034e95928c8270ba5acda14", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mul_2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c7f5b88116c894d76209db0f47216ed5ccd333/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c7f5b88116c894d76209db0f47216ed5ccd333/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_2.c?ref=48c7f5b88116c894d76209db0f47216ed5ccd333", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP_IMM(TYPE, OP, NAME, AMT) \\\n+  TYPE test##_##TYPE##_##NAME (TYPE a) { return a * AMT; }\n+\n+#define TEST_OP(TYPE, MINV, MAXV) \\\n+  TYPE test##_##TYPE##_reg (TYPE a, TYPE b) { return a * b; } \\\n+  TEST_OP_IMM (TYPE, OP, a, MINV) \\\n+  TEST_OP_IMM (TYPE, OP, b, 50) \\\n+  TEST_OP_IMM (TYPE, OP, c, MAXV)\n+\n+#define TEST_TYPE(TYPE, SIZE, MINV, MAXV) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE, MINV, MAXV)\n+\n+TEST_TYPE (int8_t, 32, -100, 100)\n+TEST_TYPE (uint8_t, 32, 2, 250)\n+\n+TEST_TYPE (int8_t, 64, -110, 110)\n+TEST_TYPE (uint8_t, 64, 3, 253)\n+TEST_TYPE (int16_t, 64, -128, 123)\n+TEST_TYPE (uint16_t, 64, 3, 255)\n+\n+TEST_TYPE (int8_t, 128, -120, 120)\n+TEST_TYPE (uint8_t, 128, 4, 251)\n+TEST_TYPE (int16_t, 128, -128, 123)\n+TEST_TYPE (uint16_t, 128, 2, 255)\n+TEST_TYPE (int32_t, 128, -128, 123)\n+TEST_TYPE (uint32_t, 128, 4, 255)\n+\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, z[0-9]+\\.b, #-100\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, z[0-9]+\\.b, #-110\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, z[0-9]+\\.b, #-120\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.h, z[0-9]+\\.h, #-128\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.s, z[0-9]+\\.s, #-128\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, z[0-9]+\\.b, #50\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.h, z[0-9]+\\.h, #50\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.s, z[0-9]+\\.s, #50\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, z[0-9]+\\.b, #100\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, z[0-9]+\\.b, #110\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, z[0-9]+\\.b, #120\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.h, z[0-9]+\\.h, #123\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.s, z[0-9]+\\.s, #123\\n} 1 } } */"}]}