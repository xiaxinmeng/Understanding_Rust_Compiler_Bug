{"sha": "a8685e159ea52ae6507622f2a81e73f00ace490f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg2ODVlMTU5ZWE1MmFlNjUwNzYyMmYyYTgxZTczZjAwYWNlNDkwZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-01-03T12:06:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-01-03T12:06:59Z"}, "message": "stl_pair.h (pair<>::pair(_U1&&, const _T2&), [...]): Use std::is_constructible instead of std::is_convertible.\n\n2010-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_pair.h (pair<>::pair(_U1&&, const _T2&),\n\tpair<>::pair(const _T1&, _U2&&), pair<>::pair(_U1&&, _U2&&)):\n\tUse std::is_constructible instead of std::is_convertible.\n\nFrom-SVN: r155585", "tree": {"sha": "076957c571406e1b42591beedc9be2e26a29927e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/076957c571406e1b42591beedc9be2e26a29927e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8685e159ea52ae6507622f2a81e73f00ace490f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8685e159ea52ae6507622f2a81e73f00ace490f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8685e159ea52ae6507622f2a81e73f00ace490f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8685e159ea52ae6507622f2a81e73f00ace490f/comments", "author": null, "committer": null, "parents": [{"sha": "a19eb9d236caf919b2a41445a72c30cffe12a432", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a19eb9d236caf919b2a41445a72c30cffe12a432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a19eb9d236caf919b2a41445a72c30cffe12a432"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "a4c525ccf3c71c704b5c2dcb1bf430610a5643fc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8685e159ea52ae6507622f2a81e73f00ace490f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8685e159ea52ae6507622f2a81e73f00ace490f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a8685e159ea52ae6507622f2a81e73f00ace490f", "patch": "@@ -1,3 +1,9 @@\n+2010-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_pair.h (pair<>::pair(_U1&&, const _T2&),\n+\tpair<>::pair(const _T1&, _U2&&), pair<>::pair(_U1&&, _U2&&)):\n+\tUse std::is_constructible instead of std::is_convertible.\n+\n 2010-01-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tRevert last change, reinstantiate basic_string and vstring tests."}, {"sha": "9d7338bc55bfb1cedd7acc785d2d5ed5440ae9a4", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8685e159ea52ae6507622f2a81e73f00ace490f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8685e159ea52ae6507622f2a81e73f00ace490f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=a8685e159ea52ae6507622f2a81e73f00ace490f", "patch": "@@ -90,20 +90,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       // DR 811.\n       template<class _U1, class = typename\n-\t       std::enable_if<std::is_convertible<_U1, _T1>::value>::type>\n+\t       std::enable_if<std::is_constructible<_T1, _U1&&>::value>::type>\n         pair(_U1&& __x, const _T2& __y)\n \t: first(std::forward<_U1>(__x)),\n \t  second(__y) { }\n \n       template<class _U2, class = typename\n-\t       std::enable_if<std::is_convertible<_U2, _T2>::value>::type>\n+\t       std::enable_if<std::is_constructible<_T2, _U2&&>::value>::type>\n         pair(const _T1& __x, _U2&& __y)\n \t: first(__x),\n \t  second(std::forward<_U2>(__y)) { }\n \n       template<class _U1, class _U2, class = typename\n-\t       std::enable_if<std::is_convertible<_U1, _T1>::value\n-\t\t\t      && std::is_convertible<_U2, _T2>::value>::type>\n+\t       std::enable_if<std::is_constructible<_T1, _U1&&>::value\n+\t\t\t    && std::is_constructible<_T2, _U2&&>::value>::type>\n         pair(_U1&& __x, _U2&& __y)\n \t: first(std::forward<_U1>(__x)),\n \t  second(std::forward<_U2>(__y)) { }"}]}