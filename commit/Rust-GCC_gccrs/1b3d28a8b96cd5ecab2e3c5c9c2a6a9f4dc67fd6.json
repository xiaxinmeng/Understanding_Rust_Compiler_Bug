{"sha": "1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIzZDI4YThiOTZjZDVlY2FiMmUzYzVjOWMyYTZhOWY0ZGM2N2ZkNg==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2006-01-24T11:55:58Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2006-01-24T11:55:58Z"}, "message": "re PR c++/25552 (Invalid destructor name accepted in friend declaration)\n\n\tPR c++/25552\n\t* parser.c (cp_parser_unqualified_id): Check that destructor name\n\tand scope match.\n\t* call.c (check_dtor_name): Do not expect a BIT_NOT_EXPR.\n\tAdjust comment.  Return early if possible.\n\tUse same_type_p to compare types.\n\t* typeck.c (lookup_destructor): Adjust call to check_dtor_name.\n\n\t* g++.dg/parse/dtor8.C: New test.\n\nFrom-SVN: r110168", "tree": {"sha": "adceb6c58da099960f7ae0c1c45bb7f25c9ea8b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adceb6c58da099960f7ae0c1c45bb7f25c9ea8b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6/comments", "author": null, "committer": null, "parents": [{"sha": "c05849f4978e1b70d9b5ce97a8843321b8dc0c7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05849f4978e1b70d9b5ce97a8843321b8dc0c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c05849f4978e1b70d9b5ce97a8843321b8dc0c7e"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "3ff6c91434c1b0174415071db9c637af3c2df25f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6", "patch": "@@ -1,3 +1,13 @@\n+2006-01-24  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/25552\n+\t* parser.c (cp_parser_unqualified_id): Check that destructor name\n+\tand scope match.\n+\t* call.c (check_dtor_name): Do not expect a BIT_NOT_EXPR.\n+\tAdjust comment.  Return early if possible.\n+\tUse same_type_p to compare types.\n+\t* typeck.c (lookup_destructor): Adjust call to check_dtor_name.\n+\n 2006-01-24  Mark Mitchell  <mark@codesourcery.com>\n \n \t* semantics.c: Remove outdated comment."}, {"sha": "79001763016f6a8f65c9602364bb177a04f4e7a5", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6", "patch": "@@ -198,15 +198,12 @@ typedef void (*diagnostic_fn_t) (const char *, ...) ATTRIBUTE_GCC_CXXDIAG(1,2);\n static tree build_temp (tree, tree, int, diagnostic_fn_t *);\n static void check_constructor_callable (tree, tree);\n \n-/* Returns nonzero iff the destructor name specified in NAME\n-   (a BIT_NOT_EXPR) matches BASETYPE.  The operand of NAME can take many\n-   forms...  */\n+/* Returns nonzero iff the destructor name specified in NAME matches BASETYPE.\n+   NAME can take many forms...  */\n \n bool\n check_dtor_name (tree basetype, tree name)\n {\n-  name = TREE_OPERAND (name, 0);\n-\n   /* Just accept something we've already complained about.  */\n   if (name == error_mark_node)\n     return true;\n@@ -220,7 +217,7 @@ check_dtor_name (tree basetype, tree name)\n       if ((IS_AGGR_TYPE (basetype) && name == constructor_name (basetype))\n \t  || (TREE_CODE (basetype) == ENUMERAL_TYPE\n \t      && name == TYPE_IDENTIFIER (basetype)))\n-\tname = basetype;\n+\treturn true;\n       else\n \tname = get_type_value (name);\n     }\n@@ -237,9 +234,9 @@ check_dtor_name (tree basetype, tree name)\n       return false;\n     }\n \n-  if (name && TYPE_MAIN_VARIANT (basetype) == TYPE_MAIN_VARIANT (name))\n-    return true;\n-  return false;\n+  if (!name)\n+    return false;\n+  return same_type_p (TYPE_MAIN_VARIANT (basetype), TYPE_MAIN_VARIANT (name));\n }\n \n /* We want the address of a function or method.  We avoid creating a"}, {"sha": "3ba92852a77ba24233f01ee7b5a16ba87292eca0", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6", "patch": "@@ -3434,6 +3434,15 @@ cp_parser_unqualified_id (cp_parser* parser,\n \telse if (type_decl == error_mark_node)\n \t  return error_mark_node;\n \n+\t/* Check that destructor name and scope match.  */\n+\tif (declarator_p && scope && !check_dtor_name (scope, type_decl))\n+\t  {\n+\t    if (!cp_parser_uncommitted_to_tentative_parse_p (parser))\n+\t      error (\"declaration of %<~%T%> as member of %qT\",\n+\t\t     type_decl, scope);\n+\t    return error_mark_node;\n+\t  }\n+\n \t/* [class.dtor]\n \n \t   A typedef-name that names a class shall not be used as the"}, {"sha": "5eb4b644426e96baa1b54c30377a025c5bdf7adf", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6", "patch": "@@ -1828,7 +1828,7 @@ lookup_destructor (tree object, tree scope, tree dtor_name)\n   tree dtor_type = TREE_OPERAND (dtor_name, 0);\n   tree expr;\n \n-  if (scope && !check_dtor_name (scope, dtor_name))\n+  if (scope && !check_dtor_name (scope, dtor_type))\n     {\n       error (\"qualified type %qT does not match destructor name ~%qT\",\n \t     scope, dtor_type);"}, {"sha": "3434543725a4c42adedf2da17393ff44f90da84f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6", "patch": "@@ -1,3 +1,8 @@\n+2006-01-24  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/25552\n+\t* g++.dg/parse/dtor8.C: New test.\n+\n 2006-01-24  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR testsuite/25891"}, {"sha": "2fe0a974bb97e3d48c8b3f7a159cc5b633704013", "filename": "gcc/testsuite/g++.dg/parse/dtor8.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor8.C?ref=1b3d28a8b96cd5ecab2e3c5c9c2a6a9f4dc67fd6", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+\n+struct A {};\n+\n+struct B\n+{\n+  friend A::~B();  // { dg-error \"as member of\" }\n+};"}]}