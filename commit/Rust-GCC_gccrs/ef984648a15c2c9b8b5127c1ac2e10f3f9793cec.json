{"sha": "ef984648a15c2c9b8b5127c1ac2e10f3f9793cec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY5ODQ2NDhhMTVjMmM5YjhiNTEyN2MxYWMyZTEwZjNmOTc5M2NlYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2006-10-25T10:14:41Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-10-25T10:14:41Z"}, "message": "re PR target/28909 (Missed optimization with x86 sync builtins)\n\n        PR target/28909\n        * config/i386/sync.md (\"sync_add<mode>\", \"sync_sub<mode>\"):\n        Use inc and dec instructions for TARGET_USE_INCDEC.\n        (\"*sync_compare_and_swap<mode>\"): Fix -masm=intel template.\n        (\"sync_double_compare_and_swap<mode>\"): Likewise.\n        (\"*sync_double_compare_and_swapdi_pic\"): Likewise.\n        (\"*sync_compare_and_swap_cc<mode>\"): Likewise.\n        (\"sync_double_compare_and_swap_cc<mode>\"): Likewise.\n        (\"*sync_double_compare_and_swap_ccdi_pic\"): Likewise.\n        (\"sync_old_add<mode>\"): Likewise.\n        (\"sync_lock_test_and_set<mode>\"): Likewise.\n        (\"sync_lock_test_and_set<mode>\"): Likewise.\n        (\"sync_add<mode>\"): Likewise.\n        (\"sync_sub<mode>\"): Likewise.\n        (\"sync_ior<mode>\"): Likewise.\n        (\"sync_and<mode>\"): Likewise.\n        (\"sync_xor<mode>\"): Likewise.\n\nFrom-SVN: r118028", "tree": {"sha": "a9f51ce886cef0d7f8ec9ca1a590791b61c1d7b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9f51ce886cef0d7f8ec9ca1a590791b61c1d7b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef984648a15c2c9b8b5127c1ac2e10f3f9793cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef984648a15c2c9b8b5127c1ac2e10f3f9793cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef984648a15c2c9b8b5127c1ac2e10f3f9793cec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef984648a15c2c9b8b5127c1ac2e10f3f9793cec/comments", "author": null, "committer": null, "parents": [{"sha": "b4364fa2a82252d9ab62a5606357e52f3fe0aad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4364fa2a82252d9ab62a5606357e52f3fe0aad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4364fa2a82252d9ab62a5606357e52f3fe0aad4"}], "stats": {"total": 64, "additions": 52, "deletions": 12}, "files": [{"sha": "a4ffc2d9eb336a0556508beff6d2d80f6036722c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef984648a15c2c9b8b5127c1ac2e10f3f9793cec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef984648a15c2c9b8b5127c1ac2e10f3f9793cec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef984648a15c2c9b8b5127c1ac2e10f3f9793cec", "patch": "@@ -1,3 +1,23 @@\n+2006-10-25  Uros Bizjak  <uros@kss-loka.si>\n+\n+\tPR target/28909\n+\t* config/i386/sync.md (\"sync_add<mode>\", \"sync_sub<mode>\"):\n+\tUse inc and dec instructions for TARGET_USE_INCDEC.\n+\t(\"*sync_compare_and_swap<mode>\"): Fix -masm=intel template.\n+\t(\"sync_double_compare_and_swap<mode>\"): Likewise.\n+\t(\"*sync_double_compare_and_swapdi_pic\"): Likewise.\n+\t(\"*sync_compare_and_swap_cc<mode>\"): Likewise.\n+\t(\"sync_double_compare_and_swap_cc<mode>\"): Likewise.\n+\t(\"*sync_double_compare_and_swap_ccdi_pic\"): Likewise.\n+\t(\"sync_old_add<mode>\"): Likewise.\n+\t(\"sync_lock_test_and_set<mode>\"): Likewise.\n+\t(\"sync_lock_test_and_set<mode>\"): Likewise.\n+\t(\"sync_add<mode>\"): Likewise.\n+\t(\"sync_sub<mode>\"): Likewise.\n+\t(\"sync_ior<mode>\"): Likewise.\n+\t(\"sync_and<mode>\"): Likewise.\n+\t(\"sync_xor<mode>\"): Likewise.\n+\n 2006-10-25  Uros Bizjak  <uros@kss-loka.si>\n \n \t* optabs.h (enum optab_index): Rename OTI_drem to OTI_remainder."}, {"sha": "58e047bc23484206720de512c252c84410053ad4", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef984648a15c2c9b8b5127c1ac2e10f3f9793cec/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef984648a15c2c9b8b5127c1ac2e10f3f9793cec/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=ef984648a15c2c9b8b5127c1ac2e10f3f9793cec", "patch": "@@ -82,7 +82,7 @@\n \t  UNSPECV_CMPXCHG_1))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_CMPXCHG\"\n-  \"lock\\;cmpxchg{<modesuffix>}\\t{%3, %1|%1, %3}\")\n+  \"lock{\\;| }cmpxchg{<modesuffix>\\t%3, %1| %1, %3}\")\n \n (define_insn \"sync_double_compare_and_swap<mode>\"\n   [(set (match_operand:DCASMODE 0 \"register_operand\" \"=A\")\n@@ -96,7 +96,7 @@\n \t  UNSPECV_CMPXCHG_1))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock\\;cmpxchg<doublemodesuffix>b\\t%1\")\n+  \"lock{\\;| }cmpxchg<doublemodesuffix>b{\\t| }%1\")\n \n (define_insn \"*sync_double_compare_and_swapdi_pic\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n@@ -110,7 +110,7 @@\n \t  UNSPECV_CMPXCHG_1))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && TARGET_CMPXCHG8B && flag_pic\"\n-  \"xchg{l}\\t%%ebx, %3\\;lock\\;cmpxchg8b\\t%1\\;xchg{l}\\t%%ebx, %3\")\n+  \"xchg{l}\\t%%ebx, %3\\;lock{\\;| }cmpxchg8b{\\t| }%1\\;xchg{l}\\t%%ebx, %3\")\n \n (define_expand \"sync_compare_and_swap_cc<mode>\"\n   [(parallel\n@@ -168,7 +168,7 @@\n \t    [(match_dup 1) (match_dup 2) (match_dup 3)] UNSPECV_CMPXCHG_2)\n \t  (match_dup 2)))]\n   \"TARGET_CMPXCHG\"\n-  \"lock\\;cmpxchg{<modesuffix>}\\t{%3, %1|%1, %3}\")\n+  \"lock{\\;| }cmpxchg{<modesuffix>\\t%3, %1| %1, %3}\")\n \n (define_insn \"sync_double_compare_and_swap_cc<mode>\"\n   [(set (match_operand:DCASMODE 0 \"register_operand\" \"=A\")\n@@ -187,7 +187,7 @@\n \t    UNSPECV_CMPXCHG_2)\n \t  (match_dup 2)))]\n   \"\"\n-  \"lock\\;cmpxchg<doublemodesuffix>b\\t%1\")\n+  \"lock{\\;| }cmpxchg<doublemodesuffix>b{\\t| }%1\")\n \n (define_insn \"*sync_double_compare_and_swap_ccdi_pic\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n@@ -206,7 +206,7 @@\n \t    UNSPECV_CMPXCHG_2)\n \t  (match_dup 2)))]\n   \"!TARGET_64BIT && TARGET_CMPXCHG8B && flag_pic\"\n-  \"xchg{l}\\t%%ebx, %3\\;lock\\;cmpxchg8b\\t%1\\;xchg{l}\\t%%ebx, %3\")\n+  \"xchg{l}\\t%%ebx, %3\\;lock{\\;| }cmpxchg8b{\\t| }%1\\;xchg{l}\\t%%ebx, %3\")\n \n (define_insn \"sync_old_add<mode>\"\n   [(set (match_operand:IMODE 0 \"register_operand\" \"=<modeconstraint>\")\n@@ -217,7 +217,7 @@\n \t\t    (match_operand:IMODE 2 \"register_operand\" \"0\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_XADD\"\n-  \"lock\\;xadd{<modesuffix>}\\t{%0, %1|%1, %0}\")\n+  \"lock{\\;| }xadd{<modesuffix>\\t%0, %1| %1, %0}\")\n \n ;; Recall that xchg implicitly sets LOCK#, so adding it again wastes space.\n (define_insn \"sync_lock_test_and_set<mode>\"\n@@ -237,7 +237,17 @@\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock\\;add{<modesuffix>}\\t{%1, %0|%0, %1}\")\n+{\n+  if (TARGET_USE_INCDEC)\n+    {\n+      if (operands[1] == const1_rtx)\n+\treturn \"lock{\\;| }inc{<modesuffix>\\t| }%0\";\n+      if (operands[1] == constm1_rtx)\n+\treturn \"lock{\\;| }dec{<modesuffix>\\t| }%0\";\n+    }\n+\n+  return \"lock{\\;| }add{<modesuffix>\\t%1, %0| %0, %1}\";\n+})\n \n (define_insn \"sync_sub<mode>\"\n   [(set (match_operand:IMODE 0 \"memory_operand\" \"+m\")\n@@ -247,7 +257,17 @@\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock\\;sub{<modesuffix>}\\t{%1, %0|%0, %1}\")\n+{\n+  if (TARGET_USE_INCDEC)\n+    {\n+      if (operands[1] == const1_rtx)\n+\treturn \"lock{\\;| }dec{<modesuffix>\\t| }%0\";\n+      if (operands[1] == constm1_rtx)\n+\treturn \"lock{\\;| }inc{<modesuffix>\\t| }%0\";\n+    }\n+\n+  return \"lock{\\;| }sub{<modesuffix>\\t%1, %0| %0, %1}\";\n+})\n \n (define_insn \"sync_ior<mode>\"\n   [(set (match_operand:IMODE 0 \"memory_operand\" \"+m\")\n@@ -257,7 +277,7 @@\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock\\;or{<modesuffix>}\\t{%1, %0|%0, %1}\")\n+  \"lock{\\;| }or{<modesuffix>\\t%1, %0| %0, %1}\")\n \n (define_insn \"sync_and<mode>\"\n   [(set (match_operand:IMODE 0 \"memory_operand\" \"+m\")\n@@ -267,7 +287,7 @@\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock\\;and{<modesuffix>}\\t{%1, %0|%0, %1}\")\n+  \"lock{\\;| }and{<modesuffix>\\t%1, %0| %0, %1}\")\n \n (define_insn \"sync_xor<mode>\"\n   [(set (match_operand:IMODE 0 \"memory_operand\" \"+m\")\n@@ -277,4 +297,4 @@\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock\\;xor{<modesuffix>}\\t{%1, %0|%0, %1}\")\n+  \"lock{\\;| }xor{<modesuffix>\\t%1, %0| %0, %1}\")"}]}