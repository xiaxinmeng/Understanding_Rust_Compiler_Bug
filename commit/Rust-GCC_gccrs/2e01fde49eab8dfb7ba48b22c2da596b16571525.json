{"sha": "2e01fde49eab8dfb7ba48b22c2da596b16571525", "node_id": "C_kwDOANBUbNoAKDJlMDFmZGU0OWVhYjhkZmI3YmE0OGIyMmMyZGE1OTZiMTY1NzE1MjU", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-21T16:03:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-21T19:41:00Z"}, "message": "c++: explain failing static_assert\n\nWhile looking at another bug I wanted the compiler to tell me what the two\nunequal values were.\n\ngcc/cp/ChangeLog:\n\n\t* semantics.cc (find_failing_clause): Return expr if not\n\tdecomposable.\n\t(finish_static_assert): Show constant values in failing\n\tcomparison.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/explicit-args6.C: Add expected message.", "tree": {"sha": "f84355c2ba7ca6da9fdc1da1456ad9de358fbaa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f84355c2ba7ca6da9fdc1da1456ad9de358fbaa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e01fde49eab8dfb7ba48b22c2da596b16571525", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e01fde49eab8dfb7ba48b22c2da596b16571525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e01fde49eab8dfb7ba48b22c2da596b16571525", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e01fde49eab8dfb7ba48b22c2da596b16571525/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "847a8301add0a316767878342c1367948835c181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847a8301add0a316767878342c1367948835c181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847a8301add0a316767878342c1367948835c181"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "640b2d754712a4f781df44045163b14b1cb07c3a", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01fde49eab8dfb7ba48b22c2da596b16571525/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01fde49eab8dfb7ba48b22c2da596b16571525/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=2e01fde49eab8dfb7ba48b22c2da596b16571525", "patch": "@@ -11062,9 +11062,10 @@ find_failing_clause_r (tree expr)\n static tree\n find_failing_clause (tree expr)\n {\n-  if (TREE_CODE (expr) != TRUTH_ANDIF_EXPR)\n-    return NULL_TREE;\n-  return find_failing_clause_r (expr);\n+  if (TREE_CODE (expr) == TRUTH_ANDIF_EXPR)\n+    if (tree e = find_failing_clause_r (expr))\n+      expr = e;\n+  return expr;\n }\n \n /* Build a STATIC_ASSERT for a static assertion with the condition\n@@ -11134,26 +11135,32 @@ finish_static_assert (tree condition, tree message, location_t location,\n \t  tree bad = find_failing_clause (orig_condition);\n \t  /* If not, or its location is unusable, fall back to the previous\n \t     location.  */\n-\t  location_t cloc = location;\n-\t  if (cp_expr_location (bad) != UNKNOWN_LOCATION)\n-\t    cloc = cp_expr_location (bad);\n+\t  location_t cloc = cp_expr_loc_or_loc (bad, location);\n+\t  /* Nobody wants to see the artificial (bool) cast.  */\n+\t  bad = tree_strip_nop_conversions (bad);\n \n           /* Report the error. */\n \t  if (len == 0)\n \t    error_at (cloc, \"static assertion failed\");\n \t  else\n \t    error_at (cloc, \"static assertion failed: %s\",\n \t\t      TREE_STRING_POINTER (message));\n-\t  if (show_expr_p)\n-\t    inform (cloc, \"%qE evaluates to false\",\n-\t\t    /* Nobody wants to see the artificial (bool) cast.  */\n-\t\t    (bad ? tree_strip_nop_conversions (bad) : orig_condition));\n \n \t  /* Actually explain the failure if this is a concept check or a\n \t     requires-expression.  */\n-\t  if (concept_check_p (orig_condition)\n-\t      || TREE_CODE (orig_condition) == REQUIRES_EXPR)\n-\t    diagnose_constraints (location, orig_condition, NULL_TREE);\n+\t  if (concept_check_p (bad)\n+\t      || TREE_CODE (bad) == REQUIRES_EXPR)\n+\t    diagnose_constraints (location, bad, NULL_TREE);\n+\t  else if (COMPARISON_CLASS_P (bad)\n+\t\t   && ARITHMETIC_TYPE_P (TREE_TYPE (TREE_OPERAND (bad, 0))))\n+\t    {\n+\t      tree op0 = fold_non_dependent_expr (TREE_OPERAND (bad, 0));\n+\t      tree op1 = fold_non_dependent_expr (TREE_OPERAND (bad, 1));\n+\t      tree cond = build2 (TREE_CODE (bad), boolean_type_node, op0, op1);\n+\t      inform (cloc, \"the comparison reduces to %qE\", cond);\n+\t    }\n+\t  else if (show_expr_p)\n+\t    inform (cloc, \"%qE evaluates to false\", bad);\n \t}\n       else if (condition && condition != error_mark_node)\n \t{"}, {"sha": "311a7678923611f1e00f6168aa1ad7360d7ba1dd", "filename": "gcc/testsuite/g++.dg/template/explicit-args6.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01fde49eab8dfb7ba48b22c2da596b16571525/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit-args6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01fde49eab8dfb7ba48b22c2da596b16571525/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit-args6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit-args6.C?ref=2e01fde49eab8dfb7ba48b22c2da596b16571525", "patch": "@@ -20,6 +20,8 @@ constexpr unsigned\n frob()\n {\n   static_assert(N == 1, \"user-friendly diagnostic\"); // { dg-error \"user-friendly\" }\n+  // dg-message { \"-1 == 1\" \"\" { target *-*-* } .-1 }\n+\n   // narrowing check, reject negative values\n   return unsigned{N};\t\t// { dg-prune-output \"narrowing\" }\n } // { dg-prune-output \"flows off the end\" }"}]}