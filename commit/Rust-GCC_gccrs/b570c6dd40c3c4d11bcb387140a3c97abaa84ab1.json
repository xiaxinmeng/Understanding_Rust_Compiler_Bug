{"sha": "b570c6dd40c3c4d11bcb387140a3c97abaa84ab1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU3MGM2ZGQ0MGMzYzRkMTFiY2IzODcxNDBhM2M5N2FiYWE4NGFiMQ==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-09-15T11:36:54Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-09-15T11:36:54Z"}, "message": "AVX-512. Extend vcvtps2ph insn patterns.\n\ngcc/\n\t* config/i386/sse.md\n\t(define_insn \"vcvtph2ps<mask_name>\"): Add masking.\n\t(define_insn \"*vcvtph2ps_load<mask_name>\"): Ditto.\n\t(define_insn \"vcvtph2ps256<mask_name>\"): Ditto.\n\t(define_expand \"vcvtps2ph_mask\"): New.\n\t(define_insn \"*vcvtps2ph<mask_name>\"): Add masking.\n\t(define_insn \"*vcvtps2ph_store<mask_name>\"): Ditto.\n\t(define_insn \"vcvtps2ph256<mask_name>\"): Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r215263", "tree": {"sha": "b14ecd2a1a1762f099a247dc916ab0050578b147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b14ecd2a1a1762f099a247dc916ab0050578b147"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b570c6dd40c3c4d11bcb387140a3c97abaa84ab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b570c6dd40c3c4d11bcb387140a3c97abaa84ab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b570c6dd40c3c4d11bcb387140a3c97abaa84ab1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b570c6dd40c3c4d11bcb387140a3c97abaa84ab1/comments", "author": null, "committer": null, "parents": [{"sha": "28e9a294c7adb1a35e286d0e648d98b35d445277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e9a294c7adb1a35e286d0e648d98b35d445277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28e9a294c7adb1a35e286d0e648d98b35d445277"}], "stats": {"total": 89, "additions": 60, "deletions": 29}, "files": [{"sha": "dfb70506e2c3de255819f07baacece7836bfcdaa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b570c6dd40c3c4d11bcb387140a3c97abaa84ab1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b570c6dd40c3c4d11bcb387140a3c97abaa84ab1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b570c6dd40c3c4d11bcb387140a3c97abaa84ab1", "patch": "@@ -1,3 +1,21 @@\n+2014-09-15  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md\n+\t(define_insn \"vcvtph2ps<mask_name>\"): Add masking.\n+\t(define_insn \"*vcvtph2ps_load<mask_name>\"): Ditto.\n+\t(define_insn \"vcvtph2ps256<mask_name>\"): Ditto.\n+\t(define_expand \"vcvtps2ph_mask\"): New.\n+\t(define_insn \"*vcvtps2ph<mask_name>\"): Add masking.\n+\t(define_insn \"*vcvtps2ph_store<mask_name>\"): Ditto.\n+\t(define_insn \"vcvtps2ph256<mask_name>\"): Ditto.\n+\n 2014-09-15  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "bd321fcefc063f331194b8e5ccd2a61e61eeefa0", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 42, "deletions": 29, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b570c6dd40c3c4d11bcb387140a3c97abaa84ab1/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b570c6dd40c3c4d11bcb387140a3c97abaa84ab1/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b570c6dd40c3c4d11bcb387140a3c97abaa84ab1", "patch": "@@ -16423,35 +16423,35 @@\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"vcvtph2ps\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+(define_insn \"vcvtph2ps<mask_name>\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(vec_select:V4SF\n-\t  (unspec:V8SF [(match_operand:V8HI 1 \"register_operand\" \"x\")]\n+\t  (unspec:V8SF [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n \t\t       UNSPEC_VCVTPH2PS)\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 3)])))]\n-  \"TARGET_F16C\"\n-  \"vcvtph2ps\\t{%1, %0|%0, %1}\"\n+  \"TARGET_F16C || TARGET_AVX512VL\"\n+  \"vcvtph2ps\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n-(define_insn \"*vcvtph2ps_load\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+(define_insn \"*vcvtph2ps_load<mask_name>\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(unspec:V4SF [(match_operand:V4HI 1 \"memory_operand\" \"m\")]\n \t\t     UNSPEC_VCVTPH2PS))]\n-  \"TARGET_F16C\"\n-  \"vcvtph2ps\\t{%1, %0|%0, %1}\"\n+  \"TARGET_F16C || TARGET_AVX512VL\"\n+  \"vcvtph2ps\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_insn \"vcvtph2ps256\"\n-  [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n-\t(unspec:V8SF [(match_operand:V8HI 1 \"nonimmediate_operand\" \"xm\")]\n+(define_insn \"vcvtph2ps256<mask_name>\"\n+  [(set (match_operand:V8SF 0 \"register_operand\" \"=v\")\n+\t(unspec:V8SF [(match_operand:V8HI 1 \"nonimmediate_operand\" \"vm\")]\n \t\t     UNSPEC_VCVTPH2PS))]\n-  \"TARGET_F16C\"\n-  \"vcvtph2ps\\t{%1, %0|%0, %1}\"\n+  \"TARGET_F16C || TARGET_AVX512VL\"\n+  \"vcvtph2ps\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"btver2_decode\" \"double\")\n@@ -16468,6 +16468,19 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"V16SF\")])\n \n+(define_expand \"vcvtps2ph_mask\"\n+  [(set (match_operand:V8HI 0 \"register_operand\")\n+\t(vec_merge:V8HI\n+\t  (vec_concat:V8HI\n+\t    (unspec:V4HI [(match_operand:V4SF 1 \"register_operand\")\n+\t\t\t  (match_operand:SI 2 \"const_0_to_255_operand\")]\n+\t\t\t  UNSPEC_VCVTPS2PH)\n+\t    (match_dup 5))\n+\t   (match_operand:V8HI 3 \"vector_move_operand\")\n+\t   (match_operand:QI 4 \"register_operand\")))]\n+  \"TARGET_AVX512VL\"\n+  \"operands[5] = CONST0_RTX (V4HImode);\")\n+\n (define_expand \"vcvtps2ph\"\n   [(set (match_operand:V8HI 0 \"register_operand\")\n \t(vec_concat:V8HI\n@@ -16478,39 +16491,39 @@\n   \"TARGET_F16C\"\n   \"operands[3] = CONST0_RTX (V4HImode);\")\n \n-(define_insn \"*vcvtps2ph\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+(define_insn \"*vcvtps2ph<mask_name>\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n \t(vec_concat:V8HI\n-\t  (unspec:V4HI [(match_operand:V4SF 1 \"register_operand\" \"x\")\n+\t  (unspec:V4HI [(match_operand:V4SF 1 \"register_operand\" \"v\")\n \t\t\t(match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n \t\t       UNSPEC_VCVTPS2PH)\n \t  (match_operand:V4HI 3 \"const0_operand\")))]\n-  \"TARGET_F16C\"\n-  \"vcvtps2ph\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"TARGET_F16C && <mask_avx512vl_condition>\"\n+  \"vcvtps2ph\\t{%2, %1, %0<mask_operand4>|%0<mask_operand4>, %1, %2}\"\n   [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n-(define_insn \"*vcvtps2ph_store\"\n+(define_insn \"*vcvtps2ph_store<mask_name>\"\n   [(set (match_operand:V4HI 0 \"memory_operand\" \"=m\")\n \t(unspec:V4HI [(match_operand:V4SF 1 \"register_operand\" \"x\")\n \t\t      (match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n \t\t     UNSPEC_VCVTPS2PH))]\n-  \"TARGET_F16C\"\n-  \"vcvtps2ph\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"TARGET_F16C || TARGET_AVX512VL\"\n+  \"vcvtps2ph\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n-(define_insn \"vcvtps2ph256\"\n+(define_insn \"vcvtps2ph256<mask_name>\"\n   [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=xm\")\n \t(unspec:V8HI [(match_operand:V8SF 1 \"register_operand\" \"x\")\n \t\t      (match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n \t\t     UNSPEC_VCVTPS2PH))]\n-  \"TARGET_F16C\"\n-  \"vcvtps2ph\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"TARGET_F16C || TARGET_AVX512VL\"\n+  \"vcvtps2ph\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"btver2_decode\" \"vector\")\n    (set_attr \"mode\" \"V8SF\")])\n "}]}