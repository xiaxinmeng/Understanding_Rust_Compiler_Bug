{"sha": "f0ea75811ae63b50e6c06ad694a993a8182ba012", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBlYTc1ODExYWU2M2I1MGU2YzA2YWQ2OTRhOTkzYTgxODJiYTAxMg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-07-07T15:38:34Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-07-07T15:38:34Z"}, "message": "Initial x32 support.\n\n2011-07-07  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config.gcc: Support --with-multilib-list for x86 Linux\n\ttargets.\n\n\t* configure.ac: Mention x86-64 for --with-multilib-list.\n\t* configure: Regenerated.\n\n\t* config/i386/gnu-user64.h (SPEC_64): Support x32.\n\t(SPEC_32): Likewise.\n\t(ASM_SPEC): Likewise.\n\t(LINK_SPEC): Likewise.\n\t(TARGET_THREAD_SSP_OFFSET): Likewise.\n\t(TARGET_THREAD_SPLIT_STACK_OFFSET): Likewise.\n\t(SPEC_X32): New.\n\n\t* config/i386/i386.h (TARGET_X32): New.\n\t(TARGET_LP64): New.\n\t(LONG_TYPE_SIZE): Likewise.\n\t(POINTER_SIZE): Likewise.\n\t(POINTERS_EXTEND_UNSIGNED): Likewise.\n\t(OPT_ARCH64): Support x32.\n\t(OPT_ARCH32): Likewise.\n\n\t* config/i386/i386.opt (mx32): New.\n\n\t* config/i386/kfreebsd-gnu64.h (GNU_USER_LINK_EMULATIONX32): New.\n\t(GLIBC_DYNAMIC_LINKERX32): Likewise.\n\t* config/i386/linux64.h (GNU_USER_LINK_EMULATIONX32): Likewise.\n\t(GLIBC_DYNAMIC_LINKERX32): Likewise.\n\n\t* config/linux.h (UCLIBC_DYNAMIC_LINKERX32): New.\n\t(BIONIC_DYNAMIC_LINKERX32): Likewise.\n\t(GNU_USER_DYNAMIC_LINKERX32): Likewise.\n\n\t* config/i386/t-linux64: Support TM_MULTILIB_CONFIG.\n\n\t* doc/install.texi: Document --with-multilib-list for\n\tLinux/x86-64.\n\n\t* doc/invoke.texi: Document -mx32.\n\nFrom-SVN: r175984", "tree": {"sha": "be55d57f091491a3c10e4f0da3c1344d4d7f5991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be55d57f091491a3c10e4f0da3c1344d4d7f5991"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0ea75811ae63b50e6c06ad694a993a8182ba012", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ea75811ae63b50e6c06ad694a993a8182ba012", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0ea75811ae63b50e6c06ad694a993a8182ba012", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ea75811ae63b50e6c06ad694a993a8182ba012/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c318df5275b3dd6843190b8e65580f8a63eb246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c318df5275b3dd6843190b8e65580f8a63eb246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c318df5275b3dd6843190b8e65580f8a63eb246"}], "stats": {"total": 178, "additions": 156, "deletions": 22}, "files": [{"sha": "35d8859c58acc15c7688122ac8adf2a26b2697d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0ea75811ae63b50e6c06ad694a993a8182ba012", "patch": "@@ -1,3 +1,45 @@\n+2011-07-07  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config.gcc: Support --with-multilib-list for x86 Linux\n+\ttargets.\n+\n+\t* configure.ac: Mention x86-64 for --with-multilib-list.\n+\t* configure: Regenerated.\n+\n+\t* config/i386/gnu-user64.h (SPEC_64): Support x32.\n+\t(SPEC_32): Likewise.\n+\t(ASM_SPEC): Likewise.\n+\t(LINK_SPEC): Likewise.\n+\t(TARGET_THREAD_SSP_OFFSET): Likewise.\n+\t(TARGET_THREAD_SPLIT_STACK_OFFSET): Likewise.\n+\t(SPEC_X32): New.\n+\n+\t* config/i386/i386.h (TARGET_X32): New.\n+\t(TARGET_LP64): New.\n+\t(LONG_TYPE_SIZE): Likewise.\n+\t(POINTER_SIZE): Likewise.\n+\t(POINTERS_EXTEND_UNSIGNED): Likewise.\n+\t(OPT_ARCH64): Support x32.\n+\t(OPT_ARCH32): Likewise.\n+\n+\t* config/i386/i386.opt (mx32): New.\n+\n+\t* config/i386/kfreebsd-gnu64.h (GNU_USER_LINK_EMULATIONX32): New.\n+\t(GLIBC_DYNAMIC_LINKERX32): Likewise.\n+\t* config/i386/linux64.h (GNU_USER_LINK_EMULATIONX32): Likewise.\n+\t(GLIBC_DYNAMIC_LINKERX32): Likewise.\n+\n+\t* config/linux.h (UCLIBC_DYNAMIC_LINKERX32): New.\n+\t(BIONIC_DYNAMIC_LINKERX32): Likewise.\n+\t(GNU_USER_DYNAMIC_LINKERX32): Likewise.\n+\n+\t* config/i386/t-linux64: Support TM_MULTILIB_CONFIG.\n+\n+\t* doc/install.texi: Document --with-multilib-list for\n+\tLinux/x86-64.\n+\n+\t* doc/invoke.texi: Document -mx32.\n+\n 2011-07-07  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* doc/invoke.texi (mwords-little-endian): Deprecate."}, {"sha": "f8d7274f349fd0125a9a4f31962ecb964b2c790c", "filename": "gcc/config.gcc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f0ea75811ae63b50e6c06ad694a993a8182ba012", "patch": "@@ -1281,6 +1281,22 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \t\t\ttm_file=\"${tm_file} i386/x86-64.h i386/gnu-user64.h i386/linux64.h\"\n \t\t\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\"\n \t\t\ttmake_file=\"${tmake_file} i386/t-linux64\"\n+\t\t\tx86_multilibs=\"${with_multilib_list}\"\n+\t\t\tif test \"$x86_multilibs\" = \"default\"; then\n+\t\t\t\tx86_multilibs=\"m64,m32\"\n+\t\t\tfi\n+\t\t\tx86_multilibs=`echo $x86_multilibs | sed -e 's/,/ /g'`\n+\t\t\tfor x86_multilib in ${x86_multilibs}; do\n+\t\t\t\tcase ${x86_multilib} in\n+\t\t\t\tm32 | m64 | mx32)\n+\t\t\t\t\tTM_MULTILIB_CONFIG=\"${TM_MULTILIB_CONFIG},${x86_multilib}\"\n+\t\t\t\t\t;;\n+\t\t\t\t*)\n+\t\t\t\t\techo \"--with-multilib-list=${x86_with_multilib} not supported.\"\n+\t\t\t\t\texit 1\n+\t\t\t\tesac\n+\t\t\tdone\n+\t\t\tTM_MULTILIB_CONFIG=`echo $TM_MULTILIB_CONFIG | sed 's/^,//'`\n \t\t\tneed_64bit_hwint=yes\n \t\t\tneed_64bit_isa=yes\n \t\t\tcase X\"${with_cpu}\" in\n@@ -1319,6 +1335,22 @@ x86_64-*-linux* | x86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu)\n \tx86_64-*-knetbsd*-gnu) tm_file=\"${tm_file} knetbsd-gnu.h\" ;;\n \tesac\n \ttmake_file=\"${tmake_file} i386/t-linux64 i386/t-crtstuff i386/t-crtpc i386/t-crtfm t-dfprules\"\n+\tx86_multilibs=\"${with_multilib_list}\"\n+\tif test \"$x86_multilibs\" = \"default\"; then\n+\t\tx86_multilibs=\"m64,m32\"\n+\tfi\n+\tx86_multilibs=`echo $x86_multilibs | sed -e 's/,/ /g'`\n+\tfor x86_multilib in ${x86_multilibs}; do\n+\t\tcase ${x86_multilib} in\n+\t\tm32 | m64 | mx32)\n+\t\t\tTM_MULTILIB_CONFIG=\"${TM_MULTILIB_CONFIG},${x86_multilib}\"\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"--with-multilib-list=${x86_with_multilib} not supported.\"\n+\t\t\texit 1\n+\t\tesac\n+\tdone\n+\tTM_MULTILIB_CONFIG=`echo $TM_MULTILIB_CONFIG | sed 's/^,//'`\n \t;;\n i[34567]86-pc-msdosdjgpp*)\n \txm_file=i386/xm-djgpp.h"}, {"sha": "954f3b2ff24a273f88f9ccc5aafc7ec960d04cf7", "filename": "gcc/config/i386/gnu-user64.h", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfig%2Fi386%2Fgnu-user64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfig%2Fi386%2Fgnu-user64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-user64.h?ref=f0ea75811ae63b50e6c06ad694a993a8182ba012", "patch": "@@ -58,25 +58,31 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #if TARGET_64BIT_DEFAULT\n #define SPEC_32 \"m32\"\n-#define SPEC_64 \"!m32\"\n+#define SPEC_64 \"m32|mx32:;\"\n+#define SPEC_X32 \"mx32\"\n #else\n-#define SPEC_32 \"!m64\"\n+#define SPEC_32 \"m64|mx32:;\"\n #define SPEC_64 \"m64\"\n+#define SPEC_X32 \"mx32\"\n #endif\n \n #undef ASM_SPEC\n-#define ASM_SPEC \"%{\" SPEC_32 \":--32} %{\" SPEC_64 \":--64} \\\n+#define ASM_SPEC \"%{\" SPEC_32 \":--32} \\\n+ %{\" SPEC_64 \":--64} \\\n+ %{\" SPEC_X32 \":--x32} \\\n  %{!mno-sse2avx:%{mavx:-msse2avx}} %{msse2avx:%{!mavx:-msse2avx}}\"\n \n #undef\tLINK_SPEC\n #define LINK_SPEC \"%{\" SPEC_64 \":-m \" GNU_USER_LINK_EMULATION64 \"} \\\n                    %{\" SPEC_32 \":-m \" GNU_USER_LINK_EMULATION32 \"} \\\n+                   %{\" SPEC_X32 \":-m \" GNU_USER_LINK_EMULATIONX32 \"} \\\n   %{shared:-shared} \\\n   %{!shared: \\\n     %{!static: \\\n       %{rdynamic:-export-dynamic} \\\n       %{\" SPEC_32 \":-dynamic-linker \" GNU_USER_DYNAMIC_LINKER32 \"} \\\n-      %{\" SPEC_64 \":-dynamic-linker \" GNU_USER_DYNAMIC_LINKER64 \"}} \\\n+      %{\" SPEC_64 \":-dynamic-linker \" GNU_USER_DYNAMIC_LINKER64 \"} \\\n+      %{\" SPEC_X32 \":-dynamic-linker \" GNU_USER_DYNAMIC_LINKERX32 \"}} \\\n     %{static:-static}}\"\n \n /* Similar to standard GNU userspace, but adding -ffast-math support.  */\n@@ -110,10 +116,13 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #ifdef TARGET_LIBC_PROVIDES_SSP\n /* i386 glibc provides __stack_chk_guard in %gs:0x14,\n+   x32 glibc provides it in %fs:0x18. \n    x86_64 glibc provides it in %fs:0x28.  */\n-#define TARGET_THREAD_SSP_OFFSET\t(TARGET_64BIT ? 0x28 : 0x14)\n+#define TARGET_THREAD_SSP_OFFSET \\\n+  (TARGET_64BIT ? (TARGET_X32 ? 0x18 : 0x28) : 0x14)\n \n /* We steal the last transactional memory word.  */\n #define TARGET_CAN_SPLIT_STACK\n-#define TARGET_THREAD_SPLIT_STACK_OFFSET (TARGET_64BIT ? 0x70 : 0x30)\n+#define TARGET_THREAD_SPLIT_STACK_OFFSET \\\n+  (TARGET_64BIT ? (TARGET_X32 ? 0x40 : 0x70) : 0x30)\n #endif"}, {"sha": "8cef4e7c02a296b2aee66ef302b97dedfd7bd686", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f0ea75811ae63b50e6c06ad694a993a8182ba012", "patch": "@@ -42,6 +42,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* Redefines for option macros.  */\n \n #define TARGET_64BIT\tOPTION_ISA_64BIT\n+#define TARGET_X32\tOPTION_ISA_X32\n #define TARGET_MMX\tOPTION_ISA_MMX\n #define TARGET_3DNOW\tOPTION_ISA_3DNOW\n #define TARGET_3DNOW_A\tOPTION_ISA_3DNOW_A\n@@ -72,6 +73,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_RDRND\tOPTION_ISA_RDRND\n #define TARGET_F16C\tOPTION_ISA_F16C\n \n+#define TARGET_LP64\t(TARGET_64BIT && !TARGET_X32)\n \n /* SSE4.1 defines round instructions */\n #define\tOPTION_MASK_ISA_ROUND\tOPTION_MASK_ISA_SSE4_1\n@@ -516,8 +518,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define OPT_ARCH64 \"!m32\"\n #define OPT_ARCH32 \"m32\"\n #else\n-#define OPT_ARCH64 \"m64\"\n-#define OPT_ARCH32 \"!m64\"\n+#define OPT_ARCH64 \"m64|mx32\"\n+#define OPT_ARCH32 \"m64|mx32:;\"\n #endif\n \n /* Support for configure-time defaults of some command line options.\n@@ -637,6 +639,8 @@ enum target_cpu_default\n \n #define SHORT_TYPE_SIZE 16\n #define INT_TYPE_SIZE 32\n+#define LONG_TYPE_SIZE (TARGET_X32 ? 32 : BITS_PER_WORD)\n+#define POINTER_SIZE (TARGET_X32 ? 32 : BITS_PER_WORD)\n #define LONG_LONG_TYPE_SIZE 64\n #define FLOAT_TYPE_SIZE 32\n #define DOUBLE_TYPE_SIZE 64\n@@ -1742,6 +1746,13 @@ do {\t\t\t\t\t\t\t\\\n    between pointers and any other objects of this machine mode.  */\n #define Pmode (TARGET_64BIT ? DImode : SImode)\n \n+/* A C expression whose value is zero if pointers that need to be extended\n+   from being `POINTER_SIZE' bits wide to `Pmode' are sign-extended and\n+   greater then zero if they are zero-extended and less then zero if the\n+   ptr_extend instruction should be used.  */\n+\n+#define POINTERS_EXTEND_UNSIGNED 1\n+\n /* A function address in a call instruction\n    is a byte address (for indexing purposes)\n    so give the MEM rtx a byte's mode.  */"}, {"sha": "8dea93e74c06fdd53f74f6c2592dd4f2fec614e1", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=f0ea75811ae63b50e6c06ad694a993a8182ba012", "patch": "@@ -398,9 +398,13 @@ Target RejectNegative Negative(m64) Report InverseMask(ISA_64BIT) Var(ix86_isa_f\n Generate 32bit i386 code\n \n m64\n-Target RejectNegative Negative(m32) Report Mask(ISA_64BIT) Var(ix86_isa_flags) Save\n+Target RejectNegative Negative(mx32) Report Mask(ISA_64BIT) Var(ix86_isa_flags) Save\n Generate 64bit x86-64 code\n \n+mx32\n+Target RejectNegative Negative(m32) Report Mask(ISA_X32) Var(ix86_isa_flags) Save\n+Generate 32bit x86-64 code\n+\n mmmx\n Target Report Mask(ISA_MMX) Var(ix86_isa_flags) Save\n Support MMX built-in functions"}, {"sha": "2085ca5fe6f9fccb646951b46b9988e612908e15", "filename": "gcc/config/i386/kfreebsd-gnu64.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfig%2Fi386%2Fkfreebsd-gnu64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfig%2Fi386%2Fkfreebsd-gnu64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fkfreebsd-gnu64.h?ref=f0ea75811ae63b50e6c06ad694a993a8182ba012", "patch": "@@ -21,6 +21,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #define GNU_USER_LINK_EMULATION32 \"elf_i386_fbsd\"\n #define GNU_USER_LINK_EMULATION64 \"elf_x86_64_fbsd\"\n+#define GNU_USER_LINK_EMULATIONX32 \"elf32_x86_64_fbsd\"\n \n #define GLIBC_DYNAMIC_LINKER32 \"/lib/ld.so.1\"\n #define GLIBC_DYNAMIC_LINKER64 \"/lib/ld-kfreebsd-x86-64.so.1\"\n+#define GLIBC_DYNAMIC_LINKERX32 \"/lib/ld-kfreebsd-x32.so.1\""}, {"sha": "5b0a212cece5972feb24f222113e0d00aa6b64c6", "filename": "gcc/config/i386/linux64.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfig%2Fi386%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfig%2Fi386%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux64.h?ref=f0ea75811ae63b50e6c06ad694a993a8182ba012", "patch": "@@ -26,6 +26,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #define GNU_USER_LINK_EMULATION32 \"elf_i386\"\n #define GNU_USER_LINK_EMULATION64 \"elf_x86_64\"\n+#define GNU_USER_LINK_EMULATIONX32 \"elf32_x86_64\"\n \n #define GLIBC_DYNAMIC_LINKER32 \"/lib/ld-linux.so.2\"\n #define GLIBC_DYNAMIC_LINKER64 \"/lib64/ld-linux-x86-64.so.2\"\n+#define GLIBC_DYNAMIC_LINKERX32 \"/libx32/ld-linux-x32.so.2\""}, {"sha": "ea8f5e9d7ae809a89628c489440fb3b5fee23231", "filename": "gcc/config/i386/t-linux64", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfig%2Fi386%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfig%2Fi386%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-linux64?ref=f0ea75811ae63b50e6c06ad694a993a8182ba012", "patch": "@@ -1,4 +1,5 @@\n-# Copyright (C) 2002, 2005, 2007, 2008 Free Software Foundation, Inc.\n+# Copyright (C) 2002, 2005, 2007, 2008, 2011\n+# Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -23,9 +24,19 @@\n # it doesn't tell anything about the 32bit libraries on those systems.  Set\n # MULTILIB_OSDIRNAMES according to what is found on the target.\n \n-MULTILIB_OPTIONS = m64/m32\n-MULTILIB_DIRNAMES = 64 32 \n-MULTILIB_OSDIRNAMES = ../lib64 $(if $(wildcard $(shell echo $(SYSTEM_HEADER_DIR))/../../usr/lib32),../lib32,../lib)\n+# To support i386, x86-64 and x32 libraries, the directory structrue\n+# should be:\n+#\n+# \t/lib has i386 libraries.\n+# \t/lib64 has x86-64 libraries.\n+# \t/libx32 has x32 libraries.\n+#\n+comma=,\n+MULTILIB_OPTIONS    = $(subst $(comma),/,$(TM_MULTILIB_CONFIG))\n+MULTILIB_DIRNAMES   = $(patsubst m%, %, $(subst /, ,$(MULTILIB_OPTIONS)))\n+MULTILIB_OSDIRNAMES = m64=../lib64\n+MULTILIB_OSDIRNAMES+= m32=$(if $(wildcard $(shell echo $(SYSTEM_HEADER_DIR))/../../usr/lib32),../lib32,../lib)\n+MULTILIB_OSDIRNAMES+= mx32=../libx32\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib"}, {"sha": "dbbeea5c7fdd36055ef9360d00307e1cda070569", "filename": "gcc/config/linux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=f0ea75811ae63b50e6c06ad694a993a8182ba012", "patch": "@@ -77,9 +77,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define UCLIBC_DYNAMIC_LINKER \"/lib/ld-uClibc.so.0\"\n #define UCLIBC_DYNAMIC_LINKER32 \"/lib/ld-uClibc.so.0\"\n #define UCLIBC_DYNAMIC_LINKER64 \"/lib/ld64-uClibc.so.0\"\n+#define UCLIBC_DYNAMIC_LINKERX32 \"/lib/ldx32-uClibc.so.0\"\n #define BIONIC_DYNAMIC_LINKER \"/system/bin/linker\"\n #define BIONIC_DYNAMIC_LINKER32 \"/system/bin/linker\"\n #define BIONIC_DYNAMIC_LINKER64 \"/system/bin/linker64\"\n+#define BIONIC_DYNAMIC_LINKERX32 \"/system/bin/linkerx32\"\n \n #define GNU_USER_DYNAMIC_LINKER\t\t\t\t\t\t\\\n   CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKER, UCLIBC_DYNAMIC_LINKER,\t\\\n@@ -90,6 +92,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define GNU_USER_DYNAMIC_LINKER64\t\t\t\t\t\\\n   CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKER64, UCLIBC_DYNAMIC_LINKER64, \\\n \t\t\t BIONIC_DYNAMIC_LINKER64)\n+#define GNU_USER_DYNAMIC_LINKERX32\t\t\t\t\t\\\n+  CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKERX32, UCLIBC_DYNAMIC_LINKERX32, \\\n+\t\t\t BIONIC_DYNAMIC_LINKERX32)\n \n /* Determine whether the entire c99 runtime\n    is present in the runtime library.  */"}, {"sha": "9fb43170185baabf07c774b50865828087b8d04d", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=f0ea75811ae63b50e6c06ad694a993a8182ba012", "patch": "@@ -1655,7 +1655,7 @@ Optional Packages:\n   --with-specs=SPECS      add SPECS to driver command-line processing\n   --with-pkgversion=PKG   Use PKG in the version string in place of \"GCC\"\n   --with-bugurl=URL       Direct users to URL to report a bug\n-  --with-multilib-list    select multilibs (SH only)\n+  --with-multilib-list    select multilibs (SH and x86-64 only)\n   --with-gnu-ld           assume the C compiler uses GNU ld default=no\n   --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib\n   --without-libiconv-prefix     don't search for libiconv in includedir and libdir"}, {"sha": "c2163bf70d5c3a1704bad9a2ba7599c0c50e8a40", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=f0ea75811ae63b50e6c06ad694a993a8182ba012", "patch": "@@ -795,7 +795,7 @@ esac],\n [enable_languages=c])\n \n AC_ARG_WITH(multilib-list,\n-[AS_HELP_STRING([--with-multilib-list], [select multilibs (SH only)])],\n+[AS_HELP_STRING([--with-multilib-list], [select multilibs (SH and x86-64 only)])],\n :,\n with_multilib_list=default)\n "}, {"sha": "833b4c935d7505a3baf4a131d070767ad6a05f6c", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=f0ea75811ae63b50e6c06ad694a993a8182ba012", "patch": "@@ -1049,8 +1049,10 @@ sysv, aix.\n @item --with-multilib-list=@var{list}\n @itemx --without-multilib-list\n Specify what multilibs to build.\n-Currently only implemented for sh*-*-*.\n+Currently only implemented for sh*-*-* and x86-64-*-linux*.\n \n+@table @code\n+@item sh*-*-*\n @var{list} is a comma separated list of CPU names.  These must be of the\n form @code{sh*} or @code{m*} (in which case they match the compiler option\n for that processor).  The list should not contain any endian options -\n@@ -1082,6 +1084,16 @@ only little endian SH4AL:\n --with-multilib-list=sh4al,!mb/m4al\n @end smallexample\n \n+@item x86-64-*-linux*\n+@var{list} is a comma separated list of @code{m32}, @code{m64} and\n+@code{mx32} to enable 32-bit, 64-bit and x32 run-time libraries,\n+respectively.  If @var{list} is empty, then there will be no multilibs\n+and only the default run-time library will be enabled.\n+\n+If @option{--with-multilib-list} is not given, then only 32-bit and\n+64-bit run-time libraries will be enabled.\n+@end table\n+\n @item --with-endian=@var{endians}\n Specify what endians to use.\n Currently only implemented for sh*-*-*."}, {"sha": "f146cc565a5f01487e936a44f61ff26c9f844d78", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ea75811ae63b50e6c06ad694a993a8182ba012/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f0ea75811ae63b50e6c06ad694a993a8182ba012", "patch": "@@ -610,7 +610,7 @@ Objective-C and Objective-C++ Dialects}.\n -mpc32 -mpc64 -mpc80 -mstackrealign @gol\n -momit-leaf-frame-pointer  -mno-red-zone -mno-tls-direct-seg-refs @gol\n -mcmodel=@var{code-model} -mabi=@var{name} @gol\n--m32  -m64 -mlarge-data-threshold=@var{num} @gol\n+-m32 -m64 -mx32 -mlarge-data-threshold=@var{num} @gol\n -msse2avx -mfentry -m8bit-idiv @gol\n -mavx256-split-unaligned-load -mavx256-split-unaligned-store}\n \n@@ -12853,15 +12853,19 @@ on AMD x86-64 processors in 64-bit environments.\n @table @gcctabopt\n @item -m32\n @itemx -m64\n+@itemx -mx32\n @opindex m32\n @opindex m64\n+@opindex mx32\n Generate code for a 32-bit or 64-bit environment.\n-The 32-bit environment sets int, long and pointer to 32 bits and\n+The @option{-m32} option sets int, long and pointer to 32 bits and\n generates code that runs on any i386 system.\n-The 64-bit environment sets int to 32 bits and long and pointer\n-to 64 bits and generates code for AMD's x86-64 architecture. For\n-darwin only the -m64 option turns off the @option{-fno-pic} and\n-@option{-mdynamic-no-pic} options.\n+The @option{-m64} option sets int to 32 bits and long and pointer\n+to 64 bits and generates code for AMD's x86-64 architecture.\n+The @option{-mx32} option sets int, long and pointer to 32 bits and\n+generates code for AMD's x86-64 architecture.\n+For darwin only the @option{-m64} option turns off the @option{-fno-pic}\n+and @option{-mdynamic-no-pic} options.\n \n @item -mno-red-zone\n @opindex mno-red-zone"}]}