{"sha": "ca5e1be83df4629faf3bccabcc8e712447ac390e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E1ZTFiZTgzZGY0NjI5ZmFmM2JjY2FiY2M4ZTcxMjQ0N2FjMzkwZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-05-20T22:25:09Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-05-20T22:25:09Z"}, "message": "README: Move to...\n\n\n2003-05-20  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/README: Move to...\n\t* docs/html/test.html: ...here. Add documentation.\n\t* docs/html/install.html: Move testing bits out..\n\t* docs/html/documentation.html: Add separate testing link.\n        * testsuite/performance: Add.\n        * testsuite/performance/allocator.cc: New.\n        * testsuite/performance/complex_norm.cc: New.\n        * testsuite/performance/cout_insert_int.cc: New.\n        * testsuite/performance/fstream_seek_write.cc: New.\n        * testsuite/performance/ifstream_getline.cc: New.\n        * testsuite/performance/map_create_fill.cc: New.\n        * testsuite/performance/ofstream_insert_float.cc: New.\n        * testsuite/performance/ofstream_insert_int.cc: New.\n        * testsuite/performance/string_append.cc: New.\n\t* testsuite/lib/libstdc++-v3-dg.exp (v3-compute-tests): Filter\n\tperformance tests.\n\nFrom-SVN: r67040", "tree": {"sha": "10828d48bac21ce99401d8b7ee40e968a9760662", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10828d48bac21ce99401d8b7ee40e968a9760662"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca5e1be83df4629faf3bccabcc8e712447ac390e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5e1be83df4629faf3bccabcc8e712447ac390e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca5e1be83df4629faf3bccabcc8e712447ac390e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5e1be83df4629faf3bccabcc8e712447ac390e/comments", "author": null, "committer": null, "parents": [{"sha": "f737a52d03639a15f3fa1acbe63945d97976c08c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f737a52d03639a15f3fa1acbe63945d97976c08c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f737a52d03639a15f3fa1acbe63945d97976c08c"}], "stats": {"total": 1279, "additions": 1040, "deletions": 239}, "files": [{"sha": "01ddf1e129fcce1e09409459a2874159b9b99834", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ca5e1be83df4629faf3bccabcc8e712447ac390e", "patch": "@@ -1,3 +1,22 @@\n+2003-05-20  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/README: Move to...\n+\t* docs/html/test.html: ...here. Add documentation.\n+\t* docs/html/install.html: Move testing bits out..\n+\t* docs/html/documentation.html: Add separate testing link.\n+        * testsuite/performance: Add.\n+        * testsuite/performance/allocator.cc: New.\n+        * testsuite/performance/complex_norm.cc: New.\n+        * testsuite/performance/cout_insert_int.cc: New.\n+        * testsuite/performance/fstream_seek_write.cc: New.\n+        * testsuite/performance/ifstream_getline.cc: New.\n+        * testsuite/performance/map_create_fill.cc: New.\n+        * testsuite/performance/ofstream_insert_float.cc: New.\n+        * testsuite/performance/ofstream_insert_int.cc: New.\n+        * testsuite/performance/string_append.cc: New.\n+\t* testsuite/lib/libstdc++-v3-dg.exp (v3-compute-tests): Filter\n+\tperformance tests.\n+ \n 2003-05-20  Gabriel Dos Reis <gdr@integrable-solutions.net>\n \n \tPR libstdc++/10689"}, {"sha": "827ed22c55fbbf82f396dbba6ec94a612bcea3d8", "filename": "libstdc++-v3/docs/html/documentation.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html?ref=ca5e1be83df4629faf3bccabcc8e712447ac390e", "patch": "@@ -45,11 +45,12 @@ <h2><a name=\"1\">Introduction</a></h2>\n \n <hr />\n <br />\n-<h2><a name=\"2\">Configuring, Building, Installing</a></h2>\n+<h2><a name=\"2\">Configuring, Building, Testing, Installing</a></h2>\n <ul>\n    <li><a href=\"configopts.html\">Configure options</a></li>\n    <li><a href=\"install.html\">Getting started: configure, build, install</a>\n    </li>\n+   <li><a href=\"test.html\">Testing details</a>\n    <li><a href=\"debug.html\">Debugging schemes and strategies</a>\n    </li>\n </ul>"}, {"sha": "038291b8acc16889e26ae9d58b3159402588282e", "filename": "libstdc++-v3/docs/html/install.html", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html?ref=ca5e1be83df4629faf3bccabcc8e712447ac390e", "patch": "@@ -14,7 +14,7 @@\n </head>\n <body>\n \n-<h1 class=\"centered\"><a name=\"top\">libstdc++-v3 INSTALL</a></h1>\n+<h1 class=\"centered\"><a name=\"top\">Getting started: configure, build, install</a></h1>\n \n <p class=\"fineprint\"><em>\n    The latest version of this document is always available at\n@@ -312,36 +312,6 @@ <h2><a name=\"postinstall\">Post-installation</a></h2>\n       the headers and library files will be moved under\n       <code>lib/gcc-lib/</code> instead.\n    </p>\n-   <p>You can check the status of the build without installing it using</p>\n-   <pre>\n-   make check</pre>\n-   <p>or you can check the status of the installed library using</p>\n-   <pre>\n-   make check-install</pre>\n-   <p>in the <em>libbuilddir</em> directory.\n-      These commands will create a 'testsuite' directory underneath\n-      <em>libbuilddir</em> containing the results of the tests.  We are\n-      interested in any strange failures of the testsuite; please see\n-      <a href=\"faq/index.html#2_4\">FAQ 2.4</a> for which files to examine.\n-   </p>\n-\n-   <p> In addition, there are some testing options that are mostly of\n-   interest to library maintainers and system integrators. As such,\n-   these tests may not work on all cpu and host combinations. These\n-   options include, but are not necessarily limited to, the following:\n-   </p>\n-\n-   <p>The library ABI can be tested using</p>\n-   <pre>\n-   make check-abi</pre>\n-\n-   <p>The library can also be tested using a bash script, instead of\n-   the default dejagnu test harness</p>\n-   <pre>\n-   make check-script</pre>\n-   <p>or</p>\n-   <pre>\n-   make check-script-install</pre>\n \n <hr />\n <h2><a name=\"usage\">Using the library</a></h2>"}, {"sha": "61e372581e0561f125aa8018fc2ebefc22258e78", "filename": "libstdc++-v3/docs/html/test.html", "status": "added", "additions": 564, "deletions": 0, "changes": 564, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ftest.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ftest.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ftest.html?ref=ca5e1be83df4629faf3bccabcc8e712447ac390e", "patch": "@@ -0,0 +1,564 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!DOCTYPE html\n+          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n+          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n+<head>\n+   <meta name=\"AUTHOR\" content=\"bkoz@gcc.gnu.org (Benjamin Kosnik)\" />\n+   <meta name=\"KEYWORDS\" content=\"c++, libstdc++, test, regression, g++\" />\n+   <meta name=\"DESCRIPTION\" content=\"README for the GNU libstdc++ effort.\" />\n+   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n+   <title>libstdc++-v3 Testing Instructions</title>\n+<link rel=\"StyleSheet\" href=\"lib3styles.css\" />\n+</head>\n+<body>\n+\n+<h1 class=\"centered\"><a name=\"top\">Testing Details</a></h1>\n+\n+<p class=\"fineprint\"><em>\n+   The latest version of this document is always available at\n+   <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/test.html\">\n+   http://gcc.gnu.org/onlinedocs/libstdc++/test.html</a>.\n+</em></p>\n+\n+<p><em>\n+   To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++-v3 homepage</a>.\n+</em></p>\n+\n+<!-- ####################################################### -->\n+<hr />\n+<h2>Contents</h2>\n+<ul>\n+   <li><a href=\"#org\">Testsuite organization and naming conventions</a></li>\n+   <li><a href=\"#util\">Utilities: abicheck and libv3test</a></li>\n+   <li><a href=\"#new\">How to write a new test case</a></li>\n+   <li><a href=\"#check\">Options for running the tests</a></li>\n+   <li><a href=\"#future\">Future</a></li>\n+</ul>\n+\n+<hr />\n+\n+<!-- ####################################################### -->\n+\n+<h2><a name=\"org\">Testsuite organization and naming conventions</a></h2>\n+   <p>\n+      The directory <em>libsrcdir/testsuite</em> contains the test\n+      files, test harness, and utility information for verifying the\n+      correctness of C++ library on a given host. It includes the\n+      following directories, each named after a specific chapter of\n+      the C++ standard, and each containing test files or\n+      subdirectories of test files that test for that particular part\n+      of the standard.\n+   <p>\n+\n+   <pre>\n+17_intro\n+18_support\n+19_diagnostics\n+20_util\n+21_strings\n+22_locale\n+23_containers\n+25_algorithms\n+26_numerics\n+27_io\n+   </pre>\n+\n+   <p>\n+      In addition, the following directories include test files:\n+   </p>\n+\n+   <pre>\n+backward\t  Tests for backwards compatibility and deprecated features.\n+demangle\t  Tests for __cxa_demangle, the IA 64 C++ ABI demangler\n+ext\t\t  Tests for extensions.\n+performance\t  Tests for performance analysis, and performance regressions.\n+thread\t\t  Tests for threads.\n+   </pre>\n+   \n+   <p>\n+      Some directories don't have test files, but instead contain\n+      auxiliary information:\n+   </p>\n+\n+   <pre>\n+config\t\t  Files for the dejagnu test harness.\n+lib\t\t  Files for the dejagnu test harness.\n+libstdc++-v3.dg\t  Files for the dejagnu test harness.\n+data\t\t  Sample text files for testing input and output.\n+   </pre>\n+\n+   <p>\n+      Within a directory that includes test files, there may be\n+      additional subdirectories, or files: this particular point is in\n+      flux. Originally, test cases were appended to one file that\n+      represented a particular section of the chapter under test, and\n+      was named accordingly. For instance, to test items related to\n+      <code> 21.3.6.1 - basic_string::find [lib.string::find]</code>\n+      in the standard, the following was used:\n+   <p>\n+   <pre>\n+21_strings/find.cc\n+   </pre>   \n+   <p>\n+      However, that practice soon became a liability as the test cases\n+      became huge and unwieldy, and testing new or extended\n+      functionality (like wide characters or named locales) became\n+      frustrating, leading to aggressive pruning of test cases on some\n+      platforms that covered up implementation errors. Now, the test\n+      suite is converging on a policy of one file, one test case,\n+      which solves the above issues and gives finer grained results\n+      and more manageable error debugging. As an example, the test case\n+      quoted above becomes:\n+   </p>\n+   <pre>\n+21_strings/basic_string/find/char/1.cc\n+21_strings/basic_string/find/char/2.cc\n+21_strings/basic_string/find/char/3.cc\n+21_strings/basic_string/find/wchar_t/1.cc\n+21_strings/basic_string/find/wchar_t/2.cc\n+21_strings/basic_string/find/wchar_t/3.cc\n+   </pre>   \n+\n+   <p>\n+      All new tests should be written with the policy of one test\n+      case, one file in mind. At some point the entire testsuite will\n+      be converted: the current status is that the 21_string,\n+      22_locale, 27_io, and demangle directories have all been\n+      transitioned.\n+   </p>\n+\n+   <p>\n+      In addition, there are some special names and suffixes that are\n+      used within the testsuite to designate particular kinds of\n+      tests.\n+   </p>\n+ \n+<ul>\n+<li>\n+   <em>_xin.cc</em>\n+   <p>\n+      This test case expects some kind of interactive input in order\n+      to finish or pass. At the moment, the interactive tests are not\n+      run by default. Instead, they are run by hand, like:\n+      <pre> \n+g++ 27_io/objects/char/3_xin.cc\n+cat 27_io/objects/char/3_xin.in | a.out\n+     </pre> \n+   </p>\n+</li>\n+<li>\n+   <em>.in</em>\n+   <p>\n+      This file contains the expected input for the corresponding <em>\n+      _xin.cc</em> test case.\n+   </p>\n+</li>\n+<li>\n+   <em>_neg.cc</em>\n+   <p>\n+      This test case is expected to fail: it's a negative test. At the\n+      moment, these are almost always compile time errors.\n+   </p>\n+</li>\n+<li>\n+   <em>char</em>\n+   <p>\n+      This can either be a directory name or part of a longer file\n+      name, and indicates that this file, or the files within this\n+      directory are testing the <code>char</code> instantiation of a\n+      template.\n+   </p>\n+</li>\n+<li>\n+   <em>wchar_t</em>\n+   <p>\n+      This can either be a directory name or part of a longer file\n+      name, and indicates that this file, or the files within this\n+      directory are testing the <code>wchar_t</code> instantiation of\n+      a template. Some hosts do not support <code>wchar_t</code>\n+      functionality, so for these targets, all of these tests will not\n+      be run.\n+   </p>\n+</li>\n+<li>\n+   <em>performance</em>\n+   <p>\n+      This can either be an enclosing directory name or part of a\n+      specific file name. This indicates a test that is used to\n+      analyze runtime performance, for performance regression testing,\n+      or for other optimization related analysis. At the moment, these\n+      test cases are not run by default, and instead assumed to be run\n+      manually.\n+   </p>\n+</li>\n+</ul>\n+\n+<hr />\n+<h2><a name=\"util\">Utilities: abicheck and libv3test</a></h2>\n+  <p>\n+   The testsuite directory also contains some files that implement\n+   functionality that is intended to make writing test cases easier,\n+   or to avoid duplication, or to provide error checking in a way that\n+   is consistent across platforms and test harnesses. A stand-alone\n+   executable, called <em>abi_check</em>, and a static library called\n+   <em>libv3test</em> are constructed during the build. Both of these\n+   items are not installed, and only used during testing.\n+  </p>\n+\n+  <p>\n+  These files include the following functionality:\n+  </p>\n+\n+  <ul>\n+     <li>\n+       <em>abi_check.cc</em>\n+       <p>\n+        Creates the executable <em>abi_check</em>.\n+        Used to check correctness of symbol versioning, visibility of\n+        exported symbols, and compatibility on symbols in the shared\n+        library, for hosts that support this feature. More information\n+\tcan be found in the ABI documentation <a href=\"abi.txt\"> here</a>\n+       </p>\n+     </li>\n+     <li>\n+       <em>testsuite_allocator.h and </em>\n+       <em>testsuite_allocator.cc</em>\n+       <p>\n+        Specialized allocators that keep track of construction and destruction\n+       </p>\n+     </li>\n+     <li>\n+       <em>testsuite_hooks.h and </em>\n+       <em>testsuite_hooks.cc</em>\n+       <p>\n+       A large number of utilities, including:\n+       </p>\n+       <ul>\n+         <li>VERIFY</li>\n+         <li>set_memory_limits</li>\n+         <li>verify_demangle</li>\n+         <li>run_tests_wrapped_locale</li>\n+         <li>run_tests_wrapped_env</li>\n+         <li>try_named_locale</li>\n+         <li>counter</li>\n+         <li>copy_constructor</li>\n+         <li>assignment_operator</li>\n+         <li>destructor</li>\n+         <li>copy_tracker</li>\n+         <li>pod_char, pod_int and associated char_traits specializations</li>\n+       </ul>\n+       <p></p>\n+     </li>\n+     <li>\n+       <em>printnow.c</em>\n+       <p>\n+        A cross-platform timer for use in one of the older harnesses\n+        to determine compilation and link time.\n+       </p>\n+     </li>\n+  </ul>\n+\n+<hr />\n+<h2><a name=\"new\">How to write a new test case</a></h2>\n+\n+   <p>\n+    The first step in making a new test case is to choose the correct\n+    directory and file name, given the organization as previously\n+    described. \n+   </p>\n+\n+   <p>\n+    All files are copyright the FSF, and GPL'd: this is very\n+    important.  The first copyright year should correspond to the date\n+    the file was checked in to CVS.\n+   </p>\n+\n+   <p>\n+     As per the dejagnu instructions, always return 0 from main to\n+     indicate success.\n+   </p>\n+\n+   <p>\n+   A bunch of utility functions and classes have already been\n+   abstracted out into the testsuite utility library, <code>\n+   libv3test</code>. To use this functionality, just include the\n+   appropriate header file: the library will automatically be linked\n+   in as part of the testsuite run.\n+   </p>\n+\n+   <p>\n+   For a test that needs to take advantage of the dejagnu test\n+   harness, what follows below is a list of special keyword that\n+   harness uses. Basically, a test case contains dg-keywords (see\n+   dg.exp) indicating what to do and what kinds of behavior are to be\n+   expected.  New test cases should be written with the new style\n+   DejaGnu framework in mind.\n+   </p>\n+\n+   <p>\n+    To ease transition, here is the list of dg-keyword documentation\n+    lifted from dg.exp.\n+   </p>\n+\n+<pre>\n+# The currently supported options are:\n+#\n+# dg-prms-id N\n+#\tset prms_id to N\n+#\n+# dg-options \"options ...\" [{ target selector }]\n+#\tspecify special options to pass to the tool (eg: compiler)\n+#\n+# dg-do do-what-keyword [{ target/xfail selector }]\n+#\t`do-what-keyword' is tool specific and is passed unchanged to\n+#\t${tool}-dg-test.  An example is gcc where `keyword' can be any of:\n+#\tpreprocess|compile|assemble|link|run\n+#\tand will do one of: produce a .i, produce a .s, produce a .o,\n+#\tproduce an a.out, or produce an a.out and run it (the default is\n+#\tcompile).\n+#\n+# dg-error regexp comment [{ target/xfail selector } [{.|0|linenum}]]\n+#\tindicate an error message <regexp> is expected on this line\n+#\t(the test fails if it doesn't occur)\n+#\tLinenum=0 for general tool messages (eg: -V arg missing).\n+#\t\".\" means the current line.\n+#\n+# dg-warning regexp comment [{ target/xfail selector } [{.|0|linenum}]]\n+#\tindicate a warning message <regexp> is expected on this line\n+#\t(the test fails if it doesn't occur)\n+#\n+# dg-bogus regexp comment [{ target/xfail selector } [{.|0|linenum}]]\n+#\tindicate a bogus error message <regexp> use to occur here\n+#\t(the test fails if it does occur)\n+#\n+# dg-build regexp comment [{ target/xfail selector }]\n+#\tindicate the build use to fail for some reason\n+#\t(errors covered here include bad assembler generated, tool crashes,\n+#\tand link failures)\n+#\t(the test fails if it does occur)\n+#\n+# dg-excess-errors comment [{ target/xfail selector }]\n+#\tindicate excess errors are expected (any line)\n+#\t(this should only be used sparingly and temporarily)\n+#\n+# dg-output regexp [{ target selector }]\n+#\tindicate the expected output of the program is <regexp>\n+#\t(there may be multiple occurrences of this, they are concatenated)\n+#\n+# dg-final { tcl code }\n+#\tadd some tcl code to be run at the end\n+#\t(there may be multiple occurrences of this, they are concatenated)\n+#\t(unbalanced braces must be \\-escaped)\n+#\n+# \"{ target selector }\" is a list of expressions that determine whether the\n+# test succeeds or fails for a particular target, or in some cases whether the\n+# option applies for a particular target.  If the case of `dg-do' it specifies\n+# whether the test case is even attempted on the specified target.\n+#\n+# The target selector is always optional.  The format is one of:\n+#\n+# { xfail *-*-* ... } - the test is expected to fail for the given targets\n+# { target *-*-* ... } - the option only applies to the given targets\n+#\n+# At least one target must be specified, use *-*-* for \"all targets\".\n+# At present it is not possible to specify both `xfail' and `target'.\n+# \"native\" may be used in place of \"*-*-*\".\n+\n+Example 1: Testing compilation only\n+// { dg-do compile }\n+\n+Example 2: Testing for expected warnings on line 36, which all targets fail\n+// { dg-warning \"string literals\" \"\" { xfail *-*-* } 36\n+\n+Example 3: Testing for expected warnings on line 36\n+// { dg-warning \"string literals\" \"\" { target *-*-* } 36\n+\n+Example 4: Testing for compilation errors on line 41\n+// { dg-do compile }\n+// { dg-error \"no match for\" \"\" { target *-*-* } 41 }\n+</pre>\n+\n+   <p>\n+    More examples can be found in the libstdc++-v3/testsuite/*/*.cc files.\n+   </p>\n+\n+<hr />\n+<h2><a name=\"check\">Options for running the tests</a></h2>\n+\n+   <p> There are several ways to run the testsuite. There are two\n+   harnesses, one using dejagnu and one using bash. In addition, there\n+   is a special rule for checking the ABI of the shared library.\n+   </p>\n+\n+   <p>You can check the status of the build without installing it\n+   using the dejagnu harness, much like the rest of the gcc tools.</p>\n+   <p>\n+   <pre> make check</pre> in the <em>libbuilddir</em> directory.</p>\n+   <p>or</p>\n+   <p><pre> make check-target-libstdc++-v3</pre> in the\n+   <em>gccbuilddir</em> directory.</p>\n+\n+   <p>\n+      These commands are equivalent and will create a 'testsuite'\n+      directory underneath <em>libbuilddir</em> containing the results\n+      of the tests. Two results files will be generated: <em>\n+      libstdc++-v3.sum</em>, which is a PASS/FAIL summary for each\n+      test, and <em>libstdc++.log</em> which is a log of the exact\n+      command line passed to the compiler, the compiler output, and\n+      the executable output (if any). In addition, four files are\n+      generated that determine what test files are run. These files\n+      are:\n+   </p>\n+\n+   <ul>\n+     <li>\n+     <em>testsuite_files </em>\n+     <p> This is a list of all the test cases that will be run. Each\n+      test case is on a separate line, given with an absolute path\n+      from the <em>libsrcdir/testsuite</em> directory.\n+     </p>\n+     </li>\n+\n+     <li>\n+     <em>testsuite_files_interactive </em>\n+     <p> This is a list of all the interactive test cases, using the\n+     same format as the file list above. These tests are not run by default.\n+     </p>\n+     </li>\n+\n+     <li>\n+     <em>testsuite_files_performance</em>\n+     <p> This is a list of all the performance test cases, using the\n+     same format as the file list above. These tests are not run by default.\n+     </p>\n+     </li>\n+\n+     <li>\n+     <em>testsuite_wchar_t </em>\n+     <p> This file indicates that the host system can run the wchar_t\n+     tests, and corresponds to the macro definition <code>\n+     _GLIBCPP_USE_WCHAR_T</code> in the file c++config.h.\n+     </p>\n+     </li>\n+    </ul>\n+\n+<p>\n+To debug the dejagnu test harness during runs, try invoking with a\n+specific argument to the variable RUNTESTFLAGS, as below.\n+</p>\n+\n+<pre>\n+make check-target-libstdc++-v3 RUNTESTFLAGS=\"-v\"\n+</pre>\n+or\n+<pre>\n+make check-target-libstdc++-v3 RUNTESTFLAGS=\"-v -v\"\n+</pre>\n+\n+There are two ways to run on a simulator: set up DEJAGNU to point to a\n+specially crafted site.exp, or pass down --target_board flags.\n+\n+Example flags to pass down for various embedded builds are as follows:\n+\n+<pre>\n+--target=powerpc-eabism (libgloss/sim)\n+make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=powerpc-sim\"\n+\n+--target=calmrisc32 (libgloss/sid)\n+make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=calmrisc32-sid\"\n+\n+--target=xscale-elf (newlib/sim)\n+make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=arm-sim\"\n+</pre>\n+   \n+   <p> In addition, there are some testing options that are mostly of\n+   interest to library maintainers and system integrators. As such,\n+   these tests may not work on all cpu and host combinations, and must\n+   be executed in the <em>libbuilddir</em> directory.</p> These options\n+   include, but are not necessarily limited to, the following:\n+   </p>\n+\n+   <p>\n+   The library can also be tested using a bash script, instead of\n+   the default dejagnu test harness.\n+   </p> \n+   <pre>\n+   make check-script</pre>\n+   <p>\n+      These commands use the generated test_file lists as above, but\n+      run all the tests using both shared and static linking, and in\n+      addition provide some additional diffing of expected output\n+      files for the input/output tests. (This added diff may or may\n+      not be useful or necessary at the moment.) In addition, these\n+      tests provide size information for all the generated test cases,\n+      so that size data for new compiler or linker features can be\n+      collected. At one time timing information was attempted, so that\n+      compile speeds, link speeds, etc. could be measured, however at\n+      the moment all timing information is currently disabled.\n+   </p>\n+\n+   <pre>\n+   make check-script-install</pre>\n+   <p> As directly above, but tests an installed library, not the\n+      library and compiler in the build tree.\n+   </p>\n+\n+   <pre>\n+   make check-abi</pre>\n+   <p>The library ABI can be tested. This involves testing the shared\n+   library against an ABI-defining previous version.</p>\n+\n+   <p>\n+      We are interested in any strange failures of the\n+      testsuite; please see <a href=\"faq/index.html#2_4\">FAQ 2.4</a>\n+      for which files to examine.\n+   </p>\n+\n+<hr />\n+<h2><a name=\"future\">Future</a></h2>\n+\n+<p>\n+Shared runs need to be implemented, for targets that support shared libraries.\n+</p>\n+\n+<p>\n+Diffing of expected output to standard streams needs to be finished off.\n+</p>\n+\n+<p>\n+The V3 testing framework supports, or will eventually support,\n+additional keywords for the purpose of easing the job of writing\n+test cases.  All V3-keywords are of the form @xxx@.  Currently plans\n+for supported keywords include:\n+</p>\n+\n+  @require@ <files>\n+      The existence of <files> is essential for the test to complete\n+      successfully.  For example, a test case foo.C using bar.baz as\n+      input file could say\n+\t    // @require@ bar.baz\n+      The special variable % stands for the rootname, e.g. the\n+      file-name without its `.C' extension.  Example of use (taken\n+      verbatim from 27_io/filebuf.cc)\n+\t   // @require@ %-*.tst %-*.txt\n+\n+  @diff@ <first-list> <second-list>\n+      After the test case compiles and ran successfully, diff\n+      <first-list> against <second-list>, these lists should have the\n+      same length.  The test fails if diff returns non-zero a pair of\n+      files.\n+\n+<!-- ####################################################### -->\n+\n+<hr />\n+<p class=\"fineprint\"><em>\n+See <a href=\"17_intro/license.html\">license.html</a> for copying conditions.\n+Comments and suggestions are welcome, and may be sent to\n+<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n+</em></p>\n+\n+\n+</body>\n+</html>"}, {"sha": "07ff9fef4f888d4cef1ec7e402c3e343747fde9b", "filename": "libstdc++-v3/testsuite/README", "status": "removed", "additions": 0, "deletions": 207, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f737a52d03639a15f3fa1acbe63945d97976c08c/libstdc%2B%2B-v3%2Ftestsuite%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f737a52d03639a15f3fa1acbe63945d97976c08c/libstdc%2B%2B-v3%2Ftestsuite%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FREADME?ref=f737a52d03639a15f3fa1acbe63945d97976c08c", "patch": "@@ -1,207 +0,0 @@\n-We're in the process of converting the existing testsuite machinery to\n-use the new style DejaGnu framework.  Eventually, we'll abandon\n-../mkcheck.in in favor of this new testsuite framework.\n-\n-// 1: Thoughts on naming test cases, and structuring them.\n-The testsuite directory has been divided into 11 directories, directly\n-correlated to the relevant chapters in the standard. For example, the\n-directory testsuite/21_strings contains tests related to \"Chapter 21,\n-Strings library\" in the C++ standard.\n-\n-So, the first step in making a new test case is to choose the correct\n-directory. The second item is seeing if a test file exists that tests\n-the item in question. Generally, within chapters test files are named\n-after the section headings in ISO 14882, the C++ standard. For instance, \n-\n-21.3.7.9 Inserters and Extractors\n-\n-Has a related test case:\n-21_strings/inserters_extractors.cc\n-\n-Not so hard. Some time, the words \"ctor\" and \"dtor\" are used instead\n-of \"construct\", \"constructor\", \"cons\", \"destructor\", etc. Other than\n-that, the naming seems mostly consistent. If the file exists, add a\n-test to it. If it does not, then create a new file. All files are\n-copyright the FSF, and GPL'd: this is very important. \n-\n-In addition, some of the locale and io code tests different\n-instantiating types: thus, 'char' or 'wchar_t' is appended to the name\n-as constructed above.\n-\n-Also, some test files are negative tests. That is, they are supposed\n-to fail (usually this involves making sure some kind of construct gets\n-an error when it's compiled.) These test files have 'neg' appended to\n-the name as constructed above.\n-\n-Inside a test file, the plan is to test the relevant parts of the\n-standard, and then add specific regressions as additional test\n-functions, ie test04() can represent a specific regression noted in\n-GNATS. Once test files get unwieldy or too big, then they should be\n-broken up into multiple sub-categories, hopefully intelligently named\n-after the relevant (and more specific) part of the standard.\n-\n-\n-// 2: How to write a test case, from a dejagnu perspective\n-As per the dejagnu instructions, always return 0 from main to indicate\n-success.\n-\n-Basically, a test case contains dg-keywords (see dg.exp) indicating\n-what to do and what kinds of behaviour are to be expected.  New\n-testcases should be written with the new style DejaGnu framework in\n-mind.\n-\n-To ease transition, here is the list of dg-keyword documentation\n-lifted from dg.exp -- eventually we should improve DejaGnu\n-documentation, but getting checkin account currently demands Pyrrhic\n-effort. \n-\n-# The currently supported options are:\n-#\n-# dg-prms-id N\n-#\tset prms_id to N\n-#\n-# dg-options \"options ...\" [{ target selector }]\n-#\tspecify special options to pass to the tool (eg: compiler)\n-#\n-# dg-do do-what-keyword [{ target/xfail selector }]\n-#\t`do-what-keyword' is tool specific and is passed unchanged to\n-#\t${tool}-dg-test.  An example is gcc where `keyword' can be any of:\n-#\tpreprocess|compile|assemble|link|run\n-#\tand will do one of: produce a .i, produce a .s, produce a .o,\n-#\tproduce an a.out, or produce an a.out and run it (the default is\n-#\tcompile).\n-#\n-# dg-error regexp comment [{ target/xfail selector } [{.|0|linenum}]]\n-#\tindicate an error message <regexp> is expected on this line\n-#\t(the test fails if it doesn't occur)\n-#\tLinenum=0 for general tool messages (eg: -V arg missing).\n-#\t\".\" means the current line.\n-#\n-# dg-warning regexp comment [{ target/xfail selector } [{.|0|linenum}]]\n-#\tindicate a warning message <regexp> is expected on this line\n-#\t(the test fails if it doesn't occur)\n-#\n-# dg-bogus regexp comment [{ target/xfail selector } [{.|0|linenum}]]\n-#\tindicate a bogus error message <regexp> use to occur here\n-#\t(the test fails if it does occur)\n-#\n-# dg-build regexp comment [{ target/xfail selector }]\n-#\tindicate the build use to fail for some reason\n-#\t(errors covered here include bad assembler generated, tool crashes,\n-#\tand link failures)\n-#\t(the test fails if it does occur)\n-#\n-# dg-excess-errors comment [{ target/xfail selector }]\n-#\tindicate excess errors are expected (any line)\n-#\t(this should only be used sparingly and temporarily)\n-#\n-# dg-output regexp [{ target selector }]\n-#\tindicate the expected output of the program is <regexp>\n-#\t(there may be multiple occurrences of this, they are concatenated)\n-#\n-# dg-final { tcl code }\n-#\tadd some tcl code to be run at the end\n-#\t(there may be multiple occurrences of this, they are concatenated)\n-#\t(unbalanced braces must be \\-escaped)\n-#\n-# \"{ target selector }\" is a list of expressions that determine whether the\n-# test succeeds or fails for a particular target, or in some cases whether the\n-# option applies for a particular target.  If the case of `dg-do' it specifies\n-# whether the testcase is even attempted on the specified target.\n-#\n-# The target selector is always optional.  The format is one of:\n-#\n-# { xfail *-*-* ... } - the test is expected to fail for the given targets\n-# { target *-*-* ... } - the option only applies to the given targets\n-#\n-# At least one target must be specified, use *-*-* for \"all targets\".\n-# At present it is not possible to specify both `xfail' and `target'.\n-# \"native\" may be used in place of \"*-*-*\".\n-\n-Example 1: Testing compilation only\n-(to just have a testcase do compile testing, without linking and executing)\n-// { dg-do compile }\n-\n-Example 2: Testing for expected warings on line 36\n-// { dg-warning \"string literals\" \"\" { xfail *-*-* } 36\n-\n-Example 3: Testing for compilation errors on line 41\n-// { dg-do compile }\n-// { dg-error \"no match for\" \"\" { xfail *-*-* } 41 }\n-\n-More examples can be found in the libstdc++-v3/testsuite/*/*.cc files.\n-\n-\n-// 3: Test harness notes, invocation, and debugging.\n-Configuring the dejagnu harness to work with libstdc++-v3 in a cross\n-compilation environment has been maddening. However, it does work now,\n-and on a variety of platforms. Including solaris, linux, and cygwin.\n-\n-To debug the test harness during runs, try invoking with\n-\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"-v\"\n-or\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"-v -v\"\n-\n-There are two ways to run on a simulator: set up DEJAGNU to point to a\n-specially crafted site.exp, or pass down --target_board flags.\n-\n-Example flags to pass down for various embedded builds are as follows:\n-\n---target=powerpc-eabism (libgloss/sim)\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=powerpc-sim\"\n-\n---target=calmrisc32 (libgloss/sid)\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=calmrisc32-sid\"\n-\n---target=xscale-elf (newlib/sim)\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=arm-sim\"\n-\n-\n-// 4: Future plans, to be done\n-Shared runs need to be implemented, for targets that support shared libraries.\n-\n-Diffing of expected output to standard streams needs to be finished off.\n-\n-The V3 testing framework supports, or will eventually support,\n-additional keywords for the purpose of easing the job of writing\n-testcases.  All V3-keywords are of the form @xxx@.  Currently plans\n-for supported keywords include:\n-\n-  @require@ <files>\n-      The existence of <files> is essential for the test to complete\n-      successfully.  For example, a testcase foo.C using bar.baz as\n-      input file could say\n-\t    // @require@ bar.baz\n-      The special variable % stands for the rootname, e.g. the\n-      file-name without its `.C' extension.  Example of use (taken\n-      verbatim from 27_io/filebuf.cc)\n-\t   // @require@ %-*.tst %-*.txt\n-\n-  @diff@ <first-list> <second-list>\n-      After the testcase compiles and ran successfully, diff\n-      <first-list> against <second-list>, these lists should have the\n-      same length.  The test fails if diff returns non-zero a pair of\n-      files.\n-\n-Current testing problems with cygwin-hosted tools:\n-\n-There are two known problems which I have not addressed.  The first is\n-that when testing cygwin hosted tools from the unix build dir, it does\n-the wrong thing building the wrapper program (testglue.c) because host\n-and target are the same in site.exp (host and target are the same from\n-the perspective of the target libraries)\n-\n-Problem number two is a little more annoying.  In order for me to make\n-v3 testing work on Windows, I had to tell dejagnu to copy over the\n-debug_assert.h file to the remote host and then set the includes to\n--I./.  This is how all the other tests like this are done so I didn't\n-think much of it.  However, this had some unfortunate results due to\n-gcc having a testcase called \"limits\" and C++ having an include file\n-called \"limits\".  The gcc \"limits\" binary was in the temporary dir\n-when the v3 tests were being built.  As a result, the gcc \"limits\"\n-binary was being #included rather than the intended one.  The only way\n-to fix this is to go through the testsuites and make sure binaries are\n-deleted on the remote host when testing is done with them.  That is a\n-lot more work than I want to do so I worked around it by cleaning out\n-D:\\kermit on compsognathus and rerunning tests."}, {"sha": "6a4351c21e5f6bb6e945774f42d91b08b68f79a9", "filename": "libstdc++-v3/testsuite/lib/libstdc++-v3-dg.exp", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp?ref=ca5e1be83df4629faf3bccabcc8e712447ac390e", "patch": "@@ -233,6 +233,7 @@ proc v3-compute-tests { } {\n \n     set tests_file \"${outdir}/testsuite_files\"\n     set tests_file_inter \"${outdir}/testsuite_files_interactive\"\n+    set tests_file_perf \"${outdir}/testsuite_files_performance\"\n     set sfiles \"\"\n \n     # If there is a testsuite_file, use it. \n@@ -281,6 +282,21 @@ proc v3-compute-tests { } {\n     }\n     set sfiles ${restwo}\n \n+    # Filter performance analysis tests.\n+    # Use special rules to run these tests.\n+    set resthree {}\n+    set sfiles_perf {}\n+    foreach i $sfiles {\n+\tif [regexp \"performance\" $i] {\n+\t    verbose \"element performance list is $i\"\n+\t    lappend sfiles_perf $i\n+\t} else {\n+\t    verbose \"element non-performancet list is $i\"\n+\t    lappend resthree $i\n+\t}\n+    }\n+    set sfiles ${resthree}\n+\n     # Write out testsuite_files.\n     set f [open $tests_file \"w\"]\n     foreach t $sfiles {\n@@ -294,6 +310,13 @@ proc v3-compute-tests { } {\n \tputs $f $t\n     }\n     close $f\n+\n+    # Write out testsuite_files_performance.\n+    set f [open $tests_file_perf \"w\"]\n+    foreach t $sfiles_perf {\n+\tputs $f $t\n+    }\n+    close $f\n }\n \n proc v3-list-tests { filename } {"}, {"sha": "a70eda5bd25041201116c08b030d64d08e4676ab", "filename": "libstdc++-v3/testsuite/performance/allocator.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fallocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fallocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fallocator.cc?ref=ca5e1be83df4629faf3bccabcc8e712447ac390e", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <list>\n+\n+// Primarily a test of the default allocator.\n+// http://gcc.gnu.org/ml/libstdc++/2001-05/msg00105.html\n+int main ()\n+{\n+  std::list<int> List;\n+  for (int i = 0; i < 10000000; ++i )\n+    List.push_back( int() );\n+  return 0;\n+}\n+"}, {"sha": "4a4277634cdbee7149d272c2c99d1df3534d867b", "filename": "libstdc++-v3/testsuite/performance/complex_norm.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fcomplex_norm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fcomplex_norm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fcomplex_norm.cc?ref=ca5e1be83df4629faf3bccabcc8e712447ac390e", "patch": "@@ -0,0 +1,59 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <complex>\n+\n+// based on libstdc++/5730, use --fast-math\n+int main()\n+{\n+  typedef std::complex<double> complex_type;\n+  complex_type u[2048];\n+\n+  for (int i = 0; i < 2048; ++i)\n+    u[i] = 1.0;\n+\n+  for (int i = 0; i < 2000; ++i) \n+    {\n+      complex_type * p = u;\n+      for (int j = 0; j < 2048; ++j) \n+\t{\n+#if 1\n+\t  double u2 = norm(*p);\n+#else\n+\t  // Shouldn't be slower than the above.\n+\t  double ur = real(*p); \n+\t  double ui = imag(*p);\n+\t  double u2 = ur * ur + ui * ui;\n+#endif\n+\t  double t = u2 * 0.1;\n+\t  *p *= complex_type(cos(t), sin(t));\n+\t  ++p;\n+\t}\n+    }\n+  return 0;\n+}\n+"}, {"sha": "42e44efdd862ca695f5be1dbfc09aa821bf0004c", "filename": "libstdc++-v3/testsuite/performance/cout_insert_int.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fcout_insert_int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fcout_insert_int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fcout_insert_int.cc?ref=ca5e1be83df4629faf3bccabcc8e712447ac390e", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <iostream>\n+\n+// libstdc++/7076\n+int main() \n+{\n+  for (int i = 0; i < 150000; i++)\n+    std::cout << i << '\\n';\n+  return 0;\n+} "}, {"sha": "0ea0cfda3101b4cbc06c9805d86babcf85b6db57", "filename": "libstdc++-v3/testsuite/performance/fstream_seek_write.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffstream_seek_write.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffstream_seek_write.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffstream_seek_write.cc?ref=ca5e1be83df4629faf3bccabcc8e712447ac390e", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <fstream>\n+\n+// libstdc++/10672\n+int main() \n+{\n+  using namespace std;\n+  fstream s(\"tmp_perf_seek\", ios::binary | ios::in | ios::out | ios::trunc);\n+  if (s.good())\n+    {\n+      for (int i = 0; i < 300000; i++) \n+\t{\n+\t  s.seekp(0);\n+\t  s.write((char *) & i, sizeof(int));\n+\t  s.seekp(sizeof(int));\n+\t  s.write((char *) & i, sizeof(int));\n+\t}\n+    }\n+  return 0;\n+}"}, {"sha": "f0a9131983ec7edfcbe2d5bc6f13c0b153b0c866", "filename": "libstdc++-v3/testsuite/performance/ifstream_getline.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fifstream_getline.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fifstream_getline.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fifstream_getline.cc?ref=ca5e1be83df4629faf3bccabcc8e712447ac390e", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <fstream>\n+\n+// libstdc++/5001 (100,000 line input file)\n+int main ()\n+{\n+  using namespace std;\n+  const char* name = \"/usr/share/dict/linux.words\";\n+\n+  ifstream in(name);\n+  char buffer[BUFSIZ];\n+  while(!in.eof()) \n+    {\n+      in.getline(buffer, BUFSIZ);\n+    }\n+}"}, {"sha": "f0fc51458ccf1e6b8463e718b7bf4a2f4e2bd853", "filename": "libstdc++-v3/testsuite/performance/map_create_fill.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fmap_create_fill.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fmap_create_fill.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fmap_create_fill.cc?ref=ca5e1be83df4629faf3bccabcc8e712447ac390e", "patch": "@@ -0,0 +1,49 @@\n+// 2003-03-01 gp dot bolton at computer dot org\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+static bool test = true;\n+\n+static void create_and_fill(const unsigned int n)\n+{\n+  typedef std::map<int, int>  Map;\n+  Map                         m;\n+  \n+  for (unsigned int i = 0; i < n; ++i)\n+    m[i] = i;\n+  VERIFY ( m.size() == n );\n+}\n+\n+void test01()\n+{\n+  const unsigned n = 10000000;\n+  \n+  for (unsigned int i = 0; i < n; ++i)\n+    create_and_fill( 0 );\n+}\n+\n+// http://gcc.gnu.org/ml/libstdc++/2003-03/msg00000.html\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0fefdd4387718d9a11c9704985e730c599f4d625", "filename": "libstdc++-v3/testsuite/performance/ofstream_insert_float.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_float.cc?ref=ca5e1be83df4629faf3bccabcc8e712447ac390e", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <fstream>\n+\n+// based on libstdc++/8761 poor fstream performance (converted to float)\n+int main() \n+{\n+  std::ofstream out(\"tmp_perf_float.txt\");\n+  for (int i = 0; i < 10000000; ++i)\n+    {\n+      float f = static_cast<float>(i);\n+      out << f << \"\\n\";\n+    }\n+  return 0;\n+};"}, {"sha": "69357f390841a9f073efc3b0546542c5df7d664d", "filename": "libstdc++-v3/testsuite/performance/ofstream_insert_int.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_int.cc?ref=ca5e1be83df4629faf3bccabcc8e712447ac390e", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <fstream>\n+\n+// libstdc++/8761 poor fstream performance\n+int main() \n+{\n+  std::ofstream out(\"tmp_perf_int.txt\");\n+  for (int i = 0; i < 10000000; ++i)\n+    out << i << \"\\n\";\n+  return 0;\n+};"}, {"sha": "e385eb752b2142ab52f7879a35aceebbec6af09f", "filename": "libstdc++-v3/testsuite/performance/string_append.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fstring_append.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e1be83df4629faf3bccabcc8e712447ac390e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fstring_append.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fstring_append.cc?ref=ca5e1be83df4629faf3bccabcc8e712447ac390e", "patch": "@@ -0,0 +1,83 @@\n+ // Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ctime>\n+#include <iostream>\n+#include <string>\n+\n+using namespace std;\n+\n+void\n+test_append_char(int how_much)\n+{\n+  string buf; // no preallocation\n+  for (int i = 0; i < how_much; ++i)\n+     buf.append(static_cast<string::size_type>(1) , 'x');\n+}\n+\n+void\n+test_append_string(int how_much)\n+{\n+  string s(static_cast<string::size_type>(1) , 'x');\n+  string buf; // no preallocation\n+  for (int i = 0; i < how_much; ++i)\n+     buf.append(s);\n+}\n+\n+void \n+run_benchmark1(int how_much)\n+{\n+  clock_t t0 = clock();\n+  test_append_char(how_much);\n+  clock_t t1 = clock();\n+  cout << \"Execution time of \" << how_much\n+       << \" string::append(char) calls: \" \n+       << (static_cast<float>(t1 - t0)/CLOCKS_PER_SEC) << \" sec.\"<< endl;\n+}\n+\n+void \n+run_benchmark2(int how_much)\n+{\n+  clock_t t0 = clock();\n+  test_append_string(how_much);\n+  clock_t t1 = clock();\n+  cout << \"Execution time of \" << how_much\n+       << \" string::append(const string&) calls: \" \n+       << (static_cast<float>(t1 - t0)/CLOCKS_PER_SEC) << \" sec.\" << endl;\n+}\n+\n+// libstdc++/5380\n+// libstdc++/4960\n+int main()\n+{\n+  run_benchmark1(10000);\n+  run_benchmark2(10000);\n+  run_benchmark1(100000);\n+  run_benchmark2(100000);\n+  run_benchmark1(1000000);\n+  run_benchmark2(1000000);\n+}"}]}