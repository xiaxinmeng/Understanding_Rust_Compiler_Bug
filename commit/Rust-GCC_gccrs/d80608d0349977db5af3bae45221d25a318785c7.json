{"sha": "d80608d0349977db5af3bae45221d25a318785c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgwNjA4ZDAzNDk5NzdkYjVhZjNiYWU0NTIyMWQyNWEzMTg3ODVjNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-12-04T19:33:55Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-12-04T19:33:55Z"}, "message": "* ChangeLog: Fix whitespace.\n\nFrom-SVN: r205676", "tree": {"sha": "1dc8e8652d2deebca0f913bf86f044f35ed32a46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dc8e8652d2deebca0f913bf86f044f35ed32a46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d80608d0349977db5af3bae45221d25a318785c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80608d0349977db5af3bae45221d25a318785c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d80608d0349977db5af3bae45221d25a318785c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80608d0349977db5af3bae45221d25a318785c7/comments", "author": null, "committer": null, "parents": [{"sha": "565839ae124b82b6eba1d0f8053271df0f7c4c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/565839ae124b82b6eba1d0f8053271df0f7c4c2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/565839ae124b82b6eba1d0f8053271df0f7c4c2a"}], "stats": {"total": 81, "additions": 32, "deletions": 49}, "files": [{"sha": "a4a1e0a6d2f73a59f2d276d1c532d84e5c285bde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 49, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80608d0349977db5af3bae45221d25a318785c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80608d0349977db5af3bae45221d25a318785c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d80608d0349977db5af3bae45221d25a318785c7", "patch": "@@ -42,8 +42,7 @@\n 2013-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/59355\n-\t* ipa-devirt.c (gate_ipa_devirt): Return false if\n-\t!flag_devirtualize.\n+\t* ipa-devirt.c (gate_ipa_devirt): Return false if !flag_devirtualize.\n \t* opts.c (common_handle_option): Fix comment spelling.\n \n 2013-12-04  Yufeng Zhang  <yufeng.zhang@arm.com>\n@@ -88,9 +87,9 @@\n \n 2013-12-03  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n-        * config/avr/avr.c (avr_option_override): Warn if asked to generate\n-        position independent code.\n-        * config/avr/avr.h: Modify LINK_SPEC to reject -shared.\n+\t* config/avr/avr.c (avr_option_override): Warn if asked to generate\n+\tposition independent code.\n+\t* config/avr/avr.h: Modify LINK_SPEC to reject -shared.\n \n 2013-12-03   H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -102,8 +101,7 @@\n 2013-12-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/56344\n-\t* calls.c (expand_call): Disallow passing huge arguments\n-\tby value.\n+\t* calls.c (expand_call): Disallow passing huge arguments by value.\n \n 2013-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -174,9 +172,8 @@\n \t(ix86_tune_memset_strategy): Ditto.\n \t(ix86_tune_no_default): Ditto.\n \t(ix86_veclibabi_type): Ditto.\n-\t* config/i386/i386.c \n-\t(function_specific_save): Save the above variables\n-\tin gcc_options to cl_target_option.\n+\t* config/i386/i386.c (function_specific_save): Save the above\n+\tvariables in gcc_options to cl_target_option.\n \t(function_specific_restore): Do the reverse done in\n \tfunction_specific_save.\n \t(ix86_valid_target_attribute_tree): Change ix86_arch_string\n@@ -193,9 +190,8 @@\n 2013-12-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/59358\n-\t* tree-vrp.c (union_ranges): To check for the partially\n-\toverlapping ranges or adjacent ranges, also compare *vr0max\n-\twith vr1max.\n+\t* tree-vrp.c (union_ranges): To check for the partially overlapping\n+\tranges or adjacent ranges, also compare *vr0max with vr1max.\n \n 2013-12-02  Sterling Augustine \u00a0<saugustine@google.com>\n \n@@ -239,9 +235,8 @@\n \tPR middle-end/59199\n \t* tree-ssa-operands.c (opf_implicit): Remove.\n \t(opf_address_taken): New flag.\n-\t(get_expr_operands): Remove early out, pass down\n-\topf_address_taken for ADDR_EXPRs, add a use operand only\n-\tfor non-opf_address_taken bases.\n+\t(get_expr_operands): Remove early out, pass down opf_address_taken for\n+\tADDR_EXPRs, add a use operand only for non-opf_address_taken bases.\n \t(get_indirect_ref_operands): Rename to ...\n \t(get_mem_ref_operands): ... this.\n \t(get_asm_expr_operands): Rename to ...\n@@ -265,7 +260,7 @@\n \n 2013-12-02 Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n \n-\t* loop-unroll.c (decide_unroll_constant_iterations): Check macro \n+\t* loop-unroll.c (decide_unroll_constant_iterations): Check macro\n \tTARGET_LOOP_UNROLL_ADJUST while deciding unroll factor.\n \n 2013-12-01  Eric Botcazou  <ebotcazou@adacore.com>\n@@ -338,15 +333,14 @@\n \n 2013-11-29  Yvan Roux  <yvan.roux@linaro.org>\n \n-\t * config/arm/arm.md (store_minmaxsi): Use only when\n+\t* config/arm/arm.md (store_minmaxsi): Use only when\n \toptimize_function_for_size_p.\n \n 2013-11-29  Jakub Jelinek  <jakub@redhat.com>\n \t    Yury Gribov  <y.gribov@samsung.com>\n \n \tPR sanitizer/59063\n-\t* config/gnu-user.h: Removed old code for setting up sanitizer\n-\tlibs.\n+\t* config/gnu-user.h: Removed old code for setting up sanitizer libs.\n \t* gcc.c: Using libsanitizer spec instead of explicit libs.\n \n 2013-11-29  Ilya Enkovich  <ilya.enkovich@intel.com>\n@@ -629,17 +623,14 @@\n \t(enum omp_clause_depend_kind): Add OMP_CLAUSE_DEPEND_LAST.\n \t(enum omp_clause_map_kind): Add OMP_CLAUSE_MAP_LAST.\n \t(enum omp_clause_proc_bind_kind): Add OMP_CLAUSE_PROC_BIND_LAST.\n-\t* lto-streamer-out.c (lto_is_streamable): Allow streaming\n-\tOMP_CLAUSE.\n+\t* lto-streamer-out.c (lto_is_streamable): Allow streaming OMP_CLAUSE.\n \t(DFS_write_tree_body): Handle OMP_CLAUSE.\n-\t* tree-streamer-out.c (pack_ts_omp_clause_value_fields): New\n-\tfunction.\n+\t* tree-streamer-out.c (pack_ts_omp_clause_value_fields): New function.\n \t(streamer_pack_tree_bitfields): Call it for OMP_CLAUSE.\n \t(write_ts_omp_clause_tree_pointers): New function.\n \t(streamer_write_tree_body): Call it for OMP_CLAUSE.\n \t(streamer_write_tree_header): For OMP_CLAUSE stream OMP_CLAUSE_CODE.\n-\t* tree-streamer-in.c (unpack_ts_omp_clause_value_fields): New\n-\tfunction.\n+\t* tree-streamer-in.c (unpack_ts_omp_clause_value_fields): New function.\n \t(unpack_value_fields): Call it for OMP_CLAUSE.\n \t(streamer_alloc_tree): Handle OMP_CLAUSE.\n \t(lto_input_ts_omp_clause_tree_pointers): New function.\n@@ -660,8 +651,7 @@\n 2013-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/59327\n-\t* cfgexpand.c (expand_used_vars): Avoid warning on 32-bit\n-\tHWI hosts.\n+\t* cfgexpand.c (expand_used_vars): Avoid warning on 32-bit HWI hosts.\n \n 2013-11-28  Vladimir Makarov  <vmakarov@redhat.com>\n \n@@ -710,8 +700,7 @@\n \tlower.  Switch off lra_in_progress temporarily to generate regs\n \tinvolved into elimination.\n \t(lra_init_elimination): Rename to init_elimination.  Make it\n-\tstatic.  Set up insn sp offset, check the offsets at the end of\n-\tBBs.\n+\tstatic.  Set up insn sp offset, check the offsets at the end of BBs.\n \t(process_insn_for_elimination): Add parameter.  Pass its value to\n \teliminate_regs_in_insn.\n \t(lra_eliminate): : Add parameter.  Pass its value to\n@@ -834,8 +823,8 @@\n \n 2013-11-27  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \n-\t* fold-const.c (int_const_binop_1): Make INT_MIN % -1 return 0 with the\n-\toverflow bit set.\n+\t* fold-const.c (int_const_binop_1): Make INT_MIN % -1 return 0 with\n+\tthe overflow bit set.\n \n 2013-11-27  Richard Biener  <rguenther@suse.de>\n \n@@ -909,8 +898,7 @@\n \t(make_pass_omp_simd_clone): New function.\n \t* passes.def (pass_omp_simd_clone): New.\n \t* target.def (TARGET_SIMD_CLONE_COMPUTE_VECSIZE_AND_SIMDLEN,\n-\tTARGET_SIMD_CLONE_ADJUST, TARGET_SIMD_CLONE_USABLE): New target\n-\thooks.\n+\tTARGET_SIMD_CLONE_ADJUST, TARGET_SIMD_CLONE_USABLE): New target hooks.\n \t* target.h (struct cgraph_node, struct cgraph_simd_node): Declare.\n \t* tree-core.h (OMP_CLAUSE_LINEAR_VARIABLE_STRIDE): Document.\n \t* tree.h (OMP_CLAUSE_LINEAR_VARIABLE_STRIDE): Define.\n@@ -923,8 +911,8 @@\n \tthe call arguments or in lhs.\n \t* tree-vect-loop.c (vect_determine_vectorization_factor): Handle\n \tcalls with no lhs.\n-\t(vect_transform_loop): Allow NULL STMT_VINFO_VECTYPE for calls without\n-\tlhs.\n+\t(vect_transform_loop): Allow NULL STMT_VINFO_VECTYPE for calls\n+\twithout lhs.\n \t* tree-vectorizer.h (enum stmt_vec_info_type): Add\n \tcall_simd_clone_vec_info_type.\n \t(struct _stmt_vec_info): Add simd_clone_fndecl field.\n@@ -1006,10 +994,8 @@\n \t(GSS_OMP_PARALLEL_LAYOUT, gimple_statement_omp_parallel_layout):\n \t...these.\n \t(GSS_OMP_SINGLE, gimple_statement_omp_single): Rename to...\n-\t(GSS_OMP_SINGLE_LAYOUT, gimple_statement_omp_single_layout):\n-\t...these.\n-\t(GSS_OMP_ATOMIC_STORE, gimple_statement_omp_atomic_store): Rename\n-\tto...\n+\t(GSS_OMP_SINGLE_LAYOUT, gimple_statement_omp_single_layout): ...these.\n+\t(GSS_OMP_ATOMIC_STORE, gimple_statement_omp_atomic_store): Rename to...\n \t(GSS_OMP_ATOMIC_STORE_LAYOUT, gimple_statement_omp_atomic_store):\n \t...these.\n \n@@ -1098,8 +1084,7 @@\n \tGIMPLE_OMP_RETURN.\n \t(gimple_resx_region, gimple_resx_set_region): Replace bogus\n \tdowncasts to gimple_statement_eh_ctrl with downcasts to\n-\tgimple_statement_resx, thus requiring that the code be\n-\tGIMPLE_RESX.\n+\tgimple_statement_resx, thus requiring that the code be GIMPLE_RESX.\n \t(gimple_eh_dispatch_region, gimple_eh_dispatch_set_region):\n \tReplace bogus downcasts to const gimple_statement_eh_ctrl with\n \tdowncasts to gimple_statement_eh_dispatch, thus requiring that\n@@ -1198,8 +1183,7 @@\n \t* configure.ac (install_gold_as_default): New.  Set to yes for\n \t--disable-ld or --enable-gold=default.\n \t(gcc_cv_ld_gold_srcdir): New.\n-\t(gcc_cv_ld): Also check in-tree gold if install_gold_as_default\n-\tis yes.\n+\t(gcc_cv_ld): Also check in-tree gold if install_gold_as_default is yes.\n \t(ORIGINAL_LD_BFD_FOR_TARGET): New AC_SUBST.\n \t(ORIGINAL_LD_GOLD_FOR_TARGET): Likewise.\n \t* configure: Regenerated.\n@@ -1289,8 +1273,7 @@\n \n \t* config/aarch64/aarch64-builtins.c\n \t(VAR1): Use new naming scheme for aarch64_builtins.\n-\t(aarch64_builtin_vectorized_function): Use new\n-\taarch64_builtins names.\n+\t(aarch64_builtin_vectorized_function): Use new aarch64_builtins names.\n \n 2013-11-26  Richard Biener  <rguenther@suse.de>\n \n@@ -1346,8 +1329,8 @@\n \n \t* doc/invoke.texi (-mslow-flash-data): Document new option.\n \t* config/arm/arm.opt (mslow-flash-data): New option.\n-\t* config/arm/arm-protos.h (arm_max_const_double_inline_cost): Declare\n-\tit.\n+\t* config/arm/arm-protos.h (arm_max_const_double_inline_cost):\n+\tDeclare it.\n \t* config/arm/arm.h (TARGET_USE_MOVT): Always true when literal pools\n \tare disabled.\n \t(arm_disable_literal_pool): Declare it.\n@@ -1602,7 +1585,7 @@\n \n 2013-11-22  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n-\t* config/i386/i386.c(processor_alias_table): Enable PTA_AES,\n+\t* config/i386/i386.c (processor_alias_table): Enable PTA_AES,\n \tPTA_PCLMUL and PTA_RDRND for Silvermont.\n \t* config/i386/driver-i386.c (host_detect_local_cpu): Set up cpu\n \tfor Silvermont."}]}