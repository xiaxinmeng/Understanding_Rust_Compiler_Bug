{"sha": "d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg4YTUxYjFjYTY2YmFhYzg5ZDU5YjVlMzc5ZWYxYjRmM2Y3OGViNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-22T12:24:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-22T12:24:57Z"}, "message": "[multiple changes]\n\n2009-06-22  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch3.adb: Minor code reorganization (avoid an unnecessary tree\n\tcopy).\n\n2009-06-22  Ed Falis  <falis@adacore.com>\n\n\t* sysdep.c: remove include for nfsLib.h and an NFS specific error\n\tmessage for VxWorks 653 vThreads: not supported by the OS.\n\n\t* gsocket.h: disable sockets for VxWorks 653 vThreads.\n\n2009-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch6.adb: Add ??? comment for bad use of Style_Check\n\n2009-06-22  Matthew Gingell  <gingell@adacore.com>\n\t    Arnaud Charlet  <charlet@adacore.com>\n\n\t* a-stzhas.adb, a-stwiha.adb, impunit.adb, a-swbwha.adb, a-shcain.adb,\n\ts-htable.adb, a-szuzha.adb, a-stunha.adb, a-stboha.adb, a-strhas.adb,\n\tg-spitbo.adb, s-strhas.adb, a-szbzha.adb, s-strhas.ads, Makefile.rtl,\n\ta-swuwha.adb: New unit System.String_Hash.  \n\tRefactor redundant cut and pasted hash functions with instances of a\n\tnew generic hash function.\n\tImplement a new string hashing algorithm which appears in testing to\n\tbe move effective than to previous approach.\n\n\t* gcc-interface/Make-lang.in: Update dependencies.\n\n\t* gcc-interface/Makefile.in: Reindent correctly vms targets.\n\tFix setting of TOOLS_TARGET_PAIRS for bare board platforms.\n\tDisable socket support for Vxworks 653 vThreads.\n\tImprove handling of signals on darwin.\n\t(GNATMAKE_OBJS): Update dependencies.\n\nFrom-SVN: r148789", "tree": {"sha": "2c2f2f3cdeb10d78e9d0a86792f53fb95d5c97cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c2f2f3cdeb10d78e9d0a86792f53fb95d5c97cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/comments", "author": null, "committer": null, "parents": [{"sha": "d58bc084b4b97eb0056a2658604c855fa1775c5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58bc084b4b97eb0056a2658604c855fa1775c5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d58bc084b4b97eb0056a2658604c855fa1775c5f"}], "stats": {"total": 933, "additions": 470, "deletions": 463}, "files": [{"sha": "86b0ae32534f825715be813c6884bbfa0876d1df", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -1,3 +1,30 @@\n+2009-06-22  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch3.adb: Minor code reorganization (avoid an unnecessary tree\n+\tcopy).\n+\n+2009-06-22  Matthew Gingell  <gingell@adacore.com>\n+\n+\t* a-stzhas.adb, a-stwiha.adb, impunit.adb, a-swbwha.adb, a-shcain.adb,\n+\ts-htable.adb, a-szuzha.adb, a-stunha.adb, a-stboha.adb, a-strhas.adb,\n+\tg-spitbo.adb, s-strhas.adb, a-szbzha.adb, s-strhas.ads, Makefile.rtl,\n+\ta-swuwha.adb: New unit System.String_Hash.  \n+\tRefactor redundant cut and pasted hash functions with instances of a\n+\tnew generic hash function.\n+\tImplement a new string hashing algorithm which appears in testing to\n+\tbe move effective than to previous approach.\n+\n+2009-06-22  Ed Falis  <falis@adacore.com>\n+\n+\t* sysdep.c: remove include for nfsLib.h and an NFS specific error\n+\tmessage for VxWorks 653 vThreads: not supported by the OS.\n+\n+\t* gsocket.h: disable sockets for VxWorks 653 vThreads.\n+\n+2009-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch6.adb: Add ??? comment for bad use of Style_Check\n+\n 2009-06-22  Robert Dewar  <dewar@adacore.com>\n \n \t* sinput.adb, sinput.ads (Expr_First_Char, Expr_Last_Char): Replaced"}, {"sha": "ec3b931240f3e3351bcf16a47cb25114d7af38a2", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -213,14 +213,12 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-stunha$(objext) \\\n   a-stwibo$(objext) \\\n   a-stwifi$(objext) \\\n-  a-stwiha$(objext) \\\n   a-stwima$(objext) \\\n   a-stwise$(objext) \\\n   a-stwisu$(objext) \\\n   a-stwiun$(objext) \\\n   a-stzbou$(objext) \\\n   a-stzfix$(objext) \\\n-  a-stzhas$(objext) \\\n   a-stzmap$(objext) \\\n   a-stzsea$(objext) \\\n   a-stzsup$(objext) \\\n@@ -562,6 +560,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-stoele$(objext) \\\n   s-stopoo$(objext) \\\n   s-stratt$(objext) \\\n+  s-strhas$(objext) \\\n   s-ststop$(objext) \\\n   s-soflin$(objext) \\\n   s-memory$(objext) \\"}, {"sha": "8c7ccbef4413d1b1aa322f4141d4250b9aa9d2d2", "filename": "gcc/ada/a-shcain.adb", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fa-shcain.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fa-shcain.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-shcain.adb?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -28,26 +28,14 @@\n ------------------------------------------------------------------------------\n \n with Ada.Characters.Handling; use Ada.Characters.Handling;\n-\n---  Note: source of this algorithm: GNAT.HTable.Hash (g-htable.adb)\n+with System.String_Hash;\n \n function Ada.Strings.Hash_Case_Insensitive\n   (Key : String) return Containers.Hash_Type\n is\n    use Ada.Containers;\n-\n-   Tmp : Hash_Type;\n-\n-   function Rotate_Left\n-     (Value  : Hash_Type;\n-      Amount : Natural) return Hash_Type;\n-   pragma Import (Intrinsic, Rotate_Left);\n-\n+   function Hash is new System.String_Hash.Hash\n+     (Character, String, Hash_Type);\n begin\n-   Tmp := 0;\n-   for J in Key'Range loop\n-      Tmp := Rotate_Left (Tmp, 3) + Character'Pos (To_Lower (Key (J)));\n-   end loop;\n-\n-   return Tmp;\n+   return Hash (To_Lower (Key));\n end Ada.Strings.Hash_Case_Insensitive;"}, {"sha": "97ae52666bf0a2363171ec25a873d037ef0c8bcc", "filename": "gcc/ada/a-stboha.adb", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fa-stboha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fa-stboha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stboha.adb?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -27,25 +27,14 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n---  Note: source of this algorithm: GNAT.HTable.Hash (g-htable.adb)\n+with System.String_Hash;\n \n function Ada.Strings.Bounded.Hash (Key : Bounded.Bounded_String)\n   return Containers.Hash_Type\n is\n    use Ada.Containers;\n-\n-   function Rotate_Left\n-     (Value  : Hash_Type;\n-      Amount : Natural) return Hash_Type;\n-   pragma Import (Intrinsic, Rotate_Left);\n-\n-   Tmp : Hash_Type;\n-\n+   function Hash_Fun is new System.String_Hash.Hash\n+     (Character, String, Hash_Type);\n begin\n-   Tmp := 0;\n-   for J in 1 .. Bounded.Length (Key) loop\n-      Tmp := Rotate_Left (Tmp, 3) + Character'Pos (Bounded.Element (Key, J));\n-   end loop;\n-\n-   return Tmp;\n+   return Hash_Fun (Bounded.To_String (Key));\n end Ada.Strings.Bounded.Hash;"}, {"sha": "f0ee0602f5cd547238d3c5d09255dc24af120565", "filename": "gcc/ada/a-strhas.adb", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fa-strhas.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fa-strhas.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strhas.adb?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -27,23 +27,12 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n---  Note: source of this algorithm: GNAT.HTable.Hash (g-htable.adb)\n+with System.String_Hash;\n \n function Ada.Strings.Hash (Key : String) return Containers.Hash_Type is\n    use Ada.Containers;\n-\n-   function Rotate_Left\n-     (Value  : Hash_Type;\n-      Amount : Natural) return Hash_Type;\n-   pragma Import (Intrinsic, Rotate_Left);\n-\n-   Tmp : Hash_Type;\n-\n+   function Hash is new System.String_Hash.Hash\n+     (Character, String, Hash_Type);\n begin\n-   Tmp := 0;\n-   for J in Key'Range loop\n-      Tmp := Rotate_Left (Tmp, 3) + Character'Pos (Key (J));\n-   end loop;\n-\n-   return Tmp;\n+   return Hash (Key);\n end Ada.Strings.Hash;"}, {"sha": "064a34294ae69fbeeae3a04b65d6098c28f800f2", "filename": "gcc/ada/a-stunha.adb", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fa-stunha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fa-stunha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stunha.adb?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -27,25 +27,14 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n---  Note: source of this algorithm: GNAT.HTable.Hash (g-htable.adb)\n+with System.String_Hash;\n \n function Ada.Strings.Unbounded.Hash\n   (Key : Unbounded_String) return Containers.Hash_Type\n is\n    use Ada.Containers;\n-\n-   function Rotate_Left\n-     (Value  : Hash_Type;\n-      Amount : Natural) return Hash_Type;\n-   pragma Import (Intrinsic, Rotate_Left);\n-\n-   Tmp : Hash_Type;\n-\n+   function Hash is new System.String_Hash.Hash\n+     (Character, String, Hash_Type);\n begin\n-   Tmp := 0;\n-   for J in 1 .. Key.Last loop\n-      Tmp := Rotate_Left (Tmp, 3) + Character'Pos (Key.Reference (J));\n-   end loop;\n-\n-   return Tmp;\n+   return Hash (To_String (Key));\n end Ada.Strings.Unbounded.Hash;"}, {"sha": "643b5b0e65408f9608c7abd19559dbd3d648bb0e", "filename": "gcc/ada/a-swbwha.adb", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fa-swbwha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fa-swbwha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-swbwha.adb?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -27,27 +27,15 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n---  Note: source of this algorithm: GNAT.HTable.Hash (g-htable.adb)\n+with System.String_Hash;\n \n function Ada.Strings.Wide_Bounded.Wide_Hash\n   (Key : Bounded.Bounded_Wide_String)\n   return Containers.Hash_Type\n is\n    use Ada.Containers;\n-\n-   function Rotate_Left\n-     (Value  : Hash_Type;\n-      Amount : Natural) return Hash_Type;\n-   pragma Import (Intrinsic, Rotate_Left);\n-\n-   Tmp : Hash_Type;\n-\n+   function Hash is new System.String_Hash.Hash\n+     (Wide_Character, Wide_String, Hash_Type);\n begin\n-   Tmp := 0;\n-   for J in 1 .. Bounded.Length (Key) loop\n-      Tmp := Rotate_Left (Tmp, 3) +\n-               Wide_Character'Pos (Bounded.Element (Key, J));\n-   end loop;\n-\n-   return Tmp;\n+   return Hash (Bounded.To_Wide_String (Key));\n end Ada.Strings.Wide_Bounded.Wide_Hash;"}, {"sha": "e367447832599bcf2168efc3309008f611c0af00", "filename": "gcc/ada/a-swuwha.adb", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fa-swuwha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fa-swuwha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-swuwha.adb?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -27,25 +27,14 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n---  Note: source of this algorithm: GNAT.HTable.Hash (g-htable.adb)\n+with System.String_Hash;\n \n function Ada.Strings.Wide_Unbounded.Wide_Hash\n   (Key : Unbounded_Wide_String) return Containers.Hash_Type\n is\n    use Ada.Containers;\n-\n-   function Rotate_Left\n-     (Value  : Hash_Type;\n-      Amount : Natural) return Hash_Type;\n-   pragma Import (Intrinsic, Rotate_Left);\n-\n-   Tmp : Hash_Type;\n-\n+   function Hash is new System.String_Hash.Hash\n+     (Wide_Character, Wide_String, Hash_Type);\n begin\n-   Tmp := 0;\n-   for J in 1 .. Key.Last loop\n-      Tmp := Rotate_Left (Tmp, 3) + Wide_Character'Pos (Key.Reference (J));\n-   end loop;\n-\n-   return Tmp;\n+   return Hash (To_Wide_String (Key));\n end Ada.Strings.Wide_Unbounded.Wide_Hash;"}, {"sha": "9ee1e91374e85990871522fbd6b695833f88d282", "filename": "gcc/ada/a-szbzha.adb", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fa-szbzha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fa-szbzha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-szbzha.adb?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -27,27 +27,15 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n---  Note: source of this algorithm: GNAT.HTable.Hash (g-htable.adb)\n+with System.String_Hash;\n \n function Ada.Strings.Wide_Wide_Bounded.Wide_Wide_Hash\n   (Key : Bounded.Bounded_Wide_Wide_String)\n   return Containers.Hash_Type\n is\n    use Ada.Containers;\n-\n-   function Rotate_Left\n-     (Value  : Hash_Type;\n-      Amount : Natural) return Hash_Type;\n-   pragma Import (Intrinsic, Rotate_Left);\n-\n-   Tmp : Hash_Type;\n-\n+   function Hash is new System.String_Hash.Hash\n+     (Wide_Wide_Character, Wide_Wide_String, Hash_Type);\n begin\n-   Tmp := 0;\n-   for J in 1 .. Bounded.Length (Key) loop\n-      Tmp := Rotate_Left (Tmp, 3) +\n-               Wide_Wide_Character'Pos (Bounded.Element (Key, J));\n-   end loop;\n-\n-   return Tmp;\n+   return Hash (Bounded.To_Wide_Wide_String (Key));\n end Ada.Strings.Wide_Wide_Bounded.Wide_Wide_Hash;"}, {"sha": "13cb19b7dcd8ffa2096fd3607b5f9b153db22943", "filename": "gcc/ada/a-szuzha.adb", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fa-szuzha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fa-szuzha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-szuzha.adb?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -27,26 +27,14 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n---  Note: source of this algorithm: GNAT.HTable.Hash (g-htable.adb)\n+with System.String_Hash;\n \n function Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Hash\n   (Key : Unbounded_Wide_Wide_String) return Containers.Hash_Type\n is\n    use Ada.Containers;\n-\n-   function Rotate_Left\n-     (Value  : Hash_Type;\n-      Amount : Natural) return Hash_Type;\n-   pragma Import (Intrinsic, Rotate_Left);\n-\n-   Tmp : Hash_Type;\n-\n+   function Hash is new System.String_Hash.Hash\n+     (Wide_Wide_Character, Wide_Wide_String, Hash_Type);\n begin\n-   Tmp := 0;\n-   for J in 1 .. Key.Last loop\n-      Tmp := Rotate_Left (Tmp, 3) +\n-        Wide_Wide_Character'Pos (Key.Reference (J));\n-   end loop;\n-\n-   return Tmp;\n+   return Hash (To_Wide_Wide_String (Key));\n end Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Hash;"}, {"sha": "3b2cc64a0bd4d6fdb9048140ecfddd9feeedaadb", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -1895,14 +1895,17 @@ package body Exp_Ch3 is\n            and then not (Nkind_In (Kind, N_Aggregate, N_Extension_Aggregate))\n            and then not Is_Inherently_Limited_Type (Typ)\n          then\n-            Append_List_To (Res,\n-              Make_Adjust_Call (\n-               Ref          => New_Copy_Tree (Lhs, New_Scope => Proc_Id),\n-               Typ          => Etype (Id),\n-               Flist_Ref    =>\n-                 Find_Final_List\n-                   (Etype (Id), New_Copy_Tree (Lhs, New_Scope => Proc_Id)),\n-               With_Attach  => Make_Integer_Literal (Loc, 1)));\n+            declare\n+               Ref : constant Node_Id :=\n+                       New_Copy_Tree (Lhs, New_Scope => Proc_Id);\n+            begin\n+               Append_List_To (Res,\n+                 Make_Adjust_Call (\n+                  Ref          => Ref,\n+                  Typ          => Etype (Id),\n+                  Flist_Ref    => Find_Final_List (Etype (Id), Ref),\n+                  With_Attach  => Make_Integer_Literal (Loc, 1)));\n+            end;\n          end if;\n \n          return Res;"}, {"sha": "5b5e2a78e041fb66b6cea306b935871dce1fa46c", "filename": "gcc/ada/g-spitbo.adb", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fg-spitbo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fg-spitbo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-spitbo.adb?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2007, AdaCore                     --\n+--                     Copyright (C) 1998-2009, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,6 +37,8 @@ with Ada.Strings.Unbounded.Aux; use Ada.Strings.Unbounded.Aux;\n with GNAT.Debug_Utilities;      use GNAT.Debug_Utilities;\n with GNAT.IO;                   use GNAT.IO;\n \n+with System.String_Hash;\n+\n with Ada.Unchecked_Deallocation;\n \n package body GNAT.Spitbol is\n@@ -326,8 +328,8 @@ package body GNAT.Spitbol is\n       -- Local Subprograms --\n       -----------------------\n \n-      function Hash (Str : String) return Unsigned_32;\n-      --  Compute hash function for given String\n+      function Hash is new System.String_Hash.Hash\n+        (Character, String, Unsigned_32);\n \n       ------------\n       -- Adjust --\n@@ -613,22 +615,6 @@ package body GNAT.Spitbol is\n          end if;\n       end Get;\n \n-      ----------\n-      -- Hash --\n-      ----------\n-\n-      function Hash (Str : String) return Unsigned_32 is\n-         Result : Unsigned_32 := Str'Length;\n-\n-      begin\n-         for J in Str'Range loop\n-            Result := Rotate_Left (Result, 3) +\n-                      Unsigned_32 (Character'Pos (Str (J)));\n-         end loop;\n-\n-         return Result;\n-      end Hash;\n-\n       -------------\n       -- Present --\n       -------------"}, {"sha": "7b996f7723b1ae02bb3ff43655a1ce7f913c0492", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 105, "deletions": 96, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -120,8 +120,8 @@ GNAT1_C_OBJS = ada/b_gnat1.o ada/adadecode.o ada/adaint.o ada/cstreams.o \\\n \n GNAT_ADA_OBJS = ada/s-bitops.o ada/ada.o ada/a-charac.o ada/a-chlat1.o ada/a-except.o \\\n  ada/a-elchha.o ada/a-ioexce.o \\\n- ada/s-memory.o ada/s-carun8.o ada/s-casuti.o ada/s-strcom.o ada/s-purexc.o \\\n- ada/s-htable.o ada/s-traceb.o ada/s-mastop.o ada/ali.o \\\n+ ada/s-memory.o ada/s-carun8.o ada/s-casuti.o ada/s-strcom.o ada/s-strhas.o \\\n+ ada/s-purexc.o  ada/s-htable.o ada/s-traceb.o ada/s-mastop.o ada/ali.o \\\n  ada/alloc.o ada/atree.o ada/butil.o ada/casing.o ada/checks.o ada/comperr.o \\\n  ada/csets.o ada/cstand.o ada/debug.o ada/debug_a.o ada/einfo.o ada/elists.o \\\n  ada/errout.o ada/erroutc.o ada/err_vars.o ada/eval_fat.o ada/exp_attr.o \\\n@@ -262,6 +262,7 @@ GNATBIND_OBJS = \\\n  ada/s-stache.o   \\\n  ada/s-stalib.o   \\\n  ada/s-stoele.o   \\\n+ ada/s-strhas.o   \\\n  ada/s-strops.o   \\\n  ada/s-traceb.o   \\\n  ada/s-traent.o   \\\n@@ -1243,22 +1244,24 @@ ada/ada.o : ada/ada.ads ada/system.ads\n \n ada/ali-util.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/ali.ads ada/ali-util.ads ada/ali-util.adb \\\n-   ada/alloc.ads ada/atree.ads ada/binderr.ads ada/casing.ads \\\n-   ada/csets.ads ada/debug.ads ada/einfo.ads ada/err_vars.ads ada/gnat.ads \\\n-   ada/g-htable.ads ada/gnatvsn.ads ada/hostparm.ads ada/interfac.ads \\\n-   ada/namet.ads ada/namet.adb ada/opt.ads ada/osint.ads ada/output.ads \\\n-   ada/rident.ads ada/scans.ads ada/scng.ads ada/scng.adb ada/sinfo.ads \\\n-   ada/sinput.ads ada/sinput.adb ada/sinput-c.ads ada/snames.ads \\\n-   ada/stringt.ads ada/stringt.adb ada/styleg.ads ada/styleg.adb \\\n-   ada/stylesw.ads ada/system.ads ada/s-carun8.ads ada/s-crc32.ads \\\n-   ada/s-crc32.adb ada/s-exctab.ads ada/s-htable.ads ada/s-htable.adb \\\n+   ada/alloc.ads ada/atree.ads ada/atree.adb ada/binderr.ads \\\n+   ada/casing.ads ada/csets.ads ada/debug.ads ada/einfo.ads \\\n+   ada/err_vars.ads ada/gnat.ads ada/g-htable.ads ada/gnatvsn.ads \\\n+   ada/hostparm.ads ada/interfac.ads ada/namet.ads ada/namet.adb \\\n+   ada/nlists.ads ada/opt.ads ada/osint.ads ada/output.ads ada/rident.ads \\\n+   ada/scans.ads ada/scng.ads ada/scng.adb ada/sinfo.ads ada/sinput.ads \\\n+   ada/sinput.adb ada/sinput-c.ads ada/snames.ads ada/stringt.ads \\\n+   ada/stringt.adb ada/styleg.ads ada/styleg.adb ada/stylesw.ads \\\n+   ada/system.ads ada/s-carun8.ads ada/s-crc32.ads ada/s-crc32.adb \\\n+   ada/s-exctab.ads ada/s-htable.ads ada/s-htable.adb ada/s-imenne.ads \\\n    ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads ada/s-rident.ads \\\n    ada/s-secsta.ads ada/s-soflin.ads ada/s-stache.ads ada/s-stalib.ads \\\n-   ada/s-stoele.ads ada/s-stoele.adb ada/s-string.ads ada/s-traent.ads \\\n-   ada/s-unstyp.ads ada/s-utf_32.ads ada/s-utf_32.adb ada/s-wchcon.ads \\\n-   ada/table.ads ada/table.adb ada/tree_io.ads ada/types.ads ada/types.adb \\\n-   ada/uintp.ads ada/uintp.adb ada/unchconv.ads ada/unchdeal.ads \\\n-   ada/urealp.ads ada/urealp.adb ada/widechar.ads \n+   ada/s-stoele.ads ada/s-stoele.adb ada/s-strhas.ads ada/s-string.ads \\\n+   ada/s-traent.ads ada/s-unstyp.ads ada/s-utf_32.ads ada/s-utf_32.adb \\\n+   ada/s-wchcon.ads ada/table.ads ada/table.adb ada/tree_io.ads \\\n+   ada/types.ads ada/types.adb ada/uintp.ads ada/uintp.adb \\\n+   ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads ada/urealp.adb \\\n+   ada/widechar.ads \n \n ada/ali.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads ada/a-uncdea.ads \\\n    ada/ali.ads ada/ali.adb ada/alloc.ads ada/butil.ads ada/casing.ads \\\n@@ -1268,10 +1271,10 @@ ada/ali.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads ada/a-uncdea.ads \\\n    ada/system.ads ada/s-exctab.ads ada/s-exctab.adb ada/s-htable.ads \\\n    ada/s-htable.adb ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads \\\n    ada/s-rident.ads ada/s-secsta.ads ada/s-soflin.ads ada/s-stache.ads \\\n-   ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb ada/s-string.ads \\\n-   ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads \\\n-   ada/table.adb ada/tree_io.ads ada/types.ads ada/unchconv.ads \\\n-   ada/unchdeal.ads ada/widechar.ads \n+   ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb ada/s-strhas.ads \\\n+   ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads \\\n+   ada/table.ads ada/table.adb ada/tree_io.ads ada/types.ads \\\n+   ada/unchconv.ads ada/unchdeal.ads ada/widechar.ads \n \n ada/alloc.o : ada/alloc.ads ada/system.ads \n \n@@ -1523,18 +1526,19 @@ ada/errout.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/urealp.ads ada/widechar.ads \n \n ada/erroutc.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n-   ada/a-uncdea.ads ada/alloc.ads ada/atree.ads ada/casing.ads \\\n-   ada/debug.ads ada/einfo.ads ada/err_vars.ads ada/erroutc.ads \\\n-   ada/erroutc.adb ada/hostparm.ads ada/interfac.ads ada/namet.ads \\\n-   ada/namet.adb ada/opt.ads ada/output.ads ada/output.adb ada/rident.ads \\\n-   ada/sinfo.ads ada/sinput.ads ada/sinput.adb ada/snames.ads \\\n-   ada/system.ads ada/s-exctab.ads ada/s-memory.ads ada/s-os_lib.ads \\\n-   ada/s-parame.ads ada/s-rident.ads ada/s-secsta.ads ada/s-soflin.ads \\\n-   ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb \\\n-   ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads \\\n-   ada/table.ads ada/table.adb ada/targparm.ads ada/tree_io.ads \\\n-   ada/types.ads ada/uintp.ads ada/unchconv.ads ada/unchdeal.ads \\\n-   ada/urealp.ads ada/widechar.ads \n+   ada/a-uncdea.ads ada/alloc.ads ada/atree.ads ada/atree.adb \\\n+   ada/casing.ads ada/debug.ads ada/einfo.ads ada/err_vars.ads \\\n+   ada/erroutc.ads ada/erroutc.adb ada/hostparm.ads ada/interfac.ads \\\n+   ada/namet.ads ada/namet.adb ada/nlists.ads ada/opt.ads ada/output.ads \\\n+   ada/output.adb ada/rident.ads ada/sinfo.ads ada/sinput.ads \\\n+   ada/sinput.adb ada/snames.ads ada/system.ads ada/s-exctab.ads \\\n+   ada/s-imenne.ads ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads \\\n+   ada/s-rident.ads ada/s-secsta.ads ada/s-soflin.ads ada/s-stache.ads \\\n+   ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb ada/s-string.ads \\\n+   ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads \\\n+   ada/table.adb ada/targparm.ads ada/tree_io.ads ada/types.ads \\\n+   ada/uintp.ads ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads \\\n+   ada/widechar.ads \n \n ada/eval_fat.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/atree.ads ada/atree.adb \\\n@@ -2010,11 +2014,11 @@ ada/exp_dist.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/s-htable.adb ada/s-imenne.ads ada/s-memory.ads ada/s-os_lib.ads \\\n    ada/s-parame.ads ada/s-rident.ads ada/s-secsta.ads ada/s-soflin.ads \\\n    ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb \\\n-   ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads \\\n-   ada/table.ads ada/table.adb ada/tbuild.ads ada/tbuild.adb \\\n-   ada/tree_io.ads ada/ttypes.ads ada/types.ads ada/uintp.ads \\\n-   ada/uintp.adb ada/uname.ads ada/unchconv.ads ada/unchdeal.ads \\\n-   ada/urealp.ads \n+   ada/s-strhas.ads ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n+   ada/s-wchcon.ads ada/table.ads ada/table.adb ada/tbuild.ads \\\n+   ada/tbuild.adb ada/tree_io.ads ada/ttypes.ads ada/types.ads \\\n+   ada/uintp.ads ada/uintp.adb ada/uname.ads ada/unchconv.ads \\\n+   ada/unchdeal.ads ada/urealp.ads \n \n ada/exp_fixd.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/atree.ads ada/atree.adb \\\n@@ -2265,10 +2269,10 @@ ada/fmap.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/gnat.ads ada/g-htable.ads ada/hostparm.ads ada/namet.ads \\\n    ada/opt.ads ada/osint.ads ada/output.ads ada/system.ads \\\n    ada/s-exctab.ads ada/s-htable.ads ada/s-htable.adb ada/s-memory.ads \\\n-   ada/s-os_lib.ads ada/s-parame.ads ada/s-stalib.ads ada/s-string.ads \\\n-   ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads \\\n-   ada/table.adb ada/tree_io.ads ada/types.ads ada/unchconv.ads \\\n-   ada/unchdeal.ads \n+   ada/s-os_lib.ads ada/s-parame.ads ada/s-stalib.ads ada/s-strhas.ads \\\n+   ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads \\\n+   ada/table.ads ada/table.adb ada/tree_io.ads ada/types.ads \\\n+   ada/unchconv.ads ada/unchdeal.ads \n \n ada/fname-uf.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/casing.ads ada/debug.ads \\\n@@ -2277,10 +2281,10 @@ ada/fname-uf.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/namet.ads ada/opt.ads ada/osint.ads ada/output.ads ada/rident.ads \\\n    ada/system.ads ada/s-exctab.ads ada/s-htable.ads ada/s-htable.adb \\\n    ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads ada/s-rident.ads \\\n-   ada/s-stalib.ads ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n-   ada/s-wchcon.ads ada/table.ads ada/table.adb ada/targparm.ads \\\n-   ada/tree_io.ads ada/types.ads ada/uname.ads ada/unchconv.ads \\\n-   ada/unchdeal.ads ada/widechar.ads \n+   ada/s-stalib.ads ada/s-strhas.ads ada/s-string.ads ada/s-traent.ads \\\n+   ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads ada/table.adb \\\n+   ada/targparm.ads ada/tree_io.ads ada/types.ads ada/uname.ads \\\n+   ada/unchconv.ads ada/unchdeal.ads ada/widechar.ads \n \n ada/fname.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/debug.ads ada/fname.ads \\\n@@ -2472,18 +2476,19 @@ ada/inline.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads \n \n ada/instpar.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n-   ada/a-uncdea.ads ada/alloc.ads ada/atree.ads ada/casing.ads \\\n-   ada/debug.ads ada/einfo.ads ada/gnatvsn.ads ada/hostparm.ads \\\n-   ada/instpar.ads ada/instpar.adb ada/interfac.ads ada/namet.ads \\\n-   ada/opt.ads ada/output.ads ada/sdefault.ads ada/sinfo.ads \\\n-   ada/sinput.ads ada/sinput.adb ada/sinput-l.ads ada/snames.ads \\\n-   ada/system.ads ada/s-carun8.ads ada/s-crc32.ads ada/s-crc32.adb \\\n-   ada/s-exctab.ads ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads \\\n-   ada/s-secsta.ads ada/s-soflin.ads ada/s-stache.ads ada/s-stalib.ads \\\n-   ada/s-stoele.ads ada/s-stoele.adb ada/s-string.ads ada/s-traent.ads \\\n-   ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads ada/table.adb \\\n-   ada/tree_io.ads ada/types.ads ada/uintp.ads ada/unchconv.ads \\\n-   ada/unchdeal.ads ada/urealp.ads ada/widechar.ads \n+   ada/a-uncdea.ads ada/alloc.ads ada/atree.ads ada/atree.adb \\\n+   ada/casing.ads ada/debug.ads ada/einfo.ads ada/gnatvsn.ads \\\n+   ada/hostparm.ads ada/instpar.ads ada/instpar.adb ada/interfac.ads \\\n+   ada/namet.ads ada/nlists.ads ada/opt.ads ada/output.ads \\\n+   ada/sdefault.ads ada/sinfo.ads ada/sinput.ads ada/sinput.adb \\\n+   ada/sinput-l.ads ada/snames.ads ada/system.ads ada/s-carun8.ads \\\n+   ada/s-crc32.ads ada/s-crc32.adb ada/s-exctab.ads ada/s-imenne.ads \\\n+   ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads ada/s-secsta.ads \\\n+   ada/s-soflin.ads ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads \\\n+   ada/s-stoele.adb ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n+   ada/s-wchcon.ads ada/table.ads ada/table.adb ada/tree_io.ads \\\n+   ada/types.ads ada/uintp.ads ada/unchconv.ads ada/unchdeal.ads \\\n+   ada/urealp.ads ada/widechar.ads \n \n ada/interfac.o : ada/interfac.ads ada/system.ads \n \n@@ -2718,10 +2723,10 @@ ada/osint.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/s-casuti.ads ada/s-exctab.ads ada/s-htable.ads ada/s-htable.adb \\\n    ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads ada/s-rident.ads \\\n    ada/s-secsta.ads ada/s-soflin.ads ada/s-stache.ads ada/s-stalib.ads \\\n-   ada/s-stoele.ads ada/s-stoele.adb ada/s-string.ads ada/s-traent.ads \\\n-   ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads ada/table.adb \\\n-   ada/targparm.ads ada/tree_io.ads ada/types.ads ada/unchconv.ads \\\n-   ada/unchdeal.ads ada/widechar.ads \n+   ada/s-stoele.ads ada/s-stoele.adb ada/s-strhas.ads ada/s-string.ads \\\n+   ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads \\\n+   ada/table.adb ada/targparm.ads ada/tree_io.ads ada/types.ads \\\n+   ada/unchconv.ads ada/unchdeal.ads ada/widechar.ads \n \n ada/output.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/hostparm.ads ada/output.ads ada/output.adb \\\n@@ -2777,21 +2782,22 @@ ada/prep.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/unchdeal.ads ada/urealp.ads \n \n ada/prepcomp.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n-   ada/a-uncdea.ads ada/alloc.ads ada/atree.ads ada/casing.ads \\\n-   ada/csets.ads ada/debug.ads ada/einfo.ads ada/err_vars.ads \\\n-   ada/errout.ads ada/erroutc.ads ada/gnat.ads ada/g-dyntab.ads \\\n-   ada/g-dyntab.adb ada/g-hesorg.ads ada/hostparm.ads ada/interfac.ads \\\n-   ada/lib.ads ada/lib-writ.ads ada/namet.ads ada/opt.ads ada/osint.ads \\\n-   ada/output.ads ada/prep.ads ada/prepcomp.ads ada/prepcomp.adb \\\n-   ada/scans.ads ada/scn.ads ada/scng.ads ada/scng.adb ada/sinfo.ads \\\n-   ada/sinput.ads ada/sinput.adb ada/sinput-l.ads ada/snames.ads \\\n-   ada/stringt.ads ada/stringt.adb ada/style.ads ada/styleg.ads \\\n-   ada/styleg.adb ada/stylesw.ads ada/system.ads ada/s-crc32.ads \\\n-   ada/s-crc32.adb ada/s-exctab.ads ada/s-memory.ads ada/s-os_lib.ads \\\n-   ada/s-parame.ads ada/s-secsta.ads ada/s-soflin.ads ada/s-stache.ads \\\n-   ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb ada/s-string.ads \\\n-   ada/s-traent.ads ada/s-unstyp.ads ada/s-utf_32.ads ada/s-wchcon.ads \\\n-   ada/table.ads ada/table.adb ada/tree_io.ads ada/types.ads ada/uintp.ads \\\n+   ada/a-uncdea.ads ada/alloc.ads ada/atree.ads ada/atree.adb \\\n+   ada/casing.ads ada/csets.ads ada/debug.ads ada/einfo.ads \\\n+   ada/err_vars.ads ada/errout.ads ada/erroutc.ads ada/gnat.ads \\\n+   ada/g-dyntab.ads ada/g-dyntab.adb ada/g-hesorg.ads ada/hostparm.ads \\\n+   ada/interfac.ads ada/lib.ads ada/lib-writ.ads ada/namet.ads \\\n+   ada/nlists.ads ada/opt.ads ada/osint.ads ada/output.ads ada/prep.ads \\\n+   ada/prepcomp.ads ada/prepcomp.adb ada/scans.ads ada/scn.ads \\\n+   ada/scng.ads ada/scng.adb ada/sinfo.ads ada/sinput.ads ada/sinput.adb \\\n+   ada/sinput-l.ads ada/snames.ads ada/stringt.ads ada/stringt.adb \\\n+   ada/style.ads ada/styleg.ads ada/styleg.adb ada/stylesw.ads \\\n+   ada/system.ads ada/s-crc32.ads ada/s-crc32.adb ada/s-exctab.ads \\\n+   ada/s-imenne.ads ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads \\\n+   ada/s-secsta.ads ada/s-soflin.ads ada/s-stache.ads ada/s-stalib.ads \\\n+   ada/s-stoele.ads ada/s-stoele.adb ada/s-string.ads ada/s-traent.ads \\\n+   ada/s-unstyp.ads ada/s-utf_32.ads ada/s-wchcon.ads ada/table.ads \\\n+   ada/table.adb ada/tree_io.ads ada/types.ads ada/uintp.ads \\\n    ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads ada/widechar.ads \n \n ada/repinfo.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n@@ -2904,10 +2910,10 @@ ada/s-exctab.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/system.ads ada/s-exctab.ads ada/s-exctab.adb \\\n    ada/s-htable.ads ada/s-htable.adb ada/s-parame.ads ada/s-soflin.ads \\\n    ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb \\\n-   ada/s-traent.ads \n+   ada/s-strhas.ads ada/s-traent.ads \n \n ada/s-htable.o : ada/ada.ads ada/a-uncdea.ads ada/system.ads \\\n-   ada/s-htable.ads ada/s-htable.adb \n+   ada/s-htable.ads ada/s-htable.adb ada/s-strhas.ads \n \n ada/s-imenne.o : ada/ada.ads ada/a-unccon.ads ada/system.ads \\\n    ada/s-imenne.ads ada/s-imenne.adb \n@@ -2974,6 +2980,8 @@ ada/s-stoele.o : ada/ada.ads ada/a-unccon.ads ada/system.ads \\\n ada/s-strcom.o : ada/ada.ads ada/a-unccon.ads ada/system.ads \\\n    ada/s-strcom.ads ada/s-strcom.adb \n \n+ada/s-strhas.o : ada/system.ads ada/s-strhas.ads ada/s-strhas.adb \n+\n ada/s-string.o : ada/ada.ads ada/a-uncdea.ads ada/system.ads \\\n    ada/s-string.ads ada/s-string.adb \n \n@@ -3259,12 +3267,12 @@ ada/sem_ch12.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/s-htable.ads ada/s-htable.adb ada/s-imenne.ads ada/s-memory.ads \\\n    ada/s-os_lib.ads ada/s-parame.ads ada/s-rident.ads ada/s-secsta.ads \\\n    ada/s-soflin.ads ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads \\\n-   ada/s-stoele.adb ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n-   ada/s-utf_32.ads ada/s-wchcon.ads ada/table.ads ada/table.adb \\\n-   ada/targparm.ads ada/tbuild.ads ada/tbuild.adb ada/tree_io.ads \\\n-   ada/ttypes.ads ada/types.ads ada/uintp.ads ada/uintp.adb ada/uname.ads \\\n-   ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads ada/urealp.adb \\\n-   ada/widechar.ads \n+   ada/s-stoele.adb ada/s-strhas.ads ada/s-string.ads ada/s-traent.ads \\\n+   ada/s-unstyp.ads ada/s-utf_32.ads ada/s-wchcon.ads ada/table.ads \\\n+   ada/table.adb ada/targparm.ads ada/tbuild.ads ada/tbuild.adb \\\n+   ada/tree_io.ads ada/ttypes.ads ada/types.ads ada/uintp.ads \\\n+   ada/uintp.adb ada/uname.ads ada/unchconv.ads ada/unchdeal.ads \\\n+   ada/urealp.ads ada/urealp.adb ada/widechar.ads \n \n ada/sem_ch13.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/atree.ads ada/atree.adb \\\n@@ -3624,9 +3632,9 @@ ada/sem_elim.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/sinput.adb ada/snames.ads ada/stand.ads ada/stringt.ads \\\n    ada/system.ads ada/s-exctab.ads ada/s-htable.ads ada/s-htable.adb \\\n    ada/s-imenne.ads ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads \\\n-   ada/s-stalib.ads ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n-   ada/s-wchcon.ads ada/table.ads ada/table.adb ada/tree_io.ads \\\n-   ada/types.ads ada/uintp.ads ada/uintp.adb ada/uname.ads \\\n+   ada/s-stalib.ads ada/s-strhas.ads ada/s-string.ads ada/s-traent.ads \\\n+   ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads ada/table.adb \\\n+   ada/tree_io.ads ada/types.ads ada/uintp.ads ada/uintp.adb ada/uname.ads \\\n    ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads ada/widechar.ads \n \n ada/sem_eval.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n@@ -3844,12 +3852,12 @@ ada/sem_util.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/s-htable.adb ada/s-imenne.ads ada/s-memory.ads ada/s-os_lib.ads \\\n    ada/s-parame.ads ada/s-rident.ads ada/s-secsta.ads ada/s-soflin.ads \\\n    ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb \\\n-   ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads ada/s-utf_32.ads \\\n-   ada/s-wchcon.ads ada/table.ads ada/table.adb ada/targparm.ads \\\n-   ada/tbuild.ads ada/tbuild.adb ada/tree_io.ads ada/ttypes.ads \\\n-   ada/types.ads ada/types.adb ada/uintp.ads ada/uintp.adb ada/uname.ads \\\n-   ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads ada/urealp.adb \\\n-   ada/widechar.ads \n+   ada/s-strhas.ads ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n+   ada/s-utf_32.ads ada/s-wchcon.ads ada/table.ads ada/table.adb \\\n+   ada/targparm.ads ada/tbuild.ads ada/tbuild.adb ada/tree_io.ads \\\n+   ada/ttypes.ads ada/types.ads ada/types.adb ada/uintp.ads ada/uintp.adb \\\n+   ada/uname.ads ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads \\\n+   ada/urealp.adb ada/widechar.ads \n \n ada/sem_vfpt.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/atree.ads ada/atree.adb \\\n@@ -4186,9 +4194,10 @@ ada/uintp.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/g-htable.ads ada/hostparm.ads ada/opt.ads ada/output.ads \\\n    ada/system.ads ada/s-exctab.ads ada/s-htable.ads ada/s-htable.adb \\\n    ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads ada/s-stalib.ads \\\n-   ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads \\\n-   ada/table.ads ada/table.adb ada/tree_io.ads ada/types.ads ada/uintp.ads \\\n-   ada/uintp.adb ada/unchconv.ads ada/unchdeal.ads \n+   ada/s-strhas.ads ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n+   ada/s-wchcon.ads ada/table.ads ada/table.adb ada/tree_io.ads \\\n+   ada/types.ads ada/uintp.ads ada/uintp.adb ada/unchconv.ads \\\n+   ada/unchdeal.ads \n \n ada/uname.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/atree.ads ada/atree.adb \\"}, {"sha": "f2ca2fbc576e2dc687a8d5e8d56fbc4fd7054ee3", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 224, "deletions": 150, "changes": 374, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -184,7 +184,7 @@ TARGET_ADA_SRCS =\n TOOLSCASE =\n \n # Multilib handling\n-MULTISUBDIR = \n+MULTISUBDIR =\n RTSDIR = rts$(subst /,_,$(MULTISUBDIR))\n \n # End of variables for you to override.\n@@ -293,14 +293,13 @@ GNATMAKE_OBJS = a-except.o ali.o ali-util.o s-casuti.o \\\n  erroutc.o errutil.o err_vars.o fmap.o fname.o fname-uf.o fname-sf.o \\\n  gnatmake.o gnatvsn.o hostparm.o interfac.o i-c.o i-cstrin.o krunch.o lib.o \\\n  make.o makeusg.o makeutl.o mlib.o mlib-fil.o mlib-prj.o mlib-tgt.o \\\n- mlib-tgt-specific.o mlib-utl.o namet.o nlists.o opt.o osint.o osint-m.o output.o \\\n- prj.o prj-attr.o prj-attr-pm.o prj-com.o prj-dect.o prj-env.o prj-err.o prj-ext.o prj-nmsc.o \\\n- prj-pars.o prj-part.o prj-proc.o prj-strt.o prj-tree.o prj-util.o \\\n- rident.o s-exctab.o s-secsta.o s-stalib.o s-stoele.o \\\n- scans.o scng.o sdefault.o sfn_scan.o s-purexc.o s-htable.o \\\n- sinfo.o sinput.o sinput-c.o sinput-p.o \\\n- snames.o stand.o stringt.o styleg.o stylesw.o system.o validsw.o switch.o switch-m.o \\\n- table.o targparm.o tempdir.o tree_io.o types.o \\\n+ mlib-tgt-specific.o mlib-utl.o namet.o nlists.o opt.o osint.o osint-m.o \\\n+ output.o prj.o prj-attr.o prj-attr-pm.o prj-com.o prj-dect.o prj-env.o \\\n+ prj-err.o prj-ext.o prj-nmsc.o prj-pars.o prj-part.o prj-proc.o prj-strt.o \\\n+ prj-tree.o prj-util.o rident.o s-exctab.o s-secsta.o s-stalib.o s-stoele.o \\\n+ scans.o scng.o sdefault.o sfn_scan.o s-purexc.o s-htable.o sinfo.o sinput.o \\\n+ sinput-c.o sinput-p.o snames.o stand.o stringt.o styleg.o stylesw.o system.o \\\n+ validsw.o switch.o switch-m.o table.o targparm.o tempdir.o tree_io.o types.o \\\n  uintp.o uname.o urealp.o usage.o widechar.o \\\n  $(EXTRA_GNATMAKE_OBJS)\n \n@@ -494,23 +493,40 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks,$(targ))),)\n \n     EXTRA_GNATRTL_NONTASKING_OBJS=s-vxwexc.o\n   else\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-interr.adb<s-interr-hwint.adb \\\n-    s-tpopsp.adb<s-tpopsp-vxworks.adb\n-\n-    ifeq ($(strip $(filter-out kernel,$(THREAD_KIND))),)\n+    ifeq ($(strip $(filter-out rtp-smp,$(THREAD_KIND))),)\n       LIBGNAT_TARGET_PAIRS += \\\n-      s-vxwext.ads<s-vxwext-kernel.ads \\\n-      s-vxwext.adb<s-vxwext-kernel.adb \\\n-      system.ads<system-vxworks-ppc-kernel.ads\n+      s-vxwext.ads<s-vxwext-rtp.ads \\\n+      s-vxwext.adb<s-vxwext-rtp.adb \\\n+      s-tpopsp.adb<s-tpopsp-vxworks-tls.adb \\\n+      system.ads<system-vxworks-ppc-rtp.ads\n \n       EXTRA_GNATRTL_NONTASKING_OBJS=s-vxwexc.o\n     else\n-      LIBGNAT_TARGET_PAIRS += \\\n-      system.ads<system-vxworks-ppc.ads\n-    endif\n+      ifeq ($(strip $(filter-out kernel-smp,$(THREAD_KIND))),)\n+        LIBGNAT_TARGET_PAIRS += \\\n+        s-interr.adb<s-interr-hwint.adb \\\n+        s-tpopsp.adb<s-tpopsp-vxworks-tls.adb \\\n+        s-vxwext.ads<s-vxwext-kernel.ads \\\n+        s-vxwext.adb<s-vxwext-kernel-smp.adb \\\n+        system.ads<system-vxworks-ppc-kernel.ads\n+      else\n+        LIBGNAT_TARGET_PAIRS += \\\n+        s-interr.adb<s-interr-hwint.adb \\\n+        s-tpopsp.adb<s-tpopsp-vxworks.adb\n+\n+        ifeq ($(strip $(filter-out kernel,$(THREAD_KIND))),)\n+          LIBGNAT_TARGET_PAIRS += \\\n+          s-vxwext.ads<s-vxwext-kernel.ads \\\n+          s-vxwext.adb<s-vxwext-kernel.adb \\\n+          system.ads<system-vxworks-ppc-kernel.ads\n+        else\n+          LIBGNAT_TARGET_PAIRS += \\\n+          system.ads<system-vxworks-ppc.ads\n+        endif\n \n-    EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o s-vxwexc.o\n+      endif\n+      EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o s-vxwexc.o\n+    endif\n   endif\n \n   EXTRA_GNATRTL_TASKING_OBJS=s-vxwork.o s-vxwext.o\n@@ -543,11 +559,6 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworksae,$(targ))),)\n   s-vxwext.adb<s-vxwext-noints.adb \\\n   s-vxwext.ads<s-vxwext-vthreads.ads \\\n   s-vxwork.ads<s-vxwork-ppc.ads \\\n-  g-socthi.ads<g-socthi-vxworks.ads \\\n-  g-socthi.adb<g-socthi-vxworks.adb \\\n-  g-stsifd.adb<g-stsifd-sockets.adb \\\n-  g-sttsne.adb<g-sttsne-vxworks.adb \\\n-  g-sttsne.ads<g-sttsne-locking.ads \\\n   g-trasym.ads<g-trasym-unimplemented.ads \\\n   g-trasym.adb<g-trasym-unimplemented.adb \\\n   system.ads<system-vxworks-ppc-vthread.ads\n@@ -562,8 +573,18 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworksae,$(targ))),)\n   # Extra pairs for the vthreads runtime\n   ifeq ($(strip $(filter-out vthreads,$(THREAD_KIND))),)\n     LIBGNAT_TARGET_PAIRS += \\\n-    s-thread.adb<s-thread-ae653.adb\n+    s-thread.adb<s-thread-ae653.adb \\\n+    $(DUMMY_SOCKETS_TARGET_PAIRS)\n+\n+    GNATRTL_SOCKETS_OBJS =\n     EXTRA_GNATRTL_NONTASKING_OBJS += s-thread.o\n+  else\n+    LIBGNAT_TARGET_PAIRS += \\\n+    g-socthi.ads<g-socthi-vxworks.ads \\\n+    g-socthi.adb<g-socthi-vxworks.adb \\\n+    g-stsifd.adb<g-stsifd-sockets.adb \\\n+    g-sttsne.adb<g-sttsne-vxworks.adb \\\n+    g-sttsne.ads<g-sttsne-locking.ads\n   endif\n \n   ifeq ($(strip $(filter-out yes,$(TRACE))),)\n@@ -604,11 +625,6 @@ ifeq ($(strip $(filter-out %86 wrs vxworksae,$(targ))),)\n   s-vxwext.adb<s-vxwext-noints.adb \\\n   s-vxwext.ads<s-vxwext-vthreads.ads \\\n   s-vxwork.ads<s-vxwork-x86.ads \\\n-  g-socthi.ads<g-socthi-vxworks.ads \\\n-  g-socthi.adb<g-socthi-vxworks.adb \\\n-  g-stsifd.adb<g-stsifd-sockets.adb \\\n-  g-sttsne.adb<g-sttsne-vxworks.adb \\\n-  g-sttsne.ads<g-sttsne-locking.ads \\\n   g-trasym.ads<g-trasym-unimplemented.ads \\\n   g-trasym.adb<g-trasym-unimplemented.adb \\\n   system.ads<system-vxworks-x86.ads\n@@ -623,8 +639,18 @@ ifeq ($(strip $(filter-out %86 wrs vxworksae,$(targ))),)\n   # Extra pairs for the vthreads runtime\n   ifeq ($(strip $(filter-out vthreads,$(THREAD_KIND))),)\n     LIBGNAT_TARGET_PAIRS += \\\n-    s-thread.adb<s-thread-ae653.adb\n+    s-thread.adb<s-thread-ae653.adb \\\n+    $(DUMMY_SOCKETS_TARGET_PAIRS)\n+\n+    GNATRTL_SOCKETS_OBJS =\n     EXTRA_GNATRTL_NONTASKING_OBJS += s-thread.o\n+  else\n+    LIBGNAT_TARGET_PAIRS += \\\n+    g-socthi.ads<g-socthi-vxworks.ads \\\n+    g-socthi.adb<g-socthi-vxworks.adb \\\n+    g-stsifd.adb<g-stsifd-sockets.adb \\\n+    g-sttsne.adb<g-sttsne-vxworks.adb \\\n+    g-sttsne.ads<g-sttsne-locking.ads\n   endif\n \n   ifeq ($(strip $(filter-out yes,$(TRACE))),)\n@@ -726,25 +752,41 @@ ifeq ($(strip $(filter-out %86 wrs vxworks,$(targ))),)\n \n     EXTRA_GNATRTL_NONTASKING_OBJS=s-vxwexc.o\n   else\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-interr.adb<s-interr-hwint.adb \\\n-    s-tpopsp.adb<s-tpopsp-vxworks.adb\n-\n-    ifeq ($(strip $(filter-out kernel,$(THREAD_KIND))),)\n+    ifeq ($(strip $(filter-out rtp-smp, $(THREAD_KIND))),)\n       LIBGNAT_TARGET_PAIRS += \\\n-      s-vxwext.ads<s-vxwext-kernel.ads \\\n-      s-vxwext.adb<s-vxwext-kernel.adb \\\n-      system.ads<system-vxworks-x86-kernel.ads\n+      s-vxwext.ads<s-vxwext-rtp.ads \\\n+      s-vxwext.adb<s-vxwext-rtp.adb \\\n+      s-tpopsp.adb<s-tpopsp-vxworks-tls.adb \\\n+      system.ads<system-vxworks-x86-rtp.ads\n \n       EXTRA_GNATRTL_NONTASKING_OBJS=s-vxwexc.o\n     else\n-      LIBGNAT_TARGET_PAIRS += \\\n-      system.ads<system-vxworks-x86.ads\n-    endif\n+      ifeq ($(strip $(filter-out kernel-smp, $(THREAD_KIND))),)\n+        LIBGNAT_TARGET_PAIRS += \\\n+        s-interr.adb<s-interr-hwint.adb \\\n+        s-tpopsp.adb<s-tpopsp-vxworks-tls.adb \\\n+        s-vxwext.ads<s-vxwext-kernel.ads \\\n+        s-vxwext.adb<s-vxwext-kernel-smp.adb \\\n+        system.ads<system-vxworks-x86-kernel.ads\n+      else\n+        LIBGNAT_TARGET_PAIRS += \\\n+        s-interr.adb<s-interr-hwint.adb \\\n+        s-tpopsp.adb<s-tpopsp-vxworks.adb\n+\n+        ifeq ($(strip $(filter-out kernel,$(THREAD_KIND))),)\n+          LIBGNAT_TARGET_PAIRS += \\\n+          s-vxwext.ads<s-vxwext-kernel.ads \\\n+          s-vxwext.adb<s-vxwext-kernel.adb \\\n+          system.ads<system-vxworks-x86-kernel.ads\n+        else\n+          LIBGNAT_TARGET_PAIRS += \\\n+          system.ads<system-vxworks-x86.ads\n+        endif\n+      endif\n \n-    EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o s-vxwexc.o\n+      EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o s-vxwexc.o\n+    endif\n   endif\n-\n   EXTRA_GNATRTL_TASKING_OBJS=s-vxwork.o s-vxwext.o\n \n   EXTRA_LIBGNAT_SRCS+=vx_stack_info.c\n@@ -988,9 +1030,9 @@ ifeq ($(strip $(filter-out %86 linux%,$(arch) $(osys))),)\n       s-osinte.ads<s-osinte-linux.ads \\\n       s-osprim.adb<s-osprim-posix.adb \\\n       s-taprop.adb<s-taprop-linux.adb \\\n-      s-taspri.ads<s-taspri-posix.ads \\\n       s-tasinf.ads<s-tasinf-linux.ads \\\n       s-tasinf.adb<s-tasinf-linux.adb \\\n+      s-taspri.ads<s-taspri-posix.ads \\\n       system.ads<system-linux-x86.ads\n \n       EH_MECHANISM=-gcc\n@@ -1356,94 +1398,94 @@ LN_S = cp -p\n endif\n \n ifeq ($(strip $(filter-out alpha64 ia64 dec hp vms% openvms% alphavms%,$(targ))),)\n-ifeq ($(strip $(filter-out ia64 hp vms% openvms%,$(targ))),)\n-  LIBGNAT_TARGET_PAIRS_AUX1 = \\\n-  g-enblsp.adb<g-enblsp-vms-ia64.adb \\\n-  g-trasym.adb<g-trasym-vms-ia64.adb \\\n-  s-asthan.adb<s-asthan-vms-ia64.adb \\\n-  s-osinte.adb<s-osinte-vms-ia64.adb \\\n-  s-osinte.ads<s-osinte-vms-ia64.ads \\\n-  s-vaflop.adb<s-vaflop-vms-ia64.adb \\\n-  g-trasym.ads<g-trasym-unimplemented.ads \\\n-  g-trasym.adb<g-trasym-unimplemented.adb \\\n-  system.ads<system-vms-ia64.ads\n-\n-  LIBGNAT_TARGET_PAIRS_AUX2 = \\\n-  s-parame.ads<s-parame-vms-ia64.ads\n-else\n-ifeq ($(strip $(filter-out alpha64 dec vms% openvms% alphavms%,$(targ))),)\n-  LIBGNAT_TARGET_PAIRS_AUX1 = \\\n-  g-enblsp.adb<g-enblsp-vms-alpha.adb \\\n-  g-trasym.adb<g-trasym-vms-alpha.adb \\\n-  s-traent.adb<s-traent-vms.adb \\\n-  s-traent.ads<s-traent-vms.ads \\\n-  s-asthan.adb<s-asthan-vms-alpha.adb \\\n-  s-osinte.adb<s-osinte-vms.adb \\\n-  s-osinte.ads<s-osinte-vms.ads \\\n-  s-vaflop.adb<s-vaflop-vms-alpha.adb \\\n-  system.ads<system-vms_64.ads\n-\n-ifeq ($(strip $(filter-out express EXPRESS,$(THREAD_KIND))),)\n-  LIBGNAT_TARGET_PAIRS_AUX2 = \\\n-  s-parame.ads<s-parame-vms-restrict.ads\n-else\n-  LIBGNAT_TARGET_PAIRS_AUX2 = \\\n-  s-parame.ads<s-parame-vms-alpha.ads\n-endif\n-endif\n-endif\n+  ifeq ($(strip $(filter-out ia64 hp vms% openvms%,$(targ))),)\n+    LIBGNAT_TARGET_PAIRS_AUX1 = \\\n+      g-enblsp.adb<g-enblsp-vms-ia64.adb \\\n+      g-trasym.adb<g-trasym-vms-ia64.adb \\\n+      s-asthan.adb<s-asthan-vms-ia64.adb \\\n+      s-osinte.adb<s-osinte-vms-ia64.adb \\\n+      s-osinte.ads<s-osinte-vms-ia64.ads \\\n+      s-vaflop.adb<s-vaflop-vms-ia64.adb \\\n+      g-trasym.ads<g-trasym-unimplemented.ads \\\n+      g-trasym.adb<g-trasym-unimplemented.adb \\\n+      system.ads<system-vms-ia64.ads\n+\n+    LIBGNAT_TARGET_PAIRS_AUX2 = \\\n+      s-parame.ads<s-parame-vms-ia64.ads\n+  else\n+    ifeq ($(strip $(filter-out alpha64 dec vms% openvms% alphavms%,$(targ))),)\n+      LIBGNAT_TARGET_PAIRS_AUX1 = \\\n+        g-enblsp.adb<g-enblsp-vms-alpha.adb \\\n+        g-trasym.adb<g-trasym-vms-alpha.adb \\\n+        s-traent.adb<s-traent-vms.adb \\\n+        s-traent.ads<s-traent-vms.ads \\\n+        s-asthan.adb<s-asthan-vms-alpha.adb \\\n+        s-osinte.adb<s-osinte-vms.adb \\\n+        s-osinte.ads<s-osinte-vms.ads \\\n+        s-vaflop.adb<s-vaflop-vms-alpha.adb \\\n+        system.ads<system-vms_64.ads\n+\n+      ifeq ($(strip $(filter-out express EXPRESS,$(THREAD_KIND))),)\n+        LIBGNAT_TARGET_PAIRS_AUX2 = \\\n+          s-parame.ads<s-parame-vms-restrict.ads\n+      else\n+        LIBGNAT_TARGET_PAIRS_AUX2 = \\\n+          s-parame.ads<s-parame-vms-alpha.ads\n+      endif\n+    endif\n+  endif\n \n   LIBGNAT_TARGET_PAIRS = \\\n-  a-caldel.adb<a-caldel-vms.adb \\\n-  a-calend.adb<a-calend-vms.adb \\\n-  a-calend.ads<a-calend-vms.ads \\\n-  a-dirval.adb<a-dirval-vms.adb \\\n-  a-excpol.adb<a-excpol-abort.adb \\\n-  a-intnam.ads<a-intnam-vms.ads \\\n-  a-numaux.ads<a-numaux-vms.ads \\\n-  g-expect.adb<g-expect-vms.adb \\\n-  g-socthi.ads<g-socthi-vms.ads \\\n-  g-socthi.adb<g-socthi-vms.adb \\\n-  g-stsifd.adb<g-stsifd-sockets.adb \\\n-  g-sttsne.adb<g-sttsne-locking.adb \\\n-  g-sttsne.ads<g-sttsne-locking.ads \\\n-  i-c.ads<i-c-vms_64.ads \\\n-  i-cstrin.ads<i-cstrin-vms_64.ads \\\n-  i-cstrin.adb<i-cstrin-vms_64.adb \\\n-  i-cpoint.ads<i-cpoint-vms_64.ads \\\n-  i-cpoint.adb<i-cpoint-vms_64.adb \\\n-  i-cstrea.adb<i-cstrea-vms.adb \\\n-  memtrack.adb<memtrack-vms_64.adb \\\n-  s-auxdec.ads<s-auxdec-vms_64.ads \\\n-  s-crtl.ads<s-crtl-vms_64.ads \\\n-  s-inmaop.adb<s-inmaop-vms.adb \\\n-  s-interr.adb<s-interr-vms.adb \\\n-  s-intman.adb<s-intman-vms.adb \\\n-  s-intman.ads<s-intman-vms.ads \\\n-  s-memory.adb<s-memory-vms_64.adb \\\n-  s-memory.ads<s-memory-vms_64.ads \\\n-  s-osprim.adb<s-osprim-vms.adb \\\n-  s-osprim.ads<s-osprim-vms.ads \\\n-  s-taprop.adb<s-taprop-vms.adb \\\n-  s-tasdeb.adb<s-tasdeb-vms.adb \\\n-  s-taspri.ads<s-taspri-vms.ads \\\n-  s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n-  s-tpopde.adb<s-tpopde-vms.adb \\\n-  s-tpopde.ads<s-tpopde-vms.ads \\\n-  $(LIBGNAT_TARGET_PAIRS_AUX1) \\\n-  $(LIBGNAT_TARGET_PAIRS_AUX2)\n-\n-ifeq ($(strip $(filter-out ia64 hp vms% openvms%,$(targ))),)\n-  TOOLS_TARGET_PAIRS= \\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-vms-ia64.adb \\\n-  symbols.adb<symbols-vms.adb \\\n-  symbols-processing.adb<symbols-processing-vms-ia64.adb\n-else\n-  TOOLS_TARGET_PAIRS= \\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-vms-alpha.adb \\\n-  symbols.adb<symbols-vms.adb \\\n-  symbols-processing.adb<symbols-processing-vms-alpha.adb\n-endif\n+    a-caldel.adb<a-caldel-vms.adb \\\n+    a-calend.adb<a-calend-vms.adb \\\n+    a-calend.ads<a-calend-vms.ads \\\n+    a-dirval.adb<a-dirval-vms.adb \\\n+    a-excpol.adb<a-excpol-abort.adb \\\n+    a-intnam.ads<a-intnam-vms.ads \\\n+    a-numaux.ads<a-numaux-vms.ads \\\n+    g-expect.adb<g-expect-vms.adb \\\n+    g-socthi.ads<g-socthi-vms.ads \\\n+    g-socthi.adb<g-socthi-vms.adb \\\n+    g-stsifd.adb<g-stsifd-sockets.adb \\\n+    g-sttsne.adb<g-sttsne-locking.adb \\\n+    g-sttsne.ads<g-sttsne-locking.ads \\\n+    i-c.ads<i-c-vms_64.ads \\\n+    i-cstrin.ads<i-cstrin-vms_64.ads \\\n+    i-cstrin.adb<i-cstrin-vms_64.adb \\\n+    i-cpoint.ads<i-cpoint-vms_64.ads \\\n+    i-cpoint.adb<i-cpoint-vms_64.adb \\\n+    i-cstrea.adb<i-cstrea-vms.adb \\\n+    memtrack.adb<memtrack-vms_64.adb \\\n+    s-auxdec.ads<s-auxdec-vms_64.ads \\\n+    s-crtl.ads<s-crtl-vms_64.ads \\\n+    s-inmaop.adb<s-inmaop-vms.adb \\\n+    s-interr.adb<s-interr-vms.adb \\\n+    s-intman.adb<s-intman-vms.adb \\\n+    s-intman.ads<s-intman-vms.ads \\\n+    s-memory.adb<s-memory-vms_64.adb \\\n+    s-memory.ads<s-memory-vms_64.ads \\\n+    s-osprim.adb<s-osprim-vms.adb \\\n+    s-osprim.ads<s-osprim-vms.ads \\\n+    s-taprop.adb<s-taprop-vms.adb \\\n+    s-tasdeb.adb<s-tasdeb-vms.adb \\\n+    s-taspri.ads<s-taspri-vms.ads \\\n+    s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n+    s-tpopde.adb<s-tpopde-vms.adb \\\n+    s-tpopde.ads<s-tpopde-vms.ads \\\n+    $(LIBGNAT_TARGET_PAIRS_AUX1) \\\n+    $(LIBGNAT_TARGET_PAIRS_AUX2)\n+\n+  ifeq ($(strip $(filter-out ia64 hp vms% openvms%,$(targ))),)\n+    TOOLS_TARGET_PAIRS= \\\n+      mlib-tgt-specific.adb<mlib-tgt-specific-vms-ia64.adb \\\n+      symbols.adb<symbols-vms.adb \\\n+      symbols-processing.adb<symbols-processing-vms-ia64.adb\n+  else\n+    TOOLS_TARGET_PAIRS= \\\n+      mlib-tgt-specific.adb<mlib-tgt-specific-vms-alpha.adb \\\n+      symbols.adb<symbols-vms.adb \\\n+      symbols-processing.adb<symbols-processing-vms-alpha.adb\n+  endif\n \n adamsg.o: adamsg.msg\n \t-$(DECC) --cc=message adamsg.msg -o adamsg.o\n@@ -1453,10 +1495,10 @@ adamsg.o: adamsg.msg\n   GMEM_LIB = gmemlib\n   EH_MECHANISM=-gcc\n   GNATLIB_SHARED=gnatlib-shared-vms\n-ifeq ($(strip $(filter-out alpha64 dec vms% openvms% alphavms%,$(targ))),)\n-  EXTRA_LIBGNAT_SRCS=vmshandler.asm\n-  EXTRA_LIBGNAT_OBJS=vmshandler.o\n-endif\n+  ifeq ($(strip $(filter-out alpha64 dec vms% openvms% alphavms%,$(targ))),)\n+    EXTRA_LIBGNAT_SRCS=vmshandler.asm\n+    EXTRA_LIBGNAT_OBJS=vmshandler.o\n+  endif\n   EXTRA_LIBGNAT_SRCS+=adamsg.msg\n   EXTRA_LIBGNAT_OBJS+=adamsg.o\n   EXTRA_GNATRTL_TASKING_OBJS=s-tpopde.o\n@@ -1471,6 +1513,12 @@ endif\n   LIBRARY_VERSION := $(subst .,_,$(LIB_VERSION))\n endif\n \n+ifeq ($(strip $(filter-out avr none powerpc% eabispe leon% erc32% unknown elf,$(targ))),)\n+  TOOLS_TARGET_PAIRS=\\\n+  mlib-tgt-specific.adb<mlib-tgt-specific-xi.adb \\\n+  indepsw.adb<indepsw-gnu.adb\n+endif\n+\n ifeq ($(strip $(filter-out cygwin32% mingw32% pe,$(osys))),)\n   LIBGNAT_TARGET_PAIRS = \\\n   a-dirval.adb<a-dirval-mingw.adb \\\n@@ -1799,7 +1847,7 @@ ifeq ($(strip $(filter-out sh4% linux%,$(arch) $(osys))),)\n   TOOLS_TARGET_PAIRS =  \\\n     mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n     indepsw.adb<indepsw-linux.adb\n-\n+ \n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o\n   EH_MECHANISM=-gcc\n   MISCLIB=\n@@ -1842,6 +1890,32 @@ ifeq ($(strip $(filter-out %ia64 linux%,$(arch) $(osys))),)\n   LIBRARY_VERSION := $(LIB_VERSION)\n endif\n \n+ifeq ($(strip $(filter-out ia64% hp hpux%,$(targ))),)\n+  LIBGNAT_TARGET_PAIRS = \\\n+  a-intnam.ads<a-intnam-hpux.ads \\\n+  s-inmaop.adb<s-inmaop-posix.adb \\\n+  s-intman.adb<s-intman-posix.adb \\\n+  s-osinte.adb<s-osinte-posix.adb \\\n+  s-osinte.ads<s-osinte-hpux.ads \\\n+  s-osprim.adb<s-osprim-posix.adb \\\n+  s-taprop.adb<s-taprop-posix.adb \\\n+  s-taspri.ads<s-taspri-posix-noaltstack.ads \\\n+  s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n+  system.ads<system-hpux-ia64.ads\n+\n+  TOOLS_TARGET_PAIRS = \\\n+  mlib-tgt-specific.adb<mlib-tgt-specific-ia64-hpux.adb\n+\n+  MISCLIB=\n+  THREADSLIB=-lpthread\n+  GNATLIB_SHARED=gnatlib-shared-dual\n+  GMEM_LIB = gmemlib\n+  soext = .sl\n+  SO_OPTS = -Wl,+h,\n+  PREFIX_OBJS=$(PREFIX_REAL_OBJS)\n+  LIBRARY_VERSION := $(LIB_VERSION)\n+endif\n+\n ifeq ($(strip $(filter-out alpha% linux%,$(arch) $(osys))),)\n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<a-intnam-linux.ads \\\n@@ -1910,10 +1984,10 @@ ifeq ($(strip $(filter-out darwin%,$(osys))),)\n     LIBGNAT_TARGET_PAIRS = \\\n     a-intnam.ads<a-intnam-darwin.ads \\\n     s-inmaop.adb<s-inmaop-posix.adb \\\n-    s-intman.adb<s-intman-posix.adb \\\n+    s-intman.adb<s-intman-susv3.adb \\\n     s-osinte.adb<s-osinte-darwin.adb \\\n     s-osinte.ads<s-osinte-darwin.ads \\\n-    s-osprim.adb<s-osprim-posix.adb \\\n+    s-osprim.adb<s-osprim-darwin.adb \\\n     s-taprop.adb<s-taprop-posix.adb \\\n     s-taspri.ads<s-taspri-posix.ads \\\n     s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n@@ -1934,10 +2008,10 @@ ifeq ($(strip $(filter-out darwin%,$(osys))),)\n     LIBGNAT_TARGET_PAIRS = \\\n     a-intnam.ads<a-intnam-darwin.ads \\\n     s-inmaop.adb<s-inmaop-posix.adb \\\n-    s-intman.adb<s-intman-posix.adb \\\n+    s-intman.adb<s-intman-susv3.adb \\\n     s-osinte.adb<s-osinte-darwin.adb \\\n     s-osinte.ads<s-osinte-darwin.ads \\\n-    s-osprim.adb<s-osprim-posix.adb \\\n+    s-osprim.adb<s-osprim-darwin.adb \\\n     s-taprop.adb<s-taprop-posix.adb \\\n     s-taspri.ads<s-taspri-posix.ads \\\n     s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n@@ -2176,8 +2250,8 @@ install-gnatlib: ../stamp-gnatlib-$(RTSDIR)\n \t      $(LN_S) lib$${file}$(hyphen)$(LIBRARY_VERSION)$(soext) \\\n \t      $(DESTDIR)$(ADA_RTL_OBJ_DIR)/lib$${file}$(soext); \\\n \t   fi; \\\n-\t   if [ -d rts/lib$${file}$(hyphen)$(LIBRARY_VERSION)$(soext).dSYM ]; then \\\n-\t      $(CP) -r rts/lib$${file}$(hyphen)$(LIBRARY_VERSION)$(soext).dSYM \\\n+\t   if [ -d $(RTSDIR)/lib$${file}$(hyphen)$(LIBRARY_VERSION)$(soext).dSYM ]; then \\\n+\t      $(CP) -r $(RTSDIR)/lib$${file}$(hyphen)$(LIBRARY_VERSION)$(soext).dSYM \\\n \t        $(DESTDIR)$(ADA_RTL_OBJ_DIR); \\\n \t   fi; \\\n \tdone\n@@ -2387,8 +2461,8 @@ gnatlib-shared-darwin:\n \t\tlibgnat$(soext)\n \tcd $(RTSDIR); $(LN_S) libgnarl$(hyphen)$(LIBRARY_VERSION)$(soext) \\\n \t\tlibgnarl$(soext)\n-\tcd rts; dsymutil libgnat$(hyphen)$(LIBRARY_VERSION)$(soext)\n-\tcd rts; dsymutil libgnarl$(hyphen)$(LIBRARY_VERSION)$(soext)\n+\tcd $(RTSDIR); dsymutil libgnat$(hyphen)$(LIBRARY_VERSION)$(soext)\n+\tcd $(RTSDIR); dsymutil libgnarl$(hyphen)$(LIBRARY_VERSION)$(soext)\n \n gnatlib-shared-vms:\n \t$(MAKE) $(FLAGS_TO_PASS) \\\n@@ -2552,15 +2626,15 @@ vx_stack_info.o : vx_stack_info.c\n \n cio.o     : cio.c\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n-\t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n+\t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n init.o    : init.c adaint.h raise.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n-\t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n+\t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n initialize.o : initialize.c raise.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n-\t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n+\t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n targext.o : targext.c\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n@@ -2571,7 +2645,7 @@ targext.o : targext.c\n # the SEH handling on Windows. The reasons are not clear.\n seh_init.o : seh_init.c raise.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) -O0 \\\n-\t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n+\t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n # Need to keep the frame pointer in this file to pop the stack properly on\n # some targets."}, {"sha": "24928a1f9361c7b18e1faa4713ff4ae6e6dedbf3", "filename": "gcc/ada/gsocket.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fgsocket.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fgsocket.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgsocket.h?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -29,9 +29,9 @@\n  *                                                                          *\n  ****************************************************************************/\n \n-#if defined(__nucleus__)\n+#if defined(__nucleus__) || defined(VTHREADS)\n \n-#warning Sockets not supported on this platform\n+#warning Sockets not supported on these platforms\n #undef HAVE_SOCKETS\n \n #else"}, {"sha": "c8d3fd10cf83925ead33f2ac617c78464cd76344", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 2000-2008, Free Software Foundation, Inc.        --\n+--           Copyright (C) 2000-2009, Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "db43ab094a65aecddd03dca6e09e6f70ba0eeb88", "filename": "gcc/ada/s-htable.adb", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fs-htable.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fs-htable.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-htable.adb?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                    Copyright (C) 1995-2008, AdaCore                      --\n+--                    Copyright (C) 1995-2009, AdaCore                      --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,6 +34,7 @@\n pragma Compiler_Unit;\n \n with Ada.Unchecked_Deallocation;\n+with System.String_Hash;\n \n package body System.HTable is\n \n@@ -340,22 +341,14 @@ package body System.HTable is\n    ----------\n \n    function Hash (Key : String) return Header_Num is\n-\n       type Uns is mod 2 ** 32;\n \n-      function Rotate_Left (Value : Uns; Amount : Natural) return Uns;\n-      pragma Import (Intrinsic, Rotate_Left);\n-\n-      Hash_Value : Uns;\n+      function Hash_Fun is\n+         new System.String_Hash.Hash (Character, String, Uns);\n \n    begin\n-      Hash_Value := 0;\n-      for J in Key'Range loop\n-         Hash_Value := Rotate_Left (Hash_Value, 3) + Character'Pos (Key (J));\n-      end loop;\n-\n       return Header_Num'First +\n-               Header_Num'Base (Hash_Value mod Header_Num'Range_Length);\n+        Header_Num'Base (Hash_Fun (Key) mod Header_Num'Range_Length);\n    end Hash;\n \n end System.HTable;"}, {"sha": "2e3a730d27bc1cd3dee1424f8e252751a965b369", "filename": "gcc/ada/s-strhas.adb", "status": "renamed", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fs-strhas.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fs-strhas.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-strhas.adb?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -1,12 +1,12 @@\n ------------------------------------------------------------------------------\n --                                                                          --\n---                         GNAT LIBRARY COMPONENTS                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n---                A D A . S T R I N G S . W I D E _ H A S H                 --\n+--                    S Y S T E M . S T R I N G _ H A S H                   --\n --                                                                          --\n---                                 B o d y                                  --\n+--                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2009, Free Software Foundation, Inc.         --\n+--             Copyright (C) 2009, Free Software Foundation, Inc.           --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -24,28 +24,30 @@\n -- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n -- <http://www.gnu.org/licenses/>.                                          --\n --                                                                          --\n--- This unit was originally developed by Matthew J Heaney.                  --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n ------------------------------------------------------------------------------\n \n---  Note: source of this algorithm: GNAT.HTable.Hash (g-htable.adb)\n-\n-function Ada.Strings.Wide_Hash\n-  (Key : Wide_String) return Containers.Hash_Type\n-is\n-   use Ada.Containers;\n+package body System.String_Hash is\n \n-   function Rotate_Left\n-     (Value  : Hash_Type;\n-      Amount : Natural) return Hash_Type;\n-   pragma Import (Intrinsic, Rotate_Left);\n+   --  Compute a hash value for a key. The approach here is follows\n+   --  the algorithm used in GNU Awk and the ndbm substitute SDBM by\n+   --  Ozan Yigit.\n \n-   Tmp : Hash_Type;\n+   function Hash (Key : Key_Type) return Hash_Type\n+   is\n+      function Shift_Left\n+        (Value : Hash_Type; Amount : Natural) return Hash_Type;\n+      pragma Import (Intrinsic, Shift_Left);\n \n-begin\n-   Tmp := 0;\n-   for J in Key'Range loop\n-      Tmp := Rotate_Left (Tmp, 3) + Wide_Character'Pos (Key (J));\n-   end loop;\n+      H : Hash_Type := 0;\n+   begin\n+      for J in Key'Range loop\n+         H := Char_Type'Pos (Key (J))\n+           + Shift_Left (H, 6) + Shift_Left (H, 16) - H;\n+      end loop;\n+      return H;\n+   end Hash;\n \n-   return Tmp;\n-end Ada.Strings.Wide_Hash;\n+end System.String_Hash;", "previous_filename": "gcc/ada/a-stwiha.adb"}, {"sha": "bd7c7431c151f2f405694fbaa37deb92f1ea8ace", "filename": "gcc/ada/s-strhas.ads", "status": "renamed", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fs-strhas.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fs-strhas.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-strhas.ads?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -1,12 +1,12 @@\n ------------------------------------------------------------------------------\n --                                                                          --\n---                         GNAT LIBRARY COMPONENTS                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n---            A D A . S T R I N G S . W I D E _ W I D E _ H A S H           --\n+--                    S Y S T E M . S T R I N G _ H A S H                   --\n --                                                                          --\n---                                 B o d y                                  --\n+--                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2009, Free Software Foundation, Inc.         --\n+--             Copyright (C) 2009, Free Software Foundation, Inc.           --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -24,28 +24,34 @@\n -- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n -- <http://www.gnu.org/licenses/>.                                          --\n --                                                                          --\n--- This unit was originally developed by Matthew J Heaney.                  --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n ------------------------------------------------------------------------------\n \n---  Note: source of this algorithm: GNAT.HTable.Hash (g-htable.adb)\n+--  This package provides a generic hashing function over strings,\n+--  suitable for use with a string keyed hash table.\n+--\n+--  The strategy used here is not appropriate for applications that\n+--  require cryptographically strong hashes, or for application which\n+--  wish to use very wide hash values as pseudo unique identifiers. In\n+--  such cases please refer to GNAT.SHA1 and GNAT.MD5.\n+\n+package System.String_Hash is\n+   pragma Pure;\n \n-function Ada.Strings.Wide_Wide_Hash\n-  (Key : Wide_Wide_String) return Containers.Hash_Type\n-is\n-   use Ada.Containers;\n+   generic\n+      type Char_Type is (<>);\n+      --  The character type composing the key string type.\n \n-   function Rotate_Left\n-     (Value  : Hash_Type;\n-      Amount : Natural) return Hash_Type;\n-   pragma Import (Intrinsic, Rotate_Left);\n+      type Key_Type is array (Positive range <>) of Char_Type;\n+      --  The string type to use as a hash key.\n \n-   Tmp : Hash_Type;\n+      type Hash_Type is mod <>;\n+      --  The type to be returned as a hash value.\n \n-begin\n-   Tmp := 0;\n-   for J in Key'Range loop\n-      Tmp := Rotate_Left (Tmp, 3) + Wide_Wide_Character'Pos (Key (J));\n-   end loop;\n+   function Hash (Key : Key_Type) return Hash_Type;\n+   pragma Inline (Hash);\n+   --  Compute a hash value for a key.\n \n-   return Tmp;\n-end Ada.Strings.Wide_Wide_Hash;\n+end System.String_Hash;", "previous_filename": "gcc/ada/a-stzhas.adb"}, {"sha": "ed1f745b1fd514751851563015caf8a503cd2a63", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -1831,7 +1831,7 @@ package body Sem_Ch6 is\n                 Body_Spec);\n             end if;\n \n-         elsif Style_Check\n+         elsif Style_Check --  ??? incorrect use of Style_Check!\n            and then Is_Overriding_Operation (Spec_Id)\n          then\n             pragma Assert (Unit_Declaration_Node (Body_Id) = N);"}, {"sha": "df3bee2c3e8bf94d4e186edc3a56cab7d9593e25", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=d88a51b1ca66baac89d59b5e379ef1b4f3f78eb4", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *            Copyright (C) 1992-2009 Free Software Foundation, Inc.        *\n+ *         Copyright (C) 1992-2009, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -35,7 +35,7 @@\n #ifdef __vxworks\n #include \"ioLib.h\"\n #include \"dosFsLib.h\"\n-#ifndef __RTP__\n+#if ! defined ( __RTP__) && ! defined (VTHREADS)\n # include \"nfsLib.h\"\n #endif\n #include \"selectLib.h\"\n@@ -928,7 +928,7 @@ __gnat_is_file_not_found_error (int errno_val) {\n        * filesystem-specific variants of this error.\n        */\n       case S_dosFsLib_FILE_NOT_FOUND:\n-#ifndef __RTP__\n+#if ! defined (__RTP__) && ! defined (VTHREADS)\n       case S_nfsLib_NFSERR_NOENT:\n #endif\n #endif"}]}