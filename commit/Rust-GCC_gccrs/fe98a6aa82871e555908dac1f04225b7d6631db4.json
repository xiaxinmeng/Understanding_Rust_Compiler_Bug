{"sha": "fe98a6aa82871e555908dac1f04225b7d6631db4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU5OGE2YWE4Mjg3MWU1NTU5MDhkYWMxZjA0MjI1YjdkNjYzMWRiNA==", "commit": {"author": {"name": "Cyrille Comar", "email": "comar@act-europe.fr", "date": "2004-10-27T13:41:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-10-27T13:41:23Z"}, "message": "sem_ch13.adb (Analyze_Attribute_Definition_Clause, [...]): enhance, document & limit detection of non-sharable internal pools.\n\n2004-10-26  Cyrille Comar  <comar@act-europe.fr>\n\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause, case\n\t'Storage_Pool): enhance, document & limit detection of non-sharable\n\tinternal pools.\n\n\t* impunit.adb: Make System.Pool_Global and System.Pool_Local visible.\n\n\t* s-pooglo.ads: Add more documentation now that this pool is properly\n\tdocumented.\n\nFrom-SVN: r89669", "tree": {"sha": "643fdd5de6d854ea33ca10ad589c8bd839c75491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/643fdd5de6d854ea33ca10ad589c8bd839c75491"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe98a6aa82871e555908dac1f04225b7d6631db4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe98a6aa82871e555908dac1f04225b7d6631db4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe98a6aa82871e555908dac1f04225b7d6631db4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe98a6aa82871e555908dac1f04225b7d6631db4/comments", "author": null, "committer": null, "parents": [{"sha": "db09b5b61bf12f4ca99ab11461f87c6dc9506e25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db09b5b61bf12f4ca99ab11461f87c6dc9506e25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db09b5b61bf12f4ca99ab11461f87c6dc9506e25"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "d2e1d5daea3bcba15113ffed320dfa6aa4a5b32c", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe98a6aa82871e555908dac1f04225b7d6631db4/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe98a6aa82871e555908dac1f04225b7d6631db4/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=fe98a6aa82871e555908dac1f04225b7d6631db4", "patch": "@@ -297,6 +297,8 @@ package body Impunit is\n      \"s-assert\",    -- System.Assertions\n      \"s-memory\",    -- System.Memory\n      \"s-parint\",    -- System.Partition_Interface\n+     \"s-pooglo\",    -- System.Pool_Global\n+     \"s-pooloc\",    -- System.Pool_Local\n      \"s-restri\",    -- System.Restrictions\n      \"s-rident\",    -- System.Rident\n      \"s-tasinf\",    -- System.Task_Info"}, {"sha": "67045ad3e6cf2e40d13acfef503266ce06a8b5ca", "filename": "gcc/ada/s-pooglo.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe98a6aa82871e555908dac1f04225b7d6631db4/gcc%2Fada%2Fs-pooglo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe98a6aa82871e555908dac1f04225b7d6631db4/gcc%2Fada%2Fs-pooglo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pooglo.ads?ref=fe98a6aa82871e555908dac1f04225b7d6631db4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--        Copyright (C) 1992-1994, 2004 Free Software Foundation, Inc.      --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -47,7 +47,8 @@ pragma Elaborate_Body;\n    --    no automatic reclaim\n    --    minimal overhead\n \n-   --  Default pool in the compiler for access types globally declared\n+   --  Pool simulating the allocation/deallocation strategy used by the\n+   --  compiler for access types globally declared.\n \n    type Unbounded_No_Reclaim_Pool is new\n      System.Storage_Pools.Root_Storage_Pool with null record;\n@@ -68,7 +69,10 @@ pragma Elaborate_Body;\n       Storage_Size : System.Storage_Elements.Storage_Count;\n       Alignment    : System.Storage_Elements.Storage_Count);\n \n-   --  Pool object for the compiler\n+   --  Pool object used by the compiler when implicit Storage Pool objects are\n+   --  explicitly referred to. For instance when writing something like:\n+   --     for T'Storage_Pool use Q'Storage_Pool;\n+   --  and Q'Storage_Pool hasn't been defined explicitly.\n \n    Global_Pool_Object : Unbounded_No_Reclaim_Pool;\n "}, {"sha": "6613ee6b393a3e73aa5905c41a9676c3bafc37b6", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe98a6aa82871e555908dac1f04225b7d6631db4/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe98a6aa82871e555908dac1f04225b7d6631db4/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=fe98a6aa82871e555908dac1f04225b7d6631db4", "patch": "@@ -1250,6 +1250,7 @@ package body Sem_Ch13 is\n \n          when Attribute_Storage_Pool => Storage_Pool : declare\n             Pool : Entity_Id;\n+            T    : Entity_Id;\n \n          begin\n             if Ekind (U_Ent) /= E_Access_Type\n@@ -1276,6 +1277,26 @@ package body Sem_Ch13 is\n             Analyze_And_Resolve\n               (Expr, Class_Wide_Type (RTE (RE_Root_Storage_Pool)));\n \n+            if Nkind (Expr) = N_Type_Conversion then\n+               T := Etype (Expression (Expr));\n+            else\n+               T := Etype (Expr);\n+            end if;\n+\n+            --  The Stack_Bounded_Pool is used internally for implementing\n+            --  access types with a Storage_Size. Since it only work\n+            --  properly when used on one specific type, we need to check\n+            --  that it is not highjacked improperly:\n+            --    type T is access Integer;\n+            --    for T'Storage_Size use n;\n+            --    type Q is access Float;\n+            --    for Q'Storage_Size use T'Storage_Size; -- incorrect\n+\n+            if Base_Type (T) = RTE (RE_Stack_Bounded_Pool) then\n+               Error_Msg_N (\"non-sharable internal Pool\", Expr);\n+               return;\n+            end if;\n+\n             --  If the argument is a name that is not an entity name, then\n             --  we construct a renaming operation to define an entity of\n             --  type storage pool.\n@@ -1320,33 +1341,14 @@ package body Sem_Ch13 is\n                   Pool := Entity (Expression (Renamed_Object (Pool)));\n                end if;\n \n-               if Present (Etype (Pool))\n-                 and then Etype (Pool) /= RTE (RE_Stack_Bounded_Pool)\n-                 and then Etype (Pool) /= RTE (RE_Unbounded_Reclaim_Pool)\n-               then\n-                  Set_Associated_Storage_Pool (U_Ent, Pool);\n-               else\n-                  Error_Msg_N (\"Non sharable GNAT Pool\", Expr);\n-               end if;\n-\n-            --  The pool may be specified as the Storage_Pool of some other\n-            --  type. It is rewritten as a class_wide conversion of the\n-            --  corresponding pool entity.\n+               Set_Associated_Storage_Pool (U_Ent, Pool);\n \n             elsif Nkind (Expr) = N_Type_Conversion\n               and then Is_Entity_Name (Expression (Expr))\n               and then Nkind (Original_Node (Expr)) = N_Attribute_Reference\n             then\n                Pool := Entity (Expression (Expr));\n-\n-               if Present (Etype (Pool))\n-                 and then Etype (Pool) /= RTE (RE_Stack_Bounded_Pool)\n-                 and then Etype (Pool) /= RTE (RE_Unbounded_Reclaim_Pool)\n-               then\n-                  Set_Associated_Storage_Pool (U_Ent, Pool);\n-               else\n-                  Error_Msg_N (\"Non sharable GNAT Pool\", Expr);\n-               end if;\n+               Set_Associated_Storage_Pool (U_Ent, Pool);\n \n             else\n                Error_Msg_N (\"incorrect reference to a Storage Pool\", Expr);"}]}