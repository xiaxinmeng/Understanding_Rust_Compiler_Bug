{"sha": "9d98b6d8dcaed2b0f5c87418ca2036d1bdc5a881", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ5OGI2ZDhkY2FlZDJiMGY1Yzg3NDE4Y2EyMDM2ZDFiZGM1YTg4MQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-10-10T15:23:47Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-10-10T15:23:47Z"}, "message": "[Ada] Do not inline subprograms with deep parameter/result in GNATprove\n\n2019-10-10  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* inline.adb (Can_Be_Inlined_In_GNATprove_Mode): Add subprograms\n\twith deep parameter or result type as not candidates for\n\tinlining.\n\nFrom-SVN: r276821", "tree": {"sha": "9a76d85d4d881adc82e337253d3d29bcd8e264f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a76d85d4d881adc82e337253d3d29bcd8e264f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d98b6d8dcaed2b0f5c87418ca2036d1bdc5a881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d98b6d8dcaed2b0f5c87418ca2036d1bdc5a881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d98b6d8dcaed2b0f5c87418ca2036d1bdc5a881", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d98b6d8dcaed2b0f5c87418ca2036d1bdc5a881/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb73a3a91b45bc473705c2f5f82434b2bcbdae3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb73a3a91b45bc473705c2f5f82434b2bcbdae3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb73a3a91b45bc473705c2f5f82434b2bcbdae3c"}], "stats": {"total": 119, "additions": 116, "deletions": 3}, "files": [{"sha": "6eca0b8b7cc357b648cbf57ec142df7050c77246", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98b6d8dcaed2b0f5c87418ca2036d1bdc5a881/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98b6d8dcaed2b0f5c87418ca2036d1bdc5a881/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9d98b6d8dcaed2b0f5c87418ca2036d1bdc5a881", "patch": "@@ -1,4 +1,5 @@\n-2019-10-10  Vadim Godunko  <godunko@adacore.com>\n+2019-10-10  Yannick Moy  <moy@adacore.com>\n \n-\t* libgnat/g-exptty.ads (TTY_Process_Descriptor): Set default\n-\tvalue for Process.\n\\ No newline at end of file\n+\t* inline.adb (Can_Be_Inlined_In_GNATprove_Mode): Add subprograms\n+\twith deep parameter or result type as not candidates for\n+\tinlining.\n\\ No newline at end of file"}, {"sha": "be2259479d2554b6e56691334ec87a4a75fefcf0", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98b6d8dcaed2b0f5c87418ca2036d1bdc5a881/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98b6d8dcaed2b0f5c87418ca2036d1bdc5a881/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=9d98b6d8dcaed2b0f5c87418ca2036d1bdc5a881", "patch": "@@ -1493,6 +1493,12 @@ package body Inline is\n      (Spec_Id : Entity_Id;\n       Body_Id : Entity_Id) return Boolean\n    is\n+      function Has_Formal_Or_Result_Of_Deep_Type\n+        (Id : Entity_Id) return Boolean;\n+      --  Returns true if the subprogram has at least one formal parameter or\n+      --  a return type of a deep type: either an access type or a composite\n+      --  type containing an access type.\n+\n       function Has_Formal_With_Discriminant_Dependent_Fields\n         (Id : Entity_Id) return Boolean;\n       --  Returns true if the subprogram has at least one formal parameter of\n@@ -1518,6 +1524,104 @@ package body Inline is\n       --  knowledge of the SPARK boundary is needed to determine exactly\n       --  traversal functions.\n \n+      ---------------------------------------\n+      -- Has_Formal_Or_Result_Of_Deep_Type --\n+      ---------------------------------------\n+\n+      function Has_Formal_Or_Result_Of_Deep_Type\n+        (Id : Entity_Id) return Boolean\n+      is\n+         function Is_Deep (Typ : Entity_Id) return Boolean;\n+         --  Return True if Typ is deep: either an access type or a composite\n+         --  type containing an access type.\n+\n+         -------------\n+         -- Is_Deep --\n+         -------------\n+\n+         function Is_Deep (Typ : Entity_Id) return Boolean is\n+         begin\n+            case Type_Kind'(Ekind (Typ)) is\n+               when Access_Kind =>\n+                  return True;\n+\n+               when E_Array_Type\n+                  | E_Array_Subtype\n+               =>\n+                  return Is_Deep (Component_Type (Typ));\n+\n+               when Record_Kind =>\n+                  declare\n+                     Comp : Entity_Id := First_Component_Or_Discriminant (Typ);\n+                  begin\n+                     while Present (Comp) loop\n+                        if Is_Deep (Etype (Comp)) then\n+                           return True;\n+                        end if;\n+                        Next_Component_Or_Discriminant (Comp);\n+                     end loop;\n+                  end;\n+                  return False;\n+\n+               when Scalar_Kind\n+                  | E_String_Literal_Subtype\n+                  | Concurrent_Kind\n+                  | Incomplete_Kind\n+                  | E_Exception_Type\n+                  | E_Subprogram_Type\n+               =>\n+                  return False;\n+\n+               when E_Private_Type\n+                  | E_Private_Subtype\n+                  | E_Limited_Private_Type\n+                  | E_Limited_Private_Subtype\n+               =>\n+                  --  Conservatively consider that the type might be deep if\n+                  --  its completion has not been seen yet.\n+\n+                  if No (Underlying_Type (Typ)) then\n+                     return True;\n+                  else\n+                     return Is_Deep (Underlying_Type (Typ));\n+                  end if;\n+            end case;\n+         end Is_Deep;\n+\n+         --  Local variables\n+\n+         Subp_Id    : constant Entity_Id := Ultimate_Alias (Id);\n+         Formal     : Entity_Id;\n+         Formal_Typ : Entity_Id;\n+\n+      --  Start of processing for Has_Formal_Or_Result_Of_Deep_Type\n+\n+      begin\n+         --  Inspect all parameters of the subprogram looking for a formal\n+         --  of a deep type.\n+\n+         Formal := First_Formal (Subp_Id);\n+         while Present (Formal) loop\n+            Formal_Typ := Etype (Formal);\n+\n+            if Is_Deep (Formal_Typ) then\n+               return True;\n+            end if;\n+\n+            Next_Formal (Formal);\n+         end loop;\n+\n+         --  Check whether this is a function whose return type is deep\n+\n+         if Ekind (Subp_Id) = E_Function\n+           and then Is_Deep (Etype (Subp_Id))\n+         then\n+            return True;\n+         end if;\n+\n+         return False;\n+      end Has_Formal_Or_Result_Of_Deep_Type;\n+\n       ---------------------------------------------------\n       -- Has_Formal_With_Discriminant_Dependent_Fields --\n       ---------------------------------------------------\n@@ -1777,6 +1881,14 @@ package body Inline is\n       elsif Has_Formal_With_Discriminant_Dependent_Fields (Id) then\n          return False;\n \n+      --  Do not inline subprograms with a formal parameter or return type of\n+      --  a deep type, as in that case inlining might generate code that\n+      --  violates borrow-checking rules of SPARK 3.10 even if the original\n+      --  code did not.\n+\n+      elsif Has_Formal_Or_Result_Of_Deep_Type (Id) then\n+         return False;\n+\n       --  Do not inline subprograms which may be traversal functions. Such\n       --  inlining introduces temporary variables of named access type for\n       --  which assignments are move instead of borrow/observe, possibly"}]}