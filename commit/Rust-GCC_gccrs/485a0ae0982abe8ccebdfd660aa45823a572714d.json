{"sha": "485a0ae0982abe8ccebdfd660aa45823a572714d", "node_id": "C_kwDOANBUbNoAKDQ4NWEwYWUwOTgyYWJlOGNjZWJkZmQ2NjBhYTQ1ODIzYTU3MjcxNGQ", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2022-05-11T10:40:42Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2022-05-13T10:24:11Z"}, "message": "arm: fix some issues in mve_vector_mem_operand\n\nThere are a couple of issues with the mve_vector_mem_operand function.\nFirstly, SP is permitted as a register provided there is no write-back\noperation.  Secondly, there were some cases where 'strict' was not\nbeing applied when checking which registers had been used.\n\ngcc/ChangeLog:\n\n\t* config/arm/arm.cc (mve_vector_mem_operand): Allow SP_REGNUM\n\twhen there is no write-back.  Fix use when strict is true.", "tree": {"sha": "d765cc8e012c6c03147e39fa1ed9350c0ae4ad3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d765cc8e012c6c03147e39fa1ed9350c0ae4ad3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/485a0ae0982abe8ccebdfd660aa45823a572714d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/485a0ae0982abe8ccebdfd660aa45823a572714d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/485a0ae0982abe8ccebdfd660aa45823a572714d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/485a0ae0982abe8ccebdfd660aa45823a572714d/comments", "author": null, "committer": null, "parents": [{"sha": "112447f8564c0307c5da99a4094a3a99f204239f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112447f8564c0307c5da99a4094a3a99f204239f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/112447f8564c0307c5da99a4094a3a99f204239f"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "2afe0445ed54d7e172c7912cf7af61578dc92303", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485a0ae0982abe8ccebdfd660aa45823a572714d/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485a0ae0982abe8ccebdfd660aa45823a572714d/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=485a0ae0982abe8ccebdfd660aa45823a572714d", "patch": "@@ -13527,7 +13527,7 @@ mve_vector_mem_operand (machine_mode mode, rtx op, bool strict)\n       int reg_no = REGNO (op);\n       return (((mode == E_V8QImode || mode == E_V4QImode || mode == E_V4HImode)\n \t       ? reg_no <= LAST_LO_REGNUM\n-\t       :(reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM))\n+\t       : reg_no < LAST_ARM_REGNUM)\n \t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n     }\n   code = GET_CODE (op);\n@@ -13536,10 +13536,10 @@ mve_vector_mem_operand (machine_mode mode, rtx op, bool strict)\n       || code == PRE_INC || code == POST_DEC)\n     {\n       reg_no = REGNO (XEXP (op, 0));\n-      return ((mode == E_V8QImode || mode == E_V4QImode || mode == E_V4HImode)\n-\t      ? reg_no <= LAST_LO_REGNUM\n-\t      :(reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM))\n-\t|| reg_no >= FIRST_PSEUDO_REGISTER;\n+      return (((mode == E_V8QImode || mode == E_V4QImode || mode == E_V4HImode)\n+\t       ? reg_no <= LAST_LO_REGNUM\n+\t       :(reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM))\n+\t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n     }\n   else if (((code == POST_MODIFY || code == PRE_MODIFY)\n \t    && GET_CODE (XEXP (op, 1)) == PLUS\n@@ -13580,10 +13580,11 @@ mve_vector_mem_operand (machine_mode mode, rtx op, bool strict)\n \t  default:\n \t    return FALSE;\n \t}\n-      return reg_no >= FIRST_PSEUDO_REGISTER\n-\t|| (MVE_STN_LDW_MODE (mode)\n-\t    ? reg_no <= LAST_LO_REGNUM\n-\t    : (reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM));\n+      return ((!strict && reg_no >= FIRST_PSEUDO_REGISTER)\n+\t      || (MVE_STN_LDW_MODE (mode)\n+\t\t  ? reg_no <= LAST_LO_REGNUM\n+\t\t  : (reg_no < LAST_ARM_REGNUM\n+\t\t     && (code == PLUS || reg_no != SP_REGNUM))));\n     }\n   return FALSE;\n }"}]}