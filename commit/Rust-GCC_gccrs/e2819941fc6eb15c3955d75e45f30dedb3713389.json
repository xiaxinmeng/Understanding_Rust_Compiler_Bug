{"sha": "e2819941fc6eb15c3955d75e45f30dedb3713389", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI4MTk5NDFmYzZlYjE1YzM5NTVkNzVlNDVmMzBkZWRiMzcxMzM4OQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-12-11T11:10:42Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-11T11:10:42Z"}, "message": "[Ada] Crash on ignored Ghost expression function\n\nThis patch updates freezing to ensure that freeze nodes are inserted\ninto the tree when the entity being frozen is non-Ghost, and the context\nis an ignored Ghost spec expression.\n\n2018-12-11  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* exp_util.adb (Insert_Action): Add new formal parameter\n\tSpec_Expr_OK.\n\t(Insert_Actions): Add new formal parameter Spec_Expr_OK. Update\n\tall calls to Insert_Actions where relevant. Honour an insertion\n\tfrom a spec expression context when requested by the caller.\n\t* exp_util.ads (Insert_Action): Add new formal parameter\n\tSpec_Expr_OK.\n\t(Insert_Actions): Add new formal parameter Spec_Expr_OK.\n\t* freeze.adb (Add_To_Result): Force the insertion of the freeze\n\tnode even when the context is a spec expression.\n\ngcc/testsuite/\n\n\t* gnat.dg/ghost2.adb, gnat.dg/ghost2.ads: New testcase.\n\nFrom-SVN: r266996", "tree": {"sha": "3ee029cb67dc295c3463f544a96950117e7a3367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ee029cb67dc295c3463f544a96950117e7a3367"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2819941fc6eb15c3955d75e45f30dedb3713389", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2819941fc6eb15c3955d75e45f30dedb3713389", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2819941fc6eb15c3955d75e45f30dedb3713389", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2819941fc6eb15c3955d75e45f30dedb3713389/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30a5fd0b463897d12a9f4e3e27a15b3146a52b3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a5fd0b463897d12a9f4e3e27a15b3146a52b3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a5fd0b463897d12a9f4e3e27a15b3146a52b3d"}], "stats": {"total": 138, "additions": 110, "deletions": 28}, "files": [{"sha": "98fdcaf0015fd29049d55356f02f91fc48b8c63f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2819941fc6eb15c3955d75e45f30dedb3713389/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2819941fc6eb15c3955d75e45f30dedb3713389/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e2819941fc6eb15c3955d75e45f30dedb3713389", "patch": "@@ -1,3 +1,16 @@\n+2018-12-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_util.adb (Insert_Action): Add new formal parameter\n+\tSpec_Expr_OK.\n+\t(Insert_Actions): Add new formal parameter Spec_Expr_OK. Update\n+\tall calls to Insert_Actions where relevant. Honour an insertion\n+\tfrom a spec expression context when requested by the caller.\n+\t* exp_util.ads (Insert_Action): Add new formal parameter\n+\tSpec_Expr_OK.\n+\t(Insert_Actions): Add new formal parameter Spec_Expr_OK.\n+\t* freeze.adb (Add_To_Result): Force the insertion of the freeze\n+\tnode even when the context is a spec expression.\n+\n 2018-12-11  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* vxaddr2line.adb, vxlink-bind.adb, vxlink-bind.ads,"}, {"sha": "3cdd4ee029e294bc90af3a0b53475d8eb2efa5dd", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2819941fc6eb15c3955d75e45f30dedb3713389/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2819941fc6eb15c3955d75e45f30dedb3713389/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=e2819941fc6eb15c3955d75e45f30dedb3713389", "patch": "@@ -6702,20 +6702,34 @@ package body Exp_Util is\n    -- Insert_Action --\n    -------------------\n \n-   procedure Insert_Action (Assoc_Node : Node_Id; Ins_Action : Node_Id) is\n+   procedure Insert_Action\n+     (Assoc_Node   : Node_Id;\n+      Ins_Action   : Node_Id;\n+      Spec_Expr_OK : Boolean := False)\n+   is\n    begin\n       if Present (Ins_Action) then\n-         Insert_Actions (Assoc_Node, New_List (Ins_Action));\n+         Insert_Actions\n+           (Assoc_Node   => Assoc_Node,\n+            Ins_Actions  => New_List (Ins_Action),\n+            Spec_Expr_OK => Spec_Expr_OK);\n       end if;\n    end Insert_Action;\n \n    --  Version with check(s) suppressed\n \n    procedure Insert_Action\n-     (Assoc_Node : Node_Id; Ins_Action : Node_Id; Suppress : Check_Id)\n+     (Assoc_Node   : Node_Id;\n+      Ins_Action   : Node_Id;\n+      Suppress     : Check_Id;\n+      Spec_Expr_OK : Boolean := False)\n    is\n    begin\n-      Insert_Actions (Assoc_Node, New_List (Ins_Action), Suppress);\n+      Insert_Actions\n+        (Assoc_Node   => Assoc_Node,\n+         Ins_Actions  => New_List (Ins_Action),\n+         Suppress     => Suppress,\n+         Spec_Expr_OK => Spec_Expr_OK);\n    end Insert_Action;\n \n    -------------------------\n@@ -6734,7 +6748,11 @@ package body Exp_Util is\n    -- Insert_Actions --\n    --------------------\n \n-   procedure Insert_Actions (Assoc_Node : Node_Id; Ins_Actions : List_Id) is\n+   procedure Insert_Actions\n+     (Assoc_Node   : Node_Id;\n+      Ins_Actions  : List_Id;\n+      Spec_Expr_OK : Boolean := False)\n+   is\n       N : Node_Id;\n       P : Node_Id;\n \n@@ -6745,14 +6763,20 @@ package body Exp_Util is\n          return;\n       end if;\n \n+      --  Insert the action when the context is \"Handling of Default and Per-\n+      --  Object Expressions\" only when requested by the caller.\n+\n+      if Spec_Expr_OK then\n+         null;\n+\n       --  Ignore insert of actions from inside default expression (or other\n       --  similar \"spec expression\") in the special spec-expression analyze\n       --  mode. Any insertions at this point have no relevance, since we are\n       --  only doing the analyze to freeze the types of any static expressions.\n-      --  See section \"Handling of Default Expressions\" in the spec of package\n-      --  Sem for further details.\n+      --  See section \"Handling of Default and Per-Object Expressions\" in the\n+      --  spec of package Sem for further details.\n \n-      if In_Spec_Expression then\n+      elsif In_Spec_Expression then\n          return;\n       end if;\n \n@@ -7429,17 +7453,18 @@ package body Exp_Util is\n    --  Version with check(s) suppressed\n \n    procedure Insert_Actions\n-     (Assoc_Node  : Node_Id;\n-      Ins_Actions : List_Id;\n-      Suppress    : Check_Id)\n+     (Assoc_Node   : Node_Id;\n+      Ins_Actions  : List_Id;\n+      Suppress     : Check_Id;\n+      Spec_Expr_OK : Boolean := False)\n    is\n    begin\n       if Suppress = All_Checks then\n          declare\n             Sva : constant Suppress_Array := Scope_Suppress.Suppress;\n          begin\n             Scope_Suppress.Suppress := (others => True);\n-            Insert_Actions (Assoc_Node, Ins_Actions);\n+            Insert_Actions (Assoc_Node, Ins_Actions, Spec_Expr_OK);\n             Scope_Suppress.Suppress := Sva;\n          end;\n \n@@ -7448,7 +7473,7 @@ package body Exp_Util is\n             Svg : constant Boolean := Scope_Suppress.Suppress (Suppress);\n          begin\n             Scope_Suppress.Suppress (Suppress) := True;\n-            Insert_Actions (Assoc_Node, Ins_Actions);\n+            Insert_Actions (Assoc_Node, Ins_Actions, Spec_Expr_OK);\n             Scope_Suppress.Suppress (Suppress) := Svg;\n          end;\n       end if;"}, {"sha": "97eccdd2d7a7460af1081e614030490b35f292b4", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2819941fc6eb15c3955d75e45f30dedb3713389/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2819941fc6eb15c3955d75e45f30dedb3713389/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=e2819941fc6eb15c3955d75e45f30dedb3713389", "patch": "@@ -89,39 +89,54 @@ package Exp_Util is\n    --  calls, and this guarantee is preserved for the special cases above.\n \n    procedure Insert_Action\n-     (Assoc_Node : Node_Id;\n-      Ins_Action : Node_Id);\n+     (Assoc_Node   : Node_Id;\n+      Ins_Action   : Node_Id;\n+      Spec_Expr_OK : Boolean := False);\n    --  Insert the action Ins_Action at the appropriate point as described\n    --  above. The action is analyzed using the default checks after it is\n    --  inserted. Assoc_Node is the node with which the action is associated.\n+   --  When flag Spec_Expr_OK is set, insertions triggered in the context of\n+   --  spec expressions are honoured, even though they contradict \"Handling\n+   --  of Default and Per-Object Expressions\".\n \n    procedure Insert_Action\n-     (Assoc_Node : Node_Id;\n-      Ins_Action : Node_Id;\n-      Suppress   : Check_Id);\n+     (Assoc_Node   : Node_Id;\n+      Ins_Action   : Node_Id;\n+      Suppress     : Check_Id;\n+      Spec_Expr_OK : Boolean := False);\n    --  Insert the action Ins_Action at the appropriate point as described\n    --  above. The action is analyzed using the default checks as modified\n    --  by the given Suppress argument after it is inserted. Assoc_Node is\n-   --  the node with which the action is associated.\n+   --  the node with which the action is associated. When flag Spec_Expr_OK\n+   --  is set, insertions triggered in the context of spec expressions are\n+   --  honoured, even though they contradict \"Handling of Default and Per-\n+   --  Object Expressions\".\n \n    procedure Insert_Actions\n-     (Assoc_Node  : Node_Id;\n-      Ins_Actions : List_Id);\n+     (Assoc_Node   : Node_Id;\n+      Ins_Actions  : List_Id;\n+      Spec_Expr_OK : Boolean := False);\n    --  Insert the list of action Ins_Actions at the appropriate point as\n    --  described above. The actions are analyzed using the default checks\n    --  after they are inserted. Assoc_Node is the node with which the actions\n    --  are associated. Ins_Actions may be No_List, in which case the call has\n-   --  no effect.\n+   --  no effect. When flag Spec_Expr_OK is set, insertions triggered in the\n+   --  context of spec expressions are honoured, even though they contradict\n+   --  \"Handling of Default and Per-Object Expressions\".\n \n    procedure Insert_Actions\n-     (Assoc_Node  : Node_Id;\n-      Ins_Actions : List_Id;\n-      Suppress    : Check_Id);\n+     (Assoc_Node   : Node_Id;\n+      Ins_Actions  : List_Id;\n+      Suppress     : Check_Id;\n+      Spec_Expr_OK : Boolean := False);\n    --  Insert the list of action Ins_Actions at the appropriate point as\n    --  described above. The actions are analyzed using the default checks\n    --  as modified by the given Suppress argument after they are inserted.\n-   --  Assoc_Node is the node with which the actions are associated.\n+   --  Assoc_Node is the node with which the actions are associated. List\n    --  Ins_Actions may be No_List, in which case the call has no effect.\n+   --  When flag Spec_Expr_OK is set, insertions triggered in the context of\n+   --  spec expressions are honoured, even though they contradict \"Handling\n+   --  of Default and Per-Object Expressions\".\n \n    procedure Insert_Action_After\n      (Assoc_Node : Node_Id;"}, {"sha": "a446241175a98c176c818a8f5f33ff9f369dac01", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2819941fc6eb15c3955d75e45f30dedb3713389/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2819941fc6eb15c3955d75e45f30dedb3713389/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=e2819941fc6eb15c3955d75e45f30dedb3713389", "patch": "@@ -2245,13 +2245,19 @@ package body Freeze is\n          --  entity being frozen is living. Insert the freezing action prior\n          --  to the start of the enclosing ignored Ghost region. As a result\n          --  the freezeing action will be preserved when the ignored Ghost\n-         --  context is eliminated.\n+         --  context is eliminated. The insertion must take place even when\n+         --  the context is a spec expression, otherwise \"Handling of Default\n+         --  and Per-Object Expressions\" will suppress the insertion, and the\n+         --  freeze node will be dropped on the floor.\n \n          if Saved_GM = Ignore\n            and then Ghost_Mode /= Ignore\n            and then Present (Ignored_Ghost_Region)\n          then\n-            Insert_Action (Ignored_Ghost_Region, Fnod);\n+            Insert_Action\n+              (Assoc_Node   => Ignored_Ghost_Region,\n+               Ins_Action   => Fnod,\n+               Spec_Expr_OK => True);\n \n          --  Otherwise add the freezing action to the result list\n "}, {"sha": "d5c371c5c5e17e8c3a7c303160a4c607e071535b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2819941fc6eb15c3955d75e45f30dedb3713389/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2819941fc6eb15c3955d75e45f30dedb3713389/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2819941fc6eb15c3955d75e45f30dedb3713389", "patch": "@@ -1,3 +1,7 @@\n+2018-12-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat.dg/ghost2.adb, gnat.dg/ghost2.ads: New testcase.\n+\n 2018-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/atomic11.adb, gnat.dg/atomic11_pkg1.ads,"}, {"sha": "6851c3db86c56fdc53eda32358dbc280c734e0da", "filename": "gcc/testsuite/gnat.dg/ghost2.adb", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2819941fc6eb15c3955d75e45f30dedb3713389/gcc%2Ftestsuite%2Fgnat.dg%2Fghost2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2819941fc6eb15c3955d75e45f30dedb3713389/gcc%2Ftestsuite%2Fgnat.dg%2Fghost2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fghost2.adb?ref=e2819941fc6eb15c3955d75e45f30dedb3713389", "patch": "@@ -0,0 +1,5 @@\n+--  { dg-do compile }\n+\n+package body Ghost2 is\n+   procedure Set is null;\n+end Ghost2;"}, {"sha": "9c86f27f0a80f2d5ab85316948b2a051b5f02d84", "filename": "gcc/testsuite/gnat.dg/ghost2.ads", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2819941fc6eb15c3955d75e45f30dedb3713389/gcc%2Ftestsuite%2Fgnat.dg%2Fghost2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2819941fc6eb15c3955d75e45f30dedb3713389/gcc%2Ftestsuite%2Fgnat.dg%2Fghost2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fghost2.ads?ref=e2819941fc6eb15c3955d75e45f30dedb3713389", "patch": "@@ -0,0 +1,14 @@\n+package Ghost2 is\n+   type Val_Entry is (A, B, C, D);\n+\n+   function Transition_Valid (L : Val_Entry; R : Val_Entry) return Boolean\n+   is ((L = B and R = C) or\n+       (L = C and R = C) or\n+       (L = C and R = D) or\n+       (L = D and R = B))\n+     with Ghost;\n+\n+   procedure Set;\n+\n+   type Val_Array is array (1 .. 5) of Val_Entry;\n+end Ghost2;"}]}