{"sha": "27d14326c700db52c1cbc2b61e1875165aac78d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdkMTQzMjZjNzAwZGI1MmMxY2JjMmI2MWUxODc1MTY1YWFjNzhkNA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-05-30T13:31:33Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-05-30T13:31:33Z"}, "message": "MPN.java, Arc2D.java: Fixed javadocs all over.\n\n2004-05-30  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/math/MPN.java,\n\tjava/awt/geom/Arc2D.java:\n\tFixed javadocs all over.\n\nFrom-SVN: r82446", "tree": {"sha": "05abb5eb31580e7f805386fbad8d2121c586aeee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05abb5eb31580e7f805386fbad8d2121c586aeee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27d14326c700db52c1cbc2b61e1875165aac78d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d14326c700db52c1cbc2b61e1875165aac78d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d14326c700db52c1cbc2b61e1875165aac78d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d14326c700db52c1cbc2b61e1875165aac78d4/comments", "author": null, "committer": null, "parents": [{"sha": "933592af7905835bbb668598ec3cab92eef32163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/933592af7905835bbb668598ec3cab92eef32163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/933592af7905835bbb668598ec3cab92eef32163"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "0a20670900ed20cf1399cd8815162e657a6b9e00", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d14326c700db52c1cbc2b61e1875165aac78d4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d14326c700db52c1cbc2b61e1875165aac78d4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=27d14326c700db52c1cbc2b61e1875165aac78d4", "patch": "@@ -1,3 +1,9 @@\n+2004-05-30  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/math/MPN.java,\n+\tjava/awt/geom/Arc2D.java:\n+\tFixed javadocs all over.\n+\n 2004-05-30  Michael Koch  <konqueror@gmx.de>\n \n \t* java/awt/DefaultKeyboardFocusManager.java"}, {"sha": "34a7081701edd0be1869e34ff525630db0d6a459", "filename": "libjava/gnu/java/math/MPN.java", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d14326c700db52c1cbc2b61e1875165aac78d4/libjava%2Fgnu%2Fjava%2Fmath%2FMPN.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d14326c700db52c1cbc2b61e1875165aac78d4/libjava%2Fgnu%2Fjava%2Fmath%2FMPN.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fmath%2FMPN.java?ref=27d14326c700db52c1cbc2b61e1875165aac78d4", "patch": "@@ -1,5 +1,5 @@\n /* gnu.java.math.MPN\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -482,7 +482,7 @@ public static int set_str (int dest[], byte[] str, int str_len, int base)\n   }\n \n   /** Compare x[0:size-1] with y[0:size-1], treating them as unsigned integers.\n-   * @result -1, 0, or 1 depending on if x<y, x==y, or x>y.\n+   * @result -1, 0, or 1 depending on if x&lt;y, x==y, or x&gt;y.\n    * This is basically the same as gmp's mpn_cmp function.\n    */\n   public static int cmp (int[] x, int[] y, int size)\n@@ -502,22 +502,24 @@ public static int cmp (int[] x, int[] y, int size)\n     return 0;\n   }\n \n-  /** Compare x[0:xlen-1] with y[0:ylen-1], treating them as unsigned integers.\n-   * @result -1, 0, or 1 depending on if x<y, x==y, or x>y.\n+  /**\n+   * Compare x[0:xlen-1] with y[0:ylen-1], treating them as unsigned integers.\n+   * \n+   * @return -1, 0, or 1 depending on if x&lt;y, x==y, or x&gt;y.\n    */\n   public static int cmp (int[] x, int xlen, int[] y, int ylen)\n   {\n     return xlen > ylen ? 1 : xlen < ylen ? -1 : cmp (x, y, xlen);\n   }\n \n-  /* Shift x[x_start:x_start+len-1] count bits to the \"right\"\n+  /**\n+   * Shift x[x_start:x_start+len-1] count bits to the \"right\"\n    * (i.e. divide by 2**count).\n    * Store the len least significant words of the result at dest.\n    * The bits shifted out to the right are returned.\n    * OK if dest==x.\n-   * Assumes: 0 < count < 32\n+   * Assumes: 0 &lt; count &lt; 32\n    */\n-\n   public static int rshift (int[] dest, int[] x, int x_start,\n \t\t\t    int len, int count)\n   {\n@@ -535,11 +537,12 @@ public static int rshift (int[] dest, int[] x, int x_start,\n     return retval;\n   }\n \n-  /* Shift x[x_start:x_start+len-1] count bits to the \"right\"\n+  /**\n+   * Shift x[x_start:x_start+len-1] count bits to the \"right\"\n    * (i.e. divide by 2**count).\n    * Store the len least significant words of the result at dest.\n    * OK if dest==x.\n-   * Assumes: 0 <= count < 32\n+   * Assumes: 0 &lt;= count &lt; 32\n    * Same as rshift, but handles count==0 (and has no return value).\n    */\n   public static void rshift0 (int[] dest, int[] x, int x_start,\n@@ -556,7 +559,7 @@ public static void rshift0 (int[] dest, int[] x, int x_start,\n   * @param x a two's-complement \"bignum\"\n   * @param len the number of significant words in x\n   * @param count the shift count\n-  * @return (long)(x[0..len-1] >> count).\n+  * @return (long)(x[0..len-1] &gt;&gt; count).\n   */\n   public static long rshift_long (int[] x, int len, int count)\n   {\n@@ -579,7 +582,7 @@ public static long rshift_long (int[] x, int len, int count)\n   /* Shift x[0:len-1] left by count bits, and store the len least\n    * significant words of the result in dest[d_offset:d_offset+len-1].\n    * Return the bits shifted out from the most significant digit.\n-   * Assumes 0 < count < 32.\n+   * Assumes 0 &lt; count &lt; 32.\n    * OK if dest==x.\n    */\n \n@@ -601,7 +604,7 @@ public static int lshift (int[] dest, int d_offset,\n     return retval;\n   }\n \n-  /** Return least i such that word&(1<<i). Assumes word!=0. */\n+  /** Return least i such that word &amp; (1&lt;&lt;i). Assumes word!=0. */\n \n   public static int findLowestBit (int word)\n   {\n@@ -621,7 +624,7 @@ public static int findLowestBit (int word)\n     return i;\n   }\n \n-  /** Return least i such that words & (1<<i). Assumes there is such an i. */\n+  /** Return least i such that words &amp; (1&lt;&lt;i). Assumes there is such an i. */\n \n   public static int findLowestBit (int[] words)\n   {"}, {"sha": "64d81650bfe37ded08c2583c781439ee1f6d65fd", "filename": "libjava/java/awt/geom/Arc2D.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d14326c700db52c1cbc2b61e1875165aac78d4/libjava%2Fjava%2Fawt%2Fgeom%2FArc2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d14326c700db52c1cbc2b61e1875165aac78d4/libjava%2Fjava%2Fawt%2Fgeom%2FArc2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FArc2D.java?ref=27d14326c700db52c1cbc2b61e1875165aac78d4", "patch": "@@ -50,7 +50,7 @@\n  * and while the angle can be any value, the path iterator only traverses the\n  * first 360 degrees. Storage is up to the subclasses.\n  *\n- * @author Eric Blake <ebb9@email.byu.edu>\n+ * @author Eric Blake (ebb9@email.byu.edu)\n  * @since 1.2\n  * @status updated to 1.4, but still missing functionality\n  */\n@@ -527,7 +527,7 @@ public PathIterator getPathIterator(AffineTransform at)\n    * This class is used to iterate over an arc. Since ellipses are a subclass\n    * of arcs, this is used by Ellipse2D as well.\n    *\n-   * @author Eric Blake <ebb9@email.byu.edu>\n+   * @author Eric Blake (ebb9@email.byu.edu)\n    */\n   static final class ArcIterator implements PathIterator\n   {\n@@ -766,7 +766,7 @@ else if (type == CHORD)\n   /**\n    * This class implements an arc in double precision.\n    *\n-   * @author Eric Blake <ebb9@email.byu.edu\n+   * @author Eric Blake (ebb9@email.byu.edu)\n    * @since 1.2\n    */\n   public static class Double extends Arc2D\n@@ -985,7 +985,7 @@ protected Rectangle2D makeBounds(double x, double y, double w, double h)\n   /**\n    * This class implements an arc in float precision.\n    *\n-   * @author Eric Blake <ebb9@email.byu.edu\n+   * @author Eric Blake (ebb9@email.byu.edu)\n    * @since 1.2\n    */\n   public static class Float extends Arc2D"}]}