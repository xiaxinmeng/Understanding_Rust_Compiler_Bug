{"sha": "0be27b59bcfdf82ce4193647111f331677cab237", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJlMjdiNTliY2ZkZjgyY2U0MTkzNjQ3MTExZjMzMTY3N2NhYjIzNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-08-27T14:45:47Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-08-27T14:45:47Z"}, "message": "1.cc: New.\n\n2004-08-27  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/27_io/manipulators/adjustfield/wchar_t/1.cc: New.\n\t* testsuite/27_io/manipulators/adjustfield/wchar_t/2.cc: Likewise.\n\t* testsuite/27_io/manipulators/basefield/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/manipulators/standard/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/manipulators/standard/wchar_t/2.cc: Likewise.\n\n\t* testsuite/27_io/manipulators/adjustfield/char/1.cc: Minor\n\tformatting fixes.\n\t* testsuite/27_io/manipulators/adjustfield/char/2.cc: Likewise.\n\t* testsuite/27_io/manipulators/basefield/char/1.cc: Likewise.\n\t* testsuite/27_io/manipulators/standard/char/1.cc: Likewise.\n\t* testsuite/27_io/manipulators/standard/char/2.cc: Likewise.\n\nFrom-SVN: r86661", "tree": {"sha": "8d64bee91ae317d304fa6eb9f068dcdbea1d8200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d64bee91ae317d304fa6eb9f068dcdbea1d8200"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0be27b59bcfdf82ce4193647111f331677cab237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be27b59bcfdf82ce4193647111f331677cab237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0be27b59bcfdf82ce4193647111f331677cab237", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be27b59bcfdf82ce4193647111f331677cab237/comments", "author": null, "committer": null, "parents": [{"sha": "e041cc5aff0b073d811452811a5581d62149eb56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e041cc5aff0b073d811452811a5581d62149eb56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e041cc5aff0b073d811452811a5581d62149eb56"}], "stats": {"total": 563, "additions": 502, "deletions": 61}, "files": [{"sha": "0a72616bf870bdea35f8bd833b9ad20ff3565aab", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0be27b59bcfdf82ce4193647111f331677cab237", "patch": "@@ -1,3 +1,18 @@\n+2004-08-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/27_io/manipulators/adjustfield/wchar_t/1.cc: New.\n+\t* testsuite/27_io/manipulators/adjustfield/wchar_t/2.cc: Likewise.\n+\t* testsuite/27_io/manipulators/basefield/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/manipulators/standard/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/manipulators/standard/wchar_t/2.cc: Likewise.\n+\t\n+\t* testsuite/27_io/manipulators/adjustfield/char/1.cc: Minor\n+\tformatting fixes.\n+\t* testsuite/27_io/manipulators/adjustfield/char/2.cc: Likewise.\n+\t* testsuite/27_io/manipulators/basefield/char/1.cc: Likewise.\n+\t* testsuite/27_io/manipulators/standard/char/1.cc: Likewise.\n+\t* testsuite/27_io/manipulators/standard/char/2.cc: Likewise.\n+\n 2004-08-25  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/17038 (partial)"}, {"sha": "39261268effb9fe3830b4095c9d83b6a67280630", "filename": "libstdc++-v3/testsuite/27_io/manipulators/adjustfield/char/1.cc", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fchar%2F1.cc?ref=0be27b59bcfdf82ce4193647111f331677cab237", "patch": "@@ -39,13 +39,15 @@ struct MyNP : std::numpunct<char>\n   std::string do_falsename() const;\n };\n \n-std::string MyNP::do_truename()  const \n+std::string\n+MyNP::do_truename() const \n { \n   std::string s(\"yea\"); \n   return s; \n }\n \n-std::string MyNP::do_falsename() const \n+std::string\n+MyNP::do_falsename() const \n { \n   std::string s(\"nay\"); \n   return s; \n@@ -55,8 +57,19 @@ void\n test01()\n {\n   bool test __attribute__((unused)) = true;\n-  const char lit[] = \"1 0\\ntrue false\\n:  true:\\n:true  :\\n: false:\\n:  1:\"\n-    \t\t     \"\\n:1  :\\n:  0:\\nyea nay\\n:   yea:\\n:yea   :\\n:   nay:\\n\";\n+  const char lit[] = \"1 0\\n\"\n+                     \"true false\\n\"\n+                     \":  true:\\n\"\n+                     \":true  :\\n\"\n+                     \": false:\\n\"\n+                     \":  1:\\n\"\n+                     \":1  :\\n\"\n+                     \":  0:\\n\"\n+                     \"yea nay\\n\"\n+                     \":   yea:\\n\"\n+                     \":yea   :\\n\"\n+                     \":   nay:\\n\";\n+\n   std::ostringstream oss;\n   oss << true << \" \" << false << std::endl;\n   oss << std::boolalpha;\n@@ -70,7 +83,7 @@ test01()\n   oss << \":\" << std::setw(3) << std::left << true << \":\" << std::endl;\n   oss << \":\" << std::setw(3) << std::right << false << \":\" << std::endl;\n \n-  std::locale loc = std::locale (std::locale::classic(), new MyNP);\n+  std::locale loc = std::locale(std::locale::classic(), new MyNP);\n   oss.imbue(loc);\n \n   oss << std::boolalpha;\n@@ -90,19 +103,3 @@ main()\n   test01();\n   return 0;\n }\n-\n-// Projected output:\n-/*\n-1 0\n-true false\n-:  true:\n-:true  :\n-: false:\n-:  1:\n-:1  :\n-:  0:\n-yea nay\n-:   yea:\n-:yea   :\n-:   nay:\n-*/"}, {"sha": "83e6b663352424609b3c5d30a14eeb50b5ed7748", "filename": "libstdc++-v3/testsuite/27_io/manipulators/adjustfield/char/2.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fchar%2F2.cc?ref=0be27b59bcfdf82ce4193647111f331677cab237", "patch": "@@ -1,4 +1,5 @@\n-// Copyright (C) 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2002, 2004\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,19 +35,19 @@ void test02()\n {\n   bool test __attribute__((unused)) = true;\n   const std::string \tstr_blank;\n-  std::string \tstr_tmp;\n+  std::string \t        str_tmp;\n   std::stringbuf \tstrbuf;\n-  std::ostream \to(&strbuf);\n+  std::ostream          o(&strbuf);\n \n-  o <<  std::setw(6) <<  std::right << \"san\";\n+  o << std::setw(6) << std::right << \"san\";\n   VERIFY( strbuf.str() == \"   san\" ); \n   strbuf.str(str_blank);\n \n-  o <<  std::setw(6) <<  std::internal << \"fran\";\n+  o << std::setw(6) << std::internal << \"fran\";\n   VERIFY( strbuf.str() == \"  fran\" ); \n   strbuf.str(str_blank);\n \n-  o << std::setw(6) <<  std::left << \"cisco\";\n+  o << std::setw(6) << std::left << \"cisco\";\n   VERIFY( strbuf.str() == \"cisco \" ); \n   strbuf.str(str_blank);\n }"}, {"sha": "b153f25de409d82dc788d842087c737de7bc2fb4", "filename": "libstdc++-v3/testsuite/27_io/manipulators/adjustfield/wchar_t/1.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fwchar_t%2F1.cc?ref=0be27b59bcfdf82ce4193647111f331677cab237", "patch": "@@ -0,0 +1,102 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <sstream>\n+#include <locale>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+struct MyNP : std::numpunct<wchar_t>\n+{\n+  std::wstring do_truename() const;\n+  std::wstring do_falsename() const;\n+};\n+\n+std::wstring\n+MyNP::do_truename() const \n+{ \n+  std::wstring s(L\"yea\"); \n+  return s; \n+}\n+\n+std::wstring\n+MyNP::do_falsename() const \n+{ \n+  std::wstring s(L\"nay\"); \n+  return s; \n+}\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const wchar_t lit[] = L\"1 0\\n\"\n+                        L\"true false\\n\"\n+                        L\":  true:\\n\"\n+                        L\":true  :\\n\"\n+                        L\": false:\\n\"\n+                        L\":  1:\\n\"\n+                        L\":1  :\\n\"\n+                        L\":  0:\\n\"\n+                        L\"yea nay\\n\"\n+                        L\":   yea:\\n\"\n+                        L\":yea   :\\n\"\n+                        L\":   nay:\\n\";\n+\n+  std::wostringstream oss;\n+  oss << true << L\" \" << false << std::endl;\n+  oss << std::boolalpha;\n+  oss << true << L\" \" << false << std::endl;\n+\n+  oss << L\":\" << std::setw(6) << std::internal << true << L\":\" << std::endl;\n+  oss << L\":\" << std::setw(6) << std::left << true << L\":\" << std::endl;\n+  oss << L\":\" << std::setw(6) << std::right << false << L\":\" << std::endl;\n+  oss << std::noboolalpha;\n+  oss << L\":\" << std::setw(3) << std::internal << true << L\":\" << std::endl;\n+  oss << L\":\" << std::setw(3) << std::left << true << L\":\" << std::endl;\n+  oss << L\":\" << std::setw(3) << std::right << false << L\":\" << std::endl;\n+\n+  std::locale loc = std::locale(std::locale::classic(), new MyNP);\n+  oss.imbue(loc);\n+\n+  oss << std::boolalpha;\n+  oss << true << L\" \" << false << std::endl;\n+\n+  oss << L\":\" << std::setw(6) << std::internal << true << L\":\" << std::endl;\n+  oss << L\":\" << std::setw(6) << std::left << true << L\":\" << std::endl;\n+  oss << L\":\" << std::setw(6) << std::right << false << L\":\" << std::endl;\n+\n+  VERIFY( oss.good() );\n+  VERIFY( oss.str() == lit );\n+}\n+\n+int \n+main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "44d5b3285c24ef8b7dfd084245811f89a40008d3", "filename": "libstdc++-v3/testsuite/27_io/manipulators/adjustfield/wchar_t/2.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fadjustfield%2Fwchar_t%2F2.cc?ref=0be27b59bcfdf82ce4193647111f331677cab237", "patch": "@@ -0,0 +1,59 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <sstream>\n+#include <locale>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const std::wstring \tstr_blank;\n+  std::wstring \t        str_tmp;\n+  std::wstringbuf \tstrbuf;\n+  std::wostream \to(&strbuf);\n+\n+  o << std::setw(6) << std::right << L\"san\";\n+  VERIFY( strbuf.str() == L\"   san\" ); \n+  strbuf.str(str_blank);\n+\n+  o << std::setw(6) << std::internal << L\"fran\";\n+  VERIFY( strbuf.str() == L\"  fran\" ); \n+  strbuf.str(str_blank);\n+\n+  o << std::setw(6) << std::left << L\"cisco\";\n+  VERIFY( strbuf.str() == L\"cisco \" ); \n+  strbuf.str(str_blank);\n+}\n+\n+int \n+main() \n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "b604ef00173daffbd89e063749567f015a912899", "filename": "libstdc++-v3/testsuite/27_io/manipulators/basefield/char/1.cc", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fbasefield%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fbasefield%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fbasefield%2Fchar%2F1.cc?ref=0be27b59bcfdf82ce4193647111f331677cab237", "patch": "@@ -35,22 +35,37 @@\n struct MyNP : std::numpunct<char>\n {\n   std::string do_grouping() const;\n-  char   do_thousands_sep() const;\n+  char do_thousands_sep() const;\n };\n \n-std::string MyNP::do_grouping() const { std::string s(\"\\3\"); return s; }\n-char   MyNP::do_thousands_sep() const { return ' '; }\n+std::string\n+MyNP::do_grouping() const\n+{\n+  std::string s(\"\\3\");\n+  return s;\n+}\n \n+char\n+MyNP::do_thousands_sep() const\n+{ return ' '; }\n \n void test01()\n {\n   bool test __attribute__((unused)) = true;\n-\n-  const char lit[] = \"0123 456\\n: 01 234 567:\\n:0123 456   :\\n\"\n-                     \":    012 345:\\n:     01 234:\\n:0726 746 425:\\n\"\n-                     \":04 553 207 :\\n:   0361 100:\\n:       0173:\\n\"\n-                     \"0x12 345 678\\n|0x000012 345 678|\\n|0x12 345 6780000|\\n\"\n-                     \"|00000x12 345 678|\\n|0x000012 345 678|\\n\";\n+  const char lit[] = \"0123 456\\n\"\n+                     \": 01 234 567:\\n\"\n+                     \":0123 456   :\\n\"\n+                     \":    012 345:\\n\"\n+                     \":     01 234:\\n\"\n+                     \":0726 746 425:\\n\"\n+                     \":04 553 207 :\\n\"\n+                     \":   0361 100:\\n\"\n+                     \":       0173:\\n\"\n+                     \"0x12 345 678\\n\"\n+                     \"|0x000012 345 678|\\n\"\n+                     \"|0x12 345 6780000|\\n\"\n+                     \"|00000x12 345 678|\\n\"\n+                     \"|0x000012 345 678|\\n\";\n \n   std::ostringstream oss;\n   oss.imbue(std::locale(std::locale(), new MyNP));\n@@ -102,27 +117,10 @@ void test01()\n   VERIFY( oss.good() );\n   VERIFY( oss.str() == lit );\n }\n+\n int \n main() \n {\n   test01();\n   return 0;\n }\n-\n-// Projected output:\n-/*\n-0123 456\n-: 01 234 567:\n-:0123 456   :\n-:    012 345:\n-:     01 234:\n-:0726 746 425:\n-:04 553 207 :\n-:   0361 100:\n-:       0173:\n-0x12 345 678\n-|0x000012 345 678|\n-|0x12 345 6780000|\n-|00000x12 345 678|\n-|0x000012 345 678|\n-*/"}, {"sha": "aae1766515ccbadfefa07b4ace63345c0c3f928a", "filename": "libstdc++-v3/testsuite/27_io/manipulators/basefield/wchar_t/1.cc", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fbasefield%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fbasefield%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fbasefield%2Fwchar_t%2F1.cc?ref=0be27b59bcfdf82ce4193647111f331677cab237", "patch": "@@ -0,0 +1,124 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <sstream>\n+#include <locale>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\t\t\t\n+struct MyNP : std::numpunct<wchar_t>\n+{\n+  std::string do_grouping() const;\n+  wchar_t do_thousands_sep() const;\n+};\n+\n+std::string\n+MyNP::do_grouping() const\n+{\n+  std::string s(\"\\3\");\n+  return s;\n+}\n+\n+wchar_t\n+MyNP::do_thousands_sep() const\n+{ return L' '; }\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const wchar_t lit[] = L\"0123 456\\n\"\n+                        L\": 01 234 567:\\n\"\n+                        L\":0123 456   :\\n\"\n+                        L\":    012 345:\\n\"\n+                        L\":     01 234:\\n\"\n+                        L\":0726 746 425:\\n\"\n+                        L\":04 553 207 :\\n\"\n+                        L\":   0361 100:\\n\"\n+                        L\":       0173:\\n\"\n+                        L\"0x12 345 678\\n\"\n+                        L\"|0x000012 345 678|\\n\"\n+                        L\"|0x12 345 6780000|\\n\"\n+                        L\"|00000x12 345 678|\\n\"\n+                        L\"|0x000012 345 678|\\n\";\n+\n+  std::wostringstream oss;\n+  oss.imbue(std::locale(std::locale(), new MyNP));\n+\n+  // Octals\n+  oss << std::oct << std::showbase;\n+  oss << 0123456l << std::endl;\n+\n+  oss << L\":\" << std::setw(11);\n+  oss << 01234567l << L\":\" << std::endl;\n+\n+  oss << L\":\" << std::setw(11) << std::left;\n+  oss << 0123456l << L\":\" << std::endl;\n+\n+  oss << L\":\" << std::setw(11) << std::right;\n+  oss << 012345l << L\":\" << std::endl;\n+\n+  oss << L\":\" << std::setw(11) << std::internal;\n+  oss << 01234l << L\":\" << std::endl;\n+\n+  oss << L\":\" << std::setw(11);\n+  oss << 123456789l << L\":\" << std::endl;\n+\n+  oss << L\":\" << std::setw(11) << std::left;\n+  oss << 1234567l << L\":\" << std::endl;\n+\n+  oss << L\":\" << std::setw(11) << std::right;\n+  oss << 123456l << L\":\" << std::endl;\n+\n+  oss << L\":\" << std::setw(11) << std::internal;\n+  oss << 123l << L\":\" << std::endl;\n+\n+  // Hexadecimals\n+  oss << std::hex << std::setfill(L'0');\n+  oss << 0x12345678l << std::endl;\n+\n+  oss << L\"|\" << std::setw(16);\n+  oss << 0x12345678l << L\"|\" << std::endl;\n+\n+  oss << L\"|\" << std::setw(16) << std::left;\n+  oss << 0x12345678l << L\"|\" << std::endl;\n+\n+  oss << L\"|\" << std::setw(16) << std::right;\n+  oss << 0x12345678l << L\"|\" << std::endl;\n+\n+  oss << L\"|\" << std::setw(16) << std::internal;\n+  oss << 0x12345678l << L\"|\" << std::endl;\n+\n+  VERIFY( oss.good() );\n+  VERIFY( oss.str() == lit );\n+}\n+\n+int \n+main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6eaaac8e27e3ce581f0ad2a2504a30cdff568106", "filename": "libstdc++-v3/testsuite/27_io/manipulators/standard/char/1.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fchar%2F1.cc?ref=0be27b59bcfdf82ce4193647111f331677cab237", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -55,7 +55,7 @@ test01()\n \n   // setfil\n   setfill('a');\n-  iss >>  setfill('a');\n+  iss >> setfill('a');\n   VERIFY(iss.good());\n   oss << setfill('a');\n   VERIFY(oss.good());\n@@ -75,7 +75,6 @@ test01()\n   VERIFY(oss.good());\n }\n \n-\n int\n main()\n {"}, {"sha": "b74e2c4794da3b2c4c99be488b0da2972fd50a8c", "filename": "libstdc++-v3/testsuite/27_io/manipulators/standard/char/2.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fchar%2F2.cc?ref=0be27b59bcfdf82ce4193647111f331677cab237", "patch": "@@ -22,22 +22,20 @@\n // their own code with -fno-implicit-templates and not suffer from a zillion\n // link errors.\n \n-#include <fstream>\n #include <istream>\n #include <ostream>\n #include <sstream>\n #include <iomanip>\n #include <testsuite_hooks.h>\n \n-\n // PR libstdc++/3829\n void\n test01()\n {\n   using namespace std;\n   bool test __attribute__((unused)) = true;\n   string x (\"   this is text\");\n-  istringstream  sin (x);\n+  istringstream  sin(x);\n   ostringstream  sout;\n \n   // same order as in bits/std_iomanip.h\n@@ -60,7 +58,6 @@ test01()\n   VERIFY(sout.good());\n }\n \n-\n int\n main()\n {"}, {"sha": "29f7770d6339052fb5f5969a9af5af59b56e4939", "filename": "libstdc++-v3/testsuite/27_io/manipulators/standard/wchar_t/1.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fwchar_t%2F1.cc?ref=0be27b59bcfdf82ce4193647111f331677cab237", "patch": "@@ -0,0 +1,83 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.3 - Standard manipulators\n+\n+#include <sstream>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wstring s(L\"john coltrane, a love supreme\");\n+  wistringstream  iss(s);\n+  wostringstream  oss;\n+\n+  // resetiosflags\n+  resetiosflags(ios_base::boolalpha);\n+  iss >> resetiosflags(ios_base::boolalpha);\n+  VERIFY(iss.good());\n+  oss << resetiosflags(ios_base::boolalpha);\n+  VERIFY(oss.good());\n+\n+  // setiosflags\n+  setiosflags(ios_base::skipws);\n+  iss >> setiosflags(ios_base::skipws);\n+  VERIFY(iss.good());\n+  oss << setiosflags(ios_base::skipws);\n+  VERIFY(oss.good());\n+\n+  // setbase\n+  setbase(8);\n+  iss >> setbase(8);\n+  VERIFY(iss.good());\n+  oss << setbase(8);\n+  VERIFY(oss.good());\n+\n+  // setfil\n+  setfill(L'a');\n+  iss >> setfill(L'a');\n+  VERIFY(iss.good());\n+  oss << setfill(L'a');\n+  VERIFY(oss.good());\n+ \n+  // setprecision\n+  setprecision(4);\n+  iss >> setprecision(4);\n+  VERIFY(iss.good());\n+  oss << setprecision(4);\n+  VERIFY(oss.good());\n+  \n+  // setprecision\n+  setw(7);\n+  iss >> setw(7);\n+  VERIFY(iss.good());\n+  oss << setw(7);\n+  VERIFY(oss.good());\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3129d6770a32fc334e481fbcba413db8b9ff3be0", "filename": "libstdc++-v3/testsuite/27_io/manipulators/standard/wchar_t/2.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be27b59bcfdf82ce4193647111f331677cab237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fwchar_t%2F2.cc?ref=0be27b59bcfdf82ce4193647111f331677cab237", "patch": "@@ -0,0 +1,66 @@\n+// { dg-options \"-fno-implicit-templates\" }\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// Some members need to be explicitly instantiated, so that users can build\n+// their own code with -fno-implicit-templates and not suffer from a zillion\n+// link errors.\n+\n+#include <istream>\n+#include <ostream>\n+#include <sstream>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+// PR libstdc++/3829\n+void\n+test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+  wstring x(L\"   this is text\");\n+  wistringstream  sin(x);\n+  wostringstream  sout;\n+\n+  // same order as in bits/std_iomanip.h\n+  sin >> resetiosflags(ios_base::dec)\n+      >> setiosflags(ios_base::dec)\n+      >> setbase(ios_base::dec)\n+      >> setfill(L'c')\n+      >> setprecision(5)\n+      >> setw(20)\n+      >> ws;\n+  VERIFY(sin.good());\n+\n+  sout << resetiosflags(ios_base::dec)\n+       << setiosflags(ios_base::dec)\n+       << setbase(ios_base::dec)\n+       << setfill(L'c')\n+       << setprecision(5)\n+       << setw(20)\n+       << ends << flush << endl;\n+  VERIFY(sout.good());\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}