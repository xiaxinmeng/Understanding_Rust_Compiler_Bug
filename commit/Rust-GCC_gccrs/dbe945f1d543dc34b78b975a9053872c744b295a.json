{"sha": "dbe945f1d543dc34b78b975a9053872c744b295a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJlOTQ1ZjFkNTQzZGMzNGI3OGI5NzVhOTA1Mzg3MmM3NDRiMjk1YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-11T09:11:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-11T09:11:57Z"}, "message": "[multiple changes]\n\n2010-10-11  Bob Duff  <duff@adacore.com>\n\n\t* sem_aggr.adb, impunit.adb, impunit.ads, switch-c.adb, usage.adb,\n\tsem_ch10.adb, sem_prag.adb, sem_ch12.adb, par-ch4.adb, par-ch6.adb,\n\tpar-ch8.adb, exp_ch4.adb, sem_ch4.adb, sem_ch6.adb, par-prag.adb,\n\topt.ads, par-ch3.adb, lib-xref.adb: Use Ada_2012 instead of Ada_12\n\t(Ada_Version_Type).\n\n2010-10-11  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_util.adb (Safe_Prefixed_Reference): If the prefix is an explicit\n\tdereference then do not exclude dereferences of access-to-constant\n\ttypes to handle them as constant view of variables (and hence remove\n\tside effects when required).\n\t* sem_res.adb (Resolve_Slice): Ensure that side effects in the bounds\n\tare properly handled.\n\nFrom-SVN: r165282", "tree": {"sha": "15c23728dd5f1c1cb5845f7dcdc1c8b0738de698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15c23728dd5f1c1cb5845f7dcdc1c8b0738de698"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbe945f1d543dc34b78b975a9053872c744b295a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe945f1d543dc34b78b975a9053872c744b295a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe945f1d543dc34b78b975a9053872c744b295a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe945f1d543dc34b78b975a9053872c744b295a/comments", "author": null, "committer": null, "parents": [{"sha": "2b3d67a55b8f6589dd52eea452e464c628d20bdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b3d67a55b8f6589dd52eea452e464c628d20bdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b3d67a55b8f6589dd52eea452e464c628d20bdf"}], "stats": {"total": 134, "additions": 78, "deletions": 56}, "files": [{"sha": "b10ca61853d3c2a42421a7b82b94fb1b0a1b0dbc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -1,3 +1,20 @@\n+2010-10-11  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_aggr.adb, impunit.adb, impunit.ads, switch-c.adb, usage.adb,\n+\tsem_ch10.adb, sem_prag.adb, sem_ch12.adb, par-ch4.adb, par-ch6.adb,\n+\tpar-ch8.adb, exp_ch4.adb, sem_ch4.adb, sem_ch6.adb, par-prag.adb,\n+\topt.ads, par-ch3.adb, lib-xref.adb: Use Ada_2012 instead of Ada_12\n+\t(Ada_Version_Type).\n+\n+2010-10-11  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_util.adb (Safe_Prefixed_Reference): If the prefix is an explicit\n+\tdereference then do not exclude dereferences of access-to-constant\n+\ttypes to handle them as constant view of variables (and hence remove\n+\tside effects when required).\n+\t* sem_res.adb (Resolve_Slice): Ensure that side effects in the bounds\n+\tare properly handled.\n+\n 2010-10-11  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_prag.adb, sem_aggr.adb, sprint.adb: Minor reformatting."}, {"sha": "a3fca28db3ea74b1b0262e3714427460be4b5a6a", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -2181,7 +2181,7 @@ package body Exp_Ch4 is\n                end if;\n             end if;\n \n-         elsif Ada_Version >= Ada_12 then\n+         elsif Ada_Version >= Ada_2012 then\n \n             --  if no TSS has been created for the type, check whether there is\n             --  a primitive equality declared for it. If it is abstract replace"}, {"sha": "6d948f1083088ebd68d43696367a88b2c3611da9", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -4540,16 +4540,17 @@ package body Exp_Util is\n                  or else Ekind (Entity (Prefix (N))) = E_In_Parameter;\n             end if;\n \n-         --  If the prefix is an explicit dereference that is not access-to-\n-         --  constant then this construct is a variable reference, which means\n-         --  it is to be considered to have side effects if Variable_Ref is\n-         --  True.\n+         --  If the prefix is an explicit dereference then this construct is a\n+         --  variable reference, which means it is to be considered to have\n+         --  side effects if Variable_Ref is True.\n+\n+         --  We do NOT exclude dereferences of access-to-constant types because\n+         --  we handle them as constant view of variables.\n \n          --  Exception is an access to an entity that is a constant or an\n          --  in-parameter.\n \n          elsif Nkind (Prefix (N)) = N_Explicit_Dereference\n-           and then not Is_Access_Constant (Etype (Prefix (Prefix (N))))\n            and then Variable_Ref\n          then\n             declare"}, {"sha": "b2d9349fa6628fa47d06538c819eb557ac0a92a1", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -617,7 +617,7 @@ package body Impunit is\n \n       for J in Non_Imp_File_Names_12'Range loop\n          if Name_Buffer (1 .. 8) = Non_Imp_File_Names_12 (J) then\n-            return Ada_12_Unit;\n+            return Ada_2012_Unit;\n          end if;\n       end loop;\n "}, {"sha": "27b6e6e71b02dbdc0db7145b77ee12bb173daf2e", "filename": "gcc/ada/impunit.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fimpunit.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fimpunit.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.ads?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -53,7 +53,7 @@ package Impunit is\n       --  Ada 95 mode program will generate a warning (again, strictly speaking\n       --  this should be an error, but that seems over-strenuous).\n \n-      Ada_12_Unit);\n+      Ada_2012_Unit);\n       --  This unit is defined in the Ada 2012 RM. Withing this unit from a Ada\n       --  95 mode or Ada 2005 program will generate a warning (again, strictly\n       --  speaking this should be an error, but that seems over-strenuous)."}, {"sha": "0fd2f35a5e2d8032a03c392a8477edcba8d75202", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -480,7 +480,7 @@ package body Lib.Xref is\n \n       if Comes_From_Source (N)\n         and then Is_Ada_2012_Only (E)\n-        and then Ada_Version < Ada_12\n+        and then Ada_Version < Ada_2012\n         and then Warn_On_Ada_2012_Compatibility\n         and then (Typ = 'm' or else Typ = 'r')\n       then"}, {"sha": "9adc83934a109549bb24822fceabd1871bfd567c", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -64,14 +64,13 @@ package Opt is\n    --  GNATBIND, GNATLINK\n    --  Set True if binder file to be generated in Ada rather than C\n \n-   type Ada_Version_Type is (Ada_83, Ada_95, Ada_05, Ada_12);\n+   type Ada_Version_Type is (Ada_83, Ada_95, Ada_05, Ada_2012);\n    pragma Ordered (Ada_Version_Type);\n    --  Versions of Ada for Ada_Version below. Note that these are ordered,\n    --  so that tests like Ada_Version >= Ada_95 are legitimate and useful.\n \n    Ada_2005 : Ada_Version_Type renames Ada_05;\n-   Ada_2012 : Ada_Version_Type renames Ada_12;\n-   --  Renamings with full names (preferred usage)\n+   --  Renaming with full name (preferred usage)\n \n    Ada_Version_Default : constant Ada_Version_Type := Ada_05;\n    pragma Warnings (Off, Ada_Version_Default);\n@@ -97,7 +96,7 @@ package Opt is\n    --  the rare cases (notably for pragmas Preelaborate_05 and Pure_05)\n    --  where in the run-time we want the explicit version set.\n \n-   Ada_Version_Runtime : Ada_Version_Type := Ada_12;\n+   Ada_Version_Runtime : Ada_Version_Type := Ada_2012;\n    --  GNAT\n    --  Ada version used to compile the runtime. Used to set Ada_Version (but\n    --  not Ada_Version_Explicit) when compiling predefined or internal units."}, {"sha": "4b95767c2998f0ddbc01a6c088f0ea6dded24d11", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -3683,7 +3683,7 @@ package body Ch3 is\n                   --  Technically in the grammar, the expression must match the\n                   --  grammar for restricted expression.\n \n-                  if Ada_Version >= Ada_12 then\n+                  if Ada_Version >= Ada_2012 then\n                      Check_Restricted_Expression (Expr_Node);\n \n                   --  In Ada 83 mode, the syntax required a simple expression"}, {"sha": "7faa02cfde569b2c65c933eb2364434b106b2670", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -235,7 +235,7 @@ package body Ch4 is\n \n          --  Qualified expression in Ada 2012 mode (treated as a name)\n \n-         if Ada_Version >= Ada_12 and then Token = Tok_Left_Paren then\n+         if Ada_Version >= Ada_2012 and then Token = Tok_Left_Paren then\n             goto Scan_Name_Extension_Apostrophe;\n \n          --  If left paren not in Ada 2012, then it is not part of the name,\n@@ -389,7 +389,7 @@ package body Ch4 is\n          begin\n             --  Check for qualified expression case in Ada 2012 mode\n \n-            if Ada_Version >= Ada_12 and then Token = Tok_Left_Paren then\n+            if Ada_Version >= Ada_2012 and then Token = Tok_Left_Paren then\n                Name_Node := P_Qualified_Expression (Name_Node);\n                goto Scan_Name_Extension;\n \n@@ -2073,7 +2073,7 @@ package body Ch4 is\n          --  If qualified expression, comment and continue, otherwise something\n          --  is pretty nasty so do an Error_Resync call.\n \n-         if Ada_Version < Ada_12\n+         if Ada_Version < Ada_2012\n            and then Nkind (Node1) = N_Qualified_Expression\n          then\n             Error_Msg_SC (\"\\would be legal in Ada 2012 mode\");\n@@ -2400,7 +2400,7 @@ package body Ch4 is\n                --  If this looks like a conditional expression, then treat it\n                --  that way with an error message.\n \n-               elsif Ada_Version >= Ada_12 then\n+               elsif Ada_Version >= Ada_2012 then\n                   Error_Msg_SC\n                     (\"conditional expression must be parenthesized\");\n                   return P_Conditional_Expression;\n@@ -2426,7 +2426,7 @@ package body Ch4 is\n                --  If this looks like a case expression, then treat it that way\n                --  with an error message.\n \n-               elsif Ada_Version >= Ada_12 then\n+               elsif Ada_Version >= Ada_2012 then\n                   Error_Msg_SC (\"case expression must be parenthesized\");\n                   return P_Case_Expression;\n \n@@ -2716,7 +2716,7 @@ package body Ch4 is\n       Save_State : Saved_Scan_State;\n \n    begin\n-      if Ada_Version < Ada_12 then\n+      if Ada_Version < Ada_2012 then\n          Error_Msg_SC (\"|case expression is an Ada 2012 feature\");\n          Error_Msg_SC (\"\\|unit must be compiled with -gnat2012 switch\");\n       end if;\n@@ -2807,7 +2807,7 @@ package body Ch4 is\n    begin\n       Inside_Conditional_Expression := Inside_Conditional_Expression + 1;\n \n-      if Token = Tok_If and then Ada_Version < Ada_12 then\n+      if Token = Tok_If and then Ada_Version < Ada_2012 then\n          Error_Msg_SC (\"|conditional expression is an Ada 2012 feature\");\n          Error_Msg_SC (\"\\|unit must be compiled with -gnat2012 switch\");\n       end if;\n@@ -2884,13 +2884,13 @@ package body Ch4 is\n    procedure P_Membership_Test (N : Node_Id) is\n       Alt : constant Node_Id :=\n               P_Range_Or_Subtype_Mark\n-                (Allow_Simple_Expression => (Ada_Version >= Ada_12));\n+                (Allow_Simple_Expression => (Ada_Version >= Ada_2012));\n \n    begin\n       --  Set case\n \n       if Token = Tok_Vertical_Bar then\n-         if Ada_Version < Ada_12 then\n+         if Ada_Version < Ada_2012 then\n             Error_Msg_SC (\"set notation is an Ada 2012 feature\");\n             Error_Msg_SC (\"\\|unit must be compiled with -gnat2012 switch\");\n          end if;"}, {"sha": "264426913a8aa51db6ca34f313fc18dc4608e061", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -710,7 +710,7 @@ package body Ch6 is\n \n                   --  Check we are in Ada 2012 mode\n \n-                  if Ada_Version < Ada_12 then\n+                  if Ada_Version < Ada_2012 then\n                      Error_Msg_SC\n                        (\"parameterized expression is an Ada 2012 feature!\");\n                      Error_Msg_SC"}, {"sha": "2e58c0058f0191ac6ae45e185f25a676d6c6ebe4", "filename": "gcc/ada/par-ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fpar-ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fpar-ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch8.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -109,7 +109,7 @@ package body Ch8 is\n \n    begin\n       if Token = Tok_All then\n-         if Ada_Version < Ada_12 then\n+         if Ada_Version < Ada_2012 then\n             Error_Msg_SC (\"|`USE ALL TYPE` is an Ada 2012 feature\");\n             Error_Msg_SC (\"\\|unit must be compiled with -gnat2012 switch\");\n          end if;"}, {"sha": "1c00e392676228151ca47e82ad34f16481d3b9be", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -328,8 +328,8 @@ begin\n \n       when Pragma_Ada_12 | Pragma_Ada_2012 =>\n          if Arg_Count = 0 then\n-            Ada_Version := Ada_12;\n-            Ada_Version_Explicit := Ada_12;\n+            Ada_Version := Ada_2012;\n+            Ada_Version_Explicit := Ada_2012;\n          end if;\n \n       -----------\n@@ -389,7 +389,7 @@ begin\n \n          if Chars (Expression (Arg1)) = Name_On then\n             Extensions_Allowed := True;\n-            Ada_Version := Ada_12;\n+            Ada_Version := Ada_2012;\n          else\n             Extensions_Allowed := False;\n             Ada_Version := Ada_Version_Explicit;"}, {"sha": "fcbf1dfa8429c7f87eb0835dcf1e1aa7ec882e87", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -3965,7 +3965,7 @@ package body Sem_Aggr is\n                --  designated types match.\n \n                elsif Typech /= Base_Type (Etype (Component)) then\n-                  if Ada_Version >= Ada_12\n+                  if Ada_Version >= Ada_2012\n                     and then Ekind (Typech) = E_Anonymous_Access_Type\n                     and then\n                        Ekind (Etype (Component)) = E_Anonymous_Access_Type"}, {"sha": "105f8567ff4dabb90731afe9b58c9658fd4eefb9", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -2458,8 +2458,8 @@ package body Sem_Ch10 is\n                then\n                   Error_Msg_N (\"& is an Ada 2005 unit?\", Name (N));\n \n-               elsif U_Kind = Ada_12_Unit\n-                 and then Ada_Version < Ada_12\n+               elsif U_Kind = Ada_2012_Unit\n+                 and then Ada_Version < Ada_2012\n                  and then Warn_On_Ada_2012_Compatibility\n                then\n                   Error_Msg_N (\"& is an Ada 2012 unit?\", Name (N));"}, {"sha": "956c640a850d324203cc77428c99e687d121cd9c", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -2808,7 +2808,7 @@ package body Sem_Ch12 is\n             --  versions of Ada as well as Ada 2012???\n \n             if Is_Abstract_Type (Designated_Type (Result_Type))\n-              and then Ada_Version >= Ada_12\n+              and then Ada_Version >= Ada_2012\n             then\n                Error_Msg_N (\"generic function cannot have an access result\"\n                  & \" that designates an abstract type\", Spec);\n@@ -2819,7 +2819,7 @@ package body Sem_Ch12 is\n             Typ := Entity (Result_Definition (Spec));\n \n             if Is_Abstract_Type (Typ)\n-              and then Ada_Version >= Ada_12\n+              and then Ada_Version >= Ada_2012\n             then\n                Error_Msg_N\n                  (\"generic function cannot have abstract result type\", Spec);\n@@ -9986,7 +9986,7 @@ package body Sem_Ch12 is\n \n          if Is_Limited_Type (Act_T)\n            and then not Is_Limited_Type (A_Gen_T)\n-           and then Ada_Version >= Ada_12\n+           and then Ada_Version >= Ada_2012\n          then\n             Error_Msg_NE\n               (\"actual for non-limited & cannot be a limited type\", Actual,"}, {"sha": "76516e36bbdfdbb337d68038411affe14e7ccb40", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -562,7 +562,7 @@ package body Sem_Ch4 is\n                                        Reason => CE_Null_Not_Allowed);\n \n                begin\n-                  if Ada_Version >= Ada_12 then\n+                  if Ada_Version >= Ada_2012 then\n                      Error_Msg_N\n                        (\"an uninitialized allocator cannot have\"\n                          & \" a null exclusion\", N);\n@@ -2419,7 +2419,7 @@ package body Sem_Ch4 is\n       Analyze_Expression (L);\n \n       if No (R)\n-        and then Ada_Version >= Ada_12\n+        and then Ada_Version >= Ada_2012\n       then\n          Analyze_Set_Membership;\n          return;"}, {"sha": "3caa1c23d18a8a4db8cb390e2c87f15e0b9b716f", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -3002,7 +3002,7 @@ package body Sem_Ch6 is\n               and then\n                 not Is_Class_Wide_Type (Designated_Type (Etype (Designator)))\n               and then Is_Abstract_Type (Designated_Type (Etype (Designator)))\n-              and then Ada_Version >= Ada_12\n+              and then Ada_Version >= Ada_2012\n             then\n                Error_Msg_N (\"function whose access result designates \"\n                  & \"abstract type must be abstract\", N);\n@@ -7112,7 +7112,7 @@ package body Sem_Ch6 is\n                     and then Is_Tagged_Type (Designated_Type (Etype (S)))\n                     and then\n                       not Is_Class_Wide_Type (Designated_Type (Etype (S)))\n-                    and then Ada_Version >= Ada_12\n+                    and then Ada_Version >= Ada_2012\n                   then\n                      Error_Msg_N\n                        (\"private function with controlling access result \"\n@@ -8160,7 +8160,7 @@ package body Sem_Ch6 is\n          then\n             Make_Inequality_Operator (S);\n \n-            if Ada_Version >= Ada_12 then\n+            if Ada_Version >= Ada_2012 then\n                Check_Untagged_Equality (S);\n             end if;\n          end if;"}, {"sha": "51561a1270d2e7dd890441495e20ca0f915a94d3", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -5542,8 +5542,8 @@ package body Sem_Prag is\n \n                --  Now set Ada 2012 mode\n \n-               Ada_Version := Ada_12;\n-               Ada_Version_Explicit := Ada_12;\n+               Ada_Version := Ada_2012;\n+               Ada_Version_Explicit := Ada_2012;\n             end if;\n          end;\n \n@@ -10684,7 +10684,7 @@ package body Sem_Prag is\n \n             --  This is one of the few cases where we need to test the value of\n             --  Ada_Version_Explicit rather than Ada_Version (which is always\n-            --  set to Ada_12 in a predefined unit), we need to know the\n+            --  set to Ada_2012 in a predefined unit), we need to know the\n             --  explicit version set to know if this pragma is active.\n \n             if Ada_Version_Explicit >= Ada_05 then\n@@ -11184,7 +11184,7 @@ package body Sem_Prag is\n \n             --  This is one of the few cases where we need to test the value of\n             --  Ada_Version_Explicit rather than Ada_Version (which is always\n-            --  set to Ada_12 in a predefined unit), we need to know the\n+            --  set to Ada_2012 in a predefined unit), we need to know the\n             --  explicit version set to know if this pragma is active.\n \n             if Ada_Version_Explicit >= Ada_05 then"}, {"sha": "353a83dd03f3db55bc10be72db487d7ea05c5186", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -8362,23 +8362,28 @@ package body Sem_Res is\n          Index := First_Index (Array_Type);\n          Resolve (Drange, Base_Type (Etype (Index)));\n \n-         if Nkind (Drange) = N_Range\n+         if Nkind (Drange) = N_Range then\n+\n+            --  Ensure that side effects in the bounds are properly handled\n+\n+            Remove_Side_Effects (Low_Bound  (Drange), Variable_Ref => True);\n+            Remove_Side_Effects (High_Bound (Drange), Variable_Ref => True);\n \n             --  Do not apply the range check to nodes associated with the\n             --  frontend expansion of the dispatch table. We first check\n-            --  if Ada.Tags is already loaded to void the addition of an\n+            --  if Ada.Tags is already loaded to avoid the addition of an\n             --  undesired dependence on such run-time unit.\n \n-           and then\n-             (not Tagged_Type_Expansion\n-               or else not\n-                 (RTU_Loaded (Ada_Tags)\n+            if not Tagged_Type_Expansion\n+              or else not\n+                (RTU_Loaded (Ada_Tags)\n                    and then Nkind (Prefix (N)) = N_Selected_Component\n                    and then Present (Entity (Selector_Name (Prefix (N))))\n                    and then Entity (Selector_Name (Prefix (N))) =\n-                                         RTE_Record_Component (RE_Prims_Ptr)))\n-         then\n-            Apply_Range_Check (Drange, Etype (Index));\n+                                         RTE_Record_Component (RE_Prims_Ptr))\n+            then\n+               Apply_Range_Check (Drange, Etype (Index));\n+            end if;\n          end if;\n       end if;\n "}, {"sha": "8050267743c38d7e26105afa96b7bdcd3c6104ed", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -548,7 +548,7 @@ package body Switch.C is\n                --  implicit setting here, since for example, we want\n                --  Preelaborate_05 treated as Preelaborate\n \n-               Ada_Version := Ada_12;\n+               Ada_Version := Ada_2012;\n                Ada_Version_Explicit := Ada_Version;\n \n                --  Set default warnings and style checks for -gnatg\n@@ -1075,7 +1075,7 @@ package body Switch.C is\n                   Bad_Switch (\"-gnat1\" & Switch_Chars (Ptr .. Max));\n                else\n                   Ptr := Ptr + 1;\n-                  Ada_Version := Ada_12;\n+                  Ada_Version := Ada_2012;\n                   Ada_Version_Explicit := Ada_Version;\n                end if;\n \n@@ -1089,7 +1089,7 @@ package body Switch.C is\n                   Ada_Version := Ada_05;\n \n                elsif Switch_Chars (Ptr .. Ptr + 3) = \"2012\" then\n-                  Ada_Version := Ada_12;\n+                  Ada_Version := Ada_2012;\n \n                else\n                   Bad_Switch (\"-gnat\" & Switch_Chars (Ptr .. Ptr + 3));"}, {"sha": "350ff9415802b35146b923d2ec5eefb8900f7551", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe945f1d543dc34b78b975a9053872c744b295a/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=dbe945f1d543dc34b78b975a9053872c744b295a", "patch": "@@ -608,7 +608,7 @@ begin\n \n    Write_Switch_Char (\"12\");\n \n-   if Ada_Version_Default = Ada_12 then\n+   if Ada_Version_Default = Ada_2012 then\n       Write_Line (\"Ada 2012 mode (default)\");\n    else\n       Write_Line (\"Allow Ada 2012 extensions\");"}]}