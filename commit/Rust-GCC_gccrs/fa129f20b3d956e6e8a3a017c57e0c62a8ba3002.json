{"sha": "fa129f20b3d956e6e8a3a017c57e0c62a8ba3002", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmExMjlmMjBiM2Q5NTZlNmU4YTNhMDE3YzU3ZTBjNjJhOGJhMzAwMg==", "commit": {"author": {"name": "Thiago Macieira", "email": "thiago.macieira@intel.com", "date": "2012-09-06T20:31:08Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2012-09-06T20:31:08Z"}, "message": "re PR libstdc++/54172 (__cxa_guard_acquire thread-safety issue)\n\n2012-09-06  Thiago Macieira  <thiago.macieira@intel.com>\n\n\tPR libstdc++/54172\n        * libsupc++/guard.cc (__cxa_guard_acquire): Exit the loop earlier if\n        we detect that another thread has had success. Don't compare_exchange\n        from a finished state back to a waiting state. Comment.\n\nFrom-SVN: r191042", "tree": {"sha": "fc46d4517215160085224e179732892943443922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc46d4517215160085224e179732892943443922"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa129f20b3d956e6e8a3a017c57e0c62a8ba3002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa129f20b3d956e6e8a3a017c57e0c62a8ba3002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa129f20b3d956e6e8a3a017c57e0c62a8ba3002", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa129f20b3d956e6e8a3a017c57e0c62a8ba3002/comments", "author": {"login": "thiagomacieira", "id": 4109772, "node_id": "MDQ6VXNlcjQxMDk3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4109772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thiagomacieira", "html_url": "https://github.com/thiagomacieira", "followers_url": "https://api.github.com/users/thiagomacieira/followers", "following_url": "https://api.github.com/users/thiagomacieira/following{/other_user}", "gists_url": "https://api.github.com/users/thiagomacieira/gists{/gist_id}", "starred_url": "https://api.github.com/users/thiagomacieira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thiagomacieira/subscriptions", "organizations_url": "https://api.github.com/users/thiagomacieira/orgs", "repos_url": "https://api.github.com/users/thiagomacieira/repos", "events_url": "https://api.github.com/users/thiagomacieira/events{/privacy}", "received_events_url": "https://api.github.com/users/thiagomacieira/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "385c06817b589184432e39c9cd318ec7e32d3de4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385c06817b589184432e39c9cd318ec7e32d3de4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/385c06817b589184432e39c9cd318ec7e32d3de4"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "f3a5852dd2185bee43e9bceac4f484fd13c8593a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa129f20b3d956e6e8a3a017c57e0c62a8ba3002/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa129f20b3d956e6e8a3a017c57e0c62a8ba3002/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fa129f20b3d956e6e8a3a017c57e0c62a8ba3002", "patch": "@@ -1,3 +1,10 @@\n+2012-09-06  Thiago Macieira  <thiago.macieira@intel.com>\n+\n+\tPR libstdc++/54172\n+        * libsupc++/guard.cc (__cxa_guard_acquire): Exit the loop earlier if\n+        we detect that another thread has had success. Don't compare_exchange\n+        from a finished state back to a waiting state. Comment.\n+\n 2012-09-05  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/54296"}, {"sha": "60165cdecb459a72655f30a5d04c1987590c6a70", "filename": "libstdc++-v3/libsupc++/guard.cc", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa129f20b3d956e6e8a3a017c57e0c62a8ba3002/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa129f20b3d956e6e8a3a017c57e0c62a8ba3002/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc?ref=fa129f20b3d956e6e8a3a017c57e0c62a8ba3002", "patch": "@@ -244,13 +244,13 @@ namespace __cxxabiv1\n     if (__gthread_active_p ())\n       {\n \tint *gi = (int *) (void *) g;\n-\tint expected(0);\n \tconst int guard_bit = _GLIBCXX_GUARD_BIT;\n \tconst int pending_bit = _GLIBCXX_GUARD_PENDING_BIT;\n \tconst int waiting_bit = _GLIBCXX_GUARD_WAITING_BIT;\n \n \twhile (1)\n \t  {\n+\t    int expected(0);\n \t    if (__atomic_compare_exchange_n(gi, &expected, pending_bit, false,\n \t\t\t\t\t    __ATOMIC_ACQ_REL,\n \t\t\t\t\t    __ATOMIC_RELAXED))\n@@ -264,13 +264,26 @@ namespace __cxxabiv1\n \t\t// Already initialized.\n \t\treturn 0;\t\n \t      }\n+\n \t     if (expected == pending_bit)\n \t       {\n+\t\t // Use acquire here.\n \t\t int newv = expected | waiting_bit;\n \t\t if (!__atomic_compare_exchange_n(gi, &expected, newv, false,\n \t\t\t\t\t\t  __ATOMIC_ACQ_REL, \n-\t\t\t\t\t\t  __ATOMIC_RELAXED))\n-\t\t   continue;\n+\t\t\t\t\t\t  __ATOMIC_ACQUIRE))\n+\t\t   {\n+\t\t     if (expected == guard_bit)\n+\t\t       {\n+\t\t\t // Make a thread that failed to set the\n+\t\t\t // waiting bit exit the function earlier,\n+\t\t\t // if it detects that another thread has\n+\t\t\t // successfully finished initialising.\n+\t\t\t return 0;\n+\t\t       }\n+\t\t     if (expected == 0)\n+\t\t       continue;\n+\t\t   }\n \t\t \n \t\t expected = newv;\n \t       }"}]}