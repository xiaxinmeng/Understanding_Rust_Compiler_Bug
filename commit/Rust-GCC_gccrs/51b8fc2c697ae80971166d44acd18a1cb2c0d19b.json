{"sha": "51b8fc2c697ae80971166d44acd18a1cb2c0d19b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFiOGZjMmM2OTdhZTgwOTcxMTY2ZDQ0YWNkMThhMWNiMmMwZDE5Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-12T23:33:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-12T23:33:39Z"}, "message": "(function units): Numerous cycle count change.\n\n(zero_extendqidi2, extendqidi2, zero_extendhidi2): New patterns.\n(extendhidi2, zero_extendsidi2, extendsidi2): Likewise.\n(zero_extendqisi2, zero_extendqihi2, zero_extendhisi2): Use\nandil/andi instead of rlinm/rlwinm.\n(zero_extendqihi2): Add condition register variants.\n(extendqisi2, extendqihi2): Use extsb for PowerPC.\n(adddi3, subdi3, negdi2, ashrdi3): Emulate only if !TARGET_POWERPC64.\n(movdf, movdi, movti): New PowerPC64 versions.\n(load/store with update): New PowerPC64 patterns.\n\nFrom-SVN: r7288", "tree": {"sha": "d8b089ca5a1281bd88ba19c6c59dedb6a10b7e17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8b089ca5a1281bd88ba19c6c59dedb6a10b7e17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51b8fc2c697ae80971166d44acd18a1cb2c0d19b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51b8fc2c697ae80971166d44acd18a1cb2c0d19b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51b8fc2c697ae80971166d44acd18a1cb2c0d19b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51b8fc2c697ae80971166d44acd18a1cb2c0d19b/comments", "author": null, "committer": null, "parents": [{"sha": "8de7634efbb74727acaaab922972c04beef77210", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de7634efbb74727acaaab922972c04beef77210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de7634efbb74727acaaab922972c04beef77210"}], "stats": {"total": 736, "additions": 576, "deletions": 160}, "files": [{"sha": "3796e5eac867fc339c85b1978b09430fc5bd1da9", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 576, "deletions": 160, "changes": 736, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b8fc2c697ae80971166d44acd18a1cb2c0d19b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b8fc2c697ae80971166d44acd18a1cb2c0d19b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=51b8fc2c697ae80971166d44acd18a1cb2c0d19b", "patch": "@@ -45,6 +45,8 @@\n ; (define_function_unit NAME MULTIPLICITY SIMULTANEITY\n ;\t\t\tTEST READY-DELAY ISSUE-DELAY [CONFLICT-LIST])\n \n+; Load/Store Unit -- POWER/2 and pure PowerPC only\n+; (POWER and 601 use Integer Unit)\n (define_function_unit \"lsu\" 1 0\n   (and (eq_attr \"type\" \"load\")\n        (eq_attr \"cpu\" \"rios2,ppc603,ppc604,ppc620\"))\n@@ -65,26 +67,74 @@\n        (eq_attr \"cpu\" \"rios1,ppc601\"))\n   3 0)\n \n+; Integer Unit (RIOS1, PPC601, PPC603)\n+; Trivial operations take one cycle which need not be listed here.\n (define_function_unit \"iu\" 1 0\n   (and (eq_attr \"type\" \"imul\")\n        (eq_attr \"cpu\" \"rios1\"))\n-  3 0)\n+  3 3)\n \n (define_function_unit \"iu\" 1 0\n   (and (eq_attr \"type\" \"imul\")\n-       (eq_attr \"cpu\" \"ppc601,ppc603,ppc604,ppc620\"))\n-  5 0)\n+       (eq_attr \"cpu\" \"ppc601,ppc603\"))\n+  5 5)\n \n (define_function_unit \"iu\" 1 0\n   (and (eq_attr \"type\" \"idiv\")\n        (eq_attr \"cpu\" \"rios1\"))\n-  19 0)\n+  19 19)\n \n (define_function_unit \"iu\" 1 0\n   (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"ppc601,ppc603,ppc604,ppc620\"))\n-  36 0)\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  36 36)\n+\n+(define_function_unit \"iu\" 1 0\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  37 36)\n+\n+; RIOS2 has two integer units: a primary one which can perform all\n+; operations and a secondary one which is fed in lock step with the first\n+; and can perform \"simple\" integer operations.\n+(define_function_unit \"iu2\" 2 0\n+  (and (eq_attr \"type\" \"integer\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  1 0\n+  [(eq_attr \"type\" \"imul,idiv\")])\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  2 2\n+  [(eq_attr \"type\" \"integer\")])\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  13 13\n+  [(eq_attr \"type\" \"integer\")])\n+\n+; PPC604 has three integer units: one primary and two secondary.\n+(define_function_unit \"iu3\" 3 0\n+  (and (eq_attr \"type\" \"integer\")\n+       (eq_attr \"cpu\" \"ppc604,ppc620\"))\n+  1 0\n+  [(eq_attr \"type\" \"imul,idiv\")])\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"ppc604,ppc620\"))\n+  4 2\n+  [(eq_attr \"type\" \"integer\")])\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppc604,ppc620\"))\n+  20 19\n+  [(eq_attr \"type\" \"integer\")])\n \n+; Branch Processing Unit\n (define_function_unit \"bpu\" 1 0\n   (eq_attr \"type\" \"compare\")\n   4 0)\n@@ -113,74 +163,73 @@\n        (eq_attr \"cpu\" \"ppc601,ppc603,ppc604,ppc620\"))\n   4 0)\n \n+; Floating Point Unit (RIOS1, PPC601, PPC603, PPC604).\n (define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"fp\")\n+  (and (eq_attr \"type\" \"fp,dmul\")\n        (eq_attr \"cpu\" \"rios1\"))\n   2 0)\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"fp\")\n-       (eq_attr \"cpu\" \"ppc601,ppc603,ppc604,ppc620\"))\n+       (eq_attr \"cpu\" \"ppc601\"))\n   4 0)\n \n+(define_function_unit \"fpu\" 1 0\n+  (and (eq_attr \"type\" \"fp\")\n+       (eq_attr \"cpu\" \"ppc603,ppc604,ppc620\"))\n+  3 0)\n+\n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"dmul\")\n-       (eq_attr \"cpu\" \"rios1\"))\n-  2 0)\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  5 5)\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"dmul\")\n-       (eq_attr \"cpu\" \"ppc601,ppc603,ppc604,ppc620\"))\n-  5 0)\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  4 2)\n \n (define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"sdiv\")\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"ppc604,ppc620\"))\n+  3 0)\n+\n+(define_function_unit \"fpu\" 1 0\n+  (and (eq_attr \"type\" \"sdiv,ddiv\")\n        (eq_attr \"cpu\" \"rios1\"))\n-  19 0)\n+  19 19)\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"sdiv\")\n-       (eq_attr \"cpu\" \"ppc601,ppc603,ppc604,ppc620\"))\n-  17 0)\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  17 17)\n+\n+(define_function_unit \"fpu\" 1 0\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc603,ppc604,ppc620\"))\n+  18 18)\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"ddiv\")\n-       (eq_attr \"cpu\" \"rios1\"))\n-  19 0)\n+       (eq_attr \"cpu\" \"ppc601,ppc604,ppc620\"))\n+  31 31)\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"ddiv\")\n-       (eq_attr \"cpu\" \"ppc601,ppc603,ppc604,ppc620\"))\n-  31 0)\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  33 33)\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"ssqrt\")\n-       (eq_attr \"cpu\" \"ppc603,ppc604,ppc620\"))\n-  31 0)\n+       (eq_attr \"cpu\" \"ppc604,ppc620\"))\n+  31 31)\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"dsqrt\")\n-       (eq_attr \"cpu\" \"ppc603,ppc604,ppc620\"))\n-  31 0)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"integer\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  1 0\n-  [(eq_attr \"type\" \"imul,idiv\")])\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  2 0\n-  [(eq_attr \"type\" \"integer\")])\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  13 0\n-  [(eq_attr \"type\" \"integer\")])\n+       (eq_attr \"cpu\" \"ppc604,ppc620\"))\n+  31 31)\n \n+; RIOS2 has two symmetric FPUs.\n (define_function_unit \"fpu2\" 2 0\n   (and (eq_attr \"type\" \"fp\")\n        (eq_attr \"cpu\" \"rios2\"))\n@@ -192,28 +241,222 @@\n   2 0)\n \n (define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"sdiv\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  17 0)\n-\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"ddiv\")\n+  (and (eq_attr \"type\" \"sdiv,ddiv\")\n        (eq_attr \"cpu\" \"rios2\"))\n-  17 0)\n+  17 17)\n \n (define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"ssqrt\")\n+  (and (eq_attr \"type\" \"ssqrt,dsqrt\")\n        (eq_attr \"cpu\" \"rios2\"))\n-  26 0)\n-\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"dsqrt\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  26 0)\n+  26 26)\n \f\n ;; Start with fixed-point load and store insns.  Here we put only the more\n ;; complex forms.  Basic data transfer is done later.\n \n+(define_expand \"zero_extendqidi2\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(zero_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_POWERPC64\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(zero_extend:DI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r\")))]\n+  \"TARGET_POWERPC64\"\n+  \"@\n+   lbz%U1%X1 %0,%1\n+   andi %0,%1,0xff\"\n+  [(set_attr \"type\" \"load,*\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (zero_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:DI 2 \"=r\"))]\n+  \"\"\n+  \"andi. %2,%1,0xff\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (zero_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(zero_extend:DI (match_dup 1)))]\n+  \"\"\n+  \"andi. %0,%1,0xff\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_expand \"extendqidi2\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(sign_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_POWERPC64\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(sign_extend:DI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r\")))]\n+  \"TARGET_POWERPC64\"\n+  \"@\n+   lba%U1%X1 %0,%1\n+   extsb %0,%1\"\n+  [(set_attr \"type\" \"load,*\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (sign_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:DI 2 \"=r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"extsb. %2,%1\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (sign_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(sign_extend:DI (match_dup 1)))]\n+  \"TARGET_POWERPC64\"\n+  \"extsb. %0,%1\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_expand \"zero_extendhidi2\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(zero_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_POWERPC64\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(zero_extend:DI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r\")))]\n+  \"TARGET_POWERPC64\"\n+  \"@\n+   lhz%U1%X1 %0,%1\n+   andi %0,%1,0xffff\"\n+  [(set_attr \"type\" \"load,*\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (zero_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:DI 2 \"=r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"andi. %2,%1,0xffff\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (zero_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(zero_extend:DI (match_dup 1)))]\n+  \"TARGET_POWERPC64\"\n+  \"andi. %0,%1,0xffff\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_expand \"extendhidi2\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(sign_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_POWERPC64\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(sign_extend:DI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r\")))]\n+  \"TARGET_POWERPC64\"\n+  \"@\n+   lha%U1%X1 %0,%1\n+   extsh %0,%1\"\n+  [(set_attr \"type\" \"load,*\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (sign_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:DI 2 \"=r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"extsh. %2,%1\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (sign_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(sign_extend:DI (match_dup 1)))]\n+  \"TARGET_POWERPC64\"\n+  \"extsh. %0,%1\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_expand \"zero_extendsidi2\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_POWERPC64\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(zero_extend:DI (match_operand:SI 1 \"reg_or_mem_operand\" \"m,r\")))]\n+  \"TARGET_POWERPC64\"\n+  \"@\n+   lwz%U1%X1 %0,%1\n+   rldicl %0,%1,0,32\"\n+  [(set_attr \"type\" \"load,*\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:DI 2 \"=r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"rldicl. %2,%1,0,32\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(zero_extend:DI (match_dup 1)))]\n+  \"TARGET_POWERPC64\"\n+  \"rldicl. %0,%1,0,32\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_expand \"extendsidi2\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_POWERPC64\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(sign_extend:DI (match_operand:SI 1 \"reg_or_mem_operand\" \"m,r\")))]\n+  \"TARGET_POWERPC64\"\n+  \"@\n+   lwa%U1%X1 %0,%1\n+   extsw %0,%1\"\n+  [(set_attr \"type\" \"load,*\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:DI 2 \"=r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"extsw. %2,%1\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(sign_extend:DI (match_dup 1)))]\n+  \"TARGET_POWERPC64\"\n+  \"extsw. %0,%1\"\n+  [(set_attr \"type\" \"compare\")])\n+\n (define_expand \"zero_extendqisi2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(zero_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\")))]\n@@ -226,7 +469,7 @@\n   \"\"\n   \"@\n    lbz%U1%X1 %0,%1\n-   {rlinm|rlwinm} %0,%1,0,0xff\"\n+   {andil|andi} %0,%1,0xff\"\n   [(set_attr \"type\" \"load,*\")])\n \n (define_insn \"\"\n@@ -248,6 +491,75 @@\n   \"{andil.|andi.} %0,%1,0xff\"\n   [(set_attr \"type\" \"compare\")])\n \n+(define_expand \"extendqisi2\"\n+  [(use (match_operand:SI 0 \"gpc_reg_operand\" \"\"))\n+   (use (match_operand:QI 1 \"gpc_reg_operand\" \"\"))]\n+  \"\"\n+  \"\n+{\n+  if (TARGET_POWERPC)\n+    emit_insn (gen_extendqisi2_ppc (operands[0], operands[1]));\n+  else if (TARGET_POWER)\n+    emit_insn (gen_extendqisi2_power (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_extendqisi2_no_power (operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n+(define_insn \"extendqisi2_ppc\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(sign_extend:SI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r\")))]\n+  \"TARGET_POWERPC\"\n+  \"@\n+   lba%U1%X1 %0,%1\n+   extsb %0,%1\"\n+  [(set_attr \"type\" \"load,*\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (sign_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:SI 2 \"=r\"))]\n+  \"TARGET_POWERPC\"\n+  \"extsb. %2,%1\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (sign_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(sign_extend:SI (match_dup 1)))]\n+  \"TARGET_POWERPC\"\n+  \"extsb. %0,%1\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_expand \"extendqisi2_power\"\n+  [(parallel [(set (match_dup 2)\n+\t\t   (ashift:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\")\n+\t\t\t      (const_int 24)))\n+\t      (clobber (scratch:SI))])\n+   (parallel [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t\t   (ashiftrt:SI (match_dup 2)\n+\t\t\t\t(const_int 24)))\n+\t      (clobber (scratch:SI))])]\n+  \"TARGET_POWER\"\n+  \"\n+{ operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_reg_rtx (SImode); }\")\n+\n+(define_expand \"extendqisi2_no_power\"\n+  [(set (match_dup 2)\n+\t(ashift:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\")\n+\t\t   (const_int 24)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t(ashiftrt:SI (match_dup 2)\n+\t\t     (const_int 24)))]\n+  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"\n+{ operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_reg_rtx (SImode); }\")\n+\n (define_expand \"zero_extendqihi2\"\n   [(set (match_operand:HI 0 \"gpc_reg_operand\" \"\")\n \t(zero_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"\")))]\n@@ -260,9 +572,99 @@\n   \"\"\n   \"@\n    lbz%U1%X1 %0,%1\n-   {rlinm|rlwinm} %0,%1,0,0xff\"\n+   {andil|andi} %0,%1,0xff\"\n+  [(set_attr \"type\" \"load,*\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (zero_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:HI 2 \"=r\"))]\n+  \"\"\n+  \"{andil.|andi.} %2,%1,0xff\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (zero_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:HI 0 \"gpc_reg_operand\" \"=r\")\n+\t(zero_extend:HI (match_dup 1)))]\n+  \"\"\n+  \"{andil.|andi.} %0,%1,0xff\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_expand \"extendqihi2\"\n+  [(use (match_operand:HI 0 \"gpc_reg_operand\" \"\"))\n+   (use (match_operand:QI 1 \"gpc_reg_operand\" \"\"))]\n+  \"\"\n+  \"\n+{\n+  if (TARGET_POWERPC)\n+    emit_insn (gen_extendqihi2_ppc (operands[0], operands[1]));\n+  else if (TARGET_POWER)\n+    emit_insn (gen_extendqihi2_power (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_extendqihi2_no_power (operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n+(define_insn \"extendqihi2_ppc\"\n+  [(set (match_operand:HI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(sign_extend:HI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r\")))]\n+  \"TARGET_POWERPC\"\n+  \"@\n+   lba%U1%X1 %0,%1\n+   extsb %0,%1\"\n   [(set_attr \"type\" \"load,*\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (sign_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:HI 2 \"=r\"))]\n+  \"TARGET_POWERPC\"\n+  \"extsb. %2,%1\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (sign_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:HI 0 \"gpc_reg_operand\" \"=r\")\n+\t(sign_extend:HI (match_dup 1)))]\n+  \"TARGET_POWERPC\"\n+  \"extsb. %0,%1\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_expand \"extendqihi2_power\"\n+  [(parallel [(set (match_dup 2)\n+\t\t   (ashift:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\")\n+\t\t\t      (const_int 24)))\n+\t      (clobber (scratch:SI))])\n+   (parallel [(set (match_operand:HI 0 \"gpc_reg_operand\" \"\")\n+\t\t   (ashiftrt:SI (match_dup 2)\n+\t\t\t\t(const_int 24)))\n+\t      (clobber (scratch:SI))])]\n+  \"TARGET_POWER\"\n+  \"\n+{ operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_reg_rtx (SImode); }\")\n+\n+(define_expand \"extendqihi2_no_power\"\n+  [(set (match_dup 2)\n+\t(ashift:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\")\n+\t\t   (const_int 24)))\n+   (set (match_operand:HI 0 \"gpc_reg_operand\" \"\")\n+\t(ashiftrt:SI (match_dup 2)\n+\t\t     (const_int 24)))]\n+  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"\n+{ operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_reg_rtx (SImode); }\")\n+\n (define_expand \"zero_extendhisi2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(zero_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"\")))]\n@@ -275,7 +677,7 @@\n   \"\"\n   \"@\n    lhz%U1%X1 %0,%1\n-   {rlinm|rlwinm} %0,%1,0,0xffff\"\n+   {andil|andi} %0,%1,0xffff\"\n   [(set_attr \"type\" \"load,*\")])\n \n (define_insn \"\"\n@@ -2101,86 +2503,6 @@\n   \"! TARGET_POWER\"\n   \"sraw%I2. %0,%1,%2\"\n   [(set_attr \"type\" \"delayed_compare\")])\n-\n-(define_expand \"extendqisi2\"\n-  [(use (match_operand:SI 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:QI 1 \"gpc_reg_operand\" \"\"))]\n-  \"\"\n-  \"\n-{\n-  if (TARGET_POWER)\n-    emit_insn (gen_extendqisi2_power (operands[0], operands[1]));\n-  else\n-    emit_insn (gen_extendqisi2_no_power (operands[0], operands[1]));\n-  DONE;\n-}\")\n-\n-(define_expand \"extendqisi2_power\"\n-  [(parallel [(set (match_dup 2)\n-\t\t   (ashift:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t      (const_int 24)))\n-\t      (clobber (scratch:SI))])\n-   (parallel [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t\t   (ashiftrt:SI (match_dup 2)\n-\t\t\t\t(const_int 24)))\n-\t      (clobber (scratch:SI))])]\n-  \"TARGET_POWER\"\n-  \"\n-{ operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[2] = gen_reg_rtx (SImode); }\")\n-\n-(define_expand \"extendqisi2_no_power\"\n-  [(set (match_dup 2)\n-\t\t   (ashift:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t      (const_int 24)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t\t   (ashiftrt:SI (match_dup 2)\n-\t\t\t\t(const_int 24)))]\n-  \"! TARGET_POWER\"\n-  \"\n-{ operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[2] = gen_reg_rtx (SImode); }\")\n-\n-(define_expand \"extendqihi2\"\n-  [(use (match_operand:HI 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:QI 1 \"gpc_reg_operand\" \"\"))]\n-  \"\"\n-  \"\n-{\n-  if (TARGET_POWER)\n-    emit_insn (gen_extendqihi2_power (operands[0], operands[1]));\n-  else\n-    emit_insn (gen_extendqihi2_no_power (operands[0], operands[1]));\n-  DONE;\n-}\")\n-\n-(define_expand \"extendqihi2_power\"\n-  [(parallel [(set (match_dup 2)\n-\t\t   (ashift:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t      (const_int 24)))\n-\t      (clobber (scratch:SI))])\n-   (parallel [(set (match_operand:HI 0 \"gpc_reg_operand\" \"\")\n-\t\t   (ashiftrt:SI (match_dup 2)\n-\t\t\t\t(const_int 24)))\n-\t      (clobber (scratch:SI))])]\n-  \"TARGET_POWER\"\n-  \"\n-{ operands[0] = gen_lowpart (SImode, operands[0]);\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[2] = gen_reg_rtx (SImode); }\")\n-\n-(define_expand \"extendqihi2_no_power\"\n-  [(set (match_dup 2)\n-\t\t   (ashift:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t      (const_int 24)))\n-   (set (match_operand:HI 0 \"gpc_reg_operand\" \"\")\n-\t\t   (ashiftrt:SI (match_dup 2)\n-\t\t\t\t(const_int 24)))]\n-  \"! TARGET_POWER\"\n-  \"\n-{ operands[0] = gen_lowpart (SImode, operands[0]);\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[2] = gen_reg_rtx (SImode); }\")\n \f\n ;; Floating-point insns, excluding normal data motion.\n ;;\n@@ -2862,7 +3184,7 @@\n   \"\"\n   \"\n {\n-  if (! TARGET_POWER\n+  if (! TARGET_POWER && ! TARGET_POWERPC64\n       && short_cint_operand (operands[2], DImode))\n     FAIL;\n }\")\n@@ -2871,7 +3193,7 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r\")\n \t\t (match_operand:DI 2 \"reg_or_short_operand\" \"r,I\")))]\n-  \"TARGET_POWER\"\n+  \"TARGET_POWER && ! TARGET_POWERPC64\"\n   \"@\n    {a|addc} %L0,%L1,%L2\\;{ae|adde} %0,%1,%2\n    {ai|addic} %L0,%L1,%2\\;{a%G2e|add%G2e} %0,%1\"\n@@ -2881,7 +3203,7 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r\")\n \t\t (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))]\n-  \"! TARGET_POWER\"\n+  \"! TARGET_POWER && ! TARGET_POWERPC64\"\n   \"addc %L0,%L1,%L2\\;adde %0,%1,%2\"\n   [(set_attr \"length\" \"8\")])\n \n@@ -2892,7 +3214,7 @@\n   \"\"\n   \"\n {\n-  if (! TARGET_POWER\n+  if (! TARGET_POWER && ! TARGET_POWERPC64\n       && short_cint_operand (operands[1], DImode))\n     FAIL;\n }\")\n@@ -2901,7 +3223,7 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(minus:DI (match_operand:DI 1 \"reg_or_short_operand\" \"r,I\")\n \t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\")))]\n-  \"TARGET_POWER\"\n+  \"TARGET_POWER && ! TARGET_POWERPC64\"\n   \"@\n    {sf|subfc} %L0,%L2,%L1\\;{sfe|subfe} %0,%2,%1\n    {sfi|subfic} %L0,%L2,%1\\;{sf%G1e|subf%G1e} %0,%2\"\n@@ -2911,7 +3233,7 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(minus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))]\n-  \"! TARGET_POWER\"\n+  \"! TARGET_POWER && ! TARGET_POWERPC64\"\n   \"subfc %L0,%L2,%L1\\;subfe %0,%2,%1\"\n   [(set_attr \"length\" \"8\")])\n \n@@ -2924,7 +3246,7 @@\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(neg:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{sfi|subfic} %L0,%L1,0\\;{sfze|subfze} %0,%1\"\n   [(set_attr \"length\" \"8\")])\n \n@@ -3068,17 +3390,22 @@\n ;; just handle shifts by constants.\n \n (define_expand \"ashrdi3\"\n-  [(parallel [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=\")\n-\t\t   (ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t(match_operand:SI 2 \"general_operand\" \"\")))\n-\t      (clobber (match_scratch:SI 3 \"\"))])]\n-  \"TARGET_POWER\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n+\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"\")))]\n+  \"\"\n   \"\n-{ if (GET_CODE (operands[2]) != CONST_INT)\n+{\n+  if (TARGET_POWER && GET_CODE (operands[2]) != CONST_INT)\n+    {\n+      emit_insn (gen_ashrdi3_power (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n+  else if (! TARGET_POWERPC64)\n     FAIL;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"ashrdi3_power\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"M,i\")))\n@@ -3488,8 +3815,8 @@\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=!r,??r,o,!r,f,f,m\")\n \t(match_operand:DF 1 \"input_operand\" \"r,o,r,G,f,m,f\"))]\n-  \"register_operand (operands[0], DFmode)\n-   || register_operand (operands[1], DFmode)\"\n+  \"! TARGET_POWERPC64 && (register_operand (operands[0], DFmode)\n+   || register_operand (operands[1], DFmode))\"\n   \"*\n {\n   switch (which_alternative)\n@@ -3526,6 +3853,21 @@\n }\"\n   [(set_attr \"type\" \"*,load,*,*,fp,fpload,*\")\n    (set_attr \"length\" \"8,8,8,8,*,*,*\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=!r,??r,o,!r,f,f,m\")\n+\t(match_operand:DF 1 \"input_operand\" \"r,o,r,G,f,m,f\"))]\n+  \"TARGET_POWERPC64 && (register_operand (operands[0], DFmode)\n+   || register_operand (operands[1], DFmode))\"\n+  \"@\n+  mr %0,%1\n+  ld%U1%X1 %0,%1\n+  sd%U0%X0 %1,%0\n+  #\n+  fmr %0,%1\n+  lfd %0,%1\n+  stfd%U0%X0 %1,%0\"\n+  [(set_attr \"type\" \"*,load,*,*,fp,fpload,*\")])\n \f\n ;; Next come the multi-word integer load and store and the load and store\n ;; multiple insns.\n@@ -3552,8 +3894,8 @@\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m,f,f,m\")\n \t(match_operand:DI 1 \"input_operand\" \"r,m,r,f,m,f\"))]\n-  \"gpc_reg_operand (operands[0], DImode)\n-   || gpc_reg_operand (operands[1], DImode)\"\n+  \"! TARGET_POWERPC64 && (gpc_reg_operand (operands[0], DImode)\n+   || gpc_reg_operand (operands[1], DImode))\"\n   \"*\n {\n   switch (which_alternative)\n@@ -3588,6 +3930,24 @@\n }\"\n   [(set_attr \"type\" \"*,load,*,fp,fpload,*\")\n    (set_attr \"length\" \"8,8,8,*,*,*\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,f,f,m,r,*h\")\n+\t(match_operand:DI 1 \"input_operand\" \"r,m,r,I,J,f,m,f,*h,r\"))]\n+  \"TARGET_POWERPC64 && (gpc_reg_operand (operands[0], DImode)\n+   || gpc_reg_operand (operands[1], DImode))\"\n+  \"@\n+  mr %0,%1\n+  ld%U1%X1 %0,%1\n+  sd%U0%X0 %1,%0\n+  li %0,%1\n+  lis %0,%u1\n+  fmr %0,%1\n+  lfd%U1%X1 %0,%1\n+  stfd%U0%X0 %1,%0\n+  mf%1 %0\n+  mt%0 %1\"\n+  [(set_attr \"type\" \"*,load,*,*,*,fp,fpload,*,*,mtjmpr\")])\n \f\n ;; TImode is similar, except that we usually want to compute the address into\n ;; a register and use lsi/stsi (the exception is during reload).  MQ is also\n@@ -3596,7 +3956,7 @@\n   [(parallel [(set (match_operand:TI 0 \"general_operand\" \"\")\n \t\t   (match_operand:TI 1 \"general_operand\" \"\"))\n \t      (clobber (scratch:SI))])]\n-  \"TARGET_POWER\"\n+  \"TARGET_POWER || TARGET_POWERPC64\"\n   \"\n {\n   if (GET_CODE (operands[0]) == MEM)\n@@ -3624,7 +3984,7 @@\n   [(set (match_operand:TI 0 \"reg_or_mem_operand\" \"=Q,m,????r,????r,????r\")\n \t(match_operand:TI 1 \"reg_or_mem_operand\" \"r,r,r,Q,m\"))\n    (clobber (match_scratch:SI 2 \"=q,q#X,X,X,X\"))]\n-  \"TARGET_POWER && (gpc_reg_operand (operands[0], TImode)\n+  \"TARGET_POWER && ! TARGET_POWERPC64 && (gpc_reg_operand (operands[0], TImode)\n    || gpc_reg_operand (operands[1], TImode))\"\n   \"*\n {\n@@ -3670,6 +4030,40 @@\n }\"\n   [(set_attr \"type\" \"*,load,load,*,*\")\n    (set_attr \"length\" \"*,16,16,*,16\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=r,r,m\")\n+\t(match_operand:TI 1 \"input_operand\" \"r,m,r\"))]\n+  \"TARGET_POWERPC64 && (gpc_reg_operand (operands[0], TImode)\n+   || gpc_reg_operand (operands[1], TImode))\"\n+  \"*\n+{\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      /* We normally copy the low-numbered register first.  However, if\n+\t the first register operand 0 is the same as the second register of\n+\t operand 1, we must copy in the opposite order.  */\n+      if (REGNO (operands[0]) == REGNO (operands[1]) + 1)\n+\treturn \\\"mr %L0,%L1\\;mr %0,%1\\\";\n+      else\n+\treturn \\\"mr %0,%1\\;mr %L0,%L1\\\";\n+    case 1:\n+      /* If the low-address word is used in the address, we must load it\n+\t last.  Otherwise, load it first.  Note that we cannot have\n+\t auto-increment in that case since the address register is known to be\n+\t dead.  */\n+      if (refers_to_regno_p (REGNO (operands[0]), REGNO (operands[0]) + 1,\n+\t\t\t     operands [1], 0))\n+\treturn \\\"ld %L0,%L1\\;ld %0,%1\\\";\n+      else\n+\treturn \\\"ld%U1 %0,%1\\;ld %L0,%L1\\\";\n+    case 2:\n+      return \\\"std%U0 %1,%0\\;std %L1,%L0\\\";\n+    }\n+}\"\n+  [(set_attr \"type\" \"*,load,*\")\n+   (set_attr \"length\" \"8,8,8\")])\n \f\n (define_expand \"load_multiple\"\n   [(match_par_dup 3 [(set (match_operand:SI 0 \"\" \"\")\n@@ -3798,6 +4192,29 @@\n ;; tie and these are the pair most likely to be tieable (and the ones\n ;; that will benefit the most).\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 3 \"gpc_reg_operand\" \"=r,r\")\n+\t(mem:SI (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t (match_operand:DI 2 \"reg_or_short_operand\" \"r,I\"))))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_POWERPC64\"\n+  \"@\n+   ldux %3,%0,%2\n+   ldu %3,%2(%0)\"\n+  [(set_attr \"type\" \"load\")])\n+\n+(define_insn \"\"\n+  [(set (mem:DI (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t (match_operand:DI 2 \"reg_or_short_operand\" \"r,I\")))\n+\t(match_operand:DI 3 \"gpc_reg_operand\" \"r,r\"))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_POWERPC64\"\n+  \"@\n+   stdux %3,%0,%2\n+   stdu %3,%2(%0)\")\n+\n (define_insn \"\"\n   [(set (match_operand:SI 3 \"gpc_reg_operand\" \"=r,r\")\n \t(mem:SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n@@ -5727,7 +6144,6 @@\n }\"\n   [(set_attr \"type\" \"branch\")])\n \n-\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"branch_comparison_operator\""}]}