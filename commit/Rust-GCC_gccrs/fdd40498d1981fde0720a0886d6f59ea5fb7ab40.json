{"sha": "fdd40498d1981fde0720a0886d6f59ea5fb7ab40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRkNDA0OThkMTk4MWZkZTA3MjBhMDg4NmQ2ZjU5ZWE1ZmI3YWI0MA==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-07-20T02:53:18Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-08-16T04:31:51Z"}, "message": "RISC-V: Allow multi-lib build with different code model\n\n--with-multilib-generator was only support for different ISA/ABI\ncombination, however code model is effect the code gen a lots it\nshould able to handled in multilib mechanism.\n\nAdding `--cmodel=` option to `--with-multilib-generator` to generating\nmultilib combination with different code model.\n\nE.g.\n--with-multilib-generator=\"rv64ima-lp64--;--cmodel=medlow,medany\"\nwill generate 3 multi-lib suppport:\n1) rv64ima with lp64\n2) rv64ima with lp64 and medlow code model\n3) rv64ima with lp64 and medany code model\n\ngcc/\n\n\t* config/riscv/multilib-generator: Support code model option for\n\tmulti-lib.\n\t* doc/install.texi: Add document of new option for\n\t--with-multilib-generator.", "tree": {"sha": "87f5bb77bcb7d2fe2d77ca78c3ca943e42cc944f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87f5bb77bcb7d2fe2d77ca78c3ca943e42cc944f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdd40498d1981fde0720a0886d6f59ea5fb7ab40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd40498d1981fde0720a0886d6f59ea5fb7ab40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdd40498d1981fde0720a0886d6f59ea5fb7ab40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd40498d1981fde0720a0886d6f59ea5fb7ab40/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94974e8b580919ded10c3e73348d7af68e74736a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94974e8b580919ded10c3e73348d7af68e74736a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94974e8b580919ded10c3e73348d7af68e74736a"}], "stats": {"total": 103, "additions": 73, "deletions": 30}, "files": [{"sha": "358bda948f1d40c9350855dfbdee5db1405a7154", "filename": "gcc/config/riscv/multilib-generator", "status": "modified", "additions": 56, "deletions": 30, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdd40498d1981fde0720a0886d6f59ea5fb7ab40/gcc%2Fconfig%2Friscv%2Fmultilib-generator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdd40498d1981fde0720a0886d6f59ea5fb7ab40/gcc%2Fconfig%2Friscv%2Fmultilib-generator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fmultilib-generator?ref=fdd40498d1981fde0720a0886d6f59ea5fb7ab40", "patch": "@@ -40,6 +40,7 @@ import collections\n import itertools\n from functools import reduce\n import subprocess\n+import argparse\n \n #\n # TODO: Add test for this script.\n@@ -127,44 +128,69 @@ def expand_combination(ext):\n \n   return ext\n \n-for cfg in sys.argv[1:]:\n-  try:\n-    (arch, abi, extra, ext) = cfg.split('-')\n-  except:\n-    print (\"Invalid configure string %s, <arch>-<abi>-<extra>-<extensions>\\n\"\n-           \"<extra> and <extensions> can be empty, \"\n-           \"e.g. rv32imafd-ilp32--\" % cfg)\n-    sys.exit(1)\n-\n-  arch = arch_canonicalize (arch)\n-  arches[arch] = 1\n-  abis[abi] = 1\n-  extra = list(filter(None, extra.split(',')))\n-  ext_combs = expand_combination(ext)\n-  alts = sum([[x] + [x + y for y in ext_combs] for x in [arch] + extra], [])\n-  alts = list(map(arch_canonicalize, alts))\n+multilib_cfgs = filter(lambda x:not x.startswith(\"--\"), sys.argv[1:])\n+options = filter(lambda x:x.startswith(\"--\"), sys.argv[1:])\n+\n+parser = argparse.ArgumentParser()\n+parser.add_argument(\"--cmodel\", type=str)\n+parser.add_argument(\"cfgs\", type=str, nargs='*')\n+args = parser.parse_args()\n+\n+if args.cmodel:\n+  cmodels = [None] + args.cmodel.split(\",\")\n+else:\n+  cmodels = [None]\n+\n+cmodel_options = '/'.join(['mcmodel=%s' % x for x in cmodels[1:]])\n+cmodel_dirnames = ' \\\\\\n'.join(cmodels[1:])\n+\n+for cmodel in cmodels:\n+  for cfg in args.cfgs:\n+    try:\n+      (arch, abi, extra, ext) = cfg.split('-')\n+    except:\n+      print (\"Invalid configure string %s, <arch>-<abi>-<extra>-<extensions>\\n\"\n+             \"<extra> and <extensions> can be empty, \"\n+             \"e.g. rv32imafd-ilp32--\" % cfg)\n+      sys.exit(1)\n+\n+    # Compact code model only support rv64.\n+    if cmodel == \"compact\" and arch.startswith(\"rv32\"):\n+      continue\n \n-  # Drop duplicated entry.\n-  alts = unique(alts)\n+    arch = arch_canonicalize (arch)\n+    arches[arch] = 1\n+    abis[abi] = 1\n+    extra = list(filter(None, extra.split(',')))\n+    ext_combs = expand_combination(ext)\n+    alts = sum([[x] + [x + y for y in ext_combs] for x in [arch] + extra], [])\n+    alts = list(map(arch_canonicalize, alts))\n \n-  for alt in alts:\n-    if alt == arch:\n-      continue\n-    arches[alt] = 1\n-    reuse.append('march.%s/mabi.%s=march.%s/mabi.%s' % (arch, abi, alt, abi))\n-  required.append('march=%s/mabi=%s' % (arch, abi))\n+    # Drop duplicated entry.\n+    alts = unique(alts)\n+\n+    for alt in alts[1:]:\n+      if alt == arch:\n+        continue\n+      arches[alt] = 1\n+      reuse.append('march.%s/mabi.%s=march.%s/mabi.%s' % (arch, abi, alt, abi))\n+\n+    if cmodel:\n+      required.append('march=%s/mabi=%s/mcmodel=%s' % (arch, abi, cmodel))\n+    else:\n+      required.append('march=%s/mabi=%s' % (arch, abi))\n \n-arch_options = '/'.join(['march=%s' % x for x in arches.keys()])\n-arch_dirnames = ' \\\\\\n'.join(arches.keys())\n+  arch_options = '/'.join(['march=%s' % x for x in arches.keys()])\n+  arch_dirnames = ' \\\\\\n'.join(arches.keys())\n \n-abi_options = '/'.join(['mabi=%s' % x for x in abis.keys()])\n-abi_dirnames = ' \\\\\\n'.join(abis.keys())\n+  abi_options = '/'.join(['mabi=%s' % x for x in abis.keys()])\n+  abi_dirnames = ' \\\\\\n'.join(abis.keys())\n \n prog = sys.argv[0].split('/')[-1]\n print('# This file was generated by %s with the command:' % prog)\n print('#  %s' % ' '.join(sys.argv))\n \n-print('MULTILIB_OPTIONS = %s %s' % (arch_options, abi_options))\n-print('MULTILIB_DIRNAMES = %s %s' % (arch_dirnames, abi_dirnames))\n+print('MULTILIB_OPTIONS = %s %s %s' % (arch_options, abi_options, cmodel_options))\n+print('MULTILIB_DIRNAMES = %s %s %s' % (arch_dirnames, abi_dirnames, cmodel_dirnames))\n print('MULTILIB_REQUIRED = %s' % ' \\\\\\n'.join(required))\n print('MULTILIB_REUSE = %s' % ' \\\\\\n'.join(reuse))"}, {"sha": "8e974d2952ef05df5e7bd300c560ecbf8c3b65dd", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdd40498d1981fde0720a0886d6f59ea5fb7ab40/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdd40498d1981fde0720a0886d6f59ea5fb7ab40/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=fdd40498d1981fde0720a0886d6f59ea5fb7ab40", "patch": "@@ -1328,6 +1328,23 @@ rv64imac with lp64 and rv64imafc with lp64 will reuse this multi-lib set.\n rv64ima-lp64--f,c,fc\n @end smallexample\n \n+@option{--with-multilib-generator} have an optional configuration argument\n+@option{--cmodel=val} for code model, this option will expand with other\n+config options, @var{val} is a comma separated list of possible code model,\n+currently we support medlow and medany.\n+\n+Example 5: Add multi-lib suppport for rv64ima with lp64; rv64ima with lp64 and\n+medlow code model\n+@smallexample\n+rv64ima-lp64--;--cmodel=medlow\n+@end smallexample\n+\n+Example 6: Add multi-lib suppport for rv64ima with lp64; rv64ima with lp64 and\n+medlow code model; rv64ima with lp64 and medany code model\n+@smallexample\n+rv64ima-lp64--;--cmodel=medlow,medany\n+@end smallexample\n+\n @item --with-endian=@var{endians}\n Specify what endians to use.\n Currently only implemented for sh*-*-*."}]}