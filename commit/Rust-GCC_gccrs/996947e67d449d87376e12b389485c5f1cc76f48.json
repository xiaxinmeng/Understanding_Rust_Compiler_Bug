{"sha": "996947e67d449d87376e12b389485c5f1cc76f48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk2OTQ3ZTY3ZDQ0OWQ4NzM3NmUxMmIzODk0ODVjNWYxY2M3NmY0OA==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2013-12-11T17:15:44Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2013-12-11T17:15:44Z"}, "message": "expr.c (expand_assignment): Remove dependency on flag_strict_volatile_bitfields.\n\n2013-12-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * expr.c (expand_assignment): Remove dependency on\n        flag_strict_volatile_bitfields. Always set the memory\n        access mode.\n        (expand_expr_real_1): Likewise.\n\nFrom-SVN: r205899", "tree": {"sha": "c46c8c27c04f6cdb1b1fe9b998f7f61918b183e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c46c8c27c04f6cdb1b1fe9b998f7f61918b183e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/996947e67d449d87376e12b389485c5f1cc76f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996947e67d449d87376e12b389485c5f1cc76f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/996947e67d449d87376e12b389485c5f1cc76f48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996947e67d449d87376e12b389485c5f1cc76f48/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ebb99f967b8d4b1c23dfba167e16dd2c6786633a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb99f967b8d4b1c23dfba167e16dd2c6786633a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebb99f967b8d4b1c23dfba167e16dd2c6786633a"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "13702fe8ea4160280dead57bc3a5851ff46fe1e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996947e67d449d87376e12b389485c5f1cc76f48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996947e67d449d87376e12b389485c5f1cc76f48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=996947e67d449d87376e12b389485c5f1cc76f48", "patch": "@@ -1,3 +1,10 @@\n+2013-12-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* expr.c (expand_assignment): Remove dependency on\n+\tflag_strict_volatile_bitfields. Always set the memory \n+\taccess mode.\n+\t(expand_expr_real_1): Likewise.\n+\n 2013-12-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR middle-end/59134"}, {"sha": "cde0b859421c4292dc3f31d5f949965bf62732cf", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996947e67d449d87376e12b389485c5f1cc76f48/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996947e67d449d87376e12b389485c5f1cc76f48/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=996947e67d449d87376e12b389485c5f1cc76f48", "patch": "@@ -4838,13 +4838,13 @@ expand_assignment (tree to, tree from, bool nontemporal)\n \n       to_rtx = expand_expr (tem, NULL_RTX, VOIDmode, EXPAND_WRITE);\n \n-      /* If the bitfield is volatile, we want to access it in the\n+      /* If the field has a mode, we want to access it in the\n \t field's mode, not the computed mode.\n \t If a MEM has VOIDmode (external with incomplete type),\n \t use BLKmode for it instead.  */\n       if (MEM_P (to_rtx))\n \t{\n-\t  if (volatilep && flag_strict_volatile_bitfields > 0)\n+\t  if (mode1 != VOIDmode)\n \t    to_rtx = adjust_address (to_rtx, mode1, 0);\n \t  else if (GET_MODE (to_rtx) == VOIDmode)\n \t    to_rtx = adjust_address (to_rtx, BLKmode, 0);\n@@ -9970,13 +9970,13 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t\t VOIDmode,\n \t\t\t modifier == EXPAND_SUM ? EXPAND_NORMAL : modifier);\n \n-\t/* If the bitfield is volatile, we want to access it in the\n+\t/* If the field has a mode, we want to access it in the\n \t   field's mode, not the computed mode.\n \t   If a MEM has VOIDmode (external with incomplete type),\n \t   use BLKmode for it instead.  */\n \tif (MEM_P (op0))\n \t  {\n-\t    if (volatilep && flag_strict_volatile_bitfields > 0)\n+\t    if (mode1 != VOIDmode)\n \t      op0 = adjust_address (op0, mode1, 0);\n \t    else if (GET_MODE (op0) == VOIDmode)\n \t      op0 = adjust_address (op0, BLKmode, 0);\n@@ -10108,17 +10108,13 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t&& modifier != EXPAND_CONST_ADDRESS\n \t\t&& modifier != EXPAND_INITIALIZER\n \t\t&& modifier != EXPAND_MEMORY)\n-\t    /* If the field is volatile, we always want an aligned\n-\t       access.  Do this in following two situations:\n-\t       1. the access is not already naturally\n-\t       aligned, otherwise \"normal\" (non-bitfield) volatile fields\n-\t       become non-addressable.\n-\t       2. the bitsize is narrower than the access size. Need\n-\t       to extract bitfields from the access.  */\n-\t    || (volatilep && flag_strict_volatile_bitfields > 0\n-\t\t&& (bitpos % GET_MODE_ALIGNMENT (mode) != 0 \n-\t\t    || (mode1 != BLKmode\n-\t\t        && bitsize < GET_MODE_SIZE (mode1) * BITS_PER_UNIT)))\n+\t    /* If the bitfield is volatile and the bitsize\n+\t       is narrower than the access size of the bitfield,\n+\t       we need to extract bitfields from the access.  */\n+\t    || (volatilep && TREE_CODE (exp) == COMPONENT_REF\n+\t\t&& DECL_BIT_FIELD_TYPE (TREE_OPERAND (exp, 1))\n+\t\t&& mode1 != BLKmode\n+\t\t&& bitsize < GET_MODE_SIZE (mode1) * BITS_PER_UNIT)\n \t    /* If the field isn't aligned enough to fetch as a memref,\n \t       fetch it as a bit field.  */\n \t    || (mode1 != BLKmode"}]}