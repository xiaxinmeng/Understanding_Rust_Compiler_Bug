{"sha": "3b3620db92522cb3c4d64e476ec1ce6a540044ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IzNjIwZGI5MjUyMmNiM2M0ZDY0ZTQ3NmVjMWNlNmE1NDAwNDRlZg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-07-14T20:39:10Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-07-14T20:39:10Z"}, "message": "re PR libfortran/32731 (pack/unpack with kind=1 or kind=2 mask)\n\n2007-07-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/32731\n\t* iresolve.c(gfc_resolve_pack):  A scalar mask has\n\tto be kind=4, an array mask with kind<4 is converted\n\tto gfc_default_logical_kind automatically.\n\t(gfc_resolve_unpack):  Convert mask to gfc_default_lotical_kind\n\tif it has a kind<4.\n\n2007-07-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/32731\n\t* gfortran.dg/pack_mask_1.f90:  New test.\n\t* gfortran.dg/unpack_mask_1.f90:  New test.\n\nFrom-SVN: r126644", "tree": {"sha": "882fafe4edcc95b5b0f95aa140ea91d799393487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/882fafe4edcc95b5b0f95aa140ea91d799393487"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b3620db92522cb3c4d64e476ec1ce6a540044ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b3620db92522cb3c4d64e476ec1ce6a540044ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b3620db92522cb3c4d64e476ec1ce6a540044ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b3620db92522cb3c4d64e476ec1ce6a540044ef/comments", "author": null, "committer": null, "parents": [{"sha": "27e3a7bc8d8101c0f85ac2e057a8784cb8d24326", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e3a7bc8d8101c0f85ac2e057a8784cb8d24326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27e3a7bc8d8101c0f85ac2e057a8784cb8d24326"}], "stats": {"total": 90, "additions": 75, "deletions": 15}, "files": [{"sha": "90a9d75904bdc3599495cea8b3db97c6f074d7a1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b3620db92522cb3c4d64e476ec1ce6a540044ef/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b3620db92522cb3c4d64e476ec1ce6a540044ef/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3b3620db92522cb3c4d64e476ec1ce6a540044ef", "patch": "@@ -1,3 +1,12 @@\n+2007-07-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/32731\n+\t* iresolve.c(gfc_resolve_pack):  A scalar mask has\n+\tto be kind=4, an array mask with kind<4 is converted\n+\tto gfc_default_logical_kind automatically.\n+\t(gfc_resolve_unpack):  Convert mask to gfc_default_lotical_kind\n+\tif it has a kind<4.\n+\n 2007-07-14  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/32724"}, {"sha": "66a3c2f52e58f19f66aeeb87db02d8c5d2364ac8", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 39, "deletions": 15, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b3620db92522cb3c4d64e476ec1ce6a540044ef/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b3620db92522cb3c4d64e476ec1ce6a540044ef/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=3b3620db92522cb3c4d64e476ec1ce6a540044ef", "patch": "@@ -1556,29 +1556,42 @@ void\n gfc_resolve_pack (gfc_expr *f, gfc_expr *array, gfc_expr *mask,\n \t\t  gfc_expr *vector ATTRIBUTE_UNUSED)\n {\n+  int newkind;\n+\n   f->ts = array->ts;\n   f->rank = 1;\n \n-  if (mask->rank != 0)\n-    f->value.function.name = (array->ts.type == BT_CHARACTER\n-\t\t\t   ? PREFIX (\"pack_char\") : PREFIX (\"pack\"));\n+  /* The mask can be kind 4 or 8 for the array case.  For the scalar\n+     case, coerce it to kind=4 unconditionally (because this is the only\n+     kind we have a library function for).  */\n+\n+  newkind = 0;\n+  if (mask->rank == 0)\n+    {\n+      if (mask->ts.kind != 4)\n+\tnewkind = 4;\n+    }\n   else\n     {\n-      /* We convert mask to default logical only in the scalar case.\n-\t In the array case we can simply read the array as if it were\n-\t of type default logical.  */\n-      if (mask->ts.kind != gfc_default_logical_kind)\n-\t{\n-\t  gfc_typespec ts;\n+      if (mask->ts.kind < 4)\n+\tnewkind = gfc_default_logical_kind;\n+    }\n \n-\t  ts.type = BT_LOGICAL;\n-\t  ts.kind = gfc_default_logical_kind;\n-\t  gfc_convert_type (mask, &ts, 2);\n-\t}\n+  if (newkind)\n+    {\n+      gfc_typespec ts;\n \n-      f->value.function.name = (array->ts.type == BT_CHARACTER\n-\t\t\t     ? PREFIX (\"pack_s_char\") : PREFIX (\"pack_s\"));\n+      ts.type = BT_LOGICAL;\n+      ts.kind = gfc_default_logical_kind;\n+      gfc_convert_type (mask, &ts, 2);\n     }\n+\n+  if (mask->rank != 0)\n+    f->value.function.name = (array->ts.type == BT_CHARACTER\n+\t\t\t      ? PREFIX (\"pack_char\") : PREFIX (\"pack\"));\n+  else\n+    f->value.function.name = (array->ts.type == BT_CHARACTER\n+\t\t\t      ? PREFIX (\"pack_s_char\") : PREFIX (\"pack_s\"));\n }\n \n \n@@ -2339,6 +2352,17 @@ gfc_resolve_unpack (gfc_expr *f, gfc_expr *vector, gfc_expr *mask,\n   f->ts = vector->ts;\n   f->rank = mask->rank;\n \n+  /* Coerce the mask to default logical kind if it has kind < 4.  */\n+\n+  if (mask->ts.kind < 4)\n+    {\n+      gfc_typespec ts;\n+\n+      ts.type = BT_LOGICAL;\n+      ts.kind = gfc_default_logical_kind;\n+      gfc_convert_type (mask, &ts, 2);\n+    }\n+\n   f->value.function.name\n     = gfc_get_string (PREFIX (\"unpack%d%s\"), field->rank > 0 ? 1 : 0,\n \t\t      vector->ts.type == BT_CHARACTER ? \"_char\" : \"\");"}, {"sha": "d016ec010ddc0d15cda1813dce302274bfd7ec15", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b3620db92522cb3c4d64e476ec1ce6a540044ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b3620db92522cb3c4d64e476ec1ce6a540044ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b3620db92522cb3c4d64e476ec1ce6a540044ef", "patch": "@@ -1,3 +1,9 @@\n+2007-07-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/32731\n+\t* gfortran.dg/pack_mask_1.f90:  New test.\n+\t* gfortran.dg/unpack_mask_1.f90:  New test.\n+\n 2007-07-14  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/20001013-1.c: Move to gcc.target/sparc."}, {"sha": "e81d4e76ee21d4126b8a4ea163fea1b6274bd19c", "filename": "gcc/testsuite/gfortran.dg/pack_mask_1.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b3620db92522cb3c4d64e476ec1ce6a540044ef/gcc%2Ftestsuite%2Fgfortran.dg%2Fpack_mask_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b3620db92522cb3c4d64e476ec1ce6a540044ef/gcc%2Ftestsuite%2Fgfortran.dg%2Fpack_mask_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpack_mask_1.f90?ref=3b3620db92522cb3c4d64e476ec1ce6a540044ef", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do run }\n+! PR 32721 - missing conversion for kind=1 and kind=2 masks for pack\n+program main\n+  real, dimension(2,2) :: a\n+  real, dimension(4) :: b\n+  call random_number(a)\n+  b = pack(a,logical(a>0,kind=1))\n+  b = pack(a,logical(a>0,kind=2))\n+end program main"}, {"sha": "628473fcf94abf0bfecf5c847bb8a087119a3876", "filename": "gcc/testsuite/gfortran.dg/unpack_mask_1.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b3620db92522cb3c4d64e476ec1ce6a540044ef/gcc%2Ftestsuite%2Fgfortran.dg%2Funpack_mask_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b3620db92522cb3c4d64e476ec1ce6a540044ef/gcc%2Ftestsuite%2Fgfortran.dg%2Funpack_mask_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funpack_mask_1.f90?ref=3b3620db92522cb3c4d64e476ec1ce6a540044ef", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do run }\n+! PR 32731 - upack lacked conversion for kind=1 and kind=2 mask\n+program main\n+  implicit none\n+  character(len=80) line\n+  logical(kind=1),dimension(2,2) :: mask1\n+  logical(kind=1),dimension(2,2) :: mask2\n+  mask1 = .true.\n+  mask2 = .true.\n+  write(unit=line,fmt='(4I4)') unpack((/1,2,3,4/),mask1,0)\n+  write(unit=line,fmt='(4I4)') unpack((/1,2,3,4/),mask2,0)\n+end program main"}]}