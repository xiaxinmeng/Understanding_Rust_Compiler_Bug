{"sha": "e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgzYTRhMmU0MDQwZDUyYjljMGVmMDUyYjhmNDliNWFmYmVkNjBhYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-08-02T19:41:32Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-08-02T19:41:32Z"}, "message": "re PR c++/15339 ([DR217] Adding default arguments to function templates in redeclarations should be forbidden)\n\n/cp\n2014-08-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/15339\n\t* decl.c (check_redeclaration_no_default_args): New.\n\t(duplicate_decls): Use it, handle default arguments\n\tin redeclarations of function templates.\n\n/testsuite\n2014-08-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/15339\n\t* g++.dg/other/default9.C: New.\n\t* g++.dg/other/default10.C: Likewise.\n\t* g++.dg/other/default3.C: Remove xfail.\n\nFrom-SVN: r213519", "tree": {"sha": "6de5ef6aa4224298ce3181785830dadf37745af8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6de5ef6aa4224298ce3181785830dadf37745af8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac/comments", "author": null, "committer": null, "parents": [{"sha": "91bc34a94d157c64f82477e8cd44d55494e7b1b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91bc34a94d157c64f82477e8cd44d55494e7b1b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91bc34a94d157c64f82477e8cd44d55494e7b1b7"}], "stats": {"total": 102, "additions": 80, "deletions": 22}, "files": [{"sha": "9fdd4c7906b2bf1e0a36f7a645ba6ac62123da0a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac", "patch": "@@ -1,3 +1,10 @@\n+2014-08-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/15339\n+\t* decl.c (check_redeclaration_no_default_args): New.\n+\t(duplicate_decls): Use it, handle default arguments\n+\tin redeclarations of function templates.\n+\n 2014-08-02  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* optimize.c, semantics.c: Use hash_map instead of pointer_map."}, {"sha": "d4dde6129aab6ab10db84959763a1bd94911f088", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 42, "deletions": 20, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac", "patch": "@@ -1236,6 +1236,27 @@ validate_constexpr_redeclaration (tree old_decl, tree new_decl)\n   return true;\n }\n \n+/* DECL is a redeclaration of a function or function template.  If\n+   it does have default arguments issue a diagnostic.  Note: this\n+   function is used to enforce the requirements in C++11 8.3.6 about\n+   no default arguments in redeclarations.  */\n+\n+static void\n+check_redeclaration_no_default_args (tree decl)\n+{\n+  gcc_assert (DECL_DECLARES_FUNCTION_P (decl));\n+\n+  for (tree t = FUNCTION_FIRST_USER_PARMTYPE (decl);\n+       t && t != void_list_node; t = TREE_CHAIN (t))\n+    if (TREE_PURPOSE (t))\n+      {\n+\tpermerror (input_location,\n+\t\t   \"redeclaration of %q#D may not have default \"\n+\t\t   \"arguments\", decl);\n+\treturn;\n+      }\n+}\n+\n #define GNU_INLINE_P(fn) (DECL_DECLARED_INLINE_P (fn)\t\t\t\\\n \t\t\t  && lookup_attribute (\"gnu_inline\",\t\t\\\n \t\t\t\t\t       DECL_ATTRIBUTES (fn)))\n@@ -1706,28 +1727,23 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t;\n       else if (TREE_CODE (olddecl) == FUNCTION_DECL)\n \t{\n-\t  tree t1 = FUNCTION_FIRST_USER_PARMTYPE (olddecl);\n-\t  tree t2 = FUNCTION_FIRST_USER_PARMTYPE (newdecl);\n-\t  int i = 1;\n-\n-\t  if (DECL_FUNCTION_MEMBER_P (newdecl)\n-\t      && CLASSTYPE_TEMPLATE_INFO (CP_DECL_CONTEXT (newdecl)))\n-\t    {\n-\t      /* C++11 8.3.6/6.\n-\t\t Default arguments for a member function of a class template\n-\t\t shall be specified on the initial declaration of the member\n-\t\t function within the class template.  */\n-\t      for (; t2 && t2 != void_list_node; t2 = TREE_CHAIN (t2))\n-\t\tif (TREE_PURPOSE (t2))\n-\t\t  {\n-\t\t    permerror (input_location,\n-\t\t\t       \"redeclaration of %q#D may not have default \"\n-\t\t\t       \"arguments\", newdecl);\n-\t\t    break;\n-\t\t  }\n-\t    }\n+\t  /* Note: free functions, as TEMPLATE_DECLs, are handled below.  */\n+\t  if (DECL_FUNCTION_MEMBER_P (olddecl)\n+\t      && (/* grokfndecl passes member function templates too\n+\t\t     as FUNCTION_DECLs.  */\n+\t\t  DECL_TEMPLATE_INFO (olddecl)\n+\t\t  /* C++11 8.3.6/6.\n+\t\t     Default arguments for a member function of a class\n+\t\t     template shall be specified on the initial declaration\n+\t\t     of the member function within the class template.  */\n+\t\t  || CLASSTYPE_TEMPLATE_INFO (CP_DECL_CONTEXT (olddecl))))\n+\t    check_redeclaration_no_default_args (newdecl);\n \t  else\n \t    {\n+\t      tree t1 = FUNCTION_FIRST_USER_PARMTYPE (olddecl);\n+\t      tree t2 = FUNCTION_FIRST_USER_PARMTYPE (newdecl);\n+\t      int i = 1;\n+\n \t      for (; t1 && t1 != void_list_node;\n \t\t   t1 = TREE_CHAIN (t1), t2 = TREE_CHAIN (t2), i++)\n \t\tif (TREE_PURPOSE (t1) && TREE_PURPOSE (t2))\n@@ -1864,6 +1880,12 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \n       if (DECL_FUNCTION_TEMPLATE_P (newdecl))\n \t{\n+\t  /* Per C++11 8.3.6/4, default arguments cannot be added in later\n+\t     declarations of a function template.  */\n+\t  check_redeclaration_no_default_args (newdecl);\n+\n+\t  check_default_args (newdecl);\n+\n \t  if (GNU_INLINE_P (old_result) != GNU_INLINE_P (new_result)\n \t      && DECL_INITIAL (new_result))\n \t    {"}, {"sha": "68c4cf67759f7830434cdc6e09dd10a0c19285aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac", "patch": "@@ -1,4 +1,11 @@\n-2014-08-01  Jan Hubicka  <hubicka@ucw.cz>\n+2014-08-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/15339\n+\t* g++.dg/other/default9.C: New.\n+\t* g++.dg/other/default10.C: Likewise.\n+\t* g++.dg/other/default3.C: Remove xfail.\n+\n+2014-08-02  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* g++.dg/warn/Wsuggest-final.C: New testcase.\n \t* g++.dg/ipa/devirt-34.C: Fix."}, {"sha": "1c9731e2fa78a35e68786f333a53a88d3df8e6af", "filename": "gcc/testsuite/g++.dg/other/default10.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault10.C?ref=e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/15339\n+\n+template<typename> void g3(int, int);\n+template<typename> void g3(int = 0, int) { }  // { dg-error \"may not have default arguments|default argument missing\" }"}, {"sha": "025d2c1b461b28ded8f00eb623c01a064e2157a8", "filename": "gcc/testsuite/g++.dg/other/default3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault3.C?ref=e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac", "patch": "@@ -25,7 +25,7 @@ template<typename> void g3(int, int);\n template<typename> void g3(int = 0, int);    // { dg-error \"default\" }\n \n template<typename> void g4(int, int);\n-template<typename> void g4(int = 0, int) {}  // { dg-error \"default\" \"\" { xfail *-*-* } }\n+template<typename> void g4(int = 0, int) {}  // { dg-error \"default\" }\n \n template<typename> void g5();\n template<typename> void g5(int = 0, int);    // { dg-error \"default\" }"}, {"sha": "62f0a7915273229d07b516f45827a332c0f4d61c", "filename": "gcc/testsuite/g++.dg/other/default9.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault9.C?ref=e83a4a2e4040d52b9c0ef052b8f49b5afbed60ac", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/15339\n+\n+template<typename> void fun(int); \n+template<typename> void fun(int = 0);  // { dg-error \"default arguments\" }\n+\n+class A\n+{\n+  template<typename> void fun(int);\n+};\n+\n+template<typename> void A::fun(int = 0) { } // { dg-error \"default arguments\" }\n+\n+class B\n+{\n+  void fun(int);\n+};\n+\n+void B::fun(int = 0) { }"}]}