{"sha": "8f937c1892a07fca6aae0b8259062590bd61101c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY5MzdjMTg5MmEwN2ZjYTZhYWUwYjgyNTkwNjI1OTBiZDYxMTAxYw==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2012-10-06T00:33:52Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2012-10-06T00:33:52Z"}, "message": "re PR rtl-optimization/54739 (FAIL: gcc.dg/lower-subreg-1.c scan-rtl-dump subreg1 \"Splitting reg\")\n\n\tPR rtl-optimization/54739\n\t* config/pa/pa.md: Remove DImode and, not and, ior and xor patterns\n\tfor 32-bit targets.  Adjust expanders.\n\nFrom-SVN: r192152", "tree": {"sha": "61caafb187cf21a3a14318b12ea2ebb5714ba75d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61caafb187cf21a3a14318b12ea2ebb5714ba75d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f937c1892a07fca6aae0b8259062590bd61101c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f937c1892a07fca6aae0b8259062590bd61101c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f937c1892a07fca6aae0b8259062590bd61101c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f937c1892a07fca6aae0b8259062590bd61101c/comments", "author": null, "committer": null, "parents": [{"sha": "0f2426b17536d15098664ecc11944c0433141098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2426b17536d15098664ecc11944c0433141098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f2426b17536d15098664ecc11944c0433141098"}], "stats": {"total": 64, "additions": 10, "deletions": 54}, "files": [{"sha": "6178f335b689743b04dfd479e914db157db68907", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f937c1892a07fca6aae0b8259062590bd61101c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f937c1892a07fca6aae0b8259062590bd61101c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f937c1892a07fca6aae0b8259062590bd61101c", "patch": "@@ -1,5 +1,9 @@\n 2012-10-05  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n+\tPR rtl-optimization/54739\n+\t* config/pa/pa.md: Remove DImode and, not and, ior and xor patterns\n+\tfor 32-bit targets.  Adjust expanders.\n+\n \t* config/pa/pa.md: Adjust unamed HImode add insn pattern.\n \n 2012-10-05  Oleg Endo  <olegendo@gcc.gnu.org>"}, {"sha": "80c40f5047ab644a347e47b8aae1320e633745ca", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 6, "deletions": 54, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f937c1892a07fca6aae0b8259062590bd61101c/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f937c1892a07fca6aae0b8259062590bd61101c/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=8f937c1892a07fca6aae0b8259062590bd61101c", "patch": "@@ -5623,22 +5623,8 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(and:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t(match_operand:DI 2 \"and_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  /* Both operands must be register operands.  */\n-  if (!TARGET_64BIT && !register_operand (operands[2], DImode))\n-    FAIL;\n-}\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(and:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n-\t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n-  \"!TARGET_64BIT\"\n-  \"and %1,%2,%0\\;and %R1,%R2,%R0\"\n-  [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"8\")])\n+  \"TARGET_64BIT\"\n+  \"\")\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n@@ -5660,15 +5646,6 @@\n   [(set_attr \"type\" \"binary,shift\")\n    (set_attr \"length\" \"4,4\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(and:DI (not:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n-\t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n-  \"!TARGET_64BIT\"\n-  \"andcm %2,%1,%0\\;andcm %R2,%R1,%R0\"\n-  [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"8\")])\n-\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (not:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n@@ -5691,22 +5668,8 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(ior:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t(match_operand:DI 2 \"reg_or_cint_ior_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  /* Both operands must be register operands.  */\n-  if (!TARGET_64BIT && !register_operand (operands[2], DImode))\n-    FAIL;\n-}\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ior:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n-\t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n-  \"!TARGET_64BIT\"\n-  \"or %1,%2,%0\\;or %R1,%R2,%R0\"\n-  [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"8\")])\n+  \"TARGET_64BIT\"\n+  \"\")\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n@@ -5756,19 +5719,8 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(xor:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t(match_operand:DI 2 \"register_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-}\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(xor:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n-\t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n-  \"!TARGET_64BIT\"\n-  \"xor %1,%2,%0\\;xor %R1,%R2,%R0\"\n-  [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"8\")])\n+  \"TARGET_64BIT\"\n+  \"\")\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")"}]}