{"sha": "88f206a40d6c60b6fb9131db5b29eb55c61fd3e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhmMjA2YTQwZDZjNjBiNmZiOTEzMWRiNWIyOWViNTVjNjFmZDNlMw==", "commit": {"author": {"name": "Thomas Koenig", "email": "Thomas.Koenig@online.de", "date": "2007-02-26T21:16:00Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-02-26T21:16:00Z"}, "message": "re PR fortran/30865 ([4.1, 4.2 only] optional argument passed on to size(...,dim=))\n\n2007-02-26  Thomas Koenig  <Thomas.Koenig@online.de>\n\t    Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30865\n\t* trans-intrinsic.c (gfc_conv_intrinsic_size):\n\tIf dim is an optional argument, check for its\n\tpresence and call size0 or size1, respectively.\n\n2007-02-26  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR fortran/30865\n\t* size_optional_dim_1.f90:  New test.\n\n\nCo-Authored-By: Paul Thomas <pault@gcc.gnu.org>\n\nFrom-SVN: r122342", "tree": {"sha": "03d0139d7f31503405d060bfbd208d45a8eff298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03d0139d7f31503405d060bfbd208d45a8eff298"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88f206a40d6c60b6fb9131db5b29eb55c61fd3e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f206a40d6c60b6fb9131db5b29eb55c61fd3e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f206a40d6c60b6fb9131db5b29eb55c61fd3e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f206a40d6c60b6fb9131db5b29eb55c61fd3e3/comments", "author": null, "committer": null, "parents": [{"sha": "57a4c089e23551d96817d080a2fce4f9e6408343", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a4c089e23551d96817d080a2fce4f9e6408343", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a4c089e23551d96817d080a2fce4f9e6408343"}], "stats": {"total": 75, "additions": 67, "deletions": 8}, "files": [{"sha": "4de2fb86e395f50488ad02bfea69d713a0f59bfb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f206a40d6c60b6fb9131db5b29eb55c61fd3e3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f206a40d6c60b6fb9131db5b29eb55c61fd3e3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=88f206a40d6c60b6fb9131db5b29eb55c61fd3e3", "patch": "@@ -1,3 +1,11 @@\n+2007-02-26  Thomas Koenig  <Thomas.Koenig@online.de>\n+\t    Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30865\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_size):\n+\tIf dim is an optional argument, check for its\n+\tpresence and call size0 or size1, respectively.\n+\n 2007-02-23  Paul Thomas <pault@gcc.gnu.org>\n \n \tPR fortran/30660"}, {"sha": "267d7a91208e8be4d86a65b166d068a361e12064", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f206a40d6c60b6fb9131db5b29eb55c61fd3e3/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f206a40d6c60b6fb9131db5b29eb55c61fd3e3/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=88f206a40d6c60b6fb9131db5b29eb55c61fd3e3", "patch": "@@ -2681,9 +2681,10 @@ static void\n gfc_conv_intrinsic_size (gfc_se * se, gfc_expr * expr)\n {\n   gfc_actual_arglist *actual;\n-  tree args;\n+  tree arg1;\n   tree type;\n-  tree fndecl;\n+  tree fncall0;\n+  tree fncall1;\n   gfc_se argse;\n   gfc_ss *ss;\n \n@@ -2697,21 +2698,45 @@ gfc_conv_intrinsic_size (gfc_se * se, gfc_expr * expr)\n   gfc_conv_expr_descriptor (&argse, actual->expr, ss);\n   gfc_add_block_to_block (&se->pre, &argse.pre);\n   gfc_add_block_to_block (&se->post, &argse.post);\n-  args = gfc_chainon_list (NULL_TREE, argse.expr);\n+  arg1 = gfc_evaluate_now (argse.expr, &se->pre);\n+\n+  /* Build the call to size0.  */\n+  fncall0 = build_call_expr (gfor_fndecl_size0, 1, arg1);\n \n   actual = actual->next;\n+\n   if (actual->expr)\n     {\n       gfc_init_se (&argse, NULL);\n-      gfc_conv_expr_type (&argse, actual->expr, gfc_array_index_type);\n+      gfc_conv_expr_type (&argse, actual->expr,\n+\t\t\t  gfc_array_index_type);\n       gfc_add_block_to_block (&se->pre, &argse.pre);\n-      args = gfc_chainon_list (args, argse.expr);\n-      fndecl = gfor_fndecl_size1;\n+\n+      /* Build the call to size1.  */\n+      fncall1 = build_call_expr (gfor_fndecl_size1, 2,\n+\t\t\t\t arg1, argse.expr);\n+\n+      /* Unusually, for an intrinsic, size does not exclude\n+\t an optional arg2, so we must test for it.  */  \n+      if (actual->expr->expr_type == EXPR_VARIABLE\n+\t    && actual->expr->symtree->n.sym->attr.dummy\n+\t    && actual->expr->symtree->n.sym->attr.optional)\n+\t{\n+\t  tree tmp;\n+\t  tmp = gfc_build_addr_expr (pvoid_type_node,\n+\t\t\t\t     argse.expr);\n+\t  tmp = build2 (NE_EXPR, boolean_type_node, tmp, \n+\t\t\tbuild_int_cst (pvoid_type_node, 0));\n+\t  tmp = gfc_evaluate_now (tmp, &se->pre);\n+\t  se->expr = build3 (COND_EXPR, pvoid_type_node,\n+\t\t\t     tmp, fncall1, fncall0);\n+\t}\n+      else\n+\tse->expr = fncall1;\n     }\n   else\n-    fndecl = gfor_fndecl_size0;\n+    se->expr = fncall0;\n \n-  se->expr = build_function_call_expr (fndecl, args);\n   type = gfc_typenode_for_spec (&expr->ts);\n   se->expr = convert (type, se->expr);\n }"}, {"sha": "dc182f88fc84f5d7d097d9bd158d2111060a20c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f206a40d6c60b6fb9131db5b29eb55c61fd3e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f206a40d6c60b6fb9131db5b29eb55c61fd3e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88f206a40d6c60b6fb9131db5b29eb55c61fd3e3", "patch": "@@ -1,3 +1,8 @@\n+2007-02-26  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR fortran/30865\n+\t* size_optional_dim_1.f90:  New test.\n+\n 2007-02-25  Mark Mitchell  <mark@codesourcery.com>\n \n \t* gcc.dg/vxworks/vxworks.exp: New file."}, {"sha": "de5a739f56bae88c3b0c706c902c6dc5f3f97acf", "filename": "gcc/testsuite/gfortran.dg/size_optional_dim_1.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f206a40d6c60b6fb9131db5b29eb55c61fd3e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fsize_optional_dim_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f206a40d6c60b6fb9131db5b29eb55c61fd3e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fsize_optional_dim_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsize_optional_dim_1.f90?ref=88f206a40d6c60b6fb9131db5b29eb55c61fd3e3", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do run }\n+! PR 30865 - passing a subroutine optional argument to size(dim=...)\n+! used to segfault.\n+program main\n+  implicit none\n+  integer :: a(2,3)\n+  integer :: ires\n+\n+  call checkv (ires, a)\n+  if (ires /= 6) call abort\n+  call checkv (ires, a, 1)\n+  if (ires /= 2) call abort\n+contains\n+  subroutine checkv(ires,a1,opt1)\n+    integer, intent(out) :: ires\n+    integer :: a1(:,:)\n+    integer, optional :: opt1\n+\n+    ires = size (a1, dim=opt1)\n+  end subroutine checkv\n+end program main"}]}