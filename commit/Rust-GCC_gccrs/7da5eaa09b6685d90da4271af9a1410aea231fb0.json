{"sha": "7da5eaa09b6685d90da4271af9a1410aea231fb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RhNWVhYTA5YjY2ODVkOTBkYTQyNzFhZjlhMTQxMGFlYTIzMWZiMA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-11-04T14:18:43Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-11-04T14:18:43Z"}, "message": "Handle recursive restrict in function parameter\n\n2015-11-04  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/67742\n\t* tree-ssa-structalias.c (struct fieldoff): Add restrict_pointed_type\n\tfield.\n\t(push_fields_onto_fieldstack): Handle restrict_pointed_type field.\n\t(create_variable_info_for_1): Add and handle handle_param parameter.\n\tAdd restrict handling.\n\t(create_variable_info_for): Call create_variable_info_for_1 with extra\n\targ.\n\t(make_param_constraints): Drop restrict_name parameter.  Ignore\n\tvi->only_restrict_pointers.\n\t(intra_create_variable_infos): Call create_variable_info_for_1 with\n\textra arg.  Remove restrict handling.  Call make_param_constraints with\n\tone less arg.\n\n\t* gcc.dg/tree-ssa/restrict-7.c: New test.\n\t* gcc.dg/tree-ssa/restrict-8.c: New test.\n\nFrom-SVN: r229755", "tree": {"sha": "f051827ec3e48c8f18fd51a45e5498be1c22330f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f051827ec3e48c8f18fd51a45e5498be1c22330f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7da5eaa09b6685d90da4271af9a1410aea231fb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da5eaa09b6685d90da4271af9a1410aea231fb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7da5eaa09b6685d90da4271af9a1410aea231fb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da5eaa09b6685d90da4271af9a1410aea231fb0/comments", "author": null, "committer": null, "parents": [{"sha": "7b0a0ee25fb5b2007aa4d93d0f9557de2f512bd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b0a0ee25fb5b2007aa4d93d0f9557de2f512bd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b0a0ee25fb5b2007aa4d93d0f9557de2f512bd8"}], "stats": {"total": 129, "additions": 96, "deletions": 33}, "files": [{"sha": "9304d780e2974aa3576750d62f9881cfec87af99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da5eaa09b6685d90da4271af9a1410aea231fb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da5eaa09b6685d90da4271af9a1410aea231fb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7da5eaa09b6685d90da4271af9a1410aea231fb0", "patch": "@@ -1,3 +1,19 @@\n+2015-11-04  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/67742\n+\t* tree-ssa-structalias.c (struct fieldoff): Add restrict_pointed_type\n+\tfield.\n+\t(push_fields_onto_fieldstack): Handle restrict_pointed_type field.\n+\t(create_variable_info_for_1): Add and handle handle_param parameter.\n+\tAdd restrict handling.\n+\t(create_variable_info_for): Call create_variable_info_for_1 with extra\n+\targ.\n+\t(make_param_constraints): Drop restrict_name parameter.  Ignore\n+\tvi->only_restrict_pointers.\n+\t(intra_create_variable_infos): Call create_variable_info_for_1 with\n+\textra arg.  Remove restrict handling.  Call make_param_constraints with\n+\tone less arg.\n+\n 2015-11-04  Tom de Vries  <tom@codesourcery.com>\n \n \t* tree-ssa-structalias.c (create_variable_info_for_1): Use decl_type"}, {"sha": "d99f0fc28441838532bc2b03de9864c307e01fd5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da5eaa09b6685d90da4271af9a1410aea231fb0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da5eaa09b6685d90da4271af9a1410aea231fb0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7da5eaa09b6685d90da4271af9a1410aea231fb0", "patch": "@@ -1,3 +1,9 @@\n+2015-11-04  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/67742\n+\t* gcc.dg/tree-ssa/restrict-7.c: New test.\n+\t* gcc.dg/tree-ssa/restrict-8.c: New test.\n+\n 2015-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/slice9.adb: New test."}, {"sha": "f7a68c7b03cfb514092d354cfb900de1577c9a7b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/restrict-7.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da5eaa09b6685d90da4271af9a1410aea231fb0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da5eaa09b6685d90da4271af9a1410aea231fb0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-7.c?ref=7da5eaa09b6685d90da4271af9a1410aea231fb0", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-fre1\" } */\n+\n+int\n+f (int *__restrict__ *__restrict__ *__restrict__ a, int *b)\n+{\n+  *b = 1;\n+  ***a  = 2;\n+  return *b;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 1\" 1 \"fre1\" } } */"}, {"sha": "b0ab164ca2a68b574df8e0c089101a53353d0539", "filename": "gcc/testsuite/gcc.dg/tree-ssa/restrict-8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da5eaa09b6685d90da4271af9a1410aea231fb0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da5eaa09b6685d90da4271af9a1410aea231fb0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-8.c?ref=7da5eaa09b6685d90da4271af9a1410aea231fb0", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-fre1\" } */\n+\n+struct s\n+{\n+  int *__restrict__ *__restrict__ pp;\n+};\n+\n+int\n+f (struct s s, int *b)\n+{\n+  *b = 1;\n+  **s.pp = 2;\n+  return *b;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 1\" 1 \"fre1\" } } */"}, {"sha": "52a35f6ab510de9b256f1e6d667d10ee2c10fa0d", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 45, "deletions": 33, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da5eaa09b6685d90da4271af9a1410aea231fb0/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da5eaa09b6685d90da4271af9a1410aea231fb0/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=7da5eaa09b6685d90da4271af9a1410aea231fb0", "patch": "@@ -307,6 +307,7 @@ static varinfo_t first_or_preceding_vi_for_offset (varinfo_t,\n \t\t\t\t\t\t   unsigned HOST_WIDE_INT);\n static varinfo_t lookup_vi_for_tree (tree);\n static inline bool type_can_have_subvars (const_tree);\n+static void make_param_constraints (varinfo_t);\n \n /* Pool of variable info structures.  */\n static object_allocator<variable_info> variable_info_pool\n@@ -393,7 +394,6 @@ new_var_info (tree t, const char *name, bool add_id)\n   return ret;\n }\n \n-\n /* A map mapping call statements to per-stmt variables for uses\n    and clobbers specific to the call.  */\n static hash_map<gimple *, varinfo_t> *call_stmt_vars;\n@@ -5195,6 +5195,8 @@ struct fieldoff\n   unsigned may_have_pointers : 1;\n \n   unsigned only_restrict_pointers : 1;\n+\n+  tree restrict_pointed_type;\n };\n typedef struct fieldoff fieldoff_s;\n \n@@ -5340,7 +5342,8 @@ push_fields_onto_fieldstack (tree type, vec<fieldoff_s> *fieldstack,\n \t    if (!pair\n \t\t&& offset + foff != 0)\n \t      {\n-\t\tfieldoff_s e = {0, offset + foff, false, false, false, false};\n+\t\tfieldoff_s e\n+\t\t  = {0, offset + foff, false, false, false, false, NULL_TREE};\n \t\tpair = fieldstack->safe_push (e);\n \t      }\n \n@@ -5374,6 +5377,8 @@ push_fields_onto_fieldstack (tree type, vec<fieldoff_s> *fieldstack,\n \t\t  = (!has_unknown_size\n \t\t     && POINTER_TYPE_P (field_type)\n \t\t     && TYPE_RESTRICT (field_type));\n+\t\tif (e.only_restrict_pointers)\n+\t\t  e.restrict_pointed_type = TREE_TYPE (field_type);\n \t\tfieldstack->safe_push (e);\n \t      }\n \t  }\n@@ -5642,10 +5647,11 @@ check_for_overlaps (vec<fieldoff_s> fieldstack)\n \n /* Create a varinfo structure for NAME and DECL, and add it to VARMAP.\n    This will also create any varinfo structures necessary for fields\n-   of DECL.  */\n+   of DECL.  DECL is a function parameter if HANDLE_PARAM is set.  */\n \n static varinfo_t\n-create_variable_info_for_1 (tree decl, const char *name, bool add_id)\n+create_variable_info_for_1 (tree decl, const char *name, bool add_id,\n+\t\t\t    bool handle_param)\n {\n   varinfo_t vi, newvi;\n   tree decl_type = TREE_TYPE (decl);\n@@ -5721,6 +5727,20 @@ create_variable_info_for_1 (tree decl, const char *name, bool add_id)\n       if (POINTER_TYPE_P (decl_type)\n \t  && TYPE_RESTRICT (decl_type))\n \tvi->only_restrict_pointers = 1;\n+      if (vi->only_restrict_pointers\n+\t  && !type_contains_placeholder_p (TREE_TYPE (decl_type))\n+\t  && handle_param)\n+\t{\n+\t  varinfo_t rvi;\n+\t  tree heapvar = build_fake_var_decl (TREE_TYPE (decl_type));\n+\t  DECL_EXTERNAL (heapvar) = 1;\n+\t  rvi = create_variable_info_for_1 (heapvar, \"PARM_NOALIAS\", true,\n+\t\t\t\t\t    true);\n+\t  rvi->is_restrict_var = 1;\n+\t  insert_vi_for_tree (heapvar, rvi);\n+\t  make_constraint_from (vi, rvi->id);\n+\t  make_param_constraints (rvi);\n+\t}\n       fieldstack.release ();\n       return vi;\n     }\n@@ -5758,6 +5778,20 @@ create_variable_info_for_1 (tree decl, const char *name, bool add_id)\n       newvi->fullsize = vi->fullsize;\n       newvi->may_have_pointers = fo->may_have_pointers;\n       newvi->only_restrict_pointers = fo->only_restrict_pointers;\n+      if (handle_param\n+\t  && newvi->only_restrict_pointers\n+\t  && !type_contains_placeholder_p (fo->restrict_pointed_type))\n+\t{\n+\t  varinfo_t rvi;\n+\t  tree heapvar = build_fake_var_decl (fo->restrict_pointed_type);\n+\t  DECL_EXTERNAL (heapvar) = 1;\n+\t  rvi = create_variable_info_for_1 (heapvar, \"PARM_NOALIAS\", true,\n+\t\t\t\t\t    true);\n+\t  rvi->is_restrict_var = 1;\n+\t  insert_vi_for_tree (heapvar, rvi);\n+\t  make_constraint_from (newvi, rvi->id);\n+\t  make_param_constraints (rvi);\n+\t}\n       if (i + 1 < fieldstack.length ())\n \t{\n \t  varinfo_t tem = new_var_info (decl, name, false);\n@@ -5772,7 +5806,7 @@ create_variable_info_for_1 (tree decl, const char *name, bool add_id)\n static unsigned int\n create_variable_info_for (tree decl, const char *name, bool add_id)\n {\n-  varinfo_t vi = create_variable_info_for_1 (decl, name, add_id);\n+  varinfo_t vi = create_variable_info_for_1 (decl, name, add_id, false);\n   unsigned int id = vi->id;\n \n   insert_vi_for_tree (decl, vi);\n@@ -5879,16 +5913,15 @@ debug_solution_for_var (unsigned int var)\n   dump_solution_for_var (stderr, var);\n }\n \n-/* Register the constraints for function parameter related VI.  Use RESTRICT_NAME\n-   as the base name of created restrict vars.  */\n+/* Register the constraints for function parameter related VI.  */\n \n static void\n-make_param_constraints (varinfo_t vi, const char *restrict_name)\n+make_param_constraints (varinfo_t vi)\n {\n   for (; vi; vi = vi_next (vi))\n     {\n       if (vi->only_restrict_pointers)\n-\tmake_constraint_from_global_restrict (vi, restrict_name, true);\n+\t;\n       else if (vi->may_have_pointers)\n \tmake_constraint_from (vi, nonlocal_id);\n \n@@ -5910,32 +5943,11 @@ intra_create_variable_infos (struct function *fn)\n      passed-by-reference argument.  */\n   for (t = DECL_ARGUMENTS (fn->decl); t; t = DECL_CHAIN (t))\n     {\n-      bool restrict_pointer_p = (POINTER_TYPE_P (TREE_TYPE (t))\n-\t\t\t\t && TYPE_RESTRICT (TREE_TYPE (t)));\n-      bool recursive_restrict_p\n-\t= (restrict_pointer_p\n-\t   && !type_contains_placeholder_p (TREE_TYPE (TREE_TYPE (t))));\n-      varinfo_t p = create_variable_info_for_1 (t, alias_get_name (t), false);\n+      varinfo_t p\n+\t= create_variable_info_for_1 (t, alias_get_name (t), false, true);\n       insert_vi_for_tree (t, p);\n \n-      /* For restrict qualified pointers build a representative for\n-\t the pointed-to object.  Note that this ends up handling\n-\t out-of-bound references conservatively by aggregating them\n-\t in the first/last subfield of the object.  */\n-      if (recursive_restrict_p)\n-\t{\n-\t  varinfo_t vi;\n-\t  tree heapvar = build_fake_var_decl (TREE_TYPE (TREE_TYPE (t)));\n-\t  DECL_EXTERNAL (heapvar) = 1;\n-\t  vi = create_variable_info_for_1 (heapvar, \"PARM_NOALIAS\", true);\n-\t  vi->is_restrict_var = 1;\n-\t  insert_vi_for_tree (heapvar, vi);\n-\t  make_constraint_from (p, vi->id);\n-\t  make_param_constraints (vi, \"GLOBAL_RESTRICT\");\n-\t  continue;\n-\t}\n-\n-      make_param_constraints (p, \"PARM_RESTRICT\");\n+      make_param_constraints (p);\n     }\n \n   /* Add a constraint for a result decl that is passed by reference.  */"}]}