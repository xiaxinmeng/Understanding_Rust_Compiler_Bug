{"sha": "d41395a53cbb0f5f0f2a2c430ce0ba3ad2aabdd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQxMzk1YTUzY2JiMGY1ZjBmMmEyYzQzMGNlMGJhM2FkMmFhYmRkNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-10-14T10:27:50Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-10-14T10:27:50Z"}, "message": "alpha.md (call-1): Supply missing mode for operator.\n\n        * alpha.md (call-1): Supply missing mode for operator.\n        (*): Add missing output reload constraints.  Remove constraints\n        from define_splits.\n\nFrom-SVN: r29971", "tree": {"sha": "73269a8594666870082a270d4e8f95d0ad729dc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73269a8594666870082a270d4e8f95d0ad729dc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d41395a53cbb0f5f0f2a2c430ce0ba3ad2aabdd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d41395a53cbb0f5f0f2a2c430ce0ba3ad2aabdd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d41395a53cbb0f5f0f2a2c430ce0ba3ad2aabdd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d41395a53cbb0f5f0f2a2c430ce0ba3ad2aabdd4/comments", "author": null, "committer": null, "parents": [{"sha": "b7fd6635f6df825d588b765bba2342d20e968ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7fd6635f6df825d588b765bba2342d20e968ba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7fd6635f6df825d588b765bba2342d20e968ba0"}], "stats": {"total": 62, "additions": 34, "deletions": 28}, "files": [{"sha": "3acfc06d8ecbeb93e890dcaaedef8e1974afcfe6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41395a53cbb0f5f0f2a2c430ce0ba3ad2aabdd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41395a53cbb0f5f0f2a2c430ce0ba3ad2aabdd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d41395a53cbb0f5f0f2a2c430ce0ba3ad2aabdd4", "patch": "@@ -1,3 +1,9 @@\n+Thu Oct 14 03:23:08 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.md (call-1): Supply missing mode for operator.\n+\t(*): Add missing output reload constraints.  Remove constraints\n+\tfrom define_splits.\n+\n Thu Oct 14 03:59:57 1999  Stephane Carrez  <stcarrez@worldnet.fr>\n \n \t* stor-layout.c (layout_union): Use HOST_WIDE_INT for const_size;"}, {"sha": "505a58339904d1be6d2fe84eb30b9da3af372b34", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41395a53cbb0f5f0f2a2c430ce0ba3ad2aabdd4/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41395a53cbb0f5f0f2a2c430ce0ba3ad2aabdd4/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=d41395a53cbb0f5f0f2a2c430ce0ba3ad2aabdd4", "patch": "@@ -3492,7 +3492,7 @@\n ;; with a ZAP.\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(match_operator 1 \"comparison_operator\"\n+\t(match_operator:DI 1 \"comparison_operator\"\n \t\t\t[(match_operand:DI 2 \"register_operand\" \"\")\n \t\t\t (match_operand:DI 3 \"const_int_operand\" \"\")]))\n    (clobber (match_operand:DI 4 \"register_operand\" \"\"))]\n@@ -4892,39 +4892,39 @@\n ;; expansion, so we must delay our address manipulations until after.\n \n (define_insn \"reload_inqi_help\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"r\")\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n         (match_operand:QI 1 \"memory_operand\" \"m\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"r\"))]\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=r\"))]\n   \"! TARGET_BWX && (reload_in_progress || reload_completed)\"\n   \"#\")\n \n (define_insn \"reload_inhi_help\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"r\")\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n         (match_operand:HI 1 \"memory_operand\" \"m\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"r\"))]\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=r\"))]\n   \"! TARGET_BWX && (reload_in_progress || reload_completed)\"\n   \"#\")\n \n (define_insn \"reload_outqi_help\"\n-  [(set (match_operand:QI 0 \"memory_operand\" \"m\")\n+  [(set (match_operand:QI 0 \"memory_operand\" \"=m\")\n         (match_operand:QI 1 \"register_operand\" \"r\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"r\"))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"r\"))]\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=r\"))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"=r\"))]\n   \"! TARGET_BWX && (reload_in_progress || reload_completed)\"\n   \"#\")\n \n (define_insn \"reload_outhi_help\"\n-  [(set (match_operand:HI 0 \"memory_operand\" \"m\")\n+  [(set (match_operand:HI 0 \"memory_operand\" \"=m\")\n         (match_operand:HI 1 \"register_operand\" \"r\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"r\"))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"r\"))]\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=r\"))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"=r\"))]\n   \"! TARGET_BWX && (reload_in_progress || reload_completed)\"\n   \"#\")\n \n (define_split\n-  [(set (match_operand:QI 0 \"register_operand\" \"r\")\n-        (match_operand:QI 1 \"memory_operand\" \"m\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"r\"))]\n+  [(set (match_operand:QI 0 \"register_operand\" \"\")\n+        (match_operand:QI 1 \"memory_operand\" \"\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"\"))]\n   \"! TARGET_BWX && reload_completed\"\n   [(const_int 0)]\n   \"\n@@ -4937,9 +4937,9 @@\n }\")\n   \n (define_split\n-  [(set (match_operand:HI 0 \"register_operand\" \"r\")\n-        (match_operand:HI 1 \"memory_operand\" \"m\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"r\"))]\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+        (match_operand:HI 1 \"memory_operand\" \"\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"\"))]\n   \"! TARGET_BWX && reload_completed\"\n   [(const_int 0)]\n   \"\n@@ -4952,10 +4952,10 @@\n }\")\n   \n (define_split\n-  [(set (match_operand:QI 0 \"memory_operand\" \"m\")\n-        (match_operand:QI 1 \"register_operand\" \"r\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"r\"))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"r\"))]\n+  [(set (match_operand:QI 0 \"memory_operand\" \"\")\n+        (match_operand:QI 1 \"register_operand\" \"\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"\"))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n   \"! TARGET_BWX && reload_completed\"\n   [(const_int 0)]\n   \"\n@@ -4968,10 +4968,10 @@\n }\")\n \n (define_split\n-  [(set (match_operand:HI 0 \"memory_operand\" \"m\")\n-        (match_operand:HI 1 \"register_operand\" \"r\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"r\"))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"r\"))]\n+  [(set (match_operand:HI 0 \"memory_operand\" \"\")\n+        (match_operand:HI 1 \"register_operand\" \"\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"\"))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n   \"! TARGET_BWX && reload_completed\"\n   [(const_int 0)]\n   \"\n@@ -5218,9 +5218,9 @@\n   \"alpha_expand_prologue (); DONE;\")\n \n (define_insn \"init_fp\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (match_operand:DI 1 \"register_operand\" \"r\"))\n-   (clobber (mem:BLK (match_operand:DI 2 \"register_operand\" \"r\")))]\n+   (clobber (mem:BLK (match_operand:DI 2 \"register_operand\" \"=r\")))]\n   \"\"\n   \"mov %1,%0\")\n \n@@ -5249,7 +5249,7 @@\n ;; the frame size into a register.  We use this pattern to ensure\n ;; we get lda instead of addq.\n (define_insn \"nt_lda\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(match_dup 0)\n \t\t    (match_operand:DI 1 \"const_int_operand\" \"n\")] 6))]\n   \"\""}]}