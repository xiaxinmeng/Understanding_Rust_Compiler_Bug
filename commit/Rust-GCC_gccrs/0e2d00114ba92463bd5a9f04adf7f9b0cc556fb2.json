{"sha": "0e2d00114ba92463bd5a9f04adf7f9b0cc556fb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUyZDAwMTE0YmE5MjQ2M2JkNWE5ZjA0YWRmN2Y5YjBjYzU1NmZiMg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-11-16T19:32:12Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-11-16T19:32:12Z"}, "message": "Delete common/config/powerpcspe\n\nI missed this part in r266961.  Various people have been editing it\nsince; I finally noticed.\n\n\n\t* common/config/powerpcspe: Delete.\n\nFrom-SVN: r278361", "tree": {"sha": "0bc7bd8fa04e78d5c7733ba92f26c0736ee498c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bc7bd8fa04e78d5c7733ba92f26c0736ee498c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e2d00114ba92463bd5a9f04adf7f9b0cc556fb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e2d00114ba92463bd5a9f04adf7f9b0cc556fb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e2d00114ba92463bd5a9f04adf7f9b0cc556fb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e2d00114ba92463bd5a9f04adf7f9b0cc556fb2/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "513e0aa0c4e60757e7e99e479a940812f6107dd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/513e0aa0c4e60757e7e99e479a940812f6107dd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/513e0aa0c4e60757e7e99e479a940812f6107dd9"}], "stats": {"total": 325, "additions": 4, "deletions": 321}, "files": [{"sha": "38d85d986677a9b2c6dc89d0991897bcb68f40ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2d00114ba92463bd5a9f04adf7f9b0cc556fb2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2d00114ba92463bd5a9f04adf7f9b0cc556fb2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e2d00114ba92463bd5a9f04adf7f9b0cc556fb2", "patch": "@@ -1,3 +1,7 @@\n+2019-11-16  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* common/config/powerpcspe: Delete.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-sve.md (aarch64_wrffr): Wrap the FFRT"}, {"sha": "2ec5d9a0d88a9146ae166e98ffa628e358507078", "filename": "gcc/common/config/powerpcspe/powerpcspe-common.c", "status": "removed", "additions": 0, "deletions": 321, "changes": 321, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513e0aa0c4e60757e7e99e479a940812f6107dd9/gcc%2Fcommon%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513e0aa0c4e60757e7e99e479a940812f6107dd9/gcc%2Fcommon%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-common.c?ref=513e0aa0c4e60757e7e99e479a940812f6107dd9", "patch": "@@ -1,321 +0,0 @@\n-/* Common hooks for IBM RS/6000.\n-   Copyright (C) 1991-2019 Free Software Foundation, Inc.\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published\n-   by the Free Software Foundation; either version 3, or (at your\n-   option) any later version.\n-\n-   GCC is distributed in the hope that it will be useful, but WITHOUT\n-   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n-   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n-   License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"diagnostic-core.h\"\n-#include \"tm.h\"\n-#include \"common/common-target.h\"\n-#include \"common/common-target-def.h\"\n-#include \"opts.h\"\n-#include \"flags.h\"\n-\n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options rs6000_option_optimization_table[] =\n-  {\n-    /* Enable -fsched-pressure for first pass instruction scheduling.  */\n-    { OPT_LEVELS_1_PLUS, OPT_fsched_pressure, NULL, 1 },\n-    /* Double growth factor to counter reduced min jump length.  */\n-    { OPT_LEVELS_ALL, OPT__param_max_grow_copy_bb_insns_, NULL, 16 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n-/* Implement TARGET_OPTION_INIT_STRUCT.  */\n-\n-static void\n-rs6000_option_init_struct (struct gcc_options *opts)\n-{\n-  if (DEFAULT_ABI == ABI_DARWIN)\n-    /* The Darwin libraries never set errno, so we might as well\n-       avoid calling them when that's the only reason we would.  */\n-    opts->x_flag_errno_math = 0;\n-\n-  /* Enable section anchors by default.  */\n-  if (!TARGET_MACHO)\n-    opts->x_flag_section_anchors = 1;\n-}\n-\n-/* If not otherwise specified by a target, make 'long double' equivalent to\n-   'double'.  */\n-\n-#ifndef RS6000_DEFAULT_LONG_DOUBLE_SIZE\n-#define RS6000_DEFAULT_LONG_DOUBLE_SIZE 64\n-#endif\n-\n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n-\t\t      const struct cl_decoded_option *decoded,\n-\t\t      location_t loc)\n-{\n-  enum fpu_type_t fpu_type = FPU_NONE;\n-  char *p, *q;\n-  size_t code = decoded->opt_index;\n-  const char *arg = decoded->arg;\n-  int value = decoded->value;\n-\n-  switch (code)\n-    {\n-    case OPT_mfull_toc:\n-      opts->x_rs6000_isa_flags &= ~OPTION_MASK_MINIMAL_TOC;\n-      opts->x_TARGET_NO_FP_IN_TOC = 0;\n-      opts->x_TARGET_NO_SUM_IN_TOC = 0;\n-      opts_set->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n-#ifdef TARGET_USES_SYSV4_OPT\n-      /* Note, V.4 no longer uses a normal TOC, so make -mfull-toc, be\n-\t just the same as -mminimal-toc.  */\n-      opts->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n-      opts_set->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n-#endif\n-      break;\n-\n-#ifdef TARGET_USES_SYSV4_OPT\n-    case OPT_mtoc:\n-      /* Make -mtoc behave like -mminimal-toc.  */\n-      opts->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n-      opts_set->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n-      break;\n-#endif\n-\n-#ifdef TARGET_USES_AIX64_OPT\n-    case OPT_maix64:\n-#else\n-    case OPT_m64:\n-#endif\n-      opts->x_rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n-      opts->x_rs6000_isa_flags |= (~opts_set->x_rs6000_isa_flags\n-\t\t\t\t   & OPTION_MASK_PPC_GFXOPT);\n-      opts_set->x_rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n-      break;\n-\n-#ifdef TARGET_USES_AIX64_OPT\n-    case OPT_maix32:\n-#else\n-    case OPT_m32:\n-#endif\n-      opts->x_rs6000_isa_flags &= ~OPTION_MASK_POWERPC64;\n-      opts_set->x_rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n-      break;\n-\n-    case OPT_mminimal_toc:\n-      if (value == 1)\n-\t{\n-\t  opts->x_TARGET_NO_FP_IN_TOC = 0;\n-\t  opts->x_TARGET_NO_SUM_IN_TOC = 0;\n-\t}\n-      break;\n-\n-    case OPT_mpowerpc_gpopt:\n-    case OPT_mpowerpc_gfxopt:\n-      break;\n-\n-    case OPT_mdebug_:\n-      p = ASTRDUP (arg);\n-      opts->x_rs6000_debug = 0;\n-\n-      while ((q = strtok (p, \",\")) != NULL)\n-\t{\n-\t  unsigned mask = 0;\n-\t  bool invert;\n-\n-\t  p = NULL;\n-\t  if (*q == '!')\n-\t    {\n-\t      invert = true;\n-\t      q++;\n-\t    }\n-\t  else\n-\t    invert = false;\n-\n-\t  if (! strcmp (q, \"all\"))\n-\t    mask = MASK_DEBUG_ALL;\n-\t  else if (! strcmp (q, \"stack\"))\n-\t    mask = MASK_DEBUG_STACK;\n-\t  else if (! strcmp (q, \"arg\"))\n-\t    mask = MASK_DEBUG_ARG;\n-\t  else if (! strcmp (q, \"reg\"))\n-\t    mask = MASK_DEBUG_REG;\n-\t  else if (! strcmp (q, \"addr\"))\n-\t    mask = MASK_DEBUG_ADDR;\n-\t  else if (! strcmp (q, \"cost\"))\n-\t    mask = MASK_DEBUG_COST;\n-\t  else if (! strcmp (q, \"target\"))\n-\t    mask = MASK_DEBUG_TARGET;\n-\t  else if (! strcmp (q, \"builtin\"))\n-\t    mask = MASK_DEBUG_BUILTIN;\n-\t  else\n-\t    error_at (loc, \"unknown %<-mdebug-%s%> switch\", q);\n-\n-\t  if (invert)\n-\t    opts->x_rs6000_debug &= ~mask;\n-\t  else\t\n-\t    opts->x_rs6000_debug |= mask;\n-\t}\n-      break;\n-\n-#ifdef TARGET_USES_SYSV4_OPT\n-    case OPT_mrelocatable:\n-      if (value == 1)\n-\t{\n-\t  opts->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n-\t  opts_set->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n-\t  opts->x_TARGET_NO_FP_IN_TOC = 1;\n-\t}\n-      break;\n-\n-    case OPT_mrelocatable_lib:\n-      if (value == 1)\n-\t{\n-\t  opts->x_rs6000_isa_flags |= (OPTION_MASK_RELOCATABLE\n-\t\t\t\t       | OPTION_MASK_MINIMAL_TOC);\n-\t  opts_set->x_rs6000_isa_flags |= (OPTION_MASK_RELOCATABLE\n-\t\t\t\t\t   | OPTION_MASK_MINIMAL_TOC);\n-\t  opts->x_TARGET_NO_FP_IN_TOC = 1;\n-\t}\n-      else\n-\t{\n-\t  opts->x_rs6000_isa_flags &= ~OPTION_MASK_RELOCATABLE;\n-\t  opts_set->x_rs6000_isa_flags |= OPTION_MASK_RELOCATABLE;\n-\t}\n-      break;\n-#endif\n-\n-    case OPT_mabi_altivec:\n-      /* Enabling the AltiVec ABI turns off the SPE ABI.  */\n-      opts->x_rs6000_spe_abi = 0;\n-      break;\n-\n-    case OPT_mabi_spe:\n-      opts->x_rs6000_altivec_abi = 0;\n-      break;\n-\n-    case OPT_mlong_double_:\n-      if (value != 64 && value != 128)\n-\t{\n-\t  error_at (loc, \"unknown switch %<-mlong-double-%s%>\", arg);\n-\t  opts->x_rs6000_long_double_type_size\n-\t    = RS6000_DEFAULT_LONG_DOUBLE_SIZE;\n-\t  return false;\n-\t}\n-      break;\n-\n-    case OPT_msingle_float:\n-      if (!TARGET_SINGLE_FPU) \n-\twarning_at (loc, 0,\n-\t\t    \"%<-msingle-float%> option equivalent to %<-mhard-float%>\");\n-      /* -msingle-float implies -mno-double-float and TARGET_HARD_FLOAT. */\n-      opts->x_rs6000_double_float = 0;\n-      opts->x_rs6000_isa_flags &= ~OPTION_MASK_SOFT_FLOAT;\n-      opts_set->x_rs6000_isa_flags |= OPTION_MASK_SOFT_FLOAT;\n-      break;\n-\n-    case OPT_mdouble_float:\n-      /* -mdouble-float implies -msingle-float and TARGET_HARD_FLOAT. */\n-      opts->x_rs6000_single_float = 1;\n-      opts->x_rs6000_isa_flags &= ~OPTION_MASK_SOFT_FLOAT;\n-      opts_set->x_rs6000_isa_flags |= OPTION_MASK_SOFT_FLOAT;\n-      break;\n-\n-    case OPT_msimple_fpu:\n-      if (!TARGET_SINGLE_FPU) \n-\twarning_at (loc, 0, \"%<-msimple-fpu%> option ignored\");\n-      break;\n-\n-    case OPT_mhard_float:\n-      /* -mhard_float implies -msingle-float and -mdouble-float. */\n-      opts->x_rs6000_single_float = opts->x_rs6000_double_float = 1;\n-      break;\n-\n-    case OPT_msoft_float:\n-      /* -msoft_float implies -mnosingle-float and -mnodouble-float. */\n-      opts->x_rs6000_single_float = opts->x_rs6000_double_float = 0;\n-      break;\n-\n-    case OPT_mfpu_:\n-      fpu_type = (enum fpu_type_t) value;\n-      if (fpu_type != FPU_NONE)\n-\t{\n-\t  /* If -mfpu is not none, then turn off SOFT_FLOAT, turn on\n-\t     HARD_FLOAT. */\n-\t  opts->x_rs6000_isa_flags &= ~OPTION_MASK_SOFT_FLOAT;\n-\t  opts_set->x_rs6000_isa_flags |= OPTION_MASK_SOFT_FLOAT;\n-\t  opts->x_rs6000_xilinx_fpu = 1;\n-\t  if (fpu_type == FPU_SF_LITE || fpu_type == FPU_SF_FULL) \n-\t    opts->x_rs6000_single_float = 1;\n-\t  if (fpu_type == FPU_DF_LITE || fpu_type == FPU_DF_FULL) \n-\t    opts->x_rs6000_single_float = opts->x_rs6000_double_float = 1;\n-\t  if (fpu_type == FPU_SF_LITE || fpu_type == FPU_DF_LITE) \n-\t    opts->x_rs6000_simple_fpu = 1;\n-\t}\n-      else\n-\t{\n-\t  /* -mfpu=none is equivalent to -msoft-float.  */\n-\t  opts->x_rs6000_isa_flags |= OPTION_MASK_SOFT_FLOAT;\n-\t  opts_set->x_rs6000_isa_flags |= OPTION_MASK_SOFT_FLOAT;\n-\t  opts->x_rs6000_single_float = opts->x_rs6000_double_float = 0;\n-\t}\n-      break;\n-\n-    case OPT_mrecip:\n-      opts->x_rs6000_recip_name = (value) ? \"default\" : \"none\";\n-      break;\n-    }\n-  return true;\n-}\n-\n-/* -fsplit-stack uses a field in the TCB, available with glibc-2.19.\n-   We also allow 2.18 because alignment padding guarantees that the\n-   space is available there too.  */\n-\n-static bool\n-rs6000_supports_split_stack (bool report,\n-\t\t\t     struct gcc_options *opts ATTRIBUTE_UNUSED)\n-{\n-#ifndef TARGET_GLIBC_MAJOR\n-#define TARGET_GLIBC_MAJOR 0\n-#endif\n-#ifndef TARGET_GLIBC_MINOR\n-#define TARGET_GLIBC_MINOR 0\n-#endif\n-  /* Note: Can't test DEFAULT_ABI here, it isn't set until later.  */\n-  if (TARGET_GLIBC_MAJOR * 1000 + TARGET_GLIBC_MINOR >= 2018\n-      && TARGET_64BIT\n-      && TARGET_ELF)\n-    return true;\n-\n-  if (report)\n-    error (\"%<-fsplit-stack%> currently only supported on PowerPC64 GNU/Linux with glibc-2.18 or later\");\n-  return false;\n-}\n-\n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION rs6000_handle_option\n-\n-#undef TARGET_OPTION_INIT_STRUCT\n-#define TARGET_OPTION_INIT_STRUCT rs6000_option_init_struct\n-\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE rs6000_option_optimization_table\n-\n-#undef TARGET_SUPPORTS_SPLIT_STACK\n-#define TARGET_SUPPORTS_SPLIT_STACK rs6000_supports_split_stack\n-\n-struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}]}