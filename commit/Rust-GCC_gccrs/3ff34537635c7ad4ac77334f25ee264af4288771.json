{"sha": "3ff34537635c7ad4ac77334f25ee264af4288771", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZmMzQ1Mzc2MzVjN2FkNGFjNzczMzRmMjVlZTI2NGFmNDI4ODc3MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-28T22:48:30Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-28T22:48:30Z"}, "message": "Properly use $(srcdir) for files that have it in their reference as a target of a rule.\n\nProperly use $(srcdir) for files that have it in their reference as a target\nof a rule.\n(libgcc1.a): Add missing RANLIB_TEST use.\n\nFrom-SVN: r9829", "tree": {"sha": "5778a29c17a3f2ceffff207f1dab4ca892fba907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5778a29c17a3f2ceffff207f1dab4ca892fba907"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ff34537635c7ad4ac77334f25ee264af4288771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff34537635c7ad4ac77334f25ee264af4288771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ff34537635c7ad4ac77334f25ee264af4288771", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff34537635c7ad4ac77334f25ee264af4288771/comments", "author": null, "committer": null, "parents": [{"sha": "ffa1a1ce4f8bfa4113e8c437820ed470df9d0efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffa1a1ce4f8bfa4113e8c437820ed470df9d0efd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffa1a1ce4f8bfa4113e8c437820ed470df9d0efd"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "aeed0d4908bba4966bb537829a6eb1246094c329", "filename": "gcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff34537635c7ad4ac77334f25ee264af4288771/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff34537635c7ad4ac77334f25ee264af4288771/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3ff34537635c7ad4ac77334f25ee264af4288771", "patch": "@@ -786,7 +786,7 @@ libgcc1.a: libgcc1.c $(CONFIG_H) $(LIB1FUNCS_EXTRA) config.status\n \t  else true; \\\n \t  fi; \\\n \tdone\n-\t$(RANLIB) tmplibgcc1.a\n+\t-if $(RANLIB_TEST) ; then $(RANLIB) tmplibgcc1.a; else true; fi\n \tmv tmplibgcc1.a libgcc1.a\n \n # Build libgcc1.a from assembler source.  LIB1ASMFUNCS is the list of\n@@ -1021,13 +1021,13 @@ c-parse.o : $(srcdir)/c-parse.c $(CONFIG_H) $(TREE_H) c-lex.h \\\n $(srcdir)/c-parse.h: $(srcdir)/c-parse.c\n $(srcdir)/c-parse.c: $(srcdir)/c-parse.y\n \tcd $(srcdir); $(BISON) $(BISONFLAGS) -d c-parse.y -o c-parse.c\n-$(srcdir)/c-parse.y: $(srcdir)/c-parse.in\n+$(srcdir)/c-parse.y: c-parse.in\n \tsed -e \"/^ifobjc$$/,/^end ifobjc$$/d\" \\\n \t  -e \"/^ifc$$/d\" -e \"/^end ifc$$/d\" \\\n \t  $(srcdir)/c-parse.in >tmp-c-parse.y\n \t$(srcdir)/move-if-change tmp-c-parse.y $(srcdir)/c-parse.y\n \n-$(srcdir)/c-gperf.h: $(srcdir)/c-parse.gperf\n+$(srcdir)/c-gperf.h: c-parse.gperf\n \tgperf -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$$ \\\n \t   $(srcdir)/c-parse.gperf >tmp-gperf.h\n \t $(srcdir)/move-if-change tmp-gperf.h $(srcdir)/c-gperf.h\n@@ -1516,10 +1516,10 @@ $(srcdir)/bi-parser.h: $(srcdir)/bi-parser.c\n $(srcdir)/bi-parser.c: $(srcdir)/bi-parser.y\n \tcd $(srcdir); $(BISON) $(BISONFLAGS) -d bi-parser.y -o bi-parser.c\n \n-bi-parser.o: bi-parser.c bi-defs.h $(build_xm_file)\n+bi-parser.o: $(srcdir)/bi-parser.c bi-defs.h $(build_xm_file)\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) \\\n \t   $(srcdir)/bi-parser.c\n-bi-lexer.o: bi-lexer.c bi-parser.h $(build_xm_file)\n+bi-lexer.o: bi-lexer.c $(srcdir)/bi-parser.h $(build_xm_file)\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) \\\n \t   $(srcdir)/bi-lexer.c\n bi-arity.o: bi-arity.c bi-defs.h $(build_xm_file)\n@@ -1573,7 +1573,7 @@ cpp: $(CCCP)\n cccp: cccp.o cexp.o version.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ cccp.o cexp.o \\\n \t  version.o $(LIBS)\n-cexp.o: cexp.c $(CONFIG_H)\n+cexp.o: $(srcdir)/cexp.c $(CONFIG_H)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/cexp.c\n $(srcdir)/cexp.c: $(srcdir)/cexp.y\n \tcd $(srcdir); $(BISON) -o cexp.c cexp.y\n@@ -2237,8 +2237,9 @@ gcc.xtar: distdir\n \n # This target exists to do the initial work before the language specific\n # stuff gets done.\n-distdir-start: doc $(srcdir)/INSTALL c-parse.y $(srcdir)/c-gperf.h objc-parse.y \\\n-  c-parse.c objc-parse.c cexp.c\n+distdir-start: doc $(srcdir)/INSTALL $(srcdir)/c-parse.y $(srcdir)/c-gperf.h \\\n+  $(srcdir)/objc-parse.y $(srcdir)/c-parse.c $(srcdir)/objc-parse.c \\\n+  $(srcdir)/cexp.c\n \t@if grep -s \"for version ${mainversion}\" gcc.texi > /dev/null; \\\n \tthen true; \\\n \telse echo \"You must update the version number in \\`gcc.texi'\"; sleep 10;\\"}]}