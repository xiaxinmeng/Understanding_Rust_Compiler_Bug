{"sha": "cba9c0267ac33cc1e5b14c71d2fc75ca9609cf91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JhOWMwMjY3YWMzM2NjMWU1YjE0YzcxZDJmYzc1Y2E5NjA5Y2Y5MQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2020-06-24T19:05:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-15T09:39:13Z"}, "message": "[Ada] Ada2020: AI12-0003 Specifying the standard storage pool\n\ngcc/ada/\n\n\t* sem_prag.adb (Analyze_Pragma): Adding semantic support of\n\tStandard to Default_Storage_Pool.\n\t* freeze.adb (Freeze_Entity): If pragma Default_Storage_Pool\n\tapplies and it is set to Standard then use the global pool as\n\tthe associated storage pool of the access type.", "tree": {"sha": "d84224d70eced82ab7b88f0f911846a3505c4a59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d84224d70eced82ab7b88f0f911846a3505c4a59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cba9c0267ac33cc1e5b14c71d2fc75ca9609cf91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba9c0267ac33cc1e5b14c71d2fc75ca9609cf91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cba9c0267ac33cc1e5b14c71d2fc75ca9609cf91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba9c0267ac33cc1e5b14c71d2fc75ca9609cf91/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "952604032ac5a2804d0f36de7e329902f0340a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/952604032ac5a2804d0f36de7e329902f0340a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/952604032ac5a2804d0f36de7e329902f0340a8e"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "b3aa13156df97fb6c25e62e4cace6c2ca37702fc", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba9c0267ac33cc1e5b14c71d2fc75ca9609cf91/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba9c0267ac33cc1e5b14c71d2fc75ca9609cf91/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=cba9c0267ac33cc1e5b14c71d2fc75ca9609cf91", "patch": "@@ -6387,7 +6387,7 @@ package body Freeze is\n             end if;\n \n          --  The pool applies to named and anonymous access types, but not\n-         --  to subprogram and to  internal types generated for 'Access\n+         --  to subprogram and to internal types generated for 'Access\n          --  references.\n \n          elsif Is_Access_Type (E)\n@@ -6412,6 +6412,11 @@ package body Freeze is\n                if Nkind (Default_Pool) = N_Null then\n                   Set_No_Pool_Assigned (E);\n \n+               --  Case of pragma Default_Storage_Pool (Standard)\n+\n+               elsif Entity (Default_Pool) = Standard_Standard then\n+                  Set_Associated_Storage_Pool (E, RTE (RE_Global_Pool_Object));\n+\n                --  Case of pragma Default_Storage_Pool (storage_pool_NAME)\n \n                else"}, {"sha": "b3fa7344dacfaf2af8529e91a77316833cb68989", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba9c0267ac33cc1e5b14c71d2fc75ca9609cf91/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba9c0267ac33cc1e5b14c71d2fc75ca9609cf91/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=cba9c0267ac33cc1e5b14c71d2fc75ca9609cf91", "patch": "@@ -15314,7 +15314,7 @@ package body Sem_Prag is\n          -- Default_Storage_Pool --\n          --------------------------\n \n-         --  pragma Default_Storage_Pool (storage_pool_NAME | null);\n+         --  pragma Default_Storage_Pool (storage_pool_NAME | null | Standard);\n \n          when Pragma_Default_Storage_Pool => Default_Storage_Pool : declare\n             Pool : Node_Id;\n@@ -15355,14 +15355,26 @@ package body Sem_Prag is\n \n                   Set_Etype (Pool, Empty);\n \n+               --  Case of Default_Storage_Pool (Standard);\n+\n+               elsif Nkind (Pool) = N_Identifier\n+                 and then Chars (Pool) = Name_Standard\n+               then\n+                  Analyze (Pool);\n+\n+                  if Entity (Pool) /= Standard_Standard then\n+                     Error_Pragma_Arg\n+                       (\"package Standard is not directly visible\", Arg1);\n+                  end if;\n+\n                --  Case of Default_Storage_Pool (storage_pool_NAME);\n \n                else\n                   --  If it's a configuration pragma, then the only allowed\n                   --  argument is \"null\".\n \n                   if Is_Configuration_Pragma then\n-                     Error_Pragma_Arg (\"NULL expected\", Arg1);\n+                     Error_Pragma_Arg (\"NULL or Standard expected\", Arg1);\n                   end if;\n \n                   --  The expected type for a non-\"null\" argument is"}]}