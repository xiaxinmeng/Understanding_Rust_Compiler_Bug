{"sha": "23fe603b4bf0cae80eab34c2c76a265a9c89db08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNmZTYwM2I0YmYwY2FlODBlYWIzNGMyYzc2YTI2NWE5Yzg5ZGIwOA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T09:22:40Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-17T08:04:29Z"}, "message": "AVX512FP16: Add testcase for vcvtph2pd/vcvtph2psx/vcvtpd2ph/vcvtps2phx.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-helper.h (V512): Add DF contents.\n\t(src3f): New.\n\t* gcc.target/i386/avx512fp16-vcvtpd2ph-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vcvtpd2ph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtph2pd-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtph2pd-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtph2psx-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtph2psx-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtps2ph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtps2ph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtpd2ph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtpd2ph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtph2pd-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtph2pd-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtph2psx-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtph2psx-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtps2ph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtps2ph-1b.c: Ditto.", "tree": {"sha": "994e7b13490643c3365f9423ade53121c29bee03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/994e7b13490643c3365f9423ade53121c29bee03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23fe603b4bf0cae80eab34c2c76a265a9c89db08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23fe603b4bf0cae80eab34c2c76a265a9c89db08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23fe603b4bf0cae80eab34c2c76a265a9c89db08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23fe603b4bf0cae80eab34c2c76a265a9c89db08/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a744e5056b46b3445b2cf6ebb253ac497098fb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a744e5056b46b3445b2cf6ebb253ac497098fb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a744e5056b46b3445b2cf6ebb253ac497098fb9"}], "stats": {"total": 615, "additions": 609, "deletions": 6}, "files": [{"sha": "ce3cfdc3f6bc8dc657de8d7eae61833e006543c2", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-helper.h", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -26,23 +26,27 @@ typedef union\n   __m512          zmm;\n   __m512h         zmmh;\n   __m512i         zmmi;\n+  __m512d         zmmd;\n   __m256          ymm[2];\n   __m256h         ymmh[2];\n   __m256i         ymmi[2];\n+  __m256d         ymmd[2];\n   __m128h         xmmh[4];\n   __m128\t  xmm[4];\n   __m128i\t  xmmi[4];\n+  __m128d\t  xmmd[4];\n   unsigned short  u16[32];\n   unsigned int    u32[16];\n   int\t\t  i32[16];\n   long long\t  s64[8];\n   unsigned long long u64[8];\n+  double          f64[8];\n   float           f32[16];\n   _Float16        f16[32];\n } V512;\n \n /* Global variables.  */\n-V512 src1, src2, src3;\n+V512 src1, src2, src3, src3f;\n int n_errs = 0;\n \n /* Helper function for packing/unpacking ph operands. */\n@@ -167,12 +171,16 @@ init_src()\n     int i;\n \n     for (i = 0; i < AVX512F_MAX_ELEM; i++) {\n-        v1.f32[i] = i + 1;\n-        v2.f32[i] = i * 0.5f;\n-        v3.f32[i] = i * 1.5f;\n-        v4.f32[i] = i - 0.5f;\n+\tv1.f32[i] = i + 1;\n+\tv2.f32[i] = i * 0.5f;\n+\tv3.f32[i] = i * 1.5f;\n+\tv4.f32[i] = i - 0.5f;\n \n-        src3.u32[i] = (i + 1) * 10;\n+\tsrc3.u32[i] = (i + 1) * 10;\n+    }\n+\n+    for (i = 0; i < 8; i++) {\n+\tsrc3f.f64[i] = (i + 1) * 7.5;\n     }\n \n     src1 = pack_twops_2ph(v1, v2);\n@@ -223,6 +231,7 @@ init_dest(V512 * res, V512 * exp)\n #undef HF\n #undef SF\n #undef SI\n+#undef DF\n #undef H_HF\n #undef NET_MASK \n #undef MASK_VALUE\n@@ -235,10 +244,12 @@ init_dest(V512 * res, V512 * exp)\n #define HF(x) x.ymmh[0]\n #define H_HF(x) x.xmmh[0]\n #define SF(x) x.ymm[0]\n+#define DF(x) x.ymmd[0]\n #define SI(x) x.ymmi[0]\n #elif AVX512F_LEN == 128\n #undef HF\n #undef SF\n+#undef DF\n #undef SI\n #undef H_HF\n #undef NET_MASK \n@@ -251,6 +262,7 @@ init_dest(V512 * res, V512 * exp)\n #define ZMASK_VALUE 0xc1\n #define HF(x) x.xmmh[0]\n #define SF(x) x.xmm[0]\n+#define DF(x) x.xmmd[0]\n #define SI(x) x.xmmi[0]\n #define H_HF(x) x.xmmh[0]\n #else\n@@ -260,6 +272,7 @@ init_dest(V512 * res, V512 * exp)\n #define HALF_MASK 0xcccc\n #define HF(x) x.zmmh\n #define SF(x) x.zmm\n+#define DF(x) x.zmmd\n #define SI(x) x.zmmi\n #define H_HF(x) x.ymmh[0]\n #endif"}, {"sha": "8f74405873ff6b0258f2b85a565eff193795d839", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtpd2ph-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtpd2ph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtpd2ph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtpd2ph-1a.c?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2phz\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2phz\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2phz\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2ph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2ph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res, res1, res2;\n+volatile __m512d x1, x2, x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtpd_ph (x1);\n+  res1 = _mm512_mask_cvtpd_ph (res, m8, x2);\n+  res2 = _mm512_maskz_cvtpd_ph (m8, x3);\n+  res = _mm512_cvt_roundpd_ph (x1, 4);\n+  res1 = _mm512_mask_cvt_roundpd_ph (res, m8, x2, 8);\n+  res2 = _mm512_maskz_cvt_roundpd_ph (m8, x3, 11);\n+}"}, {"sha": "dde364b65ca77783e5aab51c9e3cd272a1c816e5", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtpd2ph-1b.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtpd2ph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtpd2ph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtpd2ph-1b.c?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 64)\n+\n+void NOINLINE\n+EMULATE(cvtpd2_ph) (V512 * dest, V512 op1, int n_el,\n+                 __mmask32 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+    __mmask16 m1, m2;\n+\n+    m1 = k & 0xffff;\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    for (i = 0; i < n_el; i++) {\n+        if (((1 << i) & m1) == 0) {\n+            if (zero_mask) {\n+               v5.f32[i] = 0;\n+            }\n+            else {\n+               v5.u32[i] = v7.u32[i];\n+            }\n+        }\n+        else {\n+           v5.f32[i] = op1.f64[i];\n+        }\n+    }\n+    *dest = pack_twops_2ph(v5, v5);\n+    for (i = n_el; i < 8; i++)\n+      dest->u16[i] = 0;\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtpd2_ph)(&exp, src3f, N_ELEMS, NET_MASK, 0);\n+  res.xmmh[0] = INTRINSIC (_cvtpd_ph) (DF(src3f));\n+  CHECK_RESULT (&res, &exp, 8, _cvtpd_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtpd2_ph)(&exp, src3f, N_ELEMS, 0xcc, 0);\n+  res.xmmh[0] = INTRINSIC (_mask_cvtpd_ph) (res.xmmh[0], 0xcc,\n+\t\t\t\t\t   DF(src3f));\n+  CHECK_RESULT (&res, &exp, 8, _mask_cvtpd_ph);\n+\n+  EMULATE(cvtpd2_ph)(&exp, src3f, N_ELEMS, 0xf1, 1);\n+  res.xmmh[0] = INTRINSIC (_maskz_cvtpd_ph) (0xf1, DF(src3f));\n+  CHECK_RESULT (&res, &exp, 8, _maskz_cvtpd_ph);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtpd2_ph)(&exp, src3f, N_ELEMS, NET_MASK, 0);\n+  res.xmmh[0] = INTRINSIC (_cvt_roundpd_ph) (DF(src3f), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, 8, _cvt_roundpd_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtpd2_ph)(&exp, src3f, N_ELEMS, 0xcc, 0);\n+  res.xmmh[0] = INTRINSIC (_mask_cvt_roundpd_ph) (res.xmmh[0], 0xcc,\n+\t\t\t\t\t   DF(src3f), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, 8, _mask_cvt_roundpd_ph);\n+\n+  EMULATE(cvtpd2_ph)(&exp, src3f, N_ELEMS, 0xf1, 1);\n+  res.xmmh[0] = INTRINSIC (_maskz_cvt_roundpd_ph) (0xf1, DF(src3f), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, 8, _maskz_cvt_roundpd_ph);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+\n+"}, {"sha": "b7bb3b7840f4bb1a4c0e4afbda43b2bcdd97aa5b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtph2pd-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2pd-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2pd-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2pd-1a.c?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d res, res1, res2;\n+volatile __m128h x1, x2, x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtph_pd (x1);\n+  res1 = _mm512_mask_cvtph_pd (res, m8, x2);\n+  res2 = _mm512_maskz_cvtph_pd (m8, x3);\n+  res = _mm512_cvt_roundph_pd (x1, 4);\n+  res1 = _mm512_mask_cvt_roundph_pd (res, m8, x2, 8);\n+  res2 = _mm512_maskz_cvt_roundph_pd (m8, x3, 8);\n+}"}, {"sha": "c20888ba53485e6cc8ddbdec00c3b67814c4330c", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtph2pd-1b.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2pd-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2pd-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2pd-1b.c?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(cvtph2_pd) (V512 * dest, V512 op1,\n+                 __mmask32 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8; \n+    int i;\n+    __mmask16 m1, m2;\n+    \n+    m1 = k & 0xffff; \n+    unpack_ph_2twops(op1, &v1, &v2);\n+\n+    for (i = 0; i < 8; i++) {\n+        if (((1 << i) & m1) == 0) {\n+            if (zero_mask) {\n+               v5.u64[i] = 0;\n+            }\n+            else {\n+               v5.u64[i] = dest->u64[i];\n+            }\n+        }\n+        else {\n+           v5.f64[i] = v1.f32[i];\n+        }\n+    }\n+\n+    *dest = v5;\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtph2_pd)(&exp, src1,  NET_MASK, 0);\n+  DF(res) = INTRINSIC (_cvtph_pd) (src1.xmmh[0]);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtph_pd);\n+ \n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_pd)(&exp, src1, 0xcc, 0);\n+  DF(res) = INTRINSIC (_mask_cvtph_pd) (DF(res), 0xcc, src1.xmmh[0]);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtph_pd);\n+ \n+  EMULATE(cvtph2_pd)(&exp, src1,  0xc1, 1);\n+  DF(res) = INTRINSIC (_maskz_cvtph_pd) (0xc1, src1.xmmh[0]);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtph_pd);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtph2_pd)(&exp, src1,  NET_MASK, 0);\n+  DF(res) = INTRINSIC (_cvt_roundph_pd) (src1.xmmh[0], _ROUND_CUR);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvt_roundph_pd);\n+ \n+  init_dest(&res, &exp);\n+  EMULATE(cvtph2_pd)(&exp, src1, 0xcc, 0);\n+  DF(res) = INTRINSIC (_mask_cvt_roundph_pd) (DF(res), 0xcc, src1.xmmh[0], _ROUND_CUR);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvt_roundph_pd);\n+ \n+  EMULATE(cvtph2_pd)(&exp, src1,  0xc1, 1);\n+  DF(res) = INTRINSIC (_maskz_cvt_roundph_pd) (0xc1, src1.xmmh[0], _ROUND_CUR);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvt_roundph_pd);\n+#endif\n+\n+  if (n_errs != 0) {\n+    abort ();\n+}\n+}\n+"}, {"sha": "c79549f67c5807d29d591ea984b426e4006c196c", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtph2psx-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2psx-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2psx-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2psx-1a.c?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 res, res1, res2;\n+volatile __m256h x1, x2, x3;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtxph_ps (x1);\n+  res1 = _mm512_mask_cvtxph_ps (res, m16, x2);\n+  res2 = _mm512_maskz_cvtxph_ps (m16, x3);\n+  res = _mm512_cvtx_roundph_ps (x1, 4);\n+  res1 = _mm512_mask_cvtx_roundph_ps (res, m16, x2, 8);\n+  res2 = _mm512_maskz_cvtx_roundph_ps (m16, x3, 8);\n+}"}, {"sha": "a2f20c099b52383328825f717760b43f75b1deeb", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtph2psx-1b.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2psx-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2psx-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtph2psx-1b.c?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 32)\n+#define CHECK_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(cvtxph2_ps) (V512 * dest, V512 op1, int n_el,\n+\t\t   __mmask32 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+    __mmask16 m1, m2;\n+\n+    m1 = k & 0xffff;\n+    unpack_ph_2twops(op1, &v1, &v2);\n+\n+    for (i = 0; i < n_el; i++) {\n+      if (((1 << i) & m1) == 0) {\n+\tif (zero_mask) {\n+\t  v5.u32[i] = 0;\n+\t}\n+\telse {\n+\t  v5.u32[i] = dest->u32[i];\n+\t}\n+      }\n+      else {\n+\tv5.f32[i] = v1.f32[i];\n+      }\n+    }\n+\n+    for (i = n_el; i < 16; i++)\n+      v5.u32[i] = 0;\n+\n+    *dest = v5;\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtxph2_ps)(&exp, src1, N_ELEMS, 0xffff, 0);\n+  SF(res) = INTRINSIC (_cvtxph_ps) (H_HF(src1));\n+  CHECK_RESULT (&res, &exp, CHECK_ELEMS, _cvtxph_ps);\n+ \n+  init_dest(&res, &exp);\n+  EMULATE(cvtxph2_ps)(&exp, src1, N_ELEMS, 0xcc, 0);\n+  SF(res) = INTRINSIC (_mask_cvtxph_ps) (SF(res), 0xcc, H_HF(src1));\n+  CHECK_RESULT (&res, &exp, CHECK_ELEMS, _mask_cvtxph_ps);\n+ \n+  EMULATE(cvtxph2_ps)(&exp, src1, N_ELEMS, 0xc1, 1);\n+  SF(res) = INTRINSIC (_maskz_cvtxph_ps) (0xc1, H_HF(src1));\n+  CHECK_RESULT (&res, &exp, CHECK_ELEMS, _maskz_cvtxph_ps);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtxph2_ps)(&exp, src1, N_ELEMS, 0xffff, 0);\n+  SF(res) = INTRINSIC (_cvtx_roundph_ps) (H_HF(src1), _ROUND_CUR);\n+  CHECK_RESULT (&res, &exp, CHECK_ELEMS, _cvtx_roundph_ps);\n+ \n+  init_dest(&res, &exp);\n+  EMULATE(cvtxph2_ps)(&exp, src1, N_ELEMS, 0xcc, 0);\n+  SF(res) = INTRINSIC (_mask_cvtx_roundph_ps) (SF(res), 0xcc, H_HF(src1), _ROUND_CUR);\n+  CHECK_RESULT (&res, &exp, CHECK_ELEMS, _mask_cvtx_roundph_ps);\n+ \n+  EMULATE(cvtxph2_ps)(&exp, src1, N_ELEMS, 0xc1, 1);\n+  SF(res) = INTRINSIC (_maskz_cvtx_roundph_ps) (0xc1, H_HF(src1), _ROUND_CUR);\n+  CHECK_RESULT (&res, &exp, CHECK_ELEMS, _maskz_cvtx_roundph_ps);\n+#endif\n+\n+  if (n_errs != 0) \n+    abort ();\n+}\n+"}, {"sha": "cb957f869205dc066a20c647952cefeea46f141b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtps2ph-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtps2ph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtps2ph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtps2ph-1a.c?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtps2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2phx\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2phx\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h res, res1, res2;\n+volatile __m512 x1, x2, x3;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtxps_ph (x1);\n+  res1 = _mm512_mask_cvtxps_ph (res, m16, x2);\n+  res2 = _mm512_maskz_cvtxps_ph (m16, x3);\n+  res = _mm512_cvtx_roundps_ph (x1, 4);\n+  res1 = _mm512_mask_cvtx_roundps_ph (res, m16, x2, 8);\n+  res2 = _mm512_maskz_cvtx_roundps_ph (m16, x3, 11);\n+}"}, {"sha": "e316e766f0a20d729315664e6c4afe10f756e23f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtps2ph-1b.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtps2ph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtps2ph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtps2ph-1b.c?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 32)\n+#define CHECK_ELEMS (AVX512F_LEN_HALF / 16)\n+\n+void NOINLINE\n+EMULATE(cvtxps2_ph) (V512 * dest, V512 op1, int n_el,\n+                 __mmask32 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+    __mmask16 m1, m2;\n+\n+    m1 = k & 0xffff;\n+\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    for (i = 0; i < n_el; i++) {\n+        if (((1 << i) & m1) == 0) {\n+            if (zero_mask) {\n+               v5.f32[i] = 0;\n+            }\n+            else {\n+               v5.u32[i] = v7.u32[i];\n+            }\n+        }\n+        else {\n+           v5.f32[i] = op1.f32[i];\n+        }\n+    }\n+    *dest = pack_twops_2ph(v5, v5);\n+    for (i = n_el; i < 16; i++)\n+      dest->u16[i] = 0;\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtxps2_ph)(&exp, src3f, N_ELEMS, NET_MASK, 0);\n+  H_HF(res) = INTRINSIC (_cvtxps_ph) (SF(src3f));\n+  CHECK_RESULT (&res, &exp, CHECK_ELEMS, _cvtxps_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtxps2_ph)(&exp, src3f, N_ELEMS, 0xcc, 0);\n+  H_HF(res) = INTRINSIC (_mask_cvtxps_ph) (H_HF(res), 0xcc,\n+\t\t\t\t\t   SF(src3f));\n+  CHECK_RESULT (&res, &exp, CHECK_ELEMS, _mask_cvtxps_ph);\n+\n+  EMULATE(cvtxps2_ph)(&exp, src3f, N_ELEMS, 0xf1, 1);\n+  H_HF(res) = INTRINSIC (_maskz_cvtxps_ph) (0xf1, SF(src3f));\n+  CHECK_RESULT (&res, &exp, CHECK_ELEMS, _maskz_cvtxps_ph);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtxps2_ph)(&exp, src3f, N_ELEMS, NET_MASK, 0);\n+  H_HF(res) = INTRINSIC (_cvtx_roundps_ph) (SF(src3f), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, CHECK_ELEMS, _cvtx_roundps_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtxps2_ph)(&exp, src3f, N_ELEMS, 0xcc, 0);\n+  H_HF(res) = INTRINSIC (_mask_cvtx_roundps_ph) (H_HF(res), 0xcc,\n+\t\t\t\t\t   SF(src3f), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, CHECK_ELEMS, _mask_cvtx_roundps_ph);\n+\n+  EMULATE(cvtxps2_ph)(&exp, src3f, N_ELEMS, 0xf1, 1);\n+  H_HF(res) = INTRINSIC (_maskz_cvtx_roundps_ph) (0xf1, SF(src3f), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, CHECK_ELEMS, _maskz_cvtx_roundps_ph);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+\n+"}, {"sha": "57604a913345216219d9bf04660b60ffc775c9ba", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtpd2ph-1a.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtpd2ph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtpd2ph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtpd2ph-1a.c?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2phy\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2phy\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2phx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2phx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2phx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res3;\n+volatile __m256d x2;\n+volatile __m128d x3;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res3 = _mm256_cvtpd_ph (x2);\n+  res3 = _mm256_mask_cvtpd_ph (res3, m16, x2);\n+  res3 = _mm256_maskz_cvtpd_ph (m16, x2);\n+\n+  res3 = _mm_cvtpd_ph (x3);\n+  res3 = _mm_mask_cvtpd_ph (res3, m8, x3);\n+  res3 = _mm_maskz_cvtpd_ph (m8, x3);\n+}"}, {"sha": "ea4b200803bc60f8015bb1eb567ea8d5b4ba90ff", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtpd2ph-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtpd2ph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtpd2ph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtpd2ph-1b.c?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtpd2ph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtpd2ph-1b.c\"\n+"}, {"sha": "80010c02297c6eb669ce0a8e0dc50523249737e6", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtph2pd-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2pd-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2pd-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2pd-1a.c?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256d res1;\n+volatile __m128d res2;\n+volatile __m128h x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_cvtph_pd (x3);\n+  res1 = _mm256_mask_cvtph_pd (res1, m8, x3);\n+  res1 = _mm256_maskz_cvtph_pd (m8, x3);\n+\n+  res2 = _mm_cvtph_pd (x3);\n+  res2 = _mm_mask_cvtph_pd (res2, m8, x3);\n+  res2 = _mm_maskz_cvtph_pd (m8, x3);\n+}"}, {"sha": "a3849056870edf20ae6f4a594fa7b192a3288d1a", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtph2pd-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2pd-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2pd-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2pd-1b.c?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtph2pd-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtph2pd-1b.c\"\n+"}, {"sha": "e8c4c8c70d7cd00a18db212d9984d1925029b45c", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtph2psx-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2psx-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2psx-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2psx-1a.c?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256 res1;\n+volatile __m128 res2;\n+volatile __m128h x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_cvtxph_ps (x3);\n+  res1 = _mm256_mask_cvtxph_ps (res1, m8, x3);\n+  res1 = _mm256_maskz_cvtxph_ps (m8, x3);\n+\n+  res2 = _mm_cvtxph_ps (x3);\n+  res2 = _mm_mask_cvtxph_ps (res2, m8, x3);\n+  res2 = _mm_maskz_cvtxph_ps (m8, x3);\n+}"}, {"sha": "ad91de853709c1cfe017865c3e29a802a4cfdffe", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtph2psx-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2psx-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2psx-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtph2psx-1b.c?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtph2psx-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtph2psx-1b.c\"\n+"}, {"sha": "a89f8c4fe8719ec0ee1245bf838d618fa15ef9ad", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtps2ph-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtps2ph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtps2ph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtps2ph-1a.c?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtps2phxy\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2phxy\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2phxy\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2phxx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2phxx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2phxx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res3;\n+volatile __m256 x2;\n+volatile __m128 x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res3 = _mm256_cvtxps_ph (x2);\n+  res3 = _mm256_mask_cvtxps_ph (res3, m8, x2);\n+  res3 = _mm256_maskz_cvtxps_ph (m8, x2);\n+\n+  res3 = _mm_cvtxps_ph (x3);\n+  res3 = _mm_mask_cvtxps_ph (res3, m8, x3);\n+  res3 = _mm_maskz_cvtxps_ph (m8, x3);\n+}"}, {"sha": "a339d0c933ed98f53470bb6af60bd6ffe1e43c75", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtps2ph-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtps2ph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fe603b4bf0cae80eab34c2c76a265a9c89db08/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtps2ph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtps2ph-1b.c?ref=23fe603b4bf0cae80eab34c2c76a265a9c89db08", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtps2ph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtps2ph-1b.c\"\n+"}]}