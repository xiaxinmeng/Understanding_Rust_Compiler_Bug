{"sha": "9592deabf3c6b9e23aa7a5b84724672cb7c8d560", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU5MmRlYWJmM2M2YjllMjNhYTdhNWI4NDcyNDY3MmNiN2M4ZDU2MA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-25T16:33:05Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-25T16:58:26Z"}, "message": "c++: Rename new -flang-note-module-read option [PR 99166]\n\nI realized that the just-added flang-note-module-read option should\nalso cover module writes, and was therefore misnamed.  This addresses\nthat, replacing it with a -flang-note-module-cmi pair of options.  As\nthis was such a recent addition, I didn't leave the old option\navailable.\n\n\tPR c++/99166\n\tgcc/c-family/\n\t* c.opt (-flang-info-module-cmi): Renamed option.\n\tgcc/\n\t* doc/invoke.texi (flang-info-module-cmi): Renamed option.\n\tgcc/cp/\n\t* module.cc (module_state::inform_cmi_p): Renamed field.\n\t(module_state::do_import): Adjust.\n\t(init_modules, finish_module_processing): Likewise.\n\t(handle_module_option): Likewise.\n\tgcc/testsuite/\n\t* g++.dg/modules/pr99166_a.X: Adjust.\n\t* g++.dg/modules/pr99166_b.C: Adjust.\n\t* g++.dg/modules/pr99166_c.C: Adjust.\n\t* g++.dg/modules/pr99166_d.C: Adjust.", "tree": {"sha": "113d5d6764192a7d1aad3d3824a5afc99ad3b603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/113d5d6764192a7d1aad3d3824a5afc99ad3b603"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9592deabf3c6b9e23aa7a5b84724672cb7c8d560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9592deabf3c6b9e23aa7a5b84724672cb7c8d560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9592deabf3c6b9e23aa7a5b84724672cb7c8d560", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9592deabf3c6b9e23aa7a5b84724672cb7c8d560/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f08c08531b61b68a41c9c5403ec0cc288ae3aba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f08c08531b61b68a41c9c5403ec0cc288ae3aba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f08c08531b61b68a41c9c5403ec0cc288ae3aba"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "64e46e7573ef58fac424bc40c7d5981fdca001c1", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9592deabf3c6b9e23aa7a5b84724672cb7c8d560/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9592deabf3c6b9e23aa7a5b84724672cb7c8d560/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=9592deabf3c6b9e23aa7a5b84724672cb7c8d560", "patch": "@@ -1752,11 +1752,11 @@ flang-info-include-translate=\n C++ Joined RejectNegative MissingArgError(missing header name)\n Note a #include translation of a specific header.\n \n-flang-info-module-read\n-C++ Var(note_module_read_yes)\n+flang-info-module-cmi\n+C++ Var(note_module_cmi_yes)\n Note Compiled Module Interface pathnames.\n \n-flang-info-module-read=\n+flang-info-module-cmi=\n C++ Joined RejectNegative MissingArgError(missing module name)\n Note Compiled Module Interface pathname of a specific module or header-unit.\n "}, {"sha": "0cb5bd9b6440cc6cc30d7e2f94fe2b162aa05c05", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9592deabf3c6b9e23aa7a5b84724672cb7c8d560/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9592deabf3c6b9e23aa7a5b84724672cb7c8d560/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=9592deabf3c6b9e23aa7a5b84724672cb7c8d560", "patch": "@@ -3552,7 +3552,7 @@ class GTY((chain_next (\"%h.parent\"), for_user)) module_state {\n \t\t\t   do it again  */\n   bool call_init_p : 1; /* This module's global initializer needs\n \t\t\t   calling.  */\n-  bool inform_read_p : 1; /* Inform of a read.  */\n+  bool inform_cmi_p : 1; /* Inform of a read/write.  */\n   bool visited_p : 1;    /* A walk-once flag. */\n   /* Record extensions emitted or permitted.  */\n   unsigned extensions : SE_BITS;\n@@ -3789,7 +3789,7 @@ module_state::module_state (tree name, module_state *parent, bool partition)\n \n   partition_p = partition;\n \n-  inform_read_p = false;\n+  inform_cmi_p = false;\n   visited_p = false;\n \n   extensions = 0;\n@@ -18699,7 +18699,7 @@ module_state::do_import (cpp_reader *reader, bool outermost)\n     {\n       const char *file = maybe_add_cmi_prefix (filename);\n       dump () && dump (\"CMI is %s\", file);\n-      if (note_module_read_yes || inform_read_p)\n+      if (note_module_cmi_yes || inform_cmi_p)\n \tinform (loc, \"reading CMI %qs\", file);\n       fd = open (file, O_RDONLY | O_CLOEXEC | O_BINARY);\n       e = errno;\n@@ -19695,7 +19695,7 @@ init_modules (cpp_reader *reader)\n \t\t\t\t\t       0, is_pathname, name, len);\n \t  }\n \tif (auto module = get_module (name))\n-\t  module->inform_read_p = 1;\n+\t  module->inform_cmi_p = 1;\n \telse\n \t  error (\"invalid module name %qs\", name);\n       }\n@@ -19903,6 +19903,8 @@ finish_module_processing (cpp_reader *reader)\n \t\t  break;\n \t\tcreate_dirs (tmp_name);\n \t      }\n+\t  if (note_module_cmi_yes || state->inform_cmi_p)\n+\t    inform (state->loc, \"writing CMI %qs\", path);\n \t  dump () && dump (\"CMI is %s\", path);\n \t}\n \n@@ -19915,7 +19917,7 @@ finish_module_processing (cpp_reader *reader)\n \t  if (to.begin ())\n \t    {\n \t      auto loc = input_location;\n-\t      /* So crashes finger point the module decl.  */\n+\t      /* So crashes finger-point the module decl.  */\n \t      input_location = state->loc;\n \t      state->write (&to, reader);\n \t      input_location = loc;\n@@ -20085,7 +20087,7 @@ handle_module_option (unsigned code, const char *str, int)\n       vec_safe_push (note_includes, str);\n       return true;\n \n-    case OPT_flang_info_module_read_:\n+    case OPT_flang_info_module_cmi_:\n       vec_safe_push (note_cmis, str);\n       return true;\n "}, {"sha": "546e95453c1cf0ec439155f87d8b9f95ac0d1a1a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9592deabf3c6b9e23aa7a5b84724672cb7c8d560/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9592deabf3c6b9e23aa7a5b84724672cb7c8d560/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9592deabf3c6b9e23aa7a5b84724672cb7c8d560", "patch": "@@ -242,7 +242,7 @@ in the following sections.\n -fext-numeric-literals @gol\n -flang-info-include-translate@r{[}=@var{header}@r{]} @gol\n -flang-info-include-translate-not @gol\n--flang-info-module-read@r{[}=@var{module}@r{]} @gol\n+-flang-info-module-cmi@r{[}=@var{module}@r{]} @gol\n -stdlib=@var{libstdc++,libc++} @gol\n -Wabi-tag  -Wcatch-value  -Wcatch-value=@var{n} @gol\n -Wno-class-conversion  -Wclass-memaccess @gol\n@@ -3390,9 +3390,9 @@ translations relating to that specific header.  If @var{header} is of\n the form @code{\"user\"} or @code{<system>} it will be resolved to a\n specific user or system header using the include path.\n \n-@item -flang-info-module-read\n-@itemx -flang-info-module-read=@var{module}\n-@opindex flang-info-module-read\n+@item -flang-info-module-cmi\n+@itemx -flang-info-module-cmi=@var{module}\n+@opindex flang-info-module-cmi\n Inform of Compiled Module Interface pathnames.  The first will note\n all read CMI pathnames.  The @var{module} form will not reading a\n specific module's CMI.  @var{module} may be a named module or a\n@@ -33063,7 +33063,7 @@ option may be helpful in determining whether include translation is\n happening---if it is working correctly, it behaves as if it isn't\n there at all.\n \n-The @option{-flang-info-module-read} option can be used to determine\n+The @option{-flang-info-module-cmi} option can be used to determine\n where the compiler is reading a CMI from.  Without the option, the\n compiler is silent when such a read is successful.  This option has an\n optional argument, which will restrict the notification to just the\n@@ -33142,7 +33142,8 @@ pairs, one per line.  Only the mappings for the direct imports and any\n module export name need be provided.  If other mappings are provided,\n they override those stored in any imported CMI files.  A repository\n root may be specified in the mapping file by using @samp{$root} as the\n-module name in the first active line.\n+module name in the first active line.  Use of this option will disable\n+any default module->CMI name mapping.\n \n @end table\n "}, {"sha": "0649d053b306b4cea6a32df81a392635eb8625b8", "filename": "gcc/testsuite/g++.dg/modules/pr99166_a.X", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9592deabf3c6b9e23aa7a5b84724672cb7c8d560/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_a.X", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9592deabf3c6b9e23aa7a5b84724672cb7c8d560/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_a.X", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_a.X?ref=9592deabf3c6b9e23aa7a5b84724672cb7c8d560", "patch": "@@ -1,6 +1,7 @@\n // PR c++/99166, diagnostic\n-// { dg-additional-options {-x c++-system-header iostream -fmodules-ts} }\n+// { dg-additional-options {-x c++-system-header iostream -fmodules-ts -flang-info-module-cmi} }\n \n+// { dg-regexp {[^\\n]*iostream: note: writing CMI 'gcm.cache/[^[\\n]*iostream.gcm'\\n} }\n // { dg-prune-output {linker input file unused} }\n \n NO DO NOT COMPILE"}, {"sha": "ac20116e641e945d297305979106db0d759b9345", "filename": "gcc/testsuite/g++.dg/modules/pr99166_b.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9592deabf3c6b9e23aa7a5b84724672cb7c8d560/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9592deabf3c6b9e23aa7a5b84724672cb7c8d560/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_b.C?ref=9592deabf3c6b9e23aa7a5b84724672cb7c8d560", "patch": "@@ -1,7 +1,7 @@\n-// { dg-additional-options {-fmodules-ts -flang-info-module-read=<iostream>} }\n+// { dg-additional-options {-fmodules-ts -flang-info-module-cmi=<iostream>} }\n export module Foo;\n import <iostream>;\n \n export void frob ();\n \n-// { dg-regexp {In module imported at [^\\n]*pr99166_b.C:[0-9:]*\\n[^\\b]*iostream: note: reading CMI 'gcm.cache/[^[\\n]*iostream.gcm'\\n} }\n+// { dg-regexp {In module imported at [^\\n]*pr99166_b.C:[0-9:]*\\n[^\\n]*iostream: note: reading CMI 'gcm.cache/[^[\\n]*iostream.gcm'\\n} }"}, {"sha": "424aa1d108acc3577aed5ab5846240330c0d559c", "filename": "gcc/testsuite/g++.dg/modules/pr99166_c.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9592deabf3c6b9e23aa7a5b84724672cb7c8d560/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9592deabf3c6b9e23aa7a5b84724672cb7c8d560/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_c.C?ref=9592deabf3c6b9e23aa7a5b84724672cb7c8d560", "patch": "@@ -1,4 +1,4 @@\n-// { dg-additional-options {-fmodules-ts -flang-info-module-read=Foo} }\n+// { dg-additional-options {-fmodules-ts -flang-info-module-cmi=Foo} }\n module Foo;\n \n-// { dg-regexp {In module imported at [^\\n]*pr99166_c.C:[0-9:]*\\n[^\\b]*Foo: note: reading CMI 'gcm.cache/Foo.gcm'\\n} }\n+// { dg-regexp {In module imported at [^\\n]*pr99166_c.C:[0-9:]*\\n[^\\n]*Foo: note: reading CMI 'gcm.cache/Foo.gcm'\\n} }"}, {"sha": "dbdfacc22a4b87696262e21378221f98679ee976", "filename": "gcc/testsuite/g++.dg/modules/pr99166_d.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9592deabf3c6b9e23aa7a5b84724672cb7c8d560/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_d.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9592deabf3c6b9e23aa7a5b84724672cb7c8d560/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_d.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_d.C?ref=9592deabf3c6b9e23aa7a5b84724672cb7c8d560", "patch": "@@ -1,6 +1,6 @@\n-// { dg-additional-options {-fmodules-ts -flang-info-module-read} }\n+// { dg-additional-options {-fmodules-ts -flang-info-module-cmi} }\n import Foo;\n \n-// { dg-regexp {In module imported at [^\\n]*pr99166_d.C:[0-9:]*\\n[^\\b]*Foo: note: reading CMI 'gcm.cache/Foo.gcm'\\n} }\n+// { dg-regexp {In module imported at [^\\n]*pr99166_d.C:[0-9:]*\\n[^\\n]*Foo: note: reading CMI 'gcm.cache/Foo.gcm'\\n} }\n \n-// { dg-regexp {In module imported at [^\\n]*pr99166_b.C:[0-9:]*,\\nof module Foo, imported at [^\\n]*pr99166_d.C:[0-9:]:\\n[^\\b]*iostream: note: reading CMI 'gcm.cache/[^[\\n]*iostream.gcm'\\n} }\n+// { dg-regexp {In module imported at [^\\n]*pr99166_b.C:[0-9:]*,\\nof module Foo, imported at [^\\n]*pr99166_d.C:[0-9:]:\\n[^\\n]*iostream: note: reading CMI 'gcm.cache/[^[\\n]*iostream.gcm'\\n} }"}]}