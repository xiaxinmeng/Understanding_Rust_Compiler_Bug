{"sha": "793cac74e956117578b38224fbeab6c8621c3de5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkzY2FjNzRlOTU2MTE3NTc4YjM4MjI0ZmJlYWI2Yzg2MjFjM2RlNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-05-20T17:11:03Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-05-20T17:11:03Z"}, "message": "re PR libstdc++/66078 (20_util/specialized_algorithms/uninitialized_copy/808590.cc fails with -std=c++11)\n\n\tPR libstdc++/66078\n\t* include/bits/stl_iterator.h (__make_move_if_noexcept_iterator): Add\n\toverload for pointers.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/\n\t808590.cc: Add -std=gnu++03 switch.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/\n\t808590-cxx11.cc: Copy of 808590.cc to test with -std=gnu++11.\n\t* testsuite/23_containers/vector/modifiers/push_back/\n\tstrong_guarantee.cc: New.\n\nFrom-SVN: r223449", "tree": {"sha": "f4061182ea3e6abc6d51a26c0619b3d458b521e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4061182ea3e6abc6d51a26c0619b3d458b521e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/793cac74e956117578b38224fbeab6c8621c3de5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793cac74e956117578b38224fbeab6c8621c3de5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/793cac74e956117578b38224fbeab6c8621c3de5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793cac74e956117578b38224fbeab6c8621c3de5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b3ac48e4c3fb903960e61024f4de57697eedbf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b3ac48e4c3fb903960e61024f4de57697eedbf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b3ac48e4c3fb903960e61024f4de57697eedbf7"}], "stats": {"total": 170, "additions": 167, "deletions": 3}, "files": [{"sha": "50b1626cfb84fe6c412da71ada3260f3826b8e68", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793cac74e956117578b38224fbeab6c8621c3de5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793cac74e956117578b38224fbeab6c8621c3de5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=793cac74e956117578b38224fbeab6c8621c3de5", "patch": "@@ -1,3 +1,15 @@\n+2015-05-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/66078\n+\t* include/bits/stl_iterator.h (__make_move_if_noexcept_iterator): Add\n+\toverload for pointers.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/\n+\t808590.cc: Add -std=gnu++03 switch.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/\n+\t808590-cxx11.cc: Copy of 808590.cc to test with -std=gnu++11.\n+\t* testsuite/23_containers/vector/modifiers/push_back/\n+\tstrong_guarantee.cc: New.\n+\n 2015-05-19  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/stl_list.h (_M_resize_pos(size_type&)): Declare."}, {"sha": "b8e79dfa7e4e0846540560eacb43f586e33df38e", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793cac74e956117578b38224fbeab6c8621c3de5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793cac74e956117578b38224fbeab6c8621c3de5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=793cac74e956117578b38224fbeab6c8621c3de5", "patch": "@@ -1194,6 +1194,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __make_move_if_noexcept_iterator(_Iterator __i)\n     { return _ReturnType(__i); }\n \n+  // Overload for pointers that matches std::move_if_noexcept more closely,\n+  // returning a constant iterator when we don't want to move.\n+  template<typename _Tp, typename _ReturnType\n+    = typename conditional<__move_if_noexcept_cond<_Tp>::value,\n+\t\t\t   const _Tp*, move_iterator<_Tp*>>::type>\n+    inline _ReturnType\n+    __make_move_if_noexcept_iterator(_Tp* __i)\n+    { return _ReturnType(__i); }\n+\n   // @} group iterators\n \n   template<typename _Iterator>"}, {"sha": "9597a7bc9170987a8f1aeb5cef07889554f7cb4f", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy/808590-cxx11.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793cac74e956117578b38224fbeab6c8621c3de5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F808590-cxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793cac74e956117578b38224fbeab6c8621c3de5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F808590-cxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F808590-cxx11.cc?ref=793cac74e956117578b38224fbeab6c8621c3de5", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2012-2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+// This is identical to ./808590.cc but using -std=gnu++11\n+// See https://gcc.gnu.org/ml/libstdc++/2014-05/msg00027.html\n+\n+#include <vector>\n+#include <stdexcept>\n+\n+// 4.4.x only\n+struct c\n+{\n+  void *m;\n+\n+  c(void* o = 0) : m(o) {}\n+  c(const c &r) : m(r.m) {}\n+\n+  template<class T>\n+    explicit c(T &o) : m((void*)0xdeadbeef) { }\n+};\n+\n+int main()\n+{\n+  std::vector<c> cbs;\n+  const c cb((void*)0xcafebabe);\n+\n+  for (int fd = 62; fd < 67; ++fd)\n+    {\n+      cbs.resize(fd + 1);\n+      cbs[fd] = cb;\n+    }\n+\n+  for (int fd = 62; fd< 67; ++fd)\n+    if (cb.m != cbs[fd].m)\n+      throw std::runtime_error(\"wrong\");\n+  return 0;\n+}"}, {"sha": "7d20f8541a9c2f9f93e51d99077d640d0a856158", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy/808590.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793cac74e956117578b38224fbeab6c8621c3de5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F808590.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793cac74e956117578b38224fbeab6c8621c3de5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F808590.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F808590.cc?ref=793cac74e956117578b38224fbeab6c8621c3de5", "patch": "@@ -15,11 +15,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-options \"-std=gnu++03\" }\n+\n #include <vector>\n #include <stdexcept>\n \n // 4.4.x only\n-struct c \n+struct c\n {\n   void *m;\n \n@@ -30,12 +32,12 @@ struct c\n     explicit c(T &o) : m((void*)0xdeadbeef) { }\n };\n \n-int main() \n+int main()\n {\n   std::vector<c> cbs;\n   const c cb((void*)0xcafebabe);\n \n-  for (int fd = 62; fd < 67; ++fd) \n+  for (int fd = 62; fd < 67; ++fd)\n     {\n       cbs.resize(fd + 1);\n       cbs[fd] = cb;"}, {"sha": "461f6ea7f624c50841fb6a9432419a44c1869906", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/push_back/strong_guarantee.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793cac74e956117578b38224fbeab6c8621c3de5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fpush_back%2Fstrong_guarantee.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793cac74e956117578b38224fbeab6c8621c3de5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fpush_back%2Fstrong_guarantee.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fpush_back%2Fstrong_guarantee.cc?ref=793cac74e956117578b38224fbeab6c8621c3de5", "patch": "@@ -0,0 +1,88 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+void check(const T& t)\n+{\n+  for (auto& e : t)\n+    VERIFY( !e.moved_from);\n+}\n+\n+// This type is CopyInsertable into std::vector<Bomb> so push_back should\n+// have the strong exception-safety guarantee.\n+struct Bomb\n+{\n+  Bomb() = default;\n+\n+  Bomb(const Bomb& b)\n+  : armed(b.armed)\n+  {\n+    tick();\n+  }\n+\n+  Bomb(Bomb&& b) noexcept(false)\n+  : armed(b.armed)\n+  {\n+    tick();\n+    b.moved_from = true;\n+  }\n+\n+  // std::vector in GCC 4.x tries to use this constructor\n+  template<typename T> Bomb(T&) = delete;\n+\n+  bool moved_from = false;\n+  bool armed = true;\n+\n+private:\n+  void tick()\n+  {\n+    if (armed && ticks++)\n+      throw 1;\n+  }\n+\n+  static int ticks;\n+};\n+\n+int Bomb::ticks = 0;\n+\n+void test01()\n+{\n+  std::vector<Bomb> v(2); // fill with armed bombs\n+  v.resize(v.capacity()); // ensure no unused capacity\n+  check(v);               // sanity check\n+\n+  try {\n+    Bomb defused;\n+    // don't want any copies/moves of this object to throw\n+    defused.armed = false;\n+    // insert new element, existing elements will be relocated and explode\n+    v.push_back(defused);\n+    VERIFY(false); // should be unreachable\n+  } catch (int) {\n+    check(v);  // make sure no elements have been moved from\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}