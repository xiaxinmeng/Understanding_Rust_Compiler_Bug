{"sha": "5748ebeb998a01e22e9e2ee1e649f46c42e6bece", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc0OGViZWI5OThhMDFlMjJlOWUyZWUxZTY0OWY0NmM0MmU2YmVjZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-01-30T18:07:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-01-30T18:07:44Z"}, "message": "* sched-deps.c (sched_analyze): Make a call read the frame pointer.\n\nFrom-SVN: r49341", "tree": {"sha": "5bfe6696efdf613c71ba47adae1a6cf747f80eef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bfe6696efdf613c71ba47adae1a6cf747f80eef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5748ebeb998a01e22e9e2ee1e649f46c42e6bece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5748ebeb998a01e22e9e2ee1e649f46c42e6bece", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5748ebeb998a01e22e9e2ee1e649f46c42e6bece", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5748ebeb998a01e22e9e2ee1e649f46c42e6bece/comments", "author": null, "committer": null, "parents": [{"sha": "20d32cc2b51f9f9d649059e04c83e627226f494e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d32cc2b51f9f9d649059e04c83e627226f494e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20d32cc2b51f9f9d649059e04c83e627226f494e"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "dc3476a6dbe8f02b699e9d6dfa5568bc5b65c7f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5748ebeb998a01e22e9e2ee1e649f46c42e6bece/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5748ebeb998a01e22e9e2ee1e649f46c42e6bece/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5748ebeb998a01e22e9e2ee1e649f46c42e6bece", "patch": "@@ -1,3 +1,7 @@\n+2002-01-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* sched-deps.c (sched_analyze): Make a call read the frame pointer.\n+\n 2002-01-30  Zack Weinberg  <zack@codesourcery.com>\n \n \t* expmed.c (emit_store_flag): Call protect_from_queue on op0 and op1."}, {"sha": "9f20aad331b98c2a4d815382dbc8bdad4b8ec2c6", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5748ebeb998a01e22e9e2ee1e649f46c42e6bece/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5748ebeb998a01e22e9e2ee1e649f46c42e6bece/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=5748ebeb998a01e22e9e2ee1e649f46c42e6bece", "patch": "@@ -1267,21 +1267,30 @@ sched_analyze (deps, head, tail)\n \t    }\n \t  else\n \t    {\n-\t      /* A call may read and modify global register variables.\n-\t\t Other call-clobbered hard regs may be clobbered.  We\n-\t\t don't know what set of fixed registers might be used\n-\t\t by the function.  It is certain that the stack pointer\n-\t\t is among them, but be conservative.  */\n \t      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\t\t/* A call may read and modify global register variables.  */\n \t\tif (global_regs[i])\n \t\t  {\n \t\t    SET_REGNO_REG_SET (reg_pending_sets, i);\n \t\t    SET_REGNO_REG_SET (reg_pending_uses, i);\n \t\t  }\n+\t\t/* Other call-clobbered hard regs may be clobbered.  */\n \t\telse if (TEST_HARD_REG_BIT (regs_invalidated_by_call, i))\n \t\t  SET_REGNO_REG_SET (reg_pending_clobbers, i);\n+\t\t/* We don't know what set of fixed registers might be used\n+\t\t   by the function, but it is certain that the stack pointer\n+\t\t   is among them, but be conservative.  */\n \t\telse if (fixed_regs[i])\n \t\t  SET_REGNO_REG_SET (reg_pending_uses, i);\n+\t\t/* The frame pointer is normally not used by the function\n+\t\t   itself, but by the debugger.  */\n+\t\t/* ??? MIPS o32 is an exception.  It uses the frame pointer\n+\t\t   in the macro expansion of jal but does not represent this\n+\t\t   fact in the call_insn rtl.  */\n+\t\telse if (i == FRAME_POINTER_REGNUM\n+\t\t\t || (i == HARD_FRAME_POINTER_REGNUM\n+\t\t\t     && (! reload_completed || frame_pointer_needed)))\n+\t\t  SET_REGNO_REG_SET (reg_pending_uses, i);\n \t    }\n \n \t  /* For each insn which shouldn't cross a call, add a dependence"}]}