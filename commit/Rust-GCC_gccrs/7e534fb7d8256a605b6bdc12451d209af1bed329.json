{"sha": "7e534fb7d8256a605b6bdc12451d209af1bed329", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U1MzRmYjdkODI1NmE2MDViNmJkYzEyNDUxZDIwOWFmMWJlZDMyOQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-02-01T15:27:45Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-02-01T15:27:45Z"}, "message": "c++: Fix ICE from verify_ctor_sanity [PR98295]\n\nIn this testcase we're crashing during constexpr evaluation of the\nARRAY_REF b[0] as part of evaluation of the lambda's by-copy capture of b\n(which is encoded as a VEC_INIT_EXPR<b>).  Since A's constexpr default\nconstructor is not yet defined, b's initialization is not actually\nconstant, but because A is an empty type, evaluation of b from\ncxx_eval_array_ref is successful and yields an empty CONSTRUCTOR.\nAnd since this CONSTRUCTOR is empty, we {}-initialize the desired array\nelement, and end up crashing from verify_ctor_sanity during evaluation\nof this initializer because we updated new_ctx.ctor without updating\nnew_ctx.object: the former now has type A[3] and the latter is still the\ntarget of a TARGET_EXPR for b[0][0] created from cxx_eval_vec_init\n(and so has type A).\n\nThis patch fixes this by setting new_ctx.object appropriately at the\nsame time that we set new_ctx.ctor from cxx_eval_array_reference.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98295\n\t* constexpr.c (cxx_eval_array_reference): Also set\n\tnew_ctx.object when setting new_ctx.ctor.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98295\n\t* g++.dg/cpp0x/constexpr-98295.C: New test.", "tree": {"sha": "dc32c0f20785dbb63135302296dcaa6dcf8fe6f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc32c0f20785dbb63135302296dcaa6dcf8fe6f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e534fb7d8256a605b6bdc12451d209af1bed329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e534fb7d8256a605b6bdc12451d209af1bed329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e534fb7d8256a605b6bdc12451d209af1bed329", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e534fb7d8256a605b6bdc12451d209af1bed329/comments", "author": null, "committer": null, "parents": [{"sha": "bab669f2fc643cb1673aecd177eec1c773e9e48e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab669f2fc643cb1673aecd177eec1c773e9e48e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bab669f2fc643cb1673aecd177eec1c773e9e48e"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "1dbc2db964373087952eb9628f1aefabe8c0b8ef", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e534fb7d8256a605b6bdc12451d209af1bed329/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e534fb7d8256a605b6bdc12451d209af1bed329/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=7e534fb7d8256a605b6bdc12451d209af1bed329", "patch": "@@ -3760,6 +3760,7 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n       tree empty_ctor = build_constructor (init_list_type_node, NULL);\n       val = digest_init (elem_type, empty_ctor, tf_warning_or_error);\n       new_ctx = *ctx;\n+      new_ctx.object = t;\n       new_ctx.ctor = build_constructor (elem_type, NULL);\n       ctx = &new_ctx;\n     }"}, {"sha": "930bd5a67dac4a570239edd54473e309d04618a6", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-98295.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e534fb7d8256a605b6bdc12451d209af1bed329/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-98295.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e534fb7d8256a605b6bdc12451d209af1bed329/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-98295.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-98295.C?ref=7e534fb7d8256a605b6bdc12451d209af1bed329", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/98295\n+// { dg-do compile { target c++11 } }\n+\n+struct A { constexpr A(); };\n+\n+void f() {\n+  A b[2][3];\n+  [b] { };\n+}\n+\n+constexpr A::A() {}"}]}