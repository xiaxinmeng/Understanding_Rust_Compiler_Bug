{"sha": "18499b9f848707aee42d810e99ac0a4c9788433c", "node_id": "C_kwDOANBUbNoAKDE4NDk5YjlmODQ4NzA3YWVlNDJkODEwZTk5YWMwYTRjOTc4ODQzM2M", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-15T21:02:05Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-15T21:02:05Z"}, "message": "c++: extract_local_specs and unevaluated contexts [PR100295]\n\nHere during partial instantiation of the constexpr if, extra_local_specs\nwalks the statement looking for local specializations within to capture.\nHowever, we're thwarted by the fact that 'ts' first appears inside an\nunevaluated context, and so the calls to process_outer_var_ref for its\nlocal specializations are a no-op.  And since we walk each tree exactly\nonce, we end up not capturing the local specializations despite 'ts'\nlater occurring in an evaluated context.\n\nThis patch fixes this by making extract_local_specs walk evaluated\ncontexts first before walking unevaluated contexts.  We could probably\nget away with not walking unevaluated contexts at all, but this approach\nseems more clearly safe.\n\n\tPR c++/100295\n\tPR c++/107579\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (el_data::skip_unevaluated_operands): New data member.\n\t(extract_locals_r): If skip_unevaluated_operands is true,\n\tdon't walk into unevaluated contexts.\n\t(extract_local_specs): Walk the pattern twice, first with\n\tskip_unevaluated_operands true followed by it set to false.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/constexpr-if-lambda5.C: New test.", "tree": {"sha": "0e2653dbba42e484cc3015fdc7f2b8dcb33d2c5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e2653dbba42e484cc3015fdc7f2b8dcb33d2c5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18499b9f848707aee42d810e99ac0a4c9788433c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18499b9f848707aee42d810e99ac0a4c9788433c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18499b9f848707aee42d810e99ac0a4c9788433c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18499b9f848707aee42d810e99ac0a4c9788433c/comments", "author": null, "committer": null, "parents": [{"sha": "be124477b38a71ba8ba0b24d859ae764bb44a4eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be124477b38a71ba8ba0b24d859ae764bb44a4eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be124477b38a71ba8ba0b24d859ae764bb44a4eb"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "b9933ec6e06919ecaa81918d25776f4ca3aa91be", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18499b9f848707aee42d810e99ac0a4c9788433c/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18499b9f848707aee42d810e99ac0a4c9788433c/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=18499b9f848707aee42d810e99ac0a4c9788433c", "patch": "@@ -13016,17 +13016,26 @@ class el_data\n   /* List of local_specializations used within the pattern.  */\n   tree extra;\n   tsubst_flags_t complain;\n+  /* True iff we don't want to walk into unevaluated contexts.  */\n+  bool skip_unevaluated_operands = false;\n \n   el_data (tsubst_flags_t c)\n     : extra (NULL_TREE), complain (c) {}\n };\n static tree\n-extract_locals_r (tree *tp, int */*walk_subtrees*/, void *data_)\n+extract_locals_r (tree *tp, int *walk_subtrees, void *data_)\n {\n   el_data &data = *reinterpret_cast<el_data*>(data_);\n   tree *extra = &data.extra;\n   tsubst_flags_t complain = data.complain;\n \n+  if (data.skip_unevaluated_operands\n+      && unevaluated_p (TREE_CODE (*tp)))\n+    {\n+      *walk_subtrees = 0;\n+      return NULL_TREE;\n+    }\n+\n   if (TYPE_P (*tp) && typedef_variant_p (*tp))\n     /* Remember local typedefs (85214).  */\n     tp = &TYPE_NAME (*tp);\n@@ -13118,6 +13127,14 @@ static tree\n extract_local_specs (tree pattern, tsubst_flags_t complain)\n {\n   el_data data (complain);\n+  /* Walk the pattern twice, ignoring unevaluated operands the first time\n+     around, so that if a local specialization appears in both an evaluated\n+     and unevaluated context we prefer to process it in the evaluated context\n+     (since e.g. process_outer_var_ref is a no-op inside an unevaluated\n+     context).  */\n+  data.skip_unevaluated_operands = true;\n+  cp_walk_tree (&pattern, extract_locals_r, &data, &data.visited);\n+  data.skip_unevaluated_operands = false;\n   cp_walk_tree (&pattern, extract_locals_r, &data, &data.visited);\n   return data.extra;\n }"}, {"sha": "d2bf0221743f1d4f61b05288ac661a3c0ce0b2f1", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if-lambda5.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18499b9f848707aee42d810e99ac0a4c9788433c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if-lambda5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18499b9f848707aee42d810e99ac0a4c9788433c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if-lambda5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if-lambda5.C?ref=18499b9f848707aee42d810e99ac0a4c9788433c", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/100295\n+// { dg-do compile { target c++17 } }\n+\n+template<typename... Ts>\n+void f(Ts... ts) {\n+  auto lambda = [=](auto x) {\n+    if constexpr (sizeof((ts+x) + ...) != 0)\n+      (..., ts);\n+  };\n+  lambda(0);\n+}\n+\n+int main() {\n+  f(0, 'a');\n+}"}]}