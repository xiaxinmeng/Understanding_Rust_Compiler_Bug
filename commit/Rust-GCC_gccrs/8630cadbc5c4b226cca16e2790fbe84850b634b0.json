{"sha": "8630cadbc5c4b226cca16e2790fbe84850b634b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYzMGNhZGJjNWM0YjIyNmNjYTE2ZTI3OTBmYmU4NDg1MGI2MzRiMA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-11-23T17:30:02Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-11-23T17:30:02Z"}, "message": "[Patch 14/17] [libgcc, ARM] Generalise float-to-half conversion function.\n\nlibgcc/\n\n\t* config/arm/fp16.c (struct format): New.\n\t(binary32): New.\n\t(__gnu_float2h_internal): New.  Body moved from\n\t__gnu_f2h_internal and generalize.\n\t(_gnu_f2h_internal): Move body to function __gnu_float2h_internal.\n\tCall it with binary32.\n\n\n\nCo-Authored-By: Matthew Wahab <matthew.wahab@arm.com>\n\nFrom-SVN: r242781", "tree": {"sha": "aa71f56bd4587c4d9964473b1b7014ef5096ef8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa71f56bd4587c4d9964473b1b7014ef5096ef8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8630cadbc5c4b226cca16e2790fbe84850b634b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8630cadbc5c4b226cca16e2790fbe84850b634b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8630cadbc5c4b226cca16e2790fbe84850b634b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8630cadbc5c4b226cca16e2790fbe84850b634b0/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba75a1747c5094c60acea726c83e5d69a4373cb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba75a1747c5094c60acea726c83e5d69a4373cb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba75a1747c5094c60acea726c83e5d69a4373cb1"}], "stats": {"total": 100, "additions": 82, "deletions": 18}, "files": [{"sha": "0f6283467c29b5cebb33cd586dd02fb2b7ed5f0a", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8630cadbc5c4b226cca16e2790fbe84850b634b0/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8630cadbc5c4b226cca16e2790fbe84850b634b0/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=8630cadbc5c4b226cca16e2790fbe84850b634b0", "patch": "@@ -1,3 +1,13 @@\n+2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\t    Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* config/arm/fp16.c (struct format): New.\n+\t(binary32): New.\n+\t(__gnu_float2h_internal): New.  Body moved from\n+\t__gnu_f2h_internal and generalize.\n+\t(_gnu_f2h_internal): Move body to function __gnu_float2h_internal.\n+\tCall it with binary32.\n+\n 2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* soft-fp/extendhftf2.c: Update from glibc."}, {"sha": "76f73275b00204000e7a5fdb3c3c86e7aa2d0968", "filename": "libgcc/config/arm/fp16.c", "status": "modified", "additions": 72, "deletions": 18, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8630cadbc5c4b226cca16e2790fbe84850b634b0/libgcc%2Fconfig%2Farm%2Ffp16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8630cadbc5c4b226cca16e2790fbe84850b634b0/libgcc%2Fconfig%2Farm%2Ffp16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Ffp16.c?ref=8630cadbc5c4b226cca16e2790fbe84850b634b0", "patch": "@@ -22,40 +22,74 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+struct format\n+{\n+  /* Number of bits.  */\n+  unsigned long long size;\n+  /* Exponent bias.  */\n+  unsigned long long bias;\n+  /* Exponent width in bits.  */\n+  unsigned long long exponent;\n+  /* Significand precision in explicitly stored bits.  */\n+  unsigned long long significand;\n+};\n+\n+static const struct format\n+binary32 =\n+{\n+  32,   /* size.  */\n+  127,  /* bias.  */\n+  8,    /* exponent.  */\n+  23    /* significand.  */\n+};\n+\n static inline unsigned short\n-__gnu_f2h_internal(unsigned int a, int ieee)\n+__gnu_float2h_internal (const struct format* fmt,\n+\t\t\tunsigned long long a, int ieee)\n {\n-  unsigned short sign = (a >> 16) & 0x8000;\n-  int aexp = (a >> 23) & 0xff;\n-  unsigned int mantissa = a & 0x007fffff;\n-  unsigned int mask;\n-  unsigned int increment;\n+  unsigned long long point = 1ULL << fmt->significand;\n+  unsigned short sign = (a >> (fmt->size - 16)) & 0x8000;\n+  int aexp;\n+  unsigned long long mantissa;\n+  unsigned long long mask;\n+  unsigned long long increment;\n+\n+  /* Get the exponent and mantissa encodings.  */\n+  mantissa = a & (point - 1);\n \n-  if (aexp == 0xff)\n+  mask = (1 << fmt->exponent) - 1;\n+  aexp = (a >> fmt->significand) & mask;\n+\n+  /* Infinity, NaN and alternative format special case.  */\n+  if (((unsigned int) aexp) == mask)\n     {\n       if (!ieee)\n \treturn sign;\n       if (mantissa == 0)\n \treturn sign | 0x7c00;\t/* Infinity.  */\n       /* Remaining cases are NaNs.  Convert SNaN to QNaN.  */\n-      return sign | 0x7e00 | (mantissa >> 13);\n+      return sign | 0x7e00 | (mantissa >> (fmt->significand - 10));\n     }\n \n+  /* Zero.  */\n   if (aexp == 0 && mantissa == 0)\n     return sign;\n \n-  aexp -= 127;\n+  /* Construct the exponent and mantissa.  */\n+  aexp -= fmt->bias;\n+\n+  /* Decimal point is immediately after the significand.  */\n+  mantissa |= point;\n \n-  /* Decimal point between bits 22 and 23.  */\n-  mantissa |= 0x00800000;\n   if (aexp < -14)\n     {\n-      mask = 0x00ffffff;\n+      mask = point | (point - 1);\n+      /* Minimum exponent for half-precision is 2^-24.  */\n       if (aexp >= -25)\n \tmask >>= 25 + aexp;\n     }\n   else\n-    mask = 0x00001fff;\n+    mask = (point - 1) >> 10;\n \n   /* Round.  */\n   if (mantissa & mask)\n@@ -64,8 +98,8 @@ __gnu_f2h_internal(unsigned int a, int ieee)\n       if ((mantissa & mask) == increment)\n \tincrement = mantissa & (increment << 1);\n       mantissa += increment;\n-      if (mantissa >= 0x01000000)\n-       \t{\n+      if (mantissa >= (point << 1))\n+\t{\n \t  mantissa >>= 1;\n \t  aexp++;\n \t}\n@@ -91,9 +125,29 @@ __gnu_f2h_internal(unsigned int a, int ieee)\n       aexp = -14;\n     }\n \n-  /* We leave the leading 1 in the mantissa, and subtract one\n-     from the exponent bias to compensate.  */\n-  return sign | (((aexp + 14) << 10) + (mantissa >> 13));\n+  /* Encode the final 16-bit floating-point value.\n+\n+     This is formed of the sign bit, the bias-adjusted exponent, and the\n+     calculated mantissa, with the following caveats:\n+\n+     1.  The mantissa calculated after rounding could have a leading 1.\n+\t To compensate for this, subtract one from the exponent bias (15)\n+\t before adding it to the calculated exponent.\n+     2.  When we were calculating rounding, we left the mantissa with the\n+\t number of bits of the source operand, it needs reduced to ten\n+\t bits (+1 for the afforementioned leading 1) by shifting right by\n+\t the number of bits in the source mantissa - 10.\n+     3.  To ensure the leading 1 in the mantissa is applied to the exponent\n+\t we need to add the mantissa rather than apply an arithmetic \"or\"\n+\t to it.  */\n+\n+  return sign | (((aexp + 14) << 10) + (mantissa >> (fmt->significand - 10)));\n+}\n+\n+static inline unsigned short\n+__gnu_f2h_internal (unsigned int a, int ieee)\n+{\n+  return __gnu_float2h_internal (&binary32, (unsigned long long) a, ieee);\n }\n \n unsigned int"}]}