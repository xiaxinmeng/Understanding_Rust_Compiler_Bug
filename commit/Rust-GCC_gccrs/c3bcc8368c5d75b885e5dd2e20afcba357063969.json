{"sha": "c3bcc8368c5d75b885e5dd2e20afcba357063969", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNiY2M4MzY4YzVkNzViODg1ZTVkZDJlMjBhZmNiYTM1NzA2Mzk2OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1991-09-24T02:25:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1991-09-24T02:25:58Z"}, "message": "Initial revision\n\nFrom-SVN: r41", "tree": {"sha": "d605f5c2ec838cd86ce80e51ddb9ccea92178463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d605f5c2ec838cd86ce80e51ddb9ccea92178463"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3bcc8368c5d75b885e5dd2e20afcba357063969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3bcc8368c5d75b885e5dd2e20afcba357063969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3bcc8368c5d75b885e5dd2e20afcba357063969", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3bcc8368c5d75b885e5dd2e20afcba357063969/comments", "author": null, "committer": null, "parents": [{"sha": "f3db20a31d374204eef0a0c9bc1f7ca54dc585ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3db20a31d374204eef0a0c9bc1f7ca54dc585ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3db20a31d374204eef0a0c9bc1f7ca54dc585ea"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "425f89a93c116c71f8bfa94b31bf2d162be92a7c", "filename": "gcc/regs.h", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bcc8368c5d75b885e5dd2e20afcba357063969/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bcc8368c5d75b885e5dd2e20afcba357063969/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=c3bcc8368c5d75b885e5dd2e20afcba357063969", "patch": "@@ -0,0 +1,148 @@\n+/* Define per-register tables for data flow info and register allocation.\n+   Copyright (C) 1987 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+\n+#define REG_BYTES(R) mode_size[(int) GET_MODE (R)]\n+\n+/* Get the number of consecutive hard regs required to hold the REG rtx R.\n+   When something may be an explicit hard reg, REG_SIZE is the only\n+   valid way to get this value.  You cannot get it from the regno.  */\n+\n+#define REG_SIZE(R) \\\n+  ((mode_size[(int) GET_MODE (R)] + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n+\n+/* Maximum register number used in this function, plus one.  */\n+\n+extern int max_regno;\n+\n+/* Maximum number of SCRATCH rtx's in each block of this function.  */\n+\n+extern int max_scratch;\n+\n+/* Indexed by n, gives number of times (REG n) is used or set.\n+   References within loops may be counted more times.  */\n+\n+extern int *reg_n_refs;\n+\n+/* Indexed by n, gives number of times (REG n) is set.  */\n+\n+extern short *reg_n_sets;\n+\n+/* Indexed by N, gives number of insns in which register N dies.\n+   Note that if register N is live around loops, it can die\n+   in transitions between basic blocks, and that is not counted here.\n+   So this is only a reliable indicator of how many regions of life there are\n+   for registers that are contained in one basic block.  */\n+\n+extern short *reg_n_deaths;\n+\n+/* Get the number of consecutive words required to hold pseudo-reg N.  */\n+\n+#define PSEUDO_REGNO_SIZE(N) \\\n+  ((GET_MODE_SIZE (PSEUDO_REGNO_MODE (N)) + UNITS_PER_WORD - 1)\t\t\\\n+   / UNITS_PER_WORD)\n+\n+/* Get the number of bytes required to hold pseudo-reg N.  */\n+\n+#define PSEUDO_REGNO_BYTES(N) \\\n+  GET_MODE_SIZE (PSEUDO_REGNO_MODE (N))\n+\n+/* Get the machine mode of pseudo-reg N.  */\n+\n+#define PSEUDO_REGNO_MODE(N) GET_MODE (regno_reg_rtx[N])\n+\n+/* Indexed by N, gives number of CALL_INSNS across which (REG n) is live.  */\n+\n+extern int *reg_n_calls_crossed;\n+\n+/* Total number of instructions at which (REG n) is live.\n+   The larger this is, the less priority (REG n) gets for\n+   allocation in a hard register (in global-alloc).\n+   This is set in flow.c and remains valid for the rest of the compilation\n+   of the function; it is used to control register allocation.\n+\n+   local-alloc.c may alter this number to change the priority.\n+\n+   Negative values are special.\n+   -1 is used to mark a pseudo reg which has a constant or memory equivalent\n+   and is used infrequently enough that it should not get a hard register.\n+   -2 is used to mark a pseudo reg for a parameter, when a frame pointer\n+   is not required.  global-alloc.c makes an allocno for this but does\n+   not try to assign a hard register to it.  */\n+\n+extern int *reg_live_length;\n+\n+/* Vector of substitutions of register numbers,\n+   used to map pseudo regs into hardware regs.  */\n+\n+extern short *reg_renumber;\n+\n+/* Vector indexed by hardware reg\n+   saying whether that reg is ever used.  */\n+\n+extern char regs_ever_live[FIRST_PSEUDO_REGISTER];\n+\n+/* Vector indexed by hardware reg giving its name.  */\n+\n+extern char *reg_names[FIRST_PSEUDO_REGISTER];\n+\n+/* Vector indexed by regno; gives uid of first insn using that reg.\n+   This is computed by reg_scan for use by cse and loop.\n+   It is sometimes adjusted for subsequent changes during loop,\n+   but not adjusted by cse even if cse invalidates it.  */\n+\n+extern short *regno_first_uid;\n+\n+/* Vector indexed by regno; gives uid of last insn using that reg.\n+   This is computed by reg_scan for use by cse and loop.\n+   It is sometimes adjusted for subsequent changes during loop,\n+   but not adjusted by cse even if cse invalidates it.\n+   This is harmless since cse won't scan through a loop end.  */\n+\n+extern short *regno_last_uid;\n+\n+/* Vector indexed by regno; contains 1 for a register is considered a pointer.\n+   Reloading, etc. will use a pointer register rather than a non-pointer\n+   as the base register in an address, when there is a choice of two regs.  */\n+\n+extern char *regno_pointer_flag;\n+#define REGNO_POINTER_FLAG(REGNO) regno_pointer_flag[REGNO]\n+\n+/* List made of EXPR_LIST rtx's which gives pairs of pseudo registers\n+   that have to go in the same hard reg.  */\n+extern rtx regs_may_share;\n+\n+/* Vector mapping pseudo regno into the REG rtx for that register.\n+   This is computed by reg_scan.  */\n+\n+extern rtx *regno_reg_rtx;\n+\n+/* Flag set by local-alloc or global-alloc if they decide to allocate\n+   something in a call-clobbered register.  */\n+\n+extern int caller_save_needed;\n+\n+/* Predicate to decide whether to give a hard reg to a pseudo which\n+   is referenced REFS times and would need to be saved and restored\n+   around a call CALLS times.  */\n+\n+#ifndef CALLER_SAVE_PROFITABLE\n+#define CALLER_SAVE_PROFITABLE(REFS, CALLS)  (4 * (CALLS) < (REFS))\n+#endif"}]}