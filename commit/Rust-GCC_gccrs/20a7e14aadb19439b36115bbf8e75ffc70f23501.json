{"sha": "20a7e14aadb19439b36115bbf8e75ffc70f23501", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBhN2UxNGFhZGIxOTQzOWIzNjExNWJiZjhlNzVmZmM3MGYyMzUwMQ==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2017-10-02T16:56:58Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2017-10-02T16:56:58Z"}, "message": "re PR target/80210 (ICE in in extract_insn, at recog.c:2311 on ppc64 for with __builtin_pow)\n\ngcc/\n\tPR target/80210\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Rewrite\n\tfunction to not use the have_cpu variable.  Do not set cpu_index,\n\trs6000_cpu_index or rs6000_tune_index if we end up using TARGET_DEFAULT\n\tor the default cpu.\n\t(rs6000_valid_attribute_p): Remove duplicate initializations of\n\told_optimize and func_optimize.\n\t(rs6000_pragma_target_parse): Call rs6000_activate_target_options ().\n\t(rs6000_activate_target_options): Make global.\n\t* config/rs6000/rs6000-protos.h (rs6000_activate_target_options): Add\n\tprototype.\n\ngcc/testsuite/\n\tPR target/80210\n\t* gcc.target/powerpc/pr80210-2.c: New test.\n\nFrom-SVN: r253358", "tree": {"sha": "dd2bea9e60bf8fc8b8067a3efaf92795038abce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd2bea9e60bf8fc8b8067a3efaf92795038abce7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20a7e14aadb19439b36115bbf8e75ffc70f23501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20a7e14aadb19439b36115bbf8e75ffc70f23501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20a7e14aadb19439b36115bbf8e75ffc70f23501", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20a7e14aadb19439b36115bbf8e75ffc70f23501/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "476dec785da43401e5a34d80d2ed5ec61d3a9dd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476dec785da43401e5a34d80d2ed5ec61d3a9dd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/476dec785da43401e5a34d80d2ed5ec61d3a9dd6"}], "stats": {"total": 175, "additions": 87, "deletions": 88}, "files": [{"sha": "c0b2f2b1c6d888add78d942082b64f3055447a64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a7e14aadb19439b36115bbf8e75ffc70f23501/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a7e14aadb19439b36115bbf8e75ffc70f23501/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20a7e14aadb19439b36115bbf8e75ffc70f23501", "patch": "@@ -1,3 +1,17 @@\n+2017-08-18  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/80210\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Rewrite\n+\tfunction to not use the have_cpu variable.  Do not set cpu_index,\n+\trs6000_cpu_index or rs6000_tune_index if we end up using TARGET_DEFAULT\n+\tor the default cpu.\n+\t(rs6000_valid_attribute_p): Remove duplicate initializations of\n+\told_optimize and func_optimize.\n+\t(rs6000_pragma_target_parse): Call rs6000_activate_target_options ().\n+\t(rs6000_activate_target_options): Make global.\n+\t* config/rs6000/rs6000-protos.h (rs6000_activate_target_options): Add\n+\tprototype.\n+\n 2017-10-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-dfa.c (get_ref_base_and_extent): Set *pmax_size to -1"}, {"sha": "c6be5b1ef59f89a3807901018fbbaf9ec8d53d72", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a7e14aadb19439b36115bbf8e75ffc70f23501/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a7e14aadb19439b36115bbf8e75ffc70f23501/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=20a7e14aadb19439b36115bbf8e75ffc70f23501", "patch": "@@ -230,6 +230,7 @@ extern void rs6000_cpu_cpp_builtins (struct cpp_reader *);\n #ifdef TREE_CODE\n extern bool rs6000_pragma_target_parse (tree, tree);\n #endif\n+extern void rs6000_activate_target_options (tree new_tree);\n extern void rs6000_target_modify_macros (bool, HOST_WIDE_INT, HOST_WIDE_INT);\n extern void (*rs6000_target_modify_macros_ptr) (bool, HOST_WIDE_INT,\n \t\t\t\t\t\tHOST_WIDE_INT);"}, {"sha": "b903f47ee27693546fc1b5ba79f78ec6f5e4887d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 56, "deletions": 88, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a7e14aadb19439b36115bbf8e75ffc70f23501/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a7e14aadb19439b36115bbf8e75ffc70f23501/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=20a7e14aadb19439b36115bbf8e75ffc70f23501", "patch": "@@ -3992,14 +3992,10 @@ static bool\n rs6000_option_override_internal (bool global_init_p)\n {\n   bool ret = true;\n-  bool have_cpu = false;\n-\n-  /* The default cpu requested at configure time, if any.  */\n-  const char *implicit_cpu = OPTION_TARGET_CPU_DEFAULT;\n \n   HOST_WIDE_INT set_masks;\n   HOST_WIDE_INT ignore_masks;\n-  int cpu_index;\n+  int cpu_index = -1;\n   int tune_index;\n   struct cl_target_option *main_target_opt\n     = ((global_init_p || target_option_default_node == NULL)\n@@ -4078,93 +4074,51 @@ rs6000_option_override_internal (bool global_init_p)\n      with -mtune on the command line.  Process a '--with-cpu' configuration\n      request as an implicit --cpu.  */\n   if (rs6000_cpu_index >= 0)\n-    {\n-      cpu_index = rs6000_cpu_index;\n-      have_cpu = true;\n-    }\n+    cpu_index = rs6000_cpu_index;\n   else if (main_target_opt != NULL && main_target_opt->x_rs6000_cpu_index >= 0)\n-    {\n-      rs6000_cpu_index = cpu_index = main_target_opt->x_rs6000_cpu_index;\n-      have_cpu = true;\n-    }\n-  else if (implicit_cpu)\n-    {\n-      rs6000_cpu_index = cpu_index = rs6000_cpu_name_lookup (implicit_cpu);\n-      have_cpu = true;\n-    }\n-  else\n-    {\n-      /* PowerPC 64-bit LE requires at least ISA 2.07.  */\n-      const char *default_cpu = ((!TARGET_POWERPC64)\n-\t\t\t\t ? \"powerpc\"\n-\t\t\t\t : ((BYTES_BIG_ENDIAN)\n-\t\t\t\t    ? \"powerpc64\"\n-\t\t\t\t    : \"powerpc64le\"));\n-\n-      rs6000_cpu_index = cpu_index = rs6000_cpu_name_lookup (default_cpu);\n-      have_cpu = false;\n-    }\n-\n-  gcc_assert (cpu_index >= 0);\n+    cpu_index = main_target_opt->x_rs6000_cpu_index;\n+  else if (OPTION_TARGET_CPU_DEFAULT)\n+    cpu_index = rs6000_cpu_name_lookup (OPTION_TARGET_CPU_DEFAULT);\n \n-  if (have_cpu)\n+  if (cpu_index >= 0)\n     {\n-#ifndef HAVE_AS_POWER9\n-      if (processor_target_table[rs6000_cpu_index].processor \n-\t  == PROCESSOR_POWER9)\n+      const char *unavailable_cpu = NULL;\n+      switch (processor_target_table[cpu_index].processor)\n \t{\n-\t  have_cpu = false;\n-\t  warning (0, \"will not generate power9 instructions because \"\n-\t\t   \"assembler lacks power9 support\");\n-\t}\n+#ifndef HAVE_AS_POWER9\n+\tcase PROCESSOR_POWER9:\n+\t  unavailable_cpu = \"power9\";\n+\t  break;\n #endif\n #ifndef HAVE_AS_POWER8\n-      if (processor_target_table[rs6000_cpu_index].processor\n-\t  == PROCESSOR_POWER8)\n-\t{\n-\t  have_cpu = false;\n-\t  warning (0, \"will not generate power8 instructions because \"\n-\t\t   \"assembler lacks power8 support\");\n-\t}\n+\tcase PROCESSOR_POWER8:\n+\t  unavailable_cpu = \"power8\";\n+\t  break;\n #endif\n #ifndef HAVE_AS_POPCNTD\n-      if (processor_target_table[rs6000_cpu_index].processor\n-\t  == PROCESSOR_POWER7)\n-\t{\n-\t  have_cpu = false;\n-\t  warning (0, \"will not generate power7 instructions because \"\n-\t\t   \"assembler lacks power7 support\");\n-\t}\n+\tcase PROCESSOR_POWER7:\n+\t  unavailable_cpu = \"power7\";\n+\t  break;\n #endif\n #ifndef HAVE_AS_DFP\n-      if (processor_target_table[rs6000_cpu_index].processor\n-\t  == PROCESSOR_POWER6)\n-\t{\n-\t  have_cpu = false;\n-\t  warning (0, \"will not generate power6 instructions because \"\n-\t\t   \"assembler lacks power6 support\");\n-\t}\n+\tcase PROCESSOR_POWER6:\n+\t  unavailable_cpu = \"power6\";\n+\t  break;\n #endif\n #ifndef HAVE_AS_POPCNTB\n-      if (processor_target_table[rs6000_cpu_index].processor\n-\t  == PROCESSOR_POWER5)\n-\t{\n-\t  have_cpu = false;\n-\t  warning (0, \"will not generate power5 instructions because \"\n-\t\t   \"assembler lacks power5 support\");\n-\t}\n+\tcase PROCESSOR_POWER5:\n+\t  unavailable_cpu = \"power5\";\n+\t  break;\n #endif\n-\n-      if (!have_cpu)\n+\tdefault:\n+\t  break;\n+\t}\n+      if (unavailable_cpu)\n \t{\n-\t  /* PowerPC 64-bit LE requires at least ISA 2.07.  */\n-\t  const char *default_cpu = (!TARGET_POWERPC64\n-\t\t\t\t     ? \"powerpc\"\n-\t\t\t\t     : (BYTES_BIG_ENDIAN\n-\t\t\t\t\t? \"powerpc64\"\n-\t\t\t\t\t: \"powerpc64le\"));\n-\n-\t  rs6000_cpu_index = cpu_index = rs6000_cpu_name_lookup (default_cpu);\n+\t  cpu_index = -1;\n+\t  warning (0, \"will not generate %qs instructions because \"\n+\t\t   \"assembler lacks %qs support\", unavailable_cpu,\n+\t\t   unavailable_cpu);\n \t}\n     }\n \n@@ -4173,8 +4127,9 @@ rs6000_option_override_internal (bool global_init_p)\n      with those from the cpu, except for options that were explicitly set.  If\n      we don't have a cpu, do not override the target bits set in\n      TARGET_DEFAULT.  */\n-  if (have_cpu)\n+  if (cpu_index >= 0)\n     {\n+      rs6000_cpu_index = cpu_index;\n       rs6000_isa_flags &= ~set_masks;\n       rs6000_isa_flags |= (processor_target_table[cpu_index].target_enable\n \t\t\t   & set_masks);\n@@ -4188,14 +4143,26 @@ rs6000_option_override_internal (bool global_init_p)\n \n \t If there is a TARGET_DEFAULT, use that.  Otherwise fall back to using\n \t -mcpu=powerpc, -mcpu=powerpc64, or -mcpu=powerpc64le defaults.  */\n-      HOST_WIDE_INT flags = ((TARGET_DEFAULT) ? TARGET_DEFAULT\n-\t\t\t     : processor_target_table[cpu_index].target_enable);\n+      HOST_WIDE_INT flags;\n+      if (TARGET_DEFAULT)\n+\tflags = TARGET_DEFAULT;\n+      else\n+\t{\n+\t  /* PowerPC 64-bit LE requires at least ISA 2.07.  */\n+\t  const char *default_cpu = (!TARGET_POWERPC64\n+\t\t\t\t     ? \"powerpc\"\n+\t\t\t\t     : (BYTES_BIG_ENDIAN\n+\t\t\t\t\t? \"powerpc64\"\n+\t\t\t\t\t: \"powerpc64le\"));\n+\t  int default_cpu_index = rs6000_cpu_name_lookup (default_cpu);\n+\t  flags = processor_target_table[default_cpu_index].target_enable;\n+\t}\n       rs6000_isa_flags |= (flags & ~rs6000_isa_flags_explicit);\n     }\n \n   if (rs6000_tune_index >= 0)\n     tune_index = rs6000_tune_index;\n-  else if (have_cpu)\n+  else if (cpu_index >= 0)\n     rs6000_tune_index = tune_index = cpu_index;\n   else\n     {\n@@ -4207,7 +4174,7 @@ rs6000_option_override_internal (bool global_init_p)\n       for (i = 0; i < ARRAY_SIZE (processor_target_table); i++)\n \tif (processor_target_table[i].processor == tune_proc)\n \t  {\n-\t    rs6000_tune_index = tune_index = i;\n+\t    tune_index = i;\n \t    break;\n \t  }\n     }\n@@ -4334,7 +4301,7 @@ rs6000_option_override_internal (bool global_init_p)\n     rs6000_isa_flags |= (ISA_3_0_MASKS_SERVER & ~ignore_masks);\n   else if (TARGET_P9_MINMAX)\n     {\n-      if (have_cpu)\n+      if (cpu_index >= 0)\n \t{\n \t  if (cpu_index == PROCESSOR_POWER9)\n \t    {\n@@ -4837,7 +4804,7 @@ rs6000_option_override_internal (bool global_init_p)\n \n     default:\n \n-      if (have_cpu && !(rs6000_isa_flags_explicit & OPTION_MASK_ISEL))\n+      if (cpu_index >= 0 && !(rs6000_isa_flags_explicit & OPTION_MASK_ISEL))\n \trs6000_isa_flags &= ~OPTION_MASK_ISEL;\n \n       break;\n@@ -36874,9 +36841,9 @@ rs6000_valid_attribute_p (tree fndecl,\n {\n   struct cl_target_option cur_target;\n   bool ret;\n-  tree old_optimize = build_optimization_node (&global_options);\n+  tree old_optimize;\n   tree new_target, new_optimize;\n-  tree func_optimize = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl);\n+  tree func_optimize;\n \n   gcc_assert ((fndecl != NULL_TREE) && (args != NULL_TREE));\n \n@@ -37011,6 +36978,7 @@ rs6000_pragma_target_parse (tree args, tree pop_target)\n     }\n \n   target_option_current_node = cur_tree;\n+  rs6000_activate_target_options (target_option_current_node);\n \n   /* If we have the preprocessor linked in (i.e. C or C++ languages), possibly\n      change the macros that are defined.  */\n@@ -37051,7 +37019,7 @@ static GTY(()) tree rs6000_previous_fndecl;\n /* Restore target's globals from NEW_TREE and invalidate the\n    rs6000_previous_fndecl cache.  */\n \n-static void\n+void\n rs6000_activate_target_options (tree new_tree)\n {\n   cl_target_option_restore (&global_options, TREE_TARGET_OPTION (new_tree));"}, {"sha": "f679836903b66bfd9a7543d18ad7402fc5767ada", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a7e14aadb19439b36115bbf8e75ffc70f23501/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a7e14aadb19439b36115bbf8e75ffc70f23501/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=20a7e14aadb19439b36115bbf8e75ffc70f23501", "patch": "@@ -1,3 +1,8 @@\n+2017-10-02  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/80210\n+\t* gcc.target/powerpc/pr80210-2.c: New test.\n+\n 2017-10-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/pr82389.c: New test."}, {"sha": "455f7d6e31f3946080ce330374c789b20807ebef", "filename": "gcc/testsuite/gcc.target/powerpc/pr80210-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a7e14aadb19439b36115bbf8e75ffc70f23501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80210-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a7e14aadb19439b36115bbf8e75ffc70f23501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80210-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80210-2.c?ref=20a7e14aadb19439b36115bbf8e75ffc70f23501", "patch": "@@ -0,0 +1,11 @@\n+/* Test for ICE arising from GCC target pragma.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#pragma GCC target \"no-powerpc-gpopt\"\n+double\n+foo (double a)\n+{\n+  return __builtin_sqrt (a);\n+}\n+/* { dg-final { scan-assembler-not \"fsqrt\" } } */"}]}