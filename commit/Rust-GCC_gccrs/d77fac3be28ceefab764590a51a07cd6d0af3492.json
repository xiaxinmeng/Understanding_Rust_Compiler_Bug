{"sha": "d77fac3be28ceefab764590a51a07cd6d0af3492", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc3ZmFjM2JlMjhjZWVmYWI3NjQ1OTBhNTFhMDdjZDZkMGFmMzQ5Mg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-16T23:07:05Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-16T23:07:05Z"}, "message": "expr.c (store_constructor_field): Add prototype.\n\n        * expr.c (store_constructor_field): Add prototype.\n        (memory_use_mode): Likewise.\n        * expmed.c (synth_mult): Add prototype.\n        (choose_multiplier, invert_mod2n): Likewise.\n\nFrom-SVN: r19250", "tree": {"sha": "259f043fcac33e1457c5aba5b29b3ba0ba1ab5e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/259f043fcac33e1457c5aba5b29b3ba0ba1ab5e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d77fac3be28ceefab764590a51a07cd6d0af3492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d77fac3be28ceefab764590a51a07cd6d0af3492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d77fac3be28ceefab764590a51a07cd6d0af3492", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d77fac3be28ceefab764590a51a07cd6d0af3492/comments", "author": null, "committer": null, "parents": [{"sha": "242c13b000c85528a7bc8db97ad9a1bc325ce022", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/242c13b000c85528a7bc8db97ad9a1bc325ce022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/242c13b000c85528a7bc8db97ad9a1bc325ce022"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "6e01c929a3e92b2f31d9612ab96b91708eb72c36", "filename": "gcc/expmed.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d77fac3be28ceefab764590a51a07cd6d0af3492/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d77fac3be28ceefab764590a51a07cd6d0af3492/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=d77fac3be28ceefab764590a51a07cd6d0af3492", "patch": "@@ -1914,6 +1914,15 @@ struct algorithm\n   char log[MAX_BITS_PER_WORD];\n };\n \n+static void synth_mult\t\t\tPROTO((struct algorithm *,\n+\t\t\t\t\t       unsigned HOST_WIDE_INT,\n+\t\t\t\t\t       int));\n+static unsigned HOST_WIDE_INT choose_multiplier PROTO((unsigned HOST_WIDE_INT,\n+\t\t\t\t\t\t       int, int,\n+\t\t\t\t\t\t       unsigned HOST_WIDE_INT *,\n+\t\t\t\t\t\t       int *, int *));\n+static unsigned HOST_WIDE_INT invert_mod2n\tPROTO((unsigned HOST_WIDE_INT,\n+\t\t\t\t\t\t       int));\n /* Compute and return the best algorithm for multiplying by T.\n    The algorithm must cost less than cost_limit\n    If retval.cost >= COST_LIMIT, no algorithm was found and all"}, {"sha": "d42f6345d0c6afa5b7341c9681fdaf2f3522f11c", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d77fac3be28ceefab764590a51a07cd6d0af3492/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d77fac3be28ceefab764590a51a07cd6d0af3492/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d77fac3be28ceefab764590a51a07cd6d0af3492", "patch": "@@ -164,9 +164,12 @@ static void clear_by_pieces_1\tPROTO((rtx (*) (rtx, ...), enum machine_mode,\n \t\t\t\t       struct clear_by_pieces *));\n static int is_zeros_p\t\tPROTO((tree));\n static int mostly_zeros_p\tPROTO((tree));\n+static void store_constructor_field PROTO((rtx, int, int, enum machine_mode,\n+\t\t\t\t\t   tree, tree, int));\n static void store_constructor\tPROTO((tree, rtx, int));\n static rtx store_field\t\tPROTO((rtx, int, int, enum machine_mode, tree,\n \t\t\t\t       enum machine_mode, int, int, int));\n+static enum memory_use_mode\tPROTO((enum expand_modifier));\n static tree save_noncopied_parts PROTO((tree, tree));\n static tree init_noncopied_parts PROTO((tree, tree));\n static int safe_from_p\t\tPROTO((rtx, tree, int));"}]}