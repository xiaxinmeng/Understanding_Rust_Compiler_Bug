{"sha": "e1a5e7562d53a8d2256f754714b06595bea72196", "node_id": "C_kwDOANBUbNoAKGUxYTVlNzU2MmQ1M2E4ZDIyNTZmNzU0NzE0YjA2NTk1YmVhNzIxOTY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-06T09:43:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-06T11:15:35Z"}, "message": "tree-optimization/105173 - fix insertion logic in reassoc\n\nThe find_insert_point logic around deciding whether to insert\nbefore or after the found insertion point does not handle\nthe case of _12 = ..;, _12, 1.0 well.  The following puts the\nlogic into find_insert_point itself instead.\n\n2022-04-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/105173\n\t* tree-ssa-reassoc.cc (find_insert_point): Get extra\n\tinsert_before output argument and compute it.\n\t(insert_stmt_before_use): Adjust.\n\t(rewrite_expr_tree): Likewise.\n\n\t* gcc.dg/pr105173.c: New testcase.", "tree": {"sha": "885d2af63d488361b01ba5ca6d73b9df57257b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/885d2af63d488361b01ba5ca6d73b9df57257b8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1a5e7562d53a8d2256f754714b06595bea72196", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a5e7562d53a8d2256f754714b06595bea72196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1a5e7562d53a8d2256f754714b06595bea72196", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a5e7562d53a8d2256f754714b06595bea72196/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be08315124281f4e9359bc7e5279a99bdbdd053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be08315124281f4e9359bc7e5279a99bdbdd053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be08315124281f4e9359bc7e5279a99bdbdd053"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "3effb2996b0474adea0d69cf016459bd72b85183", "filename": "gcc/testsuite/gcc.dg/pr105173.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a5e7562d53a8d2256f754714b06595bea72196/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105173.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a5e7562d53a8d2256f754714b06595bea72196/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105173.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105173.c?ref=e1a5e7562d53a8d2256f754714b06595bea72196", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target dfp } } */\n+/* { dg-options \"-Ofast\" } */\n+\n+int i;\n+\n+int\n+foo(char c, _Decimal32 d)\n+{\n+  d *= i;\n+  d *= -(_Decimal64)c;\n+  return d;\n+}"}, {"sha": "4ab3c3361f90661e43ace80cfee63105d7d4e3a5", "filename": "gcc/tree-ssa-reassoc.cc", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a5e7562d53a8d2256f754714b06595bea72196/gcc%2Ftree-ssa-reassoc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a5e7562d53a8d2256f754714b06595bea72196/gcc%2Ftree-ssa-reassoc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.cc?ref=e1a5e7562d53a8d2256f754714b06595bea72196", "patch": "@@ -5185,17 +5185,26 @@ swap_ops_for_binary_stmt (const vec<operand_entry *> &ops,\n }\n \n /* If definition of RHS1 or RHS2 dominates STMT, return the later of those\n-   two definitions, otherwise return STMT.  */\n+   two definitions, otherwise return STMT.  Sets INSERT_BEFORE to indicate\n+   whether RHS1 op RHS2 can be inserted before or needs to be inserted\n+   after the returned stmt.  */\n \n static inline gimple *\n-find_insert_point (gimple *stmt, tree rhs1, tree rhs2)\n+find_insert_point (gimple *stmt, tree rhs1, tree rhs2, bool &insert_before)\n {\n+  insert_before = true;\n   if (TREE_CODE (rhs1) == SSA_NAME\n       && reassoc_stmt_dominates_stmt_p (stmt, SSA_NAME_DEF_STMT (rhs1)))\n-    stmt = SSA_NAME_DEF_STMT (rhs1);\n+    {\n+      stmt = SSA_NAME_DEF_STMT (rhs1);\n+      insert_before = false;\n+    }\n   if (TREE_CODE (rhs2) == SSA_NAME\n       && reassoc_stmt_dominates_stmt_p (stmt, SSA_NAME_DEF_STMT (rhs2)))\n-    stmt = SSA_NAME_DEF_STMT (rhs2);\n+    {\n+      stmt = SSA_NAME_DEF_STMT (rhs2);\n+      insert_before = false;\n+    }\n   return stmt;\n }\n \n@@ -5207,15 +5216,16 @@ insert_stmt_before_use (gimple *stmt, gimple *stmt_to_insert)\n   gcc_assert (is_gimple_assign (stmt_to_insert));\n   tree rhs1 = gimple_assign_rhs1 (stmt_to_insert);\n   tree rhs2 = gimple_assign_rhs2 (stmt_to_insert);\n-  gimple *insert_point = find_insert_point (stmt, rhs1, rhs2);\n+  bool insert_before;\n+  gimple *insert_point = find_insert_point (stmt, rhs1, rhs2, insert_before);\n   gimple_stmt_iterator gsi = gsi_for_stmt (insert_point);\n   gimple_set_uid (stmt_to_insert, gimple_uid (insert_point));\n \n   /* If the insert point is not stmt, then insert_point would be\n      the point where operand rhs1 or rhs2 is defined. In this case,\n      stmt_to_insert has to be inserted afterwards. This would\n      only happen when the stmt insertion point is flexible. */\n-  if (stmt == insert_point)\n+  if (insert_before)\n     gsi_insert_before (&gsi, stmt_to_insert, GSI_NEW_STMT);\n   else\n     insert_stmt_after (stmt_to_insert, insert_point);\n@@ -5275,22 +5285,25 @@ rewrite_expr_tree (gimple *stmt, enum tree_code rhs_code, unsigned int opindex,\n \t     return lhs), force creation of a new SSA_NAME.  */\n \t  if (changed || ((rhs1 != oe2->op || rhs2 != oe1->op) && opindex))\n \t    {\n+\t      bool insert_before;\n \t      gimple *insert_point\n-\t\t= find_insert_point (stmt, oe1->op, oe2->op);\n+\t\t= find_insert_point (stmt, oe1->op, oe2->op, insert_before);\n \t      lhs = make_ssa_name (TREE_TYPE (lhs));\n \t      stmt\n \t\t= gimple_build_assign (lhs, rhs_code,\n \t\t\t\t       oe1->op, oe2->op);\n \t      gimple_set_uid (stmt, uid);\n \t      gimple_set_visited (stmt, true);\n-\t      if (insert_point == gsi_stmt (gsi))\n+\t      if (insert_before)\n \t\tgsi_insert_before (&gsi, stmt, GSI_SAME_STMT);\n \t      else\n \t\tinsert_stmt_after (stmt, insert_point);\n \t    }\n \t  else\n \t    {\n-\t      gcc_checking_assert (find_insert_point (stmt, oe1->op, oe2->op)\n+\t      bool insert_before;\n+\t      gcc_checking_assert (find_insert_point (stmt, oe1->op, oe2->op,\n+\t\t\t\t\t\t      insert_before)\n \t\t\t\t   == stmt);\n \t      gimple_assign_set_rhs1 (stmt, oe1->op);\n \t      gimple_assign_set_rhs2 (stmt, oe2->op);\n@@ -5346,21 +5359,25 @@ rewrite_expr_tree (gimple *stmt, enum tree_code rhs_code, unsigned int opindex,\n \t{\n \t  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n \t  unsigned int uid = gimple_uid (stmt);\n-\t  gimple *insert_point = find_insert_point (stmt, new_rhs1, oe->op);\n+\t  bool insert_before;\n+\t  gimple *insert_point = find_insert_point (stmt, new_rhs1, oe->op,\n+\t\t\t\t\t\t    insert_before);\n \n \t  lhs = make_ssa_name (TREE_TYPE (lhs));\n \t  stmt = gimple_build_assign (lhs, rhs_code,\n \t\t\t\t      new_rhs1, oe->op);\n \t  gimple_set_uid (stmt, uid);\n \t  gimple_set_visited (stmt, true);\n-\t  if (insert_point == gsi_stmt (gsi))\n+\t  if (insert_before)\n \t    gsi_insert_before (&gsi, stmt, GSI_SAME_STMT);\n \t  else\n \t    insert_stmt_after (stmt, insert_point);\n \t}\n       else\n \t{\n-\t  gcc_checking_assert (find_insert_point (stmt, new_rhs1, oe->op)\n+\t  bool insert_before;\n+\t  gcc_checking_assert (find_insert_point (stmt, new_rhs1, oe->op,\n+\t\t\t\t\t\t  insert_before)\n \t\t\t       == stmt);\n \t  gimple_assign_set_rhs1 (stmt, new_rhs1);\n \t  gimple_assign_set_rhs2 (stmt, oe->op);"}]}