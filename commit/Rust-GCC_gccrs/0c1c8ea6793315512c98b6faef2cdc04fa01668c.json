{"sha": "0c1c8ea6793315512c98b6faef2cdc04fa01668c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMxYzhlYTY3OTMzMTU1MTJjOThiNmZhZWYyY2RjMDRmYTAxNjY4Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-08T15:46:25Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-08T15:46:25Z"}, "message": "(gen_unary): Add new arg, OP0_MODE.\n\nAll callers changed.\n\nFrom-SVN: r7678", "tree": {"sha": "a468be87771bd9b7f3d74146d8855b5a9e63b600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a468be87771bd9b7f3d74146d8855b5a9e63b600"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c1c8ea6793315512c98b6faef2cdc04fa01668c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c1c8ea6793315512c98b6faef2cdc04fa01668c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c1c8ea6793315512c98b6faef2cdc04fa01668c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c1c8ea6793315512c98b6faef2cdc04fa01668c/comments", "author": null, "committer": null, "parents": [{"sha": "1c1a7ba4b459560933628c9e0da4402f99a7dc9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c1a7ba4b459560933628c9e0da4402f99a7dc9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c1a7ba4b459560933628c9e0da4402f99a7dc9b"}], "stats": {"total": 71, "additions": 39, "deletions": 32}, "files": [{"sha": "991db28cd0cf9590c069bd48e66215f66be15678", "filename": "gcc/combine.c", "status": "modified", "additions": 39, "deletions": 32, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c1c8ea6793315512c98b6faef2cdc04fa01668c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c1c8ea6793315512c98b6faef2cdc04fa01668c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=0c1c8ea6793315512c98b6faef2cdc04fa01668c", "patch": "@@ -423,7 +423,8 @@ static rtx gen_rtx_combine PVPROTO((enum rtx_code code, enum machine_mode mode,\n \t\t\t\t  ...));\n static rtx gen_binary\t\tPROTO((enum rtx_code, enum machine_mode,\n \t\t\t\t       rtx, rtx));\n-static rtx gen_unary\t\tPROTO((enum rtx_code, enum machine_mode, rtx));\n+static rtx gen_unary\t\tPROTO((enum rtx_code, enum machine_mode,\n+\t\t\t\t       enum machine_mode, rtx));\n static enum rtx_code simplify_comparison  PROTO((enum rtx_code, rtx *, rtx *));\n static int reversible_comparison_p  PROTO((rtx));\n static void update_table_tick\tPROTO((rtx));\n@@ -3015,12 +3016,12 @@ simplify_rtx (x, op0_mode, last, in_dest)\n \t  else if (GET_CODE (true) == CONST_INT\n \t\t   && INTVAL (true) == - STORE_FLAG_VALUE\n \t\t   && false == const0_rtx)\n-\t    x = gen_unary (NEG, mode,\n+\t    x = gen_unary (NEG, mode, mode,\n \t\t\t   gen_binary (cond_code, mode, cond, cop1));\n \t  else if (GET_CODE (false) == CONST_INT\n \t\t   && INTVAL (false) == - STORE_FLAG_VALUE\n \t\t   && true == const0_rtx)\n-\t    x = gen_unary (NEG, mode,\n+\t    x = gen_unary (NEG, mode, mode,\n \t\t\t   gen_binary (reverse_condition (cond_code), \n \t\t\t\t       mode, cond, cop1));\n \t  else\n@@ -3271,7 +3272,7 @@ simplify_rtx (x, op0_mode, last, in_dest)\n \t but this doesn't seem common enough to bother with.  */\n       if (GET_CODE (XEXP (x, 0)) == ASHIFT\n \t  && XEXP (XEXP (x, 0), 0) == const1_rtx)\n-\treturn gen_rtx (ROTATE, mode, gen_unary (NOT, mode, const1_rtx),\n+\treturn gen_rtx (ROTATE, mode, gen_unary (NOT, mode, mode, const1_rtx),\n \t\t\tXEXP (XEXP (x, 0), 1));\n \t\t\t\t\t    \n       if (GET_CODE (XEXP (x, 0)) == SUBREG\n@@ -3284,7 +3285,7 @@ simplify_rtx (x, op0_mode, last, in_dest)\n \t  enum machine_mode inner_mode = GET_MODE (SUBREG_REG (XEXP (x, 0)));\n \n \t  x = gen_rtx (ROTATE, inner_mode,\n-\t\t       gen_unary (NOT, inner_mode, const1_rtx),\n+\t\t       gen_unary (NOT, inner_mode, inner_mode, const1_rtx),\n \t\t       XEXP (SUBREG_REG (XEXP (x, 0)), 1));\n \t  return gen_lowpart_for_combine (mode, x);\n \t}\n@@ -3433,8 +3434,8 @@ simplify_rtx (x, op0_mode, last, in_dest)\n \t   || GET_CODE (XEXP (x, 0)) == NEG)\n \t  && GET_CODE (XEXP (XEXP (x, 0), 0)) == FLOAT_EXTEND\n \t  && GET_MODE (XEXP (XEXP (XEXP (x, 0), 0), 0)) == mode)\n-\treturn gen_unary (GET_CODE (XEXP (x, 0)),\n-\t\t\t  mode, XEXP (XEXP (XEXP (x, 0), 0), 0));\n+\treturn gen_unary (GET_CODE (XEXP (x, 0)), mode, mode,\n+\t\t\t  XEXP (XEXP (XEXP (x, 0), 0), 0));\n       break;  \n \n #ifdef HAVE_cc0\n@@ -3518,7 +3519,7 @@ simplify_rtx (x, op0_mode, last, in_dest)\n \t  && ((STORE_FLAG_VALUE == -1 && XEXP (x, 1) == const1_rtx)\n \t      || (STORE_FLAG_VALUE == 1 && XEXP (x, 1) == constm1_rtx)))\n \treturn\n-\t  gen_unary (NEG, mode,\n+\t  gen_unary (NEG, mode, mode,\n \t\t     gen_binary (reverse_condition (GET_CODE (XEXP (x, 0))),\n \t\t\t\t mode, XEXP (XEXP (x, 0), 0),\n \t\t\t\t XEXP (XEXP (x, 0), 1)));\n@@ -3659,7 +3660,7 @@ simplify_rtx (x, op0_mode, last, in_dest)\n \t\t       == GET_MODE_BITSIZE (mode)))\n \t    {\n \t      op0 = expand_compound_operation (op0);\n-\t      return gen_unary (NEG, mode,\n+\t      return gen_unary (NEG, mode, mode,\n \t\t\t\tgen_lowpart_for_combine (mode, op0));\n \t    }\n \n@@ -3698,7 +3699,7 @@ simplify_rtx (x, op0_mode, last, in_dest)\n \t\t   && nonzero_bits (op0, mode) == 1)\n \t    {\n \t      op0 = expand_compound_operation (op0);\n-\t      return gen_unary (NEG, mode,\n+\t      return gen_unary (NEG, mode, mode,\n \t\t\t\tgen_lowpart_for_combine (mode, op0));\n \t    }\n \n@@ -3708,7 +3709,7 @@ simplify_rtx (x, op0_mode, last, in_dest)\n \t\t       == GET_MODE_BITSIZE (mode)))\n \t    {\n \t      op0 = expand_compound_operation (op0);\n-\t      return gen_unary (NOT, mode,\n+\t      return gen_unary (NOT, mode, mode,\n \t\t\t\tgen_lowpart_for_combine (mode, op0));\n \t    }\n \n@@ -3961,10 +3962,10 @@ simplify_if_then_else (x)\n       {\n       case GT:\n       case GE:\n-\treturn gen_unary (ABS, mode, true);\n+\treturn gen_unary (ABS, mode, mode, true);\n       case LT:\n       case LE:\n-\treturn gen_unary (NEG, mode, gen_unary (ABS, mode, true));\n+\treturn gen_unary (NEG, mode, mode, gen_unary (ABS, mode, mode, true));\n       }\n \n   /* Look for MIN or MAX.  */\n@@ -4103,7 +4104,7 @@ simplify_if_then_else (x)\n \t  temp = gen_binary (op, m, gen_lowpart_for_combine (m, z), temp);\n \n \t  if (extend_op != NIL)\n-\t    temp = gen_unary (extend_op, mode, temp);\n+\t    temp = gen_unary (extend_op, mode, m, temp);\n \n \t  return temp;\n \t}\n@@ -4377,7 +4378,7 @@ simplify_set (x)\n \n       term2 = gen_binary (AND, GET_MODE (src), XEXP (XEXP (src, 0), 0), true);\n       term3 = gen_binary (AND, GET_MODE (src),\n-\t\t\t  gen_unary (NOT, GET_MODE (src),\n+\t\t\t  gen_unary (NOT, GET_MODE (src), GET_MODE (src),\n \t\t\t\t     XEXP (XEXP (src, 0), 0)),\n \t\t\t  false);\n \n@@ -4420,12 +4421,14 @@ simplify_logical (x, last)\n       if (GET_CODE (op0) == XOR\n \t  && rtx_equal_p (XEXP (op0, 0), op1)\n \t  && ! side_effects_p (op1))\n-\tx = gen_binary (AND, mode, gen_unary (NOT, mode, XEXP (op0, 1)), op1);\n+\tx = gen_binary (AND, mode,\n+\t\t\tgen_unary (NOT, mode, mode, XEXP (op0, 1)), op1);\n \n       if (GET_CODE (op0) == XOR\n \t  && rtx_equal_p (XEXP (op0, 1), op1)\n \t  && ! side_effects_p (op1))\n-\tx = gen_binary (AND, mode, gen_unary (NOT, mode, XEXP (op0, 0)), op1);\n+\tx = gen_binary (AND, mode,\n+\t\t\tgen_unary (NOT, mode, mode, XEXP (op0, 0)), op1);\n \n       /* Similarly for (~ (A ^ B)) & A.  */\n       if (GET_CODE (op0) == NOT\n@@ -4611,7 +4614,7 @@ simplify_logical (x, last)\n \t    SUBST (XEXP (x, 1), op1);\n \t  }\n \telse if (num_negated == 1)\n-\t  return gen_unary (NOT, mode, gen_binary (XOR, mode, op0, op1));\n+\t  return gen_unary (NOT, mode, mode, gen_binary (XOR, mode, op0, op1));\n       }\n \n       /* Convert (xor (and A B) B) to (and (not A) B).  The latter may\n@@ -4621,13 +4624,15 @@ simplify_logical (x, last)\n       if (GET_CODE (op0) == AND\n \t  && rtx_equal_p (XEXP (op0, 1), op1)\n \t  && ! side_effects_p (op1))\n-\treturn gen_binary (AND, mode, gen_unary (NOT, mode, XEXP (op0, 0)),\n+\treturn gen_binary (AND, mode,\n+\t\t\t   gen_unary (NOT, mode, mode, XEXP (op0, 0)),\n \t\t\t   op1);\n \n       else if (GET_CODE (op0) == AND\n \t       && rtx_equal_p (XEXP (op0, 0), op1)\n \t       && ! side_effects_p (op1))\n-\treturn gen_binary (AND, mode, gen_unary (NOT, mode, XEXP (op0, 1)),\n+\treturn gen_binary (AND, mode,\n+\t\t\t   gen_unary (NOT, mode, mode, XEXP (op0, 1)),\n \t\t\t   op1);\n \n #if STORE_FLAG_VALUE == 1\n@@ -4892,6 +4897,7 @@ expand_field_assignment (x)\n \t\t   gen_binary (IOR, compute_mode,\n \t\t\t       gen_binary (AND, compute_mode,\n \t\t\t\t\t   gen_unary (NOT, compute_mode,\n+\t\t\t\t\t\t      compute_mode,\n \t\t\t\t\t\t      gen_binary (ASHIFT,\n \t\t\t\t\t\t\t\t  compute_mode,\n \t\t\t\t\t\t\t\t  mask, pos)),\n@@ -5261,7 +5267,7 @@ extract_left_shift (x, count)\n \n     case NEG:  case NOT:\n       if ((tem = extract_left_shift (XEXP (x, 0), count)) != 0)\n-\treturn gen_unary (code, mode, tem);\n+\treturn gen_unary (code, mode, mode, tem);\n \n       break;\n \n@@ -6015,7 +6021,7 @@ force_to_mode (x, mode, mask, reg, just_select)\n \t\t\t\t     force_to_mode (XEXP (x, 0), mode, mask,\n \t\t\t\t\t\t    reg, next_select));\n       if (op_mode != GET_MODE (x) || op0 != XEXP (x, 0))\n-\tx = gen_unary (code, op_mode, op0);\n+\tx = gen_unary (code, op_mode, op_mode, op0);\n       break;\n \n     case NE:\n@@ -6070,8 +6076,8 @@ if_then_else_cond (x, ptrue, pfalse)\n   if (GET_RTX_CLASS (code) == '1'\n       && (cond0 = if_then_else_cond (XEXP (x, 0), &true0, &false0)) != 0)\n     {\n-      *ptrue = gen_unary (code, mode, true0);\n-      *pfalse = gen_unary (code, mode, false0);\n+      *ptrue = gen_unary (code, mode, GET_MODE (XEXP (x, 0)), true0);\n+      *pfalse = gen_unary (code, mode, GET_MODE (XEXP (x, 0)), false0);\n       return cond0;\n     }\n \n@@ -6127,7 +6133,7 @@ if_then_else_cond (x, ptrue, pfalse)\n \t      *ptrue = gen_binary (MULT, mode, op0, const_true_rtx);\n \t      *pfalse = gen_binary (MULT, mode, \n \t\t\t\t    (code == MINUS \n-\t\t\t\t     ? gen_unary (NEG, mode, op1) : op1),\n+\t\t\t\t     ? gen_unary (NEG, mode, mode, op1) : op1),\n \t\t\t\t    const_true_rtx);\n \t      return cond0;\n \t    }\n@@ -6253,7 +6259,8 @@ known_cond (x, cond, reg, val)\n       case GE:  case GT:  case EQ:\n \treturn XEXP (x, 0);\n       case LT:  case LE:\n-\treturn gen_unary (NEG, GET_MODE (XEXP (x, 0)), XEXP (x, 0));\n+\treturn gen_unary (NEG, GET_MODE (XEXP (x, 0)), GET_MODE (XEXP (x, 0)),\n+\t\t\t  XEXP (x, 0));\n       }\n \n   /* The only other cases we handle are MIN, MAX, and comparisons if the\n@@ -6536,7 +6543,7 @@ apply_distributive_law (x)\n   if (code == XOR && inner_code == IOR)\n     {\n       inner_code = AND;\n-      other = gen_unary (NOT, GET_MODE (x), other);\n+      other = gen_unary (NOT, GET_MODE (x), GET_MODE (x), other);\n     }\n \n   /* We may be able to continuing distributing the result, so call\n@@ -8105,7 +8112,7 @@ simplify_shift_const (x, code, result_mode, varop, count)\n   /* If COMPLEMENT_P is set, we have to complement X before doing the outer\n      operation.  */\n   if (complement_p)\n-    x = gen_unary (NOT, result_mode, x);\n+    x = gen_unary (NOT, result_mode, result_mode, x);\n \n   if (outer_op != NIL)\n     {\n@@ -8119,7 +8126,7 @@ simplify_shift_const (x, code, result_mode, varop, count)\n \t   equivalent to a constant.  This should be rare.  */\n \tx = GEN_INT (outer_const);\n       else if (GET_RTX_CLASS (outer_op) == '1')\n-\tx = gen_unary (outer_op, result_mode, x);\n+\tx = gen_unary (outer_op, result_mode, result_mode, x);\n       else\n \tx = gen_binary (outer_op, result_mode, x, GEN_INT (outer_const));\n     }\n@@ -8451,12 +8458,12 @@ gen_binary (code, mode, op0, op1)\n }\n \n static rtx\n-gen_unary (code, mode, op0)\n+gen_unary (code, mode, op0_mode, op0)\n      enum rtx_code code;\n-     enum machine_mode mode;\n+     enum machine_mode mode, op0_mode;\n      rtx op0;\n {\n-  rtx result = simplify_unary_operation (code, mode, op0, mode);\n+  rtx result = simplify_unary_operation (code, mode, op0, op0_mode);\n \n   if (result)\n     return result;"}]}