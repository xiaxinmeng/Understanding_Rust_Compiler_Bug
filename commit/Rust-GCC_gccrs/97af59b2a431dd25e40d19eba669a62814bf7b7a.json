{"sha": "97af59b2a431dd25e40d19eba669a62814bf7b7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdhZjU5YjJhNDMxZGQyNWU0MGQxOWViYTY2OWE2MjgxNGJmN2I3YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-08-05T07:48:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-08-05T07:48:34Z"}, "message": "re PR tree-optimization/67109 (ICE at -O3 on x86_64-linux-gnu in vect_analyze_slp_instance, at tree-vect-slp.c:1793)\n\n2015-08-05  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/67109\n\t* tree-vect-data-refs.c (vect_analyze_group_access_1): Check\n\tagainst too big groups.  Print whether this is a load or store\n\tgroup.  Rename from ...\n\t(vect_analyze_group_access): ... this which is now a wrapper\n\tdissolving an invalid group.\n\t(vect_analyze_data_ref_accesses): Print whether this is a load\n\tor store group.\n\n\t* gcc.dg/torture/pr67109.c: New testcase.\n\t* gcc.dg/vect/vect-119.c: Adjust.\n\nFrom-SVN: r226610", "tree": {"sha": "cd54eb93bd09d18e6061869b8f7c6413744ad1bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd54eb93bd09d18e6061869b8f7c6413744ad1bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97af59b2a431dd25e40d19eba669a62814bf7b7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97af59b2a431dd25e40d19eba669a62814bf7b7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97af59b2a431dd25e40d19eba669a62814bf7b7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97af59b2a431dd25e40d19eba669a62814bf7b7a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f980c9a2622743e44456727a13c612b1c520c7f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f980c9a2622743e44456727a13c612b1c520c7f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f980c9a2622743e44456727a13c612b1c520c7f4"}], "stats": {"total": 92, "additions": 85, "deletions": 7}, "files": [{"sha": "bafabb449fe2035d700622cd9fb5d5587a4f700f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97af59b2a431dd25e40d19eba669a62814bf7b7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97af59b2a431dd25e40d19eba669a62814bf7b7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97af59b2a431dd25e40d19eba669a62814bf7b7a", "patch": "@@ -1,3 +1,14 @@\n+2015-08-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/67109\n+\t* tree-vect-data-refs.c (vect_analyze_group_access_1): Check\n+\tagainst too big groups.  Print whether this is a load or store\n+\tgroup.  Rename from ...\n+\t(vect_analyze_group_access): ... this which is now a wrapper\n+\tdissolving an invalid group.\n+\t(vect_analyze_data_ref_accesses): Print whether this is a load\n+\tor store group.\n+\n 2015-08-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/67107"}, {"sha": "82aa267d42dd696e171d130e30e34a91b2b7f3ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97af59b2a431dd25e40d19eba669a62814bf7b7a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97af59b2a431dd25e40d19eba669a62814bf7b7a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=97af59b2a431dd25e40d19eba669a62814bf7b7a", "patch": "@@ -1,3 +1,9 @@\n+2015-08-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/67109\n+\t* gcc.dg/torture/pr67109.c: New testcase.\n+\t* gcc.dg/vect/vect-119.c: Adjust.\n+\n 2015-08-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/67107"}, {"sha": "46df1bfa54f3a62625a79f7834a88ebbf58b0ace", "filename": "gcc/testsuite/gcc.dg/torture/pr67109.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97af59b2a431dd25e40d19eba669a62814bf7b7a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67109.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97af59b2a431dd25e40d19eba669a62814bf7b7a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67109.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67109.c?ref=97af59b2a431dd25e40d19eba669a62814bf7b7a", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-aggressive-loop-optimizations\" } */\n+\n+unsigned int a;\n+int b[1], c, d;\n+\n+void\n+fn1 ()\n+{\n+  for (; d;)\n+    {\n+      a = c = 0;\n+      for (; c < 5; c++)\n+\t{\n+\t  b[a] ^= 1;\n+\t  a--;\n+\t}\n+    }\n+}"}, {"sha": "aa8c3002bff10ea1d0bc9c0389dfcd8a115a8cf0", "filename": "gcc/testsuite/gcc.dg/vect/vect-119.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97af59b2a431dd25e40d19eba669a62814bf7b7a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-119.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97af59b2a431dd25e40d19eba669a62814bf7b7a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-119.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-119.c?ref=97af59b2a431dd25e40d19eba669a62814bf7b7a", "patch": "@@ -25,4 +25,4 @@ unsigned int foo (const unsigned int x[OUTER][INNER][2])\n   return sum;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Detected interleaving of size 2\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Detected interleaving load of size 2\" 1 \"vect\" } } */"}, {"sha": "f1eaef400486ab12ec53d675660dc28183668c3f", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97af59b2a431dd25e40d19eba669a62814bf7b7a/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97af59b2a431dd25e40d19eba669a62814bf7b7a/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=97af59b2a431dd25e40d19eba669a62814bf7b7a", "patch": "@@ -2012,10 +2012,11 @@ vect_analyze_data_refs_alignment (loop_vec_info loop_vinfo,\n /* Analyze groups of accesses: check that DR belongs to a group of\n    accesses of legal size, step, etc.  Detect gaps, single element\n    interleaving, and other special cases. Set grouped access info.\n-   Collect groups of strided stores for further use in SLP analysis.  */\n+   Collect groups of strided stores for further use in SLP analysis.\n+   Worker for vect_analyze_group_access.  */\n \n static bool\n-vect_analyze_group_access (struct data_reference *dr)\n+vect_analyze_group_access_1 (struct data_reference *dr)\n {\n   tree step = DR_STEP (dr);\n   tree scalar_type = TREE_TYPE (DR_REF (dr));\n@@ -2182,6 +2183,14 @@ vect_analyze_group_access (struct data_reference *dr)\n       if (groupsize == 0)\n         groupsize = count + gaps;\n \n+      if (groupsize > UINT_MAX)\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"group is too large\\n\");\n+\t  return false;\n+\t}\n+\n       /* Check that the size of the interleaving is equal to count for stores,\n          i.e., that there are no gaps.  */\n       if (groupsize != count\n@@ -2203,13 +2212,18 @@ vect_analyze_group_access (struct data_reference *dr)\n       if (dump_enabled_p ())\n \t{\n \t  dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t   \"Detected interleaving of size %d starting with \",\n-\t\t\t   (int)groupsize);\n+\t\t\t   \"Detected interleaving \");\n+\t  if (DR_IS_READ (dr))\n+\t    dump_printf (MSG_NOTE, \"load \");\n+\t  else\n+\t    dump_printf (MSG_NOTE, \"store \");\n+\t  dump_printf (MSG_NOTE, \"of size %u starting with \",\n+\t\t       (unsigned)groupsize);\n \t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt, 0);\n \t  if (GROUP_GAP (vinfo_for_stmt (stmt)) != 0)\n \t    dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t     \"There is a gap of %d elements after the group\\n\",\n-\t\t\t     (int)GROUP_GAP (vinfo_for_stmt (stmt)));\n+\t\t\t     \"There is a gap of %u elements after the group\\n\",\n+\t\t\t     GROUP_GAP (vinfo_for_stmt (stmt)));\n \t}\n \n       /* SLP: create an SLP data structure for every interleaving group of\n@@ -2249,6 +2263,30 @@ vect_analyze_group_access (struct data_reference *dr)\n   return true;\n }\n \n+/* Analyze groups of accesses: check that DR belongs to a group of\n+   accesses of legal size, step, etc.  Detect gaps, single element\n+   interleaving, and other special cases. Set grouped access info.\n+   Collect groups of strided stores for further use in SLP analysis.  */\n+\n+static bool\n+vect_analyze_group_access (struct data_reference *dr)\n+{\n+  if (!vect_analyze_group_access_1 (dr))\n+    {\n+      /* Dissolve the group if present.  */\n+      gimple next, stmt = GROUP_FIRST_ELEMENT (vinfo_for_stmt (DR_STMT (dr)));\n+      while (stmt)\n+\t{\n+\t  stmt_vec_info vinfo = vinfo_for_stmt (stmt);\n+\t  next = GROUP_NEXT_ELEMENT (vinfo);\n+\t  GROUP_FIRST_ELEMENT (vinfo) = NULL;\n+\t  GROUP_NEXT_ELEMENT (vinfo) = NULL;\n+\t  stmt = next;\n+\t}\n+      return false;\n+    }\n+  return true;\n+}\n \n /* Analyze the access pattern of the data-reference DR.\n    In case of non-consecutive accesses call vect_analyze_group_access() to\n@@ -2598,6 +2636,10 @@ vect_analyze_data_ref_accesses (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n \t    {\n \t      dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t       \"Detected interleaving \");\n+\t      if (DR_IS_READ (dra))\n+\t\tdump_printf (MSG_NOTE, \"load \");\n+\t      else\n+\t\tdump_printf (MSG_NOTE, \"store \");\n \t      dump_generic_expr (MSG_NOTE, TDF_SLIM, DR_REF (dra));\n \t      dump_printf (MSG_NOTE,  \" and \");\n \t      dump_generic_expr (MSG_NOTE, TDF_SLIM, DR_REF (drb));"}]}