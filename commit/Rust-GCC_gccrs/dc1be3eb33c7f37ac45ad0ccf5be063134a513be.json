{"sha": "dc1be3eb33c7f37ac45ad0ccf5be063134a513be", "node_id": "C_kwDOANBUbNoAKGRjMWJlM2ViMzNjN2YzN2FjNDVhZDBjY2Y1YmUwNjMxMzRhNTEzYmU", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2023-02-16T19:21:50Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2023-03-03T03:32:12Z"}, "message": "testsuite: Tweak gcc.dg/attr-aligned.c for CRIS\n\ntm.texi says for BIGGEST_ALIGNMENT (from which\n__BIGGEST_ALIGNMENT__ is derived): \"Biggest alignment that\nany data type can require on this machine, in bits.\"\n\nThat is, using that value might be too strict for alignment\nof *functions* and CRIS requires at least 16-bit alignment\nfor functions.  But, one purpose of the test is to test that\nalignment can be set to a large but valid value, so pick\n512, which has some use as a historically required alignment\nfor certain I/O descriptors.\n\n\t* gcc.dg/attr-aligned.c: Adjust comment for ALIGN_MAX_STATIC.\n\t(ALIGN_MAX_STATIC): Set to 512 for CRIS.", "tree": {"sha": "76ba79cffbea37126770e4fe557957c7ffff9ddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76ba79cffbea37126770e4fe557957c7ffff9ddc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc1be3eb33c7f37ac45ad0ccf5be063134a513be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc1be3eb33c7f37ac45ad0ccf5be063134a513be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc1be3eb33c7f37ac45ad0ccf5be063134a513be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc1be3eb33c7f37ac45ad0ccf5be063134a513be/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/929c6b8cd12a3bd338a4c250274a9d86da5b2ea7"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "4f0c885dc812565869c953bb305a45631db8d905", "filename": "gcc/testsuite/gcc.dg/attr-aligned.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc1be3eb33c7f37ac45ad0ccf5be063134a513be/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-aligned.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc1be3eb33c7f37ac45ad0ccf5be063134a513be/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-aligned.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-aligned.c?ref=dc1be3eb33c7f37ac45ad0ccf5be063134a513be", "patch": "@@ -18,6 +18,10 @@\n # else\n #   define ALIGN_MAX_STATIC      ALIGN_MAX_HARD\n # endif\n+#elif __CRIS__\n+/* __BIGGEST_ALIGNMENT__ doesn't cover functions (16 bits for CRIS). */\n+#  define ALIGN_MAX_STATIC      512\n+#  define ALIGN_TOO_BIG_OFILE   (ALIGN_MAX_HARD << 1)\n #elif pdp11\n #  define ALIGN_MAX_STATIC      2\n /* Work around a pdp11 ICE (see PR target/87821).  */\n@@ -29,7 +33,9 @@\n /* Is this processor- or operating-system specific?  */\n #  define ALIGN_MAX_STATIC      ALIGN_MAX_HARD\n #else\n-   /* Guaranteed to be accepted regardless of the target.  */\n+   /* Guaranteed to be accepted regardless of the target for objects.\n+      This might not be true for alignment of functions though, so\n+      may need to be set to a target-specific value above.  */\n #  define ALIGN_MAX_STATIC      __BIGGEST_ALIGNMENT__\n    /* Guaranteed to be rejected regardless of the target.  */\n #  define ALIGN_TOO_BIG_OFILE   (ALIGN_MAX_HARD << 1)"}]}