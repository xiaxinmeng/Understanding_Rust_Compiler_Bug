{"sha": "0da3e7668c429cc356d96aac4b72c0c01c027b34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRhM2U3NjY4YzQyOWNjMzU2ZDk2YWFjNGI3MmMwYzAxYzAyN2IzNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-10-29T15:44:48Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-10-29T15:44:48Z"}, "message": "Avoid typeless storage in wide-int\n\n\t* wide-int.h (trailing_wide_ints <N>): Turn len to array of structures\n\tso it does not imply typeless storage.\n\t(trailing_wide_ints <N>::operator): update\n\t(trailing_wide_ints <N>::operator []): Update.", "tree": {"sha": "dbb70764b1ae6a218b9a0fc2757b6b2880f5f444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbb70764b1ae6a218b9a0fc2757b6b2880f5f444"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0da3e7668c429cc356d96aac4b72c0c01c027b34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da3e7668c429cc356d96aac4b72c0c01c027b34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0da3e7668c429cc356d96aac4b72c0c01c027b34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da3e7668c429cc356d96aac4b72c0c01c027b34/comments", "author": null, "committer": null, "parents": [{"sha": "815baade9a07d361b1daa1dcfbbda2a79f3ebb52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815baade9a07d361b1daa1dcfbbda2a79f3ebb52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/815baade9a07d361b1daa1dcfbbda2a79f3ebb52"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "6eae46da12ea039bafefec543070f87a1180e77f", "filename": "gcc/wide-int.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da3e7668c429cc356d96aac4b72c0c01c027b34/gcc%2Fwide-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da3e7668c429cc356d96aac4b72c0c01c027b34/gcc%2Fwide-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.h?ref=0da3e7668c429cc356d96aac4b72c0c01c027b34", "patch": "@@ -1387,8 +1387,10 @@ struct GTY((user)) trailing_wide_ints\n   /* The shared maximum length of each number.  */\n   unsigned char m_max_len;\n \n-  /* The current length of each number.  */\n-  unsigned char m_len[N];\n+  /* The current length of each number.\n+     Avoid char array so the whole structure is not a typeless storage\n+     that will, in turn, turn off TBAA on gimple, trees and RTL.  */\n+  struct {unsigned char len;} m_len[N];\n \n   /* The variable-length part of the structure, which always contains\n      at least one HWI.  Element I starts at index I * M_MAX_LEN.  */\n@@ -1470,7 +1472,7 @@ template <int N>\n inline trailing_wide_int\n trailing_wide_ints <N>::operator [] (unsigned int index)\n {\n-  return trailing_wide_int_storage (m_precision, &m_len[index],\n+  return trailing_wide_int_storage (m_precision, &m_len[index].len,\n \t\t\t\t    &m_val[index * m_max_len]);\n }\n \n@@ -1479,7 +1481,7 @@ inline typename trailing_wide_ints <N>::const_reference\n trailing_wide_ints <N>::operator [] (unsigned int index) const\n {\n   return wi::storage_ref (&m_val[index * m_max_len],\n-\t\t\t  m_len[index], m_precision);\n+\t\t\t  m_len[index].len, m_precision);\n }\n \n /* Return how many extra bytes need to be added to the end of the structure"}]}