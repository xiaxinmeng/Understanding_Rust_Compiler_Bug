{"sha": "099a66498bf7a40764002793eba66c881a251b76", "node_id": "C_kwDOANBUbNoAKDA5OWE2NjQ5OGJmN2E0MDc2NDAwMjc5M2ViYTY2Yzg4MWEyNTFiNzY", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-26T15:30:17Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-26T15:30:17Z"}, "message": "c++ modules: variable template partial spec fixes [PR107033]\n\nIn r13-2775-g32d8123cd6ce87 I missed that we need to adjust the call to\nadd_mergeable_specialization in the MK_partial case to correctly handle\nvariable template partial specializations (it currently assumes we're\nalways dealing with one for a class template).  This fixes an ICE when\nconverting the testcase from that commit to use an importable header\ninstead of a named module.\n\n\tPR c++/107033\n\ngcc/cp/ChangeLog:\n\n\t* module.cc (trees_in::decl_value): In the MK_partial case for\n\ta variable template partial specialization, pass decl_p=true to\n\tadd_mergeable_specialization, and set spec to the VAR_DECL not\n\tthe TEMPLATE_DECL.\n\t* pt.cc (add_mergeable_specialization): For a variable template\n\tpartial specialization, set the TREE_TYPE of the new\n\tDECL_TEMPLATE_SPECIALIZATIONS node to the TREE_TYPE of the\n\tVAR_DECL not the VAR_DECL itself.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/modules/partial-2.cc, g++.dg/modules/partial-2.h: New\n\tfiles, factored out from ...\n\t* g++.dg/modules/partial-2_a.C, g++.dg/modules/partial-2_b.C: ...\n\tthese.\n\t* g++.dg/modules/partial-2_c.H: New test.\n\t* g++.dg/modules/partial-2_d.C: New test.", "tree": {"sha": "4876e589390d43536b3b6e227fbb6ed9f54a18e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4876e589390d43536b3b6e227fbb6ed9f54a18e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/099a66498bf7a40764002793eba66c881a251b76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/099a66498bf7a40764002793eba66c881a251b76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/099a66498bf7a40764002793eba66c881a251b76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/099a66498bf7a40764002793eba66c881a251b76/comments", "author": null, "committer": null, "parents": [{"sha": "1b5432b401934962affe32cd7e42e864224e8062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b5432b401934962affe32cd7e42e864224e8062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b5432b401934962affe32cd7e42e864224e8062"}], "stats": {"total": 144, "additions": 82, "deletions": 62}, "files": [{"sha": "7496df5e843cdc903140d5d30acbbec53015ef28", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099a66498bf7a40764002793eba66c881a251b76/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099a66498bf7a40764002793eba66c881a251b76/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=099a66498bf7a40764002793eba66c881a251b76", "patch": "@@ -8185,13 +8185,18 @@ trees_in::decl_value ()\n \t/* Set the TEMPLATE_DECL's type.  */\n \tTREE_TYPE (decl) = TREE_TYPE (inner);\n \n-      if (mk & MK_template_mask\n-\t  || mk == MK_partial)\n+      /* Add to specialization tables now that constraints etc are\n+\t added.  */\n+      if (mk == MK_partial)\n \t{\n-\t  /* Add to specialization tables now that constraints etc are\n-\t     added.  */\n-\t  bool is_type = mk == MK_partial || !(mk & MK_tmpl_decl_mask);\n-\n+\t  bool is_type = TREE_CODE (inner) == TYPE_DECL;\n+\t  spec.spec = is_type ? type : inner;\n+\t  add_mergeable_specialization (!is_type, false,\n+\t\t\t\t\t&spec, decl, spec_flags);\n+\t}\n+      else if (mk & MK_template_mask)\n+\t{\n+\t  bool is_type = !(mk & MK_tmpl_decl_mask);\n \t  spec.spec = is_type ? type : mk & MK_tmpl_tmpl_mask ? inner : decl;\n \t  add_mergeable_specialization (!is_type,\n \t\t\t\t\t!is_type && mk & MK_tmpl_alias_mask,"}, {"sha": "1f088fe281e279707318b9ec41a244fea1a989ee", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099a66498bf7a40764002793eba66c881a251b76/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099a66498bf7a40764002793eba66c881a251b76/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=099a66498bf7a40764002793eba66c881a251b76", "patch": "@@ -31010,7 +31010,7 @@ add_mergeable_specialization (bool decl_p, bool alias_p, spec_entry *elt,\n       /* A partial specialization.  */\n       tree cons = tree_cons (elt->args, decl,\n \t\t\t     DECL_TEMPLATE_SPECIALIZATIONS (elt->tmpl));\n-      TREE_TYPE (cons) = elt->spec;\n+      TREE_TYPE (cons) = decl_p ? TREE_TYPE (elt->spec) : elt->spec;\n       DECL_TEMPLATE_SPECIALIZATIONS (elt->tmpl) = cons;\n     }\n }"}, {"sha": "1316bf5e1c5b8b4d0aba43005949d3b6bb5d196b", "filename": "gcc/testsuite/g++.dg/modules/partial-2.cc", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099a66498bf7a40764002793eba66c881a251b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099a66498bf7a40764002793eba66c881a251b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2.cc?ref=099a66498bf7a40764002793eba66c881a251b76", "patch": "@@ -0,0 +1,17 @@\n+static_assert(is_reference_v<int&>);\n+static_assert(is_reference_v<int&&>);\n+static_assert(!is_reference_v<int>);\n+\n+static_assert(A::is_reference_v<long&>);\n+static_assert(A::is_reference_v<long&&>);\n+static_assert(!A::is_reference_v<long>);\n+\n+#if __cpp_concepts\n+static_assert(concepts::is_reference_v<char&>);\n+static_assert(concepts::is_reference_v<char&&>);\n+static_assert(!concepts::is_reference_v<char>);\n+\n+static_assert(concepts::A::is_reference_v<bool&>);\n+static_assert(concepts::A::is_reference_v<bool&&>);\n+static_assert(!concepts::A::is_reference_v<bool>);\n+#endif"}, {"sha": "afcfce791b3699f05f202d06175f5587f94e7711", "filename": "gcc/testsuite/g++.dg/modules/partial-2.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099a66498bf7a40764002793eba66c881a251b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099a66498bf7a40764002793eba66c881a251b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2.h?ref=099a66498bf7a40764002793eba66c881a251b76", "patch": "@@ -0,0 +1,38 @@\n+template<class T> constexpr bool is_reference_v = false;\n+template<class T> constexpr bool is_reference_v<T&> = true;\n+template<class T> constexpr bool is_reference_v<T&&> = true;\n+\n+struct A {\n+  template<class T> static constexpr bool is_reference_v = false;\n+};\n+\n+template<class T> constexpr bool A::is_reference_v<T&> = true;\n+template<class T> constexpr bool A::is_reference_v<T&&> = true;\n+\n+#if __cpp_concepts\n+namespace concepts {\n+  template<class T> bool is_reference_v;\n+\n+  template<class T> requires __is_same(T, T&)\n+  constexpr bool is_reference_v<T> = true;\n+\n+  template<class T> requires __is_same(T, T&&) && (!__is_same(T, T&))\n+  constexpr bool is_reference_v<T> = true;\n+\n+  template<class T> requires (!__is_same(T, T&)) && (!__is_same(T, T&&))\n+  constexpr bool is_reference_v<T> = false;\n+\n+  struct A {\n+    template<class T> static bool is_reference_v;\n+  };\n+\n+  template<class T> requires __is_same(T, T&)\n+  constexpr bool A::is_reference_v<T> = true;\n+\n+  template<class T> requires __is_same(T, T&&) && (!__is_same(T, T&))\n+  constexpr bool A::is_reference_v<T> = true;\n+\n+  template<class T> requires (!__is_same(T, T&)) && (!__is_same(T, T&&))\n+  constexpr bool A::is_reference_v<T> = false;\n+}\n+#endif"}, {"sha": "1582f56f2d466e592aef0ba9f179f438939e54bb", "filename": "gcc/testsuite/g++.dg/modules/partial-2_a.C", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099a66498bf7a40764002793eba66c881a251b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099a66498bf7a40764002793eba66c881a251b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_a.C?ref=099a66498bf7a40764002793eba66c881a251b76", "patch": "@@ -3,41 +3,4 @@\n // { dg-module-cmi pr106826 }\n export module pr106826;\n \n-template<class T> constexpr bool is_reference_v = false;\n-template<class T> constexpr bool is_reference_v<T&> = true;\n-template<class T> constexpr bool is_reference_v<T&&> = true;\n-\n-struct A {\n-  template<class T> static constexpr bool is_reference_v = false;\n-};\n-\n-template<class T> constexpr bool A::is_reference_v<T&> = true;\n-template<class T> constexpr bool A::is_reference_v<T&&> = true;\n-\n-#if __cpp_concepts\n-namespace concepts {\n-  template<class T> bool is_reference_v;\n-\n-  template<class T> requires __is_same(T, T&)\n-  constexpr bool is_reference_v<T> = true;\n-\n-  template<class T> requires __is_same(T, T&&) && (!__is_same(T, T&))\n-  constexpr bool is_reference_v<T> = true;\n-\n-  template<class T> requires (!__is_same(T, T&)) && (!__is_same(T, T&&))\n-  constexpr bool is_reference_v<T> = false;\n-\n-  struct A {\n-    template<class T> static bool is_reference_v;\n-  };\n-\n-  template<class T> requires __is_same(T, T&)\n-  constexpr bool A::is_reference_v<T> = true;\n-\n-  template<class T> requires __is_same(T, T&&) && (!__is_same(T, T&))\n-  constexpr bool A::is_reference_v<T> = true;\n-\n-  template<class T> requires (!__is_same(T, T&)) && (!__is_same(T, T&&))\n-  constexpr bool A::is_reference_v<T> = false;\n-}\n-#endif\n+#include \"partial-2.h\""}, {"sha": "1b0c7a53e9f3becb13cb59a51c7891e982466350", "filename": "gcc/testsuite/g++.dg/modules/partial-2_b.C", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099a66498bf7a40764002793eba66c881a251b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099a66498bf7a40764002793eba66c881a251b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_b.C?ref=099a66498bf7a40764002793eba66c881a251b76", "patch": "@@ -2,20 +2,4 @@\n // { dg-additional-options -fmodules-ts }\n module pr106826;\n \n-static_assert(is_reference_v<int&>);\n-static_assert(is_reference_v<int&&>);\n-static_assert(!is_reference_v<int>);\n-\n-static_assert(A::is_reference_v<long&>);\n-static_assert(A::is_reference_v<long&&>);\n-static_assert(!A::is_reference_v<long>);\n-\n-#if __cpp_concepts\n-static_assert(concepts::is_reference_v<char&>);\n-static_assert(concepts::is_reference_v<char&&>);\n-static_assert(!concepts::is_reference_v<char>);\n-\n-static_assert(concepts::A::is_reference_v<bool&>);\n-static_assert(concepts::A::is_reference_v<bool&&>);\n-static_assert(!concepts::A::is_reference_v<bool>);\n-#endif\n+#include \"partial-2.cc\""}, {"sha": "bd838529ce017681cdd25c7f5fe8d774699a6ced", "filename": "gcc/testsuite/g++.dg/modules/partial-2_c.H", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099a66498bf7a40764002793eba66c881a251b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_c.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099a66498bf7a40764002793eba66c881a251b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_c.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_c.H?ref=099a66498bf7a40764002793eba66c881a251b76", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/107033\n+// { dg-additional-options -fmodule-header }\n+// { dg-module-cmi {} }\n+\n+#include \"partial-2.h\""}, {"sha": "ed54d3c2884d526e0d85dd2a2ec401b0051ce2ba", "filename": "gcc/testsuite/g++.dg/modules/partial-2_d.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099a66498bf7a40764002793eba66c881a251b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_d.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099a66498bf7a40764002793eba66c881a251b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_d.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_d.C?ref=099a66498bf7a40764002793eba66c881a251b76", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/107033\n+// { dg-additional-options -fmodules-ts }\n+// { dg-module-cmi pr107033 }\n+export module pr107033;\n+\n+import \"partial-2_c.H\";\n+\n+#include \"partial-2.cc\""}]}