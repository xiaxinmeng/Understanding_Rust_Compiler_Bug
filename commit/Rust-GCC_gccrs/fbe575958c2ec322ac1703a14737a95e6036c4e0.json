{"sha": "fbe575958c2ec322ac1703a14737a95e6036c4e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJlNTc1OTU4YzJlYzMyMmFjMTcwM2ExNDczN2E5NWU2MDM2YzRlMA==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:25Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:25Z"}, "message": "VAX: Correct `sync_lock_test_and_set' and `sync_lock_release' builtins\n\nRemove an ICE like:\n\nduring RTL pass: expand\n.../libatomic/tas_n.c: In function 'libat_test_and_set_1':\n.../libatomic/tas_n.c:39:1: internal compiler error: in patch_jump_insn, at cfgrtl.c:1298\n   39 | }\n      | ^\n0x108a09ff patch_jump_insn\n\t.../gcc/cfgrtl.c:1298\n0x108a0b07 redirect_branch_edge\n\t.../gcc/cfgrtl.c:1325\n0x108a124b rtl_redirect_edge_and_branch\n\t.../gcc/cfgrtl.c:1458\n0x1087f6d3 redirect_edge_and_branch(edge_def*, basic_block_def*)\n\t.../gcc/cfghooks.c:373\n0x11d6264b try_forward_edges\n\t.../gcc/cfgcleanup.c:562\n0x11d6b0eb try_optimize_cfg\n\t.../gcc/cfgcleanup.c:2960\n0x11d6ba4f cleanup_cfg(int)\n\t.../gcc/cfgcleanup.c:3174\n0x10870b3f execute\n\t.../gcc/cfgexpand.c:6763\n\ntriggered with an RTL pattern like:\n\n(jump_insn 8 7 20 2 (parallel [\n            (set (pc)\n                (if_then_else (ne (zero_extract:SI (mem/v:QI (mem/f/c:SI (reg/f:SI 16 virtual-incoming-args) [1 mptr+0 S4 A32]) [-1  S1 A8])\n                            (const_int 1 [0x1])\n                            (const_int 0 [0]))\n                        (const_int 0 [0]))\n                    (label_ref 10)\n                    (pc)))\n            (set (zero_extract:SI (mem/v:QI (mem/f/c:SI (reg/f:SI 16 virtual-incoming-args) [1 mptr+0 S4 A32]) [-1  S1 A8])\n                    (const_int 1 [0x1])\n                    (const_int 0 [0]))\n                (const_int 1 [0x1]))\n        ]) \".../libatomic/tas_n.c\":38:12 -1\n     (nil)\n -> 10)\n\ncaused by a volatile memory reference used that is not accepted by the\n`memory_operand' predicate of the `jbbssiqi' insn explicitly referred\nfrom the `sync_lock_test_and_setqi' expander.  Also seen with:\n\nFAIL: gcc.dg/pr61756.c (internal compiler error)\n\nDefine a new `any_memory_operand' predicate accepting both ordinary and\nvolatile memory references and use it with the `jbb<ccss>i<mode>' insn,\nso as to address the ICE.\n\nAlso remove useless operations from the `sync_lock_test_and_set<mode>'\nand `sync_lock_release<mode>' expanders as those always either complete\nor fail and therefore never fall through to using their template other\nthan to match operands.  Wrap `jbb<ccss>i<mode>' into `unspec_volatile'\ninstead so that the jump does not get removed or reordered.  Share one\nindex to avoid a complication around the iterators since the index is\nnowhere referred to anyway and the pattern required pulled by its name.\n\nTest cases will be added separately.\n\n\tgcc/\n\t* config/vax/predicates.md (volatile_mem_operand)\n\t(any_memory_operand): New predicates.\n\t* config/vax/builtins.md (VUNSPEC_UNLOCK): Remove constant.\n\t(sync_lock_test_and_set<mode>): Remove `set' and `unspec'\n\toperations, match operands only.  Reformat.\n\t(sync_lock_release<mode>): Likewise.  Remove cruft.\n\t(jbb<ccss>i<mode>): Wrap into `unspec_volatile', use\n\t`any_memory_operand' predicate.", "tree": {"sha": "09e1db69fa321172ff984bc6c86a6173d292b770", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09e1db69fa321172ff984bc6c86a6173d292b770"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbe575958c2ec322ac1703a14737a95e6036c4e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe575958c2ec322ac1703a14737a95e6036c4e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe575958c2ec322ac1703a14737a95e6036c4e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe575958c2ec322ac1703a14737a95e6036c4e0/comments", "author": null, "committer": null, "parents": [{"sha": "2500add25bd3258a66cc7ae199ab7eae53cc3202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2500add25bd3258a66cc7ae199ab7eae53cc3202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2500add25bd3258a66cc7ae199ab7eae53cc3202"}], "stats": {"total": 52, "additions": 33, "deletions": 19}, "files": [{"sha": "7e27854a8b088b454d7e150faa6f4a3802cc87c5", "filename": "gcc/config/vax/builtins.md", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe575958c2ec322ac1703a14737a95e6036c4e0/gcc%2Fconfig%2Fvax%2Fbuiltins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe575958c2ec322ac1703a14737a95e6036c4e0/gcc%2Fconfig%2Fvax%2Fbuiltins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fbuiltins.md?ref=fbe575958c2ec322ac1703a14737a95e6036c4e0", "patch": "@@ -19,8 +19,7 @@\n \n (define_constants\n   [\n-    (VUNSPEC_LOCK 100)\t\t; sync lock and test\n-    (VUNSPEC_UNLOCK 101)\t; sync lock release\n+    (VUNSPEC_LOCK 100)\t\t; sync lock operations\n   ]\n )\n \n@@ -58,10 +57,9 @@\n   \"ffs $0,$32,%1,%0\")\n \n (define_expand \"sync_lock_test_and_set<mode>\"\n-  [(set (match_operand:VAXint 0 \"nonimmediate_operand\" \"=&g\")\n-\t(unspec:VAXint [(match_operand:VAXint 1 \"memory_operand\" \"+m\")\n-\t\t    (match_operand:VAXint 2 \"const_int_operand\" \"n\")\n-\t\t   ] VUNSPEC_LOCK))]\n+  [(match_operand:VAXint 0 \"nonimmediate_operand\" \"=&g\")\n+   (match_operand:VAXint 1 \"memory_operand\" \"+m\")\n+   (match_operand:VAXint 2 \"const_int_operand\" \"n\")]\n   \"\"\n   \"\n {\n@@ -72,46 +70,46 @@\n \n   label = gen_label_rtx ();\n   emit_move_insn (operands[0], const1_rtx);\n-  emit_jump_insn (gen_jbbssi<mode> (operands[1], const0_rtx, label, operands[1]));\n+  emit_jump_insn (gen_jbbssi<mode> (operands[1], const0_rtx, label,\n+\t\t\t\t    operands[1]));\n   emit_move_insn (operands[0], const0_rtx);\n   emit_label (label);\n   DONE;\n }\")\n \n (define_expand \"sync_lock_release<mode>\"\n-  [(set (match_operand:VAXint 0 \"memory_operand\" \"+m\")\n-\t(unspec:VAXint [(match_operand:VAXint 1 \"const_int_operand\" \"n\")\n-\t\t   ] VUNSPEC_UNLOCK))]\n+  [(match_operand:VAXint 0 \"memory_operand\" \"+m\")\n+   (match_operand:VAXint 1 \"const_int_operand\" \"n\")]\n   \"\"\n   \"\n {\n   rtx label;\n+\n   if (operands[1] != const0_rtx)\n     FAIL;\n-#if 1\n+\n   label = gen_label_rtx ();\n-  emit_jump_insn (gen_jbbcci<mode> (operands[0], const0_rtx, label, operands[0]));\n+  emit_jump_insn (gen_jbbcci<mode> (operands[0], const0_rtx, label,\n+\t\t\t\t    operands[0]));\n   emit_label (label);\n-#else\n-  emit_move_insn (operands[0], const0_rtx);\n-#endif\n   DONE;\n }\")\n \n (define_insn \"jbb<ccss>i<mode>\"\n-  [(parallel\n+  [(unspec_volatile\n     [(set (pc)\n \t  (if_then_else\n \t    (eq (zero_extract:SI\n-\t\t  (match_operand:VAXint 0 \"memory_operand\" \"<bb_mem>\")\n+\t\t  (match_operand:VAXint 0 \"any_memory_operand\" \"<bb_mem>\")\n \t\t  (const_int 1)\n \t\t  (match_operand:SI 1 \"general_operand\" \"nrmT\"))\n \t\t(const_int bit))\n \t    (label_ref (match_operand 2 \"\" \"\"))\n \t    (pc)))\n-     (set (zero_extract:SI (match_operand:VAXint 3 \"memory_operand\" \"+0\")\n+     (set (zero_extract:SI (match_operand:VAXint 3 \"any_memory_operand\" \"+0\")\n \t\t\t   (const_int 1)\n \t\t\t   (match_dup 1))\n-\t  (const_int bit))])]\n+\t  (const_int bit))]\n+    VUNSPEC_LOCK)]\n   \"\"\n   \"jb<ccss>i %1,%0,%l2\")"}, {"sha": "7c97b36660471d3c51c709a3989650393290a327", "filename": "gcc/config/vax/predicates.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe575958c2ec322ac1703a14737a95e6036c4e0/gcc%2Fconfig%2Fvax%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe575958c2ec322ac1703a14737a95e6036c4e0/gcc%2Fconfig%2Fvax%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fpredicates.md?ref=fbe575958c2ec322ac1703a14737a95e6036c4e0", "patch": "@@ -93,3 +93,19 @@\n    (and (match_code \"const_int,const_double,subreg,reg,mem\")\n \t(and (match_operand:DI 0 \"general_operand\" \"\")\n \t     (not (match_operand:DI 0 \"illegal_addsub_di_memory_operand\")))))\n+\n+;; Return 1 if the operand is in volatile memory.  Note that during the\n+;; RTL generation phase, `memory_operand' does not return TRUE for\n+;; volatile memory references.  So this function allows us to recognize\n+;; volatile references where it's safe.\n+(define_predicate \"volatile_mem_operand\"\n+  (and (match_code \"mem\")\n+       (match_test \"MEM_VOLATILE_P (op)\")\n+       (if_then_else (match_test \"reload_completed\")\n+\t (match_operand 0 \"memory_operand\")\n+\t (match_test \"memory_address_p (mode, XEXP (op, 0))\"))))\n+\n+;; Return 1 if the operand is a volatile or non-volatile memory operand.\n+(define_predicate \"any_memory_operand\"\n+  (ior (match_operand 0 \"memory_operand\")\n+       (match_operand 0 \"volatile_mem_operand\")))"}]}