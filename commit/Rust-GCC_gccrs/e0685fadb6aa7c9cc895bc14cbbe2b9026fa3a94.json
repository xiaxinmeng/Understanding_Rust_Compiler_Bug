{"sha": "e0685fadb6aa7c9cc895bc14cbbe2b9026fa3a94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA2ODVmYWRiNmFhN2M5Y2M4OTViYzE0Y2JiZTJiOTAyNmZhM2E5NA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-07-15T10:29:44Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-07-15T10:34:03Z"}, "message": "libgomp.fortran/struct-elem-map-1.f90: Add char kind=4 tests\n\nAs the Fortran PR 95837 has been fixed, the test could be be added.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.fortran/struct-elem-map-1.f90: Remove unused\n\tvariables; add character(kind=4) tests; update TODO comment.", "tree": {"sha": "c4e9023399b01b9775ced573be628c17703777e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4e9023399b01b9775ced573be628c17703777e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0685fadb6aa7c9cc895bc14cbbe2b9026fa3a94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0685fadb6aa7c9cc895bc14cbbe2b9026fa3a94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0685fadb6aa7c9cc895bc14cbbe2b9026fa3a94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0685fadb6aa7c9cc895bc14cbbe2b9026fa3a94/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c"}], "stats": {"total": 160, "additions": 120, "deletions": 40}, "files": [{"sha": "58550c79d69c3640102133d038d1aaae77a843b1", "filename": "libgomp/testsuite/libgomp.fortran/struct-elem-map-1.f90", "status": "modified", "additions": 120, "deletions": 40, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0685fadb6aa7c9cc895bc14cbbe2b9026fa3a94/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fstruct-elem-map-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0685fadb6aa7c9cc895bc14cbbe2b9026fa3a94/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fstruct-elem-map-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fstruct-elem-map-1.f90?ref=e0685fadb6aa7c9cc895bc14cbbe2b9026fa3a94", "patch": "@@ -2,11 +2,9 @@\n !\n ! Test OpenMP 4.5 structure-element mapping\n \n-! TODO: character(kind=4,...) needs to be tested, but depends on\n-!       PR fortran/95837\n-! TODO: ...%str4 should be tested but that currently fails due to\n+! TODO: ...%str4 + %uni4 should be tested but that currently fails due to\n !       PR fortran/95868 (see commented lined)\n-! TODO: Test also array-valued var, nested derived types,\n+! TODO: Test also 'var' as array and/or pointer; nested derived types,\n !       type-extended types.\n \n program main\n@@ -22,6 +20,10 @@ program main\n     character(len=5) :: str2(4)\n     character(len=:), pointer :: str3 => null()\n     character(len=:), pointer :: str4(:) => null()\n+    character(kind=4, len=5) :: uni1\n+    character(kind=4, len=5) :: uni2(4)\n+    character(kind=4, len=:), pointer :: uni3 => null()\n+    character(kind=4, len=:), pointer :: uni4(:) => null()\n   end type t2\n \n   integer :: i\n@@ -38,20 +40,23 @@ program main\n contains\n   ! Implicitly mapped \u2013 but no pointers are mapped\n   subroutine one() \n-    type(t2) :: var, var2(4)\n-    type(t2), pointer :: var3, var4(:)\n+    type(t2) :: var\n \n     print '(g0)', '==== TESTCASE \"one\" ===='\n \n     var = t2(a = 1, &\n              b = 2, c = cmplx(-1.0_8, 2.0_8,kind=8), &\n              d = [(-3*i, i = 1, 10)], &\n              str1 = \"abcde\", &\n-             str2 = [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"])\n+             str2 = [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"], &\n+             uni1 = 4_\"abcde\", &\n+             uni2 = [4_\"12345\", 4_\"67890\", 4_\"ABCDE\", 4_\"FGHIJ\"])\n     allocate (var%e, source=99)\n     allocate (var%f, source=[22, 33, 44, 55])\n     allocate (var%str3, source=\"HelloWorld\")\n     allocate (var%str4, source=[\"Let's\", \"Go!!!\"])\n+    allocate (var%uni3, source=4_\"HelloWorld\")\n+    allocate (var%uni4, source=[4_\"Let's\", 4_\"Go!!!\"])\n \n     !$omp target map(tofrom:var)\n       if (var%a /= 1) stop 1\n@@ -60,30 +65,36 @@ subroutine one()\n       if (any (var%d /= [(-3*i, i = 1, 10)])) stop 4\n       if (var%str1 /= \"abcde\") stop 5\n       if (any (var%str2 /= [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"])) stop 6\n+      if (var%uni1 /= 4_\"abcde\") stop 7\n+      if (any (var%uni2 /= [4_\"12345\", 4_\"67890\", 4_\"ABCDE\", 4_\"FGHIJ\"])) stop 8\n     !$omp end target\n \n-    deallocate(var%e, var%f, var%str3, var%str4)\n+    deallocate(var%e, var%f, var%str3, var%str4, var%uni3, var%uni4)\n   end subroutine one\n \n   ! Explicitly mapped \u2013 all and full arrays\n   subroutine two() \n-    type(t2) :: var, var2(4)\n-    type(t2), pointer :: var3, var4(:)\n+    type(t2) :: var\n \n     print '(g0)', '==== TESTCASE \"two\" ===='\n \n     var = t2(a = 1, &\n              b = 2, c = cmplx(-1.0_8, 2.0_8,kind=8), &\n              d = [(-3*i, i = 1, 10)], &\n              str1 = \"abcde\", &\n-             str2 = [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"])\n+             str2 = [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"], &\n+             uni1 = 4_\"abcde\", &\n+             uni2 = [4_\"12345\", 4_\"67890\", 4_\"ABCDE\", 4_\"FGHIJ\"])\n     allocate (var%e, source=99)\n     allocate (var%f, source=[22, 33, 44, 55])\n     allocate (var%str3, source=\"HelloWorld\")\n     allocate (var%str4, source=[\"Let's\", \"Go!!!\"])\n+    allocate (var%uni3, source=4_\"HelloWorld\")\n+    allocate (var%uni4, source=[4_\"Let's\", 4_\"Go!!!\"])\n \n     !$omp target map(tofrom: var%a, var%b, var%c, var%d, var%e, var%f, &\n-    !$omp&                   var%str1, var%str2, var%str3, var%str4)\n+    !$omp&                   var%str1, var%str2, var%str3, var%str4,   &\n+    !$omp&                   var%uni1, var%uni2, var%uni3, var%uni4)\n       if (var%a /= 1) stop 1\n       if (var%b /= 2)  stop 2\n       if (var%c%re /= -1.0_8 .or. var%c%im /= 2.0_8) stop 3\n@@ -103,27 +114,40 @@ subroutine two()\n       if (len (var%str4) /= 5) stop 16\n       if (size (var%str4) /= 2) stop 17\n       if (any (var%str4 /= [\"Let's\", \"Go!!!\"])) stop 18\n+\n+      if (var%uni1 /= 4_\"abcde\") stop 19\n+      if (any (var%uni2 /= [4_\"12345\", 4_\"67890\", 4_\"ABCDE\", 4_\"FGHIJ\"])) stop 20\n+      if (.not. associated (var%uni3)) stop 21\n+      if (len (var%uni3) /= len (4_\"HelloWorld\")) stop 22\n+      if (var%uni3 /= 4_\"HelloWorld\") stop 23\n+      if (.not. associated (var%uni4)) stop 24\n+      if (len (var%uni4) /= 5) stop 25\n+      if (size (var%uni4) /= 2) stop 26\n+      if (any (var%uni4 /= [4_\"Let's\", 4_\"Go!!!\"])) stop 27\n     !$omp end target\n \n-    deallocate(var%e, var%f, var%str3, var%str4)\n+    deallocate(var%e, var%f, var%str3, var%str4, var%uni3, var%uni4)\n   end subroutine two\n \n   ! Explicitly mapped \u2013 one by one but full arrays\n   subroutine three() \n-    type(t2) :: var, var2(4)\n-    type(t2), pointer :: var3, var4(:)\n+    type(t2) :: var\n \n     print '(g0)', '==== TESTCASE \"three\" ===='\n \n     var = t2(a = 1, &\n              b = 2, c = cmplx(-1.0_8, 2.0_8,kind=8), &\n              d = [(-3*i, i = 1, 10)], &\n              str1 = \"abcde\", &\n-             str2 = [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"])\n+             str2 = [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"], &\n+             uni1 = 4_\"abcde\", &\n+             uni2 = [4_\"12345\", 4_\"67890\", 4_\"ABCDE\", 4_\"FGHIJ\"])\n     allocate (var%e, source=99)\n     allocate (var%f, source=[22, 33, 44, 55])\n     allocate (var%str3, source=\"HelloWorld\")\n     allocate (var%str4, source=[\"Let's\", \"Go!!!\"])\n+    allocate (var%uni3, source=4_\"HelloWorld\")\n+    allocate (var%uni4, source=[4_\"Let's\", 4_\"Go!!!\"])\n \n     !$omp target map(tofrom: var%a)\n       if (var%a /= 1) stop 1\n@@ -165,26 +189,47 @@ subroutine three()\n       if (any (var%str4 /= [\"Let's\", \"Go!!!\"])) stop 18\n     !$omp end target\n \n-    deallocate(var%e, var%f, var%str3, var%str4)\n+    !$omp target map(tofrom: var%uni1)\n+      if (var%uni1 /= 4_\"abcde\") stop 19\n+    !$omp end target\n+    !$omp target map(tofrom: var%uni2)\n+      if (any (var%uni2 /= [4_\"12345\", 4_\"67890\", 4_\"ABCDE\", 4_\"FGHIJ\"])) stop 20\n+    !$omp end target\n+    !$omp target map(tofrom: var%uni3)\n+      if (.not. associated (var%uni3)) stop 21\n+      if (len (var%uni3) /= len (4_\"HelloWorld\")) stop 22\n+      if (var%uni3 /= 4_\"HelloWorld\") stop 23\n+    !$omp end target\n+    !$omp target map(tofrom: var%uni4)\n+      if (.not. associated (var%uni4)) stop 24\n+      if (len (var%uni4) /= 5) stop 25\n+      if (size (var%uni4) /= 2) stop 26\n+      if (any (var%uni4 /= [4_\"Let's\", 4_\"Go!!!\"])) stop 27\n+    !$omp end target\n+\n+    deallocate(var%e, var%f, var%str3, var%str4, var%uni3, var%uni4)\n   end subroutine three\n \n   ! Explicitly mapped \u2013 all but only subarrays\n   subroutine four() \n-    type(t2) :: var, var2(4)\n-    type(t2), pointer :: var3, var4(:)\n+    type(t2) :: var\n \n     print '(g0)', '==== TESTCASE \"four\" ===='\n \n     var = t2(a = 1, &\n              b = 2, c = cmplx(-1.0_8, 2.0_8,kind=8), &\n              d = [(-3*i, i = 1, 10)], &\n              str1 = \"abcde\", &\n-             str2 = [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"])\n+             str2 = [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"], &\n+             uni1 = 4_\"abcde\", &\n+             uni2 = [4_\"12345\", 4_\"67890\", 4_\"ABCDE\", 4_\"FGHIJ\"])\n     allocate (var%f, source=[22, 33, 44, 55])\n     allocate (var%str4, source=[\"Let's\", \"Go!!!\"])\n+    allocate (var%uni4, source=[4_\"Let's\", 4_\"Go!!!\"])\n \n-!   !$omp target map(tofrom: var%d(4:7), var%f(2:3), var%str2(2:3), var%str4(2:2))\n-    !$omp target map(tofrom: var%d(4:7), var%f(2:3), var%str2(2:3))\n+!   !$omp target map(tofrom: var%d(4:7), var%f(2:3), var%str2(2:3)) &\n+!   !$omp&       map(tofrom: var%str4(2:2), var%uni2(2:3), var%uni4(2:2))\n+    !$omp target map(tofrom: var%d(4:7), var%f(2:3), var%str2(2:3), var%uni2(2:3))\n       if (any (var%d(4:7) /= [(-3*i, i = 4, 7)])) stop 4\n       if (any (var%str2(2:3) /= [\"67890\", \"ABCDE\"])) stop 6\n \n@@ -195,23 +240,30 @@ subroutine four()\n !     if (len (var%str4) /= 5) stop 16\n !     if (size (var%str4) /= 2) stop 17\n !     if (var%str4(2) /= \"Go!!!\") stop 18\n+\n+      if (any (var%uni2(2:3) /= [4_\"67890\", 4_\"ABCDE\"])) stop 19\n+!     if (.not. associated (var%uni4)) stop 20\n+!     if (len (var%uni4) /= 5) stop 21\n+!     if (size (var%uni4) /= 2) stop 22\n+!     if (var%uni4(2) /= \"Go!!!\") stop 23\n     !$omp end target\n \n     deallocate(var%f, var%str4)\n   end subroutine four\n \n   ! Explicitly mapped \u2013 all but only subarrays and one by one\n   subroutine five() \n-    type(t2) :: var, var2(4)\n-    type(t2), pointer :: var3, var4(:)\n+    type(t2) :: var\n \n     print '(g0)', '==== TESTCASE \"five\" ===='\n \n     var = t2(a = 1, &\n              b = 2, c = cmplx(-1.0_8, 2.0_8,kind=8), &\n              d = [(-3*i, i = 1, 10)], &\n              str1 = \"abcde\", &\n-             str2 = [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"])\n+             str2 = [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"], &\n+             uni1 = 4_\"abcde\", &\n+             uni2 = [4_\"12345\", 4_\"67890\", 4_\"ABCDE\", 4_\"FGHIJ\"])\n     allocate (var%f, source=[22, 33, 44, 55])\n     allocate (var%str4, source=[\"Let's\", \"Go!!!\"])\n \n@@ -232,30 +284,40 @@ subroutine five()\n !     if (len (var%str4) /= 5) stop 16\n !     if (size (var%str4) /= 2) stop 17\n !     if (var%str4(2) /= \"Go!!!\") stop 18\n+!   !$omp end target\n+!  !$omp target map(tofrom: var%uni4(2:2))\n+!     if (.not. associated (var%uni4)) stop 15\n+!     if (len (var%uni4) /= 5) stop 16\n+!     if (size (var%uni4) /= 2) stop 17\n+!     if (var%uni4(2) /= 4_\"Go!!!\") stop 18\n !  !$omp end target\n \n     deallocate(var%f, var%str4)\n   end subroutine five\n \n   ! Explicitly mapped \u2013 all but only array elements\n   subroutine six() \n-    type(t2) :: var, var2(4)\n-    type(t2), pointer :: var3, var4(:)\n+    type(t2) :: var\n \n     print '(g0)', '==== TESTCASE \"six\" ===='\n \n     var = t2(a = 1, &\n              b = 2, c = cmplx(-1.0_8, 2.0_8,kind=8), &\n              d = [(-3*i, i = 1, 10)], &\n              str1 = \"abcde\", &\n-             str2 = [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"])\n+             str2 = [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"], &\n+             uni1 = 4_\"abcde\", &\n+             uni2 = [4_\"12345\", 4_\"67890\", 4_\"ABCDE\", 4_\"FGHIJ\"])\n     allocate (var%f, source=[22, 33, 44, 55])\n     allocate (var%str4, source=[\"Let's\", \"Go!!!\"])\n+    allocate (var%uni4, source=[4_\"Let's\", 4_\"Go!!!\"])\n \n-!   !$omp target map(tofrom: var%d(5), var%f(3), var%str2(3), var%str4(2))\n-    !$omp target map(tofrom: var%d(5), var%f(3), var%str2(3))\n+!   !$omp target map(tofrom: var%d(5), var%f(3), var%str2(3), &\n+!   !$omp                    var%str4(2), var%uni2(3), var%uni4(2))\n+    !$omp target map(tofrom: var%d(5), var%f(3), var%str2(3), var%uni2(3))\n       if (var%d(5) /= -3*5) stop 4\n       if (var%str2(3) /= \"ABCDE\") stop 6\n+      if (var%uni2(3) /= 4_\"ABCDE\") stop 7\n \n      if (.not. associated (var%f)) stop 9\n      if (size (var%f) /= 4) stop 10\n@@ -264,32 +326,41 @@ subroutine six()\n !     if (len (var%str4) /= 5) stop 16\n !     if (size (var%str4) /= 2) stop 17\n !     if (var%str4(2) /= \"Go!!!\") stop 18\n+!     if (.not. associated (var%uni4)) stop 19\n+!     if (len (var%uni4) /= 5) stop 20\n+!     if (size (var%uni4) /= 2) stop 21\n+!     if (var%uni4(2) /= 4_\"Go!!!\") stop 22\n     !$omp end target\n \n-    deallocate(var%f, var%str4)\n+    deallocate(var%f, var%str4, var%uni4)\n   end subroutine six\n \n   ! Explicitly mapped \u2013 all but only array elements and one by one\n   subroutine seven() \n-    type(t2) :: var, var2(4)\n-    type(t2), pointer :: var3, var4(:)\n+    type(t2) :: var\n \n     print '(g0)', '==== TESTCASE \"seven\" ===='\n \n     var = t2(a = 1, &\n              b = 2, c = cmplx(-1.0_8, 2.0_8,kind=8), &\n              d = [(-3*i, i = 1, 10)], &\n              str1 = \"abcde\", &\n-             str2 = [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"])\n+             str2 = [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"], &\n+             uni1 = 4_\"abcde\", &\n+             uni2 = [4_\"12345\", 4_\"67890\", 4_\"ABCDE\", 4_\"FGHIJ\"])\n     allocate (var%f, source=[22, 33, 44, 55])\n     allocate (var%str4, source=[\"Let's\", \"Go!!!\"])\n+    allocate (var%uni4, source=[4_\"Let's\", 4_\"Go!!!\"])\n \n     !$omp target map(tofrom: var%d(5))\n       if (var%d(5) /= (-3*5)) stop 4\n     !$omp end target\n     !$omp target map(tofrom: var%str2(2:3))\n       if (any (var%str2(2:3) /= [\"67890\", \"ABCDE\"])) stop 6\n     !$omp end target\n+    !$omp target map(tofrom: var%uni2(2:3))\n+      if (any (var%uni2(2:3) /= [4_\"67890\", 4_\"ABCDE\"])) stop 7\n+    !$omp end target\n \n     !$omp target map(tofrom: var%f(2:3))\n      if (.not. associated (var%f)) stop 9\n@@ -301,30 +372,39 @@ subroutine seven()\n !     if (len (var%str4) /= 5) stop 16\n !     if (size (var%str4) /= 2) stop 17\n !     if (var%str4(2) /= \"Go!!!\") stop 18\n+!   !$omp end target\n+!   !$omp target map(tofrom: var%uni4(2:2))\n+!     if (.not. associated (var%uni4)) stop 15\n+!     if (len (var%uni4) /= 5) stop 16\n+!     if (size (var%uni4) /= 2) stop 17\n+!     if (var%uni4(2) /= 4_\"Go!!!\") stop 18\n !   !$omp end target\n \n-    deallocate(var%f, var%str4)\n+    deallocate(var%f, var%str4, var%uni4)\n   end subroutine seven\n \n   ! Check mapping of NULL pointers\n   subroutine eight() \n-    type(t2) :: var, var2(4)\n-    type(t2), pointer :: var3, var4(:)\n+    type(t2) :: var\n \n     print '(g0)', '==== TESTCASE \"eight\" ===='\n \n     var = t2(a = 1, &\n              b = 2, c = cmplx(-1.0_8, 2.0_8,kind=8), &\n              d = [(-3*i, i = 1, 10)], &\n              str1 = \"abcde\", &\n-             str2 = [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"])\n+             str2 = [\"12345\", \"67890\", \"ABCDE\", \"FGHIJ\"], &\n+             uni1 = 4_\"abcde\", &\n+             uni2 = [4_\"12345\", 4_\"67890\", 4_\"ABCDE\", 4_\"FGHIJ\"])\n \n-!    !$omp target map(tofrom: var%e, var%f, var%str3, var%str4)\n-    !$omp target map(tofrom: var%e, var%str3)\n+!    !$omp target map(tofrom: var%e, var%f, var%str3, var%str4, var%uni3, var%uni4)\n+    !$omp target map(tofrom: var%e, var%str3, var%uni3)\n       if (associated (var%e)) stop 1\n !      if (associated (var%f)) stop 2\n       if (associated (var%str3)) stop 3\n !      if (associated (var%str4)) stop 4\n+      if (associated (var%uni3)) stop 5\n+!      if (associated (var%uni4)) stop 6\n     !$omp end target\n   end subroutine eight\n "}]}