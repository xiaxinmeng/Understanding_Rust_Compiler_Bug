{"sha": "0400ca17f361dcc7f8230bb69a25de22497c73c3", "node_id": "C_kwDOANBUbNoAKDA0MDBjYTE3ZjM2MWRjYzdmODIzMGJiNjlhMjVkZTIyNDk3YzczYzM", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-28T08:19:57Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-28T13:55:29Z"}, "message": "Improve jump threading dump output.\n\nIn analyzing PR102511, it has become abundantly clear that we need\nbetter debugging aids for the jump threader solver.  Currently\ndebugging these issues is a nightmare if you're not intimately\nfamiliar with the code.  This patch attempts to improve this.\n\nFirst, I'm enabling path solver dumps with TDF_THREADING.  None of the\navailable TDF_* flags are a good match, and using TDF_DETAILS would blow\nup the dump file, since both threaders continually call the solver to\ntry out candidates.  This will allow dumping path solver details without\nhaving to resort to hacking the source.\n\nI am also dumping the current registered_jump_thread dbg counter used\nby the registry, in the solver.  That way narrowing down a problematic\nthread can then be examined by -fdump-*-threading and looking at the\nsolver details surrounding the appropriate counter (which the dbgcnt\nalso dumps to the dump file).\n\nYou still need knowledge of the solver to debug these issues, but at\nleast now it's not entirely opaque.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* dbgcnt.c (dbg_cnt_counter): New.\n\t* dbgcnt.h (dbg_cnt_counter): New.\n\t* dumpfile.c (dump_options): Add entry for TDF_THREADING.\n\t* dumpfile.h (enum dump_flag): Add TDF_THREADING.\n\t* gimple-range-path.cc (DEBUG_SOLVER): Use TDF_THREADING.\n\t* tree-ssa-threadupdate.c (dump_jump_thread_path): Dump out\n\tdebug counter.", "tree": {"sha": "dadf3aba2e6cba61fe314f08a043ce7d735005ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dadf3aba2e6cba61fe314f08a043ce7d735005ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0400ca17f361dcc7f8230bb69a25de22497c73c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0400ca17f361dcc7f8230bb69a25de22497c73c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0400ca17f361dcc7f8230bb69a25de22497c73c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0400ca17f361dcc7f8230bb69a25de22497c73c3/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f0a57bd54aed558e0167016dd980177f88f8480", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f0a57bd54aed558e0167016dd980177f88f8480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f0a57bd54aed558e0167016dd980177f88f8480"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "6a7eb34cd3ed2a8d9212ad5e0d87e8219f1eaa04", "filename": "gcc/dbgcnt.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0400ca17f361dcc7f8230bb69a25de22497c73c3/gcc%2Fdbgcnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0400ca17f361dcc7f8230bb69a25de22497c73c3/gcc%2Fdbgcnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbgcnt.c?ref=0400ca17f361dcc7f8230bb69a25de22497c73c3", "patch": "@@ -98,6 +98,14 @@ dbg_cnt (enum debug_counter index)\n     return false;\n }\n \n+/* Return the counter for INDEX.  */\n+\n+unsigned\n+dbg_cnt_counter (enum debug_counter index)\n+{\n+  return count[index];\n+}\n+\n /* Compare limit_tuple intervals by first item in descending order.  */\n \n static int"}, {"sha": "3c35dcc3e0a7e0e2e62fff460f86265937e0bac0", "filename": "gcc/dbgcnt.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0400ca17f361dcc7f8230bb69a25de22497c73c3/gcc%2Fdbgcnt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0400ca17f361dcc7f8230bb69a25de22497c73c3/gcc%2Fdbgcnt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbgcnt.h?ref=0400ca17f361dcc7f8230bb69a25de22497c73c3", "patch": "@@ -33,6 +33,7 @@ enum debug_counter {\n \n extern bool dbg_cnt_is_enabled (enum debug_counter index);\n extern bool dbg_cnt (enum debug_counter index);\n+extern unsigned dbg_cnt_counter (enum debug_counter index);\n extern void dbg_cnt_process_opt (const char *arg);\n extern void dbg_cnt_list_all_counters (void);\n "}, {"sha": "e6ead5debe5603a4ee22a68555e0eac8f6fe22d2", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0400ca17f361dcc7f8230bb69a25de22497c73c3/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0400ca17f361dcc7f8230bb69a25de22497c73c3/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=0400ca17f361dcc7f8230bb69a25de22497c73c3", "patch": "@@ -145,6 +145,7 @@ static const kv_pair<dump_flags_t> dump_options[] =\n   {\"missed\", MSG_MISSED_OPTIMIZATION},\n   {\"note\", MSG_NOTE},\n   {\"optall\", MSG_ALL_KINDS},\n+  {\"threading\", TDF_THREADING},\n   {\"all\", dump_flags_t (TDF_ALL_VALUES\n \t\t\t& ~(TDF_RAW | TDF_SLIM | TDF_LINENO | TDF_GRAPH\n \t\t\t    | TDF_STMTADDR | TDF_RHS_ONLY | TDF_NOUID"}, {"sha": "6c7758dd2fb6b54cb96eb0a4e72c3ad8c4b14983", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0400ca17f361dcc7f8230bb69a25de22497c73c3/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0400ca17f361dcc7f8230bb69a25de22497c73c3/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=0400ca17f361dcc7f8230bb69a25de22497c73c3", "patch": "@@ -197,6 +197,9 @@ enum dump_flag\n   /* For error.  */\n   TDF_ERROR = (1 << 26),\n \n+  /* Dumping for range path solver.  */\n+  TDF_THREADING = (1 << 27),\n+\n   /* All values.  */\n   TDF_ALL_VALUES = (1 << 29) - 1\n };"}, {"sha": "a29d5318ca9b7568b62b509f8149b817e7aa505e", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0400ca17f361dcc7f8230bb69a25de22497c73c3/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0400ca17f361dcc7f8230bb69a25de22497c73c3/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=0400ca17f361dcc7f8230bb69a25de22497c73c3", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-iterator.h\"\n \n // Internal construct to help facilitate debugging of solver.\n-#define DEBUG_SOLVER (0 && dump_file)\n+#define DEBUG_SOLVER (dump_file && dump_flags & TDF_THREADING)\n \n path_range_query::path_range_query (gimple_ranger &ranger, bool resolve)\n   : m_ranger (ranger)"}, {"sha": "dcabfdb30d2c0dfee702463713cb11fcdc3defa3", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0400ca17f361dcc7f8230bb69a25de22497c73c3/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0400ca17f361dcc7f8230bb69a25de22497c73c3/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=0400ca17f361dcc7f8230bb69a25de22497c73c3", "patch": "@@ -218,10 +218,15 @@ dump_jump_thread_path (FILE *dump_file,\n \t\t       const vec<jump_thread_edge *> &path,\n \t\t       bool registering)\n {\n-  fprintf (dump_file,\n-\t   \"  %s jump thread: (%d, %d) incoming edge; \",\n-\t   (registering ? \"Registering\" : \"Cancelling\"),\n-\t   path[0]->e->src->index, path[0]->e->dest->index);\n+  if (registering)\n+    fprintf (dump_file,\n+\t     \"  [%u] Registering jump thread: (%d, %d) incoming edge; \",\n+\t     dbg_cnt_counter (registered_jump_thread),\n+\t     path[0]->e->src->index, path[0]->e->dest->index);\n+  else\n+    fprintf (dump_file,\n+\t     \"  Cancelling jump thread: (%d, %d) incoming edge; \",\n+\t     path[0]->e->src->index, path[0]->e->dest->index);\n \n   for (unsigned int i = 1; i < path.length (); i++)\n     {"}]}