{"sha": "d97c633306d2f90198577afc5ead6ad4f8fb06ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk3YzYzMzMwNmQyZjkwMTk4NTc3YWZjNWVhZDZhZDRmOGZiMDZlZg==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2004-08-17T00:00:50Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2004-08-17T00:00:50Z"}, "message": "Make unsafe vector float optimizations dependent on -ffast-math.\n\n\t* tree.h (VECTOR_FLOAT_TYPE_P): New.\n\t(FLOAT_TYPE_P): Use it.\n\t* c-typeck.c (build_binary_op): After convert calls, check for\n\tcheck for ERROR_MARK operands.\n\nFrom-SVN: r86088", "tree": {"sha": "c420f74d10fc4b348591d6a21ce1ec384cfa199d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c420f74d10fc4b348591d6a21ce1ec384cfa199d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d97c633306d2f90198577afc5ead6ad4f8fb06ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97c633306d2f90198577afc5ead6ad4f8fb06ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d97c633306d2f90198577afc5ead6ad4f8fb06ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97c633306d2f90198577afc5ead6ad4f8fb06ef/comments", "author": null, "committer": null, "parents": [{"sha": "16d85b639cd5abc3662f49b02e28c4fe7136587f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16d85b639cd5abc3662f49b02e28c4fe7136587f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16d85b639cd5abc3662f49b02e28c4fe7136587f"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "e7e7961811b9a3f30302a4e4d79f74083ecbbb02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97c633306d2f90198577afc5ead6ad4f8fb06ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97c633306d2f90198577afc5ead6ad4f8fb06ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d97c633306d2f90198577afc5ead6ad4f8fb06ef", "patch": "@@ -1,3 +1,10 @@\n+2004-08-16  James E Wilson  <wilson@specifixinc.com>\n+\n+\t* tree.h (VECTOR_FLOAT_TYPE_P): New.\n+\t(FLOAT_TYPE_P): Use it.\n+\t* c-typeck.c (build_binary_op): After convert calls, check for\n+\tcheck for ERROR_MARK operands.\n+\n 2004-08-16  Zack Weinberg  <zack@codesourcery.com>\n \n \t* Makefile.in (BUILD_PREFIX, BUILD_PREFIX_1): Delete."}, {"sha": "168883421f47b1ec57d5d7adc2926c51818c58e8", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97c633306d2f90198577afc5ead6ad4f8fb06ef/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97c633306d2f90198577afc5ead6ad4f8fb06ef/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=d97c633306d2f90198577afc5ead6ad4f8fb06ef", "patch": "@@ -7551,6 +7551,11 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \top0 = convert (result_type, op0);\n       if (TREE_TYPE (op1) != result_type)\n \top1 = convert (result_type, op1);\n+\n+      /* This can happen if one operand has a vector type, and the other\n+\t has a different type.  */\n+      if (TREE_CODE (op0) == ERROR_MARK || TREE_CODE (op1) == ERROR_MARK)\n+\treturn error_mark_node;\n     }\n \n   if (build_type == NULL_TREE)"}, {"sha": "4feabefb2c44f5c727adda7d86e0bf93039cfde6", "filename": "gcc/tree.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97c633306d2f90198577afc5ead6ad4f8fb06ef/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97c633306d2f90198577afc5ead6ad4f8fb06ef/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d97c633306d2f90198577afc5ead6ad4f8fb06ef", "patch": "@@ -668,11 +668,18 @@ extern void tree_operand_check_failed (int, enum tree_code,\n   (TREE_CODE (TYPE) == COMPLEX_TYPE\t\\\n    && TREE_CODE (TREE_TYPE (TYPE)) == REAL_TYPE)\n \n+/* Nonzero if TYPE represents a vector floating-point type.  */\n+\n+#define VECTOR_FLOAT_TYPE_P(TYPE)\t\\\n+  (TREE_CODE (TYPE) == VECTOR_TYPE\t\\\n+   && TREE_CODE (TREE_TYPE (TYPE)) == REAL_TYPE)\n+\n /* Nonzero if TYPE represents a floating-point type, including complex\n-   floating-point types.  */\n+   and vector floating-point types.  */\n \n #define FLOAT_TYPE_P(TYPE)\t\t\\\n-  (SCALAR_FLOAT_TYPE_P (TYPE) || COMPLEX_FLOAT_TYPE_P (TYPE))\n+  (SCALAR_FLOAT_TYPE_P (TYPE) || COMPLEX_FLOAT_TYPE_P (TYPE)\t\\\n+   || VECTOR_FLOAT_TYPE_P (TYPE))\n \n /* Nonzero if TYPE represents an aggregate (multi-component) type.  */\n "}]}