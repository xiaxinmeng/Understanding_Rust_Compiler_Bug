{"sha": "b45d3a36267d7ce6bb397f0c3ed453ff71a23472", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ1ZDNhMzYyNjdkN2NlNmJiMzk3ZjBjM2VkNDUzZmY3MWEyMzQ3Mg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-03-10T18:18:22Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-03-10T18:18:22Z"}, "message": "fold-const.c (tree_expr_nonnegative_p): Add more builtin cases.\n\n\t* fold-const.c (tree_expr_nonnegative_p): Add more builtin cases.\n\ntestsuite:\n\t* gcc.dg/torture/builtin-nonneg-1.c: New test.\n\nFrom-SVN: r79269", "tree": {"sha": "8d271fd27fd3b29ce2a42571be57efa22098e191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d271fd27fd3b29ce2a42571be57efa22098e191"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b45d3a36267d7ce6bb397f0c3ed453ff71a23472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b45d3a36267d7ce6bb397f0c3ed453ff71a23472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b45d3a36267d7ce6bb397f0c3ed453ff71a23472", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b45d3a36267d7ce6bb397f0c3ed453ff71a23472/comments", "author": null, "committer": null, "parents": [{"sha": "35ae04ba17998cb310c5be0be2331a0658c70e89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35ae04ba17998cb310c5be0be2331a0658c70e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35ae04ba17998cb310c5be0be2331a0658c70e89"}], "stats": {"total": 219, "additions": 219, "deletions": 0}, "files": [{"sha": "7366aaa65f11043e5ac7c1691232d2c7629ec7d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45d3a36267d7ce6bb397f0c3ed453ff71a23472/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45d3a36267d7ce6bb397f0c3ed453ff71a23472/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b45d3a36267d7ce6bb397f0c3ed453ff71a23472", "patch": "@@ -1,3 +1,7 @@\n+2004-03-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* fold-const.c (tree_expr_nonnegative_p): Add more builtin cases.\n+\n 2004-03-10  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Define"}, {"sha": "58b6c70df4c65b5e05dff67c52a42629f46e34e8", "filename": "gcc/fold-const.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45d3a36267d7ce6bb397f0c3ed453ff71a23472/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45d3a36267d7ce6bb397f0c3ed453ff71a23472/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b45d3a36267d7ce6bb397f0c3ed453ff71a23472", "patch": "@@ -8895,27 +8895,66 @@ tree_expr_nonnegative_p (tree t)\n #define CASE_BUILTIN_I(BUILT_IN_FN) \\\n   case BUILT_IN_FN: case BUILT_IN_FN##L: case BUILT_IN_FN##LL:\n \n+\t    CASE_BUILTIN_F (BUILT_IN_ACOS)\n+\t    CASE_BUILTIN_F (BUILT_IN_ACOSH)\n \t    CASE_BUILTIN_F (BUILT_IN_CABS)\n+\t    CASE_BUILTIN_F (BUILT_IN_COSH)\n+\t    CASE_BUILTIN_F (BUILT_IN_ERFC)\n \t    CASE_BUILTIN_F (BUILT_IN_EXP)\n \t    CASE_BUILTIN_F (BUILT_IN_EXP10)\n \t    CASE_BUILTIN_F (BUILT_IN_EXP2)\n \t    CASE_BUILTIN_F (BUILT_IN_FABS)\n+\t    CASE_BUILTIN_F (BUILT_IN_FDIM)\n+\t    CASE_BUILTIN_F (BUILT_IN_FREXP)\n+\t    CASE_BUILTIN_F (BUILT_IN_HYPOT)\n \t    CASE_BUILTIN_F (BUILT_IN_POW10)\n \t    CASE_BUILTIN_F (BUILT_IN_SQRT)\n \t    CASE_BUILTIN_I (BUILT_IN_FFS)\n \t    CASE_BUILTIN_I (BUILT_IN_PARITY)\n \t    CASE_BUILTIN_I (BUILT_IN_POPCOUNT)\n+\t      /* Always true.  */\n \t      return 1;\n \n+\t    CASE_BUILTIN_F (BUILT_IN_ASINH)\n \t    CASE_BUILTIN_F (BUILT_IN_ATAN)\n+\t    CASE_BUILTIN_F (BUILT_IN_ATANH)\n+\t    CASE_BUILTIN_F (BUILT_IN_CBRT)\n \t    CASE_BUILTIN_F (BUILT_IN_CEIL)\n+\t    CASE_BUILTIN_F (BUILT_IN_ERF)\n+\t    CASE_BUILTIN_F (BUILT_IN_EXPM1)\n \t    CASE_BUILTIN_F (BUILT_IN_FLOOR)\n+\t    CASE_BUILTIN_F (BUILT_IN_FMOD)\n+\t    CASE_BUILTIN_F (BUILT_IN_LDEXP)\n+\t    CASE_BUILTIN_F (BUILT_IN_LLRINT)\n+\t    CASE_BUILTIN_F (BUILT_IN_LLROUND)\n+\t    CASE_BUILTIN_F (BUILT_IN_LRINT)\n+\t    CASE_BUILTIN_F (BUILT_IN_LROUND)\n+\t    CASE_BUILTIN_F (BUILT_IN_MODF)\n \t    CASE_BUILTIN_F (BUILT_IN_NEARBYINT)\n \t    CASE_BUILTIN_F (BUILT_IN_POW)\n+\t    CASE_BUILTIN_F (BUILT_IN_RINT)\n \t    CASE_BUILTIN_F (BUILT_IN_ROUND)\n+\t    CASE_BUILTIN_F (BUILT_IN_SIGNBIT)\n+\t    CASE_BUILTIN_F (BUILT_IN_SINH)\n+\t    CASE_BUILTIN_F (BUILT_IN_TANH)\n \t    CASE_BUILTIN_F (BUILT_IN_TRUNC)\n+\t      /* True if the 1st argument is nonnegative.  */\n \t      return tree_expr_nonnegative_p (TREE_VALUE (arglist));\n \n+\t    CASE_BUILTIN_F(BUILT_IN_FMAX)\n+\t      /* True if the 1st OR 2nd arguments are nonnegative.  */\n+\t      return tree_expr_nonnegative_p (TREE_VALUE (arglist))\n+\t        || tree_expr_nonnegative_p (TREE_VALUE (TREE_CHAIN (arglist)));\n+\n+\t    CASE_BUILTIN_F(BUILT_IN_FMIN)\n+\t      /* True if the 1st AND 2nd arguments are nonnegative.  */\n+\t      return tree_expr_nonnegative_p (TREE_VALUE (arglist))\n+\t        && tree_expr_nonnegative_p (TREE_VALUE (TREE_CHAIN (arglist)));\n+\n+\t    CASE_BUILTIN_F(BUILT_IN_COPYSIGN)\n+\t      /* True if the 2nd argument is nonnegative.  */\n+\t      return tree_expr_nonnegative_p (TREE_VALUE (TREE_CHAIN (arglist)));\n+\n \t    default:\n \t      break;\n #undef CASE_BUILTIN_F"}, {"sha": "b2aef9c75e25d4ef6795de6d37d4881d290468c7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45d3a36267d7ce6bb397f0c3ed453ff71a23472/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45d3a36267d7ce6bb397f0c3ed453ff71a23472/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b45d3a36267d7ce6bb397f0c3ed453ff71a23472", "patch": "@@ -1,3 +1,7 @@\n+2004-03-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-nonneg-1.c: New test.\n+\n 2004-03-09  James E Wilson  <wilson@specifixinc.com>\n \n \t* gcc.dg/alias-1.c: Add \"will\" to string passed to dg-warning."}, {"sha": "80cf3e3c83b79c1d52a24bb15000569470495b58", "filename": "gcc/testsuite/gcc.dg/torture/builtin-nonneg-1.c", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45d3a36267d7ce6bb397f0c3ed453ff71a23472/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-nonneg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45d3a36267d7ce6bb397f0c3ed453ff71a23472/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-nonneg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-nonneg-1.c?ref=b45d3a36267d7ce6bb397f0c3ed453ff71a23472", "patch": "@@ -0,0 +1,172 @@\n+/* Copyright (C) 2004  Free Software Foundation.\n+\n+   Verify that GCC can determine which built-in functions produce a\n+   nonnegative result.\n+\n+   Written by Kaveh Ghazi, 2004-03-10.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-ffast-math\" } */\n+\n+#define PROTOTYPE_RTYPE(FN,RTYPE) extern RTYPE FN(double); \\\n+  extern RTYPE FN##f(float); \\\n+  extern RTYPE FN##l(long double);\n+#define PROTOTYPE(FN) extern double FN(double); extern float FN##f(float); \\\n+  extern long double FN##l(long double);\n+#define PROTOTYPE2(FN) extern double FN(double, double); \\\n+  extern float FN##f(float, float); \\\n+  extern long double FN##l(long double, long double);\n+#define CPROTOTYPE1(FN) extern double FN(_Complex double); \\\n+  extern float FN##f(_Complex float); \\\n+  extern long double FN##l(_Complex long double);\n+#define CPROTOTYPE1(FN) extern double FN(_Complex double); \\\n+  extern float FN##f(_Complex float); \\\n+  extern long double FN##l(_Complex long double);\n+#define IPROTOTYPE(FN) extern int FN(int); extern int FN##l(long); \\\n+  extern int FN##ll(long long);\n+#define PROTOTYPE2TYPE2(FN,A2TYPE) extern double FN(double, A2TYPE); \\\n+  extern float FN##f(float, A2TYPE); \\\n+  extern long double FN##l(long double, A2TYPE);\n+#define PROTOTYPE2_A2FPTR(FN) extern double FN(double, double *); \\\n+  extern float FN##f(float, float *); \\\n+  extern long double FN##l(long double, long double *);\n+\n+extern int signbit (double);\n+extern int signbitf (float);\n+extern int signbitl (long double);\n+\n+void test(double d1, double d2, float f1, float f2,\n+\t  long double ld1, long double ld2)\n+{\n+  /* These are always nonnegative.  */\n+\n+#define TEST1(FN) \\\n+ extern void link_failure_##FN (void); PROTOTYPE(FN) \\\n+ if (signbit(FN(d1)) || signbitf(FN##f(f1)) || signbitl(FN##l(ld1))) \\\n+   link_failure_##FN()\n+\n+#define TEST2(FN) \\\n+ extern void link_failure_##FN (void); PROTOTYPE2(FN) \\\n+ if (signbit(FN(d1,d2)) || signbitf(FN##f(f1,f2)) || signbitl(FN##l(ld1,ld2))) \\\n+   link_failure_##FN()\n+\n+#define CTEST1(FN) \\\n+ extern void link_failure_##FN (void); CPROTOTYPE1(FN) \\\n+ if (signbit(FN(d1)) || signbitf(FN##f(f1)) || signbitl(FN##l(ld1))) \\\n+   link_failure_##FN()\n+\n+#define ITEST1(FN) \\\n+ extern void link_failure_##FN (void); IPROTOTYPE(FN) \\\n+ if (signbit(FN(d1)) || signbitf(FN##l(f1)) || signbitl(FN##ll(ld1))) \\\n+   link_failure_##FN()\n+\n+  TEST1 (acos);\n+  TEST1 (acosh);\n+  CTEST1 (cabs);\n+  TEST1 (cosh);\n+  TEST1 (erfc);\n+  TEST1 (exp);\n+  TEST1 (exp10);\n+  TEST1 (exp2);\n+  TEST1 (fabs);\n+  TEST2 (fdim);\n+  TEST2 (hypot);\n+  TEST1 (pow10);\n+  TEST1 (sqrt);\n+  ITEST1 (ffs);\n+  ITEST1 (__builtin_parity);\n+  ITEST1 (__builtin_popcount);\n+\n+  /* These are nonnegative if the first argument is.  */\n+#define ARG1TEST1(FN) \\\n+ extern void link_failure_##FN (void); PROTOTYPE(FN) \\\n+ if (signbit(FN(fabs(d1))) || signbitf(FN##f(fabsf(f1))) \\\n+     || signbitl(FN##l(fabsl(ld1)))) \\\n+   link_failure_##FN()\n+\n+  /* Same, but allow specifying the return type.  */\n+#define ARG1TEST1_RTYPE(FN,RTYPE) \\\n+ extern void link_failure_##FN (void); PROTOTYPE_RTYPE(FN,RTYPE) \\\n+ if (signbit(FN(fabs(d1))) || signbitf(FN##f(fabsf(f1))) \\\n+     || signbitl(FN##l(fabsl(ld1)))) \\\n+   link_failure_##FN()\n+\n+  /* These are nonnegative if the first argument is.  */\n+#define ARG1TEST2(FN) \\\n+ extern void link_failure_##FN (void); PROTOTYPE2(FN) \\\n+ if (signbit(FN(fabs(d1),d2)) || signbitf(FN##f(fabsf(f1),f2)) \\\n+     || signbitl(FN##l(fabsl(ld1),ld2))) \\\n+   link_failure_##FN()\n+\n+  /* These are nonnegative if the second argument is.  */\n+#define ARG2TEST2(FN) \\\n+ extern void link_failure_##FN (void); PROTOTYPE2(FN) \\\n+ if (signbit(FN(d1,fabs(d2))) || signbitf(FN##f(f1,fabsf(f2))) \\\n+     || signbitl(FN##l(ld1,fabsl(ld2)))) \\\n+   link_failure_##FN()\n+\n+  /* These are nonnegative if the first OR second argument is.  */\n+#define ARG2TESTor(FN) \\\n+ extern void link_failure_##FN (void); PROTOTYPE2(FN) \\\n+ if (signbit(FN(fabs(d1),d2)) || signbitf(FN##f(fabsf(f1),f2)) \\\n+     || signbitl(FN##l(fabsl(ld1),ld2)) || signbit(FN(d1,fabs(d2))) \\\n+     || signbitf(FN##f(f1,fabsf(f2))) || signbitl(FN##l(ld1,fabsl(ld2)))) \\\n+   link_failure_##FN()\n+\n+  /* These are nonnegative if the first AND second argument is.  */\n+#define ARG2TESTand(FN) \\\n+ extern void link_failure_##FN (void); PROTOTYPE2(FN) \\\n+ if (signbit(FN(fabs(d1),fabs(d2))) || signbitf(FN##f(fabsf(f1),fabsf(f2))) \\\n+     || signbitl(FN##l(fabsl(ld1),fabsl(ld2)))) \\\n+   link_failure_##FN()\n+\n+  /* These are nonnegative if the first argument is, 2nd arg is int.  */\n+#define ARG2TEST1_A2INT(FN) \\\n+ extern void link_failure_##FN (void); PROTOTYPE2TYPE2(FN, int) \\\n+ if (signbit(FN(fabs(d1),d2)) || signbitf(FN##f(fabsf(f1),f2)) \\\n+     || signbitl(FN##l(fabsl(ld1),ld2))) \\\n+   link_failure_##FN()\n+\n+  /* These are nonnegative if the first argument is, specify 2nd arg.  */\n+#define ARG2TEST1_A2FPTR(FN) \\\n+ extern void link_failure_##FN (void); PROTOTYPE2_A2FPTR(FN) \\\n+ if (signbit(FN(fabs(d1),&d2)) || signbitf(FN##f(fabsf(f1),&f2)) \\\n+     || signbitl(FN##l(fabsl(ld1),&ld2))) \\\n+   link_failure_##FN()\n+\n+  ARG1TEST1 (asinh);\n+  ARG1TEST1 (atan);\n+  ARG1TEST1 (atanh);\n+  ARG1TEST1 (cbrt);\n+  ARG1TEST1 (ceil);\n+  ARG1TEST1 (erf);\n+  ARG1TEST1 (expm1);\n+  ARG1TEST1 (floor);\n+  ARG1TEST2 (fmod);\n+  ARG2TEST1_A2INT (ldexp);\n+  ARG1TEST1_RTYPE (llrint, long long);\n+  ARG1TEST1_RTYPE (llround, long long);\n+  ARG1TEST1_RTYPE (lrint, long);\n+  ARG1TEST1_RTYPE (lround, long);\n+  /* The modf* functions aren't ever \"const\" or \"pure\" even with\n+     -ffast-math so they won't be eliminated and yield a link failure.  */\n+  /* ARG2TEST1_A2FPTR (modf);*/\n+  ARG1TEST1 (nearbyint);\n+  ARG1TEST2 (pow);\n+  ARG1TEST1 (rint);\n+  ARG1TEST1 (round);\n+  ARG1TEST1_RTYPE (signbit, int);\n+  ARG1TEST1 (sinh);\n+  ARG1TEST1 (tanh);\n+  ARG1TEST1 (trunc);\n+\n+  ARG2TESTor (fmax);\n+  ARG2TESTand (fmin);\n+  ARG2TEST2 (copysign);\n+\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}"}]}