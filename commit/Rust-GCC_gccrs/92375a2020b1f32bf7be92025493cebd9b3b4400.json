{"sha": "92375a2020b1f32bf7be92025493cebd9b3b4400", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIzNzVhMjAyMGIxZjMyYmY3YmU5MjAyNTQ5M2NlYmQ5YjNiNDQwMA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-04-22T08:34:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-04-22T08:34:41Z"}, "message": "re PR fortran/43829 (Scalarization of reductions)\n\n2010-04-22  Richard Guenther  <rguenther@suse.de>\n\n\tPR fortran/43829\n\t* resolve.c (gfc_resolve_index): Wrap around ...\n\t(gfc_resolve_index_1): ... this.  Add parameter to allow\n\tany integer kind index type.\n\t(resolve_array_ref): Allow any integer kind for the start\n\tindex of an array ref.\n\n\t* gfortran.dg/vector_subscript_6.f90: New testcase.\n\t* gfortran.dg/assign_10.f90: Adjust.\n\nFrom-SVN: r158632", "tree": {"sha": "3b644ac3468bdfc3f3d146ccfd9417222f96a056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b644ac3468bdfc3f3d146ccfd9417222f96a056"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92375a2020b1f32bf7be92025493cebd9b3b4400", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92375a2020b1f32bf7be92025493cebd9b3b4400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92375a2020b1f32bf7be92025493cebd9b3b4400", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92375a2020b1f32bf7be92025493cebd9b3b4400/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c334c130bd67d51f03327e14a05ca4ba6b38be20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c334c130bd67d51f03327e14a05ca4ba6b38be20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c334c130bd67d51f03327e14a05ca4ba6b38be20"}], "stats": {"total": 78, "additions": 70, "deletions": 8}, "files": [{"sha": "1c77717b4e83e54881e64e5d4563778b4eb2aa73", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92375a2020b1f32bf7be92025493cebd9b3b4400/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92375a2020b1f32bf7be92025493cebd9b3b4400/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=92375a2020b1f32bf7be92025493cebd9b3b4400", "patch": "@@ -1,3 +1,12 @@\n+2010-04-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR fortran/43829\n+\t* resolve.c (gfc_resolve_index): Wrap around ...\n+\t(gfc_resolve_index_1): ... this.  Add parameter to allow\n+\tany integer kind index type.\n+\t(resolve_array_ref): Allow any integer kind for the start\n+\tindex of an array ref.\n+\n 2010-04-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/43836"}, {"sha": "aeccffb60ca09935d53756e04089380650fbfeeb", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92375a2020b1f32bf7be92025493cebd9b3b4400/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92375a2020b1f32bf7be92025493cebd9b3b4400/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=92375a2020b1f32bf7be92025493cebd9b3b4400", "patch": "@@ -3978,8 +3978,9 @@ compare_spec_to_ref (gfc_array_ref *ar)\n \n /* Resolve one part of an array index.  */\n \n-gfc_try\n-gfc_resolve_index (gfc_expr *index, int check_scalar)\n+static gfc_try\n+gfc_resolve_index_1 (gfc_expr *index, int check_scalar,\n+\t\t     int force_index_integer_kind)\n {\n   gfc_typespec ts;\n \n@@ -4007,7 +4008,8 @@ gfc_resolve_index (gfc_expr *index, int check_scalar)\n \t\t\t&index->where) == FAILURE)\n       return FAILURE;\n \n-  if (index->ts.kind != gfc_index_integer_kind\n+  if ((index->ts.kind != gfc_index_integer_kind\n+       && force_index_integer_kind)\n       || index->ts.type != BT_INTEGER)\n     {\n       gfc_clear_ts (&ts);\n@@ -4020,6 +4022,14 @@ gfc_resolve_index (gfc_expr *index, int check_scalar)\n   return SUCCESS;\n }\n \n+/* Resolve one part of an array index.  */\n+\n+gfc_try\n+gfc_resolve_index (gfc_expr *index, int check_scalar)\n+{\n+  return gfc_resolve_index_1 (index, check_scalar, 1);\n+}\n+\n /* Resolve a dim argument to an intrinsic function.  */\n \n gfc_try\n@@ -4144,7 +4154,10 @@ resolve_array_ref (gfc_array_ref *ar)\n     {\n       check_scalar = ar->dimen_type[i] == DIMEN_RANGE;\n \n-      if (gfc_resolve_index (ar->start[i], check_scalar) == FAILURE)\n+      /* Do not force gfc_index_integer_kind for the start.  We can\n+         do fine with any integer kind.  This avoids temporary arrays\n+\t created for indexing with a vector.  */\n+      if (gfc_resolve_index_1 (ar->start[i], check_scalar, 0) == FAILURE)\n \treturn FAILURE;\n       if (gfc_resolve_index (ar->end[i], check_scalar) == FAILURE)\n \treturn FAILURE;"}, {"sha": "199eb23b6ace8da501464bd0d62a5f57a68abe03", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92375a2020b1f32bf7be92025493cebd9b3b4400/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92375a2020b1f32bf7be92025493cebd9b3b4400/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=92375a2020b1f32bf7be92025493cebd9b3b4400", "patch": "@@ -2434,6 +2434,7 @@ gfc_conv_array_index_offset (gfc_se * se, gfc_ss_info * info, int dim, int i,\n \t\t\t\t\t  gfc_conv_array_data (desc));\n \t  index = gfc_build_array_ref (data, index, NULL);\n \t  index = gfc_evaluate_now (index, &se->pre);\n+\t  index = fold_convert (gfc_array_index_type, index);\n \n \t  /* Do any bounds checking on the final info->descriptor index.  */\n \t  index = gfc_trans_array_bound_check (se, info->descriptor,"}, {"sha": "74480cb3d154a57c0cdb47f98161ee8bd46d5395", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92375a2020b1f32bf7be92025493cebd9b3b4400/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92375a2020b1f32bf7be92025493cebd9b3b4400/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92375a2020b1f32bf7be92025493cebd9b3b4400", "patch": "@@ -1,3 +1,9 @@\n+2010-04-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR fortran/43829\n+\t* gfortran.dg/vector_subscript_6.f90: New testcase.\n+\t* gfortran.dg/assign_10.f90: Adjust.\n+\n 2010-04-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/43836"}, {"sha": "e52302556fe401345833b01fbd9689d3af9d94a0", "filename": "gcc/testsuite/gfortran.dg/assign_10.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92375a2020b1f32bf7be92025493cebd9b3b4400/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92375a2020b1f32bf7be92025493cebd9b3b4400/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_10.f90?ref=92375a2020b1f32bf7be92025493cebd9b3b4400", "patch": "@@ -19,10 +19,10 @@\n   if (any(p8 .ne. q8)) call abort ()\n end\n ! Whichever is the default length for array indices will yield\n-! parm 9 times, because a temporary is not necessary.  The other\n-! cases will all yield a temporary, so that atmp appears 27 times.\n+! parm 18 times, because a temporary is not necessary.  The other\n+! cases will all yield a temporary, so that atmp appears 18 times.\n ! Note that it is the kind conversion that generates the temp.\n !\n-! { dg-final { scan-tree-dump-times \"parm\" 9 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"atmp\" 27 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"parm\" 18 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"atmp\" 18 \"original\" } }\n ! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "51613d11368c1173c798fbdeca78d13279742fe0", "filename": "gcc/testsuite/gfortran.dg/vector_subscript_6.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92375a2020b1f32bf7be92025493cebd9b3b4400/gcc%2Ftestsuite%2Fgfortran.dg%2Fvector_subscript_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92375a2020b1f32bf7be92025493cebd9b3b4400/gcc%2Ftestsuite%2Fgfortran.dg%2Fvector_subscript_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvector_subscript_6.f90?ref=92375a2020b1f32bf7be92025493cebd9b3b4400", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+\n+subroutine test0(esss,Ix, e_x)\n+  real(kind=kind(1.0d0)), dimension(:), intent(out) :: esss\n+  real(kind=kind(1.0d0)), dimension(:), intent(in) :: Ix\n+  integer(kind=kind(1)), dimension(:), intent(in) :: e_x\n+  esss = Ix(e_x)\n+end subroutine\n+\n+subroutine test1(esss,Ix, e_x)\n+  real(kind=kind(1.0d0)), dimension(:), intent(out) :: esss\n+  real(kind=kind(1.0d0)), dimension(:), intent(in) :: Ix\n+  integer(kind=4), dimension(:), intent(in) :: e_x\n+  esss = Ix(e_x)\n+end subroutine\n+\n+subroutine test2(esss,Ix, e_x)\n+  real(kind=kind(1.0d0)), dimension(:), intent(out) :: esss\n+  real(kind=kind(1.0d0)), dimension(:), intent(in) :: Ix\n+  integer(kind=8), dimension(:), intent(in) :: e_x\n+  esss = Ix(e_x)\n+end subroutine\n+\n+subroutine test3(esss,Ix,Iyz, e_x, ii_ivec)\n+  real(kind=kind(1.0d0)), dimension(:), intent(out) :: esss\n+  real(kind=kind(1.0d0)), dimension(:), intent(in) :: Ix,Iyz\n+  integer(kind=kind(1)), dimension(:), intent(in) :: e_x,ii_ivec\n+  esss = esss + Ix(e_x) * Iyz(ii_ivec)\n+end subroutine\n+\n+! { dg-final { scan-tree-dump-not \"malloc\" \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}