{"sha": "4aa9a167270c937b66fa023f46cc05c05e93b0e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFhOWExNjcyNzBjOTM3YjY2ZmEwMjNmNDZjYzA1YzA1ZTkzYjBlMA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-08-11T20:25:11Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-08-11T20:25:11Z"}, "message": "Always insert out of SSA copies on edges except for loop->latch.\n\n2010-06-23  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-sese-to-poly.c (rewrite_phi_out_of_ssa): Always insert out\n\tof SSA copies on edges except for loop->latch.\n\nFrom-SVN: r163123", "tree": {"sha": "278063ed706e6a647ff85331811bd1901bc9b033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/278063ed706e6a647ff85331811bd1901bc9b033"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4aa9a167270c937b66fa023f46cc05c05e93b0e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa9a167270c937b66fa023f46cc05c05e93b0e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aa9a167270c937b66fa023f46cc05c05e93b0e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa9a167270c937b66fa023f46cc05c05e93b0e0/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee646fc62bdea6e5df4fdc12dc8de143808c0bfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee646fc62bdea6e5df4fdc12dc8de143808c0bfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee646fc62bdea6e5df4fdc12dc8de143808c0bfe"}], "stats": {"total": 64, "additions": 15, "deletions": 49}, "files": [{"sha": "3e634e76a615a15c00e8c5750c7b9102833155cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa9a167270c937b66fa023f46cc05c05e93b0e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa9a167270c937b66fa023f46cc05c05e93b0e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4aa9a167270c937b66fa023f46cc05c05e93b0e0", "patch": "@@ -1,3 +1,8 @@\n+2010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-sese-to-poly.c (rewrite_phi_out_of_ssa): Always insert out\n+\tof SSA copies on edges except for loop->latch.\n+\n 2010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-sese-to-poly.c (rewrite_cross_bb_scalar_deps_out_of_ssa):"}, {"sha": "47cf9244d32ac39a2d164120a49a9d3a5abd0876", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa9a167270c937b66fa023f46cc05c05e93b0e0/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa9a167270c937b66fa023f46cc05c05e93b0e0/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=4aa9a167270c937b66fa023f46cc05c05e93b0e0", "patch": "@@ -1,3 +1,8 @@\n+2010-06-23  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-sese-to-poly.c (rewrite_phi_out_of_ssa): Always insert out\n+\tof SSA copies on edges except for loop->latch.\n+\n 2010-06-23  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-sese-to-poly.c (rewrite_cross_bb_scalar_deps_out_of_ssa):"}, {"sha": "75879ed7e0c5f08495ec245dbb11810deed179e7", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 5, "deletions": 49, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa9a167270c937b66fa023f46cc05c05e93b0e0/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa9a167270c937b66fa023f46cc05c05e93b0e0/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=4aa9a167270c937b66fa023f46cc05c05e93b0e0", "patch": "@@ -2246,58 +2246,14 @@ rewrite_phi_out_of_ssa (gimple_stmt_iterator *psi)\n   for (i = 0; i < gimple_phi_num_args (phi); i++)\n     {\n       tree arg = gimple_phi_arg_def (phi, i);\n+      edge e = gimple_phi_arg_edge (phi, i);\n \n-      /* Try to avoid the insertion on edges as much as possible: this\n-\t would avoid the insertion of code on loop latch edges, making\n-\t the pattern matching of the vectorizer happy, or it would\n-\t avoid the insertion of useless basic blocks.  Note that it is\n-\t incorrect to insert out of SSA copies close by their\n-\t definition when they are more than two loop levels apart:\n-\t for example, starting from a double nested loop\n-\n-\t | a = ...\n-\t | loop_1\n-\t |  loop_2\n-\t |    b = phi (a, c)\n-\t |    c = ...\n-\t |  end_2\n-\t | end_1\n-\n-\t the following transform is incorrect\n-\n-\t | a = ...\n-\t | Red[0] = a\n-\t | loop_1\n-\t |  loop_2\n-\t |    b = Red[0]\n-\t |    c = ...\n-\t |    Red[0] = c\n-\t |  end_2\n-\t | end_1\n-\n-\t whereas inserting the copy on the incoming edge is correct\n-\n-\t | a = ...\n-\t | loop_1\n-\t |  Red[0] = a\n-\t |  loop_2\n-\t |    b = Red[0]\n-\t |    c = ...\n-\t |    Red[0] = c\n-\t |  end_2\n-\t | end_1\n-      */\n-      if (TREE_CODE (arg) == SSA_NAME\n-\t  && is_gimple_reg (arg)\n-\t  && gimple_bb (SSA_NAME_DEF_STMT (arg))\n-\t  && (flow_bb_inside_loop_p (bb->loop_father,\n-\t\t\t\t     gimple_bb (SSA_NAME_DEF_STMT (arg)))\n-\t      || flow_bb_inside_loop_p (loop_outer (bb->loop_father),\n-\t\t\t\t\tgimple_bb (SSA_NAME_DEF_STMT (arg)))))\n+      /* Avoid the insertion of code in the loop latch to please the\n+\t pattern matching of the vectorizer.  */\n+      if (e->src == bb->loop_father->latch)\n \tinsert_out_of_ssa_copy (zero_dim_array, arg, SSA_NAME_DEF_STMT (arg));\n       else\n-\tinsert_out_of_ssa_copy_on_edge (gimple_phi_arg_edge (phi, i),\n-\t\t\t\t\tzero_dim_array, arg);\n+\tinsert_out_of_ssa_copy_on_edge (e, zero_dim_array, arg);\n     }\n \n   var = force_gimple_operand (zero_dim_array, &stmts, true, NULL_TREE);"}]}