{"sha": "4f82fed2f6dcef2719103a5fd885f6baf9714ce0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY4MmZlZDJmNmRjZWYyNzE5MTAzYTVmZDg4NWY2YmFmOTcxNGNlMA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2014-06-30T14:08:50Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-06-30T14:08:50Z"}, "message": "tree-ssa-threadedge.c (simplify_control_stmt_condition): Look deeper into the SSA_NAME_VALUE chain.\n\n\ttree-optimization/61607\n\t* tree-ssa-threadedge.c (simplify_control_stmt_condition): Look\n\tdeeper into the SSA_NAME_VALUE chain.\n\n\ttree-optimization/61607\n\t* gcc.dg/tree-ssa/pr61607.c: New test.\n\nFrom-SVN: r212149", "tree": {"sha": "7d30196f8f6b6532d8b2f5d5c29c5fa282e12b31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d30196f8f6b6532d8b2f5d5c29c5fa282e12b31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f82fed2f6dcef2719103a5fd885f6baf9714ce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f82fed2f6dcef2719103a5fd885f6baf9714ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f82fed2f6dcef2719103a5fd885f6baf9714ce0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f82fed2f6dcef2719103a5fd885f6baf9714ce0/comments", "author": null, "committer": null, "parents": [{"sha": "6a7253a4a9d6087827414eeee7036d9eb4b1e472", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a7253a4a9d6087827414eeee7036d9eb4b1e472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a7253a4a9d6087827414eeee7036d9eb4b1e472"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "61df10df8d6debd69d9a6c0c2000ed4bb74b633b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f82fed2f6dcef2719103a5fd885f6baf9714ce0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f82fed2f6dcef2719103a5fd885f6baf9714ce0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f82fed2f6dcef2719103a5fd885f6baf9714ce0", "patch": "@@ -1,3 +1,9 @@\n+2014-06-30  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/61607\n+\t* tree-ssa-threadedge.c (simplify_control_stmt_condition): Look\n+\tdeeper into the SSA_NAME_VALUE chain.\n+\n 2014-06-30  Marek Polacek  <polacek@redhat.com>\n \n \t* convert.c (convert_to_integer): Don't instrument conversions if the"}, {"sha": "4c4b683aec9d3c14469969a0248f59624ace459b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f82fed2f6dcef2719103a5fd885f6baf9714ce0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f82fed2f6dcef2719103a5fd885f6baf9714ce0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f82fed2f6dcef2719103a5fd885f6baf9714ce0", "patch": "@@ -1,3 +1,8 @@\n+2014-06-30  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/61607\n+\t* gcc.dg/tree-ssa/pr61607.c: New test.\n+\n 2014-06-30  Marek Polacek  <polacek@redhat.com>\n \n \t* c-c++-common/ubsan/attrib-2.c: New test."}, {"sha": "924d686c34edc13eb84aa09050c0d111bf109860", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61607.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f82fed2f6dcef2719103a5fd885f6baf9714ce0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61607.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f82fed2f6dcef2719103a5fd885f6baf9714ce0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61607.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61607.c?ref=4f82fed2f6dcef2719103a5fd885f6baf9714ce0", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fno-tree-fre -fdump-tree-dom1\" } */\n+\n+void foo(int *);\n+void f2(int dst[3], int R)\n+{\n+  int i, inter[2];\n+  _Bool inter0p = 0;\n+  _Bool inter1p = 0;\n+  for (i = 1; i < R; i++)\n+    {\n+      inter0p = 1;\n+      inter1p = 1;\n+    }\n+  if (inter0p)\n+    inter[0] = 1;\n+  if (inter1p)\n+    inter[1] = 1;\n+  foo(inter);\n+}\n+\n+\n+/* There should be precisely two conditionals.  One for the loop condition\n+   and one for the test after the loop.  Previously we failed to eliminate\n+   the second conditional after the loop.  */\n+/* { dg-final { scan-tree-dump-times \"if\" 2 \"dom1\"} } */\n+\n+/* { dg-final { cleanup-tree-dump \"dom1\" } } */\n+"}, {"sha": "9807b421c74e80cae5963786214fa166d0fe8009", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f82fed2f6dcef2719103a5fd885f6baf9714ce0/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f82fed2f6dcef2719103a5fd885f6baf9714ce0/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=4f82fed2f6dcef2719103a5fd885f6baf9714ce0", "patch": "@@ -542,16 +542,26 @@ simplify_control_stmt_condition (edge e,\n       /* Get the current value of both operands.  */\n       if (TREE_CODE (op0) == SSA_NAME)\n \t{\n-          tree tmp = SSA_NAME_VALUE (op0);\n-\t  if (tmp)\n-\t    op0 = tmp;\n+\t  for (int i = 0; i < 2; i++)\n+\t    {\n+\t      if (TREE_CODE (op0) == SSA_NAME\n+\t\t  && SSA_NAME_VALUE (op0))\n+\t\top0 = SSA_NAME_VALUE (op0);\n+\t      else\n+\t\tbreak;\n+\t    }\n \t}\n \n       if (TREE_CODE (op1) == SSA_NAME)\n \t{\n-\t  tree tmp = SSA_NAME_VALUE (op1);\n-\t  if (tmp)\n-\t    op1 = tmp;\n+\t  for (int i = 0; i < 2; i++)\n+\t    {\n+\t      if (TREE_CODE (op1) == SSA_NAME\n+\t\t  && SSA_NAME_VALUE (op1))\n+\t\top1 = SSA_NAME_VALUE (op1);\n+\t      else\n+\t\tbreak;\n+\t    }\n \t}\n \n       if (handle_dominating_asserts)\n@@ -625,10 +635,17 @@ simplify_control_stmt_condition (edge e,\n \t It is possible to get loops in the SSA_NAME_VALUE chains\n \t (consider threading the backedge of a loop where we have\n \t a loop invariant SSA_NAME used in the condition.  */\n-      if (cached_lhs\n-\t  && TREE_CODE (cached_lhs) == SSA_NAME\n-\t  && SSA_NAME_VALUE (cached_lhs))\n-\tcached_lhs = SSA_NAME_VALUE (cached_lhs);\n+      if (cached_lhs)\n+\t{\n+\t  for (int i = 0; i < 2; i++)\n+\t    {\n+\t      if (TREE_CODE (cached_lhs) == SSA_NAME\n+\t\t  && SSA_NAME_VALUE (cached_lhs))\n+\t\tcached_lhs = SSA_NAME_VALUE (cached_lhs);\n+\t      else\n+\t\tbreak;\n+\t    }\n+\t}\n \n       /* If we're dominated by a suitable ASSERT_EXPR, then\n \t update CACHED_LHS appropriately.  */"}]}