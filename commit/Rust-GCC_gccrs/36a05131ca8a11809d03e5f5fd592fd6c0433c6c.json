{"sha": "36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZhMDUxMzFjYThhMTE4MDlkMDNlNWY1ZmQ1OTJmZDZjMDQzM2M2Yw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2002-08-04T19:37:03Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2002-08-04T19:37:03Z"}, "message": "Add the FRV port\n\nFrom-SVN: r56029", "tree": {"sha": "fd118f23a2acc750a457dec8225caeff9ef17182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd118f23a2acc750a457dec8225caeff9ef17182"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/comments", "author": null, "committer": null, "parents": [{"sha": "37b8715b5bd67e1ee69ec1b8b1be0153a1106ced", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b8715b5bd67e1ee69ec1b8b1be0153a1106ced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b8715b5bd67e1ee69ec1b8b1be0153a1106ced"}], "stats": {"total": 22549, "additions": 22549, "deletions": 0}, "files": [{"sha": "7680b13633d850077cf8496b9ebdc781a2306353", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -1,3 +1,31 @@\n+2002-08-04  Bernd Schmidt  <bernds@redhat.com>\n+\n+\tContribute a port developed primarily by Michael Meissner,\n+\tCatherine Moore, and Richard Sandiford <rsandifo@redhat.com>.\n+\t* config.gcc: Add frv-elf target.\n+\t* config/frv/cmovd.c: New file.\n+\t* config/frv/cmovh.c: New file.\n+\t* config/frv/cmovw.c: New file.\n+\t* config/frv/frv-abi.h: New file.\n+\t* config/frv/frv-asm.h: New file.\n+\t* config/frv/frv-modes.def: New file.\n+\t* config/frv/frv-protos.h: New file.\n+\t* config/frv/frv.c: New file.\n+\t* config/frv/frv.h: New file.\n+\t* config/frv/frv.md: New file.\n+\t* config/frv/frvbegin.c: New file.\n+\t* config/frv/frvend.c: New file.\n+\t* config/frv/lib1funcs.asm: New file.\n+\t* config/frv/media.h: New file.\n+\t* config/frv/modi.c: New file.\n+\t* config/frv/t-frv: New file.\n+\t* config/frv/uitod.c: New file.\n+\t* config/frv/uitof.c: New file.\n+\t* config/frv/ulltod.c: New file.\n+\t* config/frv/ulltof.c: New file.\n+\t* config/frv/umodi.c: New file.\n+\t* config/frv/xm-frv.h: New file.\n+\t\t\n 2002-08-04  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* gcov.c (bb_file_time): New static variable."}, {"sha": "5b8e6ea40b82703b1d6cb19abcb194b692e2a361", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -717,6 +717,10 @@ fr30-*-elf)\n \ttmake_file=fr30/t-fr30\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \t;;\n+frv-*-elf)\n+\ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file} frv/frv-abi.h\"\n+\ttmake_file=frv/t-frv\n+\t;;\n h8300-*-rtems*)\n \txm_defines=POSIX\n \ttmake_file=\"h8300/t-h8300 t-rtems\""}, {"sha": "11b50ba0dcc4c890fef63581c0cfb84a71520951", "filename": "gcc/config/frv/cmovd.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fcmovd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fcmovd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Fcmovd.c?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,47 @@\n+/* Move double-word library function.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Contributed by Red Hat, Inc.\n+  \n+   This file is part of GNU CC.\n+  \n+   GNU CC is free software ; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation * either version 2, or (at your option)\n+   any later version.\n+  \n+   GNU CC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY ; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+  \n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+void\n+__cmovd (long long *dest, const long long *src, unsigned len)\n+{\n+  unsigned i;\n+  unsigned num = len >> 3;\n+  unsigned xlen = len & ~7;\n+  char *dest_byte = (char *)dest;\n+  const char *src_byte = (const char *)src;\n+\n+  if (dest_byte < src_byte || dest_byte > src_byte+len)\n+    {\n+      for (i = 0; i < num; i++)\n+\tdest[i] = src[i];\n+\n+      while (len > xlen)\n+\t{\n+\t  dest_byte[xlen] = src_byte[xlen];\n+\t  xlen++;\n+\t}\n+    }\n+  else\n+    {\n+      while (len-- > 0)\n+\tdest_byte[len] = src_byte[len];\n+    }\n+}"}, {"sha": "018a0b448ac1fa4765c42a8bb964b84c902a56de", "filename": "gcc/config/frv/cmovh.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fcmovh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fcmovh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Fcmovh.c?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,43 @@\n+/* Move half-word library function.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Contributed by Red Hat, Inc.\n+  \n+   This file is part of GNU CC.\n+  \n+   GNU CC is free software ; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation * either version 2, or (at your option)\n+   any later version.\n+  \n+   GNU CC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY ; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+  \n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+void\n+__cmovh (short *dest, const short *src, unsigned len)\n+{\n+  unsigned i;\n+  unsigned num = len >> 1;\n+  char *dest_byte = (char *)dest;\n+  const char *src_byte = (const char *)src;\n+\n+  if (dest_byte < src_byte || dest_byte > src_byte+len)\n+    {\n+      for (i = 0; i < num; i++)\n+\tdest[i] = src[i];\n+\n+      if ((len & 1) != 0)\n+\tdest_byte[len-1] = src_byte[len-1];\n+    }\n+  else\n+    {\n+      while (len-- > 0)\n+\tdest_byte[len] = src_byte[len];\n+    }\n+}"}, {"sha": "5509e068e41197d4df0dce55b59e43ae7da1e3b2", "filename": "gcc/config/frv/cmovw.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fcmovw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fcmovw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Fcmovw.c?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,47 @@\n+/* Move word library function.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Contributed by Red Hat, Inc.\n+  \n+   This file is part of GNU CC.\n+  \n+   GNU CC is free software ; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation * either version 2, or (at your option)\n+   any later version.\n+  \n+   GNU CC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY ; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+  \n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+void\n+__cmovw (int *dest, const int *src, unsigned len)\n+{\n+  unsigned i;\n+  unsigned num = len >> 2;\n+  unsigned xlen = len & ~3;\n+  char *dest_byte = (char *)dest;\n+  const char *src_byte = (const char *)src;\n+\n+  if (dest_byte < src_byte || dest_byte > src_byte+len)\n+    {\n+      for (i = 0; i < num; i++)\n+\tdest[i] = src[i];\n+\n+      while (len > xlen)\n+\t{\n+\t  dest_byte[xlen] = src_byte[xlen];\n+\t  xlen++;\n+\t}\n+    }\n+  else\n+    {\n+      while (len-- > 0)\n+\tdest_byte[len] = src_byte[len];\n+    }\n+}"}, {"sha": "68fd32fb128ef15999e1225e35b4910087799db0", "filename": "gcc/config/frv/frv-abi.h", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrv-abi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrv-abi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-abi.h?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,181 @@\n+/* Frv map GCC names to FR-V ABI.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Contributed by Red Hat, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* For each of the functions in the library that has a corresponding name in\n+   the ABI, add an equivalence between the GCC name and the ABI name.  This is\n+   in a separate file from frv.h so that fp-bit.c can be made to include it.  */\n+\n+#ifdef __GNUC__\n+#ifdef __FRV_UNDERSCORE__\n+#define RENAME_LIBRARY(OLD,NEW)\t\t\t\t\t\t\\\n+__asm__ (\".globl\\t_\" #NEW \"\\n\"\t\t\t\t\t\t\\\n+\t \"_\" #NEW \"=_\" #OLD \"\\n\"\t\t\t\t\t\\\n+\t \"\\t.type\\t_\" #NEW \",@function\\n\");\n+\n+#else\n+#define RENAME_LIBRARY(OLD,NEW)\t\t\t\t\t\t\\\n+__asm__ (\".globl\\t\" #NEW \"\\n\"\t\t\t\t\t\t\\\n+\t #NEW \"=\" #OLD \"\\n\"\t\t\t\t\t\t\\\n+\t \"\\t.type\\t\" #NEW \",@function\\n\");\n+#endif\n+\n+#define CREATE_DOUBLE_SHIFT(OLD,NEW)\t\t\t\t\t\\\n+__asm__ (\".text\\n\"\t\t\t\t\t\t\t\\\n+\t \"\\t.globl\\t\" #NEW \"\\n\"\t\t\t\t\t\t\\\n+\t \"\\t.type\\t\" #NEW \",@function\\n\"\t\t\t\t\\\n+\t #NEW \":\\n\"\t\t\t\t\t\t\t\\\n+\t \"\\tor\\tgr11, gr0, gr10\\n\"\t\t\t\t\t\\\n+\t \"\\tbra\\t\" #OLD \"\\n\");\n+\n+#ifdef L_sf_to_df\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__extendsfdf2,__ftod)\n+#endif\n+\n+#ifdef L_sf_to_si\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__fixsfsi,__ftoi)\n+#endif\n+\n+#ifdef L_sf_to_usi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__fixunssfsi,__ftoui)\n+#endif\n+\n+#ifdef L_df_to_si\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__fixdfsi,__dtoi)\n+#endif\n+\n+#ifdef L_fixunssfsi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__fixunssfsi,__ftoui)\n+#endif\n+\n+#ifdef L_fixunsdfsi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__fixunsdfsi,__dtoui)\n+#endif\n+\n+#ifdef L_fixsfdi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__fixsfdi,__ftoll)\n+#endif\n+\n+#ifdef L_fixdfdi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__fixdfdi,__dtoll)\n+#endif\n+\n+#ifdef L_fixunssfdi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__fixunssfdi,__ftoull)\n+#endif\n+\n+#ifdef L_fixunsdfdi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__fixunsdfdi,__dtoull)\n+#endif\n+\n+#ifdef L_si_to_sf\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__floatsisf,__itof)\n+#endif\n+\n+#ifdef L_di_to_sf\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__floatdisf,__lltof)\n+#endif\n+\n+#ifdef L_df_to_sf\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__truncdfsf2,__dtof)\n+#endif\n+\n+#ifdef L_si_to_df\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__floatsidf,__itod)\n+#endif\n+\n+#ifdef L_floatdisf\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__floatdisf,__lltof)\n+#endif\n+\n+#ifdef L_floatdidf\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__floatdidf,__lltod)\n+#endif\n+\n+#ifdef L_addsub_df\n+#define DECLARE_LIBRARY_RENAMES \\\n+\tRENAME_LIBRARY(__adddf3,__addd)\n+\tRENAME_LIBRARY(__subdf3,__subd)\n+#endif\n+\n+#ifdef L_mul_df\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__muldf3,__muld)\n+#endif\n+\n+#ifdef L_div_df\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__divdf3,__divd)\n+#endif\n+\n+#ifdef L_addsub_sf\n+#define DECLARE_LIBRARY_RENAMES \\\n+\tRENAME_LIBRARY(__addsf3,__addf) \\\n+\tRENAME_LIBRARY(__subsf3,__subf)\n+#endif\n+\n+#ifdef L_mul_sf\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__mulsf3,__mulf)\n+#endif\n+\n+#ifdef L_div_sf\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__divsf3,__divf)\n+#endif\n+\n+#ifdef L_ashldi3\n+#define DECLARE_LIBRARY_RENAMES CREATE_DOUBLE_SHIFT (__ashldi3,__sllll)\n+#endif\n+\n+#ifdef L_lshrdi3\n+#define DECLARE_LIBRARY_RENAMES CREATE_DOUBLE_SHIFT (__lshrdi3,__srlll)\n+#endif\n+\n+#ifdef L_ashrdi3\n+#define DECLARE_LIBRARY_RENAMES CREATE_DOUBLE_SHIFT (__ashrdi3,__srall)\n+#endif\n+\n+#ifdef L_adddi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__adddi3,__addll)\n+#endif\n+\n+#ifdef L_subdi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__subdi3,__subll)\n+#endif\n+\n+#ifdef L_muldi3\n+#define DECLARE_LIBRARY_RENAMES \\\n+\tRENAME_LIBRARY(__muldi3,__mulll)\n+\tRENAME_LIBRARY(__muldi3,__umulll)\n+#endif\n+\n+#ifdef L_divdi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__divdi3,__divll)\n+#endif\n+\n+#ifdef L_udivdi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__udivdi3,__udivll)\n+#endif\n+\n+#ifdef L_moddi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__moddi3,__modll)\n+#endif\n+\n+#ifdef L_umoddi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY(__umoddi3,__umodll)\n+#endif\n+#endif /* __GNUC__ */"}, {"sha": "e8447a6093d2e5ec9efdb3bed6eff299f9be3416", "filename": "gcc/config/frv/frv-asm.h", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrv-asm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrv-asm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-asm.h?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,49 @@\n+/* Assembler Support.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Contributed by Red Hat, Inc.\n+  \n+   This file is part of GNU CC.\n+  \n+   GNU CC is free software ; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation * either version 2, or (at your option)\n+   any later version.\n+  \n+   GNU CC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY ; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+  \n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+/* P(INSN): Emit INSN.P for VLIW machines, otherwise emit plain INSN.\n+   P2(INSN): Emit INSN.P on the FR500 and above, otherwise emit plain INSN.  */\n+#ifdef __FRV_VLIW__\n+#ifdef __STDC__\n+#define P(A) A##.p\n+#else\n+#define P(A) A/**/.p\n+#endif\n+#if __FRV_VLIW__ > 2\n+#define P2(A) P(A)\n+#else\n+#define P2(A) A\n+#endif\n+#else\n+#define P(A) A\n+#define P2(A) A\n+#endif\n+\n+/* Add underscore if necessary to external name.  */\n+#ifdef __FRV_UNDERSCORE__\n+#ifdef __STDC__\n+#define EXT(NAME) _##NAME\n+#else\n+#define EXT(NAME) _/**/NAME\n+#endif\n+#else\n+#define EXT(NAME) NAME\n+#endif"}, {"sha": "ca7818c1d6023895e4dd9e15b0c4f470dc85c171", "filename": "gcc/config/frv/frv-modes.def", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrv-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrv-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-modes.def?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,30 @@\n+/* Definitions of target machine for GNU compiler for FRV.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* On the FRV, the CC modes used are:\n+\n+   CCmode\tset ICC's from comparing signed integers\n+   CC_UNSmode\tset ICC's from comparing unsigned integers\n+   CC_FPmode\tset FCC's from comparing floating point\n+   CC_CCRmode\tset CCR's to do conditional execution */\n+\n+CC (CC_UNS)\n+CC (CC_FP)\n+CC (CC_CCR)"}, {"sha": "d00a9b8eaa517e01423fb43b05ca4c9b8fd4e5f9", "filename": "gcc/config/frv/frv-protos.h", "status": "added", "additions": 266, "deletions": 0, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,266 @@\n+/* Frv prototypes.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Contributed by Red Hat, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Define the information needed to generate branch and scc insns.  This is\n+   stored from the compare operation.  Note that we can't use \"rtx\" here\n+   since it hasn't been defined!  */\n+\n+/* Define global data defined in frv.c */\n+extern const char *frv_branch_cost_string;\t/* -mbranch-cost option */\n+extern int frv_branch_cost_int;\t\t\t/* value of -mbranch_cost */\n+\n+extern const char *frv_cpu_string;\t\t/* -mcpu= option */\n+\n+extern const char *frv_condexec_insns_str;\t/* -mcond-exec-insns= option */\n+extern int frv_condexec_insns;\t\t\t/* value of -mcond-exec-insns */\n+\n+extern const char *frv_condexec_temps_str;\t/* -mcond-exec-temps= option */\n+extern int frv_condexec_temps;\t\t\t/* value of -mcond-exec-temps */\n+\n+extern const char *frv_sched_lookahead_str;\t/* -msched-lookahead= option */\n+extern int frv_sched_lookahead;\t\t\t/* value -msched-lookahead= */\n+\n+/* CPU type.  This must be identical to the cpu enumeration in frv.md.  */\n+typedef enum frv_cpu\n+{\n+  FRV_CPU_GENERIC,\n+  FRV_CPU_FR500,\n+  FRV_CPU_FR400,\n+  FRV_CPU_FR300,\n+  FRV_CPU_SIMPLE,\n+  FRV_CPU_TOMCAT\n+} frv_cpu_t;\n+\n+extern frv_cpu_t frv_cpu_type;\t\t\t/* value of -mcpu= */\n+\n+/* Define functions defined in frv.c */\n+extern void frv_expand_prologue\t\t\tPARAMS ((void));\n+extern void frv_expand_epilogue\t\t\tPARAMS ((int));\n+extern void frv_override_options\t\tPARAMS ((void));\n+extern void frv_optimization_options\t\tPARAMS ((int, int));\n+extern void frv_conditional_register_usage\tPARAMS ((void));\n+extern frv_stack_t *frv_stack_info\t\tPARAMS ((void));\n+extern void frv_debug_stack\t\t\tPARAMS ((frv_stack_t *));\n+extern int frv_frame_pointer_required\t\tPARAMS ((void));\n+extern int frv_initial_elimination_offset\tPARAMS ((int, int));\n+\n+#ifdef RTX_CODE\n+extern int frv_legitimate_address_p\t\tPARAMS ((enum machine_mode, rtx,\n+\t\t\t\t\t\t       int, int));\n+extern rtx frv_legitimize_address\t\tPARAMS ((rtx, rtx,\n+\t\t\t\t\t\t\t enum machine_mode));\n+\n+#ifdef TREE_CODE\n+extern void frv_init_builtins PARAMS ((void));\n+extern rtx frv_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n+\n+extern void frv_init_cumulative_args\t\tPARAMS ((CUMULATIVE_ARGS *, tree,\n+\t\t\t\t\t\t       rtx, int, int));\n+\n+extern int frv_function_arg_boundary\t\tPARAMS ((enum machine_mode, tree));\n+extern rtx frv_function_arg\t\t\tPARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t       enum machine_mode,\n+\t\t\t\t\t\t       tree, int, int));\n+\n+extern void frv_function_arg_advance\t\tPARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t       enum machine_mode,\n+\t\t\t\t\t\t       tree, int));\n+\n+extern int frv_function_arg_partial_nregs\tPARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t       enum machine_mode,\n+\t\t\t\t\t\t       tree, int));\n+\n+extern int frv_function_arg_pass_by_reference\tPARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t       enum machine_mode,\n+\t\t\t\t\t\t       tree, int));\n+\n+extern int frv_function_arg_callee_copies\tPARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t       enum machine_mode,\n+\t\t\t\t\t\t       tree, int));\n+\n+extern int frv_function_arg_keep_as_reference\tPARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t       enum machine_mode,\n+\t\t\t\t\t\t       tree, int));\n+\n+extern rtx frv_expand_builtin_saveregs\t\tPARAMS ((void));\n+extern void frv_setup_incoming_varargs\t\tPARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t\t enum machine_mode,\n+\t\t\t\t\t\t\t tree, int *, int));\n+\n+extern void frv_expand_builtin_va_start\t\tPARAMS ((tree, rtx));\n+extern rtx frv_expand_builtin_va_arg\t\tPARAMS ((tree, tree));\n+#endif /* TREE_CODE */\n+\n+extern int frv_expand_block_move\t\tPARAMS ((rtx *));\n+extern int frv_expand_block_clear\t\tPARAMS ((rtx *));\n+extern rtx frv_dynamic_chain_address\t\tPARAMS ((rtx));\n+extern rtx frv_return_addr_rtx\t\t\tPARAMS ((int, rtx));\n+extern rtx frv_index_memory\t\t\tPARAMS ((rtx,\n+\t\t\t\t\t\t\t enum machine_mode,\n+\t\t\t\t\t\t\t int));\n+\n+#ifdef TREE_CODE\n+extern void frv_asm_output_mi_thunk\t\tPARAMS ((FILE *, tree, long,\n+\t\t\t\t\t\t\t tree));\n+#endif\t/* TREE_CODE */\n+\n+extern const char *frv_asm_output_opcode\n+\t\t\t\t \tPARAMS ((FILE *, const char *));\n+extern void frv_final_prescan_insn\tPARAMS ((rtx, rtx *, int));\n+extern void frv_print_operand\t\tPARAMS ((FILE *, rtx, int));\n+extern void frv_print_operand_address\tPARAMS ((FILE *, rtx));\n+extern int frv_emit_movsi\t\tPARAMS ((rtx, rtx));\n+extern const char *output_move_single\tPARAMS ((rtx *, rtx));\n+extern const char *output_move_double\tPARAMS ((rtx *, rtx));\n+extern const char *output_condmove_single\n+\t\t\t\t\tPARAMS ((rtx *, rtx));\n+extern int frv_emit_cond_branch\t\tPARAMS ((enum rtx_code, rtx));\n+extern int frv_emit_scc\t\t\tPARAMS ((enum rtx_code, rtx));\n+extern rtx frv_split_scc\t\tPARAMS ((rtx, rtx, rtx, rtx,\n+\t\t\t\t\t\t HOST_WIDE_INT));\n+extern int frv_emit_cond_move\t\tPARAMS ((rtx, rtx, rtx, rtx));\n+extern rtx frv_split_cond_move\t\tPARAMS ((rtx *));\n+extern rtx frv_split_minmax\t\tPARAMS ((rtx *));\n+extern rtx frv_split_abs\t\tPARAMS ((rtx *));\n+extern void frv_split_double_load\tPARAMS ((rtx, rtx));\n+extern void frv_split_double_store\tPARAMS ((rtx, rtx));\n+#ifdef BLOCK_HEAD\n+extern void frv_ifcvt_init_extra_fields\tPARAMS ((ce_if_block_t *));\n+extern void frv_ifcvt_modify_tests\tPARAMS ((ce_if_block_t *,\n+\t\t\t\t\t\t rtx *, rtx *));\n+extern void frv_ifcvt_modify_multiple_tests\n+\t\t\t\t\tPARAMS ((ce_if_block_t *,\n+\t\t\t\t\t\t basic_block,\n+\t\t\t\t\t\t rtx *, rtx *));\n+extern rtx frv_ifcvt_modify_insn\tPARAMS ((ce_if_block_t *,\n+\t\t\t\t\t\t rtx, rtx));\n+extern void frv_ifcvt_modify_final\tPARAMS ((ce_if_block_t *));\n+extern void frv_ifcvt_modify_cancel\tPARAMS ((ce_if_block_t *));\n+#endif\n+extern int frv_trampoline_size\t\tPARAMS ((void));\n+extern void frv_initialize_trampoline\tPARAMS ((rtx, rtx, rtx));\n+extern enum reg_class frv_secondary_reload_class\n+\t\t\t\t\tPARAMS ((enum reg_class class,\n+\t\t\t\t\t       enum machine_mode mode,\n+\t\t\t\t\t       rtx x, int));\n+extern int frv_class_likely_spilled_p\tPARAMS ((enum reg_class class));\n+extern int frv_hard_regno_mode_ok\tPARAMS ((int, enum machine_mode));\n+extern int frv_hard_regno_nregs\t\tPARAMS ((int, enum machine_mode));\n+extern int frv_class_max_nregs\t\tPARAMS ((enum reg_class class,\n+\t\t\t\t\t\t enum machine_mode mode));\n+extern int frv_legitimate_constant_p\tPARAMS ((rtx));\n+#endif\t/* RTX_CODE */\n+\n+extern int direct_return_p\t\tPARAMS ((void));\n+extern int frv_register_move_cost\tPARAMS ((enum reg_class, enum reg_class));\n+\n+#ifdef TREE_CODE\n+extern int frv_adjust_field_align\tPARAMS ((tree, int));\n+extern void frv_select_section\t\tPARAMS ((tree, int));\n+#endif\n+\n+#ifdef RTX_CODE\n+extern void frv_select_rtx_section\tPARAMS ((enum machine_mode, rtx));\n+#endif\n+\n+#ifdef TREE_CODE\n+extern void frv_encode_section_info\tPARAMS ((tree));\n+extern void frv_unique_section\t\tPARAMS ((tree, int));\n+#endif\n+\n+extern void fixup_section\t\tPARAMS ((void));\n+extern void sdata_section\t\tPARAMS ((void));\n+extern void sbss_section\t\tPARAMS ((void));\n+extern void const_section\t\tPARAMS ((void));\n+extern void data_section\t\tPARAMS ((void));\n+\n+#ifdef RTX_CODE\n+extern int integer_register_operand\tPARAMS ((rtx, enum machine_mode));\n+extern int frv_load_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int gpr_or_fpr_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int gpr_no_subreg_operand\tPARAMS ((rtx, enum machine_mode));\n+extern int gpr_or_int6_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int fpr_or_int6_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int gpr_or_int_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int gpr_or_int12_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int gpr_fpr_or_int12_operand\tPARAMS ((rtx, enum machine_mode));\n+extern int gpr_or_int10_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int move_source_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int move_destination_operand\tPARAMS ((rtx, enum machine_mode));\n+extern int condexec_source_operand\tPARAMS ((rtx, enum machine_mode));\n+extern int condexec_dest_operand\tPARAMS ((rtx, enum machine_mode));\n+extern int lr_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n+extern int gpr_or_memory_operand\tPARAMS ((rtx, enum machine_mode));\n+extern int fpr_or_memory_operand\tPARAMS ((rtx, enum machine_mode));\n+extern int reg_or_0_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int fcc_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n+extern int icc_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n+extern int cc_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n+extern int fcr_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n+extern int icr_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n+extern int cr_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n+extern int call_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n+extern int fpr_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n+extern int even_reg_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int odd_reg_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int even_gpr_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int odd_gpr_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int quad_fpr_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int even_fpr_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int odd_fpr_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int dbl_memory_one_insn_operand\tPARAMS ((rtx, enum machine_mode));\n+extern int dbl_memory_two_insn_operand\tPARAMS ((rtx, enum machine_mode));\n+extern int int12_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int int6_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n+extern int int5_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n+extern int uint5_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int uint4_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int uint1_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int int_2word_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int pic_register_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int pic_symbolic_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int small_data_register_operand\tPARAMS ((rtx, enum machine_mode));\n+extern int small_data_symbolic_operand\tPARAMS ((rtx, enum machine_mode));\n+extern int upper_int16_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int uint16_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int relational_operator\t\tPARAMS ((rtx, enum machine_mode));\n+extern int signed_relational_operator\tPARAMS ((rtx, enum machine_mode));\n+extern int unsigned_relational_operator\tPARAMS ((rtx, enum machine_mode));\n+extern int float_relational_operator\tPARAMS ((rtx, enum machine_mode));\n+extern int ccr_eqne_operator\t\tPARAMS ((rtx, enum machine_mode));\n+extern int minmax_operator\t\tPARAMS ((rtx, enum machine_mode));\n+extern int condexec_si_binary_operator\tPARAMS ((rtx, enum machine_mode));\n+extern int condexec_si_media_operator\tPARAMS ((rtx, enum machine_mode));\n+extern int condexec_si_divide_operator\tPARAMS ((rtx, enum machine_mode));\n+extern int condexec_si_unary_operator\tPARAMS ((rtx, enum machine_mode));\n+extern int condexec_sf_conv_operator\tPARAMS ((rtx, enum machine_mode));\n+extern int condexec_sf_add_operator\tPARAMS ((rtx, enum machine_mode));\n+extern int condexec_memory_operand\tPARAMS ((rtx, enum machine_mode));\n+extern int intop_compare_operator\tPARAMS ((rtx, enum machine_mode));\n+extern int condexec_intop_cmp_operator\tPARAMS ((rtx, enum machine_mode));\n+extern int acc_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n+extern int even_acc_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int quad_acc_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int accg_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n+extern rtx frv_matching_accg_for_acc\tPARAMS ((rtx));\n+extern void frv_machine_dependent_reorg\tPARAMS ((rtx));\n+#endif\n+"}, {"sha": "b4e3346fcceff7ad6f887908cd607c86a80a62bb", "filename": "gcc/config/frv/frv.c", "status": "added", "additions": 9856, "deletions": 0, "changes": 9856, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c"}, {"sha": "2502fc0c31155258f8d45943f86848760db8b95e", "filename": "gcc/config/frv/frv.h", "status": "added", "additions": 3751, "deletions": 0, "changes": 3751, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c"}, {"sha": "f1668045242b6fdf58f66ef094a6fcecf68b2b9c", "filename": "gcc/config/frv/frv.md", "status": "added", "additions": 7441, "deletions": 0, "changes": 7441, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c"}, {"sha": "a5f5b1fa93e7bf2cedb572f376dd8898c8711c36", "filename": "gcc/config/frv/frvbegin.c", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrvbegin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrvbegin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrvbegin.c?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,150 @@\n+/* Frv initialization file linked before all user modules\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+    Contributed by Red Hat, Inc.\n+  \n+   This file is part of GNU CC.\n+  \n+   GNU CC is free software ; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation * either version 2, or (at your option)\n+   any later version.\n+  \n+   GNU CC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY ; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+  \n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.\n+\n+   This file was originally taken from the file crtstuff.c in the\n+   main compiler directory, and simplified. */\n+\n+#include \"defaults.h\"\n+#include <stddef.h>\n+#include \"unwind-dw2-fde.h\"\n+#include \"gbl-ctors.h\"\n+\n+/*  Declare a pointer to void function type.  */\n+#define STATIC static\n+\n+#ifdef __FRV_UNDERSCORE__\n+#define UNDERSCORE \"_\"\n+#else\n+#define UNDERSCORE \"\"\n+#endif\n+\n+#define INIT_SECTION_NEG_ONE(SECTION, FLAGS, NAME)\t\t\t\\\n+__asm__ (\".section \" SECTION \",\" FLAGS \"\\n\\t\"\t\t\t\t\\\n+\t \".globl   \" UNDERSCORE NAME \"\\n\\t\"\t\t\t\t\\\n+\t \".type    \" UNDERSCORE NAME \",@object\\n\\t\"\t\t\t\\\n+\t \".p2align  2\\n\"\t\t\t\t\t\t\\\n+\t UNDERSCORE NAME \":\\n\\t\"\t\t\t\t\t\\\n+\t \".word     -1\\n\\t\"\t\t\t\t\t\t\\\n+\t \".previous\")\n+\n+#define INIT_SECTION(SECTION, FLAGS, NAME)\t\t\t\t\\\n+__asm__ (\".section \" SECTION \",\" FLAGS \"\\n\\t\"\t\t\t\t\\\n+\t \".globl   \" UNDERSCORE NAME \"\\n\\t\"\t\t\t\t\\\n+\t \".type    \" UNDERSCORE NAME \",@object\\n\\t\"\t\t\t\\\n+\t \".p2align  2\\n\"\t\t\t\t\t\t\\\n+\t UNDERSCORE NAME \":\\n\\t\"\t\t\t\t\t\\\n+\t \".previous\")\n+\n+/* Beginning of .ctor/.dtor sections that provides a list of constructors and\n+   destructors to run.  */\n+\n+INIT_SECTION_NEG_ONE (\".ctors\", \"\\\"aw\\\"\", \"__CTOR_LIST__\");\n+INIT_SECTION_NEG_ONE (\".dtors\", \"\\\"aw\\\"\", \"__DTOR_LIST__\");\n+\n+/* Beginning of .eh_frame section that provides all of the exception handling\n+   tables.  */\n+\n+INIT_SECTION (\".eh_frame\", \"\\\"aw\\\"\", \"__EH_FRAME_BEGIN__\");\n+\n+/* Beginning of .rofixup section that provides a list of pointers that we\n+   need to adjust.  */\n+\n+INIT_SECTION (\".rofixup\", \"\\\"a\\\"\", \"__ROFIXUP_LIST__\");\n+\n+extern void __frv_register_eh(void) __attribute__((__constructor__));\n+extern void __frv_deregister_eh(void) __attribute__((__destructor__));\n+\n+extern func_ptr __EH_FRAME_BEGIN__[];\n+\n+/* Register the exeception handling table as the first constructor */\n+void\n+__frv_register_eh (void)\n+{\n+  static struct object object;\n+  if (__register_frame_info)\n+    __register_frame_info (__EH_FRAME_BEGIN__, &object);\n+}\n+\n+/* Note, do not declare __{,de}register_frame_info weak as it seems\n+   to interfere with the pic support.  */\n+\n+/* Unregister the exeception handling table as a deconstructor */\n+void\n+__frv_deregister_eh (void)\n+{\n+  static int completed = 0;\n+\n+  if (completed)\n+    return;\n+\n+  if (__deregister_frame_info)\n+    __deregister_frame_info (__EH_FRAME_BEGIN__);\n+\n+  completed = 1;\n+}\n+\n+/* Run the global destructors */\n+void\n+__do_global_dtors ()\n+{\n+  static func_ptr *p = __DTOR_LIST__ + 1;\n+  while (*p)\n+    {\n+      p++;\n+      (*(p-1)) ();\n+    }\n+}\n+\n+/* Run the global constructors */\n+void\n+__do_global_ctors ()\n+{\n+  unsigned long nptrs = (unsigned long) __CTOR_LIST__[0];\n+  unsigned i;\n+\n+  if (nptrs == (unsigned long)-1)\n+    for (nptrs = 0; __CTOR_LIST__[nptrs + 1] != 0; nptrs++);\n+\n+  for (i = nptrs; i >= 1; i--)\n+    __CTOR_LIST__[i] ();\n+\n+  atexit (__do_global_dtors);\n+}\n+\n+/* Subroutine called automatically by `main'.\n+   Compiling a global function named `main'\n+   produces an automatic call to this function at the beginning.\n+\n+   For many systems, this routine calls __do_global_ctors.\n+   For systems which support a .init section we use the .init section\n+   to run __do_global_ctors, so we need not do anything here.  */\n+\n+void\n+__main ()\n+{\n+  /* Support recursive calls to `main': run initializers just once.  */\n+  static int initialized;\n+  if (! initialized)\n+    {\n+      initialized = 1;\n+      __do_global_ctors ();\n+    }\n+}"}, {"sha": "f1635cc10497e3ca74257bc02ca78097259f2633", "filename": "gcc/config/frv/frvend.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrvend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Ffrvend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrvend.c?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,63 @@\n+/* Frv initialization file linked after all user modules\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+    Contributed by Red Hat, Inc.\n+  \n+   This file is part of GNU CC.\n+  \n+   GNU CC is free software ; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation * either version 2, or (at your option)\n+   any later version.\n+  \n+   GNU CC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY ; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+  \n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA. */\n+\n+#include \"defaults.h\"\n+#include <stddef.h>\n+#include \"unwind-dw2-fde.h\"\n+\n+#ifdef __FRV_UNDERSCORE__\n+#define UNDERSCORE \"_\"\n+#else\n+#define UNDERSCORE \"\"\n+#endif\n+\n+#define FINI_SECTION_ZERO(SECTION, FLAGS, NAME)\t\t\t\t\\\n+__asm__ (\".section \" SECTION \",\" FLAGS \"\\n\\t\"\t\t\t\t\\\n+\t \".globl   \" UNDERSCORE NAME \"\\n\\t\"\t\t\t\t\\\n+\t \".type    \" UNDERSCORE NAME \",@object\\n\\t\"\t\t\t\\\n+\t \".p2align  2\\n\"\t\t\t\t\t\t\\\n+\t UNDERSCORE NAME \":\\n\\t\"\t\t\t\t\t\\\n+\t \".word     0\\n\\t\"\t\t\t\t\t\t\\\n+\t \".previous\")\n+\n+#define FINI_SECTION(SECTION, FLAGS, NAME)\t\t\t\t\\\n+__asm__ (\".section \" SECTION \",\" FLAGS \"\\n\\t\"\t\t\t\t\\\n+\t \".globl   \" UNDERSCORE NAME \"\\n\\t\"\t\t\t\t\\\n+\t \".type    \" UNDERSCORE NAME \",@object\\n\\t\"\t\t\t\\\n+\t \".p2align  2\\n\"\t\t\t\t\t\t\\\n+\t UNDERSCORE NAME \":\\n\\t\"\t\t\t\t\t\\\n+\t \".previous\")\n+\n+/* End of .ctor/.dtor sections that provides a list of constructors and\n+   destructors to run.  */\n+\n+FINI_SECTION_ZERO (\".ctors\", \"\\\"aw\\\"\", \"__CTOR_END__\");\n+FINI_SECTION_ZERO (\".dtors\", \"\\\"aw\\\"\", \"__DTOR_END__\");\n+\n+/* End of .eh_frame section that provides all of the exception handling\n+   tables.  */\n+\n+FINI_SECTION_ZERO (\".eh_frame\", \"\\\"aw\\\"\", \"__FRAME_END__\");\n+\n+/* End of .rofixup section that provides a list of pointers that we\n+   need to adjust.  */\n+\n+FINI_SECTION (\".rofixup\", \"\\\"a\\\"\", \"__ROFIXUP_END__\");"}, {"sha": "18a814235e02e1f5b3240915b2c2ae4bcec6d9f0", "filename": "gcc/config/frv/lib1funcs.asm", "status": "added", "additions": 275, "deletions": 0, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Flib1funcs.asm?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,275 @@\n+/* Library functions.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Contributed by Red Hat, Inc.\n+  \n+   This file is part of GNU CC.\n+  \n+   GNU CC is free software ; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation * either version 2, or (at your option)\n+   any later version.\n+  \n+   GNU CC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY ; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+  \n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+#include <frv-asm.h>\n+\n+\f\n+#ifdef L_cmpll\n+/* icc0 = __cmpll (long long a, long long b)  */\n+\n+\t.file\t\"_cmpll.s\"\n+\t.globl\tEXT(__cmpll)\n+\t.type\tEXT(__cmpll),@function\n+\t.text\n+\t.p2align 4\n+EXT(__cmpll):\n+\tcmp\tgr8, gr10, icc0\n+\tckeq\ticc0, cc4\n+\tP(ccmp)\tgr9, gr11, cc4, 1\n+\tret\n+.Lend:\n+\t.size\tEXT(__cmpll),.Lend-EXT(__cmpll)\n+#endif /* L_cmpll */\n+\f\n+#ifdef L_cmpf\n+/* icc0 = __cmpf (float a, float b) */\n+/* Note, because this function returns the result in ICC0, it means it can't\n+   handle NaNs.  */\n+\n+\t.file\t\"_cmpf.s\"\n+\t.globl\tEXT(__cmpf)\n+\t.type\tEXT(__cmpf),@function\n+\t.text\n+\t.p2align 4\n+EXT(__cmpf):\n+#ifdef __FRV_HARD_FLOAT__\t/* floating point instructions available */\n+\tmovgf\tgr8, fr0\n+\tP(movgf) gr9, fr1\n+\tsetlos\t#1, gr8\n+\tfcmps\tfr0, fr1, fcc0\n+\tP(fcklt) fcc0, cc0\n+\tfckeq\tfcc0, cc1\n+\tcsub\tgr0, gr8, gr8, cc0, 1\n+\tcmov\tgr0, gr8, cc1, 1\n+\tcmpi\tgr8, 0, icc0\n+\tret\n+#else\t\t\t\t/* no floating point instructions available */\n+\tmovsg\tlr, gr4\n+\taddi\tsp, #-16, sp\n+\tsti\tgr4, @(sp, 8)\n+\tst\tfp, @(sp, gr0)\n+\tmov\tsp, fp\n+\tcall\tEXT(__cmpsf2)\n+\tcmpi\tgr8, #0, icc0\n+\tldi\t@(sp, 8), gr4\n+\tmovgs\tgr4, lr\n+\tld\t@(sp,gr0), fp\n+\taddi\tsp, #16, sp\n+\tret\n+#endif\n+.Lend:\n+\t.size\tEXT(__cmpf),.Lend-EXT(__cmpf)\n+#endif\n+\f\n+#ifdef L_cmpd\n+/* icc0 = __cmpd (double a, double b) */\n+/* Note, because this function returns the result in ICC0, it means it can't\n+   handle NaNs.  */\n+\n+\t.file\t\"_cmpd.s\"\n+\t.globl\tEXT(__cmpd)\n+\t.type\tEXT(__cmpd),@function\n+\t.text\n+\t.p2align 4\n+EXT(__cmpd):\n+\tmovsg\tlr, gr4\n+\taddi\tsp, #-16, sp\n+\tsti\tgr4, @(sp, 8)\n+\tst\tfp, @(sp, gr0)\n+\tmov\tsp, fp\n+\tcall\tEXT(__cmpdf2)\n+\tcmpi\tgr8, #0, icc0\n+\tldi\t@(sp, 8), gr4\n+\tmovgs\tgr4, lr\n+\tld\t@(sp,gr0), fp\n+\taddi\tsp, #16, sp\n+\tret\n+.Lend:\n+\t.size\tEXT(__cmpd),.Lend-EXT(__cmpd)\n+#endif\n+\f\n+#ifdef L_addll\n+/* gr8,gr9 = __addll (long long a, long long b) */\n+/* Note, gcc will never call this function, but it is present in case an\n+   ABI program calls it.  */\n+\n+\t.file\t\"_addll.s\"\n+\t.globl\tEXT(__addll)\n+\t.type\tEXT(__addll),@function\n+\t.text\n+\t.p2align\n+EXT(__addll):\n+\taddcc\tgr9, gr11, gr9, icc0\n+\taddx\tgr8, gr10, gr8, icc0\n+\tret\n+.Lend:\n+\t.size\tEXT(__addll),.Lend-EXT(__addll)\n+#endif\n+\f\n+#ifdef L_subll\n+/* gr8,gr9 = __subll (long long a, long long b) */\n+/* Note, gcc will never call this function, but it is present in case an\n+   ABI program calls it.  */\n+\n+\t.file\t\"_subll.s\"\n+\t.globl\tEXT(__subll)\n+\t.type\tEXT(__subll),@function\n+\t.text\n+\t.p2align 4\n+EXT(__subll):\n+\tsubcc\tgr9, gr11, gr9, icc0\n+\tsubx\tgr8, gr10, gr8, icc0\n+\tret\n+.Lend:\n+\t.size\tEXT(__subll),.Lend-EXT(__subll)\n+#endif\n+\f\n+#ifdef L_andll\n+/* gr8,gr9 = __andll (long long a, long long b) */\n+/* Note, gcc will never call this function, but it is present in case an\n+   ABI program calls it.  */\n+\n+\t.file\t\"_andll.s\"\n+\t.globl\tEXT(__andll)\n+\t.type\tEXT(__andll),@function\n+\t.text\n+\t.p2align 4\n+EXT(__andll):\n+\tP(and)\tgr9, gr11, gr9\n+\tP2(and)\tgr8, gr10, gr8\n+\tret\n+.Lend:\n+\t.size\tEXT(__andll),.Lend-EXT(__andll)\n+#endif\n+\f\n+#ifdef L_orll\n+/* gr8,gr9 = __orll (long long a, long long b) */\n+/* Note, gcc will never call this function, but it is present in case an\n+   ABI program calls it.  */\n+\n+\t.file\t\"_orll.s\"\n+\t.globl\tEXT(__orll)\n+\t.type\tEXT(__orll),@function\n+\t.text\n+\t.p2align 4\n+EXT(__orll):\n+\tP(or)\tgr9, gr11, gr9\n+\tP2(or)\tgr8, gr10, gr8\n+\tret\n+.Lend:\n+\t.size\tEXT(__orll),.Lend-EXT(__orll)\n+#endif\n+\f\n+#ifdef L_xorll\n+/* gr8,gr9 = __xorll (long long a, long long b) */\n+/* Note, gcc will never call this function, but it is present in case an\n+   ABI program calls it.  */\n+\n+\t.file\t\"_xorll.s\"\n+\t.globl\tEXT(__xorll)\n+\t.type\tEXT(__xorll),@function\n+\t.text\n+\t.p2align 4\n+EXT(__xorll):\n+\tP(xor)\tgr9, gr11, gr9\n+\tP2(xor)\tgr8, gr10, gr8\n+\tret\n+.Lend:\n+\t.size\tEXT(__xorll),.Lend-EXT(__xorll)\n+#endif\n+\f\n+#ifdef L_notll\n+/* gr8,gr9 = __notll (long long a) */\n+/* Note, gcc will never call this function, but it is present in case an\n+   ABI program calls it.  */\n+\n+\t.file\t\"_notll.s\"\n+\t.globl\tEXT(__notll)\n+\t.type\tEXT(__notll),@function\n+\t.text\n+\t.p2align 4\n+EXT(__notll):\n+\tP(not)\tgr9, gr9\n+\tP2(not)\tgr8, gr8\n+\tret\n+.Lend:\n+\t.size\tEXT(__notll),.Lend-EXT(__notll)\n+#endif\n+\f\n+#ifdef L_cmov\n+/* (void) __cmov (char *dest, const char *src, size_t len) */\n+/*\n+ * void __cmov (char *dest, const char *src, size_t len)\n+ * {\n+ *   size_t i;\n+ * \n+ *   if (dest < src || dest > src+len)\n+ *     {\n+ *\t for (i = 0; i < len; i++)\n+ *\t dest[i] = src[i];\n+ *     }\n+ *   else\n+ *     {\n+ *\t while (len-- > 0)\n+ *\t dest[len] = src[len];\n+ *     }\n+ * }\n+ */\n+\n+\t.file\t\"_cmov.s\"\n+\t.globl\tEXT(__cmov)\n+\t.type\tEXT(__cmov),@function\n+\t.text\n+\t.p2align 4\n+EXT(__cmov):\n+\tP(cmp)\tgr8, gr9, icc0\n+\tadd\tgr9, gr10, gr4\n+\tP(cmp)\tgr8, gr4, icc1\n+\tbc\ticc0, 0, .Lfwd\n+\tbls\ticc1, 0, .Lback\n+.Lfwd:\n+\t/* move bytes in a forward direction */\n+\tP(setlos) #0, gr5\n+\tcmp\tgr0, gr10, icc0\n+\tP(subi)\tgr9, #1, gr9\n+\tP2(subi) gr8, #1, gr8\n+\tbnc\ticc0, 0, .Lret\n+.Lfloop:\n+\t/* forward byte move loop */\n+\taddi\tgr5, #1, gr5\n+\tP(ldsb)\t@(gr9, gr5), gr4\n+\tcmp\tgr5, gr10, icc0\n+\tP(stb)\tgr4, @(gr8, gr5)\n+\tbc\ticc0, 0, .Lfloop\n+\tret\n+.Lbloop:\n+\t/* backward byte move loop body */\n+\tldsb\t@(gr9,gr10),gr4\n+\tstb\tgr4,@(gr8,gr10)\n+.Lback:\n+\tP(cmpi)\tgr10, #0, icc0\n+\taddi\tgr10, #-1, gr10\n+\tbne\ticc0, 0, .Lbloop\n+.Lret:\n+\tret\n+.Lend:\n+\t.size\t EXT(__cmov),.Lend-EXT(__cmov)\n+#endif"}, {"sha": "9b0c70ed3e60bb6fc1acf529425c059a8c039143", "filename": "gcc/config/frv/media.h", "status": "added", "additions": 256, "deletions": 0, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fmedia.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fmedia.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Fmedia.h?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,256 @@\n+/*      VENUS Family C Library V40L00                                   */\n+/*      COPYRIGHT(C) FUJITSU LIMITED 1993-1999                          */\n+\n+#ifndef __MEDIA_H__\n+#define __MEDIA_H__\n+\n+#ifdef __STDC__\n+#define __MEDIA_PASTE__(A,B) __MEDIA_XPASTE__(A,B)\n+#define __MEDIA_XPASTE__(A,B) A ## B\n+#else\n+#define __MEDIA_PASTE__(A,B) A/**/B\n+#endif\n+\n+/* Floating Point Condition Code Field Type */\n+typedef enum\n+{\n+  FCC0 = 0,\n+  FCC1,\n+  FCC2, \n+  FCC3\n+} FCC_T;\n+\n+/* Accumulator Type */\n+#define ACC0\t0\n+#define ACC1\t1\n+#define ACC2\t2\n+#define ACC3\t3\n+#define ACC4\t4\n+#define ACC5\t5\n+#define ACC6\t6\n+#define ACC7\t7\n+\n+typedef unsigned char      __mubyte;\n+typedef unsigned short\t   __muhalf;\n+typedef unsigned long      __muword1;\n+typedef unsigned long long __muword2;\n+\n+typedef signed short\t   __mshalf;\n+typedef signed long        __msword1;\n+typedef signed long long   __msword2;\n+\n+typedef int ACC_T;\n+\n+register __muword1 __acc0 __asm__(\"acc0\");\n+register __muword1 __acc1 __asm__(\"acc1\");\n+register __muword1 __acc2 __asm__(\"acc2\");\n+register __muword1 __acc3 __asm__(\"acc3\");\n+register __muword1 __acc4 __asm__(\"acc4\");\n+register __muword1 __acc5 __asm__(\"acc5\");\n+register __muword1 __acc6 __asm__(\"acc6\");\n+register __muword1 __acc7 __asm__(\"acc7\");\n+\n+#define __ACC(N) __MEDIA_PASTE__(__acc,N)\n+\n+/* Accumulator Guard Type */\n+#define ACCG0\t0\n+#define ACCG1\t1\n+#define ACCG2\t2\n+#define ACCG3\t3\n+#define ACCG4\t4\n+#define ACCG5\t5\n+#define ACCG6\t6\n+#define ACCG7\t7\n+\n+typedef int ACCG_T;\n+\n+register __mubyte __accg0 __asm__(\"accg0\");\n+register __mubyte __accg1 __asm__(\"accg1\");\n+register __mubyte __accg2 __asm__(\"accg2\");\n+register __mubyte __accg3 __asm__(\"accg3\");\n+register __mubyte __accg4 __asm__(\"accg4\");\n+register __mubyte __accg5 __asm__(\"accg5\");\n+register __mubyte __accg6 __asm__(\"accg6\");\n+register __mubyte __accg7 __asm__(\"accg7\");\n+\n+#define __ACCG(N) __MEDIA_PASTE__(__accg,N)\n+\n+/* 12-bit Immediate Type */\n+typedef int IMM12;\n+\n+/* 6-bit Immediate Type */\n+typedef int IMM6;\n+\n+/* 5-bit Immediate Type */\n+typedef int IMM5;\n+\n+/* 5-bit Unsigned Immediate Type */\n+typedef int UIMM5;\n+\n+/* 4-bit Unsigned Immediate Type */\n+typedef int UIMM4;\n+\n+/* 1-bit Unsigned Immediate Type */\n+typedef int UIMM1;\n+\n+/* Media Logical (Word) */\n+extern __muword1 __MAND(__muword1, __muword1);\n+extern __muword1 __MOR(__muword1, __muword1);\n+extern __muword1 __MXOR(__muword1, __muword1);\n+extern __muword1 __MNOT(__muword1);\n+\n+/* Media Rotate (Word) */\n+extern __muword1 __MROTLI(__muword1, UIMM5);\n+extern __muword1 __MROTRI(__muword1, UIMM5);\n+\n+/* Media Word Cut */\n+extern __muword1 __MWCUT(__muword2, __muword1);\n+\n+/* Media Average (Halfword Dual) */\n+extern __muword1 __MAVEH(__muword1, __muword1);\n+\n+/* Media Shift (Halfword Dual) */\n+extern __muword1 __MSLLHI(__muword1, UIMM4);\n+extern __muword1 __MSRLHI(__muword1, UIMM4);\n+extern __msword1 __MSRAHI(__msword1, UIMM4);\n+\n+/* Media Saturation (Halfword Dual) */\n+extern __msword1 __MSATHS(__msword1, __msword1);\n+extern __muword1 __MSATHU(__muword1, __muword1);\n+\n+#if 0 /* These are not supported. */\n+/* Media Dual Compare (Halfword Dual) */\n+extern void __MCMPSH(FCC_T, __msword1, __msword1);\n+extern void __MCMPUH(FCC_T, __muword1, __muword1);\n+#endif\n+\n+/* Media Dual Saturation Add/Sub (Halfword Dual) */\n+extern __msword1 __MADDHSS(__msword1, __msword1);\n+extern __muword1 __MADDHUS(__muword1, __muword1);\n+extern __msword1 __MSUBHSS(__msword1, __msword1);\n+extern __muword1 __MSUBHUS(__muword1, __muword1);\n+\n+/* Media Dual Mult (Halfword Dual) */\n+extern void __MMULHS(ACC_T, __msword1, __msword1);\n+extern void __MMULHU(ACC_T, __muword1, __muword1);\n+\n+/* Media Dual Cross Mult (Halfword Dual) */\n+extern void __MMULXHS(ACC_T, __msword1, __msword1);\n+extern void __MMULXHU(ACC_T, __muword1, __muword1);\n+\n+/* Media Dual Mult & Add (Halfword Dual) */\n+extern void __MMACHS(ACC_T, __msword1, __msword1);\n+extern void __MMACHU(ACC_T, __muword1, __muword1);\n+\n+/* Media Dual Mult & Sub (Halfword Dual) */\n+extern void __MMRDHS(ACC_T, __msword1, __msword1);\n+extern void __MMRDHU(ACC_T, __muword1, __muword1);\n+\n+/* Media Quad Saturation Add/Sub (Halfword Quad) */\n+extern __msword2 __MQADDHSS(__msword2, __msword2);\n+extern __muword2 __MQADDHUS(__muword2, __muword2);\n+extern __msword2 __MQSUBHSS(__msword2, __msword2);\n+extern __muword2 __MQSUBHUS(__muword2, __muword2);\n+\n+/* Media Quad Mult (Halfword Quad) */\n+extern void __MQMULHS(ACC_T, __msword2, __msword2);\n+extern void __MQMULHU(ACC_T, __muword2, __muword2);\n+\n+/* Media Quad Cross Mult (Halfword Quad) */\n+extern void __MQMULXHS(ACC_T, __msword2, __msword2);\n+extern void __MQMULXHU(ACC_T, __muword2, __muword2);\n+\n+/* Media Quad Mult & Add (Halfword Quad) */\n+extern void __MQMACHS(ACC_T, __msword2, __msword2);\n+extern void __MQMACHU(ACC_T, __muword2, __muword2);\n+\n+/* Media Dual Mult & Add for Complex (Halfword Dual) */\n+extern void __MCPXRS(ACC_T, __msword1, __msword1);\n+extern void __MCPXRU(ACC_T, __muword1, __muword1);\n+extern void __MCPXIS(ACC_T, __msword1, __msword1);\n+extern void __MCPXIU(ACC_T, __muword1, __muword1);\n+\n+/* Media Quad Mult & Add for Complex (Halfword Quad) */\n+extern void __MQCPXRS(ACC_T, __msword2, __msword2);\n+extern void __MQCPXRU(ACC_T, __muword2, __muword2);\n+extern void __MQCPXIS(ACC_T, __msword2, __msword2);\n+extern void __MQCPXIU(ACC_T, __muword2, __muword2);\n+\n+/* Media Cut */\n+extern __muword1 __MCUT(ACC_T, __muword1);\n+extern __muword1 __MCUTSS(ACC_T, __msword1);\n+\n+/* Media Halfword Expand */\n+extern __muword1 __MEXPDHW(__muword1, UIMM1);\n+extern __muword2 __MEXPDHD(__muword1, UIMM1);\n+\n+/* Media Halfword Pack/Unpack */\n+extern __muword1 __MPACKH(__muhalf, __muhalf);\n+extern __muword2 __MUNPACKH(__muword1);\n+\n+/* Media Halfword Pack/Unpack (Dual) */\n+extern __muword2 __MDPACKH(__muword2, __muword2);\n+extern void __MDUNPACKH(__muword1[4], __muword2);\n+\n+/* Media Byte-Halfword Convert */\n+extern __muword2 __MBTOH(__muword1);\n+extern __muword1 __MHTOB(__muword2);\n+extern void __MBTOHE(__muword1[4], __muword1);\n+\n+/* Media Accumulator Clear */\n+extern void __MCLRACC(ACC_T);      \n+extern void __MCLRACCA(void);\n+\n+/* Media Accumlator Read/Write */\n+extern __muword1 __MRDACC(ACC_T);\n+extern __muword1 __MRDACCG(ACCG_T);\n+extern void __MWTACC(ACC_T, __muword1);\n+extern void __MWTACCG(ACCG_T, __muword1);\n+\n+/* Media Custom */\n+extern __muword1 __Mcop1(__muword1, __muword1);\n+extern __muword1 __Mcop2(__muword1, __muword1);\n+\n+/* Media Trap */\n+extern void __MTRAP(void);\n+\n+/* The following are available on the FR400.  The compiler will report an\n+   error if an attempt is made to use them in FR500 code.  */\n+\n+/* Media Multiply And Add (Halfword) */\n+extern void __MQXMACHS(ACC_T, __msword2, __msword2);\n+extern void __MQXMACXHS(ACC_T, __msword2, __msword2);\n+extern void __MQMACXHS(ACC_T, __msword2, __msword2);\n+\n+/* Media Accumulator Addition/Subtraction */\n+extern void __MADDACCS(ACC_T, ACC_T);\n+extern void __MSUBACCS(ACC_T, ACC_T);\n+extern void __MASACCS(ACC_T, ACC_T);\n+extern void __MDADDACCS(ACC_T, ACC_T);\n+extern void __MDSUBACCS(ACC_T, ACC_T);\n+extern void __MDASACCS(ACC_T, ACC_T);\n+\n+/* Media Dual Absolute (Halfword) */\n+extern __muword1 __MABSHS(__msword1);\n+\n+/* Media Dual Rotate Left */\n+extern __muword2 __MDROTLI(__muword2, UIMM5);\n+\n+/* Media Dual Coupling */\n+extern __muword1 __MCPLHI(__muword2, UIMM4);\n+extern __muword1 __MCPLI(__muword2, UIMM5);\n+\n+/* Media Dual Cut And Signed Saturation */\n+extern __muword2 __MDCUTSSI(ACC_T, IMM6);\n+\n+/* Media Quad Saturation (Halfword) */\n+extern __msword2 __MQSATHS(__msword2, __msword2);\n+\n+/* Media SETHI/SETLO */\n+extern __msword1 __MHSETLOS(__msword1, IMM12);\n+extern __msword1 __MHSETHIS(__msword1, IMM12);\n+extern __msword1 __MHDSETS(IMM12);\n+extern __muword1 __MHSETLOH(__muword1, IMM5);\n+extern __muword1 __MHSETHIH(__muword1, IMM5);\n+extern __muword1 __MHDSETH(__muword1, IMM5);\n+#endif /* __MEDIA_H__ */"}, {"sha": "d5a91fc0f558976122499e8fd32a1f4a60576da7", "filename": "gcc/config/frv/modi.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fmodi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fmodi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Fmodi.c?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,4 @@\n+int __modi (int a, int b)\n+{\n+  return a % b;\n+}"}, {"sha": "14290ab6b04ded299968c3e3e3c544a6c05d6605", "filename": "gcc/config/frv/uitod.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fuitod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fuitod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Fuitod.c?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,4 @@\n+double __uitod (unsigned int a)\n+{\n+  return a;\n+}"}, {"sha": "059bc7c7417b3ca253e1da1e484fe857e47c8cbf", "filename": "gcc/config/frv/uitof.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fuitof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fuitof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Fuitof.c?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,4 @@\n+float __uitof (unsigned int a)\n+{\n+  return a;\n+}"}, {"sha": "e6bee12081f276701a3c0bfebcac6802c54bcfcc", "filename": "gcc/config/frv/ulltod.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fulltod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fulltod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Fulltod.c?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,4 @@\n+double __ulltod (unsigned long long a)\n+{\n+  return a;\n+}"}, {"sha": "29cdfd4d2a19ba353a6eea6a242bb788116bf97d", "filename": "gcc/config/frv/ulltof.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fulltof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fulltof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Fulltof.c?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,4 @@\n+float __ulltof (unsigned long long a)\n+{\n+  return a;\n+}"}, {"sha": "4ffe5ad8132f2db9d2dec70a3b140221820f9770", "filename": "gcc/config/frv/umodi.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fumodi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fumodi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Fumodi.c?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,4 @@\n+unsigned int __umodi (unsigned int a, unsigned int b)\n+{\n+  return a % b;\n+}"}, {"sha": "8f2ed66ccfc6b6b7db7f3aff9c1b6a73c161f355", "filename": "gcc/config/frv/xm-frv.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fxm-frv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a05131ca8a11809d03e5f5fd592fd6c0433c6c/gcc%2Fconfig%2Ffrv%2Fxm-frv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Fxm-frv.h?ref=36a05131ca8a11809d03e5f5fd592fd6c0433c6c", "patch": "@@ -0,0 +1,38 @@\n+/* Definitions for Frv target\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Contributed by Red Hat, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* #defines that need visibility everywhere.  */\n+#define\tFALSE\t0\n+#define\tTRUE\t1\n+\n+/* A C expression for the status code to be returned when the compiler exits\n+   after serious errors.  */\n+#define FATAL_EXIT_CODE 33\n+\n+/* A C expression for the status code to be returned when the compiler exits\n+   without serious errors.  */\n+#define SUCCESS_EXIT_CODE 0\n+\n+/* target machine dependencies.\n+   tm.h is a symbolic link to the actual target specific file.   */\n+#include \"tm.h\"\n+\n+/* end of xm-frv.h */"}]}