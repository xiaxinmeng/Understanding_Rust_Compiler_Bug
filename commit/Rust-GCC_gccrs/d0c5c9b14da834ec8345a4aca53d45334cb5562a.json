{"sha": "d0c5c9b14da834ec8345a4aca53d45334cb5562a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBjNWM5YjE0ZGE4MzRlYzgzNDVhNGFjYTUzZDQ1MzM0Y2I1NTYyYQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-08-25T20:51:02Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-08-25T20:51:02Z"}, "message": "re PR middle-end/16693 (Bitwise AND is lost when used within a cast to an enum of the same precision)\n\n\n\tPR middle-end/16693\n\tPR tree-optimization/16372\n\t* decl.c (finish_enum): Make the precision of the enumerated type\n\tthe same width as the underlying integer type.\n\n\t* g++.dg/opt/pr16372-1.C: New test case.\n\t* g++.dg/opt/pr16693-1.C: New test case.\n\t* g++.dg/opt/pr16693-2.C: New test case.\n\nFrom-SVN: r86576", "tree": {"sha": "9d83bd3b2e6a19b9638628f3287e9f2071b81783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d83bd3b2e6a19b9638628f3287e9f2071b81783"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0c5c9b14da834ec8345a4aca53d45334cb5562a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0c5c9b14da834ec8345a4aca53d45334cb5562a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0c5c9b14da834ec8345a4aca53d45334cb5562a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0c5c9b14da834ec8345a4aca53d45334cb5562a/comments", "author": null, "committer": null, "parents": [{"sha": "700686faf4b0dd347b1dc735569b9fdfaef925d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700686faf4b0dd347b1dc735569b9fdfaef925d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/700686faf4b0dd347b1dc735569b9fdfaef925d6"}], "stats": {"total": 87, "additions": 86, "deletions": 1}, "files": [{"sha": "ec071ae745aeba0fce8c4f4a10751e072003d279", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0c5c9b14da834ec8345a4aca53d45334cb5562a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0c5c9b14da834ec8345a4aca53d45334cb5562a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d0c5c9b14da834ec8345a4aca53d45334cb5562a", "patch": "@@ -1,3 +1,10 @@\n+2004-08-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/16693\n+\tPR tree-optimization/16372\n+\t* decl.c (finish_enum): Make the precision of the enumerated type\n+\tthe same width as the underlying integer type.\n+\n 2004-08-25  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/17155"}, {"sha": "dfb5681932481549af660833d956ba0c20a29596", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0c5c9b14da834ec8345a4aca53d45334cb5562a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0c5c9b14da834ec8345a4aca53d45334cb5562a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d0c5c9b14da834ec8345a4aca53d45334cb5562a", "patch": "@@ -9373,7 +9373,14 @@ finish_enum (tree enumtype)\n      underlying type in the range bmin to bmax, where bmin and bmax are,\n      respectively, the smallest and largest values of the smallest bit-\n      field that can store emin and emax.  */\n-  TYPE_PRECISION (enumtype) = precision;\n+\n+  /* The middle-end currently assumes that types with TYPE_PRECISION\n+     narrower than their underlying type are suitably zero or sign\n+     extended to fill their mode.  g++ doesn't make these guarantees.\n+     Until the middle-end can represent such paradoxical types, we\n+     set the TYPE_PRECISON to the width of the underlying type.  */\n+  TYPE_PRECISION (enumtype) = TYPE_PRECISION (underlying_type);\n+\n   set_min_and_max_values_for_integral_type (enumtype, precision, unsignedp);\n \n   /* [dcl.enum]"}, {"sha": "564e993132c9520c2d3508bc8e6914e1065718b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0c5c9b14da834ec8345a4aca53d45334cb5562a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0c5c9b14da834ec8345a4aca53d45334cb5562a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0c5c9b14da834ec8345a4aca53d45334cb5562a", "patch": "@@ -1,3 +1,11 @@\n+2004-08-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/16693\n+\tPR tree-optimization/16372\n+\t* g++.dg/opt/pr16372-1.C: New test case.\n+\t* g++.dg/opt/pr16693-1.C: New test case.\n+\t* g++.dg/opt/pr16693-2.C: New test case.\n+\n 2004-08-25  Ziemowit Laski  <zlaski@apple.com>\n \n \t* objc.dg/proto-lossage-4.m: New test."}, {"sha": "b797e4ad29dce3566e0362ab503329150d19ee95", "filename": "gcc/testsuite/g++.dg/opt/pr16372-1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0c5c9b14da834ec8345a4aca53d45334cb5562a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr16372-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0c5c9b14da834ec8345a4aca53d45334cb5562a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr16372-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr16372-1.C?ref=d0c5c9b14da834ec8345a4aca53d45334cb5562a", "patch": "@@ -0,0 +1,17 @@\n+// PR tree-optimization/16372\n+// { dg-do run }\n+// { dg-options \"-O1\" }\n+\n+extern \"C\" void abort();\n+\n+enum number {ZERO, ONE, TWO, THREE, FOUR, FIVE};\n+\n+int main() {\n+  number n = FIVE; \n+ \n+  if((n == ONE) || (n == TWO) || (n == THREE)) { \n+    abort ();\n+  } \n+  return 0;\n+}\n+"}, {"sha": "6b716116dd163fb0cb7961d8d080463d69852b6d", "filename": "gcc/testsuite/g++.dg/opt/pr16693-1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0c5c9b14da834ec8345a4aca53d45334cb5562a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr16693-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0c5c9b14da834ec8345a4aca53d45334cb5562a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr16693-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr16693-1.C?ref=d0c5c9b14da834ec8345a4aca53d45334cb5562a", "patch": "@@ -0,0 +1,25 @@\n+// PR middle-end/16693\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+extern \"C\" void abort();\n+\n+unsigned short ret6666(int) {\n+    return 0x66;\n+}\n+\n+typedef enum {\n+    a   = 0x0, b   = 0x1, c   = 0x2, d   = 0x3, e   = 0x4, f   = 0x5,\n+    g   = 0x6, h   = 0x7, i   = 0x8, j   = 0x9, k   = 0xa, l   = 0xb,\n+    m   = 0xc, n   = 0xd, o   = 0xe, p   = 0xf \n+} Test_Enum;\n+\n+int main(void) {\n+    unsigned char r1;\n+    r1 = static_cast<Test_Enum>(0xf & ret6666(44));\n+\n+    if(r1 != 0x6)\n+        abort();\n+    return 0;\n+}\n+"}, {"sha": "cb60df64264bf449567b838523f79a3fc35a1f4c", "filename": "gcc/testsuite/g++.dg/opt/pr16693-2.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0c5c9b14da834ec8345a4aca53d45334cb5562a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr16693-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0c5c9b14da834ec8345a4aca53d45334cb5562a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr16693-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr16693-2.C?ref=d0c5c9b14da834ec8345a4aca53d45334cb5562a", "patch": "@@ -0,0 +1,21 @@\n+// PR middle-end/16693\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+extern \"C\" void abort();\n+\n+char foo()\n+{\n+  return 0x10;\n+}\n+\n+enum E { e = 0x0f };\n+\n+int main()\n+{\n+  char c = (char)(E)(e & foo());\n+  if (c != 0)\n+    abort();\n+  return 0;\n+}\n+"}]}