{"sha": "689d6c4a78eb67a4eb256d27647660a7523958a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg5ZDZjNGE3OGViNjdhNGViMjU2ZDI3NjQ3NjYwYTc1MjM5NThhNA==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2010-07-27T21:06:31Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2010-07-27T21:06:31Z"}, "message": "re PR rtl-optimization/40956 (Constants are never candidates for hoisting)\n\n\tPR rtl-optimization/40956\n\tPR target/42495\n\tPR middle-end/42574\n\t* gcc.target/arm/pr40956.c, gcc.target/arm/pr42495.c,\n\t* gcc.target/arm/pr42574.c: Add tests.\n\nFrom-SVN: r162600", "tree": {"sha": "62d552d846f1fd49eb9903d64eac7addc492c312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62d552d846f1fd49eb9903d64eac7addc492c312"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/689d6c4a78eb67a4eb256d27647660a7523958a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/689d6c4a78eb67a4eb256d27647660a7523958a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/689d6c4a78eb67a4eb256d27647660a7523958a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/689d6c4a78eb67a4eb256d27647660a7523958a4/comments", "author": null, "committer": null, "parents": [{"sha": "ec3728adb8ae667a4507d70e2eecdb38278ece20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec3728adb8ae667a4507d70e2eecdb38278ece20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec3728adb8ae667a4507d70e2eecdb38278ece20"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "68b51d85a758b9b603094e27d1795e9f52382043", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/689d6c4a78eb67a4eb256d27647660a7523958a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/689d6c4a78eb67a4eb256d27647660a7523958a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=689d6c4a78eb67a4eb256d27647660a7523958a4", "patch": "@@ -1,3 +1,11 @@\n+2010-07-27  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\tPR rtl-optimization/40956\n+\tPR target/42495\n+\tPR middle-end/42574\n+\t* gcc.target/arm/pr40956.c, gcc.target/arm/pr42495.c,\n+\t* gcc.target/arm/pr42574.c: Add tests.\n+\n 2010-07-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* lib/gcc-dg.exp (cleanup-coverage-files): Remove options from"}, {"sha": "5719b726a60c9591e330d5b63ba1e07df981da10", "filename": "gcc/testsuite/gcc.target/arm/pr40956.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/689d6c4a78eb67a4eb256d27647660a7523958a4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40956.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/689d6c4a78eb67a4eb256d27647660a7523958a4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40956.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40956.c?ref=689d6c4a78eb67a4eb256d27647660a7523958a4", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-options \"-mthumb -Os -fpic -march=armv5te\" }  */\n+/* { dg-require-effective-target arm_thumb1_ok } */\n+/* { dg-require-effective-target fpic } */\n+/* Make sure the constant \"0\" is loaded into register only once.  */\n+/* { dg-final { scan-assembler-times \"mov\\[\\\\t \\]*r., #0\" 1 } } */\n+\n+int foo(int p, int* q)\n+{\n+  if (p!=9)\n+    *q = 0;\n+  else\n+    *(q+1) = 0;\n+  return 3;\n+}"}, {"sha": "f65f3c14637e770c2efe3fd10e04a035e1aa8bad", "filename": "gcc/testsuite/gcc.target/arm/pr42495.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/689d6c4a78eb67a4eb256d27647660a7523958a4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr42495.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/689d6c4a78eb67a4eb256d27647660a7523958a4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr42495.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr42495.c?ref=689d6c4a78eb67a4eb256d27647660a7523958a4", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options \"-mthumb -Os -fpic -march=armv5te -fdump-rtl-hoist\" }  */\n+/* { dg-require-effective-target arm_thumb1_ok } */\n+/* { dg-require-effective-target fpic } */\n+/* Make sure all calculations of gObj's address get hoisted to one location.  */\n+/* { dg-final { scan-rtl-dump \"PRE/HOIST: end of bb .* copying expression\" \"hoist\" } } */\n+\n+struct st_a {\n+   int data;\n+};\n+\n+struct st_b {\n+   struct st_a *p_a;\n+    struct st_b *next;\n+};\n+\n+extern struct st_b gObj;\n+extern void foo(int, struct st_b*);\n+\n+int goo(struct st_b * obj) {\n+   struct st_a *pa;\n+   if (gObj.p_a->data != 0) {\n+     foo(gObj.p_a->data, obj);\n+   }\n+   pa = obj->p_a;\n+   if (pa == 0) {\n+     return 0;\n+   } else if (pa == gObj.p_a) {\n+     return 0;\n+   }\n+   return pa->data;\n+}"}, {"sha": "6bb42331dad604a4f22b882ec4712723717968e2", "filename": "gcc/testsuite/gcc.target/arm/pr42574.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/689d6c4a78eb67a4eb256d27647660a7523958a4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr42574.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/689d6c4a78eb67a4eb256d27647660a7523958a4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr42574.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr42574.c?ref=689d6c4a78eb67a4eb256d27647660a7523958a4", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-options \"-mthumb -Os -fpic -march=armv5te\" }  */\n+/* { dg-require-effective-target arm_thumb1_ok } */\n+/* { dg-require-effective-target fpic } */\n+/* Make sure the address of glob.c is calculated only once and using\n+   a logical shift for the offset (200<<1).  */\n+/* { dg-final { scan-assembler-times \"lsl\" 1 } } */\n+\n+struct A {\n+ char a[400];\n+ float* c;\n+};\n+struct A glob;\n+void func();\n+void func1(float*);\n+int func2(float*, int*);\n+void func3(float*);\n+\n+void test(int *p) {\n+ func1(glob.c);\n+ if (func2(glob.c, p)) {\n+   func();\n+ }\n+ func3(glob.c);\n+}"}]}