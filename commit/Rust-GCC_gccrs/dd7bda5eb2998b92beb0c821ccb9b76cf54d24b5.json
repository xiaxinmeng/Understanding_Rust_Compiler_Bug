{"sha": "dd7bda5eb2998b92beb0c821ccb9b76cf54d24b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ3YmRhNWViMjk5OGI5MmJlYjBjODIxY2NiOWI3NmNmNTRkMjRiNQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2014-11-18T16:15:52Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-11-18T16:15:52Z"}, "message": "tracer ported to new fibonacci_heap data structure.\n\n\t* tracer.c (tail_duplicate): New fibonacci_heap class is used.\n\nFrom-SVN: r217722", "tree": {"sha": "dfeeca70b05952ed8d0d087028c4afefaa5178ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfeeca70b05952ed8d0d087028c4afefaa5178ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd7bda5eb2998b92beb0c821ccb9b76cf54d24b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd7bda5eb2998b92beb0c821ccb9b76cf54d24b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd7bda5eb2998b92beb0c821ccb9b76cf54d24b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd7bda5eb2998b92beb0c821ccb9b76cf54d24b5/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d261514a7f4641eb540352156386d444962fb73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d261514a7f4641eb540352156386d444962fb73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d261514a7f4641eb540352156386d444962fb73"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "6d2d5f7a72eec6c3e8d00fd48d9f8cadb72261ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7bda5eb2998b92beb0c821ccb9b76cf54d24b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7bda5eb2998b92beb0c821ccb9b76cf54d24b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd7bda5eb2998b92beb0c821ccb9b76cf54d24b5", "patch": "@@ -1,3 +1,7 @@\n+2014-11-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* tracer.c (tail_duplicate): New fibonacci_heap class is used.\n+\n 2014-11-18  Martin Liska  <mliska@suse.cz>\n \n \t* bb-reorder.c (mark_bb_visited): New fibonacci_heap is used."}, {"sha": "cecefdcd8c46d7f9ede54c282113e022a34be6d4", "filename": "gcc/tracer.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7bda5eb2998b92beb0c821ccb9b76cf54d24b5/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7bda5eb2998b92beb0c821ccb9b76cf54d24b5/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=dd7bda5eb2998b92beb0c821ccb9b76cf54d24b5", "patch": "@@ -52,7 +52,6 @@\n #include \"cfg.h\"\n #include \"cfganal.h\"\n #include \"basic-block.h\"\n-#include \"fibheap.h\"\n #include \"flags.h\"\n #include \"params.h\"\n #include \"coverage.h\"\n@@ -67,6 +66,7 @@\n #include \"tree-ssa.h\"\n #include \"tree-inline.h\"\n #include \"cfgloop.h\"\n+#include \"fibonacci_heap.h\"\n \n static int count_insns (basic_block);\n static bool ignore_bb_p (const_basic_block);\n@@ -241,12 +241,14 @@ find_trace (basic_block bb, basic_block *trace)\n static bool\n tail_duplicate (void)\n {\n-  fibnode_t *blocks = XCNEWVEC (fibnode_t, last_basic_block_for_fn (cfun));\n+  auto_vec<fibonacci_node<long, basic_block_def>*> blocks;\n+  blocks.safe_grow_cleared (last_basic_block_for_fn (cfun));\n+\n   basic_block *trace = XNEWVEC (basic_block, n_basic_blocks_for_fn (cfun));\n   int *counts = XNEWVEC (int, last_basic_block_for_fn (cfun));\n   int ninsns = 0, nduplicated = 0;\n   gcov_type weighted_insns = 0, traced_insns = 0;\n-  fibheap_t heap = fibheap_new ();\n+  fibonacci_heap<long, basic_block_def> heap (LONG_MIN);\n   gcov_type cover_insns;\n   int max_dup_insns;\n   basic_block bb;\n@@ -271,8 +273,7 @@ tail_duplicate (void)\n     {\n       int n = count_insns (bb);\n       if (!ignore_bb_p (bb))\n-\tblocks[bb->index] = fibheap_insert (heap, -bb->frequency,\n-\t\t\t\t\t    bb);\n+\tblocks[bb->index] = heap.insert (-bb->frequency, bb);\n \n       counts [bb->index] = n;\n       ninsns += n;\n@@ -287,9 +288,9 @@ tail_duplicate (void)\n   max_dup_insns = (ninsns * PARAM_VALUE (TRACER_MAX_CODE_GROWTH) + 50) / 100;\n \n   while (traced_insns < cover_insns && nduplicated < max_dup_insns\n-         && !fibheap_empty (heap))\n+         && !heap.empty ())\n     {\n-      basic_block bb = (basic_block) fibheap_extract_min (heap);\n+      basic_block bb = heap.extract_min ();\n       int n, pos;\n \n       if (!bb)\n@@ -307,7 +308,7 @@ tail_duplicate (void)\n       traced_insns += bb->frequency * counts [bb->index];\n       if (blocks[bb->index])\n \t{\n-\t  fibheap_delete_node (heap, blocks[bb->index]);\n+\t  heap.delete_node (blocks[bb->index]);\n \t  blocks[bb->index] = NULL;\n \t}\n \n@@ -317,7 +318,7 @@ tail_duplicate (void)\n \n \t  if (blocks[bb2->index])\n \t    {\n-\t      fibheap_delete_node (heap, blocks[bb2->index]);\n+\t      heap.delete_node (blocks[bb2->index]);\n \t      blocks[bb2->index] = NULL;\n \t    }\n \t  traced_insns += bb2->frequency * counts [bb2->index];\n@@ -344,8 +345,7 @@ tail_duplicate (void)\n \t      /* Reconsider the original copy of block we've duplicated.\n \t         Removing the most common predecessor may make it to be\n \t         head.  */\n-\t      blocks[bb2->index] =\n-\t\tfibheap_insert (heap, -bb2->frequency, bb2);\n+\t      blocks[bb2->index] = heap.insert (-bb2->frequency, bb2);\n \n \t      if (dump_file)\n \t\tfprintf (dump_file, \"Duplicated %i as %i [%i]\\n\",\n@@ -370,10 +370,8 @@ tail_duplicate (void)\n \n   free_original_copy_tables ();\n   sbitmap_free (bb_seen);\n-  free (blocks);\n   free (trace);\n   free (counts);\n-  fibheap_delete (heap);\n \n   return changed;\n }"}]}