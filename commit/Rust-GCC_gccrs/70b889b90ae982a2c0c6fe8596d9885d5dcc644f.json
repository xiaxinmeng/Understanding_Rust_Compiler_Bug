{"sha": "70b889b90ae982a2c0c6fe8596d9885d5dcc644f", "node_id": "C_kwDOANBUbNoAKDcwYjg4OWI5MGFlOTgyYTJjMGM2ZmU4NTk2ZDk4ODVkNWRjYzY0NGY", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-03-28T12:22:21Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-29T21:14:15Z"}, "message": "privacy: Check for pub(crate) when resolving visibility path.\n\nThis causes the function to return true and the checks to pass, but it\nrequires more thinking - how do we deal with pub(crate) in the current system?\nShould we simply treat it as a pub item in the current crate, but export it as\na private item in the metadata?\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-item.h: Fix `Visibility::has_path()` implementation.\n\t* checks/errors/privacy/rust-visibility-resolver.cc\n\t(VisibilityResolver::resolve_module_path): Check if we are dealing with pub(crate) properly.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/privacy8.rs: New test.", "tree": {"sha": "0426b76c85262fa4dd8836eceebd7003cd0117fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0426b76c85262fa4dd8836eceebd7003cd0117fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70b889b90ae982a2c0c6fe8596d9885d5dcc644f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b889b90ae982a2c0c6fe8596d9885d5dcc644f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70b889b90ae982a2c0c6fe8596d9885d5dcc644f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b889b90ae982a2c0c6fe8596d9885d5dcc644f/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff4d4570b44baf6a106cb0cfde3a1fe9ff0ed09f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff4d4570b44baf6a106cb0cfde3a1fe9ff0ed09f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff4d4570b44baf6a106cb0cfde3a1fe9ff0ed09f"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "a96076ef5fe89225fd81090632bbd71445b33c38", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b889b90ae982a2c0c6fe8596d9885d5dcc644f/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b889b90ae982a2c0c6fe8596d9885d5dcc644f/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=70b889b90ae982a2c0c6fe8596d9885d5dcc644f", "patch": "@@ -642,7 +642,7 @@ struct Visibility\n   }\n \n   // Returns whether a visibility has a path\n-  bool has_path () const { return !(is_error ()) && vis_type == PUB_IN_PATH; }\n+  bool has_path () const { return !is_error () && vis_type >= PUB_CRATE; }\n \n   // Returns whether visibility is public or not.\n   bool is_public () const { return vis_type != PRIV && !is_error (); }"}, {"sha": "5b33828573e77b22666595adf87127b0044b1423", "filename": "gcc/rust/checks/errors/privacy/rust-visibility-resolver.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b889b90ae982a2c0c6fe8596d9885d5dcc644f/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b889b90ae982a2c0c6fe8596d9885d5dcc644f/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.cc?ref=70b889b90ae982a2c0c6fe8596d9885d5dcc644f", "patch": "@@ -74,6 +74,16 @@ VisibilityResolver::resolve_module_path (const HIR::SimplePath &restriction,\n   HirId ref;\n   rust_assert (mappings.lookup_node_to_hir (ref_node_id, &ref));\n \n+  auto crate = mappings.get_ast_crate (mappings.get_current_crate ());\n+\n+  // we may be dealing with pub(crate)\n+  if (ref_node_id == crate.get_node_id ())\n+    // FIXME: What do we do here? There isn't a DefId for the Crate, so can we\n+    // actually do anything?\n+    // We basically want to return true always but just when exporting export\n+    // these items as private?\n+    return true;\n+\n   auto module = mappings.lookup_module (ref);\n   if (!module)\n     {"}, {"sha": "6cf8f5b2f6e555426888cce179bf41b0b7771897", "filename": "gcc/testsuite/rust/compile/privacy8.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b889b90ae982a2c0c6fe8596d9885d5dcc644f/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b889b90ae982a2c0c6fe8596d9885d5dcc644f/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy8.rs?ref=70b889b90ae982a2c0c6fe8596d9885d5dcc644f", "patch": "@@ -0,0 +1 @@\n+pub(crate) struct Foo; // { dg-warning \"struct is never constructed\" }"}]}