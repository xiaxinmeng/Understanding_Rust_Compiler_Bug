{"sha": "c173346aac4a66ad3747f380f2f0c97d2dbf8973", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE3MzM0NmFhYzRhNjZhZDM3NDdmMzgwZjJmMGM5N2QyZGJmODk3Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-26T07:45:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-26T11:34:27Z"}, "message": "middle-end/99281 - avoid bitfield stores into addressable types\n\nThis avoids doing bitfield stores into the return object of calls\nwhen using return-slot optimization and the type is addressable.\nInstead we have to pass down the original target RTX to the call\nexpansion which otherwise tries to create a new temporary.\n\n2021-02-26  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/99281\n\t* expr.c (store_field): For calls with return-slot optimization\n\tand addressable return type expand the store directly.\n\n\t* g++.dg/pr99218.C: New testcase.", "tree": {"sha": "d16ea8891b077209bea6a72523af2f259f0499fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d16ea8891b077209bea6a72523af2f259f0499fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c173346aac4a66ad3747f380f2f0c97d2dbf8973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c173346aac4a66ad3747f380f2f0c97d2dbf8973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c173346aac4a66ad3747f380f2f0c97d2dbf8973", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c173346aac4a66ad3747f380f2f0c97d2dbf8973/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f161cc8494cf7283a16fa9ebbcf8fd121bab68d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f161cc8494cf7283a16fa9ebbcf8fd121bab68d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f161cc8494cf7283a16fa9ebbcf8fd121bab68d"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "92035c7c3c1b5045bcb4e11654db49bcb6975b99", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c173346aac4a66ad3747f380f2f0c97d2dbf8973/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c173346aac4a66ad3747f380f2f0c97d2dbf8973/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c173346aac4a66ad3747f380f2f0c97d2dbf8973", "patch": "@@ -7214,7 +7214,13 @@ store_field (rtx target, poly_int64 bitsize, poly_int64 bitpos,\n \t      || !multiple_p (bitpos, BITS_PER_UNIT)\n \t      || !poly_int_tree_p (DECL_SIZE (TREE_OPERAND (exp, 1)),\n \t\t\t\t   &decl_bitsize)\n-\t      || maybe_ne (decl_bitsize, bitsize)))\n+\t      || maybe_ne (decl_bitsize, bitsize))\n+\t  /* A call with an addressable return type and return-slot\n+\t     optimization must not need bitfield operations but we must\n+\t     pass down the original target.  */\n+\t  && (TREE_CODE (exp) != CALL_EXPR\n+\t      || !TREE_ADDRESSABLE (TREE_TYPE (exp))\n+\t      || !CALL_EXPR_RETURN_SLOT_OPT (exp)))\n       /* If we are expanding a MEM_REF of a non-BLKmode non-addressable\n          decl we must use bitfield operations.  */\n       || (known_size_p (bitsize)"}, {"sha": "477a6a2b117fb04197c91998abf594289f3ac8f2", "filename": "gcc/testsuite/g++.dg/pr99218.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c173346aac4a66ad3747f380f2f0c97d2dbf8973/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr99218.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c173346aac4a66ad3747f380f2f0c97d2dbf8973/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr99218.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr99218.C?ref=c173346aac4a66ad3747f380f2f0c97d2dbf8973", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++17 }\n+\n+struct Data\n+{\n+  Data() {}\n+  ~Data() {}\n+\n+  long long i;\n+};\n+\n+struct X\n+{\n+  Data a;\n+  int b;\n+};\n+\n+template<class T>\n+X get(T const&)\n+{\n+  return X{};\n+}\n+\n+template<class... Ts>\n+struct pack_type : Ts...\n+{};\n+\n+int main()\n+{\n+  pack_type<X>{get(1)};\n+}"}]}