{"sha": "310968874db1902084012cf767ad0b6e93f028c2", "node_id": "C_kwDOANBUbNoAKDMxMDk2ODg3NGRiMTkwMjA4NDAxMmNmNzY3YWQwYjZlOTNmMDI4YzI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-14T11:34:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-14T11:34:32Z"}, "message": "Merge #829 #830\n\n829: Constant folder now returns error_mark_node instead of nullptr r=philberty a=npate012\n\nRemoved nullptr checking on results from constant folder because when the\r\nresult is already error_mark_node, we no longer need to check if the result\r\nis nullptr.\r\n\r\nFixes #692\r\n\r\nSigned-off-by: Nirmal Patel <npate012@gmail.com>\r\n\n\n830: Cleanup lambdas within some AST types r=philberty a=dafaust\n\nCleanup constructs like:\r\n```C\r\n    struct_decl.iterate ([&] (AST::TupleField &field) mutable -> bool {\r\n        ... /* do stuff with field */\r\n    });\r\n```\r\nFor the following AST classes:\r\n- AST::StructStruct\r\n- AST::TupleStruct\r\n- AST::Union\r\n- AST::ArrayElemsValues\r\n\r\nFixes: #714\r\nFixes: #715\r\nFixes: #716\r\nFixes: #720\r\n\n\nCo-authored-by: Nirmal Patel <npate012@gmail.com>\nCo-authored-by: David Faust <david.faust@oracle.com>", "tree": {"sha": "bc38a5efba757858a7062d2dae93171e2befc27d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc38a5efba757858a7062d2dae93171e2befc27d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/310968874db1902084012cf767ad0b6e93f028c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhuIFICRBK7hj4Ov3rIwAA7vcIAHBGN8SS/E7JA+3xjt9Zj0Ay\nz5diNYlNjehuAj5vp1zwxNOz8RbL3J00asuf8I02ICBv0w1+3zu77hzPSxTddk9s\ngsNwE9j3w4mp7dPojEw9B55Hyd6Y6mHuQ7txynEd3e/RtJor1RsCqJdtVwrgSpYZ\nkw+aUPyEPFYOPaYrQHRmwoHIFnL+J8KT9hFAMgqIbWAkBC78lZcT7oSIOWiWC0Yx\n44L8hMR/YnYpv0Rr9RT8qtKXizx5V8LAXk1eCdRLmLFvIZW+GOtC3BXMlJpsNn4T\n+BLFpOTxmjQv3D7bUpDDk9UGUQtqCASOH/bMr2COjJVF4wb310EcLeHMdFqPsYY=\n=fs6M\n-----END PGP SIGNATURE-----\n", "payload": "tree bc38a5efba757858a7062d2dae93171e2befc27d\nparent 88bf6bf78a6965d415292b958db14ad51fee25d1\nparent f742bead5f4eb94908f188b99a3b261de0be9ca2\nparent a9a7654d850a7140d1e0d636f2cc375308bb2c32\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1639481672 +0000\ncommitter GitHub <noreply@github.com> 1639481672 +0000\n\nMerge #829 #830\n\n829: Constant folder now returns error_mark_node instead of nullptr r=philberty a=npate012\n\nRemoved nullptr checking on results from constant folder because when the\r\nresult is already error_mark_node, we no longer need to check if the result\r\nis nullptr.\r\n\r\nFixes #692\r\n\r\nSigned-off-by: Nirmal Patel <npate012@gmail.com>\r\n\n\n830: Cleanup lambdas within some AST types r=philberty a=dafaust\n\nCleanup constructs like:\r\n```C\r\n    struct_decl.iterate ([&] (AST::TupleField &field) mutable -> bool {\r\n        ... /* do stuff with field */\r\n    });\r\n```\r\nFor the following AST classes:\r\n- AST::StructStruct\r\n- AST::TupleStruct\r\n- AST::Union\r\n- AST::ArrayElemsValues\r\n\r\nFixes: #714\r\nFixes: #715\r\nFixes: #716\r\nFixes: #720\r\n\n\nCo-authored-by: Nirmal Patel <npate012@gmail.com>\nCo-authored-by: David Faust <david.faust@oracle.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/310968874db1902084012cf767ad0b6e93f028c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/310968874db1902084012cf767ad0b6e93f028c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/310968874db1902084012cf767ad0b6e93f028c2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88bf6bf78a6965d415292b958db14ad51fee25d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88bf6bf78a6965d415292b958db14ad51fee25d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88bf6bf78a6965d415292b958db14ad51fee25d1"}, {"sha": "f742bead5f4eb94908f188b99a3b261de0be9ca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f742bead5f4eb94908f188b99a3b261de0be9ca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f742bead5f4eb94908f188b99a3b261de0be9ca2"}, {"sha": "a9a7654d850a7140d1e0d636f2cc375308bb2c32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9a7654d850a7140d1e0d636f2cc375308bb2c32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9a7654d850a7140d1e0d636f2cc375308bb2c32"}], "stats": {"total": 316, "additions": 127, "deletions": 189}, "files": [{"sha": "7f6714a736a1aa150c7add171ba49584d01a25cc", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=310968874db1902084012cf767ad0b6e93f028c2", "patch": "@@ -996,15 +996,6 @@ class ArrayElemsValues : public ArrayElems\n \n   size_t get_num_values () const { return values.size (); }\n \n-  void iterate (std::function<bool (Expr *)> cb)\n-  {\n-    for (auto it = values.begin (); it != values.end (); it++)\n-      {\n-\tif (!cb ((*it).get ()))\n-\t  return;\n-      }\n-  }\n-\n protected:\n   ArrayElemsValues *clone_array_elems_impl () const override\n   {"}, {"sha": "a18a8e6e42a4b26d2001cc69583f11a70b9c1a94", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=310968874db1902084012cf767ad0b6e93f028c2", "patch": "@@ -1975,15 +1975,6 @@ class StructStruct : public Struct\n   std::vector<StructField> &get_fields () { return fields; }\n   const std::vector<StructField> &get_fields () const { return fields; }\n \n-  void iterate (std::function<bool (StructField &)> cb)\n-  {\n-    for (auto &field : fields)\n-      {\n-\tif (!cb (field))\n-\t  return;\n-      }\n-  }\n-\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -2110,15 +2101,6 @@ class TupleStruct : public Struct\n   std::vector<TupleField> &get_fields () { return fields; }\n   const std::vector<TupleField> &get_fields () const { return fields; }\n \n-  void iterate (std::function<bool (TupleField &)> cb)\n-  {\n-    for (auto &field : fields)\n-      {\n-\tif (!cb (field))\n-\t  return;\n-      }\n-  }\n-\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -2490,15 +2472,6 @@ class Union : public VisItem\n   std::vector<StructField> &get_variants () { return variants; }\n   const std::vector<StructField> &get_variants () const { return variants; }\n \n-  void iterate (std::function<bool (StructField &)> cb)\n-  {\n-    for (auto &variant : variants)\n-      {\n-\tif (!cb (variant))\n-\t  return;\n-      }\n-  }\n-\n   std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n     return generic_params;"}, {"sha": "d6e21946d110482f983137fce8876421cf0418d6", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=310968874db1902084012cf767ad0b6e93f028c2", "patch": "@@ -303,11 +303,11 @@ class ASTLoweringExpr : public ASTLoweringBase\n   void visit (AST::ArrayElemsValues &elems) override\n   {\n     std::vector<std::unique_ptr<HIR::Expr> > elements;\n-    elems.iterate ([&] (AST::Expr *elem) mutable -> bool {\n-      HIR::Expr *translated_elem = ASTLoweringExpr::translate (elem);\n-      elements.push_back (std::unique_ptr<HIR::Expr> (translated_elem));\n-      return true;\n-    });\n+    for (auto &elem : elems.get_values ())\n+      {\n+\tHIR::Expr *translated_elem = ASTLoweringExpr::translate (elem.get ());\n+\telements.push_back (std::unique_ptr<HIR::Expr> (translated_elem));\n+      }\n \n     translated_array_elems = new HIR::ArrayElemsValues (std::move (elements));\n   }"}, {"sha": "60315dba0e347ddbff3e9616da0bc8fb37345bff", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=310968874db1902084012cf767ad0b6e93f028c2", "patch": "@@ -154,24 +154,24 @@ class ASTLoweringItem : public ASTLoweringBase\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     std::vector<HIR::TupleField> fields;\n-    struct_decl.iterate ([&] (AST::TupleField &field) mutable -> bool {\n-      HIR::Visibility vis = HIR::Visibility::create_public ();\n-      HIR::Type *type\n-\t= ASTLoweringType::translate (field.get_field_type ().get ());\n-\n-      auto crate_num = mappings->get_current_crate ();\n-      Analysis::NodeMapping mapping (crate_num, field.get_node_id (),\n-\t\t\t\t     mappings->get_next_hir_id (crate_num),\n-\t\t\t\t     mappings->get_next_localdef_id (\n-\t\t\t\t       crate_num));\n-\n-      HIR::TupleField translated_field (mapping,\n-\t\t\t\t\tstd::unique_ptr<HIR::Type> (type), vis,\n-\t\t\t\t\tfield.get_locus (),\n-\t\t\t\t\tfield.get_outer_attrs ());\n-      fields.push_back (std::move (translated_field));\n-      return true;\n-    });\n+    for (AST::TupleField &field : struct_decl.get_fields ())\n+      {\n+\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Type *type\n+\t  = ASTLoweringType::translate (field.get_field_type ().get ());\n+\n+\tauto crate_num = mappings->get_current_crate ();\n+\tAnalysis::NodeMapping mapping (crate_num, field.get_node_id (),\n+\t\t\t\t       mappings->get_next_hir_id (crate_num),\n+\t\t\t\t       mappings->get_next_localdef_id (\n+\t\t\t\t\t crate_num));\n+\n+\tHIR::TupleField translated_field (mapping,\n+\t\t\t\t\t  std::unique_ptr<HIR::Type> (type),\n+\t\t\t\t\t  vis, field.get_locus (),\n+\t\t\t\t\t  field.get_outer_attrs ());\n+\tfields.push_back (std::move (translated_field));\n+      }\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, struct_decl.get_node_id (),\n@@ -215,28 +215,28 @@ class ASTLoweringItem : public ASTLoweringBase\n \n     bool is_unit = struct_decl.is_unit_struct ();\n     std::vector<HIR::StructField> fields;\n-    struct_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n-      HIR::Visibility vis = HIR::Visibility::create_public ();\n-      HIR::Type *type\n-\t= ASTLoweringType::translate (field.get_field_type ().get ());\n+    for (AST::StructField &field : struct_decl.get_fields ())\n+      {\n+\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Type *type\n+\t  = ASTLoweringType::translate (field.get_field_type ().get ());\n \n-      auto crate_num = mappings->get_current_crate ();\n-      Analysis::NodeMapping mapping (crate_num, field.get_node_id (),\n-\t\t\t\t     mappings->get_next_hir_id (crate_num),\n-\t\t\t\t     mappings->get_next_localdef_id (\n-\t\t\t\t       crate_num));\n+\tauto crate_num = mappings->get_current_crate ();\n+\tAnalysis::NodeMapping mapping (crate_num, field.get_node_id (),\n+\t\t\t\t       mappings->get_next_hir_id (crate_num),\n+\t\t\t\t       mappings->get_next_localdef_id (\n+\t\t\t\t\t crate_num));\n \n-      HIR::StructField translated_field (mapping, field.get_field_name (),\n-\t\t\t\t\t std::unique_ptr<HIR::Type> (type), vis,\n-\t\t\t\t\t field.get_locus (),\n-\t\t\t\t\t field.get_outer_attrs ());\n+\tHIR::StructField translated_field (mapping, field.get_field_name (),\n+\t\t\t\t\t   std::unique_ptr<HIR::Type> (type),\n+\t\t\t\t\t   vis, field.get_locus (),\n+\t\t\t\t\t   field.get_outer_attrs ());\n \n-      if (struct_field_name_exists (fields, translated_field))\n-\treturn false;\n+\tif (struct_field_name_exists (fields, translated_field))\n+\t  break;\n \n-      fields.push_back (std::move (translated_field));\n-      return true;\n-    });\n+\tfields.push_back (std::move (translated_field));\n+      }\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, struct_decl.get_node_id (),\n@@ -325,28 +325,28 @@ class ASTLoweringItem : public ASTLoweringBase\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     std::vector<HIR::StructField> variants;\n-    union_decl.iterate ([&] (AST::StructField &variant) mutable -> bool {\n-      HIR::Visibility vis = HIR::Visibility::create_public ();\n-      HIR::Type *type\n-\t= ASTLoweringType::translate (variant.get_field_type ().get ());\n-\n-      auto crate_num = mappings->get_current_crate ();\n-      Analysis::NodeMapping mapping (crate_num, variant.get_node_id (),\n-\t\t\t\t     mappings->get_next_hir_id (crate_num),\n-\t\t\t\t     mappings->get_next_localdef_id (\n-\t\t\t\t       crate_num));\n-\n-      HIR::StructField translated_variant (mapping, variant.get_field_name (),\n-\t\t\t\t\t   std::unique_ptr<HIR::Type> (type),\n-\t\t\t\t\t   vis, variant.get_locus (),\n-\t\t\t\t\t   variant.get_outer_attrs ());\n+    for (AST::StructField &variant : union_decl.get_variants ())\n+      {\n+\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Type *type\n+\t  = ASTLoweringType::translate (variant.get_field_type ().get ());\n+\n+\tauto crate_num = mappings->get_current_crate ();\n+\tAnalysis::NodeMapping mapping (crate_num, variant.get_node_id (),\n+\t\t\t\t       mappings->get_next_hir_id (crate_num),\n+\t\t\t\t       mappings->get_next_localdef_id (\n+\t\t\t\t\t crate_num));\n \n-      if (struct_field_name_exists (variants, translated_variant))\n-\treturn false;\n+\tHIR::StructField translated_variant (mapping, variant.get_field_name (),\n+\t\t\t\t\t     std::unique_ptr<HIR::Type> (type),\n+\t\t\t\t\t     vis, variant.get_locus (),\n+\t\t\t\t\t     variant.get_outer_attrs ());\n \n-      variants.push_back (std::move (translated_variant));\n-      return true;\n-    });\n+\tif (struct_field_name_exists (variants, translated_variant))\n+\t  break;\n+\n+\tvariants.push_back (std::move (translated_variant));\n+      }\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, union_decl.get_node_id (),"}, {"sha": "27fdd22f708cc99f07db1b4649646fb21b2ef261", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=310968874db1902084012cf767ad0b6e93f028c2", "patch": "@@ -151,24 +151,24 @@ class ASTLoweringStmt : public ASTLoweringBase\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     std::vector<HIR::TupleField> fields;\n-    struct_decl.iterate ([&] (AST::TupleField &field) mutable -> bool {\n-      HIR::Visibility vis = HIR::Visibility::create_public ();\n-      HIR::Type *type\n-\t= ASTLoweringType::translate (field.get_field_type ().get ());\n-\n-      auto crate_num = mappings->get_current_crate ();\n-      Analysis::NodeMapping mapping (crate_num, field.get_node_id (),\n-\t\t\t\t     mappings->get_next_hir_id (crate_num),\n-\t\t\t\t     mappings->get_next_localdef_id (\n-\t\t\t\t       crate_num));\n-\n-      HIR::TupleField translated_field (mapping,\n-\t\t\t\t\tstd::unique_ptr<HIR::Type> (type), vis,\n-\t\t\t\t\tfield.get_locus (),\n-\t\t\t\t\tfield.get_outer_attrs ());\n-      fields.push_back (std::move (translated_field));\n-      return true;\n-    });\n+    for (AST::TupleField &field : struct_decl.get_fields ())\n+      {\n+\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Type *type\n+\t  = ASTLoweringType::translate (field.get_field_type ().get ());\n+\n+\tauto crate_num = mappings->get_current_crate ();\n+\tAnalysis::NodeMapping mapping (crate_num, field.get_node_id (),\n+\t\t\t\t       mappings->get_next_hir_id (crate_num),\n+\t\t\t\t       mappings->get_next_localdef_id (\n+\t\t\t\t\t crate_num));\n+\n+\tHIR::TupleField translated_field (mapping,\n+\t\t\t\t\t  std::unique_ptr<HIR::Type> (type),\n+\t\t\t\t\t  vis, field.get_locus (),\n+\t\t\t\t\t  field.get_outer_attrs ());\n+\tfields.push_back (std::move (translated_field));\n+      }\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, struct_decl.get_node_id (),\n@@ -203,28 +203,28 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n     bool is_unit = struct_decl.is_unit_struct ();\n     std::vector<HIR::StructField> fields;\n-    struct_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n-      HIR::Visibility vis = HIR::Visibility::create_public ();\n-      HIR::Type *type\n-\t= ASTLoweringType::translate (field.get_field_type ().get ());\n+    for (AST::StructField &field : struct_decl.get_fields ())\n+      {\n+\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Type *type\n+\t  = ASTLoweringType::translate (field.get_field_type ().get ());\n \n-      auto crate_num = mappings->get_current_crate ();\n-      Analysis::NodeMapping mapping (crate_num, field.get_node_id (),\n-\t\t\t\t     mappings->get_next_hir_id (crate_num),\n-\t\t\t\t     mappings->get_next_localdef_id (\n-\t\t\t\t       crate_num));\n+\tauto crate_num = mappings->get_current_crate ();\n+\tAnalysis::NodeMapping mapping (crate_num, field.get_node_id (),\n+\t\t\t\t       mappings->get_next_hir_id (crate_num),\n+\t\t\t\t       mappings->get_next_localdef_id (\n+\t\t\t\t\t crate_num));\n \n-      HIR::StructField translated_field (mapping, field.get_field_name (),\n-\t\t\t\t\t std::unique_ptr<HIR::Type> (type), vis,\n-\t\t\t\t\t field.get_locus (),\n-\t\t\t\t\t field.get_outer_attrs ());\n+\tHIR::StructField translated_field (mapping, field.get_field_name (),\n+\t\t\t\t\t   std::unique_ptr<HIR::Type> (type),\n+\t\t\t\t\t   vis, field.get_locus (),\n+\t\t\t\t\t   field.get_outer_attrs ());\n \n-      if (struct_field_name_exists (fields, translated_field))\n-\treturn false;\n+\tif (struct_field_name_exists (fields, translated_field))\n+\t  break;\n \n-      fields.push_back (std::move (translated_field));\n-      return true;\n-    });\n+\tfields.push_back (std::move (translated_field));\n+      }\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, struct_decl.get_node_id (),\n@@ -258,28 +258,28 @@ class ASTLoweringStmt : public ASTLoweringBase\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     std::vector<HIR::StructField> variants;\n-    union_decl.iterate ([&] (AST::StructField &variant) mutable -> bool {\n-      HIR::Visibility vis = HIR::Visibility::create_public ();\n-      HIR::Type *type\n-\t= ASTLoweringType::translate (variant.get_field_type ().get ());\n-\n-      auto crate_num = mappings->get_current_crate ();\n-      Analysis::NodeMapping mapping (crate_num, variant.get_node_id (),\n-\t\t\t\t     mappings->get_next_hir_id (crate_num),\n-\t\t\t\t     mappings->get_next_localdef_id (\n-\t\t\t\t       crate_num));\n-\n-      HIR::StructField translated_variant (mapping, variant.get_field_name (),\n-\t\t\t\t\t   std::unique_ptr<HIR::Type> (type),\n-\t\t\t\t\t   vis, variant.get_locus (),\n-\t\t\t\t\t   variant.get_outer_attrs ());\n+    for (AST::StructField &variant : union_decl.get_variants ())\n+      {\n+\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Type *type\n+\t  = ASTLoweringType::translate (variant.get_field_type ().get ());\n+\n+\tauto crate_num = mappings->get_current_crate ();\n+\tAnalysis::NodeMapping mapping (crate_num, variant.get_node_id (),\n+\t\t\t\t       mappings->get_next_hir_id (crate_num),\n+\t\t\t\t       mappings->get_next_localdef_id (\n+\t\t\t\t\t crate_num));\n \n-      if (struct_field_name_exists (variants, translated_variant))\n-\treturn false;\n+\tHIR::StructField translated_variant (mapping, variant.get_field_name (),\n+\t\t\t\t\t     std::unique_ptr<HIR::Type> (type),\n+\t\t\t\t\t     vis, variant.get_locus (),\n+\t\t\t\t\t     variant.get_outer_attrs ());\n \n-      variants.push_back (std::move (translated_variant));\n-      return true;\n-    });\n+\tif (struct_field_name_exists (variants, translated_variant))\n+\t  break;\n+\n+\tvariants.push_back (std::move (translated_variant));\n+      }\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, union_decl.get_node_id (),"}, {"sha": "05d116f25393ff992a72b7ee1da244af430712dc", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=310968874db1902084012cf767ad0b6e93f028c2", "patch": "@@ -224,10 +224,8 @@ class ResolveExpr : public ResolverBase\n \n   void visit (AST::ArrayElemsValues &elems) override\n   {\n-    elems.iterate ([&] (AST::Expr *elem) mutable -> bool {\n-      ResolveExpr::go (elem, elems.get_node_id ());\n-      return true;\n-    });\n+    for (auto &elem : elems.get_values ())\n+      ResolveExpr::go (elem.get (), elems.get_node_id ());\n   }\n \n   void visit (AST::ArrayExpr &expr) override"}, {"sha": "b3035ed75f1da7bea31858a9722747d306f22eb4", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=310968874db1902084012cf767ad0b6e93f028c2", "patch": "@@ -245,11 +245,9 @@ class ResolveItem : public ResolverBase\n     if (struct_decl.has_where_clause ())\n       ResolveWhereClause::Resolve (struct_decl.get_where_clause ());\n \n-    struct_decl.iterate ([&] (AST::TupleField &field) mutable -> bool {\n+    for (AST::TupleField &field : struct_decl.get_fields ())\n       ResolveType::go (field.get_field_type ().get (),\n \t\t       struct_decl.get_node_id ());\n-      return true;\n-    });\n \n     resolver->get_type_scope ().pop ();\n   }\n@@ -310,11 +308,9 @@ class ResolveItem : public ResolverBase\n     if (struct_decl.has_where_clause ())\n       ResolveWhereClause::Resolve (struct_decl.get_where_clause ());\n \n-    struct_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n+    for (AST::StructField &field : struct_decl.get_fields ())\n       ResolveType::go (field.get_field_type ().get (),\n \t\t       struct_decl.get_node_id ());\n-      return true;\n-    });\n \n     resolver->get_type_scope ().pop ();\n   }\n@@ -335,11 +331,9 @@ class ResolveItem : public ResolverBase\n     if (union_decl.has_where_clause ())\n       ResolveWhereClause::Resolve (union_decl.get_where_clause ());\n \n-    union_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n+    for (AST::StructField &field : union_decl.get_variants ())\n       ResolveType::go (field.get_field_type ().get (),\n \t\t       union_decl.get_node_id ());\n-      return true;\n-    });\n \n     resolver->get_type_scope ().pop ();\n   }"}, {"sha": "ce6875c1fce65b663a6237d0537a403ceedc3f23", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=310968874db1902084012cf767ad0b6e93f028c2", "patch": "@@ -115,11 +115,9 @@ class ResolveStmt : public ResolverBase\n \t  }\n       }\n \n-    struct_decl.iterate ([&] (AST::TupleField &field) mutable -> bool {\n+    for (AST::TupleField &field : struct_decl.get_fields ())\n       ResolveType::go (field.get_field_type ().get (),\n \t\t       struct_decl.get_node_id ());\n-      return true;\n-    });\n \n     resolver->get_type_scope ().pop ();\n   }\n@@ -239,11 +237,9 @@ class ResolveStmt : public ResolverBase\n \t  }\n       }\n \n-    struct_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n+    for (AST::StructField &field : struct_decl.get_fields ())\n       ResolveType::go (field.get_field_type ().get (),\n \t\t       struct_decl.get_node_id ());\n-      return true;\n-    });\n \n     resolver->get_type_scope ().pop ();\n   }\n@@ -271,11 +267,9 @@ class ResolveStmt : public ResolverBase\n \t  }\n       }\n \n-    union_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n+    for (AST::StructField &field : union_decl.get_variants ())\n       ResolveType::go (field.get_field_type ().get (),\n \t\t       union_decl.get_node_id ());\n-      return true;\n-    });\n \n     resolver->get_type_scope ().pop ();\n   }"}, {"sha": "1545c1a6efd6a622772a8cec6047618e7ed95d39", "filename": "gcc/rust/typecheck/rust-hir-const-fold.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.cc?ref=310968874db1902084012cf767ad0b6e93f028c2", "patch": "@@ -64,8 +64,6 @@ void\n ConstFoldItem::visit (HIR::ConstantItem &item)\n {\n   auto folded_expr = ConstFoldExpr::fold (item.get_expr ());\n-  if (folded_expr == nullptr)\n-    return;\n \n   folded = folded_expr;\n }"}, {"sha": "d1f712777548ef4d0e7ed2e2fec2c78211bf707d", "filename": "gcc/rust/typecheck/rust-hir-const-fold.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h?ref=310968874db1902084012cf767ad0b6e93f028c2", "patch": "@@ -299,7 +299,7 @@ class ConstFoldExpr : public ConstFoldBase\n     if (folder.ctx->get_backend ()->is_error_expression (folder.folded))\n       {\n \trust_error_at (expr->get_locus (), \"non const value\");\n-\treturn nullptr;\n+\treturn folder.ctx->get_backend ()->error_expression ();\n       }\n \n     folder.ctx->insert_const (expr->get_mappings ().get_hirid (),\n@@ -423,12 +423,7 @@ class ConstFoldExpr : public ConstFoldBase\n   void visit (HIR::ArithmeticOrLogicalExpr &expr) override\n   {\n     auto lhs = ConstFoldExpr::fold (expr.get_lhs ());\n-    if (lhs == nullptr)\n-      return;\n-\n     auto rhs = ConstFoldExpr::fold (expr.get_rhs ());\n-    if (rhs == nullptr)\n-      return;\n \n     auto op = expr.get_expr_type ();\n     auto location = expr.get_locus ();\n@@ -441,8 +436,6 @@ class ConstFoldExpr : public ConstFoldBase\n   void visit (HIR::NegationExpr &expr) override\n   {\n     auto negated_expr = ConstFoldExpr::fold (expr.get_expr ().get ());\n-    if (negated_expr == nullptr)\n-      return;\n \n     auto op = expr.get_expr_type ();\n     auto location = expr.get_locus ();"}, {"sha": "4df7df6dd12837b31b63a748631af87d245dc155", "filename": "gcc/rust/typecheck/rust-hir-type-check-enumitem.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h?ref=310968874db1902084012cf767ad0b6e93f028c2", "patch": "@@ -74,8 +74,7 @@ class TypeCheckEnumItem : public TypeCheckBase\n     auto backend = rust_get_backend ();\n     auto folded_discriminant\n       = ConstFold::ConstFoldExpr::fold (discriminant.get ());\n-    if (folded_discriminant == nullptr\n-\t|| backend->is_error_expression (folded_discriminant))\n+    if (backend->is_error_expression (folded_discriminant))\n       return;\n \n     size_t specified_discriminant;"}, {"sha": "4596973c2c17e36e508d42800683067d5cc8a539", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310968874db1902084012cf767ad0b6e93f028c2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=310968874db1902084012cf767ad0b6e93f028c2", "patch": "@@ -151,8 +151,6 @@ TypeCheckType::visit (HIR::ArrayType &type)\n     return;\n \n   auto capacity = ConstFold::ConstFoldExpr::fold (type.get_size_expr ());\n-  if (capacity == nullptr)\n-    return;\n \n   TyTy::BaseType *base = TypeCheckType::Resolve (type.get_element_type ());\n   translated = new TyTy::ArrayType (type.get_mappings ().get_hirid (), capacity,"}]}