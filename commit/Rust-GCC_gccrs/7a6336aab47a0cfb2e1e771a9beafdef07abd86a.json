{"sha": "7a6336aab47a0cfb2e1e771a9beafdef07abd86a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E2MzM2YWFiNDdhMGNmYjJlMWU3NzFhOWJlYWZkZWYwN2FiZDg2YQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-10-31T21:58:10Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-10-31T21:58:10Z"}, "message": "re PR middle-end/14521 (Inconsistent quoting in new warning)\n\n\n\tPR middle-end/14521\n\t* tree-inline.c (inline_forbidden_p_1): Use %qF instead of '%F'\n\tfor consistent quoting in diagnostic messages.\n\t(expand_call_inline): Likewise.\n\t* tree-optimize.c (tree_rest_of_compilation): Likewise.\n\t* tree-ssa.c (warn_uninitialized_var): Likewise.\n\t(warn_uninitialized_phi): Likewise.\n\nFrom-SVN: r89918", "tree": {"sha": "ae24df29fc576081d78d7041c68451d37f3d12e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae24df29fc576081d78d7041c68451d37f3d12e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a6336aab47a0cfb2e1e771a9beafdef07abd86a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6336aab47a0cfb2e1e771a9beafdef07abd86a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a6336aab47a0cfb2e1e771a9beafdef07abd86a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6336aab47a0cfb2e1e771a9beafdef07abd86a/comments", "author": null, "committer": null, "parents": [{"sha": "29b4addfbca3fe3b5ee2cb88bc8f00ca48e4607f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b4addfbca3fe3b5ee2cb88bc8f00ca48e4607f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29b4addfbca3fe3b5ee2cb88bc8f00ca48e4607f"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "d11c081bc7d49cc078b486c617d0642b61983b33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6336aab47a0cfb2e1e771a9beafdef07abd86a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6336aab47a0cfb2e1e771a9beafdef07abd86a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a6336aab47a0cfb2e1e771a9beafdef07abd86a", "patch": "@@ -1,3 +1,13 @@\n+2004-10-31  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/14521\n+\t* tree-inline.c (inline_forbidden_p_1): Use %qF instead of '%F'\n+\tfor consistent quoting in diagnostic messages.\n+\t(expand_call_inline): Likewise.\n+\t* tree-optimize.c (tree_rest_of_compilation): Likewise.\n+\t* tree-ssa.c (warn_uninitialized_var): Likewise.\n+\t(warn_uninitialized_phi): Likewise.\n+\n 2004-10-31  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_cannot_change_mode_class): Use a stricter"}, {"sha": "17f3937e162d7aafe563e0a5fb0c294b470d9c39", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6336aab47a0cfb2e1e771a9beafdef07abd86a/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6336aab47a0cfb2e1e771a9beafdef07abd86a/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=7a6336aab47a0cfb2e1e771a9beafdef07abd86a", "patch": "@@ -941,7 +941,7 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t  && !lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)))\n \t{\n \t  inline_forbidden_reason\n-\t    = N_(\"%Jfunction '%F' can never be inlined because it uses \"\n+\t    = N_(\"%Jfunction %qF can never be inlined because it uses \"\n \t\t \"alloca (override using the always_inline attribute)\");\n \t  return node;\n \t}\n@@ -953,7 +953,7 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n       if (setjmp_call_p (t))\n \t{\n \t  inline_forbidden_reason\n-\t    = N_(\"%Jfunction '%F' can never be inlined because it uses setjmp\");\n+\t    = N_(\"%Jfunction %qF can never be inlined because it uses setjmp\");\n \t  return node;\n \t}\n \n@@ -967,7 +967,7 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t  case BUILT_IN_NEXT_ARG:\n \t  case BUILT_IN_VA_END:\n \t    inline_forbidden_reason\n-\t      = N_(\"%Jfunction '%F' can never be inlined because it \"\n+\t      = N_(\"%Jfunction %qF can never be inlined because it \"\n \t\t   \"uses variable argument lists\");\n \t    return node;\n \n@@ -978,14 +978,14 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t       function calling __builtin_longjmp to be inlined into the\n \t       function calling __builtin_setjmp, Things will Go Awry.  */\n \t    inline_forbidden_reason\n-\t      = N_(\"%Jfunction '%F' can never be inlined because \"\n+\t      = N_(\"%Jfunction %qF can never be inlined because \"\n \t\t   \"it uses setjmp-longjmp exception handling\");\n \t    return node;\n \n \t  case BUILT_IN_NONLOCAL_GOTO:\n \t    /* Similarly.  */\n \t    inline_forbidden_reason\n-\t      = N_(\"%Jfunction '%F' can never be inlined because \"\n+\t      = N_(\"%Jfunction %qF can never be inlined because \"\n \t\t   \"it uses non-local goto\");\n \t    return node;\n \n@@ -1004,7 +1004,7 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n       if (TREE_CODE (t) != LABEL_DECL)\n \t{\n \t  inline_forbidden_reason\n-\t    = N_(\"%Jfunction '%F' can never be inlined \"\n+\t    = N_(\"%Jfunction %qF can never be inlined \"\n \t\t \"because it contains a computed goto\");\n \t  return node;\n \t}\n@@ -1018,7 +1018,7 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t     because we cannot remap the destination label used in the\n \t     function that is performing the non-local goto.  */\n \t  inline_forbidden_reason\n-\t    = N_(\"%Jfunction '%F' can never be inlined \"\n+\t    = N_(\"%Jfunction %qF can never be inlined \"\n \t\t \"because it receives a non-local goto\");\n \t  return node;\n \t}\n@@ -1040,7 +1040,7 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n \tif (variably_modified_type_p (TREE_TYPE (t), NULL))\n \t  {\n \t    inline_forbidden_reason\n-\t      = N_(\"%Jfunction '%F' can never be inlined \"\n+\t      = N_(\"%Jfunction %qF can never be inlined \"\n \t\t   \"because it uses variable sized variables\");\n \t    return node;\n \t  }\n@@ -1471,15 +1471,15 @@ expand_call_inline (tree *tp, int *walk_subtrees, void *data)\n     {\n       if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)))\n \t{\n-\t  sorry (\"%Jinlining failed in call to '%F': %s\", fn, fn, reason);\n+\t  sorry (\"%Jinlining failed in call to %qF: %s\", fn, fn, reason);\n \t  sorry (\"called from here\");\n \t}\n       else if (warn_inline && DECL_DECLARED_INLINE_P (fn)\n \t       && !DECL_IN_SYSTEM_HEADER (fn)\n \t       && strlen (reason)\n \t       && !lookup_attribute (\"noinline\", DECL_ATTRIBUTES (fn)))\n \t{\n-\t  warning (\"%Jinlining failed in call to '%F': %s\", fn, fn, reason);\n+\t  warning (\"%Jinlining failed in call to %qF: %s\", fn, fn, reason);\n \t  warning (\"called from here\");\n \t}\n       goto egress;"}, {"sha": "e2eb8812fa52c734072774fe80f8e44ba6758d91", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6336aab47a0cfb2e1e771a9beafdef07abd86a/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6336aab47a0cfb2e1e771a9beafdef07abd86a/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=7a6336aab47a0cfb2e1e771a9beafdef07abd86a", "patch": "@@ -683,10 +683,10 @@ tree_rest_of_compilation (tree fndecl)\n \t    = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (ret_type));\n \n \t  if (compare_tree_int (TYPE_SIZE_UNIT (ret_type), size_as_int) == 0)\n-\t    warning (\"%Jsize of return value of '%D' is %u bytes\",\n+\t    warning (\"%Jsize of return value of %qD is %u bytes\",\n                      fndecl, fndecl, size_as_int);\n \t  else\n-\t    warning (\"%Jsize of return value of '%D' is larger than %wd bytes\",\n+\t    warning (\"%Jsize of return value of %qD is larger than %wd bytes\",\n                      fndecl, fndecl, larger_than_size);\n \t}\n     }"}, {"sha": "3ba15ee3c1ccf0a703eb5903ade9db29f20a3b68", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6336aab47a0cfb2e1e771a9beafdef07abd86a/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6336aab47a0cfb2e1e771a9beafdef07abd86a/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=7a6336aab47a0cfb2e1e771a9beafdef07abd86a", "patch": "@@ -1388,7 +1388,7 @@ warn_uninitialized_var (tree *tp, int *walk_subtrees, void *data)\n   /* We only do data flow with SSA_NAMEs, so that's all we can warn about.  */\n   if (TREE_CODE (t) == SSA_NAME)\n     {\n-      warn_uninit (t, \"%H'%D' is used uninitialized in this function\", locus);\n+      warn_uninit (t, \"%H%qD is used uninitialized in this function\", locus);\n       *walk_subtrees = 0;\n     }\n   else if (IS_TYPE_OR_DECL_P (t))\n@@ -1413,7 +1413,7 @@ warn_uninitialized_phi (tree phi)\n     {\n       tree op = PHI_ARG_DEF (phi, i);\n       if (TREE_CODE (op) == SSA_NAME)\n-\twarn_uninit (op, \"%H'%D' may be used uninitialized in this function\",\n+\twarn_uninit (op, \"%H%qD may be used uninitialized in this function\",\n \t\t     NULL);\n     }\n }"}]}