{"sha": "b04e13e8be4a25abb773bf2f4a1612fa306140dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA0ZTEzZThiZTRhMjVhYmI3NzNiZjJmNGExNjEyZmEzMDYxNDBkYw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-02-11T22:19:49Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-02-11T22:19:49Z"}, "message": "dwarf2out.c (root_type): Delete unused function.\n\n2007-02-11  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\t* dwarf2out.c (root_type): Delete unused function.\n\nFrom-SVN: r121828", "tree": {"sha": "f1e045f0277701d7d4579c5aad531d3b44ebeb94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1e045f0277701d7d4579c5aad531d3b44ebeb94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b04e13e8be4a25abb773bf2f4a1612fa306140dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04e13e8be4a25abb773bf2f4a1612fa306140dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b04e13e8be4a25abb773bf2f4a1612fa306140dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04e13e8be4a25abb773bf2f4a1612fa306140dc/comments", "author": null, "committer": null, "parents": [{"sha": "807331086bd15e491199279e872d75052c67bed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807331086bd15e491199279e872d75052c67bed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/807331086bd15e491199279e872d75052c67bed9"}], "stats": {"total": 34, "additions": 4, "deletions": 30}, "files": [{"sha": "78068fb4e5f0f993617d89e7be62f316db7fd5f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04e13e8be4a25abb773bf2f4a1612fa306140dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04e13e8be4a25abb773bf2f4a1612fa306140dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b04e13e8be4a25abb773bf2f4a1612fa306140dc", "patch": "@@ -1,3 +1,7 @@\n+2007-02-11  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* dwarf2out.c (root_type): Delete unused function.\n+\t\n 2007-02-11  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* genattrtab.c (contained_in_p): Delete unused function."}, {"sha": "f77d4f2559e4cf7dbbc376c340b8140a36d35841", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04e13e8be4a25abb773bf2f4a1612fa306140dc/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04e13e8be4a25abb773bf2f4a1612fa306140dc/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=b04e13e8be4a25abb773bf2f4a1612fa306140dc", "patch": "@@ -4153,7 +4153,6 @@ static void output_ranges (void);\n static void output_line_info (void);\n static void output_file_names (void);\n static dw_die_ref base_type_die (tree);\n-static tree root_type (tree);\n static int is_base_type (tree);\n static bool is_subrange_type (tree);\n static dw_die_ref subrange_type_die (tree, dw_die_ref);\n@@ -8303,35 +8302,6 @@ base_type_die (tree type)\n   return base_type_result;\n }\n \n-/* Given a pointer to an arbitrary ..._TYPE tree node, return a pointer to\n-   the Dwarf \"root\" type for the given input type.  The Dwarf \"root\" type of\n-   a given type is generally the same as the given type, except that if the\n-   given type is a pointer or reference type, then the root type of the given\n-   type is the root type of the \"basis\" type for the pointer or reference\n-   type.  (This definition of the \"root\" type is recursive.) Also, the root\n-   type of a `const' qualified type or a `volatile' qualified type is the\n-   root type of the given type without the qualifiers.  */\n-\n-static tree\n-root_type (tree type)\n-{\n-  if (TREE_CODE (type) == ERROR_MARK)\n-    return error_mark_node;\n-\n-  switch (TREE_CODE (type))\n-    {\n-    case ERROR_MARK:\n-      return error_mark_node;\n-\n-    case POINTER_TYPE:\n-    case REFERENCE_TYPE:\n-      return type_main_variant (root_type (TREE_TYPE (type)));\n-\n-    default:\n-      return type_main_variant (type);\n-    }\n-}\n-\n /* Given a pointer to an arbitrary ..._TYPE tree node, return nonzero if the\n    given input type is a Dwarf \"fundamental\" type.  Otherwise return null.  */\n "}]}