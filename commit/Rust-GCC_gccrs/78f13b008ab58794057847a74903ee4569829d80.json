{"sha": "78f13b008ab58794057847a74903ee4569829d80", "node_id": "C_kwDOANBUbNoAKDc4ZjEzYjAwOGFiNTg3OTQwNTc4NDdhNzQ5MDNlZTQ1Njk4MjlkODA", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2022-05-26T15:02:01Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-04T07:45:57Z"}, "message": "[Ada] Tech debt: Remove code duplication\n\nThis patch corrects removes some code duplication within the GNAT\ncompiler.\n\ngcc/ada/\n\n\t* exp_util.adb (Remove_Side_Effects): Combine identical\n\tbranches.\n\t* sem_attr.adb (Analyze_Attribute): Combine identical cases\n\tAttribute_Has_Same_Storage and Attribute_Overlaps_Storage.\n\t* sem_prag.adb (Check_Role): Combine E_Out_Parameter case with\n\tgeneral case for parameters.\n\t* sem_util.adb (Accessibility_Level): Combine identical\n\tbranches.\n\t* sprint.adb (Sprint_Node_Actual): Combine cases for\n\tN_Real_Range_Specification and N_Signed_Integer_Type_Definition.", "tree": {"sha": "47c9f8365e4c74f6bd251424084d409f0edbe251", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47c9f8365e4c74f6bd251424084d409f0edbe251"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78f13b008ab58794057847a74903ee4569829d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78f13b008ab58794057847a74903ee4569829d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78f13b008ab58794057847a74903ee4569829d80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78f13b008ab58794057847a74903ee4569829d80/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fde86bba55ea61b56f79798c6ac4cc6808e51a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fde86bba55ea61b56f79798c6ac4cc6808e51a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fde86bba55ea61b56f79798c6ac4cc6808e51a1"}], "stats": {"total": 154, "additions": 47, "deletions": 107}, "files": [{"sha": "eaf7ebf85614fd6cdbb0489e0b677e032216738d", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f13b008ab58794057847a74903ee4569829d80/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f13b008ab58794057847a74903ee4569829d80/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=78f13b008ab58794057847a74903ee4569829d80", "patch": "@@ -12017,31 +12017,23 @@ package body Exp_Util is\n       --  renaming is handled by the front end, as the back end may balk at\n       --  the nonstandard representation (see Evaluation_Required in Exp_Ch8).\n \n-      elsif Nkind (Exp) in N_Indexed_Component | N_Selected_Component\n-        and then Has_Non_Standard_Rep (Etype (Prefix (Exp)))\n-      then\n-         Def_Id := Build_Temporary (Loc, 'R', Exp);\n-         Res := New_Occurrence_Of (Def_Id, Loc);\n-\n-         Insert_Action (Exp,\n-           Make_Object_Renaming_Declaration (Loc,\n-             Defining_Identifier => Def_Id,\n-             Subtype_Mark        => New_Occurrence_Of (Exp_Type, Loc),\n-             Name                => Relocate_Node (Exp)));\n+      elsif (Nkind (Exp) in N_Indexed_Component | N_Selected_Component\n+              and then Has_Non_Standard_Rep (Etype (Prefix (Exp))))\n \n-      --  For an expression that denotes a name, we can use a renaming scheme.\n-      --  This is needed for correctness in the case of a volatile object of\n-      --  a nonvolatile type because the Make_Reference call of the \"default\"\n-      --  approach would generate an illegal access value (an access value\n-      --  cannot designate such an object - see Analyze_Reference).\n+        --  For an expression that denotes a name, we can use a renaming\n+        --  scheme. This is needed for correctness in the case of a volatile\n+        --  object of a nonvolatile type because the Make_Reference call of the\n+        --  \"default\" approach would generate an illegal access value (an\n+        --  access value cannot designate such an object - see\n+        --  Analyze_Reference).\n \n-      elsif Is_Name_Reference (Exp)\n+        or else (Is_Name_Reference (Exp)\n \n-        --  We skip using this scheme if we have an object of a volatile\n-        --  type and we do not have Name_Req set true (see comments for\n-        --  Side_Effect_Free).\n+          --  We skip using this scheme if we have an object of a volatile\n+          --  type and we do not have Name_Req set true (see comments for\n+          --  Side_Effect_Free).\n \n-        and then (Name_Req or else not Treat_As_Volatile (Exp_Type))\n+          and then (Name_Req or else not Treat_As_Volatile (Exp_Type)))\n       then\n          Def_Id := Build_Temporary (Loc, 'R', Exp);\n          Res := New_Occurrence_Of (Def_Id, Loc);"}, {"sha": "c0998a5be66da9d7e6c80945fa92713df63e6984", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f13b008ab58794057847a74903ee4569829d80/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f13b008ab58794057847a74903ee4569829d80/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=78f13b008ab58794057847a74903ee4569829d80", "patch": "@@ -4451,7 +4451,9 @@ package body Sem_Attr is\n       -- Has_Same_Storage --\n       ----------------------\n \n-      when Attribute_Has_Same_Storage =>\n+      when Attribute_Has_Same_Storage\n+         | Attribute_Overlaps_Storage\n+      =>\n          Check_E1;\n \n          --  The arguments must be objects of any type\n@@ -5563,21 +5565,6 @@ package body Sem_Attr is\n          end if;\n       end Old;\n \n-      ----------------------\n-      -- Overlaps_Storage --\n-      ----------------------\n-\n-      when Attribute_Overlaps_Storage =>\n-         Check_E1;\n-\n-         --  Both arguments must be objects of any type\n-\n-         Analyze_And_Resolve (P);\n-         Analyze_And_Resolve (E1);\n-         Check_Object_Reference (P);\n-         Check_Object_Reference (E1);\n-         Set_Etype (N, Standard_Boolean);\n-\n       ------------\n       -- Output --\n       ------------"}, {"sha": "f1fd9b2ba281e9075cba2d4e258e45d767c4e51e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 29, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f13b008ab58794057847a74903ee4569829d80/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f13b008ab58794057847a74903ee4569829d80/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=78f13b008ab58794057847a74903ee4569829d80", "patch": "@@ -1361,36 +1361,15 @@ package body Sem_Prag is\n \n                when E_Generic_In_Out_Parameter\n                   | E_In_Out_Parameter\n+                  | E_Out_Parameter\n                   | E_Variable\n                =>\n-                  --  When pragma Global is present it determines the mode of\n-                  --  the object.\n-\n-                  if Global_Seen then\n-\n-                     --  A variable has mode IN when its type is unconstrained\n-                     --  or tagged because array bounds, discriminants or tags\n-                     --  can be read.\n-\n-                     Item_Is_Input :=\n-                       Appears_In (Subp_Inputs, Item_Id)\n-                         or else Is_Unconstrained_Or_Tagged_Item (Item_Id);\n-\n-                     Item_Is_Output := Appears_In (Subp_Outputs, Item_Id);\n-\n-                  --  Otherwise the variable has a default IN OUT mode\n-\n-                  else\n-                     Item_Is_Input  := True;\n-                     Item_Is_Output := True;\n-                  end if;\n-\n-               when E_Out_Parameter =>\n-\n                   --  An OUT parameter of the related subprogram; it cannot\n                   --  appear in Global.\n \n-                  if Scope (Item_Id) = Spec_Id then\n+                  if Adjusted_Kind = E_Out_Parameter\n+                    and then Scope (Item_Id) = Spec_Id\n+                  then\n \n                      --  The parameter has mode IN if its type is unconstrained\n                      --  or tagged because array bounds, discriminants or tags\n@@ -1401,8 +1380,8 @@ package body Sem_Prag is\n \n                      Item_Is_Output := True;\n \n-                  --  An OUT parameter of an enclosing subprogram; it can\n-                  --  appear in Global and behaves as a read-write variable.\n+                  --  A parameter of an enclosing subprogram; it can appear\n+                  --  in Global and behaves as a read-write variable.\n \n                   else\n                      --  When pragma Global is present it determines the mode\n@@ -1411,8 +1390,8 @@ package body Sem_Prag is\n                      if Global_Seen then\n \n                         --  A variable has mode IN when its type is\n-                        --  unconstrained or tagged because array\n-                        --  bounds, discriminants or tags can be read.\n+                        --  unconstrained or tagged because array bounds,\n+                        --  discriminants, or tags can be read.\n \n                         Item_Is_Input :=\n                           Appears_In (Subp_Inputs, Item_Id)"}, {"sha": "1b0b39befae6af5cc6169264416039ce73816dcc", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 20, "deletions": 34, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f13b008ab58794057847a74903ee4569829d80/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f13b008ab58794057847a74903ee4569829d80/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=78f13b008ab58794057847a74903ee4569829d80", "patch": "@@ -798,44 +798,30 @@ package body Sem_Util is\n             --  in effect we treat discriminant components as regular\n             --  components.\n \n-            elsif Nkind (E) = N_Selected_Component\n-              and then Ekind (Etype (E))   =  E_Anonymous_Access_Type\n-              and then Ekind (Etype (Pre)) /= E_Anonymous_Access_Type\n-              and then (not (Nkind (Selector_Name (E)) in N_Has_Entity\n-                              and then Ekind (Entity (Selector_Name (E)))\n-                                         = E_Discriminant)\n-\n-                        --  The alternative accessibility models both treat\n-                        --  discriminants as regular components.\n-\n-                        or else (No_Dynamic_Accessibility_Checks_Enabled (E)\n-                                  and then Allow_Alt_Model))\n-            then\n-               --  When restriction No_Dynamic_Accessibility_Checks is active\n-               --  and -gnatd_b set, the level is that of the designated type.\n-\n-               if Allow_Alt_Model\n-                 and then No_Dynamic_Accessibility_Checks_Enabled (E)\n-                 and then Debug_Flag_Underscore_B\n-               then\n-                  return Make_Level_Literal\n-                           (Typ_Access_Level (Etype (E)));\n-               end if;\n+            elsif\n+              (Nkind (E) = N_Selected_Component\n+                and then Ekind (Etype (E))   =  E_Anonymous_Access_Type\n+                and then Ekind (Etype (Pre)) /= E_Anonymous_Access_Type\n+                and then (not (Nkind (Selector_Name (E)) in N_Has_Entity\n+                                and then Ekind (Entity (Selector_Name (E)))\n+                                           = E_Discriminant)\n \n-               --  Otherwise proceed normally\n+                           --  The alternative accessibility models both treat\n+                           --  discriminants as regular components.\n \n-               return Make_Level_Literal\n-                        (Typ_Access_Level (Etype (Prefix (E))));\n+                           or else (No_Dynamic_Accessibility_Checks_Enabled (E)\n+                                     and then Allow_Alt_Model)))\n \n-            --  Similar to the previous case - arrays featuring components of\n-            --  anonymous access components get their corresponding level from\n-            --  their containing type's declaration.\n+              --  Arrays featuring components of anonymous access components\n+              --  get their corresponding level from their containing type's\n+              --  declaration.\n \n-            elsif Nkind (E) = N_Indexed_Component\n-              and then Ekind (Etype (E)) = E_Anonymous_Access_Type\n-              and then Ekind (Etype (Pre)) in Array_Kind\n-              and then Ekind (Component_Type (Base_Type (Etype (Pre))))\n-                         = E_Anonymous_Access_Type\n+              or else\n+                (Nkind (E) = N_Indexed_Component\n+                  and then Ekind (Etype (E)) = E_Anonymous_Access_Type\n+                  and then Ekind (Etype (Pre)) in Array_Kind\n+                  and then Ekind (Component_Type (Base_Type (Etype (Pre))))\n+                             = E_Anonymous_Access_Type)\n             then\n                --  When restriction No_Dynamic_Accessibility_Checks is active\n                --  and -gnatd_b set, the level is that of the designated type."}, {"sha": "42a6e4f8ff6af42c3b5e20053804f61b7dc21c75", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f13b008ab58794057847a74903ee4569829d80/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f13b008ab58794057847a74903ee4569829d80/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=78f13b008ab58794057847a74903ee4569829d80", "patch": "@@ -3132,7 +3132,9 @@ package body Sprint is\n          when N_Real_Literal =>\n             Write_Ureal_With_Col_Check_Sloc (Realval (Node));\n \n-         when N_Real_Range_Specification =>\n+         when N_Real_Range_Specification\n+            | N_Signed_Integer_Type_Definition\n+         =>\n             Write_Str_With_Col_Check_Sloc (\"range \");\n             Sprint_Node (Low_Bound (Node));\n             Write_Str (\" .. \");\n@@ -3248,12 +3250,6 @@ package body Sprint is\n \n             Write_Indent_Str (\"end select;\");\n \n-         when N_Signed_Integer_Type_Definition =>\n-            Write_Str_With_Col_Check_Sloc (\"range \");\n-            Sprint_Node (Low_Bound (Node));\n-            Write_Str (\" .. \");\n-            Sprint_Node (High_Bound (Node));\n-\n          when N_Single_Protected_Declaration =>\n             Write_Indent_Str_Sloc (\"protected \");\n             Write_Id (Defining_Identifier (Node));"}]}