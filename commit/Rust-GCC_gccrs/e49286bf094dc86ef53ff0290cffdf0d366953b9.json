{"sha": "e49286bf094dc86ef53ff0290cffdf0d366953b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ5Mjg2YmYwOTRkYzg2ZWY1M2ZmMDI5MGNmZmRmMGQzNjY5NTNiOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-03-23T22:30:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-03-23T22:30:09Z"}, "message": "4402.cc: Likewise use std::numeric_limits<>::max().\n\n2007-03-23  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/4402.cc:\n\tLikewise use std::numeric_limits<>::max().\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/char/4402.cc:\n\tMinor tweaks.\n\nFrom-SVN: r123165", "tree": {"sha": "6f4152100de3064b423752c45e6522999ef5a7ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f4152100de3064b423752c45e6522999ef5a7ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e49286bf094dc86ef53ff0290cffdf0d366953b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49286bf094dc86ef53ff0290cffdf0d366953b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49286bf094dc86ef53ff0290cffdf0d366953b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49286bf094dc86ef53ff0290cffdf0d366953b9/comments", "author": null, "committer": null, "parents": [{"sha": "00f9e1ca8e1ae954e82c0fa4e4ae90c4ad9c57f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00f9e1ca8e1ae954e82c0fa4e4ae90c4ad9c57f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00f9e1ca8e1ae954e82c0fa4e4ae90c4ad9c57f4"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "a44837c8d431711fc099539084b7c36a92b511ed", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/4402.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49286bf094dc86ef53ff0290cffdf0d366953b9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F4402.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49286bf094dc86ef53ff0290cffdf0d366953b9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F4402.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F4402.cc?ref=e49286bf094dc86ef53ff0290cffdf0d366953b9", "patch": "@@ -1,7 +1,8 @@\n // 1999-11-15 Kevin Ediger  <kediger@licor.com>\n // test the floating point inserters (facet num_put)\n \n-// Copyright (C) 1999, 2002, 2003, 2005, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,7 +34,7 @@ test02()\n   bool test __attribute__((unused)) = true;\n \n   // make sure we can output a very long float\n-  long double val = std::numeric_limits<long double>::max();\n+  long double val = numeric_limits<long double>::max();\n   int prec = numeric_limits<long double>::digits10;\n \n   ostringstream os;\n@@ -51,7 +52,7 @@ test02()\n \n   // Make sure we can output a long float in fixed format\n   // without seg-faulting (libstdc++/4402)\n-  double val2 = std::numeric_limits<double>::max();\n+  double val2 = numeric_limits<double>::max();\n \n   ostringstream os2;\n   os2.precision(3);"}, {"sha": "c98f3cb267acd581bae3bca8c76b961ace0d86eb", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/4402.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49286bf094dc86ef53ff0290cffdf0d366953b9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F4402.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49286bf094dc86ef53ff0290cffdf0d366953b9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F4402.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F4402.cc?ref=e49286bf094dc86ef53ff0290cffdf0d366953b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,7 +30,7 @@ test02()\n   bool test __attribute__((unused)) = true;\n \n   // make sure we can output a very long float\n-  long double val = 1.2345678901234567890123456789e+1000L;\n+  long double val = numeric_limits<long double>::max();\n   int prec = numeric_limits<long double>::digits10;\n \n   wostringstream os;\n@@ -48,7 +48,7 @@ test02()\n \n   // Make sure we can output a long float in fixed format\n   // without seg-faulting (libstdc++/4402)\n-  double val2 = 3.5e230;\n+  double val2 = numeric_limits<double>::max();\n \n   wostringstream os2;\n   os2.precision(3);"}]}