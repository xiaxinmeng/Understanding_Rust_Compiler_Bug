{"sha": "59cffcf69a5026fc54a38479c93f8ea961db8ecd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTljZmZjZjY5YTUwMjZmYzU0YTM4NDc5YzkzZjhlYTk2MWRiOGVjZA==", "commit": {"author": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2005-04-01T03:35:59Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2005-04-01T03:35:59Z"}, "message": "[multiple changes]\n\n2005-03-31  Chris Jefferson  <chris@bubblescope.net>\n\n        * include/tr1/tuple: Support iteration via tuple_iterate.h.\n        * include/tr1/tuple_iterate.h: Iteration file for tuple.\n\n2005-03-31  Douglas Gregor  <doug.gregor@gmail.com>\n\n        * include/Makefile.am (tr1_headers): Add bind and mu repetition\n        headers and reference_wrapper<> forwarding header.\n        * include/Makefile.in: Regenerate.\n        * include/tr1/bind_iterate.h: Implementation of function call\n        operators for the function object returned from tr1::bind().\n        * include/tr1/bind_repeat.h: Bind-specific repetition header,\n        akin to include/tr1/repeat.h.\n        * include/tr1/functional (_Mem_fn): Bug fix: declare result\nmember\n        template for use with result_of.\n        (is_bind_expression): New.\n        (is_placeholder): New.\n        (_Placeholder): New. Placeholder type for bind.\n        (_Mu): New. Implementation detail of bind.\n        (_Bind, _Bind_result): New. Function objects returned by bind.\n        (_GLIBCXX_JOIN): New. Required to create bind placeholders.\n        * include/tr1/functional_iterate.h (_Bind, _Bind_result, bind):\n        New. Implementation of tr1::bind.\n        * include/tr1/mu_iterate.h (_Mu): result template and operator()\n        for the _Mu helper to bind.\n        * include/tr1/ref_fwd.h (reference_wrapper): Forward declaration\n        used by tuple header.\n        (ref): Ditto.\n        (cref): Ditto.\n        * include/tr1/repeat.h: Add bind-specific repetition macros.\n        * include/tr1/tuple: Use reference_wrapper forwarding header for\n        initial definitions, then include <tr1/functional> at the end, to\n        make the circular dependencies work.\n        (tie): Support zero-argument tie() function.\n        * testsuite/tr1/3_function_objects/bind/all_bound.cc: New test of\n        bind() functionality with parameters bound.\n        * testsuite/tr1/3_function_objects/bind/nested.cc: New test of\n        nested bind() expressions.\n        * testsuite/tr1/3_function_objects/bind/placeholders.cc: New test\n        of bind() placeholders.\n        * testsuite/tr1/3_function_objects/bind/ref.cc: New test of bind()\n        with arguments bound via reference_wrapper<>.\n        * scripts/gen_includers.pl: Generate the repetitive part of\n\tinclude/tr1/repeat.h.\n\t* scripts/gen_bind_includers.pl: Generate the repetitive part of\n\tinclude/tr1/bind_repeat.h.\n\nFrom-SVN: r97361", "tree": {"sha": "6989839fac1800a14041743cde970c5877a70995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6989839fac1800a14041743cde970c5877a70995"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59cffcf69a5026fc54a38479c93f8ea961db8ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59cffcf69a5026fc54a38479c93f8ea961db8ecd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59cffcf69a5026fc54a38479c93f8ea961db8ecd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59cffcf69a5026fc54a38479c93f8ea961db8ecd/comments", "author": null, "committer": null, "parents": [{"sha": "c423ee0d3582e8bd7dc16da63365f5954e6afe6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c423ee0d3582e8bd7dc16da63365f5954e6afe6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c423ee0d3582e8bd7dc16da63365f5954e6afe6e"}], "stats": {"total": 3451, "additions": 1767, "deletions": 1684}, "files": [{"sha": "014eef94ccca9eda2829cc172251c6cee88525df", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -1,3 +1,51 @@\n+2005-03-31  Chris Jefferson  <chris@bubblescope.net>\n+\n+        * include/tr1/tuple: Support iteration via tuple_iterate.h.\n+        * include/tr1/tuple_iterate.h: Iteration file for tuple.\n+\n+2005-03-31  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+        * include/Makefile.am (tr1_headers): Add bind and mu repetition\n+        headers and reference_wrapper<> forwarding header.\n+        * include/Makefile.in: Regenerate.\n+        * include/tr1/bind_iterate.h: Implementation of function call\n+        operators for the function object returned from tr1::bind().\n+        * include/tr1/bind_repeat.h: Bind-specific repetition header,\n+        akin to include/tr1/repeat.h.\n+        * include/tr1/functional (_Mem_fn): Bug fix: declare result member\n+        template for use with result_of.\n+        (is_bind_expression): New.\n+        (is_placeholder): New.\n+        (_Placeholder): New. Placeholder type for bind.\n+        (_Mu): New. Implementation detail of bind.\n+        (_Bind, _Bind_result): New. Function objects returned by bind.\n+        (_GLIBCXX_JOIN): New. Required to create bind placeholders.\n+        * include/tr1/functional_iterate.h (_Bind, _Bind_result, bind):\n+        New. Implementation of tr1::bind.\n+        * include/tr1/mu_iterate.h (_Mu): result template and operator()\n+        for the _Mu helper to bind.\n+        * include/tr1/ref_fwd.h (reference_wrapper): Forward declaration\n+        used by tuple header.\n+        (ref): Ditto.\n+        (cref): Ditto.\n+        * include/tr1/repeat.h: Add bind-specific repetition macros.\n+        * include/tr1/tuple: Use reference_wrapper forwarding header for\n+        initial definitions, then include <tr1/functional> at the end, to\n+        make the circular dependencies work.\n+        (tie): Support zero-argument tie() function.\n+        * testsuite/tr1/3_function_objects/bind/all_bound.cc: New test of\n+        bind() functionality with parameters bound.\n+        * testsuite/tr1/3_function_objects/bind/nested.cc: New test of\n+        nested bind() expressions.\n+        * testsuite/tr1/3_function_objects/bind/placeholders.cc: New test\n+        of bind() placeholders.\n+        * testsuite/tr1/3_function_objects/bind/ref.cc: New test of bind()\n+        with arguments bound via reference_wrapper<>.\n+        * scripts/gen_includers.pl: Generate the repetitive part of\n+\tinclude/tr1/repeat.h.\n+\t* scripts/gen_bind_includers.pl: Generate the repetitive part of\n+\tinclude/tr1/bind_repeat.h. \n+\t\n 2005-03-30  Aaron W. LaFramboise  <aaronavay62@aaronwl.com>\n \n \t* testsuite/Makefile.am (CXX): Use ${SHELL}."}, {"sha": "abd9abf4e70419bb396b847d494a65724336e287", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -228,13 +228,18 @@ tr1_srcdir = ${glibcxx_srcdir}/include/tr1\n tr1_builddir = ./tr1\n tr1_headers = \\\n \t${tr1_srcdir}/array \\\n+\t${tr1_srcdir}/bind_repeat.h \\\n+\t${tr1_srcdir}/bind_iterate.h \\\n \t${tr1_srcdir}/boost_shared_ptr.h \\\n+\t${tr1_srcdir}/mu_iterate.h \\\n \t${tr1_srcdir}/functional \\\n \t${tr1_srcdir}/functional_iterate.h \\\n \t${tr1_srcdir}/memory \\\n+\t${tr1_srcdir}/ref_fwd.h \\\n \t${tr1_srcdir}/ref_wrap_iterate.h \\\n \t${tr1_srcdir}/repeat.h \\\n \t${tr1_srcdir}/tuple \\\n+\t${tr1_srcdir}/tuple_iterate.h \\\n \t${tr1_srcdir}/utility \\\n \t${tr1_srcdir}/type_traits \\\n \t${tr1_srcdir}/type_traits_fwd.h \\"}, {"sha": "ddd636c9eace6ca1c10e90946fa7b97ab914c114", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -447,13 +447,18 @@ tr1_srcdir = ${glibcxx_srcdir}/include/tr1\n tr1_builddir = ./tr1\n tr1_headers = \\\n \t${tr1_srcdir}/array \\\n+\t${tr1_srcdir}/bind_repeat.h \\\n+\t${tr1_srcdir}/bind_iterate.h \\\n \t${tr1_srcdir}/boost_shared_ptr.h \\\n+\t${tr1_srcdir}/mu_iterate.h \\\n \t${tr1_srcdir}/functional \\\n \t${tr1_srcdir}/functional_iterate.h \\\n \t${tr1_srcdir}/memory \\\n+\t${tr1_srcdir}/ref_fwd.h \\\n \t${tr1_srcdir}/ref_wrap_iterate.h \\\n \t${tr1_srcdir}/repeat.h \\\n \t${tr1_srcdir}/tuple \\\n+\t${tr1_srcdir}/tuple_iterate.h \\\n \t${tr1_srcdir}/utility \\\n \t${tr1_srcdir}/type_traits \\\n \t${tr1_srcdir}/type_traits_fwd.h \\"}, {"sha": "ed5aeb626e23b13f1756c52a50243305464bb368", "filename": "libstdc++-v3/include/tr1/bind_iterate.h", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbind_iterate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbind_iterate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbind_iterate.h?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -0,0 +1,78 @@\n+// TR1 functional -*- C++ -*-\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Written by Douglas Gregor <doug.gregor -at- gmail.com>\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file bind_iterate.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#if _GLIBCXX_BIND_NUM_ARGS > 0\n+template<_GLIBCXX_BIND_TEMPLATE_PARAMS>\n+#endif\n+#ifdef _GLIBCXX_BIND_HAS_RESULT_TYPE\n+result_type\n+#else\n+typename result_of<_Functor(_GLIBCXX_BIND_V_TEMPLATE_ARGS())>::type\n+#endif\n+operator()(_GLIBCXX_BIND_PARAMS)\n+{ return _M_f(_GLIBCXX_BIND_V_ARGS); }\n+\n+#if _GLIBCXX_BIND_NUM_ARGS > 0\n+template<_GLIBCXX_BIND_TEMPLATE_PARAMS>\n+#endif\n+#ifdef _GLIBCXX_BIND_HAS_RESULT_TYPE\n+result_type\n+#else\n+typename result_of<const _Functor(_GLIBCXX_BIND_V_TEMPLATE_ARGS(const))>::type\n+#endif\n+operator()(_GLIBCXX_BIND_PARAMS) const\n+{ return _M_f(_GLIBCXX_BIND_V_ARGS); }\n+\n+#if _GLIBCXX_BIND_NUM_ARGS > 0\n+template<_GLIBCXX_BIND_TEMPLATE_PARAMS>\n+#endif\n+#ifdef _GLIBCXX_BIND_HAS_RESULT_TYPE\n+result_type\n+#else\n+typename result_of<volatile _Functor(_GLIBCXX_BIND_V_TEMPLATE_ARGS(volatile))>::type\n+#endif\n+operator()(_GLIBCXX_BIND_PARAMS) volatile\n+{ return _M_f(_GLIBCXX_BIND_V_ARGS); }\n+\n+#if _GLIBCXX_BIND_NUM_ARGS > 0\n+template<_GLIBCXX_BIND_TEMPLATE_PARAMS>\n+#endif\n+#ifdef _GLIBCXX_BIND_HAS_RESULT_TYPE\n+result_type\n+#else\n+typename result_of<const volatile _Functor(_GLIBCXX_BIND_V_TEMPLATE_ARGS(const volatile))>::type\n+#endif\n+operator()(_GLIBCXX_BIND_PARAMS) const volatile\n+{ return _M_f(_GLIBCXX_BIND_V_ARGS); }"}, {"sha": "2422a5b186fe65d2a1048f6f706a6a10bcb86fbd", "filename": "libstdc++-v3/include/tr1/bind_repeat.h", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbind_repeat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbind_repeat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbind_repeat.h?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -0,0 +1,192 @@\n+// TR1 code repetition for bind -*- C++ -*-\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Written by Douglas Gregor <doug.gregor -at- gmail.com>\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file bind_repeat.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _GLIBCXX_BIND_REPEAT_HEADER\n+#  error Internal error: _GLIBCXX_BIND_REPEAT_HEADER must be set\n+#endif /* _GLIBCXX_BIND_REPEAT_HEADER */\n+\n+#define _GLIBCXX_BIND_NUM_ARGS 0\n+#define _GLIBCXX_BIND_COMMA\n+#define _GLIBCXX_BIND_TEMPLATE_PARAMS\n+#define _GLIBCXX_BIND_TEMPLATE_ARGS\n+#define _GLIBCXX_BIND_PARAMS\n+#define _GLIBCXX_BIND_ARGS\n+#  include _GLIBCXX_BIND_REPEAT_HEADER\n+#undef _GLIBCXX_BIND_ARGS\n+#undef _GLIBCXX_BIND_PARAMS\n+#undef _GLIBCXX_BIND_TEMPLATE_ARGS\n+#undef _GLIBCXX_BIND_TEMPLATE_PARAMS\n+#undef _GLIBCXX_BIND_COMMA\n+#undef _GLIBCXX_BIND_NUM_ARGS\n+\n+#define _GLIBCXX_BIND_NUM_ARGS 1\n+#define _GLIBCXX_BIND_COMMA ,\n+#define _GLIBCXX_BIND_TEMPLATE_PARAMS typename _U1\n+#define _GLIBCXX_BIND_TEMPLATE_ARGS _U1\n+#define _GLIBCXX_BIND_PARAMS _U1& __u1\n+#define _GLIBCXX_BIND_ARGS __u1\n+#include _GLIBCXX_BIND_REPEAT_HEADER\n+#undef _GLIBCXX_BIND_ARGS\n+#undef _GLIBCXX_BIND_PARAMS\n+#undef _GLIBCXX_BIND_TEMPLATE_ARGS\n+#undef _GLIBCXX_BIND_TEMPLATE_PARAMS\n+#undef _GLIBCXX_BIND_COMMA\n+#undef _GLIBCXX_BIND_NUM_ARGS\n+#define _GLIBCXX_BIND_NUM_ARGS 2\n+#define _GLIBCXX_BIND_COMMA ,\n+#define _GLIBCXX_BIND_TEMPLATE_PARAMS typename _U1, typename _U2\n+#define _GLIBCXX_BIND_TEMPLATE_ARGS _U1, _U2\n+#define _GLIBCXX_BIND_PARAMS _U1& __u1, _U2& __u2\n+#define _GLIBCXX_BIND_ARGS __u1, __u2\n+#include _GLIBCXX_BIND_REPEAT_HEADER\n+#undef _GLIBCXX_BIND_ARGS\n+#undef _GLIBCXX_BIND_PARAMS\n+#undef _GLIBCXX_BIND_TEMPLATE_ARGS\n+#undef _GLIBCXX_BIND_TEMPLATE_PARAMS\n+#undef _GLIBCXX_BIND_COMMA\n+#undef _GLIBCXX_BIND_NUM_ARGS\n+\n+#define _GLIBCXX_BIND_NUM_ARGS 3\n+#define _GLIBCXX_BIND_COMMA ,\n+#define _GLIBCXX_BIND_TEMPLATE_PARAMS typename _U1, typename _U2, typename _U3\n+#define _GLIBCXX_BIND_TEMPLATE_ARGS _U1, _U2, _U3\n+#define _GLIBCXX_BIND_PARAMS _U1& __u1, _U2& __u2, _U3& __u3\n+#define _GLIBCXX_BIND_ARGS __u1, __u2, __u3\n+#include _GLIBCXX_BIND_REPEAT_HEADER\n+#undef _GLIBCXX_BIND_ARGS\n+#undef _GLIBCXX_BIND_PARAMS\n+#undef _GLIBCXX_BIND_TEMPLATE_ARGS\n+#undef _GLIBCXX_BIND_TEMPLATE_PARAMS\n+#undef _GLIBCXX_BIND_COMMA\n+#undef _GLIBCXX_BIND_NUM_ARGS\n+\n+#define _GLIBCXX_BIND_NUM_ARGS 4\n+#define _GLIBCXX_BIND_COMMA ,\n+#define _GLIBCXX_BIND_TEMPLATE_PARAMS typename _U1, typename _U2, typename _U3, typename _U4\n+#define _GLIBCXX_BIND_TEMPLATE_ARGS _U1, _U2, _U3, _U4\n+#define _GLIBCXX_BIND_PARAMS _U1& __u1, _U2& __u2, _U3& __u3, _U4& __u4\n+#define _GLIBCXX_BIND_ARGS __u1, __u2, __u3, __u4\n+#include _GLIBCXX_BIND_REPEAT_HEADER\n+#undef _GLIBCXX_BIND_ARGS\n+#undef _GLIBCXX_BIND_PARAMS\n+#undef _GLIBCXX_BIND_TEMPLATE_ARGS\n+#undef _GLIBCXX_BIND_TEMPLATE_PARAMS\n+#undef _GLIBCXX_BIND_COMMA\n+#undef _GLIBCXX_BIND_NUM_ARGS\n+\n+#define _GLIBCXX_BIND_NUM_ARGS 5\n+#define _GLIBCXX_BIND_COMMA ,\n+#define _GLIBCXX_BIND_TEMPLATE_PARAMS typename _U1, typename _U2, typename _U3, typename _U4, typename _U5\n+#define _GLIBCXX_BIND_TEMPLATE_ARGS _U1, _U2, _U3, _U4, _U5\n+#define _GLIBCXX_BIND_PARAMS _U1& __u1, _U2& __u2, _U3& __u3, _U4& __u4, _U5& __u5\n+#define _GLIBCXX_BIND_ARGS __u1, __u2, __u3, __u4, __u5\n+#include _GLIBCXX_BIND_REPEAT_HEADER\n+#undef _GLIBCXX_BIND_ARGS\n+#undef _GLIBCXX_BIND_PARAMS\n+#undef _GLIBCXX_BIND_TEMPLATE_ARGS\n+#undef _GLIBCXX_BIND_TEMPLATE_PARAMS\n+#undef _GLIBCXX_BIND_COMMA\n+#undef _GLIBCXX_BIND_NUM_ARGS\n+\n+#define _GLIBCXX_BIND_NUM_ARGS 6\n+#define _GLIBCXX_BIND_COMMA ,\n+#define _GLIBCXX_BIND_TEMPLATE_PARAMS typename _U1, typename _U2, typename _U3, typename _U4, typename _U5, typename _U6\n+#define _GLIBCXX_BIND_TEMPLATE_ARGS _U1, _U2, _U3, _U4, _U5, _U6\n+#define _GLIBCXX_BIND_PARAMS _U1& __u1, _U2& __u2, _U3& __u3, _U4& __u4, _U5& __u5, _U6& __u6\n+#define _GLIBCXX_BIND_ARGS __u1, __u2, __u3, __u4, __u5, __u6\n+#include _GLIBCXX_BIND_REPEAT_HEADER\n+#undef _GLIBCXX_BIND_ARGS\n+#undef _GLIBCXX_BIND_PARAMS\n+#undef _GLIBCXX_BIND_TEMPLATE_ARGS\n+#undef _GLIBCXX_BIND_TEMPLATE_PARAMS\n+#undef _GLIBCXX_BIND_COMMA\n+#undef _GLIBCXX_BIND_NUM_ARGS\n+\n+#define _GLIBCXX_BIND_NUM_ARGS 7\n+#define _GLIBCXX_BIND_COMMA ,\n+#define _GLIBCXX_BIND_TEMPLATE_PARAMS typename _U1, typename _U2, typename _U3, typename _U4, typename _U5, typename _U6, typename _U7\n+#define _GLIBCXX_BIND_TEMPLATE_ARGS _U1, _U2, _U3, _U4, _U5, _U6, _U7\n+#define _GLIBCXX_BIND_PARAMS _U1& __u1, _U2& __u2, _U3& __u3, _U4& __u4, _U5& __u5, _U6& __u6, _U7& __u7\n+#define _GLIBCXX_BIND_ARGS __u1, __u2, __u3, __u4, __u5, __u6, __u7\n+#include _GLIBCXX_BIND_REPEAT_HEADER\n+#undef _GLIBCXX_BIND_ARGS\n+#undef _GLIBCXX_BIND_PARAMS\n+#undef _GLIBCXX_BIND_TEMPLATE_ARGS\n+#undef _GLIBCXX_BIND_TEMPLATE_PARAMS\n+#undef _GLIBCXX_BIND_COMMA\n+#undef _GLIBCXX_BIND_NUM_ARGS\n+\n+#define _GLIBCXX_BIND_NUM_ARGS 8\n+#define _GLIBCXX_BIND_COMMA ,\n+#define _GLIBCXX_BIND_TEMPLATE_PARAMS typename _U1, typename _U2, typename _U3, typename _U4, typename _U5, typename _U6, typename _U7, typename _U8\n+#define _GLIBCXX_BIND_TEMPLATE_ARGS _U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8\n+#define _GLIBCXX_BIND_PARAMS _U1& __u1, _U2& __u2, _U3& __u3, _U4& __u4, _U5& __u5, _U6& __u6, _U7& __u7, _U8& __u8\n+#define _GLIBCXX_BIND_ARGS __u1, __u2, __u3, __u4, __u5, __u6, __u7, __u8\n+#include _GLIBCXX_BIND_REPEAT_HEADER\n+#undef _GLIBCXX_BIND_ARGS\n+#undef _GLIBCXX_BIND_PARAMS\n+#undef _GLIBCXX_BIND_TEMPLATE_ARGS\n+#undef _GLIBCXX_BIND_TEMPLATE_PARAMS\n+#undef _GLIBCXX_BIND_COMMA\n+#undef _GLIBCXX_BIND_NUM_ARGS\n+\n+#define _GLIBCXX_BIND_NUM_ARGS 9\n+#define _GLIBCXX_BIND_COMMA ,\n+#define _GLIBCXX_BIND_TEMPLATE_PARAMS typename _U1, typename _U2, typename _U3, typename _U4, typename _U5, typename _U6, typename _U7, typename _U8, typename _U9\n+#define _GLIBCXX_BIND_TEMPLATE_ARGS _U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, _U9\n+#define _GLIBCXX_BIND_PARAMS _U1& __u1, _U2& __u2, _U3& __u3, _U4& __u4, _U5& __u5, _U6& __u6, _U7& __u7, _U8& __u8, _U9& __u9\n+#define _GLIBCXX_BIND_ARGS __u1, __u2, __u3, __u4, __u5, __u6, __u7, __u8, __u9\n+#include _GLIBCXX_BIND_REPEAT_HEADER\n+#undef _GLIBCXX_BIND_ARGS\n+#undef _GLIBCXX_BIND_PARAMS\n+#undef _GLIBCXX_BIND_TEMPLATE_ARGS\n+#undef _GLIBCXX_BIND_TEMPLATE_PARAMS\n+#undef _GLIBCXX_BIND_COMMA\n+#undef _GLIBCXX_BIND_NUM_ARGS\n+\n+#define _GLIBCXX_BIND_NUM_ARGS 10\n+#define _GLIBCXX_BIND_COMMA ,\n+#define _GLIBCXX_BIND_TEMPLATE_PARAMS typename _U1, typename _U2, typename _U3, typename _U4, typename _U5, typename _U6, typename _U7, typename _U8, typename _U9, typename _U10\n+#define _GLIBCXX_BIND_TEMPLATE_ARGS _U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, _U9, _U10\n+#define _GLIBCXX_BIND_PARAMS _U1& __u1, _U2& __u2, _U3& __u3, _U4& __u4, _U5& __u5, _U6& __u6, _U7& __u7, _U8& __u8, _U9& __u9, _U10& __u10\n+#define _GLIBCXX_BIND_ARGS __u1, __u2, __u3, __u4, __u5, __u6, __u7, __u8, __u9, __u10\n+#include _GLIBCXX_BIND_REPEAT_HEADER\n+#undef _GLIBCXX_BIND_ARGS\n+#undef _GLIBCXX_BIND_PARAMS\n+#undef _GLIBCXX_BIND_TEMPLATE_ARGS\n+#undef _GLIBCXX_BIND_TEMPLATE_PARAMS\n+#undef _GLIBCXX_BIND_COMMA\n+#undef _GLIBCXX_BIND_NUM_ARGS\n+"}, {"sha": "ab811d1c8a6ee186a8cc27a6086af0da582b2407", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -40,6 +40,7 @@\n #include <bits/cpp_type_traits.h>\n #include <string>               // for std::tr1::hash\n #include <cstdlib>              // for std::abort\n+#include <tr1/tuple>\n \n namespace std\n {\n@@ -452,6 +453,17 @@ namespace tr1\n              == sizeof(__check_const<_Tp>(__get_ref<_Tp>(), (_Tp*)0)))>\n       { };\n \n+    template<typename _Signature>\n+      struct result;\n+\n+    template<typename _CVMem, typename _Tp>\n+      struct result<_CVMem(_Tp)>\n+        : public _Result_type<_Tp> { };\n+\n+    template<typename _CVMem, typename _Tp>\n+      struct result<_CVMem(_Tp&)>\n+        : public _Result_type<_Tp> { };\n+\n     explicit _Mem_fn(_Res _Class::*__pm) : __pm(__pm) { }\n \n     // Handle objects\n@@ -490,6 +502,201 @@ namespace tr1\n       return _Mem_fn<_Tp _Class::*>(__pm);\n     }\n \n+  /**\n+   *  @brief Determines if the given type _Tp is a function object\n+   *  should be treated as a subexpression when evaluating calls to\n+   *  function objects returned by bind(). [TR1 3.6.1]\n+   */\n+  template<typename _Tp>\n+    struct is_bind_expression\n+    {\n+      static const bool value = false;\n+    };\n+\n+  /**\n+   *  @brief Determines if the given type _Tp is a placeholder in a\n+   *  bind() expression and, if so, which placeholder it is. [TR1 3.6.2]\n+   */\n+  template<typename _Tp>\n+    struct is_placeholder\n+    {\n+      static const int value = 0;\n+    };\n+\n+  /**\n+   *  @if maint\n+   *  The type of placeholder objects defined by libstdc++.\n+   *  @endif\n+   */\n+  template<int _Num> struct _Placeholder { };\n+\n+  /**\n+   *  @if maint\n+   *  Partial specialization of is_placeholder that provides the placeholder\n+   *  number for the placeholder objects defined by libstdc++.\n+   *  @endif\n+   */\n+  template<int _Num>\n+    struct is_placeholder<_Placeholder<_Num> >\n+    {\n+      static const int value = _Num;\n+    };\n+\n+  /**\n+   *  @if maint\n+   *  Maps an argument to bind() into an actual argument to the bound\n+   *  function object [TR1 3.6.3/5]. Only the first parameter should\n+   *  be specified: the rest are used to determine among the various\n+   *  implementations. Note that, although this class is a function\n+   *  object, isn't not entirely normal because it takes only two\n+   *  parameters regardless of the number of parameters passed to the\n+   *  bind expression. The first parameter is the bound argument and\n+   *  the second parameter is a tuple containing references to the\n+   *  rest of the arguments.\n+   *  @endif\n+   */\n+  template<typename _Arg,\n+           bool _IsBindExp = is_bind_expression<_Arg>::value,\n+           bool _IsPlaceholder = (is_placeholder<_Arg>::value > 0)>\n+    class _Mu;\n+\n+  /**\n+   *  @if maint\n+   *  If the argument is reference_wrapper<_Tp>, returns the\n+   *  underlying reference. [TR1 3.6.3/5 bullet 1]\n+   *  @endif\n+   */\n+  template<typename _Tp>\n+    class _Mu<reference_wrapper<_Tp>, false, false>\n+    {\n+    public:\n+      typedef _Tp& result_type;\n+\n+      /* Note: This won't actually work for const volatile\n+       * reference_wrappers, because reference_wrapper::get() is const\n+       * but not volatile-qualified. This might be a defect in the TR.\n+       */\n+      template<typename _CVRef, typename _Tuple>\n+      result_type\n+      operator()(_CVRef& __arg, const _Tuple&) const volatile\n+      { return __arg.get(); }\n+    };\n+\n+  /**\n+   *  @if maint\n+   *  If the argument is a bind expression, we invoke the underlying\n+   *  function object with the same cv-qualifiers as we are given and\n+   *  pass along all of our arguments (unwrapped). [TR1 3.6.3/5 bullet 2]\n+   *  @endif\n+   */\n+  template<typename _Arg>\n+    class _Mu<_Arg, true, false>\n+    {\n+    public:\n+      template<typename _Signature> class result;\n+\n+#define _GLIBCXX_REPEAT_HEADER <tr1/mu_iterate.h>\n+#  include <tr1/repeat.h>\n+#undef _GLIBCXX_REPEAT_HEADER\n+    };\n+\n+  /**\n+   *  @if maint\n+   *  If the argument is a placeholder for the Nth argument, returns\n+   *  a reference to the Nth argument to the bind function object.\n+   *  [TR1 3.6.3/5 bullet 3]\n+   *  @endif\n+   */\n+  template<typename _Arg>\n+    class _Mu<_Arg, false, true>\n+    {\n+    public:\n+      template<typename _Signature> class result;\n+\n+      template<typename _CVMu, typename _CVArg, typename _Tuple>\n+      class result<_CVMu(_CVArg, _Tuple)>\n+      {\n+        // Add a reference, if it hasn't already been done for us.\n+        // This allows us to be a little bit sloppy in constructing\n+        // the tuple that we pass to result_of<...>.\n+        typedef typename tuple_element<(is_placeholder<_Arg>::value - 1),\n+                                       _Tuple>::type __base_type;\n+\n+      public:\n+        typedef typename add_reference<__base_type>::type type;\n+      };\n+\n+      template<typename _Tuple>\n+      typename result<_Mu(_Arg, _Tuple)>::type\n+      operator()(const volatile _Arg&, const _Tuple& __tuple) const volatile\n+      {\n+        return ::std::tr1::get<(is_placeholder<_Arg>::value - 1)>(__tuple);\n+      }\n+    };\n+\n+  /**\n+   *  @if maint\n+   *  If the argument is just a value, returns a reference to that\n+   *  value. The cv-qualifiers on the reference are the same as the\n+   *  cv-qualifiers on the _Mu object. [TR1 3.6.3/5 bullet 4]\n+   *  @endif\n+   */\n+  template<typename _Arg>\n+    class _Mu<_Arg, false, false>\n+    {\n+    public:\n+      template<typename _Signature> struct result;\n+\n+      template<typename _CVMu, typename _CVArg, typename _Tuple>\n+      struct result<_CVMu(_CVArg, _Tuple)>\n+      {\n+        typedef typename add_reference<_CVArg>::type type;\n+      };\n+\n+      // Pick up the cv-qualifiers of the argument\n+      template<typename _CVArg, typename _Tuple>\n+      _CVArg& operator()(_CVArg& __arg, const _Tuple&) const volatile\n+      { return __arg; }\n+    };\n+\n+  /**\n+   *  @if maint\n+   *  Type of the function object returned from bind().\n+   *  @endif\n+   */\n+   template<typename _Signature>\n+     struct _Bind;\n+\n+  /**\n+   *  @if maint\n+   *  Type of the function object returned from bind<R>().\n+   *  @endif\n+   */\n+   template<typename _Result, typename _Signature>\n+     struct _Bind_result;\n+\n+  /**\n+   *  @if maint\n+   *  Class template _Bind is always a bind expression.\n+   *  @endif\n+   */\n+   template<typename _Signature>\n+    struct is_bind_expression<_Bind<_Signature> >\n+    {\n+      static const bool value = true;\n+    };\n+\n+  /**\n+   *  @if maint\n+   *  Class template _Bind_result is always a bind expression.\n+   *  @endif\n+   */\n+   template<typename _Result, typename _Signature>\n+   struct is_bind_expression<_Bind_result<_Result, _Signature> >\n+    {\n+      static const bool value = true;\n+    };\n+\n   /**\n    *  @brief Exception class thrown when class template function's\n    *  operator() is called with an empty target.\n@@ -845,9 +1052,15 @@ namespace tr1\n       __x.swap(__y);\n     }\n \n+#define _GLIBCXX_JOIN(X,Y) _GLIBCXX_JOIN2( X , Y )\n+#define _GLIBCXX_JOIN2(X,Y) _GLIBCXX_JOIN3(X,Y)\n+#define _GLIBCXX_JOIN3(X,Y) X##Y\n #define _GLIBCXX_REPEAT_HEADER <tr1/functional_iterate.h>\n #include <tr1/repeat.h>\n #undef _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_JOIN3\n+#undef _GLIBCXX_JOIN2\n+#undef _GLIBCXX_JOIN\n \n // Definition of default hash function std::tr1::hash<>.  The types for\n // which std::tr1::hash<T> is defined is in clause 6.3.3. of the PDTR."}, {"sha": "0a1ccee94e87becca9a92673bbdfb77ec093d3f9", "filename": "libstdc++-v3/include/tr1/functional_iterate.h", "status": "modified", "additions": 96, "deletions": 2, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -28,7 +28,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file function_iterate.h\n+/** @file functional_iterate.h\n  *  This is an internal header file, included by other library headers.\n  *  You should not attempt to use it directly.\n  */\n@@ -390,7 +390,101 @@ template<typename _Res, typename _Class _GLIBCXX_COMMA_SHIFTED\n   };\n #endif\n \n-template<typename _Signature, typename _Functor> class _Function_handler;\n+#if _GLIBCXX_NUM_ARGS > 0\n+namespace placeholders\n+{\n+namespace\n+{\n+   _Placeholder<_GLIBCXX_NUM_ARGS> _GLIBCXX_JOIN(_,_GLIBCXX_NUM_ARGS);\n+}\n+}\n+#endif\n+\n+template<typename _Functor _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+class _Bind<_Functor(_GLIBCXX_TEMPLATE_ARGS)>\n+  : public _Weak_result_type<_Functor>\n+{\n+  typedef _Bind __self_type;\n+\n+  _Functor _M_f;\n+  _GLIBCXX_BIND_MEMBERS\n+\n+ public:\n+#if _GLIBCXX_NUM_ARGS == 0\n+  explicit\n+#endif\n+  _Bind(_Functor __f _GLIBCXX_COMMA _GLIBCXX_PARAMS)\n+    : _M_f(__f) _GLIBCXX_COMMA _GLIBCXX_BIND_MEMBERS_INIT { }\n+\n+#define _GLIBCXX_BIND_REPEAT_HEADER <tr1/bind_iterate.h>\n+#include <tr1/bind_repeat.h>\n+#undef _GLIBCXX_BIND_REPEAT_HEADER\n+};\n+\n+template<typename _Result, typename _Functor\n+         _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+class _Bind_result<_Result, _Functor(_GLIBCXX_TEMPLATE_ARGS)>\n+{\n+  _Functor _M_f;\n+  _GLIBCXX_BIND_MEMBERS\n+\n+ public:\n+  typedef _Result result_type;\n+\n+#if _GLIBCXX_NUM_ARGS == 0\n+  explicit\n+#endif\n+  _Bind_result(_Functor __f _GLIBCXX_COMMA _GLIBCXX_PARAMS)\n+    : _M_f(__f) _GLIBCXX_COMMA _GLIBCXX_BIND_MEMBERS_INIT { }\n+\n+#define _GLIBCXX_BIND_REPEAT_HEADER <tr1/bind_iterate.h>\n+#define _GLIBCXX_BIND_HAS_RESULT_TYPE\n+#include <tr1/bind_repeat.h>\n+#undef _GLIBCXX_BIND_HAS_RESULT_TYPE\n+#undef _GLIBCXX_BIND_REPEAT_HEADER\n+};\n+\n+// Handle member pointers\n+template<typename _Tp, typename _Class _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+inline _Bind<_Mem_fn<_Tp _Class::*>(_GLIBCXX_TEMPLATE_ARGS)>\n+bind(_Tp _Class::* __pm _GLIBCXX_COMMA _GLIBCXX_PARAMS)\n+{\n+  typedef _Bind<_Mem_fn<_Tp _Class::*>(_GLIBCXX_TEMPLATE_ARGS)> __result_type;\n+  return __result_type(_Mem_fn<_Tp _Class::*>(__pm)\n+                       _GLIBCXX_COMMA _GLIBCXX_ARGS);\n+}\n+\n+template<typename _Result, typename _Tp, typename _Class\n+         _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+inline _Bind_result<_Result, _Mem_fn<_Tp _Class::*>(_GLIBCXX_TEMPLATE_ARGS)>\n+bind(_Tp _Class::* __pm _GLIBCXX_COMMA _GLIBCXX_PARAMS)\n+{\n+  typedef _Bind_result<_Result, _Mem_fn<_Tp _Class::*>(_GLIBCXX_TEMPLATE_ARGS)>\n+    __result_type;\n+  return __result_type(_Mem_fn<_Tp _Class::*>(__pm)\n+                       _GLIBCXX_COMMA _GLIBCXX_ARGS);\n+}\n+\n+// Handle arbitrary function objects\n+template<typename _Functor _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+inline _Bind<_Functor(_GLIBCXX_TEMPLATE_ARGS)>\n+bind(_Functor __f _GLIBCXX_COMMA _GLIBCXX_PARAMS)\n+{\n+  typedef _Bind<_Functor(_GLIBCXX_TEMPLATE_ARGS)> __result_type;\n+  return __result_type(__f _GLIBCXX_COMMA _GLIBCXX_ARGS);\n+}\n+\n+template<typename _Result, typename _Functor\n+         _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+inline\n+typename __enable_if<_Bind_result<_Result, _Functor(_GLIBCXX_TEMPLATE_ARGS)>,\n+                     !is_member_pointer<_Functor>::value>::__type\n+bind(_Functor __f _GLIBCXX_COMMA _GLIBCXX_PARAMS)\n+{\n+  typedef _Bind_result<_Result, _Functor(_GLIBCXX_TEMPLATE_ARGS)>\n+    __result_type;\n+  return __result_type(__f _GLIBCXX_COMMA _GLIBCXX_ARGS);\n+}\n \n template<typename _Res, typename _Functor _GLIBCXX_COMMA\n          _GLIBCXX_TEMPLATE_PARAMS>"}, {"sha": "57a81e3d7a9f82d0c30c80c214fa97269f1b0065", "filename": "libstdc++-v3/include/tr1/mu_iterate.h", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmu_iterate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmu_iterate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmu_iterate.h?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -0,0 +1,51 @@\n+// TR1 functional -*- C++ -*-\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Written by Douglas Gregor <doug.gregor -at- gmail.com>\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file mu_iterate.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+// Determine the result type when we pass the arguments along. This\n+// involves passing along the cv-qualifiers placed on _Mu and\n+// unwrapping the argument bundle.\n+template<typename _CVMu, typename _CVArg\n+         _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+class result<_CVMu(_CVArg, tuple<_GLIBCXX_TEMPLATE_ARGS>)>\n+  : public result_of<_CVArg(_GLIBCXX_TEMPLATE_ARGS)> { };\n+\n+template<typename _CVArg _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+typename result_of<_CVArg(_GLIBCXX_TEMPLATE_ARGS)>::type\n+operator()(_CVArg& __arg, const tuple<_GLIBCXX_TEMPLATE_ARGS>& __tuple)\n+  const volatile\n+{\n+  return __arg(_GLIBCXX_MU_GET_TUPLE_ARGS);\n+}\n+"}, {"sha": "10272a3889a9794c4248aff9ffeed3eaa42ad322", "filename": "libstdc++-v3/include/tr1/ref_fwd.h", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fref_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fref_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fref_fwd.h?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -0,0 +1,59 @@\n+\n+\n+// class template reference_wrapper forwarding header -*- C++ -*-\n+\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file ref_fwd.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+// Douglas Gregor <doug.gregor -at- gmail.com>\n+#ifndef _TR1_REF_FWD\n+#define _TR1_REF_FWD\n+\n+namespace std\n+{\n+namespace tr1\n+{\n+\n+template<typename _Tp>\n+  class reference_wrapper;\n+\n+template<typename _Tp>\n+  reference_wrapper<_Tp>\n+  ref(_Tp& __t);\n+\n+  // Denotes a const reference should be taken to a variable.\n+template<typename _Tp>\n+  reference_wrapper<const _Tp>\n+  cref(const _Tp& __t);\n+}\n+}\n+#endif"}, {"sha": "1c57b0bd55ea8614b37f56d538dee30ee4d2efa4", "filename": "libstdc++-v3/include/tr1/repeat.h", "status": "modified", "additions": 288, "deletions": 259, "changes": 547, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frepeat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frepeat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frepeat.h?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -49,7 +49,33 @@\n #define _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n #define _GLIBCXX_PARAMS_SHIFTED\n #define _GLIBCXX_ARGS_SHIFTED\n+#define _GLIBCXX_BIND_MEMBERS_INIT\n+#define _GLIBCXX_BIND_MEMBERS\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS\n+#define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV)\n+#define _GLIBCXX_BIND_V_ARGS\n+#define _GLIBCXX_TUPLE_ADD_CREF\n+#define _GLIBCXX_TUPLE_COPY_INIT\n+#define _GLIBCXX_TUPLE_ASSIGN\n+#define _GLIBCXX_TEMPLATE_PARAMS_U\n+#define _GLIBCXX_TEMPLATE_ARGS_U\n+#define _GLIBCXX_REF_WRAP_PARAMS\n+#define _GLIBCXX_REF_TEMPLATE_ARGS\n+#define _GLIBCXX_NUM_ARGS_PLUS_1 1\n #include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_NUM_ARGS_PLUS_1\n+#undef _GLIBCXX_REF_TEMPLATE_ARGS\n+#undef _GLIBCXX_REF_WRAP_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS_U\n+#undef _GLIBCXX_TEMPLATE_PARAMS_U\n+#undef _GLIBCXX_TUPLE_ASSIGN\n+#undef _GLIBCXX_TUPLE_COPY_INIT\n+#undef _GLIBCXX_TUPLE_ADD_CREF\n+#undef _GLIBCXX_BIND_V_ARGS\n+#undef _GLIBCXX_BIND_V_TEMPLATE_ARGS\n+#undef _GLIBCXX_MU_GET_TUPLE_ARGS\n+#undef _GLIBCXX_BIND_MEMBERS_INIT\n+#undef _GLIBCXX_BIND_MEMBERS\n #undef _GLIBCXX_ARGS_SHIFTED\n #undef _GLIBCXX_PARAMS_SHIFTED\n #undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n@@ -75,7 +101,33 @@\n #define _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n #define _GLIBCXX_PARAMS_SHIFTED\n #define _GLIBCXX_ARGS_SHIFTED\n+#define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1;\n+#define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple)\n+#define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1\n+#define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1)\n+#define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1;\n+#define _GLIBCXX_TEMPLATE_PARAMS_U typename _U1\n+#define _GLIBCXX_TEMPLATE_ARGS_U _U1\n+#define _GLIBCXX_REF_WRAP_PARAMS ref(__a1)\n+#define _GLIBCXX_REF_TEMPLATE_ARGS _T1&\n+#define _GLIBCXX_NUM_ARGS_PLUS_1 2\n #include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_NUM_ARGS_PLUS_1\n+#undef _GLIBCXX_REF_TEMPLATE_ARGS\n+#undef _GLIBCXX_REF_WRAP_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS_U\n+#undef _GLIBCXX_TEMPLATE_PARAMS_U\n+#undef _GLIBCXX_TUPLE_ASSIGN\n+#undef _GLIBCXX_TUPLE_COPY_INIT\n+#undef _GLIBCXX_TUPLE_ADD_CREF\n+#undef _GLIBCXX_BIND_V_ARGS\n+#undef _GLIBCXX_BIND_V_TEMPLATE_ARGS\n+#undef _GLIBCXX_MU_GET_TUPLE_ARGS\n+#undef _GLIBCXX_BIND_MEMBERS_INIT\n+#undef _GLIBCXX_BIND_MEMBERS\n #undef _GLIBCXX_ARGS_SHIFTED\n #undef _GLIBCXX_PARAMS_SHIFTED\n #undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n@@ -101,7 +153,33 @@\n #define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1\n #define _GLIBCXX_PARAMS_SHIFTED _T1 __a1\n #define _GLIBCXX_ARGS_SHIFTED __a1\n+#define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2;\n+#define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple)\n+#define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2\n+#define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2)\n+#define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2;\n+#define _GLIBCXX_TEMPLATE_PARAMS_U typename _U1, typename _U2\n+#define _GLIBCXX_TEMPLATE_ARGS_U _U1, _U2\n+#define _GLIBCXX_REF_WRAP_PARAMS ref(__a1), ref(__a2)\n+#define _GLIBCXX_REF_TEMPLATE_ARGS _T1&, _T2&\n+#define _GLIBCXX_NUM_ARGS_PLUS_1 3\n #include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_NUM_ARGS_PLUS_1\n+#undef _GLIBCXX_REF_TEMPLATE_ARGS\n+#undef _GLIBCXX_REF_WRAP_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS_U\n+#undef _GLIBCXX_TEMPLATE_PARAMS_U\n+#undef _GLIBCXX_TUPLE_ASSIGN\n+#undef _GLIBCXX_TUPLE_COPY_INIT\n+#undef _GLIBCXX_TUPLE_ADD_CREF\n+#undef _GLIBCXX_BIND_V_ARGS\n+#undef _GLIBCXX_BIND_V_TEMPLATE_ARGS\n+#undef _GLIBCXX_MU_GET_TUPLE_ARGS\n+#undef _GLIBCXX_BIND_MEMBERS_INIT\n+#undef _GLIBCXX_BIND_MEMBERS\n #undef _GLIBCXX_ARGS_SHIFTED\n #undef _GLIBCXX_PARAMS_SHIFTED\n #undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n@@ -127,7 +205,33 @@\n #define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2\n #define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2\n #define _GLIBCXX_ARGS_SHIFTED __a1, __a2\n+#define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2; _T3 _M_arg3;\n+#define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2), _M_arg3(__a3)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple), ::std::tr1::get<2>(__tuple)\n+#define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T3> _CV(_T3, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2, typename __add_c_ref<_T3>::type __a3\n+#define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2), _M_arg3(__in._M_arg3)\n+#define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2; _M_arg3 = __in._M_arg3;\n+#define _GLIBCXX_TEMPLATE_PARAMS_U typename _U1, typename _U2, typename _U3\n+#define _GLIBCXX_TEMPLATE_ARGS_U _U1, _U2, _U3\n+#define _GLIBCXX_REF_WRAP_PARAMS ref(__a1), ref(__a2), ref(__a3)\n+#define _GLIBCXX_REF_TEMPLATE_ARGS _T1&, _T2&, _T3&\n+#define _GLIBCXX_NUM_ARGS_PLUS_1 4\n #include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_NUM_ARGS_PLUS_1\n+#undef _GLIBCXX_REF_TEMPLATE_ARGS\n+#undef _GLIBCXX_REF_WRAP_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS_U\n+#undef _GLIBCXX_TEMPLATE_PARAMS_U\n+#undef _GLIBCXX_TUPLE_ASSIGN\n+#undef _GLIBCXX_TUPLE_COPY_INIT\n+#undef _GLIBCXX_TUPLE_ADD_CREF\n+#undef _GLIBCXX_BIND_V_ARGS\n+#undef _GLIBCXX_BIND_V_TEMPLATE_ARGS\n+#undef _GLIBCXX_MU_GET_TUPLE_ARGS\n+#undef _GLIBCXX_BIND_MEMBERS_INIT\n+#undef _GLIBCXX_BIND_MEMBERS\n #undef _GLIBCXX_ARGS_SHIFTED\n #undef _GLIBCXX_PARAMS_SHIFTED\n #undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n@@ -153,7 +257,33 @@\n #define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3\n #define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3\n #define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3\n+#define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2; _T3 _M_arg3; _T4 _M_arg4;\n+#define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2), _M_arg3(__a3), _M_arg4(__a4)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple), ::std::tr1::get<2>(__tuple), ::std::tr1::get<3>(__tuple)\n+#define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T3> _CV(_T3, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T4> _CV(_T4, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2, typename __add_c_ref<_T3>::type __a3, typename __add_c_ref<_T4>::type __a4\n+#define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2), _M_arg3(__in._M_arg3), _M_arg4(__in._M_arg4)\n+#define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2; _M_arg3 = __in._M_arg3; _M_arg4 = __in._M_arg4;\n+#define _GLIBCXX_TEMPLATE_PARAMS_U typename _U1, typename _U2, typename _U3, typename _U4\n+#define _GLIBCXX_TEMPLATE_ARGS_U _U1, _U2, _U3, _U4\n+#define _GLIBCXX_REF_WRAP_PARAMS ref(__a1), ref(__a2), ref(__a3), ref(__a4)\n+#define _GLIBCXX_REF_TEMPLATE_ARGS _T1&, _T2&, _T3&, _T4&\n+#define _GLIBCXX_NUM_ARGS_PLUS_1 5\n #include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_NUM_ARGS_PLUS_1\n+#undef _GLIBCXX_REF_TEMPLATE_ARGS\n+#undef _GLIBCXX_REF_WRAP_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS_U\n+#undef _GLIBCXX_TEMPLATE_PARAMS_U\n+#undef _GLIBCXX_TUPLE_ASSIGN\n+#undef _GLIBCXX_TUPLE_COPY_INIT\n+#undef _GLIBCXX_TUPLE_ADD_CREF\n+#undef _GLIBCXX_BIND_V_ARGS\n+#undef _GLIBCXX_BIND_V_TEMPLATE_ARGS\n+#undef _GLIBCXX_MU_GET_TUPLE_ARGS\n+#undef _GLIBCXX_BIND_MEMBERS_INIT\n+#undef _GLIBCXX_BIND_MEMBERS\n #undef _GLIBCXX_ARGS_SHIFTED\n #undef _GLIBCXX_PARAMS_SHIFTED\n #undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n@@ -179,7 +309,33 @@\n #define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4\n #define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4\n #define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4\n+#define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2; _T3 _M_arg3; _T4 _M_arg4; _T5 _M_arg5;\n+#define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2), _M_arg3(__a3), _M_arg4(__a4), _M_arg5(__a5)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple), ::std::tr1::get<2>(__tuple), ::std::tr1::get<3>(__tuple), ::std::tr1::get<4>(__tuple)\n+#define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T3> _CV(_T3, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T4> _CV(_T4, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T5> _CV(_T5, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2, typename __add_c_ref<_T3>::type __a3, typename __add_c_ref<_T4>::type __a4, typename __add_c_ref<_T5>::type __a5\n+#define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2), _M_arg3(__in._M_arg3), _M_arg4(__in._M_arg4), _M_arg5(__in._M_arg5)\n+#define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2; _M_arg3 = __in._M_arg3; _M_arg4 = __in._M_arg4; _M_arg5 = __in._M_arg5;\n+#define _GLIBCXX_TEMPLATE_PARAMS_U typename _U1, typename _U2, typename _U3, typename _U4, typename _U5\n+#define _GLIBCXX_TEMPLATE_ARGS_U _U1, _U2, _U3, _U4, _U5\n+#define _GLIBCXX_REF_WRAP_PARAMS ref(__a1), ref(__a2), ref(__a3), ref(__a4), ref(__a5)\n+#define _GLIBCXX_REF_TEMPLATE_ARGS _T1&, _T2&, _T3&, _T4&, _T5&\n+#define _GLIBCXX_NUM_ARGS_PLUS_1 6\n #include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_NUM_ARGS_PLUS_1\n+#undef _GLIBCXX_REF_TEMPLATE_ARGS\n+#undef _GLIBCXX_REF_WRAP_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS_U\n+#undef _GLIBCXX_TEMPLATE_PARAMS_U\n+#undef _GLIBCXX_TUPLE_ASSIGN\n+#undef _GLIBCXX_TUPLE_COPY_INIT\n+#undef _GLIBCXX_TUPLE_ADD_CREF\n+#undef _GLIBCXX_BIND_V_ARGS\n+#undef _GLIBCXX_BIND_V_TEMPLATE_ARGS\n+#undef _GLIBCXX_MU_GET_TUPLE_ARGS\n+#undef _GLIBCXX_BIND_MEMBERS_INIT\n+#undef _GLIBCXX_BIND_MEMBERS\n #undef _GLIBCXX_ARGS_SHIFTED\n #undef _GLIBCXX_PARAMS_SHIFTED\n #undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n@@ -205,7 +361,33 @@\n #define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5\n #define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5\n #define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5\n+#define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2; _T3 _M_arg3; _T4 _M_arg4; _T5 _M_arg5; _T6 _M_arg6;\n+#define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2), _M_arg3(__a3), _M_arg4(__a4), _M_arg5(__a5), _M_arg6(__a6)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple), ::std::tr1::get<2>(__tuple), ::std::tr1::get<3>(__tuple), ::std::tr1::get<4>(__tuple), ::std::tr1::get<5>(__tuple)\n+#define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T3> _CV(_T3, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T4> _CV(_T4, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T5> _CV(_T5, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T6> _CV(_T6, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T6>()(_M_arg6, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2, typename __add_c_ref<_T3>::type __a3, typename __add_c_ref<_T4>::type __a4, typename __add_c_ref<_T5>::type __a5, typename __add_c_ref<_T6>::type __a6\n+#define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2), _M_arg3(__in._M_arg3), _M_arg4(__in._M_arg4), _M_arg5(__in._M_arg5), _M_arg6(__in._M_arg6)\n+#define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2; _M_arg3 = __in._M_arg3; _M_arg4 = __in._M_arg4; _M_arg5 = __in._M_arg5; _M_arg6 = __in._M_arg6;\n+#define _GLIBCXX_TEMPLATE_PARAMS_U typename _U1, typename _U2, typename _U3, typename _U4, typename _U5, typename _U6\n+#define _GLIBCXX_TEMPLATE_ARGS_U _U1, _U2, _U3, _U4, _U5, _U6\n+#define _GLIBCXX_REF_WRAP_PARAMS ref(__a1), ref(__a2), ref(__a3), ref(__a4), ref(__a5), ref(__a6)\n+#define _GLIBCXX_REF_TEMPLATE_ARGS _T1&, _T2&, _T3&, _T4&, _T5&, _T6&\n+#define _GLIBCXX_NUM_ARGS_PLUS_1 7\n #include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_NUM_ARGS_PLUS_1\n+#undef _GLIBCXX_REF_TEMPLATE_ARGS\n+#undef _GLIBCXX_REF_WRAP_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS_U\n+#undef _GLIBCXX_TEMPLATE_PARAMS_U\n+#undef _GLIBCXX_TUPLE_ASSIGN\n+#undef _GLIBCXX_TUPLE_COPY_INIT\n+#undef _GLIBCXX_TUPLE_ADD_CREF\n+#undef _GLIBCXX_BIND_V_ARGS\n+#undef _GLIBCXX_BIND_V_TEMPLATE_ARGS\n+#undef _GLIBCXX_MU_GET_TUPLE_ARGS\n+#undef _GLIBCXX_BIND_MEMBERS_INIT\n+#undef _GLIBCXX_BIND_MEMBERS\n #undef _GLIBCXX_ARGS_SHIFTED\n #undef _GLIBCXX_PARAMS_SHIFTED\n #undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n@@ -231,7 +413,33 @@\n #define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6\n #define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6\n #define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6\n+#define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2; _T3 _M_arg3; _T4 _M_arg4; _T5 _M_arg5; _T6 _M_arg6; _T7 _M_arg7;\n+#define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2), _M_arg3(__a3), _M_arg4(__a4), _M_arg5(__a5), _M_arg6(__a6), _M_arg7(__a7)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple), ::std::tr1::get<2>(__tuple), ::std::tr1::get<3>(__tuple), ::std::tr1::get<4>(__tuple), ::std::tr1::get<5>(__tuple), ::std::tr1::get<6>(__tuple)\n+#define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T3> _CV(_T3, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T4> _CV(_T4, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T5> _CV(_T5, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T6> _CV(_T6, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T7> _CV(_T7, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T6>()(_M_arg6, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T7>()(_M_arg7, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2, typename __add_c_ref<_T3>::type __a3, typename __add_c_ref<_T4>::type __a4, typename __add_c_ref<_T5>::type __a5, typename __add_c_ref<_T6>::type __a6, typename __add_c_ref<_T7>::type __a7\n+#define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2), _M_arg3(__in._M_arg3), _M_arg4(__in._M_arg4), _M_arg5(__in._M_arg5), _M_arg6(__in._M_arg6), _M_arg7(__in._M_arg7)\n+#define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2; _M_arg3 = __in._M_arg3; _M_arg4 = __in._M_arg4; _M_arg5 = __in._M_arg5; _M_arg6 = __in._M_arg6; _M_arg7 = __in._M_arg7;\n+#define _GLIBCXX_TEMPLATE_PARAMS_U typename _U1, typename _U2, typename _U3, typename _U4, typename _U5, typename _U6, typename _U7\n+#define _GLIBCXX_TEMPLATE_ARGS_U _U1, _U2, _U3, _U4, _U5, _U6, _U7\n+#define _GLIBCXX_REF_WRAP_PARAMS ref(__a1), ref(__a2), ref(__a3), ref(__a4), ref(__a5), ref(__a6), ref(__a7)\n+#define _GLIBCXX_REF_TEMPLATE_ARGS _T1&, _T2&, _T3&, _T4&, _T5&, _T6&, _T7&\n+#define _GLIBCXX_NUM_ARGS_PLUS_1 8\n #include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_NUM_ARGS_PLUS_1\n+#undef _GLIBCXX_REF_TEMPLATE_ARGS\n+#undef _GLIBCXX_REF_WRAP_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS_U\n+#undef _GLIBCXX_TEMPLATE_PARAMS_U\n+#undef _GLIBCXX_TUPLE_ASSIGN\n+#undef _GLIBCXX_TUPLE_COPY_INIT\n+#undef _GLIBCXX_TUPLE_ADD_CREF\n+#undef _GLIBCXX_BIND_V_ARGS\n+#undef _GLIBCXX_BIND_V_TEMPLATE_ARGS\n+#undef _GLIBCXX_MU_GET_TUPLE_ARGS\n+#undef _GLIBCXX_BIND_MEMBERS_INIT\n+#undef _GLIBCXX_BIND_MEMBERS\n #undef _GLIBCXX_ARGS_SHIFTED\n #undef _GLIBCXX_PARAMS_SHIFTED\n #undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n@@ -257,7 +465,33 @@\n #define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7\n #define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7\n #define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7\n+#define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2; _T3 _M_arg3; _T4 _M_arg4; _T5 _M_arg5; _T6 _M_arg6; _T7 _M_arg7; _T8 _M_arg8;\n+#define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2), _M_arg3(__a3), _M_arg4(__a4), _M_arg5(__a5), _M_arg6(__a6), _M_arg7(__a7), _M_arg8(__a8)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple), ::std::tr1::get<2>(__tuple), ::std::tr1::get<3>(__tuple), ::std::tr1::get<4>(__tuple), ::std::tr1::get<5>(__tuple), ::std::tr1::get<6>(__tuple), ::std::tr1::get<7>(__tuple)\n+#define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T3> _CV(_T3, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T4> _CV(_T4, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T5> _CV(_T5, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T6> _CV(_T6, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T7> _CV(_T7, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T8> _CV(_T8, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T6>()(_M_arg6, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T7>()(_M_arg7, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T8>()(_M_arg8, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2, typename __add_c_ref<_T3>::type __a3, typename __add_c_ref<_T4>::type __a4, typename __add_c_ref<_T5>::type __a5, typename __add_c_ref<_T6>::type __a6, typename __add_c_ref<_T7>::type __a7, typename __add_c_ref<_T8>::type __a8\n+#define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2), _M_arg3(__in._M_arg3), _M_arg4(__in._M_arg4), _M_arg5(__in._M_arg5), _M_arg6(__in._M_arg6), _M_arg7(__in._M_arg7), _M_arg8(__in._M_arg8)\n+#define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2; _M_arg3 = __in._M_arg3; _M_arg4 = __in._M_arg4; _M_arg5 = __in._M_arg5; _M_arg6 = __in._M_arg6; _M_arg7 = __in._M_arg7; _M_arg8 = __in._M_arg8;\n+#define _GLIBCXX_TEMPLATE_PARAMS_U typename _U1, typename _U2, typename _U3, typename _U4, typename _U5, typename _U6, typename _U7, typename _U8\n+#define _GLIBCXX_TEMPLATE_ARGS_U _U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8\n+#define _GLIBCXX_REF_WRAP_PARAMS ref(__a1), ref(__a2), ref(__a3), ref(__a4), ref(__a5), ref(__a6), ref(__a7), ref(__a8)\n+#define _GLIBCXX_REF_TEMPLATE_ARGS _T1&, _T2&, _T3&, _T4&, _T5&, _T6&, _T7&, _T8&\n+#define _GLIBCXX_NUM_ARGS_PLUS_1 9\n #include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_NUM_ARGS_PLUS_1\n+#undef _GLIBCXX_REF_TEMPLATE_ARGS\n+#undef _GLIBCXX_REF_WRAP_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS_U\n+#undef _GLIBCXX_TEMPLATE_PARAMS_U\n+#undef _GLIBCXX_TUPLE_ASSIGN\n+#undef _GLIBCXX_TUPLE_COPY_INIT\n+#undef _GLIBCXX_TUPLE_ADD_CREF\n+#undef _GLIBCXX_BIND_V_ARGS\n+#undef _GLIBCXX_BIND_V_TEMPLATE_ARGS\n+#undef _GLIBCXX_MU_GET_TUPLE_ARGS\n+#undef _GLIBCXX_BIND_MEMBERS_INIT\n+#undef _GLIBCXX_BIND_MEMBERS\n #undef _GLIBCXX_ARGS_SHIFTED\n #undef _GLIBCXX_PARAMS_SHIFTED\n #undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n@@ -283,7 +517,33 @@\n #define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8\n #define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8\n #define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8\n+#define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2; _T3 _M_arg3; _T4 _M_arg4; _T5 _M_arg5; _T6 _M_arg6; _T7 _M_arg7; _T8 _M_arg8; _T9 _M_arg9;\n+#define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2), _M_arg3(__a3), _M_arg4(__a4), _M_arg5(__a5), _M_arg6(__a6), _M_arg7(__a7), _M_arg8(__a8), _M_arg9(__a9)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple), ::std::tr1::get<2>(__tuple), ::std::tr1::get<3>(__tuple), ::std::tr1::get<4>(__tuple), ::std::tr1::get<5>(__tuple), ::std::tr1::get<6>(__tuple), ::std::tr1::get<7>(__tuple), ::std::tr1::get<8>(__tuple)\n+#define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T3> _CV(_T3, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T4> _CV(_T4, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T5> _CV(_T5, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T6> _CV(_T6, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T7> _CV(_T7, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T8> _CV(_T8, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T9> _CV(_T9, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T6>()(_M_arg6, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T7>()(_M_arg7, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T8>()(_M_arg8, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T9>()(_M_arg9, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2, typename __add_c_ref<_T3>::type __a3, typename __add_c_ref<_T4>::type __a4, typename __add_c_ref<_T5>::type __a5, typename __add_c_ref<_T6>::type __a6, typename __add_c_ref<_T7>::type __a7, typename __add_c_ref<_T8>::type __a8, typename __add_c_ref<_T9>::type __a9\n+#define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2), _M_arg3(__in._M_arg3), _M_arg4(__in._M_arg4), _M_arg5(__in._M_arg5), _M_arg6(__in._M_arg6), _M_arg7(__in._M_arg7), _M_arg8(__in._M_arg8), _M_arg9(__in._M_arg9)\n+#define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2; _M_arg3 = __in._M_arg3; _M_arg4 = __in._M_arg4; _M_arg5 = __in._M_arg5; _M_arg6 = __in._M_arg6; _M_arg7 = __in._M_arg7; _M_arg8 = __in._M_arg8; _M_arg9 = __in._M_arg9;\n+#define _GLIBCXX_TEMPLATE_PARAMS_U typename _U1, typename _U2, typename _U3, typename _U4, typename _U5, typename _U6, typename _U7, typename _U8, typename _U9\n+#define _GLIBCXX_TEMPLATE_ARGS_U _U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, _U9\n+#define _GLIBCXX_REF_WRAP_PARAMS ref(__a1), ref(__a2), ref(__a3), ref(__a4), ref(__a5), ref(__a6), ref(__a7), ref(__a8), ref(__a9)\n+#define _GLIBCXX_REF_TEMPLATE_ARGS _T1&, _T2&, _T3&, _T4&, _T5&, _T6&, _T7&, _T8&, _T9&\n+#define _GLIBCXX_NUM_ARGS_PLUS_1 10\n #include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_NUM_ARGS_PLUS_1\n+#undef _GLIBCXX_REF_TEMPLATE_ARGS\n+#undef _GLIBCXX_REF_WRAP_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS_U\n+#undef _GLIBCXX_TEMPLATE_PARAMS_U\n+#undef _GLIBCXX_TUPLE_ASSIGN\n+#undef _GLIBCXX_TUPLE_COPY_INIT\n+#undef _GLIBCXX_TUPLE_ADD_CREF\n+#undef _GLIBCXX_BIND_V_ARGS\n+#undef _GLIBCXX_BIND_V_TEMPLATE_ARGS\n+#undef _GLIBCXX_MU_GET_TUPLE_ARGS\n+#undef _GLIBCXX_BIND_MEMBERS_INIT\n+#undef _GLIBCXX_BIND_MEMBERS\n #undef _GLIBCXX_ARGS_SHIFTED\n #undef _GLIBCXX_PARAMS_SHIFTED\n #undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n@@ -297,6 +557,7 @@\n #undef _GLIBCXX_COMMA\n #undef _GLIBCXX_NUM_ARGS\n \n+#define _GLIBCXX_LAST_INCLUDE\n #define _GLIBCXX_NUM_ARGS 10\n #define _GLIBCXX_COMMA ,\n #define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10\n@@ -309,7 +570,33 @@\n #define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9\n #define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9\n #define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9\n+#define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2; _T3 _M_arg3; _T4 _M_arg4; _T5 _M_arg5; _T6 _M_arg6; _T7 _M_arg7; _T8 _M_arg8; _T9 _M_arg9; _T10 _M_arg10;\n+#define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2), _M_arg3(__a3), _M_arg4(__a4), _M_arg5(__a5), _M_arg6(__a6), _M_arg7(__a7), _M_arg8(__a8), _M_arg9(__a9), _M_arg10(__a10)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple), ::std::tr1::get<2>(__tuple), ::std::tr1::get<3>(__tuple), ::std::tr1::get<4>(__tuple), ::std::tr1::get<5>(__tuple), ::std::tr1::get<6>(__tuple), ::std::tr1::get<7>(__tuple), ::std::tr1::get<8>(__tuple), ::std::tr1::get<9>(__tuple)\n+#define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T3> _CV(_T3, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T4> _CV(_T4, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T5> _CV(_T5, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T6> _CV(_T6, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T7> _CV(_T7, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T8> _CV(_T8, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T9> _CV(_T9, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T10> _CV(_T10, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T6>()(_M_arg6, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T7>()(_M_arg7, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T8>()(_M_arg8, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T9>()(_M_arg9, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T10>()(_M_arg10, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2, typename __add_c_ref<_T3>::type __a3, typename __add_c_ref<_T4>::type __a4, typename __add_c_ref<_T5>::type __a5, typename __add_c_ref<_T6>::type __a6, typename __add_c_ref<_T7>::type __a7, typename __add_c_ref<_T8>::type __a8, typename __add_c_ref<_T9>::type __a9, typename __add_c_ref<_T10>::type __a10\n+#define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2), _M_arg3(__in._M_arg3), _M_arg4(__in._M_arg4), _M_arg5(__in._M_arg5), _M_arg6(__in._M_arg6), _M_arg7(__in._M_arg7), _M_arg8(__in._M_arg8), _M_arg9(__in._M_arg9), _M_arg10(__in._M_arg10)\n+#define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2; _M_arg3 = __in._M_arg3; _M_arg4 = __in._M_arg4; _M_arg5 = __in._M_arg5; _M_arg6 = __in._M_arg6; _M_arg7 = __in._M_arg7; _M_arg8 = __in._M_arg8; _M_arg9 = __in._M_arg9; _M_arg10 = __in._M_arg10;\n+#define _GLIBCXX_TEMPLATE_PARAMS_U typename _U1, typename _U2, typename _U3, typename _U4, typename _U5, typename _U6, typename _U7, typename _U8, typename _U9, typename _U10\n+#define _GLIBCXX_TEMPLATE_ARGS_U _U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, _U9, _U10\n+#define _GLIBCXX_REF_WRAP_PARAMS ref(__a1), ref(__a2), ref(__a3), ref(__a4), ref(__a5), ref(__a6), ref(__a7), ref(__a8), ref(__a9), ref(__a10)\n+#define _GLIBCXX_REF_TEMPLATE_ARGS _T1&, _T2&, _T3&, _T4&, _T5&, _T6&, _T7&, _T8&, _T9&, _T10&\n+#define _GLIBCXX_NUM_ARGS_PLUS_1 11\n #include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_NUM_ARGS_PLUS_1\n+#undef _GLIBCXX_REF_TEMPLATE_ARGS\n+#undef _GLIBCXX_REF_WRAP_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS_U\n+#undef _GLIBCXX_TEMPLATE_PARAMS_U\n+#undef _GLIBCXX_TUPLE_ASSIGN\n+#undef _GLIBCXX_TUPLE_COPY_INIT\n+#undef _GLIBCXX_TUPLE_ADD_CREF\n+#undef _GLIBCXX_BIND_V_ARGS\n+#undef _GLIBCXX_BIND_V_TEMPLATE_ARGS\n+#undef _GLIBCXX_MU_GET_TUPLE_ARGS\n+#undef _GLIBCXX_BIND_MEMBERS_INIT\n+#undef _GLIBCXX_BIND_MEMBERS\n #undef _GLIBCXX_ARGS_SHIFTED\n #undef _GLIBCXX_PARAMS_SHIFTED\n #undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n@@ -323,263 +610,5 @@\n #undef _GLIBCXX_COMMA\n #undef _GLIBCXX_NUM_ARGS\n \n-#define _GLIBCXX_NUM_ARGS 11\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11\n-#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10\n-#include _GLIBCXX_REPEAT_HEADER\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_REF_PARAMS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 12\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12\n-#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11\n-#include _GLIBCXX_REPEAT_HEADER\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_REF_PARAMS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 13\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13\n-#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12, _T13& __a13\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12\n-#include _GLIBCXX_REPEAT_HEADER\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_REF_PARAMS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 14\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14\n-#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12, _T13& __a13, _T14& __a14\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13\n-#include _GLIBCXX_REPEAT_HEADER\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_REF_PARAMS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 15\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15\n-#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12, _T13& __a13, _T14& __a14, _T15& __a15\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14\n-#include _GLIBCXX_REPEAT_HEADER\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_REF_PARAMS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 16\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16\n-#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12, _T13& __a13, _T14& __a14, _T15& __a15, _T16& __a16\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15\n-#include _GLIBCXX_REPEAT_HEADER\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_REF_PARAMS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 17\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17\n-#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12, _T13& __a13, _T14& __a14, _T15& __a15, _T16& __a16, _T17& __a17\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16\n-#include _GLIBCXX_REPEAT_HEADER\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_REF_PARAMS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 18\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17, typename _T18\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17, _T18\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17, _T18 __a18\n-#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12, _T13& __a13, _T14& __a14, _T15& __a15, _T16& __a16, _T17& __a17, _T18& __a18\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17, __a18\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17\n-#include _GLIBCXX_REPEAT_HEADER\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_REF_PARAMS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 19\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17, typename _T18, typename _T19\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17, _T18, _T19\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17, _T18 __a18, _T19 __a19\n-#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12, _T13& __a13, _T14& __a14, _T15& __a15, _T16& __a16, _T17& __a17, _T18& __a18, _T19& __a19\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17, __a18, __a19\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17, typename _T18\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17, _T18\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17, _T18 __a18\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17, __a18\n-#include _GLIBCXX_REPEAT_HEADER\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_REF_PARAMS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 20\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17, typename _T18, typename _T19, typename _T20\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17, _T18, _T19, _T20\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17, _T18 __a18, _T19 __a19, _T20 __a20\n-#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12, _T13& __a13, _T14& __a14, _T15& __a15, _T16& __a16, _T17& __a17, _T18& __a18, _T19& __a19, _T20& __a20\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17, __a18, __a19, __a20\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17, typename _T18, typename _T19\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17, _T18, _T19\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17, _T18 __a18, _T19 __a19\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17, __a18, __a19\n-#include _GLIBCXX_REPEAT_HEADER\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_REF_PARAMS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n+#undef _GLIBCXX_LAST_INCLUDE\n "}, {"sha": "89bccc3d495066063b0dc6895a176a6867a65d6f", "filename": "libstdc++-v3/include/tr1/tuple", "status": "modified", "additions": 230, "deletions": 1413, "changes": 1643, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -27,1432 +27,249 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file \n- *  This is a TR1 C++ Library header. \n- */\n+/** @file\n+*  This is a TR1 C++ Library header.\n+*/\n \n // Chris Jefferson <chris@bubblescope.net>\n \n-// This header is automatically generated: see maketuple.c for details.\n-\n #ifndef _TUPLE\n #define _TUPLE 1\n \n #include <tr1/utility>\n-#include <tr1/functional>\n+#include <tr1/ref_fwd.h>\n \n namespace std\n {\n namespace tr1\n {\n-  // An implementation specific class which is used in the tuple class\n-  // when the tuple is not maximum possible size.\n-  struct _NullClass { };\n-\n-  template<typename _Tp0 = _NullClass, typename _Tp1 = _NullClass,\n-\t   typename _Tp2 = _NullClass, typename _Tp3 = _NullClass,\n-\t   typename _Tp4 = _NullClass, typename _Tp5 = _NullClass,\n-\t   typename _Tp6 = _NullClass, typename _Tp7 = _NullClass,\n-\t   typename _Tp8 = _NullClass, typename _Tp9 = _NullClass>\n-    class tuple;\n-\n-  /// Gives the type of the ith element of a given tuple type.\n-  template<int __i, typename _Tp>\n-    struct tuple_element;\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9>\n-    struct tuple_element<0, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n-\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n-    { typedef _Tp0 type; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9>\n-    struct tuple_element<1, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n-\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n-    { typedef _Tp1 type; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9>\n-    struct tuple_element<2, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n-\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n-    { typedef _Tp2 type; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9>\n-    struct tuple_element<3, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n-\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n-    { typedef _Tp3 type; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9>\n-    struct tuple_element<4, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n-\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n-    { typedef _Tp4 type; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9>\n-    struct tuple_element<5, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n-\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n-    { typedef _Tp5 type; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9>\n-    struct tuple_element<6, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n-\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n-    { typedef _Tp6 type; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9>\n-    struct tuple_element<7, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n-\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n-    { typedef _Tp7 type; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9>\n-    struct tuple_element<8, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n-\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n-    { typedef _Tp8 type; };\n-\n-  /// @brief  class tuple_element\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9>\n-    struct tuple_element<9, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n-\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n-    { typedef _Tp9 type; };\n-\n-  /// Finds the size of a given tuple type.\n-  template<typename _Tp>\n-    struct tuple_size;\n-\n-  template<>\n-    struct tuple_size<tuple<_NullClass, _NullClass, _NullClass, _NullClass,\n-\t\t\t    _NullClass, _NullClass, _NullClass, _NullClass,\n-\t\t\t    _NullClass, _NullClass> >\n-    { static const int value = 0; };\n-\n-  template< typename _Tp0>\n-    struct tuple_size<tuple< _Tp0, _NullClass, _NullClass, _NullClass,\n-\t\t\t    _NullClass, _NullClass, _NullClass, _NullClass,\n-\t\t\t    _NullClass, _NullClass> >\n-    { static const int value = 1; };\n-\n-  template<typename _Tp0, typename _Tp1>\n-    struct tuple_size<tuple<_Tp0, _Tp1, _NullClass, _NullClass, _NullClass,\n-\t\t\t    _NullClass, _NullClass, _NullClass, _NullClass,\n-\t\t\t    _NullClass> >\n-    { static const int value = 2; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2>\n-    struct tuple_size<tuple<_Tp0, _Tp1, _Tp2, _NullClass, _NullClass,\n-\t\t\t    _NullClass, _NullClass, _NullClass, _NullClass,\n-\t\t\t    _NullClass> >\n-    { static const int value = 3; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3>\n-    struct tuple_size<tuple<_Tp0, _Tp1, _Tp2, _Tp3, _NullClass, _NullClass,\n-\t\t\t    _NullClass, _NullClass, _NullClass, _NullClass> >\n-    { static const int value = 4; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4>\n-    struct tuple_size<tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _NullClass,\n-\t\t\t    _NullClass, _NullClass, _NullClass, _NullClass> >\n-    { static const int value = 5; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5>\n-    struct tuple_size<tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _NullClass,\n-\t\t\t    _NullClass, _NullClass, _NullClass> >\n-    { static const int value = 6; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6>\n-    struct tuple_size<tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, \n-\t\t\t    _NullClass, _NullClass, _NullClass> >\n-    { static const int value = 7; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7>\n-    struct tuple_size<tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, \n-\t\t\t    _NullClass, _NullClass> >\n-    { static const int value = 8; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8>\n-    struct tuple_size<tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7,\n-\t\t\t    _Tp8,  _NullClass> >\n-    { static const int value = 9; };\n-\n-  /// @brief  class tuple_size\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9>\n-    struct tuple_size<tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7,\n-\t\t\t    _Tp8, _Tp9> >\n-    { static const int value = 10; };\n-\n-  // Adds a const reference to a non-reference type.\n-  template<typename _Tp>\n-    struct __add_c_ref\n-    { typedef const _Tp& type; };\n-\n-  template<typename _Tp>\n-    struct __add_c_ref<_Tp&>\n-    { typedef _Tp& type; };\n-\n-  // Adds a reference to a non-reference type.\n-  template<typename _Tp>\n-    struct __add_ref\n-    { typedef _Tp& type; };\n-\n-  template<typename _Tp>\n-    struct __add_ref<_Tp&>\n-    { typedef _Tp& type; };\n-\n-  // The empty tuple.\n-  template<>\n-    class tuple<_NullClass, _NullClass, _NullClass, _NullClass, _NullClass,\n-\t        _NullClass, _NullClass, _NullClass, _NullClass, _NullClass>\n-    {\n-    public:\n-      tuple()\n-      { }\n-\n-      tuple(const tuple& __in)\n-      { }\n-\n-      tuple& operator=(const tuple& __in)\n-      { return *this; }\n-    };\n-\n-  template< typename _Tp0>\n-    class tuple< _Tp0, _NullClass, _NullClass, _NullClass, _NullClass,\n-\t        _NullClass, _NullClass, _NullClass, _NullClass, _NullClass>\n-    {\n-      _Tp0 _M_t0;\n-\n-    public:\n-      tuple()\n-      { }\n-\n-      explicit tuple( typename __add_c_ref<_Tp0>::type __in0):\n-         _M_t0(__in0)\n-      { }\n-\n-      tuple(const tuple& __in):\n-         _M_t0(__in._M_t0)\n-      { }\n-\n-      template< typename _Up0>\n-        tuple(const tuple< _Up0>& __in):\n-\t   _M_t0(__in._M_t0)\n-        { }\n-\n-      tuple&\n-      operator=(const tuple& __in)\n-      {\n-        _M_t0=__in._M_t0;\n-        return *this;\n-      }\n-\n-      template< typename _Up0>\n-        tuple&\n-        operator=(const tuple< _Up0>& __in)\n-        {\n-\t  _M_t0=__in._M_t0;\n-\t  return *this;\n-        }\n-\n-      template<int __i, typename _Up>\n-        friend class __get_helper;\n-      template<typename, typename, typename, typename, typename, typename,\n-\t       typename, typename, typename, typename>\n-        friend class tuple;\n-  };\n-\n-  template<typename _Tp0, typename _Tp1>\n-    class tuple<_Tp0, _Tp1, _NullClass, _NullClass, _NullClass, _NullClass,\n-\t        _NullClass, _NullClass, _NullClass, _NullClass>\n-    {\n-      _Tp0 _M_t0;\n-      _Tp1 _M_t1;\n-\n-    public:\n-      tuple()\n-      { }\n-\n-      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n-\t\t     typename __add_c_ref<_Tp1>::type __in1):\n-        _M_t0(__in0), _M_t1(__in1)\n-      { }\n-\n-      tuple(const tuple& __in):\n-        _M_t0(__in._M_t0), _M_t1(__in._M_t1)\n-      { }\n-\n-      template<typename _Up0, typename _Up1>\n-        tuple(const tuple<_Up0, _Up1>& __in):\n-\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1)\n-        { }\n-\n-      template<class _Up1, class _Up2>\n-        tuple(const std::pair<_Up1, _Up2>& __u):\n-           _M_t0(__u.first), _M_t1(__u.second)\n-        { }\n-\n-      tuple&\n-      operator=(const tuple& __in)\n-      {\n-        _M_t0=__in._M_t0;\n-        _M_t1=__in._M_t1;\n-        return *this;\n-      }\n-\n-      template<typename _Up0, typename _Up1>\n-        tuple&\n-        operator=(const tuple<_Up0, _Up1>& __in)\n-        {\n-\t  _M_t0=__in._M_t0;\n-\t  _M_t1=__in._M_t1;\n-\t  return *this;\n-        }\n-\n-      template<int __i, typename _Up>\n-        friend class __get_helper;\n-      template<typename, typename, typename, typename, typename, typename,\n-\t       typename, typename, typename, typename>\n-        friend class tuple;\n-  };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2>\n-    class tuple<_Tp0, _Tp1, _Tp2, _NullClass, _NullClass, _NullClass,\n-\t        _NullClass, _NullClass, _NullClass, _NullClass>\n-    {\n-      _Tp0 _M_t0;\n-      _Tp1 _M_t1;\n-      _Tp2 _M_t2;\n-\n-    public:\n-      tuple()\n-      { }\n-\n-      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n-\t\t     typename __add_c_ref<_Tp1>::type __in1,\n-\t\t     typename __add_c_ref<_Tp2>::type __in2):\n-        _M_t0(__in0), _M_t1(__in1), _M_t2(__in2)\n-      { }\n-\n-      tuple(const tuple& __in):\n-        _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2)\n-      { }\n-\n-      template<typename _Up0, typename _Up1, typename _Up2>\n-        tuple(const tuple<_Up0, _Up1, _Up2>& __in):\n-\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2)\n-        { }\n-\n-      tuple&\n-      operator=(const tuple& __in)\n-      {\n-        _M_t0=__in._M_t0;\n-        _M_t1=__in._M_t1;\n-        _M_t2=__in._M_t2;\n-        return *this;\n-      }\n-\n-      template<typename _Up0, typename _Up1, typename _Up2>\n-        tuple&\n-        operator=(const tuple<_Up0, _Up1, _Up2>& __in)\n-        {\n-\t  _M_t0=__in._M_t0;\n-\t  _M_t1=__in._M_t1;\n-\t  _M_t2=__in._M_t2;\n-\t  return *this;\n-        }\n-\n-      template<int __i, typename _Up>\n-        friend class __get_helper;\n-      template<typename, typename, typename, typename, typename, typename,\n-\t       typename, typename, typename, typename>\n-        friend class tuple;\n-  };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3>\n-    class tuple<_Tp0, _Tp1, _Tp2, _Tp3, _NullClass, _NullClass, _NullClass,\n-\t        _NullClass, _NullClass, _NullClass>\n-    {\n-      _Tp0 _M_t0;\n-      _Tp1 _M_t1;\n-      _Tp2 _M_t2;\n-      _Tp3 _M_t3;\n-\n-    public:\n-      tuple()\n-      { }\n-\n-      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n-\t\t     typename __add_c_ref<_Tp1>::type __in1,\n-\t\t     typename __add_c_ref<_Tp2>::type __in2,\n-\t\t     typename __add_c_ref<_Tp3>::type __in3):\n-        _M_t0(__in0), _M_t1(__in1), _M_t2(__in2), _M_t3(__in3)\n-      { }\n-\n-      tuple(const tuple& __in):\n-        _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n-        _M_t3(__in._M_t3)\n-      { }\n-\n-      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3>\n-        tuple(const tuple<_Up0, _Up1, _Up2, _Up3>& __in):\n-\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n-\t  _M_t3(__in._M_t3)\n-        { }\n-\n-      tuple&\n-      operator=(const tuple& __in)\n-      {\n-        _M_t0=__in._M_t0;\n-        _M_t1=__in._M_t1;\n-        _M_t2=__in._M_t2;\n-        _M_t3=__in._M_t3;\n-        return *this;\n-      }\n-\n-      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3>\n-        tuple&\n-        operator=(const tuple<_Up0, _Up1, _Up2, _Up3>& __in)\n-        {\n-\t  _M_t0=__in._M_t0;\n-\t  _M_t1=__in._M_t1;\n-\t  _M_t2=__in._M_t2;\n-\t  _M_t3=__in._M_t3;\n-\t  return *this;\n-        }\n-\n-      template<int __i, typename _Up>\n-        friend class __get_helper;\n-      template<typename, typename, typename, typename, typename, typename,\n-\t       typename, typename, typename, typename>\n-        friend class tuple;\n-  };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4>\n-    class tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _NullClass, _NullClass,\n-\t        _NullClass, _NullClass, _NullClass>\n-    {\n-      _Tp0 _M_t0;\n-      _Tp1 _M_t1;\n-      _Tp2 _M_t2;\n-      _Tp3 _M_t3;\n-      _Tp4 _M_t4;\n-\n-    public:\n-      tuple()\n-      { }\n-\n-      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n-\t\t     typename __add_c_ref<_Tp1>::type __in1,\n-\t\t     typename __add_c_ref<_Tp2>::type __in2,\n-\t\t     typename __add_c_ref<_Tp3>::type __in3,\n-\t\t     typename __add_c_ref<_Tp4>::type __in4):\n-        _M_t0(__in0), _M_t1(__in1), _M_t2(__in2), _M_t3(__in3), _M_t4(__in4)\n-      { }\n-\n-      tuple(const tuple& __in):\n-        _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n-        _M_t3(__in._M_t3), _M_t4(__in._M_t4)\n-      { }\n-\n-      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n-\t       typename _Up4>\n-        tuple(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4>& __in):\n-\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n-\t  _M_t3(__in._M_t3), _M_t4(__in._M_t4)\n-        { }\n-\n-      tuple&\n-      operator=(const tuple& __in)\n-      {\n-        _M_t0=__in._M_t0;\n-        _M_t1=__in._M_t1;\n-        _M_t2=__in._M_t2;\n-        _M_t3=__in._M_t3;\n-        _M_t4=__in._M_t4;\n-        return *this;\n-      }\n-\n-      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n-\t       typename _Up4>\n-        tuple&\n-        operator=(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4>& __in)\n-        {\n-\t  _M_t0=__in._M_t0;\n-\t  _M_t1=__in._M_t1;\n-\t  _M_t2=__in._M_t2;\n-\t  _M_t3=__in._M_t3;\n-\t  _M_t4=__in._M_t4;\n-\t  return *this;\n-        }\n-\n-      template<int __i, typename _Up>\n-        friend class __get_helper;\n-      template<typename, typename, typename, typename, typename, typename,\n-\t       typename, typename, typename, typename>\n-        friend class tuple;\n-  };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5>\n-    class tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _NullClass, _NullClass,\n-\t        _NullClass, _NullClass>\n-    {\n-      _Tp0 _M_t0;\n-      _Tp1 _M_t1;\n-      _Tp2 _M_t2;\n-      _Tp3 _M_t3;\n-      _Tp4 _M_t4;\n-      _Tp5 _M_t5;\n-\n-    public:\n-      tuple()\n-      { }\n-\n-      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n-\t\t     typename __add_c_ref<_Tp1>::type __in1,\n-\t\t     typename __add_c_ref<_Tp2>::type __in2,\n-\t\t     typename __add_c_ref<_Tp3>::type __in3,\n-\t\t     typename __add_c_ref<_Tp4>::type __in4,\n-\t\t     typename __add_c_ref<_Tp5>::type __in5):\n-        _M_t0(__in0), _M_t1(__in1), _M_t2(__in2), _M_t3(__in3), _M_t4(__in4),\n-        _M_t5(__in5)\n-      { }\n-\n-      tuple(const tuple& __in):\n-        _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n-        _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5)\n-      { }\n-\n-      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n-\t       typename _Up4, typename _Up5>\n-        tuple(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5>& __in):\n-\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n-\t  _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5)\n-        { }\n-\n-      tuple&\n-      operator=(const tuple& __in)\n-      {\n-        _M_t0=__in._M_t0;\n-        _M_t1=__in._M_t1;\n-        _M_t2=__in._M_t2;\n-        _M_t3=__in._M_t3;\n-        _M_t4=__in._M_t4;\n-        _M_t5=__in._M_t5;\n-        return *this;\n-      }\n-\n-      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n-\t       typename _Up4, typename _Up5>\n-        tuple&\n-        operator=(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5>& __in)\n-        {\n-\t  _M_t0=__in._M_t0;\n-\t  _M_t1=__in._M_t1;\n-\t  _M_t2=__in._M_t2;\n-\t  _M_t3=__in._M_t3;\n-\t  _M_t4=__in._M_t4;\n-\t  _M_t5=__in._M_t5;\n-\t  return *this;\n-        }\n-\n-      template<int __i, typename _Up>\n-        friend class __get_helper;\n-      template<typename, typename, typename, typename, typename, typename,\n-\t       typename, typename, typename, typename>\n-        friend class tuple;\n-  };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6>\n-    class tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _NullClass,\n-\t        _NullClass, _NullClass>\n-    {\n-      _Tp0 _M_t0;\n-      _Tp1 _M_t1;\n-      _Tp2 _M_t2;\n-      _Tp3 _M_t3;\n-      _Tp4 _M_t4;\n-      _Tp5 _M_t5;\n-      _Tp6 _M_t6;\n-\n-    public:\n-      tuple()\n-      { }\n-\n-      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n-\t\t     typename __add_c_ref<_Tp1>::type __in1,\n-\t\t     typename __add_c_ref<_Tp2>::type __in2,\n-\t\t     typename __add_c_ref<_Tp3>::type __in3,\n-\t\t     typename __add_c_ref<_Tp4>::type __in4,\n-\t\t     typename __add_c_ref<_Tp5>::type __in5,\n-\t\t     typename __add_c_ref<_Tp6>::type __in6):\n-        _M_t0(__in0), _M_t1(__in1), _M_t2(__in2), _M_t3(__in3), _M_t4(__in4),\n-        _M_t5(__in5), _M_t6(__in6)\n-      { }\n-\n-      tuple(const tuple& __in):\n-        _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n-        _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5),\n-        _M_t6(__in._M_t6)\n-      { }\n-\n-      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n-\t       typename _Up4, typename _Up5, typename _Up6>\n-        tuple(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6>& __in):\n-\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n-\t  _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5),\n-\t  _M_t6(__in._M_t6)\n-        { }\n-\n-      tuple&\n-      operator=(const tuple& __in)\n-      {\n-        _M_t0=__in._M_t0;\n-        _M_t1=__in._M_t1;\n-        _M_t2=__in._M_t2;\n-        _M_t3=__in._M_t3;\n-        _M_t4=__in._M_t4;\n-        _M_t5=__in._M_t5;\n-        _M_t6=__in._M_t6;\n-        return *this;\n-      }\n-\n-      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n-\t       typename _Up4, typename _Up5, typename _Up6>\n-        tuple&\n-        operator=(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5,\n-\t\t\t      _Up6>& __in)\n-        {\n-\t  _M_t0=__in._M_t0;\n-\t  _M_t1=__in._M_t1;\n-\t  _M_t2=__in._M_t2;\n-\t  _M_t3=__in._M_t3;\n-\t  _M_t4=__in._M_t4;\n-\t  _M_t5=__in._M_t5;\n-\t  _M_t6=__in._M_t6;\n-\t  return *this;\n-        }\n-\n-      template<int __i, typename _Up>\n-        friend class __get_helper;\n-      template<typename, typename, typename, typename, typename, typename,\n-\t       typename, typename, typename, typename>\n-        friend class tuple;\n-  };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7>\n-    class tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _NullClass,\n-\t        _NullClass>\n-    {\n-      _Tp0 _M_t0;\n-      _Tp1 _M_t1;\n-      _Tp2 _M_t2;\n-      _Tp3 _M_t3;\n-      _Tp4 _M_t4;\n-      _Tp5 _M_t5;\n-      _Tp6 _M_t6;\n-      _Tp7 _M_t7;\n-\n-    public:\n-      tuple()\n-      { }\n-\n-      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n-\t\t     typename __add_c_ref<_Tp1>::type __in1,\n-\t\t     typename __add_c_ref<_Tp2>::type __in2,\n-\t\t     typename __add_c_ref<_Tp3>::type __in3,\n-\t\t     typename __add_c_ref<_Tp4>::type __in4,\n-\t\t     typename __add_c_ref<_Tp5>::type __in5,\n-\t\t     typename __add_c_ref<_Tp6>::type __in6,\n-\t\t     typename __add_c_ref<_Tp7>::type __in7):\n-        _M_t0(__in0), _M_t1(__in1), _M_t2(__in2), _M_t3(__in3), _M_t4(__in4),\n-        _M_t5(__in5), _M_t6(__in6), _M_t7(__in7)\n-      { }\n-\n-      tuple(const tuple& __in):\n-        _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n-        _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5),\n-        _M_t6(__in._M_t6), _M_t7(__in._M_t7)\n-      { }\n-\n-      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n-\t       typename _Up4, typename _Up5, typename _Up6, typename _Up7>\n-        tuple(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6,\n-\t\t\t  _Up7>& __in):\n-\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n-\t  _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5),\n-\t  _M_t6(__in._M_t6), _M_t7(__in._M_t7)\n-        { }\n-\n-      tuple&\n-      operator=(const tuple& __in)\n-      {\n-        _M_t0=__in._M_t0;\n-        _M_t1=__in._M_t1;\n-        _M_t2=__in._M_t2;\n-        _M_t3=__in._M_t3;\n-        _M_t4=__in._M_t4;\n-        _M_t5=__in._M_t5;\n-        _M_t6=__in._M_t6;\n-        _M_t7=__in._M_t7;\n-        return *this;\n-      }\n-\n-      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n-\t       typename _Up4, typename _Up5, typename _Up6, typename _Up7>\n-        tuple&\n-        operator=(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6,\n-\t\t\t      _Up7>& __in)\n-        {\n-\t  _M_t0=__in._M_t0;\n-\t  _M_t1=__in._M_t1;\n-\t  _M_t2=__in._M_t2;\n-\t  _M_t3=__in._M_t3;\n-\t  _M_t4=__in._M_t4;\n-\t  _M_t5=__in._M_t5;\n-\t  _M_t6=__in._M_t6;\n-\t  _M_t7=__in._M_t7;\n-\t  return *this;\n-        }\n-\n-      template<int __i, typename _Up>\n-        friend class __get_helper;\n-      template<typename, typename, typename, typename, typename, typename,\n-\t       typename, typename, typename, typename>\n-        friend class tuple;\n-  };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8>\n-    class tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8, \n-\t        _NullClass>\n-    {\n-      _Tp0 _M_t0;\n-      _Tp1 _M_t1;\n-      _Tp2 _M_t2;\n-      _Tp3 _M_t3;\n-      _Tp4 _M_t4;\n-      _Tp5 _M_t5;\n-      _Tp6 _M_t6;\n-      _Tp7 _M_t7;\n-      _Tp8 _M_t8;\n-\n-    public:\n-      tuple()\n-      { }\n-\n-      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n-\t\t     typename __add_c_ref<_Tp1>::type __in1,\n-\t\t     typename __add_c_ref<_Tp2>::type __in2,\n-\t\t     typename __add_c_ref<_Tp3>::type __in3,\n-\t\t     typename __add_c_ref<_Tp4>::type __in4,\n-\t\t     typename __add_c_ref<_Tp5>::type __in5,\n-\t\t     typename __add_c_ref<_Tp6>::type __in6,\n-\t\t     typename __add_c_ref<_Tp7>::type __in7,\n-\t\t     typename __add_c_ref<_Tp8>::type __in8):\n-        _M_t0(__in0), _M_t1(__in1), _M_t2(__in2), _M_t3(__in3), _M_t4(__in4),\n-        _M_t5(__in5), _M_t6(__in6), _M_t7(__in7), _M_t8(__in8)\n-      { }\n-\n-      tuple(const tuple& __in):\n-        _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n-        _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5),\n-        _M_t6(__in._M_t6), _M_t7(__in._M_t7), _M_t8(__in._M_t8)\n-      { }\n-\n-      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n-\t       typename _Up4, typename _Up5, typename _Up6, typename _Up7,\n-\t       typename _Up8>\n-        tuple(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7,\n-\t\t\t  _Up8>& __in):\n-\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n-\t  _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5),\n-\t  _M_t6(__in._M_t6), _M_t7(__in._M_t7), _M_t8(__in._M_t8)\n-        { }\n-\n-      tuple&\n-      operator=(const tuple& __in)\n-      {\n-        _M_t0=__in._M_t0;\n-        _M_t1=__in._M_t1;\n-        _M_t2=__in._M_t2;\n-        _M_t3=__in._M_t3;\n-        _M_t4=__in._M_t4;\n-        _M_t5=__in._M_t5;\n-        _M_t6=__in._M_t6;\n-        _M_t7=__in._M_t7;\n-        _M_t8=__in._M_t8;\n-        return *this;\n-      }\n-\n-      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n-\t       typename _Up4, typename _Up5, typename _Up6, typename _Up7,\n-\t       typename _Up8>\n-        tuple&\n-        operator=(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7,\n-\t\t\t      _Up8>& __in)\n-        {\n-\t  _M_t0=__in._M_t0;\n-\t  _M_t1=__in._M_t1;\n-\t  _M_t2=__in._M_t2;\n-\t  _M_t3=__in._M_t3;\n-\t  _M_t4=__in._M_t4;\n-\t  _M_t5=__in._M_t5;\n-\t  _M_t6=__in._M_t6;\n-\t  _M_t7=__in._M_t7;\n-\t  _M_t8=__in._M_t8;\n-\t  return *this;\n-        }\n-\n-      template<int __i, typename _Up>\n-        friend class __get_helper;\n-      template<typename, typename, typename, typename, typename, typename,\n-\t       typename, typename, typename, typename>\n-        friend class tuple;\n-  };\n-\n-  /// @brief  Template class tuple\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9>\n-    class tuple\n-    {\n-      _Tp0 _M_t0;\n-      _Tp1 _M_t1;\n-      _Tp2 _M_t2;\n-      _Tp3 _M_t3;\n-      _Tp4 _M_t4;\n-      _Tp5 _M_t5;\n-      _Tp6 _M_t6;\n-      _Tp7 _M_t7;\n-      _Tp8 _M_t8;\n-      _Tp9 _M_t9;\n-\n-    public:\n-      tuple()\n-      { }\n-\n-      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n-\t\t     typename __add_c_ref<_Tp1>::type __in1,\n-\t\t     typename __add_c_ref<_Tp2>::type __in2,\n-\t\t     typename __add_c_ref<_Tp3>::type __in3,\n-\t\t     typename __add_c_ref<_Tp4>::type __in4,\n-\t\t     typename __add_c_ref<_Tp5>::type __in5,\n-\t\t     typename __add_c_ref<_Tp6>::type __in6,\n-\t\t     typename __add_c_ref<_Tp7>::type __in7,\n-\t\t     typename __add_c_ref<_Tp8>::type __in8,\n-\t\t     typename __add_c_ref<_Tp9>::type __in9):\n-        _M_t0(__in0), _M_t1(__in1), _M_t2(__in2), _M_t3(__in3), _M_t4(__in4),\n-        _M_t5(__in5), _M_t6(__in6), _M_t7(__in7), _M_t8(__in8), _M_t9(__in9)\n-      { }\n-\n-      tuple(const tuple& __in):\n-        _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n-        _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5),\n-        _M_t6(__in._M_t6), _M_t7(__in._M_t7), _M_t8(__in._M_t8),\n-        _M_t9(__in._M_t9)\n-      { }\n-\n-      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n-\t       typename _Up4, typename _Up5, typename _Up6, typename _Up7,\n-\t       typename _Up8, typename _Up9>\n-        tuple(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8,\n-\t\t\t  _Up9>& __in):\n-\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n-\t  _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5),\n-\t  _M_t6(__in._M_t6), _M_t7(__in._M_t7), _M_t8(__in._M_t8),\n-\t  _M_t9(__in._M_t9)\n-        { }\n-\n-      tuple&\n-      operator=(const tuple& __in)\n-      {\n-        _M_t0=__in._M_t0;\n-        _M_t1=__in._M_t1;\n-        _M_t2=__in._M_t2;\n-        _M_t3=__in._M_t3;\n-        _M_t4=__in._M_t4;\n-        _M_t5=__in._M_t5;\n-        _M_t6=__in._M_t6;\n-        _M_t7=__in._M_t7;\n-        _M_t8=__in._M_t8;\n-        _M_t9=__in._M_t9;\n-        return *this;\n-      }\n-\n-      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n-\t       typename _Up4, typename _Up5, typename _Up6, typename _Up7,\n-\t       typename _Up8, typename _Up9>\n-        tuple&\n-        operator=(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7,\n-\t\t\t      _Up8, _Up9>& __in)\n-        {\n-\t  _M_t0=__in._M_t0;\n-\t  _M_t1=__in._M_t1;\n-\t  _M_t2=__in._M_t2;\n-\t  _M_t3=__in._M_t3;\n-\t  _M_t4=__in._M_t4;\n-\t  _M_t5=__in._M_t5;\n-\t  _M_t6=__in._M_t6;\n-\t  _M_t7=__in._M_t7;\n-\t  _M_t8=__in._M_t8;\n-\t  _M_t9=__in._M_t9;\n-\t  return *this;\n-        }\n-\n-      template<int __i, typename _Up>\n-        friend class __get_helper;\n-      template<typename, typename, typename, typename, typename, typename,\n-\t       typename, typename, typename, typename>\n-        friend class tuple;\n-  };\n-\n-  // Class used in the implementation of get\n-  template<int __i, typename _Tp>\n-    struct __get_helper;\n-\n-  template<typename _Tp>\n-    struct __get_helper<0, _Tp>\n-    {\n-      static typename __add_ref<typename tuple_element<0, _Tp>::type>::type\n-      get_value(_Tp& __in)\n-      { return __in._M_t0; }\n-\n-      static typename __add_c_ref<typename tuple_element<0, _Tp>::type>::type\n-      get_value(const _Tp& __in)\n-      { return __in._M_t0; }\n-    };\n-\n-  template<typename _Tp>\n-    struct __get_helper<1, _Tp>\n-    {\n-      static typename __add_ref<typename tuple_element<1, _Tp>::type>::type\n-      get_value(_Tp& __in)\n-      { return __in._M_t1; }\n-\n-      static typename __add_c_ref<typename tuple_element<1, _Tp>::type>::type\n-      get_value(const _Tp& __in)\n-      { return __in._M_t1; }\n-    };\n-\n-  template<typename _Tp>\n-    struct __get_helper<2, _Tp>\n-    {\n-      static typename __add_ref<typename tuple_element<2, _Tp>::type>::type\n-      get_value(_Tp& __in)\n-      { return __in._M_t2; }\n-\n-      static typename __add_c_ref<typename tuple_element<2, _Tp>::type>::type\n-      get_value(const _Tp& __in)\n-      { return __in._M_t2; }\n-    };\n-\n-  template<typename _Tp>\n-    struct __get_helper<3, _Tp>\n-    {\n-      static typename __add_ref<typename tuple_element<3, _Tp>::type>::type\n-      get_value(_Tp& __in)\n-      { return __in._M_t3; }\n-\n-      static typename __add_c_ref<typename tuple_element<3, _Tp>::type>::type\n-      get_value(const _Tp& __in)\n-      { return __in._M_t3; }\n-    };\n-\n-  template<typename _Tp>\n-    struct __get_helper<4, _Tp>\n-    {\n-      static typename __add_ref<typename tuple_element<4, _Tp>::type>::type\n-      get_value(_Tp& __in)\n-      { return __in._M_t4; }\n-\n-      static typename __add_c_ref<typename tuple_element<4, _Tp>::type>::type\n-      get_value(const _Tp& __in)\n-      { return __in._M_t4; }\n-    };\n-\n-  template<typename _Tp>\n-    struct __get_helper<5, _Tp>\n-    {\n-      static typename __add_ref<typename tuple_element<5, _Tp>::type>::type\n-      get_value(_Tp& __in)\n-      { return __in._M_t5; }\n-\n-      static typename __add_c_ref<typename tuple_element<5, _Tp>::type>::type\n-      get_value(const _Tp& __in)\n-      { return __in._M_t5; }\n-    };\n-\n-  template<typename _Tp>\n-    struct __get_helper<6, _Tp>\n-    {\n-      static typename __add_ref<typename tuple_element<6, _Tp>::type>::type\n-      get_value(_Tp& __in)\n-      { return __in._M_t6; }\n-\n-      static typename __add_c_ref<typename tuple_element<6, _Tp>::type>::type\n-      get_value(const _Tp& __in)\n-      { return __in._M_t6; }\n-    };\n-\n-  template<typename _Tp>\n-    struct __get_helper<7, _Tp>\n-    {\n-      static typename __add_ref<typename tuple_element<7, _Tp>::type>::type\n-      get_value(_Tp& __in)\n-      { return __in._M_t7; }\n-\n-      static typename __add_c_ref<typename tuple_element<7, _Tp>::type>::type\n-      get_value(const _Tp& __in)\n-      { return __in._M_t7; }\n-    };\n-\n-  template<typename _Tp>\n-    struct __get_helper<8, _Tp>\n-    {\n-      static typename __add_ref<typename tuple_element<8, _Tp>::type>::type\n-      get_value(_Tp& __in)\n-      { return __in._M_t8; }\n-\n-      static typename __add_c_ref<typename tuple_element<8, _Tp>::type>::type\n-      get_value(const _Tp& __in)\n-      { return __in._M_t8; }\n-    };\n-\n-  template<typename _Tp>\n-    struct __get_helper<9, _Tp>\n-    {\n-      static typename __add_ref<typename tuple_element<9, _Tp>::type>::type\n-      get_value(_Tp& __in)\n-      { return __in._M_t9; }\n-\n-      static typename __add_c_ref<typename tuple_element<9, _Tp>::type>::type\n-      get_value(const _Tp& __in)\n-      { return __in._M_t9; }\n-    };\n-\n-  // Returns a reference to the ith element of a tuple.\n-  // Any const or non-const ref elements are returned with their original type.\n-  template<int __i, typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t\t    typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t\t    typename _Tp8, typename _Tp9>\n-    typename __add_ref<typename tuple_element<__i, tuple<_Tp0, _Tp1, _Tp2,\n-\t\t\t\t\t\t\t _Tp3, _Tp4, _Tp5,\n-\t\t\t\t\t\t\t _Tp6, _Tp7, _Tp8,\n-\t\t\t\t\t\t\t _Tp9> >::type>::type\n-    get(tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8,\n-\t      _Tp9>& __t)\n-    {\n-      return __get_helper<__i, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n-\t\t\t\t     _Tp7, _Tp8, _Tp9> >::get_value(__t);\n-    }\n-\n-  // Returns a const reference to the ith element of a tuple.\n-  // Any const or non-const ref elements are returned with their original type.\n-  template<int __i, typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t\t    typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t\t    typename _Tp8, typename _Tp9>\n-    typename __add_c_ref<typename tuple_element<__i, tuple<_Tp0, _Tp1, _Tp2,\n-\t\t\t\t\t\t\t   _Tp3, _Tp4, _Tp5,\n-\t\t\t\t\t\t\t   _Tp6, _Tp7, _Tp8,\n-\t\t\t\t\t\t\t   _Tp9> >::type>::type\n-    get(const tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8,\n-\t\t    _Tp9>& __t)\n-    {\n-      return __get_helper<__i, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n-\t\t\t\t     _Tp7, _Tp8, _Tp9> >::get_value(__t);\n-    }\n-\n-  // This class helps construct the various comparison operations on tuples\n-  template<int __check_equal_size, int __i, int __j, typename _Tp, typename _Up>\n-    struct __tuple_compare;\n-\n-  template<int __i, int __j, typename _Tp, typename _Up>\n-    struct __tuple_compare<0, __i, __j, _Tp, _Up>\n-    {\n-      static bool __eq(const _Tp& __t, const _Up& __u)\n-      {\n-        return get<__i>(__t) == get<__i>(__u) &&\n-           __tuple_compare<0, __i+1, __j, _Tp, _Up>::__eq(__t, __u);\n-      }\n-      static bool __less(const _Tp& __t, const _Up& __u)\n-      {\n-        return (get<__i>(__t) < get<__i>(__u)) || !(get<__i>(__u) < get<__i>(__t)) &&\n-           __tuple_compare<0, __i+1, __j, _Tp, _Up>::__less(__t, __u);\n-      }\n-    };\n-\n-  template<int __i, typename _Tp, typename _Up>\n-    struct __tuple_compare<0, __i, __i, _Tp, _Up>\n-    {\n-      static bool __eq(const _Tp&, const _Up&)\n-      { return true; }\n-      static bool __less(const _Tp&, const _Up&)\n-      { return false; }\n-    };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9, typename _Up0, typename _Up1,\n-\t   typename _Up2, typename _Up3, typename _Up4, typename _Up5,\n-\t   typename _Up6, typename _Up7, typename _Up8, typename _Up9>\n-  bool\n-  operator==(const tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8, _Tp9>& __t,\n-\t     const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8, _Up9>& __u)\n-  {\n-    typedef tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8,\n-\t\t  _Tp9> _Tp;\n-    typedef tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8,\n-\t\t  _Up9> _Up;\n-    return __tuple_compare<tuple_size<_Tp>::value -\n-     tuple_size<_Tp>::value, 0,\n-      tuple_size<_Tp>::value, _Tp, _Up>::__eq(__t, __u);\n-  }\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9, typename _Up0, typename _Up1,\n-\t   typename _Up2, typename _Up3, typename _Up4, typename _Up5,\n-\t   typename _Up6, typename _Up7, typename _Up8, typename _Up9>\n-  bool\n-  operator<(const tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8, _Tp9>& __t,\n-\t    const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8, _Up9>& __u)\n-  {\n-    typedef tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8,\n-\t\t  _Tp9> _Tp;\n-    typedef tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8,\n-\t\t  _Up9> _Up;\n-    return __tuple_compare<tuple_size<_Tp>::value -\n-     tuple_size<_Tp>::value, 0,\n-      tuple_size<_Tp>::value, _Tp, _Up>::__less(__t, __u);\n-  }\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9, typename _Up0, typename _Up1,\n-\t   typename _Up2, typename _Up3, typename _Up4, typename _Up5,\n-\t   typename _Up6, typename _Up7, typename _Up8, typename _Up9>\n-  bool\n-  operator!=(const tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8, _Tp9>& __t,\n-\t     const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8, _Up9>& __u)\n-  {\n-      return !(__t == __u);\n-  }\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9, typename _Up0, typename _Up1,\n-\t   typename _Up2, typename _Up3, typename _Up4, typename _Up5,\n-\t   typename _Up6, typename _Up7, typename _Up8, typename _Up9>\n-  bool\n-  operator>(const tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8, _Tp9>& __t,\n-\t    const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8, _Up9>& __u)\n-  {\n-      return __u < __t;\n-  }\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9, typename _Up0, typename _Up1,\n-\t   typename _Up2, typename _Up3, typename _Up4, typename _Up5,\n-\t   typename _Up6, typename _Up7, typename _Up8, typename _Up9>\n-  bool\n-  operator<=(const tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8, _Tp9>& __t,\n-\t     const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8, _Up9>& __u)\n-  {\n-      return !(__u < __t);\n-  }\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9, typename _Up0, typename _Up1,\n-\t   typename _Up2, typename _Up3, typename _Up4, typename _Up5,\n-\t   typename _Up6, typename _Up7, typename _Up8, typename _Up9>\n-  bool\n-  operator>=(const tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8, _Tp9>& __t,\n-\t     const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8, _Up9>& __u)\n-  {\n-      return !(__t < __u);\n-  }\n-\n-  // Helper which adds a reference to a type when given a reference_wrapper\n-  template<typename _Tp>\n-    struct __strip_reference_wrapper\n-    {\n-        typedef _Tp __type;\n-    };\n-\n-  template<typename _Tp>\n-    struct __strip_reference_wrapper<reference_wrapper<_Tp> >\n-    {\n-      typedef _Tp& __type;\n-    };\n-\n-  template<typename _Tp>\n-    struct __strip_reference_wrapper<const reference_wrapper<_Tp> >\n-    {\n-        typedef _Tp& __type;\n-    };\n-\n-  template<typename _Tp0 = _NullClass, typename _Tp1 = _NullClass,\n-\t   typename _Tp2 = _NullClass, typename _Tp3 = _NullClass,\n-\t   typename _Tp4 = _NullClass, typename _Tp5 = _NullClass,\n-\t   typename _Tp6 = _NullClass, typename _Tp7 = _NullClass,\n-\t   typename _Tp8 = _NullClass, typename _Tp9 = _NullClass>\n-    struct __stripped_tuple_type\n-    {\n-      typedef tuple<typename __strip_reference_wrapper<_Tp0>::__type,\n-\t\t    typename __strip_reference_wrapper<_Tp1>::__type,\n-\t\t    typename __strip_reference_wrapper<_Tp2>::__type,\n-\t\t    typename __strip_reference_wrapper<_Tp3>::__type,\n-\t\t    typename __strip_reference_wrapper<_Tp4>::__type,\n-\t\t    typename __strip_reference_wrapper<_Tp5>::__type,\n-\t\t    typename __strip_reference_wrapper<_Tp6>::__type,\n-\t\t    typename __strip_reference_wrapper<_Tp7>::__type,\n-\t\t    typename __strip_reference_wrapper<_Tp8>::__type,\n-\t\t    typename __strip_reference_wrapper<_Tp9>::__type>      __type;\n-    };\n-\n-  tuple<>\n-  make_tuple()\n-  { return tuple<>(); }\n-\n-  template< typename _Tp0>\n-    typename __stripped_tuple_type< _Tp0>::__type\n-    make_tuple( _Tp0 __t0)\n-    {\n-      return typename  __stripped_tuple_type< _Tp0>::\n-        __type( __t0);\n-    }\n-\n-  template<typename _Tp0, typename _Tp1>\n-    typename __stripped_tuple_type<_Tp0, _Tp1>::__type\n-    make_tuple(_Tp0 __t0, _Tp1 __t1)\n-    {\n-      return typename  __stripped_tuple_type<_Tp0, _Tp1>::\n-        __type(__t0, __t1);\n-    }\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2>\n-    typename __stripped_tuple_type<_Tp0, _Tp1, _Tp2>::__type\n-    make_tuple(_Tp0 __t0, _Tp1 __t1, _Tp2 __t2)\n-    {\n-      return typename  __stripped_tuple_type<_Tp0, _Tp1, _Tp2>::\n-        __type(__t0, __t1, __t2);\n-    }\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3>\n-    typename __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3>::__type\n-    make_tuple(_Tp0 __t0, _Tp1 __t1, _Tp2 __t2, _Tp3 __t3)\n-    {\n-      return typename  __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3>::\n-        __type(__t0, __t1, __t2, __t3);\n-    }\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4>\n-    typename __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4>::__type\n-    make_tuple(_Tp0 __t0, _Tp1 __t1, _Tp2 __t2, _Tp3 __t3, _Tp4 __t4)\n-    {\n-      return typename  __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4>::\n-        __type(__t0, __t1, __t2, __t3, __t4);\n-    }\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5>\n-    typename __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4,\n-\t\t\t\t   _Tp5>::__type\n-    make_tuple(_Tp0 __t0, _Tp1 __t1, _Tp2 __t2, _Tp3 __t3, _Tp4 __t4,\n-\t       _Tp5 __t5)\n-    {\n-      return typename  __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4,\n-\t\t\t\t\t     _Tp5>::\n-        __type(__t0, __t1, __t2, __t3, __t4, __t5);\n-    }\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6>\n-    typename __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5,\n-\t\t\t\t   _Tp6>::__type\n-    make_tuple(_Tp0 __t0, _Tp1 __t1, _Tp2 __t2, _Tp3 __t3, _Tp4 __t4,\n-\t       _Tp5 __t5, _Tp6 __t6)\n-    {\n-      return typename  __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4,\n-\t\t\t\t\t     _Tp5, _Tp6>::\n-        __type(__t0, __t1, __t2, __t3, __t4, __t5, __t6);\n-    }\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7>\n-    typename __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n-\t\t\t\t   _Tp7>::__type\n-    make_tuple(_Tp0 __t0, _Tp1 __t1, _Tp2 __t2, _Tp3 __t3, _Tp4 __t4,\n-\t       _Tp5 __t5, _Tp6 __t6, _Tp7 __t7)\n-    {\n-      return typename  __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4,\n-\t\t\t\t\t     _Tp5, _Tp6, _Tp7>::\n-        __type(__t0, __t1, __t2, __t3, __t4, __t5, __t6, __t7);\n-    }\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8>\n-    typename __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n-\t\t\t\t   _Tp7, _Tp8>::__type\n-    make_tuple(_Tp0 __t0, _Tp1 __t1, _Tp2 __t2, _Tp3 __t3, _Tp4 __t4,\n-\t       _Tp5 __t5, _Tp6 __t6, _Tp7 __t7, _Tp8 __t8)\n-    {\n-      return typename  __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4,\n-\t\t\t\t\t     _Tp5, _Tp6, _Tp7, _Tp8>::\n-        __type(__t0, __t1, __t2, __t3, __t4, __t5, __t6, __t7, __t8);\n-    }\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9>\n-    typename __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n-\t\t\t\t   _Tp7, _Tp8, _Tp9>::__type\n-    make_tuple(_Tp0 __t0, _Tp1 __t1, _Tp2 __t2, _Tp3 __t3, _Tp4 __t4,\n-\t       _Tp5 __t5, _Tp6 __t6, _Tp7 __t7, _Tp8 __t8, _Tp9 __t9)\n-    {\n-      return typename  __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4,\n-\t\t\t\t\t     _Tp5, _Tp6, _Tp7, _Tp8, _Tp9>::\n-        __type(__t0, __t1, __t2, __t3, __t4, __t5, __t6, __t7, __t8, __t9);\n-    }\n-\n-  // A class (and instance) which can be used in 'tie' when an element\n-  // of a tuple is not required\n-  struct swallow_assign\n-  {\n-    template<class T>\n-    swallow_assign&\n-      operator=(const T&)\n-      { return *this; }\n-  };\n-\n-  // TODO: Put this in some kind of shared file.\n-  namespace\n-  {\n-    swallow_assign ignore;\n-  };\n-\n-\n-  // Forms a tuple of references to a list of variables.\n-  template< typename _Tp0>\n-    tuple< _Tp0&>\n-    tie( _Tp0& __t0)\n-    {\n-      return make_tuple( ref(__t0));\n-    };\n-\n-  template<typename _Tp0, typename _Tp1>\n-    tuple<_Tp0&, _Tp1&>\n-    tie(_Tp0& __t0, _Tp1& __t1)\n-    {\n-      return make_tuple(ref(__t0), ref(__t1));\n-    };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2>\n-    tuple<_Tp0&, _Tp1&, _Tp2&>\n-    tie(_Tp0& __t0, _Tp1& __t1, _Tp2& __t2)\n-    {\n-      return make_tuple(ref(__t0), ref(__t1), ref(__t2));\n-    };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3>\n-    tuple<_Tp0&, _Tp1&, _Tp2&, _Tp3&>\n-    tie(_Tp0& __t0, _Tp1& __t1, _Tp2& __t2, _Tp3& __t3)\n-    {\n-      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3));\n-    };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4>\n-    tuple<_Tp0&, _Tp1&, _Tp2&, _Tp3&, _Tp4&>\n-    tie(_Tp0& __t0, _Tp1& __t1, _Tp2& __t2, _Tp3& __t3, _Tp4& __t4)\n-    {\n-      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3),\n-\t\t        ref(__t4));\n-    };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5>\n-    tuple<_Tp0&, _Tp1&, _Tp2&, _Tp3&, _Tp4&, _Tp5&>\n-    tie(_Tp0& __t0, _Tp1& __t1, _Tp2& __t2, _Tp3& __t3, _Tp4& __t4,\n-        _Tp5& __t5)\n-    {\n-      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3), ref(__t4),\n-\t\t        ref(__t5));\n-    };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6>\n-    tuple<_Tp0&, _Tp1&, _Tp2&, _Tp3&, _Tp4&, _Tp5&, _Tp6&>\n-    tie(_Tp0& __t0, _Tp1& __t1, _Tp2& __t2, _Tp3& __t3, _Tp4& __t4, _Tp5& __t5,\n-        _Tp6& __t6)\n-    {\n-      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3), ref(__t4),\n-\t\t        ref(__t5), ref(__t6));\n-    };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7>\n-    tuple<_Tp0&, _Tp1&, _Tp2&, _Tp3&, _Tp4&, _Tp5&, _Tp6&, _Tp7&>\n-    tie(_Tp0& __t0, _Tp1& __t1, _Tp2& __t2, _Tp3& __t3, _Tp4& __t4, _Tp5& __t5,\n-        _Tp6& __t6, _Tp7& __t7)\n-    {\n-      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3), ref(__t4),\n-\t\t        ref(__t5), ref(__t6), ref(__t7));\n-    };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8>\n-    tuple<_Tp0&, _Tp1&, _Tp2&, _Tp3&, _Tp4&, _Tp5&, _Tp6&, _Tp7&, _Tp8&>\n-    tie(_Tp0& __t0, _Tp1& __t1, _Tp2& __t2, _Tp3& __t3, _Tp4& __t4, _Tp5& __t5,\n-        _Tp6& __t6, _Tp7& __t7, _Tp8& __t8)\n-    {\n-      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3), ref(__t4),\n-\t\t        ref(__t5), ref(__t6), ref(__t7), ref(__t8));\n-    };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n-\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n-\t   typename _Tp8, typename _Tp9>\n-    tuple<_Tp0&, _Tp1&, _Tp2&, _Tp3&, _Tp4&, _Tp5&, _Tp6&, _Tp7&, _Tp8&,\n-\t  _Tp9&>\n-    tie(_Tp0& __t0, _Tp1& __t1, _Tp2& __t2, _Tp3& __t3, _Tp4& __t4, _Tp5& __t5,\n-        _Tp6& __t6, _Tp7& __t7, _Tp8& __t8, _Tp9& __t9)\n-    {\n-      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3), ref(__t4),\n-\t\t        ref(__t5), ref(__t6), ref(__t7), ref(__t8),\n-\t\t        ref(__t9));\n-    };\n-\n+ // An implementation specific class which is used in the tuple class\n+ // when the tuple is not maximum possible size.\n+ struct _NullClass { };\n+\n+ template<typename _Tp0 = _NullClass, typename _Tp1 = _NullClass,\n+          typename _Tp2 = _NullClass, typename _Tp3 = _NullClass,\n+          typename _Tp4 = _NullClass, typename _Tp5 = _NullClass,\n+          typename _Tp6 = _NullClass, typename _Tp7 = _NullClass,\n+          typename _Tp8 = _NullClass, typename _Tp9 = _NullClass>\n+   class tuple;\n+\n+ /// Gives the type of the ith element of a given tuple type.\n+ template<int __i, typename _Tp>\n+   struct tuple_element;\n+\n+ /// Finds the size of a given tuple type.\n+ template<typename _Tp>\n+   struct tuple_size;\n+\n+ // Adds a const reference to a non-reference type.\n+ template<typename _Tp>\n+   struct __add_c_ref\n+   { typedef const _Tp& type; };\n+\n+ template<typename _Tp>\n+   struct __add_c_ref<_Tp&>\n+   { typedef _Tp& type; };\n+\n+ // Adds a reference to a non-reference type.\n+ template<typename _Tp>\n+   struct __add_ref\n+   { typedef _Tp& type; };\n+\n+ template<typename _Tp>\n+   struct __add_ref<_Tp&>\n+   { typedef _Tp& type; };\n+\n+ // Class used in the implementation of get\n+ template<int __i, typename _Tp>\n+   struct __get_helper;\n+\n+ // Returns a const reference to the ith element of a tuple.\n+ // Any const or non-const ref elements are returned with their original type.\n+   template<int __i, typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+                   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+                   typename _Tp8, typename _Tp9>\n+   typename __add_ref<typename tuple_element<__i, tuple<_Tp0, _Tp1, _Tp2,\n+                                                        _Tp3, _Tp4, _Tp5,\n+                                                        _Tp6, _Tp7, _Tp8,\n+                                                        _Tp9> >::type>::type\n+   get(tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8,\n+             _Tp9>& __t)\n+   {\n+     return __get_helper<__i, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+                                    _Tp7, _Tp8, _Tp9> >::get_value(__t);\n+   }\n+\n+ template<int __i, typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+                   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+                   typename _Tp8, typename _Tp9>\n+   typename __add_c_ref<typename tuple_element<__i, tuple<_Tp0, _Tp1, _Tp2,\n+                                                          _Tp3, _Tp4, _Tp5,\n+                                                          _Tp6, _Tp7, _Tp8,\n+                                                          _Tp9> >::type>::type\n+   get(const tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8,\n+                   _Tp9>& __t)\n+   {\n+     return __get_helper<__i, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+                                    _Tp7, _Tp8, _Tp9> >::get_value(__t);\n+   }\n+\n+ // This class helps construct the various comparison operations on tuples\n+ template<int __check_equal_size, int __i, int __j, typename _Tp, typename _Up>\n+   struct __tuple_compare;\n+\n+ template<int __i, int __j, typename _Tp, typename _Up>\n+   struct __tuple_compare<0, __i, __j, _Tp, _Up>\n+   {\n+     static bool __eq(const _Tp& __t, const _Up& __u)\n+     {\n+       return get<__i>(__t) == get<__i>(__u) &&\n+          __tuple_compare<0, __i+1, __j, _Tp, _Up>::__eq(__t, __u);\n+     }\n+     static bool __less(const _Tp& __t, const _Up& __u)\n+     {\n+       return (get<__i>(__t) < get<__i>(__u)) || !(get<__i>(__u) < get<__i>(__t)) &&\n+          __tuple_compare<0, __i+1, __j, _Tp, _Up>::__less(__t, __u);\n+     }\n+   };\n+\n+ template<int __i, typename _Tp, typename _Up>\n+   struct __tuple_compare<0, __i, __i, _Tp, _Up>\n+   {\n+     static bool __eq(const _Tp&, const _Up&)\n+     { return true; }\n+     static bool __less(const _Tp&, const _Up&)\n+     { return false; }\n+   };\n+\n+ template<typename _T1, typename _T2, typename _T3, typename _T4, typename _T5,\n+          typename _T6, typename _T7, typename _T8, typename _T9, typename _T10,\n+          typename _U1, typename _U2, typename _U3, typename _U4, typename _U5,\n+          typename _U6, typename _U7, typename _U8, typename _U9, typename _U10>\n+ bool\n+ operator==(const tuple<_T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10>& __t,\n+            const tuple<_U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, _U9, _U10>& __u)\n+ {\n+   typedef tuple<_T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10> _Tp;\n+   typedef tuple<_U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8,_U9, _U10> _Up;\n+   return __tuple_compare<tuple_size<_Tp>::value - tuple_size<_Tp>::value, 0,\n+                          tuple_size<_Tp>::value, _Tp, _Up>::__eq(__t, __u);\n+ }\n+\n+ template<typename _T1, typename _T2, typename _T3, typename _T4, typename _T5,\n+          typename _T6, typename _T7, typename _T8, typename _T9, typename _T10,\n+          typename _U1, typename _U2, typename _U3, typename _U4, typename _U5,\n+          typename _U6, typename _U7, typename _U8, typename _U9, typename _U10>\n+ bool\n+ operator<(const tuple<_T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10>& __t,\n+           const tuple<_U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, _U9, _U10>& __u)\n+ {\n+   typedef tuple<_T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10> _Tp;\n+   typedef tuple<_U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8,_U9, _U10> _Up;\n+   return __tuple_compare<tuple_size<_Tp>::value - tuple_size<_Tp>::value, 0,\n+                          tuple_size<_Tp>::value, _Tp, _Up>::__less(__t, __u);\n+ }\n+\n+ template<typename _T1, typename _T2, typename _T3, typename _T4, typename _T5,\n+          typename _T6, typename _T7, typename _T8, typename _T9, typename _T10,\n+          typename _U1, typename _U2, typename _U3, typename _U4, typename _U5,\n+          typename _U6, typename _U7, typename _U8, typename _U9, typename _U10>\n+ bool\n+ operator!=(const tuple<_T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10>& __t,\n+            const tuple<_U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, _U9, _U10>& __u)\n+ { return !(__t == __u); }\n+\n+ template<typename _T1, typename _T2, typename _T3, typename _T4, typename _T5,\n+          typename _T6, typename _T7, typename _T8, typename _T9, typename _T10,\n+          typename _U1, typename _U2, typename _U3, typename _U4, typename _U5,\n+          typename _U6, typename _U7, typename _U8, typename _U9, typename _U10>\n+ bool\n+ operator>(const tuple<_T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10>& __t,\n+           const tuple<_U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, _U9, _U10>& __u)\n+ { return __u < __t; }\n+\n+ template<typename _T1, typename _T2, typename _T3, typename _T4, typename _T5,\n+          typename _T6, typename _T7, typename _T8, typename _T9, typename _T10,\n+          typename _U1, typename _U2, typename _U3, typename _U4, typename _U5,\n+          typename _U6, typename _U7, typename _U8, typename _U9, typename _U10>\n+ bool\n+ operator<=(const tuple<_T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10>& __t,\n+            const tuple<_U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, _U9, _U10>& __u)\n+ { return !(__u < __t); }\n+\n+ template<typename _T1, typename _T2, typename _T3, typename _T4, typename _T5,\n+          typename _T6, typename _T7, typename _T8, typename _T9, typename _T10,\n+          typename _U1, typename _U2, typename _U3, typename _U4, typename _U5,\n+          typename _U6, typename _U7, typename _U8, typename _U9, typename _U10>\n+ bool\n+ operator>=(const tuple<_T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10>& __t,\n+            const tuple<_U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, _U9, _U10>& __u)\n+ { return !(__t < __u); }\n+\n+ // Helper which adds a reference to a type when given a reference_wrapper\n+ template<typename _Tp>\n+   struct __strip_reference_wrapper\n+   {\n+       typedef _Tp __type;\n+   };\n+\n+ template<typename _Tp>\n+   struct __strip_reference_wrapper<reference_wrapper<_Tp> >\n+   {\n+     typedef _Tp& __type;\n+   };\n+\n+ template<typename _Tp>\n+   struct __strip_reference_wrapper<const reference_wrapper<_Tp> >\n+   {\n+       typedef _Tp& __type;\n+   };\n+\n+ template<typename _Tp0 = _NullClass, typename _Tp1 = _NullClass,\n+          typename _Tp2 = _NullClass, typename _Tp3 = _NullClass,\n+          typename _Tp4 = _NullClass, typename _Tp5 = _NullClass,\n+          typename _Tp6 = _NullClass, typename _Tp7 = _NullClass,\n+          typename _Tp8 = _NullClass, typename _Tp9 = _NullClass>\n+   struct __stripped_tuple_type\n+   {\n+     typedef tuple<typename __strip_reference_wrapper<_Tp0>::__type,\n+                   typename __strip_reference_wrapper<_Tp1>::__type,\n+                   typename __strip_reference_wrapper<_Tp2>::__type,\n+                   typename __strip_reference_wrapper<_Tp3>::__type,\n+                   typename __strip_reference_wrapper<_Tp4>::__type,\n+                   typename __strip_reference_wrapper<_Tp5>::__type,\n+                   typename __strip_reference_wrapper<_Tp6>::__type,\n+                   typename __strip_reference_wrapper<_Tp7>::__type,\n+                   typename __strip_reference_wrapper<_Tp8>::__type,\n+                   typename __strip_reference_wrapper<_Tp9>::__type>      __type;\n+   };\n+\n+ // A class (and instance) which can be used in 'tie' when an element\n+ // of a tuple is not required\n+ struct swallow_assign\n+ {\n+   template<class T>\n+   swallow_assign&\n+     operator=(const T&)\n+     { return *this; }\n+ };\n+\n+ // TODO: Put this in some kind of shared file.\n+ namespace\n+ {\n+   swallow_assign ignore;\n+ };\n+\n+#define _GLIBCXX_CAT(x,y) _GLIBCXX_CAT2(x,y)\n+#define _GLIBCXX_CAT2(x,y) x##y\n+#define _SHORT_REPEAT\n+#define _GLIBCXX_REPEAT_HEADER <tr1/tuple_iterate.h>\n+#include <tr1/repeat.h>\n+#undef _GLIBCXX_REPEAT_HEADER\n+#undef _SHORT_REPEAT\n }\n }\n \n-#endif\n+#include <tr1/functional>\n \n+#endif"}, {"sha": "df572764b4d0f1499674cc24515441ea9b0169a0", "filename": "libstdc++-v3/include/tr1/tuple_iterate.h", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_iterate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_iterate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_iterate.h?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -0,0 +1,158 @@\n+// class template tuple -*- C++ -*-\n+\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+// Chris Jefferson <chris@bubblescope.net>\n+\n+/// @brief class tuple_size\n+template<_GLIBCXX_TEMPLATE_PARAMS>\n+  struct tuple_size<tuple<_GLIBCXX_TEMPLATE_ARGS> >\n+  { static const int value = _GLIBCXX_NUM_ARGS; };\n+\n+template<_GLIBCXX_TEMPLATE_PARAMS>\n+#ifdef _GLIBCXX_LAST_INCLUDE\n+  class tuple\n+#else\n+  class tuple<_GLIBCXX_TEMPLATE_ARGS>\n+#endif\n+  {\n+    _GLIBCXX_BIND_MEMBERS\n+\n+  public:\n+    tuple() \n+    { }\n+\n+#if _GLIBCXX_NUM_ARGS == 2\n+template<class _U1, class _U2>\n+        tuple(const std::pair<_U1, _U2>& __u):\n+           _M_arg1(__u.first), _M_arg2(__u.second)\n+        { }\n+\n+#endif\n+\n+#if _GLIBCXX_NUM_ARGS > 0\n+    explicit tuple(_GLIBCXX_TUPLE_ADD_CREF) :\n+      _GLIBCXX_BIND_MEMBERS_INIT\n+    { }\n+\n+    template<_GLIBCXX_TEMPLATE_PARAMS_U>\n+      tuple(const tuple<_GLIBCXX_TEMPLATE_ARGS_U>& __in) :\n+      _GLIBCXX_TUPLE_COPY_INIT\n+    { }\n+\n+\n+    template<_GLIBCXX_TEMPLATE_PARAMS_U>\n+      tuple&\n+      operator=(const tuple<_GLIBCXX_TEMPLATE_ARGS_U>& __in)\n+      {\n+\t_GLIBCXX_TUPLE_ASSIGN\n+\treturn *this;\n+      }\n+\n+    tuple(const tuple& __in) :\n+      _GLIBCXX_TUPLE_COPY_INIT\n+    { }\n+\n+#else\n+\n+    tuple(const tuple& __in)\n+    { }\n+\n+#endif\n+\n+    tuple&\n+    operator=(const tuple& __in)\n+    {\n+      _GLIBCXX_TUPLE_ASSIGN\n+\treturn *this;\n+    }\n+\n+    template<int __i, typename __Type>\n+      friend class __get_helper;\n+\n+    template<typename, typename, typename, typename, typename,\n+             typename, typename, typename, typename, typename>\n+      friend class tuple;\n+  };\n+\n+#ifndef _GLIBCXX_LAST_INCLUDE\n+\n+template<typename _Tp>\n+    struct __get_helper<_GLIBCXX_NUM_ARGS, _Tp>\n+    {\n+      static typename __add_ref<typename tuple_element<_GLIBCXX_NUM_ARGS, \n+\t                                               _Tp>::type>::type\n+      get_value(_Tp& __in)\n+      { return __in._GLIBCXX_CAT(_M_arg,_GLIBCXX_NUM_ARGS_PLUS_1); }\n+\n+      static typename __add_c_ref<typename tuple_element<_GLIBCXX_NUM_ARGS,\n+\t                                                 _Tp>::type>::type\n+      get_value(const _Tp& __in)\n+      { return __in._GLIBCXX_CAT(_M_arg,_GLIBCXX_NUM_ARGS_PLUS_1); }\n+    };\n+\n+/// @brief class tuple_element \n+template<typename _T1, typename _T2, typename _T3, typename _T4, \n+         typename _T5, typename _T6, typename _T7, typename _T8, \n+         typename _T9, typename _T10>\n+   struct tuple_element<_GLIBCXX_NUM_ARGS, tuple<_T1, _T2, _T3, _T4, \n+                                                _T5, _T6, _T7, _T8, _T9, \n+                                                _T10> >\n+  { typedef _GLIBCXX_CAT(_T,_GLIBCXX_NUM_ARGS_PLUS_1) type; };\n+\n+#endif\n+#if _GLIBCXX_NUM_ARGS == 0\n+\n+tuple<>\n+inline make_tuple()\n+{ return tuple<>(); }\n+\n+inline tuple<>\n+tie()\n+{ return tuple<>(); }\n+#else\n+\n+template<_GLIBCXX_TEMPLATE_PARAMS>\n+  typename __stripped_tuple_type<_GLIBCXX_TEMPLATE_ARGS>::__type\n+  make_tuple(_GLIBCXX_PARAMS)\n+  { \n+    return typename __stripped_tuple_type<_GLIBCXX_TEMPLATE_ARGS>::\n+      __type(_GLIBCXX_ARGS);\n+  }\n+\n+template<_GLIBCXX_TEMPLATE_PARAMS>\n+  tuple<_GLIBCXX_REF_TEMPLATE_ARGS>\n+  tie(_GLIBCXX_REF_PARAMS)\n+  { return make_tuple(_GLIBCXX_REF_WRAP_PARAMS); }\n+#endif\n+"}, {"sha": "52b11d28332b0b439bc201a123df3fb98f636500", "filename": "libstdc++-v3/scripts/gen_bind_includers.pl", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Fscripts%2Fgen_bind_includers.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Fscripts%2Fgen_bind_includers.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Fgen_bind_includers.pl?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -0,0 +1,30 @@\n+#!/usr/bin/perl -w\n+use English;\n+\n+$max = shift @ARGV;\n+\n+$template_params = \"typename _U1\";\n+$template_args = \"_U1\";\n+$params = \"_U1& __u1\";\n+$args = \"__u1\";\n+\n+for ($num_args = 2; $num_args <= $max; ++$num_args) {\n+  $template_params .= \", typename _U$num_args\";\n+  $template_args .= \", _U$num_args\";\n+  $params .= \", _U$num_args& __u$num_args\";\n+  $args .= \", __u$num_args\";\n+  print \"#define _GLIBCXX_BIND_NUM_ARGS $num_args\\n\";\n+  print \"#define _GLIBCXX_BIND_COMMA ,\\n\";\n+  print \"#define _GLIBCXX_BIND_TEMPLATE_PARAMS $template_params\\n\";\n+  print \"#define _GLIBCXX_BIND_TEMPLATE_ARGS $template_args\\n\";\n+  print \"#define _GLIBCXX_BIND_PARAMS $params\\n\";\n+  print \"#define _GLIBCXX_BIND_ARGS $args\\n\";\n+  print \"#include _GLIBCXX_BIND_REPEAT_HEADER\\n\";\n+  print \"#undef _GLIBCXX_BIND_ARGS\\n\";\n+  print \"#undef _GLIBCXX_BIND_PARAMS\\n\";\n+  print \"#undef _GLIBCXX_BIND_TEMPLATE_ARGS\\n\";\n+  print \"#undef _GLIBCXX_BIND_TEMPLATE_PARAMS\\n\";\n+  print \"#undef _GLIBCXX_BIND_COMMA\\n\";\n+  print \"#undef _GLIBCXX_BIND_NUM_ARGS\\n\";\n+  print \"\\n\";\n+}"}, {"sha": "62ab0f2739dcf637dc0582fe629f7af3ebbab974", "filename": "libstdc++-v3/scripts/gen_includers.pl", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Fscripts%2Fgen_includers.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Fscripts%2Fgen_includers.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Fgen_includers.pl?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -0,0 +1,107 @@\n+#!/usr/bin/perl -w\n+use English;\n+\n+$max = shift @ARGV;\n+\n+$template_params = \"typename _T1\";\n+$template_args = \"_T1\";\n+$params = \"_T1 __a1\";\n+$ref_params = \"_T1& __a1\";\n+$args = \"__a1\";\n+$bind_members = \"_T1 _M_arg1;\";\n+$bind_members_init = \"_M_arg1(__a1)\";\n+$mu_get_tuple_args = \"::std::tr1::get<0>(__tuple)\";\n+$bind_v_template_args = \"typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\";\n+$bind_v_args = \"_Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\";\n+$tuple_add_cref = \"typename __add_c_ref<_T1>::type __a1\";\n+$tuple_copy_init = \"_M_arg1(__in._M_arg1)\";\n+$tuple_assign = \"_M_arg1 = __in._M_arg1;\";\n+$template_params_u = \"typename _U1\";\n+$template_args_u = \"_U1\";\n+$ref_wrap_params = \"ref(__a1)\";\n+$ref_template_args = \"_T1&\";\n+for ($num_args = 2; $num_args <= $max; ++$num_args) {\n+  $prev_args = $num_args - 1;\n+  $next_args = $num_args + 1;\n+  $template_params_shifted = $template_params;\n+  $template_args_shifted = $template_args;\n+  $params_shifted = $params;\n+  $args_shifted = $args;\n+  $template_params .= \", typename _T$num_args\";\n+  $template_args .= \", _T$num_args\";\n+  $params .= \", _T$num_args __a$num_args\";\n+  $ref_params .=\", _T$num_args& __a$num_args\";\n+  $args .= \", __a$num_args\";\n+  $bind_members .= \" _T$num_args _M_arg$num_args;\";\n+  $bind_members_init .= \", _M_arg$num_args(__a$num_args)\";\n+  $mu_get_tuple_args .= \", ::std::tr1::get<$prev_args>(__tuple)\";\n+  $bind_v_template_args .= \", typename result_of<_Mu<_T$num_args> _CV(_T$num_args, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\";\n+  $bind_v_args .= \", _Mu<_T$num_args>()(_M_arg$num_args, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\";\n+  $tuple_add_cref .= \", typename __add_c_ref<_T$num_args>::type __a$num_args\";\n+  $tuple_copy_init .= \", _M_arg$num_args(__in._M_arg$num_args)\";\n+  $tuple_assign .= \" _M_arg$num_args = __in._M_arg$num_args;\";\n+  $template_params_u .= \", typename _U$num_args\";\n+  $template_args_u .= \", _U$num_args\";\n+  $ref_wrap_params .= \", ref(__a$num_args)\";\n+  $ref_template_args .= \", _T$num_args&\";\n+\n+  print \"#define _GLIBCXX_NUM_ARGS $num_args\\n\";\n+  print \"#define _GLIBCXX_COMMA ,\\n\";\n+  print \"#define _GLIBCXX_TEMPLATE_PARAMS $template_params\\n\";\n+  print \"#define _GLIBCXX_TEMPLATE_ARGS $template_args\\n\";\n+  print \"#define _GLIBCXX_PARAMS $params\\n\";\n+  print \"#define _GLIBCXX_REF_PARAMS $ref_params\\n\";\n+  print \"#define _GLIBCXX_ARGS $args\\n\";\n+  print \"#define _GLIBCXX_COMMA_SHIFTED ,\\n\";\n+  print \"#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED $template_params_shifted\\n\";\n+  print \"#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED $template_args_shifted\\n\";\n+  print \"#define _GLIBCXX_PARAMS_SHIFTED $params_shifted\\n\";\n+  print \"#define _GLIBCXX_ARGS_SHIFTED $args_shifted\\n\";\n+  print \"#define _GLIBCXX_BIND_MEMBERS $bind_members\\n\";\n+  print \"#define _GLIBCXX_BIND_MEMBERS_INIT $bind_members_init\\n\";\n+  print \"#define _GLIBCXX_MU_GET_TUPLE_ARGS $mu_get_tuple_args\\n\";\n+  print \"#define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) $bind_v_template_args\\n\";\n+  print \"#define _GLIBCXX_BIND_V_ARGS $bind_v_args\\n\";\n+  print \"#define _GLIBCXX_TUPLE_ADD_CREF $tuple_add_cref\\n\";\n+  print \"#define _GLIBCXX_TUPLE_COPY_INIT $tuple_copy_init\\n\";\n+  print \"#define _GLIBCXX_TUPLE_ASSIGN $tuple_assign\\n\";\n+  print \"#define _GLIBCXX_TEMPLATE_PARAMS_U $template_params_u\\n\";\n+  print \"#define _GLIBCXX_TEMPLATE_ARGS_U $template_args_u\\n\";\n+  print \"#define _GLIBCXX_REF_WRAP_PARAMS $ref_wrap_params\\n\";\n+  print \"#define _GLIBCXX_REF_TEMPLATE_ARGS $ref_template_args\\n\";\n+  print \"#define _GLIBCXX_NUM_ARGS_PLUS_1 $next_args\\n\";\n+  if ($num_args == $max) {\n+    print \"#define _GLIBCXX_LAST_INCLUDE\\n\"\n+  }\n+  print \"#include _GLIBCXX_REPEAT_HEADER\\n\";\n+  if ($num_args == $max) {\n+    print \"#undef _GLIBCXX_LAST_INCLUDE\\n\"\n+  }\n+\n+  print \"#undef _GLIBCXX_NUM_ARGS_PLUS_1\\n\";\n+  print \"#undef _GLIBCXX_REF_TEMPLATE_ARGS\\n\";\n+  print \"#undef _GLIBCXX_REF_WRAP_PARAMS\\n\";\n+  print \"#undef _GLIBCXX_TEMPLATE_ARGS_U\\n\";\n+  print \"#undef _GLIBCXX_TEMPLATE_PARAMS_U\\n\";\n+  print \"#undef _GLIBCXX_TUPLE_ASSIGN\\n\";\n+  print \"#undef _GLIBCXX_TUPLE_COPY_INIT\\n\";\n+  print \"#undef _GLIBCXX_TUPLE_ADD_CREF\\n\";\n+  print \"#undef _GLIBCXX_BIND_V_ARGS\\n\";\n+  print \"#undef _GLIBCXX_BIND_V_TEMPLATE_ARGS\\n\";\n+  print \"#undef _GLIBCXX_MU_GET_TUPLE_ARGS\\n\";\n+  print \"#undef _GLIBCXX_BIND_MEMBERS_INIT\\n\";\n+  print \"#undef _GLIBCXX_BIND_MEMBERS\\n\";\n+  print \"#undef _GLIBCXX_ARGS_SHIFTED\\n\";\n+  print \"#undef _GLIBCXX_PARAMS_SHIFTED\\n\";\n+  print \"#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\\n\";\n+  print \"#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\\n\";\n+  print \"#undef _GLIBCXX_COMMA_SHIFTED\\n\";\n+  print \"#undef _GLIBCXX_ARGS\\n\";\n+  print \"#undef _GLIBCXX_REF_PARAMS\\n\";\n+  print \"#undef _GLIBCXX_PARAMS\\n\";\n+  print \"#undef _GLIBCXX_TEMPLATE_ARGS\\n\";\n+  print \"#undef _GLIBCXX_TEMPLATE_PARAMS\\n\";\n+  print \"#undef _GLIBCXX_COMMA\\n\";\n+  print \"#undef _GLIBCXX_NUM_ARGS\\n\";\n+  print \"\\n\";\n+}"}, {"sha": "ea6affb37c1dba96596376621fa229befd4403bf", "filename": "libstdc++-v3/testsuite/testsuite_tr1.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -121,18 +121,18 @@ namespace __gnu_test\n   { operator int() const; };\n \n   class AbstractClass\n-  { \n+  {\n     virtual void rotate(int) = 0;\n     virtual ~AbstractClass();\n   };\n \n   class PolymorphicClass\n-  { \n+  {\n     virtual void rotate(int);\n     virtual ~PolymorphicClass();\n   };\n \n-  class DerivedPolymorphic : public PolymorphicClass { }; \n+  class DerivedPolymorphic : public PolymorphicClass { };\n \n   union UnionType { };\n \n@@ -151,14 +151,14 @@ namespace __gnu_test\n     {\n       ++live_objects;\n     }\n-    \n+\n     ~do_truncate_float_t()\n     {\n       --live_objects;\n     }\n \n     int operator()(float x) { return (int)x; }\n-    \n+\n     static int live_objects;\n   };\n \n@@ -182,21 +182,21 @@ namespace __gnu_test\n     }\n \n     long operator()(double x) { return (long)x; }\n-    \n+\n     static int live_objects;\n   };\n-  \n+\n   int do_truncate_double_t::live_objects = 0;\n-  \n+\n   struct X\n   {\n     int bar;\n-    \n+\n     int foo()                   { return 1; }\n     int foo_c() const           { return 2; }\n     int foo_v()  volatile       { return 3; }\n     int foo_cv() const volatile { return 4; }\n   };\n-}; // namespace __gnu_test\n+} // namespace __gnu_test\n \n #endif // _GLIBCXX_TESTSUITE_TR1_H"}, {"sha": "17ed6857a7a2764c693d3a0b5b78b4452eb6b67b", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/bind/all_bound.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fbind%2Fall_bound.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fbind%2Fall_bound.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fbind%2Fall_bound.cc?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -0,0 +1,45 @@\n+// 2005-03-20 Douglas Gregor <doug.gregor -at- gmail.com>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 3.6 function object binders\n+#include <tr1/functional>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+\n+bool test __attribute__((unused)) = true;\n+\n+// Operations on empty function<> objects\n+void test01()\n+{\n+  using std::tr1::bind;\n+\n+  VERIFY( bind(std::plus<int>(), 3, 5)() == 8 );\n+  VERIFY( bind(std::minus<int>(), 3, 5)() == -2 );\n+  VERIFY( bind<int>(std::plus<int>(), 3, 5)() == 8 );\n+  VERIFY( bind<int>(std::minus<int>(), 3, 5)() == -2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8e6bf7c0e5d9c8f0557ee11bdb61106774ac5fcc", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/bind/nested.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fbind%2Fnested.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fbind%2Fnested.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fbind%2Fnested.cc?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -0,0 +1,46 @@\n+// 2005-03-20 Douglas Gregor <doug.gregor -at- gmail.com>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 3.6 function object binders\n+#include <tr1/functional>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+\n+bool test __attribute__((unused)) = true;\n+\n+// Operations on empty function<> objects\n+void test01()\n+{\n+  using std::tr1::bind;\n+  using namespace std::tr1::placeholders;\n+\n+  int five = 5;\n+  int seven = 7;\n+  VERIFY( bind(std::multiplies<int>(), _1, bind(std::minus<int>(), 6, _2))(five, seven) == -5 );\n+  VERIFY( bind(std::multiplies<int>(), _1, bind(std::minus<int>(), 6, _2))(seven, five) == 7 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1dc7450eb1f8c9788e64372059dd45b6af2c704d", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/bind/placeholders.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fbind%2Fplaceholders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fbind%2Fplaceholders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fbind%2Fplaceholders.cc?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -0,0 +1,46 @@\n+// 2005-03-20 Douglas Gregor <doug.gregor -at- gmail.com>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 3.6 function object binders\n+#include <tr1/functional>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+\n+bool test __attribute__((unused)) = true;\n+\n+// Operations on empty function<> objects\n+void test01()\n+{\n+  using std::tr1::bind;\n+  using namespace std::tr1::placeholders;\n+\n+  int five = 5;\n+  int seven = 7;\n+  VERIFY( bind(std::minus<int>(), _1, _2)(five, seven) == -2 );\n+  VERIFY( bind(std::minus<int>(), _2, _1)(five, seven) == 2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "de3a1a3dbfa53b832e01d669f99a6a97d7c5291c", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/bind/ref.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fbind%2Fref.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cffcf69a5026fc54a38479c93f8ea961db8ecd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fbind%2Fref.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fbind%2Fref.cc?ref=59cffcf69a5026fc54a38479c93f8ea961db8ecd", "patch": "@@ -0,0 +1,60 @@\n+// 2005-03-20 Douglas Gregor <doug.gregor -at- gmail.com>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 3.6 function object binders\n+#include <tr1/functional>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+\n+bool test __attribute__((unused)) = true;\n+\n+struct X\n+{\n+  X() : bar(17) {}\n+\n+  int foo(int x, int y) { return bar + x + y; }\n+\n+  int bar;\n+\n+private:\n+  X(const X&);\n+  X& operator=(const X&);\n+};\n+\n+// Operations on empty function<> objects\n+void test01()\n+{\n+  using std::tr1::bind;\n+  using std::tr1::ref;\n+  ::X x;\n+\n+  VERIFY( bind(&::X::foo, ref(x), 1, 2)() == 20 );\n+  VERIFY( bind<int>(&::X::foo, ref(x), 1, 2)() == 20 );\n+  VERIFY( bind(&::X::bar, ref(x))() == 17 );\n+  VERIFY( bind<int>(&::X::bar, ref(x))() == 17 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}