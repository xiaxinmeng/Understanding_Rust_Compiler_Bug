{"sha": "67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdkYjBjZTc0ODBiNTNmYmY3ZDliNjMyY2FlMGI3YzE1YjNiZmRjOA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-05-19T16:04:10Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-05-19T16:04:10Z"}, "message": "java-tree.h: Added init state enum.\n\n\t* java-tree.h: Added init state enum.\n\t* decl.c (emit_init_test_initialization): Initialize class\n\tinitialization check variable by looking at class' state.\n\nFrom-SVN: r34022", "tree": {"sha": "0416c1ff3b56daf1ff3a14bd481b259133e60841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0416c1ff3b56daf1ff3a14bd481b259133e60841"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8/comments", "author": null, "committer": null, "parents": [{"sha": "43490bec9d0db6490c1232fb83c69633da67e5ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43490bec9d0db6490c1232fb83c69633da67e5ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43490bec9d0db6490c1232fb83c69633da67e5ab"}], "stats": {"total": 60, "additions": 43, "deletions": 17}, "files": [{"sha": "26261b67d9c1d4a4394d1bf52d81cc8173daeab6", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8", "patch": "@@ -1,3 +1,9 @@\n+2000-05-19  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java-tree.h: Added init state enum.\n+\t* decl.c (emit_init_test_initialization): Initialize class\n+\tinitialization check variable by looking at class' state.\n+\n 2000-05-19  Tom Tromey  <tromey@cygnus.com>\n \n \t* java-tree.h (build_instanceof): Declare."}, {"sha": "c5008a0addab83ee76e6cdb9cdce771859e6e8a8", "filename": "gcc/java/decl.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8", "patch": "@@ -1681,17 +1681,29 @@ build_result_decl (fndecl)\n \n /* Called for every element in DECL_FUNCTION_INIT_TEST_TABLE in order\n    to emit initialization code for each test flag.  */\n-   \n+\n static boolean\n emit_init_test_initialization (entry, key)\n   struct hash_entry *entry;\n   hash_table_key key ATTRIBUTE_UNUSED;\n {\n   struct init_test_hash_entry *ite = (struct init_test_hash_entry *) entry;\n+  tree klass = build_class_ref ((tree) entry->key);\n   expand_decl (ite->init_test_decl);\n \n-  expand_expr_stmt (build (MODIFY_EXPR, boolean_type_node, \n-\t\t\t   ite->init_test_decl, boolean_false_node));\n+  /* We initialize the class init check variable by looking at the\n+     `state' field of the class to see if it is already initialized.\n+     This makes things a bit faster if the class is already\n+     initialized, which should be the common case.  */\n+  expand_expr_stmt\n+    (build (MODIFY_EXPR, boolean_type_node, \n+\t    ite->init_test_decl,\n+\t    build (GE_EXPR, boolean_type_node,\n+\t\t   build (COMPONENT_REF, byte_type_node,\n+\t\t\t  build1 (INDIRECT_REF, class_type_node, klass),\n+\t\t\t  lookup_field (&class_type_node,\n+\t\t\t\t\tget_identifier (\"state\"))),\n+\t\t   build_int_2 (JV_STATE_DONE, 0))));\n \n   return true;\n }"}, {"sha": "2b77434201b8dade6f7c2c8635b4c023e7358d2a", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8", "patch": "@@ -1165,4 +1165,25 @@ extern int java_error_count;\t\t\t\t\t\\\n        return;\t\t\t\t\t\t\t\t\\\n    }\n \n+/* These are the possible values for the `state' field of the class\n+   structure.  This must be kept in sync with libgcj.  */\n+enum\n+{\n+  JV_STATE_NOTHING = 0,\t\t/* Set by compiler.  */\n+\n+  JV_STATE_PRELOADING = 1,\t/* Can do _Jv_FindClass.  */\n+  JV_STATE_LOADING = 3,\t\t/* Has super installed.  */\n+  JV_STATE_LOADED = 5,\t\t/* Is complete.  */\n+\n+  JV_STATE_COMPILED = 6,\t/* This was a compiled class.  */\n+\n+  JV_STATE_PREPARED = 7,\t/* Layout & static init done.  */\n+  JV_STATE_LINKED = 9,\t\t/* Strings interned.  */\n+\n+  JV_STATE_IN_PROGRESS = 10,\t/* <Clinit> running.  */\n+  JV_STATE_DONE = 12,\n+\n+  JV_STATE_ERROR = 14\t\t/* must be last.  */\n+};\n+\n #undef DEBUG_JAVA_BINDING_LEVELS"}, {"sha": "2ac64090b32aa010a8d7c013a50a2240b98523c6", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=67db0ce7480b53fbf7d9b632cae0b7c15b3bfdc8", "patch": "@@ -12346,18 +12346,7 @@ patch_binop (node, wfl_op1, wfl_op2)\n \t    }\n \t  /* Otherwise we have to invoke instance of to figure it out */\n \t  else\n-\t    {\n-\t      tree call =\n-\t\tbuild (CALL_EXPR, boolean_type_node,\n-\t\t       build_address_of (soft_instanceof_node),\n-\t\t       tree_cons \n-\t\t       (NULL_TREE, op1,\n-\t\t\tbuild_tree_list (NULL_TREE,\n-\t\t\t\t\t build_class_ref (op2_type))),\n-\t\t       NULL_TREE);\n-\t      TREE_SIDE_EFFECTS (call) = TREE_SIDE_EFFECTS (op1);\n-\t      return call;\n-\t    }\n+\t    return build_instanceof (op1, op2_type);\n \t}\n       /* There is no way the expression operand can be an instance of\n \t the type operand. This is a compile time error. */\n@@ -14604,8 +14593,6 @@ fold_constant_for_init (node, context)\n \n   if (code == INTEGER_CST || code == REAL_CST)\n     return convert (TREE_TYPE (context), node);\n-  if (TREE_TYPE (node) != NULL_TREE && code != VAR_DECL && code != FIELD_DECL)\n-    return NULL_TREE;\n \n   switch (code)\n     {"}]}