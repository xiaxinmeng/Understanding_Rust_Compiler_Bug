{"sha": "29f23ed79b60949fc60f6fdbbd931bd58090b241", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlmMjNlZDc5YjYwOTQ5ZmM2MGY2ZmRiYmQ5MzFiZDU4MDkwYjI0MQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-03-20T23:21:02Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-03-20T23:21:02Z"}, "message": "sra: Cap number of sub-access propagations with a param (PR 93435)\n\nPR 93435 is a perfect SRA bomb.  It initializes an array of 16 chars\nelement-wise, then uses that to initialize an aggregate that consists\nof four such arrays, that one to initialize one four times as big as\nthe previous one all the way to an aggregate that has 64kb.\n\nThis causes the sub-access propagation across assignments to create\nthousands of byte-sized artificial accesses which are then eligible to\nbe replaced - they do facilitate forward propagation but there is\nenough of them for DSE to never finish.\n\nThis patch avoids that situation by accounting how many of such\nreplacements can be created per SRA candidate.  The default value of\n32 was just the largest power of two that did not slow down\ncompilation of the testcase, but it should also hopefully be big\nenough for any reasonable input that might rely on the optimization.\n\n2020-03-20  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/93435\n\t* params.opt (sra-max-propagations): New parameter.\n\t* tree-sra.c (propagation_budget): New variable.\n\t(budget_for_propagation_access): New function.\n\t(propagate_subaccesses_from_rhs): Use it.\n\t(propagate_subaccesses_from_lhs): Likewise.\n\t(propagate_all_subaccesses): Set up and destroy propagation_budget.\n\n\tgcc/testsuite/\n\t* gcc.dg/tree-ssa/pr93435.c: New test.", "tree": {"sha": "2d50bd30c920febc2b540dfca18e3dbce4189055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d50bd30c920febc2b540dfca18e3dbce4189055"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29f23ed79b60949fc60f6fdbbd931bd58090b241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f23ed79b60949fc60f6fdbbd931bd58090b241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f23ed79b60949fc60f6fdbbd931bd58090b241", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f23ed79b60949fc60f6fdbbd931bd58090b241/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc3afc9db0710fe40e3d9a5e941e5e4efe7227f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc3afc9db0710fe40e3d9a5e941e5e4efe7227f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc3afc9db0710fe40e3d9a5e941e5e4efe7227f2"}], "stats": {"total": 215, "additions": 213, "deletions": 2}, "files": [{"sha": "c5d3fb9bb6b6ab2a7c5f931518eeb75aa6cb0b9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f23ed79b60949fc60f6fdbbd931bd58090b241/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f23ed79b60949fc60f6fdbbd931bd58090b241/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29f23ed79b60949fc60f6fdbbd931bd58090b241", "patch": "@@ -1,3 +1,13 @@\n+2020-03-20  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/93435\n+\t* params.opt (sra-max-propagations): New parameter.\n+\t* tree-sra.c (propagation_budget): New variable.\n+\t(budget_for_propagation_access): New function.\n+\t(propagate_subaccesses_from_rhs): Use it.\n+\t(propagate_subaccesses_from_lhs): Likewise.\n+\t(propagate_all_subaccesses): Set up and destroy propagation_budget.\n+\n 2020-03-20  Carl Love  <cel@us.ibm.com>\n \n \tPR/target 87583"}, {"sha": "1e484c3e0f5fa069a256d2224bce838e605fcd39", "filename": "gcc/params.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f23ed79b60949fc60f6fdbbd931bd58090b241/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f23ed79b60949fc60f6fdbbd931bd58090b241/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=29f23ed79b60949fc60f6fdbbd931bd58090b241", "patch": "@@ -844,6 +844,10 @@ Maximum size, in storage units, of an aggregate which should be considered for s\n Common Joined UInteger Var(param_sra_max_scalarization_size_speed) Param Optimization\n Maximum size, in storage units, of an aggregate which should be considered for scalarization when compiling for speed.\n \n+-param=sra-max-propagations=\n+Common Joined UInteger Var(param_sra_max_propagations) Param Optimization Init(32)\n+Maximum number of artificial accesses to enable forward propagation that Scalar Replacement of Aggregates will keep for one local variable.\n+\n -param=ssa-name-def-chain-limit=\n Common Joined UInteger Var(param_ssa_name_def_chain_limit) Init(512) Param Optimization\n The maximum number of SSA_NAME assignments to follow in determining a value."}, {"sha": "ce99c98cf02f6fe678bfe3c02672d3edd335c713", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f23ed79b60949fc60f6fdbbd931bd58090b241/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f23ed79b60949fc60f6fdbbd931bd58090b241/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29f23ed79b60949fc60f6fdbbd931bd58090b241", "patch": "@@ -1,3 +1,8 @@\n+2020-03-20  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/93435\n+\t* gcc.dg/tree-ssa/pr93435.c: New test.\n+\n 2020-03-20  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/93347"}, {"sha": "cb8e7495b152d3dc2f6b205f017f7ca0b1ae12ff", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr93435.c", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f23ed79b60949fc60f6fdbbd931bd58090b241/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93435.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f23ed79b60949fc60f6fdbbd931bd58090b241/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93435.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93435.c?ref=29f23ed79b60949fc60f6fdbbd931bd58090b241", "patch": "@@ -0,0 +1,159 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef signed char int8_T;\n+typedef int int32_T;\n+\n+typedef struct {\n+  int8_T a;\n+} struct0_T;\n+\n+typedef struct {\n+  struct0_T f10[4];\n+} struct_T;\n+\n+typedef struct {\n+  struct_T f9[4];\n+} b_struct_T;\n+\n+typedef struct {\n+  b_struct_T f8[4];\n+} c_struct_T;\n+\n+typedef struct {\n+  c_struct_T f7[4];\n+} d_struct_T;\n+\n+typedef struct {\n+  d_struct_T f6[4];\n+} e_struct_T;\n+\n+typedef struct {\n+  e_struct_T f5[4];\n+} f_struct_T;\n+\n+typedef struct {\n+  f_struct_T f4[4];\n+} g_struct_T;\n+\n+typedef struct {\n+  g_struct_T f3[4];\n+} h_struct_T;\n+\n+typedef struct {\n+  h_struct_T f2[4];\n+} i_struct_T;\n+\n+typedef struct {\n+  i_struct_T f1[4];\n+} j_struct_T;\n+\n+typedef struct {\n+  struct {\n+    j_struct_T ds21[4];\n+    i_struct_T ds20[4];\n+    i_struct_T r9;\n+  } f0;\n+} deep_struct_arraysStackData;\n+\n+/* Function Definitions */\n+void deep_struct_arrays(deep_struct_arraysStackData *SD,\n+  int8_T in1, int8_T inCount, int8_T *out1, int8_T *out2, struct0_T out3[4])\n+{\n+  struct0_T r;\n+  struct_T r1;\n+  b_struct_T r2;\n+  c_struct_T r3;\n+  d_struct_T r4;\n+  e_struct_T r5;\n+  f_struct_T r6;\n+  g_struct_T r7;\n+  h_struct_T r8;\n+  int32_T count;\n+  int32_T i;\n+\n+  /*  Check properties of input in1 */\n+  /*  Check properties of input inCount */\n+  /*  Copyright 2006 The MathWorks, Inc. */\n+  r.a = in1;\n+  r1.f10[0] = r;\n+  r1.f10[1] = r;\n+  r1.f10[2] = r;\n+  r1.f10[3] = r;\n+  r2.f9[0] = r1;\n+  r2.f9[1] = r1;\n+  r2.f9[2] = r1;\n+  r2.f9[3] = r1;\n+  r3.f8[0] = r2;\n+  r3.f8[1] = r2;\n+  r3.f8[2] = r2;\n+  r3.f8[3] = r2;\n+  r4.f7[0] = r3;\n+  r4.f7[1] = r3;\n+  r4.f7[2] = r3;\n+  r4.f7[3] = r3;\n+  r5.f6[0] = r4;\n+  r5.f6[1] = r4;\n+  r5.f6[2] = r4;\n+  r5.f6[3] = r4;\n+  r6.f5[0] = r5;\n+  r6.f5[1] = r5;\n+  r6.f5[2] = r5;\n+  r6.f5[3] = r5;\n+  r7.f4[0] = r6;\n+  r7.f4[1] = r6;\n+  r7.f4[2] = r6;\n+  r7.f4[3] = r6;\n+  r8.f3[0] = r7;\n+  r8.f3[1] = r7;\n+  r8.f3[2] = r7;\n+  r8.f3[3] = r7;\n+  SD->f0.r9.f2[0] = r8;\n+  SD->f0.r9.f2[1] = r8;\n+  SD->f0.r9.f2[2] = r8;\n+  SD->f0.r9.f2[3] = r8;\n+  SD->f0.ds20[0] = SD->f0.r9;\n+  SD->f0.ds20[3] = SD->f0.r9;\n+  count = 0;\n+  while (count < inCount) {\n+    i = in1 + SD->f0.ds20[0].f2[0].f3[0].f4[0].f5[0].f6[0].f7[0].f8[0].f9[0]\n+      .f10[0].a;\n+    if (i > 127) {\n+      i = 127;\n+    } else {\n+      if (i < -128) {\n+        i = -128;\n+      }\n+    }\n+\n+    SD->f0.ds20[0].f2[0].f3[0].f4[0].f5[0].f6[0].f7[0].f8[0].f9[0].f10[0].a =\n+      (int8_T)i;\n+    i = SD->f0.ds20[3].f2[3].f3[3].f4[3].f5[3].f6[3].f7[3].f8[3].f9[3].f10[3].a\n+      + 3;\n+    if (i > 127) {\n+      i = 127;\n+    }\n+\n+    SD->f0.ds20[3].f2[3].f3[3].f4[3].f5[3].f6[3].f7[3].f8[3].f9[3].f10[3].a =\n+      (int8_T)i;\n+    count++;\n+  }\n+\n+  if (inCount > 10) {\n+    SD->f0.ds21[0].f1[1].f2[2].f3[3].f4[3].f5[3].f6[3].f7[3].f8[3].f9[3].f10[3].\n+      a = 14;\n+  } else {\n+    SD->f0.ds21[0].f1[1].f2[2].f3[3].f4[3].f5[3].f6[3].f7[3].f8[3].f9[3].f10[3].\n+      a = 16;\n+  }\n+\n+  *out1 = SD->f0.ds20[0].f2[0].f3[0].f4[0].f5[0].f6[0].f7[0].f8[0].f9[0].f10[0].\n+    a;\n+  *out2 = SD->f0.ds20[3].f2[3].f3[3].f4[3].f5[3].f6[3].f7[3].f8[3].f9[3].f10[3].\n+    a;\n+  out3[0] = r;\n+  out3[1] = r;\n+  out3[2] = r;\n+  out3[3] = SD->f0.ds21[0].f1[1].f2[2].f3[3].f4[3].f5[3].f6[3].f7[3].f8[3].f9[3]\n+    .f10[3];\n+}"}, {"sha": "b2056b5875030dcda14c625d045141883d9397d7", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f23ed79b60949fc60f6fdbbd931bd58090b241/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f23ed79b60949fc60f6fdbbd931bd58090b241/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=29f23ed79b60949fc60f6fdbbd931bd58090b241", "patch": "@@ -285,6 +285,9 @@ static object_allocator<assign_link> assign_link_pool (\"SRA links\");\n /* Base (tree) -> Vector (vec<access_p> *) map.  */\n static hash_map<tree, auto_vec<access_p> > *base_access_vec;\n \n+/* Hash to limit creation of artificial accesses */\n+static hash_map<tree, unsigned> *propagation_budget;\n+\n /* Candidate hash table helpers.  */\n \n struct uid_decl_hasher : nofree_ptr_hash <tree_node>\n@@ -2687,6 +2690,32 @@ subtree_mark_written_and_rhs_enqueue (struct access *access)\n     subtree_mark_written_and_rhs_enqueue (child);\n }\n \n+/* If there is still budget to create a propagation access for DECL, return\n+   true and decrement the budget.  Otherwise return false.  */\n+\n+static bool\n+budget_for_propagation_access (tree decl)\n+{\n+  unsigned b, *p = propagation_budget->get (decl);\n+  if (p)\n+    b = *p;\n+  else\n+    b = param_sra_max_propagations;\n+\n+  if (b == 0)\n+    return false;\n+  b--;\n+\n+  if (b == 0 && dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"The propagation budget of \");\n+      print_generic_expr (dump_file, decl);\n+      fprintf (dump_file, \" (UID: %u) has been exhausted.\\n\", DECL_UID (decl));\n+    }\n+  propagation_budget->put (decl, b);\n+  return true;\n+}\n+\n /* Propagate subaccesses and grp_write flags of RACC across an assignment link\n    to LACC.  Enqueue sub-accesses as necessary so that the write flag is\n    propagated transitively.  Return true if anything changed.  Additionally, if\n@@ -2791,7 +2820,8 @@ propagate_subaccesses_from_rhs (struct access *lacc, struct access *racc)\n \t  continue;\n \t}\n \n-      if (rchild->grp_unscalarizable_region)\n+      if (rchild->grp_unscalarizable_region\n+\t  || !budget_for_propagation_access (lacc->base))\n \t{\n \t  if (rchild->grp_write && !lacc->grp_write)\n \t    {\n@@ -2851,7 +2881,8 @@ propagate_subaccesses_from_lhs (struct access *lacc, struct access *racc)\n \n       if (lchild->grp_unscalarizable_region\n \t  || child_would_conflict_in_acc (racc, norm_offset, lchild->size,\n-\t\t\t\t\t  &matching_acc))\n+\t\t\t\t\t  &matching_acc)\n+\t  || !budget_for_propagation_access (racc->base))\n \t{\n \t  if (matching_acc\n \t      && propagate_subaccesses_from_lhs (lchild, matching_acc))\n@@ -2882,6 +2913,7 @@ propagate_subaccesses_from_lhs (struct access *lacc, struct access *racc)\n static void\n propagate_all_subaccesses (void)\n {\n+  propagation_budget = new hash_map<tree, unsigned>;\n   while (rhs_work_queue_head)\n     {\n       struct access *racc = pop_access_from_rhs_work_queue ();\n@@ -2945,6 +2977,7 @@ propagate_all_subaccesses (void)\n \t    add_access_to_lhs_work_queue (racc);\n \t}\n     }\n+  delete propagation_budget;\n }\n \n /* Return true if the forest beginning with ROOT does not contain"}]}