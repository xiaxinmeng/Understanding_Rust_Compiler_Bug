{"sha": "71c10a83a677e7caf5e9a0208e315bad3a5001ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFjMTBhODNhNjc3ZTdjYWY1ZTlhMDIwOGUzMTViYWQzYTUwMDFhYw==", "commit": {"author": {"name": "Bernard Banner", "email": "banner@gnat.com", "date": "2004-10-04T15:01:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-10-04T15:01:52Z"}, "message": "re PR ada/13897 (gnat does not implement tasking on powerpc)\n\n2004-10-04  Bernard Banner  <banner@gnat.com>\n\n\tPR ada/13897\n\n\t* Makefile.in: Add section for powerpc linux\n\tAdd variant i-vxwork-x86.ads\n\n\t* i-vxwork-x86.ads, system-linux-ppc.ads: New files.\n\nFrom-SVN: r88508", "tree": {"sha": "66640a0107ee93b50373be6bb30b2eb7dfb2068e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66640a0107ee93b50373be6bb30b2eb7dfb2068e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71c10a83a677e7caf5e9a0208e315bad3a5001ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c10a83a677e7caf5e9a0208e315bad3a5001ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71c10a83a677e7caf5e9a0208e315bad3a5001ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c10a83a677e7caf5e9a0208e315bad3a5001ac/comments", "author": null, "committer": null, "parents": [{"sha": "9a03df55561781c0170eb5dde09c0b062fd76ebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a03df55561781c0170eb5dde09c0b062fd76ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a03df55561781c0170eb5dde09c0b062fd76ebe"}], "stats": {"total": 401, "additions": 401, "deletions": 0}, "files": [{"sha": "1dfa878750a0cb54253e8d2dd99e2d29cf23296f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c10a83a677e7caf5e9a0208e315bad3a5001ac/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c10a83a677e7caf5e9a0208e315bad3a5001ac/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=71c10a83a677e7caf5e9a0208e315bad3a5001ac", "patch": "@@ -1,3 +1,12 @@\n+2004-10-04  Bernard Banner  <banner@gnat.com>\n+\n+\tPR ada/13897\n+\n+\t* Makefile.in: Add section for powerpc linux\n+\tAdd variant i-vxwork-x86.ads\n+\n+\t* i-vxwork-x86.ads, system-linux-ppc.ads: New files.\n+\n 2004-10-04  Olivier Hainque  <hainque@act-europe.fr>\n \n \t* init.c (__gnat_initialize): Call an Ada subprogram to perform the"}, {"sha": "59d90f58135e9e89786eaf35016f1490f7a33ec8", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c10a83a677e7caf5e9a0208e315bad3a5001ac/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c10a83a677e7caf5e9a0208e315bad3a5001ac/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=71c10a83a677e7caf5e9a0208e315bad3a5001ac", "patch": "@@ -597,6 +597,7 @@ ifeq ($(strip $(filter-out %86 wrs vxworks,$(targ))),)\n   a-sytaco.ads<a-sytaco-vxworks.ads \\\n   a-sytaco.adb<a-sytaco-vxworks.adb \\\n   a-intnam.ads<a-intnam-vxworks.ads \\\n+  i-vxwork.ads<i-vxwork-x86.ads \\\n   s-inmaop.adb<s-inmaop-posix.adb \\\n   s-interr.adb<s-interr-vxworks.adb \\\n   s-intman.ads<s-intman-vxworks.ads \\\n@@ -1315,6 +1316,33 @@ ifeq ($(strip $(filter-out cygwin32% mingw32% pe,$(osys))),)\n   LIBRARY_VERSION := $(LIB_VERSION)\n endif\n \n+ifeq ($(strip $(filter-out powerpc% linux%,$(arch) $(osys))),)\n+  LIBGNAT_TARGET_PAIRS = \\\n+  a-intnam.ads<a-intnam-linux.ads \\\n+  s-inmaop.adb<s-inmaop-posix.adb \\\n+  s-intman.adb<s-intman-posix.adb \\\n+  s-osinte.adb<s-osinte-posix.adb \\\n+  s-osinte.ads<s-osinte-linux.ads \\\n+  s-osprim.adb<s-osprim-posix.adb \\\n+  s-taprop.adb<s-taprop-linux.adb \\\n+  s-taspri.ads<s-taspri-linux.ads \\\n+  s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n+  s-parame.adb<s-parame-linux.adb \\\n+  system.ads<system-linux-ppc.ads\n+\n+  TOOLS_TARGET_PAIRS =  \\\n+    mlib-tgt.adb<mlib-tgt-linux.adb \\\n+    indepsw.adb<indepsw-linux.adb\n+\n+  SYMLIB = $(ADDR2LINE_SYMLIB)\n+  THREADSLIB = -lpthread\n+  GNATLIB_SHARED = gnatlib-shared-dual\n+  GMEM_LIB = gmemlib\n+  PREFIX_OBJS = $(PREFIX_REAL_OBJS)\n+  LIBRARY_VERSION := $(LIB_VERSION)\n+\n+endif\n+\n ifeq ($(strip $(filter-out %ia64 linux%,$(arch) $(osys))),)\n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<a-intnam-linux.ads \\"}, {"sha": "bbae9233813238d2be5a9c059a282a8cc1258d9f", "filename": "gcc/ada/i-vxwork-x86.ads", "status": "added", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c10a83a677e7caf5e9a0208e315bad3a5001ac/gcc%2Fada%2Fi-vxwork-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c10a83a677e7caf5e9a0208e315bad3a5001ac/gcc%2Fada%2Fi-vxwork-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-vxwork-x86.ads?ref=71c10a83a677e7caf5e9a0208e315bad3a5001ac", "patch": "@@ -0,0 +1,213 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                 GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS              --\n+--                                                                          --\n+--                      I N T E R F A C E S . V X W O R K S                 --\n+--                                                                          --\n+--                                   S p e c                                --\n+--                                                                          --\n+--             Copyright (C) 1999-2004 Ada Core Technologies, Inc.          --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the x86 VxWorks version of this package\n+\n+--  This package provides a limited binding to the VxWorks API\n+--  In particular, it interfaces with the VxWorks hardware interrupt\n+--  facilities, allowing the use of low-latency direct-vectored\n+--  interrupt handlers. Note that such handlers have a variety of\n+--  restrictions regarding system calls and language constructs. In particular,\n+--  the use of exception handlers and functions returning variable-length\n+--  objects cannot be used. Less restrictive, but higher-latency handlers can\n+--  be written using Ada protected procedures, Ada 83 style interrupt entries,\n+--  or by signalling an Ada task from within an interrupt handler using a\n+--  binary semaphore as described in the VxWorks Programmer's Manual.\n+--\n+--  For complete documentation of the operations in this package, please\n+--  consult the VxWorks Programmer's Manual and VxWorks Reference Manual.\n+\n+with System.VxWorks;\n+\n+package Interfaces.VxWorks is\n+   pragma Preelaborate (VxWorks);\n+\n+   ------------------------------------------------------------------------\n+   --  Here is a complete example that shows how to handle the Interrupt 0x33\n+   --  with a direct-vectored interrupt handler in Ada using this package:\n+\n+   --  with Interfaces.VxWorks; use Interfaces.VxWorks;\n+   --  with System;\n+   --\n+   --  package P is\n+   --\n+   --     Count : Integer;\n+   --     pragma Atomic (Count);\n+   --\n+   --     procedure Handler (Parameter : System.Address);\n+   --\n+   --  end P;\n+   --\n+   --  package body P is\n+   --\n+   --     procedure Handler (Parameter : System.Address) is\n+   --     begin\n+   --        Count := Count + 1;\n+   --        logMsg (\"received an interrupt\" & ASCII.LF & ASCII.Nul);\n+   --     end Handler;\n+   --  end P;\n+   --\n+   --  with Interfaces.VxWorks; use Interfaces.VxWorks;\n+   --  with Ada.Text_IO; use Ada.Text_IO;\n+   --  with Ada.Interrupts;\n+   --  with Machine_Code; use Machine_Code;\n+   --\n+   --  with P; use P;\n+   --  procedure Useint is\n+   --     --  Be sure to use a reasonable interrupt number for the target\n+   --     --  board!\n+   --     --  This one is an unreserved interrupt for the Pentium 3 BSP\n+   --     Interrupt : constant := 16#33#;\n+   --\n+   --     task T;\n+   --\n+   --     S : STATUS;\n+   --\n+   --     task body T is\n+   --     begin\n+   --        loop\n+   --           Put_Line (\"Generating an interrupt...\");\n+   --           delay 1.0;\n+   --\n+   --           --  Generate interrupt, using interrupt number\n+   --           Asm (\"int %0\",\n+   --                Inputs =>\n+   --                  Ada.Interrupts.Interrupt_ID'Asm_Input\n+   --                    (\"i\", Interrupt));\n+   --        end loop;\n+   --     end T;\n+   --\n+   --  begin\n+   --     S := intConnect (INUM_TO_IVEC (Interrupt), Handler'Access);\n+   --\n+   --     loop\n+   --        delay 2.0;\n+   --        Put_Line (\"value of count:\" & P.Count'Img);\n+   --     end loop;\n+   --  end Useint;\n+   -------------------------------------\n+\n+   subtype int is Integer;\n+\n+   type STATUS is new int;\n+   --  Equivalent of the C type STATUS\n+\n+   OK    : constant STATUS := 0;\n+   ERROR : constant STATUS := -1;\n+\n+   type VOIDFUNCPTR is access procedure (parameter : System.Address);\n+   type Interrupt_Vector is new System.Address;\n+   type Exception_Vector is new System.Address;\n+\n+   function intConnect\n+     (vector    : Interrupt_Vector;\n+      handler   : VOIDFUNCPTR;\n+      parameter : System.Address := System.Null_Address) return STATUS;\n+   --  Binding to the C routine intConnect. Use this to set up an\n+   --  user handler. The routine generates a wrapper around the user\n+   --  handler to save and restore context\n+\n+   function intVecGet\n+     (Vector : Interrupt_Vector) return VOIDFUNCPTR;\n+   --  Binding to the C routine intVecGet. Use this to get the\n+   --  existing handler for later restoral\n+\n+   procedure intVecSet\n+     (Vector  : Interrupt_Vector;\n+      Handler : VOIDFUNCPTR);\n+   --  Binding to the C routine intVecSet. Use this to restore a\n+   --  handler obtained using intVecGet\n+\n+   procedure intVecGet2\n+     (vector       : Interrupt_Vector;\n+      pFunction    : out VOIDFUNCPTR;\n+      pIdtGate     : access int;\n+      pIdtSelector : access int);\n+   --  Binding to the C routine intVecGet2. Use this to get the\n+   --  existing handler for later restoral\n+\n+   procedure intVecSet2\n+     (vector       : Interrupt_Vector;\n+      pFunction    : VOIDFUNCPTR;\n+      pIdtGate     : access int;\n+      pIdtSelector : access int);\n+   --  Binding to the C routine intVecSet2. Use this to restore a\n+   --  handler obtained using intVecGet2\n+\n+   function INUM_TO_IVEC (intNum : int) return Interrupt_Vector;\n+   --  Equivalent to the C macro INUM_TO_IVEC used to convert an interrupt\n+   --  number to an interrupt vector\n+\n+   procedure logMsg\n+     (fmt : String; arg1, arg2, arg3, arg4, arg5, arg6 : int := 0);\n+   --  Binding to the C routine logMsg. Note that it is the caller's\n+   --  responsibility to ensure that fmt is a null-terminated string\n+   --  (e.g logMsg (\"Interrupt\" & ASCII.NUL))\n+\n+   type FP_CONTEXT is private;\n+   --  Floating point context save and restore. Handlers using floating\n+   --  point must be bracketed with these calls. The pFpContext parameter\n+   --  should be an object of type FP_CONTEXT that is\n+   --  declared local to the handler.\n+   --  See the VxWorks Intel Architecture Supplement regarding\n+   --  these routines.\n+\n+   procedure fppRestore (pFpContext : in out FP_CONTEXT);\n+   --  Restore floating point context - old style\n+\n+   procedure fppSave (pFpContext : in out FP_CONTEXT);\n+   --  Save floating point context - old style\n+\n+   procedure fppXrestore (pFpContext : in out FP_CONTEXT);\n+   --  Restore floating point context - new style\n+\n+   procedure fppXsave (pFpContext : in out FP_CONTEXT);\n+   --  Save floating point context - new style\n+\n+private\n+\n+   type FP_CONTEXT is new System.VxWorks.FP_CONTEXT;\n+   --  Target-dependent floating point context type\n+\n+   pragma Import (C, intConnect, \"intConnect\");\n+   pragma Import (C, intVecGet, \"intVecGet\");\n+   pragma Import (C, intVecSet, \"intVecSet\");\n+   pragma Import (C, intVecGet2, \"intVecGet2\");\n+   pragma Import (C, intVecSet2, \"intVecSet2\");\n+   pragma Import (C, INUM_TO_IVEC, \"__gnat_inum_to_ivec\");\n+   pragma Import (C, logMsg, \"logMsg\");\n+   pragma Import (C, fppRestore, \"fppRestore\");\n+   pragma Import (C, fppSave, \"fppSave\");\n+   pragma Import (C, fppXrestore, \"fppXrestore\");\n+   pragma Import (C, fppXsave, \"fppXsave\");\n+end Interfaces.VxWorks;"}, {"sha": "abffe5df7eb2f94f50133e2a297eb6f0d3aa8ac2", "filename": "gcc/ada/system-linux-ppc.ads", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c10a83a677e7caf5e9a0208e315bad3a5001ac/gcc%2Fada%2Fsystem-linux-ppc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c10a83a677e7caf5e9a0208e315bad3a5001ac/gcc%2Fada%2Fsystem-linux-ppc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-ppc.ads?ref=71c10a83a677e7caf5e9a0208e315bad3a5001ac", "patch": "@@ -0,0 +1,151 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                               S Y S T E M                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                          (GNU-Linux/PPC Version)                         --\n+--                                                                          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package System is\n+pragma Pure (System);\n+--  Note that we take advantage of the implementation permission to\n+--  make this unit Pure instead of Preelaborable, see RM 13.7(36)\n+\n+   type Name is (SYSTEM_NAME_GNAT);\n+   System_Name : constant Name := SYSTEM_NAME_GNAT;\n+\n+   --  System-Dependent Named Numbers\n+\n+   Min_Int               : constant := Long_Long_Integer'First;\n+   Max_Int               : constant := Long_Long_Integer'Last;\n+\n+   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n+   Max_Nonbinary_Modulus : constant := Integer'Last;\n+\n+   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n+   Max_Digits            : constant := Long_Long_Float'Digits;\n+\n+   Max_Mantissa          : constant := 63;\n+   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n+\n+   Tick                  : constant := 0.000_001;\n+\n+   --  Storage-related Declarations\n+\n+   type Address is private;\n+   Null_Address : constant Address;\n+\n+   Storage_Unit : constant := 8;\n+   Word_Size    : constant := 32;\n+   Memory_Size  : constant := 2 ** 32;\n+\n+   --  Address comparison\n+\n+   function \"<\"  (Left, Right : Address) return Boolean;\n+   function \"<=\" (Left, Right : Address) return Boolean;\n+   function \">\"  (Left, Right : Address) return Boolean;\n+   function \">=\" (Left, Right : Address) return Boolean;\n+   function \"=\"  (Left, Right : Address) return Boolean;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+   pragma Import (Intrinsic, \"=\");\n+\n+   --  Other System-Dependent Declarations\n+\n+   type Bit_Order is (High_Order_First, Low_Order_First);\n+   Default_Bit_Order : constant Bit_Order := High_Order_First;\n+\n+   --  Priority-related Declarations (RM D.1)\n+\n+   Max_Priority           : constant Positive := 30;\n+   Max_Interrupt_Priority : constant Positive := 31;\n+\n+   subtype Any_Priority       is Integer      range  0 .. 31;\n+   subtype Priority           is Any_Priority range  0 .. 30;\n+   subtype Interrupt_Priority is Any_Priority range 31 .. 31;\n+\n+   Default_Priority : constant Priority := 15;\n+\n+private\n+\n+   type Address is mod Memory_Size;\n+   Null_Address : constant Address := 0;\n+\n+   --------------------------------------\n+   -- System Implementation Parameters --\n+   --------------------------------------\n+\n+   --  These parameters provide information about the target that is used\n+   --  by the compiler. They are in the private part of System, where they\n+   --  can be accessed using the special circuitry in the Targparm unit\n+   --  whose source should be consulted for more detailed descriptions\n+   --  of the individual switch values.\n+\n+   AAMP                      : constant Boolean := False;\n+   Backend_Divide_Checks     : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := False;\n+   Command_Line_Args         : constant Boolean := True;\n+   Configurable_Run_Time     : constant Boolean := False;\n+   Denorm                    : constant Boolean := True;\n+   Duration_32_Bits          : constant Boolean := False;\n+   Exit_Status_Supported     : constant Boolean := True;\n+   Fractional_Fixed_Ops      : constant Boolean := False;\n+   Frontend_Layout           : constant Boolean := False;\n+   Functions_Return_By_DSP   : constant Boolean := False;\n+   Machine_Overflows         : constant Boolean := False;\n+   Machine_Rounds            : constant Boolean := True;\n+   OpenVMS                   : constant Boolean := False;\n+   Preallocated_Stacks       : constant Boolean := False;\n+   Signed_Zeros              : constant Boolean := True;\n+   Stack_Check_Default       : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := False;\n+   Support_64_Bit_Divides    : constant Boolean := True;\n+   Support_Aggregates        : constant Boolean := True;\n+   Support_Composite_Assign  : constant Boolean := True;\n+   Support_Composite_Compare : constant Boolean := True;\n+   Support_Long_Shifts       : constant Boolean := True;\n+   Suppress_Standard_Library : constant Boolean := False;\n+   Use_Ada_Main_Program_Name : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := False;\n+   GCC_ZCX_Support           : constant Boolean := False;\n+   Front_End_ZCX_Support     : constant Boolean := False;\n+\n+   --  Obsolete entries, to be removed eventually (bootstrap issues!)\n+\n+   High_Integrity_Mode       : constant Boolean := False;\n+   Long_Shifts_Inlined       : constant Boolean := True;\n+\n+end System;"}]}