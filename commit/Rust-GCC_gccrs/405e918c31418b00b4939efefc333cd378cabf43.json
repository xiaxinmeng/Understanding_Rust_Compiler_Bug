{"sha": "405e918c31418b00b4939efefc333cd378cabf43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA1ZTkxOGMzMTQxOGIwMGI0OTM5ZWZlZmMzMzNjZDM3OGNhYmY0Mw==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-18T18:22:21Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-18T18:22:21Z"}, "message": "[ARM][GCC][3/5x]: MVE store intrinsics with predicated suffix.\n\nThis patch supports the following MVE ACLE store intrinsics with predicated suffix.\n\nvstrbq_p_s8, vstrbq_p_s32, vstrbq_p_s16, vstrbq_p_u8, vstrbq_p_u32, vstrbq_p_u16, vstrbq_scatter_offset_p_s8, vstrbq_scatter_offset_p_s32, vstrbq_scatter_offset_p_s16, vstrbq_scatter_offset_p_u8, vstrbq_scatter_offset_p_u32, vstrbq_scatter_offset_p_u16, vstrwq_scatter_base_p_s32, vstrwq_scatter_base_p_u32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1]  https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm-builtins.c (STRS_P_QUALIFIERS): Define builtin\n\tqualifier.\n\t(STRU_P_QUALIFIERS): Likewise.\n\t(STRSU_P_QUALIFIERS): Likewise.\n\t(STRSS_P_QUALIFIERS): Likewise.\n\t(STRSBS_P_QUALIFIERS): Likewise.\n\t(STRSBU_P_QUALIFIERS): Likewise.\n\t* config/arm/arm_mve.h (vstrbq_p_s8): Define macro.\n\t(vstrbq_p_s32): Likewise.\n\t(vstrbq_p_s16): Likewise.\n\t(vstrbq_p_u8): Likewise.\n\t(vstrbq_p_u32): Likewise.\n\t(vstrbq_p_u16): Likewise.\n\t(vstrbq_scatter_offset_p_s8): Likewise.\n\t(vstrbq_scatter_offset_p_s32): Likewise.\n\t(vstrbq_scatter_offset_p_s16): Likewise.\n\t(vstrbq_scatter_offset_p_u8): Likewise.\n\t(vstrbq_scatter_offset_p_u32): Likewise.\n\t(vstrbq_scatter_offset_p_u16): Likewise.\n\t(vstrwq_scatter_base_p_s32): Likewise.\n\t(vstrwq_scatter_base_p_u32): Likewise.\n\t(__arm_vstrbq_p_s8): Define intrinsic.\n\t(__arm_vstrbq_p_s32): Likewise.\n\t(__arm_vstrbq_p_s16): Likewise.\n\t(__arm_vstrbq_p_u8): Likewise.\n\t(__arm_vstrbq_p_u32): Likewise.\n\t(__arm_vstrbq_p_u16): Likewise.\n\t(__arm_vstrbq_scatter_offset_p_s8): Likewise.\n\t(__arm_vstrbq_scatter_offset_p_s32): Likewise.\n\t(__arm_vstrbq_scatter_offset_p_s16): Likewise.\n\t(__arm_vstrbq_scatter_offset_p_u8): Likewise.\n\t(__arm_vstrbq_scatter_offset_p_u32): Likewise.\n\t(__arm_vstrbq_scatter_offset_p_u16): Likewise.\n\t(__arm_vstrwq_scatter_base_p_s32): Likewise.\n\t(__arm_vstrwq_scatter_base_p_u32): Likewise.\n\t(vstrbq_p): Define polymorphic variant.\n\t(vstrbq_scatter_offset_p): Likewise.\n\t(vstrwq_scatter_base_p): Likewise.\n\t* config/arm/arm_mve_builtins.def (STRS_P_QUALIFIERS): Use builtin\n\tqualifier.\n\t(STRU_P_QUALIFIERS): Likewise.\n\t(STRSU_P_QUALIFIERS): Likewise.\n\t(STRSS_P_QUALIFIERS): Likewise.\n\t(STRSBS_P_QUALIFIERS): Likewise.\n\t(STRSBU_P_QUALIFIERS): Likewise.\n\t* config/arm/mve.md (mve_vstrbq_scatter_offset_p_<supf><mode>): Define\n\tRTL pattern.\n\t(mve_vstrwq_scatter_base_p_<supf>v4si): Likewise.\n\t(mve_vstrbq_p_<supf><mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vstrbq_p_s16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_p_u32.c: Likewise.", "tree": {"sha": "7a447f7a3d1fdec13ee19c3c3bb483d7b2281a67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a447f7a3d1fdec13ee19c3c3bb483d7b2281a67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/405e918c31418b00b4939efefc333cd378cabf43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405e918c31418b00b4939efefc333cd378cabf43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/405e918c31418b00b4939efefc333cd378cabf43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405e918c31418b00b4939efefc333cd378cabf43/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d"}], "stats": {"total": 598, "additions": 598, "deletions": 0}, "files": [{"sha": "33c02ebaa476148e8f72cc366fb075f6e4f818b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -1,3 +1,57 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm-builtins.c (STRS_P_QUALIFIERS): Define builtin\n+\tqualifier.\n+\t(STRU_P_QUALIFIERS): Likewise.\n+\t(STRSU_P_QUALIFIERS): Likewise.\n+\t(STRSS_P_QUALIFIERS): Likewise.\n+\t(STRSBS_P_QUALIFIERS): Likewise.\n+\t(STRSBU_P_QUALIFIERS): Likewise.\n+\t* config/arm/arm_mve.h (vstrbq_p_s8): Define macro.\n+\t(vstrbq_p_s32): Likewise.\n+\t(vstrbq_p_s16): Likewise.\n+\t(vstrbq_p_u8): Likewise.\n+\t(vstrbq_p_u32): Likewise.\n+\t(vstrbq_p_u16): Likewise.\n+\t(vstrbq_scatter_offset_p_s8): Likewise.\n+\t(vstrbq_scatter_offset_p_s32): Likewise.\n+\t(vstrbq_scatter_offset_p_s16): Likewise.\n+\t(vstrbq_scatter_offset_p_u8): Likewise.\n+\t(vstrbq_scatter_offset_p_u32): Likewise.\n+\t(vstrbq_scatter_offset_p_u16): Likewise.\n+\t(vstrwq_scatter_base_p_s32): Likewise.\n+\t(vstrwq_scatter_base_p_u32): Likewise.\n+\t(__arm_vstrbq_p_s8): Define intrinsic.\n+\t(__arm_vstrbq_p_s32): Likewise.\n+\t(__arm_vstrbq_p_s16): Likewise.\n+\t(__arm_vstrbq_p_u8): Likewise.\n+\t(__arm_vstrbq_p_u32): Likewise.\n+\t(__arm_vstrbq_p_u16): Likewise.\n+\t(__arm_vstrbq_scatter_offset_p_s8): Likewise.\n+\t(__arm_vstrbq_scatter_offset_p_s32): Likewise.\n+\t(__arm_vstrbq_scatter_offset_p_s16): Likewise.\n+\t(__arm_vstrbq_scatter_offset_p_u8): Likewise.\n+\t(__arm_vstrbq_scatter_offset_p_u32): Likewise.\n+\t(__arm_vstrbq_scatter_offset_p_u16): Likewise.\n+\t(__arm_vstrwq_scatter_base_p_s32): Likewise.\n+\t(__arm_vstrwq_scatter_base_p_u32): Likewise.\n+\t(vstrbq_p): Define polymorphic variant.\n+\t(vstrbq_scatter_offset_p): Likewise.\n+\t(vstrwq_scatter_base_p): Likewise.\n+\t* config/arm/arm_mve_builtins.def (STRS_P_QUALIFIERS): Use builtin\n+\tqualifier.\n+\t(STRU_P_QUALIFIERS): Likewise.\n+\t(STRSU_P_QUALIFIERS): Likewise.\n+\t(STRSS_P_QUALIFIERS): Likewise.\n+\t(STRSBS_P_QUALIFIERS): Likewise.\n+\t(STRSBU_P_QUALIFIERS): Likewise.\n+\t* config/arm/mve.md (mve_vstrbq_scatter_offset_p_<supf><mode>): Define\n+\tRTL pattern.\n+\t(mve_vstrwq_scatter_base_p_<supf>v4si): Likewise.\n+\t(mve_vstrbq_p_<supf><mode>): Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "c87fa3118510e4de90ac9afe08608fb2315f4809", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -612,6 +612,41 @@ arm_strsbu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n       qualifier_unsigned};\n #define STRSBU_QUALIFIERS (arm_strsbu_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_strs_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_pointer, qualifier_none, qualifier_unsigned};\n+#define STRS_P_QUALIFIERS (arm_strs_p_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_stru_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_pointer, qualifier_unsigned,\n+      qualifier_unsigned};\n+#define STRU_P_QUALIFIERS (arm_stru_p_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_strsu_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_pointer, qualifier_unsigned,\n+      qualifier_unsigned, qualifier_unsigned};\n+#define STRSU_P_QUALIFIERS (arm_strsu_p_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_strss_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_pointer, qualifier_unsigned,\n+      qualifier_none, qualifier_unsigned};\n+#define STRSS_P_QUALIFIERS (arm_strss_p_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_strsbs_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_unsigned, qualifier_immediate,\n+      qualifier_none, qualifier_unsigned};\n+#define STRSBS_P_QUALIFIERS (arm_strsbs_p_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_strsbu_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_unsigned, qualifier_immediate,\n+      qualifier_unsigned, qualifier_unsigned};\n+#define STRSBU_P_QUALIFIERS (arm_strsbu_p_qualifiers)\n+\n static enum arm_type_qualifiers\n arm_ldrgu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_pointer, qualifier_unsigned};"}, {"sha": "deed81cfb31b2cf8f830076c5e44098c1abf2310", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -1730,6 +1730,20 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vldrbq_u32(__base) __arm_vldrbq_u32(__base)\n #define vldrwq_gather_base_s32(__addr,  __offset) __arm_vldrwq_gather_base_s32(__addr,  __offset)\n #define vldrwq_gather_base_u32(__addr,  __offset) __arm_vldrwq_gather_base_u32(__addr,  __offset)\n+#define vstrbq_p_s8( __addr, __value, __p) __arm_vstrbq_p_s8( __addr, __value, __p)\n+#define vstrbq_p_s32( __addr, __value, __p) __arm_vstrbq_p_s32( __addr, __value, __p)\n+#define vstrbq_p_s16( __addr, __value, __p) __arm_vstrbq_p_s16( __addr, __value, __p)\n+#define vstrbq_p_u8( __addr, __value, __p) __arm_vstrbq_p_u8( __addr, __value, __p)\n+#define vstrbq_p_u32( __addr, __value, __p) __arm_vstrbq_p_u32( __addr, __value, __p)\n+#define vstrbq_p_u16( __addr, __value, __p) __arm_vstrbq_p_u16( __addr, __value, __p)\n+#define vstrbq_scatter_offset_p_s8( __base, __offset, __value, __p) __arm_vstrbq_scatter_offset_p_s8( __base, __offset, __value, __p)\n+#define vstrbq_scatter_offset_p_s32( __base, __offset, __value, __p) __arm_vstrbq_scatter_offset_p_s32( __base, __offset, __value, __p)\n+#define vstrbq_scatter_offset_p_s16( __base, __offset, __value, __p) __arm_vstrbq_scatter_offset_p_s16( __base, __offset, __value, __p)\n+#define vstrbq_scatter_offset_p_u8( __base, __offset, __value, __p) __arm_vstrbq_scatter_offset_p_u8( __base, __offset, __value, __p)\n+#define vstrbq_scatter_offset_p_u32( __base, __offset, __value, __p) __arm_vstrbq_scatter_offset_p_u32( __base, __offset, __value, __p)\n+#define vstrbq_scatter_offset_p_u16( __base, __offset, __value, __p) __arm_vstrbq_scatter_offset_p_u16( __base, __offset, __value, __p)\n+#define vstrwq_scatter_base_p_s32(__addr,  __offset, __value, __p) __arm_vstrwq_scatter_base_p_s32(__addr,  __offset, __value, __p)\n+#define vstrwq_scatter_base_p_u32(__addr,  __offset, __value, __p) __arm_vstrwq_scatter_base_p_u32(__addr,  __offset, __value, __p)\n #endif\n \n __extension__ extern __inline void\n@@ -11219,6 +11233,103 @@ __arm_vldrwq_gather_base_u32 (uint32x4_t __addr, const int __offset)\n   return __builtin_mve_vldrwq_gather_base_uv4si (__addr, __offset);\n }\n \n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_p_s8 (int8_t * __addr, int8x16_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrbq_p_sv16qi ((__builtin_neon_qi *) __addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_p_s32 (int8_t * __addr, int32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrbq_p_sv4si ((__builtin_neon_qi *) __addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_p_s16 (int8_t * __addr, int16x8_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrbq_p_sv8hi ((__builtin_neon_qi *) __addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_p_u8 (uint8_t * __addr, uint8x16_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrbq_p_uv16qi ((__builtin_neon_qi *) __addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_p_u32 (uint8_t * __addr, uint32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrbq_p_uv4si ((__builtin_neon_qi *) __addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_p_u16 (uint8_t * __addr, uint16x8_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrbq_p_uv8hi ((__builtin_neon_qi *) __addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_scatter_offset_p_s8 (int8_t * __base, uint8x16_t __offset, int8x16_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrbq_scatter_offset_p_sv16qi ((__builtin_neon_qi *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_scatter_offset_p_s32 (int8_t * __base, uint32x4_t __offset, int32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrbq_scatter_offset_p_sv4si ((__builtin_neon_qi *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_scatter_offset_p_s16 (int8_t * __base, uint16x8_t __offset, int16x8_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrbq_scatter_offset_p_sv8hi ((__builtin_neon_qi *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_scatter_offset_p_u8 (uint8_t * __base, uint8x16_t __offset, uint8x16_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrbq_scatter_offset_p_uv16qi ((__builtin_neon_qi *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_scatter_offset_p_u32 (uint8_t * __base, uint32x4_t __offset, uint32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrbq_scatter_offset_p_uv4si ((__builtin_neon_qi *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_scatter_offset_p_u16 (uint8_t * __base, uint16x8_t __offset, uint16x8_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrbq_scatter_offset_p_uv8hi ((__builtin_neon_qi *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_base_p_s32 (uint32x4_t __addr, const int __offset, int32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrwq_scatter_base_p_sv4si (__addr, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_base_p_u32 (uint32x4_t __addr, const int __offset, uint32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrwq_scatter_base_p_uv4si (__addr, __offset, __value, __p);\n+}\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void"}, {"sha": "c6e065d52d00e5f6b618e37c0b2df42c94e18f60", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -697,3 +697,9 @@ VAR3 (LDRS, vldrbq_s, v16qi, v8hi, v4si)\n VAR3 (LDRU, vldrbq_u, v16qi, v8hi, v4si)\n VAR1 (LDRGBS, vldrwq_gather_base_s, v4si)\n VAR1 (LDRGBU, vldrwq_gather_base_u, v4si)\n+VAR3 (STRS_P, vstrbq_p_s, v16qi, v8hi, v4si)\n+VAR3 (STRU_P, vstrbq_p_u, v16qi, v8hi, v4si)\n+VAR3 (STRSS_P, vstrbq_scatter_offset_p_s, v16qi, v8hi, v4si)\n+VAR3 (STRSU_P, vstrbq_scatter_offset_p_u, v16qi, v8hi, v4si)\n+VAR1 (STRSBS_P, vstrwq_scatter_base_p_s, v4si)\n+VAR1 (STRSBU_P, vstrwq_scatter_base_p_u, v4si)"}, {"sha": "0e8b04f531c679b87d972265ed21ea5ec796e3a2", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -8077,3 +8077,68 @@\n    return \"\";\n }\n   [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrbq_scatter_offset_p_s vstrbq_scatter_offset_p_u]\n+;;\n+(define_insn \"mve_vstrbq_scatter_offset_p_<supf><mode>\"\n+  [(set (match_operand:<MVE_B_ELEM> 0 \"memory_operand\" \"=Us\")\n+\t(unspec:<MVE_B_ELEM>\n+\t\t[(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VSTRBSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\n\\tvstrbt.<V_sz_elem>\\t%q2, [%m0, %q1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrwq_scatter_base_p_s vstrwq_scatter_base_p_u]\n+;;\n+(define_insn \"mve_vstrwq_scatter_base_p_<supf>v4si\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t\t[(match_operand:V4SI 0 \"s_register_operand\" \"w\")\n+\t\t (match_operand:SI 1 \"immediate_operand\" \"i\")\n+\t\t (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VSTRWSBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\n\\tvstrwt.u32\\t%q2, [%q0, %1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrbq_p_s vstrbq_p_u]\n+;;\n+(define_insn \"mve_vstrbq_p_<supf><mode>\"\n+  [(set (match_operand:<MVE_B_ELEM> 0 \"memory_operand\" \"=Us\")\n+\t(unspec:<MVE_B_ELEM> [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t\t      (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n+\t VSTRBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[1]);\n+   ops[1] = gen_rtx_REG (TImode, regno);\n+   ops[0]  = operands[0];\n+   output_asm_insn (\"vpst\\n\\tvstrbt.<V_sz_elem>\\t%q1, %E0\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])"}, {"sha": "1998f3eb62a8e86c0d8a5ecdba2c240f7c4b3fb8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -1,3 +1,22 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_p_s16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_p_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_p_u32.c: Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "704ac270d078338104ad881c2e76ba239b4707d5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_s16.c?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int8_t * addr, int16x8_t value, mve_pred16_t p)\n+{\n+  vstrbq_p_s16 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.16\"  }  } */\n+\n+void\n+foo1 (int8_t * addr, int16x8_t value, mve_pred16_t p)\n+{\n+  vstrbq_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.16\"  }  } */"}, {"sha": "0c6c0a9add4423f88c028c8543fbc93236667226", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_s32.c?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int8_t * addr, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrbq_p_s32 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.32\"  }  } */\n+\n+void\n+foo1 (int8_t * addr, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrbq_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.32\"  }  } */"}, {"sha": "aa8ce9286f85575c65f0bb156a31e9994fef5d1c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_p_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_s8.c?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int8_t * addr, int8x16_t value, mve_pred16_t p)\n+{\n+  vstrbq_p_s8 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.8\"  }  } */\n+\n+void\n+foo1 (int8_t * addr, int8x16_t value, mve_pred16_t p)\n+{\n+  vstrbq_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.8\"  }  } */"}, {"sha": "e9911c1eff66a0b3c411debec9d4a43e42cc665d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_p_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_u16.c?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint8_t * addr, uint16x8_t value, mve_pred16_t p)\n+{\n+  vstrbq_p_u16 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.16\"  }  } */\n+\n+void\n+foo1 (uint8_t * addr, uint16x8_t value, mve_pred16_t p)\n+{\n+  vstrbq_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.16\"  }  } */"}, {"sha": "39e0cd14e192fa7de53ff80f0d7290ec4fcb21fd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_u32.c?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint8_t * addr, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrbq_p_u32 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.32\"  }  } */\n+\n+void\n+foo1 (uint8_t * addr, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrbq_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.32\"  }  } */"}, {"sha": "809fe38b9ccaaa3e74afdb7ffef6a5ea6c5d86d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_p_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_p_u8.c?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint8_t * addr, uint8x16_t value, mve_pred16_t p)\n+{\n+  vstrbq_p_u8 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.8\"  }  } */\n+\n+void\n+foo1 (uint8_t * addr, uint8x16_t value, mve_pred16_t p)\n+{\n+  vstrbq_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.8\"  }  } */"}, {"sha": "8813fbe2eb1b6d5d4ba26863598655e3833283a5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_s16.c?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int8_t * base, uint16x8_t offset, int16x8_t value, mve_pred16_t p)\n+{\n+  vstrbq_scatter_offset_p_s16 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.16\"  }  } */\n+\n+void\n+foo1 (int8_t * base, uint16x8_t offset, int16x8_t value, mve_pred16_t p)\n+{\n+  vstrbq_scatter_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.16\"  }  } */"}, {"sha": "f6116ac76613f43e095422acdd3b5e943b8814c3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_s32.c?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int8_t * base, uint32x4_t offset, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrbq_scatter_offset_p_s32 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.32\"  }  } */\n+\n+void\n+foo1 (int8_t * base, uint32x4_t offset, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrbq_scatter_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.32\"  }  } */"}, {"sha": "7fa63efd8cc9398e80a34e13c44fa0593b7f8b4f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_s8.c?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int8_t * base, uint8x16_t offset, int8x16_t value, mve_pred16_t p)\n+{\n+  vstrbq_scatter_offset_p_s8 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.8\"  }  } */\n+\n+void\n+foo1 (int8_t * base, uint8x16_t offset, int8x16_t value, mve_pred16_t p)\n+{\n+  vstrbq_scatter_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.8\"  }  } */"}, {"sha": "3db472aa63a768f5d5558bc9fae7fffe90c94c3b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_u16.c?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint8_t * base, uint16x8_t offset, uint16x8_t value, mve_pred16_t p)\n+{\n+  vstrbq_scatter_offset_p_u16 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.16\"  }  } */\n+\n+void\n+foo1 (uint8_t * base, uint16x8_t offset, uint16x8_t value, mve_pred16_t p)\n+{\n+  vstrbq_scatter_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.16\"  }  } */"}, {"sha": "4055d70bb5fb2c9c3e092c8f26d7814830681422", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_u32.c?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint8_t * base, uint32x4_t offset, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrbq_scatter_offset_p_u32 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.32\"  }  } */\n+\n+void\n+foo1 (uint8_t * base, uint32x4_t offset, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrbq_scatter_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.32\"  }  } */"}, {"sha": "e96f7a228174e4544285f4fa25643b0460fa7c7e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_p_u8.c?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint8_t * base, uint8x16_t offset, uint8x16_t value, mve_pred16_t p)\n+{\n+  vstrbq_scatter_offset_p_u8 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.8\"  }  } */\n+\n+void\n+foo1 (uint8_t * base, uint8x16_t offset, uint8x16_t value, mve_pred16_t p)\n+{\n+  vstrbq_scatter_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.8\"  }  } */"}, {"sha": "0bce9e646e84e751c3868ada0d84ae33a9b36fdd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_p_s32.c?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32x4_t addr, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_base_p_s32 (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */\n+\n+void\n+foo1 (uint32x4_t addr, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_base_p (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */"}, {"sha": "59b21d2c7715a75b812b990b020af154ec73856a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e918c31418b00b4939efefc333cd378cabf43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_p_u32.c?ref=405e918c31418b00b4939efefc333cd378cabf43", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32x4_t addr, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_base_p_u32 (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */\n+\n+void\n+foo1 (uint32x4_t addr, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_base_p (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */"}]}