{"sha": "982629bea416df976686467f235e09cb1a5531cc", "node_id": "C_kwDOANBUbNoAKDk4MjYyOWJlYTQxNmRmOTc2Njg2NDY3ZjIzNWUwOWNiMWE1NTMxY2M", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-17T16:24:44Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-17T16:24:44Z"}, "message": "c++: constantness of non-dependent NTTP argument [PR107437]\n\nHere we're rejecting the use of the lambda capture of 't' (of empty\ntype) as a template argument ultimately because convert_nontype_argument\nchecks constantness using is_constant_expression, which returns false\nfor lambda captures since want_rval=false.  But in this case I believe\nan lvalue-to-rvalue conversion of the argument is implied, so we should\nbe using is_rvalue_constant_expression instead (which would return true\nhere).\n\nHowever, it doesn't seem necessary to consider constantness at all\nwhen deciding whether to instantiate a non-dependent argument in\nconvert_nontype_argument.  So this patch gets rid of the problematic\nconstantness test altogether, which incidentally also fixes the similar\ndg-ice'd testcase from PR87765.  This is in line with a similar\nchange we made to finish_decltype_type in r12-7564-gec0f53a3a542e7.\n\n\tPR c++/107437\n\tPR c++/87765\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (convert_nontype_argument): Relax is_nondep_const_expr\n\ttest to !inst_dep_expr_p.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1y/lambda-generic-107437.C: New test.\n\t* g++.dg/cpp1z/constexpr-lambda26.C: Remove dg-ice.", "tree": {"sha": "cf5147a81dca553986c01fd45bdd291375489197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf5147a81dca553986c01fd45bdd291375489197"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/982629bea416df976686467f235e09cb1a5531cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/982629bea416df976686467f235e09cb1a5531cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/982629bea416df976686467f235e09cb1a5531cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/982629bea416df976686467f235e09cb1a5531cc/comments", "author": null, "committer": null, "parents": [{"sha": "b1f91819e312d1e92d88a693718d791693cdf26c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f91819e312d1e92d88a693718d791693cdf26c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1f91819e312d1e92d88a693718d791693cdf26c"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "2516cca590ee0015daccdd7a07c5f7e3d85f6830", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/982629bea416df976686467f235e09cb1a5531cc/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/982629bea416df976686467f235e09cb1a5531cc/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=982629bea416df976686467f235e09cb1a5531cc", "patch": "@@ -7318,7 +7318,7 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n       && has_value_dependent_address (expr))\n     /* If we want the address and it's value-dependent, don't fold.  */;\n   else if (processing_template_decl\n-\t   && is_nondependent_constant_expression (expr))\n+\t   && !instantiation_dependent_expression_p (expr))\n     non_dep = true;\n   if (error_operand_p (expr))\n     return error_mark_node;"}, {"sha": "f9b4e0187e209e67069dd02aff3838a7ac8241dc", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-107437.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/982629bea416df976686467f235e09cb1a5531cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-107437.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/982629bea416df976686467f235e09cb1a5531cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-107437.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-107437.C?ref=982629bea416df976686467f235e09cb1a5531cc", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/107437\n+// { dg-do compile { target c++14 } }\n+\n+struct integral_constant {\n+  constexpr operator int() const { return 42; }\n+};\n+\n+template<int N>\n+struct A {\n+  static constexpr int value = N;\n+};\n+\n+template<class T>\n+void f(T t) {\n+  [=](auto) {\n+    A<t> a; // { dg-bogus \"constant\" }\n+    return a.value;\n+  }(0);\n+}\n+\n+template void f(integral_constant);"}, {"sha": "e66cd1dee64232ac1e35159032c3a93db319ef16", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda26.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/982629bea416df976686467f235e09cb1a5531cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/982629bea416df976686467f235e09cb1a5531cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda26.C?ref=982629bea416df976686467f235e09cb1a5531cc", "patch": "@@ -1,7 +1,6 @@\n // PR c++/87765\n // { dg-do compile { target c++17 } }\n // { dg-additional-options \"-fchecking\" }\n-// { dg-ice \"cxx_eval_constant_expression\" }\n \n template <int N>\n using foo = int;"}]}