{"sha": "ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ5ZjY2OTRmYTI1ZjVkZGFhMWQwZDExYTNkMTkxNjE1Y2VjMmI1NQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2014-10-24T11:45:24Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2014-10-24T11:45:24Z"}, "message": "cmp_op.inc: New file.\n\n2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/cmp_op.inc: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vceq.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcge.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcgt.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcle.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vclt.c: Likewise.\n\nFrom-SVN: r216644", "tree": {"sha": "82128915e7f0d090171e19703e4918a81eea2b6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82128915e7f0d090171e19703e4918a81eea2b6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55/comments", "author": null, "committer": null, "parents": [{"sha": "25b0d373ba3b732e80bef0cc515655d1c560afc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b0d373ba3b732e80bef0cc515655d1c560afc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25b0d373ba3b732e80bef0cc515655d1c560afc2"}], "stats": {"total": 657, "additions": 657, "deletions": 0}, "files": [{"sha": "53d16fb7cb1796758592148b8ecc77c9387ca029", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55", "patch": "@@ -1,3 +1,12 @@\n+2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/cmp_op.inc: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vceq.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcge.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcgt.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcle.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vclt.c: Likewise.\n+\n 2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/binary_op.inc: New file."}, {"sha": "a09c5f5bb29ae2a3d44ce9bcaabc8c8bf42d7576", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/cmp_op.inc", "status": "added", "additions": 224, "deletions": 0, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcmp_op.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcmp_op.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcmp_op.inc?ref=ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55", "patch": "@@ -0,0 +1,224 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+#include <math.h>\n+\n+/* Additional expected results declaration, they are initialized in\n+   each test file.  */\n+extern ARRAY(expected_uint, uint, 8, 8);\n+extern ARRAY(expected_uint, uint, 16, 4);\n+extern ARRAY(expected_uint, uint, 32, 2);\n+extern ARRAY(expected_q_uint, uint, 8, 16);\n+extern ARRAY(expected_q_uint, uint, 16, 8);\n+extern ARRAY(expected_q_uint, uint, 32, 4);\n+extern ARRAY(expected_float, uint, 32, 2);\n+extern ARRAY(expected_q_float, uint, 32, 4);\n+extern ARRAY(expected_uint2, uint, 32, 2);\n+extern ARRAY(expected_uint3, uint, 32, 2);\n+extern ARRAY(expected_uint4, uint, 32, 2);\n+extern ARRAY(expected_nan, uint, 32, 2);\n+extern ARRAY(expected_mnan, uint, 32, 2);\n+extern ARRAY(expected_nan2, uint, 32, 2);\n+extern ARRAY(expected_inf, uint, 32, 2);\n+extern ARRAY(expected_minf, uint, 32, 2);\n+extern ARRAY(expected_inf2, uint, 32, 2);\n+extern ARRAY(expected_mzero, uint, 32, 2);\n+extern ARRAY(expected_p8, uint, 8, 8);\n+extern ARRAY(expected_q_p8, uint, 8, 16);\n+\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  /* Basic test: y=vcomp(x1,x2), then store the result.  */\n+#define TEST_VCOMP1(INSN, Q, T1, T2, T3, W, N)\t\t\t\t\\\n+  VECT_VAR(vector_res, T3, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t      VECT_VAR(vector2, T1, W, N));\t\t\t\\\n+  vst1##Q##_u##W(VECT_VAR(result, T3, W, N), VECT_VAR(vector_res, T3, W, N))\n+\n+#define TEST_VCOMP(INSN, Q, T1, T2, T3, W, N)\t\t\t\t\\\n+  TEST_VCOMP1(INSN, Q, T1, T2, T3, W, N)\n+\n+  /* No need for 64 bits elements.  */\n+  DECL_VARIABLE(vector, int, 8, 8);\n+  DECL_VARIABLE(vector, int, 16, 4);\n+  DECL_VARIABLE(vector, int, 32, 2);\n+  DECL_VARIABLE(vector, uint, 8, 8);\n+  DECL_VARIABLE(vector, uint, 16, 4);\n+  DECL_VARIABLE(vector, uint, 32, 2);\n+  DECL_VARIABLE(vector, float, 32, 2);\n+  DECL_VARIABLE(vector, int, 8, 16);\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector, uint, 8, 16);\n+  DECL_VARIABLE(vector, uint, 16, 8);\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector, float, 32, 4);\n+\n+  DECL_VARIABLE(vector2, int, 8, 8);\n+  DECL_VARIABLE(vector2, int, 16, 4);\n+  DECL_VARIABLE(vector2, int, 32, 2);\n+  DECL_VARIABLE(vector2, uint, 8, 8);\n+  DECL_VARIABLE(vector2, uint, 16, 4);\n+  DECL_VARIABLE(vector2, uint, 32, 2);\n+  DECL_VARIABLE(vector2, float, 32, 2);\n+  DECL_VARIABLE(vector2, int, 8, 16);\n+  DECL_VARIABLE(vector2, int, 16, 8);\n+  DECL_VARIABLE(vector2, int, 32, 4);\n+  DECL_VARIABLE(vector2, uint, 8, 16);\n+  DECL_VARIABLE(vector2, uint, 16, 8);\n+  DECL_VARIABLE(vector2, uint, 32, 4);\n+  DECL_VARIABLE(vector2, float, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, uint, 8, 8);\n+  DECL_VARIABLE(vector_res, uint, 16, 4);\n+  DECL_VARIABLE(vector_res, uint, 32, 2);\n+  DECL_VARIABLE(vector_res, uint, 8, 16);\n+  DECL_VARIABLE(vector_res, uint, 16, 8);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+\n+  clean_results ();\n+\n+  /* There is no 64 bits variant, don't use the generic initializer.  */\n+  VLOAD(vector, buffer, , int, s, 8, 8);\n+  VLOAD(vector, buffer, , int, s, 16, 4);\n+  VLOAD(vector, buffer, , int, s, 32, 2);\n+  VLOAD(vector, buffer, , uint, u, 8, 8);\n+  VLOAD(vector, buffer, , uint, u, 16, 4);\n+  VLOAD(vector, buffer, , uint, u, 32, 2);\n+  VLOAD(vector, buffer, , float, f, 32, 2);\n+\n+  VLOAD(vector, buffer, q, int, s, 8, 16);\n+  VLOAD(vector, buffer, q, int, s, 16, 8);\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+  VLOAD(vector, buffer, q, uint, u, 8, 16);\n+  VLOAD(vector, buffer, q, uint, u, 16, 8);\n+  VLOAD(vector, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector, buffer, q, float, f, 32, 4);\n+\n+  /* Choose init value arbitrarily, will be used for vector\n+     comparison.  */\n+  VDUP(vector2, , int, s, 8, 8, -10);\n+  VDUP(vector2, , int, s, 16, 4, -14);\n+  VDUP(vector2, , int, s, 32, 2, -16);\n+  VDUP(vector2, , uint, u, 8, 8, 0xF3);\n+  VDUP(vector2, , uint, u, 16, 4, 0xFFF2);\n+  VDUP(vector2, , uint, u, 32, 2, 0xFFFFFFF1);\n+  VDUP(vector2, , float, f, 32, 2, -15.0f);\n+\n+  VDUP(vector2, q, int, s, 8, 16, -4);\n+  VDUP(vector2, q, int, s, 16, 8, -10);\n+  VDUP(vector2, q, int, s, 32, 4, -14);\n+  VDUP(vector2, q, uint, u, 8, 16, 0xF4);\n+  VDUP(vector2, q, uint, u, 16, 8, 0xFFF6);\n+  VDUP(vector2, q, uint, u, 32, 4, 0xFFFFFFF2);\n+  VDUP(vector2, q, float, f, 32, 4, -14.0f);\n+\n+  /* The comparison operators produce only unsigned results, which\n+     means that our tests with uint* inputs write their results in the\n+     same vectors as the int* variants. As a consequence, we have to\n+     execute and test the int* first, then the uint* ones.\n+     Same thing for float and poly8.\n+  */\n+\n+  /* Apply operator named INSN_NAME.  */\n+  TEST_VCOMP(INSN_NAME, , int, s, uint, 8, 8);\n+  TEST_VCOMP(INSN_NAME, , int, s, uint, 16, 4);\n+  TEST_VCOMP(INSN_NAME, , int, s, uint, 32, 2);\n+  TEST_VCOMP(INSN_NAME, q, int, s, uint, 8, 16);\n+  TEST_VCOMP(INSN_NAME, q, int, s, uint, 16, 8);\n+  TEST_VCOMP(INSN_NAME, q, int, s, uint, 32, 4);\n+\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+\n+  /* Now the uint* variants.  */\n+  TEST_VCOMP(INSN_NAME, , uint, u, uint, 8, 8);\n+  TEST_VCOMP(INSN_NAME, , uint, u, uint, 16, 4);\n+  TEST_VCOMP(INSN_NAME, , uint, u, uint, 32, 2);\n+  TEST_VCOMP(INSN_NAME, q, uint, u, uint, 8, 16);\n+  TEST_VCOMP(INSN_NAME, q, uint, u, uint, 16, 8);\n+  TEST_VCOMP(INSN_NAME, q, uint, u, uint, 32, 4);\n+\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_uint, \"\");\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_uint, \"\");\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_uint, \"\");\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_q_uint, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_q_uint, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_q_uint, \"\");\n+\n+  /* The float variants.  */\n+  TEST_VCOMP(INSN_NAME, , float, f, uint, 32, 2);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_float, \"\");\n+\n+  TEST_VCOMP(INSN_NAME, q, float, f, uint, 32, 4);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_q_float, \"\");\n+\n+  /* Some \"special\" input values to test some corner cases.  */\n+  /* Extra tests to have 100% coverage on all the variants.  */\n+  VDUP(vector2, , uint, u, 32, 2, 0xFFFFFFF0);\n+  TEST_VCOMP(INSN_NAME, , uint, u, uint, 32, 2);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_uint2, \"uint 0xfffffff0\");\n+\n+  VDUP(vector2, , int, s, 32, 2, -15);\n+  TEST_VCOMP(INSN_NAME, , int, s, uint, 32, 2);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_uint3, \"int -15\");\n+\n+  VDUP(vector2, , float, f, 32, 2, -16.0f);\n+  TEST_VCOMP(INSN_NAME, , float, f, uint, 32, 2);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_uint4, \"float -16.0f\");\n+\n+\n+  /* Extra FP tests with special values (NaN, ....).  */\n+  VDUP(vector, , float, f, 32, 2, 1.0);\n+  VDUP(vector2, , float, f, 32, 2, NAN);\n+  TEST_VCOMP(INSN_NAME, , float, f, uint, 32, 2);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_nan, \"FP special (NaN)\");\n+\n+  VDUP(vector, , float, f, 32, 2, 1.0);\n+  VDUP(vector2, , float, f, 32, 2, -NAN);\n+  TEST_VCOMP(INSN_NAME, , float, f, uint, 32, 2);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_mnan, \" FP special (-NaN)\");\n+\n+  VDUP(vector, , float, f, 32, 2, NAN);\n+  VDUP(vector2, , float, f, 32, 2, 1.0);\n+  TEST_VCOMP(INSN_NAME, , float, f, uint, 32, 2);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_nan2, \" FP special (NaN)\");\n+\n+  VDUP(vector, , float, f, 32, 2, 1.0);\n+  VDUP(vector2, , float, f, 32, 2, HUGE_VALF);\n+  TEST_VCOMP(INSN_NAME, , float, f, uint, 32, 2);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_inf, \" FP special (inf)\");\n+\n+  VDUP(vector, , float, f, 32, 2, 1.0);\n+  VDUP(vector2, , float, f, 32, 2, -HUGE_VALF);\n+  TEST_VCOMP(INSN_NAME, , float, f, uint, 32, 2);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_minf, \" FP special (-inf)\");\n+\n+  VDUP(vector, , float, f, 32, 2, HUGE_VALF);\n+  VDUP(vector2, , float, f, 32, 2, 1.0);\n+  TEST_VCOMP(INSN_NAME, , float, f, uint, 32, 2);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_inf2, \" FP special (inf)\");\n+\n+  VDUP(vector, , float, f, 32, 2, -0.0);\n+  VDUP(vector2, , float, f, 32, 2, 0.0);\n+  TEST_VCOMP(INSN_NAME, , float, f, uint, 32, 2);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_mzero, \" FP special (-0.0)\");\n+\n+#ifdef EXTRA_TESTS\n+  EXTRA_TESTS();\n+#endif\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+\n+  return 0;\n+}"}, {"sha": "aa095dfcf0d25cb343d114658868f3dac213ff73", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vceq.c", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvceq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvceq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvceq.c?ref=ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55", "patch": "@@ -0,0 +1,113 @@\n+#define INSN_NAME vceq\n+#define TEST_MSG \"VCEQ/VCEQQ\"\n+\n+/* Extra tests for _p8 variants, which exist only for vceq.  */\n+void exec_vceq_p8(void);\n+#define EXTRA_TESTS exec_vceq_p8\n+\n+#include \"cmp_op.inc\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x0, 0x0, 0xffff, 0x0 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffff, 0x0 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t0x333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0xff, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0x0, 0xffff, 0x0 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x0, 0x0, 0xffffffff, 0x0 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+VECT_VAR_DECL(expected_uint,uint,8,8) [] = { 0x0, 0x0, 0x0, 0xff,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_uint,uint,16,4) [] = { 0x0, 0x0, 0xffff, 0x0 };\n+VECT_VAR_DECL(expected_uint,uint,32,2) [] = { 0x0, 0xffffffff };\n+\n+VECT_VAR_DECL(expected_q_uint,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0xff, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_q_uint,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0x0, 0x0, 0xffff, 0x0 };\n+VECT_VAR_DECL(expected_q_uint,uint,32,4) [] = { 0x0, 0x0, 0xffffffff, 0x0 };\n+\n+VECT_VAR_DECL(expected_float,uint,32,2) [] = { 0x0, 0xffffffff };\n+VECT_VAR_DECL(expected_q_float,uint,32,4) [] = { 0x0, 0x0, 0xffffffff, 0x0 };\n+\n+VECT_VAR_DECL(expected_uint2,uint,32,2) [] = { 0xffffffff, 0x0 };\n+VECT_VAR_DECL(expected_uint3,uint,32,2) [] = { 0x0, 0xffffffff };\n+VECT_VAR_DECL(expected_uint4,uint,32,2) [] = { 0xffffffff, 0x0 };\n+\n+VECT_VAR_DECL(expected_nan,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_mnan,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_nan2,uint,32,2) [] = { 0x0, 0x0 };\n+\n+VECT_VAR_DECL(expected_inf,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_minf,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_inf2,uint,32,2) [] = { 0x0, 0x0 };\n+\n+VECT_VAR_DECL(expected_mzero,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+\n+VECT_VAR_DECL(expected_p8,uint,8,8) [] = { 0x0, 0x0, 0x0, 0xff,\n+\t\t\t\t\t   0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_q_p8,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t      0xff, 0x0, 0x0, 0x0,\n+\t\t\t\t\t      0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n+\n+void exec_vceq_p8(void)\n+{\n+  DECL_VARIABLE(vector, poly, 8, 8);\n+  DECL_VARIABLE(vector, poly, 8, 16);\n+\n+  DECL_VARIABLE(vector2, poly, 8, 8);\n+  DECL_VARIABLE(vector2, poly, 8, 16);\n+\n+  DECL_VARIABLE(vector_res, uint, 8, 8);\n+  DECL_VARIABLE(vector_res, uint, 8, 16);\n+\n+  clean_results ();\n+\n+  VLOAD(vector, buffer, , poly, p, 8, 8);\n+  VLOAD(vector, buffer, q, poly, p, 8, 16);\n+\n+  VDUP(vector2, , poly, p, 8, 8, 0xF3);\n+  VDUP(vector2, q, poly, p, 8, 16, 0xF4);\n+\n+  TEST_VCOMP(INSN_NAME, , poly, p, uint, 8, 8);\n+  TEST_VCOMP(INSN_NAME, q, poly, p, uint, 8, 16);\n+\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_p8, \"p8\");\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_q_p8, \"p8\");\n+}"}, {"sha": "236fd82032aaf2d7f9bedbe767cb82c8ca2b642e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcge.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcge.c?ref=ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55", "patch": "@@ -0,0 +1,76 @@\n+#define INSN_NAME vcge\n+#define TEST_MSG \"VCGE/VCGEQ\"\n+\n+#include \"cmp_op.inc\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x0, 0x0, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t0x333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0x0, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x0, 0x0, 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+VECT_VAR_DECL(expected_uint,uint,8,8) [] = { 0x0, 0x0, 0x0, 0xff,\n+\t\t\t\t\t     0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_uint,uint,16,4) [] = { 0x0, 0x0, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_uint,uint,32,2) [] = { 0x0, 0xffffffff };\n+\n+VECT_VAR_DECL(expected_q_uint,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_q_uint,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0, 0x0, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_q_uint,uint,32,4) [] = { 0x0, 0x0, 0xffffffff, 0xffffffff };\n+\n+VECT_VAR_DECL(expected_float,uint,32,2) [] = { 0x0, 0xffffffff };\n+VECT_VAR_DECL(expected_q_float,uint,32,4) [] = { 0x0, 0x0, 0xffffffff, 0xffffffff };\n+\n+VECT_VAR_DECL(expected_uint2,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_uint3,uint,32,2) [] = { 0x0, 0xffffffff };\n+VECT_VAR_DECL(expected_uint4,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+\n+VECT_VAR_DECL(expected_nan,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_mnan,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_nan2,uint,32,2) [] = { 0x0, 0x0 };\n+\n+VECT_VAR_DECL(expected_inf,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_minf,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_inf2,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+\n+VECT_VAR_DECL(expected_mzero,uint,32,2) [] = { 0xffffffff, 0xffffffff };"}, {"sha": "23aaa01576e8225655bec592fecbee757b693fa9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcgt.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgt.c?ref=ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55", "patch": "@@ -0,0 +1,76 @@\n+#define INSN_NAME vcgt\n+#define TEST_MSG \"VCGT/VCGTQ\"\n+\n+#include \"cmp_op.inc\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x0, 0x0, 0x0, 0xffff };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x0, 0xffffffff };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t0x333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0xffff };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x0, 0x0, 0x0, 0xffffffff };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+VECT_VAR_DECL(expected_uint,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t     0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_uint,uint,16,4) [] = { 0x0, 0x0, 0x0, 0xffff };\n+VECT_VAR_DECL(expected_uint,uint,32,2) [] = { 0x0, 0x0 };\n+\n+VECT_VAR_DECL(expected_q_uint,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0x0, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_q_uint,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0x0, 0x0, 0x0, 0xffff };\n+VECT_VAR_DECL(expected_q_uint,uint,32,4) [] = { 0x0, 0x0, 0x0, 0xffffffff };\n+\n+VECT_VAR_DECL(expected_float,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_q_float,uint,32,4) [] = { 0x0, 0x0, 0x0, 0xffffffff };\n+\n+VECT_VAR_DECL(expected_uint2,uint,32,2) [] = { 0x0, 0xffffffff };\n+VECT_VAR_DECL(expected_uint3,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_uint4,uint,32,2) [] = { 0x0, 0xffffffff };\n+\n+VECT_VAR_DECL(expected_nan,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_mnan,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_nan2,uint,32,2) [] = { 0x0, 0x0 };\n+\n+VECT_VAR_DECL(expected_inf,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_minf,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_inf2,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+\n+VECT_VAR_DECL(expected_mzero,uint,32,2) [] = { 0x0, 0x0 };"}, {"sha": "e4cad0cda8042c74755691723339a9b6deb315bf", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcle.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcle.c?ref=ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55", "patch": "@@ -0,0 +1,80 @@\n+#define INSN_NAME vcle\n+#define TEST_MSG \"VCLE/VCLEQ\"\n+\n+#include \"cmp_op.inc\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t0xff, 0xff, 0xff, 0x0 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xffff, 0xffff, 0xffff, 0x0 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffff, 0x0 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t0x333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t 0xffff, 0xffff, 0xffff, 0x0 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t 0xffffffff, 0x0 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+VECT_VAR_DECL(expected_uint,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_uint,uint,16,4) [] = { 0xffff, 0xffff, 0xffff, 0x0 };\n+VECT_VAR_DECL(expected_uint,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+\n+VECT_VAR_DECL(expected_q_uint,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t0xff, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_q_uint,uint,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t\t0xffff, 0xffff, 0xffff, 0x0 };\n+VECT_VAR_DECL(expected_q_uint,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t\t0xffffffff, 0x0 };\n+\n+VECT_VAR_DECL(expected_float,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_q_float,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t\t 0xffffffff, 0x0 };\n+\n+VECT_VAR_DECL(expected_uint2,uint,32,2) [] = { 0xffffffff, 0x0 };\n+VECT_VAR_DECL(expected_uint3,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_uint4,uint,32,2) [] = { 0xffffffff, 0x0 };\n+\n+VECT_VAR_DECL(expected_nan,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_mnan,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_nan2,uint,32,2) [] = { 0x0, 0x0 };\n+\n+VECT_VAR_DECL(expected_inf,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_minf,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_inf2,uint,32,2) [] = { 0x0, 0x0 };\n+\n+VECT_VAR_DECL(expected_mzero,uint,32,2) [] = { 0xffffffff, 0xffffffff };"}, {"sha": "d437eaec7e64cc93b8786807db6cf1f5bb1ef51e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vclt.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclt.c?ref=ed9f6694fa25f5ddaa1d0d11a3d191615cec2b55", "patch": "@@ -0,0 +1,79 @@\n+#define INSN_NAME vclt\n+#define TEST_MSG \"VCLT/VCLTQ\"\n+\n+#include \"cmp_op.inc\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t0xff, 0xff, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xffff, 0xffff, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t0x333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t 0xffff, 0xffff, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffffff, 0xffffffff, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+VECT_VAR_DECL(expected_uint,uint,8,8) [] = { 0xff, 0xff, 0xff, 0x0,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_uint,uint,16,4) [] = { 0xffff, 0xffff, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_uint,uint,32,2) [] = { 0xffffffff, 0x0 };\n+\n+VECT_VAR_DECL(expected_q_uint,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_q_uint,uint,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t\t0xffff, 0xffff, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_q_uint,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t\t0x0, 0x0 };\n+\n+VECT_VAR_DECL(expected_float,uint,32,2) [] = { 0xffffffff, 0x0 };\n+VECT_VAR_DECL(expected_q_float,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t\t 0x0, 0x0 };\n+\n+VECT_VAR_DECL(expected_uint2,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_uint3,uint,32,2) [] = { 0xffffffff, 0x0 };\n+VECT_VAR_DECL(expected_uint4,uint,32,2) [] = { 0x0, 0x0 };\n+\n+VECT_VAR_DECL(expected_nan,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_mnan,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_nan2,uint,32,2) [] = { 0x0, 0x0 };\n+\n+VECT_VAR_DECL(expected_inf,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_minf,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_inf2,uint,32,2) [] = { 0x0, 0x0 };\n+\n+VECT_VAR_DECL(expected_mzero,uint,32,2) [] = { 0x0, 0x0 };"}]}