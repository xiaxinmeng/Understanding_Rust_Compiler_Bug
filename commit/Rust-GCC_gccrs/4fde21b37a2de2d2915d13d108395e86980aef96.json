{"sha": "4fde21b37a2de2d2915d13d108395e86980aef96", "node_id": "C_kwDOANBUbNoAKDRmZGUyMWIzN2EyZGUyZDI5MTVkMTNkMTA4Mzk1ZTg2OTgwYWVmOTY", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-03T13:54:50Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-03T14:21:03Z"}, "message": "macros: Substitute separator if necessary when expanding repetitions", "tree": {"sha": "c2d178584965f196fa278b09d8615799c3363daf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2d178584965f196fa278b09d8615799c3363daf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fde21b37a2de2d2915d13d108395e86980aef96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fde21b37a2de2d2915d13d108395e86980aef96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fde21b37a2de2d2915d13d108395e86980aef96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fde21b37a2de2d2915d13d108395e86980aef96/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab4533dab7a5be7c900012f40dbeb3fc0cce0456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab4533dab7a5be7c900012f40dbeb3fc0cce0456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab4533dab7a5be7c900012f40dbeb3fc0cce0456"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "f9f2005b72bb1a13528b673dbe73b829c0e84720", "filename": "gcc/rust/expand/rust-macro-substitute-ctx.cc", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fde21b37a2de2d2915d13d108395e86980aef96/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fde21b37a2de2d2915d13d108395e86980aef96/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc?ref=4fde21b37a2de2d2915d13d108395e86980aef96", "patch": "@@ -33,7 +33,9 @@ SubstituteCtx::substitute_metavar (std::unique_ptr<AST::Token> &metavar)\n }\n \n std::vector<std::unique_ptr<AST::Token>>\n-SubstituteCtx::substitute_repetition (size_t pattern_start, size_t pattern_end)\n+SubstituteCtx::substitute_repetition (\n+  size_t pattern_start, size_t pattern_end,\n+  std::unique_ptr<AST::Token> separator_token)\n {\n   rust_assert (pattern_end < macro.size ());\n \n@@ -117,6 +119,11 @@ SubstituteCtx::substitute_repetition (size_t pattern_start, size_t pattern_end)\n       auto substitute_context = SubstituteCtx (input, new_macro, sub_map);\n       auto new_tokens = substitute_context.substitute_tokens ();\n \n+      // Skip the first repetition, but add the separator to the expanded\n+      // tokens if it is present\n+      if (i != 0 && separator_token)\n+\texpanded.emplace_back (separator_token->clone_token ());\n+\n       for (auto &new_token : new_tokens)\n \texpanded.emplace_back (new_token->clone_token ());\n     }\n@@ -127,6 +134,13 @@ SubstituteCtx::substitute_repetition (size_t pattern_start, size_t pattern_end)\n   return expanded;\n }\n \n+static bool\n+is_rep_op (std::unique_ptr<AST::Token> &tok)\n+{\n+  auto id = tok->get_id ();\n+  return id == QUESTION_MARK || id == ASTERISK || id == PLUS;\n+}\n+\n std::pair<std::vector<std::unique_ptr<AST::Token>>, size_t>\n SubstituteCtx::substitute_token (size_t token_idx)\n {\n@@ -148,20 +162,34 @@ SubstituteCtx::substitute_token (size_t token_idx)\n \t     pattern_end++)\n \t  ;\n \n+\tstd::unique_ptr<AST::Token> separator_token = nullptr;\n+\t// FIXME: Can this go out of bounds?\n+\tauto &post_pattern_token = macro.at (pattern_end + 1);\n+\tif (!is_rep_op (post_pattern_token))\n+\t  separator_token = post_pattern_token->clone_token ();\n+\n+\t// Amount of tokens to skip\n+\tauto to_skip = 0;\n+\t// Parentheses\n+\tto_skip += 2;\n+\t// Repetition operator\n+\tto_skip += 1;\n+\t// Separator\n+\tif (separator_token)\n+\t  to_skip += 1;\n+\n \t// FIXME: This skips whitespaces... Is that okay??\n-\t// FIXME: Is there any existing parsing function that allows us to parse\n-\t// a macro pattern?\n+\t// FIXME: Is there any existing parsing function that allows us to\n+\t// parse a macro pattern?\n \n \t// FIXME: Add error handling in the case we haven't found a matching\n \t// closing delimiter\n \n \t// FIXME: We need to parse the repetition token now\n \n-\treturn {\n-\t  substitute_repetition (pattern_start, pattern_end),\n-\t  // + 2 for the opening and closing parentheses which are mandatory\n-\t  // + 1 for the repetitor (+, *, ?)\n-\t  pattern_end - pattern_start + 3};\n+\treturn {substitute_repetition (pattern_start, pattern_end,\n+\t\t\t\t       std::move (separator_token)),\n+\t\tpattern_end - pattern_start + to_skip};\n       }\n       // TODO: We need to check if the $ was alone. In that case, do\n       // not error out: Simply act as if there was an empty identifier"}, {"sha": "ed83926c32ce77ffaf4ffd3723e197892c8607ad", "filename": "gcc/rust/expand/rust-macro-substitute-ctx.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fde21b37a2de2d2915d13d108395e86980aef96/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fde21b37a2de2d2915d13d108395e86980aef96/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.h?ref=4fde21b37a2de2d2915d13d108395e86980aef96", "patch": "@@ -49,12 +49,14 @@ class SubstituteCtx\n    * Substitute a macro repetition by its given fragments\n    *\n    * @param pattern_start Start index of the pattern tokens\n-   * @param pattern_end Index  Amount of tokens in the pattern\n+   * @param pattern_end End index of the patterns tokens\n+   * @param separator Optional separator to include when expanding tokens\n    *\n    * @return A vector containing the repeated pattern\n    */\n   std::vector<std::unique_ptr<AST::Token>>\n-  substitute_repetition (size_t pattern_start, size_t pattern_end);\n+  substitute_repetition (size_t pattern_start, size_t pattern_end,\n+\t\t\t std::unique_ptr<AST::Token> separator);\n \n   /**\n    * Substitute a given token by its appropriate representation"}]}