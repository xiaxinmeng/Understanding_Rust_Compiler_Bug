{"sha": "86fa911a16e131d69d9db7e6a9f5e63693f5aa09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZmYTkxMWExNmUxMzFkNjlkOWRiN2U2YTlmNWU2MzY5M2Y1YWEwOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-08-02T17:18:18Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-08-02T17:18:18Z"}, "message": "(put_var_into_stack, assign_parms): If -fcheck-memory-usage, set the\nrights of pushed variable.\n\nFrom-SVN: r14614", "tree": {"sha": "e4a150009c1f994f43dfb15acd60e1bf56793033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4a150009c1f994f43dfb15acd60e1bf56793033"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86fa911a16e131d69d9db7e6a9f5e63693f5aa09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86fa911a16e131d69d9db7e6a9f5e63693f5aa09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86fa911a16e131d69d9db7e6a9f5e63693f5aa09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86fa911a16e131d69d9db7e6a9f5e63693f5aa09/comments", "author": null, "committer": null, "parents": [{"sha": "151b783bcaefa162d17c890307a545af171959bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/151b783bcaefa162d17c890307a545af171959bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/151b783bcaefa162d17c890307a545af171959bf"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "d12db1e8b7dd9fedd6a42f0b44ee024db0f70e88", "filename": "gcc/function.c", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86fa911a16e131d69d9db7e6a9f5e63693f5aa09/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86fa911a16e131d69d9db7e6a9f5e63693f5aa09/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=86fa911a16e131d69d9db7e6a9f5e63693f5aa09", "patch": "@@ -1381,6 +1381,15 @@ put_var_into_stack (decl)\n       if (GET_CODE (XEXP (reg, 0)) == PLUS)\n \tXEXP (reg, 0) = copy_rtx (XEXP (reg, 0));\n     }\n+  else\n+    return;\n+  \n+  if (flag_check_memory_usage)\n+    emit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3,\n+\t\t       XEXP (reg, 0), ptr_mode,\n+\t\t       GEN_INT (GET_MODE_SIZE (GET_MODE (reg))),\n+\t\t       TYPE_MODE (sizetype),\n+\t\t       GEN_INT (MEMORY_USE_RW), QImode);\n }\n \n /* Subroutine of put_var_into_stack.  This puts a single pseudo reg REG\n@@ -3686,6 +3695,18 @@ assign_parms (fndecl, second_time)\n \t  else\n \t    stack_parm = gen_rtx (MEM, nominal_mode,\n \t\t\t\t  gen_rtx (PLUS, Pmode,\n+\t      if (flag_check_memory_usage)\n+\t\t{\n+\t\t  push_to_sequence (conversion_insns);\n+\t\t  emit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3,\n+\t\t\t\t     XEXP (stack_parm, 0), ptr_mode,\n+\t\t\t\t     GEN_INT (int_size_in_bytes \n+\t\t\t\t\t      (TREE_TYPE (parm))),\n+\t\t\t\t     TYPE_MODE (sizetype),\n+\t\t\t\t     GEN_INT (MEMORY_USE_RW), QImode);\n+\t\t  conversion_insns = get_insns ();\n+\t\t  end_sequence ();\n+\t\t}\n \t\t\t\t\t   internal_arg_pointer, offset_rtx));\n \n \t  /* If this is a memory ref that contains aggregate components,\n@@ -3906,6 +3927,12 @@ assign_parms (fndecl, second_time)\n \n \t      store_expr (parm, copy, 0);\n \t      emit_move_insn (parmreg, XEXP (copy, 0));\n+\t      if (flag_check_memory_usage)\n+\t\temit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3,\n+\t\t\t\t   XEXP (copy, 0), ptr_mode,\n+\t\t\t\t   GEN_INT (int_size_in_bytes (type)),\n+\t\t\t\t   TYPE_MODE (sizetype),\n+\t\t\t\t   GEN_INT (MEMORY_USE_RW), QImode);\n \t      conversion_insns = get_insns ();\n \t      did_conversion = 1;\n \t      end_sequence ();\n@@ -4055,7 +4082,19 @@ assign_parms (fndecl, second_time)\n \t\temit_move_insn (validize_mem (stack_parm),\n \t\t\t\tvalidize_mem (entry_parm));\n \t    }\n+\t  if (flag_check_memory_usage)\n+\t    {\n+\t      push_to_sequence (conversion_insns);\n+\t      emit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3,\n+\t\t\t\t XEXP (stack_parm, 0), ptr_mode,\n+\t\t\t\t GEN_INT (GET_MODE_SIZE (GET_MODE \n+\t\t\t\t\t\t\t (entry_parm))),\n+\t\t\t\t TYPE_MODE (sizetype),\n+\t\t\t\t GEN_INT (MEMORY_USE_RW), QImode);\n \n+\t      conversion_insns = get_insns ();\n+\t      end_sequence ();\n+\t    }\n \t  DECL_RTL (parm) = stack_parm;\n \t}\n       \n@@ -4110,7 +4149,7 @@ assign_parms (fndecl, second_time)\n     = (stack_args_size.var == 0 ? GEN_INT (-stack_args_size.constant)\n        : expand_expr (size_binop (MINUS_EXPR, stack_args_size.var,\t\n \t\t\t\t  size_int (-stack_args_size.constant)),   \n-\t\t      NULL_RTX, VOIDmode, 0));\n+\t\t      NULL_RTX, VOIDmode, EXPAND_MEMORY_USE_BAD));\n #else\n   current_function_arg_offset_rtx = ARGS_SIZE_RTX (stack_args_size);\n #endif\n@@ -5403,7 +5442,8 @@ expand_function_start (subr, parms_have_cleanups)\n   /* Evaluate now the sizes of any types declared among the arguments.  */\n   for (tem = nreverse (get_pending_sizes ()); tem; tem = TREE_CHAIN (tem))\n     {\n-      expand_expr (TREE_VALUE (tem), const0_rtx, VOIDmode, 0);\n+      expand_expr (TREE_VALUE (tem), const0_rtx, VOIDmode,\n+\t\t   EXPAND_MEMORY_USE_BAD);\n       /* Flush the queue in case this parameter declaration has\n \t side-effects.  */\n       emit_queue ();"}]}