{"sha": "d48ab0103a07218cc7cb54d705d7b22b596648bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ4YWIwMTAzYTA3MjE4Y2M3Y2I1NGQ3MDVkN2IyMmI1OTY2NDhiZg==", "commit": {"author": {"name": "James Bowman", "email": "james.bowman@ftdichip.com", "date": "2016-06-06T02:31:42Z"}, "committer": {"name": "James Bowman", "email": "jamesbowman@gcc.gnu.org", "date": "2016-06-06T02:31:42Z"}, "message": "ft32.c (ft32_setup_incoming_varargs, [...]): Handle pretend_args.\n\n[gcc]\n   * config/ft32/ft32.c (ft32_setup_incoming_varargs,\n   ft32_expand_prolog, ft32_expand_epilogue):\n   Handle pretend_args.\n   * config/ft32/ft32.h: Remove OUTGOING_REG_PARM_STACK_SPACE.\n   * config/ft32/ft32.md: Add pretend_returner.\n\nFrom-SVN: r237116", "tree": {"sha": "6728e6336f766808237f39629d8781ecf55edc2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6728e6336f766808237f39629d8781ecf55edc2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d48ab0103a07218cc7cb54d705d7b22b596648bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48ab0103a07218cc7cb54d705d7b22b596648bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d48ab0103a07218cc7cb54d705d7b22b596648bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48ab0103a07218cc7cb54d705d7b22b596648bf/comments", "author": null, "committer": null, "parents": [{"sha": "24673d5598cb06fda10319c4fb220c65428d98e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24673d5598cb06fda10319c4fb220c65428d98e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24673d5598cb06fda10319c4fb220c65428d98e2"}], "stats": {"total": 133, "additions": 75, "deletions": 58}, "files": [{"sha": "0b3e3aa81dd161388b6c5fa6a21e5a3c25dccf12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48ab0103a07218cc7cb54d705d7b22b596648bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48ab0103a07218cc7cb54d705d7b22b596648bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d48ab0103a07218cc7cb54d705d7b22b596648bf", "patch": "@@ -1,3 +1,11 @@\n+2016-06-05  James Bowman  <james.bowman@ftdichip.com>\n+\n+\t* config/ft32/ft32.c (ft32_setup_incoming_varargs,\n+\tft32_expand_prolog, ft32_expand_epilogue):\n+        Handle pretend_args.\n+\t* config/ft32/ft32.h: Remove OUTGOING_REG_PARM_STACK_SPACE.\n+\t* config/ft32/ft32.md: Add pretend_returner.\n+\n 2016-06-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/71389"}, {"sha": "26e5a92195a672c83710f0367bcb50005b73f4db", "filename": "gcc/config/ft32/ft32.c", "status": "modified", "additions": 59, "deletions": 49, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48ab0103a07218cc7cb54d705d7b22b596648bf/gcc%2Fconfig%2Fft32%2Fft32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48ab0103a07218cc7cb54d705d7b22b596648bf/gcc%2Fconfig%2Fft32%2Fft32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.c?ref=d48ab0103a07218cc7cb54d705d7b22b596648bf", "patch": "@@ -409,7 +409,7 @@ ft32_compute_frame (void)\n       cfun->machine->callee_saved_reg_size += 4;\n \n   cfun->machine->size_for_adjusting_sp =\n-    crtl->args.pretend_args_size\n+    0 // crtl->args.pretend_args_size\n     + cfun->machine->local_vars_size\n     + (ACCUMULATE_OUTGOING_ARGS ? crtl->outgoing_args_size : 0);\n }\n@@ -434,43 +434,60 @@ ft32_expand_prologue (void)\n \n   ft32_compute_frame ();\n \n+  int args_to_push = crtl->args.pretend_args_size;\n+  if (args_to_push)\n+    {\n+      int i;\n+\n+      insn = emit_insn (gen_movsi_pop ((gen_rtx_REG (Pmode, FT32_R29))));\n+\n+      for (i = 0; i < (args_to_push / 4); i++)\n+\t{\n+\t  insn =\n+\t    emit_insn (gen_movsi_push ((gen_rtx_REG (Pmode, FT32_R5 - i))));\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t}\n+\n+      insn = emit_insn (gen_movsi_push ((gen_rtx_REG (Pmode, FT32_R29))));\n+    }\n+\n   if (flag_stack_usage_info)\n     current_function_static_stack_size = cfun->machine->size_for_adjusting_sp;\n \n   if (!must_link () && (cfun->machine->callee_saved_reg_size == 4))\n     {\n       insn =\n-        emit_insn (gen_link\n-                   (gen_rtx_REG (Pmode, FT32_R13),\n-                    GEN_INT (-cfun->machine->size_for_adjusting_sp)));\n+\temit_insn (gen_link\n+\t\t   (gen_rtx_REG (Pmode, FT32_R13),\n+\t\t    GEN_INT (-cfun->machine->size_for_adjusting_sp)));\n       RTX_FRAME_RELATED_P (insn) = 1;\n       return;\n     }\n   /* Save callee-saved registers.  */\n   if (optimize_size)\n     {\n       for (regno = FIRST_PSEUDO_REGISTER; regno-- > 0;)\n-        {\n-          if (!fixed_regs[regno] && !call_used_regs[regno]\n-              && df_regs_ever_live_p (regno))\n-            {\n-              rtx preg = gen_rtx_REG (Pmode, regno);\n-              emit_insn (gen_call_prolog (preg));\n-              break;\n-            }\n-        }\n+\t{\n+\t  if (!fixed_regs[regno] && !call_used_regs[regno]\n+\t      && df_regs_ever_live_p (regno))\n+\t    {\n+\t      rtx preg = gen_rtx_REG (Pmode, regno);\n+\t      emit_insn (gen_call_prolog (preg));\n+\t      break;\n+\t    }\n+\t}\n     }\n   else\n     {\n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-        {\n-          if (!fixed_regs[regno] && df_regs_ever_live_p (regno)\n-              && !call_used_regs[regno])\n-            {\n-              insn = emit_insn (gen_movsi_push (gen_rtx_REG (Pmode, regno)));\n-              RTX_FRAME_RELATED_P (insn) = 1;\n-            }\n-        }\n+\t{\n+\t  if (!fixed_regs[regno] && df_regs_ever_live_p (regno)\n+\t      && !call_used_regs[regno])\n+\t    {\n+\t      insn = emit_insn (gen_movsi_push (gen_rtx_REG (Pmode, regno)));\n+\t      RTX_FRAME_RELATED_P (insn) = 1;\n+\t    }\n+\t}\n     }\n \n   if (65536 <= cfun->machine->size_for_adjusting_sp)\n@@ -481,17 +498,17 @@ ft32_expand_prologue (void)\n   if (must_link ())\n     {\n       insn =\n-        emit_insn (gen_link\n-                   (gen_rtx_REG (Pmode, FT32_FP),\n-                    GEN_INT (-cfun->machine->size_for_adjusting_sp)));\n+\temit_insn (gen_link\n+\t\t   (gen_rtx_REG (Pmode, FT32_FP),\n+\t\t    GEN_INT (-cfun->machine->size_for_adjusting_sp)));\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n   else if (cfun->machine->size_for_adjusting_sp > 0)\n     {\n+      int adj = cfun->machine->size_for_adjusting_sp;\n       insn = emit_insn (gen_addsi3 (gen_rtx_REG (SImode, FT32_SP),\n-                                    gen_rtx_REG (SImode, FT32_SP),\n-                                    GEN_INT (-(cfun->machine->\n-                                               size_for_adjusting_sp))));\n+\t\t\t\t    gen_rtx_REG (SImode, FT32_SP),\n+\t\t\t\t    GEN_INT (-adj)));\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n }\n@@ -500,6 +517,7 @@ void\n ft32_expand_epilogue (void)\n {\n   int regno;\n+  int pretend = crtl->args.pretend_args_size;\n \n   if (!must_link ()\n       && (cfun->machine->size_for_adjusting_sp == 24)\n@@ -533,7 +551,7 @@ ft32_expand_epilogue (void)\n               && df_regs_ever_live_p (regno))\n             {\n               rtx preg = gen_rtx_REG (Pmode, regno);\n-              if (optimize_size)\n+              if (optimize_size && (pretend == 0))\n                 {\n                   if (epilog24)\n                     emit_insn (gen_jump_epilog24 (preg));\n@@ -546,7 +564,10 @@ ft32_expand_epilogue (void)\n         }\n     }\n \n-  emit_jump_insn (gen_returner ());\n+  if (pretend != 0)\n+    emit_jump_insn (gen_pretend_returner (GEN_INT (pretend)));\n+  else\n+    emit_jump_insn (gen_returner ());\n }\n \n #undef TARGET_FRAME_POINTER_REQUIRED\n@@ -602,31 +623,20 @@ ft32_initial_elimination_offset (int from, int to)\n \n static void\n ft32_setup_incoming_varargs (cumulative_args_t cum_v,\n-                             enum machine_mode mode ATTRIBUTE_UNUSED,\n-                             tree type ATTRIBUTE_UNUSED,\n-                             int *pretend_size, int no_rtl)\n+\t\t\t     enum machine_mode mode,\n+\t\t\t     tree type ATTRIBUTE_UNUSED,\n+\t\t\t     int *pretend_size, int no_rtl ATTRIBUTE_UNUSED)\n {\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n-  int regno;\n-  int regs = 8 - *cum;\n-\n-  *pretend_size = regs < 0 ? 0 : GET_MODE_SIZE (SImode) * regs;\n+  int named_size =\n+    GET_MODE_SIZE (SImode) * (*cum - FT32_R0) + GET_MODE_SIZE (mode);\n \n-  if (no_rtl)\n-    return;\n-\n-  for (regno = *cum; regno < 8; regno++)\n-    {\n-      rtx reg = gen_rtx_REG (SImode, regno);\n-      rtx slot = gen_rtx_PLUS (Pmode,\n-                               gen_rtx_REG (SImode, ARG_POINTER_REGNUM),\n-                               GEN_INT (UNITS_PER_WORD * (regno - FT32_R0)));\n-\n-      emit_move_insn (gen_rtx_MEM (SImode, slot), reg);\n-    }\n+  if (named_size < 24)\n+    *pretend_size = 24 - named_size;\n+  else\n+    *pretend_size = 0;\n }\n \n-\n /* Return the fixed registers used for condition codes.  */\n \n static bool"}, {"sha": "7c3a678b9a7ca71fdbd414ae43ed8e5705036dc3", "filename": "gcc/config/ft32/ft32.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48ab0103a07218cc7cb54d705d7b22b596648bf/gcc%2Fconfig%2Fft32%2Fft32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48ab0103a07218cc7cb54d705d7b22b596648bf/gcc%2Fconfig%2Fft32%2Fft32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.h?ref=d48ab0103a07218cc7cb54d705d7b22b596648bf", "patch": "@@ -256,15 +256,6 @@ enum reg_class\n    be allocated.  */\n #define STARTING_FRAME_OFFSET 0\n \n-/* Define this if the above stack space is to be considered part of the\n-   space allocated by the caller.  */\n-#define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n-/* #define STACK_PARMS_IN_REG_PARM_AREA */\n-\n-/* Define this if it is the responsibility of the caller to allocate\n-   the area reserved for arguments passed in registers.  */\n-#define REG_PARM_STACK_SPACE(FNDECL) (6 * UNITS_PER_WORD)\n-\n /* Offset from the argument pointer register to the first argument's\n    address.  On some machines it may depend on the data type of the\n    function.  */"}, {"sha": "2d711efbbfbfda9ec675aad663bea049da86aa4b", "filename": "gcc/config/ft32/ft32.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48ab0103a07218cc7cb54d705d7b22b596648bf/gcc%2Fconfig%2Fft32%2Fft32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48ab0103a07218cc7cb54d705d7b22b596648bf/gcc%2Fconfig%2Fft32%2Fft32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.md?ref=d48ab0103a07218cc7cb54d705d7b22b596648bf", "patch": "@@ -929,6 +929,14 @@\n   \"reload_completed\"\n   \"return\")\n \n+(define_insn \"pretend_returner\"\n+  [(set (reg:SI SP_REG)\n+        (plus:SI (reg:SI SP_REG)\n+                 (match_operand:SI 0)))\n+   (return)]\n+  \"reload_completed\"\n+  \"pop.l  $cc\\;add.l  $sp,$sp,%0\\;jmpi   $cc\")\n+\n (define_insn \"returner24\"\n   [\n   (set (reg:SI SP_REG)"}]}