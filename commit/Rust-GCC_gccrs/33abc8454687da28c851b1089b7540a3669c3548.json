{"sha": "33abc8454687da28c851b1089b7540a3669c3548", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNhYmM4NDU0Njg3ZGEyOGM4NTFiMTA4OWI3NTQwYTM2NjljMzU0OA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-03-28T21:39:26Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-03-28T21:39:26Z"}, "message": "re PR fortran/34656 (modifies do loop variable)\n\n2009-03-28  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34656\n        * trans-stmt.c (gfc_trans_simple_do, gfc_trans_do):\n        Add GFC_RTCHECK_DO support.\n        * option.c (gfc_handle_runtime_check_option): Enable\n        * GFC_RTCHECK_DO.\n        * invoke.texi (-fcheck): Document \"do\" option.\n\nFrom-SVN: r145210", "tree": {"sha": "035dde6bb8193a46fa1d35b8af11978d76676b9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/035dde6bb8193a46fa1d35b8af11978d76676b9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33abc8454687da28c851b1089b7540a3669c3548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33abc8454687da28c851b1089b7540a3669c3548", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33abc8454687da28c851b1089b7540a3669c3548", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33abc8454687da28c851b1089b7540a3669c3548/comments", "author": null, "committer": null, "parents": [{"sha": "63f90eb7b0a70009743f7bb0035de2c956add767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63f90eb7b0a70009743f7bb0035de2c956add767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63f90eb7b0a70009743f7bb0035de2c956add767"}], "stats": {"total": 155, "additions": 150, "deletions": 5}, "files": [{"sha": "d063295a244549afa46375eb886c4ea08d144df2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=33abc8454687da28c851b1089b7540a3669c3548", "patch": "@@ -1,7 +1,15 @@\n+2009-03-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34656\n+\t* trans-stmt.c (gfc_trans_simple_do, gfc_trans_do):\n+\tAdd GFC_RTCHECK_DO support.\n+\t* option.c (gfc_handle_runtime_check_option): Enable GFC_RTCHECK_DO.\n+\t* invoke.texi (-fcheck): Document \"do\" option.\n+\n 2009-03-28  Paul Thomas  <pault@gcc.gnu.org>\n \n-        PR fortran/38538\n-        * trans-array.c (get_elemental_fcn_charlen): Remove.\n+\tPR fortran/38538\n+\t* trans-array.c (get_elemental_fcn_charlen): Remove.\n \t(get_array_charlen): New function to replace previous.\n \n 2009-03-28  Paul Thomas  <pault@gcc.gnu.org>"}, {"sha": "a263a150c82b264fa65cc7750bddd4c1cc27259f", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=33abc8454687da28c851b1089b7540a3669c3548", "patch": "@@ -5,7 +5,7 @@\n \n @ignore\n @c man begin COPYRIGHT\n-Copyright @copyright{} 2004, 2005, 2006, 2007, 2008\n+Copyright @copyright{} 2004, 2005, 2006, 2007, 2008, 2009\n Free Software Foundation, Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n@@ -1221,6 +1221,10 @@ the compilation of the main program.\n Note: In the future this may also include other forms of checking, e.g.,\n checking substring references.\n \n+@item @samp{do}\n+Enable generation of run-time checks for invalid modification of loop\n+iteration variables.\n+\n @item @samp{recursion}\n Enable generation of run-time checks for recursively called subroutines and\n functions which are not marked as recursive. See also @option{-frecursive}."}, {"sha": "587fb36ce289ac5a0261c32769e18add53f1d34c", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=33abc8454687da28c851b1089b7540a3669c3548", "patch": "@@ -458,10 +458,10 @@ gfc_handle_runtime_check_option (const char *arg)\n {\n   int result, pos = 0, n;\n   static const char * const optname[] = { \"all\", \"bounds\", \"array-temps\",\n-\t\t\t\t\t  \"recursion\", /* \"do\", */ NULL };\n+\t\t\t\t\t  \"recursion\", \"do\", NULL };\n   static const int optmask[] = { GFC_RTCHECK_ALL, GFC_RTCHECK_BOUNDS,\n \t\t\t\t GFC_RTCHECK_ARRAY_TEMPS,\n-\t\t\t\t GFC_RTCHECK_RECURSION, /* GFC_RTCHECK_DO, */\n+\t\t\t\t GFC_RTCHECK_RECURSION, GFC_RTCHECK_DO,\n \t\t\t\t 0 };\n  \n   while (*arg)"}, {"sha": "0e51bdacc43be7a54ff230b91d29700a537b7cec", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=33abc8454687da28c851b1089b7540a3669c3548", "patch": "@@ -761,13 +761,21 @@ gfc_trans_simple_do (gfc_code * code, stmtblock_t *pblock, tree dovar,\n   tree type;\n   tree cond;\n   tree tmp;\n+  tree saved_dovar = NULL;\n   tree cycle_label;\n   tree exit_label;\n   \n   type = TREE_TYPE (dovar);\n \n   /* Initialize the DO variable: dovar = from.  */\n   gfc_add_modify (pblock, dovar, from);\n+  \n+  /* Save value for do-tinkering checking. */\n+  if (gfc_option.rtcheck & GFC_RTCHECK_DO)\n+    {\n+      saved_dovar = gfc_create_var (type, \".saved_dovar\");\n+      gfc_add_modify (pblock, saved_dovar, dovar);\n+    }\n \n   /* Cycle and exit statements are implemented with gotos.  */\n   cycle_label = gfc_build_label_decl (NULL_TREE);\n@@ -790,6 +798,14 @@ gfc_trans_simple_do (gfc_code * code, stmtblock_t *pblock, tree dovar,\n       gfc_add_expr_to_block (&body, tmp);\n     }\n \n+  /* Check whether someone has modified the loop variable. */\n+  if (gfc_option.rtcheck & GFC_RTCHECK_DO)\n+    {\n+      tmp = fold_build2 (NE_EXPR, boolean_type_node, dovar, saved_dovar);\n+      gfc_trans_runtime_check (true, false, tmp, &body, &code->loc,\n+\t\t\t       \"Loop variable has been modified\");\n+    }\n+\n   /* Evaluate the loop condition.  */\n   cond = fold_build2 (EQ_EXPR, boolean_type_node, dovar, to);\n   cond = gfc_evaluate_now (cond, &body);\n@@ -798,6 +814,9 @@ gfc_trans_simple_do (gfc_code * code, stmtblock_t *pblock, tree dovar,\n   tmp = fold_build2 (PLUS_EXPR, type, dovar, step);\n   gfc_add_modify (&body, dovar, tmp);\n \n+  if (gfc_option.rtcheck & GFC_RTCHECK_DO)\n+    gfc_add_modify (&body, saved_dovar, dovar);\n+\n   /* The loop exit.  */\n   tmp = build1_v (GOTO_EXPR, exit_label);\n   TREE_USED (exit_label) = 1;\n@@ -864,6 +883,7 @@ gfc_trans_do (gfc_code * code)\n {\n   gfc_se se;\n   tree dovar;\n+  tree saved_dovar = NULL;\n   tree from;\n   tree to;\n   tree step;\n@@ -902,6 +922,14 @@ gfc_trans_do (gfc_code * code)\n   gfc_add_block_to_block (&block, &se.pre);\n   step = gfc_evaluate_now (se.expr, &block);\n \n+  if (gfc_option.rtcheck & GFC_RTCHECK_DO)\n+    {\n+      tmp = fold_build2 (EQ_EXPR, boolean_type_node, step,\n+\t\t\t fold_convert (type, integer_zero_node));\n+      gfc_trans_runtime_check (true, false, tmp, &block, &code->loc,\n+\t\t\t       \"DO step value is zero\");\n+    }\n+\n   /* Special case simple loops.  */\n   if (TREE_CODE (type) == INTEGER_TYPE\n       && (integer_onep (step)\n@@ -925,6 +953,13 @@ gfc_trans_do (gfc_code * code)\n   /* Initialize the DO variable: dovar = from.  */\n   gfc_add_modify (&block, dovar, from);\n \n+  /* Save value for do-tinkering checking. */\n+  if (gfc_option.rtcheck & GFC_RTCHECK_DO)\n+    {\n+      saved_dovar = gfc_create_var (type, \".saved_dovar\");\n+      gfc_add_modify (&block, saved_dovar, dovar);\n+    }\n+\n   /* Initialize loop count and jump to exit label if the loop is empty.\n      This code is executed before we enter the loop body. We generate:\n      if (step > 0)\n@@ -1011,10 +1046,21 @@ gfc_trans_do (gfc_code * code)\n       gfc_add_expr_to_block (&body, tmp);\n     }\n \n+  /* Check whether someone has modified the loop variable. */\n+  if (gfc_option.rtcheck & GFC_RTCHECK_DO)\n+    {\n+      tmp = fold_build2 (NE_EXPR, boolean_type_node, dovar, saved_dovar);\n+      gfc_trans_runtime_check (true, false, tmp, &body, &code->loc,\n+\t\t\t       \"Loop variable has been modified\");\n+    }\n+\n   /* Increment the loop variable.  */\n   tmp = fold_build2 (PLUS_EXPR, type, dovar, step);\n   gfc_add_modify (&body, dovar, tmp);\n \n+  if (gfc_option.rtcheck & GFC_RTCHECK_DO)\n+    gfc_add_modify (&body, saved_dovar, dovar);\n+\n   /* End with the loop condition.  Loop until countm1 == 0.  */\n   cond = fold_build2 (EQ_EXPR, boolean_type_node, countm1,\n \t\t      build_int_cst (utype, 0));"}, {"sha": "ee2e36005dbd79ee23229cb3a515e6a3e0ead75f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=33abc8454687da28c851b1089b7540a3669c3548", "patch": "@@ -1,3 +1,11 @@\n+2009-03-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34656\n+\t* gfortran.dg/do_check_1.f90: Add test.\n+\t* gfortran.dg/do_check_2.f90: Add test.\n+\t* gfortran.dg/do_check_3.f90: Add test.\n+\t* gfortran.dg/do_check_4.f90: Add test.\n+\n 2009-03-28  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/attr-noinline.c: Avoid pure-const optimization."}, {"sha": "94d8a848810cea173f7ce1d0a976a277160f6c8f", "filename": "gcc/testsuite/gfortran.dg/do_check_1.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_1.f90?ref=33abc8454687da28c851b1089b7540a3669c3548", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=do\" }\n+! { dg-shouldfail \"DO check\" }\n+!\n+! PR fortran/34656\n+! Run-time check for zero STEP\n+!\n+program test\n+  implicit none\n+  integer :: i,j\n+  j = 0\n+  do i = 1, 40, j\n+    print *, i\n+  end do\n+end program test\n+! { dg-output \"Fortran runtime error: DO step value is zero\" }"}, {"sha": "c40760d259869a8364a2b4d3e34e53185f81a582", "filename": "gcc/testsuite/gfortran.dg/do_check_2.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_2.f90?ref=33abc8454687da28c851b1089b7540a3669c3548", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=do\" }\n+! { dg-shouldfail \"DO check\" }\n+!\n+! PR fortran/34656\n+! Run-time check for modifing loop variables\n+!\n+program test\n+  implicit none\n+  integer :: i,j\n+  do i = 1, 10\n+    call modLoopVar(i)\n+  end do\n+contains\n+  subroutine modLoopVar(i)\n+    integer :: i\n+    i = i + 1\n+  end subroutine modLoopVar\n+end program test\n+! { dg-output \"Fortran runtime error: Loop variable has been modified\" }"}, {"sha": "15086c20a132a5d4cf766cff8e7ee678c8e1f425", "filename": "gcc/testsuite/gfortran.dg/do_check_3.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_3.f90?ref=33abc8454687da28c851b1089b7540a3669c3548", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=do\" }\n+! { dg-shouldfail \"DO check\" }\n+!\n+! PR fortran/34656\n+! Run-time check for modifing loop variables\n+!\n+program test\n+  implicit none\n+  real :: i, j, k\n+  j = 10.0\n+  k = 1.0\n+  do i = 1.0, j, k ! { dg-warning \"must be integer\" }\n+    call modLoopVar(i)\n+  end do\n+contains\n+  subroutine modLoopVar(x)\n+    real :: x\n+    x = x + 1\n+  end subroutine modLoopVar\n+end program test\n+! { dg-output \"Fortran runtime error: Loop variable has been modified\" }"}, {"sha": "65bc92c7e1a8144dc375e9ee0682808f3412e07d", "filename": "gcc/testsuite/gfortran.dg/do_check_4.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33abc8454687da28c851b1089b7540a3669c3548/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_4.f90?ref=33abc8454687da28c851b1089b7540a3669c3548", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=do\" }\n+! { dg-shouldfail \"DO check\" }\n+!\n+! PR fortran/34656\n+! Run-time check for modifing loop variables\n+!\n+PROGRAM test\n+  IMPLICIT NONE\n+  INTEGER :: i\n+  DO i=1,100\n+    CALL do_something()\n+  ENDDO\n+CONTAINS\n+ SUBROUTINE do_something()\n+ IMPLICIT NONE\n+   DO i=1,10\n+   ENDDO\n+ END SUBROUTINE do_something\n+END PROGRAM test\n+! { dg-output \"Fortran runtime error: Loop variable has been modified\" }"}]}