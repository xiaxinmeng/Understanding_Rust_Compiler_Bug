{"sha": "783aea334097f8cb6dba904128ce34708373af1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgzYWVhMzM0MDk3ZjhjYjZkYmE5MDQxMjhjZTM0NzA4MzczYWYxYw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-11-01T15:42:25Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-11-01T15:42:25Z"}, "message": "builtin-sprintf-warn-3.c: Declare test functions with noipa attribute.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-3.c: Declare test functions\n\twith noipa attribute.\n\nFrom-SVN: r277711", "tree": {"sha": "7f60fe8529daba35391db666aa2c38379c47d9ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f60fe8529daba35391db666aa2c38379c47d9ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/783aea334097f8cb6dba904128ce34708373af1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/783aea334097f8cb6dba904128ce34708373af1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/783aea334097f8cb6dba904128ce34708373af1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/783aea334097f8cb6dba904128ce34708373af1c/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6485d5d69a71d2c93b8f97fa899cb906628d3a5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6485d5d69a71d2c93b8f97fa899cb906628d3a5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6485d5d69a71d2c93b8f97fa899cb906628d3a5f"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "57709cc911c437019f27514138351034c7282bf0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783aea334097f8cb6dba904128ce34708373af1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783aea334097f8cb6dba904128ce34708373af1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=783aea334097f8cb6dba904128ce34708373af1c", "patch": "@@ -1,3 +1,8 @@\n+2019-11-01  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-3.c: Declare test functions\n+\twith noipa attribute.\n+\n 2019-11-01  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/template/fn.C: New."}, {"sha": "39d89dbb117119716ce2b65afcf9615e5a66de04", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-3.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783aea334097f8cb6dba904128ce34708373af1c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783aea334097f8cb6dba904128ce34708373af1c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c?ref=783aea334097f8cb6dba904128ce34708373af1c", "patch": "@@ -9,6 +9,9 @@\n \n typedef __SIZE_TYPE__ size_t;\n \n+/* Prevent equivalent functions from being merged.  */\n+#define NOIPA __attribute__ ((noipa))\n+\n #ifndef LINE\n #  define LINE 0\n #endif\n@@ -53,7 +56,7 @@ extern int x (void);\n    argument is in a known range of lengths and one or both of which\n    exceed the size of the destination.  */\n \n-void test_sprintf_chk_string (const char *s, const char *t)\n+NOIPA void test_sprintf_chk_string (const char *s, const char *t)\n {\n #define x x ()\n \n@@ -84,7 +87,7 @@ void test_sprintf_chk_string (const char *s, const char *t)\n /* Verify that the checker makes use of integer constant propagation\n    to detect buffer overflow in non-constant cases.  */\n \n-void test_sprintf_chk_integer_value (void)\n+NOIPA void test_sprintf_chk_integer_value (void)\n {\n   T ( 1, \"%i\",  i (    0));         /* { dg-warning \"nul past the end\" } */\n   T ( 1, \"%i\",  i (    1));         /* { dg-warning \"nul past the end\" } */\n@@ -182,7 +185,7 @@ range_uint (unsigned int min, unsigned int max)\n   return val < min || max < val ? min : val;\n }\n \n-void test_sprintf_chk_range_schar (void)\n+NOIPA void test_sprintf_chk_range_schar (void)\n {\n #define R(min, max) range_sint (min, max)\n \n@@ -239,7 +242,7 @@ void test_sprintf_chk_range_schar (void)\n   T ( 6, \"%.3i|%.2i/%i\", R (0, 1), R (0, 2), R (0, 3)); /* { dg-warning \"./. directive writing 1 byte into a region of size 0\" } */\n }\n \n-void test_sprintf_chk_range_uchar (void)\n+NOIPA void test_sprintf_chk_range_uchar (void)\n {\n #undef R\n #define R(min, max) range_uchar (min, max)\n@@ -253,7 +256,7 @@ void test_sprintf_chk_range_uchar (void)\n   T ( 3, \"%i\",  R (0, 100));  /* { dg-warning \"may write a terminating nul past the end of the destination\" } */\n }\n \n-void test_sprintf_chk_range_sshrt (void)\n+NOIPA void test_sprintf_chk_range_sshrt (void)\n {\n #undef R\n #define R(min, max) range_sshrt (min, max)\n@@ -276,7 +279,7 @@ void test_sprintf_chk_range_sshrt (void)\n   T ( 4, \"%i\",  R (999, 1000)); /* { dg-warning \"may write a terminating nul past the end of the destination\" } */\n }\n \n-void test_sprintf_chk_range_ushrt (void)\n+NOIPA void test_sprintf_chk_range_ushrt (void)\n {\n #undef R\n #define R(min, max) range_ushrt (min, max)\n@@ -298,7 +301,7 @@ void test_sprintf_chk_range_ushrt (void)\n   T ( 4, \"%i\",  R (999, 1000)); /* { dg-warning \"may write a terminating nul past the end of the destination\" } */\n }\n \n-void test_sprintf_chk_range_sint (void)\n+NOIPA void test_sprintf_chk_range_sint (void)\n {\n #undef R\n #define R(min, max) range_sint (min, max)\n@@ -321,7 +324,7 @@ void test_sprintf_chk_range_sint (void)\n   T ( 4, \"%i\",  R (999, 1000)); /* { dg-warning \"may write a terminating nul past the end of the destination\" } */\n }\n \n-void test_sprintf_chk_range_uint (void)\n+NOIPA void test_sprintf_chk_range_uint (void)\n {\n #undef R\n #define R(min, max) range_uint (min, max)\n@@ -351,7 +354,7 @@ void test_sprintf_chk_range_uint (void)\n    fail.  The latter because due to the limit of ptrdiff_t no object\n    can be larger than PTRDIFF_MAX bytes.  */\n \n-void test_too_large (char *d, int x, __builtin_va_list va)\n+NOIPA void test_too_large (char *d, int x, __builtin_va_list va)\n {\n   const size_t imax = __INT_MAX__;\n   const size_t imax_p1 = imax + 1;\n@@ -393,7 +396,7 @@ void test_too_large (char *d, int x, __builtin_va_list va)\n #define TEST_SPRINTF(d, maxsize, objsize, fmt, ...)\t\\\n   __builtin_sprintf (d, fmt, __VA_ARGS__)\n \n-void test_sprintf_malloc (const char *s, const char *t)\n+NOIPA void test_sprintf_malloc (const char *s, const char *t)\n {\n #define x x ()\n \n@@ -421,7 +424,7 @@ void test_sprintf_malloc (const char *s, const char *t)\n #undef ALLOC\n #define ALLOC(p, n) (p) = __builtin_alloca (n)\n \n-void test_sprintf_alloca (const char *s, const char *t)\n+NOIPA void test_sprintf_alloca (const char *s, const char *t)\n {\n #define x x ()\n \n@@ -449,7 +452,7 @@ void test_sprintf_alloca (const char *s, const char *t)\n #undef ALLOC\n #define ALLOC(p, n) char vla [i (n)]; (p) = vla\n \n-void test_sprintf_vla (const char *s, const char *t)\n+NOIPA void test_sprintf_vla (const char *s, const char *t)\n {\n #define x x ()\n "}]}