{"sha": "2c41dd82e23c296681aa466693bfc726e2d919ce", "node_id": "C_kwDOANBUbNoAKDJjNDFkZDgyZTIzYzI5NjY4MWFhNDY2NjkzYmZjNzI2ZTJkOTE5Y2U", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-22T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-22T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "57f1a9b2545db1e6555cdbd934f37ff43e6478f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57f1a9b2545db1e6555cdbd934f37ff43e6478f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c41dd82e23c296681aa466693bfc726e2d919ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c41dd82e23c296681aa466693bfc726e2d919ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c41dd82e23c296681aa466693bfc726e2d919ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c41dd82e23c296681aa466693bfc726e2d919ce/comments", "author": null, "committer": null, "parents": [{"sha": "09e18d113b3c3dae896ac1a8ad1e0087adbb153b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09e18d113b3c3dae896ac1a8ad1e0087adbb153b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09e18d113b3c3dae896ac1a8ad1e0087adbb153b"}], "stats": {"total": 420, "additions": 419, "deletions": 1}, "files": [{"sha": "0ff90d12af0ea125063d842c2f1c9e943bdca7ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c41dd82e23c296681aa466693bfc726e2d919ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c41dd82e23c296681aa466693bfc726e2d919ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c41dd82e23c296681aa466693bfc726e2d919ce", "patch": "@@ -1,3 +1,97 @@\n+2021-09-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::defined_outside_path):\n+\tNew.\n+\t(path_range_query::range_on_path_entry): New.\n+\t(path_range_query::internal_range_of_expr): Resolve unknowns\n+\twith ranger.\n+\t(path_range_query::improve_range_with_equivs): New.\n+\t(path_range_query::ssa_range_in_phi): Resolve unknowns with\n+\tranger.\n+\t* gimple-range-path.h (class path_range_query): Add\n+\tdefined_outside_path, range_on_path_entry, and\n+\timprove_range_with_equivs.\n+\n+2021-09-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::add_to_imports): New.\n+\t(path_range_query::add_copies_to_imports): New.\n+\t(path_range_query::precompute_ranges): Call\n+\tadd_copies_to_imports.\n+\t* gimple-range-path.h (class path_range_query): Add prototypes\n+\tfor add_copies_to_imports and add_to_imports.\n+\n+2021-09-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::range_defined_in_block):\n+\tRemove useless code.\n+\n+2021-09-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-fold.h (class fur_source): Make oracle protected.\n+\t* gimple-range-path.cc (path_range_query::path_range_query): Add\n+\tresolve argument.  Initialize oracle.\n+\t(path_range_query::~path_range_query): Delete oracle.\n+\t(path_range_query::range_of_stmt): Adapt to use relations.\n+\t(path_range_query::precompute_ranges): Pre-compute relations.\n+\t(class jt_fur_source): New\n+\t(jt_fur_source::jt_fur_source): New.\n+\t(jt_fur_source::register_relation): New.\n+\t(jt_fur_source::query_relation): New.\n+\t(path_range_query::precompute_relations): New.\n+\t(path_range_query::precompute_phi_relations): New.\n+\t* gimple-range-path.h (path_range_query): Add resolve argument.\n+\tAdd oracle, precompute_relations, precompute_phi_relations.\n+\t* tree-ssa-threadbackward.c (back_threader::back_threader): Pass\n+\tresolve argument to solver.\n+\n+2021-09-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-fold.cc (fold_using_range::range_of_range_op):\n+\tRename postfold_gcond_edges to register_outgoing_edges and\n+\tadapt.\n+\t(fold_using_range::postfold_gcond_edges): Rename...\n+\t(fur_source::register_outgoing_edges): ...to this.\n+\t* gimple-range-fold.h (postfold_gcond_edges): Rename to\n+\tregister_outgoing_edges and move to fur_source.\n+\n+2021-09-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-fold.cc (fold_using_range::range_of_phi): Check\n+\tdom_info_available_p.\n+\n+2021-09-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-cache.cc (non_null_ref::non_null_ref): Use create\n+\tand quick_grow_cleared instead of safe_grow_cleared.\n+\n+2021-09-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR other/102408\n+\t* omp-oacc-neuter-broadcast.cc (oacc_do_neutering): Evaluate\n+\t'random ()' to '0'.\n+\n+2021-09-21  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* configure.ac: Detect when the assembler supports new-style\n+\tarchitecture extensions.\n+\t* common/config/arm/arm-common.c (arm_rewrite_mcpu): Return\n+\tthe full CPU string if the assembler can grok it.\n+\t(arm_rewrite_march): Likewise but for the architecture.\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\n+2021-09-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102421\n+\t* tree-vect-loop.c (vect_dissolve_slp_only_groups): Copy and\n+\tadjust alignment info.\n+\n+2021-09-21  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* ipa-fnsummary.c (ipa_fn_summary_write): Remove inconsistent\n+\tbitfield stream out.\n+\n 2021-09-20  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gimple-range-fold.cc (fold_using_range::range_of_phi): Ignore"}, {"sha": "47a736e6a1c40c15b105285dd0d9ad9157ca2834", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c41dd82e23c296681aa466693bfc726e2d919ce/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c41dd82e23c296681aa466693bfc726e2d919ce/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2c41dd82e23c296681aa466693bfc726e2d919ce", "patch": "@@ -1 +1 @@\n-20210921\n+20210922"}, {"sha": "7d020f60d818a618454166f15645f39c2171a7f0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 239, "deletions": 0, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c41dd82e23c296681aa466693bfc726e2d919ce/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c41dd82e23c296681aa466693bfc726e2d919ce/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2c41dd82e23c296681aa466693bfc726e2d919ce", "patch": "@@ -1,3 +1,242 @@\n+2021-09-21  Doug Rupp  <rupp@adacore.com>\n+\n+\t* init.c (__gnat_error_handler) [LynxOS]: Add a comment about\n+\tmissing optional args.\n+\n+2021-09-21  Yannick Moy  <moy@adacore.com>\n+\n+\t* gen_il-gen.adb (Put_Opt_Subtype): Add suffix.\n+\n+2021-09-21  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_util.adb (Accessibility_Level): Remove spurious special\n+\tcase for protected type components.\n+\t* exp_ch4.adb (Generate_Accessibility_Check): Use general\n+\tAccessibility_Level instead of the low-level function\n+\tType_Access_Level.\n+\n+2021-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2021-09-21  Matthieu Eyraud  <eyraud@adacore.com>\n+\n+\t* par_sco.adb (Traverse_One): Add support for pragma Invariant /\n+\tType_Invariant.\n+\n+2021-09-21  Bob Duff  <duff@adacore.com>\n+\n+\t* gen_il-gen.adb (Put_Opt_Subtype): Print out subtypes of the\n+\tform:\n+\tsubtype Opt_N_Declaration is\n+\tNode_Id with Predicate =>\n+\tOpt_N_Declaration = Empty or else\n+\tOpt_N_Declaration in N_Declaration_Id;\n+\tOne for each node or entity type, with the predicate allowing\n+\tEmpty.\n+\t* atree.adb (Parent, Set_Parent): Remove unnecessary \"Atree.\".\n+\n+2021-09-21  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* bindgen.adb (Gen_Adainit): For targets that suppress the\n+\tstandard library: set the default stack size global variable if\n+\ta value is provided via the -d switch, and generate a call to\n+\t__gnat_initialize_stack_limit if stack checking using stack\n+\tlimits is enabled.\n+\n+2021-09-21  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch13.adb (Stream_Size): Print message about allowed stream\n+\tsizes even if other error were already found. This avoids\n+\tfalling into the 'else', which prints \"Stream_Size cannot be\n+\tgiven for...\", which is misleading -- the Size COULD be given if\n+\tit were correct.\n+\n+2021-09-21  Daniel Mercier  <mercier@adacore.com>\n+\n+\t* exp_util.adb (Build_Temporary): In case of an external DISCR\n+\tsymbol, set the related expression for CodePeer so that a more\n+\tcomprehensible message can be emitted to the user.\n+\n+2021-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-dwalin.adb (Parse_Header): Tweak comments.\n+\t(Read_Entry_Format_Array): Tweak exception message.\n+\t(Symbolic_Address.Set_Result): Likewise.\n+\n+2021-09-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch7.adb (Make_Init_Call): Add guard to protect against a\n+\tmissing initialization procedure for a type.\n+\n+2021-09-21  Doug Rupp  <rupp@adacore.com>\n+\n+\t* Makefile.rtl: Remove unused VxWorks sections.\n+\t* libgnarl/s-vxwext__noints.adb: Remove.\n+\t* libgnarl/s-vxwext__vthreads.ads: Remove.\n+\t* libgnat/a-elchha__vxworks-ppc-full.adb: Remove.\n+\t* libgnat/s-osprim__vxworks.adb: Remove.\n+\t* libgnat/s-osvers__vxworks-653.ads: Remove.\n+\t* libgnat/system-vxworks-e500-vthread.ads: Remove.\n+\t* libgnat/system-vxworks-ppc-vthread.ads: Remove.\n+\t* libgnat/system-vxworks-x86-vthread.ads: Remove.\n+\n+2021-09-21  Bob Duff  <duff@adacore.com>\n+\n+\t* uintp.ads, uintp.adb (UI_Is_In_Int_Range): Change the type of\n+\tthe formal parameter to Valid_Uint. Remove code that preserved\n+\tthe previous behavior, and replace it with an assertion. The\n+\tprevious behavior is no longer needed given the recent change to\n+\tgigi.\n+\t(No, Present): Add comment.\n+\n+2021-09-21  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_eval.adb (Fold_Shift): Replace an if_expression with an\n+\tif_statement.\n+\n+2021-09-21  Bob Duff  <duff@adacore.com>\n+\n+\t* uintp.ads, uintp.adb: Add assertions.\n+\t(Ubool, Opt_Ubool): New \"boolean\" subtypes.\n+\t(UI_Is_In_Int_Range): The parameter should probably be\n+\tValid_Uint, but we don't change that for now, because it causes\n+\tfailures in gigi.\n+\t* sem_util.ads, sem_util.adb (Is_True, Is_False,\n+\tStatic_Boolean): Use Opt_Ubool subtype.  Document the fact that\n+\tIs_True (No_Uint) = True.  Implement Is_False in terms of\n+\tIs_True.  We considered changing Static_Boolean to return Uint_1\n+\tin case of error, but that doesn't fit in well with\n+\tStatic_Integer.\n+\t(Has_Compatible_Alignment_Internal): Deal with cases where Offs\n+\tis No_Uint. Change one \"and\" to \"and then\" to ensure we don't\n+\tpass No_Uint to \">\", which would violate the new assertions.\n+\t* exp_util.adb, freeze.adb, sem_ch13.adb: Avoid violating new\n+\tassertions in Uintp.\n+\n+2021-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-dwalin.adb (To_File_Name): Fetch only the last string\n+\tfrom the .debug_line_str section.\n+\t(Symbolic_Address.Set_Result): Likewise.\n+\n+2021-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-dwalin.adb (Skip_Form): Fix cases of DW_FORM_addrx\n+\tand DW_FORM_implicit_const.  Replace Constraint_Error with\n+\tDwarf_Error.\n+\n+2021-09-21  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* exp_pakd.adb (Expand_Packed_Not): Replace expression with\n+\tstatement.\n+\n+2021-09-21  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_eval.adb (Is_Static_Subtype): Take predicates created\n+\tthrough \"predicate\" pragma into account.\n+\n+2021-09-21  Frederic Konrad  <konrad@adacore.com>\n+\n+\t* Makefile.rtl (aarch64-rtems*): Add GNATRTL_128BIT_PAIRS to\n+\tthe LIBGNAT_TARGET_PAIRS list and also GNATRTL_128BIT_OBJS to\n+\tthe EXTRA_GNATRTL_NONTASKING_OBJS list.\n+\n+2021-09-21  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch4.adb (Remove_Abstract_Operations): Add condition to\n+\ttest for an E_Operator as part of criteria for setting\n+\tAbstract_Op on interpretations involving predefined operators.\n+\n+2021-09-21  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): For explicit\n+\tdereference of type conversion, enable code that ensures that\n+\tthe tag of the result is that of the result type.\n+\n+2021-09-21  Bob Duff  <duff@adacore.com>\n+\n+\t* einfo-utils.adb: Add support (currently disabled) for using\n+\t\"initial zero\" instead of \"Uint_0\" to represent \"unknown\".  Call\n+\tKnown_ functions, instead of evilly duplicating their code\n+\tinline.\n+\t* fe.h (No_Uint_To_0): New function to convert No_Uint to\n+\tUint_0, in order to preserve existing behavior.\n+\t(Copy_Esize, Copy_RM_Size): New imports from Einfo.Utils.\n+\t* cstand.adb: Set size fields of Standard_Debug_Renaming_Type\n+\tand Standard_Exception_Type.\n+\t* checks.adb, exp_attr.adb, exp_ch3.adb, exp_ch5.adb,\n+\texp_ch6.adb, exp_pakd.adb, exp_util.adb, freeze.adb, itypes.adb,\n+\tlayout.adb, repinfo.adb, sem_attr.adb, sem_ch12.adb,\n+\tsem_ch13.adb, sem_ch13.ads, sem_ch3.adb, sem_ch7.adb,\n+\tsem_util.adb: Protect calls with Known_..., use Copy_...  Remove\n+\tassumption that Uint_0 represents \"unknown\".\n+\t* types.ads (Nonzero_Int): New subtype.\n+\t* gcc-interface/decl.c, gcc-interface/trans.c: Protect calls\n+\twith Known_... and use Copy_...  as appropriate, to avoid\n+\tblowing up in unknown cases. Similarly, call No_Uint_To_0 to\n+\tpreserve existing behavior.\n+\n+2021-09-21  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Add a new nested\n+\tfunction, Directly_Specified, and then use it in the\n+\timplementation of the required check.\n+\n+2021-09-21  Steve Baird  <baird@adacore.com>\n+\n+\t* libgnat/a-costso.ads, libgnat/a-costso.adb: A new library\n+\tunit, Ada.Containers.Stable_Sorting, which exports a pair of\n+\tgenerics (one within the other) which are instantiated by each\n+\tof the 5 doubly-linked list container generics to implement\n+\ttheir respective Sort procedures. We use a pair of generics,\n+\trather than a single generic, in order to further reduce code\n+\tduplication. The outer generic takes a formal private Node_Ref\n+\ttype representing a reference to a linked list element. For some\n+\tinstances, the corresponding actual parameter will be an access\n+\ttype; for others, it will be the index type for an array.\n+\t* Makefile.rtl: Include new Ada.Containers.Stable_Sorting unit.\n+\t* libgnat/a-cbdlli.adb, libgnat/a-cdlili.adb,\n+\tlibgnat/a-cfdlli.adb, libgnat/a-cidlli.adb, libgnat/a-crdlli.adb\n+\t(Sort): Replace existing Sort implementation with a call to an\n+\tinstance of\n+\tAda.Containers.Stable_Sorting.Doubly_Linked_List_Sort. Declare\n+\tthe (trivial) actual parameters needed to declare that instance.\n+\t* libgnat/a-cfdlli.ads: Fix a bug encountered during testing in\n+\tthe postcondition for M_Elements_Sorted. With a partial\n+\tordering, it is possible for all three of (X < Y), (Y < X),\n+\tand (X = Y) to be simultaneously false, so that case needs to\n+\thandled correctly.\n+\n+2021-09-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* errout.adb (Error_Msg_Internal): Fix references to Sptr and\n+\tOptr in comment; fix grammar of \"low-level\" where it is used as\n+\tan adjective.\n+\n+2021-09-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* errout.adb (Write_Source_Code_Lines): Use Cur_Loc before\n+\tincrementing it, so that we don't need to decrement it.\n+\n+2021-09-21  Yannick Moy  <moy@adacore.com>\n+\n+\t* errout.adb (Get_Line_End): Do not allow the result to go past\n+\tthe end of the buffer.\n+\n+2021-09-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Process_Discriminant_Expressions): If the\n+\tconstraint is for a Component_Definition that appears in a\n+\tComponent_Declaration, the entity to be used to create the\n+\tpotentially global symbol is the Defining_Identifier of the\n+\tComponent_Declaration.\n+\n+2021-09-21  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/a-stbufi.ads, libgnat/a-stbufi.adb: Change all\n+\toccurrences of GNAT.OS_Lib to System.OS_Lib.\n+\n 2021-09-20  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* inline.adb (Has_Excluded_Declaration): Remove redundant guard;"}, {"sha": "a051d62e4a246dc4943c04b73f0f683138aea583", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c41dd82e23c296681aa466693bfc726e2d919ce/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c41dd82e23c296681aa466693bfc726e2d919ce/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2c41dd82e23c296681aa466693bfc726e2d919ce", "patch": "@@ -1,3 +1,8 @@\n+2021-09-21  wangpc  <pc.wang@linux.alibaba.com>\n+\n+\t* decl.c (start_decl_1): Move verify_type_context to ...\n+\t(cp_finish_decl): ... to here.\n+\n 2021-09-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.c (cp_parser_omp_clause_order): Parse unconstrained"}, {"sha": "6a247c6443aff8f080d93b4ffa909ca4484e77bc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c41dd82e23c296681aa466693bfc726e2d919ce/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c41dd82e23c296681aa466693bfc726e2d919ce/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2c41dd82e23c296681aa466693bfc726e2d919ce", "patch": "@@ -1,3 +1,31 @@\n+2021-09-21  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/55534\n+\t* cpp.c: Define GCC_C_COMMON_C for #include \"options.h\" to make\n+\tcpp_reason_option_codes available.\n+\t(gfc_cpp_register_include_paths): Make static, set pfile's\n+\twarn_missing_include_dirs and move before caller.\n+\t(gfc_cpp_init_cb): New, cb code moved from ...\n+\t(gfc_cpp_init_0): ... here.\n+\t(gfc_cpp_post_options): Call gfc_cpp_init_cb.\n+\t(cb_cpp_diagnostic_cpp_option): New. As implemented in c-family\n+\tto match CppReason flags to -W... names.\n+\t(cb_cpp_diagnostic): Use it to replace single special case.\n+\t* cpp.h (gfc_cpp_register_include_paths): Remove as now static.\n+\t* gfortran.h (gfc_check_include_dirs): New prototype.\n+\t(gfc_add_include_path): Add new bool arg.\n+\t* options.c (gfc_init_options): Don't set -Wmissing-include-dirs.\n+\t(gfc_post_options): Set it here after commandline processing. Call\n+\tgfc_add_include_path with defer_warn=false.\n+\t(gfc_handle_option): Call it with defer_warn=true.\n+\t* scanner.c (gfc_do_check_include_dir, gfc_do_check_include_dirs,\n+\tgfc_check_include_dirs): New. Diagnostic moved from ...\n+\t(add_path_to_list): ... here, which came before cmdline processing.\n+\tTake additional bool defer_warn argument.\n+\t(gfc_add_include_path): Take additional defer_warn arg.\n+\t* scanner.h (struct gfc_directorylist): Reorder for alignment issues,\n+\tadd new 'bool warn'.\n+\n 2021-09-20  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* gfortran.h (gfc_omp_clauses): Add order_unconstrained."}, {"sha": "fc9cb6e309415cfc7c51fc9624b0a1b265b78d39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c41dd82e23c296681aa466693bfc726e2d919ce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c41dd82e23c296681aa466693bfc726e2d919ce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c41dd82e23c296681aa466693bfc726e2d919ce", "patch": "@@ -1,3 +1,37 @@\n+2021-09-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102421\n+\t* g++.dg/vect/pr102421.cc: New testcase.\n+\n+2021-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* lib/target-supports.exp (no_fsanitize_address): Add missing bits.\n+\t* gcc.dg/uninit-pr93100.c: Skip if no_fsanitize_address.\n+\t* gcc.dg/pr91441.c: Likewise.\n+\t* gcc.dg/pr96260.c: Likewise.\n+\t* gcc.dg/pr96307.c: Likewise.\n+\t* g++.dg/warn/uninit-pr93100.C: Likewise.\n+\t* gnat.dg/asan1.adb: Likewise.\n+\t* gcc.dg/Wstringop-overflow-70.c: Adjust for SPARC.\n+\t* g++.dg/abi/anon4.C: Likewise.\n+\n+2021-09-21  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/include_6.f90: Change dg-error to\n+\tdg-warning and update pattern.\n+\t* gfortran.dg/include_14.f90: New test.\n+\t* gfortran.dg/include_15.f90: New test.\n+\t* gfortran.dg/include_16.f90: New test.\n+\t* gfortran.dg/include_17.f90: New test.\n+\t* gfortran.dg/include_18.f90: New test.\n+\t* gfortran.dg/include_19.f90: New test.\n+\t* gfortran.dg/include_20.f90: New test.\n+\t* gfortran.dg/include_21.f90: New test.\n+\n+2021-09-21  wangpc  <pc.wang@linux.alibaba.com>\n+\n+\t* g++.target/aarch64/sve/static-var-in-template.C: New test.\n+\n 2021-09-20  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gcc.dg/tree-ssa/evrp-ignore.c: New."}, {"sha": "f1ecf1804df91ca7262ca18448c0f6067234430e", "filename": "gotools/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c41dd82e23c296681aa466693bfc726e2d919ce/gotools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c41dd82e23c296681aa466693bfc726e2d919ce/gotools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FChangeLog?ref=2c41dd82e23c296681aa466693bfc726e2d919ce", "patch": "@@ -1,3 +1,8 @@\n+2021-09-21  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* Makefile.am (check-runtime): Add goroot.go to --extrafiles.\n+\t* Makefile.in: Regenerate.\n+\n 2021-02-02  Ian Lance Taylor  <iant@golang.org>\n \n \t* Makefile.am (check-embed): New target."}, {"sha": "9ec6b44b2bea81da2b24b3d6521be126ae3924c6", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c41dd82e23c296681aa466693bfc726e2d919ce/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c41dd82e23c296681aa466693bfc726e2d919ce/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=2c41dd82e23c296681aa466693bfc726e2d919ce", "patch": "@@ -1,3 +1,9 @@\n+2021-09-21  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/55534\n+\t* configure.ac (AM_FCFLAGS): Add -Wno-missing-include-dirs.\n+\t* configure: Regenerate.\n+\n 2021-09-17  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* ISO_Fortran_binding.h: Update comments."}, {"sha": "d8e746febe9cfa7aa6e9e4e6dc4dd76e4af9fd32", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c41dd82e23c296681aa466693bfc726e2d919ce/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c41dd82e23c296681aa466693bfc726e2d919ce/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2c41dd82e23c296681aa466693bfc726e2d919ce", "patch": "@@ -1,3 +1,10 @@\n+2021-09-21  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/55534\n+\t* testsuite/libgomp.fortran/fortran.exp: Add -Wno-missing-include-dirs\n+\tto ALWAYS_CFLAGS.\n+\t* testsuite/libgomp.oacc-fortran/fortran.exp: Likewise.\n+\n 2021-09-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c++/default-1.C: New test."}]}