{"sha": "57bed15271e83402b6d8d6647f6589718e70916d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdiZWQxNTI3MWU4MzQwMmI2ZDhkNjY0N2Y2NTg5NzE4ZTcwOTE2ZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-13T23:43:55Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-13T23:43:55Z"}, "message": "calls.c (emit_call_1): Wrap varaible `struct_value_size_rtx' in macro conditionals guarding use.\n\n        * calls.c (emit_call_1): Wrap varaible `struct_value_size_rtx' in\n        macro conditionals guarding use.\n\n        * dwarf2out.c: Include \"tm_p.h\".\n\n        * function.c (locate_and_pad_parm): Mark parameter with\n        ATTRIBUTE_UNUSED.\n        (expand_function_end): Likewise for variable `context'.\n\n        * reorg.c (make_return_insns): Wrap prototype in macro HAVE_return.\n\ncp:\n        * call.c: If GATHER_STATISTICS, declare `n_build_method_call'.\n\nFrom-SVN: r31398", "tree": {"sha": "745cfdd34f4d9f8d474635f991192d7fa316dbc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/745cfdd34f4d9f8d474635f991192d7fa316dbc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57bed15271e83402b6d8d6647f6589718e70916d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57bed15271e83402b6d8d6647f6589718e70916d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57bed15271e83402b6d8d6647f6589718e70916d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57bed15271e83402b6d8d6647f6589718e70916d/comments", "author": null, "committer": null, "parents": [{"sha": "ff17f164035e09f502390f76ac111d3d54b724ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff17f164035e09f502390f76ac111d3d54b724ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff17f164035e09f502390f76ac111d3d54b724ee"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "fb4e7a253e5d2f9d4d3ee2f7dc7606e1966ce983", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bed15271e83402b6d8d6647f6589718e70916d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bed15271e83402b6d8d6647f6589718e70916d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57bed15271e83402b6d8d6647f6589718e70916d", "patch": "@@ -1,3 +1,16 @@\n+2000-01-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* calls.c (emit_call_1): Wrap varaible `struct_value_size_rtx' in\n+\tmacro conditionals guarding use.\n+\n+\t* dwarf2out.c: Include \"tm_p.h\".\n+\n+\t* function.c (locate_and_pad_parm): Mark parameter with\n+\tATTRIBUTE_UNUSED.\n+\t(expand_function_end): Likewise for variable `context'.\n+\n+\t* reorg.c (make_return_insns): Wrap prototype in macro HAVE_return.\n+\n 2000-01-13  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/fr30/fr30.c (fr30_expand_epilogue): Emit USEs of pop'ed"}, {"sha": "86ae3254e2b226136e8e19f1e20ca43e45a161fd", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bed15271e83402b6d8d6647f6589718e70916d/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bed15271e83402b6d8d6647f6589718e70916d/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=57bed15271e83402b6d8d6647f6589718e70916d", "patch": "@@ -394,7 +394,9 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n      int is_const;\n {\n   rtx rounded_stack_size_rtx = GEN_INT (rounded_stack_size);\n+#if defined (HAVE_call) && defined (HAVE_call_value)\n   rtx struct_value_size_rtx = GEN_INT (struct_value_size);\n+#endif\n   rtx call_insn;\n #ifndef ACCUMULATE_OUTGOING_ARGS\n   int already_popped = 0;"}, {"sha": "5407636a8816b793c42bef783c8ed5955809c3e2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bed15271e83402b6d8d6647f6589718e70916d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bed15271e83402b6d8d6647f6589718e70916d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=57bed15271e83402b6d8d6647f6589718e70916d", "patch": "@@ -1,3 +1,7 @@\n+2000-01-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* call.c: If GATHER_STATISTICS, declare `n_build_method_call'.\n+\n 2000-01-12  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (start_cleanup_fn): Call pushdecl."}, {"sha": "e589f9f3a80fcba23f999dface3bfbfff6a4a068", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bed15271e83402b6d8d6647f6589718e70916d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bed15271e83402b6d8d6647f6589718e70916d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=57bed15271e83402b6d8d6647f6589718e70916d", "patch": "@@ -440,6 +440,10 @@ build_call (function, result_type, parms)\n    `operator()()' is defined for the type of that field, then we return\n    that result.  */\n \n+#ifdef GATHER_STATISTICS\n+extern int n_build_method_call;\n+#endif\n+\n tree\n build_method_call (instance, name, parms, basetype_path, flags)\n      tree instance, name, parms, basetype_path;"}, {"sha": "f3c50995983a2bbf79b0d87446594ce6aac605b3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bed15271e83402b6d8d6647f6589718e70916d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bed15271e83402b6d8d6647f6589718e70916d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=57bed15271e83402b6d8d6647f6589718e70916d", "patch": "@@ -55,6 +55,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"dyn-string.h\"\n #include \"ggc.h\"\n+#include \"tm_p.h\"\n \n /* We cannot use <assert.h> in GCC source, since that would include\n    GCC's assert.h, which may not be compatible with the host compiler.  */"}, {"sha": "6f631c209a9db72a41fc8c8234f84e57932401be", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bed15271e83402b6d8d6647f6589718e70916d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bed15271e83402b6d8d6647f6589718e70916d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=57bed15271e83402b6d8d6647f6589718e70916d", "patch": "@@ -4970,7 +4970,7 @@ locate_and_pad_parm (passed_mode, type, in_regs, fndecl,\n                      alignment_pad)\n      enum machine_mode passed_mode;\n      tree type;\n-     int in_regs;\n+     int in_regs ATTRIBUTE_UNUSED;\n      tree fndecl ATTRIBUTE_UNUSED;\n      struct args_size *initial_offset_ptr;\n      struct args_size *offset_ptr;\n@@ -6266,7 +6266,7 @@ expand_function_end (filename, line, end_bindings)\n   for (link = trampoline_list; link; link = TREE_CHAIN (link))\n     {\n       tree function = TREE_PURPOSE (link);\n-      rtx context = lookup_static_chain (function);\n+      rtx context ATTRIBUTE_UNUSED = lookup_static_chain (function);\n       rtx tramp = RTL_EXPR_RTL (TREE_VALUE (link));\n #ifdef TRAMPOLINE_TEMPLATE\n       rtx blktramp;"}, {"sha": "bb27bae71a74ce9551cf83b87ea2508398fe915d", "filename": "gcc/reorg.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bed15271e83402b6d8d6647f6589718e70916d/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bed15271e83402b6d8d6647f6589718e70916d/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=57bed15271e83402b6d8d6647f6589718e70916d", "patch": "@@ -222,7 +222,9 @@ static rtx fill_slots_from_thread\tPROTO((rtx, rtx, rtx, rtx, int, int,\n \t\t\t\t\t       int, int, int *, rtx));\n static void fill_eager_delay_slots\tPROTO((void));\n static void relax_delay_slots\t\tPROTO((rtx));\n+#ifdef HAVE_return\n static void make_return_insns\t\tPROTO((rtx));\n+#endif\n \f\n /* Return TRUE if this insn should stop the search for insn to fill delay\n    slots.  LABELS_P indicates that labels should terminate the search."}]}