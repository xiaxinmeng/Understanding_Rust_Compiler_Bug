{"sha": "0abe00c528965ac8c84fed624ab93dc30e7636b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFiZTAwYzUyODk2NWFjOGM4NGZlZDYyNGFiOTNkYzMwZTc2MzZiOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-07-25T08:54:06Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-07-25T08:54:06Z"}, "message": "class.c (build_vtbl_or_vbase_field): Remove, move into ...\n\ncp:\n\t* class.c (build_vtbl_or_vbase_field): Remove, move into ...\n\t(create_vtbl_ptr): ... here.\n\nFrom-SVN: r44337", "tree": {"sha": "ed500a3570f1d4d23489c787d75c0dfc4db6cf26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed500a3570f1d4d23489c787d75c0dfc4db6cf26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0abe00c528965ac8c84fed624ab93dc30e7636b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0abe00c528965ac8c84fed624ab93dc30e7636b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0abe00c528965ac8c84fed624ab93dc30e7636b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0abe00c528965ac8c84fed624ab93dc30e7636b9/comments", "author": null, "committer": null, "parents": [{"sha": "90b1ca2f5203e8df93ff5ae83aeff062b08ab7f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b1ca2f5203e8df93ff5ae83aeff062b08ab7f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b1ca2f5203e8df93ff5ae83aeff062b08ab7f9"}], "stats": {"total": 68, "additions": 21, "deletions": 47}, "files": [{"sha": "6ae301c5c3a5078290037916880a47b0c8116382", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0abe00c528965ac8c84fed624ab93dc30e7636b9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0abe00c528965ac8c84fed624ab93dc30e7636b9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0abe00c528965ac8c84fed624ab93dc30e7636b9", "patch": "@@ -1,3 +1,8 @@\n+2001-07-25  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* class.c (build_vtbl_or_vbase_field): Remove, move into ...\n+\t(create_vtbl_ptr): ... here.\n+\n 2001-07-25  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* class.c (build_vbase_offset_vbtl_entries): Look for"}, {"sha": "4ff29a1e67a1e1d4fdfb5a4e744fcf1fa5762c05", "filename": "gcc/cp/class.c", "status": "modified", "additions": 16, "deletions": 47, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0abe00c528965ac8c84fed624ab93dc30e7636b9/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0abe00c528965ac8c84fed624ab93dc30e7636b9/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0abe00c528965ac8c84fed624ab93dc30e7636b9", "patch": "@@ -146,8 +146,6 @@ static bool build_base_field PARAMS ((record_layout_info, tree, int *,\n \t\t\t\t     splay_tree, tree));\n static bool build_base_fields PARAMS ((record_layout_info, int *,\n \t\t\t\t      splay_tree, tree));\n-static tree build_vtbl_or_vbase_field PARAMS ((tree, tree, tree, tree, tree,\n-\t\t\t\t\t       int *));\n static void check_methods PARAMS ((tree));\n static void remove_zero_width_bit_fields PARAMS ((tree));\n static void check_bases PARAMS ((tree, int *, int *, int *));\n@@ -3496,43 +3494,6 @@ check_field_decls (t, access_decls, empty_p,\n   *access_decls = nreverse (*access_decls);\n }\n \n-/* Return a FIELD_DECL for a pointer-to-virtual-table or\n-   pointer-to-virtual-base.  The NAME, ASSEMBLER_NAME, and TYPE of the\n-   field are as indicated.  The CLASS_TYPE in which this field occurs\n-   is also indicated.  FCONTEXT is the type that is needed for the debug\n-   info output routines.  *EMPTY_P is set to a non-zero value by this\n-   function to indicate that a class containing this field is\n-   non-empty.  */\n-\n-static tree\n-build_vtbl_or_vbase_field (name, assembler_name, type, class_type, fcontext,\n-\t\t\t   empty_p)\n-     tree name;\n-     tree assembler_name;\n-     tree type;\n-     tree class_type;\n-     tree fcontext;\n-     int *empty_p;\n-{\n-  tree field;\n-\n-  /* This class is non-empty.  */\n-  *empty_p = 0;\n-\n-  /* Build the FIELD_DECL.  */\n-  field = build_decl (FIELD_DECL, name, type);\n-  SET_DECL_ASSEMBLER_NAME (field, assembler_name);\n-  DECL_VIRTUAL_P (field) = 1;\n-  DECL_ARTIFICIAL (field) = 1;\n-  DECL_FIELD_CONTEXT (field) = class_type;\n-  DECL_FCONTEXT (field) = fcontext;\n-  DECL_ALIGN (field) = TYPE_ALIGN (type);\n-  DECL_USER_ALIGN (field) = TYPE_USER_ALIGN (type);\n-\n-  /* Return it.  */\n-  return field;\n-}\n-\n /* If TYPE is an empty class type, records its OFFSET in the table of\n    OFFSETS.  */\n \n@@ -4490,13 +4451,21 @@ create_vtable_ptr (t, empty_p, vfuns_p,\n \t bounds.  That's better than using `void*' or some such; it's\n \t cleaner, and it let's the alias analysis code know that these\n \t stores cannot alias stores to void*!  */\n-      TYPE_VFIELD (t) \n-\t= build_vtbl_or_vbase_field (get_vfield_name (t),\n-\t\t\t\t     get_identifier (VFIELD_BASE),\n-\t\t\t\t     vtbl_ptr_type_node,\n-\t\t\t\t     t,\n-\t\t\t\t     t,\n-\t\t\t\t     empty_p);\n+      tree field;\n+\n+      field = build_decl (FIELD_DECL, get_vfield_name (t), vtbl_ptr_type_node);\n+      SET_DECL_ASSEMBLER_NAME (field, get_identifier (VFIELD_BASE));\n+      DECL_VIRTUAL_P (field) = 1;\n+      DECL_ARTIFICIAL (field) = 1;\n+      DECL_FIELD_CONTEXT (field) = t;\n+      DECL_FCONTEXT (field) = t;\n+      DECL_ALIGN (field) = TYPE_ALIGN (vtbl_ptr_type_node);\n+      DECL_USER_ALIGN (field) = TYPE_USER_ALIGN (vtbl_ptr_type_node);\n+      \n+      TYPE_VFIELD (t) = field;\n+      \n+      /* This class is non-empty.  */\n+      *empty_p = 0;\n \n       if (CLASSTYPE_N_BASECLASSES (t))\n \t/* If there were any baseclasses, they can't possibly be at\n@@ -4505,7 +4474,7 @@ create_vtable_ptr (t, empty_p, vfuns_p,\n \t   take work.  */\n \tTYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (t) = 1;\n \n-      return TYPE_VFIELD (t);\n+      return field;\n     }\n \n   return NULL_TREE;"}]}