{"sha": "f87a37c6893dc51f4c3e6fbddfcf453bd83c9215", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg3YTM3YzY4OTNkYzUxZjRjM2U2ZmJkZGZjZjQ1M2JkODNjOTIxNQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2015-07-28T08:09:09Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2015-07-28T08:09:09Z"}, "message": "rl78.c (rl78_addsi3_internal): New function.\n\n\t* config/rl78/rl78.c (rl78_addsi3_internal): New function.\n\tOptimizes the case where -mes0 is active and a constant symbolic\n\taddress is used.\n\t* config/rl78/rl78-protos.h: Prototype the new function.\n\t* config/rl78/rl78.md (addsi3_internal_real): Call new function.\n\nFrom-SVN: r226306", "tree": {"sha": "7542dd69542b0124435500e55ad966b7d4c39a2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7542dd69542b0124435500e55ad966b7d4c39a2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f87a37c6893dc51f4c3e6fbddfcf453bd83c9215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87a37c6893dc51f4c3e6fbddfcf453bd83c9215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f87a37c6893dc51f4c3e6fbddfcf453bd83c9215", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87a37c6893dc51f4c3e6fbddfcf453bd83c9215/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12efb1d75f459d7c69bfaededd398f9724ee67bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12efb1d75f459d7c69bfaededd398f9724ee67bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12efb1d75f459d7c69bfaededd398f9724ee67bb"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "bbee98a0001343d55168593e91812ddf265cdd14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87a37c6893dc51f4c3e6fbddfcf453bd83c9215/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87a37c6893dc51f4c3e6fbddfcf453bd83c9215/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f87a37c6893dc51f4c3e6fbddfcf453bd83c9215", "patch": "@@ -1,3 +1,11 @@\n+2015-07-28  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rl78/rl78.c (rl78_addsi3_internal): New function.\n+\tOptimizes the case where -mes0 is active and a constant symbolic\n+\taddress is used.\n+\t* config/rl78/rl78-protos.h: Prototype the new function.\n+\t* config/rl78/rl78.md (addsi3_internal_real): Call new function.\n+\n 2015-07-28  Tom de Vries  <tom@codesourcery.com>\n \n \t* tree-parloops.c (reduc_stmt_res): New function."}, {"sha": "614bf63b88d4ad58c611ad0ed7eb13e3c83f653c", "filename": "gcc/config/rl78/rl78-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87a37c6893dc51f4c3e6fbddfcf453bd83c9215/gcc%2Fconfig%2Frl78%2Frl78-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87a37c6893dc51f4c3e6fbddfcf453bd83c9215/gcc%2Fconfig%2Frl78%2Frl78-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78-protos.h?ref=f87a37c6893dc51f4c3e6fbddfcf453bd83c9215", "patch": "@@ -18,6 +18,7 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \f\n+const char *    rl78_addsi3_internal (rtx *, unsigned int);\n void\t\trl78_emit_eh_epilogue (rtx);\n void\t\trl78_expand_compare (rtx *);\n void\t\trl78_expand_movsi (rtx *);"}, {"sha": "70695302560c5529fc7c40d090866d1ffe3818cf", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87a37c6893dc51f4c3e6fbddfcf453bd83c9215/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87a37c6893dc51f4c3e6fbddfcf453bd83c9215/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=f87a37c6893dc51f4c3e6fbddfcf453bd83c9215", "patch": "@@ -357,6 +357,9 @@ rl78_option_override (void)\n \n   if (TARGET_ES0\n       && strcmp (lang_hooks.name, \"GNU C\")\n+      && strcmp (lang_hooks.name, \"GNU C11\")\n+      && strcmp (lang_hooks.name, \"GNU C89\")\n+      && strcmp (lang_hooks.name, \"GNU C99\")\n       /* Compiling with -flto results in a language of GNU GIMPLE being used... */\n       && strcmp (lang_hooks.name, \"GNU GIMPLE\"))\n     /* Address spaces are currently only supported by C.  */\n@@ -4638,6 +4641,33 @@ rl78_flags_already_set (rtx op, rtx operand)\n \n   return res;\n }\n+\n+const char *\n+rl78_addsi3_internal (rtx * operands, unsigned int alternative)\n+{\n+  /* If we are adding in a constant symbolic address when -mes0\n+     is active then we know that the address must be <64K and\n+     that it is invalid to access anything above 64K relative to\n+     this address.  So we can skip adding in the high bytes.  */\n+  if (TARGET_ES0\n+      && GET_CODE (operands[2]) == SYMBOL_REF\n+      && TREE_CODE (SYMBOL_REF_DECL (operands[2])) == VAR_DECL\n+      && TREE_READONLY (SYMBOL_REF_DECL (operands[2]))\n+      && ! TREE_SIDE_EFFECTS (SYMBOL_REF_DECL (operands[2])))\n+    return \"movw ax, %h1\\n\\taddw ax, %h2\\n\\tmovw %h0, ax\";\n+\n+  switch (alternative)\n+    {\n+    case 0:\n+    case 1:\n+      return \"movw ax, %h1\\n\\taddw ax, %h2\\n\\tmovw %h0, ax\\n\\tmovw ax, %H1\\n\\tsknc\\n\\tincw ax\\n\\taddw ax, %H2\\n\\tmovw %H0, ax\";\n+    case 2:\n+      return \"movw ax, %h1\\n\\taddw ax,%h2\\n\\tmovw bc, ax\\n\\tmovw ax, %H1\\n\\tsknc\\n\\tincw ax\\n\\taddw ax, %H2\\n\\tmovw %H0, ax\\n\\tmovw ax, bc\\n\\tmovw %h0, ax\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n \f\n #undef  TARGET_PREFERRED_RELOAD_CLASS\n #define TARGET_PREFERRED_RELOAD_CLASS rl78_preferred_reload_class"}, {"sha": "735c19f81eedcda32af6adc80bbf300ef587e579", "filename": "gcc/config/rl78/rl78.md", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87a37c6893dc51f4c3e6fbddfcf453bd83c9215/gcc%2Fconfig%2Frl78%2Frl78.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87a37c6893dc51f4c3e6fbddfcf453bd83c9215/gcc%2Fconfig%2Frl78%2Frl78.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.md?ref=f87a37c6893dc51f4c3e6fbddfcf453bd83c9215", "patch": "@@ -243,10 +243,7 @@\n    (clobber (reg:HI BC_REG))\n    ]\n   \"rl78_real_insns_ok ()\"\n-  \"@\n-   movw ax,%h1 \\;addw ax,%h2 \\;movw %h0, ax \\;movw ax,%H1 \\;sknc \\;incw ax \\;addw ax,%H2 \\;movw %H0,ax\n-   movw ax,%h1 \\;addw ax,%h2 \\;movw %h0, ax \\;movw ax,%H1 \\;sknc \\;incw ax \\;addw ax,%H2 \\;movw %H0,ax\n-   movw ax,%h1 \\;addw ax,%h2 \\;movw bc,  ax \\;movw ax,%H1 \\;sknc \\;incw ax \\;addw ax,%H2 \\;movw %H0,ax \\;movw ax,bc \\;movw %h0, ax\"\n+  { return rl78_addsi3_internal (operands, which_alternative); }\n   [(set_attr \"valloc\" \"macax\")]\n )\n "}]}