{"sha": "400d9fc1f04336118c3200e2af14a620e7ea1d95", "node_id": "C_kwDOANBUbNoAKDQwMGQ5ZmMxZjA0MzM2MTE4YzMyMDBlMmFmMTRhNjIwZTdlYTFkOTU", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2022-11-25T16:16:06Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-12-06T13:58:49Z"}, "message": "ada: Allow No_Caching on volatile types\n\nSPARK RM now allow the property No_Caching on volatile types, to\nindicate that they should be considered volatile for compilation, but\nnot by GNATprove's analysis.\n\ngcc/ada/\n\n\t* contracts.adb (Add_Contract_Item): Allow No_Caching on types.\n\t(Check_Type_Or_Object_External_Properties): Check No_Caching.\n\tCheck that non-effectively volatile types does not contain an\n\teffectively volatile component (instead of just a volatile\n\tcomponent).\n\t(Analyze_Object_Contract): Remove shared checking of No_Caching.\n\t* sem_prag.adb (Analyze_External_Property_In_Decl_Part): Adapt checking\n\tof No_Caching for types.\n\t(Analyze_Pragma): Allow No_Caching on types.\n\t* sem_util.adb (Has_Effectively_Volatile_Component): New query function.\n\t(Is_Effectively_Volatile): Type with Volatile and No_Caching is not\n\teffectively volatile.\n\t(No_Caching_Enabled): Remove assertion to apply to all entities.\n\t* sem_util.ads: Same.", "tree": {"sha": "e5b73af6d4bb71aa52f994f402185f086e2df957", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5b73af6d4bb71aa52f994f402185f086e2df957"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/400d9fc1f04336118c3200e2af14a620e7ea1d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400d9fc1f04336118c3200e2af14a620e7ea1d95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/400d9fc1f04336118c3200e2af14a620e7ea1d95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400d9fc1f04336118c3200e2af14a620e7ea1d95/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dc44f280e7d1126b4d05e79c53b40df1afe334a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc44f280e7d1126b4d05e79c53b40df1afe334a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc44f280e7d1126b4d05e79c53b40df1afe334a"}], "stats": {"total": 129, "additions": 84, "deletions": 45}, "files": [{"sha": "59121ca9ea2f652a06b3a93d52ace1823a8bc915", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400d9fc1f04336118c3200e2af14a620e7ea1d95/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400d9fc1f04336118c3200e2af14a620e7ea1d95/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=400d9fc1f04336118c3200e2af14a620e7ea1d95", "patch": "@@ -316,6 +316,7 @@ package body Contracts is\n                         | Name_Async_Writers\n                         | Name_Effective_Reads\n                         | Name_Effective_Writes\n+                        | Name_No_Caching\n               or else (Ekind (Id) = E_Task_Type\n                          and Prag_Nam in Name_Part_Of\n                                        | Name_Depends\n@@ -859,6 +860,7 @@ package body Contracts is\n       AW_Val  : Boolean := False;\n       ER_Val  : Boolean := False;\n       EW_Val  : Boolean := False;\n+      NC_Val  : Boolean;\n       Seen    : Boolean := False;\n       Prag    : Node_Id;\n       Obj_Typ : Entity_Id;\n@@ -956,18 +958,25 @@ package body Contracts is\n       end if;\n \n       --  Verify the mutual interaction of the various external properties.\n-      --  For variables for which No_Caching is enabled, it has been checked\n-      --  already that only False values for other external properties are\n-      --  allowed.\n+      --  For types and variables for which No_Caching is enabled, it has been\n+      --  checked already that only False values for other external properties\n+      --  are allowed.\n \n       if Seen\n-        and then (Ekind (Type_Or_Obj_Id) /= E_Variable\n-                   or else not No_Caching_Enabled (Type_Or_Obj_Id))\n+        and then not No_Caching_Enabled (Type_Or_Obj_Id)\n       then\n          Check_External_Properties\n            (Type_Or_Obj_Id, AR_Val, AW_Val, ER_Val, EW_Val);\n       end if;\n \n+      --  Analyze the non-external volatility property No_Caching\n+\n+      Prag := Get_Pragma (Type_Or_Obj_Id, Pragma_No_Caching);\n+\n+      if Present (Prag) then\n+         Analyze_External_Property_In_Decl_Part (Prag, NC_Val);\n+      end if;\n+\n       --  The following checks are relevant only when SPARK_Mode is on, as\n       --  they are not standard Ada legality rules. Internally generated\n       --  temporaries are ignored, as well as return objects.\n@@ -1047,10 +1056,10 @@ package body Contracts is\n \n             if Is_Type_Id\n               and then not Is_Effectively_Volatile (Type_Or_Obj_Id)\n-              and then Has_Volatile_Component (Type_Or_Obj_Id)\n+              and then Has_Effectively_Volatile_Component (Type_Or_Obj_Id)\n             then\n                Error_Msg_N\n-                 (\"non-volatile type & cannot have volatile\"\n+                 (\"non-volatile type & cannot have effectively volatile\"\n                     & \" components\",\n                   Type_Or_Obj_Id);\n             end if;\n@@ -1076,7 +1085,6 @@ package body Contracts is\n       Saved_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n       --  Save the SPARK_Mode-related data to restore on exit\n \n-      NC_Val   : Boolean;\n       Items    : Node_Id;\n       Prag     : Node_Id;\n       Ref_Elmt : Elmt_Id;\n@@ -1118,14 +1126,6 @@ package body Contracts is\n \n       Check_Type_Or_Object_External_Properties (Type_Or_Obj_Id => Obj_Id);\n \n-      --  Analyze the non-external volatility property No_Caching\n-\n-      Prag := Get_Pragma (Obj_Id, Pragma_No_Caching);\n-\n-      if Present (Prag) then\n-         Analyze_External_Property_In_Decl_Part (Prag, NC_Val);\n-      end if;\n-\n       --  Constant-related checks\n \n       if Ekind (Obj_Id) = E_Constant then"}, {"sha": "f3c23caeae45180b0099db14497d6b5f44e68dbf", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400d9fc1f04336118c3200e2af14a620e7ea1d95/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400d9fc1f04336118c3200e2af14a620e7ea1d95/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=400d9fc1f04336118c3200e2af14a620e7ea1d95", "patch": "@@ -2116,9 +2116,16 @@ package body Sem_Prag is\n                    First (Pragma_Argument_Associations (N));\n       Obj_Decl : constant Node_Id   := Find_Related_Context (N);\n       Obj_Id   : constant Entity_Id := Defining_Entity (Obj_Decl);\n+      Obj_Typ  : Entity_Id;\n       Expr     : Node_Id;\n \n    begin\n+      if Is_Type (Obj_Id) then\n+         Obj_Typ := Obj_Id;\n+      else\n+         Obj_Typ := Etype (Obj_Id);\n+      end if;\n+\n       --  Ensure that the Boolean expression (if present) is static. A missing\n       --  argument defaults the value to True (SPARK RM 7.1.2(5)).\n \n@@ -2153,9 +2160,7 @@ package body Sem_Prag is\n       if Prag_Id /= Pragma_No_Caching\n         and then not Is_Effectively_Volatile (Obj_Id)\n       then\n-         if Ekind (Obj_Id) = E_Variable\n-           and then No_Caching_Enabled (Obj_Id)\n-         then\n+         if No_Caching_Enabled (Obj_Id) then\n             if Expr_Val then  --  Confirming value of False is allowed\n                SPARK_Msg_N\n                  (\"illegal combination of external property % and property \"\n@@ -2167,15 +2172,16 @@ package body Sem_Prag is\n                N);\n          end if;\n \n-      --  Pragma No_Caching should only apply to volatile variables of\n+      --  Pragma No_Caching should only apply to volatile types or variables of\n       --  a non-effectively volatile type (SPARK RM 7.1.2).\n \n       elsif Prag_Id = Pragma_No_Caching then\n-         if Is_Effectively_Volatile (Etype (Obj_Id)) then\n-            SPARK_Msg_N (\"property % must not apply to an object of \"\n+         if Is_Effectively_Volatile (Obj_Typ) then\n+            SPARK_Msg_N (\"property % must not apply to a type or object of \"\n                          & \"an effectively volatile type\", N);\n          elsif not Is_Volatile (Obj_Id) then\n-            SPARK_Msg_N (\"property % must apply to a volatile object\", N);\n+            SPARK_Msg_N\n+              (\"property % must apply to a volatile type or object\", N);\n          end if;\n       end if;\n \n@@ -13484,22 +13490,19 @@ package body Sem_Prag is\n             Obj_Or_Type_Decl := Find_Related_Context (N, Do_Checks => True);\n \n             --  Pragma must apply to a object declaration or to a type\n-            --  declaration (only the former in the No_Caching case).\n-            --  Original_Node is necessary to account for untagged derived\n-            --  types that are rewritten as subtypes of their\n-            --  respective root types.\n-\n-            if Nkind (Obj_Or_Type_Decl) /= N_Object_Declaration then\n-               if Prag_Id = Pragma_No_Caching\n-                  or else Nkind (Original_Node (Obj_Or_Type_Decl)) not in\n-                            N_Full_Type_Declaration    |\n-                            N_Private_Type_Declaration |\n-                            N_Formal_Type_Declaration  |\n-                            N_Task_Type_Declaration    |\n-                            N_Protected_Type_Declaration\n-               then\n-                  Pragma_Misplaced;\n-               end if;\n+            --  declaration. Original_Node is necessary to account for\n+            --  untagged derived types that are rewritten as subtypes of\n+            --  their respective root types.\n+\n+            if Nkind (Obj_Or_Type_Decl) /= N_Object_Declaration\n+              and then Nkind (Original_Node (Obj_Or_Type_Decl)) not in\n+                N_Full_Type_Declaration    |\n+                N_Private_Type_Declaration |\n+                N_Formal_Type_Declaration  |\n+                N_Task_Type_Declaration    |\n+                N_Protected_Type_Declaration\n+            then\n+               Pragma_Misplaced;\n             end if;\n \n             Obj_Or_Type_Id := Defining_Entity (Obj_Or_Type_Decl);"}, {"sha": "a1cebb082916685631e6525621d9183cc49d1408", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400d9fc1f04336118c3200e2af14a620e7ea1d95/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400d9fc1f04336118c3200e2af14a620e7ea1d95/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=400d9fc1f04336118c3200e2af14a620e7ea1d95", "patch": "@@ -13530,6 +13530,36 @@ package body Sem_Util is\n       return Has_Undef_Ref;\n    end Has_Undefined_Reference;\n \n+   ----------------------------------------\n+   -- Has_Effectively_Volatile_Component --\n+   ----------------------------------------\n+\n+   function Has_Effectively_Volatile_Component\n+     (Typ : Entity_Id) return Boolean\n+   is\n+      Comp : Entity_Id;\n+\n+   begin\n+      if Has_Volatile_Components (Typ) then\n+         return True;\n+\n+      elsif Is_Array_Type (Typ) then\n+         return Is_Effectively_Volatile (Component_Type (Typ));\n+\n+      elsif Is_Record_Type (Typ) then\n+         Comp := First_Component (Typ);\n+         while Present (Comp) loop\n+            if Is_Effectively_Volatile (Etype (Comp)) then\n+               return True;\n+            end if;\n+\n+            Next_Component (Comp);\n+         end loop;\n+      end if;\n+\n+      return False;\n+   end Has_Effectively_Volatile_Component;\n+\n    ----------------------------\n    -- Has_Volatile_Component --\n    ----------------------------\n@@ -16663,9 +16693,11 @@ package body Sem_Util is\n       if Is_Type (Id) then\n \n          --  An arbitrary type is effectively volatile when it is subject to\n-         --  pragma Atomic or Volatile.\n+         --  pragma Atomic or Volatile, unless No_Caching is enabled.\n \n-         if Is_Volatile (Id) then\n+         if Is_Volatile (Id)\n+           and then not No_Caching_Enabled (Id)\n+         then\n             return True;\n \n          --  An array type is effectively volatile when it is subject to pragma\n@@ -24579,7 +24611,6 @@ package body Sem_Util is\n    ------------------------\n \n    function No_Caching_Enabled (Id : Entity_Id) return Boolean is\n-      pragma Assert (Ekind (Id) = E_Variable);\n       Prag : constant Node_Id := Get_Pragma (Id, Pragma_No_Caching);\n       Arg1 : Node_Id;\n "}, {"sha": "b647e68ff7fa02a1de55ec5814df70e2d877430e", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400d9fc1f04336118c3200e2af14a620e7ea1d95/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400d9fc1f04336118c3200e2af14a620e7ea1d95/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=400d9fc1f04336118c3200e2af14a620e7ea1d95", "patch": "@@ -1564,6 +1564,11 @@ package Sem_Util is\n    --  Given arbitrary expression Expr, determine whether it contains at\n    --  least one name whose entity is Any_Id.\n \n+   function Has_Effectively_Volatile_Component\n+     (Typ : Entity_Id) return Boolean;\n+   --  Given arbitrary type Typ, determine whether it contains at least one\n+   --  effectively volatile component.\n+\n    function Has_Volatile_Component (Typ : Entity_Id) return Boolean;\n    --  Given arbitrary type Typ, determine whether it contains at least one\n    --  volatile component.\n@@ -2758,9 +2763,9 @@ package Sem_Util is\n    --  inline this procedural form, but not the functional form above.\n \n    function No_Caching_Enabled (Id : Entity_Id) return Boolean;\n-   --  Given the entity of a variable, determine whether Id is subject to\n-   --  volatility property No_Caching and if it is, the related expression\n-   --  evaluates to True.\n+   --  Given any entity Id, determine whether Id is subject to volatility\n+   --  property No_Caching and if it is, the related expression evaluates\n+   --  to True.\n \n    function No_Heap_Finalization (Typ : Entity_Id) return Boolean;\n    --  Determine whether type Typ is subject to pragma No_Heap_Finalization"}]}