{"sha": "c3e686a350915a66b0761fa825fc162ef0010c3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNlNjg2YTM1MDkxNWE2NmIwNzYxZmE4MjVmYzE2MmVmMDAxMGMzZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-01-05T22:21:29Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-01-05T22:21:29Z"}, "message": "re PR tree-optimization/51315 (unaligned memory accesses generated with -ftree-sra)\n\n\tPR tree-optimization/51315\n\t* tree-sra.c (tree_non_aligned_mem_for_access_p): New predicate.\n\t(build_accesses_from_assign): Use it instead of tree_non_aligned_mem_p.\n\nFrom-SVN: r182932", "tree": {"sha": "f50f930639a48ee9746a24d75d4a228ef9bf935a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f50f930639a48ee9746a24d75d4a228ef9bf935a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3e686a350915a66b0761fa825fc162ef0010c3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3e686a350915a66b0761fa825fc162ef0010c3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3e686a350915a66b0761fa825fc162ef0010c3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3e686a350915a66b0761fa825fc162ef0010c3e/comments", "author": null, "committer": null, "parents": [{"sha": "2d130b315dfc09b83b40d41447d5eb4a617843c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d130b315dfc09b83b40d41447d5eb4a617843c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d130b315dfc09b83b40d41447d5eb4a617843c6"}], "stats": {"total": 60, "additions": 56, "deletions": 4}, "files": [{"sha": "9d2648d8dea3b018bce317863ebef70781ea45ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e686a350915a66b0761fa825fc162ef0010c3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e686a350915a66b0761fa825fc162ef0010c3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3e686a350915a66b0761fa825fc162ef0010c3e", "patch": "@@ -1,3 +1,9 @@\n+2012-01-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/51315\n+\t* tree-sra.c (tree_non_aligned_mem_for_access_p): New predicate.\n+\t(build_accesses_from_assign): Use it instead of tree_non_aligned_mem_p.\n+\n 2012-01-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/51681"}, {"sha": "5fdcd1189d3911886615785753e4993ec927470a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e686a350915a66b0761fa825fc162ef0010c3e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e686a350915a66b0761fa825fc162ef0010c3e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3e686a350915a66b0761fa825fc162ef0010c3e", "patch": "@@ -1,3 +1,8 @@\n+\n+2012-01-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/execute/20120104-1.c: New test.\n+\n 2012-01-05  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/PR48946"}, {"sha": "115ba1509d4948096f5312093138bb4e75ef1693", "filename": "gcc/testsuite/gcc.c-torture/execute/20120105-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e686a350915a66b0761fa825fc162ef0010c3e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20120105-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e686a350915a66b0761fa825fc162ef0010c3e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20120105-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20120105-1.c?ref=c3e686a350915a66b0761fa825fc162ef0010c3e", "patch": "@@ -0,0 +1,24 @@\n+struct __attribute__((packed)) S\n+{\n+  int a, b, c;\n+};\n+\n+static int __attribute__ ((noinline,noclone))\n+extract(const char *p)\n+{\n+  struct S s;\n+  __builtin_memcpy (&s, p, sizeof(struct S));\n+  return s.a;\n+}\n+\n+volatile int i;\n+\n+int main (void)\n+{\n+  char p[sizeof(struct S) + 1];\n+\n+  __builtin_memset (p, 0, sizeof(struct S) + 1);\n+  i = extract (p + 1);\n+\n+  return 0;\n+}"}, {"sha": "600f4d776d1a2d49295328b22a8cdb1d641782e7", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e686a350915a66b0761fa825fc162ef0010c3e/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e686a350915a66b0761fa825fc162ef0010c3e/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=c3e686a350915a66b0761fa825fc162ef0010c3e", "patch": "@@ -1095,6 +1095,25 @@ tree_non_aligned_mem_p (tree exp, unsigned int align)\n   return false;\n }\n \n+/* Return true if EXP is a memory reference less aligned than what the access\n+   ACC would require.  This is invoked only on strict-alignment targets.  */\n+\n+static bool\n+tree_non_aligned_mem_for_access_p (tree exp, struct access *acc)\n+{\n+  unsigned int acc_align;\n+\n+  /* The alignment of the access is that of its expression.  However, it may\n+     have been artificially increased, e.g. by a local alignment promotion,\n+     so we cap it to the alignment of the type of the base, on the grounds\n+     that valid sub-accesses cannot be more aligned than that.  */\n+  acc_align = get_object_alignment (acc->expr);\n+  if (acc->base && acc_align > TYPE_ALIGN (TREE_TYPE (acc->base)))\n+    acc_align = TYPE_ALIGN (TREE_TYPE (acc->base));\n+\n+  return tree_non_aligned_mem_p (exp, acc_align);\n+}\n+\n /* Scan expressions occuring in STMT, create access structures for all accesses\n    to candidates for scalarization and remove those candidates which occur in\n    statements or expressions that prevent them from being split apart.  Return\n@@ -1123,8 +1142,7 @@ build_accesses_from_assign (gimple stmt)\n   if (lacc)\n     {\n       lacc->grp_assignment_write = 1;\n-      if (STRICT_ALIGNMENT\n-\t  && tree_non_aligned_mem_p (rhs, get_object_alignment (lhs)))\n+      if (STRICT_ALIGNMENT && tree_non_aligned_mem_for_access_p (rhs, lacc))\n         lacc->grp_unscalarizable_region = 1;\n     }\n \n@@ -1134,8 +1152,7 @@ build_accesses_from_assign (gimple stmt)\n       if (should_scalarize_away_bitmap && !gimple_has_volatile_ops (stmt)\n \t  && !is_gimple_reg_type (racc->type))\n \tbitmap_set_bit (should_scalarize_away_bitmap, DECL_UID (racc->base));\n-      if (STRICT_ALIGNMENT\n-\t  && tree_non_aligned_mem_p (lhs, get_object_alignment (rhs)))\n+      if (STRICT_ALIGNMENT && tree_non_aligned_mem_for_access_p (lhs, racc))\n         racc->grp_unscalarizable_region = 1;\n     }\n "}]}