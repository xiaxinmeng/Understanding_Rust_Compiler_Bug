{"sha": "6fe679cc6be7a55832f9b88a8cf0751e8d5eff6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZlNjc5Y2M2YmU3YTU1ODMyZjliODhhOGNmMDc1MWU4ZDVlZmY2ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T08:11:54Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T08:11:54Z"}, "message": "[AArch64] Use unspecs for remaining SVE FP binary ops\n\nAnother patch in the series to make the SVE FP patterns use unspecs,\nso that they can accurately describe cases in which the predicate\nisn't a PTRUE.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (add<mode>3, *add<mode>3)\n\t(sub<mode>3, *sub<mode>3, *fabd<mode>3, mul<mode>3, *mul<mode>3)\n\t(div<mode>3, *div<mode>3): Use SVE_COND_FP_* unspecs instead of\n\trtx codes.\n\t(cond_<optab><mode>, *cond_<optab><mode>_2, *cond_<optab><mode>_3)\n\t(*cond_<optab><mode>_any): Add the predicate to the SVE_COND_FP_*\n\tunspecs.\n\nCo-Authored-By: Kugan Vivekanandarajah <kuganv@linaro.org>\n\nFrom-SVN: r274417", "tree": {"sha": "7645df4c753e1eefab6b5a8d223e797d9c58150f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7645df4c753e1eefab6b5a8d223e797d9c58150f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fe679cc6be7a55832f9b88a8cf0751e8d5eff6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fe679cc6be7a55832f9b88a8cf0751e8d5eff6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fe679cc6be7a55832f9b88a8cf0751e8d5eff6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fe679cc6be7a55832f9b88a8cf0751e8d5eff6e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "35d6c5913d2209eb50f48b589b29f0dce13cb9b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d6c5913d2209eb50f48b589b29f0dce13cb9b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35d6c5913d2209eb50f48b589b29f0dce13cb9b7"}], "stats": {"total": 87, "additions": 49, "deletions": 38}, "files": [{"sha": "6e6f9ed7df712c758623504a74d1de774dab81f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fe679cc6be7a55832f9b88a8cf0751e8d5eff6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fe679cc6be7a55832f9b88a8cf0751e8d5eff6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fe679cc6be7a55832f9b88a8cf0751e8d5eff6e", "patch": "@@ -1,3 +1,14 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* config/aarch64/aarch64-sve.md (add<mode>3, *add<mode>3)\n+\t(sub<mode>3, *sub<mode>3, *fabd<mode>3, mul<mode>3, *mul<mode>3)\n+\t(div<mode>3, *div<mode>3): Use SVE_COND_FP_* unspecs instead of\n+\trtx codes.\n+\t(cond_<optab><mode>, *cond_<optab><mode>_2, *cond_<optab><mode>_3)\n+\t(*cond_<optab><mode>_any): Add the predicate to the SVE_COND_FP_*\n+\tunspecs.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "a7ca1b85b91e5f018be66eccde4830cbacfc9ac8", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fe679cc6be7a55832f9b88a8cf0751e8d5eff6e/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fe679cc6be7a55832f9b88a8cf0751e8d5eff6e/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=6fe679cc6be7a55832f9b88a8cf0751e8d5eff6e", "patch": "@@ -1963,7 +1963,8 @@\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\")\n \t   (unspec:SVE_F\n-\t     [(match_operand:SVE_F 2 \"register_operand\")\n+\t     [(match_dup 1)\n+\t      (match_operand:SVE_F 2 \"register_operand\")\n \t      (match_operand:SVE_F 3 \"register_operand\")]\n \t     SVE_COND_FP_BINARY)\n \t   (match_operand:SVE_F 4 \"aarch64_simd_reg_or_zero\")]\n@@ -1977,7 +1978,8 @@\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n \t   (unspec:SVE_F\n-\t     [(match_operand:SVE_F 2 \"register_operand\" \"0, w\")\n+\t     [(match_dup 1)\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"0, w\")\n \t      (match_operand:SVE_F 3 \"register_operand\" \"w, w\")]\n \t     SVE_COND_FP_BINARY)\n \t   (match_dup 2)]\n@@ -1995,7 +1997,8 @@\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n \t   (unspec:SVE_F\n-\t     [(match_operand:SVE_F 2 \"register_operand\" \"w, w\")\n+\t     [(match_dup 1)\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"w, w\")\n \t      (match_operand:SVE_F 3 \"register_operand\" \"0, w\")]\n \t     SVE_COND_FP_BINARY)\n \t   (match_dup 3)]\n@@ -2013,7 +2016,8 @@\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl\")\n \t   (unspec:SVE_F\n-\t     [(match_operand:SVE_F 2 \"register_operand\" \"0, w, w, w, w\")\n+\t     [(match_dup 1)\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"0, w, w, w, w\")\n \t      (match_operand:SVE_F 3 \"register_operand\" \"w, 0, w, w, w\")]\n \t     SVE_COND_FP_BINARY)\n \t   (match_operand:SVE_F 4 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, Dz, 0, w\")]\n@@ -2051,10 +2055,9 @@\n   [(set (match_operand:SVE_F 0 \"register_operand\")\n \t(unspec:SVE_F\n \t  [(match_dup 3)\n-\t   (plus:SVE_F\n-\t     (match_operand:SVE_F 1 \"register_operand\")\n-\t     (match_operand:SVE_F 2 \"aarch64_sve_float_arith_with_sub_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SVE_F 1 \"register_operand\")\n+\t   (match_operand:SVE_F 2 \"aarch64_sve_float_arith_with_sub_operand\")]\n+\t  UNSPEC_COND_FADD))]\n   \"TARGET_SVE\"\n   {\n     operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n@@ -2066,10 +2069,9 @@\n   [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, w\")\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n-\t   (plus:SVE_F\n-\t      (match_operand:SVE_F 2 \"register_operand\" \"%0, 0, w\")\n-\t      (match_operand:SVE_F 3 \"aarch64_sve_float_arith_with_sub_operand\" \"vsA, vsN, w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SVE_F 2 \"register_operand\" \"%0, 0, w\")\n+\t   (match_operand:SVE_F 3 \"aarch64_sve_float_arith_with_sub_operand\" \"vsA, vsN, w\")]\n+\t  UNSPEC_COND_FADD))]\n   \"TARGET_SVE\"\n   \"@\n    fadd\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n@@ -2098,10 +2100,9 @@\n   [(set (match_operand:SVE_F 0 \"register_operand\")\n \t(unspec:SVE_F\n \t  [(match_dup 3)\n-\t   (minus:SVE_F\n-\t     (match_operand:SVE_F 1 \"aarch64_sve_float_arith_operand\")\n-\t     (match_operand:SVE_F 2 \"register_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SVE_F 1 \"aarch64_sve_float_arith_operand\")\n+\t   (match_operand:SVE_F 2 \"register_operand\")]\n+\t  UNSPEC_COND_FSUB))]\n   \"TARGET_SVE\"\n   {\n     operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n@@ -2113,10 +2114,9 @@\n   [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, w, w\")\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n-\t   (minus:SVE_F\n-\t     (match_operand:SVE_F 2 \"aarch64_sve_float_arith_operand\" \"0, 0, vsA, w\")\n-\t     (match_operand:SVE_F 3 \"aarch64_sve_float_arith_with_sub_operand\" \"vsA, vsN, 0, w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SVE_F 2 \"aarch64_sve_float_arith_operand\" \"0, 0, vsA, w\")\n+\t   (match_operand:SVE_F 3 \"aarch64_sve_float_arith_with_sub_operand\" \"vsA, vsN, 0, w\")]\n+\t  UNSPEC_COND_FSUB))]\n   \"TARGET_SVE\n    && (register_operand (operands[2], <MODE>mode)\n        || register_operand (operands[3], <MODE>mode))\"\n@@ -2147,10 +2147,12 @@\n   [(set (match_operand:SVE_F 0 \"register_operand\" \"=w\")\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n-\t   (minus:SVE_F\n-\t     (match_operand:SVE_F 2 \"register_operand\" \"0\")\n-\t     (match_operand:SVE_F 3 \"register_operand\" \"w\"))]\n-\tUNSPEC_COND_FABS))]\n+\t   (unspec:SVE_F\n+\t     [(match_dup 1)\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"0\")\n+\t      (match_operand:SVE_F 3 \"register_operand\" \"w\")]\n+\t     UNSPEC_COND_FSUB)]\n+\t  UNSPEC_COND_FABS))]\n   \"TARGET_SVE\"\n   \"fabd\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\"\n )\n@@ -2167,10 +2169,9 @@\n   [(set (match_operand:SVE_F 0 \"register_operand\")\n \t(unspec:SVE_F\n \t  [(match_dup 3)\n-\t   (mult:SVE_F\n-\t     (match_operand:SVE_F 1 \"register_operand\")\n-\t     (match_operand:SVE_F 2 \"aarch64_sve_float_mul_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SVE_F 1 \"register_operand\")\n+\t   (match_operand:SVE_F 2 \"aarch64_sve_float_mul_operand\")]\n+\t  UNSPEC_COND_FMUL))]\n   \"TARGET_SVE\"\n   {\n     operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n@@ -2182,10 +2183,9 @@\n   [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w\")\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (mult:SVE_F\n-\t     (match_operand:SVE_F 2 \"register_operand\" \"%0, w\")\n-\t     (match_operand:SVE_F 3 \"aarch64_sve_float_mul_operand\" \"vsM, w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SVE_F 2 \"register_operand\" \"%0, w\")\n+\t   (match_operand:SVE_F 3 \"aarch64_sve_float_mul_operand\" \"vsM, w\")]\n+\t  UNSPEC_COND_FMUL))]\n   \"TARGET_SVE\"\n   \"@\n    fmul\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n@@ -2212,9 +2212,9 @@\n   [(set (match_operand:SVE_F 0 \"register_operand\")\n \t(unspec:SVE_F\n \t  [(match_dup 3)\n-\t   (div:SVE_F (match_operand:SVE_F 1 \"register_operand\")\n-\t\t      (match_operand:SVE_F 2 \"register_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SVE_F 1 \"register_operand\")\n+\t   (match_operand:SVE_F 2 \"register_operand\")]\n+\t  UNSPEC_COND_FDIV))]\n   \"TARGET_SVE\"\n   {\n     operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n@@ -2226,9 +2226,9 @@\n   [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, ?&w\")\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n-\t   (div:SVE_F (match_operand:SVE_F 2 \"register_operand\" \"0, w, w\")\n-\t\t      (match_operand:SVE_F 3 \"register_operand\" \"w, 0, w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SVE_F 2 \"register_operand\" \"0, w, w\")\n+\t   (match_operand:SVE_F 3 \"register_operand\" \"w, 0, w\")]\n+\t  UNSPEC_COND_FDIV))]\n   \"TARGET_SVE\"\n   \"@\n    fdiv\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>"}]}