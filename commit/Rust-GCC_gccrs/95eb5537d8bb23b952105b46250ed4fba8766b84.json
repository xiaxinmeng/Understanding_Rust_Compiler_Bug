{"sha": "95eb5537d8bb23b952105b46250ed4fba8766b84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVlYjU1MzdkOGJiMjNiOTUyMTA1YjQ2MjUwZWQ0ZmJhODc2NmI4NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T08:39:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T08:39:48Z"}, "message": "[AArch64] Rearrange SVE conversion patterns\n\nThe SVE int<->float conversion patterns need to handle various\ncombinations of modes, making sure that the predicate mode is based\non the widest element size.  We did this using separate patterns for\nconversions involving:\n\n- HF (converting to/from [HSD]I, predicated based on the int operand)\n- SF (converting to/from [SD]I, predicated based on the int operand)\n- DF (converting to/from [SD]I, predicated based on the float operand)\n\nThis worked, and meant that there were no redundant patterns.  However,\nthe ACLE needs various new predicated patterns too, and having three\nversions of each one seemed excessive.\n\nThis patch instead splits the patterns into two groups rather than three.\nFor conversions to integers:\n\n- truncating (predicated based on the source type, DF->SI only)\n- non-truncating (predicated based on the destination type)\n\nFor conversions from integers:\n\n- extending (predicated based on the destination type, SI->DF only)\n- non-extending (predicated based on the source type)\n\nThis means that we still don't create pattern names for the invalid\ncombinations DF<->HI and SF<->HI.  The downside is that we need to\nuse C conditions to exclude the SI<->DF case from the non-truncating/\nnon-extending patterns.  We therefore have two pattern names for SI<->DF,\nbut genconditions ensures that the invalid one always has the value\nCODE_FOR_nothing.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/iterators.md (VNx4SI_ONLY, VNx2DF_ONLY): New mode\n\titerators.\n\t(SVE_BHSI, SVE_SDI): Tweak comment.\n\t(SVE_HSDI): Likewise.  Fix definition.\n\t(SVE_SDF): New mode iterator.\n\t(elem_bits): New mode attribute.\n\t(SVE_COND_FCVT): New int iterator.\n\t* config/aarch64/aarch64-sve.md\n\t(*<SVE_COND_ICVTF:optab>v16hsf<SVE_HSDI:mode>2)\n\t(*<SVE_COND_ICVTF:optab>vnx4sf<SVE_SDI:mode>2)\n\t(*<SVE_COND_ICVTF:optab>vnx2df<SVE_SDI:mode>2): Merge into...\n\t(*aarch64_sve_<SVE_COND_ICVTF:optab>_nontrunc<SVE_F:mode><SVE_HSDI:mode>)\n\t(*aarch64_sve_<SVE_COND_ICVTF:optab>_trunc<VNx2DF_ONLY:mode><VNx4SI_ONLY:mode>):\n\t...these new patterns.\n\t(*<SVE_COND_FCVTI:optab><SVE_HSDI:mode>vnx8hf2)\n\t(*<SVE_COND_FCVTI:optab><SVE_SDI:mode>vnx4sf2)\n\t(aarch64_sve_<SVE_COND_FCVTI:optab><SVE_SDI:mode>vnx2df2):\n\tMerge into...\n\t(*aarch64_sve_<SVE_COND_FCVTI:optab>_nonextend<SVE_HSDI:mode><SVE_F:mode>)\n\t(aarch64_sve_<SVE_COND_FCVTI:optab>_extend<VNx4SI_ONLY:mode><VNx2DF_ONLY:mode>):\n\t...these new patterns.\n\t(vec_unpack<su_optab>_float_<perm_hilo>_vnx4si): Update accordingly.\n\t(*trunc<Vwide><SVE_SDF:mode>2): Replace with...\n\t(*aarch64_sve_<SVE_COND_FCVT:optab>_trunc<SVE_SDF:mode><SVE_HSF:mode>):\n\t...this new pattern.\n\t(aarch64_sve_extend<SVE_HSDF:mode><Vwide>2): Replace with...\n\t(aarch64_sve_<SVE_COND_FCVT:optab>_nontrunc<SVE_HSF:mode><SVE_SDF:mode>):\n\t...this new pattern.\n\t(vec_unpacks_<perm_hilo>_<mode>): Update accordingly.\n\nFrom-SVN: r274424", "tree": {"sha": "2edd40ddbc70b3249b97aaed1e75ab6282b514c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2edd40ddbc70b3249b97aaed1e75ab6282b514c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95eb5537d8bb23b952105b46250ed4fba8766b84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95eb5537d8bb23b952105b46250ed4fba8766b84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95eb5537d8bb23b952105b46250ed4fba8766b84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95eb5537d8bb23b952105b46250ed4fba8766b84/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99361551624427aebe7a856a4327e083aa33733a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99361551624427aebe7a856a4327e083aa33733a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99361551624427aebe7a856a4327e083aa33733a"}], "stats": {"total": 171, "additions": 95, "deletions": 76}, "files": [{"sha": "ddf67637c78abfb4245996f28447a23f95f7c5b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95eb5537d8bb23b952105b46250ed4fba8766b84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95eb5537d8bb23b952105b46250ed4fba8766b84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95eb5537d8bb23b952105b46250ed4fba8766b84", "patch": "@@ -1,3 +1,35 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (VNx4SI_ONLY, VNx2DF_ONLY): New mode\n+\titerators.\n+\t(SVE_BHSI, SVE_SDI): Tweak comment.\n+\t(SVE_HSDI): Likewise.  Fix definition.\n+\t(SVE_SDF): New mode iterator.\n+\t(elem_bits): New mode attribute.\n+\t(SVE_COND_FCVT): New int iterator.\n+\t* config/aarch64/aarch64-sve.md\n+\t(*<SVE_COND_ICVTF:optab>v16hsf<SVE_HSDI:mode>2)\n+\t(*<SVE_COND_ICVTF:optab>vnx4sf<SVE_SDI:mode>2)\n+\t(*<SVE_COND_ICVTF:optab>vnx2df<SVE_SDI:mode>2): Merge into...\n+\t(*aarch64_sve_<SVE_COND_ICVTF:optab>_nontrunc<SVE_F:mode><SVE_HSDI:mode>)\n+\t(*aarch64_sve_<SVE_COND_ICVTF:optab>_trunc<VNx2DF_ONLY:mode><VNx4SI_ONLY:mode>):\n+\t...these new patterns.\n+\t(*<SVE_COND_FCVTI:optab><SVE_HSDI:mode>vnx8hf2)\n+\t(*<SVE_COND_FCVTI:optab><SVE_SDI:mode>vnx4sf2)\n+\t(aarch64_sve_<SVE_COND_FCVTI:optab><SVE_SDI:mode>vnx2df2):\n+\tMerge into...\n+\t(*aarch64_sve_<SVE_COND_FCVTI:optab>_nonextend<SVE_HSDI:mode><SVE_F:mode>)\n+\t(aarch64_sve_<SVE_COND_FCVTI:optab>_extend<VNx4SI_ONLY:mode><VNx2DF_ONLY:mode>):\n+\t...these new patterns.\n+\t(vec_unpack<su_optab>_float_<perm_hilo>_vnx4si): Update accordingly.\n+\t(*trunc<Vwide><SVE_SDF:mode>2): Replace with...\n+\t(*aarch64_sve_<SVE_COND_FCVT:optab>_trunc<SVE_SDF:mode><SVE_HSF:mode>):\n+\t...this new pattern.\n+\t(aarch64_sve_extend<SVE_HSDF:mode><Vwide>2): Replace with...\n+\t(aarch64_sve_<SVE_COND_FCVT:optab>_nontrunc<SVE_HSF:mode><SVE_SDF:mode>):\n+\t...this new pattern.\n+\t(vec_unpacks_<perm_hilo>_<mode>): Update accordingly.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.md (UNSPEC_FLOAT_CONVERT): Delete."}, {"sha": "64992c4875b627bba7227f3f57529323a02a0ee3", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 43, "deletions": 69, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95eb5537d8bb23b952105b46250ed4fba8766b84/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95eb5537d8bb23b952105b46250ed4fba8766b84/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=95eb5537d8bb23b952105b46250ed4fba8766b84", "patch": "@@ -3656,40 +3656,28 @@\n   }\n )\n \n-;; Conversion of SF to DI, SI or HI, predicated with a PTRUE.\n-(define_insn \"*<optab>v16hsf<mode>2\"\n+;; Predicated float-to-integer conversion, either to the same width or wider.\n+(define_insn \"*aarch64_sve_<optab>_nontrunc<SVE_F:mode><SVE_HSDI:mode>\"\n   [(set (match_operand:SVE_HSDI 0 \"register_operand\" \"=w\")\n \t(unspec:SVE_HSDI\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n+\t  [(match_operand:<SVE_HSDI:VPRED> 1 \"register_operand\" \"Upl\")\n \t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n-\t   (match_operand:VNx8HF 2 \"register_operand\" \"w\")]\n-\t  SVE_COND_FCVTI))]\n-  \"TARGET_SVE\"\n-  \"fcvtz<su>\\t%0.<Vetype>, %1/m, %2.h\"\n-)\n-\n-;; Conversion of SF to DI or SI, predicated with a PTRUE.\n-(define_insn \"*<optab>vnx4sf<mode>2\"\n-  [(set (match_operand:SVE_SDI 0 \"register_operand\" \"=w\")\n-\t(unspec:SVE_SDI\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n-\t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n-\t   (match_operand:VNx4SF 2 \"register_operand\" \"w\")]\n+\t   (match_operand:SVE_F 2 \"register_operand\" \"w\")]\n \t  SVE_COND_FCVTI))]\n-  \"TARGET_SVE\"\n-  \"fcvtz<su>\\t%0.<Vetype>, %1/m, %2.s\"\n+  \"TARGET_SVE && <SVE_HSDI:elem_bits> >= <SVE_F:elem_bits>\"\n+  \"fcvtz<su>\\t%0.<SVE_HSDI:Vetype>, %1/m, %2.<SVE_F:Vetype>\"\n )\n \n-;; Conversion of DF to DI or SI, predicated with a PTRUE.\n-(define_insn \"*<optab>vnx2df<mode>2\"\n-  [(set (match_operand:SVE_SDI 0 \"register_operand\" \"=w\")\n-\t(unspec:SVE_SDI\n+;; Predicated narrowing float-to-integer conversion.\n+(define_insn \"*aarch64_sve_<optab>_trunc<VNx2DF_ONLY:mode><VNx4SI_ONLY:mode>\"\n+  [(set (match_operand:VNx4SI_ONLY 0 \"register_operand\" \"=w\")\n+\t(unspec:VNx4SI_ONLY\n \t  [(match_operand:VNx2BI 1 \"register_operand\" \"Upl\")\n \t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n-\t   (match_operand:VNx2DF 2 \"register_operand\" \"w\")]\n+\t   (match_operand:VNx2DF_ONLY 2 \"register_operand\" \"w\")]\n \t  SVE_COND_FCVTI))]\n   \"TARGET_SVE\"\n-  \"fcvtz<su>\\t%0.<Vetype>, %1/m, %2.d\"\n+  \"fcvtz<su>\\t%0.<VNx4SI_ONLY:Vetype>, %1/m, %2.<VNx2DF_ONLY:Vetype>\"\n )\n \n ;; -------------------------------------------------------------------------\n@@ -3751,41 +3739,29 @@\n   }\n )\n \n-;; Conversion of DI, SI or HI to the same number of HFs, predicated\n-;; with a PTRUE.\n-(define_insn \"*<optab><mode>vnx8hf2\"\n-  [(set (match_operand:VNx8HF 0 \"register_operand\" \"=w\")\n-\t(unspec:VNx8HF\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n+;; Predicated integer-to-float conversion, either to the same width or\n+;; narrower.\n+(define_insn \"*aarch64_sve_<optab>_nonextend<SVE_HSDI:mode><SVE_F:mode>\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_F\n+\t  [(match_operand:<SVE_HSDI:VPRED> 1 \"register_operand\" \"Upl\")\n \t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n \t   (match_operand:SVE_HSDI 2 \"register_operand\" \"w\")]\n \t  SVE_COND_ICVTF))]\n-  \"TARGET_SVE\"\n-  \"<su>cvtf\\t%0.h, %1/m, %2.<Vetype>\"\n-)\n-\n-;; Conversion of DI or SI to the same number of SFs, predicated with a PTRUE.\n-(define_insn \"*<optab><mode>vnx4sf2\"\n-  [(set (match_operand:VNx4SF 0 \"register_operand\" \"=w\")\n-\t(unspec:VNx4SF\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n-\t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n-\t   (match_operand:SVE_SDI 2 \"register_operand\" \"w\")]\n-\t  SVE_COND_ICVTF))]\n-  \"TARGET_SVE\"\n-  \"<su>cvtf\\t%0.s, %1/m, %2.<Vetype>\"\n+  \"TARGET_SVE && <SVE_HSDI:elem_bits> >= <SVE_F:elem_bits>\"\n+  \"<su>cvtf\\t%0.<SVE_F:Vetype>, %1/m, %2.<SVE_HSDI:Vetype>\"\n )\n \n-;; Conversion of DI or SI to DF, predicated with a PTRUE.\n-(define_insn \"aarch64_sve_<optab><mode>vnx2df2\"\n-  [(set (match_operand:VNx2DF 0 \"register_operand\" \"=w\")\n-\t(unspec:VNx2DF\n+;; Predicated widening integer-to-float conversion.\n+(define_insn \"aarch64_sve_<optab>_extend<VNx4SI_ONLY:mode><VNx2DF_ONLY:mode>\"\n+  [(set (match_operand:VNx2DF_ONLY 0 \"register_operand\" \"=w\")\n+\t(unspec:VNx2DF_ONLY\n \t  [(match_operand:VNx2BI 1 \"register_operand\" \"Upl\")\n \t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n-\t   (match_operand:SVE_SDI 2 \"register_operand\" \"w\")]\n+\t   (match_operand:VNx4SI_ONLY 2 \"register_operand\" \"w\")]\n \t  SVE_COND_ICVTF))]\n   \"TARGET_SVE\"\n-  \"<su>cvtf\\t%0.d, %1/m, %2.<Vetype>\"\n+  \"<su>cvtf\\t%0.<VNx2DF_ONLY:Vetype>, %1/m, %2.<VNx4SI_ONLY:Vetype>\"\n )\n \n ;; -------------------------------------------------------------------------\n@@ -3821,7 +3797,7 @@\n \t       (temp, operands[1], operands[1]));\n     rtx ptrue = aarch64_ptrue_reg (VNx2BImode);\n     rtx strictness = gen_int_mode (SVE_RELAXED_GP, SImode);\n-    emit_insn (gen_aarch64_sve_<FLOATUORS:optab>vnx4sivnx2df2\n+    emit_insn (gen_aarch64_sve_<FLOATUORS:optab>_extendvnx4sivnx2df\n \t       (operands[0], ptrue, temp, strictness));\n     DONE;\n   }\n@@ -3859,17 +3835,16 @@\n   }\n )\n \n-;; Conversion of DFs to the same number of SFs, or SFs to the same number\n-;; of HFs.\n-(define_insn \"*trunc<Vwide><mode>2\"\n+;; Predicated float-to-float truncation.\n+(define_insn \"*aarch64_sve_<optab>_trunc<SVE_SDF:mode><SVE_HSF:mode>\"\n   [(set (match_operand:SVE_HSF 0 \"register_operand\" \"=w\")\n \t(unspec:SVE_HSF\n-\t  [(match_operand:<VWIDE_PRED> 1 \"register_operand\" \"Upl\")\n+\t  [(match_operand:<SVE_SDF:VPRED> 1 \"register_operand\" \"Upl\")\n \t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n-\t   (match_operand:<VWIDE> 2 \"register_operand\" \"w\")]\n-\t  UNSPEC_COND_FCVT))]\n-  \"TARGET_SVE\"\n-  \"fcvt\\t%0.<Vetype>, %1/m, %2.<Vewtype>\"\n+\t   (match_operand:SVE_SDF 2 \"register_operand\" \"w\")]\n+\t  SVE_COND_FCVT))]\n+  \"TARGET_SVE && <SVE_SDF:elem_bits> > <SVE_HSF:elem_bits>\"\n+  \"fcvt\\t%0.<SVE_HSF:Vetype>, %1/m, %2.<SVE_SDF:Vetype>\"\n )\n \n ;; -------------------------------------------------------------------------\n@@ -3899,23 +3874,22 @@\n \t\t(temp, operands[1], operands[1]));\n     rtx ptrue = aarch64_ptrue_reg (<VWIDE_PRED>mode);\n     rtx strictness = gen_int_mode (SVE_RELAXED_GP, SImode);\n-    emit_insn (gen_aarch64_sve_extend<mode><Vwide>2\n+    emit_insn (gen_aarch64_sve_fcvt_nontrunc<mode><Vwide>\n \t       (operands[0], ptrue, temp, strictness));\n     DONE;\n   }\n )\n \n-;; Conversion of SFs to the same number of DFs, or HFs to the same number\n-;; of SFs.\n-(define_insn \"aarch64_sve_extend<mode><Vwide>2\"\n-  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-\t(unspec:<VWIDE>\n-\t  [(match_operand:<VWIDE_PRED> 1 \"register_operand\" \"Upl\")\n+;; Predicated float-to-float extension.\n+(define_insn \"aarch64_sve_<optab>_nontrunc<SVE_HSF:mode><SVE_SDF:mode>\"\n+  [(set (match_operand:SVE_SDF 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_SDF\n+\t  [(match_operand:<SVE_SDF:VPRED> 1 \"register_operand\" \"Upl\")\n \t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n \t   (match_operand:SVE_HSF 2 \"register_operand\" \"w\")]\n-\t  UNSPEC_COND_FCVT))]\n-  \"TARGET_SVE\"\n-  \"fcvt\\t%0.<Vewtype>, %1/m, %2.<Vetype>\"\n+\t  SVE_COND_FCVT))]\n+  \"TARGET_SVE && <SVE_SDF:elem_bits> > <SVE_HSF:elem_bits>\"\n+  \"fcvt\\t%0.<SVE_SDF:Vetype>, %1/m, %2.<SVE_HSF:Vetype>\"\n )\n \n ;; -------------------------------------------------------------------------"}, {"sha": "75e672b8609fb6f23df7af781db4300e56d885e3", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95eb5537d8bb23b952105b46250ed4fba8766b84/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95eb5537d8bb23b952105b46250ed4fba8766b84/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=95eb5537d8bb23b952105b46250ed4fba8766b84", "patch": "@@ -278,6 +278,10 @@\n (define_mode_iterator SVE_ALL [VNx16QI VNx8HI VNx4SI VNx2DI\n \t\t\t       VNx8HF VNx4SF VNx2DF])\n \n+;; Iterators for single modes, for \"@\" patterns.\n+(define_mode_iterator VNx4SI_ONLY [VNx4SI])\n+(define_mode_iterator VNx2DF_ONLY [VNx2DF])\n+\n ;; All SVE vector structure modes.\n (define_mode_iterator SVE_STRUCT [VNx32QI VNx16HI VNx8SI VNx4DI\n \t\t\t\t  VNx16HF VNx8SF VNx4DF\n@@ -292,15 +296,21 @@\n ;; All SVE vector modes that have 8-bit, 16-bit or 32-bit elements.\n (define_mode_iterator SVE_BHS [VNx16QI VNx8HI VNx4SI VNx8HF VNx4SF])\n \n-;; All SVE integer vector modes that have 8-bit, 16-bit or 32-bit elements.\n+;; SVE integer vector modes that have 8-bit, 16-bit or 32-bit elements.\n (define_mode_iterator SVE_BHSI [VNx16QI VNx8HI VNx4SI])\n \n-;; All SVE integer vector modes that have 16-bit, 32-bit or 64-bit elements.\n-(define_mode_iterator SVE_HSDI [VNx16QI VNx8HI VNx4SI])\n+;; SVE integer vector modes that have 16-bit, 32-bit or 64-bit elements.\n+(define_mode_iterator SVE_HSDI [VNx8HI VNx4SI VNx2DI])\n \n-;; All SVE floating-point vector modes that have 16-bit or 32-bit elements.\n+;; SVE floating-point vector modes that have 16-bit or 32-bit elements.\n (define_mode_iterator SVE_HSF [VNx8HF VNx4SF])\n \n+;; SVE integer vector modes that have 32-bit or 64-bit elements.\n+(define_mode_iterator SVE_SDI [VNx4SI VNx2DI])\n+\n+;; SVE floating-point vector modes that have 32-bit or 64-bit elements.\n+(define_mode_iterator SVE_SDF [VNx4SF VNx2DF])\n+\n ;; All SVE vector modes that have 16-bit, 32-bit or 64-bit elements.\n (define_mode_iterator SVE_HSD [VNx8HI VNx4SI VNx2DI VNx8HF VNx4SF VNx2DF])\n \n@@ -313,9 +323,6 @@\n ;; All SVE vector modes that have 64-bit elements.\n (define_mode_iterator SVE_D [VNx2DI VNx2DF])\n \n-;; All SVE integer vector modes that have 32-bit or 64-bit elements.\n-(define_mode_iterator SVE_SDI [VNx4SI VNx2DI])\n-\n ;; All SVE integer vector modes.\n (define_mode_iterator SVE_I [VNx16QI VNx8HI VNx4SI VNx2DI])\n \n@@ -629,6 +636,11 @@\n (define_mode_attr sizem1 [(QI \"#7\") (HI \"#15\") (SI \"#31\") (DI \"#63\")\n \t\t\t  (HF \"#15\") (SF \"#31\") (DF \"#63\")])\n \n+;; The number of bits in a vector element, or controlled by a predicate\n+;; element.\n+(define_mode_attr elem_bits [(VNx8HI \"16\") (VNx4SI \"32\") (VNx2DI \"64\")\n+\t\t\t     (VNx8HF \"16\") (VNx4SF \"32\") (VNx2DF \"64\")])\n+\n ;; Attribute to describe constants acceptable in logical operations\n (define_mode_attr lconst [(SI \"K\") (DI \"L\")])\n \n@@ -1647,6 +1659,7 @@\n \t\t\t\t\tUNSPEC_COND_FRINTZ\n \t\t\t\t\tUNSPEC_COND_FSQRT])\n \n+(define_int_iterator SVE_COND_FCVT [UNSPEC_COND_FCVT])\n (define_int_iterator SVE_COND_FCVTI [UNSPEC_COND_FCVTZS UNSPEC_COND_FCVTZU])\n (define_int_iterator SVE_COND_ICVTF [UNSPEC_COND_SCVTF UNSPEC_COND_UCVTF])\n "}]}