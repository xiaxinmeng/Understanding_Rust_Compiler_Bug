{"sha": "769370f3e2e04823c8a621d8ffa756dd83ebf21e", "node_id": "C_kwDOANBUbNoAKDc2OTM3MGYzZTJlMDQ4MjNjOGE2MjFkOGZmYTc1NmRkODNlYmYyMWU", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2022-12-06T01:21:14Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2022-12-06T01:21:14Z"}, "message": "aarch64: Use dup and zip1 for interleaving elements in vector initializer.\n\ngcc/ChangeLog:\n\t* config/aarch64/aarch64.cc (aarch64_expand_vector_init): Use dup\n\tand zip1 for interleaving elements in vector initializer.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/aarch64/interleave-init-1.c: New test.", "tree": {"sha": "7466b87b6e14ad9922c3116c1ec4484f206fa824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7466b87b6e14ad9922c3116c1ec4484f206fa824"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/769370f3e2e04823c8a621d8ffa756dd83ebf21e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/769370f3e2e04823c8a621d8ffa756dd83ebf21e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/769370f3e2e04823c8a621d8ffa756dd83ebf21e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/769370f3e2e04823c8a621d8ffa756dd83ebf21e/comments", "author": null, "committer": null, "parents": [{"sha": "e6f93f450deb17ced884afd5216b759ff67d4ba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f93f450deb17ced884afd5216b759ff67d4ba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f93f450deb17ced884afd5216b759ff67d4ba9"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "dedda68261dc1e5d8ccc2981279dc671d7695023", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/769370f3e2e04823c8a621d8ffa756dd83ebf21e/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/769370f3e2e04823c8a621d8ffa756dd83ebf21e/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=769370f3e2e04823c8a621d8ffa756dd83ebf21e", "patch": "@@ -22058,6 +22058,38 @@ aarch64_expand_vector_init (rtx target, rtx vals)\n       return;\n     }\n \n+  /* Check for interleaving case.\n+     For eg if initializer is (int16x8_t) {x, y, x, y, x, y, x, y}.\n+     Generate following code:\n+     dup v0.h, x\n+     dup v1.h, y\n+     zip1 v0.h, v0.h, v1.h\n+     for \"large enough\" initializer.  */\n+\n+  if (n_elts >= 8)\n+    {\n+      int i;\n+      for (i = 2; i < n_elts; i++)\n+\tif (!rtx_equal_p (XVECEXP (vals, 0, i), XVECEXP (vals, 0, i % 2)))\n+\t  break;\n+\n+      if (i == n_elts)\n+\t{\n+\t  machine_mode mode = GET_MODE (target);\n+\t  rtx dest[2];\n+\n+\t  for (int i = 0; i < 2; i++)\n+\t    {\n+\t      rtx x = expand_vector_broadcast (mode, XVECEXP (vals, 0, i));\n+\t      dest[i] = force_reg (mode, x);\n+\t    }\n+\n+\t  rtvec v = gen_rtvec (2, dest[0], dest[1]);\n+\t  emit_set_insn (target, gen_rtx_UNSPEC (mode, v, UNSPEC_ZIP1));\n+\t  return;\n+\t}\n+    }\n+\n   enum insn_code icode = optab_handler (vec_set_optab, mode);\n   gcc_assert (icode != CODE_FOR_nothing);\n "}, {"sha": "ee775048589d4bc449b75616ecda5fb4f4432cc8", "filename": "gcc/testsuite/gcc.target/aarch64/interleave-init-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/769370f3e2e04823c8a621d8ffa756dd83ebf21e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finterleave-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/769370f3e2e04823c8a621d8ffa756dd83ebf21e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finterleave-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finterleave-init-1.c?ref=769370f3e2e04823c8a621d8ffa756dd83ebf21e", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#include <arm_neon.h>\n+\n+/*\n+** foo:\n+**\t...\n+**\tdup\tv[0-9]+\\.8h, w[0-9]+\n+**\tdup\tv[0-9]+\\.8h, w[0-9]+\n+**\tzip1\tv[0-9]+\\.8h, v[0-9]+\\.8h, v[0-9]+\\.8h\n+**\t...\n+**\tret\n+*/\n+\n+int16x8_t foo(int16_t x, int y)\n+{\n+  int16x8_t v = (int16x8_t) {x, y, x, y, x, y, x, y}; \n+  return v;\n+}\n+\n+/*\n+** foo2:\n+**\t...\n+**\tdup\tv[0-9]+\\.8h, w[0-9]+\n+**\tmovi\tv[0-9]+\\.8h, 0x1\n+**\tzip1\tv[0-9]+\\.8h, v[0-9]+\\.8h, v[0-9]+\\.8h\n+**\t...\n+**\tret\n+*/\n+\n+int16x8_t foo2(int16_t x) \n+{\n+  int16x8_t v = (int16x8_t) {x, 1, x, 1, x, 1, x, 1}; \n+  return v;\n+}"}]}