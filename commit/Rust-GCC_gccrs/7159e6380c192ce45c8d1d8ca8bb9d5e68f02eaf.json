{"sha": "7159e6380c192ce45c8d1d8ca8bb9d5e68f02eaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE1OWU2MzgwYzE5MmNlNDVjOGQxZDhjYThiYjlkNWU2OGYwMmVhZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-10-14T12:50:45Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-10-14T12:50:45Z"}, "message": "alpha.md: Remove empty predicates and/or constraints.\n\n\t* config/alpha/alpha.md: Remove empty predicates and/or constraints.\n\t* config/alpha/sync.md: Ditto.\n\nFrom-SVN: r192431", "tree": {"sha": "aebb48c00e652d28f110a77f3dbe503abde8be44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aebb48c00e652d28f110a77f3dbe503abde8be44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7159e6380c192ce45c8d1d8ca8bb9d5e68f02eaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7159e6380c192ce45c8d1d8ca8bb9d5e68f02eaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7159e6380c192ce45c8d1d8ca8bb9d5e68f02eaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7159e6380c192ce45c8d1d8ca8bb9d5e68f02eaf/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c3da4c5d2c2d535a6508663763b967a61755585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3da4c5d2c2d535a6508663763b967a61755585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3da4c5d2c2d535a6508663763b967a61755585"}], "stats": {"total": 1293, "additions": 632, "deletions": 661}, "files": [{"sha": "b74a547aa9c0e14b8b30aaaf08e8ecab154b2363", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7159e6380c192ce45c8d1d8ca8bb9d5e68f02eaf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7159e6380c192ce45c8d1d8ca8bb9d5e68f02eaf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7159e6380c192ce45c8d1d8ca8bb9d5e68f02eaf", "patch": "@@ -1,3 +1,8 @@\n+2012-10-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.md: Remove empty predicates and/or constraints.\n+\t* config/alpha/sync.md: Ditto.\n+\n 2012-10-13  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.md (I24MODE): New mode iterator."}, {"sha": "1aa8a6714ae97c06b758e8a02467eb1bcaf1a2ac", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 592, "deletions": 626, "changes": 1218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7159e6380c192ce45c8d1d8ca8bb9d5e68f02eaf/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7159e6380c192ce45c8d1d8ca8bb9d5e68f02eaf/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=7159e6380c192ce45c8d1d8ca8bb9d5e68f02eaf", "patch": "@@ -234,10 +234,8 @@\n ;; code for that case.  But we don't reject the possibility.\n \n (define_expand \"extendsidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n-  \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\")))])\n \n (define_insn \"*cvtlq\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n@@ -260,8 +258,8 @@\n    (set_attr \"length\" \"*,*,8\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"hard_fp_register_operand\" \"\")\n-\t(sign_extend:DI (match_operand:SI 1 \"memory_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"hard_fp_register_operand\")\n+\t(sign_extend:DI (match_operand:SI 1 \"memory_operand\")))]\n   \"reload_completed\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (unspec:DI [(match_dup 2)] UNSPEC_CVTLQ))]\n@@ -274,15 +272,14 @@\n ;; reload when converting fp->int.\n \n (define_peephole2\n-  [(set (match_operand:SI 0 \"hard_int_register_operand\" \"\")\n-        (match_operand:SI 1 \"memory_operand\" \"\"))\n-   (set (match_operand:DI 2 \"hard_int_register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"hard_int_register_operand\")\n+        (match_operand:SI 1 \"memory_operand\"))\n+   (set (match_operand:DI 2 \"hard_int_register_operand\")\n         (sign_extend:DI (match_dup 0)))]\n   \"true_regnum (operands[0]) == true_regnum (operands[2])\n    || peep2_reg_dead_p (2, operands[0])\"\n   [(set (match_dup 2)\n-\t(sign_extend:DI (match_dup 1)))]\n-  \"\")\n+\t(sign_extend:DI (match_dup 1)))])\n \n (define_insn \"addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n@@ -296,9 +293,9 @@\n    ldah %0,%h2(%r1)\")\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t (match_operand:SI 2 \"const_int_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\")\n+\t\t (match_operand:SI 2 \"const_int_operand\")))]\n   \"! add_operand (operands[2], SImode)\"\n   [(set (match_dup 0) (plus:SI (match_dup 1) (match_dup 3)))\n    (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 4)))]\n@@ -333,11 +330,11 @@\n    subl %r1,%n2,%0\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(sign_extend:DI\n-\t (plus:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"\")\n-\t\t  (match_operand:SI 2 \"const_int_operand\" \"\"))))\n-   (clobber (match_operand:SI 3 \"reg_not_elim_operand\" \"\"))]\n+\t (plus:SI (match_operand:SI 1 \"reg_not_elim_operand\")\n+\t\t  (match_operand:SI 2 \"const_int_operand\"))))\n+   (clobber (match_operand:SI 3 \"reg_not_elim_operand\"))]\n   \"! sext_add_operand (operands[2], SImode) && INTVAL (operands[2]) > 0\n    && INTVAL (operands[2]) % 4 == 0\"\n   [(set (match_dup 3) (match_dup 4))\n@@ -356,13 +353,13 @@\n })\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(sign_extend:DI\n \t (plus:SI (match_operator:SI 1 \"comparison_operator\"\n-\t\t\t\t     [(match_operand 2 \"\" \"\")\n-\t\t\t\t      (match_operand 3 \"\" \"\")])\n-\t\t  (match_operand:SI 4 \"add_operand\" \"\"))))\n-   (clobber (match_operand:DI 5 \"register_operand\" \"\"))]\n+\t\t\t\t     [(match_operand 2)\n+\t\t\t\t      (match_operand 3)])\n+\t\t  (match_operand:SI 4 \"add_operand\"))))\n+   (clobber (match_operand:DI 5 \"register_operand\"))]\n   \"\"\n   [(set (match_dup 5) (match_dup 6))\n    (set (match_dup 0) (sign_extend:DI (plus:SI (match_dup 7) (match_dup 4))))]\n@@ -373,65 +370,63 @@\n })\n \n (define_expand \"adddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t (match_operand:DI 2 \"add_operand\" \"\")))]\n-  \"\"\n-  \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\")\n+\t\t (match_operand:DI 2 \"add_operand\")))])\n \n (define_insn \"*adddi_er_lo16_dtp\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t   (match_operand:DI 2 \"dtp16_symbolic_operand\" \"\")))]\n+\t\t   (match_operand:DI 2 \"dtp16_symbolic_operand\")))]\n   \"HAVE_AS_TLS\"\n   \"lda %0,%2(%1)\\t\\t!dtprel\")\n \n (define_insn \"*adddi_er_hi32_dtp\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t (high:DI (match_operand:DI 2 \"dtp32_symbolic_operand\" \"\"))))]\n+\t\t (high:DI (match_operand:DI 2 \"dtp32_symbolic_operand\"))))]\n   \"HAVE_AS_TLS\"\n   \"ldah %0,%2(%1)\\t\\t!dtprelhi\")\n \n (define_insn \"*adddi_er_lo32_dtp\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t   (match_operand:DI 2 \"dtp32_symbolic_operand\" \"\")))]\n+\t\t   (match_operand:DI 2 \"dtp32_symbolic_operand\")))]\n   \"HAVE_AS_TLS\"\n   \"lda %0,%2(%1)\\t\\t!dtprello\")\n \n (define_insn \"*adddi_er_lo16_tp\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t   (match_operand:DI 2 \"tp16_symbolic_operand\" \"\")))]\n+\t\t   (match_operand:DI 2 \"tp16_symbolic_operand\")))]\n   \"HAVE_AS_TLS\"\n   \"lda %0,%2(%1)\\t\\t!tprel\")\n \n (define_insn \"*adddi_er_hi32_tp\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t (high:DI (match_operand:DI 2 \"tp32_symbolic_operand\" \"\"))))]\n+\t\t (high:DI (match_operand:DI 2 \"tp32_symbolic_operand\"))))]\n   \"HAVE_AS_TLS\"\n   \"ldah %0,%2(%1)\\t\\t!tprelhi\")\n \n (define_insn \"*adddi_er_lo32_tp\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t   (match_operand:DI 2 \"tp32_symbolic_operand\" \"\")))]\n+\t\t   (match_operand:DI 2 \"tp32_symbolic_operand\")))]\n   \"HAVE_AS_TLS\"\n   \"lda %0,%2(%1)\\t\\t!tprello\")\n \n (define_insn \"*adddi_er_high_l\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t (high:DI (match_operand:DI 2 \"local_symbolic_operand\" \"\"))))]\n+\t\t (high:DI (match_operand:DI 2 \"local_symbolic_operand\"))))]\n   \"TARGET_EXPLICIT_RELOCS && reload_completed\"\n   \"ldah %0,%2(%1)\\t\\t!gprelhigh\"\n   [(set_attr \"usegp\" \"yes\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (high:DI (match_operand:DI 1 \"local_symbolic_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+        (high:DI (match_operand:DI 1 \"local_symbolic_operand\")))]\n   \"TARGET_EXPLICIT_RELOCS && reload_completed\"\n   [(set (match_dup 0)\n \t(plus:DI (match_dup 2) (high:DI (match_dup 1))))]\n@@ -493,9 +488,9 @@\n ;; Don't do this if we are adjusting SP since we don't want to do it\n ;; in two steps.  Don't split FP sources for the reason listed above.\n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t (match_operand:DI 2 \"const_int_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\")\n+\t\t (match_operand:DI 2 \"const_int_operand\")))]\n   \"! add_operand (operands[2], DImode)\n    && operands[0] != stack_pointer_rtx\n    && operands[1] != frame_pointer_rtx\n@@ -545,14 +540,14 @@\n    s%2subl %1,%n3,%0\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(sign_extend:DI\n \t (plus:SI (mult:SI (match_operator:SI 1 \"comparison_operator\"\n-\t\t\t\t\t      [(match_operand 2 \"\" \"\")\n-\t\t\t\t\t       (match_operand 3 \"\" \"\")])\n-\t\t\t   (match_operand:SI 4 \"const48_operand\" \"\"))\n-\t\t  (match_operand:SI 5 \"sext_add_operand\" \"\"))))\n-   (clobber (match_operand:DI 6 \"reg_not_elim_operand\" \"\"))]\n+\t\t\t\t\t      [(match_operand 2)\n+\t\t\t\t\t       (match_operand 3)])\n+\t\t\t   (match_operand:SI 4 \"const48_operand\"))\n+\t\t  (match_operand:SI 5 \"sext_add_operand\"))))\n+   (clobber (match_operand:DI 6 \"reg_not_elim_operand\"))]\n   \"\"\n   [(set (match_dup 6) (match_dup 7))\n    (set (match_dup 0)\n@@ -609,8 +604,9 @@\n \n (define_insn \"*subsi_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:DI (minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n-\t\t\t\t  (match_operand:SI 2 \"reg_or_8bit_operand\" \"rI\"))))]\n+\t(sign_extend:DI\n+\t (minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n+\t\t   (match_operand:SI 2 \"reg_or_8bit_operand\" \"rI\"))))]\n   \"\"\n   \"subl %r1,%2,%0\")\n \n@@ -687,12 +683,12 @@\n    (set_attr \"opsize\" \"<mode>\")])\n \n (define_expand \"umuldi3_highpart\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(truncate:DI\n \t (lshiftrt:TI\n \t  (mult:TI (zero_extend:TI\n-\t\t     (match_operand:DI 1 \"register_operand\" \"\"))\n-\t\t   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\"))\n+\t\t     (match_operand:DI 1 \"register_operand\"))\n+\t\t   (match_operand:DI 2 \"reg_or_8bit_operand\"))\n \t  (const_int 64))))]\n   \"\"\n {\n@@ -739,15 +735,15 @@\n \n (define_expand \"<code>si3\"\n   [(set (match_dup 3)\n-\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n+\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\")))\n    (set (match_dup 4)\n-\t(sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n+\t(sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\")))\n    (parallel [(set (match_dup 5)\n \t\t   (sign_extend:DI\n \t\t    (any_divmod:SI (match_dup 3) (match_dup 4))))\n \t      (clobber (reg:DI 23))\n \t      (clobber (reg:DI 28))])\n-   (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+   (set (match_operand:SI 0 \"nonimmediate_operand\")\n \t(subreg:SI (match_dup 5) 0))]\n   \"TARGET_ABI_OSF\"\n {\n@@ -757,14 +753,13 @@\n })\n \n (define_expand \"<code>di3\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\")\n \t\t   (any_divmod:DI\n-\t\t    (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t    (match_operand:DI 2 \"register_operand\" \"\")))\n+\t\t    (match_operand:DI 1 \"register_operand\")\n+\t\t    (match_operand:DI 2 \"register_operand\")))\n \t      (clobber (reg:DI 23))\n \t      (clobber (reg:DI 28))])]\n-  \"TARGET_ABI_OSF\"\n-  \"\")\n+  \"TARGET_ABI_OSF\")\n \n ;; Lengths of 8 for ldq $t12,__divq($gp); jsr $t9,($t12),__divq as\n ;; expanded by the assembler.\n@@ -818,7 +813,7 @@\n                         [(match_operand:DI 1 \"register_operand\" \"a\")\n                          (match_operand:DI 2 \"register_operand\" \"b\")])))\n    (use (match_operand:DI 4 \"register_operand\" \"c\"))\n-   (use (match_operand 5 \"const_int_operand\" \"\"))\n+   (use (match_operand 5 \"const_int_operand\"))\n    (clobber (reg:DI 23))\n    (clobber (reg:DI 28))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n@@ -886,7 +881,7 @@\n                         [(match_operand:DI 1 \"register_operand\" \"a\")\n                          (match_operand:DI 2 \"register_operand\" \"b\")]))\n    (use (match_operand:DI 4 \"register_operand\" \"c\"))\n-   (use (match_operand 5 \"const_int_operand\" \"\"))\n+   (use (match_operand 5 \"const_int_operand\"))\n    (clobber (reg:DI 23))\n    (clobber (reg:DI 28))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n@@ -939,9 +934,9 @@\n ;; too messy otherwise.\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(and:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t(match_operand:DI 2 \"const_int_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(and:DI (match_operand:DI 1 \"register_operand\")\n+\t\t(match_operand:DI 2 \"const_int_operand\")))]\n   \"HOST_BITS_PER_WIDE_INT == 64 && ! and_operand (operands[2], DImode)\"\n   [(set (match_dup 0) (and:DI (match_dup 1) (match_dup 3)))\n    (set (match_dup 0) (and:DI (match_dup 0) (match_dup 4)))]\n@@ -1076,10 +1071,10 @@\n \n (define_expand \"ffsdi2\"\n   [(set (match_dup 2)\n-\t(ctz:DI (match_operand:DI 1 \"register_operand\" \"\")))\n+\t(ctz:DI (match_operand:DI 1 \"register_operand\")))\n    (set (match_dup 3)\n \t(plus:DI (match_dup 2) (const_int 1)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:DI 0 \"register_operand\")\n \t(if_then_else:DI (eq (match_dup 1) (const_int 0))\n \t\t\t (const_int 0) (match_dup 3)))]\n   \"TARGET_CIX\"\n@@ -1110,8 +1105,8 @@\n   [(set_attr \"type\" \"mvi\")])\n \n (define_expand \"bswapsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(bswap:SI (match_operand:SI 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(bswap:SI (match_operand:SI 1 \"register_operand\")))]\n   \"!optimize_size\"\n {\n   rtx t0, t1;\n@@ -1132,8 +1127,8 @@\n })\n \n (define_expand \"bswapdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(bswap:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(bswap:DI (match_operand:DI 1 \"register_operand\")))]\n   \"!optimize_size\"\n {\n   rtx t0, t1;\n@@ -1225,8 +1220,8 @@\n   [(set_attr \"type\" \"shift\")])\n \n (define_expand \"extendqidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(sign_extend:DI (match_operand:QI 1 \"some_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(sign_extend:DI (match_operand:QI 1 \"some_operand\")))]\n   \"\"\n {\n   if (TARGET_BWX)\n@@ -1270,8 +1265,8 @@\n   [(set_attr \"type\" \"shift\")])\n \n (define_expand \"extendhidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(sign_extend:DI (match_operand:HI 1 \"some_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(sign_extend:DI (match_operand:HI 1 \"some_operand\")))]\n   \"\"\n {\n   if (TARGET_BWX)\n@@ -1315,14 +1310,14 @@\n \n (define_expand \"unaligned_extendqidi\"\n   [(set (match_dup 3)\n-\t(mem:DI (and:DI (match_operand:DI 1 \"address_operand\" \"\") (const_int -8))))\n+\t(mem:DI (and:DI (match_operand:DI 1 \"address_operand\") (const_int -8))))\n    (set (match_dup 4)\n \t(ashift:DI (match_dup 3)\n \t\t   (minus:DI (const_int 64)\n \t\t\t     (ashift:DI\n \t\t\t      (and:DI (match_dup 2) (const_int 7))\n \t\t\t      (const_int 3)))))\n-   (set (match_operand:QI 0 \"register_operand\" \"\")\n+   (set (match_operand:QI 0 \"register_operand\")\n \t(ashiftrt:DI (match_dup 4) (const_int 56)))]\n   \"\"\n {\n@@ -1334,14 +1329,14 @@\n \n (define_expand \"unaligned_extendhidi\"\n   [(set (match_dup 3)\n-\t(mem:DI (and:DI (match_operand:DI 1 \"address_operand\" \"\") (const_int -8))))\n+\t(mem:DI (and:DI (match_operand:DI 1 \"address_operand\") (const_int -8))))\n    (set (match_dup 4)\n \t(ashift:DI (match_dup 3)\n \t\t   (minus:DI (const_int 64)\n \t\t\t     (ashift:DI\n \t\t\t      (and:DI (match_dup 2) (const_int 7))\n \t\t\t      (const_int 3)))))\n-   (set (match_operand:HI 0 \"register_operand\" \"\")\n+   (set (match_operand:HI 0 \"register_operand\")\n \t(ashiftrt:DI (match_dup 4) (const_int 48)))]\n   \"\"\n {\n@@ -1362,10 +1357,11 @@\n \n (define_insn \"extxl\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extract:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n-\t\t\t (match_operand:DI 2 \"mode_width_operand\" \"n\")\n-\t\t\t (ashift:DI (match_operand:DI 3 \"reg_or_8bit_operand\" \"rI\")\n-\t\t\t\t    (const_int 3))))]\n+\t(zero_extract:DI\n+\t  (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n+\t  (match_operand:DI 2 \"mode_width_operand\" \"n\")\n+\t  (ashift:DI (match_operand:DI 3 \"reg_or_8bit_operand\" \"rI\")\n+\t\t     (const_int 3))))]\n   \"\"\n   \"ext%M2l %r1,%3,%0\"\n   [(set_attr \"type\" \"shift\")])\n@@ -1441,13 +1437,13 @@\n ;; to the address calculation.\n \n ;;(define_split\n-;;  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-;;\t(ashift:DI (zero_extract:DI (match_operand:DI 1 \"register_operand\" \"\")\n-;;\t\t\t\t    (match_operand:DI 2 \"mode_width_operand\" \"\")\n-;;\t\t\t\t    (ashift:DI (match_operand:DI 3 \"\" \"\")\n+;;  [(set (match_operand:DI 0 \"register_operand\")\n+;;\t(ashift:DI (zero_extract:DI (match_operand:DI 1 \"register_operand\")\n+;;\t\t\t\t    (match_operand:DI 2 \"mode_width_operand\")\n+;;\t\t\t\t    (ashift:DI (match_operand:DI 3)\n ;;\t\t\t\t\t       (const_int 3)))\n-;;\t\t   (match_operand:DI 4 \"const_int_operand\" \"\")))\n-;;   (clobber (match_operand:DI 5 \"register_operand\" \"\"))]\n+;;\t\t   (match_operand:DI 4 \"const_int_operand\")))\n+;;   (clobber (match_operand:DI 5 \"register_operand\"))]\n ;;  \"INTVAL (operands[4]) == 64 - INTVAL (operands[2])\"\n ;;  [(set (match_dup 5) (match_dup 6))\n ;;   (set (match_dup 0)\n@@ -1605,8 +1601,8 @@\n   [(set_attr \"type\" \"fadd\")])\n \n (define_expand \"abstf2\"\n-  [(parallel [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t\t   (abs:TF (match_operand:TF 1 \"reg_or_0_operand\" \"\")))\n+  [(parallel [(set (match_operand:TF 0 \"register_operand\")\n+\t\t   (abs:TF (match_operand:TF 1 \"reg_or_0_operand\")))\n \t      (use (match_dup 2))])]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n {\n@@ -1635,8 +1631,8 @@\n   [(set_attr \"type\" \"fadd\")])\n \n (define_expand \"negtf2\"\n-  [(parallel [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t\t   (neg:TF (match_operand:TF 1 \"reg_or_0_operand\" \"\")))\n+  [(parallel [(set (match_operand:TF 0 \"register_operand\")\n+\t\t   (neg:TF (match_operand:TF 1 \"reg_or_0_operand\")))\n \t      (use (match_dup 2))])]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n {\n@@ -1724,9 +1720,9 @@\n    (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_expand \"addtf3\"\n-  [(use (match_operand:TF 0 \"register_operand\" \"\"))\n-   (use (match_operand:TF 1 \"general_operand\" \"\"))\n-   (use (match_operand:TF 2 \"general_operand\" \"\"))]\n+  [(use (match_operand:TF 0 \"register_operand\"))\n+   (use (match_operand:TF 1 \"general_operand\"))\n+   (use (match_operand:TF 2 \"general_operand\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_arith (PLUS, operands); DONE;\")\n \n@@ -1790,9 +1786,9 @@\n    (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_expand \"subtf3\"\n-  [(use (match_operand:TF 0 \"register_operand\" \"\"))\n-   (use (match_operand:TF 1 \"general_operand\" \"\"))\n-   (use (match_operand:TF 2 \"general_operand\" \"\"))]\n+  [(use (match_operand:TF 0 \"register_operand\"))\n+   (use (match_operand:TF 1 \"general_operand\"))\n+   (use (match_operand:TF 2 \"general_operand\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_arith (MINUS, operands); DONE;\")\n \n@@ -1844,9 +1840,9 @@\n    (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_expand \"multf3\"\n-  [(use (match_operand:TF 0 \"register_operand\" \"\"))\n-   (use (match_operand:TF 1 \"general_operand\" \"\"))\n-   (use (match_operand:TF 2 \"general_operand\" \"\"))]\n+  [(use (match_operand:TF 0 \"register_operand\"))\n+   (use (match_operand:TF 1 \"general_operand\"))\n+   (use (match_operand:TF 2 \"general_operand\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_arith (MULT, operands); DONE;\")\n \n@@ -1899,8 +1895,10 @@\n \n (define_insn \"*divdf_ext3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(div:DF (float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))\n-\t\t(float_extend:DF (match_operand:SF 2 \"reg_or_0_operand\" \"fG\"))))]\n+\t(div:DF (float_extend:DF\n+\t\t (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))\n+\t\t(float_extend:DF\n+\t\t (match_operand:SF 2 \"reg_or_0_operand\" \"fG\"))))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n   \"div%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fdiv\")\n@@ -1909,9 +1907,9 @@\n    (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_expand \"divtf3\"\n-  [(use (match_operand:TF 0 \"register_operand\" \"\"))\n-   (use (match_operand:TF 1 \"general_operand\" \"\"))\n-   (use (match_operand:TF 2 \"general_operand\" \"\"))]\n+  [(use (match_operand:TF 0 \"register_operand\"))\n+   (use (match_operand:TF 1 \"general_operand\"))\n+   (use (match_operand:TF 2 \"general_operand\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_arith (DIV, operands); DONE;\")\n \n@@ -2017,16 +2015,14 @@\n    (set_attr \"trap_suffix\" \"v_sv_svi\")])\n \n (define_expand \"fix_truncdfdi2\"\n-  [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"\")\n-\t(fix:DI (match_operand:DF 1 \"reg_or_0_operand\" \"\")))]\n-  \"TARGET_FP\"\n-  \"\")\n+  [(set (match_operand:DI 0 \"reg_no_subreg_operand\")\n+\t(fix:DI (match_operand:DF 1 \"reg_or_0_operand\")))]\n+  \"TARGET_FP\")\n \n (define_expand \"fixuns_truncdfdi2\"\n-  [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"\")\n-\t(unsigned_fix:DI (match_operand:DF 1 \"reg_or_0_operand\" \"\")))]\n-  \"TARGET_FP\"\n-  \"\")\n+  [(set (match_operand:DI 0 \"reg_no_subreg_operand\")\n+\t(unsigned_fix:DI (match_operand:DF 1 \"reg_or_0_operand\")))]\n+  \"TARGET_FP\")\n \n ;; Likewise between SFmode and SImode.\n \n@@ -2044,9 +2040,7 @@\n   [(set (match_dup 2) (match_op_dup 4 [(float_extend:DF (match_dup 1))]))\n    (set (match_dup 3) (unspec:SF [(match_dup 2)] UNSPEC_CVTQL))\n    (set (match_dup 5) (match_dup 3))]\n-{\n-  operands[5] = adjust_address (operands[0], SFmode, 0);\n-}\n+  \"operands[5] = adjust_address (operands[0], SFmode, 0);\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n@@ -2093,27 +2087,25 @@\n    (set_attr \"trap_suffix\" \"v_sv_svi\")])\n \n (define_expand \"fix_truncsfdi2\"\n-  [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"\")\n-\t(fix:DI (float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\" \"\"))))]\n-  \"TARGET_FP\"\n-  \"\")\n+  [(set (match_operand:DI 0 \"reg_no_subreg_operand\")\n+\t(fix:DI (float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\"))))]\n+  \"TARGET_FP\")\n \n (define_expand \"fixuns_truncsfdi2\"\n-  [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"\")\n+  [(set (match_operand:DI 0 \"reg_no_subreg_operand\")\n \t(unsigned_fix:DI\n-\t  (float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\" \"\"))))]\n-  \"TARGET_FP\"\n-  \"\")\n+\t  (float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\"))))]\n+  \"TARGET_FP\")\n \n (define_expand \"fix_trunctfdi2\"\n-  [(use (match_operand:DI 0 \"register_operand\" \"\"))\n-   (use (match_operand:TF 1 \"general_operand\" \"\"))]\n+  [(use (match_operand:DI 0 \"register_operand\"))\n+   (use (match_operand:TF 1 \"general_operand\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_cvt (FIX, operands); DONE;\")\n \n (define_expand \"fixuns_trunctfdi2\"\n-  [(use (match_operand:DI 0 \"register_operand\" \"\"))\n-   (use (match_operand:TF 1 \"general_operand\" \"\"))]\n+  [(use (match_operand:DI 0 \"register_operand\"))\n+   (use (match_operand:TF 1 \"general_operand\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_cvt (UNSIGNED_FIX, operands); DONE;\")\n \n@@ -2148,9 +2140,7 @@\n   [(set (match_dup 3) (match_dup 1))\n    (set (match_dup 2) (unspec:DI [(match_dup 3)] UNSPEC_CVTLQ))\n    (set (match_dup 0) (float:SF (match_dup 2)))]\n-{\n-  operands[1] = adjust_address (operands[1], SFmode, 0);\n-})\n+  \"operands[1] = adjust_address (operands[1], SFmode, 0);\")\n \n (define_insn_and_split \"*floatsisf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n@@ -2197,9 +2187,7 @@\n   [(set (match_dup 3) (match_dup 1))\n    (set (match_dup 2) (unspec:DI [(match_dup 3)] UNSPEC_CVTLQ))\n    (set (match_dup 0) (float:DF (match_dup 2)))]\n-{\n-  operands[1] = adjust_address (operands[1], SFmode, 0);\n-})\n+  \"operands[1] = adjust_address (operands[1], SFmode, 0);\")\n \n (define_insn_and_split \"*floatsidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n@@ -2217,32 +2205,32 @@\n })\n \n (define_expand \"floatditf2\"\n-  [(use (match_operand:TF 0 \"register_operand\" \"\"))\n-   (use (match_operand:DI 1 \"general_operand\" \"\"))]\n+  [(use (match_operand:TF 0 \"register_operand\"))\n+   (use (match_operand:DI 1 \"general_operand\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_cvt (FLOAT, operands); DONE;\")\n \n (define_expand \"floatunsdisf2\"\n-  [(use (match_operand:SF 0 \"register_operand\" \"\"))\n-   (use (match_operand:DI 1 \"register_operand\" \"\"))]\n+  [(use (match_operand:SF 0 \"register_operand\"))\n+   (use (match_operand:DI 1 \"register_operand\"))]\n   \"TARGET_FP\"\n   \"alpha_emit_floatuns (operands); DONE;\")\n \n (define_expand \"floatunsdidf2\"\n-  [(use (match_operand:DF 0 \"register_operand\" \"\"))\n-   (use (match_operand:DI 1 \"register_operand\" \"\"))]\n+  [(use (match_operand:DF 0 \"register_operand\"))\n+   (use (match_operand:DI 1 \"register_operand\"))]\n   \"TARGET_FP\"\n   \"alpha_emit_floatuns (operands); DONE;\")\n \n (define_expand \"floatunsditf2\"\n-  [(use (match_operand:TF 0 \"register_operand\" \"\"))\n-   (use (match_operand:DI 1 \"general_operand\" \"\"))]\n+  [(use (match_operand:TF 0 \"register_operand\"))\n+   (use (match_operand:DI 1 \"general_operand\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_cvt (UNSIGNED_FLOAT, operands); DONE;\")\n \n (define_expand \"extendsfdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:DF 0 \"register_operand\")\n+\t(float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\")))]\n   \"TARGET_FP\"\n {\n   if (alpha_fptm >= ALPHA_FPTM_SU)\n@@ -2274,8 +2262,8 @@\n ;; from doing something silly.  When optimizing we'll put things back \n ;; together anyway.\n (define_expand \"extendsftf2\"\n-  [(use (match_operand:TF 0 \"register_operand\" \"\"))\n-   (use (match_operand:SF 1 \"register_operand\" \"\"))]\n+  [(use (match_operand:TF 0 \"register_operand\"))\n+   (use (match_operand:SF 1 \"register_operand\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n {\n   rtx tmp = gen_reg_rtx (DFmode);\n@@ -2285,8 +2273,8 @@\n })\n \n (define_expand \"extenddftf2\"\n-  [(use (match_operand:TF 0 \"register_operand\" \"\"))\n-   (use (match_operand:DF 1 \"register_operand\" \"\"))]\n+  [(use (match_operand:TF 0 \"register_operand\"))\n+   (use (match_operand:DF 1 \"register_operand\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_cvt (FLOAT_EXTEND, operands); DONE;\")\n \n@@ -2311,14 +2299,14 @@\n    (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_expand \"trunctfdf2\"\n-  [(use (match_operand:DF 0 \"register_operand\" \"\"))\n-   (use (match_operand:TF 1 \"general_operand\" \"\"))]\n+  [(use (match_operand:DF 0 \"register_operand\"))\n+   (use (match_operand:TF 1 \"general_operand\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_cvt (FLOAT_TRUNCATE, operands); DONE;\")\n \n (define_expand \"trunctfsf2\"\n-  [(use (match_operand:SF 0 \"register_operand\" \"\"))\n-   (use (match_operand:TF 1 \"general_operand\" \"\"))]\n+  [(use (match_operand:SF 0 \"register_operand\"))\n+   (use (match_operand:TF 1 \"general_operand\"))]\n   \"TARGET_FP && TARGET_HAS_XFLOATING_LIBS\"\n {\n   rtx tmpf, sticky, arg, lo, hi;\n@@ -2440,8 +2428,8 @@\n ;; For ABS, we have two choices, depending on whether the input and output\n ;; registers are the same or not.\n (define_expand \"absdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(abs:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(abs:DI (match_operand:DI 1 \"register_operand\")))]\n   \"\"\n {\n   if (rtx_equal_p (operands[0], operands[1]))\n@@ -2452,62 +2440,54 @@\n })\n \n (define_expand \"absdi2_same\"\n-  [(set (match_operand:DI 1 \"register_operand\" \"\")\n-\t(neg:DI (match_operand:DI 0 \"register_operand\" \"\")))\n+  [(set (match_operand:DI 1 \"register_operand\")\n+\t(neg:DI (match_operand:DI 0 \"register_operand\")))\n    (set (match_dup 0)\n \t(if_then_else:DI (ge (match_dup 0) (const_int 0))\n \t\t\t (match_dup 0)\n-\t\t\t (match_dup 1)))]\n-  \"\"\n-  \"\")\n+\t\t\t (match_dup 1)))])\n \n (define_expand \"absdi2_diff\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(neg:DI (match_operand:DI 1 \"register_operand\" \"\")))\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(neg:DI (match_operand:DI 1 \"register_operand\")))\n    (set (match_dup 0)\n \t(if_then_else:DI (lt (match_dup 1) (const_int 0))\n \t\t\t (match_dup 0)\n-\t\t\t (match_dup 1)))]\n-  \"\"\n-  \"\")\n+\t\t\t (match_dup 1)))])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(abs:DI (match_dup 0)))\n-   (clobber (match_operand:DI 1 \"register_operand\" \"\"))]\n+   (clobber (match_operand:DI 1 \"register_operand\"))]\n   \"\"\n   [(set (match_dup 1) (neg:DI (match_dup 0)))\n    (set (match_dup 0) (if_then_else:DI (ge (match_dup 0) (const_int 0))\n-\t\t\t\t       (match_dup 0) (match_dup 1)))]\n-  \"\")\n+\t\t\t\t       (match_dup 0) (match_dup 1)))])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(abs:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(abs:DI (match_operand:DI 1 \"register_operand\")))]\n   \"! rtx_equal_p (operands[0], operands[1])\"\n   [(set (match_dup 0) (neg:DI (match_dup 1)))\n    (set (match_dup 0) (if_then_else:DI (lt (match_dup 1) (const_int 0))\n-\t\t\t\t       (match_dup 0) (match_dup 1)))]\n-  \"\")\n+\t\t\t\t       (match_dup 0) (match_dup 1)))])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(neg:DI (abs:DI (match_dup 0))))\n-   (clobber (match_operand:DI 1 \"register_operand\" \"\"))]\n+   (clobber (match_operand:DI 1 \"register_operand\"))]\n   \"\"\n   [(set (match_dup 1) (neg:DI (match_dup 0)))\n    (set (match_dup 0) (if_then_else:DI (le (match_dup 0) (const_int 0))\n-\t\t\t\t       (match_dup 0) (match_dup 1)))]\n-  \"\")\n+\t\t\t\t       (match_dup 0) (match_dup 1)))])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(neg:DI (abs:DI (match_operand:DI 1 \"register_operand\" \"\"))))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(neg:DI (abs:DI (match_operand:DI 1 \"register_operand\"))))]\n   \"! rtx_equal_p (operands[0], operands[1])\"\n   [(set (match_dup 0) (neg:DI (match_dup 1)))\n    (set (match_dup 0) (if_then_else:DI (gt (match_dup 1) (const_int 0))\n-\t\t\t\t       (match_dup 0) (match_dup 1)))]\n-  \"\")\n+\t\t\t\t       (match_dup 0) (match_dup 1)))])\n \n (define_insn \"<code><mode>3\"\n   [(set (match_operand:I12MODE 0 \"register_operand\" \"=r\")\n@@ -2520,24 +2500,23 @@\n \n (define_expand \"smaxdi3\"\n   [(set (match_dup 3)\n-\t(le:DI (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-\t       (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(le:DI (match_operand:DI 1 \"reg_or_0_operand\")\n+\t       (match_operand:DI 2 \"reg_or_8bit_operand\")))\n+   (set (match_operand:DI 0 \"register_operand\")\n \t(if_then_else:DI (eq (match_dup 3) (const_int 0))\n \t\t\t (match_dup 1) (match_dup 2)))]\n   \"\"\n-  { operands[3] = gen_reg_rtx (DImode); })\n+  \"operands[3] = gen_reg_rtx (DImode);\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(smax:DI (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-\t\t (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")))\n-   (clobber (match_operand:DI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(smax:DI (match_operand:DI 1 \"reg_or_0_operand\")\n+\t\t (match_operand:DI 2 \"reg_or_8bit_operand\")))\n+   (clobber (match_operand:DI 3 \"register_operand\"))]\n   \"operands[2] != const0_rtx\"\n   [(set (match_dup 3) (le:DI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0) (if_then_else:DI (eq (match_dup 3) (const_int 0))\n-\t\t\t\t       (match_dup 1) (match_dup 2)))]\n-  \"\")\n+\t\t\t\t       (match_dup 1) (match_dup 2)))])\n \n (define_insn \"*smax_const0\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -2549,24 +2528,23 @@\n \n (define_expand \"smindi3\"\n   [(set (match_dup 3)\n-\t(lt:DI (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-\t       (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(lt:DI (match_operand:DI 1 \"reg_or_0_operand\")\n+\t       (match_operand:DI 2 \"reg_or_8bit_operand\")))\n+   (set (match_operand:DI 0 \"register_operand\")\n \t(if_then_else:DI (ne (match_dup 3) (const_int 0))\n \t\t\t (match_dup 1) (match_dup 2)))]\n   \"\"\n-  { operands[3] = gen_reg_rtx (DImode); })\n+  \"operands[3] = gen_reg_rtx (DImode);\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(smin:DI (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-\t\t (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")))\n-   (clobber (match_operand:DI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(smin:DI (match_operand:DI 1 \"reg_or_0_operand\")\n+\t\t (match_operand:DI 2 \"reg_or_8bit_operand\")))\n+   (clobber (match_operand:DI 3 \"register_operand\"))]\n   \"operands[2] != const0_rtx\"\n   [(set (match_dup 3) (lt:DI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0) (if_then_else:DI (ne (match_dup 3) (const_int 0))\n-\t\t\t\t       (match_dup 1) (match_dup 2)))]\n-  \"\")\n+\t\t\t\t       (match_dup 1) (match_dup 2)))])\n \n (define_insn \"*smin_const0\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -2578,53 +2556,51 @@\n \n (define_expand \"umaxdi3\"\n   [(set (match_dup 3)\n-\t(leu:DI (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-\t\t(match_operand:DI 2 \"reg_or_8bit_operand\" \"\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(leu:DI (match_operand:DI 1 \"reg_or_0_operand\")\n+\t\t(match_operand:DI 2 \"reg_or_8bit_operand\")))\n+   (set (match_operand:DI 0 \"register_operand\")\n \t(if_then_else:DI (eq (match_dup 3) (const_int 0))\n \t\t\t (match_dup 1) (match_dup 2)))]\n   \"\"\n   \"operands[3] = gen_reg_rtx (DImode);\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(umax:DI (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-\t\t (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")))\n-   (clobber (match_operand:DI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(umax:DI (match_operand:DI 1 \"reg_or_0_operand\")\n+\t\t (match_operand:DI 2 \"reg_or_8bit_operand\")))\n+   (clobber (match_operand:DI 3 \"register_operand\"))]\n   \"operands[2] != const0_rtx\"\n   [(set (match_dup 3) (leu:DI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0) (if_then_else:DI (eq (match_dup 3) (const_int 0))\n-\t\t\t\t       (match_dup 1) (match_dup 2)))]\n-  \"\")\n+\t\t\t\t       (match_dup 1) (match_dup 2)))])\n \n (define_expand \"umindi3\"\n   [(set (match_dup 3)\n-\t(ltu:DI (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-\t\t(match_operand:DI 2 \"reg_or_8bit_operand\" \"\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(ltu:DI (match_operand:DI 1 \"reg_or_0_operand\")\n+\t\t(match_operand:DI 2 \"reg_or_8bit_operand\")))\n+   (set (match_operand:DI 0 \"register_operand\")\n \t(if_then_else:DI (ne (match_dup 3) (const_int 0))\n \t\t\t (match_dup 1) (match_dup 2)))]\n   \"\"\n   \"operands[3] = gen_reg_rtx (DImode);\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(umin:DI (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-\t\t (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")))\n-   (clobber (match_operand:DI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(umin:DI (match_operand:DI 1 \"reg_or_0_operand\")\n+\t\t (match_operand:DI 2 \"reg_or_8bit_operand\")))\n+   (clobber (match_operand:DI 3 \"register_operand\"))]\n   \"operands[2] != const0_rtx\"\n   [(set (match_dup 3) (ltu:DI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0) (if_then_else:DI (ne (match_dup 3) (const_int 0))\n-\t\t\t\t       (match_dup 1) (match_dup 2)))]\n-  \"\")\n+\t\t\t\t       (match_dup 1) (match_dup 2)))])\n \n (define_insn \"*bcc_normal\"\n   [(set (pc)\n \t(if_then_else\n \t (match_operator 1 \"signed_comparison_operator\"\n \t\t\t [(match_operand:DI 2 \"reg_or_0_operand\" \"rJ\")\n \t\t\t  (const_int 0)])\n-\t (label_ref (match_operand 0 \"\" \"\"))\n+\t (label_ref (match_operand 0))\n \t (pc)))]\n   \"\"\n   \"b%C1 %r2,%0\"\n@@ -2638,7 +2614,7 @@\n \t\t\t  (const_int 0)])\n \n \t (pc)\n-\t (label_ref (match_operand 0 \"\" \"\"))))]\n+\t (label_ref (match_operand 0))))]\n   \"\"\n   \"b%c1 %2,%0\"\n   [(set_attr \"type\" \"ibr\")])\n@@ -2650,7 +2626,7 @@\n \t\t\t      (const_int 1)\n \t\t\t      (const_int 0))\n \t     (const_int 0))\n-\t (label_ref (match_operand 0 \"\" \"\"))\n+\t (label_ref (match_operand 0))\n \t (pc)))]\n   \"\"\n   \"blbs %r1,%0\"\n@@ -2663,7 +2639,7 @@\n \t\t\t      (const_int 1)\n \t\t\t      (const_int 0))\n \t     (const_int 0))\n-\t (label_ref (match_operand 0 \"\" \"\"))\n+\t (label_ref (match_operand 0))\n \t (pc)))]\n   \"\"\n   \"blbc %r1,%0\"\n@@ -2674,13 +2650,13 @@\n     [(set (pc)\n \t  (if_then_else\n \t   (match_operator 1 \"comparison_operator\"\n-\t\t\t   [(zero_extract:DI (match_operand:DI 2 \"register_operand\" \"\")\n-\t\t\t\t\t     (const_int 1)\n-\t\t\t\t\t     (match_operand:DI 3 \"const_int_operand\" \"\"))\n-\t\t\t    (const_int 0)])\n-\t   (label_ref (match_operand 0 \"\" \"\"))\n+\t     [(zero_extract:DI (match_operand:DI 2 \"register_operand\")\n+\t\t\t       (const_int 1)\n+\t\t\t       (match_operand:DI 3 \"const_int_operand\"))\n+\t      (const_int 0)])\n+\t   (label_ref (match_operand 0))\n \t   (pc)))\n-     (clobber (match_operand:DI 4 \"register_operand\" \"\"))])]\n+     (clobber (match_operand:DI 4 \"register_operand\"))])]\n   \"INTVAL (operands[3]) != 0\"\n   [(set (match_dup 4)\n \t(lshiftrt:DI (match_dup 2) (match_dup 3)))\n@@ -2692,7 +2668,7 @@\n \t\t\t\t     (const_int 0)])\n \t\t      (label_ref (match_dup 0))\n \t\t      (pc)))]\n-  \"\")\n+ )\n \f\n ;; The following are the corresponding floating-point insns.  Recall\n ;; we need to have variants that expand the arguments from SFmode\n@@ -2832,9 +2808,9 @@\n \n (define_expand \"smaxdf3\"\n   [(set (match_dup 3)\n-\t(le:DF (match_operand:DF 1 \"reg_or_0_operand\" \"\")\n-\t       (match_operand:DF 2 \"reg_or_0_operand\" \"\")))\n-   (set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(le:DF (match_operand:DF 1 \"reg_or_0_operand\")\n+\t       (match_operand:DF 2 \"reg_or_0_operand\")))\n+   (set (match_operand:DF 0 \"register_operand\")\n \t(if_then_else:DF (eq (match_dup 3) (match_dup 4))\n \t\t\t (match_dup 1) (match_dup 2)))]\n   \"TARGET_FP\"\n@@ -2845,9 +2821,9 @@\n \n (define_expand \"smindf3\"\n   [(set (match_dup 3)\n-\t(lt:DF (match_operand:DF 1 \"reg_or_0_operand\" \"\")\n-\t       (match_operand:DF 2 \"reg_or_0_operand\" \"\")))\n-   (set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(lt:DF (match_operand:DF 1 \"reg_or_0_operand\")\n+\t       (match_operand:DF 2 \"reg_or_0_operand\")))\n+   (set (match_operand:DF 0 \"register_operand\")\n \t(if_then_else:DF (ne (match_dup 3) (match_dup 4))\n \t\t\t (match_dup 1) (match_dup 2)))]\n   \"TARGET_FP\"\n@@ -2858,9 +2834,9 @@\n \n (define_expand \"smaxsf3\"\n   [(set (match_dup 3)\n-\t(le:DF (float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\" \"\"))\n-\t       (float_extend:DF (match_operand:SF 2 \"reg_or_0_operand\" \"\"))))\n-   (set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(le:DF (float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\"))\n+\t       (float_extend:DF (match_operand:SF 2 \"reg_or_0_operand\"))))\n+   (set (match_operand:SF 0 \"register_operand\")\n \t(if_then_else:SF (eq (match_dup 3) (match_dup 4))\n \t\t\t (match_dup 1) (match_dup 2)))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n@@ -2871,9 +2847,9 @@\n \n (define_expand \"sminsf3\"\n   [(set (match_dup 3)\n-\t(lt:DF (float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\" \"\"))\n-\t       (float_extend:DF (match_operand:SF 2 \"reg_or_0_operand\" \"\"))))\n-   (set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(lt:DF (float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\"))\n+\t       (float_extend:DF (match_operand:SF 2 \"reg_or_0_operand\"))))\n+   (set (match_operand:SF 0 \"register_operand\")\n \t(if_then_else:SF (ne (match_dup 3) (match_dup 4))\n \t\t      (match_dup 1) (match_dup 2)))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n@@ -2888,7 +2864,7 @@\n \t (match_operator 1 \"signed_comparison_operator\"\n \t\t\t [(match_operand:DF 2 \"reg_or_0_operand\" \"fG\")\n \t\t\t  (match_operand:DF 3 \"const0_operand\" \"G\")])\n-\t (label_ref (match_operand 0 \"\" \"\"))\n+\t (label_ref (match_operand 0))\n \t (pc)))]\n   \"TARGET_FP\"\n   \"fb%C1 %R2,%0\"\n@@ -2901,7 +2877,7 @@\n \t\t\t [(float_extend:DF\n \t\t\t   (match_operand:SF 2 \"reg_or_0_operand\" \"fG\"))\n \t\t\t  (match_operand:DF 3 \"const0_operand\" \"G\")])\n-\t (label_ref (match_operand 0 \"\" \"\"))\n+\t (label_ref (match_operand 0))\n \t (pc)))]\n   \"TARGET_FP\"\n   \"fb%C1 %R2,%0\"\n@@ -2912,60 +2888,75 @@\n \n (define_expand \"cbranchdf4\"\n   [(use (match_operator 0 \"alpha_cbranch_operator\"\n-         [(match_operand:DF 1 \"reg_or_0_operand\" \"\")\n-          (match_operand:DF 2 \"reg_or_0_operand\" \"\")]))\n-   (use (match_operand 3 \"\"))]\n+         [(match_operand:DF 1 \"reg_or_0_operand\")\n+          (match_operand:DF 2 \"reg_or_0_operand\")]))\n+   (use (match_operand 3))]\n   \"TARGET_FP\"\n-  { alpha_emit_conditional_branch (operands, DFmode); DONE; })\n+  \"alpha_emit_conditional_branch (operands, DFmode); DONE;\")\n \n (define_expand \"cbranchtf4\"\n   [(use (match_operator 0 \"alpha_cbranch_operator\"\n          [(match_operand:TF 1 \"general_operand\")\n           (match_operand:TF 2 \"general_operand\")]))\n-   (use (match_operand 3 \"\"))]\n+   (use (match_operand 3))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n-  { alpha_emit_conditional_branch (operands, TFmode); DONE; })\n+  \"alpha_emit_conditional_branch (operands, TFmode); DONE;\")\n \n (define_expand \"cbranchdi4\"\n   [(use (match_operator 0 \"alpha_cbranch_operator\"\n          [(match_operand:DI 1 \"some_operand\")\n           (match_operand:DI 2 \"some_operand\")]))\n-   (use (match_operand 3 \"\"))]\n+   (use (match_operand 3))]\n   \"\"\n-  { alpha_emit_conditional_branch (operands, DImode); DONE; })\n+  \"alpha_emit_conditional_branch (operands, DImode); DONE;\")\n \n (define_expand \"cstoredf4\"\n   [(use (match_operator:DI 1 \"alpha_cbranch_operator\"\n          [(match_operand:DF 2 \"reg_or_0_operand\")\n           (match_operand:DF 3 \"reg_or_0_operand\")]))\n    (clobber (match_operand:DI 0 \"register_operand\"))]\n   \"TARGET_FP\"\n-  { if (!alpha_emit_setcc (operands, DFmode)) FAIL; else DONE; })\n+{\n+  if (alpha_emit_setcc (operands, DFmode))\n+    DONE;\n+  else\n+    FAIL;\n+})\n \n (define_expand \"cstoretf4\"\n   [(use (match_operator:DI 1 \"alpha_cbranch_operator\"\n          [(match_operand:TF 2 \"general_operand\")\n           (match_operand:TF 3 \"general_operand\")]))\n    (clobber (match_operand:DI 0 \"register_operand\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n-  { if (!alpha_emit_setcc (operands, TFmode)) FAIL; else DONE; })\n+{\n+  if (alpha_emit_setcc (operands, TFmode))\n+    DONE;\n+  else\n+    FAIL;\n+})\n \n (define_expand \"cstoredi4\"\n   [(use (match_operator:DI 1 \"alpha_cbranch_operator\"\n          [(match_operand:DI 2 \"some_operand\")\n           (match_operand:DI 3 \"some_operand\")]))\n    (clobber (match_operand:DI 0 \"register_operand\"))]\n   \"\"\n-  { if (!alpha_emit_setcc (operands, DImode)) FAIL; else DONE; })\n+{\n+  if (alpha_emit_setcc (operands, DImode))\n+    DONE;\n+  else\n+    FAIL;\n+})\n \f\n ;; These are the main define_expand's used to make conditional moves.\n \n (define_expand \"mov<mode>cc\"\n-  [(set (match_operand:I48MODE 0 \"register_operand\" \"\")\n+  [(set (match_operand:I48MODE 0 \"register_operand\")\n \t(if_then_else:I48MODE\n-\t  (match_operand 1 \"comparison_operator\" \"\")\n-\t  (match_operand:I48MODE 2 \"reg_or_8bit_operand\" \"\")\n-\t  (match_operand:I48MODE 3 \"reg_or_8bit_operand\" \"\")))]\n+\t  (match_operand 1 \"comparison_operator\")\n+\t  (match_operand:I48MODE 2 \"reg_or_8bit_operand\")\n+\t  (match_operand:I48MODE 3 \"reg_or_8bit_operand\")))]\n   \"\"\n {\n   operands[1] = alpha_emit_conditional_move (operands[1], <MODE>mode);\n@@ -2974,11 +2965,11 @@\n })\n \n (define_expand \"mov<mode>cc\"\n-  [(set (match_operand:FMODE 0 \"register_operand\" \"\")\n+  [(set (match_operand:FMODE 0 \"register_operand\")\n \t(if_then_else:FMODE\n-\t  (match_operand 1 \"comparison_operator\" \"\")\n-\t  (match_operand:FMODE 2 \"reg_or_8bit_operand\" \"\")\n-\t  (match_operand:FMODE 3 \"reg_or_8bit_operand\" \"\")))]\n+\t  (match_operand 1 \"comparison_operator\")\n+\t  (match_operand:FMODE 2 \"reg_or_8bit_operand\")\n+\t  (match_operand:FMODE 3 \"reg_or_8bit_operand\")))]\n   \"\"\n {\n   operands[1] = alpha_emit_conditional_move (operands[1], <MODE>mode);\n@@ -3004,14 +2995,14 @@\n ;; operation could have been generated.\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(if_then_else:DI\n \t (match_operator 1 \"comparison_operator\"\n-\t\t\t [(match_operand:DI 2 \"reg_or_0_operand\" \"\")\n-\t\t\t  (match_operand:DI 3 \"reg_or_cint_operand\" \"\")])\n-\t (match_operand:DI 4 \"reg_or_cint_operand\" \"\")\n-\t (match_operand:DI 5 \"reg_or_cint_operand\" \"\")))\n-   (clobber (match_operand:DI 6 \"register_operand\" \"\"))]\n+\t\t\t [(match_operand:DI 2 \"reg_or_0_operand\")\n+\t\t\t  (match_operand:DI 3 \"reg_or_cint_operand\")])\n+\t (match_operand:DI 4 \"reg_or_cint_operand\")\n+\t (match_operand:DI 5 \"reg_or_cint_operand\")))\n+   (clobber (match_operand:DI 6 \"register_operand\"))]\n   \"operands[3] != const0_rtx\"\n   [(set (match_dup 6) (match_dup 7))\n    (set (match_dup 0)\n@@ -3061,14 +3052,14 @@\n })\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(if_then_else:DI\n \t (match_operator 1 \"comparison_operator\"\n-\t\t\t [(match_operand:SI 2 \"reg_or_0_operand\" \"\")\n-\t\t\t  (match_operand:SI 3 \"reg_or_cint_operand\" \"\")])\n-\t (match_operand:DI 4 \"reg_or_8bit_operand\" \"\")\n-\t (match_operand:DI 5 \"reg_or_8bit_operand\" \"\")))\n-   (clobber (match_operand:DI 6 \"register_operand\" \"\"))]\n+\t\t\t [(match_operand:SI 2 \"reg_or_0_operand\")\n+\t\t\t  (match_operand:SI 3 \"reg_or_cint_operand\")])\n+\t (match_operand:DI 4 \"reg_or_8bit_operand\")\n+\t (match_operand:DI 5 \"reg_or_8bit_operand\")))\n+   (clobber (match_operand:DI 6 \"register_operand\"))]\n   \"operands[3] != const0_rtx\n    && (GET_CODE (operands[1]) == EQ || GET_CODE (operands[1]) == NE)\"\n   [(set (match_dup 6) (match_dup 7))\n@@ -3098,12 +3089,12 @@\n ;; Prefer to use cmp and arithmetic when possible instead of a cmove.\n \n (define_split\n-  [(set (match_operand 0 \"register_operand\" \"\")\n+  [(set (match_operand 0 \"register_operand\")\n \t(if_then_else (match_operator 1 \"signed_comparison_operator\"\n-\t\t\t   [(match_operand:DI 2 \"reg_or_0_operand\" \"\")\n+\t\t\t   [(match_operand:DI 2 \"reg_or_0_operand\")\n \t\t\t    (const_int 0)])\n-\t  (match_operand 3 \"const_int_operand\" \"\")\n-\t  (match_operand 4 \"const_int_operand\" \"\")))]\n+\t  (match_operand 3 \"const_int_operand\")\n+\t  (match_operand 4 \"const_int_operand\")))]\n   \"\"\n   [(const_int 0)]\n {\n@@ -3117,12 +3108,12 @@\n ;; ??? Why combine is allowed to create such non-canonical rtl, I don't know.\n ;; Oh well, we match it in movcc, so it must be partially our fault.\n (define_split\n-  [(set (match_operand 0 \"register_operand\" \"\")\n+  [(set (match_operand 0 \"register_operand\")\n \t(if_then_else (match_operator 1 \"signed_comparison_operator\"\n \t\t\t   [(const_int 0)\n-\t\t\t    (match_operand:DI 2 \"reg_or_0_operand\" \"\")])\n-\t  (match_operand 3 \"const_int_operand\" \"\")\n-\t  (match_operand 4 \"const_int_operand\" \"\")))]\n+\t\t\t    (match_operand:DI 2 \"reg_or_0_operand\")])\n+\t  (match_operand 3 \"const_int_operand\")\n+\t  (match_operand 4 \"const_int_operand\")))]\n   \"\"\n   [(const_int 0)]\n {\n@@ -3298,10 +3289,10 @@\n ;; work differently, so we have different patterns for each.\n \n (define_expand \"call\"\n-  [(use (match_operand:DI 0 \"\" \"\"))\n-   (use (match_operand 1 \"\" \"\"))\n-   (use (match_operand 2 \"\" \"\"))\n-   (use (match_operand 3 \"\" \"\"))]\n+  [(use (match_operand:DI 0))\n+   (use (match_operand 1))\n+   (use (match_operand 2))\n+   (use (match_operand 3))]\n   \"\"\n {\n   if (TARGET_ABI_OPEN_VMS)\n@@ -3312,8 +3303,8 @@\n })\n \n (define_expand \"sibcall\"\n-  [(parallel [(call (mem:DI (match_operand 0 \"\" \"\"))\n-\t\t\t    (match_operand 1 \"\" \"\"))\n+  [(parallel [(call (mem:DI (match_operand 0))\n+\t\t\t    (match_operand 1))\n \t      (unspec [(reg:DI 29)] UNSPEC_SIBCALL)])]\n   \"TARGET_ABI_OSF\"\n {\n@@ -3322,8 +3313,8 @@\n })\n \n (define_expand \"call_osf\"\n-  [(parallel [(call (mem:DI (match_operand 0 \"\" \"\"))\n-\t\t    (match_operand 1 \"\" \"\"))\n+  [(parallel [(call (mem:DI (match_operand 0))\n+\t\t    (match_operand 1))\n \t      (use (reg:DI 29))\n \t      (clobber (reg:DI 26))])]\n   \"\"\n@@ -3341,8 +3332,8 @@\n ;; op 1: next_arg_reg (argument information value for R25)\n ;;\n (define_expand \"call_vms\"\n-  [(parallel [(call (mem:DI (match_operand 0 \"\" \"\"))\n-\t\t    (match_operand 1 \"\" \"\"))\n+  [(parallel [(call (mem:DI (match_operand 0))\n+\t\t    (match_operand 1))\n \t      (use (match_dup 2))\n \t      (use (reg:DI 25))\n \t      (use (reg:DI 26))\n@@ -3369,15 +3360,14 @@\n \t\t\t\t\t\t\t operands[0], 8)));\n       operands[2] = operands[0];\n     }\n-\n })\n \n (define_expand \"call_value\"\n-  [(use (match_operand 0 \"\" \"\"))\n-   (use (match_operand:DI 1 \"\" \"\"))\n-   (use (match_operand 2 \"\" \"\"))\n-   (use (match_operand 3 \"\" \"\"))\n-   (use (match_operand 4 \"\" \"\"))]\n+  [(use (match_operand 0))\n+   (use (match_operand:DI 1))\n+   (use (match_operand 2))\n+   (use (match_operand 3))\n+   (use (match_operand 4))]\n   \"\"\n {\n   if (TARGET_ABI_OPEN_VMS)\n@@ -3390,9 +3380,9 @@\n })\n \n (define_expand \"sibcall_value\"\n-  [(parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (mem:DI (match_operand 1 \"\" \"\"))\n-\t\t         (match_operand 2 \"\" \"\")))\n+  [(parallel [(set (match_operand 0)\n+\t\t   (call (mem:DI (match_operand 1))\n+\t\t         (match_operand 2)))\n \t      (unspec [(reg:DI 29)] UNSPEC_SIBCALL)])]\n   \"TARGET_ABI_OSF\"\n {\n@@ -3401,9 +3391,9 @@\n })\n \n (define_expand \"call_value_osf\"\n-  [(parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (mem:DI (match_operand 1 \"\" \"\"))\n-\t\t\t (match_operand 2 \"\" \"\")))\n+  [(parallel [(set (match_operand 0)\n+\t\t   (call (mem:DI (match_operand 1))\n+\t\t\t (match_operand 2)))\n \t      (use (reg:DI 29))\n \t      (clobber (reg:DI 26))])]\n   \"\"\n@@ -3416,9 +3406,9 @@\n })\n \n (define_expand \"call_value_vms\"\n-  [(parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (mem:DI (match_operand:DI 1 \"\" \"\"))\n-\t\t\t (match_operand 2 \"\" \"\")))\n+  [(parallel [(set (match_operand 0)\n+\t\t   (call (mem:DI (match_operand:DI 1))\n+\t\t\t (match_operand 2)))\n \t      (use (match_dup 3))\n \t      (use (reg:DI 25))\n \t      (use (reg:DI 26))\n@@ -3449,7 +3439,7 @@\n \n (define_insn \"*call_osf_1_er_noreturn\"\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"c,R,s\"))\n-\t (match_operand 1 \"\" \"\"))\n+\t (match_operand 1))\n    (use (reg:DI 29))\n    (clobber (reg:DI 26))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\n@@ -3463,7 +3453,7 @@\n \n (define_insn \"*call_osf_1_er\"\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"c,R,s\"))\n-\t (match_operand 1 \"\" \"\"))\n+\t (match_operand 1))\n    (use (reg:DI 29))\n    (clobber (reg:DI 26))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n@@ -3477,8 +3467,8 @@\n ;; We must use peep2 instead of a split because we need accurate life\n ;; information for $gp.  Consider the case of { bar(); while (1); }.\n (define_peephole2\n-  [(parallel [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"\"))\n-\t\t    (match_operand 1 \"\" \"\"))\n+  [(parallel [(call (mem:DI (match_operand:DI 0 \"call_operand\"))\n+\t\t    (match_operand 1))\n \t      (use (reg:DI 29))\n \t      (clobber (reg:DI 26))])]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF && reload_completed\n@@ -3508,8 +3498,8 @@\n })\n \n (define_peephole2\n-  [(parallel [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"\"))\n-\t\t    (match_operand 1 \"\" \"\"))\n+  [(parallel [(call (mem:DI (match_operand:DI 0 \"call_operand\"))\n+\t\t    (match_operand 1))\n \t      (use (reg:DI 29))\n \t      (clobber (reg:DI 26))])]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF && reload_completed\n@@ -3545,23 +3535,23 @@\n \n (define_insn \"*call_osf_2_er_nogp\"\n   [(call (mem:DI (match_operand:DI 0 \"register_operand\" \"c\"))\n-\t (match_operand 1 \"\" \"\"))\n+\t (match_operand 1))\n    (use (reg:DI 29))\n-   (use (match_operand 2 \"\" \"\"))\n-   (use (match_operand 3 \"const_int_operand\" \"\"))\n+   (use (match_operand 2))\n+   (use (match_operand 3 \"const_int_operand\"))\n    (clobber (reg:DI 26))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"jsr $26,(%0),%2%J3\"\n   [(set_attr \"type\" \"jsr\")])\n \n (define_insn \"*call_osf_2_er\"\n   [(call (mem:DI (match_operand:DI 0 \"register_operand\" \"c\"))\n-\t (match_operand 1 \"\" \"\"))\n+\t (match_operand 1))\n    (set (reg:DI 29)\n-\t(unspec:DI [(reg:DI 29) (match_operand 4 \"const_int_operand\" \"\")]\n+\t(unspec:DI [(reg:DI 29) (match_operand 4 \"const_int_operand\")]\n \t\t   UNSPEC_LDGP1))\n-   (use (match_operand 2 \"\" \"\"))\n-   (use (match_operand 3 \"const_int_operand\" \"\"))\n+   (use (match_operand 2))\n+   (use (match_operand 3 \"const_int_operand\"))\n    (clobber (reg:DI 26))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"jsr $26,(%0),%2%J3\\;ldah $29,0($26)\\t\\t!gpdisp!%4\"\n@@ -3571,7 +3561,7 @@\n \n (define_insn \"*call_osf_1_noreturn\"\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"c,R,s\"))\n-\t (match_operand 1 \"\" \"\"))\n+\t (match_operand 1))\n    (use (reg:DI 29))\n    (clobber (reg:DI 26))]\n   \"! TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\n@@ -3585,7 +3575,7 @@\n \n (define_insn \"*call_osf_1\"\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"c,R,s\"))\n-\t (match_operand 1 \"\" \"\"))\n+\t (match_operand 1))\n    (use (reg:DI 29))\n    (clobber (reg:DI 26))]\n   \"! TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n@@ -3598,7 +3588,7 @@\n \n (define_insn \"*sibcall_osf_1_er\"\n   [(call (mem:DI (match_operand:DI 0 \"symbolic_operand\" \"R,s\"))\n-\t (match_operand 1 \"\" \"\"))\n+\t (match_operand 1))\n    (unspec [(reg:DI 29)] UNSPEC_SIBCALL)]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"@\n@@ -3611,7 +3601,7 @@\n ;; doesn't do what we want.\n (define_insn \"*sibcall_osf_1\"\n   [(call (mem:DI (match_operand:DI 0 \"symbolic_operand\" \"R,s\"))\n-\t (match_operand 1 \"\" \"\"))\n+\t (match_operand 1))\n    (unspec [(reg:DI 29)] UNSPEC_SIBCALL)]\n   \"! TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"@\n@@ -3625,7 +3615,7 @@\n ; Please do not molest.\n (define_insn \"*call_vms_1\"\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"r,s\"))\n-\t (match_operand 1 \"\" \"\"))\n+\t (match_operand 1))\n    (use (match_operand:DI 2 \"nonmemory_operand\" \"r,n\"))\n    (use (reg:DI 25))\n    (use (reg:DI 26))\n@@ -3650,10 +3640,10 @@\n ;; Call subroutine returning any type.\n \n (define_expand \"untyped_call\"\n-  [(parallel [(call (match_operand 0 \"\" \"\")\n+  [(parallel [(call (match_operand 0)\n \t\t    (const_int 0))\n-\t      (match_operand 1 \"\" \"\")\n-\t      (match_operand 2 \"\" \"\")])]\n+\t      (match_operand 1)\n+\t      (match_operand 2)])]\n   \"\"\n {\n   int i;\n@@ -3687,15 +3677,14 @@\n \n (define_insn \"jump\"\n   [(set (pc)\n-\t(label_ref (match_operand 0 \"\" \"\")))]\n+\t(label_ref (match_operand 0)))]\n   \"\"\n   \"br $31,%l0\"\n   [(set_attr \"type\" \"ibr\")])\n \n (define_expand \"return\"\n   [(return)]\n-  \"direct_return ()\"\n-  \"\")\n+  \"direct_return ()\")\n \n (define_insn \"*return_internal\"\n   [(return)]\n@@ -3711,8 +3700,8 @@\n \n (define_expand \"tablejump\"\n   [(parallel [(set (pc)\n-\t\t   (match_operand 0 \"register_operand\" \"\"))\n-\t      (use (label_ref:DI (match_operand 1 \"\" \"\")))])]\n+\t\t   (match_operand 0 \"register_operand\"))\n+\t      (use (label_ref:DI (match_operand 1)))])]\n   \"\"\n {\n   if (TARGET_ABI_OSF)\n@@ -3727,7 +3716,7 @@\n (define_insn \"*tablejump_internal\"\n   [(set (pc)\n \t(match_operand:DI 0 \"register_operand\" \"r\"))\n-   (use (label_ref (match_operand 1 \"\" \"\")))]\n+   (use (label_ref (match_operand 1)))]\n   \"\"\n   \"jmp $31,(%0),0\"\n   [(set_attr \"type\" \"ibr\")])\n@@ -3741,8 +3730,8 @@\n   [(set_attr \"type\" \"callpal\")])\n \n (define_expand \"clear_cache\"\n-  [(match_operand:DI 0 \"\")\t\t; region start\n-   (match_operand:DI 1 \"\")]\t\t; region end\n+  [(match_operand:DI 0)\t\t; region start\n+   (match_operand:DI 1)]\t\t; region end\n   \"\"\n {\n   emit_insn (gen_imb ());\n@@ -3777,10 +3766,9 @@\n ;; not much point in creating an R16_REG register class.\n \n (define_expand \"set_thread_pointerdi\"\n-  [(set (reg:DI 16) (match_operand:DI 0 \"input_operand\" \"\"))\n+  [(set (reg:DI 16) (match_operand:DI 0 \"input_operand\"))\n    (unspec_volatile [(reg:DI 16)] UNSPECV_SET_TP)]\n-  \"TARGET_ABI_OSF\"\n-  \"\")\n+  \"TARGET_ABI_OSF\")\n \n (define_insn \"*set_tp\"\n   [(unspec_volatile [(reg:DI 16)] UNSPECV_SET_TP)]\n@@ -3796,28 +3784,26 @@\n ;; Special builtins for establishing and reverting VMS condition handlers.\n \n (define_expand \"builtin_establish_vms_condition_handler\"\n-  [(set (reg:DI 0) (match_operand:DI 0 \"register_operand\" \"\"))\n-   (use (match_operand:DI 1 \"address_operand\" \"\"))]\n+  [(set (reg:DI 0) (match_operand:DI 0 \"register_operand\"))\n+   (use (match_operand:DI 1 \"address_operand\"))]\n   \"TARGET_ABI_OPEN_VMS\"\n {\n   alpha_expand_builtin_establish_vms_condition_handler (operands[0],\n                                                         operands[1]);\n })\n \n (define_expand \"builtin_revert_vms_condition_handler\"\n-  [(set (reg:DI 0) (match_operand:DI 0 \"register_operand\" \"\"))]\n+  [(set (reg:DI 0) (match_operand:DI 0 \"register_operand\"))]\n   \"TARGET_ABI_OPEN_VMS\"\n-{\n-  alpha_expand_builtin_revert_vms_condition_handler (operands[0]);\n-})\n+  \"alpha_expand_builtin_revert_vms_condition_handler (operands[0]);\")\n \f\n ;; Finally, we have the basic data motion insns.  The byte and word insns\n ;; are done via define_expand.  Start with the floating-point insns, since\n ;; they are simpler.\n \n (define_expand \"movsf\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:SF 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\")\n+\t(match_operand:SF 1 \"general_operand\"))]\n   \"\"\n {\n   if (MEM_P (operands[0])\n@@ -3843,8 +3829,8 @@\n    (set_attr \"isa\" \"*,*,*,*,*,*,fix,fix\")])\n \n (define_expand \"movdf\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:DF 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\")\n+\t(match_operand:DF 1 \"general_operand\"))]\n   \"\"\n {\n   if (MEM_P (operands[0])\n@@ -3874,8 +3860,8 @@\n ;; ??? Is this still true now that we have the lower-subreg pass?\n \n (define_expand \"movtf\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:TF 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\")\n+\t(match_operand:TF 1 \"general_operand\"))]\n   \"\"\n {\n   if (MEM_P (operands[0])\n@@ -3892,16 +3878,14 @@\n   \"reload_completed\"\n   [(set (match_dup 0) (match_dup 2))\n    (set (match_dup 1) (match_dup 3))]\n-{\n-  alpha_split_tmode_pair (operands, TFmode, true); \n-})\n+  \"alpha_split_tmode_pair (operands, TFmode, true);\")\n \n ;; We do two major things here: handle mem->mem and construct long\n ;; constants.\n \n (define_expand \"movsi\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:SI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\")\n+\t(match_operand:SI 1 \"general_operand\"))]\n   \"\"\n {\n   if (alpha_expand_mov (SImode, operands))\n@@ -3928,8 +3912,8 @@\n ;; sequence.\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_operand:SI 1 \"non_add_const_operand\" \"\"))]\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(match_operand:SI 1 \"non_add_const_operand\"))]\n   \"\"\n   [(const_int 0)]\n {\n@@ -3942,7 +3926,7 @@\n (define_insn \"*movdi_er_low_l\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t   (match_operand:DI 2 \"local_symbolic_operand\" \"\")))]\n+\t\t   (match_operand:DI 2 \"local_symbolic_operand\")))]\n   \"TARGET_EXPLICIT_RELOCS\"\n {\n   if (true_regnum (operands[1]) == 29)\n@@ -3953,16 +3937,16 @@\n   [(set_attr \"usegp\" \"yes\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(match_operand:DI 1 \"small_symbolic_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(match_operand:DI 1 \"small_symbolic_operand\"))]\n   \"TARGET_EXPLICIT_RELOCS && reload_completed\"\n   [(set (match_dup 0)\n \t(lo_sum:DI (match_dup 2) (match_dup 1)))]\n   \"operands[2] = pic_offset_table_rtx;\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(match_operand:DI 1 \"local_symbolic_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(match_operand:DI 1 \"local_symbolic_operand\"))]\n   \"TARGET_EXPLICIT_RELOCS && reload_completed\"\n   [(set (match_dup 0)\n \t(plus:DI (match_dup 2) (high:DI (match_dup 1))))\n@@ -3971,7 +3955,7 @@\n   \"operands[2] = pic_offset_table_rtx;\")\n \n (define_split\n-  [(match_operand 0 \"some_small_symbolic_operand\" \"\")]\n+  [(match_operand 0 \"some_small_symbolic_operand\")]\n   \"\"\n   [(match_dup 0)]\n   \"operands[0] = split_small_symbolic_operand (operands[0]);\")\n@@ -3981,8 +3965,8 @@\n (define_insn \"movdi_er_high_g\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:DI 2 \"symbolic_operand\" \"\")\n-\t\t    (match_operand 3 \"const_int_operand\" \"\")]\n+\t\t    (match_operand:DI 2 \"symbolic_operand\")\n+\t\t    (match_operand 3 \"const_int_operand\")]\n \t\t   UNSPEC_LITERAL))]\n   \"TARGET_EXPLICIT_RELOCS\"\n {\n@@ -3994,8 +3978,8 @@\n   [(set_attr \"type\" \"ldsym\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(match_operand:DI 1 \"global_symbolic_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(match_operand:DI 1 \"global_symbolic_operand\"))]\n   \"TARGET_EXPLICIT_RELOCS && reload_completed\"\n   [(set (match_dup 0)\n \t(unspec:DI [(match_dup 2)\n@@ -4006,8 +3990,8 @@\n (define_insn \"movdi_er_tlsgd\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:DI 2 \"symbolic_operand\" \"\")\n-\t\t    (match_operand 3 \"const_int_operand\" \"\")]\n+\t\t    (match_operand:DI 2 \"symbolic_operand\")\n+\t\t    (match_operand 3 \"const_int_operand\")]\n \t\t   UNSPEC_TLSGD))]\n   \"HAVE_AS_TLS\"\n {\n@@ -4020,7 +4004,7 @@\n (define_insn \"movdi_er_tlsldm\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand 2 \"const_int_operand\" \"\")]\n+\t\t    (match_operand 2 \"const_int_operand\")]\n \t\t   UNSPEC_TLSLDM))]\n   \"HAVE_AS_TLS\"\n {\n@@ -4033,16 +4017,16 @@\n (define_insn \"*movdi_er_gotdtp\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:DI 2 \"symbolic_operand\" \"\")]\n+\t\t    (match_operand:DI 2 \"symbolic_operand\")]\n \t\t   UNSPEC_DTPREL))]\n   \"HAVE_AS_TLS\"\n   \"ldq %0,%2(%1)\\t\\t!gotdtprel\"\n   [(set_attr \"type\" \"ild\")\n    (set_attr \"usegp\" \"yes\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(match_operand:DI 1 \"gotdtp_symbolic_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(match_operand:DI 1 \"gotdtp_symbolic_operand\"))]\n   \"HAVE_AS_TLS && reload_completed\"\n   [(set (match_dup 0)\n \t(unspec:DI [(match_dup 2)\n@@ -4055,16 +4039,16 @@\n (define_insn \"*movdi_er_gottp\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:DI 2 \"symbolic_operand\" \"\")]\n+\t\t    (match_operand:DI 2 \"symbolic_operand\")]\n \t\t   UNSPEC_TPREL))]\n   \"HAVE_AS_TLS\"\n   \"ldq %0,%2(%1)\\t\\t!gottprel\"\n   [(set_attr \"type\" \"ild\")\n    (set_attr \"usegp\" \"yes\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(match_operand:DI 1 \"gottp_symbolic_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(match_operand:DI 1 \"gottp_symbolic_operand\"))]\n   \"HAVE_AS_TLS && reload_completed\"\n   [(set (match_dup 0)\n \t(unspec:DI [(match_dup 2)\n@@ -4116,8 +4100,8 @@\n ;; memory, and construct long 32-bit constants.\n \n (define_expand \"movdi\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:DI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\")\n+\t(match_operand:DI 1 \"general_operand\"))]\n   \"\"\n {\n   if (alpha_expand_mov (DImode, operands))\n@@ -4128,8 +4112,8 @@\n ;; sequence.\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(match_operand:DI 1 \"non_add_const_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(match_operand:DI 1 \"non_add_const_operand\"))]\n   \"\"\n   [(const_int 0)]\n {\n@@ -4155,13 +4139,11 @@\n   \"reload_completed\"\n   [(set (match_dup 0) (match_dup 2))\n    (set (match_dup 1) (match_dup 3))]\n-{\n-  alpha_split_tmode_pair (operands, TImode, true);\n-})\n+  \"alpha_split_tmode_pair (operands, TImode, true);\")\n \n (define_expand \"movti\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"\")\n-        (match_operand:TI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\")\n+        (match_operand:TI 1 \"general_operand\"))]\n   \"\"\n {\n   if (MEM_P (operands[0])\n@@ -4223,26 +4205,20 @@\n ;; same register.  It is allowed to conflict with operand 1 as well.\n \n (define_expand \"aligned_loadqi\"\n-  [(set (match_operand:SI 3 \"register_operand\" \"\")\n-\t(match_operand:SI 1 \"memory_operand\" \"\"))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:SI 3 \"register_operand\")\n+\t(match_operand:SI 1 \"memory_operand\"))\n+   (set (match_operand:DI 0 \"register_operand\")\n \t(zero_extract:DI (subreg:DI (match_dup 3) 0)\n \t\t\t (const_int 8)\n-\t\t\t (match_operand:DI 2 \"const_int_operand\" \"\")))]\n-\n-  \"\"\n-  \"\")\n+\t\t\t (match_operand:DI 2 \"const_int_operand\")))])\n \n (define_expand \"aligned_loadhi\"\n-  [(set (match_operand:SI 3 \"register_operand\" \"\")\n-\t(match_operand:SI 1 \"memory_operand\" \"\"))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:SI 3 \"register_operand\")\n+\t(match_operand:SI 1 \"memory_operand\"))\n+   (set (match_operand:DI 0 \"register_operand\")\n \t(zero_extract:DI (subreg:DI (match_dup 3) 0)\n \t\t\t (const_int 16)\n-\t\t\t (match_operand:DI 2 \"const_int_operand\" \"\")))]\n-\n-  \"\"\n-  \"\")\n+\t\t\t (match_operand:DI 2 \"const_int_operand\")))])\n \n ;; Similar for unaligned loads, where we use the sequence from the\n ;; Alpha Architecture manual. We have to distinguish between little-endian\n@@ -4252,44 +4228,40 @@\n ;; operand 3 can overlap the input and output registers.\n \n (define_expand \"unaligned_loadqi\"\n-  [(set (match_operand:DI 2 \"register_operand\" \"\")\n-\t(mem:DI (and:DI (match_operand:DI 1 \"address_operand\" \"\")\n+  [(set (match_operand:DI 2 \"register_operand\")\n+\t(mem:DI (and:DI (match_operand:DI 1 \"address_operand\")\n \t\t\t(const_int -8))))\n-   (set (match_operand:DI 3 \"register_operand\" \"\")\n+   (set (match_operand:DI 3 \"register_operand\")\n \t(match_dup 1))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:DI 0 \"register_operand\")\n \t(zero_extract:DI (match_dup 2)\n \t\t\t (const_int 8)\n-\t\t\t (ashift:DI (match_dup 3) (const_int 3))))]\n-  \"\"\n-  \"\")\n+\t\t\t (ashift:DI (match_dup 3) (const_int 3))))])\n \n (define_expand \"unaligned_loadhi\"\n-  [(set (match_operand:DI 2 \"register_operand\" \"\")\n-\t(mem:DI (and:DI (match_operand:DI 1 \"address_operand\" \"\")\n+  [(set (match_operand:DI 2 \"register_operand\")\n+\t(mem:DI (and:DI (match_operand:DI 1 \"address_operand\")\n \t\t\t(const_int -8))))\n-   (set (match_operand:DI 3 \"register_operand\" \"\")\n+   (set (match_operand:DI 3 \"register_operand\")\n \t(match_dup 1))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:DI 0 \"register_operand\")\n \t(zero_extract:DI (match_dup 2)\n \t\t\t (const_int 16)\n-\t\t\t (ashift:DI (match_dup 3) (const_int 3))))]\n-  \"\"\n-  \"\")\n+\t\t\t (ashift:DI (match_dup 3) (const_int 3))))])\n \n ;; Storing an aligned byte or word requires two temporaries.  Operand 0 is the\n ;; aligned SImode MEM.  Operand 1 is the register containing the\n ;; byte or word to store.  Operand 2 is the number of bits within the word that\n ;; the value should be placed.  Operands 3 and 4 are SImode temporaries.\n \n (define_expand \"aligned_store\"\n-  [(set (match_operand:SI 3 \"register_operand\" \"\")\n-\t(match_operand:SI 0 \"memory_operand\" \"\"))\n+  [(set (match_operand:SI 3 \"register_operand\")\n+\t(match_operand:SI 0 \"memory_operand\"))\n    (set (subreg:DI (match_dup 3) 0)\n \t(and:DI (subreg:DI (match_dup 3) 0) (match_dup 5)))\n-   (set (subreg:DI (match_operand:SI 4 \"register_operand\" \"\") 0)\n-\t(ashift:DI (zero_extend:DI (match_operand 1 \"register_operand\" \"\"))\n-\t\t   (match_operand:DI 2 \"const_int_operand\" \"\")))\n+   (set (subreg:DI (match_operand:SI 4 \"register_operand\") 0)\n+\t(ashift:DI (zero_extend:DI (match_operand 1 \"register_operand\"))\n+\t\t   (match_operand:DI 2 \"const_int_operand\")))\n    (set (subreg:DI (match_dup 4) 0)\n \t(ior:DI (subreg:DI (match_dup 4) 0) (subreg:DI (match_dup 3) 0)))\n    (set (match_dup 0) (match_dup 4))]\n@@ -4307,18 +4279,18 @@\n ;; operand 2 can be that register.\n \n (define_expand \"unaligned_store<mode>\"\n-  [(set (match_operand:DI 3 \"register_operand\" \"\")\n-\t(mem:DI (and:DI (match_operand:DI 0 \"address_operand\" \"\")\n+  [(set (match_operand:DI 3 \"register_operand\")\n+\t(mem:DI (and:DI (match_operand:DI 0 \"address_operand\")\n \t\t\t(const_int -8))))\n-   (set (match_operand:DI 2 \"register_operand\" \"\")\n+   (set (match_operand:DI 2 \"register_operand\")\n \t(match_dup 0))\n    (set (match_dup 3)\n \t(and:DI (not:DI (ashift:DI (match_dup 5)\n \t\t\t\t   (ashift:DI (match_dup 2) (const_int 3))))\n \t\t(match_dup 3)))\n-   (set (match_operand:DI 4 \"register_operand\" \"\")\n+   (set (match_operand:DI 4 \"register_operand\")\n \t(ashift:DI (zero_extend:DI\n-\t\t     (match_operand:I12MODE 1 \"register_operand\" \"\"))\n+\t\t     (match_operand:I12MODE 1 \"register_operand\"))\n \t\t   (ashift:DI (match_dup 2) (const_int 3))))\n    (set (match_dup 4) (ior:DI (match_dup 4) (match_dup 3)))\n    (set (mem:DI (and:DI (match_dup 0) (const_int -8)))\n@@ -4331,8 +4303,8 @@\n ;; registers for reload.\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:I12MODE 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:I12MODE 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:I12MODE 0 \"nonimmediate_operand\")\n+\t(match_operand:I12MODE 1 \"general_operand\"))]\n   \"\"\n {\n   if (TARGET_BWX\n@@ -4370,8 +4342,8 @@\n ;; We need to hook into the extra support that we have for HImode \n ;; reloads when BWX insns are not available.\n (define_expand \"movcqi\"\n-  [(set (match_operand:CQI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:CQI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:CQI 0 \"nonimmediate_operand\")\n+\t(match_operand:CQI 1 \"general_operand\"))]\n   \"!TARGET_BWX\"\n {\n   if (GET_CODE (operands[0]) == CONCAT || GET_CODE (operands[1]) == CONCAT)\n@@ -4530,17 +4502,17 @@\n (define_mode_iterator VEC12 [V8QI V4HI])\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:VEC 0 \"nonimmediate_operand\" \"\")\n-        (match_operand:VEC 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:VEC 0 \"nonimmediate_operand\")\n+        (match_operand:VEC 1 \"general_operand\"))]\n   \"\"\n {\n   if (alpha_expand_mov (<MODE>mode, operands))\n     DONE;\n })\n \n (define_split\n-  [(set (match_operand:VEC 0 \"register_operand\" \"\")\n-\t(match_operand:VEC 1 \"non_zero_const_operand\" \"\"))]\n+  [(set (match_operand:VEC 0 \"register_operand\")\n+\t(match_operand:VEC 1 \"non_zero_const_operand\"))]\n   \"\"\n   [(const_int 0)]\n {\n@@ -4552,8 +4524,8 @@\n \n \n (define_expand \"movmisalign<mode>\"\n-  [(set (match_operand:VEC 0 \"nonimmediate_operand\" \"\")\n-        (match_operand:VEC 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:VEC 0 \"nonimmediate_operand\")\n+        (match_operand:VEC 1 \"general_operand\"))]\n   \"\"\n {\n   alpha_expand_movmisalign (<MODE>mode, operands);\n@@ -4643,19 +4615,19 @@\n   [(set_attr \"type\" \"ilog\")])\n \n (define_expand \"vec_shl_<mode>\"\n-  [(set (match_operand:VEC 0 \"register_operand\" \"\")\n-\t(ashift:DI (match_operand:VEC 1 \"register_operand\" \"\")\n-\t\t   (match_operand:DI 2 \"reg_or_6bit_operand\" \"\")))]\n+  [(set (match_operand:VEC 0 \"register_operand\")\n+\t(ashift:DI (match_operand:VEC 1 \"register_operand\")\n+\t\t   (match_operand:DI 2 \"reg_or_6bit_operand\")))]\n   \"\"\n {\n   operands[0] = gen_lowpart (DImode, operands[0]);\n   operands[1] = gen_lowpart (DImode, operands[1]);\n })\n \n (define_expand \"vec_shr_<mode>\"\n-  [(set (match_operand:VEC 0 \"register_operand\" \"\")\n-        (lshiftrt:DI (match_operand:VEC 1 \"register_operand\" \"\")\n-                     (match_operand:DI 2 \"reg_or_6bit_operand\" \"\")))]\n+  [(set (match_operand:VEC 0 \"register_operand\")\n+        (lshiftrt:DI (match_operand:VEC 1 \"register_operand\")\n+                     (match_operand:DI 2 \"reg_or_6bit_operand\")))]\n   \"\"\n {\n   operands[0] = gen_lowpart (DImode, operands[0]);\n@@ -4665,10 +4637,10 @@\n ;; Bit field extract patterns which use ext[wlq][lh]\n \n (define_expand \"extv\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(sign_extract:DI (match_operand:QI 1 \"memory_operand\" \"\")\n-\t\t\t (match_operand:DI 2 \"immediate_operand\" \"\")\n-\t\t\t (match_operand:DI 3 \"immediate_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(sign_extract:DI (match_operand:QI 1 \"memory_operand\")\n+\t\t\t (match_operand:DI 2 \"immediate_operand\")\n+\t\t\t (match_operand:DI 3 \"immediate_operand\")))]\n   \"\"\n {\n   int ofs;\n@@ -4695,10 +4667,10 @@\n })\n \n (define_expand \"extzv\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(zero_extract:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n-\t\t\t (match_operand:DI 2 \"immediate_operand\" \"\")\n-\t\t\t (match_operand:DI 3 \"immediate_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(zero_extract:DI (match_operand:DI 1 \"nonimmediate_operand\")\n+\t\t\t (match_operand:DI 2 \"immediate_operand\")\n+\t\t\t (match_operand:DI 3 \"immediate_operand\")))]\n   \"\"\n {\n   /* We can do 8, 16, 32 and 64 bit fields, if aligned on byte boundaries.  */\n@@ -4728,10 +4700,10 @@\n })\n \n (define_expand \"insv\"\n-  [(set (zero_extract:DI (match_operand:QI 0 \"memory_operand\" \"\")\n-\t\t\t (match_operand:DI 1 \"immediate_operand\" \"\")\n-\t\t\t (match_operand:DI 2 \"immediate_operand\" \"\"))\n-\t(match_operand:DI 3 \"register_operand\" \"\"))]\n+  [(set (zero_extract:DI (match_operand:QI 0 \"memory_operand\")\n+\t\t\t (match_operand:DI 1 \"immediate_operand\")\n+\t\t\t (match_operand:DI 2 \"immediate_operand\"))\n+\t(match_operand:DI 3 \"register_operand\"))]\n   \"\"\n {\n   int ofs;\n@@ -4763,10 +4735,10 @@\n ;; Argument 3 is the alignment\n \n (define_expand \"movmemqi\"\n-  [(parallel [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n-\t\t   (match_operand:BLK 1 \"memory_operand\" \"\"))\n-\t      (use (match_operand:DI 2 \"immediate_operand\" \"\"))\n-\t      (use (match_operand:DI 3 \"immediate_operand\" \"\"))])]\n+  [(parallel [(set (match_operand:BLK 0 \"memory_operand\")\n+\t\t   (match_operand:BLK 1 \"memory_operand\"))\n+\t      (use (match_operand:DI 2 \"immediate_operand\"))\n+\t      (use (match_operand:DI 3 \"immediate_operand\"))])]\n   \"\"\n {\n   if (alpha_expand_block_move (operands))\n@@ -4776,10 +4748,10 @@\n })\n \n (define_expand \"movmemdi\"\n-  [(parallel [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n-\t\t   (match_operand:BLK 1 \"memory_operand\" \"\"))\n-\t      (use (match_operand:DI 2 \"immediate_operand\" \"\"))\n-\t      (use (match_operand:DI 3 \"immediate_operand\" \"\"))\n+  [(parallel [(set (match_operand:BLK 0 \"memory_operand\")\n+\t\t   (match_operand:BLK 1 \"memory_operand\"))\n+\t      (use (match_operand:DI 2 \"immediate_operand\"))\n+\t      (use (match_operand:DI 3 \"immediate_operand\"))\n \t      (use (match_dup 4))\n \t      (clobber (reg:DI 25))\n \t      (clobber (reg:DI 16))\n@@ -4790,15 +4762,13 @@\n \t      (clobber (reg:DI 26))\n \t      (clobber (reg:DI 27))])]\n   \"TARGET_ABI_OPEN_VMS\"\n-{\n-  operands[4] = gen_rtx_SYMBOL_REF (Pmode, \"OTS$MOVE\");\n-})\n+  \"operands[4] = gen_rtx_SYMBOL_REF (Pmode, \\\"OTS$MOVE\\\");\")\n \n (define_insn \"*movmemdi_1\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"=m,=m\")\n \t(match_operand:BLK 1 \"memory_operand\" \"m,m\"))\n    (use (match_operand:DI 2 \"nonmemory_operand\" \"r,i\"))\n-   (use (match_operand:DI 3 \"immediate_operand\" \"\"))\n+   (use (match_operand:DI 3 \"immediate_operand\"))\n    (use (match_operand:DI 4 \"call_operand\" \"i,i\"))\n    (clobber (reg:DI 25))\n    (clobber (reg:DI 16))\n@@ -4825,10 +4795,10 @@\n    (set_attr \"length\" \"28\")])\n \n (define_expand \"setmemqi\"\n-  [(parallel [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n-\t\t   (match_operand 2 \"const_int_operand\" \"\"))\n-\t      (use (match_operand:DI 1 \"immediate_operand\" \"\"))\n-\t      (use (match_operand:DI 3 \"immediate_operand\" \"\"))])]\n+  [(parallel [(set (match_operand:BLK 0 \"memory_operand\")\n+\t\t   (match_operand 2 \"const_int_operand\"))\n+\t      (use (match_operand:DI 1 \"immediate_operand\"))\n+\t      (use (match_operand:DI 3 \"immediate_operand\"))])]\n   \"\"\n {\n   /* If value to set is not zero, use the library routine.  */\n@@ -4842,10 +4812,10 @@\n })\n \n (define_expand \"setmemdi\"\n-  [(parallel [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n-\t\t   (match_operand 2 \"const_int_operand\" \"\"))\n-\t      (use (match_operand:DI 1 \"immediate_operand\" \"\"))\n-\t      (use (match_operand:DI 3 \"immediate_operand\" \"\"))\n+  [(parallel [(set (match_operand:BLK 0 \"memory_operand\")\n+\t\t   (match_operand 2 \"const_int_operand\"))\n+\t      (use (match_operand:DI 1 \"immediate_operand\"))\n+\t      (use (match_operand:DI 3 \"immediate_operand\"))\n \t      (use (match_dup 4))\n \t      (clobber (reg:DI 25))\n \t      (clobber (reg:DI 16))\n@@ -4865,7 +4835,7 @@\n   [(set (match_operand:BLK 0 \"memory_operand\" \"=m,=m\")\n \t\t   (const_int 0))\n    (use (match_operand:DI 1 \"nonmemory_operand\" \"r,i\"))\n-   (use (match_operand:DI 2 \"immediate_operand\" \"\"))\n+   (use (match_operand:DI 2 \"immediate_operand\"))\n    (use (match_operand:DI 3 \"call_operand\" \"i,i\"))\n    (clobber (reg:DI 25))\n    (clobber (reg:DI 16))\n@@ -4891,7 +4861,7 @@\n \f\n ;; Subroutine of stack space allocation.  Perform a stack probe.\n (define_expand \"probe_stack\"\n-  [(set (match_dup 1) (match_operand:DI 0 \"const_int_operand\" \"\"))]\n+  [(set (match_dup 1) (match_operand:DI 0 \"const_int_operand\"))]\n   \"\"\n {\n   operands[1] = gen_rtx_MEM (DImode, plus_constant (Pmode, stack_pointer_rtx,\n@@ -4910,7 +4880,7 @@\n (define_expand \"allocate_stack\"\n   [(set (reg:DI 30)\n \t(plus:DI (reg:DI 30)\n-\t\t (match_operand:DI 1 \"reg_or_cint_operand\" \"\")))\n+\t\t (match_operand:DI 1 \"reg_or_cint_operand\")))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_dup 2))]\n   \"\"\n@@ -4998,7 +4968,7 @@\n    (set_attr \"type\" \"multi\")])\n \n (define_expand \"prologue\"\n-  [(clobber (const_int 0))]\n+  [(const_int 0)]\n   \"\"\n {\n   alpha_expand_prologue ();\n@@ -5029,7 +4999,7 @@\n (define_insn \"*ldgp_er_1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t\t     (match_operand 2 \"const_int_operand\" \"\")]\n+\t\t\t     (match_operand 2 \"const_int_operand\")]\n \t\t\t    UNSPECV_LDGP1))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"ldah %0,0(%1)\\t\\t!gpdisp!%2\"\n@@ -5038,7 +5008,7 @@\n (define_insn \"*ldgp_er_2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand 2 \"const_int_operand\" \"\")]\n+\t\t    (match_operand 2 \"const_int_operand\")]\n \t\t   UNSPEC_LDGP2))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"lda %0,0(%1)\\t\\t!gpdisp!%2\"\n@@ -5047,7 +5017,7 @@\n (define_insn \"*prologue_ldgp_er_2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t\t     (match_operand 2 \"const_int_operand\" \"\")]\n+\t\t\t     (match_operand 2 \"const_int_operand\")]\n \t\t   \t    UNSPECV_PLDGP2))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"lda %0,0(%1)\\t\\t!gpdisp!%2\\n$%~..ng:\"\n@@ -5056,7 +5026,7 @@\n (define_insn \"*prologue_ldgp_1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t\t     (match_operand 2 \"const_int_operand\" \"\")]\n+\t\t\t     (match_operand 2 \"const_int_operand\")]\n \t\t\t    UNSPECV_LDGP1))]\n   \"\"\n   \"ldgp %0,0(%1)\\n$%~..ng:\"\n@@ -5065,10 +5035,10 @@\n (define_insn \"*prologue_ldgp_2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t\t     (match_operand 2 \"const_int_operand\" \"\")]\n+\t\t\t     (match_operand 2 \"const_int_operand\")]\n \t\t   \t    UNSPECV_PLDGP2))]\n   \"\"\n-  \"\")\n+ )\n \n ;; The _mcount profiling hook has special calling conventions, and\n ;; does not clobber all the registers that a normal call would.  So\n@@ -5098,9 +5068,7 @@\n (define_expand \"epilogue\"\n   [(return)]\n   \"\"\n-{\n-  alpha_expand_epilogue ();\n-})\n+  \"alpha_expand_epilogue ();\")\n \n (define_expand \"sibcall_epilogue\"\n   [(return)]\n@@ -5146,12 +5114,11 @@\n   [(set_attr \"type\" \"ibr\")])\n \n (define_expand \"builtin_setjmp_receiver\"\n-  [(unspec_volatile [(label_ref (match_operand 0 \"\" \"\"))] UNSPECV_SETJMPR)]\n-  \"TARGET_ABI_OSF\"\n-  \"\")\n+  [(unspec_volatile [(label_ref (match_operand 0))] UNSPECV_SETJMPR)]\n+  \"TARGET_ABI_OSF\")\n \n (define_insn_and_split \"*builtin_setjmp_receiver_1\"\n-  [(unspec_volatile [(match_operand 0 \"\" \"\")] UNSPECV_SETJMPR)]\n+  [(unspec_volatile [(match_operand 0)] UNSPECV_SETJMPR)]\n   \"TARGET_ABI_OSF\"\n {\n   if (TARGET_EXPLICIT_RELOCS)\n@@ -5176,7 +5143,7 @@\n    (set_attr \"type\" \"multi\")])\n \n (define_insn \"*builtin_setjmp_receiver_er_sl_1\"\n-  [(unspec_volatile [(match_operand 0 \"\" \"\")] UNSPECV_SETJMPR_ER)]\n+  [(unspec_volatile [(match_operand 0)] UNSPECV_SETJMPR_ER)]\n   \"TARGET_ABI_OSF && TARGET_EXPLICIT_RELOCS\"\n   \"lda $27,$LSJ%=-%l0($27)\\n$LSJ%=:\")\n   \n@@ -5230,8 +5197,7 @@\n    (set (reg:DI 27) (mem:DI (reg:DI 29)))\n    (unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n    (use (reg:DI 27))]\n-  \"TARGET_ABI_OPEN_VMS\"\n-  \"\")\n+  \"TARGET_ABI_OPEN_VMS\")\n \n (define_insn \"arg_home\"\n   [(unspec [(const_int 0)] UNSPEC_ARG_HOME)\n@@ -5346,49 +5312,49 @@\n   [(set_attr \"type\" \"icmp\")])\n \n (define_expand \"extbl\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"reg_or_0_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   emit_insn (gen_extxl (operands[0], operands[1], GEN_INT (8), operands[2]));\n   DONE;\n })\n \n (define_expand \"extwl\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"reg_or_0_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   emit_insn (gen_extxl (operands[0], operands[1], GEN_INT (16), operands[2]));\n   DONE;\n })\n \n (define_expand \"extll\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"reg_or_0_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   emit_insn (gen_extxl (operands[0], operands[1], GEN_INT (32), operands[2]));\n   DONE;\n })\n \n (define_expand \"extql\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"reg_or_0_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   emit_insn (gen_extxl (operands[0], operands[1], GEN_INT (64), operands[2]));\n   DONE;\n })\n \n (define_expand \"builtin_insbl\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"register_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   operands[1] = gen_lowpart (QImode, operands[1]);\n@@ -5397,9 +5363,9 @@\n })\n \n (define_expand \"builtin_inswl\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"register_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   operands[1] = gen_lowpart (HImode, operands[1]);\n@@ -5408,9 +5374,9 @@\n })\n \n (define_expand \"builtin_insll\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"register_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   operands[1] = gen_lowpart (SImode, operands[1]);\n@@ -5419,39 +5385,39 @@\n })\n \n (define_expand \"inswh\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"register_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   emit_insn (gen_insxh (operands[0], operands[1], GEN_INT (16), operands[2]));\n   DONE;\n })\n \n (define_expand \"inslh\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"register_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   emit_insn (gen_insxh (operands[0], operands[1], GEN_INT (32), operands[2]));\n   DONE;\n })\n \n (define_expand \"insqh\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"register_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   emit_insn (gen_insxh (operands[0], operands[1], GEN_INT (64), operands[2]));\n   DONE;\n })\n \n (define_expand \"mskbl\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"reg_or_0_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   rtx mask = GEN_INT (0xff);\n@@ -5460,9 +5426,9 @@\n })\n \n (define_expand \"mskwl\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"reg_or_0_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   rtx mask = GEN_INT (0xffff);\n@@ -5471,9 +5437,9 @@\n })\n \n (define_expand \"mskll\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"reg_or_0_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   rtx mask = immed_double_const (0xffffffff, 0, DImode);\n@@ -5482,9 +5448,9 @@\n })\n \n (define_expand \"mskql\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"reg_or_0_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   rtx mask = constm1_rtx;\n@@ -5493,41 +5459,41 @@\n })\n \n (define_expand \"mskwh\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"register_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   emit_insn (gen_mskxh (operands[0], operands[1], GEN_INT (16), operands[2]));\n   DONE;\n })\n \n (define_expand \"msklh\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"register_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   emit_insn (gen_mskxh (operands[0], operands[1], GEN_INT (32), operands[2]));\n   DONE;\n })\n \n (define_expand \"mskqh\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"register_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\")]\n   \"\"\n {\n   emit_insn (gen_mskxh (operands[0], operands[1], GEN_INT (64), operands[2]));\n   DONE;\n })\n \n (define_expand \"builtin_zap\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(and:DI (unspec:DI\n-\t\t  [(match_operand:DI 2 \"reg_or_cint_operand\" \"\")]\n+\t\t  [(match_operand:DI 2 \"reg_or_cint_operand\")]\n \t\t  UNSPEC_ZAP)\n-\t\t(match_operand:DI 1 \"reg_or_cint_operand\" \"\")))]\n+\t\t(match_operand:DI 1 \"reg_or_cint_operand\")))]\n   \"\"\n {\n   if (CONST_INT_P (operands[2]))\n@@ -5569,11 +5535,11 @@\n   [(set_attr \"type\" \"shift,shift,ilog,shift\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(and:DI (unspec:DI\n-\t\t  [(match_operand:QI 2 \"const_int_operand\" \"\")]\n+\t\t  [(match_operand:QI 2 \"const_int_operand\")]\n \t\t  UNSPEC_ZAP)\n-\t\t(match_operand:DI 1 \"const_int_operand\" \"\")))]\n+\t\t(match_operand:DI 1 \"const_int_operand\")))]\n   \"\"\n   [(const_int 0)]\n {\n@@ -5593,11 +5559,11 @@\n })\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(and:DI (unspec:DI\n-\t\t  [(match_operand:QI 2 \"const_int_operand\" \"\")]\n+\t\t  [(match_operand:QI 2 \"const_int_operand\")]\n \t\t  UNSPEC_ZAP)\n-\t\t(match_operand:DI 1 \"register_operand\" \"\")))]\n+\t\t(match_operand:DI 1 \"register_operand\")))]\n   \"\"\n   [(set (match_dup 0)\n \t(and:DI (match_dup 1) (match_dup 2)))]\n@@ -5616,11 +5582,11 @@\n })\n \n (define_expand \"builtin_zapnot\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(and:DI (unspec:DI\n-\t\t  [(not:QI (match_operand:DI 2 \"reg_or_cint_operand\" \"\"))]\n+\t\t  [(not:QI (match_operand:DI 2 \"reg_or_cint_operand\"))]\n \t\t  UNSPEC_ZAP)\n-\t\t(match_operand:DI 1 \"reg_or_cint_operand\" \"\")))]\n+\t\t(match_operand:DI 1 \"reg_or_cint_operand\")))]\n   \"\"\n {\n   if (CONST_INT_P (operands[2]))\n@@ -5680,9 +5646,9 @@\n   [(set_attr \"type\" \"ilog\")])\n \n (define_expand \"builtin_minub8\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_0_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"reg_or_0_operand\")\n+   (match_operand:DI 2 \"reg_or_0_operand\")]\n   \"TARGET_MAX\"\n {\n   alpha_expand_builtin_vector_binop (gen_uminv8qi3, V8QImode, operands[0],\n@@ -5691,9 +5657,9 @@\n })\n \n (define_expand \"builtin_minsb8\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_0_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"reg_or_0_operand\")\n+   (match_operand:DI 2 \"reg_or_0_operand\")]\n   \"TARGET_MAX\"\n {\n   alpha_expand_builtin_vector_binop (gen_sminv8qi3, V8QImode, operands[0],\n@@ -5702,9 +5668,9 @@\n })\n \n (define_expand \"builtin_minuw4\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_0_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"reg_or_0_operand\")\n+   (match_operand:DI 2 \"reg_or_0_operand\")]\n   \"TARGET_MAX\"\n {\n   alpha_expand_builtin_vector_binop (gen_uminv4hi3, V4HImode, operands[0],\n@@ -5713,9 +5679,9 @@\n })\n \n (define_expand \"builtin_minsw4\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_0_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"reg_or_0_operand\")\n+   (match_operand:DI 2 \"reg_or_0_operand\")]\n   \"TARGET_MAX\"\n {\n   alpha_expand_builtin_vector_binop (gen_sminv4hi3, V4HImode, operands[0],\n@@ -5724,9 +5690,9 @@\n })\n \n (define_expand \"builtin_maxub8\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_0_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"reg_or_0_operand\")\n+   (match_operand:DI 2 \"reg_or_0_operand\")]\n   \"TARGET_MAX\"\n {\n   alpha_expand_builtin_vector_binop (gen_umaxv8qi3, V8QImode, operands[0],\n@@ -5735,9 +5701,9 @@\n })\n \n (define_expand \"builtin_maxsb8\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_0_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"reg_or_0_operand\")\n+   (match_operand:DI 2 \"reg_or_0_operand\")]\n   \"TARGET_MAX\"\n {\n   alpha_expand_builtin_vector_binop (gen_smaxv8qi3, V8QImode, operands[0],\n@@ -5746,9 +5712,9 @@\n })\n \n (define_expand \"builtin_maxuw4\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_0_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"reg_or_0_operand\")\n+   (match_operand:DI 2 \"reg_or_0_operand\")]\n   \"TARGET_MAX\"\n {\n   alpha_expand_builtin_vector_binop (gen_umaxv4hi3, V4HImode, operands[0],\n@@ -5757,9 +5723,9 @@\n })\n \n (define_expand \"builtin_maxsw4\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_0_operand\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"reg_or_0_operand\")\n+   (match_operand:DI 2 \"reg_or_0_operand\")]\n   \"TARGET_MAX\"\n {\n   alpha_expand_builtin_vector_binop (gen_smaxv4hi3, V4HImode, operands[0],\n@@ -5777,10 +5743,10 @@\n   [(set_attr \"type\" \"mvi\")])\n \n (define_expand \"builtin_pklb\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(vec_concat:V8QI\n \t  (vec_concat:V4QI\n-\t    (truncate:V2QI (match_operand:DI 1 \"register_operand\" \"\"))\n+\t    (truncate:V2QI (match_operand:DI 1 \"register_operand\"))\n \t    (match_dup 2))\n \t  (match_dup 3)))]\n   \"TARGET_MAX\"\n@@ -5796,16 +5762,16 @@\n \t(vec_concat:V8QI\n \t  (vec_concat:V4QI\n \t    (truncate:V2QI (match_operand:V2SI 1 \"register_operand\" \"r\"))\n-\t    (match_operand:V2QI 2 \"const0_operand\" \"\"))\n-\t  (match_operand:V4QI 3 \"const0_operand\" \"\")))]\n+\t    (match_operand:V2QI 2 \"const0_operand\"))\n+\t  (match_operand:V4QI 3 \"const0_operand\")))]\n   \"TARGET_MAX\"\n   \"pklb %r1,%0\"\n   [(set_attr \"type\" \"mvi\")])\n \n (define_expand \"builtin_pkwb\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(vec_concat:V8QI\n-\t  (truncate:V4QI (match_operand:DI 1 \"register_operand\" \"\"))\n+\t  (truncate:V4QI (match_operand:DI 1 \"register_operand\"))\n \t  (match_dup 2)))]\n   \"TARGET_MAX\"\n {\n@@ -5818,15 +5784,15 @@\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=r\")\n \t(vec_concat:V8QI\n \t  (truncate:V4QI (match_operand:V4HI 1 \"register_operand\" \"r\"))\n-\t  (match_operand:V4QI 2 \"const0_operand\" \"\")))]\n+\t  (match_operand:V4QI 2 \"const0_operand\")))]\n   \"TARGET_MAX\"\n   \"pkwb %r1,%0\"\n   [(set_attr \"type\" \"mvi\")])\n \n (define_expand \"builtin_unpkbl\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(zero_extend:V2SI\n-\t  (vec_select:V2QI (match_operand:DI 1 \"register_operand\" \"\")\n+\t  (vec_select:V2QI (match_operand:DI 1 \"register_operand\")\n \t\t\t   (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_MAX\"\n {\n@@ -5844,9 +5810,9 @@\n   [(set_attr \"type\" \"mvi\")])\n \n (define_expand \"builtin_unpkbw\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(zero_extend:V4HI\n-\t  (vec_select:V4QI (match_operand:DI 1 \"register_operand\" \"\")\n+\t  (vec_select:V4QI (match_operand:DI 1 \"register_operand\")\n \t\t\t   (parallel [(const_int 0)\n \t\t\t\t      (const_int 1)\n \t\t\t\t      (const_int 2)\n@@ -5875,9 +5841,9 @@\n ;; wildcard operand0 interferes with nice recognition.\n \n (define_insn \"*call_value_osf_1_er_noreturn\"\n-  [(set (match_operand 0 \"\" \"\")\n+  [(set (match_operand 0)\n \t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"c,R,s\"))\n-\t      (match_operand 2 \"\" \"\")))\n+\t      (match_operand 2)))\n    (use (reg:DI 29))\n    (clobber (reg:DI 26))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\n@@ -5890,9 +5856,9 @@\n    (set_attr \"length\" \"*,*,8\")])\n \n (define_insn \"*call_value_osf_1_er\"\n-  [(set (match_operand 0 \"\" \"\")\n+  [(set (match_operand 0)\n \t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"c,R,s\"))\n-\t      (match_operand 2 \"\" \"\")))\n+\t      (match_operand 2)))\n    (use (reg:DI 29))\n    (clobber (reg:DI 26))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n@@ -5906,9 +5872,9 @@\n ;; We must use peep2 instead of a split because we need accurate life\n ;; information for $gp.  Consider the case of { bar(); while (1); }.\n (define_peephole2\n-  [(parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (mem:DI (match_operand:DI 1 \"call_operand\" \"\"))\n-\t\t         (match_operand 2 \"\" \"\")))\n+  [(parallel [(set (match_operand 0)\n+\t\t   (call (mem:DI (match_operand:DI 1 \"call_operand\"))\n+\t\t         (match_operand 2)))\n \t      (use (reg:DI 29))\n \t      (clobber (reg:DI 26))])]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF && reload_completed\n@@ -5939,9 +5905,9 @@\n })\n \n (define_peephole2\n-  [(parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (mem:DI (match_operand:DI 1 \"call_operand\" \"\"))\n-\t\t         (match_operand 2 \"\" \"\")))\n+  [(parallel [(set (match_operand 0)\n+\t\t   (call (mem:DI (match_operand:DI 1 \"call_operand\"))\n+\t\t         (match_operand 2)))\n \t      (use (reg:DI 29))\n \t      (clobber (reg:DI 26))])]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF && reload_completed\n@@ -5977,26 +5943,26 @@\n })\n \n (define_insn \"*call_value_osf_2_er_nogp\"\n-  [(set (match_operand 0 \"\" \"\")\n+  [(set (match_operand 0)\n \t(call (mem:DI (match_operand:DI 1 \"register_operand\" \"c\"))\n-\t      (match_operand 2 \"\" \"\")))\n+\t      (match_operand 2)))\n    (use (reg:DI 29))\n-   (use (match_operand 3 \"\" \"\"))\n-   (use (match_operand 4 \"\" \"\"))\n+   (use (match_operand 3))\n+   (use (match_operand 4))\n    (clobber (reg:DI 26))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"jsr $26,(%1),%3%J4\"\n   [(set_attr \"type\" \"jsr\")])\n \n (define_insn \"*call_value_osf_2_er\"\n-  [(set (match_operand 0 \"\" \"\")\n+  [(set (match_operand 0)\n \t(call (mem:DI (match_operand:DI 1 \"register_operand\" \"c\"))\n-\t      (match_operand 2 \"\" \"\")))\n+\t      (match_operand 2)))\n    (set (reg:DI 29)\n-\t(unspec:DI [(reg:DI 29) (match_operand 5 \"const_int_operand\" \"\")]\n+\t(unspec:DI [(reg:DI 29) (match_operand 5 \"const_int_operand\")]\n \t\t   UNSPEC_LDGP1))\n-   (use (match_operand 3 \"\" \"\"))\n-   (use (match_operand 4 \"\" \"\"))\n+   (use (match_operand 3))\n+   (use (match_operand 4))\n    (clobber (reg:DI 26))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"jsr $26,(%1),%3%J4\\;ldah $29,0($26)\\t\\t!gpdisp!%5\"\n@@ -6005,9 +5971,9 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"*call_value_osf_1_noreturn\"\n-  [(set (match_operand 0 \"\" \"\")\n+  [(set (match_operand 0)\n \t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"c,R,s\"))\n-\t      (match_operand 2 \"\" \"\")))\n+\t      (match_operand 2)))\n    (use (reg:DI 29))\n    (clobber (reg:DI 26))]\n   \"! TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\n@@ -6020,10 +5986,10 @@\n    (set_attr \"length\" \"*,*,8\")])\n \n (define_insn_and_split \"call_value_osf_tlsgd\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:DI (match_operand:DI 1 \"symbolic_operand\" \"\"))\n+  [(set (match_operand 0)\n+\t(call (mem:DI (match_operand:DI 1 \"symbolic_operand\"))\n \t      (const_int 0)))\n-   (unspec [(match_operand:DI 2 \"const_int_operand\" \"\")] UNSPEC_TLSGD_CALL)\n+   (unspec [(match_operand:DI 2 \"const_int_operand\")] UNSPEC_TLSGD_CALL)\n    (use (reg:DI 29))\n    (clobber (reg:DI 26))]\n   \"HAVE_AS_TLS\"\n@@ -6051,10 +6017,10 @@\n   [(set_attr \"type\" \"multi\")])\n \n (define_insn_and_split \"call_value_osf_tlsldm\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:DI (match_operand:DI 1 \"symbolic_operand\" \"\"))\n+  [(set (match_operand 0)\n+\t(call (mem:DI (match_operand:DI 1 \"symbolic_operand\"))\n \t      (const_int 0)))\n-   (unspec [(match_operand:DI 2 \"const_int_operand\" \"\")] UNSPEC_TLSLDM_CALL)\n+   (unspec [(match_operand:DI 2 \"const_int_operand\")] UNSPEC_TLSLDM_CALL)\n    (use (reg:DI 29))\n    (clobber (reg:DI 26))]\n   \"HAVE_AS_TLS\"\n@@ -6082,9 +6048,9 @@\n   [(set_attr \"type\" \"multi\")])\n \n (define_insn \"*call_value_osf_1\"\n-  [(set (match_operand 0 \"\" \"\")\n+  [(set (match_operand 0)\n \t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"c,R,s\"))\n-\t      (match_operand 2 \"\" \"\")))\n+\t      (match_operand 2)))\n    (use (reg:DI 29))\n    (clobber (reg:DI 26))]\n   \"! TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n@@ -6096,9 +6062,9 @@\n    (set_attr \"length\" \"12,*,16\")])\n \n (define_insn \"*sibcall_value_osf_1_er\"\n-  [(set (match_operand 0 \"\" \"\")\n+  [(set (match_operand 0)\n \t(call (mem:DI (match_operand:DI 1 \"symbolic_operand\" \"R,s\"))\n-\t      (match_operand 2 \"\" \"\")))\n+\t      (match_operand 2)))\n    (unspec [(reg:DI 29)] UNSPEC_SIBCALL)]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"@\n@@ -6108,9 +6074,9 @@\n    (set_attr \"length\" \"*,8\")])\n \n (define_insn \"*sibcall_value_osf_1\"\n-  [(set (match_operand 0 \"\" \"\")\n+  [(set (match_operand 0)\n \t(call (mem:DI (match_operand:DI 1 \"symbolic_operand\" \"R,s\"))\n-\t      (match_operand 2 \"\" \"\")))\n+\t      (match_operand 2)))\n    (unspec [(reg:DI 29)] UNSPEC_SIBCALL)]\n   \"! TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"@\n@@ -6123,9 +6089,9 @@\n ; to generate relocs for VMS link to potentially optimize the call.\n ; Please do not molest.\n (define_insn \"*call_value_vms_1\"\n-  [(set (match_operand 0 \"\" \"\")\n+  [(set (match_operand 0)\n \t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"r,s\"))\n-\t      (match_operand 2 \"\" \"\")))\n+\t      (match_operand 2)))\n    (use (match_operand:DI 3 \"nonmemory_operand\" \"r,n\"))\n    (use (reg:DI 25))\n    (use (reg:DI 26))"}, {"sha": "cdde72565061e32f4dc98599c0321a8b160d2ba3", "filename": "gcc/config/alpha/sync.md", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7159e6380c192ce45c8d1d8ca8bb9d5e68f02eaf/gcc%2Fconfig%2Falpha%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7159e6380c192ce45c8d1d8ca8bb9d5e68f02eaf/gcc%2Fconfig%2Falpha%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fsync.md?ref=7159e6380c192ce45c8d1d8ca8bb9d5e68f02eaf", "patch": "@@ -37,7 +37,7 @@\n })\n \n (define_insn \"*memory_barrier\"\n-  [(set (match_operand:BLK 0 \"\" \"\")\n+  [(set (match_operand:BLK 0)\n \t(unspec:BLK [(match_dup 0)] UNSPEC_MB))]\n   \"\"\n   \"mb\"\n@@ -71,18 +71,18 @@\n \n (define_expand \"atomic_compare_and_swap<mode>\"\n   [(parallel\n-     [(set (match_operand:DI 0 \"register_operand\" \"\")\t\t  ;; bool out\n+     [(set (match_operand:DI 0 \"register_operand\")\t  ;; bool out\n \t   (unspec_volatile:DI [(const_int 0)] UNSPECV_CMPXCHG))\n-      (set (match_operand:I48MODE 1 \"register_operand\" \"\")\t  ;; val out\n+      (set (match_operand:I48MODE 1 \"register_operand\")\t  ;; val out\n \t   (unspec_volatile:I48MODE [(const_int 0)] UNSPECV_CMPXCHG))\n-      (set (match_operand:I48MODE 2 \"memory_operand\" \"\")\t  ;; memory\n+      (set (match_operand:I48MODE 2 \"memory_operand\")\t  ;; memory\n \t   (unspec_volatile:I48MODE\n \t     [(match_dup 2)\n-\t      (match_operand:I48MODE 3 \"reg_or_8bit_operand\" \"\")  ;; expected\n-\t      (match_operand:I48MODE 4 \"add_operand\" \"\")\t  ;; desired\n-\t      (match_operand:SI 5 \"const_int_operand\" \"\")\t  ;; is_weak\n-\t      (match_operand:SI 6 \"const_int_operand\" \"\")\t  ;; succ model\n-\t      (match_operand:SI 7 \"const_int_operand\" \"\")]\t  ;; fail model\n+\t      (match_operand:I48MODE 3 \"reg_or_8bit_operand\")  ;; expected\n+\t      (match_operand:I48MODE 4 \"add_operand\")\t  ;; desired\n+\t      (match_operand:SI 5 \"const_int_operand\")\t  ;; is_weak\n+\t      (match_operand:SI 6 \"const_int_operand\")\t  ;; succ model\n+\t      (match_operand:SI 7 \"const_int_operand\")]\t  ;; fail model\n \t     UNSPECV_CMPXCHG))])]\n   \"\"\n {\n@@ -103,9 +103,9 @@\n \t  [(match_dup 2)\n \t   (match_operand:DI 3 \"reg_or_8bit_operand\" \"rI\")\t;; expected\n \t   (match_operand:DI 4 \"add_operand\" \"rKL\")\t\t;; desired\n-\t   (match_operand:SI 5 \"const_int_operand\" \"\")\t\t;; is_weak\n-\t   (match_operand:SI 6 \"const_int_operand\" \"\")\t\t;; succ model\n-\t   (match_operand:SI 7 \"const_int_operand\" \"\")]\t\t;; fail model\n+\t   (match_operand:SI 5 \"const_int_operand\")\t\t;; is_weak\n+\t   (match_operand:SI 6 \"const_int_operand\")\t\t;; succ model\n+\t   (match_operand:SI 7 \"const_int_operand\")]\t\t;; fail model\n \t  UNSPECV_CMPXCHG))]\n   \"\"\n   \"#\"\n@@ -118,14 +118,14 @@\n   [(set_attr \"type\" \"multi\")])\n \n (define_expand \"atomic_compare_and_swap<mode>\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\t\t\t;; bool out\n-   (match_operand:I12MODE 1 \"register_operand\" \"\")\t\t;; val out\n-   (match_operand:I12MODE 2 \"mem_noofs_operand\" \"\")\t\t;; memory\n-   (match_operand:I12MODE 3 \"register_operand\" \"\")\t\t;; expected\n-   (match_operand:I12MODE 4 \"add_operand\" \"\")\t\t\t;; desired\n-   (match_operand:SI 5 \"const_int_operand\" \"\")\t\t\t;; is_weak\n-   (match_operand:SI 6 \"const_int_operand\" \"\")\t\t\t;; succ model\n-   (match_operand:SI 7 \"const_int_operand\" \"\")]\t\t\t;; fail model\n+  [(match_operand:DI 0 \"register_operand\")\t\t;; bool out\n+   (match_operand:I12MODE 1 \"register_operand\")\t\t;; val out\n+   (match_operand:I12MODE 2 \"mem_noofs_operand\")\t;; memory\n+   (match_operand:I12MODE 3 \"register_operand\")\t\t;; expected\n+   (match_operand:I12MODE 4 \"add_operand\")\t\t;; desired\n+   (match_operand:SI 5 \"const_int_operand\")\t\t;; is_weak\n+   (match_operand:SI 6 \"const_int_operand\")\t\t;; succ model\n+   (match_operand:SI 7 \"const_int_operand\")]\t\t;; fail model\n   \"\"\n {\n   alpha_expand_compare_and_swap_12 (operands);\n@@ -144,9 +144,9 @@\n \t   (match_operand:DI 3 \"reg_or_8bit_operand\" \"rI\")\t;; expected\n \t   (match_operand:DI 4 \"reg_or_0_operand\" \"rJ\")\t\t;; desired\n \t   (match_operand:DI 5 \"register_operand\" \"r\")\t\t;; align\n-\t   (match_operand:SI 6 \"const_int_operand\" \"\")\t\t;; is_weak\n-\t   (match_operand:SI 7 \"const_int_operand\" \"\")\t\t;; succ model\n-\t   (match_operand:SI 8 \"const_int_operand\" \"\")]\t\t;; fail model\n+\t   (match_operand:SI 6 \"const_int_operand\")\t\t;; is_weak\n+\t   (match_operand:SI 7 \"const_int_operand\")\t\t;; succ model\n+\t   (match_operand:SI 8 \"const_int_operand\")]\t\t;; fail model\n \t  UNSPECV_CMPXCHG))\n    (clobber (match_scratch:DI 9 \"=&r\"))]\n   \"\"\n@@ -165,7 +165,7 @@\n    (set (match_dup 1)\n \t(unspec:I48MODE\n \t  [(match_operand:I48MODE 2 \"add_operand\" \"rKL\")\t;; input\n-\t   (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t;; model\n+\t   (match_operand:SI 3 \"const_int_operand\")]\t\t;; model\n \t  UNSPEC_XCHG))\n    (clobber (match_scratch:I48MODE 4 \"=&r\"))]\n   \"\"\n@@ -179,10 +179,10 @@\n   [(set_attr \"type\" \"multi\")])\n \n (define_expand \"atomic_exchange<mode>\"\n-  [(match_operand:I12MODE 0 \"register_operand\" \"\")\t\t;; output\n-   (match_operand:I12MODE 1 \"mem_noofs_operand\" \"\")\t\t;; memory\n-   (match_operand:I12MODE 2 \"reg_or_0_operand\" \"\")\t\t;; input\n-   (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t\t;; model\n+  [(match_operand:I12MODE 0 \"register_operand\")\t\t;; output\n+   (match_operand:I12MODE 1 \"mem_noofs_operand\")\t;; memory\n+   (match_operand:I12MODE 2 \"reg_or_0_operand\")\t\t;; input\n+   (match_operand:SI 3 \"const_int_operand\")]\t\t;; model\n   \"\"\n {\n   alpha_expand_atomic_exchange_12 (operands);\n@@ -197,7 +197,7 @@\n \t(unspec:I12MODE\n \t  [(match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\t;; input\n \t   (match_operand:DI 3 \"register_operand\" \"r\")\t\t;; align\n-\t   (match_operand:SI 4 \"const_int_operand\" \"\")]\t\t;; model\n+\t   (match_operand:SI 4 \"const_int_operand\")]\t\t;; model\n \t  UNSPEC_XCHG))\n    (clobber (match_scratch:DI 5 \"=&r\"))]\n   \"\"\n@@ -215,7 +215,7 @@\n \t(unspec:I48MODE\n \t  [(FETCHOP:I48MODE (match_dup 0)\n \t     (match_operand:I48MODE 1 \"<fetchop_pred>\" \"<fetchop_constr>\"))\n-\t   (match_operand:SI 2 \"const_int_operand\" \"\")]\n+\t   (match_operand:SI 2 \"const_int_operand\")]\n \t  UNSPEC_ATOMIC))\n    (clobber (match_scratch:I48MODE 3 \"=&r\"))]\n   \"\"\n@@ -236,7 +236,7 @@\n \t  [(not:I48MODE\n \t     (and:I48MODE (match_dup 0)\n \t       (match_operand:I48MODE 1 \"register_operand\" \"r\")))\n-\t   (match_operand:SI 2 \"const_int_operand\" \"\")]\n+\t   (match_operand:SI 2 \"const_int_operand\")]\n \t  UNSPEC_ATOMIC))\n    (clobber (match_scratch:I48MODE 3 \"=&r\"))]\n   \"\"\n@@ -258,7 +258,7 @@\n \t(unspec:I48MODE\n \t  [(FETCHOP:I48MODE (match_dup 1)\n \t     (match_operand:I48MODE 2 \"<fetchop_pred>\" \"<fetchop_constr>\"))\n-\t   (match_operand:SI 3 \"const_int_operand\" \"\")]\n+\t   (match_operand:SI 3 \"const_int_operand\")]\n \t  UNSPEC_ATOMIC))\n    (clobber (match_scratch:I48MODE 4 \"=&r\"))]\n   \"\"\n@@ -281,7 +281,7 @@\n \t  [(not:I48MODE\n \t     (and:I48MODE (match_dup 1)\n \t       (match_operand:I48MODE 2 \"register_operand\" \"r\")))\n-\t   (match_operand:SI 3 \"const_int_operand\" \"\")]\n+\t   (match_operand:SI 3 \"const_int_operand\")]\n \t  UNSPEC_ATOMIC))\n    (clobber (match_scratch:I48MODE 4 \"=&r\"))]\n   \"\"\n@@ -304,7 +304,7 @@\n    (set (match_dup 1)\n \t(unspec:I48MODE\n \t  [(FETCHOP:I48MODE (match_dup 1) (match_dup 2))\n-\t   (match_operand:SI 3 \"const_int_operand\" \"\")]\n+\t   (match_operand:SI 3 \"const_int_operand\")]\n \t  UNSPEC_ATOMIC))\n    (clobber (match_scratch:I48MODE 4 \"=&r\"))]\n   \"\"\n@@ -327,7 +327,7 @@\n    (set (match_dup 1)\n \t(unspec:I48MODE\n \t  [(not:I48MODE (and:I48MODE (match_dup 1) (match_dup 2)))\n-\t   (match_operand:SI 3 \"const_int_operand\" \"\")]\n+\t   (match_operand:SI 3 \"const_int_operand\")]\n \t  UNSPEC_ATOMIC))\n    (clobber (match_scratch:I48MODE 4 \"=&r\"))]\n   \"\""}]}