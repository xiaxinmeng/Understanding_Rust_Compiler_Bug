{"sha": "f9cc1a70d51e2874055417fd0153e4434f0d9d89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjljYzFhNzBkNTFlMjg3NDA1NTQxN2ZkMDE1M2U0NDM0ZjBkOWQ4OQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-07-21T07:24:34Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-07-21T07:24:34Z"}, "message": "re PR rtl-optimization/19210 (not using do-loop for some loops)\n\ngcc:\n2005-07-21  Paolo Bonzini  <bonzini@gnu.org>\n            Zdenek Dvorak  <dvorakz@suse.cz>\n\n\tPR tree-optimization/19210\n\t* common.opt (Wunsafe-loop-optimizations, funsafe-loop-optimizations):\n\tNew.\n\t* Makefile.in (tree-ssa-loop-niter.o): Depend intl.o.\n\t* loop-iv.c (get_simple_loop_desc): If -funsafe-loop-optimizations,\n\trely on unproven assumptions.\n\t* predict.c (predict_loops): Adjust call to number_of_iterations_exit.\n\t* tree-flow.h (number_of_iterations_exit): Add final parameter.\n\t* tree-scalar-evolution.c (number_of_iterations_in_loop): Adjust call\n\tto number_of_iterations_exit.\n\t* tree-ssa-loop-ivcanon.c (empty_loop_p): Likewise.\n\t* tree-ssa-loop-ivopts.c (niter_for_exit): Likewise.\n\t* tree-ssa-loop-niter.c (find_loop_niter,\n\testimate_numbers_of_iterations_loop): Likewise.\n\t(number_of_iterations_exit): Honor the new options.\n\t* doc/invoke.texi (Wunsafe-loop-optimizations,\n\tfunsafe-loop-optimizations): Document them.\n\ngcc/testsuite:\n2005-07-21  Paolo Bonzini  <bonzini@gnu.org>\n\n        * gcc.dg/tree-ssa/pr19210-1.c: New.\n        * gcc.dg/tree-ssa/pr19210-2.c: New.\n\nCo-Authored-By: Zdenek Dvorak <dvorakz@suse.cz>\n\nFrom-SVN: r102225", "tree": {"sha": "1ae11d72157fada15be9c9e63cd5c9c48811abca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ae11d72157fada15be9c9e63cd5c9c48811abca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9cc1a70d51e2874055417fd0153e4434f0d9d89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9cc1a70d51e2874055417fd0153e4434f0d9d89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9cc1a70d51e2874055417fd0153e4434f0d9d89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9cc1a70d51e2874055417fd0153e4434f0d9d89/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb83c2ec4187b1781ea17180267bcfe90f5e0e9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb83c2ec4187b1781ea17180267bcfe90f5e0e9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb83c2ec4187b1781ea17180267bcfe90f5e0e9c"}], "stats": {"total": 207, "additions": 193, "deletions": 14}, "files": [{"sha": "2777cbd60061b976aa55213f69926945ba8417ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9cc1a70d51e2874055417fd0153e4434f0d9d89", "patch": "@@ -1,3 +1,24 @@\n+2005-07-21  Paolo Bonzini  <bonzini@gnu.org>\n+            Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/19210\n+\t* common.opt (Wunsafe-loop-optimizations, funsafe-loop-optimizations):\n+\tNew.\n+\t* Makefile.in (tree-ssa-loop-niter.o): Depend intl.o.\n+\t* loop-iv.c (get_simple_loop_desc): If -funsafe-loop-optimizations,\n+\trely on unproven assumptions.\n+\t* predict.c (predict_loops): Adjust call to number_of_iterations_exit.\n+\t* tree-flow.h (number_of_iterations_exit): Add final parameter.\n+\t* tree-scalar-evolution.c (number_of_iterations_in_loop): Adjust call\n+\tto number_of_iterations_exit.\n+\t* tree-ssa-loop-ivcanon.c (empty_loop_p): Likewise.\n+\t* tree-ssa-loop-ivopts.c (niter_for_exit): Likewise.\n+\t* tree-ssa-loop-niter.c (find_loop_niter,\n+\testimate_numbers_of_iterations_loop): Likewise.\n+\t(number_of_iterations_exit): Honor the new options.\n+\t* doc/invoke.texi (Wunsafe-loop-optimizations,\n+\tfunsafe-loop-optimizations): Document them.\n+\n 2005-07-21  Richard Sandiford  <richard@codesourcery.com>\n \n \tPR rtl-optimization/22167"}, {"sha": "1cbdf68722fabbdbb4e3337570c7d3cb85fd14e5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f9cc1a70d51e2874055417fd0153e4434f0d9d89", "patch": "@@ -1869,7 +1869,7 @@ tree-ssa-loop-niter.o : tree-ssa-loop-niter.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) $(PARAMS_H) \\\n    tree-inline.h output.h $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n    $(FLAGS_H) tree-pass.h $(SCEV_H) $(TREE_DATA_REF_H) $(BASIC_BLOCK_H) \\\n-   $(GGC_H) hard-reg-set.h tree-chrec.h\n+   $(GGC_H) hard-reg-set.h tree-chrec.h intl.h\n tree-ssa-loop-ivcanon.o : tree-ssa-loop-ivcanon.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) $(PARAMS_H) \\\n    tree-inline.h output.h $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n@@ -2288,7 +2288,7 @@ cfgloopanal.o : cfgloopanal.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    $(OBSTACK_H) output.h\n loop-iv.o : loop-iv.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(BASIC_BLOCK_H) \\\n    hard-reg-set.h $(CFGLOOP_H) $(EXPR_H) coretypes.h $(TM_H) $(OBSTACK_H) \\\n-   output.h\n+   output.h intl.h\n loop-invariant.o : loop-invariant.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(EXPR_H) coretypes.h \\\n    $(TM_H) function.h $(FLAGS_H) $(DF_H) $(OBSTACK_H) output.h"}, {"sha": "cf138ee442e16139cc825437a4ecda549f35d22f", "filename": "gcc/common.opt", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=f9cc1a70d51e2874055417fd0153e4434f0d9d89", "patch": "@@ -93,6 +93,10 @@ Wlarger-than-\n Common RejectNegative Joined UInteger\n -Wlarger-than-<number>\tWarn if an object is larger than <number> bytes\n \n+Wunsafe-loop-optimizations\n+Common Var(warn_unsafe_loop_optimizations)\n+Warn if the loop cannot be optimized due to nontrivial assumptions.\n+\n Wmissing-noreturn\n Common Var(warn_missing_noreturn)\n Warn about functions which might be candidates for __attribute__((noreturn))\n@@ -402,6 +406,10 @@ fforce-mem\n Common Report Var(flag_force_mem)\n Copy memory operands into registers before use\n \n+fforward-propagate\n+Common Report Var(flag_forward_propagate)\n+Perform a forward propagation pass on RTL\n+\n ; Nonzero means don't put addresses of constant functions in registers.\n ; Used for compiling the Unix kernel, where strange substitutions are\n ; done on the assembly output.\n@@ -963,6 +971,13 @@ funroll-all-loops\n Common Report Var(flag_unroll_all_loops)\n Perform loop unrolling for all loops\n \n+; Nonzero means that loop optimizer may assume that the induction variables\n+; that control loops do not overflow and that the loops with nontrivial\n+; exit condition are not infinite\n+funsafe-loop-optimizations\n+Common Report Var(flag_unsafe_loop_optimizations)\n+Allow loop optimizations to assume that the loops behave in normal way\n+\n ; Nonzero means that unsafe floating-point math optimizations are allowed\n ; for the sake of speed.  IEEE compliance is not guaranteed, and operations\n ; are allowed to assume that their arguments and results are \"normal\""}, {"sha": "4685c636240384925b3a7eb4e81a97d17b06fb49", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f9cc1a70d51e2874055417fd0153e4434f0d9d89", "patch": "@@ -230,7 +230,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wimport  -Wno-import  -Winit-self  -Winline @gol\n -Wno-int-to-pointer-cast @gol\n -Wno-invalid-offsetof  -Winvalid-pch @gol\n--Wlarger-than-@var{len}  -Wlong-long @gol\n+-Wlarger-than-@var{len}  -Wunsafe-loop-optimizations  -Wlong-long @gol\n -Wmain  -Wmissing-braces  -Wmissing-field-initializers @gol\n -Wmissing-format-attribute  -Wmissing-include-dirs @gol\n -Wmissing-noreturn @gol\n@@ -311,7 +311,7 @@ Objective-C and Objective-C++ Dialects}.\n -fno-default-inline  -fno-defer-pop -floop-optimize2 -fmove-loop-invariants @gol\n -fno-function-cse  -fno-guess-branch-probability @gol\n -fno-inline  -fno-math-errno  -fno-peephole  -fno-peephole2 @gol\n--funsafe-math-optimizations  -ffinite-math-only @gol\n+-funsafe-math-optimizations  -funsafe-loop-optimizations  -ffinite-math-only @gol\n -fno-trapping-math  -fno-zero-initialized-in-bss @gol\n -fomit-frame-pointer  -foptimize-register-move @gol\n -foptimize-sibling-calls  -fprefetch-loop-arrays @gol\n@@ -2988,6 +2988,13 @@ global variable or whenever a built-in function is shadowed.\n @opindex Wlarger-than\n Warn whenever an object of larger than @var{len} bytes is defined.\n \n+@item -Wunsafe-loop-optimizations\n+@opindex Wunsafe-loop-optimizations\n+Warn if the loop cannot be optimized because the compiler could not\n+assume anything on the bounds of the loop indices.  With\n+@option{-funsafe-loop-optimizations} warn if the compiler made\n+such assumptions.\n+\n @item -Wpointer-arith\n @opindex Wpointer-arith\n Warn about anything that depends on the ``size of'' a function type or\n@@ -4728,6 +4735,15 @@ Perform loop optimizations using the new loop optimizer.  The optimizations\n (loop unrolling, peeling and unswitching, loop invariant motion) are enabled\n by separate flags.\n \n+@item -funsafe-loop-optimizations\n+@opindex funsafe-loop-optimizations\n+If given, the loop optimizer will assume that loop indices do not\n+overflow, and that the loops with nontrivial exit condition are not\n+infinite.  This enables a wider range of loop optimizations even if\n+the loop optimizer itself cannot prove that these assumptions are valid.\n+Using @option{-Wunsafe-loop-optimizations}, the compiler will warn you\n+if it finds this kind of loop.\n+\n @item -fcrossjumping\n @opindex crossjumping\n Perform cross-jumping transformation.  This transformation unifies equivalent code and save code size.  The"}, {"sha": "7c7a5de0a556eedd74cbf566c23bf79f9d738ece", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=f9cc1a70d51e2874055417fd0153e4434f0d9d89", "patch": "@@ -57,7 +57,9 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"basic-block.h\"\n #include \"cfgloop.h\"\n #include \"expr.h\"\n+#include \"intl.h\"\n #include \"output.h\"\n+#include \"toplev.h\"\n \n /* The insn information.  */\n \n@@ -2692,6 +2694,41 @@ get_simple_loop_desc (struct loop *loop)\n   find_simple_exit (loop, desc);\n   loop->aux = desc;\n \n+  if (desc->simple_p && (desc->assumptions || desc->infinite))\n+    {\n+      const char *wording; \n+\n+      /* Assume that no overflow happens and that the loop is finite.  \n+\t We already warned at the tree level if we ran optimizations there.  */\n+      if (!flag_tree_loop_optimize && warn_unsafe_loop_optimizations)\n+\t{\n+\t  if (desc->infinite)\n+\t    {\n+\t      wording = \n+\t\tflag_unsafe_loop_optimizations\n+\t\t? N_(\"assuming that the loop is not infinite\")\n+\t\t: N_(\"cannot optimize possibly infinite loops\");\n+\t      warning (OPT_Wunsafe_loop_optimizations, \"%s\",\n+\t\t       gettext (wording));\n+\t    }\n+\t  if (desc->assumptions)\n+\t    {\n+\t      wording = \n+\t\tflag_unsafe_loop_optimizations\n+\t\t? N_(\"assuming that the loop counter does not overflow\")\n+\t\t: N_(\"cannot optimize loop, the loop counter may overflow\");\n+\t      warning (OPT_Wunsafe_loop_optimizations, \"%s\",\n+\t\t       gettext (wording));\n+\t    }\n+\t}\n+\n+      if (flag_unsafe_loop_optimizations)\n+\t{\n+\t  desc->assumptions = NULL_RTX;\n+\t  desc->infinite = NULL_RTX;\n+\t}\n+    }\n+\n   return desc;\n }\n "}, {"sha": "9fc8f4501cc6cd56c4571ec2b44b0bd78c22dbac", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=f9cc1a70d51e2874055417fd0153e4434f0d9d89", "patch": "@@ -643,7 +643,7 @@ predict_loops (struct loops *loops_info, bool rtlsimpleloops)\n \t    {\n \t      tree niter = NULL;\n \n-\t      if (number_of_iterations_exit (loop, exits[j], &niter_desc))\n+\t      if (number_of_iterations_exit (loop, exits[j], &niter_desc, false))\n \t\tniter = niter_desc.niter;\n \t      if (!niter || TREE_CODE (niter_desc.niter) != INTEGER_CST)\n \t        niter = loop_niter_by_eval (loop, exits[j]);"}, {"sha": "7e4f35bd01c2bf75741b18a01011171d89925405", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9cc1a70d51e2874055417fd0153e4434f0d9d89", "patch": "@@ -1,3 +1,8 @@\n+2005-07-21  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * gcc.dg/tree-ssa/pr19210-1.c: New.\n+        * gcc.dg/tree-ssa/pr19210-2.c: New.\n+\n 2005-07-21  Richard Sandiford  <richard@codesourcery.com>\n \n \tPR rtl-optimization/22167"}, {"sha": "4d6100a86c9ead00ea83de6c66b93d30a8a988da", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr19210-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-1.c?ref=f9cc1a70d51e2874055417fd0153e4434f0d9d89", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wunsafe-loop-optimizations\" } */\n+extern void g(void);\n+\n+void\n+f (unsigned n)\n+{\n+  unsigned k;\n+  for(k = 0;k <= n;k++) /* { dg-warning \"cannot optimize.*infinite loops\" } */\n+    g();\n+\n+  for(k = 0;k <= n;k += 4) /* { dg-warning \"cannot optimize.*overflow\" } */\n+    g();\n+\n+  for(k = 5;k <= n;k += 5) /* { dg-warning \"cannot optimize.*overflow\" } */\n+    g();\n+\n+  for(k = 15;k >= n;k--) /* { dg-warning \"cannot optimize.*infinite\" } */\n+    g();\n+}"}, {"sha": "498c658897579bee505443cf572b98ed9bc33872", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr19210-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-2.c?ref=f9cc1a70d51e2874055417fd0153e4434f0d9d89", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -funsafe-loop-optimizations -Wunsafe-loop-optimizations\" } */\n+extern void g(void);\n+\n+void\n+f (unsigned n)\n+{\n+  unsigned k;\n+  for(k = 0;k <= n;k++) /* { dg-warning \"assuming.*not infinite\" } */\n+    g();\n+\n+  for(k = 5;k <= n;k += 4) /* { dg-warning \"assuming.*not overflow\" } */\n+    g();\n+\n+  for(k = 5;k <= n;k += 5) /* { dg-warning \"assuming.*not overflow\" } */\n+    g();\n+\n+  for(k = 15;k >= n;k--) /* { dg-warning \"assuming.*not infinite\" } */\n+    g();\n+\n+}"}, {"sha": "d41a79c1b72062baec637398ee5cf322df387eed", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=f9cc1a70d51e2874055417fd0153e4434f0d9d89", "patch": "@@ -722,7 +722,7 @@ void remove_empty_loops (struct loops *);\n void tree_ssa_iv_optimize (struct loops *);\n \n bool number_of_iterations_exit (struct loop *, edge,\n-\t\t\t\tstruct tree_niter_desc *niter);\n+\t\t\t\tstruct tree_niter_desc *niter, bool);\n tree find_loop_niter (struct loop *, edge *);\n tree loop_niter_by_eval (struct loop *, edge);\n tree find_loop_niter_by_eval (struct loop *, edge *);"}, {"sha": "f12ec09fc45220c844d195f29d0709abacf79e88", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=f9cc1a70d51e2874055417fd0153e4434f0d9d89", "patch": "@@ -2235,7 +2235,7 @@ number_of_iterations_in_loop (struct loop *loop)\n   if (!exit)\n     goto end;\n \n-  if (!number_of_iterations_exit (loop, exit, &niter_desc))\n+  if (!number_of_iterations_exit (loop, exit, &niter_desc, false))\n     goto end;\n \n   type = TREE_TYPE (niter_desc.niter);"}, {"sha": "e8a94d66e6ce3bb6dddbebeb649d5630216467c6", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=f9cc1a70d51e2874055417fd0153e4434f0d9d89", "patch": "@@ -393,7 +393,7 @@ empty_loop_p (struct loop *loop)\n     return false;\n \n   /* The loop must be finite.  */\n-  if (!number_of_iterations_exit (loop, exit, &niter))\n+  if (!number_of_iterations_exit (loop, exit, &niter, false))\n     return false;\n \n   /* Values of all loop exit phi nodes must be invariants.  */"}, {"sha": "fda17f9c56d74dd0379eb16a44fe91ec6428d0f7", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=f9cc1a70d51e2874055417fd0153e4434f0d9d89", "patch": "@@ -712,7 +712,8 @@ niter_for_exit (struct ivopts_data *data, edge exit)\n       nfe_desc = xmalloc (sizeof (struct nfe_cache_elt));\n       nfe_desc->exit = exit;\n       nfe_desc->valid_p = number_of_iterations_exit (data->current_loop,\n-\t\t\t\t\t\t     exit, &nfe_desc->niter);\n+\t\t\t\t\t\t     exit, &nfe_desc->niter,\n+\t\t\t\t\t\t     true);\n       *slot = nfe_desc;\n     }\n   else"}, {"sha": "891dc0c13d1fe34dddbc0e3a3bae707ab649ffe5", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9cc1a70d51e2874055417fd0153e4434f0d9d89/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=f9cc1a70d51e2874055417fd0153e4434f0d9d89", "patch": "@@ -29,6 +29,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"basic-block.h\"\n #include \"output.h\"\n #include \"diagnostic.h\"\n+#include \"intl.h\"\n #include \"tree-flow.h\"\n #include \"tree-dump.h\"\n #include \"cfgloop.h\"\n@@ -39,6 +40,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"tree-data-ref.h\"\n #include \"params.h\"\n #include \"flags.h\"\n+#include \"toplev.h\"\n #include \"tree-inline.h\"\n \n #define SWAP(X, Y) do { void *tmp = (X); (X) = (Y); (Y) = tmp; } while (0)\n@@ -906,11 +908,14 @@ simplify_using_outer_evolutions (struct loop *loop, tree expr)\n    EXIT (an exit edge of the LOOP) in NITER.  Returns true if some\n    useful information could be derived (and fields of NITER has\n    meaning described in comments at struct tree_niter_desc\n-   declaration), false otherwise.  */\n+   declaration), false otherwise.  If WARN is true and\n+   -Wunsafe-loop-optimizations was given, warn if the optimizer is going to use\n+   potentially unsafe assumptions.  */\n \n bool\n number_of_iterations_exit (struct loop *loop, edge exit,\n-\t\t\t   struct tree_niter_desc *niter)\n+\t\t\t   struct tree_niter_desc *niter,\n+\t\t\t   bool warn)\n {\n   tree stmt, cond, type;\n   tree op0, base0, step0;\n@@ -990,7 +995,45 @@ number_of_iterations_exit (struct loop *loop, edge exit,\n \t  = simplify_using_initial_conditions (loop,\n \t\t\t\t\t       niter->may_be_zero,\n \t\t\t\t\t       &niter->additional_info);\n-  return integer_onep (niter->assumptions);\n+\n+  if (integer_onep (niter->assumptions))\n+    return true;\n+\n+  /* With -funsafe-loop-optimizations we assume that nothing bad can happen.\n+     But if we can prove that there is overflow or some other source of weird\n+     behavior, ignore the loop even with -funsafe-loop-optimizations.  */\n+  if (integer_zerop (niter->assumptions))\n+    return false;\n+\n+  if (flag_unsafe_loop_optimizations)\n+    niter->assumptions = boolean_true_node;\n+\n+  if (warn)\n+    {\n+      const char *wording;\n+      location_t loc = EXPR_LOCATION (stmt);\n+  \n+      /* We can provide a more specific warning if one of the operator is\n+\t constant and the other advances by +1 or -1.  */\n+      if (step1 ? !step0 && (integer_onep (step1) || integer_all_onesp (step1))\n+\t  \t: step0 && (integer_onep (step0) || integer_all_onesp (step0)))\n+        wording =\n+          flag_unsafe_loop_optimizations\n+          ? N_(\"assuming that the loop is not infinite\")\n+          : N_(\"cannot optimize possibly infinite loops\");\n+      else\n+\twording = \n+\t  flag_unsafe_loop_optimizations\n+\t  ? N_(\"assuming that the loop counter does not overflow\")\n+\t  : N_(\"cannot optimize loop, the loop counter may overflow\");\n+\n+      if (LOCATION_LINE (loc) > 0)\n+\twarning (OPT_Wunsafe_loop_optimizations, \"%H%s\", &loc, gettext (wording));\n+      else\n+\twarning (OPT_Wunsafe_loop_optimizations, \"%s\", gettext (wording));\n+    }\n+\n+  return flag_unsafe_loop_optimizations;\n }\n \n /* Try to determine the number of iterations of LOOP.  If we succeed,\n@@ -1014,7 +1057,7 @@ find_loop_niter (struct loop *loop, edge *exit)\n       if (!just_once_each_iteration_p (loop, ex->src))\n \tcontinue;\n \n-      if (!number_of_iterations_exit (loop, ex, &desc))\n+      if (!number_of_iterations_exit (loop, ex, &desc, false))\n \tcontinue;\n \n       if (nonzero_p (desc.may_be_zero))\n@@ -1360,7 +1403,7 @@ estimate_numbers_of_iterations_loop (struct loop *loop)\n   exits = get_loop_exit_edges (loop, &n_exits);\n   for (i = 0; i < n_exits; i++)\n     {\n-      if (!number_of_iterations_exit (loop, exits[i], &niter_desc))\n+      if (!number_of_iterations_exit (loop, exits[i], &niter_desc, false))\n \tcontinue;\n \n       niter = niter_desc.niter;"}]}