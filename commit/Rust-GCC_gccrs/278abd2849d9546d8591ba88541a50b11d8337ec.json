{"sha": "278abd2849d9546d8591ba88541a50b11d8337ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc4YWJkMjg0OWQ5NTQ2ZDg1OTFiYTg4NTQxYTUwYjExZDgzMzdlYw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-02-08T00:23:09Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-02-08T00:23:09Z"}, "message": "jni.cc (ThrowableClass): New define.\n\n\t* jni.cc (ThrowableClass): New define.\n\t(_Jv_JNI_Throw): Check argument.\n\t(_Jv_JNI_ThrowNew): Likewise.\n\t(wrap_value): Don't wrap object if it is NULL.\n\t(_Jv_JNI_DefineClass): Use wrap_value.\n\t(_Jv_JNI_FindClass): Likewise.\n\t(_Jv_JNI_GetSuperclass): Likewise.\n\t(_Jv_JNI_ExceptionOccurred): Likewise.\n\t(_Jv_JNI_AllocObject): Likewise.\n\t(_Jv_JNI_GetObjectClass): Likewise.\n\t(_Jv_JNI_NewString): Likewise.\n\t(_Jv_JNI_NewStringUTF): Likewise.\n\t(_Jv_JNI_NewObjectArray): Likewise.\n\t(_Jv_JNI_GetObjectArrayElement): Likewise.\n\t(_Jv_JNI_NewPrimitiveArray): Likewise.\n\t(_Jv_JNI_ToReflectedField): Likewise.\n\t(_Jv_JNI_ToReflectedMethod): Likewise.\n\t(_Jv_JNI_AllocObject): Check argument.\n\t(_Jv_JNI_NewObjectV): Likewise.\n\t(_Jv_JNI_NewObject): Likewise.\n\t(_Jv_JNI_NewObjectA): Likewise.\n\t(_Jv_JNI_GetObjectClass): Likewise.\n\t(_Jv_JNI_GetField): Likewise.\n\t(_Jv_JNI_SetField): Likewise.\n\nFrom-SVN: r31845", "tree": {"sha": "36a4de052d1136e78dd63b533c3aaf776d2df3b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36a4de052d1136e78dd63b533c3aaf776d2df3b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/278abd2849d9546d8591ba88541a50b11d8337ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/278abd2849d9546d8591ba88541a50b11d8337ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/278abd2849d9546d8591ba88541a50b11d8337ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/278abd2849d9546d8591ba88541a50b11d8337ec/comments", "author": null, "committer": null, "parents": [{"sha": "7c51d9fb95c7be54dedf3def0e3186e8f6628712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c51d9fb95c7be54dedf3def0e3186e8f6628712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c51d9fb95c7be54dedf3def0e3186e8f6628712"}], "stats": {"total": 75, "additions": 60, "deletions": 15}, "files": [{"sha": "471b81fd7017fba5bca3c1b4170d75d41fc6f128", "filename": "libjava/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278abd2849d9546d8591ba88541a50b11d8337ec/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278abd2849d9546d8591ba88541a50b11d8337ec/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=278abd2849d9546d8591ba88541a50b11d8337ec", "patch": "@@ -1,5 +1,30 @@\n 2000-02-07  Tom Tromey  <tromey@cygnus.com>\n \n+\t* jni.cc (ThrowableClass): New define.\n+\t(_Jv_JNI_Throw): Check argument.\n+\t(_Jv_JNI_ThrowNew): Likewise.\n+\t(wrap_value): Don't wrap object if it is NULL.\n+\t(_Jv_JNI_DefineClass): Use wrap_value.\n+\t(_Jv_JNI_FindClass): Likewise.\n+\t(_Jv_JNI_GetSuperclass): Likewise.\n+\t(_Jv_JNI_ExceptionOccurred): Likewise.\n+\t(_Jv_JNI_AllocObject): Likewise.\n+\t(_Jv_JNI_GetObjectClass): Likewise.\n+\t(_Jv_JNI_NewString): Likewise.\n+\t(_Jv_JNI_NewStringUTF): Likewise.\n+\t(_Jv_JNI_NewObjectArray): Likewise.\n+\t(_Jv_JNI_GetObjectArrayElement): Likewise.\n+\t(_Jv_JNI_NewPrimitiveArray): Likewise.\n+\t(_Jv_JNI_ToReflectedField): Likewise.\n+\t(_Jv_JNI_ToReflectedMethod): Likewise.\n+\t(_Jv_JNI_AllocObject): Check argument.\n+\t(_Jv_JNI_NewObjectV): Likewise.\n+\t(_Jv_JNI_NewObject): Likewise.\n+\t(_Jv_JNI_NewObjectA): Likewise.\n+\t(_Jv_JNI_GetObjectClass): Likewise.\n+\t(_Jv_JNI_GetField): Likewise.\n+\t(_Jv_JNI_SetField): Likewise.\n+\n \t* interpret.cc (PUSHL): Don't use expression statement.\n \t(PUSHD): Likewise.\n \t(LOADL): Likewise."}, {"sha": "b6728e5ab8622d6a8cdfffe098e49a4db55fb953", "filename": "libjava/jni.cc", "status": "modified", "additions": 35, "deletions": 15, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278abd2849d9546d8591ba88541a50b11d8337ec/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278abd2849d9546d8591ba88541a50b11d8337ec/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=278abd2849d9546d8591ba88541a50b11d8337ec", "patch": "@@ -47,6 +47,8 @@ extern java::lang::Class ClassClass;\n #define ObjectClass _CL_Q34java4lang6Object\n extern java::lang::Class ObjectClass;\n \n+#define ThrowableClass _CL_Q34java4lang9Throwable\n+extern java::lang::Class ThrowableClass;\n #define MethodClass _CL_Q44java4lang7reflect6Method\n extern java::lang::Class MethodClass;\n \n@@ -278,7 +280,7 @@ template<>\n static jobject\n wrap_value (JNIEnv *env, jobject value)\n {\n-  return _Jv_JNI_NewLocalRef (env, value);\n+  return value == NULL ? value : _Jv_JNI_NewLocalRef (env, value);\n }\n \n \f\n@@ -302,7 +304,7 @@ _Jv_JNI_DefineClass (JNIEnv *env, jobject loader,\n \n   // FIXME: exception processing.\n   jclass result = l->defineClass (bytes, 0, bufLen);\n-  return (jclass) _Jv_JNI_NewLocalRef (env, result);\n+  return (jclass) wrap_value (env, result);\n }\n \n static jclass\n@@ -328,13 +330,13 @@ _Jv_JNI_FindClass (JNIEnv *env, const char *name)\n   // FIXME: exception processing.\n   jclass r = loader->findClass (n);\n \n-  return (jclass) _Jv_JNI_NewLocalRef (env, r);\n+  return (jclass) wrap_value (env, r);\n }\n \n static jclass\n _Jv_JNI_GetSuperclass (JNIEnv *env, jclass clazz)\n {\n-  return (jclass) _Jv_JNI_NewLocalRef (env, clazz->getSuperclass ());\n+  return (jclass) wrap_value (env, clazz->getSuperclass ());\n }\n \n static jboolean\n@@ -346,6 +348,8 @@ _Jv_JNI_IsAssignableFrom(JNIEnv *, jclass clazz1, jclass clazz2)\n static jint\n _Jv_JNI_Throw (JNIEnv *env, jthrowable obj)\n {\n+  // We check in case the user did some funky cast.\n+  JvAssert (obj != NULL && (&ThrowableClass)->isInstance (obj));\n   env->ex = obj;\n   return 0;\n }\n@@ -355,6 +359,8 @@ _Jv_JNI_ThrowNew (JNIEnv *env, jclass clazz, const char *message)\n {\n   using namespace java::lang::reflect;\n \n+  JvAssert ((&ThrowableClass)->isAssignableFrom (clazz));\n+\n   JArray<jclass> *argtypes\n     = (JArray<jclass> *) JvNewObjectArray (1, &ClassClass, NULL);\n \n@@ -378,7 +384,7 @@ _Jv_JNI_ThrowNew (JNIEnv *env, jclass clazz, const char *message)\n static jthrowable\n _Jv_JNI_ExceptionOccurred (JNIEnv *env)\n {\n-  return (jthrowable) _Jv_JNI_NewLocalRef (env, env->ex);\n+  return (jthrowable) wrap_value (env, env->ex);\n }\n \n static void\n@@ -419,6 +425,8 @@ _Jv_JNI_AllocObject (JNIEnv *env, jclass clazz)\n {\n   jobject obj = NULL;\n   using namespace java::lang::reflect;\n+\n+  JvAssert (clazz && ! clazz->isArray ());\n   if (clazz->isInterface() || Modifier::isAbstract(clazz->getModifiers()))\n     env->ex = new java::lang::InstantiationException ();\n   else\n@@ -428,13 +436,14 @@ _Jv_JNI_AllocObject (JNIEnv *env, jclass clazz)\n       obj = JvAllocObject (clazz);\n     }\n \n-  return _Jv_JNI_NewLocalRef (env, obj);\n+  return wrap_value (env, obj);\n }\n \n static jclass\n _Jv_JNI_GetObjectClass (JNIEnv *env, jobject obj)\n {\n-  return (jclass) _Jv_JNI_NewLocalRef (env, obj->getClass());\n+  JvAssert (obj);\n+  return (jclass) wrap_value (env, obj->getClass());\n }\n \n static jboolean\n@@ -784,13 +793,20 @@ static jobject\n _Jv_JNI_NewObjectV (JNIEnv *env, jclass klass,\n \t\t    jmethodID id, va_list args)\n {\n+  JvAssert (klass && ! klass->isArray ());\n+  JvAssert (! strcmp (id->name->data, \"<init>\")\n+\t    && ! strcmp (id->signature->data, \"()V\"));\n   return _Jv_JNI_CallAnyMethodV<jobject, constructor> (env, NULL, klass,\n \t\t\t\t\t\t       id, args);\n }\n \n static jobject\n _Jv_JNI_NewObject (JNIEnv *env, jclass klass, jmethodID id, ...)\n {\n+  JvAssert (klass && ! klass->isArray ());\n+  JvAssert (! strcmp (id->name->data, \"<init>\")\n+\t    && ! strcmp (id->signature->data, \"()V\"));\n+\n   va_list args;\n   jobject result;\n \n@@ -806,6 +822,9 @@ static jobject\n _Jv_JNI_NewObjectA (JNIEnv *env, jclass klass, jmethodID id,\n \t\t    jvalue *args)\n {\n+  JvAssert (klass && ! klass->isArray ());\n+  JvAssert (! strcmp (id->name->data, \"<init>\")\n+\t    && ! strcmp (id->signature->data, \"()V\"));\n   return _Jv_JNI_CallAnyMethodA<jobject, constructor> (env, NULL, klass,\n \t\t\t\t\t\t       id, args);\n }\n@@ -816,6 +835,7 @@ template<typename T>\n static T\n _Jv_JNI_GetField (JNIEnv *env, jobject obj, jfieldID field) \n {\n+  JvAssert (obj);\n   T *ptr = (T *) ((char *) obj + field->getOffset ());\n   return wrap_value (env, *ptr);\n }\n@@ -824,6 +844,7 @@ template<typename T>\n static void\n _Jv_JNI_SetField (JNIEnv *, jobject obj, jfieldID field, T value)\n {\n+  JvAssert (obj);\n   T *ptr = (T *) ((char *) obj + field->getOffset ());\n   *ptr = value;\n }\n@@ -900,7 +921,7 @@ _Jv_JNI_NewString (JNIEnv *env, const jchar *unichars, jsize len)\n {\n   // FIXME: exception processing.\n   jstring r = _Jv_NewString (unichars, len);\n-  return (jstring) _Jv_JNI_NewLocalRef (env, r);\n+  return (jstring) wrap_value (env, r);\n }\n \n static jsize\n@@ -930,7 +951,7 @@ _Jv_JNI_NewStringUTF (JNIEnv *env, const char *bytes)\n {\n   // FIXME: exception processing.\n   jstring result = JvNewStringUTF (bytes);\n-  return (jstring) _Jv_JNI_NewLocalRef (env, result);\n+  return (jstring) wrap_value (env, result);\n }\n \n static jsize\n@@ -1010,14 +1031,14 @@ _Jv_JNI_NewObjectArray (JNIEnv *env, jsize length, jclass elementClass,\n {\n   // FIXME: exception processing.\n   jarray result = JvNewObjectArray (length, elementClass, init);\n-  return (jarray) _Jv_JNI_NewLocalRef (env, result);\n+  return (jarray) wrap_value (env, result);\n }\n \n static jobject\n _Jv_JNI_GetObjectArrayElement (JNIEnv *env, jobjectArray array, jsize index)\n {\n   jobject *elts = elements (array);\n-  return _Jv_JNI_NewLocalRef (env, elts[index]);\n+  return wrap_value (env, elts[index]);\n }\n \n static void\n@@ -1035,8 +1056,7 @@ static JArray<T> *\n _Jv_JNI_NewPrimitiveArray (JNIEnv *env, jsize length)\n {\n   // FIXME: exception processing.\n-  return (JArray<T> *) _Jv_JNI_NewLocalRef (env,\n-\t\t\t\t\t    _Jv_NewPrimArray (K, length));\n+  return (JArray<T> *) wrap_value (env, _Jv_NewPrimArray (K, length));\n }\n \n template<typename T>\n@@ -1145,7 +1165,7 @@ _Jv_JNI_ToReflectedField (JNIEnv *env, jclass cls, jfieldID fieldID,\n   field->declaringClass = cls;\n   field->offset = (char*) fieldID - (char *) cls->fields;\n   field->name = _Jv_NewStringUtf8Const (fieldID->getNameUtf8Const (cls));\n-  return _Jv_JNI_NewLocalRef (env, field);\n+  return wrap_value (env, field);\n }\n \n // JDK 1.2\n@@ -1184,7 +1204,7 @@ _Jv_JNI_ToReflectedMethod (JNIEnv *env, jclass klass, jmethodID id,\n       result = meth;\n     }\n \n-  return _Jv_JNI_NewLocalRef (env, result);\n+  return wrap_value (env, result);\n }\n \n static jmethodID"}]}