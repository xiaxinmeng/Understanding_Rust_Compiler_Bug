{"sha": "a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdhYjM3OTRhOTk2N2JhMWFlZGVjYWNkYmI0Y2I3MDBkY2IwM2ZiYg==", "commit": {"author": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-04-26T16:06:37Z"}, "committer": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-04-26T16:06:37Z"}, "message": "Runtime portability cleanup\n\nFrom-SVN: r4235", "tree": {"sha": "c0e8d76217f1bf8d5b9e3c90ec680a116ee5c4c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0e8d76217f1bf8d5b9e3c90ec680a116ee5c4c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/comments", "author": null, "committer": null, "parents": [{"sha": "0cd02cbbfb635002ecd371f79243933fc34b1f47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd02cbbfb635002ecd371f79243933fc34b1f47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cd02cbbfb635002ecd371f79243933fc34b1f47"}], "stats": {"total": 98, "additions": 53, "deletions": 45}, "files": [{"sha": "2f38a256f230da1abac01ecb1460aa7dff528eec", "filename": "gcc/objc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMakefile.in?ref=a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "patch": "@@ -29,7 +29,7 @@\n .SUFFIXES: .m\n \n OPTIMIZE= -O\n-CFLAGS = $(GCC_CFLAGS) -DIN_OBJC\n+CFLAGS = $(GCC_CFLAGS) \n \n VPATH = $(srcdir)/objc\n "}, {"sha": "dd27f2d8316fe4a41456d4cc12fcb84acecb841e", "filename": "gcc/objc/Object.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2FObject.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2FObject.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FObject.m?ref=a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "patch": "@@ -105,7 +105,7 @@ - (const char *)name\n \n - (unsigned int)hash\n {\n-  return (unsigned int)self;\n+  return (size_t)self;\n }\n \n - (BOOL)isEqual:anObject\n@@ -290,8 +290,8 @@ - (Class_t)transmuteClassTo:(Class_t)aClassObject\n - error:(const char *)aString, ...\n {\n #define FMT \"error: %s (%s)\\n%s\\n\"\n-  char fmt[(strlen(FMT)+strlen(object_get_class_name(self))\n-            +((aString!=NULL)?strlen(aString):0)+8)];\n+  char fmt[(strlen((char*)FMT)+strlen((char*)object_get_class_name(self))\n+            +((aString!=NULL)?strlen((char*)aString):0)+8)];\n   va_list ap;\n \n   sprintf(fmt, FMT, object_get_class_name(self),"}, {"sha": "77cc4f0e23963f629df5710bdf8824d2206fd4f7", "filename": "gcc/objc/archive.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Farchive.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Farchive.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Farchive.c?ref=a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "patch": "@@ -369,8 +369,8 @@ __objc_write_class (struct objc_typed_stream* stream, struct objc_class* class)\n {\n   __objc_write_extension (stream, _BX_CLASS);\n   objc_write_string_atomic(stream, (char*)class->name,\n-\t\t\t   strlen(class->name));\n-  objc_write_unsigned_int (stream, CLS_GETNUMBER(class));\n+\t\t\t   strlen((char*)class->name));\n+  return objc_write_unsigned_int (stream, CLS_GETNUMBER(class));\n }\n \n \n@@ -397,7 +397,7 @@ __objc_write_selector (struct objc_typed_stream* stream, SEL selector)\n {\n   const char* sel_name = sel_get_name (selector);\n   __objc_write_extension (stream, _BX_SEL);\n-  return objc_write_string (stream, sel_name, strlen(sel_name));\n+  return objc_write_string (stream, sel_name, strlen ((char*)sel_name));\n }\n \n int \n@@ -1303,6 +1303,7 @@ __objc_read_typed_stream_signature (TypedStream* stream)\n   sscanf (buffer, \"GNU TypedStream %d\", &stream->version);\n   if (stream->version != OBJC_TYPED_STREAM_VERSION)\n     __objc_fatal (\"cannot handle TypedStream version %d\", stream->version);\n+  return 1;\n }\n \n static int\n@@ -1312,6 +1313,7 @@ __objc_write_typed_stream_signature (TypedStream* stream)\n   sprintf(buffer, \"GNU TypedStream %d\", OBJC_TYPED_STREAM_VERSION);\n   stream->version = OBJC_TYPED_STREAM_VERSION;\n   (*stream->write)(stream->physical, buffer, strlen(buffer)+1);\n+  return 1;\n }\n \n static void __objc_finish_write_root_object(struct objc_typed_stream* stream)"}, {"sha": "87ebf258bec9dbded22edae1d62af687577626db", "filename": "gcc/objc/class.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fclass.c?ref=a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "patch": "@@ -139,7 +139,6 @@ objc_get_class (const char *name)\n void __objc_resolve_class_links()\n {\n   node_ptr node;\n-  Class_t class1;\n   Class_t object_class = objc_get_class (\"Object\");\n \n   assert(object_class);\n@@ -230,8 +229,7 @@ class_pose_as (Class_t impostor, Class_t super_class)\n   Class_t new_class = (Class_t) calloc (1, sizeof (Class));\n   MetaClass_t new_meta_class =\n     (MetaClass_t) __objc_xmalloc(sizeof (MetaClass));\n-  node_ptr node;\n-  char *new_name = (char *)__objc_xmalloc (strlen (super_class->name) + 12);\n+  char *new_name = (char *)__objc_xmalloc ((size_t)strlen ((char*)super_class->name) + 12);\n \n   /* We must know the state of the hierachy.  Do initial setup if needed */\n   if(!CLS_ISRESOLV(impostor))"}, {"sha": "294d87bfdf6ef5c7a3ef5faaf2e06a1866a1ced8", "filename": "gcc/objc/hash.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fhash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fhash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fhash.c?ref=a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "patch": "@@ -45,7 +45,6 @@ hash_new (unsigned int size, hash_func_type hash_func,\n {\n   cache_ptr cache;\n \n-\n   /* Pass me a value greater than 0 and a power of 2.  */\n   assert (size);\n   assert (!(size & (size - 1)));\n@@ -84,7 +83,7 @@ hash_delete (cache_ptr cache)\n \n \n   /* Purge all key/value pairs from the table.  */\n-  while (node = hash_next (cache, NULL))\n+  while ((node = hash_next (cache, NULL)))\n     hash_remove (cache, node->key);\n \n   /* Release the array of nodes and the cache itself.  */\n@@ -145,7 +144,7 @@ hash_add (cache_ptr *cachep, const void *key, void *value)\n \t\t  *cachep, (*cachep)->size, new->size);\n \n     /* Copy the nodes from the first hash table to the new one.  */\n-    while (node1 = hash_next (*cachep, node1))\n+    while ((node1 = hash_next (*cachep, node1)))\n       hash_add (&new, node1->key, node1->value);\n \n     /* Trash the old cache.  */"}, {"sha": "2c6ff126268504ada5817458258a075f9f5dede4", "filename": "gcc/objc/hash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fhash.h?ref=a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "patch": "@@ -27,7 +27,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #ifndef __hash_INCLUDE_GNU\n #define __hash_INCLUDE_GNU\n \n-#ifdef IN_OBJC\n+#ifdef IN_GCC\n #include \"gstddef.h\"\n #else\n #include <stddef.h>"}, {"sha": "c42715cdebf779093775479ae5fad8038f8c4798", "filename": "gcc/objc/init.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Finit.c?ref=a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "patch": "@@ -66,9 +66,6 @@ __objc_exec_class (Module_t module)\n   /* The symbol table (defined in objc.h) generated by gcc */\n   Symtab_t symtab = module->symtab;\n \n-  /* Pointer to the class Object class object */\n-  Class_t object_class;\n-\n   /* Entry used to traverse hash lists */\n   struct objc_list** cell;\n \n@@ -166,7 +163,7 @@ __objc_exec_class (Module_t module)\n      categories to objects.  */\n   for (cell = &unclaimed_categories;\n        *cell;\n-       *cell && (cell = &(*cell)->tail))\n+       *cell && ((cell = &(*cell)->tail)))\n     {\n       Category_t category = (*cell)->head;\n       Class_t class = objc_lookup_class (category->class_name);\n@@ -247,7 +244,7 @@ __objc_init_protocols (struct objc_protocol_list* protos)\n \t{\n \t  fprintf (stderr,\n \t\t   \"Version %d doesn't protocol version %d\\n\",\n-\t\t   ((int)((id)protos->list[i])->class_pointer),\n+\t\t   ((size_t)((id)protos->list[i])->class_pointer),\n \t\t   PROTOCOL_VERSION);\n \t  abort ();\n \t}\n@@ -257,11 +254,6 @@ __objc_init_protocols (struct objc_protocol_list* protos)\n static void __objc_class_add_protocols (Class_t class,\n \t\t\t\t\tstruct objc_protocol_list* protos)\n {\n-#ifndef NeXT_OBJC\t\t/* force class Protocol to be linked in */\n-  extern char* __objc_class_name_Protocol;\n-  char* x = __objc_class_name_Protocol;\n-#endif\n-\n   /* Well... */\n   if (! protos)\n     return;"}, {"sha": "54bd6a29ce9eb9a5968fe97d0275e937a6773b58", "filename": "gcc/objc/misc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fmisc.c?ref=a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "patch": "@@ -43,7 +43,7 @@ objc_error(id object, const char* fmt, va_list ap)\n volatile void\n objc_fatal(const char* msg)\n {\n-  write(2, msg, strlen(msg));\n+  write(2, msg, (size_t)strlen((char*)msg));\n   abort();\n }\n "}, {"sha": "8a0370f0491c52a2ed31c170f9b6c2fb8a30f45b", "filename": "gcc/objc/objc-api.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-api.h?ref=a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "patch": "@@ -28,7 +28,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #include \"objc/objc.h\"\n #include \"objc/hash.h\"\n-\n+#include <memory.h>\n \n static const ARGSIZE = 96;\t\t/* for `method_get_argsize()' */\n \n@@ -154,7 +154,7 @@ object_copy(id object)\n         {\n           id copy = class_create_instance(object->class_pointer);\n           if (copy!=nil)\n-            bcopy(object, copy, object->class_pointer->instance_size);\n+            memcpy(copy, object, (size_t)object->class_pointer->instance_size);\n           return copy;\n         }\n       return nil;"}, {"sha": "c06a0135962ebe1c6c8356490319bef279c9a5fc", "filename": "gcc/objc/objc.h", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fobjc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fobjc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc.h?ref=a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "patch": "@@ -26,6 +26,18 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #ifndef __objc_INCLUDE_GNU\n #define __objc_INCLUDE_GNU\n \n+#ifdef IN_GCC\n+#include \"config.h\"\n+#include \"gstddef.h\"\n+#else\n+#include <stddef.h>\n+#endif\n+\n+extern size_t strlen(char*);\n+extern void* malloc(size_t);\n+extern void* calloc(size_t, size_t);\n+extern void* realloc(const void*, size_t);\n+extern void free(const void*);\n \n /*\n ** Hash-cache or sparse arrays?\n@@ -43,7 +55,7 @@ extern const char* __objc_hash_lookup_id;\n \n \n #include <stdio.h>\n-#ifdef IN_OBJC\n+#ifdef IN_GCC\n #include <gstdarg.h>\n #else\n #include <stdarg.h>\n@@ -290,7 +302,7 @@ struct objc_class {\n                                                 Object. */\n   const char*         name;                   /* Name of the class. */\n   long                version;                /* Unknown. */\n-  long                info;                   /* Bit mask.  See class masks \n+  unsigned long       info;                   /* Bit mask.  See class masks \n                                                 defined above. */\n   long                instance_size;          /* Size in bytes of the class.  \n                                                 The sum of the class definition \n@@ -388,7 +400,7 @@ struct objc_protocol_list {\n #define CLS_GETNUMBER(cls) (__CLS_INFO(cls) >> (HOST_BITS_PER_LONG/2))\n #define CLS_SETNUMBER(cls, num) \\\n   ({ assert(CLS_GETNUMBER(cls)==0); \\\n-     __CLS_SETINFO(cls, ((num) << (HOST_BITS_PER_LONG/2))); })\n+     __CLS_SETINFO(cls, (((unsigned long)num) << (HOST_BITS_PER_LONG/2))); })\n \n /*\n ** The compiler generates one of these structures for each category.  A class"}, {"sha": "5463f6eeb1915215d295438bba4ed5c873d590d0", "filename": "gcc/objc/objects.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fobjects.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fobjects.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjects.c?ref=a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "patch": "@@ -68,7 +68,7 @@ id __objc_object_dispose(id object)\n id __objc_object_copy(id object)\n {\n   id copy = class_create_instance(object->class_pointer);\n-  bcopy(object, copy, object->class_pointer->instance_size);\n+  memcpy(copy, object, object->class_pointer->instance_size);\n   return copy;\n }\n "}, {"sha": "e61d4d230b9b2368d29d3d7c3fe68c9f30d4d7e7", "filename": "gcc/objc/runtime.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fruntime.h?ref=a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "patch": "@@ -27,7 +27,9 @@ You should have received a copy of the GNU General Public License along with\n #ifndef __objc_runtime_INCLUDE_GNU\n #define __objc_runtime_INCLUDE_GNU\n \n-#include <stdio.h>\t\t/* argh! I hate this */\n+#include <stdio.h>\n+#include <memory.h>\n+#include <ctype.h>\n \n #include \"gstdarg.h\"\t\t/* for varargs and va_list's */\n #include \"gstddef.h\"\t\t/* so noone else will get system versions */\n@@ -47,6 +49,7 @@ extern void __objc_install_premature_dtable(Class_t); /* (objc-dispatch.c) */\n extern void __objc_resolve_class_links(); /* (objc-class.c) */\n extern void __objc_register_selectors_from_class(Class_t); /* (objc-sel.c) */\n extern void __objc_update_dispatch_table_for_class (Class_t);/* (objc-msg.c) */\n+extern void class_add_method_list(Class_t, MethodList_t);\n \n /* True when class links has been resolved */     \n extern BOOL __objc_class_links_resolved;"}, {"sha": "0dd584a50b752e6ce29bc8133779137be04f6e6c", "filename": "gcc/objc/sarray.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fsarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fsarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fsarray.c?ref=a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "patch": "@@ -26,6 +26,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"objc/sarray.h\"\n #include <stdio.h>\n #include \"assert.h\"\n+#include <memory.h>\n \n int nbuckets = 0;\n int nindices = 0;\n@@ -43,7 +44,9 @@ const char* __objc_sparse3_id = \"3 level sparse indices\";\n void\n sarray_at_put(struct sarray* array, sidx index, void* element)\n {\n+#ifdef OBJC_SPARSE3\n   struct sindex** the_index;\n+#endif\n   struct sbucket** the_bucket;\n #ifdef OBJC_SPARSE3\n   size_t ioffset;\n@@ -84,7 +87,7 @@ sarray_at_put(struct sarray* array, sidx index, void* element)\n \n     /* The index was previously empty, allocate a new */\n     *the_index = (struct sindex*)__objc_xmalloc(sizeof(struct sindex));\n-    bcopy(array->empty_index, *the_index, sizeof(struct sindex));\n+    memcpy(*the_index, array->empty_index, sizeof(struct sindex));\n     (*the_index)->version = array->version;\n     the_bucket = &((*the_index)->buckets[boffset]);\n     nindices += 1;\n@@ -94,7 +97,7 @@ sarray_at_put(struct sarray* array, sidx index, void* element)\n     /* This index must be lazy copied */\n     struct sindex* old_index = *the_index;\n     *the_index = (struct sindex*)__objc_xmalloc(sizeof(struct sindex));\n-    bcopy(old_index, *the_index, sizeof(struct sindex));\n+    memcpy( *the_index,old_index, sizeof(struct sindex));\n     (*the_index)->version = array->version;\n     the_bucket = &((*the_index)->buckets[boffset]);\n     nindices += 1;\n@@ -110,7 +113,7 @@ sarray_at_put(struct sarray* array, sidx index, void* element)\n     /* The bucket was previously empty (or something like that), */\n     /* allocate a new.  This is the effect of `lazy' allocation */  \n     *the_bucket = (struct sbucket*)__objc_xmalloc(sizeof(struct sbucket));\n-    bcopy(array->empty_bucket, *the_bucket, sizeof(struct sbucket));\n+    memcpy( *the_bucket,array->empty_bucket, sizeof(struct sbucket));\n     (*the_bucket)->version = array->version;\n     nbuckets += 1;\n \n@@ -119,7 +122,7 @@ sarray_at_put(struct sarray* array, sidx index, void* element)\n     /* Perform lazy copy. */\n     struct sbucket* old_bucket = *the_bucket;\n     *the_bucket = (struct sbucket*)__objc_xmalloc(sizeof(struct sbucket));\n-    bcopy(old_bucket, *the_bucket, sizeof(struct sbucket));\n+    memcpy( *the_bucket,old_bucket, sizeof(struct sbucket));\n     (*the_bucket)->version = array->version;\n     nbuckets += 1;\n \n@@ -401,7 +404,7 @@ sarray_lazy_copy(struct sarray* oarr)\n \n   /* Allocate core array */\n   arr = (struct sarray*) __objc_xmalloc(sizeof(struct sarray));\n-  bcopy(oarr, arr, sizeof(struct sarray));\n+  memcpy( arr,oarr, sizeof(struct sarray));\n   arr->version = oarr->version + 1;\n   arr->is_copy_of = oarr;\n   oarr->ref_count += 1;\n@@ -411,13 +414,13 @@ sarray_lazy_copy(struct sarray* oarr)\n   /* Copy bucket table */\n   arr->indices = (struct sindex**) \n     __objc_xmalloc(sizeof(struct sindex*)*num_indices);\n-  bcopy(oarr->indices, arr->indices, \n+  memcpy( arr->indices,oarr->indices, \n \tsizeof(struct sindex*)*num_indices);\n #else \n   /* Copy bucket table */\n   arr->buckets = (struct sbucket**) \n     __objc_xmalloc(sizeof(struct sbucket*)*num_indices);\n-  bcopy(oarr->buckets, arr->buckets, \n+  memcpy( arr->buckets,oarr->buckets, \n \tsizeof(struct sbucket*)*num_indices);\n #endif\n "}, {"sha": "7ef2f1cc2e8e498f3e3d461ce518fe852212794a", "filename": "gcc/objc/sarray.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fsarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fsarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fsarray.h?ref=a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "patch": "@@ -39,7 +39,7 @@ extern const char* __objc_sparse2_id;\n extern const char* __objc_sparse3_id;\n #endif\n \n-#ifdef IN_OBJC\n+#ifdef IN_GCC\n #include \"gstddef.h\"\n #else\n #include <stddef.h>"}, {"sha": "bf38b67ef6ac23f088046a5a918b9d77cabc95b6", "filename": "gcc/objc/sendmsg.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb/gcc%2Fobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fsendmsg.c?ref=a7ab3794a9967ba1aedecacdbb4cb700dcb03fbb", "patch": "@@ -205,7 +205,6 @@ void __objc_install_premature_dtable(Class_t class)\n static void __objc_send_initialize(Class_t class)\n {\n   Method_t m;\n-  IMP imp;\n \n   /* This *must* be a class object */\n   assert(CLS_ISCLASS(class));\n@@ -450,8 +449,8 @@ __objc_missing_method (id object, SEL sel, ...)\n   /* The object doesn't recognize the method.  Check for responding to\n      error:.  If it does then sent it. */\n   {\n-    char msg[256 + strlen (sel_get_name (sel))\n-             + strlen (object->class_pointer->name)];\n+    char msg[256 + strlen ((char*)sel_get_name (sel))\n+             + strlen ((char*)object->class_pointer->name)];\n \n     sprintf (msg, \"(%s) %s does not recognize %s\",\n \t     (CLS_ISMETA(object->class_pointer)\n@@ -471,7 +470,7 @@ __objc_missing_method (id object, SEL sel, ...)\n   }\n }\n \n-int __objc_print_dtable_stats()\n+void __objc_print_dtable_stats()\n {\n   int total = 0;\n   printf(\"memory usage: (%s)\\n\",\n@@ -504,7 +503,7 @@ int __objc_print_dtable_stats()\n   printf(\"-----------------------------------\\n\");\n   printf(\"total: %d bytes\\n\", total);\n   printf(\"===================================\\n\");\n-  }\n+}\n \n #ifdef OBJC_HASH_LOOKUP\n static Cache_t __objc_cache_insert(Cache_t cache, SEL op, IMP imp);"}]}