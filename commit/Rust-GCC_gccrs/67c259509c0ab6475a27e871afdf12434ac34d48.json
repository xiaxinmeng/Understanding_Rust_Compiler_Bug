{"sha": "67c259509c0ab6475a27e871afdf12434ac34d48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdjMjU5NTA5YzBhYjY0NzVhMjdlODcxYWZkZjEyNDM0YWMzNGQ0OA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2019-10-02T10:33:42Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-10-02T10:33:42Z"}, "message": "Fix omp target issue with Fortran optional arguments\n\n        gcc/\n        * omp-low.c (lower_omp_target): Dereference optional argument\n        to work with the right pointer.\n\n        gcc/testsuite/\n        * libgomp/testsuite/libgomp.fortran/use_device_ptr-optional-1.f90: New.\n\nFrom-SVN: r276445", "tree": {"sha": "4059685457e50ba972a2fc329e18d9e2a647346d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4059685457e50ba972a2fc329e18d9e2a647346d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67c259509c0ab6475a27e871afdf12434ac34d48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c259509c0ab6475a27e871afdf12434ac34d48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67c259509c0ab6475a27e871afdf12434ac34d48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c259509c0ab6475a27e871afdf12434ac34d48/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73a28634098cb1aba4a1773e62b6387af120dd9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a28634098cb1aba4a1773e62b6387af120dd9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a28634098cb1aba4a1773e62b6387af120dd9e"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "6f577c36d641b74f9aecbcf20186caf91daefacd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c259509c0ab6475a27e871afdf12434ac34d48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c259509c0ab6475a27e871afdf12434ac34d48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67c259509c0ab6475a27e871afdf12434ac34d48", "patch": "@@ -1,3 +1,8 @@\n+2019-10-02  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* omp-low.c (lower_omp_target): Dereference optional argument\n+\tto work with the right pointer.\n+\n 2019-10-02  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* langhooks-def.h (LANG_HOOKS_OMP_IS_OPTIONAL_ARGUMENT): Default to"}, {"sha": "ca7dfdb83a1516a33099fa1e9d29ac8d147ddcf1", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c259509c0ab6475a27e871afdf12434ac34d48/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c259509c0ab6475a27e871afdf12434ac34d48/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=67c259509c0ab6475a27e871afdf12434ac34d48", "patch": "@@ -11870,7 +11870,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t      var = build_fold_addr_expr (var);\n \t    else\n \t      {\n-\t\tif (omp_is_reference (ovar))\n+\t\tif (omp_is_reference (ovar) || omp_is_optional_argument (ovar))\n \t\t  {\n \t\t    type = TREE_TYPE (type);\n \t\t    if (TREE_CODE (type) != ARRAY_TYPE"}, {"sha": "d95e6e753f2212f8d39f4c58fc8d5fe7f0b3e700", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c259509c0ab6475a27e871afdf12434ac34d48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c259509c0ab6475a27e871afdf12434ac34d48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67c259509c0ab6475a27e871afdf12434ac34d48", "patch": "@@ -1,3 +1,7 @@\n+2019-10-02  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp/testsuite/libgomp.fortran/use_device_ptr-optional-1.f90: New.\n+\n 2019-10-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/91940"}, {"sha": "93c61216034e3da566a9fa8c3b737cb65b84e9d5", "filename": "libgomp/testsuite/libgomp.fortran/use_device_ptr-optional-1.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c259509c0ab6475a27e871afdf12434ac34d48/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fuse_device_ptr-optional-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c259509c0ab6475a27e871afdf12434ac34d48/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fuse_device_ptr-optional-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fuse_device_ptr-optional-1.f90?ref=67c259509c0ab6475a27e871afdf12434ac34d48", "patch": "@@ -0,0 +1,36 @@\n+! Test whether use_device_ptr properly handles OPTIONAL arguments\n+! (Only case of present arguments is tested)\n+program test_it\n+  implicit none\n+  integer, target :: ixx\n+  integer, pointer :: ptr_i, ptr_null\n+\n+  ptr_i => ixx\n+  call foo(ptr_i)\n+\n+  ptr_null => null()\n+  call bar(ptr_null)\n+contains\n+  subroutine foo(ii)\n+    integer, pointer, optional :: ii\n+\n+    if (.not.present(ii)) call abort()\n+    if (.not.associated(ii, ixx)) call abort()\n+    !$omp target data map(to:ixx) use_device_ptr(ii)\n+    if (.not.present(ii)) call abort()\n+    if (.not.associated(ii)) call abort()\n+    !$omp end target data\n+  end subroutine foo\n+\n+  ! For bar, it is assumed that a NULL ptr on the host maps to NULL on the device\n+  subroutine bar(jj)\n+    integer, pointer, optional :: jj\n+\n+    if (.not.present(jj)) call abort()\n+    if (associated(jj)) call abort()\n+    !$omp target data map(to:ixx) use_device_ptr(jj)\n+    if (.not.present(jj)) call abort()\n+   if (associated(jj)) call abort()\n+    !$omp end target data\n+  end subroutine bar\n+end program test_it"}]}