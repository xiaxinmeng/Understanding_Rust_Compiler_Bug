{"sha": "1441374bc987ffd5e969ec1e58739c01696aba3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ0MTM3NGJjOTg3ZmZkNWU5NjllYzFlNTg3MzljMDE2OTZhYmEzYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-20T16:59:03Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-20T16:59:03Z"}, "message": "cse.c (canon_hash): Reorder do_not_record test.\n\n        * cse.c (canon_hash): Reorder do_not_record test.  Always\n        allow pic_offset_table_rtx.\n\nFrom-SVN: r53665", "tree": {"sha": "0e8241da43d327f7b9fc8d8237c6e39b2df91ec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e8241da43d327f7b9fc8d8237c6e39b2df91ec8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1441374bc987ffd5e969ec1e58739c01696aba3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1441374bc987ffd5e969ec1e58739c01696aba3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1441374bc987ffd5e969ec1e58739c01696aba3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1441374bc987ffd5e969ec1e58739c01696aba3b/comments", "author": null, "committer": null, "parents": [{"sha": "9aa338ece29130841d1e74c30fa37ca8ac72993b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa338ece29130841d1e74c30fa37ca8ac72993b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa338ece29130841d1e74c30fa37ca8ac72993b"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "70e76fce638a0f60d12b7ca4ebd3f1d831e8f988", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1441374bc987ffd5e969ec1e58739c01696aba3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1441374bc987ffd5e969ec1e58739c01696aba3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1441374bc987ffd5e969ec1e58739c01696aba3b", "patch": "@@ -1,3 +1,8 @@\n+2002-05-20  Richard Henderson  <rth@redhat.com>\n+\n+\t* cse.c (canon_hash): Reorder do_not_record test.  Always\n+\tallow pic_offset_table_rtx.\n+\n 2002-05-19  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* optabs.c (expand_cmplxdiv_wide): Use complex_part_zero_p."}, {"sha": "514ba406ab04e6181684d54e45dee104d6943b72", "filename": "gcc/cse.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1441374bc987ffd5e969ec1e58739c01696aba3b/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1441374bc987ffd5e969ec1e58739c01696aba3b/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=1441374bc987ffd5e969ec1e58739c01696aba3b", "patch": "@@ -2249,10 +2249,11 @@ canon_hash (x, mode)\n     case REG:\n       {\n \tunsigned int regno = REGNO (x);\n+\tbool record;\n \n \t/* On some machines, we can't record any non-fixed hard register,\n \t   because extending its life will cause reload problems.  We\n-\t   consider ap, fp, and sp to be fixed for this purpose.\n+\t   consider ap, fp, sp, gp to be fixed for this purpose.\n \n \t   We also consider CCmode registers to be fixed for this purpose;\n \t   failure to do so leads to failure to simplify 0<100 type of\n@@ -2262,16 +2263,28 @@ canon_hash (x, mode)\n \t   Nor should we record any register that is in a small\n \t   class, as defined by CLASS_LIKELY_SPILLED_P.  */\n \n-\tif (regno < FIRST_PSEUDO_REGISTER\n-\t    && (global_regs[regno]\n-\t\t|| CLASS_LIKELY_SPILLED_P (REGNO_REG_CLASS (regno))\n-\t\t|| (SMALL_REGISTER_CLASSES\n-\t\t    && ! fixed_regs[regno]\n-\t\t    && x != frame_pointer_rtx\n-\t\t    && x != hard_frame_pointer_rtx\n-\t\t    && x != arg_pointer_rtx\n-\t\t    && x != stack_pointer_rtx\n-\t\t    && GET_MODE_CLASS (GET_MODE (x)) != MODE_CC)))\n+\tif (regno >= FIRST_PSEUDO_REGISTER)\n+\t  record = true;\n+\telse if (x == frame_pointer_rtx\n+\t\t || x == hard_frame_pointer_rtx\n+\t\t || x == arg_pointer_rtx\n+\t\t || x == stack_pointer_rtx\n+\t\t || x == pic_offset_table_rtx)\n+\t  record = true;\n+\telse if (global_regs[regno])\n+\t  record = false;\n+\telse if (fixed_regs[regno])\n+\t  record = true;\n+\telse if (GET_MODE_CLASS (GET_MODE (x)) == MODE_CC)\n+\t  record = true;\n+\telse if (SMALL_REGISTER_CLASSES)\n+\t  record = false;\n+\telse if (CLASS_LIKELY_SPILLED_P (REGNO_REG_CLASS (regno)))\n+\t  record = false;\n+\telse\n+\t  record = true;\n+\t    \n+\tif (!record)\n \t  {\n \t    do_not_record = 1;\n \t    return 0;"}]}