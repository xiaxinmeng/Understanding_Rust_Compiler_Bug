{"sha": "056928b248b7e3f879c2b3ac4be935e67ad3a09a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU2OTI4YjI0OGI3ZTNmODc5YzJiM2FjNGJlOTM1ZTY3YWQzYTA5YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-05-11T18:12:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-05-11T18:12:28Z"}, "message": "re PR c++/44062 ((void)var; doesn't prevent 'set but not used' warning)\n\n\tPR c++/44062\n\t* c-parser.c (c_parser_expression): Mark LHS of a comma\n\texpression as read if it is a decl, handled component or\n\tCOMPOUND_EXPR with that on the RHS.\n\t* c-typeck.c (c_process_expr_stmt): Mark RHS of COMPOUND_EXPR\n\tif it is a decl or handled component.\n\n\t* semantics.c (finish_expr_stmt): Don't call mark_exp_read here...\n\t* cvt.c (convert_to_void): ... but here.  If expr is a COMPOUND_EXPR,\n\tlook at its second operand.\n\n\t* c-c++-common/Wunused-var-7.c: New test.\n\t* g++.dg/warn/Wunused-var-9.C: New test.\n\nFrom-SVN: r159286", "tree": {"sha": "89061f89197477311627b0ab6424fa6ee67aaf52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89061f89197477311627b0ab6424fa6ee67aaf52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/056928b248b7e3f879c2b3ac4be935e67ad3a09a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056928b248b7e3f879c2b3ac4be935e67ad3a09a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056928b248b7e3f879c2b3ac4be935e67ad3a09a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056928b248b7e3f879c2b3ac4be935e67ad3a09a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "edf86ec148f98f12a16ba9b2a26b0b66b6078c50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf86ec148f98f12a16ba9b2a26b0b66b6078c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edf86ec148f98f12a16ba9b2a26b0b66b6078c50"}], "stats": {"total": 123, "additions": 112, "deletions": 11}, "files": [{"sha": "712b4371b43662e1e414ab9fdbf250931cfe19df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=056928b248b7e3f879c2b3ac4be935e67ad3a09a", "patch": "@@ -1,3 +1,12 @@\n+2010-05-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/44062\n+\t* c-parser.c (c_parser_expression): Mark LHS of a comma\n+\texpression as read if it is a decl, handled component or\n+\tCOMPOUND_EXPR with that on the RHS.\n+\t* c-typeck.c (c_process_expr_stmt): Mark RHS of COMPOUND_EXPR\n+\tif it is a decl or handled component.\n+\n 2010-05-11  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-symtab.c (lto_symtab_free): New function."}, {"sha": "a0f1bea87e54d606f2845303c36f98314b9f6c8f", "filename": "gcc/c-parser.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=056928b248b7e3f879c2b3ac4be935e67ad3a09a", "patch": "@@ -6028,10 +6028,16 @@ c_parser_expression (c_parser *parser)\n   while (c_parser_next_token_is (parser, CPP_COMMA))\n     {\n       struct c_expr next;\n+      tree lhsval;\n       location_t loc = c_parser_peek_token (parser)->location;\n       location_t expr_loc;\n       c_parser_consume_token (parser);\n       expr_loc = c_parser_peek_token (parser)->location;\n+      lhsval = expr.value;\n+      while (TREE_CODE (lhsval) == COMPOUND_EXPR)\n+\tlhsval = TREE_OPERAND (lhsval, 1);\n+      if (DECL_P (lhsval) || handled_component_p (lhsval))\n+\tmark_exp_read (lhsval);\n       next = c_parser_expr_no_commas (parser, NULL);\n       next = default_function_array_conversion (expr_loc, next);\n       expr.value = build_compound_expr (loc, expr.value, next.value);"}, {"sha": "083b5a15ac33ba9fa861ce64407a5a16dc81d2b2", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=056928b248b7e3f879c2b3ac4be935e67ad3a09a", "patch": "@@ -8841,6 +8841,8 @@ emit_side_effect_warnings (location_t loc, tree expr)\n tree\n c_process_expr_stmt (location_t loc, tree expr)\n {\n+  tree exprv;\n+\n   if (!expr)\n     return NULL_TREE;\n \n@@ -8861,8 +8863,11 @@ c_process_expr_stmt (location_t loc, tree expr)\n       && warn_unused_value)\n     emit_side_effect_warnings (loc, expr);\n \n-  if (DECL_P (expr) || handled_component_p (expr))\n-    mark_exp_read (expr);\n+  exprv = expr;\n+  while (TREE_CODE (exprv) == COMPOUND_EXPR)\n+    exprv = TREE_OPERAND (exprv, 1);\n+  if (DECL_P (exprv) || handled_component_p (exprv))\n+    mark_exp_read (exprv);\n \n   /* If the expression is not of a type to which we cannot assign a line\n      number, wrap the thing in a no-op NOP_EXPR.  */"}, {"sha": "597f8f1bcf985e3dc53770c956a6aa1bdea7c561", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=056928b248b7e3f879c2b3ac4be935e67ad3a09a", "patch": "@@ -1,3 +1,10 @@\n+2010-05-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/44062\n+\t* semantics.c (finish_expr_stmt): Don't call mark_exp_read here...\n+\t* cvt.c (convert_to_void): ... but here.  If expr is a COMPOUND_EXPR,\n+\tlook at its second operand.\n+\n 2010-05-10  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/44017"}, {"sha": "efef5c2a41a59341146f7518f27c16ce5e507db8", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=056928b248b7e3f879c2b3ac4be935e67ad3a09a", "patch": "@@ -1,6 +1,6 @@\n /* Language-level data type conversion for GNU C++.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -822,9 +822,23 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n tree\n convert_to_void (tree expr, const char *implicit, tsubst_flags_t complain)\n {\n+  tree exprv;\n+\n   if (expr == error_mark_node\n       || TREE_TYPE (expr) == error_mark_node)\n     return error_mark_node;\n+\n+  exprv = expr;\n+  while (TREE_CODE (exprv) == COMPOUND_EXPR)\n+    exprv = TREE_OPERAND (exprv, 1);\n+  if (DECL_P (exprv) || handled_component_p (exprv))\n+    /* Expr is not being 'used' here, otherwise we whould have\n+       called mark_{rl}value_use use here, which would have in turn\n+       called mark_exp_read.  Rather, we call mark_exp_read directly\n+       to avoid some warnings when\n+       -Wunused-but-set-{variable,parameter} is in effect.  */\n+    mark_exp_read (exprv);\n+\n   if (!TREE_TYPE (expr))\n     return expr;\n   if (invalid_nonstatic_memfn_p (expr, complain))"}, {"sha": "135de46abe74971a779f224e2dd68d5a5d6bd037", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=056928b248b7e3f879c2b3ac4be935e67ad3a09a", "patch": "@@ -4,7 +4,7 @@\n    and during the instantiation of template functions.\n \n    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n-\t\t 2008, 2009 Free Software Foundation, Inc.\n+\t\t 2008, 2009, 2010 Free Software Foundation, Inc.\n    Written by Mark Mitchell (mmitchell@usa.net) based on code found\n    formerly in parse.y and pt.c.\n \n@@ -610,13 +610,6 @@ finish_expr_stmt (tree expr)\n \t{\n \t  if (warn_sequence_point)\n \t    verify_sequence_points (expr);\n-\t  if (TREE_CODE (expr) != MODIFY_EXPR)\n-\t    /* Expr is not being 'used' here, otherwise we whould have\n-\t       called mark_{rl}value_use use here, which would have in turn\n-\t       called mark_exp_read. Rather, we call mark_exp_read directly\n-\t       to avoid some warnings when\n-\t        -Wunused-but-set-{variable,parameter} is in effect.  */\n-\t    mark_exp_read (expr);\n \t  expr = convert_to_void (expr, \"statement\", tf_warning_or_error);\n \t}\n       else if (!type_dependent_expression_p (expr))"}, {"sha": "8a74fd134760f6c50b4bcf50f193d3094f1c1286", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=056928b248b7e3f879c2b3ac4be935e67ad3a09a", "patch": "@@ -1,3 +1,9 @@\n+2010-05-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/44062\n+\t* c-c++-common/Wunused-var-7.c: New test.\n+\t* g++.dg/warn/Wunused-var-9.C: New test.\n+\n 2010-05-11  Daniel Franke  <franke.daniel@gmail.com>\n \n         PR fortran/43711"}, {"sha": "74196436db886f03ca4b7bf3eb2e61d279d42a16", "filename": "gcc/testsuite/c-c++-common/Wunused-var-7.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-7.c?ref=056928b248b7e3f879c2b3ac4be935e67ad3a09a", "patch": "@@ -0,0 +1,48 @@\n+/* PR c++/44062 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused\" } */\n+\n+void\n+foo (void)\n+{\n+  int a, b, c, d, e, f, g;\n+  a = 1;\n+  b = 2;\n+  c = 3;\n+  d = 4;\n+  e = 5;\n+  f = 6;\n+  g = 7;\n+  a;\t\t\t/* { dg-warning \"no effect\" } */\n+  b, 1;\t\t\t/* { dg-warning \"no effect\" } */\n+  (void) c;\n+  (void) d, 1;\t\t/* { dg-warning \"no effect\" } */\n+  e, f, 1;\t\t/* { dg-warning \"no effect\" } */\n+  (void) g, f, 1;\t/* { dg-warning \"no effect\" } */\n+}\n+\n+void\n+bar (void)\n+{\n+  int a;\n+  int b;\n+  int c;\t\t/* { dg-warning \"set but not used\" } */\n+  a = 1;\n+  b = 2;\n+  c = 3;\n+  c = ({ a++, b; });\n+}\n+\n+void\n+baz (void)\n+{\n+  int a;\n+  int b;\n+  int c;\n+  int d;\n+  a = 1;\n+  b = 2;\n+  c = 3;\n+  d = 4;\n+  d, ( a++, b ), c;\t/* { dg-warning \"no effect\" } */\n+}"}, {"sha": "cb422f45cbb17b2784d07f276c8ba1145bb056cd", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-9.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056928b248b7e3f879c2b3ac4be935e67ad3a09a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-9.C?ref=056928b248b7e3f879c2b3ac4be935e67ad3a09a", "patch": "@@ -0,0 +1,13 @@\n+/* PR c++/44062 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused\" } */\n+\n+void\n+f ()\n+{\n+  int i = 4;\n+  static_cast <void> (i);\n+  int j;\n+  j = 5;\n+  static_cast <void> (j);\n+}"}]}