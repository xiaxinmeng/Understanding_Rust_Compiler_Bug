{"sha": "938802033e97eb1c384ddabf8f9f2065632d02a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM4ODAyMDMzZTk3ZWIxYzM4NGRkYWJmOGY5ZjIwNjU2MzJkMDJhNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-12-22T22:06:35Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-12-22T22:06:35Z"}, "message": "system.h (IN_RANGE): Restore HOST_WIDE_INT cast.\n\n\t* system.h (IN_RANGE): Restore HOST_WIDE_INT cast.\n\t* tree.h (IS_EXPR_CODE_CLASS): Do not use IN_RANGE.\n\nFrom-SVN: r92511", "tree": {"sha": "d3c41d1fad0a4d7bc84d1e78f14516a820e2e648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3c41d1fad0a4d7bc84d1e78f14516a820e2e648"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/938802033e97eb1c384ddabf8f9f2065632d02a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938802033e97eb1c384ddabf8f9f2065632d02a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/938802033e97eb1c384ddabf8f9f2065632d02a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938802033e97eb1c384ddabf8f9f2065632d02a4/comments", "author": null, "committer": null, "parents": [{"sha": "5e001b48afe2374f1f63b01e01fb6e308f0365ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e001b48afe2374f1f63b01e01fb6e308f0365ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e001b48afe2374f1f63b01e01fb6e308f0365ed"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "aba1f60cd05d750f9861eda5c17b0e87dbbd8643", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938802033e97eb1c384ddabf8f9f2065632d02a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938802033e97eb1c384ddabf8f9f2065632d02a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=938802033e97eb1c384ddabf8f9f2065632d02a4", "patch": "@@ -1,3 +1,8 @@\n+2004-12-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* system.h (IN_RANGE): Restore HOST_WIDE_INT cast.\n+\t* tree.h (IS_EXPR_CODE_CLASS): Do not use IN_RANGE.\n+\n 2004-12-22  Richard Henderson  <rth@redhat.com>\n \t    Uros Bizjak  <uros@kss-loka.si>\n "}, {"sha": "676869e12ddfac0e4c3f0ae8c1865ef8bbdf47a0", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938802033e97eb1c384ddabf8f9f2065632d02a4/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938802033e97eb1c384ddabf8f9f2065632d02a4/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=938802033e97eb1c384ddabf8f9f2065632d02a4", "patch": "@@ -179,7 +179,7 @@ extern int errno;\n    UPPER.  However the bounds themselves can be either positive or\n    negative.  */\n #define IN_RANGE(VALUE, LOWER, UPPER) \\\n-  ((unsigned)((VALUE) - (LOWER)) <= ((UPPER) - (LOWER)))\n+  ((unsigned HOST_WIDE_INT)((VALUE) - (LOWER)) <= ((UPPER) - (LOWER)))\n \n /* Infrastructure for defining missing _MAX and _MIN macros.  Note that\n    macros defined with these cannot be used in #if.  */"}, {"sha": "7a78bbf619048e351260d9aa76fae5e9d5bec860", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938802033e97eb1c384ddabf8f9f2065632d02a4/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938802033e97eb1c384ddabf8f9f2065632d02a4/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=938802033e97eb1c384ddabf8f9f2065632d02a4", "patch": "@@ -147,7 +147,7 @@ extern const enum tree_code_class tree_code_type[];\n    expression.  */\n \n #define IS_EXPR_CODE_CLASS(CLASS)\\\n-\t(IN_RANGE (CLASS, tcc_reference, tcc_expression))\n+\t(((CLASS) - tcc_reference) <= (tcc_expression - tcc_reference))\n \n /* Returns nonzero iff NODE is an expression of some kind.  */\n "}]}