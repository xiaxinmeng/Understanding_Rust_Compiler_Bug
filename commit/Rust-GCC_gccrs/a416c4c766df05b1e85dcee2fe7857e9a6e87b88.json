{"sha": "a416c4c766df05b1e85dcee2fe7857e9a6e87b88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQxNmM0Yzc2NmRmMDViMWU4NWRjZWUyZmU3ODU3ZTlhNmU4N2I4OA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2014-06-15T16:58:53Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2014-06-15T16:58:53Z"}, "message": "re PR fortran/28484 ([F03] system_clock with real-type count_rate does not compile)\n\n\tPR fortran/28484\n\tPR fortran/61429\n\n\t* check.c (gfc_check_system_clock): Improve checking of arguments.\n\t* intrinsic.texi: Update doc of SYSTEM_CLOCK.\n\t* iresolve.c (gfc_resolve_system_clock): Choose library function\n\tused depending on argument kinds.\n\t* trans-decl.c (gfc_build_intrinsic_function_decls): Build\n\tdecls for system_clock_4 and system_clock_8.\n\t* trans-intrinsic.c (conv_intrinsic_system_clock): New function.\n\t(gfc_conv_intrinsic_subroutine): Call conv_intrinsic_system_clock.\n\t* trans.h (gfor_fndecl_system_clock4, gfor_fndecl_system_clock8):\n\tNew variables.\n\n\t* gfortran.dg/system_clock_1.f90: New file.\n\t* gfortran.dg/system_clock_2.f90: New file.\n\nFrom-SVN: r211686", "tree": {"sha": "d08324947894c4c45c1d88bc91e42afa45a1acd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d08324947894c4c45c1d88bc91e42afa45a1acd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a416c4c766df05b1e85dcee2fe7857e9a6e87b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a416c4c766df05b1e85dcee2fe7857e9a6e87b88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a416c4c766df05b1e85dcee2fe7857e9a6e87b88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6faf47517f3a989140af3d054c75718bfcc20581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6faf47517f3a989140af3d054c75718bfcc20581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6faf47517f3a989140af3d054c75718bfcc20581"}], "stats": {"total": 268, "additions": 236, "deletions": 32}, "files": [{"sha": "308a7bc22bf6b02f5f64d0f0fed3694fb2d335f1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a416c4c766df05b1e85dcee2fe7857e9a6e87b88", "patch": "@@ -1,3 +1,18 @@\n+2014-06-15  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/28484\n+\tPR fortran/61429\n+\t* check.c (gfc_check_system_clock): Improve checking of arguments.\n+\t* intrinsic.texi: Update doc of SYSTEM_CLOCK.\n+\t* iresolve.c (gfc_resolve_system_clock): Choose library function\n+\tused depending on argument kinds.\n+\t* trans-decl.c (gfc_build_intrinsic_function_decls): Build\n+\tdecls for system_clock_4 and system_clock_8.\n+\t* trans-intrinsic.c (conv_intrinsic_system_clock): New function.\n+\t(gfc_conv_intrinsic_subroutine): Call conv_intrinsic_system_clock.\n+\t* trans.h (gfor_fndecl_system_clock4, gfor_fndecl_system_clock8):\n+\tNew variables.\n+\n 2014-06-12  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.h (gfc_copy_formal_args_intr): Update prototype."}, {"sha": "caf3b6cbb4e36b877fb56a2c03b75e90355e6efe", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=a416c4c766df05b1e85dcee2fe7857e9a6e87b88", "patch": "@@ -5206,8 +5206,10 @@ gfc_check_second_sub (gfc_expr *time)\n }\n \n \n-/* The arguments of SYSTEM_CLOCK are scalar, integer variables.  Note,\n-   count, count_rate, and count_max are all optional arguments */\n+/* COUNT and COUNT_MAX of SYSTEM_CLOCK are scalar, default-kind integer\n+   variables in Fortran 95.  In Fortran 2003 and later, they can be of any\n+   kind, and COUNT_RATE can be of type real.  Note, count, count_rate, and\n+   count_max are all optional arguments */\n \n bool\n gfc_check_system_clock (gfc_expr *count, gfc_expr *count_rate,\n@@ -5221,6 +5223,12 @@ gfc_check_system_clock (gfc_expr *count, gfc_expr *count_rate,\n       if (!type_check (count, 0, BT_INTEGER))\n \treturn false;\n \n+      if (count->ts.kind != gfc_default_integer_kind\n+\t  && !gfc_notify_std (GFC_STD_F2003, \"COUNT argument to \"\n+\t\t\t      \"SYSTEM_CLOCK at %L has non-default kind\",\n+\t\t\t      &count->where))\n+\treturn false;\n+\n       if (!variable_check (count, 0, false))\n \treturn false;\n     }\n@@ -5230,15 +5238,26 @@ gfc_check_system_clock (gfc_expr *count, gfc_expr *count_rate,\n       if (!scalar_check (count_rate, 1))\n \treturn false;\n \n-      if (!type_check (count_rate, 1, BT_INTEGER))\n-\treturn false;\n-\n       if (!variable_check (count_rate, 1, false))\n \treturn false;\n \n-      if (count != NULL\n-\t  && !same_type_check (count, 0, count_rate, 1))\n-\treturn false;\n+      if (count_rate->ts.type == BT_REAL)\n+\t{\n+\t  if (!gfc_notify_std (GFC_STD_F2003, \"Real COUNT_RATE argument to \"\n+\t\t\t       \"SYSTEM_CLOCK at %L\", &count_rate->where))\n+\t    return false;\n+\t}\n+      else\n+\t{\n+\t  if (!type_check (count_rate, 1, BT_INTEGER))\n+\t    return false;\n+\n+\t  if (count_rate->ts.kind != gfc_default_integer_kind\n+\t      && !gfc_notify_std (GFC_STD_F2003, \"COUNT_RATE argument to \"\n+\t\t\t\t  \"SYSTEM_CLOCK at %L has non-default kind\",\n+\t\t\t\t  &count_rate->where))\n+\t    return false;\n+\t}\n \n     }\n \n@@ -5250,15 +5269,13 @@ gfc_check_system_clock (gfc_expr *count, gfc_expr *count_rate,\n       if (!type_check (count_max, 2, BT_INTEGER))\n \treturn false;\n \n-      if (!variable_check (count_max, 2, false))\n-\treturn false;\n-\n-      if (count != NULL\n-\t  && !same_type_check (count, 0, count_max, 2))\n+      if (count_max->ts.kind != gfc_default_integer_kind\n+\t  && !gfc_notify_std (GFC_STD_F2003, \"COUNT_MAX argument to \"\n+\t\t\t      \"SYSTEM_CLOCK at %L has non-default kind\",\n+\t\t\t      &count_max->where))\n \treturn false;\n \n-      if (count_rate != NULL\n-\t  && !same_type_check (count_rate, 1, count_max, 2))\n+      if (!variable_check (count_max, 2, false))\n \treturn false;\n     }\n "}, {"sha": "ed4ecaa88385bd17e441b0e188e05d5beff803b8", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=a416c4c766df05b1e85dcee2fe7857e9a6e87b88", "patch": "@@ -12259,15 +12259,16 @@ clock implementation, provide up to nanosecond resolution.  If a\n monotonic clock is not available, the implementation falls back to a\n realtime clock.\n \n-@var{COUNT_RATE} is system dependent and can vary depending on the\n-kind of the arguments. For @var{kind=4} arguments, @var{COUNT}\n-represents milliseconds, while for @var{kind=8} arguments, @var{COUNT}\n-typically represents micro- or nanoseconds depending on resolution of\n-the underlying platform clock. @var{COUNT_MAX} usually equals\n-@code{HUGE(COUNT_MAX)}. Note that the millisecond resolution of the\n-@var{kind=4} version implies that the @var{COUNT} will wrap around in\n-roughly 25 days. In order to avoid issues with the wrap around and for\n-more precise timing, please use the @var{kind=8} version.\n+@var{COUNT_RATE} is system dependent and can vary depending on the kind of\n+the arguments. For @var{kind=4} arguments (and smaller integer kinds),\n+@var{COUNT} represents milliseconds, while for @var{kind=8} arguments (and\n+larger integer kinds), @var{COUNT} typically represents micro- or\n+nanoseconds depending on resolution of the underlying platform clock.\n+@var{COUNT_MAX} usually equals @code{HUGE(COUNT_MAX)}. Note that the\n+millisecond resolution of the @var{kind=4} version implies that the\n+@var{COUNT} will wrap around in roughly 25 days. In order to avoid issues\n+with the wrap around and for more precise timing, please use the\n+@var{kind=8} version.\n \n If there is no clock, or querying the clock fails, @var{COUNT} is set\n to @code{-HUGE(COUNT)}, and @var{COUNT_RATE} and @var{COUNT_MAX} are\n@@ -12299,7 +12300,7 @@ Subroutine\n @item @var{COUNT}      @tab (Optional) shall be a scalar of type \n @code{INTEGER} with @code{INTENT(OUT)}.\n @item @var{COUNT_RATE} @tab (Optional) shall be a scalar of type \n-@code{INTEGER} with @code{INTENT(OUT)}.\n+@code{INTEGER} or @code{REAL}, with @code{INTENT(OUT)}.\n @item @var{COUNT_MAX}  @tab (Optional) shall be a scalar of type \n @code{INTEGER} with @code{INTENT(OUT)}.\n @end multitable"}, {"sha": "f9a69feaeef19f58509dd62e7cbfa61731c41353", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=a416c4c766df05b1e85dcee2fe7857e9a6e87b88", "patch": "@@ -3293,13 +3293,14 @@ gfc_resolve_system_clock (gfc_code *c)\n {\n   const char *name;\n   int kind;\n-\n-  if (c->ext.actual->expr != NULL)\n-    kind = c->ext.actual->expr->ts.kind;\n-  else if (c->ext.actual->next->expr != NULL)\n-      kind = c->ext.actual->next->expr->ts.kind;\n-  else if (c->ext.actual->next->next->expr != NULL)\n-      kind = c->ext.actual->next->next->expr->ts.kind;\n+  gfc_expr *count = c->ext.actual->expr;\n+  gfc_expr *count_max = c->ext.actual->next->next->expr;\n+\n+  /* The INTEGER(8) version has higher precision, it is used if both COUNT\n+     and COUNT_MAX can hold 64-bit values, or are absent.  */\n+  if ((!count || count->ts.kind >= 8)\n+      && (!count_max || count_max->ts.kind >= 8))\n+    kind = 8;\n   else\n     kind = gfc_default_integer_kind;\n "}, {"sha": "1940622d9da1c707dfc1ec2e668393a0c450f78f", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=a416c4c766df05b1e85dcee2fe7857e9a6e87b88", "patch": "@@ -116,6 +116,8 @@ tree gfor_fndecl_ttynam;\n tree gfor_fndecl_in_pack;\n tree gfor_fndecl_in_unpack;\n tree gfor_fndecl_associated;\n+tree gfor_fndecl_system_clock4;\n+tree gfor_fndecl_system_clock8;\n \n \n /* Coarray run-time library function decls.  */\n@@ -2822,7 +2824,9 @@ static void\n gfc_build_intrinsic_function_decls (void)\n {\n   tree gfc_int4_type_node = gfc_get_int_type (4);\n+  tree gfc_pint4_type_node = build_pointer_type (gfc_int4_type_node);\n   tree gfc_int8_type_node = gfc_get_int_type (8);\n+  tree gfc_pint8_type_node = build_pointer_type (gfc_int8_type_node);\n   tree gfc_int16_type_node = gfc_get_int_type (16);\n   tree gfc_logical4_type_node = gfc_get_logical_type (4);\n   tree pchar1_type_node = gfc_get_pchar_type (1);\n@@ -3021,6 +3025,16 @@ gfc_build_intrinsic_function_decls (void)\n   DECL_PURE_P (gfor_fndecl_sr_kind) = 1;\n   TREE_NOTHROW (gfor_fndecl_sr_kind) = 1;\n \n+  gfor_fndecl_system_clock4 = gfc_build_library_function_decl (\n+\tget_identifier (PREFIX(\"system_clock_4\")),\n+\tvoid_type_node, 3, gfc_pint4_type_node, gfc_pint4_type_node,\n+\tgfc_pint4_type_node);\n+\n+  gfor_fndecl_system_clock8 = gfc_build_library_function_decl (\n+\tget_identifier (PREFIX(\"system_clock_8\")),\n+\tvoid_type_node, 3, gfc_pint8_type_node, gfc_pint8_type_node,\n+\tgfc_pint8_type_node);\n+\n   /* Power functions.  */\n   {\n     tree ctype, rtype, itype, jtype;"}, {"sha": "613beef43315f44fed9512f0a9ff80c16ad24bc9", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=a416c4c766df05b1e85dcee2fe7857e9a6e87b88", "patch": "@@ -2183,6 +2183,96 @@ gfc_conv_intrinsic_fdate (gfc_se * se, gfc_expr * expr)\n }\n \n \n+/* Call the SYSTEM_CLOCK library functions, handling the type and kind\n+   conversions.  */\n+\n+static tree\n+conv_intrinsic_system_clock (gfc_code *code)\n+{\n+  stmtblock_t block;\n+  gfc_se count_se, count_rate_se, count_max_se;\n+  tree arg1 = NULL_TREE, arg2 = NULL_TREE, arg3 = NULL_TREE;\n+  tree type, tmp;\n+  int kind;\n+\n+  gfc_expr *count = code->ext.actual->expr;\n+  gfc_expr *count_rate = code->ext.actual->next->expr;\n+  gfc_expr *count_max = code->ext.actual->next->next->expr;\n+\n+  /* The INTEGER(8) version has higher precision, it is used if both COUNT\n+     and COUNT_MAX can hold 64-bit values, or are absent.  */\n+  if ((!count || count->ts.kind >= 8)\n+      && (!count_max || count_max->ts.kind >= 8))\n+    kind = 8;\n+  else\n+    kind = gfc_default_integer_kind;\n+  type = gfc_get_int_type (kind);\n+\n+  /* Evaluate our arguments.  */\n+  if (count)\n+    {\n+      gfc_init_se (&count_se, NULL);\n+      gfc_conv_expr (&count_se, count);\n+    }\n+\n+  if (count_rate)\n+    {\n+      gfc_init_se (&count_rate_se, NULL);\n+      gfc_conv_expr (&count_rate_se, count_rate);\n+    }\n+\n+  if (count_max)\n+    {\n+      gfc_init_se (&count_max_se, NULL);\n+      gfc_conv_expr (&count_max_se, count_max);\n+    }\n+\n+  /* Prepare temporary variables if we need them.  */\n+  if (count && count->ts.kind != kind)\n+    arg1 = gfc_create_var (type, \"count\");\n+  else if (count)\n+    arg1 = count_se.expr;\n+\n+  if (count_rate && (count_rate->ts.kind != kind\n+\t\t     || count_rate->ts.type != BT_INTEGER))\n+    arg2 = gfc_create_var (type, \"count_rate\");\n+  else if (count_rate)\n+    arg2 = count_rate_se.expr;\n+\n+  if (count_max && count_max->ts.kind != kind)\n+    arg3 = gfc_create_var (type, \"count_max\");\n+  else if (count_max)\n+    arg3 = count_max_se.expr;\n+\n+  /* Make the function call. */\n+  gfc_init_block (&block);\n+  tmp = build_call_expr_loc (input_location,\n+\t\t\t     kind == 4 ? gfor_fndecl_system_clock4\n+\t\t\t\t       : gfor_fndecl_system_clock8,\n+                             3,\n+\t\t\t     arg1 ? gfc_build_addr_expr (NULL_TREE, arg1)\n+\t\t\t\t  : null_pointer_node,\n+\t\t\t     arg2 ? gfc_build_addr_expr (NULL_TREE, arg2)\n+\t\t\t\t  : null_pointer_node,\n+\t\t\t     arg3 ? gfc_build_addr_expr (NULL_TREE, arg3)\n+\t\t\t\t  : null_pointer_node);\n+  gfc_add_expr_to_block (&block, tmp);\n+\n+  /* And store values back if needed.  */\n+  if (arg1 && arg1 != count_se.expr)\n+    gfc_add_modify (&block, count_se.expr,\n+\t\t    fold_convert (TREE_TYPE (count_se.expr), arg1));\n+  if (arg2 && arg2 != count_rate_se.expr)\n+    gfc_add_modify (&block, count_rate_se.expr,\n+\t\t    fold_convert (TREE_TYPE (count_rate_se.expr), arg2));\n+  if (arg3 && arg3 != count_max_se.expr)\n+    gfc_add_modify (&block, count_max_se.expr,\n+\t\t    fold_convert (TREE_TYPE (count_max_se.expr), arg3));\n+\n+  return gfc_finish_block (&block);\n+}\n+\n+\n /* Return a character string containing the tty name.  */\n \n static void\n@@ -7968,6 +8058,10 @@ gfc_conv_intrinsic_subroutine (gfc_code *code)\n       res = conv_co_minmaxsum (code);\n       break;\n \n+    case GFC_ISYM_SYSTEM_CLOCK:\n+      res = conv_intrinsic_system_clock (code);\n+      break;\n+\n     default:\n       res = NULL_TREE;\n       break;"}, {"sha": "d1c778f7b5aa43ba546bb1f87294e08f18c28e91", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=a416c4c766df05b1e85dcee2fe7857e9a6e87b88", "patch": "@@ -697,6 +697,8 @@ extern GTY(()) tree gfor_fndecl_fdate;\n extern GTY(()) tree gfor_fndecl_in_pack;\n extern GTY(()) tree gfor_fndecl_in_unpack;\n extern GTY(()) tree gfor_fndecl_associated;\n+extern GTY(()) tree gfor_fndecl_system_clock4;\n+extern GTY(()) tree gfor_fndecl_system_clock8;\n \n \n /* Coarray run-time library function decls.  */"}, {"sha": "1f530dc5850a54a703d4a8a36fe9e77fc5f6de51", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a416c4c766df05b1e85dcee2fe7857e9a6e87b88", "patch": "@@ -1,3 +1,10 @@\n+2014-06-15  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/28484\n+\tPR fortran/61429\n+\t* gfortran.dg/system_clock_1.f90: New file.\n+\t* gfortran.dg/system_clock_2.f90: New file.\n+\n 2014-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/33101"}, {"sha": "41027deb28f6d0bc7be90228986df55ec5890e18", "filename": "gcc/testsuite/gfortran.dg/system_clock_1.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ftestsuite%2Fgfortran.dg%2Fsystem_clock_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ftestsuite%2Fgfortran.dg%2Fsystem_clock_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsystem_clock_1.f90?ref=a416c4c766df05b1e85dcee2fe7857e9a6e87b88", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do run }\n+\n+  integer :: i, j, k\n+  integer(kind=8) :: i8, j8, k8\n+  real :: x\n+  double precision :: z\n+\n+  call system_clock(i, j, k)\n+  call system_clock(i, j, k8)\n+  call system_clock(i, j8, k)\n+  call system_clock(i, j8, k8)\n+  call system_clock(i8, j, k)\n+  call system_clock(i8, j, k8)\n+  call system_clock(i8, j8, k)\n+  call system_clock(i8, j8, k8)\n+\n+  call system_clock(i, x, k)\n+  call system_clock(i, x, k8)\n+  call system_clock(i, x, k)\n+  call system_clock(i, x, k8)\n+  call system_clock(i8, x, k)\n+  call system_clock(i8, x, k8)\n+  call system_clock(i8, x, k)\n+  call system_clock(i8, x, k8)\n+\n+  call system_clock(i, z, k)\n+  call system_clock(i, z, k8)\n+  call system_clock(i, z, k)\n+  call system_clock(i, z, k8)\n+  call system_clock(i8, z, k)\n+  call system_clock(i8, z, k8)\n+  call system_clock(i8, z, k)\n+  call system_clock(i8, z, k8)\n+\n+  end"}, {"sha": "f7399afe2d12a8e36aeeec03f0a07d7a77301b74", "filename": "gcc/testsuite/gfortran.dg/system_clock_2.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ftestsuite%2Fgfortran.dg%2Fsystem_clock_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a416c4c766df05b1e85dcee2fe7857e9a6e87b88/gcc%2Ftestsuite%2Fgfortran.dg%2Fsystem_clock_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsystem_clock_2.f90?ref=a416c4c766df05b1e85dcee2fe7857e9a6e87b88", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+\n+  integer :: i, j, k\n+  integer(kind=8) :: i8, j8, k8\n+  real :: x\n+  double precision :: z\n+\n+  call system_clock(i, j, k)\n+  call system_clock(i, j, k8) ! { dg-error \"has non-default kind\" }\n+  call system_clock(i, j8, k) ! { dg-error \"has non-default kind\" }\n+  call system_clock(i8, j, k) ! { dg-error \"has non-default kind\" }\n+\n+  call system_clock(i, x, k) ! { dg-error \"Real COUNT_RATE argument\" }\n+\n+  call system_clock(i, z, k) ! { dg-error \"Real COUNT_RATE argument\" }\n+\n+  end"}]}