{"sha": "0b93b64e20444a5a105b0cb9935b7841486559aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI5M2I2NGUyMDQ0NGE1YTEwNWIwY2I5OTM1Yjc4NDE0ODY1NTlhYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-03-24T10:16:53Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-03-24T10:16:53Z"}, "message": "Cutover various gen*.c files to using system.h:\n\n        * Makefile.in (genconfig.o, genflags.o, gencodes.o, genemit.o,\n        genopinit.o, genrecog.o, genextract.o, genpeep.o, genattr.o,\n        genattrtab.o, genoutput.o): Depend on system.h.\n        * genattr.c: Include system.h.  Add arguments to various function\n        prototypes.  Remove redundant prototype of read_rtx().\n        * genattrtab.c: Likewise.\n        * gencodes.c: Likewise.\n        * genconfig.c: Likewise.\n        * genemit.c: Likewise.\n        * genextract.c: Likewise.\n        * genflags.c: Likewise.\n        * genopinit.c: Likewise.\n        * genoutput.c: Likewise.\n        * genpeep.c: Likewise.\n        * genrecog.c: Likewise.\n\nFrom-SVN: r18794", "tree": {"sha": "8e8fe251c2a002a4dde07af7250735032cb7cb48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e8fe251c2a002a4dde07af7250735032cb7cb48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b93b64e20444a5a105b0cb9935b7841486559aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b93b64e20444a5a105b0cb9935b7841486559aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b93b64e20444a5a105b0cb9935b7841486559aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b93b64e20444a5a105b0cb9935b7841486559aa/comments", "author": null, "committer": null, "parents": [{"sha": "4c5f3fcd5a8c167c4e780243f68bab8ffccf0dc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c5f3fcd5a8c167c4e780243f68bab8ffccf0dc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c5f3fcd5a8c167c4e780243f68bab8ffccf0dc2"}], "stats": {"total": 219, "additions": 66, "deletions": 153}, "files": [{"sha": "fae898a9089e7653847202836cdb014ebc05a828", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b93b64e20444a5a105b0cb9935b7841486559aa", "patch": "@@ -1,3 +1,22 @@\n+Tue Mar 24 12:13:18 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+        * Makefile.in (genconfig.o, genflags.o, gencodes.o, genemit.o,\n+        genopinit.o, genrecog.o, genextract.o, genpeep.o, genattr.o,\n+        genattrtab.o, genoutput.o): Depend on system.h.\n+ \n+        * genattr.c: Include system.h.  Add arguments to various function\n+        prototypes.  Remove redundant prototype of read_rtx().\n+        * genattrtab.c: Likewise.\n+        * gencodes.c: Likewise.\n+        * genconfig.c: Likewise.\n+        * genemit.c: Likewise.\n+        * genextract.c: Likewise.\n+        * genflags.c: Likewise.\n+        * genopinit.c: Likewise.\n+        * genoutput.c: Likewise.\n+        * genpeep.c: Likewise.\n+        * genrecog.c: Likewise.\n+\n 1998-03-24  Martin von Loewis  <loewis@informatik.hu-berlin.de>\n \n \t* c-lang.c (lang_print_xnode): New function."}, {"sha": "ab0a84e6e2eec35e4d5f814622adeed8eb2b5619", "filename": "gcc/Makefile.in", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0b93b64e20444a5a105b0cb9935b7841486559aa", "patch": "@@ -1617,77 +1617,77 @@ genconfig : genconfig.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n \t  genconfig.o $(HOST_RTL) $(HOST_LIBS)\n \n-genconfig.o : genconfig.c $(RTL_H) $(build_xm_file)\n+genconfig.o : genconfig.c $(RTL_H) $(build_xm_file) system.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genconfig.c\n \n genflags : genflags.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n \t genflags.o $(HOST_RTL) $(HOST_LIBS)\n \n-genflags.o : genflags.c $(RTL_H) $(build_xm_file)\n+genflags.o : genflags.c $(RTL_H) $(build_xm_file) system.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genflags.c\n \n gencodes : gencodes.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n \t gencodes.o $(HOST_RTL) $(HOST_LIBS)\n \n-gencodes.o : gencodes.c $(RTL_H) $(build_xm_file)\n+gencodes.o : gencodes.c $(RTL_H) $(build_xm_file) system.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/gencodes.c\n \n genemit : genemit.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n \t genemit.o $(HOST_RTL) $(HOST_LIBS)\n \n-genemit.o : genemit.c $(RTL_H) $(build_xm_file)\n+genemit.o : genemit.c $(RTL_H) $(build_xm_file) system.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genemit.c\n \n genopinit : genopinit.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n \t genopinit.o $(HOST_RTL) $(HOST_LIBS)\n \n-genopinit.o : genopinit.c $(RTL_H) $(build_xm_file)\n+genopinit.o : genopinit.c $(RTL_H) $(build_xm_file) system.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genopinit.c\n \n genrecog : genrecog.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n \t genrecog.o $(HOST_RTL) $(HOST_LIBS)\n \n-genrecog.o : genrecog.c $(RTL_H) $(build_xm_file)\n+genrecog.o : genrecog.c $(RTL_H) $(build_xm_file) system.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genrecog.c\n \n genextract : genextract.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n \t genextract.o $(HOST_RTL) $(HOST_LIBS)\n \n-genextract.o : genextract.c $(RTL_H) $(build_xm_file) insn-config.h\n+genextract.o : genextract.c $(RTL_H) $(build_xm_file) system.h insn-config.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genextract.c\n \n genpeep : genpeep.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n \t genpeep.o $(HOST_RTL) $(HOST_LIBS)\n \n-genpeep.o : genpeep.c $(RTL_H) $(build_xm_file)\n+genpeep.o : genpeep.c $(RTL_H) $(build_xm_file) system.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genpeep.c\n \n genattr : genattr.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n \t genattr.o $(HOST_RTL) $(HOST_LIBS)\n \n-genattr.o : genattr.c $(RTL_H) $(build_xm_file)\n+genattr.o : genattr.c $(RTL_H) $(build_xm_file) system.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genattr.c\n \n genattrtab : genattrtab.o $(HOST_RTL) $(HOST_PRINT) $(HOST_RTLANAL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n \t genattrtab.o $(HOST_RTL) $(HOST_PRINT) $(HOST_RTLANAL) $(HOST_LIBS)\n \n-genattrtab.o : genattrtab.c $(RTL_H)  $(build_xm_file) insn-config.h\n+genattrtab.o : genattrtab.c $(RTL_H)  $(build_xm_file) system.h insn-config.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genattrtab.c\n \n genoutput : genoutput.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n \t genoutput.o $(HOST_RTL) $(HOST_LIBS)\n \n-genoutput.o : genoutput.c $(RTL_H) $(build_xm_file)\n+genoutput.o : genoutput.c $(RTL_H) $(build_xm_file) system.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genoutput.c\n \n gengenrtl : gengenrtl.o $(HOST_LIBDEPS)"}, {"sha": "525dce0c2bb2a1d286ff5fc460d354ec4732e925", "filename": "gcc/genattr.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=0b93b64e20444a5a105b0cb9935b7841486559aa", "patch": "@@ -20,26 +20,17 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n-#include <stdio.h>\n #include \"hconfig.h\"\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-#ifdef NEED_DECLARATION_FREE\n-extern void free PROTO((void *));\n-#endif\n-extern rtx read_rtx PROTO((FILE *));\n-\n char *xmalloc PROTO((unsigned));\n static void fatal ();\n void fancy_abort PROTO((void));"}, {"sha": "d2b2412c485c756ae4605ec04e6ee5d0ea90a677", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=0b93b64e20444a5a105b0cb9935b7841486559aa", "patch": "@@ -102,29 +102,14 @@ Boston, MA 02111-1307, USA.  */\n #else\n #include <varargs.h>\n #endif\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"insn-config.h\"\t/* For REGISTER_CONSTRAINTS */\n \n-#ifdef TIME_WITH_SYS_TIME\n-# include <sys/time.h>\n-# include <time.h>\n-#else\n-# if HAVE_SYS_TIME_H\n-# include <sys/time.h>\n-# else\n-#  include <time.h>\n-#endif\n-#endif\n-\n #ifdef HAVE_SYS_RESOURCE_H\n # include <sys/resource.h>\n #endif\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n /* We must include obstack.h after <sys/time.h>, to avoid lossage with\n    /usr/include/sys/stdtypes.h on Sun OS 4.x.  */\n #include \"obstack.h\"\n@@ -140,13 +125,8 @@ struct obstack *temp_obstack = &obstack2;\n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n char **insn_name_ptr = 0;\n \n-#ifdef NEED_DECLARATION_FREE\n-extern void free ();\n-#endif\n-extern rtx read_rtx ();\n-\n static void fatal ();\n-void fancy_abort ();\n+void fancy_abort PROTO((void));\n \n /* enough space to reserve for printing out ints */\n #define MAX_DIGITS (HOST_BITS_PER_INT * 3 / 10 + 3)"}, {"sha": "1ef7b33774073f0eed4703b1ac6e5a4790da7013", "filename": "gcc/gencodes.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=0b93b64e20444a5a105b0cb9935b7841486559aa", "patch": "@@ -22,8 +22,8 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n-#include <stdio.h>\n #include \"hconfig.h\"\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n \n@@ -33,12 +33,9 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-extern void free ();\n-extern rtx read_rtx ();\n-\n-char *xmalloc ();\n+char *xmalloc PROTO((unsigned));\n static void fatal ();\n-void fancy_abort ();\n+void fancy_abort PROTO((void));\n \n static int insn_code_number;\n "}, {"sha": "69f9240983f28aa1fb35602a83da67c13e8ac239", "filename": "gcc/genconfig.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=0b93b64e20444a5a105b0cb9935b7841486559aa", "patch": "@@ -20,26 +20,17 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n-#include <stdio.h>\n #include \"hconfig.h\"\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-#ifdef NEED_DECLARATION_FREE\n-extern void free ();\n-#endif\n-extern rtx read_rtx ();\n-\n /* flags to determine output of machine description dependent #define's.  */\n static int max_recog_operands;  /* Largest operand number seen.  */\n static int max_dup_operands;    /* Largest number of match_dup in any insn.  */\n@@ -55,9 +46,9 @@ static int max_insns_per_split = 1;\n static int clobbers_seen_this_insn;\n static int dup_operands_seen_this_insn;\n \n-char *xmalloc ();\n+char *xmalloc PROTO((unsigned));\n static void fatal ();\n-void fancy_abort ();\n+void fancy_abort PROTO((void));\n \n /* RECOG_P will be non-zero if this pattern was seen in a context where it will\n    be used to recognize, rather than just generate an insn. "}, {"sha": "ddfaf38308511704dc8c57602a9efbf0c984ee17", "filename": "gcc/genemit.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=0b93b64e20444a5a105b0cb9935b7841486559aa", "patch": "@@ -19,29 +19,20 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n-#include <stdio.h>\n #include \"hconfig.h\"\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-#ifdef NEED_DECLARATION_FREE\n-extern void free ();\n-#endif\n-extern rtx read_rtx ();\n-\n-char *xmalloc ();\n+char *xmalloc PROTO((unsigned));\n static void fatal ();\n-void fancy_abort ();\n+void fancy_abort PROTO((void));\n \n static int max_opno;\n static int max_dup_opno;"}, {"sha": "3236cde6bd154643258d6f9cb33f71879cd2ab4a", "filename": "gcc/genextract.c", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=0b93b64e20444a5a105b0cb9935b7841486559aa", "patch": "@@ -19,27 +19,18 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n-#include <stdio.h>\n #include \"hconfig.h\"\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n #include \"insn-config.h\"\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-#ifdef NEED_DECLARATION_FREE\n-extern void free ();\n-#endif\n-extern rtx read_rtx ();\n-\n /* Names for patterns.  Need to allow linking with print-rtl.  */\n char **insn_name_ptr;\n \n@@ -104,14 +95,14 @@ static int dupnums[MAX_DUP_OPERANDS];\n \n static struct code_ptr *peepholes;\n \n-static void walk_rtx ();\n-static void print_path ();\n-char *xmalloc ();\n-char *xrealloc ();\n+static void walk_rtx PROTO ((rtx, char *));\n+static void print_path PROTO ((char *));\n+char *xmalloc PROTO ((unsigned));\n+char *xrealloc PROTO ((char *, unsigned));\n static void fatal ();\n-static char *copystr ();\n+static char *copystr PROTO ((char *));\n static void mybzero ();\n-void fancy_abort ();\n+void fancy_abort PROTO ((void));\n \f\n static void\n gen_insn (insn)"}, {"sha": "9a9db0209a5e051fa1f4174951882559ae9a778d", "filename": "gcc/genflags.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=0b93b64e20444a5a105b0cb9935b7841486559aa", "patch": "@@ -22,29 +22,20 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n-#include <stdio.h>\n #include \"hconfig.h\"\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-#ifdef NEED_DECLARATION_FREE\n-extern void free ();\n-#endif\n-extern rtx read_rtx ();\n-\n-char *xmalloc ();\n+char *xmalloc PROTO((unsigned));\n static void fatal ();\n-void fancy_abort ();\n+void fancy_abort PROTO((void));\n \n /* Names for patterns.  Need to allow linking with print-rtl.  */\n char **insn_name_ptr;"}, {"sha": "0320c29fc0d0a3afb95b6bef80c9d65ff38eca0d", "filename": "gcc/genopinit.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=0b93b64e20444a5a105b0cb9935b7841486559aa", "patch": "@@ -19,31 +19,20 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n-#include <stdio.h>\n #include \"hconfig.h\"\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n-#include <ctype.h>\n-\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n \n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-#ifdef NEED_DECLARATION_FREE\n-extern void free ();\n-#endif\n-extern rtx read_rtx ();\n-\n-char *xmalloc ();\n+char *xmalloc PROTO((unsigned));\n static void fatal ();\n-void fancy_abort ();\n+void fancy_abort PROTO((void));\n \n /* Many parts of GCC use arrays that are indexed by machine mode and\n    contain the insn codes for pattern in the MD file that perform a given"}, {"sha": "a2d7c713b0d1aad190bdc06e2dff9680a617241d", "filename": "gcc/genoutput.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=0b93b64e20444a5a105b0cb9935b7841486559aa", "patch": "@@ -90,15 +90,11 @@ insn_template[24] to be \"clrd %0\", and insn_n_operands[24] to be 1.\n It would not make an case in output_insn_hairy because the template\n given in the entry is a constant (it does not start with `*').  */\n \f\n-#include <stdio.h>\n #include \"hconfig.h\"\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n /* No instruction can have more operands than this.\n    Sorry for this arbitrary limit, but what machine will\n    have an instruction with this many operands?  */\n@@ -111,18 +107,13 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-#ifdef NEED_DECLARATION_FREE\n-extern void free ();\n-#endif\n-extern rtx read_rtx ();\n-\n-char *xmalloc ();\n+char *xmalloc PROTO((unsigned));\n static void fatal ();\n-void fancy_abort ();\n+void fancy_abort PROTO((void));\n static void error ();\n static void mybcopy ();\n static void mybzero ();\n-static int n_occurrences ();\n+static int n_occurrences PROTO((int, char *));\n \n /* insns in the machine description are assigned sequential code numbers\n    that are used by insn-recog.c (produced by genrecog) to communicate"}, {"sha": "46646d3402b0f8b8eb1e9c7206914538d9dd8a62", "filename": "gcc/genpeep.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=0b93b64e20444a5a105b0cb9935b7841486559aa", "patch": "@@ -19,26 +19,17 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n-#include <stdio.h>\n #include \"hconfig.h\"\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-#ifdef NEED_DECLARATION_FREE\n-extern void free ();\n-#endif\n-extern rtx read_rtx ();\n-\n /* While tree-walking an instruction pattern, we keep a chain\n    of these `struct link's to record how to get down to the\n    current position.  In each one, POS is the operand number,\n@@ -52,10 +43,10 @@ struct link\n   int vecelt;\n };\n \n-char *xmalloc ();\n-static void match_rtx ();\n+char *xmalloc PROTO((unsigned));\n+static void match_rtx PROTO((rtx, struct link *, int));\n static void fatal ();\n-void fancy_abort ();\n+void fancy_abort PROTO((void));\n \n static int max_opno;\n \n@@ -68,8 +59,8 @@ static int n_operands;\n \n static int insn_code_number = 0;\n \n-static void print_path ();\n-static void print_code ();\n+static void print_path PROTO((struct link *));\n+static void print_code PROTO((RTX_CODE));\n \f\n static void\n gen_peephole (peep)"}, {"sha": "e938298f275b15e74b79f0fc7a009d0ccfcc4e65", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b93b64e20444a5a105b0cb9935b7841486559aa/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=0b93b64e20444a5a105b0cb9935b7841486559aa", "patch": "@@ -46,26 +46,17 @@ Boston, MA 02111-1307, USA.  */\n    which returns 0 if the rtl could not be split, or\n    it returns the split rtl in a SEQUENCE.  */\n \n-#include <stdio.h>\n #include \"hconfig.h\"\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-#ifdef NEED_DECLARATION_FREE\n-extern void free ();\n-#endif\n-extern rtx read_rtx ();\n-\n /* Data structure for a listhead of decision trees.  The alternatives\n    to a node are kept in a doublely-linked list so we can easily add nodes\n    to the proper place when merging.  */"}]}