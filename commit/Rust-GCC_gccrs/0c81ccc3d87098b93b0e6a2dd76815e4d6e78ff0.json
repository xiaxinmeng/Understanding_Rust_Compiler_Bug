{"sha": "0c81ccc3d87098b93b0e6a2dd76815e4d6e78ff0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM4MWNjYzNkODcwOThiOTNiMGU2YTJkZDc2ODE1ZTRkNmU3OGZmMA==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-11-16T21:00:58Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-11-16T21:00:58Z"}, "message": "PR fortran/48958 - Add runtime diagnostics for SIZE intrinsic function\n\nAdd code for runtime checking of status of ALLOCATABLE and POINTER\narguments to the SIZE intrinsic when -fcheck=pointer is specified.\n\ngcc/fortran/ChangeLog:\n\n\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Generate runtime\n\tchecking code for status of argument.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/pr48958.f90: New test.", "tree": {"sha": "5ffcbfe00738b49706f8003bd3fb49e13badfba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ffcbfe00738b49706f8003bd3fb49e13badfba9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c81ccc3d87098b93b0e6a2dd76815e4d6e78ff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c81ccc3d87098b93b0e6a2dd76815e4d6e78ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c81ccc3d87098b93b0e6a2dd76815e4d6e78ff0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c81ccc3d87098b93b0e6a2dd76815e4d6e78ff0/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a71a2255bc692e41341ad04360925a3c7443ba16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a71a2255bc692e41341ad04360925a3c7443ba16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a71a2255bc692e41341ad04360925a3c7443ba16"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "d17b623924c63cb3c04f6b86f65799cc3089e6df", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c81ccc3d87098b93b0e6a2dd76815e4d6e78ff0/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c81ccc3d87098b93b0e6a2dd76815e4d6e78ff0/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=0c81ccc3d87098b93b0e6a2dd76815e4d6e78ff0", "patch": "@@ -7929,6 +7929,35 @@ gfc_conv_intrinsic_size (gfc_se * se, gfc_expr * expr)\n       && strcmp (e->ref->u.c.component->name, \"_data\") == 0)\n     sym = e->symtree->n.sym;\n \n+  if ((gfc_option.rtcheck & GFC_RTCHECK_POINTER)\n+      && e\n+      && (e->expr_type == EXPR_VARIABLE || e->expr_type == EXPR_FUNCTION))\n+    {\n+      symbol_attribute attr;\n+      char *msg;\n+\n+      attr = gfc_expr_attr (e);\n+      if (attr.allocatable)\n+\tmsg = xasprintf (\"Allocatable argument '%s' is not allocated\",\n+\t\t\t e->symtree->n.sym->name);\n+      else if (attr.pointer)\n+\tmsg = xasprintf (\"Pointer argument '%s' is not associated\",\n+\t\t\t e->symtree->n.sym->name);\n+      else\n+\tgoto end_arg_check;\n+\n+      argse.descriptor_only = 1;\n+      gfc_conv_expr_descriptor (&argse, actual->expr);\n+      tree temp = gfc_conv_descriptor_data_get (argse.expr);\n+      tree cond = fold_build2_loc (input_location, EQ_EXPR,\n+\t\t\t\t   logical_type_node, temp,\n+\t\t\t\t   fold_convert (TREE_TYPE (temp),\n+\t\t\t\t\t\t null_pointer_node));\n+      gfc_trans_runtime_check (true, false, cond, &argse.pre, &e->where, msg);\n+      free (msg);\n+    }\n+ end_arg_check:\n+\n   argse.data_not_needed = 1;\n   if (gfc_is_class_array_function (e))\n     {"}, {"sha": "2b109374f4014067310f2248223952ea4ad2195a", "filename": "gcc/testsuite/gfortran.dg/pr48958.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c81ccc3d87098b93b0e6a2dd76815e4d6e78ff0/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr48958.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c81ccc3d87098b93b0e6a2dd76815e4d6e78ff0/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr48958.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr48958.f90?ref=0c81ccc3d87098b93b0e6a2dd76815e4d6e78ff0", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=pointer -fdump-tree-original\" }\n+! { dg-shouldfail \"Fortran runtime error: Allocatable argument 'a' is not allocated\" }\n+! { dg-output \"At line 13 .*\" }\n+! PR48958 - Add runtime diagnostics for SIZE intrinsic function\n+\n+program p\n+  integer :: n\n+  integer,  allocatable :: a(:)\n+  integer,  pointer     :: b(:)\n+  class(*), allocatable :: c(:)\n+  integer               :: d(10)\n+  print *, size (a)\n+  print *, size (b)\n+  print *, size (c)\n+  print *, size (d)\n+  print *, size (f(n))\n+contains\n+  function f (n)\n+    integer, intent(in) :: n\n+    real, allocatable   :: f(:)\n+  end function f\n+end\n+\n+! { dg-final { scan-tree-dump-times \"_gfortran_runtime_error_at\" 4 \"original\" } }"}]}