{"sha": "4bd2511b3c0f8bf4d447d5765c0b3a247c66ca89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJkMjUxMWIzYzBmOGJmNGQ0NDdkNTc2NWMwYjNhMjQ3YzY2Y2E4OQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2014-05-02T05:46:38Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-05-02T05:46:38Z"}, "message": "revert: c-parser.c (c_parser_sizeof_expression): Reorganize slightly to avoid goto.\n\n2014-05-01  Jeff Law  <law@redhat.com>\n\n\tRevert:\n\n\t2014-04-24  Prathamesh Kulkarni  <bilbotheelffriend@gmail.com>\n\t* c-parser.c (c_parser_sizeof_expression): Reorganize slightly to\n\tavoid goto.\n\nFrom-SVN: r209999", "tree": {"sha": "7c60ee1f177375d0d8f015913516c97b9fcf11e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c60ee1f177375d0d8f015913516c97b9fcf11e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bd2511b3c0f8bf4d447d5765c0b3a247c66ca89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd2511b3c0f8bf4d447d5765c0b3a247c66ca89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bd2511b3c0f8bf4d447d5765c0b3a247c66ca89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd2511b3c0f8bf4d447d5765c0b3a247c66ca89/comments", "author": null, "committer": null, "parents": [{"sha": "6a358dcb65c409f966347dc4cfce1f53942f7173", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a358dcb65c409f966347dc4cfce1f53942f7173", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a358dcb65c409f966347dc4cfce1f53942f7173"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "4931e79e0d0023b6d03023f342d8d600d7aa787e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd2511b3c0f8bf4d447d5765c0b3a247c66ca89/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd2511b3c0f8bf4d447d5765c0b3a247c66ca89/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=4bd2511b3c0f8bf4d447d5765c0b3a247c66ca89", "patch": "@@ -1,3 +1,11 @@\n+2014-05-01  Jeff Law  <law@redhat.com>\n+\n+\tRevert:\n+\n+\t2014-04-24  Prathamesh Kulkarni  <bilbotheelffriend@gmail.com>\n+\t* c-parser.c (c_parser_sizeof_expression): Reorganize slightly to\n+\tavoid goto.\n+\n 2014-05-02  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/60784\n@@ -88,11 +96,6 @@\n \t(process_init_element): Add location_t parameter.  Pass loc to\n \toutput_init_element.\n \n-2014-04-24  Prathamesh Kulkarni  <bilbotheelffriend@gmail.com>\n-\n-\t* c-parser.c (c_parser_sizeof_expression): Reorganize slightly to\n-\tavoid goto.\n-\n 2014-04-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_omp_atomic): Allow seq_cst before"}, {"sha": "7947355c2150485880105962c4fd1d71b5592711", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd2511b3c0f8bf4d447d5765c0b3a247c66ca89/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd2511b3c0f8bf4d447d5765c0b3a247c66ca89/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=4bd2511b3c0f8bf4d447d5765c0b3a247c66ca89", "patch": "@@ -6529,29 +6529,30 @@ c_parser_sizeof_expression (c_parser *parser)\n \t  return ret;\n \t}\n       if (c_parser_next_token_is (parser, CPP_OPEN_BRACE))\n-\texpr = c_parser_postfix_expression_after_paren_type (parser,\n-\t\t\t\t\t\t\t     type_name,\n-\t\t\t\t\t\t\t     expr_loc);\n-      else\n \t{\n-\t  /* sizeof ( type-name ).  */\n-\t  c_inhibit_evaluation_warnings--;\n-\t  in_sizeof--;\n-\t  return c_expr_sizeof_type (expr_loc, type_name);\n+\t  expr = c_parser_postfix_expression_after_paren_type (parser,\n+\t\t\t\t\t\t\t       type_name,\n+\t\t\t\t\t\t\t       expr_loc);\n+\t  goto sizeof_expr;\n \t}\n+      /* sizeof ( type-name ).  */\n+      c_inhibit_evaluation_warnings--;\n+      in_sizeof--;\n+      return c_expr_sizeof_type (expr_loc, type_name);\n     }\n   else\n     {\n       expr_loc = c_parser_peek_token (parser)->location;\n       expr = c_parser_unary_expression (parser);\n+    sizeof_expr:\n+      c_inhibit_evaluation_warnings--;\n+      in_sizeof--;\n+      mark_exp_read (expr.value);\n+      if (TREE_CODE (expr.value) == COMPONENT_REF\n+\t  && DECL_C_BIT_FIELD (TREE_OPERAND (expr.value, 1)))\n+\terror_at (expr_loc, \"%<sizeof%> applied to a bit-field\");\n+      return c_expr_sizeof_expr (expr_loc, expr);\n     }\n-  c_inhibit_evaluation_warnings--;\n-  in_sizeof--;\n-  mark_exp_read (expr.value);\n-  if (TREE_CODE (expr.value) == COMPONENT_REF\n-      && DECL_C_BIT_FIELD (TREE_OPERAND (expr.value, 1)))\n-    error_at (expr_loc, \"%<sizeof%> applied to a bit-field\");\n-  return c_expr_sizeof_expr (expr_loc, expr);\n }\n \n /* Parse an alignof expression.  */"}]}