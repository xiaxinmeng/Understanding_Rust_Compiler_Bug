{"sha": "616f6d8469ae17f3916cfb0d4c05acb3557b74df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE2ZjZkODQ2OWFlMTdmMzkxNmNmYjBkNGMwNWFjYjM1NTdiNzRkZg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-01-14T20:05:29Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-01-14T20:05:29Z"}, "message": "system.h: Poison PROMOTED_MODE\n\n\t* system.h: Poison PROMOTED_MODE\n\t* integrate.c (expand_inline_function): Don't mention the\n\tPROMOTED_MODE.\n\t* loop.c (update_giv_derive): Same.\n\t* tree.h (DECL_RTL): Same.\n\nFrom-SVN: r75878", "tree": {"sha": "266377d388dc82cd9923f187f3e97455f58d8fe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/266377d388dc82cd9923f187f3e97455f58d8fe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/616f6d8469ae17f3916cfb0d4c05acb3557b74df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616f6d8469ae17f3916cfb0d4c05acb3557b74df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/616f6d8469ae17f3916cfb0d4c05acb3557b74df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616f6d8469ae17f3916cfb0d4c05acb3557b74df/comments", "author": null, "committer": null, "parents": [{"sha": "b3e5b4528dfa0632a4c4eda55b432d1f25de093f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3e5b4528dfa0632a4c4eda55b432d1f25de093f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3e5b4528dfa0632a4c4eda55b432d1f25de093f"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "d4e26153f661a74e80cd5d0d41f9d4d252e722a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616f6d8469ae17f3916cfb0d4c05acb3557b74df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616f6d8469ae17f3916cfb0d4c05acb3557b74df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=616f6d8469ae17f3916cfb0d4c05acb3557b74df", "patch": "@@ -1,3 +1,11 @@\n+2003-01-14  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* system.h: Poison PROMOTED_MODE\n+\t* integrate.c (expand_inline_function): Don't mention the\n+\tPROMOTED_MODE.\n+\t* loop.c (update_giv_derive): Same.\n+\t* tree.h (DECL_RTL): Same.\n+\n 2004-01-14  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \tPR target/9365\n@@ -117,7 +125,7 @@\n \n 2004-01-13  Vladimir Makarov  <vmakarov@redhat.com>\n \n-        * rtl.def: Add comment about new option in automata_option.\n+\t* rtl.def: Add comment about new option in automata_option.\n \t\n \t* genautomata.c (PROGRESS_OPTION): New macro.\n \t(progress_flag): New global variable."}, {"sha": "47327de03b9ec246f5009623e454e06da3be6d7f", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616f6d8469ae17f3916cfb0d4c05acb3557b74df/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616f6d8469ae17f3916cfb0d4c05acb3557b74df/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=616f6d8469ae17f3916cfb0d4c05acb3557b74df", "patch": "@@ -771,7 +771,7 @@ expand_inline_function (tree fndecl, tree parms, rtx target, int ignore,\n \t\tabort ();\n \n \t      /* The mode if LOC and ARG can differ if LOC was a variable\n-\t\t that had its mode promoted via PROMOTED_MODE.  */\n+\t\t that had its mode promoted.  */\n \t      arg_vals[i] = convert_modes (pmode,\n \t\t\t\t\t   TYPE_MODE (TREE_TYPE (arg)),\n \t\t\t\t\t   expand_expr (arg, NULL_RTX, mode,"}, {"sha": "96f49998e6959c23cde92dbcf02afa2c64461b2e", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616f6d8469ae17f3916cfb0d4c05acb3557b74df/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616f6d8469ae17f3916cfb0d4c05acb3557b74df/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=616f6d8469ae17f3916cfb0d4c05acb3557b74df", "patch": "@@ -6212,7 +6212,7 @@ update_giv_derive (const struct loop *loop, rtx p)\n    *MULT_VAL to CONST0_RTX, and store the invariant into *INC_VAL.\n \n    We also want to detect a BIV when it corresponds to a variable\n-   whose mode was promoted via PROMOTED_MODE.  In that case, an increment\n+   whose mode was promoted.  In that case, an increment\n    of the variable may be a PLUS that adds a SUBREG of that variable to\n    an invariant and then sign- or zero-extends the result of the PLUS\n    into the variable."}, {"sha": "02863c255b37b7bc7a8328f795678a4d4a50358e", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616f6d8469ae17f3916cfb0d4c05acb3557b74df/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616f6d8469ae17f3916cfb0d4c05acb3557b74df/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=616f6d8469ae17f3916cfb0d4c05acb3557b74df", "patch": "@@ -622,7 +622,8 @@ typedef char _Bool;\n \tLIBGCC_NEEDS_DOUBLE FINAL_PRESCAN_LABEL DEFAULT_CALLER_SAVES\t   \\\n \tLOAD_ARGS_REVERSED MAX_INTEGER_COMPUTATION_MODE\t\t\t   \\\n \tCONVERT_HARD_REGISTER_TO_SSA_P ASM_OUTPUT_MAIN_SOURCE_FILENAME\t   \\\n-\tFIRST_INSN_ADDRESS TEXT_SECTION SHARED_BSS_SECTION_ASM_OP\n+\tFIRST_INSN_ADDRESS TEXT_SECTION SHARED_BSS_SECTION_ASM_OP\t   \\\n+\tPROMOTED_MODE\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "8f4334f0f58ea08aa47837fedf722de5b7d18539", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616f6d8469ae17f3916cfb0d4c05acb3557b74df/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616f6d8469ae17f3916cfb0d4c05acb3557b74df/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=616f6d8469ae17f3916cfb0d4c05acb3557b74df", "patch": "@@ -1346,12 +1346,7 @@ struct tree_type GTY(())\n    field.  Always equal to TYPE_MODE (TREE_TYPE (decl)) except for a\n    FIELD_DECL.  */\n #define DECL_MODE(NODE) (DECL_CHECK (NODE)->decl.mode)\n-/* Holds the RTL expression for the value of a variable or function.  If\n-   PROMOTED_MODE is defined, the mode of this expression may not be same\n-   as DECL_MODE.  In that case, DECL_MODE contains the mode corresponding\n-   to the variable's data type, while the mode\n-   of DECL_RTL is the mode actually used to contain the data.\n-\n+/* Holds the RTL expression for the value of a variable or function.\n    This value can be evaluated lazily for functions, variables with\n    static storage duration, and labels.  */\n #define DECL_RTL(NODE)\t\t\t\t\t\\"}]}