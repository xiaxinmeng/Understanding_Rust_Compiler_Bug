{"sha": "4a27a739a266b3312bc85742fd98634e492d3c14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEyN2E3MzlhMjY2YjMzMTJiYzg1NzQyZmQ5ODYzNGU0OTJkM2MxNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-06-02T17:24:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-06-02T17:24:09Z"}, "message": "type_traits (is_reference, [...]): Remove.\n\n2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1_impl/type_traits (is_reference, add_reference,\n\tremove_reference): Remove.\n\t* include/tr1/type_traits (is_reference, add_reference,\n\tremove_reference): Add.\n\t* include/std/type_traits (is_lvalue_reference, is_rvalue_reference,\n\tis_reference, remove_reference, add_lvalue_reference,\n\tadd_rvalue_reference): Add.\n\t* include/tr1_impl/boost_shared_ptr.h (operator*): Adjust.\n\t* testsuite/20_util/add_lvalue_reference/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/20_util/add_lvalue_reference/value.cc: Likewise.\n\t* testsuite/20_util/add_rvalue_reference/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/add_rvalue_reference/value.cc: Likewise.\n\t* testsuite/20_util/is_lvalue_reference/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/is_lvalue_reference/requirements/\n\ttypedefs.cc: Likewise.\n\t* testsuite/20_util/is_lvalue_reference/value.cc: Likewise.\n\t* testsuite/20_util/is_rvalue_reference/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/is_rvalue_reference/requirements/\n\ttypedefs.cc: Likewise.\n\t* testsuite/20_util/is_rvalue_reference/value.cc: Likewise.\n\t* testsuite/20_util/is_reference/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/is_reference/requirements/typedefs.cc: Likewise.\n\t* testsuite/20_util/is_reference/value.cc: Likewise.\n\t* testsuite/20_util/remove_reference/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/20_util/remove_reference/value.cc: Likewise.\n\n\t* testsuite/tr1/4_metaprogramming/add_const/requirements/\n\ttypedefs.cc: Move...\n\t* testsuite/tr1/4_metaprogramming/add_const/value.cc: ... here.\n\t* testsuite/tr1/4_metaprogramming/add_cv/requirements/\n\ttypedefs.cc: Move...\n\t* testsuite/tr1/4_metaprogramming/add_cv/value.cc: ... here.\n\t* testsuite/tr1/4_metaprogramming/add_pointer/requirements/\n\ttypedefs.cc: Move...\n\t* testsuite/tr1/4_metaprogramming/add_pointer/value.cc: ... here.\n\t* testsuite/tr1/4_metaprogramming/add_reference/requirements/\n\ttypedefs.cc: Move...\n\t* testsuite/tr1/4_metaprogramming/add_reference/value.cc: ... here.\n\t* testsuite/tr1/4_metaprogramming/add_volatile/requirements/\n\ttypedefs.cc: Move...\n\t* testsuite/tr1/4_metaprogramming/add_volatile/value.cc: ... here.\n\t* testsuite/tr1/4_metaprogramming/aligned_storage/requirements/\n\ttypedefs.cc: Move...\n\t* testsuite/tr1/4_metaprogramming/aligned_storage/value.cc: ... here.\n\nFrom-SVN: r125283", "tree": {"sha": "6eba88ad4b4f7e007627f9108eb5ae1d828057a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eba88ad4b4f7e007627f9108eb5ae1d828057a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a27a739a266b3312bc85742fd98634e492d3c14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a27a739a266b3312bc85742fd98634e492d3c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a27a739a266b3312bc85742fd98634e492d3c14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a27a739a266b3312bc85742fd98634e492d3c14/comments", "author": null, "committer": null, "parents": [{"sha": "4620d81e72dcc7e019f4b3c4f99cbf5b68869c5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4620d81e72dcc7e019f4b3c4f99cbf5b68869c5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4620d81e72dcc7e019f4b3c4f99cbf5b68869c5e"}], "stats": {"total": 887, "additions": 828, "deletions": 59}, "files": [{"sha": "4655e73aa01894c21c56b31ba28b26924e33b363", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -1,3 +1,56 @@\n+2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1_impl/type_traits (is_reference, add_reference,\n+\tremove_reference): Remove.\n+\t* include/tr1/type_traits (is_reference, add_reference,\n+\tremove_reference): Add.\n+\t* include/std/type_traits (is_lvalue_reference, is_rvalue_reference,\n+\tis_reference, remove_reference, add_lvalue_reference,\n+\tadd_rvalue_reference): Add.\n+\t* include/tr1_impl/boost_shared_ptr.h (operator*): Adjust.\n+\t* testsuite/20_util/add_lvalue_reference/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/20_util/add_lvalue_reference/value.cc: Likewise.\n+\t* testsuite/20_util/add_rvalue_reference/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/add_rvalue_reference/value.cc: Likewise.\n+\t* testsuite/20_util/is_lvalue_reference/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_lvalue_reference/requirements/\n+\ttypedefs.cc: Likewise.\n+\t* testsuite/20_util/is_lvalue_reference/value.cc: Likewise.\n+\t* testsuite/20_util/is_rvalue_reference/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_rvalue_reference/requirements/\n+\ttypedefs.cc: Likewise.\n+\t* testsuite/20_util/is_rvalue_reference/value.cc: Likewise.\n+\t* testsuite/20_util/is_reference/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_reference/requirements/typedefs.cc: Likewise.\n+\t* testsuite/20_util/is_reference/value.cc: Likewise.\n+\t* testsuite/20_util/remove_reference/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/20_util/remove_reference/value.cc: Likewise.\n+\n+\t* testsuite/tr1/4_metaprogramming/add_const/requirements/\n+\ttypedefs.cc: Move...\n+\t* testsuite/tr1/4_metaprogramming/add_const/value.cc: ... here.\n+\t* testsuite/tr1/4_metaprogramming/add_cv/requirements/\n+\ttypedefs.cc: Move...\n+\t* testsuite/tr1/4_metaprogramming/add_cv/value.cc: ... here.\n+\t* testsuite/tr1/4_metaprogramming/add_pointer/requirements/\n+\ttypedefs.cc: Move...\n+\t* testsuite/tr1/4_metaprogramming/add_pointer/value.cc: ... here.\n+\t* testsuite/tr1/4_metaprogramming/add_reference/requirements/\n+\ttypedefs.cc: Move...\n+\t* testsuite/tr1/4_metaprogramming/add_reference/value.cc: ... here.\n+\t* testsuite/tr1/4_metaprogramming/add_volatile/requirements/\n+\ttypedefs.cc: Move...\n+\t* testsuite/tr1/4_metaprogramming/add_volatile/value.cc: ... here.\n+\t* testsuite/tr1/4_metaprogramming/aligned_storage/requirements/\n+\ttypedefs.cc: Move...\n+\t* testsuite/tr1/4_metaprogramming/aligned_storage/value.cc: ... here.\n+\n 2007-06-02  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "5113184795a0d3bb00a0c2b9ffa90971f48d21b5", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 75, "deletions": 2, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -62,6 +62,77 @@\n \n namespace std\n {\n+  // Primary classification traits.\n+  template<typename>\n+    struct is_lvalue_reference\n+    : public false_type { };\n+\n+  template<typename _Tp>\n+    struct is_lvalue_reference<_Tp&>\n+    : public true_type { };\n+\n+  template<typename>\n+    struct is_rvalue_reference\n+    : public false_type { };\n+\n+  template<typename _Tp>\n+    struct is_rvalue_reference<_Tp&&>\n+    : public true_type { };\n+\n+  // Secondary classification traits.\n+  template<typename _Tp>\n+    struct is_reference\n+    : public integral_constant<bool, (is_lvalue_reference<_Tp>::value\n+\t\t\t\t      || is_rvalue_reference<_Tp>::value)>\n+    { };\n+\n+  // Reference transformations.\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp,\n+\t   bool = is_object<_Tp>::value || is_function<_Tp>::value,\n+\t   bool = is_rvalue_reference<_Tp>::value>\n+    struct __add_lvalue_reference_helper\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct __add_lvalue_reference_helper<_Tp, true, false>\n+    { typedef _Tp&   type; };\n+\n+  template<typename _Tp>\n+    struct __add_lvalue_reference_helper<_Tp, false, true>\n+    { typedef typename remove_reference<_Tp>::type&   type; };\n+\n+  template<typename _Tp>\n+    struct add_lvalue_reference\n+    : public __add_lvalue_reference_helper<_Tp>\n+    { };\n+\n+  template<typename _Tp,\n+\t   bool = is_object<_Tp>::value || is_function<_Tp>::value>\n+    struct __add_rvalue_reference_helper\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct __add_rvalue_reference_helper<_Tp, true>\n+    { typedef _Tp&&   type; };\n+\n+  template<typename _Tp>\n+    struct add_rvalue_reference\n+    : public __add_rvalue_reference_helper<_Tp>\n+    { };\n+\n+  // Scalar properties and transformations.\n   template<typename _Tp,\n \t   bool = is_integral<_Tp>::value,\n \t   bool = is_floating_point<_Tp>::value>\n@@ -88,6 +159,7 @@ namespace std\n \t\t\t\t      && !is_signed<_Tp>::value)>\n     { };\n \n+  // Member introspection.\n   template<typename _Tp>\n     struct is_pod\n     : public integral_constant<bool, __is_pod(_Tp)>\n@@ -133,8 +205,7 @@ namespace std\n     : public integral_constant<bool, __is_base_of(_Base, _Derived)>\n     { };\n \n-  // XXX FIXME\n-  // The C++0x specifications are different, see N2255.\n+  // Relationships between types.\n   template<typename _From, typename _To>\n     struct __is_convertible_simple\n     : public __sfinae_types\n@@ -178,6 +249,8 @@ namespace std\n \t\t\t\t   || (__is_int_or_cref<_To>::__value\n \t\t\t\t       && !is_void<_From>::value)); };\n \n+  // XXX FIXME\n+  // The C++0x specifications are different, see N2255.\n   template<typename _From, typename _To>\n     struct is_convertible\n     : public integral_constant<bool,"}, {"sha": "b9b60cfbda13318ff0bbcd8fcca57b25b061d178", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 46, "deletions": 14, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -75,22 +75,12 @@ namespace tr1\n   _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type const volatile>, _Value)\n \n   template<typename>\n-    struct is_signed\n+    struct is_reference\n     : public false_type { };\n-  _DEFINE_SPEC(0, is_signed, signed char, true)\n-  _DEFINE_SPEC(0, is_signed, short, true)\n-  _DEFINE_SPEC(0, is_signed, int, true)\n-  _DEFINE_SPEC(0, is_signed, long, true)\n-  _DEFINE_SPEC(0, is_signed, long long, true)\n \n-  template<typename>\n-    struct is_unsigned\n-    : public false_type { };\n-  _DEFINE_SPEC(0, is_unsigned, unsigned char, true)\n-  _DEFINE_SPEC(0, is_unsigned, unsigned short, true)\n-  _DEFINE_SPEC(0, is_unsigned, unsigned int, true)\n-  _DEFINE_SPEC(0, is_unsigned, unsigned long, true)\n-  _DEFINE_SPEC(0, is_unsigned, unsigned long long, true)\n+  template<typename _Tp>\n+    struct is_reference<_Tp&>\n+    : public true_type { };\n \n   template<typename _Tp>\n     struct is_pod\n@@ -132,6 +122,24 @@ namespace tr1\n     : public integral_constant<bool, is_pod<_Tp>::value>\n     { };\n \n+  template<typename>\n+    struct is_signed\n+    : public false_type { };\n+  _DEFINE_SPEC(0, is_signed, signed char, true)\n+  _DEFINE_SPEC(0, is_signed, short, true)\n+  _DEFINE_SPEC(0, is_signed, int, true)\n+  _DEFINE_SPEC(0, is_signed, long, true)\n+  _DEFINE_SPEC(0, is_signed, long long, true)\n+\n+  template<typename>\n+    struct is_unsigned\n+    : public false_type { };\n+  _DEFINE_SPEC(0, is_unsigned, unsigned char, true)\n+  _DEFINE_SPEC(0, is_unsigned, unsigned short, true)\n+  _DEFINE_SPEC(0, is_unsigned, unsigned int, true)\n+  _DEFINE_SPEC(0, is_unsigned, unsigned long, true)\n+  _DEFINE_SPEC(0, is_unsigned, unsigned long long, true)\n+\n   template<typename _Base, typename _Derived>\n     struct __is_base_of_helper\n     {\n@@ -198,6 +206,30 @@ namespace tr1\n \t\t\t       __is_convertible_helper<_From, _To>::__value>\n     { };\n \n+  /// @brief  reference modifications [4.7.2].\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp     type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp     type; };\n+\n+  // NB: Careful with reference to void.\n+  template<typename _Tp, bool = (is_void<_Tp>::value\n+\t\t\t\t || is_reference<_Tp>::value)>\n+    struct __add_reference_helper\n+    { typedef _Tp&    type; };\n+\n+  template<typename _Tp>\n+    struct __add_reference_helper<_Tp, true>\n+    { typedef _Tp     type; };\n+\n+  template<typename _Tp>\n+    struct add_reference\n+    : public __add_reference_helper<_Tp>\n+    { };\n+\n #undef _DEFINE_SPEC_0_HELPER\n #undef _DEFINE_SPEC\n #undef _DEFINE_SPEC_BODY"}, {"sha": "d211055c58ad34948f7ae2abfba5b69d88f27414", "filename": "libstdc++-v3/include/tr1_impl/boost_shared_ptr.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fboost_shared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fboost_shared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fboost_shared_ptr.h?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -647,7 +647,11 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n         { __shared_ptr(__p, __d).swap(*this); }\n \n       // Allow class instantiation when _Tp is [cv-qual] void.\n-      typename add_reference<_Tp>::type\n+#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+      typename std::add_lvalue_reference<_Tp>::type\n+#else\n+      typename std::tr1::add_reference<_Tp>::type\n+#endif\n       operator*() const // never throws\n       {\n \t_GLIBCXX_DEBUG_ASSERT(_M_ptr != 0);"}, {"sha": "9035fafece374824a34cb0c515bd5378e96e9f4b", "filename": "libstdc++-v3/include/tr1_impl/type_traits", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -132,14 +132,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     : public false_type { };\n   _DEFINE_SPEC(1, is_pointer, _Tp*, true)\n  \n-  template<typename>\n-    struct is_reference\n-    : public false_type { };\n-\n-  template<typename _Tp>\n-    struct is_reference<_Tp&>\n-    : public true_type { };\n-\n   template<typename>\n     struct is_member_object_pointer\n     : public false_type { };\n@@ -343,30 +335,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       add_const<typename add_volatile<_Tp>::type>::type     type;\n     };\n \n-  /// @brief  reference modifications [4.7.2].\n-  template<typename _Tp>\n-    struct remove_reference\n-    { typedef _Tp     type; };\n-\n-  template<typename _Tp>\n-    struct remove_reference<_Tp&>\n-    { typedef _Tp     type; };\n-\n-  // NB: Careful with reference to void.\n-  template<typename _Tp, bool = (is_void<_Tp>::value\n-\t\t\t\t || is_reference<_Tp>::value)>\n-    struct __add_reference_helper\n-    { typedef _Tp&    type; };\n-\n-  template<typename _Tp>\n-    struct __add_reference_helper<_Tp, true>\n-    { typedef _Tp     type; };\n-\n-  template<typename _Tp>\n-    struct add_reference\n-    : public __add_reference_helper<_Tp>\n-    { };\n-\n   /// @brief  array modifications [4.7.3].\n   template<typename _Tp>\n     struct remove_extent"}, {"sha": "3eefabc27b67f799156f822c7a28e8b6f19f241b", "filename": "libstdc++-v3/testsuite/20_util/add_lvalue_reference/requirements/explicit_instantiation.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_lvalue_reference%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_lvalue_reference%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_lvalue_reference%2Frequirements%2Fexplicit_instantiation.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct add_lvalue_reference<test_type>;\n+}"}, {"sha": "b4f4be44a0f8003e3a86be7c2e58b147856a6242", "filename": "libstdc++-v3/testsuite/20_util/add_lvalue_reference/value.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_lvalue_reference%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_lvalue_reference%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_lvalue_reference%2Fvalue.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::add_lvalue_reference;\n+  using std::is_same;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (is_same<add_lvalue_reference<int>::type, int&>::value) );\n+  VERIFY( (is_same<add_lvalue_reference<int&>::type, int&>::value) );\n+  VERIFY( (is_same<add_lvalue_reference<const int>::type, const int&>::value) );\n+  VERIFY( (is_same<add_lvalue_reference<int*>::type, int*&>::value) );\n+  VERIFY( (is_same<add_lvalue_reference<ClassType&>::type, ClassType&>::value) );\n+  VERIFY( (is_same<add_lvalue_reference<ClassType>::type, ClassType&>::value) );\n+  VERIFY( (is_same<add_lvalue_reference<int(int)>::type, int(&)(int)>::value) );  \n+  VERIFY( (is_same<add_lvalue_reference<int&&>::type, int&>::value) );\n+  VERIFY( (is_same<add_lvalue_reference<ClassType&&>::type, ClassType&>::value) );\n+  VERIFY( (is_same<add_lvalue_reference<void>::type, void>::value) );\n+  VERIFY( (is_same<add_lvalue_reference<const void>::type, const void>::value) );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6dd1f9bd7314749cf63a46aad34e6c4c66a105b6", "filename": "libstdc++-v3/testsuite/20_util/add_rvalue_reference/requirements/explicit_instantiation.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_rvalue_reference%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_rvalue_reference%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_rvalue_reference%2Frequirements%2Fexplicit_instantiation.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct add_rvalue_reference<test_type>;\n+}"}, {"sha": "27099152c069967fffe41a63c496f36e2305b761", "filename": "libstdc++-v3/testsuite/20_util/add_rvalue_reference/value.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_rvalue_reference%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_rvalue_reference%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_rvalue_reference%2Fvalue.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::add_rvalue_reference;\n+  using std::is_same;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (is_same<add_rvalue_reference<int>::type, int&&>::value) );\n+  VERIFY( (is_same<add_rvalue_reference<int&&>::type, int&&>::value) );\n+  VERIFY( (is_same<add_rvalue_reference<const int>::type, const int&&>::value) );\n+  VERIFY( (is_same<add_rvalue_reference<int*>::type, int*&&>::value) );\n+  VERIFY( (is_same<add_rvalue_reference<ClassType&&>::type, ClassType&&>::value) );\n+  VERIFY( (is_same<add_rvalue_reference<ClassType>::type, ClassType&&>::value) );\n+  VERIFY( (is_same<add_rvalue_reference<int(int)>::type, int(&&)(int)>::value) );\n+  VERIFY( (is_same<add_rvalue_reference<void>::type, void>::value) );\n+  VERIFY( (is_same<add_rvalue_reference<const void>::type, const void>::value) );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a2c928e42149f980b4918345803b33faf921c869", "filename": "libstdc++-v3/testsuite/20_util/is_lvalue_reference/requirements/explicit_instantiation.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_lvalue_reference%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_lvalue_reference%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_lvalue_reference%2Frequirements%2Fexplicit_instantiation.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_lvalue_reference<test_type>;\n+}"}, {"sha": "73152447d28740f768ce2d9b8bd77f463e44c122", "filename": "libstdc++-v3/testsuite/20_util/is_lvalue_reference/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_lvalue_reference%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_lvalue_reference%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_lvalue_reference%2Frequirements%2Ftypedefs.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_lvalue_reference<int>       test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "a80e60688496a213c1783f3079357c67d30930cf", "filename": "libstdc++-v3/testsuite/20_util/is_lvalue_reference/value.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_lvalue_reference%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_lvalue_reference%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_lvalue_reference%2Fvalue.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_lvalue_reference;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<is_lvalue_reference, int&>(true)) );\n+  VERIFY( (test_category<is_lvalue_reference, ClassType&>(true)) );\n+  VERIFY( (test_category<is_lvalue_reference, int(&)(int)>(true)) );\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_lvalue_reference, int&&>(false)) );\n+  VERIFY( (test_category<is_lvalue_reference, ClassType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4cf457091b94b6547c94ec6693297eab4c75b987", "filename": "libstdc++-v3/testsuite/20_util/is_reference/requirements/explicit_instantiation.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_reference%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_reference%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_reference%2Frequirements%2Fexplicit_instantiation.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_reference<test_type>;\n+}"}, {"sha": "5ad8587b73cb8e9056eb93fdd25642467f14efe9", "filename": "libstdc++-v3/testsuite/20_util/is_reference/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_reference%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_reference%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_reference%2Frequirements%2Ftypedefs.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_reference<int>              test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "af425c101e87c3d259a35cba4720147800d3932c", "filename": "libstdc++-v3/testsuite/20_util/is_reference/value.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_reference%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_reference%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_reference%2Fvalue.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_reference;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<is_reference, int&>(true)) );\n+  VERIFY( (test_category<is_reference, ClassType&>(true)) );\n+  VERIFY( (test_category<is_reference, int(&)(int)>(true)) );\n+  VERIFY( (test_category<is_reference, int&&>(true)) );\n+  VERIFY( (test_category<is_reference, ClassType&&>(true)) );\n+  VERIFY( (test_category<is_reference, int(&&)(int)>(true)) );\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_reference, ClassType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f4f45bf1501e2bc60d169e9f6ea5f4fc0c54ab5c", "filename": "libstdc++-v3/testsuite/20_util/is_rvalue_reference/requirements/explicit_instantiation.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_rvalue_reference%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_rvalue_reference%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_rvalue_reference%2Frequirements%2Fexplicit_instantiation.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_rvalue_reference<test_type>;\n+}"}, {"sha": "5e3d68c434a8057cbdedf2aadfebf2ff27485d96", "filename": "libstdc++-v3/testsuite/20_util/is_rvalue_reference/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_rvalue_reference%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_rvalue_reference%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_rvalue_reference%2Frequirements%2Ftypedefs.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_rvalue_reference<int>       test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "55f76d61bd1ba6eb415ab46de494cd3e847e3369", "filename": "libstdc++-v3/testsuite/20_util/is_rvalue_reference/value.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_rvalue_reference%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_rvalue_reference%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_rvalue_reference%2Fvalue.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_rvalue_reference;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<is_rvalue_reference, int&&>(true)) );\n+  VERIFY( (test_category<is_rvalue_reference, ClassType&&>(true)) );\n+  VERIFY( (test_category<is_rvalue_reference, int(&&)(int)>(true)) );\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_rvalue_reference, int&>(false)) );\n+  VERIFY( (test_category<is_rvalue_reference, ClassType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "db34e04c1715e5e5ef0de1aa16fafece8e0a2fd5", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -49,8 +49,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 41 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 43 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 424 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 390 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 497 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 463 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "e64c0e2501eb631cf9304d9698fd6cadfa056708", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -49,8 +49,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 41 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 43 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 345 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 311 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 418 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 384 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "cbe29c551a1848fb44b9828a53b5dd984dd7bcbe", "filename": "libstdc++-v3/testsuite/20_util/remove_reference/requirements/explicit_instantiation.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fremove_reference%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fremove_reference%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fremove_reference%2Frequirements%2Fexplicit_instantiation.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct remove_reference<test_type>;\n+}"}, {"sha": "00e25743a0d3fb3b03adb4766eb36b6ba202ff22", "filename": "libstdc++-v3/testsuite/20_util/remove_reference/value.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fremove_reference%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fremove_reference%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fremove_reference%2Fvalue.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::remove_reference;\n+  using std::is_same;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (is_same<remove_reference<int&>::type, int>::value) );\n+  VERIFY( (is_same<remove_reference<int>::type, int>::value) );\n+  VERIFY( (is_same<remove_reference<const int&>::type, const int>::value) );\n+  VERIFY( (is_same<remove_reference<int*&>::type, int*>::value) );\n+  VERIFY( (is_same<remove_reference<ClassType&>::type, ClassType>::value) );\n+  VERIFY( (is_same<remove_reference<ClassType>::type, ClassType>::value) );\n+  VERIFY( (is_same<remove_reference<int(&)(int)>::type, int(int)>::value) );\n+  VERIFY( (is_same<remove_reference<int&&>::type, int>::value) );\n+  VERIFY( (is_same<remove_reference<int>::type, int>::value) );\n+  VERIFY( (is_same<remove_reference<const int&&>::type, const int>::value) );\n+  VERIFY( (is_same<remove_reference<int*&&>::type, int*>::value) );\n+  VERIFY( (is_same<remove_reference<ClassType&&>::type, ClassType>::value) );\n+  VERIFY( (is_same<remove_reference<ClassType>::type, ClassType>::value) );\n+  VERIFY( (is_same<remove_reference<int(&&)(int)>::type, int(int)>::value) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2b0c132716977222d64fbedaf5863caec85f2792", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/add_const/value.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_const%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_const%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_const%2Fvalue.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -1,6 +1,6 @@\n // 2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the", "previous_filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/add_const/requirements/typedefs.cc"}, {"sha": "2fa2c2af55420d17aa0c695e9a2d51abb7562754", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/add_cv/value.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_cv%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_cv%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_cv%2Fvalue.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -1,6 +1,6 @@\n // 2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the", "previous_filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/add_cv/requirements/typedefs.cc"}, {"sha": "56f23a84e2f96653daacfdf443d7458eb39b4185", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/add_pointer/value.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_pointer%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_pointer%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_pointer%2Fvalue.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -1,6 +1,6 @@\n // 2004-12-12  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the", "previous_filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/add_pointer/requirements/typedefs.cc"}, {"sha": "eab29f474e4ca7f6c59f162467ced0d1da7f34bc", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/add_reference/value.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_reference%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_reference%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_reference%2Fvalue.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -1,6 +1,6 @@\n // 2004-12-08  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the", "previous_filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/add_reference/requirements/typedefs.cc"}, {"sha": "4ac96a7219d94db678cd207d852069246767cd09", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/add_volatile/value.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_volatile%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_volatile%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_volatile%2Fvalue.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -1,6 +1,6 @@\n // 2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the", "previous_filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/add_volatile/requirements/typedefs.cc"}, {"sha": "205c974ee4dc03bd8bad87f3902944bf8bd28499", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/aligned_storage/value.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Faligned_storage%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a27a739a266b3312bc85742fd98634e492d3c14/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Faligned_storage%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Faligned_storage%2Fvalue.cc?ref=4a27a739a266b3312bc85742fd98634e492d3c14", "patch": "@@ -1,6 +1,6 @@\n // 2005-01-11  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the", "previous_filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/aligned_storage/requirements/typedefs.cc"}]}