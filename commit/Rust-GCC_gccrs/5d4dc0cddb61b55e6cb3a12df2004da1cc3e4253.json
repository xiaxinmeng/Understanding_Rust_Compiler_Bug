{"sha": "5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ0ZGMwY2RkYjYxYjU1ZTZjYjNhMTJkZjIwMDRkYTFjYzNlNDI1Mw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2016-12-15T15:50:24Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2016-12-15T15:50:24Z"}, "message": "[arm] Remove remaining references to arm feature sets\n\nNothing uses the old feature sets now, so we can delete them entirely.\n\n\t* arm-cores.def: Remove FLAGS field from all core definitions.\n\t* arm-arches.def: Likewise.\n\t* arm-opts.h (enum processor_type): Remove FLAGS parameter from\n\tARM_CORES macro.\n\t(arm_arch_core_flags): Likewise, plus ARM_ARCH macro.\n\t* arm-protos.h (FL_*): Delete.\n\t(arm_feature_set): Delete.\n\t(ARM_FSET_*): Delete.\n\t* arm.c (struct processors): Delete flags field.\n\t(all_cores): Delete FLAGS parameter from macro, don't initialize flags.\n\t(all architectures): Likewise.\n\nFrom-SVN: r243705", "tree": {"sha": "0d1d29d1ceece9ebe464a42e68ef465b808069a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d1d29d1ceece9ebe464a42e68ef465b808069a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253/comments", "author": null, "committer": null, "parents": [{"sha": "03d222fab6188f76cd734470d53061f8b5940186", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d222fab6188f76cd734470d53061f8b5940186", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03d222fab6188f76cd734470d53061f8b5940186"}], "stats": {"total": 518, "additions": 171, "deletions": 347}, "files": [{"sha": "fddd26d097bd4bbc18ec46cb52c4fec06137d3cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253", "patch": "@@ -1,3 +1,17 @@\n+2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm-cores.def: Remove FLAGS field from all core definitions.\n+\t* arm-arches.def: Likewise.\n+\t* arm-opts.h (enum processor_type): Remove FLAGS parameter from\n+\tARM_CORES macro.\n+\t(arm_arch_core_flags): Likewise, plus ARM_ARCH macro.\n+\t* arm-protos.h (FL_*): Delete.\n+\t(arm_feature_set): Delete.\n+\t(ARM_FSET_*): Delete.\n+\t* arm.c (struct processors): Delete flags field.\n+\t(all_cores): Delete FLAGS parameter from macro, don't initialize flags.\n+\t(all architectures): Likewise.\n+\n 2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm-opts.h (struct arm_arch_core_flag): Add new field ISA."}, {"sha": "611675b0bd3dce45b14e5d87e12dd02b869306d7", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253", "patch": "@@ -107,12 +107,12 @@ struct arm_arch_core_flag\n static const struct arm_arch_core_flag arm_arch_core_flags[] =\n {\n #undef ARM_CORE\n-#define ARM_CORE(NAME, X, IDENT, TUNE_FLAGS, ARCH, ISA, FLAGS, COSTS)\t\\\n+#define ARM_CORE(NAME, X, IDENT, TUNE_FLAGS, ARCH, ISA, COSTS)\t\\\n   {NAME, {ISA isa_nobit}},\n #include \"config/arm/arm-cores.def\"\n #undef ARM_CORE\n #undef ARM_ARCH\n-#define ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, ISA, FLAGS)\t\\\n+#define ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, ISA)\t\\\n   {NAME, {ISA isa_nobit}},\n #include \"config/arm/arm-arches.def\"\n #undef ARM_ARCH"}, {"sha": "ed6b0b654bc4bc5a7188b785bb9c69056be947f5", "filename": "gcc/config/arm/arm-arches.def", "status": "modified", "additions": 37, "deletions": 38, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253/gcc%2Fconfig%2Farm%2Farm-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253/gcc%2Fconfig%2Farm%2Farm-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-arches.def?ref=5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253", "patch": "@@ -19,50 +19,49 @@\n \n /* Before using #include to read this file, define a macro:\n \n-      ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, ISA, FLAGS)\n+      ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, ISA)\n \n    The NAME is the name of the architecture, represented as a string\n    constant.  The CORE is the identifier for a core representative of\n    this architecture.  ARCH is the architecture revision.  ISA is the\n    detailed architectural capabilities of the core (see arm-isa.h).\n-   FLAGS is the set of feature flags implied by the architecture.\n \n    genopt.sh assumes no whitespace up to the first \",\" in each entry.  */\n \n-ARM_ARCH(\"armv2\",   arm2,       (TF_CO_PROC | TF_NO_MODE32), 2,\t\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2))\n-ARM_ARCH(\"armv2a\",  arm2,       (TF_CO_PROC | TF_NO_MODE32), 2,\t\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2))\n-ARM_ARCH(\"armv3\",   arm6,       TF_CO_PROC,   \t\t     3,\t\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3))\n-ARM_ARCH(\"armv3m\",  arm7m,      TF_CO_PROC, \t\t     3M,\tISA_FEAT(ISA_ARMv3m) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3M))\n-ARM_ARCH(\"armv4\",   arm7tdmi,   TF_CO_PROC, \t\t     4,\t\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4))\n-/* Strictly, FL_MODE26 is a permitted option for v4t, but there are no\n+ARM_ARCH(\"armv2\",   arm2,\t(TF_CO_PROC | TF_NO_MODE32), 2,\t\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26))\n+ARM_ARCH(\"armv2a\",  arm2,\t(TF_CO_PROC | TF_NO_MODE32), 2,\t\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26))\n+ARM_ARCH(\"armv3\",   arm6,\tTF_CO_PROC,\t\t     3,\t\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26))\n+ARM_ARCH(\"armv3m\",  arm7m,\tTF_CO_PROC,\t\t     3M,\tISA_FEAT(ISA_ARMv3m) ISA_FEAT(isa_bit_mode26))\n+ARM_ARCH(\"armv4\",   arm7tdmi,\tTF_CO_PROC,\t\t     4,\t\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26))\n+/* Strictly, isa_bit_mode26 is a permitted option for v4t, but there are no\n    implementations that support it, so we will leave it out for now.  */\n-ARM_ARCH(\"armv4t\",  arm7tdmi,   TF_CO_PROC,\t\t     4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T))\n-ARM_ARCH(\"armv5\",   arm10tdmi,  TF_CO_PROC, \t\t     5,\t\tISA_FEAT(ISA_ARMv5), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5))\n-ARM_ARCH(\"armv5t\",  arm10tdmi,  TF_CO_PROC, \t\t     5T,\tISA_FEAT(ISA_ARMv5t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5T))\n-ARM_ARCH(\"armv5e\",  arm1026ejs, TF_CO_PROC, \t\t     5E,\tISA_FEAT(ISA_ARMv5e), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5E))\n-ARM_ARCH(\"armv5te\", arm1026ejs, TF_CO_PROC, \t\t     5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE))\n-ARM_ARCH(\"armv6\",   arm1136js,  TF_CO_PROC, \t\t     6,\t\tISA_FEAT(ISA_ARMv6), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6))\n-ARM_ARCH(\"armv6j\",  arm1136js,  TF_CO_PROC, \t\t     6J,\tISA_FEAT(ISA_ARMv6j), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6J))\n-ARM_ARCH(\"armv6k\",  mpcore,\tTF_CO_PROC, \t\t     6K,\tISA_FEAT(ISA_ARMv6k), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6K))\n-ARM_ARCH(\"armv6z\",  arm1176jzs, TF_CO_PROC, \t\t     6Z,\tISA_FEAT(ISA_ARMv6z), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6Z))\n-ARM_ARCH(\"armv6kz\", arm1176jzs, TF_CO_PROC, \t\t     6KZ,\tISA_FEAT(ISA_ARMv6kz), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6KZ))\n-ARM_ARCH(\"armv6zk\", arm1176jzs, TF_CO_PROC, \t\t     6KZ,\tISA_FEAT(ISA_ARMv6kz), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6KZ))\n-ARM_ARCH(\"armv6t2\", arm1156t2s, TF_CO_PROC, \t\t     6T2,\tISA_FEAT(ISA_ARMv6t2), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6T2))\n-ARM_ARCH(\"armv6-m\", cortexm1,\t0,\t\t\t     6M,\tISA_FEAT(ISA_ARMv6m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M))\n-ARM_ARCH(\"armv6s-m\", cortexm1,\t0, \t\t\t     6M,\tISA_FEAT(ISA_ARMv6m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M))\n-ARM_ARCH(\"armv7\",   cortexa8,\tTF_CO_PROC,\t\t     7,\t\tISA_FEAT(ISA_ARMv7), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7))\n-ARM_ARCH(\"armv7-a\", cortexa8,\tTF_CO_PROC,\t\t     7A,\tISA_FEAT(ISA_ARMv7a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A))\n-ARM_ARCH(\"armv7ve\", cortexa8,\tTF_CO_PROC,\t\t     7A,\tISA_FEAT(ISA_ARMv7ve), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7VE))\n-ARM_ARCH(\"armv7-r\", cortexr4,\tTF_CO_PROC,\t\t     7R,\tISA_FEAT(ISA_ARMv7r), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7R))\n-ARM_ARCH(\"armv7-m\", cortexm3,\tTF_CO_PROC,\t\t     7M,\tISA_FEAT(ISA_ARMv7m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7M))\n-ARM_ARCH(\"armv7e-m\", cortexm4,  TF_CO_PROC,\t\t     7EM,\tISA_FEAT(ISA_ARMv7em), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7EM))\n-ARM_ARCH(\"armv8-a\", cortexa53,  TF_CO_PROC,\t\t     8A,\tISA_FEAT(ISA_ARMv8a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH8A))\n-ARM_ARCH(\"armv8-a+crc\",cortexa53, TF_CO_PROC,\t\t     8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32  | FL_FOR_ARCH8A))\n-ARM_ARCH(\"armv8.1-a\", cortexa53,  TF_CO_PROC,\t\t     8A,\tISA_FEAT(ISA_ARMv8_1a), ARM_FSET_MAKE (FL_CRC32 | FL_FOR_ARCH8A, FL2_FOR_ARCH8_1A))\n-ARM_ARCH (\"armv8.2-a\", cortexa53,  TF_CO_PROC,\t\t     8A,\tISA_FEAT(ISA_ARMv8_2a), ARM_FSET_MAKE (FL_CRC32 | FL_FOR_ARCH8A, FL2_FOR_ARCH8_2A))\n-ARM_ARCH (\"armv8.2-a+fp16\", cortexa53, TF_CO_PROC,\t     8A,\tISA_FEAT(ISA_ARMv8_2a) ISA_FEAT(isa_bit_fp16), ARM_FSET_MAKE (FL_CRC32 | FL_FOR_ARCH8A, FL2_FOR_ARCH8_2A | FL2_FP16INST))\n-ARM_ARCH(\"armv8-m.base\", cortexm23, 0,\t\t\t     8M_BASE,\tISA_FEAT(ISA_ARMv8m_base), ARM_FSET_MAKE (FL_FOR_ARCH8M_BASE, FL2_CMSE))\n-ARM_ARCH(\"armv8-m.main\", cortexm7, TF_CO_PROC,\t\t     8M_MAIN,\tISA_FEAT(ISA_ARMv8m_main), ARM_FSET_MAKE (FL_FOR_ARCH8M_MAIN, FL2_CMSE))\n-ARM_ARCH(\"armv8-m.main+dsp\", cortexm33, TF_CO_PROC,\t     8M_MAIN,\tISA_FEAT(ISA_ARMv8m_main) ISA_FEAT(isa_bit_ARMv7em), ARM_FSET_MAKE (FL_ARCH7EM | FL_FOR_ARCH8M_MAIN, FL2_CMSE))\n-ARM_ARCH(\"iwmmxt\",  iwmmxt, (TF_LDSCHED | TF_STRONG | TF_XSCALE), 5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale) ISA_FEAT(isa_bit_iwmmxt), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT))\n-ARM_ARCH(\"iwmmxt2\", iwmmxt2, (TF_LDSCHED | TF_STRONG | TF_XSCALE), 5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale) ISA_FEAT(isa_bit_iwmmxt) ISA_FEAT(isa_bit_iwmmxt2), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2))\n+ARM_ARCH(\"armv4t\",  arm7tdmi,\tTF_CO_PROC,\t\t     4T,\tISA_FEAT(ISA_ARMv4t))\n+ARM_ARCH(\"armv5\",   arm10tdmi,\tTF_CO_PROC,\t\t     5,\t\tISA_FEAT(ISA_ARMv5))\n+ARM_ARCH(\"armv5t\",  arm10tdmi,\tTF_CO_PROC,\t\t     5T,\tISA_FEAT(ISA_ARMv5t))\n+ARM_ARCH(\"armv5e\",  arm1026ejs, TF_CO_PROC,\t\t     5E,\tISA_FEAT(ISA_ARMv5e))\n+ARM_ARCH(\"armv5te\", arm1026ejs, TF_CO_PROC,\t\t     5TE,\tISA_FEAT(ISA_ARMv5te))\n+ARM_ARCH(\"armv6\",   arm1136js,\tTF_CO_PROC,\t\t     6,\t\tISA_FEAT(ISA_ARMv6))\n+ARM_ARCH(\"armv6j\",  arm1136js,\tTF_CO_PROC,\t\t     6J,\tISA_FEAT(ISA_ARMv6j))\n+ARM_ARCH(\"armv6k\",  mpcore,\tTF_CO_PROC,\t\t     6K,\tISA_FEAT(ISA_ARMv6k))\n+ARM_ARCH(\"armv6z\",  arm1176jzs, TF_CO_PROC,\t\t     6Z,\tISA_FEAT(ISA_ARMv6z))\n+ARM_ARCH(\"armv6kz\", arm1176jzs, TF_CO_PROC,\t\t     6KZ,\tISA_FEAT(ISA_ARMv6kz))\n+ARM_ARCH(\"armv6zk\", arm1176jzs, TF_CO_PROC,\t\t     6KZ,\tISA_FEAT(ISA_ARMv6kz))\n+ARM_ARCH(\"armv6t2\", arm1156t2s, TF_CO_PROC,\t\t     6T2,\tISA_FEAT(ISA_ARMv6t2))\n+ARM_ARCH(\"armv6-m\", cortexm1,\t0,\t\t\t     6M,\tISA_FEAT(ISA_ARMv6m))\n+ARM_ARCH(\"armv6s-m\", cortexm1,\t0,\t\t\t     6M,\tISA_FEAT(ISA_ARMv6m))\n+ARM_ARCH(\"armv7\",   cortexa8,\tTF_CO_PROC,\t\t     7,\t\tISA_FEAT(ISA_ARMv7))\n+ARM_ARCH(\"armv7-a\", cortexa8,\tTF_CO_PROC,\t\t     7A,\tISA_FEAT(ISA_ARMv7a))\n+ARM_ARCH(\"armv7ve\", cortexa8,\tTF_CO_PROC,\t\t     7A,\tISA_FEAT(ISA_ARMv7ve))\n+ARM_ARCH(\"armv7-r\", cortexr4,\tTF_CO_PROC,\t\t     7R,\tISA_FEAT(ISA_ARMv7r))\n+ARM_ARCH(\"armv7-m\", cortexm3,\tTF_CO_PROC,\t\t     7M,\tISA_FEAT(ISA_ARMv7m))\n+ARM_ARCH(\"armv7e-m\", cortexm4,\tTF_CO_PROC,\t\t     7EM,\tISA_FEAT(ISA_ARMv7em))\n+ARM_ARCH(\"armv8-a\", cortexa53,\tTF_CO_PROC,\t\t     8A,\tISA_FEAT(ISA_ARMv8a))\n+ARM_ARCH(\"armv8-a+crc\",cortexa53, TF_CO_PROC,\t\t     8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32))\n+ARM_ARCH(\"armv8.1-a\", cortexa53,  TF_CO_PROC,\t\t     8A,\tISA_FEAT(ISA_ARMv8_1a))\n+ARM_ARCH (\"armv8.2-a\", cortexa53,  TF_CO_PROC,\t\t     8A,\tISA_FEAT(ISA_ARMv8_2a))\n+ARM_ARCH (\"armv8.2-a+fp16\", cortexa53, TF_CO_PROC,\t     8A,\tISA_FEAT(ISA_ARMv8_2a) ISA_FEAT(isa_bit_fp16))\n+ARM_ARCH(\"armv8-m.base\", cortexm23, 0,\t\t\t     8M_BASE,\tISA_FEAT(ISA_ARMv8m_base))\n+ARM_ARCH(\"armv8-m.main\", cortexm7, TF_CO_PROC,\t\t     8M_MAIN,\tISA_FEAT(ISA_ARMv8m_main))\n+ARM_ARCH(\"armv8-m.main+dsp\", cortexm33, TF_CO_PROC,\t     8M_MAIN,\tISA_FEAT(ISA_ARMv8m_main) ISA_FEAT(isa_bit_ARMv7em))\n+ARM_ARCH(\"iwmmxt\",  iwmmxt, (TF_LDSCHED | TF_STRONG | TF_XSCALE), 5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale) ISA_FEAT(isa_bit_iwmmxt))\n+ARM_ARCH(\"iwmmxt2\", iwmmxt2, (TF_LDSCHED | TF_STRONG | TF_XSCALE), 5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale) ISA_FEAT(isa_bit_iwmmxt) ISA_FEAT(isa_bit_iwmmxt2))"}, {"sha": "a232d37dfb769098a0ec289ff82b046225522dbf", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 111, "deletions": 113, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253", "patch": "@@ -25,7 +25,7 @@\n \n /* Before using #include to read this file, define a macro:\n \n-      ARM_CORE(CORE_NAME, INTERNAL_IDENT, TUNE_IDENT, TUNE_FLAGS, ARCH, ISA, FLAGS, COSTS)\n+      ARM_CORE(CORE_NAME, INTERNAL_IDENT, TUNE_IDENT, TUNE_FLAGS, ARCH, ISA, COSTS)\n \n    The CORE_NAME is the name of the core, represented as a string constant.\n    The INTERNAL_IDENT is the name of the core represented as an identifier.\n@@ -35,8 +35,6 @@\n    TUNE_FLAGS is a set of flag bits that are used to affect tuning.\n    ARCH is the architecture revision implemented by the chip.\n    ISA is the detailed architectural capabilities of the core (see arm-isa.h).\n-   FLAGS is the set of feature flags of that core.\n-   This need not include flags implied by the architecture.\n    COSTS is the name of the rtx_costs routine to use.\n \n    If you update this table, you must update the \"tune\" attribute in\n@@ -45,146 +43,146 @@\n    Some tools assume no whitespace up to the first \",\" in each entry.  */\n \n /* V2/V2A Architecture Processors */\n-ARM_CORE(\"arm2\",\tarm2, arm2,\t\t(TF_CO_PROC | TF_NO_MODE32),\t  2,\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2), slowmul)\n-ARM_CORE(\"arm250\",\tarm250, arm250,\t\t(TF_CO_PROC | TF_NO_MODE32), \t  2,\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2), slowmul)\n-ARM_CORE(\"arm3\",\tarm3, arm3,\t\t(TF_CO_PROC | TF_NO_MODE32), \t  2,\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2), slowmul)\n+ARM_CORE(\"arm2\",\tarm2, arm2,\t\t(TF_CO_PROC | TF_NO_MODE32),\t  2,\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm250\",\tarm250, arm250,\t\t(TF_CO_PROC | TF_NO_MODE32),\t  2,\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm3\",\tarm3, arm3,\t\t(TF_CO_PROC | TF_NO_MODE32),\t  2,\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26), slowmul)\n \n /* V3 Architecture Processors */\n-ARM_CORE(\"arm6\",\tarm6, arm6,\t\tTF_CO_PROC,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm60\",\tarm60, arm60,\t\tTF_CO_PROC, \t\t     \t  3,   \tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm600\",\tarm600, arm600,\t\t(TF_CO_PROC | TF_WBUF),      \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm610\",\tarm610, arm610,\t\tTF_WBUF,      \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm620\",\tarm620, arm620,\t\t(TF_CO_PROC | TF_WBUF),      \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm7\",\tarm7, arm7,\t\tTF_CO_PROC,   \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm7d\",\tarm7d, arm7d,\t\tTF_CO_PROC, \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm7di\",\tarm7di, arm7di,\t\tTF_CO_PROC, \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm70\",\tarm70, arm70,\t\tTF_CO_PROC, \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm700\",\tarm700, arm700,\t\t(TF_CO_PROC | TF_WBUF),      \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm700i\",\tarm700i, arm700i,\t(TF_CO_PROC | TF_WBUF),      \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm710\",\tarm710, arm710,\t\tTF_WBUF,      \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm720\",\tarm720, arm720,\t\tTF_WBUF, \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm710c\",\tarm710c, arm710c,\tTF_WBUF, \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm7100\",\tarm7100, arm7100,\tTF_WBUF, \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm7500\",\tarm7500, arm7500,\tTF_WBUF, \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm6\",\tarm6, arm6,\t\tTF_CO_PROC,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm60\",\tarm60, arm60,\t\tTF_CO_PROC,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm600\",\tarm600, arm600,\t\t(TF_CO_PROC | TF_WBUF),\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm610\",\tarm610, arm610,\t\tTF_WBUF,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm620\",\tarm620, arm620,\t\t(TF_CO_PROC | TF_WBUF),\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm7\",\tarm7, arm7,\t\tTF_CO_PROC,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm7d\",\tarm7d, arm7d,\t\tTF_CO_PROC,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm7di\",\tarm7di, arm7di,\t\tTF_CO_PROC,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm70\",\tarm70, arm70,\t\tTF_CO_PROC,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm700\",\tarm700, arm700,\t\t(TF_CO_PROC | TF_WBUF),\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm700i\",\tarm700i, arm700i,\t(TF_CO_PROC | TF_WBUF),\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm710\",\tarm710, arm710,\t\tTF_WBUF,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm720\",\tarm720, arm720,\t\tTF_WBUF,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm710c\",\tarm710c, arm710c,\tTF_WBUF,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm7100\",\tarm7100, arm7100,\tTF_WBUF,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n+ARM_CORE(\"arm7500\",\tarm7500, arm7500,\tTF_WBUF,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n /* Doesn't have an external co-proc, but does have embedded fpa (fpa no-longer supported). */\n-ARM_CORE(\"arm7500fe\", arm7500fe, arm7500fe,\t(TF_CO_PROC | TF_WBUF),\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7500fe\", arm7500fe, arm7500fe,\t(TF_CO_PROC | TF_WBUF),\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n \n /* V3M Architecture Processors */\n /* arm7m doesn't exist on its own, but only with D, (\"and\", and I), but\n    those don't alter the code, so arm7m is sometimes used.  */\n-ARM_CORE(\"arm7m\",   arm7m, arm7m,\t\tTF_CO_PROC,\t\t\t  3M,\tISA_FEAT(ISA_ARMv3m) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n-ARM_CORE(\"arm7dm\",  arm7dm, arm7dm,\t\tTF_CO_PROC, \t\t     \t  3M,\tISA_FEAT(ISA_ARMv3m) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n-ARM_CORE(\"arm7dmi\", arm7dmi, arm7dmi,\t\tTF_CO_PROC, \t\t     \t  3M,\tISA_FEAT(ISA_ARMv3m) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n+ARM_CORE(\"arm7m\",   arm7m, arm7m,\t\tTF_CO_PROC,\t\t\t  3M,\tISA_FEAT(ISA_ARMv3m) ISA_FEAT(isa_bit_mode26), fastmul)\n+ARM_CORE(\"arm7dm\",  arm7dm, arm7dm,\t\tTF_CO_PROC,\t\t\t  3M,\tISA_FEAT(ISA_ARMv3m) ISA_FEAT(isa_bit_mode26), fastmul)\n+ARM_CORE(\"arm7dmi\", arm7dmi, arm7dmi,\t\tTF_CO_PROC,\t\t\t  3M,\tISA_FEAT(ISA_ARMv3m) ISA_FEAT(isa_bit_mode26), fastmul)\n \n /* V4 Architecture Processors */\n-ARM_CORE(\"arm8\",          arm8, arm8,\t\t\tTF_LDSCHED,\t\t  4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), fastmul)\n-ARM_CORE(\"arm810\",        arm810, arm810,\t\tTF_LDSCHED, \t\t  4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), fastmul)\n-ARM_CORE(\"strongarm\",     strongarm, strongarm,\t\t(TF_LDSCHED | TF_STRONG), 4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), strongarm)\n-ARM_CORE(\"strongarm110\",  strongarm110, strongarm110,\t(TF_LDSCHED | TF_STRONG), 4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), strongarm)\n-ARM_CORE(\"strongarm1100\", strongarm1100, strongarm1100, (TF_LDSCHED | TF_STRONG), 4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), strongarm)\n-ARM_CORE(\"strongarm1110\", strongarm1110, strongarm1110, (TF_LDSCHED | TF_STRONG), 4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), strongarm)\n-ARM_CORE(\"fa526\",         fa526, fa526,\t\t\tTF_LDSCHED,   \t\t  4,\tISA_FEAT(ISA_ARMv4), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4), fastmul)\n-ARM_CORE(\"fa626\",         fa626, fa626,\t\t\tTF_LDSCHED, \t\t  4,\tISA_FEAT(ISA_ARMv4), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4), fastmul)\n+ARM_CORE(\"arm8\",\t  arm8, arm8,\t\t\tTF_LDSCHED,\t\t  4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), fastmul)\n+ARM_CORE(\"arm810\",\t  arm810, arm810,\t\tTF_LDSCHED,\t\t  4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), fastmul)\n+ARM_CORE(\"strongarm\",\t  strongarm, strongarm,\t\t(TF_LDSCHED | TF_STRONG), 4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), strongarm)\n+ARM_CORE(\"strongarm110\",  strongarm110, strongarm110,\t(TF_LDSCHED | TF_STRONG), 4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), strongarm)\n+ARM_CORE(\"strongarm1100\", strongarm1100, strongarm1100, (TF_LDSCHED | TF_STRONG), 4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), strongarm)\n+ARM_CORE(\"strongarm1110\", strongarm1110, strongarm1110, (TF_LDSCHED | TF_STRONG), 4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), strongarm)\n+ARM_CORE(\"fa526\",\t  fa526, fa526,\t\t\tTF_LDSCHED,\t\t  4,\tISA_FEAT(ISA_ARMv4), fastmul)\n+ARM_CORE(\"fa626\",\t  fa626, fa626,\t\t\tTF_LDSCHED,\t\t  4,\tISA_FEAT(ISA_ARMv4), fastmul)\n \n /* V4T Architecture Processors */\n-ARM_CORE(\"arm7tdmi\",\tarm7tdmi, arm7tdmi,\tTF_CO_PROC,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm7tdmi-s\",\tarm7tdmis, arm7tdmis,\tTF_CO_PROC, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm710t\",\tarm710t, arm710t,\tTF_WBUF, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm720t\",\tarm720t, arm720t,\tTF_WBUF, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm740t\",\tarm740t, arm740t,\tTF_WBUF, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm9\",\tarm9, arm9,\t\tTF_LDSCHED, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm9tdmi\",\tarm9tdmi, arm9tdmi,\tTF_LDSCHED, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm920\",\tarm920, arm920,\t\tTF_LDSCHED, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm920t\",\tarm920t, arm920t,\tTF_LDSCHED, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm922t\",\tarm922t, arm922t,\tTF_LDSCHED, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm940t\",\tarm940t, arm940t,\tTF_LDSCHED, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"ep9312\",\tep9312, ep9312,\t\tTF_LDSCHED, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm7tdmi\",\tarm7tdmi, arm7tdmi,\tTF_CO_PROC,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n+ARM_CORE(\"arm7tdmi-s\",\tarm7tdmis, arm7tdmis,\tTF_CO_PROC,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n+ARM_CORE(\"arm710t\",\tarm710t, arm710t,\tTF_WBUF,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n+ARM_CORE(\"arm720t\",\tarm720t, arm720t,\tTF_WBUF,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n+ARM_CORE(\"arm740t\",\tarm740t, arm740t,\tTF_WBUF,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n+ARM_CORE(\"arm9\",\tarm9, arm9,\t\tTF_LDSCHED,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n+ARM_CORE(\"arm9tdmi\",\tarm9tdmi, arm9tdmi,\tTF_LDSCHED,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n+ARM_CORE(\"arm920\",\tarm920, arm920,\t\tTF_LDSCHED,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n+ARM_CORE(\"arm920t\",\tarm920t, arm920t,\tTF_LDSCHED,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n+ARM_CORE(\"arm922t\",\tarm922t, arm922t,\tTF_LDSCHED,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n+ARM_CORE(\"arm940t\",\tarm940t, arm940t,\tTF_LDSCHED,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n+ARM_CORE(\"ep9312\",\tep9312, ep9312,\t\tTF_LDSCHED,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n \n /* V5T Architecture Processors */\n-ARM_CORE(\"arm10tdmi\",\tarm10tdmi, arm10tdmi,\tTF_LDSCHED,\t\t\t  5T,\tISA_FEAT(ISA_ARMv5t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5T), fastmul)\n-ARM_CORE(\"arm1020t\",\tarm1020t, arm1020t,\tTF_LDSCHED, \t\t\t  5T,\tISA_FEAT(ISA_ARMv5t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5T), fastmul)\n+ARM_CORE(\"arm10tdmi\",\tarm10tdmi, arm10tdmi,\tTF_LDSCHED,\t\t\t  5T,\tISA_FEAT(ISA_ARMv5t), fastmul)\n+ARM_CORE(\"arm1020t\",\tarm1020t, arm1020t,\tTF_LDSCHED,\t\t\t  5T,\tISA_FEAT(ISA_ARMv5t), fastmul)\n \n /* V5TE Architecture Processors */\n-ARM_CORE(\"arm9e\",\tarm9e, arm9e,\t\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"arm946e-s\",\tarm946es, arm946es,\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"arm966e-s\",\tarm966es, arm966es,\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"arm968e-s\",\tarm968es, arm968es,\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"arm10e\",\tarm10e, arm10e,\t\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), fastmul)\n-ARM_CORE(\"arm1020e\",\tarm1020e, arm1020e,\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), fastmul)\n-ARM_CORE(\"arm1022e\",\tarm1022e, arm1022e,\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), fastmul)\n-ARM_CORE(\"xscale\",\txscale, xscale,\t\t(TF_LDSCHED | TF_XSCALE), \t  5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale), ARM_FSET_MAKE_CPU1 (FL_XSCALE | FL_FOR_ARCH5TE), xscale)\n-ARM_CORE(\"iwmmxt\",\tiwmmxt, iwmmxt,\t\t(TF_LDSCHED | TF_XSCALE), \t  5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale) ISA_FEAT(isa_bit_iwmmxt), ARM_FSET_MAKE_CPU1 (FL_XSCALE | FL_IWMMXT | FL_FOR_ARCH5TE), xscale)\n-ARM_CORE(\"iwmmxt2\",\tiwmmxt2, iwmmxt2,\t(TF_LDSCHED | TF_XSCALE), \t  5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale) ISA_FEAT(isa_bit_iwmmxt) ISA_FEAT(isa_bit_iwmmxt2), ARM_FSET_MAKE_CPU1 (FL_XSCALE | FL_IWMMXT | FL_IWMMXT2 | FL_FOR_ARCH5TE), xscale)\n-ARM_CORE(\"fa606te\",\tfa606te, fa606te,\tTF_LDSCHED,   \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"fa626te\",\tfa626te, fa626te,\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"fmp626\",\tfmp626, fmp626,\t\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"fa726te\",\tfa726te, fa726te,\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), fa726te)\n+ARM_CORE(\"arm9e\",\tarm9e, arm9e,\t\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), 9e)\n+ARM_CORE(\"arm946e-s\",\tarm946es, arm946es,\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), 9e)\n+ARM_CORE(\"arm966e-s\",\tarm966es, arm966es,\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), 9e)\n+ARM_CORE(\"arm968e-s\",\tarm968es, arm968es,\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), 9e)\n+ARM_CORE(\"arm10e\",\tarm10e, arm10e,\t\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), fastmul)\n+ARM_CORE(\"arm1020e\",\tarm1020e, arm1020e,\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), fastmul)\n+ARM_CORE(\"arm1022e\",\tarm1022e, arm1022e,\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), fastmul)\n+ARM_CORE(\"xscale\",\txscale, xscale,\t\t(TF_LDSCHED | TF_XSCALE),\t  5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale), xscale)\n+ARM_CORE(\"iwmmxt\",\tiwmmxt, iwmmxt,\t\t(TF_LDSCHED | TF_XSCALE),\t  5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale) ISA_FEAT(isa_bit_iwmmxt), xscale)\n+ARM_CORE(\"iwmmxt2\",\tiwmmxt2, iwmmxt2,\t(TF_LDSCHED | TF_XSCALE),\t  5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale) ISA_FEAT(isa_bit_iwmmxt) ISA_FEAT(isa_bit_iwmmxt2), xscale)\n+ARM_CORE(\"fa606te\",\tfa606te, fa606te,\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), 9e)\n+ARM_CORE(\"fa626te\",\tfa626te, fa626te,\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), 9e)\n+ARM_CORE(\"fmp626\",\tfmp626, fmp626,\t\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), 9e)\n+ARM_CORE(\"fa726te\",\tfa726te, fa726te,\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), fa726te)\n \n /* V5TEJ Architecture Processors */\n-ARM_CORE(\"arm926ej-s\",\tarm926ejs, arm926ejs,\tTF_LDSCHED,\t\t\t  5TEJ,\tISA_FEAT(ISA_ARMv5tej), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TEJ), 9e)\n-ARM_CORE(\"arm1026ej-s\",\tarm1026ejs, arm1026ejs,\tTF_LDSCHED, \t\t\t  5TEJ,\tISA_FEAT(ISA_ARMv5tej), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TEJ), 9e)\n+ARM_CORE(\"arm926ej-s\",\tarm926ejs, arm926ejs,\tTF_LDSCHED,\t\t\t  5TEJ,\tISA_FEAT(ISA_ARMv5tej), 9e)\n+ARM_CORE(\"arm1026ej-s\",\tarm1026ejs, arm1026ejs,\tTF_LDSCHED,\t\t\t  5TEJ,\tISA_FEAT(ISA_ARMv5tej), 9e)\n \n /* V6 Architecture Processors */\n-ARM_CORE(\"arm1136j-s\",\t\tarm1136js, arm1136js,\t\tTF_LDSCHED,\t  6J,\tISA_FEAT(ISA_ARMv6j), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6J), 9e)\n-ARM_CORE(\"arm1136jf-s\",\t\tarm1136jfs, arm1136jfs,\t\tTF_LDSCHED, \t  6J,\tISA_FEAT(ISA_ARMv6j) ISA_FEAT(isa_bit_VFPv2), ARM_FSET_MAKE_CPU1 (FL_VFPV2 | FL_FOR_ARCH6J), 9e)\n-ARM_CORE(\"arm1176jz-s\",\t\tarm1176jzs, arm1176jzs,\t\tTF_LDSCHED, \t  6KZ,\tISA_FEAT(ISA_ARMv6kz), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6KZ), 9e)\n-ARM_CORE(\"arm1176jzf-s\",\tarm1176jzfs, arm1176jzfs,\tTF_LDSCHED, \t  6KZ,\tISA_FEAT(ISA_ARMv6kz) ISA_FEAT(isa_bit_VFPv2), ARM_FSET_MAKE_CPU1 (FL_VFPV2 | FL_FOR_ARCH6KZ), 9e)\n-ARM_CORE(\"mpcorenovfp\",\t\tmpcorenovfp, mpcorenovfp,\tTF_LDSCHED, \t  6K,\tISA_FEAT(ISA_ARMv6k), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6K), 9e)\n-ARM_CORE(\"mpcore\",\t\tmpcore, mpcore,\t\t\tTF_LDSCHED, \t  6K,\tISA_FEAT(ISA_ARMv6k) ISA_FEAT(isa_bit_VFPv2), ARM_FSET_MAKE_CPU1 (FL_VFPV2 | FL_FOR_ARCH6K), 9e)\n-ARM_CORE(\"arm1156t2-s\",\t\tarm1156t2s, arm1156t2s,\t\tTF_LDSCHED, \t  6T2,\tISA_FEAT(ISA_ARMv6t2), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6T2), v6t2)\n-ARM_CORE(\"arm1156t2f-s\",\tarm1156t2fs, arm1156t2fs,\tTF_LDSCHED, \t  6T2,\tISA_FEAT(ISA_ARMv6t2) ISA_FEAT(isa_bit_VFPv2), ARM_FSET_MAKE_CPU1 (FL_VFPV2 | FL_FOR_ARCH6T2), v6t2)\n+ARM_CORE(\"arm1136j-s\",\t\tarm1136js, arm1136js,\t\tTF_LDSCHED,\t  6J,\tISA_FEAT(ISA_ARMv6j), 9e)\n+ARM_CORE(\"arm1136jf-s\",\t\tarm1136jfs, arm1136jfs,\t\tTF_LDSCHED,\t  6J,\tISA_FEAT(ISA_ARMv6j) ISA_FEAT(isa_bit_VFPv2), 9e)\n+ARM_CORE(\"arm1176jz-s\",\t\tarm1176jzs, arm1176jzs,\t\tTF_LDSCHED,\t  6KZ,\tISA_FEAT(ISA_ARMv6kz), 9e)\n+ARM_CORE(\"arm1176jzf-s\",\tarm1176jzfs, arm1176jzfs,\tTF_LDSCHED,\t  6KZ,\tISA_FEAT(ISA_ARMv6kz) ISA_FEAT(isa_bit_VFPv2), 9e)\n+ARM_CORE(\"mpcorenovfp\",\t\tmpcorenovfp, mpcorenovfp,\tTF_LDSCHED,\t  6K,\tISA_FEAT(ISA_ARMv6k), 9e)\n+ARM_CORE(\"mpcore\",\t\tmpcore, mpcore,\t\t\tTF_LDSCHED,\t  6K,\tISA_FEAT(ISA_ARMv6k) ISA_FEAT(isa_bit_VFPv2), 9e)\n+ARM_CORE(\"arm1156t2-s\",\t\tarm1156t2s, arm1156t2s,\t\tTF_LDSCHED,\t  6T2,\tISA_FEAT(ISA_ARMv6t2), v6t2)\n+ARM_CORE(\"arm1156t2f-s\",\tarm1156t2fs, arm1156t2fs,\tTF_LDSCHED,\t  6T2,\tISA_FEAT(ISA_ARMv6t2) ISA_FEAT(isa_bit_VFPv2), v6t2)\n \n /* V6M Architecture Processors */\n-ARM_CORE(\"cortex-m1\",\t\tcortexm1, cortexm1,\t\tTF_LDSCHED,\t  6M,\tISA_FEAT(ISA_ARMv6m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n-ARM_CORE(\"cortex-m0\",\t\tcortexm0, cortexm0,\t\tTF_LDSCHED, \t  6M,\tISA_FEAT(ISA_ARMv6m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n-ARM_CORE(\"cortex-m0plus\",\tcortexm0plus, cortexm0plus,\tTF_LDSCHED, \t  6M,\tISA_FEAT(ISA_ARMv6m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m1\",\t\tcortexm1, cortexm1,\t\tTF_LDSCHED,\t  6M,\tISA_FEAT(ISA_ARMv6m), v6m)\n+ARM_CORE(\"cortex-m0\",\t\tcortexm0, cortexm0,\t\tTF_LDSCHED,\t  6M,\tISA_FEAT(ISA_ARMv6m), v6m)\n+ARM_CORE(\"cortex-m0plus\",\tcortexm0plus, cortexm0plus,\tTF_LDSCHED,\t  6M,\tISA_FEAT(ISA_ARMv6m), v6m)\n \n /* V6M Architecture Processors for small-multiply implementations.  */\n-ARM_CORE(\"cortex-m1.small-multiply\",\tcortexm1smallmultiply, cortexm1,\t(TF_LDSCHED | TF_SMALLMUL),  6M,\tISA_FEAT(ISA_ARMv6m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n-ARM_CORE(\"cortex-m0.small-multiply\",\tcortexm0smallmultiply, cortexm0,\t(TF_LDSCHED | TF_SMALLMUL),  6M,\tISA_FEAT(ISA_ARMv6m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n-ARM_CORE(\"cortex-m0plus.small-multiply\",cortexm0plussmallmultiply, cortexm0plus, (TF_LDSCHED | TF_SMALLMUL), 6M,\tISA_FEAT(ISA_ARMv6m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m1.small-multiply\",\tcortexm1smallmultiply, cortexm1,\t(TF_LDSCHED | TF_SMALLMUL),  6M,\tISA_FEAT(ISA_ARMv6m), v6m)\n+ARM_CORE(\"cortex-m0.small-multiply\",\tcortexm0smallmultiply, cortexm0,\t(TF_LDSCHED | TF_SMALLMUL),  6M,\tISA_FEAT(ISA_ARMv6m), v6m)\n+ARM_CORE(\"cortex-m0plus.small-multiply\",cortexm0plussmallmultiply, cortexm0plus, (TF_LDSCHED | TF_SMALLMUL), 6M,\tISA_FEAT(ISA_ARMv6m), v6m)\n \n /* V7 Architecture Processors */\n-ARM_CORE(\"generic-armv7-a\",\tgenericv7a, genericv7a,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), cortex)\n-ARM_CORE(\"cortex-a5\",\t\tcortexa5, cortexa5,\t\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), cortex_a5)\n-ARM_CORE(\"cortex-a7\",\t\tcortexa7, cortexa7,\t\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7a) ISA_FEAT(isa_bit_adiv) ISA_FEAT(isa_bit_tdiv), ARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a7)\n-ARM_CORE(\"cortex-a8\",\t\tcortexa8, cortexa8,\t\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), cortex_a8)\n-ARM_CORE(\"cortex-a9\",\t\tcortexa9, cortexa9,\t\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), cortex_a9)\n-ARM_CORE(\"cortex-a12\",\t\tcortexa12, cortexa17,\t\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7a) ISA_FEAT(isa_bit_adiv) ISA_FEAT(isa_bit_tdiv), ARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n-ARM_CORE(\"cortex-a15\",\t\tcortexa15, cortexa15,\t\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7ve), ARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a15)\n-ARM_CORE(\"cortex-a17\",\t\tcortexa17, cortexa17,\t\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7ve), ARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n-ARM_CORE(\"cortex-r4\",\t\tcortexr4, cortexr4,\t\tTF_LDSCHED, \t  7R,\tISA_FEAT(ISA_ARMv7r), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7R), cortex)\n-ARM_CORE(\"cortex-r4f\",\t\tcortexr4f, cortexr4f,\t\tTF_LDSCHED, \t  7R,\tISA_FEAT(ISA_ARMv7r), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7R), cortex)\n-ARM_CORE(\"cortex-r5\",\t\tcortexr5, cortexr5,\t\tTF_LDSCHED, \t  7R,\tISA_FEAT(ISA_ARMv7r) ISA_FEAT(isa_bit_adiv), ARM_FSET_MAKE_CPU1 (FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n-ARM_CORE(\"cortex-r7\",\t\tcortexr7, cortexr7,\t\tTF_LDSCHED, \t  7R,\tISA_FEAT(ISA_ARMv7r) ISA_FEAT(isa_bit_adiv), ARM_FSET_MAKE_CPU1 (FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n-ARM_CORE(\"cortex-r8\",\t\tcortexr8, cortexr7,\t\tTF_LDSCHED, \t  7R,\tISA_FEAT(ISA_ARMv7r) ISA_FEAT(isa_bit_adiv), ARM_FSET_MAKE_CPU1 (FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n-ARM_CORE(\"cortex-m7\",\t\tcortexm7, cortexm7,\t\tTF_LDSCHED, \t  7EM,\tISA_FEAT(ISA_ARMv7em) ISA_FEAT(isa_quirk_no_volatile_ce), ARM_FSET_MAKE_CPU1 (FL_NO_VOLATILE_CE | FL_FOR_ARCH7EM), cortex_m7)\n-ARM_CORE(\"cortex-m4\",\t\tcortexm4, cortexm4,\t\tTF_LDSCHED, \t  7EM,\tISA_FEAT(ISA_ARMv7em), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7EM), v7m)\n-ARM_CORE(\"cortex-m3\",\t\tcortexm3, cortexm3,\t\tTF_LDSCHED, \t  7M,\tISA_FEAT(ISA_ARMv7m) ISA_FEAT(isa_quirk_cm3_ldrd), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7M), v7m)\n-ARM_CORE(\"marvell-pj4\",\t\tmarvell_pj4, marvell_pj4,\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), marvell_pj4)\n+ARM_CORE(\"generic-armv7-a\",\tgenericv7a, genericv7a,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7a), cortex)\n+ARM_CORE(\"cortex-a5\",\t\tcortexa5, cortexa5,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7a), cortex_a5)\n+ARM_CORE(\"cortex-a7\",\t\tcortexa7, cortexa7,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7a) ISA_FEAT(isa_bit_adiv) ISA_FEAT(isa_bit_tdiv), cortex_a7)\n+ARM_CORE(\"cortex-a8\",\t\tcortexa8, cortexa8,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7a), cortex_a8)\n+ARM_CORE(\"cortex-a9\",\t\tcortexa9, cortexa9,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7a), cortex_a9)\n+ARM_CORE(\"cortex-a12\",\t\tcortexa12, cortexa17,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7a) ISA_FEAT(isa_bit_adiv) ISA_FEAT(isa_bit_tdiv), cortex_a12)\n+ARM_CORE(\"cortex-a15\",\t\tcortexa15, cortexa15,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7ve), cortex_a15)\n+ARM_CORE(\"cortex-a17\",\t\tcortexa17, cortexa17,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7ve), cortex_a12)\n+ARM_CORE(\"cortex-r4\",\t\tcortexr4, cortexr4,\t\tTF_LDSCHED,\t  7R,\tISA_FEAT(ISA_ARMv7r), cortex)\n+ARM_CORE(\"cortex-r4f\",\t\tcortexr4f, cortexr4f,\t\tTF_LDSCHED,\t  7R,\tISA_FEAT(ISA_ARMv7r), cortex)\n+ARM_CORE(\"cortex-r5\",\t\tcortexr5, cortexr5,\t\tTF_LDSCHED,\t  7R,\tISA_FEAT(ISA_ARMv7r) ISA_FEAT(isa_bit_adiv), cortex)\n+ARM_CORE(\"cortex-r7\",\t\tcortexr7, cortexr7,\t\tTF_LDSCHED,\t  7R,\tISA_FEAT(ISA_ARMv7r) ISA_FEAT(isa_bit_adiv), cortex)\n+ARM_CORE(\"cortex-r8\",\t\tcortexr8, cortexr7,\t\tTF_LDSCHED,\t  7R,\tISA_FEAT(ISA_ARMv7r) ISA_FEAT(isa_bit_adiv), cortex)\n+ARM_CORE(\"cortex-m7\",\t\tcortexm7, cortexm7,\t\tTF_LDSCHED,\t  7EM,\tISA_FEAT(ISA_ARMv7em) ISA_FEAT(isa_quirk_no_volatile_ce), cortex_m7)\n+ARM_CORE(\"cortex-m4\",\t\tcortexm4, cortexm4,\t\tTF_LDSCHED,\t  7EM,\tISA_FEAT(ISA_ARMv7em), v7m)\n+ARM_CORE(\"cortex-m3\",\t\tcortexm3, cortexm3,\t\tTF_LDSCHED,\t  7M,\tISA_FEAT(ISA_ARMv7m) ISA_FEAT(isa_quirk_cm3_ldrd), v7m)\n+ARM_CORE(\"marvell-pj4\",\t\tmarvell_pj4, marvell_pj4,\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7a), marvell_pj4)\n \n /* V7 big.LITTLE implementations */\n-ARM_CORE(\"cortex-a15.cortex-a7\", cortexa15cortexa7, cortexa7,\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7ve), ARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a15)\n-ARM_CORE(\"cortex-a17.cortex-a7\", cortexa17cortexa7, cortexa7,\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7ve), ARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n+ARM_CORE(\"cortex-a15.cortex-a7\", cortexa15cortexa7, cortexa7,\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7ve), cortex_a15)\n+ARM_CORE(\"cortex-a17.cortex-a7\", cortexa17cortexa7, cortexa7,\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7ve), cortex_a12)\n \n /* V8 A-profile Architecture Processors */\n-ARM_CORE(\"cortex-a32\",\tcortexa32, cortexa53,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a35)\n-ARM_CORE(\"cortex-a35\",\tcortexa35, cortexa53,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a35)\n-ARM_CORE(\"cortex-a53\",\tcortexa53, cortexa53,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a53)\n-ARM_CORE(\"cortex-a57\",\tcortexa57, cortexa57,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n-ARM_CORE(\"cortex-a72\",\tcortexa72, cortexa57,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n-ARM_CORE(\"cortex-a73\",\tcortexa73, cortexa57,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a73)\n-ARM_CORE(\"exynos-m1\",\texynosm1,  exynosm1,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), exynosm1)\n-ARM_CORE(\"falkor\",\tfalkor,    cortexa57,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), qdf24xx)\n-ARM_CORE(\"qdf24xx\",\tqdf24xx,   cortexa57,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), qdf24xx)\n-ARM_CORE(\"xgene1\",      xgene1,    xgene1,      TF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH8A),            xgene1)\n+ARM_CORE(\"cortex-a32\",\tcortexa32, cortexa53,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a35)\n+ARM_CORE(\"cortex-a35\",\tcortexa35, cortexa53,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a35)\n+ARM_CORE(\"cortex-a53\",\tcortexa53, cortexa53,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a53)\n+ARM_CORE(\"cortex-a57\",\tcortexa57, cortexa57,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a57)\n+ARM_CORE(\"cortex-a72\",\tcortexa72, cortexa57,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a57)\n+ARM_CORE(\"cortex-a73\",\tcortexa73, cortexa57,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a73)\n+ARM_CORE(\"exynos-m1\",\texynosm1,  exynosm1,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), exynosm1)\n+ARM_CORE(\"falkor\",\tfalkor,\t   cortexa57,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), qdf24xx)\n+ARM_CORE(\"qdf24xx\",\tqdf24xx,   cortexa57,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), qdf24xx)\n+ARM_CORE(\"xgene1\",\txgene1,\t   xgene1,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a), xgene1)\n \n /* V8 A-profile big.LITTLE implementations */\n-ARM_CORE(\"cortex-a57.cortex-a53\", cortexa57cortexa53, cortexa53, TF_LDSCHED,\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n-ARM_CORE(\"cortex-a72.cortex-a53\", cortexa72cortexa53, cortexa53, TF_LDSCHED, \t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n-ARM_CORE(\"cortex-a73.cortex-a35\", cortexa73cortexa35, cortexa53, TF_LDSCHED, \t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a73)\n-ARM_CORE(\"cortex-a73.cortex-a53\", cortexa73cortexa53, cortexa53, TF_LDSCHED, \t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a73)\n+ARM_CORE(\"cortex-a57.cortex-a53\", cortexa57cortexa53, cortexa53, TF_LDSCHED,\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a57)\n+ARM_CORE(\"cortex-a72.cortex-a53\", cortexa72cortexa53, cortexa53, TF_LDSCHED,\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a57)\n+ARM_CORE(\"cortex-a73.cortex-a35\", cortexa73cortexa35, cortexa53, TF_LDSCHED,\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a73)\n+ARM_CORE(\"cortex-a73.cortex-a53\", cortexa73cortexa53, cortexa53, TF_LDSCHED,\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a73)\n \n /* V8 M-profile implementations.  */\n-ARM_CORE(\"cortex-m23\",\tcortexm23, cortexm23,\tTF_LDSCHED,\t\t\t  8M_BASE, ISA_FEAT(ISA_ARMv8m_base), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH8M_BASE), v6m)\n-ARM_CORE(\"cortex-m33\",\tcortexm33, cortexm33,\tTF_LDSCHED, \t\t\t  8M_MAIN, ISA_FEAT(ISA_ARMv8m_main) ISA_FEAT(isa_bit_ARMv7em), ARM_FSET_MAKE_CPU1 (FL_ARCH7EM | FL_FOR_ARCH8M_MAIN), v7m)\n+ARM_CORE(\"cortex-m23\",\tcortexm23, cortexm23,\tTF_LDSCHED,\t\t\t  8M_BASE, ISA_FEAT(ISA_ARMv8m_base), v6m)\n+ARM_CORE(\"cortex-m33\",\tcortexm33, cortexm33,\tTF_LDSCHED,\t\t\t  8M_MAIN, ISA_FEAT(ISA_ARMv8m_main) ISA_FEAT(isa_bit_ARMv7em), v7m)"}, {"sha": "a0d99a8ed9a6582297327cf4697e92c667d7278b", "filename": "gcc/config/arm/arm-flags.h", "status": "modified", "additions": 0, "deletions": 185, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253/gcc%2Fconfig%2Farm%2Farm-flags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253/gcc%2Fconfig%2Farm%2Farm-flags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-flags.h?ref=5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253", "patch": "@@ -32,189 +32,4 @@\n #define TF_XSCALE\t(1U << 5)\n #define TF_NO_MODE32\t(1U << 6)\n \n-/* Flags used to identify the presence of processor capabilities.  */\n-\n-/* Bit values used to identify processor capabilities.  */\n-#define FL_NONE\t      (0U)\t\t/* No flags.  */\n-#define FL_ANY\t      (0xffffffffU)\t/* All flags.  */\n-#define FL_CO_PROC    (1U << 0)\t\t/* Has external co-processor bus.  */\n-#define FL_ARCH3M     (1U << 1)\t\t/* Extended multiply.  */\n-#define FL_MODE26     (1U << 2)\t\t/* 26-bit mode support.  */\n-#define FL_MODE32     (1U << 3)\t\t/* 32-bit mode support.  */\n-#define FL_ARCH4      (1U << 4)\t\t/* Architecture rel 4.  */\n-#define FL_ARCH5      (1U << 5)\t\t/* Architecture rel 5.  */\n-#define FL_THUMB      (1U << 6)\t\t/* Thumb aware.  */\n-/* Spare\t      (1U << 7)\t */\n-/* Spare\t      (1U << 8)  */\n-#define FL_ARCH5E     (1U << 9)\t\t/* DSP extensions to v5.  */\n-#define FL_XSCALE     (1U << 10)\t/* XScale.  */\n-/* Spare\t      (1U << 11) */\n-#define FL_ARCH6      (1U << 12)\t/* Architecture rel 6.  Adds\n-\t\t\t\t\t   media instructions.  */\n-#define FL_VFPV2      (1U << 13)\t/* Vector Floating Point V2.  */\n-/* Spare\t      (1U << 14) */\n-#define FL_ARCH6K     (1U << 15)\t/* Architecture rel 6 K extensions.  */\n-#define FL_THUMB2     (1U << 16)\t/* Thumb-2.  */\n-#define FL_NOTM\t      (1U << 17)\t/* Instructions not present in the 'M'\n-\t\t\t\t\t   profile.  */\n-#define FL_THUMB_DIV  (1U << 18)\t/* Hardware divide (Thumb mode).  */\n-#define FL_VFPV3      (1U << 19)\t/* Vector Floating Point V3.  */\n-#define FL_NEON       (1U << 20)\t/* Neon instructions.  */\n-#define FL_ARCH7EM    (1U << 21)\t/* Instructions present in the ARMv7E-M\n-\t\t\t\t\t   architecture.  */\n-#define FL_ARCH7      (1U << 22)\t/* Architecture 7.  */\n-#define FL_ARM_DIV    (1U << 23)\t/* Hardware divide (ARM mode).  */\n-#define FL_ARCH8      (1U << 24)\t/* Architecture 8.  */\n-#define FL_CRC32      (1U << 25)\t/* ARMv8 CRC32 instructions.  */\n-/* Spare\t      (1U << 26) */\n-#define FL_NO_VOLATILE_CE  (1U << 27)\t/* No volatile memory in IT block.  */\n-\n-#define FL_IWMMXT     (1U << 29)\t/* XScale v2 or \"Intel Wireless MMX\n-\t\t\t\t\t   technology\".  */\n-#define FL_IWMMXT2    (1U << 30)\t/* \"Intel Wireless MMX2\n-\t\t\t\t\t    technology\".  */\n-#define FL_ARCH6KZ    (1U << 31)\t/* ARMv6KZ architecture.  */\n-\n-#define FL2_ARCH8_1   (1U << 0)\t\t/* Architecture 8.1.  */\n-#define FL2_ARCH8_2   (1U << 1)\t\t/* Architecture 8.2.  */\n-#define FL2_FP16INST  (1U << 2)\t\t/* FP16 Instructions for ARMv8.2 and\n-\t\t\t\t\t   later.  */\n-#define FL2_CMSE      (1U << 3)\t\t/* ARMv8-M Security Extensions.  */\n-\n-/* Flags that only effect tuning, not available instructions.  */\n-#define FL_TUNE\t\t(FL_VFPV2)\n-\n-#define FL_FOR_ARCH2\t\tFL_NOTM\n-#define FL_FOR_ARCH3\t\t(FL_FOR_ARCH2 | FL_MODE32)\n-#define FL_FOR_ARCH3M\t\t(FL_FOR_ARCH3 | FL_ARCH3M)\n-#define FL_FOR_ARCH4\t\t(FL_FOR_ARCH3M | FL_ARCH4)\n-#define FL_FOR_ARCH4T\t\t(FL_FOR_ARCH4 | FL_THUMB)\n-#define FL_FOR_ARCH5\t\t(FL_FOR_ARCH4 | FL_ARCH5)\n-#define FL_FOR_ARCH5T\t\t(FL_FOR_ARCH5 | FL_THUMB)\n-#define FL_FOR_ARCH5E\t\t(FL_FOR_ARCH5 | FL_ARCH5E)\n-#define FL_FOR_ARCH5TE\t\t(FL_FOR_ARCH5E | FL_THUMB)\n-#define FL_FOR_ARCH5TEJ\t\tFL_FOR_ARCH5TE\n-#define FL_FOR_ARCH6\t\t(FL_FOR_ARCH5TE | FL_ARCH6)\n-#define FL_FOR_ARCH6J\t\tFL_FOR_ARCH6\n-#define FL_FOR_ARCH6K\t\t(FL_FOR_ARCH6 | FL_ARCH6K)\n-#define FL_FOR_ARCH6Z\t\tFL_FOR_ARCH6\n-#define FL_FOR_ARCH6ZK\t\tFL_FOR_ARCH6K\n-#define FL_FOR_ARCH6KZ\t\t(FL_FOR_ARCH6K | FL_ARCH6KZ)\n-#define FL_FOR_ARCH6T2\t\t(FL_FOR_ARCH6 | FL_THUMB2)\n-#define FL_FOR_ARCH6M\t\t(FL_FOR_ARCH6 & ~FL_NOTM)\n-#define FL_FOR_ARCH7\t\t((FL_FOR_ARCH6T2 & ~FL_NOTM) | FL_ARCH7)\n-#define FL_FOR_ARCH7A\t\t(FL_FOR_ARCH7 | FL_NOTM | FL_ARCH6K)\n-#define FL_FOR_ARCH7VE\t\t(FL_FOR_ARCH7A | FL_THUMB_DIV | FL_ARM_DIV)\n-#define FL_FOR_ARCH7R\t\t(FL_FOR_ARCH7A | FL_THUMB_DIV)\n-#define FL_FOR_ARCH7M\t\t(FL_FOR_ARCH7 | FL_THUMB_DIV)\n-#define FL_FOR_ARCH7EM\t\t(FL_FOR_ARCH7M | FL_ARCH7EM)\n-#define FL_FOR_ARCH8A\t\t(FL_FOR_ARCH7VE | FL_ARCH8)\n-#define FL2_FOR_ARCH8_1A\tFL2_ARCH8_1\n-#define FL2_FOR_ARCH8_2A\t(FL2_FOR_ARCH8_1A | FL2_ARCH8_2)\n-#define FL_FOR_ARCH8M_BASE\t(FL_FOR_ARCH6M | FL_ARCH8 | FL_THUMB_DIV)\n-#define FL_FOR_ARCH8M_MAIN\t(FL_FOR_ARCH7M | FL_ARCH8)\n-\n-/* There are too many feature bits to fit in a single word so the set of cpu and\n-   fpu capabilities is a structure.  A feature set is created and manipulated\n-   with the ARM_FSET macros.  */\n-\n-typedef struct\n-{\n-  unsigned cpu[2];\n-} arm_feature_set;\n-\n-\n-/* Initialize a feature set.  */\n-\n-#define ARM_FSET_MAKE(CPU1,CPU2) { { (CPU1), (CPU2) } }\n-\n-#define ARM_FSET_MAKE_CPU1(CPU1) ARM_FSET_MAKE ((CPU1), (FL_NONE))\n-#define ARM_FSET_MAKE_CPU2(CPU2) ARM_FSET_MAKE ((FL_NONE), (CPU2))\n-\n-/* Accessors.  */\n-\n-#define ARM_FSET_CPU1(S) ((S).cpu[0])\n-#define ARM_FSET_CPU2(S) ((S).cpu[1])\n-\n-/* Useful combinations.  */\n-\n-#define ARM_FSET_EMPTY ARM_FSET_MAKE (FL_NONE, FL_NONE)\n-#define ARM_FSET_ANY ARM_FSET_MAKE (FL_ANY, FL_ANY)\n-\n-/* Tests for a specific CPU feature.  */\n-\n-#define ARM_FSET_HAS_CPU1(A, F)  \\\n-  (((A).cpu[0] & ((unsigned long)(F))) == ((unsigned long)(F)))\n-#define ARM_FSET_HAS_CPU2(A, F)  \\\n-  (((A).cpu[1] & ((unsigned long)(F))) == ((unsigned long)(F)))\n-#define ARM_FSET_HAS_CPU(A, F1, F2)\t\t\t\t\\\n-  (ARM_FSET_HAS_CPU1 ((A), (F1)) && ARM_FSET_HAS_CPU2 ((A), (F2)))\n-\n-/* Add a feature to a feature set.  */\n-\n-#define ARM_FSET_ADD_CPU1(DST, F)\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    (DST).cpu[0] |= (F);\t\t\t\\\n-  } while (0)\n-\n-#define ARM_FSET_ADD_CPU2(DST, F)\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    (DST).cpu[1] |= (F);\t\t\t\\\n-  } while (0)\n-\n-/* Remove a feature from a feature set.  */\n-\n-#define ARM_FSET_DEL_CPU1(DST, F)\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    (DST).cpu[0] &= ~(F);\t\t\t\\\n-  } while (0)\n-\n-#define ARM_FSET_DEL_CPU2(DST, F)\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    (DST).cpu[1] &= ~(F);\t\t\t\\\n-  } while (0)\n-\n-/* Union of feature sets.  */\n-\n-#define ARM_FSET_UNION(DST,F1,F2)\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    (DST).cpu[0] = (F1).cpu[0] | (F2).cpu[0];\t\\\n-    (DST).cpu[1] = (F1).cpu[1] | (F2).cpu[1];\t\\\n-  } while (0)\n-\n-/* Intersection of feature sets.  */\n-\n-#define ARM_FSET_INTER(DST,F1,F2)\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    (DST).cpu[0] = (F1).cpu[0] & (F2).cpu[0];\t\\\n-    (DST).cpu[1] = (F1).cpu[1] & (F2).cpu[1];\t\\\n-  } while (0)\n-\n-/* Exclusive disjunction.  */\n-\n-#define ARM_FSET_XOR(DST,F1,F2)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    (DST).cpu[0] = (F1).cpu[0] ^ (F2).cpu[0];\t\t\\\n-    (DST).cpu[1] = (F1).cpu[1] ^ (F2).cpu[1];\t\t\\\n-  } while (0)\n-\n-/* Difference of feature sets: F1 excluding the elements of F2.  */\n-\n-#define ARM_FSET_EXCLUDE(DST,F1,F2)\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    (DST).cpu[0] = (F1).cpu[0] & ~(F2).cpu[0];\t\\\n-    (DST).cpu[1] = (F1).cpu[1] & ~(F2).cpu[1];\t\\\n-  } while (0)\n-\n-/* Test for an empty feature set.  */\n-\n-#define ARM_FSET_IS_EMPTY(A)\t\t\\\n-  (!((A).cpu[0]) && !((A).cpu[1]))\n-\n-/* Tests whether the cpu features of A are a subset of B.  */\n-\n-#define ARM_FSET_CPU_SUBSET(A,B)\t\t\t\t\t\\\n-  ((((A).cpu[0] & (B).cpu[0]) == (A).cpu[0])\t\t\t\t\\\n-   && (((A).cpu[1] & (B).cpu[1]) == (A).cpu[1]))\n-\n #endif /* GCC_ARM_FLAGS_H */"}, {"sha": "3de110e263c966a4a3cfebb6dc4875c4738bbc21", "filename": "gcc/config/arm/arm-opts.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253/gcc%2Fconfig%2Farm%2Farm-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253/gcc%2Fconfig%2Farm%2Farm-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-opts.h?ref=5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253", "patch": "@@ -32,7 +32,7 @@\n enum processor_type\n {\n #undef ARM_CORE\n-#define ARM_CORE(NAME, INTERNAL_IDENT, IDENT, TUNE_FLAGS, ARCH, ISA, FLAGS, COSTS) \\\n+#define ARM_CORE(NAME, INTERNAL_IDENT, IDENT, TUNE_FLAGS, ARCH, ISA, COSTS) \\\n   TARGET_CPU_##INTERNAL_IDENT,\n #include \"arm-cores.def\"\n #undef ARM_CORE"}, {"sha": "822ef145f79122d9a93fcacde731c355955288ac", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5d4dc0cddb61b55e6cb3a12df2004da1cc3e4253", "patch": "@@ -957,7 +957,6 @@ struct processors\n   const char *arch;\n   enum base_architecture base_arch;\n   enum isa_feature isa_bits[isa_num_bits];\n-  const arm_feature_set flags;\n   const struct tune_params *const tune;\n };\n \n@@ -2292,13 +2291,12 @@ const struct tune_params arm_fa726te_tune =\n static const struct processors all_cores[] =\n {\n   /* ARM Cores */\n-#define ARM_CORE(NAME, X, IDENT, TUNE_FLAGS, ARCH, ISA, FLAGS, COSTS)\t\\\n+#define ARM_CORE(NAME, X, IDENT, TUNE_FLAGS, ARCH, ISA, COSTS)\t\\\n   {NAME, TARGET_CPU_##IDENT, TUNE_FLAGS, #ARCH, BASE_ARCH_##ARCH, \\\n-   {ISA isa_nobit}, FLAGS, &arm_##COSTS##_tune},\n+   {ISA isa_nobit}, &arm_##COSTS##_tune},\n #include \"arm-cores.def\"\n #undef ARM_CORE\n-  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, {isa_nobit},\n-   ARM_FSET_EMPTY, NULL}\n+  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, {isa_nobit}, NULL}\n };\n \n static const struct processors all_architectures[] =\n@@ -2307,12 +2305,12 @@ static const struct processors all_architectures[] =\n   /* We don't specify tuning costs here as it will be figured out\n      from the core.  */\n \n-#define ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, ISA, FLAGS)\t\t\\\n+#define ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, ISA)\t\t\t\\\n   {NAME, TARGET_CPU_##CORE, TUNE_FLAGS, #ARCH, BASE_ARCH_##ARCH,\t\\\n-  {ISA isa_nobit}, FLAGS, NULL},\n+  {ISA isa_nobit}, NULL},\n #include \"arm-arches.def\"\n #undef ARM_ARCH\n-  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, {isa_nobit}, ARM_FSET_EMPTY, NULL}\n+  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, {isa_nobit}, NULL}\n };\n \n /* The name of the preprocessor macro to define for this architecture.  PROFILE"}]}