{"sha": "0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUxYjk4Y2NjY2I4ODljYTc0ZTVlY2QzOWRjNWJkOWYxZjQ0MmZiMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-02-28T20:37:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-02-28T20:37:54Z"}, "message": "locale_facets.tcc (num_get<>::_M_extract_float): According to 22.2.3.1...\n\n2004-02-28  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_float):\n\tAccording to 22.2.3.1, p2, 'units' may be followed by 'e' with\n\tno 'decimal-point' in the middle: in this case too we must fix\n\tup __found_grouping; slightly tweak.\n\t* testsuite/22_locale/num_get/get/char/14.cc: New.\n\t* testsuite/22_locale/num_get/get/wchar_t/14.cc: New.\n\nFrom-SVN: r78625", "tree": {"sha": "55b6e5d30dfd53ce1497385626f8d3aa5c0d4ef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55b6e5d30dfd53ce1497385626f8d3aa5c0d4ef4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1/comments", "author": null, "committer": null, "parents": [{"sha": "757f9053a2dc9988345ba87829c2a9220c9a4ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/757f9053a2dc9988345ba87829c2a9220c9a4ef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/757f9053a2dc9988345ba87829c2a9220c9a4ef2"}], "stats": {"total": 146, "additions": 137, "deletions": 9}, "files": [{"sha": "9af9d868cd030977cf4e5c50e86c7241be7a5c47", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1", "patch": "@@ -1,3 +1,12 @@\n+2004-02-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_float):\n+\tAccording to 22.2.3.1, p2, 'units' may be followed by 'e' with\n+\tno 'decimal-point' in the middle: in this case too we must fix\n+\tup __found_grouping; slightly tweak.\n+\t* testsuite/22_locale/num_get/get/char/14.cc: New.\n+\t* testsuite/22_locale/num_get/get/wchar_t/14.cc: New.\n+\n 2004-02-27  Eric Christopher  <echristo@redhat.com>\n             Phil Edwards  <phil@codesourcery.com>\n "}, {"sha": "ae824b5c29b3b9871cd28fd2c877aba89f9e3363", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1", "patch": "@@ -188,8 +188,7 @@ namespace std\n \t      && (!__lc->_M_use_grouping\n \t\t  || !__traits_type::eq(__c, __lc->_M_thousands_sep)))\n \t    {\n-\t      __xtrc += __plus ? _S_atoms_in[_S_iplus]\n-\t\t               : _S_atoms_in[_S_iminus];\n+\t      __xtrc += __plus ? '+' : '-';\n \t      ++__beg;\n \t    }\n \t}\n@@ -206,7 +205,7 @@ namespace std\n \t    {\n \t      if (!__found_mantissa)\n \t\t{\n-\t\t  __xtrc += _S_atoms_in[_S_izero];\n+\t\t  __xtrc += '0';\n \t\t  __found_mantissa = true;\n \t\t}\n \t      ++__beg;\n@@ -223,6 +222,7 @@ namespace std\n \t__found_grouping.reserve(32);\n       int __sep_pos = 0;\n       bool __e;\n+      const char_type* __lit_zero = __lit + _S_izero;\n       const char_type* __q;\n       while (__beg != __end)\n         {\n@@ -267,7 +267,7 @@ namespace std\n \t      else\n \t\tbreak;\n \t    }\n-          else if (__q = __traits_type::find(__lit + _S_izero, 10, __c))\n+          else if (__q = __traits_type::find(__lit_zero, 10, __c))\n \t    {\n \t      __xtrc += _S_atoms_in[__q - __lit];\n \t      __found_mantissa = true;\n@@ -279,7 +279,9 @@ namespace std\n \t\t   && __found_mantissa && !__found_sci)\n \t    {\n \t      // Scientific notation.\n-\t      __xtrc += __e ? _S_atoms_in[_S_ie] : _S_atoms_in[_S_iE];\n+\t      if (__found_grouping.size() && !__found_dec)\n+\t\t__found_grouping += static_cast<char>(__sep_pos);\n+\t      __xtrc += __e ? 'e' : 'E';\n \t      __found_sci = true;\n \n \t      // Remove optional plus or minus sign, if they exist.\n@@ -289,8 +291,7 @@ namespace std\n \t\t\t\t\t\t\t__lit[_S_iplus]);\n \t\t  if (__plus || __traits_type::eq(*__beg, __lit[_S_iminus]))\n \t\t    {\n-\t\t      __xtrc += __plus ? _S_atoms_in[_S_iplus]\n-\t\t\t               : _S_atoms_in[_S_iminus];\n+\t\t      __xtrc += __plus ? '+' : '-';\n \t\t      ++__beg;\n \t\t    }\n \t\t}\n@@ -304,8 +305,8 @@ namespace std\n       // match, then get very very upset, and set failbit.\n       if (__found_grouping.size())\n         {\n-          // Add the ending grouping if a decimal wasn't found.\n-\t  if (!__found_dec)\n+          // Add the ending grouping if a decimal or 'e'/'E' wasn't found.\n+\t  if (!__found_dec && !__found_sci)\n \t    __found_grouping += static_cast<char>(__sep_pos);\n \n           if (!std::__verify_grouping(__lc->_M_grouping, __lc->_M_grouping_size,"}, {"sha": "e2ce6daa5e866d32f4a63a7565660807aa45be33", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/14.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F14.cc?ref=0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1", "patch": "@@ -0,0 +1,59 @@\n+// 2004-02-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct Punct: std::numpunct<char>\n+{\n+  std::string do_grouping() const { return \"\\1\"; }\n+};\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+  \n+  bool test __attribute__((unused)) = true;\n+\n+  istringstream iss;\n+  iss.imbue(locale(iss.getloc(), static_cast<numpunct<char>*>(new Punct)));\n+  const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc()); \n+\n+  ios_base::iostate err = ios_base::goodbit;\n+  iterator_type end;\n+  double d = 0.0;\n+  double d1 = 1000.0;\n+  \n+  iss.str(\"1,0e2\");\n+  err = ios_base::goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( d == d1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fd5e55e2a9fcb8279e7781298c4a02aa3b48bffb", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/14.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F14.cc?ref=0e1b98ccccb889ca74e5ecd39dc5bd9f1f442fb1", "patch": "@@ -0,0 +1,59 @@\n+// 2004-02-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct Punct: std::numpunct<wchar_t>\n+{\n+  std::string do_grouping() const { return \"\\1\"; }\n+};\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+  \n+  bool test __attribute__((unused)) = true;\n+\n+  wistringstream iss;\n+  iss.imbue(locale(iss.getloc(), static_cast<numpunct<wchar_t>*>(new Punct)));\n+  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n+\n+  ios_base::iostate err = ios_base::goodbit;\n+  iterator_type end;\n+  double d = 0.0;\n+  double d1 = 1000.0;\n+  \n+  iss.str(L\"1,0e2\");\n+  err = ios_base::goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( d == d1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}