{"sha": "fe0b9fb522697476efe3f577aa92d0aac6bd220e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUwYjlmYjUyMjY5NzQ3NmVmZTNmNTc3YWE5MmQwYWFjNmJkMjIwZQ==", "commit": {"author": {"name": "Ranjit Mathew", "email": "rmathew@gcc.gnu.org", "date": "2004-06-27T18:16:49Z"}, "committer": {"name": "Ranjit Mathew", "email": "rmathew@gcc.gnu.org", "date": "2004-06-27T18:16:49Z"}, "message": "Formatting fixes.\n\n        * expr.c (class_has_finalize_method): Fix method name indentation.\n        (expand_java_call): Remove K&R style parameter declaration.\n        (expand_invoke): Fix statement indentation.\n        (expand_java_field_op): Likewise.\n        * parse-scan.y: Fix typo.\n        (reset_report): Fix method name indentation.\n        * parse.y (unresolved_type_p, build_expr_block): Remove extra blank\n        line. Fix typos.\n        * verify.c (verify_jvm_instructions): Document parameters, insert\n        page break.\n        * lang.c (lang_init_source): Fix method name indentation.\n        * class.c (common_enclosing_context_p): Likewise.\n        (emit_symbol_table): Fix parameter list indentation.\n        * decl.c (add_stmt_to_compound, java_add_stmt): Remove K&R style\n        parameter declaration.\n        * constants.c: Fix copyright notice indentation.\n        * typeck.c (find_method_in_superclasses): Fix parameter list\n        indentation.\n        (find_method_in_interfaces): Likewise.\n        * zextract.c (makelong): Fix method name indentation.\n\nFrom-SVN: r83738", "tree": {"sha": "ae6a831680a4a8773039866e4630fca3682dcab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae6a831680a4a8773039866e4630fca3682dcab3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe0b9fb522697476efe3f577aa92d0aac6bd220e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0b9fb522697476efe3f577aa92d0aac6bd220e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe0b9fb522697476efe3f577aa92d0aac6bd220e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0b9fb522697476efe3f577aa92d0aac6bd220e/comments", "author": null, "committer": null, "parents": [{"sha": "a6048f29032044e460566124fd2634b4a9217a42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6048f29032044e460566124fd2634b4a9217a42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6048f29032044e460566124fd2634b4a9217a42"}], "stats": {"total": 114, "additions": 74, "deletions": 40}, "files": [{"sha": "8a7a05d3331267f850247afcea91182193b40326", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=fe0b9fb522697476efe3f577aa92d0aac6bd220e", "patch": "@@ -1,3 +1,27 @@\n+2004-06-27  Ranjit Mathew  <rmathew@hotmail.com>\n+\n+\tFormatting fixes.\n+\t* expr.c (class_has_finalize_method): Fix method name indentation.\n+\t(expand_java_call): Remove K&R style parameter declaration.\n+\t(expand_invoke): Fix statement indentation.\n+\t(expand_java_field_op): Likewise.\n+\t* parse-scan.y: Fix typo.\n+\t(reset_report): Fix method name indentation.\n+\t* parse.y (unresolved_type_p, build_expr_block): Remove extra blank\n+\tline. Fix typos.\n+\t* verify.c (verify_jvm_instructions): Document parameters, insert\n+\tpage break.\n+\t* lang.c (lang_init_source): Fix method name indentation.\n+\t* class.c (common_enclosing_context_p): Likewise.\n+\t(emit_symbol_table): Fix parameter list indentation.\n+\t* decl.c (add_stmt_to_compound, java_add_stmt): Remove K&R style\n+\tparameter declaration.\n+\t* constants.c: Fix copyright notice indentation.\n+\t* typeck.c (find_method_in_superclasses): Fix parameter list\n+\tindentation.\n+\t(find_method_in_interfaces): Likewise.\n+\t* zextract.c (makelong): Fix method name indentation.\n+\n 2004-06-26  Bryce McKinlay  <mckinlay@redhat.com>\n \n \tPR java/15715.\n@@ -14697,7 +14721,7 @@\n \tjava.lang.Object.\n \t(register_fields): Field initialization is now a MODIFY_EXPR\n \tnode. Chain initialization code to the matching lists (according\n-\tthe the field declaration modifiers).\n+\tto the field declaration modifiers).\n \t(maybe_generate_clinit): New function.\n \t(method_header): Don't set method's DECL_NAME to a WFL when adding\n \tmethods to java.lang.Object."}, {"sha": "a9852d5d85e0b96f361441164146c6992abf39cf", "filename": "gcc/java/class.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=fe0b9fb522697476efe3f577aa92d0aac6bd220e", "patch": "@@ -349,7 +349,8 @@ unmangle_classname (const char *name, int name_length)\n }\n \n \n-/* Given a class, create the DECLs for all its associated indirect dispatch tables.  */\n+/* Given a class, create the DECLs for all its associated indirect\n+   dispatch tables.  */\n void\n gen_indirect_dispatch_tables (tree type)\n {\n@@ -588,7 +589,8 @@ enclosing_context_p (tree type1, tree type2)\n /* Return 1 iff there exists a common enclosing context between TYPE1\n    and TYPE2.  */\n \n-int common_enclosing_context_p (tree type1, tree type2)\n+int\n+common_enclosing_context_p (tree type1, tree type2)\n {\n   if (!PURE_INNER_CLASS_TYPE_P (type1) || !PURE_INNER_CLASS_TYPE_P (type2))\n     return 0;\n@@ -2358,8 +2360,8 @@ build_symbol_entry (tree decl)\n /* Emit a symbol table: used by -findirect-dispatch.  */\n \n tree\n-emit_symbol_table (tree name, tree the_table, tree decl_list, tree the_syms_decl, \n-\t\t\t  tree the_array_element_type)\n+emit_symbol_table (tree name, tree the_table, tree decl_list,\n+                   tree the_syms_decl, tree the_array_element_type)\n {\n   tree method_list, method, table, list, null_symbol;\n   tree table_size, the_array_type;"}, {"sha": "fc4a7a30335828cf2f7cc22d1a7f94356992f0c9", "filename": "gcc/java/constants.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=fe0b9fb522697476efe3f577aa92d0aac6bd220e", "patch": "@@ -1,5 +1,6 @@\n /* Handle the constant pool of the Java(TM) Virtual Machine.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003, 2004\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n "}, {"sha": "682c8b3e3fd4df1548aa109a04b12095cb910d2c", "filename": "gcc/java/decl.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=fe0b9fb522697476efe3f577aa92d0aac6bd220e", "patch": "@@ -1877,8 +1877,7 @@ java_mark_class_local (tree class)\n /* Add a statement to a compound_expr.  */\n \n tree\n-add_stmt_to_compound (existing, type, stmt)\n-     tree existing, type, stmt;\n+add_stmt_to_compound (tree existing, tree type, tree stmt)\n {\n   if (!stmt)\n     return existing;\n@@ -1897,8 +1896,7 @@ add_stmt_to_compound (existing, type, stmt)\n    constructed.  */\n \n tree\n-java_add_stmt (stmt)\n-     tree stmt;\n+java_add_stmt (tree stmt)\n {\n   if (input_filename)\n     annotate_with_locus (stmt, input_location);"}, {"sha": "c998a68cbd02d121dcc30b19e5d2731bad37c478", "filename": "gcc/java/expr.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=fe0b9fb522697476efe3f577aa92d0aac6bd220e", "patch": "@@ -112,7 +112,7 @@ int always_initialize_class_p = 1;\n \n    If a variable is on the quick stack, it means the value of variable\n    when the quick stack was last flushed.  Conceptually, flush_quick_stack\n-   saves all the the quick_stack elements in parallel.  However, that is\n+   saves all the quick_stack elements in parallel.  However, that is\n    complicated, so it actually saves them (i.e. copies each stack value\n    to is home virtual register) from low indexes.  This allows a quick_stack\n    element at index i (counting from the bottom of stack the) to references\n@@ -1141,7 +1141,8 @@ build_address_of (tree value)\n   return build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (value)), value);\n }\n \n-bool class_has_finalize_method (tree type)\n+bool\n+class_has_finalize_method (tree type)\n {\n   tree super = CLASSTYPE_SUPER (type);\n \n@@ -1697,7 +1698,6 @@ expand_java_add_case (tree switch_expr, int match, int target_pc)\n #if 0\n static void\n expand_java_call (int target_pc, int return_address)\n-     int target_pc, return_address;\n {\n   tree target_label = lookup_label (target_pc);\n   tree value = build_int_2 (return_address, return_address < 0 ? -1 : 0);\n@@ -2041,10 +2041,13 @@ build_invokeinterface (tree dtable, tree method)\n static void\n expand_invoke (int opcode, int method_ref_index, int nargs ATTRIBUTE_UNUSED)\n {\n-  tree method_signature = COMPONENT_REF_SIGNATURE(&current_jcf->cpool, method_ref_index);\n+  tree method_signature\n+    = COMPONENT_REF_SIGNATURE(&current_jcf->cpool, method_ref_index);\n   tree method_name = COMPONENT_REF_NAME (&current_jcf->cpool, method_ref_index);\n-  tree self_type = get_class_constant\n-    (current_jcf, COMPONENT_REF_CLASS_INDEX(&current_jcf->cpool, method_ref_index));\n+  tree self_type\n+    = get_class_constant (current_jcf,\n+                          COMPONENT_REF_CLASS_INDEX(&current_jcf->cpool,\n+                          method_ref_index));\n   const char *const self_name\n     = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (self_type)));\n   tree call, func, method, arg_list, method_type;\n@@ -2363,11 +2366,12 @@ build_jni_stub (tree method)\n static void\n expand_java_field_op (int is_static, int is_putting, int field_ref_index)\n {\n-  tree self_type = \n-      get_class_constant (current_jcf, \n-\t\t\t  COMPONENT_REF_CLASS_INDEX (&current_jcf->cpool, \n-\t\t\t\t\t\t     field_ref_index));\n-  const char *self_name = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (self_type)));\n+  tree self_type\n+    = get_class_constant (current_jcf,\n+                          COMPONENT_REF_CLASS_INDEX (&current_jcf->cpool,\n+                          field_ref_index));\n+  const char *self_name\n+    = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (self_type)));\n   tree field_name = COMPONENT_REF_NAME (&current_jcf->cpool, field_ref_index);\n   tree field_signature = COMPONENT_REF_SIGNATURE (&current_jcf->cpool, \n \t\t\t\t\t\t  field_ref_index);"}, {"sha": "2656d45f2bfbd447271c4aa9c1a8adfd43f95db0", "filename": "gcc/java/lang.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=fe0b9fb522697476efe3f577aa92d0aac6bd220e", "patch": "@@ -687,7 +687,8 @@ java_print_error_function (diagnostic_context *context ATTRIBUTE_UNUSED,\n    2, function prototypes are fully resolved and can be printed when\n    reporting errors.  */\n \n-void lang_init_source (int level)\n+void\n+lang_init_source (int level)\n {\n   inhibit_error_function_printing = (level == 1);\n }"}, {"sha": "06409b244c5e234203d48066c21d50c2fae8556f", "filename": "gcc/java/parse-scan.y", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Fparse-scan.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Fparse-scan.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse-scan.y?ref=fe0b9fb522697476efe3f577aa92d0aac6bd220e", "patch": "@@ -1,5 +1,6 @@\n /* Parser grammar for quick source code scan of Java(TM) language programs.\n-   Copyright (C) 1998, 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n    Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n \n This file is part of GCC.\n@@ -553,8 +554,8 @@ static:\t\t\t\t/* Test lval.sub_token here */\n \n /* 19.8.5 Productions from 8.6: Constructor Declarations  */\n /* NOTE FOR FURTHER WORK ON CONSTRUCTORS:\n-   - If a forbidded modifier is found, the the error is either the use of\n-     a forbidded modifier for a constructor OR bogus attempt to declare a\n+   - If a forbidden modifier is found, the error is either the use of\n+     a forbidden modifier for a constructor OR bogus attempt to declare a\n      method without having specified the return type. FIXME */\n constructor_declaration:\n \tconstructor_declarator throws constructor_body\n@@ -1344,7 +1345,8 @@ report (void)\n \n /* Reset global status used by the report functions.  */\n \n-void reset_report (void)\n+void\n+reset_report (void)\n {\n   previous_output = 0;\n   package_name = NULL;"}, {"sha": "7f886707736019f8e2250979bde135c1856425a9", "filename": "gcc/java/parse.y", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=fe0b9fb522697476efe3f577aa92d0aac6bd220e", "patch": "@@ -5014,7 +5014,6 @@ method_declarator (tree id, tree list)\n \n static int\n unresolved_type_p (tree wfl, tree *returned)\n-\n {\n   if (TREE_CODE (wfl) == EXPR_WITH_FILE_LOCATION)\n     {\n@@ -12229,8 +12228,8 @@ complete_function_arguments (tree node)\n \t  flag = 1;\n \t  continue;\n \t}\n-      /* If have a string literal that we haven't transformed yet or a\n-\t crafted string buffer, as a result of use of the the String\n+      /* If we have a string literal that we haven't transformed yet or a\n+\t crafted string buffer, as a result of the use of the String\n \t `+' operator. Build `parm.toString()' and expand it. */\n       if ((temp = patch_string (parm)))\n \tparm = temp;\n@@ -12259,7 +12258,6 @@ build_debugable_stmt (int location, tree stmt)\n \n static tree\n build_expr_block (tree body, tree decls)\n-\n {\n   tree node = make_node (BLOCK);\n   BLOCK_EXPR_DECLS (node) = decls;"}, {"sha": "cf916674ccc2c72b82047316b06879e430c5fde0", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=fe0b9fb522697476efe3f577aa92d0aac6bd220e", "patch": "@@ -771,8 +771,8 @@ shallow_find_method (tree searched_class, int flags, tree method_name,\n    lookup_do.  */\n static tree\n find_method_in_superclasses (tree searched_class, int flags, \n-\t\t\t     tree method_name, \n-\t     tree signature, tree (*signature_builder) (tree))\n+                             tree method_name, tree signature,\n+                             tree (*signature_builder) (tree))\n {\n   tree klass;\n   for (klass = CLASSTYPE_SUPER (searched_class); klass != NULL_TREE;\n@@ -792,8 +792,8 @@ find_method_in_superclasses (tree searched_class, int flags,\n    for a method matching METHOD_NAME and signature SIGNATURE.  A\n    private helper for lookup_do.  */\n static tree\n-find_method_in_interfaces (tree searched_class, int flags, tree method_name, \n-\t     tree signature, tree (*signature_builder) (tree))\n+find_method_in_interfaces (tree searched_class, int flags, tree method_name,\n+                           tree signature, tree (*signature_builder) (tree))\n {\n   int i;\n   int interface_len = "}, {"sha": "ed3f9452a2e1a65364bd81dca3255f774357dd16", "filename": "gcc/java/verify.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=fe0b9fb522697476efe3f577aa92d0aac6bd220e", "patch": "@@ -1,6 +1,6 @@\n /* Handle verification of bytecoded methods for the GNU compiler for \n    the Java(TM) language.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -238,7 +238,7 @@ merge_types (tree type1, tree type2)\n }\n \n /* Merge the current type state with that at LABEL.\n-   Return -1 the the states are incompatible (i.e. on error),\n+   Return -1 if the states are incompatible (i.e. on error),\n    0 if there was no change, and 1 if there was a change. */\n \n int\n@@ -408,8 +408,11 @@ pop_argument_types (tree arg_types)\n \n #define BCODE byte_ops\n \n-/* Verify the bytecodes of the current method.\n-   Return 1 on success, 0 on failure. */\n+\f\n+/* Verify the bytecodes of the current method, with the instructions\n+   starting at BYTE_OPS and LENGTH in number, from the class file pointed to\n+   by JCF.\n+   Return 1 on success, 0 on failure.  */\n int\n verify_jvm_instructions (JCF* jcf, const unsigned char *byte_ops, long length)\n {"}, {"sha": "ee464124d221fc80b7a4cf5c36738d1b99c7551a", "filename": "gcc/java/zextract.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Fzextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0b9fb522697476efe3f577aa92d0aac6bd220e/gcc%2Fjava%2Fzextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fzextract.c?ref=fe0b9fb522697476efe3f577aa92d0aac6bd220e", "patch": "@@ -1,7 +1,7 @@\n /* Handle a .class file embedded in a .zip archive.\n    This extracts a member from a .zip file, but does not handle\n    uncompression (since that is not needed for classes.zip).\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -236,7 +236,8 @@ static ush makeword(const uch *b)\n /* Function makelong() */\n /***********************/\n \n-static ulg makelong(const uch *sig)\n+static ulg\n+makelong (const uch *sig)\n {\n     /*\n      * Convert intel style 'long' variable to non-Intel non-16-bit"}]}