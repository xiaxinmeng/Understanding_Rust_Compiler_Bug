{"sha": "bdd3547ae4279c14a9db883719c9648ed09dc18a", "node_id": "C_kwDOANBUbNoAKGJkZDM1NDdhZTQyNzljMTRhOWRiODgzNzE5Yzk2NDhlZDA5ZGMxOGE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-30T09:41:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-30T10:39:28Z"}, "message": "Remove GENERIC expr building from predicate analysis, improve dumps\n\nThe following removes duplicate dumping and makes the predicate\ndumping more readable.  That makes the GENERIC predicate build\nroutines unused which is also nice.\n\n\t* gimple-predicate-analysis.cc (dump_pred_chain): Fix\n\tparentizing and AND prepending.\n\t(predicate::dump): Do not dump the GENERIC expanded\n\tpredicate, properly parentize and prepend ORs to the\n\tpiecewise predicate dump.\n\t(build_pred_expr): Remove.", "tree": {"sha": "d977c40156b30e5f4c295e9349b84ccd938fa765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d977c40156b30e5f4c295e9349b84ccd938fa765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdd3547ae4279c14a9db883719c9648ed09dc18a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdd3547ae4279c14a9db883719c9648ed09dc18a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdd3547ae4279c14a9db883719c9648ed09dc18a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdd3547ae4279c14a9db883719c9648ed09dc18a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fbe3e6aa74dae5c75a73c46ae6683fdecd1a75d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fbe3e6aa74dae5c75a73c46ae6683fdecd1a75d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fbe3e6aa74dae5c75a73c46ae6683fdecd1a75d"}], "stats": {"total": 77, "additions": 10, "deletions": 67}, "files": [{"sha": "2b279ccd4b6aee0fe9ec0b3313aa95bd85295260", "filename": "gcc/gimple-predicate-analysis.cc", "status": "modified", "additions": 10, "deletions": 67, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdd3547ae4279c14a9db883719c9648ed09dc18a/gcc%2Fgimple-predicate-analysis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdd3547ae4279c14a9db883719c9648ed09dc18a/gcc%2Fgimple-predicate-analysis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.cc?ref=bdd3547ae4279c14a9db883719c9648ed09dc18a", "patch": "@@ -169,16 +169,14 @@ static void\n dump_pred_chain (const pred_chain &chain)\n {\n   unsigned np = chain.length ();\n-  if (np > 1)\n-    fprintf (dump_file, \"AND (\");\n-\n   for (unsigned j = 0; j < np; j++)\n     {\n+      if (j > 0)\n+\tfprintf (dump_file, \" AND (\");\n+      else\n+\tfputc ('(', dump_file);\n       dump_pred_info (chain[j]);\n-      if (j < np - 1)\n-\tfprintf (dump_file, \", \");\n-      else if (j > 0)\n-\tfputc (')', dump_file);\n+      fputc (')', dump_file);\n     }\n }\n \n@@ -579,51 +577,6 @@ uninit_analysis::collect_phi_def_edges (gphi *phi, basic_block cd_root,\n     }\n }\n \n-/* Return an expression corresponding to the predicate PRED.  */\n-\n-static tree\n-build_pred_expr (const pred_info &pred)\n-{\n-  tree_code cond_code = pred.cond_code;\n-  tree lhs = pred.pred_lhs;\n-  tree rhs = pred.pred_rhs;\n-\n-  if (pred.invert)\n-    cond_code = invert_tree_comparison (cond_code, false);\n-\n-  return build2 (cond_code, TREE_TYPE (lhs), lhs, rhs);\n-}\n-\n-/* Return an expression corresponding to PREDS.  */\n-\n-static tree\n-build_pred_expr (const pred_chain_union &preds, bool invert = false)\n-{\n-  tree_code code = invert ? TRUTH_AND_EXPR : TRUTH_OR_EXPR;\n-  tree_code subcode = invert ? TRUTH_OR_EXPR : TRUTH_AND_EXPR;\n-\n-  tree expr = NULL_TREE;\n-  for (unsigned i = 0; i != preds.length (); ++i)\n-    {\n-      tree subexpr = NULL_TREE;\n-      for (unsigned j = 0; j != preds[i].length (); ++j)\n-       {\n-         const pred_info &pi = preds[i][j];\n-         tree cond = build_pred_expr (pi);\n-\t if (invert)\n-\t   cond = invert_truthvalue (cond);\n-         subexpr = subexpr ? build2 (subcode, boolean_type_node,\n-                                     subexpr, cond) : cond;\n-       }\n-      if (expr)\n-       expr = build2 (code, boolean_type_node, expr, subexpr);\n-      else\n-       expr = subexpr;\n-    }\n-\n-  return expr;\n-}\n-\n /* Return a bitset of all PHI arguments or zero if there are too many.  */\n \n unsigned\n@@ -1925,24 +1878,14 @@ predicate::dump (gimple *stmt, const char *msg) const\n       return;\n     }\n \n-  {\n-    tree expr = build_pred_expr (m_preds);\n-    char *str = print_generic_expr_to_str (expr);\n-    fprintf (dump_file, \"\\t%s (expanded)\\n\", str);\n-    free (str);\n-  }\n-\n-  if (np > 1)\n-    fprintf (dump_file, \"\\tOR (\");\n-  else\n-    fputc ('\\t', dump_file);\n   for (unsigned i = 0; i < np; i++)\n     {\n+      if (i > 0)\n+\tfprintf (dump_file, \"\\tOR (\");\n+      else\n+\tfprintf (dump_file, \"\\t(\");\n       dump_pred_chain (m_preds[i]);\n-      if (i < np - 1)\n-\tfprintf (dump_file, \", \");\n-      else if (i > 0)\n-\tfputc (')', dump_file);\n+      fputc (')', dump_file);\n     }\n   fputc ('\\n', dump_file);\n }"}]}