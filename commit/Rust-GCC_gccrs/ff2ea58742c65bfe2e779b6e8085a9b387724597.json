{"sha": "ff2ea58742c65bfe2e779b6e8085a9b387724597", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYyZWE1ODc0MmM2NWJmZTJlNzc5YjZlODA4NWE5YjM4NzcyNDU5Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-04-03T18:44:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-04-03T18:44:01Z"}, "message": "stl_algobase.h (__copy_aux(_II, _II, _OI), [...]): Use __is_pod.\n\n2007-04-03  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algobase.h (__copy_aux(_II, _II, _OI),\n\t__copy_backward_aux(_BI1, _BI1, _BI2)): Use __is_pod.\n\t* include/bits/stl_deque.h (deque<>::_M_destroy_data(iterator,\n\titerator, const std::allocator<>&)): Use __has_trivial_constructor.\n\t(deque<>::_M_destroy_data_dispatch): Remove.\n\t* include/bits/stl_uninitialized.h (uninitialized_copy(_InputIterator,\n\t_InputIterator, _ForwardIterator), uninitialized_fill(_ForwardIterator,\n\t_ForwardIterator, const _Tp&), uninitialized_fill_n(_ForwardIterator,\n\t_Size, const _Tp&)): Use __is_pod.\n\t* include/bits/stl_tempbuf.h (_Temporary_buffer::\n\t_Temporary_buffer(_ForwardIterator, _ForwardIterator)): Use __is_pod.\n\t(_Temporary_buffer::_M_initialize_buffer): Remove.\n\t* include/bits/stl_construct.h (_Destroy(_ForwardIterator,\n\t_ForwardIterator)): Use __has_trivial_destructor.\n\t(__destroy_aux): Remove.\n\nFrom-SVN: r123480", "tree": {"sha": "4fe19eefc2fde92de4ada47d288626aefe08011d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fe19eefc2fde92de4ada47d288626aefe08011d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff2ea58742c65bfe2e779b6e8085a9b387724597", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2ea58742c65bfe2e779b6e8085a9b387724597", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff2ea58742c65bfe2e779b6e8085a9b387724597", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2ea58742c65bfe2e779b6e8085a9b387724597/comments", "author": null, "committer": null, "parents": [{"sha": "e1584860ef437d6ae77a1ff001f41763077dc934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1584860ef437d6ae77a1ff001f41763077dc934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1584860ef437d6ae77a1ff001f41763077dc934"}], "stats": {"total": 157, "additions": 56, "deletions": 101}, "files": [{"sha": "96628b9d355ec99f5a7889d9f59c6f3e1e0778eb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ea58742c65bfe2e779b6e8085a9b387724597/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ea58742c65bfe2e779b6e8085a9b387724597/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ff2ea58742c65bfe2e779b6e8085a9b387724597", "patch": "@@ -1,3 +1,21 @@\n+2007-04-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algobase.h (__copy_aux(_II, _II, _OI),\n+\t__copy_backward_aux(_BI1, _BI1, _BI2)): Use __is_pod.\n+\t* include/bits/stl_deque.h (deque<>::_M_destroy_data(iterator,\n+\titerator, const std::allocator<>&)): Use __has_trivial_constructor.\n+\t(deque<>::_M_destroy_data_dispatch): Remove.\n+\t* include/bits/stl_uninitialized.h (uninitialized_copy(_InputIterator,\n+\t_InputIterator, _ForwardIterator), uninitialized_fill(_ForwardIterator,\n+\t_ForwardIterator, const _Tp&), uninitialized_fill_n(_ForwardIterator,\n+\t_Size, const _Tp&)): Use __is_pod.\n+\t* include/bits/stl_tempbuf.h (_Temporary_buffer::\n+\t_Temporary_buffer(_ForwardIterator, _ForwardIterator)): Use __is_pod.\n+\t(_Temporary_buffer::_M_initialize_buffer): Remove.\n+\t* include/bits/stl_construct.h (_Destroy(_ForwardIterator,\n+\t_ForwardIterator)): Use __has_trivial_destructor.\n+\t(__destroy_aux): Remove.\n+\n 2007-04-03  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_map.h (map<>::insert(iterator, const value_type&):"}, {"sha": "0c4c01deaf3a34d9c7c8aa3cf3533a0422414c2a", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ea58742c65bfe2e779b6e8085a9b387724597/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ea58742c65bfe2e779b6e8085a9b387724597/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=ff2ea58742c65bfe2e779b6e8085a9b387724597", "patch": "@@ -341,7 +341,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename iterator_traits<_II>::value_type _ValueTypeI;\n       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;\n       typedef typename iterator_traits<_II>::iterator_category _Category;\n-      const bool __simple = (__is_scalar<_ValueTypeI>::__value\n+      const bool __simple = (__is_pod(_ValueTypeI)\n \t                     && __is_pointer<_II>::__value\n \t                     && __is_pointer<_OI>::__value\n \t\t\t     && __are_same<_ValueTypeI, _ValueTypeO>::__value);\n@@ -495,7 +495,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename iterator_traits<_BI1>::value_type _ValueType1;\n       typedef typename iterator_traits<_BI2>::value_type _ValueType2;\n       typedef typename iterator_traits<_BI1>::iterator_category _Category;\n-      const bool __simple = (__is_scalar<_ValueType1>::__value\n+      const bool __simple = (__is_pod(_ValueType1)\n \t                     && __is_pointer<_BI1>::__value\n \t                     && __is_pointer<_BI2>::__value\n \t\t\t     && __are_same<_ValueType1, _ValueType2>::__value);"}, {"sha": "d80ade782f0bdc7cfeee214cf2ba6c6690a02775", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 5, "deletions": 36, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ea58742c65bfe2e779b6e8085a9b387724597/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ea58742c65bfe2e779b6e8085a9b387724597/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=ff2ea58742c65bfe2e779b6e8085a9b387724597", "patch": "@@ -1,6 +1,7 @@\n // nonstandard construct and destroy functions -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -61,7 +62,6 @@\n #ifndef _STL_CONSTRUCT_H\n #define _STL_CONSTRUCT_H 1\n \n-#include <bits/cpp_type_traits.h>\n #include <new>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n@@ -106,36 +106,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _Destroy(_Tp* __pointer)\n     { __pointer->~_Tp(); }\n \n-  /**\n-   * @if maint\n-   * Destroy a range of objects with nontrivial destructors.\n-   *\n-   * This is a helper function used only by _Destroy().\n-   * @endif\n-   */\n-  template<typename _ForwardIterator>\n-    inline void\n-    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,\n-\t\t  __false_type)\n-    {\n-      for (; __first != __last; ++__first)\n-\tstd::_Destroy(&*__first);\n-    }\n-\n-  /**\n-   * @if maint\n-   * Destroy a range of objects with trivial destructors.  Since the destructors\n-   * are trivial, there's nothing to do and hopefully this function will be\n-   * entirely optimized away.\n-   *\n-   * This is a helper function used only by _Destroy().\n-   * @endif\n-   */\n-  template<typename _ForwardIterator>\n-    inline void\n-    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)\n-    { }\n-\n   /**\n    * @if maint\n    * Destroy a range of objects.  If the value_type of the object has\n@@ -149,10 +119,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n                        _Value_type;\n-      typedef typename std::__is_scalar<_Value_type>::__type\n-\t               _Has_trivial_destructor;\n-\n-      std::__destroy_aux(__first, __last, _Has_trivial_destructor());\n+      if (!__has_trivial_destructor(_Value_type))\n+\tfor (; __first != __last; ++__first)\n+\t  std::_Destroy(&*__first);\n     }\n \n   /**"}, {"sha": "2030a937e5cfa6620832d60afea948e461c6dabe", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ea58742c65bfe2e779b6e8085a9b387724597/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ea58742c65bfe2e779b6e8085a9b387724597/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=ff2ea58742c65bfe2e779b6e8085a9b387724597", "patch": "@@ -1,6 +1,6 @@\n // Deque implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -1424,13 +1424,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       void\n       _M_destroy_data_aux(iterator __first, iterator __last);\n \n-      void\n-      _M_destroy_data_dispatch(iterator, iterator, __true_type) { }\n-      \n-      void\n-      _M_destroy_data_dispatch(iterator __first, iterator __last, __false_type)\n-      { _M_destroy_data_aux(__first, __last); }\n-\n       // Called by ~deque().\n       // NB: Doesn't deallocate the nodes.\n       template<typename _Alloc1>\n@@ -1442,9 +1435,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       _M_destroy_data(iterator __first, iterator __last,\n \t\t      const std::allocator<_Tp>&)\n       {\n-\ttypedef typename std::__is_scalar<value_type>::__type\n-\t  _Has_trivial_destructor;\n-\t_M_destroy_data_dispatch(__first, __last, _Has_trivial_destructor());\n+\tif (!__has_trivial_destructor(value_type))\n+\t  _M_destroy_data_aux(__first, __last);\n       }\n \n       // Called by erase(q1, q2)."}, {"sha": "5663844f143d5e0bf28e4099d08b07b0807fe65a", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ea58742c65bfe2e779b6e8085a9b387724597/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ea58742c65bfe2e779b6e8085a9b387724597/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=ff2ea58742c65bfe2e779b6e8085a9b387724597", "patch": "@@ -90,13 +90,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       size_type  _M_len;\n       pointer    _M_buffer;\n \n-      void\n-      _M_initialize_buffer(const _Tp&, __true_type) { }\n-\n-      void\n-      _M_initialize_buffer(const _Tp& __val, __false_type)\n-      { std::uninitialized_fill_n(_M_buffer, _M_len, __val); }\n-\n     public:\n       /// As per Table mumble.\n       size_type\n@@ -145,17 +138,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     : _M_original_len(std::distance(__first, __last)),\n       _M_len(0), _M_buffer(0)\n     {\n-      // Workaround for a __type_traits bug in the pre-7.3 compiler.\n-      typedef typename std::__is_scalar<_Tp>::__type _Trivial;\n-\n       try\n \t{\n \t  pair<pointer, size_type> __p(get_temporary_buffer<\n \t\t\t\t       value_type>(_M_original_len));\n \t  _M_buffer = __p.first;\n \t  _M_len = __p.second;\n-\t  if (_M_len > 0)\n-\t    _M_initialize_buffer(*__first, _Trivial());\n+\t  if (!__is_pod(_Tp) && _M_len > 0)\n+\t    std::uninitialized_fill_n(_M_buffer, _M_len, *__first);\n \t}\n       catch(...)\n \t{"}, {"sha": "c460a56d021a87605ec337eb1c30802bb357b3c3", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 26, "deletions": 40, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ea58742c65bfe2e779b6e8085a9b387724597/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ea58742c65bfe2e779b6e8085a9b387724597/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=ff2ea58742c65bfe2e779b6e8085a9b387724597", "patch": "@@ -64,19 +64,11 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  // uninitialized_copy\n   template<typename _InputIterator, typename _ForwardIterator>\n-    inline _ForwardIterator\n-    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,\n-\t\t\t     _ForwardIterator __result,\n-\t\t\t     __true_type)\n-    { return std::copy(__first, __last, __result); }\n-\n-  template<typename _InputIterator, typename _ForwardIterator>\n-    inline _ForwardIterator\n-    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,\n-\t\t\t     _ForwardIterator __result,\n-\t\t\t     __false_type)\n+    _ForwardIterator\n+    __uninitialized_copy_aux(_InputIterator __first,\n+\t\t\t     _InputIterator __last,\n+\t\t\t     _ForwardIterator __result)\n     {\n       _ForwardIterator __cur = __result;\n       try\n@@ -106,25 +98,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     uninitialized_copy(_InputIterator __first, _InputIterator __last,\n \t\t       _ForwardIterator __result)\n     {\n-      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;\n-      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;\n-      return std::__uninitialized_copy_aux(__first, __last, __result,\n-\t\t\t\t\t   _Is_POD());\n+      typedef typename iterator_traits<_ForwardIterator>::value_type\n+\t_ValueType;\n+      if (__is_pod(_ValueType))\n+\treturn std::copy(__first, __last, __result);\n+      else\n+\treturn std::__uninitialized_copy_aux(__first, __last, __result);\n     }\n \n-  // Valid if copy construction is equivalent to assignment, and if the\n-  // destructor is trivial.\n-  template<typename _ForwardIterator, typename _Tp>\n-    inline void\n-    __uninitialized_fill_aux(_ForwardIterator __first,\n-\t\t\t     _ForwardIterator __last,\n-\t\t\t     const _Tp& __x, __true_type)\n-    { std::fill(__first, __last, __x); }\n \n   template<typename _ForwardIterator, typename _Tp>\n     void\n-    __uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last,\n-\t\t\t     const _Tp& __x, __false_type)\n+    __uninitialized_fill_aux(_ForwardIterator __first,\n+\t\t\t     _ForwardIterator __last,\n+\t\t\t     const _Tp& __x)\n     {\n       _ForwardIterator __cur = __first;\n       try\n@@ -153,23 +140,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,\n \t\t       const _Tp& __x)\n     {\n-      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;\n-      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;\n-      std::__uninitialized_fill_aux(__first, __last, __x, _Is_POD());\n+      typedef typename iterator_traits<_ForwardIterator>::value_type\n+\t_ValueType;\n+      if (__is_pod(_ValueType))\n+\tstd::fill(__first, __last, __x);\n+      else\n+\tstd::__uninitialized_fill_aux(__first, __last, __x);\n     }\n \n-  // Valid if copy construction is equivalent to assignment, and if the\n-  //  destructor is trivial.\n-  template<typename _ForwardIterator, typename _Size, typename _Tp>\n-    inline void\n-    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,\n-\t\t\t       const _Tp& __x, __true_type)\n-    { std::fill_n(__first, __n, __x); }\n \n   template<typename _ForwardIterator, typename _Size, typename _Tp>\n     void\n     __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,\n-\t\t\t       const _Tp& __x, __false_type)\n+\t\t\t       const _Tp& __x)\n     {\n       _ForwardIterator __cur = __first;\n       try\n@@ -197,9 +180,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline void\n     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)\n     {\n-      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;\n-      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;\n-      std::__uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());\n+      typedef typename iterator_traits<_ForwardIterator>::value_type\n+\t_ValueType;\n+      if (__is_pod(_ValueType))\n+\tstd::fill_n(__first, __n, __x);\n+      else\n+\tstd::__uninitialized_fill_n_aux(__first, __n, __x);\n     }\n \n   // Extensions: versions of uninitialized_copy, uninitialized_fill,"}]}