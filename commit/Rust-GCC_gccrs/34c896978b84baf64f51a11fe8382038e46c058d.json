{"sha": "34c896978b84baf64f51a11fe8382038e46c058d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRjODk2OTc4Yjg0YmFmNjRmNTFhMTFmZTgzODIwMzhlNDZjMDU4ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-08-13T12:34:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-08-13T12:34:36Z"}, "message": "tree.c (nonnull_arg_p): Move from ...\n\n2015-08-13  Richard Biener  <rguenther@suse.de>\n\n\t* tree.c (nonnull_arg_p): Move from ...\n\t* tree-vrp.c (nonnull_arg_p): ... here.\n\t* tree.h (nonnull_arg_p): Declare.\n\t* tree-ssa-sccvn.c (init_scc_vn): Perform all lattice init\n\there, register ptr != 0 for nonnull_arg_p pointer arguments.\n\tProperly initialize static chain and by-reference result pointer.\n\t(run_scc_vn): Adjust.\n\nFrom-SVN: r226861", "tree": {"sha": "ba2d5537154426960e8f79c36818f51fb759affc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba2d5537154426960e8f79c36818f51fb759affc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34c896978b84baf64f51a11fe8382038e46c058d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34c896978b84baf64f51a11fe8382038e46c058d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34c896978b84baf64f51a11fe8382038e46c058d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34c896978b84baf64f51a11fe8382038e46c058d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ef38880ef5dda74565805fcfce75ed790825f92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef38880ef5dda74565805fcfce75ed790825f92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef38880ef5dda74565805fcfce75ed790825f92"}], "stats": {"total": 224, "additions": 134, "deletions": 90}, "files": [{"sha": "477335dfb600df51f1caf3a2be9ed9dc24e09168", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c896978b84baf64f51a11fe8382038e46c058d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c896978b84baf64f51a11fe8382038e46c058d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34c896978b84baf64f51a11fe8382038e46c058d", "patch": "@@ -1,3 +1,13 @@\n+2015-08-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree.c (nonnull_arg_p): Move from ...\n+\t* tree-vrp.c (nonnull_arg_p): ... here.\n+\t* tree.h (nonnull_arg_p): Declare.\n+\t* tree-ssa-sccvn.c (init_scc_vn): Perform all lattice init\n+\there, register ptr != 0 for nonnull_arg_p pointer arguments.\n+\tProperly initialize static chain and by-reference result pointer.\n+\t(run_scc_vn): Adjust.\n+\n 2015-08-13  Robert Suchanek  <robert.suchanek@imgtec.com>\n \n \t* config/mips/mips.h (ENABLE_LD_ST_PAIRS): Enable load/store pairs for"}, {"sha": "a72a9208f07cc219920d747589034d13d4eafea5", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 59, "deletions": 28, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c896978b84baf64f51a11fe8382038e46c058d/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c896978b84baf64f51a11fe8382038e46c058d/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=34c896978b84baf64f51a11fe8382038e46c058d", "patch": "@@ -4203,26 +4203,72 @@ init_scc_vn (void)\n \n   VN_TOP = create_tmp_var_raw (void_type_node, \"vn_top\");\n \n-  /* Create the VN_INFO structures, and initialize value numbers to\n-     TOP.  */\n-  for (i = 0; i < num_ssa_names; i++)\n-    {\n-      tree name = ssa_name (i);\n-      if (name)\n-\t{\n-\t  VN_INFO_GET (name)->valnum = VN_TOP;\n-\t  VN_INFO (name)->expr = NULL_TREE;\n-\t  VN_INFO (name)->value_id = 0;\n-\t}\n-    }\n-\n   renumber_gimple_stmt_uids ();\n \n   /* Create the valid and optimistic value numbering tables.  */\n   valid_info = XCNEW (struct vn_tables_s);\n   allocate_vn_table (valid_info);\n   optimistic_info = XCNEW (struct vn_tables_s);\n   allocate_vn_table (optimistic_info);\n+  current_info = valid_info;\n+\n+  /* Create the VN_INFO structures, and initialize value numbers to\n+     TOP or VARYING for parameters.  */\n+  for (i = 1; i < num_ssa_names; i++)\n+    {\n+      tree name = ssa_name (i);\n+      if (!name)\n+\tcontinue;\n+\n+      VN_INFO_GET (name)->valnum = VN_TOP;\n+      VN_INFO (name)->expr = NULL_TREE;\n+      VN_INFO (name)->value_id = 0;\n+\n+      if (!SSA_NAME_IS_DEFAULT_DEF (name))\n+\tcontinue;\n+\n+      switch (TREE_CODE (SSA_NAME_VAR (name)))\n+\t{\n+\tcase VAR_DECL:\n+\t  /* Undefined vars keep TOP.  */\n+\t  break;\n+\n+\tcase PARM_DECL:\n+\t  /* Parameters are VARYING but we can record a condition\n+\t     if we know it is a non-NULL pointer.  */\n+\t  VN_INFO (name)->visited = true;\n+\t  VN_INFO (name)->valnum = name; \n+\t  if (POINTER_TYPE_P (TREE_TYPE (name))\n+\t      && nonnull_arg_p (SSA_NAME_VAR (name)))\n+\t    {\n+\t      tree ops[2];\n+\t      ops[0] = name;\n+\t      ops[1] = build_int_cst (TREE_TYPE (name), 0);\n+\t      vn_nary_op_insert_pieces (2, NE_EXPR, boolean_type_node, ops,\n+\t\t\t\t\tboolean_true_node, 0);\n+\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t{\n+\t\t  fprintf (dump_file, \"Recording \");\n+\t\t  print_generic_expr (dump_file, name, TDF_SLIM);\n+\t\t  fprintf (dump_file, \" != 0\\n\");\n+\t\t}\n+\t    }\n+\t  break;\n+\n+\tcase RESULT_DECL:\n+\t  /* If the result is passed by invisible reference the default\n+\t     def is initialized, otherwise it's uninitialized.  */\n+\t  if (DECL_BY_REFERENCE (SSA_NAME_VAR (name)))\n+\t    {\n+\t      VN_INFO (name)->visited = true;\n+\t      VN_INFO (name)->valnum = name; \n+\t    }\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n }\n \n void\n@@ -4447,7 +4493,6 @@ sccvn_dom_walker::before_dom_children (basic_block bb)\n \t  break;\n       if (e2 && (e2->flags & EDGE_EXECUTABLE))\n \t{\n-\n \t  gimple stmt = last_stmt (e->src);\n \t  if (stmt\n \t      && gimple_code (stmt) == GIMPLE_COND)\n@@ -4573,24 +4618,10 @@ run_scc_vn (vn_lookup_kind default_vn_walk_kind_)\n {\n   basic_block bb;\n   size_t i;\n-  tree param;\n \n   default_vn_walk_kind = default_vn_walk_kind_;\n \n   init_scc_vn ();\n-  current_info = valid_info;\n-\n-  for (param = DECL_ARGUMENTS (current_function_decl);\n-       param;\n-       param = DECL_CHAIN (param))\n-    {\n-      tree def = ssa_default_def (cfun, param);\n-      if (def)\n-\t{\n-\t  VN_INFO (def)->visited = true;\n-\t  VN_INFO (def)->valnum = def;\n-\t}\n-    }\n \n   /* Mark all edges as possibly executable.  */\n   FOR_ALL_BB_FN (bb, cfun)"}, {"sha": "685eb726a0dfd700e2e7c161100528462e410e7b", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c896978b84baf64f51a11fe8382038e46c058d/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c896978b84baf64f51a11fe8382038e46c058d/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=34c896978b84baf64f51a11fe8382038e46c058d", "patch": "@@ -355,68 +355,6 @@ avoid_overflow_infinity (tree val)\n }\n \n \n-/* Return true if ARG is marked with the nonnull attribute in the\n-   current function signature.  */\n-\n-static bool\n-nonnull_arg_p (const_tree arg)\n-{\n-  tree t, attrs, fntype;\n-  unsigned HOST_WIDE_INT arg_num;\n-\n-  gcc_assert (TREE_CODE (arg) == PARM_DECL && POINTER_TYPE_P (TREE_TYPE (arg)));\n-\n-  /* The static chain decl is always non null.  */\n-  if (arg == cfun->static_chain_decl)\n-    return true;\n-\n-  /* THIS argument of method is always non-NULL.  */\n-  if (TREE_CODE (TREE_TYPE (current_function_decl)) == METHOD_TYPE\n-      && arg == DECL_ARGUMENTS (current_function_decl)\n-      && flag_delete_null_pointer_checks)\n-    return true;\n-\n-  /* Values passed by reference are always non-NULL.  */\n-  if (TREE_CODE (TREE_TYPE (arg)) == REFERENCE_TYPE\n-      && flag_delete_null_pointer_checks)\n-    return true;\n-\n-  fntype = TREE_TYPE (current_function_decl);\n-  for (attrs = TYPE_ATTRIBUTES (fntype); attrs; attrs = TREE_CHAIN (attrs))\n-    {\n-      attrs = lookup_attribute (\"nonnull\", attrs);\n-\n-      /* If \"nonnull\" wasn't specified, we know nothing about the argument.  */\n-      if (attrs == NULL_TREE)\n-\treturn false;\n-\n-      /* If \"nonnull\" applies to all the arguments, then ARG is non-null.  */\n-      if (TREE_VALUE (attrs) == NULL_TREE)\n-\treturn true;\n-\n-      /* Get the position number for ARG in the function signature.  */\n-      for (arg_num = 1, t = DECL_ARGUMENTS (current_function_decl);\n-\t   t;\n-\t   t = DECL_CHAIN (t), arg_num++)\n-\t{\n-\t  if (t == arg)\n-\t    break;\n-\t}\n-\n-      gcc_assert (t == arg);\n-\n-      /* Now see if ARG_NUM is mentioned in the nonnull list.  */\n-      for (t = TREE_VALUE (attrs); t; t = TREE_CHAIN (t))\n-\t{\n-\t  if (compare_tree_int (TREE_VALUE (t), arg_num) == 0)\n-\t    return true;\n-\t}\n-    }\n-\n-  return false;\n-}\n-\n-\n /* Set value range VR to VR_UNDEFINED.  */\n \n static inline void"}, {"sha": "af3a6a340e4666a20151fc2ebd084dfd8dff7fcc", "filename": "gcc/tree.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c896978b84baf64f51a11fe8382038e46c058d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c896978b84baf64f51a11fe8382038e46c058d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=34c896978b84baf64f51a11fe8382038e46c058d", "patch": "@@ -13571,4 +13571,67 @@ verify_type (const_tree t)\n     }\n }\n \n+\n+/* Return true if ARG is marked with the nonnull attribute in the\n+   current function signature.  */\n+\n+bool\n+nonnull_arg_p (const_tree arg)\n+{\n+  tree t, attrs, fntype;\n+  unsigned HOST_WIDE_INT arg_num;\n+\n+  gcc_assert (TREE_CODE (arg) == PARM_DECL && POINTER_TYPE_P (TREE_TYPE (arg)));\n+\n+  /* The static chain decl is always non null.  */\n+  if (arg == cfun->static_chain_decl)\n+    return true;\n+\n+  /* THIS argument of method is always non-NULL.  */\n+  if (TREE_CODE (TREE_TYPE (cfun->decl)) == METHOD_TYPE\n+      && arg == DECL_ARGUMENTS (cfun->decl)\n+      && flag_delete_null_pointer_checks)\n+    return true;\n+\n+  /* Values passed by reference are always non-NULL.  */\n+  if (TREE_CODE (TREE_TYPE (arg)) == REFERENCE_TYPE\n+      && flag_delete_null_pointer_checks)\n+    return true;\n+\n+  fntype = TREE_TYPE (cfun->decl);\n+  for (attrs = TYPE_ATTRIBUTES (fntype); attrs; attrs = TREE_CHAIN (attrs))\n+    {\n+      attrs = lookup_attribute (\"nonnull\", attrs);\n+\n+      /* If \"nonnull\" wasn't specified, we know nothing about the argument.  */\n+      if (attrs == NULL_TREE)\n+\treturn false;\n+\n+      /* If \"nonnull\" applies to all the arguments, then ARG is non-null.  */\n+      if (TREE_VALUE (attrs) == NULL_TREE)\n+\treturn true;\n+\n+      /* Get the position number for ARG in the function signature.  */\n+      for (arg_num = 1, t = DECL_ARGUMENTS (cfun->decl);\n+\t   t;\n+\t   t = DECL_CHAIN (t), arg_num++)\n+\t{\n+\t  if (t == arg)\n+\t    break;\n+\t}\n+\n+      gcc_assert (t == arg);\n+\n+      /* Now see if ARG_NUM is mentioned in the nonnull list.  */\n+      for (t = TREE_VALUE (attrs); t; t = TREE_CHAIN (t))\n+\t{\n+\t  if (compare_tree_int (TREE_VALUE (t), arg_num) == 0)\n+\t    return true;\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n+\n #include \"gt-tree.h\""}, {"sha": "2cd6ec475a8832fa47e1b7fd5b10e98ee550200a", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c896978b84baf64f51a11fe8382038e46c058d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c896978b84baf64f51a11fe8382038e46c058d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=34c896978b84baf64f51a11fe8382038e46c058d", "patch": "@@ -5133,4 +5133,6 @@ extern void gt_ggc_mx (tree &);\n extern void gt_pch_nx (tree &);\n extern void gt_pch_nx (tree &, gt_pointer_operator, void *);\n \n+extern bool nonnull_arg_p (const_tree);\n+\n #endif  /* GCC_TREE_H  */"}]}