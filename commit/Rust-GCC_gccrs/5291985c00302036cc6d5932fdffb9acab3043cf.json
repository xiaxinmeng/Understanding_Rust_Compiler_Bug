{"sha": "5291985c00302036cc6d5932fdffb9acab3043cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI5MTk4NWMwMDMwMjAzNmNjNmQ1OTMyZmRmZmI5YWNhYjMwNDNjZg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-08T08:13:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-08T08:13:04Z"}, "message": "[Ada] Crash on named actual in postcondition for generic subprogram\n\nThis patch fixes a crash on compiling the postcondtion for a generic\nsubprogram, when the postcondition is a call with both positional and\nnamed parameter associations.\n\n2019-07-08  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): For a\n\tpre/postcondition of a generic subprogram declaration, do not\n\tuse Relocate_Node on the aspect expression to construct the\n\tcorresponding attribute specification, to prevent tree anomalies\n\twhen the expression is a call with named actual parameters.\n\ngcc/testsuite/\n\n\t* gnat.dg/predicate9.adb: New testcase.\n\nFrom-SVN: r273201", "tree": {"sha": "5a8235daf9a8a352f258c29c49aa04a99448cb63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a8235daf9a8a352f258c29c49aa04a99448cb63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5291985c00302036cc6d5932fdffb9acab3043cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5291985c00302036cc6d5932fdffb9acab3043cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5291985c00302036cc6d5932fdffb9acab3043cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5291985c00302036cc6d5932fdffb9acab3043cf/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b91cdf756caafddf48433e6f93c4cc0049d292f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b91cdf756caafddf48433e6f93c4cc0049d292f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b91cdf756caafddf48433e6f93c4cc0049d292f8"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "d651ff09eafd1b8d2513f5af69f0248a150cdb0d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5291985c00302036cc6d5932fdffb9acab3043cf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5291985c00302036cc6d5932fdffb9acab3043cf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5291985c00302036cc6d5932fdffb9acab3043cf", "patch": "@@ -1,3 +1,11 @@\n+2019-07-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): For a\n+\tpre/postcondition of a generic subprogram declaration, do not\n+\tuse Relocate_Node on the aspect expression to construct the\n+\tcorresponding attribute specification, to prevent tree anomalies\n+\twhen the expression is a call with named actual parameters.\n+\n 2019-07-08  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_attr.adb (Analyze_Attribute [Attribute_Size]): For pragmas"}, {"sha": "8467f75357646aa99e6e25bd19c1e454551131f7", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5291985c00302036cc6d5932fdffb9acab3043cf/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5291985c00302036cc6d5932fdffb9acab3043cf/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=5291985c00302036cc6d5932fdffb9acab3043cf", "patch": "@@ -3495,12 +3495,28 @@ package body Sem_Ch13 is\n                   --  because subsequent visibility analysis of the aspect\n                   --  depends on this sharing. This should be cleaned up???\n \n-                  Make_Aitem_Pragma\n-                    (Pragma_Argument_Associations => New_List (\n-                       Make_Pragma_Argument_Association (Eloc,\n-                         Chars      => Name_Check,\n-                         Expression => Relocate_Node (Expr))),\n-                       Pragma_Name                => Pname);\n+                  --  If the context is generic or involves ASIS, we want\n+                  --  to preserve the original tree, and simply share it\n+                  --  between aspect and generated attribute. This parallels\n+                  --  what is done in sem_prag.adb (see Get_Argument).\n+\n+                  declare\n+                     New_Expr : Node_Id;\n+\n+                  begin\n+                     if ASIS_Mode or else Inside_A_Generic then\n+                        New_Expr := Expr;\n+                     else\n+                        New_Expr := Relocate_Node (Expr);\n+                     end if;\n+\n+                     Make_Aitem_Pragma\n+                       (Pragma_Argument_Associations => New_List (\n+                          Make_Pragma_Argument_Association (Eloc,\n+                            Chars      => Name_Check,\n+                            Expression => New_Expr)),\n+                          Pragma_Name                => Pname);\n+                  end;\n \n                   --  Add message unless exception messages are suppressed\n "}, {"sha": "94ad86f98957521b546b0f078cf96d6230c499fa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5291985c00302036cc6d5932fdffb9acab3043cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5291985c00302036cc6d5932fdffb9acab3043cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5291985c00302036cc6d5932fdffb9acab3043cf", "patch": "@@ -1,3 +1,7 @@\n+2019-07-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/predicate9.adb: New testcase.\n+\n 2019-07-08  Justin Squirek  <squirek@adacore.com>\n \n \t* gnat.dg/sso16.adb: New testcase."}, {"sha": "ebcfca7f8389502c9ce39ac7e6bd80ac1d9ed971", "filename": "gcc/testsuite/gnat.dg/predicate9.adb", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5291985c00302036cc6d5932fdffb9acab3043cf/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5291985c00302036cc6d5932fdffb9acab3043cf/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate9.adb?ref=5291985c00302036cc6d5932fdffb9acab3043cf", "patch": "@@ -0,0 +1,21 @@\n+--  { dg-do compile }\n+procedure Predicate9 is\n+  function Num (x : Integer) return Integer is (X + 1);\n+  function name (X : String) return Integer is (X'Size);\n+  function Post (One : Integer; Two : Integer) return Boolean;\n+\n+  generic\n+     type T is private;\n+  procedure Pro (Z : Integer) with Post =>\n+    Post (Num (5), Two => Name (\"yeah\"));\n+\n+  function Post (One : Integer; Two : Integer) return Boolean\n+  is (True);\n+\n+  procedure Pro (Z : Integer) is\n+  begin\n+     null;\n+  end Pro;\n+begin\n+   null;\n+end Predicate9;"}]}