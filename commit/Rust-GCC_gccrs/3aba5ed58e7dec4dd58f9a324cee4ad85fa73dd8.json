{"sha": "3aba5ed58e7dec4dd58f9a324cee4ad85fa73dd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FiYTVlZDU4ZTdkZWM0ZGQ1OGY5YTMyNGNlZTRhZDg1ZmE3M2RkOA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-04-06T09:27:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-04-06T09:27:13Z"}, "message": "sem_type.ads, [...] (Has_Abstract_Interpretation): Make predicate recursive...\n\n2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n\t    Javier Miranda  <miranda@adacore.com>\n\n\t* sem_type.ads, sem_type.adb (Has_Abstract_Interpretation): Make\n\tpredicate recursive, to handle complex expressions on literals whose\n\tspurious ambiguity comes from the abstract interpretation of some\n\tsubexpression.\n\t(Interface_Present_In_Ancestor): Add support to concurrent record\n\ttypes.\n\t(Add_One_Interp,Disambiguate): Split Is_Abstract flag into\n\tIs_Abstract_Subprogram and Is_Abstract_Type.\n\nFrom-SVN: r123598", "tree": {"sha": "7953ad8e87c32b62015d6116624112100be08285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7953ad8e87c32b62015d6116624112100be08285"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aba5ed58e7dec4dd58f9a324cee4ad85fa73dd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aba5ed58e7dec4dd58f9a324cee4ad85fa73dd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aba5ed58e7dec4dd58f9a324cee4ad85fa73dd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aba5ed58e7dec4dd58f9a324cee4ad85fa73dd8/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16ca248a5802174b18676496a57c9b85cf130639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16ca248a5802174b18676496a57c9b85cf130639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16ca248a5802174b18676496a57c9b85cf130639"}], "stats": {"total": 82, "additions": 57, "deletions": 25}, "files": [{"sha": "4b5653a017df4c48d866b41ce8a988e05327dfd9", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 55, "deletions": 23, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aba5ed58e7dec4dd58f9a324cee4ad85fa73dd8/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aba5ed58e7dec4dd58f9a324cee4ad85fa73dd8/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=3aba5ed58e7dec4dd58f9a324cee4ad85fa73dd8", "patch": "@@ -375,7 +375,8 @@ package body Sem_Type is\n       --  instance).\n \n       elsif In_Instance\n-        and then Is_Abstract (E)\n+        and then Is_Overloadable (E)\n+        and then Is_Abstract_Subprogram (E)\n         and then not Is_Dispatching_Operation (E)\n       then\n          return;\n@@ -1008,7 +1009,9 @@ package body Sem_Type is\n \n          elsif Ekind (T2) = E_Class_Wide_Type then\n             return\n-              Covers (T1, Class_Wide_Type (Non_Limited_View (Etype (T2))));\n+              Present (Non_Limited_View (Etype (T2)))\n+                and then\n+                  Covers (T1, Class_Wide_Type (Non_Limited_View (Etype (T2))));\n          else\n             return False;\n          end if;\n@@ -1218,18 +1221,41 @@ package body Sem_Type is\n             E : Entity_Id;\n \n          begin\n-            E := Current_Entity (N);\n-            while Present (E) loop\n-               if Is_Abstract (E)\n-                 and then Is_Numeric_Type (Etype (E))\n-               then\n-                  return True;\n+            if Nkind (N) not in N_Op\n+              or else Ada_Version < Ada_05\n+              or else not Is_Overloaded (N)\n+              or else No (Universal_Interpretation (N))\n+            then\n+               return False;\n+\n+            else\n+               E := Get_Name_Entity_Id (Chars (N));\n+               while Present (E) loop\n+                  if Is_Overloadable (E)\n+                    and then Is_Abstract_Subprogram (E)\n+                    and then Is_Numeric_Type (Etype (E))\n+                  then\n+                     return True;\n+                  else\n+                     E := Homonym (E);\n+                  end if;\n+               end loop;\n+\n+               --  Finally, if an operand of the binary operator is itself\n+               --  an operator, recurse to see whether its own abstract\n+               --  interpretation is responsible for the spurious ambiguity.\n+\n+               if Nkind (N) in N_Binary_Op then\n+                  return Has_Abstract_Interpretation (Left_Opnd (N))\n+                    or else Has_Abstract_Interpretation (Right_Opnd (N));\n+\n+               elsif Nkind (N) in N_Unary_Op then\n+                  return Has_Abstract_Interpretation (Right_Opnd (N));\n+\n                else\n-                  E := Homonym (E);\n+                  return False;\n                end if;\n-            end loop;\n-\n-            return False;\n+            end if;\n          end Has_Abstract_Interpretation;\n \n       --  Start of processing for Remove_Conversions\n@@ -1268,6 +1294,12 @@ package body Sem_Type is\n                   Act1 := Left_Opnd (N);\n                   Act2 := Right_Opnd (N);\n \n+                  --  Use type of second formal, so as to include\n+                  --  exponentiation, where the exponent may be\n+                  --  ambiguous and the result non-universal.\n+\n+                  Next_Formal (F1);\n+\n                else\n                   return It1;\n                end if;\n@@ -1314,12 +1346,10 @@ package body Sem_Type is\n                      It1 := It;\n                   end if;\n \n-               elsif Nkind (Act1) in N_Op\n-                 and then Is_Overloaded (Act1)\n-                 and then Present (Universal_Interpretation (Act1))\n-                 and then Is_Numeric_Type (Etype (F1))\n-                 and then Ada_Version >= Ada_05\n-                 and then Has_Abstract_Interpretation (Act1)\n+               elsif Is_Numeric_Type (Etype (F1))\n+                 and then\n+                   (Has_Abstract_Interpretation (Act1)\n+                     or else Has_Abstract_Interpretation (Act2))\n                then\n                   if It = Disambiguate.It1 then\n                      return Disambiguate.It2;\n@@ -1716,7 +1746,7 @@ package body Sem_Type is\n                         return It2;\n                      end if;\n                   else\n-                     return No_Interp;\n+                     return Remove_Conversions;\n                   end if;\n                end;\n \n@@ -2104,6 +2134,10 @@ package body Sem_Type is\n          Target_Typ := Typ;\n       end if;\n \n+      if Is_Concurrent_Record_Type (Target_Typ) then\n+         Target_Typ := Corresponding_Concurrent_Type (Target_Typ);\n+      end if;\n+\n       --  In case of concurrent types we can't use the Corresponding Record_Typ\n       --  to look for the interface because it is built by the expander (and\n       --  hence it is not always available). For this reason we traverse the\n@@ -2671,16 +2705,14 @@ package body Sem_Type is\n       if B1 = B2 then\n          return B1;\n \n-      elsif False\n-        or else (T1 = Universal_Integer and then Is_Integer_Type (T2))\n+      elsif     (T1 = Universal_Integer and then Is_Integer_Type (T2))\n         or else (T1 = Universal_Real    and then Is_Real_Type (T2))\n         or else (T1 = Universal_Fixed   and then Is_Fixed_Point_Type (T2))\n         or else (T1 = Any_Fixed         and then Is_Fixed_Point_Type (T2))\n       then\n          return B2;\n \n-      elsif False\n-        or else (T2 = Universal_Integer and then Is_Integer_Type (T1))\n+      elsif     (T2 = Universal_Integer and then Is_Integer_Type (T1))\n         or else (T2 = Universal_Real    and then Is_Real_Type (T1))\n         or else (T2 = Universal_Fixed   and then Is_Fixed_Point_Type (T1))\n         or else (T2 = Any_Fixed         and then Is_Fixed_Point_Type (T1))"}, {"sha": "6932c9d9240443e0a0bc7e0defd2b0822c9142bc", "filename": "gcc/ada/sem_type.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aba5ed58e7dec4dd58f9a324cee4ad85fa73dd8/gcc%2Fada%2Fsem_type.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aba5ed58e7dec4dd58f9a324cee4ad85fa73dd8/gcc%2Fada%2Fsem_type.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.ads?ref=3aba5ed58e7dec4dd58f9a324cee4ad85fa73dd8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -208,7 +208,7 @@ package Sem_Type is\n       Iface : Entity_Id) return Boolean;\n    --  Ada 2005 (AI-251): Typ must be a tagged record type/subtype and Iface\n    --  must be an abstract interface type. This function is used to check if\n-   --  some ancestor of Typ implements Iface.\n+   --  Typ or some ancestor of Typ implements Iface.\n \n    function Intersect_Types (L, R : Node_Id) return Entity_Id;\n    --  Find the common interpretation to two analyzed nodes. If one of the"}]}