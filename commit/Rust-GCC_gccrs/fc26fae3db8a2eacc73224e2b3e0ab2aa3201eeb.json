{"sha": "fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMyNmZhZTNkYjhhMmVhY2M3MzIyNGUyYjNlMGFiMmFhMzIwMWVlYg==", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@google.com", "date": "2009-06-15T14:25:50Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2009-06-15T14:25:50Z"}, "message": "cgraphunit.c (cgraph_function_versioning,save_inline_function_body): Use DECL_COMDAT_GROUP instead of DECL_ONE_ONLY.\n\n2009-06-15  Rafael Avila de Espindola  <espindola@google.com>\n\n\t* cgraphunit.c (cgraph_function_versioning,save_inline_function_body):\n\tUse DECL_COMDAT_GROUP instead of DECL_ONE_ONLY.\n\t* cgraph.c (cgraph_create_virtual_clone): Use DECL_COMDAT_GROUP.\n\t* config/i386/i386.c (ix86_file_end): Compute DECL_COMDAT_GROUP.\n\t* dwarf2asm.c(dw2_force_const_mem): Update call to make_decl_one_only.\n\t* langhooks-def.h (lhd_comdat_group, LANG_HOOKS_COMDAT_GROUP): Remove.\n\t(LANG_HOOKS_DECLS): Remove LANG_HOOKS_COMDAT_GROUP.\n\t* langhooks.c (lhd_comdat_group): Remove.\n\t* langhooks.h (lang_hooks_for_decls): Remove comdat_group.\n\t* tree.h (DECL_COMDAT_GROUP): New.\n\t(DECL_ONE_ONLY): Use DECL_COMDAT_GROUP.\n\t(tree_decl_with_vis): Add comdat_group. Remove one_only.\n\t(make_decl_one_only): Change signature.\n\t* varasm.c (get_emutls_init_templ_addr, emutls_decl): Update call to\n\tmake_decl_one_only.\n\t(make_decl_one_only): Change signature.\n\t(default_elf_asm_named_section): Use DECL_COMDAT_GROUP.\n\n2009-06-15  Rafael Avila de Espindola  <espindola@google.com>\n\n\t* cp-objcp-common.h (LANG_HOOKS_COMDAT_GROUP): Remove.\n\t* cp-tree.h (cxx_comdat_group): Change signature.\n\t* decl.c (duplicate_decls): Use DECL_COMDAT_GROUP.\n\t(cxx_comdat_group): Change signature.\n\t* decl2.c (comdat_linkage, maybe_make_one_only): Update call to\n\tmake_decl_one_only.\n\t(constrain_visibility, get_guard): Use DECL_COMDAT_GROUP.\n\t* method.c (use_thunk): Update call to make_decl_one_only.\n\t* optimize.c (maybe_clone_body): Use DECL_COMDAT_GROUP\n\n2009-06-15  Rafael Avila de Espindola  <espindola@google.com>\n\n\t* g++.dg/abi/mangle11.C: Update warning line.\n\t* g++.dg/abi/mangle12.C: Update warning line.\n\t* g++.dg/abi/mangle17.C: Update warning line.\n\t* g++.dg/abi/mangle20-2.C: Update warning line.\n\nFrom-SVN: r148492", "tree": {"sha": "8a727e22a197bff442c7fa013b41c3b723b12ef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a727e22a197bff442c7fa013b41c3b723b12ef4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/comments", "author": null, "committer": null, "parents": [{"sha": "144c91756250b14fb70ed94e72952868d2d6e84e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144c91756250b14fb70ed94e72952868d2d6e84e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/144c91756250b14fb70ed94e72952868d2d6e84e"}], "stats": {"total": 138, "additions": 82, "deletions": 56}, "files": [{"sha": "bc1fba791875fee6c22db8e80ae45dfe2cfc150d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -1,3 +1,23 @@\n+2009-06-15  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* cgraphunit.c (cgraph_function_versioning,save_inline_function_body):\n+\tUse DECL_COMDAT_GROUP instead of DECL_ONE_ONLY.\n+\t* cgraph.c (cgraph_create_virtual_clone): Use DECL_COMDAT_GROUP.\n+\t* config/i386/i386.c (ix86_file_end): Compute DECL_COMDAT_GROUP.\n+\t* dwarf2asm.c(dw2_force_const_mem): Update call to make_decl_one_only.\n+\t* langhooks-def.h (lhd_comdat_group, LANG_HOOKS_COMDAT_GROUP): Remove.\n+\t(LANG_HOOKS_DECLS): Remove LANG_HOOKS_COMDAT_GROUP.\n+\t* langhooks.c (lhd_comdat_group): Remove.\n+\t* langhooks.h (lang_hooks_for_decls): Remove comdat_group.\n+\t* tree.h (DECL_COMDAT_GROUP): New.\n+\t(DECL_ONE_ONLY): Use DECL_COMDAT_GROUP.\n+\t(tree_decl_with_vis): Add comdat_group. Remove one_only.\n+\t(make_decl_one_only): Change signature.\n+\t* varasm.c (get_emutls_init_templ_addr, emutls_decl): Update call to\n+\tmake_decl_one_only.\n+\t(make_decl_one_only): Change signature.\n+\t(default_elf_asm_named_section): Use DECL_COMDAT_GROUP.\n+\n 2009-06-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/40439"}, {"sha": "5eb0f1812b18f65bcc6fe96a28a5ad91cc86156f", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -1710,7 +1710,7 @@ cgraph_create_virtual_clone (struct cgraph_node *old_node,\n      ??? We cannot use COMDAT linkage because there is no\n      ABI support for this.  */\n   DECL_EXTERNAL (new_node->decl) = 0;\n-  DECL_ONE_ONLY (new_node->decl) = 0;\n+  DECL_COMDAT_GROUP (new_node->decl) = 0;\n   TREE_PUBLIC (new_node->decl) = 0;\n   DECL_COMDAT (new_node->decl) = 0;\n   DECL_WEAK (new_node->decl) = 0;"}, {"sha": "53d99bf9cc3cf6cf308c98a7bbd40d5569d342d1", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -1616,7 +1616,7 @@ cgraph_function_versioning (struct cgraph_node *old_version_node,\n      ??? We cannot use COMDAT linkage because there is no\n      ABI support for this.  */\n   DECL_EXTERNAL (new_version_node->decl) = 0;\n-  DECL_ONE_ONLY (new_version_node->decl) = 0;\n+  DECL_COMDAT_GROUP (new_version_node->decl) = NULL_TREE;\n   TREE_PUBLIC (new_version_node->decl) = 0;\n   DECL_COMDAT (new_version_node->decl) = 0;\n   DECL_WEAK (new_version_node->decl) = 0;\n@@ -1686,7 +1686,7 @@ save_inline_function_body (struct cgraph_node *node)\n   tree_function_versioning (node->decl, first_clone->decl, NULL, true, NULL);\n \n   DECL_EXTERNAL (first_clone->decl) = 0;\n-  DECL_ONE_ONLY (first_clone->decl) = 0;\n+  DECL_COMDAT_GROUP (first_clone->decl) = NULL_TREE;\n   TREE_PUBLIC (first_clone->decl) = 0;\n   DECL_COMDAT (first_clone->decl) = 0;\n   VEC_free (ipa_opt_pass, heap,"}, {"sha": "2c637631cae89830fdcbbd3d64b54543377bc1f6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -7522,7 +7522,7 @@ ix86_file_end (void)\n \t\t\t     error_mark_node);\n \t  TREE_PUBLIC (decl) = 1;\n \t  TREE_STATIC (decl) = 1;\n-\t  DECL_ONE_ONLY (decl) = 1;\n+\t  DECL_COMDAT_GROUP (decl) = DECL_ASSEMBLER_NAME (decl);\n \n \t  (*targetm.asm_out.unique_section) (decl, 0);\n \t  switch_to_section (get_named_section (decl, NULL, 0));"}, {"sha": "1a0e93519f1b138c06069ce701d7fd42d16b1988", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -1,3 +1,15 @@\n+2009-06-15  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* cp-objcp-common.h (LANG_HOOKS_COMDAT_GROUP): Remove.\n+\t* cp-tree.h (cxx_comdat_group): Change signature.\n+\t* decl.c (duplicate_decls): Use DECL_COMDAT_GROUP.\n+\t(cxx_comdat_group): Change signature.\n+\t* decl2.c (comdat_linkage, maybe_make_one_only): Update call to\n+\tmake_decl_one_only.\n+\t(constrain_visibility, get_guard): Use DECL_COMDAT_GROUP.\n+\t* method.c (use_thunk): Update call to make_decl_one_only.\n+\t* optimize.c (maybe_clone_body): Use DECL_COMDAT_GROUP\n+\n 2009-06-12  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* typeck.c (cp_build_binary_op): Pass location to overflow_warning."}, {"sha": "6723a853ced69efc983aeeb6578769d6467075f1", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -78,8 +78,6 @@ extern bool cp_function_decl_explicit_p (tree decl);\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL cxx_warn_unused_global_decl\n #undef LANG_HOOKS_WRITE_GLOBALS\n #define LANG_HOOKS_WRITE_GLOBALS cp_write_global_declarations\n-#undef LANG_HOOKS_COMDAT_GROUP\n-#define LANG_HOOKS_COMDAT_GROUP cxx_comdat_group\n #undef  LANG_HOOKS_BUILTIN_FUNCTION\n #define LANG_HOOKS_BUILTIN_FUNCTION cxx_builtin_function\n #undef  LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE"}, {"sha": "4cb34f53700cdea9f90fcaeb29a216258b0252f4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -4372,7 +4372,7 @@ extern tree cxx_builtin_function\t\t(tree decl);\n extern tree cxx_builtin_function_ext_scope\t(tree decl);\n extern tree check_elaborated_type_specifier\t(enum tag_types, tree, bool);\n extern void warn_extern_redeclared_static\t(tree, tree);\n-extern const char *cxx_comdat_group\t\t(tree);\n+extern tree cxx_comdat_group\t\t\t(tree);\n extern bool cp_missing_noreturn_ok_p\t\t(tree);\n extern void initialize_artificial_var\t\t(tree, tree);\n extern tree check_var_type\t\t\t(tree, tree);"}, {"sha": "296d1438515d1a1e3ac5e9f522fa054130e00b3e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -1835,7 +1835,9 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n   /* Merge the storage class information.  */\n   merge_weak (newdecl, olddecl);\n \n-  DECL_ONE_ONLY (newdecl) |= DECL_ONE_ONLY (olddecl);\n+  if (DECL_ONE_ONLY (olddecl))\n+    DECL_COMDAT_GROUP (newdecl) = DECL_COMDAT_GROUP (olddecl);\n+\n   DECL_DEFER_OUTPUT (newdecl) |= DECL_DEFER_OUTPUT (olddecl);\n   TREE_PUBLIC (newdecl) = TREE_PUBLIC (olddecl);\n   TREE_STATIC (olddecl) = TREE_STATIC (newdecl) |= TREE_STATIC (olddecl);\n@@ -12792,7 +12794,7 @@ cp_missing_noreturn_ok_p (tree decl)\n \n /* Return the COMDAT group into which DECL should be placed.  */\n \n-const char *\n+tree\n cxx_comdat_group (tree decl)\n {\n   tree name;\n@@ -12822,7 +12824,7 @@ cxx_comdat_group (tree decl)\n       name = DECL_ASSEMBLER_NAME (decl);\n     }\n \n-  return IDENTIFIER_POINTER (name);\n+  return name;\n }\n \n #include \"gt-cp-decl.h\""}, {"sha": "495c8e7a089cfdc4a6a06a0b32d12d027917325c", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -1510,7 +1510,7 @@ void\n comdat_linkage (tree decl)\n {\n   if (flag_weak)\n-    make_decl_one_only (decl);\n+    make_decl_one_only (decl, cxx_comdat_group (decl));\n   else if (TREE_CODE (decl) == FUNCTION_DECL\n \t   || (TREE_CODE (decl) == VAR_DECL && DECL_ARTIFICIAL (decl)))\n     /* We can just emit function and compiler-generated variables\n@@ -1582,7 +1582,7 @@ maybe_make_one_only (tree decl)\n       || (! DECL_EXPLICIT_INSTANTIATION (decl)\n \t  && ! DECL_TEMPLATE_SPECIALIZATION (decl)))\n     {\n-      make_decl_one_only (decl);\n+      make_decl_one_only (decl, cxx_comdat_group (decl));\n \n       if (TREE_CODE (decl) == VAR_DECL)\n \t{\n@@ -1845,7 +1845,7 @@ constrain_visibility (tree decl, int visibility)\n       if (!DECL_EXTERN_C_P (decl))\n \t{\n \t  TREE_PUBLIC (decl) = 0;\n-\t  DECL_ONE_ONLY (decl) = 0;\n+\t  DECL_COMDAT_GROUP (decl) = NULL_TREE;\n \t  DECL_INTERFACE_KNOWN (decl) = 1;\n \t  if (DECL_LANG_SPECIFIC (decl))\n \t    DECL_NOT_REALLY_EXTERN (decl) = 1;\n@@ -2504,7 +2504,7 @@ get_guard (tree decl)\n       TREE_PUBLIC (guard) = TREE_PUBLIC (decl);\n       TREE_STATIC (guard) = TREE_STATIC (decl);\n       DECL_COMMON (guard) = DECL_COMMON (decl);\n-      DECL_ONE_ONLY (guard) = DECL_ONE_ONLY (decl);\n+      DECL_COMDAT_GROUP (guard) = DECL_COMDAT_GROUP (decl);\n       if (TREE_PUBLIC (decl))\n \tDECL_WEAK (guard) = DECL_WEAK (decl);\n       DECL_VISIBILITY (guard) = DECL_VISIBILITY (decl);"}, {"sha": "af58afe135e3f21db45cabf09fbf16883695bec7", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -383,7 +383,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n   DECL_VISIBILITY_SPECIFIED (thunk_fndecl)\n     = DECL_VISIBILITY_SPECIFIED (function);\n   if (DECL_ONE_ONLY (function))\n-    make_decl_one_only (thunk_fndecl);\n+    make_decl_one_only (thunk_fndecl, cxx_comdat_group (thunk_fndecl));\n \n   if (flag_syntax_only)\n     {"}, {"sha": "9d4a8c5f8e4ffe0e652f8570478abed3efc7a6dc", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -141,7 +141,12 @@ maybe_clone_body (tree fn)\n       DECL_DECLARED_INLINE_P (clone) = DECL_DECLARED_INLINE_P (fn);\n       DECL_COMDAT (clone) = DECL_COMDAT (fn);\n       DECL_WEAK (clone) = DECL_WEAK (fn);\n-      DECL_ONE_ONLY (clone) = DECL_ONE_ONLY (fn);\n+\n+      /* We don't copy the comdat group from fn to clone because the assembler\n+\t name of fn was corrupted by write_mangled_name by adding *INTERNAL*\n+\t to it. By doing so, it also corrupted the comdat group. */\n+      if (DECL_ONE_ONLY (fn))\n+\tDECL_COMDAT_GROUP (clone) = cxx_comdat_group (clone);\n       DECL_SECTION_NAME (clone) = DECL_SECTION_NAME (fn);\n       DECL_USE_TEMPLATE (clone) = DECL_USE_TEMPLATE (fn);\n       DECL_EXTERNAL (clone) = DECL_EXTERNAL (fn);"}, {"sha": "7b0fa7b6262f71bea412bf2bffbd3346bff8c0bd", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -879,7 +879,7 @@ dw2_output_indirect_constant_1 (splay_tree_node node,\n   if (TREE_PUBLIC (id))\n     {\n       TREE_PUBLIC (decl) = 1;\n-      make_decl_one_only (decl);\n+      make_decl_one_only (decl, DECL_ASSEMBLER_NAME (decl));\n     }\n   else\n     TREE_STATIC (decl) = 1;"}, {"sha": "2631ff8db7fd5feb5d9fb6af086bb936f12c65f6", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -58,7 +58,6 @@ extern void lhd_incomplete_type_error (const_tree, const_tree);\n extern tree lhd_type_promotes_to (tree);\n extern void lhd_register_builtin_type (tree, const char *);\n extern bool lhd_decl_ok_for_sibcall (const_tree);\n-extern const char *lhd_comdat_group (tree);\n extern tree lhd_expr_size (const_tree);\n extern size_t lhd_tree_size (enum tree_code);\n extern HOST_WIDE_INT lhd_to_target_charset (HOST_WIDE_INT);\n@@ -191,7 +190,6 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL lhd_warn_unused_global_decl\n #define LANG_HOOKS_WRITE_GLOBALS write_global_declarations\n #define LANG_HOOKS_DECL_OK_FOR_SIBCALL\tlhd_decl_ok_for_sibcall\n-#define LANG_HOOKS_COMDAT_GROUP lhd_comdat_group\n #define LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE hook_bool_const_tree_false\n #define LANG_HOOKS_OMP_PREDETERMINED_SHARING lhd_omp_predetermined_sharing\n #define LANG_HOOKS_OMP_DISREGARD_VALUE_EXPR hook_bool_tree_bool_false\n@@ -211,7 +209,6 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL, \\\n   LANG_HOOKS_WRITE_GLOBALS, \\\n   LANG_HOOKS_DECL_OK_FOR_SIBCALL, \\\n-  LANG_HOOKS_COMDAT_GROUP, \\\n   LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE, \\\n   LANG_HOOKS_OMP_PREDETERMINED_SHARING, \\\n   LANG_HOOKS_OMP_DISREGARD_VALUE_EXPR, \\"}, {"sha": "ff20dd166006b2d7d0e2b7c0fae6d468d76e6ec2", "filename": "gcc/langhooks.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -300,14 +300,6 @@ lhd_decl_ok_for_sibcall (const_tree decl ATTRIBUTE_UNUSED)\n   return true;\n }\n \n-/* Return the COMDAT group into which DECL should be placed.  */\n-\n-const char *\n-lhd_comdat_group (tree decl)\n-{\n-  return IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-}\n-\n /* lang_hooks.decls.final_write_globals: perform final processing on\n    global variables.  */\n void"}, {"sha": "ed3e7e72919ef20a7c17b95aefe463f453b2ec81", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -176,15 +176,6 @@ struct lang_hooks_for_decls\n   /* True if this decl may be called via a sibcall.  */\n   bool (*ok_for_sibcall) (const_tree);\n \n-  /* Return the COMDAT group into which this DECL should be placed.\n-     It is known that the DECL belongs in *some* COMDAT group when\n-     this hook is called.  The return value will be used immediately,\n-     but not explicitly deallocated, so implementations should not use\n-     xmalloc to allocate the string returned.  (Typically, the return\n-     value will be the string already stored in an\n-     IDENTIFIER_NODE.)  */\n-  const char * (*comdat_group) (tree);\n-\n   /* True if OpenMP should privatize what this DECL points to rather\n      than the DECL itself.  */\n   bool (*omp_privatize_by_reference) (const_tree);"}, {"sha": "0fcde100f82c91ad8ba8f33c11a860cde7f5292f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -1,3 +1,10 @@\n+2009-06-15  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* g++.dg/abi/mangle11.C: Update warning line.\n+\t* g++.dg/abi/mangle12.C: Update warning line.\n+\t* g++.dg/abi/mangle17.C: Update warning line.\n+\t* g++.dg/abi/mangle20-2.C: Update warning line.\n+\n 2009-06-14  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* gcc.dg/optimize-bswap-1.c: Split into these two:"}, {"sha": "a049a9566713e25a1b67bd422b431c9fa0a988bd", "filename": "gcc/testsuite/g++.dg/abi/mangle11.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle11.C?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -1,10 +1,10 @@\n // { dg-options \"-Wabi -fabi-version=1\" }\n \n template <typename Q>\n-void f (typename Q::X) {} // { dg-warning \"mangle\" }\n+void f (typename Q::X) {}\n \n struct S {\n   typedef int X;\n };\n \n-template void f<S> (int);\n+template void f<S> (int); // { dg-warning \"mangle\" }"}, {"sha": "7176fcd28dcc2c9345df26984eb33cd15051c05f", "filename": "gcc/testsuite/g++.dg/abi/mangle12.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle12.C?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -1,11 +1,11 @@\n // { dg-options \"-Wabi -fabi-version=1\" }\n \n template <template <typename> class Q>\n-void f (typename Q<int>::X) {} // { dg-warning \"mangle\" }\n+void f (typename Q<int>::X) {}\n \n template <typename Q>\n struct S {\n   typedef int X;\n };\n \n-template void f<S> (int); \n+template void f<S> (int);  // { dg-warning \"mangle\" }"}, {"sha": "0a5fe9a60e880cdce248551ac8b05c1f94fc9d0d", "filename": "gcc/testsuite/g++.dg/abi/mangle17.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle17.C?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -4,8 +4,8 @@ enum E { e = 3 };\n \n template <int I> struct S {};\n \n-template <int I> void f (S<I + e + int (3.7)>) {} // { dg-warning \"mangle\" }\n-template void f<7>(S<7 + e + int (3.7)>);  \n+template <int I> void f (S<I + e + int (3.7)>) {}\n+template void f<7>(S<7 + e + int (3.7)>); // { dg-warning \"mangle\" }\n \n-template <int I> void g (S<I + e + int (3.7)>) {} // { dg-warning \"mangle\" }\n-template void g<7>(S<7 + e + int (3.7)>); \n+template <int I> void g (S<I + e + int (3.7)>) {}\n+template void g<7>(S<7 + e + int (3.7)>); // { dg-warning \"mangle\" }"}, {"sha": "bf3d189bf0cf9c744e8376f134f5e2310599400f", "filename": "gcc/testsuite/g++.dg/abi/mangle20-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle20-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle20-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle20-2.C?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -7,10 +7,10 @@\n // PR 9043\n // mangled array types in templates\n \n-template <int I> void f(int (*)[2]) {} // { dg-warning \"mangled name\" }\n+template <int I> void f(int (*)[2]) {}\n template <int I> void g(int (*)[I+2]) {}\n \n-template void f<1>(int (*)[2]);  \n+template void f<1>(int (*)[2]);  // { dg-warning \"mangled name\" }\n //  { dg-final { scan-assembler \"\\n_?_Z1fILi1EEvPALi2E_i\\[: \\t\\n\\]\" } }\n template void g<1>(int (*)[3]);\n //  { dg-final { scan-assembler \"\\n_?_Z1gILi1EEvPAplT_Li2E_i\\[: \\t\\n\\]\" } }"}, {"sha": "41b5001834d34ae43189203bdb2cf8be230c1aa6", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -2868,6 +2868,8 @@ extern void decl_restrict_base_insert (tree, tree);\n    something which is DECL_COMDAT.  */\n #define DECL_COMDAT(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.comdat_flag)\n \n+#define DECL_COMDAT_GROUP(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.comdat_group)\n+\n /* A replaceable function is one which may be replaced at link-time\n    with an entirely different definition, provided that the\n    replacement has the same type.  For example, functions declared\n@@ -2936,12 +2938,13 @@ extern void decl_restrict_base_insert (tree, tree);\n \n /* Used in TREE_PUBLIC decls to indicate that copies of this DECL in\n    multiple translation units should be merged.  */\n-#define DECL_ONE_ONLY(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.one_only)\n+#define DECL_ONE_ONLY(NODE) (DECL_COMDAT_GROUP (NODE) != NULL_TREE)\n \n struct GTY(()) tree_decl_with_vis {\n  struct tree_decl_with_rtl common;\n  tree assembler_name;\n  tree section_name;\n+ tree comdat_group;\n \n  /* Belong to VAR_DECL exclusively.  */\n  unsigned defer_output:1;\n@@ -2961,12 +2964,11 @@ struct GTY(()) tree_decl_with_vis {\n  ENUM_BITFIELD(symbol_visibility) visibility : 2;\n  unsigned visibility_specified : 1;\n  /* Belong to FUNCTION_DECL exclusively.  */\n- unsigned one_only : 1;\n  unsigned init_priority_p:1;\n \n  /* Belongs to VAR_DECL exclusively.  */\n  ENUM_BITFIELD(tls_model) tls_model : 3;\n- /* 13 unused bits. */\n+ /* 14 unused bits. */\n };\n \n /* In a VAR_DECL that's static,\n@@ -4995,7 +4997,7 @@ extern unsigned int update_alignment_for_field (record_layout_info, tree,\n                                                 unsigned int);\n /* varasm.c */\n extern void make_decl_rtl (tree);\n-extern void make_decl_one_only (tree);\n+extern void make_decl_one_only (tree, tree);\n extern int supports_one_only (void);\n extern void resolve_unique_section (tree, int, int);\n extern void mark_referenced (tree);"}, {"sha": "c749f959c780420280d2be08ff0e40b5437f8016", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=fc26fae3db8a2eacc73224e2b3e0ab2aa3201eeb", "patch": "@@ -328,7 +328,7 @@ get_emutls_init_templ_addr (tree decl)\n   DECL_WEAK (to) = DECL_WEAK (decl);\n   if (DECL_ONE_ONLY (decl))\n     {\n-      make_decl_one_only (to);\n+      make_decl_one_only (to, DECL_ASSEMBLER_NAME (to));\n       TREE_STATIC (to) = TREE_STATIC (decl);\n       TREE_PUBLIC (to) = TREE_PUBLIC (decl);\n       DECL_VISIBILITY (to) = DECL_VISIBILITY (decl);\n@@ -391,7 +391,7 @@ emutls_decl (tree decl)\n       TREE_READONLY (to) = 0;\n       SET_DECL_ASSEMBLER_NAME (to, DECL_NAME (to));\n       if (DECL_ONE_ONLY (decl))\n-\tmake_decl_one_only (to);\n+\tmake_decl_one_only (to, DECL_ASSEMBLER_NAME (to));\n       DECL_CONTEXT (to) = DECL_CONTEXT (decl);\n       if (targetm.emutls.var_align_fixed)\n \t/* If we're not allowed to change the proxy object's\n@@ -5708,7 +5708,7 @@ supports_one_only (void)\n    translation units without generating a linker error.  */\n \n void\n-make_decl_one_only (tree decl)\n+make_decl_one_only (tree decl, tree comdat_group)\n {\n   gcc_assert (TREE_CODE (decl) == VAR_DECL\n \t      || TREE_CODE (decl) == FUNCTION_DECL);\n@@ -5720,7 +5720,7 @@ make_decl_one_only (tree decl)\n #ifdef MAKE_DECL_ONE_ONLY\n       MAKE_DECL_ONE_ONLY (decl);\n #endif\n-      DECL_ONE_ONLY (decl) = 1;\n+      DECL_COMDAT_GROUP (decl) = comdat_group;\n     }\n   else if (TREE_CODE (decl) == VAR_DECL\n       && (DECL_INITIAL (decl) == 0 || DECL_INITIAL (decl) == error_mark_node))\n@@ -5981,7 +5981,7 @@ default_elf_asm_named_section (const char *name, unsigned int flags,\n \tfprintf (asm_out_file, \",%d\", flags & SECTION_ENTSIZE);\n       if (HAVE_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n \tfprintf (asm_out_file, \",%s,comdat\",\n-\t\t lang_hooks.decls.comdat_group (decl));\n+\t\t IDENTIFIER_POINTER (DECL_COMDAT_GROUP (decl)));\n     }\n \n   putc ('\\n', asm_out_file);"}]}