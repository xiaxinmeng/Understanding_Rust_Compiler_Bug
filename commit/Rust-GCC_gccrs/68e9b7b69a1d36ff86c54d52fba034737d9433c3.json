{"sha": "68e9b7b69a1d36ff86c54d52fba034737d9433c3", "node_id": "C_kwDOANBUbNoAKDY4ZTliN2I2OWExZDM2ZmY4NmM1NGQ1MmZiYTAzNDczN2Q5NDMzYzM", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2022-02-03T20:56:50Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2022-02-03T20:56:50Z"}, "message": "Make pointer_query cache a private member.\n\ngcc/ChangeLog:\n\n\t* gimple-ssa-warn-access.cc (pass_waccess::pass_waccess): Remove\n\tpointer_query cache.\n\t* pointer-query.cc (pointer_query::pointer_query): Remove cache\n\targument.  Zero-initialize new cache member.\n\t(pointer_query::get_ref): Replace cache pointer with direct access.\n\t(pointer_query::put_ref): Same.\n\t(pointer_query::flush_cache): Same.\n\t(pointer_query::dump): Same.\n\t* pointer-query.h (class pointer_query): Remove cache argument from\n\tctor.  Change cache pointer to cache subobject member.\n\t* tree-ssa-strlen.cc: Remove pointer_query cache.", "tree": {"sha": "75008e82e8c85c3b087dc5d7e82cd0e1c3a39e49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75008e82e8c85c3b087dc5d7e82cd0e1c3a39e49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68e9b7b69a1d36ff86c54d52fba034737d9433c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e9b7b69a1d36ff86c54d52fba034737d9433c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e9b7b69a1d36ff86c54d52fba034737d9433c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e9b7b69a1d36ff86c54d52fba034737d9433c3/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c9f762ad02f398c27275688c3494332f69237f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9f762ad02f398c27275688c3494332f69237f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c9f762ad02f398c27275688c3494332f69237f5"}], "stats": {"total": 102, "additions": 44, "deletions": 58}, "files": [{"sha": "4b3d2c00b0331583d426184578fc5bde8a422af7", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e9b7b69a1d36ff86c54d52fba034737d9433c3/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e9b7b69a1d36ff86c54d52fba034737d9433c3/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=68e9b7b69a1d36ff86c54d52fba034737d9433c3", "patch": "@@ -2137,10 +2137,9 @@ class pass_waccess : public gimple_opt_pass\n   /* Return true if use follows an invalidating statement.  */\n   bool use_after_inval_p (gimple *, gimple *, bool = false);\n \n-  /* A pointer_query object and its cache to store information about\n-     pointers and their targets in.  */\n+  /* A pointer_query object to store information about pointers and\n+     their targets in.  */\n   pointer_query m_ptr_qry;\n-  pointer_query::cache_type m_var_cache;\n   /* Mapping from DECLs and their clobber statements in the function.  */\n   hash_map<tree, gimple *> m_clobbers;\n   /* A bit is set for each basic block whose statements have been assigned\n@@ -2158,8 +2157,7 @@ class pass_waccess : public gimple_opt_pass\n \n pass_waccess::pass_waccess (gcc::context *ctxt)\n   : gimple_opt_pass (pass_data_waccess, ctxt),\n-    m_ptr_qry (NULL, &m_var_cache),\n-    m_var_cache (),\n+    m_ptr_qry (NULL),\n     m_clobbers (),\n     m_bb_uids_set (),\n     m_func (),"}, {"sha": "afbcd0a15eadb3f727360c362e4ce09a8e6b9c11", "filename": "gcc/pointer-query.cc", "status": "modified", "additions": 31, "deletions": 43, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e9b7b69a1d36ff86c54d52fba034737d9433c3/gcc%2Fpointer-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e9b7b69a1d36ff86c54d52fba034737d9433c3/gcc%2Fpointer-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-query.cc?ref=68e9b7b69a1d36ff86c54d52fba034737d9433c3", "patch": "@@ -1433,12 +1433,11 @@ ssa_name_limit_t::~ssa_name_limit_t ()\n }\n \n /* Default ctor.  Initialize object with pointers to the range_query\n-   and cache_type instances to use or null.  */\n+   instance to use or null.  */\n \n-pointer_query::pointer_query (range_query *qry /* = NULL */,\n-\t\t\t      cache_type *cache /* = NULL */)\n-: rvals (qry), var_cache (cache), hits (), misses (),\n-  failures (), depth (), max_depth ()\n+pointer_query::pointer_query (range_query *qry /* = NULL */)\n+  : rvals (qry), hits (), misses (), failures (), depth (), max_depth (),\n+    var_cache ()\n {\n   /* No op.  */\n }\n@@ -1449,28 +1448,22 @@ pointer_query::pointer_query (range_query *qry /* = NULL */,\n const access_ref *\n pointer_query::get_ref (tree ptr, int ostype /* = 1 */) const\n {\n-  if (!var_cache)\n-    {\n-      ++misses;\n-      return NULL;\n-    }\n-\n   unsigned version = SSA_NAME_VERSION (ptr);\n   unsigned idx = version << 1 | (ostype & 1);\n-  if (var_cache->indices.length () <= idx)\n+  if (var_cache.indices.length () <= idx)\n     {\n       ++misses;\n       return NULL;\n     }\n \n-  unsigned cache_idx = var_cache->indices[idx];\n-  if (var_cache->access_refs.length () <= cache_idx)\n+  unsigned cache_idx = var_cache.indices[idx];\n+  if (var_cache.access_refs.length () <= cache_idx)\n     {\n       ++misses;\n       return NULL;\n     }\n \n-  access_ref &cache_ref = var_cache->access_refs[cache_idx];\n+  const access_ref &cache_ref = var_cache.access_refs[cache_idx];\n   if (cache_ref.ref)\n     {\n       ++hits;\n@@ -1491,17 +1484,17 @@ pointer_query::get_ref (tree ptr, gimple *stmt, access_ref *pref,\n   const unsigned version\n     = TREE_CODE (ptr) == SSA_NAME ? SSA_NAME_VERSION (ptr) : 0;\n \n-  if (var_cache && version)\n+  if (version)\n     {\n       unsigned idx = version << 1 | (ostype & 1);\n-      if (idx < var_cache->indices.length ())\n+      if (idx < var_cache.indices.length ())\n \t{\n-\t  unsigned cache_idx = var_cache->indices[idx] - 1;\n-\t  if (cache_idx < var_cache->access_refs.length ()\n-\t      && var_cache->access_refs[cache_idx].ref)\n+\t  unsigned cache_idx = var_cache.indices[idx] - 1;\n+\t  if (cache_idx < var_cache.access_refs.length ()\n+\t      && var_cache.access_refs[cache_idx].ref)\n \t    {\n \t      ++hits;\n-\t      *pref = var_cache->access_refs[cache_idx];\n+\t      *pref = var_cache.access_refs[cache_idx];\n \t      return true;\n \t    }\n \t}\n@@ -1525,7 +1518,7 @@ void\n pointer_query::put_ref (tree ptr, const access_ref &ref, int ostype /* = 1 */)\n {\n   /* Only add populated/valid entries.  */\n-  if (!var_cache || !ref.ref || ref.sizrng[0] < 0)\n+  if (!ref.ref || ref.sizrng[0] < 0)\n     return;\n \n   /* Add REF to the two-level cache.  */\n@@ -1535,20 +1528,20 @@ pointer_query::put_ref (tree ptr, const access_ref &ref, int ostype /* = 1 */)\n   /* Grow INDICES if necessary.  An index is valid if it's nonzero.\n      Its value minus one is the index into ACCESS_REFS.  Not all\n      entries are valid.  */\n-  if (var_cache->indices.length () <= idx)\n-    var_cache->indices.safe_grow_cleared (idx + 1);\n+  if (var_cache.indices.length () <= idx)\n+    var_cache.indices.safe_grow_cleared (idx + 1);\n \n-  if (!var_cache->indices[idx])\n-    var_cache->indices[idx] = var_cache->access_refs.length () + 1;\n+  if (!var_cache.indices[idx])\n+    var_cache.indices[idx] = var_cache.access_refs.length () + 1;\n \n   /* Grow ACCESS_REF cache if necessary.  An entry is valid if its\n      REF member is nonnull.  All entries except for the last two\n      are valid.  Once nonnull, the REF value must stay unchanged.  */\n-  unsigned cache_idx = var_cache->indices[idx];\n-  if (var_cache->access_refs.length () <= cache_idx)\n-    var_cache->access_refs.safe_grow_cleared (cache_idx + 1);\n+  unsigned cache_idx = var_cache.indices[idx];\n+  if (var_cache.access_refs.length () <= cache_idx)\n+    var_cache.access_refs.safe_grow_cleared (cache_idx + 1);\n \n-  access_ref &cache_ref = var_cache->access_refs[cache_idx];\n+  access_ref &cache_ref = var_cache.access_refs[cache_idx];\n   if (cache_ref.ref)\n   {\n     gcc_checking_assert (cache_ref.ref == ref.ref);\n@@ -1563,31 +1556,26 @@ pointer_query::put_ref (tree ptr, const access_ref &ref, int ostype /* = 1 */)\n void\n pointer_query::flush_cache ()\n {\n-  if (!var_cache)\n-    return;\n-  var_cache->indices.release ();\n-  var_cache->access_refs.release ();\n+  var_cache.indices.release ();\n+  var_cache.access_refs.release ();\n }\n \n /* Dump statistics and, optionally, cache contents to DUMP_FILE.  */\n \n void\n pointer_query::dump (FILE *dump_file, bool contents /* = false */)\n {\n-  if (!var_cache)\n-    return;\n-\n   unsigned nused = 0, nrefs = 0;\n-  unsigned nidxs = var_cache->indices.length ();\n+  unsigned nidxs = var_cache.indices.length ();\n   for (unsigned i = 0; i != nidxs; ++i)\n     {\n-      unsigned ari = var_cache->indices[i];\n+      unsigned ari = var_cache.indices[i];\n       if (!ari)\n \tcontinue;\n \n       ++nused;\n \n-      const access_ref &aref = var_cache->access_refs[ari];\n+      const access_ref &aref = var_cache.access_refs[ari];\n       if (!aref.ref)\n \tcontinue;\n \n@@ -1604,7 +1592,7 @@ pointer_query::dump (FILE *dump_file, bool contents /* = false */)\n \t   \"  failures:           %u\\n\"\n \t   \"  max_depth:          %u\\n\",\n \t   nidxs, nused,\n-\t   var_cache->access_refs.length (), nrefs,\n+\t   var_cache.access_refs.length (), nrefs,\n \t   hits, misses, failures, max_depth);\n \n   if (!contents || !nidxs)\n@@ -1614,11 +1602,11 @@ pointer_query::dump (FILE *dump_file, bool contents /* = false */)\n \n   for (unsigned i = 0; i != nidxs; ++i)\n     {\n-      unsigned ari = var_cache->indices[i];\n+      unsigned ari = var_cache.indices[i];\n       if (!ari)\n \tcontinue;\n \n-      const access_ref &aref = var_cache->access_refs[ari];\n+      const access_ref &aref = var_cache.access_refs[ari];\n       if (!aref.ref)\n \tcontinue;\n "}, {"sha": "4c725eeaf34369e899181e377a6b58cb7ab37fe2", "filename": "gcc/pointer-query.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e9b7b69a1d36ff86c54d52fba034737d9433c3/gcc%2Fpointer-query.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e9b7b69a1d36ff86c54d52fba034737d9433c3/gcc%2Fpointer-query.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-query.h?ref=68e9b7b69a1d36ff86c54d52fba034737d9433c3", "patch": "@@ -159,7 +159,6 @@ class pointer_query\n {\n   DISABLE_COPY_AND_ASSIGN (pointer_query);\n \n-public:\n   /* Type of the two-level cache object defined by clients of the class\n      to have pointer SSA_NAMEs cached for speedy access.  */\n   struct cache_type\n@@ -170,8 +169,9 @@ class pointer_query\n     vec<access_ref> access_refs;\n   };\n \n-  /* Construct an object with the given Ranger instance and cache.  */\n-  explicit pointer_query (range_query * = nullptr, cache_type * = nullptr);\n+public:\n+  /* Construct an object with the given Ranger instance.  */\n+  explicit pointer_query (range_query * = nullptr);\n \n   /* Retrieve the access_ref for a variable from cache if it's there.  */\n   const access_ref* get_ref (tree, int = 1) const;\n@@ -190,15 +190,17 @@ class pointer_query\n \n   /* A Ranger instance.  May be null to use global ranges.  */\n   range_query *rvals;\n-  /* Cache of SSA_NAMEs.  May be null to disable caching.  */\n-  cache_type *var_cache;\n \n   /* Cache performance counters.  */\n   mutable unsigned hits;\n   mutable unsigned misses;\n   mutable unsigned failures;\n   mutable unsigned depth;\n   mutable unsigned max_depth;\n+\n+private:\n+  /* Cache of SSA_NAMEs.  May be null to disable caching.  */\n+  cache_type var_cache;\n };\n \n /* Describes a pair of references used in an access by built-in"}, {"sha": "7370516da4547c0295234ce120e7816813ca3375", "filename": "gcc/tree-ssa-strlen.cc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e9b7b69a1d36ff86c54d52fba034737d9433c3/gcc%2Ftree-ssa-strlen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e9b7b69a1d36ff86c54d52fba034737d9433c3/gcc%2Ftree-ssa-strlen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.cc?ref=68e9b7b69a1d36ff86c54d52fba034737d9433c3", "patch": "@@ -236,8 +236,7 @@ class strlen_pass : public dom_walker\n public:\n   strlen_pass (cdi_direction direction)\n     : dom_walker (direction),\n-      ptr_qry (&m_ranger, &var_cache),\n-      var_cache (),\n+      ptr_qry (&m_ranger),\n       m_cleanup_cfg (false)\n   {\n   }\n@@ -301,10 +300,9 @@ class strlen_pass : public dom_walker\n \n   gimple_ranger m_ranger;\n \n-  /* A pointer_query object and its cache to store information about\n-     pointers and their targets in.  */\n+  /* A pointer_query object to store information about pointers and\n+     their targets in.  */\n   pointer_query ptr_qry;\n-  pointer_query::cache_type var_cache;\n \n   gimple_stmt_iterator m_gsi;\n "}]}