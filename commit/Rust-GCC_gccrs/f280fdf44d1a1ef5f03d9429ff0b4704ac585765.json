{"sha": "f280fdf44d1a1ef5f03d9429ff0b4704ac585765", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI4MGZkZjQ0ZDFhMWVmNWYwM2Q5NDI5ZmYwYjQ3MDRhYzU4NTc2NQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-09-11T00:12:57Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-09-11T00:12:57Z"}, "message": "configure.in: Fix cross compiling math routines.\n\n\n2001-09-10  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* configure.in: Fix cross compiling math routines. Correct\n\tcomments for cross compiling and limits. Add floating point math\n\troutines found in newlib.\n\t* configure: Regenerate.\n\t* acconfig.h: Add macros.\n\t* config.h.in: Regenerate.\n\nFrom-SVN: r45530", "tree": {"sha": "cc90028b7b2006140ced1a471f90fed71e0f1742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc90028b7b2006140ced1a471f90fed71e0f1742"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f280fdf44d1a1ef5f03d9429ff0b4704ac585765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f280fdf44d1a1ef5f03d9429ff0b4704ac585765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f280fdf44d1a1ef5f03d9429ff0b4704ac585765", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f280fdf44d1a1ef5f03d9429ff0b4704ac585765/comments", "author": null, "committer": null, "parents": [{"sha": "2c3fcba6dc56f848a07332ff005e2db9054dca26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c3fcba6dc56f848a07332ff005e2db9054dca26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c3fcba6dc56f848a07332ff005e2db9054dca26"}], "stats": {"total": 1742, "additions": 959, "deletions": 783}, "files": [{"sha": "e59d02b3f610c1a5c5aa192f7470c505af1c6614", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f280fdf44d1a1ef5f03d9429ff0b4704ac585765/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f280fdf44d1a1ef5f03d9429ff0b4704ac585765/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f280fdf44d1a1ef5f03d9429ff0b4704ac585765", "patch": "@@ -1,3 +1,12 @@\n+2001-09-10  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* configure.in: Fix cross compiling math routines. Correct\n+\tcomments for cross compiling and limits. Add floating point math\n+\troutines found in newlib.\n+\t* configure: Regenerate.\n+\t* acconfig.h: Add macros.\n+\t* config.h.in: Regenerate.\n+\t\n 2001-09-10  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* config/locale/moneypunct_members_generic.cc"}, {"sha": "692d915f14c80cf1a8f1a3568e9d43ec56151fc2", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f280fdf44d1a1ef5f03d9429ff0b4704ac585765/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f280fdf44d1a1ef5f03d9429ff0b4704ac585765/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=f280fdf44d1a1ef5f03d9429ff0b4704ac585765", "patch": "@@ -52,6 +52,18 @@\n // Define if you have the modfl function.\n #undef HAVE_MODFL\n \n+// Define if you have the expf function.\n+#undef HAVE_EXPF\n+\n+// Define if you have the expl function.\n+#undef HAVE_EXPL\n+\n+// Define if you have the hypotf function.\n+#undef HAVE_HYPOTF\n+\n+// Define if you have the hypotl function.\n+#undef HAVE_HYPOTL\n+\n // Define if the compiler/host combination has __builtin_abs\n #undef HAVE___BUILTIN_ABS\n "}, {"sha": "ee0dee83db39a84c13cbad00159a8496cab89b53", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f280fdf44d1a1ef5f03d9429ff0b4704ac585765/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f280fdf44d1a1ef5f03d9429ff0b4704ac585765/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=f280fdf44d1a1ef5f03d9429ff0b4704ac585765", "patch": "@@ -36,6 +36,18 @@\n // Define if you have the modfl function.\n #undef HAVE_MODFL\n \n+// Define if you have the expf function.\n+#undef HAVE_EXPF\n+\n+// Define if you have the expl function.\n+#undef HAVE_EXPL\n+\n+// Define if you have the hypotf function.\n+#undef HAVE_HYPOTF\n+\n+// Define if you have the hypotl function.\n+#undef HAVE_HYPOTL\n+\n // Define if the compiler/host combination has __builtin_abs\n #undef HAVE___BUILTIN_ABS\n "}, {"sha": "b2d6756ba794354ba4ef91c1cf941ef6b377790e", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 883, "deletions": 774, "changes": 1657, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f280fdf44d1a1ef5f03d9429ff0b4704ac585765/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f280fdf44d1a1ef5f03d9429ff0b4704ac585765/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=f280fdf44d1a1ef5f03d9429ff0b4704ac585765"}, {"sha": "ebf969ff830704c5e007fe96df886332bcd677d8", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f280fdf44d1a1ef5f03d9429ff0b4704ac585765/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f280fdf44d1a1ef5f03d9429ff0b4704ac585765/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=f280fdf44d1a1ef5f03d9429ff0b4704ac585765", "patch": "@@ -52,11 +52,20 @@ GLIBCPP_ENABLE_SJLJ_EXCEPTIONS\n \n if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n \n+  # This lets us hard-code the functionality we know\n+  # we'll have in the cross target environment. \"Let\" is a\n+  # sugar-coated word placed on an especially dull and tedious hack, actually.\n+  # Here's why GLIBCPP_CHECK_MATH_SUPPORT, and other autoconf macros\n+  # that involve linking can't be used:\n+  # \"cannot open sim-crt0.o\"\n+  # \"cannot open crt0.o\"\n+  # etc. All this is because there currently exists no unified,\n+  # consistent way for top level CC information to be passed down\n+  # to target directories: newlib includes, newlib linking info,\n+  # libgloss versus newlib crt0.o, etc. When all of this is done, all\n+  # of this hokey, excessive AC_DEFINE junk for crosses can be removed.\n+\n   # We are being configured with some form of cross compiler.\n-  # mknumeric_limits may not work correctly, either because the\n-  # compiler may not run on this machine, may not be able to link\n-  # executables, or may produce executables we can't run on this\n-  # machine. Thus, just use the pre-generated include/bits/limits_generic.h\n   GLIBCPP_IS_CROSS_COMPILING=1\n \n   # If Canadian cross, then don't pick up tools from the build\n@@ -97,6 +106,7 @@ if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n \tAC_DEFINE(HAVE_FLOORF)\n \tAC_DEFINE(HAVE_FMODF)\n \tAC_DEFINE(HAVE_FREXPF)\n+\tAC_DEFINE(HAVE_HYPOTF)\n \tAC_DEFINE(HAVE_ISINF)\n \tAC_DEFINE(HAVE_ISINFF)\n \tAC_DEFINE(HAVE_ISNAN)\n@@ -132,6 +142,7 @@ if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n \t  AC_DEFINE(HAVE_FLOORL)\n \t  AC_DEFINE(HAVE_FMODL)\n \t  AC_DEFINE(HAVE_FREXPL)\n+\t  AC_DEFINE(HAVE_HYPOTL)\n \t  AC_DEFINE(HAVE_ISINFL)\n \t  AC_DEFINE(HAVE_ISNANL)\n \t  AC_DEFINE(HAVE_LDEXPL)\n@@ -156,17 +167,40 @@ if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n \tAC_DEFINE(HAVE_MMAP)\n \t;;\n     *)\n-\t# We assume newlib.  This lets us hard-code the functions we know\n-\t# we'll have.\n+\t# We assume newlib. \n+\t# GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n+\t# GLIBCPP_CHECK_MATH_SUPPORT\n \tAC_DEFINE(HAVE_FINITE)\n+\tAC_DEFINE(HAVE_HYPOT)\n \tAC_DEFINE(HAVE_ISNAN)\n-\tAC_DEFINE(HAVE_ISNANF)\n \tAC_DEFINE(HAVE_ISINF)\n+\n+\tAC_DEFINE(HAVE_ACOSF)\n+\tAC_DEFINE(HAVE_ASINF)\n+\tAC_DEFINE(HAVE_ATAN2F)\n+\tAC_DEFINE(HAVE_ATANF)\n+\tAC_DEFINE(HAVE_CEILF)\n+\tAC_DEFINE(HAVE_COSF)\n+\tAC_DEFINE(HAVE_COSHF)\n+\tAC_DEFINE(HAVE_EXPF)\n+\tAC_DEFINE(HAVE_FABSF)\n+\tAC_DEFINE(HAVE_FLOORF)\n+\tAC_DEFINE(HAVE_FMODF)\n+\tAC_DEFINE(HAVE_HYPOTF)\n+\tAC_DEFINE(HAVE_ISNANF)\n \tAC_DEFINE(HAVE_ISINFF)\n+\tAC_DEFINE(HAVE_LDEXPF)\n+\tAC_DEFINE(HAVE_LOG10F)\n+\tAC_DEFINE(HAVE_LOGF)\n+\tAC_DEFINE(HAVE_MODFF)\n+\tAC_DEFINE(HAVE_POWF)\n+\tAC_DEFINE(HAVE_SINF)\n+\tAC_DEFINE(HAVE_SINHF)\n+\tAC_DEFINE(HAVE_SQRTF)\n+\tAC_DEFINE(HAVE_TANF)\n+\tAC_DEFINE(HAVE_TANHF)\n \n \tos_include_dir=\"config/os/newlib\"\n-\n-\t# need to check for faster f versions of math functions, ie sinf?\n \t;;\n   esac\n else"}]}