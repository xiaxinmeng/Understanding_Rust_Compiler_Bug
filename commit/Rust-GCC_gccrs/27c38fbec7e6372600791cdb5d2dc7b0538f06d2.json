{"sha": "27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdjMzhmYmVjN2U2MzcyNjAwNzkxY2RiNWQyZGM3YjA1MzhmMDZkMg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-09-12T17:18:03Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-09-12T17:18:03Z"}, "message": "c-common.c (c_tree_code_name): Const-ification.\n\n\t* c-common.c (c_tree_code_name): Const-ification.\n\t* c-decl.c (c_decode_option): Likewise.\n\t* c-typeck.c (warn_for_assignment): Likewise.\n\t* collect2.c (libexts, is_ctor_dtor, main, ignore_library):\n\tLikewise.\n\t* cppinit.c (output_deps): Likewise.\n\t* dependence.c (dependence_string, direction_string): Likewise.\n\t* dwarf2out.c (output_ranges): Likewise.\n\t* fixinc/fixfixes.c (emit_gnu_type): Likewise.\n\t* fixinc/gnu-regex.c (re_error_msgid): Likewise.\n\t* gcc.c (standard_exec_prefix, standard_exec_prefix_1,\n\tstandard_startfile_prefix, standard_startfile_prefix_1,\n\tstandard_startfile_prefix_2, tooldir_base_prefix,\n\tstandard_bindir_prefix, find_a_file): Likewise.\n\t* genattrtab.c (make_length_attrs): Likewise.\n\t* gencheck.c (tree_codes): Likewise.\n\t* genemit.c (gen_split): Likewise.\n\t* genrecog.c (special_mode_pred_table): Likewise.\n\t* graph.c (graph_ext): Likewise.\n\t* protoize (default_include): Likewise.\n\t* reload.c (reload_when_needed_name): Likewise.\n\t* sched-vis.c (visualize_stall_cycles): Likewise.\n\t* tlink.c (recompile_files): Likewise.\n\t* toplev.c (decode_g_option): Likewise.\n\t* tradcpp.c (output_deps): Likewise.\n\t* varasm.c (decode_reg_name): Likewise.\n\n\t* arm.c (arm_condition_codes, strings_fpa, thumb_condition_code):\n\tConst-ification.\n\t* arm.md: Likewise.\n\t* avr.c (avr_regnames, encode_section_info): Likewise.\n\t* c4x.c (float_reg_names): Likewise.\n\t* darwin.h (ASM_GLOBALIZE_LABEL): Likewise.\n\t* elfos.h (const_section): Likewise.\n\t* i386.c (ix86_comp_type_attributes): Likewise.\n\t* i386/win32.h (STRIP_NAME_ENCODING): Likewise.\n\t* ia64/aix.h (UNIQUE_SECTION): Likewise.\n\t* ia64.c (type_names): Likewise.\n\t* m68hc11.c (reg_class_names): Likewise.\n\t* m88k.c (m_options): Likewise.\n\t* mips.c (mips_output_conditional_branch, mips_unique_section):\n\tLikewise.\n\t* rs6000/sysv4.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n\t* sparc.c (sparc_flat_function_prologue, sparc_flat_function_epilogue,\n\tultra_code_names): Likewise.\n\t* sparc.h (OVERRIDE_OPTIONS): Likewise.\n\nFrom-SVN: r45567", "tree": {"sha": "7c832be5f376ac60e2a337dcecd71f3d30e9207d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c832be5f376ac60e2a337dcecd71f3d30e9207d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/comments", "author": null, "committer": null, "parents": [{"sha": "19dab7952cfedc4e896ce817b4221af7b042e080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19dab7952cfedc4e896ce817b4221af7b042e080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19dab7952cfedc4e896ce817b4221af7b042e080"}], "stats": {"total": 199, "additions": 124, "deletions": 75}, "files": [{"sha": "edd2ad7375f5aba31c9fc97dc84a56b370879137", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -1,3 +1,52 @@\n+2001-09-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-common.c (c_tree_code_name): Const-ification.\n+\t* c-decl.c (c_decode_option): Likewise.\n+\t* c-typeck.c (warn_for_assignment): Likewise.\n+\t* collect2.c (libexts, is_ctor_dtor, main, ignore_library):\n+\tLikewise.\n+\t* cppinit.c (output_deps): Likewise.\n+\t* dependence.c (dependence_string, direction_string): Likewise.\n+\t* dwarf2out.c (output_ranges): Likewise.\n+\t* fixinc/fixfixes.c (emit_gnu_type): Likewise.\n+\t* fixinc/gnu-regex.c (re_error_msgid): Likewise.\n+\t* gcc.c (standard_exec_prefix, standard_exec_prefix_1,\n+\tstandard_startfile_prefix, standard_startfile_prefix_1,\n+\tstandard_startfile_prefix_2, tooldir_base_prefix,\n+\tstandard_bindir_prefix, find_a_file): Likewise.\n+\t* genattrtab.c (make_length_attrs): Likewise.\n+\t* gencheck.c (tree_codes): Likewise.\n+\t* genemit.c (gen_split): Likewise.\n+\t* genrecog.c (special_mode_pred_table): Likewise.\n+\t* graph.c (graph_ext): Likewise.\n+\t* protoize (default_include): Likewise.\n+\t* reload.c (reload_when_needed_name): Likewise.\n+\t* sched-vis.c (visualize_stall_cycles): Likewise.\n+\t* tlink.c (recompile_files): Likewise.\n+\t* toplev.c (decode_g_option): Likewise.\n+\t* tradcpp.c (output_deps): Likewise.\n+\t* varasm.c (decode_reg_name): Likewise.\n+\t\n+\t* arm.c (arm_condition_codes, strings_fpa, thumb_condition_code):\n+\tConst-ification.\n+\t* arm.md: Likewise.\n+\t* avr.c (avr_regnames, encode_section_info): Likewise.\n+\t* c4x.c (float_reg_names): Likewise.\n+\t* darwin.h (ASM_GLOBALIZE_LABEL): Likewise.\n+\t* elfos.h (const_section): Likewise.\n+\t* i386.c (ix86_comp_type_attributes): Likewise.\n+\t* i386/win32.h (STRIP_NAME_ENCODING): Likewise.\n+\t* ia64/aix.h (UNIQUE_SECTION): Likewise.\n+\t* ia64.c (type_names): Likewise.\n+\t* m68hc11.c (reg_class_names): Likewise.\n+\t* m88k.c (m_options): Likewise.\n+\t* mips.c (mips_output_conditional_branch, mips_unique_section):\n+\tLikewise.\n+\t* rs6000/sysv4.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n+\t* sparc.c (sparc_flat_function_prologue, sparc_flat_function_epilogue,\n+\tultra_code_names): Likewise.\n+\t* sparc.h (OVERRIDE_OPTIONS): Likewise.\n+\n 2001-09-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* configure.in (gcc_cv_as_shf_merge): Fix a typo."}, {"sha": "755e526d1b16b140da001be10c8e68ce344b951a", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -4074,7 +4074,7 @@ static int c_tree_code_length[] = {\n    Used for printing out the tree and error messages.  */\n #define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n \n-static const char *c_tree_code_name[] = {\n+static const char *const c_tree_code_name[] = {\n   \"@@dummy\",\n #include \"c-common.def\"\n };"}, {"sha": "d0beb0f692689cf5e989c86e9266bd7fd1d66dfe", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -490,7 +490,7 @@ c_decode_option (argc, argv)\n \t -std=gnu89\t\tdefault, iso9899:1990 + gnu extensions\n \t -std=gnu99\t\tiso9899:1999 + gnu extensions\n       */\n-      const char *argstart = &p[5];\n+      const char *const argstart = &p[5];\n \n       if (!strcmp (argstart, \"iso9899:1990\")\n \t  || !strcmp (argstart, \"c89\"))"}, {"sha": "444a1042e3f773c63429b4ab0cda23898aae946b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -4319,7 +4319,7 @@ warn_for_assignment (msgid, opname, function, argnum)\n       if (function)\n \t{\n \t  /* Function name is known; supply it.  */\n-\t  const char *argstring = _(\"passing arg %d of `%s'\");\n+\t  const char *const argstring = _(\"passing arg %d of `%s'\");\n \t  new_opname = (char *) alloca (IDENTIFIER_LENGTH (function)\n \t\t\t\t\t+ strlen (argstring) + 1 + 25\n \t\t\t\t\t/*%d*/ + 1);\n@@ -4329,7 +4329,7 @@ warn_for_assignment (msgid, opname, function, argnum)\n       else\n \t{\n \t  /* Function name unknown (call through ptr); just give arg number.*/\n-\t  const char *argnofun = _(\"passing arg %d of pointer to function\");\n+\t  const char *const argnofun = _(\"passing arg %d of pointer to function\");\n \t  new_opname = (char *) alloca (strlen (argnofun) + 1 + 25 /*%d*/ + 1);\n \t  sprintf (new_opname, argnofun, argnum);\n \t}"}, {"sha": "44f7e3a3901e7ef14b676bedbd10fca578383e47", "filename": "gcc/collect2.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -264,7 +264,7 @@ static struct path_prefix cmdline_lib_dirs; /* directories specified with -L */\n static struct path_prefix libpath_lib_dirs; /* directories in LIBPATH */\n static struct path_prefix *libpaths[3] = {&cmdline_lib_dirs,\n \t\t\t\t\t  &libpath_lib_dirs, NULL};\n-static const char *libexts[3] = {\"a\", \"so\", NULL};  /* possible library extentions */\n+static const char *const libexts[3] = {\"a\", \"so\", NULL};  /* possible library extentions */\n #endif\n \n static void handler\t\tPARAMS ((int));\n@@ -557,7 +557,7 @@ static int\n is_ctor_dtor (s)\n      const char *s;\n {\n-  struct names { const char *name; int len; int ret; int two_underscores; };\n+  struct names { const char *const name; int len; int ret; int two_underscores; };\n \n   register struct names *p;\n   register int ch;\n@@ -796,21 +796,21 @@ main (argc, argv)\n      int argc;\n      char *argv[];\n {\n-  const char *ld_suffix\t= \"ld\";\n+  const char *const ld_suffix\t= \"ld\";\n   const char *full_ld_suffix\t= ld_suffix;\n-  const char *real_ld_suffix\t= \"real-ld\";\n-  const char *collect_ld_suffix = \"collect-ld\";\n-  const char *nm_suffix\t= \"nm\";\n+  const char *const real_ld_suffix = \"real-ld\";\n+  const char *const collect_ld_suffix = \"collect-ld\";\n+  const char *const nm_suffix\t= \"nm\";\n   const char *full_nm_suffix\t= nm_suffix;\n-  const char *gnm_suffix\t= \"gnm\";\n+  const char *const gnm_suffix\t= \"gnm\";\n   const char *full_gnm_suffix\t= gnm_suffix;\n #ifdef LDD_SUFFIX\n-  const char *ldd_suffix\t= LDD_SUFFIX;\n+  const char *const ldd_suffix\t= LDD_SUFFIX;\n   const char *full_ldd_suffix\t= ldd_suffix;\n #endif\n-  const char *strip_suffix\t= \"strip\";\n+  const char *const strip_suffix = \"strip\";\n   const char *full_strip_suffix = strip_suffix;\n-  const char *gstrip_suffix\t= \"gstrip\";\n+  const char *const gstrip_suffix = \"gstrip\";\n   const char *full_gstrip_suffix = gstrip_suffix;\n   const char *arg;\n   FILE *outf;\n@@ -2907,7 +2907,7 @@ if (debug) fprintf (stderr, \"found: %s\\n\", lib_buf);\n \n /* Array of standard AIX libraries which should not\n    be scanned for ctors/dtors.  */\n-static const char *aix_std_libs[] = {\n+static const char *const aix_std_libs[] = {\n   \"/unix\",\n   \"/lib/libc.a\",\n   \"/lib/libm.a\",\n@@ -2931,7 +2931,7 @@ static int\n ignore_library (name)\n      const char *name;\n {\n-  const char **p = &aix_std_libs[0];\n+  const char *const *p = &aix_std_libs[0];\n   while (*p++ != NULL)\n     if (! strcmp (name, *p)) return 1;\n   return 0;"}, {"sha": "4445583f777bcd09b845ee9f386d603216b5eecb", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -283,7 +283,7 @@ rtx arm_target_insn;\n int arm_target_label;\n \n /* The condition codes of the ARM, and the inverse function.  */\n-const char * arm_condition_codes[] =\n+const char *const arm_condition_codes[] =\n {\n   \"eq\", \"ne\", \"cs\", \"cc\", \"mi\", \"pl\", \"vs\", \"vc\",\n   \"hi\", \"ls\", \"ge\", \"lt\", \"gt\", \"le\", \"al\", \"nv\"\n@@ -2834,7 +2834,7 @@ arm_adjust_cost (insn, link, dep, cost)\n \n static int fpa_consts_inited = 0;\n \n-static const char * strings_fpa[8] =\n+static const char *const strings_fpa[8] =\n {\n   \"0\",   \"1\",   \"2\",   \"3\",\n   \"4\",   \"5\",   \"0.5\", \"10\"\n@@ -10609,7 +10609,7 @@ thumb_condition_code (x, invert)\n      rtx x;\n      int invert;\n {\n-  static const char * conds[] =\n+  static const char *const conds[] =\n   {\n     \"eq\", \"ne\", \"cs\", \"cc\", \"mi\", \"pl\", \"vs\", \"vc\", \n     \"hi\", \"ls\", \"ge\", \"lt\", \"gt\", \"le\""}, {"sha": "a3cc4f31b8c5d3d50beecbb332a7eda6268d092d", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -61,7 +61,7 @@ typedef enum arm_cond_code\n arm_cc;\n \n extern arm_cc arm_current_cc;\n-extern const char * arm_condition_codes[];\n+extern const char *const arm_condition_codes[];\n \n #define ARM_INVERSE_CONDITION_CODE(X)  ((arm_cc) (((int)X) ^ 1))\n \n@@ -2800,7 +2800,7 @@ extern int making_const_table;\n   do\t\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\t\\\n       int mi_delta = (DELTA);\t\t\t\t\t\t\t\\\n-      const char * mi_op = mi_delta < 0 ? \"sub\" : \"add\";\t\t\t\\\n+      const char *const mi_op = mi_delta < 0 ? \"sub\" : \"add\";\t\t\t\\\n       int shift = 0;\t\t\t\t\t\t\t\t\\\n       int this_regno = (aggregate_value_p (TREE_TYPE (TREE_TYPE (FUNCTION)))\t\\\n \t\t        ? 1 : 0);\t\t\t\t\t\t\\"}, {"sha": "347bc33b0b6524746a4404e143436084b4a43c79", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -7371,7 +7371,7 @@\n   \"TARGET_ARM\"\n   \"*\n   {\n-    const char * opcodes[4][2] =\n+    static const char *const opcodes[4][2] =\n     {\n       {\\\"cmp\\\\t%2, %3\\;cmp%d5\\\\t%0, %1\\\",\n        \\\"cmp\\\\t%0, %1\\;cmp%d4\\\\t%2, %3\\\"},\n@@ -7406,7 +7406,7 @@\n   \"TARGET_ARM\"\n   \"*\n {\n-  const char * opcodes[4][2] =\n+  static const char *const opcodes[4][2] =\n   {\n     {\\\"cmp\\\\t%0, %1\\;cmp%D4\\\\t%2, %3\\\",\n      \\\"cmp\\\\t%2, %3\\;cmp%D5\\\\t%0, %1\\\"},"}, {"sha": "a6cb331e1b7e51cde83d6c9450c87e73092905e0", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -77,7 +77,7 @@ rtx zero_reg_rtx;\n rtx ldi_reg_rtx;\n \n /* AVR register names {\"r0\", \"r1\", ..., \"r31\"} */\n-const char * avr_regnames[] = REGISTER_NAMES;\n+static const char *const avr_regnames[] = REGISTER_NAMES;\n \n /* This holds the last insn address.  */\n static int last_insn_address = 0;\n@@ -4756,7 +4756,7 @@ encode_section_info (decl)\n \t   && TREE_CODE (decl) == VAR_DECL\n \t   && avr_progmem_p (decl))\n     {\n-      const char *dsec = \".progmem.data\";\n+      const char *const dsec = \".progmem.data\";\n       DECL_SECTION_NAME (decl) = build_string (strlen (dsec), dsec);\n       TREE_READONLY (decl) = 1;\n     }"}, {"sha": "872cdfd65a35fa140f4957e67f4e85bf86e99881", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -65,7 +65,7 @@ rtx floatunshihf2_libfunc;\n \n static int c4x_leaf_function;\n \n-static const char *float_reg_names[] = FLOAT_REGISTER_NAMES;\n+static const char *const float_reg_names[] = FLOAT_REGISTER_NAMES;\n \n /* Array of the smallest class containing reg number REGNO, indexed by\n    REGNO.  Used by REGNO_REG_CLASS in c4x.h.  We assume that all these"}, {"sha": "72c689bd69b251a01d73f754ed41d1e4b5b2e929", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -669,7 +669,7 @@ void alias_section (name, alias)\t\t\t\\\n \n #undef ASM_GLOBALIZE_LABEL\n #define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n- do { const char* _x = (NAME); if (!!strncmp (_x, \"_OBJC_\", 6)) { \\\n+ do { const char *const _x = (NAME); if (!!strncmp (_x, \"_OBJC_\", 6)) { \\\n   (fputs (\".globl \", FILE), assemble_name (FILE, _x), fputs (\"\\n\", FILE)); \\\n  }} while (0)\n "}, {"sha": "66b0db7e8e334d50211078b1097405f11c8c1eb0", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -313,7 +313,7 @@ const_section ()\t\t\t\t\t\t\\\n       const char *name;\t\t\t\t\t\t\\\n       char *string;\t\t\t\t\t\t\\\n       const char *prefix;\t\t\t\t\t\\\n-      static const char *prefixes[4][2] =\t\t\t\\\n+      static const char *const prefixes[4][2] =\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \t{ \".text.\",   \".gnu.linkonce.t.\" },\t\t\t\\\n \t{ \".rodata.\", \".gnu.linkonce.r.\" },\t\t\t\\"}, {"sha": "81058acb116d724ac2fcfc406dee1b60ffa5062d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -1124,7 +1124,7 @@ ix86_comp_type_attributes (type1, type2)\n      tree type2;\n {\n   /* Check for mismatch of non-default calling convention.  */\n-  const char *rtdstr = TARGET_RTD ? \"cdecl\" : \"stdcall\";\n+  const char *const rtdstr = TARGET_RTD ? \"cdecl\" : \"stdcall\";\n \n   if (TREE_CODE (type1) != FUNCTION_TYPE)\n     return 1;"}, {"sha": "fda26586b2bbb690e254fec5f470c16b89d37412", "filename": "gcc/config/i386/win32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fi386%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fi386%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwin32.h?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -145,7 +145,7 @@ while (0)\n #define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   const char *_p;\t\t\t\t\t\t\t\\\n-  const char *_name = ((SYMBOL_NAME) + ((SYMBOL_NAME)[0] == '*'));\t\\\n+  const char *const _name = ((SYMBOL_NAME) + ((SYMBOL_NAME)[0] == '*'));\\\n   for (_p = _name; *_p && *_p != '@'; ++_p)\t\t\t\t\\\n     ;\t\t\t\t\t\t\t\t\t\\\n   if (*_p == '@')\t\t\t\t\t\t\t\\"}, {"sha": "8366824a79c9c03b9dcdf87f3d8a68af3d34d789", "filename": "gcc/config/ia64/aix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fia64%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fia64%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Faix.h?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -204,7 +204,7 @@ extern unsigned int ia64_section_threshold;\n       const char *name;\t\t\t\t\t\t\\\n       char *string;\t\t\t\t\t\t\\\n       const char *prefix;\t\t\t\t\t\\\n-      static const char *prefixes[/*4*/3][2] =\t\t\t\\\n+      static const char *const prefixes[/*4*/3][2] =\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \t{ \".text.\",   \".gnu.linkonce.t.\" },\t\t\t\\\n \t{ \".rodata.\", \".gnu.linkonce.r.\" },\t\t\t\\"}, {"sha": "c173b54a5c45d6f266f891238ab8e8224a431127", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -5079,7 +5079,7 @@ static struct ia64_packet packets[NR_PACKETS];\n \n /* Map attr_type to a string with the name.  */\n \n-static const char *type_names[] =\n+static const char *const type_names[] =\n {\n   \"UNKNOWN\", \"A\", \"I\", \"M\", \"F\", \"B\", \"L\", \"X\", \"S\"\n };"}, {"sha": "3bd9ce68fb2003363e2db9c72e726fe75f307c88", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -301,7 +301,7 @@ m68hc11_conditional_register_usage ()\n \n /* Reload and register operations. */\n \n-static const char *reg_class_names[] = REG_CLASS_NAMES;\n+static const char *const reg_class_names[] = REG_CLASS_NAMES;\n \n \n void"}, {"sha": "994994b8f41bc1d69031d9132ee3b12aa5bacc7c", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -1534,7 +1534,7 @@ output_option (file, sep, type, name, indent, pos, max)\n   return pos + fprintf (file, \"%s%s%s\", sep, type, name);\n }\n \n-static struct { const char *name; int value; } m_options[] = TARGET_SWITCHES;\n+static struct { const char *const name; int value; } m_options[] = TARGET_SWITCHES;\n \n static void\n output_options (file, f_options, f_len, W_options, W_len,"}, {"sha": "5ac7be10fe1fda0171d00c13334350034fc6b88b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -9445,9 +9445,9 @@ mips_output_conditional_branch (insn,\n      operand.  */\n   const char *op2 = (two_operands_p ? \",%z3\" : \",%.\");\n   /* The operand-printing string for the comparison.  */\n-  const char *comp = (float_p ? \"%F0\" : \"%C0\");\n+  const char *const comp = (float_p ? \"%F0\" : \"%C0\");\n   /* The operand-printing string for the inverted comparison.  */\n-  const char *inverted_comp = (float_p ? \"%W0\" : \"%N0\");\n+  const char *const inverted_comp = (float_p ? \"%W0\" : \"%N0\");\n \n   /* The MIPS processors (for levels of the ISA at least two), have\n      \"likely\" variants of each branch instruction.  These instructions\n@@ -9801,7 +9801,7 @@ mips_unique_section (decl, reloc)\n   int len, size, sec;\n   const char *name, *prefix;\n   char *string;\n-  static const char *prefixes[4][2] = {\n+  static const char *const prefixes[4][2] = {\n     { \".text.\", \".gnu.linkonce.t.\" },\n     { \".rodata.\", \".gnu.linkonce.r.\" },\n     { \".data.\", \".gnu.linkonce.d.\" },"}, {"sha": "38fcb83458b520ffa908c4f30a5e4176016f7e16", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -630,7 +630,7 @@ extern int rs6000_pic_labelno;\n #undef\tASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    const char *init_ptr = (TARGET_64BIT) ? \".quad\" : \".long\";\t\t\\\n+    const char *const init_ptr = (TARGET_64BIT) ? \".quad\" : \".long\";\t\\\n \t\t\t\t\t\t\t\t\t\\\n     if (TARGET_RELOCATABLE && (get_pool_size () != 0 || profile_flag)\t\\\n \t&& uses_TOC())\t\t\t\t\t\t\t\\"}, {"sha": "3b11a3f53d1ba0486721e2178523932c9bae0991", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -6701,8 +6701,8 @@ sparc_flat_function_prologue (file, size)\n   if (size > 0)\n     {\n       unsigned int reg_offset = current_frame_info.reg_offset;\n-      const char *fp_str = reg_names[FRAME_POINTER_REGNUM];\n-      const char *t1_str = \"%g1\";\n+      const char *const fp_str = reg_names[FRAME_POINTER_REGNUM];\n+      const char *const t1_str = \"%g1\";\n \n       /* Things get a little tricky if local variables take up more than ~4096\n \t bytes and outgoing arguments take up more than ~4096 bytes.  When that\n@@ -6885,9 +6885,9 @@ sparc_flat_function_epilogue (file, size)\n     {\n       unsigned HOST_WIDE_INT reg_offset = current_frame_info.reg_offset;\n       unsigned HOST_WIDE_INT size1;\n-      const char *sp_str = reg_names[STACK_POINTER_REGNUM];\n-      const char *fp_str = reg_names[FRAME_POINTER_REGNUM];\n-      const char *t1_str = \"%g1\";\n+      const char *const sp_str = reg_names[STACK_POINTER_REGNUM];\n+      const char *const fp_str = reg_names[FRAME_POINTER_REGNUM];\n+      const char *const t1_str = \"%g1\";\n \n       /* In the reload sequence, we don't need to fill the load delay\n \t slots for most of the loads, also see if we can fill the final\n@@ -7380,7 +7380,7 @@ enum ultra_code { NONE=0, /* no insn at all\t\t\t\t*/\n static enum ultra_code ultra_code_from_mask PARAMS ((int));\n static void ultra_schedule_insn PARAMS ((rtx *, rtx *, int, enum ultra_code));\n \n-static const char *ultra_code_names[NUM_ULTRA_CODES] = {\n+static const char *const ultra_code_names[NUM_ULTRA_CODES] = {\n   \"NONE\", \"IEU0\", \"IEU1\", \"IEUN\", \"LSU\", \"CTI\",\n   \"FPM\", \"FPA\", \"SINGLE\" };\n "}, {"sha": "9835881afc330de04a8b4896722f6c7fc705b03c", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -400,7 +400,7 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n       {\t\t\t\t\t\t\t\t\t\\\n \tif (flag_pic)\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n-\t    const char *pic_string = (flag_pic == 1) ? \"-fpic\" : \"-fPIC\";\\\n+\t    const char *const pic_string = (flag_pic == 1) ? \"-fpic\" : \"-fPIC\";\\\n \t    warning (\"%s and profiling conflict: disabling %s\",\t\t\\\n \t\t     pic_string, pic_string);\t\t\t\t\\\n \t    flag_pic = 0;\t\t\t\t\t\t\\"}, {"sha": "238cab4471b582e023d32038ee378929bda392d3", "filename": "gcc/cppinit.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -1032,7 +1032,8 @@ output_deps (pfile)\n {\n   /* Stream on which to print the dependency information.  */\n   FILE *deps_stream = 0;\n-  const char *deps_mode = CPP_OPTION (pfile, print_deps_append) ? \"a\" : \"w\";\n+  const char *const deps_mode =\n+    CPP_OPTION (pfile, print_deps_append) ? \"a\" : \"w\";\n \n   if (CPP_OPTION (pfile, deps_file) == 0)\n     deps_stream = stdout;"}, {"sha": "5b1017eea312274b2ed0d2b2d83adf1255593874", "filename": "gcc/dependence.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fdependence.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fdependence.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdependence.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -61,11 +61,11 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n enum dependence_type {dt_flow, dt_anti, dt_output, dt_none};\n #if 0\n-static const char * dependence_string [] = {\"flow\", \"anti\", \"output\", \"none\"};\n+static const char *const dependence_string [] = {\"flow\", \"anti\", \"output\", \"none\"};\n #endif\n enum direction_type {lt, le, eq, gt, ge, star, independent, undef};\n #if 0\n-static const char * direction_string [] = {\"<\", \"<=\", \"=\", \">\", \">=\", \"*\",\n+static const char *const direction_string [] = {\"<\", \"<=\", \"=\", \">\", \">=\", \"*\",\n \t\t\t\t\t   \"INDEPENDENT\", \"UNDEFINED\"};\n #endif\n enum def_use_type {def, use, init_def_use};"}, {"sha": "d61f77fd958d9903718ee3d2efc00efafb3691f1", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -6508,7 +6508,7 @@ static void\n output_ranges ()\n {\n   register unsigned i;\n-  const char *start_fmt = \"Offset 0x%x\";\n+  const char *const start_fmt = \"Offset 0x%x\";\n   const char *fmt = start_fmt;\n \n   for (i = 0; i < ranges_table_in_use; ++i)"}, {"sha": "a58c927a6845f317f40113c87078219768d6ffd2", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -164,7 +164,7 @@ emit_gnu_type ( text, rm )\n typedef __%s_TYPE__ %s_t;\\n\\\n #endif\\n\";\n \n-    const char* pz_guard = (strcmp (z_type, \"wchar\") == 0)\n+    const char *const pz_guard = (strcmp (z_type, \"wchar\") == 0)\n                            ? \" && ! defined(__cplusplus)\" : \"\";\n \n     printf (z_fmt, z_TYPE, pz_guard, z_TYPE, z_TYPE, z_type);"}, {"sha": "c4a8244696e67900176a1130b76f6c388ba4ff8f", "filename": "gcc/fixinc/gnu-regex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Ffixinc%2Fgnu-regex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Ffixinc%2Fgnu-regex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fgnu-regex.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -947,7 +947,7 @@ weak_alias (__re_set_syntax, re_set_syntax)\n    POSIX doesn't require that we do anything for REG_NOERROR,\n    but why not be nice?  */\n \n-static const char *re_error_msgid[] =\n+static const char *const re_error_msgid[] =\n   {\n     gettext_noop (\"Success\"),\t/* REG_NOERROR */\n     gettext_noop (\"No match\"),\t/* REG_NOMATCH */"}, {"sha": "99a6c3dd53517c442d807d46f4e792e179c317d0", "filename": "gcc/gcc.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -1280,20 +1280,20 @@ static const char *gcc_exec_prefix;\n #define STANDARD_BINDIR_PREFIX \"/usr/local/bin\"\n #endif\n \n-static const char *standard_exec_prefix = STANDARD_EXEC_PREFIX;\n-static const char *standard_exec_prefix_1 = \"/usr/lib/gcc/\";\n+static const char *const standard_exec_prefix = STANDARD_EXEC_PREFIX;\n+static const char *const standard_exec_prefix_1 = \"/usr/lib/gcc/\";\n static const char *md_exec_prefix = MD_EXEC_PREFIX;\n \n static const char *md_startfile_prefix = MD_STARTFILE_PREFIX;\n static const char *md_startfile_prefix_1 = MD_STARTFILE_PREFIX_1;\n-static const char *standard_startfile_prefix = STANDARD_STARTFILE_PREFIX;\n-static const char *standard_startfile_prefix_1 = \"/lib/\";\n-static const char *standard_startfile_prefix_2 = \"/usr/lib/\";\n+static const char *const standard_startfile_prefix = STANDARD_STARTFILE_PREFIX;\n+static const char *const standard_startfile_prefix_1 = \"/lib/\";\n+static const char *const standard_startfile_prefix_2 = \"/usr/lib/\";\n \n-static const char *tooldir_base_prefix = TOOLDIR_BASE_PREFIX;\n+static const char *const tooldir_base_prefix = TOOLDIR_BASE_PREFIX;\n static const char *tooldir_prefix;\n \n-static const char *standard_bindir_prefix = STANDARD_BINDIR_PREFIX;\n+static const char *const standard_bindir_prefix = STANDARD_BINDIR_PREFIX;\n \n /* Subdirectory to use for locating libraries.  Set by\n    set_multilib_dir based on the compilation options.  */\n@@ -2436,7 +2436,8 @@ find_a_file (pprefix, name, mode)\n      int mode;\n {\n   char *temp;\n-  const char *file_suffix = ((mode & X_OK) != 0 ? HOST_EXECUTABLE_SUFFIX : \"\");\n+  const char *const file_suffix =\n+    ((mode & X_OK) != 0 ? HOST_EXECUTABLE_SUFFIX : \"\");\n   struct prefix_list *pl;\n   int len = pprefix->max_len + strlen (name) + strlen (file_suffix) + 1;\n "}, {"sha": "071dd54c8f804c3e9ae7082b0cdaab1c95d6eabb", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -2445,7 +2445,7 @@ substitute_address (exp, no_address_fn, address_fn)\n static void\n make_length_attrs ()\n {\n-  static const char *new_names[] = {\"*insn_default_length\",\n+  static const char *const new_names[] = {\"*insn_default_length\",\n \t\t\t\t      \"*insn_variable_length_p\",\n \t\t\t\t      \"*insn_current_length\"};\n   static rtx (*no_address_fn[]) PARAMS ((rtx)) = {identity_fn, zero_fn, zero_fn};"}, {"sha": "b8fe254196edd6d858a7c0badbed20bea6d63bff", "filename": "gcc/gencheck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fgencheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fgencheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencheck.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -23,7 +23,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #define DEFTREECODE(SYM, NAME, TYPE, LEN)   STRINGX(SYM),\n \n-const char *tree_codes[] = {\n+static const char *const tree_codes[] = {\n #include \"tree.def\"\n #include \"c-common.def\"\n #include \"gencheck.h\""}, {"sha": "f4ad66f556614e85eb6b727e3b00407ddc545373", "filename": "gcc/genemit.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -558,12 +558,10 @@ gen_split (split)\n {\n   register int i;\n   int operands;\n-  const char *name = \"split\";\n+  const char *const name =\n+    ((GET_CODE (split) == DEFINE_PEEPHOLE2) ? \"peephole2\" : \"split\");\n   const char *unused;\n \n-  if (GET_CODE (split) == DEFINE_PEEPHOLE2)\n-    name = \"peephole2\";\n-\n   if (XVEC (split, 0) == 0)\n     fatal (\"define_%s (definition %d) lacks a pattern\", name,\n \t   insn_index_number);"}, {"sha": "c453b1aeb2e748828147ee0710237becaf384362", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -216,7 +216,7 @@ static struct pred_table\n \n #define NUM_KNOWN_PREDS ARRAY_SIZE (preds)\n \n-static const char * special_mode_pred_table[] = {\n+static const char *const special_mode_pred_table[] = {\n #ifdef SPECIAL_MODE_PREDICATES\n   SPECIAL_MODE_PREDICATES\n #endif"}, {"sha": "355816edd59f7325cdd64c9c3ffa3e963dd6c884", "filename": "gcc/graph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -31,7 +31,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"graph.h\"\n \n-static const char *graph_ext[] =\n+static const char *const graph_ext[] =\n {\n   /* no_graph */ \"\",\n   /* vcg */      \".vcg\","}, {"sha": "63b69358e81a284e2fe56b0bbdb2c9dc5b9f9510", "filename": "gcc/protoize.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -205,8 +205,8 @@ static const int hash_mask = (HASH_TABLE_SIZE - 1);\n #define LOCAL_INCLUDE_DIR \"/usr/local/include\"\n #endif\n \n-struct default_include { const char *fname; \n-\t\t\t const char *component;\n+struct default_include { const char *const fname; \n+\t\t\t const char *const component;\n \t\t\t int x1, x2; } include_defaults[]\n #ifdef INCLUDE_DEFAULTS\n   = INCLUDE_DEFAULTS;"}, {"sha": "99e4c6ec0273a2e8d2bf2741c7d959bb3746494b", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -6743,7 +6743,7 @@ regno_clobbered_p (regno, insn, mode, sets)\n   return 0;\n }\n \n-static const char *reload_when_needed_name[] =\n+static const char *const reload_when_needed_name[] =\n {\n   \"RELOAD_FOR_INPUT\",\n   \"RELOAD_FOR_OUTPUT\","}, {"sha": "95aa8af768fea72051fa6c35fe197953a39049fb", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -905,7 +905,7 @@ void\n visualize_stall_cycles (stalls)\n      int stalls;\n {\n-  const char *prefix = \";;       \";\n+  const char *const prefix = \";;       \";\n   const char *suffix = \"\\n\";\n   char *p;\n "}, {"sha": "4a669b46fd91f6e08cb9b95d51b5888b1a8fabb4", "filename": "gcc/tlink.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -502,7 +502,7 @@ recompile_files ()\n     {\n       char *line, *command;\n       FILE *stream = fopen ((char*) f->root.key, \"r\");\n-      const char *outname = frob_extension ((char*) f->root.key, \".rnw\");\n+      const char *const outname = frob_extension ((char*) f->root.key, \".rnw\");\n       FILE *output = fopen (outname, \"w\");\n \n       while ((line = tfgets (stream)) != NULL)"}, {"sha": "d09dcca639faed0b5e84b6b4a835ec2ae0ea385d", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -4222,7 +4222,7 @@ decode_g_option (arg)\n      -gdwarf -g3 is equivalent to -gdwarf3.  */\n   static int type_explicitly_set_p = 0;\n   /* Indexed by enum debug_info_type.  */\n-  static const char *debug_type_names[] =\n+  static const char *const debug_type_names[] =\n   {\n     \"none\", \"stabs\", \"coff\", \"dwarf-1\", \"dwarf-2\", \"xcoff\"\n   };"}, {"sha": "062d54e0e17bed816a029f63443fd1abc3ed6ca4", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -1038,7 +1038,7 @@ output_deps ()\n {\n   /* Stream on which to print the dependency information.  */\n   FILE *deps_stream = 0;\n-  const char *deps_mode = deps_append ? \"a\" : \"w\";\n+  const char *const deps_mode = deps_append ? \"a\" : \"w\";\n \n   if (deps_file == 0)\n     deps_stream = stdout;"}, {"sha": "b4d4d6d07f906098300e7af9187b1e35ee47084d", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c38fbec7e6372600791cdb5d2dc7b0538f06d2/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=27c38fbec7e6372600791cdb5d2dc7b0538f06d2", "patch": "@@ -747,7 +747,7 @@ decode_reg_name (asmspec)\n \n #ifdef ADDITIONAL_REGISTER_NAMES\n       {\n-\tstatic struct { const char *name; int number; } table[]\n+\tstatic struct { const char *const name; int number; } table[]\n \t  = ADDITIONAL_REGISTER_NAMES;\n \n \tfor (i = 0; i < (int) ARRAY_SIZE (table); i++)"}]}