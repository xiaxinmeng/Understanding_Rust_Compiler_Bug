{"sha": "2670a7aa8f2680af6c113a6dec97f21d5715c809", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY3MGE3YWE4ZjI2ODBhZjZjMTEzYTZkZWM5N2YyMWQ1NzE1YzgwOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-31T23:03:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-31T23:03:22Z"}, "message": "Add remaining changes from P1065R2 \"constexpr INVOKE\"\n\n\t* include/bits/refwrap.h (reference_wrapper, ref, cref): Add constexpr\n\tspecifiers for C++20.\n\t* include/std/functional (_Mem_fn, mem_fn, _Bind, _Bind_result, bind)\n\t(bind_front, _Not_fn, not_fn): Likewise.\n\t* testsuite/20_util/bind/constexpr.cc: New test.\n\t* testsuite/20_util/function_objects/bind_front/constexpr.cc: New test.\n\t* testsuite/20_util/function_objects/mem_fn/constexpr.cc: New test.\n\t* testsuite/20_util/function_objects/not_fn/constexpr.cc: New test.\n\t* testsuite/20_util/reference_wrapper/constexpr.cc: New test.\n\nFrom-SVN: r277698", "tree": {"sha": "82f613b28f2cfdd2766fd23c15c8f31f99368c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82f613b28f2cfdd2766fd23c15c8f31f99368c5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2670a7aa8f2680af6c113a6dec97f21d5715c809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2670a7aa8f2680af6c113a6dec97f21d5715c809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2670a7aa8f2680af6c113a6dec97f21d5715c809", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2670a7aa8f2680af6c113a6dec97f21d5715c809/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328b52d6751733f6e0f2d31feca44e1d8f2abfc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/328b52d6751733f6e0f2d31feca44e1d8f2abfc6"}], "stats": {"total": 272, "additions": 257, "deletions": 15}, "files": [{"sha": "029011104932775f36af2ab497551171686f63a8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670a7aa8f2680af6c113a6dec97f21d5715c809/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670a7aa8f2680af6c113a6dec97f21d5715c809/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2670a7aa8f2680af6c113a6dec97f21d5715c809", "patch": "@@ -1,5 +1,15 @@\n 2019-10-31  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/refwrap.h (reference_wrapper, ref, cref): Add constexpr\n+\tspecifiers for C++20.\n+\t* include/std/functional (_Mem_fn, mem_fn, _Bind, _Bind_result, bind)\n+\t(bind_front, _Not_fn, not_fn): Likewise.\n+\t* testsuite/20_util/bind/constexpr.cc: New test.\n+\t* testsuite/20_util/function_objects/bind_front/constexpr.cc: New test.\n+\t* testsuite/20_util/function_objects/mem_fn/constexpr.cc: New test.\n+\t* testsuite/20_util/function_objects/not_fn/constexpr.cc: New test.\n+\t* testsuite/20_util/reference_wrapper/constexpr.cc: New test.\n+\n \t* doc/doxygen/user.cfg.in: Add new header.\n \t* include/Makefile.am: Add new header.\n \t* include/Makefile.in: Regenerate."}, {"sha": "41e4653f2461f5eec835ad1b1320d2158bae3e37", "filename": "libstdc++-v3/include/bits/refwrap.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670a7aa8f2680af6c113a6dec97f21d5715c809/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frefwrap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670a7aa8f2680af6c113a6dec97f21d5715c809/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frefwrap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frefwrap.h?ref=2670a7aa8f2680af6c113a6dec97f21d5715c809", "patch": "@@ -300,7 +300,9 @@ _GLIBCXX_MEM_FN_TRAITS(&& noexcept, false_type, true_type)\n     {\n       _Tp* _M_data;\n \n+      _GLIBCXX20_CONSTEXPR\n       static _Tp* _S_fun(_Tp& __r) noexcept { return std::__addressof(__r); }\n+\n       static void _S_fun(_Tp&&) = delete;\n \n       template<typename _Up, typename _Up2 = __remove_cvref_t<_Up>>\n@@ -315,6 +317,7 @@ _GLIBCXX_MEM_FN_TRAITS(&& noexcept, false_type, true_type)\n       // 3041. Unnecessary decay in reference_wrapper\n       template<typename _Up, typename = __not_same<_Up>, typename\n \t\t= decltype(reference_wrapper::_S_fun(std::declval<_Up>()))>\n+\t_GLIBCXX20_CONSTEXPR\n \treference_wrapper(_Up&& __uref)\n \tnoexcept(noexcept(reference_wrapper::_S_fun(std::declval<_Up>())))\n \t: _M_data(reference_wrapper::_S_fun(std::forward<_Up>(__uref)))\n@@ -325,14 +328,17 @@ _GLIBCXX_MEM_FN_TRAITS(&& noexcept, false_type, true_type)\n       reference_wrapper&\n       operator=(const reference_wrapper&) = default;\n \n+      _GLIBCXX20_CONSTEXPR\n       operator _Tp&() const noexcept\n       { return this->get(); }\n \n+      _GLIBCXX20_CONSTEXPR\n       _Tp&\n       get() const noexcept\n       { return *_M_data; }\n \n       template<typename... _Args>\n+\t_GLIBCXX20_CONSTEXPR\n \ttypename result_of<_Tp&(_Args&&...)>::type\n \toperator()(_Args&&... __args) const\n \t{\n@@ -352,12 +358,14 @@ _GLIBCXX_MEM_FN_TRAITS(&& noexcept, false_type, true_type)\n \n   /// Denotes a reference should be taken to a variable.\n   template<typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline reference_wrapper<_Tp>\n     ref(_Tp& __t) noexcept\n     { return reference_wrapper<_Tp>(__t); }\n \n   /// Denotes a const reference should be taken to a variable.\n   template<typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline reference_wrapper<const _Tp>\n     cref(const _Tp& __t) noexcept\n     { return reference_wrapper<const _Tp>(__t); }\n@@ -370,12 +378,14 @@ _GLIBCXX_MEM_FN_TRAITS(&& noexcept, false_type, true_type)\n \n   /// std::ref overload to prevent wrapping a reference_wrapper\n   template<typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline reference_wrapper<_Tp>\n     ref(reference_wrapper<_Tp> __t) noexcept\n     { return __t; }\n \n   /// std::cref overload to prevent wrapping a reference_wrapper\n   template<typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline reference_wrapper<const _Tp>\n     cref(reference_wrapper<_Tp> __t) noexcept\n     { return { __t.get() }; }"}, {"sha": "dad7781378b23123b3c88352df1574ad86659247", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670a7aa8f2680af6c113a6dec97f21d5715c809/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670a7aa8f2680af6c113a6dec97f21d5715c809/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=2670a7aa8f2680af6c113a6dec97f21d5715c809", "patch": "@@ -112,6 +112,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Mem_fn_base(_MemFunPtr __pmf) noexcept : _M_pmf(__pmf) { }\n \n       template<typename... _Args>\n+\t_GLIBCXX20_CONSTEXPR\n \tauto\n \toperator()(_Args&&... __args) const\n \tnoexcept(noexcept(\n@@ -137,6 +138,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Mem_fn_base(_MemObjPtr __pm) noexcept : _M_pm(__pm) { }\n \n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __obj) const\n \tnoexcept(noexcept(std::__invoke(_M_pm, std::forward<_Tp>(__obj))))\n@@ -162,6 +164,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @ingroup functors\n    */\n   template<typename _Tp, typename _Class>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Mem_fn<_Tp _Class::*>\n     mem_fn(_Tp _Class::* __pm) noexcept\n     {\n@@ -297,6 +300,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * but not volatile-qualified. This might be a defect in the TR.\n        */\n       template<typename _CVRef, typename _Tuple>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Tp&\n \toperator()(_CVRef& __arg, _Tuple&) const volatile\n \t{ return __arg.get(); }\n@@ -313,6 +317,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n     public:\n       template<typename _CVArg, typename... _Args>\n+\t_GLIBCXX20_CONSTEXPR\n \tauto\n \toperator()(_CVArg& __arg,\n \t\t   tuple<_Args...>& __tuple) const volatile\n@@ -328,6 +333,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Invokes the underlying function object __arg by unpacking all\n       // of the arguments in the tuple.\n       template<typename _CVArg, typename... _Args, std::size_t... _Indexes>\n+\t_GLIBCXX20_CONSTEXPR\n \tauto\n \t__call(_CVArg& __arg, tuple<_Args...>& __tuple,\n \t       const _Index_tuple<_Indexes...>&) const volatile\n@@ -347,6 +353,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n     public:\n       template<typename _Tuple>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Safe_tuple_element_t<(is_placeholder<_Arg>::value - 1), _Tuple>&&\n \toperator()(const volatile _Arg&, _Tuple& __tuple) const volatile\n \t{\n@@ -365,6 +372,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n     public:\n       template<typename _CVArg, typename _Tuple>\n+\t_GLIBCXX20_CONSTEXPR\n \t_CVArg&&\n \toperator()(_CVArg&& __arg, _Tuple&) const volatile\n \t{ return std::forward<_CVArg>(__arg); }\n@@ -400,6 +408,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Call unqualified\n       template<typename _Result, typename... _Args, std::size_t... _Indexes>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Result\n \t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)\n \t{\n@@ -410,6 +419,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Call as const\n       template<typename _Result, typename... _Args, std::size_t... _Indexes>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Result\n \t__call_c(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const\n \t{\n@@ -464,24 +474,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n      public:\n       template<typename... _Args>\n-\texplicit _Bind(const _Functor& __f, _Args&&... __args)\n+\texplicit _GLIBCXX20_CONSTEXPR\n+\t_Bind(const _Functor& __f, _Args&&... __args)\n \t: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)\n \t{ }\n \n       template<typename... _Args>\n-\texplicit _Bind(_Functor&& __f, _Args&&... __args)\n+\texplicit _GLIBCXX20_CONSTEXPR\n+\t_Bind(_Functor&& __f, _Args&&... __args)\n \t: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)\n \t{ }\n \n       _Bind(const _Bind&) = default;\n-\n-      _Bind(_Bind&& __b)\n-      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))\n-      { }\n+      _Bind(_Bind&&) = default;\n \n       // Call unqualified\n       template<typename... _Args,\n \t       typename _Result = _Res_type<tuple<_Args...>>>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Result\n \toperator()(_Args&&... __args)\n \t{\n@@ -493,6 +503,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Call as const\n       template<typename... _Args,\n \t       typename _Result = _Res_type_cv<tuple<_Args...>, add_const>>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Result\n \toperator()(_Args&&... __args) const\n \t{\n@@ -547,6 +558,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Call unqualified\n       template<typename _Res, typename... _Args, std::size_t... _Indexes>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Res\n \t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)\n \t{\n@@ -556,6 +568,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Call as const\n       template<typename _Res, typename... _Args, std::size_t... _Indexes>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Res\n \t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const\n \t{\n@@ -565,6 +578,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Call as volatile\n       template<typename _Res, typename... _Args, std::size_t... _Indexes>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Res\n \t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) volatile\n \t{\n@@ -574,6 +588,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Call as const volatile\n       template<typename _Res, typename... _Args, std::size_t... _Indexes>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Res\n \t__call(tuple<_Args...>&& __args,\n \t       _Index_tuple<_Indexes...>) const volatile\n@@ -586,23 +601,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Result result_type;\n \n       template<typename... _Args>\n-\texplicit _Bind_result(const _Functor& __f, _Args&&... __args)\n+\texplicit _GLIBCXX20_CONSTEXPR\n+\t_Bind_result(const _Functor& __f, _Args&&... __args)\n \t: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)\n \t{ }\n \n       template<typename... _Args>\n-\texplicit _Bind_result(_Functor&& __f, _Args&&... __args)\n+\texplicit _GLIBCXX20_CONSTEXPR\n+\t_Bind_result(_Functor&& __f, _Args&&... __args)\n \t: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)\n \t{ }\n \n       _Bind_result(const _Bind_result&) = default;\n-\n-      _Bind_result(_Bind_result&& __b)\n-      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))\n-      { }\n+      _Bind_result(_Bind_result&&) = default;\n \n       // Call unqualified\n       template<typename... _Args>\n+\t_GLIBCXX20_CONSTEXPR\n \tresult_type\n \toperator()(_Args&&... __args)\n \t{\n@@ -613,6 +628,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Call as const\n       template<typename... _Args>\n+\t_GLIBCXX20_CONSTEXPR\n \tresult_type\n \toperator()(_Args&&... __args) const\n \t{\n@@ -763,7 +779,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @ingroup binders\n    */\n   template<typename _Func, typename... _BoundArgs>\n-    inline typename\n+    inline _GLIBCXX20_CONSTEXPR typename\n     _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type\n     bind(_Func&& __f, _BoundArgs&&... __args)\n     {\n@@ -787,7 +803,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @ingroup binders\n    */\n   template<typename _Result, typename _Func, typename... _BoundArgs>\n-    inline\n+    inline _GLIBCXX20_CONSTEXPR\n     typename _Bindres_helper<_Result, _Func, _BoundArgs...>::type\n     bind(_Func&& __f, _BoundArgs&&... __args)\n     {\n@@ -886,7 +902,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       = _Bind_front<decay_t<_Fn>, decay_t<_Args>...>;\n \n   template<typename _Fn, typename... _Args>\n-    _Bind_front_t<_Fn, _Args...>\n+    constexpr _Bind_front_t<_Fn, _Args...>\n     bind_front(_Fn&& __fn, _Args&&... __args)\n     noexcept(is_nothrow_constructible_v<int, _Bind_front_t<_Fn, _Args...>,\n \t\t\t\t\t_Fn, _Args...>)\n@@ -910,6 +926,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     public:\n       template<typename _Fn2>\n+\tconstexpr\n \t_Not_fn(_Fn2&& __fn, int)\n \t: _M_fn(std::forward<_Fn2>(__fn)) { }\n \n@@ -922,6 +939,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // and deducing the return type and exception-specification.\n #define _GLIBCXX_NOT_FN_CALL_OP( _QUALS )\t\t\t\t\\\n       template<typename... _Args>\t\t\t\t\t\\\n+\t_GLIBCXX20_CONSTEXPR\t\t\t\t\t\t\\\n \tdecltype(_S_not<__inv_res_t<_Fn _QUALS, _Args...>>())\t\t\\\n \toperator()(_Args&&... __args) _QUALS\t\t\t\t\\\n \tnoexcept(__is_nothrow_invocable<_Fn _QUALS, _Args...>::value\t\\\n@@ -966,6 +984,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #define __cpp_lib_not_fn 201603\n   /// [func.not_fn] Function template not_fn\n   template<typename _Fn>\n+    _GLIBCXX20_CONSTEXPR\n     inline auto\n     not_fn(_Fn&& __fn)\n     noexcept(std::is_nothrow_constructible<std::decay_t<_Fn>, _Fn&&>::value)"}, {"sha": "6761c2c92a165cbb6f89c89f5161cde8fba5a2f2", "filename": "libstdc++-v3/testsuite/20_util/bind/constexpr.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670a7aa8f2680af6c113a6dec97f21d5715c809/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670a7aa8f2680af6c113a6dec97f21d5715c809/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fconstexpr.cc?ref=2670a7aa8f2680af6c113a6dec97f21d5715c809", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <functional>\n+\n+struct add\n+{\n+  constexpr int operator()(int i, int j) const { return i + j; }\n+};\n+\n+constexpr int\n+test01(int i, int j)\n+{\n+  add a;\n+  return std::bind(a, i, std::placeholders::_1)(j);\n+}\n+\n+static_assert( test01(1, 2) == 3 );\n+\n+constexpr int\n+test02(int i, int j)\n+{\n+  return std::bind<int>(add{}, i, std::placeholders::_1)(j);\n+}\n+\n+static_assert( test02(4, 5) == 9 );"}, {"sha": "ee82745ddb7b07d3a75cdfc1b3d5b93c572f2f2c", "filename": "libstdc++-v3/testsuite/20_util/function_objects/bind_front/constexpr.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670a7aa8f2680af6c113a6dec97f21d5715c809/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fbind_front%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670a7aa8f2680af6c113a6dec97f21d5715c809/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fbind_front%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fbind_front%2Fconstexpr.cc?ref=2670a7aa8f2680af6c113a6dec97f21d5715c809", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <functional>\n+\n+struct add\n+{\n+  constexpr int operator()(int i, int j) const { return i + j; }\n+};\n+\n+constexpr int\n+test01(int i, int j)\n+{\n+  add a;\n+  return std::bind_front(a, i)(j);\n+}\n+\n+static_assert( test01(1, 2) == 3 );"}, {"sha": "6a0d0616baabe58e91772052854bc9a858d1c5b4", "filename": "libstdc++-v3/testsuite/20_util/function_objects/mem_fn/constexpr.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670a7aa8f2680af6c113a6dec97f21d5715c809/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fmem_fn%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670a7aa8f2680af6c113a6dec97f21d5715c809/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fmem_fn%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fmem_fn%2Fconstexpr.cc?ref=2670a7aa8f2680af6c113a6dec97f21d5715c809", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <functional>\n+\n+struct F\n+{\n+  int i;\n+  constexpr int add(int j) { return i + j; }\n+};\n+\n+constexpr int\n+test01(int i)\n+{\n+  F f{i};\n+  return std::mem_fn(&F::i)(f);\n+}\n+\n+static_assert( test01(2) == 2 );\n+\n+constexpr int\n+test02(int i, int j)\n+{\n+  F f{i};\n+  return std::mem_fn(&F::add)(&f, j);\n+}\n+\n+static_assert( test02(3, 4) == 7 );"}, {"sha": "1c0e737fb7d280b17348656871b8e3dcb64fd737", "filename": "libstdc++-v3/testsuite/20_util/function_objects/not_fn/constexpr.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670a7aa8f2680af6c113a6dec97f21d5715c809/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fnot_fn%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670a7aa8f2680af6c113a6dec97f21d5715c809/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fnot_fn%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fnot_fn%2Fconstexpr.cc?ref=2670a7aa8f2680af6c113a6dec97f21d5715c809", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <functional>\n+\n+struct F\n+{\n+  constexpr bool operator()(int i, int j) const { return i == j; }\n+};\n+\n+constexpr int\n+test01(int i, int j)\n+{\n+  F f;\n+  return std::not_fn(f)(1, 2);\n+}\n+\n+static_assert( test01(1, 2) );"}, {"sha": "8a1c54eea7f8a60a00fe3bb3d92df10c9ca33185", "filename": "libstdc++-v3/testsuite/20_util/reference_wrapper/constexpr.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670a7aa8f2680af6c113a6dec97f21d5715c809/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670a7aa8f2680af6c113a6dec97f21d5715c809/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Fconstexpr.cc?ref=2670a7aa8f2680af6c113a6dec97f21d5715c809", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <functional>\n+\n+struct F\n+{\n+  constexpr int operator()(int i, int j) { return i + j; }\n+  constexpr int operator()(int i, int j) const { return i * j; }\n+};\n+\n+constexpr int\n+test01(int i, int j)\n+{\n+  F f;\n+  return std::ref(std::ref(f))(i, j);\n+}\n+\n+static_assert( test01(1, 2) == 3 );\n+\n+constexpr int\n+test02(int i, int j)\n+{\n+  F f;\n+  return std::cref(std::cref(f))(i, j);\n+}\n+\n+static_assert( test02(4, 5) == 20 );"}]}