{"sha": "ad265aa4d61d9c7dac95718a1f00c18476c7ee13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQyNjVhYTRkNjFkOWM3ZGFjOTU3MThhMWYwMGMxODQ3NmM3ZWUxMw==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-05-27T23:27:36Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-05-27T23:27:36Z"}, "message": "cpplex.c (_cpp_init_toklist): No comment space to initialise.\n\n        * cpplex.c (_cpp_init_toklist): No comment space to initialise.\n\t(_cpp_free_toklist): No comment space to free.\n\t(expand_comment_space): Remove.\n        (save_comment_space): Place the comment in the current token and\n        not in a separate comment space.\n        (_cpp_lex_line): Save comments during plain code and #define\n        directives only.\n        * cpplib.h (struct _cpp_toklist): Remove comment space.\n\nFrom-SVN: r34215", "tree": {"sha": "acecb8c48b6de894d3e76d78605c85dc0b014d01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acecb8c48b6de894d3e76d78605c85dc0b014d01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad265aa4d61d9c7dac95718a1f00c18476c7ee13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad265aa4d61d9c7dac95718a1f00c18476c7ee13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad265aa4d61d9c7dac95718a1f00c18476c7ee13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad265aa4d61d9c7dac95718a1f00c18476c7ee13/comments", "author": null, "committer": null, "parents": [{"sha": "d1d9a6bd66d3d9b6cbade5609395fc618fa88f11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1d9a6bd66d3d9b6cbade5609395fc618fa88f11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1d9a6bd66d3d9b6cbade5609395fc618fa88f11"}], "stats": {"total": 118, "additions": 34, "deletions": 84}, "files": [{"sha": "c65e95f4cd13202b8a7bb82e410166a8e81a958b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad265aa4d61d9c7dac95718a1f00c18476c7ee13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad265aa4d61d9c7dac95718a1f00c18476c7ee13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad265aa4d61d9c7dac95718a1f00c18476c7ee13", "patch": "@@ -1,3 +1,14 @@\n+2000-05-28  Neil Booth  <NeilB@earthling.net>\n+\n+        * cpplex.c (_cpp_init_toklist): No comment space to initialise.\n+\t(_cpp_free_toklist): No comment space to free.\n+\t(expand_comment_space): Remove.\n+        (save_comment_space): Place the comment in the current token and\n+        not in a separate comment space.\n+        (_cpp_lex_line): Save comments during plain code and #define\n+        directives only.\n+        * cpplib.h (struct _cpp_toklist): Remove comment space.\n+\n 2000-05-28  Neil Booth  <NeilB@earthling.net>\n \n \t* cppexp.c (parse_assertion): Supply extra argument to"}, {"sha": "1addaf6b41f262749e3e1c0f2d1e5493dd037e8c", "filename": "gcc/cpplex.c", "status": "modified", "additions": 23, "deletions": 79, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad265aa4d61d9c7dac95718a1f00c18476c7ee13/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad265aa4d61d9c7dac95718a1f00c18476c7ee13/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=ad265aa4d61d9c7dac95718a1f00c18476c7ee13", "patch": "@@ -76,8 +76,8 @@ static void parse_number PARAMS ((cpp_reader *, cpp_toklist *, cpp_name *));\n static void parse_string2 PARAMS ((cpp_reader *, cpp_toklist *, cpp_name *,\n \t\t\t\t  unsigned int, int));\n static int trigraph_ok PARAMS ((cpp_reader *, const unsigned char *));\n-static void save_comment PARAMS ((cpp_toklist *, const unsigned char *,\n-\t\t\t\t  unsigned int, unsigned int, unsigned int));\n+static void save_comment PARAMS ((cpp_toklist *, cpp_token *, unsigned char *,\n+\t\t\t\t  unsigned int, unsigned int));\n void _cpp_lex_line PARAMS ((cpp_reader *, cpp_toklist *));\n \n static void _cpp_output_list PARAMS ((cpp_reader *, cpp_toklist *));\n@@ -599,10 +599,6 @@ _cpp_init_toklist (list, flags)\n   /* Allocate name space.  */\n   list->namebuf = (unsigned char *) xmalloc (list->name_cap);\n \n-  /* Only create a comment space on demand.  */\n-  list->comments_cap = 0;\n-  list->comments = 0;\n-\n   _cpp_clear_toklist (list);\n }\n \n@@ -613,7 +609,6 @@ _cpp_clear_toklist (list)\n {\n   list->tokens_used = 0;\n   list->name_used = 0;\n-  list->comments_used = 0;\n   list->dirno = -1;\n   list->flags &= LIST_OFFSET;  /* clear all but that one */\n }\n@@ -624,8 +619,6 @@ void\n _cpp_free_toklist (list)\n      cpp_toklist *list;\n {\n-  if (list->comments)\n-    free (list->comments);\n   if (list->flags & LIST_OFFSET)\n     free (list->tokens - 1);\t/* Backup over dummy token.  */\n   else\n@@ -669,9 +662,6 @@ _cpp_slice_toklist (copy, start, finish)\n   copy->tokens_used = n;\n   copy->name_used = bytes;\n   copy->name_cap = bytes;\n-  copy->comments = 0;\n-  copy->comments_cap = 0;\n-  copy->comments_used = 0;\n   \n   copy->flags = 0;\n   copy->dirno = -1;\n@@ -713,13 +703,6 @@ _cpp_squeeze_toklist (list)\n \tif (token_spellings[list->tokens[i].type].type > SPELL_NONE)\n \t  list->tokens[i].val.name.text += delta;\n     }\n-  \n-  if (list->comments_cap)\n-    {\n-      list->comments = xrealloc (list->comments,\n-\t\t\t\t list->comments_used * sizeof (cpp_token));\n-      list->comments_cap = list->comments_used;\n-    }\n }\n \n /* Compare two tokens.  */\n@@ -2360,24 +2343,6 @@ static const unsigned char *digraph_spellings [] = {U\"%:\", U\"%:%:\", U\"<:\",\n \t\t\t\t\t\t    U\":>\", U\"<%\", U\"%>\"};\n static unsigned char trigraph_map[256];\n \n-static void\n-expand_comment_space (list)\n-     cpp_toklist *list;\n-{\n-  if (list->comments_cap == 0)\n-    {\n-      list->comments_cap = 10;\n-      list->comments = (cpp_token *)\n-\txmalloc (list->comments_cap * sizeof (cpp_token));\n-    }\n-  else\n-    {\n-      list->comments_cap *= 2;\n-      list->comments = (cpp_token *)\n-\txrealloc (list->comments, list->comments_cap);\n-    }\n-}\n-\n void\n init_trigraph_map ()\n {\n@@ -2864,29 +2829,23 @@ parse_string2 (pfile, list, name, terminator, multiline_ok)\n \n #define COMMENT_START_LEN 2\n static void\n-save_comment (list, from, len, tok_no, type)\n+save_comment (list, token, from, len, type)\n      cpp_toklist *list;\n+     cpp_token *token;\n      const unsigned char *from;\n      unsigned int len;\n-     unsigned int tok_no;\n      unsigned int type;\n {\n-  cpp_token *comment;\n   unsigned char *buffer;\n   \n   len += COMMENT_START_LEN;\n \n-  if (list->comments_used == list->comments_cap)\n-    expand_comment_space (list);\n-\n   if (list->name_used + len > list->name_cap)\n     expand_name_space (list, len);\n \n-  comment = &list->comments[list->comments_used++];\n-  INIT_TOKEN_NAME (list, comment);\n-  comment->type = CPP_COMMENT;\n-  comment->aux = tok_no;\n-  comment->val.name.len = len;\n+  INIT_TOKEN_NAME (list, token);\n+  token->type = CPP_COMMENT;\n+  token->val.name.len = len;\n \n   buffer = list->namebuf + list->name_used;\n   list->name_used += len;\n@@ -3078,15 +3037,18 @@ _cpp_lex_line (pfile, list)\n \t\t\tcpp_error_with_line (pfile, list->line,\n \t\t\t\t\t     cur_token[-1].col,\n \t\t\t\t\t     \"multi-line comment\");\n-\t\t      if (!CPP_OPTION (pfile, discard_comments))\n-\t\t\tsave_comment (list, cur, buffer->cur - cur,\n-\t\t\t\t      cur_token - 1 - list->tokens, c);\n-\t\t      cur = buffer->cur;\n \n \t\t      /* Back-up to first '-' or '/'.  */\n-\t\t      cur_token -= 2;\n+\t\t      cur_token--;\n+\t\t      if (!CPP_OPTION (pfile, discard_comments)\n+\t\t\t  && (!IS_DIRECTIVE() || list->dirno == 0))\n+\t\t\tsave_comment (list, cur_token++, cur,\n+\t\t\t\t      buffer->cur - cur, c);\n+\t\t      cur = buffer->cur;\n+\n \t\t      if (!CPP_OPTION (pfile, traditional))\n \t\t\tflags = PREV_WHITESPACE;\n+\t\t      break;\n \t\t    }\n \t\t}\n \t    }\n@@ -3109,12 +3071,15 @@ _cpp_lex_line (pfile, list)\n \t\t  else if (buffer->cur[-2] != '*')\n \t\t    cpp_warning (pfile,\n \t\t\t\t \"comment end '*/' split across lines\");\n-\t\t  if (!CPP_OPTION (pfile, discard_comments))\n-\t\t    save_comment (list, cur, buffer->cur - cur,\n-\t\t\t\t cur_token - 1 - list->tokens, c);\n-\t\t  cur = buffer->cur;\n \n+\t\t  /* Back up to opening '/'.  */\n \t\t  cur_token--;\n+\t\t  if (!CPP_OPTION (pfile, discard_comments)\n+\t\t      && (!IS_DIRECTIVE() || list->dirno == 0))\n+\t\t    save_comment (list, cur_token++, cur,\n+\t\t\t\t  buffer->cur - cur, c);\n+\t\t  cur = buffer->cur;\n+\n \t\t  if (!CPP_OPTION (pfile, traditional))\n \t\t    flags = PREV_WHITESPACE;\n \t\t  break;\n@@ -3495,32 +3460,11 @@ _cpp_output_list (pfile, list)\n      cpp_reader *pfile;\n      cpp_toklist *list;\n {\n-  cpp_token *token, *comment, *comment_before = 0;\n-\n-  if (list->comments_used > 0)\n-    {\n-      comment = &list->comments[0];\n-      comment_before = &list->tokens[comment->aux];\n-    }\n+  cpp_token *token;\n \n   token = &list->tokens[0];\n   do\n     {\n-      /* Output comments if -C.  */\n-      while (token == comment_before)\n-\t{\n-\t  /* Make space for the comment, and copy it out.  */\n-\t  CPP_RESERVE (pfile, TOKEN_LEN (comment));\n-\t  pfile->limit = spell_token (pfile, comment, pfile->limit, 0);\n-\n-\t  /* Stop if no comments left, or no more comments appear\n-             before the current token.  */\n-\t  comment++;\n-\t  if (comment == list->comments + list->comments_used)\n-\t    break;\n-\t  comment_before = &list->tokens[comment->aux];\n-\t}\n-\n       CPP_RESERVE (pfile, TOKEN_LEN (token));\n       pfile->limit = spell_token (pfile, token, pfile->limit, 1);\n     }"}, {"sha": "5af21cb677d50c3c4969246068ca0e773d836fb1", "filename": "gcc/cpplib.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad265aa4d61d9c7dac95718a1f00c18476c7ee13/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad265aa4d61d9c7dac95718a1f00c18476c7ee13/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=ad265aa4d61d9c7dac95718a1f00c18476c7ee13", "patch": "@@ -208,11 +208,6 @@ struct cpp_toklist\n \n   unsigned int line;\t\t/* starting line number */\n \n-  /* Comment copying.  */\n-  cpp_token *comments;\t\t/* comment tokens.  */\n-  unsigned int comments_used;\t/* comment tokens used.  */\n-  unsigned int comments_cap;\t/* comment token capacity.  */\n-\n   /* The handler to call after lexing the rest of this line.\n      -1 for none */\n   short dirno;"}]}