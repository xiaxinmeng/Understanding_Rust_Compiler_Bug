{"sha": "74a3070ffad610701440467a2bd0b6627a76e568", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRhMzA3MGZmYWQ2MTA3MDE0NDA0NjdhMmJkMGI2NjI3YTc2ZTU2OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-11-18T02:09:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-11-18T02:09:23Z"}, "message": "eh_personality.cc (__cxa_call_unexpected): Take void*.\n\n        * libsupc++/eh_personality.cc (__cxa_call_unexpected): Take void*.\n        * libsupc++/eh_catch.cc (__cxa_begin_catch): Likewise.\n        * libsupc++/unwind-cxx.h: Adjust.\n        * src/Makefile.am (strstream.o): Pass -Wno-deprecated.\n\n        * libsupc++/eh_type.cc (__cxa_current_exception_type): New file.\n        * libsupc++/cxxabi.h: Declare it.\n        * libsupc++/Makefile.am (sources): Add it.\n        * src/vterminate.cc (verbose_terminate_handler): New file.\n        * libsupc++/exception: Declare it.\n        * src/Makefile.am (sources): Add it.\n\n        * src/Makefile.am (VPATH): Check the src directory before the top one.\n\nFrom-SVN: r47132", "tree": {"sha": "6a65bccb2be735bc17b004a6ee62e5a043ceaea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a65bccb2be735bc17b004a6ee62e5a043ceaea3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74a3070ffad610701440467a2bd0b6627a76e568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a3070ffad610701440467a2bd0b6627a76e568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74a3070ffad610701440467a2bd0b6627a76e568", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a3070ffad610701440467a2bd0b6627a76e568/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed19322d0c79606d3e16e0ad3a4029af2f7b9f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed19322d0c79606d3e16e0ad3a4029af2f7b9f28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed19322d0c79606d3e16e0ad3a4029af2f7b9f28"}], "stats": {"total": 204, "additions": 185, "deletions": 19}, "files": [{"sha": "8ddd1af55002a41784d0b3dafb1e2932962c8fb2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=74a3070ffad610701440467a2bd0b6627a76e568", "patch": "@@ -1,3 +1,19 @@\n+2001-11-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* libsupc++/eh_personality.cc (__cxa_call_unexpected): Take void*.\n+\t* libsupc++/eh_catch.cc (__cxa_begin_catch): Likewise.\n+\t* libsupc++/unwind-cxx.h: Adjust.\n+\t* src/Makefile.am (strstream.o): Pass -Wno-deprecated.\n+\n+\t* libsupc++/eh_type.cc (__cxa_current_exception_type): New file.\n+\t* libsupc++/cxxabi.h: Declare it.\n+\t* libsupc++/Makefile.am (sources): Add it.\n+\t* src/vterminate.cc (verbose_terminate_handler): New file.\n+\t* libsupc++/exception: Declare it.\n+\t* src/Makefile.am (sources): Add it.\n+\n+\t* src/Makefile.am (VPATH): Check the src directory before the top one.\n+\n 2001-11-16  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/bits/stl_deque.h (deque::erase()):  Fix memory leak."}, {"sha": "bdde27b17f3f1746bf6101adbfc67dcd18729276", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=74a3070ffad610701440467a2bd0b6627a76e568", "patch": "@@ -78,6 +78,7 @@ sources = \\\n \teh_personality.cc \\\n \teh_terminate.cc \\\n \teh_throw.cc \\\n+\teh_type.cc \\\n \tnew_handler.cc \\\n \tnew_op.cc \\\n \tnew_opnt.cc \\"}, {"sha": "fbf3f139eb1c4da43676773edb2f74651bca4d1e", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=74a3070ffad610701440467a2bd0b6627a76e568", "patch": "@@ -206,6 +206,7 @@ sources = \\\n \teh_personality.cc \\\n \teh_terminate.cc \\\n \teh_throw.cc \\\n+\teh_type.cc \\\n \tnew_handler.cc \\\n \tnew_op.cc \\\n \tnew_opnt.cc \\\n@@ -287,15 +288,16 @@ libsupc__convenience_la_LDFLAGS =\n libsupc__convenience_la_LIBADD = \n libsupc__convenience_la_OBJECTS =  del_op.lo del_opnt.lo del_opv.lo \\\n del_opvnt.lo eh_alloc.lo eh_aux_runtime.lo eh_catch.lo eh_exception.lo \\\n-eh_globals.lo eh_personality.lo eh_terminate.lo eh_throw.lo \\\n+eh_globals.lo eh_personality.lo eh_terminate.lo eh_throw.lo eh_type.lo \\\n new_handler.lo new_op.lo new_opnt.lo new_opv.lo new_opvnt.lo pure.lo \\\n tinfo.lo tinfo2.lo vec.lo\n libsupc___la_LDFLAGS = \n libsupc___la_LIBADD = \n libsupc___la_OBJECTS =  del_op.lo del_opnt.lo del_opv.lo del_opvnt.lo \\\n eh_alloc.lo eh_aux_runtime.lo eh_catch.lo eh_exception.lo eh_globals.lo \\\n-eh_personality.lo eh_terminate.lo eh_throw.lo new_handler.lo new_op.lo \\\n-new_opnt.lo new_opv.lo new_opvnt.lo pure.lo tinfo.lo tinfo2.lo vec.lo\n+eh_personality.lo eh_terminate.lo eh_throw.lo eh_type.lo new_handler.lo \\\n+new_op.lo new_opnt.lo new_opv.lo new_opvnt.lo pure.lo tinfo.lo \\\n+tinfo2.lo vec.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)"}, {"sha": "e695ce5a2239fd339efb2b72ef7b850dea344fe4", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=74a3070ffad610701440467a2bd0b6627a76e568", "patch": "@@ -509,6 +509,11 @@ char *__cxa_demangle (const char *__mangled_name,\n \t\t      __SIZE_TYPE__ *__length,\n \t\t      int *__status);\n \n+// Returns the type_info for the currently handled exception [15.3/8], or\n+// null if there is none.\n+extern \"C\"\n+std::type_info *__cxa_current_exception_type ();\n+\n } /* namespace __cxxabiv1 */\n \n /* User programs should use the alias `abi'. */"}, {"sha": "ba49dfe7e44d314d5a5abd10356352053279d2e0", "filename": "libstdc++-v3/libsupc++/eh_catch.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc?ref=74a3070ffad610701440467a2bd0b6627a76e568", "patch": "@@ -35,8 +35,11 @@ using namespace __cxxabiv1;\n \n \n extern \"C\" void *\n-__cxa_begin_catch (_Unwind_Exception *exceptionObject)\n+__cxa_begin_catch (void *exc_obj_in)\n {\n+  _Unwind_Exception *exceptionObject\n+    = reinterpret_cast <_Unwind_Exception *>(exc_obj_in);\n+\n   // ??? Foreign exceptions can't be stacked here, and there doesn't\n   // appear to be any place to store for __cxa_end_catch to destroy.\n "}, {"sha": "9b235a0e55f14ee11052a3fbcafbff512f780eeb", "filename": "libstdc++-v3/libsupc++/eh_personality.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc?ref=74a3070ffad610701440467a2bd0b6627a76e568", "patch": "@@ -399,8 +399,11 @@ PERSONALITY_FUNCTION (int version,\n }\n \n extern \"C\" void\n-__cxa_call_unexpected (_Unwind_Exception *exc_obj)\n+__cxa_call_unexpected (void *exc_obj_in)\n {\n+  _Unwind_Exception *exc_obj\n+    = reinterpret_cast <_Unwind_Exception *>(exc_obj_in);\n+\n   __cxa_begin_catch (exc_obj);\n \n   // This function is a handler for our exception argument.  If we exit"}, {"sha": "ef9da9c3ac4ef649a50da2a2695e8c3adf1087d5", "filename": "libstdc++-v3/libsupc++/eh_type.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_type.cc?ref=74a3070ffad610701440467a2bd0b6627a76e568", "patch": "@@ -0,0 +1,49 @@\n+// -*- C++ -*- Exception handling routines for catching.\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of GNU CC.\n+//\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+\n+#include <typeinfo>\n+#include \"unwind-cxx.h\"\n+\n+namespace __cxxabiv1 {\n+\n+// Returns the type_info for the currently handled exception [15.3/8], or\n+// null if there is none.\n+extern \"C\"\n+std::type_info *__cxa_current_exception_type ()\n+{\n+  __cxa_eh_globals *globals = __cxa_get_globals ();\n+  __cxa_exception *header = globals->caughtExceptions;\n+  if (header)\n+    return header->exceptionType;\n+  else\n+    return 0;\n+}\n+\n+} // namespace __cxxabiv1"}, {"sha": "3463f3d34b438c4a0af6610456389d8227be0474", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=74a3070ffad610701440467a2bd0b6627a76e568", "patch": "@@ -95,6 +95,12 @@ namespace std\n   bool uncaught_exception() throw();\n } // namespace std\n \n+namespace __gnu_cxx {\n+  /** A replacement for the standard terminate_handler which prints more\n+      information about the terminating exception (if any) on stderr.  */\n+  void verbose_terminate_handler ();\n+} // namespace __gnu_cxx\n+  \n } // extern \"C++\"\n \n #endif"}, {"sha": "ea30ebab8efaa7b5fd6e1919a250375d6c673600", "filename": "libstdc++-v3/libsupc++/unwind-cxx.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h?ref=74a3070ffad610701440467a2bd0b6627a76e568", "patch": "@@ -105,7 +105,7 @@ extern \"C\" void __cxa_throw (void *thrown_exception,\n      __attribute__((noreturn));\n \n // Used to implement exception handlers.\n-extern \"C\" void *__cxa_begin_catch (_Unwind_Exception *) throw();\n+extern \"C\" void *__cxa_begin_catch (void *) throw();\n extern \"C\" void __cxa_end_catch ();\n extern \"C\" void __cxa_rethrow () __attribute__((noreturn));\n \n@@ -118,8 +118,7 @@ extern \"C\" void __cxa_bad_typeid ();\n // Handles re-checking the exception specification if unexpectedHandler\n // throws, and if bad_exception needs to be thrown.  Called from the\n // compiler.\n-extern \"C\" void __cxa_call_unexpected (_Unwind_Exception *)\n-     __attribute__((noreturn));\n+extern \"C\" void __cxa_call_unexpected (void *) __attribute__((noreturn));\n \n // Invokes given handler, dying appropriately if the user handler was\n // so inconsiderate as to return."}, {"sha": "b32359deae4feb4b01154472ca6bd57efafc5fb4", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=74a3070ffad610701440467a2bd0b6627a76e568", "patch": "@@ -65,9 +65,9 @@ sources = \\\n \tlocale.cc locale-inst.cc localename.cc \\\n \tcollate.cc messages.cc moneypunct.cc numpunct.cc time.cc \\\n \tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \\\n-\tvalarray-inst.cc wstring-inst.cc concept-inst.cc\n+\tvalarray-inst.cc wstring-inst.cc concept-inst.cc vterminate.cc\n \n-VPATH = $(top_srcdir):$(top_srcdir)/src\n+VPATH = $(top_srcdir)/src:$(top_srcdir)\n \n libstdc___la_SOURCES = $(sources)\n \n@@ -84,9 +84,9 @@ libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n # deprecated include files.\n GLIBCPP_INCLUDE_DIR=@glibcpp_builddir@/include\n strstream.lo: strstream.cc\n-\t$(LTCXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n+\t$(LTCXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n strstream.o: strstream.cc\n-\t$(CXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n+\t$(CXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n \n # Use special rules for the concept-checking instantiations so that all\n # the generated template functions are also instantiated.  Force the checks"}, {"sha": "00b13ae15db8fa4d00a36dbc0f740716d264faa1", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=74a3070ffad610701440467a2bd0b6627a76e568", "patch": "@@ -1,6 +1,6 @@\n-# Makefile.in generated automatically by automake 1.4 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n \n-# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n+# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -190,10 +190,10 @@ sources = \\\n \tlocale.cc locale-inst.cc localename.cc \\\n \tcollate.cc messages.cc moneypunct.cc numpunct.cc time.cc \\\n \tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \\\n-\tvalarray-inst.cc wstring-inst.cc concept-inst.cc\n+\tvalarray-inst.cc wstring-inst.cc concept-inst.cc vterminate.cc\n \n \n-VPATH = $(top_srcdir):$(top_srcdir)/src\n+VPATH = $(top_srcdir)/src:$(top_srcdir)\n \n libstdc___la_SOURCES = $(sources)\n \n@@ -268,7 +268,7 @@ codecvt.lo complex_io.lo functexcept.lo globals.lo ios.lo limits.lo \\\n locale.lo locale-inst.lo localename.lo collate.lo messages.lo \\\n moneypunct.lo numpunct.lo time.lo misc-inst.lo stdexcept.lo stl-inst.lo \\\n string-inst.lo strstream.lo valarray-inst.lo wstring-inst.lo \\\n-concept-inst.lo\n+concept-inst.lo vterminate.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)\n@@ -495,9 +495,9 @@ installdirs mostlyclean-generic distclean-generic clean-generic \\\n maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n \n strstream.lo: strstream.cc\n-\t$(LTCXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n+\t$(LTCXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n strstream.o: strstream.cc\n-\t$(CXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n+\t$(CXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n \n # Use special rules for the concept-checking instantiations so that all\n # the generated template functions are also instantiated.  Force the checks"}, {"sha": "c84068a069641516a77ed282ec2fcc4aca3c3918", "filename": "libstdc++-v3/src/vterminate.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Fsrc%2Fvterminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a3070ffad610701440467a2bd0b6627a76e568/libstdc%2B%2B-v3%2Fsrc%2Fvterminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fvterminate.cc?ref=74a3070ffad610701440467a2bd0b6627a76e568", "patch": "@@ -0,0 +1,82 @@\n+// Verbose terminate_handler -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of GNU CC.\n+//\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+// \n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+// \n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <exception>\n+#include <cstdlib>\n+#include <cstdio>\n+#include <cxxabi.h>\n+\n+using namespace std;\n+using namespace abi;\n+\n+namespace __gnu_cxx {\n+\n+/** This is a replacement for the standard terminate_handler which prints\n+    more information about the terminating exception (if any) on stderr.  */\n+void verbose_terminate_handler ()\n+{\n+  // Make sure there was an exception; terminate is also called for an\n+  // attempt to rethrow when there is no suitable exception.\n+  type_info *t = __cxa_current_exception_type ();\n+  if (t)\n+    {\n+      char const *name = t->name ();\n+      // Note that \"name\" is the mangled name.\n+\n+      {\n+\tint status = -1;\n+\tchar *dem = 0;\n+\n+#if 0\n+\t// Disabled until __cxa_demangle gets the runtime GPL exception.\n+\tdem = __cxa_demangle (name, 0, 0, &status);\n+#endif\n+\n+\tprintf (\"terminate called after throwing a `%s'\\n\",\n+\t\tstatus == 0 ? dem : name);\n+\n+\tif (status == 0)\n+\t  free (dem);\n+      }\n+\n+      // If the exception is derived from std::exception, we can give more\n+      // information.\n+      try { throw; }\n+      catch (exception &exc)\n+\t{ fprintf (stderr, \"  what(): %s\\n\", exc.what()); }\n+      catch (...) { }\n+    }\n+  else\n+    fprintf (stderr, \"terminate called without an active exception\\n\");\n+\n+  abort ();\n+}\n+\n+} // namespace __gnu_cxx"}]}