{"sha": "b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUxNDgzZjQ4ZjNjYzY3Y2Y0YjUwOGJkZDljNGI2YTQ3YjQ0YzUzYQ==", "commit": {"author": {"name": "Pedro Alves", "email": "palves@redhat.com", "date": "2017-06-12T22:22:39Z"}, "committer": {"name": "Pedro Alves", "email": "palves@gcc.gnu.org", "date": "2017-06-12T22:22:39Z"}, "message": "Finish implementing P0426R1 \"Constexpr for std::char_traits\" for C++17\n\nAs discussed in PR c++/80265 (\"__builtin_{memcmp,memchr,strlen} are\nnot usable in constexpr functions\"), use __builtin_constant_p to tell\nwhether we can defer to a constexpr algorithm.\n\nI used __always_inline__ just to be thorough.  It isn't really really\nnecessary as far as I could determine.\n\nChanges like these:\n\n\t if (__n == 0)\n\t   return 0;\n -\treturn wmemcmp(__s1, __s2, __n);\n +\telse\n +\t  return wmemcmp(__s1, __s2, __n);\n\nare necessary otherwise G++ complains that we're calling a\nnon-constexpr function, which looks like a a manifestation of PR67026\nto me.\n\nlibstdc++-v3:\n2017-06-12  Pedro Alves  <palves@redhat.com>\n\n\t* doc/xml/manual/status_cxx2017.xml: Update C++17 constexpr\n\tchar_traits status.\n\t* doc/html/*: Regenerate.\n\n\t* include/bits/char_traits.h (_GLIBCXX_ALWAYS_INLINE): Define if\n\tnot already defined.\n\t(__cpp_lib_constexpr_char_traits): Uncomment.\n\t(__constant_string_p, __constant_char_array_p): New.\n\t(std::char_traits<char>, std::char_traits<wchar_t>): Add\n\t_GLIBCXX17_CONSTEXPR on compare, length and find and use\n\t__constant_string_p, __constant_char_array_p and\n\t__builtin_constant_p to defer to __gnu_cxx::char_traits at compile\n\ttime.\n\n\t* testsuite/21_strings/char_traits/requirements/\n\tconstexpr_functions_c++17.cc: Uncomment\n\t__cpp_lib_constexpr_char_traits tests.  Uncomment\n\ttest_compare<char>, test_length<char>, test_find<char>,\n\ttest_compare<wchar_t>, test_length<wchar_t> and test_find<wchar_t>\n\tstatic_assert tests.\n\nFrom-SVN: r249137", "tree": {"sha": "8fe8182274a7fa45124f605da11d566d091e8373", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fe8182274a7fa45124f605da11d566d091e8373"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a/comments", "author": {"login": "palves", "id": 1202913, "node_id": "MDQ6VXNlcjEyMDI5MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/palves", "html_url": "https://github.com/palves", "followers_url": "https://api.github.com/users/palves/followers", "following_url": "https://api.github.com/users/palves/following{/other_user}", "gists_url": "https://api.github.com/users/palves/gists{/gist_id}", "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/palves/subscriptions", "organizations_url": "https://api.github.com/users/palves/orgs", "repos_url": "https://api.github.com/users/palves/repos", "events_url": "https://api.github.com/users/palves/events{/privacy}", "received_events_url": "https://api.github.com/users/palves/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07cfc2d75d85c5fc961bdd8434673f0a5f40587d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07cfc2d75d85c5fc961bdd8434673f0a5f40587d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07cfc2d75d85c5fc961bdd8434673f0a5f40587d"}], "stats": {"total": 145, "additions": 123, "deletions": 22}, "files": [{"sha": "05efaa06824a8457f358fabbb1752c62324d739a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a", "patch": "@@ -1,3 +1,26 @@\n+2017-06-12  Pedro Alves  <palves@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2017.xml: Update C++17 constexpr\n+\tchar_traits status.\n+\t* doc/html/*: Regenerate.\n+\n+\t* include/bits/char_traits.h (_GLIBCXX_ALWAYS_INLINE): Define if\n+\tnot already defined.\n+\t(__cpp_lib_constexpr_char_traits): Uncomment.\n+\t(__constant_string_p, __constant_char_array_p): New.\n+\t(std::char_traits<char>, std::char_traits<wchar_t>): Add\n+\t_GLIBCXX17_CONSTEXPR on compare, length and find and use\n+\t__constant_string_p, __constant_char_array_p and\n+\t__builtin_constant_p to defer to __gnu_cxx::char_traits at compile\n+\ttime.\n+\n+\t* testsuite/21_strings/char_traits/requirements/\n+\tconstexpr_functions_c++17.cc: Uncomment\n+\t__cpp_lib_constexpr_char_traits tests.  Uncomment\n+\ttest_compare<char>, test_length<char>, test_find<char>,\n+\ttest_compare<wchar_t>, test_length<wchar_t> and test_find<wchar_t>\n+\tstatic_assert tests.\n+\n 2017-06-12  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/stl_tree.h (_Rb_tree_impl()): Restore _Node_allocator"}, {"sha": "85e193daffa1a5a67ee7254541ad438e0f5b089a", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2017.xml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml?ref=b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a", "patch": "@@ -482,15 +482,14 @@ Feature-testing recommendations for C++</link>.\n     </row>\n \n     <row>\n-      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n       <entry> Constexpr for <code>std::char_traits</code> </entry>\n       <entry>\n \t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0426r1.html\">\n \tP0426R1\n \t</link>\n       </entry>\n-      <entry align=\"center\"> 7 (partial) </entry>\n-      <entry><code> ??? </code></entry>\n+      <entry align=\"center\"> 8 </entry>\n+      <entry><code> __cpp_lib_constexpr_char_traits >= 201611 </code></entry>\n     </row>\n \n     <row>"}, {"sha": "5ccb4396734a97c32c26db4da9860a05f08f320d", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 90, "deletions": 11, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a", "patch": "@@ -40,6 +40,10 @@\n #include <bits/postypes.h>      // For streampos\n #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.\n \n+#ifndef _GLIBCXX_ALWAYS_INLINE\n+#define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))\n+#endif\n+\n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -139,7 +143,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }\n     };\n \n-// #define __cpp_lib_constexpr_char_traits 201611\n+#define __cpp_lib_constexpr_char_traits 201611\n \n   template<typename _CharT>\n     _GLIBCXX14_CONSTEXPR int\n@@ -212,6 +216,42 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+#if __cplusplus > 201402\n+  /**\n+   *  @brief Determine whether the characters of a NULL-terminated\n+   *  string are known at compile time.\n+   *  @param  __s  The string.\n+   *\n+   *  Assumes that _CharT is a built-in character type.\n+   */\n+  template<typename _CharT>\n+    static _GLIBCXX_ALWAYS_INLINE constexpr bool\n+    __constant_string_p(const _CharT* __s)\n+    {\n+      while (__builtin_constant_p(*__s) && *__s)\n+\t__s++;\n+      return __builtin_constant_p(*__s);\n+    }\n+\n+  /**\n+   *  @brief Determine whether the characters of a character array are\n+   *  known at compile time.\n+   *  @param  __a  The character array.\n+   *  @param  __n  Number of characters.\n+   *\n+   *  Assumes that _CharT is a built-in character type.\n+   */\n+  template<typename _CharT>\n+    static _GLIBCXX_ALWAYS_INLINE constexpr bool\n+    __constant_char_array_p(const _CharT* __a, size_t __n)\n+    {\n+      size_t __i = 0;\n+      while (__builtin_constant_p(__a[__i]) && __i < __n)\n+\t__i++;\n+      return __i == __n;\n+    }\n+#endif\n+\n   // 21.1\n   /**\n    *  @brief  Basis for explicit traits specializations.\n@@ -256,21 +296,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t< static_cast<unsigned char>(__c2));\n       }\n \n-      static /* _GLIBCXX17_CONSTEXPR */ int\n+      static _GLIBCXX17_CONSTEXPR int\n       compare(const char_type* __s1, const char_type* __s2, size_t __n)\n       {\n+#if __cplusplus > 201402\n+\tif (__builtin_constant_p(__n)\n+\t    && __constant_char_array_p(__s1, __n)\n+\t    && __constant_char_array_p(__s2, __n))\n+\t  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);\n+#endif\n \tif (__n == 0)\n \t  return 0;\n \treturn __builtin_memcmp(__s1, __s2, __n);\n       }\n \n-      static /* _GLIBCXX17_CONSTEXPR */ size_t\n+      static _GLIBCXX17_CONSTEXPR size_t\n       length(const char_type* __s)\n-      { return __builtin_strlen(__s); }\n+      {\n+#if __cplusplus > 201402\n+\tif (__constant_string_p(__s))\n+\t  return __gnu_cxx::char_traits<char_type>::length(__s);\n+#endif\n+\treturn __builtin_strlen(__s);\n+      }\n \n-      static /* _GLIBCXX17_CONSTEXPR */ const char_type*\n+      static _GLIBCXX17_CONSTEXPR const char_type*\n       find(const char_type* __s, size_t __n, const char_type& __a)\n       {\n+#if __cplusplus > 201402\n+\tif (__builtin_constant_p(__n)\n+\t    && __builtin_constant_p(__a)\n+\t    && __constant_char_array_p(__s, __n))\n+\t  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);\n+#endif\n \tif (__n == 0)\n \t  return 0;\n \treturn static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));\n@@ -347,24 +405,45 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n       { return __c1 < __c2; }\n \n-      static /* _GLIBCXX17_CONSTEXPR */ int\n+      static _GLIBCXX17_CONSTEXPR int\n       compare(const char_type* __s1, const char_type* __s2, size_t __n)\n       {\n+#if __cplusplus > 201402\n+\tif (__builtin_constant_p(__n)\n+\t    && __constant_char_array_p(__s1, __n)\n+\t    && __constant_char_array_p(__s2, __n))\n+\t  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);\n+#endif\n \tif (__n == 0)\n \t  return 0;\n-\treturn wmemcmp(__s1, __s2, __n);\n+\telse\n+\t  return wmemcmp(__s1, __s2, __n);\n       }\n \n-      static /* _GLIBCXX17_CONSTEXPR */ size_t\n+      static _GLIBCXX17_CONSTEXPR size_t\n       length(const char_type* __s)\n-      { return wcslen(__s); }\n+      {\n+#if __cplusplus > 201402\n+\tif (__constant_string_p(__s))\n+\t  return __gnu_cxx::char_traits<char_type>::length(__s);\n+\telse\n+#endif\n+\t  return wcslen(__s);\n+      }\n \n-      static /* _GLIBCXX17_CONSTEXPR */ const char_type*\n+      static _GLIBCXX17_CONSTEXPR const char_type*\n       find(const char_type* __s, size_t __n, const char_type& __a)\n       {\n+#if __cplusplus > 201402\n+\tif (__builtin_constant_p(__n)\n+\t    && __builtin_constant_p(__a)\n+\t    && __constant_char_array_p(__s, __n))\n+\t  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);\n+#endif\n \tif (__n == 0)\n \t  return 0;\n-\treturn wmemchr(__s, __a, __n);\n+\telse\n+\t  return wmemchr(__s, __a, __n);\n       }\n \n       static char_type*"}, {"sha": "efd280fea231494c0c97774c3db28e6056190226", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/constexpr_functions_c++17.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B17.cc?ref=b51483f48f3cc67cf4b508bdd9c4b6a47b44c53a", "patch": "@@ -74,20 +74,20 @@ template<typename CT>\n   }\n \n #ifndef __cpp_lib_constexpr_char_traits\n-// #error Feature-test macro for constexpr char_traits is missing\n+# error Feature-test macro for constexpr char_traits is missing\n #elif __cpp_lib_constexpr_char_traits != 201611\n-// #error Feature-test macro for constexpr char_traits has the wrong value\n+# error Feature-test macro for constexpr char_traits has the wrong value\n #endif\n \n static_assert( test_assign<std::char_traits<char>>() );\n-// static_assert( test_compare<std::char_traits<char>>() );\n-// static_assert( test_length<std::char_traits<char>>() );\n-// static_assert( test_find<std::char_traits<char>>() );\n+static_assert( test_compare<std::char_traits<char>>() );\n+static_assert( test_length<std::char_traits<char>>() );\n+static_assert( test_find<std::char_traits<char>>() );\n #ifdef _GLIBCXX_USE_WCHAR_T\n static_assert( test_assign<std::char_traits<wchar_t>>() );\n-// static_assert( test_compare<std::char_traits<wchar_t>>() );\n-// static_assert( test_length<std::char_traits<wchar_t>>() );\n-// static_assert( test_find<std::char_traits<wchar_t>>() );\n+static_assert( test_compare<std::char_traits<wchar_t>>() );\n+static_assert( test_length<std::char_traits<wchar_t>>() );\n+static_assert( test_find<std::char_traits<wchar_t>>() );\n #endif\n static_assert( test_assign<std::char_traits<char16_t>>() );\n static_assert( test_compare<std::char_traits<char16_t>>() );"}]}