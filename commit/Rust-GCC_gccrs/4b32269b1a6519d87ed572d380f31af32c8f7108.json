{"sha": "4b32269b1a6519d87ed572d380f31af32c8f7108", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIzMjI2OWIxYTY1MTlkODdlZDU3MmQzODBmMzFhZjMyYzhmNzEwOA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-10-26T18:06:01Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-10-26T18:06:01Z"}, "message": "mmix.h (LIBCALL_VALUE): Use MMIX_RETURN_VALUE_REGNUM, not MMIX_OUTGOING_RETURN_VALUE_REGNUM.\n\n\t* config/mmix/mmix.h (LIBCALL_VALUE): Use\n\tMMIX_RETURN_VALUE_REGNUM, not MMIX_OUTGOING_RETURN_VALUE_REGNUM.\n\t(FUNCTION_VALUE_REGNO_P): Similar, but move code to...\n\t* config/mmix/mmix.c (mmix_function_value_regno_p): New.\n\t* config/mmix/mmix-protos.h: Remove needless ifdefs on TREE_CODE\n\tand RTX_CODE.\n\t(mmix_function_value_regno_p): Declare.\n\nFrom-SVN: r58563", "tree": {"sha": "b44a2608798d0d7b42266223125d5257dfa6b184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b44a2608798d0d7b42266223125d5257dfa6b184"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b32269b1a6519d87ed572d380f31af32c8f7108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b32269b1a6519d87ed572d380f31af32c8f7108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b32269b1a6519d87ed572d380f31af32c8f7108", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b32269b1a6519d87ed572d380f31af32c8f7108/comments", "author": null, "committer": null, "parents": [{"sha": "600522f8a2a7313259d95ad8f243b374be069564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/600522f8a2a7313259d95ad8f243b374be069564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/600522f8a2a7313259d95ad8f243b374be069564"}], "stats": {"total": 54, "additions": 30, "deletions": 24}, "files": [{"sha": "b57089dc209ef1640da1930ee16719ea6d1f98de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b32269b1a6519d87ed572d380f31af32c8f7108/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b32269b1a6519d87ed572d380f31af32c8f7108/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b32269b1a6519d87ed572d380f31af32c8f7108", "patch": "@@ -1,5 +1,13 @@\n 2002-10-26  Hans-Peter Nilsson  <hp@bitrange.com>\n \n+\t* config/mmix/mmix.h (LIBCALL_VALUE): Use\n+\tMMIX_RETURN_VALUE_REGNUM, not MMIX_OUTGOING_RETURN_VALUE_REGNUM.\n+\t(FUNCTION_VALUE_REGNO_P): Similar, but move code to...\n+\t* config/mmix/mmix.c (mmix_function_value_regno_p): New.\n+\t* config/mmix/mmix-protos.h: Remove needless ifdefs on TREE_CODE\n+\tand RTX_CODE.\n+\t(mmix_function_value_regno_p): Declare.\n+\n \t* config/mmix/mmix.md (\"fixuns_truncdfdi2\"): Replace unsigned_fix,\n \tinvalid for floating point mode result, with fix.\n "}, {"sha": "496752c81d4bdac929e4f48a66d53f1a80ccd95a", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b32269b1a6519d87ed572d380f31af32c8f7108/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b32269b1a6519d87ed572d380f31af32c8f7108/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=4b32269b1a6519d87ed572d380f31af32c8f7108", "patch": "@@ -57,16 +57,11 @@ extern void mmix_conditional_register_usage PARAMS ((void));\n extern int mmix_local_regno PARAMS ((int));\n extern int mmix_dbx_register_number PARAMS ((int));\n extern int mmix_use_simple_return PARAMS ((void));\n-\n-/* Things that need rtl.h, tree.h or real.h included, or in combination.  */\n-\n-/* Need tree.h */\n-#ifdef TREE_CODE\n-\n extern void mmix_make_decl_one_only PARAMS ((tree));\n extern int mmix_function_arg_pass_by_reference\n   PARAMS ((const CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n extern rtx mmix_function_outgoing_value PARAMS ((tree, tree));\n+extern int mmix_function_value_regno_p PARAMS ((int));\n extern int mmix_data_alignment PARAMS ((tree, int));\n extern int mmix_constant_alignment PARAMS ((tree, int));\n extern int mmix_local_alignment PARAMS ((tree, int));\n@@ -80,17 +75,9 @@ extern void mmix_asm_output_aligned_local\n   PARAMS ((FILE *, const char *, int, int));\n extern void mmix_asm_declare_register_global\n   PARAMS ((FILE *, tree, int, const char *));\n-\n-/* Need tree.h and rtl.h */\n-# ifdef RTX_CODE\n extern rtx mmix_function_arg\n   PARAMS ((const CUMULATIVE_ARGS *, enum machine_mode, tree, int, int));\n extern rtx mmix_expand_builtin_va_arg PARAMS ((tree, tree));\n-# endif /* RTX_CODE */\n-#endif /* TREE_CODE */\n-\n-/* Need rtl.h */\n-#ifdef RTX_CODE\n extern void mmix_asm_output_addr_diff_elt PARAMS ((FILE *, rtx, int, int));\n extern void mmix_asm_output_addr_vec_elt PARAMS ((FILE *, int));\n extern enum reg_class mmix_preferred_reload_class\n@@ -110,24 +97,26 @@ extern void mmix_initialize_trampoline PARAMS ((rtx, rtx, rtx));\n extern int mmix_constant_address_p PARAMS ((rtx));\n extern int mmix_legitimate_address PARAMS ((enum machine_mode, rtx, int));\n extern int mmix_legitimate_constant_p PARAMS ((rtx));\n-extern enum machine_mode mmix_select_cc_mode PARAMS ((RTX_CODE, rtx, rtx));\n-extern void mmix_canonicalize_comparison PARAMS ((RTX_CODE *, rtx *, rtx *));\n-extern int mmix_rtx_cost_recalculated\n-  PARAMS ((rtx, RTX_CODE, RTX_CODE, int *));\n extern int mmix_address_cost PARAMS ((rtx));\n extern void mmix_print_operand PARAMS ((FILE *, rtx, int));\n extern void mmix_print_operand_address PARAMS ((FILE *, rtx));\n-extern int mmix_valid_comparison PARAMS ((RTX_CODE, enum machine_mode, rtx));\n-extern rtx mmix_gen_compare_reg PARAMS ((enum rtx_code, rtx, rtx));\n extern void mmix_machine_dependent_reorg PARAMS ((rtx));\n extern void mmix_expand_prologue PARAMS ((void));\n extern void mmix_expand_epilogue PARAMS ((void));\n extern rtx mmix_get_hard_reg_initial_val PARAMS ((enum machine_mode, int));\n-#endif /* RTX_CODE */\n-\n extern int mmix_asm_preferred_eh_data_format PARAMS ((int, int));\n extern void mmix_setup_frame_addresses PARAMS ((void));\n \n+#ifdef RTX_CODE\n+/* Needs to be ifdef:d for sake of enum rtx_code.  */\n+extern enum machine_mode mmix_select_cc_mode PARAMS ((enum rtx_code, rtx, rtx));\n+extern void mmix_canonicalize_comparison PARAMS ((enum rtx_code *, rtx *, rtx *));\n+extern int mmix_rtx_cost_recalculated\n+  PARAMS ((rtx, enum rtx_code, enum rtx_code, int *));\n+extern int mmix_valid_comparison PARAMS ((enum rtx_code, enum machine_mode, rtx));\n+extern rtx mmix_gen_compare_reg PARAMS ((enum rtx_code, rtx, rtx));\n+#endif\n+\n /*\n  * Local variables:\n  * eval: (c-set-style \"gnu\")"}, {"sha": "8aa1d3a2c9dbb32408f3fea45c7bf952384bc3a6", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b32269b1a6519d87ed572d380f31af32c8f7108/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b32269b1a6519d87ed572d380f31af32c8f7108/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=4b32269b1a6519d87ed572d380f31af32c8f7108", "patch": "@@ -660,6 +660,15 @@ mmix_function_outgoing_value (valtype, func)\n   return gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (nregs, vec));\n }\n \n+/* FUNCTION_VALUE_REGNO_P.  */\n+\n+int\n+mmix_function_value_regno_p (regno)\n+     int regno;\n+{\n+  return regno == MMIX_RETURN_VALUE_REGNUM;\n+}\n+\n /* EH_RETURN_DATA_REGNO. */\n \n int"}, {"sha": "cfc6d93aa2ecf90ea146f293084fcd324c29d22e", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b32269b1a6519d87ed572d380f31af32c8f7108/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b32269b1a6519d87ed572d380f31af32c8f7108/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=4b32269b1a6519d87ed572d380f31af32c8f7108", "patch": "@@ -768,10 +768,10 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n  mmix_function_outgoing_value (VALTYPE, FUNC)\n \n #define LIBCALL_VALUE(MODE) \\\n- gen_rtx_REG (MODE, MMIX_OUTGOING_RETURN_VALUE_REGNUM)\n+ gen_rtx_REG (MODE, MMIX_RETURN_VALUE_REGNUM)\n \n #define FUNCTION_VALUE_REGNO_P(REGNO) \\\n- ((REGNO) == MMIX_OUTGOING_RETURN_VALUE_REGNUM)\n+ mmix_function_value_regno_p (REGNO)\n \n \n /* Node: Aggregate Return */"}]}