{"sha": "dc2cf706b84723741ca863f04fcfde3834e60747", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMyY2Y3MDZiODQ3MjM3NDFjYTg2M2YwNGZjZmRlMzgzNGU2MDc0Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-06-18T18:07:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-06-18T18:07:45Z"}, "message": "re PR libstdc++/32618 (std::vector calls uneccessary constructors instead of inplace construction of first object)\n\n2010-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/32618\n\t* include/bits/stl_list.h (vector<>::_M_default_initialize,\n\t_M_default_append): Declare.\n\t(list<>::list(size_type), resize(size_type)): Add in C++0x mode,\n\tuse the latter.\n\t* include/bits/list.tcc (list<>::resize, _M_default_append): Define.\n\t* include/bits/stl_vector.h (vector<>::_M_default_initialize,\n\t_M_default_append): Declare.\n\t(vector<>::vector(size_type), resize(size_type)): Add in C++0x mode,\n\tuse the latter.\n\t* include/bits/vector.tcc (vector<>::_M_default_append): Define.\n\t* include/bits/stl_deque.h (deque<>::_M_default_initialize,\n\t_M_default_append): Declare.\n\t(deque<>::deque(size_type), resize(size_type)): Add in C++0x mode,\n\tuse the latter.\n\t* include/bits/deque.tcc (deque<>::_M_default_append): Define.\n\t* include/debug/vector: Update.\n\t* include/debug/deque: Likewise.\n\t* include/debug/list: Likewise.\n\t* include/profile/vector: Likewise.\n\t* include/profile/deque: Likewise.\n\t* include/profile/list: Likewise.\n\t* include/bits/forward_list.h (_M_default_initialize,\n\t_M_default_insert_after): Declare.\n\t(forward_list<>::forward_list(size_type), resize(size_type)): Fix,\n\tuse the latter.\n\t* include/bits/forward_list.tcc (forward_list<>::_M_default_append,\n\t_M_default_insert_after): Define.\n\t* testsuite/util/testsuite_api.h (NonCopyConstructible): Add.\n\t* testsuite/23_containers/forward_list/modifiers/6.cc: Move to...\n\t* testsuite/23_containers/forward_list/capacity/resize_size.cc:\n\t... here.\n\t* testsuite/23_containers/forward_list/cons/10.cc: Move to...\n\t* testsuite/23_containers/forward_list/cons/cons_size.cc: ... here.\n\t* testsuite/23_containers/vector/resize/1.cc: Move to...\n\t* testsuite/23_containers/vector/capacity/resize/1.cc: ... here.\t\n\t* testsuite/23_containers/vector/resize/moveable.cc: Move to...\n\t* testsuite/23_containers/vector/resize/capacity/moveable.cc: ... here.\n\t* testsuite/23_containers/vector/cons/cons_size.cc: New.\n\t* testsuite/23_containers/vector/capacity/resize/resize_size.cc:\n\tLikewise.\n\t* testsuite/23_containers/deque/cons/cons_size.cc: Likewise.\n\t* testsuite/23_containers/deque/capacity/resize_size.cc: Likewise.\n\t* testsuite/23_containers/list/cons/cons_size.cc: Likewise.\n\t* testsuite/23_containers/list/capacity/resize_size.cc: Likewise.\n\t* testsuite/23_containers/vector/capacity/resize/moveable.cc: Adjust.\n\t* testsuite/23_containers/deque/capacity/moveable.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tassign_neg.cc: Adjust dg-error line numbers.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tassign_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc: \n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tassign_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc: \n\tLikewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc: \n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc: \n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nFrom-SVN: r161009", "tree": {"sha": "53ecf0e69523a1a314fa758b4601dbfcee3327ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53ecf0e69523a1a314fa758b4601dbfcee3327ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc2cf706b84723741ca863f04fcfde3834e60747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2cf706b84723741ca863f04fcfde3834e60747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc2cf706b84723741ca863f04fcfde3834e60747", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2cf706b84723741ca863f04fcfde3834e60747/comments", "author": null, "committer": null, "parents": [{"sha": "fae76410f42da1d88abff8a64e5b0e0826f86bbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae76410f42da1d88abff8a64e5b0e0826f86bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae76410f42da1d88abff8a64e5b0e0826f86bbd"}], "stats": {"total": 1254, "additions": 1112, "deletions": 142}, "files": [{"sha": "58410cca40c33950fd312c5be8867bb048949d67", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -1,3 +1,85 @@\n+2010-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/32618\n+\t* include/bits/stl_list.h (vector<>::_M_default_initialize,\n+\t_M_default_append): Declare.\n+\t(list<>::list(size_type), resize(size_type)): Add in C++0x mode,\n+\tuse the latter.\n+\t* include/bits/list.tcc (list<>::resize, _M_default_append): Define.\n+\t* include/bits/stl_vector.h (vector<>::_M_default_initialize,\n+\t_M_default_append): Declare.\n+\t(vector<>::vector(size_type), resize(size_type)): Add in C++0x mode,\n+\tuse the latter.\n+\t* include/bits/vector.tcc (vector<>::_M_default_append): Define.\n+\t* include/bits/stl_deque.h (deque<>::_M_default_initialize,\n+\t_M_default_append): Declare.\n+\t(deque<>::deque(size_type), resize(size_type)): Add in C++0x mode,\n+\tuse the latter.\n+\t* include/bits/deque.tcc (deque<>::_M_default_append): Define.\n+\t* include/debug/vector: Update.\n+\t* include/debug/deque: Likewise.\n+\t* include/debug/list: Likewise.\n+\t* include/profile/vector: Likewise.\n+\t* include/profile/deque: Likewise.\n+\t* include/profile/list: Likewise.\n+\t* include/bits/forward_list.h (_M_default_initialize,\n+\t_M_default_insert_after): Declare.\n+\t(forward_list<>::forward_list(size_type), resize(size_type)): Fix,\n+\tuse the latter.\n+\t* include/bits/forward_list.tcc (forward_list<>::_M_default_append,\n+\t_M_default_insert_after): Define.\n+\t* testsuite/util/testsuite_api.h (NonCopyConstructible): Add.\n+\t* testsuite/23_containers/forward_list/modifiers/6.cc: Move to...\n+\t* testsuite/23_containers/forward_list/capacity/resize_size.cc:\n+\t... here.\n+\t* testsuite/23_containers/forward_list/cons/10.cc: Move to...\n+\t* testsuite/23_containers/forward_list/cons/cons_size.cc: ... here.\n+\t* testsuite/23_containers/vector/resize/1.cc: Move to...\n+\t* testsuite/23_containers/vector/capacity/resize/1.cc: ... here.\n+\t* testsuite/23_containers/vector/resize/moveable.cc: Move to...\n+\t* testsuite/23_containers/vector/resize/capacity/moveable.cc: ... here.\n+\t* testsuite/23_containers/vector/cons/cons_size.cc: New.\n+\t* testsuite/23_containers/vector/capacity/resize/resize_size.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/deque/cons/cons_size.cc: Likewise.\n+\t* testsuite/23_containers/deque/capacity/resize_size.cc: Likewise.\n+\t* testsuite/23_containers/list/cons/cons_size.cc: Likewise.\n+\t* testsuite/23_containers/list/capacity/resize_size.cc: Likewise.\n+\t* testsuite/23_containers/vector/capacity/resize/moveable.cc: Adjust.\n+\t* testsuite/23_containers/deque/capacity/moveable.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tassign_neg.cc: Adjust dg-error line numbers.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tassign_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tassign_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2010-06-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_uninitialized.h (__uninitialized_default,"}, {"sha": "d8c2787064727eb44f304990dee845a93bfd02db", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -1,6 +1,7 @@\n // Deque implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n+// 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -59,6 +60,33 @@\n \n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template <typename _Tp, typename _Alloc>\n+    void\n+    deque<_Tp, _Alloc>::\n+    _M_default_initialize()\n+    {\n+      _Map_pointer __cur;\n+      __try\n+        {\n+          for (__cur = this->_M_impl._M_start._M_node;\n+\t       __cur < this->_M_impl._M_finish._M_node;\n+\t       ++__cur)\n+            std::__uninitialized_default_a(*__cur, *__cur + _S_buffer_size(),\n+\t\t\t\t\t   _M_get_Tp_allocator());\n+          std::__uninitialized_default_a(this->_M_impl._M_finish._M_first,\n+\t\t\t\t\t this->_M_impl._M_finish._M_cur,\n+\t\t\t\t\t _M_get_Tp_allocator());\n+        }\n+      __catch(...)\n+        {\n+          std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),\n+\t\t\t_M_get_Tp_allocator());\n+          __throw_exception_again;\n+        }\n+    }\n+#endif\n+\n   template <typename _Tp, typename _Alloc>\n     deque<_Tp, _Alloc>&\n     deque<_Tp, _Alloc>::\n@@ -271,6 +299,32 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n         _M_insert_aux(__pos, __n, __x);\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template <typename _Tp, typename _Alloc>\n+    void\n+    deque<_Tp, _Alloc>::\n+    _M_default_append(size_type __n)\n+    {\n+      if (__n)\n+\t{\n+\t  iterator __new_finish = _M_reserve_elements_at_back(__n);\n+\t  __try\n+\t    {\n+\t      std::__uninitialized_default_a(this->_M_impl._M_finish,\n+\t\t\t\t\t     __new_finish,\n+\t\t\t\t\t     _M_get_Tp_allocator());\n+\t      this->_M_impl._M_finish = __new_finish;\n+\t    }\n+\t  __catch(...)\n+\t    {\n+\t      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,\n+\t\t\t       __new_finish._M_node + 1);\n+\t      __throw_exception_again;\n+\t    }\n+\t}\n+    }\n+#endif\n+\n   template <typename _Tp, typename _Alloc>\n     void\n     deque<_Tp, _Alloc>::"}, {"sha": "3708a62c37d3e441a428f2faead64638059a63f6", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -463,7 +463,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  constructed elements.\n        */\n       explicit\n-      forward_list(size_type __n);\n+      forward_list(size_type __n)\n+      : _Base()\n+      { _M_default_initialize(__n); }\n \n       /**\n        *  @brief  Creates a %forward_list with copies of an exemplar element.\n@@ -1209,6 +1211,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // Called by splice_after and insert_after.\n       iterator\n       _M_splice_after(const_iterator __pos, forward_list&& __list);\n+\n+      // Called by forward_list(n).\n+      void\n+      _M_default_initialize(size_type __n);\n+\n+      // Called by resize(sz).\n+      void\n+      _M_default_insert_after(const_iterator __pos, size_type __n);\n     };\n \n   /**"}, {"sha": "a3719a8698d0a63afc06597b4c07cca6d68a400e", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -114,20 +114,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _M_fill_initialize(size_type __n, const value_type& __value)\n     {\n       _Node_base* __to = &this->_M_impl._M_head;\n-      for (; __n > 0; --__n)\n+      for (; __n; --__n)\n         {\n           __to->_M_next = this->_M_create_node(__value);\n           __to = __to->_M_next;\n         }\n     }\n \n   template<typename _Tp, typename _Alloc>\n+    void\n     forward_list<_Tp, _Alloc>::\n-    forward_list(size_type __n)\n-    : _Base()\n+    _M_default_initialize(size_type __n)\n     {\n       _Node_base* __to = &this->_M_impl._M_head;\n-      for (; __n > 0; --__n)\n+      for (; __n; --__n)\n         {\n           __to->_M_next = this->_M_create_node();\n           __to = __to->_M_next;\n@@ -161,6 +161,24 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return *this;\n     }\n \n+  template<typename _Tp, typename _Alloc>\n+    void\n+    forward_list<_Tp, _Alloc>::\n+    _M_default_insert_after(const_iterator __pos, size_type __n)\n+    {\n+      const_iterator __saved_pos = __pos;\n+      __try\n+\t{\n+\t  for (; __n; --__n)\n+\t    __pos = emplace_after(__pos);\n+\t}\n+      __catch(...)\n+\t{\n+\t  erase_after(__saved_pos, ++__pos);\n+\t  __throw_exception_again;\n+\t}\n+    }\n+\n   template<typename _Tp, typename _Alloc>\n     void\n     forward_list<_Tp, _Alloc>::\n@@ -177,10 +195,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__len == __sz)\n         erase_after(__k, end());\n       else\n-\t{\n-\t  forward_list __tmp(__sz - __len);\n-\t  splice_after(__k, std::move(__tmp));\n-\t}\n+\t_M_default_insert_after(__k, __sz - __len);\n     }\n \n   template<typename _Tp, typename _Alloc>"}, {"sha": "3446c42a85b2e476f1103ce53d488f1f48b13496", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -112,6 +112,56 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       return __ret;\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, typename _Alloc>\n+    void\n+    list<_Tp, _Alloc>::\n+    _M_default_append(size_type __n)\n+    {\n+      size_type __i = 0;\n+      __try\n+\t{\n+\t  for (; __i < __n; ++__i)\n+\t    emplace_back();\n+\t}\n+      __catch(...)\n+\t{\n+\t  for (; __i; --__i)\n+\t    pop_back();\n+\t  __throw_exception_again;\n+\t}\n+    }\n+\n+  template<typename _Tp, typename _Alloc>\n+    void\n+    list<_Tp, _Alloc>::\n+    resize(size_type __new_size)\n+    {\n+      iterator __i = begin();\n+      size_type __len = 0;\n+      for (; __i != end() && __len < __new_size; ++__i, ++__len)\n+        ;\n+      if (__len == __new_size)\n+        erase(__i, end());\n+      else                          // __i == end()\n+\t_M_default_append(__new_size - __len);\n+    }\n+\n+  template<typename _Tp, typename _Alloc>\n+    void\n+    list<_Tp, _Alloc>::\n+    resize(size_type __new_size, const value_type& __x)\n+    {\n+      iterator __i = begin();\n+      size_type __len = 0;\n+      for (; __i != end() && __len < __new_size; ++__i, ++__len)\n+        ;\n+      if (__len == __new_size)\n+        erase(__i, end());\n+      else                          // __i == end()\n+        insert(end(), __new_size - __len, __x);\n+    }\n+#else\n   template<typename _Tp, typename _Alloc>\n     void\n     list<_Tp, _Alloc>::\n@@ -126,6 +176,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       else                          // __i == end()\n         insert(end(), __new_size - __len, __x);\n     }\n+#endif\n \n   template<typename _Tp, typename _Alloc>\n     list<_Tp, _Alloc>&"}, {"sha": "d3cd73997e9eedfeaedce47540b909a5680b068b", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 96, "deletions": 8, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -449,6 +449,10 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       : _M_impl()\n       { _M_initialize_map(0); }\n \n+      _Deque_base(size_t __num_elements)\n+      : _M_impl()\n+      { _M_initialize_map(__num_elements); }\n+\n       _Deque_base(const allocator_type& __a, size_t __num_elements)\n       : _M_impl(__a)\n       { _M_initialize_map(__num_elements); }\n@@ -773,6 +777,32 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       deque(const allocator_type& __a)\n       : _Base(__a, 0) { }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Creates a %deque with default constructed elements.\n+       *  @param  n  The number of elements to initially create.\n+       *\n+       *  This constructor fills the %deque with @a n default\n+       *  constructed elements.\n+       */\n+      explicit\n+      deque(size_type __n)\n+      : _Base(__n)\n+      { _M_default_initialize(); }\n+\n+      /**\n+       *  @brief  Creates a %deque with copies of an exemplar element.\n+       *  @param  n  The number of elements to initially create.\n+       *  @param  value  An element to copy.\n+       *  @param  a  An allocator.\n+       *\n+       *  This constructor fills the %deque with @a n copies of @a value.\n+       */\n+      deque(size_type __n, const value_type& __value,\n+\t    const allocator_type& __a = allocator_type())\n+      : _Base(__a, __n)\n+      { _M_fill_initialize(__value); }\n+#else\n       /**\n        *  @brief  Creates a %deque with copies of an exemplar element.\n        *  @param  n  The number of elements to initially create.\n@@ -786,6 +816,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t    const allocator_type& __a = allocator_type())\n       : _Base(__a, __n)\n       { _M_fill_initialize(__value); }\n+#endif\n \n       /**\n        *  @brief  %Deque copy constructor.\n@@ -824,11 +855,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        */\n       deque(initializer_list<value_type> __l,\n \t    const allocator_type& __a = allocator_type())\n-\t: _Base(__a)\n-        {\n-\t  _M_range_initialize(__l.begin(), __l.end(),\n-\t\t\t      random_access_iterator_tag());\n-\t}\n+      : _Base(__a)\n+      {\n+\t_M_range_initialize(__l.begin(), __l.end(),\n+\t\t\t    random_access_iterator_tag());\n+      }\n #endif\n \n       /**\n@@ -1086,6 +1117,49 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       max_size() const\n       { return _M_get_Tp_allocator().max_size(); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Resizes the %deque to the specified number of elements.\n+       *  @param  new_size  Number of elements the %deque should contain.\n+       *\n+       *  This function will %resize the %deque to the specified\n+       *  number of elements.  If the number is smaller than the\n+       *  %deque's current size the %deque is truncated, otherwise\n+       *  default constructed elements are appended.\n+       */\n+      void\n+      resize(size_type __new_size)\n+      {\n+\tconst size_type __len = size();\n+\tif (__new_size > __len)\n+\t  _M_default_append(__new_size - __len);\n+\telse if (__new_size < __len)\n+\t  _M_erase_at_end(this->_M_impl._M_start\n+\t\t\t  + difference_type(__new_size));\n+      }\n+\n+      /**\n+       *  @brief  Resizes the %deque to the specified number of elements.\n+       *  @param  new_size  Number of elements the %deque should contain.\n+       *  @param  x  Data with which new elements should be populated.\n+       *\n+       *  This function will %resize the %deque to the specified\n+       *  number of elements.  If the number is smaller than the\n+       *  %deque's current size the %deque is truncated, otherwise the\n+       *  %deque is extended and new elements are populated with given\n+       *  data.\n+       */\n+      void\n+      resize(size_type __new_size, const value_type& __x)\n+      {\n+\tconst size_type __len = size();\n+\tif (__new_size > __len)\n+\t  insert(this->_M_impl._M_finish, __new_size - __len, __x);\n+\telse if (__new_size < __len)\n+\t  _M_erase_at_end(this->_M_impl._M_start\n+\t\t\t  + difference_type(__new_size));\n+      }\n+#else\n       /**\n        *  @brief  Resizes the %deque to the specified number of elements.\n        *  @param  new_size  Number of elements the %deque should contain.\n@@ -1101,11 +1175,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       resize(size_type __new_size, value_type __x = value_type())\n       {\n \tconst size_type __len = size();\n-\tif (__new_size < __len)\n-\t  _M_erase_at_end(this->_M_impl._M_start + difference_type(__new_size));\n-\telse\n+\tif (__new_size > __len)\n \t  insert(this->_M_impl._M_finish, __new_size - __len, __x);\n+\telse if (__new_size < __len)\n+\t  _M_erase_at_end(this->_M_impl._M_start\n+\t\t\t  + difference_type(__new_size));\n       }\n+#endif\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       /**  A non-binding request to reduce memory use.  */\n@@ -1564,6 +1640,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       void\n       _M_fill_initialize(const value_type& __value);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      // called by deque(n).\n+      void\n+      _M_default_initialize();\n+#endif\n+\n       // Internal assign functions follow.  The *_aux functions do the actual\n       // assignment work for the range versions.\n \n@@ -1752,6 +1834,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \tthis->_M_impl._M_finish = __pos;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      // Called by resize(sz).\n+      void\n+      _M_default_append(size_type __n);\n+#endif\n+\n       //@{\n       /// Memory-handling helpers for the previous internal insert functions.\n       iterator"}, {"sha": "d6f9255752fe13fde154c476d07870392872ec25", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -508,6 +508,32 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       list(const allocator_type& __a)\n       : _Base(__a) { }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Creates a %list with default constructed elements.\n+       *  @param  n  The number of elements to initially create.\n+       *\n+       *  This constructor fills the %list with @a n default\n+       *  constructed elements.\n+       */\n+      explicit\n+      list(size_type __n)\n+      : _Base()\n+      { _M_default_initialize(__n); }\n+\n+      /**\n+       *  @brief  Creates a %list with copies of an exemplar element.\n+       *  @param  n  The number of elements to initially create.\n+       *  @param  value  An element to copy.\n+       *  @param  a  An allocator object.\n+       *\n+       *  This constructor fills the %list with @a n copies of @a value.\n+       */\n+      list(size_type __n, const value_type& __value,\n+\t   const allocator_type& __a = allocator_type())\n+      : _Base(__a)\n+      { _M_fill_initialize(__n, __value); }\n+#else\n       /**\n        *  @brief  Creates a %list with copies of an exemplar element.\n        *  @param  n  The number of elements to initially create.\n@@ -521,6 +547,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t   const allocator_type& __a = allocator_type())\n       : _Base(__a)\n       { _M_fill_initialize(__n, __value); }\n+#endif\n \n       /**\n        *  @brief  %List copy constructor.\n@@ -811,6 +838,32 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       max_size() const\n       { return _M_get_Node_allocator().max_size(); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief Resizes the %list to the specified number of elements.\n+       *  @param new_size Number of elements the %list should contain.\n+       *\n+       *  This function will %resize the %list to the specified number\n+       *  of elements.  If the number is smaller than the %list's\n+       *  current size the %list is truncated, otherwise default\n+       *  constructed elements are appended.\n+       */\n+      void\n+      resize(size_type __new_size);\n+\n+      /**\n+       *  @brief Resizes the %list to the specified number of elements.\n+       *  @param new_size Number of elements the %list should contain.\n+       *  @param x Data with which new elements should be populated.\n+       *\n+       *  This function will %resize the %list to the specified number\n+       *  of elements.  If the number is smaller than the %list's\n+       *  current size the %list is truncated, otherwise the %list is\n+       *  extended and new elements are populated with given data.\n+       */\n+      void\n+      resize(size_type __new_size, const value_type& __x);\n+#else\n       /**\n        *  @brief Resizes the %list to the specified number of elements.\n        *  @param new_size Number of elements the %list should contain.\n@@ -823,6 +876,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        */\n       void\n       resize(size_type __new_size, value_type __x = value_type());\n+#endif\n \n       // element access\n       /**\n@@ -1394,10 +1448,23 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       void\n       _M_fill_initialize(size_type __n, const value_type& __x)\n       {\n-\tfor (; __n > 0; --__n)\n+\tfor (; __n; --__n)\n \t  push_back(__x);\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      // Called by list(n).\n+      void\n+      _M_default_initialize(size_type __n)\n+      {\n+\tfor (; __n; --__n)\n+\t  emplace_back();\n+      }\n+\n+      // Called by resize(sz).\n+      void\n+      _M_default_append(size_type __n);\n+#endif\n \n       // Internal assign functions follow.\n "}, {"sha": "d51578c9e059fe3986c441e2c0a005af7a79acef", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 94, "deletions": 3, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -107,6 +107,14 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       _Vector_base(const allocator_type& __a)\n       : _M_impl(__a) { }\n \n+      _Vector_base(size_t __n)\n+      : _M_impl()\n+      {\n+\tthis->_M_impl._M_start = this->_M_allocate(__n);\n+\tthis->_M_impl._M_finish = this->_M_impl._M_start;\n+\tthis->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;\n+      }\n+\n       _Vector_base(size_t __n, const allocator_type& __a)\n       : _M_impl(__a)\n       {\n@@ -215,6 +223,32 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       vector(const allocator_type& __a)\n       : _Base(__a) { }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Creates a %vector with default constructed elements.\n+       *  @param  n  The number of elements to initially create.\n+       *\n+       *  This constructor fills the %vector with @a n default\n+       *  constructed elements.\n+       */\n+      explicit\n+      vector(size_type __n)\n+      : _Base(__n)\n+      { _M_default_initialize(__n); }\n+\n+      /**\n+       *  @brief  Creates a %vector with copies of an exemplar element.\n+       *  @param  n  The number of elements to initially create.\n+       *  @param  value  An element to copy.\n+       *  @param  a  An allocator.\n+       *\n+       *  This constructor fills the %vector with @a n copies of @a value.\n+       */\n+      vector(size_type __n, const value_type& __value,\n+\t     const allocator_type& __a = allocator_type())\n+      : _Base(__n, __a)\n+      { _M_fill_initialize(__n, __value); }\n+#else\n       /**\n        *  @brief  Creates a %vector with copies of an exemplar element.\n        *  @param  n  The number of elements to initially create.\n@@ -228,6 +262,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t     const allocator_type& __a = allocator_type())\n       : _Base(__n, __a)\n       { _M_fill_initialize(__n, __value); }\n+#endif\n \n       /**\n        *  @brief  %Vector copy constructor.\n@@ -538,6 +573,25 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       max_size() const\n       { return _M_get_Tp_allocator().max_size(); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Resizes the %vector to the specified number of elements.\n+       *  @param  new_size  Number of elements the %vector should contain.\n+       *\n+       *  This function will %resize the %vector to the specified\n+       *  number of elements.  If the number is smaller than the\n+       *  %vector's current size the %vector is truncated, otherwise\n+       *  default constructed elements are appended.\n+       */\n+      void\n+      resize(size_type __new_size)\n+      {\n+\tif (__new_size > size())\n+\t  _M_default_append(__new_size - size());\n+\telse if (__new_size < size())\n+\t  _M_erase_at_end(this->_M_impl._M_start + __new_size);\n+      }\n+\n       /**\n        *  @brief  Resizes the %vector to the specified number of elements.\n        *  @param  new_size  Number of elements the %vector should contain.\n@@ -550,13 +604,34 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  given data.\n        */\n       void\n-      resize(size_type __new_size, value_type __x = value_type())\n+      resize(size_type __new_size, const value_type& __x)\n       {\n-\tif (__new_size < size())\n+\tif (__new_size > size())\n+\t  insert(end(), __new_size - size(), __x);\n+\telse if (__new_size < size())\n \t  _M_erase_at_end(this->_M_impl._M_start + __new_size);\n-\telse\n+      }\n+#else\n+      /**\n+       *  @brief  Resizes the %vector to the specified number of elements.\n+       *  @param  new_size  Number of elements the %vector should contain.\n+       *  @param  x  Data with which new elements should be populated.\n+       *\n+       *  This function will %resize the %vector to the specified\n+       *  number of elements.  If the number is smaller than the\n+       *  %vector's current size the %vector is truncated, otherwise\n+       *  the %vector is extended and new elements are populated with\n+       *  given data.\n+       */\n+      void\n+      resize(size_type __new_size, value_type __x = value_type())\n+      {\n+\tif (__new_size > size())\n \t  insert(end(), __new_size - size(), __x);\n+\telse if (__new_size < size())\n+\t  _M_erase_at_end(this->_M_impl._M_start + __new_size);\n       }\n+#endif\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       /**  A non-binding request to reduce capacity() to size().  */\n@@ -1049,6 +1124,16 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \tthis->_M_impl._M_finish = this->_M_impl._M_end_of_storage;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      // Called by the vector(n) constructor.\n+      void\n+      _M_default_initialize(size_type __n)\n+      {\n+\tstd::__uninitialized_default_n_a(this->_M_impl._M_start, __n, \n+\t\t\t\t\t _M_get_Tp_allocator());\n+\tthis->_M_impl._M_finish = this->_M_impl._M_end_of_storage;\n+      }\n+#endif\n \n       // Internal assign functions follow.  The *_aux functions do the actual\n       // assignment work for the range versions.\n@@ -1131,6 +1216,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       void\n       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      // Called by resize(n).\n+      void\n+      _M_default_append(size_type __n);\n+#endif\n+\n       // Called by insert(p,x)\n #ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void"}, {"sha": "846a0645d5789b4c639ab022867ee3ae715526cf", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -458,6 +458,59 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t}\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, typename _Alloc>\n+    void\n+    vector<_Tp, _Alloc>::\n+    _M_default_append(size_type __n)\n+    {\n+      if (__n != 0)\n+\t{\n+\t  if (size_type(this->_M_impl._M_end_of_storage\n+\t\t\t- this->_M_impl._M_finish) >= __n)\n+\t    {\n+\t      std::__uninitialized_default_n_a(this->_M_impl._M_finish,\n+\t\t\t\t\t       __n, _M_get_Tp_allocator());\n+\t      this->_M_impl._M_finish += __n;\n+\t    }\n+\t  else\n+\t    {\n+\t      const size_type __len =\n+\t\t_M_check_len(__n, \"vector::_M_default_append\");\n+\t      const size_type __old_size = this->size();\n+\t      pointer __new_start(this->_M_allocate(__len));\n+\t      pointer __new_finish(__new_start);\n+\t      __try\n+\t\t{\n+\t\t  __new_finish =\n+\t\t    std::__uninitialized_move_a(this->_M_impl._M_start,\n+\t\t\t\t\t\tthis->_M_impl._M_finish,\n+\t\t\t\t\t\t__new_start,\n+\t\t\t\t\t\t_M_get_Tp_allocator());\n+\t\t  std::__uninitialized_default_n_a(__new_finish, __n,\n+\t\t\t\t\t\t   _M_get_Tp_allocator());\n+\t\t  __new_finish += __n;\n+\t\t}\n+\t      __catch(...)\n+\t\t{\n+\t\t  std::_Destroy(__new_start, __new_finish,\n+\t\t\t\t_M_get_Tp_allocator());\n+\t\t  _M_deallocate(__new_start, __len);\n+\t\t  __throw_exception_again;\n+\t\t}\n+\t      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n+\t\t\t    _M_get_Tp_allocator());\n+\t      _M_deallocate(this->_M_impl._M_start,\n+\t\t\t    this->_M_impl._M_end_of_storage\n+\t\t\t    - this->_M_impl._M_start);\n+\t      this->_M_impl._M_start = __new_start;\n+\t      this->_M_impl._M_finish = __new_finish;\n+\t      this->_M_impl._M_end_of_storage = __new_start + __len;\n+\t    }\n+\t}\n+    }\n+#endif\n+\n   template<typename _Tp, typename _Alloc>\n     template<typename _InputIterator>\n       void"}, {"sha": "31f708a9c9d5bbb26f845b8f8f53e9f34ef985e1", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -67,12 +67,24 @@ namespace __debug\n       typedef std::reverse_iterator<const_iterator> const_reverse_iterator;\n \n       // 23.2.1.1 construct/copy/destroy:\n-      explicit deque(const _Allocator& __a = _Allocator())\n+      explicit\n+      deque(const _Allocator& __a = _Allocator())\n       : _Base(__a) { }\n \n-      explicit deque(size_type __n, const _Tp& __value = _Tp(),\n-\t\t     const _Allocator& __a = _Allocator())\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      explicit\n+      deque(size_type __n)\n+      : _Base(__n) { }\n+\n+      deque(size_type __n, const _Tp& __value,\n+\t    const _Allocator& __a = _Allocator())\n+      : _Base(__n, __value, __a) { }\n+#else\n+      explicit\n+      deque(size_type __n, const _Tp& __value = _Tp(),\n+\t    const _Allocator& __a = _Allocator())\n       : _Base(__n, __value, __a) { }\n+#endif\n \n       template<class _InputIterator>\n         deque(_InputIterator __first, _InputIterator __last,\n@@ -208,6 +220,39 @@ namespace __debug\n       using _Base::size;\n       using _Base::max_size;\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      resize(size_type __sz)\n+      {\n+\ttypedef typename _Base::const_iterator _Base_const_iterator;\n+\ttypedef __gnu_debug::_After_nth_from<_Base_const_iterator> _After_nth;\n+\n+\tbool __invalidate_all = __sz > this->size();\n+\tif (__sz < this->size())\n+\t  this->_M_invalidate_if(_After_nth(__sz, _M_base().begin()));\n+\n+\t_Base::resize(__sz);\n+\n+\tif (__invalidate_all)\n+\t  this->_M_invalidate_all();\n+      }\n+\n+      void\n+      resize(size_type __sz, const _Tp& __c)\n+      {\n+\ttypedef typename _Base::const_iterator _Base_const_iterator;\n+\ttypedef __gnu_debug::_After_nth_from<_Base_const_iterator> _After_nth;\n+\n+\tbool __invalidate_all = __sz > this->size();\n+\tif (__sz < this->size())\n+\t  this->_M_invalidate_if(_After_nth(__sz, _M_base().begin()));\n+\n+\t_Base::resize(__sz, __c);\n+\n+\tif (__invalidate_all)\n+\t  this->_M_invalidate_all();\n+      }\n+#else\n       void\n       resize(size_type __sz, _Tp __c = _Tp())\n       {\n@@ -223,6 +268,7 @@ namespace __debug\n \tif (__invalidate_all)\n \t  this->_M_invalidate_all();\n       }\n+#endif\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       using _Base::shrink_to_fit;"}, {"sha": "c65ed5829f2464286be27c52cc1e9e0a495751c7", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 73, "deletions": 3, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -67,12 +67,24 @@ namespace __debug\n       typedef std::reverse_iterator<const_iterator> const_reverse_iterator;\n \n       // 23.2.2.1 construct/copy/destroy:\n-      explicit list(const _Allocator& __a = _Allocator())\n+      explicit\n+      list(const _Allocator& __a = _Allocator())\n       : _Base(__a) { }\n \n-      explicit list(size_type __n, const _Tp& __value = _Tp(),\n-\t\t    const _Allocator& __a = _Allocator())\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      explicit\n+      list(size_type __n)\n+      : _Base(__n) { }\n+\n+      list(size_type __n, const _Tp& __value,\n+\t   const _Allocator& __a = _Allocator())\n+      : _Base(__n, __value, __a) { }\n+#else\n+      explicit\n+      list(size_type __n, const _Tp& __value = _Tp(),\n+\t   const _Allocator& __a = _Allocator())\n       : _Base(__n, __value, __a) { }\n+#endif\n \n       template<class _InputIterator>\n       list(_InputIterator __first, _InputIterator __last,\n@@ -208,6 +220,63 @@ namespace __debug\n       using _Base::size;\n       using _Base::max_size;\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      resize(size_type __sz)\n+      {\n+\tthis->_M_detach_singular();\n+\n+\t// if __sz < size(), invalidate all iterators in [begin+__sz, end())\n+\titerator __victim = begin();\n+\titerator __end = end();\n+\tfor (size_type __i = __sz; __victim != __end && __i > 0; --__i)\n+\t  ++__victim;\n+\n+\twhile (__victim != __end)\n+\t  {\n+\t    iterator __real_victim = __victim++;\n+\t    __real_victim._M_invalidate();\n+\t  }\n+\n+\t__try\n+\t  {\n+\t    _Base::resize(__sz);\n+\t  }\n+\t__catch(...)\n+\t  {\n+\t    this->_M_revalidate_singular();\n+\t    __throw_exception_again;\n+\t  }\n+      }\n+\n+      void\n+      resize(size_type __sz, const _Tp& __c)\n+      {\n+\tthis->_M_detach_singular();\n+\n+\t// if __sz < size(), invalidate all iterators in [begin+__sz, end())\n+\titerator __victim = begin();\n+\titerator __end = end();\n+\tfor (size_type __i = __sz; __victim != __end && __i > 0; --__i)\n+\t  ++__victim;\n+\n+\twhile (__victim != __end)\n+\t  {\n+\t    iterator __real_victim = __victim++;\n+\t    __real_victim._M_invalidate();\n+\t  }\n+\n+\t__try\n+\t  {\n+\t    _Base::resize(__sz, __c);\n+\t  }\n+\t__catch(...)\n+\t  {\n+\t    this->_M_revalidate_singular();\n+\t    __throw_exception_again;\n+\t  }\n+      }\n+#else\n       void\n       resize(size_type __sz, _Tp __c = _Tp())\n       {\n@@ -235,6 +304,7 @@ namespace __debug\n \t    __throw_exception_again;\n \t  }\n       }\n+#endif\n \n       // element access:\n       reference"}, {"sha": "c81f956212e77b99f7246ac77c2c956e64c7886e", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -72,12 +72,24 @@ namespace __debug\n       typedef std::reverse_iterator<const_iterator> const_reverse_iterator;\n \n       // 23.2.4.1 construct/copy/destroy:\n-      explicit vector(const _Allocator& __a = _Allocator())\n+      explicit\n+      vector(const _Allocator& __a = _Allocator())\n       : _Base(__a), _M_guaranteed_capacity(0) { }\n \n-      explicit vector(size_type __n, const _Tp& __value = _Tp(),\n-\t\t      const _Allocator& __a = _Allocator())\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      explicit\n+      vector(size_type __n)\n+      : _Base(__n), _M_guaranteed_capacity(__n) { }\n+\n+      vector(size_type __n, const _Tp& __value,\n+\t     const _Allocator& __a = _Allocator())\n+      : _Base(__n, __value, __a), _M_guaranteed_capacity(__n) { }\n+#else\n+      explicit\n+      vector(size_type __n, const _Tp& __value = _Tp(),\n+\t     const _Allocator& __a = _Allocator())\n       : _Base(__n, __value, __a), _M_guaranteed_capacity(__n) { }\n+#endif\n \n       template<class _InputIterator>\n         vector(_InputIterator __first, _InputIterator __last,\n@@ -226,6 +238,31 @@ namespace __debug\n       using _Base::size;\n       using _Base::max_size;\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      resize(size_type __sz)\n+      {\n+\tbool __realloc = _M_requires_reallocation(__sz);\n+\tif (__sz < this->size())\n+\t  this->_M_invalidate_if(_After_nth(__sz, _M_base().begin()));\n+\t_Base::resize(__sz);\n+\tif (__realloc)\n+\t  this->_M_invalidate_all();\n+\t_M_update_guaranteed_capacity();\n+      }\n+\n+      void\n+      resize(size_type __sz, const _Tp& __c)\n+      {\n+\tbool __realloc = _M_requires_reallocation(__sz);\n+\tif (__sz < this->size())\n+\t  this->_M_invalidate_if(_After_nth(__sz, _M_base().begin()));\n+\t_Base::resize(__sz, __c);\n+\tif (__realloc)\n+\t  this->_M_invalidate_all();\n+\t_M_update_guaranteed_capacity();\n+      }\n+#else\n       void\n       resize(size_type __sz, _Tp __c = _Tp())\n       {\n@@ -237,6 +274,7 @@ namespace __debug\n \t  this->_M_invalidate_all();\n \t_M_update_guaranteed_capacity();\n       }\n+#endif\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       using _Base::shrink_to_fit;"}, {"sha": "9f8ce70c9dbbdeb0b74957a35010f0f1d3156c05", "filename": "libstdc++-v3/include/profile/deque", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -60,12 +60,24 @@ namespace __profile\n       typedef typename _Base::const_pointer         const_pointer;\n \n       // 23.2.1.1 construct/copy/destroy:\n-      explicit deque(const _Allocator& __a = _Allocator())\n+      explicit\n+      deque(const _Allocator& __a = _Allocator())\n       : _Base(__a) { }\n \n-      explicit deque(size_type __n, const _Tp& __value = _Tp(),\n-\t\t     const _Allocator& __a = _Allocator())\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      explicit\n+      deque(size_type __n)\n+      : _Base(__n) { }\n+\n+      deque(size_type __n, const _Tp& __value,\n+\t    const _Allocator& __a = _Allocator())\n       : _Base(__n, __value, __a) { }\n+#else\n+      explicit\n+      deque(size_type __n, const _Tp& __value = _Tp(),\n+\t    const _Allocator& __a = _Allocator())\n+      : _Base(__n, __value, __a) { }\n+#endif\n \n       template<class _InputIterator>\n         deque(_InputIterator __first, _InputIterator __last,\n@@ -195,11 +207,25 @@ namespace __profile\n       using _Base::size;\n       using _Base::max_size;\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      resize(size_type __sz)\n+      {\n+\t_Base::resize(__sz);\n+      }\n+\n+      void\n+      resize(size_type __sz, const _Tp& __c)\n+      {\n+\t_Base::resize(__sz, __c);\n+      }\n+#else\n       void\n       resize(size_type __sz, _Tp __c = _Tp())\n       {\n \t_Base::resize(__sz, __c);\n       }\n+#endif\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       using _Base::shrink_to_fit;"}, {"sha": "e5468c440710bcb5976e99871d7a3e32104372c1", "filename": "libstdc++-v3/include/profile/list", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -64,20 +64,40 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       typedef std::reverse_iterator<const_iterator> const_reverse_iterator;\n \n       // 23.2.2.1 construct/copy/destroy:\n-      explicit list(const _Allocator& __a = _Allocator())\n+      explicit\n+      list(const _Allocator& __a = _Allocator())\n       : _Base(__a) \n       { \n         __profcxx_list_construct(this); \t// list2slist\n         __profcxx_list_construct2(this); \t// list2vector\n       }\n \n-      explicit list(size_type __n, const _Tp& __value = _Tp(),\n-\t\t    const _Allocator& __a = _Allocator())\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      explicit\n+      list(size_type __n)\n+      : _Base(__n) \n+      { \n+        __profcxx_list_construct(this); \n+        __profcxx_list_construct2(this); \n+      }\n+\n+      list(size_type __n, const _Tp& __value,\n+\t   const _Allocator& __a = _Allocator())\n+      : _Base(__n, __value, __a) \n+      { \n+        __profcxx_list_construct(this); \n+        __profcxx_list_construct2(this); \n+      }\n+#else\n+      explicit\n+      list(size_type __n, const _Tp& __value = _Tp(),\n+\t   const _Allocator& __a = _Allocator())\n       : _Base(__n, __value, __a) \n       { \n         __profcxx_list_construct(this); \n         __profcxx_list_construct2(this); \n       }\n+#endif\n \n       template<class _InputIterator>\n       list(_InputIterator __first, _InputIterator __last,\n@@ -229,9 +249,19 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       using _Base::size;\n       using _Base::max_size;\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      resize(size_type __sz)\n+      { _Base::resize(__sz); }\n+\n+      void\n+      resize(size_type __sz, const _Tp& __c)\n+      { _Base::resize(__sz, __c); }\n+#else\n       void\n       resize(size_type __sz, _Tp __c = _Tp())\n       { _Base::resize(__sz, __c); }\n+#endif\n \n       // element access:\n       reference"}, {"sha": "e6c32a38aec31e81ebfd516322b928ebebc6ca62", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -76,20 +76,40 @@ namespace __profile\n       _M_base() const { return *this; }\n \n       // 23.2.4.1 construct/copy/destroy:\n-      explicit vector(const _Allocator& __a = _Allocator())\n+      explicit\n+      vector(const _Allocator& __a = _Allocator())\n       : _Base(__a)\n       { \n         __profcxx_vector_construct(this, this->capacity());\n         __profcxx_vector_construct2(this);\n       }\n \n-      explicit vector(size_type __n, const _Tp& __value = _Tp(),\n-\t\t      const _Allocator& __a = _Allocator())\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      explicit\n+      vector(size_type __n)\n+      :  _Base(__n)\n+      { \n+        __profcxx_vector_construct(this, this->capacity());\n+        __profcxx_vector_construct2(this);\n+      }\n+\n+      vector(size_type __n, const _Tp& __value,\n+\t     const _Allocator& __a = _Allocator())\n       :  _Base(__n, __value, __a)\n       { \n         __profcxx_vector_construct(this, this->capacity());\n         __profcxx_vector_construct2(this);\n       }\n+#else\n+      explicit\n+      vector(size_type __n, const _Tp& __value = _Tp(),\n+\t     const _Allocator& __a = _Allocator())\n+      :  _Base(__n, __value, __a)\n+      { \n+        __profcxx_vector_construct(this, this->capacity());\n+        __profcxx_vector_construct2(this);\n+      }\n+#endif\n \n       template<class _InputIterator>\n         vector(_InputIterator __first, _InputIterator __last,\n@@ -218,13 +238,31 @@ namespace __profile\n       using _Base::size;\n       using _Base::max_size;\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      resize(size_type __sz)\n+      {\n+        __profcxx_vector_invalid_operator(this);\n+        _M_profile_resize(this, this->capacity(), __sz);\n+        _Base::resize(__sz);\n+      }\n+\n+      void\n+      resize(size_type __sz, const _Tp& __c)\n+      {\n+        __profcxx_vector_invalid_operator(this);\n+        _M_profile_resize(this, this->capacity(), __sz);\n+        _Base::resize(__sz, __c);\n+      }\n+#else\n       void\n       resize(size_type __sz, _Tp __c = _Tp())\n       {\n         __profcxx_vector_invalid_operator(this);\n         _M_profile_resize(this, this->capacity(), __sz);\n         _Base::resize(__sz, __c);\n       }\n+#endif\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       using _Base::shrink_to_fit;"}, {"sha": "475880888cc238dcc7a338d1b3091f33fe91abfc", "filename": "libstdc++-v3/testsuite/23_containers/deque/capacity/moveable.cc", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2Fmoveable.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2005, 2006, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -17,16 +17,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <deque>\n #include <testsuite_hooks.h>\n #include <testsuite_rvalref.h>\n \n using namespace __gnu_test;\n \n-// According to n1771, there should be two resizes, with and without\n-// parameter. We only have one at present, whose second parameter defaults\n-// to a default-constructed object.\n void\n test01()\n {\n@@ -38,30 +34,17 @@ test01()\n   a.resize(98);\n   a.resize(99);\n   a.resize(100);\n-#if ! defined _GLIBCXX_DEBUG && ! defined _GLIBCXX_PROFILE\n-  VERIFY( copycounter::copycount == 100 );\n-#else\n-  VERIFY( copycounter::copycount == 100 + 4 );\n-#endif\n+  VERIFY( copycounter::copycount == 0 );\n+\n   a.resize(99);\n   a.resize(0);\n-#if ! defined _GLIBCXX_DEBUG && ! defined _GLIBCXX_PROFILE\n-  VERIFY( copycounter::copycount == 100 );\n-#else\n-  VERIFY( copycounter::copycount == 100 + 6 );\n-#endif\n+  VERIFY( copycounter::copycount == 0 );\n+\n   a.resize(100);\n-#if ! defined _GLIBCXX_DEBUG && ! defined _GLIBCXX_PROFILE\n-  VERIFY( copycounter::copycount == 200 );\n-#else\n-  VERIFY( copycounter::copycount == 200 + 7 );\n-#endif\n+  VERIFY( copycounter::copycount == 0 );\n+\n   a.clear();\n-#if ! defined _GLIBCXX_DEBUG && ! defined _GLIBCXX_PROFILE\n-  VERIFY( copycounter::copycount == 200 );\n-#else\n-  VERIFY( copycounter::copycount == 200 + 7 );\n-#endif\n+  VERIFY( copycounter::copycount == 0 );\n }\n \n "}, {"sha": "229a0eb60bc2f472854c97f32ed5d56d0e0ab442", "filename": "libstdc++-v3/testsuite/23_containers/deque/capacity/resize_size.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2Fresize_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2Fresize_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2Fresize_size.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::deque<__gnu_test::NonCopyConstructible> d;\n+  VERIFY( std::distance(d.begin(), d.end()) == 0 );\n+\n+  d.resize(1000);\n+  VERIFY( std::distance(d.begin(), d.end()) == 1000 );\n+  for(auto it = d.begin(); it != d.end(); ++it)\n+    VERIFY( *it == -1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0207fd7174c8509493097220ceda6d85cf191e6f", "filename": "libstdc++-v3/testsuite/23_containers/deque/cons/cons_size.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fcons_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fcons_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fcons_size.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::deque<__gnu_test::NonCopyConstructible> d(1000);\n+  VERIFY( std::distance(d.begin(), d.end()) == 1000 );\n+  for(auto it = d.begin(); it != d.end(); ++it)\n+    VERIFY( *it == -1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bd6ee6363051eaf0f0f56984ad2d2f4d9ed280b9", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1577 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1659 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "21c9d4e4f3c990a4f63f36520f81494192e37174", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1516 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1592 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "08f54d68018708e8ddeafe41440efeaa9f9fa184", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1516 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1592 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "a5bd6065c1c94e505a1b269e4f807181011a1dbd", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1661 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1743 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "e22af3cbc1938826ded35a13554bbedf35dd20e5", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/capacity/resize_size.cc", "status": "renamed", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcapacity%2Fresize_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcapacity%2Fresize_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcapacity%2Fresize_size.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -21,24 +21,17 @@\n \n #include <forward_list>\n #include <testsuite_hooks.h>\n-\n-struct NoCopyConstructor\n-{\n-  NoCopyConstructor() : num(-1) { }\n-  NoCopyConstructor(const NoCopyConstructor&) = delete;\n-\n-  operator int() { return num; }\n-\n-private:\n-  int num;\n-};\n+#include <testsuite_api.h>\n \n void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  std::forward_list<NoCopyConstructor> fl(5);\n-  VERIFY( std::distance(fl.begin(), fl.end()) == 5 );\n+  std::forward_list<__gnu_test::NonCopyConstructible> fl;\n+  VERIFY( std::distance(fl.begin(), fl.end()) == 0 );\n+\n+  fl.resize(1000);\n+  VERIFY( std::distance(fl.begin(), fl.end()) == 1000 );\n   for(auto it = fl.begin(); it != fl.end(); ++it)\n     VERIFY( *it == -1 );\n }", "previous_filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/10.cc"}, {"sha": "3d07f67208956ba4dc7a0dba26451f2f603e657e", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/cons_size.cc", "status": "renamed", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fcons_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fcons_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fcons_size.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -21,27 +21,14 @@\n \n #include <forward_list>\n #include <testsuite_hooks.h>\n-\n-struct NoCopyConstructor\n-{\n-  NoCopyConstructor() : num(-1) { }\n-  NoCopyConstructor(const NoCopyConstructor&) = delete;\n-\n-  operator int() { return num; }\n-\n-private:\n-  int num;\n-};\n+#include <testsuite_api.h>\n \n void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  std::forward_list<NoCopyConstructor> fl;\n-  VERIFY( std::distance(fl.begin(), fl.end()) == 0 );\n-\n-  fl.resize(10);\n-  VERIFY( std::distance(fl.begin(), fl.end()) == 10 );\n+  std::forward_list<__gnu_test::NonCopyConstructible> fl(1000);\n+  VERIFY( std::distance(fl.begin(), fl.end()) == 1000 );\n   for(auto it = fl.begin(); it != fl.end(); ++it)\n     VERIFY( *it == -1 );\n }", "previous_filename": "libstdc++-v3/testsuite/23_containers/forward_list/modifiers/6.cc"}, {"sha": "aa0f3e07def8612f4a602d3f274f80457364b79c", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1196 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "3975b0516111f359bd344bcc76047a1aed6b84c5", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1196 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "0b0471c8cc981f96de75ecec50389b662c232e5d", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1196 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "849eb643e87bf4d300ea37ca9fdc8d0ed0276fb1", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1196 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "06424c0a8c1d77123d7b03b0b5663c83b75cdc39", "filename": "libstdc++-v3/testsuite/23_containers/list/capacity/resize_size.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2Fresize_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2Fresize_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2Fresize_size.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::list<__gnu_test::NonCopyConstructible> l;\n+  VERIFY( std::distance(l.begin(), l.end()) == 0 );\n+\n+  l.resize(1000);\n+  VERIFY( std::distance(l.begin(), l.end()) == 1000 );\n+  for(auto it = l.begin(); it != l.end(); ++it)\n+    VERIFY( *it == -1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f59f520f928bc7d576af55972584e160d8791da6", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/cons_size.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fcons_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fcons_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fcons_size.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::list<__gnu_test::NonCopyConstructible> l(1000);\n+  VERIFY( std::distance(l.begin(), l.end()) == 1000 );\n+  for(auto it = l.begin(); it != l.end(); ++it)\n+    VERIFY( *it == -1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2446157597fd279a63b116ace67d70a034c65980", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1411 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1478 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "cbac8e80cbf0ae8e6fa3c54179cfa160f64d0167", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1380 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1434 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "232bd042ddba688a4cfde43bcb902dc377f93afc", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1380 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1434 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "aefb1f583fd69a931ae2d02efa28f28fcfacfd1e", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1380 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1434 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "168df7a4a97dc2670bce6894b5becaf812c967c0", "filename": "libstdc++-v3/testsuite/23_containers/vector/capacity/resize/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Fresize%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Fresize%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Fresize%2F1.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "previous_filename": "libstdc++-v3/testsuite/23_containers/vector/resize/1.cc"}, {"sha": "5ba026dbeb555494f2650b47063a68f60c551a9d", "filename": "libstdc++-v3/testsuite/23_containers/vector/capacity/resize/moveable.cc", "status": "renamed", "additions": 9, "deletions": 28, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Fresize%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Fresize%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Fresize%2Fmoveable.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -1,6 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -17,19 +18,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <vector>\n #include <testsuite_hooks.h>\n #include <testsuite_rvalref.h>\n \n using namespace __gnu_test;\n \n-// According to n1771, there should be two resizes, with and without\n-// parameter. We only have one at present, whose second parameter defaults\n-// to a default-constructed object.\n-// Also, the values are one higher than might be expected because internally\n-// resize calls fill, which copies its input value in case it is already in\n-// the vector when the vector isn't moved.\n void\n test01()\n {\n@@ -41,30 +35,17 @@ test01()\n   a.resize(98);\n   a.resize(99);\n   a.resize(100);\n-#if !defined(_GLIBCXX_DEBUG) && !defined(_GLIBCXX_PROFILE)\n-  VERIFY( copycounter::copycount == 100 + 1 );\n-#else\n-  VERIFY( copycounter::copycount == 100 + 1 + 4 );\n-#endif\n+  VERIFY( copycounter::copycount == 0 );\n+\n   a.resize(99);\n   a.resize(0);\n-#if !defined(_GLIBCXX_DEBUG) && !defined(_GLIBCXX_PROFILE)\n-  VERIFY( copycounter::copycount == 100 + 1 );\n-#else\n-  VERIFY( copycounter::copycount == 100 + 1 + 6 );\n-#endif\n+  VERIFY( copycounter::copycount == 0 );\n+\n   a.resize(100);\n-#if !defined(_GLIBCXX_DEBUG) && !defined(_GLIBCXX_PROFILE)\n-  VERIFY( copycounter::copycount == 200 + 2 );\n-#else\n-  VERIFY( copycounter::copycount == 200 + 2 + 7 );\n-#endif\n+  VERIFY( copycounter::copycount == 0 );\n+\n   a.clear();\n-#if !defined(_GLIBCXX_DEBUG) && !defined(_GLIBCXX_PROFILE)\n-  VERIFY( copycounter::copycount == 200 + 2 );\n-#else\n-  VERIFY( copycounter::copycount == 200 + 2 + 7 );\n-#endif\n+  VERIFY( copycounter::copycount == 0 );\n }\n \n ", "previous_filename": "libstdc++-v3/testsuite/23_containers/vector/resize/moveable.cc"}, {"sha": "d181168acf72198bea789ff39150b5c1487b0dbe", "filename": "libstdc++-v3/testsuite/23_containers/vector/capacity/resize/resize_size.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Fresize%2Fresize_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Fresize%2Fresize_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Fresize%2Fresize_size.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<__gnu_test::NonCopyConstructible> v;\n+  VERIFY( std::distance(v.begin(), v.end()) == 0 );\n+\n+  v.resize(1000);\n+  VERIFY( std::distance(v.begin(), v.end()) == 1000 );\n+  for(auto it = v.begin(); it != v.end(); ++it)\n+    VERIFY( *it == -1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a33ba1ad69e670f573273f83a03a98fc208583bb", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/cons_size.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fcons_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fcons_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fcons_size.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<__gnu_test::NonCopyConstructible> v(1000);\n+  VERIFY( std::distance(v.begin(), v.end()) == 1000 );\n+  for(auto it = v.begin(); it != v.end(); ++it)\n+    VERIFY( *it == -1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6925c1776a44f18a7149d1f255f1f94328dac3a1", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1063 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1148 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "662bf169b2386510bc2fde08db4019d930129d30", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1003 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1078 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "fe2a2b25475e9aeadc090b5fcfe60bbd8cecc5f1", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1003 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1078 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "9869af131dfaab0a92d6b377a7e671d36e2e58d9", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1104 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1189 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "11007904093d9db4874207a2d4161a0f77e10bfb", "filename": "libstdc++-v3/testsuite/util/testsuite_api.h", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2cf706b84723741ca863f04fcfde3834e60747/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h?ref=dc2cf706b84723741ca863f04fcfde3834e60747", "patch": "@@ -19,7 +19,6 @@\n // <http://www.gnu.org/licenses/>.\n //\n \n-#include <cstddef>\n #include <exception>\n #include <testsuite_hooks.h>\n \n@@ -107,7 +106,7 @@ namespace __gnu_test\n   // For 23 unordered_* requirements.\n   struct NonDefaultConstructible_hash\n   {\n-    size_t\n+    std::size_t\n     operator()(NonDefaultConstructible) const\n     { return 1; }\n   };\n@@ -170,10 +169,29 @@ namespace __gnu_test\n \n   struct OverloadedAddress_hash\n   {\n-    size_t\n+    std::size_t\n     operator()(const OverloadedAddress&) const\n     { return 1; }\n   };\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  struct NonCopyConstructible\n+  {\n+    NonCopyConstructible() : num(-1) { }\n+\n+    NonCopyConstructible(NonCopyConstructible&& other)\n+    : num(other.num)\n+    { other.num = 0; }\n+\n+    NonCopyConstructible(const NonCopyConstructible&) = delete;\n+\n+    operator int() { return num; }\n+\n+  private:\n+    int num;\n+  };\n+#endif\n+\n }\n \n #endif"}]}