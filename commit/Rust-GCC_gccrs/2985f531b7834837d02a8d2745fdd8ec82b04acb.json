{"sha": "2985f531b7834837d02a8d2745fdd8ec82b04acb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk4NWY1MzFiNzgzNDgzN2QwMmE4ZDI3NDVmZGQ4ZWM4MmIwNGFjYg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-21T19:05:46Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-21T19:05:46Z"}, "message": "re PR c/30457 (Please warn about va_start(ap, invalid))\n\n2008-08-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR 30457\n\t* builtins.c (fold_builtin_next_arg): Add warning about undefined\n\tbehaviour.\ntestsuite/\n\t* gcc.dg/pr30457.c: New.\n\nFrom-SVN: r139406", "tree": {"sha": "66df13a772649e0dbf3e19930affd1570d2d47fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66df13a772649e0dbf3e19930affd1570d2d47fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2985f531b7834837d02a8d2745fdd8ec82b04acb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2985f531b7834837d02a8d2745fdd8ec82b04acb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2985f531b7834837d02a8d2745fdd8ec82b04acb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2985f531b7834837d02a8d2745fdd8ec82b04acb/comments", "author": null, "committer": null, "parents": [{"sha": "3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d10ed6cbc7248d756077c1e7dc3533257c44a4f"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "55ffcb13f06583e51c93718a5f88cb614fb8b2e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2985f531b7834837d02a8d2745fdd8ec82b04acb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2985f531b7834837d02a8d2745fdd8ec82b04acb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2985f531b7834837d02a8d2745fdd8ec82b04acb", "patch": "@@ -1,3 +1,9 @@\n+2008-08-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 30457\n+\t* builtins.c (fold_builtin_next_arg): Add warning about undefined\n+\tbehaviour.\n+\t\n 2008-08-21  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* c-tree.h (grokfield): New argument."}, {"sha": "59e4119efd4663fa482b67332c867ab1767759d1", "filename": "gcc/builtins.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2985f531b7834837d02a8d2745fdd8ec82b04acb/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2985f531b7834837d02a8d2745fdd8ec82b04acb/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=2985f531b7834837d02a8d2745fdd8ec82b04acb", "patch": "@@ -11586,6 +11586,17 @@ fold_builtin_next_arg (tree exp, bool va_start_p)\n \t     it.  */\n \t  warning (0, \"second parameter of %<va_start%> not last named argument\");\n \t}\n+\n+      /* Undefined by C99 7.15.1.4p4 (va_start):\n+         \"If the parameter parmN is declared with the register storage\n+         class, with a function or array type, or with a type that is\n+         not compatible with the type that results after application of\n+         the default argument promotions, the behavior is undefined.\"\n+      */\n+      else if (DECL_REGISTER (arg))\n+        warning (0, \"undefined behaviour when second parameter of \"\n+                 \"%<va_start%> is declared with %<register%> storage\");\n+\n       /* We want to verify the second parameter just once before the tree\n \t optimizers are run and then avoid keeping it in the tree,\n \t as otherwise we could warn even for correct code like:"}, {"sha": "d4015a989ef3b665681a8705ae7fafe28f15cf3e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2985f531b7834837d02a8d2745fdd8ec82b04acb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2985f531b7834837d02a8d2745fdd8ec82b04acb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2985f531b7834837d02a8d2745fdd8ec82b04acb", "patch": "@@ -1,3 +1,8 @@\n+2008-08-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 30457\n+\t* gcc.dg/pr30457.c: New.\n+\n 2008-08-21  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gcc.dg/20011008-1.c: Test column."}, {"sha": "f52332d0a1eff74dca5d9f75f0c5f2ff75a81cdd", "filename": "gcc/testsuite/gcc.dg/pr30457.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2985f531b7834837d02a8d2745fdd8ec82b04acb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30457.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2985f531b7834837d02a8d2745fdd8ec82b04acb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30457.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30457.c?ref=2985f531b7834837d02a8d2745fdd8ec82b04acb", "patch": "@@ -0,0 +1,26 @@\n+/* PR 30457 warn about va_start(ap, invalid) */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+/* Undefined by C99 7.15.1.4p4 (va_start):\n+   \"If the parameter parmN is declared with the register storage\n+    class, with a function or array type, or with a type that is\n+    not compatible with the type that results after application of\n+    the default argument promotions, the behavior is undefined.\"  */\n+\n+#include <stdarg.h>\n+\n+void foo(register short paramN, ...)\n+{\n+  va_list ap;\n+\n+  va_start(ap, paramN); /* { dg-warning \"undefined behaviour when second parameter of 'va_start' is declared with 'register' storage\" } */\n+  \n+  /* Undefined by C99 7.15.1.1p2:  */\n+  (void) va_arg(ap, char); /* { dg-warning \"'char' is promoted to 'int' when passed through '...'\" } */\n+  /* { dg-message \"note: .so you should pass .int. not .char. to .va_arg..\" \"\" { target *-*-* } 20 } */\n+  /* { dg-message \"note: if this code is reached, the program will abort\"  \"\" { target *-*-* } 20 } */\n+\n+  va_end(ap);\n+}\n+"}]}