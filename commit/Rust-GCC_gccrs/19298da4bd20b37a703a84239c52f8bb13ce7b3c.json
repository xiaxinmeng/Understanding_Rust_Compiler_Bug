{"sha": "19298da4bd20b37a703a84239c52f8bb13ce7b3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkyOThkYTRiZDIwYjM3YTcwM2E4NDIzOWM1MmY4YmIxM2NlN2IzYw==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2008-01-23T15:07:09Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2008-01-23T15:07:09Z"}, "message": "avr.c (avr_current_arch): New variable.\n\n\t* config/avr/avr.c (avr_current_arch): New variable.\n\t(avr_arch_types): Add 'avr31' and 'avr51' entries.\n\t(avr_arch): Add 'ARCH_AVR31' and 'ARCH_AVR51'.\n\t(avr_mcu_types): Add 'avr31' and 'avr51' architectures.\n\t(avr_override_options): Init 'avr_current_arch'. \n\t(base_arch_s): Move from here...\n\t* config/avr/avr.h (base_arch_s): ... here. Add new members \n\t'have_elpm', 'have_elpmx', 'have_eijmp_eicall', 'reserved'. Rename \n\t'mega' to 'have_jmp_call'.\n\t(TARGET_CPU_CPP_BUILTINS): Define \"__AVR_HAVE_JMP_CALL__\", \n\t\"__AVR_HAVE_RAMPZ__\", \t\"__AVR_HAVE_ELPM__\" and  \"__AVR_HAVE_ELPMX__\"\n\tmacros.\n\t(LINK_SPEC, CRT_BINUTILS_SPECS, ASM_SPEC): Add 'avr31' and 'avr51' \n\tarchitectures.\n\t* config/avr/t-avr (MULTILIB_OPTIONS, MULTILIB_DIRNAMES, \n\tMULTILIB_MATCHES): (Ditto.).\n\nFrom-SVN: r131759", "tree": {"sha": "5e7464097d1e0e77e22f54b81f9c68a127175b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e7464097d1e0e77e22f54b81f9c68a127175b97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19298da4bd20b37a703a84239c52f8bb13ce7b3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19298da4bd20b37a703a84239c52f8bb13ce7b3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19298da4bd20b37a703a84239c52f8bb13ce7b3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19298da4bd20b37a703a84239c52f8bb13ce7b3c/comments", "author": null, "committer": null, "parents": [{"sha": "b86b3ea354db58a3cc83b396a093c4e498eb8f95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b86b3ea354db58a3cc83b396a093c4e498eb8f95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b86b3ea354db58a3cc83b396a093c4e498eb8f95"}], "stats": {"total": 161, "additions": 111, "deletions": 50}, "files": [{"sha": "e72ddc1b59415b173b6bc45cf6996054917a8be2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19298da4bd20b37a703a84239c52f8bb13ce7b3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19298da4bd20b37a703a84239c52f8bb13ce7b3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19298da4bd20b37a703a84239c52f8bb13ce7b3c", "patch": "@@ -1,3 +1,22 @@\n+2008-01-23 Anatoly Sokolov <aesok@post.ru>\n+\n+\t* config/avr/avr.c (avr_current_arch): New variable.\n+\t(avr_arch_types): Add 'avr31' and 'avr51' entries.\n+\t(avr_arch): Add 'ARCH_AVR31' and 'ARCH_AVR51'.\n+\t(avr_mcu_types): Add 'avr31' and 'avr51' architectures.\n+\t(avr_override_options): Init 'avr_current_arch'. \n+\t(base_arch_s): Move from here...\n+\t* config/avr/avr.h (base_arch_s): ... here. Add new members \n+\t'have_elpm', 'have_elpmx', 'have_eijmp_eicall', 'reserved'. Rename \n+\t'mega' to 'have_jmp_call'.\n+\t(TARGET_CPU_CPP_BUILTINS): Define \"__AVR_HAVE_JMP_CALL__\", \n+\t\"__AVR_HAVE_RAMPZ__\", \t\"__AVR_HAVE_ELPM__\" and  \"__AVR_HAVE_ELPMX__\"\n+\tmacros.\n+\t(LINK_SPEC, CRT_BINUTILS_SPECS, ASM_SPEC): Add 'avr31' and 'avr51' \n+\tarchitectures.\n+\t* config/avr/t-avr (MULTILIB_OPTIONS, MULTILIB_DIRNAMES, \n+\tMULTILIB_MATCHES): (Ditto.).\n+\n 2008-01-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/31529"}, {"sha": "003f6a1488edc2c1044c6ddeaa99454850fa6d53", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19298da4bd20b37a703a84239c52f8bb13ce7b3c/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19298da4bd20b37a703a84239c52f8bb13ce7b3c/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=19298da4bd20b37a703a84239c52f8bb13ce7b3c", "patch": "@@ -100,6 +100,9 @@ static int last_insn_address = 0;\n const char *avr_base_arch_macro;\n const char *avr_extra_arch_macro;\n \n+/* Current architecture.  */\n+const struct base_arch_s *avr_current_arch;\n+\n section *progmem_section;\n \n /* More than 8K of program memory: use \"call\" and \"jmp\".  */\n@@ -114,23 +117,17 @@ int avr_asm_only_p = 0;\n /* Core have 'MOVW' and 'LPM Rx,Z' instructions.  */\n int avr_have_movw_lpmx_p = 0;\n \n-struct base_arch_s {\n-  int asm_only;\n-  int have_mul;\n-  int mega;\n-  int have_movw_lpmx;\n-  const char *const macro;\n-};\n-\n static const struct base_arch_s avr_arch_types[] = {\n-  { 1, 0, 0, 0,  NULL },  /* unknown device specified */\n-  { 1, 0, 0, 0, \"__AVR_ARCH__=1\" },\n-  { 0, 0, 0, 0, \"__AVR_ARCH__=2\" },\n-  { 0, 0, 0, 1, \"__AVR_ARCH__=25\"},\n-  { 0, 0, 1, 0, \"__AVR_ARCH__=3\" },\n-  { 0, 0, 1, 1, \"__AVR_ARCH__=35\"},\n-  { 0, 1, 0, 1, \"__AVR_ARCH__=4\" },\n-  { 0, 1, 1, 1, \"__AVR_ARCH__=5\" }\n+  { 1, 0, 0, 0, 0, 0, 0, 0, NULL },  /* unknown device specified */\n+  { 1, 0, 0, 0, 0, 0, 0, 0, \"__AVR_ARCH__=1\"   },\n+  { 0, 0, 0, 0, 0, 0, 0, 0, \"__AVR_ARCH__=2\"   },\n+  { 0, 0, 0, 1, 0, 0, 0, 0, \"__AVR_ARCH__=25\"  },\n+  { 0, 0, 1, 0, 0, 0, 0, 0, \"__AVR_ARCH__=3\"   },\n+  { 0, 0, 1, 0, 1, 0, 0, 0, \"__AVR_ARCH__=31\"  },\n+  { 0, 0, 1, 1, 0, 0, 0, 0, \"__AVR_ARCH__=35\"  },\n+  { 0, 1, 0, 1, 0, 0, 0, 0, \"__AVR_ARCH__=4\"   },\n+  { 0, 1, 1, 1, 0, 0, 0, 0, \"__AVR_ARCH__=5\"   },\n+  { 0, 1, 1, 1, 1, 1, 0, 0, \"__AVR_ARCH__=51\"  }\n };\n \n /* These names are used as the index into the avr_arch_types[] table \n@@ -143,9 +140,11 @@ enum avr_arch\n   ARCH_AVR2,\n   ARCH_AVR25,\n   ARCH_AVR3,\n+  ARCH_AVR31,\n   ARCH_AVR35,\n   ARCH_AVR4,\n-  ARCH_AVR5\n+  ARCH_AVR5,\n+  ARCH_AVR51\n };\n \n struct mcu_type_s {\n@@ -195,12 +194,14 @@ static const struct mcu_type_s avr_mcu_types[] = {\n   { \"attiny48\",     ARCH_AVR25, \"__AVR_ATtiny48__\" },\n   { \"attiny88\",     ARCH_AVR25, \"__AVR_ATtiny88__\" },\n   { \"at86rf401\",    ARCH_AVR25, \"__AVR_AT86RF401__\" },\n-    /* Classic, > 8K.  */\n+    /* Classic, > 8K, <= 64K.  */\n   { \"avr3\",         ARCH_AVR3, NULL },\n-  { \"atmega103\",    ARCH_AVR3, \"__AVR_ATmega103__\" },\n   { \"at43usb320\",   ARCH_AVR3, \"__AVR_AT43USB320__\" },\n   { \"at43usb355\",   ARCH_AVR3, \"__AVR_AT43USB355__\" },\n   { \"at76c711\",     ARCH_AVR3, \"__AVR_AT76C711__\" },\n+    /* Classic, == 128K.  */\n+  { \"avr31\",        ARCH_AVR31, NULL },\n+  { \"atmega103\",    ARCH_AVR3, \"__AVR_ATmega103__\" },\n     /* Classic + MOVW + JMP/CALL.  */\n   { \"avr35\",        ARCH_AVR35, NULL },\n   { \"at90usb82\",    ARCH_AVR35, \"__AVR_AT90USB82__\" },\n@@ -220,7 +221,7 @@ static const struct mcu_type_s avr_mcu_types[] = {\n   { \"at90pwm2b\",    ARCH_AVR4, \"__AVR_AT90PWM2B__\" },\n   { \"at90pwm3\",     ARCH_AVR4, \"__AVR_AT90PWM3__\" },\n   { \"at90pwm3b\",    ARCH_AVR4, \"__AVR_AT90PWM3B__\" },\n-    /* Enhanced, > 8K.  */\n+    /* Enhanced, > 8K, <= 64K.  */\n   { \"avr5\",         ARCH_AVR5, NULL },\n   { \"atmega16\",     ARCH_AVR5, \"__AVR_ATmega16__\" },\n   { \"atmega161\",    ARCH_AVR5, \"__AVR_ATmega161__\" },\n@@ -255,21 +256,23 @@ static const struct mcu_type_s avr_mcu_types[] = {\n   { \"atmega6450\",   ARCH_AVR5, \"__AVR_ATmega6450__\" },\n   { \"atmega649\",    ARCH_AVR5, \"__AVR_ATmega649__\" },\n   { \"atmega6490\",   ARCH_AVR5, \"__AVR_ATmega6490__\" },\n-  { \"atmega128\",    ARCH_AVR5, \"__AVR_ATmega128__\" },\n-  { \"atmega1280\",   ARCH_AVR5, \"__AVR_ATmega1280__\" },\n-  { \"atmega1281\",   ARCH_AVR5, \"__AVR_ATmega1281__\" },\n-  { \"atmega1284p\",  ARCH_AVR5, \"__AVR_ATmega1284P__\" },\n   { \"atmega16hva\",  ARCH_AVR5, \"__AVR_ATmega16HVA__\" },\n   { \"at90can32\",    ARCH_AVR5, \"__AVR_AT90CAN32__\" },\n   { \"at90can64\",    ARCH_AVR5, \"__AVR_AT90CAN64__\" },\n-  { \"at90can128\",   ARCH_AVR5, \"__AVR_AT90CAN128__\" },\n   { \"at90pwm216\",   ARCH_AVR5, \"__AVR_AT90PWM216__\" },\n   { \"at90pwm316\",   ARCH_AVR5, \"__AVR_AT90PWM316__\" },\n   { \"at90usb646\",   ARCH_AVR5, \"__AVR_AT90USB646__\" },\n   { \"at90usb647\",   ARCH_AVR5, \"__AVR_AT90USB647__\" },\n-  { \"at90usb1286\",  ARCH_AVR5, \"__AVR_AT90USB1286__\" },\n-  { \"at90usb1287\",  ARCH_AVR5, \"__AVR_AT90USB1287__\" },\n   { \"at94k\",        ARCH_AVR5, \"__AVR_AT94K__\" },\n+    /* Enhanced, == 128K.  */\n+  { \"avr51\",        ARCH_AVR51, NULL },\n+  { \"atmega128\",    ARCH_AVR51, \"__AVR_ATmega128__\" },\n+  { \"atmega1280\",   ARCH_AVR51, \"__AVR_ATmega1280__\" },\n+  { \"atmega1281\",   ARCH_AVR51, \"__AVR_ATmega1281__\" },\n+  { \"atmega1284p\",  ARCH_AVR51, \"__AVR_ATmega1284P__\" },\n+  { \"at90can128\",   ARCH_AVR51, \"__AVR_AT90CAN128__\" },\n+  { \"at90usb1286\",  ARCH_AVR51, \"__AVR_AT90USB1286__\" },\n+  { \"at90usb1287\",  ARCH_AVR51, \"__AVR_AT90USB1287__\" },\n     /* Assembler only.  */\n   { \"avr1\",         ARCH_AVR1, NULL },\n   { \"at90s1200\",    ARCH_AVR1, \"__AVR_AT90S1200__\" },\n@@ -347,10 +350,11 @@ avr_override_options (void)\n \tfprintf (stderr,\"   %s\\n\", t->name);\n     }\n \n+  avr_current_arch = &avr_arch_types[t->arch];\n   base = &avr_arch_types[t->arch];\n   avr_asm_only_p = base->asm_only;\n   avr_have_mul_p = base->have_mul;\n-  avr_mega_p = base->mega;\n+  avr_mega_p = base->have_jmp_call;\n   avr_have_movw_lpmx_p = base->have_movw_lpmx;\n   avr_base_arch_macro = base->macro;\n   avr_extra_arch_macro = t->macro;"}, {"sha": "9368c01349e464f4e5d61cc5321fc7fcb85daa65", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 49, "deletions": 11, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19298da4bd20b37a703a84239c52f8bb13ce7b3c/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19298da4bd20b37a703a84239c52f8bb13ce7b3c/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=19298da4bd20b37a703a84239c52f8bb13ce7b3c", "patch": "@@ -22,6 +22,36 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Names to predefine in the preprocessor for this target machine.  */\n \n+struct base_arch_s {\n+  /* Assembler only.  */\n+  int asm_only;\n+\n+  /* Core have 'MUL*' instructions.  */\n+  int have_mul;\n+\n+  /* Core have 'CALL' and 'JMP' instructions.  */\n+  int have_jmp_call;\n+\n+  /* Core have 'MOVW' and 'LPM Rx,Z' instructions.  */\n+  int have_movw_lpmx;\n+\n+  /* Core have 'ELPM' instructions.  */\n+  int have_elpm;\n+\n+  /* Core have 'ELPM Rx,Z' instructions.  */\n+  int have_elpmx;\n+\n+  /* Core have 'EICALL' and 'EIJMP' instructions.  */\n+  int have_eijmp_eicall;\n+\n+  /* Reserved. */\n+  int reserved;\n+  \n+  const char *const macro;\n+};\n+\n+extern const struct base_arch_s *avr_current_arch;\n+\n #define TARGET_CPU_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n@@ -30,6 +60,12 @@ along with GCC; see the file COPYING3.  If not see\n \tbuiltin_define (avr_base_arch_macro);\t\\\n       if (avr_extra_arch_macro)\t\t\t\\\n \tbuiltin_define (avr_extra_arch_macro);\t\\\n+      if (avr_current_arch->have_elpm)\t\t\\\n+\tbuiltin_define (\"__AVR_HAVE_RAMPZ__\");\t\\\n+      if (avr_current_arch->have_elpm)\t\t\\\n+\tbuiltin_define (\"__AVR_HAVE_ELPM__\");\t\\\n+      if (avr_current_arch->have_elpmx)\t\t\\\n+\tbuiltin_define (\"__AVR_HAVE_ELPMX__\");\t\\\n       if (avr_have_movw_lpmx_p)\t\t\t\\\n \tbuiltin_define (\"__AVR_HAVE_MOVW__\");\t\\\n       if (avr_have_movw_lpmx_p)\t\t\t\\\n@@ -40,8 +76,10 @@ along with GCC; see the file COPYING3.  If not see\n \tbuiltin_define (\"__AVR_ENHANCED__\");\t\\\n       if (avr_have_mul_p)\t\t\t\\\n \tbuiltin_define (\"__AVR_HAVE_MUL__\");\t\\\n-      if (avr_mega_p)\t\t\t\t\\\n+      if (avr_current_arch->have_jmp_call)\t\\\n \tbuiltin_define (\"__AVR_MEGA__\");\t\\\n+      if (avr_current_arch->have_jmp_call)\t\\\n+\tbuiltin_define (\"__AVR_HAVE_JMP_CALL__\"); \\\n       if (TARGET_NO_INTERRUPTS)\t\t\t\\\n \tbuiltin_define (\"__NO_INTERRUPTS__\");\t\\\n     }\t\t\t\t\t\t\\\n@@ -734,7 +772,7 @@ extern int avr_case_values_threshold;\n /* A C string constant that tells the GCC driver program options to\n    pass to `cc1plus'.  */\n \n-#define ASM_SPEC \"%{mmcu=avr25:-mmcu=avr2;mmcu=avr35:-mmcu=avr3;\\\n+#define ASM_SPEC \"%{mmcu=avr25:-mmcu=avr2;mmcu=avr35:-mmcu=avr3;mmcu=avr31:-mmcu=avr3;mmcu=avr51:-mmcu=avr5;\\\n mmcu=*:-mmcu=%*}\"\n \n #define LINK_SPEC \"\\\n@@ -865,10 +903,10 @@ mmcu=*:-mmcu=%*}\"\n %{mmcu=attiny43u:crttn43u.o%s} \\\n %{mmcu=attiny48:crttn48.o%s} \\\n %{mmcu=attiny88:crttn88.o%s} \\\n-%{mmcu=atmega103|mmcu=avr3:crtm103.o%s} \\\n-%{mmcu=at43usb320:crt43320.o%s} \\\n+%{mmcu=at43usb320|mmcu=avr3:crt43320.o%s} \\\n %{mmcu=at43usb355:crt43355.o%s} \\\n %{mmcu=at76c711:crt76711.o%s} \\\n+%{mmcu=atmega103|mmcu=avr31:crtm103.o%s} \\\n %{mmcu=at90usb162|mmcu=avr35:crtusb162.o%s} \\\n %{mmcu=at90usb82:crtusb82.o%s} \\\n %{mmcu=atmega8|mmcu=avr4:crtm8.o%s} \\\n@@ -916,22 +954,22 @@ mmcu=*:-mmcu=%*}\"\n %{mmcu=atmega6450:crtm6450.o%s} \\\n %{mmcu=atmega649:crtm649.o%s} \\\n %{mmcu=atmega6490:crtm6490.o%s} \\\n-%{mmcu=atmega128:crtm128.o%s} \\\n-%{mmcu=atmega1280:crtm1280.o%s} \\\n-%{mmcu=atmega1281:crtm1281.o%s} \\\n-%{mmcu=atmega1284p:crtm1284p.o%s} \\\n %{mmcu=atmega8hva:crtm8hva.o%s} \\\n %{mmcu=atmega16hva:crtm16hva.o%s} \\\n %{mmcu=at90can32:crtcan32.o%s} \\\n %{mmcu=at90can64:crtcan64.o%s} \\\n-%{mmcu=at90can128:crtcan128.o%s} \\\n %{mmcu=at90pwm216:crt90pwm216.o%s} \\\n %{mmcu=at90pwm316:crt90pwm316.o%s} \\\n %{mmcu=at90usb646:crtusb646.o%s} \\\n %{mmcu=at90usb647:crtusb647.o%s} \\\n+%{mmcu=at94k:crtat94k.o%s} \\\n+%{mmcu=atmega128|mmcu=avr51:crtm128.o%s} \\\n+%{mmcu=atmega1280:crtm1280.o%s} \\\n+%{mmcu=atmega1281:crtm1281.o%s} \\\n+%{mmcu=atmega1284p:crtm1284p.o%s} \\\n+%{mmcu=at90can128:crtcan128.o%s} \\\n %{mmcu=at90usb1286:crtusb1286.o%s} \\\n-%{mmcu=at90usb1287:crtusb1287.o%s} \\\n-%{mmcu=at94k:crtat94k.o%s}\"\n+%{mmcu=at90usb1287:crtusb1287.o%s}\"\n \n #define EXTRA_SPECS {\"crt_binutils\", CRT_BINUTILS_SPECS},\n "}, {"sha": "0cafe4f6c9843d6ebd2a516759f9d79293ae2940", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19298da4bd20b37a703a84239c52f8bb13ce7b3c/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19298da4bd20b37a703a84239c52f8bb13ce7b3c/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=19298da4bd20b37a703a84239c52f8bb13ce7b3c", "patch": "@@ -37,8 +37,8 @@ fp-bit.c: $(srcdir)/config/fp-bit.c $(srcdir)/config/avr/t-avr\n \n FPBIT = fp-bit.c\n \n-MULTILIB_OPTIONS = mmcu=avr2/mmcu=avr25/mmcu=avr3/mmcu=avr35/mmcu=avr4/mmcu=avr5\n-MULTILIB_DIRNAMES = avr2 avr25 avr3 avr35 avr4 avr5\n+MULTILIB_OPTIONS = mmcu=avr2/mmcu=avr25/mmcu=avr3/mmcu=avr31/mmcu=avr35/mmcu=avr4/mmcu=avr5/mmcu=avr51\n+MULTILIB_DIRNAMES = avr2 avr25 avr3 avr31 avr35 avr4 avr5 avr51\n \n # The many avr2 matches are not listed here - this is the default.\n MULTILIB_MATCHES = \\\n@@ -57,10 +57,10 @@ MULTILIB_MATCHES = \\\n \tmmcu?avr25=mmcu?attiny48 \\\n \tmmcu?avr25=mmcu?attiny88 \\\n \tmmcu?avr25=mmcu?at86rf401 \\\n-\tmmcu?avr3=mmcu?atmega103 \\\n \tmmcu?avr3=mmcu?at43usb320 \\\n \tmmcu?avr3=mmcu?at43usb355 \\\n \tmmcu?avr3=mmcu?at76c711 \\\n+\tmmcu?avr31=mmcu?atmega103 \\\n \tmmcu?avr35=mmcu?at90usb82 \\\n \tmmcu?avr35=mmcu?at90usb162 \\\n \tmmcu?avr4=mmcu?atmega48 \\\n@@ -109,21 +109,21 @@ MULTILIB_MATCHES = \\\n \tmmcu?avr5=mmcu?atmega6450 \\\n \tmmcu?avr5=mmcu?atmega649 \\\n \tmmcu?avr5=mmcu?atmega6490 \\\n-\tmmcu?avr5=mmcu?atmega128 \\\n-\tmmcu?avr5=mmcu?atmega1280 \\\n-\tmmcu?avr5=mmcu?atmega1281 \\\n-\tmmcu?avr5=mmcu?atmega1284p \\\n \tmmcu?avr5=mmcu?atmega16hva \\\n \tmmcu?avr5=mmcu?at90can32 \\\n \tmmcu?avr5=mmcu?at90can64 \\\n-\tmmcu?avr5=mmcu?at90can128 \\\n \tmmcu?avr5=mmcu?at90pwm216 \\\n \tmmcu?avr5=mmcu?at90pwm316 \\\n \tmmcu?avr5=mmcu?at90usb646 \\\n \tmmcu?avr5=mmcu?at90usb647 \\\n-\tmmcu?avr5=mmcu?at90usb1286 \\\n-\tmmcu?avr5=mmcu?at90usb1287 \\\n-\tmmcu?avr5=mmcu?at94k\n+\tmmcu?avr5=mmcu?at94k \\\n+\tmmcu?avr51=mmcu?atmega128 \\\n+\tmmcu?avr51=mmcu?atmega1280 \\\n+\tmmcu?avr51=mmcu?atmega1281 \\\n+\tmmcu?avr51=mmcu?atmega1284p \\\n+\tmmcu?avr51=mmcu?at90can128 \\\n+\tmmcu?avr51=mmcu?at90usb1286 \\\n+\tmmcu?avr51=mmcu?at90usb1287\n \n MULTILIB_EXCEPTIONS =\n "}]}