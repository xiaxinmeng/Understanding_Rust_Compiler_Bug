{"sha": "be583c04a448ef4e97065fd0f5b7f6c5e40e41fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU1ODNjMDRhNDQ4ZWY0ZTk3MDY1ZmQwZjViN2Y2YzVlNDBlNDFmYg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-02-28T18:28:53Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-02-28T18:28:53Z"}, "message": "PR testsuite/84617 - new test cases g++.dg/ext/attr-const.C and g++.dg/ext/attr-pure.C fail\n\ngcc/cp/ChangeLog:\n\n\t* decl.c (duplicate_decls): Fully merge attributes const, pure,\n\tand malloc.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/attr-malloc-3.C: New test.\n\t* g++.dg/ext/attr-const.C: Adjust.  Xfail assertions failing due\n\tto pre-existing problems.\n\t* g++.dg/ext/attr-pure.C: Same.\n\nFrom-SVN: r258077", "tree": {"sha": "89329e366343101f2462ba5660d680294e96aef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89329e366343101f2462ba5660d680294e96aef0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be583c04a448ef4e97065fd0f5b7f6c5e40e41fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be583c04a448ef4e97065fd0f5b7f6c5e40e41fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be583c04a448ef4e97065fd0f5b7f6c5e40e41fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be583c04a448ef4e97065fd0f5b7f6c5e40e41fb/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b14a13facf3903b7f7d67b2501dd1a3c2f200823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b14a13facf3903b7f7d67b2501dd1a3c2f200823", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b14a13facf3903b7f7d67b2501dd1a3c2f200823"}], "stats": {"total": 179, "additions": 151, "deletions": 28}, "files": [{"sha": "457bfc2a4c71f28b576ca2da7b4df0badf858371", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be583c04a448ef4e97065fd0f5b7f6c5e40e41fb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be583c04a448ef4e97065fd0f5b7f6c5e40e41fb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=be583c04a448ef4e97065fd0f5b7f6c5e40e41fb", "patch": "@@ -1,3 +1,9 @@\n+2018-02-28  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR testsuite/84617\n+\t* decl.c (duplicate_decls): Fully merge attributes const, pure,\n+\tand malloc.\n+\n 2018-02-28  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/84602"}, {"sha": "f1be2292c59004e2d265f69e989ec0f5bbb8e0e1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be583c04a448ef4e97065fd0f5b7f6c5e40e41fb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be583c04a448ef4e97065fd0f5b7f6c5e40e41fb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=be583c04a448ef4e97065fd0f5b7f6c5e40e41fb", "patch": "@@ -2234,8 +2234,11 @@ next_arg:;\n \t      TREE_NOTHROW (newdecl) |= TREE_NOTHROW (olddecl);\n \t      TREE_NOTHROW (olddecl) |= TREE_NOTHROW (newdecl);\n \t      TREE_READONLY (newdecl) |= TREE_READONLY (olddecl);\n+\t      TREE_READONLY (olddecl) |= TREE_READONLY (newdecl);\n \t      DECL_IS_MALLOC (newdecl) |= DECL_IS_MALLOC (olddecl);\n+\t      DECL_IS_MALLOC (olddecl) |= DECL_IS_MALLOC (newdecl);\n \t      DECL_PURE_P (newdecl) |= DECL_PURE_P (olddecl);\n+\t      DECL_PURE_P (olddecl) |= DECL_PURE_P (newdecl);\n \t    }\n \t  else\n \t    {"}, {"sha": "bfdc0f18645c0a93ec5479d0602d134b1325f8ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be583c04a448ef4e97065fd0f5b7f6c5e40e41fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be583c04a448ef4e97065fd0f5b7f6c5e40e41fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be583c04a448ef4e97065fd0f5b7f6c5e40e41fb", "patch": "@@ -1,3 +1,11 @@\n+2018-02-28  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR testsuite/84617\n+\t* g++.dg/ext/attr-malloc-3.C: New test.\n+\t* g++.dg/ext/attr-const.C: Adjust.  Xfail assertions failing due\n+\tto pre-existing problems.\n+\t* g++.dg/ext/attr-pure.C: Same.\n+\n 2018-02-28  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/83901"}, {"sha": "28f2c6ea4b6d81414ebf402adad62463abdaf9ca", "filename": "gcc/testsuite/g++.dg/ext/attr-const.C", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be583c04a448ef4e97065fd0f5b7f6c5e40e41fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-const.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be583c04a448ef4e97065fd0f5b7f6c5e40e41fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-const.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-const.C?ref=be583c04a448ef4e97065fd0f5b7f6c5e40e41fb", "patch": "@@ -1,54 +1,55 @@\n /*  PR c++/83871 - wrong code for attribute const and pure on distinct\n     template specializations\n     { dg-do compile }\n-    { dg-options \"-O -Wall\" } */\n+    { dg-options \"-O1 -Wall -fdump-tree-optimized\" } */\n \n int __attribute__ ((const)) fconst_none ();\n int fconst_none ();\n \n-void test_const_none_failed ();\n+void func_const_none_failed ();\n \n void func_const_none ()\n {\n   int i0 = fconst_none ();\n   int i1 = fconst_none ();\n   if (i0 != i1)\n-    test_const_none_failed ();\n+    func_const_none_failed ();\n \n-  // { dg-final { scan-tree-dump-not \"test_const_none_failed\" \"optimized\" } }\n+  // { dg-final { scan-tree-dump-not \"func_const_none_failed\" \"optimized\" } }\n }\n \n \n int fnone_const ();\n int __attribute__ ((const)) fnone_const ();\n \n-void test_none_const_failed ();\n+void func_none_const_failed ();\n \n void func_none_const ()\n {\n   int i0 = fnone_const ();\n   int i1 = fnone_const ();\n   if (i0 != i1)\n-    test_none_const_failed ();\n+    func_none_const_failed ();\n \n-  // { dg-final { scan-tree-dump-not \"test_none_const_failed\" \"optimized\" } }\n+  // { dg-final { scan-tree-dump-not \"func_none_const_failed\" \"optimized\" } }\n }\n \n-\n template <class T>\n int __attribute__ ((const)) fconst_none (T);\n \n template <class T>\n int fconst_none (T);\n \n+void templ_const_none_failed ();\n+\n void template_const_none ()\n {\n   int i0 = fconst_none<int> (0);\n   int i1 = fconst_none<int> (0);\n   if (i0 != i1)\n-    test_const_none_failed ();\n+    templ_const_none_failed ();\n \n-  // { dg-final { scan-tree-dump-not \"test_const_none_failed\" \"optimized\" } }\n+  // { dg-final { scan-tree-dump-not \"templ_const_none_failed\" \"optimized\" } }\n }\n \n \n@@ -58,12 +59,15 @@ int fnone_const (T);\n template <class T>\n int __attribute__ ((const)) fnone_const (T);\n \n+void templ_none_const_failed ();\n+\n void test_fnone_const ()\n {\n   int i0 = fnone_const<int> (0);\n   int i1 = fnone_const<int> (0);\n   if (i0 != i1)\n-    test_none_const_failed ();\n+    templ_none_const_failed ();\n \n-  // { dg-final { scan-tree-dump-not \"test_none_const_failed\" \"optimized\" } }\n+  // The following fails (most likely) due to bug 84294.\n+  // { dg-final { scan-tree-dump-not \"templ_none_const_failed\" \"optimized\" { xfail *-*-* } } }\n }"}, {"sha": "e4470af7927cd878e7624545cb641cdeaf821324", "filename": "gcc/testsuite/g++.dg/ext/attr-malloc-3.C", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be583c04a448ef4e97065fd0f5b7f6c5e40e41fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-malloc-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be583c04a448ef4e97065fd0f5b7f6c5e40e41fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-malloc-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-malloc-3.C?ref=be583c04a448ef4e97065fd0f5b7f6c5e40e41fb", "patch": "@@ -0,0 +1,97 @@\n+// Bug c++/84617 - new test cases g++.dg/ext/attr-const.C and\n+// g++.dg/ext/attr-pure.C fail\n+// { dg-do compile }\n+// { dg-options \"-O -Wall -fdump-tree-optimized\" }\n+\n+static char a[8];\n+\n+void* __attribute__ ((malloc))\n+func_malloc_none (unsigned);\n+\n+void*\n+func_alloc_none (unsigned);         // redeclare with no attribute\n+\n+void func_malloc_none_failed ();\n+\n+void test_func_malloc_none (void)\n+{\n+  void *p = func_malloc_none (1);\n+  if (!p)\n+    return;\n+\n+  if (p == a)                       // must be false\n+    func_malloc_none_failed ();     // should be eliminated\n+\n+  // Verify that the call to func_malloc_none_failed() is eliminated.\n+  // { dg-final { scan-tree-dump-not \"func_malloc_none_failed\" \"optimized\" } }\n+}\n+\n+\n+void*\n+func_none_malloc (unsigned);\n+\n+void*  __attribute__ ((malloc))\n+func_none_malloc (unsigned);         // redeclare with an attribute\n+\n+void func_none_malloc_failed ();\n+\n+void test_func_none_malloc (void)\n+{\n+  void *p = func_none_malloc (1);\n+  if (!p)\n+    return;\n+\n+  if (p == a)                       // must be false\n+    func_none_malloc_failed ();     // should be eliminated\n+\n+  // Verify that the call to func_none_malloc_failed() is eliminated.\n+  // { dg-final { scan-tree-dump-not \"func_none_malloc_failed\" \"optimized\" } }\n+}\n+\n+\n+template <class>\n+void* __attribute__ ((malloc))\n+templ_malloc_none (unsigned);\n+\n+template <class>\n+void*\n+templ_malloc_none (unsigned);       // redeclare with no attribute\n+\n+void templ_malloc_none_failed ();\n+\n+void test_templ_malloc_none (void)\n+{\n+  void *p = templ_malloc_none<void>(1);\n+  if (!p)\n+    return;\n+\n+  if (p == a)                       // must be false\n+    templ_malloc_none_failed ();    // should be eliminated\n+\n+  // Verify that the call to templ_malloc_none_failed() is eliminated.\n+  // { dg-final { scan-tree-dump-not \"templ_malloc_none_failed\" \"optimized\" } }\n+}\n+\n+template <class>\n+void*\n+templ_none_malloc (unsigned);\n+\n+template <class>\n+void* __attribute__ ((malloc))\n+templ_none_malloc (unsigned);       // redeclared with an attribute\n+\n+void templ_none_malloc_failed ();\n+\n+void test_templ_none_malloc (void)\n+{\n+  void *p = templ_none_malloc<void>(1);\n+  if (!p)\n+    return;\n+\n+  if (p == a)                       // must be false\n+    templ_none_malloc_failed ();    // should be eliminated\n+\n+  // The following fails (most likely) due to bug 84294.\n+  // Verify that the call to templ_none_malloc_failed() is eliminated.\n+  // { dg-final { scan-tree-dump-not \"templ_none_malloc_failed\" \"optimized\" { xfail *-*-* } } }\n+}"}, {"sha": "12532cb91efd7e4996c4d2dbeae6861e52df2682", "filename": "gcc/testsuite/g++.dg/ext/attr-pure.C", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be583c04a448ef4e97065fd0f5b7f6c5e40e41fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-pure.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be583c04a448ef4e97065fd0f5b7f6c5e40e41fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-pure.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-pure.C?ref=be583c04a448ef4e97065fd0f5b7f6c5e40e41fb", "patch": "@@ -1,37 +1,37 @@\n /*  PR c++/83871 - wrong code for attribute const and pure on distinct\n     template specializations\n     { dg-do compile }\n-    { dg-options \"-O -Wall\" } */\n+    { dg-options \"-O -Wall -fdump-tree-optimized\" } */\n \n int __attribute__ ((pure)) fpure_none ();\n int fpure_none ();\n \n-void test_pure_none_failed ();\n+void func_pure_none_failed ();\n \n void func_pure_none ()\n {\n   int i0 = fpure_none ();\n   int i1 = fpure_none ();\n   if (i0 != i1)\n-    test_pure_none_failed ();\n+    func_pure_none_failed ();\n \n-  // { dg-final { scan-tree-dump-not \"test_pure_none_failed\" \"optimized\" } }\n+  // { dg-final { scan-tree-dump-not \"func_pure_none_failed\" \"optimized\" } }\n }\n \n \n int fnone_pure ();\n int __attribute__ ((pure)) fnone_pure ();\n \n-void test_none_pure_failed ();\n+void func_none_pure_failed ();\n \n void func_none_pure ()\n {\n   int i0 = fnone_pure ();\n   int i1 = fnone_pure ();\n   if (i0 != i1)\n-    test_none_pure_failed ();\n+    func_none_pure_failed ();\n \n-  // { dg-final { scan-tree-dump-not \"test_none_pure_failed\" \"optimized\" } }\n+  // { dg-final { scan-tree-dump-not \"func_none_pure_failed\" \"optimized\" } }\n }\n \n \n@@ -41,29 +41,34 @@ int __attribute__ ((pure)) fpure_none (T);\n template <class T>\n int fpure_none (T);\n \n+void templ_pure_none_failed ();\n+\n void template_pure_none ()\n {\n   int i0 = fpure_none<int> (0);\n   int i1 = fpure_none<int> (0);\n   if (i0 != i1)\n-    test_pure_none_failed ();\n+    templ_pure_none_failed ();\n \n-  // { dg-final { scan-tree-dump-not \"test_pure_none_failed\" \"optimized\" } }\n+  // { dg-final { scan-tree-dump-not \"templ_pure_none_failed\" \"optimized\" } }\n }\n \n \n template <class T>\n-int fnone_pure (T);\n+int fnone_const (T);\n \n template <class T>\n-int __attribute__ ((pure)) fnone_pure (T);\n+int __attribute__ ((const)) fnone_const (T);\n+\n+void templ_none_const_failed ();\n \n-void test_fnone_pure ()\n+void test_fnone_const ()\n {\n-  int i0 = fnone_pure<int> (0);\n-  int i1 = fnone_pure<int> (0);\n+  int i0 = fnone_const<int> (0);\n+  int i1 = fnone_const<int> (0);\n   if (i0 != i1)\n-    test_none_pure_failed ();\n+    templ_none_const_failed ();\n \n-  // { dg-final { scan-tree-dump-not \"test_none_pure_failed\" \"optimized\" } }\n+  // The following fails (most likely) due to bug 84294.\n+  // { dg-final { scan-tree-dump-not \"templ_none_const_failed\" \"optimized\" { xfail *-*-* } } }\n }"}]}