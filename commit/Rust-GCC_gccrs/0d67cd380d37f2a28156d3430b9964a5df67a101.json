{"sha": "0d67cd380d37f2a28156d3430b9964a5df67a101", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ2N2NkMzgwZDM3ZjJhMjgxNTZkMzQzMGI5OTY0YTVkZjY3YTEwMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-07-12T11:43:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-07-12T11:43:22Z"}, "message": "Define __type_identity_t alias and use for string_view\n\nThis defines the equivalent of C++2a's std::type_identity_t alias but\nfor use in C++11 and later. This can be used to replace __detail::__idt\nin the string_view headers, which previously used common_type_t because\nthe one argument specialization of common_type_t was simply the identity\ntransform (which is no longer true).\n\n\t* include/experimental/string_view (__detail::__idt): Remove.\n\t(operator==, operator!=, operator<, operator>, operator<=, operator>=):\n\tUse __type_identity_t instead of __detail::__idt;\n\t* include/std/string_view (__detail::__idt): Remove.\n\t(operator==, operator!=, operator<, operator>, operator<=, operator>=):\n\tUse __type_identity_t instead of __detail::__idt;\n\t* include/std/type_traits (__type_identity_t): New alias template.\n\nFrom-SVN: r273442", "tree": {"sha": "0a3e3e4fa755a9d99125516c9b8dc0887c6e9004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a3e3e4fa755a9d99125516c9b8dc0887c6e9004"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d67cd380d37f2a28156d3430b9964a5df67a101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d67cd380d37f2a28156d3430b9964a5df67a101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d67cd380d37f2a28156d3430b9964a5df67a101", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d67cd380d37f2a28156d3430b9964a5df67a101/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "804e2d0631d11d036be3452f00a294c434f3570a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/804e2d0631d11d036be3452f00a294c434f3570a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/804e2d0631d11d036be3452f00a294c434f3570a"}], "stats": {"total": 100, "additions": 57, "deletions": 43}, "files": [{"sha": "668d80afa8bdafecdf52419754f72bf5b045c0e8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d67cd380d37f2a28156d3430b9964a5df67a101/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d67cd380d37f2a28156d3430b9964a5df67a101/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0d67cd380d37f2a28156d3430b9964a5df67a101", "patch": "@@ -1,5 +1,13 @@\n 2019-07-12  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/experimental/string_view (__detail::__idt): Remove.\n+\t(operator==, operator!=, operator<, operator>, operator<=, operator>=):\n+\tUse __type_identity_t instead of __detail::__idt;\n+\t* include/std/string_view (__detail::__idt): Remove.\n+\t(operator==, operator!=, operator<, operator>, operator<=, operator>=):\n+\tUse __type_identity_t instead of __detail::__idt;\n+\t* include/std/type_traits (__type_identity_t): New alias template.\n+\n \t* doc/xml/manual/status_cxx2020.xml: Update status for atomic_ref\n \tand floating point atomics.\n "}, {"sha": "84b2a3eb4023d934416fc9b3a7081f73266574f4", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d67cd380d37f2a28156d3430b9964a5df67a101/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d67cd380d37f2a28156d3430b9964a5df67a101/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=0d67cd380d37f2a28156d3430b9964a5df67a101", "patch": "@@ -436,14 +436,10 @@ inline namespace fundamentals_v1\n \n   // [string.view.comparison], non-member basic_string_view comparison functions\n \n-  namespace __detail\n-  {\n-    // Identity transform to create a non-deduced context, so that only one\n-    // argument participates in template argument deduction and the other\n-    // argument gets implicitly converted to the deduced type. See n3766.html.\n-    template<typename _Tp>\n-      using __idt = common_type_t<_Tp>;\n-  }\n+  // Several of these functions use type_identity_t to create a non-deduced\n+  // context, so that only one argument participates in template argument\n+  // deduction and the other argument gets implicitly converted to the deduced\n+  // type (see N3766).\n \n   template<typename _CharT, typename _Traits>\n     constexpr bool\n@@ -454,12 +450,13 @@ inline namespace fundamentals_v1\n   template<typename _CharT, typename _Traits>\n     constexpr bool\n     operator==(basic_string_view<_CharT, _Traits> __x,\n-               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n+    noexcept\n     { return __x.size() == __y.size() && __x.compare(__y) == 0; }\n \n   template<typename _CharT, typename _Traits>\n     constexpr bool\n-    operator==(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+    operator==(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.size() == __y.size() && __x.compare(__y) == 0; }\n \n@@ -472,12 +469,13 @@ inline namespace fundamentals_v1\n   template<typename _CharT, typename _Traits>\n     constexpr bool\n     operator!=(basic_string_view<_CharT, _Traits> __x,\n-               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n+    noexcept\n     { return !(__x == __y); }\n \n   template<typename _CharT, typename _Traits>\n     constexpr bool\n-    operator!=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+    operator!=(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return !(__x == __y); }\n \n@@ -490,12 +488,13 @@ inline namespace fundamentals_v1\n   template<typename _CharT, typename _Traits>\n     constexpr bool\n     operator< (basic_string_view<_CharT, _Traits> __x,\n-               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n+    noexcept\n     { return __x.compare(__y) < 0; }\n \n   template<typename _CharT, typename _Traits>\n     constexpr bool\n-    operator< (__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+    operator< (__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) < 0; }\n \n@@ -508,12 +507,13 @@ inline namespace fundamentals_v1\n   template<typename _CharT, typename _Traits>\n     constexpr bool\n     operator> (basic_string_view<_CharT, _Traits> __x,\n-               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n+    noexcept\n     { return __x.compare(__y) > 0; }\n \n   template<typename _CharT, typename _Traits>\n     constexpr bool\n-    operator> (__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+    operator> (__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) > 0; }\n \n@@ -526,12 +526,13 @@ inline namespace fundamentals_v1\n   template<typename _CharT, typename _Traits>\n     constexpr bool\n     operator<=(basic_string_view<_CharT, _Traits> __x,\n-               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n+    noexcept\n     { return __x.compare(__y) <= 0; }\n \n   template<typename _CharT, typename _Traits>\n     constexpr bool\n-    operator<=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+    operator<=(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) <= 0; }\n \n@@ -544,12 +545,13 @@ inline namespace fundamentals_v1\n   template<typename _CharT, typename _Traits>\n     constexpr bool\n     operator>=(basic_string_view<_CharT, _Traits> __x,\n-               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n+    noexcept\n     { return __x.compare(__y) >= 0; }\n \n   template<typename _CharT, typename _Traits>\n     constexpr bool\n-    operator>=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+    operator>=(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) >= 0; }\n "}, {"sha": "e8b6ed3af12f65006ca9a5cf8c37346a53367667", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d67cd380d37f2a28156d3430b9964a5df67a101/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d67cd380d37f2a28156d3430b9964a5df67a101/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=0d67cd380d37f2a28156d3430b9964a5df67a101", "patch": "@@ -459,14 +459,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // [string.view.comparison], non-member basic_string_view comparison function\n \n-  namespace __detail\n-  {\n-    // Identity transform to create a non-deduced context, so that only one\n-    // argument participates in template argument deduction and the other\n-    // argument gets implicitly converted to the deduced type. See n3766.html.\n-    template<typename _Tp>\n-      using __idt = common_type_t<_Tp>;\n-  }\n+  // Several of these functions use type_identity_t to create a non-deduced\n+  // context, so that only one argument participates in template argument\n+  // deduction and the other argument gets implicitly converted to the deduced\n+  // type (see N3766).\n \n   template<typename _CharT, typename _Traits>\n     constexpr bool\n@@ -477,12 +473,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits>\n     constexpr bool\n     operator==(basic_string_view<_CharT, _Traits> __x,\n-               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n+    noexcept\n     { return __x.size() == __y.size() && __x.compare(__y) == 0; }\n \n   template<typename _CharT, typename _Traits>\n     constexpr bool\n-    operator==(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+    operator==(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.size() == __y.size() && __x.compare(__y) == 0; }\n \n@@ -495,12 +492,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits>\n     constexpr bool\n     operator!=(basic_string_view<_CharT, _Traits> __x,\n-               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n+    noexcept\n     { return !(__x == __y); }\n \n   template<typename _CharT, typename _Traits>\n     constexpr bool\n-    operator!=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+    operator!=(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return !(__x == __y); }\n \n@@ -513,12 +511,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits>\n     constexpr bool\n     operator< (basic_string_view<_CharT, _Traits> __x,\n-               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n+    noexcept\n     { return __x.compare(__y) < 0; }\n \n   template<typename _CharT, typename _Traits>\n     constexpr bool\n-    operator< (__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+    operator< (__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) < 0; }\n \n@@ -531,12 +530,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits>\n     constexpr bool\n     operator> (basic_string_view<_CharT, _Traits> __x,\n-               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n+    noexcept\n     { return __x.compare(__y) > 0; }\n \n   template<typename _CharT, typename _Traits>\n     constexpr bool\n-    operator> (__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+    operator> (__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) > 0; }\n \n@@ -549,12 +549,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits>\n     constexpr bool\n     operator<=(basic_string_view<_CharT, _Traits> __x,\n-               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n+    noexcept\n     { return __x.compare(__y) <= 0; }\n \n   template<typename _CharT, typename _Traits>\n     constexpr bool\n-    operator<=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+    operator<=(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) <= 0; }\n \n@@ -567,12 +568,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits>\n     constexpr bool\n     operator>=(basic_string_view<_CharT, _Traits> __x,\n-               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n+    noexcept\n     { return __x.compare(__y) >= 0; }\n \n   template<typename _CharT, typename _Traits>\n     constexpr bool\n-    operator>=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+    operator>=(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) >= 0; }\n "}, {"sha": "d8ed1ce120da8f12b33aad15150163932109e84d", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d67cd380d37f2a28156d3430b9964a5df67a101/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d67cd380d37f2a28156d3430b9964a5df67a101/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=0d67cd380d37f2a28156d3430b9964a5df67a101", "patch": "@@ -92,9 +92,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct conditional;\n \n   template <typename _Type>\n-    struct __type_identity {\n-      using type = _Type;\n-    };\n+    struct __type_identity\n+    { using type = _Type; };\n+\n+  template<typename _Tp>\n+    using __type_identity_t = typename __type_identity<_Tp>::type;\n \n   template<typename...>\n     struct __or_;"}]}