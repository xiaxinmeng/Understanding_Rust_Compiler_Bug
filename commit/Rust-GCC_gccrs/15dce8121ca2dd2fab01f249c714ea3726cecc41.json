{"sha": "15dce8121ca2dd2fab01f249c714ea3726cecc41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVkY2U4MTIxY2EyZGQyZmFiMDFmMjQ5YzcxNGVhMzcyNmNlY2M0MQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2004-08-29T22:10:44Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2004-08-29T22:10:44Z"}, "message": "flow.c (REVERSE_CONDEXEC_PREDICATES_P): Use the whole comparison, not just the codes, call reversed_comparison_code ().\n\n* flow.c (REVERSE_CONDEXEC_PREDICATES_P): Use the whole comparison, not\njust the codes, call reversed_comparison_code ().\n(ior_reg_cond): Update arguments to REVERSE_CONDEXEC_PREDICATES_P.\n(not_reg_cond): Use reversed_comparison_code.\n(and_reg_cond): Likewise.\n* ifcvt.c (cond_exec_process_if_block): Likewise.\n* doc/tm.texi (REVERSE_CONDEXEC_PREDICATES_P): Update documentation.\n\nFrom-SVN: r86737", "tree": {"sha": "a4ec15aceec0b091ed501e69eca717c1e7b43626", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4ec15aceec0b091ed501e69eca717c1e7b43626"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15dce8121ca2dd2fab01f249c714ea3726cecc41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15dce8121ca2dd2fab01f249c714ea3726cecc41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15dce8121ca2dd2fab01f249c714ea3726cecc41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15dce8121ca2dd2fab01f249c714ea3726cecc41/comments", "author": null, "committer": null, "parents": [{"sha": "6903ecd4918625b0d1117747d1500079f4fb9a12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6903ecd4918625b0d1117747d1500079f4fb9a12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6903ecd4918625b0d1117747d1500079f4fb9a12"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "e4134edff1f6580e04668ec9c17ff4e3f8663f2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dce8121ca2dd2fab01f249c714ea3726cecc41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dce8121ca2dd2fab01f249c714ea3726cecc41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15dce8121ca2dd2fab01f249c714ea3726cecc41", "patch": "@@ -1,3 +1,13 @@\n+2004-08-29  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* flow.c (REVERSE_CONDEXEC_PREDICATES_P): Use the whole comparison, not\n+\tjust the codes, call reversed_comparison_code ().\n+\t(ior_reg_cond): Update arguments to REVERSE_CONDEXEC_PREDICATES_P.\n+\t(not_reg_cond): Use reversed_comparison_code.\n+\t(and_reg_cond): Likewise.\n+\t* ifcvt.c (cond_exec_process_if_block): Likewise.\n+\t* doc/tm.texi (REVERSE_CONDEXEC_PREDICATES_P): Update documentation.\n+\n 2004-08-29  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* sched-deps.c (get_condition): Rewrite using jump support functions."}, {"sha": "2a873985703e78a3c77382644b5c3479ea42ea03", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dce8121ca2dd2fab01f249c714ea3726cecc41/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dce8121ca2dd2fab01f249c714ea3726cecc41/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=15dce8121ca2dd2fab01f249c714ea3726cecc41", "patch": "@@ -5240,16 +5240,17 @@ like:\n @end smallexample\n @end defmac\n \n-@defmac REVERSE_CONDEXEC_PREDICATES_P (@var{code1}, @var{code2})\n+@defmac REVERSE_CONDEXEC_PREDICATES_P (@var{op1}, @var{op2})\n A C expression that returns true if the conditional execution predicate\n-@var{code1} is the inverse of @var{code2} and vice versa.  Define this to\n-return 0 if the target has conditional execution predicates that cannot be\n-reversed safely.  If no expansion is specified, this macro is defined as\n-follows:\n+@var{op1}, a comparison operation, is the inverse of @var{op2} and vice\n+versa.  Define this to return 0 if the target has conditional execution\n+predicates that cannot be reversed safely.  There is no need to validate\n+that the arguments of op1 and op2 are the same, this is done separately.\n+If no expansion is specified, this macro is defined as follows:\n \n @smallexample\n #define REVERSE_CONDEXEC_PREDICATES_P (x, y) \\\n-   ((x) == reverse_condition (y))\n+   (GET_CODE ((x)) == reversed_comparison_code ((y), NULL))\n @end smallexample\n @end defmac\n "}, {"sha": "abbac675b80135a7ac3efad89c9a7838f40054f2", "filename": "gcc/flow.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dce8121ca2dd2fab01f249c714ea3726cecc41/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dce8121ca2dd2fab01f249c714ea3726cecc41/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=15dce8121ca2dd2fab01f249c714ea3726cecc41", "patch": "@@ -160,7 +160,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #ifdef HAVE_conditional_execution\n #ifndef REVERSE_CONDEXEC_PREDICATES_P\n-#define REVERSE_CONDEXEC_PREDICATES_P(x, y) ((x) == reverse_condition (y))\n+#define REVERSE_CONDEXEC_PREDICATES_P(x, y) \\\n+  (GET_CODE ((x)) == reversed_comparison_code ((y), NULL))\n #endif\n #endif\n \n@@ -2996,7 +2997,7 @@ ior_reg_cond (rtx old, rtx x, int add)\n   if (COMPARISON_P (old))\n     {\n       if (COMPARISON_P (x)\n-\t  && REVERSE_CONDEXEC_PREDICATES_P (GET_CODE (x), GET_CODE (old))\n+\t  && REVERSE_CONDEXEC_PREDICATES_P (x, old)\n \t  && REGNO (XEXP (x, 0)) == REGNO (XEXP (old, 0)))\n \treturn const1_rtx;\n       if (GET_CODE (x) == GET_CODE (old)\n@@ -3079,22 +3080,19 @@ ior_reg_cond (rtx old, rtx x, int add)\n static rtx\n not_reg_cond (rtx x)\n {\n-  enum rtx_code x_code;\n-\n   if (x == const0_rtx)\n     return const1_rtx;\n   else if (x == const1_rtx)\n     return const0_rtx;\n-  x_code = GET_CODE (x);\n-  if (x_code == NOT)\n+  if (GET_CODE (x) == NOT)\n     return XEXP (x, 0);\n   if (COMPARISON_P (x)\n       && REG_P (XEXP (x, 0)))\n     {\n       if (XEXP (x, 1) != const0_rtx)\n \tabort ();\n \n-      return gen_rtx_fmt_ee (reverse_condition (x_code),\n+      return gen_rtx_fmt_ee (reversed_comparison_code (x, NULL),\n \t\t\t     VOIDmode, XEXP (x, 0), const0_rtx);\n     }\n   return gen_rtx_NOT (0, x);\n@@ -3108,7 +3106,7 @@ and_reg_cond (rtx old, rtx x, int add)\n   if (COMPARISON_P (old))\n     {\n       if (COMPARISON_P (x)\n-\t  && GET_CODE (x) == reverse_condition (GET_CODE (old))\n+\t  && GET_CODE (x) == reversed_comparison_code (old, NULL)\n \t  && REGNO (XEXP (x, 0)) == REGNO (XEXP (old, 0)))\n \treturn const0_rtx;\n       if (GET_CODE (x) == GET_CODE (old)"}, {"sha": "0767eb25008a537fa46c2309f3aacef0a0abfcd3", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dce8121ca2dd2fab01f249c714ea3726cecc41/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dce8121ca2dd2fab01f249c714ea3726cecc41/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=15dce8121ca2dd2fab01f249c714ea3726cecc41", "patch": "@@ -491,6 +491,7 @@ cond_exec_process_if_block (ce_if_block_t * ce_info,\n \t{\n \t  rtx start, end;\n \t  rtx t, f;\n+\t  enum rtx_code f_code;\n \n \t  bb = block_fallthru (bb);\n \t  start = first_active_insn (bb);\n@@ -510,11 +511,11 @@ cond_exec_process_if_block (ce_if_block_t * ce_info,\n \t  if (! t)\n \t    goto fail;\n \n-\t  f = gen_rtx_fmt_ee (reverse_condition (GET_CODE (t)),\n-\t\t\t      GET_MODE (t),\n-\t\t\t      XEXP (t, 0),\n-\t\t\t      XEXP (t, 1));\n+\t  f_code = reversed_comparison_code (t, BB_END (bb));\n+\t  if (f_code == UNKNOWN)\n+\t    goto fail;\n \n+\t  f = gen_rtx_fmt_ee (f_code, GET_MODE (t), XEXP (t, 0), XEXP (t, 1));\n \t  if (ce_info->and_and_p)\n \t    {\n \t      t = gen_rtx_AND (GET_MODE (t), true_expr, t);"}]}