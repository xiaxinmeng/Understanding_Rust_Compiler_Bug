{"sha": "234d14ac72066f06b8da319f98793d0614cda8b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM0ZDE0YWM3MjA2NmYwNmI4ZGEzMTlmOTg3OTNkMDYxNGNkYThiMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-07-05T08:02:59Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-07-05T08:02:59Z"}, "message": "target-insns.def (extv, [...]): New targetm instruction patterns.\n\ngcc/\n\t* target-insns.def (extv, extzv, insv): New targetm instruction\n\tpatterns.\n\t* optabs.c (get_extraction_insn): Use them instead of HAVE_*/gen_*\n\tinterface.\n\t* recog.c (simplify_while_replacing): Likewise.\n\nFrom-SVN: r225432", "tree": {"sha": "8452be0fccad152b18e253d19ca7348832f4a871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8452be0fccad152b18e253d19ca7348832f4a871"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/234d14ac72066f06b8da319f98793d0614cda8b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/234d14ac72066f06b8da319f98793d0614cda8b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/234d14ac72066f06b8da319f98793d0614cda8b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/234d14ac72066f06b8da319f98793d0614cda8b0/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89f7b21fb0dfb2b9c7339b44035df76e2265d489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f7b21fb0dfb2b9c7339b44035df76e2265d489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89f7b21fb0dfb2b9c7339b44035df76e2265d489"}], "stats": {"total": 52, "additions": 21, "deletions": 31}, "files": [{"sha": "be4471c9331d5d4b43052afd3a75d9b3afcfc5ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/234d14ac72066f06b8da319f98793d0614cda8b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/234d14ac72066f06b8da319f98793d0614cda8b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=234d14ac72066f06b8da319f98793d0614cda8b0", "patch": "@@ -1,3 +1,11 @@\n+2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target-insns.def (extv, extzv, insv): New targetm instruction\n+\tpatterns.\n+\t* optabs.c (get_extraction_insn): Use them instead of HAVE_*/gen_*\n+\tinterface.\n+\t* recog.c (simplify_while_replacing): Likewise.\n+\n 2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target-insns.def (doloop_begin, doloop_end): New targetm"}, {"sha": "6818458a23d886d226cea58c35cb234077f539a9", "filename": "gcc/optabs.c", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/234d14ac72066f06b8da319f98793d0614cda8b0/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/234d14ac72066f06b8da319f98793d0614cda8b0/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=234d14ac72066f06b8da319f98793d0614cda8b0", "patch": "@@ -8416,18 +8416,6 @@ expand_jump_insn (enum insn_code icode, unsigned int nops,\n }\n \n /* Reduce conditional compilation elsewhere.  */\n-#ifndef HAVE_insv\n-#define HAVE_insv\t0\n-#define CODE_FOR_insv\tCODE_FOR_nothing\n-#endif\n-#ifndef HAVE_extv\n-#define HAVE_extv\t0\n-#define CODE_FOR_extv\tCODE_FOR_nothing\n-#endif\n-#ifndef HAVE_extzv\n-#define HAVE_extzv\t0\n-#define CODE_FOR_extzv\tCODE_FOR_nothing\n-#endif\n \n /* Enumerates the possible types of structure operand to an\n    extraction_insn.  */\n@@ -8512,25 +8500,25 @@ get_extraction_insn (extraction_insn *insn,\n   switch (pattern)\n     {\n     case EP_insv:\n-      if (HAVE_insv\n+      if (targetm.have_insv ()\n \t  && get_traditional_extraction_insn (insn, type, mode,\n-\t\t\t\t\t      CODE_FOR_insv, 0, 3))\n+\t\t\t\t\t      targetm.code_for_insv, 0, 3))\n \treturn true;\n       return get_optab_extraction_insn (insn, type, mode, insv_optab,\n \t\t\t\t\tinsvmisalign_optab, 2);\n \n     case EP_extv:\n-      if (HAVE_extv\n+      if (targetm.have_extv ()\n \t  && get_traditional_extraction_insn (insn, type, mode,\n-\t\t\t\t\t      CODE_FOR_extv, 1, 0))\n+\t\t\t\t\t      targetm.code_for_extv, 1, 0))\n \treturn true;\n       return get_optab_extraction_insn (insn, type, mode, extv_optab,\n \t\t\t\t\textvmisalign_optab, 3);\n \n     case EP_extzv:\n-      if (HAVE_extzv\n+      if (targetm.have_extzv ()\n \t  && get_traditional_extraction_insn (insn, type, mode,\n-\t\t\t\t\t      CODE_FOR_extzv, 1, 0))\n+\t\t\t\t\t      targetm.code_for_extzv, 1, 0))\n \treturn true;\n       return get_optab_extraction_insn (insn, type, mode, extzv_optab,\n \t\t\t\t\textzvmisalign_optab, 3);"}, {"sha": "d96e29320985b3c49b8fc241c3880dd157713d32", "filename": "gcc/recog.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/234d14ac72066f06b8da319f98793d0614cda8b0/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/234d14ac72066f06b8da319f98793d0614cda8b0/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=234d14ac72066f06b8da319f98793d0614cda8b0", "patch": "@@ -566,15 +566,6 @@ cancel_changes (int num)\n }\n \n /* Reduce conditional compilation elsewhere.  */\n-#ifndef HAVE_extv\n-#define HAVE_extv\t0\n-#define CODE_FOR_extv\tCODE_FOR_nothing\n-#endif\n-#ifndef HAVE_extzv\n-#define HAVE_extzv\t0\n-#define CODE_FOR_extzv\tCODE_FOR_nothing\n-#endif\n-\n /* A subroutine of validate_replace_rtx_1 that tries to simplify the resulting\n    rtx.  */\n \n@@ -690,15 +681,15 @@ simplify_while_replacing (rtx *loc, rtx to, rtx_insn *object,\n \t  machine_mode is_mode = GET_MODE (XEXP (x, 0));\n \t  int pos = INTVAL (XEXP (x, 2));\n \n-\t  if (GET_CODE (x) == ZERO_EXTRACT && HAVE_extzv)\n+\t  if (GET_CODE (x) == ZERO_EXTRACT && targetm.have_extzv ())\n \t    {\n-\t      wanted_mode = insn_data[CODE_FOR_extzv].operand[1].mode;\n+\t      wanted_mode = insn_data[targetm.code_for_extzv].operand[1].mode;\n \t      if (wanted_mode == VOIDmode)\n \t\twanted_mode = word_mode;\n \t    }\n-\t  else if (GET_CODE (x) == SIGN_EXTRACT && HAVE_extv)\n+\t  else if (GET_CODE (x) == SIGN_EXTRACT && targetm.have_extv ())\n \t    {\n-\t      wanted_mode = insn_data[CODE_FOR_extv].operand[1].mode;\n+\t      wanted_mode = insn_data[targetm.code_for_extv].operand[1].mode;\n \t      if (wanted_mode == VOIDmode)\n \t\twanted_mode = word_mode;\n \t    }"}, {"sha": "4f49ba6cf57735c3dc46e018f45f4d6f87b8cc8b", "filename": "gcc/target-insns.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/234d14ac72066f06b8da319f98793d0614cda8b0/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/234d14ac72066f06b8da319f98793d0614cda8b0/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=234d14ac72066f06b8da319f98793d0614cda8b0", "patch": "@@ -42,6 +42,9 @@ DEF_TARGET_INSN (doloop_begin, (rtx x0, rtx x1))\n DEF_TARGET_INSN (doloop_end, (rtx x0, rtx x1))\n DEF_TARGET_INSN (epilogue, (void))\n DEF_TARGET_INSN (exception_receiver, (void))\n+DEF_TARGET_INSN (extv, (rtx x0, rtx x1, rtx x2, rtx x3))\n+DEF_TARGET_INSN (extzv, (rtx x0, rtx x1, rtx x2, rtx x3))\n+DEF_TARGET_INSN (insv, (rtx x0, rtx x1, rtx x2, rtx x3))\n DEF_TARGET_INSN (jump, (rtx x0))\n DEF_TARGET_INSN (load_multiple, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (mem_signal_fence, (rtx x0))"}]}