{"sha": "26f943fd3600236b05ab91a36f7ee8f1043c07af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZmOTQzZmQzNjAwMjM2YjA1YWI5MWEzNmY3ZWU4ZjEwNDNjMDdhZg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-12-05T23:20:00Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-12-05T23:20:00Z"}, "message": "c-common.c (shadow_warning): New function, moved from cp/decl.c.\n\n\t* c-common.c (shadow_warning): New function, moved from cp/decl.c.\n\t* c-common.h (shadow_warning): New.\n\t* c-decl.c: Include c-common.h.\n\t(warn_if_shadowing): New, broken out of pushdecl.\n\t(pushdecl): Use warn_if_shadowing.\n\t(store_parm_decls): Prevent duplicate -Wshadow warnings.\ncp:\n\t* decl.c: Include c-common.h.\n\t(shadow_warning): Move to c-common.c.\ntestsuite:\n\t* gcc.dg/Wshadow-1.c: New test.\n\nFrom-SVN: r47701", "tree": {"sha": "e2ef9f427adfe62b09b758c20b2ffdb1802526ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2ef9f427adfe62b09b758c20b2ffdb1802526ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26f943fd3600236b05ab91a36f7ee8f1043c07af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f943fd3600236b05ab91a36f7ee8f1043c07af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f943fd3600236b05ab91a36f7ee8f1043c07af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f943fd3600236b05ab91a36f7ee8f1043c07af/comments", "author": null, "committer": null, "parents": [{"sha": "8ca8f9a70b751319f7281564aa0ab0e93b3ef6e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca8f9a70b751319f7281564aa0ab0e93b3ef6e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ca8f9a70b751319f7281564aa0ab0e93b3ef6e2"}], "stats": {"total": 199, "additions": 139, "deletions": 60}, "files": [{"sha": "941d79568fa778f83ac1d286a2d9a0e0d2ca9af6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f943fd3600236b05ab91a36f7ee8f1043c07af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f943fd3600236b05ab91a36f7ee8f1043c07af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26f943fd3600236b05ab91a36f7ee8f1043c07af", "patch": "@@ -1,3 +1,12 @@\n+2001-12-05  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-common.c (shadow_warning): New function, moved from cp/decl.c.\n+\t* c-common.h (shadow_warning): New.\n+\t* c-decl.c: Include c-common.h.\n+\t(warn_if_shadowing): New, broken out of pushdecl.\n+\t(pushdecl): Use warn_if_shadowing.\n+\t(store_parm_decls): Prevent duplicate -Wshadow warnings.\n+\n Wed Dec  5 17:59:19 2001  Douglas B. Rupp  <rupp@gnat.com>\n \n \t* config/alpha/vms.h (SIZE_TYPE, PTRDIFF_TYPE): Remove, were disabled."}, {"sha": "29bb05948c1bda1f732e7ea24835d8c51ce9bf64", "filename": "gcc/c-common.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f943fd3600236b05ab91a36f7ee8f1043c07af/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f943fd3600236b05ab91a36f7ee8f1043c07af/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=26f943fd3600236b05ab91a36f7ee8f1043c07af", "patch": "@@ -4017,3 +4017,17 @@ c_common_insert_default_attributes (decl)\n #undef DEF_ATTR_TREE_LIST\n #undef DEF_FN_ATTR\n }\n+\n+/* Output a -Wshadow warning MSGID about NAME, an IDENTIFIER_NODE, and\n+   additionally give the location of the previous declaration DECL.  */\n+void\n+shadow_warning (msgid, name, decl)\n+     const char *msgid;\n+     tree name, decl;\n+{\n+  warning (\"declaration of `%s' shadows %s\", IDENTIFIER_POINTER (name), msgid);\n+  warning_with_file_and_line (DECL_SOURCE_FILE (decl),\n+\t\t\t      DECL_SOURCE_LINE (decl),\n+\t\t\t      \"shadowed declaration is here\");\n+}\n+"}, {"sha": "33835f653db4723af95c7f48010a5d01e4d34c20", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f943fd3600236b05ab91a36f7ee8f1043c07af/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f943fd3600236b05ab91a36f7ee8f1043c07af/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=26f943fd3600236b05ab91a36f7ee8f1043c07af", "patch": "@@ -330,6 +330,8 @@ extern tree walk_stmt_tree\t\t\tPARAMS ((tree *,\n extern void prep_stmt                           PARAMS ((tree));\n extern void expand_stmt                         PARAMS ((tree));\n extern void mark_stmt_tree                      PARAMS ((void *));\n+extern void shadow_warning\t\t\tPARAMS ((const char *,\n+\t\t\t\t\t\t\t tree, tree));\n \n /* Extra information associated with a DECL.  Other C dialects extend\n    this structure in various ways.  The C front-end only uses this"}, {"sha": "fb1d8e8653dc6ebad9324d1208c0388486dc5bec", "filename": "gcc/c-decl.c", "status": "modified", "additions": 72, "deletions": 45, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f943fd3600236b05ab91a36f7ee8f1043c07af/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f943fd3600236b05ab91a36f7ee8f1043c07af/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=26f943fd3600236b05ab91a36f7ee8f1043c07af", "patch": "@@ -45,6 +45,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"target.h\"\n #include \"debug.h\"\n #include \"timevar.h\"\n+#include \"c-common.h\"\n \n /* In grokdeclarator, distinguish syntactic contexts of declarators.  */\n enum decl_context\n@@ -280,6 +281,7 @@ static tree grokparms\t\t\tPARAMS ((tree, int));\n static void layout_array_type\t\tPARAMS ((tree));\n static tree c_make_fname_decl           PARAMS ((tree, int));\n static void c_expand_body               PARAMS ((tree, int, int));\n+static void warn_if_shadowing\t\tPARAMS ((tree, tree));\n \f\n /* C-specific option variables.  */\n \n@@ -2047,6 +2049,66 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n   return 1;\n }\n \n+/* Check whether decl-node X shadows an existing declaration.\n+   OLDLOCAL is the old IDENTIFIER_LOCAL_VALUE of the DECL_NAME of X,\n+   which might be a NULL_TREE.  */\n+static void\n+warn_if_shadowing (x, oldlocal)\n+     tree x, oldlocal;\n+{\n+  tree name;\n+\n+  if (DECL_EXTERNAL (x))\n+    return;\n+\n+  name = DECL_NAME (x);\n+\n+  /* Warn if shadowing an argument at the top level of the body.  */\n+  if (oldlocal != 0\n+      /* This warning doesn't apply to the parms of a nested fcn.  */\n+      && ! current_binding_level->parm_flag\n+      /* Check that this is one level down from the parms.  */\n+      && current_binding_level->level_chain->parm_flag\n+      /* Check that the decl being shadowed\n+\t comes from the parm level, one level up.  */\n+      && chain_member (oldlocal, current_binding_level->level_chain->names))\n+    {\n+      if (TREE_CODE (oldlocal) == PARM_DECL)\n+\tpedwarn (\"declaration of `%s' shadows a parameter\",\n+\t\t IDENTIFIER_POINTER (name));\n+      else\n+\tpedwarn (\"declaration of `%s' shadows a symbol from the parameter list\",\n+\t\t IDENTIFIER_POINTER (name));\n+    }\n+  /* Maybe warn if shadowing something else.  */\n+  else if (warn_shadow\n+\t   /* No shadow warnings for internally generated vars.  */\n+\t   && DECL_SOURCE_LINE (x) != 0\n+\t   /* No shadow warnings for vars made for inlining.  */\n+\t   && ! DECL_FROM_INLINE (x))\n+    {\n+      if (TREE_CODE (x) == PARM_DECL\n+\t  && current_binding_level->level_chain->parm_flag)\n+\t/* Don't warn about the parm names in function declarator\n+\t   within a function declarator.\n+\t   It would be nice to avoid warning in any function\n+\t   declarator in a declaration, as opposed to a definition,\n+\t   but there is no way to tell it's not a definition.  */\n+\t;\n+      else if (oldlocal)\n+\t{\n+\t  if (TREE_CODE (oldlocal) == PARM_DECL)\n+\t    shadow_warning (\"a parameter\", name, oldlocal);\n+\t  else\n+\t    shadow_warning (\"a previous local\", name, oldlocal);\n+\t}\n+      else if (IDENTIFIER_GLOBAL_VALUE (name) != 0\n+\t       && IDENTIFIER_GLOBAL_VALUE (name) != error_mark_node)\n+\tshadow_warning (\"a global declaration\", name,\n+\t\t\tIDENTIFIER_GLOBAL_VALUE (name));\n+    }\n+}\n+\n /* Record a decl-node X as belonging to the current lexical scope.\n    Check for errors (such as an incompatible declaration for the same\n    name already seen in the same scope).\n@@ -2431,49 +2493,7 @@ pushdecl (x)\n \t\tIDENTIFIER_LIMBO_VALUE (name) = x;\n \t    }\n \n-\t  /* Warn if shadowing an argument at the top level of the body.  */\n-\t  if (oldlocal != 0 && !DECL_EXTERNAL (x)\n-\t      /* This warning doesn't apply to the parms of a nested fcn.  */\n-\t      && ! current_binding_level->parm_flag\n-\t      /* Check that this is one level down from the parms.  */\n-\t      && current_binding_level->level_chain->parm_flag\n-\t      /* Check that the decl being shadowed\n-\t\t comes from the parm level, one level up.  */\n-\t      && chain_member (oldlocal, current_binding_level->level_chain->names))\n-\t    {\n-\t      if (TREE_CODE (oldlocal) == PARM_DECL)\n-\t\tpedwarn (\"declaration of `%s' shadows a parameter\",\n-\t\t\t IDENTIFIER_POINTER (name));\n-\t      else\n-\t\tpedwarn (\"declaration of `%s' shadows a symbol from the parameter list\",\n-\t\t\t IDENTIFIER_POINTER (name));\n-\t    }\n-\n-\t  /* Maybe warn if shadowing something else.  */\n-\t  else if (warn_shadow && !DECL_EXTERNAL (x)\n-\t\t   /* No shadow warnings for internally generated vars.  */\n-\t\t   && DECL_SOURCE_LINE (x) != 0\n-\t\t   /* No shadow warnings for vars made for inlining.  */\n-\t\t   && ! DECL_FROM_INLINE (x))\n-\t    {\n-\t      const char *id = IDENTIFIER_POINTER (name);\n-\n-\t      if (TREE_CODE (x) == PARM_DECL\n-\t\t  && current_binding_level->level_chain->parm_flag)\n-\t\t/* Don't warn about the parm names in function declarator\n-\t\t   within a function declarator.\n-\t\t   It would be nice to avoid warning in any function\n-\t\t   declarator in a declaration, as opposed to a definition,\n-\t\t   but there is no way to tell it's not a definition.  */\n-\t\t;\n-\t      else if (oldlocal != 0 && TREE_CODE (oldlocal) == PARM_DECL)\n-\t\twarning (\"declaration of `%s' shadows a parameter\", id);\n-\t      else if (oldlocal != 0)\n-\t\twarning (\"declaration of `%s' shadows previous local\", id);\n-\t      else if (IDENTIFIER_GLOBAL_VALUE (name) != 0\n-\t\t       && IDENTIFIER_GLOBAL_VALUE (name) != error_mark_node)\n-\t\twarning (\"declaration of `%s' shadows global declaration\", id);\n-\t    }\n+\t  warn_if_shadowing (x, oldlocal);\n \n \t  /* If storing a local value, there may already be one (inherited).\n \t     If so, record it for restoration when this binding level ends.  */\n@@ -6354,11 +6374,16 @@ store_parm_decls ()\n      then CONST_DECLs for foo and bar are put here.  */\n   tree nonparms = 0;\n \n+  /* The function containing FNDECL, if any.  */\n+  tree context = decl_function_context (fndecl);\n+\n   /* Nonzero if this definition is written with a prototype.  */\n   int prototype = 0;\n \n-  /* The function containing FNDECL, if any.  */\n-  tree context = decl_function_context (fndecl);\n+  int saved_warn_shadow = warn_shadow;\n+\n+  /* Don't re-emit shadow warnings.  */\n+  warn_shadow = 0;\n \n   if (specparms != 0 && TREE_CODE (specparms) != TREE_LIST)\n     {\n@@ -6758,6 +6783,8 @@ store_parm_decls ()\n      not safe to try to expand expressions involving them.  */\n   immediate_size_expand = 0;\n   cfun->x_dont_save_pending_sizes_p = 1;\n+\n+  warn_shadow = saved_warn_shadow;\n }\n \f\n /* Finish up a function declaration and compile that function"}, {"sha": "a0a3f49fb14de418f6651fdf396954cebdeed51a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f943fd3600236b05ab91a36f7ee8f1043c07af/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f943fd3600236b05ab91a36f7ee8f1043c07af/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=26f943fd3600236b05ab91a36f7ee8f1043c07af", "patch": "@@ -1,3 +1,8 @@\n+2001-12-05  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* decl.c: Include c-common.h.\n+\t(shadow_warning): Move to c-common.c.\n+\n Wed Dec  5 17:00:49 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* decl.c (duplicate_decls): Don't copy DECL_NO_CHECK_MEMORY_USAGE."}, {"sha": "2df8b229182227ec3aae3ceb4dc9677eb973422a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f943fd3600236b05ab91a36f7ee8f1043c07af/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f943fd3600236b05ab91a36f7ee8f1043c07af/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=26f943fd3600236b05ab91a36f7ee8f1043c07af", "patch": "@@ -45,6 +45,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n+#include \"c-common.h\"\n \n extern const struct attribute_spec *lang_attribute_table;\n \n@@ -147,7 +148,6 @@ static tree push_cp_library_fn PARAMS ((enum tree_code, tree));\n static tree build_cp_library_fn PARAMS ((tree, enum tree_code, tree));\n static void store_parm_decls PARAMS ((tree));\n static int cp_missing_noreturn_ok_p PARAMS ((tree));\n-static void shadow_warning PARAMS ((const char *, tree, tree));\n \n #if defined (DEBUG_CP_BINDING_LEVELS)\n static void indent PARAMS ((void));\n@@ -3787,20 +3787,6 @@ duplicate_decls (newdecl, olddecl)\n   return 1;\n }\n \n-/* Output a -Wshadow warning MSGID, if non-NULL, and give the location\n-   of the previous declaration.  */\n-static void\n-shadow_warning (msgid, name, decl)\n-     const char *msgid;\n-     tree name, decl;\n-{\n-  warning (\"declaration of `%s' shadows %s\", IDENTIFIER_POINTER (name), msgid);\n-  warning_with_file_and_line (DECL_SOURCE_FILE (decl),\n-\t\t\t      DECL_SOURCE_LINE (decl),\n-\t\t\t      \"shadowed declaration is here\");\n-}\n-\n-\n /* Record a decl-node X as belonging to the current lexical scope.\n    Check for errors (such as an incompatible declaration for the same\n    name already seen in the same scope)."}, {"sha": "3e9d657510ecad194df8621520231178d3de125b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f943fd3600236b05ab91a36f7ee8f1043c07af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f943fd3600236b05ab91a36f7ee8f1043c07af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26f943fd3600236b05ab91a36f7ee8f1043c07af", "patch": "@@ -1,3 +1,7 @@\n+2001-12-05  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* gcc.dg/Wshadow-1.c: New test.\n+\n 2001-12-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/compile/20011130-1.c: New test."}, {"sha": "63808aa9c8973f598c410c6bd676c82cd4d4a4d4", "filename": "gcc/testsuite/gcc.dg/Wshadow-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f943fd3600236b05ab91a36f7ee8f1043c07af/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f943fd3600236b05ab91a36f7ee8f1043c07af/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-1.c?ref=26f943fd3600236b05ab91a36f7ee8f1043c07af", "patch": "@@ -0,0 +1,32 @@\n+/* Copyright (C) 2001 Free Software Foundation, Inc.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wshadow -pedantic-errors\" } */\n+\n+/* Source: Neil Booth, 5 Dec 2001.  */\n+\n+int decl1;\t\t\t/* { dg-warning \"shadowed declaration\" } */\n+void foo (double decl1)\t\t/* { dg-warning \"shadows a global decl\" } */\n+{\t\t\t\t\n+}\n+\n+void foo1 (int d)\n+{\n+  double d;\t /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  /* { dg-error \"shadows a parameter\" \"\" { target *-*-* } 15 } */\n+}\n+\n+void foo2 (int d)\t\t/* { dg-warning \"shadowed declaration\" } */\n+{\n+  {\n+    double d;\t\t\t/* { dg-warning \"shadows a parameter\" } */\n+  }\n+}\n+\n+void foo3 ()\n+{\n+  int local;\t\t\t/* { dg-warning \"shadowed declaration\" } */\n+  {\n+    int local;\t\t\t/* { dg-warning \"shadows a previous local\" } */\n+  }\n+}"}]}