{"sha": "02f4ada4da5583b290c2e66351512b5076aa5061", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJmNGFkYTRkYTU1ODNiMjkwYzJlNjYzNTE1MTJiNTA3NmFhNTA2MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-27T19:45:24Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-27T19:45:24Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1316", "tree": {"sha": "13a85b22473ae64537fa44cd9f0497a26df54518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13a85b22473ae64537fa44cd9f0497a26df54518"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02f4ada4da5583b290c2e66351512b5076aa5061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f4ada4da5583b290c2e66351512b5076aa5061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f4ada4da5583b290c2e66351512b5076aa5061", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f4ada4da5583b290c2e66351512b5076aa5061/comments", "author": null, "committer": null, "parents": [{"sha": "47545f760f61285a89ccb88bf784ba2527c418b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47545f760f61285a89ccb88bf784ba2527c418b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47545f760f61285a89ccb88bf784ba2527c418b4"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "922e6c6fa2caf013157f106f1cb9610c2b7a46eb", "filename": "gcc/combine.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f4ada4da5583b290c2e66351512b5076aa5061/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f4ada4da5583b290c2e66351512b5076aa5061/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=02f4ada4da5583b290c2e66351512b5076aa5061", "patch": "@@ -1483,6 +1483,7 @@ try_combine (i3, i2, i1)\n \t  /* If I2DEST is a hard register or the only use of a pseudo,\n \t     we can change its mode.  */\n \t  if (GET_MODE (SET_DEST (newpat)) != GET_MODE (i2dest)\n+\t      && GET_MODE (SET_DEST (newpat)) != VOIDmode\n \t      && (REGNO (i2dest) < FIRST_PSEUDO_REGISTER\n \t\t  || (reg_n_sets[REGNO (i2dest)] == 1 && ! added_sets_2\n \t\t      && ! REG_USERVAR_P (i2dest))))\n@@ -2952,6 +2953,18 @@ subst (x, from, to, in_dest, unique_copy)\n \t     GET_MODE_BITSIZE (mode) - 1);\n \t  goto restart;\n \t}\n+\n+      /* If we are adding two things that have no bits in common, convert\n+\t the addition into an IOR.  This will often be further simplified,\n+\t for example in cases like ((a & 1) + (a & 2)), which can\n+\t become a & 3.  */\n+\n+      if ((significant_bits (XEXP (x, 0), mode)\n+\t   & significant_bits (XEXP (x, 1), mode)) == 0)\n+\t{\n+\t  x = gen_binary (IOR, mode, XEXP (x, 0), XEXP (x, 1));\n+\t  goto restart;\n+\t}\n       break;\n \n     case MINUS:\n@@ -2966,18 +2979,6 @@ subst (x, from, to, in_dest, unique_copy)\n \t\t\t\t      - INTVAL (XEXP (XEXP (x, 1), 1)) - 1);\n \t  goto restart;\n \t}\n-\n-      /* If we are adding two things that have no bits in common, convert\n-\t the addition into an IOR.  This will often be further simplified,\n-\t for example in cases like ((a & 1) + (a & 2)), which can\n-\t become a & 3.  */\n-\n-      if ((significant_bits (XEXP (x, 0), mode)\n-\t   & significant_bits (XEXP (x, 1), mode)) == 0)\n-\t{\n-\t  x = gen_binary (IOR, mode, XEXP (x, 0), XEXP (x, 1));\n-\t  goto restart;\n-\t}\n       break;\n \n     case MULT:"}]}