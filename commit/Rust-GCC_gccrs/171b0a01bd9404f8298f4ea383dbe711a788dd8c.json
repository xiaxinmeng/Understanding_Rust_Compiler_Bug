{"sha": "171b0a01bd9404f8298f4ea383dbe711a788dd8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcxYjBhMDFiZDk0MDRmODI5OGY0ZWEzODNkYmU3MTFhNzg4ZGQ4Yw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2018-04-28T19:54:08Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2018-04-28T19:54:08Z"}, "message": "DWARF: Add .debug_addr table header for dwarf_version >= 5.\n\nGNU DebugFission didn't add table headers for the .debug_addr\ntables, but DWARF5 does. The table header makes it possible\nfor a DWARF consumer to parse the address tables without having\nto index all .debug_info CUs first.\n\nWe can keep using the .debug_addr section label as is, because the\nDW_AT_[GNU_]addr_base attribute points at the actual address index,\nwhich starts right after the table header. So the label is generated\nat the correct location whether the header is added first or not.\n\nAdd DW_AT_addr_base instead of DW_AT_GNU_addr_base to the skeleton\nCU DIE for DWARF5.\n\ngcc/ChangeLog\n\n\t* dwarf2out.c (dwarf2out_finish): Add .debug_addr table header for\n\tdwarf_version >= 5.\n\t(dwarf_AT): Handle DW_AT_addr_base.\n\t(add_top_level_skeleton_die_attrs): Use dwarf_AT for DW_AT_addr_base.\n\nFrom-SVN: r259743", "tree": {"sha": "69f496434ddd94a5e56917bb3ac47e6a9d4699cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69f496434ddd94a5e56917bb3ac47e6a9d4699cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/171b0a01bd9404f8298f4ea383dbe711a788dd8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/171b0a01bd9404f8298f4ea383dbe711a788dd8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/171b0a01bd9404f8298f4ea383dbe711a788dd8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/171b0a01bd9404f8298f4ea383dbe711a788dd8c/comments", "author": null, "committer": null, "parents": [{"sha": "6754dfa2370c9f28fc7069e872b9a0fcddece8ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6754dfa2370c9f28fc7069e872b9a0fcddece8ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6754dfa2370c9f28fc7069e872b9a0fcddece8ca"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "56aec8f3352818d5600f740ce69043f093365de8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/171b0a01bd9404f8298f4ea383dbe711a788dd8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/171b0a01bd9404f8298f4ea383dbe711a788dd8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=171b0a01bd9404f8298f4ea383dbe711a788dd8c", "patch": "@@ -1,3 +1,10 @@\n+2018-04-28  Mark Wielaard  <mark@klomp.org>\n+\n+\t* dwarf2out.c (dwarf2out_finish): Add .debug_addr table header for\n+\tdwarf_version >= 5.\n+\t(dwarf_AT): Handle DW_AT_addr_base.\n+\t(add_top_level_skeleton_die_attrs): Use dwarf_AT for DW_AT_addr_base.\n+\n 2018-04-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/84431"}, {"sha": "d2d4ec009e769390750a000e937a305c1a6b9788", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/171b0a01bd9404f8298f4ea383dbe711a788dd8c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/171b0a01bd9404f8298f4ea383dbe711a788dd8c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=171b0a01bd9404f8298f4ea383dbe711a788dd8c", "patch": "@@ -1724,6 +1724,11 @@ dwarf_AT (enum dwarf_attribute at)\n \treturn DW_AT_GNU_dwo_name;\n       break;\n \n+    case DW_AT_addr_base:\n+      if (dwarf_version < 5)\n+\treturn DW_AT_GNU_addr_base;\n+      break;\n+\n     default:\n       break;\n     }\n@@ -11106,7 +11111,7 @@ add_top_level_skeleton_die_attrs (dw_die_ref die)\n   if (comp_dir != NULL)\n     add_skeleton_AT_string (die, DW_AT_comp_dir, comp_dir);\n   add_AT_pubnames (die);\n-  add_AT_lineptr (die, DW_AT_GNU_addr_base, debug_addr_section_label);\n+  add_AT_lineptr (die, dwarf_AT (DW_AT_addr_base), debug_addr_section_label);\n }\n \n /* Output skeleton debug sections that point to the dwo file.  */\n@@ -31293,6 +31298,24 @@ dwarf2out_finish (const char *)\n \t}\n \n       switch_to_section (debug_addr_section);\n+      /* GNU DebugFission https://gcc.gnu.org/wiki/DebugFission\n+\t which GCC uses to implement -gsplit-dwarf as DWARF GNU extension\n+\t before DWARF5, didn't have a header for .debug_addr units.\n+\t DWARF5 specifies a small header when address tables are used.  */\n+      if (dwarf_version >= 5)\n+\t{\n+\t  unsigned long addrs_length\n+\t    = addr_index_table->elements () * DWARF2_ADDR_SIZE + 4;\n+\n+\t  if (DWARF_INITIAL_LENGTH_SIZE - DWARF_OFFSET_SIZE == 4)\n+\t    dw2_asm_output_data (4, 0xffffffff,\n+\t\t\t\t \"Escape value for 64-bit DWARF extension\");\n+\t  dw2_asm_output_data (DWARF_OFFSET_SIZE, addrs_length,\n+\t\t\t       \"Length of Address Unit\");\n+\t  dw2_asm_output_data (2, 5, \"DWARF addr version\");\n+\t  dw2_asm_output_data (1, DWARF2_ADDR_SIZE, \"Size of Address\");\n+\t  dw2_asm_output_data (1, 0, \"Size of Segment Descriptor\");\n+\t}\n       ASM_OUTPUT_LABEL (asm_out_file, debug_addr_section_label);\n       output_addr_table ();\n     }"}]}