{"sha": "efd08ad579a1dea6409bd280cb5c263ed0849839", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZkMDhhZDU3OWExZGVhNjQwOWJkMjgwY2I1YzI2M2VkMDg0OTgzOQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-12-14T13:00:08Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-12-15T08:41:21Z"}, "message": "gcov: fix line output for nested functions in JSON format\n\ngcc/ChangeLog:\n\n\tPR gcov-profile/98273\n\t* gcov.c (output_json_intermediate_file): Use stack of nested\n\tfunctions for lines in a source file.  Pop when a function ends.", "tree": {"sha": "6cff7d4e2e6921e815733fb2c2ac5f18fe6042aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cff7d4e2e6921e815733fb2c2ac5f18fe6042aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efd08ad579a1dea6409bd280cb5c263ed0849839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd08ad579a1dea6409bd280cb5c263ed0849839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efd08ad579a1dea6409bd280cb5c263ed0849839", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd08ad579a1dea6409bd280cb5c263ed0849839/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23900be4d316be2d049378c094798982b7f0df9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23900be4d316be2d049378c094798982b7f0df9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23900be4d316be2d049378c094798982b7f0df9e"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "8dcec9432a62be6ba3b16adfef0b7aaea391ae73", "filename": "gcc/gcov.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd08ad579a1dea6409bd280cb5c263ed0849839/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd08ad579a1dea6409bd280cb5c263ed0849839/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=efd08ad579a1dea6409bd280cb5c263ed0849839", "patch": "@@ -1165,7 +1165,7 @@ output_json_intermediate_file (json::array *json_files, source_info *src)\n   json::array *lineso = new json::array ();\n   root->set (\"lines\", lineso);\n \n-  function_info *last_non_group_fn = NULL;\n+  vector<function_info *> last_non_group_fns;\n \n   for (unsigned line_num = 1; line_num <= src->lines.size (); line_num++)\n     {\n@@ -1177,7 +1177,7 @@ output_json_intermediate_file (json::array *json_files, source_info *src)\n \t     it2 != fns->end (); it2++)\n \t  {\n \t    if (!(*it2)->is_group)\n-\t      last_non_group_fn = *it2;\n+\t      last_non_group_fns.push_back (*it2);\n \n \t    vector<line_info> &lines = (*it2)->lines;\n \t    /* The LINES array is allocated only for group functions.  */\n@@ -1191,9 +1191,17 @@ output_json_intermediate_file (json::array *json_files, source_info *src)\n \n       /* Follow with lines associated with the source file.  */\n       if (line_num < src->lines.size ())\n-\toutput_intermediate_json_line (lineso, &src->lines[line_num], line_num,\n-\t\t\t\t       (last_non_group_fn != NULL\n-\t\t\t\t\t? last_non_group_fn->m_name : NULL));\n+\t{\n+\t  unsigned size = last_non_group_fns.size ();\n+\t  function_info *last_fn = size > 0 ? last_non_group_fns[size - 1] : NULL;\n+\t  const char *fname = last_fn ? last_fn->m_name : NULL;\n+\t  output_intermediate_json_line (lineso, &src->lines[line_num], line_num,\n+\t\t\t\t\t fname);\n+\n+\t  /* Pop ending function from stack.  */\n+\t  if (last_fn != NULL && last_fn->end_line == line_num)\n+\t    last_non_group_fns.pop_back ();\n+\t}\n     }\n }\n "}]}