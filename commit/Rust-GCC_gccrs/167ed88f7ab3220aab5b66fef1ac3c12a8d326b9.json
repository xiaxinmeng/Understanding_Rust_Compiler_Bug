{"sha": "167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY3ZWQ4OGY3YWIzMjIwYWFiNWI2NmZlZjFhYzNjMTJhOGQzMjZiOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-12-07T06:44:49Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-12-07T06:44:49Z"}, "message": "locale_facets.h (ctype): Remove _Ctype_nois and _Ctype and replace with common __ctype_abstract_base.\n\n\n2000-12-06  Benjamin Kosnik  <bkoz@kredhat.com>\n\n\t* include/bits/locale_facets.h (ctype): Remove _Ctype_nois and\n\t_Ctype and replace with common __ctype_abstract_base.\n\t(ctype<wchar_t>::_M_convert_to_wmask): Move to locale.cc.\n\t* config/os/gnu-linux/bits/ctype_noninline.h (ctype<char>::ctype):\n\tAnd here.\n\t* config/os/solaris/solaris2.7/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/solaris/solaris2.6/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/solaris/solaris2.5/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/newlib/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/irix/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/hpux/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/generic/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/aix/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/bsd/netbsd/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/bsd/freebsd/bits/ctype_noninline.h (ctype): Same.\n\t* src/locale-inst.cc: Clean instantiations.\n\t* src/locale.cc (ctype<char>): Add definitions here.\n\t(ctype<wchar_t>::_M_wmask): Move definitions here.\n\n\t* config/os/generic/bits/ctype_inline.h (ctype<char>::is):\n\tImplement in a generic way, with only \"C\" functionality and no\n\tknowlege of the target os.\n\t* config/os/generic/bits/os_defines.h: Change comments to C++ style.\n\t* testsuite/22_locale/ctype_char_members.cc (test01): Add tests.\n\n\t* include/bits/codecvt.h (ctype_byname): Remove specializations,\n\tas not required.\n\t* include/bits/localefwd.h (codecvt_byname): And here.\n\t* src/codecvt.cc: Remove codecvt_byname specializations.\n\n\t* include/c/bits/std_cstdio.h: Include c++config.h.\n\nFrom-SVN: r38100", "tree": {"sha": "f85bdfe4fbaf081d0d210ba2392500106495c57b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f85bdfe4fbaf081d0d210ba2392500106495c57b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/comments", "author": null, "committer": null, "parents": [{"sha": "1120a1d3273bf22a4f7e5fdb8d96d3ffd80457f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1120a1d3273bf22a4f7e5fdb8d96d3ffd80457f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1120a1d3273bf22a4f7e5fdb8d96d3ffd80457f8"}], "stats": {"total": 531, "additions": 251, "deletions": 280}, "files": [{"sha": "686a3501140e03d555d4bd2cd4a63f40ef23b265", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -1,3 +1,37 @@\n+2000-12-06  Benjamin Kosnik  <bkoz@kredhat.com>\n+\n+\t* include/bits/locale_facets.h (ctype): Remove _Ctype_nois and\n+\t_Ctype and replace with common __ctype_abstract_base.\n+\t(ctype<wchar_t>::_M_convert_to_wmask): Move to locale.cc.\n+\t* config/os/gnu-linux/bits/ctype_noninline.h (ctype<char>::ctype):\n+\tAnd here.\n+\t* config/os/solaris/solaris2.7/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/solaris/solaris2.6/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/solaris/solaris2.5/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/newlib/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/irix/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/hpux/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/generic/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/aix/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/bsd/netbsd/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/bsd/freebsd/bits/ctype_noninline.h (ctype): Same.\n+\t* src/locale-inst.cc: Clean instantiations.\n+\t* src/locale.cc (ctype<char>): Add definitions here. \n+\t(ctype<wchar_t>::_M_wmask): Move definitions here.\n+\t\n+\t* config/os/generic/bits/ctype_inline.h (ctype<char>::is):\n+\tImplement in a generic way, with only \"C\" functionality and no\n+\tknowlege of the target os.\n+\t* config/os/generic/bits/os_defines.h: Change comments to C++ style.\n+\t* testsuite/22_locale/ctype_char_members.cc (test01): Add tests.\n+\t\n+\t* include/bits/codecvt.h (ctype_byname): Remove specializations,\n+\tas not required.\n+\t* include/bits/localefwd.h (codecvt_byname): And here.\n+\t* src/codecvt.cc: Remove codecvt_byname specializations.\n+\t\n+\t* include/c/bits/std_cstdio.h: Include c++config.h.\n+\n 2000-12-06  Phil Edwards  <pme@sources.redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_CHECK_*_DECL_AND_LINKAGE_*):  Pre-test\n@@ -15,7 +49,7 @@\n \t* configure.target (*-*-freebsd, *-*-netbsd): Correct paths to \n \tos_include_dir.\n \n-Tue Dec  5 20:24:15 2000  Jeffrey A Law  (law@cygnus.com)\n+2000-12-05  Jeffrey A Law  <law@cygnus.com>\n \n \t* configure.target (hpux): Set os_include_dir.\n \t* config/os/hpux/bits/ctype_base.h: New file"}, {"sha": "54f546c75cb29b63cc863e4bbd6ee651f5224d31", "filename": "libstdc++-v3/config/os/aix/bits/ctype_noninline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_noninline.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -35,7 +35,7 @@\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n \tsize_t __refs = 0) \n-    : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n+    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(NULL), _M_tolower(NULL),\n       _M_ctable(NULL), _M_table(__table == 0 ? _M_ctable: __table) \n     { }"}, {"sha": "5de223ba8529c08e52329c6ecf8cbac204382253", "filename": "libstdc++-v3/config/os/bsd/freebsd/bits/ctype_noninline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_noninline.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -35,7 +35,7 @@\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n \tsize_t __refs = 0) \n-    : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n+    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(NULL), _M_tolower(NULL),\n       _M_ctable(NULL), _M_table(__table == 0 ? _M_ctable: __table) \n     { }"}, {"sha": "395c066da53f6e10a0719a3043135416380dfa87", "filename": "libstdc++-v3/config/os/bsd/netbsd/bits/ctype_noninline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fctype_noninline.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -35,7 +35,7 @@\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n \tsize_t __refs = 0) \n-    : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n+    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(NULL), _M_tolower(NULL),\n       _M_ctable(NULL), _M_table(__table == 0 ? (_ctype_ + 1) : __table) \n     { }"}, {"sha": "20648a1dcbf24ddd75159f0949fa17aaf91e2514", "filename": "libstdc++-v3/config/os/generic/bits/ctype_inline.h", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_inline.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -34,11 +34,57 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n   \n+// The following definitions are portable, but insanely slow. If one\n+// cares at all about performance, then specialized ctype\n+// functionality should be added for the native os in question: see\n+// the config/os/bits/ctype_*.h files.\n+\n   bool\n   ctype<char>::\n   is(mask __m, char __c) const throw()\n-  { return _M_table[(unsigned char)(__c)] & __m; }\n-\n+  { \n+    bool __ret = false;\n+    switch (__m)\n+      {\n+      case space:\n+\t__ret = isspace(__c);\n+\tbreak;\n+      case print:\n+\t__ret = isprint(__c);\n+\tbreak;\n+      case cntrl:\n+\t__ret = iscntrl(__c);\n+\tbreak;\n+      case upper:\n+\t__ret = isupper(__c);\n+\tbreak;\n+      case lower:\n+\t__ret = islower(__c);\n+\tbreak;\n+      case alpha:\n+\t__ret = isalpha(__c);\n+\tbreak;\n+      case digit:\n+\t__ret = isdigit(__c);\n+\tbreak;\n+      case punct:\n+\t__ret = ispunct(__c);\n+\tbreak;\n+      case xdigit:\n+\t__ret = isxdigit(__c);\n+\tbreak;\n+      case alnum:\n+\t__ret = isalnum(__c);\n+\tbreak;\n+      case graph:\n+\t__ret = isgraph(__c);\n+\tbreak;\n+      default:\n+\tbreak;\n+      }\n+    return __ret;\n+  }\n+   \n   const char*\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const throw()"}, {"sha": "38edd40c7a9122c18ea3bae78f8fa60366b8723f", "filename": "libstdc++-v3/config/os/generic/bits/ctype_noninline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_noninline.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -35,7 +35,7 @@\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n \tsize_t __refs = 0) \n-    : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n+    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(NULL), _M_tolower(NULL),\n       _M_ctable(NULL), _M_table(__table == 0 ? _M_ctable: __table) \n     { }"}, {"sha": "5c99e09428cb89e2389c55640d55d2e07d33657f", "filename": "libstdc++-v3/config/os/generic/bits/os_defines.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fos_defines.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -31,11 +31,7 @@\n #ifndef _GLIBCPP_OS_DEFINES\n #  define _GLIBCPP_OS_DEFINES\n \n-\n-/* System-specific #define, typedefs, corrections, etc, go here.  This\n-   file will come before all others. */\n-\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n \n #endif\n-\n-"}, {"sha": "a03af5932223ceee70f866478758558900591144", "filename": "libstdc++-v3/config/os/gnu-linux/bits/ctype_noninline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -40,7 +40,7 @@\n #endif\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n-    : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n+    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),\n       _M_ctable(__ctype_b), _M_table(__table == 0 ? _M_ctable: __table) \n     { }"}, {"sha": "38edd40c7a9122c18ea3bae78f8fa60366b8723f", "filename": "libstdc++-v3/config/os/hpux/bits/ctype_noninline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fbits%2Fctype_noninline.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -35,7 +35,7 @@\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n \tsize_t __refs = 0) \n-    : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n+    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(NULL), _M_tolower(NULL),\n       _M_ctable(NULL), _M_table(__table == 0 ? _M_ctable: __table) \n     { }"}, {"sha": "0fb25d189c0c963db524426eec564673846c16e1", "filename": "libstdc++-v3/config/os/irix/bits/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fbits%2Fctype_noninline.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -35,10 +35,8 @@\n \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n \tsize_t __refs = 0)\n-    : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n-      _M_toupper(NULL),\n-      _M_tolower(NULL),\n-      _M_ctable(NULL), \n+    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+      _M_toupper(NULL), _M_tolower(NULL), _M_ctable(NULL), \n       _M_table(!__table\n \t       ? (const mask*) (__libc_attr._ctype_tbl->_class + 1)\n \t       : __table) "}, {"sha": "30494d34b30738ddf0ebd311d2422c97341f2ba3", "filename": "libstdc++-v3/config/os/newlib/bits/ctype_noninline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_noninline.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -35,7 +35,7 @@\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n \tsize_t __refs = 0) \n-    : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n+    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(NULL), _M_tolower(NULL),\n       _M_ctable(_ctype_), _M_table(__table == 0 ? _M_ctable: __table) \n     { }"}, {"sha": "867607742b860f7c65281b9b14bd1202fda61869", "filename": "libstdc++-v3/config/os/solaris/solaris2.5/bits/ctype_noninline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_noninline.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -35,7 +35,7 @@\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n \tsize_t __refs = 0) \n-    : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n+    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(NULL), _M_tolower(NULL),\n       _M_ctable(__ctype), _M_table(__table == 0 ? _M_ctable: __table) \n     { }"}, {"sha": "29ecc9eb7a1e55515414ce6342e2c3d9a6094b7a", "filename": "libstdc++-v3/config/os/solaris/solaris2.6/bits/ctype_noninline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_noninline.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -35,7 +35,7 @@\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n \tsize_t __refs = 0) \n-    : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n+    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n       _M_ctable(__ctype_mask), _M_table(__table == 0 ? _M_ctable: __table) \n     { }"}, {"sha": "ae3d6fb07beaeabac7ff43194e7e6067bc418763", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/bits/ctype_noninline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_noninline.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -35,7 +35,7 @@\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n \tsize_t __refs = 0)\n-    : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n+    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n       _M_ctable(__ctype_mask), _M_table(__table == 0 ? _M_ctable: __table) \n     { }"}, {"sha": "8b90b94bfb3640f7c62cf907e6f8126f3f2239e9", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 5, "deletions": 34, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -385,11 +385,11 @@ namespace std\n   // in the future.  Using this adaptor, g++ will do the work for us.\n   template<typename _T>\n     inline size_t\n-    __iconv_adaptor(size_t(*iconv_func)(iconv_t, _T, size_t *, char**, size_t*),\n-                    iconv_t cd, char **inbuf, size_t *inbytesleft,\n-                    char **outbuf, size_t *outbytesleft)\n+    __iconv_adaptor(size_t(*iconv_func)(iconv_t, _T, size_t*, char**, size_t*),\n+                    iconv_t cd, char** inbuf, size_t* inbytesleft,\n+                    char** outbuf, size_t* outbytesleft)\n     {\n-      return iconv_func (cd, (_T)inbuf, inbytesleft, outbuf, outbytesleft);\n+      return iconv_func(cd, (_T)inbuf, inbytesleft, outbuf, outbytesleft);\n     }\n \n   template<typename _InternT, typename _ExternT>\n@@ -709,40 +709,11 @@ namespace std\n     public:\n       explicit \n       codecvt_byname(const char*, size_t __refs = 0) \n-      : codecvt<_InternT,_ExternT,_StateT> (__refs) { }\n+      : codecvt<_InternT, _ExternT, _StateT>(__refs) { }\n     protected:\n       virtual \n       ~codecvt_byname() { }\n     };\n-\n-  template<>\n-    class codecvt_byname<char, char, mbstate_t>\n-    : public codecvt<char, char, mbstate_t>\n-    {\n-    public:\n-      explicit \n-      codecvt_byname(const char*, size_t __refs = 0);\n-\n-    protected:\n-      virtual \n-      ~codecvt_byname();\n-    };\n-  \n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  template<>\n-    class codecvt_byname<wchar_t, char, mbstate_t>\n-      : public codecvt<wchar_t, char, mbstate_t>\n-    {\n-    public:\n-      explicit \n-      codecvt_byname(const char*, size_t __refs = 0);\n-\n-    protected:\n-      virtual \n-      ~codecvt_byname();\n-    };\n-#endif\n-\n } // namespace std\n \n #endif // _CPP_BITS_CODECVT_H"}, {"sha": "e7ba4941f56edac50fbb909c8a546905b95b0f14", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 61, "deletions": 197, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -40,8 +40,8 @@\n #include <typeinfo> \t\t// For bad_cast, which shouldn't be here.\n #include <bits/std_ios.h>\t// For ios_base\n #ifdef _GLIBCPP_USE_WCHAR_T\n-#include <bits/std_cwctype.h>\t// For wctype_t\n-#endif /* _GLIBCPP_USE_WCHAR_T */\n+# include <bits/std_cwctype.h>\t// For wctype_t\n+#endif \n \n namespace std\n {\n@@ -83,15 +83,30 @@ namespace std\n   #include <bits/ctype_base.h>\n \n   // 22.2.1.1  Template class ctype\n-  // _Ctype_nois is the common base for ctype<char>.  It lacks \"do_is\"\n-  // and related virtuals.  These are filled in by _Ctype, below.\n+  // __ctype_abstract_base is the common base for ctype<_CharT>.  \n   template<typename _CharT>\n-    class _Ctype_nois : public locale::facet, public ctype_base\n+    class __ctype_abstract_base : public locale::facet, public ctype_base\n     {\n     public:\n       // Types:\n       typedef _CharT char_type;\n \n+      bool \n+      is(mask __m, char_type __c) const\n+      { return this->do_is(__m, __c); }\n+\n+      const char_type*\n+      is(const char_type *__lo, const char_type *__hi, mask *__vec) const   \n+      { return this->do_is(__lo, __hi, __vec); }\n+\n+      const char_type*\n+      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const\n+      { return this->do_scan_is(__m, __lo, __hi); }\n+\n+      const char_type*\n+      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const\n+      { return this->do_scan_not(__m, __lo, __hi); }\n+\n       char_type \n       toupper(char_type __c) const\n       { return this->do_toupper(__c); }\n@@ -127,11 +142,26 @@ namespace std\n \n     protected:\n       explicit \n-      _Ctype_nois(size_t __refs = 0): locale::facet(__refs) { }\n+      __ctype_abstract_base(size_t __refs = 0): locale::facet(__refs) { }\n \n       virtual \n-      ~_Ctype_nois() { }\n+      ~__ctype_abstract_base() { }\n       \n+      virtual bool \n+      do_is(mask __m, char_type __c) const = 0;\n+\n+      virtual const char_type*\n+      do_is(const char_type* __lo, const char_type* __hi, \n+\t    mask* __vec) const = 0;\n+\n+      virtual const char_type*\n+      do_scan_is(mask __m, const char_type* __lo, \n+\t\t const char_type* __hi) const = 0;\n+\n+      virtual const char_type*\n+      do_scan_not(mask __m, const char_type* __lo, \n+\t\t  const char_type* __hi) const = 0;\n+\n       virtual char_type \n       do_toupper(char_type) const = 0;\n \n@@ -159,163 +189,28 @@ namespace std\n \t\t char __dfault, char* __dest) const = 0;\n     };\n \n-\n+  // NB: Generic, mostly useless implementation.\n   template<typename _CharT>\n-    class _Ctype : public _Ctype_nois<_CharT>\n+    class ctype : public __ctype_abstract_base<_CharT>\n     {\n     public:\n       // Types:\n-      typedef _CharT \t\t\t\t\tchar_type;\n-      typedef typename _Ctype_nois<_CharT>::mask \tmask;\n-\n-      bool \n-      is(mask __m, char_type __c) const\n-      { return this->do_is(__m, __c); }\n+      typedef _CharT \t\t  \tchar_type;\n+      typedef typename ctype::mask \tmask;\n \n-      const char_type*\n-      is(const char_type *__lo, const char_type *__hi, mask *__vec) const   \n-      { return this->do_is(__lo, __hi, __vec); }\n-\n-      const char_type*\n-      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const\n-      { return this->do_scan_is(__m, __lo, __hi); }\n-\n-      const char_type*\n-      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const\n-      { return this->do_scan_not(__m, __lo, __hi); }\n-\n-    protected:\n       explicit \n-      _Ctype(size_t __refs = 0) : _Ctype_nois<_CharT>(__refs) { }\n-\n-      virtual \n-      ~_Ctype() { }\n-\n-      virtual bool \n-      do_is(mask __m, char_type __c) const = 0;\n-\n-      virtual const char_type*\n-      do_is(const char_type* __lo, const char_type* __hi, \n-\t    mask* __vec) const = 0;\n-\n-      virtual const char_type*\n-      do_scan_is(mask __m, const char_type* __lo, \n-\t\t const char_type* __hi) const = 0;\n-\n-      virtual const char_type*\n-      do_scan_not(mask __m, const char_type* __lo, \n-\t\t  const char_type* __hi) const = 0;\n-    };\n-\n-  template<typename _CharT>\n-    class ctype : public _Ctype<_CharT>\n-    {\n-    public:\n-      // Types:\n-      typedef _CharT \t\t\t\t\tchar_type;\n-      typedef typename ctype::mask \t\t\tmask;\n-\n-      explicit \n-      ctype(size_t __refs = 0) : _Ctype<_CharT>(__refs) { }\n+      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }\n \n       static locale::id id;\n \n    protected:\n       virtual \n       ~ctype() { }\n-\n-      virtual bool \n-      do_is(mask, char_type) const\n-      {\n-\t// XXX Need definitions for these abstract mf's.\n-\treturn true;\n-      }\n-\n-      virtual const char_type*\n-      do_is(const char_type*  __lo, const char_type*, mask*) const\n-      {\n-\t// XXX Need definitions for these abstract mf's.\n-\treturn __lo;\n-      }\n-\n-      virtual const char_type*\n-      do_scan_is(mask, const char_type* __lo, const char_type*) const\n-      {\n-\t// XXX Need definitions for these abstract mf's.\n-\treturn __lo;\n-      }\n-\n-      virtual const char_type*\n-      do_scan_not(mask, const char_type* __lo, const char_type*) const\n-      {\n-\t// XXX Need definitions for these abstract mf's.\n-\treturn __lo;\n-      }\n-\n-      virtual char_type \n-      do_toupper(char_type __c) const\n-      {\n-\t// XXX Need definitions for these abstract mf's.\n-\treturn __c;\n-      }\n-\n-      virtual const char_type*\n-      do_toupper(char_type* __lo, const char_type*) const\n-      {\n-\t// XXX Need definitions for these abstract mf's.\n-\treturn __lo;\n-      }\n-\n-      virtual char_type \n-      do_tolower(char_type __c) const\n-      {\n-\t// XXX Need definitions for these abstract mf's.\n-\treturn __c;\n-      }\n-\n-      virtual const char_type*\n-      do_tolower(char_type* __lo, const char_type*) const\n-      {\n-\t// XXX Need definitions for these abstract mf's.\n-\treturn __lo;\n-      }\n-      \n-      virtual char_type \n-      do_widen(char __c) const\n-      {\n-\t// XXX Need definitions for these abstract mf's.\n-\treturn __c;\n-      }\n-\n-      virtual const char*\n-      do_widen(const char* __lo, const char*, char_type*) const\n-      {\n-\t// XXX Need definitions for these abstract mf's.\n-\treturn __lo;\n-      }\n-\n-      virtual char \n-      do_narrow(char_type, char __c) const\n-      {\n-\t// XXX Need definitions for these abstract mf's.\n-\treturn __c;\n-      }\n-\n-      virtual const char_type*\n-      do_narrow(const char_type* __lo, const char_type*, char, char*) const\n-      {\n-\t// XXX Need definitions for these abstract mf's.\n-\treturn __lo;\n-      }\n     };\n \n-\n   // 22.2.1.3  ctype specializations\n-  // NB: Can use _Ctype_nois to actually implement the \"is\"\n-  // functionality in the non-virtual (thus inline-able) member\n-  // fuctions.\n   template<>\n-    class ctype<char> : public _Ctype_nois<char>\n+    class ctype<char> : public __ctype_abstract_base<char>\n     {\n     public:\n       // Types:\n@@ -363,6 +258,21 @@ namespace std\n       classic_table() throw()\n       { return _M_ctable; }\n \n+      virtual bool \n+      do_is(mask __m, char_type __c) const;\n+\n+      virtual const char_type*\n+      do_is(const char_type* __lo, const char_type* __hi, \n+\t    mask* __vec) const;\n+\n+      virtual const char_type*\n+      do_scan_is(mask __m, const char_type* __lo, \n+\t\t const char_type* __hi) const;\n+\n+      virtual const char_type*\n+      do_scan_not(mask __m, const char_type* __lo, \n+\t\t  const char_type* __hi) const;\n+\n       virtual char_type \n       do_toupper(char_type) const;\n \n@@ -397,7 +307,7 @@ namespace std\n #ifdef _GLIBCPP_USE_WCHAR_T\n   // ctype<wchar_t> specialization\n   template<>\n-    class ctype<wchar_t> : public _Ctype<wchar_t>\n+    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>\n     {\n     public:\n       // Types:\n@@ -413,49 +323,7 @@ namespace std\n \n     protected:\n       __wmask_type\n-      _M_convert_to_wmask(const mask __m) const\n-      {\n-\t__wmask_type __ret;\n-\tswitch (__m)\n-\t  {\n-\t  case space:\n-\t    __ret = wctype(\"space\");\n-\t    break;\n-\t  case print:\n-\t    __ret = wctype(\"print\");\n-\t    break;\n-\t  case cntrl:\n-\t    __ret = wctype(\"cntrl\");\n-\t    break;\n-\t  case upper:\n-\t    __ret = wctype(\"upper\");\n-\t    break;\n-\t  case lower:\n-\t    __ret = wctype(\"lower\");\n-\t    break;\n-\t  case alpha:\n-\t    __ret = wctype(\"alpha\");\n-\t    break;\n-\t  case digit:\n-\t    __ret = wctype(\"digit\");\n-\t    break;\n-\t  case punct:\n-\t    __ret = wctype(\"punct\");\n-\t    break;\n-\t  case xdigit:\n-\t    __ret = wctype(\"xdigit\");\n-\t    break;\n-\t  case alnum:\n-\t    __ret = wctype(\"alnum\");\n-\t    break;\n-\t  case graph:\n-\t    __ret = wctype(\"graph\");\n-\t    break;\n-\t  default:\n-\t    __ret = 0;\n-\t  }\n-\treturn __ret;\n-      };\n+      _M_convert_to_wmask(const mask __m) const;\n \n       virtual \n       ~ctype();\n@@ -526,13 +394,9 @@ namespace std\n       ~ctype_byname() { }\n     };\n \n-  //  22.2.1.4  Class ctype_byname specializations\n+  // 22.2.1.4  Class ctype_byname specialization\n   template<>\n     ctype_byname<char>::ctype_byname(const char*, size_t refs);\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  template<>\n-    ctype_byname<wchar_t>::ctype_byname(const char*, size_t refs);\n-#endif\n \n \n   template<typename _CharT, typename _InIter>"}, {"sha": "be2908c80428bb262acdb0b8c9603a17688eb45e", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -153,10 +153,6 @@ namespace std\n \n   template<typename _InternT, typename _ExternT, typename _StateT>\n     class codecvt_byname;\n-  template<> class codecvt_byname<char, char, mbstate_t>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  template<> class codecvt_byname<wchar_t, char, mbstate_t>;\n-#endif\n \n   // 22.2.2 and 22.2.3 numeric\n   template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >"}, {"sha": "60ed76d24f9d0c0a7ba8ffa1b237b99ba7500c56", "filename": "libstdc++-v3/include/c/bits/std_cstdio.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdio.h?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -36,6 +36,7 @@\n #ifndef _CPP_CSTDIO\n #define _CPP_CSTDIO 1\n \n+#include <bits/c++config.h>\n #include <bits/std_cstdarg.h>\n \n #pragma GCC system_header"}, {"sha": "cfc76821ac2b9bf7a41d74b137319730ff9ed26e", "filename": "libstdc++-v3/src/codecvt.cc", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -105,13 +105,6 @@ namespace std {\n   do_max_length() const throw() \n   { return 1; }\n   \n-  codecvt_byname<char, char, mbstate_t>::\n-  codecvt_byname(const char* /*__s*/, size_t __refs)\n-  : codecvt<char, char, mbstate_t>(__refs) { }\n-\n-  codecvt_byname<char, char, mbstate_t>::\n-  ~codecvt_byname() { }\n-\n #ifdef _GLIBCPP_USE_WCHAR_T\n   // codecvt<wchar_t, char, mbstate_t> required specialization\n   locale::id codecvt<wchar_t, char, mbstate_t>::id;\n@@ -210,13 +203,6 @@ namespace std {\n   codecvt<wchar_t, char, mbstate_t>::\n   do_max_length() const throw()\n   { return 1; }\n-\n-  codecvt_byname<wchar_t, char, mbstate_t>::\n-  codecvt_byname(const char* /*__s*/, size_t __refs)\n-  : codecvt<wchar_t, char, mbstate_t> (__refs) { }\n-  \n-  codecvt_byname<wchar_t, char, mbstate_t>::\n-  ~codecvt_byname() { }\n #endif //  _GLIBCPP_USE_WCHAR_T\n \n } // namespace std"}, {"sha": "5531bc8e907701e698281eeddd030e3969880493", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -118,20 +118,20 @@ namespace std {\n #endif\n   \n   // ctype\n-  //  template class ctype<unsigned char>; // No definitions avail.\n-  //  template class ctype<signed char>; // No definitions avail.\n-  template class _Ctype<char>;\n-  template class _Ctype_nois<char>;\n+  template class __ctype_abstract_base<char>;\n   template class ctype_byname<char>;\n #ifdef _GLIBCPP_USE_WCHAR_T\n-  template class _Ctype<wchar_t>;\n-  template class _Ctype_nois<wchar_t>;\n+  template class __ctype_abstract_base<wchar_t>;\n   template class ctype_byname<wchar_t>;\n #endif\n   \n   // codecvt\n   template class __codecvt_abstract_base<char, char, mbstate_t>;\n   template class __codecvt_abstract_base<wchar_t, char, mbstate_t>;\n+  template class codecvt_byname<char, char, mbstate_t>;\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template class codecvt_byname<wchar_t, char, mbstate_t>;\n+#endif\n \n   // collate\n   template class _Collate<char>;"}, {"sha": "7cdbd540c7a52b618179edfa283ba9d56f84ad61", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -788,6 +788,23 @@ namespace std {\n   ctype<char>::~ctype()\n   { if (_M_del) delete[] this->table(); }\n \n+  // These are dummy placeholders as these virtual functions are never called.\n+  bool \n+  ctype<char>::do_is(mask, char_type) const \n+  { return false; }\n+  \n+  const char*\n+  ctype<char>::do_is(const char_type* __c, const char_type*, mask*) const \n+  { return __c; }\n+  \n+  const char*\n+  ctype<char>::do_scan_is(mask, const char_type* __c, const char_type*) const \n+  { return __c; }\n+\n+  const char* \n+  ctype<char>::do_scan_not(mask, const char_type* __c, const char_type*) const\n+  { return __c; }\n+\n   char\n   ctype<char>::do_widen(char __c) const\n   { return __c; }\n@@ -875,12 +892,58 @@ namespace std {\n #ifdef _GLIBCPP_USE_WCHAR_T  \n   locale::id ctype<wchar_t>::id;\n \n+  ctype<wchar_t>::__wmask_type\n+  ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const\n+  {\n+    __wmask_type __ret;\n+    switch (__m)\n+      {\n+      case space:\n+\t__ret = wctype(\"space\");\n+\tbreak;\n+      case print:\n+\t__ret = wctype(\"print\");\n+\tbreak;\n+      case cntrl:\n+\t__ret = wctype(\"cntrl\");\n+\tbreak;\n+      case upper:\n+\t__ret = wctype(\"upper\");\n+\tbreak;\n+      case lower:\n+\t__ret = wctype(\"lower\");\n+\tbreak;\n+      case alpha:\n+\t__ret = wctype(\"alpha\");\n+\tbreak;\n+      case digit:\n+\t__ret = wctype(\"digit\");\n+\tbreak;\n+      case punct:\n+\t__ret = wctype(\"punct\");\n+\tbreak;\n+      case xdigit:\n+\t__ret = wctype(\"xdigit\");\n+\tbreak;\n+      case alnum:\n+\t__ret = wctype(\"alnum\");\n+\tbreak;\n+      case graph:\n+\t__ret = wctype(\"graph\");\n+\tbreak;\n+      default:\n+\t__ret = 0;\n+      }\n+    return __ret;\n+  };\n+  \n   ctype<wchar_t>::\n   ~ctype() { }\n \n   // NB: These ctype<wchar_t> methods are not configuration-specific,\n   // unlike the ctype<char> bits.\n-  ctype<wchar_t>::ctype(size_t __refs) : _Ctype<wchar_t>(__refs) { }\n+  ctype<wchar_t>::ctype(size_t __refs) : __ctype_abstract_base<wchar_t>(__refs)\n+  { }\n \n   wchar_t\n   ctype<wchar_t>::do_toupper(wchar_t __c) const"}, {"sha": "a12b2f72dacf0dd9ad5578115fb159cc887c490e", "filename": "libstdc++-v3/testsuite/22_locale/ctype_char_members.cc", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_char_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_char_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_char_members.cc?ref=167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "patch": "@@ -33,7 +33,7 @@\n // NB: Don't include any other headers in this file.\n #include <debug_assert.h>\n \n-class gnu_ctype: public std::ctype<char> {};\n+class gnu_ctype: public std::ctype<char> { };\n \n void test01()\n {\n@@ -71,6 +71,22 @@ void test01()\n   VERIFY( gctype.is(std::ctype_base::graph, c40) );\n   VERIFY( gctype.is(std::ctype_base::graph, c20) );\n \n+  // const char* is(const char* low, const char* high, mask* vec) const\n+  std::ctype_base::mask m01 = static_cast<std::ctype_base::mask>(0);\n+  std::ctype_base::mask m02 = std::ctype_base::digit;\n+  const char* cc0 = strlit00;\n+  const char* cc1 = NULL;\n+  const char* cc2 = NULL;\n+#if 1\n+  cc1 = gctype.is(cc0, cc0, &m01);\n+  VERIFY( cc1 == strlit00 );\n+  cc2 = gctype.is(cc0, cc0 + 3, &m01);\n+  VERIFY( cc2 == strlit00 + 3);\n+\n+  cc1 = gctype.is(cc0, cc0 + 13, &m02);\n+  VERIFY( cc1 == strlit00 + 13);\n+#endif\n+\n   // char toupper(char c) const\n   c100 = gctype.toupper(c10);\n   VERIFY( c100 == c00 );"}]}