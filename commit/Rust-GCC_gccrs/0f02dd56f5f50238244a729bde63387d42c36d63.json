{"sha": "0f02dd56f5f50238244a729bde63387d42c36d63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYwMmRkNTZmNWY1MDIzODI0NGE3MjliZGU2MzM4N2Q0MmMzNmQ2Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-02-17T20:45:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-02-17T20:45:15Z"}, "message": "re PR c++/69842 (Parameter deduction in polymorphic lambdas)\n\n\tPR c++/69842\n\t* method.c (forward_parm): Split out from...\n\t(add_one_base_init): ...here.\n\t* lambda.c (maybe_add_lambda_conv_op): Use it.\n\nFrom-SVN: r233506", "tree": {"sha": "7ded2b70d4b8f111c55171cba13383ecc5c3d998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ded2b70d4b8f111c55171cba13383ecc5c3d998"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f02dd56f5f50238244a729bde63387d42c36d63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f02dd56f5f50238244a729bde63387d42c36d63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f02dd56f5f50238244a729bde63387d42c36d63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f02dd56f5f50238244a729bde63387d42c36d63/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9bfcbdeecf12ae4ad4b4397055b6911014c9b947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bfcbdeecf12ae4ad4b4397055b6911014c9b947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bfcbdeecf12ae4ad4b4397055b6911014c9b947"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "c02ffac463226e95772bdd1e6362abbb16e1aed0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f02dd56f5f50238244a729bde63387d42c36d63/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f02dd56f5f50238244a729bde63387d42c36d63/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0f02dd56f5f50238244a729bde63387d42c36d63", "patch": "@@ -1,3 +1,10 @@\n+2016-02-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/69842\n+\t* method.c (forward_parm): Split out from...\n+\t(add_one_base_init): ...here.\n+\t* lambda.c (maybe_add_lambda_conv_op): Use it.\n+\n 2016-02-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/10200"}, {"sha": "7800ae8316dfae10f76557e1b0fbcf38c24fbbf9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f02dd56f5f50238244a729bde63387d42c36d63/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f02dd56f5f50238244a729bde63387d42c36d63/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0f02dd56f5f50238244a729bde63387d42c36d63", "patch": "@@ -6013,6 +6013,7 @@ extern tree make_thunk\t\t\t\t(tree, bool, tree, tree);\n extern void finish_thunk\t\t\t(tree);\n extern void use_thunk\t\t\t\t(tree, bool);\n extern bool trivial_fn_p\t\t\t(tree);\n+extern tree forward_parm\t\t\t(tree);\n extern bool is_trivially_xible\t\t\t(enum tree_code, tree, tree);\n extern tree get_defaulted_eh_spec\t\t(tree);\n extern tree unevaluated_noexcept_spec\t\t(void);"}, {"sha": "296c6f7ecf2e2720f914b833bb71e8d384f165f4", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f02dd56f5f50238244a729bde63387d42c36d63/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f02dd56f5f50238244a729bde63387d42c36d63/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=0f02dd56f5f50238244a729bde63387d42c36d63", "patch": "@@ -962,7 +962,9 @@ maybe_add_lambda_conv_op (tree type)\n \t      }\n \t    else\n \t      {\n-\t\ttree a = convert_from_reference (tgt);\n+\t\t++processing_template_decl;\n+\t\ttree a = forward_parm (tgt);\n+\t\t--processing_template_decl;\n \t\tCALL_EXPR_ARG (call, ix) = a;\n \t\tif (decltype_call)\n \t\t  CALL_EXPR_ARG (decltype_call, ix) = copy_node (a);"}, {"sha": "f455b32e2a02e78f196893e5b34b8afef8800f8e", "filename": "gcc/cp/method.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f02dd56f5f50238244a729bde63387d42c36d63/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f02dd56f5f50238244a729bde63387d42c36d63/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=0f02dd56f5f50238244a729bde63387d42c36d63", "patch": "@@ -474,6 +474,19 @@ trivial_fn_p (tree fn)\n   return type_has_trivial_fn (DECL_CONTEXT (fn), special_function_p (fn));\n }\n \n+/* PARM is a PARM_DECL for a function which we want to forward to another\n+   function without changing its value category, a la std::forward.  */\n+\n+tree\n+forward_parm (tree parm)\n+{\n+  tree exp = convert_from_reference (parm);\n+  if (TREE_CODE (TREE_TYPE (parm)) != REFERENCE_TYPE\n+      || TYPE_REF_IS_RVALUE (TREE_TYPE (parm)))\n+    exp = move (exp);\n+  return exp;\n+}\n+\n /* Subroutine of do_build_copy_constructor: Add a mem-initializer for BINFO\n    given the parameter or parameters PARM, possibly inherited constructor\n    base INH, or move flag MOVE_P.  */\n@@ -494,10 +507,7 @@ add_one_base_init (tree binfo, tree parm, bool move_p, tree inh,\n       init = NULL_TREE;\n       for (; parm; parm = DECL_CHAIN (parm))\n \t{\n-\t  tree exp = convert_from_reference (parm);\n-\t  if (TREE_CODE (TREE_TYPE (parm)) != REFERENCE_TYPE\n-\t      || TYPE_REF_IS_RVALUE (TREE_TYPE (parm)))\n-\t    exp = move (exp);\n+\t  tree exp = forward_parm (parm);\n \t  *p = build_tree_list (NULL_TREE, exp);\n \t  p = &TREE_CHAIN (*p);\n \t}"}, {"sha": "6569af4fc25e088eb62b2f13617c55ef8b142492", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-conv1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f02dd56f5f50238244a729bde63387d42c36d63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-conv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f02dd56f5f50238244a729bde63387d42c36d63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-conv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-conv1.C?ref=0f02dd56f5f50238244a729bde63387d42c36d63", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/69842\n+// { dg-do compile { target c++14 } }\n+\n+template <class T, class U> struct same;\n+template <class T> struct same<T,T> {};\n+\n+int main()\n+{\n+  auto g = [](auto && _var) {\n+    same<int&&,decltype(_var)>();\n+  };\n+\n+  g(0);\n+}"}]}