{"sha": "a26ddf116ec21df0a1e74c888d469647b6f2f396", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI2ZGRmMTE2ZWMyMWRmMGExZTc0Yzg4OGQ0Njk2NDdiNmYyZjM5Ng==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2005-01-19T14:30:21Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2005-01-19T14:30:21Z"}, "message": "re PR c++/19375 (Access violation diagnostic given twice)\n\n\tPR c++/19375\n\t* semantics.c (finish_id_expression): Disable access checking for\n\talready lookuped FIELD_DECL.\n\nFrom-SVN: r93897", "tree": {"sha": "dc292dd0440c66ca780c389c4b36eb80e4e6e5b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc292dd0440c66ca780c389c4b36eb80e4e6e5b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a26ddf116ec21df0a1e74c888d469647b6f2f396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26ddf116ec21df0a1e74c888d469647b6f2f396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a26ddf116ec21df0a1e74c888d469647b6f2f396", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26ddf116ec21df0a1e74c888d469647b6f2f396/comments", "author": null, "committer": null, "parents": [{"sha": "625d4524faf4a92d5e503ab231d24e42ce2a9d4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/625d4524faf4a92d5e503ab231d24e42ce2a9d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/625d4524faf4a92d5e503ab231d24e42ce2a9d4e"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "96ddad70ee03d52f56bae1a8a887ef0800012f21", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26ddf116ec21df0a1e74c888d469647b6f2f396/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26ddf116ec21df0a1e74c888d469647b6f2f396/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a26ddf116ec21df0a1e74c888d469647b6f2f396", "patch": "@@ -1,3 +1,9 @@\n+2005-01-19  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/19375\n+\t* semantics.c (finish_id_expression): Disable access checking for\n+\talready lookuped FIELD_DECL.\n+\n 2005-01-18  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* decl.c (delete_block): Remove."}, {"sha": "ce7233fe540152622ff3cda64bb101c2292be097", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26ddf116ec21df0a1e74c888d469647b6f2f396/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26ddf116ec21df0a1e74c888d469647b6f2f396/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a26ddf116ec21df0a1e74c888d469647b6f2f396", "patch": "@@ -3,7 +3,7 @@\n    building RTL.  These routines are used both during actual parsing\n    and during the instantiation of template functions. \n \n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n    Free Software Foundation, Inc.\n    Written by Mark Mitchell (mmitchell@usa.net) based on code found\n    formerly in parse.y and pt.c.  \n@@ -2639,9 +2639,17 @@ finish_id_expression (tree id_expression,\n \t  /* The same is true for FIELD_DECL, but we also need to\n \t     make sure that the syntax is correct.  */\n \t  else if (TREE_CODE (decl) == FIELD_DECL)\n-\t    return finish_non_static_data_member\n-\t\t     (decl, current_class_ref,\n-\t\t      /*qualifying_scope=*/NULL_TREE);\n+\t    {\n+\t      /* Since SCOPE is NULL here, this is an unqualified name.\n+\t\t Access checking has been performed during name lookup\n+\t\t already.  Turn off checking to avoid duplicate errors.  */\n+\t      push_deferring_access_checks (dk_no_check);\n+\t      decl = finish_non_static_data_member\n+\t\t       (decl, current_class_ref,\n+\t\t\t/*qualifying_scope=*/NULL_TREE);\n+\t      pop_deferring_access_checks ();\n+\t      return decl;\n+\t    }\n \t  return id_expression;\n \t}\n \n@@ -2706,8 +2714,15 @@ finish_id_expression (tree id_expression,\n \t    }\n \t}\n       else if (TREE_CODE (decl) == FIELD_DECL)\n-\tdecl = finish_non_static_data_member (decl, current_class_ref,\n-\t\t\t\t\t      /*qualifying_scope=*/NULL_TREE);\n+\t{\n+\t  /* Since SCOPE is NULL here, this is an unqualified name.\n+\t     Access checking has been performed during name lookup\n+\t     already.  Turn off checking to avoid duplicate errors.  */\n+\t  push_deferring_access_checks (dk_no_check);\n+\t  decl = finish_non_static_data_member (decl, current_class_ref,\n+\t\t\t\t\t\t/*qualifying_scope=*/NULL_TREE);\n+\t  pop_deferring_access_checks ();\n+\t}\n       else if (is_overloaded_fn (decl))\n \t{\n \t  tree first_fn = OVL_CURRENT (decl);"}]}