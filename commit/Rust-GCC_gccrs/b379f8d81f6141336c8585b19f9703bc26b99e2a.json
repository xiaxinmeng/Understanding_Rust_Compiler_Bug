{"sha": "b379f8d81f6141336c8585b19f9703bc26b99e2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM3OWY4ZDgxZjYxNDEzMzZjODU4NWIxOWY5NzAzYmMyNmI5OWUyYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-01-03T20:41:54Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-01-03T20:41:54Z"}, "message": "re PR go/78789 (Error: no such instruction: `aesenc %xmm0,%xmm2' when compiling libgo/runtime/aeshash.c)\n\n\tPR go/78789\n    runtime: don't build aeshash.c if the assembler doesn't support it\n    \n    This is for CentOS 5, whose assembler does not know the aesinc\n    instruction.\n    \n    Fixes GCC PR 78789.\n    \n    Patch by Uros Bizjak.\n    \n    Reviewed-on: https://go-review.googlesource.com/34796\n\nFrom-SVN: r244031", "tree": {"sha": "e91a764a7f1c84b2581d2ad59d2e3c768e807937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e91a764a7f1c84b2581d2ad59d2e3c768e807937"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b379f8d81f6141336c8585b19f9703bc26b99e2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b379f8d81f6141336c8585b19f9703bc26b99e2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b379f8d81f6141336c8585b19f9703bc26b99e2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b379f8d81f6141336c8585b19f9703bc26b99e2a/comments", "author": null, "committer": null, "parents": [{"sha": "d4eff95b5795146476524ee1d558323ca98eb292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4eff95b5795146476524ee1d558323ca98eb292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4eff95b5795146476524ee1d558323ca98eb292"}], "stats": {"total": 71, "additions": 66, "deletions": 5}, "files": [{"sha": "a48719637f45158f7ca6478bc9a2ae16772e51af", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b379f8d81f6141336c8585b19f9703bc26b99e2a/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b379f8d81f6141336c8585b19f9703bc26b99e2a/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=b379f8d81f6141336c8585b19f9703bc26b99e2a", "patch": "@@ -1,4 +1,4 @@\n-ebe9d824adca053066837b8b19461048ced34aff\n+eac28020ee4b2532d4cd43f448fe612e84e0a108\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a669ff7add1677f4dd7594c70e6e4478aeee32c9", "filename": "libgo/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=b379f8d81f6141336c8585b19f9703bc26b99e2a", "patch": "@@ -21,6 +21,9 @@\n /* Define if your assembler supports unwind section type. */\n #undef HAVE_AS_X86_64_UNWIND_SECTION_TYPE\n \n+/* Define if your assembler supports AES instructions. */\n+#undef HAVE_AS_X86_AES\n+\n /* Define if your assembler supports PC relative relocs. */\n #undef HAVE_AS_X86_PCREL\n "}, {"sha": "2cd390859bb16ad6c7873644a2fa91d03e5a3451", "filename": "libgo/configure", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=b379f8d81f6141336c8585b19f9703bc26b99e2a", "patch": "@@ -15490,6 +15490,32 @@ $as_echo \"#define HAVE_AS_X86_64_UNWIND_SECTION_TYPE 1\" >>confdefs.h\n \n fi\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler supports AES instructions\" >&5\n+$as_echo_n \"checking assembler supports AES instructions... \" >&6; }\n+if test \"${libgo_cv_as_x86_aes+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+libgo_cv_as_x86_aes=yes\n+echo 'aesenc %xmm0, %xmm1' > conftest.s\n+CFLAGS_hold=$CFLAGS\n+if test \"$libgo_cv_c_unused_arguments\" = yes; then\n+  CFLAGS=\"$CFLAGS -Qunused-arguments\"\n+fi\n+if $CC $CFLAGS -c conftest.s 2>&1 | grep -i error > /dev/null; then\n+    libgo_cv_as_x86_aes=no\n+fi\n+CFLAGS=$CFLAGS_hold\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_as_x86_aes\" >&5\n+$as_echo \"$libgo_cv_as_x86_aes\" >&6; }\n+if test \"x$libgo_cv_as_x86_aes\" = xyes; then\n+\n+$as_echo \"#define HAVE_AS_X86_AES 1\" >>confdefs.h\n+\n+fi\n+\n cat >confcache <<\\_ACEOF\n # This file is a shell script that caches the results of configure\n # tests run on this system so they can be shared between configure"}, {"sha": "a3267308ed1a7e1d75ceb1c5bef5602c592b7cba", "filename": "libgo/configure.ac", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=b379f8d81f6141336c8585b19f9703bc26b99e2a", "patch": "@@ -934,6 +934,24 @@ if test \"x$libgo_cv_as_x86_64_unwind_section_type\" = xyes; then\n \t    [Define if your assembler supports unwind section type.])\n fi\n \n+AC_CACHE_CHECK([assembler supports AES instructions],\n+libgo_cv_as_x86_aes, [\n+libgo_cv_as_x86_aes=yes\n+echo 'aesenc %xmm0, %xmm1' > conftest.s\n+CFLAGS_hold=$CFLAGS\n+if test \"$libgo_cv_c_unused_arguments\" = yes; then\n+  CFLAGS=\"$CFLAGS -Qunused-arguments\"\n+fi\n+if $CC $CFLAGS -c conftest.s 2>&1 | grep -i error > /dev/null; then\n+    libgo_cv_as_x86_aes=no\n+fi\n+CFLAGS=$CFLAGS_hold\n+])\n+if test \"x$libgo_cv_as_x86_aes\" = xyes; then\n+  AC_DEFINE(HAVE_AS_X86_AES, 1,\n+\t    [Define if your assembler supports AES instructions.])\n+fi\n+\n AC_CACHE_SAVE\n \n if test ${multilib} = yes; then"}, {"sha": "53312313017d44cb4d26f00f0caa3740a5079920", "filename": "libgo/go/runtime/alg.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fgo%2Fruntime%2Falg.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fgo%2Fruntime%2Falg.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Falg.go?ref=b379f8d81f6141336c8585b19f9703bc26b99e2a", "patch": "@@ -233,6 +233,7 @@ func alginit() {\n \t// Install aes hash algorithm if we have the instructions we need\n \tif (GOARCH == \"386\" || GOARCH == \"amd64\") &&\n \t\tGOOS != \"nacl\" &&\n+\t\tsupport_aes &&\n \t\tcpuid_ecx&(1<<25) != 0 && // aes (aesenc)\n \t\tcpuid_ecx&(1<<9) != 0 && // sse3 (pshufb)\n \t\tcpuid_ecx&(1<<19) != 0 { // sse4.1 (pinsr{d,q})"}, {"sha": "6686e1f29b3df53265965e9d28714034181b6f1e", "filename": "libgo/go/runtime/runtime2.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fgo%2Fruntime%2Fruntime2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fgo%2Fruntime%2Fruntime2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fruntime2.go?ref=b379f8d81f6141336c8585b19f9703bc26b99e2a", "patch": "@@ -771,7 +771,8 @@ var (\n \n \t// Information about what cpu features are available.\n \t// Set on startup.\n-\tcpuid_ecx uint32\n+\tcpuid_ecx   uint32\n+\tsupport_aes bool\n \n //\tcpuid_edx         uint32\n //\tcpuid_ebx7        uint32"}, {"sha": "c299ae0e8eb858dd6b542aecc6ee0f63e466d994", "filename": "libgo/go/runtime/stubs.go", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fgo%2Fruntime%2Fstubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fgo%2Fruntime%2Fstubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fstubs.go?ref=b379f8d81f6141336c8585b19f9703bc26b99e2a", "patch": "@@ -272,6 +272,12 @@ func setCpuidECX(v uint32) {\n \tcpuid_ecx = v\n }\n \n+// For gccgo, to communicate from the C code to the Go code.\n+//go:linkname setSupportAES runtime.setSupportAES\n+func setSupportAES(v bool) {\n+\tsupport_aes = v\n+}\n+\n // typedmemmove copies a typed value.\n // For gccgo for now.\n //go:nosplit"}, {"sha": "7f29baa07b2c2e0d231aa2405f78f06cbe1490f8", "filename": "libgo/runtime/aeshash.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fruntime%2Faeshash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fruntime%2Faeshash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Faeshash.c?ref=b379f8d81f6141336c8585b19f9703bc26b99e2a", "patch": "@@ -12,7 +12,7 @@ uintptr aeshashbody(void*, uintptr, uintptr, Slice)\n uintptr aeshashbody(void*, uintptr, uintptr, Slice)\n \t__attribute__((no_split_stack));\n \n-#if defined(__i386__) || defined(__x86_64__)\n+#if (defined(__i386__) || defined(__x86_64__)) && defined(HAVE_AS_X86_AES)\n \n #include <emmintrin.h>\n #include <tmmintrin.h>\n@@ -573,7 +573,7 @@ uintptr aeshashbody(void* p, uintptr seed, uintptr size, Slice aeskeysched) {\n \n #endif // !defined(__x86_64__)\n \n-#else // !defined(__i386__) && !defined(__x86_64__)\n+#else // !defined(__i386__) && !defined(__x86_64__) || !defined(HAVE_AS_X86_AES)\n \n uintptr aeshashbody(void* p __attribute__((unused)),\n \t\t    uintptr seed __attribute__((unused)),\n@@ -583,4 +583,4 @@ uintptr aeshashbody(void* p __attribute__((unused)),\n \truntime_throw(\"impossible call to aeshashbody\");\n }\n \n-#endif // !defined(__i386__) && !defined(__x86_64__)\n+#endif // !defined(__i386__) && !defined(__x86_64__) || !defined(HAVE_AS_X86_AES)"}, {"sha": "54bdcf8ce72581ee6c967b1d2b776c8b26febfab", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=b379f8d81f6141336c8585b19f9703bc26b99e2a", "patch": "@@ -599,6 +599,8 @@ extern void setIsCgo(void)\n   __asm__ (GOSYM_PREFIX \"runtime.setIsCgo\");\n extern void setCpuidECX(uint32)\n   __asm__ (GOSYM_PREFIX \"runtime.setCpuidECX\");\n+extern void setSupportAES(bool)\n+  __asm__ (GOSYM_PREFIX \"runtime.setSupportAES\");\n extern void makeMainInitDone(void)\n   __asm__ (GOSYM_PREFIX \"runtime.makeMainInitDone\");\n extern void closeMainInitDone(void)"}, {"sha": "464531263f50b47c2a94802e00036d0e60841be2", "filename": "libgo/runtime/runtime_c.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fruntime%2Fruntime_c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b379f8d81f6141336c8585b19f9703bc26b99e2a/libgo%2Fruntime%2Fruntime_c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime_c.c?ref=b379f8d81f6141336c8585b19f9703bc26b99e2a", "patch": "@@ -190,5 +190,9 @@ runtime_cpuinit()\n \tif (__get_cpuid(1, &eax, &ebx, &ecx, &edx)) {\n \t\tsetCpuidECX(ecx);\n \t}\n+\n+#if defined(HAVE_AS_X86_AES)\n+\tsetSupportAES(true);\n+#endif\n #endif\n }"}]}