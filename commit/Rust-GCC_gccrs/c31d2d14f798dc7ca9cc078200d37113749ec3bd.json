{"sha": "c31d2d14f798dc7ca9cc078200d37113749ec3bd", "node_id": "C_kwDOANBUbNoAKGMzMWQyZDE0Zjc5OGRjN2NhOWNjMDc4MjAwZDM3MTEzNzQ5ZWMzYmQ", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-10-22T18:08:19Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-10-22T18:13:19Z"}, "message": "Add testcase for PR fortran/94289\n\n2021-10-22  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n\t    Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/testsuite/\n\n\tPR fortran/94289\n\t* gfortran.dg/PR94289.f90: New.", "tree": {"sha": "a9983826e178bb403c55a6be49f6656df548f785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9983826e178bb403c55a6be49f6656df548f785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c31d2d14f798dc7ca9cc078200d37113749ec3bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31d2d14f798dc7ca9cc078200d37113749ec3bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c31d2d14f798dc7ca9cc078200d37113749ec3bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31d2d14f798dc7ca9cc078200d37113749ec3bd/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7cb6d66bd52e884ff33c61e46a9ee9facc2ac60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7cb6d66bd52e884ff33c61e46a9ee9facc2ac60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7cb6d66bd52e884ff33c61e46a9ee9facc2ac60"}], "stats": {"total": 168, "additions": 168, "deletions": 0}, "files": [{"sha": "4f17d971067007f9476b27a3272cdb84c0763036", "filename": "gcc/testsuite/gfortran.dg/PR94289.f90", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31d2d14f798dc7ca9cc078200d37113749ec3bd/gcc%2Ftestsuite%2Fgfortran.dg%2FPR94289.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31d2d14f798dc7ca9cc078200d37113749ec3bd/gcc%2Ftestsuite%2Fgfortran.dg%2FPR94289.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FPR94289.f90?ref=c31d2d14f798dc7ca9cc078200d37113749ec3bd", "patch": "@@ -0,0 +1,168 @@\n+! { dg-do run }\n+!\n+! Testcase for PR 94289\n+!\n+! - if the dummy argument is a pointer/allocatable, it has the same \n+!   bounds as the dummy argument\n+! - if is is nonallocatable nonpointer, the lower bounds are [1, 1, 1].\n+\n+module bounds_m\n+\n+  implicit none\n+\n+  private\n+  public :: &\n+    lb, ub\n+\n+  public :: &\n+    bnds_p, &\n+    bnds_a, &\n+    bnds_e\n+\n+  integer, parameter :: lb1 = 3\n+  integer, parameter :: lb2 = 5\n+  integer, parameter :: lb3 = 9\n+  integer, parameter :: ub1 = 4\n+  integer, parameter :: ub2 = 50\n+  integer, parameter :: ub3 = 11\n+  integer, parameter :: ex1 = ub1 - lb1 + 1\n+  integer, parameter :: ex2 = ub2 - lb2 + 1\n+  integer, parameter :: ex3 = ub3 - lb3 + 1\n+\n+  integer, parameter :: lf(*) = [1,1,1]\n+  integer, parameter :: lb(*) = [lb1,lb2,lb3]\n+  integer, parameter :: ub(*) = [ub1,ub2,ub3]\n+  integer, parameter :: ex(*) = [ex1,ex2,ex3]\n+\n+contains\n+\n+  subroutine bounds(a, lb, ub)\n+    integer, pointer, intent(in) :: a(..)\n+    integer,          intent(in) :: lb(3)\n+    integer,          intent(in) :: ub(3)\n+\n+    integer :: ex(3)\n+\n+    ex = max(ub-lb+1, 0)\n+    if(any(lbound(a)/=lb)) stop 101\n+    if(any(ubound(a)/=ub)) stop 102\n+    if(any( shape(a)/=ex)) stop 103\n+    return\n+  end subroutine bounds\n+\n+  subroutine bnds_p(this)\n+    integer, pointer, intent(in) :: this(..)\n+\n+    if(any(lbound(this)/=lb)) stop 1\n+    if(any(ubound(this)/=ub)) stop 2\n+    if(any( shape(this)/=ex)) stop 3\n+    call bounds(this, lb, ub)\n+    return\n+  end subroutine bnds_p\n+  \n+  subroutine bnds_a(this)\n+    integer, allocatable, target, intent(in) :: this(..)\n+    \n+    if(any(lbound(this)/=lb)) stop 4\n+    if(any(ubound(this)/=ub)) stop 5\n+    if(any( shape(this)/=ex)) stop 6\n+    call bounds(this, lb, ub)\n+    return\n+  end subroutine bnds_a\n+  \n+  subroutine bnds_e(this)\n+    integer, target, intent(in) :: this(..)\n+    \n+    if(any(lbound(this)/=lf)) stop 7\n+    if(any(ubound(this)/=ex)) stop 8\n+    if(any( shape(this)/=ex)) stop 9\n+    call bounds(this, lf, ex)\n+    return\n+  end subroutine bnds_e\n+  \n+end module bounds_m\n+\n+program bounds_p\n+\n+  use, intrinsic :: iso_c_binding, only: c_int\n+  \n+  use bounds_m\n+  \n+  implicit none\n+\n+  integer, parameter :: fpn = 1\n+  integer, parameter :: fan = 2\n+  integer, parameter :: fon = 3\n+\n+  integer :: i\n+  \n+  do i = fpn, fon\n+    call test_p(i)\n+  end do\n+  do i = fpn, fon\n+    call test_a(i)\n+  end do\n+  do i = fpn, fon\n+    call test_e(i)\n+  end do\n+  stop\n+\n+contains\n+\n+  subroutine test_p(t)\n+    integer, intent(in) :: t\n+    \n+    integer, pointer :: a(:,:,:)\n+\n+    allocate(a(lb(1):ub(1),lb(2):ub(2),lb(3):ub(3)))\n+    select case(t)\n+    case(fpn)\n+      call bnds_p(a)\n+    case(fan)\n+    case(fon)\n+      call bnds_e(a)\n+    case default\n+      stop\n+    end select\n+    deallocate(a)\n+    return\n+  end subroutine test_p\n+\n+  subroutine test_a(t)\n+    integer, intent(in) :: t\n+    \n+    integer, allocatable, target :: a(:,:,:)\n+\n+    allocate(a(lb(1):ub(1),lb(2):ub(2),lb(3):ub(3)))\n+    select case(t)\n+    case(fpn)\n+      call bnds_p(a)\n+    case(fan)\n+      call bnds_a(a)\n+    case(fon)\n+      call bnds_e(a)\n+    case default\n+      stop\n+    end select\n+    deallocate(a)\n+    return\n+  end subroutine test_a\n+\n+  subroutine test_e(t)\n+    integer, intent(in) :: t\n+    \n+    integer, target :: a(lb(1):ub(1),lb(2):ub(2),lb(3):ub(3))\n+\n+    select case(t)\n+    case(fpn)\n+      call bnds_p(a)\n+    case(fan)\n+    case(fon)\n+      call bnds_e(a)\n+    case default\n+      stop\n+    end select\n+    return\n+  end subroutine test_e\n+\n+end program bounds_p"}]}