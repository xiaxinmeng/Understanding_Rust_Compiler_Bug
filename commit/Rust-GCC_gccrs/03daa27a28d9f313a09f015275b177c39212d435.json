{"sha": "03daa27a28d9f313a09f015275b177c39212d435", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNkYWEyN2EyOGQ5ZjMxM2EwOWYwMTUyNzViMTc3YzM5MjEyZDQzNQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-06-08T22:47:07Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-06-08T22:47:07Z"}, "message": "tree-ssa-address.c (addr_for_mem_ref): Use LAST_VIRTUAL_REGISTER instead of FIRST_PSEUDO_REGISTER for creating...\n\n\t* tree-ssa-address.c (addr_for_mem_ref): Use LAST_VIRTUAL_REGISTER\n\tinstead of FIRST_PSEUDO_REGISTER for creating pseudoregisters.\n\t* tree-ssa-loop-ivopts.c (add_cost, multiply_by_cost,\n\tmultiplier_allowed_in_address_p, get_address_cost): Ditto.\n\nFrom-SVN: r100783", "tree": {"sha": "777114cd23f62f1239d97a512bdd558a0afa9a0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/777114cd23f62f1239d97a512bdd558a0afa9a0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03daa27a28d9f313a09f015275b177c39212d435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03daa27a28d9f313a09f015275b177c39212d435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03daa27a28d9f313a09f015275b177c39212d435", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03daa27a28d9f313a09f015275b177c39212d435/comments", "author": null, "committer": null, "parents": [{"sha": "bd8633a3c03adc21fb6720b0febfe0c29cb48f98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8633a3c03adc21fb6720b0febfe0c29cb48f98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd8633a3c03adc21fb6720b0febfe0c29cb48f98"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "9c044f9341e5cbd9f0fb9d28b286a9b382bba9dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03daa27a28d9f313a09f015275b177c39212d435/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03daa27a28d9f313a09f015275b177c39212d435/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03daa27a28d9f313a09f015275b177c39212d435", "patch": "@@ -1,3 +1,10 @@\n+2005-06-08  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* tree-ssa-address.c (addr_for_mem_ref): Use LAST_VIRTUAL_REGISTER\n+\tinstead of FIRST_PSEUDO_REGISTER for creating pseudoregisters.\n+\t* tree-ssa-loop-ivopts.c (add_cost, multiply_by_cost,\n+\tmultiplier_allowed_in_address_p, get_address_cost): Ditto.\n+\n 2005-06-08  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/ia64.h (NO_PROFILE_COUNTERS): New."}, {"sha": "67bbc4a1d6d2fb6a3cc3a0c353fc59c66050e306", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03daa27a28d9f313a09f015275b177c39212d435/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03daa27a28d9f313a09f015275b177c39212d435/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=03daa27a28d9f313a09f015275b177c39212d435", "patch": "@@ -198,8 +198,8 @@ addr_for_mem_ref (struct mem_address *addr, bool really_expand)\n \n \t  templates_initialized = true;\n \t  sym = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (\"test_symbol\"));\n-\t  bse = gen_raw_REG (Pmode, FIRST_PSEUDO_REGISTER);\n-\t  idx = gen_raw_REG (Pmode, FIRST_PSEUDO_REGISTER + 1);\n+\t  bse = gen_raw_REG (Pmode, LAST_VIRTUAL_REGISTER + 1);\n+\t  idx = gen_raw_REG (Pmode, LAST_VIRTUAL_REGISTER + 2);\n \n \t  for (i = 0; i < 32; i++)\n \t    gen_addr_rtx ((i & 16 ? sym : NULL_RTX),"}, {"sha": "ab3247cba42ae800db277b2c16b80d09e3e77aaa", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03daa27a28d9f313a09f015275b177c39212d435/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03daa27a28d9f313a09f015275b177c39212d435/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=03daa27a28d9f313a09f015275b177c39212d435", "patch": "@@ -3149,8 +3149,8 @@ add_cost (enum machine_mode mode)\n \n   start_sequence ();\n   force_operand (gen_rtx_fmt_ee (PLUS, mode,\n-\t\t\t\t gen_raw_REG (mode, FIRST_PSEUDO_REGISTER),\n-\t\t\t\t gen_raw_REG (mode, FIRST_PSEUDO_REGISTER + 1)),\n+\t\t\t\t gen_raw_REG (mode, LAST_VIRTUAL_REGISTER + 1),\n+\t\t\t\t gen_raw_REG (mode, LAST_VIRTUAL_REGISTER + 2)),\n \t\t NULL_RTX);\n   seq = get_insns ();\n   end_sequence ();\n@@ -3221,8 +3221,8 @@ multiply_by_cost (HOST_WIDE_INT cst, enum machine_mode mode)\n   (*cached)->cst = cst;\n \n   start_sequence ();\n-  expand_mult (mode, gen_raw_REG (mode, FIRST_PSEUDO_REGISTER), GEN_INT (cst),\n-\t       NULL_RTX, 0);\n+  expand_mult (mode, gen_raw_REG (mode, LAST_VIRTUAL_REGISTER + 1),\n+\t       gen_int_mode (cst, mode), NULL_RTX, 0);\n   seq = get_insns ();\n   end_sequence ();\n   \n@@ -3247,7 +3247,7 @@ multiplier_allowed_in_address_p (HOST_WIDE_INT ratio)\n   \n   if (!valid_mult)\n     {\n-      rtx reg1 = gen_raw_REG (Pmode, FIRST_PSEUDO_REGISTER);\n+      rtx reg1 = gen_raw_REG (Pmode, LAST_VIRTUAL_REGISTER + 1);\n       rtx addr;\n       HOST_WIDE_INT i;\n \n@@ -3305,12 +3305,12 @@ get_address_cost (bool symbol_present, bool var_present,\n       HOST_WIDE_INT i;\n       initialized = true;\n \n-      reg1 = gen_raw_REG (Pmode, FIRST_PSEUDO_REGISTER);\n+      reg1 = gen_raw_REG (Pmode, LAST_VIRTUAL_REGISTER + 1);\n \n       addr = gen_rtx_fmt_ee (PLUS, Pmode, reg1, NULL_RTX);\n       for (i = 1; i <= 1 << 20; i <<= 1)\n \t{\n-\t  XEXP (addr, 1) = GEN_INT (i);\n+\t  XEXP (addr, 1) = gen_int_mode (i, Pmode);\n \t  if (!memory_address_p (Pmode, addr))\n \t    break;\n \t}\n@@ -3319,7 +3319,7 @@ get_address_cost (bool symbol_present, bool var_present,\n \n       for (i = 1; i <= 1 << 20; i <<= 1)\n \t{\n-\t  XEXP (addr, 1) = GEN_INT (-i);\n+\t  XEXP (addr, 1) = gen_int_mode (-i, Pmode);\n \t  if (!memory_address_p (Pmode, addr))\n \t    break;\n \t}\n@@ -3368,10 +3368,10 @@ get_address_cost (bool symbol_present, bool var_present,\n     {\n       acost = 0;\n       \n-      addr = gen_raw_REG (Pmode, FIRST_PSEUDO_REGISTER);\n-      reg1 = gen_raw_REG (Pmode, FIRST_PSEUDO_REGISTER + 1);\n+      addr = gen_raw_REG (Pmode, LAST_VIRTUAL_REGISTER + 1);\n+      reg1 = gen_raw_REG (Pmode, LAST_VIRTUAL_REGISTER + 2);\n       if (ratio_p)\n-\taddr = gen_rtx_fmt_ee (MULT, Pmode, addr, GEN_INT (rat));\n+\taddr = gen_rtx_fmt_ee (MULT, Pmode, addr, gen_int_mode (rat, Pmode));\n \n       if (var_present)\n \taddr = gen_rtx_fmt_ee (PLUS, Pmode, addr, reg1);\n@@ -3383,10 +3383,10 @@ get_address_cost (bool symbol_present, bool var_present,\n \t    base = gen_rtx_fmt_e (CONST, Pmode,\n \t\t\t\t  gen_rtx_fmt_ee (PLUS, Pmode,\n \t\t\t\t\t\t  base,\n-\t\t\t\t\t\t  GEN_INT (off)));\n+\t\t\t\t\t\t  gen_int_mode (off, Pmode)));\n \t}\n       else if (offset_p)\n-\tbase = GEN_INT (off);\n+\tbase = gen_int_mode (off, Pmode);\n       else\n \tbase = NULL_RTX;\n     "}]}