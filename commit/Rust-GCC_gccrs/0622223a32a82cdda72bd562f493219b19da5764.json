{"sha": "0622223a32a82cdda72bd562f493219b19da5764", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYyMjIyM2EzMmE4MmNkZGE3MmJkNTYyZjQ5MzIxOWIxOWRhNTc2NA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-06-30T01:26:14Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-30T01:26:14Z"}, "message": "decl.c (incomplete_var): Declare.\n\n\t* decl.c (incomplete_var): Declare.  Declare VECs containing them.\n\t(incomplete_vars): Adjust comment.  Change type to a VEC.\n\t(maybe_register_incomplete_var): Adjust for new type.\n\t(complete_vars): Adjust iteration over incomplete_vars.\n\nFrom-SVN: r161584", "tree": {"sha": "e3d8aa1bd1e4c4e797fe095849c7f8871ebb5fd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3d8aa1bd1e4c4e797fe095849c7f8871ebb5fd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0622223a32a82cdda72bd562f493219b19da5764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0622223a32a82cdda72bd562f493219b19da5764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0622223a32a82cdda72bd562f493219b19da5764", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0622223a32a82cdda72bd562f493219b19da5764/comments", "author": null, "committer": null, "parents": [{"sha": "c4ec988762c7a1d1b25efba6be0fbd3b45dfd926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ec988762c7a1d1b25efba6be0fbd3b45dfd926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ec988762c7a1d1b25efba6be0fbd3b45dfd926"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "44c843b4b74c7092aa44b0ea6c72d9b8a7d11f61", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0622223a32a82cdda72bd562f493219b19da5764/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0622223a32a82cdda72bd562f493219b19da5764/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0622223a32a82cdda72bd562f493219b19da5764", "patch": "@@ -1,3 +1,10 @@\n+2010-06-29  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* decl.c (incomplete_var): Declare.  Declare VECs containing them.\n+\t(incomplete_vars): Adjust comment.  Change type to a VEC.\n+\t(maybe_register_incomplete_var): Adjust for new type.\n+\t(complete_vars): Adjust iteration over incomplete_vars.\n+\n 2010-06-29  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* decl.c (struct named_label_entry): Change type of bad_decls field"}, {"sha": "cf92e4d061eb1e1e3f149247166cd8e216a94f45", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0622223a32a82cdda72bd562f493219b19da5764/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0622223a32a82cdda72bd562f493219b19da5764/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0622223a32a82cdda72bd562f493219b19da5764", "patch": "@@ -245,11 +245,18 @@ VEC(tree, gc) *deferred_mark_used_calls;\n enum deprecated_states deprecated_state = DEPRECATED_NORMAL;\n \n \f\n-/* A TREE_LIST of VAR_DECLs.  The TREE_PURPOSE is a RECORD_TYPE or\n-   UNION_TYPE; the TREE_VALUE is a VAR_DECL with that type.  At the\n-   time the VAR_DECL was declared, the type was incomplete.  */\n+/* A list of VAR_DECLs whose type was incomplete at the time the\n+   variable was declared.  */\n \n-static GTY(()) tree incomplete_vars;\n+typedef struct GTY(()) incomplete_var_d {\n+  tree decl;\n+  tree incomplete_type;\n+} incomplete_var;\n+\n+DEF_VEC_O(incomplete_var);\n+DEF_VEC_ALLOC_O(incomplete_var,gc);\n+\n+static GTY(()) VEC(incomplete_var,gc) *incomplete_vars;\n \f\n /* Returns the kind of template specialization we are currently\n    processing, given that it's declaration contained N_CLASS_SCOPES\n@@ -12934,7 +12941,12 @@ maybe_register_incomplete_var (tree var)\n \t  /* RTTI TD entries are created while defining the type_info.  */\n \t  || (TYPE_LANG_SPECIFIC (inner_type)\n \t      && TYPE_BEING_DEFINED (inner_type)))\n-\tincomplete_vars = tree_cons (inner_type, var, incomplete_vars);\n+\t{\n+\t  incomplete_var *iv\n+\t    = VEC_safe_push (incomplete_var, gc, incomplete_vars, NULL);\n+\t  iv->decl = var;\n+\t  iv->incomplete_type = inner_type;\n+\t}\n     }\n }\n \n@@ -12945,24 +12957,24 @@ maybe_register_incomplete_var (tree var)\n void\n complete_vars (tree type)\n {\n-  tree *list = &incomplete_vars;\n+  unsigned ix;\n+  incomplete_var *iv;\n \n-  gcc_assert (CLASS_TYPE_P (type));\n-  while (*list)\n+  for (ix = 0; VEC_iterate (incomplete_var, incomplete_vars, ix, iv); )\n     {\n-      if (same_type_p (type, TREE_PURPOSE (*list)))\n+      if (same_type_p (type, iv->incomplete_type))\n \t{\n-\t  tree var = TREE_VALUE (*list);\n+\t  tree var = iv->decl;\n \t  tree type = TREE_TYPE (var);\n \t  /* Complete the type of the variable.  The VAR_DECL itself\n \t     will be laid out in expand_expr.  */\n \t  complete_type (type);\n \t  cp_apply_type_quals_to_decl (cp_type_quals (type), var);\n \t  /* Remove this entry from the list.  */\n-\t  *list = TREE_CHAIN (*list);\n+\t  VEC_unordered_remove (incomplete_var, incomplete_vars, ix);\n \t}\n       else\n-\tlist = &TREE_CHAIN (*list);\n+\tix++;\n     }\n \n   /* Check for pending declarations which may have abstract type.  */"}]}