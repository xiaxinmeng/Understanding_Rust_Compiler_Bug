{"sha": "c1296bc68e0b94285bbbab89a63ae44520d812ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEyOTZiYzY4ZTBiOTQyODViYmJhYjg5YTYzYWU0NDUyMGQ4MTJhYw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-29T12:56:37Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-29T13:44:51Z"}, "message": "Add HIR lowering for GenericBindingArgs\n\nWe need to lower the bindings for defaults in the GenericArgs structure.\nWe can also take advantage of RichLocations further improving the\ndiagnostic errors here.", "tree": {"sha": "869f72d6f48e8ce65621fff22fb03cf8329a99ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/869f72d6f48e8ce65621fff22fb03cf8329a99ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1296bc68e0b94285bbbab89a63ae44520d812ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1296bc68e0b94285bbbab89a63ae44520d812ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1296bc68e0b94285bbbab89a63ae44520d812ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1296bc68e0b94285bbbab89a63ae44520d812ac/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb2c6124c46d0b3d58630c80af007ed092adc1ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2c6124c46d0b3d58630c80af007ed092adc1ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb2c6124c46d0b3d58630c80af007ed092adc1ea"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "86da203bd71bdeef1802795b10f7d1dae853b4b5", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1296bc68e0b94285bbbab89a63ae44520d812ac/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1296bc68e0b94285bbbab89a63ae44520d812ac/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=c1296bc68e0b94285bbbab89a63ae44520d812ac", "patch": "@@ -124,6 +124,10 @@ struct GenericArgsBinding\n     rust_assert (type != nullptr);\n     return type;\n   }\n+\n+  Location get_locus () const { return locus; }\n+\n+  Identifier get_identifier () const { return identifier; }\n };\n \n // Generic arguments allowed in each path expression segment - inline?"}, {"sha": "16143d2c635c50f2bf818dd34ee76c06de4eadd3", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1296bc68e0b94285bbbab89a63ae44520d812ac/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1296bc68e0b94285bbbab89a63ae44520d812ac/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=c1296bc68e0b94285bbbab89a63ae44520d812ac", "patch": "@@ -291,6 +291,8 @@ class ASTLoweringBase : public AST::ASTVisitor\n   HIR::PathExprSegment lower_path_expr_seg (AST::PathExprSegment &s);\n \n   HIR::GenericArgs lower_generic_args (AST::GenericArgs &args);\n+\n+  HIR::GenericArgsBinding lower_binding (AST::GenericArgsBinding &binding);\n };\n \n } // namespace HIR"}, {"sha": "f1129ab80a5d1f93e7b5b2016980831f9ff15979", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1296bc68e0b94285bbbab89a63ae44520d812ac/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1296bc68e0b94285bbbab89a63ae44520d812ac/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=c1296bc68e0b94285bbbab89a63ae44520d812ac", "patch": "@@ -314,10 +314,25 @@ ASTLoweringBase::lower_path_expr_seg (AST::PathExprSegment &s)\n \t\t\t  : HIR::GenericArgs::create_empty ());\n }\n \n+HIR::GenericArgsBinding\n+ASTLoweringBase::lower_binding (AST::GenericArgsBinding &binding)\n+{\n+  HIR::Type *lowered_type\n+    = ASTLoweringType::translate (binding.get_type ().get ());\n+  return HIR::GenericArgsBinding (binding.get_identifier (),\n+\t\t\t\t  std::unique_ptr<HIR::Type> (lowered_type),\n+\t\t\t\t  binding.get_locus ());\n+}\n+\n HIR::GenericArgs\n ASTLoweringBase::lower_generic_args (AST::GenericArgs &args)\n {\n-  std::vector<HIR::GenericArgsBinding> binding_args; // TODO\n+  std::vector<HIR::GenericArgsBinding> binding_args;\n+  for (auto &binding : args.get_binding_args ())\n+    {\n+      HIR::GenericArgsBinding b = lower_binding (binding);\n+      binding_args.push_back (std::move (b));\n+    }\n \n   std::vector<HIR::Lifetime> lifetime_args;\n   for (auto &lifetime : args.get_lifetime_args ())"}, {"sha": "c1634874d59d0e2bc7c8458f44727dae4b0a8a4b", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1296bc68e0b94285bbbab89a63ae44520d812ac/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1296bc68e0b94285bbbab89a63ae44520d812ac/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=c1296bc68e0b94285bbbab89a63ae44520d812ac", "patch": "@@ -107,6 +107,12 @@ struct GenericArgsBinding\n   GenericArgsBinding &operator= (GenericArgsBinding &&other) = default;\n \n   std::string as_string () const;\n+\n+  Identifier get_identifier () const { return identifier; }\n+\n+  std::unique_ptr<Type> &get_type () { return type; }\n+\n+  Location get_locus () const { return locus; }\n };\n \n // Generic arguments allowed in each path expression segment - inline?"}, {"sha": "be56dc7d8f47c2d7ea7d1a31879c7d510312dfa6", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1296bc68e0b94285bbbab89a63ae44520d812ac/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1296bc68e0b94285bbbab89a63ae44520d812ac/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=c1296bc68e0b94285bbbab89a63ae44520d812ac", "patch": "@@ -213,24 +213,33 @@ SubstitutionRef::get_mappings_from_generic_args (HIR::GenericArgs &args)\n {\n   if (args.get_binding_args ().size () > 0)\n     {\n-      rust_error_at (args.get_locus (),\n-\t\t     \"associated type bindings are not allowed here\");\n+      RichLocation r (args.get_locus ());\n+      for (auto &binding : args.get_binding_args ())\n+\tr.add_range (binding.get_locus ());\n+\n+      rust_error_at (r, \"associated type bindings are not allowed here\");\n       return SubstitutionArgumentMappings::error ();\n     }\n \n   if (args.get_type_args ().size () > substitutions.size ())\n     {\n+      RichLocation r (args.get_locus ());\n+      r.add_range (substitutions.front ().get_param_locus ());\n+\n       rust_error_at (\n-\targs.get_locus (),\n+\tr,\n \t\"generic item takes at most %lu type arguments but %lu were supplied\",\n \tsubstitutions.size (), args.get_type_args ().size ());\n       return SubstitutionArgumentMappings::error ();\n     }\n \n   if (args.get_type_args ().size () < substitutions.size ())\n     {\n+      RichLocation r (args.get_locus ());\n+      r.add_range (substitutions.front ().get_param_locus ());\n+\n       rust_error_at (\n-\targs.get_locus (),\n+\tr,\n \t\"generic item takes at least %lu type arguments but %lu were supplied\",\n \tsubstitutions.size (), args.get_type_args ().size ());\n       return SubstitutionArgumentMappings::error ();"}, {"sha": "91c3f06de0934b2381506b3f7ad69f690d502a6f", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1296bc68e0b94285bbbab89a63ae44520d812ac/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1296bc68e0b94285bbbab89a63ae44520d812ac/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=c1296bc68e0b94285bbbab89a63ae44520d812ac", "patch": "@@ -444,6 +444,8 @@ class SubstitutionParamMapping\n     return p->resolve ()->get_kind () == TypeKind::PARAM;\n   }\n \n+  Location get_param_locus () const { return generic->get_locus_slow (); }\n+\n private:\n   std::unique_ptr<HIR::GenericParam> &generic;\n   ParamType *param;"}, {"sha": "5e00f878a085e2bd6f96a29aa5387c0dd3e272b8", "filename": "gcc/testsuite/rust.test/xfail_compile/type-bindings1.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1296bc68e0b94285bbbab89a63ae44520d812ac/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftype-bindings1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1296bc68e0b94285bbbab89a63ae44520d812ac/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftype-bindings1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftype-bindings1.rs?ref=c1296bc68e0b94285bbbab89a63ae44520d812ac", "patch": "@@ -0,0 +1,8 @@\n+// { dg-excess-errors \"Noisy error and debug\" }\n+struct Foo<A, B>(A, B);\n+\n+fn main() {\n+    let a;\n+    a = Foo::<A = i32, B = f32>(123f32);\n+    // { dg-error \"associated type bindings are not allowed here\" \"\" { target { *-*-* } } .-1 }\n+}"}]}