{"sha": "197c68cc978ee36fab09445e9f09a5752f2585f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk3YzY4Y2M5NzhlZTM2ZmFiMDk0NDVlOWYwOWE1NzUyZjI1ODVmMQ==", "commit": {"author": {"name": "Dave Korn", "email": "dave.korn.cygwin@gmail.com", "date": "2009-08-20T11:11:34Z"}, "committer": {"name": "Dave Korn", "email": "davek@gcc.gnu.org", "date": "2009-08-20T11:11:34Z"}, "message": "Makefile.am (libgomp_la_LDFLAGS): Add -bindir flag.\n\nlibgomp/ChangeLog:\n\n\t* Makefile.am (libgomp_la_LDFLAGS): Add -bindir flag.\n\t* Makefile.in: Regenerate.\n\nChangeLog:\n\n\t* ltmain.sh (func_normal_abspath): New function.\n\t(func_relative_path): Likewise.\n\t(func_mode_help): Document new -bindir option for link mode.\n\t(func_mode_link): Add new -bindir option, and use it to place\n\toutput DLL if specified.\n\nlibgfortran/ChangeLog:\n\n\t* Makefile.am (LTLDFLAGS): Add -bindir flag.\n\t* Makefile.in: Regenerate.\n\nlibssp/ChangeLog:\n\n\t* Makefile.am (libssp_la_LDFLAGS): Add -bindir flag.\n\t* Makefile.in: Regenerate.\n\nlibjava/libltdl/ChangeLog:\n\n\t* Makefile.am (libltdl_la_LDFLAGS): Add -bindir flag.\n\t* Makefile.in: Regenerate.\n\nlibjava/classpath/ChangeLog:\n\n\t* ltmain.sh (func_normal_abspath): New function.\n\t(func_relative_path): Likewise.\n\t(func_mode_help): Document new -bindir option for link mode.\n\t(func_mode_link): Add new -bindir option, and use it to place\n\toutput DLL if specified.\n\nFrom-SVN: r150960", "tree": {"sha": "6446715545bbf4f4faafb6ffe1c751e47a437490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6446715545bbf4f4faafb6ffe1c751e47a437490"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/197c68cc978ee36fab09445e9f09a5752f2585f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/197c68cc978ee36fab09445e9f09a5752f2585f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/197c68cc978ee36fab09445e9f09a5752f2585f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/197c68cc978ee36fab09445e9f09a5752f2585f1/comments", "author": {"login": "davek-cygwin", "id": 530057, "node_id": "MDQ6VXNlcjUzMDA1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/530057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davek-cygwin", "html_url": "https://github.com/davek-cygwin", "followers_url": "https://api.github.com/users/davek-cygwin/followers", "following_url": "https://api.github.com/users/davek-cygwin/following{/other_user}", "gists_url": "https://api.github.com/users/davek-cygwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/davek-cygwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davek-cygwin/subscriptions", "organizations_url": "https://api.github.com/users/davek-cygwin/orgs", "repos_url": "https://api.github.com/users/davek-cygwin/repos", "events_url": "https://api.github.com/users/davek-cygwin/events{/privacy}", "received_events_url": "https://api.github.com/users/davek-cygwin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e9f2c0f33077da3428c2a9df0b768c3f54b7b4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e9f2c0f33077da3428c2a9df0b768c3f54b7b4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e9f2c0f33077da3428c2a9df0b768c3f54b7b4b"}], "stats": {"total": 411, "additions": 400, "deletions": 11}, "files": [{"sha": "fb79190010850fcdd6659758fa5d3db16bfd38b5", "filename": "ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197c68cc978ee36fab09445e9f09a5752f2585f1/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197c68cc978ee36fab09445e9f09a5752f2585f1/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=197c68cc978ee36fab09445e9f09a5752f2585f1", "patch": "@@ -1,3 +1,11 @@\n+2009-08-20  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\t* ltmain.sh (func_normal_abspath): New function.\n+\t(func_relative_path): Likewise.\n+\t(func_mode_help): Document new -bindir option for link mode.\n+\t(func_mode_link): Add new -bindir option, and use it to place\n+\toutput DLL if specified.\n+\n 2009-08-19  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* configure.ac: Call AC_DISABLE_OPTION_CHECKING."}, {"sha": "7a0f056c9c987bb3cbb5d95462675b30c7769eff", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197c68cc978ee36fab09445e9f09a5752f2585f1/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197c68cc978ee36fab09445e9f09a5752f2585f1/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=197c68cc978ee36fab09445e9f09a5752f2585f1", "patch": "@@ -1,3 +1,8 @@\n+2009-08-20  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\t* Makefile.am (LTLDFLAGS): Add -bindir flag.\n+\t* Makefile.in: Regenerate.\n+\n 2009-08-17  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/41075"}, {"sha": "35e0a3d138f7159865d2fdb6908eb4cb6033e872", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197c68cc978ee36fab09445e9f09a5752f2585f1/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197c68cc978ee36fab09445e9f09a5752f2585f1/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=197c68cc978ee36fab09445e9f09a5752f2585f1", "patch": "@@ -14,7 +14,7 @@ version_arg =\n endif\n \n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS)) \\\n-\t    -no-undefined\n+\t    -no-undefined -bindir \"$(bindir)\"\n \n toolexeclib_LTLIBRARIES = libgfortran.la\n libgfortran_la_LINK = $(LINK)"}, {"sha": "ca995f72c7544db6e3638930bf36294168a7857d", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197c68cc978ee36fab09445e9f09a5752f2585f1/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197c68cc978ee36fab09445e9f09a5752f2585f1/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=197c68cc978ee36fab09445e9f09a5752f2585f1", "patch": "@@ -958,7 +958,7 @@ gcc_version := $(shell cat $(top_srcdir)/../gcc/BASE-VER)\n @LIBGFOR_USE_SYMVER_FALSE@version_arg = \n @LIBGFOR_USE_SYMVER_TRUE@version_arg = -Wl,--version-script=$(srcdir)/gfortran.map\n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS)) \\\n-\t    -no-undefined\n+\t    -no-undefined -bindir \"$(bindir)\"\n \n toolexeclib_LTLIBRARIES = libgfortran.la\n libgfortran_la_LINK = $(LINK)"}, {"sha": "4a6c30871953330280b5b2d8dae2040834784489", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197c68cc978ee36fab09445e9f09a5752f2585f1/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197c68cc978ee36fab09445e9f09a5752f2585f1/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=197c68cc978ee36fab09445e9f09a5752f2585f1", "patch": "@@ -1,3 +1,8 @@\n+2009-08-20  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\t* Makefile.am (libgomp_la_LDFLAGS): Add -bindir flag.\n+\t* Makefile.in: Regenerate.\n+\n 2009-08-19  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/41102"}, {"sha": "154b28931dd4f833434caafbfc0af34e4e95bc33", "filename": "libgomp/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197c68cc978ee36fab09445e9f09a5752f2585f1/libgomp%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197c68cc978ee36fab09445e9f09a5752f2585f1/libgomp%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FMakefile.am?ref=197c68cc978ee36fab09445e9f09a5752f2585f1", "patch": "@@ -28,7 +28,7 @@ libgomp_version_script =\n endif\n libgomp_version_info = -version-info $(libtool_VERSION)\n libgomp_la_LDFLAGS = $(libgomp_version_info) $(libgomp_version_script) \\\n-        -no-undefined\n+        -no-undefined -bindir \"$(bindir)\"\n \n libgomp_la_SOURCES = alloc.c barrier.c critical.c env.c error.c iter.c \\\n \titer_ull.c loop.c loop_ull.c ordered.c parallel.c sections.c single.c \\"}, {"sha": "a9c8ba43079c5ee7b26649aeaaa19d8a53527b4c", "filename": "libgomp/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197c68cc978ee36fab09445e9f09a5752f2585f1/libgomp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197c68cc978ee36fab09445e9f09a5752f2585f1/libgomp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FMakefile.in?ref=197c68cc978ee36fab09445e9f09a5752f2585f1", "patch": "@@ -305,7 +305,7 @@ nodist_toolexeclib_HEADERS = libgomp.spec\n @LIBGOMP_BUILD_VERSIONED_SHLIB_TRUE@libgomp_version_script = -Wl,--version-script,$(top_srcdir)/libgomp.map\n libgomp_version_info = -version-info $(libtool_VERSION)\n libgomp_la_LDFLAGS = $(libgomp_version_info) $(libgomp_version_script) \\\n-        -no-undefined\n+        -no-undefined -bindir \"$(bindir)\"\n \n libgomp_la_SOURCES = alloc.c barrier.c critical.c env.c error.c iter.c \\\n \titer_ull.c loop.c loop_ull.c ordered.c parallel.c sections.c single.c \\\n@@ -316,9 +316,10 @@ nodist_noinst_HEADERS = libgomp_f.h\n nodist_libsubinclude_HEADERS = omp.h\n @USE_FORTRAN_TRUE@nodist_finclude_HEADERS = omp_lib.h omp_lib.f90 omp_lib.mod omp_lib_kinds.mod\n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n-LINK = $(LIBTOOL) --tag=CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n+LINK = $(LIBTOOL) --tag CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n \t$(AM_LDFLAGS) $(LTLDFLAGS) -o $@\n \n+\n # Automake Documentation:\n # If your package has Texinfo files in many directories, you can use the\n # variable TEXINFO_TEX to tell Automake where to find the canonical"}, {"sha": "2aed8a6ccd3c8b59277d2a9bc59a7f9f0628c4ed", "filename": "libjava/classpath/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197c68cc978ee36fab09445e9f09a5752f2585f1/libjava%2Fclasspath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197c68cc978ee36fab09445e9f09a5752f2585f1/libjava%2Fclasspath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog?ref=197c68cc978ee36fab09445e9f09a5752f2585f1", "patch": "@@ -1,3 +1,11 @@\n+2009-08-20  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\t* ltmain.sh (func_normal_abspath): New function.\n+\t(func_relative_path): Likewise.\n+\t(func_mode_help): Document new -bindir option for link mode.\n+\t(func_mode_link): Add new -bindir option, and use it to place\n+\toutput DLL if specified.\n+\n 2009-06-29  Andrew Haley  <aph@redhat.com>\n \n \tPR java/40590\t"}, {"sha": "b01cb29a683b675b17f86b02172761c8e2a94a89", "filename": "libjava/classpath/ltmain.sh", "status": "modified", "additions": 177, "deletions": 1, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197c68cc978ee36fab09445e9f09a5752f2585f1/libjava%2Fclasspath%2Fltmain.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197c68cc978ee36fab09445e9f09a5752f2585f1/libjava%2Fclasspath%2Fltmain.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fltmain.sh?ref=197c68cc978ee36fab09445e9f09a5752f2585f1", "patch": "@@ -170,6 +170,151 @@ func_dirname_and_basename ()\n \n # Generated shell functions inserted here.\n \n+# These SED scripts presuppose an absolute path with a trailing slash.\n+pathcar=\"s,^/\\([^/]*\\).*$,\\1,\"\n+pathcdr=\"s,^/[^/]*,,\"\n+removedotparts=\"s,/\\(\\./\\)\\{1\\,\\},/,g;s,/\\.$,/,\"\n+collapseslashes=\"s,/\\{1\\,\\},/,g\"\n+finalslash=\"s,/*$,/,\"\n+\n+# func_normal_abspath PATH\n+# Remove doubled-up and trailing slashes, \".\" path components,\n+# and cancel out any \"..\" path components in PATH after making\n+# it an absolute path.\n+#             value returned in \"$func_normal_abspath_result\"\n+func_normal_abspath ()\n+{\n+  # Start from root dir and reassemble the path.\n+  func_normal_abspath_result=\n+  func_normal_abspath_tpath=$1\n+  func_normal_abspath_altnamespace=\n+  case $func_normal_abspath_tpath in\n+    \"\")\n+      # Empty path, that just means $cwd.\n+      func_stripname '' '/' \"`pwd`\"\n+      func_normal_abspath_result=$func_stripname_result\n+      return\n+    ;;\n+    # The next three entries are used to spot a run of precisely\n+    # two leading slashes without using negated character classes;\n+    # we take advantage of case's first-match behaviour.\n+    ///*)\n+      # Unusual form of absolute path, do nothing.\n+    ;;\n+    //*)\n+      # Not necessarily an ordinary path; POSIX reserves leading '//'\n+      # and for example Cygwin uses it to access remote file shares\n+      # over CIFS/SMB, so we conserve a leading double slash if found.\n+      func_normal_abspath_altnamespace=/\n+    ;;\n+    /*)\n+      # Absolute path, do nothing.\n+    ;;\n+    *)\n+      # Relative path, prepend $cwd.\n+      func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n+    ;;\n+  esac\n+  # Cancel out all the simple stuff to save iterations.  We also want\n+  # the path to end with a slash for ease of parsing, so make sure\n+  # there is one (and only one) here.\n+  func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n+        -e \"$removedotparts\" -e \"$collapseslashes\" -e \"$finalslash\"`\n+  while :; do\n+    # Processed it all yet?\n+    if test \"$func_normal_abspath_tpath\" = / ; then\n+      # If we ascended to the root using \"..\" the result may be empty now.\n+      if test -z \"$func_normal_abspath_result\" ; then\n+        func_normal_abspath_result=/\n+      fi\n+      break\n+    fi\n+    func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n+        -e \"$pathcar\"`\n+    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n+        -e \"$pathcdr\"`\n+    # Figure out what to do with it\n+    case $func_normal_abspath_tcomponent in\n+      \"\")\n+        # Trailing empty path component, ignore it.\n+      ;;\n+      ..)\n+        # Parent dir; strip last assembled component from result.\n+        func_dirname \"$func_normal_abspath_result\"\n+        func_normal_abspath_result=$func_dirname_result\n+      ;;\n+      *)\n+        # Actual path component, append it.\n+        func_normal_abspath_result=$func_normal_abspath_result/$func_normal_abspath_tcomponent\n+      ;;\n+    esac\n+  done\n+  # Restore leading double-slash if one was found on entry.\n+  func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n+}\n+\n+# func_relative_path SRCDIR DSTDIR\n+# generates a relative path from SRCDIR to DSTDIR, with a trailing\n+# slash if non-empty, suitable for immediately appending a filename\n+# without needing to append a separator.\n+#             value returned in \"$func_relative_path_result\"\n+func_relative_path ()\n+{\n+  func_relative_path_result=\n+  func_normal_abspath \"$1\"\n+  func_relative_path_tlibdir=$func_normal_abspath_result\n+  func_normal_abspath \"$2\"\n+  func_relative_path_tbindir=$func_normal_abspath_result\n+\n+  # Ascend the tree starting from libdir\n+  while :; do\n+    # check if we have found a prefix of bindir\n+    case $func_relative_path_tbindir in\n+      $func_relative_path_tlibdir)\n+        # found an exact match\n+        func_relative_path_tcancelled=\n+        break\n+        ;;\n+      $func_relative_path_tlibdir*)\n+        # found a matching prefix\n+        func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n+        func_relative_path_tcancelled=$func_stripname_result\n+        if test -z \"$func_relative_path_result\"; then\n+          func_relative_path_result=.\n+        fi\n+        break\n+        ;;\n+      *)\n+        func_dirname $func_relative_path_tlibdir\n+        func_relative_path_tlibdir=${func_dirname_result}\n+        if test \"x$func_relative_path_tlibdir\" = x ; then\n+          # Have to descend all the way to the root!\n+          func_relative_path_result=../$func_relative_path_result\n+          func_relative_path_tcancelled=$func_relative_path_tbindir\n+          break\n+        fi\n+        func_relative_path_result=../$func_relative_path_result\n+        ;;\n+    esac\n+  done\n+\n+  # Now calculate path; take care to avoid doubling-up slashes.\n+  func_stripname '' '/' \"$func_relative_path_result\"\n+  func_relative_path_result=$func_stripname_result\n+  func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n+  if test \"x$func_stripname_result\" != x ; then\n+    func_relative_path_result=${func_relative_path_result}/${func_stripname_result}\n+  fi\n+\n+  # Normalisation. If bindir is libdir, return empty string,\n+  # else relative path ending with a slash; either way, target\n+  # file name can be directly appended.\n+  if test ! -z \"$func_relative_path_result\"; then\n+    func_stripname './' '' \"$func_relative_path_result/\"\n+    func_relative_path_result=$func_stripname_result\n+  fi\n+}\n+\n # Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n # is ksh but when the shell is invoked as \"sh\" and the current value of\n # the _XPG environment variable is not equal to 1 (one), the special\n@@ -1558,6 +1703,8 @@ The following components of LINK-COMMAND are treated specially:\n \n   -all-static       do not do any dynamic linking at all\n   -avoid-version    do not add a version suffix if possible\n+  -bindir BINDIR    specify path to binaries directory (for systems where\n+                    libraries must be found in the PATH setting at runtime)\n   -dlopen FILE      \\`-dlpreopen' FILE if it cannot be dlopened at runtime\n   -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n   -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n@@ -4072,6 +4219,7 @@ func_mode_link ()\n     new_inherited_linker_flags=\n \n     avoid_version=no\n+    bindir=\n     dlfiles=\n     dlprefiles=\n     dlself=no\n@@ -4164,6 +4312,11 @@ func_mode_link ()\n \tesac\n \n \tcase $prev in\n+\tbindir)\n+\t  bindir=\"$arg\"\n+\t  prev=\n+\t  continue\n+\t  ;;\n \tdlfiles|dlprefiles)\n \t  if test \"$preload\" = no; then\n \t    # Add the symbol object into the linking commands.\n@@ -4425,6 +4578,11 @@ func_mode_link ()\n \tcontinue\n \t;;\n \n+      -bindir)\n+\tprev=bindir\n+\tcontinue\n+\t;;\n+\n       -dlopen)\n \tprev=dlfiles\n \tcontinue\n@@ -8121,9 +8279,27 @@ EOF\n \t  fi\n \t  $RM $output\n \t  # place dlname in correct position for cygwin\n+\t  # In fact, it would be nice if we could use this code for all target\n+\t  # systems that can't hard-code library paths into their executables\n+\t  # and that have no shared library path variable independent of PATH,\n+\t  # but it turns out we can't easily determine that from inspecting\n+\t  # libtool variables, so we have to hard-code the OSs to which it\n+\t  # applies here; at the moment, that means platforms that use the PE\n+\t  # object format with DLL files.  See the long comment at the top of\n+\t  # tests/bindir.at for full details.\n \t  tdlname=$dlname\n \t  case $host,$output,$installed,$module,$dlname in\n-\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll) tdlname=../bin/$dlname ;;\n+\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n+\t      # If a -bindir argument was supplied, place the dll there.\n+\t      if test \"x$bindir\" != x ;\n+\t      then\n+\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n+\t\ttdlname=$func_relative_path_result$dlname\n+\t      else\n+\t\t# Otherwise fall back on heuristic.\n+\t\ttdlname=../bin/$dlname\n+\t      fi\n+\t      ;;\n \t  esac\n \t  $ECHO > $output \"\\\n # $outputname - a libtool library file"}, {"sha": "9ad7f8e9cae24e27ad20c1daa0be05bd63978fe8", "filename": "libjava/libltdl/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197c68cc978ee36fab09445e9f09a5752f2585f1/libjava%2Flibltdl%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197c68cc978ee36fab09445e9f09a5752f2585f1/libjava%2Flibltdl%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flibltdl%2FChangeLog?ref=197c68cc978ee36fab09445e9f09a5752f2585f1", "patch": "@@ -1,3 +1,8 @@\n+2009-08-20  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\t* Makefile.am (libltdl_la_LDFLAGS): Add -bindir flag.\n+\t* Makefile.in: Regenerate.\n+\n 2008-06-17  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* Makefile.in: Regenerate."}, {"sha": "8a2af102e4ba8d40e1051a16800b77fcec3982bb", "filename": "libjava/libltdl/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197c68cc978ee36fab09445e9f09a5752f2585f1/libjava%2Flibltdl%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197c68cc978ee36fab09445e9f09a5752f2585f1/libjava%2Flibltdl%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flibltdl%2FMakefile.am?ref=197c68cc978ee36fab09445e9f09a5752f2585f1", "patch": "@@ -22,7 +22,7 @@ endif\n CLEANFILES = libltdl.la libltdlc.la\n \n libltdl_la_SOURCES = ltdl.c\n-libltdl_la_LDFLAGS = -no-undefined -version-info 4:1:1\n+libltdl_la_LDFLAGS = -no-undefined -bindir \"$(bindir)\" -version-info 4:1:1\n libltdl_la_LIBADD = $(LIBADD_DL)\n \n libltdlc_la_SOURCES = ltdl.c"}, {"sha": "bab1425231d1bbaed30e18ce6c09b7dd600092c9", "filename": "libjava/libltdl/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197c68cc978ee36fab09445e9f09a5752f2585f1/libjava%2Flibltdl%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197c68cc978ee36fab09445e9f09a5752f2585f1/libjava%2Flibltdl%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flibltdl%2FMakefile.in?ref=197c68cc978ee36fab09445e9f09a5752f2585f1", "patch": "@@ -232,7 +232,7 @@ INCLUDES = $(GCINCS)\n @CONVENIENCE_LTDL_TRUE@noinst_LTLIBRARIES = libltdlc.la\n CLEANFILES = libltdl.la libltdlc.la\n libltdl_la_SOURCES = ltdl.c\n-libltdl_la_LDFLAGS = -no-undefined -version-info 4:1:1\n+libltdl_la_LDFLAGS = -no-undefined -bindir \"$(bindir)\" -version-info 4:1:1\n libltdl_la_LIBADD = $(LIBADD_DL)\n libltdlc_la_SOURCES = ltdl.c\n libltdlc_la_LIBADD = $(LIBADD_DL)"}, {"sha": "fc30438a8f3578cb68325603b0adafb920253c50", "filename": "libssp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197c68cc978ee36fab09445e9f09a5752f2585f1/libssp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197c68cc978ee36fab09445e9f09a5752f2585f1/libssp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2FChangeLog?ref=197c68cc978ee36fab09445e9f09a5752f2585f1", "patch": "@@ -1,3 +1,8 @@\n+2009-08-20  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\t* Makefile.am (libssp_la_LDFLAGS): Add -bindir flag.\n+\t* Makefile.in: Regenerate.\n+\n 2009-07-30  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* configure.ac (_AC_ARG_VAR_PRECIOUS): Use m4_rename_force."}, {"sha": "2c5800ae25c0971769fb748824f9e75d9e23ca7b", "filename": "libssp/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197c68cc978ee36fab09445e9f09a5752f2585f1/libssp%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197c68cc978ee36fab09445e9f09a5752f2585f1/libssp%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2FMakefile.am?ref=197c68cc978ee36fab09445e9f09a5752f2585f1", "patch": "@@ -35,7 +35,7 @@ libssp_la_SOURCES = \\\n libssp_la_LIBADD = \n libssp_la_DEPENDENCIES = $(version_dep) $(libssp_la_LIBADD)\n libssp_la_LDFLAGS = -version-info `grep -v '^\\#' $(srcdir)/libtool-version` \\\n-\t\t    $(version_arg) -no-undefined\n+\t\t    $(version_arg) -no-undefined -bindir \"$(bindir)\"\n \n libssp_nonshared_la_SOURCES = \\\n \tssp-local.c"}, {"sha": "64c1a8a2a594bf1d4f3d8f6f1680d7f9143f6bb4", "filename": "libssp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197c68cc978ee36fab09445e9f09a5752f2585f1/libssp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197c68cc978ee36fab09445e9f09a5752f2585f1/libssp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2FMakefile.in?ref=197c68cc978ee36fab09445e9f09a5752f2585f1", "patch": "@@ -259,7 +259,7 @@ libssp_la_SOURCES = \\\n libssp_la_LIBADD = \n libssp_la_DEPENDENCIES = $(version_dep) $(libssp_la_LIBADD)\n libssp_la_LDFLAGS = -version-info `grep -v '^\\#' $(srcdir)/libtool-version` \\\n-\t\t    $(version_arg) -no-undefined\n+\t\t    $(version_arg) -no-undefined -bindir \"$(bindir)\"\n \n libssp_nonshared_la_SOURCES = \\\n \tssp-local.c"}, {"sha": "b01cb29a683b675b17f86b02172761c8e2a94a89", "filename": "ltmain.sh", "status": "modified", "additions": 177, "deletions": 1, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197c68cc978ee36fab09445e9f09a5752f2585f1/ltmain.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197c68cc978ee36fab09445e9f09a5752f2585f1/ltmain.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ltmain.sh?ref=197c68cc978ee36fab09445e9f09a5752f2585f1", "patch": "@@ -170,6 +170,151 @@ func_dirname_and_basename ()\n \n # Generated shell functions inserted here.\n \n+# These SED scripts presuppose an absolute path with a trailing slash.\n+pathcar=\"s,^/\\([^/]*\\).*$,\\1,\"\n+pathcdr=\"s,^/[^/]*,,\"\n+removedotparts=\"s,/\\(\\./\\)\\{1\\,\\},/,g;s,/\\.$,/,\"\n+collapseslashes=\"s,/\\{1\\,\\},/,g\"\n+finalslash=\"s,/*$,/,\"\n+\n+# func_normal_abspath PATH\n+# Remove doubled-up and trailing slashes, \".\" path components,\n+# and cancel out any \"..\" path components in PATH after making\n+# it an absolute path.\n+#             value returned in \"$func_normal_abspath_result\"\n+func_normal_abspath ()\n+{\n+  # Start from root dir and reassemble the path.\n+  func_normal_abspath_result=\n+  func_normal_abspath_tpath=$1\n+  func_normal_abspath_altnamespace=\n+  case $func_normal_abspath_tpath in\n+    \"\")\n+      # Empty path, that just means $cwd.\n+      func_stripname '' '/' \"`pwd`\"\n+      func_normal_abspath_result=$func_stripname_result\n+      return\n+    ;;\n+    # The next three entries are used to spot a run of precisely\n+    # two leading slashes without using negated character classes;\n+    # we take advantage of case's first-match behaviour.\n+    ///*)\n+      # Unusual form of absolute path, do nothing.\n+    ;;\n+    //*)\n+      # Not necessarily an ordinary path; POSIX reserves leading '//'\n+      # and for example Cygwin uses it to access remote file shares\n+      # over CIFS/SMB, so we conserve a leading double slash if found.\n+      func_normal_abspath_altnamespace=/\n+    ;;\n+    /*)\n+      # Absolute path, do nothing.\n+    ;;\n+    *)\n+      # Relative path, prepend $cwd.\n+      func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n+    ;;\n+  esac\n+  # Cancel out all the simple stuff to save iterations.  We also want\n+  # the path to end with a slash for ease of parsing, so make sure\n+  # there is one (and only one) here.\n+  func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n+        -e \"$removedotparts\" -e \"$collapseslashes\" -e \"$finalslash\"`\n+  while :; do\n+    # Processed it all yet?\n+    if test \"$func_normal_abspath_tpath\" = / ; then\n+      # If we ascended to the root using \"..\" the result may be empty now.\n+      if test -z \"$func_normal_abspath_result\" ; then\n+        func_normal_abspath_result=/\n+      fi\n+      break\n+    fi\n+    func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n+        -e \"$pathcar\"`\n+    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n+        -e \"$pathcdr\"`\n+    # Figure out what to do with it\n+    case $func_normal_abspath_tcomponent in\n+      \"\")\n+        # Trailing empty path component, ignore it.\n+      ;;\n+      ..)\n+        # Parent dir; strip last assembled component from result.\n+        func_dirname \"$func_normal_abspath_result\"\n+        func_normal_abspath_result=$func_dirname_result\n+      ;;\n+      *)\n+        # Actual path component, append it.\n+        func_normal_abspath_result=$func_normal_abspath_result/$func_normal_abspath_tcomponent\n+      ;;\n+    esac\n+  done\n+  # Restore leading double-slash if one was found on entry.\n+  func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n+}\n+\n+# func_relative_path SRCDIR DSTDIR\n+# generates a relative path from SRCDIR to DSTDIR, with a trailing\n+# slash if non-empty, suitable for immediately appending a filename\n+# without needing to append a separator.\n+#             value returned in \"$func_relative_path_result\"\n+func_relative_path ()\n+{\n+  func_relative_path_result=\n+  func_normal_abspath \"$1\"\n+  func_relative_path_tlibdir=$func_normal_abspath_result\n+  func_normal_abspath \"$2\"\n+  func_relative_path_tbindir=$func_normal_abspath_result\n+\n+  # Ascend the tree starting from libdir\n+  while :; do\n+    # check if we have found a prefix of bindir\n+    case $func_relative_path_tbindir in\n+      $func_relative_path_tlibdir)\n+        # found an exact match\n+        func_relative_path_tcancelled=\n+        break\n+        ;;\n+      $func_relative_path_tlibdir*)\n+        # found a matching prefix\n+        func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n+        func_relative_path_tcancelled=$func_stripname_result\n+        if test -z \"$func_relative_path_result\"; then\n+          func_relative_path_result=.\n+        fi\n+        break\n+        ;;\n+      *)\n+        func_dirname $func_relative_path_tlibdir\n+        func_relative_path_tlibdir=${func_dirname_result}\n+        if test \"x$func_relative_path_tlibdir\" = x ; then\n+          # Have to descend all the way to the root!\n+          func_relative_path_result=../$func_relative_path_result\n+          func_relative_path_tcancelled=$func_relative_path_tbindir\n+          break\n+        fi\n+        func_relative_path_result=../$func_relative_path_result\n+        ;;\n+    esac\n+  done\n+\n+  # Now calculate path; take care to avoid doubling-up slashes.\n+  func_stripname '' '/' \"$func_relative_path_result\"\n+  func_relative_path_result=$func_stripname_result\n+  func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n+  if test \"x$func_stripname_result\" != x ; then\n+    func_relative_path_result=${func_relative_path_result}/${func_stripname_result}\n+  fi\n+\n+  # Normalisation. If bindir is libdir, return empty string,\n+  # else relative path ending with a slash; either way, target\n+  # file name can be directly appended.\n+  if test ! -z \"$func_relative_path_result\"; then\n+    func_stripname './' '' \"$func_relative_path_result/\"\n+    func_relative_path_result=$func_stripname_result\n+  fi\n+}\n+\n # Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n # is ksh but when the shell is invoked as \"sh\" and the current value of\n # the _XPG environment variable is not equal to 1 (one), the special\n@@ -1558,6 +1703,8 @@ The following components of LINK-COMMAND are treated specially:\n \n   -all-static       do not do any dynamic linking at all\n   -avoid-version    do not add a version suffix if possible\n+  -bindir BINDIR    specify path to binaries directory (for systems where\n+                    libraries must be found in the PATH setting at runtime)\n   -dlopen FILE      \\`-dlpreopen' FILE if it cannot be dlopened at runtime\n   -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n   -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n@@ -4072,6 +4219,7 @@ func_mode_link ()\n     new_inherited_linker_flags=\n \n     avoid_version=no\n+    bindir=\n     dlfiles=\n     dlprefiles=\n     dlself=no\n@@ -4164,6 +4312,11 @@ func_mode_link ()\n \tesac\n \n \tcase $prev in\n+\tbindir)\n+\t  bindir=\"$arg\"\n+\t  prev=\n+\t  continue\n+\t  ;;\n \tdlfiles|dlprefiles)\n \t  if test \"$preload\" = no; then\n \t    # Add the symbol object into the linking commands.\n@@ -4425,6 +4578,11 @@ func_mode_link ()\n \tcontinue\n \t;;\n \n+      -bindir)\n+\tprev=bindir\n+\tcontinue\n+\t;;\n+\n       -dlopen)\n \tprev=dlfiles\n \tcontinue\n@@ -8121,9 +8279,27 @@ EOF\n \t  fi\n \t  $RM $output\n \t  # place dlname in correct position for cygwin\n+\t  # In fact, it would be nice if we could use this code for all target\n+\t  # systems that can't hard-code library paths into their executables\n+\t  # and that have no shared library path variable independent of PATH,\n+\t  # but it turns out we can't easily determine that from inspecting\n+\t  # libtool variables, so we have to hard-code the OSs to which it\n+\t  # applies here; at the moment, that means platforms that use the PE\n+\t  # object format with DLL files.  See the long comment at the top of\n+\t  # tests/bindir.at for full details.\n \t  tdlname=$dlname\n \t  case $host,$output,$installed,$module,$dlname in\n-\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll) tdlname=../bin/$dlname ;;\n+\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n+\t      # If a -bindir argument was supplied, place the dll there.\n+\t      if test \"x$bindir\" != x ;\n+\t      then\n+\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n+\t\ttdlname=$func_relative_path_result$dlname\n+\t      else\n+\t\t# Otherwise fall back on heuristic.\n+\t\ttdlname=../bin/$dlname\n+\t      fi\n+\t      ;;\n \t  esac\n \t  $ECHO > $output \"\\\n # $outputname - a libtool library file"}]}