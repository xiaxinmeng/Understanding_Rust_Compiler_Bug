{"sha": "1b65779f46f16b4fffd0591f5e58722c1e7cde8d", "node_id": "C_kwDOANBUbNoAKDFiNjU3NzlmNDZmMTZiNGZmZmQwNTkxZjVlNTg3MjJjMWU3Y2RlOGQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-14T13:54:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-14T20:07:47Z"}, "message": "libstdc++: Inline all basic_string::compare overloads [PR59048]\n\nDefining the compare member functions inline allows calls to\ntraits_type::length and std::min to be inlined, taking advantage of\nconstant expression arguments. When not inline, the compiler prefers to\nuse the explicit instantiation definitions in libstdc++.so and can't\ntake advantage of constant arguments.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/59048\n\t* include/bits/basic_string.h (compare): Define inline.\n\t* include/bits/basic_string.tcc (compare): Remove out-of-line\n\tdefinitions.\n\t* include/bits/cow_string.h (compare): Define inline.\n\t* testsuite/21_strings/basic_string/operations/compare/char/3.cc:\n\tNew test.", "tree": {"sha": "c366f92a62fb159b814f0c254df0f0f8a1ad0847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c366f92a62fb159b814f0c254df0f0f8a1ad0847"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b65779f46f16b4fffd0591f5e58722c1e7cde8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b65779f46f16b4fffd0591f5e58722c1e7cde8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b65779f46f16b4fffd0591f5e58722c1e7cde8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b65779f46f16b4fffd0591f5e58722c1e7cde8d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29da01709facbcc7efef4fd6767660d417f44531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29da01709facbcc7efef4fd6767660d417f44531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29da01709facbcc7efef4fd6767660d417f44531"}], "stats": {"total": 218, "additions": 123, "deletions": 95}, "files": [{"sha": "a34b3d9ed28ec4f8859144989c4d31dbedc6ed9a", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 58, "deletions": 5, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b65779f46f16b4fffd0591f5e58722c1e7cde8d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b65779f46f16b4fffd0591f5e58722c1e7cde8d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=1b65779f46f16b4fffd0591f5e58722c1e7cde8d", "patch": "@@ -3235,7 +3235,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       _GLIBCXX20_CONSTEXPR\n       int\n-      compare(size_type __pos, size_type __n, const basic_string& __str) const;\n+      compare(size_type __pos, size_type __n, const basic_string& __str) const\n+      {\n+\t_M_check(__pos, \"basic_string::compare\");\n+\t__n = _M_limit(__pos, __n);\n+\tconst size_type __osize = __str.size();\n+\tconst size_type __len = std::min(__n, __osize);\n+\tint __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);\n+\tif (!__r)\n+\t  __r = _S_compare(__n, __osize);\n+\treturn __r;\n+      }\n \n       /**\n        *  @brief  Compare substring to a substring.\n@@ -3263,7 +3273,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _GLIBCXX20_CONSTEXPR\n       int\n       compare(size_type __pos1, size_type __n1, const basic_string& __str,\n-\t      size_type __pos2, size_type __n2 = npos) const;\n+\t      size_type __pos2, size_type __n2 = npos) const\n+      {\n+\t_M_check(__pos1, \"basic_string::compare\");\n+\t__str._M_check(__pos2, \"basic_string::compare\");\n+\t__n1 = _M_limit(__pos1, __n1);\n+\t__n2 = __str._M_limit(__pos2, __n2);\n+\tconst size_type __len = std::min(__n1, __n2);\n+\tint __r = traits_type::compare(_M_data() + __pos1,\n+\t\t\t\t       __str.data() + __pos2, __len);\n+\tif (!__r)\n+\t  __r = _S_compare(__n1, __n2);\n+\treturn __r;\n+      }\n \n       /**\n        *  @brief  Compare to a C string.\n@@ -3281,7 +3303,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       _GLIBCXX20_CONSTEXPR\n       int\n-      compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;\n+      compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT\n+      {\n+\t__glibcxx_requires_string(__s);\n+\tconst size_type __size = this->size();\n+\tconst size_type __osize = traits_type::length(__s);\n+\tconst size_type __len = std::min(__size, __osize);\n+\tint __r = traits_type::compare(_M_data(), __s, __len);\n+\tif (!__r)\n+\t  __r = _S_compare(__size, __osize);\n+\treturn __r;\n+      }\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 5 String::compare specification questionable\n@@ -3306,7 +3338,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       _GLIBCXX20_CONSTEXPR\n       int\n-      compare(size_type __pos, size_type __n1, const _CharT* __s) const;\n+      compare(size_type __pos, size_type __n1, const _CharT* __s) const\n+      {\n+\t__glibcxx_requires_string(__s);\n+\t_M_check(__pos, \"basic_string::compare\");\n+\t__n1 = _M_limit(__pos, __n1);\n+\tconst size_type __osize = traits_type::length(__s);\n+\tconst size_type __len = std::min(__n1, __osize);\n+\tint __r = traits_type::compare(_M_data() + __pos, __s, __len);\n+\tif (!__r)\n+\t  __r = _S_compare(__n1, __osize);\n+\treturn __r;\n+      }\n \n       /**\n        *  @brief  Compare substring against a character %array.\n@@ -3335,7 +3378,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _GLIBCXX20_CONSTEXPR\n       int\n       compare(size_type __pos, size_type __n1, const _CharT* __s,\n-\t      size_type __n2) const;\n+\t      size_type __n2) const\n+      {\n+\t__glibcxx_requires_string_len(__s, __n2);\n+\t_M_check(__pos, \"basic_string::compare\");\n+\t__n1 = _M_limit(__pos, __n1);\n+\tconst size_type __len = std::min(__n1, __n2);\n+\tint __r = traits_type::compare(_M_data() + __pos, __s, __len);\n+\tif (!__r)\n+\t  __r = _S_compare(__n1, __n2);\n+\treturn __r;\n+      }\n \n #if __cplusplus >= 202002L\n       constexpr bool"}, {"sha": "4563c61429a6b35f8431c728f9eb37357faefbd1", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b65779f46f16b4fffd0591f5e58722c1e7cde8d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b65779f46f16b4fffd0591f5e58722c1e7cde8d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=1b65779f46f16b4fffd0591f5e58722c1e7cde8d", "patch": "@@ -847,91 +847,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return npos;\n     }\n \n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX_STRING_CONSTEXPR\n-    int\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    compare(size_type __pos, size_type __n, const basic_string& __str) const\n-    {\n-      _M_check(__pos, \"basic_string::compare\");\n-      __n = _M_limit(__pos, __n);\n-      const size_type __osize = __str.size();\n-      const size_type __len = std::min(__n, __osize);\n-      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);\n-      if (!__r)\n-\t__r = _S_compare(__n, __osize);\n-      return __r;\n-    }\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX_STRING_CONSTEXPR\n-    int\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    compare(size_type __pos1, size_type __n1, const basic_string& __str,\n-\t    size_type __pos2, size_type __n2) const\n-    {\n-      _M_check(__pos1, \"basic_string::compare\");\n-      __str._M_check(__pos2, \"basic_string::compare\");\n-      __n1 = _M_limit(__pos1, __n1);\n-      __n2 = __str._M_limit(__pos2, __n2);\n-      const size_type __len = std::min(__n1, __n2);\n-      int __r = traits_type::compare(_M_data() + __pos1,\n-\t\t\t\t     __str.data() + __pos2, __len);\n-      if (!__r)\n-\t__r = _S_compare(__n1, __n2);\n-      return __r;\n-    }\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX_STRING_CONSTEXPR\n-    int\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT\n-    {\n-      __glibcxx_requires_string(__s);\n-      const size_type __size = this->size();\n-      const size_type __osize = traits_type::length(__s);\n-      const size_type __len = std::min(__size, __osize);\n-      int __r = traits_type::compare(_M_data(), __s, __len);\n-      if (!__r)\n-\t__r = _S_compare(__size, __osize);\n-      return __r;\n-    }\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX_STRING_CONSTEXPR\n-    int\n-    basic_string <_CharT, _Traits, _Alloc>::\n-    compare(size_type __pos, size_type __n1, const _CharT* __s) const\n-    {\n-      __glibcxx_requires_string(__s);\n-      _M_check(__pos, \"basic_string::compare\");\n-      __n1 = _M_limit(__pos, __n1);\n-      const size_type __osize = traits_type::length(__s);\n-      const size_type __len = std::min(__n1, __osize);\n-      int __r = traits_type::compare(_M_data() + __pos, __s, __len);\n-      if (!__r)\n-\t__r = _S_compare(__n1, __osize);\n-      return __r;\n-    }\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX_STRING_CONSTEXPR\n-    int\n-    basic_string <_CharT, _Traits, _Alloc>::\n-    compare(size_type __pos, size_type __n1, const _CharT* __s,\n-\t    size_type __n2) const\n-    {\n-      __glibcxx_requires_string_len(__s, __n2);\n-      _M_check(__pos, \"basic_string::compare\");\n-      __n1 = _M_limit(__pos, __n1);\n-      const size_type __len = std::min(__n1, __n2);\n-      int __r = traits_type::compare(_M_data() + __pos, __s, __len);\n-      if (!__r)\n-\t__r = _S_compare(__n1, __n2);\n-      return __r;\n-    }\n-\n #undef _GLIBCXX_STRING_CONSTEXPR\n \n   // 21.3.7.9 basic_string::getline and operators"}, {"sha": "f16e33ac1ef8c53ff3c55f7be9a941b401986b7b", "filename": "libstdc++-v3/include/bits/cow_string.h", "status": "modified", "additions": 58, "deletions": 5, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b65779f46f16b4fffd0591f5e58722c1e7cde8d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b65779f46f16b4fffd0591f5e58722c1e7cde8d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h?ref=1b65779f46f16b4fffd0591f5e58722c1e7cde8d", "patch": "@@ -2852,7 +2852,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  the shorter one is ordered first.\n       */\n       int\n-      compare(size_type __pos, size_type __n, const basic_string& __str) const;\n+      compare(size_type __pos, size_type __n, const basic_string& __str) const\n+      {\n+\t_M_check(__pos, \"basic_string::compare\");\n+\t__n = _M_limit(__pos, __n);\n+\tconst size_type __osize = __str.size();\n+\tconst size_type __len = std::min(__n, __osize);\n+\tint __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);\n+\tif (!__r)\n+\t  __r = _S_compare(__n, __osize);\n+\treturn __r;\n+      }\n \n       /**\n        *  @brief  Compare substring to a substring.\n@@ -2879,7 +2889,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       int\n       compare(size_type __pos1, size_type __n1, const basic_string& __str,\n-\t      size_type __pos2, size_type __n2 = npos) const;\n+\t      size_type __pos2, size_type __n2 = npos) const\n+      {\n+\t_M_check(__pos1, \"basic_string::compare\");\n+\t__str._M_check(__pos2, \"basic_string::compare\");\n+\t__n1 = _M_limit(__pos1, __n1);\n+\t__n2 = __str._M_limit(__pos2, __n2);\n+\tconst size_type __len = std::min(__n1, __n2);\n+\tint __r = traits_type::compare(_M_data() + __pos1,\n+\t\t\t\t       __str.data() + __pos2, __len);\n+\tif (!__r)\n+\t  __r = _S_compare(__n1, __n2);\n+\treturn __r;\n+      }\n \n       /**\n        *  @brief  Compare to a C string.\n@@ -2896,7 +2918,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  ordered first.\n       */\n       int\n-      compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;\n+      compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT\n+      {\n+\t__glibcxx_requires_string(__s);\n+\tconst size_type __size = this->size();\n+\tconst size_type __osize = traits_type::length(__s);\n+\tconst size_type __len = std::min(__size, __osize);\n+\tint __r = traits_type::compare(_M_data(), __s, __len);\n+\tif (!__r)\n+\t  __r = _S_compare(__size, __osize);\n+\treturn __r;\n+      }\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 5 String::compare specification questionable\n@@ -2920,7 +2952,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  one is ordered first.\n       */\n       int\n-      compare(size_type __pos, size_type __n1, const _CharT* __s) const;\n+      compare(size_type __pos, size_type __n1, const _CharT* __s) const\n+      {\n+\t__glibcxx_requires_string(__s);\n+\t_M_check(__pos, \"basic_string::compare\");\n+\t__n1 = _M_limit(__pos, __n1);\n+\tconst size_type __osize = traits_type::length(__s);\n+\tconst size_type __len = std::min(__n1, __osize);\n+\tint __r = traits_type::compare(_M_data() + __pos, __s, __len);\n+\tif (!__r)\n+\t  __r = _S_compare(__n1, __osize);\n+\treturn __r;\n+      }\n \n       /**\n        *  @brief  Compare substring against a character %array.\n@@ -2948,7 +2991,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       int\n       compare(size_type __pos, size_type __n1, const _CharT* __s,\n-\t      size_type __n2) const;\n+\t      size_type __n2) const\n+      {\n+\t__glibcxx_requires_string_len(__s, __n2);\n+\t_M_check(__pos, \"basic_string::compare\");\n+\t__n1 = _M_limit(__pos, __n1);\n+\tconst size_type __len = std::min(__n1, __n2);\n+\tint __r = traits_type::compare(_M_data() + __pos, __s, __len);\n+\tif (!__r)\n+\t  __r = _S_compare(__n1, __n2);\n+\treturn __r;\n+      }\n \n #if __cplusplus > 201703L\n       bool"}, {"sha": "8d2917c5145899956f9d8b103384d33cee90bdfe", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/compare/char/3.cc", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b65779f46f16b4fffd0591f5e58722c1e7cde8d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b65779f46f16b4fffd0591f5e58722c1e7cde8d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F3.cc?ref=1b65779f46f16b4fffd0591f5e58722c1e7cde8d", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options \"-O1 -g0\" }\n+// { dg-do compile }\n+// { dg-final { scan-assembler-not \"12basic_stringIcSt11char_traitsIcESaIcEE7compare\" } }\n+\n+#include <string>\n+bool eq() { return std::string(\"blah\") == \"literal\"; }\n+bool lt() { return std::string(\"blah\") < \"literal\"; }"}]}