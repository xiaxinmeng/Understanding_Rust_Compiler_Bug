{"sha": "95a3fb9de80862675c209a5db85fb8bffd1640e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVhM2ZiOWRlODA4NjI2NzVjMjA5YTVkYjg1ZmI4YmZmZDE2NDBlNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-07-05T07:48:04Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-07-05T07:48:04Z"}, "message": "gcc/\n\t* target-insns.def (builtin_longjmp, builtin_setjmp_receiver)\n\t(builtin_setjmp_setup, exception_receiver, nonlocal_goto)\n\t(nonlocal_goto_receiver): New targetm instruction patterns.\n\t* builtins.c (expand_builtin_setjmp_setup): Use them instead\n\tof HAVE_*/gen_* interface.\n\t(expand_builtin_setjmp_receiver): Likewise.\n\t(expand_builtin_longjmp, expand_builtin_nonlocal_goto): Likewise.\n\t* except.c (expand_dw2_landing_pad_for_region): Likewise.\n\nFrom-SVN: r225422", "tree": {"sha": "7e0a5c2a9d942fed5937463e8da98772e4a9e08b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e0a5c2a9d942fed5937463e8da98772e4a9e08b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95a3fb9de80862675c209a5db85fb8bffd1640e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95a3fb9de80862675c209a5db85fb8bffd1640e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95a3fb9de80862675c209a5db85fb8bffd1640e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95a3fb9de80862675c209a5db85fb8bffd1640e6/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8684d89dea02aad5fba0ef4cef4eb7e51ea74450", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8684d89dea02aad5fba0ef4cef4eb7e51ea74450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8684d89dea02aad5fba0ef4cef4eb7e51ea74450"}], "stats": {"total": 75, "additions": 36, "deletions": 39}, "files": [{"sha": "bcc35c046dd4b01875b4dd0f68b01a4ff69b0721", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a3fb9de80862675c209a5db85fb8bffd1640e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a3fb9de80862675c209a5db85fb8bffd1640e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95a3fb9de80862675c209a5db85fb8bffd1640e6", "patch": "@@ -1,3 +1,14 @@\n+2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target-insns.def (builtin_longjmp, builtin_setjmp_receiver)\n+\t(builtin_setjmp_setup, exception_receiver, nonlocal_goto)\n+\t(nonlocal_goto_receiver): New targetm instruction patterns.\n+\t* builtins.c (expand_builtin_setjmp_setup): Use them instead\n+\tof HAVE_*/gen_* interface.\n+\t(expand_builtin_setjmp_receiver): Likewise.\n+\t(expand_builtin_longjmp, expand_builtin_nonlocal_goto): Likewise.\n+\t* except.c (expand_dw2_landing_pad_for_region): Likewise.\n+\n 2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target.def: Add code_for_* hooks."}, {"sha": "c5a79803517a534aa8c7941e4964ed0a4764fd70", "filename": "gcc/builtins.c", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a3fb9de80862675c209a5db85fb8bffd1640e6/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a3fb9de80862675c209a5db85fb8bffd1640e6/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=95a3fb9de80862675c209a5db85fb8bffd1640e6", "patch": "@@ -889,10 +889,8 @@ expand_builtin_setjmp_setup (rtx buf_addr, rtx receiver_label)\n   emit_stack_save (SAVE_NONLOCAL, &stack_save);\n \n   /* If there is further processing to do, do it.  */\n-#ifdef HAVE_builtin_setjmp_setup\n-  if (HAVE_builtin_setjmp_setup)\n-    emit_insn (gen_builtin_setjmp_setup (buf_addr));\n-#endif\n+  if (targetm.have_builtin_setjmp_setup ())\n+    emit_insn (targetm.gen_builtin_setjmp_setup (buf_addr));\n \n   /* We have a nonlocal label.   */\n   cfun->has_nonlocal_label = 1;\n@@ -903,7 +901,7 @@ expand_builtin_setjmp_setup (rtx buf_addr, rtx receiver_label)\n    If RECEIVER_LABEL is NULL, instead contruct a nonlocal goto handler.  */\n \n void\n-expand_builtin_setjmp_receiver (rtx receiver_label ATTRIBUTE_UNUSED)\n+expand_builtin_setjmp_receiver (rtx receiver_label)\n {\n   rtx chain;\n \n@@ -919,9 +917,7 @@ expand_builtin_setjmp_receiver (rtx receiver_label ATTRIBUTE_UNUSED)\n \n   /* Now put in the code to restore the frame pointer, and argument\n      pointer, if needed.  */\n-#ifdef HAVE_nonlocal_goto\n-  if (! HAVE_nonlocal_goto)\n-#endif\n+  if (! targetm.have_nonlocal_goto ())\n     {\n       /* First adjust our frame pointer to its actual value.  It was\n \t previously set to the start of the virtual area corresponding to\n@@ -972,17 +968,12 @@ expand_builtin_setjmp_receiver (rtx receiver_label ATTRIBUTE_UNUSED)\n     }\n #endif\n \n-#ifdef HAVE_builtin_setjmp_receiver\n-  if (receiver_label != NULL && HAVE_builtin_setjmp_receiver)\n-    emit_insn (gen_builtin_setjmp_receiver (receiver_label));\n+  if (receiver_label != NULL && targetm.have_builtin_setjmp_receiver ())\n+    emit_insn (targetm.gen_builtin_setjmp_receiver (receiver_label));\n+  else if (targetm.have_nonlocal_goto_receiver ())\n+    emit_insn (targetm.gen_nonlocal_goto_receiver ());\n   else\n-#endif\n-#ifdef HAVE_nonlocal_goto_receiver\n-    if (HAVE_nonlocal_goto_receiver)\n-      emit_insn (gen_nonlocal_goto_receiver ());\n-    else\n-#endif\n-      { /* Nothing */ }\n+    { /* Nothing */ }\n \n   /* We must not allow the code we just generated to be reordered by\n      scheduling.  Specifically, the update of the frame pointer must\n@@ -1019,11 +1010,9 @@ expand_builtin_longjmp (rtx buf_addr, rtx value)\n   gcc_assert (value == const1_rtx);\n \n   last = get_last_insn ();\n-#ifdef HAVE_builtin_longjmp\n-  if (HAVE_builtin_longjmp)\n-    emit_insn (gen_builtin_longjmp (buf_addr));\n+  if (targetm.have_builtin_longjmp ())\n+    emit_insn (targetm.gen_builtin_longjmp (buf_addr));\n   else\n-#endif\n     {\n       fp = gen_rtx_MEM (Pmode, buf_addr);\n       lab = gen_rtx_MEM (Pmode, plus_constant (Pmode, buf_addr,\n@@ -1037,14 +1026,12 @@ expand_builtin_longjmp (rtx buf_addr, rtx value)\n \n       /* Pick up FP, label, and SP from the block and jump.  This code is\n \t from expand_goto in stmt.c; see there for detailed comments.  */\n-#ifdef HAVE_nonlocal_goto\n-      if (HAVE_nonlocal_goto)\n+      if (targetm.have_nonlocal_goto ())\n \t/* We have to pass a value to the nonlocal_goto pattern that will\n \t   get copied into the static_chain pointer, but it does not matter\n \t   what that value is, because builtin_setjmp does not use it.  */\n-\temit_insn (gen_nonlocal_goto (value, lab, stack, fp));\n+\temit_insn (targetm.gen_nonlocal_goto (value, lab, stack, fp));\n       else\n-#endif\n \t{\n \t  lab = copy_to_reg (lab);\n \n@@ -1166,12 +1153,10 @@ expand_builtin_nonlocal_goto (tree exp)\n \n   crtl->has_nonlocal_goto = 1;\n \n-#ifdef HAVE_nonlocal_goto\n   /* ??? We no longer need to pass the static chain value, afaik.  */\n-  if (HAVE_nonlocal_goto)\n-    emit_insn (gen_nonlocal_goto (const0_rtx, r_label, r_sp, r_fp));\n+  if (targetm.have_nonlocal_goto ())\n+    emit_insn (targetm.gen_nonlocal_goto (const0_rtx, r_label, r_sp, r_fp));\n   else\n-#endif\n     {\n       r_label = copy_to_reg (r_label);\n "}, {"sha": "399034aab05008950bc11b84b510a650f86ab6ef", "filename": "gcc/except.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a3fb9de80862675c209a5db85fb8bffd1640e6/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a3fb9de80862675c209a5db85fb8bffd1640e6/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=95a3fb9de80862675c209a5db85fb8bffd1640e6", "patch": "@@ -959,16 +959,11 @@ emit_to_new_bb_before (rtx_insn *seq, rtx insn)\n void\n expand_dw2_landing_pad_for_region (eh_region region)\n {\n-#ifdef HAVE_exception_receiver\n-  if (HAVE_exception_receiver)\n-    emit_insn (gen_exception_receiver ());\n+  if (targetm.have_exception_receiver ())\n+    emit_insn (targetm.gen_exception_receiver ());\n+  else if (targetm.have_nonlocal_goto_receiver ())\n+    emit_insn (targetm.gen_nonlocal_goto_receiver ());\n   else\n-#endif\n-#ifdef HAVE_nonlocal_goto_receiver\n-  if (HAVE_nonlocal_goto_receiver)\n-    emit_insn (gen_nonlocal_goto_receiver ());\n-  else\n-#endif\n     { /* Nothing */ }\n \n   if (region->exc_ptr_reg)"}, {"sha": "bc4aa4d5f7c620b06422715924dab90090810a11", "filename": "gcc/target-insns.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a3fb9de80862675c209a5db85fb8bffd1640e6/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a3fb9de80862675c209a5db85fb8bffd1640e6/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=95a3fb9de80862675c209a5db85fb8bffd1640e6", "patch": "@@ -30,14 +30,20 @@\n    Patterns that take no operands should have a prototype \"(void)\".\n \n    Instructions should be documented in md.texi rather than here.  */\n+DEF_TARGET_INSN (builtin_longjmp, (rtx x0))\n+DEF_TARGET_INSN (builtin_setjmp_receiver, (rtx x0))\n+DEF_TARGET_INSN (builtin_setjmp_setup, (rtx x0))\n DEF_TARGET_INSN (canonicalize_funcptr_for_compare, (rtx x0, rtx x1))\n DEF_TARGET_INSN (casesi, (rtx x0, rtx x1, rtx x2, rtx x3, rtx x4))\n DEF_TARGET_INSN (epilogue, (void))\n+DEF_TARGET_INSN (exception_receiver, (void))\n DEF_TARGET_INSN (jump, (rtx x0))\n DEF_TARGET_INSN (load_multiple, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (mem_signal_fence, (rtx x0))\n DEF_TARGET_INSN (mem_thread_fence, (rtx x0))\n DEF_TARGET_INSN (memory_barrier, (void))\n+DEF_TARGET_INSN (nonlocal_goto, (rtx x0, rtx x1, rtx x2, rtx x3))\n+DEF_TARGET_INSN (nonlocal_goto_receiver, (void))\n DEF_TARGET_INSN (prologue, (void))\n DEF_TARGET_INSN (return, (void))\n DEF_TARGET_INSN (sibcall_epilogue, (void))"}]}