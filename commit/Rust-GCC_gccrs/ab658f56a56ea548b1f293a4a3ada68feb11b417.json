{"sha": "ab658f56a56ea548b1f293a4a3ada68feb11b417", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI2NThmNTZhNTZlYTU0OGIxZjI5M2E0YTNhZGE2OGZlYjExYjQxNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-07T13:40:26Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-07T13:40:26Z"}, "message": "compiler: do simple deadcode elimination\n    \n    Normally the backend will do deadcode elimination and this is\n    sufficient. However, the escape analysis operates on the AST that\n    may have deadcode, and may cause things to escape that otherwise\n    do not.\n    \n    This CL adds a simple deadcode elimination, run before the escape\n    analysis.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/181080\n\nFrom-SVN: r272043", "tree": {"sha": "41e7bd6de969ae9edea1bea87de7ab39d4829475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41e7bd6de969ae9edea1bea87de7ab39d4829475"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab658f56a56ea548b1f293a4a3ada68feb11b417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab658f56a56ea548b1f293a4a3ada68feb11b417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab658f56a56ea548b1f293a4a3ada68feb11b417", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab658f56a56ea548b1f293a4a3ada68feb11b417/comments", "author": null, "committer": null, "parents": [{"sha": "e733243a3693142bd9c9486451c38d2dc20270ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e733243a3693142bd9c9486451c38d2dc20270ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e733243a3693142bd9c9486451c38d2dc20270ac"}], "stats": {"total": 241, "additions": 240, "deletions": 1}, "files": [{"sha": "428b59a08fedaff5b8dbef71c6b5a45b79e135b9", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab658f56a56ea548b1f293a4a3ada68feb11b417/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab658f56a56ea548b1f293a4a3ada68feb11b417/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=ab658f56a56ea548b1f293a4a3ada68feb11b417", "patch": "@@ -1,4 +1,4 @@\n-e76c26059585433ce44e50cd7f8f504c6676f453\n+46329dd9e6473fff46df6b310c11116d1558e470\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "3481d0008682bb4751f24d2c23e71bd40e830eab", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab658f56a56ea548b1f293a4a3ada68feb11b417/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab658f56a56ea548b1f293a4a3ada68feb11b417/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=ab658f56a56ea548b1f293a4a3ada68feb11b417", "patch": "@@ -1763,6 +1763,13 @@ class Boolean_expression : public Expression\n   do_is_zero_value() const\n   { return this->val_ == false; }\n \n+  bool\n+  do_boolean_constant_value(bool* val) const\n+  {\n+    *val = this->val_;\n+    return true;\n+  }\n+\n   bool\n   do_is_static_initializer() const\n   { return true; }\n@@ -3132,6 +3139,9 @@ class Const_expression : public Expression\n   bool\n   do_string_constant_value(std::string* val) const;\n \n+  bool\n+  do_boolean_constant_value(bool* val) const;\n+\n   Type*\n   do_type();\n \n@@ -3250,6 +3260,21 @@ Const_expression::do_string_constant_value(std::string* val) const\n   return ok;\n }\n \n+bool\n+Const_expression::do_boolean_constant_value(bool* val) const\n+{\n+  if (this->seen_)\n+    return false;\n+\n+  Expression* e = this->constant_->const_value()->expr();\n+\n+  this->seen_ = true;\n+  bool ok = e->boolean_constant_value(val);\n+  this->seen_ = false;\n+\n+  return ok;\n+}\n+\n // Return the type of the const reference.\n \n Type*\n@@ -3841,6 +3866,16 @@ Type_conversion_expression::do_string_constant_value(std::string* val) const\n   return false;\n }\n \n+// Return the constant boolean value if there is one.\n+\n+bool\n+Type_conversion_expression::do_boolean_constant_value(bool* val) const\n+{\n+  if (!this->type_->is_boolean_type())\n+    return false;\n+  return this->expr_->boolean_constant_value(val);\n+}\n+\n // Determine the resulting type of the conversion.\n \n void\n@@ -4710,6 +4745,20 @@ Unary_expression::do_numeric_constant_value(Numeric_constant* nc) const\n \t\t\t\t\t nc, &issued_error);\n }\n \n+// Return the boolean constant value of a unary expression, if it has one.\n+\n+bool\n+Unary_expression::do_boolean_constant_value(bool* val) const\n+{\n+  if (this->op_ == OPERATOR_NOT\n+      && this->expr_->boolean_constant_value(val))\n+    {\n+      *val = !*val;\n+      return true;\n+    }\n+  return false;\n+}\n+\n // Return the type of a unary expression.\n \n Type*\n@@ -6187,6 +6236,86 @@ Binary_expression::do_numeric_constant_value(Numeric_constant* nc) const\n \t\t\t\t\t  this->location(), nc, &issued_error);\n }\n \n+// Return the boolean constant value, if it has one.\n+\n+bool\n+Binary_expression::do_boolean_constant_value(bool* val) const\n+{\n+  bool is_comparison = false;\n+  switch (this->op_)\n+    {\n+    case OPERATOR_EQEQ:\n+    case OPERATOR_NOTEQ:\n+    case OPERATOR_LT:\n+    case OPERATOR_LE:\n+    case OPERATOR_GT:\n+    case OPERATOR_GE:\n+      is_comparison = true;\n+      break;\n+    case OPERATOR_ANDAND:\n+    case OPERATOR_OROR:\n+      break;\n+    default:\n+      return false;\n+    }\n+\n+  Numeric_constant left_nc, right_nc;\n+  if (is_comparison\n+      && this->left_->numeric_constant_value(&left_nc)\n+      && this->right_->numeric_constant_value(&right_nc))\n+    return Binary_expression::compare_constant(this->op_, &left_nc,\n+                                               &right_nc,\n+                                               this->location(),\n+                                               val);\n+\n+  std::string left_str, right_str;\n+  if (is_comparison\n+      && this->left_->string_constant_value(&left_str)\n+      && this->right_->string_constant_value(&right_str))\n+    {\n+      *val = Binary_expression::cmp_to_bool(this->op_,\n+                                            left_str.compare(right_str));\n+      return true;\n+    }\n+\n+  bool left_bval;\n+  if (this->left_->boolean_constant_value(&left_bval))\n+    {\n+      if (this->op_ == OPERATOR_ANDAND && !left_bval)\n+        {\n+          *val = false;\n+          return true;\n+        }\n+      else if (this->op_ == OPERATOR_OROR && left_bval)\n+        {\n+          *val = true;\n+          return true;\n+        }\n+\n+      bool right_bval;\n+      if (this->right_->boolean_constant_value(&right_bval))\n+        {\n+          switch (this->op_)\n+            {\n+            case OPERATOR_EQEQ:\n+              *val = (left_bval == right_bval);\n+              return true;\n+            case OPERATOR_NOTEQ:\n+              *val = (left_bval != right_bval);\n+              return true;\n+            case OPERATOR_ANDAND:\n+            case OPERATOR_OROR:\n+              *val = right_bval;\n+              return true;\n+            default:\n+              go_unreachable();\n+            }\n+        }\n+    }\n+\n+  return false;\n+}\n+\n // Note that the value is being discarded.\n \n bool"}, {"sha": "6ba7fe1ee7cfd0f6946391e9a9b0265d57bb0167", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab658f56a56ea548b1f293a4a3ada68feb11b417/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab658f56a56ea548b1f293a4a3ada68feb11b417/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=ab658f56a56ea548b1f293a4a3ada68feb11b417", "patch": "@@ -581,6 +581,12 @@ class Expression\n   string_constant_value(std::string* val) const\n   { return this->do_string_constant_value(val); }\n \n+  // If this is not a constant expression with boolean type, return\n+  // false.  If it is one, return true, and set VAL to the value.\n+  bool\n+  boolean_constant_value(bool* val) const\n+  { return this->do_boolean_constant_value(val); }\n+\n   // This is called if the value of this expression is being\n   // discarded.  This issues warnings about computed values being\n   // unused.  This returns true if all is well, false if it issued an\n@@ -1125,6 +1131,12 @@ class Expression\n   do_string_constant_value(std::string*) const\n   { return false; }\n \n+  // Return whether this is a constant expression of boolean type, and\n+  // set VAL to the value.\n+  virtual bool\n+  do_boolean_constant_value(bool*) const\n+  { return false; }\n+\n   // Called by the parser if the value is being discarded.\n   virtual bool\n   do_discarding_value();\n@@ -1771,6 +1783,9 @@ class Type_conversion_expression : public Expression\n   bool\n   do_string_constant_value(std::string*) const;\n \n+  bool\n+  do_boolean_constant_value(bool*) const;\n+\n   Type*\n   do_type()\n   { return this->type_; }\n@@ -1965,6 +1980,9 @@ class Unary_expression : public Expression\n   bool\n   do_numeric_constant_value(Numeric_constant*) const;\n \n+  bool\n+  do_boolean_constant_value(bool*) const;\n+\n   Type*\n   do_type();\n \n@@ -2119,6 +2137,9 @@ class Binary_expression : public Expression\n   bool\n   do_numeric_constant_value(Numeric_constant*) const;\n \n+  bool\n+  do_boolean_constant_value(bool*) const;\n+\n   bool\n   do_discarding_value();\n "}, {"sha": "23acaa54f5636ce0c6be9214bafe2463647b27b1", "filename": "gcc/go/gofrontend/go.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab658f56a56ea548b1f293a4a3ada68feb11b417/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab658f56a56ea548b1f293a4a3ada68feb11b417/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo.cc?ref=ab658f56a56ea548b1f293a4a3ada68feb11b417", "patch": "@@ -142,6 +142,9 @@ go_parse_input_files(const char** filenames, unsigned int filename_count,\n   if (only_check_syntax)\n     return;\n \n+  // Do simple deadcode elimination.\n+  ::gogo->remove_deadcode();\n+\n   // Make implicit type conversions explicit.\n   ::gogo->add_conversions();\n "}, {"sha": "480077823d1ade7e92b3c628cb3ba8261c83cbb7", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab658f56a56ea548b1f293a4a3ada68feb11b417/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab658f56a56ea548b1f293a4a3ada68feb11b417/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=ab658f56a56ea548b1f293a4a3ada68feb11b417", "patch": "@@ -3196,6 +3196,80 @@ Gogo::add_conversions_in_block(Block *b)\n   b->traverse(&add_conversions);\n }\n \n+// Traversal class for simple deadcode elimination.\n+\n+class Remove_deadcode : public Traverse\n+{\n+ public:\n+  Remove_deadcode()\n+    : Traverse(traverse_statements\n+               | traverse_expressions)\n+  { }\n+\n+  int\n+  statement(Block*, size_t* pindex, Statement*);\n+\n+  int\n+  expression(Expression**);\n+};\n+\n+// Remove deadcode in a statement.\n+\n+int\n+Remove_deadcode::statement(Block* block, size_t* pindex, Statement* sorig)\n+{\n+  Location loc = sorig->location();\n+  If_statement* ifs = sorig->if_statement();\n+  if (ifs != NULL)\n+    {\n+      // Remove the dead branch of an if statement.\n+      bool bval;\n+      if (ifs->condition()->boolean_constant_value(&bval))\n+        {\n+          Statement* s;\n+          if (bval)\n+            s = Statement::make_block_statement(ifs->then_block(),\n+                                                loc);\n+          else\n+            if (ifs->else_block() != NULL)\n+              s = Statement::make_block_statement(ifs->else_block(),\n+                                                  loc);\n+            else\n+              // Make a dummy statement.\n+              s = Statement::make_statement(Expression::make_boolean(false, loc),\n+                                            true);\n+\n+          block->replace_statement(*pindex, s);\n+        }\n+    }\n+  return TRAVERSE_CONTINUE;\n+}\n+\n+// Remove deadcode in an expression.\n+\n+int\n+Remove_deadcode::expression(Expression** pexpr)\n+{\n+  // Discard the right arm of a shortcut expression of constant value.\n+  Binary_expression* be = (*pexpr)->binary_expression();\n+  bool bval;\n+  if (be != NULL\n+      && be->boolean_constant_value(&bval)\n+      && (be->op() == OPERATOR_ANDAND\n+          || be->op() == OPERATOR_OROR))\n+    *pexpr = Expression::make_boolean(bval, be->location());\n+  return TRAVERSE_CONTINUE;\n+}\n+\n+// Remove deadcode.\n+\n+void\n+Gogo::remove_deadcode()\n+{\n+  Remove_deadcode remove_deadcode;\n+  this->traverse(&remove_deadcode);\n+}\n+\n // Traverse the tree to create function descriptors as needed.\n \n class Create_function_descriptors : public Traverse"}, {"sha": "7f0cfc52ae7b2a718b18d9a951ea704ad63a3ea1", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab658f56a56ea548b1f293a4a3ada68feb11b417/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab658f56a56ea548b1f293a4a3ada68feb11b417/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=ab658f56a56ea548b1f293a4a3ada68feb11b417", "patch": "@@ -688,6 +688,10 @@ class Gogo\n   void\n   check_return_statements();\n \n+  // Remove deadcode.\n+  void\n+  remove_deadcode();\n+\n   // Make implicit type conversions explicit.\n   void\n   add_conversions();"}, {"sha": "3743d44bb4362eeef7f8646c9779a1b3cc334050", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab658f56a56ea548b1f293a4a3ada68feb11b417/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab658f56a56ea548b1f293a4a3ada68feb11b417/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=ab658f56a56ea548b1f293a4a3ada68feb11b417", "patch": "@@ -1521,6 +1521,14 @@ class If_statement : public Statement\n   condition() const\n   { return this->cond_; }\n \n+  Block*\n+  then_block() const\n+  { return this->then_block_; }\n+\n+  Block*\n+  else_block() const\n+  { return this->else_block_; }\n+\n  protected:\n   int\n   do_traverse(Traverse*);"}]}