{"sha": "a5b213dda50aca90637979f13da2eb377eff9930", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTViMjEzZGRhNTBhY2E5MDYzNzk3OWYxM2RhMmViMzc3ZWZmOTkzMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-18T23:22:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-18T23:34:10Z"}, "message": "libstdc++: Fix compilation of <ranges> with Clang (PR 93818)\n\n\tPR libstdc++/93818\n\t* include/std/ranges (_RangeAdaptor): Add deduction guide.\n\t(filter_view::_Iterator): Add alias _Vp_iter and use in place of\n\titerator_t<_Vp>.\n\t(filter_view::_Iterator::_S_iter_cat()): Add 'typename'.\n\t(transform_view::_Iterator): Add alias _Base_iter and use in place of\n\titerator_t<_Base>.\n\t(transform_view::_Iterator::_S_iter_cat()): Add 'typename'.\n\t(join_view::_Iterator): Add _Outer_iter and _Inner_iter aliases.\n\t(join_view::_Iterator::_S_iter_cat()): Add 'typename'.\n\t(split_view::_InnerIter::_S_iter_cat()): Likewise.", "tree": {"sha": "1a0e8298aa599767559fefdf4dc42619e02eb6f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a0e8298aa599767559fefdf4dc42619e02eb6f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5b213dda50aca90637979f13da2eb377eff9930", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b213dda50aca90637979f13da2eb377eff9930", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b213dda50aca90637979f13da2eb377eff9930", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b213dda50aca90637979f13da2eb377eff9930/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71c82d0e18de01a3b439a77f0e28ae8c0d5247b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5"}], "stats": {"total": 100, "additions": 61, "deletions": 39}, "files": [{"sha": "458c9553a95c5c28eeb4382a684413b702eb836f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b213dda50aca90637979f13da2eb377eff9930/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b213dda50aca90637979f13da2eb377eff9930/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a5b213dda50aca90637979f13da2eb377eff9930", "patch": "@@ -1,5 +1,17 @@\n 2020-02-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/93818\n+\t* include/std/ranges (_RangeAdaptor): Add deduction guide.\n+\t(filter_view::_Iterator): Add alias _Vp_iter and use in place of\n+\titerator_t<_Vp>.\n+\t(filter_view::_Iterator::_S_iter_cat()): Add 'typename'.\n+\t(transform_view::_Iterator): Add alias _Base_iter and use in place of\n+\titerator_t<_Base>.\n+\t(transform_view::_Iterator::_S_iter_cat()): Add 'typename'.\n+\t(join_view::_Iterator): Add _Outer_iter and _Inner_iter aliases.\n+\t(join_view::_Iterator::_S_iter_cat()): Add 'typename'.\n+\t(split_view::_InnerIter::_S_iter_cat()): Likewise.\n+\n \t* testsuite/20_util/integer_comparisons/equal.cc: Fix invalid\n \tassumption that long is wider than int.\n \t* testsuite/20_util/integer_comparisons/greater_equal.cc: Likewise."}, {"sha": "e6bdac315c0828706ef4a3ab5ea9f600ab15e868", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 49, "deletions": 39, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b213dda50aca90637979f13da2eb377eff9930/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b213dda50aca90637979f13da2eb377eff9930/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=a5b213dda50aca90637979f13da2eb377eff9930", "patch": "@@ -1102,6 +1102,9 @@ namespace views\n \t  }\n       };\n \n+    template<typename _Callable>\n+      _RangeAdaptor(_Callable) -> _RangeAdaptor<_Callable>;\n+\n     template<typename _Callable>\n       struct _RangeAdaptorClosure : public _RangeAdaptor<_Callable>\n       {\n@@ -1325,7 +1328,7 @@ namespace views\n \tstatic constexpr auto\n \t_S_iter_cat()\n \t{\n-\t  using _Cat = iterator_traits<iterator_t<_Vp>>::iterator_category;\n+\t  using _Cat = typename iterator_traits<_Vp_iter>::iterator_category;\n \t  if constexpr (derived_from<_Cat, bidirectional_iterator_tag>)\n \t    return bidirectional_iterator_tag{};\n \t  else if constexpr (derived_from<_Cat, forward_iterator_tag>)\n@@ -1336,7 +1339,9 @@ namespace views\n \n \tfriend filter_view;\n \n-\titerator_t<_Vp> _M_current = iterator_t<_Vp>();\n+\tusing _Vp_iter = iterator_t<_Vp>;\n+\n+\t_Vp_iter _M_current = _Vp_iter();\n \tfilter_view* _M_parent = nullptr;\n \n       public:\n@@ -1348,28 +1353,28 @@ namespace views\n \t_Iterator() = default;\n \n \tconstexpr\n-\t_Iterator(filter_view& __parent, iterator_t<_Vp> __current)\n+\t_Iterator(filter_view& __parent, _Vp_iter __current)\n \t  : _M_current(std::move(__current)),\n \t    _M_parent(std::__addressof(__parent))\n \t{ }\n \n-\tconstexpr iterator_t<_Vp>\n+\tconstexpr _Vp_iter\n \tbase() const &\n-\t  requires copyable<iterator_t<_Vp>>\n+\t  requires copyable<_Vp_iter>\n \t{ return _M_current; }\n \n-\tconstexpr iterator_t<_Vp>\n+\tconstexpr _Vp_iter\n \tbase() &&\n \t{ return std::move(_M_current); }\n \n \tconstexpr range_reference_t<_Vp>\n \toperator*() const\n \t{ return *_M_current; }\n \n-\tconstexpr iterator_t<_Vp>\n+\tconstexpr _Vp_iter\n \toperator->() const\n-\t  requires __detail::__has_arrow<iterator_t<_Vp>>\n-\t    && copyable<iterator_t<_Vp>>\n+\t  requires __detail::__has_arrow<_Vp_iter>\n+\t    && copyable<_Vp_iter>\n \t{ return _M_current; }\n \n \tconstexpr _Iterator&\n@@ -1412,7 +1417,7 @@ namespace views\n \n \tfriend constexpr bool\n \toperator==(const _Iterator& __x, const _Iterator& __y)\n-\t  requires equality_comparable<iterator_t<_Vp>>\n+\t  requires equality_comparable<_Vp_iter>\n \t{ return __x._M_current == __y._M_current; }\n \n \tfriend constexpr range_rvalue_reference_t<_Vp>\n@@ -1423,7 +1428,7 @@ namespace views\n \tfriend constexpr void\n \titer_swap(const _Iterator& __x, const _Iterator& __y)\n \t  noexcept(noexcept(ranges::iter_swap(__x._M_current, __y._M_current)))\n-\t  requires indirectly_swappable<iterator_t<_Vp>>\n+\t  requires indirectly_swappable<_Vp_iter>\n \t{ ranges::iter_swap(__x._M_current, __y._M_current); }\n       };\n \n@@ -1548,7 +1553,8 @@ namespace views\n \t  static constexpr auto\n \t  _S_iter_cat()\n \t  {\n-\t    using _Cat = iterator_traits<iterator_t<_Base>>::iterator_category;\n+\t    using _Cat\n+              = typename iterator_traits<_Base_iter>::iterator_category;\n \t    if constexpr (derived_from<_Cat, contiguous_iterator_tag>)\n \t      return random_access_iterator_tag{};\n \t    else\n@@ -1566,7 +1572,9 @@ namespace views\n \t      return *__i;\n \t  }\n \n-\t  iterator_t<_Base> _M_current = iterator_t<_Base>();\n+\t  using _Base_iter = iterator_t<_Base>;\n+\n+\t  _Base_iter _M_current = _Base_iter();\n \t  _Parent* _M_parent = nullptr;\n \n \tpublic:\n@@ -1579,24 +1587,24 @@ namespace views\n \t  _Iterator() = default;\n \n \t  constexpr\n-\t  _Iterator(_Parent& __parent, iterator_t<_Base> __current)\n+\t  _Iterator(_Parent& __parent, _Base_iter __current)\n \t    : _M_current(std::move(__current)),\n \t      _M_parent(std::__addressof(__parent))\n \t  { }\n \n \t  constexpr\n \t  _Iterator(_Iterator<!_Const> __i)\n \t    requires _Const\n-\t      && convertible_to<iterator_t<_Vp>, iterator_t<_Base>>\n+\t      && convertible_to<iterator_t<_Vp>, _Base_iter>\n \t    : _M_current(std::move(__i._M_current)), _M_parent(__i._M_parent)\n \t  { }\n \n-\t  constexpr iterator_t<_Base>\n+\t  constexpr _Base_iter\n \t  base() const &\n-\t    requires copyable<iterator_t<_Base>>\n+\t    requires copyable<_Base_iter>\n \t  { return _M_current; }\n \n-\t  constexpr iterator_t<_Base>\n+\t  constexpr _Base_iter\n \t  base() &&\n \t  { return std::move(_M_current); }\n \n@@ -1659,7 +1667,7 @@ namespace views\n \n \t  friend constexpr bool\n \t  operator==(const _Iterator& __x, const _Iterator& __y)\n-\t    requires equality_comparable<iterator_t<_Base>>\n+\t    requires equality_comparable<_Base_iter>\n \t  { return __x._M_current == __y._M_current; }\n \n \t  friend constexpr bool\n@@ -1686,7 +1694,7 @@ namespace views\n \t  friend constexpr auto\n \t  operator<=>(const _Iterator& __x, const _Iterator& __y)\n \t    requires random_access_range<_Base>\n-\t      && three_way_comparable<iterator_t<_Base>>\n+\t      && three_way_comparable<_Base_iter>\n \t  { return __x._M_current <=> __y._M_current; }\n #endif\n \n@@ -1717,7 +1725,7 @@ namespace views\n \t  friend constexpr void\n \t  iter_swap(const _Iterator& __x, const _Iterator& __y)\n \t    noexcept(noexcept(ranges::iter_swap(__x._M_current, __y._M_current)))\n-\t    requires indirectly_swappable<iterator_t<_Base>>\n+\t    requires indirectly_swappable<_Base_iter>\n \t  { return ranges::iter_swap(__x._M_current, __y._M_current); }\n \n \t  friend _Sentinel<_Const>;\n@@ -2271,7 +2279,7 @@ namespace views\n \t      }\n \n \t    if constexpr (_S_ref_is_glvalue)\n-\t      _M_inner = iterator_t<range_reference_t<_Base>>();\n+\t      _M_inner = _Inner_iter();\n \t  }\n \n \t  static constexpr auto\n@@ -2293,10 +2301,9 @@ namespace views\n \t  _S_iter_cat()\n \t  {\n \t    using _OuterCat\n-\t      = iterator_traits<iterator_t<_Base>>::iterator_category;\n+\t      = typename iterator_traits<_Outer_iter>::iterator_category;\n \t    using _InnerCat\n-\t      = iterator_traits<iterator_t<range_reference_t<_Base>>>\n-\t\t ::iterator_category;\n+\t      = typename iterator_traits<_Inner_iter>::iterator_category;\n \t    if constexpr (_S_ref_is_glvalue\n \t\t\t  && derived_from<_OuterCat, bidirectional_iterator_tag>\n \t\t\t  && derived_from<_InnerCat, bidirectional_iterator_tag>)\n@@ -2312,9 +2319,11 @@ namespace views\n \t      return output_iterator_tag{};\n \t  }\n \n-\t  iterator_t<_Base> _M_outer = iterator_t<_Base>();\n-\t  iterator_t<range_reference_t<_Base>> _M_inner\n-\t    = iterator_t<range_reference_t<_Base>>();\n+\t  using _Outer_iter = iterator_t<_Base>;\n+\t  using _Inner_iter = iterator_t<range_reference_t<_Base>>;\n+\n+\t  _Outer_iter _M_outer = _Outer_iter();\n+\t  _Inner_iter _M_inner = _Inner_iter();\n \t  _Parent* _M_parent = nullptr;\n \n \tpublic:\n@@ -2330,17 +2339,16 @@ namespace views\n \t  // XXX: had to change the type of __outer from iterator_t<_Vp> to\n \t  // iterator_t<_Base> here, a possible defect in the spec?\n \t  constexpr\n-\t  _Iterator(_Parent& __parent, iterator_t<_Base> __outer)\n+\t  _Iterator(_Parent& __parent, _Outer_iter __outer)\n \t    : _M_outer(std::move(__outer)),\n \t      _M_parent(std::__addressof(__parent))\n \t  { _M_satisfy(); }\n \n \t  constexpr\n \t  _Iterator(_Iterator<!_Const> __i)\n \t    requires _Const\n-\t      && convertible_to<iterator_t<_Vp>, iterator_t<_Base>>\n-\t      && convertible_to<iterator_t<_InnerRange>,\n-\t\t\t\titerator_t<range_reference_t<_Base>>>\n+\t      && convertible_to<iterator_t<_Vp>, _Outer_iter>\n+\t      && convertible_to<iterator_t<_InnerRange>, _Inner_iter>\n \t    : _M_outer(std::move(__i._M_outer)), _M_inner(__i._M_inner),\n \t      _M_parent(__i._M_parent)\n \t  { }\n@@ -2349,10 +2357,10 @@ namespace views\n \t  operator*() const\n \t  { return *_M_inner; }\n \n-\t  constexpr iterator_t<_Base>\n+\t  constexpr _Outer_iter\n \t  operator->() const\n-\t    requires __detail::__has_arrow<iterator_t<_Base>>\n-\t      && copyable<iterator_t<_Base>>\n+\t    requires __detail::__has_arrow<_Outer_iter>\n+\t      && copyable<_Outer_iter>\n \t  { return _M_inner; }\n \n \t  constexpr _Iterator&\n@@ -2412,8 +2420,8 @@ namespace views\n \t  friend constexpr bool\n \t  operator==(const _Iterator& __x, const _Iterator& __y)\n \t    requires _S_ref_is_glvalue\n-\t      && equality_comparable<iterator_t<_Base>>\n-\t      && equality_comparable<iterator_t<range_reference_t<_Base>>>\n+\t      && equality_comparable<_Outer_iter>\n+\t      && equality_comparable<_Inner_iter>\n \t  {\n \t    return (__x._M_outer == __y._M_outer\n \t\t    && __x._M_inner == __y._M_inner);\n@@ -2764,7 +2772,8 @@ namespace views\n \t  static constexpr auto\n \t  _S_iter_cat()\n \t  {\n-\t    using _Cat = iterator_traits<iterator_t<_Base>>::iterator_category;\n+\t    using _Cat\n+              = typename iterator_traits<iterator_t<_Base>>::iterator_category;\n \t    if constexpr (derived_from<_Cat, forward_iterator_tag>)\n \t      return forward_iterator_tag{};\n \t    else\n@@ -2786,7 +2795,8 @@ namespace views\n \t  bool _M_incremented = false;\n \n \tpublic:\n-\t  using iterator_concept = typename _OuterIter<_Const>::iterator_concept;\n+\t  using iterator_concept\n+\t    = typename _OuterIter<_Const>::iterator_concept;\n \t  using iterator_category = decltype(_S_iter_cat());\n \t  using value_type = range_value_t<_Base>;\n \t  using difference_type = range_difference_t<_Base>;"}]}