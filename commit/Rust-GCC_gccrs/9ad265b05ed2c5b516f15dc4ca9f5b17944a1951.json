{"sha": "9ad265b05ed2c5b516f15dc4ca9f5b17944a1951", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkMjY1YjA1ZWQyYzViNTE2ZjE1ZGM0Y2E5ZjViMTc5NDRhMTk1MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-16T22:37:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-16T22:37:52Z"}, "message": "(integer_{zero,one,all_ones,pow2}p): Handle COMPLEX_CST.\n\n(real_{zero,one,two}p): Likewise.\n\nFrom-SVN: r8473", "tree": {"sha": "401e461f2ce411e3879f94f7aaa695ead6c40a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/401e461f2ce411e3879f94f7aaa695ead6c40a29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ad265b05ed2c5b516f15dc4ca9f5b17944a1951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad265b05ed2c5b516f15dc4ca9f5b17944a1951", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad265b05ed2c5b516f15dc4ca9f5b17944a1951", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad265b05ed2c5b516f15dc4ca9f5b17944a1951/comments", "author": null, "committer": null, "parents": [{"sha": "9c4faac1d5513acab9c9fd9ee957fc68944f3035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4faac1d5513acab9c9fd9ee957fc68944f3035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c4faac1d5513acab9c9fd9ee957fc68944f3035"}], "stats": {"total": 63, "additions": 45, "deletions": 18}, "files": [{"sha": "24a815ac76e4a6774a07cb1e6b758395cf4c4973", "filename": "gcc/tree.c", "status": "modified", "additions": 45, "deletions": 18, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad265b05ed2c5b516f15dc4ca9f5b17944a1951/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad265b05ed2c5b516f15dc4ca9f5b17944a1951/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=9ad265b05ed2c5b516f15dc4ca9f5b17944a1951", "patch": "@@ -1415,34 +1415,42 @@ make_tree_vec (len)\n   return t;\n }\n \f\n-/* Return 1 if EXPR is the integer constant zero.  */\n+/* Return 1 if EXPR is the integer constant zero or a complex constant\n+   of zero.  */\n \n int\n integer_zerop (expr)\n      tree expr;\n {\n   STRIP_NOPS (expr);\n \n-  return (TREE_CODE (expr) == INTEGER_CST\n-\t  && TREE_INT_CST_LOW (expr) == 0\n-\t  && TREE_INT_CST_HIGH (expr) == 0);\n+  return ((TREE_CODE (expr) == INTEGER_CST\n+\t   && TREE_INT_CST_LOW (expr) == 0\n+\t   && TREE_INT_CST_HIGH (expr) == 0)\n+\t  || (TREE_CODE (expr) == COMPLEX_CST\n+\t      && integer_zerop (TREE_REALPART (expr))\n+\t      && integer_zerop (TREE_IMAGPART (expr))));\n }\n \n-/* Return 1 if EXPR is the integer constant one.  */\n+/* Return 1 if EXPR is the integer constant one or the corresponding\n+   complex constant.  */\n \n int\n integer_onep (expr)\n      tree expr;\n {\n   STRIP_NOPS (expr);\n \n-  return (TREE_CODE (expr) == INTEGER_CST\n-\t  && TREE_INT_CST_LOW (expr) == 1\n-\t  && TREE_INT_CST_HIGH (expr) == 0);\n+  return ((TREE_CODE (expr) == INTEGER_CST\n+\t   && TREE_INT_CST_LOW (expr) == 1\n+\t   && TREE_INT_CST_HIGH (expr) == 0)\n+\t  || (TREE_CODE (expr) == COMPLEX_CST\n+\t      && integer_onep (TREE_REALPART (expr))\n+\t      && integer_zerop (TREE_IMAGPART (expr))));\n }\n \n-/* Return 1 if EXPR is an integer containing all 1's\n-   in as much precision as it contains.  */\n+/* Return 1 if EXPR is an integer containing all 1's in as much precision as\n+   it contains.  Likewise for the corresponding complex constant.  */\n \n int\n integer_all_onesp (expr)\n@@ -1453,7 +1461,12 @@ integer_all_onesp (expr)\n \n   STRIP_NOPS (expr);\n \n-  if (TREE_CODE (expr) != INTEGER_CST)\n+  if (TREE_CODE (expr) == COMPLEX_CST\n+      && integer_all_onesp (TREE_REALPART (expr))\n+      && integer_zerop (TREE_IMAGPART (expr)))\n+    return 1;\n+\n+  else if (TREE_CODE (expr) != INTEGER_CST)\n     return 0;\n \n   uns = TREE_UNSIGNED (TREE_TYPE (expr));\n@@ -1495,6 +1508,11 @@ integer_pow2p (expr)\n \n   STRIP_NOPS (expr);\n \n+  if (TREE_CODE (expr) == COMPLEX_CST\n+      && integer_pow2p (TREE_REALPART (expr))\n+      && integer_zerop (TREE_IMAGPART (expr)))\n+    return 1;\n+\n   if (TREE_CODE (expr) != INTEGER_CST)\n     return 0;\n \n@@ -1516,20 +1534,26 @@ real_zerop (expr)\n {\n   STRIP_NOPS (expr);\n \n-  return (TREE_CODE (expr) == REAL_CST\n-\t  && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst0));\n+  return ((TREE_CODE (expr) == REAL_CST\n+\t   && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst0))\n+\t  || (TREE_CODE (expr) == COMPLEX_CST\n+\t      && real_zerop (TREE_REALPART (expr))\n+\t      && real_zerop (TREE_IMAGPART (expr))));\n }\n \n-/* Return 1 if EXPR is the real constant one.  */\n+/* Return 1 if EXPR is the real constant one in real or complex form.  */\n \n int\n real_onep (expr)\n      tree expr;\n {\n   STRIP_NOPS (expr);\n \n-  return (TREE_CODE (expr) == REAL_CST\n-\t  && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst1));\n+  return ((TREE_CODE (expr) == REAL_CST\n+\t   && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst1))\n+\t  || (TREE_CODE (expr) == COMPLEX_CST\n+\t      && real_onep (TREE_REALPART (expr))\n+\t      && real_zerop (TREE_IMAGPART (expr))));\n }\n \n /* Return 1 if EXPR is the real constant two.  */\n@@ -1540,8 +1564,11 @@ real_twop (expr)\n {\n   STRIP_NOPS (expr);\n \n-  return (TREE_CODE (expr) == REAL_CST\n-\t  && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst2));\n+  return ((TREE_CODE (expr) == REAL_CST\n+\t   && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst2))\n+\t  || (TREE_CODE (expr) == COMPLEX_CST\n+\t      && real_twop (TREE_REALPART (expr))\n+\t      && real_zerop (TREE_IMAGPART (expr))));\n }\n \n /* Nonzero if EXP is a constant or a cast of a constant.  */"}]}