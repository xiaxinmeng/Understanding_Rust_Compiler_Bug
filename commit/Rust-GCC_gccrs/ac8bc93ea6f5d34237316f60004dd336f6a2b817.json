{"sha": "ac8bc93ea6f5d34237316f60004dd336f6a2b817", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM4YmM5M2VhNmY1ZDM0MjM3MzE2ZjYwMDA0ZGQzMzZmNmEyYjgxNw==", "commit": {"author": {"name": "Pranav Bhandarkar", "email": "pranav.bhandarkar@celunite.com", "date": "2007-12-10T01:01:03Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2007-12-10T01:01:03Z"}, "message": "caller-save.c (insert_one_insn): If inserting before a call_insn then the registers containing the arguments of...\n\n\t* caller-save.c (insert_one_insn): If inserting before a call_insn\n\tthen the registers containing the arguments of the call are\n\tlive_throughout in the new insn.\n\nCo-Authored-By: Hans-Peter Nilsson <hp@axis.com>\n\nFrom-SVN: r130733", "tree": {"sha": "4d46990c076f2782885e8a8a034988ab5096b244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d46990c076f2782885e8a8a034988ab5096b244"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac8bc93ea6f5d34237316f60004dd336f6a2b817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8bc93ea6f5d34237316f60004dd336f6a2b817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac8bc93ea6f5d34237316f60004dd336f6a2b817", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8bc93ea6f5d34237316f60004dd336f6a2b817/comments", "author": null, "committer": null, "parents": [{"sha": "79e790677d5a0088d60da607ef0c93c1c06becb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e790677d5a0088d60da607ef0c93c1c06becb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79e790677d5a0088d60da607ef0c93c1c06becb5"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "11088fdc8f01167e9caaa08f5b14babe6bc7ec1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8bc93ea6f5d34237316f60004dd336f6a2b817/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8bc93ea6f5d34237316f60004dd336f6a2b817/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac8bc93ea6f5d34237316f60004dd336f6a2b817", "patch": "@@ -1,3 +1,10 @@\n+2007-12-10  Pranav Bhandarkar  <pranav.bhandarkar@celunite.com>\n+\t    Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* caller-save.c (insert_one_insn): If inserting before a call_insn\n+\tthen the registers containing the arguments of the call are\n+\tlive_throughout in the new insn.\n+\n 2007-12-09  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR middle-end/32889"}, {"sha": "7976fd5fd7509b7901f0e11836b2074887392827", "filename": "gcc/caller-save.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8bc93ea6f5d34237316f60004dd336f6a2b817/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8bc93ea6f5d34237316f60004dd336f6a2b817/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=ac8bc93ea6f5d34237316f60004dd336f6a2b817", "patch": "@@ -850,6 +850,38 @@ insert_one_insn (struct insn_chain *chain, int before_p, int code, rtx pat)\n \t\tSET_REGNO_REG_SET (&new->live_throughout, regno + i);\n \t    }\n \t}\n+\n+      /* If CHAIN->INSN is a call, then the registers which contain\n+\t the arguments to the function are live in the new insn.  */\n+      if (CALL_P (chain->insn))\n+\t{\n+\t  for (link = CALL_INSN_FUNCTION_USAGE (chain->insn);\n+\t       link != NULL_RTX;\n+\t       link = XEXP (link, 1))\n+\t    {\n+\t      rtx arg = XEXP (link, 0);\n+\n+\t      if (GET_CODE (arg) == USE)\n+\t\t{\n+\t\t  rtx reg = XEXP (arg, 0);\n+\n+\t\t  if (REG_P (reg))\n+\t\t    {\n+\t\t      int i, regno = REGNO (reg);\n+\n+\t\t      /* Registers in CALL_INSN_FUNCTION_USAGE are always\n+\t\t\t hard registers.  */\n+\t\t      gcc_assert (regno < FIRST_PSEUDO_REGISTER);\n+\n+\t\t      for (i = hard_regno_nregs[regno][GET_MODE (reg)] - 1;\n+\t\t\t   i >= 0; i--)\n+\t\t\tSET_REGNO_REG_SET (&new->live_throughout, regno + i);\n+\t\t    }\n+\t\t}\n+\t    }\n+\t  \n+\t}\n+\n       CLEAR_REG_SET (&new->dead_or_set);\n       if (chain->insn == BB_HEAD (BASIC_BLOCK (chain->block)))\n \tBB_HEAD (BASIC_BLOCK (chain->block)) = new->insn;"}]}