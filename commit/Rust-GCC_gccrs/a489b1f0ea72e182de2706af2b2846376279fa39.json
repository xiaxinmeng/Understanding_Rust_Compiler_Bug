{"sha": "a489b1f0ea72e182de2706af2b2846376279fa39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ4OWIxZjBlYTcyZTE4MmRlMjcwNmFmMmIyODQ2Mzc2Mjc5ZmEzOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-08-20T12:31:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-08-20T12:31:44Z"}, "message": "re PR c++/22369 (C++ produces mis-matched types with pointers to member functions)\n\n2007-08-20  Richard Guenther  <rguenther@suse.de>\n\n\tPR c++/22369\n\tPR c++/22451\n        * call.c (build_new_method_call): Convert initializer to\n        the basetype.\n        * init.c (build_aggr_init): Do not fiddle with types.\n        (build_vec_delete_1): Use correct type for POINTER_PLUS_EXPR.\n        * except.c (build_throw): Do not drop qualifiers for the\n        pointer type.\n        * typeck.c (get_member_function_from_ptrfunc): Do not\n        fiddle with types, instead convert.\n        (build_ptrmemfunc1): Convert to the target type for\n        initialization.\n        (gfc_trans_allocate): Convert result to target type.\n\t* cp-objcp-common.c (cxx_get_alias_set): Pointers to\n\tpointer-to-member structures shall have alias set zero as well.\n\nFrom-SVN: r127647", "tree": {"sha": "4e9b7a1fefd171a2f1b5d078b55d477f30d5c3e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e9b7a1fefd171a2f1b5d078b55d477f30d5c3e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a489b1f0ea72e182de2706af2b2846376279fa39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a489b1f0ea72e182de2706af2b2846376279fa39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a489b1f0ea72e182de2706af2b2846376279fa39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a489b1f0ea72e182de2706af2b2846376279fa39/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff7637ef1d8ab07702005ddba765a2d5fba4c071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7637ef1d8ab07702005ddba765a2d5fba4c071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff7637ef1d8ab07702005ddba765a2d5fba4c071"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "566b80b3a3f1ee4fe2b40825f09b0797dec30111", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a489b1f0ea72e182de2706af2b2846376279fa39/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a489b1f0ea72e182de2706af2b2846376279fa39/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a489b1f0ea72e182de2706af2b2846376279fa39", "patch": "@@ -1,3 +1,21 @@\n+2007-08-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR c++/22369\n+\tPR c++/22451\n+\t* call.c (build_new_method_call): Convert initializer to\n+\tthe basetype.\n+\t* init.c (build_aggr_init): Do not fiddle with types.\n+\t(build_vec_delete_1): Use correct type for POINTER_PLUS_EXPR.\n+\t* except.c (build_throw): Do not drop qualifiers for the\n+\tpointer type.\n+\t* typeck.c (get_member_function_from_ptrfunc): Do not\n+\tfiddle with types, instead convert.\n+\t(build_ptrmemfunc1): Convert to the target type for\n+\tinitialization.\n+\t(gfc_trans_allocate): Convert result to target type.\n+\t* cp-objcp-common.c (cxx_get_alias_set): Pointers to\n+\tpointer-to-member structures shall have alias set zero as well.\n+\n 2007-08-20  Richard Guenther  <rguenther@suse.de>\n \n \t* cp-objcp-common.h (LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P):"}, {"sha": "a504dc84abca90623276668a51a86aed9b1ccea1", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a489b1f0ea72e182de2706af2b2846376279fa39/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a489b1f0ea72e182de2706af2b2846376279fa39/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a489b1f0ea72e182de2706af2b2846376279fa39", "patch": "@@ -5514,15 +5514,18 @@ build_new_method_call (tree instance, tree fns, tree args,\n \n   instance_ptr = build_this (instance);\n \n-  /* It's OK to call destructors on cv-qualified objects.  Therefore,\n-     convert the INSTANCE_PTR to the unqualified type, if necessary.  */\n-  if (DECL_DESTRUCTOR_P (fn))\n+  /* It's OK to call destructors and constructors on cv-qualified objects.\n+     Therefore, convert the INSTANCE_PTR to the unqualified type, if\n+     necessary.  */\n+  if (DECL_DESTRUCTOR_P (fn)\n+      || DECL_CONSTRUCTOR_P (fn))\n     {\n       tree type = build_pointer_type (basetype);\n       if (!same_type_p (type, TREE_TYPE (instance_ptr)))\n \tinstance_ptr = build_nop (type, instance_ptr);\n-      name = complete_dtor_identifier;\n     }\n+  if (DECL_DESTRUCTOR_P (fn))\n+    name = complete_dtor_identifier;\n \n   class_type = (conversion_path ? BINFO_TYPE (conversion_path) : NULL_TREE);\n   mem_args = tree_cons (NULL_TREE, instance_ptr, args);"}, {"sha": "fbd407c3e1203eb1965611b032ae1a42bd85e390", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a489b1f0ea72e182de2706af2b2846376279fa39/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a489b1f0ea72e182de2706af2b2846376279fa39/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=a489b1f0ea72e182de2706af2b2846376279fa39", "patch": "@@ -44,7 +44,9 @@ cxx_get_alias_set (tree t)\n     return get_alias_set (TYPE_CONTEXT (t));\n \n   /* Punt on PMFs until we canonicalize functions properly.  */\n-  if (TYPE_PTRMEMFUNC_P (t))\n+  if (TYPE_PTRMEMFUNC_P (t)\n+      || (POINTER_TYPE_P (t)\n+\t  && TYPE_PTRMEMFUNC_P (TREE_TYPE (t))))\n     return 0;\n \n   return c_common_get_alias_set (t);"}, {"sha": "2fe0be1afc07fb77d88b0a4688b6cf9b65af69ad", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a489b1f0ea72e182de2706af2b2846376279fa39/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a489b1f0ea72e182de2706af2b2846376279fa39/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=a489b1f0ea72e182de2706af2b2846376279fa39", "patch": "@@ -682,7 +682,7 @@ build_throw (tree exp)\n \t respectively.  */\n       temp_type = is_bitfield_expr_with_lowered_type (exp);\n       if (!temp_type)\n-\ttemp_type = type_decays_to (TYPE_MAIN_VARIANT (TREE_TYPE (exp)));\n+\ttemp_type = type_decays_to (TREE_TYPE (exp));\n \n       /* OK, this is kind of wacky.  The standard says that we call\n \t terminate when the exception handling mechanism, after"}, {"sha": "19093194ad60204b27471923df73261713dd8c40", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a489b1f0ea72e182de2706af2b2846376279fa39/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a489b1f0ea72e182de2706af2b2846376279fa39/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a489b1f0ea72e182de2706af2b2846376279fa39", "patch": "@@ -1134,15 +1134,13 @@ build_aggr_init (tree exp, tree init, int flags)\n     /* Just know that we've seen something for this node.  */\n     TREE_USED (exp) = 1;\n \n-  TREE_TYPE (exp) = TYPE_MAIN_VARIANT (type);\n   is_global = begin_init_stmts (&stmt_expr, &compound_stmt);\n   destroy_temps = stmts_are_full_exprs_p ();\n   current_stmt_tree ()->stmts_are_full_exprs_p = 0;\n   expand_aggr_init_1 (TYPE_BINFO (type), exp, exp,\n \t\t      init, LOOKUP_NORMAL|flags);\n   stmt_expr = finish_init_stmts (is_global, stmt_expr, compound_stmt);\n   current_stmt_tree ()->stmts_are_full_exprs_p = destroy_temps;\n-  TREE_TYPE (exp) = type;\n   TREE_READONLY (exp) = was_const;\n   TREE_THIS_VOLATILE (exp) = was_volatile;\n \n@@ -2320,7 +2318,7 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n   tbase = create_temporary_var (ptype);\n   tbase_init = build_modify_expr (tbase, NOP_EXPR,\n \t\t\t\t  fold_build2 (POINTER_PLUS_EXPR, ptype,\n-\t\t\t\t\t       base,\n+\t\t\t\t\t       fold_convert (ptype, base),\n \t\t\t\t\t       virtual_size));\n   DECL_REGISTER (tbase) = 1;\n   controller = build3 (BIND_EXPR, void_type_node, tbase,"}, {"sha": "f01960882197f573128a0dc9b773ae77e08a662f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a489b1f0ea72e182de2706af2b2846376279fa39/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a489b1f0ea72e182de2706af2b2846376279fa39/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a489b1f0ea72e182de2706af2b2846376279fa39", "patch": "@@ -2646,7 +2646,7 @@ get_member_function_from_ptrfunc (tree *instance_ptrptr, tree function)\n \te2 = build1 (NOP_EXPR, TREE_TYPE (e2),\n \t\t     build_unary_op (ADDR_EXPR, e2, /*noconvert=*/1));\n \n-      TREE_TYPE (e2) = TREE_TYPE (e3);\n+      e2 = fold_convert (TREE_TYPE (e3), e2);\n       e1 = build_conditional_expr (e1, e2, e3);\n \n       /* Make sure this doesn't get evaluated first inside one of the\n@@ -6056,6 +6056,9 @@ build_ptrmemfunc1 (tree type, tree delta, tree pfn)\n   /* Make sure DELTA has the type we want.  */\n   delta = convert_and_check (delta_type_node, delta);\n \n+  /* Convert to the correct target type if necessary.  */\n+  pfn = fold_convert (TREE_TYPE (pfn_field), pfn);\n+\n   /* Finish creating the initializer.  */\n   v = VEC_alloc(constructor_elt, gc, 2);\n   CONSTRUCTOR_APPEND_ELT(v, pfn_field, pfn);"}]}