{"sha": "8e26ac4749c5ddf827e18a846b1010b091f76fa2", "node_id": "C_kwDOANBUbNoAKDhlMjZhYzQ3NDljNWRkZjgyN2UxOGE4NDZiMTAxMGIwOTFmNzZmYTI", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2023-03-09T19:42:18Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2023-03-09T19:42:18Z"}, "message": "AArch64: Fix codegen regressions around tbz.\n\nWe were analyzing code quality after recent changes and have noticed that the\ntbz support somehow managed to increase the number of branches overall rather\nthan decreased them.\n\nWhile investigating this we figured out that the problem is that when an\nexisting & <contants> exists in gimple and the instruction is generated because\nof the range information gotten from the ANDed constant that we end up with the\nsituation that you get a NOP AND in the RTL expansion.\n\nThis is not a problem as CSE will take care of it normally.   The issue is when\nthis original AND was done in a location where PRE or FRE \"lift\" the AND to a\ndifferent basic block.  This triggers a problem when the resulting value is not\nsingle use.  Instead of having an AND and tbz, we end up generating an\nAND + TST + BR if the mode is HI or QI.\n\nThis CSE across BB was a problem before but this change made it worse. Our\nbranch patterns rely on combine being able to fold AND or zero_extends into the\ninstructions.\n\nTo work around this (since a proper fix is outside of the scope of stage-4) we\nare limiting the new tbranch optab to only HI and QI mode values.  This isn't a\nproblem because these two modes are modes for which we don't have CBZ support,\nso they are the problematic cases to begin with.  Additionally booleans are QI.\n\nThe second thing we're doing is limiting the only legal bitpos to pos 0. i.e.\nonly the bottom bit.  This such that we prevent the double ANDs as much as\npossible.\n\nNow most other cases, i.e. where we had an explicit & in the source code are\nstill handled correctly by the anonymous (*tb<optab><ALLI:mode><GPI:mode>1)\npattern that was added along with tbranch support.\n\nThis means we don't expand the superflous AND here, and while it doesn't fix the\nproblem that in the cross BB case we loss tbz, it also doesn't make things worse.\n\nWith these tweaks we've now reduced the number of insn uniformly was originally\nexpected.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.md (tbranch_<code><mode>3): Restrict to SHORT\n\tand bottom bit only.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/tbz_2.c: New test.\n\t* gcc.target/aarch64/tbz_3.c: New test.", "tree": {"sha": "c511f3db7a1a1db98270cba540db26443e0e516a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c511f3db7a1a1db98270cba540db26443e0e516a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e26ac4749c5ddf827e18a846b1010b091f76fa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e26ac4749c5ddf827e18a846b1010b091f76fa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e26ac4749c5ddf827e18a846b1010b091f76fa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e26ac4749c5ddf827e18a846b1010b091f76fa2/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96abc8222464fb1c4fba9f2ffe3fd1b081a9196e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96abc8222464fb1c4fba9f2ffe3fd1b081a9196e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96abc8222464fb1c4fba9f2ffe3fd1b081a9196e"}], "stats": {"total": 152, "additions": 150, "deletions": 2}, "files": [{"sha": "af9087508ac6b96f0b35a4e2b68b65b748acd5fc", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e26ac4749c5ddf827e18a846b1010b091f76fa2/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e26ac4749c5ddf827e18a846b1010b091f76fa2/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=8e26ac4749c5ddf827e18a846b1010b091f76fa2", "patch": "@@ -949,8 +949,8 @@\n \n (define_expand \"tbranch_<code><mode>3\"\n   [(set (pc) (if_then_else\n-              (EQL (match_operand:ALLI 0 \"register_operand\")\n-                   (match_operand 1 \"aarch64_simd_shift_imm_<mode>\"))\n+              (EQL (match_operand:SHORT 0 \"register_operand\")\n+                   (match_operand 1 \"const0_operand\"))\n               (label_ref (match_operand 2 \"\"))\n               (pc)))]\n   \"\""}, {"sha": "ec128b58f35276a7c5452685a65c73f95f2d5f9a", "filename": "gcc/testsuite/gcc.target/aarch64/tbz_2.c", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e26ac4749c5ddf827e18a846b1010b091f76fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftbz_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e26ac4749c5ddf827e18a846b1010b091f76fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftbz_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftbz_2.c?ref=8e26ac4749c5ddf827e18a846b1010b091f76fa2", "patch": "@@ -0,0 +1,130 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O2 -std=c99  -fno-unwind-tables -fno-asynchronous-unwind-tables\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" { target { le } } } } */\n+\n+#include <stdbool.h>\n+\n+void h(void);\n+\n+/*\n+** g1:\n+** \tcbnz\tw0, .L[0-9]+\n+** \tret\n+** \t...\n+*/\n+void g1(int x)\n+{\n+  if (__builtin_expect (x, 0))\n+    h ();\n+}\n+\n+/* \n+** g2:\n+** \ttbnz\tx0, 0, .L[0-9]+\n+** \tret\n+** \t...\n+*/\n+void g2(int x)\n+{\n+  if (__builtin_expect (x & 1, 0))\n+    h ();\n+}\n+\n+/* \n+** g3:\n+** \ttbnz\tx0, 3, .L[0-9]+\n+** \tret\n+** \t...\n+*/\n+void g3(int x)\n+{\n+  if (__builtin_expect (x & 8, 0))\n+    h ();\n+}\n+\n+/* \n+** g4:\n+** \ttbnz\tw0, #31, .L[0-9]+\n+** \tret\n+** \t...\n+*/\n+void g4(int x)\n+{\n+  if (__builtin_expect (x & (1 << 31), 0))\n+    h ();\n+}\n+\n+/* \n+** g5:\n+** \ttst\tw0, 255\n+** \tbne\t.L[0-9]+\n+** \tret\n+** \t...\n+*/\n+void g5(char x)\n+{\n+  if (__builtin_expect (x, 0))\n+    h ();\n+}\n+\n+/* \n+** g6:\n+** \ttbnz\tw0, 0, .L[0-9]+\n+** \tret\n+** \t...\n+*/\n+void g6(char x)\n+{\n+  if (__builtin_expect (x & 1, 0))\n+    h ();\n+}\n+\n+/* \n+** g7:\n+** \ttst\tw0, 3\n+** \tbne\t.L[0-9]+\n+** \tret\n+** \t...\n+*/\n+void g7(char x)\n+{\n+  if (__builtin_expect (x & 3, 0))\n+    h ();\n+}\n+\n+/* \n+** g8:\n+** \ttbnz\tw0, 7, .L[0-9]+\n+** \tret\n+** \t...\n+*/\n+void g8(char x)\n+{\n+  if (__builtin_expect (x & (1 << 7), 0))\n+    h ();\n+}\n+\n+/* \n+** g9:\n+** \ttbnz\tw0, 0, .L[0-9]+\n+** \tret\n+** \t...\n+*/\n+void g9(bool x)\n+{\n+  if (__builtin_expect (x, 0))\n+    h ();\n+}\n+\n+/* \n+** g10:\n+** \ttbnz\tw0, 0, .L[0-9]+\n+** \tret\n+** \t...\n+*/\n+void g10(bool x)\n+{\n+  if (__builtin_expect (x & 1, 0))\n+    h ();\n+}\n+"}, {"sha": "74f758d33e2273b9d4fdf118c2ee5072eef76f8e", "filename": "gcc/testsuite/gcc.target/aarch64/tbz_3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e26ac4749c5ddf827e18a846b1010b091f76fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftbz_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e26ac4749c5ddf827e18a846b1010b091f76fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftbz_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftbz_3.c?ref=8e26ac4749c5ddf827e18a846b1010b091f76fa2", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+void g(int);\n+\n+void\n+f (unsigned int x, _Bool y)\n+{\n+  for (int i = 0; i < 100; ++i)\n+    {\n+      if ((x >> 31) | y)\n+\tg (1);\n+      for (int j = 0; j < 100; ++j)\n+\tg (2);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {and\\t} 1 } } */"}]}