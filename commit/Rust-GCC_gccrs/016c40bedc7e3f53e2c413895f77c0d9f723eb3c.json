{"sha": "016c40bedc7e3f53e2c413895f77c0d9f723eb3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE2YzQwYmVkYzdlM2Y1M2UyYzQxMzg5NWY3N2MwZDlmNzIzZWIzYw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-09T18:26:13Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-10T18:10:57Z"}, "message": "Introduce new label namesapce for name resolution\n\nLabels are in their own namesapce so they do not affect types and normal\nvalues within a program.\n\nAddresses #107", "tree": {"sha": "acc94919d37d203dbfa251af2c844a18ace0ba81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acc94919d37d203dbfa251af2c844a18ace0ba81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/016c40bedc7e3f53e2c413895f77c0d9f723eb3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/016c40bedc7e3f53e2c413895f77c0d9f723eb3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/016c40bedc7e3f53e2c413895f77c0d9f723eb3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/016c40bedc7e3f53e2c413895f77c0d9f723eb3c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3a343c8853cb0967b21e8da23a829665208b25d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a343c8853cb0967b21e8da23a829665208b25d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3a343c8853cb0967b21e8da23a829665208b25d"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "f5dc579b30706ecc0de6d73904b3303e894046bd", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c40bedc7e3f53e2c413895f77c0d9f723eb3c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c40bedc7e3f53e2c413895f77c0d9f723eb3c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=016c40bedc7e3f53e2c413895f77c0d9f723eb3c", "patch": "@@ -88,8 +88,10 @@ class ResolveItem : public ResolverBase\n     NodeId scope_node_id = function.get_node_id ();\n     resolver->get_name_scope ().push (scope_node_id);\n     resolver->get_type_scope ().push (scope_node_id);\n+    resolver->get_label_scope ().push (scope_node_id);\n     resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n     resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n+    resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n     // we make a new scope so the names of parameters are resolved and shadowed\n     // correctly\n@@ -111,6 +113,7 @@ class ResolveItem : public ResolverBase\n \n     resolver->get_name_scope ().pop ();\n     resolver->get_type_scope ().pop ();\n+    resolver->get_label_scope ().pop ();\n   }\n \n   void visit (AST::InherentImpl &impl_block)"}, {"sha": "748f9727ace37379f8511ec2ebf838a77abc07e4", "filename": "gcc/rust/resolve/rust-ast-resolve-unused.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c40bedc7e3f53e2c413895f77c0d9f723eb3c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c40bedc7e3f53e2c413895f77c0d9f723eb3c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h?ref=016c40bedc7e3f53e2c413895f77c0d9f723eb3c", "patch": "@@ -43,6 +43,7 @@ class ScanUnused\n     auto resolver = Resolver::get ();\n     resolver->iterate_name_ribs ([&] (Rib *r) -> void { ScanRib (r); });\n     resolver->iterate_type_ribs ([&] (Rib *r) -> void { ScanRib (r); });\n+    resolver->iterate_label_ribs ([&] (Rib *r) -> void { ScanRib (r); });\n   }\n };\n "}, {"sha": "0ed2bfba785a7ed9e559455da7e2716201851024", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c40bedc7e3f53e2c413895f77c0d9f723eb3c/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c40bedc7e3f53e2c413895f77c0d9f723eb3c/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=016c40bedc7e3f53e2c413895f77c0d9f723eb3c", "patch": "@@ -49,7 +49,8 @@ namespace Resolver {\n Resolver::Resolver ()\n   : mappings (Analysis::Mappings::get ()), tyctx (TypeCheckContext::get ()),\n     name_scope (Scope (mappings->get_current_crate ())),\n-    type_scope (Scope (mappings->get_current_crate ()))\n+    type_scope (Scope (mappings->get_current_crate ())),\n+    label_scope (Scope (mappings->get_current_crate ()))\n {\n   generate_builtins ();\n }\n@@ -81,6 +82,13 @@ Resolver::push_new_type_rib (Rib *r)\n   type_ribs[r->get_node_id ()] = r;\n }\n \n+void\n+Resolver::push_new_label_rib (Rib *r)\n+{\n+  rust_assert (label_ribs.find (r->get_node_id ()) == label_ribs.end ());\n+  label_ribs[r->get_node_id ()] = r;\n+}\n+\n bool\n Resolver::find_name_rib (NodeId id, Rib **rib)\n {\n@@ -238,6 +246,27 @@ Resolver::lookup_resolved_type (NodeId refId, NodeId *defId)\n   return true;\n }\n \n+void\n+Resolver::insert_resolved_label (NodeId refId, NodeId defId)\n+{\n+  auto it = resolved_labels.find (refId);\n+  rust_assert (it == resolved_labels.end ());\n+\n+  resolved_types[refId] = defId;\n+  get_label_scope ().append_reference_for_def (refId, defId);\n+}\n+\n+bool\n+Resolver::lookup_resolved_label (NodeId refId, NodeId *defId)\n+{\n+  auto it = resolved_labels.find (refId);\n+  if (it == resolved_labels.end ())\n+    return false;\n+\n+  *defId = it->second;\n+  return true;\n+}\n+\n // NameResolution\n \n NameResolution *\n@@ -275,6 +304,9 @@ NameResolution::go (AST::Crate &crate)\n   // setup parent scoping for new types\n   resolver->get_type_scope ().push (mappings->get_next_node_id ());\n   resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n+  // setup label scope\n+  resolver->get_label_scope ().push (mappings->get_next_node_id ());\n+  resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n   // first gather the top-level namespace names then we drill down\n   for (auto it = crate.items.begin (); it != crate.items.end (); it++)\n@@ -293,8 +325,10 @@ ResolveExpr::visit (AST::BlockExpr &expr)\n   NodeId scope_node_id = expr.get_node_id ();\n   resolver->get_name_scope ().push (scope_node_id);\n   resolver->get_type_scope ().push (scope_node_id);\n+  resolver->get_label_scope ().push (scope_node_id);\n   resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n   resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n+  resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n   expr.iterate_stmts ([&] (AST::Stmt *s) mutable -> bool {\n     ResolveStmt::go (s, s->get_node_id ());\n@@ -306,6 +340,7 @@ ResolveExpr::visit (AST::BlockExpr &expr)\n \n   resolver->get_name_scope ().pop ();\n   resolver->get_type_scope ().pop ();\n+  resolver->get_label_scope ().pop ();\n }\n \n // rust-ast-resolve-struct-expr-field.h"}, {"sha": "9c01d47debade8193957bb287c1cc89b39c9b051", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c40bedc7e3f53e2c413895f77c0d9f723eb3c/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c40bedc7e3f53e2c413895f77c0d9f723eb3c/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=016c40bedc7e3f53e2c413895f77c0d9f723eb3c", "patch": "@@ -250,9 +250,11 @@ class Resolver\n \n   void push_new_name_rib (Rib *r);\n   void push_new_type_rib (Rib *r);\n+  void push_new_label_rib (Rib *r);\n \n   bool find_name_rib (NodeId id, Rib **rib);\n   bool find_type_rib (NodeId id, Rib **rib);\n+  bool find_label_rib (NodeId id, Rib **rib);\n \n   void insert_new_definition (NodeId id, Definition def);\n   bool lookup_definition (NodeId id, Definition *def);\n@@ -263,9 +265,13 @@ class Resolver\n   void insert_resolved_type (NodeId refId, NodeId defId);\n   bool lookup_resolved_type (NodeId refId, NodeId *defId);\n \n+  void insert_resolved_label (NodeId refId, NodeId defId);\n+  bool lookup_resolved_label (NodeId refId, NodeId *defId);\n+\n   // proxy for scoping\n   Scope &get_name_scope () { return name_scope; }\n   Scope &get_type_scope () { return type_scope; }\n+  Scope &get_label_scope () { return label_scope; }\n \n   NodeId get_global_type_node_id () { return global_type_node_id; }\n \n@@ -320,6 +326,12 @@ class Resolver\n       }\n   }\n \n+  void iterate_label_ribs (std::function<void (Rib *)> cb)\n+  {\n+    for (auto it = label_ribs.begin (); it != label_ribs.end (); it++)\n+      cb (it->second);\n+  }\n+\n private:\n   Resolver ();\n \n@@ -332,13 +344,15 @@ class Resolver\n \n   Scope name_scope;\n   Scope type_scope;\n+  Scope label_scope;\n \n   NodeId global_type_node_id;\n   NodeId unit_ty_node_id;\n \n   // map a AST Node to a Rib\n   std::map<NodeId, Rib *> name_ribs;\n   std::map<NodeId, Rib *> type_ribs;\n+  std::map<NodeId, Rib *> label_ribs;\n \n   // map any Node to its Definition\n   // ie any name or type usage\n@@ -354,6 +368,7 @@ class Resolver\n   // we need two namespaces one for names and ones for types\n   std::map<NodeId, NodeId> resolved_names;\n   std::map<NodeId, NodeId> resolved_types;\n+  std::map<NodeId, NodeId> resolved_labels;\n \n   // map of resolved names mutability flag\n   std::map<NodeId, bool> decl_mutability;"}]}