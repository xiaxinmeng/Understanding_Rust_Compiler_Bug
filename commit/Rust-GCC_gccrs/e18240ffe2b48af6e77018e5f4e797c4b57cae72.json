{"sha": "e18240ffe2b48af6e77018e5f4e797c4b57cae72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE4MjQwZmZlMmI0OGFmNmU3NzAxOGU1ZjRlNzk3YzRiNTdjYWU3Mg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-11-12T21:01:38Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-11-12T21:01:38Z"}, "message": "Instrument only selected files (PR gcov-profile/87442).\n\n2018-11-12  Martin Liska  <mliska@suse.cz>\n\n\tPR gcov-profile/87442\n\t* common.opt: Add -fprofile-filter-files and -fprofile-exclude-files\n\toptions.\n\t* doc/invoke.texi: Document them.\n\t* tree-profile.c (parse_profile_filter): New.\n\t(parse_profile_file_filtering): Likewise.\n\t(release_profile_file_filtering): Likewise.\n\t(include_source_file_for_profile): Likewise.\n\t(tree_profiling): Filter source files based on the\n\tnewly added options.\n2018-11-12  Martin Liska  <mliska@suse.cz>\n\n\tPR gcov-profile/87442\n\t* gcc.dg/profile-filtering-1.c: New test.\n\t* gcc.dg/profile-filtering-2.c: New test.\n\nFrom-SVN: r266037", "tree": {"sha": "47b3de5539d55bde0524f303bd78eed461e6601e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47b3de5539d55bde0524f303bd78eed461e6601e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e18240ffe2b48af6e77018e5f4e797c4b57cae72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18240ffe2b48af6e77018e5f4e797c4b57cae72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e18240ffe2b48af6e77018e5f4e797c4b57cae72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18240ffe2b48af6e77018e5f4e797c4b57cae72/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e375da43d77a3b54185f26c6f474e3482185e7e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e375da43d77a3b54185f26c6f474e3482185e7e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e375da43d77a3b54185f26c6f474e3482185e7e4"}], "stats": {"total": 204, "additions": 204, "deletions": 0}, "files": [{"sha": "b4195db10328d2e52640ac30df8dbc9cacf47c36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18240ffe2b48af6e77018e5f4e797c4b57cae72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18240ffe2b48af6e77018e5f4e797c4b57cae72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e18240ffe2b48af6e77018e5f4e797c4b57cae72", "patch": "@@ -1,3 +1,16 @@\n+2018-11-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/87442\n+\t* common.opt: Add -fprofile-filter-files and -fprofile-exclude-files\n+\toptions.\n+\t* doc/invoke.texi: Document them.\n+\t* tree-profile.c (parse_profile_filter): New.\n+\t(parse_profile_file_filtering): Likewise.\n+\t(release_profile_file_filtering): Likewise.\n+\t(include_source_file_for_profile): Likewise.\n+\t(tree_profiling): Filter source files based on the\n+\tnewly added options.\n+\n 2018-11-12  Martin Liska  <mliska@suse.cz>\n \n \tPR target/87903"}, {"sha": "73065f5a1e282524b9ea1a1c74379dd0f0dce209", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18240ffe2b48af6e77018e5f4e797c4b57cae72/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18240ffe2b48af6e77018e5f4e797c4b57cae72/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=e18240ffe2b48af6e77018e5f4e797c4b57cae72", "patch": "@@ -2079,6 +2079,14 @@ fprofile-update=\n Common Joined RejectNegative Enum(profile_update) Var(flag_profile_update) Init(PROFILE_UPDATE_SINGLE)\n -fprofile-update=[single|atomic|prefer-atomic]\tSet the profile update method.\n \n+fprofile-filter-files=\n+Common Joined RejectNegative Var(flag_profile_filter_files)\n+Instrument only functions from files where names match any regular expression (separated by a semi-colon).\n+\n+fprofile-exclude-files=\n+Common Joined RejectNegative Var(flag_profile_exclude_files)\n+Instrument only functions from files where names do not match all the regular expressions (separated by a semi-colon).\n+\n Enum\n Name(profile_update) Type(enum profile_update) UnknownError(unknown profile update method %qs)\n "}, {"sha": "75e9556f092d1c924f6f1d4c06fa86a793b7f4fb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18240ffe2b48af6e77018e5f4e797c4b57cae72/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18240ffe2b48af6e77018e5f4e797c4b57cae72/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e18240ffe2b48af6e77018e5f4e797c4b57cae72", "patch": "@@ -484,6 +484,7 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-p  -pg  -fprofile-arcs  --coverage  -ftest-coverage @gol\n -fprofile-abs-path @gol\n -fprofile-dir=@var{path}  -fprofile-generate  -fprofile-generate=@var{path} @gol\n+-fprofile-update=@var{method}  -fprofile-filter-files=@var{regex}  -fprofile-exclude-files=@var{regex} @gol\n -fsanitize=@var{style}  -fsanitize-recover  -fsanitize-recover=@var{style} @gol\n -fasan-shadow-offset=@var{number}  -fsanitize-sections=@var{s1},@var{s2},... @gol\n -fsanitize-undefined-trap-on-error  -fbounds-check @gol\n@@ -11896,6 +11897,24 @@ when supported by a target, or to @samp{single} otherwise.  The GCC driver\n automatically selects @samp{prefer-atomic} when @option{-pthread}\n is present in the command line.\n \n+@item -fprofile-filter-files=@var{regex}\n+@opindex fprofile-filter-files\n+\n+Instrument only functions from files where names match\n+any regular expression (separated by a semi-colon).\n+\n+For example, @option{-fprofile-filter-files=main.c;module.*.c} will instrument\n+only @file{main.c} and all C files starting with 'module'.\n+\n+@item -fprofile-exclude-files=@var{regex}\n+@opindex fprofile-exclude-files\n+\n+Instrument only functions from files where names do not match\n+all the regular expressions (separated by a semi-colon).\n+\n+For example, @option{-fprofile-exclude-files=/usr/*} will prevent instrumentation\n+of all files that are located in @file{/usr/} folder.\n+\n @item -fsanitize=address\n @opindex fsanitize=address\n Enable AddressSanitizer, a fast memory error detector."}, {"sha": "3bc031e70a7fba1368cd01be39a35ae8f2f63e73", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18240ffe2b48af6e77018e5f4e797c4b57cae72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18240ffe2b48af6e77018e5f4e797c4b57cae72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e18240ffe2b48af6e77018e5f4e797c4b57cae72", "patch": "@@ -1,3 +1,9 @@\n+2018-11-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/87442\n+\t* gcc.dg/profile-filtering-1.c: New test.\n+\t* gcc.dg/profile-filtering-2.c: New test.\n+\n 2018-11-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/81824"}, {"sha": "f123e24b2a87bb5284ad7c6b934d60ccd83bbef6", "filename": "gcc/testsuite/gcc.dg/profile-filtering-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18240ffe2b48af6e77018e5f4e797c4b57cae72/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-filtering-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18240ffe2b48af6e77018e5f4e797c4b57cae72/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-filtering-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-filtering-1.c?ref=e18240ffe2b48af6e77018e5f4e797c4b57cae72", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-require-profiling \"-fprofile-generate\" } */\n+/* { dg-options \"-O2 -fprofile-generate -fprofile-filter-files=.\\*filtering-1.c -fdump-tree-optimized\" } */\n+\n+extern void abort (void);\n+\n+int *p1;\n+int *p2;\n+int *p3;\n+\n+int ga = 100;\n+\n+int\n+sub (int i, int j)\n+{\n+  int k;\n+  int l;\n+  int m;\n+  int n;\n+  p1 = &k;\n+  p2 = &l;\n+  p3 = &m;\n+  k = 20;\n+  l = 30;\n+  m = 40;\n+  n = i / j;\n+  return n + ga;\n+}\n+\n+int\n+main(void)\n+{\n+  if (sub (99, 33) != 103)\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"PROF_edge\" \"optimized\" } } */"}, {"sha": "98bd3aea00f9869f417a71b228788d00a5b6c52d", "filename": "gcc/testsuite/gcc.dg/profile-filtering-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18240ffe2b48af6e77018e5f4e797c4b57cae72/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-filtering-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18240ffe2b48af6e77018e5f4e797c4b57cae72/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-filtering-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-filtering-2.c?ref=e18240ffe2b48af6e77018e5f4e797c4b57cae72", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-require-profiling \"-fprofile-generate\" } */\n+/* { dg-options \"-O2 -fprofile-generate -fprofile-filter-files=.\\*filtering-1.c -fprofile-exclude-files=.\\* -fdump-tree-optimized\" } */\n+\n+extern void abort (void);\n+\n+int *p1;\n+int *p2;\n+int *p3;\n+\n+int ga = 100;\n+\n+int\n+sub (int i, int j)\n+{\n+  int k;\n+  int l;\n+  int m;\n+  int n;\n+  p1 = &k;\n+  p2 = &l;\n+  p3 = &m;\n+  k = 20;\n+  l = 30;\n+  m = 40;\n+  n = i / j;\n+  return n + ga;\n+}\n+\n+int\n+main(void)\n+{\n+  if (sub (99, 33) != 103)\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"PROF_edge\" \"optimized\" } } */"}, {"sha": "48204423eaf45ceeac5ba45c46cf018cda111d51", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18240ffe2b48af6e77018e5f4e797c4b57cae72/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18240ffe2b48af6e77018e5f4e797c4b57cae72/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=e18240ffe2b48af6e77018e5f4e797c4b57cae72", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pretty-print.h\"\n #include \"langhooks.h\"\n #include \"stor-layout.h\"\n+#include \"xregex.h\"\n \n static GTY(()) tree gcov_type_node;\n static GTY(()) tree tree_interval_profiler_fn;\n@@ -610,6 +611,82 @@ gimple_gen_ior_profiler (histogram_value value, unsigned tag, unsigned base)\n   gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n }\n \n+static vec<regex_t> profile_filter_files;\n+static vec<regex_t> profile_exclude_files;\n+\n+/* Parse list of provided REGEX (separated with semi-collon) and\n+   create expressions (of type regex_t) and save them into V vector.\n+   If there is a regular expression parsing error, error message is\n+   printed for FLAG_NAME.  */\n+\n+static void\n+parse_profile_filter (const char *regex, vec<regex_t> *v,\n+\t\t      const char *flag_name)\n+{\n+  v->create (4);\n+  if (regex != NULL)\n+    {\n+      char *str = xstrdup (regex);\n+      for (char *p = strtok (str, \";\"); p != NULL; p = strtok (NULL, \";\"))\n+\t{\n+\t  regex_t r;\n+\t  if (regcomp (&r, p, REG_EXTENDED | REG_NOSUB) != 0)\n+\t    {\n+\t      error (\"invalid regular expression '%s' in %<%s%>\",\n+\t\t     p, flag_name);\n+\t      return;\n+\t    }\n+\n+\t  v->safe_push (r);\n+\t}\n+    }\n+}\n+\n+/* Parse values of -fprofile-filter-files and -fprofile-exclude-files\n+   options.  */\n+\n+static void\n+parse_profile_file_filtering ()\n+{\n+  parse_profile_filter (flag_profile_filter_files, &profile_filter_files,\n+\t\t\t\"-fprofile-filter-files\");\n+  parse_profile_filter (flag_profile_exclude_files, &profile_exclude_files,\n+\t\t\t\"-fprofile-exclude-files\");\n+}\n+\n+/* Parse vectors of regular expressions.  */\n+\n+static void\n+release_profile_file_filtering ()\n+{\n+  profile_filter_files.release ();\n+  profile_exclude_files.release ();\n+}\n+\n+/* Return true when FILENAME should be instrumented based on\n+   -fprofile-filter-files and -fprofile-exclude-files options.  */\n+\n+static bool\n+include_source_file_for_profile (const char *filename)\n+{\n+  /* First check whether file is included in flag_profile_exclude_files.  */\n+  for (unsigned i = 0; i < profile_exclude_files.length (); i++)\n+    if (regexec (&profile_exclude_files[i],\n+\t\t filename, 0, NULL, 0) == REG_NOERROR)\n+      return false;\n+\n+  /* For non-empty flag_profile_filter_files include only files matching a\n+     regex in the flag.  */\n+  if (profile_filter_files.is_empty ())\n+    return true;\n+\n+  for (unsigned i = 0; i < profile_filter_files.length (); i++)\n+    if (regexec (&profile_filter_files[i], filename, 0, NULL, 0) == REG_NOERROR)\n+      return true;\n+\n+  return false;\n+}\n+\n #ifndef HAVE_sync_compare_and_swapsi\n #define HAVE_sync_compare_and_swapsi 0\n #endif\n@@ -658,6 +735,7 @@ tree_profiling (void)\n   gcc_assert (symtab->state == IPA_SSA);\n \n   init_node_map (true);\n+  parse_profile_file_filtering ();\n \n   FOR_EACH_DEFINED_FUNCTION (node)\n     {\n@@ -678,6 +756,10 @@ tree_profiling (void)\n \t  && flag_test_coverage)\n \tcontinue;\n \n+      const char *file = LOCATION_FILE (DECL_SOURCE_LOCATION (node->decl));\n+      if (!include_source_file_for_profile (file))\n+\tcontinue;\n+\n       push_cfun (DECL_STRUCT_FUNCTION (node->decl));\n \n       if (dump_file)\n@@ -706,6 +788,8 @@ tree_profiling (void)\n       pop_cfun ();\n     }\n \n+  release_profile_file_filtering ();\n+\n   /* Drop pure/const flags from instrumented functions.  */\n   if (profile_arc_flag || flag_test_coverage)\n     FOR_EACH_DEFINED_FUNCTION (node)"}]}