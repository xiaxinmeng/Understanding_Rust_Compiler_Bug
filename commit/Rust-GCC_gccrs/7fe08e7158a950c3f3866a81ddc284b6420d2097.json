{"sha": "7fe08e7158a950c3f3866a81ddc284b6420d2097", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZlMDhlNzE1OGE5NTBjM2YzODY2YTgxZGRjMjg0YjY0MjBkMjA5Nw==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-08T18:38:26Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-08T18:38:26Z"}, "message": "[ARM] float16x8_t intrinsics in arm_neon.h\n\t\n\t* config/arm/arm_neon.h (vgetq_lane_f16, vsetq_lane_f16, vld1q_lane_f16,\n\tvld1q_dup_f16, vreinterpretq_p8_f16, vreinterpretq_p16_f16,\n\tvreinterpretq_f16_p8, vreinterpretq_f16_p16, vreinterpretq_f16_f32,\n\tvreinterpretq_f16_p64, vreinterpretq_f16_p128, vreinterpretq_f16_s64,\n\tvreinterpretq_f16_u64, vreinterpretq_f16_s8, vreinterpretq_f16_s16,\n\tvreinterpretq_f16_s32, vreinterpretq_f16_u8, vreinterpretq_f16_u16,\n\tvreinterpretq_f16_u32, vreinterpretq_f32_f16, vreinterpretq_p64_f16,\n\tvreinterpretq_p128_f16, vreinterpretq_s64_f16, vreinterpretq_u64_f16,\n\tvreinterpretq_s8_f16, vreinterpretq_s16_f16, vreinterpretq_s32_f16,\n\tvreinterpretq_u8_f16, vreinterpretq_u16_f16, vreinterpretq_u32_f16):\n\tNew.\n\nFrom-SVN: r227538", "tree": {"sha": "e1d1327cfd6533d3090b8ca4686a317ac1632249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1d1327cfd6533d3090b8ca4686a317ac1632249"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fe08e7158a950c3f3866a81ddc284b6420d2097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe08e7158a950c3f3866a81ddc284b6420d2097", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fe08e7158a950c3f3866a81ddc284b6420d2097", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe08e7158a950c3f3866a81ddc284b6420d2097/comments", "author": null, "committer": null, "parents": [{"sha": "5e433e97a16ed5f9f33b54df4ba6a6e5a08696cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e433e97a16ed5f9f33b54df4ba6a6e5a08696cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e433e97a16ed5f9f33b54df4ba6a6e5a08696cb"}], "stats": {"total": 271, "additions": 271, "deletions": 0}, "files": [{"sha": "b80b3bb34d83654bd1f41f11530a69aa83fe354c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe08e7158a950c3f3866a81ddc284b6420d2097/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe08e7158a950c3f3866a81ddc284b6420d2097/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fe08e7158a950c3f3866a81ddc284b6420d2097", "patch": "@@ -1,3 +1,17 @@\n+2015-09-07  Alan Lawrence  <alan.lawrence.com>\n+\n+\t* config/arm/arm_neon.h (vgetq_lane_f16, vsetq_lane_f16, vld1q_lane_f16,\n+\tvld1q_dup_f16, vreinterpretq_p8_f16, vreinterpretq_p16_f16,\n+\tvreinterpretq_f16_p8, vreinterpretq_f16_p16, vreinterpretq_f16_f32,\n+\tvreinterpretq_f16_p64, vreinterpretq_f16_p128, vreinterpretq_f16_s64,\n+\tvreinterpretq_f16_u64, vreinterpretq_f16_s8, vreinterpretq_f16_s16,\n+\tvreinterpretq_f16_s32, vreinterpretq_f16_u8, vreinterpretq_f16_u16,\n+\tvreinterpretq_f16_u32, vreinterpretq_f32_f16, vreinterpretq_p64_f16,\n+\tvreinterpretq_p128_f16, vreinterpretq_s64_f16, vreinterpretq_u64_f16,\n+\tvreinterpretq_s8_f16, vreinterpretq_s16_f16, vreinterpretq_s32_f16,\n+\tvreinterpretq_u8_f16, vreinterpretq_u16_f16, vreinterpretq_u32_f16):\n+\tNew.\n+\n 2015-09-07  Alan Lawrence  <alan.lawrence.com>\n \n \t* config/arm/arm.h (VALID_NEON_QREG_MODE): Add V8HFmode."}, {"sha": "b1c9cc76a4cc3480cd23ec254390f492721c4d04", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 257, "deletions": 0, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe08e7158a950c3f3866a81ddc284b6420d2097/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe08e7158a950c3f3866a81ddc284b6420d2097/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=7fe08e7158a950c3f3866a81ddc284b6420d2097", "patch": "@@ -5288,6 +5288,17 @@ vgetq_lane_s32 (int32x4_t __a, const int __b)\n   return (int32_t)__builtin_neon_vget_lanev4si (__a, __b);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define vgetq_lane_f16(__v, __idx)\t\t\\\n+  __extension__\t\t\t\t\t\\\n+    ({\t\t\t\t\t\t\\\n+      float16x8_t __vec = (__v);\t\t\\\n+      __builtin_arm_lane_check (8, __idx);\t\\\n+      float16_t __res = __vec[__idx];\t\t\\\n+      __res;\t\t\t\t\t\\\n+    })\n+#endif\n+\n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n vgetq_lane_f32 (float32x4_t __a, const int __b)\n {\n@@ -5432,6 +5443,18 @@ vsetq_lane_s32 (int32_t __a, int32x4_t __b, const int __c)\n   return (int32x4_t)__builtin_neon_vset_lanev4si ((__builtin_neon_si) __a, __b, __c);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#define vsetq_lane_f16(__e, __v, __idx)\t\t\\\n+  __extension__\t\t\t\t\t\\\n+    ({\t\t\t\t\t\t\\\n+      float16_t __elem = (__e);\t\t\t\\\n+      float16x8_t __vec = (__v);\t\t\\\n+      __builtin_arm_lane_check (8, __idx);\t\\\n+      __vec[__idx] = __elem;\t\t\t\\\n+      __vec;\t\t\t\t\t\\\n+    })\n+#endif\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vsetq_lane_f32 (float32_t __a, float32x4_t __b, const int __c)\n {\n@@ -8923,6 +8946,14 @@ vld1q_lane_s32 (const int32_t * __a, int32x4_t __b, const int __c)\n   return (int32x4_t)__builtin_neon_vld1_lanev4si ((const __builtin_neon_si *) __a, __b, __c);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vld1q_lane_f16 (const float16_t * __a, float16x8_t __b, const int __c)\n+{\n+  return vsetq_lane_f16 (*__a, __b, __c);\n+}\n+#endif\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vld1q_lane_f32 (const float32_t * __a, float32x4_t __b, const int __c)\n {\n@@ -9080,6 +9111,15 @@ vld1q_dup_s32 (const int32_t * __a)\n   return (int32x4_t)__builtin_neon_vld1_dupv4si ((const __builtin_neon_si *) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vld1q_dup_f16 (const float16_t * __a)\n+{\n+  float16_t __f = *__a;\n+  return (float16x8_t) { __f, __f, __f, __f, __f, __f, __f, __f };\n+}\n+#endif\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vld1q_dup_f32 (const float32_t * __a)\n {\n@@ -12922,6 +12962,14 @@ vreinterpretq_p8_p16 (poly16x8_t __a)\n   return (poly8x16_t)__builtin_neon_vreinterpretv16qiv8hi ((int16x8_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n+vreinterpretq_p8_f16 (float16x8_t __a)\n+{\n+  return (poly8x16_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_p8_f32 (float32x4_t __a)\n {\n@@ -12998,6 +13046,14 @@ vreinterpretq_p16_p8 (poly8x16_t __a)\n   return (poly16x8_t)__builtin_neon_vreinterpretv8hiv16qi ((int8x16_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline poly16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_p16_f16 (float16x8_t __a)\n+{\n+  return (poly16x8_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline poly16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_p16_f32 (float32x4_t __a)\n {\n@@ -13068,6 +13124,114 @@ vreinterpretq_p16_u32 (uint32x4_t __a)\n   return (poly16x8_t)__builtin_neon_vreinterpretv8hiv4si ((int32x4_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_p8 (poly8x16_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_p16 (poly16x8_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_f32 (float32x4_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#ifdef __ARM_FEATURE_CRYPTO\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_p64 (poly64x2_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+#endif\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#ifdef __ARM_FEATURE_CRYPTO\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_p128 (poly128_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+#endif\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_s64 (int64x2_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_u64 (uint64x2_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_s8 (int8x16_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_s16 (int16x8_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_s32 (int32x4_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_u8 (uint8x16_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_u16 (uint16x8_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_u32 (uint32x4_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_f32_p8 (poly8x16_t __a)\n {\n@@ -13080,6 +13244,14 @@ vreinterpretq_f32_p16 (poly16x8_t __a)\n   return (float32x4_t)__builtin_neon_vreinterpretv4sfv8hi ((int16x8_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vreinterpretq_f32_f16 (float16x8_t __a)\n+{\n+  return (float32x4_t) __a;\n+}\n+#endif\n+\n #ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_f32_p64 (poly64x2_t __a)\n@@ -13160,6 +13332,17 @@ vreinterpretq_p64_p16 (poly16x8_t __a)\n }\n \n #endif\n+\n+#ifdef __ARM_FEATURE_CRYPTO\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n+vreinterpretq_p64_f16 (float16x8_t __a)\n+{\n+  return (poly64x2_t) __a;\n+}\n+#endif\n+#endif\n+\n #ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_p64_f32 (float32x4_t __a)\n@@ -13254,8 +13437,18 @@ vreinterpretq_p128_p16 (poly16x8_t __a)\n {\n   return (poly128_t)__builtin_neon_vreinterprettiv8hi ((int16x8_t) __a);\n }\n+#endif\n \n+#ifdef __ARM_FEATURE_CRYPTO\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n+vreinterpretq_p128_f16 (float16x8_t __a)\n+{\n+  return (poly128_t) __a;\n+}\n+#endif\n #endif\n+\n #ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n vreinterpretq_p128_f32 (float32x4_t __a)\n@@ -13348,6 +13541,14 @@ vreinterpretq_s64_p16 (poly16x8_t __a)\n   return (int64x2_t)__builtin_neon_vreinterpretv2div8hi ((int16x8_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n+vreinterpretq_s64_f16 (float16x8_t __a)\n+{\n+  return (int64x2_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_s64_f32 (float32x4_t __a)\n {\n@@ -13424,6 +13625,14 @@ vreinterpretq_u64_p16 (poly16x8_t __a)\n   return (uint64x2_t)__builtin_neon_vreinterpretv2div8hi ((int16x8_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n+vreinterpretq_u64_f16 (float16x8_t __a)\n+{\n+  return (uint64x2_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_u64_f32 (float32x4_t __a)\n {\n@@ -13500,6 +13709,14 @@ vreinterpretq_s8_p16 (poly16x8_t __a)\n   return (int8x16_t)__builtin_neon_vreinterpretv16qiv8hi ((int16x8_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n+vreinterpretq_s8_f16 (float16x8_t __a)\n+{\n+  return (int8x16_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_s8_f32 (float32x4_t __a)\n {\n@@ -13576,6 +13793,14 @@ vreinterpretq_s16_p16 (poly16x8_t __a)\n   return (int16x8_t)__builtin_neon_vreinterpretv8hiv8hi ((int16x8_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_s16_f16 (float16x8_t __a)\n+{\n+  return (int16x8_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_s16_f32 (float32x4_t __a)\n {\n@@ -13652,6 +13877,14 @@ vreinterpretq_s32_p16 (poly16x8_t __a)\n   return (int32x4_t)__builtin_neon_vreinterpretv4siv8hi ((int16x8_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n+vreinterpretq_s32_f16 (float16x8_t __a)\n+{\n+  return (int32x4_t)__builtin_neon_vreinterpretv4siv8hi ((int16x8_t) __a);\n+}\n+#endif\n+\n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_s32_f32 (float32x4_t __a)\n {\n@@ -13728,6 +13961,14 @@ vreinterpretq_u8_p16 (poly16x8_t __a)\n   return (uint8x16_t)__builtin_neon_vreinterpretv16qiv8hi ((int16x8_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n+vreinterpretq_u8_f16 (float16x8_t __a)\n+{\n+  return (uint8x16_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_u8_f32 (float32x4_t __a)\n {\n@@ -13804,6 +14045,14 @@ vreinterpretq_u16_p16 (poly16x8_t __a)\n   return (uint16x8_t)__builtin_neon_vreinterpretv8hiv8hi ((int16x8_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_u16_f16 (float16x8_t __a)\n+{\n+  return (uint16x8_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_u16_f32 (float32x4_t __a)\n {\n@@ -13880,6 +14129,14 @@ vreinterpretq_u32_p16 (poly16x8_t __a)\n   return (uint32x4_t)__builtin_neon_vreinterpretv4siv8hi ((int16x8_t) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n+vreinterpretq_u32_f16 (float16x8_t __a)\n+{\n+  return (uint32x4_t) __a;\n+}\n+#endif\n+\n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_u32_f32 (float32x4_t __a)\n {"}]}