{"sha": "e584c6f8a7805b1ddc9fe97065cd8f1bac734fc2", "node_id": "C_kwDOANBUbNoAKGU1ODRjNmY4YTc4MDViMWRkYzlmZTk3MDY1Y2Q4ZjFiYWM3MzRmYzI", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-16T17:46:08Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-17T16:16:20Z"}, "message": "Generic segments must be appended to the prefix and not override", "tree": {"sha": "9955b75660c3deb97fe1e9e4e25fd2ded1dc98c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9955b75660c3deb97fe1e9e4e25fd2ded1dc98c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e584c6f8a7805b1ddc9fe97065cd8f1bac734fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e584c6f8a7805b1ddc9fe97065cd8f1bac734fc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e584c6f8a7805b1ddc9fe97065cd8f1bac734fc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e584c6f8a7805b1ddc9fe97065cd8f1bac734fc2/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2547e60d2fca2a323a1b16e04c595aeeec598bc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2547e60d2fca2a323a1b16e04c595aeeec598bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2547e60d2fca2a323a1b16e04c595aeeec598bc1"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "9a0d349a2fd553b6622b94074d2b0c917642ca41", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e584c6f8a7805b1ddc9fe97065cd8f1bac734fc2/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e584c6f8a7805b1ddc9fe97065cd8f1bac734fc2/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=e584c6f8a7805b1ddc9fe97065cd8f1bac734fc2", "patch": "@@ -439,8 +439,10 @@ ResolveTypeToCanonicalPath::visit (AST::TypePathSegmentGeneric &seg)\n \n   if (!seg.has_generic_args ())\n     {\n-      result = CanonicalPath::new_seg (seg.get_node_id (),\n-\t\t\t\t       seg.get_ident_segment ().as_string ());\n+      auto ident_segment\n+\t= CanonicalPath::new_seg (seg.get_node_id (),\n+\t\t\t\t  seg.get_ident_segment ().as_string ());\n+      result = result.append (ident_segment);\n       return;\n     }\n \n@@ -454,14 +456,18 @@ ResolveTypeToCanonicalPath::visit (AST::TypePathSegmentGeneric &seg)\n     {\n       std::string generics\n \t= canonicalize_generic_args (seg.get_generic_args ());\n-      result = CanonicalPath::new_seg (seg.get_node_id (),\n-\t\t\t\t       seg.get_ident_segment ().as_string ()\n-\t\t\t\t\t + \"::\" + generics);\n+      auto generic_segment\n+\t= CanonicalPath::new_seg (seg.get_node_id (),\n+\t\t\t\t  seg.get_ident_segment ().as_string ()\n+\t\t\t\t    + \"::\" + generics);\n+      result = result.append (generic_segment);\n       return;\n     }\n \n-  result = CanonicalPath::new_seg (seg.get_node_id (),\n-\t\t\t\t   seg.get_ident_segment ().as_string ());\n+  auto ident_segment\n+    = CanonicalPath::new_seg (seg.get_node_id (),\n+\t\t\t      seg.get_ident_segment ().as_string ());\n+  result = result.append (ident_segment);\n }\n \n void"}]}