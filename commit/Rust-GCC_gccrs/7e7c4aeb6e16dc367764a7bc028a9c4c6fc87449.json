{"sha": "7e7c4aeb6e16dc367764a7bc028a9c4c6fc87449", "node_id": "C_kwDOANBUbNoAKDdlN2M0YWViNmUxNmRjMzY3NzY0YTdiYzAyOGE5YzRjNmZjODc0NDk", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-07-15T15:55:19Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-22T15:01:44Z"}, "message": "[Ada] Remove System.Img_Enum_New unit\n\ngcc/ada/\n\n\t* libgnat/s-imenne.ads, libgnat/s-imenne.adb: Delete.\n\t* gcc-interface/Make-lang.in (GNAT_ADA_OBJS): Remove s-imenne.o.\n\t(GNATBIND_OBJS): Likewise.", "tree": {"sha": "36131cde623e02f5ae1041967cb8cb529a953d56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36131cde623e02f5ae1041967cb8cb529a953d56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e7c4aeb6e16dc367764a7bc028a9c4c6fc87449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7c4aeb6e16dc367764a7bc028a9c4c6fc87449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e7c4aeb6e16dc367764a7bc028a9c4c6fc87449", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7c4aeb6e16dc367764a7bc028a9c4c6fc87449/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81a0f4a391dd3cef102feda6c509db349b4545bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a0f4a391dd3cef102feda6c509db349b4545bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a0f4a391dd3cef102feda6c509db349b4545bd"}], "stats": {"total": 257, "additions": 0, "deletions": 257}, "files": [{"sha": "61a627ff66e5bc9587698bd802629e873215326d", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7c4aeb6e16dc367764a7bc028a9c4c6fc87449/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7c4aeb6e16dc367764a7bc028a9c4c6fc87449/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=7e7c4aeb6e16dc367764a7bc028a9c4c6fc87449", "patch": "@@ -517,7 +517,6 @@ GNAT_ADA_OBJS+= \\\n  ada/libgnat/s-excmac.o\t\\\n  ada/libgnat/s-exctab.o\t\\\n  ada/libgnat/s-htable.o\t\\\n- ada/libgnat/s-imenne.o\t\\\n  ada/libgnat/s-imgint.o\t\\\n  ada/libgnat/s-mastop.o\t\\\n  ada/libgnat/s-memory.o\t\\\n@@ -684,7 +683,6 @@ GNATBIND_OBJS +=  \\\n  ada/libgnat/s-excmac.o   \\\n  ada/libgnat/s-exctab.o   \\\n  ada/libgnat/s-htable.o   \\\n- ada/libgnat/s-imenne.o   \\\n  ada/libgnat/s-imgint.o   \\\n  ada/libgnat/s-mastop.o   \\\n  ada/libgnat/s-memory.o   \\"}, {"sha": "4ca7a12ae7912d666094c2bfa7e158dec7f8bb0b", "filename": "gcc/ada/libgnat/s-imenne.adb", "status": "removed", "additions": 0, "deletions": 170, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a0f4a391dd3cef102feda6c509db349b4545bd/gcc%2Fada%2Flibgnat%2Fs-imenne.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a0f4a391dd3cef102feda6c509db349b4545bd/gcc%2Fada%2Flibgnat%2Fs-imenne.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-imenne.adb?ref=81a0f4a391dd3cef102feda6c509db349b4545bd", "patch": "@@ -1,170 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                  S Y S T E M . I M G _ E N U M _ N E W                   --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 2000-2021, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-pragma Compiler_Unit_Warning;\n-\n-with Ada.Unchecked_Conversion;\n-\n-package body System.Img_Enum_New is\n-\n-   -------------------------\n-   -- Image_Enumeration_8 --\n-   -------------------------\n-\n-   procedure Image_Enumeration_8\n-     (Pos     : Natural;\n-      S       : in out String;\n-      P       : out Natural;\n-      Names   : String;\n-      Indexes : System.Address)\n-   is\n-      pragma Assert (S'First = 1);\n-\n-      type Natural_8 is range 0 .. 2 ** 7 - 1;\n-      subtype Names_Index is\n-        Natural_8 range Natural_8 (Names'First)\n-                          .. Natural_8 (Names'Last) + 1;\n-      subtype Index is Natural range Natural'First .. Names'Length;\n-      type Index_Table is array (Index) of Names_Index;\n-      type Index_Table_Ptr is access Index_Table;\n-\n-      function To_Index_Table_Ptr is\n-        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n-\n-      IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n-\n-      pragma Assert (Pos in IndexesT'Range);\n-      pragma Assert (Pos + 1 in IndexesT'Range);\n-\n-      Start : constant Natural := Natural (IndexesT (Pos));\n-      Next  : constant Natural := Natural (IndexesT (Pos + 1));\n-\n-      pragma Assert (Next - 1 >= Start);\n-      pragma Assert (Start >= Names'First);\n-      pragma Assert (Next - 1 <= Names'Last);\n-\n-      pragma Assert (Next - Start <= S'Last);\n-      --  The caller should guarantee that S is large enough to contain the\n-      --  enumeration image.\n-   begin\n-      S (1 .. Next - Start) := Names (Start .. Next - 1);\n-      P := Next - Start;\n-   end Image_Enumeration_8;\n-\n-   --------------------------\n-   -- Image_Enumeration_16 --\n-   --------------------------\n-\n-   procedure Image_Enumeration_16\n-     (Pos     : Natural;\n-      S       : in out String;\n-      P       : out Natural;\n-      Names   : String;\n-      Indexes : System.Address)\n-   is\n-      pragma Assert (S'First = 1);\n-\n-      type Natural_16 is range 0 .. 2 ** 15 - 1;\n-      subtype Names_Index is\n-        Natural_16 range Natural_16 (Names'First)\n-                           .. Natural_16 (Names'Last) + 1;\n-      subtype Index is Natural range Natural'First .. Names'Length;\n-      type Index_Table is array (Index) of Names_Index;\n-      type Index_Table_Ptr is access Index_Table;\n-\n-      function To_Index_Table_Ptr is\n-        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n-\n-      IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n-\n-      pragma Assert (Pos in IndexesT'Range);\n-      pragma Assert (Pos + 1 in IndexesT'Range);\n-\n-      Start : constant Natural := Natural (IndexesT (Pos));\n-      Next  : constant Natural := Natural (IndexesT (Pos + 1));\n-\n-      pragma Assert (Next - 1 >= Start);\n-      pragma Assert (Start >= Names'First);\n-      pragma Assert (Next - 1 <= Names'Last);\n-\n-      pragma Assert (Next - Start <= S'Last);\n-      --  The caller should guarantee that S is large enough to contain the\n-      --  enumeration image.\n-   begin\n-      S (1 .. Next - Start) := Names (Start .. Next - 1);\n-      P := Next - Start;\n-   end Image_Enumeration_16;\n-\n-   --------------------------\n-   -- Image_Enumeration_32 --\n-   --------------------------\n-\n-   procedure Image_Enumeration_32\n-     (Pos     : Natural;\n-      S       : in out String;\n-      P       : out Natural;\n-      Names   : String;\n-      Indexes : System.Address)\n-   is\n-      pragma Assert (S'First = 1);\n-\n-      type Natural_32 is range 0 .. 2 ** 31 - 1;\n-      subtype Names_Index is\n-        Natural_32 range Natural_32 (Names'First)\n-                           .. Natural_32 (Names'Last) + 1;\n-      subtype Index is Natural range Natural'First .. Names'Length;\n-      type Index_Table is array (Index) of Names_Index;\n-      type Index_Table_Ptr is access Index_Table;\n-\n-      function To_Index_Table_Ptr is\n-        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n-\n-      IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n-\n-      pragma Assert (Pos in IndexesT'Range);\n-      pragma Assert (Pos + 1 in IndexesT'Range);\n-\n-      Start : constant Natural := Natural (IndexesT (Pos));\n-      Next  : constant Natural := Natural (IndexesT (Pos + 1));\n-\n-      pragma Assert (Next - 1 >= Start);\n-      pragma Assert (Start >= Names'First);\n-      pragma Assert (Next - 1 <= Names'Last);\n-\n-      pragma Assert (Next - Start <= S'Last);\n-      --  The caller should guarantee that S is large enough to contain the\n-      --  enumeration image.\n-   begin\n-      S (1 .. Next - Start) := Names (Start .. Next - 1);\n-      P := Next - Start;\n-   end Image_Enumeration_32;\n-\n-end System.Img_Enum_New;"}, {"sha": "eba31c2b09d5d770abd6f5939dc7696ca6bed356", "filename": "gcc/ada/libgnat/s-imenne.ads", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a0f4a391dd3cef102feda6c509db349b4545bd/gcc%2Fada%2Flibgnat%2Fs-imenne.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a0f4a391dd3cef102feda6c509db349b4545bd/gcc%2Fada%2Flibgnat%2Fs-imenne.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-imenne.ads?ref=81a0f4a391dd3cef102feda6c509db349b4545bd", "patch": "@@ -1,85 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                  S Y S T E M . I M G _ E N U M _ N E W                   --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 2000-2021, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  Enumeration_Type'Image for all enumeration types except those in package\n---  Standard (where we have no opportunity to build image tables), and in\n---  package System (where it is too early to start building image tables).\n---  Special routines exist for the enumeration types in these packages.\n-\n---  Note: this is an obsolete package replaced by instantiations of the generic\n---  package System.Image_N. The reason we maintain this package is that when\n---  bootstrapping with an old compiler, the old compiler will search for this\n---  unit, expecting to find these functions. The new compiler will search for\n---  procedures in the instances of System.Image_N instead.\n-\n-pragma Compiler_Unit_Warning;\n-\n-package System.Img_Enum_New is\n-   pragma Pure;\n-\n-   procedure Image_Enumeration_8\n-     (Pos     : Natural;\n-      S       : in out String;\n-      P       : out Natural;\n-      Names   : String;\n-      Indexes : System.Address);\n-   --  Used to compute Enum'Image (Str) where Enum is some enumeration type\n-   --  other than those defined in package Standard. Names is a string with\n-   --  a lower bound of 1 containing the characters of all the enumeration\n-   --  literals concatenated together in sequence. Indexes is the address of\n-   --  an array of type array (0 .. N) of Natural_8, where N is the number of\n-   --  enumeration literals in the type. The Indexes values are the starting\n-   --  subscript of each enumeration literal, indexed by Pos values, with an\n-   --  extra entry at the end containing Names'Length + 1. The reason that\n-   --  Indexes is passed by address is that the actual type is created on the\n-   --  fly by the expander. The desired 'Image value is stored in S (1 .. P)\n-   --  and P is set on return. The caller guarantees that S is long enough to\n-   --  hold the result and that the lower bound is 1.\n-\n-   procedure Image_Enumeration_16\n-     (Pos     : Natural;\n-      S       : in out String;\n-      P       : out Natural;\n-      Names   : String;\n-      Indexes : System.Address);\n-   --  Identical to Set_Image_Enumeration_8 except that it handles types using\n-   --  array (0 .. Num) of Natural_16 for the Indexes table.\n-\n-   procedure Image_Enumeration_32\n-     (Pos     : Natural;\n-      S       : in out String;\n-      P       : out Natural;\n-      Names   : String;\n-      Indexes : System.Address);\n-   --  Identical to Set_Image_Enumeration_8 except that it handles types using\n-   --  array (0 .. Num) of Natural_32 for the Indexes table.\n-\n-end System.Img_Enum_New;"}]}