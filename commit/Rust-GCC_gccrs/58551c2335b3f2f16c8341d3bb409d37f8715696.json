{"sha": "58551c2335b3f2f16c8341d3bb409d37f8715696", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg1NTFjMjMzNWIzZjJmMTZjODM0MWQzYmI0MDlkMzdmODcxNTY5Ng==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-08-06T20:35:46Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-08-06T20:35:46Z"}, "message": "cppinit.c (struct lang_flags): Rename trigraphs std.\n\n\t* cppinit.c (struct lang_flags): Rename trigraphs std.\n\t(set_lang): Update.\n\t* cpplib.h (struct cpp_options): New member std.\n\t* cppmacro.c (_cpp_builtin_macro_text): Use std.\n\t(collect_args): Flag whether to swallow a possible future\n\tcomma pasted with varargs.\n\t(replace_args): Use this flag.\n\t* doc/cpp.texi: Update varargs extension documentation.\ntestsuite:\n\t* gcc.dg/cpp/vararg3.c, gcc.dg/cpp/vararg4.c: New tests.\n\nFrom-SVN: r56077", "tree": {"sha": "6bf828a9fcc79198ebca01c572aeea673134e23a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bf828a9fcc79198ebca01c572aeea673134e23a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58551c2335b3f2f16c8341d3bb409d37f8715696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58551c2335b3f2f16c8341d3bb409d37f8715696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58551c2335b3f2f16c8341d3bb409d37f8715696", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58551c2335b3f2f16c8341d3bb409d37f8715696/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "daeabcd06bc02b7b91f041c14f932d80b82f45f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daeabcd06bc02b7b91f041c14f932d80b82f45f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daeabcd06bc02b7b91f041c14f932d80b82f45f5"}], "stats": {"total": 93, "additions": 81, "deletions": 12}, "files": [{"sha": "e0356589b87f939464529ec28edd0e182a534114", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58551c2335b3f2f16c8341d3bb409d37f8715696/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58551c2335b3f2f16c8341d3bb409d37f8715696/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58551c2335b3f2f16c8341d3bb409d37f8715696", "patch": "@@ -1,3 +1,14 @@\n+2002-08-06  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cppinit.c (struct lang_flags): Rename trigraphs std.\n+\t(set_lang): Update.\n+\t* cpplib.h (struct cpp_options): New member std.\n+\t* cppmacro.c (_cpp_builtin_macro_text): Use std.\n+\t(collect_args): Flag whether to swallow a possible future\n+\tcomma pasted with varargs.\n+\t(replace_args): Use this flag.\n+\t* doc/cpp.texi: Update varargs extension documentation.\n+\n 2002-08-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/mmintrin.h (__m64): Make the type 64-bit aligned."}, {"sha": "a7ffeb03d9ab8442826897cadf7e9b17aec34c7b", "filename": "gcc/cppinit.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58551c2335b3f2f16c8341d3bb409d37f8715696/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58551c2335b3f2f16c8341d3bb409d37f8715696/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=58551c2335b3f2f16c8341d3bb409d37f8715696", "patch": "@@ -384,15 +384,15 @@ struct lang_flags\n   char c99;\n   char cplusplus;\n   char extended_numbers;\n-  char trigraphs;\n+  char std;\n   char dollars_in_ident;\n   char cplusplus_comments;\n   char digraphs;\n };\n \n /* ??? Enable $ in identifiers in assembly? */\n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum trig dollar c++comm digr  */\n+{ /*              c99 c++ xnum std dollar c++comm digr  */\n   /* GNUC89 */  { 0,  0,  1,   0,   1,     1,      1     },\n   /* GNUC99 */  { 1,  0,  1,   0,   1,     1,      1     },\n   /* STDC89 */  { 0,  0,  0,   1,   0,     0,      0     },\n@@ -416,7 +416,8 @@ set_lang (pfile, lang)\n   CPP_OPTION (pfile, c99)\t\t = l->c99;\n   CPP_OPTION (pfile, cplusplus)\t\t = l->cplusplus;\n   CPP_OPTION (pfile, extended_numbers)\t = l->extended_numbers;\n-  CPP_OPTION (pfile, trigraphs)\t\t = l->trigraphs;\n+  CPP_OPTION (pfile, std)\t\t = l->std;\n+  CPP_OPTION (pfile, trigraphs)\t\t = l->std;\n   CPP_OPTION (pfile, dollars_in_ident)\t = l->dollars_in_ident;\n   CPP_OPTION (pfile, cplusplus_comments) = l->cplusplus_comments;\n   CPP_OPTION (pfile, digraphs)\t\t = l->digraphs;"}, {"sha": "7282df7f07d639460c2be5c0410f362c096f4a74", "filename": "gcc/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58551c2335b3f2f16c8341d3bb409d37f8715696/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58551c2335b3f2f16c8341d3bb409d37f8715696/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=58551c2335b3f2f16c8341d3bb409d37f8715696", "patch": "@@ -367,6 +367,9 @@ struct cpp_options\n   /* Nonzero for the 1999 C Standard, including corrigenda and amendments.  */\n   unsigned char c99;\n \n+  /* Nonzero if we are conforming to a specific C or C++ standard.  */\n+  unsigned char std;\n+\n   /* Nonzero means give all the error messages the ANSI standard requires.  */\n   unsigned char pedantic;\n "}, {"sha": "76030903089766f2714c948872798170070db989", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58551c2335b3f2f16c8341d3bb409d37f8715696/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58551c2335b3f2f16c8341d3bb409d37f8715696/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=58551c2335b3f2f16c8341d3bb409d37f8715696", "patch": "@@ -191,8 +191,7 @@ _cpp_builtin_macro_text (pfile, node)\n \tenum c_lang lang = CPP_OPTION (pfile, lang);\n \tif (CPP_IN_SYSTEM_HEADER (pfile)\n \t    && CPP_OPTION (pfile, stdc_0_in_system_headers)\n-\t    && !(lang == CLK_STDC89 || lang == CLK_STDC94\n-\t\t || lang == CLK_STDC99))  /* || lang == CLK_CXX98 ? */\n+\t    && !CPP_OPTION (pfile,std))\n \t  number = 0;\n \telse\n \t  number = 1;\n@@ -672,7 +671,20 @@ collect_args (pfile, node)\n       if (argc == 1 && macro->paramc == 0 && args[0].count == 0)\n \targc = 0;\n       if (_cpp_arguments_ok (pfile, macro, node, argc))\n-\treturn base_buff;\n+\t{\n+\t  /* GCC has special semantics for , ## b where b is a varargs\n+\t     parameter: we remove the comma if b was omitted entirely.\n+\t     If b was merely an empty argument, the comma is retained.\n+\t     If the macro takes just one (varargs) parameter, then we\n+\t     retain the comma only if we are standards conforming.\n+\n+\t     If FIRST is NULL replace_args () swallows the comma.  */\n+\t  if (macro->variadic && (argc < macro->paramc\n+\t\t\t\t  || (argc == 1 && args[0].count == 0\n+\t\t\t\t      && !CPP_OPTION (pfile, std))))\n+\t    args[macro->paramc - 1].first = NULL;\n+\t  return base_buff;\n+\t}\n     }\n \n   /* An error occurred.  */\n@@ -861,15 +873,13 @@ replace_args (pfile, node, macro, args)\n \t  count = arg->count, from = arg->first;\n \t  if (dest != first)\n \t    {\n-\t      /* GCC has special semantics for , ## b where b is a\n-\t\t varargs parameter: the comma disappears if b was\n-\t\t given no actual arguments (not merely if b is an\n-\t\t empty argument); otherwise the paste flag is removed.  */\n \t      if (dest[-1]->type == CPP_COMMA\n \t\t  && macro->variadic\n \t\t  && src->val.arg_no == macro->paramc)\n \t\t{\n-\t\t  if (count == 0)\n+\t\t  /* Swallow a pasted comma if from == NULL, otherwise\n+\t\t     drop the paste flag.  */\n+\t\t  if (from == NULL)\n \t\t    dest--;\n \t\t  else\n \t\t    paste_flag = dest - 1;"}, {"sha": "e8107f2acc48ba4ee673de8e8693191c61ec1aa4", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58551c2335b3f2f16c8341d3bb409d37f8715696/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58551c2335b3f2f16c8341d3bb409d37f8715696/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=58551c2335b3f2f16c8341d3bb409d37f8715696", "patch": "@@ -1620,7 +1620,7 @@ The @code{eprintf} macro above could be written\n @end example\n \n @noindent\n-using this extension.  You cannot use @code{__VA_ARGS__} and this\n+using this extension.  You cannot use @code{@w{__VA_ARGS__}} and this\n extension in the same macro.\n \n You can have named arguments as well as variable arguments in a variadic\n@@ -1670,6 +1670,15 @@ eprintf (\"success!\\n\")\n      @expansion{} fprintf(stderr, \"success!\\n\");\n @end example\n \n+@noindent\n+The above explanation is ambiguous about the case where the only macro\n+parameter is a variable arguments parameter, as it is meaningless to\n+try to distinguish whether no argument at all is an empty argument or\n+a missing argument.  In this case the C99 standard is clear that the\n+comma must remain, however the existing GCC extension used to swallow\n+the comma.  So CPP retains the comma when conforming to a specific C\n+standard, and drops it otherwise.\n+\n C99 mandates that the only place the identifier @code{@w{__VA_ARGS__}}\n can appear is in the replacement list of a variadic macro.  It may not\n be used as a macro name, macro argument name, or within a different type"}, {"sha": "55fd9a1aeb26a0ab819befa1974f927a0ba874de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58551c2335b3f2f16c8341d3bb409d37f8715696/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58551c2335b3f2f16c8341d3bb409d37f8715696/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58551c2335b3f2f16c8341d3bb409d37f8715696", "patch": "@@ -1,3 +1,7 @@\n+2002-08-06  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* gcc.dg/cpp/vararg3.c, gcc.dg/cpp/vararg4.c: New tests.\n+\n 2002-08-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/abi/bitfield3.C: New test."}, {"sha": "b17afd89ea7a6175e8d83ca083dc5c1981c48752", "filename": "gcc/testsuite/gcc.dg/cpp/vararg3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58551c2335b3f2f16c8341d3bb409d37f8715696/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fvararg3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58551c2335b3f2f16c8341d3bb409d37f8715696/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fvararg3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fvararg3.c?ref=58551c2335b3f2f16c8341d3bb409d37f8715696", "patch": "@@ -0,0 +1,17 @@\n+/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c99\" } */\n+\n+/* Source: Neil Booth, 6 Aug 2002.\n+\n+   Tests that we DTRT with varargs commas for a single-parameter macro\n+   when in standards-conforming mode.  */\n+\n+#define f(...) , ## __VA_ARGS__\n+\n+/* The comma from f's expansion should be retained (standards\n+   conforming mode only).  Tests that it isn't in non-standards mode\n+   include macro8.c and vararg1.c.  */\n+#if 2 f() 3\t\t  /* { dg-bogus \"missing binary operator\" } */\n+#endif"}, {"sha": "460cebf28331b010c6a327857f5bd9c528f3543c", "filename": "gcc/testsuite/gcc.dg/cpp/vararg4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58551c2335b3f2f16c8341d3bb409d37f8715696/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fvararg4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58551c2335b3f2f16c8341d3bb409d37f8715696/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fvararg4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fvararg4.c?ref=58551c2335b3f2f16c8341d3bb409d37f8715696", "patch": "@@ -0,0 +1,14 @@\n+/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options -std=gnu99 } */\n+\n+/* Source: Neil Booth, 6 Aug 2002.\n+\n+   Tests that we DTRT with varargs commas.  */\n+\n+#define g(a, ...) a , ## __VA_ARGS__\n+\n+/* The comma from g's expansion should be retained.  */\n+#if g (2, ) 3\t\t  /* { dg-bogus \"missing binary operator\" } */\n+#endif"}]}