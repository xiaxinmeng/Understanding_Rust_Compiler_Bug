{"sha": "1b54a7226368bf86361e5c9d8ae523193037a0ac", "node_id": "C_kwDOANBUbNoAKDFiNTRhNzIyNjM2OGJmODYzNjFlNWM5ZDhhZTUyMzE5MzAzN2EwYWM", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-10-02T12:40:09Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-10-03T19:46:03Z"}, "message": "coroutines: Ensure co_await_exprs have TREE_SIDE_EFFECTS set [PR 101133].\n\nAlthough it is not immediately evident from the symptoms, the PR is\ncaused by a variable having a DECL_INITIAL() containing a co_await.\nThis is not correct, since such expressions have side-effects.\n\nWe were marking the overall co_await expression correctly, but if a\nconsumer of that expression stripped out the underlying co_await_expr\nthen the latter would not be properly marked.\n\nFixed by marking both the underlying and any containing await expr\nwith TREE_SIDE_EFFECTS.  Also mark type-dependent co_await expressions.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\n\tPR c++/101133\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (build_co_await): Mark co_await_expr trees\n\twith TREE_SIDE_EFFECTS, also mark any containing expression.\n\t(finish_co_await_expr): Mark type-dependent co_await_expr\n\ttrees with TREE_SIDE_EFFECTS.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/coroutines/pr101133.C: New test.", "tree": {"sha": "804878fd3d978136f250c3b55a4fbc62d30345f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/804878fd3d978136f250c3b55a4fbc62d30345f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b54a7226368bf86361e5c9d8ae523193037a0ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b54a7226368bf86361e5c9d8ae523193037a0ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b54a7226368bf86361e5c9d8ae523193037a0ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b54a7226368bf86361e5c9d8ae523193037a0ac/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ee1ab15c237ffb50be1a5ce9c5e542b16df4d12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee1ab15c237ffb50be1a5ce9c5e542b16df4d12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ee1ab15c237ffb50be1a5ce9c5e542b16df4d12"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "bff5b6343e548405bcf81a3449ca18be9358960b", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b54a7226368bf86361e5c9d8ae523193037a0ac/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b54a7226368bf86361e5c9d8ae523193037a0ac/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=1b54a7226368bf86361e5c9d8ae523193037a0ac", "patch": "@@ -1117,13 +1117,15 @@ build_co_await (location_t loc, tree a, suspend_point_kind suspend_kind)\n \t\t\t\ta, e_proxy, o, awaiter_calls,\n \t\t\t\tbuild_int_cst (integer_type_node,\n \t\t\t\t\t       (int) suspend_kind));\n+  TREE_SIDE_EFFECTS (await_expr) = true;\n   if (te)\n     {\n       TREE_OPERAND (te, 1) = await_expr;\n+      TREE_SIDE_EFFECTS (te) = true;\n       await_expr = te;\n     }\n-  tree t = convert_from_reference (await_expr);\n-  return t;\n+  SET_EXPR_LOCATION (await_expr, loc);\n+  return convert_from_reference (await_expr);\n }\n \n tree\n@@ -1149,8 +1151,13 @@ finish_co_await_expr (location_t kw, tree expr)\n      co_await with the expression unchanged.  */\n   tree functype = TREE_TYPE (current_function_decl);\n   if (dependent_type_p (functype) || type_dependent_expression_p (expr))\n-    return build5_loc (kw, CO_AWAIT_EXPR, unknown_type_node, expr,\n-\t\t       NULL_TREE, NULL_TREE, NULL_TREE, integer_zero_node);\n+    {\n+      tree aw_expr = build5_loc (kw, CO_AWAIT_EXPR, unknown_type_node, expr,\n+\t\t\t\t NULL_TREE, NULL_TREE, NULL_TREE,\n+\t\t\t\t integer_zero_node);\n+      TREE_SIDE_EFFECTS (aw_expr) = true;\n+      return aw_expr;\n+    }\n \n   /* We must be able to look up the \"await_transform\" method in the scope of\n      the promise type, and obtain its return type.  */\n@@ -1187,14 +1194,7 @@ finish_co_await_expr (location_t kw, tree expr)\n     }\n \n   /* Now we want to build co_await a.  */\n-  tree op = build_co_await (kw, a, CO_AWAIT_SUSPEND_POINT);\n-  if (op != error_mark_node)\n-    {\n-      TREE_SIDE_EFFECTS (op) = 1;\n-      SET_EXPR_LOCATION (op, kw);\n-    }\n-\n-  return op;\n+  return build_co_await (kw, a, CO_AWAIT_SUSPEND_POINT);\n }\n \n /* Take the EXPR given and attempt to build:"}, {"sha": "6c6bc163251c47fbcac27ccf1dfe589ce5733b95", "filename": "gcc/testsuite/g++.dg/coroutines/pr101133.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b54a7226368bf86361e5c9d8ae523193037a0ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr101133.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b54a7226368bf86361e5c9d8ae523193037a0ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr101133.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr101133.C?ref=1b54a7226368bf86361e5c9d8ae523193037a0ac", "patch": "@@ -0,0 +1,31 @@\n+#include <coroutine>\n+#include <string>\n+\n+template<typename T>\n+struct Awaiter\n+{\n+    bool await_ready()                          const { return false; }    \n+    void await_suspend(std::coroutine_handle<>) const {}    \n+    T    await_resume()                         const { return T{}; }\n+};\n+\n+struct ReturnObject\n+{\n+    struct promise_type\n+    {\n+        ReturnObject       get_return_object()        { return {}; }\n+        std::suspend_never initial_suspend() noexcept { return {}; }\n+        std::suspend_never final_suspend()   noexcept { return {}; }\n+        void               return_void()              {}\n+        void               unhandled_exception()      {}\n+    };\n+};\n+\n+ReturnObject f()\n+{\n+    auto a1 = Awaiter<int>{};\n+    auto a2 = Awaiter<std::string>{};\n+\n+    [[maybe_unused]] auto v1 = co_await a1; // ok\n+    [[maybe_unused]] std::string v2 = co_await a2; // error\n+}"}]}