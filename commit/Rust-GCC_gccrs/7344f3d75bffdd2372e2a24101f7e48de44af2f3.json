{"sha": "7344f3d75bffdd2372e2a24101f7e48de44af2f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM0NGYzZDc1YmZmZGQyMzcyZTJhMjQxMDFmN2U0OGRlNDRhZjJmMw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2003-04-15T16:24:18Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2003-04-15T16:24:18Z"}, "message": "unwind.inc (_Unwind_Backtrace): New function.\n\n\t* unwind.inc (_Unwind_Backtrace): New function.\n\t* unwind.h (_Unwind_Backtrace): Declare it.\n\t* libgcc-std.ver (_Unwind_Backtrace): Export it.\n\nFrom-SVN: r65641", "tree": {"sha": "90eeed59b90dd08a506965db65e9397ff6d450d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90eeed59b90dd08a506965db65e9397ff6d450d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7344f3d75bffdd2372e2a24101f7e48de44af2f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7344f3d75bffdd2372e2a24101f7e48de44af2f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7344f3d75bffdd2372e2a24101f7e48de44af2f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7344f3d75bffdd2372e2a24101f7e48de44af2f3/comments", "author": null, "committer": null, "parents": [{"sha": "9547e8fd98c50f8e01cb5d92109a5c7ed6b862dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9547e8fd98c50f8e01cb5d92109a5c7ed6b862dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9547e8fd98c50f8e01cb5d92109a5c7ed6b862dd"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "44572507ddf6a9ee416de66afb56ce5935914ef5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7344f3d75bffdd2372e2a24101f7e48de44af2f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7344f3d75bffdd2372e2a24101f7e48de44af2f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7344f3d75bffdd2372e2a24101f7e48de44af2f3", "patch": "@@ -1,3 +1,9 @@\n+2003-04-15  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* unwind.inc (_Unwind_Backtrace): New function.\n+\t* unwind.h (_Unwind_Backtrace): Declare it.\n+\t* libgcc-std.ver (_Unwind_Backtrace): Export it.\n+\n 2003-04-14  Jason Merrill  <jason@redhat.com>\n \n \tPR middle-end/10336, c++/10401"}, {"sha": "c8a1a8b83c9a843f3d9fd90f66fd80fd1ff9c207", "filename": "gcc/libgcc-std.ver", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7344f3d75bffdd2372e2a24101f7e48de44af2f3/gcc%2Flibgcc-std.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7344f3d75bffdd2372e2a24101f7e48de44af2f3/gcc%2Flibgcc-std.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc-std.ver?ref=7344f3d75bffdd2372e2a24101f7e48de44af2f3", "patch": "@@ -180,6 +180,7 @@ GCC_3.0 {\n GCC_3.3 {\n   _Unwind_FindEnclosingFunction\n   _Unwind_GetCFA\n+  _Unwind_Backtrace\n }\n \n %inherit GCC_3.4 GCC_3.3"}, {"sha": "8f7a499330e92c86f483675821dfb7d43512c760", "filename": "gcc/unwind.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7344f3d75bffdd2372e2a24101f7e48de44af2f3/gcc%2Funwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7344f3d75bffdd2372e2a24101f7e48de44af2f3/gcc%2Funwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind.h?ref=7344f3d75bffdd2372e2a24101f7e48de44af2f3", "patch": "@@ -127,6 +127,14 @@ extern void _Unwind_DeleteException (struct _Unwind_Exception *);\n    e.g. executing cleanup code, and not to implement rethrowing.  */\n extern void _Unwind_Resume (struct _Unwind_Exception *);\n \n+/* @@@ Use unwind data to perform a stack backtrace.  The trace callback\n+   is called for every stack frame in the call chain, but no cleanup\n+   actions are performed.  */\n+typedef _Unwind_Reason_Code (*_Unwind_Trace_Fn)\n+     (struct _Unwind_Context *, void *);\n+\n+extern _Unwind_Reason_Code _Unwind_Backtrace (_Unwind_Trace_Fn, void *);\n+\n /* These functions are used for communicating information about the unwind\n    context (i.e. the unwind descriptors and the user register state) between\n    the unwind library and the personality routine and landing pad.  Only"}, {"sha": "225b046d37f825173dce392ad94e6353eddea90b", "filename": "gcc/unwind.inc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7344f3d75bffdd2372e2a24101f7e48de44af2f3/gcc%2Funwind.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7344f3d75bffdd2372e2a24101f7e48de44af2f3/gcc%2Funwind.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind.inc?ref=7344f3d75bffdd2372e2a24101f7e48de44af2f3", "patch": "@@ -239,3 +239,39 @@ _Unwind_DeleteException (struct _Unwind_Exception *exc)\n {\n   (*exc->exception_cleanup) (_URC_FOREIGN_EXCEPTION_CAUGHT, exc);\n }\n+\n+\n+/* Perform stack backtrace through unwind data.  */\n+\n+_Unwind_Reason_Code\n+_Unwind_Backtrace(_Unwind_Trace_Fn trace, void * trace_argument)\n+{\n+  struct _Unwind_Context context;\n+  _Unwind_Reason_Code code;\n+\n+  uw_init_context (&context);\n+\n+  while (1)\n+    {\n+      _Unwind_FrameState fs;\n+\n+      /* Set up fs to describe the FDE for the caller of context.  */\n+      code = uw_frame_state_for (&context, &fs);\n+      if (code != _URC_NO_REASON && code != _URC_END_OF_STACK)\n+\treturn _URC_FATAL_PHASE1_ERROR;\n+\n+      /* Call trace function.  */\n+      if ((*trace) (&context, trace_argument) != _URC_NO_REASON)\n+\treturn _URC_FATAL_PHASE1_ERROR;\n+\n+      /* We're done at end of stack.  */\t\n+      if (code == _URC_END_OF_STACK)\n+\tbreak;\n+\n+      /* Update context to describe the same frame as fs.  */\n+      uw_update_context (&context, &fs);\n+    }\n+\n+  return code;\n+}\n+"}]}