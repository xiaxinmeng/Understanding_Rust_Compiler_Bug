{"sha": "fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRhZTgzYWJlN2E4OGUxZjA4ZWMyNWQzZjRlYjVlYjIxZWMzNDJiZg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-06-24T20:38:47Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-06-24T20:38:47Z"}, "message": "verify.cc (branch_prepass): Updated for change to exception handler type.\n\n\t* verify.cc (branch_prepass): Updated for change to exception\n\thandler type.\n\t(verify_instructions_0): Likewise.\n\t* defineclass.cc (handleCodeAttribute): Initialize `prepared'.\n\t(handleExceptionTableEntry): Updated for change to exception\n\thandler type.\n\t* java/lang/Class.h (Class): Removed _Jv_InterpMethodInvocation.\n\t* include/java-interp.h (_Jv_InterpMethodInvocation): Removed.\n\t(union _Jv_InterpPC): New.\n\t(class _Jv_InterpException): Changed types to _Jv_InterpPC.\n\t(class _Jv_InterpMethod): Added new `prepared' field.\n\t(class _Jv_InterpMethod): Added `compile' method.  Removed\n\t`continue1' and `find_exception'.  Changed arguments to `run'.\n\t* interpret.cc (union insn_slot): New.\n\t(find_exception): Removed.\n\t(run_normal): Removed most logic.\n\t(run_synch_object): Likewise; also, use JvSynchronize.\n\t(run_synch_class): Likewise.\n\t(run): Removed.\n\t(continue1): Renamed as `run'.  Compile bytecode if required.\n\tAdd new code to allow refinement of direct-threaded code at\n\truntime.  Handle exceptions.\n\t(SAVE_PC): Removed.\n\t(compile): New method.\n\t(SET_ONE, SET_INSN, SET_INT, SET_DATUM): New defines.\n\t(NULLARRAYCHECK): Don't use SAVE_PC.\n\t(pc_t): New typedef.\n\t(TAKE_GOTO, GET1S, GET1U, GET2U, AVAL1U, AVAL2U, AVAL2UP,\n\tSKIP_GOTO, GOTO_VAL, PCVAL, AMPAMP): New macros.\n\nFrom-SVN: r54968", "tree": {"sha": "e59ad5d049989b731a9627c3a574a3d26f58284f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e59ad5d049989b731a9627c3a574a3d26f58284f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf/comments", "author": null, "committer": null, "parents": [{"sha": "7691fc06fee5ab69163222e1c584aed029273152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7691fc06fee5ab69163222e1c584aed029273152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7691fc06fee5ab69163222e1c584aed029273152"}], "stats": {"total": 2165, "additions": 1487, "deletions": 678}, "files": [{"sha": "a7c6eb2e0b0d702e4adb4735827c33c2f7e52fd9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf", "patch": "@@ -1,3 +1,35 @@\n+2002-06-24  Tom Tromey  <tromey@redhat.com>\n+\n+\t* verify.cc (branch_prepass): Updated for change to exception\n+\thandler type.\n+\t(verify_instructions_0): Likewise.\n+\t* defineclass.cc (handleCodeAttribute): Initialize `prepared'.\n+\t(handleExceptionTableEntry): Updated for change to exception\n+\thandler type.\n+\t* java/lang/Class.h (Class): Removed _Jv_InterpMethodInvocation.\n+\t* include/java-interp.h (_Jv_InterpMethodInvocation): Removed.\n+\t(union _Jv_InterpPC): New.\n+\t(class _Jv_InterpException): Changed types to _Jv_InterpPC.\n+\t(class _Jv_InterpMethod): Added new `prepared' field.\n+\t(class _Jv_InterpMethod): Added `compile' method.  Removed\n+\t`continue1' and `find_exception'.  Changed arguments to `run'.\n+\t* interpret.cc (union insn_slot): New.\n+\t(find_exception): Removed.\n+\t(run_normal): Removed most logic.\n+\t(run_synch_object): Likewise; also, use JvSynchronize.\n+\t(run_synch_class): Likewise.\n+\t(run): Removed.\n+\t(continue1): Renamed as `run'.  Compile bytecode if required.\n+\tAdd new code to allow refinement of direct-threaded code at\n+\truntime.  Handle exceptions.\n+\t(SAVE_PC): Removed.\n+\t(compile): New method.\n+\t(SET_ONE, SET_INSN, SET_INT, SET_DATUM): New defines.\n+\t(NULLARRAYCHECK): Don't use SAVE_PC.\n+\t(pc_t): New typedef.\n+\t(TAKE_GOTO, GET1S, GET1U, GET2U, AVAL1U, AVAL2U, AVAL2UP,\n+\tSKIP_GOTO, GOTO_VAL, PCVAL, AMPAMP): New macros.\n+\n 2002-06-23  Tom Tromey  <tromey@redhat.com>\n \n \t* configure: Rebuilt."}, {"sha": "95e671f42a39d1efa6ecb2e6df1c35e679741edb", "filename": "libjava/defineclass.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf/libjava%2Fdefineclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf/libjava%2Fdefineclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fdefineclass.cc?ref=fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf", "patch": "@@ -1258,6 +1258,7 @@ void _Jv_ClassReader::handleCodeAttribute\n   method->exc_count      = exc_table_length;\n   method->defining_class = def;\n   method->self           = &def->methods[method_index];\n+  method->prepared       = NULL;\n \n   // grab the byte code!\n   memcpy ((void*) method->bytecode (),\n@@ -1267,18 +1268,18 @@ void _Jv_ClassReader::handleCodeAttribute\n   def->interpreted_methods[method_index] = method;\n }\n \n-void _Jv_ClassReader::handleExceptionTableEntry \n+void _Jv_ClassReader::handleExceptionTableEntry\n   (int method_index, int exc_index, \n    int start_pc, int end_pc, int handler_pc, int catch_type)\n {\n   _Jv_InterpMethod *method = reinterpret_cast<_Jv_InterpMethod *>\n     (def->interpreted_methods[method_index]);\n   _Jv_InterpException *exc = method->exceptions ();\n \n-  exc[exc_index].start_pc     = start_pc;\n-  exc[exc_index].end_pc       = end_pc;\n-  exc[exc_index].handler_pc   = handler_pc;\n-  exc[exc_index].handler_type = catch_type;\n+  exc[exc_index].start_pc.i     = start_pc;\n+  exc[exc_index].end_pc.i       = end_pc;\n+  exc[exc_index].handler_pc.i   = handler_pc;\n+  exc[exc_index].handler_type.i = catch_type;\n }\n \n void _Jv_ClassReader::handleMethodsEnd ()"}, {"sha": "de1d88f452e2e22c6c2cf3d90b445f7c2996a035", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf", "patch": "@@ -1,6 +1,6 @@\n // java-interp.h - Header file for the bytecode interpreter.  -*- c++ -*-\n \n-/* Copyright (C) 1999, 2000, 2001  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2001, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -49,14 +49,22 @@ void _Jv_VerifyMethod (_Jv_InterpMethod *method);\n \n class _Jv_InterpClass;\n class _Jv_InterpMethod;\n-class _Jv_InterpMethodInvocation;\n+\n+// Before a method is \"compiled\" we store values as the bytecode PC,\n+// an int.  Afterwards we store them as pointers into the prepared\n+// code itself.\n+union _Jv_InterpPC\n+{\n+  int i;\n+  void *p;\n+};\n \n class _Jv_InterpException\n {\n-  int  start_pc;\n-  int  end_pc;\n-  int  handler_pc;\n-  int  handler_type;\n+  _Jv_InterpPC start_pc;\n+  _Jv_InterpPC end_pc;\n+  _Jv_InterpPC handler_pc;\n+  _Jv_InterpPC handler_type;\n \n   friend class _Jv_ClassReader;\n   friend class _Jv_InterpMethod;\n@@ -92,14 +100,16 @@ class _Jv_InterpMethod : public _Jv_MethodBase\n \n   _Jv_ushort       exc_count;\n \n+  void *prepared;\n+\n   unsigned char* bytecode () \n   {\n     return \n       ((unsigned char*)this) \n       + ROUND((sizeof (_Jv_InterpMethod)\n \t       + exc_count*sizeof (_Jv_InterpException)), 4);\n   }\n-    \n+\n   _Jv_InterpException * exceptions ()\n   {\n     return (_Jv_InterpException*) (this+1);\n@@ -115,40 +125,23 @@ class _Jv_InterpMethod : public _Jv_MethodBase\n \n   // return the method's invocation pointer (a stub).\n   void *ncode ();\n-  void continue1 (_Jv_InterpMethodInvocation *inv);\n+  void compile (const void * const *);\n \n   static void run_normal (ffi_cif*, void*, ffi_raw*, void*);\n   static void run_synch_object (ffi_cif*, void*, ffi_raw*, void*);\n   static void run_synch_class (ffi_cif*, void*, ffi_raw*, void*);\n \n-  inline jobject run (ffi_cif*, void*, ffi_raw*, \n-\t\t      _Jv_InterpMethodInvocation*);\n-\n-  bool find_exception (jobject ex,\n-\t\t       _Jv_InterpMethodInvocation *inv);\n+  void run (void*, ffi_raw *);\n \n  public:\n   static void dump_object(jobject o);\n \n   friend class _Jv_ClassReader;\n-  friend class _Jv_InterpMethodInvocation;\n   friend class _Jv_BytecodeVerifier;\n \n   friend void _Jv_PrepareClass(jclass);\n };\n \n-class _Jv_InterpMethodInvocation {\n-  _Jv_InterpMethod *running;\n-  _Jv_word         *sp;\n-  unsigned char    *pc;\n-  _Jv_word          state[0];\n-\n-  _Jv_word*         stack_base () { return &state[0]; }\n-  _Jv_word*         local_base () { return &state[running->max_stack]; }\n-\n-  friend class _Jv_InterpMethod;\n-};\n-  \n class _Jv_InterpClass : public java::lang::Class\n {\n   _Jv_MethodBase **interpreted_methods;"}, {"sha": "e5c40cff15039de6651f36c6dd582925d9d99ed9", "filename": "libjava/interpret.cc", "status": "modified", "additions": 1418, "deletions": 634, "changes": 2052, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf"}, {"sha": "eb33c93a73245d5e240d1a9d8ddd3a80dea3f50a", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf", "patch": "@@ -338,7 +338,6 @@ class java::lang::Class : public java::lang::Object\n   friend class _Jv_ClassReader;\t\n   friend class _Jv_InterpClass;\n   friend class _Jv_InterpMethod;\n-  friend class _Jv_InterpMethodInvocation;\n #endif\n \n #ifdef JV_MARKOBJ_DECL"}, {"sha": "29f0f321a7f856c41fa4267c71bb8ba72b1f3948", "filename": "libjava/verify.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf/libjava%2Fverify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf/libjava%2Fverify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fverify.cc?ref=fdae83abe7a88e1f08ec25d3f4eb5eb21ec342bf", "patch": "@@ -1882,18 +1882,18 @@ class _Jv_BytecodeVerifier\n     // Verify exception handlers.\n     for (int i = 0; i < current_method->exc_count; ++i)\n       {\n-\tif (! (flags[exception[i].handler_pc] & FLAG_INSN_START))\n+\tif (! (flags[exception[i].handler_pc.i] & FLAG_INSN_START))\n \t  verify_fail (\"exception handler not at instruction start\",\n-\t\t       exception[i].handler_pc);\n-\tif (! (flags[exception[i].start_pc] & FLAG_INSN_START))\n+\t\t       exception[i].handler_pc.i);\n+\tif (! (flags[exception[i].start_pc.i] & FLAG_INSN_START))\n \t  verify_fail (\"exception start not at instruction start\",\n-\t\t       exception[i].start_pc);\n-\tif (exception[i].end_pc != current_method->code_length\n-\t    && ! (flags[exception[i].end_pc] & FLAG_INSN_START))\n+\t\t       exception[i].start_pc.i);\n+\tif (exception[i].end_pc.i != current_method->code_length\n+\t    && ! (flags[exception[i].end_pc.i] & FLAG_INSN_START))\n \t  verify_fail (\"exception end not at instruction start\",\n-\t\t       exception[i].end_pc);\n+\t\t       exception[i].end_pc.i);\n \n-\tflags[exception[i].handler_pc] |= FLAG_BRANCH_TARGET;\n+\tflags[exception[i].handler_pc.i] |= FLAG_BRANCH_TARGET;\n       }\n   }\n \n@@ -2186,12 +2186,12 @@ class _Jv_BytecodeVerifier\n \t// through them all.\n \tfor (int i = 0; i < current_method->exc_count; ++i)\n \t  {\n-\t    if (PC >= exception[i].start_pc && PC < exception[i].end_pc)\n+\t    if (PC >= exception[i].start_pc.i && PC < exception[i].end_pc.i)\n \t      {\n \t\ttype handler (&java::lang::Throwable::class$);\n-\t\tif (exception[i].handler_type != 0)\n-\t\t  handler = check_class_constant (exception[i].handler_type);\n-\t\tpush_exception_jump (handler, exception[i].handler_pc);\n+\t\tif (exception[i].handler_type.i != 0)\n+\t\t  handler = check_class_constant (exception[i].handler_type.i);\n+\t\tpush_exception_jump (handler, exception[i].handler_pc.i);\n \t      }\n \t  }\n "}]}