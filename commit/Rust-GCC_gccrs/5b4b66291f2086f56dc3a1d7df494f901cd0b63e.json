{"sha": "5b4b66291f2086f56dc3a1d7df494f901cd0b63e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI0YjY2MjkxZjIwODZmNTZkYzNhMWQ3ZGY0OTRmOTAxY2QwYjYzZQ==", "commit": {"author": {"name": "Richard Wai", "email": "richard@annexi-strayline.com", "date": "2021-03-15T10:24:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-04-28T09:37:52Z"}, "message": "[Ada] Hashed container Cursor type predefined equality non-conformance\n\ngcc/ada/\n\n\t* libgnat/a-cohase.ads (Cursor): Synchronize comments for the Cursor\n\ttype definition to be consistent with identical definitions in other\n\tcontainer packages. Add additional comments regarding the importance of\n\tmaintaining the \"Position\" component for predefined equality.\n\t* libgnat/a-cohama.ads (Cursor): Likewise.\n\t* libgnat/a-cihama.ads (Cursor): Likewise.\n\t* libgnat/a-cohase.adb (Find, Insert): Ensure that Cursor objects\n\talways have their \"Position\" component set to ensure predefined\n\tequality works as required.\n\t* libgnat/a-cohama.adb (Find, Insert): Likewise.\n\t* libgnat/a-cihama.adb (Find, Insert): Likewise.\n\ngcc/testsuite/\n\n\t* gnat.dg/containers2.adb: New test.", "tree": {"sha": "91443a88a83b517dc2d0d808f76c79033c8b35f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91443a88a83b517dc2d0d808f76c79033c8b35f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b4b66291f2086f56dc3a1d7df494f901cd0b63e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b4b66291f2086f56dc3a1d7df494f901cd0b63e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b4b66291f2086f56dc3a1d7df494f901cd0b63e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b4b66291f2086f56dc3a1d7df494f901cd0b63e/comments", "author": {"login": "Richard-Wai", "id": 35776413, "node_id": "MDQ6VXNlcjM1Nzc2NDEz", "avatar_url": "https://avatars.githubusercontent.com/u/35776413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Richard-Wai", "html_url": "https://github.com/Richard-Wai", "followers_url": "https://api.github.com/users/Richard-Wai/followers", "following_url": "https://api.github.com/users/Richard-Wai/following{/other_user}", "gists_url": "https://api.github.com/users/Richard-Wai/gists{/gist_id}", "starred_url": "https://api.github.com/users/Richard-Wai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Richard-Wai/subscriptions", "organizations_url": "https://api.github.com/users/Richard-Wai/orgs", "repos_url": "https://api.github.com/users/Richard-Wai/repos", "events_url": "https://api.github.com/users/Richard-Wai/events{/privacy}", "received_events_url": "https://api.github.com/users/Richard-Wai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fccc47dddc2ee605dd7fce5c1d1711404e19cd7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fccc47dddc2ee605dd7fce5c1d1711404e19cd7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fccc47dddc2ee605dd7fce5c1d1711404e19cd7f"}], "stats": {"total": 213, "additions": 207, "deletions": 6}, "files": [{"sha": "50adea1b46aafeff1f78017cde6afb5c83d28b28", "filename": "gcc/ada/libgnat/a-cihama.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4b66291f2086f56dc3a1d7df494f901cd0b63e/gcc%2Fada%2Flibgnat%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4b66291f2086f56dc3a1d7df494f901cd0b63e/gcc%2Fada%2Flibgnat%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cihama.adb?ref=5b4b66291f2086f56dc3a1d7df494f901cd0b63e", "patch": "@@ -522,7 +522,8 @@ is\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unrestricted_Access, Node, Hash_Type'Last);\n+      return Cursor'\n+        (Container'Unrestricted_Access, Node, HT_Ops.Index (HT, Node));\n    end Find;\n \n    --------------------\n@@ -748,6 +749,7 @@ is\n       end if;\n \n       Position.Container := Container'Unchecked_Access;\n+      Position.Position := HT_Ops.Index (HT, Position.Node);\n    end Insert;\n \n    procedure Insert"}, {"sha": "f8961671b37be848c7c37bfa72cbe865d955ec85", "filename": "gcc/ada/libgnat/a-cihama.ads", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4b66291f2086f56dc3a1d7df494f901cd0b63e/gcc%2Fada%2Flibgnat%2Fa-cihama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4b66291f2086f56dc3a1d7df494f901cd0b63e/gcc%2Fada%2Flibgnat%2Fa-cihama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cihama.ads?ref=5b4b66291f2086f56dc3a1d7df494f901cd0b63e", "patch": "@@ -363,8 +363,22 @@ private\n \n    type Cursor is record\n       Container : Map_Access;\n+      --  Access to this cursor's container\n+\n       Node      : Node_Access;\n+      --  Access to the node pointed to by this cursor\n+\n       Position  : Hash_Type := Hash_Type'Last;\n+      --  Position of the node in the buckets of the container. If this is\n+      --  equal to Hash_Type'Last, then it will not be used. Position is\n+      --  not requried by the implementation, but improves the efficiency\n+      --  of various operations.\n+      --\n+      --  However, this value must be maintained so that the predefined\n+      --  equality operation acts as required by RM A.18.4-18/2, which\n+      --  states: \"The predefined \"=\" operator for type Cursor returns True\n+      --  if both cursors are No_Element, or designate the same element\n+      --  in the same container.\"\n    end record;\n \n    procedure Write"}, {"sha": "fb46e0742614d5687d33db4dd698e57e39dd3f7b", "filename": "gcc/ada/libgnat/a-cohama.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4b66291f2086f56dc3a1d7df494f901cd0b63e/gcc%2Fada%2Flibgnat%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4b66291f2086f56dc3a1d7df494f901cd0b63e/gcc%2Fada%2Flibgnat%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohama.adb?ref=5b4b66291f2086f56dc3a1d7df494f901cd0b63e", "patch": "@@ -478,7 +478,8 @@ is\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unrestricted_Access, Node, Hash_Type'Last);\n+      return Cursor'\n+        (Container'Unrestricted_Access, Node, HT_Ops.Index (HT, Node));\n    end Find;\n \n    --------------------\n@@ -635,6 +636,7 @@ is\n       end if;\n \n       Position.Container := Container'Unrestricted_Access;\n+      Position.Position := HT_Ops.Index (HT, Position.Node);\n    end Insert;\n \n    procedure Insert\n@@ -677,6 +679,7 @@ is\n       end if;\n \n       Position.Container := Container'Unrestricted_Access;\n+      Position.Position := HT_Ops.Index (HT, Position.Node);\n    end Insert;\n \n    procedure Insert"}, {"sha": "c6e377c6bb1342ee1d401c3fbc74de339332d400", "filename": "gcc/ada/libgnat/a-cohama.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4b66291f2086f56dc3a1d7df494f901cd0b63e/gcc%2Fada%2Flibgnat%2Fa-cohama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4b66291f2086f56dc3a1d7df494f901cd0b63e/gcc%2Fada%2Flibgnat%2Fa-cohama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohama.ads?ref=5b4b66291f2086f56dc3a1d7df494f901cd0b63e", "patch": "@@ -465,7 +465,15 @@ private\n \n       Position  : Hash_Type := Hash_Type'Last;\n       --  Position of the node in the buckets of the container. If this is\n-      --  equal to Hash_Type'Last, then it will not be used.\n+      --  equal to Hash_Type'Last, then it will not be used. Position is\n+      --  not requried by the implementation, but improves the efficiency\n+      --  of various operations.\n+      --\n+      --  However, this value must be maintained so that the predefined\n+      --  equality operation acts as required by RM A.18.4-18/2, which\n+      --  states: \"The predefined \"=\" operator for type Cursor returns True\n+      --  if both cursors are No_Element, or designate the same element\n+      --  in the same container.\"\n    end record;\n \n    procedure Read"}, {"sha": "aac5b1b3cf21204b2ee53818d83c9ea1b70ec8fe", "filename": "gcc/ada/libgnat/a-cohase.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4b66291f2086f56dc3a1d7df494f901cd0b63e/gcc%2Fada%2Flibgnat%2Fa-cohase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4b66291f2086f56dc3a1d7df494f901cd0b63e/gcc%2Fada%2Flibgnat%2Fa-cohase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohase.adb?ref=5b4b66291f2086f56dc3a1d7df494f901cd0b63e", "patch": "@@ -605,13 +605,13 @@ is\n    is\n       HT   : Hash_Table_Type renames Container'Unrestricted_Access.HT;\n       Node : constant Node_Access := Element_Keys.Find (HT, Item);\n-\n    begin\n       if Node = null then\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unrestricted_Access, Node, Hash_Type'Last);\n+      return Cursor'\n+        (Container'Unrestricted_Access, Node, HT_Ops.Index (HT, Node));\n    end Find;\n \n    --------------------\n@@ -763,9 +763,11 @@ is\n       Position  : out Cursor;\n       Inserted  : out Boolean)\n    is\n+      HT : Hash_Table_Type renames Container'Unrestricted_Access.HT;\n    begin\n       Insert (Container.HT, New_Item, Position.Node, Inserted);\n       Position.Container := Container'Unchecked_Access;\n+      Position.Position := HT_Ops.Index (HT, Position.Node);\n    end Insert;\n \n    procedure Insert\n@@ -1998,7 +2000,7 @@ is\n             return No_Element;\n          else\n             return Cursor'\n-              (Container'Unrestricted_Access, Node, Hash_Type'Last);\n+              (Container'Unrestricted_Access, Node, HT_Ops.Index (HT, Node));\n          end if;\n       end Find;\n "}, {"sha": "c1415b57ff8fb3204cbd313590798d3e3e0d7d1d", "filename": "gcc/ada/libgnat/a-cohase.ads", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4b66291f2086f56dc3a1d7df494f901cd0b63e/gcc%2Fada%2Flibgnat%2Fa-cohase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4b66291f2086f56dc3a1d7df494f901cd0b63e/gcc%2Fada%2Flibgnat%2Fa-cohase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohase.ads?ref=5b4b66291f2086f56dc3a1d7df494f901cd0b63e", "patch": "@@ -537,8 +537,22 @@ private\n \n    type Cursor is record\n       Container : Set_Access;\n+      --  Access to this cursor's container\n+\n       Node      : Node_Access;\n+      --  Access to the node pointed to by this cursor\n+\n       Position  : Hash_Type := Hash_Type'Last;\n+      --  Position of the node in the buckets of the container. If this is\n+      --  equal to Hash_Type'Last, then it will not be used. Position is\n+      --  not requried by the implementation, but improves the efficiency\n+      --  of various operations.\n+      --\n+      --  However, this value must be maintained so that the predefined\n+      --  equality operation acts as required by RM A.18.7-17/2, which\n+      --  states: \"The predefined \"=\" operator for type Cursor returns True\n+      --  if both cursors are No_Element, or designate the same element\n+      --  in the same container.\"\n    end record;\n \n    procedure Write"}, {"sha": "9c5dc0f434f4290ee289b8857dce6e90f0ff1a12", "filename": "gcc/testsuite/gnat.dg/containers2.adb", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4b66291f2086f56dc3a1d7df494f901cd0b63e/gcc%2Ftestsuite%2Fgnat.dg%2Fcontainers2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4b66291f2086f56dc3a1d7df494f901cd0b63e/gcc%2Ftestsuite%2Fgnat.dg%2Fcontainers2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcontainers2.adb?ref=5b4b66291f2086f56dc3a1d7df494f901cd0b63e", "patch": "@@ -0,0 +1,158 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnata\" }\n+\n+with Ada.Strings.Hash;\n+with Ada.Containers.Hashed_Sets;\n+with Ada.Containers.Hashed_Maps;\n+with Ada.Containers.Indefinite_Hashed_Sets;\n+with Ada.Containers.Indefinite_Hashed_Maps;\n+\n+procedure Containers2 is\n+   --  Check that Cursors of the hashed containers follow the correct\n+   --  predefined equality rules - that two Cursors to the same element\n+   --  are equal, one one is obtained through, for example, iteration,\n+   --  and the other is obtained through a search\n+\n+   subtype Definite_Name is String (1 .. 5);\n+\n+   type Named_Item is\n+      record\n+         Name : Definite_Name;\n+         Item : Integer := 0;\n+      end record;\n+\n+\n+   function Equivalent_Item (Left, Right: Named_Item) return Boolean\n+   is (Left.Name = Right.Name);\n+\n+   function DI_Hash (Item: Named_Item) return Ada.Containers.Hash_Type\n+   is (Ada.Strings.Hash (Item.Name));\n+\n+   package HS is new Ada.Containers.Hashed_Sets\n+     (Element_Type        => Named_Item,\n+      Hash                => DI_Hash,\n+      Equivalent_Elements => Equivalent_Item);\n+\n+   package IHS is new Ada.Containers.Indefinite_Hashed_Sets\n+     (Element_Type        => Named_Item,\n+      Hash                => DI_Hash,\n+      Equivalent_Elements => Equivalent_Item);\n+\n+   package HM is new Ada.Containers.Hashed_Maps\n+     (Key_Type        => Definite_Name,\n+      Element_Type    => Integer,\n+      Hash            => Ada.Strings.Hash,\n+      Equivalent_Keys => \"=\");\n+\n+   package IHM is new Ada.Containers.Indefinite_Hashed_Maps\n+     (Key_Type        => Definite_Name,\n+      Element_Type    => Integer,\n+      Hash            => Ada.Strings.Hash,\n+      Equivalent_Keys => \"=\");\n+\n+   Item_Data : constant array (1 .. 5) of Named_Item\n+     := ((Name => \"ABCDE\", others => <>),\n+         (Name => \"FGHIJ\", others => <>),\n+         (Name => \"KLMNO\", others => <>),\n+         (Name => \"PQRST\", others => <>),\n+         (Name => \"UVWXY\", others => <>));\n+\n+   use type HS.Cursor;\n+   use type IHS.Cursor;\n+   use type HM.Cursor;\n+   use type IHM.Cursor;\n+\n+   type HS_Cursor_Vec  is array (Item_Data'Range) of HS.Cursor;\n+   type IHS_Cursor_Vec is array (Item_Data'Range) of IHS.Cursor;\n+   type HM_Cursor_Vec  is array (Item_Data'Range) of HM.Cursor;\n+   type IHM_Cursor_Vec is array (Item_Data'Range) of IHM.Cursor;\n+\n+   HSC  : HS.Set;\n+   IHSC : IHS.Set;\n+   HMC  : HM.Map;\n+   IHMC : IHM.Map;\n+\n+   HS_Create_Cursors  : HS_Cursor_Vec;\n+   IHS_Create_Cursors : IHS_Cursor_Vec;\n+   HM_Create_Cursors  : HM_Cursor_Vec;\n+   IHM_Create_Cursors : IHM_Cursor_Vec;\n+\n+   HS_Index  : HS.Cursor;\n+   IHS_Index : IHS.Cursor;\n+   HM_Index  : HM.Cursor;\n+   IHM_Index : IHM.Cursor;\n+\n+   HS_Find  : HS.Cursor;\n+   IHS_Find : IHS.Cursor;\n+   HM_Find  : HM.Cursor;\n+   IHM_Find : IHM.Cursor;\n+\n+\n+   Inserted : Boolean;\n+\n+begin\n+\n+   for I in Item_Data'Range loop\n+      HSC.Insert (New_Item => Item_Data(I),\n+                  Position => HS_Create_Cursors(I),\n+                  Inserted => Inserted);\n+\n+      pragma Assert (Inserted);\n+\n+\n+      IHSC.Insert (New_Item => Item_Data(I),\n+                   Position => IHS_Create_Cursors(I),\n+                   Inserted => Inserted);\n+\n+      pragma Assert (Inserted);\n+\n+      HMC.Insert (New_Item => Item_Data(I).Item,\n+                  Key      => Item_Data(I).Name,\n+                  Position => HM_Create_Cursors(I),\n+                  Inserted => Inserted);\n+\n+      pragma Assert (Inserted);\n+\n+      IHMC.Insert (New_Item => Item_Data(I).Item,\n+                   Key      => Item_Data(I).Name,\n+                   Position => IHM_Create_Cursors(I),\n+                   Inserted => Inserted);\n+\n+      pragma Assert (Inserted);\n+\n+   end loop;\n+\n+   HS_Index  := HSC.First;\n+   IHS_Index := IHSC.First;\n+   HM_Index  := HMC.First;\n+   IHM_Index := IHMC.First;\n+\n+   for I in Item_Data'Range loop\n+      pragma Assert (HS.Has_Element  (HS_Index));\n+      pragma Assert (IHS.Has_Element (IHS_Index));\n+      pragma Assert (HM.Has_Element  (HM_Index));\n+      pragma Assert (IHM.Has_Element (IHM_Index));\n+\n+      HS_Find := HSC.Find (Item_Data(I));\n+      pragma Assert (HS_Create_Cursors(I) = HS_Index);\n+      pragma Assert (HS_Find = HS_Index);\n+\n+      IHS_Find := IHSC.Find (Item_Data(I));\n+      pragma Assert (IHS_Create_Cursors(I) = IHS_Index);\n+      pragma Assert (IHS_Find = IHS_Index);\n+\n+      HM_Find := HMC.Find (Item_Data(I).Name);\n+      pragma Assert (HM_Create_Cursors(I) = HM_Index);\n+      pragma Assert (HM_Find = HM_Index);\n+\n+      IHM_Find := IHMC.Find (Item_Data(I).Name);\n+      pragma Assert (IHM_Create_Cursors(I) = IHM_Index);\n+      pragma Assert (IHM_Find = IHM_Index);\n+\n+      HS.Next  (HS_Index);\n+      IHS.Next (IHS_Index);\n+      HM.Next  (HM_Index);\n+      IHM.Next (IHM_Index);\n+   end loop;\n+\n+end;"}]}