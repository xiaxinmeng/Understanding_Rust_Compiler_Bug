{"sha": "cf9087af1f963e52ed4f0d3b8594e2214bd7b312", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y5MDg3YWYxZjk2M2U1MmVkNGYwZDNiODU5NGUyMjE0YmQ3YjMxMg==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-04-14T13:10:52Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-17T08:14:15Z"}, "message": "[Ada] Support aspect Relaxed_Initialization on private types and constants\n\n2020-06-17  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* einfo.adb (Is_Relaxed_Initialization_State): Add reference to\n\tSPARK RM.\n\t* sem_attr.adb (Analyze_Attribute_Old_Result): Likewise.\n\t* sem_ch13.adb (Analyze_Aspect_Relaxed_Initialization): Reject\n\taspect on completions of private types and deferred constants.\n\t* sem_util.ads, sem_util.adb (Has_Relaxed_Initialization):\n\tAdjust comments; support queries for constants.", "tree": {"sha": "424e491bc49811478a78f17f45b3b9c9a55e51e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/424e491bc49811478a78f17f45b3b9c9a55e51e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf9087af1f963e52ed4f0d3b8594e2214bd7b312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9087af1f963e52ed4f0d3b8594e2214bd7b312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf9087af1f963e52ed4f0d3b8594e2214bd7b312", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9087af1f963e52ed4f0d3b8594e2214bd7b312/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceb7fad635dc4cc09905b51a8d65ca7f29226892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb7fad635dc4cc09905b51a8d65ca7f29226892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceb7fad635dc4cc09905b51a8d65ca7f29226892"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "62f61c42f3a0ec9ef45ce67368b7fbcb8b20cd99", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9087af1f963e52ed4f0d3b8594e2214bd7b312/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9087af1f963e52ed4f0d3b8594e2214bd7b312/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=cf9087af1f963e52ed4f0d3b8594e2214bd7b312", "patch": "@@ -8256,8 +8256,7 @@ package body Einfo is\n    function Is_Relaxed_Initialization_State (Id : E) return B is\n    begin\n       --  To qualify, the abstract state must appear with simple option\n-      --  \"Relaxed_Initialization\" (??? add reference to SPARK RM once the\n-      --  Relaxed_Initialization aspect is described there).\n+      --  \"Relaxed_Initialization\" (SPARK RM 6.10).\n \n       return\n         Ekind (Id) = E_Abstract_State"}, {"sha": "a4f714599bc7b2d7e48f5bbbae5b9e19fefa62b9", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9087af1f963e52ed4f0d3b8594e2214bd7b312/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9087af1f963e52ed4f0d3b8594e2214bd7b312/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=cf9087af1f963e52ed4f0d3b8594e2214bd7b312", "patch": "@@ -1333,8 +1333,7 @@ package body Sem_Attr is\n                null;\n \n             --  Attribute 'Result is allowed to appear in aspect\n-            --  Relaxed_Initialization (??? add reference to SPARK RM once this\n-            --  attribute is described there).\n+            --  Relaxed_Initialization (SPARK RM 6.10).\n \n             elsif Prag_Nam = Name_Relaxed_Initialization\n               and then Aname = Name_Result"}, {"sha": "0edcb840b60eaafc7b1ae285c0e2fa731013bf01", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9087af1f963e52ed4f0d3b8594e2214bd7b312/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9087af1f963e52ed4f0d3b8594e2214bd7b312/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=cf9087af1f963e52ed4f0d3b8594e2214bd7b312", "patch": "@@ -2216,19 +2216,37 @@ package body Sem_Ch13 is\n                --  Will be set to True if we need to restore the scope table\n                --  after analyzing the aspect expression.\n \n+               Prev_Id : Entity_Id;\n+\n             --  Start of processing for Analyze_Aspect_Relaxed_Initialization\n \n             begin\n                --  Set name of the aspect for error messages\n                Error_Msg_Name_1 := Nam;\n \n-               --  Annotation of a type; no aspect expression is allowed\n+               --  Annotation of a type; no aspect expression is allowed.\n+               --  For a private type, the aspect must be attached to the\n+               --  partial view.\n+               --\n                --  ??? Once the exact rule for this aspect is ready, we will\n                --  likely reject concurrent types, etc., so let's keep the code\n                --  for types and variable separate.\n \n                if Is_First_Subtype (E) then\n-                  if Present (Expr) then\n+                  Prev_Id := Incomplete_Or_Partial_View (E);\n+                  if Present (Prev_Id) then\n+\n+                     --  Aspect may appear on the full view of an incomplete\n+                     --  type because the incomplete declaration cannot have\n+                     --  any aspects.\n+\n+                     if Ekind (Prev_Id) = E_Incomplete_Type then\n+                        null;\n+                     else\n+                        Error_Msg_N (\"aspect % must apply to partial view\", N);\n+                     end if;\n+\n+                  elsif Present (Expr) then\n                      Error_Msg_N (\"illegal aspect % expression\", Expr);\n                   end if;\n \n@@ -2239,6 +2257,19 @@ package body Sem_Ch13 is\n                      Error_Msg_N (\"illegal aspect % expression\", Expr);\n                   end if;\n \n+               --  Annotation of a constant; no aspect expression is allowed.\n+               --  For a deferred constant, the aspect must be attached to the\n+               --  partial view.\n+\n+               elsif Ekind (E) = E_Constant then\n+                  if Present (Incomplete_Or_Partial_View (E)) then\n+                     Error_Msg_N\n+                       (\"aspect % must apply to deferred constant\", N);\n+\n+                  elsif Present (Expr) then\n+                     Error_Msg_N (\"illegal aspect % expression\", Expr);\n+                  end if;\n+\n                --  Annotation of a subprogram; aspect expression is required\n \n                elsif Is_Subprogram (E) then"}, {"sha": "eb9c9f68a9154630996deb3f0a6422ca4d0df85b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9087af1f963e52ed4f0d3b8594e2214bd7b312/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9087af1f963e52ed4f0d3b8594e2214bd7b312/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=cf9087af1f963e52ed4f0d3b8594e2214bd7b312", "patch": "@@ -12495,13 +12495,20 @@ package body Sem_Util is\n          when E_Abstract_State =>\n             return Is_Relaxed_Initialization_State (E);\n \n+         --  Constants have this aspect attached directly; for deferred\n+         --  constants, the aspect is attached to the partial view.\n+\n+         when E_Constant =>\n+            return Has_Aspect (E, Aspect_Relaxed_Initialization);\n+\n          --  Variables have this aspect attached directly\n \n          when E_Variable =>\n             return Has_Aspect (E, Aspect_Relaxed_Initialization);\n \n          --  Types have this aspect attached directly (though we only allow it\n-         --  to be specified for the first subtype).\n+         --  to be specified for the first subtype). For private types, the\n+         --  aspect is attached to the partial view.\n \n          when Type_Kind =>\n             pragma Assert (Is_First_Subtype (E));"}, {"sha": "7a54b5c52dcd10e0838b2404b58f18744c8f83ee", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9087af1f963e52ed4f0d3b8594e2214bd7b312/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9087af1f963e52ed4f0d3b8594e2214bd7b312/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=cf9087af1f963e52ed4f0d3b8594e2214bd7b312", "patch": "@@ -1382,9 +1382,10 @@ package Sem_Util is\n    --  yet received a full declaration.\n \n    function Has_Relaxed_Initialization (E : Entity_Id) return Boolean;\n-   --  Returns True iff entity E, which can be either a type, a variable, an\n-   --  abstract state or a function, is subject to the Relaxed_Initialization\n-   --  aspect.\n+   --  Returns True iff entity E is subject to the Relaxed_Initialization\n+   --  aspect. Entity E can be either type, variable, constant, function,\n+   --  or abstract state. For private types and deferred constants E should\n+   --  be the private view, because aspect can only be attached there.\n \n    function Has_Signed_Zeros (E : Entity_Id) return Boolean;\n    --  Determines if the floating-point type E supports signed zeros."}]}