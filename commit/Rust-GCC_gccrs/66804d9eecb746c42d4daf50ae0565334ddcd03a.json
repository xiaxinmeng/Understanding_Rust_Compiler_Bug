{"sha": "66804d9eecb746c42d4daf50ae0565334ddcd03a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY4MDRkOWVlY2I3NDZjNDJkNGRhZjUwYWUwNTY1MzM0ZGRjZDAzYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-05-21T11:13:21Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-05-21T11:13:21Z"}, "message": "c-common.h (enum rid): Remove RID_BOUNDED, RID_UNBOUNDED.\n\n\t* c-common.h (enum rid): Remove RID_BOUNDED, RID_UNBOUNDED.\n\t* c-parse.in (reswords): Remove __bounded__ and __unbounded__.\n\t(rid_to_yy): Remove RID_BOUNDED, RID_UNBOUNDED slots.\n\t* print-tree.c (print_node): Remove ambient-boundedness.\n\t* tree.h (tree_common): Remove bounded_flag.\n\t(BOUNDED_INDIRECT_YPE_P, BOUNDED_POINTER_TYPE_P,\n\tBOUNDED_REFERENCE_TYPE_P, MAYBE_BOUNDED_INDIRECT_TYPE_P,\n\tMAYBE_BOUNDED_POINTER_TYPE_P, MAYBE_BOUNDED_REFERENCE_TYPE_P,\n\tTREE_BOUNDED, TYPE_MAIN_VARIANTS_PHYSICALLY_EQUAL_P,\n\tTYPE_MAIN_PHYSICAL_VARIANT, TYPE_BOUNDED, TYPE_QUAL_BOUNDED):\n\tRemove.\n\t(TYPE_QUALS): Remove BOUNDED.\n\t(TREE_EXPR_QUALS, TREE_FUNC_QUALS): Remove.\n\t(TYPE_BOUNDED_VALUE, TYPE_BOUNDED_BASE, TYPE_BOUNDED_EXTENT,\n\tTYPE_BOUNDED_SUBTYPE, TYPE_UNBOUNDED_VARIANT, TYPE_POINTER_DEPTH,\n\tTYPE_AMBIENT_BOUNDEDNESS, MAX_POINTER_DEPT,\n\tVA_LIST_POINTER_DEPTH): Remove.\n\t(struct tree_type): Remove pointer_depth.\ntreelang:\n\t* treetree.c (reswords): Remove __bounded__, __unbounded__.\n\nFrom-SVN: r67058", "tree": {"sha": "3b0f6bcea289896d48c719adf0b86efdc438b1ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b0f6bcea289896d48c719adf0b86efdc438b1ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66804d9eecb746c42d4daf50ae0565334ddcd03a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66804d9eecb746c42d4daf50ae0565334ddcd03a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66804d9eecb746c42d4daf50ae0565334ddcd03a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66804d9eecb746c42d4daf50ae0565334ddcd03a/comments", "author": null, "committer": null, "parents": [{"sha": "6184e8a447c8a7d4a16da25177693ea1645e5fd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6184e8a447c8a7d4a16da25177693ea1645e5fd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6184e8a447c8a7d4a16da25177693ea1645e5fd8"}], "stats": {"total": 236, "additions": 33, "deletions": 203}, "files": [{"sha": "4dc4a1d0ce9768d29db4160debbe4461d99ea068", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66804d9eecb746c42d4daf50ae0565334ddcd03a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66804d9eecb746c42d4daf50ae0565334ddcd03a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66804d9eecb746c42d4daf50ae0565334ddcd03a", "patch": "@@ -1,3 +1,24 @@\n+2003-05-21  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c-common.h (enum rid): Remove RID_BOUNDED, RID_UNBOUNDED.\n+\t* c-parse.in (reswords): Remove __bounded__ and __unbounded__.\n+\t(rid_to_yy): Remove RID_BOUNDED, RID_UNBOUNDED slots.\n+\t* print-tree.c (print_node): Remove ambient-boundedness.\n+\t* tree.h (tree_common): Remove bounded_flag.\n+\t(BOUNDED_INDIRECT_YPE_P, BOUNDED_POINTER_TYPE_P,\n+\tBOUNDED_REFERENCE_TYPE_P, MAYBE_BOUNDED_INDIRECT_TYPE_P,\n+\tMAYBE_BOUNDED_POINTER_TYPE_P, MAYBE_BOUNDED_REFERENCE_TYPE_P,\n+\tTREE_BOUNDED, TYPE_MAIN_VARIANTS_PHYSICALLY_EQUAL_P,\n+\tTYPE_MAIN_PHYSICAL_VARIANT, TYPE_BOUNDED, TYPE_QUAL_BOUNDED):\n+\tRemove.\n+\t(TYPE_QUALS): Remove BOUNDED.\n+\t(TREE_EXPR_QUALS, TREE_FUNC_QUALS): Remove.\n+\t(TYPE_BOUNDED_VALUE, TYPE_BOUNDED_BASE, TYPE_BOUNDED_EXTENT,\n+\tTYPE_BOUNDED_SUBTYPE, TYPE_UNBOUNDED_VARIANT, TYPE_POINTER_DEPTH,\n+\tTYPE_AMBIENT_BOUNDEDNESS, MAX_POINTER_DEPT,\n+\tVA_LIST_POINTER_DEPTH): Remove.\n+\t(struct tree_type): Remove pointer_depth.\n+\n 2003-05-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* c-pretty-print.c (pp_c_integer_literal): Use\n@@ -137,6 +158,7 @@\n \t* doc/invoke.texi (Option Summary, PowerPC Options): Document\n \tnew options.\n \n+>>>>>>> 1.17889\n 2003-05-19  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* c-decl.c (finish_decl): When setting the DECL_ASSEMBLER_NAME"}, {"sha": "4f82b8f07035e14c90c90c8447873433a7af3df2", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66804d9eecb746c42d4daf50ae0565334ddcd03a/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66804d9eecb746c42d4daf50ae0565334ddcd03a/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=66804d9eecb746c42d4daf50ae0565334ddcd03a", "patch": "@@ -58,7 +58,7 @@ enum rid\n   RID_VOLATILE, RID_SIGNED,  RID_AUTO,  RID_RESTRICT,\n \n   /* C extensions */\n-  RID_BOUNDED, RID_UNBOUNDED, RID_COMPLEX, RID_THREAD,\n+  RID_COMPLEX, RID_THREAD,\n \n   /* C++ */\n   RID_FRIEND, RID_VIRTUAL, RID_EXPLICIT, RID_EXPORT, RID_MUTABLE,"}, {"sha": "62a54f65665f98521cce21483df2976fcf7172be", "filename": "gcc/c-parse.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66804d9eecb746c42d4daf50ae0565334ddcd03a/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66804d9eecb746c42d4daf50ae0565334ddcd03a/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=66804d9eecb746c42d4daf50ae0565334ddcd03a", "patch": "@@ -3325,8 +3325,6 @@ static const struct resword reswords[] =\n   { \"__asm__\",\t\tRID_ASM,\t0 },\n   { \"__attribute\",\tRID_ATTRIBUTE,\t0 },\n   { \"__attribute__\",\tRID_ATTRIBUTE,\t0 },\n-  { \"__bounded\",\tRID_BOUNDED,\t0 },\n-  { \"__bounded__\",\tRID_BOUNDED,\t0 },\n   { \"__builtin_choose_expr\", RID_CHOOSE_EXPR, 0 },\n   { \"__builtin_types_compatible_p\", RID_TYPES_COMPATIBLE_P, 0 },\n   { \"__builtin_va_arg\",\tRID_VA_ARG,\t0 },\n@@ -3356,8 +3354,6 @@ static const struct resword reswords[] =\n   { \"__thread\",\t\tRID_THREAD,\t0 },\n   { \"__typeof\",\t\tRID_TYPEOF,\t0 },\n   { \"__typeof__\",\tRID_TYPEOF,\t0 },\n-  { \"__unbounded\",\tRID_UNBOUNDED,\t0 },\n-  { \"__unbounded__\",\tRID_UNBOUNDED,\t0 },\n   { \"__volatile\",\tRID_VOLATILE,\t0 },\n   { \"__volatile__\",\tRID_VOLATILE,\t0 },\n   { \"asm\",\t\tRID_ASM,\tD_EXT },\n@@ -3446,8 +3442,6 @@ static const short rid_to_yy[RID_MAX] =\n   /* RID_RESTRICT */\tTYPE_QUAL,\n \n   /* C extensions */\n-  /* RID_BOUNDED */\tTYPE_QUAL,\n-  /* RID_UNBOUNDED */\tTYPE_QUAL,\n   /* RID_COMPLEX */\tTYPESPEC,\n   /* RID_THREAD */\tSCSPEC,\n "}, {"sha": "6ce305ea872f0c2712cc8da5ea57266279757953", "filename": "gcc/print-tree.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66804d9eecb746c42d4daf50ae0565334ddcd03a/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66804d9eecb746c42d4daf50ae0565334ddcd03a/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=66804d9eecb746c42d4daf50ae0565334ddcd03a", "patch": "@@ -494,9 +494,6 @@ print_node (file, prefix, node, indent)\n       else if (TREE_CODE (node) == ARRAY_TYPE\n \t       && TYPE_NONALIASED_COMPONENT (node))\n \tfputs (\" nonaliased-component\", file);\n-      else if (TREE_CODE (node) == FUNCTION_TYPE\n-\t       && TYPE_AMBIENT_BOUNDEDNESS (node))\n-\tfputs (\" ambient-boundedness\", file);\n \n       if (TYPE_PACKED (node))\n \tfputs (\" packed\", file);"}, {"sha": "2c5f2d92e1018101af6bf4d0ccdb6e131d33fa0a", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 189, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66804d9eecb746c42d4daf50ae0565334ddcd03a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66804d9eecb746c42d4daf50ae0565334ddcd03a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=66804d9eecb746c42d4daf50ae0565334ddcd03a", "patch": "@@ -145,8 +145,8 @@ struct tree_common GTY(())\n   unsigned public_flag : 1;\n   unsigned private_flag : 1;\n   unsigned protected_flag : 1;\n-  unsigned bounded_flag : 1;\n   unsigned deprecated_flag : 1;\n+  unsigned unused_1 : 1;\n \n   unsigned lang_flag_0 : 1;\n   unsigned lang_flag_1 : 1;\n@@ -155,7 +155,7 @@ struct tree_common GTY(())\n   unsigned lang_flag_4 : 1;\n   unsigned lang_flag_5 : 1;\n   unsigned lang_flag_6 : 1;\n-  unsigned unused_1 : 1;\n+  unsigned unused_2 : 1;\n };\n \n /* The following table lists the uses of each of the above flags and\n@@ -255,14 +255,6 @@ struct tree_common GTY(())\n        TREE_NOTHROW in\n            CALL_EXPR, FUNCTION_DECL\n \n-   bounded_flag:\n-\n-       TREE_BOUNDED in\n-\t   expressions, VAR_DECL, PARM_DECL, FIELD_DECL, FUNCTION_DECL,\n-\t   IDENTIFIER_NODE\n-       TYPE_BOUNDED in\n-\t   ..._TYPE\n-\n    deprecated_flag:\n \n \tTREE_DEPRECATED in\n@@ -471,56 +463,12 @@ extern void tree_operand_check_failed PARAMS ((int, enum tree_code,\n    || TREE_CODE (TYPE) == UNION_TYPE || TREE_CODE (TYPE) == QUAL_UNION_TYPE \\\n    || TREE_CODE (TYPE) == SET_TYPE)\n \n-/* Nonzero if TYPE represents an unbounded pointer or unbounded\n-   reference type.  (It should be renamed to INDIRECT_TYPE_P.)  */\n+/* Nonzero if TYPE represents a pointer or reference type.\n+   (It should be renamed to INDIRECT_TYPE_P.)  */\n \n #define POINTER_TYPE_P(TYPE) \\\n   (TREE_CODE (TYPE) == POINTER_TYPE || TREE_CODE (TYPE) == REFERENCE_TYPE)\n \n-/* Nonzero if TYPE represents a bounded pointer or bounded reference type.  */\n-\n-#define BOUNDED_INDIRECT_TYPE_P(TYPE) \\\n-  (TREE_CODE (TYPE) == RECORD_TYPE && TREE_TYPE (TYPE))\n-\n-/* Nonzero if TYPE represents a bounded pointer type.  */\n-\n-#define BOUNDED_POINTER_TYPE_P(TYPE) \\\n-  (BOUNDED_INDIRECT_TYPE_P (TYPE) \\\n-   && TREE_CODE (TYPE_BOUNDED_SUBTYPE (TYPE)) == POINTER_TYPE)\n-\n-/* Nonzero if TYPE represents a bounded reference type.  Bounded\n-   reference types have two specific uses: (1) When a reference is\n-   seated to a variable-length RECORD_TYPE that has an array of\n-   indeterminate length as its final field.  For all other objects, it\n-   is sufficient to check bounds at the time the reference is seated,\n-   and assume that all future uses of the reference are safe, since\n-   the address of references cannot change.  (2) When a reference\n-   supertype is seated to a subtype object.  The bounds \"remember\"\n-   the true size of the complete object, so that subsequent upcasts of\n-   the address of the reference will be checked properly (is such a\n-   thing valid C++?).  */\n-\n-#define BOUNDED_REFERENCE_TYPE_P(TYPE) \\\n-  (BOUNDED_INDIRECT_TYPE_P (TYPE) \\\n-   && TREE_CODE (TYPE_BOUNDED_SUBTYPE (TYPE)) == REFERENCE_TYPE)\n-\n-/* Nonzero if TYPE represents a pointer or reference type, either\n-   bounded or unbounded.  */\n-\n-#define MAYBE_BOUNDED_INDIRECT_TYPE_P(TYPE) \\\n-  (POINTER_TYPE_P (TYPE) || BOUNDED_INDIRECT_TYPE_P (TYPE))\n-\n-/* Nonzero if TYPE represents a pointer type, either bounded or unbounded.  */\n-\n-#define MAYBE_BOUNDED_POINTER_TYPE_P(TYPE) \\\n-  (TREE_CODE (TYPE) == POINTER_TYPE || BOUNDED_POINTER_TYPE_P (TYPE))\n-\n-/* Nonzero if TYPE represents a reference type, either bounded or\n-   unbounded.  */\n-\n-#define MAYBE_BOUNDED_REFERENCE_TYPE_P(TYPE) \\\n-  (TREE_CODE (TYPE) == REFERENCE_TYPE || BOUNDED_REFERENCE_TYPE_P (TYPE))\n-\n /* Nonzero if this type is a complete type.  */\n #define COMPLETE_TYPE_P(NODE) (TYPE_SIZE (NODE) != NULL_TREE)\n \n@@ -679,40 +627,6 @@ extern void tree_operand_check_failed PARAMS ((int, enum tree_code,\n    In a BLOCK node, this is BLOCK_HANDLER_BLOCK.  */\n #define TREE_PROTECTED(NODE) ((NODE)->common.protected_flag)\n \n-/* In a ..._TYPE node, nonzero means that the type's size and layout,\n-   (or the size and layout of its arguments and/or return value in the\n-   case of a FUNCTION_TYPE or METHOD_TYPE) was changed by the presence\n-   of pointer bounds.  Use TYPE_BOUNDED instead of this macro when the\n-   node is a type, because eventually we may make that a different\n-   bit.  TYPE_BOUNDED doesn't mean that this type is a bounded indirect\n-   type--use BOUNDED_POINTER_TYPE_P, BOUNDED_REFERENCE_TYPE_P,\n-   BOUNDED_INDIRECT_TYPE_P to test for that.\n-\n-   In a FUNCTION_DECL, nonzero means that the size and layout of one\n-   of its arguments and/or return value was changed by the presence of\n-   pointer bounds.  This value can differ from the value of\n-   TYPE_BOUNDED (TREE_TYPE (fundecl)) if the function was implicitly\n-   declared, then later called with pointer args, or was declared with\n-   a variable argument list and is later called with pointer values in\n-   the variable argument list.\n-\n-   In a VAR_DECL, PARM_DECL or FIELD_DECL, TREE_BOUNDED matches the value\n-   of the decl's type's BOUNDED_POINTER_TYPE_P.\n-\n-   In a CONSTRUCTOR or other expression, nonzero means the value is a\n-   bounded pointer.  It is insufficient to determine the boundedness\n-   of an expression EXP with BOUNDED_POINTER_TYPE_P (TREE_TYPE (EXP)),\n-   since we allow pointer to be temporarily cast to integer for\n-   rounding up to an alignment boundary in a way that preserves the\n-   pointer's bounds.\n-\n-   In an IDENTIFIER_NODE, nonzero means that the name is prefixed with\n-   BP_PREFIX (see varasm.c).  This occurs for the DECL_ASSEMBLER_NAME\n-   of a function that has bounded pointer(s) for its return type and/or\n-   argument type(s).  */\n-\n-#define TREE_BOUNDED(NODE) ((NODE)->common.bounded_flag)\n-\n /* Nonzero in an IDENTIFIER_NODE if the use of the name is defined as a\n    deprecated feature by __attribute__((deprecated)).  */\n #define TREE_DEPRECATED(NODE) ((NODE)->common.deprecated_flag)\n@@ -1023,26 +937,6 @@ struct tree_block GTY(())\n    structure containing an array.  */\n #define TYPE_DEBUG_REPRESENTATION_TYPE(NODE) (TYPE_CHECK (NODE)->type.values)\n \n-/* Indirect types present difficulties because they may be represented\n-   as either POINTER_TYPE/REFERENCE_TYPE nodes (unbounded) or as\n-   RECORD_TYPE nodes (bounded).  Bounded and unbounded pointers might\n-   be logically equivalent, but physically different.  Simple\n-   comparison of the main variant only tells if the types are\n-   logically equivalent.  Use this predicate to compare for physical\n-   equivalency.  */\n-\n-/* Types have the same main variant, and have the same boundedness.  */\n-#define TYPE_MAIN_VARIANTS_PHYSICALLY_EQUAL_P(TYPE1, TYPE2)\t\\\n-  (TYPE_MAIN_VARIANT (TYPE1) == TYPE_MAIN_VARIANT (TYPE2)\t\\\n-   && TREE_CODE (TYPE1) == TREE_CODE (TYPE2))\n-\n-/* Return the type variant that has no qualifiers (i.e., the main variant),\n-   except that the boundedness qualifier is preserved.  */\n-#define TYPE_MAIN_PHYSICAL_VARIANT(TYPE)\t\t\\\n-  (BOUNDED_POINTER_TYPE_P (TYPE)\t\t\t\\\n-   ? build_qualified_type (TYPE, TYPE_QUAL_BOUNDED)\t\\\n-   : TYPE_MAIN_VARIANT (TYPE))\n-\n /* For aggregate types, information about this type, as a base type\n    for itself.  Used in a language-dependent way for types that are\n    neither a RECORD_TYPE, QUAL_UNION_TYPE, nor a UNION_TYPE.  */\n@@ -1114,11 +1008,6 @@ struct tree_block GTY(())\n    the term.  */\n #define TYPE_RESTRICT(NODE) (TYPE_CHECK (NODE)->type.restrict_flag)\n \n-/* If nonzero, this type's size and layout, (or the size and layout of\n-   its arguments and/or return value in the case of a FUNCTION_TYPE or\n-   METHOD_TYPE) was changed by the presence of pointer bounds.  */\n-#define TYPE_BOUNDED(NODE) (TYPE_CHECK (NODE)->common.bounded_flag)\n-\n /* There is a TYPE_QUAL value for each type qualifier.  They can be\n    combined by bitwise-or to form the complete set of qualifiers for a\n    type.  */\n@@ -1127,25 +1016,12 @@ struct tree_block GTY(())\n #define TYPE_QUAL_CONST    0x1\n #define TYPE_QUAL_VOLATILE 0x2\n #define TYPE_QUAL_RESTRICT 0x4\n-#define TYPE_QUAL_BOUNDED  0x8\n \n /* The set of type qualifiers for this type.  */\n #define TYPE_QUALS(NODE)\t\t\t\t\t\\\n   ((TYPE_READONLY (NODE) * TYPE_QUAL_CONST)\t\t\t\\\n    | (TYPE_VOLATILE (NODE) * TYPE_QUAL_VOLATILE)\t\t\\\n-   | (TYPE_RESTRICT (NODE) * TYPE_QUAL_RESTRICT)\t\t\\\n-   | (BOUNDED_INDIRECT_TYPE_P (NODE) * TYPE_QUAL_BOUNDED))\n-\n-/* The set of qualifiers pertinent to an expression node.  */\n-#define TREE_EXPR_QUALS(NODE)\t\t\t\t\\\n-  ((TREE_READONLY (NODE) * TYPE_QUAL_CONST)\t\t\\\n-   | (TREE_THIS_VOLATILE (NODE) * TYPE_QUAL_VOLATILE)\t\\\n-   | (TREE_BOUNDED (NODE) * TYPE_QUAL_BOUNDED))\n-\n-/* The set of qualifiers pertinent to a FUNCTION_DECL node.  */\n-#define TREE_FUNC_QUALS(NODE)\t\t\t\t\\\n-  ((TREE_READONLY (NODE) * TYPE_QUAL_CONST)\t\t\\\n-   | (TREE_THIS_VOLATILE (NODE) * TYPE_QUAL_VOLATILE))\n+   | (TYPE_RESTRICT (NODE) * TYPE_QUAL_RESTRICT))\n \n /* These flags are available for each language front end to use internally.  */\n #define TYPE_LANG_FLAG_0(NODE) (TYPE_CHECK (NODE)->type.lang_flag_0)\n@@ -1190,65 +1066,6 @@ struct tree_block GTY(())\n    compact a way as possible.  */\n #define TYPE_PACKED(NODE) (TYPE_CHECK (NODE)->type.packed_flag)\n \n-/* A bounded pointer or bounded reference type (collectively called\n-   indirect types) is represented as a RECORD_TYPE node containing\n-   three pointer fields whose type is the corresponding unbounded\n-   POINTER_TYPE or REFERENCE_TYPE.  A RECORD_TYPE node that represents\n-   a bounded indirect type differs from a normal RECORD_TYPE node in\n-   that its TREE_TYPE is non-NULL and has the pointed-to type just as\n-   a POINTER_TYPE or REFERENCE_TYPE node has.  The bounded RECORD_TYPE\n-   nodes are stored on the same type variant chain alongside the\n-   variants of the underlaying indirect types nodes.  The main variant\n-   of such chains is always the unbounded type.  */\n-\n-/* Access the field decls of a bounded-pointer type.  */\n-#define TYPE_BOUNDED_VALUE(TYPE) TYPE_FIELDS (TYPE)\n-#define TYPE_BOUNDED_BASE(TYPE) TREE_CHAIN (TYPE_BOUNDED_VALUE (TYPE))\n-#define TYPE_BOUNDED_EXTENT(TYPE) TREE_CHAIN (TYPE_BOUNDED_BASE (TYPE))\n-\n-/* Access the simple-pointer subtype of a bounded-pointer type.  */\n-#define TYPE_BOUNDED_SUBTYPE(TYPE) TREE_TYPE (TYPE_BOUNDED_VALUE (TYPE))\n-\n-/* Find the unbounded counterpart to a type, or return TYPE if it is\n-   already unbounded.  */\n-#define TYPE_UNBOUNDED_VARIANT(TYPE) \\\n-  (BOUNDED_POINTER_TYPE_P (TYPE) ? TYPE_BOUNDED_SUBTYPE (TYPE) : (TYPE))\n-\n-/* This field comprises two bits, for values in the range 0..3:\n-\n-   depth=0 means that type is a scalar, or an aggregate that contains\n-   only depth=0 types, or a function that has only depth=0 types for\n-   its return value and argument types.\n-\n-   depth=1 means that type is a pointer to a depth=0 type, or an\n-   aggregate that contains only depth=0 and depth=1 types, or a\n-   function that has only depth=0 and depth=1 types for its return\n-   value and argument types.\n-\n-   The meanings of depth=2 and depth=3 are obvious by induction.\n-   Varargs functions are depth=3.  The type `va_list' is depth=3.\n-\n-   The purpose of measuring pointer depth of a type is to determine\n-   the eligibility of a function for an automatically-generated\n-   bounded-pointer thunk.  A depth=0 functions needs no thunk.  A\n-   depth=1 function is eligible for an automatic thunk.  Functions\n-   with depth 2 or more are too complex to get automatic thunks.\n-\n-   Function decls also have a pointer_depth field, since we also\n-   consider the actual argument types for functions.  */\n-\n-#define TYPE_POINTER_DEPTH(TYPE) (TYPE_CHECK (TYPE)->type.pointer_depth)\n-\n-/* In a FUNCTION_TYPE node, this bit stores the value of\n-   default_pointer_boundedness at the time TYPE was created.  It is\n-   useful for choosing default boundedness of function arguments for\n-   non-prototype function decls and for varargs/stdarg lists.  */\n-#define TYPE_AMBIENT_BOUNDEDNESS(TYPE) \\\n-  (FUNCTION_TYPE_CHECK (TYPE)->type.transparent_union_flag)\n-\n-#define MAX_POINTER_DEPTH 2\n-#define VA_LIST_POINTER_DEPTH 3\n-\n struct die_struct;\n \n struct tree_type GTY(())\n@@ -1269,7 +1086,7 @@ struct tree_type GTY(())\n   unsigned transparent_union_flag : 1;\n   unsigned packed_flag : 1;\n   unsigned restrict_flag : 1;\n-  unsigned pointer_depth : 2;\n+  unsigned spare : 2;\n \n   unsigned lang_flag_0 : 1;\n   unsigned lang_flag_1 : 1;"}, {"sha": "e51fcef15c0ab60aa02332873775edc63c3ec587", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66804d9eecb746c42d4daf50ae0565334ddcd03a/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66804d9eecb746c42d4daf50ae0565334ddcd03a/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=66804d9eecb746c42d4daf50ae0565334ddcd03a", "patch": "@@ -1,3 +1,7 @@\n+2003-05-21  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* treetree.c (reswords): Remove __bounded__, __unbounded__.\n+\t\n 2003-05-09  Tim Josling  <tej@melbpc.org.au>\n \n \t* Make-lang.in (TREE_BE_LIBS): Add C_TARGET_OBJS to object files"}, {"sha": "bd3c26c5141e47777a28cb7a778cbad02cc12fc1", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66804d9eecb746c42d4daf50ae0565334ddcd03a/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66804d9eecb746c42d4daf50ae0565334ddcd03a/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=66804d9eecb746c42d4daf50ae0565334ddcd03a", "patch": "@@ -1145,8 +1145,6 @@ static const struct resword reswords[] =\n   { \"__asm__\",\t\tRID_ASM,\t0 },\n   { \"__attribute\",\tRID_ATTRIBUTE,\t0 },\n   { \"__attribute__\",\tRID_ATTRIBUTE,\t0 },\n-  { \"__bounded\",\tRID_BOUNDED,\t0 },\n-  { \"__bounded__\",\tRID_BOUNDED,\t0 },\n   { \"__builtin_choose_expr\", RID_CHOOSE_EXPR, 0 },\n   { \"__builtin_types_compatible_p\", RID_TYPES_COMPATIBLE_P, 0 },\n   { \"__builtin_va_arg\",\tRID_VA_ARG,\t0 },\n@@ -1175,8 +1173,6 @@ static const struct resword reswords[] =\n   { \"__signed__\",\tRID_SIGNED,\t0 },\n   { \"__typeof\",\t\tRID_TYPEOF,\t0 },\n   { \"__typeof__\",\tRID_TYPEOF,\t0 },\n-  { \"__unbounded\",\tRID_UNBOUNDED,\t0 },\n-  { \"__unbounded__\",\tRID_UNBOUNDED,\t0 },\n   { \"__volatile\",\tRID_VOLATILE,\t0 },\n   { \"__volatile__\",\tRID_VOLATILE,\t0 },\n   { \"asm\",\t\tRID_ASM,\t0 },"}]}