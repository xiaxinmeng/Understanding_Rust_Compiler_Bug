{"sha": "cd8b4fae52d02541c2d8bd2200caad3812f37368", "node_id": "C_kwDOANBUbNoAKGNkOGI0ZmFlNTJkMDI1NDFjMmQ4YmQyMjAwY2FhZDM4MTJmMzczNjg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-20T21:07:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-20T21:07:57Z"}, "message": "powerpc: Another umaddditi4 fix [PR108862]\n\nThe following testcase is miscompiled on powerpc64le-linux with\n-O2 -mcpu=power9.  The problem is that gen_umaddditi4 is called with\nthe same TImode register for both op0 and op3, and maddlddi4\noverwrites the low half of op0 before the low half of op3 is read,\nso when they are the same register it reads the result of maddlddi4.\n\nThe following patch fixes that by swapping maddlddi4 and\numadddi4_highpart{,_le} during expansion, as the latter writes into\na temporary pseudo and so can't change anything maddlddi4 depends on.\n\n2023-02-20  Jakub Jelinek  <jakub2redhat.com>\n\n\tPR target/108862\n\t* config/rs6000/rs6000.md (umaddditi4): Swap gen_maddlddi4 with\n\tgen_umadddi4_highpart{,_le}.\n\n\t* gcc.dg/pr108862.c: New test.\n\t* gcc.target/powerpc/pr108862.c: New test.", "tree": {"sha": "6642be63f116051dd941e66f25bba2b3d60bdf57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6642be63f116051dd941e66f25bba2b3d60bdf57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd8b4fae52d02541c2d8bd2200caad3812f37368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8b4fae52d02541c2d8bd2200caad3812f37368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd8b4fae52d02541c2d8bd2200caad3812f37368", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8b4fae52d02541c2d8bd2200caad3812f37368/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e86963813750ca0e457300d51926691ba24efb27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e86963813750ca0e457300d51926691ba24efb27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e86963813750ca0e457300d51926691ba24efb27"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "81bffb04ceb0c237feec10176acc972a444c7a38", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8b4fae52d02541c2d8bd2200caad3812f37368/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8b4fae52d02541c2d8bd2200caad3812f37368/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=cd8b4fae52d02541c2d8bd2200caad3812f37368", "patch": "@@ -3249,15 +3249,15 @@\n   rtx op3_hi = gen_rtx_SUBREG (DImode, operands[3], BYTES_BIG_ENDIAN ? 0 : 8);\n   rtx hi_temp = gen_reg_rtx (DImode);\n \n-  emit_insn (gen_maddlddi4 (op0_lo, operands[1], operands[2], op3_lo));\n-\n   if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_umadddi4_highpart (hi_temp, operands[1], operands[2],\n \t\t\t\t      op3_lo));\n   else\n     emit_insn (gen_umadddi4_highpart_le (hi_temp, operands[1], operands[2],\n \t\t\t\t\t op3_lo));\n \n+  emit_insn (gen_maddlddi4 (op0_lo, operands[1], operands[2], op3_lo));\n+\n   emit_insn (gen_adddi3 (op0_hi, hi_temp, op3_hi));\n \n   DONE;"}, {"sha": "065099e4d078f40d39783862bb70ea85a4415ddb", "filename": "gcc/testsuite/gcc.dg/pr108862.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8b4fae52d02541c2d8bd2200caad3812f37368/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108862.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8b4fae52d02541c2d8bd2200caad3812f37368/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108862.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108862.c?ref=cd8b4fae52d02541c2d8bd2200caad3812f37368", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/108862 */\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned long long a[2] = { 0x04a13945d898c296ULL, 0x0000100000000fffULL };\n+unsigned long long b[4] = { 0x04a13945d898c296ULL, 0, 0, 0x0000100000000fffULL };\n+\n+__attribute__((noipa)) unsigned __int128\n+foo (int x, unsigned long long *y, unsigned long long *z)\n+{\n+  unsigned __int128 w = 0;\n+  for (int i = 0; i < x; i++)\n+    w += (unsigned __int128)*y++ * (unsigned __int128)*z--;\n+  return w;\n+}\n+\n+int\n+main ()\n+{\n+  unsigned __int128 x = foo (1, &a[0], &a[1]);\n+  unsigned __int128 y = foo (2, &b[0], &b[3]);\n+  if ((unsigned long long) (x >> 64) != 0x0000004a13945dd3ULL\n+      || (unsigned long long) x != 0x9b1c8443b3909d6aULL\n+      || x != y)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "89bbb0806a36e74f5307ef7a3f62e7f66e4c1fb9", "filename": "gcc/testsuite/gcc.target/powerpc/pr108862.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8b4fae52d02541c2d8bd2200caad3812f37368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108862.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8b4fae52d02541c2d8bd2200caad3812f37368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108862.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108862.c?ref=cd8b4fae52d02541c2d8bd2200caad3812f37368", "patch": "@@ -0,0 +1,6 @@\n+/* PR target/108862 */\n+/* { dg-do run { target int128 } } */\n+/* { dg-require-effective-target p9vector_hw } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power9\" } */\n+\n+#include \"../../gcc.dg/pr108862.c\""}]}