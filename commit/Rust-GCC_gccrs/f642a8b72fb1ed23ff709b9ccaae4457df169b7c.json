{"sha": "f642a8b72fb1ed23ff709b9ccaae4457df169b7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY0MmE4YjcyZmIxZWQyM2ZmNzA5YjljY2FhZTQ0NTdkZjE2OWI3Yw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2014-09-29T16:00:58Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2014-09-29T16:00:58Z"}, "message": "msp430.c (msp430_expand_prologue): Return a CLOBBER rtx for naked functions.\n\n\t* config/msp430/msp430.c (msp430_expand_prologue): Return a\n\tCLOBBER rtx for naked functions.\n\t(msp430_expand_epilogue): Likewise.\n\t(msp430_use_f5_series_hwmult): Cache result.\n\t(use_32bit_hwmult): Cache result.\n\t(msp430_no_hwmult): New function.\n\t(msp430_output_labelref): Use it.\n\nFrom-SVN: r215683", "tree": {"sha": "278e03ee3ff0d5e042b59df8aa6069aa0e3a0393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/278e03ee3ff0d5e042b59df8aa6069aa0e3a0393"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f642a8b72fb1ed23ff709b9ccaae4457df169b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f642a8b72fb1ed23ff709b9ccaae4457df169b7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f642a8b72fb1ed23ff709b9ccaae4457df169b7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f642a8b72fb1ed23ff709b9ccaae4457df169b7c/comments", "author": null, "committer": null, "parents": [{"sha": "b2a1b26147843649f98f1c89884eaf9f18bb0e0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a1b26147843649f98f1c89884eaf9f18bb0e0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2a1b26147843649f98f1c89884eaf9f18bb0e0b"}], "stats": {"total": 164, "additions": 153, "deletions": 11}, "files": [{"sha": "3c820e942af49d5576efb72bfe192ac030f296db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f642a8b72fb1ed23ff709b9ccaae4457df169b7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f642a8b72fb1ed23ff709b9ccaae4457df169b7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f642a8b72fb1ed23ff709b9ccaae4457df169b7c", "patch": "@@ -1,3 +1,13 @@\n+2014-09-29  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/msp430/msp430.c (msp430_expand_prologue): Return a\n+\tCLOBBER rtx for naked functions.\n+\t(msp430_expand_epilogue): Likewise.\n+\t(msp430_use_f5_series_hwmult): Cache result.\n+\t(use_32bit_hwmult): Cache result.\n+\t(msp430_no_hwmult): New function.\n+\t(msp430_output_labelref): Use it.\n+\n 2014-09-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/63247\n@@ -10,8 +20,8 @@\n \t* config/pa/pa.c (pa_output_function_epilogue): Only update\n \tlast_address when a nonnote insn is found.\n \n-2014-09-26  Jan Hubicka  <hubicka@ucw.cz>\t\n-\t\n+2014-09-26  Jan Hubicka  <hubicka@ucw.cz>\n+\n \tPR ipa/60665\n \t* ipa-devirt.c (possible_polymorphic_call_targets): Silence clang warning.\n "}, {"sha": "3dec9aa03414f359489716ddf6640ec3fdf3fa6f", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 141, "deletions": 9, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f642a8b72fb1ed23ff709b9ccaae4457df169b7c/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f642a8b72fb1ed23ff709b9ccaae4457df169b7c/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=f642a8b72fb1ed23ff709b9ccaae4457df169b7c", "patch": "@@ -1494,7 +1494,12 @@ msp430_expand_prologue (void)\n   rtx p;\n \n   if (is_naked_func ())\n-    return;\n+    {\n+      /* We must generate some RTX as thread_prologue_and_epilogue_insns()\n+\t examines the output of the gen_prologue() function.  */\n+      emit_insn (gen_rtx_CLOBBER (VOIDmode, GEN_INT (0)));\n+      return;\n+    }\n \n   emit_insn (gen_prologue_start_marker ());\n \n@@ -1603,7 +1608,12 @@ msp430_expand_epilogue (int is_eh)\n   int helper_n = 0;\n \n   if (is_naked_func ())\n-    return;\n+    {\n+      /* We must generate some RTX as thread_prologue_and_epilogue_insns()\n+\t examines the output of the gen_epilogue() function.  */\n+      emit_insn (gen_rtx_CLOBBER (VOIDmode, GEN_INT (0)));\n+      return;\n+    }\n \n   if (cfun->machine->need_to_save [10])\n     {\n@@ -2030,20 +2040,50 @@ static const struct\n   { NULL, NULL }\n };\n \n-/* Returns true if the current MCU is an F5xxx series.  */\n+/* Returns true if the current MCU supports an F5xxx series\n+   hardware multiper.  */\n+\n bool\n msp430_use_f5_series_hwmult (void)\n {\n+  static const char * cached_match = NULL;\n+  static bool         cached_result;\n+\n   if (msp430_hwmult_type == F5SERIES)\n     return true;\n \n   if (target_mcu == NULL || msp430_hwmult_type != AUTO)\n     return false;\n \n-  return strncasecmp (target_mcu, \"msp430f5\", 8) == 0;\n+  if (target_mcu == cached_match)\n+    return cached_result;\n+\n+  cached_match = target_mcu;\n+\n+  if (strncasecmp (target_mcu, \"msp430f5\", 8) == 0)\n+    return cached_result = true;\n+\n+  static const char * known_f5_mult_mcus [] =\n+    {\n+      \"cc430f5123\",\t\"cc430f5125\",\t\"cc430f5133\",\n+      \"cc430f5135\",\t\"cc430f5137\",\t\"cc430f5143\",\n+      \"cc430f5145\",\t\"cc430f5147\",\t\"cc430f6125\",\n+      \"cc430f6126\",\t\"cc430f6127\",\t\"cc430f6135\",\n+      \"cc430f6137\",\t\"cc430f6143\",\t\"cc430f6145\",\n+      \"cc430f6147\",\t\"msp430bt5190\",\t\"msp430sl5438a\"\n+    };\n+  int i;\n+\n+  for (i = ARRAY_SIZE (known_f5_mult_mcus); i--;)\n+    if (strcasecmp (target_mcu, known_f5_mult_mcus[i]) == 0)\n+      return cached_result = true;\n+\n+  return cached_result = false;\n }\n \n-/* Returns true id the current MCU has a second generation 32-bit hardware multiplier.  */\n+/* Returns true if the current MCU has a second generation\n+   32-bit hardware multiplier.  */\n+\n static bool\n use_32bit_hwmult (void)\n {\n@@ -2056,6 +2096,8 @@ use_32bit_hwmult (void)\n       \"msp430f47186\",     \"msp430f47196\",     \"msp430f47167\",\n       \"msp430f47177\",     \"msp430f47187\",     \"msp430f47197\"\n     };\n+  static const char * cached_match = NULL;\n+  static bool         cached_result;\n   int i;\n \n   if (msp430_hwmult_type == LARGE)\n@@ -2064,15 +2106,105 @@ use_32bit_hwmult (void)\n   if (target_mcu == NULL || msp430_hwmult_type != AUTO)\n     return false;\n \n+  if (target_mcu == cached_match)\n+    return cached_result;\n+\n+  cached_match = target_mcu;\n   for (i = ARRAY_SIZE (known_32bit_mult_mcus); i--;)\n     if (strcasecmp (target_mcu, known_32bit_mult_mcus[i]) == 0)\n-      return true;\n+      return cached_result = true;\n \n-  return false;\n+  return cached_result = false;\n+}\n+\n+/* Returns true if the current MCU does not have a\n+   hardware multiplier of any kind.  */\n+\n+static bool\n+msp430_no_hwmult (void)\n+{\n+  static const char * known_nomult_mcus [] =\n+    {\n+      \"msp430c091\",\t\"msp430c092\",\t\"msp430c111\",\n+      \"msp430c1111\", \t\"msp430c112\", \t\"msp430c1121\",\n+      \"msp430c1331\", \t\"msp430c1351\", \t\"msp430c311s\",\n+      \"msp430c312\", \t\"msp430c313\", \t\"msp430c314\",\n+      \"msp430c315\", \t\"msp430c323\", \t\"msp430c325\",\n+      \"msp430c412\", \t\"msp430c413\", \t\"msp430e112\",\n+      \"msp430e313\", \t\"msp430e315\", \t\"msp430e325\",\n+      \"msp430f110\", \t\"msp430f1101\", \t\"msp430f1101a\",\n+      \"msp430f1111\", \t\"msp430f1111a\",\t\"msp430f112\",\n+      \"msp430f1121\", \t\"msp430f1121a\", \"msp430f1122\",\n+      \"msp430f1132\", \t\"msp430f122\", \t\"msp430f1222\",\n+      \"msp430f123\", \t\"msp430f1232\", \t\"msp430f133\",\n+      \"msp430f135\", \t\"msp430f155\", \t\"msp430f156\",\n+      \"msp430f157\", \t\"msp430f2001\", \t\"msp430f2002\",\n+      \"msp430f2003\", \t\"msp430f2011\", \t\"msp430f2012\",\n+      \"msp430f2013\", \t\"msp430f2101\", \t\"msp430f2111\",\n+      \"msp430f2112\", \t\"msp430f2121\", \t\"msp430f2122\",\n+      \"msp430f2131\", \t\"msp430f2132\", \t\"msp430f2232\",\n+      \"msp430f2234\", \t\"msp430f2252\", \t\"msp430f2254\",\n+      \"msp430f2272\", \t\"msp430f2274\", \t\"msp430f412\",\n+      \"msp430f413\", \t\"msp430f4132\", \t\"msp430f415\",\n+      \"msp430f4152\", \t\"msp430f417\", \t\"msp430f4250\",\n+      \"msp430f4260\", \t\"msp430f4270\", \t\"msp430f435\",\n+      \"msp430f4351\", \t\"msp430f436\", \t\"msp430f4361\",\n+      \"msp430f437\", \t\"msp430f4371\", \t\"msp430f438\",\n+      \"msp430f439\", \t\"msp430f477\", \t\"msp430f478\",\n+      \"msp430f479\", \t\"msp430fe423\", \t\"msp430fe4232\",\n+      \"msp430fe423a\",   \"msp430fe4242\",\t\"msp430fe425\",\n+      \"msp430fe4252\",   \"msp430fe425a\", \"msp430fe427\",\n+      \"msp430fe4272\",   \"msp430fe427a\", \"msp430fg4250\",\n+      \"msp430fg4260\",   \"msp430fg4270\", \"msp430fg437\",\n+      \"msp430fg438\", \t\"msp430fg439\", \t\"msp430fg477\",\n+      \"msp430fg478\", \t\"msp430fg479\",  \"msp430fr2032\",\n+      \"msp430fr2033\",\t\"msp430fr4131\",\t\"msp430fr4132\",\n+      \"msp430fr4133\",\t\"msp430fw423\",  \"msp430fw425\",\n+      \"msp430fw427\", \t\"msp430fw428\",  \"msp430fw429\",\n+      \"msp430g2001\", \t\"msp430g2101\",  \"msp430g2102\",\n+      \"msp430g2111\", \t\"msp430g2112\",  \"msp430g2113\",\n+      \"msp430g2121\", \t\"msp430g2131\",  \"msp430g2132\",\n+      \"msp430g2152\", \t\"msp430g2153\",  \"msp430g2201\",\n+      \"msp430g2202\", \t\"msp430g2203\",  \"msp430g2210\",\n+      \"msp430g2211\", \t\"msp430g2212\",  \"msp430g2213\",\n+      \"msp430g2221\", \t\"msp430g2230\",  \"msp430g2231\",\n+      \"msp430g2232\", \t\"msp430g2233\",  \"msp430g2252\",\n+      \"msp430g2253\", \t\"msp430g2302\",  \"msp430g2303\",\n+      \"msp430g2312\", \t\"msp430g2313\",  \"msp430g2332\",\n+      \"msp430g2333\", \t\"msp430g2352\",  \"msp430g2353\",\n+      \"msp430g2402\", \t\"msp430g2403\",  \"msp430g2412\",\n+      \"msp430g2413\", \t\"msp430g2432\",  \"msp430g2433\",\n+      \"msp430g2444\", \t\"msp430g2452\",  \"msp430g2453\",\n+      \"msp430g2513\", \t\"msp430g2533\",  \"msp430g2544\",\n+      \"msp430g2553\", \t\"msp430g2744\",  \"msp430g2755\",\n+      \"msp430g2855\", \t\"msp430g2955\",  \"msp430l092\",\n+      \"msp430p112\", \t\"msp430p313\",   \"msp430p315\",\n+      \"msp430p315s\", \t\"msp430p325\",   \"msp430tch5e\"\n+    };\n+  static const char * cached_match = NULL;\n+  static bool         cached_result;\n+  int i;\n+\n+  if (msp430_hwmult_type == NONE)\n+    return true;\n+\n+  if (target_mcu == NULL || msp430_hwmult_type != AUTO)\n+    return false;\n+\n+  if (target_mcu == cached_match)\n+    return cached_result;\n+\n+  cached_match = target_mcu;\n+  for (i = ARRAY_SIZE (known_nomult_mcus); i--;)\n+    if (strcasecmp (target_mcu, known_nomult_mcus[i]) == 0)\n+      return cached_result = true;\n+\n+  return cached_result = false;\n }\n \n /* This function does the same as the default, but it will replace GCC\n    function names with the MSPABI-specified ones.  */\n+\n void\n msp430_output_labelref (FILE *file, const char *name)\n {\n@@ -2093,7 +2225,7 @@ msp430_output_labelref (FILE *file, const char *name)\n \t{\n \t  if (msp430_use_f5_series_hwmult ())\n \t    name = \"__mulhi2_f5\";\n-\t  else\n+\t  else if (! msp430_no_hwmult ())\n \t    name = \"__mulhi2\";\n \t}\n       else if (strcmp (\"__mspabi_mpyl\", name) == 0)\n@@ -2102,7 +2234,7 @@ msp430_output_labelref (FILE *file, const char *name)\n \t    name = \"__mulsi2_f5\";\n \t  else if (use_32bit_hwmult ())\n \t    name = \"__mulsi2_hw32\";\n-\t  else\n+\t  else if (! msp430_no_hwmult ())\n \t    name = \"__mulsi2\";\n \t}\n     }"}]}