{"sha": "5cc6c41c2ee95585418a5820d34a4356b91dda18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNjNmM0MWMyZWU5NTU4NTQxOGE1ODIwZDM0YTQzNTZiOTFkZGExOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-09-26T10:55:34Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-09-26T10:55:34Z"}, "message": "Fix handling of -fsanitize-recover* options.\n\n\t* common.opt: Exclude SANITIZE_UNREACHABLE and SANITIZE_RETURN\n\tfrom default sanitize recover values.\n\t* doc/invoke.texi: Fix documentation related to -fsanitize=leak,\n\t-fsanitize=address, -fsanitize=thread and -fsanitize-recover.\n\t* flag-types.h: Replace couple of 1 << x to 1UL << x, make it\n\tconsistent.\n\t* opts.c (finish_options): Do a generic loop over options\n\tthat can be recovered.\n\t(parse_sanitizer_options): Exclude SANITIZE_UNREACHABLE and\n\tSANITIZE_RETURN.\n\t(common_handle_option): Likewise.\n\t* opts.h: Declare can_recover to sanitizer_opts_s.\n\t* c-c++-common/ubsan/sanitize-recover-1.c: New test.\n\t* c-c++-common/ubsan/sanitize-recover-2.c: New test.\n\t* c-c++-common/ubsan/sanitize-recover-3.c: New test.\n\t* c-c++-common/ubsan/sanitize-recover-4.c: New test.\n\t* c-c++-common/ubsan/sanitize-recover-5.c: New test.\n\t* c-c++-common/ubsan/sanitize-recover-6.c: New test.\n\t* c-c++-common/ubsan/sanitize-recover-7.c: New test.\n\t* c-c++-common/ubsan/sanitize-recover-8.c: New test.\n\t* c-c++-common/ubsan/sanitize-recover-9.c: New test.\n\nFrom-SVN: r240491", "tree": {"sha": "dfdcff0777887158eb50d49f939f910bd45980c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfdcff0777887158eb50d49f939f910bd45980c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cc6c41c2ee95585418a5820d34a4356b91dda18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc6c41c2ee95585418a5820d34a4356b91dda18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cc6c41c2ee95585418a5820d34a4356b91dda18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc6c41c2ee95585418a5820d34a4356b91dda18/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "759a6472610921efcc41de343332b86d197e123c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/759a6472610921efcc41de343332b86d197e123c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/759a6472610921efcc41de343332b86d197e123c"}], "stats": {"total": 215, "additions": 155, "deletions": 60}, "files": [{"sha": "a46910dfeef93e6a4794f1711f877818750bd220", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5cc6c41c2ee95585418a5820d34a4356b91dda18", "patch": "@@ -1,3 +1,18 @@\n+2016-09-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* common.opt: Exclude SANITIZE_UNREACHABLE and SANITIZE_RETURN\n+\tfrom default sanitize recover values.\n+\t* doc/invoke.texi: Fix documentation related to -fsanitize=leak,\n+\t-fsanitize=address, -fsanitize=thread and -fsanitize-recover.\n+\t* flag-types.h: Replace couple of 1 << x to 1UL << x, make it\n+\tconsistent.\n+\t* opts.c (finish_options): Do a generic loop over options\n+\tthat can be recovered.\n+\t(parse_sanitizer_options): Exclude SANITIZE_UNREACHABLE and\n+\tSANITIZE_RETURN.\n+\t(common_handle_option): Likewise.\n+\t* opts.h: Declare can_recover to sanitizer_opts_s.\n+\n 2016-09-26  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* target.def(elf_flags_numeric): Change documentation to"}, {"sha": "0e01577888d0910e1ad93dfe14674a8d5557f1a2", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=5cc6c41c2ee95585418a5820d34a4356b91dda18", "patch": "@@ -228,7 +228,7 @@ unsigned int flag_sanitize\n \n ; What sanitizers should recover from errors\n Variable\n-unsigned int flag_sanitize_recover = SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT | SANITIZE_KERNEL_ADDRESS\n+unsigned int flag_sanitize_recover = (SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT | SANITIZE_KERNEL_ADDRESS) & ~(SANITIZE_UNREACHABLE | SANITIZE_RETURN)\n \n fsanitize-coverage=trace-pc\n Common Report Var(flag_sanitize_coverage)"}, {"sha": "676746237e32be7d747a5f6c854376490e58e0d6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5cc6c41c2ee95585418a5820d34a4356b91dda18", "patch": "@@ -10255,6 +10255,7 @@ more details.  The run-time behavior can be influenced using the\n the available options are shown at startup of the instrumented program.  See\n @url{https://github.com/google/sanitizers/wiki/AddressSanitizerFlags#run-time-flags}\n for a list of supported options.\n+The option can't be combined with @option{-fsanitize=thread}.\n \n @item -fsanitize=kernel-address\n @opindex fsanitize=kernel-address\n@@ -10270,17 +10271,19 @@ details. The run-time behavior can be influenced using the @env{TSAN_OPTIONS}\n environment variable; see\n @url{https://github.com/google/sanitizers/wiki/ThreadSanitizerFlags} for a list of\n supported options.\n+The option can't be combined with @option{-fsanitize=address}\n+and/or @option{-fsanitize=leak}.\n \n @item -fsanitize=leak\n @opindex fsanitize=leak\n Enable LeakSanitizer, a memory leak detector.\n-This option only matters for linking of executables and if neither\n-@option{-fsanitize=address} nor @option{-fsanitize=thread} is used.  In that\n-case the executable is linked against a library that overrides @code{malloc}\n+This option only matters for linking of executables and\n+the executable is linked against a library that overrides @code{malloc}\n and other allocator functions.  See\n @uref{https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer} for more\n details.  The run-time behavior can be influenced using the\n @env{LSAN_OPTIONS} environment variable.\n+The option can't be combined with @option{-fsanitize=thread}.\n \n @item -fsanitize=undefined\n @opindex fsanitize=undefined\n@@ -10454,6 +10457,7 @@ and program then exits with a non-zero exit code.\n Currently this feature only works for @option{-fsanitize=undefined} (and its suboptions\n except for @option{-fsanitize=unreachable} and @option{-fsanitize=return}),\n @option{-fsanitize=float-cast-overflow}, @option{-fsanitize=float-divide-by-zero},\n+@option{-fsanitize=bounds-strict},\n @option{-fsanitize=kernel-address} and @option{-fsanitize=address}.\n For these sanitizers error recovery is turned on by default, except @option{-fsanitize=address},\n for which this feature is experimental.\n@@ -10470,12 +10474,12 @@ setting the @code{halt_on_error} flag in the corresponding environment variable.\n \n Syntax without explicit @var{opts} parameter is deprecated.  It is equivalent to\n @smallexample\n--fsanitize-recover=undefined,float-cast-overflow,float-divide-by-zero\n+-fsanitize-recover=undefined,float-cast-overflow,float-divide-by-zero,bounds-strict\n @end smallexample\n @noindent\n Similarly @option{-fno-sanitize-recover} is equivalent to\n @smallexample\n--fno-sanitize-recover=undefined,float-cast-overflow,float-divide-by-zero\n+-fno-sanitize-recover=undefined,float-cast-overflow,float-divide-by-zero,bounds-strict\n @end smallexample\n \n @item -fsanitize-undefined-trap-on-error"}, {"sha": "816df6b4ad987752029eab6f418ca4e3bd52e6a3", "filename": "gcc/flag-types.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=5cc6c41c2ee95585418a5820d34a4356b91dda18", "patch": "@@ -203,25 +203,25 @@ enum vect_cost_model {\n /* Different instrumentation modes.  */\n enum sanitize_code {\n   /* AddressSanitizer.  */\n-  SANITIZE_ADDRESS = 1 << 0,\n-  SANITIZE_USER_ADDRESS = 1 << 1,\n-  SANITIZE_KERNEL_ADDRESS = 1 << 2,\n+  SANITIZE_ADDRESS = 1UL << 0,\n+  SANITIZE_USER_ADDRESS = 1UL << 1,\n+  SANITIZE_KERNEL_ADDRESS = 1UL << 2,\n   /* ThreadSanitizer.  */\n-  SANITIZE_THREAD = 1 << 3,\n+  SANITIZE_THREAD = 1UL << 3,\n   /* LeakSanitizer.  */\n-  SANITIZE_LEAK = 1 << 4,\n+  SANITIZE_LEAK = 1UL << 4,\n   /* UndefinedBehaviorSanitizer.  */\n-  SANITIZE_SHIFT = 1 << 5,\n-  SANITIZE_DIVIDE = 1 << 6,\n-  SANITIZE_UNREACHABLE = 1 << 7,\n-  SANITIZE_VLA = 1 << 8,\n-  SANITIZE_NULL = 1 << 9,\n-  SANITIZE_RETURN = 1 << 10,\n-  SANITIZE_SI_OVERFLOW = 1 << 11,\n-  SANITIZE_BOOL = 1 << 12,\n-  SANITIZE_ENUM = 1 << 13,\n-  SANITIZE_FLOAT_DIVIDE = 1 << 14,\n-  SANITIZE_FLOAT_CAST = 1 << 15,\n+  SANITIZE_SHIFT = 1UL << 5,\n+  SANITIZE_DIVIDE = 1UL << 6,\n+  SANITIZE_UNREACHABLE = 1UL << 7,\n+  SANITIZE_VLA = 1UL << 8,\n+  SANITIZE_NULL = 1UL << 9,\n+  SANITIZE_RETURN = 1UL << 10,\n+  SANITIZE_SI_OVERFLOW = 1UL << 11,\n+  SANITIZE_BOOL = 1UL << 12,\n+  SANITIZE_ENUM = 1UL << 13,\n+  SANITIZE_FLOAT_DIVIDE = 1UL << 14,\n+  SANITIZE_FLOAT_CAST = 1UL << 15,\n   SANITIZE_BOUNDS = 1UL << 16,\n   SANITIZE_ALIGNMENT = 1UL << 17,\n   SANITIZE_NONNULL_ATTRIBUTE = 1UL << 18,"}, {"sha": "45f1f89cd16cbc1fc061e50f62fc8a1cffca5075", "filename": "gcc/opts.c", "status": "modified", "additions": 53, "deletions": 38, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=5cc6c41c2ee95585418a5820d34a4356b91dda18", "patch": "@@ -941,28 +941,30 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n     opts->x_debug_generate_pub_sections = 2;\n \n   /* Userspace and kernel ASan conflict with each other.  */\n-\n   if ((opts->x_flag_sanitize & SANITIZE_USER_ADDRESS)\n       && (opts->x_flag_sanitize & SANITIZE_KERNEL_ADDRESS))\n     error_at (loc,\n \t      \"-fsanitize=address is incompatible with \"\n \t      \"-fsanitize=kernel-address\");\n \n   /* And with TSan.  */\n-\n   if ((opts->x_flag_sanitize & SANITIZE_ADDRESS)\n       && (opts->x_flag_sanitize & SANITIZE_THREAD))\n     error_at (loc,\n \t      \"-fsanitize=address and -fsanitize=kernel-address \"\n \t      \"are incompatible with -fsanitize=thread\");\n \n-  /* Error recovery is not allowed for LSan and TSan.  */\n-\n-  if (opts->x_flag_sanitize_recover & SANITIZE_THREAD)\n-    error_at (loc, \"-fsanitize-recover=thread is not supported\");\n+  if ((opts->x_flag_sanitize & SANITIZE_LEAK)\n+      && (opts->x_flag_sanitize & SANITIZE_THREAD))\n+    error_at (loc,\n+\t      \"-fsanitize=leak is incompatible with -fsanitize=thread\");\n \n-  if (opts->x_flag_sanitize_recover & SANITIZE_LEAK)\n-    error_at (loc, \"-fsanitize-recover=leak is not supported\");\n+  /* Check error recovery for -fsanitize-recover option.  */\n+  for (int i = 0; sanitizer_opts[i].name != NULL; ++i)\n+    if ((opts->x_flag_sanitize_recover & sanitizer_opts[i].flag)\n+\t&& !sanitizer_opts[i].can_recover)\n+      error_at (loc, \"-fsanitize-recover=%s is not supported\",\n+\t\tsanitizer_opts[i].name);\n \n   /* When instrumenting the pointers, we don't want to remove\n      the null pointer checks.  */\n@@ -1448,33 +1450,36 @@ enable_fdo_optimizations (struct gcc_options *opts,\n /* -f{,no-}sanitize{,-recover}= suboptions.  */\n const struct sanitizer_opts_s sanitizer_opts[] =\n {\n-#define SANITIZER_OPT(name, flags) { #name, flags, sizeof #name - 1 }\n-  SANITIZER_OPT (address, SANITIZE_ADDRESS | SANITIZE_USER_ADDRESS),\n-  SANITIZER_OPT (kernel-address, SANITIZE_ADDRESS | SANITIZE_KERNEL_ADDRESS),\n-  SANITIZER_OPT (thread, SANITIZE_THREAD),\n-  SANITIZER_OPT (leak, SANITIZE_LEAK),\n-  SANITIZER_OPT (shift, SANITIZE_SHIFT),\n-  SANITIZER_OPT (integer-divide-by-zero, SANITIZE_DIVIDE),\n-  SANITIZER_OPT (undefined, SANITIZE_UNDEFINED),\n-  SANITIZER_OPT (unreachable, SANITIZE_UNREACHABLE),\n-  SANITIZER_OPT (vla-bound, SANITIZE_VLA),\n-  SANITIZER_OPT (return, SANITIZE_RETURN),\n-  SANITIZER_OPT (null, SANITIZE_NULL),\n-  SANITIZER_OPT (signed-integer-overflow, SANITIZE_SI_OVERFLOW),\n-  SANITIZER_OPT (bool, SANITIZE_BOOL),\n-  SANITIZER_OPT (enum, SANITIZE_ENUM),\n-  SANITIZER_OPT (float-divide-by-zero, SANITIZE_FLOAT_DIVIDE),\n-  SANITIZER_OPT (float-cast-overflow, SANITIZE_FLOAT_CAST),\n-  SANITIZER_OPT (bounds, SANITIZE_BOUNDS),\n-  SANITIZER_OPT (bounds-strict, SANITIZE_BOUNDS | SANITIZE_BOUNDS_STRICT),\n-  SANITIZER_OPT (alignment, SANITIZE_ALIGNMENT),\n-  SANITIZER_OPT (nonnull-attribute, SANITIZE_NONNULL_ATTRIBUTE),\n-  SANITIZER_OPT (returns-nonnull-attribute, SANITIZE_RETURNS_NONNULL_ATTRIBUTE),\n-  SANITIZER_OPT (object-size, SANITIZE_OBJECT_SIZE),\n-  SANITIZER_OPT (vptr, SANITIZE_VPTR),\n-  SANITIZER_OPT (all, ~0U),\n+#define SANITIZER_OPT(name, flags, recover) \\\n+    { #name, flags, sizeof #name - 1, recover }\n+  SANITIZER_OPT (address, SANITIZE_ADDRESS | SANITIZE_USER_ADDRESS, true),\n+  SANITIZER_OPT (kernel-address, SANITIZE_ADDRESS | SANITIZE_KERNEL_ADDRESS,\n+\t\t true),\n+  SANITIZER_OPT (thread, SANITIZE_THREAD, false),\n+  SANITIZER_OPT (leak, SANITIZE_LEAK, false),\n+  SANITIZER_OPT (shift, SANITIZE_SHIFT, true),\n+  SANITIZER_OPT (integer-divide-by-zero, SANITIZE_DIVIDE, true),\n+  SANITIZER_OPT (undefined, SANITIZE_UNDEFINED, true),\n+  SANITIZER_OPT (unreachable, SANITIZE_UNREACHABLE, false),\n+  SANITIZER_OPT (vla-bound, SANITIZE_VLA, true),\n+  SANITIZER_OPT (return, SANITIZE_RETURN, false),\n+  SANITIZER_OPT (null, SANITIZE_NULL, true),\n+  SANITIZER_OPT (signed-integer-overflow, SANITIZE_SI_OVERFLOW, true),\n+  SANITIZER_OPT (bool, SANITIZE_BOOL, true),\n+  SANITIZER_OPT (enum, SANITIZE_ENUM, true),\n+  SANITIZER_OPT (float-divide-by-zero, SANITIZE_FLOAT_DIVIDE, true),\n+  SANITIZER_OPT (float-cast-overflow, SANITIZE_FLOAT_CAST, true),\n+  SANITIZER_OPT (bounds, SANITIZE_BOUNDS, true),\n+  SANITIZER_OPT (bounds-strict, SANITIZE_BOUNDS | SANITIZE_BOUNDS_STRICT, true),\n+  SANITIZER_OPT (alignment, SANITIZE_ALIGNMENT, true),\n+  SANITIZER_OPT (nonnull-attribute, SANITIZE_NONNULL_ATTRIBUTE, true),\n+  SANITIZER_OPT (returns-nonnull-attribute, SANITIZE_RETURNS_NONNULL_ATTRIBUTE,\n+\t\t true),\n+  SANITIZER_OPT (object-size, SANITIZE_OBJECT_SIZE, true),\n+  SANITIZER_OPT (vptr, SANITIZE_VPTR, true),\n+  SANITIZER_OPT (all, ~0U, true),\n #undef SANITIZER_OPT\n-  { NULL, 0U, 0UL }\n+  { NULL, 0U, 0UL, false }\n };\n \n /* Parse comma separated sanitizer suboptions from P for option SCODE,\n@@ -1516,11 +1521,20 @@ parse_sanitizer_options (const char *p, location_t loc, int scode,\n \t\t      error_at (loc, \"-fsanitize=all option is not valid\");\n \t\t  }\n \t\telse\n-\t\t  flags |= ~(SANITIZE_USER_ADDRESS | SANITIZE_THREAD\n-\t\t\t     | SANITIZE_LEAK);\n+\t\t  flags |= ~(SANITIZE_THREAD | SANITIZE_LEAK\n+\t\t\t     | SANITIZE_UNREACHABLE | SANITIZE_RETURN);\n \t      }\n \t    else if (value)\n-\t      flags |= sanitizer_opts[i].flag;\n+\t      {\n+\t\t/* Do not enable -fsanitize-recover=unreachable and\n+\t\t   -fsanitize-recover=return if -fsanitize-recover=undefined\n+\t\t   is selected.  */\n+\t\tif (sanitizer_opts[i].flag == SANITIZE_UNDEFINED)\n+\t\t  flags |= (SANITIZE_UNDEFINED\n+\t\t\t    & ~(SANITIZE_UNREACHABLE | SANITIZE_RETURN));\n+\t\telse\n+\t\t  flags |= sanitizer_opts[i].flag;\n+\t      }\n \t    else\n \t      flags &= ~sanitizer_opts[i].flag;\n \t    found = true;\n@@ -1770,7 +1784,8 @@ common_handle_option (struct gcc_options *opts,\n     case OPT_fsanitize_recover:\n       if (value)\n \topts->x_flag_sanitize_recover\n-\t  |= SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT;\n+\t  |= (SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT)\n+\t     & ~(SANITIZE_UNREACHABLE | SANITIZE_RETURN);\n       else\n \topts->x_flag_sanitize_recover\n \t  &= ~(SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT);"}, {"sha": "b3e64353c8afcf4d1f16bd2702d70f2557296560", "filename": "gcc/opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=5cc6c41c2ee95585418a5820d34a4356b91dda18", "patch": "@@ -414,6 +414,7 @@ extern const struct sanitizer_opts_s\n   const char *const name;\n   unsigned int flag;\n   size_t len;\n+  bool can_recover;\n } sanitizer_opts[];\n \n extern void add_misspelling_candidates (auto_vec<char *> *candidates,"}, {"sha": "f8567e1a53cef0e21bd8a9a7f91dc896090a9980", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5cc6c41c2ee95585418a5820d34a4356b91dda18", "patch": "@@ -1,3 +1,15 @@\n+2016-09-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-c++-common/ubsan/sanitize-recover-1.c: New test.\n+\t* c-c++-common/ubsan/sanitize-recover-2.c: New test.\n+\t* c-c++-common/ubsan/sanitize-recover-3.c: New test.\n+\t* c-c++-common/ubsan/sanitize-recover-4.c: New test.\n+\t* c-c++-common/ubsan/sanitize-recover-5.c: New test.\n+\t* c-c++-common/ubsan/sanitize-recover-6.c: New test.\n+\t* c-c++-common/ubsan/sanitize-recover-7.c: New test.\n+\t* c-c++-common/ubsan/sanitize-recover-8.c: New test.\n+\t* c-c++-common/ubsan/sanitize-recover-9.c: New test.\n+\n 2016-09-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/7652"}, {"sha": "4d8c27e945a4a3ceead5e5588d5a255c3f4c6cff", "filename": "gcc/testsuite/c-c++-common/ubsan/sanitize-recover-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-1.c?ref=5cc6c41c2ee95585418a5820d34a4356b91dda18", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize-recover=unreachable\" } */\n+\n+int i;\n+\n+/* { dg-error \"-fsanitize-recover=unreachable is not supported\" \"\" { target *-*-* } 0 } */"}, {"sha": "e9849bd50ab963b8b72f7c8eaa8f4a9324e76eff", "filename": "gcc/testsuite/c-c++-common/ubsan/sanitize-recover-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-2.c?ref=5cc6c41c2ee95585418a5820d34a4356b91dda18", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize-recover=return\" } */\n+\n+int i;\n+\n+/* { dg-error \"-fsanitize-recover=return is not supported\" \"\" { target *-*-* } 0 } */"}, {"sha": "844f3fde0186fc1911f3a813672544cdd1eae896", "filename": "gcc/testsuite/c-c++-common/ubsan/sanitize-recover-3.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-3.c?ref=5cc6c41c2ee95585418a5820d34a4356b91dda18", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize-recover=all\" } */\n+\n+int i;"}, {"sha": "45fa5b9a00f11a54d7102771d32d35bc48db4ed7", "filename": "gcc/testsuite/c-c++-common/ubsan/sanitize-recover-4.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-4.c?ref=5cc6c41c2ee95585418a5820d34a4356b91dda18", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize-recover=undefined\" } */\n+\n+int i;"}, {"sha": "9c1ed322d5e7a77ea828d263105e9ff2474bf43e", "filename": "gcc/testsuite/c-c++-common/ubsan/sanitize-recover-5.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-5.c?ref=5cc6c41c2ee95585418a5820d34a4356b91dda18", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize-recover=undefined,unreachable\" } */\n+\n+int i;\n+\n+/* { dg-error \"-fsanitize-recover=unreachable is not supported\" \"\" { target *-*-* } 0 } */"}, {"sha": "e309e1b71c04d25e8a9878853e5f7b8c83125770", "filename": "gcc/testsuite/c-c++-common/ubsan/sanitize-recover-6.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-6.c?ref=5cc6c41c2ee95585418a5820d34a4356b91dda18", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize-recover=undefined,unreachable -fno-sanitize-recover=unreachable\" } */\n+\n+int i;"}, {"sha": "2e6599fe312683cda04caa78b0f73b10c13d643b", "filename": "gcc/testsuite/c-c++-common/ubsan/sanitize-recover-7.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-7.c?ref=5cc6c41c2ee95585418a5820d34a4356b91dda18", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=address -fsanitize=thread\" } */\n+\n+int i;\n+\n+/* { dg-error \"-fsanitize=address and -fsanitize=kernel-address are incompatible with -fsanitize=thread\" \"\" { target *-*-* } 0 } */"}, {"sha": "ecaf0e648af566c36d77cf374b9b033b8292a354", "filename": "gcc/testsuite/c-c++-common/ubsan/sanitize-recover-8.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-8.c?ref=5cc6c41c2ee95585418a5820d34a4356b91dda18", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=leak -fsanitize=thread\" } */\n+\n+int i;\n+\n+/* { dg-error \"-fsanitize=leak is incompatible with -fsanitize=thread\" \"\" { target *-*-* } 0 } */"}, {"sha": "ef80ef1e27d3f9d322d4208fb06378953dac65a9", "filename": "gcc/testsuite/c-c++-common/ubsan/sanitize-recover-9.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc6c41c2ee95585418a5820d34a4356b91dda18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-9.c?ref=5cc6c41c2ee95585418a5820d34a4356b91dda18", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize-recover=unreachable -fsanitize-recover=undefined\" } */\n+\n+int i;\n+\n+/* { dg-error \"-fsanitize-recover=unreachable is not supported\" \"\" { target *-*-* } 0 } */"}]}