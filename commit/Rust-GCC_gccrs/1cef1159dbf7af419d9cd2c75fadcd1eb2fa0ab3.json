{"sha": "1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNlZjExNTlkYmY3YWY0MTlkOWNkMmM3NWZhZGNkMWViMmZhMGFiMw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2017-10-26T20:52:15Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2017-10-26T20:52:15Z"}, "message": "constraints.md (\"S\"): Match r0rel_constant_p too.\n\n2017-10-26  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* config/nios2/constraints.md (\"S\"): Match r0rel_constant_p too.\n\t* config/nios2/nios2-protos.h (r0rel_constant_p): Declare.\n\t* config/nios2/nios2.c: (nios2_r0rel_sec_regex): New.\n\t(nios2_option_overide): Initialize it.  Don't allow R0-relative \n\taddressing with PIC.\n\t(nios2_rtx_costs): Handle r0rel_constant_p like gprel_constant_p.\n\t(nios2_symbolic_constant_p): Likewise.\n\t(nios2_legitimate_address_p): Likewise.\n\t(nios2_r0rel_section_name_p): New.\n\t(nios2_symbol_ref_in_r0rel_data_p): New.\n\t(nios2_emit_move_sequence): Handle r0rel_constant_p.\n\t(r0rel_constant_p): New.\n\t(nios2_print_operand_address): Handle r0rel_constant_p.\n\t(nios2_cdx_narrow_form_p): Likewise.\n\t* config/nios2/nios2.opt (mr0rel-sec=): New option.\n\t* doc/invoke.texi (Option Summary): Add -mr0rel-sec.\n\t(Nios II Options): Document -mr0rel-sec.\n\n\tgcc/testsuite/\n\t* gcc.target/nios2/gpopt-r0rel-sec.c: New.\n\nFrom-SVN: r254124", "tree": {"sha": "d2726881bdf0330440f81ea13446ea52d87de4b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2726881bdf0330440f81ea13446ea52d87de4b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de10fca02a806c8c323041c5e904abaaef510fc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de10fca02a806c8c323041c5e904abaaef510fc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de10fca02a806c8c323041c5e904abaaef510fc0"}], "stats": {"total": 183, "additions": 165, "deletions": 18}, "files": [{"sha": "558ec9bf7f270a5d5522decc18b493484500dfb6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3", "patch": "@@ -1,3 +1,23 @@\n+2017-10-26  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* config/nios2/constraints.md (\"S\"): Match r0rel_constant_p too.\n+\t* config/nios2/nios2-protos.h (r0rel_constant_p): Declare.\n+\t* config/nios2/nios2.c: (nios2_r0rel_sec_regex): New.\n+\t(nios2_option_overide): Initialize it.  Don't allow R0-relative \n+\taddressing with PIC.\n+\t(nios2_rtx_costs): Handle r0rel_constant_p like gprel_constant_p.\n+\t(nios2_symbolic_constant_p): Likewise.\n+\t(nios2_legitimate_address_p): Likewise.\n+\t(nios2_r0rel_section_name_p): New.\n+\t(nios2_symbol_ref_in_r0rel_data_p): New.\n+\t(nios2_emit_move_sequence): Handle r0rel_constant_p.\n+\t(r0rel_constant_p): New.\n+\t(nios2_print_operand_address): Handle r0rel_constant_p.\n+\t(nios2_cdx_narrow_form_p): Likewise.\n+\t* config/nios2/nios2.opt (mr0rel-sec=): New option.\n+\t* doc/invoke.texi (Option Summary): Add -mr0rel-sec.\n+\t(Nios II Options): Document -mr0rel-sec.\n+\n 2017-10-26  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* config/nios2/nios2.c: Include xregex.h."}, {"sha": "51f71cf742eb119ba36cecfeab2ca210e84e802a", "filename": "gcc/config/nios2/constraints.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/gcc%2Fconfig%2Fnios2%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/gcc%2Fconfig%2Fnios2%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fconstraints.md?ref=1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3", "patch": "@@ -95,8 +95,8 @@\n        (match_test \"TARGET_ARCH_R2 && ANDCLEAR_INT (ival)\")))\n \n (define_constraint \"S\"\n-  \"An immediate stored in small data, accessible by GP.\"\n-  (match_test \"gprel_constant_p (op)\"))\n+  \"An immediate stored in small data, accessible by GP, or by offset from r0.\"\n+  (match_test \"gprel_constant_p (op) || r0rel_constant_p (op)\"))\n \n (define_constraint \"T\"\n   \"A constant unspec offset representing a relocation.\""}, {"sha": "84d450bfe94683ea97210551d26c2f65697c69b8", "filename": "gcc/config/nios2/nios2-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/gcc%2Fconfig%2Fnios2%2Fnios2-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/gcc%2Fconfig%2Fnios2%2Fnios2-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2-protos.h?ref=1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3", "patch": "@@ -52,6 +52,7 @@ extern const char * nios2_add_insn_asm (rtx_insn *, rtx *);\n \n extern bool nios2_legitimate_pic_operand_p (rtx);\n extern bool gprel_constant_p (rtx);\n+extern bool r0rel_constant_p (rtx);\n extern bool nios2_regno_ok_for_base_p (int, bool);\n extern bool nios2_unspec_reloc_p (rtx);\n "}, {"sha": "cdd5e9aab658cefa32eafc8142de8d5ad0f4f8fa", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 80, "deletions": 14, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3", "patch": "@@ -106,6 +106,7 @@ static bool custom_code_conflict = false;\n \n /* State for command-line options.  */\n regex_t nios2_gprel_sec_regex;\n+regex_t nios2_r0rel_sec_regex;\n \n \f\n /* Definition of builtin function types for nios2.  */\n@@ -1375,22 +1376,30 @@ nios2_option_override (void)\n \tnios2_gpopt_option = gpopt_local;\n     }\n \n-  /* GP-relative addressing doesn't make sense for PIC.  */\n+  /* GP-relative and r0-relative addressing don't make sense for PIC.  */\n   if (flag_pic)\n-    { \n+    {\n       if (nios2_gpopt_option != gpopt_none)\n-        error (\"-mgpopt not supported with PIC.\");\n+\terror (\"-mgpopt not supported with PIC.\");\n       if (nios2_gprel_sec)\n-        error (\"-mgprel-sec= not supported with PIC.\");\n+\terror (\"-mgprel-sec= not supported with PIC.\");\n+      if (nios2_r0rel_sec)\n+\terror (\"-mr0rel-sec= not supported with PIC.\");\n     }\n \n-  /* Process -mgprel-sec=.  */\n+  /* Process -mgprel-sec= and -m0rel-sec=.  */\n   if (nios2_gprel_sec)\n     {\n       if (regcomp (&nios2_gprel_sec_regex, nios2_gprel_sec, \n \t\t   REG_EXTENDED | REG_NOSUB))\n \terror (\"-mgprel-sec= argument is not a valid regular expression.\");\n     }\n+  if (nios2_r0rel_sec)\n+    {\n+      if (regcomp (&nios2_r0rel_sec_regex, nios2_r0rel_sec, \n+\t\t   REG_EXTENDED | REG_NOSUB))\n+\terror (\"-mr0rel-sec= argument is not a valid regular expression.\");\n+    }\n \n   /* If we don't have mul, we don't have mulx either!  */\n   if (!TARGET_HAS_MUL && TARGET_HAS_MULX)\n@@ -1478,7 +1487,7 @@ nios2_rtx_costs (rtx x, machine_mode mode,\n       case SYMBOL_REF:\n       case CONST:\n       case CONST_DOUBLE:\n-\tif (gprel_constant_p (x))\n+\tif (gprel_constant_p (x) || r0rel_constant_p (x))\n           {\n             *total = COSTS_N_INSNS (1);\n             return true;\n@@ -2028,6 +2037,7 @@ nios2_symbolic_constant_p (rtx x)\n       return (SYMBOL_REF_P (base)\n \t\t&& !SYMBOL_REF_TLS_MODEL (base)\n \t\t&& !gprel_constant_p (base)\n+\t\t&& !r0rel_constant_p (base)\n \t\t&& SMALL_INT (INTVAL (offset)));\n     }\n   return false;\n@@ -2129,7 +2139,7 @@ nios2_legitimate_address_p (machine_mode mode ATTRIBUTE_UNUSED,\n \n       /* Else, fall through.  */\n     case CONST:\n-      if (gprel_constant_p (operand))\n+      if (gprel_constant_p (operand) || r0rel_constant_p (operand))\n \treturn true;\n \n       /* Else, fall through.  */\n@@ -2294,6 +2304,14 @@ nios2_small_section_name_p (const char *section)\n \t      && regexec (&nios2_gprel_sec_regex, section, 0, NULL, 0) == 0));\n }\n \n+/* Return true if SECTION is a r0-relative section name.  */\n+static bool\n+nios2_r0rel_section_name_p (const char *section)\n+{\n+  return (nios2_r0rel_sec \n+\t  && regexec (&nios2_r0rel_sec_regex, section, 0, NULL, 0) == 0);\n+}\n+\n /* Return true if EXP should be placed in the small data section.  */\n static bool\n nios2_in_small_data_p (const_tree exp)\n@@ -2400,6 +2418,33 @@ nios2_symbol_ref_in_small_data_p (rtx sym)\n     }\n }\n \n+/* Likewise for r0-relative addressing.  */\n+static bool\n+nios2_symbol_ref_in_r0rel_data_p (rtx sym)\n+{\n+  tree decl;\n+\n+  gcc_assert (GET_CODE (sym) == SYMBOL_REF);\n+  decl = SYMBOL_REF_DECL (sym);\n+\n+  /* TLS variables are not accessed through r0.  */\n+  if (SYMBOL_REF_TLS_MODEL (sym) != 0)\n+    return false;\n+\n+  /* On Nios II R2, there is no r0-relative relocation that can be\n+     used with \"io\" instructions.  So, if we are implicitly generating\n+     those instructions, we cannot emit r0-relative accesses.  */\n+  if (TARGET_ARCH_R2\n+      && (TARGET_BYPASS_CACHE || TARGET_BYPASS_CACHE_VOLATILE))\n+    return false;\n+\n+  /* If the user has explicitly placed the symbol in a r0rel section\n+     via an attribute, generate r0-relative addressing.  */\n+  if (decl && DECL_SECTION_NAME (decl))\n+    return nios2_r0rel_section_name_p (DECL_SECTION_NAME (decl));\n+  return false;\n+}\n+\n /* Implement TARGET_SECTION_TYPE_FLAGS.  */\n \n static unsigned int\n@@ -2633,8 +2678,9 @@ nios2_emit_move_sequence (rtx *operands, machine_mode mode)\n \t      return true;\n \t    }\n \t}\n-      else if (gprel_constant_p (from))\n-\t/* Handled directly by movsi_internal as gp + offset.  */\n+      else if (gprel_constant_p (from) || r0rel_constant_p (from))\n+\t/* Handled directly by movsi_internal as gp + offset \n+\t   or r0 + offset.  */\n \t;\n       else if (nios2_large_constant_p (from))\n \t/* This case covers either a regular symbol reference or an UNSPEC\n@@ -2984,6 +3030,20 @@ gprel_constant_p (rtx op)\n   return false;\n }\n \n+/* Likewise if this is a zero-relative accessible reference.  */\n+bool\n+r0rel_constant_p (rtx op)\n+{\n+  if (GET_CODE (op) == SYMBOL_REF\n+      && nios2_symbol_ref_in_r0rel_data_p (op))\n+    return true;\n+  else if (GET_CODE (op) == CONST\n+           && GET_CODE (XEXP (op, 0)) == PLUS)\n+    return r0rel_constant_p (XEXP (XEXP (op, 0), 0));\n+\n+  return false;\n+}\n+\n /* Return the name string for a supported unspec reloc offset.  */\n static const char *\n nios2_unspec_reloc_name (int unspec)\n@@ -3048,7 +3108,13 @@ nios2_print_operand_address (FILE *file, machine_mode mode, rtx op)\n           fprintf (file, \")(%s)\", reg_names[GP_REGNO]);\n           return;\n         }\n-\n+      else if (r0rel_constant_p (op))\n+        {\n+          fprintf (file, \"%%lo(\");\n+          output_addr_const (file, op);\n+          fprintf (file, \")(r0)\");\n+          return;\n+        }\n       break;\n \n     case PLUS:\n@@ -4654,8 +4720,8 @@ nios2_cdx_narrow_form_p (rtx_insn *insn)\n \t\t|| TARGET_BYPASS_CACHE)\n \t      return false;\n \t    addr = XEXP (mem, 0);\n-\t    /* GP-based references are never narrow.  */\n-\t    if (gprel_constant_p (addr))\n+\t    /* GP-based and R0-based references are never narrow.  */\n+\t    if (gprel_constant_p (addr) || r0rel_constant_p (addr))\n \t\treturn false;\n \t    /* %lo requires a 16-bit relocation and is never narrow.  */\n \t    if (GET_CODE (addr) == LO_SUM)\n@@ -4701,8 +4767,8 @@ nios2_cdx_narrow_form_p (rtx_insn *insn)\n \t      || TARGET_BYPASS_CACHE)\n \t    return false;\n \t  addr = XEXP (mem, 0);\n-\t  /* GP-based references are never narrow.  */\n-\t  if (gprel_constant_p (addr))\n+\t  /* GP-based and r0-based references are never narrow.  */\n+\t  if (gprel_constant_p (addr) || r0rel_constant_p (addr))\n \t    return false;\n \t  /* %lo requires a 16-bit relocation and is never narrow.  */\n \t  if (GET_CODE (addr) == LO_SUM)"}, {"sha": "a50dbee3fa78254facf0bd0b1446ca96066a402a", "filename": "gcc/config/nios2/nios2.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/gcc%2Fconfig%2Fnios2%2Fnios2.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/gcc%2Fconfig%2Fnios2%2Fnios2.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.opt?ref=1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3", "patch": "@@ -589,4 +589,8 @@ Enable generation of R2 CDX instructions.\n \n mgprel-sec=\n Target RejectNegative Joined Var(nios2_gprel_sec) Init(NULL)\n-Regular expression matching additional GP-addressible small-data section names.\n+Regular expression matching additional GP-addressible section names.\n+\n+mr0rel-sec=\n+Target RejectNegative Joined Var(nios2_r0rel_sec) Init(NULL)\n+Regular expression matching section names for r0-relative addressing."}, {"sha": "2fc087a3042c0cc74ef5b116e17d7c391887e5e5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3", "patch": "@@ -948,7 +948,7 @@ Objective-C and Objective-C++ Dialects}.\n \n @emph{Nios II Options}\n @gccoptlist{-G @var{num}  -mgpopt=@var{option}  -mgpopt  -mno-gpopt @gol\n--mgprel-sec=@var{regexp} @gol\n+-mgprel-sec=@var{regexp} -mr0rel-sec=@var{regexp} @gol\n -mel  -meb @gol\n -mno-bypass-cache  -mbypass-cache @gol\n -mno-cache-volatile  -mcache-volatile @gol\n@@ -21184,6 +21184,20 @@ This option does not affect the behavior of the @option{-G} option, and\n and the specified sections are in addition to the standard @code{.sdata} \n and @code{.sbss} small-data sections that are recognized by @option{-mgpopt}.\n \n+@item -mr0rel-sec=@var{regexp}\n+@opindex mr0rel-sec\n+This option specifies names of sections that can be accessed via a \n+16-bit offset from @code{r0}; that is, in the low 32K or high 32K \n+of the 32-bit address space.  It is most useful in conjunction with \n+@code{section} attributes on variable declarations \n+(@pxref{Common Variable Attributes}) and a custom linker script.  \n+The @var{regexp} is a POSIX Extended Regular Expression.\n+\n+In contrast to the use of GP-relative addressing for small data, \n+zero-based addressing is never generated by default and there are no \n+conventional section names used in standard linker scripts for sections\n+in the low or high areas of memory.\n+\n @item -mel\n @itemx -meb\n @opindex mel"}, {"sha": "2f840a96f753c2d67e196ce7f4482a7aa7ca4508", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3", "patch": "@@ -1,3 +1,7 @@\n+2017-10-26  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gcc.target/nios2/gpopt-r0rel-sec.c: New.\n+\n 2017-10-26  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* gcc.target/nios2/gpopt-gprel-sec.c: New."}, {"sha": "5fda9e9a38177dca4fc001a81c74383785e746c3", "filename": "gcc/testsuite/gcc.target/nios2/gpopt-r0rel-sec.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-r0rel-sec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-r0rel-sec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-r0rel-sec.c?ref=1cef1159dbf7af419d9cd2c75fadcd1eb2fa0ab3", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mgpopt=local -mr0rel-sec=\\\\.frog.+\" } */\n+\n+extern int a __attribute__ ((section (\".frog1\")));\n+static volatile int b __attribute__ ((section (\".frog2\"))) = 1;\n+extern int c __attribute__ ((section (\".data\")));\n+static volatile int d __attribute__ ((section (\".data\"))) = 2;\n+\n+extern int e;\n+static volatile int f = 3;\n+\n+volatile int g __attribute__ ((weak)) = 4;\n+\n+extern int h[100];\n+static int i[100];\n+static int j[100] __attribute__ ((section (\".sdata\")));\n+\n+typedef int (*ftype) (int);\n+extern int foo (int);\n+\n+extern int bar (int, int*, int*, int*, ftype);\n+\n+int baz (void)\n+{\n+  return bar (a + b + c + d + e + f + g, h, i, j, foo);\n+}\n+\n+/* { dg-final { scan-assembler \"%lo\\\\(a\\\\)\\\\(r0\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%lo\\\\(b\\\\)\\\\(r0\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(c\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(d\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(e\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(f\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(g\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(h\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(i\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(j\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(foo\\\\)\" } } */"}]}