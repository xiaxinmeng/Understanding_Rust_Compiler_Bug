{"sha": "57848bf789f92b5787fef0249c8d7254b02e5825", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc4NDhiZjc4OWY5MmI1Nzg3ZmVmMDI0OWM4ZDcyNTRiMDJlNTgyNQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2005-03-29T16:14:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-03-29T16:14:44Z"}, "message": "exp_ch4.adb (Has_Unconstrained_UU_Component): Use the base type in order to retrieve the component list of the type...\n\n2005-03-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Has_Unconstrained_UU_Component): Use the base type in\n\torder to retrieve the component list of the type, before examining\n\tindividual components.\n\n\t* sem_type.adb (Covers): Types are compatible if one is the base type\n\tof the other, even though their base types might differ when private\n\tviews are involved.\n\nFrom-SVN: r97170", "tree": {"sha": "7b11ccad15955ffe8d3565723295270842377061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b11ccad15955ffe8d3565723295270842377061"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57848bf789f92b5787fef0249c8d7254b02e5825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57848bf789f92b5787fef0249c8d7254b02e5825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57848bf789f92b5787fef0249c8d7254b02e5825", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57848bf789f92b5787fef0249c8d7254b02e5825/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "debe0ab674d54dbe2df6358be39f56143e00ca8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/debe0ab674d54dbe2df6358be39f56143e00ca8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/debe0ab674d54dbe2df6358be39f56143e00ca8e"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "e817156267c18702788520e4446008304f606edc", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57848bf789f92b5787fef0249c8d7254b02e5825/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57848bf789f92b5787fef0249c8d7254b02e5825/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=57848bf789f92b5787fef0249c8d7254b02e5825", "patch": "@@ -4077,7 +4077,7 @@ package body Exp_Ch4 is\n         (Typ : Node_Id) return Boolean\n       is\n          Tdef  : constant Node_Id :=\n-                   Type_Definition (Declaration_Node (Typ));\n+                   Type_Definition (Declaration_Node (Base_Type (Typ)));\n          Clist : Node_Id;\n          Vpart : Node_Id;\n "}, {"sha": "3411194aa18b0e71580b4f0caa331b2012947250", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57848bf789f92b5787fef0249c8d7254b02e5825/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57848bf789f92b5787fef0249c8d7254b02e5825/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=57848bf789f92b5787fef0249c8d7254b02e5825", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -585,6 +585,9 @@ package body Sem_Type is\n \n    function Covers (T1, T2 : Entity_Id) return Boolean is\n \n+      BT1 : Entity_Id;\n+      BT2 : Entity_Id;\n+\n       function Full_View_Covers (Typ1, Typ2 : Entity_Id) return Boolean;\n       --  In an instance the proper view may not always be correct for\n       --  private types, but private and full view are compatible. This\n@@ -619,6 +622,10 @@ package body Sem_Type is\n          else\n             raise Program_Error;\n          end if;\n+\n+      else\n+         BT1 := Base_Type (T1);\n+         BT2 := Base_Type (T2);\n       end if;\n \n       --  Simplest case: same types are compatible, and types that have the\n@@ -639,7 +646,10 @@ package body Sem_Type is\n       if T1 = T2 then\n          return True;\n \n-      elsif Base_Type (T1) = Base_Type (T2) then\n+      elsif  BT1 = BT2\n+        or else BT1 = T2\n+        or else BT2 = T1\n+      then\n          if not Is_Generic_Actual_Type (T1) then\n             return True;\n          else\n@@ -712,9 +722,9 @@ package body Sem_Type is\n       --  An Access_To_Subprogram is compatible with itself, or with an\n       --  anonymous type created for an attribute reference Access.\n \n-      elsif (Ekind (Base_Type (T1)) = E_Access_Subprogram_Type\n+      elsif (Ekind (BT1) = E_Access_Subprogram_Type\n                or else\n-             Ekind (Base_Type (T1)) = E_Access_Protected_Subprogram_Type)\n+             Ekind (BT1) = E_Access_Protected_Subprogram_Type)\n         and then Is_Access_Type (T2)\n         and then (not Comes_From_Source (T1)\n                    or else not Comes_From_Source (T2))\n@@ -732,9 +742,9 @@ package body Sem_Type is\n       --  with itself, or with an anonymous type created for an attribute\n       --  reference Access.\n \n-      elsif (Ekind (Base_Type (T1)) = E_Anonymous_Access_Subprogram_Type\n+      elsif (Ekind (BT1) = E_Anonymous_Access_Subprogram_Type\n                or else\n-             Ekind (Base_Type (T1))\n+             Ekind (BT1)\n                       = E_Anonymous_Access_Protected_Subprogram_Type)\n         and then Is_Access_Type (T2)\n         and then (not Comes_From_Source (T1)\n@@ -768,14 +778,14 @@ package body Sem_Type is\n          return Covers (Corresponding_Remote_Type (T2), T1);\n \n       elsif Ekind (T2) = E_Access_Attribute_Type\n-        and then (Ekind (Base_Type (T1)) = E_General_Access_Type\n-              or else Ekind (Base_Type (T1)) = E_Access_Type)\n+        and then (Ekind (BT1) = E_General_Access_Type\n+                    or else Ekind (BT1) = E_Access_Type)\n         and then Covers (Designated_Type (T1), Designated_Type (T2))\n       then\n          --  If the target type is a RACW type while the source is an access\n          --  attribute type, we are building a RACW that may be exported.\n \n-         if Is_Remote_Access_To_Class_Wide_Type (Base_Type (T1)) then\n+         if Is_Remote_Access_To_Class_Wide_Type (BT1) then\n             Set_Has_RACW (Current_Sem_Unit);\n          end if;\n "}]}