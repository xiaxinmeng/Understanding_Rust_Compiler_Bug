{"sha": "062c762ef264dca89d01ebca2ef023ea91f31d50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYyYzc2MmVmMjY0ZGNhODlkMDFlYmNhMmVmMDIzZWE5MWYzMWQ1MA==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-07-09T03:00:24Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-07-09T03:00:24Z"}, "message": "rs6000: Support [u]mod<mode>3 for vector modulo insns\n\nThis patch is to make Power10 newly introduced vector\nmodulo instructions exploited in vectorized loops, it\njust simply renames existing define_insns as standard\npattern names.\n\ngcc/ChangeLog:\n\n\t* config/rs6000/vsx.md (mods_<mode>): Rename to...\n\t(mod<mode>3): ... this.\n\t(modu_<mode>): Rename to...\n\t(umod<mode>3): ... this.\n\t* config/rs6000/rs6000-builtin.def (MODS_V2DI, MODS_V4SI, MODU_V2DI,\n\tMODU_V4SI): Adjust.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/mod-vectorize.c: New test.", "tree": {"sha": "3e67c808bd54aeba9a2b07ff711201982e979bd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e67c808bd54aeba9a2b07ff711201982e979bd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/062c762ef264dca89d01ebca2ef023ea91f31d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062c762ef264dca89d01ebca2ef023ea91f31d50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/062c762ef264dca89d01ebca2ef023ea91f31d50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062c762ef264dca89d01ebca2ef023ea91f31d50/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df85baa5687170cbca8450a59cf17f3157b1d61d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df85baa5687170cbca8450a59cf17f3157b1d61d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df85baa5687170cbca8450a59cf17f3157b1d61d"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "a0dfefccd43db84c33254f68d2d3f8f959ad3702", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062c762ef264dca89d01ebca2ef023ea91f31d50/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062c762ef264dca89d01ebca2ef023ea91f31d50/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=062c762ef264dca89d01ebca2ef023ea91f31d50", "patch": "@@ -3031,10 +3031,10 @@ BU_P10V_AV_2 (DIVS_V4SI, \"vdivsw\", CONST, divv4si3)\n BU_P10V_AV_2 (DIVS_V2DI, \"vdivsd\", CONST, divv2di3)\n BU_P10V_AV_2 (DIVU_V4SI, \"vdivuw\", CONST, udivv4si3)\n BU_P10V_AV_2 (DIVU_V2DI, \"vdivud\", CONST, udivv2di3)\n-BU_P10V_AV_2 (MODS_V2DI, \"vmodsd\", CONST, mods_v2di)\n-BU_P10V_AV_2 (MODS_V4SI, \"vmodsw\", CONST, mods_v4si)\n-BU_P10V_AV_2 (MODU_V2DI, \"vmodud\", CONST, modu_v2di)\n-BU_P10V_AV_2 (MODU_V4SI, \"vmoduw\", CONST, modu_v4si)\n+BU_P10V_AV_2 (MODS_V2DI, \"vmodsd\", CONST, modv2di3)\n+BU_P10V_AV_2 (MODS_V4SI, \"vmodsw\", CONST, modv4si3)\n+BU_P10V_AV_2 (MODU_V2DI, \"vmodud\", CONST, umodv2di3)\n+BU_P10V_AV_2 (MODU_V4SI, \"vmoduw\", CONST, umodv4si3)\n BU_P10V_AV_2 (MULHS_V2DI, \"vmulhsd\", CONST, mulhs_v2di)\n BU_P10V_AV_2 (MULHS_V4SI, \"vmulhsw\", CONST, mulhs_v4si)\n BU_P10V_AV_2 (MULHU_V2DI, \"vmulhud\", CONST, mulhu_v2di)"}, {"sha": "f622873d7584f74d1798bbe51eb0afca9a737cac", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062c762ef264dca89d01ebca2ef023ea91f31d50/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062c762ef264dca89d01ebca2ef023ea91f31d50/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=062c762ef264dca89d01ebca2ef023ea91f31d50", "patch": "@@ -6333,7 +6333,7 @@\n   [(set_attr \"type\" \"vecdiv\")\n    (set_attr \"size\" \"<bits>\")])\n \n-(define_insn \"mods_<mode>\"\n+(define_insn \"mod<mode>3\"\n   [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n \t(mod:VIlong (match_operand:VIlong 1 \"vsx_register_operand\" \"v\")\n \t\t    (match_operand:VIlong 2 \"vsx_register_operand\" \"v\")))]\n@@ -6342,7 +6342,7 @@\n   [(set_attr \"type\" \"vecdiv\")\n    (set_attr \"size\" \"<bits>\")])\n \n-(define_insn \"modu_<mode>\"\n+(define_insn \"umod<mode>3\"\n   [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n \t(umod:VIlong (match_operand:VIlong 1 \"vsx_register_operand\" \"v\")\n \t\t     (match_operand:VIlong 2 \"vsx_register_operand\" \"v\")))]"}, {"sha": "4d4f5cd6446353fac01d72277f01de02ca0cadd5", "filename": "gcc/testsuite/gcc.target/powerpc/mod-vectorize.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062c762ef264dca89d01ebca2ef023ea91f31d50/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmod-vectorize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062c762ef264dca89d01ebca2ef023ea91f31d50/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmod-vectorize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmod-vectorize.c?ref=062c762ef264dca89d01ebca2ef023ea91f31d50", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fdump-tree-vect-details\" } */\n+\n+/* Test vectorizer can exploit ISA 3.1 instructions Vector Modulo\n+   Signed/Unsigned Word/Doubleword for word/doubleword modulo operations.  */\n+\n+#define N 128\n+\n+extern signed int si_a[N], si_b[N], si_c[N];\n+extern unsigned int ui_a[N], ui_b[N], ui_c[N];\n+extern signed long long sd_a[N], sd_b[N], sd_c[N];\n+extern unsigned long long ud_a[N], ud_b[N], ud_c[N];\n+\n+__attribute__ ((noipa)) void\n+test_si ()\n+{\n+  for (int i = 0; i < N; i++)\n+    si_c[i] = si_a[i] % si_b[i];\n+}\n+\n+__attribute__ ((noipa)) void\n+test_ui ()\n+{\n+  for (int i = 0; i < N; i++)\n+    ui_c[i] = ui_a[i] % ui_b[i];\n+}\n+\n+__attribute__ ((noipa)) void\n+test_sd ()\n+{\n+  for (int i = 0; i < N; i++)\n+    sd_c[i] = sd_a[i] % sd_b[i];\n+}\n+\n+__attribute__ ((noipa)) void\n+test_ud ()\n+{\n+  for (int i = 0; i < N; i++)\n+    ud_c[i] = ud_a[i] % ud_b[i];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" } } */\n+/* { dg-final { scan-assembler-times {\\mvmodsw\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmoduw\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmodsd\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmodud\\M} 1 } } */"}]}