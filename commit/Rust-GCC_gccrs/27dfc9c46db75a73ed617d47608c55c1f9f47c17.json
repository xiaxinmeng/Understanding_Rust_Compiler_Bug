{"sha": "27dfc9c46db75a73ed617d47608c55c1f9f47c17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdkZmM5YzQ2ZGI3NWE3M2VkNjE3ZDQ3NjA4YzU1YzFmOWY0N2MxNw==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2005-01-08T22:40:47Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2005-01-08T22:40:47Z"}, "message": "arith.c (arctangent2, [...]): Fix whitespace issues.\n\n* arith.c (arctangent2, gfc_arith_init_1, gfc_arith_done_1,\ngfc_constant_result, gfc_range_check, gfc_arith_power,\neval_type_intrinsic0, eval_intrinsic_f2, gfc_real2real,\ngfc_real2complex, gfc_complex2int, gfc_complex2real,\ngfc_complex2complex): Fix whitespace issues.\ncheck.c (must_be, type_check, numeric_check, int_or_real_check,\nlogical_array_check, array_check, scalar_check, nonoptional_check,\nvariable_check, dim_check, check_a_kind, gfc_check_a_ikind,\ngfc_check_a_xkind, gfc_check_abs, gfc_check_all_any,\ngfc_check_allocated, gfc_check_a_p, gfc_check_besn,\ngfc_check_btest, gfc_check_char, gfc_check_cmplx, gfc_check_count,\ngfc_check_cshift, gfc_check_dcmplx, gfc_check_dble,\ngfc_check_digits, gfc_check_dot_product, gfc_check_eoshift,\ngfc_check_fnum, gfc_check_g77_math1, gfc_check_huge, gfc_check_i,\ngfc_check_iand, gfc_check_ibclr, gfc_check_ibits, gfc_check_ibset,\ngfc_check_idnint, gfc_check_ieor, gfc_check_index, gfc_check_int,\ngfc_check_ior, gfc_check_ishft, gfc_check_ishftc, gfc_check_kind,\ngfc_check_lbound, gfc_check_logical, min_max_args,\ngfc_check_min_max_integer, gfc_check_min_max_real,\ngfc_check_min_max_double, gfc_check_matmul,\ngfc_check_minval_maxval, gfc_check_merge, gfc_check_nearest,\ngfc_check_pack, gfc_check_precision, gfc_check_radix,\ngfc_check_range, gfc_check_real, gfc_check_repeat,\ngfc_check_scale, gfc_check_scan, gfc_check_selected_real_kind,\ngfc_check_set_exponent): Fix formatting issues.\n(gfc_check_size, gfc_check_sign): Alphabetize function order,\nremove whitespace-only line.\n(gfc_check_fstat, gfc_check_fstat_sub, gfc_check_stat,\ngfc_check_stat_sub, gfc_check_transfer, gfc_check_transpose,\ngfc_check_ubound, gfc_check_unpack, gfc_check_verify, gfc_check_x,\ngfc_check_cpu_time, gfc_check_date_and_time, gfc_check_mvbits,\ngfc_check_random_number, gfc_check_random_seed,\ngfc_check_second_sub, gfc_check_system_clock,\ngfc_check_getcwd_sub, gfc_check_exit, gfc_check_flush,\ngfc_check_umask, gfc_check_umask_sub, gfc_check_unlink,\ngfc_check_unlink_sub): Fix formatting issues.\n\nFrom-SVN: r93093", "tree": {"sha": "7ec99850ab2c6490adf6b0c6204b9c6ca123213a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ec99850ab2c6490adf6b0c6204b9c6ca123213a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27dfc9c46db75a73ed617d47608c55c1f9f47c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27dfc9c46db75a73ed617d47608c55c1f9f47c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27dfc9c46db75a73ed617d47608c55c1f9f47c17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27dfc9c46db75a73ed617d47608c55c1f9f47c17/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b36cd00b1ec1dae88348d89cc82fe50c66e75d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b36cd00b1ec1dae88348d89cc82fe50c66e75d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b36cd00b1ec1dae88348d89cc82fe50c66e75d5b"}], "stats": {"total": 217, "additions": 82, "deletions": 135}, "files": [{"sha": "cd5f4fdab0080ef1334ac1fcd1c141be2dad1271", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27dfc9c46db75a73ed617d47608c55c1f9f47c17/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27dfc9c46db75a73ed617d47608c55c1f9f47c17/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=27dfc9c46db75a73ed617d47608c55c1f9f47c17", "patch": "@@ -9,7 +9,44 @@\n \t(prepare_arg_info): Fix formatting, indenting and remove trailing\n \twhitespace.\n \t(gfc_conv_intrinsic_spacing, gfc_conv_intrinsic_trim): Remove\n-\ttrailing whitespace.\t\n+\ttrailing whitespace.\n+\n+\t* arith.c (arctangent2, gfc_arith_init_1, gfc_arith_done_1,\n+\tgfc_constant_result, gfc_range_check, gfc_arith_power,\n+\teval_type_intrinsic0, eval_intrinsic_f2, gfc_real2real,\n+\tgfc_real2complex, gfc_complex2int, gfc_complex2real,\n+\tgfc_complex2complex): Fix whitespace issues.\n+\tcheck.c (must_be, type_check, numeric_check, int_or_real_check,\n+\tlogical_array_check, array_check, scalar_check, nonoptional_check,\n+\tvariable_check, dim_check, check_a_kind, gfc_check_a_ikind,\n+\tgfc_check_a_xkind, gfc_check_abs, gfc_check_all_any,\n+\tgfc_check_allocated, gfc_check_a_p, gfc_check_besn,\n+\tgfc_check_btest, gfc_check_char, gfc_check_cmplx, gfc_check_count,\n+\tgfc_check_cshift, gfc_check_dcmplx, gfc_check_dble,\n+\tgfc_check_digits, gfc_check_dot_product, gfc_check_eoshift,\n+\tgfc_check_fnum, gfc_check_g77_math1, gfc_check_huge, gfc_check_i,\n+\tgfc_check_iand, gfc_check_ibclr, gfc_check_ibits, gfc_check_ibset,\n+\tgfc_check_idnint, gfc_check_ieor, gfc_check_index, gfc_check_int,\n+\tgfc_check_ior, gfc_check_ishft, gfc_check_ishftc, gfc_check_kind,\n+\tgfc_check_lbound, gfc_check_logical, min_max_args,\n+\tgfc_check_min_max_integer, gfc_check_min_max_real,\n+\tgfc_check_min_max_double, gfc_check_matmul,\n+\tgfc_check_minval_maxval, gfc_check_merge, gfc_check_nearest,\n+\tgfc_check_pack, gfc_check_precision, gfc_check_radix,\n+\tgfc_check_range, gfc_check_real, gfc_check_repeat,\n+\tgfc_check_scale, gfc_check_scan, gfc_check_selected_real_kind,\n+\tgfc_check_set_exponent): Fix formatting issues.\n+\t(gfc_check_size, gfc_check_sign): Alphabetize function order,\n+\tremove whitespace-only line.\n+\t(gfc_check_fstat, gfc_check_fstat_sub, gfc_check_stat,\n+\tgfc_check_stat_sub, gfc_check_transfer, gfc_check_transpose,\n+\tgfc_check_ubound, gfc_check_unpack, gfc_check_verify, gfc_check_x,\n+\tgfc_check_cpu_time, gfc_check_date_and_time, gfc_check_mvbits,\n+\tgfc_check_random_number, gfc_check_random_seed,\n+\tgfc_check_second_sub, gfc_check_system_clock,\n+\tgfc_check_getcwd_sub, gfc_check_exit, gfc_check_flush,\n+\tgfc_check_umask, gfc_check_umask_sub, gfc_check_unlink,\n+\tgfc_check_unlink_sub): Fix formatting issues.\n \t\n 2005-01-08  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n "}, {"sha": "280fc9a84ac9999da207ea9f1f13d76bf5bb4a07", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27dfc9c46db75a73ed617d47608c55c1f9f47c17/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27dfc9c46db75a73ed617d47608c55c1f9f47c17/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=27dfc9c46db75a73ed617d47608c55c1f9f47c17", "patch": "@@ -92,7 +92,7 @@ arctangent2 (mpfr_t y, mpfr_t x, mpfr_t result)\n   gfc_set_model (y);\n   mpfr_init (t);\n \n-  i = mpfr_sgn(x);\n+  i = mpfr_sgn (x);\n \n   if (i > 0)\n     {\n@@ -206,12 +206,12 @@ gfc_arith_init_1 (void)\n          Standard Fortran requires integers to be symmetrical, i.e.\n          every negative integer must have a representable positive\n          absolute value, and vice versa.  */\n-         \n+\n       mpz_init (int_info->pedantic_min_int);\n       mpz_neg (int_info->pedantic_min_int, int_info->huge);\n \n       mpz_init (int_info->min_int);\n-      mpz_sub_ui(int_info->min_int, int_info->pedantic_min_int, 1);\n+      mpz_sub_ui (int_info->min_int, int_info->pedantic_min_int, 1);\n \n       mpz_init (int_info->max_int);\n       mpz_add (int_info->max_int, int_info->huge, int_info->huge);\n@@ -330,7 +330,7 @@ gfc_arith_done_1 (void)\n \n \n /* Given an integer and a kind, make sure that the integer lies within\n-   the range of the kind.  Returns ARITH_OK, ARITH_ASYMMETRIC or \n+   the range of the kind.  Returns ARITH_OK, ARITH_ASYMMETRIC or\n    ARITH_OVERFLOW.  */\n \n static arith\n@@ -396,7 +396,7 @@ gfc_check_real_range (mpfr_t p, int kind)\n /* Function to return a constant expression node of a given type and\n    kind.  */\n \n-gfc_expr * \n+gfc_expr *\n gfc_constant_result (bt type, int kind, locus * where)\n {\n   gfc_expr *result;\n@@ -549,7 +549,7 @@ gfc_range_check (gfc_expr * e)\n     default:\n       gfc_internal_error (\"gfc_range_check(): Bad type\");\n     }\n-    \n+\n   return rc;\n }\n \n@@ -1089,7 +1089,7 @@ gfc_arith_power (gfc_expr * op1, gfc_expr * op2, gfc_expr ** resultp)\n     gfc_free_expr (result);\n   else\n     *resultp = result;\n-  \n+\n   return rc;\n }\n \n@@ -1687,9 +1687,9 @@ static gfc_expr *\n eval_type_intrinsic0 (gfc_intrinsic_op operator, gfc_expr *op)\n {\n   if (op == NULL)\n-    gfc_internal_error(\"eval_type_intrinsic0(): op NULL\");\n+    gfc_internal_error (\"eval_type_intrinsic0(): op NULL\");\n \n-  switch(operator)\n+  switch (operator)\n     {\n     case INTRINSIC_GE:\n     case INTRINSIC_LT:\n@@ -1755,13 +1755,13 @@ eval_intrinsic_f2 (gfc_intrinsic_op operator,\n   if (op2 == NULL)\n     {\n       if (gfc_zero_size_array (op1))\n-\treturn eval_type_intrinsic0(operator, op1);\n+\treturn eval_type_intrinsic0 (operator, op1);\n     }\n   else\n     {\n       result = reduce_binary0 (op1, op2);\n       if (result != NULL)\n-\treturn eval_type_intrinsic0(operator, result);\n+\treturn eval_type_intrinsic0 (operator, result);\n     }\n \n   f.f2 = eval;\n@@ -2093,7 +2093,7 @@ gfc_real2real (gfc_expr * src, int kind)\n     {\n       if (gfc_option.warn_underflow)\n         gfc_warning (\"%s at %L\", gfc_arith_error (rc), &src->where);\n-      mpfr_set_ui(result->value.real, 0, GFC_RND_MODE);\n+      mpfr_set_ui (result->value.real, 0, GFC_RND_MODE);\n     }\n   else if (rc != ARITH_OK)\n     {\n@@ -2125,7 +2125,7 @@ gfc_real2complex (gfc_expr * src, int kind)\n     {\n       if (gfc_option.warn_underflow)\n         gfc_warning (\"%s at %L\", gfc_arith_error (rc), &src->where);\n-      mpfr_set_ui(result->value.complex.r, 0, GFC_RND_MODE);\n+      mpfr_set_ui (result->value.complex.r, 0, GFC_RND_MODE);\n     }\n   else if (rc != ARITH_OK)\n     {\n@@ -2148,7 +2148,7 @@ gfc_complex2int (gfc_expr * src, int kind)\n \n   result = gfc_constant_result (BT_INTEGER, kind, &src->where);\n \n-  gfc_mpfr_to_mpz(result->value.integer, src->value.complex.r);\n+  gfc_mpfr_to_mpz (result->value.integer, src->value.complex.r);\n \n   if ((rc = gfc_check_integer_range (result->value.integer, kind))\n       != ARITH_OK)\n@@ -2176,11 +2176,11 @@ gfc_complex2real (gfc_expr * src, int kind)\n \n   rc = gfc_check_real_range (result->value.real, kind);\n \n-  if (rc == ARITH_UNDERFLOW) \n+  if (rc == ARITH_UNDERFLOW)\n     {\n       if (gfc_option.warn_underflow)\n         gfc_warning (\"%s at %L\", gfc_arith_error (rc), &src->where);\n-      mpfr_set_ui(result->value.real, 0, GFC_RND_MODE);\n+      mpfr_set_ui (result->value.real, 0, GFC_RND_MODE);\n     }\n   if (rc != ARITH_OK)\n     {\n@@ -2212,22 +2212,22 @@ gfc_complex2complex (gfc_expr * src, int kind)\n     {\n       if (gfc_option.warn_underflow)\n         gfc_warning (\"%s at %L\", gfc_arith_error (rc), &src->where);\n-      mpfr_set_ui(result->value.complex.r, 0, GFC_RND_MODE);\n+      mpfr_set_ui (result->value.complex.r, 0, GFC_RND_MODE);\n     }\n   else if (rc != ARITH_OK)\n     {\n       arith_error (rc, &src->ts, &result->ts, &src->where);\n       gfc_free_expr (result);\n       return NULL;\n     }\n-  \n+\n   rc = gfc_check_real_range (result->value.complex.i, kind);\n \n   if (rc == ARITH_UNDERFLOW)\n     {\n       if (gfc_option.warn_underflow)\n         gfc_warning (\"%s at %L\", gfc_arith_error (rc), &src->where);\n-      mpfr_set_ui(result->value.complex.i, 0, GFC_RND_MODE);\n+      mpfr_set_ui (result->value.complex.i, 0, GFC_RND_MODE);\n     }\n   else if (rc != ARITH_OK)\n     {"}, {"sha": "081de6e8ec4d6ef4fdd2da6d6dc065ec662d3094", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 25, "deletions": 115, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27dfc9c46db75a73ed617d47608c55c1f9f47c17/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27dfc9c46db75a73ed617d47608c55c1f9f47c17/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=27dfc9c46db75a73ed617d47608c55c1f9f47c17", "patch": "@@ -39,7 +39,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n static void\n must_be (gfc_expr * e, int n, const char *thing)\n {\n-\n   gfc_error (\"'%s' argument of '%s' intrinsic at %L must be %s\",\n \t     gfc_current_intrinsic_arg[n], gfc_current_intrinsic, &e->where,\n \t     thing);\n@@ -51,7 +50,6 @@ must_be (gfc_expr * e, int n, const char *thing)\n static try\n type_check (gfc_expr * e, int n, bt type)\n {\n-\n   if (e->ts.type == type)\n     return SUCCESS;\n \n@@ -66,7 +64,6 @@ type_check (gfc_expr * e, int n, bt type)\n static try\n numeric_check (gfc_expr * e, int n)\n {\n-\n   if (gfc_numeric_ts (&e->ts))\n     return SUCCESS;\n \n@@ -81,7 +78,6 @@ numeric_check (gfc_expr * e, int n)\n static try\n int_or_real_check (gfc_expr * e, int n)\n {\n-\n   if (e->ts.type != BT_INTEGER && e->ts.type != BT_REAL)\n     {\n       must_be (e, n, \"INTEGER or REAL\");\n@@ -147,7 +143,6 @@ double_check (gfc_expr * d, int n)\n static try\n logical_array_check (gfc_expr * array, int n)\n {\n-\n   if (array->ts.type != BT_LOGICAL || array->rank == 0)\n     {\n       must_be (array, n, \"a logical array\");\n@@ -163,7 +158,6 @@ logical_array_check (gfc_expr * array, int n)\n static try\n array_check (gfc_expr * e, int n)\n {\n-\n   if (e->rank != 0)\n     return SUCCESS;\n \n@@ -178,7 +172,6 @@ array_check (gfc_expr * e, int n)\n static try\n scalar_check (gfc_expr * e, int n)\n {\n-\n   if (e->rank == 0)\n     return SUCCESS;\n \n@@ -230,7 +223,6 @@ rank_check (gfc_expr * e, int n, int rank)\n static try\n nonoptional_check (gfc_expr * e, int n)\n {\n-\n   if (e->expr_type == EXPR_VARIABLE && e->symtree->n.sym->attr.optional)\n     {\n       gfc_error (\"'%s' argument of '%s' intrinsic at %L must not be OPTIONAL\",\n@@ -267,7 +259,6 @@ kind_value_check (gfc_expr * e, int n, int k)\n static try\n variable_check (gfc_expr * e, int n)\n {\n-\n   if ((e->expr_type == EXPR_VARIABLE\n        && e->symtree->n.sym->attr.flavor != FL_PARAMETER)\n       || (e->expr_type == EXPR_FUNCTION\n@@ -294,7 +285,6 @@ variable_check (gfc_expr * e, int n)\n static try\n dim_check (gfc_expr * dim, int n, int optional)\n {\n-\n   if (optional)\n     {\n       if (dim == NULL)\n@@ -363,7 +353,6 @@ dim_rank_check (gfc_expr * dim, gfc_expr * array, int allow_assumed)\n static try\n check_a_kind (gfc_expr * a, gfc_expr * kind, bt type)\n {\n-\n   if (type_check (a, 0, BT_REAL) == FAILURE)\n     return FAILURE;\n   if (kind_check (kind, 1, type) == FAILURE)\n@@ -377,7 +366,6 @@ check_a_kind (gfc_expr * a, gfc_expr * kind, bt type)\n try\n gfc_check_a_ikind (gfc_expr * a, gfc_expr * kind)\n {\n-\n   return check_a_kind (a, kind, BT_INTEGER);\n }\n \n@@ -386,14 +374,12 @@ gfc_check_a_ikind (gfc_expr * a, gfc_expr * kind)\n try\n gfc_check_a_xkind (gfc_expr * a, gfc_expr * kind)\n {\n-\n   return check_a_kind (a, kind, BT_REAL);\n }\n \n try\n gfc_check_abs (gfc_expr * a)\n {\n-\n   if (numeric_check (a, 0) == FAILURE)\n     return FAILURE;\n \n@@ -404,7 +390,6 @@ gfc_check_abs (gfc_expr * a)\n try\n gfc_check_all_any (gfc_expr * mask, gfc_expr * dim)\n {\n-\n   if (logical_array_check (mask, 0) == FAILURE)\n     return FAILURE;\n \n@@ -418,7 +403,6 @@ gfc_check_all_any (gfc_expr * mask, gfc_expr * dim)\n try\n gfc_check_allocated (gfc_expr * array)\n {\n-\n   if (variable_check (array, 0) == FAILURE)\n     return FAILURE;\n \n@@ -441,7 +425,6 @@ gfc_check_allocated (gfc_expr * array)\n try\n gfc_check_a_p (gfc_expr * a, gfc_expr * p)\n {\n-\n   if (int_or_real_check (a, 0) == FAILURE)\n     return FAILURE;\n \n@@ -520,13 +503,12 @@ gfc_check_atan2 (gfc_expr * y, gfc_expr * x)\n   return SUCCESS;\n }\n \n-  \n+\n /* BESJN and BESYN functions.  */\n \n try\n gfc_check_besn (gfc_expr * n, gfc_expr * x)\n {\n-\n   if (scalar_check (n, 0) == FAILURE)\n     return FAILURE;\n \n@@ -546,7 +528,6 @@ gfc_check_besn (gfc_expr * n, gfc_expr * x)\n try\n gfc_check_btest (gfc_expr * i, gfc_expr * pos)\n {\n-\n   if (type_check (i, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n   if (type_check (pos, 1, BT_INTEGER) == FAILURE)\n@@ -559,7 +540,6 @@ gfc_check_btest (gfc_expr * i, gfc_expr * pos)\n try\n gfc_check_char (gfc_expr * i, gfc_expr * kind)\n {\n-\n   if (type_check (i, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n   if (kind_check (kind, 1, BT_CHARACTER) == FAILURE)\n@@ -572,7 +552,6 @@ gfc_check_char (gfc_expr * i, gfc_expr * kind)\n try\n gfc_check_cmplx (gfc_expr * x, gfc_expr * y, gfc_expr * kind)\n {\n-\n   if (numeric_check (x, 0) == FAILURE)\n     return FAILURE;\n \n@@ -598,7 +577,6 @@ gfc_check_cmplx (gfc_expr * x, gfc_expr * y, gfc_expr * kind)\n try\n gfc_check_count (gfc_expr * mask, gfc_expr * dim)\n {\n-\n   if (logical_array_check (mask, 0) == FAILURE)\n     return FAILURE;\n   if (dim_check (dim, 1, 1) == FAILURE)\n@@ -611,7 +589,6 @@ gfc_check_count (gfc_expr * mask, gfc_expr * dim)\n try\n gfc_check_cshift (gfc_expr * array, gfc_expr * shift, gfc_expr * dim)\n {\n-\n   if (array_check (array, 0) == FAILURE)\n     return FAILURE;\n \n@@ -635,7 +612,6 @@ gfc_check_cshift (gfc_expr * array, gfc_expr * shift, gfc_expr * dim)\n try\n gfc_check_dcmplx (gfc_expr * x, gfc_expr * y)\n {\n-\n   if (numeric_check (x, 0) == FAILURE)\n     return FAILURE;\n \n@@ -658,7 +634,6 @@ gfc_check_dcmplx (gfc_expr * x, gfc_expr * y)\n try\n gfc_check_dble (gfc_expr * x)\n {\n-\n   if (numeric_check (x, 0) == FAILURE)\n     return FAILURE;\n \n@@ -669,7 +644,6 @@ gfc_check_dble (gfc_expr * x)\n try\n gfc_check_digits (gfc_expr * x)\n {\n-\n   if (int_or_real_check (x, 0) == FAILURE)\n     return FAILURE;\n \n@@ -680,7 +654,6 @@ gfc_check_digits (gfc_expr * x)\n try\n gfc_check_dot_product (gfc_expr * vector_a, gfc_expr * vector_b)\n {\n-\n   switch (vector_a->ts.type)\n     {\n     case BT_LOGICAL:\n@@ -714,7 +687,6 @@ try\n gfc_check_eoshift (gfc_expr * array, gfc_expr * shift, gfc_expr * boundary,\n \t\t   gfc_expr * dim)\n {\n-\n   if (array_check (array, 0) == FAILURE)\n     return FAILURE;\n \n@@ -749,7 +721,6 @@ gfc_check_eoshift (gfc_expr * array, gfc_expr * shift, gfc_expr * boundary,\n try\n gfc_check_fnum (gfc_expr * unit)\n {\n-\n   if (type_check (unit, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n@@ -766,7 +737,6 @@ gfc_check_fnum (gfc_expr * unit)\n try\n gfc_check_g77_math1 (gfc_expr * x)\n {\n-\n   if (scalar_check (x, 0) == FAILURE)\n     return FAILURE;\n \n@@ -780,7 +750,6 @@ gfc_check_g77_math1 (gfc_expr * x)\n try\n gfc_check_huge (gfc_expr * x)\n {\n-\n   if (int_or_real_check (x, 0) == FAILURE)\n     return FAILURE;\n \n@@ -793,7 +762,6 @@ gfc_check_huge (gfc_expr * x)\n try\n gfc_check_i (gfc_expr * i)\n {\n-\n   if (type_check (i, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n@@ -804,7 +772,6 @@ gfc_check_i (gfc_expr * i)\n try\n gfc_check_iand (gfc_expr * i, gfc_expr * j)\n {\n-\n   if (type_check (i, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n@@ -825,7 +792,6 @@ gfc_check_iand (gfc_expr * i, gfc_expr * j)\n try\n gfc_check_ibclr (gfc_expr * i, gfc_expr * pos)\n {\n-\n   if (type_check (i, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n@@ -839,7 +805,6 @@ gfc_check_ibclr (gfc_expr * i, gfc_expr * pos)\n try\n gfc_check_ibits (gfc_expr * i, gfc_expr * pos, gfc_expr * len)\n {\n-\n   if (type_check (i, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n@@ -856,7 +821,6 @@ gfc_check_ibits (gfc_expr * i, gfc_expr * pos, gfc_expr * len)\n try\n gfc_check_ibset (gfc_expr * i, gfc_expr * pos)\n {\n-\n   if (type_check (i, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n@@ -870,7 +834,6 @@ gfc_check_ibset (gfc_expr * i, gfc_expr * pos)\n try\n gfc_check_idnint (gfc_expr * a)\n {\n-\n   if (double_check (a, 0) == FAILURE)\n     return FAILURE;\n \n@@ -881,7 +844,6 @@ gfc_check_idnint (gfc_expr * a)\n try\n gfc_check_ieor (gfc_expr * i, gfc_expr * j)\n {\n-\n   if (type_check (i, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n@@ -902,7 +864,6 @@ gfc_check_ieor (gfc_expr * i, gfc_expr * j)\n try\n gfc_check_index (gfc_expr * string, gfc_expr * substring, gfc_expr * back)\n {\n-\n   if (type_check (string, 0, BT_CHARACTER) == FAILURE\n       || type_check (substring, 1, BT_CHARACTER) == FAILURE)\n     return FAILURE;\n@@ -924,7 +885,6 @@ gfc_check_index (gfc_expr * string, gfc_expr * substring, gfc_expr * back)\n try\n gfc_check_int (gfc_expr * x, gfc_expr * kind)\n {\n-\n   if (numeric_check (x, 0) == FAILURE\n       || kind_check (kind, 1, BT_INTEGER) == FAILURE)\n     return FAILURE;\n@@ -936,7 +896,6 @@ gfc_check_int (gfc_expr * x, gfc_expr * kind)\n try\n gfc_check_ior (gfc_expr * i, gfc_expr * j)\n {\n-\n   if (type_check (i, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n@@ -957,7 +916,6 @@ gfc_check_ior (gfc_expr * i, gfc_expr * j)\n try\n gfc_check_ishft (gfc_expr * i, gfc_expr * shift)\n {\n-\n   if (type_check (i, 0, BT_INTEGER) == FAILURE\n       || type_check (shift, 1, BT_INTEGER) == FAILURE)\n     return FAILURE;\n@@ -969,7 +927,6 @@ gfc_check_ishft (gfc_expr * i, gfc_expr * shift)\n try\n gfc_check_ishftc (gfc_expr * i, gfc_expr * shift, gfc_expr * size)\n {\n-\n   if (type_check (i, 0, BT_INTEGER) == FAILURE\n       || type_check (shift, 1, BT_INTEGER) == FAILURE)\n     return FAILURE;\n@@ -984,7 +941,6 @@ gfc_check_ishftc (gfc_expr * i, gfc_expr * shift, gfc_expr * size)\n try\n gfc_check_kind (gfc_expr * x)\n {\n-\n   if (x->ts.type == BT_DERIVED)\n     {\n       must_be (x, 0, \"a non-derived type\");\n@@ -998,7 +954,6 @@ gfc_check_kind (gfc_expr * x)\n try\n gfc_check_lbound (gfc_expr * array, gfc_expr * dim)\n {\n-\n   if (array_check (array, 0) == FAILURE)\n     return FAILURE;\n \n@@ -1017,7 +972,6 @@ gfc_check_lbound (gfc_expr * array, gfc_expr * dim)\n try\n gfc_check_logical (gfc_expr * a, gfc_expr * kind)\n {\n-\n   if (type_check (a, 0, BT_LOGICAL) == FAILURE)\n     return FAILURE;\n   if (kind_check (kind, 1, BT_LOGICAL) == FAILURE)\n@@ -1032,7 +986,6 @@ gfc_check_logical (gfc_expr * a, gfc_expr * kind)\n static try\n min_max_args (gfc_actual_arglist * arg)\n {\n-\n   if (arg == NULL || arg->next == NULL)\n     {\n       gfc_error (\"Intrinsic '%s' at %L must have at least two arguments\",\n@@ -1106,23 +1059,20 @@ gfc_check_min_max (gfc_actual_arglist * arg)\n try\n gfc_check_min_max_integer (gfc_actual_arglist * arg)\n {\n-\n   return check_rest (BT_INTEGER, gfc_default_integer_kind, arg);\n }\n \n \n try\n gfc_check_min_max_real (gfc_actual_arglist * arg)\n {\n-\n   return check_rest (BT_REAL, gfc_default_real_kind, arg);\n }\n \n \n try\n gfc_check_min_max_double (gfc_actual_arglist * arg)\n {\n-\n   return check_rest (BT_REAL, gfc_default_double_kind, arg);\n }\n \n@@ -1132,7 +1082,6 @@ gfc_check_min_max_double (gfc_actual_arglist * arg)\n try\n gfc_check_matmul (gfc_expr * matrix_a, gfc_expr * matrix_b)\n {\n-\n   if ((matrix_a->ts.type != BT_LOGICAL) && !gfc_numeric_ts (&matrix_b->ts))\n     {\n       must_be (matrix_a, 0, \"numeric or LOGICAL\");\n@@ -1265,31 +1214,28 @@ check_reduction (gfc_actual_arglist * ap)\n try\n gfc_check_minval_maxval (gfc_actual_arglist * ap)\n {\n-  \n   if (int_or_real_check (ap->expr, 0) == FAILURE\n       || array_check (ap->expr, 0) == FAILURE)\n     return FAILURE;\n-  \n+\n   return check_reduction (ap);\n }\n \n \n try\n gfc_check_product_sum (gfc_actual_arglist * ap)\n {\n-  \n   if (numeric_check (ap->expr, 0) == FAILURE\n       || array_check (ap->expr, 0) == FAILURE)\n     return FAILURE;\n-  \n+\n   return check_reduction (ap);\n }\n \n \n try\n gfc_check_merge (gfc_expr * tsource, gfc_expr * fsource, gfc_expr * mask)\n {\n-\n   if (same_type_check (tsource, 0, fsource, 1) == FAILURE)\n     return FAILURE;\n \n@@ -1303,7 +1249,6 @@ gfc_check_merge (gfc_expr * tsource, gfc_expr * fsource, gfc_expr * mask)\n try\n gfc_check_nearest (gfc_expr * x, gfc_expr * s)\n {\n-\n   if (type_check (x, 0, BT_REAL) == FAILURE)\n     return FAILURE;\n \n@@ -1340,7 +1285,6 @@ gfc_check_null (gfc_expr * mold)\n try\n gfc_check_pack (gfc_expr * array, gfc_expr * mask, gfc_expr * vector)\n {\n-\n   if (array_check (array, 0) == FAILURE)\n     return FAILURE;\n \n@@ -1371,7 +1315,6 @@ gfc_check_pack (gfc_expr * array, gfc_expr * mask, gfc_expr * vector)\n try\n gfc_check_precision (gfc_expr * x)\n {\n-\n   if (x->ts.type != BT_REAL && x->ts.type != BT_COMPLEX)\n     {\n       must_be (x, 0, \"of type REAL or COMPLEX\");\n@@ -1410,7 +1353,6 @@ gfc_check_present (gfc_expr * a)\n try\n gfc_check_radix (gfc_expr * x)\n {\n-\n   if (int_or_real_check (x, 0) == FAILURE)\n     return FAILURE;\n \n@@ -1421,7 +1363,6 @@ gfc_check_radix (gfc_expr * x)\n try\n gfc_check_range (gfc_expr * x)\n {\n-\n   if (numeric_check (x, 0) == FAILURE)\n     return FAILURE;\n \n@@ -1433,7 +1374,6 @@ gfc_check_range (gfc_expr * x)\n try\n gfc_check_real (gfc_expr * a, gfc_expr * kind)\n {\n-\n   if (numeric_check (a, 0) == FAILURE)\n     return FAILURE;\n \n@@ -1447,7 +1387,6 @@ gfc_check_real (gfc_expr * a, gfc_expr * kind)\n try\n gfc_check_repeat (gfc_expr * x, gfc_expr * y)\n {\n-\n   if (type_check (x, 0, BT_CHARACTER) == FAILURE)\n     return FAILURE;\n \n@@ -1516,7 +1455,6 @@ gfc_check_reshape (gfc_expr * source, gfc_expr * shape,\n try\n gfc_check_scale (gfc_expr * x, gfc_expr * i)\n {\n-\n   if (type_check (x, 0, BT_REAL) == FAILURE)\n     return FAILURE;\n \n@@ -1530,7 +1468,6 @@ gfc_check_scale (gfc_expr * x, gfc_expr * i)\n try\n gfc_check_scan (gfc_expr * x, gfc_expr * y, gfc_expr * z)\n {\n-\n   if (type_check (x, 0, BT_CHARACTER) == FAILURE)\n     return FAILURE;\n \n@@ -1550,7 +1487,6 @@ gfc_check_scan (gfc_expr * x, gfc_expr * y, gfc_expr * z)\n try\n gfc_check_selected_real_kind (gfc_expr * p, gfc_expr * r)\n {\n-\n   if (p == NULL && r == NULL)\n     {\n       gfc_error (\"Missing arguments to %s intrinsic at %L\",\n@@ -1572,7 +1508,6 @@ gfc_check_selected_real_kind (gfc_expr * p, gfc_expr * r)\n try\n gfc_check_set_exponent (gfc_expr * x, gfc_expr * i)\n {\n-\n   if (type_check (x, 0, BT_REAL) == FAILURE)\n     return FAILURE;\n \n@@ -1605,9 +1540,21 @@ gfc_check_shape (gfc_expr * source)\n \n \n try\n-gfc_check_size (gfc_expr * array, gfc_expr * dim)\n+gfc_check_sign (gfc_expr * a, gfc_expr * b)\n {\n+  if (int_or_real_check (a, 0) == FAILURE)\n+    return FAILURE;\n \n+  if (same_type_check (a, 0, b, 1) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n+try\n+gfc_check_size (gfc_expr * array, gfc_expr * dim)\n+{\n   if (array_check (array, 0) == FAILURE)\n     return FAILURE;\n \n@@ -1627,24 +1574,9 @@ gfc_check_size (gfc_expr * array, gfc_expr * dim)\n }\n \n \n-try\n-gfc_check_sign (gfc_expr * a, gfc_expr * b)\n-{\n-\n-  if (int_or_real_check (a, 0) == FAILURE)\n-    return FAILURE;\n-\n-  if (same_type_check (a, 0, b, 1) == FAILURE)\n-    return FAILURE;\n-\n-  return SUCCESS;\n-}\n-\n-\n try\n gfc_check_spread (gfc_expr * source, gfc_expr * dim, gfc_expr * ncopies)\n {\n-\n   if (source->rank >= GFC_MAX_DIMENSIONS)\n     {\n       must_be (source, 0, \"less than rank \" stringize (GFC_MAX_DIMENSIONS));\n@@ -1667,7 +1599,6 @@ gfc_check_spread (gfc_expr * source, gfc_expr * dim, gfc_expr * ncopies)\n try\n gfc_check_fstat (gfc_expr * unit, gfc_expr * array)\n {\n-\n   if (type_check (unit, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n@@ -1688,7 +1619,6 @@ gfc_check_fstat (gfc_expr * unit, gfc_expr * array)\n try\n gfc_check_fstat_sub (gfc_expr * unit, gfc_expr * array, gfc_expr * status)\n {\n-\n   if (type_check (unit, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n@@ -1719,7 +1649,6 @@ gfc_check_fstat_sub (gfc_expr * unit, gfc_expr * array, gfc_expr * status)\n try\n gfc_check_stat (gfc_expr * name, gfc_expr * array)\n {\n-\n   if (type_check (name, 0, BT_CHARACTER) == FAILURE)\n     return FAILURE;\n \n@@ -1737,7 +1666,6 @@ gfc_check_stat (gfc_expr * name, gfc_expr * array)\n try\n gfc_check_stat_sub (gfc_expr * name, gfc_expr * array, gfc_expr * status)\n {\n-\n   if (type_check (name, 0, BT_CHARACTER) == FAILURE)\n     return FAILURE;\n \n@@ -1767,7 +1695,6 @@ gfc_check_transfer (gfc_expr * source ATTRIBUTE_UNUSED,\n \t\t    gfc_expr * mold ATTRIBUTE_UNUSED,\n \t\t    gfc_expr * size)\n {\n-\n   if (size != NULL)\n     {\n       if (type_check (size, 2, BT_INTEGER) == FAILURE)\n@@ -1787,7 +1714,6 @@ gfc_check_transfer (gfc_expr * source ATTRIBUTE_UNUSED,\n try\n gfc_check_transpose (gfc_expr * matrix)\n {\n-\n   if (rank_check (matrix, 0, 2) == FAILURE)\n     return FAILURE;\n \n@@ -1798,7 +1724,6 @@ gfc_check_transpose (gfc_expr * matrix)\n try\n gfc_check_ubound (gfc_expr * array, gfc_expr * dim)\n {\n-\n   if (array_check (array, 0) == FAILURE)\n     return FAILURE;\n \n@@ -1810,14 +1735,14 @@ gfc_check_ubound (gfc_expr * array, gfc_expr * dim)\n       if (dim_rank_check (dim, array, 0) == FAILURE)\n \treturn FAILURE;\n     }\n+\n   return SUCCESS;\n }\n \n \n try\n gfc_check_unpack (gfc_expr * vector, gfc_expr * mask, gfc_expr * field)\n {\n-\n   if (rank_check (vector, 0, 1) == FAILURE)\n     return FAILURE;\n \n@@ -1837,7 +1762,6 @@ gfc_check_unpack (gfc_expr * vector, gfc_expr * mask, gfc_expr * field)\n try\n gfc_check_verify (gfc_expr * x, gfc_expr * y, gfc_expr * z)\n {\n-\n   if (type_check (x, 0, BT_CHARACTER) == FAILURE)\n     return FAILURE;\n \n@@ -1870,7 +1794,6 @@ gfc_check_trim (gfc_expr * x)\n try\n gfc_check_x (gfc_expr * x)\n {\n-\n   if (type_check (x, 0, BT_REAL) == FAILURE)\n     return FAILURE;\n \n@@ -1883,7 +1806,6 @@ gfc_check_x (gfc_expr * x)\n try\n gfc_check_cpu_time (gfc_expr * time)\n {\n-\n   if (scalar_check (time, 0) == FAILURE)\n     return FAILURE;\n \n@@ -1901,7 +1823,6 @@ try\n gfc_check_date_and_time (gfc_expr * date, gfc_expr * time,\n \t\t\t gfc_expr * zone, gfc_expr * values)\n {\n-\n   if (date != NULL)\n     {\n       if (type_check (date, 0, BT_CHARACTER) == FAILURE)\n@@ -1952,7 +1873,6 @@ try\n gfc_check_mvbits (gfc_expr * from, gfc_expr * frompos, gfc_expr * len,\n \t\t  gfc_expr * to, gfc_expr * topos)\n {\n-\n   if (type_check (from, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n@@ -1978,7 +1898,6 @@ gfc_check_mvbits (gfc_expr * from, gfc_expr * frompos, gfc_expr * len,\n try\n gfc_check_random_number (gfc_expr * harvest)\n {\n-\n   if (type_check (harvest, 0, BT_REAL) == FAILURE)\n     return FAILURE;\n \n@@ -1992,7 +1911,6 @@ gfc_check_random_number (gfc_expr * harvest)\n try\n gfc_check_random_seed (gfc_expr * size, gfc_expr * put, gfc_expr * get)\n {\n-\n   if (size != NULL)\n     {\n       if (scalar_check (size, 0) == FAILURE)\n@@ -2057,7 +1975,6 @@ gfc_check_random_seed (gfc_expr * size, gfc_expr * put, gfc_expr * get)\n try\n gfc_check_second_sub (gfc_expr * time)\n {\n-\n   if (scalar_check (time, 0) == FAILURE)\n     return FAILURE;\n \n@@ -2078,7 +1995,6 @@ try\n gfc_check_system_clock (gfc_expr * count, gfc_expr * count_rate,\n                         gfc_expr * count_max)\n {\n-\n   if (count != NULL)\n     {\n       if (scalar_check (count, 0) == FAILURE)\n@@ -2102,7 +2018,8 @@ gfc_check_system_clock (gfc_expr * count, gfc_expr * count_rate,\n       if (variable_check (count_rate, 1) == FAILURE)\n         return FAILURE;\n \n-      if (count != NULL && same_type_check(count, 0, count_rate, 1) == FAILURE)\n+      if (count != NULL\n+\t  && same_type_check (count, 0, count_rate, 1) == FAILURE)\n         return FAILURE;\n \n     }\n@@ -2118,16 +2035,16 @@ gfc_check_system_clock (gfc_expr * count, gfc_expr * count_rate,\n       if (variable_check (count_max, 2) == FAILURE)\n         return FAILURE;\n \n-      if (count != NULL && same_type_check(count, 0, count_max, 2) == FAILURE)\n+      if (count != NULL\n+\t  && same_type_check (count, 0, count_max, 2) == FAILURE)\n         return FAILURE;\n \n       if (count_rate != NULL\n-          && same_type_check(count_rate, 1, count_max, 2) == FAILURE)\n+          && same_type_check (count_rate, 1, count_max, 2) == FAILURE)\n         return FAILURE;\n+    }\n \n-   }\n-\n-    return SUCCESS;\n+  return SUCCESS;\n }\n \n try\n@@ -2236,7 +2153,6 @@ gfc_check_etime_sub (gfc_expr * values, gfc_expr * time)\n try\n gfc_check_getcwd_sub (gfc_expr * cwd, gfc_expr * status)\n {\n-\n   if (type_check (cwd, 0, BT_CHARACTER) == FAILURE)\n     return FAILURE;\n \n@@ -2256,9 +2172,8 @@ gfc_check_getcwd_sub (gfc_expr * cwd, gfc_expr * status)\n try\n gfc_check_exit (gfc_expr * status)\n {\n-  \n   if (status == NULL)\n-  return SUCCESS;\n+    return SUCCESS;\n \n   if (type_check (status, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n@@ -2273,7 +2188,6 @@ gfc_check_exit (gfc_expr * status)\n try\n gfc_check_flush (gfc_expr * unit)\n {\n-  \n   if (unit == NULL)\n     return SUCCESS;\n \n@@ -2290,7 +2204,6 @@ gfc_check_flush (gfc_expr * unit)\n try\n gfc_check_umask (gfc_expr * mask)\n {\n-\n   if (type_check (mask, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n@@ -2304,7 +2217,6 @@ gfc_check_umask (gfc_expr * mask)\n try\n gfc_check_umask_sub (gfc_expr * mask, gfc_expr * old)\n {\n-\n   if (type_check (mask, 0, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n@@ -2327,7 +2239,6 @@ gfc_check_umask_sub (gfc_expr * mask, gfc_expr * old)\n try\n gfc_check_unlink (gfc_expr * name)\n {\n-\n   if (type_check (name, 0, BT_CHARACTER) == FAILURE)\n     return FAILURE;\n \n@@ -2338,7 +2249,6 @@ gfc_check_unlink (gfc_expr * name)\n try\n gfc_check_unlink_sub (gfc_expr * name, gfc_expr * status)\n {\n-\n   if (type_check (name, 0, BT_CHARACTER) == FAILURE)\n     return FAILURE;\n "}]}