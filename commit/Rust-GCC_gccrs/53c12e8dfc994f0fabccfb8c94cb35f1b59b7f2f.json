{"sha": "53c12e8dfc994f0fabccfb8c94cb35f1b59b7f2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNjMTJlOGRmYzk5NGYwZmFiY2NmYjhjOTRjYjM1ZjFiNTliN2YyZg==", "commit": {"author": {"name": "Jason Eckhardt", "email": "jle@rice.edu", "date": "2001-11-09T22:00:08Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-11-09T22:00:08Z"}, "message": "mips.c (mips_output_conditional_branch): Do not hard code the branch target as \".+16/.+12\", but rather use labels.\n\n        * config/mips/mips.c (mips_output_conditional_branch): Do not hard\n        code the branch target as \".+16/.+12\", but rather use labels.\n\nFrom-SVN: r46893", "tree": {"sha": "d07feee8fe84917b35c1d2eb47940dc52339d7f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d07feee8fe84917b35c1d2eb47940dc52339d7f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53c12e8dfc994f0fabccfb8c94cb35f1b59b7f2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c12e8dfc994f0fabccfb8c94cb35f1b59b7f2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c12e8dfc994f0fabccfb8c94cb35f1b59b7f2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c12e8dfc994f0fabccfb8c94cb35f1b59b7f2f/comments", "author": null, "committer": null, "parents": [{"sha": "9db5bf711354f3a947027abedb151f77b54a4bce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9db5bf711354f3a947027abedb151f77b54a4bce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9db5bf711354f3a947027abedb151f77b54a4bce"}], "stats": {"total": 67, "additions": 35, "deletions": 32}, "files": [{"sha": "00661566fd6d41f104477e8ccc0ed42ab8ee2614", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c12e8dfc994f0fabccfb8c94cb35f1b59b7f2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c12e8dfc994f0fabccfb8c94cb35f1b59b7f2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53c12e8dfc994f0fabccfb8c94cb35f1b59b7f2f", "patch": "@@ -1,3 +1,8 @@\n+2001-11-08  Jason Eckhardt  <jle@rice.edu>\n+\n+\t* config/mips/mips.c (mips_output_conditional_branch): Do not hard\n+\tcode the branch target as \".+16/.+12\", but rather use labels.\n+\n Fri Nov  9 11:27:42 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* config/pa/milli64.S: Use %r25 and %r0 instead of arg1 and r0  "}, {"sha": "cab2aa1521e2551fdf646d6d559e771243e4406e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c12e8dfc994f0fabccfb8c94cb35f1b59b7f2f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c12e8dfc994f0fabccfb8c94cb35f1b59b7f2f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=53c12e8dfc994f0fabccfb8c94cb35f1b59b7f2f", "patch": "@@ -9676,46 +9676,44 @@ mips_output_conditional_branch (insn,\n \t\t.set reorder\n \t     l:\n \n-\t   Because we have to jump four bytes *past* the following\n-\t   instruction if this branch was annulled, we can't just use\n-\t   a label, as in the picture above; there's no way to put the\n-\t   label after the next instruction, as the assembler does not\n-\t   accept `.L+4' as the target of a branch.  (We can't just\n-\t   wait until the next instruction is output; it might be a\n-\t   macro and take up more than four bytes.  Once again, we see\n-\t   why we want to eliminate macros.)\n-\n-\t   If the branch is annulled, we jump four more bytes that we\n-\t   would otherwise; that way we skip the annulled instruction\n-\t   in the delay slot.  */\n+\t*/\n \n-\tconst char *const target\n-\t  = ((mips_branch_likely || length == 16) ? \".+16\" : \".+12\");\n-\tchar *c;\n+        rtx orig_target;\n+\trtx target = gen_label_rtx ();\n \n-\tstrcpy (buffer, \"%(%<\");\n-\tc = strchr (buffer, '\\0');\n-\t/* Generate the reversed comparision.  This takes four\n+        output_asm_insn (\"%(%<\", 0);\n+        orig_target = operands[1];\n+        operands[1] = target;\n+\t/* Generate the reversed comparison.  This takes four\n \t   bytes.  */\n \tif (float_p)\n-\t  sprintf (c, \"%%*b%s\\t%%Z2%s\",\n-\t\t   inverted_p ? comp : inverted_comp,\n-\t\t   target);\n+\t  sprintf (buffer, \"%%*b%s\\t%%Z2%%1\",\n+\t\t   inverted_p ? comp : inverted_comp);\n \telse\n-\t  sprintf (c, \"%%*b%s%s\\t%s%s,%s\",\n+\t  sprintf (buffer, \"%%*b%s%s\\t%s%s,%%1\",\n \t\t   inverted_p ? comp : inverted_comp,\n \t\t   need_z_p ? \"z\" : \"\",\n \t\t   op1,\n-\t\t   op2,\n-\t\t   target);\n-\tstrcat (c, \"\\n\\tnop\\n\\tj\\t%1\");\n-\tif (length == 16)\n-\t  /* The delay slot was unfilled.  Since we're inside\n-\t     .noreorder, the assembler will not fill in the NOP for\n-\t     us, so we must do it ourselves.  */\n-\t  strcat (buffer, \"\\n\\tnop\");\n-\tstrcat (buffer, \"%>%)\");\n-\treturn buffer;\n+\t\t   op2);\n+        output_asm_insn (buffer, operands);\n+        operands[1] = orig_target;\n+\n+\toutput_asm_insn (\"nop\\n\\tj\\t%1\", operands);\n+\n+        if (length == 16)\n+\t  output_asm_insn (\"nop\", 0);\n+        else\n+          {\n+            /* Output delay slot instruction.  */\n+            rtx insn = final_sequence;\n+            final_scan_insn (XVECEXP (insn, 0, 1), asm_out_file,\n+                             optimize, 0, 1);\n+            INSN_DELETED_P (XVECEXP (insn, 0, 1)) = 1;\n+          }\n+\toutput_asm_insn (\"%>%)\", 0);\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+                                   CODE_LABEL_NUMBER (target));\n+        return \"\";\n       }\n \n     /* We do not currently use this code.  It handles jumps to"}]}