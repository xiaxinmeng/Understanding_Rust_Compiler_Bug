{"sha": "04389919a6dbcb904c04ad910b4da49ff52d5d00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQzODk5MTlhNmRiY2I5MDRjMDRhZDkxMGI0ZGE0OWZmNTJkNWQwMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-11-25T09:30:04Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-11-25T09:30:04Z"}, "message": "basic-block.h (OBSTACK_ALLOC_REG_SET): Rename to ...\n\n\t* basic-block.h (OBSTACK_ALLOC_REG_SET): Rename to ...\n\t(ALLOC_REG_SET): ... here.\n\t(FREE_REG_SET): Adjust.\n\t(XMALLOC_REG_SET, XFREE_REG_SET): Remove.\n\t* bb-reorder.c (fix_crossing_conditional_branches): Adjust.\n\t* cfglayout.c (cfg_layout_duplicate_bb): Adjust.\n\t* cfgrtl.c (rtl_split_block, rtl_split_edge,\n\tsafe_insert_insn_on_edge, cfg_layout_split_edge): Adjust.\n\t* flow.c (update_life_info, calculate_global_regs_live,\n\tallocate_bb_life_data, init_propagate_block_info): Adjust.\n\t* global.c (build_insn_chain): Adjust.\n\t* ifcvt.c (dead_or_predicable): Adjust.\n\t* loop-iv.c (simplify_using_initial_values): Adjust.\n\t* recog.c (peephole2_optimize): Adjust.\n\t* sched-deps.c (init_deps_global): Adjust.\n\nFrom-SVN: r91279", "tree": {"sha": "19da8d45d735bf932467e92c989a251abed7bb43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19da8d45d735bf932467e92c989a251abed7bb43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04389919a6dbcb904c04ad910b4da49ff52d5d00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04389919a6dbcb904c04ad910b4da49ff52d5d00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04389919a6dbcb904c04ad910b4da49ff52d5d00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04389919a6dbcb904c04ad910b4da49ff52d5d00/comments", "author": null, "committer": null, "parents": [{"sha": "eb9744a7a65b4de6444f152a7e3475ae0b665c75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9744a7a65b4de6444f152a7e3475ae0b665c75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb9744a7a65b4de6444f152a7e3475ae0b665c75"}], "stats": {"total": 118, "additions": 64, "deletions": 54}, "files": [{"sha": "fae4a9ddddcfef4f926ddb286df95fa7b6ef6744", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04389919a6dbcb904c04ad910b4da49ff52d5d00", "patch": "@@ -1,3 +1,21 @@\n+2004-11-25  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* basic-block.h (OBSTACK_ALLOC_REG_SET): Rename to ...\n+\t(ALLOC_REG_SET): ... here.\n+\t(FREE_REG_SET): Adjust.\n+\t(XMALLOC_REG_SET, XFREE_REG_SET): Remove.\n+\t* bb-reorder.c (fix_crossing_conditional_branches): Adjust.\n+\t* cfglayout.c (cfg_layout_duplicate_bb): Adjust.\n+\t* cfgrtl.c (rtl_split_block, rtl_split_edge,\n+\tsafe_insert_insn_on_edge, cfg_layout_split_edge): Adjust.\n+\t* flow.c (update_life_info, calculate_global_regs_live,\n+\tallocate_bb_life_data, init_propagate_block_info): Adjust.\n+\t* global.c (build_insn_chain): Adjust.\n+\t* ifcvt.c (dead_or_predicable): Adjust.\n+\t* loop-iv.c (simplify_using_initial_values): Adjust.\n+\t* recog.c (peephole2_optimize): Adjust.\n+\t* sched-deps.c (init_deps_global): Adjust.\n+\n 2004-11-25  Ralf Corsepius <ralf.corsepius@rtems.org>\n \n \t* config.gcc (avr-*-rtems*): Fix typo."}, {"sha": "277888b13e231e4c0182ed65e53257cc9a9cd166", "filename": "gcc/basic-block.h", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=04389919a6dbcb904c04ad910b4da49ff52d5d00", "patch": "@@ -37,6 +37,12 @@ typedef bitmap_head regset_head;\n /* A pointer to a regset_head.  */\n typedef bitmap regset;\n \n+/* Allocate a register set with oballoc.  */\n+#define ALLOC_REG_SET(OBSTACK) BITMAP_OBSTACK_ALLOC (OBSTACK)\n+\n+/* Do any cleanup needed on a regset when it is no longer used.  */\n+#define FREE_REG_SET(REGSET) BITMAP_OBSTACK_FREE (REGSET)\n+\n /* Initialize a new regset.  */\n #define INIT_REG_SET(HEAD) bitmap_initialize (HEAD, &reg_obstack)\n \n@@ -101,18 +107,6 @@ typedef bitmap_iterator reg_set_iterator;\n #define EXECUTE_IF_AND_IN_REG_SET(REGSET1, REGSET2, MIN, REGNUM, RSI) \\\n   EXECUTE_IF_AND_IN_BITMAP (REGSET1, REGSET2, MIN, REGNUM, RSI)\t\\\n \n-/* Allocate a register set with oballoc.  */\n-#define OBSTACK_ALLOC_REG_SET(OBSTACK) BITMAP_OBSTACK_ALLOC (OBSTACK)\n-\n-/* Do any cleanup needed on a regset when it is no longer used.  */\n-#define FREE_REG_SET(REGSET) BITMAP_OBSTACK_FREE(REGSET)\n-\n-/* Allocate a register set with xmalloc.  */\n-#define XMALLOC_REG_SET() BITMAP_XMALLOC ()\n-\n-/* Free a register set.  */\n-#define XFREE_REG_SET(REGSET) BITMAP_XFREE (REGSET)\n-\n /* Type we use to hold basic block counters.  Should be at least\n    64bit.  Although a counter cannot be negative, we use a signed\n    type, because erroneous negative counts can be generated when the"}, {"sha": "603f921c5e829d9983a435b54f5b6934b18c6f0c", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=04389919a6dbcb904c04ad910b4da49ff52d5d00", "patch": "@@ -1690,10 +1690,8 @@ fix_crossing_conditional_branches (void)\n \t\t  \n \t\t  /* Update register liveness information.  */\n \t\t  \n-\t\t  new_bb->global_live_at_start = \n-\t\t    OBSTACK_ALLOC_REG_SET (&reg_obstack);\n-\t\t  new_bb->global_live_at_end = \n-\t\t    OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+\t\t  new_bb->global_live_at_start = ALLOC_REG_SET (&reg_obstack);\n+\t\t  new_bb->global_live_at_end = ALLOC_REG_SET (&reg_obstack);\n \t\t  COPY_REG_SET (new_bb->global_live_at_end,\n \t\t\t\tprev_bb->global_live_at_end);\n \t\t  COPY_REG_SET (new_bb->global_live_at_start,"}, {"sha": "f680eee8794a6c33f133be7230656c52599202fa", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=04389919a6dbcb904c04ad910b4da49ff52d5d00", "patch": "@@ -1116,8 +1116,8 @@ cfg_layout_duplicate_bb (basic_block bb)\n \n   if (bb->global_live_at_start)\n     {\n-      new_bb->global_live_at_start = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n-      new_bb->global_live_at_end = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+      new_bb->global_live_at_start = ALLOC_REG_SET (&reg_obstack);\n+      new_bb->global_live_at_end = ALLOC_REG_SET (&reg_obstack);\n       COPY_REG_SET (new_bb->global_live_at_start, bb->global_live_at_start);\n       COPY_REG_SET (new_bb->global_live_at_end, bb->global_live_at_end);\n     }"}, {"sha": "4e0fc4cb8fc54f0b1a62f3f038f6522992a642df", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=04389919a6dbcb904c04ad910b4da49ff52d5d00", "patch": "@@ -484,8 +484,8 @@ rtl_split_block (basic_block bb, void *insnp)\n \n   if (bb->global_live_at_start)\n     {\n-      new_bb->global_live_at_start = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n-      new_bb->global_live_at_end = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+      new_bb->global_live_at_start = ALLOC_REG_SET (&reg_obstack);\n+      new_bb->global_live_at_end = ALLOC_REG_SET (&reg_obstack);\n       COPY_REG_SET (new_bb->global_live_at_end, bb->global_live_at_end);\n \n       /* We now have to calculate which registers are live at the end\n@@ -1089,10 +1089,8 @@ force_nonfallthru_and_redirect (edge e, basic_block target)\n \n       if (target->global_live_at_start)\n \t{\n-\t  jump_block->global_live_at_start\n-\t    = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n-\t  jump_block->global_live_at_end\n-\t    = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+\t  jump_block->global_live_at_start = ALLOC_REG_SET (&reg_obstack);\n+\t  jump_block->global_live_at_end = ALLOC_REG_SET (&reg_obstack);\n \t  COPY_REG_SET (jump_block->global_live_at_start,\n \t\t\ttarget->global_live_at_start);\n \t  COPY_REG_SET (jump_block->global_live_at_end,\n@@ -1378,8 +1376,8 @@ rtl_split_edge (edge edge_in)\n   /* ??? This info is likely going to be out of date very soon.  */\n   if (edge_in->dest->global_live_at_start)\n     {\n-      bb->global_live_at_start = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n-      bb->global_live_at_end = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+      bb->global_live_at_start = ALLOC_REG_SET (&reg_obstack);\n+      bb->global_live_at_end = ALLOC_REG_SET (&reg_obstack);\n       COPY_REG_SET (bb->global_live_at_start,\n \t\t    edge_in->dest->global_live_at_start);\n       COPY_REG_SET (bb->global_live_at_end,\n@@ -1467,7 +1465,7 @@ safe_insert_insn_on_edge (rtx insn, edge e)\n   noccmode = false;\n #endif\n \n-  killed = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+  killed = ALLOC_REG_SET (&reg_obstack);\n \n   for (x = insn; x; x = NEXT_INSN (x))\n     if (INSN_P (x))\n@@ -2850,8 +2848,8 @@ cfg_layout_split_edge (edge e)\n      create it to avoid getting an ICE later.  */\n   if (e->dest->global_live_at_start)\n     {\n-      new_bb->global_live_at_start = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n-      new_bb->global_live_at_end = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+      new_bb->global_live_at_start = ALLOC_REG_SET (&reg_obstack);\n+      new_bb->global_live_at_end = ALLOC_REG_SET (&reg_obstack);\n       COPY_REG_SET (new_bb->global_live_at_start,\n \t\t    e->dest->global_live_at_start);\n       COPY_REG_SET (new_bb->global_live_at_end,"}, {"sha": "cc2c19887677586e7fbf920fc70d1e264477f99e", "filename": "gcc/flow.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=04389919a6dbcb904c04ad910b4da49ff52d5d00", "patch": "@@ -575,7 +575,7 @@ update_life_info (sbitmap blocks, enum update_life_extent extent,\n   int stabilized_prop_flags = prop_flags;\n   basic_block bb;\n \n-  tmp = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+  tmp = ALLOC_REG_SET (&reg_obstack);\n   ndead = 0;\n \n   if ((prop_flags & PROP_REG_INFO) && !reg_deaths)\n@@ -1033,9 +1033,9 @@ calculate_global_regs_live (sbitmap blocks_in, sbitmap blocks_out, int flags)\n     gcc_assert (!bb->aux);\n #endif\n \n-  tmp = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n-  new_live_at_end = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n-  invalidated_by_call = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+  tmp = ALLOC_REG_SET (&reg_obstack);\n+  new_live_at_end = ALLOC_REG_SET (&reg_obstack);\n+  invalidated_by_call = ALLOC_REG_SET (&reg_obstack);\n \n   /* Inconveniently, this is only readily available in hard reg set form.  */\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; ++i)\n@@ -1189,8 +1189,10 @@ calculate_global_regs_live (sbitmap blocks_in, sbitmap blocks_out, int flags)\n \n       if (local_sets[bb->index - (INVALID_BLOCK + 1)] == NULL)\n \t{\n-\t  local_sets[bb->index - (INVALID_BLOCK + 1)] = XMALLOC_REG_SET ();\n-\t  cond_local_sets[bb->index - (INVALID_BLOCK + 1)] = XMALLOC_REG_SET ();\n+\t  local_sets[bb->index - (INVALID_BLOCK + 1)]\n+\t    = ALLOC_REG_SET (&reg_obstack);\n+\t  cond_local_sets[bb->index - (INVALID_BLOCK + 1)]\n+\t    = ALLOC_REG_SET (&reg_obstack);\n \t  rescan = 1;\n \t}\n       else\n@@ -1294,16 +1296,16 @@ calculate_global_regs_live (sbitmap blocks_in, sbitmap blocks_out, int flags)\n       EXECUTE_IF_SET_IN_SBITMAP (blocks_out, 0, i,\n \t{\n \t  basic_block bb = BASIC_BLOCK (i);\n-\t  XFREE_REG_SET (local_sets[bb->index - (INVALID_BLOCK + 1)]);\n-\t  XFREE_REG_SET (cond_local_sets[bb->index - (INVALID_BLOCK + 1)]);\n+\t  FREE_REG_SET (local_sets[bb->index - (INVALID_BLOCK + 1)]);\n+\t  FREE_REG_SET (cond_local_sets[bb->index - (INVALID_BLOCK + 1)]);\n \t});\n     }\n   else\n     {\n       FOR_EACH_BB (bb)\n \t{\n-\t  XFREE_REG_SET (local_sets[bb->index - (INVALID_BLOCK + 1)]);\n-\t  XFREE_REG_SET (cond_local_sets[bb->index - (INVALID_BLOCK + 1)]);\n+\t  FREE_REG_SET (local_sets[bb->index - (INVALID_BLOCK + 1)]);\n+\t  FREE_REG_SET (cond_local_sets[bb->index - (INVALID_BLOCK + 1)]);\n \t}\n     }\n \n@@ -1436,11 +1438,11 @@ allocate_bb_life_data (void)\n \n   FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, NULL, next_bb)\n     {\n-      bb->global_live_at_start = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n-      bb->global_live_at_end = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+      bb->global_live_at_start = ALLOC_REG_SET (&reg_obstack);\n+      bb->global_live_at_end = ALLOC_REG_SET (&reg_obstack);\n     }\n \n-  regs_live_at_setjmp = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+  regs_live_at_setjmp = ALLOC_REG_SET (&reg_obstack);\n }\n \n void\n@@ -1843,7 +1845,7 @@ init_propagate_block_info (basic_block bb, regset live, regset local_set,\n   if (JUMP_P (BB_END (bb))\n       && any_condjump_p (BB_END (bb)))\n     {\n-      regset diff = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+      regset diff = ALLOC_REG_SET (&reg_obstack);\n       basic_block bb_true, bb_false;\n       unsigned i;\n "}, {"sha": "5e1ca72a62feedc87b9b628b4faab6a64221a14d", "filename": "gcc/global.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=04389919a6dbcb904c04ad910b4da49ff52d5d00", "patch": "@@ -1805,7 +1805,7 @@ build_insn_chain (rtx first)\n   struct insn_chain *prev = 0;\n   basic_block b = ENTRY_BLOCK_PTR->next_bb;\n \n-  live_relevant_regs = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+  live_relevant_regs = ALLOC_REG_SET (&reg_obstack);\n \n   for (; first; first = NEXT_INSN (first))\n     {"}, {"sha": "7f67a9a61a5409cd11652464c4021f55652a7d38", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=04389919a6dbcb904c04ad910b4da49ff52d5d00", "patch": "@@ -3165,10 +3165,10 @@ dead_or_predicable (basic_block test_bb, basic_block merge_bb,\n \t   TEST_SET  = set of registers set between EARLIEST and the\n \t\t       end of the block.  */\n \n-      tmp = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n-      merge_set = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n-      test_live = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n-      test_set = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+      tmp = ALLOC_REG_SET (&reg_obstack);\n+      merge_set = ALLOC_REG_SET (&reg_obstack);\n+      test_live = ALLOC_REG_SET (&reg_obstack);\n+      test_set = ALLOC_REG_SET (&reg_obstack);\n \n       /* ??? bb->local_set is only valid during calculate_global_regs_live,\n \t so we must recompute usage for MERGE_BB.  Not so bad, I suppose,"}, {"sha": "0759f2aa80c2b2dbded0e0ca5cd297972a15887c", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=04389919a6dbcb904c04ad910b4da49ff52d5d00", "patch": "@@ -1778,7 +1778,7 @@ simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n   if (e->src == ENTRY_BLOCK_PTR)\n     return;\n \n-  altered = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+  altered = ALLOC_REG_SET (&reg_obstack);\n \n   while (1)\n     {"}, {"sha": "09a98f2e33f1e769a7743c41a233b61ad6fa3212", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=04389919a6dbcb904c04ad910b4da49ff52d5d00", "patch": "@@ -2972,8 +2972,8 @@ peephole2_optimize (FILE *dump_file ATTRIBUTE_UNUSED)\n \n   /* Initialize the regsets we're going to use.  */\n   for (i = 0; i < MAX_INSNS_PER_PEEP2 + 1; ++i)\n-    peep2_insn_data[i].live_before = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n-  live = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+    peep2_insn_data[i].live_before = ALLOC_REG_SET (&reg_obstack);\n+  live = ALLOC_REG_SET (&reg_obstack);\n \n #ifdef HAVE_conditional_execution\n   blocks = sbitmap_alloc (last_basic_block);"}, {"sha": "539d02734108adbffeec5d8cda85dd023b055174", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04389919a6dbcb904c04ad910b4da49ff52d5d00/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=04389919a6dbcb904c04ad910b4da49ff52d5d00", "patch": "@@ -1580,9 +1580,9 @@ free_dependency_caches (void)\n void\n init_deps_global (void)\n {\n-  reg_pending_sets = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n-  reg_pending_clobbers = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n-  reg_pending_uses = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+  reg_pending_sets = ALLOC_REG_SET (&reg_obstack);\n+  reg_pending_clobbers = ALLOC_REG_SET (&reg_obstack);\n+  reg_pending_uses = ALLOC_REG_SET (&reg_obstack);\n   reg_pending_barrier = NOT_A_BARRIER;\n }\n "}]}