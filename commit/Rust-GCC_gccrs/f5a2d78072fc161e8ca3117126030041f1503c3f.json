{"sha": "f5a2d78072fc161e8ca3117126030041f1503c3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVhMmQ3ODA3MmZjMTYxZThjYTMxMTcxMjYwMzAwNDFmMTUwM2MzZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-09T10:49:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-09T19:46:56Z"}, "message": "libstdc++: Reduce use of debug containers in <regex>\n\nThe std::regex code uses std::map and std::vector, which means that when\n_GLIBCXX_DEBUG is defined it uses the debug versions of those\ncontainers. That no longer compiles, because I changed <regex> to\ninclude <bits/stl_map.h> and <bits/stl_vector.h> instead of <map> and\n<vector>, so the debug versions aren't defined, and std::map doesn't\ncompile. There is also a use of std::stack, which defaults to std::deque\nwhich is the debug deque when _GLIBCXX_DEBUG is defined.\n\nUsing std::map, std::vector, and std::deque is probably a mistake, and\nwe should qualify them with _GLIBCXX_STD_C instead so that the debug\nversions aren't used. We do not need the overhead of checking our own\nuses of those containers, which should be correct anyway. The exception\nis the vector base class of std::match_results, which exposes iterators\nto users, so can benefit from debug mode checks for its iterators. For\nother accesses to the vector elements, match_results already does its\nown checks, so can access the _GLIBCXX_STD_C::vector base class\ndirectly.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/regex.h (basic_regex::transform_primary): Use\n\t_GLIBCXX_STD_C::vector for local variable.\n\t* include/bits/regex.tcc (__regex_algo_impl): Use reference to\n\t_GLIBCXX_STD_C::vector base class of match_results.\n\t* include/bits/regex_automaton.tcc (_StateSeq:_M_clone): Use\n\t_GLIBCXX_STD_C::map and _GLIBCXX_STD_C::deque for local\n\tvariables.\n\t* include/bits/regex_compiler.h (_BracketMatcher): Use\n\t_GLIBCXX_STD_C::vector for data members.\n\t* include/bits/regex_executor.h (_Executor): Likewise.\n\t* include/std/regex [_GLIBCXX_DEBUG]: Include <debug/vector>.", "tree": {"sha": "ba78501ade69cba3dc0030ae7e8b6899b6082a33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba78501ade69cba3dc0030ae7e8b6899b6082a33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5a2d78072fc161e8ca3117126030041f1503c3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a2d78072fc161e8ca3117126030041f1503c3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5a2d78072fc161e8ca3117126030041f1503c3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a2d78072fc161e8ca3117126030041f1503c3f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1354603bf7d2ef8cd0cb1f76e801732020502987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1354603bf7d2ef8cd0cb1f76e801732020502987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1354603bf7d2ef8cd0cb1f76e801732020502987"}], "stats": {"total": 55, "additions": 30, "deletions": 25}, "files": [{"sha": "b8a0ad251d8bbb3ced020fc1936a618536071c6e", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a2d78072fc161e8ca3117126030041f1503c3f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a2d78072fc161e8ca3117126030041f1503c3f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=f5a2d78072fc161e8ca3117126030041f1503c3f", "patch": "@@ -257,7 +257,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t  // for details.\n \t  typedef std::ctype<char_type> __ctype_type;\n \t  const __ctype_type& __fctyp(use_facet<__ctype_type>(_M_locale));\n-\t  std::vector<char_type> __s(__first, __last);\n+\t  _GLIBCXX_STD_C::vector<char_type> __s(__first, __last);\n \t  __fctyp.tolower(__s.data(), __s.data() + __s.size());\n \t  return this->transform(__s.data(), __s.data() + __s.size());\n \t}\n@@ -1697,6 +1697,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * [n+3] suffix\n        */\n       typedef std::vector<sub_match<_Bi_iter>, _Alloc>     _Base_type;\n+      // In debug mode _Base_type is the debug vector, this is the unsafe one:\n+      typedef _GLIBCXX_STD_C::vector<sub_match<_Bi_iter>, _Alloc> _Unchecked;\n       typedef std::iterator_traits<_Bi_iter>   \t   \t   __iter_traits;\n       typedef regex_constants::match_flag_type\t\t   match_flag_type;\n \n@@ -1773,7 +1775,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * @retval true   The object has a fully-established result state.\n        * @retval false  The object is not ready.\n        */\n-      bool ready() const noexcept { return !_Base_type::empty(); }\n+      bool ready() const noexcept { return !_Unchecked::empty(); }\n \n       /**\n        * @name 28.10.2 Size\n@@ -1791,11 +1793,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       size_type\n       size() const noexcept\n-      { return _Base_type::empty() ? 0 : _Base_type::size() - 3; }\n+      { return _Unchecked::empty() ? 0 : _Unchecked::size() - 3; }\n \n       size_type\n       max_size() const noexcept\n-      { return _Base_type::max_size() - 3; }\n+      { return _Unchecked::max_size() - 3; }\n \n       /**\n        * @brief Indicates if the %match_results contains no results.\n@@ -1869,7 +1871,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       {\n \t__glibcxx_assert( ready() );\n \treturn __sub < size()\n-\t       ? _Base_type::operator[](__sub)\n+\t       ? _Unchecked::operator[](__sub)\n \t       : _M_unmatched_sub();\n       }\n \n@@ -2045,40 +2047,40 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       // (plus additional objects for prefix, suffix and unmatched sub).\n       void\n       _M_resize(unsigned int __size)\n-      { _Base_type::assign(__size + 3, sub_match<_Bi_iter>{}); }\n+      { _Unchecked::assign(__size + 3, sub_match<_Bi_iter>{}); }\n \n       // Set state to a failed match for the given past-the-end iterator.\n       void\n       _M_establish_failed_match(_Bi_iter __end)\n       {\n \tsub_match<_Bi_iter> __sm;\n \t__sm.first = __sm.second = __end;\n-\t_Base_type::assign(3, __sm);\n+\t_Unchecked::assign(3, __sm);\n       }\n \n       const_reference\n       _M_unmatched_sub() const\n-      { return _Base_type::operator[](_Base_type::size() - 3); }\n+      { return _Unchecked::operator[](_Unchecked::size() - 3); }\n \n       sub_match<_Bi_iter>&\n       _M_unmatched_sub()\n-      { return _Base_type::operator[](_Base_type::size() - 3); }\n+      { return _Unchecked::operator[](_Unchecked::size() - 3); }\n \n       const_reference\n       _M_prefix() const\n-      { return _Base_type::operator[](_Base_type::size() - 2); }\n+      { return _Unchecked::operator[](_Unchecked::size() - 2); }\n \n       sub_match<_Bi_iter>&\n       _M_prefix()\n-      { return _Base_type::operator[](_Base_type::size() - 2); }\n+      { return _Unchecked::operator[](_Unchecked::size() - 2); }\n \n       const_reference\n       _M_suffix() const\n-      { return _Base_type::operator[](_Base_type::size() - 1); }\n+      { return _Unchecked::operator[](_Unchecked::size() - 1); }\n \n       sub_match<_Bi_iter>&\n       _M_suffix()\n-      { return _Base_type::operator[](_Base_type::size() - 1); }\n+      { return _Unchecked::operator[](_Unchecked::size() - 1); }\n \n       _Bi_iter _M_begin;\n       /// @endcond"}, {"sha": "c8bdd377c1880f6f9412f9d6ba24a63bd8c0d8f2", "filename": "libstdc++-v3/include/bits/regex.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a2d78072fc161e8ca3117126030041f1503c3f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a2d78072fc161e8ca3117126030041f1503c3f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc?ref=f5a2d78072fc161e8ca3117126030041f1503c3f", "patch": "@@ -56,7 +56,7 @@ namespace __detail\n       if (__re._M_automaton == nullptr)\n \treturn false;\n \n-      typename match_results<_BiIter, _Alloc>::_Base_type& __res = __m;\n+      typename match_results<_BiIter, _Alloc>::_Unchecked& __res = __m;\n       __m._M_begin = __s;\n       __m._M_resize(__re._M_automaton->_M_sub_count());\n \n@@ -66,7 +66,7 @@ namespace __detail\n \t      && !__re._M_automaton->_M_has_backref))\n \t{\n \t  _Executor<_BiIter, _Alloc, _TraitsT, false>\n-\t    __executor(__s, __e, __m, __re, __flags);\n+\t    __executor(__s, __e, __res, __re, __flags);\n \t  if (__match_mode)\n \t    __ret = __executor._M_match();\n \t  else\n@@ -75,7 +75,7 @@ namespace __detail\n       else\n \t{\n \t  _Executor<_BiIter, _Alloc, _TraitsT, true>\n-\t    __executor(__s, __e, __m, __re, __flags);\n+\t    __executor(__s, __e, __res, __re, __flags);\n \t  if (__match_mode)\n \t    __ret = __executor._M_match();\n \t  else"}, {"sha": "69f3ee5ba3c5dee16be85feba0c27312eba7ce80", "filename": "libstdc++-v3/include/bits/regex_automaton.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a2d78072fc161e8ca3117126030041f1503c3f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a2d78072fc161e8ca3117126030041f1503c3f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc?ref=f5a2d78072fc161e8ca3117126030041f1503c3f", "patch": "@@ -194,8 +194,8 @@ namespace __detail\n     _StateSeq<_TraitsT>\n     _StateSeq<_TraitsT>::_M_clone()\n     {\n-      std::map<_StateIdT, _StateIdT> __m;\n-      std::stack<_StateIdT> __stack;\n+      _GLIBCXX_STD_C::map<_StateIdT, _StateIdT> __m;\n+      std::stack<_StateIdT, _GLIBCXX_STD_C::deque<_StateIdT>> __stack;\n       __stack.push(_M_start);\n       while (!__stack.empty())\n \t{"}, {"sha": "5b4f2ae35582f956fe6a884be42eb296073746cb", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a2d78072fc161e8ca3117126030041f1503c3f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a2d78072fc161e8ca3117126030041f1503c3f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=f5a2d78072fc161e8ca3117126030041f1503c3f", "patch": "@@ -538,10 +538,10 @@ namespace __detail\n       { }\n \n     private:\n-      std::vector<_CharT>                       _M_char_set;\n-      std::vector<_StringT>                     _M_equiv_set;\n-      std::vector<pair<_StrTransT, _StrTransT>> _M_range_set;\n-      std::vector<_CharClassT>                  _M_neg_class_set;\n+      _GLIBCXX_STD_C::vector<_CharT>            _M_char_set;\n+      _GLIBCXX_STD_C::vector<_StringT>          _M_equiv_set;\n+      _GLIBCXX_STD_C::vector<pair<_StrTransT, _StrTransT>> _M_range_set;\n+      _GLIBCXX_STD_C::vector<_CharClassT>       _M_neg_class_set;\n       _CharClassT                               _M_class_set;\n       _TransT                                   _M_translator;\n       const _TraitsT&                           _M_traits;"}, {"sha": "3422893371aced05a7c694a89a07af1460c1956c", "filename": "libstdc++-v3/include/bits/regex_executor.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a2d78072fc161e8ca3117126030041f1503c3f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a2d78072fc161e8ca3117126030041f1503c3f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h?ref=f5a2d78072fc161e8ca3117126030041f1503c3f", "patch": "@@ -60,7 +60,7 @@ namespace __detail\n     public:\n       typedef typename iterator_traits<_BiIter>::value_type _CharT;\n       typedef basic_regex<_CharT, _TraitsT>                 _RegexT;\n-      typedef std::vector<sub_match<_BiIter>, _Alloc>       _ResultsVec;\n+      typedef _GLIBCXX_STD_C::vector<sub_match<_BiIter>, _Alloc> _ResultsVec;\n       typedef regex_constants::match_flag_type              _FlagT;\n       typedef typename _TraitsT::char_class_type            _ClassT;\n       typedef _NFA<_TraitsT>                                _NFAT;\n@@ -215,7 +215,7 @@ namespace __detail\n \t  _BiIter* _M_get_sol_pos() { return nullptr; }\n \n \t  // Saves states that need to be considered for the next character.\n-\t  vector<pair<_StateIdT, _ResultsVec>>\t_M_match_queue;\n+\t  _GLIBCXX_STD_C::vector<pair<_StateIdT, _ResultsVec>> _M_match_queue;\n \t  // Indicates which states are already visited.\n \t  bool*     _M_visited_states;\n \t  // To record current solution.\n@@ -248,7 +248,7 @@ namespace __detail\n       const _RegexT&                                        _M_re;\n       const _NFAT&                                          _M_nfa;\n       _ResultsVec&                                          _M_results;\n-      vector<pair<_BiIter, int>>                            _M_rep_count;\n+      _GLIBCXX_STD_C::vector<pair<_BiIter, int>>            _M_rep_count;\n       _State_info<__search_mode, _ResultsVec>\t\t    _M_states;\n       _FlagT                                                _M_flags;\n       // Do we have a solution so far?"}, {"sha": "2c94fa306c291c25301707d53d4eae840e3c78ba", "filename": "libstdc++-v3/include/std/regex", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a2d78072fc161e8ca3117126030041f1503c3f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a2d78072fc161e8ca3117126030041f1503c3f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex?ref=f5a2d78072fc161e8ca3117126030041f1503c3f", "patch": "@@ -55,6 +55,9 @@\n #include <bits/stl_vector.h>\n #include <bits/stl_bvector.h>\n #include <bits/vector.tcc>\n+#ifdef _GLIBCXX_DEBUG\n+# include <debug/vector>\n+#endif\n #include <bits/regex_constants.h>\n #include <bits/regex_error.h>\n #include <bits/regex_automaton.h>"}]}