{"sha": "70a0039b82b3419820359c8a1552470e48b458f6", "node_id": "C_kwDOANBUbNoAKDcwYTAwMzliODJiMzQxOTgyMDM1OWM4YTE1NTI0NzBlNDhiNDU4ZjY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-08-11T13:33:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-11T13:33:48Z"}, "message": "Merge #1464\n\n1464: Remove unused include in HIR r=philberty a=philberty\n\nThis is a hang over from the AST bootstrap of the HIR tree's\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "4bb90d3d090b807e8614eb9e3b95c549a356529d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bb90d3d090b807e8614eb9e3b95c549a356529d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70a0039b82b3419820359c8a1552470e48b458f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi9QU8CRBK7hj4Ov3rIwAAxCEIAJnhf/Km+BFo1bgfZeY5zBSD\nMCFfJy7/JdHrxG+F7jtYDx9DuBSjNxbxZCmkRbti3UdRaROk17idva1V2jMBOaPc\nuEHQd2HtVU3eajEw6HHZ3i5SScY8Eup7kLaz5H3T1HdfbT07Acpu0+YFRz7LWoiO\ncMEw2DEh+Fh2prWYgIWO77k9XAijTTK0e+beu/eZ/B12ziPtyS4m+lc8t8ZCexXd\nde62pJYqGhccCPwnH5Grz6cTJYu1JM+8OCJyP2CgYmx3SMZqisAcI+fAuIlTUfI9\n/fZBIgZtQOB5OiTq+5+uMhYd+jVBMEwG9XOmFjVpI7RwM3Z3Jqg0mkmUPv93yCw=\n=x7mF\n-----END PGP SIGNATURE-----\n", "payload": "tree 4bb90d3d090b807e8614eb9e3b95c549a356529d\nparent e57bbcb24146139c48911deced919939f69b0646\nparent 46ef912923897a967e5c0d8641176300011be8b7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1660224828 +0000\ncommitter GitHub <noreply@github.com> 1660224828 +0000\n\nMerge #1464\n\n1464: Remove unused include in HIR r=philberty a=philberty\n\nThis is a hang over from the AST bootstrap of the HIR tree's\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a0039b82b3419820359c8a1552470e48b458f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70a0039b82b3419820359c8a1552470e48b458f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a0039b82b3419820359c8a1552470e48b458f6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e57bbcb24146139c48911deced919939f69b0646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57bbcb24146139c48911deced919939f69b0646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e57bbcb24146139c48911deced919939f69b0646"}, {"sha": "46ef912923897a967e5c0d8641176300011be8b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ef912923897a967e5c0d8641176300011be8b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ef912923897a967e5c0d8641176300011be8b7"}], "stats": {"total": 249, "additions": 0, "deletions": 249}, "files": [{"sha": "a8a13d28189d79600c3ae9f2bf09e2cf6bf0bae4", "filename": "gcc/rust/hir/tree/rust-hir-cond-compilation.h", "status": "removed", "additions": 0, "deletions": 249, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57bbcb24146139c48911deced919939f69b0646/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-cond-compilation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57bbcb24146139c48911deced919939f69b0646/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-cond-compilation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-cond-compilation.h?ref=e57bbcb24146139c48911deced919939f69b0646", "patch": "@@ -1,249 +0,0 @@\n-// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n-\n-// This file is part of GCC.\n-\n-// GCC is free software; you can redistribute it and/or modify it under\n-// the terms of the GNU General Public License as published by the Free\n-// Software Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-// for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with GCC; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#ifndef RUST_AST_CONDCOMPILATION\n-#define RUST_AST_CONDCOMPILATION\n-\n-#include \"rust-ast-full-decls.h\"\n-#include \"rust-hir.h\"\n-\n-namespace Rust {\n-namespace HIR {\n-// Base conditional compilation configuration predicate thing - abstract\n-class ConfigurationPredicate\n-{\n-public:\n-  virtual ~ConfigurationPredicate () {}\n-\n-  // Unique pointer custom clone function\n-  std::unique_ptr<ConfigurationPredicate> clone_configuration_predicate () const\n-  {\n-    return std::unique_ptr<ConfigurationPredicate> (\n-      clone_configuration_predicate_impl ());\n-  }\n-\n-  // not sure if I'll use this but here anyway\n-  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n-\n-protected:\n-  // Clone function impl to be overriden in base classes\n-  virtual ConfigurationPredicate *\n-  clone_configuration_predicate_impl () const = 0;\n-};\n-\n-// A configuration option - true if option is set, false if option is not set.\n-class ConfigurationOption : public ConfigurationPredicate\n-{\n-  Identifier option_name;\n-\n-  // bool has_string_literal_option_body;\n-  std::string option_value; // technically a string or raw string literal\n-\n-public:\n-  /* Returns whether the configuration option has a \"value\" part of the\n-   * key-value pair. */\n-  bool has_option_value () const { return !option_value.empty (); }\n-\n-  // Key-value pair constructor\n-  ConfigurationOption (Identifier option_name, std::string option_value)\n-    : option_name (option_name), option_value (option_value)\n-  {}\n-\n-  // Name-only constructor\n-  ConfigurationOption (Identifier option_name) : option_name (option_name) {}\n-\n-  void accept_vis (HIRFullVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  ConfigurationOption *clone_configuration_predicate_impl () const override\n-  {\n-    return new ConfigurationOption (*this);\n-  }\n-};\n-\n-// TODO: inline\n-struct ConfigurationPredicateList\n-{\n-  std::vector<std::unique_ptr<ConfigurationPredicate> > predicate_list;\n-};\n-\n-// Predicate that returns true if all of the supplied predicates return true.\n-class ConfigurationAll : public ConfigurationPredicate\n-{\n-  std::vector<std::unique_ptr<ConfigurationPredicate> >\n-    predicate_list; // inlined form\n-\n-public:\n-  ConfigurationAll (\n-    std::vector<std::unique_ptr<ConfigurationPredicate> > predicate_list)\n-    : predicate_list (predicate_list)\n-  {}\n-\n-  void accept_vis (HIRFullVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  ConfigurationAll *clone_configuration_predicate_impl () const override\n-  {\n-    return new ConfigurationAll (*this);\n-  }\n-};\n-\n-// Predicate that returns true if any of the supplied predicates are true.\n-class ConfigurationAny : public ConfigurationPredicate\n-{\n-  std::vector<std::unique_ptr<ConfigurationPredicate> >\n-    predicate_list; // inlined form\n-\n-public:\n-  ConfigurationAny (\n-    std::vector<std::unique_ptr<ConfigurationPredicate> > predicate_list)\n-    : predicate_list (predicate_list)\n-  {}\n-\n-  void accept_vis (HIRFullVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  ConfigurationAny *clone_configuration_predicate_impl () const override\n-  {\n-    return new ConfigurationAny (*this);\n-  }\n-};\n-\n-/* Predicate that produces the negation of a supplied other configuration\n- * predicate. */\n-class ConfigurationNot : public ConfigurationPredicate\n-{\n-  std::unique_ptr<ConfigurationPredicate> config_to_negate;\n-\n-public:\n-  ConfigurationNot (ConfigurationPredicate *config_to_negate)\n-    : config_to_negate (config_to_negate)\n-  {}\n-\n-  // Copy constructor with clone\n-  ConfigurationNot (ConfigurationNot const &other)\n-    : config_to_negate (\n-      other.config_to_negate->clone_configuration_predicate ())\n-  {}\n-\n-  // Overloaded assignment operator to clone\n-  ConfigurationNot &operator= (ConfigurationNot const &other)\n-  {\n-    config_to_negate = other.config_to_negate->clone_configuration_predicate ();\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  ConfigurationNot (ConfigurationNot &&other) = default;\n-  ConfigurationNot &operator= (ConfigurationNot &&other) = default;\n-\n-  void accept_vis (HIRFullVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  ConfigurationNot *clone_configuration_predicate_impl () const override\n-  {\n-    return new ConfigurationNot (*this);\n-  }\n-};\n-\n-// TODO: relationship to other attributes?\n-class CfgAttribute\n-{\n-  std::unique_ptr<ConfigurationPredicate> config_to_include;\n-\n-public:\n-  CfgAttribute (ConfigurationPredicate *config_to_include)\n-    : config_to_include (config_to_include)\n-  {}\n-\n-  // Copy constructor with clone\n-  CfgAttribute (CfgAttribute const &other)\n-    : config_to_include (\n-      other.config_to_include->clone_configuration_predicate ())\n-  {}\n-\n-  // Overloaded assignment operator to clone\n-  CfgAttribute &operator= (CfgAttribute const &other)\n-  {\n-    config_to_include\n-      = other.config_to_include->clone_configuration_predicate ();\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  CfgAttribute (CfgAttribute &&other) = default;\n-  CfgAttribute &operator= (CfgAttribute &&other) = default;\n-};\n-/* TODO: ok, best thing to do would be eliminating this class, making Attribute\n- * has a \"is_cfg()\" method, and having attribute path as \"cfg\" and AttrInput as\n- * ConfigurationPredicate (so make ConfigurationPredicate a subclass of\n- * AttrInput?). Would need special handling in parser, however. */\n-\n-// TODO: inline\n-struct CfgAttrs\n-{\n-  AST::AttrVec cfg_attrs;\n-};\n-\n-// TODO: relationship to other attributes?\n-class CfgAttrAttribute\n-{\n-  std::unique_ptr<ConfigurationPredicate> config_to_include;\n-  AST::AttrVec cfg_attrs;\n-\n-public:\n-  CfgAttrAttribute (ConfigurationPredicate *config_to_include,\n-\t\t    AST::AttrVec cfg_attrs)\n-    : config_to_include (config_to_include), cfg_attrs (cfg_attrs)\n-  {}\n-\n-  // Copy constructor with clone\n-  CfgAttrAttribute (CfgAttrAttribute const &other)\n-    : config_to_include (\n-      other.config_to_include->clone_configuration_predicate ()),\n-      cfg_attrs (cfg_attrs)\n-  {}\n-\n-  // Overloaded assignment operator to clone\n-  CfgAttrAttribute &operator= (CfgAttrAttribute const &other)\n-  {\n-    config_to_include\n-      = other.config_to_include->clone_configuration_predicate ();\n-    cfg_attrs = other.cfg_attrs;\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  CfgAttrAttribute (CfgAttrAttribute &&other) = default;\n-  CfgAttrAttribute &operator= (CfgAttrAttribute &&other) = default;\n-};\n-} // namespace HIR\n-} // namespace Rust\n-\n-#endif"}]}