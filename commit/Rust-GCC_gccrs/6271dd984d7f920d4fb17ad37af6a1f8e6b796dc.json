{"sha": "6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI3MWRkOTg0ZDdmOTIwZDRmYjE3YWQzN2FmNmExZjhlNmI3OTZkYw==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2019-11-20T16:29:23Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2019-11-20T16:29:23Z"}, "message": "PR85678: Change default to -fno-common\n\nGCC currently defaults to -fcommon.  As discussed in the PR, this is an ancient\nC feature which is not conforming with the latest C standards.  On many targets\nthis means global variable accesses have a codesize and performance penalty.\nThis applies to C code only, C++ code is not affected by -fcommon.  It is about\ntime to change the default.\n\n    gcc/\n\tPR85678\n\t* common.opt (fcommon): Change init to 1.\n\t* invoke.texi (-fcommon): Update documentation.\n\n    testsuite/\n\t* g++.dg/lto/odr-6_1.c: Add -fcommon.\n\t* gcc.dg/alias-15.c: Likewise.\n\t* gcc.dg/fdata-sections-1.c: Likewise.\t\n\t* gcc.dg/ipa/pr77653.c: Likewise.\n\t* gcc.dg/lto/20090729_0.c: Likewise.\n\t* gcc.dg/lto/20111207-1_0.c: Likewise.\n\t* gcc.dg/lto/c-compatible-types-1_0.c: Likewise.\n\t* gcc.dg/lto/pr55525_0.c: Likewise.\n\t* gcc.dg/lto/pr88077_0.c: Use long to avoid alignment warning.\n\t* gcc.dg/lto/pr88077_1.c: Add -fcommon.\n\t* gcc.target/aarch64/sve/peel_ind_1.c: Allow ANCHOR0.\n\t* gcc.target/aarch64/sve/peel_ind_2.c: Likewise.\n\t* gcc.target/aarch64/sve/peel_ind_3.c: Likewise.\n\t* gcc.target/i386/volatile-bitfields-2.c: Allow movl or movq.\n\nFrom-SVN: r278509", "tree": {"sha": "52b4e9a530656bb17209232f777900c2b9d04604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52b4e9a530656bb17209232f777900c2b9d04604"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/comments", "author": null, "committer": null, "parents": [{"sha": "83115e9eb8a54893088eb556fb4cc9194c0c5926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83115e9eb8a54893088eb556fb4cc9194c0c5926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83115e9eb8a54893088eb556fb4cc9194c0c5926"}], "stats": {"total": 95, "additions": 57, "deletions": 38}, "files": [{"sha": "4b5168827a522e4a189e5baf5560a78112e38316", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -1,3 +1,9 @@\n+2019-11-20  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR85678\n+\t* common.opt (fcommon): Change init to 1.\n+\t* doc/invoke.texi (-fcommon): Update documentation.\n+\n 2019-11-20  Jan Hubicka  <jh@suse.cz>\n \n \t* fibonacci_heap.h (fibonacci_heap<K,V>::consolidate): Turn auto_vec"}, {"sha": "404b6aac2988ae1a1d655d4933841020269fa22b", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -1131,7 +1131,7 @@ Common Report Var(flag_combine_stack_adjustments) Optimization\n Looks for opportunities to reduce stack adjustments and stack references.\n \n fcommon\n-Common Report Var(flag_no_common,0)\n+Common Report Var(flag_no_common,0) Init(1)\n Put uninitialized globals in the common section.\n \n fcompare-debug"}, {"sha": "031bfd2a2634a38c0fc8acd604b8f7a81f78a3d4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -569,7 +569,7 @@ Objective-C and Objective-C++ Dialects}.\n -fnon-call-exceptions  -fdelete-dead-exceptions  -funwind-tables @gol\n -fasynchronous-unwind-tables @gol\n -fno-gnu-unique @gol\n--finhibit-size-directive  -fno-common  -fno-ident @gol\n+-finhibit-size-directive  -fcommon  -fno-ident @gol\n -fpcc-struct-return  -fpic  -fPIC  -fpie  -fPIE  -fno-plt @gol\n -fno-jump-tables @gol\n -frecord-gcc-switches @gol\n@@ -14112,35 +14112,27 @@ useful for building programs to run under WINE@.\n code that is not binary compatible with code generated without that switch.\n Use it to conform to a non-default application binary interface.\n \n-@item -fno-common\n-@opindex fno-common\n+@item -fcommon\n @opindex fcommon\n+@opindex fno-common\n @cindex tentative definitions\n-In C code, this option controls the placement of global variables \n-defined without an initializer, known as @dfn{tentative definitions} \n-in the C standard.  Tentative definitions are distinct from declarations \n+In C code, this option controls the placement of global variables\n+defined without an initializer, known as @dfn{tentative definitions}\n+in the C standard.  Tentative definitions are distinct from declarations\n of a variable with the @code{extern} keyword, which do not allocate storage.\n \n-Unix C compilers have traditionally allocated storage for\n-uninitialized global variables in a common block.  This allows the\n-linker to resolve all tentative definitions of the same variable\n+The default is @option{-fno-common}, which specifies that the compiler places\n+uninitialized global variables in the BSS section of the object file.\n+This inhibits the merging of tentative definitions by the linker so you get a\n+multiple-definition error if the same variable is accidentally defined in more\n+than one compilation unit.\n+\n+The @option{-fcommon} places uninitialized global variables in a common block.\n+This allows the linker to resolve all tentative definitions of the same variable\n in different compilation units to the same object, or to a non-tentative\n-definition.  \n-This is the behavior specified by @option{-fcommon}, and is the default for \n-GCC on most targets.  \n-On the other hand, this behavior is not required by ISO\n-C, and on some targets may carry a speed or code size penalty on\n-variable references.\n-\n-The @option{-fno-common} option specifies that the compiler should instead\n-place uninitialized global variables in the BSS section of the object file.\n-This inhibits the merging of tentative definitions by the linker so\n-you get a multiple-definition error if the same \n-variable is defined in more than one compilation unit.\n-Compiling with @option{-fno-common} is useful on targets for which\n-it provides better performance, or if you wish to verify that the\n-program will work on other systems that always treat uninitialized\n-variable definitions this way.\n+definition.  This behavior does not conform to ISO C, is inconsistent with C++,\n+and on many targets implies a speed and code size penalty on global variable\n+references.  It is mainly useful to enable legacy code to link without errors.\n \n @item -fno-ident\n @opindex fno-ident"}, {"sha": "8aad0e4e339a45bd3ac94966470651214e084e0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -1,3 +1,21 @@\n+2019-11-20  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR85678\n+\t* g++.dg/lto/odr-6_1.c: Add -fcommon.\n+\t* gcc.dg/alias-15.c: Likewise.\n+\t* gcc.dg/fdata-sections-1.c: Likewise.\t\n+\t* gcc.dg/ipa/pr77653.c: Likewise.\n+\t* gcc.dg/lto/20090729_0.c: Likewise.\n+\t* gcc.dg/lto/20111207-1_0.c: Likewise.\n+\t* gcc.dg/lto/c-compatible-types-1_0.c: Likewise.\n+\t* gcc.dg/lto/pr55525_0.c: Likewise.\n+\t* gcc.dg/lto/pr88077_0.c: Use long to avoid alignment warning.\n+\t* gcc.dg/lto/pr88077_1.c: Add -fcommon.\n+\t* gcc.target/aarch64/sve/peel_ind_1.c: Allow ANCHOR0.\n+\t* gcc.target/aarch64/sve/peel_ind_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/peel_ind_3.c: Likewise.\n+\t* gcc.target/i386/volatile-bitfields-2.c: Allow movl or movq.\n+\n 2019-11-20  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/vect/bb-slp-42.c: Adjust."}, {"sha": "8328bf59a4cb60173b86ea4153520d11d15a1b1f", "filename": "gcc/testsuite/g++.dg/lto/odr-6_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-6_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-6_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-6_1.c?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-options {-fcommon} } */\n struct {} admbaserest_; // { dg-lto-message \"type of \" 2 }\n \n "}, {"sha": "304ad1fbaeb7fe68ef26efd31c2ee545db6a0ffc", "filename": "gcc/testsuite/gcc.dg/alias-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Falias-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Falias-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falias-15.c?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-additional-options  \"-O2 -fdump-ipa-cgraph\" } */\n+/* { dg-additional-options  \"-O2 -fcommon -fdump-ipa-cgraph\" } */\n \n /* RTL-level CSE shouldn't introduce LCO (for the string) into varpool */\n char *p;"}, {"sha": "de5ddfc0179a588ce1bdb3d5f39a14438823c071", "filename": "gcc/testsuite/gcc.dg/fdata-sections-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Ffdata-sections-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Ffdata-sections-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffdata-sections-1.c?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -2,7 +2,7 @@\n /* Origin: Jonathan Larmour <jifl-bugzilla@jifvik.org> */\n \n /* { dg-do compile { target *-*-linux* *-*-gnu* *-*-uclinux* } } */\n-/* { dg-options \"-fdata-sections\" } */\n+/* { dg-options \"-fcommon -fdata-sections\" } */\n \n int x;\n "}, {"sha": "2fddb7eab548690a7a9d2edb3172c2b17ff9ea63", "filename": "gcc/testsuite/gcc.dg/ipa/pr77653.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr77653.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr77653.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr77653.c?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-require-alias \"\" } */\n-/* { dg-options \"-O2 -fdump-ipa-icf-details\"  } */\n+/* { dg-options \"-O2 -fcommon -fdump-ipa-icf-details\"  } */\n \n int a, b, c, d, e, h, i, j, k, l;\n const int f;"}, {"sha": "13fe62b5923b7c868373d8ca269730aa588d4992", "filename": "gcc/testsuite/gcc.dg/lto/20090729_0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090729_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090729_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090729_0.c?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-lto-options \"-w\" } */\n+/* { dg-lto-options { {-fcommon -w} {-fcommon} } } */\n \n double i;\n int j;"}, {"sha": "5f11264af17a5a50c6d27e6eb8667bbdfce131f1", "filename": "gcc/testsuite/gcc.dg/lto/20111207-1_0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20111207-1_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20111207-1_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20111207-1_0.c?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -1,4 +1,4 @@\n /* { dg-lto-do run } */\n-/* { dg-lto-options { { -flto } } } */\n+/* { dg-lto-options { { -flto -fcommon } {-fcommon} {-fcommon} {-fcommon} } } */\n /* { dg-require-linker-plugin \"\" } */\n /* { dg-extra-ld-options \"-fuse-linker-plugin\" } */"}, {"sha": "45b03735a6befd47b5b24cab5c62ecc8792aed4c", "filename": "gcc/testsuite/gcc.dg/lto/c-compatible-types-1_0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fc-compatible-types-1_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fc-compatible-types-1_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fc-compatible-types-1_0.c?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-lto-do run } */\n-/* { dg-lto-options \"-O3\" } */\n+/* { dg-lto-options { {-O3 -fcommon} {-fcommon} } } */\n \n /* By C standard Each enumerated type shall be compatible with char, a  signed\n    integer, type, or an unsigned integer type. The choice of type is"}, {"sha": "d8d16d11d32d3918bc47f4b41c7e7dabe255fd39", "filename": "gcc/testsuite/gcc.dg/lto/pr55525_0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr55525_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr55525_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr55525_0.c?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-lto-do link } */\n-/* { dg-lto-options { { -flto -w } } } */\n+/* { dg-lto-options { { -fcommon -flto -w } } } */\n \n char s[sizeof (char *)];\n int main(void)"}, {"sha": "924fe9fc3f01f64c2712480c5507693e66e7b5f8", "filename": "gcc/testsuite/gcc.dg/lto/pr88077_0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr88077_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr88077_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr88077_0.c?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -1,3 +1,3 @@\n /* { dg-lto-do link } */\n \n-int HeaderStr;\n+long HeaderStr;"}, {"sha": "43d783f2cc7dd4ad1cb34a8ea314bb062410539d", "filename": "gcc/testsuite/gcc.dg/lto/pr88077_1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr88077_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr88077_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr88077_1.c?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-options {-fcommon} } */\n+\n char HeaderStr[1];\n \n int main()"}, {"sha": "e9afc2047e49e4382fd2cc5b150de51be89e2e3d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/peel_ind_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_1.c?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -21,7 +21,7 @@ foo (void)\n }\n \n /* We should operate on aligned vectors.  */\n-/* { dg-final { scan-assembler {\\t(adrp|adr)\\tx[0-9]+, x\\n} } } */\n+/* { dg-final { scan-assembler {\\t(adrp|adr)\\tx[0-9]+, (x|\\.LANCHOR0)\\n} } } */\n /* We should use an induction that starts at -5, with only the last\n    7 elements of the first iteration being active.  */\n /* { dg-final { scan-assembler {\\tindex\\tz[0-9]+\\.s, #-5, #5\\n} } } */"}, {"sha": "5fce02102f09448ae6cff85b42b164f747ec81ad", "filename": "gcc/testsuite/gcc.target/aarch64/sve/peel_ind_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_2.c?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -17,7 +17,7 @@ foo (void)\n }\n \n /* We should operate on aligned vectors.  */\n-/* { dg-final { scan-assembler {\\t(adrp|adr)\\tx[0-9]+, x\\n} } } */\n+/* { dg-final { scan-assembler {\\t(adrp|adr)\\tx[0-9]+, (x|\\.LANCHOR0)\\n} } } */\n /* We should unroll the loop three times.  */\n /* { dg-final { scan-assembler-times \"\\tst1w\\t\" 3 } } */\n /* { dg-final { scan-assembler {\\tptrue\\t(p[0-9]+)\\.s, vl7\\n.*\\teor\\tp[0-7]\\.b, (p[0-7])/z, (\\1\\.b, \\2\\.b|\\2\\.b, \\1\\.b)\\n} } } */"}, {"sha": "15da5a7e696a15352052c62c02ea7ee73c1c2c1d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/peel_ind_3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_3.c?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -17,5 +17,5 @@ foo (int start)\n }\n \n /* We should operate on aligned vectors.  */\n-/* { dg-final { scan-assembler {\\t(adrp|adr)\\tx[0-9]+, x\\n} } } */\n+/* { dg-final { scan-assembler {\\t(adrp|adr)\\tx[0-9]+, (x|\\.LANCHOR0)\\n} } } */\n /* { dg-final { scan-assembler {\\tubfx\\t} } } */"}, {"sha": "d84363315a85131f8d6b2df6527e4b2ef6ffc478", "filename": "gcc/testsuite/gcc.target/i386/volatile-bitfields-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvolatile-bitfields-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271dd984d7f920d4fb17ad37af6a1f8e6b796dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvolatile-bitfields-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvolatile-bitfields-2.c?ref=6271dd984d7f920d4fb17ad37af6a1f8e6b796dc", "patch": "@@ -14,4 +14,4 @@ int foo ()\n   return bits.b;\n }\n \n-/* { dg-final { scan-assembler \"movl.*bits\" } } */\n+/* { dg-final { scan-assembler \"mov(q|l).*bits\" } } */"}]}