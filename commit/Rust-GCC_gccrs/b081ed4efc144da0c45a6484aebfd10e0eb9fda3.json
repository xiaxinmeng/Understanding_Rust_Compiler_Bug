{"sha": "b081ed4efc144da0c45a6484aebfd10e0eb9fda3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA4MWVkNGVmYzE0NGRhMGM0NWE2NDg0YWViZmQxMGUwZWI5ZmRhMw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2016-02-03T20:17:24Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2016-02-03T20:17:24Z"}, "message": "Add the new IA MCU test\n\nFrom-SVN: r233109", "tree": {"sha": "c0b326b7a5876e708d500a6ba6c5688781396f4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0b326b7a5876e708d500a6ba6c5688781396f4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b081ed4efc144da0c45a6484aebfd10e0eb9fda3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b081ed4efc144da0c45a6484aebfd10e0eb9fda3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b081ed4efc144da0c45a6484aebfd10e0eb9fda3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b081ed4efc144da0c45a6484aebfd10e0eb9fda3/comments", "author": null, "committer": null, "parents": [{"sha": "ab4bae0c13ef8574defab12befd8af9545e5b32f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab4bae0c13ef8574defab12befd8af9545e5b32f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab4bae0c13ef8574defab12befd8af9545e5b32f"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "15209e0111e251ca37b540510e7a4e1f6f57a201", "filename": "gcc/testsuite/gcc.target/i386/iamcu/test_empty_structs_and_unions.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b081ed4efc144da0c45a6484aebfd10e0eb9fda3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fiamcu%2Ftest_empty_structs_and_unions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b081ed4efc144da0c45a6484aebfd10e0eb9fda3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fiamcu%2Ftest_empty_structs_and_unions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fiamcu%2Ftest_empty_structs_and_unions.c?ref=b081ed4efc144da0c45a6484aebfd10e0eb9fda3", "patch": "@@ -0,0 +1,61 @@\n+/* This tests passing and returning of empty structures and unions.  */\n+\n+#include \"defines.h\"\n+#include \"args.h\"\n+\n+struct IntegerRegisters iregbits = { ~0, ~0, ~0, ~0, ~0, ~0 };\n+struct IntegerRegisters iregs;\n+unsigned int num_iregs;\n+\n+struct empty_struct\n+{\n+};\n+\n+struct empty_struct\n+check_struct_passing(struct empty_struct s0 ATTRIBUTE_UNUSED,\n+\t\t     struct empty_struct s1 ATTRIBUTE_UNUSED,\n+\t\t     int i0 ATTRIBUTE_UNUSED)\n+{\n+  struct empty_struct s;\n+  check_int_arguments;\n+  return s;\n+}\n+\n+#define check_struct_passing WRAP_CALL(check_struct_passing)\n+\n+union empty_union\n+{\n+};\n+\n+union empty_union\n+check_union_passing(union empty_union u0 ATTRIBUTE_UNUSED,\n+\t\t    union empty_union u1 ATTRIBUTE_UNUSED,\n+\t\t    int i0 ATTRIBUTE_UNUSED)\n+{\n+  union empty_union u;\n+  check_int_arguments;\n+  return u;\n+}\n+\n+#define check_union_passing WRAP_CALL(check_union_passing)\n+\n+int\n+main (void)\n+{\n+  struct empty_struct s;\n+  union empty_union u;\n+\n+  clear_struct_registers;\n+  iregs.I0 = 32;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  check_union_passing(u,u,32);\n+\n+  clear_struct_registers;\n+  iregs.I0 = 33;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  check_struct_passing(s,s,33);\n+\n+  return 0;\n+}"}]}