{"sha": "ca6d8cae45369624280a6c821e4a0c0090f4a480", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E2ZDhjYWU0NTM2OTYyNDI4MGE2YzgyMWU0YTBjMDA5MGY0YTQ4MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-12-03T20:29:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-12-03T20:29:19Z"}, "message": "new\n\nFrom-SVN: r16930", "tree": {"sha": "c9eca2d86d85ba641214caf1e3b0da8ffc1ef48b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9eca2d86d85ba641214caf1e3b0da8ffc1ef48b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca6d8cae45369624280a6c821e4a0c0090f4a480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6d8cae45369624280a6c821e4a0c0090f4a480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca6d8cae45369624280a6c821e4a0c0090f4a480", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6d8cae45369624280a6c821e4a0c0090f4a480/comments", "author": null, "committer": null, "parents": [{"sha": "9762d48da5d567c89e920a51149a2c9aef960150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9762d48da5d567c89e920a51149a2c9aef960150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9762d48da5d567c89e920a51149a2c9aef960150"}], "stats": {"total": 255, "additions": 253, "deletions": 2}, "files": [{"sha": "6faea269c9d695040b7a46e04735b7cfadd7a3fb", "filename": "gcc/testsuite/g++.old-deja/g++.eh/cleanup1.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6d8cae45369624280a6c821e4a0c0090f4a480/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcleanup1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6d8cae45369624280a6c821e4a0c0090f4a480/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcleanup1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcleanup1.C?ref=ca6d8cae45369624280a6c821e4a0c0090f4a480", "patch": "@@ -0,0 +1,34 @@\n+// Bug: obj gets destroyed twice because the fixups for the return are\n+// inside its cleanup region.\n+\n+extern \"C\" int printf (const char *, ...);\n+\n+int d;\n+\n+struct myExc { };\n+\n+struct myExcRaiser {\n+  ~myExcRaiser() { throw myExc(); }\n+};\n+\n+struct stackObj {\n+  ~stackObj() { ++d; printf (\"stackObj::~stackObj()\\n\"); };\n+};\n+\n+int test()\n+{\n+  myExcRaiser rais;\n+  stackObj obj;\n+  return 0;\n+}\n+\n+int main()\n+{\n+  try {\n+    test();\n+  }\n+  catch (myExc &) {\n+    return d != 1;\n+  }\n+  return 1;\n+}"}, {"sha": "3f7ebbcba19d19b42290517809865aaee19ef4d1", "filename": "gcc/testsuite/g++.old-deja/g++.eh/new1.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6d8cae45369624280a6c821e4a0c0090f4a480/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6d8cae45369624280a6c821e4a0c0090f4a480/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fnew1.C?ref=ca6d8cae45369624280a6c821e4a0c0090f4a480", "patch": "@@ -0,0 +1,44 @@\n+// Test that a throw in foo destroys the A, but does not free the memory.\n+\n+#include <stddef.h>\n+#include <stdlib.h>\n+#include <new.h>\n+\n+struct A {\n+  A();\n+  ~A();\n+};\n+\n+struct B {\n+  B (A);\n+};\n+\n+void foo (B*);\n+\n+int newed, created;\n+\n+main ()\n+{\n+  try {\n+    foo (new B (A ()));\n+  } catch (...) { }\n+\n+  return !(newed && !created);\n+}\n+\n+A::A() { created = 1; }\n+A::~A() { created = 0; }\n+B::B(A) { }\n+void foo (B*) { throw 1; }\n+\n+void* operator new (size_t size) throw (std::bad_alloc)\n+{\n+  ++newed;\n+  return (void *) malloc (size);\n+}\n+\n+void operator delete (void *p) throw ()\n+{\n+  --newed;\n+  free (p);\n+}"}, {"sha": "6699f94aa9f5174f8c33cbd3ec50ae57b83b1904", "filename": "gcc/testsuite/g++.old-deja/g++.eh/new2.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6d8cae45369624280a6c821e4a0c0090f4a480/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fnew2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6d8cae45369624280a6c821e4a0c0090f4a480/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fnew2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fnew2.C?ref=ca6d8cae45369624280a6c821e4a0c0090f4a480", "patch": "@@ -0,0 +1,44 @@\n+// Test that a throw in B's constructor destroys the A and frees the memory.\n+\n+#include <stddef.h>\n+#include <stdlib.h>\n+#include <new.h>\n+\n+struct A {\n+  A();\n+  ~A();\n+};\n+\n+struct B {\n+  B (A);\n+};\n+\n+void foo (B*);\n+\n+int newed, created;\n+\n+main ()\n+{\n+  try {\n+    foo (new B (A ()));\n+  } catch (...) { }\n+\n+  return !(!newed && !created);\n+}\n+\n+A::A() { created = 1; }\n+A::~A() { created = 0; }\n+B::B(A) { throw 1; }\n+void foo (B*) { }\n+\n+void* operator new (size_t size) throw (std::bad_alloc)\n+{\n+  ++newed;\n+  return (void *) malloc (size);\n+}\n+\n+void operator delete (void *p) throw ()\n+{\n+  --newed;\n+  free (p);\n+}"}, {"sha": "224952655ba99729c06a4eab4df107099257eb24", "filename": "gcc/testsuite/g++.old-deja/g++.eh/ptr1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6d8cae45369624280a6c821e4a0c0090f4a480/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fptr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6d8cae45369624280a6c821e4a0c0090f4a480/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fptr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fptr1.C?ref=ca6d8cae45369624280a6c821e4a0c0090f4a480", "patch": "@@ -0,0 +1,22 @@\n+// Bug: catching pointers by reference doesn't work right.\n+\n+extern \"C\" int printf (const char *, ...);\n+\n+struct E {\n+  int x;\n+  E(int i) { x = i; };\n+};\n+\n+int main()\n+{\n+  try {\n+    E *p = new E(5);\n+    throw p;\n+  }\n+\n+  catch (E *&e) {\n+    printf (\"address of e is 0x%x\\n\", (long)e);\n+    return !(long(e) != 5 && e->x == 5);\n+  }\n+  return 2;\n+}"}, {"sha": "c5dcd2314a36dc65dc908a1e4e211352e0a39e88", "filename": "gcc/testsuite/g++.old-deja/g++.eh/rethrow4.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6d8cae45369624280a6c821e4a0c0090f4a480/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Frethrow4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6d8cae45369624280a6c821e4a0c0090f4a480/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Frethrow4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Frethrow4.C?ref=ca6d8cae45369624280a6c821e4a0c0090f4a480", "patch": "@@ -0,0 +1,45 @@\n+// Testcase for proper handling of rethrow.\n+\n+#include <stdio.h>\n+\n+int c, d;\n+\n+struct A\n+{\n+  int i;\n+  A () { i = ++c; printf (\"A() %d\\n\", i); }\n+  A (const A&) { i = ++c; printf (\"A(const A&) %d\\n\", i); }\n+  ~A() { printf (\"~A() %d\\n\", i); ++d; }\n+};\n+\n+int\n+main ()\n+{\n+  try\n+    {\n+      try\n+\t{\n+\t  printf (\"Throwing 1...\\n\");\n+\t  throw A();\n+\t}\n+      catch (A)\n+\t{\n+\t  try\n+\t    {\n+\t      printf (\"Throwing 2...\\n\");\n+\t      throw;\n+\t    }\n+\t  catch (A)\n+\t    {\n+\t      printf (\"Throwing 3...\\n\");\n+\t      throw A();\n+\t    }\n+\t}\n+    }\n+  catch (A)\n+    {\n+      printf (\"Caught.\\n\");\n+    }\n+  printf (\"c == %d, d == %d\\n\", c, d);\n+  return c != d;\n+}"}, {"sha": "f137d1841cdb7e53186340d8e3a3ac08db34d1f8", "filename": "gcc/testsuite/g++.old-deja/g++.eh/rethrow5.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6d8cae45369624280a6c821e4a0c0090f4a480/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Frethrow5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6d8cae45369624280a6c821e4a0c0090f4a480/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Frethrow5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Frethrow5.C?ref=ca6d8cae45369624280a6c821e4a0c0090f4a480", "patch": "@@ -0,0 +1,44 @@\n+// Testcase for proper handling of rethrow.\n+\n+#include <stdio.h>\n+\n+int c, d;\n+\n+struct A\n+{\n+  int i;\n+  A () { i = ++c; printf (\"A() %d\\n\", i); }\n+  A (const A&) { i = ++c; printf (\"A(const A&) %d\\n\", i); }\n+  ~A() { printf (\"~A() %d\\n\", i); ++d; }\n+};\n+\n+int\n+main ()\n+{\n+  try\n+    {\n+      try\n+\t{\n+\t  printf (\"Throwing 1...\\n\");\n+\t  throw A();\n+\t}\n+      catch (A)\n+\t{\n+\t  try\n+\t    {\n+\t      printf (\"Throwing 2...\\n\");\n+\t      throw;\n+\t    }\n+\t  catch (A)\n+\t    {\n+\t      printf (\"Falling out...\\n\");\n+\t    }\n+\t}\n+    }\n+  catch (A)\n+    {\n+      printf (\"Caught.\\n\");\n+    }\n+  printf (\"c == %d, d == %d\\n\", c, d);\n+  return c != d;\n+}"}, {"sha": "d4bbf9ad79087bb4597b9f517cb18c4fe8b7577e", "filename": "gcc/testsuite/g++.old-deja/g++.jason/destruct3.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6d8cae45369624280a6c821e4a0c0090f4a480/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fdestruct3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6d8cae45369624280a6c821e4a0c0090f4a480/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fdestruct3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fdestruct3.C?ref=ca6d8cae45369624280a6c821e4a0c0090f4a480", "patch": "@@ -1,3 +1,4 @@\n+// Special g++ Options: -w\n // PRMS Id: 4342 (second testcase)\n // Bug: g++ still can't deal with ambiguous inheritance in destructor calls.\n // Build don't link:\n@@ -32,10 +33,10 @@ struct ccScreenObj : public ccScreenObjRep\n {};\n \n struct ccVSTool : public ccImpExp, public ccUnwind \n-{};\t// gets bogus error - XFAIL *-*-*\n+{};\n \n struct ccSCCP : public ccVSTool\n-{};\t// gets bogus error - XFAIL *-*-*\n+{};\n \n void foo ()\n {"}, {"sha": "5a2d7f320070551c916b1d3738fb61f4a6fea0ec", "filename": "gcc/testsuite/g++.old-deja/g++.pt/enum2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6d8cae45369624280a6c821e4a0c0090f4a480/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fenum2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6d8cae45369624280a6c821e4a0c0090f4a480/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fenum2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fenum2.C?ref=ca6d8cae45369624280a6c821e4a0c0090f4a480", "patch": "@@ -0,0 +1,17 @@\n+// Build don't link:\n+\n+struct U {\n+  static int STATIC;\n+};\n+\n+template <int* x> class FOO {\n+public:\n+  enum { n = 0 };\n+};\n+\n+template <class A> class BAR {\n+public:\n+  enum { n = FOO<&A::STATIC>::n };\n+};\n+\n+int n = BAR<U>::n;"}]}