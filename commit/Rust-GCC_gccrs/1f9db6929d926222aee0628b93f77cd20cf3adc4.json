{"sha": "1f9db6929d926222aee0628b93f77cd20cf3adc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY5ZGI2OTI5ZDkyNjIyMmFlZTA2MjhiOTNmNzdjZDIwY2YzYWRjNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-18T20:46:25Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-18T21:22:48Z"}, "message": "c++: header-unit build capability [PR 99023]\n\nThis defect really required building header-units and include translation\nof pieces of the standard library.  This adds smarts to the modules\ntest harness to do that -- accept .X files as the source file, but\nprovide '-x c++-system-header $HDR' in the options.  The .X file will\nbe considered by the driver to be a linker script and ignored (with a\nwarning).\n\nUsing this we can add 2 tests that end up building list_initializer\nand iostream, along with a test that iostream's build\ninclude-translates list_initializer's #include.  That discovered a set\nof issues with the -flang-info-include-translate=HDR handling, also\nfixed and documented here.\n\n\tPR c++/99023\n\tgcc/cp/\n\t* module.cc (canonicalize_header_name): Use\n\tcpp_probe_header_unit.\n\t(maybe_translate_include): Fix note_includes comparison.\n\t(init_modules): Fix note_includes string termination.\n\tlibcpp/\n\t* include/cpplib.h (cpp_find_header_unit): Rename to ...\n\t(cpp_probe_header_unit): ... this.\n\t* internal.h (_cp_find_header_unit): Declare.\n\t* files.c (cpp_find_header_unit): Break apart to ..\n\t(test_header_unit): ... this, and ...\n\t(_cpp_find_header_unit): ... and, or and ...\n\t(cpp_probe_header_unit): ... this.\n\t* macro.c (cpp_get_token_1): Call _cpp_find_header_unit.\n\tgcc/\n\t* doc/invoke.texi (flang-info-include-translate): Document header\n\tlookup behaviour.\n\tgcc/testsuite/\n\t* g++.dg/modules/modules.exp: Bail on cross-testing.  Add support\n\tfor .X files.\n\t* g++.dg/modules/pr99023_a.X: New.\n\t* g++.dg/modules/pr99023_b.X: New.", "tree": {"sha": "d00d2d912c714d8f13253ed49331aed0b66aed86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d00d2d912c714d8f13253ed49331aed0b66aed86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f9db6929d926222aee0628b93f77cd20cf3adc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9db6929d926222aee0628b93f77cd20cf3adc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f9db6929d926222aee0628b93f77cd20cf3adc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9db6929d926222aee0628b93f77cd20cf3adc4/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d82f829905cfe6cb47d073825f680900274ce764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d82f829905cfe6cb47d073825f680900274ce764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d82f829905cfe6cb47d073825f680900274ce764"}], "stats": {"total": 149, "additions": 101, "deletions": 48}, "files": [{"sha": "e801c52069ec083c2ff30b5bbe93a1eeb9b19aaf", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9db6929d926222aee0628b93f77cd20cf3adc4/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9db6929d926222aee0628b93f77cd20cf3adc4/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=1f9db6929d926222aee0628b93f77cd20cf3adc4", "patch": "@@ -19091,7 +19091,7 @@ canonicalize_header_name (cpp_reader *reader, location_t loc, bool unquoted,\n       buf[len] = 0;\n \n       if (const char *hdr\n-\t  = cpp_find_header_unit (reader, buf, str[-1] == '<', loc))\n+\t  = cpp_probe_header_unit (reader, buf, str[-1] == '<', loc))\n \t{\n \t  len = strlen (hdr);\n \t  str = hdr;\n@@ -19185,19 +19185,11 @@ maybe_translate_include (cpp_reader *reader, line_maps *lmaps, location_t loc,\n   else if (note_include_translate_no && xlate == 0)\n     note = true;\n   else if (note_includes)\n-    {\n-      /* We do not expect the note_includes vector to be large, so O(N)\n-\t iteration.  */\n-      for (unsigned ix = note_includes->length (); !note && ix--;)\n-\t{\n-\t  const char *hdr = (*note_includes)[ix];\n-\t  size_t hdr_len = strlen (hdr);\n-\t  if ((hdr_len == len\n-\t       || (hdr_len < len && IS_DIR_SEPARATOR (path[len - hdr_len - 1])))\n-\t      && !memcmp (hdr, path + len - hdr_len, hdr_len))\n-\t    note = true;\n-\t}\n-    }\n+    /* We do not expect the note_includes vector to be large, so O(N)\n+       iteration.  */\n+    for (unsigned ix = note_includes->length (); !note && ix--;)\n+      if (!strcmp ((*note_includes)[ix], path))\n+\tnote = true;\n \n   if (note)\n     inform (loc, xlate\n@@ -19570,7 +19562,7 @@ init_modules (cpp_reader *reader)\n \t\t\t\t\t0, !delimed, hdr, len);\n \tchar *path = XNEWVEC (char, len + 1);\n \tmemcpy (path, hdr, len);\n-\tpath[len+1] = 0;\n+\tpath[len] = 0;\n \n \t(*note_includes)[ix] = path;\n       }"}, {"sha": "c00514a6306ac50a59e8e4a9f523c0588fa714b5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9db6929d926222aee0628b93f77cd20cf3adc4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9db6929d926222aee0628b93f77cd20cf3adc4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1f9db6929d926222aee0628b93f77cd20cf3adc4", "patch": "@@ -3382,7 +3382,12 @@ is used when building the C++ library.)\n @itemx -flang-info-include-translate=@var{header}\n @opindex flang-info-include-translate\n @opindex flang-info-include-translate-not\n-Diagnose include translation events.\n+Diagnose include translation events.  The first will note accepted\n+include translations, the second will note declined include\n+translations.  The @var{header} form will inform of include\n+translations relating to that specific header.  If @var{header} is of\n+the form @code{\"user\"} or @code{<system>} it will be resolved to a\n+specific user or system header using the include path.\n \n @item -stdlib=@var{libstdc++,libc++}\n @opindex stdlib"}, {"sha": "38654caf7b9ac3dd740c98a8f721fbe4ff5a6d93", "filename": "gcc/testsuite/g++.dg/modules/modules.exp", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9db6929d926222aee0628b93f77cd20cf3adc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmodules.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9db6929d926222aee0628b93f77cd20cf3adc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmodules.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmodules.exp?ref=1f9db6929d926222aee0628b93f77cd20cf3adc4", "patch": "@@ -39,6 +39,11 @@ set MOD_STD_LIST { 17 2a }\n \n dg-init\n \n+if {[is_remote host]} {\n+    # remote testing not functional here :(\n+    return\n+}\n+\n global module_do\n global module_cmis\n \n@@ -274,6 +279,9 @@ proc module-init { src } {\n     return $option_list\n }\n \n+# cleanup any detritus from previous run\n+cleanup_module_files [find $DEFAULT_REPO *.gcm]\n+\n # not grouped tests, sadly tcl doesn't have negated glob\n foreach test [prune [lsort [find $srcdir/$subdir {*.[CH]}]] \\\n \t\t  \"$srcdir/$subdir/*_?.\\[CH\\]\"] {\n@@ -282,6 +290,7 @@ foreach test [prune [lsort [find $srcdir/$subdir {*.[CH]}]] \\\n \n \tset std_list [module-init $test]\n \tforeach std $std_list {\n+\t    global module_cmis\n \t    set module_cmis {}\n \t    verbose \"Testing $nshort $std\" 1\n \t    dg-test $test \"$std\" $DEFAULT_MODFLAGS\n@@ -292,42 +301,51 @@ foreach test [prune [lsort [find $srcdir/$subdir {*.[CH]}]] \\\n }\n \n # grouped tests\n-foreach src [lsort [find $srcdir/$subdir {*_a.[CH}]] {\n+foreach src [lsort [find $srcdir/$subdir {*_a.[CHX}]] {\n     # use the FOO_a.C name as the parallelization key\n     if [runtest_file_p $runtests $src] {\n \tset tests [lsort [find [file dirname $src] \\\n-\t\t\t      [regsub {_a.[CH]$} [file tail $src] {_[a-z].[CH]}]]]\n+\t\t\t      [regsub {_a.[CHX]$} [file tail $src] {_[a-z].[CHX]}]]]\n \n \tset std_list [module-init $src]\n \tforeach std $std_list {\n \t    set mod_files {}\n \t    global module_do\n \t    set module_do {\"compile\" \"P\"}\n \t    set asm_list {}\n+\t    set any_hdrs 0\n+\t    global DEFAULT_REPO\n+\t    file_on_host delete $DEFAULT_REPO\n \t    foreach test $tests {\n \t\tif { [lindex $module_do 1] != \"N\" } {\n+\t\t    global module_cmis\n \t\t    set module_cmis {}\n \t\t    set nshort [file tail [file dirname $test]]/[file tail $test]\n \t\t    verbose \"Testing $nshort $std\" 1\n-\t\t    if { [file extension $test] == \".C\" } {\n-\t\t\tlappend asm_list [file rootname [file tail $test]].s\n+\t\t    switch [file extension $test] {\n+\t\t\t\".C\" {\t\t\n+\t\t\t    lappend asm_list [file rootname [file tail $test]].s\n+\t\t\t}\n+\t\t\t\".X\" {\n+\t\t\t    set any_hdrs 1\n+\t\t\t}\n \t\t    }\n \t\t    dg-test -keep-output $test \"$std\" $DEFAULT_MODFLAGS\n \t\t    set testcase [string range $test [string length \"$srcdir/\"] end]\n \t\t    lappend mod_files [module_cmi_p $testcase $module_cmis]\n \t\t}\n \t    }\n-\t    set ok 1\n \t    set testcase [regsub {_a.[CH]} $src {}]\n \t    set testcase \\\n \t\t[string range $testcase [string length \"$srcdir/\"] end]\n-\t    set ok [module_do_it $module_do $testcase $std $asm_list]\n-\t    if { $ok } {\n-\t\tforeach asm $asm_list {\n-\t\t    file_on_host delete $asm\n-\t\t}\n-\t\tcleanup_module_files $mod_files\n+\t    module_do_it $module_do $testcase $std $asm_list\n+\t    foreach asm $asm_list {\n+\t\tfile_on_host delete $asm\n+\t    }\n+\t    if { $any_hdrs } {\n+\t\tset mod_files [find $DEFAULT_REPO *.gcm]\n \t    }\n+\t    cleanup_module_files $mod_files\n \t}\n     }\n }"}, {"sha": "c872d15f7927baa668a430a6476f8d460d068344", "filename": "gcc/testsuite/g++.dg/modules/pr99023_a.X", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9db6929d926222aee0628b93f77cd20cf3adc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99023_a.X", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9db6929d926222aee0628b93f77cd20cf3adc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99023_a.X", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99023_a.X?ref=1f9db6929d926222aee0628b93f77cd20cf3adc4", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/99023, ICE\n+// { dg-additional-options {-x c++-system-header initializer_list -fmodules-ts --param ggc-min-expand=0} }\n+\n+// { dg-prune-output {linker input file unused} }\n+\n+NO DO NOT COMPILE"}, {"sha": "3d82f34868b75df69094c3da4b23672d7365dd0b", "filename": "gcc/testsuite/g++.dg/modules/pr99023_b.X", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9db6929d926222aee0628b93f77cd20cf3adc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99023_b.X", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9db6929d926222aee0628b93f77cd20cf3adc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99023_b.X", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99023_b.X?ref=1f9db6929d926222aee0628b93f77cd20cf3adc4", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/99023, ICE\n+// { dg-additional-options {-x c++-system-header iostream -fmodules-ts -flang-info-include-translate=<initializer_list> --param ggc-min-expand=0} }\n+\n+// { dg-prune-output {linker input file unused} }\n+\n+// { dg-regexp {[^\\n]*: note: include '[^\\n]*/initializer_list' translated to import\\n} }\n+NO DO NOT COMPILE"}, {"sha": "6e20fc5887f001d23179eda88c5de323f24571a1", "filename": "libcpp/files.c", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9db6929d926222aee0628b93f77cd20cf3adc4/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9db6929d926222aee0628b93f77cd20cf3adc4/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=1f9db6929d926222aee0628b93f77cd20cf3adc4", "patch": "@@ -1108,31 +1108,54 @@ _cpp_stack_include (cpp_reader *pfile, const char *fname, int angle_brackets,\n   return _cpp_stack_file (pfile, file, type, loc);\n }\n \n-/* NAME is a header file name, find the path we'll use to open it.  */\n+/* NAME is a header file name, find the _cpp_file, if any.  */\n \n-const char *\n-cpp_find_header_unit (cpp_reader *pfile, const char *name, bool angle,\n-\t\t      location_t loc)\n+static _cpp_file *\n+test_header_unit (cpp_reader *pfile, const char *name, bool angle,\n+\t\t  location_t loc)\n {\n-  cpp_dir *dir = search_path_head (pfile, name, angle, IT_INCLUDE);\n-  if (!dir)\n-    return NULL;\n+  if (cpp_dir *dir = search_path_head (pfile, name, angle, IT_INCLUDE))\n+    return _cpp_find_file (pfile, name, dir, angle, _cpp_FFK_NORMAL, loc);\n+\n+  return nullptr;\n+}\n \n-  _cpp_file *file = _cpp_find_file (pfile, name, dir, angle,\n-\t\t\t\t    _cpp_FFK_NORMAL, loc);\n-  if (!file)\n-    return NULL;\n+/* NAME is a header file name, find the path we'll use to open it and infer that\n+   it is a header-unit.  */\n \n-  if (file->fd > 0)\n+const char *\n+_cpp_find_header_unit (cpp_reader *pfile, const char *name, bool angle,\n+\t\t       location_t loc)\n+{\n+  if (_cpp_file *file = test_header_unit (pfile, name, angle, loc))\n     {\n-      /* Don't leave it open.  */\n-      close (file->fd);\n-      file->fd = 0;\n+      if (file->fd > 0)\n+\t{\n+\t  /* Don't leave it open.  */\n+\t  close (file->fd);\n+\t  file->fd = 0;\n+\t}\n+\n+      file->header_unit = +1;\n+      _cpp_mark_file_once_only (pfile, file);\n+\n+      return file->path;\n     }\n \n-  file->header_unit = +1;\n-  _cpp_mark_file_once_only (pfile, file);\n-  return file->path;\n+  return nullptr;\n+}\n+\n+/* NAME is a header file name, find the path we'll use to open it.  But do not\n+   infer it is a header unit.  */\n+\n+const char *\n+cpp_probe_header_unit (cpp_reader *pfile, const char *name, bool angle,\n+\t\t       location_t loc)\n+{\n+  if (_cpp_file *file = test_header_unit (pfile, name, angle, loc))\n+    return file->path;\n+\n+  return nullptr;\n }\n \n /* Retrofit the just-entered main file asif it was an include.  This"}, {"sha": "41d75d9e731b6225a5c1bdc651a95e82914bea5f", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9db6929d926222aee0628b93f77cd20cf3adc4/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9db6929d926222aee0628b93f77cd20cf3adc4/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=1f9db6929d926222aee0628b93f77cd20cf3adc4", "patch": "@@ -1012,8 +1012,8 @@ extern cpp_callbacks *cpp_get_callbacks (cpp_reader *) ATTRIBUTE_PURE;\n extern void cpp_set_callbacks (cpp_reader *, cpp_callbacks *);\n extern class mkdeps *cpp_get_deps (cpp_reader *) ATTRIBUTE_PURE;\n \n-extern const char *cpp_find_header_unit (cpp_reader *, const char *file,\n-\t\t\t\t\t bool angle_p,  location_t);\n+extern const char *cpp_probe_header_unit (cpp_reader *, const char *file,\n+\t\t\t\t\t  bool angle_p,  location_t);\n \n /* Call these to get name data about the various compile-time\n    charsets.  */"}, {"sha": "fd44de6b8f0f9a7fd70a589fdb9a2d6a00170363", "filename": "libcpp/internal.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9db6929d926222aee0628b93f77cd20cf3adc4/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9db6929d926222aee0628b93f77cd20cf3adc4/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=1f9db6929d926222aee0628b93f77cd20cf3adc4", "patch": "@@ -703,6 +703,8 @@ extern _cpp_file *_cpp_find_file (cpp_reader *, const char *, cpp_dir *,\n \t\t\t\t  int angle, _cpp_find_file_kind, location_t);\n extern bool _cpp_find_failed (_cpp_file *);\n extern void _cpp_mark_file_once_only (cpp_reader *, struct _cpp_file *);\n+extern const char *_cpp_find_header_unit (cpp_reader *, const char *file,\n+\t\t\t\t\t  bool angle_p,  location_t);\n extern void _cpp_fake_include (cpp_reader *, const char *);\n extern bool _cpp_stack_file (cpp_reader *, _cpp_file*, include_type, location_t);\n extern bool _cpp_stack_include (cpp_reader *, const char *, int,"}, {"sha": "dff7c98a4df50a0e103a7bd7cecb9354cd41513f", "filename": "libcpp/macro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9db6929d926222aee0628b93f77cd20cf3adc4/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9db6929d926222aee0628b93f77cd20cf3adc4/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=1f9db6929d926222aee0628b93f77cd20cf3adc4", "patch": "@@ -3010,7 +3010,7 @@ cpp_get_token_1 (cpp_reader *pfile, location_t *location)\n \n \t  if (need_search)\n \t    {\n-\t      found = cpp_find_header_unit (pfile, fname, angle, tmp->src_loc);\n+\t      found = _cpp_find_header_unit (pfile, fname, angle, tmp->src_loc);\n \t      if (!found)\n \t\tfound = \"\";\n \t      len = strlen (found);"}]}