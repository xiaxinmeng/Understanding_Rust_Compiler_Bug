{"sha": "7fc53ba4f8a0cecb7288ae04e32dfb38af016f57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZjNTNiYTRmOGEwY2VjYjcyODhhZTA0ZTMyZGZiMzhhZjAxNmY1Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-01T15:08:32Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-01T15:08:32Z"}, "message": "Don't treat zero-sized ranges as overlapping\n\nMost GCC ranges seem to be represented as an offset and a size (rather\nthan a start and inclusive end or start and exclusive end).  The usual\ntest for whether X is in a range is of course:\n\n  x >= start && x < start + size\nor:\n  x >= start && x - start < size\n\nwhich means that an empty range of size 0 contains nothing.  But other\nrange tests aren't as obvious.\n\nThe usual test for whether one range is contained within another\nrange is:\n\n  start1 >= start2 && start1 + size1 <= start2 + size2\n\nwhile the test for whether two ranges overlap (from ranges_overlap_p) is:\n\n     (start1 >= start2 && start1 < start2 + size2)\n  || (start2 >= start1 && start2 < start1 + size1)\n\ni.e. the ranges overlap if one range contains the start of the other\nrange.  This leads to strange results like:\n\n  (start X, size 0) is a subrange of (start X, size 0) but\n  (start X, size 0) does not overlap (start X, size 0)\n\nSimilarly:\n\n  (start 4, size 0) is a subrange of (start 2, size 2) but\n  (start 4, size 0) does not overlap (start 2, size 2)\n\nIt seems like \"X is a subrange of Y\" should imply \"X overlaps Y\".\n\nThis becomes harder to ignore with the runtime sizes and offsets\nadded for SVE.  The most obvious fix seemed to be to say that\nan empty range does not overlap anything, and is therefore not\na subrange of anything.\n\nUsing the new definition of subranges didn't seem to cause any\ncodegen differences in the testsuite.  But there was one change\nwith the new definition of overlapping ranges.  strncpy-chk.c has:\n\n  memset (dst, 0, sizeof (dst));\n  if (strncpy (dst, src, 0) != dst || strcmp (dst, \"\"))\n    abort();\n\nThe strncpy is detected as a zero-size write, and so with the new\ndefinition of overlapping ranges, we treat the strncpy as having\nno effect on the strcmp (which is true).  The reaching definition\nis the memset instead.\n\nThis patch makes ranges_overlap_p return false for zero-sized\nranges, even if the other range has an unknown size.\n\n2017-11-01  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* tree-ssa-alias.h (ranges_overlap_p): Return false if either\n\trange is known to be empty.\n\nFrom-SVN: r254312", "tree": {"sha": "9c618068ee20724e4f1389cc95ec28e28dafdb0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c618068ee20724e4f1389cc95ec28e28dafdb0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fc53ba4f8a0cecb7288ae04e32dfb38af016f57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fc53ba4f8a0cecb7288ae04e32dfb38af016f57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fc53ba4f8a0cecb7288ae04e32dfb38af016f57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fc53ba4f8a0cecb7288ae04e32dfb38af016f57/comments", "author": null, "committer": null, "parents": [{"sha": "cb8e3dda35164dcb85056556779daa673b40166a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8e3dda35164dcb85056556779daa673b40166a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb8e3dda35164dcb85056556779daa673b40166a"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "a90d258f9e1cbb7558ceacde38a689e7574d04c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc53ba4f8a0cecb7288ae04e32dfb38af016f57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc53ba4f8a0cecb7288ae04e32dfb38af016f57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fc53ba4f8a0cecb7288ae04e32dfb38af016f57", "patch": "@@ -1,3 +1,8 @@\n+2017-11-01  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* tree-ssa-alias.h (ranges_overlap_p): Return false if either\n+\trange is known to be empty.\n+\n 2017-11-01  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "c52ed3fe90e7dfed28f508bf67154851c4bf17dc", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc53ba4f8a0cecb7288ae04e32dfb38af016f57/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc53ba4f8a0cecb7288ae04e32dfb38af016f57/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=7fc53ba4f8a0cecb7288ae04e32dfb38af016f57", "patch": "@@ -171,6 +171,8 @@ ranges_overlap_p (HOST_WIDE_INT pos1,\n \t\t  HOST_WIDE_INT pos2,\n \t\t  unsigned HOST_WIDE_INT size2)\n {\n+  if (size1 == 0 || size2 == 0)\n+    return false;\n   if (pos1 >= pos2\n       && (size2 == (unsigned HOST_WIDE_INT)-1\n \t  || pos1 < (pos2 + (HOST_WIDE_INT) size2)))"}]}