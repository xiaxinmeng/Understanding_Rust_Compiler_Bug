{"sha": "ad6267596c510660a93889a53319e9f051cab39a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ2MjY3NTk2YzUxMDY2MGE5Mzg4OWE1MzMxOWU5ZjA1MWNhYjM5YQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-11-25T23:57:41Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-11-25T23:57:41Z"}, "message": "Add comment on ffs to say why optimizing it further is a bad idea.\n\nFrom-SVN: r8564", "tree": {"sha": "3fa75decb776ebf7fa4f433e767120efbc91b2aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fa75decb776ebf7fa4f433e767120efbc91b2aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad6267596c510660a93889a53319e9f051cab39a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad6267596c510660a93889a53319e9f051cab39a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad6267596c510660a93889a53319e9f051cab39a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad6267596c510660a93889a53319e9f051cab39a/comments", "author": null, "committer": null, "parents": [{"sha": "00f8ff66e9db8007b9dd7cd0c1eee6c5939184d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00f8ff66e9db8007b9dd7cd0c1eee6c5939184d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00f8ff66e9db8007b9dd7cd0c1eee6c5939184d0"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "5dfa166d3bea6a8a4119cb9a9ce3be3cb4288aba", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6267596c510660a93889a53319e9f051cab39a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6267596c510660a93889a53319e9f051cab39a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ad6267596c510660a93889a53319e9f051cab39a", "patch": "@@ -5439,6 +5439,10 @@\n   \"\"\n   \"operands[2] = gen_reg_rtx (SImode);\")\n \n+;; Note, you cannot optimize away the branch following the bsfl by assuming\n+;; that the destination is not modified if the input is 0, since not all\n+;; x86 implementations do this.\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=&r\")\n \t(plus:SI (ffs:SI (match_operand:SI 1 \"general_operand\" \"rm\"))\n@@ -5453,7 +5457,6 @@\n   xops[0] = operands[0];\n   xops[1] = operands[1];\n   xops[2] = constm1_rtx;\n-  /* Can there be a way to avoid the jump here?  */\n   output_asm_insn (AS2 (bsf%L0,%1,%0), xops);\n #ifdef LOCAL_LABEL_PREFIX\n   sprintf (buffer, \\\"jnz %sLFFSSI%d\\\","}]}