{"sha": "cf6a409750631fd7ae7b168a94967a33d509be5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y2YTQwOTc1MDYzMWZkN2FlN2IxNjhhOTQ5NjdhMzNkNTA5YmU1ZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-09-10T15:38:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-09-10T15:38:20Z"}, "message": "dwarf2out.c (gen_array_type_die): Output DW_TAG_subrange_type for VECTOR_TYPEs using TYPE_VECTOR_SUBPARTS.\n\n2010-09-10  Richard Guenther  <rguenther@suse.de>\n\n\t* dwarf2out.c (gen_array_type_die): Output DW_TAG_subrange_type\n\tfor VECTOR_TYPEs using TYPE_VECTOR_SUBPARTS.\n\t* dbxout.c (dbxout_type): Manually deal with VECTOR_TYPE\n\tusing TYPE_VECTOR_SUBPARTS, not TYPE_DEBUG_REPRESENTATION_TYPE.\n\nFrom-SVN: r164192", "tree": {"sha": "eceae12e1d5be3a0e7d30a291af44350fff94446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eceae12e1d5be3a0e7d30a291af44350fff94446"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf6a409750631fd7ae7b168a94967a33d509be5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf6a409750631fd7ae7b168a94967a33d509be5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf6a409750631fd7ae7b168a94967a33d509be5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf6a409750631fd7ae7b168a94967a33d509be5d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ffacec467f1808218d1129c62423684455da2ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffacec467f1808218d1129c62423684455da2ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ffacec467f1808218d1129c62423684455da2ac"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "05fd8256872c0566f792dfada557e45a9db3c6b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6a409750631fd7ae7b168a94967a33d509be5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6a409750631fd7ae7b168a94967a33d509be5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf6a409750631fd7ae7b168a94967a33d509be5d", "patch": "@@ -1,3 +1,10 @@\n+2010-09-10  Richard Guenther  <rguenther@suse.de>\n+\n+\t* dwarf2out.c (gen_array_type_die): Output DW_TAG_subrange_type\n+\tfor VECTOR_TYPEs using TYPE_VECTOR_SUBPARTS.\n+\t* dbxout.c (dbxout_type): Manually deal with VECTOR_TYPE\n+\tusing TYPE_VECTOR_SUBPARTS, not TYPE_DEBUG_REPRESENTATION_TYPE.\n+\n 2010-09-10  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/45634"}, {"sha": "0b4c050c056d0591a49ea01cb9e80ffca1f9370d", "filename": "gcc/dbxout.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6a409750631fd7ae7b168a94967a33d509be5d/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6a409750631fd7ae7b168a94967a33d509be5d/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=cf6a409750631fd7ae7b168a94967a33d509be5d", "patch": "@@ -1677,17 +1677,8 @@ static void\n dbxout_type (tree type, int full)\n {\n   static int anonymous_type_number = 0;\n-  bool vector_type = false;\n   tree tem, main_variant, low, high;\n \n-  if (TREE_CODE (type) == VECTOR_TYPE)\n-    {\n-      /* The frontend feeds us a representation for the vector as a struct\n-\t containing an array.  Pull out the array type.  */\n-      type = TREE_TYPE (TYPE_FIELDS (TYPE_DEBUG_REPRESENTATION_TYPE (type)));\n-      vector_type = true;\n-    }\n-\n   if (TREE_CODE (type) == INTEGER_TYPE)\n     {\n       if (TREE_TYPE (type) == 0)\n@@ -2020,9 +2011,6 @@ dbxout_type (tree type, int full)\n \t  break;\n \t}\n \n-      if (use_gnu_debug_info_extensions && vector_type)\n-\tstabstr_S (\"@V;\");\n-\n       /* Output \"a\" followed by a range type definition\n \t for the index type of the array\n \t followed by a reference to the target-type.\n@@ -2049,6 +2037,22 @@ dbxout_type (tree type, int full)\n       dbxout_type (TREE_TYPE (type), 0);\n       break;\n \n+    case VECTOR_TYPE:\n+      /* Make vectors look like an array.  */\n+      if (use_gnu_debug_info_extensions)\n+\tstabstr_S (\"@V;\");\n+\n+      /* Output \"a\" followed by a range type definition\n+\t for the index type of the array\n+\t followed by a reference to the target-type.\n+\t ar1;0;N;M for a C array of type M and size N+1.  */\n+      stabstr_C ('a');\n+      dbxout_range_type (integer_type_node, size_zero_node,\n+\t\t\t size_int (TYPE_VECTOR_SUBPARTS (type) - 1));\n+\n+      dbxout_type (TREE_TYPE (type), 0);\n+      break;\n+\n     case RECORD_TYPE:\n     case UNION_TYPE:\n     case QUAL_UNION_TYPE:"}, {"sha": "52632da5e5f80a296813ba13a0a70eab097b8b77", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6a409750631fd7ae7b168a94967a33d509be5d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6a409750631fd7ae7b168a94967a33d509be5d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=cf6a409750631fd7ae7b168a94967a33d509be5d", "patch": "@@ -17941,12 +17941,7 @@ gen_array_type_die (tree type, dw_die_ref context_die)\n   equate_type_number_to_die (type, array_die);\n \n   if (TREE_CODE (type) == VECTOR_TYPE)\n-    {\n-      /* The frontend feeds us a representation for the vector as a struct\n-\t containing an array.  Pull out the array type.  */\n-      type = TREE_TYPE (TYPE_FIELDS (TYPE_DEBUG_REPRESENTATION_TYPE (type)));\n-      add_AT_flag (array_die, DW_AT_GNU_vector, 1);\n-    }\n+    add_AT_flag (array_die, DW_AT_GNU_vector, 1);\n \n   /* For Fortran multidimensional arrays use DW_ORD_col_major ordering.  */\n   if (is_fortran ()\n@@ -17969,10 +17964,20 @@ gen_array_type_die (tree type, dw_die_ref context_die)\n #ifdef MIPS_DEBUGGING_INFO\n   /* The SGI compilers handle arrays of unknown bound by setting\n      AT_declaration and not emitting any subrange DIEs.  */\n-  if (! TYPE_DOMAIN (type))\n+  if (TREE_CODE (type) == ARRAY_TYPE\n+      && ! TYPE_DOMAIN (type))\n     add_AT_flag (array_die, DW_AT_declaration, 1);\n   else\n #endif\n+  if (TREE_CODE (type) == VECTOR_TYPE)\n+    {\n+      /* For VECTOR_TYPEs we use an array die with appropriate bounds.  */\n+      dw_die_ref subrange_die = new_die (DW_TAG_subrange_type, array_die, NULL);\n+      add_bound_info (subrange_die, DW_AT_lower_bound, size_zero_node);\n+      add_bound_info (subrange_die, DW_AT_upper_bound,\n+\t\t      size_int (TYPE_VECTOR_SUBPARTS (type) - 1));\n+    }\n+  else\n     add_subscript_info (array_die, type, collapse_nested_arrays);\n \n   /* Add representation of the type of the elements of this array type and"}]}