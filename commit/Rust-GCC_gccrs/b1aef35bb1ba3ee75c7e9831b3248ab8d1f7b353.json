{"sha": "b1aef35bb1ba3ee75c7e9831b3248ab8d1f7b353", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFhZWYzNWJiMWJhM2VlNzVjN2U5ODMxYjMyNDhhYjhkMWY3YjM1Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-07-22T00:29:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-07-22T00:29:56Z"}, "message": "unroll.c (find_splittable_givs): Do not split DEST_ADDR givs that are not unrolled completely.\n\n        * unroll.c (find_splittable_givs): Do not split DEST_ADDR givs\n        that are not unrolled completely.\n\nFrom-SVN: r55635", "tree": {"sha": "893750762fec5b510f61a2dacd50a5d5b3e1f41c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/893750762fec5b510f61a2dacd50a5d5b3e1f41c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1aef35bb1ba3ee75c7e9831b3248ab8d1f7b353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1aef35bb1ba3ee75c7e9831b3248ab8d1f7b353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1aef35bb1ba3ee75c7e9831b3248ab8d1f7b353", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1aef35bb1ba3ee75c7e9831b3248ab8d1f7b353/comments", "author": null, "committer": null, "parents": [{"sha": "5e1afb115ee0038eb3474176d8c56c2460a4274e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1afb115ee0038eb3474176d8c56c2460a4274e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e1afb115ee0038eb3474176d8c56c2460a4274e"}], "stats": {"total": 107, "additions": 8, "deletions": 99}, "files": [{"sha": "5bd29d35c5bfc311739fd6c0176453ff6f5e1f9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1aef35bb1ba3ee75c7e9831b3248ab8d1f7b353/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1aef35bb1ba3ee75c7e9831b3248ab8d1f7b353/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1aef35bb1ba3ee75c7e9831b3248ab8d1f7b353", "patch": "@@ -1,3 +1,8 @@\n+2002-07-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* unroll.c (find_splittable_givs): Do not split DEST_ADDR givs\n+\tthat are not unrolled completely.\n+\n 2002-07-21  Richard Henderson  <rth@redhat.com>\n \n \t* loop.h (LOOP_AUTO_UNROLL): Rename from LOOP_FIRST_PASS."}, {"sha": "1a85a20e67ab9be303845aa542fe50900cb691a8", "filename": "gcc/unroll.c", "status": "modified", "additions": 3, "deletions": 99, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1aef35bb1ba3ee75c7e9831b3248ab8d1f7b353/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1aef35bb1ba3ee75c7e9831b3248ab8d1f7b353/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=b1aef35bb1ba3ee75c7e9831b3248ab8d1f7b353", "patch": "@@ -2864,105 +2864,7 @@ find_splittable_givs (loop, bl, unroll_type, increment, unroll_number)\n \t\t  v->dest_reg = v->same->dest_reg;\n \t\t  v->shared = 1;\n \t\t}\n-\t      else if (unroll_type != UNROLL_COMPLETELY)\n-\t\t{\n-\t\t  /* If not completely unrolling the loop, then create a new\n-\t\t     register to hold the split value of the DEST_ADDR giv.\n-\t\t     Emit insn to initialize its value before loop start.  */\n-\n-\t\t  rtx tem = gen_reg_rtx (v->mode);\n-\t\t  struct induction *same = v->same;\n-\t\t  rtx new_reg = v->new_reg;\n-\t\t  record_base_value (REGNO (tem), v->add_val, 0);\n-\n-\t\t  /* If the address giv has a constant in its new_reg value,\n-\t\t     then this constant can be pulled out and put in value,\n-\t\t     instead of being part of the initialization code.  */\n-\n-\t\t  if (GET_CODE (new_reg) == PLUS\n-\t\t      && GET_CODE (XEXP (new_reg, 1)) == CONST_INT)\n-\t\t    {\n-\t\t      v->dest_reg\n-\t\t\t= plus_constant (tem, INTVAL (XEXP (new_reg, 1)));\n-\n-\t\t      /* Only succeed if this will give valid addresses.\n-\t\t\t Try to validate both the first and the last\n-\t\t\t address resulting from loop unrolling, if\n-\t\t\t one fails, then can't do const elim here.  */\n-\t\t      if (verify_addresses (v, giv_inc, unroll_number))\n-\t\t\t{\n-\t\t\t  /* Save the negative of the eliminated const, so\n-\t\t\t     that we can calculate the dest_reg's increment\n-\t\t\t     value later.  */\n-\t\t\t  v->const_adjust = -INTVAL (XEXP (new_reg, 1));\n-\n-\t\t\t  new_reg = XEXP (new_reg, 0);\n-\t\t\t  if (loop_dump_stream)\n-\t\t\t    fprintf (loop_dump_stream,\n-\t\t\t\t     \"Eliminating constant from giv %d\\n\",\n-\t\t\t\t     REGNO (tem));\n-\t\t\t}\n-\t\t      else\n-\t\t\tv->dest_reg = tem;\n-\t\t    }\n-\t\t  else\n-\t\t    v->dest_reg = tem;\n-\n-\t\t  /* If the address hasn't been checked for validity yet, do so\n-\t\t     now, and fail completely if either the first or the last\n-\t\t     unrolled copy of the address is not a valid address\n-\t\t     for the instruction that uses it.  */\n-\t\t  if (v->dest_reg == tem\n-\t\t      && ! verify_addresses (v, giv_inc, unroll_number))\n-\t\t    {\n-\t\t      for (v2 = v->next_iv; v2; v2 = v2->next_iv)\n-\t\t\tif (v2->same_insn == v)\n-\t\t\t  v2->same_insn = 0;\n-\n-\t\t      if (loop_dump_stream)\n-\t\t\tfprintf (loop_dump_stream,\n-\t\t\t\t \"Invalid address for giv at insn %d\\n\",\n-\t\t\t\t INSN_UID (v->insn));\n-\t\t      continue;\n-\t\t    }\n-\n-\t\t  v->new_reg = new_reg;\n-\t\t  v->same = same;\n-\n-\t\t  /* We set this after the address check, to guarantee that\n-\t\t     the register will be initialized.  */\n-\t\t  v->unrolled = 1;\n-\n-\t\t  /* To initialize the new register, just move the value of\n-\t\t     new_reg into it.  This is not guaranteed to give a valid\n-\t\t     instruction on machines with complex addressing modes.\n-\t\t     If we can't recognize it, then delete it and emit insns\n-\t\t     to calculate the value from scratch.  */\n-\t\t  loop_insn_hoist (loop, gen_rtx_SET (VOIDmode, tem,\n-\t\t\t\t\t\t      copy_rtx (v->new_reg)));\n-\t\t  if (recog_memoized (PREV_INSN (loop->start)) < 0)\n-\t\t    {\n-\t\t      rtx sequence, ret;\n-\n-\t\t      /* We can't use bl->initial_value to compute the initial\n-\t\t\t value, because the loop may have been preconditioned.\n-\t\t\t We must calculate it from NEW_REG.  */\n-\t\t      delete_related_insns (PREV_INSN (loop->start));\n-\n-\t\t      start_sequence ();\n-\t\t      ret = force_operand (v->new_reg, tem);\n-\t\t      if (ret != tem)\n-\t\t\temit_move_insn (tem, ret);\n-\t\t      sequence = get_insns ();\n-\t\t      end_sequence ();\n-\t\t      loop_insn_hoist (loop, sequence);\n-\n-\t\t      if (loop_dump_stream)\n-\t\t\tfprintf (loop_dump_stream,\n-\t\t\t\t \"Invalid init insn, rewritten.\\n\");\n-\t\t    }\n-\t\t}\n-\t      else\n+\t      else if (unroll_type == UNROLL_COMPLETELY)\n \t\t{\n \t\t  v->dest_reg = value;\n \n@@ -2981,6 +2883,8 @@ find_splittable_givs (loop, bl, unroll_type, increment, unroll_number)\n \t\t      continue;\n \t\t    }\n \t\t}\n+\t      else\n+\t\tcontinue;\n \n \t      /* Store the value of dest_reg into the insn.  This sharing\n \t\t will not be a problem as this insn will always be copied"}]}