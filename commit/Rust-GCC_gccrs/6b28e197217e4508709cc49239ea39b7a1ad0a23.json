{"sha": "6b28e197217e4508709cc49239ea39b7a1ad0a23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIyOGUxOTcyMTdlNDUwODcwOWNjNDkyMzllYTM5YjdhMWFkMGEyMw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2013-11-09T16:32:34Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2013-11-09T16:32:34Z"}, "message": "c-common.c (atomic_size_supported_p): New function.\n\n\t* c-common.c (atomic_size_supported_p): New function.\n\t(resolve_overloaded_atomic_exchange)\n\t(resolve_overloaded_atomic_compare_exchange)\n\t(resolve_overloaded_atomic_load, resolve_overloaded_atomic_store):\n\tUse it instead of comparing size with a local list of sizes.\n\nFrom-SVN: r204618", "tree": {"sha": "b2d16d6f89b752a35d24b7bf3a8b3ac694356e18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2d16d6f89b752a35d24b7bf3a8b3ac694356e18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b28e197217e4508709cc49239ea39b7a1ad0a23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b28e197217e4508709cc49239ea39b7a1ad0a23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b28e197217e4508709cc49239ea39b7a1ad0a23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b28e197217e4508709cc49239ea39b7a1ad0a23/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86dedeba367e5dc6153f5c92a09ee6888f2ce9a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86dedeba367e5dc6153f5c92a09ee6888f2ce9a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86dedeba367e5dc6153f5c92a09ee6888f2ce9a5"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "6b2a5ab811b41589e0f1d76e065f762a78e9ccf3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b28e197217e4508709cc49239ea39b7a1ad0a23/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b28e197217e4508709cc49239ea39b7a1ad0a23/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6b28e197217e4508709cc49239ea39b7a1ad0a23", "patch": "@@ -1,3 +1,11 @@\n+2013-11-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (atomic_size_supported_p): New function.\n+\t(resolve_overloaded_atomic_exchange)\n+\t(resolve_overloaded_atomic_compare_exchange)\n+\t(resolve_overloaded_atomic_load, resolve_overloaded_atomic_store):\n+\tUse it instead of comparing size with a local list of sizes.\n+\n 2013-11-07  Andrew MacLeod  <amacleod@redhat.com>\n \t    Joseph Myers  <joseph@codesourcery.com>\n "}, {"sha": "93481b9302713c33e93783d7d3519fedab0dbba2", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b28e197217e4508709cc49239ea39b7a1ad0a23/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b28e197217e4508709cc49239ea39b7a1ad0a23/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=6b28e197217e4508709cc49239ea39b7a1ad0a23", "patch": "@@ -10403,6 +10403,27 @@ add_atomic_size_parameter (unsigned n, location_t loc, tree function,\n }\n \n \n+/* Return whether atomic operations for naturally aligned N-byte\n+   arguments are supported, whether inline or through libatomic.  */\n+static bool\n+atomic_size_supported_p (int n)\n+{\n+  switch (n)\n+    {\n+    case 1:\n+    case 2:\n+    case 4:\n+    case 8:\n+      return true;\n+\n+    case 16:\n+      return targetm.scalar_mode_supported_p (TImode);\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n /* This will process an __atomic_exchange function call, determine whether it\n    needs to be mapped to the _N variation, or turned into a library call.\n    LOC is the location of the builtin call.\n@@ -10428,7 +10449,7 @@ resolve_overloaded_atomic_exchange (location_t loc, tree function,\n     }\n \n   /* If not a lock-free size, change to the library generic format.  */\n-  if (n != 1 && n != 2 && n != 4 && n != 8 && n != 16)\n+  if (!atomic_size_supported_p (n))\n     {\n       *new_return = add_atomic_size_parameter (n, loc, function, params);\n       return true;\n@@ -10493,7 +10514,7 @@ resolve_overloaded_atomic_compare_exchange (location_t loc, tree function,\n     }\n \n   /* If not a lock-free size, change to the library generic format.  */\n-  if (n != 1 && n != 2 && n != 4 && n != 8 && n != 16)\n+  if (!atomic_size_supported_p (n))\n     {\n       /* The library generic format does not have the weak parameter, so \n \t remove it from the param list.  Since a parameter has been removed,\n@@ -10569,7 +10590,7 @@ resolve_overloaded_atomic_load (location_t loc, tree function,\n     }\n \n   /* If not a lock-free size, change to the library generic format.  */\n-  if (n != 1 && n != 2 && n != 4 && n != 8 && n != 16)\n+  if (!atomic_size_supported_p (n))\n     {\n       *new_return = add_atomic_size_parameter (n, loc, function, params);\n       return true;\n@@ -10629,7 +10650,7 @@ resolve_overloaded_atomic_store (location_t loc, tree function,\n     }\n \n   /* If not a lock-free size, change to the library generic format.  */\n-  if (n != 1 && n != 2 && n != 4 && n != 8 && n != 16)\n+  if (!atomic_size_supported_p (n))\n     {\n       *new_return = add_atomic_size_parameter (n, loc, function, params);\n       return true;"}]}