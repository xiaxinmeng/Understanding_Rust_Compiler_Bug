{"sha": "8a90eeb6a839e92d0ae6800cb4ba25ca864b0076", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE5MGVlYjZhODM5ZTkyZDBhZTY4MDBjYjRiYTI1Y2E4NjRiMDA3Ng==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-04-22T00:44:15Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-04-22T00:44:15Z"}, "message": "remove some ifdef HAVE_cc0\n\ngcc/ChangeLog:\n\n2015-04-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* conditions.h: Define macros even if HAVE_cc0 is undefined.\n\t* emit-rtl.c: Define functions even if HAVE_cc0 is undefined.\n\t* final.c: Likewise.\n\t* jump.c: Likewise.\n\t* recog.c: Likewise.\n\t* recog.h: Declare functions even when HAVE_cc0 is undefined.\n\t* sched-deps.c (sched_analyze_2): Always compile case for cc0.\n\nFrom-SVN: r222294", "tree": {"sha": "8160a796c153a7d771bebd5d72b87cb37e57a451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8160a796c153a7d771bebd5d72b87cb37e57a451"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/comments", "author": null, "committer": null, "parents": [{"sha": "9a52250502b8e0beed0ff5b289fe0bf6230ca7c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "4448d317eba283be872838d361b288af5dc880fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a90eeb6a839e92d0ae6800cb4ba25ca864b0076", "patch": "@@ -1,3 +1,13 @@\n+2015-04-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* conditions.h: Define macros even if HAVE_cc0 is undefined.\n+\t* emit-rtl.c: Define functions even if HAVE_cc0 is undefined.\n+\t* final.c: Likewise.\n+\t* jump.c: Likewise.\n+\t* recog.c: Likewise.\n+\t* recog.h: Declare functions even when HAVE_cc0 is undefined.\n+\t* sched-deps.c (sched_analyze_2): Always compile case for cc0.\n+\n 2015-04-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* defaults.h: New definition of EH_RETURN_DATA_REGNO."}, {"sha": "7cd1e1c1cad35f8a8072b6c8c47e9c05be5bd5e9", "filename": "gcc/conditions.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/gcc%2Fconditions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/gcc%2Fconditions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconditions.h?ref=8a90eeb6a839e92d0ae6800cb4ba25ca864b0076", "patch": "@@ -20,10 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_CONDITIONS_H\n #define GCC_CONDITIONS_H\n \n-/* None of the things in the files exist if we don't use CC0.  */\n-\n-#ifdef HAVE_cc0\n-\n /* The variable cc_status says how to interpret the condition code.\n    It is set by output routines for an instruction that sets the cc's\n    and examined by output routines for jump instructions.\n@@ -117,6 +113,4 @@ extern CC_STATUS cc_status;\n  (cc_status.flags = 0, cc_status.value1 = 0, cc_status.value2 = 0,  \\\n   CC_STATUS_MDEP_INIT)\n \n-#endif\n-\n #endif /* GCC_CONDITIONS_H */"}, {"sha": "35ecc0529cc57b7e04b5023889c7a1e708f45f54", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=8a90eeb6a839e92d0ae6800cb4ba25ca864b0076", "patch": "@@ -3539,7 +3539,6 @@ prev_active_insn (rtx uncast_insn)\n   return insn;\n }\n \f\n-#ifdef HAVE_cc0\n /* Return the next insn that uses CC0 after INSN, which is assumed to\n    set it.  This is the inverse of prev_cc0_setter (i.e., prev_cc0_setter\n    applied to the result of this function should yield INSN).\n@@ -3587,7 +3586,6 @@ prev_cc0_setter (rtx uncast_insn)\n \n   return insn;\n }\n-#endif\n \n #ifdef AUTO_INC_DEC\n /* Find a RTX_AUTOINC class rtx which matches DATA.  */"}, {"sha": "41f6bd9fe043f69518eaecc244128f17479d95e8", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=8a90eeb6a839e92d0ae6800cb4ba25ca864b0076", "patch": "@@ -191,7 +191,6 @@ static rtx last_ignored_compare = 0;\n \n static int insn_counter = 0;\n \n-#ifdef HAVE_cc0\n /* This variable contains machine-dependent flags (defined in tm.h)\n    set and examined by output routines\n    that describe how to interpret the condition codes properly.  */\n@@ -202,7 +201,6 @@ CC_STATUS cc_status;\n    from before the insn.  */\n \n CC_STATUS cc_prev_status;\n-#endif\n \n /* Number of unmatched NOTE_INSN_BLOCK_BEG notes we have seen.  */\n "}, {"sha": "bc91550b510d10a50d0c4b8b920a6c4557e4a0fa", "filename": "gcc/jump.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=8a90eeb6a839e92d0ae6800cb4ba25ca864b0076", "patch": "@@ -1044,8 +1044,6 @@ jump_to_label_p (const rtx_insn *insn)\n \t  && JUMP_LABEL (insn) != NULL && !ANY_RETURN_P (JUMP_LABEL (insn)));\n }\n \n-#ifdef HAVE_cc0\n-\n /* Return nonzero if X is an RTX that only sets the condition codes\n    and has no side effects.  */\n \n@@ -1094,7 +1092,6 @@ sets_cc0_p (const_rtx x)\n     }\n   return 0;\n }\n-#endif\n \f\n /* Find all CODE_LABELs referred to in X, and increment their use\n    counts.  If INSN is a JUMP_INSN and there is at least one"}, {"sha": "c3ad86f74486ca2c55184e95754adb765371164a", "filename": "gcc/recog.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=8a90eeb6a839e92d0ae6800cb4ba25ca864b0076", "patch": "@@ -971,7 +971,6 @@ validate_simplify_insn (rtx insn)\n   return ((num_changes_pending () > 0) && (apply_change_group () > 0));\n }\n \f\n-#ifdef HAVE_cc0\n /* Return 1 if the insn using CC0 set by INSN does not contain\n    any ordered tests applied to the condition codes.\n    EQ and NE tests do not count.  */\n@@ -988,7 +987,6 @@ next_insn_tests_no_inequality (rtx insn)\n   return (INSN_P (next)\n \t  && ! inequality_comparisons_p (PATTERN (next)));\n }\n-#endif\n \f\n /* Return 1 if OP is a valid general operand for machine mode MODE.\n    This is either a register reference, a memory reference,"}, {"sha": "8a38b269c47a922e61d6afa8a687e9f5dca04950", "filename": "gcc/recog.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=8a90eeb6a839e92d0ae6800cb4ba25ca864b0076", "patch": "@@ -112,9 +112,7 @@ extern void validate_replace_rtx_group (rtx, rtx, rtx);\n extern void validate_replace_src_group (rtx, rtx, rtx);\n extern bool validate_simplify_insn (rtx insn);\n extern int num_changes_pending (void);\n-#ifdef HAVE_cc0\n extern int next_insn_tests_no_inequality (rtx);\n-#endif\n extern bool reg_fits_class_p (const_rtx, reg_class_t, int, machine_mode);\n \n extern int offsettable_memref_p (rtx);"}, {"sha": "6fd6774c45f60d8fbc9877220aa851e592b5ef46", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=8a90eeb6a839e92d0ae6800cb4ba25ca864b0076", "patch": "@@ -2608,8 +2608,10 @@ sched_analyze_2 (struct deps_desc *deps, rtx x, rtx_insn *insn)\n \n       return;\n \n-#ifdef HAVE_cc0\n     case CC0:\n+#ifndef HAVE_cc0\n+      gcc_unreachable ();\n+#endif\n       /* User of CC0 depends on immediately preceding insn.  */\n       SCHED_GROUP_P (insn) = 1;\n        /* Don't move CC0 setter to another block (it can set up the\n@@ -2620,7 +2622,6 @@ sched_analyze_2 (struct deps_desc *deps, rtx x, rtx_insn *insn)\n \tsched_deps_info->finish_rhs ();\n \n       return;\n-#endif\n \n     case REG:\n       {"}]}