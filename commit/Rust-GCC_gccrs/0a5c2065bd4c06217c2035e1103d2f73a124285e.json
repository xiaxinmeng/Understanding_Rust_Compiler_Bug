{"sha": "0a5c2065bd4c06217c2035e1103d2f73a124285e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE1YzIwNjViZDRjMDYyMTdjMjAzNWUxMTAzZDJmNzNhMTI0Mjg1ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-08-10T07:17:44Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-08-10T07:17:44Z"}, "message": "re PR libstdc++/45228 ([C++0x] Can't copy-construct \"tuple<int,int,int>\" from \"const tuple<int,int,int>\" rvalue)\n\n2010-08-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/45228\n\t* include/std/tuple (tuple<typename... _Elements>): Constrain\n\tconverting constructors and assignment operators with\n\tsizeof...(_UElements) == sizeof...(_Elements).\n\t(tuple(tuple<_UElements...>&): Remove.\n\t(tuple<typename _T1>): Add.\n\t* testsuite/20_util/tuple/cons/45228.cc: New.\n\t* testsuite/20_util/tuple/cons/converting.cc: Likewise.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust\n\tdg-error line number.\n\n\t* include/std/tuple (_Tuple_impl<>::_Tuple_impl(const _Tuple_impl&)):\n\tDefaulted.\n\n\t* include/std/tuple (tuple<typename _T1, typename _T2>\n\t::operator=(pair<_U1, _U2>&&)): Use forward.\n\nFrom-SVN: r163049", "tree": {"sha": "4c8b8b103522c21ec6cef88db1439e6b3262be27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c8b8b103522c21ec6cef88db1439e6b3262be27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a5c2065bd4c06217c2035e1103d2f73a124285e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a5c2065bd4c06217c2035e1103d2f73a124285e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a5c2065bd4c06217c2035e1103d2f73a124285e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a5c2065bd4c06217c2035e1103d2f73a124285e/comments", "author": null, "committer": null, "parents": [{"sha": "ff61e417cf1adde9a9f4e6a66c8bc708bdef7e6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff61e417cf1adde9a9f4e6a66c8bc708bdef7e6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff61e417cf1adde9a9f4e6a66c8bc708bdef7e6f"}], "stats": {"total": 209, "additions": 189, "deletions": 20}, "files": [{"sha": "60155681d2e24cb4e0f2ba93873ea05b16b6d147", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a5c2065bd4c06217c2035e1103d2f73a124285e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a5c2065bd4c06217c2035e1103d2f73a124285e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0a5c2065bd4c06217c2035e1103d2f73a124285e", "patch": "@@ -1,3 +1,22 @@\n+2010-08-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/45228\n+\t* include/std/tuple (tuple<typename... _Elements>): Constrain\n+\tconverting constructors and assignment operators with\n+\tsizeof...(_UElements) == sizeof...(_Elements).\n+\t(tuple(tuple<_UElements...>&): Remove.\n+\t(tuple<typename _T1>): Add.\n+\t* testsuite/20_util/tuple/cons/45228.cc: New.\n+\t* testsuite/20_util/tuple/cons/converting.cc: Likewise.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust\n+\tdg-error line number.\n+\n+\t* include/std/tuple (_Tuple_impl<>::_Tuple_impl(const _Tuple_impl&)):\n+\tDefaulted.\n+\n+\t* include/std/tuple (tuple<typename _T1, typename _T2>\n+\t::operator=(pair<_U1, _U2>&&)): Use forward.\n+\n 2010-08-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/44963"}, {"sha": "67a6eb79e949daa2f7ba4d3fecf1a409f0fc2feb", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 89, "deletions": 19, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a5c2065bd4c06217c2035e1103d2f73a124285e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a5c2065bd4c06217c2035e1103d2f73a124285e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=0a5c2065bd4c06217c2035e1103d2f73a124285e", "patch": "@@ -160,8 +160,7 @@ namespace std\n \t: _Inherited(std::forward<_UTail>(__tail)...),\n \t  _Base(std::forward<_UHead>(__head)) { }\n \n-      _Tuple_impl(const _Tuple_impl& __in)\n-      : _Inherited(__in._M_tail()), _Base(__in._M_head()) { }\n+      _Tuple_impl(const _Tuple_impl&) = default;\n \n       _Tuple_impl(_Tuple_impl&& __in)\n       : _Inherited(std::move(__in._M_tail())),\n@@ -233,7 +232,9 @@ namespace std\n       tuple(const _Elements&... __elements)\n       : _Inherited(__elements...) { }\n \n-      template<typename... _UElements>\n+      template<typename... _UElements, typename = typename\n+\t       std::enable_if<sizeof...(_UElements)\n+\t\t\t      == sizeof...(_Elements)>::type>\n         explicit\n         tuple(_UElements&&... __elements)\n \t: _Inherited(std::forward<_UElements>(__elements)...) {\t}\n@@ -243,20 +244,18 @@ namespace std\n       tuple(tuple&& __in)\n       : _Inherited(static_cast<_Inherited&&>(__in)) { }\n \n-      template<typename... _UElements>\n+      template<typename... _UElements, typename = typename\n+\t       std::enable_if<sizeof...(_UElements)\n+\t\t\t      == sizeof...(_Elements)>::type>\n         tuple(const tuple<_UElements...>& __in)\n-\t: _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))\n-\t{ }\n+        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))\n+        { }\n \n-      template<typename... _UElements>\n+      template<typename... _UElements, typename = typename\n+\t       std::enable_if<sizeof...(_UElements)\n+\t\t\t      == sizeof...(_Elements)>::type>\n         tuple(tuple<_UElements...>&& __in)\n-\t: _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }\n-\n-      // XXX http://gcc.gnu.org/ml/libstdc++/2008-02/msg00047.html\n-      template<typename... _UElements>\n-        tuple(tuple<_UElements...>& __in)\n-\t: _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))\n-\t{ }\n+        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }\n \n       tuple&\n       operator=(const tuple& __in)\n@@ -272,15 +271,19 @@ namespace std\n \treturn *this;\n       }\n \n-      template<typename... _UElements>\n+      template<typename... _UElements, typename = typename\n+\t       std::enable_if<sizeof...(_UElements)\n+\t\t\t      == sizeof...(_Elements)>::type>\n         tuple&\n         operator=(const tuple<_UElements...>& __in)\n         {\n \t  static_cast<_Inherited&>(*this) = __in;\n \t  return *this;\n \t}\n \n-      template<typename... _UElements>\n+      template<typename... _UElements, typename = typename\n+\t       std::enable_if<sizeof...(_UElements)\n+\t\t\t      == sizeof...(_Elements)>::type>\n         tuple&\n         operator=(tuple<_UElements...>&& __in)\n         {\n@@ -293,7 +296,6 @@ namespace std\n       { _Inherited::_M_swap_impl(__in); }\n     };\n \n-\n   template<>  \n     class tuple<>\n     {\n@@ -385,8 +387,8 @@ namespace std\n         tuple&\n         operator=(pair<_U1, _U2>&& __in)\n         {\n-\t  this->_M_head() = std::move(__in.first);\n-\t  this->_M_tail()._M_head() = std::move(__in.second);\n+\t  this->_M_head() = std::forward<_U1>(__in.first);\n+\t  this->_M_tail()._M_head() = std::forward<_U2>(__in.second);\n \t  return *this;\n \t}\n \n@@ -399,6 +401,74 @@ namespace std\n       }\n     };\n \n+  /// tuple (1-element).\n+  template<typename _T1>\n+    class tuple<_T1> : public _Tuple_impl<0, _T1>\n+    {\n+      typedef _Tuple_impl<0, _T1> _Inherited;\n+\n+    public:\n+      tuple()\n+      : _Inherited() { }\n+\n+      explicit\n+      tuple(const _T1& __a1)\n+      : _Inherited(__a1) { }\n+\n+      template<typename _U1, typename = typename\n+\t       std::enable_if<std::is_convertible<_U1, _T1>::value>::type>\n+        explicit\n+        tuple(_U1&& __a1)\n+\t: _Inherited(std::forward<_U1>(__a1)) { }\n+\n+      tuple(const tuple&) = default;\n+\n+      tuple(tuple&& __in)\n+      : _Inherited(static_cast<_Inherited&&>(__in)) { }\n+\n+      template<typename _U1>\n+        tuple(const tuple<_U1>& __in)\n+        : _Inherited(static_cast<const _Tuple_impl<0, _U1>&>(__in)) { }\n+\n+      template<typename _U1>\n+        tuple(tuple<_U1>&& __in)\n+\t: _Inherited(static_cast<_Tuple_impl<0, _U1>&&>(__in)) { }\n+\n+      tuple&\n+      operator=(const tuple& __in)\n+      {\n+\tstatic_cast<_Inherited&>(*this) = __in;\n+\treturn *this;\n+      }\n+\n+      tuple&\n+      operator=(tuple&& __in)\n+      {\n+\tstatic_cast<_Inherited&>(*this) = std::move(__in);\n+\treturn *this;\n+      }\n+\n+      template<typename _U1>\n+        tuple&\n+        operator=(const tuple<_U1>& __in)\n+        {\n+\t  static_cast<_Inherited&>(*this) = __in;\n+\t  return *this;\n+\t}\n+\n+      template<typename _U1>\n+        tuple&\n+        operator=(tuple<_U1>&& __in)\n+        {\n+\t  static_cast<_Inherited&>(*this) = std::move(__in);\n+\t  return *this;\n+\t}\n+\n+      void\n+      swap(tuple& __in)\n+      { _Inherited::_M_swap_impl(__in); }\n+    };\n+\n \n   /// Gives the type of the ith element of a given tuple type.\n   template<std::size_t __i, typename _Tp>"}, {"sha": "863d7884779958fb5004c00954dea0f29e9d1f54", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/45228.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a5c2065bd4c06217c2035e1103d2f73a124285e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F45228.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a5c2065bd4c06217c2035e1103d2f73a124285e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F45228.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F45228.cc?ref=0a5c2065bd4c06217c2035e1103d2f73a124285e", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+\n+typedef std::tuple<int>           Tuple_1;\n+typedef std::tuple<int, int>      Tuple_2;\n+typedef std::tuple<int, int, int> Tuple_3;\n+\n+      Tuple_1 A_1() { return Tuple_1(); }\n+const Tuple_1 B_1() { return Tuple_1(); }\n+\n+      Tuple_2 A_2() { return Tuple_2(); }\n+const Tuple_2 B_2() { return Tuple_2(); }\n+\n+      Tuple_3 A_3() { return Tuple_3(); }\n+const Tuple_3 B_3() { return Tuple_3(); }\n+\n+Tuple_1 test_A_1(A_1());\n+Tuple_1 test_B_1(B_1());\n+\n+Tuple_2 test_A_2(A_2());\n+Tuple_2 test_B_2(B_2());\n+\n+Tuple_3 test_A_3(A_3());\n+Tuple_3 test_B_3(B_3());"}, {"sha": "def1b521dfd6bf218c9c96771b65eb337a7e89eb", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/converting.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a5c2065bd4c06217c2035e1103d2f73a124285e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconverting.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a5c2065bd4c06217c2035e1103d2f73a124285e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconverting.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconverting.cc?ref=0a5c2065bd4c06217c2035e1103d2f73a124285e", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+\n+// http://gcc.gnu.org/ml/libstdc++/2008-02/msg00047.html\n+std::tuple<int> ts1;\n+std::tuple<unsigned> tu1(ts1);\n+\n+std::tuple<int, int> ts2;\n+std::tuple<unsigned, unsigned> tu2(ts2);\n+\n+std::tuple<int, int, int> ts3;\n+std::tuple<unsigned, unsigned, unsigned> tu3(ts3);\n+\n+std::tuple<int, unsigned> tm2;\n+std::tuple<unsigned, int> tm2_(tm2);\n+\n+std::tuple<int, unsigned, int> tm3;\n+std::tuple<unsigned, int, unsigned> tm3_(tm3);"}, {"sha": "7942c0527a3ba002e062abe71fdb89b3573c8466", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a5c2065bd4c06217c2035e1103d2f73a124285e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a5c2065bd4c06217c2035e1103d2f73a124285e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=0a5c2065bd4c06217c2035e1103d2f73a124285e", "patch": "@@ -44,7 +44,7 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 324 }\n // { dg-warning \"note\" \"\" { target *-*-* } 423 }\n // { dg-warning \"note\" \"\" { target *-*-* } 862 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 510 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 580 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1027 }\n // { dg-warning \"note\" \"\" { target *-*-* } 340 }\n // { dg-warning \"note\" \"\" { target *-*-* } 290 }"}]}