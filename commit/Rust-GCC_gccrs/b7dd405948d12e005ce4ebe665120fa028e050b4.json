{"sha": "b7dd405948d12e005ce4ebe665120fa028e050b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdkZDQwNTk0OGQxMmUwMDVjZTRlYmU2NjUxMjBmYTAyOGUwNTBiNA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-08-03T07:35:49Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-08-03T07:38:51Z"}, "message": "Fortran texi: Fix typos\n\ngcc/fortran/ChangeLog\n\n\t* gfc-internals.texi: Fix typos.\n\t* gfortran.texi: Likewise.\n\t* intrinsic.texi: Likewise.\n\t* invoke.texi: Likewise.", "tree": {"sha": "79a6aeabf475d6e4d18f2bcab41dc982b3a18419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79a6aeabf475d6e4d18f2bcab41dc982b3a18419"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7dd405948d12e005ce4ebe665120fa028e050b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7dd405948d12e005ce4ebe665120fa028e050b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7dd405948d12e005ce4ebe665120fa028e050b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7dd405948d12e005ce4ebe665120fa028e050b4/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ba9fb0a3e65254cb5d8cb0a3bc67bbef8ed2fcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba9fb0a3e65254cb5d8cb0a3bc67bbef8ed2fcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ba9fb0a3e65254cb5d8cb0a3bc67bbef8ed2fcf"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "6c720434eeedfb7dba9c247e821945803c92d450", "filename": "gcc/fortran/gfc-internals.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dd405948d12e005ce4ebe665120fa028e050b4/gcc%2Ffortran%2Fgfc-internals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dd405948d12e005ce4ebe665120fa028e050b4/gcc%2Ffortran%2Fgfc-internals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfc-internals.texi?ref=b7dd405948d12e005ce4ebe665120fa028e050b4", "patch": "@@ -810,7 +810,7 @@ gfc_add_modify (block, var, build_int_cst (integer_type_node, 42));\n @end smallexample\n \n @node Converting Expressions\n-@section Converting Expressons to tree\n+@section Converting Expressions to tree\n \n Converting expressions to @code{tree} is done by functions called\n @code{gfc_conv_*}."}, {"sha": "151e3d764e706c4e4ef8514b9154d318ffaae8af", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dd405948d12e005ce4ebe665120fa028e050b4/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dd405948d12e005ce4ebe665120fa028e050b4/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=b7dd405948d12e005ce4ebe665120fa028e050b4", "patch": "@@ -862,7 +862,7 @@ deferred character length left-hand sides are correctly handled but arrays\n are not yet fully implemented.\n \n @item Deferred-length character variables and scalar deferred-length character\n-components of derived types are supported. (Note that array-valued compoents\n+components of derived types are supported. (Note that array-valued components\n are not yet implemented.)\n \n @item Transferring of allocations via @code{MOVE_ALLOC}.\n@@ -4168,7 +4168,7 @@ an array descriptor.  All other arrays pass the address of the\n first element of the array.  With @option{-fcoarray=lib}, the token\n and the offset belonging to nonallocatable coarrays dummy arguments\n are passed as hidden argument along the character length hidden\n-arguments.  The token is an oparque pointer identifying the coarray\n+arguments.  The token is an opaque pointer identifying the coarray\n and the offset is a passed-by-value integer of kind @code{C_PTRDIFF_T},\n denoting the byte offset between the base address of the coarray and\n the passed scalar or first element of the passed array.\n@@ -4362,7 +4362,7 @@ typedef struct caf_reference_t {\n \n The references make up a single linked list of reference operations.  The\n @code{NEXT} member links to the next reference or NULL to indicate the end of\n-the chain.  Component and array refs can be arbitrarly mixed as long as they\n+the chain.  Component and array refs can be arbitrarily mixed as long as they\n comply to the Fortran standard.\n \n @emph{NOTES}\n@@ -4683,7 +4683,7 @@ status. Note that for critical blocks, the locking is only required on one\n image; in the locking statement, the processor shall always pass an\n image index of one for critical-block lock variables\n (@code{CAF_REGTYPE_CRITICAL}). For lock types and critical-block variables,\n-the initial value shall be unlocked (or, respecitively, not in critical\n+the initial value shall be unlocked (or, respectively, not in critical\n section) such as the value false; for event types, the initial state should\n be no event, e.g. zero.\n @end table\n@@ -5134,15 +5134,15 @@ error message why the operation is not permitted.\n @table @asis\n @item @emph{Description}:\n Acquire a lock on the given image on a scalar locking variable or for the\n-given array element for an array-valued variable.  If the @var{aquired_lock}\n+given array element for an array-valued variable.  If the @var{acquired_lock}\n is @code{NULL}, the function returns after having obtained the lock.  If it is\n non-@code{NULL}, then @var{acquired_lock} is assigned the value true (one) when\n the lock could be obtained and false (zero) otherwise.  Locking a lock variable\n which has already been locked by the same image is an error.\n \n @item @emph{Syntax}:\n @code{void _gfortran_caf_lock (caf_token_t token, size_t index, int image_index,\n-int *aquired_lock, int *stat, char *errmsg, size_t errmsg_len)}\n+int *acquired_lock, int *stat, char *errmsg, size_t errmsg_len)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -5151,7 +5151,7 @@ int *aquired_lock, int *stat, char *errmsg, size_t errmsg_len)}\n scalars, it is always 0.\n @item @var{image_index} @tab intent(in)  The ID of the remote image; must be a\n positive number.\n-@item @var{aquired_lock} @tab intent(out) If not NULL, it returns whether lock\n+@item @var{acquired_lock} @tab intent(out) If not NULL, it returns whether lock\n could be obtained.\n @item @var{stat} @tab intent(out) Stores the STAT=; may be NULL.\n @item @var{errmsg} @tab intent(out) When an error occurs, this will be set to"}, {"sha": "13325ede3e366ceee7251df84cfbf1ea943ed72d", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dd405948d12e005ce4ebe665120fa028e050b4/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dd405948d12e005ce4ebe665120fa028e050b4/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=b7dd405948d12e005ce4ebe665120fa028e050b4", "patch": "@@ -8325,7 +8325,7 @@ Elemental function\n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n @item @var{A}    @tab Shall be of type @code{INTEGER},\n-@code{REAL}, or @code{COMPLEX} or or a boz-literal-constant.\n+@code{REAL}, or @code{COMPLEX} or a boz-literal-constant.\n @item @var{KIND} @tab (Optional) An @code{INTEGER} initialization\n expression indicating the kind parameter of the result.\n @end multitable\n@@ -10416,7 +10416,7 @@ Transformational function\n @item @var{DIM}   @tab (Optional) Shall be a scalar of type\n @code{INTEGER}, with a value between one and the rank of @var{ARRAY},\n inclusive.  It may not be an optional dummy argument.\n-@item @var{MASK}  @tab (Opional) Shall be an array of type @code{LOGICAL},\n+@item @var{MASK}  @tab (Optional) Shall be an array of type @code{LOGICAL},\n and conformable with @var{ARRAY}.\n @end multitable\n "}, {"sha": "fbff64ae992e632dee66312d997ba0fe2214c0e0", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dd405948d12e005ce4ebe665120fa028e050b4/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dd405948d12e005ce4ebe665120fa028e050b4/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=b7dd405948d12e005ce4ebe665120fa028e050b4", "patch": "@@ -1826,7 +1826,7 @@ The default value for @var{n} is 30.\n \n @item -finline-matmul-limit=@var{n}\n @opindex @code{finline-matmul-limit}\n-When front-end optimiztion is active, some calls to the @code{MATMUL}\n+When front-end optimization is active, some calls to the @code{MATMUL}\n intrinsic function will be inlined.  This may result in code size\n increase if the size of the matrix cannot be determined at compile\n time, as code for both cases is generated.  Setting"}]}