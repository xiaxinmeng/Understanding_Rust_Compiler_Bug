{"sha": "758d2c0c2f1a5b0011e8ba262e1d338e3fec813f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU4ZDJjMGMyZjFhNWIwMDExZThiYTI2MmUxZDMzOGUzZmVjODEzZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-16T14:53:48Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-16T14:53:48Z"}, "message": "(alpha_emit_conditional_move): New function.\n\nFrom-SVN: r11814", "tree": {"sha": "f8dfe2a412f857aa0a4066e57bd0d06f0994e8e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8dfe2a412f857aa0a4066e57bd0d06f0994e8e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/758d2c0c2f1a5b0011e8ba262e1d338e3fec813f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/758d2c0c2f1a5b0011e8ba262e1d338e3fec813f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/758d2c0c2f1a5b0011e8ba262e1d338e3fec813f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/758d2c0c2f1a5b0011e8ba262e1d338e3fec813f/comments", "author": null, "committer": null, "parents": [{"sha": "04aa3b9c2673493bb39c0037f818066f9ee66b75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04aa3b9c2673493bb39c0037f818066f9ee66b75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04aa3b9c2673493bb39c0037f818066f9ee66b75"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "e3edeca947074e0a1411e2bf0ca91a54f5c92c36", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/758d2c0c2f1a5b0011e8ba262e1d338e3fec813f/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/758d2c0c2f1a5b0011e8ba262e1d338e3fec813f/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=758d2c0c2f1a5b0011e8ba262e1d338e3fec813f", "patch": "@@ -965,6 +965,67 @@ alpha_emit_set_const_1 (target, mode, c, n)\n \n   return 0;\n }\n+\n+/* Rewrite a comparison against zero CMP of the form\n+   (CODE (cc0) (const_int 0)) so it can be written validly in\n+   a conditional move (if_then_else CMP ...).\n+   If both of the operands that set cc0 are non-zero we must emit\n+   an insn to perform the compare (it can't be done within\n+   the conditional move). */\n+rtx\n+alpha_emit_conditional_move (cmp, mode)\n+     rtx cmp;\n+     enum machine_mode mode;\n+{\n+  rtx op0 = alpha_compare_op0;\n+  rtx op1 = alpha_compare_op1;\n+  rtx zero = CONST0_RTX (mode);\n+  rtx tmp;\n+  enum rtx_code code = GET_CODE (cmp), code2;\n+\n+  if (alpha_compare_fp_p != FLOAT_MODE_P(mode))\n+    return 0;\n+\n+  /* We may be able to use a conditional move directly.\n+     This avoids emitting spurious compares. */\n+  if (signed_comparison_operator (cmp, mode) && (op0 == zero || op1 == zero))\n+    return gen_rtx (code, mode, op0, op1);\n+\n+  /* We can't put the comparison insides a conditional move;\n+     emit a compare instruction and put that inside the\n+     conditional move. */\n+\n+  /* The alpha does not have NE GE GT compares for any mode.  Avoid them. */\n+  code2 = NE;\n+  switch (code)\n+    {\n+    /* We have these compares: */\n+    case EQ: case LE: case LT:\n+      break;\n+    /* These must be inverted: */\n+    case NE:\n+      code = code2 = EQ;\n+      break;\n+    case GE:\n+      code = LE;\n+      op0 = force_reg (mode, alpha_compare_op1);\n+      op1 = alpha_compare_op0;\n+      break;\n+    case GT:\n+      code = LT;\n+      op0 = force_reg (mode, alpha_compare_op1);\n+      op1 = alpha_compare_op0;\n+      break;\n+    default:\n+      return 0;\n+    }\n+\n+  cmp = gen_rtx (code, mode, op0, op1);\n+  tmp = gen_reg_rtx (mode);\n+  emit_insn (gen_rtx (SET, VOIDmode, tmp, cmp));\n+  cmp = gen_rtx (code2, VOIDmode, tmp, zero);\n+  return cmp;\n+}\n \f\n /* Adjust the cost of a scheduling dependency.  Return the new cost of\n    a dependency LINK or INSN on DEP_INSN.  COST is the current cost.  */"}]}