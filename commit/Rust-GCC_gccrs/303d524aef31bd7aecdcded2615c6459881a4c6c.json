{"sha": "303d524aef31bd7aecdcded2615c6459881a4c6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAzZDUyNGFlZjMxYmQ3YWVjZGNkZWQyNjE1YzY0NTk4ODFhNGM2Yw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-07-27T21:38:28Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-07-27T21:38:28Z"}, "message": "(ASM_LONG, ASM_SHORT, ASM_BYTE_OP):  Definitions added.\n\n(ASM_OUTPUT_DOUBLE):  Use REAL_VALUE_TO_TARGET_DOUBLE to convert.\n(ASM_OUTPUT_FLOAT):  Use REAL_VALUE_TO_TARGET_SINGLE to convert.\n(ASM_OUTPUT_INT):  Use ASM_LONG pseudo-op.\n(ASM_OUTPUT_SHORT):  Use ASM_SHORT pseudo-op.\n(ASM_OUTPUT_CHAR):  Use ASM_BYTE_OP pseudo-op.\n(ASM_OUTPUT_BYTE):  Use ASM_BYTE_OP pseudo-op.\n\nFrom-SVN: r1692", "tree": {"sha": "d25f2edcb0a97b302204ce5d09abd407911a267b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d25f2edcb0a97b302204ce5d09abd407911a267b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/303d524aef31bd7aecdcded2615c6459881a4c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303d524aef31bd7aecdcded2615c6459881a4c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/303d524aef31bd7aecdcded2615c6459881a4c6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303d524aef31bd7aecdcded2615c6459881a4c6c/comments", "author": null, "committer": null, "parents": [{"sha": "c2fb4581c8df828370c92a5beefc384931c61f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2fb4581c8df828370c92a5beefc384931c61f63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2fb4581c8df828370c92a5beefc384931c61f63"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "2cb0c0efdf6989fb73ae9b6b8b923cdf6debd16b", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303d524aef31bd7aecdcded2615c6459881a4c6c/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303d524aef31bd7aecdcded2615c6459881a4c6c/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=303d524aef31bd7aecdcded2615c6459881a4c6c", "patch": "@@ -1439,6 +1439,10 @@ extern struct rtx_def *legitimize_pic_address ();\n \n #define ASM_APP_OFF \"\"\n \n+#define ASM_LONG\t\".word\"\n+#define ASM_SHORT\t\".half\"\n+#define ASM_BYTE_OP\t\".byte\"\n+\n /* Output before read-only data.  */\n \n #define TEXT_SECTION_ASM_OP \".text\"\n@@ -1536,14 +1540,14 @@ extern struct rtx_def *legitimize_pic_address ();\n    They reject 99e9999, but accept inf.  */\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.double 0r%sinf\\n\", (VALUE) > 0 ? \"\" : \"-\");\t\\\n-    else if (REAL_VALUE_ISNAN (VALUE)\t\t\t\t\t\\\n-\t     || REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\t\\\n+    if (REAL_VALUE_ISINF (VALUE)\t\t\t\t\t\\\n+        || REAL_VALUE_ISNAN (VALUE)\t\t\t\t\t\\\n+\t|| REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tunion { double d; long l[2];} t;\t\t\t\t\\\n-\tt.d = (VALUE);\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t.word 0x%lx\\n\\t.word 0x%lx\\n\", t.l[0], t.l[1]); \\\n+\tlong t[2];\t\t\t\t\t\t\t\\\n+\tREAL_VALUE_TO_TARGET_DOUBLE ((VALUE), t);\t\t\t\\\n+\tfprintf (FILE, \"\\t%s\\t0x%lx\\n\\t%s\\t0x%lx\\n\",\t\t\t\\\n+\t\t ASM_LONG, t[0], ASM_LONG, t[1]);\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     else\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\t.double 0r%.17g\\n\", VALUE);\t\t\t\\\n@@ -1553,14 +1557,13 @@ extern struct rtx_def *legitimize_pic_address ();\n \n #define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.single 0r%sinf\\n\", (VALUE) > 0 ? \"\" : \"-\");\t\\\n-    else if (REAL_VALUE_ISNAN (VALUE)\t\t\t\t\t\\\n-\t     || REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\t\\\n+    if (REAL_VALUE_ISINF (VALUE)\t\t\t\t\t\\\n+        || REAL_VALUE_ISNAN (VALUE)\t\t\t\t\t\\\n+\t|| REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tunion { float f; long l;} t;\t\t\t\t\t\\\n-\tt.f = (VALUE);\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t.word 0x%lx\\n\", t.l);\t\t\t\t\\\n+\tlong t;\t\t\t\t\t\t\t\t\\\n+\tREAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\t\t\\\n+\tfprintf (FILE, \"\\t%s\\t0x%lx\\n\", ASM_LONG, t);\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     else\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\t.single 0r%.9g\\n\", VALUE);\t\t\t\\\n@@ -1569,7 +1572,7 @@ extern struct rtx_def *legitimize_pic_address ();\n /* This is how to output an assembler line defining an `int' constant.  */\n \n #define ASM_OUTPUT_INT(FILE,VALUE)  \\\n-( fprintf (FILE, \"\\t.word \"),\t\t\t\\\n+( fprintf (FILE, \"\\t%s\\t\", ASM_LONG),\t\t\\\n   output_addr_const (FILE, (VALUE)),\t\t\\\n   fprintf (FILE, \"\\n\"))\n \n@@ -1580,19 +1583,19 @@ extern struct rtx_def *legitimize_pic_address ();\n /* Likewise for `char' and `short' constants.  */\n \n #define ASM_OUTPUT_SHORT(FILE,VALUE)  \\\n-( fprintf (FILE, \"\\t.half \"),\t\t\t\\\n+( fprintf (FILE, \"\\t%s\\t\", ASM_SHORT),\t\t\\\n   output_addr_const (FILE, (VALUE)),\t\t\\\n   fprintf (FILE, \"\\n\"))\n \n #define ASM_OUTPUT_CHAR(FILE,VALUE)  \\\n-( fprintf (FILE, \"\\t.byte \"),\t\t\t\\\n+( fprintf (FILE, \"\\t%s\\t\", ASM_BYTE_OP),\t\\\n   output_addr_const (FILE, (VALUE)),\t\t\\\n   fprintf (FILE, \"\\n\"))\n \n /* This is how to output an assembler line for a numeric constant byte.  */\n \n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\t.byte 0x%x\\n\", (VALUE))\n+  fprintf (FILE, \"\\t%s\\t0x%x\\n\", ASM_BYTE_OP, (VALUE))\n \n /* This is how to output an element of a case-vector that is absolute.  */\n "}]}