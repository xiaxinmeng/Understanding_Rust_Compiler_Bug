{"sha": "54ecb428e7c408f1d8e018be6bb35147756ae0a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRlY2I0MjhlN2M0MDhmMWQ4ZTAxOGJlNmJiMzUxNDc3NTZhZTBhNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-07T13:12:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-07T13:12:32Z"}, "message": "[multiple changes]\n\n2009-07-07  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-nmsc.adb (Process_Naming): canonicalize file suffixes read in the\n\tproject file.\n\n2009-07-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb (Expand_Freeze_Record_Type): Add extra formals to\n\tprimitive operations, in case one of them is called in the\n\tinitialization procedure for the type.\n\nFrom-SVN: r149325", "tree": {"sha": "974278e309235ff70f2c50e1fc47e411e277c4d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/974278e309235ff70f2c50e1fc47e411e277c4d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54ecb428e7c408f1d8e018be6bb35147756ae0a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ecb428e7c408f1d8e018be6bb35147756ae0a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ecb428e7c408f1d8e018be6bb35147756ae0a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ecb428e7c408f1d8e018be6bb35147756ae0a4/comments", "author": null, "committer": null, "parents": [{"sha": "84157c9a3fd3267ba2264ec2ba3f4f48fba0b887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84157c9a3fd3267ba2264ec2ba3f4f48fba0b887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84157c9a3fd3267ba2264ec2ba3f4f48fba0b887"}], "stats": {"total": 83, "additions": 76, "deletions": 7}, "files": [{"sha": "42a633170156eabff3b8aaa615278ea7e7c1c01f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ecb428e7c408f1d8e018be6bb35147756ae0a4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ecb428e7c408f1d8e018be6bb35147756ae0a4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=54ecb428e7c408f1d8e018be6bb35147756ae0a4", "patch": "@@ -1,3 +1,14 @@\n+2009-07-07  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj-nmsc.adb (Process_Naming): canonicalize file suffixes read in the\n+\tproject file.\n+\n+2009-07-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_Freeze_Record_Type): Add extra formals to\n+\tprimitive operations, in case one of them is called in the\n+\tinitialization procedure for the type.\n+\n 2009-07-07  Robert Dewar  <dewar@adacore.com>\n \n \t* a-calend.adb: Minor code reorganization (use conditional expressions)"}, {"sha": "bb5d1f1388074aa2fbc7cbc77e0ed8763f1a233f", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ecb428e7c408f1d8e018be6bb35147756ae0a4/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ecb428e7c408f1d8e018be6bb35147756ae0a4/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=54ecb428e7c408f1d8e018be6bb35147756ae0a4", "patch": "@@ -53,6 +53,7 @@ with Sem_Aux;  use Sem_Aux;\n with Sem_Attr; use Sem_Attr;\n with Sem_Cat;  use Sem_Cat;\n with Sem_Ch3;  use Sem_Ch3;\n+with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Disp; use Sem_Disp;\n with Sem_Eval; use Sem_Eval;\n@@ -6012,6 +6013,29 @@ package body Exp_Ch3 is\n          if Present (Wrapper_Body_List) then\n             Append_Freeze_Actions (Def_Id, Wrapper_Body_List);\n          end if;\n+\n+         --  Create extra actuals for the primitive operations of the type.\n+         --  This must be done before analyzing the body of the initialization\n+         --  procedure, because a self-referential type might call one of these\n+         --  primitives in the body of the init_proc itself.\n+\n+         declare\n+            Elmt : Elmt_Id;\n+            Subp : Entity_Id;\n+\n+         begin\n+            Elmt := First_Elmt (Primitive_Operations (Def_Id));\n+            while Present (Elmt) loop\n+               Subp := Node (Elmt);\n+               if not Has_Foreign_Convention (Subp)\n+                 and then not Is_Predefined_Dispatching_Operation (Subp)\n+               then\n+                  Create_Extra_Formals (Subp);\n+               end if;\n+\n+               Next_Elmt (Elmt);\n+            end loop;\n+         end;\n       end if;\n    end Expand_Freeze_Record_Type;\n "}, {"sha": "be323be1e0897fa9bb3bd098c8279894ec1f4671", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ecb428e7c408f1d8e018be6bb35147756ae0a4/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ecb428e7c408f1d8e018be6bb35147756ae0a4/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=54ecb428e7c408f1d8e018be6bb35147756ae0a4", "patch": "@@ -1677,7 +1677,9 @@ package body Prj.Nmsc is\n \n                      --  Attribute Separate_Suffix\n \n-                     Separate_Suffix := File_Name_Type (Attribute.Value.Value);\n+                     Get_Name_String (Attribute.Value.Value);\n+                     Canonical_Case_File_Name (Name_Buffer (1 .. Name_Len));\n+                     Separate_Suffix := Name_Find;\n \n                   elsif Attribute.Name = Name_Casing then\n \n@@ -1736,18 +1738,24 @@ package body Prj.Nmsc is\n \n                            --  Attribute Spec_Suffix (<language>)\n \n+                           Get_Name_String (Element.Value.Value);\n+                           Canonical_Case_File_Name\n+                             (Name_Buffer (1 .. Name_Len));\n                            Lang_Index.Config.Naming_Data.Spec_Suffix :=\n-                             File_Name_Type (Element.Value.Value);\n+                             Name_Find;\n \n                         when Name_Implementation_Suffix | Name_Body_Suffix =>\n \n+                           Get_Name_String (Element.Value.Value);\n+                           Canonical_Case_File_Name\n+                             (Name_Buffer (1 .. Name_Len));\n+\n                            --  Attribute Body_Suffix (<language>)\n \n                            Lang_Index.Config.Naming_Data.Body_Suffix :=\n-                             File_Name_Type (Element.Value.Value);\n-\n+                             Name_Find;\n                            Lang_Index.Config.Naming_Data.Separate_Suffix :=\n-                             File_Name_Type (Element.Value.Value);\n+                             Lang_Index.Config.Naming_Data.Body_Suffix;\n \n                         when others =>\n                            null;\n@@ -3360,9 +3368,10 @@ package body Prj.Nmsc is\n              (Name_Body_Suffix,\n               Naming.Decl.Arrays,\n               In_Tree);\n-         Lang    : Language_Ptr;\n+         Lang      : Language_Ptr;\n          Lang_Name : Name_Id;\n-         Value   : Variable_Value;\n+         Value     : Variable_Value;\n+         Extended  : Project_Id;\n \n       begin\n          --  At this stage, the project already contains the default\n@@ -3375,6 +3384,31 @@ package body Prj.Nmsc is\n             Lang := Get_Language_From_Name\n               (Project, Name => Get_Name_String (Lang_Name));\n \n+            --  An extending project inherits its parent projects' languages\n+            --  so if needed we should create entries for those languages\n+\n+            if Lang = null  then\n+               Extended := Project.Extends;\n+\n+               while Extended /= null loop\n+                  Lang := Get_Language_From_Name\n+                    (Extended, Name => Get_Name_String (Lang_Name));\n+                  exit when Lang /= null;\n+\n+                  Extended := Extended.Extends;\n+               end loop;\n+\n+               if Lang /= null then\n+                  Lang := new Language_Data'(Lang.all);\n+                  Lang.First_Source := null;\n+                  Lang.Next := Project.Languages;\n+                  Project.Languages := Lang;\n+               end if;\n+            end if;\n+\n+            --  If the language was not found in project or the projects it\n+            --  extends\n+\n             if Lang = null then\n                if Current_Verbosity = High then\n                   Write_Line"}]}