{"sha": "a2124400f50511c744cf67fe68ac0ae1a9534ae7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIxMjQ0MDBmNTA1MTFjNzQ0Y2Y2N2ZlNjhhYzBhZTFhOTUzNGFlNw==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2016-12-19T19:03:48Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2016-12-19T19:03:48Z"}, "message": "rs6000.c: Add handling for early expansion of vector multiply builtins.\n\n\n2016-12-19  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n        *  config/rs6000/rs6000.c: Add handling for early expansion of\n        vector multiply builtins.\n    \n[gcc/testsuite]\n\n2016-12-19  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n        *  gcc.dg/vmx/mult-even-odd-be-order.c : Mark\n        variables as volatile.\n        *  gcc.target/powerpc/fold-vec-mult-char.c : New.\n        *  gcc.target/powerpc/fold-vec-mult-float.c : New.\n        *  gcc.target/powerpc/fold-vec-mult-floatdouble.c : New.\n        *  gcc.target/powerpc/fold-vec-mult-int.c : New.\n        *  gcc.target/powerpc/fold-vec-mult-int128-p8.c : New.\n        *  gcc.target/powerpc/fold-vec-mult-int128-p9.c : New.\n        *  gcc.target/powerpc/fold-vec-mult-longlong.c : New.\n        *  gcc.target/powerpc/fold-vec-mult-short.c : New.\n\nFrom-SVN: r243807", "tree": {"sha": "28255600567b593eae863a1339d149bd2d3cf8d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28255600567b593eae863a1339d149bd2d3cf8d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2124400f50511c744cf67fe68ac0ae1a9534ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2124400f50511c744cf67fe68ac0ae1a9534ae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2124400f50511c744cf67fe68ac0ae1a9534ae7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2124400f50511c744cf67fe68ac0ae1a9534ae7/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b35c54a602e2c0a9dd89c9bc6bcd8607fe0baf6"}], "stats": {"total": 254, "additions": 242, "deletions": 12}, "files": [{"sha": "3d69ba9591b0d7060db2f8060ccc200a7ad8575b", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2124400f50511c744cf67fe68ac0ae1a9534ae7/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2124400f50511c744cf67fe68ac0ae1a9534ae7/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=a2124400f50511c744cf67fe68ac0ae1a9534ae7", "patch": "@@ -1,3 +1,8 @@\n+2016-12-19  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t*  config/rs6000/rs6000.c: Add handling for early expansion of\n+\tvector multiply builtins.\n+\n 2016-12-19  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add handling for"}, {"sha": "9469bea0262618a505938c6fd88086bea7d6fcea", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a2124400f50511c744cf67fe68ac0ae1a9534ae7", "patch": "@@ -16581,6 +16581,36 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \tgsi_replace (gsi, g, true);\n \treturn true;\n       }\n+    /* Even element flavors of vec_mul (signed). */\n+    case ALTIVEC_BUILTIN_VMULESB:\n+    case ALTIVEC_BUILTIN_VMULESH:\n+    /* Even element flavors of vec_mul (unsigned).  */\n+    case ALTIVEC_BUILTIN_VMULEUB:\n+    case ALTIVEC_BUILTIN_VMULEUH:\n+      {\n+\targ0 = gimple_call_arg (stmt, 0);\n+\targ1 = gimple_call_arg (stmt, 1);\n+\tlhs = gimple_call_lhs (stmt);\n+\tgimple *g = gimple_build_assign (lhs, VEC_WIDEN_MULT_EVEN_EXPR, arg0, arg1);\n+\tgimple_set_location (g, gimple_location (stmt));\n+\tgsi_replace (gsi, g, true);\n+\treturn true;\n+      }\n+    /* Odd element flavors of vec_mul (signed).  */\n+    case ALTIVEC_BUILTIN_VMULOSB:\n+    case ALTIVEC_BUILTIN_VMULOSH:\n+    /* Odd element flavors of vec_mul (unsigned). */\n+    case ALTIVEC_BUILTIN_VMULOUB:\n+    case ALTIVEC_BUILTIN_VMULOUH:\n+      {\n+\targ0 = gimple_call_arg (stmt, 0);\n+\targ1 = gimple_call_arg (stmt, 1);\n+\tlhs = gimple_call_lhs (stmt);\n+\tgimple *g = gimple_build_assign (lhs, VEC_WIDEN_MULT_ODD_EXPR, arg0, arg1);\n+\tgimple_set_location (g, gimple_location (stmt));\n+\tgsi_replace (gsi, g, true);\n+\treturn true;\n+      }\n \n     default:\n       break;"}, {"sha": "4eb7ea7a9113792441470e149c018a5550704a5d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a2124400f50511c744cf67fe68ac0ae1a9534ae7", "patch": "@@ -1,3 +1,16 @@\n+2016-12-19  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t*  gcc.dg/vmx/mult-even-odd-be-order.c: Mark\n+\tvariables as volatile.\n+\t*  gcc.target/powerpc/fold-vec-mult-char.c: New.\n+\t*  gcc.target/powerpc/fold-vec-mult-float.c: New.\n+\t*  gcc.target/powerpc/fold-vec-mult-floatdouble.c: New.\n+\t*  gcc.target/powerpc/fold-vec-mult-int.c: New.\n+\t*  gcc.target/powerpc/fold-vec-mult-int128-p8.c: New.\n+\t*  gcc.target/powerpc/fold-vec-mult-int128-p9.c: New.\n+\t*  gcc.target/powerpc/fold-vec-mult-longlong.c: New.\n+\t*  gcc.target/powerpc/fold-vec-mult-short.c: New.\n+\n 2016-12-19  Will Schmidt  <will_schmidt@vnet.ibm.com>\n  \n \t* gcc.target/powerpc/fold-vec-sub-char.c: New."}, {"sha": "6ba12d0463411cb36cb2b237e22436304bcd0eb2", "filename": "gcc/testsuite/gcc.dg/vmx/mult-even-odd-be-order.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmult-even-odd-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmult-even-odd-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmult-even-odd-be-order.c?ref=a2124400f50511c744cf67fe68ac0ae1a9534ae7", "patch": "@@ -4,18 +4,18 @@\n \n static void test()\n {\n-  vector unsigned char vuca = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  vector unsigned char vucb = {2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3};\n-  vector signed char vsca = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n-  vector signed char vscb = {2,-3,2,-3,2,-3,2,-3,2,-3,2,-3,2,-3,2,-3};\n-  vector unsigned short vusa = {0,1,2,3,4,5,6,7};\n-  vector unsigned short vusb = {2,3,2,3,2,3,2,3};\n-  vector signed short vssa = {-4,-3,-2,-1,0,1,2,3};\n-  vector signed short vssb = {2,-3,2,-3,2,-3,2,-3};\n-  vector unsigned short vuse, vuso;\n-  vector signed short vsse, vsso;\n-  vector unsigned int vuie, vuio;\n-  vector signed int vsie, vsio;\n+  volatile vector unsigned char vuca = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  volatile vector unsigned char vucb = {2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3};\n+  volatile vector signed char vsca = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  volatile vector signed char vscb = {2,-3,2,-3,2,-3,2,-3,2,-3,2,-3,2,-3,2,-3};\n+  volatile vector unsigned short vusa = {0,1,2,3,4,5,6,7};\n+  volatile vector unsigned short vusb = {2,3,2,3,2,3,2,3};\n+  volatile vector signed short vssa = {-4,-3,-2,-1,0,1,2,3};\n+  volatile vector signed short vssb = {2,-3,2,-3,2,-3,2,-3};\n+  volatile vector unsigned short vuse, vuso;\n+  volatile vector signed short vsse, vsso;\n+  volatile vector unsigned int vuie, vuio;\n+  volatile vector signed int vsie, vsio;\n \n   vuse = vec_mule (vuca, vucb);\n   vuso = vec_mulo (vuca, vucb);"}, {"sha": "3f946e56fcf0957505fb1dd468ec7c9c22f8a880", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mult-char.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-char.c?ref=a2124400f50511c744cf67fe68ac0ae1a9534ae7", "patch": "@@ -0,0 +1,23 @@\n+/* Verify that overloaded built-ins for vec_mul with char\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+vector signed char\n+test3 (vector signed char x, vector signed char y)\n+{\n+  return vec_mul (x, y);\n+}\n+\n+vector unsigned char\n+test6 (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_mul (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]vmulesb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]vmulosb\" 2 } } */"}, {"sha": "619cd6eaed8b6aaeca7cbdab517044d8ab65fc00", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mult-float.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-float.c?ref=a2124400f50511c744cf67fe68ac0ae1a9534ae7", "patch": "@@ -0,0 +1,17 @@\n+/* Verify that overloaded built-ins for vec_mul with float\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -mvsx\" } */\n+\n+#include <altivec.h>\n+\n+vector float\n+test1 (vector float x, vector float y)\n+{\n+  return vec_mul (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]xvmulsp\" 1 } } */\n+"}, {"sha": "685318a322b83d7a9821842153f854f798bafa21", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mult-floatdouble.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-floatdouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-floatdouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-floatdouble.c?ref=a2124400f50511c744cf67fe68ac0ae1a9534ae7", "patch": "@@ -0,0 +1,23 @@\n+/* Verify that overloaded built-ins for vec_mul with float and\n+   double inputs for VSX produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec -mvsx\" } */\n+\n+#include <altivec.h>\n+\n+vector float\n+test1 (vector float x, vector float y)\n+{\n+  return vec_mul (x, y);\n+}\n+\n+vector double\n+test2 (vector double x, vector double y)\n+{\n+  return vec_mul (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]xvmulsp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]xvmuldp\" 1 } } */"}, {"sha": "d5819218494bcc52685c762b47243930b6321307", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mult-int.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-int.c?ref=a2124400f50511c744cf67fe68ac0ae1a9534ae7", "patch": "@@ -0,0 +1,23 @@\n+/* Verify that overloaded built-ins for vec_mul with int\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+vector signed int\n+test3 (vector signed int x, vector signed int y)\n+{\n+  return vec_mul (x, y);\n+}\n+\n+vector unsigned int\n+test6 (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_mul (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]vmuluwm\" 2 } } */\n+"}, {"sha": "a133c5d90fe88c76d388834c95a0ec4c86067bf8", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mult-int128-p8.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-int128-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-int128-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-int128-p8.c?ref=a2124400f50511c744cf67fe68ac0ae1a9534ae7", "patch": "@@ -0,0 +1,25 @@\n+/* Verify that overloaded built-ins for vec_mul with __int128\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-options \"-maltivec -mvsx -mpower8-vector\" } */\n+/* { dg-additional-options \"-maix64\" { target powerpc-ibm-aix* } } */\n+\n+#include \"altivec.h\"\n+\n+vector signed __int128\n+test1 (vector signed __int128 x, vector signed __int128 y)\n+{\n+  return vec_mul (x, y);\n+}\n+\n+vector unsigned __int128\n+test2 (vector unsigned __int128 x, vector unsigned __int128 y)\n+{\n+  return vec_mul (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]mulld \" 6 } } */\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]mulhdu\" 2 } } */"}, {"sha": "96c9d01968229785ba10d37728ad5699cc32d5ab", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mult-int128-p9.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-int128-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-int128-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-int128-p9.c?ref=a2124400f50511c744cf67fe68ac0ae1a9534ae7", "patch": "@@ -0,0 +1,25 @@\n+/* Verify that overloaded built-ins for vec_mul with __int128\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_float128_hw_ok } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-maltivec -mvsx -mcpu=power9 -O2\" } */\n+/* { dg-additional-options \"-maix64\" { target powerpc-ibm-aix* } } */\n+\n+#include \"altivec.h\"\n+\n+vector signed __int128\n+test1 (vector signed __int128 x, vector signed __int128 y)\n+{\n+  return vec_mul (x, y);\n+}\n+\n+vector unsigned __int128\n+test2 (vector unsigned __int128 x, vector unsigned __int128 y)\n+{\n+  return vec_mul (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]xsmulqp\" 2 } } */"}, {"sha": "cc3d1e3c179deff631e4e443b7a47c7251eb57b0", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mult-longlong.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-longlong.c?ref=a2124400f50511c744cf67fe68ac0ae1a9534ae7", "patch": "@@ -0,0 +1,23 @@\n+/* Verify that overloaded built-ins for vec_mul with long long\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-maltivec -mvsx -mpower8-vector\" } */\n+\n+#include <altivec.h>\n+\n+vector signed long long\n+test3 (vector signed long long x, vector signed long long y)\n+{\n+  return vec_mul (x, y);\n+}\n+\n+vector unsigned long long\n+test6 (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_mul (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]mulld \" 4 } } */\n+"}, {"sha": "e7504db720fc8583cee391038df2d21518b333dc", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mult-short.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2124400f50511c744cf67fe68ac0ae1a9534ae7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-short.c?ref=a2124400f50511c744cf67fe68ac0ae1a9534ae7", "patch": "@@ -0,0 +1,23 @@\n+/* Verify that overloaded built-ins for vec_mul with short\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+vector signed short\n+test3 (vector signed short x, vector signed short y)\n+{\n+  return vec_mul (x, y);\n+}\n+\n+vector unsigned short\n+test6 (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_mul (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]vmladduhm\" 2 } } */\n+"}]}