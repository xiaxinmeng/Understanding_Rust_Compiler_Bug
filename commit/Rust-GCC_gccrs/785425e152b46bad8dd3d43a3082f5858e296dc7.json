{"sha": "785425e152b46bad8dd3d43a3082f5858e296dc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg1NDI1ZTE1MmI0NmJhZDhkZDNkNDNhMzA4MmY1ODU4ZTI5NmRjNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-09-07T16:01:04Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-09-07T16:01:04Z"}, "message": "* config/i386/i386.md (float<SWI48x:mode><MODEF:mode>2) Enable\n\tDImode for x87 on 32bit targets.  Conditionally disable x87 modes\n\twith X87_ENABLE_FLOAT.  Remove preparation code.\n\t(*float<SWI48:mode><MODEF:mode>2): Rename from\n\t*float<SWI48:mode><MODEF:mode>2_mixed.  Handle x87, SSE and mixed\n\tmath using \"enabled\" attribute.\n\t(*floatdi<MODEF:mode>2_i387): Rename from\n\t*float<SWI48x:mode><MODEF:mode>2_i387.  Handle only DImode and\n\tenable for 32bit targets only.\n\t(floatdi<X87MODEF:mode>2_i387_with_xmm pre-reload splitter): New\n\tsplitter.\n\t(floatdi<X87MODEF:mode>2_i387_with_xmm): Use register_operand\n\tas operand 1 predicate.  Rewrite as define_insn_and_split.\n\t(floatdi<X87MODEF:mode>2_i387_with_xmm memory input splitter): Remove.\n\nFrom-SVN: r264160", "tree": {"sha": "1b25be9afef72f075d26bd9d5e908b7c3d71443a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b25be9afef72f075d26bd9d5e908b7c3d71443a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/785425e152b46bad8dd3d43a3082f5858e296dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/785425e152b46bad8dd3d43a3082f5858e296dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/785425e152b46bad8dd3d43a3082f5858e296dc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/785425e152b46bad8dd3d43a3082f5858e296dc7/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6435284ea621778b24add3b91823488624aa0bd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6435284ea621778b24add3b91823488624aa0bd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6435284ea621778b24add3b91823488624aa0bd1"}], "stats": {"total": 147, "additions": 74, "deletions": 73}, "files": [{"sha": "be8ef14e70683b1582e2394e7c124beed9a1369b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785425e152b46bad8dd3d43a3082f5858e296dc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785425e152b46bad8dd3d43a3082f5858e296dc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=785425e152b46bad8dd3d43a3082f5858e296dc7", "patch": "@@ -1,3 +1,20 @@\n+2018-09-07  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (float<SWI48x:mode><MODEF:mode>2) Enable\n+\tDImode for x87 on 32bit targets.  Conditionally disable x87 modes\n+\twith X87_ENABLE_FLOAT.  Remove preparation code.\n+\t(*float<SWI48:mode><MODEF:mode>2): Rename from\n+\t*float<SWI48:mode><MODEF:mode>2_mixed.  Handle x87, SSE and mixed\n+\tmath using \"enabled\" attribute.\n+\t(*floatdi<MODEF:mode>2_i387): Rename from\n+\t*float<SWI48x:mode><MODEF:mode>2_i387.  Handle only DImode and\n+\tenable for 32bit targets only.\n+\t(floatdi<X87MODEF:mode>2_i387_with_xmm pre-reload splitter): New\n+\tsplitter.\n+\t(floatdi<X87MODEF:mode>2_i387_with_xmm): Use register_operand\n+\tas operand 1 predicate.  Rewrite as define_insn_and_split.\n+\t(floatdi<X87MODEF:mode>2_i387_with_xmm memory input splitter): Remove.\n+\n 2018-09-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* reg-stack.c (get_true_reg) <case FLOAT_TRUNCATE>: Reorder"}, {"sha": "0ee2d91414a242015241fc8b0e04a825ad079036", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 57, "deletions": 73, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785425e152b46bad8dd3d43a3082f5858e296dc7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785425e152b46bad8dd3d43a3082f5858e296dc7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=785425e152b46bad8dd3d43a3082f5858e296dc7", "patch": "@@ -5063,36 +5063,19 @@\n    (set_attr \"znver1_decode\" \"double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-(define_expand \"float<SWI48:mode><MODEF:mode>2\"\n+(define_expand \"float<SWI48x:mode><MODEF:mode>2\"\n   [(set (match_operand:MODEF 0 \"register_operand\")\n-\t(float:MODEF (match_operand:SWI48 1 \"nonimmediate_operand\")))]\n-  \"TARGET_80387 || (SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH)\"\n-{\n-  if (!(SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH)\n-      && !X87_ENABLE_FLOAT (<MODEF:MODE>mode, <SWI48:MODE>mode))\n-    {\n-      rtx reg = gen_reg_rtx (XFmode);\n-      rtx (*insn)(rtx, rtx);\n-\n-      emit_insn (gen_float<SWI48:mode>xf2 (reg, operands[1]));\n-\n-      if (<MODEF:MODE>mode == SFmode)\n-\tinsn = gen_truncxfsf2;\n-      else if (<MODEF:MODE>mode == DFmode)\n-\tinsn = gen_truncxfdf2;\n-      else\n-\tgcc_unreachable ();\n-\n-      emit_insn (insn (operands[0], reg));\n-      DONE;\n-    }\n-})\n+\t(float:MODEF (match_operand:SWI48x 1 \"nonimmediate_operand\")))]\n+  \"(TARGET_80387 && X87_ENABLE_FLOAT (<MODEF:MODE>mode, <SWI48x:MODE>mode))\n+   || (SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n+       && ((<SWI48x:MODE>mode != DImode) || TARGET_64BIT))\")\n \n-(define_insn \"*float<SWI48:mode><MODEF:mode>2_mixed\"\n+(define_insn \"*float<SWI48:mode><MODEF:mode>2\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=f,v,v\")\n \t(float:MODEF\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"m,r,m\")))]\n-  \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\"\n+  \"(TARGET_80387 && X87_ENABLE_FLOAT (<MODEF:MODE>mode, <SWI48:MODE>mode))\n+   || (SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH)\"\n   \"@\n    fild%Z1\\t%1\n    %vcvtsi2<MODEF:ssemodesuffix><SWI48:rex64suffix>\\t{%1, %d0|%d0, %1}\n@@ -5113,21 +5096,28 @@\n    (set_attr \"znver1_decode\" \"double,*,*\")\n    (set_attr \"fp_int_src\" \"true\")\n    (set (attr \"enabled\")\n-     (cond [(eq_attr \"alternative\" \"0\")\n-              (symbol_ref \"TARGET_MIX_SSE_I387\n-                           && X87_ENABLE_FLOAT (<MODEF:MODE>mode,\n-                                                <SWI48:MODE>mode)\")\n-           ]\n-           (symbol_ref \"true\")))\n+     (if_then_else\n+       (match_test (\"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\"))\n+       (if_then_else\n+\t (eq_attr \"alternative\" \"0\")\n+\t (symbol_ref \"TARGET_MIX_SSE_I387\n+\t\t      && X87_ENABLE_FLOAT (<MODEF:MODE>mode,\n+\t\t\t\t\t   <SWI48:MODE>mode)\")\n+\t (symbol_ref \"true\"))\n+       (if_then_else\n+\t (eq_attr \"alternative\" \"0\")\n+\t (symbol_ref \"true\")\n+\t (symbol_ref \"false\"))))\n    (set (attr \"preferred_for_speed\")\n      (cond [(eq_attr \"alternative\" \"1\")\n-              (symbol_ref \"TARGET_INTER_UNIT_CONVERSIONS\")]\n-           (symbol_ref \"true\")))])\n+\t      (symbol_ref \"TARGET_INTER_UNIT_CONVERSIONS\")]\n+\t   (symbol_ref \"true\")))])\n \n-(define_insn \"*float<SWI48x:mode><MODEF:mode>2_i387\"\n+(define_insn \"*floatdi<MODEF:mode>2_i387\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=f\")\n-\t(float:MODEF (match_operand:SWI48x 1 \"nonimmediate_operand\" \"m\")))]\n-  \"TARGET_80387 && X87_ENABLE_FLOAT (<MODEF:MODE>mode, <SWI48x:MODE>mode)\"\n+\t(float:MODEF (match_operand:DI 1 \"nonimmediate_operand\" \"m\")))]\n+  \"!TARGET_64BIT\n+   && TARGET_80387 && X87_ENABLE_FLOAT (<MODEF:MODE>mode, DImode)\"\n   \"fild%Z1\\t%1\"\n   [(set_attr \"type\" \"fmov\")\n    (set_attr \"mode\" \"<MODEF:MODE>\")\n@@ -5242,32 +5232,34 @@\n ;; Avoid store forwarding (partial memory) stall penalty\n ;; by passing DImode value through XMM registers.  */\n \n-(define_insn \"floatdi<X87MODEF:mode>2_i387_with_xmm\"\n-  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f,f\")\n+(define_split\n+  [(set (match_operand:X87MODEF 0 \"register_operand\")\n \t(float:X87MODEF\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \"m,?r\")))\n-   (clobber (match_scratch:V4SI 3 \"=X,x\"))\n-   (clobber (match_scratch:V4SI 4 \"=X,x\"))\n-   (clobber (match_operand:DI 2 \"memory_operand\" \"=X,m\"))]\n-  \"TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n-   && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC\n-   && !TARGET_64BIT && optimize_function_for_speed_p (cfun)\"\n-  \"#\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"mode\" \"<X87MODEF:MODE>\")\n-   (set_attr \"unit\" \"i387\")\n-   (set_attr \"fp_int_src\" \"true\")])\n+\t  (match_operand:DI 1 \"register_operand\")))]\n+  \"!TARGET_64BIT && TARGET_INTER_UNIT_MOVES_TO_VEC\n+   && TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n+   && TARGET_SSE2 && optimize_function_for_speed_p (cfun)\n+   && can_create_pseudo_p ()\"\n+  [(const_int 0)]\n+{\n+  emit_insn (gen_floatdi<mode>2_i387_with_xmm\n+\t     (operands[0], operands[1],\n+\t      assign_386_stack_local (DImode, SLOT_TEMP)));\n+  DONE;\n+})\n \n-(define_split\n-  [(set (match_operand:X87MODEF 0 \"fp_register_operand\")\n-\t(float:X87MODEF (match_operand:DI 1 \"register_operand\")))\n-   (clobber (match_scratch:V4SI 3))\n-   (clobber (match_scratch:V4SI 4))\n-   (clobber (match_operand:DI 2 \"memory_operand\"))]\n-  \"TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n-   && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC\n-   && !TARGET_64BIT && optimize_function_for_speed_p (cfun)\n-   && reload_completed\"\n+(define_insn_and_split \"floatdi<X87MODEF:mode>2_i387_with_xmm\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f\")\n+\t(float:X87MODEF\n+\t  (match_operand:DI 1 \"register_operand\" \"r\")))\n+   (clobber (match_scratch:V4SI 3 \"=x\"))\n+   (clobber (match_scratch:V4SI 4 \"=x\"))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"=m\"))]\n+  \"!TARGET_64BIT && TARGET_INTER_UNIT_MOVES_TO_VEC\n+   && TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n+   && TARGET_SSE2 && optimize_function_for_speed_p (cfun)\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(set (match_dup 2) (match_dup 3))\n    (set (match_dup 0) (float:X87MODEF (match_dup 2)))]\n {\n@@ -5281,19 +5273,11 @@\n \t\t\t\t\t operands[4]));\n \n   operands[3] = gen_lowpart (DImode, operands[3]);\n-})\n-\n-(define_split\n-  [(set (match_operand:X87MODEF 0 \"fp_register_operand\")\n-\t(float:X87MODEF (match_operand:DI 1 \"memory_operand\")))\n-   (clobber (match_scratch:V4SI 3))\n-   (clobber (match_scratch:V4SI 4))\n-   (clobber (match_operand:DI 2 \"memory_operand\"))]\n-  \"TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n-   && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC\n-   && !TARGET_64BIT && optimize_function_for_speed_p (cfun)\n-   && reload_completed\"\n-  [(set (match_dup 0) (float:X87MODEF (match_dup 1)))])\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"mode\" \"<X87MODEF:MODE>\")\n+   (set_attr \"unit\" \"i387\")\n+   (set_attr \"fp_int_src\" \"true\")])\n \n (define_expand \"floatuns<SWI12:mode><MODEF:mode>2\"\n   [(set (match_operand:MODEF 0 \"register_operand\")"}]}