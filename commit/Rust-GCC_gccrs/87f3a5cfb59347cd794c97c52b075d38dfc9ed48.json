{"sha": "87f3a5cfb59347cd794c97c52b075d38dfc9ed48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdmM2E1Y2ZiNTkzNDdjZDc5NGM5N2M1MmIwNzVkMzhkZmM5ZWQ0OA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-09-13T21:15:26Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-09-13T21:15:26Z"}, "message": "re PR fortran/82173 ([meta-bug] Parameterized derived type errors)\n\n2017-09-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82173\n\t* decl.c (match_char_kind): If the kind expression is\n\tparameterized, save it in saved_kind_expr and set kind = 0.\n\t(gfc_get_pdt_instance): Resolve and simplify before emitting\n\terror on expression kind. Insert a missing simplification after\n\tinsertion of kind expressions.\n\n2017-09-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82173\n\t* gfortran.dg/pdt_10.f03 : New test.\n\nFrom-SVN: r252734", "tree": {"sha": "83bb758f723dd0f1f3967bbb3550da9101f18693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83bb758f723dd0f1f3967bbb3550da9101f18693"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87f3a5cfb59347cd794c97c52b075d38dfc9ed48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f3a5cfb59347cd794c97c52b075d38dfc9ed48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87f3a5cfb59347cd794c97c52b075d38dfc9ed48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f3a5cfb59347cd794c97c52b075d38dfc9ed48/comments", "author": null, "committer": null, "parents": [{"sha": "b6509175b2602b0f7c4515b86e350e6cba42c603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6509175b2602b0f7c4515b86e350e6cba42c603", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6509175b2602b0f7c4515b86e350e6cba42c603"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "885fd06ef44c3d15d70cc23c2c436a6641206f24", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f3a5cfb59347cd794c97c52b075d38dfc9ed48/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f3a5cfb59347cd794c97c52b075d38dfc9ed48/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=87f3a5cfb59347cd794c97c52b075d38dfc9ed48", "patch": "@@ -1,3 +1,12 @@\n+2017-09-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82173\n+\t* decl.c (match_char_kind): If the kind expression is\n+\tparameterized, save it in saved_kind_expr and set kind = 0.\n+\t(gfc_get_pdt_instance): Resolve and simplify before emitting\n+\terror on expression kind. Insert a missing simplification after\n+\tinsertion of kind expressions.\n+\n 2017-09-12  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/82173"}, {"sha": "f6e0a7f528fcace518412b979ecb406d2135575f", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f3a5cfb59347cd794c97c52b075d38dfc9ed48/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f3a5cfb59347cd794c97c52b075d38dfc9ed48/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=87f3a5cfb59347cd794c97c52b075d38dfc9ed48", "patch": "@@ -2884,6 +2884,13 @@ match_char_kind (int * kind, int * is_iso_c)\n       goto no_match;\n     }\n \n+  if (gfc_derived_parameter_expr (e))\n+    {\n+      saved_kind_expr = e;\n+      *kind = 0;\n+      return MATCH_YES;\n+    }\n+\n   fail = gfc_extract_int (e, kind, 1);\n   *is_iso_c = e->ts.is_iso_c;\n   if (fail)\n@@ -3296,6 +3303,9 @@ gfc_get_pdt_instance (gfc_actual_arglist *param_list, gfc_symbol **sym,\n \n       if (kind_expr)\n \t{\n+\t  /* Try simplification even for LEN expressions.  */\n+\t  gfc_resolve_expr (kind_expr);\n+\t  gfc_simplify_expr (kind_expr, 1);\n \t  /* Variable expressions seem to default to BT_PROCEDURE.\n \t     TODO find out why this is and fix it.  */\n \t  if (kind_expr->ts.type != BT_INTEGER\n@@ -3308,8 +3318,6 @@ gfc_get_pdt_instance (gfc_actual_arglist *param_list, gfc_symbol **sym,\n \t    }\n \n \t  tail->expr = gfc_copy_expr (kind_expr);\n-\t  /* Try simplification even for LEN expressions.  */\n-\t  gfc_simplify_expr (tail->expr, 1);\n \t}\n \n       if (actual_param)\n@@ -3453,6 +3461,7 @@ gfc_get_pdt_instance (gfc_actual_arglist *param_list, gfc_symbol **sym,\n \t{\n \t  gfc_expr *e = gfc_copy_expr (c1->kind_expr);\n \t  gfc_insert_kind_parameter_exprs (e);\n+\t  gfc_simplify_expr (e, 1);\n \t  gfc_extract_int (e, &c2->ts.kind);\n \t  gfc_free_expr (e);\n \t  if (gfc_validate_kind (c2->ts.type, c2->ts.kind, true) < 0)"}, {"sha": "c37d233806c9466b34756b771479f1b6d9e2ff72", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f3a5cfb59347cd794c97c52b075d38dfc9ed48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f3a5cfb59347cd794c97c52b075d38dfc9ed48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87f3a5cfb59347cd794c97c52b075d38dfc9ed48", "patch": "@@ -1,3 +1,8 @@\n+2017-09-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82173\n+\t* gfortran.dg/pdt_10.f03 : New test.\n+\n 2017-09-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/68177"}, {"sha": "2f3194a1b94e19f114248ea865b40283250b43b7", "filename": "gcc/testsuite/gfortran.dg/pdt_10.f03", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f3a5cfb59347cd794c97c52b075d38dfc9ed48/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_10.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f3a5cfb59347cd794c97c52b075d38dfc9ed48/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_10.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_10.f03?ref=87f3a5cfb59347cd794c97c52b075d38dfc9ed48", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do run }\n+!\n+! Fixes problem setting CHARACTER KIND expressions in PDT components\n+! and resolution of intrinsic functions and numeric expressions.\n+!\n+! Contributed by FortranFan on clf thread \"Parameterized Derived Types\n+! make first appearance in gfortran 8.0.0\"\n+!\n+program p\n+   use, intrinsic :: iso_fortran_env, only : CK => character_kinds\n+   implicit none\n+   character(kind = 4), parameter :: c = 'a'\n+   type :: pdt_t(k,l)\n+      integer, kind :: k = CK(1)\n+      integer, len :: l\n+      character(kind=k,len=l) :: s\n+   end type\n+   type(pdt_t(l=12)) :: foo\n+   type(pdt_t(k = kind (c), l=12)) :: foo_4\n+\n+   foo%s = \"Hello World!\"\n+   if (foo%s .ne. \"Hello World!\") call abort\n+   if (KIND (foo%s) .ne. 1) call abort\n+   if (len (foo%s) .ne. 12) call abort\n+\n+   foo_4%s = \"Hello World!\"\n+   if (foo_4%s .ne. \"Hello World!\") call abort\n+   if (KIND (foo_4%s) .ne. 1) call abort\n+   if (len (foo_4%s) .ne. 12) call abort\n+end program"}]}