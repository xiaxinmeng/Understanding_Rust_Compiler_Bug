{"sha": "e0601576f7e369ca48ac2b7e64f9a327fac33a4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA2MDE1NzZmN2UzNjljYTQ4YWMyYjdlNjRmOWEzMjdmYWMzM2E0Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:49:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:49:54Z"}, "message": "m68k.c (TARGET_TRAMPOLINE_INIT): New.\n\n        * config/m68k/m68k.c (TARGET_TRAMPOLINE_INIT): New.\n        (m68k_output_mi_thunk): Don't use static_chain_rtx.\n        (m68k_trampoline_init): New.\n        * config/m68k/m68k.h (INITIALIZE_TRAMPOLINE): Move code to\n        m68k_trampoline_init and adjust for hook parameters.\n        * config/m68k/netbsd-elf.h (TRAMPOLINE_TEMPLATE): Remove.\n        (TRAMPOLINE_SIZE, INITIALIZE_TRAMPOLINE): Remove.\n\nFrom-SVN: r152021", "tree": {"sha": "be689097f7da5b555e3c9a36b7e95c96e0428790", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be689097f7da5b555e3c9a36b7e95c96e0428790"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0601576f7e369ca48ac2b7e64f9a327fac33a4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0601576f7e369ca48ac2b7e64f9a327fac33a4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0601576f7e369ca48ac2b7e64f9a327fac33a4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0601576f7e369ca48ac2b7e64f9a327fac33a4f/comments", "author": null, "committer": null, "parents": [{"sha": "3452586be1fc37d759e62de8e9db42cf574f0663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3452586be1fc37d759e62de8e9db42cf574f0663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3452586be1fc37d759e62de8e9db42cf574f0663"}], "stats": {"total": 106, "additions": 50, "deletions": 56}, "files": [{"sha": "4250e23984918ef46ac5621265596b4c6b96a543", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0601576f7e369ca48ac2b7e64f9a327fac33a4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0601576f7e369ca48ac2b7e64f9a327fac33a4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0601576f7e369ca48ac2b7e64f9a327fac33a4f", "patch": "@@ -322,6 +322,14 @@\n \tto the end.  Add static_chain_on_stack.\n \t(ix86_static_chain_on_stack): New.\n \n+\t* config/m68k/m68k.c (TARGET_TRAMPOLINE_INIT): New.\n+\t(m68k_output_mi_thunk): Don't use static_chain_rtx.\n+\t(m68k_trampoline_init): New.\n+\t* config/m68k/m68k.h (INITIALIZE_TRAMPOLINE): Move code to\n+\tm68k_trampoline_init and adjust for hook parameters.\n+\t* config/m68k/netbsd-elf.h (TRAMPOLINE_TEMPLATE): Remove.\n+\t(TRAMPOLINE_SIZE, INITIALIZE_TRAMPOLINE): Remove.\n+\n 2009-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (bdesc_2arg): Fix CODE_FOR_vector_gt* codes"}, {"sha": "0862936b1b40040222a11db733c306c0fe6b9a2a", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0601576f7e369ca48ac2b7e64f9a327fac33a4f/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0601576f7e369ca48ac2b7e64f9a327fac33a4f/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=e0601576f7e369ca48ac2b7e64f9a327fac33a4f", "patch": "@@ -153,6 +153,7 @@ static bool m68k_rtx_costs (rtx, int, int, int *, bool);\n static bool m68k_return_in_memory (const_tree, const_tree);\n #endif\n static void m68k_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n+static void m68k_trampoline_init (rtx, tree, rtx);\n \f\n \n /* Specify the identification number of the library being built */\n@@ -267,6 +268,9 @@ const char *m68k_library_id_string = \"_current_shared_library_a5_offset_\";\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE m68k_can_eliminate\n \n+#undef TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT m68k_trampoline_init\n+\n static const struct attribute_spec m68k_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n@@ -4958,7 +4962,11 @@ m68k_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t\t      HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t      tree function)\n {\n-  rtx this_slot, offset, addr, mem, insn;\n+  rtx this_slot, offset, addr, mem, insn, tmp;\n+\n+  /* Avoid clobbering the struct value reg by using the\n+     static chain reg as a temporary.  */\n+  tmp = gen_rtx_REG (Pmode, STATIC_CHAIN_REGNUM);\n \n   /* Pretend to be a post-reload pass while generating rtl.  */\n   reload_completed = 1;\n@@ -4985,15 +4993,15 @@ m68k_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n   if (vcall_offset != 0)\n     {\n       /* Set the static chain register to *THIS.  */\n-      emit_move_insn (static_chain_rtx, this_slot);\n-      emit_move_insn (static_chain_rtx, gen_rtx_MEM (Pmode, static_chain_rtx));\n+      emit_move_insn (tmp, this_slot);\n+      emit_move_insn (tmp, gen_rtx_MEM (Pmode, tmp));\n \n       /* Set ADDR to a legitimate address for *THIS + VCALL_OFFSET.  */\n-      addr = plus_constant (static_chain_rtx, vcall_offset);\n+      addr = plus_constant (tmp, vcall_offset);\n       if (!m68k_legitimate_address_p (Pmode, addr, true))\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, static_chain_rtx, addr));\n-\t  addr = static_chain_rtx;\n+\t  emit_insn (gen_rtx_SET (VOIDmode, tmp, addr));\n+\t  addr = tmp;\n \t}\n \n       /* Load the offset into %d0 and add it to THIS.  */\n@@ -5019,8 +5027,8 @@ m68k_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t  SET_REGNO (pic_offset_table_rtx, STATIC_CHAIN_REGNUM);\n \t  emit_insn (gen_load_got (pic_offset_table_rtx));\n \t}\n-      legitimize_pic_address (XEXP (mem, 0), Pmode, static_chain_rtx);\n-      mem = replace_equiv_address (mem, static_chain_rtx);\n+      legitimize_pic_address (XEXP (mem, 0), Pmode, tmp);\n+      mem = replace_equiv_address (mem, tmp);\n     }\n   insn = emit_call_insn (gen_sibcall (mem, const0_rtx));\n   SIBLING_CALL_P (insn) = 1;\n@@ -6390,4 +6398,30 @@ m68k_sched_indexed_address_bypass_p (rtx pro, rtx con)\n     }\n }\n \n+/* We generate a two-instructions program at M_TRAMP :\n+\tmovea.l &CHAIN_VALUE,%a0\n+\tjmp FNADDR\n+   where %a0 can be modified by changing STATIC_CHAIN_REGNUM.  */\n+\n+static void\n+m68k_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n+{\n+  rtx fnaddr = XEXP (DECL_RTL (fndecl), 0);\n+  rtx mem;\n+\n+  gcc_assert (ADDRESS_REGNO_P (STATIC_CHAIN_REGNUM));\n+\n+  mem = adjust_address (m_tramp, HImode, 0);\n+  emit_move_insn (mem, GEN_INT(0x207C + ((STATIC_CHAIN_REGNUM-8) << 9)));\n+  mem = adjust_address (m_tramp, SImode, 2);\n+  emit_move_insn (mem, chain_value);\n+\n+  mem = adjust_address (m_tramp, HImode, 6);\n+  emit_move_insn (mem, GEN_INT(0x4EF9));\n+  mem = adjust_address (m_tramp, SImode, 8);\n+  emit_move_insn (mem, fnaddr);\n+\n+  FINALIZE_TRAMPOLINE (XEXP (m_tramp, 0));\n+}\n+\n #include \"gt-m68k.h\""}, {"sha": "5787e8aa1fdd0323a1a80e6ffaf567cc29eb578c", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0601576f7e369ca48ac2b7e64f9a327fac33a4f/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0601576f7e369ca48ac2b7e64f9a327fac33a4f/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=e0601576f7e369ca48ac2b7e64f9a327fac33a4f", "patch": "@@ -617,20 +617,6 @@ extern enum reg_class regno_reg_class[];\n #define FINALIZE_TRAMPOLINE(TRAMP)\n #endif\n \n-/* We generate a two-instructions program at address TRAMP :\n-\tmovea.l &CXT,%a0\n-\tjmp FNADDR  */\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx_MEM (HImode, TRAMP),\t\t\t\t\\\n-\t\t  GEN_INT(0x207C + ((STATIC_CHAIN_REGNUM-8) << 9)));\t\\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 2)), CXT); \\\n-  emit_move_insn (gen_rtx_MEM (HImode, plus_constant (TRAMP, 6)),\t\\\n-\t\t  GEN_INT(0x4EF9));\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 8)), FNADDR); \\\n-  FINALIZE_TRAMPOLINE(TRAMP);\t\t\t\t\t\t\\\n-}\n-\n /* This is the library routine that is used to transfer control from the\n    trampoline to the actual nested function.  It is defined for backward\n    compatibility, for linking with object code that used the old trampoline"}, {"sha": "fd654188e05ce011b349ccee8e00bd845cf59522", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0601576f7e369ca48ac2b7e64f9a327fac33a4f/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0601576f7e369ca48ac2b7e64f9a327fac33a4f/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=e0601576f7e369ca48ac2b7e64f9a327fac33a4f", "patch": "@@ -312,39 +312,5 @@ while (0)\n #undef DEFAULT_PCC_STRUCT_RETURN\n #define DEFAULT_PCC_STRUCT_RETURN 1\n \n-/* Output assembler code for a block containing the constant parts\n-   of a trampoline, leaving space for the variable parts.  */\n-\n-/* On m68k svr4, the trampoline is different from the generic version\n-   in that we use a1 as the static call chain.  */\n-\n-#undef TRAMPOLINE_TEMPLATE\n-#define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  assemble_aligned_integer (2, GEN_INT (0x227a));\t\t\t\\\n-  assemble_aligned_integer (2, GEN_INT (8));\t\t\t\t\\\n-  assemble_aligned_integer (2, GEN_INT (0x2f3a));\t\t\t\\\n-  assemble_aligned_integer (2, GEN_INT (8));\t\t\t\t\\\n-  assemble_aligned_integer (2, GEN_INT (0x4e75));\t\t\t\\\n-  assemble_aligned_integer (4, const0_rtx);\t\t\t\t\\\n-  assemble_aligned_integer (4, const0_rtx);\t\t\t\t\\\n-}\n-\n-/* Redefine since we are using a different trampoline */\n-#undef TRAMPOLINE_SIZE\n-#define TRAMPOLINE_SIZE 18\n-\n-/* Emit RTL insns to initialize the variable parts of a trampoline.\n-   FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.  */\n-\n-#undef INITIALIZE_TRAMPOLINE\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 10)), CXT); \\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 14)), FNADDR); \\\n-}\n-\n-\n /* XXX\n    This is the end of the chunk lifted from m68kv4.h  */"}]}