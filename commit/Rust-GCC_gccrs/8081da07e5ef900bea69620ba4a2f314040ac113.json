{"sha": "8081da07e5ef900bea69620ba4a2f314040ac113", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA4MWRhMDdlNWVmOTAwYmVhNjk2MjBiYTRhMmYzMTQwNDBhYzExMw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-06-21T20:21:03Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-06-21T20:21:03Z"}, "message": "c_compatibility: New.\n\n\n2002-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/c_compatibility: New.\n\t* include/c_compatibility/assert.h: New.\n\t* include/c_compatibility/ctype.h: New.\n\t* include/c_compatibility/errno.h: New.\n\t* include/c_compatibility/float.h: New.\n\t* include/c_compatibility/iso646.h: New.\n\t* include/c_compatibility/limits.h: New.\n\t* include/c_compatibility/locale.h: New.\n\t* include/c_compatibility/math.h: New.\n\t* include/c_compatibility/setjmp.h: New.\n\t* include/c_compatibility/signal.h: New.\n\t* include/c_compatibility/stdarg.h: New.\n\t* include/c_compatibility/stddef.h: New.\n\t* include/c_compatibility/stdio.h: New.\n\t* include/c_compatibility/stdlib.h: New.\n\t* include/c_compatibility/string.h: New.\n\t* include/c_compatibility/time.h: New.\n\t* include/c_compatibility/wchar.h: New.\n\t* include/c_compatibility/wctype.h: New.\n\n\t* include/c/std_cerrno.h: Get out of the way... define errno.\n\t* include/c/std_cmath.h: Add abs, modf overloads.\n\tUndefine C99 isms. Still not sure how to deal with this sanely.\n\t* include/c/std_csetjmp.h: Tweak.\n\t* include/c/std_cwchar.h: Include cstddef for size_t.\n\n\t* include/c_std/std_cmath.h: Remove extra function.\n\n\tPendantic std usage in testsuites.\n\t* testsuite/17_intro/header_cstdlib.cc (test01): Qualify ldiv_t\n\twith std.\n\t* testsuite/17_intro/header_cwchar.cc: Tweak.\n\t* testsuite/22_locale/codecvt_members_char_char.cc (test03): Use\n\tstd::setlocale.\n\t* testsuite/22_locale/ctype_to_wchar_t.cc (test05): Same.\n\t* testsuite/22_locale/ctype_to_char.cc (test05): Same.\n\t* testsuite/22_locale/ctype_is_wchar_t.cc (test05): Same.\n\t* testsuite/22_locale/ctype_is_char.cc (test05): Same.\n\t* testsuite/22_locale/codecvt_members_wchar_t_char.cc (test03): Same.\n\t* testsuite/22_locale/time_get_members_wchar_t.cc (test08): Same.\n\t* testsuite/22_locale/time_get_members_char.cc (test08): Same.\n\t* testsuite/22_locale/time_put_members_wchar_t.cc (test04): Same.\n\t* testsuite/22_locale/time_put_members_char.cc (test04): Same.\n\t* testsuite/22_locale/num_put_members_wchar_t.cc (test04): Same.\n\t* testsuite/22_locale/num_put_members_char.cc (test04): Same.\n\t* testsuite/22_locale/numpunct_members_wchar_t.cc (test03): Same.\n\t* testsuite/22_locale/numpunct_members_char.cc (test03): Same.\n\t* testsuite/22_locale/num_get_members_wchar_t.cc: Same.\n\t* testsuite/22_locale/num_get_members_char.cc: Same.\n\t* testsuite/22_locale/money_put_members_wchar_t.cc (test07): Same.\n\t* testsuite/22_locale/money_put_members_char.cc (test07): Same.\n\t* testsuite/22_locale/moneypunct_members_wchar_t.cc (test03): Same.\n\t* testsuite/22_locale/moneypunct_members_char.cc (test03): Same.\n\t* testsuite/22_locale/money_get_members_wchar_t.cc (test08): Same.\n\t* testsuite/22_locale/money_get_members_char.cc (test08): Same.\n\t* testsuite/22_locale/messages_members_char.cc (test03): Same.\n\t* testsuite/22_locale/collate_members_wchar_t.cc (test04): Same.\n\t* testsuite/22_locale/collate_members_char.cc (test04): Same.\n\t* testsuite/26_numerics/fabs_inline.cc: Use std::printf.\n\t* testsuite/27_io/istream_seeks.cc (test02): Qualify abort.\n\t* testsuite/27_io/istream_extractor_arith.cc (test11): Qualify strtol.\n\nFrom-SVN: r54891", "tree": {"sha": "5a37abad29c7d3b57928cf12073d1fc3f1aefe6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a37abad29c7d3b57928cf12073d1fc3f1aefe6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8081da07e5ef900bea69620ba4a2f314040ac113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8081da07e5ef900bea69620ba4a2f314040ac113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8081da07e5ef900bea69620ba4a2f314040ac113", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8081da07e5ef900bea69620ba4a2f314040ac113/comments", "author": null, "committer": null, "parents": [{"sha": "eb6b51b9f04463ef7a340b02f3f5fddfeff75941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb6b51b9f04463ef7a340b02f3f5fddfeff75941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb6b51b9f04463ef7a340b02f3f5fddfeff75941"}], "stats": {"total": 1257, "additions": 1190, "deletions": 67}, "files": [{"sha": "11cec9935221a9eaed81d49dd995251f4cdb626f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -1,3 +1,67 @@\n+2002-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/c_compatibility: New.\n+\t* include/c_compatibility/assert.h: New.\n+\t* include/c_compatibility/ctype.h: New.\n+\t* include/c_compatibility/errno.h: New.\n+\t* include/c_compatibility/float.h: New.\n+\t* include/c_compatibility/iso646.h: New.\n+\t* include/c_compatibility/limits.h: New.\n+\t* include/c_compatibility/locale.h: New.\n+\t* include/c_compatibility/math.h: New.\n+\t* include/c_compatibility/setjmp.h: New.\n+\t* include/c_compatibility/signal.h: New.\n+\t* include/c_compatibility/stdarg.h: New.\n+\t* include/c_compatibility/stddef.h: New.\n+\t* include/c_compatibility/stdio.h: New.\n+\t* include/c_compatibility/stdlib.h: New.\n+\t* include/c_compatibility/string.h: New.\n+\t* include/c_compatibility/time.h: New.\n+\t* include/c_compatibility/wchar.h: New.\n+\t* include/c_compatibility/wctype.h: New.\n+\n+\t* include/c/std_cerrno.h: Get out of the way... define errno.\n+\t* include/c/std_cmath.h: Add abs, modf overloads.\n+\tUndefine C99 isms. Still not sure how to deal with this sanely.\n+\t* include/c/std_csetjmp.h: Tweak.\n+\t* include/c/std_cwchar.h: Include cstddef for size_t.\n+\n+\t* include/c_std/std_cmath.h: Remove extra function.\n+\t\n+\tPendantic std usage in testsuites.\t\n+\t* testsuite/17_intro/header_cstdlib.cc (test01): Qualify ldiv_t\n+\twith std.\n+\t* testsuite/17_intro/header_cwchar.cc: Tweak.\n+\t* testsuite/22_locale/codecvt_members_char_char.cc (test03): Use\n+\tstd::setlocale.\n+\t* testsuite/22_locale/ctype_to_wchar_t.cc (test05): Same.\n+\t* testsuite/22_locale/ctype_to_char.cc (test05): Same.\n+\t* testsuite/22_locale/ctype_is_wchar_t.cc (test05): Same.\n+\t* testsuite/22_locale/ctype_is_char.cc (test05): Same.\n+\t* testsuite/22_locale/codecvt_members_wchar_t_char.cc (test03): Same.\n+\t* testsuite/22_locale/time_get_members_wchar_t.cc (test08): Same.\n+\t* testsuite/22_locale/time_get_members_char.cc (test08): Same.\n+\t* testsuite/22_locale/time_put_members_wchar_t.cc (test04): Same.\n+\t* testsuite/22_locale/time_put_members_char.cc (test04): Same.\n+\t* testsuite/22_locale/num_put_members_wchar_t.cc (test04): Same.\n+\t* testsuite/22_locale/num_put_members_char.cc (test04): Same.\n+\t* testsuite/22_locale/numpunct_members_wchar_t.cc (test03): Same.\n+\t* testsuite/22_locale/numpunct_members_char.cc (test03): Same.\n+\t* testsuite/22_locale/num_get_members_wchar_t.cc: Same.\n+\t* testsuite/22_locale/num_get_members_char.cc: Same.\n+\t* testsuite/22_locale/money_put_members_wchar_t.cc (test07): Same.\n+\t* testsuite/22_locale/money_put_members_char.cc (test07): Same.\n+\t* testsuite/22_locale/moneypunct_members_wchar_t.cc (test03): Same.\n+\t* testsuite/22_locale/moneypunct_members_char.cc (test03): Same.\n+\t* testsuite/22_locale/money_get_members_wchar_t.cc (test08): Same.\n+\t* testsuite/22_locale/money_get_members_char.cc (test08): Same.\n+\t* testsuite/22_locale/messages_members_char.cc (test03): Same.\n+\t* testsuite/22_locale/collate_members_wchar_t.cc (test04): Same.\n+\t* testsuite/22_locale/collate_members_char.cc (test04): Same.\n+\t* testsuite/26_numerics/fabs_inline.cc: Use std::printf.\n+\t* testsuite/27_io/istream_seeks.cc (test02): Qualify abort.\n+\t* testsuite/27_io/istream_extractor_arith.cc (test11): Qualify strtol.\n+\t\n 2002-06-20  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* libsupc++/Makefile.am (libsupc__convenience_la_SOURCES): Add"}, {"sha": "646d609657409b665cf04ae28d9754f0dc1aeb48", "filename": "libstdc++-v3/include/c/std_cerrno.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cerrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cerrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cerrno.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -31,11 +31,25 @@\n // ISO C++ 14882: 19.3  Error numbers\n //\n \n+/** @file cerrno\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c errno.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std.\n+ */\n+\n #ifndef _CPP_CERRNO\n #define _CPP_CERRNO 1\n \n #pragma GCC system_header\n \n #include_next <errno.h>\n \n+// Adhere to section 17.4.1.2 clause 5 of ISO 14882:1998\n+#ifndef errno\n+#define errno errno\n+#endif\n+\n #endif"}, {"sha": "beb7141625cee08aa434d98098747d95b18e7f79", "filename": "libstdc++-v3/include/c/std_cmath.h", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cmath.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -36,6 +36,89 @@\n  \n #pragma GCC system_header\n \n+#include <bits/c++config.h>\n+\n #include_next <math.h>\n \n+// Get rid of those macros defined in <math.h> in lieu of real functions.\n+#undef abs\n+#undef div\n+#undef acos\n+#undef asin\n+#undef atan\n+#undef atan2\n+#undef ceil\n+#undef cos\n+#undef cosh\n+#undef exp\n+#undef fabs\n+#undef floor\n+#undef fmod\n+#undef frexp\n+#undef ldexp\n+#undef log\n+#undef log10\n+#undef modf\n+#undef pow\n+#undef sin\n+#undef sinh\n+#undef sqrt\n+#undef tan\n+#undef tanh\n+\n+#undef fpclassify\n+#undef isfinite\n+#undef isinf\n+#undef isnan\n+#undef isnormal\n+#undef signbit\n+#undef isgreater\n+#undef isgreaterequal\n+#undef isless\n+#undef islessequal\n+#undef islessgreater\n+#undef isunordered\n+\n+namespace std \n+{\n+  inline double\n+  abs(double __x)\n+  { return __builtin_fabs(__x); }\n+\n+  inline float\n+  abs(float __x)\n+  { return __builtin_fabsf(__x); }\n+\n+  inline long double\n+  abs(long double __x)\n+  { return __builtin_fabsl(__x); }\n+\n+#if _GLIBCPP_HAVE_MODFF\n+  inline float \n+  modf(float __x, float* __iptr) { return modff(__x, __iptr); }\n+#else\n+  inline float \n+  modf(float __x, float* __iptr)\n+  {\n+    double __tmp;\n+    double __res = modf(static_cast<double>(__x), &__tmp);\n+    *__iptr = static_cast<float>(__tmp);\n+    return __res;\n+  }\n+#endif\n+\n+#if _GLIBCPP_HAVE_MODFL\n+  inline long double \n+  modf(long double __x, long double* __iptr) { return modfl(__x, __iptr); }\n+#else\n+  inline long double \n+  modf(long double __x, long double* __iptr) \n+  { \n+    double __tmp;\n+    double __res = modf(static_cast<double>(__x), &__tmp);\n+    * __iptr = static_cast<long double>(__tmp);\n+    return __res;\n+  }\n+#endif\n+}\n #endif"}, {"sha": "fe3f9c70bcdda0a4c22b8dbf0ac8dafafc6fe74e", "filename": "libstdc++-v3/include/c/std_csetjmp.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_csetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_csetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_csetjmp.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -38,4 +38,12 @@\n \n #include_next <setjmp.h>\n \n+// Get rid of those macros defined in <setjmp.h> in lieu of real functions.\n+#undef longjmp\n+\n+// Adhere to section 17.4.1.2 clause 5 of ISO 14882:1998\n+#ifndef setjmp\n+#define setjmp(env) std::setjmp (env)\n+#endif\n+\n #endif"}, {"sha": "3d6272aa62e330d680a498b58e7b975764289860", "filename": "libstdc++-v3/include/c/std_cstdio.h", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstdio.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -38,4 +38,47 @@\n \n #include_next <stdio.h>\n \n+// Get rid of those macros defined in <stdio.h> in lieu of real functions.\n+#undef clearerr\n+#undef fclose\n+#undef feof\n+#undef ferror\n+#undef fflush\n+#undef fgetc\n+#undef fgetpos\n+#undef fgets\n+#undef fopen\n+#undef fprintf\n+#undef fputc\n+#undef fputs\n+#undef fread\n+#undef freopen\n+#undef fscanf\n+#undef fseek\n+#undef fsetpos\n+#undef ftell\n+#undef fwrite\n+#undef getc\n+#undef getchar\n+#undef gets\n+#undef perror\n+#undef printf\n+#undef putc\n+#undef putchar\n+#undef puts\n+#undef remove\n+#undef rename\n+#undef rewind\n+#undef scanf\n+#undef setbuf\n+#undef setvbuf\n+#undef sprintf\n+#undef sscanf\n+#undef tmpfile\n+#undef tmpnam\n+#undef ungetc\n+#undef vfprintf\n+#undef vprintf\n+#undef vsprintf\n+\n #endif"}, {"sha": "bad9923fa1e1c57ab844a87f37b5ff056b73cab9", "filename": "libstdc++-v3/include/c/std_cwchar.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cwchar.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -37,6 +37,8 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n+#include <cstddef>\n+#include <ctime>\n \n #if _GLIBCPP_HAVE_WCHAR_H\n #include_next <wchar.h>"}, {"sha": "cb5313fa97b91d1a51c45d5af99c4c98068f135f", "filename": "libstdc++-v3/include/c_compatibility/assert.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fassert.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,30 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cassert>"}, {"sha": "1989347e2d86b76c0260e2eb5907d7bef09c967a", "filename": "libstdc++-v3/include/c_compatibility/ctype.h", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fctype.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,49 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_CTYPE_H_\n+#define _CPP_CTYPE_H_ 1\n+\n+#include <cctype>\n+\n+using std::isalnum;\n+using std::isalpha;\n+using std::iscntrl;\n+using std::isdigit;\n+using std::isgraph;\n+using std::islower;\n+using std::isprint;\n+using std::ispunct;\n+using std::isspace;\n+using std::isupper;\n+using std::isxdigit;\n+using std::tolower;\n+using std::toupper;\n+\n+#endif"}, {"sha": "f890b53754952b23742eda9097643483637e43d3", "filename": "libstdc++-v3/include/c_compatibility/errno.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ferrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ferrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ferrno.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,35 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_ERRNO_H_\n+#define _CPP_ERRNO_H_ 1\n+\n+#include <cerrno>\n+\n+#endif"}, {"sha": "7d7b9d44f9ff0bf006868f486b83c73c77ba90a6", "filename": "libstdc++-v3/include/c_compatibility/float.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffloat.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,35 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_FLOAT_H_\n+#define _CPP_FLOAT_H_ 1\n+\n+#include <cfloat>\n+\n+#endif"}, {"sha": "25b6140ba53c8337d9bb58088d69de1c435c743c", "filename": "libstdc++-v3/include/c_compatibility/iso646.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fiso646.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fiso646.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fiso646.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,35 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_ISO646_H_\n+#define _CPP_ISO646_H_ 1\n+\n+#include <ciso646>\n+\n+#endif "}, {"sha": "9ddbce8990e92dbb1e7e77315552147beca646e3", "filename": "libstdc++-v3/include/c_compatibility/limits.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flimits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flimits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flimits.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,35 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_LIMITS_H_\n+#define _CPP_LIMITS_H_ 1\n+\n+#include <climits>\n+\n+#endif "}, {"sha": "4d7d72da7ab4f2debdc137d26a6da752fee29e7f", "filename": "libstdc++-v3/include/c_compatibility/locale.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flocale.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,39 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_LOCALE_H_\n+#define _CPP_LOCALE_H_ 1\n+\n+#include <clocale>\n+\n+using std::lconv;\n+using std::setlocale;\n+using std::localeconv;\n+\n+#endif "}, {"sha": "4c4fd0a21781cb7be00253194643475699d10271", "filename": "libstdc++-v3/include/c_compatibility/math.h", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,74 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_MATH_H_\n+#define _CPP_MATH_H_ 1\n+\n+#include <cmath>\n+\n+using std::abs;\n+using std::acos;\n+using std::asin;\n+using std::atan;\n+using std::atan2;\n+using std::cos;\n+using std::sin;\n+using std::tan;\n+using std::cosh;\n+using std::sinh;\n+using std::tanh;\n+using std::exp;\n+using std::frexp;\n+using std::ldexp;\n+using std::log;\n+using std::log10;\n+using std::modf;\n+using std::pow;\n+using std::sqrt;\n+using std::ceil;\n+using std::fabs;\n+using std::floor;\n+using std::fmod;\n+\n+#if _GLIBCPP_USE_C99\n+using std::fpclassify;\n+using std::isfinite;\n+using std::isinf;\n+using std::isnan;\n+using std::isnormal;\n+using std::signbit;\n+using std::isgreater;\n+using std::isgreaterequal;\n+using std::isless;\n+using std::islessequal;\n+using std::islessgreater;\n+using std::isunordered;\n+#endif\n+\n+#endif"}, {"sha": "f194253f8689c3f55fdbaaee6bd098d5ab867c5c", "filename": "libstdc++-v3/include/c_compatibility/setjmp.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsetjmp.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,38 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_SETJMP_H_\n+#define _CPP_SETJMP_H_ 1\n+\n+#include <csetjmp>\n+\n+using std::jmp_buf;\n+using std::longjmp;\n+\n+#endif"}, {"sha": "724ac8a1d665b49e5375d9e4cd9ec27d0a6b5b65", "filename": "libstdc++-v3/include/c_compatibility/signal.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsignal.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,40 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_SIGNAL_H_\n+#define _CPP_SIGNAL_H_ 1\n+\n+#include <csignal>\n+\n+using std::sig_atomic_t;\n+\n+using std::raise;\n+using std::signal;\n+\n+#endif"}, {"sha": "a1a62b1699e793ff21e57a56b73f4fbbdf9b81a8", "filename": "libstdc++-v3/include/c_compatibility/stdarg.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdarg.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,37 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_STDARG_H_\n+#define _CPP_STDARG_H_ 1\n+\n+#include <cstdarg>\n+\n+using std::va_list;\n+\n+#endif"}, {"sha": "094c380ad02c4ac854b9c9f62308140659b12de3", "filename": "libstdc++-v3/include/c_compatibility/stddef.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstddef.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,38 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_STDDEF_H_\n+#define _CPP_STDDEF_H_ 1\n+\n+#include <cstddef>\n+\n+using std::size_t;\n+using std::ptrdiff_t;\n+\n+#endif"}, {"sha": "930ffd4861db120fc613e1e52b5a3cd69e9db6da", "filename": "libstdc++-v3/include/c_compatibility/stdio.h", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdio.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,85 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_STDIO_H_\n+#define _CPP_STDIO_H_ 1\n+\n+#include <cstdio>\n+\n+using std::FILE;\n+using std::fpos_t; \n+\n+using std::remove;\n+using std::rename;\n+using std::tmpfile;\n+using std::tmpnam;\n+using std::fclose;\n+using std::fflush;\n+using std::fopen;\n+using std::freopen;\n+using std::setbuf;\n+using std::setvbuf;\n+using std::fprintf;\n+using std::fscanf;\n+using std::printf;\n+using std::scanf;\n+using std::snprintf;\n+using std::sprintf;\n+using std::sscanf;\n+using std::vfprintf;\n+using std::vfscanf;\n+using std::vprintf;\n+using std::vscanf;\n+using std::vsnprintf;\n+using std::vsprintf;\n+using std::vsscanf;\n+using std::fgetc;\n+using std::fgets;\n+using std::fputc;\n+using std::fputs;\n+using std::getc;\n+using std::getchar;\n+using std::gets;\n+using std::putc;\n+using std::putchar;\n+using std::puts;\n+using std::ungetc;\n+using std::fread;\n+using std::fwrite;\n+using std::fgetpos;\n+using std::fseek;\n+using std::fsetpos;\n+using std::ftell;\n+using std::rewind;\n+using std::clearerr;\n+using std::feof;\n+using std::ferror;\n+using std::perror;\n+\n+#endif"}, {"sha": "d516034d9d78d372de7d966d8a5e71a61785f8ca", "filename": "libstdc++-v3/include/c_compatibility/stdlib.h", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdlib.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,67 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_STDLIB_H_\n+#define _CPP_STDLIB_H_ 1\n+\n+#include <cstdlib>\n+\n+using std::div_t;\n+using std::ldiv_t;\n+\n+using std::abort;\n+using std::abs;\n+using std::atexit;\n+using std::atof;\n+using std::atoi;\n+using std::atol;\n+using std::bsearch;\n+using std::calloc;\n+using std::div;\n+using std::exit;\n+using std::free;\n+using std::getenv;\n+using std::labs;\n+using std::ldiv;\n+using std::malloc;\n+using std::mblen;\n+using std::mbstowcs;\n+using std::mbtowc;\n+using std::qsort;\n+using std::rand;\n+using std::realloc;\n+using std::srand;\n+using std::strtod;\n+using std::strtol;\n+using std::strtoul;\n+using std::system;\n+using std::wcstombs;\n+using std::wctomb;\n+\n+#endif"}, {"sha": "b639157ee59340ab1c2ae76ea9ba64c0faf68365", "filename": "libstdc++-v3/include/c_compatibility/string.h", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstring.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,58 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_STRING_H_\n+#define _CPP_STRING_H_ 1\n+\n+#include <cstring>\n+\n+using std::memcpy;\n+using std::memmove;\n+using std::strcpy;\n+using std::strncpy;\n+using std::strcat;\n+using std::strncat;\n+using std::memcmp;\n+using std::strcmp;\n+using std::strcoll;\n+using std::strncmp;\n+using std::strxfrm;\n+using std::memchr;\n+using std::strchr;\n+using std::strcspn;\n+using std::strpbrk;\n+using std::strrchr;\n+using std::strspn;\n+using std::strstr;\n+using std::strtok;\n+using std::memset;\n+using std::strerror;\n+using std::strlen;\n+\n+#endif "}, {"sha": "6d07aa1aed614896dcf1d87723f3b2878c8575bb", "filename": "libstdc++-v3/include/c_compatibility/time.h", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftime.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,60 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_TIME_H_\n+#define _CPP_TIME_H_ 1\n+\n+#include <ctime>\n+ \n+// Get rid of those macros defined in <time.h> in lieu of real functions.\n+#undef clock\n+#undef difftime\n+#undef mktime\n+#undef time\n+#undef asctime\n+#undef ctime\n+#undef gmtime\n+#undef localtime\n+#undef strftime\n+\n+using std::clock_t;\n+using std::time_t;\n+using std::tm;\n+\n+using std::clock;\n+using std::difftime;\n+using std::mktime;\n+using std::time;\n+using std::asctime;\n+using std::ctime;\n+using std::gmtime;\n+using std::localtime;\n+using std::strftime;\n+\n+#endif"}, {"sha": "e9485a54ded4d7c3489556358b6eb0cf788a1bfa", "filename": "libstdc++-v3/include/c_compatibility/wchar.h", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwchar.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,106 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_WCHAR_H_\n+#define _CPP_WCHAR_H_ 1\n+\n+#include <cwchar>\n+\n+using std::mbstate_t;\n+\n+#if _GLIBCPP_USE_WCHAR_T\n+using std::wint_t;\n+\n+using std::btowc;\n+using std::wctob;\n+using std::fgetwc;\n+using std::fgetwc;\n+using std::fgetws;\n+using std::fputwc;\n+using std::fputws;\n+using std::fwide;\n+using std::fwprintf;\n+using std::fwscanf;\n+using std::swprintf;\n+using std::swscanf;\n+using std::vfwprintf;\n+using std::vfwscanf;\n+using std::vswprintf;\n+using std::vswscanf;\n+using std::vwprintf;\n+using std::vwscanf;\n+using std::wprintf;\n+using std::wscanf;\n+using std::getwc;\n+using std::getwchar;\n+using std::mbsinit;\n+using std::mbrlen;\n+using std::mbrtowc;\n+using std::mbsrtowcs;\n+using std::wcsrtombs;\n+using std::putwc;\n+using std::putwchar;\n+using std::ungetwc;\n+using std::wcrtomb;\n+using std::wcstod;\n+using std::wcstof;\n+using std::wcstol;\n+using std::wcstoul;\n+using std::wcscpy;\n+using std::wcsncpy;\n+using std::wcscat;\n+using std::wcsncat;\n+using std::wcscmp;\n+using std::wcscoll;\n+using std::wcsncmmp;\n+using std::wcsxfrm;\n+using std::wcschr;\n+using std::wcscspn;\n+using std::wcslen;\n+using std::wcspbrk;\n+using std::wcsrchr;\n+using std::wcsspn;\n+using std::wcsstr;\n+using std::wcstok;\n+using std::wmemchr;\n+using std::wmemcmp;\n+using std::wmemcpy;\n+using std::wmemmove;\n+using std::wmemset;\n+using std::wcsftime;\n+\n+#if _GLIBCPP_USE_C99\n+using std::wcstold;\n+using std::wcstoll;\n+using std::wcstoull;\n+#endif\n+\n+#endif  //_GLIBCPP_USE_WCHAR_T\n+\n+#endif"}, {"sha": "2c75ec8e960b6b9c3aadd8a637b97efa1d9be35f", "filename": "libstdc++-v3/include/c_compatibility/wctype.h", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwctype.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -0,0 +1,55 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_CWCTYPE_H_\n+#define _CPP_CWCTYPE_H_ 1\n+\n+#include <cwctype>\n+\n+using std::wctype_t;\n+using std::wctrans_t;\n+using std::iswalpha;\n+using std::iswupper;\n+using std::iswlower;\n+using std::iswdigit;\n+using std::iswxdigit;\n+using std::iswalnum;\n+using std::iswspace;\n+using std::iswpunct;\n+using std::iswprint;\n+using std::iswgraph;\n+using std::iswcntrl;\n+using std::iswctype;\n+using std::towctrans;\n+using std::towlower;\n+using std::towupper;\n+using std::wctrans;\n+using std::wctype;\n+\n+#endif "}, {"sha": "b2f65c82d6743deca408f5dda5fa80914a45fe8d", "filename": "libstdc++-v3/include/c_std/std_cmath.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -82,13 +82,6 @@ namespace std\n   // an `exported' forward declaration.\n   template<typename _Tp> _Tp __cmath_power(_Tp, unsigned int);\n \n-  template<typename _Tp>\n-  inline _Tp\n-    __cmath_abs(_Tp __x)\n-    {\n-      return __x < _Tp() ? -__x : __x;\n-    }\n-\n   inline double\n   abs(double __x)\n   { return __builtin_fabs(__x); }"}, {"sha": "f86f423d8750c5c94c896834e7122bfeba5a1371", "filename": "libstdc++-v3/testsuite/17_intro/header_cstdlib.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdlib.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdlib.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdlib.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -1,6 +1,6 @@\n // 2000-01-01 bkoz\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -26,12 +26,13 @@\n void test01()\n {\n   long a = std::abs(1L);\n-  ldiv_t b = std::div(2L, 1L);\n+  std::div(2L, 1L);\n+  std::ldiv_t b;\n }\n \n void test02()\n {\n-  // Make sure size_t is in namespace std\n+  // Make sure size_t is in namespace std.\n   std::size_t i = 5;\n }\n "}, {"sha": "8d65e024195d2ef4ba8b33bb8531a92a69cfe310", "filename": "libstdc++-v3/testsuite/17_intro/header_cwchar.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwchar.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwchar.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwchar.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -22,7 +22,6 @@\n \n #include <cwchar>\n \n-\n int main(void)\n {\n   // Make sure size_t is in namespace std"}, {"sha": "9cf4e7d5c7076420df1e6263f447f35a16ac4143", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_members_char_char.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_char_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_char_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_char_char.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -102,12 +102,12 @@ void test03()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "1eb505fb6bd2e480958b4e07a7ee4a06c0aea55b", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_members_wchar_t_char.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_wchar_t_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_wchar_t_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_wchar_t_char.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -134,12 +134,12 @@ void test03()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "eccf7caae1c76bcc9c5991e305a93a32c4cadbbf", "filename": "libstdc++-v3/testsuite/22_locale/collate_members_char.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_char.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -166,13 +166,13 @@ void test04()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n       test03();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "c59ab329ebd670983c7098dd71f8dbcca63fd871", "filename": "libstdc++-v3/testsuite/22_locale/collate_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_wchar_t.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -166,13 +166,13 @@ void test04()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n       test03();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "1b97b4aac2f4875a26ec65eb322afab457a00fb4", "filename": "libstdc++-v3/testsuite/22_locale/ctype_is_char.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_is_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_is_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_is_char.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -252,14 +252,14 @@ void test05()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n       test02();\n       test03();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "5ca171b51e8854ce6df02f7d28da9b449de6bfce", "filename": "libstdc++-v3/testsuite/22_locale/ctype_is_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_is_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_is_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_is_wchar_t.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -175,12 +175,12 @@ void test05()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "ed3509555720cb1437408bf1d5039d9bc603aa1c", "filename": "libstdc++-v3/testsuite/22_locale/ctype_to_char.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_to_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_to_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_to_char.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -121,12 +121,12 @@ void test05()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "52180356a0a720a6700ed6ad0c8d8c9c9160a056", "filename": "libstdc++-v3/testsuite/22_locale/ctype_to_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_to_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_to_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_to_wchar_t.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -122,12 +122,12 @@ void test05()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "62126557c168675c92a5b9d2c55255b95ac17957", "filename": "libstdc++-v3/testsuite/22_locale/messages_members_char.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_members_char.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -104,12 +104,12 @@ void test03()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "bf2e47e3a9cf04c5ec461238cc7f295d7f4c8e0c", "filename": "libstdc++-v3/testsuite/22_locale/money_get_members_char.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -551,7 +551,7 @@ void test08()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n@@ -561,7 +561,7 @@ void test08()\n       test05();\n       test06();\n       test07();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "3ac25d0204aabd83bfb72e39898482f11586b425", "filename": "libstdc++-v3/testsuite/22_locale/money_get_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -552,7 +552,7 @@ void test08()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n@@ -562,7 +562,7 @@ void test08()\n       test05();\n       test06();\n       test07();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "708ae4243ff5dbfd9743919a3226c446c8ff38a1", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_char.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -373,7 +373,7 @@ void test07()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n@@ -382,7 +382,7 @@ void test07()\n       test03();\n       test05();\n       test06();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "1bfe86ba8087286a71153922ed1da0fba63c6bcc", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -373,7 +373,7 @@ void test07()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n@@ -382,7 +382,7 @@ void test07()\n       test03();\n       test05();\n       test06();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "3cb6c88a880f3a1bde85916b346f4e4a1a738c12", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_members_char.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_char.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -128,12 +128,12 @@ void test03()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "a81fe0a2362d7ad7cb71ccb9275d83a6858122e3", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_wchar_t.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -129,12 +129,12 @@ void test03()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "06e3322e0adcd2e63aa96d54ed57a434ce4e4ec1", "filename": "libstdc++-v3/testsuite/22_locale/num_get_members_char.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -418,15 +418,15 @@ void test06()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n       test02();\n       test04();\n       test05();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "088d4f8c9e325b75a4ce8e1ec31c75254087d420", "filename": "libstdc++-v3/testsuite/22_locale/num_get_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -420,15 +420,15 @@ void test06()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n       test02();\n       test04();\n       test05();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "fcc1f79b31d2b0551b982c03a2d9b32bc85dc3b1", "filename": "libstdc++-v3/testsuite/22_locale/num_put_members_char.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_char.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -315,13 +315,13 @@ void test04()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n       test02();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "4fbf25f2121ded3196ebfc5607498d923e063b1f", "filename": "libstdc++-v3/testsuite/22_locale/num_put_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_wchar_t.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -315,13 +315,13 @@ void test04()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n       test02();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "926501c93b212acf824b6186cc1edf991dee75a6", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_members_char.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_char.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -106,12 +106,12 @@ void test03()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "14e9321ecf0d91f7a4b24e49560b3c326267c1d5", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_wchar_t.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -104,12 +104,12 @@ void test03()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "b5c8f098031fad7f30175651e77f4fe05c6f4111", "filename": "libstdc++-v3/testsuite/22_locale/time_get_members_char.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -704,7 +704,7 @@ void test08()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n@@ -714,7 +714,7 @@ void test08()\n       test04();\n       test05();\n       test06();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "89efdb9fea57e760e8fd6f216de1a783b211804a", "filename": "libstdc++-v3/testsuite/22_locale/time_get_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -704,7 +704,7 @@ void test08()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n@@ -714,7 +714,7 @@ void test08()\n       test04();\n       test05();\n       test06();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "c657706f714a5c482a20d9ac6697129e03174261", "filename": "libstdc++-v3/testsuite/22_locale/time_put_members_char.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_char.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -255,13 +255,13 @@ void test04()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n       test02();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "347f41f526e67a12ab19855910314bfbccb8c738", "filename": "libstdc++-v3/testsuite/22_locale/time_put_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_wchar_t.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -257,13 +257,13 @@ void test04()\n {\n   bool test = true;\n \n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n   if (tentLANG != NULL)\n     {\n       std::string preLANG = tentLANG;\n       test01();\n       test02();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n+      std::string postLANG = std::setlocale(LC_ALL, NULL);\n       VERIFY( preLANG == postLANG );\n     }\n }"}, {"sha": "5dffb7d12c11b52773a4dd876fef1549e0638c29", "filename": "libstdc++-v3/testsuite/26_numerics/fabs_inline.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Ffabs_inline.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Ffabs_inline.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Ffabs_inline.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +32,6 @@ int main ()\n   double a = fabs (-2.4);\n   realfn myfn = fabs;\n   double b = myfn (-2.5);\n-  printf (\"%f, %f, %p\\n\", a, b, myfn);\n+  std::printf (\"%f, %f, %p\\n\", a, b, myfn);\n   return 0;\n }"}, {"sha": "c184b3fade203d2a811fdd04856c2668b381375c", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -1,6 +1,6 @@\n // 1999-04-12 bkoz\n \n-// Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -500,7 +500,7 @@ bool test11()\n \n   // sanity check via 'C' library call\n   char* err;\n-  long l = strtol(cstrlit, &err, 0);\n+  long l = std::strtol(cstrlit, &err, 0);\n \n   std::istringstream iss(cstrlit);\n   iss.setf(std::ios::fmtflags(0), std::ios::basefield);"}, {"sha": "cd0e0656748b32d982c8fdbe75b4b65299eb51eb", "filename": "libstdc++-v3/testsuite/27_io/istream_seeks.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_seeks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8081da07e5ef900bea69620ba4a2f314040ac113/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_seeks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_seeks.cc?ref=8081da07e5ef900bea69620ba4a2f314040ac113", "patch": "@@ -1,6 +1,6 @@\n // 2000-06-29 bkoz\n \n-// Copyright (C) 2000, 2001 Free Software Foundation\n+// Copyright (C) 2000, 2001, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -108,7 +108,7 @@ void test02()\n   std::fstream ofstrm;\n   ofstrm.open(\"istream_seeks-3.txt\", std::ios::out);\n   if (!ofstrm)\n-    abort();\n+    std::abort();\n   write_rewind(ofstrm);\n   ofstrm.close();\n "}]}