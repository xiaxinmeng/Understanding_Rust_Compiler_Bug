{"sha": "8a0436cb79ccf797d0dbc02175fce1a254a1a691", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEwNDM2Y2I3OWNjZjc5N2QwZGJjMDIxNzVmY2UxYTI1NGExYTY5MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-09-17T15:24:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-09-17T15:24:59Z"}, "message": "sse.md (VIMAX_AVX2): Change V4DI to V2TI.\n\n\t* config/i386/sse.md (VIMAX_AVX2): Change V4DI to V2TI.\n\t(sse2_avx, sseinsnmode): Add V2TI.\n\t(REDUC_SMINMAX_MODE): New mode iterator.\n\t(reduc_smax_v4sf, reduc_smin_v4sf, reduc_smax_v8sf,\n\treduc_smin_v8sf, reduc_smax_v4df, reduc_smin_v4df): Remove.\n\t(reduc_<code>_<mode>): New smaxmin and umaxmin expanders.\n\t(sse2_lshrv1ti3): Rename to...\n\t(<sse2_avx2>_lshr<mode>3): ... this.  Use VIMAX_AVX2 mode\n\titerator.  Move before umaxmin expanders.\n\t* config/i386/i386.h (VALID_AVX256_REG_MODE,\n\tSSE_REG_MODE_P): Accept V2TImode.\n\t* config/i386/i386.c (ix86_expand_reduc): Handle V32QImode,\n\tV16HImode, V8SImode and V4DImode.\n\nFrom-SVN: r178930", "tree": {"sha": "d9a418c44bf28109309ea5968a0357568be43032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9a418c44bf28109309ea5968a0357568be43032"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a0436cb79ccf797d0dbc02175fce1a254a1a691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0436cb79ccf797d0dbc02175fce1a254a1a691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a0436cb79ccf797d0dbc02175fce1a254a1a691", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0436cb79ccf797d0dbc02175fce1a254a1a691/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32469ccc49bbecadceb571310c29b975be0286a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32469ccc49bbecadceb571310c29b975be0286a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32469ccc49bbecadceb571310c29b975be0286a5"}], "stats": {"total": 168, "additions": 91, "deletions": 77}, "files": [{"sha": "007b8dffe32589459313e800a09191d49fe0dde9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0436cb79ccf797d0dbc02175fce1a254a1a691/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0436cb79ccf797d0dbc02175fce1a254a1a691/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a0436cb79ccf797d0dbc02175fce1a254a1a691", "patch": "@@ -1,5 +1,19 @@\n 2011-09-17  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/sse.md (VIMAX_AVX2): Change V4DI to V2TI.\n+\t(sse2_avx, sseinsnmode): Add V2TI.\n+\t(REDUC_SMINMAX_MODE): New mode iterator.\n+\t(reduc_smax_v4sf, reduc_smin_v4sf, reduc_smax_v8sf,\n+\treduc_smin_v8sf, reduc_smax_v4df, reduc_smin_v4df): Remove.\n+\t(reduc_<code>_<mode>): New smaxmin and umaxmin expanders.\n+\t(sse2_lshrv1ti3): Rename to...\n+\t(<sse2_avx2>_lshr<mode>3): ... this.  Use VIMAX_AVX2 mode\n+\titerator.  Move before umaxmin expanders.\n+\t* config/i386/i386.h (VALID_AVX256_REG_MODE,\n+\tSSE_REG_MODE_P): Accept V2TImode.\n+\t* config/i386/i386.c (ix86_expand_reduc): Handle V32QImode,\n+\tV16HImode, V8SImode and V4DImode.\n+\n \t* config/i386/i386.c (ix86_build_const_vector): Handle V8SImode\n \tand V4DImode.\n \t(ix86_build_signbit_mask): Likewise.\n@@ -19,7 +33,7 @@\n \tVI8_AVX2 mode iterator.\n \t(vcond<V_256:mode><VI_256:mode>, vcondu<V_256:mode><VI_256:mode>):\n \tNew expanders.\n-\t\n+\n 2011-09-17  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/ia64/itanium2.md: Use match_test rather than eq/ne symbol_ref"}, {"sha": "57cc8e3b937cfd622b7fdc43a5292e80e40efaba", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0436cb79ccf797d0dbc02175fce1a254a1a691/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0436cb79ccf797d0dbc02175fce1a254a1a691/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8a0436cb79ccf797d0dbc02175fce1a254a1a691", "patch": "@@ -32719,6 +32719,7 @@ ix86_expand_reduc (rtx (*fn) (rtx, rtx, rtx), rtx dest, rtx in)\n {\n   rtx tmp1, tmp2, tmp3, tmp4, tmp5;\n   enum machine_mode mode = GET_MODE (in);\n+  int i;\n \n   tmp1 = gen_reg_rtx (mode);\n   tmp2 = gen_reg_rtx (mode);\n@@ -32747,6 +32748,31 @@ ix86_expand_reduc (rtx (*fn) (rtx, rtx, rtx), rtx dest, rtx in)\n       emit_insn (fn (tmp2, tmp1, in));\n       emit_insn (gen_avx_shufpd256 (tmp3, tmp2, tmp2, const1_rtx));\n       break;\n+    case V32QImode:\n+    case V16HImode:\n+    case V8SImode:\n+    case V4DImode:\n+      emit_insn (gen_avx2_permv2ti (gen_lowpart (V4DImode, tmp1),\n+\t\t\t\t    gen_lowpart (V4DImode, in),\n+\t\t\t\t    gen_lowpart (V4DImode, in),\n+\t\t\t\t    const1_rtx));\n+      tmp4 = in;\n+      tmp5 = tmp1;\n+      for (i = 64; i >= GET_MODE_BITSIZE (GET_MODE_INNER (mode)); i >>= 1)\n+\t{\n+\t  if (i != 64)\n+\t    {\n+\t      tmp2 = gen_reg_rtx (mode);\n+\t      tmp3 = gen_reg_rtx (mode);\n+\t    }\n+\t  emit_insn (fn (tmp2, tmp4, tmp5));\n+\t  emit_insn (gen_avx2_lshrv2ti3 (gen_lowpart (V2TImode, tmp3),\n+\t\t\t\t\t gen_lowpart (V2TImode, tmp2),\n+\t\t\t\t\t GEN_INT (i)));\n+\t  tmp4 = tmp2;\n+\t  tmp5 = tmp3;\n+\t}\n+      break;\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "7d6e05827b0b3daef7b1a6d2fbcda2fc33290060", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0436cb79ccf797d0dbc02175fce1a254a1a691/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0436cb79ccf797d0dbc02175fce1a254a1a691/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=8a0436cb79ccf797d0dbc02175fce1a254a1a691", "patch": "@@ -995,7 +995,8 @@ enum target_cpu_default\n \n #define VALID_AVX256_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V32QImode || (MODE) == V16HImode || (MODE) == V8SImode\t\\\n-   || (MODE) == V4DImode || (MODE) == V8SFmode || (MODE) == V4DFmode)\n+   || (MODE) == V4DImode || (MODE) == V2TImode || (MODE) == V8SFmode\t\\\n+   || (MODE) == V4DFmode)\n \n #define VALID_SSE2_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V16QImode || (MODE) == V8HImode || (MODE) == V2DFmode\t\\\n@@ -1035,7 +1036,8 @@ enum target_cpu_default\n    || (MODE) == TFmode || (MODE) == V8HImode || (MODE) == V2DFmode\t\\\n    || (MODE) == V2DImode || (MODE) == V4SFmode || (MODE) == V4SImode\t\\\n    || (MODE) == V32QImode || (MODE) == V16HImode || (MODE) == V8SImode\t\\\n-   || (MODE) == V4DImode || (MODE) == V8SFmode || (MODE) == V4DFmode)\n+   || (MODE) == V4DImode || (MODE) == V8SFmode || (MODE) == V4DFmode\t\\\n+   || (MODE) == V2TImode)\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.  */\n "}, {"sha": "4567ee920d148512e10f775b5f7ccd1802efa043", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 46, "deletions": 74, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0436cb79ccf797d0dbc02175fce1a254a1a691/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0436cb79ccf797d0dbc02175fce1a254a1a691/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8a0436cb79ccf797d0dbc02175fce1a254a1a691", "patch": "@@ -100,7 +100,7 @@\n   [(V4DI \"TARGET_AVX2\") V2DI])\n \n (define_mode_iterator VIMAX_AVX2\n-  [(V4DI \"TARGET_AVX2\") V1TI])\n+  [(V2TI \"TARGET_AVX2\") V1TI])\n \n (define_mode_iterator SSESCALARMODE\n   [(V4DI \"TARGET_AVX2\") TI])\n@@ -140,7 +140,7 @@\n    (V8HI \"sse2\") (V16HI \"avx2\")\n    (V4SI \"sse2\") (V8SI \"avx2\")\n    (V2DI \"sse2\") (V4DI \"avx2\")\n-   (V1TI \"sse2\")])\n+   (V1TI \"sse2\") (V2TI \"avx2\")])\n \n (define_mode_attr ssse3_avx2\n    [(V16QI \"ssse3\") (V32QI \"avx2\")\n@@ -225,7 +225,7 @@\n \n ;; SSE instruction mode\n (define_mode_attr sseinsnmode\n-  [(V32QI \"OI\") (V16HI \"OI\") (V8SI \"OI\") (V4DI \"OI\")\n+  [(V32QI \"OI\") (V16HI \"OI\") (V8SI \"OI\") (V4DI \"OI\") (V2TI \"OI\")\n    (V16QI \"TI\") (V8HI \"TI\") (V4SI \"TI\") (V2DI \"TI\") (V1TI \"TI\")\n    (V8SF \"V8SF\") (V4DF \"V4DF\")\n    (V4SF \"V4SF\") (V2DF \"V2DF\")\n@@ -1257,58 +1257,30 @@\n   DONE;\n })\n \n+;; Modes handled by reduc_sm{in,ax}* patterns.\n+(define_mode_iterator REDUC_SMINMAX_MODE\n+  [(V32QI \"TARGET_AVX2\") (V16HI \"TARGET_AVX2\")\n+   (V8SI \"TARGET_AVX2\") (V4DI \"TARGET_AVX2\")\n+   (V8SF \"TARGET_AVX\") (V4DF \"TARGET_AVX\")\n+   (V4SF \"TARGET_SSE\")])\n \n-(define_expand \"reduc_smax_v4sf\"\n-  [(match_operand:V4SF 0 \"register_operand\" \"\")\n-   (match_operand:V4SF 1 \"register_operand\" \"\")]\n-  \"TARGET_SSE\"\n-{\n-  ix86_expand_reduc (gen_smaxv4sf3, operands[0], operands[1]);\n-  DONE;\n-})\n-\n-(define_expand \"reduc_smin_v4sf\"\n-  [(match_operand:V4SF 0 \"register_operand\" \"\")\n-   (match_operand:V4SF 1 \"register_operand\" \"\")]\n-  \"TARGET_SSE\"\n-{\n-  ix86_expand_reduc (gen_sminv4sf3, operands[0], operands[1]);\n-  DONE;\n-})\n-\n-(define_expand \"reduc_smax_v8sf\"\n-  [(match_operand:V8SF 0 \"register_operand\" \"\")\n-   (match_operand:V8SF 1 \"register_operand\" \"\")]\n-  \"TARGET_AVX\"\n-{\n-  ix86_expand_reduc (gen_smaxv8sf3, operands[0], operands[1]);\n-  DONE;\n-})\n-\n-(define_expand \"reduc_smin_v8sf\"\n-  [(match_operand:V8SF 0 \"register_operand\" \"\")\n-   (match_operand:V8SF 1 \"register_operand\" \"\")]\n-  \"TARGET_AVX\"\n-{\n-  ix86_expand_reduc (gen_sminv8sf3, operands[0], operands[1]);\n-  DONE;\n-})\n-\n-(define_expand \"reduc_smax_v4df\"\n-  [(match_operand:V4DF 0 \"register_operand\" \"\")\n-   (match_operand:V4DF 1 \"register_operand\" \"\")]\n-  \"TARGET_AVX\"\n+(define_expand \"reduc_<code>_<mode>\"\n+  [(smaxmin:REDUC_SMINMAX_MODE\n+     (match_operand:REDUC_SMINMAX_MODE 0 \"register_operand\" \"\")\n+     (match_operand:REDUC_SMINMAX_MODE 1 \"register_operand\" \"\"))]\n+  \"\"\n {\n-  ix86_expand_reduc (gen_smaxv4df3, operands[0], operands[1]);\n+  ix86_expand_reduc (gen_<code><mode>3, operands[0], operands[1]);\n   DONE;\n })\n \n-(define_expand \"reduc_smin_v4df\"\n-  [(match_operand:V4DF 0 \"register_operand\" \"\")\n-   (match_operand:V4DF 1 \"register_operand\" \"\")]\n-  \"TARGET_AVX\"\n+(define_expand \"reduc_<code>_<mode>\"\n+  [(umaxmin:VI_256\n+     (match_operand:VI_256 0 \"register_operand\" \"\")\n+     (match_operand:VI_256 1 \"register_operand\" \"\"))]\n+  \"TARGET_AVX2\"\n {\n-  ix86_expand_reduc (gen_sminv4df3, operands[0], operands[1]);\n+  ix86_expand_reduc (gen_<code><mode>3, operands[0], operands[1]);\n   DONE;\n })\n \n@@ -5806,30 +5778,10 @@\n   operands[1] = gen_lowpart (V1TImode, operands[1]);\n })\n \n-(define_expand \"<code><mode>3\"\n-  [(set (match_operand:VI124_256 0 \"register_operand\" \"\")\n-\t(umaxmin:VI124_256\n-\t  (match_operand:VI124_256 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:VI124_256 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_AVX2\"\n-  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n-\n-(define_insn \"*avx2_<code><mode>3\"\n-  [(set (match_operand:VI124_256 0 \"register_operand\" \"=x\")\n-\t(umaxmin:VI124_256\n-\t  (match_operand:VI124_256 1 \"nonimmediate_operand\" \"%x\")\n-\t  (match_operand:VI124_256 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_AVX2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"vp<maxmin_int><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"OI\")])\n-\n-(define_insn \"sse2_lshrv1ti3\"\n-  [(set (match_operand:V1TI 0 \"register_operand\" \"=x,x\")\n-\t(lshiftrt:V1TI\n-\t (match_operand:V1TI 1 \"register_operand\" \"0,x\")\n+(define_insn \"<sse2_avx2>_lshr<mode>3\"\n+  [(set (match_operand:VIMAX_AVX2 0 \"register_operand\" \"=x,x\")\n+\t(lshiftrt:VIMAX_AVX2\n+\t (match_operand:VIMAX_AVX2 1 \"register_operand\" \"0,x\")\n \t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n,n\")))]\n   \"TARGET_SSE2\"\n {\n@@ -5851,7 +5803,27 @@\n    (set_attr \"atom_unit\" \"sishuf\")\n    (set_attr \"prefix_data16\" \"1,*\")\n    (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"TI\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_expand \"<code><mode>3\"\n+  [(set (match_operand:VI124_256 0 \"register_operand\" \"\")\n+\t(umaxmin:VI124_256\n+\t  (match_operand:VI124_256 1 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:VI124_256 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_AVX2\"\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n+\n+(define_insn \"*avx2_<code><mode>3\"\n+  [(set (match_operand:VI124_256 0 \"register_operand\" \"=x\")\n+\t(umaxmin:VI124_256\n+\t  (match_operand:VI124_256 1 \"nonimmediate_operand\" \"%x\")\n+\t  (match_operand:VI124_256 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_AVX2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"vp<maxmin_int><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"OI\")])\n \n (define_expand \"<code><mode>3\"\n   [(set (match_operand:VI124_256 0 \"register_operand\" \"\")"}]}