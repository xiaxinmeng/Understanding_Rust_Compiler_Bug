{"sha": "af90c55af0c744a660128a26cafee66b1408ca38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY5MGM1NWFmMGM3NDRhNjYwMTI4YTI2Y2FmZWU2NmIxNDA4Y2EzOA==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2008-08-22T14:37:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-22T14:37:57Z"}, "message": "initialize.c, adaint.c: Use Lock_Task and Unlock_Task for non-blocking spawn.\n\n2008-08-22  Pascal Obry  <obry@adacore.com>\n\n\t* initialize.c, adaint.c: Use Lock_Task and Unlock_Task for non-blocking\n\tspawn.\n\nFrom-SVN: r139476", "tree": {"sha": "21e6f84ee6fb8a709dff9706518d9529b51556c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21e6f84ee6fb8a709dff9706518d9529b51556c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af90c55af0c744a660128a26cafee66b1408ca38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af90c55af0c744a660128a26cafee66b1408ca38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af90c55af0c744a660128a26cafee66b1408ca38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af90c55af0c744a660128a26cafee66b1408ca38/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9"}], "stats": {"total": 64, "additions": 30, "deletions": 34}, "files": [{"sha": "4a87a2b95b563851995e84f284c47f93f94fa63f", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af90c55af0c744a660128a26cafee66b1408ca38/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af90c55af0c744a660128a26cafee66b1408ca38/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=af90c55af0c744a660128a26cafee66b1408ca38", "patch": "@@ -2101,25 +2101,26 @@ __gnat_dup2 (int oldfd, int newfd)\n \n /* Synchronization code, to be thread safe.  */\n \n-static CRITICAL_SECTION plist_cs;\n+#ifdef CERT\n \n-void\n-__gnat_plist_init (void)\n-{\n-  InitializeCriticalSection (&plist_cs);\n-}\n+/* For the Cert run times on native Windows we use dummy functions\n+   for locking and unlocking tasks since we do not support multiple\n+   threads on this configuration (Cert run time on native Windows). */\n \n-static void\n-plist_enter (void)\n-{\n-  EnterCriticalSection (&plist_cs);\n-}\n+void dummy (void) {}\n \n-static void\n-plist_leave (void)\n-{\n-  LeaveCriticalSection (&plist_cs);\n-}\n+void (*Lock_Task) ()   = &dummy;\n+void (*Unlock_Task) () = &dummy;\n+\n+#else\n+\n+#define Lock_Task system__soft_links__lock_task\n+extern void (*Lock_Task) (void);\n+\n+#define Unlock_Task system__soft_links__unlock_task\n+extern void (*Unlock_Task) (void);\n+\n+#endif\n \n typedef struct _process_list\n {\n@@ -2138,16 +2139,16 @@ add_handle (HANDLE h)\n \n   pl = (Process_List *) xmalloc (sizeof (Process_List));\n \n-  plist_enter();\n-\n   /* -------------------- critical section -------------------- */\n+  (*Lock_Task) ();\n+\n   pl->h = h;\n   pl->next = PLIST;\n   PLIST = pl;\n   ++plist_length;\n-  /* -------------------- critical section -------------------- */\n \n-  plist_leave();\n+  (*Unlock_Task) ();\n+  /* -------------------- critical section -------------------- */\n }\n \n static void\n@@ -2156,9 +2157,9 @@ remove_handle (HANDLE h)\n   Process_List *pl;\n   Process_List *prev = NULL;\n \n-  plist_enter();\n-\n   /* -------------------- critical section -------------------- */\n+  (*Lock_Task) ();\n+\n   pl = PLIST;\n   while (pl)\n     {\n@@ -2179,9 +2180,9 @@ remove_handle (HANDLE h)\n     }\n \n   --plist_length;\n-  /* -------------------- critical section -------------------- */\n \n-  plist_leave();\n+  (*Unlock_Task) ();\n+  /* -------------------- critical section -------------------- */\n }\n \n static int\n@@ -2275,11 +2276,12 @@ win32_wait (int *status)\n     }\n \n   k = 0;\n-  plist_enter();\n+\n+  /* -------------------- critical section -------------------- */\n+  (*Lock_Task) ();\n \n   hl_len = plist_length;\n \n-  /* -------------------- critical section -------------------- */\n   hl = (HANDLE *) xmalloc (sizeof (HANDLE) * hl_len);\n \n   pl = PLIST;\n@@ -2288,9 +2290,9 @@ win32_wait (int *status)\n       hl[k++] = pl->h;\n       pl = pl->next;\n     }\n-  /* -------------------- critical section -------------------- */\n \n-  plist_leave();\n+  (*Unlock_Task) ();\n+  /* -------------------- critical section -------------------- */\n \n   res = WaitForMultipleObjects (hl_len, hl, FALSE, INFINITE);\n   h = hl[res - WAIT_OBJECT_0];"}, {"sha": "dd7ba06ade31e815992d8f8cf43f3d2c7e79c8f3", "filename": "gcc/ada/initialize.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af90c55af0c744a660128a26cafee66b1408ca38/gcc%2Fada%2Finitialize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af90c55af0c744a660128a26cafee66b1408ca38/gcc%2Fada%2Finitialize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finitialize.c?ref=af90c55af0c744a660128a26cafee66b1408ca38", "patch": "@@ -76,12 +76,6 @@ __gnat_initialize (void *eh)\n       given that we have set Max_Digits etc with this in mind */\n    __gnat_init_float ();\n \n-#ifndef RTX\n-   /* Initialize a lock for a process handle list - see adaint.c for the\n-      implementation of __gnat_portable_no_block_spawn, __gnat_portable_wait */\n-   __gnat_plist_init();\n-#endif\n-\n    /* Note that we do not activate this for the compiler itself to avoid a\n       bootstrap path problem.  Older version of gnatbind will generate a call\n       to __gnat_initialize() without argument. Therefore we cannot use eh in"}]}