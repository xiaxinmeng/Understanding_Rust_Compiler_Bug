{"sha": "006844a3928510acdacc3bded90136175c85d47f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA2ODQ0YTM5Mjg1MTBhY2RhY2MzYmRlZDkwMTM2MTc1Yzg1ZDQ3Zg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2001-08-21T03:22:26Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2001-08-21T03:22:26Z"}, "message": "basic-block.h (basic_block): Add new field 'flags'.\n\n\n\t* basic-block.h (basic_block): Add new field 'flags'.\n\t(BB_REACHABLE): Define.\n\t(expunge_block): Declare.\n\t* flow.c (ENTRY_BLOCK_PTR): Initialize field 'flags'.\n\t(EXIT_BLOCK_PTR): Ditto.\n\t(expunge_block): Remove static declaration.\n\t(cleanup_cfg): Clear bb->aux on every basic block.\n\t(find_unreachable_blocks): Set BB_REACHABLE bit in bb->flags when\n\tcomputing reachability.\n\t(delete_unreachable_blocks): Delete block b if b->flags has\n\tBB_REACHABLE unset.\n\nFrom-SVN: r45068", "tree": {"sha": "33b8ea537a032be49f69d7e8203822fe994bd812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33b8ea537a032be49f69d7e8203822fe994bd812"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/006844a3928510acdacc3bded90136175c85d47f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/006844a3928510acdacc3bded90136175c85d47f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/006844a3928510acdacc3bded90136175c85d47f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/006844a3928510acdacc3bded90136175c85d47f/comments", "author": null, "committer": null, "parents": [{"sha": "0760faf99d289f21028e54654257433b4f28526b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0760faf99d289f21028e54654257433b4f28526b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0760faf99d289f21028e54654257433b4f28526b"}], "stats": {"total": 58, "additions": 42, "deletions": 16}, "files": [{"sha": "5886158177dccc290e8f7257d8dcc75c2d29f7da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006844a3928510acdacc3bded90136175c85d47f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006844a3928510acdacc3bded90136175c85d47f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=006844a3928510acdacc3bded90136175c85d47f", "patch": "@@ -1,3 +1,17 @@\n+2001-08-20  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* basic-block.h (basic_block): Add new field 'flags'.\n+\t(BB_REACHABLE): Define.\n+\t(expunge_block): Declare.\n+\t* flow.c (ENTRY_BLOCK_PTR): Initialize field 'flags'.\n+\t(EXIT_BLOCK_PTR): Ditto.\n+\t(expunge_block): Remove static declaration.\n+\t(cleanup_cfg): Clear bb->aux on every basic block.\n+\t(find_unreachable_blocks): Set BB_REACHABLE bit in bb->flags when\n+\tcomputing reachability.\n+\t(delete_unreachable_blocks): Delete block b if b->flags has\n+\tBB_REACHABLE unset.\n+\n 2001-08-20  Diego Novillo  <dnovillo@redhat.com>\n \n \t* doc/invoke.texi: Replace references to -fdump-tree with -fdump-ast."}, {"sha": "83c4eb4eb200a14459cc5834da57cff454f62897", "filename": "gcc/basic-block.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006844a3928510acdacc3bded90136175c85d47f/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006844a3928510acdacc3bded90136175c85d47f/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=006844a3928510acdacc3bded90136175c85d47f", "patch": "@@ -218,10 +218,16 @@ typedef struct basic_block_def {\n \n   /* Expected frequency.  Normalized to be in range 0 to BB_FREQ_MAX.  */\n   int frequency;\n+\n+  /* Various flags.  See BB_* below.  */\n+  int flags;\n } *basic_block;\n \n #define BB_FREQ_MAX 10000\n \n+/* Masks for basic_block.flags.  */\n+#define BB_REACHABLE\t\t1\n+\n /* Number of basic blocks in the current function.  */\n \n extern int n_basic_blocks;\n@@ -609,6 +615,7 @@ extern void debug_regset\t\tPARAMS ((regset));\n extern void allocate_reg_life_data      PARAMS ((void));\n extern void allocate_bb_life_data\tPARAMS ((void));\n extern void find_unreachable_blocks\tPARAMS ((void));\n+extern void expunge_block\t\tPARAMS ((basic_block));\n extern void delete_noop_moves\t\tPARAMS ((rtx));\n extern rtx last_loop_beg_note\t\tPARAMS ((rtx));\n extern basic_block redirect_edge_and_branch_force PARAMS ((edge, basic_block));"}, {"sha": "8e0b8133e47f4cbb76a36c9b9ee7392c031e6d07", "filename": "gcc/flow.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006844a3928510acdacc3bded90136175c85d47f/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006844a3928510acdacc3bded90136175c85d47f/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=006844a3928510acdacc3bded90136175c85d47f", "patch": "@@ -208,7 +208,8 @@ struct basic_block_def entry_exit_blocks[2]\n     ENTRY_BLOCK,\t\t/* index */\n     0,\t\t\t\t/* loop_depth */\n     0,\t\t\t\t/* count */\n-    0\t\t\t\t/* frequency */\n+    0,\t\t\t\t/* frequency */\n+    0\t\t\t\t/* flags */\n   },\n   {\n     NULL,\t\t\t/* head */\n@@ -225,7 +226,8 @@ struct basic_block_def entry_exit_blocks[2]\n     EXIT_BLOCK,\t\t\t/* index */\n     0,\t\t\t\t/* loop_depth */\n     0,\t\t\t\t/* count */\n-    0\t\t\t\t/* frequency */\n+    0,\t\t\t\t/* frequency */\n+    0\t\t\t\t/* flags */\n   }\n };\n \n@@ -383,7 +385,6 @@ static void commit_one_edge_insertion\tPARAMS ((edge));\n \n static void delete_unreachable_blocks\tPARAMS ((void));\n static int can_delete_note_p\t\tPARAMS ((rtx));\n-static void expunge_block\t\tPARAMS ((basic_block));\n static int can_delete_label_p\t\tPARAMS ((rtx));\n static int tail_recursion_label_p\tPARAMS ((rtx));\n static int merge_blocks_move_predecessor_nojumps PARAMS ((basic_block,\n@@ -1030,6 +1031,8 @@ void\n cleanup_cfg (mode)\n      int mode;\n {\n+  int i;\n+\n   timevar_push (TV_CLEANUP_CFG);\n   delete_unreachable_blocks ();\n   if (try_optimize_cfg (mode))\n@@ -1040,6 +1043,10 @@ cleanup_cfg (mode)\n   free_EXPR_LIST_list (&label_value_list);\n   free_EXPR_LIST_list (&tail_recursion_label_list);\n   timevar_pop (TV_CLEANUP_CFG);\n+\n+  /* Clear bb->aux on all basic blocks.  */\n+  for (i = 0; i < n_basic_blocks; ++i)\n+    BASIC_BLOCK (i)->aux = NULL;\n }\n \n /* Create a new basic block consisting of the instructions between\n@@ -2643,8 +2650,9 @@ flow_call_edges_add (blocks)\n   return blocks_split;\n }\n \f\n-/* Find unreachable blocks.  An unreachable block will have NULL in\n-   block->aux, a non-NULL value indicates the block is reachable.  */\n+/* Find unreachable blocks.  An unreachable block will have 0 in\n+   the reachable bit in block->flags.  A non-zero value indicates the\n+   block is reachable.  */\n \n void\n find_unreachable_blocks ()\n@@ -2656,10 +2664,10 @@ find_unreachable_blocks ()\n   n = n_basic_blocks;\n   tos = worklist = (basic_block *) xmalloc (sizeof (basic_block) * n);\n \n-  /* Use basic_block->aux as a marker.  Clear them all.  */\n+  /* Clear all the reachability flags.  */\n \n   for (i = 0; i < n; ++i)\n-    BASIC_BLOCK (i)->aux = NULL;\n+    BASIC_BLOCK (i)->flags &= ~BB_REACHABLE;\n \n   /* Add our starting points to the worklist.  Almost always there will\n      be only one.  It isn't inconcievable that we might one day directly\n@@ -2669,8 +2677,8 @@ find_unreachable_blocks ()\n     {\n       *tos++ = e->dest;\n \n-      /* Mark the block with a handy non-null value.  */\n-      e->dest->aux = e;\n+      /* Mark the block reachable.  */\n+      e->dest->flags |= BB_REACHABLE;\n     }\n \n   /* Iterate: find everything reachable from what we've already seen.  */\n@@ -2680,10 +2688,10 @@ find_unreachable_blocks ()\n       basic_block b = *--tos;\n \n       for (e = b->succ; e; e = e->succ_next)\n-\tif (!e->dest->aux)\n+\tif (!(e->dest->flags & BB_REACHABLE))\n \t  {\n \t    *tos++ = e->dest;\n-\t    e->dest->aux = e;\n+\t    e->dest->flags |= BB_REACHABLE;\n \t  }\n     }\n \n@@ -2706,10 +2714,7 @@ delete_unreachable_blocks ()\n     {\n       basic_block b = BASIC_BLOCK (i);\n \n-      if (b->aux != NULL)\n-\t/* This block was found.  Tidy up the mark.  */\n-\tb->aux = NULL;\n-      else\n+      if (!(b->flags & BB_REACHABLE))\n \tflow_delete_block (b);\n     }\n \n@@ -2845,7 +2850,7 @@ flow_delete_block (b)\n \n /* Remove block B from the basic block array and compact behind it.  */\n \n-static void\n+void\n expunge_block (b)\n      basic_block b;\n {"}]}