{"sha": "9ac9fde961f76879f0379ff3b2494a2f9ac915f7", "node_id": "C_kwDOANBUbNoAKDlhYzlmZGU5NjFmNzY4NzlmMDM3OWZmM2IyNDk0YTJmOWFjOTE1Zjc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-17T06:18:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-17T06:18:24Z"}, "message": "reassoc: Fix up recent regression in optimize_range_tests_cmp_bitwise [PR106958]\n\nAs the following testcase reduced from glibc fmtmsg.c shows\n(it doesn't ICE on x86_64/i686 unfortunately, but does on various other\narches), my last optimize_range_tests_cmp_bitwise change wasn't fully\ncorrect.  The intent was to let all pointer operands be cast to\npointer_sized_int_node first in addition to the other casts (to type1)\nwhich are done for id >= l cases.\nBut one spot I've touched used always cast to type1 (note, the (b % 4) == 3\ncase is impossible for pointer operands because that is for !TYPE_UNSIGNED\noperands and pointers are TYPE_UNSIGNED) and in the other spot the cast\nwould be done only for id >= l if not useless, but for pointers we need\nto cast it always.\n\n2022-09-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/106958\n\t* tree-ssa-reassoc.cc (optimize_range_tests_cmp_bitwise): If\n\tid >= l, cast op to type1, otherwise to pointer_sized_int_node.\n\tIf type has pointer type, cast exp to pointer_sized_int_node\n\teven when id < l.\n\n\t* gcc.c-torture/compile/pr106958.c: New test.", "tree": {"sha": "7acab99b000e17f41620f94f5b35156643a340fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7acab99b000e17f41620f94f5b35156643a340fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ac9fde961f76879f0379ff3b2494a2f9ac915f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac9fde961f76879f0379ff3b2494a2f9ac915f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac9fde961f76879f0379ff3b2494a2f9ac915f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac9fde961f76879f0379ff3b2494a2f9ac915f7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ee0fa100f0f28d7b88237d520131e07b7b49f0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee0fa100f0f28d7b88237d520131e07b7b49f0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ee0fa100f0f28d7b88237d520131e07b7b49f0a"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "98e6554c7367d87c3d1010b6edc9415f62fe3a58", "filename": "gcc/testsuite/gcc.c-torture/compile/pr106958.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac9fde961f76879f0379ff3b2494a2f9ac915f7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr106958.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac9fde961f76879f0379ff3b2494a2f9ac915f7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr106958.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr106958.c?ref=9ac9fde961f76879f0379ff3b2494a2f9ac915f7", "patch": "@@ -0,0 +1,13 @@\n+/* PR tree-optimization/106958 */\n+\n+int a;\n+void bar (int);\n+\n+void\n+foo (char *x, char *y)\n+{\n+  int b = a != 0;\n+  int c = x != 0;\n+  int d = y != 0;\n+  bar (b | c | d);\n+}"}, {"sha": "c5c8b680c99a427b17032316218d33c672ac3684", "filename": "gcc/tree-ssa-reassoc.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac9fde961f76879f0379ff3b2494a2f9ac915f7/gcc%2Ftree-ssa-reassoc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac9fde961f76879f0379ff3b2494a2f9ac915f7/gcc%2Ftree-ssa-reassoc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.cc?ref=9ac9fde961f76879f0379ff3b2494a2f9ac915f7", "patch": "@@ -3680,15 +3680,18 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n \t    if (id == l || POINTER_TYPE_P (TREE_TYPE (op)))\n \t      {\n \t\tcode = (b % 4) == 3 ? BIT_NOT_EXPR : NOP_EXPR;\n-\t\tg = gimple_build_assign (make_ssa_name (type1), code, op);\n+\t\ttree type3 = id >= l ? type1 : pointer_sized_int_node;\n+\t\tg = gimple_build_assign (make_ssa_name (type3), code, op);\n \t\tgimple_seq_add_stmt_without_update (&seq, g);\n \t\top = gimple_assign_lhs (g);\n \t      }\n \t    tree type = TREE_TYPE (r->exp);\n \t    tree exp = r->exp;\n-\t    if (id >= l && !useless_type_conversion_p (type1, type))\n+\t    if (POINTER_TYPE_P (type)\n+\t\t|| (id >= l && !useless_type_conversion_p (type1, type)))\n \t      {\n-\t\tg = gimple_build_assign (make_ssa_name (type1), NOP_EXPR, exp);\n+\t\ttree type3 = id >= l ? type1 : pointer_sized_int_node;\n+\t\tg = gimple_build_assign (make_ssa_name (type3), NOP_EXPR, exp);\n \t\tgimple_seq_add_stmt_without_update (&seq, g);\n \t\texp = gimple_assign_lhs (g);\n \t      }"}]}