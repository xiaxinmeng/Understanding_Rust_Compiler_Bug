{"sha": "891a2e42599a554e074f3c9e5fde54cce4795ed9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkxYTJlNDI1OTlhNTU0ZTA3NGYzYzllNWZkZTU0Y2NlNDc5NWVkOQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-07-07T10:14:02Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-07-07T10:14:02Z"}, "message": "re PR libmudflap/49550 (Many libmudflap tests fail on Solaris 11/x86)\n\n\tgcc:\n\tPR libmudflap/49550\n\t* gcc.c (MFWRAP_SPEC): Also wrap mmap64.\n\n\tlibmudflap:\n\tPR libmudflap/49550\n\t* mf-runtime.c (__wrap_main) [__sun__ && __svr4__]: Don't register\n\tstdin, stdout, stderr.\n\tRegister __ctype, __ctype_mask.\n\n\t* configure.ac: Check for mmap64.\n\tCheck for rawmemchr, stpcpy, mempcpy.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\t* mf-hooks1.c [HAVE_MMAP64] (__mf_0fn_mmap64): New function.\n\t(mmap64): New wrapper function.\n\t* mf-impl.h (__mf_dynamic_index) [HAVE_MMAP64]: Add dyn_mmap64.\n\t* mf-runtime.c (__mf_dynamic) [HAVE_MMAP64]: Handle mmap64.\n\n\t* mf-hooks2.c [HAVE_GETMNTENT && HAVE_SYS_MNTTAB_H]: Implement\n\tgetmntent wrapper.\n\n\t* mf-hooks3.c (_REENTRANT): Define.\n\n\t* testsuite/libmudflap.c/heap-scalestress.c (SCALE): Reduce to 10000.\n\n\t* testsuite/libmudflap.c/pass-stratcliff.c: Include ../config.h.\n\t(MIN): Define.\n\tUse HAVE_RAWMEMCHR, HAVE_STPCPY, HAVE_MEMPCPY as guards.\n\n\t* testsuite/libmudflap.c/pass47-frag.c: Expect __ctype warning on\n\t*-*-solaris2.*.\n\nFrom-SVN: r175961", "tree": {"sha": "dabd723386297a21ecafc7c91d84abf760884544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dabd723386297a21ecafc7c91d84abf760884544"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/891a2e42599a554e074f3c9e5fde54cce4795ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891a2e42599a554e074f3c9e5fde54cce4795ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/891a2e42599a554e074f3c9e5fde54cce4795ed9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891a2e42599a554e074f3c9e5fde54cce4795ed9/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8384ac41e6036d9055c6a1725546eced5d479ec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8384ac41e6036d9055c6a1725546eced5d479ec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8384ac41e6036d9055c6a1725546eced5d479ec8"}], "stats": {"total": 218, "additions": 205, "deletions": 13}, "files": [{"sha": "22e3269a3c552c832d9f4651b9f06e4599c910ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a2e42599a554e074f3c9e5fde54cce4795ed9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a2e42599a554e074f3c9e5fde54cce4795ed9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=891a2e42599a554e074f3c9e5fde54cce4795ed9", "patch": "@@ -1,3 +1,8 @@\n+2011-07-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR libmudflap/49550\n+\t* gcc.c (MFWRAP_SPEC): Also wrap mmap64.\n+\n 2011-07-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/39150"}, {"sha": "235c54c134704d28c7bbbaeccb7067fa8caea23b", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a2e42599a554e074f3c9e5fde54cce4795ed9/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a2e42599a554e074f3c9e5fde54cce4795ed9/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=891a2e42599a554e074f3c9e5fde54cce4795ed9", "patch": "@@ -518,7 +518,7 @@ proper position among the other output files.  */\n /* XXX: should exactly match hooks provided by libmudflap.a */\n #define MFWRAP_SPEC \" %{static: %{fmudflap|fmudflapth: \\\n  --wrap=malloc --wrap=free --wrap=calloc --wrap=realloc\\\n- --wrap=mmap --wrap=munmap --wrap=alloca\\\n+ --wrap=mmap --wrap=mmap64 --wrap=munmap --wrap=alloca\\\n } %{fmudflapth: --wrap=pthread_create\\\n }} %{fmudflap|fmudflapth: --wrap=main}\"\n #endif"}, {"sha": "d755ddb349acee58ccec535534aa8c2afe9975b7", "filename": "libmudflap/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FChangeLog?ref=891a2e42599a554e074f3c9e5fde54cce4795ed9", "patch": "@@ -1,3 +1,33 @@\n+2011-07-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR libmudflap/49550\n+\t* mf-runtime.c (__wrap_main) [__sun__ && __svr4__]: Don't register\n+\tstdin, stdout, stderr.\n+\tRegister __ctype, __ctype_mask.\n+\n+\t* configure.ac: Check for mmap64.\n+\tCheck for rawmemchr, stpcpy, mempcpy.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* mf-hooks1.c [HAVE_MMAP64] (__mf_0fn_mmap64): New function.\n+\t(mmap64): New wrapper function.\n+\t* mf-impl.h (__mf_dynamic_index) [HAVE_MMAP64]: Add dyn_mmap64.\n+\t* mf-runtime.c (__mf_dynamic) [HAVE_MMAP64]: Handle mmap64.\n+\n+\t* mf-hooks2.c [HAVE_GETMNTENT && HAVE_SYS_MNTTAB_H]: Implement\n+\tgetmntent wrapper.\n+\n+\t* mf-hooks3.c (_REENTRANT): Define.\n+\n+\t* testsuite/libmudflap.c/heap-scalestress.c (SCALE): Reduce to 10000.\n+\n+\t* testsuite/libmudflap.c/pass-stratcliff.c: Include ../config.h.\n+\t(MIN): Define.\n+\tUse HAVE_RAWMEMCHR, HAVE_STPCPY, HAVE_MEMPCPY as guards.\n+\n+\t* testsuite/libmudflap.c/pass47-frag.c: Expect __ctype warning on\n+\t*-*-solaris2.*.\n+\n 2011-07-01  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR libmudflap/49549"}, {"sha": "9e4e1910dfee034978daeccc8df8619507ddb468", "filename": "libmudflap/config.h.in", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fconfig.h.in?ref=891a2e42599a554e074f3c9e5fde54cce4795ed9", "patch": "@@ -126,18 +126,27 @@\n /* Define to 1 if you have the `dl' library (-ldl). */\n #undef HAVE_LIBDL\n \n+/* Define to 1 if you have the `socket' library (-lsocket). */\n+#undef HAVE_LIBSOCKET\n+\n /* Define to 1 if you have the `memmem' function. */\n #undef HAVE_MEMMEM\n \n /* Define to 1 if you have the <memory.h> header file. */\n #undef HAVE_MEMORY_H\n \n+/* Define to 1 if you have the `mempcpy' function. */\n+#undef HAVE_MEMPCPY\n+\n /* Define to 1 if you have the `memrchr' function. */\n #undef HAVE_MEMRCHR\n \n /* Define to 1 if you have the `mmap' function. */\n #undef HAVE_MMAP\n \n+/* Define to 1 if you have the `mmap64' function. */\n+#undef HAVE_MMAP64\n+\n /* Define to 1 if you have the <mntent.h> header file. */\n #undef HAVE_MNTENT_H\n \n@@ -156,6 +165,9 @@\n /* Define to 1 if you have the <pwd.h> header file. */\n #undef HAVE_PWD_H\n \n+/* Define to 1 if you have the `rawmemchr' function. */\n+#undef HAVE_RAWMEMCHR\n+\n /* Define to 1 if you have the `setbuf' function. */\n #undef HAVE_SETBUF\n \n@@ -192,6 +204,9 @@\n /* Define to 1 if you have the <stdlib.h> header file. */\n #undef HAVE_STDLIB_H\n \n+/* Define to 1 if you have the `stpcpy' function. */\n+#undef HAVE_STPCPY\n+\n /* Define to 1 if you have the <strings.h> header file. */\n #undef HAVE_STRINGS_H\n "}, {"sha": "d2b9418793280e07fe210ed8f52a475a02659f43", "filename": "libmudflap/configure", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fconfigure?ref=891a2e42599a554e074f3c9e5fde54cce4795ed9", "patch": "@@ -4455,6 +4455,17 @@ _ACEOF\n fi\n done\n \n+for ac_func in mmap64\n+do :\n+  ac_fn_c_check_func \"$LINENO\" \"mmap64\" \"ac_cv_func_mmap64\"\n+if test \"x$ac_cv_func_mmap64\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_MMAP64 1\n+_ACEOF\n+\n+fi\n+done\n+\n for ac_func in __libc_freeres\n do :\n   ac_fn_c_check_func \"$LINENO\" \"__libc_freeres\" \"ac_cv_func___libc_freeres\"\n@@ -4466,6 +4477,19 @@ _ACEOF\n fi\n done\n \n+for ac_func in rawmemchr stpcpy mempcpy\n+do :\n+  as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n+ac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\"\n+eval as_val=\\$$as_ac_var\n+   if test \"x$as_val\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define `$as_echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n+done\n+\n \n cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n@@ -10583,7 +10607,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10586 \"configure\"\n+#line 10610 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10689,7 +10713,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10692 \"configure\"\n+#line 10716 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "f8b99955743a047ed18fd9dbed6d9aa4dcf124de", "filename": "libmudflap/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fconfigure.ac?ref=891a2e42599a554e074f3c9e5fde54cce4795ed9", "patch": "@@ -75,7 +75,9 @@ AC_CHECK_FUNCS(getservent getservbyname getservbyport getaddrinfo gai_strerror)\n AC_CHECK_FUNCS(getprotoent getprotobyname getprotobynumber)\n AC_CHECK_FUNCS(getmntent setmntent addmntent)\n AC_CHECK_FUNCS(inet_ntoa mmap munmap)\n+AC_CHECK_FUNCS(mmap64)\n AC_CHECK_FUNCS(__libc_freeres)\n+AC_CHECK_FUNCS(rawmemchr stpcpy mempcpy)\n \n AC_TRY_COMPILE([#include <sys/types.h>\n #include <sys/ipc.h>"}, {"sha": "3dd332e12c6b8ced877e7063eccb84f82e6b9699", "filename": "libmudflap/mf-hooks1.c", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Fmf-hooks1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Fmf-hooks1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-hooks1.c?ref=891a2e42599a554e074f3c9e5fde54cce4795ed9", "patch": "@@ -1,5 +1,5 @@\n /* Mudflap: narrow-pointer bounds-checking by tree rewriting.\n-   Copyright (C) 2002, 2003, 2004, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Frank Ch. Eigler <fche@redhat.com>\n    and Graydon Hoare <graydon@redhat.com>\n \n@@ -414,6 +414,61 @@ WRAPPER(int , munmap, void *start, size_t length)\n #endif /* HAVE_MMAP */\n \n \n+#ifdef HAVE_MMAP64\n+#if PIC\n+/* A special bootstrap variant. */\n+void *\n+__mf_0fn_mmap64 (void *start, size_t l, int prot, int f, int fd, off64_t off)\n+{\n+  return (void *) -1;\n+}\n+#endif\n+\n+\n+#undef mmap\n+WRAPPER(void *, mmap64,\n+\tvoid  *start,  size_t length, int prot,\n+\tint flags, int fd, off64_t offset)\n+{\n+  DECLARE(void *, mmap64, void *, size_t, int,\n+\t\t\t    int, int, off64_t);\n+  void *result;\n+  BEGIN_PROTECT (mmap64, start, length, prot, flags, fd, offset);\n+\n+  result = CALL_REAL (mmap64, start, length, prot,\n+\t\t\tflags, fd, offset);\n+\n+  /*\n+  VERBOSE_TRACE (\"mmap64 (%08lx, %08lx, ...) => %08lx\\n\",\n+\t\t (uintptr_t) start, (uintptr_t) length,\n+\t\t (uintptr_t) result);\n+  */\n+\n+  if (result != (void *)-1)\n+    {\n+      /* Register each page as a heap object.  Why not register it all\n+\t as a single segment?  That's so that a later munmap() call\n+\t can unmap individual pages.  XXX: would __MF_TYPE_GUESS make\n+\t this more automatic?  */\n+      size_t ps = getpagesize ();\n+      uintptr_t base = (uintptr_t) result;\n+      uintptr_t offset;\n+\n+      for (offset=0; offset<length; offset+=ps)\n+\t{\n+\t  /* XXX: We could map PROT_NONE to __MF_TYPE_NOACCESS. */\n+\t  /* XXX: Unaccessed HEAP pages are reported as leaks.  Is this\n+\t     appropriate for unaccessed mmap pages? */\n+\t  __mf_register ((void *) CLAMPADD (base, offset), ps,\n+\t\t\t __MF_TYPE_HEAP_I, \"mmap64 page\");\n+\t}\n+    }\n+\n+  return result;\n+}\n+#endif /* HAVE_MMAP64 */\n+\n+\n /* This wrapper is a little different, as it's called indirectly from\n    __mf_fini also to clean up pending allocations.  */\n void *"}, {"sha": "c030e694035bcaa151f9fa205211d01cb0ab8134", "filename": "libmudflap/mf-hooks2.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Fmf-hooks2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Fmf-hooks2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-hooks2.c?ref=891a2e42599a554e074f3c9e5fde54cce4795ed9", "patch": "@@ -2102,7 +2102,42 @@ WRAPPER2(struct mntent *, getmntent, FILE *filep)\n   return m;\n }\n #elif defined HAVE_SYS_MNTTAB_H\n-/* FIXME: Implement.  */\n+WRAPPER2(int, getmntent, FILE *filep, struct mnttab *mp)\n+{\n+  static struct mnttab *last = NULL;\n+  int res;\n+\n+  MF_VALIDATE_EXTENT (filep, sizeof (*filep), __MF_CHECK_WRITE,\n+    \"getmntent stream\");\n+#define UR(field) __mf_unregister(last->field, strlen (last->field)+1, __MF_TYPE_STATIC)\n+  if (last)\n+    {\n+      UR (mnt_special);\n+      UR (mnt_mountp);\n+      UR (mnt_fstype);\n+      UR (mnt_mntopts);\n+      UR (mnt_time);\n+      __mf_unregister (last, sizeof (*last), __MF_TYPE_STATIC);\n+    }\n+#undef UR\n+\n+  res = getmntent (filep, mp);\n+  last = mp;\n+\n+#define R(field) __mf_register(last->field, strlen (last->field)+1, __MF_TYPE_STATIC, \"mntent \" #field)\n+  if (mp)\n+    {\n+      R (mnt_special);\n+      R (mnt_mountp);\n+      R (mnt_fstype);\n+      R (mnt_mntopts);\n+      R (mnt_time);\n+      __mf_register (last, sizeof (*last), __MF_TYPE_STATIC, \"getmntent result\");\n+    }\n+#undef R\n+\n+  return res;\n+}\n #endif\n #endif\n "}, {"sha": "3a26224d7fb69fb20ad94048faeeadf0cb6189d2", "filename": "libmudflap/mf-hooks3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Fmf-hooks3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Fmf-hooks3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-hooks3.c?ref=891a2e42599a554e074f3c9e5fde54cce4795ed9", "patch": "@@ -1,5 +1,5 @@\n /* Mudflap: narrow-pointer bounds-checking by tree rewriting.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2009\n+   Copyright (C) 2002, 2003, 2004, 2005, 2009, 2011\n    Free Software Foundation, Inc.\n    Contributed by Frank Ch. Eigler <fche@redhat.com>\n    and Graydon Hoare <graydon@redhat.com>\n@@ -44,6 +44,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define _ALL_SOURCE\n #define _LARGE_FILE_API\n #define _XOPEN_SOURCE_EXTENDED 1\n+#define _REENTRANT\n \n #include <string.h>\n #include <stdio.h>"}, {"sha": "865079c239fc8c8a204a6a0419b3a32ca41360d2", "filename": "libmudflap/mf-impl.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Fmf-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Fmf-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-impl.h?ref=891a2e42599a554e074f3c9e5fde54cce4795ed9", "patch": "@@ -1,6 +1,6 @@\n /* Implementation header for mudflap runtime library.\n    Mudflap: narrow-pointer bounds-checking by tree rewriting.\n-   Copyright (C) 2002, 2003, 2004, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Frank Ch. Eigler <fche@redhat.com>\n    and Graydon Hoare <graydon@redhat.com>\n \n@@ -212,6 +212,9 @@ extern struct __mf_dynamic_entry __mf_dynamic[];\n enum __mf_dynamic_index\n {\n   dyn_calloc, dyn_free, dyn_malloc, dyn_mmap,\n+#ifdef HAVE_MMAP64\n+  dyn_mmap64,\n+#endif\n   dyn_munmap, dyn_realloc,\n   dyn_INITRESOLVE,  /* Marker for last init-time resolution. */\n #ifdef LIBMUDFLAPTH"}, {"sha": "1036ccc93db01b9203015ab537e1a48cef0ed7d4", "filename": "libmudflap/mf-runtime.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Fmf-runtime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Fmf-runtime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-runtime.c?ref=891a2e42599a554e074f3c9e5fde54cce4795ed9", "patch": "@@ -666,6 +666,9 @@ struct __mf_dynamic_entry __mf_dynamic [] =\n   {NULL, \"free\", NULL},\n   {NULL, \"malloc\", NULL},\n   {NULL, \"mmap\", NULL},\n+#ifdef HAVE_MMAP64\n+  {NULL, \"mmap64\", NULL},\n+#endif\n   {NULL, \"munmap\", NULL},\n   {NULL, \"realloc\", NULL},\n   {NULL, \"DUMMY\", NULL}, /* dyn_INITRESOLVE */\n@@ -781,12 +784,22 @@ __wrap_main (int argc, char* argv[])\n \n       __mf_register (& errno, sizeof (errno), __MF_TYPE_STATIC, \"errno area\");\n \n+#if !(defined(__sun__) && defined(__svr4__))\n+      /* Conflicts with the automatic registration of __iob[].  */\n       __mf_register (stdin,  sizeof (*stdin),  __MF_TYPE_STATIC, \"stdin\");\n       __mf_register (stdout, sizeof (*stdout), __MF_TYPE_STATIC, \"stdout\");\n       __mf_register (stderr, sizeof (*stderr), __MF_TYPE_STATIC, \"stderr\");\n+#endif\n \n       /* Make some effort to register ctype.h static arrays.  */\n-      /* XXX: e.g., on Solaris, may need to register __ctype, _ctype, __ctype_mask, __toupper, etc. */\n+#if defined(__sun__) && defined(__svr4__)\n+      /* __ctype[] is declared without size, but MB_CUR_MAX is the last\n+\t member.  There seems to be no proper way to determine the size.  */\n+      __mf_register (__ctype, &MB_CUR_MAX - &__ctype[0] + 1, __MF_TYPE_STATIC, \"__ctype\");\n+      /* __ctype_mask points at _C_masks[1].  The size can only determined\n+\t using nm on libc.so.1.  */\n+      __mf_register (__ctype_mask - 1, 1028, __MF_TYPE_STATIC, \"_C_masks\");\n+#endif\n       /* On modern Linux GLIBC, these are thread-specific and changeable, and are dealt\n          with in mf-hooks2.c.  */\n     }"}, {"sha": "6e7813ba2aca0b976c13367e632e6fee78419d24", "filename": "libmudflap/testsuite/libmudflap.c/heap-scalestress.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fheap-scalestress.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fheap-scalestress.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fheap-scalestress.c?ref=891a2e42599a554e074f3c9e5fde54cce4795ed9", "patch": "@@ -8,7 +8,7 @@\n #include <unistd.h>\n \n #ifndef SCALE\n-#define SCALE 100000\n+#define SCALE 10000\n #endif\n \n "}, {"sha": "cf5430657ff949dba2052e937359e1f9282076fd", "filename": "libmudflap/testsuite/libmudflap.c/pass-stratcliff.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass-stratcliff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass-stratcliff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass-stratcliff.c?ref=891a2e42599a554e074f3c9e5fde54cce4795ed9", "patch": "@@ -1,5 +1,6 @@\n /* Test for string function add boundaries of usable memory.\n-   Copyright (C) 1996,1997,1999,2000,2001,2002 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1999, 2000, 2001, 2002, 2011\n+   Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1996.\n \n@@ -25,6 +26,8 @@\n    test the real implementation.  */\n #undef __USE_STRING_INLINES\n \n+#include \"../config.h\"\n+\n #include <errno.h>\n #include <stdio.h>\n #include <string.h>\n@@ -36,6 +39,10 @@\n #define MAX(a, b) ((a) > (b) ? (a) : (b))\n #endif\n \n+#ifndef MIN\n+#define MIN(a, b) ((a) < (b) ? (a) : (b))\n+#endif\n+\n int\n main (int argc, char *argv[])\n {\n@@ -153,7 +160,7 @@ main (int argc, char *argv[])\n \t    }\n         }\n \n-#if !defined  __FreeBSD__ && !(defined __sun__ && defined __svr4__)\n+#ifdef HAVE_RAWMEMCHR\n       /* rawmemchr test */\n       for (outer = size - 1; outer >= MAX (0, size - 128); --outer)\n         {\n@@ -250,7 +257,7 @@ main (int argc, char *argv[])\n \t    }\n         }\n \n-#ifndef __FreeBSD__ && !(defined __sun__ && defined __svr4__)\n+#ifdef HAVE_STPCPY\n       /* stpcpy test */\n       for (outer = size - 1; outer >= MAX (0, size - 128); --outer)\n         {\n@@ -302,7 +309,7 @@ main (int argc, char *argv[])\n \t      result = 1;\n \t    }\n \n-#if !defined __FreeBSD__ && !(defined __sun__ && defined __svr4__)\n+#ifdef HAVE_MEMPCPY\n       /* mempcpy test */\n       for (outer = size - 1; outer >= MAX (0, size - 128); --outer)\n \tfor (inner = 0; inner < size - outer; ++inner)"}, {"sha": "71175827209f9521415057ab5ace9f76cf66c4de", "filename": "libmudflap/testsuite/libmudflap.c/pass47-frag.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass47-frag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891a2e42599a554e074f3c9e5fde54cce4795ed9/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass47-frag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass47-frag.c?ref=891a2e42599a554e074f3c9e5fde54cce4795ed9", "patch": "@@ -8,3 +8,5 @@ int main ()\n              tolower (buf[4]) == 'o' && tolower ('X') == 'x' &&\n              isdigit (buf[3])) == 0 && isalnum ('4'));\n }\n+\n+/* { dg-warning \"cannot track unknown size extern .__ctype.\" \"Solaris __ctype declared without size\" { target *-*-solaris2.* } 0 } */"}]}