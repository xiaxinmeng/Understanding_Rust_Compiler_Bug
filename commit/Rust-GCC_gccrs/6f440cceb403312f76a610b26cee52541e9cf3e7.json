{"sha": "6f440cceb403312f76a610b26cee52541e9cf3e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY0NDBjY2ViNDAzMzEyZjc2YTYxMGIyNmNlZTUyNTQxZTljZjNlNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-07-15T12:00:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-07-15T12:00:18Z"}, "message": "printers.py (SingleObjContainerPrinter): New base class for experimental::any and experimental::optional printers.\n\n\t* python/libstdcxx/v6/printers.py (SingleObjContainerPrinter): New\n\tbase class for experimental::any and experimental::optional printers.\n\t(StdExpAnyPrinter, StdExpOptionalPrinter, StdExpStringViewPrinter):\n\tNew printers for Fundamentals TS types.\n\t* testsuite/libstdc++-prettyprinters/libfundts.cc: New.\n\nFrom-SVN: r212556", "tree": {"sha": "5464d3c9a5c218281fb459067905bd8df4505194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5464d3c9a5c218281fb459067905bd8df4505194"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f440cceb403312f76a610b26cee52541e9cf3e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f440cceb403312f76a610b26cee52541e9cf3e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f440cceb403312f76a610b26cee52541e9cf3e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f440cceb403312f76a610b26cee52541e9cf3e7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "077aa95ec765641f315f5d3d032f43f2e31402d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077aa95ec765641f315f5d3d032f43f2e31402d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/077aa95ec765641f315f5d3d032f43f2e31402d8"}], "stats": {"total": 206, "additions": 204, "deletions": 2}, "files": [{"sha": "32de8825ae546fd9e46491eb749683b320c28914", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f440cceb403312f76a610b26cee52541e9cf3e7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f440cceb403312f76a610b26cee52541e9cf3e7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6f440cceb403312f76a610b26cee52541e9cf3e7", "patch": "@@ -6,6 +6,12 @@\n \tand other class templates with default template arguments.\n \t* testsuite/libstdc++-prettyprinters/whatis.cc: Test new recognizers.\n \n+\t* python/libstdcxx/v6/printers.py (SingleObjContainerPrinter): New\n+\tbase class for experimental::any and experimental::optional printers.\n+\t(StdExpAnyPrinter, StdExpOptionalPrinter, StdExpStringViewPrinter):\n+\tNew printers for Fundamentals TS types.\n+\t* testsuite/libstdc++-prettyprinters/libfundts.cc: New.\n+\n 2014-07-15  Tim Shen  <timshen@google.com>\n \n \tPR libstdc++/61720"}, {"sha": "af41f1ffaeb443b357e05414c7772955a2fa51d9", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 129, "deletions": 2, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f440cceb403312f76a610b26cee52541e9cf3e7/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f440cceb403312f76a610b26cee52541e9cf3e7/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=6f440cceb403312f76a610b26cee52541e9cf3e7", "patch": "@@ -836,6 +836,126 @@ def to_string(self):\n             return 'empty %s' % (self.typename)\n         return '%s' % (self.typename)\n \n+class SingleObjContainerPrinter(object):\n+    \"Base class for printers of containers of single objects\"\n+\n+    def __init__ (self, val, viz):\n+        self.contained_value = val\n+        self.visualizer = viz\n+\n+    def _recognize(self, type):\n+        \"\"\"Return TYPE as a string after applying type printers\"\"\"\n+        return gdb.types.apply_type_recognizers(gdb.types.get_type_recognizers(),\n+                                                type) or str(type)\n+\n+    class _contained:\n+        def __init__ (self, val):\n+            self.val = val\n+\n+        def __iter__ (self):\n+            return self\n+\n+        def next (self):\n+            if self.val is None:\n+                raise StopIteration\n+            retval = self.val\n+            self.val = None\n+            return ('[contained value]', retval)\n+\n+    def children (self):\n+        if self.contained_value is None:\n+            return self._contained (None)\n+        if hasattr (self.visualizer, 'children'):\n+            return self.visualizer.children ()\n+        return self._contained (self.contained_value)\n+\n+    def display_hint (self):\n+        # if contained value is a map we want to display in the same way\n+        if hasattr (self.visualizer, 'children') and hasattr (self.visualizer, 'display_hint'):\n+            return self.visualizer.display_hint ()\n+        return None\n+\n+\n+class StdExpAnyPrinter(SingleObjContainerPrinter):\n+    \"Print a std::experimental::any\"\n+\n+    def __init__ (self, typename, val):\n+        self.typename = 'std::experimental::any'\n+        self.val = val\n+        self.contained_type = None\n+        contained_value = None\n+        visualizer = None\n+        mgr = self.val['_M_manager']\n+        if mgr != 0:\n+            func = gdb.block_for_pc(int(mgr.cast(gdb.lookup_type('intptr_t'))))\n+            if not func:\n+                raise ValueError(\"Invalid function pointer in std::experimental::any\")\n+            rx = r\"\"\"({0}::_Manager_\\w+<.*>)::_S_manage\\({0}::_Op, {0} const\\*, {0}::_Arg\\*\\)\"\"\".format(typename)\n+            m = re.match(rx, func.function.name)\n+            if not m:\n+                raise ValueError(\"Unknown manager function in std::experimental::any\")\n+\n+            # FIXME need to expand 'std::string' so that gdb.lookup_type works\n+            mgrname = re.sub(\"std::string(?!\\w)\", gdb.lookup_type('std::string').strip_typedefs().name, m.group(1))\n+            mgrtype = gdb.lookup_type(mgrname)\n+            self.contained_type = mgrtype.template_argument(0)\n+            valptr = None\n+            if '::_Manager_internal' in mgrname:\n+                valptr = self.val['_M_storage']['_M_buffer'].address\n+            elif '::_Manager_external' in mgrname:\n+                valptr = self.val['_M_storage']['_M_ptr']\n+            elif '::_Manager_alloc' in mgrname:\n+                datatype = gdb.lookup_type(mgrname + '::_Data')\n+                valptr = self.val['_M_storage']['_M_ptr'].cast(datatype.pointer())\n+                valptr = valptr.dereference()['_M_data'].address\n+            else:\n+                raise ValueError(\"Unknown manager function in std::experimental::any\")\n+            contained_value = valptr.cast(self.contained_type.pointer()).dereference()\n+            visualizer = gdb.default_visualizer(contained_value)\n+        super(StdExpAnyPrinter, self).__init__ (contained_value, visualizer)\n+\n+    def to_string (self):\n+        if self.contained_type is None:\n+            return '%s [no contained value]' % self.typename\n+        desc = \"%s containing \" % self.typename\n+        if hasattr (self.visualizer, 'children'):\n+            return desc + self.visualizer.to_string ()\n+        valtype = self._recognize (self.contained_type)\n+        return desc + valtype\n+\n+class StdExpOptionalPrinter(SingleObjContainerPrinter):\n+    \"Print a std::experimental::optional\"\n+\n+    def __init__ (self, typename, val):\n+        valtype = self._recognize (val.type.template_argument(0))\n+        self.typename = \"std::experimental::optional<%s>\" % valtype\n+        self.val = val\n+        contained_value = val['_M_payload'] if self.val['_M_engaged'] else None\n+        visualizer = gdb.default_visualizer (val['_M_payload'])\n+        super (StdExpOptionalPrinter, self).__init__ (contained_value, visualizer)\n+\n+    def to_string (self):\n+        if self.contained_value is None:\n+            return self.typename + \" [no contained value]\"\n+        if hasattr (self.visualizer, 'children'):\n+            return self.typename + \" containing \" + self.visualizer.to_string ()\n+        return self.typename\n+\n+class StdExpStringViewPrinter:\n+    \"Print a std::experimental::basic_string_view\"\n+\n+    def __init__ (self, typename, val):\n+        self.val = val\n+\n+    def to_string (self):\n+        ptr = self.val['_M_str']\n+        len = self.val['_M_len']\n+        if hasattr (ptr, \"lazy_string\"):\n+            return ptr.lazy_string (length = len)\n+        return ptr.string (length = len)\n+\n+    def display_hint (self):\n+        return 'string'\n \n # A \"regular expression\" printer which conforms to the\n # \"SubPrettyPrinter\" protocol from gdb.printing.\n@@ -865,12 +985,12 @@ def __init__(self, name):\n         self.subprinters = []\n         self.lookup = {}\n         self.enabled = True\n-        self.compiled_rx = re.compile('^([a-zA-Z0-9_:]+)<.*>$')\n+        self.compiled_rx = re.compile('^([a-zA-Z0-9_:]+)(<.*>)?$')\n \n     def add(self, name, function):\n         # A small sanity check.\n         # FIXME\n-        if not self.compiled_rx.match(name + '<>'):\n+        if not self.compiled_rx.match(name):\n             raise ValueError('libstdc++ programming error: \"%s\" does not match' % name)\n         printer = RxPrinter(name, function)\n         self.subprinters.append(printer)\n@@ -1214,6 +1334,13 @@ def build_libstdcxx_dictionary ():\n     libstdcxx_printer.add('std::__debug::forward_list',\n                           StdForwardListPrinter)\n \n+    # Library Fundamentals TS components\n+    libstdcxx_printer.add_version('std::experimental::fundamentals_v1::',\n+                                  'any', StdExpAnyPrinter)\n+    libstdcxx_printer.add_version('std::experimental::fundamentals_v1::',\n+                                  'optional', StdExpOptionalPrinter)\n+    libstdcxx_printer.add_version('std::experimental::fundamentals_v1::',\n+                                  'basic_string_view', StdExpStringViewPrinter)\n \n     # Extensions.\n     libstdcxx_printer.add_version('__gnu_cxx::', 'slist', StdSlistPrinter)"}, {"sha": "e2f99a1bd6de2d42106876f8726b5bec06a2a9fa", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/libfundts.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f440cceb403312f76a610b26cee52541e9cf3e7/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Flibfundts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f440cceb403312f76a610b26cee52541e9cf3e7/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Flibfundts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Flibfundts.cc?ref=6f440cceb403312f76a610b26cee52541e9cf3e7", "patch": "@@ -0,0 +1,69 @@\n+// { dg-do run }\n+// { dg-options \"-g -O0 -std=gnu++14\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/any>\n+#include <experimental/optional>\n+#include <experimental/string_view>\n+#include <string>\n+#include <map>\n+\n+using std::experimental::any;\n+using std::experimental::optional;\n+using std::experimental::string_view;\n+\n+int\n+main()\n+{\n+  string_view str = \"string\";\n+// { dg-final { note-test str \"\\\"string\\\"\" } }\n+\n+  optional<int> o;\n+// { dg-final { note-test o {std::experimental::optional<int> [no contained value]} } }\n+  optional<bool> ob{false};\n+// { dg-final { note-test ob {std::experimental::optional<bool> = {[contained value] = false}} } }\n+  optional<int> oi{5};\n+// { dg-final { note-test oi {std::experimental::optional<int> = {[contained value] = 5}} } }\n+  optional<void*> op{nullptr};\n+// { dg-final { note-test op {std::experimental::optional<void *> = {[contained value] = 0x0}} } }\n+  optional<std::map<int, double>> om;\n+  om = std::map<int, double>{ {1, 2.}, {3, 4.}, {5, 6.} };\n+// { dg-final { note-test om {std::experimental::optional<std::map<int, double>> containing std::map with 3 elements = {[1] = 2, [3] = 4, [5] = 6}} } }\n+  optional<std::string> os{ \"stringy\" };\n+// { dg-final { note-test os {std::experimental::optional<std::string> = {[contained value] = \"stringy\"}} } }\n+\n+  any a;\n+// { dg-final { note-test a {std::experimental::any [no contained value]} } }\n+  any ab(false);\n+// { dg-final { note-test ab {std::experimental::any containing bool = {[contained value] = false}} } }\n+  any ai(6);\n+// { dg-final { note-test ai {std::experimental::any containing int = {[contained value] = 6}} } }\n+  any ap = (void*)nullptr;\n+// { dg-final { note-test ap {std::experimental::any containing void * = {[contained value] = 0x0}} } }\n+  any as = *os;\n+// { dg-final { note-test as {std::experimental::any containing std::string = {[contained value] = \"stringy\"}} } }\n+  any as2(\"stringiest\");\n+// { dg-final { regexp-test as2 {std::experimental::any containing const char \\* = {\\[contained value\\] = 0x[[:xdigit:]]+ \"stringiest\"}} } }\n+  any am = *om;\n+// { dg-final { note-test am {std::experimental::any containing std::map with 3 elements = {[1] = 2, [3] = 4, [5] = 6}} } }\n+\n+  return 0;\t\t\t// Mark SPOT\n+}\n+\n+// { dg-final { gdb-test SPOT } }"}]}