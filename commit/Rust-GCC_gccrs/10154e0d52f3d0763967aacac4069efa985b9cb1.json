{"sha": "10154e0d52f3d0763967aacac4069efa985b9cb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAxNTRlMGQ1MmYzZDA3NjM5NjdhYWNhYzQwNjllZmE5ODViOWNiMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-01-10T13:38:47Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-01-10T13:38:47Z"}, "message": "basic_string.h (basic_string<>:: basic_string(basic_string&&), [...]): Add.\n\n2010-01-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/basic_string.h (basic_string<>::\n\tbasic_string(basic_string&&), operator=(basic_string&&),\n\tassign(basic_string&&)): Add.\n\t* config/abi/pre/gnu.ver: Export new symbols.\n\t* include/ext/vstring.h (__versa_string<>::assign(__versa_string&&)):\n\tAdd.\n\t(operator=(__versa_string&&)): Don't call clear unnecessarily.\n\t* include/ext/rc_string_base.h (__rc_string_base<>::\n\t__rc_string_base(__rc_string_base&&)): Simplify a tad.\n\t* testsuite/21_strings/basic_string/cons/char/moveable.cc: New.\n\t* testsuite/21_strings/basic_string/cons/wchar_t/moveable.cc: Likewise.\n\t* testsuite/ext/vstring/assign/move_assign.cc: Likewise.\n\t* testsuite/21_strings/basic_string/assign/char/move_assign.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/assign/wchar_t/move_assign.cc:\n\tLikewise.\n\nFrom-SVN: r155788", "tree": {"sha": "341c6de90f33bc6defb43add0ff9f7e9c55d9ee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/341c6de90f33bc6defb43add0ff9f7e9c55d9ee2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10154e0d52f3d0763967aacac4069efa985b9cb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10154e0d52f3d0763967aacac4069efa985b9cb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10154e0d52f3d0763967aacac4069efa985b9cb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10154e0d52f3d0763967aacac4069efa985b9cb1/comments", "author": null, "committer": null, "parents": [{"sha": "a1ec0dcf1329b4a5cbce990bfeae3189281e1506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ec0dcf1329b4a5cbce990bfeae3189281e1506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1ec0dcf1329b4a5cbce990bfeae3189281e1506"}], "stats": {"total": 366, "additions": 344, "deletions": 22}, "files": [{"sha": "349280e29e8e1c7c3b99c9ae1898b39cf2b0ba05", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=10154e0d52f3d0763967aacac4069efa985b9cb1", "patch": "@@ -1,14 +1,33 @@\n+2010-01-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/basic_string.h (basic_string<>::\n+\tbasic_string(basic_string&&), operator=(basic_string&&),\n+\tassign(basic_string&&)): Add.\n+\t* config/abi/pre/gnu.ver: Export new symbols.\n+\t* include/ext/vstring.h (__versa_string<>::assign(__versa_string&&)):\n+\tAdd.\n+\t(operator=(__versa_string&&)): Don't call clear unnecessarily.\n+\t* include/ext/rc_string_base.h (__rc_string_base<>::\n+\t__rc_string_base(__rc_string_base&&)): Simplify a tad.\n+\t* testsuite/21_strings/basic_string/cons/char/moveable.cc: New.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/moveable.cc: Likewise.\n+\t* testsuite/ext/vstring/assign/move_assign.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/assign/char/move_assign.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/assign/wchar_t/move_assign.cc:\n+\tLikewise.\n+\n 2010-01-10  Silvius Rus  <rus@google.com>\n \n \t* configure.ac: Add detection of execinfo.h.\n-\t* configure: Same.\n-\t* config.h.in: Same.\n+\t* configure: Regenerate.\n+\t* config.h.in: Likewise.\n \t* doc/xml/manual/profile_mode.xml: Add list_to_slist manual.\n \tAlso, correct user interface mistakes.\n-\t* include/Makefile.in: Add references to new include files.\n \t* include/Makefile.am: Add references to new include files.\n+\t* include/Makefile.in: Regenerate.\n \t* include/backward/hash_map: Remove profile include.\n-\t* include/backward/hash_set: Remove profile include.\n+\t* include/backward/hash_set: Likewise.\n \t* include/profile/hashtable.h: Delete file.\n \t* include/profile/iterator_tracker.h: New file.\n \t* include/profile/vector: Add instrumentation for tracked iterator."}, {"sha": "c6ad78abf92bdf81809b25a0cc362f6e5ff61308", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=10154e0d52f3d0763967aacac4069efa985b9cb1", "patch": "@@ -1098,6 +1098,15 @@ GLIBCXX_3.4.14 {\n     _ZNSs13shrink_to_fitEv;\n     _ZNSbIwSt11char_traitsIwESaIwEE13shrink_to_fitEv;\n \n+    # string|wstring move contructor, move assignment operator and\n+    # move assign.\n+    _ZNSsC1EOSs;\n+    _ZNSbIwSt11char_traitsIwESaIwEEC1EOS2_;\n+    _ZNSsaSEOSs;\n+    _ZNSbIwSt11char_traitsIwESaIwEEC1EOS2_;\n+    _ZNSs6assignEOSs;\n+    _ZNSbIwSt11char_traitsIwESaIwEE6assignEOS2_;\n+\n     _ZSt25__throw_bad_function_callv;\n \n     # std::time_get::_M_extract_wday_or_month"}, {"sha": "a549cf76063fa8036edfe1338c3f8e2d49b93f88", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 56, "deletions": 12, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=10154e0d52f3d0763967aacac4069efa985b9cb1", "patch": "@@ -1,7 +1,7 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -419,8 +419,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Default constructor creates an empty string.\n        */\n-      inline\n-      basic_string();\n+      basic_string()\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }\n+#else\n+      : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()){ }\n+#endif\n \n       /**\n        *  @brief  Construct an empty string using allocator @a a.\n@@ -478,6 +482,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Move construct string.\n+       *  @param  str  Source string.\n+       *\n+       *  The newly-created string contains the exact contents of @a str.\n+       *  @a str is a valid, but unspecified string.\n+       **/\n+      basic_string(basic_string&& __str)\n+      : _M_dataplus(__str._M_dataplus)\n+      {\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\t\n+\t__str._M_data(_S_empty_rep()._M_refdata());\n+#else\n+\t__str._M_data(_S_construct(size_type(), _CharT(), get_allocator()));\n+#endif\n+      }\n+\n       /**\n        *  @brief  Construct string from an initializer list.\n        *  @param  l  std::initializer_list of characters.\n@@ -533,6 +554,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Move assign the value of @a str to this string.\n+       *  @param  str  Source string.\n+       *\n+       *  The contents of @a str are moved into this string (without copying).\n+       *  @a str is a valid, but unspecified string.\n+       **/\n+      basic_string&\n+      operator=(basic_string&& __str)\n+      {\n+\t// NB: DR 1204.\n+\tthis->swap(__str);\n+\treturn *this;\n+      }\n+\n       /**\n        *  @brief  Set value to string constructed from initializer list.\n        *  @param  l  std::initializer_list.\n@@ -976,6 +1012,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       basic_string&\n       assign(const basic_string& __str);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Set value to contents of another string.\n+       *  @param  str  Source string to use.\n+       *  @return  Reference to this string.\n+       *\n+       *  This function sets this string to the exact contents of @a str.\n+       *  @a str is a valid, but unspecified string.\n+       */\n+      basic_string&\n+      assign(basic_string&& __str)\n+      {\n+\tthis->swap(__str);\n+\treturn *this;\n+      }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n       /**\n        *  @brief  Set value to a substring of a string.\n        *  @param str  The string to use.\n@@ -2196,15 +2249,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      size_type __n2) const;\n   };\n \n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    inline basic_string<_CharT, _Traits, _Alloc>::\n-    basic_string()\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n-    : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }\n-#else\n-    : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()) { }\n-#endif\n-\n   // operator+\n   /**\n    *  @brief  Concatenate two strings."}, {"sha": "52a481d1ae5d3bf4056fd42f396b83a08408b160", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=10154e0d52f3d0763967aacac4069efa985b9cb1", "patch": "@@ -1,6 +1,7 @@\n // Reference-counted versatile string base -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -307,7 +308,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       __rc_string_base(__rc_string_base&& __rcs)\n-      : _M_dataplus(__rcs._M_get_allocator(), __rcs._M_data())\n+      : _M_dataplus(__rcs._M_dataplus)\n       { __rcs._M_data(_S_empty_rep._M_refcopy()); }\n #endif\n "}, {"sha": "05307771e8f460cf2c78f9f75b4192312ef715de", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=10154e0d52f3d0763967aacac4069efa985b9cb1", "patch": "@@ -261,8 +261,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       operator=(__versa_string&& __str)\n       {\n \t// NB: DR 1204.\n-\t// NB: DR 675.\n-\tthis->clear();\n \tthis->swap(__str);\n \treturn *this;\n       }\n@@ -784,6 +782,23 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Set value to contents of another string.\n+       *  @param  __str  Source string to use.\n+       *  @return  Reference to this string.\n+       *\n+       *  This function sets this string to the exact contents of @a __str.\n+       *  @a __str is a valid, but unspecified string.\n+       */\n+      __versa_string&\n+      assign(__versa_string&& __str)\n+      {\n+\tthis->swap(__str);\n+\treturn *this;\n+      }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n       /**\n        *  @brief  Set value to a substring of a string.\n        *  @param __str  The string to use."}, {"sha": "064a8cb7d813be0a27dbbbae0a4a3d5353b2087c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/char/move_assign.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2Fmove_assign.cc?ref=10154e0d52f3d0763967aacac4069efa985b9cb1", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-string-conversions \"\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on string (via swap). If the implementation changes\n+// this test may begin to fail.\n+\n+#include <string>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::string a, b;\n+  a.push_back('1');\n+  b.assign(std::move(a));\n+  VERIFY( b.size() == 1 && b[0] == '1' && a.size() == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7aa48d814ee9439d17e761e4a752f83bbedb14c4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/wchar_t/move_assign.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2Fmove_assign.cc?ref=10154e0d52f3d0763967aacac4069efa985b9cb1", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-string-conversions \"\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on string (via swap). If the implementation changes\n+// this test may begin to fail.\n+\n+#include <string>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wstring a, b;\n+  a.push_back(L'1');\n+  b.assign(std::move(a));\n+  VERIFY( b.size() == 1 && b[0] == '1' && a.size() == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "58b1e446158e2801b05d58f230eb0c2050b5b6cb", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/moveable.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fmoveable.cc?ref=10154e0d52f3d0763967aacac4069efa985b9cb1", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-string-conversions \"\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on string (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <string>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::string a, b;\n+  a.push_back('1');\n+  b = std::move(a);\n+  VERIFY( b.size() == 1 && b[0] == '1' && a.size() == 0 );\n+\n+  std::string c(std::move(b));\n+  VERIFY( c.size() == 1 && c[0] == '1' );\n+  VERIFY( b.size() == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "67a0fbed781deb8ae7f190ffd49eaf39d5e05a96", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/moveable.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fmoveable.cc?ref=10154e0d52f3d0763967aacac4069efa985b9cb1", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-string-conversions \"\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on string (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <string>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wstring a, b;\n+  a.push_back(L'1');\n+  b = std::move(a);\n+  VERIFY( b.size() == 1 && b[0] == L'1' && a.size() == 0 );\n+\n+  std::wstring c(std::move(b));\n+  VERIFY( c.size() == 1 && c[0] == L'1' );\n+  VERIFY( b.size() == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3f9e055b8daea54316838358987384a32b8d85bd", "filename": "libstdc++-v3/testsuite/ext/vstring/assign/move_assign.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fassign%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fassign%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fassign%2Fmove_assign.cc?ref=10154e0d52f3d0763967aacac4069efa985b9cb1", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-string-conversions \"\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on vstring (via swap). If the implementation changes\n+// this test may begin to fail.\n+\n+#include <ext/vstring.h>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::__sso_string a, b;\n+  a.push_back('1');\n+  b.assign(std::move(a));\n+  VERIFY( b.size() == 1 && b[0] == '1' && a.size() == 0 );\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::__rc_string a, b;\n+  a.push_back('1');\n+  b.assign(std::move(a));\n+  VERIFY( b.size() == 1 && b[0] == '1' && a.size() == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "b2572b2ddae2d3489f0c2f0bbce798e603365140", "filename": "libstdc++-v3/testsuite/ext/vstring/cons/moveable.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fcons%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10154e0d52f3d0763967aacac4069efa985b9cb1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fcons%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fcons%2Fmoveable.cc?ref=10154e0d52f3d0763967aacac4069efa985b9cb1", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-require-string-conversions \"\" }\n \n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,7 +20,7 @@\n \n \n // NOTE: This makes use of the fact that we know how moveable\n-// is implemented on deque (via swap). If the implementation changed\n+// is implemented on vstring (via swap). If the implementation changes\n // this test may begin to fail.\n \n #include <ext/vstring.h>"}]}