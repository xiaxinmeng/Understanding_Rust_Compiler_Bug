{"sha": "1f37c58399cc1cd5047b8464f09b9af750f129af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYzN2M1ODM5OWNjMWNkNTA0N2I4NDY0ZjA5YjlhZjc1MGYxMjlhZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-05-26T21:13:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-05-26T21:13:23Z"}, "message": "re PR c++/53220 (g++ mis-compiles compound literals)\n\n\tPR c++/53220\ngcc/\n\t* c-typeck.c (array_to_pointer_conversion): Give -Wc++-compat warning\n\tabout array compound literals.\ngcc/cp/\n\t* call.c (convert_like_real) [ck_list]: Take array address directly.\n\t* typeck.c (decay_conversion): Reject decay of an array compound\n\tliteral.\n\nFrom-SVN: r187916", "tree": {"sha": "215d3cb4dc23743144db979c43a787f2ed6b3027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/215d3cb4dc23743144db979c43a787f2ed6b3027"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f37c58399cc1cd5047b8464f09b9af750f129af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f37c58399cc1cd5047b8464f09b9af750f129af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f37c58399cc1cd5047b8464f09b9af750f129af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f37c58399cc1cd5047b8464f09b9af750f129af/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c4c57c9cbeda074a1e21d469575510791ed8667e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c57c9cbeda074a1e21d469575510791ed8667e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4c57c9cbeda074a1e21d469575510791ed8667e"}], "stats": {"total": 95, "additions": 87, "deletions": 8}, "files": [{"sha": "d9c3d166169bc964743fa632d050b0bfc2cc67de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f37c58399cc1cd5047b8464f09b9af750f129af", "patch": "@@ -1,3 +1,9 @@\n+2012-05-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53220\n+\t* c-typeck.c (array_to_pointer_conversion): Give -Wc++-compat warning\n+\tabout array compound literals.\n+\n 2012-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* cfgcleanup.c (try_optimize_cfg): Do not delete forwarder blocks"}, {"sha": "d3fa68e711738d2fa40e7227ba462f72b4a7b209", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=1f37c58399cc1cd5047b8464f09b9af750f129af", "patch": "@@ -1785,6 +1785,18 @@ array_to_pointer_conversion (location_t loc, tree exp)\n   if (TREE_CODE (exp) == INDIRECT_REF)\n     return convert (ptrtype, TREE_OPERAND (exp, 0));\n \n+  /* In C++ array compound literals are temporary objects unless they are\n+     const or appear in namespace scope, so they are destroyed too soon\n+     to use them for much of anything  (c++/53220).  */\n+  if (warn_cxx_compat && TREE_CODE (exp) == COMPOUND_LITERAL_EXPR)\n+    {\n+      tree decl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n+      if (!TREE_READONLY (decl) && !TREE_STATIC (decl))\n+\twarning_at (DECL_SOURCE_LOCATION (decl), OPT_Wc___compat,\n+\t\t    \"converting an array compound literal to a pointer \"\n+\t\t    \"is ill-formed in C++\");\n+    }\n+\n   adr = build_unary_op (loc, ADDR_EXPR, exp, 1);\n   return convert (ptrtype, adr);\n }"}, {"sha": "2bf548d06f8279d10fd87dc902e2caf6c650aef1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1f37c58399cc1cd5047b8464f09b9af750f129af", "patch": "@@ -1,3 +1,10 @@\n+2012-05-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53220\n+\t* call.c (convert_like_real) [ck_list]: Take array address directly.\n+\t* typeck.c (decay_conversion): Reject decay of an array compound\n+\tliteral.\n+\n 2012-05-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/32054"}, {"sha": "5efa57cd759628e63adaf9ba9d9be7ce0d4a2a04", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1f37c58399cc1cd5047b8464f09b9af750f129af", "patch": "@@ -5849,11 +5849,15 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t  (elttype, cp_type_quals (elttype) | TYPE_QUAL_CONST);\n \tarray = build_array_of_n_type (elttype, len);\n \tarray = finish_compound_literal (array, new_ctor, complain);\n+\t/* Take the address explicitly rather than via decay_conversion\n+\t   to avoid the error about taking the address of a temporary.  */\n+\tarray = cp_build_addr_expr (array, complain);\n+\tarray = cp_convert (build_pointer_type (elttype), array);\n \n \t/* Build up the initializer_list object.  */\n \ttotype = complete_type (totype);\n \tfield = next_initializable_field (TYPE_FIELDS (totype));\n-\tCONSTRUCTOR_APPEND_ELT (vec, field, decay_conversion (array, complain));\n+\tCONSTRUCTOR_APPEND_ELT (vec, field, array);\n \tfield = next_initializable_field (DECL_CHAIN (field));\n \tCONSTRUCTOR_APPEND_ELT (vec, field, size_int (len));\n \tnew_ctor = build_constructor (totype, vec);"}, {"sha": "901b15fcd16022541b73220986c8f19336b85d8c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1f37c58399cc1cd5047b8464f09b9af750f129af", "patch": "@@ -1886,6 +1886,15 @@ decay_conversion (tree exp, tsubst_flags_t complain)\n \t  return error_mark_node;\n \t}\n \n+      /* Don't let an array compound literal decay to a pointer.  It can\n+\t still be used to initialize an array or bind to a reference.  */\n+      if (TREE_CODE (exp) == TARGET_EXPR)\n+\t{\n+\t  if (complain & tf_error)\n+\t    error_at (loc, \"taking address of temporary array\");\n+\t  return error_mark_node;\n+\t}\n+\n       ptrtype = build_pointer_type (TREE_TYPE (type));\n \n       if (TREE_CODE (exp) == VAR_DECL)"}, {"sha": "d3fc2d8c2dbe840a1736b6f4de1e2f52be737fbe", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=1f37c58399cc1cd5047b8464f09b9af750f129af", "patch": "@@ -1759,7 +1759,8 @@ ISO C99 supports compound literals.  A compound literal looks like\n a cast containing an initializer.  Its value is an object of the\n type specified in the cast, containing the elements specified in\n the initializer; it is an lvalue.  As an extension, GCC supports\n-compound literals in C90 mode and in C++.\n+compound literals in C90 mode and in C++, though the semantics are\n+somewhat different in C++.\n \n Usually, the specified type is a structure.  Assume that\n @code{struct foo} and @code{structure} are declared as shown:\n@@ -1785,8 +1786,9 @@ This is equivalent to writing the following:\n @}\n @end smallexample\n \n-You can also construct an array.  If all the elements of the compound literal\n-are (made up of) simple constant expressions, suitable for use in\n+You can also construct an array, though this is dangerous in C++, as\n+explained below.  If all the elements of the compound literal are\n+(made up of) simple constant expressions, suitable for use in\n initializers of objects of static storage duration, then the compound\n literal can be coerced to a pointer to its first element and used in\n such an initializer, as shown here:\n@@ -1822,6 +1824,25 @@ static int y[] = @{1, 2, 3@};\n static int z[] = @{1, 0, 0@};\n @end smallexample\n \n+In C, a compound literal designates an unnamed object with static or\n+automatic storage duration.  In C++, a compound literal designates a\n+temporary object, which only lives until the end of its\n+full-expression.  As a result, well-defined C code that takes the\n+address of a subobject of a compound literal can be undefined in C++.\n+For instance, if the array compound literal example above appeared\n+inside a function, any subsequent use of @samp{foo} in C++ has\n+undefined behavior because the lifetime of the array ends after the\n+declaration of @samp{foo}.  As a result, the C++ compiler now rejects\n+the conversion of a temporary array to a pointer.\n+\n+As an optimization, the C++ compiler sometimes gives array compound\n+literals longer lifetimes: when the array either appears outside a\n+function or has const-qualified type.  If @samp{foo} and its\n+initializer had elements of @samp{char *const} type rather than\n+@samp{char *}, or if @samp{foo} were a global variable, the array\n+would have static storage duration.  But it is probably safest just to\n+avoid the use of array compound literals in code compiled as C++.\n+\n @node Designated Inits\n @section Designated Initializers\n @cindex initializers with labeled elements"}, {"sha": "5b3df3617cc73f2a04e3d6aacd7e8fa28df79c6e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f37c58399cc1cd5047b8464f09b9af750f129af", "patch": "@@ -1,3 +1,9 @@\n+2012-05-22  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53220\n+\t* c-c++-common/array-lit.c: New.\n+\t* g++.dg/ext/complit12.C: #if 0 out decay-to-pointer test.\n+\n 2012-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/50294"}, {"sha": "6505c2091b47055bd51000e53211c93962dfbf5d", "filename": "gcc/testsuite/c-c++-common/array-lit.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Farray-lit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Farray-lit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Farray-lit.c?ref=1f37c58399cc1cd5047b8464f09b9af750f129af", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-std=c99 -Wc++-compat -Werror\" { target c } } */\n+/* { dg-prune-output \"treated as errors\" } */\n+#include <stdio.h>\n+\n+int main()\n+{\n+  for (int *p = (int[]){ 1, 2, 3, 0 }; /* { dg-error \"array\" } */\n+       *p; ++p) {\n+    printf(\"%d\\n\", *p);\n+  }\n+  return 0;\n+}"}, {"sha": "5c6a731f9ac29c6700076628c972093b5fcaa4ce", "filename": "gcc/testsuite/g++.dg/ext/complit12.C", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f37c58399cc1cd5047b8464f09b9af750f129af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit12.C?ref=1f37c58399cc1cd5047b8464f09b9af750f129af", "patch": "@@ -53,12 +53,14 @@ int main ()\n     T t;\n     if (c != 11)\n       return 5;\n-    MA ma = bar ((M[2]) { M(), M() }, m);\n-    if (c != 12)\n-      return 7;\n     M mm[2] = ((M[2]) { f(M()), f(M()) });\n-    if (c != 14)\n+    if (c != 13)\n       return 8;\n+#if 0\n+    MA ma = bar ((M[2]) { M(), M() }, m);\n+    if (c != 14)\n+      return 7;\n+#endif\n   }\n   if (c != 0)\n     return 6;"}]}