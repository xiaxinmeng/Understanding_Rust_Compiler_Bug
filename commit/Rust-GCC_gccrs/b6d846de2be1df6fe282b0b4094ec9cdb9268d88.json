{"sha": "b6d846de2be1df6fe282b0b4094ec9cdb9268d88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkODQ2ZGUyYmUxZGY2ZmUyODJiMGI0MDk0ZWM5Y2RiOTI2OGQ4OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-07-30T13:28:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-07-30T13:28:31Z"}, "message": "re PR c++/57901 (Cannot call-by-value such that class has non-trivial (constexpr) move constructor)\n\n\tPR c++/57901\n\t* semantics.c (build_data_member_initialization, constexpr_fn_retval):\n\tUse break_out_target_exprs instead of unshare_expr.\n\nFrom-SVN: r201338", "tree": {"sha": "d1ad9f0bc1432c5f5782a879e9fe3fb28d01c148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1ad9f0bc1432c5f5782a879e9fe3fb28d01c148"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6d846de2be1df6fe282b0b4094ec9cdb9268d88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d846de2be1df6fe282b0b4094ec9cdb9268d88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6d846de2be1df6fe282b0b4094ec9cdb9268d88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d846de2be1df6fe282b0b4094ec9cdb9268d88/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b798a0fe160162efebffb974ebb67ed2456466a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b798a0fe160162efebffb974ebb67ed2456466a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b798a0fe160162efebffb974ebb67ed2456466a"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "72acda1cba8602832456e4b37f6a7bfb43711918", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d846de2be1df6fe282b0b4094ec9cdb9268d88/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d846de2be1df6fe282b0b4094ec9cdb9268d88/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b6d846de2be1df6fe282b0b4094ec9cdb9268d88", "patch": "@@ -1,3 +1,9 @@\n+2013-07-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/57901\n+\t* semantics.c (build_data_member_initialization, constexpr_fn_retval):\n+\tUse break_out_target_exprs instead of unshare_expr.\n+\n 2013-07-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/57948"}, {"sha": "acdd1788f6ee4c82b398f1299befb05ad4632961", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d846de2be1df6fe282b0b4094ec9cdb9268d88/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d846de2be1df6fe282b0b4094ec9cdb9268d88/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b6d846de2be1df6fe282b0b4094ec9cdb9268d88", "patch": "@@ -6016,15 +6016,15 @@ build_data_member_initialization (tree t, vec<constructor_elt, va_gc> **vec)\n       || TREE_CODE (t) == MODIFY_EXPR)\n     {\n       member = TREE_OPERAND (t, 0);\n-      init = unshare_expr (TREE_OPERAND (t, 1));\n+      init = break_out_target_exprs (TREE_OPERAND (t, 1));\n     }\n   else if (TREE_CODE (t) == CALL_EXPR)\n     {\n       member = CALL_EXPR_ARG (t, 0);\n       /* We don't use build_cplus_new here because it complains about\n \t abstract bases.  Leaving the call unwrapped means that it has the\n \t wrong type, but cxx_eval_constant_expression doesn't care.  */\n-      init = unshare_expr (t);\n+      init = break_out_target_exprs (t);\n     }\n   else if (TREE_CODE (t) == DECL_EXPR)\n     /* Declaring a temporary, don't add it to the CONSTRUCTOR.  */\n@@ -6261,7 +6261,7 @@ constexpr_fn_retval (tree body)\n       }\n \n     case RETURN_EXPR:\n-      return unshare_expr (TREE_OPERAND (body, 0));\n+      return break_out_target_exprs (TREE_OPERAND (body, 0));\n \n     case DECL_EXPR:\n       if (TREE_CODE (DECL_EXPR_DECL (body)) == USING_DECL)"}, {"sha": "1fc3738554e97145c6d136866ea38f810905c4e6", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-value4.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d846de2be1df6fe282b0b4094ec9cdb9268d88/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-value4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d846de2be1df6fe282b0b4094ec9cdb9268d88/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-value4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-value4.C?ref=b6d846de2be1df6fe282b0b4094ec9cdb9268d88", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/57901\n+// { dg-require-effective-target c++11 }\n+\n+struct Z {\n+    Z()         = default;\n+    Z(Z const&) = default;\n+    constexpr Z(Z&&) {} /* non-trivial (constexpr) move ctor */\n+};\n+\n+template<typename T>\n+constexpr int fn0(T v) { return 0; }\n+template<typename T>\n+constexpr int fn (T v) { return fn0(v); }\n+\n+constexpr auto t0 = fn0(Z()); // OK!\n+constexpr auto t  = fn (Z()); // error! (GCC 4.8.1)"}]}