{"sha": "4bd7b70b8954bb935a3b88ffa70f384552cc6fb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJkN2I3MGI4OTU0YmI5MzVhM2I4OGZmYTcwZjM4NDU1MmNjNmZiMw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-12-07T12:50:43Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-12-07T12:50:43Z"}, "message": "re PR tree-optimization/55590 (SRA still produces unnecessarily unaligned memory accesses)\n\n2012-12-07  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/55590\n\t* tree-sra.c (build_ref_for_offset): Use get_object_alignment_1 to\n\tget base alignment.\n\n\t* testsuite/gcc.target/i386/pr55590-1.c: New test.\n\t* testsuite/gcc.target/i386/pr55590-2.c: Likewise.\n\nFrom-SVN: r194300", "tree": {"sha": "d07f6d3b5a64e67856103436b1ad8de49a207b82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d07f6d3b5a64e67856103436b1ad8de49a207b82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bd7b70b8954bb935a3b88ffa70f384552cc6fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd7b70b8954bb935a3b88ffa70f384552cc6fb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bd7b70b8954bb935a3b88ffa70f384552cc6fb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd7b70b8954bb935a3b88ffa70f384552cc6fb3/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a09b3c50dd4ab7df41376abae0fe5f07cc172e07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09b3c50dd4ab7df41376abae0fe5f07cc172e07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a09b3c50dd4ab7df41376abae0fe5f07cc172e07"}], "stats": {"total": 90, "additions": 71, "deletions": 19}, "files": [{"sha": "6a4a7739d29eb04f706dfee708c376ff6ca675a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd7b70b8954bb935a3b88ffa70f384552cc6fb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd7b70b8954bb935a3b88ffa70f384552cc6fb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bd7b70b8954bb935a3b88ffa70f384552cc6fb3", "patch": "@@ -1,4 +1,8 @@\n-2012-12-06  Jason Merrill  <jason@redhat.com>\n+2012-12-07  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/55590\n+\t* tree-sra.c (build_ref_for_offset): Use get_object_alignment_1 to\n+\tget base alignment.\n \n 2012-12-06  Uros Bizjak  <ubizjak@gmail.com>\n \t    H.J. Lu  <hongjiu.lu@intel.com>"}, {"sha": "d50d73b0e9d5bf978879b7e8743cdf073eea1eb5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd7b70b8954bb935a3b88ffa70f384552cc6fb3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd7b70b8954bb935a3b88ffa70f384552cc6fb3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4bd7b70b8954bb935a3b88ffa70f384552cc6fb3", "patch": "@@ -1,3 +1,9 @@\n+2012-12-07  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/55590\n+\t* gcc.target/i386/pr55590-1.c: New test.\n+\t* gcc.target/i386/pr55590-2.c: Likewise.\n+\n 2012-12-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/54975"}, {"sha": "a8dd91232c50483056c7496f0369144000a1f0f3", "filename": "gcc/testsuite/gcc.target/i386/pr55590-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd7b70b8954bb935a3b88ffa70f384552cc6fb3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55590-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd7b70b8954bb935a3b88ffa70f384552cc6fb3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55590-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55590-1.c?ref=4bd7b70b8954bb935a3b88ffa70f384552cc6fb3", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include <immintrin.h>\n+\n+struct S\n+{\n+  __m128 a, b;\n+};\n+\n+struct T\n+{\n+  int a;\n+  struct S s;\n+};\n+\n+\n+void foo (struct T *p, __m128 v)\n+{\n+  struct S s;\n+\n+  s = p->s;\n+  s.b = _mm_add_ps(s.b, v);\n+  p->s = s;\n+}\n+\n+/* { dg-final { scan-assembler-not \"vmovups\" } } */"}, {"sha": "afc0a6379a81f812f009dcc95cdf88acfd1f5a5f", "filename": "gcc/testsuite/gcc.target/i386/pr55590-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd7b70b8954bb935a3b88ffa70f384552cc6fb3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55590-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd7b70b8954bb935a3b88ffa70f384552cc6fb3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55590-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55590-2.c?ref=4bd7b70b8954bb935a3b88ffa70f384552cc6fb3", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include <immintrin.h>\n+\n+struct S\n+{\n+  __m128 a, b;\n+};\n+\n+struct T\n+{\n+  int a;\n+  struct S s[8];\n+};\n+\n+\n+void foo (struct T *p, int i, __m128 v)\n+{\n+  struct S s;\n+\n+  s = p->s[i];\n+  s.b = _mm_add_ps(s.b, v);\n+  p->s[i] = s;\n+}\n+\n+/* { dg-final { scan-assembler-not \"vmovups\" } } */"}, {"sha": "21d8a5141178557dc462687e18c424d58899dd0a", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd7b70b8954bb935a3b88ffa70f384552cc6fb3/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd7b70b8954bb935a3b88ffa70f384552cc6fb3/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=4bd7b70b8954bb935a3b88ffa70f384552cc6fb3", "patch": "@@ -1423,7 +1423,10 @@ make_fancy_name (tree expr)\n    EXP_TYPE at the given OFFSET.  If BASE is something for which\n    get_addr_base_and_unit_offset returns NULL, gsi must be non-NULL and is used\n    to insert new statements either before or below the current one as specified\n-   by INSERT_AFTER.  This function is not capable of handling bitfields.  */\n+   by INSERT_AFTER.  This function is not capable of handling bitfields.\n+\n+   BASE must be either a declaration or a memory reference that has correct\n+   alignment ifformation embeded in it (e.g. a pre-existing one in SRA).  */\n \n tree\n build_ref_for_offset (location_t loc, tree base, HOST_WIDE_INT offset,\n@@ -1437,7 +1440,7 @@ build_ref_for_offset (location_t loc, tree base, HOST_WIDE_INT offset,\n   unsigned int align;\n \n   gcc_checking_assert (offset % BITS_PER_UNIT == 0);\n-\n+  get_object_alignment_1 (base, &align, &misalign);\n   base = get_addr_base_and_unit_offset (base, &base_offset);\n \n   /* get_addr_base_and_unit_offset returns NULL for references with a variable\n@@ -1476,22 +1479,7 @@ build_ref_for_offset (location_t loc, tree base, HOST_WIDE_INT offset,\n       base = build_fold_addr_expr (unshare_expr (base));\n     }\n \n-  /* If prev_base were always an originally performed access\n-     we can extract more optimistic alignment information\n-     by looking at the access mode.  That would constrain the\n-     alignment of base + base_offset which we would need to\n-     adjust according to offset.  */\n-  if (!get_pointer_alignment_1 (base, &align, &misalign))\n-    {\n-      gcc_assert (misalign == 0);\n-      if (TREE_CODE (prev_base) == MEM_REF\n-\t  || TREE_CODE (prev_base) == TARGET_MEM_REF)\n-\talign = TYPE_ALIGN (TREE_TYPE (prev_base));\n-    }\n-  misalign += (tree_to_double_int (off)\n-\t       .sext (TYPE_PRECISION (TREE_TYPE (off))).low\n-\t       * BITS_PER_UNIT);\n-  misalign = misalign & (align - 1);\n+  misalign = (misalign + offset) & (align - 1);\n   if (misalign != 0)\n     align = (misalign & -misalign);\n   if (align < TYPE_ALIGN (exp_type))"}]}