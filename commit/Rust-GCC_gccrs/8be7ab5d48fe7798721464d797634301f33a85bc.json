{"sha": "8be7ab5d48fe7798721464d797634301f33a85bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJlN2FiNWQ0OGZlNzc5ODcyMTQ2NGQ3OTc2MzQzMDFmMzNhODViYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "1999-12-15T12:39:02Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "1999-12-15T12:39:02Z"}, "message": "typeck.c (build_c_cast): Expand warning message.\n\n\t* typeck.c (build_c_cast): Expand warning message. Move pointer\n\talignment warning to after the cast. Don't warn about pointer\n\talignment when given a pointer to incomplete.\nfix cut-n-paste error on 1999-12-09  Andreas Jaeger and\n1999-12-09  Mark Mitchell (was 11999 & 999)\n\nFrom-SVN: r30952", "tree": {"sha": "5f41cb2afe297f199c497cd8277d599cf3291cf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f41cb2afe297f199c497cd8277d599cf3291cf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8be7ab5d48fe7798721464d797634301f33a85bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be7ab5d48fe7798721464d797634301f33a85bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8be7ab5d48fe7798721464d797634301f33a85bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be7ab5d48fe7798721464d797634301f33a85bc/comments", "author": null, "committer": null, "parents": [{"sha": "33848bb0281d0be603c0391342284273c123ae4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33848bb0281d0be603c0391342284273c123ae4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33848bb0281d0be603c0391342284273c123ae4a"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "ac432dc24a868fb6c851e92e8ec1436552a48783", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be7ab5d48fe7798721464d797634301f33a85bc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be7ab5d48fe7798721464d797634301f33a85bc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8be7ab5d48fe7798721464d797634301f33a85bc", "patch": "@@ -1,3 +1,9 @@\n+1999-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* typeck.c (build_c_cast): Expand warning message. Move pointer\n+\talignment warning to after the cast. Don't warn about pointer\n+\talignment when given a pointer to incomplete.\n+\n 1999-12-15  Richard Henderson  <rth@cygnus.com>\n \n \t* cp-tree.h (make_aggr_type): Declare.\n@@ -61,6 +67,7 @@\n \t(reinit_parse_for_expr): Use.\n \t(check_newline): Use.\n \n+>>>>>>> 1.1463\n 1999-12-13  Mark Mitchell  <mark@codesourcery.com>\n \n \t* optimize.c (initialize_inlined_parameters): Take FN to which the\n@@ -89,7 +96,7 @@\n \n \t* pt.c (for_each_template_parm_r): Add static prototype.\n \n-11999-12-09  Andreas Jaeger  <aj@suse.de>\n+1999-12-09  Andreas Jaeger  <aj@suse.de>\n \n \t* except.c (expand_throw): Add static attribute to match\n \tprototype.\n@@ -98,7 +105,7 @@\n \t* semantics.c: Include output.h for declaration of\n \tmake_function_rtl.\n \n-999-12-09  Mark Mitchell  <mark@codesourcery.com>\n+1999-12-09  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (init_decl_processing): Reenable inlining on trees.\n \t(finish_function): Likewise."}, {"sha": "c99d153a9532798606f9faa99c6d761095d1f141", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be7ab5d48fe7798721464d797634301f33a85bc/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be7ab5d48fe7798721464d797634301f33a85bc/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8be7ab5d48fe7798721464d797634301f33a85bc", "patch": "@@ -5499,16 +5499,8 @@ build_c_cast (type, expr)\n       && TREE_CODE (otype) == POINTER_TYPE\n       && !at_least_as_qualified_p (TREE_TYPE (type),\n \t\t\t\t   TREE_TYPE (otype)))\n-    cp_warning (\"cast discards qualifiers from pointer target type\");\n-\n-  /* Warn about possible alignment problems.  */\n-  if (STRICT_ALIGNMENT && warn_cast_align\n-      && TREE_CODE (type) == POINTER_TYPE\n-      && TREE_CODE (otype) == POINTER_TYPE\n-      && TREE_CODE (TREE_TYPE (otype)) != VOID_TYPE\n-      && TREE_CODE (TREE_TYPE (otype)) != FUNCTION_TYPE\n-      && TYPE_ALIGN (TREE_TYPE (type)) > TYPE_ALIGN (TREE_TYPE (otype)))\n-    warning (\"cast increases required alignment of target type\");\n+    cp_warning (\"cast from `%T' to `%T' discards qualifiers from pointer target type\",\n+                otype, type);\n \n #if 0\n   /* We should see about re-enabling these, they seem useful to\n@@ -5549,6 +5541,19 @@ build_c_cast (type, expr)\n \t}\n     }\n \n+  /* Warn about possible alignment problems.  Do this here when we will have\n+     instantiated any necessary template types.  */\n+  if (STRICT_ALIGNMENT && warn_cast_align\n+      && TREE_CODE (type) == POINTER_TYPE\n+      && TREE_CODE (otype) == POINTER_TYPE\n+      && TREE_CODE (TREE_TYPE (otype)) != VOID_TYPE\n+      && TREE_CODE (TREE_TYPE (otype)) != FUNCTION_TYPE\n+      && TYPE_SIZE (TREE_TYPE (otype))\n+      && TYPE_SIZE (TREE_TYPE (type))\n+      && TYPE_ALIGN (TREE_TYPE (type)) > TYPE_ALIGN (TREE_TYPE (otype)))\n+    cp_warning (\"cast from `%T' to `%T' increases required alignment of target type\",\n+                otype, type);\n+\n     /* Always produce some operator for an explicit cast,\n        so we can tell (for -pedantic) that the cast is no lvalue.  */\n   if (TREE_CODE (type) != REFERENCE_TYPE && value == expr"}]}