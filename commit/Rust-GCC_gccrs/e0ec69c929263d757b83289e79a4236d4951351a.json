{"sha": "e0ec69c929263d757b83289e79a4236d4951351a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBlYzY5YzkyOTI2M2Q3NTdiODMyODllNzlhNDIzNmQ0OTUxMzUxYQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-11-24T21:02:39Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-11-24T21:02:39Z"}, "message": "streambuf_iterator.h (ostreambuf_iterator): Remove non-standard throw specs.\n\n\n2003-11-24  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/streambuf_iterator.h (ostreambuf_iterator): Remove\n\tnon-standard throw specs.\n\t* testsuite/24_iterators/istreambuf_iterator.cc: Split into...\n\t* testsuite/24_iterators/istreambuf_iterator/1.cc\n\t* testsuite/24_iterators/istreambuf_iterator/2.cc\n\t* testsuite/24_iterators/istreambuf_iterator/2627.cc\n\t* testsuite/24_iterators/ostreambuf_iterator.cc: Split into...\n\t* testsuite/24_iterators/ostreambuf_iterator/1.cc\n\t* testsuite/24_iterators/ostreambuf_iterator/2.cc\n\n\t* testsuite/24_iterators/reverse_iterator/1.cc: Just compile,\n\tdon't link.\n\n\t* include/bits/allocator.h: Formatting tweak.\n\nFrom-SVN: r73892", "tree": {"sha": "e3abf274fe266111d744c5e3998e433a2f43a278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3abf274fe266111d744c5e3998e433a2f43a278"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0ec69c929263d757b83289e79a4236d4951351a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ec69c929263d757b83289e79a4236d4951351a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0ec69c929263d757b83289e79a4236d4951351a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ec69c929263d757b83289e79a4236d4951351a/comments", "author": null, "committer": null, "parents": [{"sha": "21b807f18020f6f10753b0a0ab7d53a65f31b79a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21b807f18020f6f10753b0a0ab7d53a65f31b79a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21b807f18020f6f10753b0a0ab7d53a65f31b79a"}], "stats": {"total": 295, "additions": 194, "deletions": 101}, "files": [{"sha": "9ff983edc6cd79a34b5a21f88d05cdd0d8384242", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e0ec69c929263d757b83289e79a4236d4951351a", "patch": "@@ -1,3 +1,20 @@\n+2003-11-24  Benjamin Kosnik  <bkoz@redhat.com>\n+\t\n+\t* include/bits/streambuf_iterator.h (ostreambuf_iterator): Remove\n+\tnon-standard throw specs.\n+\t* testsuite/24_iterators/istreambuf_iterator.cc: Split into...\n+\t* testsuite/24_iterators/istreambuf_iterator/1.cc\n+\t* testsuite/24_iterators/istreambuf_iterator/2.cc\n+\t* testsuite/24_iterators/istreambuf_iterator/2627.cc\n+\t* testsuite/24_iterators/ostreambuf_iterator.cc: Split into...\n+\t* testsuite/24_iterators/ostreambuf_iterator/1.cc\n+\t* testsuite/24_iterators/ostreambuf_iterator/2.cc\n+\n+\t* testsuite/24_iterators/reverse_iterator/1.cc: Just compile,\n+\tdon't link.\n+\t\n+\t* include/bits/allocator.h: Formatting tweak.\n+\t\n 2003-11-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* src/locale_init.cc: Cosmetic reformatting."}, {"sha": "9d01b7e292e797feadd5c72bb141af582b1a57cf", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=e0ec69c929263d757b83289e79a4236d4951351a", "patch": "@@ -172,9 +172,11 @@ namespace std\n       size_type\n       max_size() const throw() { return size_t(-1) / sizeof(_Tp); }\n \n-      void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }\n+      void \n+      construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }\n \n-      void destroy(pointer __p) { __p->~_Tp(); }\n+      void \n+      destroy(pointer __p) { __p->~_Tp(); }\n     };\n \n   template<>"}, {"sha": "3c393e3f955c3a22665e646a5e3b6a94a05f382e", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=e0ec69c929263d757b83289e79a4236d4951351a", "patch": "@@ -207,15 +207,15 @@ namespace std\n       }\n \n       ostreambuf_iterator& \n-      operator*() throw()\n+      operator*()\n       { return *this; }\n \n       ostreambuf_iterator& \n-      operator++(int) throw()\n+      operator++(int)\n       { return *this; }\n \n       ostreambuf_iterator& \n-      operator++() throw()\n+      operator++()\n       { return *this; }\n \n       bool "}, {"sha": "8c836e50e15562858d15d1135514fc69526ce758", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/1.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F1.cc?ref=e0ec69c929263d757b83289e79a4236d4951351a", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile }\n+// 1999-06-28 bkoz\n+\n+// Copyright (C) 1999, 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 24.5.3 template class istreambuf_iterator\n+\n+#include <sstream>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  typedef istreambuf_iterator<char> test_iterator;\n+  typedef char_traits<char>::off_type off_type;\n+  typedef iterator<input_iterator_tag, char, off_type, char*, char&> base_iterator;\n+\n+  istringstream isstream(\"this tag\");\n+  test_iterator  r_it(isstream);\n+  base_iterator* base __attribute__((unused)) = &r_it;\n+\n+  // Check for required typedefs\n+  typedef test_iterator::value_type value_type;\n+  typedef test_iterator::difference_type difference_type;\n+  typedef test_iterator::pointer pointer;\n+  typedef test_iterator::reference reference;\n+  typedef test_iterator::iterator_category iteratory_category;\n+\n+  typedef test_iterator::char_type char_type;\n+  typedef test_iterator::traits_type traits_type;\n+  typedef test_iterator::istream_type istream_type;\n+  typedef test_iterator::streambuf_type streambuf_type;\n+}"}, {"sha": "61c88ea65ab576b28d724abbf2da5c28df5d876d", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/2.cc", "status": "renamed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F2.cc?ref=e0ec69c929263d757b83289e79a4236d4951351a", "patch": "@@ -24,32 +24,6 @@\n #include <iterator>\n #include <testsuite_hooks.h>\n \n-void test01()\n-{\n-  using namespace std;\n-\n-  // Check for required base class.\n-  typedef istreambuf_iterator<char> test_iterator;\n-  typedef char_traits<char>::off_type off_type;\n-  typedef iterator<input_iterator_tag, char, off_type, char*, char&> base_iterator;\n-\n-  istringstream isstream(\"this tag\");\n-  test_iterator  r_it(isstream);\n-  base_iterator* base __attribute__((unused)) = &r_it;\n-\n-  // Check for required typedefs\n-  typedef test_iterator::value_type value_type;\n-  typedef test_iterator::difference_type difference_type;\n-  typedef test_iterator::pointer pointer;\n-  typedef test_iterator::reference reference;\n-  typedef test_iterator::iterator_category iteratory_category;\n-\n-  typedef test_iterator::char_type char_type;\n-  typedef test_iterator::traits_type traits_type;\n-  typedef test_iterator::istream_type istream_type;\n-  typedef test_iterator::streambuf_type streambuf_type;\n-}\n-\n bool test02(void)\n {\n \n@@ -136,46 +110,8 @@ bool test02(void)\n   return test;\n }\n \n-// libstdc++/2627\n-void test03()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const std::string s(\"free the vieques\");\n-\n-  // 1\n-  std::string res_postfix;\n-  std::istringstream iss01(s);\n-  std::istreambuf_iterator<char> isbufit01(iss01);\n-  for (std::size_t j = 0; j < s.size(); ++j, isbufit01++)\n-    res_postfix += *isbufit01;\n-\n-  // 2\n-  std::string res_prefix;\n-  std::istringstream iss02(s);\n-  std::istreambuf_iterator<char> isbufit02(iss02);\n-  for (std::size_t j = 0; j < s.size(); ++j, ++isbufit02)\n-    res_prefix += *isbufit02;\n-\n-  // 3 mixed\n-  std::string res_mixed;\n-  std::istringstream iss03(s);\n-  std::istreambuf_iterator<char> isbufit03(iss03);\n-  for (std::size_t j = 0; j < (s.size() / 2); ++j)\n-    {\n-      res_mixed += *isbufit03;\n-      ++isbufit03;\n-      res_mixed += *isbufit03;\n-      isbufit03++;\n-    }\n-\n-  VERIFY ( res_postfix == res_prefix );\n-  VERIFY ( res_mixed == res_prefix );\n-}\n-\n int main()\n {\n-  test01();\n   test02();\n-  test03();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator.cc"}, {"sha": "ad6d0393b6c05fd5d389d9a399429761bd1be8ce", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/2627.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F2627.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F2627.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F2627.cc?ref=e0ec69c929263d757b83289e79a4236d4951351a", "patch": "@@ -0,0 +1,67 @@\n+// 1999-06-28 bkoz\n+\n+// Copyright (C) 1999, 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 24.5.3 template class istreambuf_iterator\n+\n+#include <sstream>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/2627\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const std::string s(\"free the vieques\");\n+\n+  // 1\n+  std::string res_postfix;\n+  std::istringstream iss01(s);\n+  std::istreambuf_iterator<char> isbufit01(iss01);\n+  for (std::size_t j = 0; j < s.size(); ++j, isbufit01++)\n+    res_postfix += *isbufit01;\n+\n+  // 2\n+  std::string res_prefix;\n+  std::istringstream iss02(s);\n+  std::istreambuf_iterator<char> isbufit02(iss02);\n+  for (std::size_t j = 0; j < s.size(); ++j, ++isbufit02)\n+    res_prefix += *isbufit02;\n+\n+  // 3 mixed\n+  std::string res_mixed;\n+  std::istringstream iss03(s);\n+  std::istreambuf_iterator<char> isbufit03(iss03);\n+  for (std::size_t j = 0; j < (s.size() / 2); ++j)\n+    {\n+      res_mixed += *isbufit03;\n+      ++isbufit03;\n+      res_mixed += *isbufit03;\n+      isbufit03++;\n+    }\n+\n+  VERIFY ( res_postfix == res_prefix );\n+  VERIFY ( res_mixed == res_prefix );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "d654d600158b9cea034df6028332e514bbb11b28", "filename": "libstdc++-v3/testsuite/24_iterators/ostreambuf_iterator/1.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2F1.cc?ref=e0ec69c929263d757b83289e79a4236d4951351a", "patch": "@@ -0,0 +1,50 @@\n+// { dg-do compile }\n+// 2001-04-30  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 24.5.4 template class ostreambuf_iterator\n+\n+#include <sstream>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  typedef ostreambuf_iterator<char> test_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  ostringstream osstream(\"this tag\");\n+  test_iterator  r_it(osstream);\n+  base_iterator* base __attribute__((unused)) = &r_it;\n+\n+  // Check for required typedefs\n+  typedef test_iterator::value_type value_type;\n+  typedef test_iterator::difference_type difference_type;\n+  typedef test_iterator::pointer pointer;\n+  typedef test_iterator::reference reference;\n+  typedef test_iterator::iterator_category iteratory_category;\n+\n+  typedef test_iterator::char_type char_type;\n+  typedef test_iterator::traits_type traits_type;\n+  typedef test_iterator::ostream_type ostream_type;\n+  typedef test_iterator::streambuf_type streambuf_type;\n+}"}, {"sha": "f294174e918de787de419058f592d3273c2ffeb3", "filename": "libstdc++-v3/testsuite/24_iterators/ostreambuf_iterator/2.cc", "status": "renamed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2F2.cc?ref=e0ec69c929263d757b83289e79a4236d4951351a", "patch": "@@ -24,30 +24,6 @@\n #include <iterator>\n #include <testsuite_hooks.h>\n \n-void test01()\n-{\n-  using namespace std;\n-\n-  // Check for required base class.\n-  typedef ostreambuf_iterator<char> test_iterator;\n-  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n-  ostringstream osstream(\"this tag\");\n-  test_iterator  r_it(osstream);\n-  base_iterator* base __attribute__((unused)) = &r_it;\n-\n-  // Check for required typedefs\n-  typedef test_iterator::value_type value_type;\n-  typedef test_iterator::difference_type difference_type;\n-  typedef test_iterator::pointer pointer;\n-  typedef test_iterator::reference reference;\n-  typedef test_iterator::iterator_category iteratory_category;\n-\n-  typedef test_iterator::char_type char_type;\n-  typedef test_iterator::traits_type traits_type;\n-  typedef test_iterator::ostream_type ostream_type;\n-  typedef test_iterator::streambuf_type streambuf_type;\n-}\n-\n bool test02(void)\n {\n   typedef std::ostreambuf_iterator<char> costreambuf_iter;\n@@ -111,8 +87,6 @@ bool test02(void)\n \n int main()\n {\n-  test01();\n   test02();\n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/24_iterators/ostreambuf_iterator.cc"}, {"sha": "d6b088ea3aa989f44b0f31e8f6622fd628aba501", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/1.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ec69c929263d757b83289e79a4236d4951351a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F1.cc?ref=e0ec69c929263d757b83289e79a4236d4951351a", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n@@ -48,9 +49,3 @@ void test01()\n \n // Make sure iterator can be instantiated.\n template class std::reverse_iterator<int*>;\n-\n-int main() \n-{ \n-  test01();\n-  return 0;\n-}"}]}