{"sha": "a2f4bd2ae1b6f66290315e145be759e4a8abd7ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJmNGJkMmFlMWI2ZjY2MjkwMzE1ZTE0NWJlNzU5ZTRhOGFiZDdhYw==", "commit": {"author": {"name": "Ed Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2014-05-16T09:30:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-05-16T09:30:57Z"}, "message": "re PR libstdc++/61166 (overflow when parse number in std::duration operator\"\")\n\n2014-05-15  Ed Smith-Rowland  <3dw4rd@verizon.net>\n\t    Jonathan Wakely  <jwakely@redhat.com>\n\n\tPR libstdc++/61166\n\t* include/bits/parse_numbers.h: Use integral_constant to remove\n\tduplication and simplify.\n\t* testsuite/20_util/duration/literals/61166.cc: New.\n\nCo-Authored-By: Jonathan Wakely <jwakely@redhat.com>\n\nFrom-SVN: r210511", "tree": {"sha": "639f73432e0f2001642b6e4cfaf5c93c436b124b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/639f73432e0f2001642b6e4cfaf5c93c436b124b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2f4bd2ae1b6f66290315e145be759e4a8abd7ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f4bd2ae1b6f66290315e145be759e4a8abd7ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2f4bd2ae1b6f66290315e145be759e4a8abd7ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f4bd2ae1b6f66290315e145be759e4a8abd7ac/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88d4fbcf507b3a19905f87310a241d8bc6523836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d4fbcf507b3a19905f87310a241d8bc6523836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88d4fbcf507b3a19905f87310a241d8bc6523836"}], "stats": {"total": 385, "additions": 151, "deletions": 234}, "files": [{"sha": "373b7a7c9dc777f26f2229247ca2a5e99b728330", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f4bd2ae1b6f66290315e145be759e4a8abd7ac/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f4bd2ae1b6f66290315e145be759e4a8abd7ac/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a2f4bd2ae1b6f66290315e145be759e4a8abd7ac", "patch": "@@ -1,3 +1,11 @@\n+2014-05-15  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/61166\n+\t* include/bits/parse_numbers.h: Use integral_constant to remove\n+\tduplication and simplify.\n+\t* testsuite/20_util/duration/literals/61166.cc: New.\n+\n 2014-05-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/60326"}, {"sha": "0a42381a09b62f6ba2f5c8fc363d68b43cd9805a", "filename": "libstdc++-v3/include/bits/parse_numbers.h", "status": "modified", "additions": 104, "deletions": 234, "changes": 338, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f4bd2ae1b6f66290315e145be759e4a8abd7ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f4bd2ae1b6f66290315e145be759e4a8abd7ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h?ref=a2f4bd2ae1b6f66290315e145be759e4a8abd7ac", "patch": "@@ -27,298 +27,190 @@\n  *  Do not attempt to use it directly. @headername{chrono}\n  */\n \n-#ifndef _PARSE_NUMBERS_H\n-#define _PARSE_NUMBERS_H 1\n+#ifndef _GLIBCXX_PARSE_NUMBERS_H\n+#define _GLIBCXX_PARSE_NUMBERS_H 1\n \n #pragma GCC system_header\n \n // From n3642.pdf except I added binary literals and digit separator '\\''.\n \n #if __cplusplus > 201103L\n \n+#include <limits>\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-namespace __parse_int {\n-\n+namespace __parse_int\n+{\n   template<unsigned _Base, char _Dig>\n     struct _Digit;\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, '0'>\n+    struct _Digit<_Base, '0'> : integral_constant<unsigned, 0>\n     {\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{0};\n+      using __valid = true_type;\n     };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, '1'>\n+    struct _Digit<_Base, '1'> : integral_constant<unsigned, 1>\n     {\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{1};\n+      using __valid = true_type;\n     };\n \n-  template<unsigned _Base>\n-    struct _Digit<_Base, '2'>\n+  template<unsigned _Base, unsigned _Val>\n+    struct _Digit_impl : integral_constant<unsigned, _Val>\n     {\n-      static_assert(_Base > 2, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{2};\n+      static_assert(_Base > _Val, \"invalid digit\");\n+      using __valid = true_type;\n     };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, '3'>\n-    {\n-      static_assert(_Base > 3, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{3};\n-    };\n+    struct _Digit<_Base, '2'> : _Digit_impl<_Base, 2>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, '4'>\n-    {\n-      static_assert(_Base > 4, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{4};\n-    };\n+    struct _Digit<_Base, '3'> : _Digit_impl<_Base, 3>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, '5'>\n-    {\n-      static_assert(_Base > 5, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{5};\n-    };\n+    struct _Digit<_Base, '4'> : _Digit_impl<_Base, 4>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, '6'>\n-    {\n-      static_assert(_Base > 6, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{6};\n-    };\n+    struct _Digit<_Base, '5'> : _Digit_impl<_Base, 5>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, '7'>\n-    {\n-      static_assert(_Base > 7, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{7};\n-    };\n+    struct _Digit<_Base, '6'> : _Digit_impl<_Base, 6>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, '8'>\n-    {\n-      static_assert(_Base > 8, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{8};\n-    };\n+    struct _Digit<_Base, '7'> : _Digit_impl<_Base, 7>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, '9'>\n-    {\n-      static_assert(_Base > 9, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{9};\n-    };\n+    struct _Digit<_Base, '8'> : _Digit_impl<_Base, 8>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, 'a'>\n-    {\n-      static_assert(_Base > 0xa, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{0xa};\n-    };\n+    struct _Digit<_Base, '9'> : _Digit_impl<_Base, 9>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, 'A'>\n-    {\n-      static_assert(_Base > 0xa, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{0xa};\n-    };\n+    struct _Digit<_Base, 'a'> : _Digit_impl<_Base, 0xa>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, 'b'>\n-    {\n-      static_assert(_Base > 0xb, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{0xb};\n-    };\n+    struct _Digit<_Base, 'A'> : _Digit_impl<_Base, 0xa>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, 'B'>\n-    {\n-      static_assert(_Base > 0xb, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{0xb};\n-    };\n+    struct _Digit<_Base, 'b'> : _Digit_impl<_Base, 0xb>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, 'c'>\n-    {\n-      static_assert(_Base > 0xc, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{0xc};\n-    };\n+    struct _Digit<_Base, 'B'> : _Digit_impl<_Base, 0xb>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, 'C'>\n-    {\n-      static_assert(_Base > 0xc, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{0xc};\n-    };\n+    struct _Digit<_Base, 'c'> : _Digit_impl<_Base, 0xc>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, 'd'>\n-    {\n-      static_assert(_Base > 0xd, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{0xd};\n-    };\n+    struct _Digit<_Base, 'C'> : _Digit_impl<_Base, 0xc>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, 'D'>\n-    {\n-      static_assert(_Base > 0xd, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{0xd};\n-    };\n+    struct _Digit<_Base, 'd'> : _Digit_impl<_Base, 0xd>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, 'e'>\n-    {\n-      static_assert(_Base > 0xe, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{0xe};\n-    };\n+    struct _Digit<_Base, 'D'> : _Digit_impl<_Base, 0xd>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, 'E'>\n-    {\n-      static_assert(_Base > 0xe, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{0xe};\n-    };\n+    struct _Digit<_Base, 'e'> : _Digit_impl<_Base, 0xe>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, 'f'>\n-    {\n-      static_assert(_Base > 0xf, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{0xf};\n-    };\n+    struct _Digit<_Base, 'E'> : _Digit_impl<_Base, 0xe>\n+    { };\n \n   template<unsigned _Base>\n-    struct _Digit<_Base, 'F'>\n-    {\n-      static_assert(_Base > 0xf, \"invalid digit\");\n-      static constexpr bool valid{true};\n-      static constexpr unsigned value{0xf};\n-    };\n+    struct _Digit<_Base, 'f'> : _Digit_impl<_Base, 0xf>\n+    { };\n \n-  //  Digit separator\n   template<unsigned _Base>\n-    struct _Digit<_Base, '\\''>\n-    {\n-      static constexpr bool valid{false};\n-      static constexpr unsigned value{0};\n-    };\n-\n-\n-//------------------------------------------------------------------------------\n-\n-  template<unsigned _Base, char _Dig, char... _Digs>\n-    struct _Digits_help\n-    {\n-      static constexpr unsigned\n-\tvalue{_Digit<_Base, _Dig>::valid ?\n-\t      1U + _Digits_help<_Base, _Digs...>::value :\n-\t      _Digits_help<_Base, _Digs...>::value};\n-    };\n-\n-  template<unsigned _Base, char _Dig>\n-    struct _Digits_help<_Base, _Dig>\n-    {\n-      static constexpr unsigned value{_Digit<_Base, _Dig>::valid ? 1U : 0U};\n-    };\n-\n-  template<unsigned _Base, char... _Digs>\n-    struct _Digits\n-    {\n-      static constexpr unsigned value{_Digits_help<_Base, _Digs...>::value};\n-    };\n+    struct _Digit<_Base, 'F'> : _Digit_impl<_Base, 0xf>\n+    { };\n \n+  //  Digit separator\n   template<unsigned _Base>\n-    struct _Digits<_Base>\n+    struct _Digit<_Base, '\\''> : integral_constant<unsigned, 0>\n     {\n-      static constexpr unsigned value{0U};\n+      using __valid = false_type;\n     };\n \n //------------------------------------------------------------------------------\n \n+  template<unsigned long long _Val>\n+    using __ull_constant = integral_constant<unsigned long long, _Val>;\n+\n   template<unsigned _Base, char _Dig, char... _Digs>\n     struct _Power_help\n     {\n-      static constexpr unsigned\n-\tvalue{_Digit<_Base, _Dig>::valid ?\n-\t      _Base * _Power_help<_Base, _Digs...>::value :\n-\t      _Power_help<_Base, _Digs...>::value};\n+      using __next = typename _Power_help<_Base, _Digs...>::type;\n+      using __valid_digit = typename _Digit<_Base, _Dig>::__valid;\n+      using type\n+\t= __ull_constant<__next::value * (__valid_digit{} ? _Base : 1ULL)>;\n     };\n \n   template<unsigned _Base, char _Dig>\n     struct _Power_help<_Base, _Dig>\n     {\n-      static constexpr unsigned value{_Digit<_Base, _Dig>::valid ? 1U : 0U};\n+      using __valid_digit = typename _Digit<_Base, _Dig>::__valid;\n+      using type = __ull_constant<__valid_digit::value>;\n     };\n \n   template<unsigned _Base, char... _Digs>\n-    struct _Power\n-    {\n-      static constexpr unsigned value{_Power_help<_Base, _Digs...>::value};\n-    };\n+    struct _Power : _Power_help<_Base, _Digs...>::type\n+    { };\n \n   template<unsigned _Base>\n-    struct _Power<_Base>\n-    {\n-      static constexpr unsigned value{0U};\n-    };\n+    struct _Power<_Base> : __ull_constant<0>\n+    { };\n \n //------------------------------------------------------------------------------\n \n-  template<unsigned _Base, unsigned _Pow, char _Dig, char... _Digs>\n+  template<unsigned _Base, unsigned long long _Pow, char _Dig, char... _Digs>\n     struct _Number_help\n     {\n-      static constexpr unsigned\n-\tvalue{_Digit<_Base, _Dig>::valid ?\n-\t      _Pow * _Digit<_Base, _Dig>::value\n-\t      + _Number_help<_Base, _Pow / _Base, _Digs...>::value :\n-\t      _Number_help<_Base, _Pow, _Digs...>::value};\n+      using __digit = _Digit<_Base, _Dig>;\n+      using __valid_digit = typename __digit::__valid;\n+      using __next = _Number_help<_Base,\n+\t\t\t\t  _Pow / (_Base * __valid_digit::value),\n+\t\t\t\t  _Digs...>;\n+      using type = __ull_constant<_Pow * __digit::value + __next::type::value>;\n     };\n \n-  template<unsigned _Base, unsigned _Pow, char _Dig>\n+  template<unsigned _Base, unsigned long long _Pow, char _Dig>\n     struct _Number_help<_Base, _Pow, _Dig>\n     {\n       //static_assert(_Pow == 1U, \"power should be one\");\n-      static constexpr unsigned\n-\tvalue{_Digit<_Base, _Dig>::valid ? _Digit<_Base, _Dig>::value : 0U};\n+      using type = __ull_constant<_Digit<_Base, _Dig>::value>;\n     };\n \n   template<unsigned _Base, char... _Digs>\n     struct _Number\n-    {\n-      static constexpr unsigned\n-\tvalue{_Number_help<_Base, _Power<_Base, _Digs...>::value,\n-\t\t\t   _Digs...>::value};\n-    };\n+    : _Number_help<_Base, _Power<_Base, _Digs...>::value, _Digs...>::type\n+    { };\n \n   template<unsigned _Base>\n     struct _Number<_Base>\n-    {\n-      static constexpr unsigned value{0U};\n-    };\n+    : __ull_constant<0>\n+    { };\n \n //------------------------------------------------------------------------------\n //  This _Parse_int is the same 'level' as the old _Base_dispatch.\n@@ -328,84 +220,62 @@ namespace __parse_int {\n \n   template<char... _Digs>\n     struct _Parse_int<'0', 'b', _Digs...>\n-    {\n-      static constexpr unsigned long long\n-\tvalue{_Number<2U, _Digs...>::value};\n-    };\n+    : _Number<2U, _Digs...>::type\n+    { };\n \n   template<char... _Digs>\n     struct _Parse_int<'0', 'B', _Digs...>\n-    {\n-      static constexpr unsigned long long\n-\tvalue{_Number<2U, _Digs...>::value};\n-    };\n+    : _Number<2U, _Digs...>::type\n+    { };\n \n   template<char... _Digs>\n     struct _Parse_int<'0', 'x', _Digs...>\n-    {\n-      static constexpr unsigned long long\n-\tvalue{_Number<16U, _Digs...>::value};\n-    };\n+    : _Number<16U, _Digs...>::type\n+    { };\n \n   template<char... _Digs>\n     struct _Parse_int<'0', 'X', _Digs...>\n-    {\n-      static constexpr unsigned long long\n-\tvalue{_Number<16U, _Digs...>::value};\n-    };\n+    : _Number<16U, _Digs...>::type\n+    { };\n \n   template<char... _Digs>\n     struct _Parse_int<'0', _Digs...>\n-    {\n-      static constexpr unsigned long long\n-\tvalue{_Number<8U, _Digs...>::value};\n-    };\n+    : _Number<8U, _Digs...>::type\n+    { };\n \n   template<char... _Digs>\n     struct _Parse_int\n-    {\n-      static constexpr unsigned long long\n-\tvalue{_Number<10U, _Digs...>::value};\n-    };\n+    : _Number<10U, _Digs...>::type\n+    { };\n \n } // namespace __parse_int\n \n \n-namespace __select_int {\n-\n+namespace __select_int\n+{\n   template<unsigned long long _Val, typename... _Ints>\n     struct _Select_int_base;\n \n   template<unsigned long long _Val, typename _IntType, typename... _Ints>\n     struct _Select_int_base<_Val, _IntType, _Ints...>\n-    : integral_constant\n-      <\n-\ttypename conditional\n-\t<\n-\t  _Val <= static_cast<unsigned long long>\n-\t\t    (std::numeric_limits<_IntType>::max()),\n-\t  _IntType,\n-\t  typename _Select_int_base<_Val, _Ints...>::value_type\n-\t>::type,\n-\t_Val\n-      >\n+    : conditional_t<(_Val <= std::numeric_limits<_IntType>::max()),\n+\t\t    integral_constant<_IntType, _Val>,\n+\t\t    _Select_int_base<_Val, _Ints...>>\n     { };\n \n   template<unsigned long long _Val>\n-    struct _Select_int_base<_Val> : integral_constant<unsigned long long, _Val>\n+    struct _Select_int_base<_Val>\n     { };\n \n   template<char... _Digs>\n-    struct _Select_int\n-    : _Select_int_base<\n+    using _Select_int = typename _Select_int_base<\n \t__parse_int::_Parse_int<_Digs...>::value,\n \tunsigned char,\n \tunsigned short,\n \tunsigned int,\n \tunsigned long,\n \tunsigned long long\n-      >\n-    { };\n+      >::type;\n \n } // namespace __select_int\n \n@@ -414,4 +284,4 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #endif // __cplusplus > 201103L\n \n-#endif // _PARSE_NUMBERS_H\n+#endif // _GLIBCXX_PARSE_NUMBERS_H"}, {"sha": "e06adf8b060f5710146270dd02553159e6f741e1", "filename": "libstdc++-v3/testsuite/20_util/duration/literals/61166.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f4bd2ae1b6f66290315e145be759e4a8abd7ac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2F61166.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f4bd2ae1b6f66290315e145be759e4a8abd7ac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2F61166.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2F61166.cc?ref=a2f4bd2ae1b6f66290315e145be759e4a8abd7ac", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do run }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// libstdc++/61166\n+\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std::literals::chrono_literals;\n+\n+  // std::numeric_limits<unsigned>::max() == 4294967295\n+  VERIFY( (429496729510h).count() == 429496729510 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}