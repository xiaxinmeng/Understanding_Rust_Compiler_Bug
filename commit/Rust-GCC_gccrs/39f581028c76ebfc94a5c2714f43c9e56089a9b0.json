{"sha": "39f581028c76ebfc94a5c2714f43c9e56089a9b0", "node_id": "C_kwDOANBUbNoAKDM5ZjU4MTAyOGM3NmViZmM5NGE1YzI3MTRmNDNjOWU1NjA4OWE5YjA", "commit": {"author": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2022-01-18T16:04:06Z"}, "committer": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2022-01-19T12:45:58Z"}, "message": "libstdc++: Fix for non-constexpr math_errhandling\n\nUse SFINAE magic to support: \"It is unspecified whether math_errhandling\nis a macro or an identifier with external linkage.\" [C Standard]\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd.h (__floating_point_flags): Do\n\tnot rely on math_errhandling to expand to a constant expression.", "tree": {"sha": "3a06c8127a051a0b74024a05dc4234f9d95ae3d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a06c8127a051a0b74024a05dc4234f9d95ae3d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39f581028c76ebfc94a5c2714f43c9e56089a9b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f581028c76ebfc94a5c2714f43c9e56089a9b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f581028c76ebfc94a5c2714f43c9e56089a9b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f581028c76ebfc94a5c2714f43c9e56089a9b0/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cef99175af1ad95283d4b35bced73c3a510f6d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cef99175af1ad95283d4b35bced73c3a510f6d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cef99175af1ad95283d4b35bced73c3a510f6d6"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "82e9841195e1dc84bffcd3d28f7d5a197df9869f", "filename": "libstdc++-v3/include/experimental/bits/simd.h", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f581028c76ebfc94a5c2714f43c9e56089a9b0/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f581028c76ebfc94a5c2714f43c9e56089a9b0/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h?ref=39f581028c76ebfc94a5c2714f43c9e56089a9b0", "patch": "@@ -283,20 +283,34 @@ constexpr inline bool __have_power_vmx = __have_power_vsx;\n \n namespace __detail\n {\n-  constexpr bool __handle_fpexcept =\n #ifdef math_errhandling\n-    math_errhandling & MATH_ERREXCEPT;\n-#elif defined __FAST_MATH__\n-    false;\n+  // Determines _S_handle_fpexcept from math_errhandling if it is defined and expands to a constant\n+  // expression. math_errhandling may expand to an extern symbol, in which case a constexpr value\n+  // must be guessed.\n+  template <int = math_errhandling>\n+    constexpr bool __handle_fpexcept_impl(int)\n+    { return math_errhandling & MATH_ERREXCEPT; }\n+#endif\n+\n+  // Fallback if math_errhandling doesn't work: with fast-math assume floating-point exceptions are\n+  // ignored, otherwise implement correct exception behavior.\n+  constexpr bool __handle_fpexcept_impl(float)\n+  {\n+#if defined __FAST_MATH__\n+    return false;\n #else\n-    true;\n+    return true;\n #endif\n+  }\n+\n+  /// True if math functions must raise floating-point exceptions as specified by C17.\n+  static constexpr bool _S_handle_fpexcept = __handle_fpexcept_impl(0);\n \n   constexpr std::uint_least64_t\n   __floating_point_flags()\n   {\n     std::uint_least64_t __flags = 0;\n-    if constexpr (__handle_fpexcept)\n+    if constexpr (_S_handle_fpexcept)\n       __flags |= 1;\n #ifdef __FAST_MATH__\n     __flags |= 1 << 1;"}]}