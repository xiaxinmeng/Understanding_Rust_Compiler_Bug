{"sha": "4971dd802d586f57d999152825d407800970be4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk3MWRkODAyZDU4NmY1N2Q5OTkxNTI4MjVkNDA3ODAwOTcwYmU0ZQ==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-07-22T09:46:54Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-07-22T09:46:54Z"}, "message": "expr.c (gfc_find_stat_co): Fixed whitespaces.\n\ngcc/fortran/ChangeLog:\n\n2016-07-22  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\t* expr.c (gfc_find_stat_co): Fixed whitespaces.\n\t* gfortran.texi: Fixed typos and reversed meaning of caf_get()'s\n\tsrc and dst description.\n\t* trans-decl.c (gfc_build_builtin_function_decls): Fixed style\n\tand corrected fnspec for caf functions.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_caf_get): Fixed style.\n\t(conv_caf_send): Dito.\n\nFrom-SVN: r238635", "tree": {"sha": "a95e86abd82af13a39f69fcdd755b7eeafc63c7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a95e86abd82af13a39f69fcdd755b7eeafc63c7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4971dd802d586f57d999152825d407800970be4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4971dd802d586f57d999152825d407800970be4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4971dd802d586f57d999152825d407800970be4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4971dd802d586f57d999152825d407800970be4e/comments", "author": null, "committer": null, "parents": [{"sha": "b588c7f866a67ae221505af7184189acfe9fbbc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b588c7f866a67ae221505af7184189acfe9fbbc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b588c7f866a67ae221505af7184189acfe9fbbc4"}], "stats": {"total": 86, "additions": 48, "deletions": 38}, "files": [{"sha": "54f87d474c1899dae18a1e3279f2dade9d65db47", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4971dd802d586f57d999152825d407800970be4e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4971dd802d586f57d999152825d407800970be4e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4971dd802d586f57d999152825d407800970be4e", "patch": "@@ -1,3 +1,13 @@\n+2016-07-22  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\t* expr.c (gfc_find_stat_co): Fixed whitespaces.\n+\t* gfortran.texi: Fixed typos and reversed meaning of caf_get()'s\n+\tsrc and dst description.\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Fixed style\n+\tand corrected fnspec for caf functions.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_caf_get): Fixed style.\n+\t(conv_caf_send): Dito.\n+\n 2016-07-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/71902"}, {"sha": "6d0eb22eea54ef2b79da5f0507e0e44df5083707", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4971dd802d586f57d999152825d407800970be4e/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4971dd802d586f57d999152825d407800970be4e/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=4971dd802d586f57d999152825d407800970be4e", "patch": "@@ -4437,9 +4437,9 @@ gfc_find_stat_co(gfc_expr *e)\n     if (ref->type == REF_ARRAY && ref->u.ar.codimen > 0)\n       return ref->u.ar.stat;\n \n-  if(e->value.function.actual->expr)\n-    for(ref = e->value.function.actual->expr->ref; ref;\n-\tref = ref->next)\n+  if (e->value.function.actual->expr)\n+    for (ref = e->value.function.actual->expr->ref; ref;\n+\t ref = ref->next)\n       if (ref->type == REF_ARRAY && ref->u.ar.codimen > 0)\n \treturn ref->u.ar.stat;\n "}, {"sha": "cc80204b7935633630a214b97984daaedb208ffc", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4971dd802d586f57d999152825d407800970be4e/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4971dd802d586f57d999152825d407800970be4e/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=4971dd802d586f57d999152825d407800970be4e", "patch": "@@ -3799,7 +3799,7 @@ compared to the base address of the coarray.\n number.\n @item @var{dest} @tab intent(in) Array descriptor for the remote image for the\n bounds and the size. The base_addr shall not be accessed.\n-@item @var{dst_vector} @tab intent(int)  If not NULL, it contains the vector\n+@item @var{dst_vector} @tab intent(in)  If not NULL, it contains the vector\n subscript of the destination array; the values are relative to the dimension\n triplet of the dest argument.\n @item @var{src} @tab intent(in) Array descriptor of the local array to be\n@@ -3839,7 +3839,7 @@ Called to get an array section or whole array from a a remote,\n image identified by the image_index.\n \n @item @emph{Syntax}:\n-@code{void _gfortran_caf_get_desc (caf_token_t token, size_t offset,\n+@code{void _gfortran_caf_get (caf_token_t token, size_t offset,\n int image_index, gfc_descriptor_t *src, caf_vector_t *src_vector,\n gfc_descriptor_t *dest, int src_kind, int dst_kind, bool may_require_tmp)}\n \n@@ -3850,13 +3850,13 @@ gfc_descriptor_t *dest, int src_kind, int dst_kind, bool may_require_tmp)}\n compared to the base address of the coarray.\n @item @var{image_index} @tab The ID of the remote image; must be a positive\n number.\n-@item @var{dest} @tab intent(in) Array descriptor of the local array to be\n-transferred to the remote image\n+@item @var{dest} @tab intent(out) Array descriptor of the local array to store\n+the data transferred from the remote image\n @item @var{src} @tab intent(in) Array descriptor for the remote image for the\n bounds and the size. The base_addr shall not be accessed.\n-@item @var{src_vector} @tab intent(int)  If not NULL, it contains the vector\n-subscript of the destination array; the values are relative to the dimension\n-triplet of the dest argument.\n+@item @var{src_vector} @tab intent(in)  If not NULL, it contains the vector\n+subscript of the source array; the values are relative to the dimension\n+triplet of the src argument.\n @item @var{dst_kind} @tab Kind of the destination argument\n @item @var{src_kind} @tab Kind of the source argument\n @item @var{may_require_tmp} @tab The variable is false it is known at compile"}, {"sha": "05dfcb4be7044c5f372b9ad2f72a93c94b96f07e", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4971dd802d586f57d999152825d407800970be4e/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4971dd802d586f57d999152825d407800970be4e/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=4971dd802d586f57d999152825d407800970be4e", "patch": "@@ -3538,38 +3538,38 @@ gfc_build_builtin_function_decls (void)\n \t= build_pointer_type (build_pointer_type (pchar_type_node));\n \n       gfor_fndecl_caf_init = gfc_build_library_function_decl (\n-\t\t   get_identifier (PREFIX(\"caf_init\")),  void_type_node,\n-\t\t   2, pint_type, pppchar_type);\n+\tget_identifier (PREFIX(\"caf_init\")), void_type_node,\n+\t2, pint_type, pppchar_type);\n \n       gfor_fndecl_caf_finalize = gfc_build_library_function_decl (\n \tget_identifier (PREFIX(\"caf_finalize\")), void_type_node, 0);\n \n       gfor_fndecl_caf_this_image = gfc_build_library_function_decl (\n-\t\t   get_identifier (PREFIX(\"caf_this_image\")), integer_type_node,\n-\t\t   1, integer_type_node);\n+\tget_identifier (PREFIX(\"caf_this_image\")), integer_type_node,\n+\t1, integer_type_node);\n \n       gfor_fndecl_caf_num_images = gfc_build_library_function_decl (\n-\t\t   get_identifier (PREFIX(\"caf_num_images\")), integer_type_node,\n-\t\t   2, integer_type_node, integer_type_node);\n+\tget_identifier (PREFIX(\"caf_num_images\")), integer_type_node,\n+\t2, integer_type_node, integer_type_node);\n \n       gfor_fndecl_caf_register = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_register\")), \"...WWW\", pvoid_type_node, 6,\n-        size_type_node, integer_type_node, ppvoid_type_node, pint_type,\n-        pchar_type_node, integer_type_node);\n+\tsize_type_node, integer_type_node, ppvoid_type_node, pint_type,\n+\tpchar_type_node, integer_type_node);\n \n       gfor_fndecl_caf_deregister = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_deregister\")), \".WWW\", void_type_node, 4,\n-        ppvoid_type_node, pint_type, pchar_type_node, integer_type_node);\n+\tppvoid_type_node, pint_type, pchar_type_node, integer_type_node);\n \n       gfor_fndecl_caf_get = gfc_build_library_function_decl_with_spec (\n-\tget_identifier (PREFIX(\"caf_get\")), \".R.RRRWW\", void_type_node, 10,\n-        pvoid_type_node, size_type_node, integer_type_node, pvoid_type_node,\n+\tget_identifier (PREFIX(\"caf_get\")), \".R.RRWRRRW\", void_type_node, 10,\n+\tpvoid_type_node, size_type_node, integer_type_node, pvoid_type_node,\n \tpvoid_type_node, pvoid_type_node, integer_type_node, integer_type_node,\n \tboolean_type_node, pint_type);\n \n       gfor_fndecl_caf_send = gfc_build_library_function_decl_with_spec (\n-\tget_identifier (PREFIX(\"caf_send\")), \".R.RRRRW\", void_type_node, 10,\n-        pvoid_type_node, size_type_node, integer_type_node, pvoid_type_node,\n+\tget_identifier (PREFIX(\"caf_send\")), \".R.RRRRRRW\", void_type_node, 10,\n+\tpvoid_type_node, size_type_node, integer_type_node, pvoid_type_node,\n \tpvoid_type_node, pvoid_type_node, integer_type_node, integer_type_node,\n \tboolean_type_node, pint_type);\n \n@@ -3606,31 +3606,31 @@ gfc_build_builtin_function_decls (void)\n       TREE_THIS_VOLATILE (gfor_fndecl_caf_error_stop_str) = 1;\n \n       gfor_fndecl_caf_stop_numeric = gfc_build_library_function_decl_with_spec (\n-        get_identifier (PREFIX(\"caf_stop_numeric\")), \".R.\",\n-        void_type_node, 1, gfc_int4_type_node);\n+\tget_identifier (PREFIX(\"caf_stop_numeric\")), \".R.\",\n+\tvoid_type_node, 1, gfc_int4_type_node);\n       /* CAF's STOP doesn't return.  */\n       TREE_THIS_VOLATILE (gfor_fndecl_caf_stop_numeric) = 1;\n \n       gfor_fndecl_caf_stop_str = gfc_build_library_function_decl_with_spec (\n-        get_identifier (PREFIX(\"caf_stop_str\")), \".R.\",\n-        void_type_node, 2, pchar_type_node, gfc_int4_type_node);\n+\tget_identifier (PREFIX(\"caf_stop_str\")), \".R.\",\n+\tvoid_type_node, 2, pchar_type_node, gfc_int4_type_node);\n       /* CAF's STOP doesn't return.  */\n       TREE_THIS_VOLATILE (gfor_fndecl_caf_stop_str) = 1;\n \n       gfor_fndecl_caf_atomic_def = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_atomic_define\")), \"R..RW\",\n \tvoid_type_node, 7, pvoid_type_node, size_type_node, integer_type_node,\n-        pvoid_type_node, pint_type, integer_type_node, integer_type_node);\n+\tpvoid_type_node, pint_type, integer_type_node, integer_type_node);\n \n       gfor_fndecl_caf_atomic_ref = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_atomic_ref\")), \"R..WW\",\n \tvoid_type_node, 7, pvoid_type_node, size_type_node, integer_type_node,\n-        pvoid_type_node, pint_type, integer_type_node, integer_type_node);\n+\tpvoid_type_node, pint_type, integer_type_node, integer_type_node);\n \n       gfor_fndecl_caf_atomic_cas = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_atomic_cas\")), \"R..WRRW\",\n \tvoid_type_node, 9, pvoid_type_node, size_type_node, integer_type_node,\n-        pvoid_type_node, pvoid_type_node, pvoid_type_node, pint_type,\n+\tpvoid_type_node, pvoid_type_node, pvoid_type_node, pint_type,\n \tinteger_type_node, integer_type_node);\n \n       gfor_fndecl_caf_atomic_op = gfc_build_library_function_decl_with_spec (\n@@ -3682,7 +3682,7 @@ gfc_build_builtin_function_decls (void)\n       gfor_fndecl_co_reduce = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_co_reduce\")), \"W.R.WW\",\n \tvoid_type_node, 8, pvoid_type_node,\n-        build_pointer_type (build_varargs_function_type_list (void_type_node,\n+\tbuild_pointer_type (build_varargs_function_type_list (void_type_node,\n \t\t\t\t\t\t\t      NULL_TREE)),\n \tinteger_type_node, integer_type_node, pint_type, pchar_type_node,\n \tinteger_type_node, integer_type_node);"}, {"sha": "abc1c6d36fe0062232b76df56450903dddb8deef", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4971dd802d586f57d999152825d407800970be4e/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4971dd802d586f57d999152825d407800970be4e/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=4971dd802d586f57d999152825d407800970be4e", "patch": "@@ -1122,12 +1122,12 @@ gfc_conv_intrinsic_caf_get (gfc_se *se, gfc_expr *expr, tree lhs, tree lhs_kind,\n   dst_var = lhs;\n \n   vec = null_pointer_node;\n-  tmp_stat = gfc_find_stat_co(expr);\n+  tmp_stat = gfc_find_stat_co (expr);\n \n   if (tmp_stat)\n     {\n       gfc_se stat_se;\n-      gfc_init_se(&stat_se, NULL);\n+      gfc_init_se (&stat_se, NULL);\n       gfc_conv_expr_reference (&stat_se, tmp_stat);\n       stat = stat_se.expr;\n       gfc_add_block_to_block (&se->pre, &stat_se.pre);\n@@ -1225,7 +1225,7 @@ gfc_conv_intrinsic_caf_get (gfc_se *se, gfc_expr *expr, tree lhs, tree lhs_kind,\n     may_require_tmp = boolean_false_node;\n \n   /* It guarantees memory consistency within the same segment */\n-  tmp = gfc_build_string_const (strlen (\"memory\")+1, \"memory\"),\n+  tmp = gfc_build_string_const (strlen (\"memory\") + 1, \"memory\"),\n   tmp = build5_loc (input_location, ASM_EXPR, void_type_node,\n \t\t    gfc_build_string_const (1, \"\"), NULL_TREE, NULL_TREE,\n \t\t    tree_cons (NULL_TREE, tmp, NULL_TREE), NULL_TREE);\n@@ -1390,7 +1390,7 @@ conv_caf_send (gfc_code *code) {\n \n   rhs_kind = build_int_cst (integer_type_node, rhs_expr->ts.kind);\n \n-  tmp_stat = gfc_find_stat_co(lhs_expr);\n+  tmp_stat = gfc_find_stat_co (lhs_expr);\n \n   if (tmp_stat)\n     {\n@@ -1414,8 +1414,8 @@ conv_caf_send (gfc_code *code) {\n       tree rhs_token, rhs_offset, rhs_image_index;\n \n       /* It guarantees memory consistency within the same segment */\n-      tmp = gfc_build_string_const (strlen (\"memory\")+1, \"memory\"),\n-\ttmp = build5_loc (input_location, ASM_EXPR, void_type_node,\n+      tmp = gfc_build_string_const (strlen (\"memory\") + 1, \"memory\"),\n+      tmp = build5_loc (input_location, ASM_EXPR, void_type_node,\n \t\t\t  gfc_build_string_const (1, \"\"), NULL_TREE, NULL_TREE,\n \t\t\t  tree_cons (NULL_TREE, tmp, NULL_TREE), NULL_TREE);\n       ASM_VOLATILE_P (tmp) = 1;\n@@ -1438,7 +1438,7 @@ conv_caf_send (gfc_code *code) {\n   gfc_add_block_to_block (&block, &rhs_se.post);\n \n   /* It guarantees memory consistency within the same segment */\n-  tmp = gfc_build_string_const (strlen (\"memory\")+1, \"memory\"),\n+  tmp = gfc_build_string_const (strlen (\"memory\") + 1, \"memory\"),\n   tmp = build5_loc (input_location, ASM_EXPR, void_type_node,\n \t\t    gfc_build_string_const (1, \"\"), NULL_TREE, NULL_TREE,\n \t\t    tree_cons (NULL_TREE, tmp, NULL_TREE), NULL_TREE);"}]}