{"sha": "72e3a529238a86235f74f563d13f27b26b2b816b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJlM2E1MjkyMzhhODYyMzVmNzRmNTYzZDEzZjI3YjI2YjJiODE2Yg==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2018-12-19T17:34:18Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2018-12-19T17:34:18Z"}, "message": "[ARM] Optimize executable size when using softfloat fmul/dmul\n\nSoftfloat single precision and double precision floating-point\nmultiplication routines in libgcc share some code with the\nfloating-point division of their corresponding precision. As the code\nis structured now, this leads to *all* division code being pulled in an\nexecutable in softfloat mode even if only multiplication is\nperformed.\n\nThis patch create some new LIB1ASMFUNCS macros to also build files with\njust the multiplication and shared code as weak symbols. By putting\nthese earlier in the static library, they can then be picked up when\nonly multiplication is used and they are overriden by the global\ndefinition in the existing file containing both multiplication and\ndivision code when division is needed.\n\nThe patch also removes changes made to the FUNC_START and ARM_FUNC_START\nmacros in r218124 since the intent was to put multiplication and\ndivision code into their own section in a later patch to achieve the\nsame size optimization. That approach relied on specific section layout\nto ensure multiplication and division were not too far from the shared\nbit of code in order to the branches to be within range. Due to lack of\nguarantee regarding section layout, in particular with all the\npossibility of linker scripts, this approach was chosen instead. This\npatch keeps the two testcases that were posted by Tony Wang on the mailing\nlist to implement this approach and adds a new one.\n\n2018-12-19  Thomas Preud'homme  <thomas.preudhomme@linaro.org>\n\n    libgcc/\n    * /config/arm/lib1funcs.S (FUNC_START): Remove unused sp_section\n    parameter and corresponding code.\n    (ARM_FUNC_START): Likewise in both definitions.\n    Also update footer comment about condition that need to match with\n    gcc/config/arm/elf.h to also include libgcc/config/arm/t-arm.\n    * config/arm/ieee754-df.S (muldf3): Also build it if L_arm_muldf3 is\n    defined.  Weakly define it in this case.\n    * config/arm/ieee754-sf.S (mulsf3): Likewise with L_arm_mulsf3.\n    * config/arm/t-elf (LIB1ASMFUNCS): Build _arm_muldf3.o and\n    _arm_mulsf3.o before muldiv versions if targeting Thumb-1 only. Add\n    comment to keep condition in sync with the one in\n    libgcc/config/arm/lib1funcs.S and gcc/config/arm/elf.h.\n\n    gcc/\n    * config/arm/elf.h: Update comment about condition that need to\n    match with libgcc/config/arm/lib1funcs.S to also include\n    libgcc/config/arm/t-arm.\n    * doc/sourcebuild.texi (output-exists, output-exists-not): Rename\n    subsubsection these directives are in to \"Check for output files\".\n    Move scan-symbol to that section and add to it new scan-symbol-not\n    directive.\n\n2018-12-19  Tony Wang  <tony.wang@arm.com>\n\t    Thomas Preud'homme  <thomas.preudhomme@linaro.org>\n\n    gcc/testsuite/\n    * lib/lto.exp (lto-execute): Define output_file and testname_with_flags\n    to same value as execname.\n    (scan-symbol): Move and rename to ...\n    * lib/gcc-dg.exp (scan-symbol-common): This.  Adapt into a\n    helper function returning true or false if a symbol is present.\n    (scan-symbol): New procedure.\n    (scan-symbol-not): Likewise.\n    * gcc.target/arm/size-optimization-ieee-1.c: New testcase.\n    * gcc.target/arm/size-optimization-ieee-2.c: Likewise.\n    * gcc.target/arm/size-optimization-ieee-3.c: Likewise.\n\nFrom-SVN: r267282", "tree": {"sha": "2470dfe1119acfbbf4d3ce2d93a9fded5cb0f681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2470dfe1119acfbbf4d3ce2d93a9fded5cb0f681"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72e3a529238a86235f74f563d13f27b26b2b816b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e3a529238a86235f74f563d13f27b26b2b816b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72e3a529238a86235f74f563d13f27b26b2b816b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e3a529238a86235f74f563d13f27b26b2b816b/comments", "author": null, "committer": null, "parents": [{"sha": "c4686fa91e3f4852f0182df220ced85b6ff0e13c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4686fa91e3f4852f0182df220ced85b6ff0e13c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4686fa91e3f4852f0182df220ced85b6ff0e13c"}], "stats": {"total": 353, "additions": 281, "deletions": 72}, "files": [{"sha": "53cdc837a5c960e28fbc8e1b5977b00b3ded5c30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72e3a529238a86235f74f563d13f27b26b2b816b", "patch": "@@ -1,3 +1,13 @@\n+2018-12-19  Thomas Preud'homme  <thomas.preudhomme@linaro.org>\n+\n+\t* config/arm/elf.h: Update comment about condition that need to\n+\tmatch with libgcc/config/arm/lib1funcs.S to also include\n+\tlibgcc/config/arm/t-arm.\n+\t* doc/sourcebuild.texi (output-exists, output-exists-not): Rename\n+\tsubsubsection these directives are in to \"Check for output files\".\n+\tMove scan-symbol to that section and add to it new scan-symbol-not\n+\tdirective.\n+\n 2018-12-19  Tom de Vries  <tdevries@suse.de>\n \n \t* config/nvptx/nvptx.c (PTX_CTA_SIZE): Define."}, {"sha": "1e00e99afc674851fd4ea985d230fecd191d25ad", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=72e3a529238a86235f74f563d13f27b26b2b816b", "patch": "@@ -137,7 +137,7 @@\n \n /* Horrible hack: We want to prevent some libgcc routines being included\n    for some multilibs.  The condition should match the one in\n-   libgcc/config/arm/lib1funcs.S.  */\n+   libgcc/config/arm/lib1funcs.S and libgcc/config/arm/t-elf.  */\n #if __ARM_ARCH_ISA_ARM || __ARM_ARCH_ISA_THUMB != 1\n #undef L_fixdfsi\n #undef L_fixunsdfsi"}, {"sha": "29c693b9644afd947d3eeacce84b796062dc2e35", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=72e3a529238a86235f74f563d13f27b26b2b816b", "patch": "@@ -2668,21 +2668,20 @@ Passes if @var{regex} does not match demangled text in the dump file with\n suffix @var{suffix}.\n @end table\n \n-@subsubsection Verify that an output files exists or not\n+@subsubsection Check for output files\n \n @table @code\n @item output-exists [@{ target/xfail @var{selector} @}]\n Passes if compiler output file exists.\n \n @item output-exists-not [@{ target/xfail @var{selector} @}]\n Passes if compiler output file does not exist.\n-@end table\n-\n-@subsubsection Check for LTO tests\n \n-@table @code\n @item scan-symbol @var{regexp} [@{ target/xfail @var{selector} @}]\n Passes if the pattern is present in the final executable.\n+\n+@item scan-symbol-not @var{regexp} [@{ target/xfail @var{selector} @}]\n+Passes if the pattern is absent from the final executable.\n @end table\n \n @subsubsection Checks for @command{gcov} tests"}, {"sha": "e199cd09728340a500eca99c39eff115bf8425c7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72e3a529238a86235f74f563d13f27b26b2b816b", "patch": "@@ -1,3 +1,17 @@\n+2018-12-19  Tony Wang  <tony.wang@arm.com>\n+\t    Thomas Preud'homme  <thomas.preudhomme@linaro.org>\n+\n+\t* lib/lto.exp (lto-execute): Define output_file and testname_with_flags\n+\tto same value as execname.\n+\t(scan-symbol): Move and rename to ...\n+\t* lib/gcc-dg.exp (scan-symbol-common): This.  Adapt into a\n+\thelper function returning true or false if a symbol is present.\n+\t(scan-symbol): New procedure.\n+\t(scan-symbol-not): Likewise.\n+\t* gcc.target/arm/size-optimization-ieee-1.c: New testcase.\n+\t* gcc.target/arm/size-optimization-ieee-2.c: Likewise.\n+\t* gcc.target/arm/size-optimization-ieee-3.c: Likewise.\n+\n 2018-12-19  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* g++.dg/asm-qual-3.C: New testcase."}, {"sha": "34090f20fec38fa314db3a3d09cf60dcd5143f73", "filename": "gcc/testsuite/gcc.target/arm/size-optimization-ieee-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-1.c?ref=72e3a529238a86235f74f563d13f27b26b2b816b", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do link { target arm_soft_ok } } */\n+/* { dg-options \"-mfloat-abi=soft\" } */\n+\n+int\n+foo (void)\n+{\n+  volatile float a;\n+  volatile float b;\n+  volatile float c = a * b;\n+  return 0;\n+}\n+\n+int\n+bar (void)\n+{\n+  volatile double a;\n+  volatile double b;\n+  volatile double c = a * b;\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  foo ();\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-symbol \"__aeabi_fmul\" } } */\n+/* { dg-final { scan-symbol \"__aeabi_dmul\" } } */\n+/* { dg-final { scan-symbol-not \"__aeabi_fdiv\" } } */\n+/* { dg-final { scan-symbol-not \"__aeabi_ddiv\" } } */"}, {"sha": "75337894a9c9321e72cde80f7f7d465ce2da7cba", "filename": "gcc/testsuite/gcc.target/arm/size-optimization-ieee-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-2.c?ref=72e3a529238a86235f74f563d13f27b26b2b816b", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do link { target arm_soft_ok } } */\n+/* { dg-options \"-mfloat-abi=soft\" } */\n+\n+int\n+foo (void)\n+{\n+  volatile float a;\n+  volatile float b;\n+  volatile float c = a / b;\n+  return 0;\n+}\n+\n+int\n+bar (void)\n+{\n+  volatile double a;\n+  volatile double b;\n+  volatile double c = a / b;\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  foo ();\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-symbol \"__aeabi_fdiv\" } } */\n+/* { dg-final { scan-symbol \"__aeabi_ddiv\" } } */"}, {"sha": "63c92b3bbb733ad81b9a90be12537e5a2c7a03a2", "filename": "gcc/testsuite/gcc.target/arm/size-optimization-ieee-3.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-3.c?ref=72e3a529238a86235f74f563d13f27b26b2b816b", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do link { target arm_soft_ok } } */\n+/* { dg-options \"-mfloat-abi=soft\" } */\n+\n+int\n+foo (void)\n+{\n+  volatile float a;\n+  volatile float b;\n+  volatile float c = a * b + a / b;\n+  return 0;\n+}\n+\n+int\n+bar (void)\n+{\n+  volatile double a;\n+  volatile double b;\n+  volatile double c = a * b + a / b;\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  foo ();\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-symbol \"__aeabi_fmul\" } } */\n+/* { dg-final { scan-symbol \"__aeabi_dmul\" } } */\n+/* { dg-final { scan-symbol \"__aeabi_fdiv\" } } */\n+/* { dg-final { scan-symbol \"__aeabi_ddiv\" } } */"}, {"sha": "e47f80de3f41147287fd2ba7f6fb574c422f5a22", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=72e3a529238a86235f74f563d13f27b26b2b816b", "patch": "@@ -1244,5 +1244,81 @@ proc gdb-exists { args } {\n     return 0;\n }\n \n+# Helper function for scan-symbol and scan-symbol-not. It scans a symbol in\n+# the final executable and return 1 if present, otherwise fail.\n+#\n+# Argument 0 is the regexp to match.\n+# Argument 1 handles expected failures and the like\n+proc scan-symbol-common { scan_directive args } {\n+    global nm\n+    global base_dir\n+\n+    # Access variable from gcc-dg-test-1 or lto-execute.\n+    upvar 3 output_file output_file\n+\n+    if { [llength $args] >= 2 } {\n+\tswitch [dg-process-target [lindex $args 1]] {\n+\t    \"S\" { }\n+\t    \"N\" { return }\n+\t    \"F\" { setup_xfail \"*-*-*\" }\n+\t    \"P\" { }\n+\t}\n+    }\n+\n+    # Find nm like we find g++ in g++.exp.\n+    if ![info exists nm]  {\n+\tset nm [findfile $base_dir/../../../binutils/nm \\\n+\t\t$base_dir/../../../binutils/nm \\\n+\t        [findfile $base_dir/../../nm $base_dir/../../nm \\\n+\t\t      [findfile $base_dir/nm $base_dir/nm \\\n+\t\t       [transform nm]]]]\n+\tverbose -log \"nm is $nm\"\n+    }\n+\n+    set output_file \"[glob -nocomplain $output_file]\"\n+    if { $output_file == \"\" } {\n+\tfail \"$scan_directive $args: output file does not exist\"\n+\treturn\n+    }\n+\n+    set fd [open \"| $nm $output_file\" r]\n+    set text [read $fd]\n+    close $fd\n+\n+    if [regexp -- [lindex $args 0] $text] {\n+\treturn 1\n+    } else {\n+\treturn 0\n+    }\n+}\n+\n+# Utility for scanning a symbol in the final executable, invoked via dg-final.\n+# Call pass if pattern is present, otherwise fail.\n+#\n+# Argument 0 is the regexp to match.\n+# Argument 1 handles expected failures and the like\n+proc scan-symbol { args } {\n+    set testcase [testname-for-summary]\n+    if { [scan-symbol-common \"scan-symbol\" $args]} {\n+\tpass \"$testcase   scan-symbol $args\"\n+    } else {\n+\tfail \"$testcase   scan-symbol $args\"\n+    }\n+}\n+\n+# Utility for scanning a symbol in the final executable, invoked via dg-final.\n+# Call pass if pattern is absent, otherwise fail.\n+#\n+# Argument 0 is the regexp to match.\n+# Argument 1 handles expected failures and the like\n+proc scan-symbol-not { args } {\n+    set testcase [testname-for-summary]\n+    if { [scan-symbol-common \"scan-symbol-not\" $args]} {\n+\tfail \"$testcase   scan-symbol-not $args\"\n+    } else {\n+\tpass \"$testcase   scan-symbol-not $args\"\n+    }\n+}\n+\n set additional_prunes \"\"\n set dg_runtest_extra_prunes \"\""}, {"sha": "c2c35698827199c71b192faf9f2b427d06b541f0", "filename": "gcc/testsuite/lib/lto.exp", "status": "modified", "additions": 12, "deletions": 51, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2Ftestsuite%2Flib%2Flto.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3a529238a86235f74f563d13f27b26b2b816b/gcc%2Ftestsuite%2Flib%2Flto.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Flto.exp?ref=72e3a529238a86235f74f563d13f27b26b2b816b", "patch": "@@ -712,6 +712,17 @@ proc lto-execute { src1 sid } {\n \n \t# There's a unique name for each executable we generate.\n \tset execname \"${execbase}-${count}1.exe\"\n+\n+\t# The LTO tests don't use dg-test, so testname_with_flags and\n+\t# output_file need to be defined explicitly for each file.  scan-symbol\n+\t# directives rely on both of these to be defined to find the symbol to\n+\t# scan and for the text to print in the PASS/FAIL since they can also\n+\t# be called from dg-test.  testname_with_flags is also used via\n+\t# testname-for-summary when calling into generic function below to\n+\t# clean temporary files.\n+\tset output_file $execname\n+\tset testname_with_flags $execname\n+\n \tincr count\n \n \tfile_on_host delete $execname\n@@ -774,11 +785,7 @@ proc lto-execute { src1 sid } {\n \t    }\n \t}\n \n-\t# Clean up after -save-temps.  The LTO tests don't use dg-test, so\n-\t# testname-for-summary needs to be defined explicitly for each\n-\t# file that needs to be removed.\n-\tset testname_with_flags $execname\n-\n+\t# Clean up after -save-temps.\n \teval \"cleanup-saved-temps\"\n \n \tfor {set i 0} {$i < $num_srcs} {incr i} {\n@@ -801,52 +808,6 @@ proc lto-execute { src1 sid } {\n     }\n }\n \n-# Utility for scanning a symbol in the final executable, invoked via dg-final.\n-# Call pass if pattern is present, otherwise fail.\n-#\n-# Argument 0 is the regexp to match.\n-# Argument 1 handles expected failures and the like\n-proc scan-symbol { args } {\n-    global nm\n-    global base_dir\n-    upvar 2 execname execname\n-\n-    if { [llength $args] >= 2 } {\n-\tswitch [dg-process-target [lindex $args 1]] {\n-\t    \"S\" { }\n-\t    \"N\" { return }\n-\t    \"F\" { setup_xfail \"*-*-*\" }\n-\t    \"P\" { }\n-\t}\n-    }\n-\n-    # Find nm like we find g++ in g++.exp.\n-    if ![info exists nm]  {\n-\tset nm [findfile $base_dir/../../../binutils/nm \\\n-\t\t$base_dir/../../../binutils/nm \\\n-\t        [findfile $base_dir/../../nm $base_dir/../../nm \\\n-\t\t      [findfile $base_dir/nm $base_dir/nm \\\n-\t\t       [transform nm]]]]\n-\tverbose -log \"nm is $nm\"\n-    }\n-\n-    set output_file \"[glob -nocomplain $execname]\"\n-    if { $output_file == \"\" } {\n-\tfail \"scan-symbol $args: dump file does not exist\"\n-\treturn\n-    }\n-\n-    set fd [open \"| $nm $output_file\" r]\n-    set text [read $fd]\n-    close $fd\n-\n-    if [regexp -- [lindex $args 0] $text] {\n-\tpass \"scan-symbol $args\"\n-    } else {\n-\tfail \"scan-symbol $args\"\n-    }\n-}\n-\n # Call pass if object readelf is ok, otherwise fail.\n # example: /* { dg-final { object-readelf Tag_ABI_enum_size int} } */\n proc object-readelf { args } {"}, {"sha": "1879424524d5f1cb8256b82aaf6e7904ffecafac", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3a529238a86235f74f563d13f27b26b2b816b/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3a529238a86235f74f563d13f27b26b2b816b/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=72e3a529238a86235f74f563d13f27b26b2b816b", "patch": "@@ -1,3 +1,18 @@\n+2018-12-19  Thomas Preud'homme  <thomas.preudhomme@linaro.org>\n+\n+\t* /config/arm/lib1funcs.S (FUNC_START): Remove unused sp_section\n+\tparameter and corresponding code.\n+\t(ARM_FUNC_START): Likewise in both definitions.\n+\tAlso update footer comment about condition that need to match with\n+\tgcc/config/arm/elf.h to also include libgcc/config/arm/t-arm.\n+\t* config/arm/ieee754-df.S (muldf3): Also build it if L_arm_muldf3 is\n+\tdefined.  Weakly define it in this case.\n+\t* config/arm/ieee754-sf.S (mulsf3): Likewise with L_arm_mulsf3.\n+\t* config/arm/t-elf (LIB1ASMFUNCS): Build _arm_muldf3.o and\n+\t_arm_mulsf3.o before muldiv versions if targeting Thumb-1 only. Add\n+\tcomment to keep condition in sync with the one in\n+\tlibgcc/config/arm/lib1funcs.S and gcc/config/arm/elf.h.\n+\n 2018-12-18  Wei Xiao  <wei3.xiao@intel.com>\n \n \t* config/i386/cpuinfo.c (get_intel_cpu): Handle cascadelake."}, {"sha": "1765c5f1f6089a4a8db35ce001dfa481a55616d8", "filename": "libgcc/config/arm/ieee754-df.S", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3a529238a86235f74f563d13f27b26b2b816b/libgcc%2Fconfig%2Farm%2Fieee754-df.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3a529238a86235f74f563d13f27b26b2b816b/libgcc%2Fconfig%2Farm%2Fieee754-df.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fieee754-df.S?ref=72e3a529238a86235f74f563d13f27b26b2b816b", "patch": "@@ -617,7 +617,18 @@ ARM_FUNC_ALIAS aeabi_l2d floatdidf\n \n #endif /* L_addsubdf3 */\n \n-#ifdef L_arm_muldivdf3\n+#if defined(L_arm_muldf3) || defined(L_arm_muldivdf3)\n+\n+@ Define multiplication as weak in _arm_muldf3.o so that it can be overriden\n+@ by the global definition in _arm_muldivdf3.o.  This allows a program only\n+@ using multiplication to take the weak definition which does not contain the\n+@ division code. Programs using only division or both division and\n+@ multiplication will pull _arm_muldivdf3.o from which both the multiplication\n+@ and division are taken thanks to the override.\n+#ifdef L_arm_muldf3\n+WEAK muldf3\n+WEAK aeabi_dmul\n+#endif\n \n ARM_FUNC_START muldf3\n ARM_FUNC_ALIAS aeabi_dmul muldf3\n@@ -870,6 +881,8 @@ LSYM(Lml_n):\n \tFUNC_END aeabi_dmul\n \tFUNC_END muldf3\n \n+#ifdef L_arm_muldivdf3\n+\n ARM_FUNC_START divdf3\n ARM_FUNC_ALIAS aeabi_ddiv divdf3\n \tCFI_START_FUNCTION\n@@ -1067,6 +1080,7 @@ LSYM(Ldv_s):\n \tFUNC_END divdf3\n \n #endif /* L_muldivdf3 */\n+#endif /* L_arm_muldf3 || L_arm_muldivdf3 */\n \n #ifdef L_arm_cmpdf2\n "}, {"sha": "0b4d1ab377d683be37becd9fa322be87d0259860", "filename": "libgcc/config/arm/ieee754-sf.S", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3a529238a86235f74f563d13f27b26b2b816b/libgcc%2Fconfig%2Farm%2Fieee754-sf.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3a529238a86235f74f563d13f27b26b2b816b/libgcc%2Fconfig%2Farm%2Fieee754-sf.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fieee754-sf.S?ref=72e3a529238a86235f74f563d13f27b26b2b816b", "patch": "@@ -428,7 +428,18 @@ ARM_FUNC_ALIAS aeabi_l2f floatdisf\n \n #endif /* L_addsubsf3 */\n \n-#ifdef L_arm_muldivsf3\n+#if defined(L_arm_mulsf3) || defined(L_arm_muldivsf3)\n+\n+@ Define multiplication as weak in _arm_mulsf3.o so that it can be overriden\n+@ by the global definition in _arm_muldivsf3.o.  This allows a program only\n+@ using multiplication to take the weak definition which does not contain the\n+@ division code. Programs using only division or both division and\n+@ multiplication will pull _arm_muldivsf3.o from which both the multiplication\n+@ and division are taken thanks to the override.\n+#ifdef L_arm_mulsf3\n+WEAK mulsf3\n+WEAK aeabi_fmul\n+#endif\n \n ARM_FUNC_START mulsf3\n ARM_FUNC_ALIAS aeabi_fmul mulsf3\n@@ -613,6 +624,8 @@ LSYM(Lml_n):\n \tFUNC_END aeabi_fmul\n \tFUNC_END mulsf3\n \n+#ifdef L_arm_muldivsf3\n+\n ARM_FUNC_START divsf3\n ARM_FUNC_ALIAS aeabi_fdiv divsf3\n \tCFI_START_FUNCTION\n@@ -756,6 +769,7 @@ LSYM(Ldv_s):\n \tFUNC_END divsf3\n \n #endif /* L_muldivsf3 */\n+#endif /* L_arm_mulsf3 || L_arm_muldivsf3 */\n \n #ifdef L_arm_cmpsf2\n "}, {"sha": "193fb251fdb23271107f4b03b1fb1826f6116ad4", "filename": "libgcc/config/arm/lib1funcs.S", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3a529238a86235f74f563d13f27b26b2b816b/libgcc%2Fconfig%2Farm%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3a529238a86235f74f563d13f27b26b2b816b/libgcc%2Fconfig%2Farm%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Flib1funcs.S?ref=72e3a529238a86235f74f563d13f27b26b2b816b", "patch": "@@ -359,12 +359,8 @@ SYM (\\name):\n #define THUMB_SYNTAX\n #endif\n \n-.macro FUNC_START name sp_section=\n-  .ifc \\sp_section, function_section\n-\t.section\t.text.__\\name,\"ax\",%progbits\n-  .else\n+.macro FUNC_START name\n \t.text\n-  .endif\n \t.globl SYM (__\\name)\n \tTYPE (__\\name)\n \t.align 0\n@@ -390,8 +386,8 @@ SYM (\\name):\n #if defined(__thumb2__)\n \n /* For Thumb-2 we build everything in thumb mode.  */\n-.macro ARM_FUNC_START name sp_section=\n-       FUNC_START \\name \\sp_section\n+.macro ARM_FUNC_START name\n+       FUNC_START \\name\n        .syntax unified\n .endm\n #define EQUIV .thumb_set\n@@ -422,12 +418,8 @@ _L__\\name:\n #ifdef NOT_ISA_TARGET_32BIT\n #define EQUIV .thumb_set\n #else\n-.macro\tARM_FUNC_START name sp_section=\n-  .ifc \\sp_section, function_section\n-\t.section\t.text.__\\name,\"ax\",%progbits\n-  .else\n+.macro\tARM_FUNC_START name\n \t.text\n-  .endif\n \t.globl SYM (__\\name)\n \tTYPE (__\\name)\n \t.align 0\n@@ -2169,7 +2161,8 @@ LSYM(Lchange_\\register):\n .endm\n \n #ifndef __symbian__\n-/* The condition here must match the one in gcc/config/arm/elf.h.  */\n+/* The condition here must match the one in gcc/config/arm/elf.h and\n+   libgcc/config/arm/t-elf.  */\n #ifndef NOT_ISA_TARGET_32BIT\n #include \"ieee754-df.S\"\n #include \"ieee754-sf.S\""}, {"sha": "9da6cd370546bcc88d9071e61a468437e58dc4a6", "filename": "libgcc/config/arm/t-elf", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3a529238a86235f74f563d13f27b26b2b816b/libgcc%2Fconfig%2Farm%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3a529238a86235f74f563d13f27b26b2b816b/libgcc%2Fconfig%2Farm%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Ft-elf?ref=72e3a529238a86235f74f563d13f27b26b2b816b", "patch": "@@ -1,3 +1,19 @@\n+ifeq (,$(findstring __symbian__,$(shell $(gcc_compile_bare) -dM -E - </dev/null)))\n+\n+ARM_ISA:=$(findstring __ARM_ARCH_ISA_ARM,$(shell $(gcc_compile_bare) -dM -E - </dev/null))\n+THUMB1_ISA:=$(findstring __ARM_ARCH_ISA_THUMB 1,$(shell $(gcc_compile_bare) -dM -E - </dev/null))\n+\n+# The condition here must match the one in gcc/config/arm/elf.h and\n+# libgcc/config/arm/lib1funcs.S.  _arm_muldf3 and _arm_mulsf3 must be included\n+# first so that the weak multiplication symbols in the corresponding files are\n+# chosen over the global symbols that _arm_muldivdf3 and _arm_muldivsf3\n+# inclusion create when only multiplication is used, thus avoiding pulling in\n+# useless division code.\n+ifneq (__ARM_ARCH_ISA_THUMB 1,$(ARM_ISA)$(THUMB1_ISA))\n+LIB1ASMFUNCS += _arm_muldf3 _arm_mulsf3\n+endif\n+endif # !__symbian__\n+\n # For most CPUs we have an assembly soft-float implementations.\n # However this is not true for ARMv6M.  Here we want to use the soft-fp C\n # implementation.  The soft-fp code is only build for ARMv6M.  This pulls"}]}