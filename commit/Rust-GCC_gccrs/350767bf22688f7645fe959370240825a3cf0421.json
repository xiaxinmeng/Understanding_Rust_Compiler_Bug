{"sha": "350767bf22688f7645fe959370240825a3cf0421", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUwNzY3YmYyMjY4OGY3NjQ1ZmU5NTkzNzAyNDA4MjVhM2NmMDQyMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-11-16T18:33:11Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-11-16T18:33:11Z"}, "message": "runtime: replace runtime1.goc with Go and C code\n    \n    A step toward eliminating goc2c.\n    \n    Drop the exported parfor code; it was needed for tests in the past, but\n    no longer is. The Go 1.7 runtime no longer uses parfor.\n    \n    Reviewed-on: https://go-review.googlesource.com/33324\n\nFrom-SVN: r242509", "tree": {"sha": "9e5c736cd7c7630d6a53f936ec67bcef18a1db00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e5c736cd7c7630d6a53f936ec67bcef18a1db00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/350767bf22688f7645fe959370240825a3cf0421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/350767bf22688f7645fe959370240825a3cf0421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/350767bf22688f7645fe959370240825a3cf0421", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/350767bf22688f7645fe959370240825a3cf0421/comments", "author": null, "committer": null, "parents": [{"sha": "660e6c2c127fdec06bfa428b08ab4123e37281a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/660e6c2c127fdec06bfa428b08ab4123e37281a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/660e6c2c127fdec06bfa428b08ab4123e37281a5"}], "stats": {"total": 230, "additions": 96, "deletions": 134}, "files": [{"sha": "20e085974c877d9e3b4ec448be3fda3d633a4a8d", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350767bf22688f7645fe959370240825a3cf0421/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350767bf22688f7645fe959370240825a3cf0421/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=350767bf22688f7645fe959370240825a3cf0421", "patch": "@@ -1,4 +1,4 @@\n-31ff8c31d33c3e77cae4fd55445f12825eb92af5\n+d9189ebc139ff739af956094626ccc5eb92c3091\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "534a7b225c469600a07ca6d904993e437edfc9dc", "filename": "libgo/Makefile.am", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350767bf22688f7645fe959370240825a3cf0421/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350767bf22688f7645fe959370240825a3cf0421/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=350767bf22688f7645fe959370240825a3cf0421", "patch": "@@ -485,7 +485,6 @@ runtime_files = \\\n \truntime/yield.c \\\n \t$(rtems_task_variable_add_file) \\\n \tmalloc.c \\\n-\truntime1.c \\\n \t$(runtime_getncpu_file)\n \n goc2c.$(OBJEXT): runtime/goc2c.c\n@@ -498,10 +497,6 @@ malloc.c: $(srcdir)/runtime/malloc.goc goc2c\n \t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n-runtime1.c: $(srcdir)/runtime/runtime1.goc goc2c\n-\t./goc2c $< > $@.tmp\n-\tmv -f $@.tmp $@\n-\n %.c: $(srcdir)/runtime/%.goc goc2c\n \t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@"}, {"sha": "9edcf37011b57f8c91c4b3c650e68f1873b196c8", "filename": "libgo/Makefile.in", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350767bf22688f7645fe959370240825a3cf0421/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350767bf22688f7645fe959370240825a3cf0421/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=350767bf22688f7645fe959370240825a3cf0421", "patch": "@@ -204,7 +204,7 @@ am__objects_5 = go-assert.lo go-breakpoint.lo go-caller.lo \\\n \tmcentral.lo $(am__objects_1) mfixalloc.lo mgc0.lo mheap.lo \\\n \tmsize.lo panic.lo parfor.lo print.lo proc.lo runtime_c.lo \\\n \tthread.lo $(am__objects_2) yield.lo $(am__objects_3) malloc.lo \\\n-\truntime1.lo $(am__objects_4)\n+\t$(am__objects_4)\n am_libgo_llgo_la_OBJECTS = $(am__objects_5)\n libgo_llgo_la_OBJECTS = $(am_libgo_llgo_la_OBJECTS)\n libgo_llgo_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \\\n@@ -832,7 +832,6 @@ runtime_files = \\\n \truntime/yield.c \\\n \t$(rtems_task_variable_add_file) \\\n \tmalloc.c \\\n-\truntime1.c \\\n \t$(runtime_getncpu_file)\n \n noinst_DATA = zstdpkglist.go\n@@ -1520,7 +1519,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/print.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/proc.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rtems-task-variable-add.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/runtime1.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/runtime_c.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/thread-linux.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/thread-sema.Plo@am__quote@\n@@ -3161,10 +3159,6 @@ malloc.c: $(srcdir)/runtime/malloc.goc goc2c\n \t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@\n \n-runtime1.c: $(srcdir)/runtime/runtime1.goc goc2c\n-\t./goc2c $< > $@.tmp\n-\tmv -f $@.tmp $@\n-\n %.c: $(srcdir)/runtime/%.goc goc2c\n \t./goc2c $< > $@.tmp\n \tmv -f $@.tmp $@"}, {"sha": "43f6e1e00f62abf696064f396fff7dc814051a3c", "filename": "libgo/go/runtime/debug.go", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350767bf22688f7645fe959370240825a3cf0421/libgo%2Fgo%2Fruntime%2Fdebug.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350767bf22688f7645fe959370240825a3cf0421/libgo%2Fgo%2Fruntime%2Fdebug.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fdebug.go?ref=350767bf22688f7645fe959370240825a3cf0421", "patch": "@@ -4,6 +4,11 @@\n \n package runtime\n \n+import (\n+\t\"runtime/internal/atomic\"\n+\t\"unsafe\"\n+)\n+\n // GOMAXPROCS sets the maximum number of CPUs that can be executing\n // simultaneously and returns the previous setting. If n < 1, it does not\n // change the current setting.\n@@ -19,10 +24,18 @@ func GOMAXPROCS(n int) int\n func NumCPU() int\n \n // NumCgoCall returns the number of cgo calls made by the current process.\n-func NumCgoCall() int64\n+func NumCgoCall() int64 {\n+\tvar n int64\n+\tfor mp := (*m)(atomic.Loadp(unsafe.Pointer(allm()))); mp != nil; mp = mp.alllink {\n+\t\tn += int64(mp.ncgocall)\n+\t}\n+\treturn n\n+}\n \n // NumGoroutine returns the number of goroutines that currently exist.\n-func NumGoroutine() int\n+func NumGoroutine() int {\n+\treturn int(gcount())\n+}\n \n // Get field tracking information.  Only fields with a tag go:\"track\"\n // are tracked.  This function will add every such field that is"}, {"sha": "d5d502c396d12d3103f539df646f87ee58335896", "filename": "libgo/go/runtime/error.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350767bf22688f7645fe959370240825a3cf0421/libgo%2Fgo%2Fruntime%2Ferror.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350767bf22688f7645fe959370240825a3cf0421/libgo%2Fgo%2Fruntime%2Ferror.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ferror.go?ref=350767bf22688f7645fe959370240825a3cf0421", "patch": "@@ -133,7 +133,10 @@ type stringer interface {\n \tString() string\n }\n \n-func typestring(interface{}) string\n+func typestring(x interface{}) string {\n+\te := efaceOf(&x)\n+\treturn *e._type.string\n+}\n \n // For calling from C.\n // Prints an argument passed to panic."}, {"sha": "b8b129d815db81171fa2cfb8fe63bbf5848c0d38", "filename": "libgo/go/runtime/export_test.go", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350767bf22688f7645fe959370240825a3cf0421/libgo%2Fgo%2Fruntime%2Fexport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350767bf22688f7645fe959370240825a3cf0421/libgo%2Fgo%2Fruntime%2Fexport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fexport_test.go?ref=350767bf22688f7645fe959370240825a3cf0421", "patch": "@@ -21,11 +21,10 @@ import (\n //var F64toint = f64toint\n //var Sqrt = sqrt\n \n-func golockedOSThread() bool\n-\n var Entersyscall = entersyscall\n var Exitsyscall = exitsyscall\n-var LockedOSThread = golockedOSThread\n+\n+// var LockedOSThread = lockedOSThread\n \n // var Xadduintptr = xadduintptr\n \n@@ -44,29 +43,6 @@ func LFStackPop(head *uint64) *LFNode {\n \treturn (*LFNode)(unsafe.Pointer(lfstackpop(head)))\n }\n \n-type ParFor struct {\n-\tbody   func(*ParFor, uint32)\n-\tdone   uint32\n-\tNthr   uint32\n-\tthrseq uint32\n-\tCnt    uint32\n-\twait   bool\n-}\n-\n-func newParFor(nthrmax uint32) *ParFor\n-func parForSetup(desc *ParFor, nthr, n uint32, wait bool, body func(*ParFor, uint32))\n-func parForDo(desc *ParFor)\n-func parForIters(desc *ParFor, tid uintptr) (uintptr, uintptr)\n-\n-var NewParFor = newParFor\n-var ParForSetup = parForSetup\n-var ParForDo = parForDo\n-\n-func ParForIters(desc *ParFor, tid uint32) (uint32, uint32) {\n-\tbegin, end := parForIters(desc, uintptr(tid))\n-\treturn uint32(begin), uint32(end)\n-}\n-\n func GCMask(x interface{}) (ret []byte) {\n \treturn nil\n }"}, {"sha": "c0746878c4f0c7f0718387a64ca07ea79f84878c", "filename": "libgo/go/runtime/extern.go", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350767bf22688f7645fe959370240825a3cf0421/libgo%2Fgo%2Fruntime%2Fextern.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350767bf22688f7645fe959370240825a3cf0421/libgo%2Fgo%2Fruntime%2Fextern.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fextern.go?ref=350767bf22688f7645fe959370240825a3cf0421", "patch": "@@ -274,13 +274,11 @@ func SetFinalizer(obj interface{}, finalizer interface{})\n // the actual system call.\n func KeepAlive(interface{})\n \n-func getgoroot() string\n-\n // GOROOT returns the root of the Go tree.\n // It uses the GOROOT environment variable, if set,\n // or else the root used during the Go build.\n func GOROOT() string {\n-\ts := getgoroot()\n+\ts := gogetenv(\"GOROOT\")\n \tif s != \"\" {\n \t\treturn s\n \t}"}, {"sha": "8d90cd6061f5ff1d49edf8af6283585d4c8414d5", "filename": "libgo/go/runtime/stubs.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350767bf22688f7645fe959370240825a3cf0421/libgo%2Fgo%2Fruntime%2Fstubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350767bf22688f7645fe959370240825a3cf0421/libgo%2Fgo%2Fruntime%2Fstubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fstubs.go?ref=350767bf22688f7645fe959370240825a3cf0421", "patch": "@@ -501,6 +501,7 @@ func needm()\n func dropm()\n func sigprof()\n func mcount() int32\n+func gcount() int32\n \n // Signal trampoline, written in C.\n func sigtramp()"}, {"sha": "43ced39c0f76b08252c3b10743b3dbbb2a7b3be3", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 69, "deletions": 5, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350767bf22688f7645fe959370240825a3cf0421/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350767bf22688f7645fe959370240825a3cf0421/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=350767bf22688f7645fe959370240825a3cf0421", "patch": "@@ -2535,15 +2535,19 @@ runtime_Gosched(void)\n \n // Implementation of runtime.GOMAXPROCS.\n // delete when scheduler is even stronger\n-int32\n-runtime_gomaxprocsfunc(int32 n)\n+\n+intgo runtime_GOMAXPROCS(intgo)\n+  __asm__(GOSYM_PREFIX \"runtime.GOMAXPROCS\");\n+\n+intgo\n+runtime_GOMAXPROCS(intgo n)\n {\n-\tint32 ret;\n+\tintgo ret;\n \n \tif(n > _MaxGomaxprocs)\n \t\tn = _MaxGomaxprocs;\n \truntime_lock(&runtime_sched);\n-\tret = runtime_gomaxprocs;\n+\tret = (intgo)runtime_gomaxprocs;\n \tif(n <= 0 || n == ret) {\n \t\truntime_unlock(&runtime_sched);\n \t\treturn ret;\n@@ -2553,7 +2557,7 @@ runtime_gomaxprocsfunc(int32 n)\n \truntime_acquireWorldsema();\n \tg->m->gcing = 1;\n \truntime_stopTheWorldWithSema();\n-\tnewprocs = n;\n+\tnewprocs = (int32)n;\n \tg->m->gcing = 0;\n \truntime_releaseWorldsema();\n \truntime_startTheWorldWithSema();\n@@ -3499,6 +3503,58 @@ runtime_setmaxthreads(intgo in)\n \treturn out;\n }\n \n+static intgo\n+procPin()\n+{\n+\tM *mp;\n+\n+\tmp = runtime_m();\n+\tmp->locks++;\n+\treturn (intgo)(((P*)mp->p)->id);\n+}\n+\n+static void\n+procUnpin()\n+{\n+\truntime_m()->locks--;\n+}\n+\n+intgo sync_runtime_procPin(void)\n+  __asm__ (GOSYM_PREFIX \"sync.runtime_procPin\");\n+\n+intgo\n+sync_runtime_procPin()\n+{\n+\treturn procPin();\n+}\n+\n+void sync_runtime_procUnpin(void)\n+  __asm__ (GOSYM_PREFIX  \"sync.runtime_procUnpin\");\n+\n+void\n+sync_runtime_procUnpin()\n+{\n+\tprocUnpin();\n+}\n+\n+intgo sync_atomic_runtime_procPin(void)\n+  __asm__ (GOSYM_PREFIX \"sync_atomic.runtime_procPin\");\n+\n+intgo\n+sync_atomic_runtime_procPin()\n+{\n+\treturn procPin();\n+}\n+\n+void sync_atomic_runtime_procUnpin(void)\n+  __asm__ (GOSYM_PREFIX  \"sync_atomic.runtime_procUnpin\");\n+\n+void\n+sync_atomic_runtime_procUnpin()\n+{\n+\tprocUnpin();\n+}\n+\n void\n runtime_proc_scan(struct Workbuf** wbufp, void (*enqueue1)(struct Workbuf**, Obj))\n {\n@@ -3589,3 +3645,11 @@ runtime_go_allgs()\n \ts.__capacity = allgcap;\n \treturn s;\n }\n+\n+intgo NumCPU(void) __asm__ (GOSYM_PREFIX \"runtime.NumCPU\");\n+\n+intgo\n+NumCPU()\n+{\n+\treturn (intgo)(runtime_ncpu);\n+}"}, {"sha": "50143fe0aaf434e5acb0c9d25acc42d519de417d", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/350767bf22688f7645fe959370240825a3cf0421/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/350767bf22688f7645fe959370240825a3cf0421/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=350767bf22688f7645fe959370240825a3cf0421", "patch": "@@ -315,7 +315,8 @@ void\truntime_mprofinit(void);\n #define runtime_getcallersp(p) __builtin_frame_address(0)\n int32\truntime_mcount(void)\n   __asm__ (GOSYM_PREFIX \"runtime.mcount\");\n-int32\truntime_gcount(void);\n+int32\truntime_gcount(void)\n+  __asm__ (GOSYM_PREFIX \"runtime.gcount\");\n void\truntime_mcall(void(*)(G*));\n uint32\truntime_fastrand1(void) __asm__ (GOSYM_PREFIX \"runtime.fastrand1\");\n int32\truntime_timediv(int64, int32, int32*)\n@@ -512,7 +513,6 @@ void\truntime_semacquire(uint32 volatile *, bool)\n      __asm__ (GOSYM_PREFIX \"runtime.semacquire\");\n void\truntime_semrelease(uint32 volatile *)\n      __asm__ (GOSYM_PREFIX \"runtime.semrelease\");\n-int32\truntime_gomaxprocsfunc(int32 n);\n void\truntime_procyield(uint32)\n   __asm__(GOSYM_PREFIX \"runtime.procyield\");\n void\truntime_osyield(void)"}, {"sha": "a83b93ebdb82ba6684f701060911049383017c38", "filename": "libgo/runtime/runtime1.goc", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660e6c2c127fdec06bfa428b08ab4123e37281a5/libgo%2Fruntime%2Fruntime1.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660e6c2c127fdec06bfa428b08ab4123e37281a5/libgo%2Fruntime%2Fruntime1.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime1.goc?ref=660e6c2c127fdec06bfa428b08ab4123e37281a5", "patch": "@@ -1,82 +0,0 @@\n-// Copyright 2010 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package runtime\n-#include \"runtime.h\"\n-#include \"arch.h\"\n-#include \"go-type.h\"\n-\n-func GOMAXPROCS(n int) (ret int) {\n-\tret = runtime_gomaxprocsfunc(n);\n-}\n-\n-func NumCPU() (ret int) {\n-\tret = runtime_ncpu;\n-}\n-\n-func NumCgoCall() (ret int64) {\n-\tM *mp;\n-\n-\tret = 0;\n-\tfor(mp=runtime_atomicloadp(&runtime_allm); mp; mp=mp->alllink)\n-\t\tret += mp->ncgocall;\n-}\n-\n-func newParFor(nthrmax uint32) (desc *ParFor) {\n-\tdesc = runtime_parforalloc(nthrmax);\n-}\n-\n-func parForSetup(desc *ParFor, nthr uint32, n uint32, wait bool, body *byte) {\n-\truntime_parforsetup(desc, nthr, n, wait, (const FuncVal*) body);\n-}\n-\n-func parForDo(desc *ParFor) {\n-\truntime_parfordo(desc);\n-}\n-\n-func parForIters(desc *ParFor, tid uintptr) (start uintptr, end uintptr) {\n-\truntime_parforiters(desc, tid, &start, &end);\n-}\n-\n-func typestring(e Eface) (s String) {\n-\ts = *((Type*)e._type)->__reflection;\n-}\n-\n-func golockedOSThread() (ret bool) {\n-\tret = runtime_lockedOSThread();\n-}\n-\n-func NumGoroutine() (ret int) {\n-\tret = runtime_gcount();\n-}\n-\n-func getgoroot() (out String) {\n-\tout = runtime_getenv(\"GOROOT\");\n-}\n-\n-func sync.runtime_procPin() (p int) {\n-\tM *mp;\n-\n-\tmp = runtime_m();\n-\t// Disable preemption.\n-\tmp->locks++;\n-\tp = ((P*)mp->p)->id;\n-}\n-\n-func sync.runtime_procUnpin() {\n-\truntime_m()->locks--;\n-}\n-\n-func sync_atomic.runtime_procPin() (p int) {\n-\tM *mp;\n-\n-\tmp = runtime_m();\n-\t// Disable preemption.\n-\tmp->locks++;\n-\tp = ((P*)mp->p)->id;\n-}\n-\n-func sync_atomic.runtime_procUnpin() {\n-\truntime_m()->locks--;\n-}"}]}