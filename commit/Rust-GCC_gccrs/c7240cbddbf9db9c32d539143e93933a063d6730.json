{"sha": "c7240cbddbf9db9c32d539143e93933a063d6730", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcyNDBjYmRkYmY5ZGI5YzMyZDUzOTE0M2U5MzkzM2EwNjNkNjczMA==", "commit": {"author": {"name": "David O'Brien", "email": "obrien@FreeBSD.org", "date": "2001-12-17T07:33:07Z"}, "committer": {"name": "David O'Brien", "email": "obrien@gcc.gnu.org", "date": "2001-12-17T07:33:07Z"}, "message": "config.gcc (sparc64-*-freebsd*): Add target.\n\n2001-12-16  David O'Brien  <obrien@FreeBSD.org>\n\t* config.gcc (sparc64-*-freebsd*): Add target.\n\t* config/sparc/freebsd.h: New file.\n\t* config/sparc/sparc.h (LIB_SPEC, LINK_SPEC): Don't define.\n\t* config/sparc/sunos4.h (LIB_SPEC, LINK_SPEC): Define.\n\t* config/sparc/sysv4.h (CPP_PREDEFINES): Undefine before defining.\n\nApproved by:  Richard Henderson <rth@redhat.com>\n              Message-ID: <20011215175143.A8758@redhat.com>\n\nFrom-SVN: r48093", "tree": {"sha": "b87a67eecf9e43c44a76ff9fe8e0c1d1b389fb87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b87a67eecf9e43c44a76ff9fe8e0c1d1b389fb87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7240cbddbf9db9c32d539143e93933a063d6730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7240cbddbf9db9c32d539143e93933a063d6730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7240cbddbf9db9c32d539143e93933a063d6730", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7240cbddbf9db9c32d539143e93933a063d6730/comments", "author": null, "committer": null, "parents": [{"sha": "4775fbf1309f2a917497af4140360ea736f4f777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4775fbf1309f2a917497af4140360ea736f4f777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4775fbf1309f2a917497af4140360ea736f4f777"}], "stats": {"total": 186, "additions": 178, "deletions": 8}, "files": [{"sha": "ec4c7675852b2685a9264f0906e8d2bc709cb8f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7240cbddbf9db9c32d539143e93933a063d6730/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7240cbddbf9db9c32d539143e93933a063d6730/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7240cbddbf9db9c32d539143e93933a063d6730", "patch": "@@ -1,3 +1,11 @@\n+2001-12-16  David O'Brien  <obrien@FreeBSD.org>\n+\n+\t* config.gcc (sparc64-*-freebsd*): Add target.\n+\t* config/sparc/freebsd.h: New file.\n+\t* config/sparc/sparc.h (LIB_SPEC, LINK_SPEC): Don't define.\n+\t* config/sparc/sunos4.h (LIB_SPEC, LINK_SPEC): Define.\n+\t* config/sparc/sysv4.h (CPP_PREDEFINES): Undefine before defining.\n+\n 2001-12-16  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/rs6000.c (rs6000_legitimize_address): Force both"}, {"sha": "9fb298dd4f729b9cdd4dd594a41f54b5b2aa7c1a", "filename": "gcc/config.gcc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7240cbddbf9db9c32d539143e93933a063d6730/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7240cbddbf9db9c32d539143e93933a063d6730/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=c7240cbddbf9db9c32d539143e93933a063d6730", "patch": "@@ -3183,6 +3183,14 @@ sparc64-*-elf*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/sp64-elf.h\"\n \textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n+sparc64-*-freebsd*|ultrasparc-*-freebsd*)\n+\ttm_file=\"${tm_file} ${fbsd_tm_file} dbxelf.h elfos.h sparc/sysv4.h sparc/freebsd.h\"\n+\txmake_file=none\n+\tcase \"x$with_cpu\" in\n+\t\tx) with_cpu=ultrasparc ;;\n+\t\t*) echo \"$with_cpu not supported for freebsd target\"; exit 1 ;;\n+\tesac\n+\t;;\n sparc64-*-linux*)\t\t# 64-bit Sparc's running GNU/Linux\n \ttmake_file=\"t-slibgcc-elf-ver t-linux sparc/t-linux64\"\n \ttm_file=\"sparc/sparc_bi.h ${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/linux64.h\""}, {"sha": "314b07bc825ffdc18f5f2b0e34401ac75086e4be", "filename": "gcc/config/sparc/freebsd.h", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7240cbddbf9db9c32d539143e93933a063d6730/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7240cbddbf9db9c32d539143e93933a063d6730/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ffreebsd.h?ref=c7240cbddbf9db9c32d539143e93933a063d6730", "patch": "@@ -0,0 +1,153 @@\n+/* Definitions for Sun Sparc64 running FreeBSD using the ELF format\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Contributed by David E. O'Brien <obrien@FreeBSD.org> and BSDi.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* FreeBSD needs's the platform name (sparc64) defined.  */\n+\n+#undef  CPP_CPU64_DEFAULT_SPEC\n+#define CPP_CPU64_DEFAULT_SPEC \"-D__sparc64__ -D__sparc_v9__\"\n+\n+#undef  CPP_PREDEFINES\n+#define CPP_PREDEFINES FBSD_CPP_PREDEFINES\n+\n+#define LINK_SPEC \"-m elf64_sparc %(link_arch)\t\t\t\t\\\n+  %{!mno-relax:%{!r:-relax}\t\t\t\t\t\t\\\n+  %{p:%e`-p' not supported; use `-pg' and gprof(1)}\t\t\t\\\n+  %{Wl,*:%*}\t\t\t\t\t\t\t\t\\\n+  %{assert*} %{R*} %{rpath*} %{defsym*}\t\t\t\t\t\\\n+  %{shared:-Bshareable %{h*} %{soname*}}\t\t\t\t\\\n+  %{symbolic:-Bsymbolic}\t\t\t\t\t\t\\\n+  %{!shared:\t\t\t\t\t\t\t\t\\\n+    %{!static:\t\t\t\t\t\t\t\t\\\n+      %{rdynamic:-export-dynamic}\t\t\t\t\t\\\n+      %{!dynamic-linker:-dynamic-linker /usr/libexec/ld-elf.so.1}}\t\\\n+    %{static:-Bstatic}}\"\n+\n+\n+/************************[  Target stuff  ]***********************************/\n+\n+/* Define the actual types of some ANSI-mandated types.  \n+   Needs to agree with <machine/ansi.h>.  GCC defaults come from c-decl.c,\n+   c-common.c, and config/<arch>/<arch>.h.  */\n+\n+/* Earlier headers may get this wrong for FreeBSD.\n+   We use the GCC defaults instead.  */\n+#undef WCHAR_TYPE\n+\n+#undef  WCHAR_UNSIGNED\n+#define WCHAR_UNSIGNED 0\n+\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+/* Define for support of TFmode long double and REAL_ARITHMETIC.\n+   Sparc ABI says that long double is 4 words.  */\n+#undef  LONG_DOUBLE_TYPE_SIZE\n+#define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n+\n+/* Constant which presents upper bound of the above value.  */\n+#undef  MAX_LONG_DOUBLE_TYPE_SIZE\n+#define MAX_LONG_DOUBLE_TYPE_SIZE 128\n+\n+/* Define this to set long double type size to use in libgcc2.c, which can\n+   not depend on target_flags.  */\n+#if defined(__arch64__) || defined(__LONG_DOUBLE_128__)\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n+#else\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n+#endif\n+\n+/* Definitions for 64-bit SPARC running systems with ELF. */\n+\n+#undef  SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES\t\t\t\t\t\t    \\\n+  {\"long-double-64\", -MASK_LONG_DOUBLE_128, N_(\"Use 64 bit long doubles\") },  \\\n+  {\"long-double-128\", MASK_LONG_DOUBLE_128, N_(\"Use 128 bit long doubles\") },\n+\n+#undef  TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (FreeBSD/sparc64 ELF)\");\n+\n+#define TARGET_ELF\t\t1\n+\n+/* XXX */\n+/* A 64 bit v9 compiler with stack-bias,\n+   in a Medium/mid code model environment.  */\n+\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT \\\n+  (MASK_V9 + MASK_64BIT + MASK_PTR64 + MASK_VIS + MASK_FASTER_STRUCTS \\\n+   + MASK_STACK_BIAS + MASK_APP_REGS /* + MASK_EPILOGUE */ + MASK_FPU \\\n+   + MASK_LONG_DOUBLE_128 /* + MASK_HARD_QUAD */)\n+\n+/* The default code model.  */\n+#undef  SPARC_DEFAULT_CMODEL\n+#define SPARC_DEFAULT_CMODEL\tCM_MEDMID\n+\n+\n+/************************[  Assembler stuff  ]********************************/\n+\n+/* XXX */\n+#if 0\n+#undef  ASM_CPU_DEFAULT_SPEC\n+#define ASM_CPU_DEFAULT_SPEC \"-Av9a\"\n+#endif\n+\n+/* XXX2 */\n+/* This is how to output a definition of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.  */\n+\n+#undef  ASM_OUTPUT_INTERNAL_LABEL\n+#define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\t\t\\\n+  fprintf (FILE, \".L%s%d:\\n\", PREFIX, NUM)\n+\n+/* XXX2 */\n+/* This is how to output a reference to an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.  */\n+\n+#undef  ASM_OUTPUT_INTERNAL_LABELREF\n+#define ASM_OUTPUT_INTERNAL_LABELREF(FILE,PREFIX,NUM)\t\t\t\\\n+  fprintf (FILE, \".L%s%d\", PREFIX, NUM)\n+\n+/* XXX2 */\n+/* This is how to store into the string LABEL\n+   the symbol_ref name of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.\n+   This is suitable for output with `assemble_name'.  */\n+\n+#undef  ASM_GENERATE_INTERNAL_LABEL\n+#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\t\t\\\n+  sprintf (LABEL, \"*.L%s%d\", PREFIX, NUM)\n+\n+\n+/************************[  Debugger stuff  ]*********************************/\n+\n+/* This is the char to use for continuation (in case we need to turn\n+   continuation back on).  */\n+\n+#undef  DBX_CONTIN_CHAR\n+#define DBX_CONTIN_CHAR\t'?'\n+\n+/* DWARF bits.  */\n+\n+/* Follow Irix 6 and not the Dwarf2 draft in using 64-bit offsets. \n+   Obviously the Dwarf2 folks havn't tried to actually build systems\n+   with their spec.  On a 64-bit system, only 64-bit relocs become\n+   RELATIVE relocations.  */\n+\n+/* #define DWARF_OFFSET_SIZE PTR_SIZE */"}, {"sha": "4d88325d940970708d7f49d35e88a3ed00f659f3", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7240cbddbf9db9c32d539143e93933a063d6730/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7240cbddbf9db9c32d539143e93933a063d6730/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=c7240cbddbf9db9c32d539143e93933a063d6730", "patch": "@@ -329,14 +329,6 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n %| %{R} %{!pg:%{!p:%{fpic:-k} %{fPIC:-k}}} %{keep-local-as-symbols:-L} \\\n %(asm_cpu) %(asm_relax)\"\n \n-#define LIB_SPEC \"%{!shared:%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p} %{g:-lg}}\"\n-\n-/* Provide required defaults for linker -e and -d switches.  */\n-\n-#define LINK_SPEC \\\n- \"%{!shared:%{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp} %{static:-Bstatic} \\\n-  %{assert*} %{shared:%{!mimpure-text:-assert pure-text}}\"\n-\n /* This macro defines names of additional specifications to put in the specs\n    that can be used in various specifications like CC1_SPEC.  Its definition\n    is an initializer with a subgrouping for each command option."}, {"sha": "e5b2dcce4a6ac62db88b1d3ee0d85f3bbe7a142b", "filename": "gcc/config/sparc/sunos4.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7240cbddbf9db9c32d539143e93933a063d6730/gcc%2Fconfig%2Fsparc%2Fsunos4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7240cbddbf9db9c32d539143e93933a063d6730/gcc%2Fconfig%2Fsparc%2Fsunos4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsunos4.h?ref=c7240cbddbf9db9c32d539143e93933a063d6730", "patch": "@@ -24,6 +24,14 @@ Boston, MA 02111-1307, USA.  */\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-Dsparc -Dsun -Dunix -Asystem=unix -Asystem=bsd\"\n \n+#define LIB_SPEC \"%{!shared:%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p} %{g:-lg}}\"\n+\n+/* Provide required defaults for linker -e and -d switches.  */\n+\n+#define LINK_SPEC \\\n+ \"%{!shared:%{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp} %{static:-Bstatic} \\\n+  %{assert*} %{shared:%{!mimpure-text:-assert pure-text}}\"\n+\n /* Use N_BINCL stabs.  */\n \n #define DBX_USE_BINCL"}, {"sha": "be10190ff265de72f37cdc5a277129f932226577", "filename": "gcc/config/sparc/sysv4.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7240cbddbf9db9c32d539143e93933a063d6730/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7240cbddbf9db9c32d539143e93933a063d6730/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsysv4.h?ref=c7240cbddbf9db9c32d539143e93933a063d6730", "patch": "@@ -51,6 +51,7 @@ Boston, MA 02111-1307, USA.  */\n /* Provide a set of pre-definitions and pre-assertions appropriate for\n    the Sparc running svr4.  __svr4__ is our extension.  */\n \n+#undef  CPP_PREDEFINES\n #define CPP_PREDEFINES \\\n \"-Dsparc -Dunix -D__svr4__ -Asystem=unix -Asystem=svr4\"\n "}]}