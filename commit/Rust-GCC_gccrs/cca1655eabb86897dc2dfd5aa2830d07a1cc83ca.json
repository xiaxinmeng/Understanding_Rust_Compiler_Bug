{"sha": "cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NhMTY1NWVhYmI4Njg5N2RjMmRmZDVhYTI4MzBkMDdhMWNjODNjYQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-05-12T01:27:15Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-05-12T01:27:15Z"}, "message": "gcj.texi (Code Generation): Document -fbootstrap-classes.\n\ngcc/java:\n\t* gcj.texi (Code Generation): Document -fbootstrap-classes.\n\t* decl.c (GCJ_BOOTSTRAP_LOADER_ADDITION): New macro.\n\t(parse_version): Use it.\n\t* lang.opt (-fbootstrap-classes): New option.\nlibjava:\n\t* external/w3c_dom/Makefile.in: Rebuilt.\n\t* external/w3c_dom/Makefile.am (libw3c_gcj_la_GCJFLAGS): Added\n\t-fbootstrap-classes.\n\t* external/sax/Makefile.in: Rebuilt.\n\t* external/sax/Makefile.am (libsax_gcj_la_GCJFLAGS): Added\n\t-fbootstrap-classes.\n\t* java/lang/Class.h (_Jv_CopyClassesToSystemLoader): Declare as\n\tfriend.\n\t* java/lang/natVMClassLoader.cc (getSystemClassLoaderInternal):\n\tCall _Jv_CopyClassesToSystemLoader.\n\t* java/lang/natClassLoader.cc (system_class_list): New global.\n\t(_Jv_RegisterClassHookDefault): Handle bootstrap and system\n\tclasses differently.\n\t(_Jv_CopyClassesToSystemLoader): New function.\n\t(SYSTEM_LOADER_INITIALIZED): New define.\n\t* include/jvm.h (GCJ_BOOTSTRAP_LOADER_ADDITION): New define.\n\t(_Jv_CheckABIVersion): Use it.\n\t(_Jv_ClassForBootstrapLoader): New function.\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (AM_GCJFLAGS): Added -fbootstrap-classes.\n\nFrom-SVN: r99604", "tree": {"sha": "9f39fff82022b1ead94d585a390edb4a4f526870", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f39fff82022b1ead94d585a390edb4a4f526870"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/comments", "author": null, "committer": null, "parents": [{"sha": "cd0b240bf1f795586b644f25b70454ee89eab8b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0b240bf1f795586b644f25b70454ee89eab8b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd0b240bf1f795586b644f25b70454ee89eab8b8"}], "stats": {"total": 124, "additions": 112, "deletions": 12}, "files": [{"sha": "126e0c836eecaf09687ef0faa97f457462ae1bd7", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "patch": "@@ -1,3 +1,10 @@\n+2005-05-11  Tom Tromey  <tromey@redhat.com>\n+\n+\t* gcj.texi (Code Generation): Document -fbootstrap-classes.\n+\t* decl.c (GCJ_BOOTSTRAP_LOADER_ADDITION): New macro.\n+\t(parse_version): Use it.\n+\t* lang.opt (-fbootstrap-classes): New option.\n+\n 2005-05-10  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR java/21436"}, {"sha": "a74e5186b7de443827cfdc82f3f48187f23b4933", "filename": "gcc/java/decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "patch": "@@ -64,6 +64,10 @@ static void parse_version (void);\n /* Used when computing the ABI version.  */\n #define GCJ_BINARYCOMPAT_ADDITION 5\n \n+/* Used when defining a class that should be loaded by the bootstrap\n+   loader.  */\n+#define GCJ_BOOTSTRAP_LOADER_ADDITION 1\n+\n /* The version of the BC ABI that we generate.  At the moment we are\n    compatible with what shipped in GCC 4.0.  This must be kept in sync\n    with parse_version(), libgcj, and reality (if the BC format\n@@ -620,6 +624,8 @@ parse_version (void)\n      probably always require strict matching for ordinary ABI.  */\n   if (flag_indirect_dispatch)\n     abi_version = GCJ_CURRENT_BC_ABI_VERSION;\n+  if (flag_bootstrap_classes)\n+    abi_version += GCJ_BOOTSTRAP_LOADER_ADDITION;\n \n   gcj_abi_version = build_int_cstu (ptr_type_node, abi_version);\n }"}, {"sha": "3b2f12e57fdcffea3218c035c63b2b7355dc84ba", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "patch": "@@ -515,6 +515,15 @@ ABI.  These restrictions will be lifted in some future release.\n However, if you compile CNI code with the standard ABI, you can call\n it from code built with the binary compatibility ABI.\n \n+@item -fbootstrap-classes\n+This option can be use to tell @code{libgcj} that the compiled classes\n+should be loaded by the bootstrap loader, not the system class loader.\n+By default, if you compile a class and link it into an executable, it\n+will be treated as if it was loaded using the system class loader.\n+This is convenient, as it means that things like\n+@code{Class.forName()} will search @samp{CLASSPATH} to find the\n+desired class.\n+\n @end table\n \n "}, {"sha": "0142915824fc81e44eecade4a037031e7dda62bf", "filename": "gcc/java/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/gcc%2Fjava%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/gcc%2Fjava%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.opt?ref=cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "patch": "@@ -176,5 +176,9 @@ fuse-divide-subroutine\n Java Var(flag_use_divide_subroutine) Init(1)\n Call a library routine to do integer divisions\n \n+fbootstrap-classes\n+Java Var(flag_bootstrap_classes)\n+Generated should be loaded by bootstrap loader\n+\n version\n Java"}, {"sha": "9fdb8ade7b3adfe40cc059525dd9784f9b255341", "filename": "libjava/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "patch": "@@ -1,3 +1,26 @@\n+2005-05-11  Tom Tromey  <tromey@redhat.com>\n+\n+\t* external/w3c_dom/Makefile.in: Rebuilt.\n+\t* external/w3c_dom/Makefile.am (libw3c_gcj_la_GCJFLAGS): Added\n+\t-fbootstrap-classes.\n+\t* external/sax/Makefile.in: Rebuilt.\n+\t* external/sax/Makefile.am (libsax_gcj_la_GCJFLAGS): Added\n+\t-fbootstrap-classes.\n+\t* java/lang/Class.h (_Jv_CopyClassesToSystemLoader): Declare as\n+\tfriend.\n+\t* java/lang/natVMClassLoader.cc (getSystemClassLoaderInternal):\n+\tCall _Jv_CopyClassesToSystemLoader.\n+\t* java/lang/natClassLoader.cc (system_class_list): New global.\n+\t(_Jv_RegisterClassHookDefault): Handle bootstrap and system\n+\tclasses differently.\n+\t(_Jv_CopyClassesToSystemLoader): New function.\n+\t(SYSTEM_LOADER_INITIALIZED): New define.\n+\t* include/jvm.h (GCJ_BOOTSTRAP_LOADER_ADDITION): New define.\n+\t(_Jv_CheckABIVersion): Use it.\n+\t(_Jv_ClassForBootstrapLoader): New function.\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (AM_GCJFLAGS): Added -fbootstrap-classes.\n+\n 2005-05-10  Tom Tromey  <tromey@redhat.com>\n \n \t* gcj/javaprims.h: Updated."}, {"sha": "a17f7cce2bf423a2598de81ef1cc8e65dcdb5059", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "patch": "@@ -204,7 +204,7 @@ AM_GCJFLAGS = \\\n \t@LIBGCJ_JAVAFLAGS@ \\\n \t-fclasspath= -fbootclasspath=$(BOOTCLASSPATH) \\\n \t--encoding=UTF-8 \\\n-\t-Wno-deprecated\n+\t-Wno-deprecated -fbootstrap-classes\n \n if USING_GCC\n AM_CFLAGS = @LIBGCJ_CFLAGS@ $(WARNINGS)"}, {"sha": "b5c0fdd9e4f8ac14db8566608b81e2c1e79fdad0", "filename": "libjava/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "patch": "@@ -4634,7 +4634,7 @@ AM_GCJFLAGS = \\\n \t@LIBGCJ_JAVAFLAGS@ \\\n \t-fclasspath= -fbootclasspath=$(BOOTCLASSPATH) \\\n \t--encoding=UTF-8 \\\n-\t-Wno-deprecated\n+\t-Wno-deprecated -fbootstrap-classes\n \n @USING_GCC_FALSE@AM_CFLAGS = @LIBGCJ_CFLAGS@\n @USING_GCC_TRUE@AM_CFLAGS = @LIBGCJ_CFLAGS@ $(WARNINGS)"}, {"sha": "08b82e5b826caf698b305fb2ea367409a2c2e3cd", "filename": "libjava/external/sax/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2Fexternal%2Fsax%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2Fexternal%2Fsax%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fexternal%2Fsax%2FMakefile.am?ref=cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "patch": "@@ -35,7 +35,7 @@ mostlyclean-local:\n noinst_LTLIBRARIES = libsax-gcj.la\n \n libsax_gcj_la_SOURCES =\tsax.jar\n-libsax_gcj_la_GCJFLAGS = -findirect-dispatch $(AM_GCJFLAGS)\n+libsax_gcj_la_GCJFLAGS = -findirect-dispatch -fbootstrap-classes $(AM_GCJFLAGS)\n \n source_files = \\\n org/xml/sax/SAXNotSupportedException.java \\"}, {"sha": "76ce4436f66eec446d27f96c69d287caef82f165", "filename": "libjava/external/sax/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2Fexternal%2Fsax%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2Fexternal%2Fsax%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fexternal%2Fsax%2FMakefile.in?ref=cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "patch": "@@ -314,7 +314,7 @@ AM_GCJFLAGS = \\\n BUILT_SOURCES = classes.stamp\n noinst_LTLIBRARIES = libsax-gcj.la\n libsax_gcj_la_SOURCES = sax.jar\n-libsax_gcj_la_GCJFLAGS = -findirect-dispatch $(AM_GCJFLAGS)\n+libsax_gcj_la_GCJFLAGS = -findirect-dispatch -fbootstrap-classes $(AM_GCJFLAGS)\n source_files = \\\n org/xml/sax/SAXNotSupportedException.java \\\n org/xml/sax/helpers/NamespaceSupport.java \\"}, {"sha": "82f6b76a0b24f7b3d48f5b9216a4a139231dc7a3", "filename": "libjava/external/w3c_dom/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2Fexternal%2Fw3c_dom%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2Fexternal%2Fw3c_dom%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fexternal%2Fw3c_dom%2FMakefile.am?ref=cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "patch": "@@ -35,7 +35,7 @@ mostlyclean-local:\n noinst_LTLIBRARIES = libw3c-gcj.la\n \n libw3c_gcj_la_SOURCES =\tw3c.jar\n-libw3c_gcj_la_GCJFLAGS = -findirect-dispatch $(AM_GCJFLAGS)\n+libw3c_gcj_la_GCJFLAGS = -findirect-dispatch -fbootstrap-classes $(AM_GCJFLAGS)\n \n source_files = \\\n org/w3c/dom/xpath/XPathNamespace.java \\"}, {"sha": "4f5774098634c788560864adbd4e67984442f753", "filename": "libjava/external/w3c_dom/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2Fexternal%2Fw3c_dom%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2Fexternal%2Fw3c_dom%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fexternal%2Fw3c_dom%2FMakefile.in?ref=cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "patch": "@@ -314,7 +314,7 @@ AM_GCJFLAGS = \\\n BUILT_SOURCES = classes.stamp\n noinst_LTLIBRARIES = libw3c-gcj.la\n libw3c_gcj_la_SOURCES = w3c.jar\n-libw3c_gcj_la_GCJFLAGS = -findirect-dispatch $(AM_GCJFLAGS)\n+libw3c_gcj_la_GCJFLAGS = -findirect-dispatch -fbootstrap-classes $(AM_GCJFLAGS)\n source_files = \\\n org/w3c/dom/xpath/XPathNamespace.java \\\n org/w3c/dom/xpath/XPathResult.java \\"}, {"sha": "6b978f906e426c1ac550f413b3fa31d3a91390ce", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "patch": "@@ -565,6 +565,7 @@ extern void _Jv_RegisterBootstrapPackages ();\n // This is used to find ABI versions we recognize.\n #define GCJ_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 10)\n #define GCJ_BINARYCOMPAT_ADDITION 5\n+#define GCJ_BOOTSTRAP_LOADER_ADDITION 1\n \n // At present we know we are compatible with the BC ABI as used in GCC\n // 4.0.\n@@ -573,10 +574,18 @@ extern void _Jv_RegisterBootstrapPackages ();\n inline bool\n _Jv_CheckABIVersion (unsigned long value)\n {\n-  // Recognize our defined C++ ABI.\n+  // Recognize our defined C++ ABIs.\n   return (value == GCJ_VERSION\n-\t  // At the moment this is the only BC ABI we recognize.\n-\t  || value == GCJ_40_BC_ABI_VERSION);\n+\t  || value == (GCJ_VERSION + GCJ_BOOTSTRAP_LOADER_ADDITION)\n+\t  || value == GCJ_40_BC_ABI_VERSION\n+\t  || value == (GCJ_40_BC_ABI_VERSION + GCJ_BOOTSTRAP_LOADER_ADDITION));\n+}\n+\n+inline bool\n+_Jv_ClassForBootstrapLoader (unsigned long value)\n+{\n+  return (value == (GCJ_VERSION + GCJ_BOOTSTRAP_LOADER_ADDITION)\n+\t  || value == (GCJ_40_BC_ABI_VERSION + GCJ_BOOTSTRAP_LOADER_ADDITION));\n }\n \n // It makes the source cleaner if we simply always define this"}, {"sha": "28721d71daa8068c5398a52c813655c5cec8b97c", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "patch": "@@ -236,6 +236,8 @@ jclass _Jv_GetArrayClass (jclass klass, java::lang::ClassLoader *loader);\n \n jboolean _Jv_IsInterpretedClass (jclass);\n \n+void _Jv_CopyClassesToSystemLoader (java::lang::ClassLoader *);\n+\n #ifdef INTERPRETER\n void _Jv_InitField (jobject, jclass, int);\n \n@@ -494,6 +496,8 @@ class java::lang::Class : public java::lang::Object\n \n   friend void *::_Jv_ResolvePoolEntry (jclass this_class, jint index);\n \n+  friend void ::_Jv_CopyClassesToSystemLoader (java::lang::ClassLoader *);\n+\n   // Chain for class pool.  This also doubles as the ABI version\n   // number.  It is only used for this purpose at class registration\n   // time, and only for precompiled classes."}, {"sha": "2fa3f49ef1b30359733a79e36f283c2dea8db9ae", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "patch": "@@ -52,6 +52,15 @@ details.  */\n \n static jclass loaded_classes[HASH_LEN];\n \n+// This records classes which will be registered with the system class\n+// loader when it is initialized.\n+static jclass system_class_list;\n+\n+// This is used as the value of system_class_list after we have\n+// initialized the system class loader; it lets us know that we should\n+// no longer pay attention to the system abi flag.\n+#define SYSTEM_LOADER_INITIALIZED ((jclass) -1)\n+\n // This is the root of a linked list of classes\n static jclass stack_head;\n \n@@ -165,6 +174,22 @@ _Jv_RegisterClasses_Counted (const jclass * classes, size_t count)\n void\n _Jv_RegisterClassHookDefault (jclass klass)\n {\n+  // This is bogus, but there doesn't seem to be a better place to do\n+  // it.\n+  if (! klass->engine)\n+    klass->engine = &_Jv_soleCompiledEngine;\n+\n+  if (system_class_list != SYSTEM_LOADER_INITIALIZED)\n+    {\n+      unsigned long abi = (unsigned long) klass->next_or_version;\n+      if (! _Jv_ClassForBootstrapLoader (abi))\n+\t{\n+\t  klass->next_or_version = system_class_list;\n+\t  system_class_list = klass;\n+\t  return;\n+\t}\n+    }\n+\n   jint hash = HASH_UTF (klass->name);\n \n   // If the class is already registered, don't re-register it.\n@@ -193,9 +218,6 @@ _Jv_RegisterClassHookDefault (jclass klass)\n \t}\n     }\n \n-  // FIXME: this is really bogus!\n-  if (! klass->engine)\n-    klass->engine = &_Jv_soleCompiledEngine;\n   klass->next_or_version = loaded_classes[hash];\n   loaded_classes[hash] = klass;\n }\n@@ -216,6 +238,21 @@ _Jv_RegisterClass (jclass klass)\n   _Jv_RegisterClasses (classes);\n }\n \n+// This is used during initialization to register all compiled-in\n+// classes that are not part of the core with the system class loader.\n+void\n+_Jv_CopyClassesToSystemLoader (java::lang::ClassLoader *loader)\n+{\n+  for (jclass klass = system_class_list;\n+       klass;\n+       klass = klass->next_or_version)\n+    {\n+      klass->loader = loader;\n+      loader->loadedClasses->put(klass->name->toString(), klass);\n+    }\n+  system_class_list = SYSTEM_LOADER_INITIALIZED;\n+}\n+\n jclass\n _Jv_FindClass (_Jv_Utf8Const *name, java::lang::ClassLoader *loader)\n {"}, {"sha": "2e7b90da78911d835f31a65cac26f04cbb8bb5c9", "filename": "libjava/java/lang/natVMClassLoader.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2Fjava%2Flang%2FnatVMClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca/libjava%2Fjava%2Flang%2FnatVMClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatVMClassLoader.cc?ref=cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "patch": "@@ -99,6 +99,7 @@ java::lang::ClassLoader *\n java::lang::VMClassLoader::getSystemClassLoaderInternal()\n {\n   _Jv_InitClass (&gnu::gcj::runtime::ExtensionClassLoader::class$);\n+  _Jv_CopyClassesToSystemLoader (gnu::gcj::runtime::ExtensionClassLoader::system_instance);\n   return gnu::gcj::runtime::ExtensionClassLoader::system_instance;\n }\n "}]}