{"sha": "f9757a898a2c54e3faab00b4cda5e621f94f4960", "node_id": "C_kwDOANBUbNoAKGY5NzU3YTg5OGEyYzU0ZTNmYWFiMDBiNGNkYTVlNjIxZjk0ZjQ5NjA", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-05-12T22:48:04Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-05-13T15:39:41Z"}, "message": "typecheck: type check range patterns", "tree": {"sha": "b44ca71229f0fc7ebdff27cdc766dd9db6a04a57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b44ca71229f0fc7ebdff27cdc766dd9db6a04a57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9757a898a2c54e3faab00b4cda5e621f94f4960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9757a898a2c54e3faab00b4cda5e621f94f4960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9757a898a2c54e3faab00b4cda5e621f94f4960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9757a898a2c54e3faab00b4cda5e621f94f4960/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d01867d2f58c06b8f58778fbcd7fd6ec2fdbf448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d01867d2f58c06b8f58778fbcd7fd6ec2fdbf448", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d01867d2f58c06b8f58778fbcd7fd6ec2fdbf448"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "bceafde38a7edb2429a37ccc286cc4144ebb707b", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.cc", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9757a898a2c54e3faab00b4cda5e621f94f4960/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9757a898a2c54e3faab00b4cda5e621f94f4960/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc?ref=f9757a898a2c54e3faab00b4cda5e621f94f4960", "patch": "@@ -273,5 +273,82 @@ TypeCheckPattern::visit (HIR::LiteralPattern &pattern)\n \t\t\t     pattern.get_literal (), pattern.get_locus ());\n }\n \n+void\n+TypeCheckPattern::visit (HIR::RangePattern &pattern)\n+{\n+  // Resolve the upper and lower bounds, and ensure they are compatible types\n+  TyTy::BaseType *upper = nullptr, *lower = nullptr;\n+\n+  // TODO: It would be nice to factor this out into a helper since the logic for\n+  // both bounds is exactly the same...\n+  switch (pattern.get_upper_bound ()->get_bound_type ())\n+    {\n+      case HIR::RangePatternBound::RangePatternBoundType::LITERAL: {\n+\tHIR::RangePatternBoundLiteral &ref\n+\t  = *static_cast<HIR::RangePatternBoundLiteral *> (\n+\t    pattern.get_upper_bound ().get ());\n+\n+\tHIR::Literal lit = ref.get_literal ();\n+\n+\tupper = resolve_literal (pattern.get_pattern_mappings (), lit,\n+\t\t\t\t pattern.get_locus ());\n+      }\n+      break;\n+\n+      case HIR::RangePatternBound::RangePatternBoundType::PATH: {\n+\tHIR::RangePatternBoundPath &ref\n+\t  = *static_cast<HIR::RangePatternBoundPath *> (\n+\t    pattern.get_upper_bound ().get ());\n+\n+\tupper = TypeCheckExpr::Resolve (&ref.get_path (), false);\n+      }\n+      break;\n+\n+      case HIR::RangePatternBound::RangePatternBoundType::QUALPATH: {\n+\tHIR::RangePatternBoundQualPath &ref\n+\t  = *static_cast<HIR::RangePatternBoundQualPath *> (\n+\t    pattern.get_upper_bound ().get ());\n+\n+\tupper = TypeCheckExpr::Resolve (&ref.get_qualified_path (), false);\n+      }\n+      break;\n+    }\n+\n+  switch (pattern.get_lower_bound ()->get_bound_type ())\n+    {\n+      case HIR::RangePatternBound::RangePatternBoundType::LITERAL: {\n+\tHIR::RangePatternBoundLiteral &ref\n+\t  = *static_cast<HIR::RangePatternBoundLiteral *> (\n+\t    pattern.get_lower_bound ().get ());\n+\n+\tHIR::Literal lit = ref.get_literal ();\n+\n+\tlower = resolve_literal (pattern.get_pattern_mappings (), lit,\n+\t\t\t\t pattern.get_locus ());\n+      }\n+      break;\n+\n+      case HIR::RangePatternBound::RangePatternBoundType::PATH: {\n+\tHIR::RangePatternBoundPath &ref\n+\t  = *static_cast<HIR::RangePatternBoundPath *> (\n+\t    pattern.get_lower_bound ().get ());\n+\n+\tlower = TypeCheckExpr::Resolve (&ref.get_path (), false);\n+      }\n+      break;\n+\n+      case HIR::RangePatternBound::RangePatternBoundType::QUALPATH: {\n+\tHIR::RangePatternBoundQualPath &ref\n+\t  = *static_cast<HIR::RangePatternBoundQualPath *> (\n+\t    pattern.get_lower_bound ().get ());\n+\n+\tlower = TypeCheckExpr::Resolve (&ref.get_qualified_path (), false);\n+      }\n+      break;\n+    }\n+\n+  infered = upper->unify (lower);\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "03c4977d572bdb30c835994732e76275bc3e44bd", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9757a898a2c54e3faab00b4cda5e621f94f4960/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9757a898a2c54e3faab00b4cda5e621f94f4960/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h?ref=f9757a898a2c54e3faab00b4cda5e621f94f4960", "patch": "@@ -56,11 +56,18 @@ class TypeCheckPattern : public TypeCheckBase\n \n   void visit (HIR::LiteralPattern &pattern) override;\n \n+  void visit (HIR::RangePattern &pattern) override;\n+\n private:\n   TypeCheckPattern (TyTy::BaseType *parent)\n     : TypeCheckBase (), parent (parent), infered (nullptr)\n   {}\n \n+  static TyTy::BaseType *\n+  typecheck_range_pattern_bound (HIR::RangePatternBound *bound,\n+\t\t\t\t Analysis::NodeMapping mappings,\n+\t\t\t\t Location locus);\n+\n   TyTy::BaseType *parent;\n   TyTy::BaseType *infered;\n };"}]}