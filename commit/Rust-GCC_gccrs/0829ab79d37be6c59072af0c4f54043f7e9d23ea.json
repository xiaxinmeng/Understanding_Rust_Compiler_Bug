{"sha": "0829ab79d37be6c59072af0c4f54043f7e9d23ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgyOWFiNzlkMzdiZTZjNTkwNzJhZjBjNGY1NDA0M2Y3ZTlkMjNlYQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-03-02T12:20:11Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-07-29T07:19:44Z"}, "message": "[OpenACC] Extract 'pass_oacc_loop_designation' out of 'pass_oacc_device_lower'\n\nThis really is a separate step -- and another pass to be added between the two,\nlater on.\n\n\tgcc/\n\t* omp-offload.c (oacc_loop_xform_head_tail, oacc_loop_process):\n\t'update_stmt' after modification.\n\t(pass_oacc_loop_designation): New function, extracted out of...\n\t(pass_oacc_device_lower): ... this.\n\t(pass_data_oacc_loop_designation, pass_oacc_loop_designation)\n\t(make_pass_oacc_loop_designation): New\n\t* passes.def: Add it.\n\t* tree-parloops.c (create_parallel_loop): Adjust.\n\t* tree-pass.h (make_pass_oacc_loop_designation): New.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/classify-kernels-unparallelized.c:\n\t's%oaccdevlow%oaccloops%g'.\n\t* c-c++-common/goacc/classify-kernels.c: Likewise.\n\t* c-c++-common/goacc/classify-parallel.c: Likewise.\n\t* c-c++-common/goacc/classify-routine-nohost.c: Likewise.\n\t* c-c++-common/goacc/classify-routine.c: Likewise.\n\t* c-c++-common/goacc/classify-serial.c: Likewise.\n\t* c-c++-common/goacc/routine-nohost-1.c: Likewise.\n\t* g++.dg/goacc/template.C: Likewise.\n\t* gcc.dg/goacc/loop-processing-1.c: Likewise.\n\t* gfortran.dg/goacc/classify-kernels-unparallelized.f95: Likewise.\n\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.\n\t* gfortran.dg/goacc/classify-parallel.f95: Likewise.\n\t* gfortran.dg/goacc/classify-routine-nohost.f95: Likewise.\n\t* gfortran.dg/goacc/classify-routine.f95: Likewise.\n\t* gfortran.dg/goacc/classify-serial.f95: Likewise.\n\t* gfortran.dg/goacc/routine-multiple-directives-1.f90: Likewise.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/pr85486-2.c:\n\t's%oaccdevlow%oaccloops%g'.\n\t* testsuite/libgomp.oacc-c-c++-common/pr85486-3.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/pr85486.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-nohost-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-3.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-4.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-5.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-6.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-7.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/routine-nohost-1.f90: Likewise.\n\nCo-Authored-By: Julian Brown <julian@codesourcery.com>\nCo-Authored-By: Kwok Cheung Yeung <kcy@codesourcery.com>", "tree": {"sha": "77519632e6c2ea8281f55e17c3687c21cde62429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77519632e6c2ea8281f55e17c3687c21cde62429"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0829ab79d37be6c59072af0c4f54043f7e9d23ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0829ab79d37be6c59072af0c4f54043f7e9d23ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0829ab79d37be6c59072af0c4f54043f7e9d23ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0829ab79d37be6c59072af0c4f54043f7e9d23ea/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0529d96f56758e56151f409c55bab3034163210", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0529d96f56758e56151f409c55bab3034163210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0529d96f56758e56151f409c55bab3034163210"}], "stats": {"total": 370, "additions": 213, "deletions": 157}, "files": [{"sha": "d881426ae65a6a9516aed3849c6e985ae4914cec", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 76, "deletions": 22, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -1367,6 +1367,7 @@ oacc_loop_xform_head_tail (gcall *from, int level)\n \t}\n       else if (gimple_call_internal_p (stmt, IFN_GOACC_REDUCTION))\n \t*gimple_call_arg_ptr (stmt, 3) = replacement;\n+      update_stmt (stmt);\n \n       gsi_next (&gsi);\n       while (gsi_end_p (gsi))\n@@ -1392,25 +1393,28 @@ oacc_loop_process (oacc_loop *loop)\n       gcall *call;\n       \n       for (ix = 0; loop->ifns.iterate (ix, &call); ix++)\n-\tswitch (gimple_call_internal_fn (call))\n-\t  {\n-\t  case IFN_GOACC_LOOP:\n+\t{\n+\t  switch (gimple_call_internal_fn (call))\n \t    {\n-\t      bool is_e = gimple_call_arg (call, 5) == integer_minus_one_node;\n-\t      gimple_call_set_arg (call, 5, is_e ? e_mask_arg : mask_arg);\n-\t      if (!is_e)\n-\t\tgimple_call_set_arg (call, 4, chunk_arg);\n-\t    }\n-\t    break;\n+\t    case IFN_GOACC_LOOP:\n+\t      {\n+\t\tbool is_e = gimple_call_arg (call, 5) == integer_minus_one_node;\n+\t\tgimple_call_set_arg (call, 5, is_e ? e_mask_arg : mask_arg);\n+\t\tif (!is_e)\n+\t\t  gimple_call_set_arg (call, 4, chunk_arg);\n+\t      }\n+\t      break;\n \n-\t  case IFN_GOACC_TILE:\n-\t    gimple_call_set_arg (call, 3, mask_arg);\n-\t    gimple_call_set_arg (call, 4, e_mask_arg);\n-\t    break;\n+\t    case IFN_GOACC_TILE:\n+\t      gimple_call_set_arg (call, 3, mask_arg);\n+\t      gimple_call_set_arg (call, 4, e_mask_arg);\n+\t      break;\n \n-\t  default:\n-\t    gcc_unreachable ();\n-\t  }\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\t  update_stmt (call);\n+\t}\n \n       unsigned dim = GOMP_DIM_GANG;\n       unsigned mask = loop->mask | loop->e_mask;\n@@ -1912,7 +1916,7 @@ is_sync_builtin_call (gcall *call)\n    point (including the host fallback).  */\n \n static unsigned int\n-execute_oacc_device_lower ()\n+execute_oacc_loop_designation ()\n {\n   tree attrs = oacc_get_fn_attrib (current_function_decl);\n \n@@ -1981,6 +1985,8 @@ execute_oacc_device_lower ()\n \tgcc_unreachable ();\n     }\n \n+  /* This doesn't belong into 'pass_oacc_loop_designation' conceptually, but\n+     it's a convenient place, so...  */\n   if (is_oacc_routine)\n     {\n       tree attr = lookup_attribute (\"omp declare target\",\n@@ -2088,9 +2094,23 @@ execute_oacc_device_lower ()\n \tfree_oacc_loop (l);\n     }\n \n-  /* Offloaded targets may introduce new basic blocks, which require\n-     dominance information to update SSA.  */\n-  calculate_dominance_info (CDI_DOMINATORS);\n+  free_oacc_loop (loops);\n+\n+  return 0;\n+}\n+\n+static unsigned int\n+execute_oacc_device_lower ()\n+{\n+  tree attrs = oacc_get_fn_attrib (current_function_decl);\n+\n+  if (!attrs)\n+    /* Not an offloaded function.  */\n+    return 0;\n+\n+  int dims[GOMP_DIM_MAX];\n+  for (unsigned i = 0; i < GOMP_DIM_MAX; i++)\n+    dims[i] = oacc_get_fn_dim_size (current_function_decl, i);\n \n   hash_map<tree, tree> adjusted_vars;\n \n@@ -2355,8 +2375,6 @@ execute_oacc_device_lower ()\n \t  }\n     }\n \n-  free_oacc_loop (loops);\n-\n   return 0;\n }\n \n@@ -2397,6 +2415,36 @@ default_goacc_dim_limit (int ARG_UNUSED (axis))\n \n namespace {\n \n+const pass_data pass_data_oacc_loop_designation =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"oaccloops\", /* name */\n+  OPTGROUP_OMP, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  PROP_cfg, /* properties_required */\n+  0 /* Possibly PROP_gimple_eomp.  */, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  TODO_update_ssa | TODO_cleanup_cfg, /* todo_flags_finish */\n+};\n+\n+class pass_oacc_loop_designation : public gimple_opt_pass\n+{\n+public:\n+  pass_oacc_loop_designation (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_oacc_loop_designation, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual bool gate (function *) { return flag_openacc; };\n+\n+  virtual unsigned int execute (function *)\n+    {\n+      return execute_oacc_loop_designation ();\n+    }\n+\n+}; // class pass_oacc_loop_designation\n+\n const pass_data pass_data_oacc_device_lower =\n {\n   GIMPLE_PASS, /* type */\n@@ -2429,6 +2477,12 @@ class pass_oacc_device_lower : public gimple_opt_pass\n \n } // anon namespace\n \n+gimple_opt_pass *\n+make_pass_oacc_loop_designation (gcc::context *ctxt)\n+{\n+  return new pass_oacc_loop_designation (ctxt);\n+}\n+\n gimple_opt_pass *\n make_pass_oacc_device_lower (gcc::context *ctxt)\n {"}, {"sha": "26d86df2f5a8c8345cf3ac9aa75f11159113693a", "filename": "gcc/passes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -183,6 +183,7 @@ along with GCC; see the file COPYING3.  If not see\n   INSERT_PASSES_AFTER (all_passes)\n   NEXT_PASS (pass_fixup_cfg);\n   NEXT_PASS (pass_lower_eh_dispatch);\n+  NEXT_PASS (pass_oacc_loop_designation);\n   NEXT_PASS (pass_oacc_device_lower);\n   NEXT_PASS (pass_omp_device_lower);\n   NEXT_PASS (pass_omp_target_link);"}, {"sha": "1d12658790d14ba7c37a0bbc3581f3dd02fe44f0", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels-unparallelized.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -5,7 +5,7 @@\n    { dg-additional-options \"-fopt-info-optimized-omp\" }\n    { dg-additional-options \"-fdump-tree-ompexp\" }\n    { dg-additional-options \"-fdump-tree-parloops1-all\" }\n-   { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+   { dg-additional-options \"-fdump-tree-oaccloops\" } */\n \n /* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n    aspects of that functionality.  */\n@@ -38,6 +38,6 @@ void KERNELS ()\n \n /* Check the offloaded function's classification and compute dimensions (will\n    always be 1 x 1 x 1 for non-offloading compilation).\n-   { dg-final { scan-tree-dump-times \"(?n)Function is unparallelized OpenACC kernels offload\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)Function is unparallelized OpenACC kernels offload\" 1 \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccloops\" } } */"}, {"sha": "bdf7b4a06410a28bdeaf42e4b413807c395f226b", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -5,7 +5,7 @@\n    { dg-additional-options \"-fopt-info-optimized-omp\" }\n    { dg-additional-options \"-fdump-tree-ompexp\" }\n    { dg-additional-options \"-fdump-tree-parloops1-all\" }\n-   { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+   { dg-additional-options \"-fdump-tree-oaccloops\" } */\n \n /* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n    aspects of that functionality.  */\n@@ -34,6 +34,6 @@ void KERNELS ()\n \n /* Check the offloaded function's classification and compute dimensions (will\n    always be 1 x 1 x 1 for non-offloading compilation).\n-   { dg-final { scan-tree-dump-times \"(?n)Function is parallelized OpenACC kernels offload\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)Function is parallelized OpenACC kernels offload\" 1 \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccloops\" } } */"}, {"sha": "9056aa69dad6b5127f18482b2ac89b7f5e941413", "filename": "gcc/testsuite/c-c++-common/goacc/classify-parallel.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -4,7 +4,7 @@\n /* { dg-additional-options \"-O2\" }\n    { dg-additional-options \"-fopt-info-optimized-omp\" }\n    { dg-additional-options \"-fdump-tree-ompexp\" }\n-   { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+   { dg-additional-options \"-fdump-tree-oaccloops\" } */\n \n /* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n    aspects of that functionality.  */\n@@ -27,6 +27,6 @@ void PARALLEL ()\n \n /* Check the offloaded function's classification and compute dimensions (will\n    always be 1 x 1 x 1 for non-offloading compilation).\n-   { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC parallel offload\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc parallel, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC parallel offload\" 1 \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc parallel, omp target entrypoint\\\\)\\\\)\" 1 \"oaccloops\" } } */"}, {"sha": "998558220114929701bd362310633cf218d39505", "filename": "gcc/testsuite/c-c++-common/goacc/classify-routine-nohost.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine-nohost.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine-nohost.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine-nohost.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -4,7 +4,7 @@\n /* { dg-additional-options \"-O2\" }\n    { dg-additional-options \"-fopt-info-optimized-omp\" }\n    { dg-additional-options \"-fdump-tree-ompexp\" }\n-   { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+   { dg-additional-options \"-fdump-tree-oaccloops\" } */\n \n /* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n    aspects of that functionality.  */\n@@ -28,14 +28,14 @@ void ROUTINE ()\n    { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp declare target \\\\(nohost worker\\\\), oacc function \\\\(0 1, 1 0, 1 0\\\\)\\\\)\\\\)\" 1 \"ompexp\" } } */\n \n /* Check the offloaded function's classification.\n-   { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC routine level 1\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE' has 'nohost' clause\" 1 \"oaccdevlow\" { target c } } }\n-   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'void ROUTINE\\\\(\\\\)' has 'nohost' clause\" 1 \"oaccdevlow\" { target { c++ && { ! offloading_enabled } } } } }\n-   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE\\\\(\\\\)' has 'nohost' clause\" 1 \"oaccdevlow\" { target { c++ && offloading_enabled } } } }\n-   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE' discarded\" 1 \"oaccdevlow\" { target c } } }\n-   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'void ROUTINE\\\\(\\\\)' discarded\" 1 \"oaccdevlow\" { target { c++ && { ! offloading_enabled } } } } }\n-   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE\\\\(\\\\)' discarded\" 1 \"oaccdevlow\" { target { c++ && offloading_enabled } } } }\n+   { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC routine level 1\" 1 \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE' has 'nohost' clause\" 1 \"oaccloops\" { target c } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'void ROUTINE\\\\(\\\\)' has 'nohost' clause\" 1 \"oaccloops\" { target { c++ && { ! offloading_enabled } } } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE\\\\(\\\\)' has 'nohost' clause\" 1 \"oaccloops\" { target { c++ && offloading_enabled } } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE' discarded\" 1 \"oaccloops\" { target c } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'void ROUTINE\\\\(\\\\)' discarded\" 1 \"oaccloops\" { target { c++ && { ! offloading_enabled } } } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE\\\\(\\\\)' discarded\" 1 \"oaccloops\" { target { c++ && offloading_enabled } } } }\n    TODO See PR101551 for 'offloading_enabled' differences.\n-   { dg-final { scan-tree-dump-not \"(?n)Compute dimensions\" \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-not \"(?n)__attribute__\\\\(.*omp declare target \\\\(nohost\" \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-not \"(?n)void ROUTINE \\\\(\\\\)\" \"oaccdevlow\" } } */\n+   { dg-final { scan-tree-dump-not \"(?n)Compute dimensions\" \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-not \"(?n)__attribute__\\\\(.*omp declare target \\\\(nohost\" \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-not \"(?n)void ROUTINE \\\\(\\\\)\" \"oaccloops\" } } */"}, {"sha": "f7f0454009bf9ac6f274d69dfbc73f0f567423b8", "filename": "gcc/testsuite/c-c++-common/goacc/classify-routine.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -4,7 +4,7 @@\n /* { dg-additional-options \"-O2\" }\n    { dg-additional-options \"-fopt-info-optimized-omp\" }\n    { dg-additional-options \"-fdump-tree-ompexp\" }\n-   { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+   { dg-additional-options \"-fdump-tree-oaccloops\" } */\n \n /* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n    aspects of that functionality.  */\n@@ -29,14 +29,14 @@ void ROUTINE ()\n \n /* Check the offloaded function's classification and compute dimensions (will\n    always be 1 x 1 x 1 for non-offloading compilation).\n-   { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC routine level 1\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target c } } }\n-   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'void ROUTINE\\\\(\\\\)' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target { c++ && { ! offloading_enabled } } } } }\n-   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE\\\\(\\\\)' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target { c++ && offloading_enabled } } } }\n-   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE' not discarded\" 1 \"oaccdevlow\" { target c } } }\n-   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'void ROUTINE\\\\(\\\\)' not discarded\" 1 \"oaccdevlow\" { target { c++ && { ! offloading_enabled } } } } }\n-   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE\\\\(\\\\)' not discarded\" 1 \"oaccdevlow\" { target { c++ && offloading_enabled } } } }\n+   { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC routine level 1\" 1 \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE' doesn't have 'nohost' clause\" 1 \"oaccloops\" { target c } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'void ROUTINE\\\\(\\\\)' doesn't have 'nohost' clause\" 1 \"oaccloops\" { target { c++ && { ! offloading_enabled } } } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE\\\\(\\\\)' doesn't have 'nohost' clause\" 1 \"oaccloops\" { target { c++ && offloading_enabled } } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE' not discarded\" 1 \"oaccloops\" { target c } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'void ROUTINE\\\\(\\\\)' not discarded\" 1 \"oaccloops\" { target { c++ && { ! offloading_enabled } } } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE\\\\(\\\\)' not discarded\" 1 \"oaccloops\" { target { c++ && offloading_enabled } } } }\n    TODO See PR101551 for 'offloading_enabled' differences.\n-   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0 1, 1 1, 1 1\\\\), omp declare target \\\\(worker\\\\), oacc function \\\\(0 1, 1 0, 1 0\\\\)\\\\)\\\\)\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)void ROUTINE \\\\(\\\\)\" 1 \"oaccdevlow\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0 1, 1 1, 1 1\\\\), omp declare target \\\\(worker\\\\), oacc function \\\\(0 1, 1 0, 1 0\\\\)\\\\)\\\\)\" 1 \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)void ROUTINE \\\\(\\\\)\" 1 \"oaccloops\" } } */"}, {"sha": "f41c141bcd57c1a23e11d63455990a5d6978a866", "filename": "gcc/testsuite/c-c++-common/goacc/classify-serial.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-serial.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-serial.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-serial.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -4,7 +4,7 @@\n /* { dg-additional-options \"-O2\" }\n    { dg-additional-options \"-fopt-info-optimized-omp\" }\n    { dg-additional-options \"-fdump-tree-ompexp\" }\n-   { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+   { dg-additional-options \"-fdump-tree-oaccloops\" } */\n \n /* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n    aspects of that functionality.  */\n@@ -32,6 +32,6 @@ void SERIAL ()\n \n /* Check the offloaded function's classification and compute dimensions (will\n    always be 1 x 1 x 1 for non-offloading compilation).\n-   { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC serial offload\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc serial, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC serial offload\" 1 \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc serial, omp target entrypoint\\\\)\\\\)\" 1 \"oaccloops\" } } */"}, {"sha": "59ebb2bc5a9f7e74658b5b749e8a119551e9d566", "filename": "gcc/testsuite/c-c++-common/goacc/routine-nohost-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-nohost-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-nohost-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-nohost-1.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -1,6 +1,6 @@\n /* Test OpenACC 'routine' with 'nohost' clause, valid use.  */\n \n-/* { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+/* { dg-additional-options \"-fdump-tree-oaccloops\" } */\n \n #pragma acc routine nohost\n int THREE(void)\n@@ -13,7 +13,7 @@ int THREE(void)\n #pragma acc routine nohost\n extern int THREE(void);\n \n-/* { dg-final { scan-tree-dump-times {(?n)^OpenACC routine '[^']*THREE[^']*' has 'nohost' clause\\.$} 1 oaccdevlow } } */\n+/* { dg-final { scan-tree-dump-times {(?n)^OpenACC routine '[^']*THREE[^']*' has 'nohost' clause\\.$} 1 oaccloops } } */\n \n \n #pragma acc routine nohost\n@@ -30,7 +30,7 @@ extern void NOTHING(void);\n \n #pragma acc routine (NOTHING) nohost\n \n-/* { dg-final { scan-tree-dump-times {(?n)^OpenACC routine '[^']*NOTHING[^']*' has 'nohost' clause\\.$} 1 oaccdevlow } } */\n+/* { dg-final { scan-tree-dump-times {(?n)^OpenACC routine '[^']*NOTHING[^']*' has 'nohost' clause\\.$} 1 oaccloops } } */\n \n \n extern float ADD(float, float);\n@@ -47,4 +47,4 @@ extern float ADD(float, float);\n \n #pragma acc routine (ADD) nohost\n \n-/* { dg-final { scan-tree-dump-times {(?n)^OpenACC routine '[^']*ADD[^']*' has 'nohost' clause\\.$} 1 oaccdevlow } } */\n+/* { dg-final { scan-tree-dump-times {(?n)^OpenACC routine '[^']*ADD[^']*' has 'nohost' clause\\.$} 1 oaccloops } } */"}, {"sha": "10d3f446da7f604aafadfb39db4b908ab98c1745", "filename": "gcc/testsuite/g++.dg/goacc/template.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ftemplate.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ftemplate.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ftemplate.C?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+/* { dg-additional-options \"-fdump-tree-oaccloops\" } */\n \n #pragma acc routine nohost\n template <typename T> T\n@@ -156,13 +156,13 @@ main ()\n   return b + c;\n }\n \n-/* { dg-final { scan-tree-dump-times {(?n)^OpenACC routine '[^']+' has 'nohost' clause\\.$} 4 oaccdevlow } }\n-   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'T accDouble\\(int\\) \\[with T = char\\]' has 'nohost' clause\\.$} 1 oaccdevlow { target { ! offloading_enabled } } } }\n-   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'accDouble<char>\\(int\\)char' has 'nohost' clause\\.$} 1 oaccdevlow { target offloading_enabled } } }\n-   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'T accDouble\\(int\\) \\[with T = int\\]' has 'nohost' clause\\.$} 1 oaccdevlow { target { ! offloading_enabled } } } }\n-   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'accDouble<int>\\(int\\)int' has 'nohost' clause\\.$} 1 oaccdevlow { target offloading_enabled } } }\n-   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'T accDouble\\(int\\) \\[with T = float\\]' has 'nohost' clause\\.$} 1 oaccdevlow { target { ! offloading_enabled } } } }\n-   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'accDouble<float>\\(int\\)float' has 'nohost' clause\\.$} 1 oaccdevlow { target offloading_enabled } } }\n-   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'T accDouble\\(int\\) \\[with T = double\\]' has 'nohost' clause\\.$} 1 oaccdevlow { target { ! offloading_enabled } } } }\n-   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'accDouble<double>\\(int\\)double' has 'nohost' clause\\.$} 1 oaccdevlow { target offloading_enabled } } }\n+/* { dg-final { scan-tree-dump-times {(?n)^OpenACC routine '[^']+' has 'nohost' clause\\.$} 4 oaccloops } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'T accDouble\\(int\\) \\[with T = char\\]' has 'nohost' clause\\.$} 1 oaccloops { target { ! offloading_enabled } } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'accDouble<char>\\(int\\)char' has 'nohost' clause\\.$} 1 oaccloops { target offloading_enabled } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'T accDouble\\(int\\) \\[with T = int\\]' has 'nohost' clause\\.$} 1 oaccloops { target { ! offloading_enabled } } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'accDouble<int>\\(int\\)int' has 'nohost' clause\\.$} 1 oaccloops { target offloading_enabled } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'T accDouble\\(int\\) \\[with T = float\\]' has 'nohost' clause\\.$} 1 oaccloops { target { ! offloading_enabled } } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'accDouble<float>\\(int\\)float' has 'nohost' clause\\.$} 1 oaccloops { target offloading_enabled } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'T accDouble\\(int\\) \\[with T = double\\]' has 'nohost' clause\\.$} 1 oaccloops { target { ! offloading_enabled } } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'accDouble<double>\\(int\\)double' has 'nohost' clause\\.$} 1 oaccloops { target offloading_enabled } } }\n    TODO See PR101551 for 'offloading_enabled' differences.  */"}, {"sha": "78b9aed89beb3587762a612692e3b90938ac7633", "filename": "gcc/testsuite/gcc.dg/goacc/loop-processing-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Floop-processing-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Floop-processing-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Floop-processing-1.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -1,5 +1,5 @@\n /* Make sure that OpenACC loop processing happens.  */\n-/* { dg-additional-options \"-O2 -fdump-tree-oaccdevlow\" } */\n+/* { dg-additional-options \"-O2 -fdump-tree-oaccloops\" } */\n \n extern int place ();\n \n@@ -15,4 +15,4 @@ void vector_1 (int *ary, int size)\n   }\n }\n \n-/* { dg-final { scan-tree-dump {OpenACC loops.*Loop 0\\(0\\).*Loop 24\\(1\\).*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 1, 36\\);.*Head-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 1, 36\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 0\\);.*Tail-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 0\\);.*Loop 6\\(6\\).*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 2, 6\\);.*Head-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 2, 6\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 1\\);.*Head-1:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 2\\);.*Tail-1:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 2\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 2\\);.*Tail-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 1\\);} \"oaccdevlow\" } } */\n+/* { dg-final { scan-tree-dump {OpenACC loops.*Loop 0\\(0\\).*Loop 24\\(1\\).*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 1, 36\\);.*Head-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 1, 36\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 0\\);.*Tail-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 0\\);.*Loop 6\\(6\\).*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 2, 6\\);.*Head-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 2, 6\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 1\\);.*Head-1:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 2\\);.*Tail-1:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 2\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 2\\);.*Tail-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 1\\);} \"oaccloops\" } } */"}, {"sha": "3fb48b321f2ffda563a1676309fefb44a44eb0d9", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels-unparallelized.f95", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -5,7 +5,7 @@\n ! { dg-additional-options \"-fopt-info-optimized-omp\" }\n ! { dg-additional-options \"-fdump-tree-ompexp\" }\n ! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n-! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n+! { dg-additional-options \"-fdump-tree-oaccloops\" }\n \n ! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n ! aspects of that functionality.\n@@ -40,6 +40,6 @@ end program main\n \n ! Check the offloaded function's classification and compute dimensions (will\n ! always be 1 x 1 x 1 for non-offloading compilation).\n-! { dg-final { scan-tree-dump-times \"(?n)Function is unparallelized OpenACC kernels offload\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Function is unparallelized OpenACC kernels offload\" 1 \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccloops\" } }"}, {"sha": "6c8d298e236d6016587073146bf43fd5777c8c61", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels.f95", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -5,7 +5,7 @@\n ! { dg-additional-options \"-fopt-info-optimized-omp\" }\n ! { dg-additional-options \"-fdump-tree-ompexp\" }\n ! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n-! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n+! { dg-additional-options \"-fdump-tree-oaccloops\" }\n \n ! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n ! aspects of that functionality.\n@@ -36,6 +36,6 @@ end program main\n \n ! Check the offloaded function's classification and compute dimensions (will\n ! always be 1 x 1 x 1 for non-offloading compilation).\n-! { dg-final { scan-tree-dump-times \"(?n)Function is parallelized OpenACC kernels offload\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Function is parallelized OpenACC kernels offload\" 1 \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccloops\" } }"}, {"sha": "ce4c08ff219dd047949ed65684492de48280f130", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-parallel.f95", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -4,7 +4,7 @@\n ! { dg-additional-options \"-O2\" }\n ! { dg-additional-options \"-fopt-info-optimized-omp\" }\n ! { dg-additional-options \"-fdump-tree-ompexp\" }\n-! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n+! { dg-additional-options \"-fdump-tree-oaccloops\" }\n \n ! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n ! aspects of that functionality.\n@@ -29,6 +29,6 @@ end program main\n \n ! Check the offloaded function's classification and compute dimensions (will\n ! always be 1 x 1 x 1 for non-offloading compilation).\n-! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC parallel offload\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc parallel, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC parallel offload\" 1 \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc parallel, omp target entrypoint\\\\)\\\\)\" 1 \"oaccloops\" } }"}, {"sha": "07e2063551f1513981ba29203c13039565be9d56", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-routine-nohost.f95", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine-nohost.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine-nohost.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine-nohost.f95?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -4,7 +4,7 @@\n ! { dg-additional-options \"-O2\" }\n ! { dg-additional-options \"-fopt-info-optimized-omp\" }\n ! { dg-additional-options \"-fdump-tree-ompexp\" }\n-! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n+! { dg-additional-options \"-fdump-tree-oaccloops\" }\n \n ! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n ! aspects of that functionality.\n@@ -27,13 +27,13 @@ end subroutine ROUTINE\n ! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0 1, 1 0, 1 0\\\\), omp declare target \\\\(nohost worker\\\\)\\\\)\\\\)\" 1 \"ompexp\" } }\n \n ! Check the offloaded function's classification.\n-! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC routine level 1\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine' has 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n-! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine_' has 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n-! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine' discarded\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n-! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine_' discarded\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n-! { dg-final { scan-tree-dump-not \"(?n)Compute dimensions\" \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-not \"(?n)__attribute__\\\\(.*omp declare target \\\\(nohost\" \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-not \"(?n)void routine \\\\(\\\\)\" \"oaccdevlow\" { target { ! offloading_enabled } } } }\n-! { dg-final { scan-tree-dump-not \"(?n)void routine_ \\\\(\\\\)\" \"oaccdevlow\" { target offloading_enabled } } }\n+! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC routine level 1\" 1 \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine' has 'nohost' clause\" 1 \"oaccloops\" { target { ! offloading_enabled } } } }\n+! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine_' has 'nohost' clause\" 1 \"oaccloops\" { target offloading_enabled } } }\n+! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine' discarded\" 1 \"oaccloops\" { target { ! offloading_enabled } } } }\n+! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine_' discarded\" 1 \"oaccloops\" { target offloading_enabled } } }\n+! { dg-final { scan-tree-dump-not \"(?n)Compute dimensions\" \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-not \"(?n)__attribute__\\\\(.*omp declare target \\\\(nohost\" \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-not \"(?n)void routine \\\\(\\\\)\" \"oaccloops\" { target { ! offloading_enabled } } } }\n+! { dg-final { scan-tree-dump-not \"(?n)void routine_ \\\\(\\\\)\" \"oaccloops\" { target offloading_enabled } } }\n !TODO See PR101551 for 'offloading_enabled' differences."}, {"sha": "b065ccadacd5f3f9b34794ac8621509abc8eda77", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-routine.f95", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -4,7 +4,7 @@\n ! { dg-additional-options \"-O2\" }\n ! { dg-additional-options \"-fopt-info-optimized-omp\" }\n ! { dg-additional-options \"-fdump-tree-ompexp\" }\n-! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n+! { dg-additional-options \"-fdump-tree-oaccloops\" }\n \n ! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n ! aspects of that functionality.\n@@ -28,13 +28,13 @@ end subroutine ROUTINE\n \n ! Check the offloaded function's classification and compute dimensions (will\n ! always be 1 x 1 x 1 for non-offloading compilation).\n-! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC routine level 1\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n-! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine_' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n-! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine' not discarded\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n-! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine_' not discarded\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n-! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0 1, 1 1, 1 1\\\\), omp declare target \\\\(worker\\\\)\\\\)\\\\)\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)void routine \\\\(\\\\)\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n-! { dg-final { scan-tree-dump-times \"(?n)void routine_ \\\\(\\\\)\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC routine level 1\" 1 \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine' doesn't have 'nohost' clause\" 1 \"oaccloops\" { target { ! offloading_enabled } } } }\n+! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine_' doesn't have 'nohost' clause\" 1 \"oaccloops\" { target offloading_enabled } } }\n+! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine' not discarded\" 1 \"oaccloops\" { target { ! offloading_enabled } } } }\n+! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine_' not discarded\" 1 \"oaccloops\" { target offloading_enabled } } }\n+! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0 1, 1 1, 1 1\\\\), omp declare target \\\\(worker\\\\)\\\\)\\\\)\" 1 \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)void routine \\\\(\\\\)\" 1 \"oaccloops\" { target { ! offloading_enabled } } } }\n+! { dg-final { scan-tree-dump-times \"(?n)void routine_ \\\\(\\\\)\" 1 \"oaccloops\" { target offloading_enabled } } }\n !TODO See PR101551 for 'offloading_enabled' differences."}, {"sha": "f5cb3fe50c570d1a1ef69f102f3b7bf0fe5a7140", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-serial.f95", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-serial.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-serial.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-serial.f95?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -4,7 +4,7 @@\n ! { dg-additional-options \"-O2\" }\n ! { dg-additional-options \"-fopt-info-optimized-omp\" }\n ! { dg-additional-options \"-fdump-tree-ompexp\" }\n-! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n+! { dg-additional-options \"-fdump-tree-oaccloops\" }\n \n ! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n ! aspects of that functionality.\n@@ -32,6 +32,6 @@ end program main\n \n ! Check the offloaded function's classification and compute dimensions (will\n ! always be 1 x 1 x 1 for non-offloading compilation).\n-! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC serial offload\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc serial, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC serial offload\" 1 \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc serial, omp target entrypoint\\\\)\\\\)\" 1 \"oaccloops\" } }"}, {"sha": "42bcb0e8d63b553225d38a7b16aeb939bfea98ff", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-multiple-directives-1.f90", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-multiple-directives-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-multiple-directives-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-multiple-directives-1.f90?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -1,6 +1,6 @@\n ! Check for valid cases of multiple OpenACC 'routine' directives.\n \n-! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n+! { dg-additional-options \"-fdump-tree-oaccloops\" }\n !TODO See PR101551 for 'offloading_enabled' differences.\n \n ! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n@@ -11,32 +11,32 @@ SUBROUTINE s_1\n !$ACC ROUTINE(s_1) SEQ\n !$ACC ROUTINE SEQ\n       END SUBROUTINE s_1\n-      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_1' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n-      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_1_' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_1' doesn't have 'nohost' clause\" 1 \"oaccloops\" { target { ! offloading_enabled } } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_1_' doesn't have 'nohost' clause\" 1 \"oaccloops\" { target offloading_enabled } } }\n \n       SUBROUTINE s_1_nh\n !$ACC ROUTINE(s_1_nh) NOHOST\n !$ACC ROUTINE(s_1_nh) SEQ NOHOST\n !$ACC ROUTINE NOHOST SEQ\n       END SUBROUTINE s_1_nh\n-      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_1_nh' has 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n-      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_1_nh_' has 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_1_nh' has 'nohost' clause\" 1 \"oaccloops\" { target { ! offloading_enabled } } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_1_nh_' has 'nohost' clause\" 1 \"oaccloops\" { target offloading_enabled } } }\n \n       SUBROUTINE s_2\n !$ACC ROUTINE\n !$ACC ROUTINE SEQ\n !$ACC ROUTINE(s_2)\n       END SUBROUTINE s_2\n-      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_2' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n-      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_2_' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_2' doesn't have 'nohost' clause\" 1 \"oaccloops\" { target { ! offloading_enabled } } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_2_' doesn't have 'nohost' clause\" 1 \"oaccloops\" { target offloading_enabled } } }\n \n       SUBROUTINE s_2_nh\n !$ACC ROUTINE NOHOST\n !$ACC ROUTINE NOHOST SEQ\n !$ACC ROUTINE(s_2_nh) NOHOST\n       END SUBROUTINE s_2_nh\n-      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_2_nh' has 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n-      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_2_nh_' has 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_2_nh' has 'nohost' clause\" 1 \"oaccloops\" { target { ! offloading_enabled } } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_2_nh_' has 'nohost' clause\" 1 \"oaccloops\" { target offloading_enabled } } }\n \n       SUBROUTINE v_1\n !$ACC ROUTINE VECTOR\n@@ -45,8 +45,8 @@ SUBROUTINE v_1\n !$ACC ROUTINE VECTOR\n ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-5 }\n       END SUBROUTINE v_1\n-      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_1' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n-      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_1_' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_1' doesn't have 'nohost' clause\" 1 \"oaccloops\" { target { ! offloading_enabled } } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_1_' doesn't have 'nohost' clause\" 1 \"oaccloops\" { target offloading_enabled } } }\n \n       SUBROUTINE v_1_nh\n !$ACC ROUTINE NOHOST VECTOR\n@@ -55,26 +55,26 @@ SUBROUTINE v_1_nh\n !$ACC ROUTINE VECTOR NOHOST\n ! { dg-bogus \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-5 }\n       END SUBROUTINE v_1_nh\n-      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_1_nh' has 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n-      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_1_nh_' has 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_1_nh' has 'nohost' clause\" 1 \"oaccloops\" { target { ! offloading_enabled } } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_1_nh_' has 'nohost' clause\" 1 \"oaccloops\" { target offloading_enabled } } }\n \n       SUBROUTINE v_2\n !$ACC ROUTINE(v_2) VECTOR\n !$ACC ROUTINE VECTOR\n !$ACC ROUTINE(v_2) VECTOR\n ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-4 }\n       END SUBROUTINE v_2\n-      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_2' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n-      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_2_' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_2' doesn't have 'nohost' clause\" 1 \"oaccloops\" { target { ! offloading_enabled } } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_2_' doesn't have 'nohost' clause\" 1 \"oaccloops\" { target offloading_enabled } } }\n \n       SUBROUTINE v_2_nh\n !$ACC ROUTINE(v_2_nh) VECTOR NOHOST\n !$ACC ROUTINE VECTOR NOHOST\n !$ACC ROUTINE(v_2_nh) NOHOST VECTOR\n ! { dg-bogus \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-4 }\n       END SUBROUTINE v_2_nh\n-      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_2_nh' has 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n-      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_2_nh_' has 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_2_nh' has 'nohost' clause\" 1 \"oaccloops\" { target { ! offloading_enabled } } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_2_nh_' has 'nohost' clause\" 1 \"oaccloops\" { target offloading_enabled } } }\n \n       SUBROUTINE sub_1\n       IMPLICIT NONE"}, {"sha": "4d40c96df7d31eb3798eb96c86c8a2166669497e", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -2867,7 +2867,7 @@ create_parallel_loop (class loop *loop, tree loop_fn, tree data,\n   /* Emit GIMPLE_OMP_FOR.  */\n   if (oacc_kernels_p)\n     /* Parallelized OpenACC kernels constructs use gang parallelism.  See also\n-       omp-offload.c:execute_oacc_device_lower.  */\n+       omp-offload.c:execute_oacc_loop_designation.  */\n     t = build_omp_clause (loc, OMP_CLAUSE_GANG);\n   else\n     {"}, {"sha": "5484ad5eac758cdb64b4ca835491851ccd79a27e", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -424,6 +424,7 @@ extern gimple_opt_pass *make_pass_diagnose_omp_blocks (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_expand_omp (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_expand_omp_ssa (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_omp_target_link (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_oacc_loop_designation (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_oacc_device_lower (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_omp_device_lower (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_object_sizes (gcc::context *ctxt);"}, {"sha": "17cc9bd663e5e8cf5f46d64ae65d9dc63253a9e2", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr85486-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-2.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -2,10 +2,10 @@\n /* { dg-additional-options \"-DVECTOR_LENGTH=\" } */\n /* { dg-additional-options \"-fopenacc-dim=::128\" } */\n \n-/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccloops\" } */\n /* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n \n #include \"pr85486.c\"\n \n-/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 32\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 32\\\\)\" \"oaccloops\" } } */\n /* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=1, vectors=32\" } */"}, {"sha": "5d05540ce46d6b43ce85c4903b024ec71ed56b17", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr85486-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-3.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -2,10 +2,10 @@\n /* { dg-additional-options \"-DVECTOR_LENGTH=\" } */\n /* { dg-set-target-env-var \"GOMP_OPENACC_DIM\" \"::128\" } */\n \n-/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccloops\" } */\n /* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n \n #include \"pr85486.c\"\n \n-/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 32\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 32\\\\)\" \"oaccloops\" } } */\n /* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=1, vectors=32\" } */"}, {"sha": "f95f2ee3123b18561a7b48735633d4062a71ace5", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr85486.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run { target openacc_nvidia_accel_selected } } */\n /* { dg-additional-options \"-DVECTOR_LENGTH=vector_length(128)\" } */\n \n-/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccloops\" } */\n /* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n \n /* Minimized from ref-1.C.  */\n@@ -54,5 +54,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 32\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 32\\\\)\" \"oaccloops\" } } */\n /* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=1, vectors=32\" } */"}, {"sha": "7dc7459e5fe1d27d694f938f9eb580f5ae245f35", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-nohost-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-1.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -4,7 +4,7 @@\n    { dg-skip-if \"TODO PR82391\" { *-*-* } { \"-O0\" } }\n */\n \n-/* { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+/* { dg-additional-options \"-fdump-tree-oaccloops\" } */\n \n /* { dg-additional-options \"-fno-inline\" } for stable results regarding OpenACC 'routine'.  */\n \n@@ -36,9 +36,9 @@ static int fact_nohost(int n)\n \n   return fact(n);\n }\n-/* { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'fact_nohost' has 'nohost' clause\\.$} 1 oaccdevlow { target c } } }\n-   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'int fact_nohost\\(int\\)' has 'nohost' clause\\.$} 1 oaccdevlow { target { c++ && { ! offloading_enabled } } } } }\n-   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'fact_nohost\\(int\\)' has 'nohost' clause\\.$} 1 oaccdevlow { target { c++ && offloading_enabled } } } }\n+/* { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'fact_nohost' has 'nohost' clause\\.$} 1 oaccloops { target c } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'int fact_nohost\\(int\\)' has 'nohost' clause\\.$} 1 oaccloops { target { c++ && { ! offloading_enabled } } } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'fact_nohost\\(int\\)' has 'nohost' clause\\.$} 1 oaccloops { target { c++ && offloading_enabled } } } }\n    TODO See PR101551 for 'offloading_enabled' differences.  */\n \n int main()"}, {"sha": "5158bb5eb89eaea0f2a22b6cc3449bb7296ace0c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vector-length-128-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-1.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target openacc_nvidia_accel_selected } } */\n-/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccloops\" } */\n /* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n \n #include <stdlib.h>\n@@ -34,5 +34,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 128\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 128\\\\)\" \"oaccloops\" } } */\n /* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=1, vectors=128\" } */"}, {"sha": "a3e44ebfbcb44a787efeb5dd78da8c45342aa6ea", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vector-length-128-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-2.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target openacc_nvidia_accel_selected } } */\n /* { dg-additional-options \"-fopenacc-dim=::128\" } */\n-/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccloops\" } */\n /* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n \n #include <stdlib.h>\n@@ -35,5 +35,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 128\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 128\\\\)\" \"oaccloops\" } } */\n /* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=1, vectors=128\" } */"}, {"sha": "a85400d09c50beca33170dd5070c21ab9ee7bc06", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vector-length-128-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-3.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target openacc_nvidia_accel_selected } } */\n-/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccloops\" } */\n /* We default to warp size 32 for the vector length, so the GOMP_OPENACC_DIM has\n    no effect.  */\n /* { dg-set-target-env-var \"GOMP_OPENACC_DIM\" \"::128\" } */\n@@ -38,5 +38,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 32\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 32\\\\)\" \"oaccloops\" } } */\n /* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=1, vectors=32\" } */"}, {"sha": "24c078f377c3bd4ae2144e9701d0660b73dadfe8", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vector-length-128-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-4.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target openacc_nvidia_accel_selected } } */\n-/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccloops\" } */\n /* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n \n #include <stdlib.h>\n@@ -36,5 +36,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 2, 128\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 2, 128\\\\)\" \"oaccloops\" } } */\n /* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=2, vectors=128\" } */"}, {"sha": "fcca9f593bb2a3cbad07d76dda98991486c81308", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vector-length-128-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-5.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target openacc_nvidia_accel_selected } } */\n /* { dg-additional-options \"-fopenacc-dim=:2:128\" } */\n-/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccloops\" } */\n /* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n \n #include <stdlib.h>\n@@ -37,5 +37,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 2, 128\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 2, 128\\\\)\" \"oaccloops\" } } */\n /* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=2, vectors=128\" } */"}, {"sha": "0807eab7eee4c0682b0a76c32f37ace14bcf8323", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vector-length-128-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-6.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target openacc_nvidia_accel_selected } } */\n /* { dg-set-target-env-var \"GOMP_OPENACC_DIM\" \":2:\" } */\n-/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccloops\" } */\n /* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n \n #include <stdlib.h>\n@@ -37,5 +37,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 0, 128\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 0, 128\\\\)\" \"oaccloops\" } } */\n /* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=2, vectors=128\" } */"}, {"sha": "4a8c1bf549e9836d235ae21e30a1d9e31bb8d550", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vector-length-128-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-7.c?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target openacc_nvidia_accel_selected } } */\n-/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccloops\" } */\n /* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n \n #include <stdlib.h>\n@@ -36,5 +36,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 0, 128\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 0, 128\\\\)\" \"oaccloops\" } } */\n /* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=8, vectors=128\" } */"}, {"sha": "b0537b8ff0bec82a636625cb6c922e2b6422edb2", "filename": "libgomp/testsuite/libgomp.oacc-fortran/routine-nohost-1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-nohost-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0829ab79d37be6c59072af0c4f54043f7e9d23ea/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-nohost-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-nohost-1.f90?ref=0829ab79d37be6c59072af0c4f54043f7e9d23ea", "patch": "@@ -5,7 +5,7 @@\n ! With optimizations disabled, we currently don't expect that 'acc_on_device' \"evaluates at compile time to a constant\".\n ! { dg-skip-if \"TODO PR82391\" { *-*-* } { \"-O0\" } }\n \n-! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n+! { dg-additional-options \"-fdump-tree-oaccloops\" }\n \n program main\n   use openacc\n@@ -58,6 +58,6 @@ function fact_nohost(x) result(res)\n \n   res = fact(x)\n end function fact_nohost\n-! { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'fact_nohost' has 'nohost' clause\\.$} 1 oaccdevlow { target { ! offloading_enabled } } } }\n-! { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'fact_nohost_' has 'nohost' clause\\.$} 1 oaccdevlow { target offloading_enabled } } }\n+! { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'fact_nohost' has 'nohost' clause\\.$} 1 oaccloops { target { ! offloading_enabled } } } }\n+! { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'fact_nohost_' has 'nohost' clause\\.$} 1 oaccloops { target offloading_enabled } } }\n !TODO See PR101551 for 'offloading_enabled' differences."}]}