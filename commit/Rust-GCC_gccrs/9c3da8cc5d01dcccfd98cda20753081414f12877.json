{"sha": "9c3da8cc5d01dcccfd98cda20753081414f12877", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMzZGE4Y2M1ZDAxZGNjY2ZkOThjZGEyMDc1MzA4MTQxNGYxMjg3Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-25T21:10:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-25T21:10:48Z"}, "message": "typo fix: Fix probablity, becuse, sucessor and destinarion typos [PR93912]\n\n2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR other/93912\n\t* config/sh/sh.c (expand_cbranchdi4): Fix comment typo, probablity\n\t-> probability.\n\t* cfghooks.c (verify_flow_info): Likewise.\n\t* predict.c (combine_predictions_for_bb): Likewise.\n\t* bb-reorder.c (connect_better_edge_p): Likewise.  Fix comment typo,\n\tsucessor -> successor.\n\t(find_traces_1_round): Fix comment typo, destinarion -> destination.\n\t* omp-expand.c (expand_oacc_for): Fix comment typo, sucessors ->\n\tsuccessors.\n\t* tree-ssa-loop-ch.c (should_duplicate_loop_header_p): Fix dump\n\tmessage typo, sucessors -> successors.\nc/\n\t* gimple-parser.c (c_parser_gimple_parse_bb_spec_edge_probability):\n\tRename last argument from probablity to probability.", "tree": {"sha": "5af30e712860d104c3f805afc1a358d3617d68df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5af30e712860d104c3f805afc1a358d3617d68df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c3da8cc5d01dcccfd98cda20753081414f12877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c3da8cc5d01dcccfd98cda20753081414f12877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c3da8cc5d01dcccfd98cda20753081414f12877", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c3da8cc5d01dcccfd98cda20753081414f12877/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68f8763d57ab6e90f9d78ec0b0e6b71241676a5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f8763d57ab6e90f9d78ec0b0e6b71241676a5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68f8763d57ab6e90f9d78ec0b0e6b71241676a5c"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "724df77c4d2335e1af9099756e5d06de9be06b5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c3da8cc5d01dcccfd98cda20753081414f12877", "patch": "@@ -1,3 +1,18 @@\n+2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/93912\n+\t* config/sh/sh.c (expand_cbranchdi4): Fix comment typo, probablity\n+\t-> probability.\n+\t* cfghooks.c (verify_flow_info): Likewise.\n+\t* predict.c (combine_predictions_for_bb): Likewise.\n+\t* bb-reorder.c (connect_better_edge_p): Likewise.  Fix comment typo,\n+\tsucessor -> successor.\n+\t(find_traces_1_round): Fix comment typo, destinarion -> destination.\n+\t* omp-expand.c (expand_oacc_for): Fix comment typo, sucessors ->\n+\tsuccessors.\n+\t* tree-ssa-loop-ch.c (should_duplicate_loop_header_p): Fix dump\n+\tmessage typo, sucessors -> successors.\n+\n 2020-02-25  Martin Sebor  <msebor@redhat.com>\n \n \t* doc/extend.texi (attribute access): Correct an example."}, {"sha": "c635010c69fc7d984fe1f7267a83821f07c42a7a", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=9c3da8cc5d01dcccfd98cda20753081414f12877", "patch": "@@ -592,7 +592,7 @@ find_traces_1_round (int branch_th, profile_count count_th,\n \t  /* If the best destination has multiple successors or predecessors,\n \t     don't allow it to be added when optimizing for size.  This makes\n \t     sure predecessors with smaller index are handled before the best\n-\t     destinarion.  It breaks long trace and reduces long jumps.\n+\t     destination.  It breaks long trace and reduces long jumps.\n \n \t     Take if-then-else as an example.\n \t\tA\n@@ -1023,8 +1023,8 @@ connect_better_edge_p (const_edge e, bool src_index_p, int best_len,\n       e_index = e->src->index;\n \n       /* We are looking for predecessor, so probabilities are not that\n-\t informative.  We do not want to connect A to B becuse A has\n-\t only one sucessor (probablity is 100%) while there is edge\n+\t informative.  We do not want to connect A to B because A has\n+\t only one successor (probability is 100%) while there is edge\n \t A' to B where probability is 90% but which is much more frequent.  */\n       if (e->count () > cur_best_edge->count ())\n \t/* The edge has higher probability than the temporary best edge.  */"}, {"sha": "83bf651c41fbb718c3d570654a09661de5a57226", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9c3da8cc5d01dcccfd98cda20753081414f12877", "patch": "@@ -1,3 +1,9 @@\n+2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/93912\n+\t* gimple-parser.c (c_parser_gimple_parse_bb_spec_edge_probability):\n+\tRename last argument from probablity to probability.\n+\n 2020-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/93576"}, {"sha": "4e8ff5b1c4fc6895681548a3395d226a35daa173", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=9c3da8cc5d01dcccfd98cda20753081414f12877", "patch": "@@ -149,12 +149,13 @@ static bool\n c_parser_gimple_parse_bb_spec_edge_probability (tree val,\n \t\t\t\t\t\tgimple_parser &parser,\n \t\t\t\t\t\tint *index,\n-\t\t\t\t\t\tprofile_probability *probablity)\n+\t\t\t\t\t\tprofile_probability\n+\t\t\t\t\t\t*probability)\n {\n   bool return_p = c_parser_gimple_parse_bb_spec (val, index);\n   if (return_p)\n     {\n-      *probablity = profile_probability::uninitialized ();\n+      *probability = profile_probability::uninitialized ();\n       /* Parse frequency if provided.  */\n       if (c_parser_next_token_is (parser, CPP_OPEN_PAREN))\n \t{\n@@ -188,7 +189,7 @@ c_parser_gimple_parse_bb_spec_edge_probability (tree val,\n \t    }\n \n \t  unsigned int value = TREE_INT_CST_LOW (f);\n-\t  *probablity = profile_probability (value, quality);\n+\t  *probability = profile_probability (value, quality);\n \n \t  c_parser_consume_token (parser);\n \t  if (!c_parser_require (parser, CPP_CLOSE_PAREN, \"expected %<)%>\"))"}, {"sha": "ea558b46947302721171119b142d290a697317c1", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=9c3da8cc5d01dcccfd98cda20753081414f12877", "patch": "@@ -153,7 +153,7 @@ verify_flow_info (void)\n \t  err = 1;\n \t}\n       /* FIXME: Graphite and SLJL and target code still tends to produce\n-\t edges with no probablity.  */\n+\t edges with no probability.  */\n       if (profile_status_for_fn (cfun) >= PROFILE_GUESSED\n           && !bb->count.initialized_p () && !flag_graphite && 0)\n \t{\n@@ -170,7 +170,7 @@ verify_flow_info (void)\n \t      err = 1;\n \t    }\n \t  /* FIXME: Graphite and SLJL and target code still tends to produce\n-\t     edges with no probablity.  */\n+\t     edges with no probability.  */\n \t  if (profile_status_for_fn (cfun) >= PROFILE_GUESSED\n \t      && !e->probability.initialized_p () && !flag_graphite && 0)\n \t    {"}, {"sha": "84c0ea025b49e5f137aa448cb1dd1dbd03396590", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=9c3da8cc5d01dcccfd98cda20753081414f12877", "patch": "@@ -2108,7 +2108,7 @@ expand_cbranchdi4 (rtx *operands, enum rtx_code comparison)\n       lsw_taken = EQ;\n       if (prob.initialized_p ())\n \t{\n-\t  /* FIXME: This is not optimal.  We do not really know the probablity\n+\t  /* FIXME: This is not optimal.  We do not really know the probability\n \t     that values differ by MCW only, but we should probably distribute\n \t     probabilities more evenly.  */\n \t  msw_skip_prob = rev_prob;"}, {"sha": "a642ccc998041fcd82d8e56460afc49491c7d1ef", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=9c3da8cc5d01dcccfd98cda20753081414f12877", "patch": "@@ -6029,8 +6029,8 @@ expand_oacc_for (struct omp_region *region, struct omp_for_data *fd)\n   basic_block cont_bb = region->cont; /* BB ending in OMP_CONTINUE  */\n   basic_block bottom_bb = NULL;\n \n-  /* entry_bb has two sucessors; the branch edge is to the exit\n-     block,  fallthrough edge to body.  */\n+  /* entry_bb has two successors; the branch edge is to the exit\n+     block, fallthrough edge to body.  */\n   gcc_assert (EDGE_COUNT (entry_bb->succs) == 2\n \t      && BRANCH_EDGE (entry_bb)->dest == exit_bb);\n "}, {"sha": "a7ae977c866cd1927bda328882a4f060a043ff8c", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=9c3da8cc5d01dcccfd98cda20753081414f12877", "patch": "@@ -1367,7 +1367,7 @@ combine_predictions_for_bb (basic_block bb, bool dry_run)\n \n \n   /* If we have only one successor which is unknown, we can compute missing\n-     probablity.  */\n+     probability.  */\n   if (nunknown == 1)\n     {\n       profile_probability prob = profile_probability::always ();"}, {"sha": "b9002d8e294dc0a39fdc60985e60d031e312795f", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3da8cc5d01dcccfd98cda20753081414f12877/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=9c3da8cc5d01dcccfd98cda20753081414f12877", "patch": "@@ -83,7 +83,7 @@ should_duplicate_loop_header_p (basic_block header, class loop *loop,\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file,\n-\t\t \"  Not duplicating bb %i: both sucessors are in loop.\\n\",\n+\t\t \"  Not duplicating bb %i: both successors are in loop.\\n\",\n \t\t loop->num);\n       return false;\n     }"}]}