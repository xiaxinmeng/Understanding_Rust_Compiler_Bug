{"sha": "5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ5YTI4M2FjNmFhYTEwZDdmMTA1MmRiYTRjZGU3YThhNjNjODhmYw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-03-14T22:16:27Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-03-14T22:16:27Z"}, "message": "re PR middle-end/80020 (gcc confused about aligned_alloc argument order)\n\n\tPR middle-end/80020\n\t* builtin-attrs.def (ATTR_ALLOC_SIZE_2_NOTHROW_LIST): New macro.\n\t* builtins.def (aligned_alloc): Use it.\n\n\tPR middle-end/80020\n\t* gcc.dg/attr-alloc_size-6.c: Correct aligned_alloc argument order.\n\t* gcc.dg/attr-alloc_size-7.c: Same.\n\t* gcc.dg/attr-alloc_size-9.c: Same.\n\t* gcc.dg/builtin-alloc-size.c: Same.\n\t* gcc.dg/pr80020.c: New test.\n\nFrom-SVN: r246145", "tree": {"sha": "f36c32b1806b1bccfa8cb3918937f113e48bffd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f36c32b1806b1bccfa8cb3918937f113e48bffd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6bf29a7e402c9650a0feeb00038f873adc7cd309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf29a7e402c9650a0feeb00038f873adc7cd309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bf29a7e402c9650a0feeb00038f873adc7cd309"}], "stats": {"total": 67, "additions": 55, "deletions": 12}, "files": [{"sha": "63597cd4c6b48cf09e7fb9a58628486ac10d7d81", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc", "patch": "@@ -1,5 +1,10 @@\n 2017-03-14  Martin Sebor  <msebor@redhat.com>\n \n+\tPR middle-end/80020\n+\t* builtin-attrs.def (ATTR_ALLOC_SIZE_2_NOTHROW_LIST): New macro.\n+\t* builtins.def (aligned_alloc): Use it.\n+\n+\n \tPR c/79936\n \t* Makefile.in (GTFILES): Add calls.c.\n \t* calls.c: Include \"gt-calls.h\"."}, {"sha": "38fb1bb88102fb7b3877732afe051b1ec8c3fbc7", "filename": "gcc/builtin-attrs.def", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2Fbuiltin-attrs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2Fbuiltin-attrs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-attrs.def?ref=5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc", "patch": "@@ -156,9 +156,12 @@ DEF_ATTR_TREE_LIST (ATTR_COLD_CONST_NORETURN_NOTHROW_LEAF_LIST, ATTR_CONST,\\\n \t\t\tATTR_NULL, ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n \n /* Allocation functions like malloc and realloc whose first argument\n-   specifies the size of the allocated object.  */\n+   with _SIZE_1, or second argument with _SIZE_2, specifies the size\n+   of the allocated object.  */\n DEF_ATTR_TREE_LIST (ATTR_MALLOC_SIZE_1_NOTHROW_LIST, ATTR_ALLOC_SIZE,\t\\\n \t\t\tATTR_LIST_1, ATTR_MALLOC_NOTHROW_LIST)\n+DEF_ATTR_TREE_LIST (ATTR_ALLOC_SIZE_2_NOTHROW_LIST, ATTR_ALLOC_SIZE,\t\\\n+\t\t\tATTR_LIST_2, ATTR_MALLOC_NOTHROW_LIST)\n DEF_ATTR_TREE_LIST (ATTR_MALLOC_SIZE_1_NOTHROW_LEAF_LIST, ATTR_ALLOC_SIZE, \\\n \t\t        ATTR_LIST_1, ATTR_MALLOC_NOTHROW_LEAF_LIST)\n /* Alloca is just like malloc except that it never returns null.  */"}, {"sha": "e383c80145f8af0512570d6064c3614d3259f8d4", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc", "patch": "@@ -297,7 +297,7 @@ DEF_C99_BUILTIN        (BUILT_IN_ACOSH, \"acosh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHF\n DEF_C99_BUILTIN        (BUILT_IN_ACOSHF, \"acoshf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ACOSHL, \"acoshl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ACOSL, \"acosl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n-DEF_C11_BUILTIN        (BUILT_IN_ALIGNED_ALLOC, \"aligned_alloc\", BT_FN_PTR_SIZE_SIZE, ATTR_MALLOC_SIZE_1_NOTHROW_LIST)\n+DEF_C11_BUILTIN        (BUILT_IN_ALIGNED_ALLOC, \"aligned_alloc\", BT_FN_PTR_SIZE_SIZE, ATTR_ALLOC_SIZE_2_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_ASIN, \"asin\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ASINF, \"asinf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ASINH, \"asinh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)"}, {"sha": "63daa280f669f2abc3683c29f24a67d541865b1a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc", "patch": "@@ -1,3 +1,12 @@\n+2017-03-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/80020\n+\t* gcc.dg/attr-alloc_size-6.c: Correct aligned_alloc argument order.\n+\t* gcc.dg/attr-alloc_size-7.c: Same.\n+\t* gcc.dg/attr-alloc_size-9.c: Same.\n+\t* gcc.dg/builtin-alloc-size.c: Same.\n+\t* gcc.dg/pr80020.c: New test.\n+\n 2017-03-14  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR rtl-optimization/79728"}, {"sha": "fc3e22c5c36061c510d32d5ed2155a8e687e43a7", "filename": "gcc/testsuite/gcc.dg/attr-alloc_size-6.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-6.c?ref=5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc", "patch": "@@ -15,8 +15,8 @@ void sink (void*);\n \n void test_lit (char *p, char *q)\n {\n-  sink (__builtin_aligned_alloc (MAXOBJSZ, 1));\n-  sink (__builtin_aligned_alloc (MAXOBJSZ + 1, 1));   /* { dg-warning \"argument 1 value .12346\\[lu\\]*. exceeds maximum object size 12345\" } */\n+  sink (__builtin_aligned_alloc (1, MAXOBJSZ));\n+  sink (__builtin_aligned_alloc (1, MAXOBJSZ + 1));   /* { dg-warning \"argument 2 value .12346\\[lu\\]*. exceeds maximum object size 12345\" } */\n \n   sink (__builtin_alloca (MAXOBJSZ));\n   sink (__builtin_alloca (MAXOBJSZ + 2));   /* { dg-warning \"argument 1 value .12347\\[lu\\]*. exceeds maximum object size 12345\" } */\n@@ -46,8 +46,8 @@ enum { max = MAXOBJSZ };\n \n void test_cst (char *p, char *q)\n {\n-  sink (__builtin_aligned_alloc (max, 1));\n-  sink (__builtin_aligned_alloc (max + 1, 1));   /* { dg-warning \"argument 1 value .12346\\[lu\\]*. exceeds maximum object size 12345\" } */\n+  sink (__builtin_aligned_alloc (1, max));\n+  sink (__builtin_aligned_alloc (1, max + 1));   /* { dg-warning \"argument 2 value .12346\\[lu\\]*. exceeds maximum object size 12345\" } */\n \n   sink (__builtin_alloca (max));\n   sink (__builtin_alloca (max + 2));   /* { dg-warning \"argument 1 value .12347\\[lu\\]*. exceeds maximum object size 12345\" } */"}, {"sha": "a3b2a6bbb4f5e80d4df182e591862fca95313ceb", "filename": "gcc/testsuite/gcc.dg/attr-alloc_size-7.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-7.c?ref=5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc", "patch": "@@ -22,8 +22,8 @@ void test_var (void *p)\n {\n   size_t max = maxobjsize ();\n \n-  sink (__builtin_aligned_alloc (max, 1));\n-  sink (__builtin_aligned_alloc (max + 1, 1));   /* { dg-warning \"argument 1 value .12346\\[lu\\]*. exceeds maximum object size 12345\" } */\n+  sink (__builtin_aligned_alloc (1, max));\n+  sink (__builtin_aligned_alloc (1, max + 1));   /* { dg-warning \"argument 2 value .12346\\[lu\\]*. exceeds maximum object size 12345\" } */\n \n   sink (__builtin_alloca (max));\n   sink (__builtin_alloca (max + 2));   /* { dg-warning \"argument 1 value .12347\\[lu\\]*. exceeds maximum object size 12345\" } */\n@@ -52,8 +52,8 @@ void test_range (void *p, size_t range)\n   if (range < max || 2 * max <= range)\n     range = maxobjsize ();\n \n-  sink (__builtin_aligned_alloc (range, 1));\n-  sink (__builtin_aligned_alloc (range + 1, 1));   /* { dg-warning \"argument 1 range \\\\\\[12346\\[lu\\]*, \\[0-9\\]+\\[lu\\]*\\\\\\] exceeds maximum object size 12345\" } */\n+  sink (__builtin_aligned_alloc (1, range));\n+  sink (__builtin_aligned_alloc (1, range + 1));   /* { dg-warning \"argument 2 range \\\\\\[12346\\[lu\\]*, \\[0-9\\]+\\[lu\\]*\\\\\\] exceeds maximum object size 12345\" } */\n \n   sink (__builtin_alloca (range));\n   sink (__builtin_alloca (range + 2));   /* { dg-warning \"argument 1 range \\\\\\[12347\\[lu\\]*, \\[0-9\\]+\\[lu\\]*\\\\\\] exceeds maximum object size 12345\" } */"}, {"sha": "0e75bb2b535be08351162c4a649fc40b9c93b586", "filename": "gcc/testsuite/gcc.dg/attr-alloc_size-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-9.c?ref=5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc", "patch": "@@ -20,7 +20,7 @@ extern int x;\n \n void test (void *p, unsigned n)\n {\n-  TEST (__builtin_aligned_alloc (n, 8));\n+  TEST (__builtin_aligned_alloc (8, n));\n   TEST (__builtin_alloca (n));\n   TEST (__builtin_calloc (4, n));\n   TEST (__builtin_malloc (n));"}, {"sha": "6929e884601b369521f369449bc8967e7d385571", "filename": "gcc/testsuite/gcc.dg/builtin-alloc-size.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-alloc-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-alloc-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-alloc-size.c?ref=5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc", "patch": "@@ -16,7 +16,7 @@ void test_aligned_alloc (unsigned a)\n {\n   unsigned n = size (7);\n \n-  void *p = __builtin_aligned_alloc (n, a);\n+  void *p = __builtin_aligned_alloc (a, n);\n   if (__builtin_object_size (p, 0) != n)\n     __builtin_abort ();\n   sink (p);"}, {"sha": "5e79c375dc3133e991ee462ee3a764879ab6542d", "filename": "gcc/testsuite/gcc.dg/pr80020.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80020.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80020.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80020.c?ref=5d9a283ac6aaa10d7f1052dba4cde7a8a63c88fc", "patch": "@@ -0,0 +1,26 @@\n+/* PR middle-end/80020 - gcc confused about aligned_alloc argument order\n+   { dg-compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+void sink (void*);\n+\n+void foo (void)\n+{\n+  enum {\n+    Align = 32,\n+    Size = 123\n+  };\n+\n+  void *p = __builtin_aligned_alloc (Align, Size);\n+  unsigned n = __builtin_object_size (p, 0);\n+\n+  if (n != Size)\n+    __builtin_abort ();\n+\n+  __builtin___memset_chk (p, 0, Size, n);\n+\n+  sink (p);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"abort\" \"optimized\" } }\n+   { dg-final { scan-tree-dump-not \"memset_chk\" \"optimized\" } } */"}]}