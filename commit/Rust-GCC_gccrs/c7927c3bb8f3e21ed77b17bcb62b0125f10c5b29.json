{"sha": "c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc5MjdjM2JiOGYzZTIxZWQ3N2IxN2JjYjYyYjAxMjVmMTBjNWIyOQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2018-06-11T18:44:38Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2018-06-11T18:44:38Z"}, "message": "re PR fortran/45521 ([F08] GENERIC resolution with ALLOCATABLE/POINTER and PROCEDURE)\n\n2018-06-11  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/45521\n\t* interface.c (compare_ptr_alloc): New function.\n\t(generic_correspondence): Call it.\n\n\n2018-06-11  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/45521\n\t* gfortran.dg/generic_32.f90: New test.\n\t* gfortran.dg/generic_33.f90: New test.\n\nFrom-SVN: r261448", "tree": {"sha": "fb7de4b91b949d323991033e90af91994dd2c484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb7de4b91b949d323991033e90af91994dd2c484"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46e318cff70c1adcb0895092975c72f41f82404c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e318cff70c1adcb0895092975c72f41f82404c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e318cff70c1adcb0895092975c72f41f82404c"}], "stats": {"total": 81, "additions": 77, "deletions": 4}, "files": [{"sha": "8a0b5ac6264b3c8cc8b46775aa4cafdd78f43b52", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29", "patch": "@@ -1,3 +1,9 @@\n+2018-06-11  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/45521\n+\t* interface.c (compare_ptr_alloc): New function.\n+\t(generic_correspondence): Call it.\n+\n 2018-06-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* gfortran.h (gfc_expr): Add no_bounds_check field."}, {"sha": "eafc419ef3ad50e12900f652a346bfbbd7f00fb9", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29", "patch": "@@ -1190,6 +1190,24 @@ count_types_test (gfc_formal_arglist *f1, gfc_formal_arglist *f2,\n }\n \n \n+/* Returns true if two dummy arguments are distinguishable due to their POINTER\n+   and ALLOCATABLE attributes according to F2018 section 15.4.3.4.5 (3).\n+   The function is asymmetric wrt to the arguments s1 and s2 and should always\n+   be called twice (with flipped arguments in the second call).  */\n+\n+static bool\n+compare_ptr_alloc(gfc_symbol *s1, gfc_symbol *s2)\n+{\n+  /* Is s1 allocatable?  */\n+  const bool a1 = s1->ts.type == BT_CLASS ?\n+\t\t  CLASS_DATA(s1)->attr.allocatable : s1->attr.allocatable;\n+  /* Is s2 a pointer?  */\n+  const bool p2 = s2->ts.type == BT_CLASS ?\n+\t\t  CLASS_DATA(s2)->attr.class_pointer : s2->attr.pointer;\n+  return a1 && p2 && (s2->attr.intent != INTENT_IN);\n+}\n+\n+\n /* Perform the correspondence test in rule (3) of F08:C1215.\n    Returns zero if no argument is found that satisfies this rule,\n    nonzero otherwise. 'p1' and 'p2' are the PASS arguments of both procedures\n@@ -1233,8 +1251,8 @@ generic_correspondence (gfc_formal_arglist *f1, gfc_formal_arglist *f2,\n       if (f2 != NULL && (compare_type_rank (f1->sym, f2->sym)\n \t\t\t || compare_type_rank (f2->sym, f1->sym))\n \t  && !((gfc_option.allow_std & GFC_STD_F2008)\n-\t       && ((f1->sym->attr.allocatable && f2->sym->attr.pointer)\n-\t\t   || (f2->sym->attr.allocatable && f1->sym->attr.pointer))))\n+\t       && (compare_ptr_alloc(f1->sym, f2->sym)\n+\t\t   || compare_ptr_alloc(f2->sym, f1->sym))))\n \tgoto next;\n \n       /* Now search for a disambiguating keyword argument starting at\n@@ -1247,8 +1265,8 @@ generic_correspondence (gfc_formal_arglist *f1, gfc_formal_arglist *f2,\n \t  sym = find_keyword_arg (g->sym->name, f2_save);\n \t  if (sym == NULL || !compare_type_rank (g->sym, sym)\n \t      || ((gfc_option.allow_std & GFC_STD_F2008)\n-\t\t  && ((sym->attr.allocatable && g->sym->attr.pointer)\n-\t\t      || (sym->attr.pointer && g->sym->attr.allocatable))))\n+\t\t  && (compare_ptr_alloc(sym, g->sym)\n+\t\t      || compare_ptr_alloc(g->sym, sym))))\n \t    return true;\n \t}\n "}, {"sha": "ae6acb39deb7c279a70aa5bfae785fd9e329a2ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29", "patch": "@@ -1,3 +1,9 @@\n+2018-06-11  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/45521\n+\t* gfortran.dg/generic_32.f90: New test.\n+\t* gfortran.dg/generic_33.f90: New test.\n+\n 2018-06-11  Carl Love  <cel@us.ibm.com>\n \t* gcc.target/powerpc/altivec-7.c (main): Remove tests\n \tvec_unpackh(vecubi[0]) and vec_unpackl(vecubi[0]) returning"}, {"sha": "61e8a2ab123508b7f47e0ca5553412c5814ec603", "filename": "gcc/testsuite/gfortran.dg/generic_32.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_32.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_32.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_32.f90?ref=c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+!\n+! PR 45521: [F08] GENERIC resolution with ALLOCATABLE/POINTER and PROCEDURE\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+\n+  INTERFACE gen\n+    SUBROUTINE suba(a)   ! { dg-error \"Ambiguous interfaces\" }\n+      REAL,ALLOCATABLE :: a(:)\n+    END SUBROUTINE\n+    SUBROUTINE subp(p)   ! { dg-error \"Ambiguous interfaces\" }\n+      REAL,POINTER,INTENT(IN) :: p(:)\n+    END SUBROUTINE\n+  END INTERFACE\n+end"}, {"sha": "540d73b23f056b7d55406bcfd3f8e9929c2205a6", "filename": "gcc/testsuite/gfortran.dg/generic_33.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_33.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_33.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_33.f90?ref=c7927c3bb8f3e21ed77b17bcb62b0125f10c5b29", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+!\n+! PR 45521: [F08] GENERIC resolution with ALLOCATABLE/POINTER and PROCEDURE\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+  type :: t\n+  end type\n+\n+  interface test\n+    procedure testAlloc\n+    procedure testPtr\n+  end interface\n+\n+contains\n+\n+  logical function testAlloc(obj)\n+    class(t), allocatable :: obj\n+    testAlloc = .true.\n+  end function\n+\n+  logical function testPtr(obj)\n+    class(t), pointer :: obj\n+    testPtr = .false.\n+  end function\n+\n+end"}]}