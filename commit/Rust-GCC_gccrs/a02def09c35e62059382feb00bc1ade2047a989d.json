{"sha": "a02def09c35e62059382feb00bc1ade2047a989d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyZGVmMDljMzVlNjIwNTkzODJmZWIwMGJjMWFkZTIwNDdhOTg5ZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-12-16T15:00:37Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-12-16T15:00:37Z"}, "message": "type_traits: Implement add_const, add_volatile, and add_cv.\n\n2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: Implement add_const, add_volatile,\n\tand add_cv.\n\t* testsuite/tr1/4_metaprogramming/const_volatile_modifications/\n\tadd_const.cc: New.\n\t* testsuite/tr1/4_metaprogramming/const_volatile_modifications/\n\tadd_cv.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/const_volatile_modifications/\n\tadd_volatile.cc: Likewise.\n\nFrom-SVN: r92265", "tree": {"sha": "e46ff1b31dedbe39ed14d9b35c4cc17a5b662bef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e46ff1b31dedbe39ed14d9b35c4cc17a5b662bef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a02def09c35e62059382feb00bc1ade2047a989d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a02def09c35e62059382feb00bc1ade2047a989d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a02def09c35e62059382feb00bc1ade2047a989d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a02def09c35e62059382feb00bc1ade2047a989d/comments", "author": null, "committer": null, "parents": [{"sha": "fe8e69bb7b86f34a1f2996977fafb357772a0640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe8e69bb7b86f34a1f2996977fafb357772a0640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe8e69bb7b86f34a1f2996977fafb357772a0640"}], "stats": {"total": 190, "additions": 187, "deletions": 3}, "files": [{"sha": "17a134f81acd6bd690cd075a8c1a560bfaa89990", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02def09c35e62059382feb00bc1ade2047a989d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02def09c35e62059382feb00bc1ade2047a989d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a02def09c35e62059382feb00bc1ade2047a989d", "patch": "@@ -1,3 +1,14 @@\n+2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: Implement add_const, add_volatile,\n+\tand add_cv.\n+\t* testsuite/tr1/4_metaprogramming/const_volatile_modifications/\n+\tadd_const.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/const_volatile_modifications/\n+\tadd_cv.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/const_volatile_modifications/\n+\tadd_volatile.cc: Likewise.\n+\n 2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/type_traits: Implement is_function."}, {"sha": "97008a131eb716a165b77fd3ad3f096fd2e7da2d", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02def09c35e62059382feb00bc1ade2047a989d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02def09c35e62059382feb00bc1ade2047a989d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=a02def09c35e62059382feb00bc1ade2047a989d", "patch": "@@ -330,13 +330,19 @@ namespace tr1\n     };\n   \n   template<typename _Tp>\n-    struct add_const;\n+    struct add_const\n+    { typedef _Tp const     type; };\n    \n   template<typename _Tp>\n-    struct add_volatile;\n+    struct add_volatile\n+    { typedef _Tp volatile     type; };\n   \n   template<typename _Tp>\n-    struct add_cv;\n+    struct add_cv\n+    {\n+      typedef typename\n+      add_const<typename add_volatile<_Tp>::type>::type     type;\n+    };\n \n   /// @brief  reference modifications [4.7.2].\n   template<typename _Tp>"}, {"sha": "83394c4de132a235a02bfce6a8722310cd416e7e", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/const_volatile_modifications/add_const.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02def09c35e62059382feb00bc1ade2047a989d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fconst_volatile_modifications%2Fadd_const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02def09c35e62059382feb00bc1ade2047a989d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fconst_volatile_modifications%2Fadd_const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fconst_volatile_modifications%2Fadd_const.cc?ref=a02def09c35e62059382feb00bc1ade2047a989d", "patch": "@@ -0,0 +1,54 @@\n+// 2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.7.1 Const-volatile modifications\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::add_const;\n+  using std::tr1::is_same;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (is_same<add_const<int>::type, const int>::value) );\n+  VERIFY( (is_same<add_const<volatile int>::type, const volatile int>::value) );\n+  VERIFY( (is_same<add_const<int*>::type, int* const>::value) );\n+  VERIFY( (is_same<add_const<int&>::type, int&>::value) );\n+  VERIFY( (is_same<add_const<int (int)>::type, int (int)>::value) );\n+  VERIFY( (is_same<add_const<const int>::type, const int>::value) );\n+  VERIFY( (is_same<add_const<ClassType>::type, const ClassType>::value) );\n+  VERIFY( (is_same<add_const<volatile ClassType>::type,\n+\t   const volatile ClassType>::value) );\n+  VERIFY( (is_same<add_const<ClassType*>::type, ClassType* const>::value) );\n+  VERIFY( (is_same<add_const<ClassType&>::type, ClassType&>::value) );\n+  VERIFY( (is_same<add_const<ClassType (ClassType)>::type,\n+\t   ClassType (ClassType)>::value) );\n+  VERIFY( (is_same<add_const<const ClassType>::type, const ClassType>::value) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "02d6460d6cd3ee7b67c6199978946b7aedd4d78f", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/const_volatile_modifications/add_cv.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02def09c35e62059382feb00bc1ade2047a989d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fconst_volatile_modifications%2Fadd_cv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02def09c35e62059382feb00bc1ade2047a989d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fconst_volatile_modifications%2Fadd_cv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fconst_volatile_modifications%2Fadd_cv.cc?ref=a02def09c35e62059382feb00bc1ade2047a989d", "patch": "@@ -0,0 +1,57 @@\n+// 2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.7.1 Const-volatile modifications\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::add_cv;\n+  using std::tr1::is_same;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (is_same<add_cv<int>::type, const volatile int>::value) );\n+  VERIFY( (is_same<add_cv<const int>::type, const volatile int>::value) );\n+  VERIFY( (is_same<add_cv<int*>::type, int* const volatile>::value) );\n+  VERIFY( (is_same<add_cv<int&>::type, int&>::value) );\n+  VERIFY( (is_same<add_cv<int (int)>::type, int (int)>::value) );\n+  VERIFY( (is_same<add_cv<const volatile int>::type,\n+\t   const volatile int>::value) );\n+  VERIFY( (is_same<add_cv<ClassType>::type, const volatile ClassType>::value) );\n+  VERIFY( (is_same<add_cv<volatile ClassType>::type,\n+\t   const volatile ClassType>::value) );\n+  VERIFY( (is_same<add_cv<ClassType*>::type,\n+\t   ClassType* const volatile>::value) );\n+  VERIFY( (is_same<add_cv<ClassType&>::type, ClassType&>::value) );\n+  VERIFY( (is_same<add_cv<ClassType (ClassType)>::type,\n+\t   ClassType (ClassType)>::value) );\n+  VERIFY( (is_same<add_cv<const volatile ClassType>::type,\n+\t   const volatile ClassType>::value) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "09a9ef58544cc4d21a36b5af8d5d736773bf7279", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/const_volatile_modifications/add_volatile.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02def09c35e62059382feb00bc1ade2047a989d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fconst_volatile_modifications%2Fadd_volatile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02def09c35e62059382feb00bc1ade2047a989d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fconst_volatile_modifications%2Fadd_volatile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fconst_volatile_modifications%2Fadd_volatile.cc?ref=a02def09c35e62059382feb00bc1ade2047a989d", "patch": "@@ -0,0 +1,56 @@\n+// 2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.7.1 Const-volatile modifications\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::add_volatile;\n+  using std::tr1::is_same;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (is_same<add_volatile<int>::type, volatile int>::value) );\n+  VERIFY( (is_same<add_volatile<const int>::type, const volatile int>::value) );\n+  VERIFY( (is_same<add_volatile<int*>::type, int* volatile>::value) );\n+  VERIFY( (is_same<add_volatile<int&>::type, int&>::value) );\n+  VERIFY( (is_same<add_volatile<int (int)>::type, int (int)>::value) );\n+  VERIFY( (is_same<add_volatile<volatile int>::type, volatile int>::value) );\n+  VERIFY( (is_same<add_volatile<ClassType>::type, volatile ClassType>::value) );\n+  VERIFY( (is_same<add_volatile<const ClassType>::type,\n+\t   const volatile ClassType>::value) );\n+  VERIFY( (is_same<add_volatile<ClassType*>::type,\n+\t   ClassType* volatile>::value) );\n+  VERIFY( (is_same<add_volatile<ClassType&>::type, ClassType&>::value) );\n+  VERIFY( (is_same<add_volatile<ClassType (ClassType)>::type,\n+\t   ClassType (ClassType)>::value) );\n+  VERIFY( (is_same<add_volatile<volatile ClassType>::type,\n+\t   volatile ClassType>::value) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}