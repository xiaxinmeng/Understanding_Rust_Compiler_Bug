{"sha": "eb5f748a81eafb8014de39e60884c1617d60eb79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI1Zjc0OGE4MWVhZmI4MDE0ZGUzOWU2MDg4NGMxNjE3ZDYwZWI3OQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-04-22T13:46:13Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-04-22T13:46:13Z"}, "message": "libphobos: Merge upstream druntime 109f0f2e\n\nBackports more extern(C) bindings and platform ports.\n\nReviewed-on: https://github.com/dlang/druntime/pull/2569\n\nFrom-SVN: r270490", "tree": {"sha": "3a87c5d091b7d2515f8d40ab2af184b0d11df275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a87c5d091b7d2515f8d40ab2af184b0d11df275"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb5f748a81eafb8014de39e60884c1617d60eb79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb5f748a81eafb8014de39e60884c1617d60eb79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb5f748a81eafb8014de39e60884c1617d60eb79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb5f748a81eafb8014de39e60884c1617d60eb79/comments", "author": null, "committer": null, "parents": [{"sha": "16a51cf5491b642639b60ea12c0fff12a5403934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a51cf5491b642639b60ea12c0fff12a5403934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16a51cf5491b642639b60ea12c0fff12a5403934"}], "stats": {"total": 420, "additions": 277, "deletions": 143}, "files": [{"sha": "8a3790142cf844d9cc406cde8bc47619af136e77", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=eb5f748a81eafb8014de39e60884c1617d60eb79", "patch": "@@ -1,4 +1,4 @@\n-4b2674b36b1f6aac75db2a5aa38d67d4be55a987\n+109f0f2e11aaaddd2b158117928e10c3c4688870\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "848b607ae69e9f398f40c4b19d45b784a7d870cd", "filename": "libphobos/libdruntime/core/runtime.d", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Fcore%2Fruntime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Fcore%2Fruntime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fruntime.d?ref=eb5f748a81eafb8014de39e60884c1617d60eb79", "patch": "@@ -464,10 +464,14 @@ extern (C) bool runModuleUnitTests()\n         import core.sys.freebsd.execinfo;\n     else version (NetBSD)\n         import core.sys.netbsd.execinfo;\n+    else version (DragonFlyBSD)\n+        import core.sys.dragonflybsd.execinfo;\n     else version (Windows)\n         import core.sys.windows.stacktrace;\n     else version (Solaris)\n         import core.sys.solaris.execinfo;\n+    else version (CRuntime_UClibc)\n+        import core.sys.linux.execinfo;\n \n     static if ( __traits( compiles, new LibBacktrace(0) ) )\n     {\n@@ -591,10 +595,14 @@ Throwable.TraceInfo defaultTraceHandler( void* ptr = null )\n         import core.sys.freebsd.execinfo;\n     else version (NetBSD)\n         import core.sys.netbsd.execinfo;\n+    else version (DragonFlyBSD)\n+        import core.sys.dragonflybsd.execinfo;\n     else version (Windows)\n         import core.sys.windows.stacktrace;\n     else version (Solaris)\n         import core.sys.solaris.execinfo;\n+    else version (CRuntime_UClibc)\n+        import core.sys.linux.execinfo;\n \n     // avoid recursive GC calls in finalizer, trace handlers should be made @nogc instead\n     import core.memory : gc_inFinalizer;\n@@ -709,6 +717,8 @@ Throwable.TraceInfo defaultTraceHandler( void* ptr = null )\n \n                 version (linux) enum enableDwarf = true;\n                 else version (FreeBSD) enum enableDwarf = true;\n+                else version (DragonFlyBSD) enum enableDwarf = true;\n+                else version (Darwin) enum enableDwarf = true;\n                 else enum enableDwarf = false;\n \n                 static if (enableDwarf)\n@@ -832,6 +842,18 @@ Throwable.TraceInfo defaultTraceHandler( void* ptr = null )\n                         symEnd = eptr - buf.ptr;\n                     }\n                 }\n+                else version (DragonFlyBSD)\n+                {\n+                    // format is: 0x00000000 <_D6module4funcAFZv+0x78> at module\n+                    auto bptr = cast(char*) memchr( buf.ptr, '<', buf.length );\n+                    auto eptr = cast(char*) memchr( buf.ptr, '+', buf.length );\n+\n+                    if ( bptr++ && eptr )\n+                    {\n+                        symBeg = bptr - buf.ptr;\n+                        symEnd = eptr - buf.ptr;\n+                    }\n+                }\n                 else version (Solaris)\n                 {\n                     // format is object'symbol+offset [pc]\n@@ -896,7 +918,7 @@ Throwable.TraceInfo defaultTraceHandler( void* ptr = null )\n         {\n             static enum FIRSTFRAME = 0;\n         }\n-        import core.sys.windows.windows : CONTEXT;\n+        import core.sys.windows.winnt : CONTEXT;\n         auto s = new StackTrace(FIRSTFRAME, cast(CONTEXT*)ptr);\n         return s;\n     }"}, {"sha": "9b190048934f110506bfc424f30721238c2bcae8", "filename": "libphobos/libdruntime/core/stdc/math.d", "status": "modified", "additions": 130, "deletions": 127, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fmath.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fmath.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fmath.d?ref=eb5f748a81eafb8014de39e60884c1617d60eb79", "patch": "@@ -2041,46 +2041,49 @@ else version (FreeBSD)\n {\n   version (none) // < 8-CURRENT\n   {\n-    real    acosl(real x) { return acos(x); }\n-    real    asinl(real x) { return asin(x); }\n-    pure real    atanl(real x) { return atan(x); }\n-    real    atan2l(real y, real x) { return atan2(y, x); }\n-    pure real    cosl(real x) { return cos(x); }\n-    pure real    sinl(real x) { return sin(x); }\n-    pure real    tanl(real x) { return tan(x); }\n-    real    exp2l(real x) { return exp2(x); }\n-    pure real    frexpl(real value, int* exp) { return frexp(value, exp); }\n-    int     ilogbl(real x) { return ilogb(x); }\n-    real    ldexpl(real x, int exp) { return ldexp(x, exp); }\n-    real    logbl(real x) { return logb(x); }\n-    //real    modfl(real value, real *iptr); // nontrivial conversion\n-    real    scalbnl(real x, int n) { return scalbn(x, n); }\n-    real    scalblnl(real x, c_long n) { return scalbln(x, n); }\n-    pure real    fabsl(real x) { return fabs(x); }\n-    real    hypotl(real x, real y) { return hypot(x, y); }\n-    real    sqrtl(real x) { return sqrt(x); }\n-    pure real    ceill(real x) { return ceil(x); }\n-    pure real    floorl(real x) { return floor(x); }\n-    pure real    nearbyintl(real x) { return nearbyint(x); }\n-    pure real    rintl(real x) { return rint(x); }\n-    c_long  lrintl(real x) { return lrint(x); }\n-    pure real    roundl(real x) { return round(x); }\n-    c_long  lroundl(real x) { return lround(x); }\n-    long    llroundl(real x) { return llround(x); }\n-    pure real    truncl(real x) { return trunc(x); }\n-    real    fmodl(real x, real y) { return fmod(x, y); }\n-    real    remainderl(real x, real y) { return remainder(x, y); }\n-    real    remquol(real x, real y, int* quo) { return remquo(x, y, quo); }\n-    pure real    copysignl(real x, real y) { return copysign(x, y); }\n-//  pure double  nan(char* tagp);\n-//  pure float   nanf(char* tagp);\n-//  pure real    nanl(char* tagp);\n-    real    nextafterl(real x, real y) { return nextafter(x, y); }\n-    real    nexttowardl(real x, real y) { return nexttoward(x, y); }\n-    real    fdiml(real x, real y) { return fdim(x, y); }\n-    pure real    fmaxl(real x, real y) { return fmax(x, y); }\n-    pure real    fminl(real x, real y) { return fmin(x, y); }\n-    pure real    fmal(real x, real y, real z) { return fma(x, y, z); }\n+    extern (D)\n+    {\n+        real    acosl(real x) { return acos(x); }\n+        real    asinl(real x) { return asin(x); }\n+        pure real    atanl(real x) { return atan(x); }\n+        real    atan2l(real y, real x) { return atan2(y, x); }\n+        pure real    cosl(real x) { return cos(x); }\n+        pure real    sinl(real x) { return sin(x); }\n+        pure real    tanl(real x) { return tan(x); }\n+        real    exp2l(real x) { return exp2(x); }\n+        pure real    frexpl(real value, int* exp) { return frexp(value, exp); }\n+        int     ilogbl(real x) { return ilogb(x); }\n+        real    ldexpl(real x, int exp) { return ldexp(x, exp); }\n+        real    logbl(real x) { return logb(x); }\n+        //real    modfl(real value, real *iptr); // nontrivial conversion\n+        real    scalbnl(real x, int n) { return scalbn(x, n); }\n+        real    scalblnl(real x, c_long n) { return scalbln(x, n); }\n+        pure real    fabsl(real x) { return fabs(x); }\n+        real    hypotl(real x, real y) { return hypot(x, y); }\n+        real    sqrtl(real x) { return sqrt(x); }\n+        pure real    ceill(real x) { return ceil(x); }\n+        pure real    floorl(real x) { return floor(x); }\n+        pure real    nearbyintl(real x) { return nearbyint(x); }\n+        pure real    rintl(real x) { return rint(x); }\n+        c_long  lrintl(real x) { return lrint(x); }\n+        pure real    roundl(real x) { return round(x); }\n+        c_long  lroundl(real x) { return lround(x); }\n+        long    llroundl(real x) { return llround(x); }\n+        pure real    truncl(real x) { return trunc(x); }\n+        real    fmodl(real x, real y) { return fmod(x, y); }\n+        real    remainderl(real x, real y) { return remainder(x, y); }\n+        real    remquol(real x, real y, int* quo) { return remquo(x, y, quo); }\n+        pure real    copysignl(real x, real y) { return copysign(x, y); }\n+        //pure double  nan(char* tagp);\n+        //pure float   nanf(char* tagp);\n+        //pure real    nanl(char* tagp);\n+        real    nextafterl(real x, real y) { return nextafter(x, y); }\n+        real    nexttowardl(real x, real y) { return nexttoward(x, y); }\n+        real    fdiml(real x, real y) { return fdim(x, y); }\n+        pure real    fmaxl(real x, real y) { return fmax(x, y); }\n+        pure real    fminl(real x, real y) { return fmin(x, y); }\n+        pure real    fmal(real x, real y, real z) { return fma(x, y, z); }\n+    }\n   }\n   else\n   {\n@@ -2205,49 +2208,49 @@ else version (FreeBSD)\n     ///\n     float   acoshf(float x);\n     ///\n-    real    acoshl(real x) { return acosh(x); }\n+    extern(D) real acoshl(real x) { return acosh(x); }\n \n     ///\n     pure double  asinh(double x);\n     ///\n     pure float   asinhf(float x);\n     ///\n-    pure real    asinhl(real x) { return asinh(x); }\n+    extern(D) pure real asinhl(real x) { return asinh(x); }\n \n     ///\n     double  atanh(double x);\n     ///\n     float   atanhf(float x);\n     ///\n-    real    atanhl(real x) { return atanh(x); }\n+    extern(D) real atanhl(real x) { return atanh(x); }\n \n     ///\n     double  cosh(double x);\n     ///\n     float   coshf(float x);\n     ///\n-    real    coshl(real x) { return cosh(x); }\n+    extern(D) real coshl(real x) { return cosh(x); }\n \n     ///\n     double  sinh(double x);\n     ///\n     float   sinhf(float x);\n     ///\n-    real    sinhl(real x) { return sinh(x); }\n+    extern(D) real sinhl(real x) { return sinh(x); }\n \n     ///\n     pure double  tanh(double x);\n     ///\n     pure float   tanhf(float x);\n     ///\n-    pure real    tanhl(real x) { return tanh(x); }\n+    extern(D) pure real tanhl(real x) { return tanh(x); }\n \n     ///\n     double  exp(double x);\n     ///\n     float   expf(float x);\n     ///\n-    real    expl(real x) { return exp(x); }\n+    extern(D) real expl(real x) { return exp(x); }\n \n     ///\n     double  exp2(double x);\n@@ -2259,7 +2262,7 @@ else version (FreeBSD)\n     ///\n     float   expm1f(float x);\n     ///\n-    real    expm1l(real x) { return expm1(x); }\n+    extern(D) real expm1l(real x) { return expm1(x); }\n \n     ///\n     pure double  frexp(double value, int* exp);\n@@ -2281,29 +2284,29 @@ else version (FreeBSD)\n     ///\n     float   logf(float x);\n     ///\n-    real    logl(real x) { return log(x); }\n+    extern(D) real logl(real x) { return log(x); }\n \n     ///\n     double  log10(double x);\n     ///\n     float   log10f(float x);\n     ///\n-    real    log10l(real x) { return log10(x); }\n+    extern(D) real log10l(real x) { return log10(x); }\n \n     ///\n     double  log1p(double x);\n     ///\n     float   log1pf(float x);\n     ///\n-    real    log1pl(real x) { return log1p(x); }\n+    extern(D) real log1pl(real x) { return log1p(x); }\n \n     private enum real ONE_LN2 = 1 / 0x1.62e42fefa39ef358p-1L;\n     ///\n-    double  log2(double x) { return log(x) * ONE_LN2; }\n+    extern(D) double log2(double x) { return log(x) * ONE_LN2; }\n     ///\n-    float   log2f(float x) { return logf(x) * ONE_LN2; }\n+    extern(D) float  log2f(float x) { return logf(x) * ONE_LN2; }\n     ///\n-    real    log2l(real x)  { return logl(x) * ONE_LN2; }\n+    extern(D) real   log2l(real x)  { return logl(x) * ONE_LN2; }\n \n     ///\n     double  logb(double x);\n@@ -2330,7 +2333,7 @@ else version (FreeBSD)\n     ///\n     pure float   cbrtf(float x);\n     ///\n-    pure real    cbrtl(real x) { return cbrt(x); }\n+    extern(D) pure real cbrtl(real x) { return cbrt(x); }\n \n     ///\n     pure double  fabs(double x);\n@@ -2347,7 +2350,7 @@ else version (FreeBSD)\n     ///\n     float   powf(float x, float y);\n     ///\n-    real    powl(real x, real y) { return pow(x, y); }\n+    extern(D) real powl(real x, real y) { return pow(x, y); }\n \n     ///\n     double  sqrt(double x);\n@@ -2359,28 +2362,28 @@ else version (FreeBSD)\n     ///\n     pure float   erff(float x);\n     ///\n-    pure real    erfl(real x) { return erf(x); }\n+    extern(D) pure real erfl(real x) { return erf(x); }\n \n     ///\n     double  erfc(double x);\n     ///\n     float   erfcf(float x);\n     ///\n-    real    erfcl(real x) { return erfc(x); }\n+    extern(D) real erfcl(real x) { return erfc(x); }\n \n     ///\n     double  lgamma(double x);\n     ///\n     float   lgammaf(float x);\n     ///\n-    real    lgammal(real x) { return lgamma(x); }\n+    extern(D) real lgammal(real x) { return lgamma(x); }\n \n     ///\n     double  tgamma(double x);\n     ///\n     float   tgammaf(float x);\n     ///\n-    real    tgammal(real x) { return tgamma(x); }\n+    extern(D) real tgammal(real x) { return tgamma(x); }\n \n     ///\n     pure double  ceil(double x);\n@@ -2412,7 +2415,7 @@ else version (FreeBSD)\n     ///\n     long    llrintf(float x);\n     ///\n-    long    llrintl(real x) { return llrint(x); }\n+    extern(D) long llrintl(real x) { return llrint(x); }\n \n     ///\n     pure double  round(double x);\n@@ -2532,13 +2535,13 @@ else version (NetBSD)\n     ///\n     pure real    rintl(real x);\n     ///\n-    c_long  lrintl(real x) { return cast(c_long)rintl(x); }\n+    extern(D) c_long lrintl(real x) { return cast(c_long)rintl(x); }\n     ///\n     pure real    roundl(real x);\n     ///\n-    c_long  lroundl(real x) { return cast(c_long)roundl(x);}\n+    extern(D) c_long lroundl(real x) { return cast(c_long)roundl(x);}\n     ///\n-    long    llroundl(real x) { return cast(long)roundl(x);}\n+    extern(D) long llroundl(real x) { return cast(long)roundl(x);}\n     ///\n     pure real    truncl(real x);\n     ///\n@@ -2558,7 +2561,7 @@ else version (NetBSD)\n     ///\n     real    nextafterl(real x, real y);\n     ///\n-    real    nexttowardl(real x, real y) { return nexttoward(cast(double) x, cast(double) y); }\n+    extern(D) real nexttowardl(real x, real y) { return nexttoward(cast(double) x, cast(double) y); }\n     ///\n     real    fdiml(real x, real y);\n     ///\n@@ -2740,13 +2743,13 @@ else version (NetBSD)\n     ///\n     float   log1pf(float x);\n     ///\n-    real    log1pl(real x) { return log1p(cast(double) x); }\n+    extern(D) real log1pl(real x) { return log1p(cast(double) x); }\n \n     private enum real ONE_LN2 = 1 / 0x1.62e42fefa39ef358p-1L;\n     ///\n-    double  log2(double x) { return log(x) * ONE_LN2; }\n+    extern(D) double log2(double x) { return log(x) * ONE_LN2; }\n     ///\n-    float   log2f(float x) { return logf(x) * ONE_LN2; }\n+    extern(D) float log2f(float x) { return logf(x) * ONE_LN2; }\n     ///\n     real    log2l(real x)  { return logl(x) * ONE_LN2; }\n \n@@ -2804,7 +2807,7 @@ else version (NetBSD)\n     ///\n     pure float   erff(float x);\n     ///\n-    pure real    erfl(real x) { return erf(cast(double) x); }\n+    extern(D) pure real erfl(real x) { return erf(cast(double) x); }\n \n     ///\n     double  erfc(double x);\n@@ -2857,7 +2860,7 @@ else version (NetBSD)\n     ///\n     long    llrintf(float x);\n     ///\n-    long    llrintl(real x) { return cast(long)rintl(x); }\n+    extern(D) long llrintl(real x) { return cast(long)rintl(x); }\n \n     ///\n     pure double  round(double x);\n@@ -3988,399 +3991,399 @@ else version (CRuntime_UClibc)\n     ///\n     float   acosf(float x);\n     ///\n-    real    acosl(real x) { return acos(cast(double) x); }\n+    extern(D) real acosl(real x) { return acos(cast(double) x); }\n \n     ///\n     double  asin(double x);\n     ///\n     float   asinf(float x);\n     ///\n-    real    asinl(real x) { return asin(cast(double) x); }\n+    extern(D) real asinl(real x) { return asin(cast(double) x); }\n \n     ///\n     pure double  atan(double x);\n     ///\n     pure float   atanf(float x);\n     ///\n-    pure real    atanl(real x) { return atan(cast(double) x); }\n+    extern(D) pure real atanl(real x) { return atan(cast(double) x); }\n \n     ///\n     double  atan2(double y, double x);\n     ///\n     float   atan2f(float y, float x);\n     ///\n-    real    atan2l(real y, real x) { return atan2(cast(double) x, cast(double) y); }\n+    extern(D) real atan2l(real y, real x) { return atan2(cast(double) x, cast(double) y); }\n \n     ///\n     pure double  cos(double x);\n     ///\n     pure float   cosf(float x);\n     ///\n-    pure real    cosl(real x) { return cos(cast(double) x); }\n+    extern(D) pure real cosl(real x) { return cos(cast(double) x); }\n \n     ///\n     pure double  sin(double x);\n     ///\n     pure float   sinf(float x);\n     ///\n-    pure real    sinl(real x) { return sin(cast(double) x); }\n+    extern(D) pure real sinl(real x) { return sin(cast(double) x); }\n \n     ///\n     pure double  tan(double x);\n     ///\n     pure float   tanf(float x);\n     ///\n-    pure real    tanl(real x) { return tan(cast(double) x); }\n+    extern(D) pure real tanl(real x) { return tan(cast(double) x); }\n \n     ///\n     double  acosh(double x);\n     ///\n     float   acoshf(float x);\n     ///\n-    real    acoshl(real x) { return acosh(cast(double) x); }\n+    extern(D) real acoshl(real x) { return acosh(cast(double) x); }\n \n     ///\n     pure double  asinh(double x);\n     ///\n     pure float   asinhf(float x);\n     ///\n-    pure real    asinhl(real x) { return asinh(cast(double) x); }\n+    extern(D) pure real asinhl(real x) { return asinh(cast(double) x); }\n \n     ///\n     double  atanh(double x);\n     ///\n     float   atanhf(float x);\n     ///\n-    real    atanhl(real x) { return atanh(cast(double) x); }\n+    extern(D) real atanhl(real x) { return atanh(cast(double) x); }\n \n     ///\n     double  cosh(double x);\n     ///\n     float   coshf(float x);\n     ///\n-    real    coshl(real x) { return cosh(cast(double) x); }\n+    extern(D) real coshl(real x) { return cosh(cast(double) x); }\n \n     ///\n     double  sinh(double x);\n     ///\n     float   sinhf(float x);\n     ///\n-    real    sinhl(real x) { return sinh(cast(double) x); }\n+    extern(D) real sinhl(real x) { return sinh(cast(double) x); }\n \n     ///\n     double  tanh(double x);\n     ///\n     float   tanhf(float x);\n     ///\n-    real    tanhl(real x) { return tanh(cast(double) x); }\n+    extern(D) real tanhl(real x) { return tanh(cast(double) x); }\n \n     ///\n     double  exp(double x);\n     ///\n     float   expf(float x);\n     ///\n-    real    expl(real x) { return exp(cast(double) x); }\n+    extern(D) real expl(real x) { return exp(cast(double) x); }\n \n     ///\n     double  exp2(double x);\n     ///\n     float   exp2f(float x);\n     ///\n-    real    exp2l(real x) { return exp2(cast(double) x); }\n+    extern(D) real exp2l(real x) { return exp2(cast(double) x); }\n \n     ///\n     double  expm1(double x);\n     ///\n     float   expm1f(float x);\n     ///\n-    real    expm1l(real x) { return expm1(cast(double) x); }\n+    extern(D) real expm1l(real x) { return expm1(cast(double) x); }\n \n     ///\n     pure double  frexp(double value, int* exp);\n     ///\n     pure float   frexpf(float value, int* exp);\n     ///\n-    pure real    frexpl(real value, int* exp) { return frexp(cast(double) value, exp); }\n+    extern(D) pure real frexpl(real value, int* exp) { return frexp(cast(double) value, exp); }\n \n     ///\n     int     ilogb(double x);\n     ///\n     int     ilogbf(float x);\n     ///\n-    int     ilogbl(real x) { return ilogb(cast(double) x); }\n+    extern(D) int ilogbl(real x) { return ilogb(cast(double) x); }\n \n     ///\n     double  ldexp(double x, int exp);\n     ///\n     float   ldexpf(float x, int exp);\n     ///\n-    real    ldexpl(real x, int exp) { return ldexp(cast(double) x, exp); }\n+    extern(D) real ldexpl(real x, int exp) { return ldexp(cast(double) x, exp); }\n \n     ///\n     double  log(double x);\n     ///\n     float   logf(float x);\n     ///\n-    real    logl(real x) { return log(cast(double) x); }\n+    extern(D) real logl(real x) { return log(cast(double) x); }\n \n     ///\n     double  log10(double x);\n     ///\n     float   log10f(float x);\n     ///\n-    real    log10l(real x) { return log10(cast(double) x); }\n+    extern(D) real log10l(real x) { return log10(cast(double) x); }\n \n     ///\n     double  log1p(double x);\n     ///\n     float   log1pf(float x);\n     ///\n-    real    log1pl(real x) { return log1p(cast(double) x); }\n+    extern(D) real log1pl(real x) { return log1p(cast(double) x); }\n \n     ///\n     double  log2(double x);\n     ///\n     float   log2f(float x);\n     ///\n-    real    log2l(real x) { return log2(cast(double) x); }\n+    extern(D) real log2l(real x) { return log2(cast(double) x); }\n \n     ///\n     double  logb(double x);\n     ///\n     float   logbf(float x);\n     ///\n-    real    logbl(real x) { return logb(cast(double) x); }\n+    extern(D) real logbl(real x) { return logb(cast(double) x); }\n \n     ///\n     pure double  modf(double value, double* iptr);\n     ///\n     pure float   modff(float value, float* iptr);\n     ///\n-    pure real    modfl(real value, real *iptr) { return modf(cast(double) value, cast(double*) iptr); }\n+    extern(D) pure real modfl(real value, real *iptr) { return modf(cast(double) value, cast(double*) iptr); }\n \n     ///\n     double  scalbn(double x, int n);\n     ///\n     float   scalbnf(float x, int n);\n     ///\n-    real    scalbnl(real x, int n) { return scalbln(cast(double) x, n); }\n+    extern(D) real scalbnl(real x, int n) { return scalbln(cast(double) x, n); }\n \n     ///\n     double  scalbln(double x, c_long n);\n     ///\n     float   scalblnf(float x, c_long n);\n     ///\n-    real    scalblnl(real x, c_long n) { return scalbln(cast(double) x, n); }\n+    extern(D) real scalblnl(real x, c_long n) { return scalbln(cast(double) x, n); }\n \n     ///\n     pure double  cbrt(double x);\n     ///\n     pure float   cbrtf(float x);\n     ///\n-    pure real    cbrtl(real x) { return cbrt(cast(double) x); }\n+    extern(D) pure real cbrtl(real x) { return cbrt(cast(double) x); }\n \n     ///\n     pure double  fabs(double x);\n     ///\n     pure float   fabsf(float x);\n     ///\n-    pure real    fabsl(real x) { return fabs(cast(double) x); }\n+    extern(D) pure real fabsl(real x) { return fabs(cast(double) x); }\n \n     ///\n     double  hypot(double x, double y);\n     ///\n     float   hypotf(float x, float y);\n     ///\n-    real    hypotl(real x, real y) { return hypot(cast(double) x, cast(double) y); }\n+    extern(D) real hypotl(real x, real y) { return hypot(cast(double) x, cast(double) y); }\n \n     ///\n     double  pow(double x, double y);\n     ///\n     float   powf(float x, float y);\n     ///\n-    real    powl(real x, real y) { return pow(cast(double) x, cast(double) y); }\n+    extern(D) real powl(real x, real y) { return pow(cast(double) x, cast(double) y); }\n \n     ///\n     double  sqrt(double x);\n     ///\n     float   sqrtf(float x);\n     ///\n-    real    sqrtl(real x) { return sqrt(cast(double) x); }\n+    extern(D) real sqrtl(real x) { return sqrt(cast(double) x); }\n \n     ///\n     pure double  erf(double x);\n     ///\n     pure float   erff(float x);\n     ///\n-    pure real    erfl(real x) { return erf(cast(double) x); }\n+    extern(D) pure real erfl(real x) { return erf(cast(double) x); }\n \n     ///\n     double  erfc(double x);\n     ///\n     float   erfcf(float x);\n     ///\n-    real    erfcl(real x) { return erfc(cast(double) x); }\n+    extern(D) real erfcl(real x) { return erfc(cast(double) x); }\n \n     ///\n     double  lgamma(double x);\n     ///\n     float   lgammaf(float x);\n     ///\n-    real    lgammal(real x) { return lgamma(cast(double) x); }\n+    extern(D) real lgammal(real x) { return lgamma(cast(double) x); }\n \n     ///\n     double  tgamma(double x);\n     ///\n     float   tgammaf(float x);\n     ///\n-    real    tgammal(real x) { return tgamma(cast(double) x); }\n+    extern(D) real tgammal(real x) { return tgamma(cast(double) x); }\n \n     ///\n     pure double  ceil(double x);\n     ///\n     pure float   ceilf(float x);\n     ///\n-    pure real    ceill(real x) { return ceil(cast(double) x); }\n+    extern(D) pure real ceill(real x) { return ceil(cast(double) x); }\n \n     ///\n     pure double  floor(double x);\n     ///\n     pure float   floorf(float x);\n     ///\n-    pure real    floorl(real x) { return floor(cast(double) x); }\n+    extern(D) pure real floorl(real x) { return floor(cast(double) x); }\n \n     ///\n     pure double  nearbyint(double x);\n     ///\n     pure float   nearbyintf(float x);\n     ///\n-    pure real    nearbyintl(real x) { return nearbyint(cast(double) x); }\n+    extern(D) pure real nearbyintl(real x) { return nearbyint(cast(double) x); }\n \n     ///\n     pure double  rint(double x);\n     ///\n     pure float   rintf(float x);\n     ///\n-    pure real    rintl(real x) { return rint(cast(double) x); }\n+    extern(D) pure real rintl(real x) { return rint(cast(double) x); }\n \n     ///\n     c_long  lrint(double x);\n     ///\n     c_long  lrintf(float x);\n     ///\n-    c_long  lrintl(real x) { return lrint(cast(double) x); }\n+    extern(D) c_long lrintl(real x) { return lrint(cast(double) x); }\n \n     ///\n     long    llrint(double x);\n     ///\n     long    llrintf(float x);\n     ///\n-    long    llrintl(real x) { return llrint(cast(double) x); }\n+    extern(D) long llrintl(real x) { return llrint(cast(double) x); }\n \n     ///\n     pure double  round(double x);\n     ///\n     pure float   roundf(float x);\n     ///\n-    pure real    roundl(real x) { return round(cast(double) x); }\n+    extern(D) pure real roundl(real x) { return round(cast(double) x); }\n \n     ///\n     c_long  lround(double x);\n     ///\n     c_long  lroundf(float x);\n     ///\n-    c_long  lroundl(real x) { return lround(cast(double) x); }\n+    extern(D) c_long lroundl(real x) { return lround(cast(double) x); }\n \n     ///\n     long    llround(double x);\n     ///\n     long    llroundf(float x);\n     ///\n-    long    llroundl(real x) { return llround(cast(double) x); }\n+    extern(D) long llroundl(real x) { return llround(cast(double) x); }\n \n     ///\n     pure double  trunc(double x);\n     ///\n     pure float   truncf(float x);\n     ///\n-    pure real    truncl(real x) { return trunc(cast(double) x); }\n+    extern(D) pure real truncl(real x) { return trunc(cast(double) x); }\n \n     ///\n     double  fmod(double x, double y);\n     ///\n     float   fmodf(float x, float y);\n     ///\n-    real    fmodl(real x, real y) { return fmod(cast(double) x, cast(double) y); }\n+    extern(D) real fmodl(real x, real y) { return fmod(cast(double) x, cast(double) y); }\n \n     ///\n     double  remainder(double x, double y);\n     ///\n     float   remainderf(float x, float y);\n     ///\n-    real    remainderl(real x, real y) { return remainder(cast(double) x, cast(double) y); }\n+    extern(D) real remainderl(real x, real y) { return remainder(cast(double) x, cast(double) y); }\n \n     ///\n     double  remquo(double x, double y, int* quo);\n     ///\n     float   remquof(float x, float y, int* quo);\n     ///\n-    real    remquol(real x, real y, int* quo) { return remquo(cast(double) x, cast(double) y, quo); }\n+    extern(D) real remquol(real x, real y, int* quo) { return remquo(cast(double) x, cast(double) y, quo); }\n \n     ///\n     pure double  copysign(double x, double y);\n     ///\n     pure float   copysignf(float x, float y);\n     ///\n-    pure real    copysignl(real x, real y) { return copysign(cast(double) x, cast(double) y); }\n+    extern(D) pure real copysignl(real x, real y) { return copysign(cast(double) x, cast(double) y); }\n \n     ///\n     pure double  nan(char* tagp);\n     ///\n     pure float   nanf(char* tagp);\n     ///\n-    pure real    nanl(char* tagp) { return nan(tagp); }\n+    extern(D) pure real nanl(char* tagp) { return nan(tagp); }\n \n     ///\n     double  nextafter(double x, double y);\n     ///\n     float   nextafterf(float x, float y);\n     ///\n-    real    nextafterl(real x, real y) { return nextafter(cast(double) x, cast(double) y); }\n+    extern(D) real nextafterl(real x, real y) { return nextafter(cast(double) x, cast(double) y); }\n \n     ///\n     double  nexttoward(double x, real y);\n     ///\n     float   nexttowardf(float x, real y);\n     ///\n-    real    nexttowardl(real x, real y) { return nexttoward(cast(double) x, cast(double) y); }\n+    extern(D) real nexttowardl(real x, real y) { return nexttoward(cast(double) x, cast(double) y); }\n \n     ///\n     double  fdim(double x, double y);\n     ///\n     float   fdimf(float x, float y);\n     ///\n-    real    fdiml(real x, real y) { return fdim(cast(double) x, cast(double) y); }\n+    extern(D) real fdiml(real x, real y) { return fdim(cast(double) x, cast(double) y); }\n \n     ///\n     pure double  fmax(double x, double y);\n     ///\n     pure float   fmaxf(float x, float y);\n     ///\n-    pure real    fmaxl(real x, real y) { return fmax(cast(double) x, cast(double) y); }\n+    extern(D) pure real fmaxl(real x, real y) { return fmax(cast(double) x, cast(double) y); }\n \n     ///\n     pure double  fmin(double x, double y);\n     ///\n     pure float   fminf(float x, float y);\n     ///\n-    pure real    fminl(real x, real y) { return fmin(cast(double) x, cast(double) y); }\n+    extern(D) pure real fminl(real x, real y) { return fmin(cast(double) x, cast(double) y); }\n \n     ///\n     pure double  fma(double x, double y, double z);\n     ///\n     pure float   fmaf(float x, float y, float z);\n     ///\n-    pure real    fmal(real x, real y, real z) { return fma(cast(double) x, cast(double) y, cast(double) z); }\n+    extern(D) pure real fmal(real x, real y, real z) { return fma(cast(double) x, cast(double) y, cast(double) z); }\n }\n else\n {"}, {"sha": "867356c67e647ea5f2feafc199da3603de4e83da", "filename": "libphobos/libdruntime/core/sys/posix/fcntl.d", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d?ref=eb5f748a81eafb8014de39e60884c1617d60eb79", "patch": "@@ -120,6 +120,13 @@ version (CRuntime_Glibc)\n     enum F_SETLK        = 6;\n     enum F_SETLKW       = 7;\n   }\n+  else version (SystemZ)\n+  {\n+    static assert(off_t.sizeof == 8);\n+    enum F_GETLK        = 5;\n+    enum F_SETLK        = 6;\n+    enum F_SETLKW       = 7;\n+  }\n   else\n   static if ( __USE_FILE_OFFSET64 )\n   {"}, {"sha": "aa59c2f0bf0036451ae8fcdf474271f2d3577f17", "filename": "libphobos/libdruntime/core/sys/posix/spawn.d", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fspawn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fspawn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fspawn.d?ref=eb5f748a81eafb8014de39e60884c1617d60eb79", "patch": "@@ -239,7 +239,8 @@ else version (Darwin)\n         // POSIX_SPAWN_SETSCHEDPARAM = 0x10,  // not supported\n         // POSIX_SPAWN_SETSCHEDULER = 0x20,   // ditto\n         POSIX_SPAWN_SETEXEC = 0x40,\n-        POSIX_SPAWN_START_SUSPENDED = 0x80\n+        POSIX_SPAWN_START_SUSPENDED = 0x80,\n+        POSIX_SPAWN_CLOEXEC_DEFAULT = 0x4000\n     }\n     alias posix_spawnattr_t = void*;\n     alias posix_spawn_file_actions_t = void*;\n@@ -288,6 +289,8 @@ else version (NetBSD)\n         uint len;\n         posix_spawn_file_actions_entry_t* fae;\n     }\n+    alias posix_spawnattr_t = posix_spawnattr;\n+    alias posix_spawn_file_actions_t = posix_spawn_file_actions;\n }\n else version (OpenBSD)\n {"}, {"sha": "ab1fcd7b1646e6666ac9af266159f05f4ea8e37c", "filename": "libphobos/libdruntime/core/sys/posix/sys/stat.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d?ref=eb5f748a81eafb8014de39e60884c1617d60eb79", "patch": "@@ -799,12 +799,12 @@ version (CRuntime_Glibc)\n             alias __ino_t = c_ulong;\n             alias __ino64_t = ulong;\n             alias __mode_t = uint;\n-            alias __nlink_t = uint;\n+            alias __nlink_t = ulong;\n             alias __uid_t = uint;\n             alias __gid_t = uint;\n             alias __off_t = c_long;\n             alias __off64_t = long;\n-            alias __blksize_t = int;\n+            alias __blksize_t = c_long;\n             alias __blkcnt_t = c_long;\n             alias __blkcnt64_t = long;\n             alias __timespec = timespec;"}, {"sha": "3d2cd287a2e7d9fff2dcc0d2473168a7ec989199", "filename": "libphobos/libdruntime/core/thread.d", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Fcore%2Fthread.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Fcore%2Fthread.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread.d?ref=eb5f748a81eafb8014de39e60884c1617d60eb79", "patch": "@@ -1187,7 +1187,7 @@ class Thread\n             }\n             else\n             {\n-                // NOTE: pthread_setschedprio is not implemented on Darwin or FreeBSD, so use\n+                // NOTE: pthread_setschedprio is not implemented on Darwin, FreeBSD or DragonFlyBSD, so use\n                 //       the more complicated get/set sequence below.\n                 int         policy;\n                 sched_param param;\n@@ -3202,8 +3202,11 @@ extern (C) @nogc nothrow\n     version (CRuntime_Glibc) int pthread_getattr_np(pthread_t thread, pthread_attr_t* attr);\n     version (FreeBSD) int pthread_attr_get_np(pthread_t thread, pthread_attr_t* attr);\n     version (NetBSD) int pthread_attr_get_np(pthread_t thread, pthread_attr_t* attr);\n+    version (DragonFlyBSD) int pthread_attr_get_np(pthread_t thread, pthread_attr_t* attr);\n     version (Solaris) int thr_stksegment(stack_t* stk);\n     version (CRuntime_Bionic) int pthread_getattr_np(pthread_t thid, pthread_attr_t* attr);\n+    version (CRuntime_Musl) int pthread_getattr_np(pthread_t, pthread_attr_t*);\n+    version (CRuntime_UClibc) int pthread_getattr_np(pthread_t thread, pthread_attr_t* attr);\n }\n \n \n@@ -3292,6 +3295,19 @@ private void* getStackBottom() nothrow @nogc\n             addr += size;\n         return addr;\n     }\n+    else version (DragonFlyBSD)\n+    {\n+        pthread_attr_t attr;\n+        void* addr; size_t size;\n+\n+        pthread_attr_init(&attr);\n+        pthread_attr_get_np(pthread_self(), &attr);\n+        pthread_attr_getstack(&attr, &addr, &size);\n+        pthread_attr_destroy(&attr);\n+        version (StackGrowsDown)\n+            addr += size;\n+        return addr;\n+    }\n     else version (Solaris)\n     {\n         stack_t stk;\n@@ -3311,6 +3327,30 @@ private void* getStackBottom() nothrow @nogc\n             addr += size;\n         return addr;\n     }\n+    else version (CRuntime_Musl)\n+    {\n+        pthread_attr_t attr;\n+        void* addr; size_t size;\n+\n+        pthread_getattr_np(pthread_self(), &attr);\n+        pthread_attr_getstack(&attr, &addr, &size);\n+        pthread_attr_destroy(&attr);\n+        version (StackGrowsDown)\n+            addr += size;\n+        return addr;\n+    }\n+    else version (CRuntime_UClibc)\n+    {\n+        pthread_attr_t attr;\n+        void* addr; size_t size;\n+\n+        pthread_getattr_np(pthread_self(), &attr);\n+        pthread_attr_getstack(&attr, &addr, &size);\n+        pthread_attr_destroy(&attr);\n+        version (StackGrowsDown)\n+            addr += size;\n+        return addr;\n+    }\n     else\n         static assert(false, \"Platform not supported.\");\n }\n@@ -4569,8 +4609,10 @@ private:\n             version (Posix) import core.sys.posix.sys.mman; // mmap\n             version (FreeBSD) import core.sys.freebsd.sys.mman : MAP_ANON;\n             version (NetBSD) import core.sys.netbsd.sys.mman : MAP_ANON;\n+            version (DragonFlyBSD) import core.sys.dragonflybsd.sys.mman : MAP_ANON;\n             version (CRuntime_Glibc) import core.sys.linux.sys.mman : MAP_ANON;\n             version (Darwin) import core.sys.darwin.sys.mman : MAP_ANON;\n+            version (CRuntime_UClibc) import core.sys.linux.sys.mman : MAP_ANON;\n \n             static if ( __traits( compiles, mmap ) )\n             {\n@@ -5612,6 +5654,27 @@ version (FreeBSD) unittest\n     thr.join();\n }\n \n+version (DragonFlyBSD) unittest\n+{\n+    static void loop()\n+    {\n+        pthread_attr_t attr;\n+        pthread_attr_init(&attr);\n+        auto thr = pthread_self();\n+        foreach (i; 0 .. 50)\n+            pthread_attr_get_np(thr, &attr);\n+        pthread_attr_destroy(&attr);\n+    }\n+\n+    auto thr = new Thread(&loop).start();\n+    foreach (i; 0 .. 50)\n+    {\n+        thread_suspendAll();\n+        thread_resumeAll();\n+    }\n+    thr.join();\n+}\n+\n unittest\n {\n     // use >PAGESIZE to avoid stack overflow (e.g. in an syscall)"}, {"sha": "b29d3706af731d8d7ef7809e0f5d74e463fde756", "filename": "libphobos/libdruntime/rt/aApplyR.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Frt%2FaApplyR.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Frt%2FaApplyR.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2FaApplyR.d?ref=eb5f748a81eafb8014de39e60884c1617d60eb79", "patch": "@@ -272,7 +272,7 @@ extern (C) int _aApplyRwc1(in wchar[] aa, dg_t dg)\n \n         if (d & ~0x7F)\n         {\n-            char[4] buf;\n+            char[4] buf = void;\n \n             auto b = toUTF8(buf, d);\n             foreach (char c2; b)\n@@ -348,7 +348,7 @@ extern (C) int _aApplyRdc1(in dchar[] aa, dg_t dg)\n \n         if (d & ~0x7F)\n         {\n-            char[4] buf;\n+            char[4] buf = void;\n \n             auto b = toUTF8(buf, d);\n             foreach (char c2; b)\n@@ -741,7 +741,7 @@ extern (C) int _aApplyRwc2(in wchar[] aa, dg2_t dg)\n \n         if (d & ~0x7F)\n         {\n-            char[4] buf;\n+            char[4] buf = void;\n \n             auto b = toUTF8(buf, d);\n             foreach (char c2; b)\n@@ -819,7 +819,7 @@ extern (C) int _aApplyRdc2(in dchar[] aa, dg2_t dg)\n \n         if (d & ~0x7F)\n         {\n-            char[4] buf;\n+            char[4] buf = void;\n \n             auto b = toUTF8(buf, d);\n             foreach (char c2; b)"}, {"sha": "904f7219240790373e6857c0461a49b7a5742822", "filename": "libphobos/libdruntime/rt/config.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Frt%2Fconfig.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Frt%2Fconfig.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fconfig.d?ref=eb5f748a81eafb8014de39e60884c1617d60eb79", "patch": "@@ -115,7 +115,7 @@ string rt_envvarsOption(string opt, scope rt_configCallBack dg) @nogc nothrow\n         if (opt.length >= 32)\n             assert(0);\n \n-        char[40] var;\n+        char[40] var = void;\n         var[0 .. 4] = \"DRT_\";\n         foreach (i, c; opt)\n             var[4 + i] = cast(char) toupper(c);"}, {"sha": "f45565c971a0e1a3708223cd5217e3f95fa1bb8a", "filename": "libphobos/libdruntime/rt/dmain2.d", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Frt%2Fdmain2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Frt%2Fdmain2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fdmain2.d?ref=eb5f748a81eafb8014de39e60884c1617d60eb79", "patch": "@@ -42,6 +42,10 @@ version (NetBSD)\n {\n     import core.stdc.fenv;\n }\n+version (DragonFlyBSD)\n+{\n+    import core.stdc.fenv;\n+}\n \n extern (C) void _d_monitor_staticctor();\n extern (C) void _d_monitor_staticdtor();"}, {"sha": "e38b015f01edd3fbbe5d933fbba7043ac9aa3e89", "filename": "libphobos/libdruntime/rt/monitor_.d", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Frt%2Fmonitor_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Frt%2Fmonitor_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fmonitor_.d?ref=eb5f748a81eafb8014de39e60884c1617d60eb79", "patch": "@@ -193,7 +193,8 @@ else version (Windows)\n     {\n         pragma(lib, \"snn.lib\");\n     }\n-    import core.sys.windows.windows;\n+    import core.sys.windows.winbase /+: CRITICAL_SECTION, DeleteCriticalSection,\n+        EnterCriticalSection, InitializeCriticalSection, LeaveCriticalSection+/;\n \n     alias Mutex = CRITICAL_SECTION;\n \n@@ -206,6 +207,7 @@ else version (Posix)\n {\n     import core.sys.posix.pthread;\n \n+@nogc:\n     alias Mutex = pthread_mutex_t;\n     __gshared pthread_mutexattr_t gattr;\n \n@@ -244,17 +246,17 @@ struct Monitor\n \n private:\n \n-@property ref shared(Monitor*) monitor(Object h) pure nothrow\n+@property ref shared(Monitor*) monitor(Object h) pure nothrow @nogc\n {\n     return *cast(shared Monitor**)&h.__monitor;\n }\n \n-private shared(Monitor)* getMonitor(Object h) pure\n+private shared(Monitor)* getMonitor(Object h) pure @nogc\n {\n     return atomicLoad!(MemoryOrder.acq)(h.monitor);\n }\n \n-void setMonitor(Object h, shared(Monitor)* m) pure\n+void setMonitor(Object h, shared(Monitor)* m) pure @nogc\n {\n     atomicStore!(MemoryOrder.rel)(h.monitor, m);\n }\n@@ -296,7 +298,7 @@ shared(Monitor)* ensureMonitor(Object h)\n     }\n }\n \n-void deleteMonitor(Monitor* m)\n+void deleteMonitor(Monitor* m) @nogc\n {\n     destroyMutex(&m.mtx);\n     free(m);"}, {"sha": "079a0f574b9c2068d09120c219c05ce2380a95d1", "filename": "libphobos/libdruntime/rt/qsort.d", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Frt%2Fqsort.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5f748a81eafb8014de39e60884c1617d60eb79/libphobos%2Flibdruntime%2Frt%2Fqsort.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fqsort.d?ref=eb5f748a81eafb8014de39e60884c1617d60eb79", "patch": "@@ -75,6 +75,21 @@ else version (FreeBSD)\n         return a;\n     }\n }\n+else version (DragonFlyBSD)\n+{\n+    alias extern (C) int function(scope void *, scope const void *, scope const void *) Cmp;\n+    extern (C) void qsort_r(scope void *base, size_t nmemb, size_t size, scope void *thunk, Cmp cmp);\n+\n+    extern (C) void[] _adSort(return scope void[] a, TypeInfo ti)\n+    {\n+        extern (C) int cmp(scope void* ti, scope const void* p1, scope const void* p2)\n+        {\n+            return (cast(TypeInfo)ti).compare(p1, p2);\n+        }\n+        qsort_r(a.ptr, a.length, ti.tsize, cast(void*)ti, &cmp);\n+        return a;\n+    }\n+}\n else version (Darwin)\n {\n     alias extern (C) int function(scope void *, scope const void *, scope const void *) Cmp;\n@@ -90,6 +105,21 @@ else version (Darwin)\n         return a;\n     }\n }\n+else version (CRuntime_UClibc)\n+{\n+    alias extern (C) int function(scope const void *, scope const void *, scope void *) __compar_d_fn_t;\n+    extern (C) void qsort_r(scope void *base, size_t nmemb, size_t size, __compar_d_fn_t cmp, scope void *arg);\n+\n+    extern (C) void[] _adSort(return scope void[] a, TypeInfo ti)\n+    {\n+        extern (C) int cmp(scope const void* p1, scope const void* p2, scope void* ti)\n+        {\n+            return (cast(TypeInfo)ti).compare(p1, p2);\n+        }\n+        qsort_r(a.ptr, a.length, ti.tsize, &cmp, cast(void*)ti);\n+        return a;\n+    }\n+}\n else\n {\n     private TypeInfo tiglobal;"}]}