{"sha": "7af45bd465a9d75ea3eeb95b94ad06697989b84b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FmNDViZDQ2NWE5ZDc1ZWEzZWViOTViOTRhZDA2Njk3OTg5Yjg0Yg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2006-12-29T15:43:55Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2006-12-29T15:43:55Z"}, "message": "lex.c (_cpp_clean_line): Add uses of __builtin_expect.\n\n\t* lex.c (_cpp_clean_line): Add uses of __builtin_expect.  Don't\n\tlook backward at the end of the line unless we saw a backslash.\n\nFrom-SVN: r120263", "tree": {"sha": "d65c0563731fbeda76b7bc10f898ca429033ba53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d65c0563731fbeda76b7bc10f898ca429033ba53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7af45bd465a9d75ea3eeb95b94ad06697989b84b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7af45bd465a9d75ea3eeb95b94ad06697989b84b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7af45bd465a9d75ea3eeb95b94ad06697989b84b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7af45bd465a9d75ea3eeb95b94ad06697989b84b/comments", "author": null, "committer": null, "parents": [{"sha": "a3993f33507e06424e79fd279f0f546798664440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3993f33507e06424e79fd279f0f546798664440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3993f33507e06424e79fd279f0f546798664440"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "96c5140e7077562d7b2eb72d98b69d5ea4004e1f", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af45bd465a9d75ea3eeb95b94ad06697989b84b/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af45bd465a9d75ea3eeb95b94ad06697989b84b/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=7af45bd465a9d75ea3eeb95b94ad06697989b84b", "patch": "@@ -1,3 +1,8 @@\n+2006-12-29  Ian Lance Taylor  <iant@google.com>\n+\n+\t* lex.c (_cpp_clean_line): Add uses of __builtin_expect.  Don't\n+\tlook backward at the end of the line unless we saw a backslash.\n+\n 2006-12-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/29612"}, {"sha": "5d1a688af9a01b4f551a69e426419985e1e440a3", "filename": "libcpp/lex.c", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af45bd465a9d75ea3eeb95b94ad06697989b84b/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af45bd465a9d75ea3eeb95b94ad06697989b84b/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=7af45bd465a9d75ea3eeb95b94ad06697989b84b", "patch": "@@ -111,31 +111,39 @@ _cpp_clean_line (cpp_reader *pfile)\n \n   if (!buffer->from_stage3)\n     {\n+      const uchar *pbackslash = NULL;\n+\n       /* Short circuit for the common case of an un-escaped line with\n \t no trigraphs.  The primary win here is by not writing any\n \t data back to memory until we have to.  */\n       for (;;)\n \t{\n \t  c = *++s;\n-\t  if (c == '\\n' || c == '\\r')\n+\t  if (__builtin_expect (c == '\\n', false)\n+\t      || __builtin_expect (c == '\\r', false))\n \t    {\n \t      d = (uchar *) s;\n \n-\t      if (s == buffer->rlimit)\n+\t      if (__builtin_expect (s == buffer->rlimit, false))\n \t\tgoto done;\n \n \t      /* DOS line ending? */\n-\t      if (c == '\\r' && s[1] == '\\n')\n-\t\ts++;\n+\t      if (__builtin_expect (c == '\\r', false)\n+\t\t  && s[1] == '\\n')\n+\t\t{\n+\t\t  s++;\n+\t\t  if (s == buffer->rlimit)\n+\t\t    goto done;\n+\t\t}\n \n-\t      if (s == buffer->rlimit)\n+\t      if (__builtin_expect (pbackslash == NULL, true))\n \t\tgoto done;\n \n-\t      /* check for escaped newline */\n+\t      /* Check for escaped newline.  */\n \t      p = d;\n-\t      while (p != buffer->next_line && is_nvspace (p[-1]))\n+\t      while (is_nvspace (p[-1]))\n \t\tp--;\n-\t      if (p == buffer->next_line || p[-1] != '\\\\')\n+\t      if (p - 1 != pbackslash)\n \t\tgoto done;\n \n \t      /* Have an escaped newline; process it and proceed to\n@@ -145,7 +153,11 @@ _cpp_clean_line (cpp_reader *pfile)\n \t      buffer->next_line = p - 1;\n \t      break;\n \t    }\n-\t  if (c == '?' && s[1] == '?' && _cpp_trigraph_map[s[2]])\n+\t  if (__builtin_expect (c == '\\\\', false))\n+\t    pbackslash = s;\n+\t  else if (__builtin_expect (c == '?', false)\n+\t\t   && __builtin_expect (s[1] == '?', false)\n+\t\t   && _cpp_trigraph_map[s[2]])\n \t    {\n \t      /* Have a trigraph.  We may or may not have to convert\n \t\t it.  Add a line note regardless, for -Wtrigraphs.  */"}]}