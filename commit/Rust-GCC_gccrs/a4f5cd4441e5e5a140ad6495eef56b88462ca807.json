{"sha": "a4f5cd4441e5e5a140ad6495eef56b88462ca807", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRmNWNkNDQ0MWU1ZTVhMTQwYWQ2NDk1ZWVmNTZiODg0NjJjYTgwNw==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2005-08-04T03:06:12Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2005-08-04T03:06:12Z"}, "message": "trans-expr.c (gfc_conv_expr, [...]): Update comments.\n\n2005-08-04  Paul Brook  <paul@codesourcery.com>\n\n\t* trans-expr.c (gfc_conv_expr, gfc_conv_expr_type): Update comments.\n\t(gfc_conv_expr_lhs): Fix assertion.\n\t(gfc_conv_expr_val): Merge post block.  Set se.expr to new value.\n\t* trans.h: Move and update comments.\n\nFrom-SVN: r102729", "tree": {"sha": "79ce8b2fc6abff72b98587b58b629ea8eae957d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79ce8b2fc6abff72b98587b58b629ea8eae957d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4f5cd4441e5e5a140ad6495eef56b88462ca807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f5cd4441e5e5a140ad6495eef56b88462ca807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f5cd4441e5e5a140ad6495eef56b88462ca807", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f5cd4441e5e5a140ad6495eef56b88462ca807/comments", "author": null, "committer": null, "parents": [{"sha": "cb941178f51cb7045ca29f0e27f80f873dbb613d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb941178f51cb7045ca29f0e27f80f873dbb613d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb941178f51cb7045ca29f0e27f80f873dbb613d"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "f62655960348c1258987fbe3d00321dd16ce7a5b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f5cd4441e5e5a140ad6495eef56b88462ca807/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f5cd4441e5e5a140ad6495eef56b88462ca807/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a4f5cd4441e5e5a140ad6495eef56b88462ca807", "patch": "@@ -1,3 +1,9 @@\n+2005-08-04  Paul Brook  <paul@codesourcery.com>\n+\n+\t* trans-expr.c (gfc_conv_expr, gfc_conv_expr_type): Update comments.\n+\t(gfc_conv_expr_lhs): Fix assertion.\n+\t(gfc_conv_expr_val): Merge post block.  Set se.expr to new value.\n+\n 2005-08-02  David Edelsohn  <edelsohn@gnu.org>\n \n \tPR fortran/22491"}, {"sha": "a3846f3288e968f8c0b8b15110f0d192e12d874f", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f5cd4441e5e5a140ad6495eef56b88462ca807/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f5cd4441e5e5a140ad6495eef56b88462ca807/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=a4f5cd4441e5e5a140ad6495eef56b88462ca807", "patch": "@@ -1867,7 +1867,9 @@ gfc_conv_substring_expr (gfc_se * se, gfc_expr * expr)\n }\n \n \n-/* Entry point for expression translation.  */\n+/* Entry point for expression translation.  Evaluates a scalar quantity.\n+   EXPR is the expression to be translated, and SE is the state structure if\n+   called from within the scalarized.  */\n \n void\n gfc_conv_expr (gfc_se * se, gfc_expr * expr)\n@@ -1923,15 +1925,20 @@ gfc_conv_expr (gfc_se * se, gfc_expr * expr)\n     }\n }\n \n+/* Like gfc_conv_expr_val, but the value is also suitable for use in the lhs\n+   of an assignment.  */\n void\n gfc_conv_expr_lhs (gfc_se * se, gfc_expr * expr)\n {\n   gfc_conv_expr (se, expr);\n-  /* AFAICS all numeric lvalues have empty post chains.  If not we need to\n+  /* All numeric lvalues should have empty post chains.  If not we need to\n      figure out a way of rewriting an lvalue so that it has no post chain.  */\n-  gcc_assert (expr->ts.type != BT_CHARACTER || !se->post.head);\n+  gcc_assert (expr->ts.type == BT_CHARACTER || !se->post.head);\n }\n \n+/* Like gfc_conv_expr, but the POST block is guaranteed to be empty for\n+   numeric expressions.  Used for scalar values whee inserting cleanup code\n+   is inconvenient.  */\n void\n gfc_conv_expr_val (gfc_se * se, gfc_expr * expr)\n {\n@@ -1943,9 +1950,12 @@ gfc_conv_expr_val (gfc_se * se, gfc_expr * expr)\n     {\n       val = gfc_create_var (TREE_TYPE (se->expr), NULL);\n       gfc_add_modify_expr (&se->pre, val, se->expr);\n+      se->expr = val;\n+      gfc_add_block_to_block (&se->pre, &se->post);\n     }\n }\n \n+/* Helper to translate and expression and convert it to a particular type.  */\n void\n gfc_conv_expr_type (gfc_se * se, gfc_expr * expr, tree type)\n {"}, {"sha": "9678ff8a5c7e852631ecd6c3d625e6c1d868ba42", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f5cd4441e5e5a140ad6495eef56b88462ca807/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f5cd4441e5e5a140ad6495eef56b88462ca807/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=a4f5cd4441e5e5a140ad6495eef56b88462ca807", "patch": "@@ -275,20 +275,15 @@ tree gfc_chainon_list (tree, tree);\n    when a POST chain may be created, and what the returned expression may be\n    used for.  Note that character strings have special handling.  This\n    should not be a problem as most statements/operations only deal with\n-   numeric/logical types.  */\n+   numeric/logical types.  See the implementations in trans-expr.c\n+   for details of the individual functions.  */\n \n-/* Entry point for expression translation.  */\n void gfc_conv_expr (gfc_se * se, gfc_expr * expr);\n-/* Like gfc_conv_expr, but the POST block is guaranteed to be empty for\n-   numeric expressions.  */\n void gfc_conv_expr_val (gfc_se * se, gfc_expr * expr);\n-/* Like gfc_conv_expr_val, but the value is also suitable for use in the lhs of\n-   an assignment.  */\n void gfc_conv_expr_lhs (gfc_se * se, gfc_expr * expr);\n-/* Converts an expression so that it can be passed be reference.  */\n void gfc_conv_expr_reference (gfc_se * se, gfc_expr *);\n-/* Equivalent to convert(type, gfc_conv_expr_val(se, expr)).  */\n void gfc_conv_expr_type (gfc_se * se, gfc_expr *, tree);\n+\n /* Find the decl containing the auxiliary variables for assigned variables.  */\n void gfc_conv_label_variable (gfc_se * se, gfc_expr * expr);\n /* If the value is not constant, Create a temporary and copy the value.  */"}]}