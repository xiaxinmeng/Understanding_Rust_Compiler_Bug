{"sha": "9d2b80ea51e42d5011badf2d654fb3fd93289fe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQyYjgwZWE1MWU0MmQ1MDExYmFkZjJkNjU0ZmIzZmQ5MzI4OWZlMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-11-18T16:39:24Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-11-18T16:39:24Z"}, "message": "PR c++/91962 - ICE with reference binding and qualification conversion.\n\nWhen fixing c++/91889 (r276251) I was assuming that we couldn't have a ck_qual\nunder a ck_ref_bind, and I was introducing it in the patch and so this\n+   if (next_conversion (convs)->kind == ck_qual)\n+     {\n+       gcc_assert (same_type_p (TREE_TYPE (expr),\n+                    next_conversion (convs)->type));\n+       /* Strip the cast created by the ck_qual; cp_build_addr_expr\n+          below expects an lvalue.  */\n+       STRIP_NOPS (expr);\n+     }\nin convert_like_real was supposed to handle it.  But that assumption was wrong\nas this test shows; here we have \"(int *)f\" where f is of type long int, and\nwe're converting it to \"const int *const &\", so we have both ck_ref_bind and\nck_qual.  That means that the new STRIP_NOPS strips an expression it shouldn't\nhave, and that then breaks when creating a TARGET_EXPR.  So we want to limit\nthe stripping to the new case only.  This I do by checking need_temporary_p,\nwhich will be 0 in the new case.  Yes, we can set need_temporary_p when\nbinding a reference directly, but then we won't have a qualification\nconversion.  It is possible to have a bit-field, convert it to a pointer,\nand then convert that pointer to a more-qualified pointer, but in that case\nwe're not dealing with an lvalue, so gl_kind is 0, so we won't enter this\nblock in reference_binding:\n 1747   if ((related_p || compatible_p) && gl_kind)\n\n\t* call.c (convert_like_real) <case ck_ref_bind>: Check need_temporary_p.\n\n\t* g++.dg/cpp0x/ref-bind7.C: New test.\n\nFrom-SVN: r278416", "tree": {"sha": "83b6711f7a61324671daca7c4c1ed4d3f0784784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83b6711f7a61324671daca7c4c1ed4d3f0784784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d2b80ea51e42d5011badf2d654fb3fd93289fe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2b80ea51e42d5011badf2d654fb3fd93289fe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d2b80ea51e42d5011badf2d654fb3fd93289fe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2b80ea51e42d5011badf2d654fb3fd93289fe3/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8ea81183a92c71cd50550137fe0aa2725c98b3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ea81183a92c71cd50550137fe0aa2725c98b3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ea81183a92c71cd50550137fe0aa2725c98b3f"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "616a04bdd1d356c576bcaea1b38045e4388c06f4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2b80ea51e42d5011badf2d654fb3fd93289fe3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2b80ea51e42d5011badf2d654fb3fd93289fe3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9d2b80ea51e42d5011badf2d654fb3fd93289fe3", "patch": "@@ -1,3 +1,8 @@\n+2019-11-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91962 - ICE with reference binding and qualification conversion.\n+\t* call.c (convert_like_real) <case ck_ref_bind>: Check need_temporary_p.\n+\n 2019-11-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* method.c (lookup_comparison_result): Use %qD instead of %<%T::%D%>"}, {"sha": "13639a1c9010b542eb0345393fafdff14bdae20c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2b80ea51e42d5011badf2d654fb3fd93289fe3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2b80ea51e42d5011badf2d654fb3fd93289fe3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9d2b80ea51e42d5011badf2d654fb3fd93289fe3", "patch": "@@ -7598,7 +7598,8 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t/* direct_reference_binding might have inserted a ck_qual under\n \t   this ck_ref_bind for the benefit of conversion sequence ranking.\n \t   Ignore the conversion; we'll create our own below.  */\n-\tif (next_conversion (convs)->kind == ck_qual)\n+\tif (next_conversion (convs)->kind == ck_qual\n+\t    && !convs->need_temporary_p)\n \t  {\n \t    gcc_assert (same_type_p (TREE_TYPE (expr),\n \t\t\t\t     next_conversion (convs)->type));"}, {"sha": "d8bd2fa3382597b7d8947a62fa46e84a8d6696c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2b80ea51e42d5011badf2d654fb3fd93289fe3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2b80ea51e42d5011badf2d654fb3fd93289fe3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d2b80ea51e42d5011badf2d654fb3fd93289fe3", "patch": "@@ -1,3 +1,8 @@\n+2019-11-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91962 - ICE with reference binding and qualification conversion.\n+\t* g++.dg/cpp0x/ref-bind7.C: New test.\n+\n 2019-11-18  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/92528"}, {"sha": "e3675bc560d19154fe76191d7f7c504de6a81528", "filename": "gcc/testsuite/g++.dg/cpp0x/ref-bind7.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2b80ea51e42d5011badf2d654fb3fd93289fe3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2b80ea51e42d5011badf2d654fb3fd93289fe3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind7.C?ref=9d2b80ea51e42d5011badf2d654fb3fd93289fe3", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/91962 - ICE with reference binding and qualification conversion.\n+// { dg-do compile { target c++11 } }\n+\n+template <typename a> class b {\n+public:\n+  void c(const a &);\n+};\n+class B {\n+  void d();\n+  b<const int *> e;\n+};\n+long f;\n+void B::d() { e.c((const int *)f); }"}]}