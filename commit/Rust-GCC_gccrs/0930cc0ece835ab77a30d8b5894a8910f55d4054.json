{"sha": "0930cc0ece835ab77a30d8b5894a8910f55d4054", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkzMGNjMGVjZTgzNWFiNzdhMzBkOGI1ODk0YTg5MTBmNTVkNDA1NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-11-01T02:04:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-11-01T02:04:48Z"}, "message": "class.c (is_really_empty_class): Work when type is not complete.\n\n\t* class.c (is_really_empty_class): Work when type is not complete.\n\t(synthesized_default_constructor_is_constexpr): New.\n\t(add_implicitly_declared_members): Use it.\n\t(type_has_constexpr_default_constructor): Likewise.\n\t* cp-tree.h: Declare it.\n\t* method.c (synthesized_method_walk): Use it.\n\nFrom-SVN: r166124", "tree": {"sha": "f8e8b942d2e97fd64107a2ee74fb2dc1596e8511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8e8b942d2e97fd64107a2ee74fb2dc1596e8511"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0930cc0ece835ab77a30d8b5894a8910f55d4054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0930cc0ece835ab77a30d8b5894a8910f55d4054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0930cc0ece835ab77a30d8b5894a8910f55d4054", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0930cc0ece835ab77a30d8b5894a8910f55d4054/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec52b1115dda4b0e38aa5620b0c3914b69008a24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec52b1115dda4b0e38aa5620b0c3914b69008a24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec52b1115dda4b0e38aa5620b0c3914b69008a24"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "6462e11cb3f94e0baab77795c5fca63dfaa39df3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0930cc0ece835ab77a30d8b5894a8910f55d4054/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0930cc0ece835ab77a30d8b5894a8910f55d4054/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0930cc0ece835ab77a30d8b5894a8910f55d4054", "patch": "@@ -1,5 +1,12 @@\n 2010-10-31  Jason Merrill  <jason@redhat.com>\n \n+\t* class.c (is_really_empty_class): Work when type is not complete.\n+\t(synthesized_default_constructor_is_constexpr): New.\n+\t(add_implicitly_declared_members): Use it.\n+\t(type_has_constexpr_default_constructor): Likewise.\n+\t* cp-tree.h: Declare it.\n+\t* method.c (synthesized_method_walk): Use it.\n+\n \t* decl.c (pop_switch): Use EXPR_LOC_OR_HERE.\n \t* typeck.c (convert_for_assignment): Likewise.\n "}, {"sha": "1c9fac103581aea4f061bbb58df77273eff37421", "filename": "gcc/cp/class.c", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0930cc0ece835ab77a30d8b5894a8910f55d4054/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0930cc0ece835ab77a30d8b5894a8910f55d4054/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0930cc0ece835ab77a30d8b5894a8910f55d4054", "patch": "@@ -2671,20 +2671,10 @@ add_implicitly_declared_members (tree t,\n   if (! TYPE_HAS_USER_CONSTRUCTOR (t))\n     {\n       TYPE_HAS_DEFAULT_CONSTRUCTOR (t) = 1;\n-      if (TYPE_HAS_TRIVIAL_DFLT (t))\n-\t{\n-\t  /* A trivial default constructor is constexpr\n-\t     if there is nothing to initialize.  */\n-\t  if (cxx_dialect >= cxx0x && is_really_empty_class (t))\n-\t    TYPE_HAS_CONSTEXPR_CTOR (t) = 1;\n-\t  CLASSTYPE_LAZY_DEFAULT_CTOR (t) = 1;\n-\t}\n-      else if (cxx_dialect >= cxx0x)\n-\t/* We need to go ahead and declare this to set\n-\t   TYPE_HAS_CONSTEXPR_CTOR.  */\n-\tlazily_declare_fn (sfk_constructor, t);\n-      else\n-\tCLASSTYPE_LAZY_DEFAULT_CTOR (t) = 1;\n+      CLASSTYPE_LAZY_DEFAULT_CTOR (t) = 1;\n+      if (cxx_dialect >= cxx0x)\n+\tTYPE_HAS_CONSTEXPR_CTOR (t)\n+\t  = synthesized_default_constructor_is_constexpr (t);\n     }\n \n   /* [class.ctor]\n@@ -4337,6 +4327,18 @@ type_has_user_provided_default_constructor (tree t)\n   return false;\n }\n \n+/* Returns true iff for class T, a synthesized default constructor\n+   would be constexpr.  */\n+\n+bool\n+synthesized_default_constructor_is_constexpr (tree t)\n+{\n+  /* A defaulted default constructor is constexpr\n+     if there is nothing to initialize.  */\n+  /* FIXME adjust for non-static data member initializers.  */\n+  return is_really_empty_class (t);\n+}\n+\n /* Returns true iff class T has a constexpr default constructor.  */\n \n bool\n@@ -4346,6 +4348,8 @@ type_has_constexpr_default_constructor (tree t)\n \n   if (!CLASS_TYPE_P (t))\n     return false;\n+  if (CLASSTYPE_LAZY_DEFAULT_CTOR (t))\n+    return synthesized_default_constructor_is_constexpr (t);\n   fns = get_default_ctor (t);\n   return (fns && DECL_DECLARED_CONSTEXPR_P (fns));\n }\n@@ -6824,20 +6828,23 @@ contains_empty_class_p (tree type)\n }\n \n /* Returns true if TYPE contains no actual data, just various\n-   possible combinations of empty classes.  */\n+   possible combinations of empty classes and possibly a vptr.  */\n \n bool\n is_really_empty_class (tree type)\n {\n-  if (is_empty_class (type))\n-    return true;\n   if (CLASS_TYPE_P (type))\n     {\n       tree field;\n       tree binfo;\n       tree base_binfo;\n       int i;\n \n+      /* CLASSTYPE_EMPTY_P isn't set properly until the class is actually laid\n+\t out, but we'd like to be able to check this before then.  */\n+      if (COMPLETE_TYPE_P (type) && is_empty_class (type))\n+\treturn true;\n+\n       for (binfo = TYPE_BINFO (type), i = 0;\n \t   BINFO_BASE_ITERATE (binfo, i, base_binfo); ++i)\n \tif (!is_really_empty_class (BINFO_TYPE (base_binfo)))"}, {"sha": "e5ea232a94c94eaa4c6b2d2cfe243665d4955001", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0930cc0ece835ab77a30d8b5894a8910f55d4054/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0930cc0ece835ab77a30d8b5894a8910f55d4054/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0930cc0ece835ab77a30d8b5894a8910f55d4054", "patch": "@@ -4722,6 +4722,7 @@ extern tree in_class_defaulted_default_constructor (tree);\n extern bool user_provided_p\t\t\t(tree);\n extern bool type_has_user_provided_constructor  (tree);\n extern bool type_has_user_provided_default_constructor (tree);\n+extern bool synthesized_default_constructor_is_constexpr (tree);\n extern bool type_has_constexpr_default_constructor (tree);\n extern bool type_has_virtual_destructor\t\t(tree);\n extern bool type_has_move_constructor\t\t(tree);"}, {"sha": "ca5964e35ae38b3d49d5a0994c0027a494e0ee11", "filename": "gcc/cp/method.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0930cc0ece835ab77a30d8b5894a8910f55d4054/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0930cc0ece835ab77a30d8b5894a8910f55d4054/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=0930cc0ece835ab77a30d8b5894a8910f55d4054", "patch": "@@ -1157,7 +1157,11 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n      methods in C++0x.  */\n   if (expected_trivial\n       && (!copy_arg_p || cxx_dialect < cxx0x))\n-    return;\n+    {\n+      if (constexpr_p && sfk == sfk_constructor)\n+\t*constexpr_p = synthesized_default_constructor_is_constexpr (ctype);\n+      return;\n+    }\n #endif\n \n   ++cp_unevaluated_operand;"}]}