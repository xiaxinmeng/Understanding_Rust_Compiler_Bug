{"sha": "8ca4bf259c9e43016064c46ed853191c2ed4abd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNhNGJmMjU5YzllNDMwMTYwNjRjNDZlZDg1MzE5MWMyZWQ0YWJkMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-10-13T08:38:40Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-10-13T08:38:40Z"}, "message": "re PR c++/22464 (ICE on classes in template functions which attempt closure)\n\n\tPR c++/22464\n\t* semantics.c (finish_id_expression): Issue errors about uses of\n\tlocal variables in containing functions even in templates.\n\tPR c++/22180\n\t* call.c (build_new_method_call): Correct pretty-printing of\n\tdestructor names.\n\t* pt.c (tsubst_qualified_id): Recognize invalid uses of \"~T\" as an\n\tidentifier.\n\tPR c++/23694\n\t* decl.c (start_method): Return error_mark_node for errors.\n\tPR c++/23307\n\t* pt.c (push_template_decl_real): Complain about attempts to\n\tdeclare template variables.\n\tPR c++/22352\n\t* pt.c (tsubst_template_parms): Set processing_template_decl while\n\tprocessing the parameters.\n\t(tsubst_decl): Set processing_template_decl when substituting into\n\ta TEMPLATE_DECL.\n\tPR c++/22405\n\t* pt.c (most_specialized_instantiation): Robustify.\n\tPR c++/22464\n\t* g++.dg/template/crash/41.C: New test.\n\tPR c++/22180\n\t* g++.dg/template/crash40.C: New test.\n\tPR c++/23694\n\t* g++.dg/parse/friend5.C: New test.\n\n\tPR c++/23307\n\t* g++.dg/template/crash38.C: New test.\n\n\tPR c++/22352\n\t* g++.dg/template/friend38.C: New test.\n\n\tPR c++/22405\n\t* g++.dg/template/crash39.C: New test.\n\nFrom-SVN: r105365", "tree": {"sha": "47e3bf1306fadcd49657cf8f43c314aa5076aa1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47e3bf1306fadcd49657cf8f43c314aa5076aa1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ca4bf259c9e43016064c46ed853191c2ed4abd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca4bf259c9e43016064c46ed853191c2ed4abd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ca4bf259c9e43016064c46ed853191c2ed4abd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca4bf259c9e43016064c46ed853191c2ed4abd2/comments", "author": null, "committer": null, "parents": [{"sha": "f05c19d12690c180c75cea2f10cdfc853da8060c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f05c19d12690c180c75cea2f10cdfc853da8060c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f05c19d12690c180c75cea2f10cdfc853da8060c"}], "stats": {"total": 205, "additions": 171, "deletions": 34}, "files": [{"sha": "4ad7a080990f9d9d682238b9644049e9255ebec9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8ca4bf259c9e43016064c46ed853191c2ed4abd2", "patch": "@@ -1,3 +1,31 @@\n+2005-10-13  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/22180\n+\t* call.c (build_new_method_call): Correct pretty-printing of\n+\tdestructor names.\n+\t* pt.c (tsubst_qualified_id): Recognize invalid uses of \"~T\" as an\n+\tidentifier. \n+\n+\tPR c++/23694\n+\t* decl.c (start_method): Return error_mark_node for errors.\n+\n+\tPR c++/23307\n+\t* pt.c (push_template_decl_real): Complain about attempts to\n+\tdeclare template variables.\n+\n+\tPR c++/22352\n+\t* pt.c (tsubst_template_parms): Set processing_template_decl while\n+\tprocessing the parameters.\n+\t(tsubst_decl): Set processing_template_decl when substituting into\n+\ta TEMPLATE_DECL.\n+\n+\tPR c++/22405\n+\t* pt.c (most_specialized_instantiation): Robustify.\n+\n+\tPR c++/22464\n+\t* semantics.c (finish_id_expression): Issue errors about uses of\n+\tlocal variables in containing functions even in templates.\n+\n 2005-10-12  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \tPR target/21801"}, {"sha": "924760534eddf7eaac4b883ca304921f13e92b81", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=8ca4bf259c9e43016064c46ed853191c2ed4abd2", "patch": "@@ -5348,6 +5348,7 @@ build_new_method_call (tree instance, tree fns, tree args,\n       tree type = build_pointer_type (basetype);\n       if (!same_type_p (type, TREE_TYPE (instance_ptr)))\n \tinstance_ptr = build_nop (type, instance_ptr);\n+      name = complete_dtor_identifier;\n     }\n \n   class_type = (conversion_path ? BINFO_TYPE (conversion_path) : NULL_TREE);"}, {"sha": "77f316424c0c728daa41250bd2631bb229ff25b3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8ca4bf259c9e43016064c46ed853191c2ed4abd2", "patch": "@@ -10986,7 +10986,7 @@ start_method (cp_decl_specifier_seq *declspecs,\n \t  && TREE_CODE( DECL_CONTEXT (fndecl)) != NAMESPACE_DECL)\n \terror (\"%qD is already defined in class %qT\", fndecl,\n \t       DECL_CONTEXT (fndecl));\n-      return void_type_node;\n+      return error_mark_node;\n     }\n \n   check_template_shadow (fndecl);"}, {"sha": "0475fc8a987999bf5e33040315e1831d81af28bf", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8ca4bf259c9e43016064c46ed853191c2ed4abd2", "patch": "@@ -2998,9 +2998,8 @@ push_template_decl_real (tree decl, bool is_friend)\n \t      return decl;\n \t    }\n \t}\n-      else if ((DECL_IMPLICIT_TYPEDEF_P (decl)\n-\t\t&& CLASS_TYPE_P (TREE_TYPE (decl)))\n-\t       || (TREE_CODE (decl) == VAR_DECL && ctx && CLASS_TYPE_P (ctx)))\n+      else if (DECL_IMPLICIT_TYPEDEF_P (decl)\n+\t       && CLASS_TYPE_P (TREE_TYPE (decl)))\n \t/* OK */;\n       else\n \t{\n@@ -6004,6 +6003,12 @@ tsubst_template_parms (tree parms, tree args, tsubst_flags_t complain)\n   tree r = NULL_TREE;\n   tree* new_parms;\n \n+  /* When substituting into a template, we must set\n+     PROCESSING_TEMPLATE_DECL as the template parameters may be\n+     dependent if they are based on one-another, and the dependency\n+     predicates are short-circuit outside of templates.  */\n+  ++processing_template_decl;\n+\n   for (new_parms = &r;\n        TMPL_PARMS_DEPTH (parms) > TMPL_ARGS_DEPTH (args);\n        new_parms = &(TREE_CHAIN (*new_parms)),\n@@ -6036,6 +6041,8 @@ tsubst_template_parms (tree parms, tree args, tsubst_flags_t complain)\n \t\t   new_vec, NULL_TREE);\n     }\n \n+  --processing_template_decl;\n+\n   return r;\n }\n \n@@ -6243,8 +6250,14 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \ttmpl_args = DECL_CLASS_TEMPLATE_P (t)\n \t  ? CLASSTYPE_TI_ARGS (TREE_TYPE (t))\n \t  : DECL_TI_ARGS (DECL_TEMPLATE_RESULT (t));\n+\t/* Because this is a template, the arguments will still be\n+\t   dependent, even after substitution.  If\n+\t   PROCESSING_TEMPLATE_DECL is not set, the dependency\n+\t   predicates will short-circuit.  */\n+\t++processing_template_decl;\n \tfull_args = tsubst_template_args (tmpl_args, args,\n \t\t\t\t\t  complain, in_decl);\n+\t--processing_template_decl;\n \tif (full_args == error_mark_node)\n \t  return error_mark_node;\n \n@@ -6270,33 +6283,37 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \tgcc_assert (DECL_LANG_SPECIFIC (r) != 0);\n \tTREE_CHAIN (r) = NULL_TREE;\n \n-\tDECL_CONTEXT (r)\n-\t  = tsubst_aggr_type (DECL_CONTEXT (t), args,\n-\t\t\t      complain, in_decl,\n-\t\t\t      /*entering_scope=*/1);\n \tDECL_TEMPLATE_INFO (r) = build_tree_list (t, args);\n \n \tif (TREE_CODE (decl) == TYPE_DECL)\n \t  {\n-\t    tree new_type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n+\t    tree new_type;\n+\t    ++processing_template_decl;\n+\t    new_type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n+\t    --processing_template_decl; \n \t    if (new_type == error_mark_node)\n \t      return error_mark_node;\n \n \t    TREE_TYPE (r) = new_type;\n \t    CLASSTYPE_TI_TEMPLATE (new_type) = r;\n \t    DECL_TEMPLATE_RESULT (r) = TYPE_MAIN_DECL (new_type);\n \t    DECL_TI_ARGS (r) = CLASSTYPE_TI_ARGS (new_type);\n+\t    DECL_CONTEXT (r) = TYPE_CONTEXT (new_type);\n \t  }\n \telse\n \t  {\n-\t    tree new_decl = tsubst (decl, args, complain, in_decl);\n+\t    tree new_decl;\n+\t    ++processing_template_decl;\n+\t    new_decl = tsubst (decl, args, complain, in_decl);\n+\t    --processing_template_decl;\n \t    if (new_decl == error_mark_node)\n \t      return error_mark_node;\n \n \t    DECL_TEMPLATE_RESULT (r) = new_decl;\n \t    DECL_TI_TEMPLATE (new_decl) = r;\n \t    TREE_TYPE (r) = TREE_TYPE (new_decl);\n \t    DECL_TI_ARGS (r) = DECL_TI_ARGS (new_decl);\n+\t    DECL_CONTEXT (r) = DECL_CONTEXT (new_decl); \n \t  }\n \n \tSET_DECL_IMPLICIT_INSTANTIATION (r);\n@@ -7662,7 +7679,12 @@ tsubst_qualified_id (tree qualified_id, tree args,\n \n   if (!BASELINK_P (name) && !DECL_P (expr))\n     {\n-      expr = lookup_qualified_name (scope, expr, /*is_type_p=*/0, false);\n+      if (TREE_CODE (expr) == BIT_NOT_EXPR)\n+\t/* If this were actually a destructor call, it would have been\n+\t   parsed as such by the parser.  */\n+\texpr = error_mark_node;\n+      else\n+\texpr = lookup_qualified_name (scope, expr, /*is_type_p=*/0, false);\n       if (TREE_CODE (TREE_CODE (expr) == TEMPLATE_DECL\n \t\t     ? DECL_TEMPLATE_RESULT (expr) : expr) == TYPE_DECL)\n \t{\n@@ -10786,13 +10808,15 @@ most_specialized_instantiation (tree instantiations)\n \t\t\tNULL_TREE, /*check_ret=*/false))\n \tfate++;\n \n-      if (fate != 1)\n+      if (fate == -1)\n+\tchamp = fn;\n+      else if (!fate)\n \t{\n-\t  if (!fate)\n-\t    /* Equally specialized, move to next function.  If there\n-\t       is no next function, nothing's most specialized.  */\n-\t    fn = TREE_CHAIN (fn);\n-\t  champ = fn;\n+\t  /* Equally specialized, move to next function.  If there\n+\t     is no next function, nothing's most specialized.  */\n+\t  fn = TREE_CHAIN (fn);\n+\t  if (!fn)\n+\t    break;\n \t}\n     }\n "}, {"sha": "d870fda6ba2c12ba5ac5871834b41412ec2a575d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=8ca4bf259c9e43016064c46ed853191c2ed4abd2", "patch": "@@ -2459,6 +2459,21 @@ finish_id_expression (tree id_expression,\n \t was entirely defined.  */\n       if (!scope && decl != error_mark_node)\n \tmaybe_note_name_used_in_class (id_expression, decl);\n+\n+      /* Disallow uses of local variables from containing functions.  */\n+      if (TREE_CODE (decl) == VAR_DECL || TREE_CODE (decl) == PARM_DECL)\n+\t{\n+\t  tree context = decl_function_context (decl);\n+\t  if (context != NULL_TREE && context != current_function_decl\n+\t      && ! TREE_STATIC (decl))\n+\t    {\n+\t      error (TREE_CODE (decl) == VAR_DECL\n+\t\t     ? \"use of %<auto%> variable from containing function\"\n+\t\t     : \"use of parameter from containing function\");\n+\t      error (\"  %q+#D declared here\", decl);\n+\t      return error_mark_node;\n+\t    }\n+\t}\n     }\n \n   /* If we didn't find anything, or what we found was a type,\n@@ -2730,23 +2745,6 @@ finish_id_expression (tree id_expression,\n \t}\n       else\n \t{\n-\t  if (TREE_CODE (decl) == VAR_DECL\n-\t      || TREE_CODE (decl) == PARM_DECL\n-\t      || TREE_CODE (decl) == RESULT_DECL)\n-\t    {\n-\t      tree context = decl_function_context (decl);\n-\n-\t      if (context != NULL_TREE && context != current_function_decl\n-\t\t  && ! TREE_STATIC (decl))\n-\t\t{\n-\t\t  error (TREE_CODE (decl) == VAR_DECL\n-\t\t\t ? \"use of %<auto%> variable from containing function\"\n-\t\t\t : \"use of parameter from containing function\");\n-\t\t  error (\"  %q+#D declared here\", decl);\n-\t\t  return error_mark_node;\n-\t\t}\n-\t    }\n-\n \t  if (DECL_P (decl) && DECL_NONLOCAL (decl)\n \t      && DECL_CLASS_SCOPE_P (decl)\n \t      && DECL_CONTEXT (decl) != current_class_type)"}, {"sha": "1cfd961196f822b466f131a6f9491391ebac11a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ca4bf259c9e43016064c46ed853191c2ed4abd2", "patch": "@@ -1,3 +1,23 @@\n+2005-10-13  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/22464\n+\t* g++.dg/template/crash/41.C: New test.\n+\n+\tPR c++/22180\n+\t* g++.dg/template/crash40.C: New test.\n+\n+\tPR c++/23694\n+\t* g++.dg/parse/friend5.C: New test.\n+\t\n+\tPR c++/23307\n+\t* g++.dg/template/crash38.C: New test.\n+\t\n+\tPR c++/22352\n+\t* g++.dg/template/friend38.C: New test.\n+\t\n+\tPR c++/22405\n+\t* g++.dg/template/crash39.C: New test.\n+\t\n 2005-10-13  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* gcc.dg/debug/dwarf2/dwarf-char1.c,"}, {"sha": "5e23f457829de1f55e758c184f8c0baa4ef61469", "filename": "gcc/testsuite/g++.dg/parse/friend5.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend5.C?ref=8ca4bf259c9e43016064c46ed853191c2ed4abd2", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/23694\n+ \n+extern \"C\" struct A\n+{\n+  friend void foo(int) {} // { dg-error \"declaration\" }\n+  friend void foo() {} // { dg-error \"foo\" }\n+};"}, {"sha": "c652cc86f6ef96d0fa91cc57c75dce14e4fbca27", "filename": "gcc/testsuite/g++.dg/template/crash38.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash38.C?ref=8ca4bf259c9e43016064c46ed853191c2ed4abd2", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/23307\n+\n+class A\n+{\n+  template<class R>\n+  static void f(X&); // { dg-error \"\" }\n+  inline void A::f<void>(X&); // { dg-error \"f|expected\" }\n+};"}, {"sha": "ddecc173c45b96a2e2ac07cd443391a9e86c58ae", "filename": "gcc/testsuite/g++.dg/template/crash39.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash39.C?ref=8ca4bf259c9e43016064c46ed853191c2ed4abd2", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/22405\n+\n+template <typename T> void foo(T &arg) { // { dg-error \"declared\" }\n+  arg+=1;\n+}\n+\n+template <typename T> void foo(T &arg) { // { dg-error \"redefinition\" }\n+  arg+=2;\n+}\n+\n+template void foo(float &arg);"}, {"sha": "716b4a2613739a6e7103947a216bc90a7b9dde93", "filename": "gcc/testsuite/g++.dg/template/crash40.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash40.C?ref=8ca4bf259c9e43016064c46ed853191c2ed4abd2", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/22180\n+\n+struct A {};\n+\n+template<typename T> void foo()\n+{\n+  T::~T(); // { dg-error \"member\" }\n+}\n+\n+template void foo<A>(); // { dg-error \"instantiated\" }"}, {"sha": "9a440b0761eb66a5e986a0a25d31bd1c19fbde08", "filename": "gcc/testsuite/g++.dg/template/crash41.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash41.C?ref=8ca4bf259c9e43016064c46ed853191c2ed4abd2", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/22464\n+\n+template<typename T>\n+void do_something(const T* A) // { dg-error \"declared\" }\n+{ \n+  struct helper_t{ \n+    helper_t() {  \n+      A[0]; // { dg-error \"use\" }\n+    }\n+  } helper;\n+}\n+\n+void sub1() {\n+  double A[7];\n+  do_something (A);\n+}\n+\n+  "}, {"sha": "41faf79110cffd8ab9cbaf85f719be9eac8e0eef", "filename": "gcc/testsuite/g++.dg/template/friend38.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca4bf259c9e43016064c46ed853191c2ed4abd2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend38.C?ref=8ca4bf259c9e43016064c46ed853191c2ed4abd2", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/22352\n+\n+template <class A>\n+class s\n+{\n+  typedef int d;\n+  template <class s, typename s::d>\n+  friend class t;\n+};\n+\n+s<int> t1;\n+"}]}