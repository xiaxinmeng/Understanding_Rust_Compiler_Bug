{"sha": "aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEyZDBiYzMxYzJkYWMwZWNkZTcyZDkyZDdkNDE5YmU1YThmMjFiMw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2005-02-03T09:09:42Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2005-02-03T09:09:42Z"}, "message": "combine.c (simplify_comparison, [...]): Do not drop the extend if we'd have to add a paradoxical subreg later.\n\ngcc/ChangeLog:\n* combine.c (simplify_comparison, case SIGN_EXTEND, ZERO_EXTEND):\nDo not drop the extend if we'd have to add a paradoxical subreg\nlater.  Include optabs.h and insn-codes.h.\n* Makefile.in (combine.o): Depend on $(OPTABS_H).\ngcc/testsuite/ChangeLog:\n* gcc.c-torture/execute/20050203-1.c: New.\n\nFrom-SVN: r94655", "tree": {"sha": "2670e900e343f8a26a16c91b8c9efacb96709618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2670e900e343f8a26a16c91b8c9efacb96709618"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3/comments", "author": null, "committer": null, "parents": [{"sha": "f1a3e333f0f5c214ed5801ed3546d0f8caf9f5fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a3e333f0f5c214ed5801ed3546d0f8caf9f5fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1a3e333f0f5c214ed5801ed3546d0f8caf9f5fc"}], "stats": {"total": 79, "additions": 64, "deletions": 15}, "files": [{"sha": "f011c4e44fffa919d838993c720131f12b8b072e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3", "patch": "@@ -1,3 +1,10 @@\n+2005-02-03  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* combine.c (simplify_comparison, case SIGN_EXTEND, ZERO_EXTEND):\n+\tDo not drop the extend if we'd have to add a paradoxical subreg\n+\tlater.  Include optabs.h and insn-codes.h.\n+\t* Makefile.in (combine.o): Depend on $(OPTABS_H).\n+\n 2005-02-02  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/19405"}, {"sha": "44a954a21f35219d3146c88a77c6090580defc21", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3", "patch": "@@ -2046,7 +2046,7 @@ et-forest.o : et-forest.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) et-forest.\n combine.o : combine.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) function.h insn-config.h $(INSN_ATTR_H) $(REGS_H) $(EXPR_H) \\\n    rtlhooks-def.h $(BASIC_BLOCK_H) $(RECOG_H) real.h hard-reg-set.h \\\n-   toplev.h $(TM_P_H) $(TREE_H) $(TARGET_H) output.h $(PARAMS_H)\n+   toplev.h $(TM_P_H) $(TREE_H) $(TARGET_H) output.h $(PARAMS_H) $(OPTABS_H)\n regclass.o : regclass.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) $(REGS_H) insn-config.h \\\n    $(RECOG_H) reload.h real.h toplev.h function.h output.h $(GGC_H) \\"}, {"sha": "ae773b96517707161a4fe65ed7e0e1d307b951d5", "filename": "gcc/combine.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3", "patch": "@@ -90,6 +90,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"real.h\"\n #include \"toplev.h\"\n #include \"target.h\"\n+#include \"optabs.h\"\n+#include \"insn-codes.h\"\n #include \"rtlhooks-def.h\"\n /* Include output.h for dump_file.  */\n #include \"output.h\"\n@@ -10054,16 +10056,22 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t  break;\n \n \tcase SIGN_EXTEND:\n-\t  /* Can simplify (compare (zero/sign_extend FOO) CONST)\n-\t     to (compare FOO CONST) if CONST fits in FOO's mode and we\n-\t     are either testing inequality or have an unsigned comparison\n-\t     with ZERO_EXTEND or a signed comparison with SIGN_EXTEND.  */\n-\t  if (! unsigned_comparison_p\n-\t      && (GET_MODE_BITSIZE (GET_MODE (XEXP (op0, 0)))\n-\t\t  <= HOST_BITS_PER_WIDE_INT)\n+\t  /* Can simplify (compare (zero/sign_extend FOO) CONST) to\n+\t     (compare FOO CONST) if CONST fits in FOO's mode and we\n+\t     are either testing inequality or have an unsigned\n+\t     comparison with ZERO_EXTEND or a signed comparison with\n+\t     SIGN_EXTEND.  But don't do it if we don't have a compare\n+\t     insn of the given mode, since we'd have to revert it\n+\t     later on, and then we wouldn't know whether to sign- or\n+\t     zero-extend.  */\n+\t  mode = GET_MODE (XEXP (op0, 0));\n+\t  if (mode != VOIDmode && GET_MODE_CLASS (mode) == MODE_INT\n+\t      && ! unsigned_comparison_p\n+\t      && (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n \t      && ((unsigned HOST_WIDE_INT) const_op\n-\t\t  < (((unsigned HOST_WIDE_INT) 1\n-\t\t      << (GET_MODE_BITSIZE (GET_MODE (XEXP (op0, 0))) - 1)))))\n+\t\t  < (((unsigned HOST_WIDE_INT) 1 \n+\t\t      << (GET_MODE_BITSIZE (mode) - 1))))\n+\t      && cmp_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing)\n \t    {\n \t      op0 = XEXP (op0, 0);\n \t      continue;\n@@ -10139,11 +10147,12 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t  /* ... fall through ...  */\n \n \tcase ZERO_EXTEND:\n-\t  if ((unsigned_comparison_p || equality_comparison_p)\n-\t      && (GET_MODE_BITSIZE (GET_MODE (XEXP (op0, 0)))\n-\t\t  <= HOST_BITS_PER_WIDE_INT)\n-\t      && ((unsigned HOST_WIDE_INT) const_op\n-\t\t  < GET_MODE_MASK (GET_MODE (XEXP (op0, 0)))))\n+\t  mode = GET_MODE (XEXP (op0, 0));\n+\t  if (mode != VOIDmode && GET_MODE_CLASS (mode) == MODE_INT\n+\t      && (unsigned_comparison_p || equality_comparison_p)\n+\t      && (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n+\t      && ((unsigned HOST_WIDE_INT) const_op < GET_MODE_MASK (mode))\n+\t      && cmp_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing)\n \t    {\n \t      op0 = XEXP (op0, 0);\n \t      continue;"}, {"sha": "3820b90d18637a5a9cbadf428fd44b3bf13185b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3", "patch": "@@ -1,3 +1,7 @@\n+2005-02-03  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* gcc.c-torture/execute/20050203-1.c: New.\n+\n 2005-02-03  Dorit Naishlos  <dorit@il.ibm.com>\n \n \t* gcc.dg/vect/vect-85.c: Remove xfail."}, {"sha": "0b3827794d8aa45d877f7478167914b474129e48", "filename": "gcc/testsuite/gcc.c-torture/execute/20050203-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050203-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050203-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050203-1.c?ref=aa2d0bc31c2dac0ecde72d92d7d419be5a8f21b3", "patch": "@@ -0,0 +1,29 @@\n+/* Reduced testcase extracted from Samba source code.  */\n+\n+#include <stdlib.h>\n+\n+static void __attribute__((__noinline__))\n+     foo (unsigned char *p) {\n+  *p = 0x81;\n+}\n+\n+static void __attribute__((__noinline__))\n+     bar (int x) {\n+  asm (\"\");\n+}\n+\n+int main() {\n+  unsigned char b;\n+\n+  foo(&b);\n+  if (b & 0x80)\n+    {\n+      bar (b & 0x7f);\n+      exit (0);\n+    }\n+  else\n+    {\n+      bar (b & 1);\n+      abort ();\n+    }\n+}"}]}