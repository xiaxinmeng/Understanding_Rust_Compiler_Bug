{"sha": "36dafbd1f164e05181dceb8151ea62c0b50eb1a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZkYWZiZDFmMTY0ZTA1MTgxZGNlYjgxNTFlYTYyYzBiNTBlYjFhMg==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2008-05-15T19:25:53Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2008-05-15T19:25:53Z"}, "message": "re PR middle-end/36194 (Truncation optimization in combine can remove necessary truncations)\n\n\tPR middle-end/36194\n        * combine.c (check_conversion): Rename to check_promoted_subreg. \n        Don't call record_truncated_value from here. \n        (record_truncated_value): Turn it into a for_each_rtx callback. \n        (record_truncated_values): New function. \n        (combine_instructions): Call note_uses with \n        record_truncated_values.  Change name of check_conversion to \n        check_promoted_subreg. \n\ntestsuite/\n\n\t* gcc.dg/pr36194.c: New test.\n\nFrom-SVN: r135392", "tree": {"sha": "079188d9b1647cab153882c44eb6a6dd756a3fff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/079188d9b1647cab153882c44eb6a6dd756a3fff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36dafbd1f164e05181dceb8151ea62c0b50eb1a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36dafbd1f164e05181dceb8151ea62c0b50eb1a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36dafbd1f164e05181dceb8151ea62c0b50eb1a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36dafbd1f164e05181dceb8151ea62c0b50eb1a2/comments", "author": null, "committer": null, "parents": [{"sha": "fda9d38f808e467c32a25199adf3c91c99c0518d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda9d38f808e467c32a25199adf3c91c99c0518d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fda9d38f808e467c32a25199adf3c91c99c0518d"}], "stats": {"total": 104, "additions": 80, "deletions": 24}, "files": [{"sha": "fbdd78fa92288bd6dbce5f2567a43d9351a1c270", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36dafbd1f164e05181dceb8151ea62c0b50eb1a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36dafbd1f164e05181dceb8151ea62c0b50eb1a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36dafbd1f164e05181dceb8151ea62c0b50eb1a2", "patch": "@@ -1,3 +1,14 @@\n+2008-05-15  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\tPR middle-end/36194\n+        * combine.c (check_conversion): Rename back to check_promoted_subreg. \n+        Don't call record_truncated_value from here. \n+        (record_truncated_value): Turn it into a for_each_rtx callback. \n+        (record_truncated_values): New function. \n+        (combine_instructions): Call note_uses with \n+        record_truncated_values.  Change name of check_conversion to \n+        check_promoted_subreg. \n+\n 2008-05-15  Janis Johnson  <janis187@us.ibm.com>\n \n \t* doc/sourcebuild.texi: Document support for torture tests."}, {"sha": "c194d663ba31da6653fb0f3ded0638434eee2ece", "filename": "gcc/combine.c", "status": "modified", "additions": 39, "deletions": 24, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36dafbd1f164e05181dceb8151ea62c0b50eb1a2/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36dafbd1f164e05181dceb8151ea62c0b50eb1a2/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=36dafbd1f164e05181dceb8151ea62c0b50eb1a2", "patch": "@@ -425,7 +425,7 @@ static rtx gen_lowpart_for_combine (enum machine_mode, rtx);\n static enum rtx_code simplify_comparison (enum rtx_code, rtx *, rtx *);\n static void update_table_tick (rtx);\n static void record_value_for_reg (rtx, rtx, rtx);\n-static void check_conversions (rtx, rtx);\n+static void check_promoted_subreg (rtx, rtx);\n static void record_dead_and_set_regs_1 (rtx, const_rtx, void *);\n static void record_dead_and_set_regs (rtx);\n static int get_last_value_validate (rtx *, rtx, int, int);\n@@ -441,7 +441,8 @@ static void mark_used_regs_combine (rtx);\n static void record_promoted_value (rtx, rtx);\n static int unmentioned_reg_p_1 (rtx *, void *);\n static bool unmentioned_reg_p (rtx, rtx);\n-static void record_truncated_value (rtx);\n+static int record_truncated_value (rtx *, void *);\n+static void record_truncated_values (rtx *, void *);\n static bool reg_truncated_to_mode (enum machine_mode, const_rtx);\n static rtx gen_lowpart_or_truncate (enum machine_mode, rtx);\n \f\n@@ -1137,7 +1138,12 @@ combine_instructions (rtx f, unsigned int nregs)\n \t    {\n \t      /* See if we know about function return values before this\n \t\t insn based upon SUBREG flags.  */\n-\t      check_conversions (insn, PATTERN (insn));\n+\t      check_promoted_subreg (insn, PATTERN (insn));\n+\n+\t      /* See if we can find hardregs and subreg of pseudos in\n+\t\t narrower modes.  This could help turning TRUNCATEs\n+\t\t into SUBREGs.  */\n+\t      note_uses (&PATTERN (insn), record_truncated_values, NULL);\n \n \t      /* Try this insn with each insn it links back to.  */\n \n@@ -11610,13 +11616,15 @@ reg_truncated_to_mode (enum machine_mode mode, const_rtx x)\n   return false;\n }\n \n-/* X is a REG or a SUBREG.  If X is some sort of a truncation record\n-   it.  For non-TRULY_NOOP_TRUNCATION targets we might be able to turn\n-   a truncate into a subreg using this information.  */\n+/* Callback for for_each_rtx.  If *P is a hard reg or a subreg record the mode\n+   that the register is accessed in.  For non-TRULY_NOOP_TRUNCATION targets we\n+   might be able to turn a truncate into a subreg using this information.\n+   Return -1 if traversing *P is complete or 0 otherwise.  */\n \n-static void\n-record_truncated_value (rtx x)\n+static int\n+record_truncated_value (rtx *p, void *data ATTRIBUTE_UNUSED)\n {\n+  rtx x = *p;\n   enum machine_mode truncated_mode;\n   reg_stat_type *rsp;\n \n@@ -11626,11 +11634,11 @@ record_truncated_value (rtx x)\n       truncated_mode = GET_MODE (x);\n \n       if (GET_MODE_SIZE (original_mode) <= GET_MODE_SIZE (truncated_mode))\n-\treturn;\n+\treturn -1;\n \n       if (TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (truncated_mode),\n \t\t\t\t GET_MODE_BITSIZE (original_mode)))\n-\treturn;\n+\treturn -1;\n \n       x = SUBREG_REG (x);\n     }\n@@ -11639,7 +11647,7 @@ record_truncated_value (rtx x)\n   else if (REG_P (x) && REGNO (x) < FIRST_PSEUDO_REGISTER)\n     truncated_mode = GET_MODE (x);\n   else\n-    return;\n+    return 0;\n \n   rsp = VEC_index (reg_stat_type, reg_stat, REGNO (x));\n   if (rsp->truncated_to_mode == 0\n@@ -11650,23 +11658,30 @@ record_truncated_value (rtx x)\n       rsp->truncated_to_mode = truncated_mode;\n       rsp->truncation_label = label_tick;\n     }\n+\n+  return -1;\n }\n \n-/* Scan X for promoted SUBREGs and truncated REGs.  For each one\n-   found, note what it implies to the registers used in it.  */\n+/* Callback for note_uses.  Find hardregs and subregs of pseudos and\n+   the modes they are used in.  This can help truning TRUNCATEs into\n+   SUBREGs.  */\n \n static void\n-check_conversions (rtx insn, rtx x)\n+record_truncated_values (rtx *x, void *data ATTRIBUTE_UNUSED)\n {\n-  if (GET_CODE (x) == SUBREG || REG_P (x))\n-    {\n-      if (GET_CODE (x) == SUBREG\n-\t  && SUBREG_PROMOTED_VAR_P (x)\n-\t  && REG_P (SUBREG_REG (x)))\n-\trecord_promoted_value (insn, x);\n+  for_each_rtx (x, record_truncated_value, NULL);\n+}\n \n-      record_truncated_value (x);\n-    }\n+/* Scan X for promoted SUBREGs.  For each one found,\n+   note what it implies to the registers used in it.  */\n+\n+static void\n+check_promoted_subreg (rtx insn, rtx x)\n+{\n+  if (GET_CODE (x) == SUBREG\n+      && SUBREG_PROMOTED_VAR_P (x)\n+      && REG_P (SUBREG_REG (x)))\n+    record_promoted_value (insn, x);\n   else\n     {\n       const char *format = GET_RTX_FORMAT (GET_CODE (x));\n@@ -11676,13 +11691,13 @@ check_conversions (rtx insn, rtx x)\n \tswitch (format[i])\n \t  {\n \t  case 'e':\n-\t    check_conversions (insn, XEXP (x, i));\n+\t    check_promoted_subreg (insn, XEXP (x, i));\n \t    break;\n \t  case 'V':\n \t  case 'E':\n \t    if (XVEC (x, i) != 0)\n \t      for (j = 0; j < XVECLEN (x, i); j++)\n-\t\tcheck_conversions (insn, XVECEXP (x, i, j));\n+\t\tcheck_promoted_subreg (insn, XVECEXP (x, i, j));\n \t    break;\n \t  }\n     }"}, {"sha": "a91d3c5644ef006c1b4a060abd60efe350e236d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36dafbd1f164e05181dceb8151ea62c0b50eb1a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36dafbd1f164e05181dceb8151ea62c0b50eb1a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36dafbd1f164e05181dceb8151ea62c0b50eb1a2", "patch": "@@ -1,3 +1,8 @@\n+2008-05-15  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\tPR middle-end/36194\n+\t* gcc.dg/pr36194.c: New test.\n+\n 2008-05-15  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/34974"}, {"sha": "3d2195b03d413f30348e4a47881a4305a5d8ed11", "filename": "gcc/testsuite/gcc.dg/pr36194.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36dafbd1f164e05181dceb8151ea62c0b50eb1a2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36194.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36dafbd1f164e05181dceb8151ea62c0b50eb1a2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36194.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36194.c?ref=36dafbd1f164e05181dceb8151ea62c0b50eb1a2", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+void abort (void);\n+\n+__attribute__ ((noinline)) void\n+f (int i)\n+{\n+  if (i != 0x87654321)\n+    abort ();\n+  asm (\"\");\n+}\n+\n+__attribute__ ((noinline)) void\n+g (long long a)\n+{\n+  f (a);\n+  asm (\"\");\n+}\n+\n+main ()\n+{\n+  g (0x1234567887654321ll);\n+  return 0;\n+}"}]}