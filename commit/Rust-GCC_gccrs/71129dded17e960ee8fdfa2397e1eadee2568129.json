{"sha": "71129dded17e960ee8fdfa2397e1eadee2568129", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzExMjlkZGVkMTdlOTYwZWU4ZmRmYTIzOTdlMWVhZGVlMjU2ODEyOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-20T10:26:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-20T10:26:48Z"}, "message": "[multiple changes]\n\n2016-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_attr.ads Add new table Universal_Type_Attribute.\n\t* sem_util.adb (Yields_Universal_Type): Use a table lookup when\n\tchecking attributes.\n\n2016-04-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_aggr.adb (Init_Stored_Discriminants,\n\tInit_Visible_Discriminants): New procedures, subsidiary of\n\tBuild_Record_Aggr_Code, to handle properly the construction\n\tof aggregates for a derived type that constrains some parent\n\tdiscriminants and renames others.\n\nFrom-SVN: r235255", "tree": {"sha": "f9d2333ed38e1afe8025fbd461b08bf4fa29ebd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9d2333ed38e1afe8025fbd461b08bf4fa29ebd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71129dded17e960ee8fdfa2397e1eadee2568129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71129dded17e960ee8fdfa2397e1eadee2568129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71129dded17e960ee8fdfa2397e1eadee2568129", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71129dded17e960ee8fdfa2397e1eadee2568129/comments", "author": null, "committer": null, "parents": [{"sha": "5c63aafa2e9b9854ee03481d33b8cc009c818e4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c63aafa2e9b9854ee03481d33b8cc009c818e4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c63aafa2e9b9854ee03481d33b8cc009c818e4e"}], "stats": {"total": 207, "additions": 139, "deletions": 68}, "files": [{"sha": "16b6a580c2e0232580999e731b86c053909f7dd5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71129dded17e960ee8fdfa2397e1eadee2568129/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71129dded17e960ee8fdfa2397e1eadee2568129/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=71129dded17e960ee8fdfa2397e1eadee2568129", "patch": "@@ -1,3 +1,17 @@\n+2016-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_attr.ads Add new table Universal_Type_Attribute.\n+\t* sem_util.adb (Yields_Universal_Type): Use a table lookup when\n+\tchecking attributes.\n+\n+2016-04-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Init_Stored_Discriminants,\n+\tInit_Visible_Discriminants): New procedures, subsidiary of\n+\tBuild_Record_Aggr_Code, to handle properly the construction\n+\tof aggregates for a derived type that constrains some parent\n+\tdiscriminants and renames others.\n+\n 2016-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch12.adb (Qualify_Universal_Operands): New routine."}, {"sha": "c7a9a97e8e8aa488370e32ebec0472205c0b77b9", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 86, "deletions": 32, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71129dded17e960ee8fdfa2397e1eadee2568129/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71129dded17e960ee8fdfa2397e1eadee2568129/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=71129dded17e960ee8fdfa2397e1eadee2568129", "patch": "@@ -1879,17 +1879,31 @@ package body Exp_Aggr is\n       --  Returns the first discriminant association in the constraint\n       --  associated with T, if any, otherwise returns Empty.\n \n+      function Get_Explicit_Discriminant_Value (D : Entity_Id) return Node_Id;\n+      --  If the ancestor part is an unconstrained type and further ancestors\n+      --  do not provide discriminants for it, check aggregate components for\n+      --  values of the discriminants.\n+\n       procedure Init_Hidden_Discriminants (Typ : Entity_Id; List : List_Id);\n       --  If Typ is derived, and constrains discriminants of the parent type,\n       --  these discriminants are not components of the aggregate, and must be\n       --  initialized. The assignments are appended to List. The same is done\n       --  if Typ derives fron an already constrained subtype of a discriminated\n       --  parent type.\n \n-      function Get_Explicit_Discriminant_Value (D : Entity_Id) return Node_Id;\n-      --  If the ancestor part is an unconstrained type and further ancestors\n-      --  do not provide discriminants for it, check aggregate components for\n-      --  values of the discriminants.\n+      procedure Init_Stored_Discriminants;\n+      --  If the type is derived and has inherited discriminants, generate\n+      --  explicit assignments for each, using the store constraint of the\n+      --  type. Note that both visible and stored discriminants must be\n+      --  initialized in case the derived type has some renamed and some\n+      --  constrained discriminants.\n+\n+      procedure Init_Visible_Discriminants;\n+      --  If type has discriminants, retrieve their values from aggregate,\n+      --  and generate explicit assignments for each. This does not include\n+      --  discriminants inherited from ancestor, which are handled above.\n+      --  The type of the aggregate is a subtype created ealier using the\n+      --  given values of the discriminant components of the aggregate.\n \n       function Is_Int_Range_Bounds (Bounds : Node_Id) return Boolean;\n       --  Check whether Bounds is a range node and its lower and higher bounds\n@@ -2279,6 +2293,70 @@ package body Exp_Aggr is\n          end loop;\n       end Init_Hidden_Discriminants;\n \n+      --------------------------------\n+      -- Init_Visible_Discriminants --\n+      --------------------------------\n+\n+      procedure Init_Visible_Discriminants is\n+         Discriminant       : Entity_Id;\n+         Discriminant_Value : Node_Id;\n+\n+      begin\n+         Discriminant := First_Discriminant (Typ);\n+         while Present (Discriminant) loop\n+            Comp_Expr :=\n+              Make_Selected_Component (Loc,\n+                Prefix        => New_Copy_Tree (Target),\n+                Selector_Name => New_Occurrence_Of (Discriminant, Loc));\n+\n+            Discriminant_Value :=\n+              Get_Discriminant_Value\n+                (Discriminant, Typ, Discriminant_Constraint (N_Typ));\n+\n+            Instr :=\n+              Make_OK_Assignment_Statement (Loc,\n+                Name       => Comp_Expr,\n+                Expression => New_Copy_Tree (Discriminant_Value));\n+\n+            Set_No_Ctrl_Actions (Instr);\n+            Append_To (L, Instr);\n+\n+            Next_Discriminant (Discriminant);\n+         end loop;\n+      end Init_Visible_Discriminants;\n+\n+      -------------------------------\n+      -- Init_Stored_Discriminants --\n+      -------------------------------\n+\n+      procedure Init_Stored_Discriminants is\n+         Discriminant       : Entity_Id;\n+         Discriminant_Value : Node_Id;\n+\n+      begin\n+         Discriminant := First_Stored_Discriminant (Typ);\n+         while Present (Discriminant) loop\n+            Comp_Expr :=\n+              Make_Selected_Component (Loc,\n+                Prefix        => New_Copy_Tree (Target),\n+                Selector_Name => New_Occurrence_Of (Discriminant, Loc));\n+\n+            Discriminant_Value :=\n+              Get_Discriminant_Value\n+                (Discriminant, N_Typ, Discriminant_Constraint (N_Typ));\n+\n+            Instr :=\n+              Make_OK_Assignment_Statement (Loc,\n+                Name       => Comp_Expr,\n+                Expression => New_Copy_Tree (Discriminant_Value));\n+\n+            Set_No_Ctrl_Actions (Instr);\n+            Append_To (L, Instr);\n+\n+            Next_Stored_Discriminant (Discriminant);\n+         end loop;\n+      end Init_Stored_Discriminants;\n+\n       -------------------------\n       -- Is_Int_Range_Bounds --\n       -------------------------\n@@ -2681,35 +2759,11 @@ package body Exp_Aggr is\n \n             --  Generate discriminant init values for the visible discriminants\n \n-            declare\n-               Discriminant : Entity_Id;\n-               Discriminant_Value : Node_Id;\n-\n-            begin\n-               Discriminant := First_Stored_Discriminant (Typ);\n-               while Present (Discriminant) loop\n-                  Comp_Expr :=\n-                    Make_Selected_Component (Loc,\n-                      Prefix        => New_Copy_Tree (Target),\n-                      Selector_Name => New_Occurrence_Of (Discriminant, Loc));\n-\n-                  Discriminant_Value :=\n-                    Get_Discriminant_Value\n-                      (Discriminant,\n-                       N_Typ,\n-                       Discriminant_Constraint (N_Typ));\n-\n-                  Instr :=\n-                    Make_OK_Assignment_Statement (Loc,\n-                      Name       => Comp_Expr,\n-                      Expression => New_Copy_Tree (Discriminant_Value));\n+            Init_Visible_Discriminants;\n \n-                  Set_No_Ctrl_Actions (Instr);\n-                  Append_To (L, Instr);\n-\n-                  Next_Stored_Discriminant (Discriminant);\n-               end loop;\n-            end;\n+            if Is_Derived_Type (N_Typ) then\n+               Init_Stored_Discriminants;\n+            end if;\n          end if;\n       end if;\n "}, {"sha": "b3c30183883c82a852192303a7a7d10247a034b6", "filename": "gcc/ada/sem_attr.ads", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71129dded17e960ee8fdfa2397e1eadee2568129/gcc%2Fada%2Fsem_attr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71129dded17e960ee8fdfa2397e1eadee2568129/gcc%2Fada%2Fsem_attr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.ads?ref=71129dded17e960ee8fdfa2397e1eadee2568129", "patch": "@@ -605,6 +605,44 @@ package Sem_Attr is\n \n       others => False);\n \n+   --  The following table lists all attributes that yield a result of a\n+   --  universal type.\n+\n+   Universal_Type_Attribute : constant array (Attribute_Id) of Boolean :=\n+     (Attribute_Aft                          => True,\n+      Attribute_Alignment                    => True,\n+      Attribute_Component_Size               => True,\n+      Attribute_Count                        => True,\n+      Attribute_Delta                        => True,\n+      Attribute_Digits                       => True,\n+      Attribute_Exponent                     => True,\n+      Attribute_First_Bit                    => True,\n+      Attribute_Fore                         => True,\n+      Attribute_Last_Bit                     => True,\n+      Attribute_Length                       => True,\n+      Attribute_Machine_Emax                 => True,\n+      Attribute_Machine_Emin                 => True,\n+      Attribute_Machine_Mantissa             => True,\n+      Attribute_Machine_Radix                => True,\n+      Attribute_Max_Alignment_For_Allocation => True,\n+      Attribute_Max_Size_In_Storage_Elements => True,\n+      Attribute_Model_Emin                   => True,\n+      Attribute_Model_Epsilon                => True,\n+      Attribute_Model_Mantissa               => True,\n+      Attribute_Model_Small                  => True,\n+      Attribute_Modulus                      => True,\n+      Attribute_Pos                          => True,\n+      Attribute_Position                     => True,\n+      Attribute_Safe_First                   => True,\n+      Attribute_Safe_Last                    => True,\n+      Attribute_Scale                        => True,\n+      Attribute_Size                         => True,\n+      Attribute_Small                        => True,\n+      Attribute_Wide_Wide_Width              => True,\n+      Attribute_Wide_Width                   => True,\n+      Attribute_Width                        => True,\n+      others                                 => False);\n+\n    -----------------\n    -- Subprograms --\n    -----------------"}, {"sha": "5f2722d06dfe323600d2fd2792402d3d2f1d5080", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71129dded17e960ee8fdfa2397e1eadee2568129/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71129dded17e960ee8fdfa2397e1eadee2568129/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=71129dded17e960ee8fdfa2397e1eadee2568129", "patch": "@@ -20962,8 +20962,6 @@ package body Sem_Util is\n    ---------------------------\n \n    function Yields_Universal_Type (N : Node_Id) return Boolean is\n-      Nam : Name_Id;\n-\n    begin\n       --  Integer and real literals are of a universal type\n \n@@ -20973,41 +20971,8 @@ package body Sem_Util is\n       --  The values of certain attributes are of a universal type\n \n       elsif Nkind (N) = N_Attribute_Reference then\n-         Nam := Attribute_Name (N);\n-\n          return\n-           Nam = Name_Aft\n-             or else Nam = Name_Alignment\n-             or else Nam = Name_Component_Size\n-             or else Nam = Name_Count\n-             or else Nam = Name_Delta\n-             or else Nam = Name_Digits\n-             or else Nam = Name_Exponent\n-             or else Nam = Name_First_Bit\n-             or else Nam = Name_Fore\n-             or else Nam = Name_Last_Bit\n-             or else Nam = Name_Length\n-             or else Nam = Name_Machine_Emax\n-             or else Nam = Name_Machine_Emin\n-             or else Nam = Name_Machine_Mantissa\n-             or else Nam = Name_Machine_Radix\n-             or else Nam = Name_Max_Alignment_For_Allocation\n-             or else Nam = Name_Max_Size_In_Storage_Elements\n-             or else Nam = Name_Model_Emin\n-             or else Nam = Name_Model_Epsilon\n-             or else Nam = Name_Model_Mantissa\n-             or else Nam = Name_Model_Small\n-             or else Nam = Name_Modulus\n-             or else Nam = Name_Pos\n-             or else Nam = Name_Position\n-             or else Nam = Name_Safe_First\n-             or else Nam = Name_Safe_Last\n-             or else Nam = Name_Scale\n-             or else Nam = Name_Size\n-             or else Nam = Name_Small\n-             or else Nam = Name_Wide_Wide_Width\n-             or else Nam = Name_Wide_Width\n-             or else Nam = Name_Width;\n+           Universal_Type_Attribute (Get_Attribute_Id (Attribute_Name (N)));\n \n       --  ??? There are possibly other cases to consider\n "}]}