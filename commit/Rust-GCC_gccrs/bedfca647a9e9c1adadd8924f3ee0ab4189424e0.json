{"sha": "bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "node_id": "C_kwDOANBUbNoAKGJlZGZjYTY0N2E5ZTljMWFkYWRkODkyNGYzZWUwYWI0MTg5NDI0ZTA", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-09-02T22:29:33Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-09-02T22:29:33Z"}, "message": "c/c++: new warning: -Wxor-used-as-pow [PR90885]\n\nPR c/90885 notes various places in real-world code where people have\nwritten C/C++ code that uses ^ (exclusive or) where presumbably they\nmeant exponentiation.\n\nFor example\n  https://codesearch.isocpp.org/cgi-bin/cgi_ppsearch?q=2%5E32&search=Search\ncurrently finds 11 places using \"2^32\", and all of them appear to be\nplaces where the user means 2 to the power of 32, rather than 2\nexclusive-orred with 32 (which is 34).\n\nThis patch adds a new -Wxor-used-as-pow warning to the C and C++\nfrontends to complain about ^ when the left-hand side is the decimal\nconstant 2 or the decimal constant 10.\n\nThis is the same name as the corresponding clang warning:\n  https://clang.llvm.org/docs/DiagnosticsReference.html#wxor-used-as-pow\n\nAs per the clang warning, the warning suggests converting the left-hand\nside to a hexadecimal constant if you really mean xor, which suppresses\nthe warning (though this patch implements a fix-it hint for that, whereas\nthe clang implementation only has a fix-it hint for the initial\nsuggestion of exponentiation).\n\nI initially tried implementing this without checking for decimals, but\nthis version had lots of false positives.  Checking for decimals\nrequires extending the lexer to capture whether or not a CPP_NUMBER\ntoken was decimal.  I added a new DECIMAL_INT flag to cpplib.h for this.\nUnfortunately, c_token and cp_tokens both have only an unsigned char for\ntheir flags (as captured by c_lex_with_flags), whereas this would add\nthe 12th flag to cpp_tokens.  Of the first 8 flags, all but BOL are used\nin the C or C++ frontends, but BOL is not, so I moved that to a higher\nposition, using its old value for the new DECIMAL_INT flag, so that it\nis representable within an unsigned char.\n\nExample output:\n\ndemo.c:5:13: warning: result of '2^8' is 10; did you mean '1 << 8' (256)? [-Wxor-used-as-pow]\n    5 | int t2_8 = 2^8;\n      |             ^\n      |            --\n      |            1<<\ndemo.c:5:12: note: you can silence this warning by using a hexadecimal constant (0x2 rather than 2)\n    5 | int t2_8 = 2^8;\n      |            ^\n      |            0x2\ndemo.c:21:15: warning: result of '10^6' is 12; did you mean '1e6'? [-Wxor-used-as-pow]\n   21 | int t10_6 = 10^6;\n      |               ^\n      |             ---\n      |             1e\ndemo.c:21:13: note: you can silence this warning by using a hexadecimal constant (0xa rather than 10)\n   21 | int t10_6 = 10^6;\n      |             ^~\n      |             0xa\n\ngcc/c-family/ChangeLog:\n\tPR c/90885\n\t* c-common.h (check_for_xor_used_as_pow): New decl.\n\t* c-lex.cc (c_lex_with_flags): Add DECIMAL_INT to flags as appropriate.\n\t* c-warn.cc (check_for_xor_used_as_pow): New.\n\t* c.opt (Wxor-used-as-pow): New.\n\ngcc/c/ChangeLog:\n\tPR c/90885\n\t* c-parser.cc (c_parser_string_literal): Clear ret.m_decimal.\n\t(c_parser_expr_no_commas): Likewise.\n\t(c_parser_conditional_expression): Likewise.\n\t(c_parser_binary_expression): Clear m_decimal when popping the\n\tstack.\n\t(c_parser_unary_expression): Clear ret.m_decimal.\n\t(c_parser_has_attribute_expression): Likewise for result.\n\t(c_parser_predefined_identifier): Likewise for expr.\n\t(c_parser_postfix_expression): Likewise for expr.\n\tSet expr.m_decimal when handling a CPP_NUMBER that was a decimal\n\ttoken.\n\t* c-tree.h (c_expr::m_decimal): New bitfield.\n\t* c-typeck.cc (parser_build_binary_op): Clear result.m_decimal.\n\t(parser_build_binary_op): Call check_for_xor_used_as_pow.\n\ngcc/cp/ChangeLog:\n\tPR c/90885\n\t* cp-tree.h (class cp_expr): Add bitfield m_decimal.  Clear it in\n\texisting ctors.  Add ctor that allows specifying its value.\n\t(cp_expr::decimal_p): New accessor.\n\t* parser.cc (cp_parser_expression_stack_entry::flags): New field.\n\t(cp_parser_primary_expression): Set m_decimal of cp_expr when\n\thandling numbers.\n\t(cp_parser_binary_expression): Extract flags from token when\n\tpopulating stack.  Call check_for_xor_used_as_pow.\n\ngcc/ChangeLog:\n\tPR c/90885\n\t* doc/invoke.texi (Warning Options): Add -Wxor-used-as-pow.\n\ngcc/testsuite/ChangeLog:\n\tPR c/90885\n\t* c-c++-common/Wxor-used-as-pow-1.c: New test.\n\t* c-c++-common/Wxor-used-as-pow-fixits.c: New test.\n\t* g++.dg/parse/expr3.C: Convert 2 to 0x2 to suppress\n\t-Wxor-used-as-pow.\n\t* g++.dg/warn/Wparentheses-10.C: Likewise.\n\t* g++.dg/warn/Wparentheses-18.C: Likewise.\n\t* g++.dg/warn/Wparentheses-19.C: Likewise.\n\t* g++.dg/warn/Wparentheses-9.C: Likewise.\n\t* g++.dg/warn/Wxor-used-as-pow-named-op.C: New test.\n\t* gcc.dg/Wparentheses-6.c: Convert 2 to 0x2 to suppress\n\t-Wxor-used-as-pow.\n\t* gcc.dg/Wparentheses-7.c: Likewise.\n\t* gcc.dg/precedence-1.c: Likewise.\n\nlibcpp/ChangeLog:\n\tPR c/90885\n\t* include/cpplib.h (BOL): Move macro to 1 << 12 since it is\n\tnot used by C/C++'s unsigned char token flags.\n\t(DECIMAL_INT): New, using 1 << 6, so that it is visible as\n\tpart of C/C++'s 8 bits of token flags.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "53ff619d09daab55fcefc24ccc2d6011fdf6b632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53ff619d09daab55fcefc24ccc2d6011fdf6b632"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ad6f8415171798adaff5787400505ce9882144", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ad6f8415171798adaff5787400505ce9882144", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5ad6f8415171798adaff5787400505ce9882144"}], "stats": {"total": 338, "additions": 304, "deletions": 34}, "files": [{"sha": "ce971a29b5dfb74c911b06b71447f57c54ba672a", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -1485,6 +1485,10 @@ extern tree do_warn_duplicated_branches_r (tree *, int *, void *);\n extern void warn_for_multistatement_macros (location_t, location_t,\n \t\t\t\t\t    location_t, enum rid);\n \n+extern void check_for_xor_used_as_pow (location_t lhs_loc, tree lhs_val,\n+\t\t\t\t       location_t operator_loc,\n+\t\t\t\t       tree rhs_val);\n+\n /* In c-attribs.cc.  */\n extern bool attribute_takes_identifier_p (const_tree);\n extern tree handle_deprecated_attribute (tree *, tree, tree, int, bool *);"}, {"sha": "110d029ee0c44cec53fe25ab3e103622416a3813", "filename": "gcc/c-family/c-lex.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fc-family%2Fc-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fc-family%2Fc-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.cc?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -511,7 +511,11 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n \t    /* C++ uses '0' to mark virtual functions as pure.\n \t       Set PURE_ZERO to pass this information to the C++ parser.  */\n \t    if (tok->val.str.len == 1 && *tok->val.str.text == '0')\n-\t      add_flags = PURE_ZERO;\n+\t      add_flags = PURE_ZERO | DECIMAL_INT;\n+\t    else if ((flags & CPP_N_INTEGER) && (flags & CPP_N_DECIMAL))\n+\t      /* -Wxor-used-as-pow is only active for LHS of ^ expressed\n+\t\t as a decimal integer. */\n+\t      add_flags = DECIMAL_INT;\n \t    *value = interpret_integer (tok, flags, &overflow);\n \t    break;\n "}, {"sha": "ed79cc3ca40ac344d449f98d0e2dc77b8be92e5d", "filename": "gcc/c-family/c-warn.cc", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fc-family%2Fc-warn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fc-family%2Fc-warn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.cc?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -3799,3 +3799,97 @@ do_warn_array_compare (location_t location, tree_code code, tree op0, tree op1)\n \t\top0, op_symbol_code (code), op1);\n     }\n }\n+\n+/* Given LHS_VAL ^ RHS_VAL, where LHS_LOC is the location of the LHS and\n+   OPERATOR_LOC is the location of the ^, complain with -Wxor-used-as-pow\n+   if it looks like the user meant exponentiation rather than xor.  */\n+\n+void\n+check_for_xor_used_as_pow (location_t lhs_loc, tree lhs_val,\n+\t\t\t   location_t operator_loc,\n+\t\t\t   tree rhs_val)\n+{\n+  /* Only complain if both args are non-negative integer constants.  */\n+  if (!(TREE_CODE (lhs_val) == INTEGER_CST\n+\t&& tree_int_cst_sgn (lhs_val) >= 0))\n+    return;\n+  if (!(TREE_CODE (rhs_val) == INTEGER_CST\n+\t&& tree_int_cst_sgn (rhs_val) >= 0))\n+    return;\n+\n+  /* Only complain if the LHS is 2 or 10.  */\n+  unsigned HOST_WIDE_INT lhs_uhwi = tree_to_uhwi (lhs_val);\n+  if (lhs_uhwi != 2 && lhs_uhwi != 10)\n+    return;\n+\n+  unsigned HOST_WIDE_INT rhs_uhwi = tree_to_uhwi (rhs_val);\n+  unsigned HOST_WIDE_INT xor_result = lhs_uhwi ^ rhs_uhwi;\n+  binary_op_rich_location loc (operator_loc,\n+\t\t\t       lhs_val, rhs_val, false);\n+\n+  /* If we issue fix-it hints with the warning then we will also issue a\n+     note suggesting how to suppress the warning with a different change.\n+     These proposed changes are incompatible.  */\n+  loc.fixits_cannot_be_auto_applied ();\n+\n+  auto_diagnostic_group d;\n+  bool warned = false;\n+  if (lhs_uhwi == 2)\n+    {\n+      /* Would exponentiation fit in int, in long long, or not at all?  */\n+      if (rhs_uhwi < (INT_TYPE_SIZE - 1))\n+\t{\n+\t  unsigned HOST_WIDE_INT suggested_result = 1 << rhs_uhwi;\n+\t  loc.add_fixit_replace (lhs_loc, \"1\");\n+\t  loc.add_fixit_replace (operator_loc, \"<<\");\n+\t  warned = warning_at (&loc, OPT_Wxor_used_as_pow,\n+\t\t\t       \"result of %<%wu^%wu%> is %wu;\"\n+\t\t\t       \" did you mean %<1 << %wu%> (%wu)?\",\n+\t\t\t       lhs_uhwi, rhs_uhwi, xor_result,\n+\t\t\t       rhs_uhwi, suggested_result);\n+\t}\n+      else if (rhs_uhwi < (LONG_LONG_TYPE_SIZE - 1))\n+\t{\n+\t  loc.add_fixit_replace (lhs_loc, \"1LL\");\n+\t  loc.add_fixit_replace (operator_loc, \"<<\");\n+\t  warned = warning_at (&loc, OPT_Wxor_used_as_pow,\n+\t\t\t       \"result of %<%wu^%wu%> is %wu;\"\n+\t\t\t       \" did you mean %<1LL << %wu%>?\",\n+\t\t\t       lhs_uhwi, rhs_uhwi, xor_result,\n+\t\t\t       rhs_uhwi);\n+\t}\n+      else if (rhs_uhwi <= LONG_LONG_TYPE_SIZE)\n+\twarned = warning_at (&loc, OPT_Wxor_used_as_pow,\n+\t\t\t     \"result of %<%wu^%wu%> is %wu;\"\n+\t\t\t     \" did you mean exponentiation?\",\n+\t\t\t     lhs_uhwi, rhs_uhwi, xor_result);\n+      /* Otherwise assume it's an xor.  */\n+    }\n+  else\n+    {\n+      gcc_assert (lhs_uhwi == 10);\n+      loc.add_fixit_replace (lhs_loc, \"1\");\n+      loc.add_fixit_replace (operator_loc, \"e\");\n+      warned = warning_at (&loc, OPT_Wxor_used_as_pow,\n+\t\t\t   \"result of %<%wu^%wu%> is %wu;\"\n+\t\t\t   \" did you mean %<1e%wu%>?\",\n+\t\t\t   lhs_uhwi, rhs_uhwi, xor_result,\n+\t\t\t   rhs_uhwi);\n+    }\n+  if (warned)\n+    {\n+      gcc_rich_location note_loc (lhs_loc);\n+      if (lhs_uhwi == 2)\n+\tnote_loc.add_fixit_replace (lhs_loc, \"0x2\");\n+      else\n+\t{\n+\t  gcc_assert (lhs_uhwi == 10);\n+\t  note_loc.add_fixit_replace (lhs_loc, \"0xa\");\n+\t}\n+      note_loc.fixits_cannot_be_auto_applied ();\n+      inform (&note_loc,\n+\t      \"you can silence this warning by using a hexadecimal constant\"\n+\t      \" (%wx rather than %wd)\",\n+\t      lhs_uhwi, lhs_uhwi);\n+    }\n+}"}, {"sha": "4515664aa5902bc4343ce91825f781299b7a4c31", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -1447,6 +1447,10 @@ Wwrite-strings\n C ObjC C++ ObjC++ Var(warn_write_strings) Warning\n In C++, nonzero means warn about deprecated conversion from string literals to 'char *'.  In C, similar warning, except that the conversion is of course not deprecated by the ISO C standard.\n \n+Wxor-used-as-pow\n+C ObjC C++ ObjC++ Var(warn_xor_used_as_pow) Warning Init(1)\n+Warn about xor operators where it appears the user meant exponentiation.\n+\n Wzero-as-null-pointer-constant\n C++ ObjC++ Var(warn_zero_as_null_pointer_constant) Warning\n Warn when a literal '0' is used as null pointer."}, {"sha": "e0188cc49118695735dd86792c2c26d420463e63", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -7531,6 +7531,7 @@ c_parser_string_literal (c_parser *parser, bool translate, bool wide_ok)\n   ret.original_code = STRING_CST;\n   ret.original_type = NULL_TREE;\n   set_c_expr_source_range (&ret, get_range_from_loc (line_table, loc));\n+  ret.m_decimal = 0;\n   parser->seen_string_literal = true;\n   return ret;\n }\n@@ -7610,6 +7611,7 @@ c_parser_expr_no_commas (c_parser *parser, struct c_expr *after,\n   ret.value = build_modify_expr (op_location, lhs.value, lhs.original_type,\n \t\t\t\t code, exp_location, rhs.value,\n \t\t\t\t rhs.original_type);\n+  ret.m_decimal = 0;\n   set_c_expr_source_range (&ret, lhs.get_start (), rhs.get_finish ());\n   if (code == NOP_EXPR)\n     ret.original_code = MODIFY_EXPR;\n@@ -7747,6 +7749,7 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after,\n \t\t\t   : NULL);\n     }\n   set_c_expr_source_range (&ret, start, exp2.get_finish ());\n+  ret.m_decimal = 0;\n   return ret;\n }\n \n@@ -7936,6 +7939,7 @@ c_parser_binary_expression (c_parser *parser, struct c_expr *after,\n \tTREE_OPERAND (t, 0) = stack[0].expr.value;\t\t\t      \\\n \tTREE_OPERAND (t, 1) = stack[1].expr.value;\t\t\t      \\\n \tstack[0].expr.value = t;\t\t\t\t\t      \\\n+\tstack[0].expr.m_decimal = 0;\t\t\t\t\t      \\\n       }\t\t\t\t\t\t\t\t\t      \\\n     else\t\t\t\t\t\t\t\t      \\\n       stack[sp - 1].expr = parser_build_binary_op (stack[sp].loc,\t      \\\n@@ -8222,6 +8226,7 @@ c_parser_unary_expression (c_parser *parser)\n \tret.value = build_indirect_ref (combined_loc, op.value, RO_UNARY_STAR);\n \tret.src_range.m_start = op_loc;\n \tret.src_range.m_finish = finish;\n+\tret.m_decimal = 0;\n \treturn ret;\n       }\n     case CPP_PLUS:\n@@ -8595,6 +8600,7 @@ c_parser_has_attribute_expression (c_parser *parser)\n     result.value =  boolean_false_node;\n \n   set_c_expr_source_range (&result, start, finish);\n+  result.m_decimal = 0;\n   return result;\n }\n \n@@ -8960,6 +8966,7 @@ c_parser_predefined_identifier (c_parser *parser)\n   expr.value = fname_decl (loc, c_parser_peek_token (parser)->keyword,\n \t\t\t   c_parser_peek_token (parser)->value);\n   set_c_expr_source_range (&expr, loc, loc);\n+  expr.m_decimal = 0;\n   c_parser_consume_token (parser);\n   return expr;\n }\n@@ -9038,12 +9045,14 @@ c_parser_postfix_expression (c_parser *parser)\n   source_range tok_range = c_parser_peek_token (parser)->get_range ();\n   expr.original_code = ERROR_MARK;\n   expr.original_type = NULL;\n+  expr.m_decimal = 0;\n   switch (c_parser_peek_token (parser)->type)\n     {\n     case CPP_NUMBER:\n       expr.value = c_parser_peek_token (parser)->value;\n       set_c_expr_source_range (&expr, tok_range);\n       loc = c_parser_peek_token (parser)->location;\n+      expr.m_decimal = c_parser_peek_token (parser)->flags & DECIMAL_INT;\n       c_parser_consume_token (parser);\n       if (TREE_CODE (expr.value) == FIXED_CST\n \t  && !targetm.fixed_point_supported_p ())"}, {"sha": "b4231a17859804a4ddf74e58d10a4a0f111740aa", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -147,6 +147,9 @@ struct c_expr\n      etc), so we stash a copy here.  */\n   source_range src_range;\n \n+  /* True if this was directly from a decimal constant token.  */\n+  bool m_decimal : 1;\n+\n   /* Access to the first and last locations within the source spelling\n      of this expression.  */\n   location_t get_start () const { return src_range.m_start; }"}, {"sha": "5cb1336513050a8ccc81e719d3335cdcc14db6a0", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -3829,6 +3829,7 @@ parser_build_binary_op (location_t location, enum tree_code code,\n \t\t\tstruct c_expr arg1, struct c_expr arg2)\n {\n   struct c_expr result;\n+  result.m_decimal = 0;\n \n   enum tree_code code1 = arg1.original_code;\n   enum tree_code code2 = arg2.original_code;\n@@ -3986,6 +3987,14 @@ parser_build_binary_op (location_t location, enum tree_code code,\n \t\t\"comparison between %qT and %qT\",\n \t\ttype1, type2);\n \n+  if (warn_xor_used_as_pow\n+      && code == BIT_XOR_EXPR\n+      && arg1.m_decimal\n+      && arg2.m_decimal)\n+    check_for_xor_used_as_pow (arg1.get_location (), arg1.value,\n+\t\t\t       location,\n+\t\t\t       arg2.value);\n+\n   return result;\n }\n \f"}, {"sha": "7b28405c3acae3385a887ebd0e74d8c24a8cc4d7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -54,13 +54,23 @@ class cp_expr\n {\n public:\n   cp_expr () :\n-    m_value (NULL), m_loc (UNKNOWN_LOCATION) {}\n+    m_value (NULL), m_loc (UNKNOWN_LOCATION),\n+    m_decimal (false)\n+  {}\n \n   cp_expr (tree value) :\n-    m_value (value), m_loc (cp_expr_location (m_value)) {}\n+    m_value (value), m_loc (cp_expr_location (m_value)),\n+    m_decimal (false)\n+  {}\n \n   cp_expr (tree value, location_t loc):\n-    m_value (value), m_loc (loc)\n+    m_value (value), m_loc (loc), m_decimal (false)\n+  {\n+    protected_set_expr_location (value, loc);\n+  }\n+\n+  cp_expr (tree value, location_t loc, bool decimal):\n+    m_value (value), m_loc (loc), m_decimal (decimal)\n   {\n     protected_set_expr_location (value, loc);\n   }\n@@ -102,9 +112,12 @@ class cp_expr\n     return *this;\n   }\n \n+  bool decimal_p () const { return m_decimal; }\n+\n  private:\n   tree m_value;\n   location_t m_loc;\n+  bool m_decimal : 1;\n };\n \n inline bool"}, {"sha": "13435d272ecc3078c39a35c0ef8819d7dd79883c", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -2069,6 +2069,8 @@ struct cp_parser_expression_stack_entry\n   enum cp_parser_prec prec;\n   /* Location of the binary operation we are parsing.  */\n   location_t loc;\n+  /* Flags from the operator token.  */\n+  unsigned char flags;\n };\n \n /* The stack for storing partial expressions.  We only need NUM_PREC_VALUES\n@@ -5614,7 +5616,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \t  if (!cast_p)\n \t    cp_parser_non_integral_constant_expression (parser, NIC_FLOAT);\n \t}\n-      return (cp_expr (token->u.value, token->location)\n+      return (cp_expr (token->u.value, token->location, token->flags & DECIMAL_INT)\n \t      .maybe_add_location_wrapper ());\n \n     case CPP_CHAR_USERDEF:\n@@ -10160,6 +10162,7 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n      get_rhs:\n       current.tree_type = binops_by_token[token->type].tree_type;\n       current.loc = token->location;\n+      current.flags = token->flags;\n \n       /* We used the operator token.  */\n       cp_lexer_consume_token (parser->lexer);\n@@ -10244,6 +10247,18 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n \twarn_logical_not_parentheses (current.loc, current.tree_type,\n \t\t\t\t      current.lhs, maybe_constant_value (rhs));\n \n+      if (warn_xor_used_as_pow\n+\t  && current.tree_type == BIT_XOR_EXPR\n+\t  /* Don't warn for named \"xor\" (as opposed to '^').  */\n+\t  && !(current.flags & NAMED_OP)\n+\t  && current.lhs.decimal_p ()\n+\t  && rhs.decimal_p ())\n+\tcheck_for_xor_used_as_pow\n+\t  (current.lhs.get_location (),\n+\t   tree_strip_any_location_wrapper (current.lhs),\n+\t   current.loc,\n+\t   tree_strip_any_location_wrapper (rhs));\n+\n       overload = NULL;\n \n       location_t combined_loc = make_location (current.loc,"}, {"sha": "dd3302fcd15971e58537cc378db87f52449b5075", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -414,6 +414,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wvector-operation-performance @gol\n -Wvla  -Wvla-larger-than=@var{byte-size}  -Wno-vla-larger-than @gol\n -Wvolatile-register-var  -Wwrite-strings @gol\n+-Wxor-used-as-pow @gol\n -Wzero-length-bounds}\n \n @item Static Analyzer Options\n@@ -9686,6 +9687,20 @@ modifier does not inhibit all optimizations that may eliminate reads\n and/or writes to register variables.  This warning is enabled by\n @option{-Wall}.\n \n+@item -Wxor-used-as-pow @r{(C, C++, Objective-C and Objective-C++ only)}\n+@opindex Wxor-used-as-pow\n+@opindex Wno-xor-used-as-pow\n+Warn about uses of @code{^}, the exclusive or operator, where it appears\n+the user meant exponentiation.  Specifically, the warning occurs when the\n+left-hand side is the decimal constant 2 or 10 and the right-hand side\n+is also a decimal constant.\n+\n+In C and C++, @code{^} means exclusive or, whereas in some other languages\n+(e.g. TeX and some versions of BASIC) it means exponentiation.\n+\n+This warning is enabled by default.  It can be silenced by converting one\n+of the operands to hexadecimal.\n+\n @item -Wdisabled-optimization\n @opindex Wdisabled-optimization\n @opindex Wno-disabled-optimization"}, {"sha": "962902c3a054d25051aa7b063bfadef4cb8488a0", "filename": "gcc/testsuite/c-c++-common/Wxor-used-as-pow-1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-1.c?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -0,0 +1,57 @@\n+/* The precise output depends of sizeof(int) and sizeof(long long), so\n+   filter by target.  */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+\n+/* Apparent uses of ^ for powers of 2.  */\n+\n+short t2_16 = 2^16; /* { dg-warning \"result of '2\\\\^16' is 18; did you mean '1 << 16' \\\\(65536\\\\)\\\\? \\\\\\[-Wxor-used-as-pow\\\\\\]\" } */\n+int t2_17 = 2^17; /* { dg-warning \"result of '2\\\\^17' is 19; did you mean '1 << 17' \\\\(131072\\\\)\\\\?\" } */\n+int t2_30 = 2^30; /* { dg-warning \"result of '2\\\\^30' is 28; did you mean '1 << 30' \\\\(1073741824\\\\)\\\\?\" } */\n+\n+/* Should be 1LL at 31 and above, due to overflow.  */\n+int t2_31 = 2^31; /* { dg-warning \"result of '2\\\\^31' is 29; did you mean '1LL << 31'\\\\?\" } */\n+int t2_32 = 2^32; /* { dg-warning \"result of '2\\\\^32' is 34; did you mean '1LL << 32'\\\\?\" } */\n+\n+long t2_63 = 2^63; /* { dg-warning \"result of '2\\\\^63' is 61; did you mean exponentiation\\\\?\" } */\n+long t2_64 = 2^64; /* { dg-warning \"result of '2\\\\^64' is 66; did you mean exponentiation\\\\?\" } */\n+\n+/* ...but don't warn when RHS is large enough.  */\n+long t2_65 = 2^65;\n+long t2_127 = 2^127;\n+long t2_128 = 2^128;\n+long t2_129 = 2^129;\n+\n+/* Verify that -Wxor-used-as-pow happens before folding.  */\n+long t2_32_m1  = ((2^32)-1); /* { dg-warning \"result of '2\\\\^32' is 34; did you mean '1LL << 32'\\\\?\" } */\n+\n+\n+/* Apparent uses of ^ for powers of 10.  */\n+\n+long t10_2 = 10^2; /* { dg-warning \"result of '10\\\\^2' is 8; did you mean '1e2'\\\\?\" } */\n+long t10_9 = 10^9; /* { dg-warning \"result of '10\\\\^9' is 3; did you mean '1e9'\\\\?\" } */\n+long t10_10 = 10^10; /* { dg-warning \"result of '10\\\\^10' is 0; did you mean '1e10'\\\\?\" } */\n+long t10_100 = 10^100; /* { dg-warning \"result of '10\\\\^100' is 110; did you mean '1e100'\\\\?\" } */\n+\n+/* Don't warn on negatives.  */\n+long tm2_2 = -2^2;\n+long t2_m2 = 2^-2;\n+long tm10_10 = -10^10;\n+long t10_m10 = 10^-10;\n+\n+/* If LHS is not 2 or 10, we shouldn't complain.  */\n+int t0_0 = 0 ^ 0;\n+int t6_7 = 6 ^ 7;\n+\n+/* Floating point is already covered by type-checking.  */\n+float f10_10 = 10.f^10; /* { dg-error \"invalid operands to binary \\\\^ \\\\(have 'float' and 'int'\\\\)\" \"\" { target c } } */\n+/* { dg-error \"invalid operands of types 'float' and 'int' to binary 'operator\\\\^'\" \"\" { target c++ } .-1 } */\n+\n+/* Don't complain if the LHS isn't literal decimal 2 or 10.  */\n+int t1p1_16 = (1 + 1) ^ 16;\n+int t5p5_6 = (5 + 5) ^ 6;\n+int h2_8 = 0x2 ^ 8;\n+int h10_3 = 0xa ^ 3;\n+\n+/* Don't complain if the RHS isn't literal decimal.  */\n+int t2_x16 = 2^0x10;\n+int h10_x3 = 10 ^ 0x3;"}, {"sha": "f612b761c30305bde7da3d533d63055888326f61", "filename": "gcc/testsuite/c-c++-common/Wxor-used-as-pow-fixits.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-fixits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-fixits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-fixits.c?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+\n+/* Test fixit hints for -Wxor-used-as-pow.  */\n+\n+int t2_8 = 2^8; /* { dg-line line_a } */\n+/* { dg-warning \"result of '2\\\\^8' is 10; did you mean '1 << 8' \\\\(256\\\\)\\\\?\" \"warn\" { target *-*-* } line_a } */\n+/* { dg-begin-multiline-output \"\" }\n+ int t2_8 = 2^8;\n+             ^\n+            --\n+            1<<\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-message \"you can silence this warning by using a hexadecimal constant \\\\(0x2 rather than 2\\\\)\" \"note\" { target *-*-* } line_a } */\n+/* { dg-begin-multiline-output \"\" }\n+ int t2_8 = 2^8;\n+            ^\n+            0x2\n+   { dg-end-multiline-output \"\" } */\n+\n+\n+int t10_6 = 10^6; /* { dg-line line_b } */\n+/* { dg-warning \"result of '10\\\\^6' is 12; did you mean '1e6'\\\\?\"  \"warn\" { target *-*-* } line_b } */\n+/* { dg-begin-multiline-output \"\" }\n+ int t10_6 = 10^6;\n+               ^\n+             ---\n+             1e\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-message \"you can silence this warning by using a hexadecimal constant \\\\(0xa rather than 10\\\\)\" \"note\" { target *-*-* } line_b } */\n+/* { dg-begin-multiline-output \"\" }\n+ int t10_6 = 10^6;\n+             ^~\n+             0xa\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "1e16673384389ba38b650a92252b3abe06a11418", "filename": "gcc/testsuite/g++.dg/parse/expr3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fexpr3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fexpr3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fexpr3.C?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -23,7 +23,7 @@\n \n test (||, &&, 1, 1, 0, 0)\n test (&&, |, 5, 1, 1, 19)\n-test (|, ^, 1, 2, 2, 1)\n+test (|, ^, 1, 2, 0x2, 1)\n test (^, &, 1, 3, 2, 6)\n test (&, ==, 1, 3, 2, 0)\n test (==, <, 2, 0, 0, 0)"}, {"sha": "a5d28efcc2e6fc4b510892fddd0bea40b73f666e", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-10.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-10.C?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -16,7 +16,7 @@ bar (int a, int b, int c)\n   foo (1 & (2 ^ c));\n   foo (1 & 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 & 2) ^ 3);\n-  foo (1 & (2 ^ 3));\n+  foo (1 & (0x2 ^ 3));\n   foo (a ^ b & c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((a ^ b) & c);\n   foo (a ^ (b & c));\n@@ -34,7 +34,7 @@ bar (int a, int b, int c)\n   foo (1 + (2 ^ c));\n   foo (1 + 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 + 2) ^ 3);\n-  foo (1 + (2 ^ 3));\n+  foo (1 + (0x2 ^ 3));\n   foo (a ^ b + c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((a ^ b) + c);\n   foo (a ^ (b + c));\n@@ -52,7 +52,7 @@ bar (int a, int b, int c)\n   foo (1 - (2 ^ c));\n   foo (1 - 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 - 2) ^ 3);\n-  foo (1 - (2 ^ 3));\n+  foo (1 - (0x2 ^ 3));\n   foo (a ^ b - c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((a ^ b) - c);\n   foo (a ^ (b - c));\n@@ -70,7 +70,7 @@ bar (int a, int b, int c)\n   foo (1 >= (2 ^ c));\n   foo (1 >= 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 >= 2) ^ 3);\n-  foo (1 >= (2 ^ 3));\n+  foo (1 >= (0x2 ^ 3));\n   foo (a ^ b >= c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((a ^ b) >= c);\n   foo (a ^ (b >= c));\n@@ -88,7 +88,7 @@ bar (int a, int b, int c)\n   foo (1 == (2 ^ c));\n   foo (1 == 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 == 2) ^ 3);\n-  foo (1 == (2 ^ 3));\n+  foo (1 == (0x2 ^ 3));\n   foo (a ^ b == c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((a ^ b) == c);\n   foo (a ^ (b == c));\n@@ -104,9 +104,9 @@ bar (int a, int b, int c)\n   foo (1 < 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 < 2) ^ c);\n   foo (1 < (2 ^ c));\n-  foo (1 < 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo (1 < 0x2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 < 2) ^ 3);\n-  foo (1 < (2 ^ 3));\n+  foo (1 < (0x2 ^ 3));\n   foo (a ^ b < c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((a ^ b) < c);\n   foo (a ^ (b < c));"}, {"sha": "d50fad8ae80d0c95e23b28954446ef744ca830dc", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-18.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-18.C?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -42,9 +42,9 @@ bar (T a, T b, T c)\n   foo (1 | 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 | 2) ^ c);\n   foo (1 | (2 ^ c));\n-  foo (1 | 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo (1 | 0x2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 | 2) ^ 3);\n-  foo (1 | (2 ^ 3));\n+  foo (1 | (0x2 ^ 3));\n   foo (a + b | c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((a + b) | c);\n   foo (a + (b | c));"}, {"sha": "2ad8036ac84aea7febbccf46b24f9dcfe41c5ff7", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-19.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-19.C?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -17,7 +17,7 @@ bar (T a, T b, T c)\n   foo (1 & (2 ^ c));\n   foo (1 & 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 & 2) ^ 3);\n-  foo (1 & (2 ^ 3));\n+  foo (1 & (0x2 ^ 3));\n   foo (a ^ b & c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((a ^ b) & c);\n   foo (a ^ (b & c));\n@@ -35,7 +35,7 @@ bar (T a, T b, T c)\n   foo (1 + (2 ^ c));\n   foo (1 + 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 + 2) ^ 3);\n-  foo (1 + (2 ^ 3));\n+  foo (1 + (0x2 ^ 3));\n   foo (a ^ b + c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((a ^ b) + c);\n   foo (a ^ (b + c));\n@@ -53,7 +53,7 @@ bar (T a, T b, T c)\n   foo (1 - (2 ^ c));\n   foo (1 - 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 - 2) ^ 3);\n-  foo (1 - (2 ^ 3));\n+  foo (1 - (0x2 ^ 3));\n   foo (a ^ b - c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((a ^ b) - c);\n   foo (a ^ (b - c));\n@@ -71,7 +71,7 @@ bar (T a, T b, T c)\n   foo (1 >= (2 ^ c));\n   foo (1 >= 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 >= 2) ^ 3);\n-  foo (1 >= (2 ^ 3));\n+  foo (1 >= (0x2 ^ 3));\n   foo (a ^ b >= c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((a ^ b) >= c);\n   foo (a ^ (b >= c));\n@@ -89,7 +89,7 @@ bar (T a, T b, T c)\n   foo (1 == (2 ^ c));\n   foo (1 == 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 == 2) ^ 3);\n-  foo (1 == (2 ^ 3));\n+  foo (1 == (0x2 ^ 3));\n   foo (a ^ b == c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((a ^ b) == c);\n   foo (a ^ (b == c));\n@@ -107,7 +107,7 @@ bar (T a, T b, T c)\n   foo (1 < (2 ^ c));\n   foo (1 < 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 < 2) ^ 3);\n-  foo (1 < (2 ^ 3));\n+  foo (1 < (0x2 ^ 3));\n   foo (a ^ b < c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((a ^ b) < c);\n   foo (a ^ (b < c));"}, {"sha": "69976b3bacf5d517344af8551138fda4b403f78a", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-9.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-9.C?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -41,9 +41,9 @@ bar (int a, int b, int c)\n   foo (1 | 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 | 2) ^ c);\n   foo (1 | (2 ^ c));\n-  foo (1 | 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo (1 | 0x2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((1 | 2) ^ 3);\n-  foo (1 | (2 ^ 3));\n+  foo (1 | (0x2 ^ 3));\n   foo (a + b | c); // { dg-warning \"parentheses\" \"correct warning\" }\n   foo ((a + b) | c);\n   foo (a + (b | c));"}, {"sha": "4899d72b11b180328e2349b9e56e52989e69fb54", "filename": "gcc/testsuite/g++.dg/warn/Wxor-used-as-pow-named-op.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWxor-used-as-pow-named-op.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWxor-used-as-pow-named-op.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWxor-used-as-pow-named-op.C?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -0,0 +1,8 @@\n+/* Verify that -Wxor-used-as-pow only warns with ^ and not with\n+   named \"xor\".  */\n+\n+int t2_16 = 2^16; /* { dg-warning \"result of '2\\\\^16' is 18; did you mean '1 << 16' \\\\(65536\\\\)\\\\?\" } */\n+int t2x16 = 2 xor 16;\n+\n+int t10_6 = 10^6; /* { dg-warning \"result of '10\\\\^6' is 12; did you mean '1e6'\\\\?\" } */\n+int t10x6 = 10 xor 6;"}, {"sha": "260b6adebea942f6daf3e8bd28347ed3fdbb03a1", "filename": "gcc/testsuite/gcc.dg/Wparentheses-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-6.c?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -43,9 +43,9 @@ bar (int a, int b, int c)\n   foo (1 | 2 ^ c); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo ((1 | 2) ^ c);\n   foo (1 | (2 ^ c));\n-  foo (1 | 2 ^ 3); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (1 | 0x2 ^ 3); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo ((1 | 2) ^ 3);\n-  foo (1 | (2 ^ 3));\n+  foo (1 | (0x2 ^ 3));\n   foo (a + b | c); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo ((a + b) | c);\n   foo (a + (b | c));"}, {"sha": "6805094d296e61969b0cb40b0192f2a66758f776", "filename": "gcc/testsuite/gcc.dg/Wparentheses-7.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-7.c?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -18,7 +18,7 @@ bar (int a, int b, int c)\n   foo (1 & (2 ^ c));\n   foo (1 & 2 ^ 3); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo ((1 & 2) ^ 3);\n-  foo (1 & (2 ^ 3));\n+  foo (1 & (0x2 ^ 3));\n   foo (a ^ b & c); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo ((a ^ b) & c);\n   foo (a ^ (b & c));\n@@ -36,7 +36,7 @@ bar (int a, int b, int c)\n   foo (1 + (2 ^ c));\n   foo (1 + 2 ^ 3); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo ((1 + 2) ^ 3);\n-  foo (1 + (2 ^ 3));\n+  foo (1 + (0x2 ^ 3));\n   foo (a ^ b + c); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo ((a ^ b) + c);\n   foo (a ^ (b + c));\n@@ -54,7 +54,7 @@ bar (int a, int b, int c)\n   foo (1 - (2 ^ c));\n   foo (1 - 2 ^ 3); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo ((1 - 2) ^ 3);\n-  foo (1 - (2 ^ 3));\n+  foo (1 - (0x2 ^ 3));\n   foo (a ^ b - c); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo ((a ^ b) - c);\n   foo (a ^ (b - c));\n@@ -72,7 +72,7 @@ bar (int a, int b, int c)\n   foo (1 >= (2 ^ c));\n   foo (1 >= 2 ^ 3); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo ((1 >= 2) ^ 3);\n-  foo (1 >= (2 ^ 3));\n+  foo (1 >= (0x2 ^ 3));\n   foo (a ^ b >= c); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo ((a ^ b) >= c);\n   foo (a ^ (b >= c));\n@@ -90,7 +90,7 @@ bar (int a, int b, int c)\n   foo (1 == (2 ^ c));\n   foo (1 == 2 ^ 3); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo ((1 == 2) ^ 3);\n-  foo (1 == (2 ^ 3));\n+  foo (1 == (0x2 ^ 3));\n   foo (a ^ b == c); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo ((a ^ b) == c);\n   foo (a ^ (b == c));\n@@ -108,7 +108,7 @@ bar (int a, int b, int c)\n   foo (1 < (2 ^ c));\n   foo (1 < 2 ^ 3); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo ((1 < 2) ^ 3);\n-  foo (1 < (2 ^ 3));\n+  foo (1 < (0x2 ^ 3));\n   foo (a ^ b < c); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo ((a ^ b) < c);\n   foo (a ^ (b < c));"}, {"sha": "089cdfc147205bacdfcae0f9d8edf46aafed0d29", "filename": "gcc/testsuite/gcc.dg/precedence-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fgcc.dg%2Fprecedence-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/gcc%2Ftestsuite%2Fgcc.dg%2Fprecedence-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fprecedence-1.c?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -135,10 +135,10 @@ f (void)\n   ASSERT_BIN (0, !=, 2, &, 1, 1, 1, 0);\n   ASSERT_BIN (1, &, 2, ==, 0, 0, 1, 0);\n   ASSERT_BIN (1, &, 2, !=, 0, 1, 0, 1);\n-  ASSERT_BIN (1, &, 2, ^, 3, 3, 3, 1);\n+  ASSERT_BIN (1, &, 0x2, ^, 3, 3, 3, 1);\n   ASSERT_BIN (3, ^, 2, &, 1, 3, 1, 3);\n   ASSERT_BIN (3, ^, 2, |, 1, 1, 1, 0);\n-  ASSERT_BIN (3, |, 2, ^, 1, 3, 2, 3);\n+  ASSERT_BIN (3, |, 0x2, ^, 1, 3, 2, 3);\n   ASSERT_BIN (2, |, 0, &&, 2, 1, 1, 2);\n   ASSERT_BIN (2, &&, 0, |, 2, 1, 2, 1);\n   ASSERT_BIN (0, &&, 0, ||, 1, 1, 1, 0);"}, {"sha": "1a3fb19d79798a050ef9ec2a4270ad4b80a55d81", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedfca647a9e9c1adadd8924f3ee0ab4189424e0/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "patch": "@@ -190,7 +190,7 @@ struct GTY(()) cpp_string {\n #define NAMED_OP\t(1 << 4) /* C++ named operators.  */\n #define PREV_FALLTHROUGH (1 << 5) /* On a token preceeded by FALLTHROUGH\n \t\t\t\t     comment.  */\n-#define BOL\t\t(1 << 6) /* Token at beginning of line.  */\n+#define DECIMAL_INT     (1 << 6) /* Decimal integer, set in c-lex.cc.  */\n #define PURE_ZERO\t(1 << 7) /* Single 0 digit, used by the C++ frontend,\n \t\t\t\t    set in c-lex.cc.  */\n #define SP_DIGRAPH\t(1 << 8) /* # or ## token was a digraph.  */\n@@ -199,6 +199,7 @@ struct GTY(()) cpp_string {\n \t\t\t\t    after a # operator.  */\n #define NO_EXPAND\t(1 << 10) /* Do not macro-expand this token.  */\n #define PRAGMA_OP\t(1 << 11) /* _Pragma token.  */\n+#define BOL\t\t(1 << 12) /* Token at beginning of line.  */\n \n /* Specify which field, if any, of the cpp_token union is used.  */\n "}]}