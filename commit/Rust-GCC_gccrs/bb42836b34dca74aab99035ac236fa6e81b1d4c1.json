{"sha": "bb42836b34dca74aab99035ac236fa6e81b1d4c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI0MjgzNmIzNGRjYTc0YWFiOTkwMzVhYzIzNmZhNmU4MWIxZDRjMQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-10-03T21:22:10Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-10-03T21:22:10Z"}, "message": "tree-pretty-print.c (dump_location): Make it extern.\n\ngcc/ChangeLog:\n\n2014-10-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* tree-pretty-print.c (dump_location): Make it extern. Dump also\n\tthe column.\n\t* tree-pretty-print.h (dump_location): Declare.\n\t* gimple-pretty-print.c (dump_gimple_phi): Use dump_location.\n\t(pp_gimple_stmt_1): Likewise.\n\t(dump_implicit_edges): Likewise.\n\t* gimplify.c (gimplify_call_expr): Use LOCATION_FILE and\n\tLOCATION_LINE.\n\ngcc/testsuite/ChangeLog:\n\n2014-10-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* gcc.dg/tm/debug-1.c: Update regex.\n\t* c-c++-common/raw-string-18.c: Update regex.\n\t* c-c++-common/raw-string-19.c: Update regex.\n\nFrom-SVN: r215879", "tree": {"sha": "9c4233d4502ee9e2a111926323f9eef01f8f6152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c4233d4502ee9e2a111926323f9eef01f8f6152"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb42836b34dca74aab99035ac236fa6e81b1d4c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb42836b34dca74aab99035ac236fa6e81b1d4c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb42836b34dca74aab99035ac236fa6e81b1d4c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb42836b34dca74aab99035ac236fa6e81b1d4c1/comments", "author": null, "committer": null, "parents": [{"sha": "acbb0489b6d3db1ff6712fbda32405d45f0b8b30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbb0489b6d3db1ff6712fbda32405d45f0b8b30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acbb0489b6d3db1ff6712fbda32405d45f0b8b30"}], "stats": {"total": 93, "additions": 37, "deletions": 56}, "files": [{"sha": "96845dd8a32860703d099261497c6fae0f018588", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb42836b34dca74aab99035ac236fa6e81b1d4c1", "patch": "@@ -1,3 +1,15 @@\n+2014-10-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* tree-pretty-print.c (dump_location): Make it extern. Dump also\n+\tthe column.\n+\t* tree-pretty-print.h (dump_location): Declare.\n+\t* gimple-pretty-print.c (dump_gimple_phi): Use dump_location.\n+\t(pp_gimple_stmt_1): Likewise.\n+\t(dump_implicit_edges): Likewise.\n+\t* gimplify.c (gimplify_call_expr): Use LOCATION_FILE and\n+\tLOCATION_LINE.\n+\n+\n 2014-10-03  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.c\t(driver::global_initializations): Remove \"const\" so"}, {"sha": "4a42d270a633a46f5005b6a282753a6c1b0a5adc", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 4, "deletions": 44, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=bb42836b34dca74aab99035ac236fa6e81b1d4c1", "patch": "@@ -1834,21 +1834,7 @@ dump_gimple_phi (pretty_printer *buffer, gimple phi, int spc, bool comment,\n   for (i = 0; i < gimple_phi_num_args (phi); i++)\n     {\n       if ((flags & TDF_LINENO) && gimple_phi_arg_has_location (phi, i))\n-        {\n-\t  expanded_location xloc;\n-\n-\t  xloc = expand_location (gimple_phi_arg_location (phi, i));\n-\t  pp_left_bracket (buffer);\n-\t  if (xloc.file)\n-\t    {\n-\t      pp_string (buffer, xloc.file);\n-\t      pp_string (buffer, \" : \");\n-\t    }\n-\t  pp_decimal_int (buffer, xloc.line);\n-\t  pp_colon (buffer);\n-\t  pp_decimal_int (buffer, xloc.column);\n-\t  pp_string (buffer, \"] \");\n-\t}\n+\tdump_location (buffer, gimple_phi_arg_location (phi, i));\n       dump_generic_node (buffer, gimple_phi_arg_def (phi, i), spc, flags,\n \t\t\t false);\n       pp_left_paren (buffer);\n@@ -2076,19 +2062,7 @@ pp_gimple_stmt_1 (pretty_printer *buffer, gimple gs, int spc, int flags)\n     pp_printf (buffer, \"<&%p> \", (void *) gs);\n \n   if ((flags & TDF_LINENO) && gimple_has_location (gs))\n-    {\n-      expanded_location xloc = expand_location (gimple_location (gs));\n-      pp_left_bracket (buffer);\n-      if (xloc.file)\n-\t{\n-\t  pp_string (buffer, xloc.file);\n-\t  pp_string (buffer, \" : \");\n-\t}\n-      pp_decimal_int (buffer, xloc.line);\n-      pp_colon (buffer);\n-      pp_decimal_int (buffer, xloc.column);\n-      pp_string (buffer, \"] \");\n-    }\n+    dump_location (buffer, gimple_location (gs));\n \n   if (flags & TDF_EH)\n     {\n@@ -2404,22 +2378,8 @@ dump_implicit_edges (pretty_printer *buffer, basic_block bb, int indent,\n       INDENT (indent);\n \n       if ((flags & TDF_LINENO)\n-\t  && e->goto_locus != UNKNOWN_LOCATION\n-\t  )\n-\t{\n-\t  expanded_location goto_xloc;\n-\t  goto_xloc = expand_location (e->goto_locus);\n-\t  pp_left_bracket (buffer);\n-\t  if (goto_xloc.file)\n-\t    {\n-\t      pp_string (buffer, goto_xloc.file);\n-\t      pp_string (buffer, \" : \");\n-\t    }\n-\t  pp_decimal_int (buffer, goto_xloc.line);\n-\t  pp_string (buffer, \" : \");\n-\t  pp_decimal_int (buffer, goto_xloc.column);\n-\t  pp_string (buffer, \"] \");\n-\t}\n+\t  && e->goto_locus != UNKNOWN_LOCATION)\n+\tdump_location (buffer, e->goto_locus);\n \n       pp_cfg_jump (buffer, e->dest);\n       pp_newline (buffer);"}, {"sha": "6ee85f24d36b4423be1b717b213342b5046185f3", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=bb42836b34dca74aab99035ac236fa6e81b1d4c1", "patch": "@@ -2317,14 +2317,14 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n \t}\n       case BUILT_IN_LINE:\n \t{\n-\t  expanded_location loc = expand_location (EXPR_LOCATION (*expr_p));\n-\t  *expr_p = build_int_cst (TREE_TYPE (*expr_p), loc.line);\n+\t  *expr_p = build_int_cst (TREE_TYPE (*expr_p),\n+\t\t\t\t   LOCATION_LINE (EXPR_LOCATION (*expr_p)));\n \t  return GS_OK;\n \t}\n       case BUILT_IN_FILE:\n \t{\n-\t  expanded_location loc = expand_location (EXPR_LOCATION (*expr_p));\n-\t  *expr_p = build_string_literal (strlen (loc.file) + 1, loc.file);\n+\t  const char *locfile = LOCATION_FILE (EXPR_LOCATION (*expr_p));\n+\t  *expr_p = build_string_literal (strlen (locfile) + 1, locfile);\n \t  return GS_OK;\n \t}\n       case BUILT_IN_FUNCTION:"}, {"sha": "d058741487384edc2d6cf705ebcd7921b6053711", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb42836b34dca74aab99035ac236fa6e81b1d4c1", "patch": "@@ -1,3 +1,9 @@\n+2014-10-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* gcc.dg/tm/debug-1.c: Update regex.\n+\t* c-c++-common/raw-string-18.c: Update regex.\n+\t* c-c++-common/raw-string-19.c: Update regex.\n+\n 2014-10-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/63453"}, {"sha": "01dd339b180418bd93b831b5f1c61db2f39e1c3e", "filename": "gcc/testsuite/c-c++-common/raw-string-18.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-18.c?ref=bb42836b34dca74aab99035ac236fa6e81b1d4c1", "patch": "@@ -17,5 +17,5 @@ main ()\n }\n \n /* Verify call to foo is on line 15.  */\n-/* { dg-final { scan-tree-dump \": 15\\[]:]\\[^\\n\\r]*foo\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"c:15:\\[^\\n\\r\\]*foo\" \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "abbecfb950f58dbd1029e951ee3c24a1a47f723c", "filename": "gcc/testsuite/c-c++-common/raw-string-19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-19.c?ref=bb42836b34dca74aab99035ac236fa6e81b1d4c1", "patch": "@@ -17,6 +17,6 @@ main ()\n }\n \n /* Verify call to foo is on line 15.  */\n-/* { dg-final { scan-tree-dump \": 15\\[]:]\\[^\\n\\r]*foo\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"c:15:\\[^\\n\\r\\]*foo\" \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "691cd77578ae6a4ed4c4b584a81bc99078117e44", "filename": "gcc/testsuite/gcc.dg/tm/debug-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fdebug-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fdebug-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fdebug-1.c?ref=bb42836b34dca74aab99035ac236fa6e81b1d4c1", "patch": "@@ -19,8 +19,8 @@ int main() {\n \treturn 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \": 13:.*b = 9898\" 1 \"tmmark\" } } */\n-/* { dg-final { scan-tree-dump-times \": 14:.*_ITM_beginTransaction\" 1 \"tmmark\" } } */\n-/* { dg-final { scan-tree-dump-times \": 15:.*ITM_WU. \\\\(&z\" 1 \"tmmark\" } } */\n-/* { dg-final { scan-tree-dump-times \": 16:.*ITM_WU. \\\\(&a\" 1 \"tmmark\" } } */\n+/* { dg-final { scan-tree-dump-times \":13:.*b = 9898\" 1 \"tmmark\" } } */\n+/* { dg-final { scan-tree-dump-times \":14:.*_ITM_beginTransaction\" 1 \"tmmark\" } } */\n+/* { dg-final { scan-tree-dump-times \":15:.*ITM_WU. \\\\(&z\" 1 \"tmmark\" } } */\n+/* { dg-final { scan-tree-dump-times \":16:.*ITM_WU. \\\\(&a\" 1 \"tmmark\" } } */\n /* { dg-final { cleanup-tree-dump \"tmmark\" } } */"}, {"sha": "0a59aac6572c267a3924659bb828e5fbc5f3cc1b", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=bb42836b34dca74aab99035ac236fa6e81b1d4c1", "patch": "@@ -677,7 +677,7 @@ dump_omp_clauses (pretty_printer *buffer, tree clause, int spc, int flags)\n \n /* Dump location LOC to BUFFER.  */\n \n-static void\n+void\n dump_location (pretty_printer *buffer, location_t loc)\n {\n   expanded_location xloc = expand_location (loc);\n@@ -686,9 +686,11 @@ dump_location (pretty_printer *buffer, location_t loc)\n   if (xloc.file)\n     {\n       pp_string (buffer, xloc.file);\n-      pp_string (buffer, \" : \");\n+      pp_string (buffer, \":\");\n     }\n   pp_decimal_int (buffer, xloc.line);\n+  pp_colon (buffer);\n+  pp_decimal_int (buffer, xloc.column);\n   pp_string (buffer, \"] \");\n }\n "}, {"sha": "bc73df73baa3bc5d7d6fb78513e21f20dbba57dd", "filename": "gcc/tree-pretty-print.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2Ftree-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb42836b34dca74aab99035ac236fa6e81b1d4c1/gcc%2Ftree-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.h?ref=bb42836b34dca74aab99035ac236fa6e81b1d4c1", "patch": "@@ -50,5 +50,6 @@ extern void percent_K_format (text_info *);\n extern void pp_tree_identifier (pretty_printer *, tree);\n extern void dump_function_header (FILE *, tree, int);\n extern void pp_double_int (pretty_printer *pp, double_int d, bool uns);\n+extern void dump_location (pretty_printer *buffer, location_t loc);\n \n #endif /* ! GCC_TREE_PRETTY_PRINT_H */"}]}