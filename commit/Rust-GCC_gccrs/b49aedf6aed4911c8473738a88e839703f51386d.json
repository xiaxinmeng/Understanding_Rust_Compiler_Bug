{"sha": "b49aedf6aed4911c8473738a88e839703f51386d", "node_id": "C_kwDOANBUbNoAKGI0OWFlZGY2YWVkNDkxMWM4NDczNzM4YTg4ZTgzOTcwM2Y1MTM4NmQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-21T12:28:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-21T12:28:50Z"}, "message": "testsuite: Fix up vect-simd-clone1[678]*.c tests [PR108898]\n\nAs mentioned in the PR, vect-simd-clone-1[678]{,f}.c tests FAIL on\nx86_64-linux with -m64/-march=cascadelake or -m32/-march=cascadelake,\nthere are 3 matches for the calls rather than expected two.\nAs suggested by Richi, this patch changes those tests to use\n--param vect-epilogues-nomask=0 such that it is more predictable on how\nmany calls will show up.  In the non-[a-f] suffixed tests, the\nscan-tree-dump-times patterns were expecting 2 for non-aarch64 and 3 for\naarch64, which is a puzzle for me, because vect_simd_clones effective\ntarget is apparently never true on aarch64 (just on x86 in some cases and\non amdgcn; perhaps something to change for GCC14, but I guess too late\nfor stage4).  That said, I have looked at aarch64 dumps and see only 2\ncalls with --param vect-epilogues-nomask=0 and 3 with --param\nvect-epilogues-nomask=1 or without it, so I have tweaked those to always\nexpect the same thing.  Another thing is some tests uselessly had\n-fdump-tree-optimized in dg-options even when they don't scan anything\nthere.\n\nTested on x86_64-linux with\nmake -j32 -k check-gcc RUNTESTFLAGS=\"vect.exp=gcc.dg/vect/vect-simd-clone-*.c \\\n--target_board='unix{-m64/-march=x86-64,-m64/-march=cascadelake,-m32/-march=i686,-m32/-march=cascadelake}'\"\nand aarch64-linux (where all tests are UNSUPPORTED before/after).\n\n2023-03-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR testsuite/108898\n\t* gcc.dg/vect/vect-simd-clone-16.c: Add --param vect-epilogues-nomask=0\n\tto dg-additional-options.  Always expect just 2 foo.simdclone calls.\n\t* gcc.dg/vect/vect-simd-clone-16f.c: Add\n\t--param vect-epilogues-nomask=0 to dg-additional-options.\n\t* gcc.dg/vect/vect-simd-clone-17.c: Likewise.  Always expect just 2\n\tfoo.simdclone calls.\n\t* gcc.dg/vect/vect-simd-clone-17d.c: Remove -fdump-tree-optimized from\n\tdg-additional-options.\n\t* gcc.dg/vect/vect-simd-clone-17e.c: Likewise.\n\t* gcc.dg/vect/vect-simd-clone-17f.c: Likewise.  Add\n\t--param vect-epilogues-nomask=0 to dg-additional-options.\n\t* gcc.dg/vect/vect-simd-clone-18.c: Add --param vect-epilogues-nomask=0\n\tto dg-additional-options.  Always expect just 2 foo.simdclone calls.\n\t* gcc.dg/vect/vect-simd-clone-18f.c: Add\n\t--param vect-epilogues-nomask=0 to dg-additional-options.", "tree": {"sha": "0885959ae35aaaccd516acf7b867769f1034d523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0885959ae35aaaccd516acf7b867769f1034d523"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b49aedf6aed4911c8473738a88e839703f51386d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49aedf6aed4911c8473738a88e839703f51386d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b49aedf6aed4911c8473738a88e839703f51386d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49aedf6aed4911c8473738a88e839703f51386d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25db59017f2e216a76c8a0fe4814568135f19f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25db59017f2e216a76c8a0fe4814568135f19f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25db59017f2e216a76c8a0fe4814568135f19f9a"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "36c0a977b65306fc646a7f848b7fe524420ee33f", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-16.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49aedf6aed4911c8473738a88e839703f51386d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49aedf6aed4911c8473738a88e839703f51386d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16.c?ref=b49aedf6aed4911c8473738a88e839703f51386d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-require-effective-target vect_simd_clones } */\n-/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-fopenmp-simd --param vect-epilogues-nomask=0\" } */\n /* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n \n /* Test that simd inbranch clones work correctly.  */\n@@ -82,8 +82,7 @@ main ()\n \n /* Ensure the the in-branch simd clones are used on targets that support them.\n    Some targets use another call for the epilogue loops.  */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! aarch64*-*-* } } } } */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target aarch64*-*-* } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" } } */\n \n /* The LTO test produces two dump files and we scan the wrong one.  */\n /* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "171bbbb38bb014053e95ed4b4ef4bfc63e9984c6", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-16f.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49aedf6aed4911c8473738a88e839703f51386d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49aedf6aed4911c8473738a88e839703f51386d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16f.c?ref=b49aedf6aed4911c8473738a88e839703f51386d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-require-effective-target vect_simd_clones } */\n-/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-fopenmp-simd --param vect-epilogues-nomask=0\" } */\n /* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n \n #define TYPE __INT64_TYPE__"}, {"sha": "6616ca6a74af82012709c299b938e9de879f795b", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-17.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49aedf6aed4911c8473738a88e839703f51386d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49aedf6aed4911c8473738a88e839703f51386d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17.c?ref=b49aedf6aed4911c8473738a88e839703f51386d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-require-effective-target vect_simd_clones } */\n-/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-fopenmp-simd --param vect-epilogues-nomask=0\" } */\n /* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n \n /* Test that simd inbranch clones work correctly.  */\n@@ -82,8 +82,7 @@ main ()\n \n /* Ensure the the in-branch simd clones are used on targets that support them.\n    Some targets use another call for the epilogue loops.  */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! aarch64*-*-* } } } } */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target aarch64*-*-* } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" } } */\n \n /* The LTO test produces two dump files and we scan the wrong one.  */\n /* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "8a7e1e912f8986cd3a4e5295bb3be7a3b5c8eddf", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-17d.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49aedf6aed4911c8473738a88e839703f51386d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49aedf6aed4911c8473738a88e839703f51386d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17d.c?ref=b49aedf6aed4911c8473738a88e839703f51386d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-require-effective-target vect_simd_clones } */\n-/* { dg-additional-options \"-fopenmp-simd -fdump-tree-optimized\" } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n /* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n \n #define TYPE char"}, {"sha": "3b4da3d1a5f208b83316ab0c0da7bb0e5a87be0c", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-17e.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49aedf6aed4911c8473738a88e839703f51386d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17e.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49aedf6aed4911c8473738a88e839703f51386d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17e.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17e.c?ref=b49aedf6aed4911c8473738a88e839703f51386d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-require-effective-target vect_simd_clones } */\n-/* { dg-additional-options \"-fopenmp-simd -fdump-tree-optimized\" } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n /* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n \n #define TYPE double"}, {"sha": "9e4b954681887da31d719dcf1b8216b0c15b395e", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-17f.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49aedf6aed4911c8473738a88e839703f51386d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49aedf6aed4911c8473738a88e839703f51386d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17f.c?ref=b49aedf6aed4911c8473738a88e839703f51386d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-require-effective-target vect_simd_clones } */\n-/* { dg-additional-options \"-fopenmp-simd -fdump-tree-optimized\" } */\n+/* { dg-additional-options \"-fopenmp-simd --param vect-epilogues-nomask=0\" } */\n /* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n \n #define TYPE __INT64_TYPE__"}, {"sha": "20f760378800729e1b9d4cf163b55016545349cb", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-18.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49aedf6aed4911c8473738a88e839703f51386d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49aedf6aed4911c8473738a88e839703f51386d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18.c?ref=b49aedf6aed4911c8473738a88e839703f51386d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-require-effective-target vect_simd_clones } */\n-/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-fopenmp-simd --param vect-epilogues-nomask=0\" } */\n /* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n \n /* Test that simd inbranch clones work correctly.  */\n@@ -82,8 +82,7 @@ main ()\n \n /* Ensure the the in-branch simd clones are used on targets that support them.\n    Some targets use another call for the epilogue loops.  */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! aarch64*-*-* } } } } */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target aarch64*-*-* } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" } } */\n \n /* The LTO test produces two dump files and we scan the wrong one.  */\n /* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "5907e87de1395394678600515935057e0a5e4ab2", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-18f.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49aedf6aed4911c8473738a88e839703f51386d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49aedf6aed4911c8473738a88e839703f51386d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18f.c?ref=b49aedf6aed4911c8473738a88e839703f51386d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-require-effective-target vect_simd_clones } */\n-/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-fopenmp-simd --param vect-epilogues-nomask=0\" } */\n /* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n \n #define TYPE __INT64_TYPE__"}]}