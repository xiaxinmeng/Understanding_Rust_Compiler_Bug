{"sha": "68aba1f6a863b0fc0fd487a737693787a49845e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhhYmExZjZhODYzYjBmYzBmZDQ4N2E3Mzc2OTM3ODdhNDk4NDVlMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-28T11:53:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-28T11:53:37Z"}, "message": "match.pd: Add more simplification of address comparisons.\n\n2015-07-28  Richard Biener  <rguenther@suse.de>\n\n\t* match.pd: Add more simplification of address comparisons.\n\nFrom-SVN: r226312", "tree": {"sha": "5cda3b1f17652d463edfed4a0600082c83e5cd8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cda3b1f17652d463edfed4a0600082c83e5cd8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68aba1f6a863b0fc0fd487a737693787a49845e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68aba1f6a863b0fc0fd487a737693787a49845e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68aba1f6a863b0fc0fd487a737693787a49845e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68aba1f6a863b0fc0fd487a737693787a49845e2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9bc22d19f1fa7f65d5d50d3c44e8c9fbf7a8760b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc22d19f1fa7f65d5d50d3c44e8c9fbf7a8760b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bc22d19f1fa7f65d5d50d3c44e8c9fbf7a8760b"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "fadcb03c5ed8c93fdb41e3cafa0c1f2aadb77aaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68aba1f6a863b0fc0fd487a737693787a49845e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68aba1f6a863b0fc0fd487a737693787a49845e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68aba1f6a863b0fc0fd487a737693787a49845e2", "patch": "@@ -1,3 +1,7 @@\n+2015-07-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd: Add more simplification of address comparisons.\n+\n 2015-07-28  Richard Biener  <rguenther@suse.de>\n \n \t* match.pd: Re-order two cases in comparison with max/min"}, {"sha": "b0c6d773f9e052915d81f15a999811850f3eac3d", "filename": "gcc/match.pd", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68aba1f6a863b0fc0fd487a737693787a49845e2/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68aba1f6a863b0fc0fd487a737693787a49845e2/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=68aba1f6a863b0fc0fd487a737693787a49845e2", "patch": "@@ -1828,6 +1828,46 @@ along with GCC; see the file COPYING3.  If not see\n   (if (tree_single_nonzero_warnv_p (@0, NULL))\n    { constant_boolean_node (cmp == NE_EXPR, type); })))\n \n+/* When the addresses are not directly of decls compare base and offset.\n+   This implements some remaining parts of fold_comparison address\n+   comparisons but still no complete part of it.  Still it is good\n+   enough to make fold_stmt not regress when not dispatching to fold_binary.  */\n+(for cmp (simple_comparison)\n+ (simplify\n+  (cmp (convert? addr@0) (convert? addr@1))\n+  (with\n+   {\n+     HOST_WIDE_INT off0, off1;\n+     tree base0 = get_addr_base_and_unit_offset (TREE_OPERAND (@0, 0), &off0);\n+     tree base1 = get_addr_base_and_unit_offset (TREE_OPERAND (@1, 0), &off1);\n+     if (base0 && TREE_CODE (base0) == MEM_REF)\n+       {\n+\t off0 += mem_ref_offset (base0).to_short_addr ();\n+         base0 = TREE_OPERAND (base0, 0);\n+       }\n+     if (base1 && TREE_CODE (base1) == MEM_REF)\n+       {\n+         off1 += mem_ref_offset (base1).to_short_addr ();\n+         base1 = TREE_OPERAND (base1, 0);\n+       }\n+   }\n+   (if (base0 && base1\n+\t&& operand_equal_p (base0, base1, 0)\n+\t&& (cmp == EQ_EXPR || cmp == NE_EXPR\n+\t    || POINTER_TYPE_OVERFLOW_UNDEFINED))\n+    (switch\n+     (if (cmp == EQ_EXPR)\n+      { constant_boolean_node (off0 == off1, type); })\n+     (if (cmp == NE_EXPR)\n+      { constant_boolean_node (off0 != off1, type); })\n+     (if (cmp == LT_EXPR)\n+      { constant_boolean_node (off0 < off1, type); })\n+     (if (cmp == LE_EXPR)\n+      { constant_boolean_node (off0 <= off1, type); })\n+     (if (cmp == GE_EXPR)\n+      { constant_boolean_node (off0 >= off1, type); })\n+     (if (cmp == GT_EXPR)\n+      { constant_boolean_node (off0 > off1, type); }))))))\n \n /* Non-equality compare simplifications from fold_binary  */\n (for cmp (lt gt le ge)"}]}