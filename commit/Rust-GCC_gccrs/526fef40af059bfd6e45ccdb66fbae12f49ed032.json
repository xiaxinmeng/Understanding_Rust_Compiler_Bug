{"sha": "526fef40af059bfd6e45ccdb66fbae12f49ed032", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI2ZmVmNDBhZjA1OWJmZDZlNDVjY2RiNjZmYmFlMTJmNDllZDAzMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-26T23:23:31Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-26T23:23:31Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r592", "tree": {"sha": "6a807803460921f049e740b7afbc3080ad0cb7d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a807803460921f049e740b7afbc3080ad0cb7d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/526fef40af059bfd6e45ccdb66fbae12f49ed032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/526fef40af059bfd6e45ccdb66fbae12f49ed032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/526fef40af059bfd6e45ccdb66fbae12f49ed032", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/526fef40af059bfd6e45ccdb66fbae12f49ed032/comments", "author": null, "committer": null, "parents": [{"sha": "84c0bb6359b5e8161866347491ea77c7d8cafbbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c0bb6359b5e8161866347491ea77c7d8cafbbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c0bb6359b5e8161866347491ea77c7d8cafbbf"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "c5b377e122844e205742863c062984c6c44af503", "filename": "gcc/protoize.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526fef40af059bfd6e45ccdb66fbae12f49ed032/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526fef40af059bfd6e45ccdb66fbae12f49ed032/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=526fef40af059bfd6e45ccdb66fbae12f49ed032", "patch": "@@ -1320,18 +1320,30 @@ shortpath (cwd, filename)\n           path_p++;\n           unmatched_slash_count++;\n         }\n+\n+      /* Find out how many directory levels in cwd were *not* matched.  */\n       while (*cwd_p)\n         if (*cwd_p++ == '/')\n-                unmatched_slash_count++;\n+\t  unmatched_slash_count++;\n+\n+      /* Now we know how long the \"short name\" will be.\n+\t Reject it if longer than the input.  */\n+      if (unmatched_slash_count * 3 + strlen (path_p) >= filename_len)\n+\treturn filename;\n+\n+      /* For each of them, put a `../' at the beginning of the short name.  */\n       while (unmatched_slash_count--)\n         {\n+\t  /* Give up if the result gets to be longer\n+\t     than the absolute path name.  */\n \t  if (rel_buffer + filename_len <= rel_buf_p + 3)\n \t    return filename;\n           *rel_buf_p++ = '.';\n           *rel_buf_p++ = '.';\n           *rel_buf_p++ = '/';\n         }\n \n+      /* Then tack on the unmatched part of the desired file's name.  */\n       do\n \t{\n \t  if (rel_buffer + filename_len <= rel_buf_p)"}]}