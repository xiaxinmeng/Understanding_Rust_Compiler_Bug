{"sha": "d308419c64c52c2d48bdf53a65e1790a2c897e83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMwODQxOWM2NGM1MmMyZDQ4YmRmNTNhNjVlMTc5MGEyYzg5N2U4Mw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-08-13T19:03:46Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2019-08-13T19:03:46Z"}, "message": "[Darwin] There is no need to distinguish PIC/non-PIC symbol stubs.\n\nSo we can use a single flag for both, and rename this now, before a confusing\nname gets into the wild.\n\ngcc/\n\n2019-08-13 Iain Sandoe <iain@sandoe.co.uk>\n\n\t* config/darwin.c (machopic_indirect_call_target): Rename symbol stub\n\tflag.\n\t(darwin_override_options): Likewise.\n\t* config/darwin.h: Likewise.\n\t* config/darwin.opt: Likewise.\n\t* config/i386/i386.c (output_pic_addr_const): Likewise.\n\t* config/rs6000/darwin.h: Likewise.\n\t* config/rs6000/rs6000.c (rs6000_call_darwin_1): Likewise.\n\t* config/i386/darwin.h (TARGET_MACHO_PICSYM_STUBS): Rename to ...\n\t... this TARGET_MACHO_SYMBOL_STUBS.\n\t(FUNCTION_PROFILER):Likewise.\n\t* config/i386/i386.h: Likewise.\n\ngcc/testsuite/\n\n2019-08-13  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* obj-c++.dg/stubify-1.mm: Rename symbol stub option.\n\t* obj-c++.dg/stubify-2.mm: Likewise.\n\t* objc.dg/stubify-1.m: Likewise.\n\t* objc.dg/stubify-2.m: Likewise.\n\nFrom-SVN: r274397", "tree": {"sha": "8a2e6015361cc4816f7d68eae3264ce2496f6691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a2e6015361cc4816f7d68eae3264ce2496f6691"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d308419c64c52c2d48bdf53a65e1790a2c897e83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d308419c64c52c2d48bdf53a65e1790a2c897e83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d308419c64c52c2d48bdf53a65e1790a2c897e83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d308419c64c52c2d48bdf53a65e1790a2c897e83/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20ac6454c53c50d218b54a7015668f7f9c10de8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20ac6454c53c50d218b54a7015668f7f9c10de8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20ac6454c53c50d218b54a7015668f7f9c10de8e"}], "stats": {"total": 72, "additions": 46, "deletions": 26}, "files": [{"sha": "070986ec3f75a98416a3eafb66d9264df822645d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d308419c64c52c2d48bdf53a65e1790a2c897e83", "patch": "@@ -1,3 +1,18 @@\n+2019-08-13 Iain Sandoe <iain@sandoe.co.uk>\n+\n+\t* config/darwin.c (machopic_indirect_call_target): Rename symbol stub\n+\tflag.\n+\t(darwin_override_options): Likewise.\n+\t* config/darwin.h: Likewise.\n+\t* config/darwin.opt: Likewise.\n+\t* config/i386/i386.c (output_pic_addr_const): Likewise.\n+\t* config/rs6000/darwin.h: Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_call_darwin_1): Likewise.\n+\t* config/i386/darwin.h (TARGET_MACHO_PICSYM_STUBS): Rename to ...\n+\t... this TARGET_MACHO_SYMBOL_STUBS.\n+\t(FUNCTION_PROFILER):Likewise.\n+\t* config/i386/i386.h: Likewise.\n+\n 2019-08-13  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (ix86_expand_vector_extract) <case E_V2SImode>:"}, {"sha": "fdd23c49bbe4eb925b29a2643410f2c126de9f8c", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=d308419c64c52c2d48bdf53a65e1790a2c897e83", "patch": "@@ -788,7 +788,7 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n rtx\n machopic_indirect_call_target (rtx target)\n {\n-  if (! darwin_picsymbol_stubs)\n+  if (! darwin_symbol_stubs)\n     return target;\n \n   if (GET_CODE (target) != MEM)\n@@ -3268,13 +3268,13 @@ darwin_override_options (void)\n      Linkers that don't need stubs, don't need the EH symbol markers either.\n   */\n \n-  if (!global_options_set.x_darwin_picsymbol_stubs)\n+  if (!global_options_set.x_darwin_symbol_stubs)\n     {\n       if (darwin_target_linker)\n \t{\n \t  if (strverscmp (darwin_target_linker, MIN_LD64_OMIT_STUBS) < 0)\n \t    {\n-\t      darwin_picsymbol_stubs = true;\n+\t      darwin_symbol_stubs = true;\n \t      ld_needs_eh_markers = true;\n \t    }\n \t}\n@@ -3283,15 +3283,15 @@ darwin_override_options (void)\n \t  /* If we don't know the linker version and we're targeting an old\n \t     system, we know no better than to assume the use of an earlier\n \t     linker.  */\n-\t  darwin_picsymbol_stubs = true;\n+\t  darwin_symbol_stubs = true;\n \t  ld_needs_eh_markers = true;\n \t}\n     }\n-  else if (DARWIN_X86 && darwin_picsymbol_stubs && TARGET_64BIT)\n+  else if (DARWIN_X86 && darwin_symbol_stubs && TARGET_64BIT)\n     {\n       inform (input_location,\n \t      \"%<-mpic-symbol-stubs%> is not required for 64b code (ignored)\");\n-      darwin_picsymbol_stubs = false;\n+      darwin_symbol_stubs = false;\n     }\n \n   if (generating_for_darwin_version >= 9)"}, {"sha": "93dc638f8bbc657ebca10568c4688887c7f49342", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=d308419c64c52c2d48bdf53a65e1790a2c897e83", "patch": "@@ -1019,7 +1019,7 @@ extern void darwin_driver_init (unsigned int *,struct cl_decoded_option **);\n    _tested_ version known to support this so far.  */\n #define MIN_LD64_NO_COAL_SECTS \"236.4\"\n \n-/* From at least version 62.1, ld64 can build PIC indirection stubs as\n+/* From at least version 62.1, ld64 can build symbol indirection stubs as\n    needed, and there is no need for the compiler to emit them.  */\n #define MIN_LD64_OMIT_STUBS \"62.1\"\n "}, {"sha": "7f5616cbe078fe59d2daf08f26179063b24c0245", "filename": "gcc/config/darwin.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Fconfig%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Fconfig%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.opt?ref=d308419c64c52c2d48bdf53a65e1790a2c897e83", "patch": "@@ -75,9 +75,9 @@ mone-byte-bool\n Target RejectNegative Report Var(darwin_one_byte_bool)\n Set sizeof(bool) to 1.\n \n-mpic-symbol-stubs\n-Target Report Var(darwin_picsymbol_stubs) Init(0)\n-Force generation of PIC symbol stubs.\n+msymbol-stubs\n+Target Report Var(darwin_symbol_stubs) Init(0)\n+Force generation of external symbol indirection stubs.\n \n ; Some code-gen may be improved / adjusted if the linker is sufficiently modern.\n mtarget-linker="}, {"sha": "385d253692063301caf51bd2f976b1183f364ae4", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=d308419c64c52c2d48bdf53a65e1790a2c897e83", "patch": "@@ -91,8 +91,8 @@ along with GCC; see the file COPYING3.  If not see\n #define WCHAR_TYPE_SIZE 32\n \n /* Generate pic symbol indirection stubs if this is true.  */\n-#undef TARGET_MACHO_PICSYM_STUBS\n-#define TARGET_MACHO_PICSYM_STUBS (darwin_picsymbol_stubs)\n+#undef TARGET_MACHO_SYMBOL_STUBS\n+#define TARGET_MACHO_SYMBOL_STUBS (darwin_symbol_stubs)\n \n /* For compatibility with OSX system tools, use the new style of pic stub\n    if this is set (default).  */\n@@ -243,7 +243,7 @@ along with GCC; see the file COPYING3.  If not see\n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_MACHO_PICSYM_STUBS \t\t\t\t\t\\\n+    if (TARGET_MACHO_SYMBOL_STUBS \t\t\t\t\t\\\n \t&& MACHOPIC_INDIRECT && !TARGET_64BIT)\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tconst char *name = machopic_mcount_stub_name ();\t\t\\"}, {"sha": "d762d3ffe3285330ba792c070928534682a129a3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d308419c64c52c2d48bdf53a65e1790a2c897e83", "patch": "@@ -11445,7 +11445,7 @@ output_pic_addr_const (FILE *file, rtx x, int code)\n       break;\n \n     case SYMBOL_REF:\n-      if (TARGET_64BIT || ! TARGET_MACHO_PICSYM_STUBS)\n+      if (TARGET_64BIT || ! TARGET_MACHO_SYMBOL_STUBS)\n \toutput_addr_const (file, x);\n       else\n \t{"}, {"sha": "800d7c4c4e34ec71d0715114e87910b71084cc6b", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=d308419c64c52c2d48bdf53a65e1790a2c897e83", "patch": "@@ -647,7 +647,7 @@ extern tree x86_mfence;\n /* Replace MACH-O, ifdefs by in-line tests, where possible. \n    (a) Macros defined in config/i386/darwin.h  */\n #define TARGET_MACHO 0\n-#define TARGET_MACHO_PICSYM_STUBS 0\n+#define TARGET_MACHO_SYMBOL_STUBS 0\n #define MACHOPIC_ATT_STUB 0\n /* (b) Macros defined in config/darwin.h  */\n #define MACHO_DYNAMIC_NO_PIC_P 0"}, {"sha": "150dc4f4cdd879cc851769a939c3744eca6db733", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=d308419c64c52c2d48bdf53a65e1790a2c897e83", "patch": "@@ -62,9 +62,6 @@\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Generate pic symbol stubs if this is true.  */\n-extern int darwin_emit_picsym_stub;\n-\n #define SUBTARGET_OVERRIDE_OPTIONS darwin_rs6000_override_options ()\n \n #define C_COMMON_OVERRIDE_OPTIONS do {\t\t\t\t\t\\"}, {"sha": "d1eb08ab199f3aa4adc58c9ab16412d5093ccc5a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d308419c64c52c2d48bdf53a65e1790a2c897e83", "patch": "@@ -12943,7 +12943,7 @@ print_operand (FILE *file, rtx x, int code)\n \t{\n \t  const char *name = XSTR (x, 0);\n #if TARGET_MACHO\n-\t  if (darwin_picsymbol_stubs\n+\t  if (darwin_symbol_stubs\n \t      && MACHOPIC_INDIRECT\n \t      && machopic_classify_symbol (x) == MACHOPIC_UNDEFINED_FUNCTION)\n \t    name = machopic_indirection_name (x, /*stub_p=*/true);\n@@ -19481,7 +19481,7 @@ get_prev_label (tree function_name)\n   return NULL_TREE;\n }\n \n-/* Generate PIC and indirect symbol stubs.  */\n+/* Generate external symbol indirection stubs (PIC and non-PIC).  */\n \n void\n machopic_output_stub (FILE *file, const char *symb, const char *stub)\n@@ -24523,8 +24523,9 @@ rs6000_call_darwin_1 (rtx value, rtx func_desc, rtx tlsarg,\n   if ((cookie_val & CALL_LONG) != 0\n       && GET_CODE (func_desc) == SYMBOL_REF)\n     {\n-      /* FIXME: the longcall opt should not hang off picsymbol stubs.  */\n-      if (darwin_picsymbol_stubs && TARGET_32BIT)\n+      /* FIXME: the longcall opt should not hang off this flag, it is most\n+\t likely incorrect for kernel-mode code-generation.  */\n+      if (darwin_symbol_stubs && TARGET_32BIT)\n \tmake_island = true; /* Do nothing yet, retain the CALL_LONG flag.  */\n       else\n \t{"}, {"sha": "58577092480e2b4baf8d7dd82c45c2d4d7d400d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d308419c64c52c2d48bdf53a65e1790a2c897e83", "patch": "@@ -1,3 +1,10 @@\n+2019-08-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* obj-c++.dg/stubify-1.mm: Rename symbol stub option.\n+\t* obj-c++.dg/stubify-2.mm: Likewise.\n+\t* objc.dg/stubify-1.m: Likewise.\n+\t* objc.dg/stubify-2.m: Likewise.\n+\n 2013-08-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/90563"}, {"sha": "a32e282519cd158c49db97c284d02eba2feb6e0f", "filename": "gcc/testsuite/obj-c++.dg/stubify-1.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-1.mm?ref=d308419c64c52c2d48bdf53a65e1790a2c897e83", "patch": "@@ -4,7 +4,7 @@\n /* { dg-do compile { target *-*-darwin* } } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-require-effective-target ilp32 } */\n-/* { dg-options \"-Os -mdynamic-no-pic -fno-exceptions -mmacosx-version-min=10.4 -mpic-symbol-stubs\" } */\n+/* { dg-options \"-Os -mdynamic-no-pic -fno-exceptions -mmacosx-version-min=10.4 -msymbol-stubs\" } */\n \n typedef struct objc_object { } *id ;\n int x = 41 ;"}, {"sha": "69fea8def42e896c4c105d5cf49c8b2c53b8f9c5", "filename": "gcc/testsuite/obj-c++.dg/stubify-2.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-2.mm?ref=d308419c64c52c2d48bdf53a65e1790a2c897e83", "patch": "@@ -4,7 +4,7 @@\n /* { dg-do compile { target *-*-darwin* } } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-require-effective-target ilp32 } */\n-/* { dg-options \"-mdynamic-no-pic -fdump-rtl-jump -mmacosx-version-min=10.4 -mpic-symbol-stubs\" } */\n+/* { dg-options \"-mdynamic-no-pic -fdump-rtl-jump -mmacosx-version-min=10.4 -msymbol-stubs\" } */\n \n typedef struct objc_object { } *id ;\n int x = 41 ;"}, {"sha": "641595ccfe4c62597b422edc831ca27139999fec", "filename": "gcc/testsuite/objc.dg/stubify-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-1.m?ref=d308419c64c52c2d48bdf53a65e1790a2c897e83", "patch": "@@ -4,7 +4,7 @@\n /* { dg-do compile { target *-*-darwin* } } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-require-effective-target ilp32 } */\n-/* { dg-options \"-Os -mdynamic-no-pic -mmacosx-version-min=10.4 -mpic-symbol-stubs\" } */\n+/* { dg-options \"-Os -mdynamic-no-pic -mmacosx-version-min=10.4 -msymbol-stubs\" } */\n \n typedef struct objc_object { } *id ;\n int x = 41 ;"}, {"sha": "904ac44b2526cd281d1cdebe5f8019a4d80f8f6c", "filename": "gcc/testsuite/objc.dg/stubify-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d308419c64c52c2d48bdf53a65e1790a2c897e83/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-2.m?ref=d308419c64c52c2d48bdf53a65e1790a2c897e83", "patch": "@@ -4,7 +4,7 @@\n /* { dg-do compile { target *-*-darwin* } } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-require-effective-target ilp32 } */\n-/* { dg-options \"-mdynamic-no-pic -fdump-rtl-jump -mmacosx-version-min=10.4 -mpic-symbol-stubs\" } */\n+/* { dg-options \"-mdynamic-no-pic -fdump-rtl-jump -mmacosx-version-min=10.4 -msymbol-stubs\" } */\n \n typedef struct objc_object { } *id ;\n int x = 41 ;"}]}