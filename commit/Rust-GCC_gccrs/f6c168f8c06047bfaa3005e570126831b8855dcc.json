{"sha": "f6c168f8c06047bfaa3005e570126831b8855dcc", "node_id": "C_kwDOANBUbNoAKGY2YzE2OGY4YzA2MDQ3YmZhYTMwMDVlNTcwMTI2ODMxYjg4NTVkY2M", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2022-10-19T12:43:04Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2022-10-19T12:58:30Z"}, "message": "SRA: Limit replacement creation for accesses propagated from LHSs\n\nPR 107206 is fallout from the fix to PR 92706 where we started\npropagating accesses across assignments also from LHS to RHS of\nassignments so that we would not do harmful total scalarization of the\naggregates on the RHS.\n\nBut this can lead to new scalarization of these aggregates and in the\ntestcase of PR 107206 these can appear in superfluous uses of\nun-initialized values and spurious warnings.\n\nFixed by making sure the the accesses created by propagation in this\ndirection are only used as a basis for replacements when the structure\nwould be totally scalarized anyway.\n\ngcc/ChangeLog:\n\n2022-10-18  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/107206\n\t* tree-sra.cc (struct access): New field grp_result_of_prop_from_lhs.\n\t(analyze_access_subtree): Do not create replacements for accesses with\n\tthis flag when not toally scalarizing.\n\t(propagate_subaccesses_from_lhs): Set the new flag.\n\ngcc/testsuite/ChangeLog:\n\n2022-10-18  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/107206\n\t* g++.dg/tree-ssa/pr107206.C: New test.", "tree": {"sha": "461a834966c21517f33794719bfc4d438cbe15d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/461a834966c21517f33794719bfc4d438cbe15d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6c168f8c06047bfaa3005e570126831b8855dcc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5elVTFt/d09Vsoczv2PBvD+kNUAFAmNP9HcACgkQv2PBvD+k\nNUAa4w//ek2uswCcQv/MaKHUNx0uy0Mmb1pn4cNprxOb0o9fC3yr7nyQ0y0KWCOd\neOjP7M6XhrNb0lRfEGY8pFVkrtzEhrnek8HfTQGhvteIgyPoQLGI4sXgInMhSxon\n38zcoTuGI/CUKKz5mjfdjRaPzJFmOBKwFnIJjdFSj9taZTyAZf9Bid0CtBGUpG7J\nr1KsUXKvOXXwxl8KAFIHZA87uHPnHHvlA5NiigLy0MsZiaIaI9p0slfvCVcsEyRt\nzl88BfQH21KvNHMfbecYe1JQpY1dNpWC+NtL9LQ8x/G/LAaSeJqV1iXkalwnQEcL\nJ606XvAYC8Cfpskdyj6WU9iatijCUteeLvd999oFFGfTMs45b3rfUgsnmQ25S+LZ\nYragHAr6BpbOd/zCggLiuWEOX0G0lymur34MfEcgtV23VEbA5kRSPZYrEJkwLOdQ\nLaAu6RgJEL71hgxO3pSNc8S5D6fuljjTRrFlILa1nv7Nu3si/WGdPyff9tnRPYNA\nyBXGeRbYRBbTpHlU7V+phPtRgktxJInR+TxR4NtrC1iN6fODv5C9jhYrkn0LX5N7\nR0c3CTONxu2gS2GEdd9fe/1O+WK4ailBVZAvYAnABP5WTCFe99GqdnRsFULqebWS\nVjE71v0fYyVtvRPSMM/uDdi78LAWRV9ZCoBn3djSTHmm1bwCi64=\n=tDp/\n-----END PGP SIGNATURE-----", "payload": "tree 461a834966c21517f33794719bfc4d438cbe15d3\nparent cb994acc08b67f26a54e7c5dc1f4995a2ce24d98\nauthor Martin Jambor <mjambor@suse.cz> 1666183384 +0200\ncommitter Martin Jambor <mjambor@suse.cz> 1666184310 +0200\n\nSRA: Limit replacement creation for accesses propagated from LHSs\n\nPR 107206 is fallout from the fix to PR 92706 where we started\npropagating accesses across assignments also from LHS to RHS of\nassignments so that we would not do harmful total scalarization of the\naggregates on the RHS.\n\nBut this can lead to new scalarization of these aggregates and in the\ntestcase of PR 107206 these can appear in superfluous uses of\nun-initialized values and spurious warnings.\n\nFixed by making sure the the accesses created by propagation in this\ndirection are only used as a basis for replacements when the structure\nwould be totally scalarized anyway.\n\ngcc/ChangeLog:\n\n2022-10-18  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/107206\n\t* tree-sra.cc (struct access): New field grp_result_of_prop_from_lhs.\n\t(analyze_access_subtree): Do not create replacements for accesses with\n\tthis flag when not toally scalarizing.\n\t(propagate_subaccesses_from_lhs): Set the new flag.\n\ngcc/testsuite/ChangeLog:\n\n2022-10-18  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/107206\n\t* g++.dg/tree-ssa/pr107206.C: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6c168f8c06047bfaa3005e570126831b8855dcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6c168f8c06047bfaa3005e570126831b8855dcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6c168f8c06047bfaa3005e570126831b8855dcc/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb994acc08b67f26a54e7c5dc1f4995a2ce24d98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb994acc08b67f26a54e7c5dc1f4995a2ce24d98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb994acc08b67f26a54e7c5dc1f4995a2ce24d98"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "34810ad2b7b84ec37b0ae5e77fcca929133617db", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr107206.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c168f8c06047bfaa3005e570126831b8855dcc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr107206.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c168f8c06047bfaa3005e570126831b8855dcc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr107206.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr107206.C?ref=f6c168f8c06047bfaa3005e570126831b8855dcc", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++17 }\n+// { dg-options \"-O -Wuninitialized\" }\n+\n+#include <optional>\n+struct X {\n+    X() = default;\n+    X(X const& r) : i(r.i) {}\n+    int i;\n+};\n+struct Y {\n+    Y() : x() {}\n+    X x;\n+    std::optional<int> o;\n+};\n+struct Z {\n+    Y y;\n+    explicit Z(Y y) : y(y) {}\n+};\n+void f(Y const&);\n+void test() {\n+    Y const y;\n+    Z z(y);\n+    z.y.o = 1;\n+    auto const w = z;\n+    f(w.y);\n+}"}, {"sha": "6cbeddfc548b7e7efa58f671e649c2bdc9357c3e", "filename": "gcc/tree-sra.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c168f8c06047bfaa3005e570126831b8855dcc/gcc%2Ftree-sra.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c168f8c06047bfaa3005e570126831b8855dcc/gcc%2Ftree-sra.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.cc?ref=f6c168f8c06047bfaa3005e570126831b8855dcc", "patch": "@@ -260,6 +260,9 @@ struct access\n \n   /* Should TREE_NO_WARNING of a replacement be set?  */\n   unsigned grp_no_warning : 1;\n+\n+  /* Result of propagation accross link from LHS to RHS.  */\n+  unsigned grp_result_of_prop_from_lhs : 1;\n };\n \n typedef struct access *access_p;\n@@ -2532,6 +2535,9 @@ analyze_access_subtree (struct access *root, struct access *parent,\n   if (allow_replacements && expr_with_var_bounded_array_refs_p (root->expr))\n     allow_replacements = false;\n \n+  if (!totally && root->grp_result_of_prop_from_lhs)\n+    allow_replacements = false;\n+\n   for (child = root->first_child; child; child = child->next_sibling)\n     {\n       hole |= covered_to < child->offset;\n@@ -2959,6 +2965,7 @@ propagate_subaccesses_from_lhs (struct access *lacc, struct access *racc)\n \t  struct access *new_acc\n \t    = create_artificial_child_access (racc, lchild, norm_offset,\n \t\t\t\t\t      true, false);\n+\t  new_acc->grp_result_of_prop_from_lhs = 1;\n \t  propagate_subaccesses_from_lhs (lchild, new_acc);\n \t}\n       else"}]}