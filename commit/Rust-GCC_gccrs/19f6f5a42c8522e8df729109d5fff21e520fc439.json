{"sha": "19f6f5a42c8522e8df729109d5fff21e520fc439", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlmNmY1YTQyYzg1MjJlOGRmNzI5MTA5ZDVmZmYyMWU1MjBmYzQzOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-05-23T10:35:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-05-23T10:35:39Z"}, "message": "intro.xml: Adjust links to ISO documents.\n\n2008-05-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* doc/xml/manual/intro.xml: Adjust links to ISO documents.\n\nFrom-SVN: r135796", "tree": {"sha": "9b244977672c09da118c78d10fa4765d6e6000a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b244977672c09da118c78d10fa4765d6e6000a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19f6f5a42c8522e8df729109d5fff21e520fc439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19f6f5a42c8522e8df729109d5fff21e520fc439", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19f6f5a42c8522e8df729109d5fff21e520fc439", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19f6f5a42c8522e8df729109d5fff21e520fc439/comments", "author": null, "committer": null, "parents": [{"sha": "ebd15f806619924c25f564330c5dd1a4ec39fad2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd15f806619924c25f564330c5dd1a4ec39fad2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebd15f806619924c25f564330c5dd1a4ec39fad2"}], "stats": {"total": 148, "additions": 76, "deletions": 72}, "files": [{"sha": "8d83a2483d3afe1b5f1073a842f8d6316623d807", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f6f5a42c8522e8df729109d5fff21e520fc439/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f6f5a42c8522e8df729109d5fff21e520fc439/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=19f6f5a42c8522e8df729109d5fff21e520fc439", "patch": "@@ -1,3 +1,7 @@\n+2008-05-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* doc/xml/manual/intro.xml: Adjust links to ISO documents.\n+\n 2008-05-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/c_std/cmath (fpclassify): Use __builtin_fpclassify."}, {"sha": "1596c3b3feba2bf56cc299883ed97d2a9a4b492e", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f6f5a42c8522e8df729109d5fff21e520fc439/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f6f5a42c8522e8df729109d5fff21e520fc439/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=19f6f5a42c8522e8df729109d5fff21e520fc439", "patch": "@@ -167,85 +167,85 @@\n       </para>\n \n       <variablelist>\n-    <varlistentry><term><ulink url=\"lwg-defects.html#5\">5</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#5\">5</ulink>:\n         <emphasis>string::compare specification questionable</emphasis>\n     </term>\n     <listitem><para>This should be two overloaded functions rather than a single function.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#17\">17</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#17\">17</ulink>:\n         <emphasis>Bad bool parsing</emphasis>\n     </term>\n     <listitem><para>Apparently extracting Boolean values was messed up...\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#19\">19</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#19\">19</ulink>:\n         <emphasis>&quot;Noconv&quot; definition too vague</emphasis>\n     </term>\n     <listitem><para>If <code>codecvt::do_in</code> returns <code>noconv</code> there are\n         no changes to the values in <code>[to, to_limit)</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#22\">22</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#22\">22</ulink>:\n         <emphasis>Member open vs flags</emphasis>\n     </term>\n     <listitem><para>Re-opening a file stream does <emphasis>not</emphasis> clear the state flags.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#25\">25</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#25\">25</ulink>:\n         <emphasis>String operator&lt;&lt; uses width() value wrong</emphasis>\n     </term>\n     <listitem><para>Padding issues.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#48\">48</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#48\">48</ulink>:\n         <emphasis>Use of non-existent exception constructor</emphasis>\n     </term>\n     <listitem><para>An instance of <code>ios_base::failure</code> is constructed instead.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#49\">49</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#49\">49</ulink>:\n         <emphasis>Underspecification of ios_base::sync_with_stdio</emphasis>\n     </term>\n     <listitem><para>The return type is the <emphasis>previous</emphasis> state of synchronization.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#50\">50</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#50\">50</ulink>:\n         <emphasis>Copy constructor and assignment operator of ios_base</emphasis>\n     </term>\n     <listitem><para>These members functions are declared <code>private</code> and are\n         thus inaccessible.  Specifying the correct semantics of\n         &quot;copying stream state&quot; was deemed too complicated.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#60\">60</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#60\">60</ulink>:\n         <emphasis>What is a formatted input function?</emphasis>\n     </term>\n     <listitem><para>This DR made many widespread changes to <code>basic_istream</code>\n         and <code>basic_ostream</code> all of which have been implemented.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#63\">63</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#63\">63</ulink>:\n         <emphasis>Exception-handling policy for unformatted output</emphasis>\n     </term>\n     <listitem><para>Make the policy consistent with that of formatted input, unformatted\n         input, and formatted output.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#68\">68</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#68\">68</ulink>:\n         <emphasis>Extractors for char* should store null at end</emphasis>\n     </term>\n     <listitem><para>And they do now.  An editing glitch in the last item in the list of\n         [27.6.1.2.3]/7.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#74\">74</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#74\">74</ulink>:\n         <emphasis>Garbled text for codecvt::do_max_length</emphasis>\n     </term>\n     <listitem><para>The text of the standard was gibberish.  Typos gone rampant.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#75\">75</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#75\">75</ulink>:\n         <emphasis>Contradiction in codecvt::length's argument types</emphasis>\n     </term>\n     <listitem><para>Change the first parameter to <code>stateT&amp;</code> and implement\n@@ -259,14 +259,14 @@\n         <code>max_size()</code> rather than <code>npos</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#90\">90</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#90\">90</ulink>:\n         <emphasis>Incorrect description of operator&gt;&gt; for strings</emphasis>\n     </term>\n     <listitem><para>The effect contain <code>isspace(c,getloc())</code> which must be\n         replaced by <code>isspace(c,is.getloc())</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#91\">91</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#91\">91</ulink>:\n         <emphasis>Description of operator&gt;&gt; and getline() for string&lt;&gt;\n \t    might cause endless loop</emphasis>\n     </term>\n@@ -275,7 +275,7 @@\n \tnot required to set <code>gcount</code>).\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#103\">103</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#103\">103</ulink>:\n         <emphasis>set::iterator is required to be modifiable, but this allows\n \t    modification of keys.</emphasis>\n     </term>\n@@ -284,364 +284,364 @@\n \t</code> are constant iterators.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#109\">109</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#109\">109</ulink>:\n         <emphasis>Missing binders for non-const sequence elements</emphasis>\n     </term>\n     <listitem><para>The <code>binder1st</code> and <code>binder2nd</code> didn't have an\n         <code>operator()</code> taking a non-const parameter.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#110\">110</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#110\">110</ulink>:\n         <emphasis>istreambuf_iterator::equal not const</emphasis>\n     </term>\n     <listitem><para>This was not a const member function.  Note that the DR says to\n         replace the function with a const one; we have instead provided an\n         overloaded version with identical contents.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#117\">117</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#117\">117</ulink>:\n         <emphasis>basic_ostream uses nonexistent num_put member functions</emphasis>\n     </term>\n     <listitem><para><code>num_put::put()</code> was overloaded on the wrong types.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#118\">118</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#118\">118</ulink>:\n         <emphasis>basic_istream uses nonexistent num_get member functions</emphasis>\n     </term>\n     <listitem><para>Same as 117, but for <code>num_get::get()</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#129\">129</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#129\">129</ulink>:\n         <emphasis>Need error indication from seekp() and seekg()</emphasis>\n     </term>\n     <listitem><para>These functions set <code>failbit</code> on error now.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#136\">136</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#136\">136</ulink>:\n         <emphasis>seekp, seekg setting wrong streams?</emphasis>\n     </term>\n     <listitem><para><code>seekp</code> should only set the output stream, and\n         <code>seekg</code> should only set the input stream.\n     </para></listitem></varlistentry>\n \n-<!--<varlistentry><term><ulink url=\"lwg-defects.html#159\">159</ulink>:\n+<!--<varlistentry><term><ulink url=\"../ext/lwg-defects.html#159\">159</ulink>:\n         <emphasis>Strange use of underflow()</emphasis>\n     </term>\n     <listitem><para>In fstream.tcc, the basic_filebuf&lt;&gt;::showmanyc() function\n         should probably not be calling <code>underflow()</code>.\n     </para></listitem></varlistentry> -->\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#167\">167</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#167\">167</ulink>:\n         <emphasis>Improper use of traits_type::length()</emphasis>\n     </term>\n     <listitem><para><code>op&lt;&lt;</code> with a <code>const char*</code> was\n         calculating an incorrect number of characters to write.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#169\">169</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#169\">169</ulink>:\n         <emphasis>Bad efficiency of overflow() mandated</emphasis>\n     </term>\n     <listitem><para>Grow efficiently the internal array object.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#171\">171</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#171\">171</ulink>:\n         <emphasis>Strange seekpos() semantics due to joint position</emphasis>\n     </term>\n     <listitem><para>Quite complex to summarize...\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#181\">181</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#181\">181</ulink>:\n         <emphasis>make_pair() unintended behavior</emphasis>\n     </term>\n     <listitem><para>This function used to take its arguments as reference-to-const, now\n         it copies them (pass by value).\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#195\">195</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#195\">195</ulink>:\n         <emphasis>Should basic_istream::sentry's constructor ever set eofbit?</emphasis>\n     </term>\n     <listitem><para>Yes, it can, specifically if EOF is reached while skipping whitespace.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#211\">211</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#211\">211</ulink>:\n         <emphasis>operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</emphasis>\n     </term>\n     <listitem><para>If nothing is extracted into the string, <code>op&gt;&gt;</code> now\n         sets <code>failbit</code> (which can cause an exception, etc., etc.).\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#214\">214</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#214\">214</ulink>:\n         <emphasis>set::find() missing const overload</emphasis>\n     </term>\n     <listitem><para>Both <code>set</code> and <code>multiset</code> were missing\n         overloaded find, lower_bound, upper_bound, and equal_range functions\n         for const instances.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#231\">231</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#231\">231</ulink>:\n         <emphasis>Precision in iostream?</emphasis>\n     </term>\n     <listitem><para>For conversion from a floating-point type, <code>str.precision()</code>\n         is specified in the conversion specification.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-active.html#233\">233</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-active.html#233\">233</ulink>:\n         <emphasis>Insertion hints in associative containers</emphasis>\n     </term>\n     <listitem><para>Implement N1780, first check before then check after, insert as close\n         to hint as possible.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#235\">235</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#235\">235</ulink>:\n         <emphasis>No specification of default ctor for reverse_iterator</emphasis>\n     </term>\n     <listitem><para>The declaration of <code>reverse_iterator</code> lists a default constructor.\n         However, no specification is given what this constructor should do.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#241\">241</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#241\">241</ulink>:\n         <emphasis>Does unique_copy() require CopyConstructible and Assignable?</emphasis>\n     </term>\n     <listitem><para>Add a helper for forward_iterator/output_iterator, fix the existing\n         one for input_iterator/output_iterator to not rely on Assignability.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#243\">243</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#243\">243</ulink>:\n         <emphasis>get and getline when sentry reports failure</emphasis>\n     </term>\n     <listitem><para>Store a null character only if the character array has a non-zero size.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#251\">251</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#251\">251</ulink>:\n         <emphasis>basic_stringbuf missing allocator_type</emphasis>\n     </term>\n     <listitem><para>This nested typedef was originally not specified.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#253\">253</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#253\">253</ulink>:\n         <emphasis>valarray helper functions are almost entirely useless</emphasis>\n     </term>\n     <listitem><para>Make the copy constructor and copy-assignment operator declarations\n         public in gslice_array, indirect_array, mask_array, slice_array; provide\n \tdefinitions.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#265\">265</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#265\">265</ulink>:\n         <emphasis>std::pair::pair() effects overly restrictive</emphasis>\n     </term>\n     <listitem><para>The default ctor would build its members from copies of temporaries;\n         now it simply uses their respective default ctors.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#266\">266</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#266\">266</ulink>:\n         <emphasis>bad_exception::~bad_exception() missing Effects clause</emphasis>\n     </term>\n     <listitem><para>The <code>bad_</code>* classes no longer have destructors (they\n         are trivial), since no description of them was ever given.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#271\">271</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#271\">271</ulink>:\n         <emphasis>basic_iostream missing typedefs</emphasis>\n     </term>\n     <listitem><para>The typedefs it inherits from its base classes can't be used, since\n         (for example) <code>basic_iostream&lt;T&gt;::traits_type</code> is ambiguous.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#275\">275</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#275\">275</ulink>:\n         <emphasis>Wrong type in num_get::get() overloads</emphasis>\n     </term>\n     <listitem><para>Similar to 118.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#280\">280</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#280\">280</ulink>:\n         <emphasis>Comparison of reverse_iterator to const reverse_iterator</emphasis>\n     </term>\n     <listitem><para>Add global functions with two template parameters.\n         (NB: not added for now a templated assignment operator) \n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#292\">292</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#292\">292</ulink>:\n         <emphasis>Effects of a.copyfmt (a)</emphasis>\n     </term>\n     <listitem><para>If <code>(this == &amp;rhs)</code> do nothing.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#300\">300</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#300\">300</ulink>:\n         <emphasis>List::merge() specification incomplete</emphasis>\n     </term>\n     <listitem><para>If <code>(this == &amp;x)</code> do nothing.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#303\">303</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#303\">303</ulink>:\n         <emphasis>Bitset input operator underspecified</emphasis>\n     </term>\n     <listitem><para>Basically, compare the input character to <code>is.widen(0)</code>\n         and <code>is.widen(1)</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#305\">305</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#305\">305</ulink>:\n         <emphasis>Default behavior of codecvt&lt;wchar_t, char, mbstate_t&gt;::length()</emphasis>\n     </term>\n     <listitem><para>Do not specify what <code>codecvt&lt;wchar_t, char, mbstate_t&gt;::do_length</code>\n         must return.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#328\">328</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#328\">328</ulink>:\n         <emphasis>Bad sprintf format modifier in money_put&lt;&gt;::do_put()</emphasis>\n     </term>\n     <listitem><para>Change the format string to &quot;%.0Lf&quot;.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#365\">365</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#365\">365</ulink>:\n         <emphasis>Lack of const-qualification in clause 27</emphasis>\n     </term>\n     <listitem><para>Add const overloads of <code>is_open</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#389\">389</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#389\">389</ulink>:\n         <emphasis>Const overload of valarray::operator[] returns by value</emphasis>\n     </term>\n     <listitem><para>Change it to return a <code>const T&amp;</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#402\">402</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#402\">402</ulink>:\n         <emphasis>Wrong new expression in [some_]allocator::construct</emphasis>\n     </term>\n     <listitem><para>Replace &quot;new&quot; with &quot;::new&quot;.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#409\">409</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#409\">409</ulink>:\n         <emphasis>Closing an fstream should clear the error state</emphasis>\n     </term>\n     <listitem><para>Have <code>open</code> clear the error flags.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-active.html#431\">431</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-active.html#431\">431</ulink>:\n         <emphasis>Swapping containers with unequal allocators</emphasis>\n     </term>\n     <listitem><para>Implement Option 3, as per N1599.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#432\">432</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#432\">432</ulink>:\n         <emphasis>stringbuf::overflow() makes only one write position\n \t    available</emphasis>\n     </term>\n     <listitem><para>Implement the resolution, beyond DR 169.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#434\">434</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#434\">434</ulink>:\n         <emphasis>bitset::to_string() hard to use</emphasis>\n     </term>\n     <listitem><para>Add three overloads, taking fewer template arguments.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#438\">438</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#438\">438</ulink>:\n         <emphasis>Ambiguity in the \"do the right thing\" clause</emphasis>\n     </term>\n     <listitem><para>Implement the resolution, basically cast less.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#453\">453</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#453\">453</ulink>:\n         <emphasis>basic_stringbuf::seekoff need not always fail for an empty stream</emphasis>\n     </term>\n     <listitem><para>Don't fail if the next pointer is null and newoff is zero.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#455\">455</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#455\">455</ulink>:\n         <emphasis>cerr::tie() and wcerr::tie() are overspecified</emphasis>\n     </term>\n     <listitem><para>Initialize cerr tied to cout and wcerr tied to wcout.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#464\">464</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#464\">464</ulink>:\n         <emphasis>Suggestion for new member functions in standard containers</emphasis>\n     </term>\n     <listitem><para>Add <code>data()</code> to <code>std::vector</code> and\n         <code>at(const key_type&amp;)</code> to <code>std::map</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#508\">508</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#508\">508</ulink>:\n         <emphasis>Bad parameters for ranlux64_base_01</emphasis>\n     </term>\n     <listitem><para>Fix the parameters.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-closed.html#512\">512</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-closed.html#512\">512</ulink>:\n         <emphasis>Seeding subtract_with_carry_01 from a single unsigned long</emphasis>\n     </term>\n     <listitem><para>Construct a <code>linear_congruential</code> engine and seed with it.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-closed.html#526\">526</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-closed.html#526\">526</ulink>:\n         <emphasis>Is it undefined if a function in the standard changes in\n \t    parameters?</emphasis>\n     </term>\n     <listitem><para>Use &amp;value.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#538\">538</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#538\">538</ulink>:\n         <emphasis>241 again: Does unique_copy() require CopyConstructible\n \t    and Assignable?</emphasis>\n     </term>\n     <listitem><para>In case of input_iterator/output_iterator rely on Assignability of\n         input_iterator' value_type.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#541\">541</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#541\">541</ulink>:\n         <emphasis>shared_ptr template assignment and void</emphasis>\n     </term>\n     <listitem><para>Add an auto_ptr&lt;void&gt; specialization.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#543\">543</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#543\">543</ulink>:\n         <emphasis>valarray slice default constructor</emphasis>\n     </term>\n     <listitem><para>Follow the straightforward proposed resolution.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#586\">586</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#586\">586</ulink>:\n         <emphasis>string inserter not a formatted function</emphasis>\n     </term>\n     <listitem><para>Change it to be a formatted output function (i.e. catch exceptions).\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-active.html#596\">596</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-active.html#596\">596</ulink>:\n         <emphasis>27.8.1.3 Table 112 omits \"a+\" and \"a+b\" modes</emphasis>\n     </term>\n     <listitem><para>Add the missing modes to fopen_mode.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-defects.html#660\">660</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#660\">660</ulink>:\n         <emphasis>Missing bitwise operations</emphasis>\n     </term>\n     <listitem><para>Add the missing operations.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-active.html#693\">693</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#693\">693</ulink>:\n         <emphasis>std::bitset::all() missing</emphasis>\n     </term>\n     <listitem><para>Add it, consistently with the discussion.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-active.html#695\">695</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-defects.html#695\">695</ulink>:\n         <emphasis>ctype&lt;char&gt;::classic_table() not accessible</emphasis>\n     </term>\n     <listitem><para>Make the member functions table and classic_table public.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-active.html#761\">761</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-active.html#761\">761</ulink>:\n         <emphasis>unordered_map needs an at() member function</emphasis>\n     </term>\n     <listitem><para>In C++0x mode, add at() and at() const.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-active.html#778\">778</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-active.html#778\">778</ulink>:\n         <emphasis>std::bitset does not have any constructor taking a string literal</emphasis>\n     </term>\n     <listitem><para>Add it.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><ulink url=\"lwg-active.html#781\">781</ulink>:\n+    <varlistentry><term><ulink url=\"../ext/lwg-active.html#781\">781</ulink>:\n         <emphasis>std::complex should add missing C99 functions</emphasis>\n     </term>\n     <listitem><para>In C++0x mode, add std::proj."}]}