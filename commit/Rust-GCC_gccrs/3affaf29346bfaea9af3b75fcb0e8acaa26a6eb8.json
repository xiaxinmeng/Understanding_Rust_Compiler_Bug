{"sha": "3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FmZmFmMjkzNDZiZmFlYTlhZjNiNzVmY2IwZThhY2FhMjZhNmViOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-07-18T03:24:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-07-18T03:24:53Z"}, "message": "calls.c (prepare_call_address): New parameter SIBCALLP.\n\n        * calls.c (prepare_call_address): New parameter SIBCALLP.  If true,\n        don't force the function address into a register.\n        (expand_call, emit_library_call_value_1): Update callers.\n        * builtins.c (expand_builtin_apply): Likewise.\n        * expr.h (prepare_call_address): Update decl.\n\nFrom-SVN: r44095", "tree": {"sha": "d5602a9380e9d435ec805a405cf3d2606a5aa4c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5602a9380e9d435ec805a405cf3d2606a5aa4c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8/comments", "author": null, "committer": null, "parents": [{"sha": "2bd2bdd9d2890d459bb896e320c47f09d5bce054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd2bdd9d2890d459bb896e320c47f09d5bce054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd2bdd9d2890d459bb896e320c47f09d5bce054"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "b0525f874a008665e3aa195027ac74a11dd2bddb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8", "patch": "@@ -1,11 +1,19 @@\n+2001-07-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* calls.c (prepare_call_address): New parameter SIBCALLP.  If true,\n+\tdon't force the function address into a register.\n+\t(expand_call, emit_library_call_value_1): Update callers.\n+\t* builtins.c (expand_builtin_apply): Likewise.\n+\t* expr.h (prepare_call_address): Update decl.\n+\n 2001-07-17  Chandrakala Chavva  <cchavva@redhat.com>\n \n-        * config.gcc: For *-*-chorusos triplet, get chorus.h file from\n-        config directory.\n-        * config/i386/chorus.h: Move up.\n-        * config/sparc/chorus.h: Likewise.\n-        * config/rs6000/chorus.h: Likewise.\n-        * config/chorus.h: Moved here.\n+\t* config.gcc: For *-*-chorusos triplet, get chorus.h file from\n+\tconfig directory.\n+\t* config/i386/chorus.h: Move up.\n+\t* config/sparc/chorus.h: Likewise.\n+\t* config/rs6000/chorus.h: Likewise.\n+\t* config/chorus.h: Moved here.\n \n 2001-07-17  Andreas Schwab  <schwab@suse.de>\n  "}, {"sha": "8a44a7c679864898cf438b6c66a2fbaf60faf1ad", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8", "patch": "@@ -1138,7 +1138,7 @@ expand_builtin_apply (function, arguments, argsize)\n     }\n \n   /* All arguments and registers used for the call are set up by now!  */\n-  function = prepare_call_address (function, NULL_TREE, &call_fusage, 0);\n+  function = prepare_call_address (function, NULL_TREE, &call_fusage, 0, 0);\n \n   /* Ensure address is valid.  SYMBOL_REF is already valid, so no need,\n      and we don't want to load it into a register as an optimization,"}, {"sha": "045c9f9e1a2f1c0e01f46d785eb5ff62c3105188", "filename": "gcc/calls.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8", "patch": "@@ -355,11 +355,12 @@ calls_function_1 (exp, which)\n    CALL_INSN_FUNCTION_USAGE information.  */\n \n rtx\n-prepare_call_address (funexp, fndecl, call_fusage, reg_parm_seen)\n+prepare_call_address (funexp, fndecl, call_fusage, reg_parm_seen, sibcallp)\n      rtx funexp;\n      tree fndecl;\n      rtx *call_fusage;\n      int reg_parm_seen;\n+     int sibcallp;\n {\n   rtx static_chain_value = 0;\n \n@@ -377,7 +378,7 @@ prepare_call_address (funexp, fndecl, call_fusage, reg_parm_seen)\n     funexp = ((SMALL_REGISTER_CLASSES && reg_parm_seen)\n \t      ? force_not_mem (memory_address (FUNCTION_MODE, funexp))\n \t      : memory_address (FUNCTION_MODE, funexp));\n-  else\n+  else if (! sibcallp)\n     {\n #ifndef NO_FUNCTION_CSE\n       if (optimize && ! flag_no_function_cse)\n@@ -3038,7 +3039,7 @@ expand_call (exp, target, ignore)\n \t}\n \n       funexp = prepare_call_address (funexp, fndecl, &call_fusage,\n-\t\t\t\t     reg_parm_seen);\n+\t\t\t\t     reg_parm_seen, pass == 0);\n \n       load_register_parameters (args, num_actuals, &call_fusage, flags);\n \n@@ -4005,7 +4006,7 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n   else\n     argnum = 0;\n \n-  fun = prepare_call_address (fun, NULL_TREE, &call_fusage, 0);\n+  fun = prepare_call_address (fun, NULL_TREE, &call_fusage, 0, 0);\n \n   /* Now load any reg parms into their regs.  */\n "}, {"sha": "ed79d99d05bd9057ae7be253137191dff7faafd0", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=3affaf29346bfaea9af3b75fcb0e8acaa26a6eb8", "patch": "@@ -1112,7 +1112,7 @@ extern rtx trampoline_address PARAMS ((tree));\n    in its original home.  This becomes invalid if any more code is emitted.  */\n extern rtx hard_function_value PARAMS ((tree, tree, int));\n \n-extern rtx prepare_call_address\tPARAMS ((rtx, tree, rtx *, int));\n+extern rtx prepare_call_address\tPARAMS ((rtx, tree, rtx *, int, int));\n \n extern rtx expand_call PARAMS ((tree, rtx, int));\n "}]}