{"sha": "5944b57e254405218515bf28f3b1a06aa711083e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk0NGI1N2UyNTQ0MDUyMTg1MTViZjI4ZjNiMWEwNmFhNzExMDgzZQ==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-04-20T19:15:26Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-04-20T19:15:26Z"}, "message": "entered into RCS\n\nFrom-SVN: r807", "tree": {"sha": "5f272458cd3f166d0e69580e638a5f6bb76cc68f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f272458cd3f166d0e69580e638a5f6bb76cc68f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5944b57e254405218515bf28f3b1a06aa711083e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5944b57e254405218515bf28f3b1a06aa711083e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5944b57e254405218515bf28f3b1a06aa711083e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5944b57e254405218515bf28f3b1a06aa711083e/comments", "author": null, "committer": null, "parents": [{"sha": "c4470c42db02f8b2c225dae6734e905ab5feabae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4470c42db02f8b2c225dae6734e905ab5feabae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4470c42db02f8b2c225dae6734e905ab5feabae"}], "stats": {"total": 92, "additions": 51, "deletions": 41}, "files": [{"sha": "4f3001d31572ac6446a74634189144091f6a6ee3", "filename": "gcc/make-cc1.com", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5944b57e254405218515bf28f3b1a06aa711083e/gcc%2Fmake-cc1.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5944b57e254405218515bf28f3b1a06aa711083e/gcc%2Fmake-cc1.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-cc1.com?ref=5944b57e254405218515bf28f3b1a06aa711083e", "patch": "@@ -212,6 +212,8 @@ $!  that should not be compiled.  This allows us to handle special cases.\n $!\n $compile:\n $subroutine\n+$on error then goto c_err\n+$on control_y then goto c_err\n $open ifile$ 'p1'\n $loop: read ifile$ line/end=c_done\n $!\n@@ -246,6 +248,13 @@ $!'f$verify(0)\n $goto loop1\n $!\n $goto loop\n+$!\n+$! In case of error or abort, go here (In order to close file).\n+$!\n+$c_err: !'f$verify(0)\n+$close ifile$\n+$exit %x2c\n+$!\n $c_done:\n $close ifile$\n $endsubroutine"}, {"sha": "736377ba0ba0431cf490fe42ca320e656c54ff48", "filename": "gcc/make-l2.com", "status": "modified", "additions": 42, "deletions": 41, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5944b57e254405218515bf28f3b1a06aa711083e/gcc%2Fmake-l2.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5944b57e254405218515bf28f3b1a06aa711083e/gcc%2Fmake-l2.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-l2.com?ref=5944b57e254405218515bf28f3b1a06aa711083e", "patch": "@@ -7,6 +7,10 @@ $! have the current compiler installed, otherwise some of the builtins will\n $! not be recognized.  Once you have built libgcc2.olb, you can merge this\n $! with gnu_cc:[000000]gcclib.olb\n $!\n+$! All of the source code is assumed to be in libgcc2.c, and a list of the\n+$! modules that we need from there is in libgcc2.list (which is generated\n+$! when config-gcc.com is run).\n+$!\n $if f$search(\"gcc-cc1.exe\").eqs.\"\"\n $  then\n $    gcc_cc1:=$gnu_cc:[000000]gcc-cc1\n@@ -19,8 +23,13 @@ $if f$search(\"gcc-cpp.exe\").eqs.\"\"\n $  then\n $    gcc_cpp:=$gnu_cc:[000000]gcc-cpp\n $    if f$extract(0,1,f$trnlnm(\"GNU_CC_VERSION\")).eqs.\"1\" then goto nocompile\n+$    Version:='f$trnlnm(\"GNU_CC_VERSION\")'\n $  else\n $    gcc_cpp:=$sys$disk:[]gcc-cpp\n+$    open ifile$ version.opt\n+$    read ifile$ line\n+$    close ifile$\n+$    Version=line-\"ident=\"\"\"-\"\"\"\n $  endif\n $!\n $gcc_as:=$gnu_cc:[000000]gcc-as\n@@ -37,55 +46,47 @@ $exit 0\n $!\n $compile:\n $lib/create libgcc2.olb\n-$call compile_libgcc2 \"L_muldi3\"\n-$call compile_libgcc2 \"L_divdi3\"\n-$call compile_libgcc2 \"L_moddi3\"\n-$call compile_libgcc2 \"L_udivdi3\"\n-$call compile_libgcc2 \"L_umoddi3\"\n-$call compile_libgcc2 \"L_negdi2\"\n-$call compile_libgcc2 \"L_lshrdi3\"\n-$call compile_libgcc2 \"L_lshldi3\"\n-$call compile_libgcc2 \"L_ashldi3\"\n-$call compile_libgcc2 \"L_ashrdi3\"\n-$call compile_libgcc2 \"L_udivmoddi4\"\n-$call compile_libgcc2 \"L_cmpdi2\"\n-$call compile_libgcc2 \"L_ucmpdi2\"\n-$call compile_libgcc2 \"L_floatdidf\"\n-$call compile_libgcc2 \"L_floatdisf\"\n-$call compile_libgcc2 \"L_fixunsdfsi\"\n-$call compile_libgcc2 \"L_fixunssfsi\"\n-$call compile_libgcc2 \"L_fixunsdfdi\"\n-$call compile_libgcc2 \"L_fixdfdi\"\n-$call compile_libgcc2 \"L_fixunssfdi\"\n-$call compile_libgcc2 \"L_fixsfdi\"\n-$call compile_libgcc2 \"L_varargs\"\n-$call compile_libgcc2 \"L_eprintf\"\n-$call compile_libgcc2 \"L_builtin_new\"\n-$call compile_libgcc2 \"L_builtin_New\" L_builtin_nnew\n-$call compile_libgcc2 \"L_builtin_del\"\n-$call compile_libgcc2 \"L_bb\"\n-$call compile_libgcc2 \"L_shtab\"\n-$call compile_libgcc2 \"L_clear_cache\"\n-$call compile_libgcc2 \"L_trampoline\"\n-$call compile_libgcc2 \"L__main\"\n-$!call compile_libgcc2 \"L_exit\"\n-$exit\n-$!\n-$compile_libgcc2:\n-$subroutine\n-$objname = p1\n-$if p2.nes.\"\" then objname = p2\n+$on error then goto c_err\n+$on control_y then goto c_err\n+$open ifile$ libgcc2.list\n+$loop: read ifile$ line/end=c_done\n+$!\n+$i=0\n+$loop1:\n+$flnm=f$element(i,\" \",line)\n+$i=i+1\n+$if flnm.eqs.\"\" then goto loop\n+$if flnm.eqs.\" \" then goto loop\n+$!\n+$flnm = \"L\"+flnm\n+$if flnm.eqs.\"L_exit\" then goto loop1\n+$write sys$output \"$ gcc/debug/define=''flnm' LIBGCC2.C\"\n+$!\n+$objname = flnm\n+$if flnm.eqs.\"L_builtin_New\" then objname = \"L_builtin_nnew\"\n $!\n $! We do this by hand, since the VMS compiler driver does not have a way\n $! of specifying an alternate location for the compiler executables.\n $!\n-$ gcc_cpp \"-I[]\" \"-I[.CONFIG]\" \"-D''p1'\"  LIBGCC2.C 'cpp_file'\n+$ gcc_cpp \"-I[]\" \"-I[.CONFIG]\" \"-D''flnm'\"  LIBGCC2.C 'cpp_file'\n $ gcc_cc1 'cpp_file' -dumpbase 'objname' -\n         -quiet -mgnu -g \"-O1\" -mvaxc-alignment   -o 's_file'\n $ delete/nolog 'cpp_file';\n-$ gcc_as 's_file'  -o 'objname'.OBJ\n+$ gcc_as \"-vGNU CC  V''Version'\" 's_file'  -o 'objname'.OBJ\n $ delete/nolog 's_file';\n $!\n $lib libgcc2.olb 'objname'.obj\n $del 'objname'.obj;/nolog\n-$endsubroutine\n+$!\n+$goto loop1\n+$!\n+$goto loop\n+$!\n+$! In case of error or abort, go here (In order to close file).\n+$!\n+$c_err: !'f$verify(0)\n+$close ifile$\n+$ exit %x2c\n+$!\n+$c_done:\n+$close ifile$"}]}