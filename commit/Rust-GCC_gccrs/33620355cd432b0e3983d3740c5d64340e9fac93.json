{"sha": "33620355cd432b0e3983d3740c5d64340e9fac93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM2MjAzNTVjZDQzMmIwZTM5ODNkMzc0MGM1ZDY0MzQwZTlmYWM5Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-08-29T19:57:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-08-29T19:57:07Z"}, "message": "ia64.h (HARD_REGNO_NREGS): Return 1 for CCImode in general purpose registers.\n\n\t* config/ia64/ia64.h (HARD_REGNO_NREGS): Return 1 for CCImode in\n\tgeneral purpose registers.\n\t(HARD_REGNO_MODE_OK): Accept CCImode in general purpose registers.\n\t* config/ia64/ia64.md (*movcci): Change to named pattern.  Deal\n\twith general purpose registers and memory operands.  Add associated\n\tCCImode post-reload splitter.\n\t* config/ia64/div.md: Change BImode to CCImode throughout.\n\nFrom-SVN: r163630", "tree": {"sha": "e28e9bf4cc0e2eb827cd09312f0fbc0b8d968bbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e28e9bf4cc0e2eb827cd09312f0fbc0b8d968bbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33620355cd432b0e3983d3740c5d64340e9fac93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33620355cd432b0e3983d3740c5d64340e9fac93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33620355cd432b0e3983d3740c5d64340e9fac93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33620355cd432b0e3983d3740c5d64340e9fac93/comments", "author": null, "committer": null, "parents": [{"sha": "98d4336049e3fa17b351960d4133dcefe71aced7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d4336049e3fa17b351960d4133dcefe71aced7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98d4336049e3fa17b351960d4133dcefe71aced7"}], "stats": {"total": 89, "additions": 58, "deletions": 31}, "files": [{"sha": "99ea21e0e1449ed74856a3b1cdb841a18af0f118", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33620355cd432b0e3983d3740c5d64340e9fac93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33620355cd432b0e3983d3740c5d64340e9fac93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33620355cd432b0e3983d3740c5d64340e9fac93", "patch": "@@ -1,3 +1,13 @@\n+2010-08-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/ia64/ia64.h (HARD_REGNO_NREGS): Return 1 for CCImode in\n+\tgeneral purpose registers.\n+\t(HARD_REGNO_MODE_OK): Accept CCImode in general purpose registers.\n+\t* config/ia64/ia64.md (*movcci): Change to named pattern.  Deal\n+\twith general purpose registers and memory operands.  Add associated\n+\tCCImode post-reload splitter.\n+\t* config/ia64/div.md: Change BImode to CCImode throughout.\n+\n 2010-08-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/ia64/ia64.md (cstorebi4): Fix thinko."}, {"sha": "7c9b31d0dc590fcb8540c581d9baa3fdcb43dbaa", "filename": "gcc/config/ia64/div.md", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33620355cd432b0e3983d3740c5d64340e9fac93/gcc%2Fconfig%2Fia64%2Fdiv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33620355cd432b0e3983d3740c5d64340e9fac93/gcc%2Fconfig%2Fia64%2Fdiv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fdiv.md?ref=33620355cd432b0e3983d3740c5d64340e9fac93", "patch": "@@ -37,7 +37,7 @@\n \n (define_insn \"addrf3_cond\"\n   [(set (match_operand:RF 0 \"fr_register_operand\" \"=f,f\")\n-        (if_then_else:RF (ne:RF (match_operand:BI 1 \"register_operand\"  \"c,c\")\n+        (if_then_else:RF (ne:RF (match_operand:CCI 1 \"register_operand\"  \"c,c\")\n                                 (const_int 0))\n           (plus:RF\n             (match_operand:RF 2 \"fr_reg_or_fp01_operand\" \"fG,fG\")\n@@ -52,7 +52,7 @@\n \n (define_insn \"subrf3_cond\"\n   [(set (match_operand:RF 0 \"fr_register_operand\" \"=f,f\")\n-        (if_then_else:RF (ne:RF (match_operand:BI 1 \"register_operand\"  \"c,c\")\n+        (if_then_else:RF (ne:RF (match_operand:CCI 1 \"register_operand\"  \"c,c\")\n                                 (const_int 0))\n           (minus:RF\n             (match_operand:RF 2 \"fr_reg_or_fp01_operand\" \"fG,fG\")\n@@ -67,7 +67,7 @@\n \n (define_insn \"mulrf3_cond\"\n   [(set (match_operand:RF 0 \"fr_register_operand\" \"=f,f\")\n-        (if_then_else:RF (ne:RF (match_operand:BI 1 \"register_operand\"  \"c,c\")\n+        (if_then_else:RF (ne:RF (match_operand:CCI 1 \"register_operand\"  \"c,c\")\n                                 (const_int 0))\n           (mult:RF\n             (match_operand:RF 2 \"fr_reg_or_fp01_operand\" \"fG,fG\")\n@@ -84,7 +84,7 @@\n \n (define_insn \"nmulrf3_cond\"\n   [(set (match_operand:RF 0 \"fr_register_operand\" \"=f,f\")\n-        (if_then_else:RF (ne:RF (match_operand:BI 1 \"register_operand\"  \"c,c\")\n+        (if_then_else:RF (ne:RF (match_operand:CCI 1 \"register_operand\"  \"c,c\")\n                                 (const_int 0))\n           (neg:RF (mult:RF\n             (match_operand:RF 2 \"fr_reg_or_fp01_operand\" \"fG,fG\")\n@@ -101,7 +101,7 @@\n \n (define_insn \"m1addrf4_cond\"\n   [(set (match_operand:RF 0 \"fr_register_operand\" \"=f,f\")\n-        (if_then_else:RF (ne:RF (match_operand:BI 1 \"register_operand\"  \"c,c\")\n+        (if_then_else:RF (ne:RF (match_operand:CCI 1 \"register_operand\"  \"c,c\")\n                                 (const_int 0))\n           (plus:RF\n             (mult:RF\n@@ -118,7 +118,7 @@\n \n (define_insn \"m1subrf4_cond\"\n   [(set (match_operand:RF 0 \"fr_register_operand\" \"=f,f\")\n-        (if_then_else:RF (ne:RF (match_operand:BI 1 \"register_operand\"  \"c,c\")\n+        (if_then_else:RF (ne:RF (match_operand:CCI 1 \"register_operand\"  \"c,c\")\n                                 (const_int 0))\n           (minus:RF\n             (mult:RF\n@@ -137,7 +137,7 @@\n \n (define_insn \"m2addrf4_cond\"\n   [(set (match_operand:RF 0 \"fr_register_operand\" \"=f,f\")\n-        (if_then_else:RF (ne:RF (match_operand:BI 1 \"register_operand\"  \"c,c\")\n+        (if_then_else:RF (ne:RF (match_operand:CCI 1 \"register_operand\"  \"c,c\")\n                                 (const_int 0))\n           (plus:RF\n             (match_operand:RF 2 \"fr_reg_or_fp01_operand\" \"fG,fG\")\n@@ -154,7 +154,7 @@\n \n (define_insn \"m2subrf4_cond\"\n   [(set (match_operand:RF 0 \"fr_register_operand\" \"=f,f\")\n-        (if_then_else:RF (ne:RF (match_operand:BI 1 \"register_operand\"  \"c,c\")\n+        (if_then_else:RF (ne:RF (match_operand:CCI 1 \"register_operand\"  \"c,c\")\n                                 (const_int 0))\n           (minus:RF\n             (match_operand:RF 2 \"fr_reg_or_fp01_operand\" \"fG,fG\")\n@@ -255,8 +255,8 @@\n         (unspec:RF [(match_operand:RF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n \t\t    (match_operand:RF 2 \"fr_reg_or_fp01_operand\" \"fG\")]\n \t\t   UNSPEC_FR_RECIP_APPROX_RES))\n-   (set (match_operand:BI 3 \"register_operand\" \"=c\")\n-        (unspec:BI [(match_dup 1) (match_dup 2)] UNSPEC_FR_RECIP_APPROX))\n+   (set (match_operand:CCI 3 \"register_operand\" \"=c\")\n+        (unspec:CCI [(match_dup 1) (match_dup 2)] UNSPEC_FR_RECIP_APPROX))\n    (use (match_operand:SI 4 \"const_int_operand\" \"\"))]\n   \"\"\n   \"frcpa.s%4 %0, %3 = %F1, %F2\"\n@@ -297,7 +297,7 @@\n   rtx q     = gen_reg_rtx (RFmode);\n   rtx r     = gen_reg_rtx (RFmode);\n   rtx q_res = gen_reg_rtx (RFmode);\n-  rtx cond  = gen_reg_rtx (BImode);\n+  rtx cond  = gen_reg_rtx (CCImode);\n   rtx zero    = CONST0_RTX (RFmode);\n   rtx one     = CONST1_RTX (RFmode);\n   rtx status0 = CONST0_RTX (SImode);\n@@ -345,7 +345,7 @@\n   rtx q1        = gen_reg_rtx (RFmode);\n   rtx r         = gen_reg_rtx (RFmode);\n   rtx q_res     = gen_reg_rtx (RFmode);\n-  rtx cond      = gen_reg_rtx (BImode);\n+  rtx cond      = gen_reg_rtx (CCImode);\n   rtx zero      = CONST0_RTX (RFmode);\n   rtx one       = CONST1_RTX (RFmode);\n   rtx status0   = CONST0_RTX (SImode);\n@@ -414,7 +414,7 @@\n   rtx y3    = gen_reg_rtx (RFmode);\n   rtx q     = gen_reg_rtx (RFmode);\n   rtx r     = gen_reg_rtx (RFmode);\n-  rtx cond  = gen_reg_rtx (BImode);\n+  rtx cond  = gen_reg_rtx (CCImode);\n   rtx zero    = CONST0_RTX (RFmode);\n   rtx one     = CONST1_RTX (RFmode);\n   rtx status0 = CONST0_RTX (SImode);\n@@ -471,7 +471,7 @@\n   rtx e3        = gen_reg_rtx (RFmode);\n   rtx q         = gen_reg_rtx (RFmode);\n   rtx r1        = gen_reg_rtx (RFmode);\n-  rtx cond      = gen_reg_rtx (BImode);\n+  rtx cond      = gen_reg_rtx (CCImode);\n   rtx zero      = CONST0_RTX (RFmode);\n   rtx one       = CONST1_RTX (RFmode);\n   rtx status0   = CONST0_RTX (SImode);\n@@ -535,7 +535,7 @@\n   rtx q         = gen_reg_rtx (RFmode);\n   rtx r         = gen_reg_rtx (RFmode);\n   rtx r1        = gen_reg_rtx (RFmode);\n-  rtx cond      = gen_reg_rtx (BImode);\n+  rtx cond      = gen_reg_rtx (CCImode);\n   rtx zero      = CONST0_RTX (RFmode);\n   rtx one       = CONST1_RTX (RFmode);\n   rtx status0   = CONST0_RTX (SImode);\n@@ -702,7 +702,7 @@\n   rtx e1        = gen_reg_rtx (RFmode);\n   rtx q         = gen_reg_rtx (RFmode);\n   rtx q1        = gen_reg_rtx (RFmode);\n-  rtx cond      = gen_reg_rtx (BImode);\n+  rtx cond      = gen_reg_rtx (CCImode);\n   rtx zero      = CONST0_RTX (RFmode);\n   rtx one       = CONST1_RTX (RFmode);\n   rtx status1   = CONST1_RTX (SImode);\n@@ -844,7 +844,7 @@\n   rtx q1        = gen_reg_rtx (RFmode);\n   rtx q2        = gen_reg_rtx (RFmode);\n   rtx r         = gen_reg_rtx (RFmode);\n-  rtx cond      = gen_reg_rtx (BImode);\n+  rtx cond      = gen_reg_rtx (CCImode);\n   rtx zero      = CONST0_RTX (RFmode);\n   rtx one       = CONST1_RTX (RFmode);\n   rtx status1   = CONST1_RTX (SImode);\n@@ -888,7 +888,7 @@\n   rtx e1        = gen_reg_rtx (RFmode);\n   rtx q2        = gen_reg_rtx (RFmode);\n   rtx r         = gen_reg_rtx (RFmode);\n-  rtx cond      = gen_reg_rtx (BImode);\n+  rtx cond      = gen_reg_rtx (CCImode);\n   rtx zero      = CONST0_RTX (RFmode);\n   rtx one       = CONST1_RTX (RFmode);\n   rtx status1   = CONST1_RTX (SImode);\n@@ -920,8 +920,8 @@\n   [(set (match_operand:RF 0 \"fr_register_operand\" \"=f\")\n                 (unspec:RF [(match_operand:RF 1 \"fr_reg_or_fp01_operand\" \"fG\")]\n \t\t\t   UNSPEC_FR_SQRT_RECIP_APPROX_RES))\n-   (set (match_operand:BI 2 \"register_operand\" \"=c\")\n-        (unspec:BI [(match_dup 1)] UNSPEC_FR_SQRT_RECIP_APPROX))\n+   (set (match_operand:CCI 2 \"register_operand\" \"=c\")\n+        (unspec:CCI [(match_dup 1)] UNSPEC_FR_SQRT_RECIP_APPROX))\n    (use (match_operand:SI 3 \"const_int_operand\" \"\"))]\n   \"\"\n   \"frsqrta.s%3 %0, %2 = %F1\"\n@@ -958,7 +958,7 @@\n   rtx h         = gen_reg_rtx (RFmode);\n   rtx d         = gen_reg_rtx (RFmode);\n   rtx g2        = gen_reg_rtx (RFmode);\n-  rtx cond      = gen_reg_rtx (BImode);\n+  rtx cond      = gen_reg_rtx (CCImode);\n   rtx zero      = CONST0_RTX (RFmode);\n   rtx one       = CONST1_RTX (RFmode);\n   rtx c1        = ia64_dconst_0_5();\n@@ -1021,7 +1021,7 @@\n   rtx h         = gen_reg_rtx (RFmode);\n   rtx h1        = gen_reg_rtx (RFmode);\n   rtx d         = gen_reg_rtx (RFmode);\n-  rtx cond      = gen_reg_rtx (BImode);\n+  rtx cond      = gen_reg_rtx (CCImode);\n   rtx zero      = CONST0_RTX (RFmode);\n   rtx one       = CONST1_RTX (RFmode);\n   rtx c1        = ia64_dconst_0_5();\n@@ -1104,7 +1104,7 @@\n   rtx h2        = gen_reg_rtx (RFmode);\n   rtx d         = gen_reg_rtx (RFmode);\n   rtx d1        = gen_reg_rtx (RFmode);\n-  rtx cond      = gen_reg_rtx (BImode);\n+  rtx cond      = gen_reg_rtx (CCImode);\n   rtx zero      = CONST0_RTX (RFmode);\n   rtx c1        = ia64_dconst_0_5();\n   rtx reg_df_c1\t= gen_reg_rtx (DFmode);\n@@ -1171,7 +1171,7 @@\n   rtx h3        = gen_reg_rtx (RFmode);\n   rtx d         = gen_reg_rtx (RFmode);\n   rtx d1        = gen_reg_rtx (RFmode);\n-  rtx cond      = gen_reg_rtx (BImode);\n+  rtx cond      = gen_reg_rtx (CCImode);\n   rtx zero      = CONST0_RTX (RFmode);\n   rtx c1        = ia64_dconst_0_5();\n   rtx reg_df_c1\t= gen_reg_rtx (DFmode);"}, {"sha": "13aa2cd0e18a57fc5b1a32b71df3234e21dc5c32", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33620355cd432b0e3983d3740c5d64340e9fac93/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33620355cd432b0e3983d3740c5d64340e9fac93/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=33620355cd432b0e3983d3740c5d64340e9fac93", "patch": "@@ -646,7 +646,7 @@ while (0)\n #define HARD_REGNO_NREGS(REGNO, MODE)\t\t\t\t\t\\\n   ((REGNO) == PR_REG (0) && (MODE) == DImode ? 64\t\t\t\\\n    : PR_REGNO_P (REGNO) && (MODE) == BImode ? 2\t\t\t\t\\\n-   : PR_REGNO_P (REGNO) && (MODE) == CCImode ? 1\t\t\t\\\n+   : (PR_REGNO_P (REGNO) || GR_REGNO_P (REGNO)) && (MODE) == CCImode ? 1\\\n    : FR_REGNO_P (REGNO) && (MODE) == XFmode ? 1\t\t\t\t\\\n    : FR_REGNO_P (REGNO) && (MODE) == RFmode ? 1\t\t\t\t\\\n    : FR_REGNO_P (REGNO) && (MODE) == XCmode ? 2\t\t\t\t\\\n@@ -664,7 +664,7 @@ while (0)\n    : PR_REGNO_P (REGNO) ?\t\t\t\t\t\\\n      (MODE) == BImode || GET_MODE_CLASS (MODE) == MODE_CC\t\\\n    : GR_REGNO_P (REGNO) ?\t\t\t\t\t\\\n-     (MODE) != CCImode && (MODE) != XFmode && (MODE) != XCmode && (MODE) != RFmode \\\n+     (MODE) != XFmode && (MODE) != XCmode && (MODE) != RFmode\t\\\n    : AR_REGNO_P (REGNO) ? (MODE) == DImode\t\t\t\\\n    : BR_REGNO_P (REGNO) ? (MODE) == DImode\t\t\t\\\n    : 0)"}, {"sha": "db1d2d2f6089d887e5d75e085be91a3ba4f78ea6", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33620355cd432b0e3983d3740c5d64340e9fac93/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33620355cd432b0e3983d3740c5d64340e9fac93/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=33620355cd432b0e3983d3740c5d64340e9fac93", "patch": "@@ -217,17 +217,34 @@\n ;; Set of a single predicate register.  This is only used to implement\n ;; pr-to-pr move and complement.\n \n-(define_insn \"*movcci\"\n-  [(set (match_operand:CCI 0 \"register_operand\" \"=c,c,c\")\n-\t(match_operand:CCI 1 \"nonmemory_operand\" \"O,n,c\"))]\n+(define_insn \"movcci\"\n+  [(set (match_operand:CCI 0 \"destination_operand\" \"=c,c,?c,?*r, c,*r,*m,*r\")\n+\t(match_operand:CCI 1 \"move_operand\"        \" O,n, c,  c,*r,*m,*r,*r\"))]\n   \"\"\n   \"@\n    cmp.ne %0, p0 = r0, r0\n    cmp.eq %0, p0 = r0, r0\n-   (%1) cmp.eq.unc %0, p0 = r0, r0\"\n-  [(set_attr \"itanium_class\" \"icmp\")\n+   (%1) cmp.eq.unc %0, p0 = r0, r0\n+   #\n+   tbit.nz %0, p0 = %1, 0\n+   ld1%O1 %0 = %1%P1\n+   st1%Q0 %0 = %1%P0\n+   mov %0 = %1\"\n+  [(set_attr \"itanium_class\" \"icmp,icmp,icmp,unknown,tbit,ld,st,ialu\")\n    (set_attr \"predicable\" \"no\")])\n \n+(define_split\n+  [(set (match_operand:CCI 0 \"register_operand\" \"\")\n+\t(match_operand:CCI 1 \"register_operand\" \"\"))]\n+  \"reload_completed\n+   && GET_CODE (operands[0]) == REG && GR_REGNO_P (REGNO (operands[0]))\n+   && GET_CODE (operands[1]) == REG && PR_REGNO_P (REGNO (operands[1]))\"\n+  [(set (match_dup 2) (const_int 0))\n+   (cond_exec (ne (match_dup 3) (const_int 0))\n+     (set (match_dup 2) (const_int 1)))]\n+  \"operands[2] = gen_rtx_REG (BImode, REGNO (operands[0]));\n+   operands[3] = gen_rtx_REG (BImode, REGNO (operands[1]));\")\n+\n (define_insn \"movbi\"\n   [(set (match_operand:BI 0 \"destination_operand\" \"=c,c,?c,?*r, c,*r,*r,*m,*r\")\n \t(match_operand:BI 1 \"move_operand\"        \" O,n, c,  c,*r, n,*m,*r,*r\"))]"}]}