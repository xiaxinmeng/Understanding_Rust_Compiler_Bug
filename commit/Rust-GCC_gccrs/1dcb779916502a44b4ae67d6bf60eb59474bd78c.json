{"sha": "1dcb779916502a44b4ae67d6bf60eb59474bd78c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRjYjc3OTkxNjUwMmE0NGI0YWU2N2Q2YmY2MGViNTk0NzRiZDc4Yw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-13T20:53:41Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-13T20:53:48Z"}, "message": "c++: Infinite diagnostic loop with decltype([]{}) [PR94521]\n\nWe are hitting a recursive loop when printing the signature of a function\ncontaining a decltype([]{}) type.  The loop is\n\n  dump_function_decl -> dump_substitution\n\t\t     -> dump_template_bindings\n\t\t     -> dump_type\n\t\t     -> dump_aggr_type\n\t\t     -> dump_scope -> dump_function_decl\n\nand we loop because dump_template_bindings wants to print the resolved type of\ndecltype([]{}) (i.e. just a lambda type), so it calls dump_aggr_type, which\nwants to print the function scope of the lambda type.  But the function scope of\nthe lambda type is the function which we're in the middle of printing.\n\nThis patch breaks the loop by passing TFF_NO_FUNCTION_ARGUMENTS to\ndump_function_decl from dump_scope, so that we avoid recursing into\ndump_substitution and ultimately looping.\n\nThis also means we no longer emit the \"[with ...]\" clause when printing a\nfunction template scope, and we instead just emit its template argument list in\na more natural way, e.g. instead of\n    foo(int, char) [with T=bool]::x\nwe would now print\n    foo<bool>::x\nwhich seems like an improvement on its own.\n\nThe full signature of the function 'spam' in the below testcase is now\n  void spam(decltype (<lambda>)*) [with T = int; decltype (<lambda>) = spam<int>::<lambda()>]\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94521\n\t* error.c (dump_scope): Pass TFF_NO_FUNCTION_ARGUMENTS to\n\tdump_function_decl when printing a function template instantiation as a\n\tscope.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94521\n\t* g++.dg/cpp2a/lambda-uneval12.C: New test.", "tree": {"sha": "f8499f13cfb96cc5bbd20c877718db221455f658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8499f13cfb96cc5bbd20c877718db221455f658"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dcb779916502a44b4ae67d6bf60eb59474bd78c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dcb779916502a44b4ae67d6bf60eb59474bd78c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dcb779916502a44b4ae67d6bf60eb59474bd78c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dcb779916502a44b4ae67d6bf60eb59474bd78c/comments", "author": null, "committer": null, "parents": [{"sha": "077dd9b3f17710da8af6adce816754ddceb57b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077dd9b3f17710da8af6adce816754ddceb57b5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/077dd9b3f17710da8af6adce816754ddceb57b5a"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "65b648a3edce4ac4e86863f0c36a61ece1d9c063", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dcb779916502a44b4ae67d6bf60eb59474bd78c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dcb779916502a44b4ae67d6bf60eb59474bd78c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1dcb779916502a44b4ae67d6bf60eb59474bd78c", "patch": "@@ -1,5 +1,10 @@\n 2020-04-13  Patrick Palka  <ppalka@redhat.com>\n \n+\tPR c++/94521\n+\t* error.c (dump_scope): Pass TFF_NO_FUNCTION_ARGUMENTS to\n+\tdump_function_decl when printing a function template instantiation as a\n+\tscope.\n+\n \tPR c++/94470\n \t* constexpr.c (get_or_insert_ctor_field): Set default value of parameter\n \t'pos_hint' to -1."}, {"sha": "98c163db5723474fbc3c10242afb4c83fd5cea30", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dcb779916502a44b4ae67d6bf60eb59474bd78c/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dcb779916502a44b4ae67d6bf60eb59474bd78c/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=1dcb779916502a44b4ae67d6bf60eb59474bd78c", "patch": "@@ -211,6 +211,8 @@ dump_scope (cxx_pretty_printer *pp, tree scope, int flags)\n     }\n   else if ((flags & TFF_SCOPE) && TREE_CODE (scope) == FUNCTION_DECL)\n     {\n+      if (DECL_USE_TEMPLATE (scope))\n+\tf |= TFF_NO_FUNCTION_ARGUMENTS;\n       dump_function_decl (pp, scope, f);\n       pp_cxx_colon_colon (pp);\n     }"}, {"sha": "8e2df1b6eda1145e74eade4da3533fb453611dea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dcb779916502a44b4ae67d6bf60eb59474bd78c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dcb779916502a44b4ae67d6bf60eb59474bd78c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1dcb779916502a44b4ae67d6bf60eb59474bd78c", "patch": "@@ -1,5 +1,8 @@\n 2020-04-13  Patrick Palka  <ppalka@redhat.com>\n \n+\tPR c++/94521\n+\t* g++.dg/cpp2a/lambda-uneval12.C: New test.\n+\n \tPR c++/94470\n \t* g++.dg/cpp1y/constexpr-nsdmi8.C: New test.\n \t* g++.dg/cpp1y/constexpr-nsdmi9.C: New test."}, {"sha": "24d2e701e44751cb9231893a5d4ac47b2cc614e6", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-uneval12.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dcb779916502a44b4ae67d6bf60eb59474bd78c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dcb779916502a44b4ae67d6bf60eb59474bd78c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval12.C?ref=1dcb779916502a44b4ae67d6bf60eb59474bd78c", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/94521\n+// { dg-do compile { target c++2a } }\n+\n+template <typename T>\n+void spam(decltype([]{}) *s)\n+{\n+  static_assert(__is_same(int, decltype(s))); // { dg-error \"static assertion failed\" }\n+}\n+\n+void foo()\n+{\n+  spam<int>(nullptr);\n+}"}]}