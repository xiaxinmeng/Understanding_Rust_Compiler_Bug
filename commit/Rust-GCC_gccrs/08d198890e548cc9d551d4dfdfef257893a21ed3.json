{"sha": "08d198890e548cc9d551d4dfdfef257893a21ed3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhkMTk4ODkwZTU0OGNjOWQ1NTFkNGRmZGZlZjI1Nzg5M2EyMWVkMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2009-11-10T16:16:57Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2009-11-10T16:16:57Z"}, "message": "re PR tree-optimization/41987 (expected class \u2018constant\u2019, have \u2018binary\u2019 (rdiv_expr) in build_complex, at tree.c:1485)\n\n\tPR tree-optimization/41987\n\t* fold-const.c (const_binop): Avoid using fold_buildN().\n\ntestsuite:\n\t* gcc.c-torture/compile/pr41987.c: New.\n\nFrom-SVN: r154065", "tree": {"sha": "1e6767691811d80f2fa58e920b8a005d425ec3a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e6767691811d80f2fa58e920b8a005d425ec3a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08d198890e548cc9d551d4dfdfef257893a21ed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08d198890e548cc9d551d4dfdfef257893a21ed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08d198890e548cc9d551d4dfdfef257893a21ed3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08d198890e548cc9d551d4dfdfef257893a21ed3/comments", "author": null, "committer": null, "parents": [{"sha": "2c5721d9f36a114809e296686ff39b1324b0cc5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5721d9f36a114809e296686ff39b1324b0cc5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5721d9f36a114809e296686ff39b1324b0cc5b"}], "stats": {"total": 87, "additions": 60, "deletions": 27}, "files": [{"sha": "93c86bb7483d4b6502bd1f1f12cfe95c5fee1c3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d198890e548cc9d551d4dfdfef257893a21ed3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d198890e548cc9d551d4dfdfef257893a21ed3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08d198890e548cc9d551d4dfdfef257893a21ed3", "patch": "@@ -1,3 +1,8 @@\n+2009-11-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR tree-optimization/41987\n+\t* fold-const.c (const_binop): Avoid using fold_buildN().\n+\n 2009-11-10  Martin Jambor  <mjambor@suse.cz>\n \n \t* tree-pass.h (struct ipa_opt_pass_d): Added stmt_fixup field."}, {"sha": "c6b420bfe88a694e0d4b46a0440332ee2396c05b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d198890e548cc9d551d4dfdfef257893a21ed3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d198890e548cc9d551d4dfdfef257893a21ed3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=08d198890e548cc9d551d4dfdfef257893a21ed3", "patch": "@@ -2031,10 +2031,10 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \n \t       Expand complex division to scalars, modified algorithm to minimize\n \t       overflow with wide input ranges.  */\n-\t    tree inner_type = TREE_TYPE (type);\n-\t    tree absr2 = fold_build1 (ABS_EXPR, inner_type, r2);\n-\t    tree absi2 = fold_build1 (ABS_EXPR, inner_type, i2);\n-\t    tree compare = fold_build2 (LT_EXPR, boolean_type_node, absr2, absi2);\n+\t    tree compare = fold_build2 (LT_EXPR, boolean_type_node,\n+\t\t\t\t\tfold_abs_const (r2, TREE_TYPE (type)),\n+\t\t\t\t\tfold_abs_const (i2, TREE_TYPE (type)));\n+\t    \n \t    if (integer_nonzerop (compare))\n \t      {\n \t\t/* In the TRUE branch, we compute\n@@ -2044,17 +2044,18 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \t\t   ti = (ai * ratio) - ar;\n \t\t   tr = tr / div;\n \t\t   ti = ti / div;  */\n-\t\ttree ratio = fold_build2 (code, inner_type, r2, i2);\n-\t\ttree div = fold_build2 (PLUS_EXPR, inner_type, i2,\n-\t\t\t\t\tfold_build2 (MULT_EXPR, inner_type,\n-\t\t\t\t\t\t     r2, ratio));\n-\t\treal = fold_build2 (MULT_EXPR, inner_type, r1, ratio);\n-\t\treal = fold_build2 (PLUS_EXPR, inner_type, real, i1);\n-\t\treal = fold_build2 (code, inner_type, real, div);\n-\n-\t\timag = fold_build2 (MULT_EXPR, inner_type, i1, ratio);\n-\t\timag = fold_build2 (MINUS_EXPR, inner_type, imag, r1);\n-\t\timag = fold_build2 (code, inner_type, imag, div);\n+\t\ttree ratio = const_binop (code, r2, i2, notrunc);\n+\t\ttree div = const_binop (PLUS_EXPR, i2,\n+\t\t\t\t\tconst_binop (MULT_EXPR, r2, ratio,\n+\t\t\t\t\t\t     notrunc),\n+\t\t\t\t\tnotrunc);\n+\t\treal = const_binop (MULT_EXPR, r1, ratio, notrunc);\n+\t\treal = const_binop (PLUS_EXPR, real, i1, notrunc);\n+\t\treal = const_binop (code, real, div, notrunc);\n+\n+\t\timag = const_binop (MULT_EXPR, i1, ratio, notrunc);\n+\t\timag = const_binop (MINUS_EXPR, imag, r1, notrunc);\n+\t\timag = const_binop (code, imag, div, notrunc);\n \t      }\n \t    else\n \t      {\n@@ -2065,18 +2066,19 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \t\t   ti = b - (a * ratio);\n \t\t   tr = tr / div;\n \t\t   ti = ti / div;  */\n-\t\ttree ratio = fold_build2 (code, inner_type, i2, r2);\n-\t\ttree div = fold_build2 (PLUS_EXPR, inner_type, r2,\n-                                        fold_build2 (MULT_EXPR, inner_type,\n-                                                     i2, ratio));\n-\n-\t\treal = fold_build2 (MULT_EXPR, inner_type, i1, ratio);\n-\t\treal = fold_build2 (PLUS_EXPR, inner_type, real, r1);\n-\t\treal = fold_build2 (code, inner_type, real, div);\n-\n-\t\timag = fold_build2 (MULT_EXPR, inner_type, r1, ratio);\n-\t\timag = fold_build2 (MINUS_EXPR, inner_type, i1, imag);\n-\t\timag = fold_build2 (code, inner_type, imag, div);\n+\t\ttree ratio = const_binop (code, i2, r2, notrunc);\n+\t\ttree div = const_binop (PLUS_EXPR, r2,\n+                                        const_binop (MULT_EXPR, i2, ratio,\n+\t\t\t\t\t\t     notrunc),\n+\t\t\t\t\tnotrunc);\n+\n+\t\treal = const_binop (MULT_EXPR, i1, ratio, notrunc);\n+\t\treal = const_binop (PLUS_EXPR, real, r1, notrunc);\n+\t\treal = const_binop (code, real, div, notrunc);\n+\n+\t\timag = const_binop (MULT_EXPR, r1, ratio, notrunc);\n+\t\timag = const_binop (MINUS_EXPR, i1, imag, notrunc);\n+\t\timag = const_binop (code, imag, div, notrunc);\n \t      }\n \t  }\n \t  break;"}, {"sha": "2f0e9aa657c8f7e034483886534aef44d2e6b4d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d198890e548cc9d551d4dfdfef257893a21ed3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d198890e548cc9d551d4dfdfef257893a21ed3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=08d198890e548cc9d551d4dfdfef257893a21ed3", "patch": "@@ -1,3 +1,7 @@\n+2009-11-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.c-torture/compile/pr41987.c: New.\n+\n 2009-11-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/40946"}, {"sha": "7bb49192c1d1a23592d0071a0cfae3fae5bd01d7", "filename": "gcc/testsuite/gcc.c-torture/compile/pr41987.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d198890e548cc9d551d4dfdfef257893a21ed3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41987.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d198890e548cc9d551d4dfdfef257893a21ed3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41987.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41987.c?ref=08d198890e548cc9d551d4dfdfef257893a21ed3", "patch": "@@ -0,0 +1,22 @@\n+/* PR tree-optimization/41987 */\n+\n+#define TESTIT(TYPE) do { \\\n+  _Complex TYPE ylm; \\\n+  TYPE nbond; \\\n+  ylm = 0; \\\n+  nbond = 0; \\\n+  ylm = ylm / nbond; \\\n+} while (0)\n+\n+void qparm_colvar(void)\n+{\n+  TESTIT (float);\n+  TESTIT (double);\n+  TESTIT (long double);\n+\n+  TESTIT (char);\n+  TESTIT (short);\n+  TESTIT (int);\n+  TESTIT (long);\n+  TESTIT (long long);\n+}"}]}