{"sha": "f78ec36a7132213edd00f50b4686ea23de274c57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc4ZWMzNmE3MTMyMjEzZWRkMDBmNTBiNDY4NmVhMjNkZTI3NGM1Nw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-05-09T17:41:56Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-05-09T17:41:56Z"}, "message": "sh.c (sh_builtin_saveregs): If starting with an odd fp register...\n\n\t* sh.c (sh_builtin_saveregs): If starting with an odd fp register,\n\tmake sure that buffer starts on odd word address.\n\t(sh_va_arg): Skip odd fp registers when reading a double precision\n\tvalue.\n\nFrom-SVN: r53337", "tree": {"sha": "38e4aa162996d6b9a0f5e9c78379cc06589c23fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38e4aa162996d6b9a0f5e9c78379cc06589c23fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f78ec36a7132213edd00f50b4686ea23de274c57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f78ec36a7132213edd00f50b4686ea23de274c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f78ec36a7132213edd00f50b4686ea23de274c57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f78ec36a7132213edd00f50b4686ea23de274c57/comments", "author": null, "committer": null, "parents": [{"sha": "c87978aa20c2807f8654f16ac3668ea67e9e5a9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c87978aa20c2807f8654f16ac3668ea67e9e5a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c87978aa20c2807f8654f16ac3668ea67e9e5a9a"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "62002f5705ee06fa9ac4b789447ca6335e60544e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78ec36a7132213edd00f50b4686ea23de274c57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78ec36a7132213edd00f50b4686ea23de274c57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f78ec36a7132213edd00f50b4686ea23de274c57", "patch": "@@ -1,3 +1,10 @@\n+Thu May  9 18:29:24 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh.c (sh_builtin_saveregs): If starting with an odd fp register,\n+\tmake sure that buffer starts on odd word address.\n+\t(sh_va_arg): Skip odd fp registers when reading a double precision\n+\tvalue.\n+\n 2002-05-09  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* tree.h (preserve_data, object_permanent_p, type_precision):"}, {"sha": "07bf6cf3fa6d10b4f06e1ee03b749a430b11a9ae", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78ec36a7132213edd00f50b4686ea23de274c57/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78ec36a7132213edd00f50b4686ea23de274c57/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=f78ec36a7132213edd00f50b4686ea23de274c57", "patch": "@@ -5090,6 +5090,15 @@ sh_builtin_saveregs ()\n   if (TARGET_SHMEDIA)\n     regbuf = gen_rtx_MEM (BLKmode,\n \t\t\t  gen_rtx_REG (Pmode, ARG_POINTER_REGNUM));\n+  else if (n_floatregs & 1)\n+    {\n+      rtx addr;\n+\n+      regbuf = assign_stack_local (BLKmode, bufsize + UNITS_PER_WORD, 0);\n+      addr = copy_to_mode_reg (Pmode, XEXP (regbuf, 0));\n+      emit_insn (gen_iorsi3 (addr, addr, GEN_INT (UNITS_PER_WORD)));\n+      regbuf = change_address (regbuf, BLKmode, addr);\n+    }\n   else\n     regbuf = assign_stack_local (BLKmode, bufsize, 0);\n   alias_set = get_varargs_alias_set ();\n@@ -5353,13 +5362,19 @@ sh_va_arg (valist, type)\n \n       if (pass_as_float)\n \t{\n+\t  int first_floatreg\n+\t    = current_function_args_info.arg_count[(int) SH_ARG_FLOAT];\n+\t  int n_floatregs = MAX (0, NPARM_REGS (SFmode) - first_floatreg);\n+\n \t  emit_cmp_and_jump_insns (expand_expr (next_fp, NULL_RTX, Pmode,\n \t\t\t\t\t\tEXPAND_NORMAL),\n \t\t\t\t   expand_expr (next_fp_limit, NULL_RTX,\n \t\t\t\t\t\tPmode, EXPAND_NORMAL),\n \t\t\t\t   GE, const1_rtx, Pmode, 1, lab_false);\n \n-\t  if (TYPE_ALIGN (type) > BITS_PER_WORD)\n+\t  if (TYPE_ALIGN (type) > BITS_PER_WORD\n+\t      || (((TREE_CODE (type) == REAL_TYPE && size == 8) || size == 16)\n+\t\t  && (n_floatregs & 1)))\n \t    {\n \t      tmp = build (BIT_AND_EXPR, ptr_type_node, next_fp,\n \t\t\t   build_int_2 (UNITS_PER_WORD, 0));"}]}