{"sha": "995b5904391de6b8060e74e21654ed2ec5c8cd76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk1YjU5MDQzOTFkZTZiODA2MGU3NGUyMTY1NGVkMmVjNWM4Y2Q3Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2002-01-25T20:45:48Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2002-01-25T20:45:48Z"}, "message": "builtins.c (expand_builtin_strncpy): Use integer_zerop instead of compare_tree_int.\n\n\t* builtins.c (expand_builtin_strncpy): Use integer_zerop instead\n\tof compare_tree_int.\n\t(expand_builtin_strncat): Likewise.\n\t* c-decl.c (finish_struct): Use tree_low_cst.\n\t* tree.h (compare_tree_int): Arg is unsigned HOST_WIDE_INT.\n\t* tree.c (compare_tree_int): Likewise.\n\nFrom-SVN: r49222", "tree": {"sha": "fb797ef05d7fb0f2a9ed54868b4bbdb2d6901c3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb797ef05d7fb0f2a9ed54868b4bbdb2d6901c3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/995b5904391de6b8060e74e21654ed2ec5c8cd76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/995b5904391de6b8060e74e21654ed2ec5c8cd76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/995b5904391de6b8060e74e21654ed2ec5c8cd76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/995b5904391de6b8060e74e21654ed2ec5c8cd76/comments", "author": null, "committer": null, "parents": [{"sha": "75eefe3fe069dc5affd43dd51acfff6c5a974f2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75eefe3fe069dc5affd43dd51acfff6c5a974f2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75eefe3fe069dc5affd43dd51acfff6c5a974f2d"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "713d6258a69c78df73439199ed9dacd693f1977b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995b5904391de6b8060e74e21654ed2ec5c8cd76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995b5904391de6b8060e74e21654ed2ec5c8cd76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=995b5904391de6b8060e74e21654ed2ec5c8cd76", "patch": "@@ -1,11 +1,20 @@\n+Fri Jan 25 08:26:19 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* builtins.c (expand_builtin_strncpy): Use integer_zerop instead\n+\tof compare_tree_int.\n+\t(expand_builtin_strncat): Likewise.\n+\t* c-decl.c (finish_struct): Use tree_low_cst.\n+\t* tree.h (compare_tree_int): Arg is unsigned HOST_WIDE_INT.\n+\t* tree.c (compare_tree_int): Likewise.\n+\n 2002-01-25  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* reload1.c (eliminate_regs_in_insn): Recognize frame pointer\n \tadjustments even if they are implemented by more than two insns.\n \n Fri Jan 25 20:43:56 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n-\t* df.c (df_ref_create, df_ref_record_1, df_ref_record): Kill BB argument.\n+\t* df.c (df_ref_create, df_ref_record_1, df_ref_record): Kill BB arg.\n \t* df.h (struct ref): Kill B.\n \t(DF_REF_BB, DF_REF_BBNO): Use BLOCK_FOR_INSN.\n "}, {"sha": "0747806fff096ab1a0d11c4ad460fb143e7a08c9", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995b5904391de6b8060e74e21654ed2ec5c8cd76/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995b5904391de6b8060e74e21654ed2ec5c8cd76/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=995b5904391de6b8060e74e21654ed2ec5c8cd76", "patch": "@@ -2062,7 +2062,7 @@ expand_builtin_strncpy (arglist, target, mode)\n \treturn 0;\n \n       /* If the len parameter is zero, return the dst parameter.  */\n-      if (compare_tree_int (len, 0) == 0)\n+      if (integer_zerop (len))\n         {\n \t/* Evaluate and ignore the src argument in case it has\n            side-effects.  */\n@@ -2279,10 +2279,11 @@ expand_builtin_memcmp (exp, arglist, target, mode)\n   /* If all arguments are constant, and the value of len is not greater\n      than the lengths of arg1 and arg2, evaluate at compile-time.  */\n   if (host_integerp (len, 1) && p1 && p2\n-      && compare_tree_int (len, strlen (p1)+1) <= 0\n-      && compare_tree_int (len, strlen (p2)+1) <= 0)\n+      && compare_tree_int (len, strlen (p1) + 1) <= 0\n+      && compare_tree_int (len, strlen (p2) + 1) <= 0)\n     {\n       const int r = memcmp (p1, p2, tree_low_cst (len, 1));\n+\n       return (r < 0 ? constm1_rtx : (r > 0 ? const1_rtx : const0_rtx));\n     }\n \n@@ -2607,7 +2608,7 @@ expand_builtin_strncat (arglist, target, mode)\n \n       /* If the requested length is zero, or the src parameter string\n           length is zero, return the dst parameter.  */\n-      if ((TREE_CODE (len) == INTEGER_CST && compare_tree_int (len, 0) == 0)\n+      if ((TREE_CODE (len) == INTEGER_CST && integer_zerop (len))\n \t  || (p && *p == '\\0'))\n         {\n \t  /* Evaluate and ignore the src and len parameters in case\n@@ -2622,9 +2623,9 @@ expand_builtin_strncat (arglist, target, mode)\n       if (TREE_CODE (len) == INTEGER_CST && p\n \t  && compare_tree_int (len, strlen (p)) >= 0)\n         {\n-\t  tree newarglist =\n-\t    tree_cons (NULL_TREE, dst, build_tree_list (NULL_TREE, src)),\n-\t    fn = built_in_decls[BUILT_IN_STRCAT];\n+\t  tree newarglist\n+\t    = tree_cons (NULL_TREE, dst, build_tree_list (NULL_TREE, src));\n+\t  tree fn = built_in_decls[BUILT_IN_STRCAT];\n \n \t  /* If the replacement _DECL isn't initialized, don't do the\n \t     transformation.  */"}, {"sha": "2d21a43ca80204077a3793e56a152a822390e2c4", "filename": "gcc/c-decl.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995b5904391de6b8060e74e21654ed2ec5c8cd76/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995b5904391de6b8060e74e21654ed2ec5c8cd76/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=995b5904391de6b8060e74e21654ed2ec5c8cd76", "patch": "@@ -5693,11 +5693,10 @@ finish_struct (t, fieldlist, attributes)\n \t field widths.  */\n       if (DECL_INITIAL (x))\n \t{\n-\t  int max_width;\n-\t  if (TYPE_MAIN_VARIANT (TREE_TYPE (x)) == c_bool_type_node)\n-\t    max_width = CHAR_TYPE_SIZE;\n-\t  else\n-\t    max_width = TYPE_PRECISION (TREE_TYPE (x));\n+\t  int max_width\n+\t    = (TYPE_MAIN_VARIANT (TREE_TYPE (x)) == c_bool_type_node\n+\t       ? CHAR_TYPE_SIZE : TYPE_PRECISION (TREE_TYPE (x)));\n+\n \t  if (tree_int_cst_sgn (DECL_INITIAL (x)) < 0)\n \t    error_with_decl (x, \"negative width in bit-field `%s'\");\n \t  else if (0 < compare_tree_int (DECL_INITIAL (x), max_width))\n@@ -5708,7 +5707,7 @@ finish_struct (t, fieldlist, attributes)\n \t    {\n \t      /* The test above has assured us that TREE_INT_CST_HIGH is 0.  */\n \t      unsigned HOST_WIDE_INT width\n-\t\t= TREE_INT_CST_LOW (DECL_INITIAL (x));\n+\t\t= tree_low_cst (DECL_INITIAL (x), 1);\n \n \t      if (TREE_CODE (TREE_TYPE (x)) == ENUMERAL_TYPE\n \t\t  && (width < min_precision (TYPE_MIN_VALUE (TREE_TYPE (x)),"}, {"sha": "86c0cd0036dd814e042003b88c8c2ae6a5c27148", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995b5904391de6b8060e74e21654ed2ec5c8cd76/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995b5904391de6b8060e74e21654ed2ec5c8cd76/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=995b5904391de6b8060e74e21654ed2ec5c8cd76", "patch": "@@ -3633,7 +3633,7 @@ simple_cst_equal (t1, t2)\n int\n compare_tree_int (t, u)\n      tree t;\n-     unsigned int u;\n+     unsigned HOST_WIDE_INT u;\n {\n   if (tree_int_cst_sgn (t) < 0)\n     return -1;"}, {"sha": "a277badb79b84703a1d9b592979045f95fb7ffe6", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995b5904391de6b8060e74e21654ed2ec5c8cd76/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995b5904391de6b8060e74e21654ed2ec5c8cd76/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=995b5904391de6b8060e74e21654ed2ec5c8cd76", "patch": "@@ -2888,7 +2888,8 @@ extern void preserve_data\t\tPARAMS ((void));\n extern int object_permanent_p\t\tPARAMS ((tree));\n extern int type_precision\t\tPARAMS ((tree));\n extern int simple_cst_equal\t\tPARAMS ((tree, tree));\n-extern int compare_tree_int\t\tPARAMS ((tree, unsigned int));\n+extern int compare_tree_int\t\tPARAMS ((tree,\n+\t\t\t\t\t\t unsigned HOST_WIDE_INT));\n extern int type_list_equal\t\tPARAMS ((tree, tree));\n extern int chain_member\t\t\tPARAMS ((tree, tree));\n extern int chain_member_purpose\t\tPARAMS ((tree, tree));"}]}