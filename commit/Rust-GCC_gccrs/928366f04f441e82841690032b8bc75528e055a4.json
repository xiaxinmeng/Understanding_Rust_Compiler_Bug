{"sha": "928366f04f441e82841690032b8bc75528e055a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI4MzY2ZjA0ZjQ0MWU4Mjg0MTY5MDAzMmI4YmM3NTUyOGUwNTVhNA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-10-11T18:18:22Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-11T18:18:22Z"}, "message": "AppletInitializer.java, [...]: Removed redundant modifiers.\n\n2003-10-11  Michael Koch  <konqueror@gmx.de>\n\n\t* java/beans/AppletInitializer.java,\n\tjava/beans/BeanInfo.java,\n\tjava/beans/Customizer.java,\n\tjava/beans/DesignMode.java,\n\tjava/beans/PropertyEditor.java,\n\tjava/beans/Visibility.java:\n\tRemoved redundant modifiers.\n\nFrom-SVN: r72349", "tree": {"sha": "29eafa45dfaf7f06db6f2a2aadc5f0011b5e0ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29eafa45dfaf7f06db6f2a2aadc5f0011b5e0ef0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/928366f04f441e82841690032b8bc75528e055a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/928366f04f441e82841690032b8bc75528e055a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/928366f04f441e82841690032b8bc75528e055a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/928366f04f441e82841690032b8bc75528e055a4/comments", "author": null, "committer": null, "parents": [{"sha": "e1a5ed6c63cd361b4b3a70f9467eeeef080dba8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a5ed6c63cd361b4b3a70f9467eeeef080dba8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1a5ed6c63cd361b4b3a70f9467eeeef080dba8c"}], "stats": {"total": 82, "additions": 46, "deletions": 36}, "files": [{"sha": "3be2c9cef9c417fdfe20b6f78bd8704dfb9b792b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928366f04f441e82841690032b8bc75528e055a4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928366f04f441e82841690032b8bc75528e055a4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=928366f04f441e82841690032b8bc75528e055a4", "patch": "@@ -1,3 +1,13 @@\n+2003-10-11  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/beans/AppletInitializer.java,\n+\tjava/beans/BeanInfo.java,\n+\tjava/beans/Customizer.java,\n+\tjava/beans/DesignMode.java,\n+\tjava/beans/PropertyEditor.java,\n+\tjava/beans/Visibility.java:\n+\tRemoved redundant modifiers.\n+\n 2003-10-11  Michael Koch  <konqueror@gmx.de>\n \n \t* java/awt/print/Pageable.java,"}, {"sha": "48c37b38061af9f0b0c1b2c1745e0be7a7240afa", "filename": "libjava/java/beans/AppletInitializer.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928366f04f441e82841690032b8bc75528e055a4/libjava%2Fjava%2Fbeans%2FAppletInitializer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928366f04f441e82841690032b8bc75528e055a4/libjava%2Fjava%2Fbeans%2FAppletInitializer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FAppletInitializer.java?ref=928366f04f441e82841690032b8bc75528e055a4", "patch": "@@ -51,11 +51,11 @@\n public interface AppletInitializer\n {\n   /** Activate the applet.  */\n-  public void activate (Applet applet);\n+  void activate (Applet applet);\n \n   /** This method will be called by <code>Beans.instantiate()</code>\n    * to associated the new Applet with its AppletContext, AppletStub,\n    * and Container.\n    */\n-  public void initialize (Applet applet, BeanContext context);\n+  void initialize (Applet applet, BeanContext context);\n }"}, {"sha": "f9e04fa03c79e79fc3db60f541f8b85e40249e3e", "filename": "libjava/java/beans/BeanInfo.java", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928366f04f441e82841690032b8bc75528e055a4/libjava%2Fjava%2Fbeans%2FBeanInfo.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928366f04f441e82841690032b8bc75528e055a4/libjava%2Fjava%2Fbeans%2FBeanInfo.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FBeanInfo.java?ref=928366f04f441e82841690032b8bc75528e055a4", "patch": "@@ -74,35 +74,35 @@\n \n public interface BeanInfo {\n \t/** Use this as a parameter for the getIcon() command to retrieve a certain type of icon. **/\n-\tpublic static final int ICON_COLOR_16x16 = 1;\n+\tint ICON_COLOR_16x16 = 1;\n \t/** Use this as a parameter for the getIcon() command to retrieve a certain type of icon. **/\n-\tpublic static final int ICON_COLOR_32x32 = 2;\n+\tint ICON_COLOR_32x32 = 2;\n \t/** Use this as a parameter for the getIcon() command to retrieve a certain type of icon. **/\n-\tpublic static final int ICON_MONO_16x16 = 3;\n+\tint ICON_MONO_16x16 = 3;\n \t/** Use this as a parameter for the getIcon() command to retrieve a certain type of icon. **/\n-\tpublic static final int ICON_MONO_32x32 = 4;\n+\tint ICON_MONO_32x32 = 4;\n \n \t/** Get the general description of this Bean type.\n \t ** @return the BeanDescriptor for the Bean, or null if\n \t **         the BeanDescriptor should be obtained by\n \t **         Introspection.\n \t **/\n-\tpublic abstract BeanDescriptor getBeanDescriptor();\n+\tBeanDescriptor getBeanDescriptor();\n \n \t/** Get the events this Bean type fires.\n \t ** @return the EventDescriptors representing events this\n \t **         Bean fires.  Returns <CODE>null</CODE> if the\n \t **         events are to be acquired by Introspection.\n \t **/\n-\tpublic abstract EventSetDescriptor[] getEventSetDescriptors();\n+\tEventSetDescriptor[] getEventSetDescriptors();\n \n \t/** Get the \"default\" event, basically the one a RAD tool\n \t ** user is most likely to select.\n \t ** @return the index into the getEventSetDescriptors()\n \t **         that the user is most likely to use.  Returns\n \t **         <CODE>-1</CODE> if there is no default event.\n \t **/\n-\tpublic abstract int getDefaultEventIndex();\n+\tint getDefaultEventIndex();\n \n \t/** Get the properties (get/set method pairs) this Bean\n \t ** type supports.\n@@ -111,23 +111,23 @@ public interface BeanInfo {\n \t **         Returns <CODE>null</CODE> if the properties\n \t **         are to be obtained by Introspection.\n \t **/\n-\tpublic abstract PropertyDescriptor[] getPropertyDescriptors();\n+\tPropertyDescriptor[] getPropertyDescriptors();\n \n \t/** Get the \"default\" property, basically the one a RAD\n \t ** tool user is most likely to select.\n \t ** @return the index into the getPropertyDescriptors()\n \t **         that the user is most likely to use.  Returns\n \t **         <CODE>-1</CODE> if there is no default event.\n \t **/\n-\tpublic abstract int getDefaultPropertyIndex();\n+\tint getDefaultPropertyIndex();\n \n \t/** Get the methods this Bean type supports.\n \t ** @return the MethodDescriptors representing the\n \t **         methods this Bean type supports.  Returns\n \t **         <CODE>null</CODE> if the methods are to be\n \t **         obtained by Introspection.\n \t **/\n-\tpublic abstract MethodDescriptor[] getMethodDescriptors();\n+\tMethodDescriptor[] getMethodDescriptors();\n \n \t/** Get additional BeanInfos representing this Bean.\n \t ** In this version of JavaBeans, this method is used so\n@@ -156,7 +156,7 @@ public interface BeanInfo {\n \t **         <CODE>null</CODE> may be returned (see Spec\n \t **         Note, above).\n \t **/\n-\tpublic abstract BeanInfo[] getAdditionalBeanInfo();\n+\tBeanInfo[] getAdditionalBeanInfo();\n \n \t/** Get a visual icon for this Bean.\n \t ** A Bean does not have to support icons, and if it does\n@@ -177,5 +177,5 @@ public interface BeanInfo {\n \t ** @return the icon, or null if that type of icon is\n \t **         unsupported by this Bean.\n \t **/\n-\tpublic abstract java.awt.Image getIcon(int iconType);\n+\tjava.awt.Image getIcon(int iconType);\n }"}, {"sha": "f7b712757e2b16572ff29b9b603a30fc16299502", "filename": "libjava/java/beans/Customizer.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928366f04f441e82841690032b8bc75528e055a4/libjava%2Fjava%2Fbeans%2FCustomizer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928366f04f441e82841690032b8bc75528e055a4/libjava%2Fjava%2Fbeans%2FCustomizer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FCustomizer.java?ref=928366f04f441e82841690032b8bc75528e055a4", "patch": "@@ -72,15 +72,15 @@ public interface Customizer {\n \t ** Customizer.\n \t ** @param bean the Bean to customize.\n \t **/\n-\tpublic abstract void setObject(Object bean);\n+\tvoid setObject(Object bean);\n \n \t/** Add a PropertyChangeListener.\n \t ** @param l the PropertyChangeListener to add.\n \t **/\n-\tpublic abstract void addPropertyChangeListener(PropertyChangeListener l);\n+\tvoid addPropertyChangeListener(PropertyChangeListener l);\n \n \t/** Remove a PropertyChangeListener.\n \t ** @param l the PropertyChangeListener to remove.\n \t **/\n-\tpublic abstract void removePropertyChangeListener(PropertyChangeListener l);\n+\tvoid removePropertyChangeListener(PropertyChangeListener l);\n }"}, {"sha": "8331dca4fce14012457050fea610a4a53d26c786", "filename": "libjava/java/beans/DesignMode.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928366f04f441e82841690032b8bc75528e055a4/libjava%2Fjava%2Fbeans%2FDesignMode.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928366f04f441e82841690032b8bc75528e055a4/libjava%2Fjava%2Fbeans%2FDesignMode.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FDesignMode.java?ref=928366f04f441e82841690032b8bc75528e055a4", "patch": "@@ -54,7 +54,7 @@ public interface DesignMode {\n \t * Use this name when firing <code>PropertyChangeEvent</code>s from your Bean.  \n \t * @fixme Check whether PROPERTYNAME is set to same value as Sun.\n \t */\n-\tpublic static final String PROPERTYNAME = \"designTime\";\n+\tString PROPERTYNAME = \"designTime\";\n \n \t/**\n \t * The environment will call this method on your\n@@ -82,12 +82,12 @@ public interface DesignMode {\n \t * @see java.beans.beancontext.BeanContext\n \t * @see #PROPERTYNAME\n \t */\n-\tpublic void setDesignTime(boolean designTime);\n+\tvoid setDesignTime(boolean designTime);\n \n \t/**\n \t * This method should tell whether it is design time or runtime.\n \t * @return <code>true</code> if design time, <code>false</code> if\n \t *         runtime.\n \t */\n-\tpublic boolean isDesignTime();\n+\tboolean isDesignTime();\n }"}, {"sha": "18b1a890e2410df6ff606e9b6f9cecc99ae8a8d1", "filename": "libjava/java/beans/PropertyEditor.java", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928366f04f441e82841690032b8bc75528e055a4/libjava%2Fjava%2Fbeans%2FPropertyEditor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928366f04f441e82841690032b8bc75528e055a4/libjava%2Fjava%2Fbeans%2FPropertyEditor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FPropertyEditor.java?ref=928366f04f441e82841690032b8bc75528e055a4", "patch": "@@ -114,14 +114,14 @@ public interface PropertyEditor {\n \t ** wrapper type.\n \t ** @param value the value to set this property to.\n \t **/\n-\tpublic abstract void setValue(Object value);\n+\tvoid setValue(Object value);\n \n \t/** Accessor method to get the current value the PropertyEditor is working with.\n \t ** If the property type is native, it will be wrapped in the appropriate\n \t ** wrapper type.\n \t ** @return the current value of the PropertyEditor.\n \t **/\n-\tpublic abstract Object getValue();\n+\tObject getValue();\n \n \n \t/** Set the value of this property using a String.\n@@ -130,7 +130,7 @@ public interface PropertyEditor {\n \t ** @param text the text to set it to.\n \t ** @exception IllegalArgumentException if the String is in the wrong format or setAsText() is not supported.\n \t **/\n-\tpublic abstract void setAsText(String text) throws IllegalArgumentException;\n+\tvoid setAsText(String text) throws IllegalArgumentException;\n \n \t/** Get the value of this property in String format.\n \t ** Many times this can simply use Object.toString().<P>\n@@ -139,7 +139,7 @@ public interface PropertyEditor {\n \t ** getAsText() should be able to go into setAsText().\n \t ** @return the value of this property in String format.\n \t **/\n-\tpublic abstract String getAsText();\n+\tString getAsText();\n \n \t/** Get a list of possible Strings which this property type can have.\n \t ** The value of these will be used by the RAD tool to construct some sort\n@@ -149,13 +149,13 @@ public interface PropertyEditor {\n \t ** must check the value in setAsText() anyway.\n \t ** @return the list of possible String values for this property type.\n \t **/\n-\tpublic abstract String[] getTags();\n+\tString[] getTags();\n \n \n \t/** The RAD tool calls this to find out whether the PropertyEditor can paint itself.\n \t ** @return true if it can paint itself graphically, false if it cannot.\n \t **/\n-\tpublic abstract boolean isPaintable();\n+\tboolean isPaintable();\n \n \t/** The RAD tool calls this to paint the actual value of the property.\n \t ** The Graphics context will have the same current font, color, etc. as the\n@@ -165,13 +165,13 @@ public interface PropertyEditor {\n \t ** @param g the Graphics context to paint on\n \t ** @param bounds the rectangle you have reserved to work in\n \t **/\n-\tpublic abstract void paintValue(java.awt.Graphics g, java.awt.Rectangle bounds);\n+\tvoid paintValue(java.awt.Graphics g, java.awt.Rectangle bounds);\n \n \n \t/** The RAD tool calls this to find out whether the PropertyEditor supports a custom component to edit and display itself.\n \t ** @return true if getCustomEditor() will return a component, false if not.\n \t **/\n-\tpublic abstract boolean supportsCustomEditor();\n+\tboolean supportsCustomEditor();\n \n \t/** The RAD tool calls this to grab the component that can edit this type.\n \t ** The component may be painted anywhere the RAD tool wants to paint it--\n@@ -180,18 +180,18 @@ public interface PropertyEditor {\n \t ** change to the value is made, fire a PropertyChangeEvent to the source.<P>\n \t ** @return the custom editor for this property type.\n \t **/\n-\tpublic abstract java.awt.Component getCustomEditor();\n+\tjava.awt.Component getCustomEditor();\n \n \n \t/** Adds a property change listener to this PropertyEditor.\n \t ** @param listener the listener to add\n \t **/\n-\tpublic abstract void addPropertyChangeListener(PropertyChangeListener listener);\n+\tvoid addPropertyChangeListener(PropertyChangeListener listener);\n \n \t/** Removes a property change listener from this PropertyEditor.\n \t ** @param listener the listener to remove\n \t **/\n-\tpublic abstract void removePropertyChangeListener(PropertyChangeListener listener);\n+\tvoid removePropertyChangeListener(PropertyChangeListener listener);\n \n \t/** Get a Java language-specific String which could be used to create an Object\n \t ** of the specified type.  Every PropertyEditor must support this.<P>\n@@ -205,5 +205,5 @@ public interface PropertyEditor {\n \t ** </OL>\n \t ** @return the initialization string for this object in Java.\n \t **/\n-\tpublic abstract String getJavaInitializationString();\n+\tString getJavaInitializationString();\n }"}, {"sha": "82c0fa17a9f1df0d39ed0a209f593b2c4dff1892", "filename": "libjava/java/beans/Visibility.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928366f04f441e82841690032b8bc75528e055a4/libjava%2Fjava%2Fbeans%2FVisibility.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928366f04f441e82841690032b8bc75528e055a4/libjava%2Fjava%2Fbeans%2FVisibility.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FVisibility.java?ref=928366f04f441e82841690032b8bc75528e055a4", "patch": "@@ -58,21 +58,21 @@ public interface Visibility {\n \t * Tells whether the Bean can run without a GUI or not.\n \t * @return false if Bean can run without a GUI, else true.\n \t */\n-\tpublic abstract boolean needsGui();\n+\tboolean needsGui();\n \n \t/**\n \t * Tells whether Bean is trying not to use the GUI.\n \t * If needsGui() is true, this method should always return false.\n \t * @return true if definitely not using GUI, otherwise false.\n \t */\n-\tpublic abstract boolean avoidingGui();\n+\tboolean avoidingGui();\n \n \t/**\n \t * Tells the Bean not to use GUI methods.\n \t * If needsGUI() is false, then after this method is called,\n \t * avoidingGui() should return true.\n \t */\n-\tpublic abstract void dontUseGui();\n+\tvoid dontUseGui();\n \n \t/**\n \t * Tells the Bean it may use the GUI.\n@@ -81,5 +81,5 @@ public interface Visibility {\n \t * false, avoidingGui() may return true or false after this method\n \t * is called.\n \t */\n-\tpublic abstract void okToUseGui();\n+\tvoid okToUseGui();\n }"}]}