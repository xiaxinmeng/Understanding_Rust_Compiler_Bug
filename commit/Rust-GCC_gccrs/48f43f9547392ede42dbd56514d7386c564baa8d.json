{"sha": "48f43f9547392ede42dbd56514d7386c564baa8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhmNDNmOTU0NzM5MmVkZTQyZGJkNTY1MTRkNzM4NmM1NjRiYWE4ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-12-12T22:09:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-12-12T22:09:48Z"}, "message": "Remove type_dependent_init_p.\n\n\t* decl.c (value_dependent_init_p): Check the type of a CONSTRUCTOR.\n\t(type_dependent_init_p): Remove.\n\nFrom-SVN: r255591", "tree": {"sha": "c68ad2ccc102595282b47894738c59ee589aa344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c68ad2ccc102595282b47894738c59ee589aa344"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48f43f9547392ede42dbd56514d7386c564baa8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f43f9547392ede42dbd56514d7386c564baa8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f43f9547392ede42dbd56514d7386c564baa8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f43f9547392ede42dbd56514d7386c564baa8d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5eb63cfd035391ed4a1552e41fa613c341fd7465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb63cfd035391ed4a1552e41fa613c341fd7465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eb63cfd035391ed4a1552e41fa613c341fd7465"}], "stats": {"total": 41, "additions": 7, "deletions": 34}, "files": [{"sha": "23dcc3f6553cfb0e670b993bf2eb5c00965f8479", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f43f9547392ede42dbd56514d7386c564baa8d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f43f9547392ede42dbd56514d7386c564baa8d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=48f43f9547392ede42dbd56514d7386c564baa8d", "patch": "@@ -1,5 +1,8 @@\n 2017-12-12  Jason Merrill  <jason@redhat.com>\n \n+\t* decl.c (value_dependent_init_p): Check the type of a CONSTRUCTOR.\n+\t(type_dependent_init_p): Remove.\n+\n \tPR c++/82115 - ICE with variable initialized with its own address.\n \t* cp-tree.h (struct lang_decl_base): Add dependent_init_p.\n \t(DECL_DEPENDENT_INIT_P, SET_DECL_DEPENDENT_INIT_P): New."}, {"sha": "445c23c5dacf75387582028d10a08c353d675695", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 34, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f43f9547392ede42dbd56514d7386c564baa8d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f43f9547392ede42dbd56514d7386c564baa8d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=48f43f9547392ede42dbd56514d7386c564baa8d", "patch": "@@ -6643,38 +6643,6 @@ initialize_artificial_var (tree decl, vec<constructor_elt, va_gc> *v)\n   make_rtl_for_nonlocal_decl (decl, init, /*asmspec=*/NULL);\n }\n \n-/* INIT is the initializer for a variable, as represented by the\n-   parser.  Returns true iff INIT is type-dependent.  */\n-\n-static bool\n-type_dependent_init_p (tree init)\n-{\n-  if (TREE_CODE (init) == TREE_LIST)\n-    /* A parenthesized initializer, e.g.: int i (3, 2); ? */\n-    return any_type_dependent_elements_p (init);\n-  else if (TREE_CODE (init) == CONSTRUCTOR)\n-  /* A brace-enclosed initializer, e.g.: int i = { 3 }; ? */\n-    {\n-      if (dependent_type_p (TREE_TYPE (init)))\n-\treturn true;\n-\n-      vec<constructor_elt, va_gc> *elts;\n-      size_t nelts;\n-      size_t i;\n-\n-      elts = CONSTRUCTOR_ELTS (init);\n-      nelts = vec_safe_length (elts);\n-      for (i = 0; i < nelts; ++i)\n-\tif (type_dependent_init_p ((*elts)[i].value))\n-\t  return true;\n-    }\n-  else\n-    /* It must be a simple expression, e.g., int i = 3;  */\n-    return type_dependent_expression_p (init);\n-\n-  return false;\n-}\n-\n /* INIT is the initializer for a variable, as represented by the\n    parser.  Returns true iff INIT is value-dependent.  */\n \n@@ -6687,6 +6655,9 @@ value_dependent_init_p (tree init)\n   else if (TREE_CODE (init) == CONSTRUCTOR)\n   /* A brace-enclosed initializer, e.g.: int i = { 3 }; ? */\n     {\n+      if (dependent_type_p (TREE_TYPE (init)))\n+\treturn true;\n+\n       vec<constructor_elt, va_gc> *elts;\n       size_t nelts;\n       size_t i;\n@@ -6922,8 +6893,7 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t       && init_const_expr_p\n \t       && TREE_CODE (type) != REFERENCE_TYPE\n \t       && decl_maybe_constant_var_p (decl)\n-\t       && !(dep_init = (type_dependent_init_p (init)\n-\t\t\t\t|| value_dependent_init_p (init))))\n+\t       && !(dep_init = value_dependent_init_p (init)))\n \t{\n \t  /* This variable seems to be a non-dependent constant, so process\n \t     its initializer.  If check_initializer returns non-null the"}]}