{"sha": "721cedf2517390c2fd7b7f2c3272177ff1a50f10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIxY2VkZjI1MTczOTBjMmZkN2I3ZjJjMzI3MjE3N2ZmMWE1MGYxMA==", "commit": {"author": {"name": "Kazuhiro Inaoka", "email": "inaoka.kazuhiro@renesas.com", "date": "2006-07-27T12:21:39Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2006-07-27T12:21:39Z"}, "message": "re PR target/28508 (Assembler Error: operand out of range (145 not between -128 and 127) form m32r-target)\n\nPR gcc/28508\n* config/m32r/m32r.md (branch_insn): Reduce pc range for short branch.\n (rev_branch_insn): Likewise.\n\nFrom-SVN: r115773", "tree": {"sha": "d8734e1751950205738930e7cc4522590ecd1bd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8734e1751950205738930e7cc4522590ecd1bd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/721cedf2517390c2fd7b7f2c3272177ff1a50f10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/721cedf2517390c2fd7b7f2c3272177ff1a50f10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/721cedf2517390c2fd7b7f2c3272177ff1a50f10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/721cedf2517390c2fd7b7f2c3272177ff1a50f10/comments", "author": null, "committer": null, "parents": [{"sha": "5587bfea5368088b84a7627c3c305532579fd7af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5587bfea5368088b84a7627c3c305532579fd7af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5587bfea5368088b84a7627c3c305532579fd7af"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "31261ce4aac608971047df173c15ed62f270e685", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721cedf2517390c2fd7b7f2c3272177ff1a50f10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721cedf2517390c2fd7b7f2c3272177ff1a50f10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=721cedf2517390c2fd7b7f2c3272177ff1a50f10", "patch": "@@ -1,3 +1,10 @@\n+2006-07-27  Kazuhiro Inaoka  <inaoka.kazuhiro@renesas.com>\n+\n+\tPR gcc/28508\n+\t* config/m32r/m32r.md (branch_insn): Reduce pc range for short\n+\tbranch.\n+\t(rev_branch_insn): Likewise.\n+\n 2006-07-27  Jan Hubicka  <jh@suse.cz>\n \n \tPR rtl-optimization/28071"}, {"sha": "552dd3f0ef343ec916ad7d04519c524c3552364d", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721cedf2517390c2fd7b7f2c3272177ff1a50f10/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721cedf2517390c2fd7b7f2c3272177ff1a50f10/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=721cedf2517390c2fd7b7f2c3272177ff1a50f10", "patch": "@@ -1378,15 +1378,16 @@\n   return instruction;\n }\"\n   [(set_attr \"type\" \"branch\")\n-   ; We use 400/800 instead of 512,1024 to account for inaccurate insn\n+   ; cf PR gcc/28508\n+   ; We use 300/600 instead of 512,1024 to account for inaccurate insn\n    ; lengths and insn alignments that are complex to track.\n    ; It's not important that we be hyper-precise here.  It may be more\n    ; important blah blah blah when the chip supports parallel execution\n    ; blah blah blah but until then blah blah blah this is simple and\n    ; suffices.\n    (set (attr \"length\") (if_then_else (ltu (plus (minus (match_dup 0) (pc))\n-\t\t\t\t\t\t (const_int 400))\n-\t\t\t\t\t   (const_int 800))\n+\t\t\t\t\t\t (const_int 300))\n+\t\t\t\t\t   (const_int 600))\n \t\t\t\t      (const_int 2)\n \t\t\t\t      (const_int 4)))])\n \n@@ -1407,15 +1408,16 @@\n   return instruction;\n }\"\n   [(set_attr \"type\" \"branch\")\n-   ; We use 400/800 instead of 512,1024 to account for inaccurate insn\n+   ; cf PR gcc/28508\n+   ; We use 300/600 instead of 512,1024 to account for inaccurate insn\n    ; lengths and insn alignments that are complex to track.\n    ; It's not important that we be hyper-precise here.  It may be more\n    ; important blah blah blah when the chip supports parallel execution\n    ; blah blah blah but until then blah blah blah this is simple and\n    ; suffices.\n    (set (attr \"length\") (if_then_else (ltu (plus (minus (match_dup 0) (pc))\n-\t\t\t\t\t\t (const_int 400))\n-\t\t\t\t\t   (const_int 800))\n+\t\t\t\t\t\t (const_int 300))\n+\t\t\t\t\t   (const_int 600))\n \t\t\t\t      (const_int 2)\n \t\t\t\t      (const_int 4)))])\n "}]}