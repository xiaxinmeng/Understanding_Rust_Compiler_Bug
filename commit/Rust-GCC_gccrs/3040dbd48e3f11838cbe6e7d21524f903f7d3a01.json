{"sha": "3040dbd48e3f11838cbe6e7d21524f903f7d3a01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA0MGRiZDQ4ZTNmMTE4MzhjYmU2ZTdkMjE1MjRmOTAzZjdkM2EwMQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2011-09-01T10:45:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-01T10:45:53Z"}, "message": "exp_ch4.adb, [...]: Minor reformatting.\n\n2011-09-01  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb, a-exexda.adb: Minor reformatting.\n\nFrom-SVN: r178402", "tree": {"sha": "892d0ab6c59f3522d24d88163f798cdad74fa727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/892d0ab6c59f3522d24d88163f798cdad74fa727"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3040dbd48e3f11838cbe6e7d21524f903f7d3a01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3040dbd48e3f11838cbe6e7d21524f903f7d3a01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3040dbd48e3f11838cbe6e7d21524f903f7d3a01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3040dbd48e3f11838cbe6e7d21524f903f7d3a01/comments", "author": null, "committer": null, "parents": [{"sha": "fecbd77922c9772bb2823e111991349e0657241a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fecbd77922c9772bb2823e111991349e0657241a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fecbd77922c9772bb2823e111991349e0657241a"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "46e33deddcef0f2f78f563cb453108940446e831", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3040dbd48e3f11838cbe6e7d21524f903f7d3a01/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3040dbd48e3f11838cbe6e7d21524f903f7d3a01/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3040dbd48e3f11838cbe6e7d21524f903f7d3a01", "patch": "@@ -1,3 +1,7 @@\n+2011-09-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb, a-exexda.adb: Minor reformatting.\n+\n 2011-09-01  Robert Dewar  <dewar@adacore.com>\n \n \t* s-taskin.ads, s-tassta.adb, sem_ch13.adb: Minor reformatting."}, {"sha": "37cb115988dd28ae78a80dbe56e92c57a4dc42fa", "filename": "gcc/ada/a-exexda.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3040dbd48e3f11838cbe6e7d21524f903f7d3a01/gcc%2Fada%2Fa-exexda.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3040dbd48e3f11838cbe6e7d21524f903f7d3a01/gcc%2Fada%2Fa-exexda.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexda.adb?ref=3040dbd48e3f11838cbe6e7d21524f903f7d3a01", "patch": "@@ -433,7 +433,8 @@ package body Exception_Data is\n    ------------------------------\n \n    function Exception_Info_Maxlength\n-     (X : Exception_Occurrence) return Natural is\n+     (X : Exception_Occurrence) return Natural\n+   is\n    begin\n       return\n         Basic_Exception_Info_Maxlength (X)\n@@ -447,14 +448,15 @@ package body Exception_Data is\n    procedure Append_Info_Exception_Message\n      (X    : Exception_Occurrence;\n       Info : in out String;\n-      Ptr  : in out Natural) is\n+      Ptr  : in out Natural)\n+   is\n    begin\n       if X.Id = Null_Id then\n          raise Constraint_Error;\n       end if;\n \n       declare\n-         Len : constant Natural := Exception_Message_Length (X);\n+         Len : constant Natural           := Exception_Message_Length (X);\n          Msg : constant String (1 .. Len) := X.Msg (1 .. Len);\n       begin\n          Append_Info_String (Msg, Info, Ptr);\n@@ -476,7 +478,7 @@ package body Exception_Data is\n       end if;\n \n       declare\n-         Len  : constant Natural := Exception_Name_Length (Id);\n+         Len  : constant Natural           := Exception_Name_Length (Id);\n          Name : constant String (1 .. Len) := To_Ptr (Id.Full_Name) (1 .. Len);\n       begin\n          Append_Info_String (Name, Info, Ptr);\n@@ -497,7 +499,8 @@ package body Exception_Data is\n    ---------------------------\n \n    function Exception_Name_Length\n-     (Id : Exception_Id) return Natural is\n+     (Id : Exception_Id) return Natural\n+   is\n    begin\n       --  What is stored in the internal Name buffer includes a terminating\n       --  null character that we never care about.\n@@ -516,7 +519,8 @@ package body Exception_Data is\n    ------------------------------\n \n    function Exception_Message_Length\n-     (X : Exception_Occurrence) return Natural is\n+     (X : Exception_Occurrence) return Natural\n+   is\n    begin\n       return X.Msg_Length;\n    end Exception_Message_Length;\n@@ -530,7 +534,6 @@ package body Exception_Data is\n    is\n       Info : aliased String (1 .. Basic_Exception_Tback_Maxlength (X));\n       Ptr  : Natural := Info'First - 1;\n-\n    begin\n       Append_Info_Basic_Exception_Traceback (X, Info, Ptr);\n       return Info (Info'First .. Ptr);\n@@ -545,7 +548,6 @@ package body Exception_Data is\n    is\n       Info : String (1 .. Exception_Info_Maxlength (X));\n       Ptr  : Natural := Info'First - 1;\n-\n    begin\n       Append_Info_Exception_Information (X, Info, Ptr);\n       return Info (Info'First .. Ptr);\n@@ -596,9 +598,9 @@ package body Exception_Data is\n          if Excep.Msg_Length <= Exception_Msg_Max_Length - Size then\n             Excep.Msg (Excep.Msg_Length + 1) := ':';\n             Excep.Msg_Length := Excep.Msg_Length + Size;\n+\n             Val := Number;\n             Size := 0;\n-\n             while Val > 0 loop\n                Remind := Val rem 10;\n                Val := Val / 10;\n@@ -658,16 +660,14 @@ package body Exception_Data is\n       Len   : constant Natural :=\n                 Natural'Min (Message'Length, Exception_Msg_Max_Length);\n       First : constant Integer := Message'First;\n-      Excep  : constant EOA := Get_Current_Excep.all;\n-\n+      Excep : constant EOA     := Get_Current_Excep.all;\n    begin\n       Excep.Exception_Raised := False;\n       Excep.Msg_Length       := Len;\n       Excep.Msg (1 .. Len)   := Message (First .. First + Len - 1);\n       Excep.Id               := Id;\n       Excep.Num_Tracebacks   := 0;\n       Excep.Pid              := Local_Partition_ID;\n-\n    end Set_Exception_Msg;\n \n    ----------------------------------"}, {"sha": "218c94dfd42034c425b53173ff159ed969c47621", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3040dbd48e3f11838cbe6e7d21524f903f7d3a01/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3040dbd48e3f11838cbe6e7d21524f903f7d3a01/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=3040dbd48e3f11838cbe6e7d21524f903f7d3a01", "patch": "@@ -4428,18 +4428,21 @@ package body Exp_Ch4 is\n          -------------------------\n \n          function Find_Insertion_Node return Node_Id is\n-            Par : Node_Id := N;\n+            Par : Node_Id;\n \n          begin\n             --  Climb up the branches of a complex if statement\n \n+            Par := N;\n             while Nkind_In (Parent (Par), N_And_Then, N_Op_Not, N_Or_Else) loop\n                Par := Parent (Par);\n             end loop;\n \n             return Par;\n          end Find_Insertion_Node;\n \n+         --  Local variables\n+\n          Ins_Nod   : constant Node_Id    := Find_Insertion_Node;\n          Loc       : constant Source_Ptr := Sloc (Decl);\n          Obj_Id    : constant Entity_Id  := Defining_Identifier (Decl);\n@@ -4452,8 +4455,8 @@ package body Exp_Ch4 is\n          Temp_Id   : Node_Id;\n \n       begin\n-         --  Step 1: Create the access type which provides a reference to\n-         --  the transient object.\n+         --  Step 1: Create the access type which provides a reference to the\n+         --  transient object.\n \n          if Is_Access_Type (Obj_Typ) then\n             Desig_Typ := Directly_Designated_Type (Obj_Typ);\n@@ -4469,11 +4472,11 @@ package body Exp_Ch4 is\n          Ptr_Decl :=\n            Make_Full_Type_Declaration (Loc,\n              Defining_Identifier => Ptr_Id,\n-               Type_Definition =>\n-                 Make_Access_To_Object_Definition (Loc,\n-                   All_Present        =>\n-                     Ekind (Obj_Typ) = E_General_Access_Type,\n-                   Subtype_Indication => New_Reference_To (Desig_Typ, Loc)));\n+             Type_Definition     =>\n+               Make_Access_To_Object_Definition (Loc,\n+                 All_Present        =>\n+                   Ekind (Obj_Typ) = E_General_Access_Type,\n+                 Subtype_Indication => New_Reference_To (Desig_Typ, Loc)));\n \n          Insert_Action (Ins_Nod, Ptr_Decl);\n          Analyze (Ptr_Decl);"}]}