{"sha": "b6dd42a9a8ec56b5badc59c78f69760048914da4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkZDQyYTlhOGVjNTZiNWJhZGM1OWM3OGY2OTc2MDA0ODkxNGRhNA==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2015-04-01T16:09:48Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2015-04-01T16:09:48Z"}, "message": "expmed.c (strict_volatile_bitfield_p): Check that the access will not cross a MODESIZE boundary.\n\ngcc:\n2015-04-01  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * expmed.c (strict_volatile_bitfield_p): Check that the access will\n        not cross a MODESIZE boundary.\n        (store_bit_field, extract_bit_field): Added assertions in the\n        strict volatile bitfields code path.\n\ntestsuite:\n2015-04-01  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * gcc.dg/pr23623.c: Added aligned attribute.\n        * gcc.dg/20141029-1.c: Likewise.\n        * gcc.dg/20150306-1.c: New test.\n\nFrom-SVN: r221809", "tree": {"sha": "685a24f72b5aab58aa712a1d6f12a24c7ec9f71c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/685a24f72b5aab58aa712a1d6f12a24c7ec9f71c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6dd42a9a8ec56b5badc59c78f69760048914da4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6dd42a9a8ec56b5badc59c78f69760048914da4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6dd42a9a8ec56b5badc59c78f69760048914da4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6dd42a9a8ec56b5badc59c78f69760048914da4/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14e51ef29345191a67a212ecccd79fa426826a64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e51ef29345191a67a212ecccd79fa426826a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e51ef29345191a67a212ecccd79fa426826a64"}], "stats": {"total": 70, "additions": 57, "deletions": 13}, "files": [{"sha": "47c0f22a735263a8b399f32c9d52f858038c9c96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6dd42a9a8ec56b5badc59c78f69760048914da4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6dd42a9a8ec56b5badc59c78f69760048914da4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6dd42a9a8ec56b5badc59c78f69760048914da4", "patch": "@@ -1,3 +1,10 @@\n+2015-04-01  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* expmed.c (strict_volatile_bitfield_p): Check that the access will\n+\tnot cross a MODESIZE boundary.\n+\t(store_bit_field, extract_bit_field): Added assertions in the\n+\tstrict volatile bitfields code path.\n+\n 2015-04-01  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n \n \tPR target/65624"}, {"sha": "6327629d458fc734fbf26c16a9457e7307f52213", "filename": "gcc/expmed.c", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6dd42a9a8ec56b5badc59c78f69760048914da4/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6dd42a9a8ec56b5badc59c78f69760048914da4/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=b6dd42a9a8ec56b5badc59c78f69760048914da4", "patch": "@@ -472,9 +472,13 @@ strict_volatile_bitfield_p (rtx op0, unsigned HOST_WIDE_INT bitsize,\n     return false;\n \n   /* Check for cases of unaligned fields that must be split.  */\n-  if (bitnum % BITS_PER_UNIT + bitsize > modesize\n-      || (STRICT_ALIGNMENT\n-\t  && bitnum % GET_MODE_ALIGNMENT (fieldmode) + bitsize > modesize))\n+  if (bitnum % modesize + bitsize > modesize)\n+    return false;\n+\n+  /* The memory must be sufficiently aligned for a MODESIZE access.\n+     This condition guarantees, that the memory access will not\n+     touch anything after the end of the structure.  */\n+  if (MEM_ALIGN (op0) < modesize)\n     return false;\n \n   /* Check for cases where the C++ memory model applies.  */\n@@ -973,13 +977,15 @@ store_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n   if (strict_volatile_bitfield_p (str_rtx, bitsize, bitnum, fieldmode,\n \t\t\t\t  bitregion_start, bitregion_end))\n     {\n-      /* Storing any naturally aligned field can be done with a simple\n-\t store.  For targets that support fast unaligned memory, any\n-\t naturally sized, unit aligned field can be done directly.  */\n+      /* Storing of a full word can be done with a simple store.\n+\t We know here that the field can be accessed with one single\n+\t instruction.  For targets that support unaligned memory,\n+\t an unaligned access may be necessary.  */\n       if (bitsize == GET_MODE_BITSIZE (fieldmode))\n \t{\n \t  str_rtx = adjust_bitfield_address (str_rtx, fieldmode,\n \t\t\t\t\t     bitnum / BITS_PER_UNIT);\n+\t  gcc_assert (bitnum % BITS_PER_UNIT == 0);\n \t  emit_move_insn (str_rtx, value);\n \t}\n       else\n@@ -988,6 +994,7 @@ store_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \n \t  str_rtx = narrow_bit_field_mem (str_rtx, fieldmode, bitsize, bitnum,\n \t\t\t\t\t  &bitnum);\n+\t  gcc_assert (bitnum + bitsize <= GET_MODE_BITSIZE (fieldmode));\n \t  temp = copy_to_reg (str_rtx);\n \t  if (!store_bit_field_1 (temp, bitsize, bitnum, 0, 0,\n \t\t\t\t  fieldmode, value, true))\n@@ -1790,17 +1797,21 @@ extract_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \n   if (strict_volatile_bitfield_p (str_rtx, bitsize, bitnum, mode1, 0, 0))\n     {\n-      /* Extraction of a full MODE1 value can be done with a load as long as\n-\t the field is on a byte boundary and is sufficiently aligned.  */\n-      if (bitsize == GET_MODE_BITSIZE(mode1))\n+      /* Extraction of a full MODE1 value can be done with a simple load.\n+\t We know here that the field can be accessed with one single\n+\t instruction.  For targets that support unaligned memory,\n+\t an unaligned access may be necessary.  */\n+      if (bitsize == GET_MODE_BITSIZE (mode1))\n \t{\n \t  rtx result = adjust_bitfield_address (str_rtx, mode1,\n \t\t\t\t\t\tbitnum / BITS_PER_UNIT);\n+\t  gcc_assert (bitnum % BITS_PER_UNIT == 0);\n \t  return convert_extracted_bit_field (result, mode, tmode, unsignedp);\n \t}\n \n       str_rtx = narrow_bit_field_mem (str_rtx, mode1, bitsize, bitnum,\n \t\t\t\t      &bitnum);\n+      gcc_assert (bitnum + bitsize <= GET_MODE_BITSIZE (mode1));\n       str_rtx = copy_to_reg (str_rtx);\n     }\n "}, {"sha": "9f8e0b75babcd3c9672edc03b1998d8a05b3dc33", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6dd42a9a8ec56b5badc59c78f69760048914da4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6dd42a9a8ec56b5badc59c78f69760048914da4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6dd42a9a8ec56b5badc59c78f69760048914da4", "patch": "@@ -1,3 +1,9 @@\n+2015-04-01  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* gcc.dg/pr23623.c: Added aligned attribute.\n+\t* gcc.dg/20141029-1.c: Likewise.\n+\t* gcc.dg/20150306-1.c: New test.\n+\n 2015-04-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/65554"}, {"sha": "1d18a1b8ac3bd21923e7e2152ae78f678996cf77", "filename": "gcc/testsuite/gcc.dg/20141029-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6dd42a9a8ec56b5badc59c78f69760048914da4/gcc%2Ftestsuite%2Fgcc.dg%2F20141029-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6dd42a9a8ec56b5badc59c78f69760048914da4/gcc%2Ftestsuite%2Fgcc.dg%2F20141029-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20141029-1.c?ref=b6dd42a9a8ec56b5badc59c78f69760048914da4", "patch": "@@ -14,7 +14,7 @@ struct system_periph {\n       unsigned short  :8;\n     } BIT;\n   } ALL;\n-};\n+} __attribute__((aligned(2)));\n \n void\n foo()"}, {"sha": "55caf3b93cedf4b8e778287214e00e047a3fa03c", "filename": "gcc/testsuite/gcc.dg/20150306-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6dd42a9a8ec56b5badc59c78f69760048914da4/gcc%2Ftestsuite%2Fgcc.dg%2F20150306-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6dd42a9a8ec56b5badc59c78f69760048914da4/gcc%2Ftestsuite%2Fgcc.dg%2F20150306-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20150306-1.c?ref=b6dd42a9a8ec56b5badc59c78f69760048914da4", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target size32plus } */\n+/* { dg-options \"-fstrict-volatile-bitfields\" } */\n+\n+struct s\n+{\n+  char x : 8;\n+  unsigned int y : 31;\n+} __attribute__((packed));\n+\n+volatile struct s global;\n+\n+int\n+main ()\n+{\n+  global.y = 0x7FFFFFFF;\n+  if (global.y != 0x7FFFFFFF)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "e076b600335d2239493d2bb7efc70ab1503e6171", "filename": "gcc/testsuite/gcc.dg/pr23623.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6dd42a9a8ec56b5badc59c78f69760048914da4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23623.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6dd42a9a8ec56b5badc59c78f69760048914da4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23623.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23623.c?ref=b6dd42a9a8ec56b5badc59c78f69760048914da4", "patch": "@@ -10,19 +10,19 @@ extern struct\n {\n   unsigned int b : 1;\n   unsigned int : 31;\n-} bf1;\n+} __attribute__((aligned(4))) bf1;\n \n extern volatile struct\n {\n   unsigned int b : 1;\n   unsigned int : 31;\n-} bf2;\n+} __attribute__((aligned(4))) bf2;\n \n extern struct\n {\n   volatile unsigned int b : 1;\n   volatile unsigned int : 31;\n-} bf3;\n+} __attribute__((aligned(4))) bf3;\n \n void writeb(void)\n {"}]}