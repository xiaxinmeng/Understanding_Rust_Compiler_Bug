{"sha": "8c889ae483adccb124c7104e6c0e1ab274bd3677", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM4ODlhZTQ4M2FkY2NiMTI0YzcxMDRlNmMwZTFhYjI3NGJkMzY3Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T09:41:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T09:41:15Z"}, "message": "[multiple changes]\n\n2011-08-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-pooglo.adb: Minor reformatting.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_N_Assignment_Statement): if the left-hand side is\n\tan indexed component of a packed array whose element type is a record\n\twith a representation clause different from that of the right-hand\n\tside, generate a temporary to minimuze the number of bit-field\n\toperations generated.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_util.adb (Insert_Actions): Use clauses can be part of lists of\n\tdeclarations, and thus are likely insertion points for actions.\n\n2011-08-29  Bob Duff  <duff@adacore.com>\n\n\t* einfo.ads: Minor comment fix.\n\nFrom-SVN: r178182", "tree": {"sha": "3ed508e1dcba52c10b6c5c6140f8d5e30e212298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ed508e1dcba52c10b6c5c6140f8d5e30e212298"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c889ae483adccb124c7104e6c0e1ab274bd3677", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c889ae483adccb124c7104e6c0e1ab274bd3677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c889ae483adccb124c7104e6c0e1ab274bd3677", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c889ae483adccb124c7104e6c0e1ab274bd3677/comments", "author": null, "committer": null, "parents": [{"sha": "1a07a71a4b60c6920d0c7b77150a8d4a7049f134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a07a71a4b60c6920d0c7b77150a8d4a7049f134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a07a71a4b60c6920d0c7b77150a8d4a7049f134"}], "stats": {"total": 83, "additions": 72, "deletions": 11}, "files": [{"sha": "24e400a154a9abd1ad5260725b6f563935458318", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c889ae483adccb124c7104e6c0e1ab274bd3677/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c889ae483adccb124c7104e6c0e1ab274bd3677/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8c889ae483adccb124c7104e6c0e1ab274bd3677", "patch": "@@ -1,3 +1,24 @@\n+2011-08-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-pooglo.adb: Minor reformatting.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): if the left-hand side is\n+\tan indexed component of a packed array whose element type is a record\n+\twith a representation clause different from that of the right-hand\n+\tside, generate a temporary to minimuze the number of bit-field\n+\toperations generated.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.adb (Insert_Actions): Use clauses can be part of lists of\n+\tdeclarations, and thus are likely insertion points for actions.\n+\n+2011-08-29  Bob Duff  <duff@adacore.com>\n+\n+\t* einfo.ads: Minor comment fix.\n+\n 2011-08-29  Robert Dewar  <dewar@adacore.com>\n \n \t* frontend.adb, gnat1drv.adb: Minor reformatting."}, {"sha": "9e0ff33ddc67c920f16da96e298aa29a2ce9bd11", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c889ae483adccb124c7104e6c0e1ab274bd3677/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c889ae483adccb124c7104e6c0e1ab274bd3677/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=8c889ae483adccb124c7104e6c0e1ab274bd3677", "patch": "@@ -1088,9 +1088,9 @@ package Einfo is\n --       is itself another entity. For a type entity, points to the parent\n --       type for a derived type, or if the type is not derived, points to\n --       itself. For a subtype entity, Etype points to the base type. For\n---       a class wide type, points to the parent type. For a subprogram or\n---       subprogram type, Etype has the return type of a function or is set\n---       to Standard_Void_Type to represent a procedure.\n+--       a class wide type, points to the corresponding specific type. For a\n+--       subprogram or subprogram type, Etype has the return type of a function\n+--       or is set to Standard_Void_Type to represent a procedure.\n --\n --       Note one obscure case: for pragma Default_Storage_Pool (null), the\n --       Etype of the N_Null node is Empty."}, {"sha": "47ea0d84392af97ee8a96b651316b73dcabcefe9", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c889ae483adccb124c7104e6c0e1ab274bd3677/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c889ae483adccb124c7104e6c0e1ab274bd3677/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=8c889ae483adccb124c7104e6c0e1ab274bd3677", "patch": "@@ -1890,10 +1890,41 @@ package body Exp_Ch5 is\n \n       if Nkind (Lhs) = N_Indexed_Component\n         and then Is_Bit_Packed_Array (Etype (Prefix (Lhs)))\n-        and then not Crep\n       then\n-         Expand_Bit_Packed_Element_Set (N);\n-         return;\n+         if not Crep then\n+            Expand_Bit_Packed_Element_Set (N);\n+            return;\n+         else\n+\n+            --  Generate the following, to force component-by-component\n+            --  assignments in an efficient way. Otherwise each component\n+            --  will require a temporary and two bit-field manipulations.\n+\n+            --  T1 : Elmt_Type;\n+            --  T1 := RhS;\n+            --  Lhs := T1;\n+\n+            declare\n+               Tnn : constant Entity_Id := Make_Temporary (Loc, 'T');\n+               Stats : List_Id;\n+\n+            begin\n+               Stats := New_List (\n+                 Make_Object_Declaration (Loc,\n+                   Defining_Identifier => Tnn,\n+                   Object_Definition => New_Occurrence_Of (Etype (Lhs), Loc)),\n+                Make_Assignment_Statement (Loc,\n+                  Name => New_Occurrence_Of (Tnn, Loc),\n+                  Expression => Relocate_Node (Rhs)),\n+                Make_Assignment_Statement (Loc,\n+                  Name => Relocate_Node (Lhs),\n+                  Expression => New_Occurrence_Of (Tnn, Loc)));\n+\n+               Insert_Actions (N, Stats);\n+               Rewrite (N, Make_Null_Statement (Loc));\n+               Analyze (N);\n+            end;\n+         end if;\n \n       --  Build-in-place function call case. Note that we're not yet doing\n       --  build-in-place for user-written assignment statements (the assignment"}, {"sha": "64a6b6d3ffbb6369df1ac17f5fa952452de949be", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c889ae483adccb124c7104e6c0e1ab274bd3677/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c889ae483adccb124c7104e6c0e1ab274bd3677/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=8c889ae483adccb124c7104e6c0e1ab274bd3677", "patch": "@@ -3028,6 +3028,11 @@ package body Exp_Util is\n                N_Task_Body_Stub                         |\n                N_Task_Type_Declaration                  |\n \n+               --  Use clauses can appear in lists of declarations\n+\n+               N_Use_Package_Clause                     |\n+               N_Use_Type_Clause                        |\n+\n                --  Freeze entity behaves like a declaration or statement\n \n                N_Freeze_Entity\n@@ -3328,8 +3333,6 @@ package body Exp_Util is\n                N_Unconstrained_Array_Definition         |\n                N_Unused_At_End                          |\n                N_Unused_At_Start                        |\n-               N_Use_Package_Clause                     |\n-               N_Use_Type_Clause                        |\n                N_Variant                                |\n                N_Variant_Part                           |\n                N_Validate_Unchecked_Conversion          |"}, {"sha": "6e9cc30a3c70a11d332271f4775178122d20a219", "filename": "gcc/ada/s-pooglo.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c889ae483adccb124c7104e6c0e1ab274bd3677/gcc%2Fada%2Fs-pooglo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c889ae483adccb124c7104e6c0e1ab274bd3677/gcc%2Fada%2Fs-pooglo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pooglo.adb?ref=8c889ae483adccb124c7104e6c0e1ab274bd3677", "patch": "@@ -69,11 +69,15 @@ package body System.Pool_Global is\n       end if;\n \n       if Alignment > Standard'System_Allocator_Alignment then\n-         --  Realign the returned address.\n+\n+         --  Realign the returned address\n+\n          Aligned_Address := To_Address\n            (To_Integer (Allocated) + Integer_Address (Alignment)\n               - (To_Integer (Allocated) mod Integer_Address (Alignment)));\n-         --  Save the block address.\n+\n+         --  Save the block address\n+\n          declare\n             Saved_Address : System.Address;\n             pragma Import (Ada, Saved_Address);\n@@ -105,7 +109,9 @@ package body System.Pool_Global is\n \n    begin\n       if Alignment > Standard'System_Allocator_Alignment then\n-         --  Retrieve the block address.\n+\n+         --  Retrieve the block address\n+\n          declare\n             Saved_Address : System.Address;\n             pragma Import (Ada, Saved_Address);"}]}