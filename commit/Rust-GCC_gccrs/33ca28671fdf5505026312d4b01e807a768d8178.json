{"sha": "33ca28671fdf5505026312d4b01e807a768d8178", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNjYTI4NjcxZmRmNTUwNTAyNjMxMmQ0YjAxZTgwN2E3NjhkODE3OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T09:54:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T09:54:35Z"}, "message": "[multiple changes]\n\n2014-07-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Iterator_Specification): If the domain of\n\titeration is an array component that depends on discriminants,\n\tcreate an actual subtype for it, because the preanalysis of the\n\titerator name does not create actual subtypes of components.\n\n2014-07-31  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* freeze.adb (Freeze_Expression): Update the loop in charge\n\tof finding a proper insertion place for freeze nodes to handle\n\tN_Expression_With_Actions nodes.\n\nFrom-SVN: r213333", "tree": {"sha": "905043e449a5ae3ab26d86e35ecc96777d634001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/905043e449a5ae3ab26d86e35ecc96777d634001"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33ca28671fdf5505026312d4b01e807a768d8178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ca28671fdf5505026312d4b01e807a768d8178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33ca28671fdf5505026312d4b01e807a768d8178", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ca28671fdf5505026312d4b01e807a768d8178/comments", "author": null, "committer": null, "parents": [{"sha": "0407af53dd36c25bf4dbbc18f2e8f4d1cf0b7092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0407af53dd36c25bf4dbbc18f2e8f4d1cf0b7092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0407af53dd36c25bf4dbbc18f2e8f4d1cf0b7092"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "d8f1bbb1d901be4f7c5c429b9fa616acca9fce92", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ca28671fdf5505026312d4b01e807a768d8178/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ca28671fdf5505026312d4b01e807a768d8178/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=33ca28671fdf5505026312d4b01e807a768d8178", "patch": "@@ -1,3 +1,9 @@\n+2014-07-31  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* freeze.adb (Freeze_Expression): Update the loop in charge\n+\tof finding a proper insertion place for freeze nodes to handle\n+\tN_Expression_With_Actions nodes.\n+\n 2014-07-31  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_util.adb, a-ngelfu.ads, prj-nmsc.adb, prj-conf.adb: Minor"}, {"sha": "fb1b90485f79e495cbbf197e3d264449dd3344f8", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ca28671fdf5505026312d4b01e807a768d8178/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ca28671fdf5505026312d4b01e807a768d8178/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=33ca28671fdf5505026312d4b01e807a768d8178", "patch": "@@ -6143,13 +6143,26 @@ package body Freeze is\n \n                exit when Is_List_Member (P);\n \n-            --  Note: The N_Loop_Statement is a special case. A type that\n-            --  appears in the source can never be frozen in a loop (this\n-            --  occurs only because of a loop expanded by the expander), so we\n-            --  keep on going. Otherwise we terminate the search. Same is true\n-            --  of any entity which comes from source. (if they have predefined\n-            --  type, that type does not appear to come from source, but the\n-            --  entity should not be frozen here).\n+            --  Freeze nodes produced by an expression coming from the Actions\n+            --  list of a N_Expression_With_Actions node must remain within the\n+            --  Actions list. Inserting the freeze nodes further up the tree\n+            --  may lead to use before declaration issues in the case of array\n+            --  types.\n+\n+            when N_Expression_With_Actions =>\n+               if Is_List_Member (P)\n+                 and then List_Containing (P) = Actions (Parent_P)\n+               then\n+                  exit;\n+               end if;\n+\n+            --  Note: N_Loop_Statement is a special case. A type that appears\n+            --  in the source can never be frozen in a loop (this occurs only\n+            --  because of a loop expanded by the expander), so we keep on\n+            --  going. Otherwise we terminate the search. Same is true of any\n+            --  entity which comes from source. (if they have predefined type,\n+            --  that type does not appear to come from source, but the entity\n+            --  should not be frozen here).\n \n             when N_Loop_Statement =>\n                exit when not Comes_From_Source (Etype (N))"}, {"sha": "8bf9df719444c189cc3cd3204535d0ca0d5ac707", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ca28671fdf5505026312d4b01e807a768d8178/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ca28671fdf5505026312d4b01e807a768d8178/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=33ca28671fdf5505026312d4b01e807a768d8178", "patch": "@@ -1750,11 +1750,33 @@ package body Sem_Ch5 is\n         and then not ASIS_Mode\n       then\n          declare\n-            Id   : constant Entity_Id := Make_Temporary (Loc, 'R', Iter_Name);\n-            Decl : Node_Id;\n+            Id    : constant Entity_Id := Make_Temporary (Loc, 'R', Iter_Name);\n+            Decl  : Node_Id;\n+            Act_S : Node_Id;\n \n          begin\n-            Typ := Etype (Iter_Name);\n+\n+            --  If the domain of iteration is an array component that depends\n+            --  on a discriminant, create actual subtype for it. Pre-analysis\n+            --  does not generate the actual subtype of a selected component.\n+\n+            if Nkind (Iter_Name) = N_Selected_Component\n+              and then Is_Array_Type (Etype (Iter_Name))\n+            then\n+               Act_S :=\n+                 Build_Actual_Subtype_Of_Component\n+                   (Etype (Selector_Name (Iter_Name)), Iter_Name);\n+               Insert_Action (N, Act_S);\n+\n+               if Present (Act_S) then\n+                  Typ := Defining_Identifier (Act_S);\n+               else\n+                  Typ := Etype (Iter_Name);\n+               end if;\n+\n+            else\n+               Typ := Etype (Iter_Name);\n+            end if;\n \n             --  Protect against malformed iterator\n "}]}