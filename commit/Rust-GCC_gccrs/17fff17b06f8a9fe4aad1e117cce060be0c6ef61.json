{"sha": "17fff17b06f8a9fe4aad1e117cce060be0c6ef61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdmZmYxN2IwNmY4YTlmZTRhYWQxZTExN2NjZTA2MGJlMGM2ZWY2MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-09-19T15:38:16Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-09-19T15:38:16Z"}, "message": "re PR rtl-optimization/54290 (wrong code at -O2 with large offset)\n\n\tPR rtl-optimization/54290\n\t* reload1.c (choose_reload_regs): Also take into account secondary MEMs\n\tto remove address replacements for inherited reloads.\n\t(replaced_subreg): Move around.\n\nFrom-SVN: r191484", "tree": {"sha": "517a7be095a7ea671516cbc69701962ee2aface4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/517a7be095a7ea671516cbc69701962ee2aface4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17fff17b06f8a9fe4aad1e117cce060be0c6ef61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17fff17b06f8a9fe4aad1e117cce060be0c6ef61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17fff17b06f8a9fe4aad1e117cce060be0c6ef61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17fff17b06f8a9fe4aad1e117cce060be0c6ef61/comments", "author": null, "committer": null, "parents": [{"sha": "5b156feaf87dac1a14203b280f19c1d645994211", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b156feaf87dac1a14203b280f19c1d645994211", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b156feaf87dac1a14203b280f19c1d645994211"}], "stats": {"total": 98, "additions": 81, "deletions": 17}, "files": [{"sha": "48884d8ed62339361e9181dc35ce5b88d8029467", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fff17b06f8a9fe4aad1e117cce060be0c6ef61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fff17b06f8a9fe4aad1e117cce060be0c6ef61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17fff17b06f8a9fe4aad1e117cce060be0c6ef61", "patch": "@@ -1,3 +1,10 @@\n+2012-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/54290\n+\t* reload1.c (choose_reload_regs): Also take into account secondary MEMs\n+\tto remove address replacements for inherited reloads.\n+\t(replaced_subreg): Move around.\n+\n 2012-09-19  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/aix61.h (TARGET_DEFAULT): Add MASK_PPC_GPOPT,"}, {"sha": "4487ea83fa9ee8272523b539edc0e2215d5ba1ed", "filename": "gcc/reload1.c", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fff17b06f8a9fe4aad1e117cce060be0c6ef61/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fff17b06f8a9fe4aad1e117cce060be0c6ef61/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=17fff17b06f8a9fe4aad1e117cce060be0c6ef61", "patch": "@@ -6352,6 +6352,20 @@ choose_reload_regs_init (struct insn_chain *chain, rtx *save_reload_reg_rtx)\n \t\t\t      rld[i].when_needed, rld[i].mode);\n }\n \n+#ifdef SECONDARY_MEMORY_NEEDED\n+/* If X is not a subreg, return it unmodified.  If it is a subreg,\n+   look up whether we made a replacement for the SUBREG_REG.  Return\n+   either the replacement or the SUBREG_REG.  */\n+\n+static rtx\n+replaced_subreg (rtx x)\n+{\n+  if (GET_CODE (x) == SUBREG)\n+    return find_replacement (&SUBREG_REG (x));\n+  return x;\n+}\n+#endif\n+\n /* Assign hard reg targets for the pseudo-registers we must reload\n    into hard regs for this insn.\n    Also output the instructions to copy them in and out of the hard regs.\n@@ -6942,7 +6956,7 @@ choose_reload_regs (struct insn_chain *chain)\n       for (j = 0; j < n_reloads; j++)\n \t{\n \t  int r = reload_order[j];\n-\t  rtx check_reg;\n+\t  rtx check_reg, tem;\n \t  if (reload_inherited[r] && rld[r].reg_rtx)\n \t    check_reg = rld[r].reg_rtx;\n \t  else if (reload_override_in[r]\n@@ -6974,10 +6988,26 @@ choose_reload_regs (struct insn_chain *chain)\n \t     If we succeeded removing some reload and we are doing a preliminary\n \t     pass just to remove such reloads, make another pass, since the\n \t     removal of one reload might allow us to inherit another one.  */\n-\t  else if (rld[r].in\n+\t  else if (pass\n+\t\t   && rld[r].in\n+\t\t   && rld[r].out != rld[r].in\n+\t\t   && remove_address_replacements (rld[r].in))\n+\t    pass = 2;\n+#ifdef SECONDARY_MEMORY_NEEDED\n+\t  /* If we needed a memory location for the reload, we also have to\n+\t     remove its related reloads.  */\n+\t  else if (pass\n+\t           && rld[r].in\n \t\t   && rld[r].out != rld[r].in\n-\t\t   && remove_address_replacements (rld[r].in) && pass)\n+\t\t   && (tem = replaced_subreg (rld[r].in), REG_P (tem))\t\t   \n+\t\t   && REGNO (tem) < FIRST_PSEUDO_REGISTER\n+\t\t   && SECONDARY_MEMORY_NEEDED (REGNO_REG_CLASS (REGNO (tem)),\n+\t\t\t\t\t       rld[r].rclass, rld[r].inmode)\n+\t\t   && remove_address_replacements\n+\t\t      (get_secondary_mem (tem, rld[r].inmode, rld[r].opnum,\n+\t\t\t\t\t  rld[r].when_needed)))\n \t    pass = 2;\n+#endif\n \t}\n     }\n \n@@ -8458,20 +8488,6 @@ emit_insn_if_valid_for_reload (rtx insn)\n   return NULL;\n }\n \n-#ifdef SECONDARY_MEMORY_NEEDED\n-/* If X is not a subreg, return it unmodified.  If it is a subreg,\n-   look up whether we made a replacement for the SUBREG_REG.  Return\n-   either the replacement or the SUBREG_REG.  */\n-\n-static rtx\n-replaced_subreg (rtx x)\n-{\n-  if (GET_CODE (x) == SUBREG)\n-    return find_replacement (&SUBREG_REG (x));\n-  return x;\n-}\n-#endif\n-\n /* Emit code to perform a reload from IN (which may be a reload register) to\n    OUT (which may also be a reload register).  IN or OUT is from operand\n    OPNUM with reload type TYPE."}, {"sha": "6c6fdf374122a774d5e7cf65f80893e9c82b1d9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fff17b06f8a9fe4aad1e117cce060be0c6ef61/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fff17b06f8a9fe4aad1e117cce060be0c6ef61/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17fff17b06f8a9fe4aad1e117cce060be0c6ef61", "patch": "@@ -1,3 +1,7 @@\n+2012-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/execute/20120919-1.c: New test.\n+\n 2012-09-19  Richard Guenther  <rguenther@suse.de>\n \n \t* lib/c-torture.exp (TORTURE_OPTIONS): Add -Og -g."}, {"sha": "e7f329538c01c53dd20388b18b8e35c02470fc77", "filename": "gcc/testsuite/gcc.c-torture/execute/20120919-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fff17b06f8a9fe4aad1e117cce060be0c6ef61/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20120919-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fff17b06f8a9fe4aad1e117cce060be0c6ef61/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20120919-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20120919-1.c?ref=17fff17b06f8a9fe4aad1e117cce060be0c6ef61", "patch": "@@ -0,0 +1,37 @@\n+/* PR rtl-optimization/54290 */\n+/* Testcase by Eric Volk <eriksnga@gmail.com> */\n+\n+double vd[2] = {1., 0.};\n+int vi[2] = {1234567890, 0};\n+double *pd = vd;\n+int *pi = vi;\n+\n+extern void abort(void);\n+\n+void init (int *n, int *dummy) __attribute__ ((noinline,noclone));\n+\n+void init (int *n, int *dummy)\n+{\n+  if(0 == n) dummy[0] = 0;\n+}\n+\n+int main (void)\n+{\n+  int dummy[1532];\n+  int i = -1, n = 1, s = 0;\n+  init (&n, dummy);\n+  while (i < n) {\n+    if (i == 0) {\n+      if (pd[i] > 0) {\n+        if (pi[i] > 0) {\n+          s += pi[i];\n+        }\n+      }\n+      pd[i] = pi[i];\n+    }\n+    ++i;\n+  }\n+  if (s != 1234567890)\n+    abort ();\n+  return 0;\n+}"}]}