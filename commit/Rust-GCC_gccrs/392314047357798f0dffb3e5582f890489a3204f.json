{"sha": "392314047357798f0dffb3e5582f890489a3204f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkyMzE0MDQ3MzU3Nzk4ZjBkZmZiM2U1NTgyZjg5MDQ4OWEzMjA0Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-26T12:56:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-26T12:56:43Z"}, "message": "[multiple changes]\n\n2010-10-26  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch3.adb: Fix typo, comment updates.\n\t* namet.adb: Minor comment additions.\n\t* einfo.ads: Minor comment update.\n\n2010-10-26  Javier Miranda  <miranda@adacore.com>\n\n\t* einfo.adb (Set_Dispatch_Table_Wrappers): Complete the assertion.\n\n2010-10-26  Robert Dewar  <dewar@adacore.com>\n\n\t* par.adb, par-ch13.adb (Aspect_Specifications_Present): Add Strict\n\tparameter.\n\nFrom-SVN: r165955", "tree": {"sha": "9c39166316aeff1da4ff9ac0bc59f9a5034ff53e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c39166316aeff1da4ff9ac0bc59f9a5034ff53e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/392314047357798f0dffb3e5582f890489a3204f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392314047357798f0dffb3e5582f890489a3204f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/392314047357798f0dffb3e5582f890489a3204f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392314047357798f0dffb3e5582f890489a3204f/comments", "author": null, "committer": null, "parents": [{"sha": "329b9f810de49de85e57c8c6a1071a4063276a3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329b9f810de49de85e57c8c6a1071a4063276a3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329b9f810de49de85e57c8c6a1071a4063276a3a"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "deb0093de5230f4ec927e8eb56ab187e7421c462", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392314047357798f0dffb3e5582f890489a3204f/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392314047357798f0dffb3e5582f890489a3204f/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=392314047357798f0dffb3e5582f890489a3204f", "patch": "@@ -3302,7 +3302,12 @@ package body Einfo is\n \n    procedure Set_Dispatch_Table_Wrappers (Id : E; V : L) is\n    begin\n-      pragma Assert (Is_Tagged_Type (Id) and then Is_Base_Type (Id));\n+      pragma Assert (Is_Tagged_Type (Id)\n+        and then Is_Base_Type (Id)\n+        and then Ekind_In (Id, E_Record_Type,\n+                               E_Record_Subtype,\n+                               E_Record_Type_With_Private,\n+                               E_Record_Subtype_With_Private));\n       Set_Elist26 (Id, V);\n    end Set_Dispatch_Table_Wrappers;\n "}, {"sha": "eda094eabcd805674e20aa24de81f9d7825f95f3", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392314047357798f0dffb3e5582f890489a3204f/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392314047357798f0dffb3e5582f890489a3204f/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=392314047357798f0dffb3e5582f890489a3204f", "patch": "@@ -1651,7 +1651,9 @@ package Einfo is\n --    Has_Pragma_Pure_Function (Flag179)\n --       Present in all entities. If set, indicates that a valid pragma\n --       Pure_Function was given for the entity. In some cases, we need to\n---       know that Is_Pure was explicitly set using this pragma.\n+--       know that Is_Pure was explicitly set using this pragma. We also set\n+--       this flag for some internal entities that we know should be treated\n+--       as pure for optimization purposes.\n \n --    Has_Pragma_Thread_Local_Storage (Flag169)\n --       Present in all entities. If set, indicates that a valid pragma"}, {"sha": "939b60ef5ef8c39e1eca93e6bf7c1fbe6ee7b882", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392314047357798f0dffb3e5582f890489a3204f/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392314047357798f0dffb3e5582f890489a3204f/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=392314047357798f0dffb3e5582f890489a3204f", "patch": "@@ -5861,13 +5861,18 @@ package body Exp_Ch3 is\n                     Alternatives => Lst))));\n \n       Set_TSS (Typ, Fent);\n-      Set_Is_Pure (Fent);\n-      --  The Pure flag will be reset is the current context is not pure.\n-      --  For optimization purposes and constant-folding, indicate that the\n-      --  Rep_To_Pos function can be considered free of side effects.\n \n+      --  Set Pure flag (it will be reset if the current context is not Pure).\n+      --  We also pretend there was a pragma Pure_Function so that for purposes\n+      --  of optimization and constant-folding, we will consider the function\n+      --  Pure even if we are not in a Pure context).\n+\n+      Set_Is_Pure (Fent);\n       Set_Has_Pragma_Pure_Function (Fent);\n \n+      --  Unless we are in -gnatD mode, where we are debugging generated code,\n+      --  this is an internal entity for which we don't need debug info.\n+\n       if not Debug_Generated_Code then\n          Set_Debug_Info_Off (Fent);\n       end if;"}, {"sha": "2842dfd4e814b55528b969abe8d81b8991f61dc6", "filename": "gcc/ada/namet.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392314047357798f0dffb3e5582f890489a3204f/gcc%2Fada%2Fnamet.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392314047357798f0dffb3e5582f890489a3204f/gcc%2Fada%2Fnamet.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.adb?ref=392314047357798f0dffb3e5582f890489a3204f", "patch": "@@ -140,9 +140,14 @@ package body Namet is\n \n       Verbosity : constant Int range 1 .. 3 := 1;\n       pragma Warnings (Off, Verbosity);\n-      --  1 => print basic summary information\n-      --  2 => in addition print number of entries per hash chain\n-      --  3 => in addition print content of entries\n+      --  This constant indicates the level of verbosity in the output from\n+      --  this procedure. Currently this can only be changed by editing the\n+      --  declaration above and recompiling. That's good enough in practice,\n+      --  since we very rarely need to use this debug option. Settings are:\n+      --\n+      --    1 => print basic summary information\n+      --    2 => in addition print number of entries per hash chain\n+      --    3 => in addition print content of entries\n \n       Zero : constant Int := Character'Pos ('0');\n "}, {"sha": "9cb40fc2470b853c3b383cec4f2a378b9bdd7785", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392314047357798f0dffb3e5582f890489a3204f/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392314047357798f0dffb3e5582f890489a3204f/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=392314047357798f0dffb3e5582f890489a3204f", "patch": "@@ -39,7 +39,9 @@ package body Ch13 is\n    -- Aspect_Specifications_Present --\n    -----------------------------------\n \n-   function Aspect_Specifications_Present return Boolean is\n+   function Aspect_Specifications_Present\n+     (Strict : Boolean := Ada_Version < Ada_2012) return Boolean\n+   is\n       Scan_State : Saved_Scan_State;\n       Result     : Boolean;\n \n@@ -52,7 +54,12 @@ package body Ch13 is\n       if Token = Tok_Semicolon then\n          Scan; -- past semicolon\n \n-         if Aspect_Specifications_Present then\n+         --  The recursive test is set Strict, since we already have one\n+         --  error (the unexpected semicolon), so we will ignore that semicolon\n+         --  only if we absolutely definitely have an aspect specification\n+         --  following it.\n+\n+         if Aspect_Specifications_Present (Strict => True) then\n             Error_Msg_SP (\"|extra \"\";\"\" ignored\");\n             return True;\n \n@@ -79,13 +86,14 @@ package body Ch13 is\n       if Token /= Tok_Identifier then\n          Result := False;\n \n-      --  In Ada 2012 mode, we are less strict, and we consider that we have\n+      --  This is where we pay attention to the Strict mode. Normally when we\n+      --  are in Ada 2012 mode, Strict is False, and we consider that we have\n       --  an aspect specification if the identifier is an aspect name (even if\n       --  not followed by =>) or the identifier is not an aspect name but is\n       --  followed by =>. P_Aspect_Specifications will generate messages if the\n       --  aspect specification is ill-formed.\n \n-      elsif Ada_Version >= Ada_2012 then\n+      elsif not Strict then\n          if Get_Aspect_Id (Token_Name) /= No_Aspect then\n             Result := True;\n          else"}, {"sha": "0532ec2a98cec476e6dac94d58ad90aa9636e7f6", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392314047357798f0dffb3e5582f890489a3204f/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392314047357798f0dffb3e5582f890489a3204f/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=392314047357798f0dffb3e5582f890489a3204f", "patch": "@@ -848,14 +848,21 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n    package Ch13 is\n       function P_Representation_Clause                return Node_Id;\n \n-      function Aspect_Specifications_Present return Boolean;\n+      function Aspect_Specifications_Present\n+        (Strict : Boolean := Ada_Version < Ada_2012) return Boolean;\n       --  This function tests whether the next keyword is WITH followed by\n       --  something that looks reasonably like an aspect specification. If so,\n       --  True is returned. Otherwise False is returned. In either case control\n       --  returns with the token pointer unchanged (i.e. pointing to the WITH\n       --  token in the case where True is returned). This function takes care\n       --  of generating appropriate messages if aspect specifications appear\n-      --  in versions of Ada prior to Ada 2012.\n+      --  in versions of Ada prior to Ada 2012. The parameter strict can be\n+      --  set to True, to be rather strict about considering something to be\n+      --  an aspect speficiation. If Strict is False, then the circuitry is\n+      --  rather more generous in considering something ill-formed to be an\n+      --  attempt at an aspect speciciation. The default is more strict for\n+      --  Ada versions before Ada 2012 (where aspect specifications are not\n+      --  permitted).\n \n       procedure P_Aspect_Specifications (Decl : Node_Id);\n       --  This subprogram is called with the current token pointing to either a"}]}