{"sha": "1ba305b54cffb88c726e046e72ccbc6c09c6e4b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJhMzA1YjU0Y2ZmYjg4YzcyNmUwNDZlNzJjY2JjNmMwOWM2ZTRiOA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "1999-12-06T19:49:06Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "1999-12-06T19:49:06Z"}, "message": "jcf-parse.c (saw_java_source): Global variable removed.\n\nWed Nov 24 17:33:26 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n        * jcf-parse.c (saw_java_source): Global variable removed.\n        (read_class): Don't use `saw_java_source'. Added extra braces.\n        (yyparse): Code setting `saw_java_source' removed.\n\nFrom-SVN: r30809", "tree": {"sha": "2c61abaa6d38a5727e66cccaf2ffce15efefb1f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c61abaa6d38a5727e66cccaf2ffce15efefb1f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ba305b54cffb88c726e046e72ccbc6c09c6e4b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ba305b54cffb88c726e046e72ccbc6c09c6e4b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ba305b54cffb88c726e046e72ccbc6c09c6e4b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ba305b54cffb88c726e046e72ccbc6c09c6e4b8/comments", "author": null, "committer": null, "parents": [{"sha": "732f2ac967fede4eb604a4575a862bab1bc309e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/732f2ac967fede4eb604a4575a862bab1bc309e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/732f2ac967fede4eb604a4575a862bab1bc309e6"}], "stats": {"total": 48, "additions": 21, "deletions": 27}, "files": [{"sha": "62a6f8828cead21eb0f1b3e16d286e5f2b763248", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ba305b54cffb88c726e046e72ccbc6c09c6e4b8/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ba305b54cffb88c726e046e72ccbc6c09c6e4b8/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=1ba305b54cffb88c726e046e72ccbc6c09c6e4b8", "patch": "@@ -13,6 +13,12 @@ Tue Nov 30 12:28:34 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n         check.\n         * expr.c (expand_java_arraystore): Likewise. \n \n+Wed Nov 24 17:33:26 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+        * jcf-parse.c (saw_java_source): Global variable removed.\n+        (read_class): Don't use `saw_java_source'. Added extra braces.\n+        (yyparse): Code setting `saw_java_source' removed.\n+\n 1999-11-24  Mark Mitchell  <mark@codesourcery.com>\n \n \t* except.c (emit_handlers): Zero catch_clauses after emitting them."}, {"sha": "2f7cc090aea7818587e1d36cfd9faecdd844bcff", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ba305b54cffb88c726e046e72ccbc6c09c6e4b8/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ba305b54cffb88c726e046e72ccbc6c09c6e4b8/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=1ba305b54cffb88c726e046e72ccbc6c09c6e4b8", "patch": "@@ -57,11 +57,6 @@ extern struct obstack *saveable_obstack;\n extern struct obstack temporary_obstack;\n extern struct obstack permanent_obstack;\n \n-/* This is true if the user specified a `.java' file on the command\n-   line.  Otherwise it is 0.  FIXME: this is temporary, until our\n-   .java parser is fully working.  */\n-int saw_java_source = 0;\n-\n /* The class we are currently processing. */\n tree current_class = NULL_TREE;\n \n@@ -482,24 +477,21 @@ read_class (name)\n \n   /* Search in current zip first.  */\n   if (find_in_current_zip (IDENTIFIER_POINTER (name), &jcf) == 0)\n-    /* FIXME: until the `.java' parser is fully working, we only\n-       look for a .java file when one was mentioned on the\n-       command line.  This lets us test the .java parser fairly\n-       easily, without compromising our ability to use the\n-       .class parser without fear.  */\n-    if (find_class (IDENTIFIER_POINTER (name), IDENTIFIER_LENGTH (name),\n-\t\t     &this_jcf, saw_java_source) == 0)\n-      {\n-\tpop_obstacks ();\t/* FIXME: one pop_obstack() per function */\n-\treturn 0;\n-      }\n-    else\n-      {\n-        this_jcf.seen_in_zip = 0;\n-        current_jcf = &this_jcf;\n-\tif (this_jcf.outofsynch)\n-\t  jcf_out_of_synch (current_jcf);\n-      }\n+    {\n+      if (find_class (IDENTIFIER_POINTER (name), IDENTIFIER_LENGTH (name),\n+\t\t      &this_jcf, 1) == 0)\n+\t{\n+\t  pop_obstacks ();\t/* FIXME: one pop_obstack() per function */\n+\t  return 0;\n+\t}\n+      else\n+\t{\n+\t  this_jcf.seen_in_zip = 0;\n+\t  current_jcf = &this_jcf;\n+\t  if (this_jcf.outofsynch)\n+\t    jcf_out_of_synch (current_jcf);\n+\t}\n+    }\n   else\n     current_jcf = jcf;\n \n@@ -800,10 +792,6 @@ yyparse ()\n \t  int twice = 0;\n \n \t  int len = strlen (list);\n-\t  /* FIXME: this test is only needed until our .java parser is\n-\t     fully capable.  */\n-\t  if (len > 5 && ! strcmp (&list[len - 5], \".java\"))\n-\t    saw_java_source = 1;\n \n \t  if (*list != '/' && several_files)\n \t    obstack_grow (&temporary_obstack, \"./\", 2);"}]}