{"sha": "f4d988f497450d0ca38d775ee316a63d6c571844", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRkOTg4ZjQ5NzQ1MGQwY2EzOGQ3NzVlZTMxNmE2M2Q2YzU3MTg0NA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-01-26T15:42:50Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-01-26T15:42:50Z"}, "message": "[ARM/AArch64][testsuite] Add vsubhn, vraddhn and vrsubhn tests. Split vaddhn.c into vXXXhn.inc and vaddhn.c to share code with other new tests.\n\n2015-01-26  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vXXXhn.inc: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vraddhn.c: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrsubhn.c: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vsubhn.c: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vaddhn.c: Use code from\n\tvXXXhn.inc.\n\nFrom-SVN: r220117", "tree": {"sha": "a7417d510a11f90ef7ec91d503505e8ca70f324e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7417d510a11f90ef7ec91d503505e8ca70f324e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4d988f497450d0ca38d775ee316a63d6c571844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4d988f497450d0ca38d775ee316a63d6c571844", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4d988f497450d0ca38d775ee316a63d6c571844", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4d988f497450d0ca38d775ee316a63d6c571844/comments", "author": null, "committer": null, "parents": [{"sha": "0699caae0f373930716ae91123adf255eac36ac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0699caae0f373930716ae91123adf255eac36ac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0699caae0f373930716ae91123adf255eac36ac4"}], "stats": {"total": 227, "additions": 140, "deletions": 87}, "files": [{"sha": "6e099f6f063fd7a9f94503fd08abf20b2972cdaf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4d988f497450d0ca38d775ee316a63d6c571844/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4d988f497450d0ca38d775ee316a63d6c571844/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f4d988f497450d0ca38d775ee316a63d6c571844", "patch": "@@ -1,3 +1,12 @@\n+2015-01-26  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vXXXhn.inc: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vraddhn.c: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrsubhn.c: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vsubhn.c: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vaddhn.c: Use code from\n+\tvXXXhn.inc.\n+\n 2015-01-26  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/64764"}, {"sha": "5aabedd55a0a77621d39351cf41e8230b1c4e0b4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vXXXhn.inc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4d988f497450d0ca38d775ee316a63d6c571844/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvXXXhn.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4d988f497450d0ca38d775ee316a63d6c571844/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvXXXhn.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvXXXhn.inc?ref=f4d988f497450d0ca38d775ee316a63d6c571844", "patch": "@@ -0,0 +1,55 @@\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  /* Basic test: vec64=vXXXhn(vec128_a, vec128_b), then store the result.  */\n+#define TEST_VXXXHN1(INSN, T1, T2, W, W2, N)\t\t\t\t\\\n+  VECT_VAR(vector64, T1, W2, N) = INSN##_##T2##W(VECT_VAR(vector1, T1, W, N), \\\n+\t\t\t\t\t\t VECT_VAR(vector2, T1, W, N)); \\\n+  vst1_##T2##W2(VECT_VAR(result, T1, W2, N), VECT_VAR(vector64, T1, W2, N))\n+\n+#define TEST_VXXXHN(INSN, T1, T2, W, W2, N)\t\\\n+  TEST_VXXXHN1(INSN, T1, T2, W, W2, N)\n+\n+  DECL_VARIABLE_64BITS_VARIANTS(vector64);\n+  DECL_VARIABLE_128BITS_VARIANTS(vector1);\n+  DECL_VARIABLE_128BITS_VARIANTS(vector2);\n+\n+  clean_results ();\n+\n+  /* Fill input vector1 and vector2 with arbitrary values */\n+  VDUP(vector1, q, int, s, 16, 8, 50*(UINT8_MAX+1));\n+  VDUP(vector1, q, int, s, 32, 4, 50*(UINT16_MAX+1));\n+  VDUP(vector1, q, int, s, 64, 2, 24*((uint64_t)UINT32_MAX+1));\n+  VDUP(vector1, q, uint, u, 16, 8, 3*(UINT8_MAX+1));\n+  VDUP(vector1, q, uint, u, 32, 4, 55*(UINT16_MAX+1));\n+  VDUP(vector1, q, uint, u, 64, 2, 3*((uint64_t)UINT32_MAX+1));\n+\n+  VDUP(vector2, q, int, s, 16, 8, (uint16_t)UINT8_MAX);\n+  VDUP(vector2, q, int, s, 32, 4, (uint32_t)UINT16_MAX);\n+  VDUP(vector2, q, int, s, 64, 2, (uint64_t)UINT32_MAX);\n+  VDUP(vector2, q, uint, u, 16, 8, (uint16_t)UINT8_MAX);\n+  VDUP(vector2, q, uint, u, 32, 4, (uint32_t)UINT16_MAX);\n+  VDUP(vector2, q, uint, u, 64, 2, (uint64_t)UINT32_MAX);\n+\n+  TEST_VXXXHN(INSN_NAME, int, s, 16, 8, 8);\n+  TEST_VXXXHN(INSN_NAME, int, s, 32, 16, 4);\n+  TEST_VXXXHN(INSN_NAME, int, s, 64, 32, 2);\n+  TEST_VXXXHN(INSN_NAME, uint, u, 16, 8, 8);\n+  TEST_VXXXHN(INSN_NAME, uint, u, 32, 16, 4);\n+  TEST_VXXXHN(INSN_NAME, uint, u, 64, 32, 2);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+  return 0;\n+}"}, {"sha": "96ae048dcb0999816c9748640566d385da101d1b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vaddhn.c", "status": "modified", "additions": 4, "deletions": 87, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4d988f497450d0ca38d775ee316a63d6c571844/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvaddhn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4d988f497450d0ca38d775ee316a63d6c571844/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvaddhn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvaddhn.c?ref=f4d988f497450d0ca38d775ee316a63d6c571844", "patch": "@@ -8,100 +8,17 @@\n #include <stdint.h>\n #endif\n \n+#define INSN_NAME vaddhn\n+#define TEST_MSG \"VADDHN\"\n+\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,8,8) [] = { 0x32, 0x32, 0x32, 0x32,\n \t\t\t\t       0x32, 0x32, 0x32, 0x32 };\n VECT_VAR_DECL(expected,int,16,4) [] = { 0x32, 0x32, 0x32, 0x32 };\n VECT_VAR_DECL(expected,int,32,2) [] = { 0x18, 0x18 };\n-VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n VECT_VAR_DECL(expected,uint,8,8) [] = { 0x3, 0x3, 0x3, 0x3,\n \t\t\t\t\t0x3, 0x3, 0x3, 0x3 };\n VECT_VAR_DECL(expected,uint,16,4) [] = { 0x37, 0x37, 0x37, 0x37 };\n VECT_VAR_DECL(expected,uint,32,2) [] = { 0x3, 0x3 };\n-VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n-VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n-\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n-VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n-VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n-VECT_VAR_DECL(expected,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n-\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n-\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n-\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n-VECT_VAR_DECL(expected,int,16,8) [] = {  0x3333, 0x3333, 0x3333, 0x3333,\n-\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n-VECT_VAR_DECL(expected,int,32,4) [] = { 0x33333333, 0x33333333,\n-\t\t\t\t\t0x33333333, 0x33333333 };\n-VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333,\n-\t\t\t\t\t0x3333333333333333 };\n-VECT_VAR_DECL(expected,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n-\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n-\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n-\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n-VECT_VAR_DECL(expected,uint,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n-\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n-VECT_VAR_DECL(expected,uint,32,4) [] = { 0x33333333, 0x33333333,\n-\t\t\t\t\t 0x33333333, 0x33333333 };\n-VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n-\t\t\t\t\t 0x3333333333333333 };\n-VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n-\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n-\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n-\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n-VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n-\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n-VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n-\t\t\t\t\t   0x33333333, 0x33333333 };\n-\n-#define INSN_NAME vaddhn\n-#define TEST_MSG \"VADDHN\"\n-\n-#define FNNAME1(NAME) exec_ ## NAME\n-#define FNNAME(NAME) FNNAME1(NAME)\n-\n-void FNNAME (INSN_NAME) (void)\n-{\n-  /* Basic test: vec64=vaddhn(vec128_a, vec128_b), then store the result.  */\n-#define TEST_VADDHN1(INSN, T1, T2, W, W2, N)\t\t\t\t\\\n-  VECT_VAR(vector64, T1, W2, N) = INSN##_##T2##W(VECT_VAR(vector1, T1, W, N), \\\n-\t\t\t\t\t\t VECT_VAR(vector2, T1, W, N)); \\\n-  vst1_##T2##W2(VECT_VAR(result, T1, W2, N), VECT_VAR(vector64, T1, W2, N))\n-\n-#define TEST_VADDHN(INSN, T1, T2, W, W2, N)\t\\\n-  TEST_VADDHN1(INSN, T1, T2, W, W2, N)\n-\n-  DECL_VARIABLE_64BITS_VARIANTS(vector64);\n-  DECL_VARIABLE_128BITS_VARIANTS(vector1);\n-  DECL_VARIABLE_128BITS_VARIANTS(vector2);\n-\n-  clean_results ();\n-\n-  /* Fill input vector1 and vector2 with arbitrary values */\n-  VDUP(vector1, q, int, s, 16, 8, 50*(UINT8_MAX+1));\n-  VDUP(vector1, q, int, s, 32, 4, 50*(UINT16_MAX+1));\n-  VDUP(vector1, q, int, s, 64, 2, 24*((uint64_t)UINT32_MAX+1));\n-  VDUP(vector1, q, uint, u, 16, 8, 3*(UINT8_MAX+1));\n-  VDUP(vector1, q, uint, u, 32, 4, 55*(UINT16_MAX+1));\n-  VDUP(vector1, q, uint, u, 64, 2, 3*((uint64_t)UINT32_MAX+1));\n-\n-  VDUP(vector2, q, int, s, 16, 8, (uint16_t)UINT8_MAX);\n-  VDUP(vector2, q, int, s, 32, 4, (uint32_t)UINT16_MAX);\n-  VDUP(vector2, q, int, s, 64, 2, (uint64_t)UINT32_MAX);\n-  VDUP(vector2, q, uint, u, 16, 8, (uint16_t)UINT8_MAX);\n-  VDUP(vector2, q, uint, u, 32, 4, (uint32_t)UINT16_MAX);\n-  VDUP(vector2, q, uint, u, 64, 2, (uint64_t)UINT32_MAX);\n-\n-  TEST_VADDHN(INSN_NAME, int, s, 16, 8, 8);\n-  TEST_VADDHN(INSN_NAME, int, s, 32, 16, 4);\n-  TEST_VADDHN(INSN_NAME, int, s, 64, 32, 2);\n-  TEST_VADDHN(INSN_NAME, uint, u, 16, 8, 8);\n-  TEST_VADDHN(INSN_NAME, uint, u, 32, 16, 4);\n-  TEST_VADDHN(INSN_NAME, uint, u, 64, 32, 2);\n-\n-  CHECK_RESULTS (TEST_MSG, \"\");\n-}\n \n-int main (void)\n-{\n-  FNNAME (INSN_NAME) ();\n-  return 0;\n-}\n+#include \"vXXXhn.inc\""}, {"sha": "12bb3baa2a3af3832c19e49f8ded81814a233d52", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vraddhn.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4d988f497450d0ca38d775ee316a63d6c571844/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvraddhn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4d988f497450d0ca38d775ee316a63d6c571844/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvraddhn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvraddhn.c?ref=f4d988f497450d0ca38d775ee316a63d6c571844", "patch": "@@ -0,0 +1,24 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#if defined(__cplusplus)\n+#include <cstdint>\n+#else\n+#include <stdint.h>\n+#endif\n+\n+#define INSN_NAME vraddhn\n+#define TEST_MSG \"VRADDHN\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x19, 0x19 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x4, 0x4, 0x4, 0x4,\n+\t\t\t\t\t0x4, 0x4, 0x4, 0x4 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x38, 0x38, 0x38, 0x38 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x4, 0x4 };\n+\n+#include \"vXXXhn.inc\""}, {"sha": "1ac1b17242ba88866b5479fec03bbf49c1bbcf1c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrsubhn.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4d988f497450d0ca38d775ee316a63d6c571844/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsubhn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4d988f497450d0ca38d775ee316a63d6c571844/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsubhn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsubhn.c?ref=f4d988f497450d0ca38d775ee316a63d6c571844", "patch": "@@ -0,0 +1,24 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#if defined(__cplusplus)\n+#include <cstdint>\n+#else\n+#include <stdint.h>\n+#endif\n+\n+#define INSN_NAME vrsubhn\n+#define TEST_MSG \"VRSUBHN\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x31, 0x31, 0x31, 0x31,\n+\t\t\t\t       0x31, 0x31, 0x31, 0x31 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x31, 0x31, 0x31, 0x31 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x17, 0x17 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x2, 0x2, 0x2, 0x2,\n+\t\t\t\t\t0x2, 0x2, 0x2, 0x2 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x36, 0x36, 0x36, 0x36 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x2, 0x2 };\n+\n+#include \"vXXXhn.inc\""}, {"sha": "acecf41543e18dc0ab13438be8c997fdb023f6aa", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vsubhn.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4d988f497450d0ca38d775ee316a63d6c571844/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsubhn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4d988f497450d0ca38d775ee316a63d6c571844/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsubhn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsubhn.c?ref=f4d988f497450d0ca38d775ee316a63d6c571844", "patch": "@@ -0,0 +1,24 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#if defined(__cplusplus)\n+#include <cstdint>\n+#else\n+#include <stdint.h>\n+#endif\n+\n+#define INSN_NAME vsubhn\n+#define TEST_MSG \"VSUBHN\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x31, 0x31, 0x31, 0x31,\n+\t\t\t\t       0x31, 0x31, 0x31, 0x31 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x31, 0x31, 0x31, 0x31 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x17, 0x17 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x2, 0x2, 0x2, 0x2,\n+\t\t\t\t\t0x2, 0x2, 0x2, 0x2 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x36, 0x36, 0x36, 0x36 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x2, 0x2 };\n+\n+#include \"vXXXhn.inc\""}]}