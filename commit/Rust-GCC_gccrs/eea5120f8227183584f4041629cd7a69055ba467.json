{"sha": "eea5120f8227183584f4041629cd7a69055ba467", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVhNTEyMGY4MjI3MTgzNTg0ZjQwNDE2MjljZDdhNjkwNTViYTQ2Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-03-24T22:22:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-03-24T22:22:40Z"}, "message": "1.cc: Remove find_first_of, find_last_of and find_last_not_of tests.\n\n2003-03-24  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* testsuite/21_strings/basic_string/find/char/1.cc: Remove\n\tfind_first_of, find_last_of and find_last_not_of tests.\n\t* testsuite/21_strings/basic_string/find/char/2.cc: find_first_of\n\ttests here, new file.\n\t* testsuite/21_strings/basic_string/find/wchar_t/1.cc: Likewise, remove\n\twchar_t find_first_of, find_last_of and find_last_not_of tests.\n\t* testsuite/21_strings/basic_string/find/wchar_t/2.cc: Likewise,\n\twchar_t find_first_of tests here, new file.\n\t* testsuite/21_strings/basic_string/rfind/char/2.cc: find_last_of tests\n\there.\n\t* testsuite/21_strings/basic_string/rfind/char/3.cc: find_last_not_of\n\ttests here.\n\t* testsuite/21_strings/basic_string/rfind/wchar_t/2.cc: likewise,\n\twchar_t find_last_of tests here.\n\t* testsuite/21_strings/basic_string/rfind/wchar_t/3.cc: likewise,\n\twchar_t find_last_not_of tests here.\n\nFrom-SVN: r64824", "tree": {"sha": "9e20a0157d41f38465fb1bf383361f3461e8ea94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e20a0157d41f38465fb1bf383361f3461e8ea94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eea5120f8227183584f4041629cd7a69055ba467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea5120f8227183584f4041629cd7a69055ba467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eea5120f8227183584f4041629cd7a69055ba467", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea5120f8227183584f4041629cd7a69055ba467/comments", "author": null, "committer": null, "parents": [{"sha": "9fdbe7df3975f07d03f00258a8c2e7074499a4ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdbe7df3975f07d03f00258a8c2e7074499a4ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fdbe7df3975f07d03f00258a8c2e7074499a4ed"}], "stats": {"total": 519, "additions": 309, "deletions": 210}, "files": [{"sha": "ca9b147f3807e60d3b4212f4603c6f48bcfc35d1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eea5120f8227183584f4041629cd7a69055ba467", "patch": "@@ -1,3 +1,22 @@\n+2003-03-24  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* testsuite/21_strings/basic_string/find/char/1.cc: Remove\n+\tfind_first_of, find_last_of and find_last_not_of tests.\n+\t* testsuite/21_strings/basic_string/find/char/2.cc: find_first_of\n+\ttests here, new file.\n+\t* testsuite/21_strings/basic_string/find/wchar_t/1.cc: Likewise,\n+\tremove wchar_t find_first_of, find_last_of and find_last_not_of tests.\n+\t* testsuite/21_strings/basic_string/find/wchar_t/2.cc: Likewise,\n+\twchar_t find_first_of tests here, new file.\n+\t* testsuite/21_strings/basic_string/rfind/char/2.cc: find_last_of\n+\ttests here.\n+\t* testsuite/21_strings/basic_string/rfind/char/3.cc: find_last_not_of\n+\ttests here.\n+\t* testsuite/21_strings/basic_string/rfind/wchar_t/2.cc: likewise,\n+\twchar_t find_last_of tests here.\n+\t* testsuite/21_strings/basic_string/rfind/wchar_t/3.cc: likewise,\n+\twchar_t find_last_not_of tests here.\t\n+\n 2003-03-22  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* config/os/hpux/ctype_noninline.h (ctype<char>::classic_table):"}, {"sha": "561053cf6662096d9462569acd3ad0e347776a09", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/find/char/1.cc", "status": "modified", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F1.cc?ref=eea5120f8227183584f4041629cd7a69055ba467", "patch": "@@ -21,7 +21,6 @@\n // 21.3.6.1 basic_string find\n \n #include <string>\n-#include <stdexcept>\n #include <testsuite_hooks.h>\n \n bool test01(void)\n@@ -86,105 +85,6 @@ bool test01(void)\n   csz01 = str01.find('/');\n   VERIFY( csz01 == npos );\n    \n-  // size_type find_first_of(const string&, size_type pos = 0) const;\n-  std::string str05(\"xena rulez\");\n-  csz01 = str01.find_first_of(str01);\n-  VERIFY( csz01 == 0 );\n-  csz01 = str01.find_first_of(str01, 4);\n-  VERIFY( csz01 == 4 );\n-  csz01 = str01.find_first_of(str02, 0);\n-  VERIFY( csz01 == 0 );\n-  csz01 = str01.find_first_of(str02, 3);\n-  VERIFY( csz01 == 3 );\n-  csz01 = str01.find_first_of(str03, 0);\n-  VERIFY( csz01 == 8 );\n-  csz01 = str01.find_first_of(str03, 3);\n-  VERIFY( csz01 == 8 );\n-  csz01 = str01.find_first_of(str03, 12);\n-  VERIFY( csz01 == 16 );\n-  csz01 = str01.find_first_of(str05, 0);\n-  VERIFY( csz01 == 1 );\n-  csz01 = str01.find_first_of(str05, 4);\n-  VERIFY( csz01 == 4 );\n-\n-  // An empty string consists of no characters\n-  // therefore it should be found at every point in a string,\n-  // except beyond the end\n-  // However, str1.find_first_of(str2,pos) finds the first character in \n-  // str1 (starting at pos) that exists in str2, which is none for empty str2\n-  csz01 = str01.find_first_of(str04, 0);\n-  VERIFY( csz01 == npos );\n-  csz01 = str01.find_first_of(str04, 5);\n-  VERIFY( csz01 == npos );\n-  \n-  // size_type find_first_of(const char* s, size_type pos, size_type n) const;\n-  csz01 = str01.find_first_of(str_lit01, 0, 3);\n-  VERIFY( csz01 == 0 );\n-  csz01 = str01.find_first_of(str_lit01, 3, 0);\n-  VERIFY( csz01 == npos );\n-\n-  // size_type find_first_of(const char* s, size_type pos = 0) const;\n-  csz01 = str01.find_first_of(str_lit01);\n-  VERIFY( csz01 == 0 );\n-  csz01 = str01.find_first_of(str_lit01, 3);\n-  VERIFY( csz01 == 3 );\n-\n-  // size_type find_first_of(char c, size_type pos = 0) const;\n-  csz01 = str01.find_first_of('z');\n-  csz02 = str01.size() - 1;\n-  VERIFY( csz01 == csz02 );\n-\n-  // size_type find_last_of(const string& str, size_type pos = 0) const;\n-  // size_type find_last_of(const char* s, size_type pos, size_type n) const;\n-  // size_type find_last_of(const char* s, size_type pos = 0) const;\n-  // size_type find_last_of(char c, size_type pos = 0) const;\n-\n-#if 1\n-// from tstring.cc, from jason merrill, et. al.\n-  std::string x;\n-  std::string::size_type pos;\n-  pos = x.find_last_not_of('X');\n-  VERIFY( pos == npos );\n-  pos = x.find_last_not_of(\"XYZ\");\n-  VERIFY( pos == npos );\n-\n-  std::string y(\"a\");\n-  pos = y.find_last_not_of('X');\n-  VERIFY( pos == 0 );\n-  pos = y.find_last_not_of('a');\n-  VERIFY( pos == npos );\n-  pos = y.find_last_not_of(\"XYZ\");\n-  VERIFY( pos == 0 );\n-  pos = y.find_last_not_of(\"a\");\n-  VERIFY( pos == npos );\n-\n-  std::string z(\"ab\");\n-  pos = z.find_last_not_of('X');\n-  VERIFY( pos == 1 );\n-  pos = z.find_last_not_of(\"XYZ\");\n-  VERIFY( pos == 1 );\n-  pos = z.find_last_not_of('b');\n-  VERIFY( pos == 0 );\n-  pos = z.find_last_not_of(\"Xb\");\n-  VERIFY( pos == 0 );\n-  pos = z.find_last_not_of(\"Xa\");\n-  VERIFY( pos == 1 );\n-  pos = z.find_last_of(\"ab\");\n-  VERIFY( pos == 1 );\n-  pos = z.find_last_of(\"Xa\");\n-  VERIFY( pos == 0 );\n-  pos = z.find_last_of(\"Xb\");\n-  VERIFY( pos == 1 );\n-  pos = z.find_last_of(\"XYZ\");\n-  VERIFY( pos == std::string::npos );\n-  pos = z.find_last_of('a');\n-  VERIFY( pos == 0 );\n-  pos = z.find_last_of('b');\n-  VERIFY( pos == 1 );\n-  pos = z.find_last_of('X');\n-  VERIFY( pos == std::string::npos );\n-#endif\n-\n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif"}, {"sha": "abc35e27f1e8c8f153edbe0e45cc7767f0eb7d44", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/find/char/2.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F2.cc?ref=eea5120f8227183584f4041629cd7a69055ba467", "patch": "@@ -0,0 +1,97 @@\n+// 1999-06-09 bkoz\n+\n+// Copyright (C) 1994, 1999, 2000, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.6.3 basic_string find_first_of\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+bool test02(void)\n+{\n+  bool test = true;\n+  typedef std::string::size_type csize_type;\n+  csize_type npos = std::string::npos;\n+  csize_type csz01, csz02;\n+\n+  const char str_lit01[] = \"mave\";\n+  const std::string str01(\"mavericks, santa cruz\");\n+  std::string str02(str_lit01);\n+  std::string str03(\"s, s\");\n+  std::string str04;\n+\n+  // size_type find_first_of(const string&, size_type pos = 0) const;\n+  std::string str05(\"xena rulez\");\n+  csz01 = str01.find_first_of(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str01, 4);\n+  VERIFY( csz01 == 4 );\n+  csz01 = str01.find_first_of(str02, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str02, 3);\n+  VERIFY( csz01 == 3 );\n+  csz01 = str01.find_first_of(str03, 0);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_of(str03, 3);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_of(str03, 12);\n+  VERIFY( csz01 == 16 );\n+  csz01 = str01.find_first_of(str05, 0);\n+  VERIFY( csz01 == 1 );\n+  csz01 = str01.find_first_of(str05, 4);\n+  VERIFY( csz01 == 4 );\n+\n+  // An empty string consists of no characters\n+  // therefore it should be found at every point in a string,\n+  // except beyond the end\n+  // However, str1.find_first_of(str2,pos) finds the first character in \n+  // str1 (starting at pos) that exists in str2, which is none for empty str2\n+  csz01 = str01.find_first_of(str04, 0);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find_first_of(str04, 5);\n+  VERIFY( csz01 == npos );\n+  \n+  // size_type find_first_of(const char* s, size_type pos, size_type n) const;\n+  csz01 = str01.find_first_of(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str_lit01, 3, 0);\n+  VERIFY( csz01 == npos );\n+\n+  // size_type find_first_of(const char* s, size_type pos = 0) const;\n+  csz01 = str01.find_first_of(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str_lit01, 3);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type find_first_of(char c, size_type pos = 0) const;\n+  csz01 = str01.find_first_of('z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "ecf3182d66fea53caac38ee3f67d5c73494d209b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/find/wchar_t/1.cc", "status": "modified", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F1.cc?ref=eea5120f8227183584f4041629cd7a69055ba467", "patch": "@@ -21,7 +21,6 @@\n // 21.3.6.1 basic_string find\n \n #include <string>\n-#include <stdexcept>\n #include <testsuite_hooks.h>\n \n bool test01(void)\n@@ -85,105 +84,6 @@ bool test01(void)\n   VERIFY( csz01 == csz02 );\n   csz01 = str01.find(L'/');\n   VERIFY( csz01 == npos );\n-   \n-  // size_type find_first_of(const wstring&, size_type pos = 0) const;\n-  std::wstring str05(L\"xena rulez\");\n-  csz01 = str01.find_first_of(str01);\n-  VERIFY( csz01 == 0 );\n-  csz01 = str01.find_first_of(str01, 4);\n-  VERIFY( csz01 == 4 );\n-  csz01 = str01.find_first_of(str02, 0);\n-  VERIFY( csz01 == 0 );\n-  csz01 = str01.find_first_of(str02, 3);\n-  VERIFY( csz01 == 3 );\n-  csz01 = str01.find_first_of(str03, 0);\n-  VERIFY( csz01 == 8 );\n-  csz01 = str01.find_first_of(str03, 3);\n-  VERIFY( csz01 == 8 );\n-  csz01 = str01.find_first_of(str03, 12);\n-  VERIFY( csz01 == 16 );\n-  csz01 = str01.find_first_of(str05, 0);\n-  VERIFY( csz01 == 1 );\n-  csz01 = str01.find_first_of(str05, 4);\n-  VERIFY( csz01 == 4 );\n-\n-  // An empty string consists of no characters\n-  // therefore it should be found at every point in a string,\n-  // except beyond the end\n-  // However, str1.find_first_of(str2,pos) finds the first character in \n-  // str1 (starting at pos) that exists in str2, which is none for empty str2\n-  csz01 = str01.find_first_of(str04, 0);\n-  VERIFY( csz01 == npos );\n-  csz01 = str01.find_first_of(str04, 5);\n-  VERIFY( csz01 == npos );\n-  \n-  // size_type find_first_of(const wchar_t* s, size_type pos, size_type n) const;\n-  csz01 = str01.find_first_of(str_lit01, 0, 3);\n-  VERIFY( csz01 == 0 );\n-  csz01 = str01.find_first_of(str_lit01, 3, 0);\n-  VERIFY( csz01 == npos );\n-\n-  // size_type find_first_of(const char* s, size_type pos = 0) const;\n-  csz01 = str01.find_first_of(str_lit01);\n-  VERIFY( csz01 == 0 );\n-  csz01 = str01.find_first_of(str_lit01, 3);\n-  VERIFY( csz01 == 3 );\n-\n-  // size_type find_first_of(wchar_t c, size_type pos = 0) const;\n-  csz01 = str01.find_first_of(L'z');\n-  csz02 = str01.size() - 1;\n-  VERIFY( csz01 == csz02 );\n-\n-  // size_type find_last_of(const wstring& str, size_type pos = 0) const;\n-  // size_type find_last_of(const wchar_t* s, size_type pos, size_type n) const;\n-  // size_type find_last_of(const wchar_t* s, size_type pos = 0) const;\n-  // size_type find_last_of(wchar_t c, size_type pos = 0) const;\n-\n-#if 1\n-// from tstring.cc, from jason merrill, et. al.\n-  std::wstring x;\n-  std::wstring::size_type pos;\n-  pos = x.find_last_not_of(L'X');\n-  VERIFY( pos == npos );\n-  pos = x.find_last_not_of(L\"XYZ\");\n-  VERIFY( pos == npos );\n-\n-  std::wstring y(L\"a\");\n-  pos = y.find_last_not_of(L'X');\n-  VERIFY( pos == 0 );\n-  pos = y.find_last_not_of(L'a');\n-  VERIFY( pos == npos );\n-  pos = y.find_last_not_of(L\"XYZ\");\n-  VERIFY( pos == 0 );\n-  pos = y.find_last_not_of(L\"a\");\n-  VERIFY( pos == npos );\n-\n-  std::wstring z(L\"ab\");\n-  pos = z.find_last_not_of(L'X');\n-  VERIFY( pos == 1 );\n-  pos = z.find_last_not_of(L\"XYZ\");\n-  VERIFY( pos == 1 );\n-  pos = z.find_last_not_of(L'b');\n-  VERIFY( pos == 0 );\n-  pos = z.find_last_not_of(L\"Xb\");\n-  VERIFY( pos == 0 );\n-  pos = z.find_last_not_of(L\"Xa\");\n-  VERIFY( pos == 1 );\n-  pos = z.find_last_of(L\"ab\");\n-  VERIFY( pos == 1 );\n-  pos = z.find_last_of(L\"Xa\");\n-  VERIFY( pos == 0 );\n-  pos = z.find_last_of(L\"Xb\");\n-  VERIFY( pos == 1 );\n-  pos = z.find_last_of(L\"XYZ\");\n-  VERIFY( pos == std::wstring::npos );\n-  pos = z.find_last_of(L'a');\n-  VERIFY( pos == 0 );\n-  pos = z.find_last_of(L'b');\n-  VERIFY( pos == 1 );\n-  pos = z.find_last_of(L'X');\n-  VERIFY( pos == std::wstring::npos );\n-#endif\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "8ae592d4eb3addaaaea35db394e9de5ad255675c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/find/wchar_t/2.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F2.cc?ref=eea5120f8227183584f4041629cd7a69055ba467", "patch": "@@ -0,0 +1,97 @@\n+// 1999-06-09 bkoz\n+\n+// Copyright (C) 1994, 1999, 2000, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.6.3 basic_string find_first_of\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+bool test02(void)\n+{\n+  bool test = true;\n+  typedef std::wstring::size_type csize_type;\n+  csize_type npos = std::wstring::npos;\n+  csize_type csz01, csz02;\n+\n+  const wchar_t str_lit01[] = L\"mave\";\n+  const std::wstring str01(L\"mavericks, santa cruz\");\n+  std::wstring str02(str_lit01);\n+  std::wstring str03(L\"s, s\");\n+  std::wstring str04;\n+\n+  // size_type find_first_of(const wstring&, size_type pos = 0) const;\n+  std::wstring str05(L\"xena rulez\");\n+  csz01 = str01.find_first_of(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str01, 4);\n+  VERIFY( csz01 == 4 );\n+  csz01 = str01.find_first_of(str02, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str02, 3);\n+  VERIFY( csz01 == 3 );\n+  csz01 = str01.find_first_of(str03, 0);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_of(str03, 3);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_of(str03, 12);\n+  VERIFY( csz01 == 16 );\n+  csz01 = str01.find_first_of(str05, 0);\n+  VERIFY( csz01 == 1 );\n+  csz01 = str01.find_first_of(str05, 4);\n+  VERIFY( csz01 == 4 );\n+\n+  // An empty string consists of no characters\n+  // therefore it should be found at every point in a string,\n+  // except beyond the end\n+  // However, str1.find_first_of(str2,pos) finds the first character in \n+  // str1 (starting at pos) that exists in str2, which is none for empty str2\n+  csz01 = str01.find_first_of(str04, 0);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find_first_of(str04, 5);\n+  VERIFY( csz01 == npos );\n+  \n+  // size_type find_first_of(const wchar_t* s, size_type pos, size_type n) const;\n+  csz01 = str01.find_first_of(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str_lit01, 3, 0);\n+  VERIFY( csz01 == npos );\n+\n+  // size_type find_first_of(const wchar_t* s, size_type pos = 0) const;\n+  csz01 = str01.find_first_of(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str_lit01, 3);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type find_first_of(wchar_t c, size_type pos = 0) const;\n+  csz01 = str01.find_first_of(L'z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "30e40a986583581b1cbe29a02b6969f4f3e7eba1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/rfind/char/2.cc", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F2.cc?ref=eea5120f8227183584f4041629cd7a69055ba467", "patch": "@@ -1,4 +1,4 @@\n-// 2000-06-22 -=dbv=-  (shamelessy copied from bkoz' find.cc)\n+// from tstring.cc, from jason merrill, et. al.\n \n // Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n //\n@@ -25,8 +25,22 @@\n bool test02()\n {\n   bool test = true;\n-\n-  // test find_last_of\n+  std::string z(\"ab\");\n+  std::string::size_type pos;\n+  pos = z.find_last_of(\"ab\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(\"Xa\");\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_of(\"Xb\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(\"XYZ\");\n+  VERIFY( pos == std::string::npos );\n+  pos = z.find_last_of('a');\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_of('b');\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of('X');\n+  VERIFY( pos == std::string::npos );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "aeb132b6a5893aa22717e3d66fe43c15110e783f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/rfind/char/3.cc", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F3.cc?ref=eea5120f8227183584f4041629cd7a69055ba467", "patch": "@@ -1,4 +1,4 @@\n-// 2000-06-22 -=dbv=-  (shamelessy copied from bkoz' find.cc)\n+// from tstring.cc, from jason merrill, et. al.\n \n // Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n //\n@@ -25,8 +25,37 @@\n bool test03()\n {\n   bool test = true;\n+  typedef std::string::size_type csize_type;\n+  std::string::size_type pos;\n+  csize_type npos = std::string::npos;\n \n-  // test find_last_not_of\n+  std::string x;\n+  pos = x.find_last_not_of('X');\n+  VERIFY( pos == npos );\n+  pos = x.find_last_not_of(\"XYZ\");\n+  VERIFY( pos == npos );\n+\n+  std::string y(\"a\");\n+  pos = y.find_last_not_of('X');\n+  VERIFY( pos == 0 );\n+  pos = y.find_last_not_of('a');\n+  VERIFY( pos == npos );\n+  pos = y.find_last_not_of(\"XYZ\");\n+  VERIFY( pos == 0 );\n+  pos = y.find_last_not_of(\"a\");\n+  VERIFY( pos == npos );\n+\n+  std::string z(\"ab\");\n+  pos = z.find_last_not_of('X');\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_not_of(\"XYZ\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_not_of('b');\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_not_of(\"Xb\");\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_not_of(\"Xa\");\n+  VERIFY( pos == 1 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "587b19b4a79320851465d7c100028e6a284eec3a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/rfind/wchar_t/2.cc", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F2.cc?ref=eea5120f8227183584f4041629cd7a69055ba467", "patch": "@@ -1,4 +1,4 @@\n-// 2000-06-22 -=dbv=-  (shamelessy copied from bkoz' find.cc)\n+// from tstring.cc, from jason merrill, et. al.\n \n // Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n //\n@@ -25,8 +25,22 @@\n bool test02()\n {\n   bool test = true;\n-\n-  // test find_last_of\n+  std::wstring::size_type pos;\n+  std::wstring z(L\"ab\");\n+  pos = z.find_last_of(L\"ab\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(L\"Xa\");\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_of(L\"Xb\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(L\"XYZ\");\n+  VERIFY( pos == std::wstring::npos );\n+  pos = z.find_last_of(L'a');\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_of(L'b');\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(L'X');\n+  VERIFY( pos == std::wstring::npos );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "1bfd1eb757bae1b1874cad432ecf174f6eb092be", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/rfind/wchar_t/3.cc", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea5120f8227183584f4041629cd7a69055ba467/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F3.cc?ref=eea5120f8227183584f4041629cd7a69055ba467", "patch": "@@ -1,4 +1,4 @@\n-// 2000-06-22 -=dbv=-  (shamelessy copied from bkoz' find.cc)\n+// from tstring.cc, from jason merrill, et. al.\n \n // Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n //\n@@ -25,8 +25,37 @@\n bool test03()\n {\n   bool test = true;\n+  typedef std::wstring::size_type csize_type;\n+  std::wstring::size_type pos;\n+  csize_type npos = std::wstring::npos;\n \n-  // test find_last_not_of\n+  std::wstring x;\n+  pos = x.find_last_not_of(L'X');\n+  VERIFY( pos == npos );\n+  pos = x.find_last_not_of(L\"XYZ\");\n+  VERIFY( pos == npos );\n+\n+  std::wstring y(L\"a\");\n+  pos = y.find_last_not_of(L'X');\n+  VERIFY( pos == 0 );\n+  pos = y.find_last_not_of(L'a');\n+  VERIFY( pos == npos );\n+  pos = y.find_last_not_of(L\"XYZ\");\n+  VERIFY( pos == 0 );\n+  pos = y.find_last_not_of(L\"a\");\n+  VERIFY( pos == npos );\n+\n+  std::wstring z(L\"ab\");\n+  pos = z.find_last_not_of(L'X');\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_not_of(L\"XYZ\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_not_of(L'b');\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_not_of(L\"Xb\");\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_not_of(L\"Xa\");\n+  VERIFY( pos == 1 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}]}