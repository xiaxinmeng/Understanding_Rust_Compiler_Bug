{"sha": "b7dd2e4eeb44bc8678ecde8a6c7401de85e63561", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdkZDJlNGVlYjQ0YmM4Njc4ZWNkZThhNmM3NDAxZGU4NWU2MzU2MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-04T09:20:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-04T09:20:02Z"}, "message": "x86: Fix ix86_expand_vector_init for V*TImode [PR100887]\n\nWe have vec_initv4tiv2ti and vec_initv2titi patterns which call\nix86_expand_vector_init and assume it works for those modes.  For the\ncase of construction from two half-sized vectors, the code assumes it\nwill always succeed, but we have only insn patterns with SImode and DImode\nelement types.  QImode and HImode element types are already handled\nby performing it with same sized vectors with SImode elements and the\nfollowing patch extends that to V*TImode vectors.\n\n2021-06-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/100887\n\t* config/i386/i386-expand.c (ix86_expand_vector_init): Handle\n\tconcatenation from half-sized modes with TImode elements.\n\n\t* gcc.target/i386/pr100887.c: New test.", "tree": {"sha": "cf544ef47edabc72f2243d560131be9e1f0fdcdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf544ef47edabc72f2243d560131be9e1f0fdcdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7dd2e4eeb44bc8678ecde8a6c7401de85e63561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7dd2e4eeb44bc8678ecde8a6c7401de85e63561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7dd2e4eeb44bc8678ecde8a6c7401de85e63561", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7dd2e4eeb44bc8678ecde8a6c7401de85e63561/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3011f1046628d5ce5e6e5f8e917a6aea1385fdc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3011f1046628d5ce5e6e5f8e917a6aea1385fdc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3011f1046628d5ce5e6e5f8e917a6aea1385fdc3"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "68bb5ab4eaffe5f44acc9aa6d02cc9e08a44dfd6", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dd2e4eeb44bc8678ecde8a6c7401de85e63561/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dd2e4eeb44bc8678ecde8a6c7401de85e63561/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=b7dd2e4eeb44bc8678ecde8a6c7401de85e63561", "patch": "@@ -14610,11 +14610,15 @@ ix86_expand_vector_init (bool mmx_ok, rtx target, rtx vals)\n       if (GET_MODE_NUNITS (GET_MODE (x)) * 2 == n_elts)\n \t{\n \t  rtx ops[2] = { XVECEXP (vals, 0, 0), XVECEXP (vals, 0, 1) };\n-\t  if (inner_mode == QImode || inner_mode == HImode)\n+\t  if (inner_mode == QImode\n+\t      || inner_mode == HImode\n+\t      || inner_mode == TImode)\n \t    {\n \t      unsigned int n_bits = n_elts * GET_MODE_SIZE (inner_mode);\n-\t      mode = mode_for_vector (SImode, n_bits / 4).require ();\n-\t      inner_mode = mode_for_vector (SImode, n_bits / 8).require ();\n+\t      scalar_mode elt_mode = inner_mode == TImode ? DImode : SImode;\n+\t      n_bits /= GET_MODE_SIZE (elt_mode);\n+\t      mode = mode_for_vector (elt_mode, n_bits).require ();\n+\t      inner_mode = mode_for_vector (elt_mode, n_bits / 2).require ();\n \t      ops[0] = gen_lowpart (inner_mode, ops[0]);\n \t      ops[1] = gen_lowpart (inner_mode, ops[1]);\n \t      subtarget = gen_reg_rtx (mode);"}, {"sha": "1bc6d3865aa3694a1abe1fbc263abf2186a54720", "filename": "gcc/testsuite/gcc.target/i386/pr100887.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dd2e4eeb44bc8678ecde8a6c7401de85e63561/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100887.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dd2e4eeb44bc8678ecde8a6c7401de85e63561/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100887.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100887.c?ref=b7dd2e4eeb44bc8678ecde8a6c7401de85e63561", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/100887 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-mavx512f\" } */\n+\n+typedef unsigned __int128 U __attribute__((__vector_size__ (64)));\n+typedef unsigned __int128 V __attribute__((__vector_size__ (32)));\n+typedef unsigned __int128 W __attribute__((__vector_size__ (16)));\n+\n+W\n+foo (U u, V v)\n+{\n+  return __builtin_shufflevector (u, v, 0);\n+}"}]}