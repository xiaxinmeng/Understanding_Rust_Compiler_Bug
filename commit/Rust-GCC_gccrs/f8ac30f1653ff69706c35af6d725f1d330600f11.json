{"sha": "f8ac30f1653ff69706c35af6d725f1d330600f11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhhYzMwZjE2NTNmZjY5NzA2YzM1YWY2ZDcyNWYxZDMzMDYwMGYxMQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-08-06T04:42:21Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-08-07T01:01:52Z"}, "message": "PR96493, powerpc local call linkage failure\n\nThis corrects current_file_function_operand, an operand predicate used\nto determine whether a symbol_ref is safe to use with the local_call\npatterns.  Calls between pcrel and non-pcrel code need to go via\nlinker stubs.  In the case of non-pcrel code to pcrel the stub saves\nr2 but there needs to be a nop after the branch for the r2 restore.\nSo the local_call patterns can't be used there.  For pcrel code to\nnon-pcrel the local_call patterns could still be used, but I thought\nit better to not use them since the call isn't direct.  Code generated\nby the corresponding call_nonlocal_aix for pcrel is identical anyway.\n\nIncidentally, without the TREE_CODE () == FUNCTION_DECL test,\ngcc.c-torture/compile/pr37433.c and pr37433-1.c ICE.  Also, if you\nmake the test more strict by disallowing an op without a\nSYMBOL_REF_DECL then a bunch of go and split-stack tests fail.  That's\nbecause a prologue call to __morestack can't have a following nop.\n(__morestack calls its caller at a fixed offset from the __morestack\ncall!)\n\ngcc/\n\tPR target/96493\n\t* config/rs6000/predicates.md (current_file_function_operand): Don't\n\taccept functions that differ in r2 usage.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/pr96493.c: New file.", "tree": {"sha": "bc8e853f0e4a4a743d325d3fe9fdf005830e0ad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc8e853f0e4a4a743d325d3fe9fdf005830e0ad0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8ac30f1653ff69706c35af6d725f1d330600f11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ac30f1653ff69706c35af6d725f1d330600f11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8ac30f1653ff69706c35af6d725f1d330600f11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ac30f1653ff69706c35af6d725f1d330600f11/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74d91e8bb7935c1bf57fbc26437935eeee00d238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d91e8bb7935c1bf57fbc26437935eeee00d238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d91e8bb7935c1bf57fbc26437935eeee00d238"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "2709e46f7e56ef4e22bda88da7778c3040ff4d23", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ac30f1653ff69706c35af6d725f1d330600f11/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ac30f1653ff69706c35af6d725f1d330600f11/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=f8ac30f1653ff69706c35af6d725f1d330600f11", "patch": "@@ -1051,7 +1051,12 @@\n \t\t    && !((DEFAULT_ABI == ABI_AIX\n \t\t\t  || DEFAULT_ABI == ABI_ELFv2)\n \t\t\t && (SYMBOL_REF_EXTERNAL_P (op)\n-\t\t\t     || SYMBOL_REF_WEAK (op)))\")))\n+\t\t\t     || SYMBOL_REF_WEAK (op)))\n+\t\t    && !(DEFAULT_ABI == ABI_ELFv2\n+\t\t\t && SYMBOL_REF_DECL (op) != NULL\n+\t\t\t && TREE_CODE (SYMBOL_REF_DECL (op)) == FUNCTION_DECL\n+\t\t\t && (rs6000_fndecl_pcrel_p (SYMBOL_REF_DECL (op))\n+\t\t\t     != rs6000_pcrel_p (cfun)))\")))\n \n ;; Return 1 if this operand is a valid input for a move insn.\n (define_predicate \"input_operand\""}, {"sha": "f0de08188133928a91efcb33f84fc79d54b6af7d", "filename": "gcc/testsuite/gcc.target/powerpc/pr96493.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ac30f1653ff69706c35af6d725f1d330600f11/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96493.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ac30f1653ff69706c35af6d725f1d330600f11/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96493.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96493.c?ref=f8ac30f1653ff69706c35af6d725f1d330600f11", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mdejagnu-cpu=power8 -O2\" } */\n+/* { dg-require-effective-target powerpc_elfv2 } */\n+\n+/* Test local calls between pcrel and non-pcrel code.\n+\n+   Despite the cpu=power10 option, the code generated here should just\n+   be plain powerpc64, even the necessary linker stubs.  */\n+\n+int one = 1;\n+\n+int __attribute__ ((target(\"cpu=power8\"),noclone,noinline))\n+p8_func (int x)\n+{\n+  return x - one;\n+}\n+\n+int __attribute__ ((target(\"cpu=power10\"),noclone,noinline))\n+p10_func (int x)\n+{\n+  return p8_func (x);\n+}\n+\n+int\n+main (void)\n+{\n+  return p10_func (1);\n+}"}]}