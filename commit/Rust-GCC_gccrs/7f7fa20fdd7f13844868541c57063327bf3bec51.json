{"sha": "7f7fa20fdd7f13844868541c57063327bf3bec51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y3ZmEyMGZkZDdmMTM4NDQ4Njg1NDFjNTcwNjMzMjdiZjNiZWM1MQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-06-16T12:21:55Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-06-16T12:21:55Z"}, "message": "Fix code emission for FAIL_ALLOC predictor\n\n\t* predict.def: Define a new predictor.\n\t* trans-array.c (gfc_array_allocate): Do not generate expect\n\tstmt.\n\t* trans.c (gfc_allocate_using_malloc): Properly set FAIL_ALLOC\n\tpredictor for malloc return value.\n\t(gfc_allocate_allocatable): Use REALLOC predictor instead of\n\tFAIL_ALLOC.\n\t(gfc_deallocate_with_status): Likewise.\n\nFrom-SVN: r237524", "tree": {"sha": "b131ad95625b4a3221ddf076bbe3d9629b80aa69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b131ad95625b4a3221ddf076bbe3d9629b80aa69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f7fa20fdd7f13844868541c57063327bf3bec51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7fa20fdd7f13844868541c57063327bf3bec51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f7fa20fdd7f13844868541c57063327bf3bec51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7fa20fdd7f13844868541c57063327bf3bec51/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73170f9e46783e03f96133d9ee96e96f8cd4fd38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73170f9e46783e03f96133d9ee96e96f8cd4fd38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73170f9e46783e03f96133d9ee96e96f8cd4fd38"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "0e95c7028f67af4af968399082bed1cdab258cd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7fa20fdd7f13844868541c57063327bf3bec51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7fa20fdd7f13844868541c57063327bf3bec51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f7fa20fdd7f13844868541c57063327bf3bec51", "patch": "@@ -1,3 +1,7 @@\n+2016-06-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* predict.def: Define a new predictor.\n+\n 2016-06-16  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.opt (mtp-regno): Update text."}, {"sha": "9ba155430802df01ec264f47c5ea7e617a3181d8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7fa20fdd7f13844868541c57063327bf3bec51/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7fa20fdd7f13844868541c57063327bf3bec51/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7f7fa20fdd7f13844868541c57063327bf3bec51", "patch": "@@ -1,3 +1,13 @@\n+2016-06-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* trans-array.c (gfc_array_allocate): Do not generate expect\n+\tstmt.\n+\t* trans.c (gfc_allocate_using_malloc): Properly set FAIL_ALLOC\n+\tpredictor for malloc return value.\n+\t(gfc_allocate_allocatable): Use REALLOC predictor instead of\n+\tFAIL_ALLOC.\n+\t(gfc_deallocate_with_status): Likewise.\n+\n 2016-06-13  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/70673"}, {"sha": "e95c8dd82353ea3c785d05bcde253415151dbcdc", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7fa20fdd7f13844868541c57063327bf3bec51/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7fa20fdd7f13844868541c57063327bf3bec51/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=7f7fa20fdd7f13844868541c57063327bf3bec51", "patch": "@@ -5553,7 +5553,7 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n \t\t\t  build_int_cst (TREE_TYPE (status), 0));\n       gfc_add_expr_to_block (&se->pre,\n \t\t fold_build3_loc (input_location, COND_EXPR, void_type_node,\n-\t\t\t\t  gfc_likely (cond, PRED_FORTRAN_FAIL_ALLOC),\n+\t\t\t\t  cond,\n \t\t\t\t  set_descriptor,\n \t\t\t\t  build_empty_stmt (input_location)));\n     }"}, {"sha": "d6b4a564bf5fb85f7947a2e52d8e85902c8a814b", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7fa20fdd7f13844868541c57063327bf3bec51/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7fa20fdd7f13844868541c57063327bf3bec51/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=7f7fa20fdd7f13844868541c57063327bf3bec51", "patch": "@@ -672,9 +672,6 @@ gfc_allocate_using_malloc (stmtblock_t * block, tree pointer,\n   gfc_start_block (&on_error);\n   if (status != NULL_TREE)\n     {\n-      gfc_add_expr_to_block (&on_error,\n-\t\t\t     build_predict_expr (PRED_FORTRAN_FAIL_ALLOC,\n-\t\t\t\t\t\t NOT_TAKEN));\n       tmp = fold_build2_loc (input_location, MODIFY_EXPR, status_type, status,\n \t\t\t     build_int_cst (status_type, LIBERROR_ALLOCATION));\n       gfc_add_expr_to_block (&on_error, tmp);\n@@ -693,7 +690,8 @@ gfc_allocate_using_malloc (stmtblock_t * block, tree pointer,\n \t\t\t\tboolean_type_node, pointer,\n \t\t\t\tbuild_int_cst (prvoid_type_node, 0));\n   tmp = fold_build3_loc (input_location, COND_EXPR, void_type_node,\n-\t\t\t error_cond, gfc_finish_block (&on_error),\n+\t\t\t gfc_unlikely (error_cond, PRED_FORTRAN_FAIL_ALLOC),\n+\t\t\t gfc_finish_block (&on_error),\n \t\t\t build_empty_stmt (input_location));\n \n   gfc_add_expr_to_block (block, tmp);\n@@ -796,7 +794,7 @@ gfc_allocate_allocatable (stmtblock_t * block, tree mem, tree size, tree token,\n   null_mem = gfc_unlikely (fold_build2_loc (input_location, NE_EXPR,\n \t\t\t\t\t    boolean_type_node, mem,\n \t\t\t\t\t    build_int_cst (type, 0)),\n-\t\t\t   PRED_FORTRAN_FAIL_ALLOC);\n+\t\t\t   PRED_FORTRAN_REALLOC);\n \n   /* If mem is NULL, we call gfc_allocate_using_malloc or\n      gfc_allocate_using_lib.  */\n@@ -1385,7 +1383,7 @@ gfc_deallocate_with_status (tree pointer, tree status, tree errmsg,\n \t  cond2 = fold_build2_loc (input_location, NE_EXPR, boolean_type_node,\n \t\t\t\t   stat, build_zero_cst (TREE_TYPE (stat)));\n \t  tmp = fold_build3_loc (input_location, COND_EXPR, void_type_node,\n-\t\t\t\t gfc_unlikely (cond2, PRED_FORTRAN_FAIL_ALLOC),\n+\t\t\t\t gfc_unlikely (cond2, PRED_FORTRAN_REALLOC),\n \t\t\t\t tmp, build_empty_stmt (input_location));\n \t  gfc_add_expr_to_block (&non_null, tmp);\n \t}"}, {"sha": "da4f9ab78285f5d34c853ffb5761e23f6c59f977", "filename": "gcc/predict.def", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7fa20fdd7f13844868541c57063327bf3bec51/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7fa20fdd7f13844868541c57063327bf3bec51/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=7f7fa20fdd7f13844868541c57063327bf3bec51", "patch": "@@ -163,12 +163,15 @@ DEF_PREDICTOR (PRED_FORTRAN_OVERFLOW, \"overflow\", PROB_ALWAYS,\n \t       PRED_FLAG_FIRST_MATCH)\n \n /* Branch leading to a failure status are unlikely.  This can occur for out\n-   of memory or when trying to allocate an already allocated allocated or\n-   deallocating an already deallocated allocatable.  This predictor only\n-   occurs when the user explicitly asked for a return status.  By default,\n-   the code aborts, which is handled via PRED_NORETURN.\n-   FIXME: the hitrate really ought to be close to 100%.  */\n-DEF_PREDICTOR (PRED_FORTRAN_FAIL_ALLOC, \"fail alloc\", HITRATE (62), 0)\n+   of memory.  This predictor only occurs when the user explicitly asked\n+   for a return status.  By default, the code aborts,\n+   which is handled via PRED_NORETURN.  */\n+DEF_PREDICTOR (PRED_FORTRAN_FAIL_ALLOC, \"fail alloc\", PROB_VERY_LIKELY, 0)\n+\n+/* Predictor is used for an allocation of an already allocated memory or\n+   deallocating an already deallocated allocatable.  */\n+DEF_PREDICTOR (PRED_FORTRAN_REALLOC, \"repeated allocation/deallocation\", \\\n+\t       PROB_LIKELY, 0)\n \n /* Branch leading to an I/O failure status are unlikely.  This predictor is\n    used for I/O failures such as for invalid unit numbers.  This predictor"}]}