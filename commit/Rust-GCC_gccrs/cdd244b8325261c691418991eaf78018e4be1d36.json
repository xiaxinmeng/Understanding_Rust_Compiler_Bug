{"sha": "cdd244b8325261c691418991eaf78018e4be1d36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RkMjQ0YjgzMjUyNjFjNjkxNDE4OTkxZWFmNzgwMThlNGJlMWQzNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-04-15T05:52:51Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-04-15T05:52:51Z"}, "message": "re PR fortran/52916 (481.wrf in SPEC CPU 2006 failed to build)\n\n2012-04-14  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52916\n        PR fortran/40973\n        * gfortran.h (symbol_attribute): Add public_used.\n        * interface.c (check_sym_interfaces, check_uop_interfaces,\n        gfc_check_interfaces): Set it.\n        * resolve.c (resolve_typebound_procedure): Ditto.\n        * trans-decl.c (build_function_decl): Use it.\n\n2012-04-14  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52916\n        PR fortran/40973\n        * gfortran.dg/public_private_module_3.f90: New.\n        * gfortran.dg/public_private_module_4.f90: New.\n\nFrom-SVN: r186464", "tree": {"sha": "ebf6b57b3ef8ce310ea30d7ae5deff2e09d2a3e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebf6b57b3ef8ce310ea30d7ae5deff2e09d2a3e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdd244b8325261c691418991eaf78018e4be1d36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd244b8325261c691418991eaf78018e4be1d36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd244b8325261c691418991eaf78018e4be1d36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd244b8325261c691418991eaf78018e4be1d36/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9aad845a63596fb36cee7d359592bf53e1c6f416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aad845a63596fb36cee7d359592bf53e1c6f416", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aad845a63596fb36cee7d359592bf53e1c6f416"}], "stats": {"total": 120, "additions": 119, "deletions": 1}, "files": [{"sha": "9bb46acb427caa193e772465e761f17ccd508eed", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd244b8325261c691418991eaf78018e4be1d36/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd244b8325261c691418991eaf78018e4be1d36/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cdd244b8325261c691418991eaf78018e4be1d36", "patch": "@@ -1,3 +1,13 @@\n+2012-04-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52916\n+\tPR fortran/40973\n+\t* gfortran.h (symbol_attribute): Add public_used.\n+\t* interface.c (check_sym_interfaces, check_uop_interfaces,\n+\tgfc_check_interfaces): Set it.\n+\t* resolve.c (resolve_typebound_procedure): Ditto.\n+\t* trans-decl.c (build_function_decl): Use it.\n+\n 2012-04-11  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/52729"}, {"sha": "25bdfa5ca3c82dbf69c29697493523f190e55abe", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd244b8325261c691418991eaf78018e4be1d36/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd244b8325261c691418991eaf78018e4be1d36/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=cdd244b8325261c691418991eaf78018e4be1d36", "patch": "@@ -726,6 +726,10 @@ typedef struct\n   unsigned sequence:1, elemental:1, pure:1, recursive:1;\n   unsigned unmaskable:1, masked:1, contained:1, mod_proc:1, abstract:1;\n \n+  /* Set if a (public) symbol [e.g. generic name] exposes this symbol,\n+     which is relevant for private module procedures.  */\n+  unsigned public_used:1;\n+\n   /* This is set if a contained procedure could be declared pure.  This is\n      used for certain optimizations that require the result or arguments\n      cannot alias.  Note that this is zero for PURE procedures.  */"}, {"sha": "2f1d24e6e3375fade69278855ca7f2abeb6b7aea", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd244b8325261c691418991eaf78018e4be1d36/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd244b8325261c691418991eaf78018e4be1d36/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=cdd244b8325261c691418991eaf78018e4be1d36", "patch": "@@ -1390,6 +1390,9 @@ check_sym_interfaces (gfc_symbol *sym)\n \n       for (p = sym->generic; p; p = p->next)\n \t{\n+\t  if (sym->attr.access != ACCESS_PRIVATE)\n+\t    p->sym->attr.public_used = 1;\n+\n \t  if (p->sym->attr.mod_proc\n \t      && (p->sym->attr.if_source != IFSRC_DECL\n \t\t  || p->sym->attr.procedure))\n@@ -1415,11 +1418,16 @@ check_uop_interfaces (gfc_user_op *uop)\n   char interface_name[100];\n   gfc_user_op *uop2;\n   gfc_namespace *ns;\n+  gfc_interface *p;\n \n   sprintf (interface_name, \"operator interface '%s'\", uop->name);\n   if (check_interface0 (uop->op, interface_name))\n     return;\n \n+  if (uop->access != ACCESS_PRIVATE)\n+    for (p = uop->op; p; p = p->next)\n+      p->sym->attr.public_used = 1;\n+\n   for (ns = gfc_current_ns; ns; ns = ns->parent)\n     {\n       uop2 = gfc_find_uop (uop->name, ns);\n@@ -1489,6 +1497,7 @@ void\n gfc_check_interfaces (gfc_namespace *ns)\n {\n   gfc_namespace *old_ns, *ns2;\n+  gfc_interface *p;\n   char interface_name[100];\n   int i;\n \n@@ -1513,6 +1522,10 @@ gfc_check_interfaces (gfc_namespace *ns)\n       if (check_interface0 (ns->op[i], interface_name))\n \tcontinue;\n \n+      for (p = ns->op[i]; p; p = p->next)\n+\tp->sym->attr.public_used = 1;\n+\n+\n       if (ns->op[i])\n \tgfc_check_operator_interface (ns->op[i]->sym, (gfc_intrinsic_op) i,\n \t\t\t\t      ns->op[i]->where);"}, {"sha": "57da577dfaaa587d340a2c70b5e9dc63f73f5935", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd244b8325261c691418991eaf78018e4be1d36/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd244b8325261c691418991eaf78018e4be1d36/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=cdd244b8325261c691418991eaf78018e4be1d36", "patch": "@@ -11304,6 +11304,7 @@ resolve_typebound_procedure (gfc_symtree* stree)\n   gcc_assert (stree->n.tb->u.specific);\n   proc = stree->n.tb->u.specific->n.sym;\n   where = stree->n.tb->where;\n+  proc->attr.public_used = 1;\n \n   /* Default access should already be resolved from the parser.  */\n   gcc_assert (stree->n.tb->access != ACCESS_UNKNOWN);"}, {"sha": "129010e4cf857afde26cd95c794f138262f4f62b", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd244b8325261c691418991eaf78018e4be1d36/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd244b8325261c691418991eaf78018e4be1d36/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=cdd244b8325261c691418991eaf78018e4be1d36", "patch": "@@ -1844,7 +1844,8 @@ build_function_decl (gfc_symbol * sym, bool global)\n \n   if (!current_function_decl\n       && !sym->attr.entry_master && !sym->attr.is_main_program\n-      && (sym->attr.access != ACCESS_PRIVATE || sym->binding_label))\n+      && (sym->attr.access != ACCESS_PRIVATE || sym->binding_label\n+\t  || sym->attr.public_used))\n     TREE_PUBLIC (fndecl) = 1;\n \n   attributes = add_attributes_to_decl (attr, NULL_TREE);"}, {"sha": "16d632858904a48408d05977cceb1ba39377c030", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd244b8325261c691418991eaf78018e4be1d36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd244b8325261c691418991eaf78018e4be1d36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cdd244b8325261c691418991eaf78018e4be1d36", "patch": "@@ -1,3 +1,10 @@\n+2012-04-14  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52916\n+\tPR fortran/40973\n+\t* gfortran.dg/public_private_module_3.f90: New.\n+\t* gfortran.dg/public_private_module_4.f90: New.\n+\n 2012-04-14  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.dg/superblock.c: New test."}, {"sha": "f0032256f46cea8736dd2d98ad86661a6598495d", "filename": "gcc/testsuite/gfortran.dg/public_private_module_3.f90", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd244b8325261c691418991eaf78018e4be1d36/gcc%2Ftestsuite%2Fgfortran.dg%2Fpublic_private_module_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd244b8325261c691418991eaf78018e4be1d36/gcc%2Ftestsuite%2Fgfortran.dg%2Fpublic_private_module_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpublic_private_module_3.f90?ref=cdd244b8325261c691418991eaf78018e4be1d36", "patch": "@@ -0,0 +1,60 @@\n+! { dg-do compile }\n+!\n+! To be used by public_private_module_4.f90\n+!\n+! PR fortran/52916\n+! Cf. PR fortran/40973\n+!\n+! Ensure that PRIVATE specific functions do not get\n+! marked as TREE_PUBLIC() = 0, if the generic name is\n+! PUBLIC.\n+!\n+module m\n+  interface gen\n+    module procedure bar\n+  end interface gen\n+\n+  type t\n+  end type t\n+\n+  interface operator(.myop.)\n+    module procedure my_op\n+  end interface\n+\n+  interface operator(+)\n+    module procedure my_plus\n+  end interface\n+\n+  interface assignment(=)\n+    module procedure my_assign\n+  end interface\n+\n+  private :: bar, my_op, my_plus, my_assign\n+contains\n+  subroutine bar()\n+    print *, \"bar\"\n+  end subroutine bar\n+  function my_op(op1, op2) result(res)\n+    type(t) :: res\n+    type(t), intent(in) :: op1, op2\n+  end function my_op\n+  function my_plus(op1, op2) result(res)\n+    type(t) :: res\n+    type(t), intent(in) :: op1, op2\n+  end function my_plus\n+  subroutine my_assign(lhs, rhs)\n+    type(t), intent(out) :: lhs\n+    type(t), intent(in) :: rhs\n+  end subroutine my_assign\n+end module m\n+\n+module m2\n+  type t2\n+  contains\n+    procedure, nopass :: func => foo\n+  end type t2\n+  private :: foo\n+contains\n+  subroutine foo()\n+  end subroutine foo\n+end module m2"}, {"sha": "6b5519c89298911f6201a3f47c566fadd95adaa8", "filename": "gcc/testsuite/gfortran.dg/public_private_module_4.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd244b8325261c691418991eaf78018e4be1d36/gcc%2Ftestsuite%2Fgfortran.dg%2Fpublic_private_module_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd244b8325261c691418991eaf78018e4be1d36/gcc%2Ftestsuite%2Fgfortran.dg%2Fpublic_private_module_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpublic_private_module_4.f90?ref=cdd244b8325261c691418991eaf78018e4be1d36", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do link }\n+! { dg-additional-sources public_private_module_3.f90 }\n+!\n+! PR fortran/52916\n+! Cf. PR fortran/40973\n+!\n+! Ensure that PRIVATE specific functions do not get\n+! marked as TREE_PUBLIC() = 0, if the generic name is\n+! PUBLIC.\n+!\n+use m\n+use m2\n+implicit none\n+\n+type(t) :: a, b, c\n+type(t2) :: x\n+\n+call gen()\n+a = b + (c .myop. a)\n+\n+call x%func()\n+end"}]}