{"sha": "cda29c540037fbcf00a377196050953aab1d3d5b", "node_id": "C_kwDOANBUbNoAKGNkYTI5YzU0MDAzN2ZiY2YwMGEzNzcxOTYwNTA5NTNhYWIxZDNkNWI", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-11-28T01:59:47Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-12-01T03:31:37Z"}, "message": "Fix unrecognizable insn due to illegal immediate_operand (const_int 255) of QImode.\n\nFor __builtin_ia32_vec_set_v16qi (a, -1, 2) with\n!flag_signed_char. it's transformed to\n__builtin_ia32_vec_set_v16qi (_4, 255, 2) in the gimple,\nand expanded to (const_int 255) in the rtl. But for immediate_operand,\nit expects (const_int 255) to be signed extended to\n(const_int -1). The mismatch caused an unrecognizable insn error.\n\nThe patch converts (const_int 255) to (const_int -1) in the backend\nexpander.\n\ngcc/ChangeLog:\n\n\tPR target/107863\n\t* config/i386/i386-expand.cc (ix86_expand_vec_set_builtin):\n\tConvert op1 to target mode whenever mode mismatch.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr107863.c: New test.", "tree": {"sha": "91d689982d1f135ae4019c0ca6c8d77dae74d1f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91d689982d1f135ae4019c0ca6c8d77dae74d1f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cda29c540037fbcf00a377196050953aab1d3d5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda29c540037fbcf00a377196050953aab1d3d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cda29c540037fbcf00a377196050953aab1d3d5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda29c540037fbcf00a377196050953aab1d3d5b/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaaf97b6147095cc19f7efdefaf55c8ebe7a94e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaaf97b6147095cc19f7efdefaf55c8ebe7a94e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaaf97b6147095cc19f7efdefaf55c8ebe7a94e8"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "ec3921bdc6204306bb46a30a653eab10c758dba2", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda29c540037fbcf00a377196050953aab1d3d5b/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda29c540037fbcf00a377196050953aab1d3d5b/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=cda29c540037fbcf00a377196050953aab1d3d5b", "patch": "@@ -12476,7 +12476,7 @@ ix86_expand_vec_set_builtin (tree exp)\n   op1 = expand_expr (arg1, NULL_RTX, mode1, EXPAND_NORMAL);\n   elt = get_element_number (TREE_TYPE (arg0), arg2);\n \n-  if (GET_MODE (op1) != mode1 && GET_MODE (op1) != VOIDmode)\n+  if (GET_MODE (op1) != mode1)\n     op1 = convert_modes (mode1, GET_MODE (op1), op1, true);\n \n   op0 = force_reg (tmode, op0);"}, {"sha": "99fd85d9765922eabf527ac9a3d5691a8f8164e0", "filename": "gcc/testsuite/gcc.target/i386/pr107863.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda29c540037fbcf00a377196050953aab1d3d5b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107863.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda29c540037fbcf00a377196050953aab1d3d5b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107863.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107863.c?ref=cda29c540037fbcf00a377196050953aab1d3d5b", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O\" } */\n+\n+typedef char v16qi __attribute__((vector_size(16)));\n+\n+v16qi foo(v16qi a){\n+  return __builtin_ia32_vec_set_v16qi (a, -1, 2);\n+}"}]}