{"sha": "0b4718956d6a3030dacd0e65f6a21c674593b9ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI0NzE4OTU2ZDZhMzAzMGRhY2QwZTY1ZjZhMjFjNjc0NTkzYjljYQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-04-24T21:39:32Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-04-24T21:39:32Z"}, "message": "d: Fix order of precedence for -defaultlib and -debuglib\n\nThe order of precedence used by the upstream reference compiler for\ndetermining what library to link against is:\n- No library if -nophoboslib or -fno-druntime was seen.\n- The library passed to -debuglib if -g was also seen.\n- The library passed to -defaultlib\n- The in-tree libgphobos library.\n\nThis aligns the D language driver to follow the same rules.\n\ngcc/d/ChangeLog:\n\n\t* d-spec.cc (need_phobos): Remove.\n\t(lang_specific_driver): Replace need_phobos with phobos_library.\n\tReorder -debuglib and -defaultlib to have precedence over libphobos.\n\t(lang_specific_pre_link): Remove test for need_phobos.", "tree": {"sha": "fe0aff5a3b463dbc2be7987281aa3e301337df98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe0aff5a3b463dbc2be7987281aa3e301337df98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b4718956d6a3030dacd0e65f6a21c674593b9ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b4718956d6a3030dacd0e65f6a21c674593b9ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b4718956d6a3030dacd0e65f6a21c674593b9ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b4718956d6a3030dacd0e65f6a21c674593b9ca/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28b733ea04f4f5d85cab621e901aa8ba7b6b1ae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28b733ea04f4f5d85cab621e901aa8ba7b6b1ae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28b733ea04f4f5d85cab621e901aa8ba7b6b1ae4"}], "stats": {"total": 91, "additions": 43, "deletions": 48}, "files": [{"sha": "b96f0ffb82f5921bd1236ba483d4aa4404581683", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b4718956d6a3030dacd0e65f6a21c674593b9ca/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b4718956d6a3030dacd0e65f6a21c674593b9ca/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=0b4718956d6a3030dacd0e65f6a21c674593b9ca", "patch": "@@ -1,3 +1,10 @@\n+2020-04-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-spec.cc (need_phobos): Remove.\n+\t(lang_specific_driver): Replace need_phobos with phobos_library.\n+\tReorder -debuglib and -defaultlib to have precedence over libphobos.\n+\t(lang_specific_pre_link): Remove test for need_phobos.\n+\n 2020-04-19  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/94609"}, {"sha": "f4744763ab617e3adf762ca0a791a512597b0fa8", "filename": "gcc/d/d-spec.cc", "status": "modified", "additions": 36, "deletions": 48, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b4718956d6a3030dacd0e65f6a21c674593b9ca/gcc%2Fd%2Fd-spec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b4718956d6a3030dacd0e65f6a21c674593b9ca/gcc%2Fd%2Fd-spec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-spec.cc?ref=0b4718956d6a3030dacd0e65f6a21c674593b9ca", "patch": "@@ -61,10 +61,6 @@ enum phobos_action\n \n static phobos_action phobos_library = PHOBOS_DEFAULT;\n \n-/* If true, use the standard D runtime library when linking with\n-   standard libraries.  */\n-static bool need_phobos = true;\n-\n /* If true, do load libgphobos.spec even if not needed otherwise.  */\n static bool need_spec = false;\n \n@@ -151,21 +147,22 @@ lang_specific_driver (cl_decoded_option **in_decoded_options,\n \t  break;\n \n \tcase OPT_nophoboslib:\n-\t  need_phobos = false;\n+\t  phobos_library = PHOBOS_NOLINK;\n \t  args[i] |= SKIPOPT;\n \t  break;\n \n \tcase OPT_fdruntime:\n \t  if (!value)\n-\t    need_phobos = false;\n+\t    phobos_library = PHOBOS_NOLINK;\n+\t  else\n+\t    phobos_library = PHOBOS_LINK;\n \t  break;\n \n \tcase OPT_defaultlib_:\n \t  if (defaultlib != NULL)\n \t    free (CONST_CAST (char *, defaultlib));\n \t  if (arg != NULL)\n \t    {\n-\t      need_phobos = false;\n \t      args[i] |= SKIPOPT;\n \t      defaultlib = XNEWVEC (char, strlen (arg));\n \t      strcpy (CONST_CAST (char *, defaultlib), arg);\n@@ -177,7 +174,6 @@ lang_specific_driver (cl_decoded_option **in_decoded_options,\n \t    free (CONST_CAST (char *, debuglib));\n \t  if (arg != NULL)\n \t    {\n-\t      need_phobos = false;\n \t      args[i] |= SKIPOPT;\n \t      debuglib = XNEWVEC (char, strlen (arg));\n \t      strcpy (CONST_CAST (char *, debuglib), arg);\n@@ -314,10 +310,11 @@ lang_specific_driver (cl_decoded_option **in_decoded_options,\n #endif\n \n   /* Make sure to have room for the trailing NULL argument.\n-     - needstdcxx might add `-lstdcxx'\n+     - need_stdcxx might add `-lstdcxx'\n      - libphobos adds `-Bstatic -lphobos -Bdynamic'\n      - only_source adds 1 more arg, also maybe add `-o'.  */\n-  num_args = argc + need_stdcxx + shared_libgcc + need_phobos * 4 + 2;\n+  num_args = argc + need_stdcxx + shared_libgcc\n+    + (phobos_library != PHOBOS_NOLINK) * 4 + 2;\n   new_decoded_options = XNEWVEC (cl_decoded_option, num_args);\n \n   i = 0;\n@@ -409,60 +406,51 @@ lang_specific_driver (cl_decoded_option **in_decoded_options,\n     }\n \n   /* Add `-lgphobos' if we haven't already done so.  */\n-  if (phobos_library != PHOBOS_NOLINK && need_phobos)\n+  if (phobos_library != PHOBOS_NOLINK)\n     {\n       /* Default to static linking.  */\n       if (phobos_library != PHOBOS_DYNAMIC)\n \tphobos_library = PHOBOS_STATIC;\n \n #ifdef HAVE_LD_STATIC_DYNAMIC\n-      if (phobos_library == PHOBOS_DYNAMIC && static_link)\n-\t{\n-\t  generate_option (OPT_Wl_, LD_DYNAMIC_OPTION, 1, CL_DRIVER,\n-\t\t\t   &new_decoded_options[j]);\n-\t  j++;\n-\t}\n-      else if (phobos_library == PHOBOS_STATIC && !static_link)\n+      if (phobos_library == PHOBOS_STATIC && !static_link)\n \t{\n \t  generate_option (OPT_Wl_, LD_STATIC_OPTION, 1, CL_DRIVER,\n-\t\t\t   &new_decoded_options[j]);\n-\t  j++;\n+\t\t\t   &new_decoded_options[j++]);\n \t}\n #endif\n-\n-      generate_option (OPT_l,\n-\t\t       saw_profile_flag ? LIBPHOBOS_PROFILE : LIBPHOBOS, 1,\n-\t\t       CL_DRIVER, &new_decoded_options[j]);\n-      added_libraries++;\n-      j++;\n-\n-#ifdef HAVE_LD_STATIC_DYNAMIC\n-      if (phobos_library == PHOBOS_DYNAMIC && static_link)\n+      /* Order of precedence in determining what library to link against is:\n+\t - `-l<lib>' from `-debuglib=<lib>' if `-g' was also seen.\n+\t - `-l<lib>' from `-defaultlib=<lib>'.\n+\t - `-lgphobos' unless `-nophoboslib' or `-fno-druntime' was seen.  */\n+      if (debuglib && saw_debug_flag)\n \t{\n-\t  generate_option (OPT_Wl_, LD_STATIC_OPTION, 1, CL_DRIVER,\n-\t\t\t   &new_decoded_options[j]);\n-\t  j++;\n+\t  generate_option (OPT_l, debuglib, 1, CL_DRIVER,\n+\t\t\t   &new_decoded_options[j++]);\n+\t  added_libraries++;\n \t}\n-      else if (phobos_library == PHOBOS_STATIC && !static_link)\n+      else if (defaultlib)\n+\t{\n+\t  generate_option (OPT_l, defaultlib, 1, CL_DRIVER,\n+\t\t\t   &new_decoded_options[j++]);\n+\t  added_libraries++;\n+\t}\n+      else\n+\t{\n+\t  generate_option (OPT_l,\n+\t\t\t   saw_profile_flag ? LIBPHOBOS_PROFILE : LIBPHOBOS, 1,\n+\t\t\t   CL_DRIVER, &new_decoded_options[j++]);\n+\t  added_libraries++;\n+\t}\n+\n+#ifdef HAVE_LD_STATIC_DYNAMIC\n+      if (phobos_library == PHOBOS_STATIC && !static_link)\n \t{\n \t  generate_option (OPT_Wl_, LD_DYNAMIC_OPTION, 1, CL_DRIVER,\n-\t\t\t   &new_decoded_options[j]);\n-\t  j++;\n+\t\t\t   &new_decoded_options[j++]);\n \t}\n #endif\n     }\n-  else if (saw_debug_flag && debuglib)\n-    {\n-      generate_option (OPT_l, debuglib, 1, CL_DRIVER,\n-\t\t       &new_decoded_options[j++]);\n-      added_libraries++;\n-    }\n-  else if (defaultlib)\n-    {\n-      generate_option (OPT_l, defaultlib, 1, CL_DRIVER,\n-\t\t       &new_decoded_options[j++]);\n-      added_libraries++;\n-    }\n \n   if (saw_libcxx)\n     new_decoded_options[j++] = *saw_libcxx;\n@@ -492,7 +480,7 @@ lang_specific_driver (cl_decoded_option **in_decoded_options,\n int\n lang_specific_pre_link (void)\n {\n-  if ((phobos_library != PHOBOS_NOLINK && need_phobos) || need_spec)\n+  if ((phobos_library != PHOBOS_NOLINK) || need_spec)\n     do_spec (\"%:include(libgphobos.spec)\");\n \n   return 0;"}]}