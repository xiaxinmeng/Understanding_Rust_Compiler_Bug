{"sha": "c4be77f7e0f6b35c019940200f94c7a7b30fff84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRiZTc3ZjdlMGY2YjM1YzAxOTk0MDIwMGY5NGM3YTdiMzBmZmY4NA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-05T13:16:38Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-06T15:16:23Z"}, "message": "Enforce Duplicate definition rules\n\nRust does not allow functions/methods/constants/static definitions to\nshadow otherwise you end up with unuseable items.", "tree": {"sha": "be0673177880aba5edc02b13632ad93e052e0aa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be0673177880aba5edc02b13632ad93e052e0aa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4be77f7e0f6b35c019940200f94c7a7b30fff84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4be77f7e0f6b35c019940200f94c7a7b30fff84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4be77f7e0f6b35c019940200f94c7a7b30fff84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4be77f7e0f6b35c019940200f94c7a7b30fff84/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9abf0733814c5e4131b96afb1c0abad68f4cf4ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9abf0733814c5e4131b96afb1c0abad68f4cf4ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9abf0733814c5e4131b96afb1c0abad68f4cf4ef"}], "stats": {"total": 182, "additions": 159, "deletions": 23}, "files": [{"sha": "9cbef53fd15fed2bbac85dcbb48e62fae3a0d3b4", "filename": "gcc/rust/resolve/rust-ast-resolve-implitem.h", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h?ref=c4be77f7e0f6b35c019940200f94c7a7b30fff84", "patch": "@@ -39,8 +39,12 @@ class ResolveToplevelImplItem : public ResolverBase\n   {\n     std::string identifier\n       = base->as_string () + \"::\" + constant.get_identifier ();\n-    resolver->get_name_scope ().insert (identifier, constant.get_node_id (),\n-\t\t\t\t\tconstant.get_locus ());\n+    resolver->get_name_scope ().insert (\n+      identifier, constant.get_node_id (), constant.get_locus (), false,\n+      [&] (std::string, NodeId, Location locus) -> void {\n+\trust_error_at (constant.get_locus (), \"redefined multiple times\");\n+\trust_error_at (locus, \"was defined here\");\n+      });\n     resolver->insert_new_definition (constant.get_node_id (),\n \t\t\t\t     Definition{constant.get_node_id (),\n \t\t\t\t\t\tconstant.get_node_id ()});\n@@ -50,8 +54,12 @@ class ResolveToplevelImplItem : public ResolverBase\n   {\n     std::string identifier\n       = base->as_string () + \"::\" + function.get_function_name ();\n-    resolver->get_name_scope ().insert (identifier, function.get_node_id (),\n-\t\t\t\t\tfunction.get_locus ());\n+    resolver->get_name_scope ().insert (\n+      identifier, function.get_node_id (), function.get_locus (), false,\n+      [&] (std::string, NodeId, Location locus) -> void {\n+\trust_error_at (function.get_locus (), \"redefined multiple times\");\n+\trust_error_at (locus, \"was defined here\");\n+      });\n     resolver->insert_new_definition (function.get_node_id (),\n \t\t\t\t     Definition{function.get_node_id (),\n \t\t\t\t\t\tfunction.get_node_id ()});\n@@ -61,8 +69,12 @@ class ResolveToplevelImplItem : public ResolverBase\n   {\n     std::string identifier\n       = base->as_string () + \"::\" + method.get_method_name ();\n-    resolver->get_name_scope ().insert (identifier, method.get_node_id (),\n-\t\t\t\t\tmethod.get_locus ());\n+    resolver->get_name_scope ().insert (\n+      identifier, method.get_node_id (), method.get_locus (), false,\n+      [&] (std::string, NodeId, Location locus) -> void {\n+\trust_error_at (method.get_locus (), \"redefined multiple times\");\n+\trust_error_at (locus, \"was defined here\");\n+      });\n     resolver->insert_new_definition (method.get_node_id (),\n \t\t\t\t     Definition{method.get_node_id (),\n \t\t\t\t\t\tmethod.get_node_id ()});"}, {"sha": "0ed838abfb93ecdebf887c41685862ed3d123dc0", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=c4be77f7e0f6b35c019940200f94c7a7b30fff84", "patch": "@@ -38,22 +38,34 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::TupleStruct &struct_decl)\n   {\n-    resolver->get_type_scope ().insert (struct_decl.get_identifier (),\n-\t\t\t\t\tstruct_decl.get_node_id (),\n-\t\t\t\t\tstruct_decl.get_locus ());\n+    resolver->get_type_scope ().insert (\n+      struct_decl.get_identifier (), struct_decl.get_node_id (),\n+      struct_decl.get_locus (), false,\n+      [&] (std::string, NodeId, Location locus) -> void {\n+\trust_error_at (struct_decl.get_locus (), \"redefined multiple times\");\n+\trust_error_at (locus, \"was defined here\");\n+      });\n   }\n \n   void visit (AST::StructStruct &struct_decl)\n   {\n-    resolver->get_type_scope ().insert (struct_decl.get_identifier (),\n-\t\t\t\t\tstruct_decl.get_node_id (),\n-\t\t\t\t\tstruct_decl.get_locus ());\n+    resolver->get_type_scope ().insert (\n+      struct_decl.get_identifier (), struct_decl.get_node_id (),\n+      struct_decl.get_locus (), false,\n+      [&] (std::string, NodeId, Location locus) -> void {\n+\trust_error_at (struct_decl.get_locus (), \"redefined multiple times\");\n+\trust_error_at (locus, \"was defined here\");\n+      });\n   }\n \n   void visit (AST::StaticItem &var)\n   {\n-    resolver->get_name_scope ().insert (var.get_identifier (),\n-\t\t\t\t\tvar.get_node_id (), var.get_locus ());\n+    resolver->get_name_scope ().insert (\n+      var.get_identifier (), var.get_node_id (), var.get_locus (), false,\n+      [&] (std::string, NodeId, Location locus) -> void {\n+\trust_error_at (var.get_locus (), \"redefined multiple times\");\n+\trust_error_at (locus, \"was defined here\");\n+      });\n     resolver->insert_new_definition (var.get_node_id (),\n \t\t\t\t     Definition{var.get_node_id (),\n \t\t\t\t\t\tvar.get_node_id ()});\n@@ -62,19 +74,27 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::ConstantItem &constant)\n   {\n-    resolver->get_name_scope ().insert (constant.get_identifier (),\n-\t\t\t\t\tconstant.get_node_id (),\n-\t\t\t\t\tconstant.get_locus ());\n+    resolver->get_name_scope ().insert (\n+      constant.get_identifier (), constant.get_node_id (),\n+      constant.get_locus (), false,\n+      [&] (std::string, NodeId, Location locus) -> void {\n+\trust_error_at (constant.get_locus (), \"redefined multiple times\");\n+\trust_error_at (locus, \"was defined here\");\n+      });\n     resolver->insert_new_definition (constant.get_node_id (),\n \t\t\t\t     Definition{constant.get_node_id (),\n \t\t\t\t\t\tconstant.get_node_id ()});\n   }\n \n   void visit (AST::Function &function)\n   {\n-    resolver->get_name_scope ().insert (function.get_function_name (),\n-\t\t\t\t\tfunction.get_node_id (),\n-\t\t\t\t\tfunction.get_locus ());\n+    resolver->get_name_scope ().insert (\n+      function.get_function_name (), function.get_node_id (),\n+      function.get_locus (), false,\n+      [&] (std::string, NodeId, Location locus) -> void {\n+\trust_error_at (function.get_locus (), \"redefined multiple times\");\n+\trust_error_at (locus, \"was defined here\");\n+      });\n     resolver->insert_new_definition (function.get_node_id (),\n \t\t\t\t     Definition{function.get_node_id (),\n \t\t\t\t\t\tfunction.get_node_id ()});"}, {"sha": "fd4972073f22e017b1a06d6f6b128fd9c7504590", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=c4be77f7e0f6b35c019940200f94c7a7b30fff84", "patch": "@@ -110,7 +110,8 @@ Resolver::insert_builtin_types (Rib *r)\n   auto builtins = get_builtin_types ();\n   for (auto &builtin : builtins)\n     r->insert_name (builtin->as_string (), builtin->get_node_id (),\n-\t\t    Linemap::predeclared_location ());\n+\t\t    Linemap::predeclared_location (), false,\n+\t\t    [] (std::string, NodeId, Location) -> void {});\n }\n \n std::vector<AST::Type *> &"}, {"sha": "f22eba72bed917715dfd3472caa3826ec24c089a", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=c4be77f7e0f6b35c019940200f94c7a7b30fff84", "patch": "@@ -37,8 +37,25 @@ class Rib\n \n   ~Rib () {}\n \n-  void insert_name (std::string ident, NodeId id, Location locus)\n+  void insert_name (std::string ident, NodeId id, Location locus, bool shadow,\n+\t\t    std::function<void (std::string, NodeId, Location)> dup_cb)\n   {\n+    auto it = mappings.find (ident);\n+    bool already_exists = it != mappings.end ();\n+    if (already_exists && !shadow)\n+      {\n+\tfor (auto &decl : decls_within_rib)\n+\t  {\n+\t    if (decl.first == it->second)\n+\t      {\n+\t\tdup_cb (ident, it->second, decl.second);\n+\t\treturn;\n+\t      }\n+\t  }\n+\tdup_cb (ident, it->second, locus);\n+\treturn;\n+      }\n+\n     mappings[ident] = id;\n     decls_within_rib.insert (std::pair<NodeId, Location> (id, locus));\n     references[id] = {};\n@@ -117,9 +134,16 @@ class Scope\n   Scope (CrateNum crate_num) : crate_num (crate_num) {}\n   ~Scope () {}\n \n+  void insert (std::string ident, NodeId id, Location locus, bool shadow,\n+\t       std::function<void (std::string, NodeId, Location)> dup_cb)\n+  {\n+    peek ()->insert_name (ident, id, locus, shadow, dup_cb);\n+  }\n+\n   void insert (std::string ident, NodeId id, Location locus)\n   {\n-    peek ()->insert_name (ident, id, locus);\n+    peek ()->insert_name (ident, id, locus, true,\n+\t\t\t  [] (std::string, NodeId, Location) -> void {});\n   }\n \n   bool lookup (std::string ident, NodeId *id)"}, {"sha": "817f48b60eeb4f6b1105c01759b3aa2ffd393d5d", "filename": "gcc/testsuite/rust.test/compilable/name_resolve1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fname_resolve1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fname_resolve1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fname_resolve1.rs?ref=c4be77f7e0f6b35c019940200f94c7a7b30fff84", "patch": "@@ -0,0 +1,23 @@\n+struct Foo(i32, bool);\n+\n+impl Foo {\n+    fn new(a: i32, b: bool) -> Foo {\n+        Foo(a, b)\n+    }\n+\n+    fn test() -> i32 {\n+        test()\n+    }\n+}\n+\n+fn test() -> i32 {\n+    123\n+}\n+\n+fn main() {\n+    let a;\n+    a = Foo::new(1, true);\n+\n+    let b;\n+    b = Foo::test();\n+}"}, {"sha": "9acdf5ff7247b667c0bf073f97a66711a1f63d37", "filename": "gcc/testsuite/rust.test/fail_compilation/redef_error1.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fredef_error1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fredef_error1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fredef_error1.rs?ref=c4be77f7e0f6b35c019940200f94c7a7b30fff84", "patch": "@@ -0,0 +1,8 @@\n+struct S1 {\n+    x: f64,\n+    y: f64,\n+}\n+\n+struct S1(i32, bool);\n+\n+fn main() {}"}, {"sha": "c04d2cf15ecd93ed3bfbd46af911e34a791db10e", "filename": "gcc/testsuite/rust.test/fail_compilation/redef_error2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fredef_error2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fredef_error2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fredef_error2.rs?ref=c4be77f7e0f6b35c019940200f94c7a7b30fff84", "patch": "@@ -0,0 +1,4 @@\n+const TEST: i32 = 2;\n+const TEST: f32 = 3.0;\n+\n+fn main() {}"}, {"sha": "9ffa4e5ed68559bc784781e4cb2482ddf123be92", "filename": "gcc/testsuite/rust.test/fail_compilation/redef_error3.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fredef_error3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fredef_error3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fredef_error3.rs?ref=c4be77f7e0f6b35c019940200f94c7a7b30fff84", "patch": "@@ -0,0 +1,9 @@\n+fn test() -> bool {\n+    true\n+}\n+\n+fn test() -> i32 {\n+    123\n+}\n+\n+fn main() {}"}, {"sha": "5b20e1b2aa2b9720d7cd207dedfc469287c48386", "filename": "gcc/testsuite/rust.test/fail_compilation/redef_error4.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fredef_error4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fredef_error4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fredef_error4.rs?ref=c4be77f7e0f6b35c019940200f94c7a7b30fff84", "patch": "@@ -0,0 +1,27 @@\n+struct Foo(i32, bool);\n+\n+impl Foo {\n+    fn new(a: i32, b: bool) -> Foo {\n+        Foo(a, b)\n+    }\n+\n+    fn test() -> i32 {\n+        test()\n+    }\n+\n+    fn test() -> bool {\n+        true\n+    }\n+}\n+\n+fn test() -> i32 {\n+    123\n+}\n+\n+fn main() {\n+    let a;\n+    a = Foo::new(1, true);\n+\n+    let b;\n+    b = Foo::test();\n+}"}, {"sha": "342a67e323db1264b21eaa8830c3fe357edd8004", "filename": "gcc/testsuite/rust.test/fail_compilation/redef_error5.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fredef_error5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4be77f7e0f6b35c019940200f94c7a7b30fff84/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fredef_error5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fredef_error5.rs?ref=c4be77f7e0f6b35c019940200f94c7a7b30fff84", "patch": "@@ -0,0 +1,8 @@\n+struct Foo(i32, bool);\n+\n+impl Foo {\n+    const TEST: i32 = 123;\n+    const TEST: bool = false;\n+}\n+\n+fn main() {}"}]}