{"sha": "af493865052a8f8a4e33e690717fcaeb30a7e5e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY0OTM4NjUwNTJhOGY4YTRlMzNlNjkwNzE3ZmNhZWIzMGE3ZTVlOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-12T13:04:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-12T13:04:10Z"}, "message": "(type_hash_canon): Clean up obstack usage a bit.\n\nFrom-SVN: r6223", "tree": {"sha": "36fd15dd9ab75ff24603d4210e4cd855dad6e0e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36fd15dd9ab75ff24603d4210e4cd855dad6e0e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af493865052a8f8a4e33e690717fcaeb30a7e5e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af493865052a8f8a4e33e690717fcaeb30a7e5e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af493865052a8f8a4e33e690717fcaeb30a7e5e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af493865052a8f8a4e33e690717fcaeb30a7e5e8/comments", "author": null, "committer": null, "parents": [{"sha": "b0e0a0f9a896325adff6975a7ccf152bb7fc09cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e0a0f9a896325adff6975a7ccf152bb7fc09cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0e0a0f9a896325adff6975a7ccf152bb7fc09cd"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "957ac72aba0eb4c1cf0279132badafa572f8f09e", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af493865052a8f8a4e33e690717fcaeb30a7e5e8/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af493865052a8f8a4e33e690717fcaeb30a7e5e8/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=af493865052a8f8a4e33e690717fcaeb30a7e5e8", "patch": "@@ -2822,18 +2822,16 @@ type_hash_canon (hashcode, type)\n   t1 = type_hash_lookup (hashcode, type);\n   if (t1 != 0)\n     {\n-      struct obstack *o\n-\t= TREE_PERMANENT (type) ? &permanent_obstack : saveable_obstack;\n-      obstack_free (o, type);\n+      obstack_free (TYPE_OBSTACK (type), type);\n #ifdef GATHER_STATISTICS\n       tree_node_counts[(int)t_kind]--;\n       tree_node_sizes[(int)t_kind] -= sizeof (struct tree_type);\n #endif\n       return t1;\n     }\n \n-  /* If this is a new type, record it for later reuse.  */\n-  if (current_obstack == &permanent_obstack)\n+  /* If this is a permanent type, record it for later reuse.  */\n+  if (TREE_PERMANENT (type))\n     type_hash_add (hashcode, type);\n \n   return type;"}]}