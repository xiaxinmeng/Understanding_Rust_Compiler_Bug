{"sha": "0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "node_id": "C_kwDOANBUbNoAKDA3OTBjOGFhY2RmYjRmZDA5NmFhNTgwZGFlMGZlNDkxNzJjNDNhYjI", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-11T01:07:24Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-11-19T03:31:11Z"}, "message": "c++: Implement -Wuninitialized for mem-initializers (redux) [PR19808]\n\n2021 update: Last year I posted a version of this patch:\n<https://gcc.gnu.org/pipermail/gcc-patches/2020-November/559162.html>\nbut it didn't make it in.  The main objection seemed to be that the\npatch tried to do too much, and overlapped with the ME uninitialized\nwarnings.  Since the patch used walk_tree without any data flow info,\nit issued false positives for things like a(0 ? b : 42) and similar.\n\nI'll admit I've been dreading resurrecting this because of the lack\nof clarity about where we should warn about what.  On the other hand,\nI think we really should do something about this.  So I've simplified\nthe original patch as much as it seemed reasonable.  For instance, it\ndoesn't even attempt to handle cases like \"a((b = 42)), c(b)\" -- for\nthese I simply give up for the whole mem-initializer (but who writes\ncode like that, anyway?).  I also give up when a member is initialized\nwith a function call, because we don't know what the call could do.\nSee Wuninitialized-17.C, for which clang emits a false positive but\nwe don't.  I remember having a hard time dealing with initializer lists\nin my previous patch, so now I only handle simple a{b} cases, but no\nmore.  It turned out that this abridged version still warns about 90%\ncases where users would expect a warning.\n\nMore complicated cases are left for the ME, which, for unused inline\nfunctions, will only warn with -fkeep-inline-functions, but so be it.\n(This is bug 21678.)\n\nThis patch implements the long-desired -Wuninitialized warning for\nmember initializer lists, so that the front end can detect bugs like\n\n  struct A {\n    int a;\n    int b;\n    A() : b(1), a(b) { }\n  };\n\nwhere the field 'b' is used uninitialized because the order of member\ninitializers in the member initializer list is irrelevant; what matters\nis the order of declarations in the class definition.\n\nI've implemented this by keeping a hash set holding fields that are not\ninitialized yet, so at first it will be {a, b}, and after initializing\n'a' it will be {b} and so on.  Then I use walk_tree to walk the\ninitializer and if we see that an uninitialized object is used, we warn.\nOf course, when we use the address of the object, we may not warn:\n\n  struct B {\n    int &r;\n    int *p;\n    int a;\n    B() : r(a), p(&a), a(1) { } // ok\n  };\n\nLikewise, don't warn in unevaluated contexts such as sizeof.  Classes\nwithout an explicit initializer may still be initialized by their\ndefault constructors; whether or not something is considered initialized\nis handled in perform_member_init, see member_initialized_p.\n\n\tPR c++/19808\n\tPR c++/96121\n\ngcc/cp/ChangeLog:\n\n\t* init.c (perform_member_init): Remove a forward declaration.\n\tWalk the initializer using find_uninit_fields_r.  New parameter\n\tto track uninitialized fields.  If a member is initialized,\n\tremove it from the hash set.\n\t(perform_target_ctor): Return the initializer.\n\t(struct find_uninit_data): New class.\n\t(find_uninit_fields_r): New function.\n\t(find_uninit_fields): New function.\n\t(emit_mem_initializers): Keep and initialize a set holding fields\n\tthat are not initialized.  When handling delegating constructors,\n\twalk the constructor tree using find_uninit_fields_r.  Also when\n\tinitializing base clases.  Pass uninitialized down to\n\tperform_member_init.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: Update documentation for -Wuninitialized.\n\t* tree.c (stabilize_reference): Set location.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Wuninitialized-14.C: New test.\n\t* g++.dg/warn/Wuninitialized-15.C: New test.\n\t* g++.dg/warn/Wuninitialized-16.C: New test.\n\t* g++.dg/warn/Wuninitialized-17.C: New test.\n\t* g++.dg/warn/Wuninitialized-18.C: New test.\n\t* g++.dg/warn/Wuninitialized-19.C: New test.\n\t* g++.dg/warn/Wuninitialized-20.C: New test.\n\t* g++.dg/warn/Wuninitialized-21.C: New test.\n\t* g++.dg/warn/Wuninitialized-22.C: New test.\n\t* g++.dg/warn/Wuninitialized-23.C: New test.\n\t* g++.dg/warn/Wuninitialized-24.C: New test.\n\t* g++.dg/warn/Wuninitialized-25.C: New test.\n\t* g++.dg/warn/Wuninitialized-26.C: New test.\n\t* g++.dg/warn/Wuninitialized-27.C: New test.\n\t* g++.dg/warn/Wuninitialized-28.C: New test.\n\t* g++.dg/warn/Wuninitialized-29.C: New test.\n\t* g++.dg/warn/Wuninitialized-30.C: New test.", "tree": {"sha": "8501cfb5aa0d0bd0298920acdc1e7dd3a2052187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8501cfb5aa0d0bd0298920acdc1e7dd3a2052187"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3152981f71eef16e50246a94819c39ff1489c70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3152981f71eef16e50246a94819c39ff1489c70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3152981f71eef16e50246a94819c39ff1489c70"}], "stats": {"total": 844, "additions": 831, "deletions": 13}, "files": [{"sha": "975f2eda29dfb13653aa245191deba47c85f1d14", "filename": "gcc/cp/init.c", "status": "modified", "additions": 181, "deletions": 13, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -41,7 +41,6 @@ static tree finish_init_stmts (bool, tree, tree);\n static void construct_virtual_base (tree, tree);\n static bool expand_aggr_init_1 (tree, tree, tree, tree, int, tsubst_flags_t);\n static bool expand_default_init (tree, tree, tree, tree, int, tsubst_flags_t);\n-static void perform_member_init (tree, tree);\n static int member_init_ok_or_else (tree, tree, tree);\n static void expand_virtual_init (tree, tree);\n static tree sort_mem_initializers (tree, tree);\n@@ -525,19 +524,19 @@ build_value_init_noctor (tree type, tsubst_flags_t complain)\n   return build_zero_init (type, NULL_TREE, /*static_storage_p=*/false);\n }\n \n-/* Initialize current class with INIT, a TREE_LIST of\n-   arguments for a target constructor. If TREE_LIST is void_type_node,\n-   an empty initializer list was given.  */\n+/* Initialize current class with INIT, a TREE_LIST of arguments for\n+   a target constructor.  If TREE_LIST is void_type_node, an empty\n+   initializer list was given.  Return the target constructor.  */\n \n-static void\n+static tree\n perform_target_ctor (tree init)\n {\n   tree decl = current_class_ref;\n   tree type = current_class_type;\n \n-  finish_expr_stmt (build_aggr_init (decl, init,\n-\t\t\t\t     LOOKUP_NORMAL|LOOKUP_DELEGATING_CONS,\n-\t\t\t\t     tf_warning_or_error));\n+  init = build_aggr_init (decl, init, LOOKUP_NORMAL|LOOKUP_DELEGATING_CONS,\n+\t\t\t  tf_warning_or_error);\n+  finish_expr_stmt (init);\n   if (type_build_dtor_call (type))\n     {\n       tree expr = build_delete (input_location,\n@@ -550,6 +549,7 @@ perform_target_ctor (tree init)\n \t  && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type))\n \tfinish_eh_cleanup (expr);\n     }\n+  return init;\n }\n \n /* Return the non-static data initializer for FIELD_DECL MEMBER.  */\n@@ -775,12 +775,148 @@ maybe_warn_list_ctor (tree member, tree init)\n \t     \"of the underlying array\", member, begin);\n }\n \n+/* Data structure for find_uninit_fields_r, below.  */\n+\n+struct find_uninit_data {\n+  /* The set tracking the yet-uninitialized members.  */\n+  hash_set<tree> *uninitialized;\n+  /* The data member we are currently initializing.  It can be either\n+     a type (initializing a base class/delegating constructors), or\n+     a COMPONENT_REF.  */\n+  tree member;\n+};\n+\n+/* walk_tree callback that warns about using uninitialized data in\n+   a member-initializer-list.  */\n+\n+static tree\n+find_uninit_fields_r (tree *tp, int *walk_subtrees, void *data)\n+{\n+  find_uninit_data *d = static_cast<find_uninit_data *>(data);\n+  hash_set<tree> *uninitialized = d->uninitialized;\n+  tree init = *tp;\n+  const tree_code code = TREE_CODE (init);\n+\n+  /* No need to look into types or unevaluated operands.  */\n+  if (TYPE_P (init) || unevaluated_p (code))\n+    {\n+      *walk_subtrees = false;\n+      return NULL_TREE;\n+    }\n+\n+  switch (code)\n+    {\n+    /* We'd need data flow info to avoid false positives.  */\n+    case COND_EXPR:\n+    case VEC_COND_EXPR:\n+    case BIND_EXPR:\n+    /* We might see a MODIFY_EXPR in cases like S() : a((b = 42)), c(b) { }\n+       where the initializer for 'a' surreptitiously initializes 'b'.  Let's\n+       not bother with these complicated scenarios in the front end.  */\n+    case MODIFY_EXPR:\n+    /* Don't attempt to handle statement-expressions, either.  */\n+    case STATEMENT_LIST:\n+      uninitialized->empty ();\n+      gcc_fallthrough ();\n+    /* If we're just taking the address of an object, it doesn't matter\n+       whether it's been initialized.  */\n+    case ADDR_EXPR:\n+      *walk_subtrees = false;\n+      return NULL_TREE;\n+    default:\n+      break;\n+    }\n+\n+  /* We'd need data flow info to avoid false positives.  */\n+  if (truth_value_p (code))\n+    goto give_up;\n+  /* Attempt to handle a simple a{b}, but no more.  */\n+  else if (BRACE_ENCLOSED_INITIALIZER_P (init))\n+    {\n+      if (CONSTRUCTOR_NELTS (init) == 1\n+\t  && !BRACE_ENCLOSED_INITIALIZER_P (CONSTRUCTOR_ELT (init, 0)->value))\n+\tinit = CONSTRUCTOR_ELT (init, 0)->value;\n+      else\n+\tgoto give_up;\n+    }\n+  /* Warn about uninitialized 'this'.  */\n+  else if (code == CALL_EXPR)\n+    {\n+      tree fn = get_callee_fndecl (init);\n+      if (fn && DECL_NONSTATIC_MEMBER_FUNCTION_P (fn))\n+\t{\n+\t  tree op = CALL_EXPR_ARG (init, 0);\n+\t  if (TREE_CODE (op) == ADDR_EXPR)\n+\t    op = TREE_OPERAND (op, 0);\n+\t  temp_override<tree> ovr (d->member, DECL_ARGUMENTS (fn));\n+\t  cp_walk_tree_without_duplicates (&op, find_uninit_fields_r, data);\n+\t}\n+      /* Functions (whether static or nonstatic member) may have side effects\n+\t and initialize other members; it's not the front end's job to try to\n+\t figure it out.  But don't give up for constructors: we still want to\n+\t warn when initializing base classes:\n+\n+\t   struct D : public B {\n+\t     int x;\n+\t     D() : B(x) {}\n+\t   };\n+\n+\t so carry on to detect that 'x' is used uninitialized.  */\n+      if (!fn || !DECL_CONSTRUCTOR_P (fn))\n+\tgoto give_up;\n+    }\n+\n+  /* If we find FIELD in the uninitialized set, we warn.  */\n+  if (code == COMPONENT_REF)\n+    {\n+      tree field = TREE_OPERAND (init, 1);\n+      tree type = TYPE_P (d->member) ? d->member : TREE_TYPE (d->member);\n+\n+      /* We're initializing a reference member with itself.  */\n+      if (TYPE_REF_P (type) && cp_tree_equal (d->member, init))\n+\twarning_at (EXPR_LOCATION (init), OPT_Winit_self,\n+\t\t    \"%qD is initialized with itself\", field);\n+      else if (cp_tree_equal (TREE_OPERAND (init, 0), current_class_ref)\n+\t       && uninitialized->contains (field))\n+\t{\n+\t  if (TYPE_REF_P (TREE_TYPE (field)))\n+\t    warning_at (EXPR_LOCATION (init), OPT_Wuninitialized,\n+\t\t\t\"reference %qD is not yet bound to a value when used \"\n+\t\t\t\"here\", field);\n+\t  else if (!INDIRECT_TYPE_P (type) || is_this_parameter (d->member))\n+\t    warning_at (EXPR_LOCATION (init), OPT_Wuninitialized,\n+\t\t\t\"member %qD is used uninitialized\", field);\n+\t  *walk_subtrees = false;\n+\t}\n+    }\n+\n+  return NULL_TREE;\n+\n+give_up:\n+  *walk_subtrees = false;\n+  uninitialized->empty ();\n+  return integer_zero_node;\n+}\n+\n+/* Wrapper around find_uninit_fields_r above.  */\n+\n+static void\n+find_uninit_fields (tree *t, hash_set<tree> *uninitialized, tree member)\n+{\n+  if (!uninitialized->is_empty ())\n+    {\n+      find_uninit_data data = { uninitialized, member };\n+      cp_walk_tree_without_duplicates (t, find_uninit_fields_r, &data);\n+    }\n+}\n+\n /* Initialize MEMBER, a FIELD_DECL, with INIT, a TREE_LIST of\n    arguments.  If TREE_LIST is void_type_node, an empty initializer\n-   list was given; if NULL_TREE no initializer was given.  */\n+   list was given; if NULL_TREE no initializer was given.  UNINITIALIZED\n+   is the hash set that tracks uninitialized fields.  */\n \n static void\n-perform_member_init (tree member, tree init)\n+perform_member_init (tree member, tree init, hash_set<tree> &uninitialized)\n {\n   tree decl;\n   tree type = TREE_TYPE (member);\n@@ -808,7 +944,9 @@ perform_member_init (tree member, tree init)\n   if (decl == error_mark_node)\n     return;\n \n-  if (warn_init_self && init && TREE_CODE (init) == TREE_LIST\n+  if ((warn_init_self || warn_uninitialized)\n+      && init\n+      && TREE_CODE (init) == TREE_LIST\n       && TREE_CHAIN (init) == NULL_TREE)\n     {\n       tree val = TREE_VALUE (init);\n@@ -820,6 +958,8 @@ perform_member_init (tree member, tree init)\n \twarning_at (DECL_SOURCE_LOCATION (current_function_decl),\n \t\t    OPT_Winit_self, \"%qD is initialized with itself\",\n \t\t    member);\n+      else\n+\tfind_uninit_fields (&val, &uninitialized, decl);\n     }\n \n   if (array_of_unknown_bound_p (type))\n@@ -848,6 +988,9 @@ perform_member_init (tree member, tree init)\n \t do aggregate-initialization.  */\n     }\n \n+  /* Assume we are initializing the member.  */\n+  bool member_initialized_p = true;\n+\n   if (init == void_type_node)\n     {\n       /* mem() means value-initialization.  */\n@@ -988,6 +1131,9 @@ perform_member_init (tree member, tree init)\n \t    diagnose_uninitialized_cst_or_ref_member (core_type,\n \t\t\t\t\t\t      /*using_new=*/false,\n \t\t\t\t\t\t      /*complain=*/true);\n+\n+\t  /* We left the member uninitialized.  */\n+\t  member_initialized_p = false;\n \t}\n \n       maybe_warn_list_ctor (member, init);\n@@ -998,6 +1144,11 @@ perform_member_init (tree member, tree init)\n \t\t\t\t\t\ttf_warning_or_error));\n     }\n \n+  if (member_initialized_p && warn_uninitialized)\n+    /* This member is now initialized, remove it from the uninitialized\n+       set.  */\n+    uninitialized.remove (member);\n+\n   if (type_build_dtor_call (type))\n     {\n       tree expr;\n@@ -1311,13 +1462,25 @@ emit_mem_initializers (tree mem_inits)\n   if (!COMPLETE_TYPE_P (current_class_type))\n     return;\n \n+  /* Keep a set holding fields that are not initialized.  */\n+  hash_set<tree> uninitialized;\n+\n+  /* Initially that is all of them.  */\n+  if (warn_uninitialized)\n+    for (tree f = next_initializable_field (TYPE_FIELDS (current_class_type));\n+\t f != NULL_TREE;\n+\t f = next_initializable_field (DECL_CHAIN (f)))\n+      if (!DECL_ARTIFICIAL (f))\n+\tuninitialized.add (f);\n+\n   if (mem_inits\n       && TYPE_P (TREE_PURPOSE (mem_inits))\n       && same_type_p (TREE_PURPOSE (mem_inits), current_class_type))\n     {\n       /* Delegating constructor. */\n       gcc_assert (TREE_CHAIN (mem_inits) == NULL_TREE);\n-      perform_target_ctor (TREE_VALUE (mem_inits));\n+      tree ctor = perform_target_ctor (TREE_VALUE (mem_inits));\n+      find_uninit_fields (&ctor, &uninitialized, current_class_type);\n       return;\n     }\n \n@@ -1378,6 +1541,9 @@ emit_mem_initializers (tree mem_inits)\n \t\t\t      flags,\n                               tf_warning_or_error);\n \t  expand_cleanup_for_base (subobject, NULL_TREE);\n+\t  if (STATEMENT_LIST_TAIL (cur_stmt_list))\n+\t    find_uninit_fields (&STATEMENT_LIST_TAIL (cur_stmt_list)->stmt,\n+\t\t\t\t&uninitialized, BINFO_TYPE (subobject));\n \t}\n       else if (!ABSTRACT_CLASS_TYPE_P (current_class_type))\n \t/* C++14 DR1658 Means we do not have to construct vbases of\n@@ -1405,7 +1571,9 @@ emit_mem_initializers (tree mem_inits)\n       iloc_sentinel ils (EXPR_LOCATION (TREE_TYPE (mem_inits)));\n \n       perform_member_init (TREE_PURPOSE (mem_inits),\n-\t\t\t   TREE_VALUE (mem_inits));\n+\t\t\t   TREE_VALUE (mem_inits),\n+\t\t\t   uninitialized);\n+\n       mem_inits = TREE_CHAIN (mem_inits);\n     }\n }"}, {"sha": "1b02ea091975f2d4e92bae713e702fe6d3654e04", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -6996,6 +6996,18 @@ to compute a value that itself is never used, because such\n computations may be deleted by data flow analysis before the warnings\n are printed.\n \n+In C++, this warning also warns about using uninitialized objects in\n+member-initializer-lists.  For example, GCC warns about @code{b} being\n+uninitialized in the following snippet:\n+\n+@smallexample\n+struct A @{\n+  int a;\n+  int b;\n+  A() : a(b) @{ @}\n+@};\n+@end smallexample\n+\n @item -Wno-invalid-memory-model\n @opindex Winvalid-memory-model\n @opindex Wno-invalid-memory-model"}, {"sha": "cebadf1c269ef214cc986236f59ffa24fe781bde", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-14.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-14.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/19808\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wuninitialized\" }\n+\n+struct A {\n+  int m;\n+  int get() const { return m; }\n+\n+  A() : m{} { }\n+  A(int) { }\n+  A(const A &) { }\n+  A(A *) { }\n+};\n+\n+struct S {\n+  A a, b;\n+\n+  S(int (*)[1]) : a() {}\n+  S(int (*)[2]) : b(a.get()) {}\n+  S(int (*)[3]) : b(a) {}\n+  S(int (*)[4]) : a(&a) {}\n+};\n+\n+struct R {\n+  A a, b;\n+\n+  R(int (*)[1]) : a{} {}\n+  R(int (*)[2]) : b{a.get()} {}\n+  R(int (*)[3]) : b{a} {}\n+  R(int (*)[4]) : a{&a} {}\n+};"}, {"sha": "89e90668c41fc5ad35f50bcd1d7841e268699f7f", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-15.C", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-15.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,118 @@\n+// PR c++/19808\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wuninitialized -Winit-self\" }\n+// Largely copied from clang's test/SemaCXX/uninitialized.cpp.\n+\n+int x;\n+struct U {\n+  U() : b(a) { }\n+  int &a = x;\n+  int &b;\n+};\n+\n+struct T {\n+  T() : a(b), b(a) { } // { dg-warning \"reference .T::b. is not yet bound\" }\n+  int &a, &b;\n+};\n+\n+struct S {\n+  S() : a(a) { } // { dg-warning \".S::a. is initialized with itself\" }\n+  int &a;\n+};\n+\n+struct A {\n+  int a;\n+  int b;\n+  A() { }\n+  A(int (*)[1]) : b(a) { } // { dg-warning \".A::a. is used uninitialized\" }\n+  A(int (*)[2]) : a(b) { } // { dg-warning \".A::b. is used uninitialized\" }\n+};\n+\n+struct D {\n+  int a;\n+  int &b;\n+  int &c = a;\n+  int d = b;\n+  D() : b(a) { }\n+};\n+\n+struct E {\n+  int a;\n+  int get();\n+  static int num();\n+  E() { }\n+  E(int) { }\n+};\n+\n+struct F {\n+  int a;\n+  E e;\n+  int b;\n+  F(int (*)[1]) : a(e.get()) { } // { dg-warning \"member .F::e. is used uninitialized\" }\n+  F(int (*)[2]) : a(e.num()) { }\n+  F(int (*)[3]) : e(a) { } // { dg-warning \"member .F::a. is used uninitialized\" }\n+  F(int (*)[4]) : a(4), e(a) { }\n+  F(int (*)[5]) : e(b) { } // { dg-warning \"member .F::b. is used uninitialized\" }\n+  F(int (*)[6]) : e(b), b(4) { } // { dg-warning \"member .F::b. is used uninitialized\" }\n+};\n+\n+struct G {\n+  G(const A&) { };\n+};\n+\n+struct H {\n+  A a1;\n+  G g;\n+  A a2;\n+  H() : g(a1) { }\n+  // ??? clang++ doesn't warn here\n+  H(int) : g(a2) { } // { dg-warning \"member .H::a2. is used uninitialized\" }\n+};\n+\n+struct I {\n+  I(int *) { }\n+};\n+\n+struct J : I {\n+  int *a;\n+  int *b;\n+  int c;\n+  J() : I((a = new int(5))), b(a), c(*a) { }\n+};\n+\n+struct M { };\n+\n+struct N : public M {\n+  int a;\n+  int b;\n+  N() : b(a) { } // { dg-warning \"member .N::a. is used uninitialized\" }\n+};\n+\n+struct O {\n+  int x = 42;\n+  int get() { return x; }\n+};\n+\n+struct P {\n+  O o;\n+  int x = o.get();\n+  P() : x(o.get()) { }\n+};\n+\n+struct Q {\n+  int a;\n+  int b;\n+  int &c;\n+  Q() :\n+    a(c = 5), // \"reference .Q::c. is not yet bound\" but too complex for the FE\n+    b(c), // \"reference .Q::c. is not yet bound\" but too complex for the FE\n+    c(a) { }\n+};\n+\n+struct R {\n+  int a;\n+  int b;\n+  int c;\n+  int d = a + b + c;\n+  R() : a(c = 5), b(c), c(a) { }\n+};"}, {"sha": "38f587bc0241934b740e560bf9bbbf985c41242e", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-16.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-16.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/19808\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wuninitialized\" }\n+\n+struct S {\n+  int a;\n+  int b;\n+  int c;\n+  S() : a((b = 42)), c(b) { }\n+  S(int) : a(((1, b) = 42)), c(b) { }\n+  S(char) : a(((c++, b) = 42)), c(b) { } // \"field .S::c. is used uninitialized\" but too complex for the FE\n+};"}, {"sha": "80c37aca735fe7351b28e4a084ab91bd1c8b3441", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-17.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-17.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/19808\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wuninitialized -Winit-self\" }\n+\n+int\n+foo (int *p)\n+{\n+  *p = 42;\n+  return 5;\n+}\n+\n+struct S {\n+  int x;\n+  int y;\n+  int z;\n+  S() : x(foo (&y)), z(y) { } // { dg-bogus \"uninitialized\" }\n+};\n+\n+struct T {\n+  int x;\n+  int y;\n+  int z;\n+  T() : x(({ y = 30; 42; })), z(y) { } // { dg-bogus \"uninitialized\" }\n+};\n+\n+struct A {\n+  int x, y, z;\n+  int f () { y = 1; return 2; }\n+  A ():\n+    x (f ()),\n+    z (y) // { dg-bogus \"uninitialized\" }\n+  { }\n+};"}, {"sha": "29ae77a39f5b1f05cf295cd9b67e57bc423ea1bb", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-18.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-18.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/96121\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wuninitialized\" }\n+\n+struct A {\n+  A();\n+  int i;\n+};\n+struct B {\n+  B(A);\n+  int i;\n+};\n+\n+struct composed2 {\n+  B b_;\n+  A a_;\n+  composed2() : b_(a_) {} // { dg-warning \"member .composed2::a_. is used uninitialized\" }\n+};\n+\n+composed2 test() {\n+    return composed2{};\n+}"}, {"sha": "e4d53d4bfbaea75bada7989d0a8c04aa49f6d2ad", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-19.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-19.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,50 @@\n+// PR c++/19808\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wuninitialized\" }\n+// Test we warn when initializing a base class.\n+\n+struct A {\n+  A(int) { }\n+};\n+\n+struct B : public A {\n+  int x;\n+  B() : A(x) { } // { dg-warning \"member .B::x. is used uninitialized\" }\n+};\n+\n+struct C : public A {\n+  int x;\n+  int y;\n+  C() : A(y = 4), x(y) { }\n+};\n+\n+struct D : public A {\n+  int x;\n+  D() : A{x} { } // { dg-warning \"member .D::x. is used uninitialized\" }\n+};\n+\n+struct E : public A {\n+  int x;\n+  int y;\n+  E() : A{y = 4}, x(y) { }\n+};\n+\n+struct F {\n+  F(int&) { }\n+};\n+\n+struct G : F {\n+  int x;\n+  G() : F(x) { }\n+};\n+\n+struct H {\n+  H(int *) { }\n+};\n+\n+struct I : H {\n+  int x;\n+  int arr[2];\n+  I() : H(&x) { }\n+  I(int) : H(arr) { }\n+};"}, {"sha": "867c4da858f5ddacf0ec7d93ce609ff0d19e393d", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-20.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-20.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/96121\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wuninitialized\" }\n+// Test we warn with delegating constructors.\n+\n+struct A {\n+  A(int);\n+  A(int &, int);\n+  A(int (*)[1]) : A(x) { } // { dg-warning \"21:member .A::x. is used uninitialized\" }\n+  A(int (*)[2]) : A(x, x) { } // { dg-warning \"24:member .A::x. is used uninitialized\" }\n+  A(int (*)[3]) : A(x, 0) { }\n+  A(int (*)[4]) : A{x} { } // { dg-warning \"21:member .A::x. is used uninitialized\" }\n+  A(int (*)[5]) : A{x, x} { } // { dg-warning \"24:member .A::x. is used uninitialized\" }\n+  A(int (*)[6]) : A{x, 0} { }\n+  int x;\n+};"}, {"sha": "57ca00ab0429861fd8234f396c31e7694b4aff8a", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-21.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-21.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/19808\n+// { dg-do compile }\n+// { dg-options \"-Wuninitialized\" }\n+\n+struct A {\n+  int a;\n+  int b;\n+  A(int) {}\n+};\n+\n+struct S {\n+  A a;\n+  A a2;\n+  S() :\n+    /* We don't warn here, because we consider partial initialization\n+       as initializing the whole object.  */\n+    a((a2.a = 42)),\n+    a2(a2.a)\n+  { }\n+};"}, {"sha": "89686a032ebd63dc9baf6ababf3240f6e5115716", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-22.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-22.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/19808\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wuninitialized -Winit-self\" }\n+// Test that we don't warn when initializing a reference, unless it's\n+// self-init.\n+\n+struct R {\n+  int &r;\n+};\n+\n+struct S {\n+  R r;\n+  int a;\n+  int &b;\n+  int c;\n+};\n+\n+struct X {\n+  S s;\n+  X() : s{ { s.a }, 1, s.c, 3} { }\n+};\n+\n+struct A {\n+  int &r;\n+  A() : r{r} { } // { dg-warning \".A::r. is initialized with itself\" }\n+};\n+\n+struct B {\n+  int &r;\n+  int a;\n+  B() : r{a} { }\n+};\n+\n+struct C {\n+  R x;\n+  C() : x{x.r} { } // { dg-warning \"member .C::x. is used uninitialized\" }\n+};"}, {"sha": "7cb2a9e4c08231a302a9de57c14ea0f8348c4430", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-23.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-23.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/19808\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wuninitialized\" }\n+// Test that we don't warn in an uninstantiated template.\n+\n+struct A {\n+  int *fn() { return nullptr; }\n+};\n+\n+template<typename T>\n+struct B {\n+  B() : p(a->fn()) { }\n+  A *a;\n+  int *p;\n+};\n+\n+template<typename T>\n+struct C {\n+  C() : p(a->fn()) { } // { dg-warning \"member .C<int>::a. is used uninitialized\" }\n+  A *a;\n+  int *p;\n+};\n+\n+C<int> c;"}, {"sha": "e5dd4295a70bbd20027585726c5d9d1ebaa60d73", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-24.C", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-24.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,89 @@\n+// PR c++/19808\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wuninitialized -Winit-self\" }\n+\n+int fint(int);\n+int fintp(int *);\n+int fintr(int &);\n+int fintcr(const int &);\n+\n+int arr[10];\n+\n+struct S {\n+  int x;\n+  int y;\n+  const int z = 42;\n+  int *p;\n+\n+  S(int (*)[1]) : x(x) { } // { dg-warning \"initialized with itself\" }\n+  S(int (*)[2]) : x(x + x) { } // { dg-warning \"member .S::x. is used uninitialized\" }\n+  S(int (*)[3]) : x(static_cast<int>(y)) { } // { dg-warning \"member .S::y. is used uninitialized\" }\n+  S(int (*)[4]) : x(static_cast<int>(x)) { } // { dg-warning \"member .S::x. is used uninitialized\" }\n+  S(int (*)[5]) : x(fint(x)) { }\n+  S(int (*)[6]) : x(fint(y)) { }\n+\n+  S(int (*)[7]) : x(sizeof(x)) { }\n+  S(int (*)[8]) : x(sizeof(y)) { }\n+  S(int (*)[9]) : p(&x) { }\n+  S(int (*)[10]) : x(fintp(&y)) { }\n+  S(int (*)[11]) : x(fintr(y)) { }\n+  S(int (*)[12]) : x(fintcr(y)) { }\n+  S(int (*)[26]) : x(((void)(__typeof(y)) 1, 1)) { }\n+  S(int (*)[27]) : x(((void)(decltype(y)) 1, 1)) { }\n+  S(int (*)[28]) : x(__alignof__(y)) { }\n+  S(int (*)[29]) : x(noexcept(y)) { }\n+\n+  S(int (*)[13]) : x(0), y(x ? y : y) { }\n+  S(int (*)[14]) : x(0), y(1 + (x ? y : y)) { }\n+  S(int (*)[15]) : x(-y) { } // { dg-warning \"member .S::y. is used uninitialized\" }\n+  S(int (*)[16]) : x(1 << y) { } // { dg-warning \"member .S::y. is used uninitialized\" }\n+  S(int (*)[17]) : x(this->y) { } // { dg-warning \"member .S::y. is used uninitialized\" }\n+  S(int (*)[18]) : x(arr[y]) { } // { dg-warning \"member .S::y. is used uninitialized\" }\n+  S(int (*)[19]) : x(0), y(x ? x : y) { }\n+  S(int (*)[20]) : x(0), y(y ? x : y) { }\n+  S(int (*)[21]) : x(0), y(y ? x : x) { }\n+  S(int (*)[22]) : x(0), y((fint(y), x)) { }\n+  S(int (*)[23]) : x(0), y(x += y) { } // \"member .S::y. is used uninitialized\" but too complex for the FE\n+  S(int (*)[24]) : x(y += 10) { } // \"member .S::y. is used uninitialized\" but too complex for the FE\n+  S(int (*)[25]) : x(y++) { } // { dg-warning \"member .S::y. is used uninitialized\" }\n+};\n+\n+// Same, but { }.\n+struct R {\n+  int x;\n+  int y;\n+  const int z = 42;\n+  int *p;\n+\n+  R(int (*)[1]) : x{x} { } // { dg-warning \"member .R::x. is used uninitialized\" }\n+  R(int (*)[2]) : x{x + x} { } // { dg-warning \"member .R::x. is used uninitialized\" }\n+  R(int (*)[3]) : x{static_cast<int>(y)} { } // { dg-warning \"member .R::y. is used uninitialized\" }\n+  R(int (*)[4]) : x{static_cast<int>(x)} { } // { dg-warning \"member .R::x. is used uninitialized\" }\n+  R(int (*)[5]) : x{fint(x)} { }\n+  R(int (*)[6]) : x{fint(y)} { }\n+\n+  R(int (*)[7]) : x{sizeof(x)} { }\n+  R(int (*)[8]) : x{sizeof(y)} { }\n+  R(int (*)[9]) : p{&x} { }\n+  R(int (*)[10]) : x{fintp(&y)} { }\n+  R(int (*)[11]) : x{fintr(y)} { }\n+  R(int (*)[12]) : x{fintcr(y)} { }\n+  R(int (*)[26]) : x{((void)(__typeof(y)) 1, 1)} { }\n+  R(int (*)[27]) : x{((void)(decltype(y)) 1, 1)} { }\n+  R(int (*)[28]) : x{__alignof__(y)} { }\n+  R(int (*)[29]) : x{noexcept(y)} { }\n+\n+  R(int (*)[13]) : x{0}, y{x ? y : y} { }\n+  R(int (*)[14]) : x{0}, y{1 + (x ? y : y)} { }\n+  R(int (*)[15]) : x{-y} { } // { dg-warning \"member .R::y. is used uninitialized\" }\n+  R(int (*)[16]) : x{1 << y} { } // { dg-warning \"member .R::y. is used uninitialized\" }\n+  R(int (*)[17]) : x{this->y} { } // { dg-warning \"member .R::y. is used uninitialized\" }\n+  R(int (*)[18]) : x{arr[y]} { } // { dg-warning \"member .R::y. is used uninitialized\" }\n+  R(int (*)[19]) : x{0}, y{x ? x : y} { }\n+  R(int (*)[20]) : x{0}, y{y ? x : y} { }\n+  R(int (*)[21]) : x{0}, y{y ? x : x} { }\n+  R(int (*)[22]) : x{0}, y{(fint(y), x)} { }\n+  R(int (*)[23]) : x{0}, y{x += y} { } // \"member .R::y. is used uninitialized\" but too complex for the FE\n+  R(int (*)[24]) : x{y += 10} { } // \"member .R::y. is used uninitialized\" but too complex for the FE\n+  R(int (*)[25]) : x{y++} { } // { dg-warning \"member .R::y. is used uninitialized\" }\n+};"}, {"sha": "fb652f989a493f9bf2f77cd966a41c0b1ab9ad4a", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-25.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-25.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/19808\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wall\" }\n+\n+struct A {\n+  A *a;\n+};\n+\n+struct B : A {\n+  int i;\n+  B() : A{a} {}\n+};"}, {"sha": "a887d12e9f961b193037455e1819009c5fbf6f91", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-26.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-26.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/19808\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wuninitialized\" }\n+// Anonymous union/struct.\n+// ??? The diagnostic should be improved to say 'b' instead of\n+// \"<anonymous>\".\n+\n+struct S {\n+  __extension__ struct {\n+    int a;\n+    int b;\n+  };\n+  S() : a(b) { } // { dg-warning \"is used uninitialized\" }\n+};\n+\n+struct U {\n+  union {\n+    int a;\n+    int b;\n+  };\n+  U() : a(b) { } // { dg-warning \"is used uninitialized\" }\n+};"}, {"sha": "24e6b9b5b48fbca7cc8d226782d04288cc21880b", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-27.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-27.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/19808\n+// { dg-do compile }\n+// { dg-options \"-Wall\" }\n+\n+enum E { red };\n+\n+struct C {\n+  C(int *, unsigned);\n+};\n+\n+template <unsigned U> struct D : C {\n+  D(int, int, E) : C(e, U) {}\n+  int e[2];\n+};\n+\n+void\n+g ()\n+{\n+  D<1>(0, 0, red);\n+}"}, {"sha": "7dbbf8719ec51d31cf10d15da12c837d3231a0af", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-28.C", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-28.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,59 @@\n+// PR c++/19808\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wuninitialized\" }\n+\n+struct S {\n+  int i, j, k, l;\n+  S() : i(j), // { dg-warning \"member .S::j. is used uninitialized\" }\n+\tj(1),\n+\tk(l + 1), // { dg-warning \"member .S::l. is used uninitialized\" }\n+\tl(2) { }\n+};\n+\n+struct A {\n+  int a, b, c;\n+  A() : a(b // { dg-warning \"member .A::b. is used uninitialized\" }\n+\t  + c) { } // { dg-warning \"member .A::c. is used uninitialized\" }\n+};\n+\n+struct B {\n+  int &r;\n+  int *p;\n+  int a;\n+  B() : r(a), p(&a), a(1) { }\n+};\n+\n+struct C {\n+  const int &r1, &r2;\n+  C () : r1(r2), // { dg-warning \"reference .C::r2. is not yet bound to a value when used here\" }\n+\t r2(r1) { }\n+};\n+\n+struct D {\n+  int a = 1;\n+  int b = 2;\n+  D() : a(b + 1), b(a + 1) { } // { dg-warning \"member .D::b. is used uninitialized\" }\n+};\n+\n+struct E {\n+  int a = 1;\n+  E() : a(a + 1) { } // { dg-warning \"member .E::a. is used uninitialized\" }\n+};\n+\n+struct F {\n+  int a = 1;\n+  int b;\n+  F() : b(a + 1) { }\n+};\n+\n+struct bar {\n+  bar() {}\n+  bar(bar&) {}\n+};\n+\n+class foo {\n+  bar first;\n+  bar second;\n+public:\n+  foo() : first(second) {} // { dg-warning \"member .foo::second. is used uninitialized\" }\n+};"}, {"sha": "bc742997441aa386462843d75de44efbd15e0857", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-29.C", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-29.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,59 @@\n+// PR c++/19808\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wuninitialized\" }\n+\n+struct S {\n+  int i, j, k, l;\n+  S() : i{j}, // { dg-warning \"member .S::j. is used uninitialized\" }\n+\tj{1},\n+\tk{l + 1}, // { dg-warning \"member .S::l. is used uninitialized\" }\n+\tl{2} { }\n+};\n+\n+struct A {\n+  int a, b, c;\n+  A() : a{b // { dg-warning \"member .A::b. is used uninitialized\" }\n+\t  + c} { } // { dg-warning \"member .A::c. is used uninitialized\" }\n+};\n+\n+struct B {\n+  int &r;\n+  int *p;\n+  int a;\n+  B() : r{a}, p{&a}, a{1} { }\n+};\n+\n+struct C {\n+  const int &r1, &r2;\n+  C () : r1{r2}, // { dg-warning \"reference .C::r2. is not yet bound to a value when used here\" }\n+\t r2{r1} { }\n+};\n+\n+struct D {\n+  int a = 1;\n+  int b = 2;\n+  D() : a{b + 1}, b{a + 1} { } // { dg-warning \"member .D::b. is used uninitialized\" }\n+};\n+\n+struct E {\n+  int a = 1;\n+  E() : a{a + 1} { } // { dg-warning \"member .E::a. is used uninitialized\" }\n+};\n+\n+struct F {\n+  int a = 1;\n+  int b;\n+  F() : b{a + 1} { }\n+};\n+\n+struct bar {\n+  bar() {}\n+  bar(bar&) {}\n+};\n+\n+class foo {\n+  bar first;\n+  bar second;\n+public:\n+  foo() : first{second} {} // { dg-warning \"member .foo::second. is used uninitialized\" }\n+};"}, {"sha": "ba0f76ed9361bb47371836ee8120b608638fea9a", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-30.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-30.C?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/19808\n+// { dg-do compile }\n+// { dg-options \"-Wuninitialized\" }\n+\n+class diagnostic_event {\n+public:\n+  virtual int get_stack_depth();\n+};\n+struct event_range {\n+  event_range(diagnostic_event &initial_event)\n+      : m_stack_depth(initial_event.get_stack_depth()) {}\n+  int m_stack_depth;\n+};"}, {"sha": "62d9d78671a9ed42e14c15e94a2833173531903c", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0790c8aacdfb4fd096aa580dae0fe49172c43ab2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "patch": "@@ -4781,6 +4781,7 @@ stabilize_reference (tree ref)\n   TREE_READONLY (result) = TREE_READONLY (ref);\n   TREE_SIDE_EFFECTS (result) = TREE_SIDE_EFFECTS (ref);\n   TREE_THIS_VOLATILE (result) = TREE_THIS_VOLATILE (ref);\n+  protected_set_expr_location (result, EXPR_LOCATION (ref));\n \n   return result;\n }"}]}