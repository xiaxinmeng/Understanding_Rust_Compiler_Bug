{"sha": "cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M5YjljMGI2ODIzM2QzOGEyNmY3YWNkNjhjYzVmOWE4ZmM0ZDk5NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-12T07:36:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-12T07:36:02Z"}, "message": "openmp, openacc: Fix up handling of data regions [PR98183]\n\nWhile the data regions (target data and OpenACC counterparts) aren't\nstandalone directives, unlike most other OpenMP/OpenACC constructs\nwe allow (apparently as an extension) exceptions and goto out of\nthe block. During gimplification we place an *end* call into a finally\nblock so that it is reached even on exceptions or goto out etc.).\nDuring omplower pass we then add paired #pragma omp return for them,\nbut due to the exceptions because the region is not SESE we can end up\nwith #pragma omp return appearing only conditionally in the CFG etc.,\nwhich the ompexp pass can't handle.\nFor the ompexp pass, we actually don't care about the end part or about\ntarget data nesting, so we can treat it as standalone directive.\n\n2020-12-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/98183\n\t* omp-low.c (lower_omp_target): Don't add OMP_RETURN for\n\tdata regions.\n\t* omp-expand.c (expand_omp_target): Don't try to remove\n\tOMP_RETURN for data regions.\n\t(build_omp_regions_1, omp_make_gimple_edges): Don't expect\n\tOMP_RETURN for data regions.\n\n\t* gcc.dg/gomp/pr98183.c: New test.\n\t* gcc.dg/goacc/pr98183.c: New test.", "tree": {"sha": "a415eda93e0e270da9be7073af761a5a39809897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a415eda93e0e270da9be7073af761a5a39809897"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54f75d8fb3f54541e37432329581a362e6aab94e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f75d8fb3f54541e37432329581a362e6aab94e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54f75d8fb3f54541e37432329581a362e6aab94e"}], "stats": {"total": 65, "additions": 43, "deletions": 22}, "files": [{"sha": "4baec32e84353a3e8f8f5e7d6858f15c25c4bee9", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994", "patch": "@@ -9260,7 +9260,7 @@ expand_omp_target (struct omp_region *region)\n   gomp_target *entry_stmt;\n   gimple *stmt;\n   edge e;\n-  bool offloaded, data_region;\n+  bool offloaded;\n   int target_kind;\n \n   entry_stmt = as_a <gomp_target *> (last_stmt (region->entry));\n@@ -9282,13 +9282,10 @@ expand_omp_target (struct omp_region *region)\n     case GF_OMP_TARGET_KIND_OACC_DECLARE:\n     case GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_PARALLELIZED:\n     case GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_GANG_SINGLE:\n-      data_region = false;\n-      break;\n     case GF_OMP_TARGET_KIND_DATA:\n     case GF_OMP_TARGET_KIND_OACC_DATA:\n     case GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n     case GF_OMP_TARGET_KIND_OACC_DATA_KERNELS:\n-      data_region = true;\n       break;\n     default:\n       gcc_unreachable ();\n@@ -9855,13 +9852,6 @@ expand_omp_target (struct omp_region *region)\n       gcc_assert (g && gimple_code (g) == GIMPLE_OMP_TARGET);\n       gsi_remove (&gsi, true);\n     }\n-  if (data_region && region->exit)\n-    {\n-      gsi = gsi_last_nondebug_bb (region->exit);\n-      g = gsi_stmt (gsi);\n-      gcc_assert (g && gimple_code (g) == GIMPLE_OMP_RETURN);\n-      gsi_remove (&gsi, true);\n-    }\n }\n \n /* Expand the parallel region tree rooted at REGION.  Expansion\n@@ -10026,19 +10016,19 @@ build_omp_regions_1 (basic_block bb, struct omp_region *parent,\n \t      switch (gimple_omp_target_kind (stmt))\n \t\t{\n \t\tcase GF_OMP_TARGET_KIND_REGION:\n-\t\tcase GF_OMP_TARGET_KIND_DATA:\n \t\tcase GF_OMP_TARGET_KIND_OACC_PARALLEL:\n \t\tcase GF_OMP_TARGET_KIND_OACC_KERNELS:\n \t\tcase GF_OMP_TARGET_KIND_OACC_SERIAL:\n-\t\tcase GF_OMP_TARGET_KIND_OACC_DATA:\n-\t\tcase GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n \t\tcase GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_PARALLELIZED:\n \t\tcase GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_GANG_SINGLE:\n-\t\tcase GF_OMP_TARGET_KIND_OACC_DATA_KERNELS:\n \t\t  break;\n \t\tcase GF_OMP_TARGET_KIND_UPDATE:\n \t\tcase GF_OMP_TARGET_KIND_ENTER_DATA:\n \t\tcase GF_OMP_TARGET_KIND_EXIT_DATA:\n+\t\tcase GF_OMP_TARGET_KIND_DATA:\n+\t\tcase GF_OMP_TARGET_KIND_OACC_DATA:\n+\t\tcase GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n+\t\tcase GF_OMP_TARGET_KIND_OACC_DATA_KERNELS:\n \t\tcase GF_OMP_TARGET_KIND_OACC_UPDATE:\n \t\tcase GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n \t\tcase GF_OMP_TARGET_KIND_OACC_DECLARE:\n@@ -10283,19 +10273,19 @@ omp_make_gimple_edges (basic_block bb, struct omp_region **region,\n       switch (gimple_omp_target_kind (last))\n \t{\n \tcase GF_OMP_TARGET_KIND_REGION:\n-\tcase GF_OMP_TARGET_KIND_DATA:\n \tcase GF_OMP_TARGET_KIND_OACC_PARALLEL:\n \tcase GF_OMP_TARGET_KIND_OACC_KERNELS:\n \tcase GF_OMP_TARGET_KIND_OACC_SERIAL:\n-\tcase GF_OMP_TARGET_KIND_OACC_DATA:\n-\tcase GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n \tcase GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_PARALLELIZED:\n \tcase GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_GANG_SINGLE:\n-\tcase GF_OMP_TARGET_KIND_OACC_DATA_KERNELS:\n \t  break;\n \tcase GF_OMP_TARGET_KIND_UPDATE:\n \tcase GF_OMP_TARGET_KIND_ENTER_DATA:\n \tcase GF_OMP_TARGET_KIND_EXIT_DATA:\n+\tcase GF_OMP_TARGET_KIND_DATA:\n+\tcase GF_OMP_TARGET_KIND_OACC_DATA:\n+\tcase GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n+\tcase GF_OMP_TARGET_KIND_OACC_DATA_KERNELS:\n \tcase GF_OMP_TARGET_KIND_OACC_UPDATE:\n \tcase GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n \tcase GF_OMP_TARGET_KIND_OACC_DECLARE:"}, {"sha": "91a5e3d143160c21ee2f4aa2b5f5a6a4683c31aa", "filename": "gcc/omp-low.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994", "patch": "@@ -12979,9 +12979,10 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n       gimple_seq_add_seq (&new_body, join_seq);\n \n       if (offloaded)\n-\tnew_body = maybe_catch_exception (new_body);\n-\n-      gimple_seq_add_stmt (&new_body, gimple_build_omp_return (false));\n+\t{\n+\t  new_body = maybe_catch_exception (new_body);\n+\t  gimple_seq_add_stmt (&new_body, gimple_build_omp_return (false));\n+\t}\n       gimple_omp_set_body (stmt, new_body);\n     }\n "}, {"sha": "b0410117c84fef15c2a533b87d28fd97bd8ad17c", "filename": "gcc/testsuite/gcc.dg/goacc/pr98183.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fpr98183.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fpr98183.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fpr98183.c?ref=cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994", "patch": "@@ -0,0 +1,15 @@\n+/* PR middle-end/98183 */\n+/* { dg-additional-options \"-fexceptions -O0\" } */\n+\n+void bar (void);\n+int x, y;\n+\n+void\n+foo (void)\n+{\n+#pragma acc data copyout(x)\n+  {\n+#pragma acc data copyout(y)\n+    bar ();\n+  }\n+}"}, {"sha": "dd114997920491e0eb8551df10f9865d42048261", "filename": "gcc/testsuite/gcc.dg/gomp/pr98183.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr98183.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr98183.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr98183.c?ref=cc9b9c0b68233d38a26f7acd68cc5f9a8fc4d994", "patch": "@@ -0,0 +1,15 @@\n+/* PR middle-end/98183 */\n+/* { dg-additional-options \"-fexceptions -O0\" } */\n+\n+void bar (void);\n+int x, y;\n+\n+void\n+foo (void)\n+{\n+#pragma omp target data map(tofrom: x)\n+  {\n+#pragma omp target data map(tofrom: y)\n+    bar ();\n+  }\n+}"}]}