{"sha": "fa2e34e8f267ce9944c3ce053b5785368ecbd89f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEyZTM0ZThmMjY3Y2U5OTQ0YzNjZTA1M2I1Nzg1MzY4ZWNiZDg5Zg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-02-22T22:17:33Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-02-22T22:17:33Z"}, "message": "* g++.old-deja/g++.abi/ptrmem.C: New test.\n\nFrom-SVN: r32107", "tree": {"sha": "11ffb949bd5abe52fc8b7cae5d75b8f8f9c9fcb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11ffb949bd5abe52fc8b7cae5d75b8f8f9c9fcb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa2e34e8f267ce9944c3ce053b5785368ecbd89f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2e34e8f267ce9944c3ce053b5785368ecbd89f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa2e34e8f267ce9944c3ce053b5785368ecbd89f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2e34e8f267ce9944c3ce053b5785368ecbd89f/comments", "author": null, "committer": null, "parents": [{"sha": "cfbad224f649250458ea53381c8bcb9064b21d13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfbad224f649250458ea53381c8bcb9064b21d13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfbad224f649250458ea53381c8bcb9064b21d13"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "d5dd4272eb2f4e697d88f72f6fb2f49c6be2d677", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2e34e8f267ce9944c3ce053b5785368ecbd89f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2e34e8f267ce9944c3ce053b5785368ecbd89f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa2e34e8f267ce9944c3ce053b5785368ecbd89f", "patch": "@@ -1,3 +1,7 @@\n+2000-02-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.old-deja/g++.abi/ptrmem.C: New test.\n+\n 2000-02-19  Richard Henderson  <rth@cygnus.com>\n \n \t* gcc.c-torture/compile/init-3.c: New."}, {"sha": "8bf53fd72bf50609aea567bf1082dd9550c7a46a", "filename": "gcc/testsuite/g++.old-deja/g++.abi/ptrmem.C", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2e34e8f267ce9944c3ce053b5785368ecbd89f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrmem.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2e34e8f267ce9944c3ce053b5785368ecbd89f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrmem.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrmem.C?ref=fa2e34e8f267ce9944c3ce053b5785368ecbd89f", "patch": "@@ -0,0 +1,103 @@\n+// Special g++ Options: -fno-strict-aliasing\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+#if defined (__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100\n+\n+// Check that pointers-to-member functions are represented correctly.\n+\n+#include <cstddef>\n+\n+struct S\n+{\n+  int i;\n+};\n+\n+// Because S does not have a VPTR, it will not be a primary base of T,\n+// and will therefore end up at a non-zero offset.\n+\n+struct T : public S \n+{\n+  void f () {}\n+  virtual void g () {}\n+  virtual void h () {}\n+};\n+\n+// Provide access to the raw function pointers.  This is\n+// mangling-dependent.\n+\n+extern \"C\" void f__1T ();\n+extern \"C\" void g__1T ();\n+extern \"C\" void h__1T ();\n+\n+// This structure is a C representation of a pointer-to-member.\n+\n+struct ptrmemfunc \n+{\n+  void (*ptr) ();\n+  ptrdiff_t adj;\n+};\n+\n+typedef void (S::*sp)();\n+typedef void (T::*tp)();\n+\n+int\n+main ()\n+{\n+  T t;\n+  sp x;\n+  tp y;\n+  ptrmemfunc *xp = (ptrmemfunc *) &x;\n+  ptrmemfunc *yp = (ptrmemfunc *) &y;\n+  ptrdiff_t delta = ((char *) &t) - ((char*) (S*) (&t));\n+   \n+  // Pointers-to-members should have the same size and alignment as\n+  // the PTRMEMFUNC type.\n+  if (sizeof (sp) != sizeof (ptrmemfunc))\n+    return 1;\n+  if (__alignof__ (sp) != __alignof__ (ptrmemfunc))\n+    return 2;\n+  \n+  // The NULL pointer-to-member should have a NULL first PTR field.\n+  x = 0;\n+  if (xp->ptr != 0)\n+    return 3;\n+  y = x;\n+  if (yp->ptr != 0)\n+    return 4;\n+  \n+  // A non-virtual function should have a pointer to the function.\n+  // There should be no adjustment for the `T' version, and an\n+  // appropriate adjustment for the `S' version.\n+  y = &T::f;\n+  if (yp->ptr != &f__1T)\n+    return 5;\n+  if (yp->adj != 0)\n+    return 6;\n+  x = (sp) y;\n+  if (xp->ptr != &f__1T)\n+    return 7;\n+  if (xp->adj != delta)\n+    return 8;\n+\n+  // For a virtual function, we should see twice the vtable index,\n+  // plus one.  `T::h' is in the third slot: there's the RTTI entry,\n+  // then the two virtual functions.\n+  y = &T::h;\n+  if ((ptrdiff_t) yp->ptr != 7)\n+    return 9;\n+  if (yp->adj != 0)\n+    return 10;\n+  x = (sp) y;\n+  if ((ptrdiff_t) xp->ptr != 7)\n+    return 11;\n+  if (xp->adj != delta)\n+    return 12;\n+}\n+\n+#else /* !(defined (__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100) */\n+\n+int main () \n+{\n+}\n+\n+#endif /* !(defined (__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100) */"}]}