{"sha": "dc477ffb4aba21e9cf47de22a4df6f2b23849505", "node_id": "C_kwDOANBUbNoAKGRjNDc3ZmZiNGFiYTIxZTljZjQ3ZGUyMmE0ZGY2ZjJiMjM4NDk1MDU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-21T08:13:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-21T11:06:18Z"}, "message": "tree-optimization/106378 - DSE of LEN_STORE and MASK_STORE\n\nThe following enhances DSE to handle LEN_STORE (optimally) and\nMASK_STORE (conservatively).\n\n\tPR tree-optimization/106378\n\t* tree-ssa-dse.cc (initialize_ao_ref_for_dse): Handle\n\tLEN_STORE, add mode to initialize a may-def and handle\n\tMASK_STORE that way.\n\t(dse_optimize_stmt): Query may-defs.  Handle internal\n\tfunctions LEN_STORE and MASK_STORE similar to how\n\twe handle memory builtins but without byte tracking.", "tree": {"sha": "86a63aa75a7d66e4b0efc4a19f5f2630a73b182e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86a63aa75a7d66e4b0efc4a19f5f2630a73b182e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc477ffb4aba21e9cf47de22a4df6f2b23849505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc477ffb4aba21e9cf47de22a4df6f2b23849505", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc477ffb4aba21e9cf47de22a4df6f2b23849505", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc477ffb4aba21e9cf47de22a4df6f2b23849505/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd9837bc3ca1344c32aef7ba9f8fa1785063132e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9837bc3ca1344c32aef7ba9f8fa1785063132e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd9837bc3ca1344c32aef7ba9f8fa1785063132e"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "34cfd1a8802164318b88eb62026309e8ec2706b8", "filename": "gcc/tree-ssa-dse.cc", "status": "modified", "additions": 51, "deletions": 4, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc477ffb4aba21e9cf47de22a4df6f2b23849505/gcc%2Ftree-ssa-dse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc477ffb4aba21e9cf47de22a4df6f2b23849505/gcc%2Ftree-ssa-dse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.cc?ref=dc477ffb4aba21e9cf47de22a4df6f2b23849505", "patch": "@@ -93,15 +93,17 @@ static bitmap need_eh_cleanup;\n static bitmap need_ab_cleanup;\n \n /* STMT is a statement that may write into memory.  Analyze it and\n-   initialize WRITE to describe how STMT affects memory.\n+   initialize WRITE to describe how STMT affects memory.  When\n+   MAY_DEF_OK is true then the function initializes WRITE to what\n+   the stmt may define.\n \n    Return TRUE if the statement was analyzed, FALSE otherwise.\n \n    It is always safe to return FALSE.  But typically better optimziation\n    can be achieved by analyzing more statements.  */\n \n static bool\n-initialize_ao_ref_for_dse (gimple *stmt, ao_ref *write)\n+initialize_ao_ref_for_dse (gimple *stmt, ao_ref *write, bool may_def_ok = false)\n {\n   /* It's advantageous to handle certain mem* functions.  */\n   if (gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n@@ -146,6 +148,32 @@ initialize_ao_ref_for_dse (gimple *stmt, ao_ref *write)\n \t  break;\n \t}\n     }\n+  else if (is_gimple_call (stmt)\n+\t   && gimple_call_internal_p (stmt))\n+    {\n+      switch (gimple_call_internal_fn (stmt))\n+\t{\n+\tcase IFN_LEN_STORE:\n+\t  ao_ref_init_from_ptr_and_size\n+\t      (write, gimple_call_arg (stmt, 0),\n+\t       int_const_binop (MINUS_EXPR,\n+\t\t\t\tgimple_call_arg (stmt, 2),\n+\t\t\t\tgimple_call_arg (stmt, 4)));\n+\t  return true;\n+\tcase IFN_MASK_STORE:\n+\t  /* We cannot initialize a must-def ao_ref (in all cases) but we\n+\t     can provide a may-def variant.  */\n+\t  if (may_def_ok)\n+\t    {\n+\t      ao_ref_init_from_ptr_and_size\n+\t\t  (write, gimple_call_arg (stmt, 0),\n+\t\t   TYPE_SIZE_UNIT (TREE_TYPE (gimple_call_arg (stmt, 2))));\n+\t      return true;\n+\t    }\n+\t  break;\n+\tdefault:;\n+\t}\n+    }\n   else if (tree lhs = gimple_get_lhs (stmt))\n     {\n       if (TREE_CODE (lhs) != SSA_NAME)\n@@ -1328,8 +1356,10 @@ dse_optimize_stmt (function *fun, gimple_stmt_iterator *gsi, sbitmap live_bytes)\n \n   ao_ref ref;\n   /* If this is not a store we can still remove dead call using\n-     modref summary.  */\n-  if (!initialize_ao_ref_for_dse (stmt, &ref))\n+     modref summary.  Note we specifically allow ref to be initialized\n+     to a conservative may-def since we are looking for followup stores\n+     to kill all of it.  */\n+  if (!initialize_ao_ref_for_dse (stmt, &ref, true))\n     {\n       dse_optimize_call (gsi, live_bytes);\n       return;\n@@ -1398,6 +1428,23 @@ dse_optimize_stmt (function *fun, gimple_stmt_iterator *gsi, sbitmap live_bytes)\n \t  return;\n \t}\n     }\n+  else if (is_gimple_call (stmt)\n+\t   && gimple_call_internal_p (stmt))\n+    {\n+      switch (gimple_call_internal_fn (stmt))\n+\t{\n+\tcase IFN_LEN_STORE:\n+\tcase IFN_MASK_STORE:\n+\t  {\n+\t    enum dse_store_status store_status;\n+\t    store_status = dse_classify_store (&ref, stmt, false, live_bytes);\n+\t    if (store_status == DSE_STORE_DEAD)\n+\t      delete_dead_or_redundant_call (gsi, \"dead\");\n+\t    return;\n+\t  }\n+\tdefault:;\n+\t}\n+    }\n \n   bool by_clobber_p = false;\n "}]}