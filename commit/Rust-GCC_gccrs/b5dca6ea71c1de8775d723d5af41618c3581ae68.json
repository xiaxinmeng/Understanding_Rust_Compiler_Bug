{"sha": "b5dca6ea71c1de8775d723d5af41618c3581ae68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVkY2E2ZWE3MWMxZGU4Nzc1ZDcyM2Q1YWY0MTYxOGMzNTgxYWU2OA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-12-18T20:18:43Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-12-18T20:18:43Z"}, "message": "re PR fortran/46974 (ICE with TRANSFER using a C_PTR entity)\n\n2010-12-18  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/46974\n        * target-memory.c (gfc_interpret_derived): Handle\n        * C_PTR/C_FUNPTR.\n        * trans-expr.c (gfc_trans_structure_assign): Ditto.\n        (gfc_conv_expr): Avoid crashes using non-C_NULL_(FUN)PTR const expr.\n\n2010-12-18  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/46974\n        * gfortran.dg/c_ptr_tests_16.f90: New.\n\nFrom-SVN: r168031", "tree": {"sha": "371351ec73c66d702a7b86022c042d333f6bfcce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/371351ec73c66d702a7b86022c042d333f6bfcce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5dca6ea71c1de8775d723d5af41618c3581ae68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5dca6ea71c1de8775d723d5af41618c3581ae68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5dca6ea71c1de8775d723d5af41618c3581ae68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5dca6ea71c1de8775d723d5af41618c3581ae68/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a93bb2bc65a048efadf16df300dbab2d4adfc8ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93bb2bc65a048efadf16df300dbab2d4adfc8ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a93bb2bc65a048efadf16df300dbab2d4adfc8ae"}], "stats": {"total": 129, "additions": 112, "deletions": 17}, "files": [{"sha": "3c7b4f4d08cdd823d1bd3c2325500ee13aa9c78f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5dca6ea71c1de8775d723d5af41618c3581ae68/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5dca6ea71c1de8775d723d5af41618c3581ae68/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b5dca6ea71c1de8775d723d5af41618c3581ae68", "patch": "@@ -1,3 +1,10 @@\n+2010-12-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/46974\n+\t* target-memory.c (gfc_interpret_derived): Handle C_PTR/C_FUNPTR.\n+\t* trans-expr.c (gfc_trans_structure_assign): Ditto.\n+\t(gfc_conv_expr): Avoid crashes using non-C_NULL_(FUN)PTR const expr.\n+\n 2010-12-17  Janus Weil  <janus@gcc.gnu.org>\n \t    Tobias Burnus <burnus@gcc.gnu.org>\n "}, {"sha": "0a09f5a5e37683478742c5c650ecbeb769017a06", "filename": "gcc/fortran/target-memory.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5dca6ea71c1de8775d723d5af41618c3581ae68/gcc%2Ffortran%2Ftarget-memory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5dca6ea71c1de8775d723d5af41618c3581ae68/gcc%2Ffortran%2Ftarget-memory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.c?ref=b5dca6ea71c1de8775d723d5af41618c3581ae68", "patch": "@@ -442,9 +442,27 @@ gfc_interpret_derived (unsigned char *buffer, size_t buffer_size, gfc_expr *resu\n   /* The attributes of the derived type need to be bolted to the floor.  */\n   result->expr_type = EXPR_STRUCTURE;\n \n-  type = gfc_typenode_for_spec (&result->ts);\n   cmp = result->ts.u.derived->components;\n \n+  if (result->ts.u.derived->from_intmod == INTMOD_ISO_C_BINDING\n+      && (result->ts.u.derived->intmod_sym_id == ISOCBINDING_PTR\n+\t  || result->ts.u.derived->intmod_sym_id == ISOCBINDING_FUNPTR))\n+    {\n+      gfc_constructor *c;\n+      gfc_expr *e;\n+      /* Needed as gfc_typenode_for_spec as gfc_typenode_for_spec\n+\t sets this to BT_INTEGER.  */\n+      result->ts.type = BT_DERIVED;\n+      e = gfc_get_constant_expr (cmp->ts.type, cmp->ts.kind, &result->where); \n+      c = gfc_constructor_append_expr (&result->value.constructor, e, NULL);\n+      c->n.component = cmp;\n+      gfc_target_interpret_expr (buffer, buffer_size, e);\n+      e->ts.is_iso_c = 1;\n+      return int_size_in_bytes (ptr_type_node);\n+    }\n+\n+  type = gfc_typenode_for_spec (&result->ts);\n+\n   /* Run through the derived type components.  */\n   for (;cmp; cmp = cmp->next)\n     {\n@@ -483,6 +501,7 @@ gfc_interpret_derived (unsigned char *buffer, size_t buffer_size, gfc_expr *resu\n \t sizes of the components are multiples of BITS_PER_UNIT,\n \t i.e. there are, e.g., no bit fields.  */\n \n+      gcc_assert (cmp->backend_decl);\n       ptr = TREE_INT_CST_LOW (DECL_FIELD_BIT_OFFSET (cmp->backend_decl));\n       gcc_assert (ptr % 8 == 0);\n       ptr = ptr/8 + TREE_INT_CST_LOW (DECL_FIELD_OFFSET (cmp->backend_decl));"}, {"sha": "3e994aa82c01bb15f471c6d921ec1604feb2076e", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5dca6ea71c1de8775d723d5af41618c3581ae68/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5dca6ea71c1de8775d723d5af41618c3581ae68/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=b5dca6ea71c1de8775d723d5af41618c3581ae68", "patch": "@@ -4514,27 +4514,31 @@ gfc_trans_structure_assign (tree dest, gfc_expr * expr)\n \n   gfc_start_block (&block);\n   cm = expr->ts.u.derived->components;\n+\n+  if (expr->ts.u.derived->from_intmod == INTMOD_ISO_C_BINDING\n+      && (expr->ts.u.derived->intmod_sym_id == ISOCBINDING_PTR\n+          || expr->ts.u.derived->intmod_sym_id == ISOCBINDING_FUNPTR))\n+    {\n+      gfc_se se, lse;\n+\n+      gcc_assert (cm->backend_decl == NULL);\n+      gfc_init_se (&se, NULL);\n+      gfc_init_se (&lse, NULL);\n+      gfc_conv_expr (&se, gfc_constructor_first (expr->value.constructor)->expr);\n+      lse.expr = dest;\n+      gfc_add_modify (&block, lse.expr,\n+\t\t      fold_convert (TREE_TYPE (lse.expr), se.expr));\n+\n+      return gfc_finish_block (&block);\n+    } \n+\n   for (c = gfc_constructor_first (expr->value.constructor);\n        c; c = gfc_constructor_next (c), cm = cm->next)\n     {\n       /* Skip absent members in default initializers.  */\n       if (!c->expr)\n \tcontinue;\n \n-      /* Handle c_null_(fun)ptr.  */\n-      if (c && c->expr && c->expr->ts.is_iso_c)\n-\t{\n-\t  field = cm->backend_decl;\n-\t  tmp = fold_build3_loc (input_location, COMPONENT_REF,\n-\t\t\t\t TREE_TYPE (field),\n-\t\t\t\t dest, field, NULL_TREE);\n-\t  tmp = fold_build2_loc (input_location, MODIFY_EXPR, TREE_TYPE (tmp),\n-\t\t\t\t tmp, fold_convert (TREE_TYPE (tmp),\n-\t\t\t\t\t\t    null_pointer_node));\n-\t  gfc_add_expr_to_block (&block, tmp);\n-\t  continue;\n-\t}\n-\n       field = cm->backend_decl;\n       tmp = fold_build3_loc (input_location, COMPONENT_REF, TREE_TYPE (field),\n \t\t\t     dest, field, NULL_TREE);\n@@ -4664,8 +4668,10 @@ gfc_conv_expr (gfc_se * se, gfc_expr * expr)\n   if (expr->ts.type == BT_DERIVED && expr->ts.u.derived\n       && expr->ts.u.derived->attr.is_iso_c)\n     {\n-      if (expr->symtree->n.sym->intmod_sym_id == ISOCBINDING_NULL_PTR\n-          || expr->symtree->n.sym->intmod_sym_id == ISOCBINDING_NULL_FUNPTR)\n+      if (expr->expr_type == EXPR_VARIABLE\n+\t  && (expr->symtree->n.sym->intmod_sym_id == ISOCBINDING_NULL_PTR\n+\t      || expr->symtree->n.sym->intmod_sym_id\n+\t\t == ISOCBINDING_NULL_FUNPTR))\n         {\n \t  /* Set expr_type to EXPR_NULL, which will result in\n \t     null_pointer_node being used below.  */"}, {"sha": "4209e44cb99e3256b8250d5029c8b068154bbc7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5dca6ea71c1de8775d723d5af41618c3581ae68/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5dca6ea71c1de8775d723d5af41618c3581ae68/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5dca6ea71c1de8775d723d5af41618c3581ae68", "patch": "@@ -1,3 +1,8 @@\n+2010-12-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/46974\n+\t* gfortran.dg/c_ptr_tests_16.f90: New.\n+\n 2010-12-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/46985"}, {"sha": "3a51d28a6842ab75ddce25744efc59d681d5da3b", "filename": "gcc/testsuite/gfortran.dg/c_ptr_tests_16.f90", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5dca6ea71c1de8775d723d5af41618c3581ae68/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5dca6ea71c1de8775d723d5af41618c3581ae68/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_16.f90?ref=b5dca6ea71c1de8775d723d5af41618c3581ae68", "patch": "@@ -0,0 +1,58 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-optimized -O\" }\n+!\n+! PR fortran/46974\n+\n+program test\n+  use ISO_C_BINDING\n+  implicit none\n+  type(c_ptr) :: m\n+  integer(c_intptr_t) :: a\n+  integer(transfer(transfer(4_c_intptr_t, c_null_ptr),1_c_intptr_t)) :: b\n+  a = transfer (transfer(\"ABCE\", m), 1_c_intptr_t)\n+  if (1162035777 /= a) call i_do_not_exist()\n+end program test\n+\n+! Examples contributed by Steve Kargl and James Van Buskirk\n+\n+subroutine bug1\n+   use ISO_C_BINDING\n+   implicit none\n+   type(c_ptr) :: m\n+   type mytype\n+     integer a, b, c\n+   end type mytype\n+   type(mytype) x\n+   print *, transfer(32512, x)  ! Works.\n+   print *, transfer(32512, m)  ! Caused ICE.\n+end subroutine bug1 \n+\n+subroutine bug6\n+   use ISO_C_BINDING\n+   implicit none\n+   interface\n+      function fun()\n+         use ISO_C_BINDING\n+         implicit none\n+         type(C_FUNPTR) fun\n+      end function fun\n+   end interface\n+   type(C_PTR) array(2)\n+   type(C_FUNPTR) result\n+   integer(C_INTPTR_T), parameter :: const(*) = [32512,32520]\n+\n+   result = fun()\n+   array = transfer([integer(C_INTPTR_T)::32512,32520],array)\n+!   write(*,*) transfer(result,const)\n+!   write(*,*) transfer(array,const)\n+end subroutine bug6\n+\n+function fun()\n+   use ISO_C_BINDING\n+   implicit none\n+   type(C_FUNPTR) fun\n+   fun = transfer(32512_C_INTPTR_T,fun)\n+end function fun \n+\n+! { dg-final { scan-tree-dump-times \"i_do_not_exist\" 0 \"optimized\" } }\n+! { dg-final { cleanup-tree-dump \"optimized\" } }"}]}