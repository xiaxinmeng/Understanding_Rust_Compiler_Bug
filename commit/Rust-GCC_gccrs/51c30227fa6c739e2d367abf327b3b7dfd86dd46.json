{"sha": "51c30227fa6c739e2d367abf327b3b7dfd86dd46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFjMzAyMjdmYTZjNzM5ZTJkMzY3YWJmMzI3YjNiN2RmZDg2ZGQ0Ng==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-06-07T21:23:04Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-07-01T15:11:20Z"}, "message": "x86: Add vec_duplicate<mode> expander\n\nAdd vec_duplicate<mode> expander for SSE2 if we can move from GPR to SSE\nregister directly.\n\n\t* config/i386/i386-expand.c (ix86_expand_vector_init_duplicate):\n\tMake it global.\n\t* config/i386/i386-protos.h (ix86_expand_vector_init_duplicate):\n\tNew prototype.\n\t* config/i386/sse.md (INT_BROADCAST_MODE): New mode iterator.\n\t(vec_duplicate<mode>): New expander.", "tree": {"sha": "20d2f26111cbf581afa3244b0744393733eb8fe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20d2f26111cbf581afa3244b0744393733eb8fe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51c30227fa6c739e2d367abf327b3b7dfd86dd46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c30227fa6c739e2d367abf327b3b7dfd86dd46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51c30227fa6c739e2d367abf327b3b7dfd86dd46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c30227fa6c739e2d367abf327b3b7dfd86dd46/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "5c9170e3a1d56cdc8c642e00947e71ed4afdb781", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51c30227fa6c739e2d367abf327b3b7dfd86dd46/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51c30227fa6c739e2d367abf327b3b7dfd86dd46/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=51c30227fa6c739e2d367abf327b3b7dfd86dd46", "patch": "@@ -93,9 +93,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"i386-builtins.h\"\n #include \"i386-expand.h\"\n \n-static bool ix86_expand_vector_init_duplicate (bool, machine_mode, rtx,\n-\t\t\t\t\t       rtx);\n-\n /* Split one or more double-mode RTL references into pairs of half-mode\n    references.  The RTL can be REG, offsettable MEM, integer constant, or\n    CONST_DOUBLE.  \"operands\" is a pointer to an array of double-mode RTLs to\n@@ -13909,7 +13906,7 @@ static bool expand_vec_perm_1 (struct expand_vec_perm_d *d);\n /* A subroutine of ix86_expand_vector_init.  Store into TARGET a vector\n    with all elements equal to VAR.  Return true if successful.  */\n \n-static bool\n+bool\n ix86_expand_vector_init_duplicate (bool mmx_ok, machine_mode mode,\n \t\t\t\t   rtx target, rtx val)\n {"}, {"sha": "51376fcc454faa6b2ce9a2ff4809a6366e20de26", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51c30227fa6c739e2d367abf327b3b7dfd86dd46/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51c30227fa6c739e2d367abf327b3b7dfd86dd46/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=51c30227fa6c739e2d367abf327b3b7dfd86dd46", "patch": "@@ -258,6 +258,8 @@ extern void ix86_expand_mul_widen_hilo (rtx, rtx, rtx, bool, bool);\n extern void ix86_expand_sse2_mulv4si3 (rtx, rtx, rtx);\n extern void ix86_expand_sse2_mulvxdi3 (rtx, rtx, rtx);\n extern void ix86_expand_sse2_abs (rtx, rtx);\n+extern bool ix86_expand_vector_init_duplicate (bool, machine_mode, rtx,\n+\t\t\t\t\t       rtx);\n \n /* In i386-c.c  */\n extern void ix86_target_macros (void);"}, {"sha": "f0b450ab4be63175c38abdb866122647ed09aee3", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51c30227fa6c739e2d367abf327b3b7dfd86dd46/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51c30227fa6c739e2d367abf327b3b7dfd86dd46/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=51c30227fa6c739e2d367abf327b3b7dfd86dd46", "patch": "@@ -24814,3 +24814,34 @@\n   \"TARGET_WIDEKL\"\n   \"aes<aeswideklvariant>\\t{%0}\"\n   [(set_attr \"type\" \"other\")])\n+\n+;; Modes handled by broadcast patterns.  NB: Allow V64QI and V32HI with\n+;; TARGET_AVX512F since ix86_expand_vector_init_duplicate can expand\n+;; without TARGET_AVX512BW which is used by memset vector broadcast\n+;; expander to XI with:\n+;; \tvmovd\t\t%edi, %xmm15\n+;;\tvpbroadcastb\t%xmm15, %ymm15\n+;;\tvinserti64x4\t$0x1, %ymm15, %zmm15, %zmm15\n+\n+(define_mode_iterator INT_BROADCAST_MODE\n+  [(V64QI \"TARGET_AVX512F\") (V32QI \"TARGET_AVX\") V16QI\n+   (V32HI \"TARGET_AVX512F\") (V16HI \"TARGET_AVX\") V8HI\n+   (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n+   (V8DI \"TARGET_AVX512F && TARGET_64BIT\")\n+   (V4DI \"TARGET_AVX && TARGET_64BIT\") (V2DI \"TARGET_64BIT\")])\n+\n+;; Broadcast from an integer.  NB: Enable broadcast only if we can move\n+;; from GPR to SSE register directly.\n+(define_expand \"vec_duplicate<mode>\"\n+  [(set (match_operand:INT_BROADCAST_MODE 0 \"register_operand\")\n+\t(vec_duplicate:INT_BROADCAST_MODE\n+\t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\")))]\n+  \"TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC\"\n+{\n+  if (!ix86_expand_vector_init_duplicate (false,\n+\t\t\t\t\t  GET_MODE (operands[0]),\n+\t\t\t\t\t  operands[0],\n+\t\t\t\t\t  operands[1]))\n+    gcc_unreachable ();\n+  DONE;\n+})"}]}