{"sha": "076e8e8d94dd4c989e2578717b298aed9b06063e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc2ZThlOGQ5NGRkNGM5ODllMjU3ODcxN2IyOThhZWQ5YjA2MDYzZQ==", "commit": {"author": {"name": "Brooks Moses", "email": "brooks.moses@codesourcery.com", "date": "2007-02-10T01:27:15Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2007-02-10T01:27:15Z"}, "message": "secnds.f: Replace time tolerance with a before-and-after bracket.\n\n* gfortran.dg/secnds.f: Replace time tolerance with a\nbefore-and-after bracket.\n* gfortran.dg/secnds-1.f: Likewise.\n\nFrom-SVN: r121791", "tree": {"sha": "fd20da5a36776be0b95c2824bf0589bd681d9906", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd20da5a36776be0b95c2824bf0589bd681d9906"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/076e8e8d94dd4c989e2578717b298aed9b06063e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076e8e8d94dd4c989e2578717b298aed9b06063e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/076e8e8d94dd4c989e2578717b298aed9b06063e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076e8e8d94dd4c989e2578717b298aed9b06063e/comments", "author": null, "committer": null, "parents": [{"sha": "ebff937c199d5e88d7650c7479ee684621800349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebff937c199d5e88d7650c7479ee684621800349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebff937c199d5e88d7650c7479ee684621800349"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "c4dd17c73c742a26853bc6423c4b135a781be787", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076e8e8d94dd4c989e2578717b298aed9b06063e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076e8e8d94dd4c989e2578717b298aed9b06063e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=076e8e8d94dd4c989e2578717b298aed9b06063e", "patch": "@@ -1,3 +1,9 @@\n+2006-02-09  Brooks Moses  <brooks.moses@codesourcery.com>\n+\n+\t* gfortran.dg/secnds.f: Replace time tolerance with a\n+\tbefore-and-after bracket.\n+\t* gfortran.dg/secnds-1.f: Likewise.\n+\n 2007-02-09  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/30512"}, {"sha": "fafe645d794b98eec4bdbc07e4fefb70ada76d86", "filename": "gcc/testsuite/gfortran.dg/secnds-1.f", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076e8e8d94dd4c989e2578717b298aed9b06063e/gcc%2Ftestsuite%2Fgfortran.dg%2Fsecnds-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076e8e8d94dd4c989e2578717b298aed9b06063e/gcc%2Ftestsuite%2Fgfortran.dg%2Fsecnds-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsecnds-1.f?ref=076e8e8d94dd4c989e2578717b298aed9b06063e", "patch": "@@ -1,24 +1,23 @@\n C { dg-do run }\n+C { dg-options \"-ffloat-store\" }\n C Tests fix for PR29099 - SECNDS intrinsic wrong result with no delay.\n-C Note1: The test uses +/-20ms accuracy in the check that\n-C date_and_time and secnds give the same values.\n C\n C Contributed by Paul Thomas  <pault@gcc.gnu.org>\n C\n       character*20 dum1, dum2, dum3\n-      real t1, t2\n+      real t1, t1a, t2, t2a\n       real dat1, dat2\n-      real dt\n       integer i, j, values(8)\n-      dt = 40e-3\n       t1 = secnds (0.0)\n       call date_and_time (dum1, dum2, dum3, values)\n+      t1a = secnds (0.0)\n       dat1 = 0.001*real (values(8)) + real (values(7)) +\n      &        60.0*real (values(6)) + 3600.0* real (values(5))\n-      if (int ((dat1 - t1 + dt * 0.5) / dt) .ne. 0) call abort ()\n+      if (((dat1 - t1) < 0.) .or. ((dat1 - t1) > (t1a - t1))) call abort ()\n+      t2a = secnds (t1a)\n       call date_and_time (dum1, dum2, dum3, values)\n+      t2 = secnds (t1)\n       dat2 = 0.001*real (values(8)) + real (values(7)) +\n      &        60.0*real (values(6)) + 3600.0* real (values(5))\n-      t2 = secnds (t1)\n-      if (int ((dat1-dat2 + t2 + dt * 0.5) / dt) .ne. 0.0) call abort ()\n+      if (((dat2 - dat1) < t2a) .or. ((dat2 - dat1) > t2)) call abort ()\n       end"}, {"sha": "a67acbb05f619e916edfa5b3a529ce21a7b18710", "filename": "gcc/testsuite/gfortran.dg/secnds.f", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076e8e8d94dd4c989e2578717b298aed9b06063e/gcc%2Ftestsuite%2Fgfortran.dg%2Fsecnds.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076e8e8d94dd4c989e2578717b298aed9b06063e/gcc%2Ftestsuite%2Fgfortran.dg%2Fsecnds.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsecnds.f?ref=076e8e8d94dd4c989e2578717b298aed9b06063e", "patch": "@@ -1,29 +1,27 @@\n C { dg-do run }\n-C { dg-options \"-O0\" }\n+C { dg-options \"-O0 -ffloat-store\" }\n C Tests fix for PR14994 - SECNDS intrinsic not supported.\n-C Note1: The test uses +/-20ms accuracy in the check that\n-C date_and_time and secnds give the same values.\n C\n C Contributed by Paul Thomas  <pault@gcc.gnu.org>\n C\n       character*20 dum1, dum2, dum3\n-      real t1, t2\n+      real t1, t1a, t2, t2a\n       real dat1, dat2\n-      real dt\n       integer i, j, values(8)\n-      dt = 40e-3\n       t1 = secnds (0.0)\n       call date_and_time (dum1, dum2, dum3, values)\n+      t1a = secnds (0.0)\n       dat1 = 0.001*real (values(8)) + real (values(7)) +\n      &        60.0*real (values(6)) + 3600.0* real (values(5))\n-      if (int ((dat1 - t1 + dt * 0.5) / dt) .ne. 0) call abort ()\n+      if (((dat1 - t1) < 0.) .or. ((dat1 - t1) > (t1a - t1))) call abort ()\n       do j=1,10000\n         do i=1,10000\n         end do\n       end do\n+      t2a = secnds (t1a)\n       call date_and_time (dum1, dum2, dum3, values)\n+      t2 = secnds (t1)\n       dat2 = 0.001*real (values(8)) + real (values(7)) +\n      &        60.0*real (values(6)) + 3600.0* real (values(5))\n-      t2 = secnds (t1)\n-      if (int ((dat1-dat2 + t2 + dt * 0.5) / dt) .ne. 0.0) call abort ()\n+      if (((dat2 - dat1) < t2a) .or. ((dat2 - dat1) > t2)) call abort ()\n       end"}]}