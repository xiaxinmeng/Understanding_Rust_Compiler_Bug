{"sha": "553f8003ba5ecfdf0574a171692843ef838226b4", "node_id": "C_kwDOANBUbNoAKDU1M2Y4MDAzYmE1ZWNmZGYwNTc0YTE3MTY5Mjg0M2VmODM4MjI2YjQ", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-01-27T17:03:50Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-01-27T17:03:50Z"}, "message": "vect/aarch64: Fix various sve/cond*.c failures\n\nQuite a few gcc.target/aarch64/sve/cond*.c tests started failing\nafter g:68e0063397ba820e71adc220b2da0581dce29ffa, but it turns out\nthat we were cheating passes before the patch.\n\nThe tests involve comparing the cost of N wide compares, a pack\nsequence, and a narrow COND_EXPR with the cost of a single COND_EXPR\non fewer elements.  The costs for the former included all operations,\nbut the costs for the latter didn't model the comparison embedded in\nthe COND_EXPR.  The patch made us include the comparison on both sides,\nmaking it apples-for-apples, but that's enough to tip the balance in\nfavour of using the wider types.\n\nI think the new choice does reflect the current SVE cost model\ncorrectly.  (Whether and how the model should be tweaked is a\ndifferent question.)  This patch therefore changes the tuning\nvector length to one that makes the choice more obvious.\n\nThat in turn needs a tweak to compare_inside_loop_cost.\nThe function compares body_cost1/vf1 with body_cost2/vf2,\nbut for fully-amsked loops, it limits vf to the actual number\nof iterations.  This is so that (say) an expensive 16-element\nvector body doesn't win over a cheaper 8-element vector body\nwhen there are only 7 elements to process.\n\nHowever, the limit was applied using known_le, regardless of\nthe tuning target.  For a heuristic like this, it seems better\nto use the likely minimum (which is a concept that was only\nadded after this code went in).\n\ng:68e0063397ba820e71adc220b2da0581dce29ffa also fixed\nvcond_4_costly.c.\n\ngcc/\n\t* tree-vectorizer.cc (vector_costs::compare_inside_loop_cost):\n\tUse the likely minimum VF when bounding the denominators to\n\tthe estimated number of iterations.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_asrd_1.c: Tune for a 256-bit\n\tvector length.\n\t* gcc.target/aarch64/sve/cond_cnot_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_cnot_6.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_5.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_6.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_uxt_5.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_4_costly.c: Remove XFAILs.", "tree": {"sha": "5a7d5e630b51bbdf9949787a2e3638b22bf8dfbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a7d5e630b51bbdf9949787a2e3638b22bf8dfbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/553f8003ba5ecfdf0574a171692843ef838226b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553f8003ba5ecfdf0574a171692843ef838226b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/553f8003ba5ecfdf0574a171692843ef838226b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553f8003ba5ecfdf0574a171692843ef838226b4/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32d1c3dd1d63399cca20567fb35d1ff90e30b655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32d1c3dd1d63399cca20567fb35d1ff90e30b655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32d1c3dd1d63399cca20567fb35d1ff90e30b655"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "aac06bd8093bed9e50928ee23f9a075888f14543", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_asrd_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553f8003ba5ecfdf0574a171692843ef838226b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553f8003ba5ecfdf0574a171692843ef838226b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_1.c?ref=553f8003ba5ecfdf0574a171692843ef838226b4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -moverride=sve_width=256\" } */\n \n #include <stdint.h>\n "}, {"sha": "f6278916e1afeb3f0cb8fdbff4e98782ad0a726e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_cnot_4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553f8003ba5ecfdf0574a171692843ef838226b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553f8003ba5ecfdf0574a171692843ef838226b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_4.c?ref=553f8003ba5ecfdf0574a171692843ef838226b4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -moverride=sve_width=256\" } */\n \n #include <stdint.h>\n "}, {"sha": "ef1b067172fbeaca336b5854bb57e357abdf7c61", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_cnot_6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553f8003ba5ecfdf0574a171692843ef838226b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553f8003ba5ecfdf0574a171692843ef838226b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_6.c?ref=553f8003ba5ecfdf0574a171692843ef838226b4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -moverride=sve_width=256\" } */\n \n #include <stdint.h>\n "}, {"sha": "03a6636f2d20b12f7e950a5bd6e43216139370fa", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553f8003ba5ecfdf0574a171692843ef838226b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553f8003ba5ecfdf0574a171692843ef838226b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_5.c?ref=553f8003ba5ecfdf0574a171692843ef838226b4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -moverride=sve_width=256\" } */\n \n #include <stdint.h>\n "}, {"sha": "c49a3040b21958c5a1289e1bbfc4425d6552a10c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553f8003ba5ecfdf0574a171692843ef838226b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553f8003ba5ecfdf0574a171692843ef838226b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_6.c?ref=553f8003ba5ecfdf0574a171692843ef838226b4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -moverride=sve_width=256\" } */\n \n #include <stdint.h>\n "}, {"sha": "9a2bd8f152ff32e8da1c4e2a73a31a249e5991c7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553f8003ba5ecfdf0574a171692843ef838226b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553f8003ba5ecfdf0574a171692843ef838226b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_5.c?ref=553f8003ba5ecfdf0574a171692843ef838226b4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -moverride=sve_width=256\" } */\n \n #include <stdint.h>\n "}, {"sha": "76d7a2886121048d9ceadfaf0d09d74af3ce5262", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_4_costly.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553f8003ba5ecfdf0574a171692843ef838226b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_costly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553f8003ba5ecfdf0574a171692843ef838226b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_costly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_costly.c?ref=553f8003ba5ecfdf0574a171692843ef838226b4", "patch": "@@ -61,8 +61,8 @@ TEST_CMP (nuge)\n TEST_CMP (nugt)\n \n /* 2 each for: eq, ne, ueq, nueq.  */\n-/* { dg-final { scan-assembler-times {\\tfcm(?:eq|ne)\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 8 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tfcm(?:eq|ne)\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 16 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfcm(?:eq|ne)\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tfcm(?:eq|ne)\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 16 } } */\n \n /* 2 each for: olt, ult, nult, ogt, ugt, nugt.  */\n /* { dg-final { scan-assembler-times {\\tfcm[lg]t\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 12 } } */"}, {"sha": "89cd0b88b6117c7bb79a91c8997635232525aaf9", "filename": "gcc/tree-vectorizer.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553f8003ba5ecfdf0574a171692843ef838226b4/gcc%2Ftree-vectorizer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553f8003ba5ecfdf0574a171692843ef838226b4/gcc%2Ftree-vectorizer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.cc?ref=553f8003ba5ecfdf0574a171692843ef838226b4", "patch": "@@ -1973,9 +1973,11 @@ vector_costs::compare_inside_loop_cost (const vector_costs *other) const\n   HOST_WIDE_INT estimated_max_niter = likely_max_stmt_executions_int (loop);\n   if (estimated_max_niter != -1)\n     {\n-      if (known_le (estimated_max_niter, this_vf))\n+      if (estimated_poly_value (this_vf, POLY_VALUE_MIN)\n+\t  >= estimated_max_niter)\n \tthis_vf = estimated_max_niter;\n-      if (known_le (estimated_max_niter, other_vf))\n+      if (estimated_poly_value (other_vf, POLY_VALUE_MIN)\n+\t  >= estimated_max_niter)\n \tother_vf = estimated_max_niter;\n     }\n "}]}