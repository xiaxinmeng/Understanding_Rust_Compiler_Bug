{"sha": "f9686024eef090b7eaadb70556f6127bad72dbdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk2ODYwMjRlZWYwOTBiN2VhYWRiNzA1NTZmNjEyN2JhZDcyZGJkYg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2004-10-30T01:03:12Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2004-10-30T01:03:12Z"}, "message": "configure.host (darwin*): Set os_include_dir to a separate directory for Darwin.\n\n\t* configure.host (darwin*): Set os_include_dir to a separate directory\n\tfor Darwin.\n\t* acinclude.m4 (GLIBCXX_ENABLE_CLOCALE): Add a new C locale kind,\n\t'darwin'.\n\t* config/locale/darwin/ctype_members.cc: New.\n\t* config/os/bsd/darwin/ctype_base.h: New.\n\t* config/os/bsd/darwin/ctype_inline.h: New.\n\t* config/os/bsd/darwin/ctype_noninline.h: New.\n\t* config/os/bsd/darwin/os_defines.h: New.\n\nFrom-SVN: r89874", "tree": {"sha": "2aab7f25c25a506f476522ccd3ad7da6ba2801e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aab7f25c25a506f476522ccd3ad7da6ba2801e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9686024eef090b7eaadb70556f6127bad72dbdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9686024eef090b7eaadb70556f6127bad72dbdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9686024eef090b7eaadb70556f6127bad72dbdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9686024eef090b7eaadb70556f6127bad72dbdb/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5976e643ed10a021367870663b1105aaf064393a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5976e643ed10a021367870663b1105aaf064393a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5976e643ed10a021367870663b1105aaf064393a"}], "stats": {"total": 575, "additions": 574, "deletions": 1}, "files": [{"sha": "e4a7cf8fd0054b41378d5fa508ebaa2412c14c1f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f9686024eef090b7eaadb70556f6127bad72dbdb", "patch": "@@ -1,5 +1,15 @@\n 2004-10-29  Geoffrey Keating  <geoffk@apple.com>\n \n+\t* configure.host (darwin*): Set os_include_dir to a separate directory\n+\tfor Darwin.\n+\t* acinclude.m4 (GLIBCXX_ENABLE_CLOCALE): Add a new C locale kind,\n+\t'darwin'.\n+\t* config/locale/darwin/ctype_members.cc: New.\n+\t* config/os/bsd/darwin/ctype_base.h: New.\n+\t* config/os/bsd/darwin/ctype_inline.h: New.\n+\t* config/os/bsd/darwin/ctype_noninline.h: New.\n+\t* config/os/bsd/darwin/os_defines.h: New.\n+\n \t* testsuite/22_locale/locale/cons/12658_thread-1.cc: Only xfail\n \ton Linux.\n "}, {"sha": "fc746c401f3687b9323ddfb21fd71d274a0f1682", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=f9686024eef090b7eaadb70556f6127bad72dbdb", "patch": "@@ -1048,6 +1048,9 @@ AC_DEFUN([GLIBCXX_ENABLE_CLOCALE], [\n \n         # ... at some point put __strxfrm_l tests in as well.\n         ;;\n+      darwin*)\n+        enable_clocale_flag=darwin\n+\t;;\n       *)\n         enable_clocale_flag=generic\n         ;;\n@@ -1082,6 +1085,24 @@ AC_DEFUN([GLIBCXX_ENABLE_CLOCALE], [\n       CTIME_CC=config/locale/generic/time_members.cc\n       CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h\n       ;;\n+    darwin)\n+      AC_MSG_RESULT(darwin)\n+\n+      CLOCALE_H=config/locale/generic/c_locale.h\n+      CLOCALE_CC=config/locale/generic/c_locale.cc\n+      CCODECVT_H=config/locale/generic/codecvt_specializations.h\n+      CCODECVT_CC=config/locale/generic/codecvt_members.cc\n+      CCOLLATE_CC=config/locale/generic/collate_members.cc\n+      CCTYPE_CC=config/locale/darwin/ctype_members.cc\n+      CMESSAGES_H=config/locale/generic/messages_members.h\n+      CMESSAGES_CC=config/locale/generic/messages_members.cc\n+      CMONEY_CC=config/locale/generic/monetary_members.cc\n+      CNUMERIC_CC=config/locale/generic/numeric_members.cc\n+      CTIME_H=config/locale/generic/time_members.h\n+      CTIME_CC=config/locale/generic/time_members.cc\n+      CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h\n+      ;;\n+\t\n     gnu)\n       AC_MSG_RESULT(gnu)\n "}, {"sha": "9c54301ea632617244abe7e95670f1d178bf21ef", "filename": "libstdc++-v3/config/locale/darwin/ctype_members.cc", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc?ref=f9686024eef090b7eaadb70556f6127bad72dbdb", "patch": "@@ -0,0 +1,171 @@\n+// std::ctype implementation details, GNU version -*- C++ -*-\n+\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.1.1.2  ctype virtual functions.\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+#include <bits/c++locale_internal.h>\n+\n+namespace std\n+{\n+  // NB: The other ctype<char> specializations are in src/locale.cc and\n+  // various /config/os/* files.\n+  template<>\n+    ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n+    : ctype<char>(0, false, __refs) \n+    { \t\t\n+      if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\t{\n+\t  this->_S_destroy_c_locale(this->_M_c_locale_ctype);\n+\t  this->_S_create_c_locale(this->_M_c_locale_ctype, __s); \n+\t}\n+    }\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T  \n+  ctype<wchar_t>::__wmask_type\n+  ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const\n+  {\n+    // Darwin uses the same codes for 'char' as 'wchar_t', so this routine\n+    // never gets called.\n+    return __m;\n+  };\n+  \n+  wchar_t\n+  ctype<wchar_t>::do_toupper(wchar_t __c) const\n+  { return towupper(__c); }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::do_toupper(wchar_t* __lo, const wchar_t* __hi) const\n+  {\n+    while (__lo < __hi)\n+      {\n+        *__lo = towupper(*__lo);\n+        ++__lo;\n+      }\n+    return __hi;\n+  }\n+  \n+  wchar_t\n+  ctype<wchar_t>::do_tolower(wchar_t __c) const\n+  { return towlower(__c); }\n+  \n+  const wchar_t*\n+  ctype<wchar_t>::do_tolower(wchar_t* __lo, const wchar_t* __hi) const\n+  {\n+    while (__lo < __hi)\n+      {\n+        *__lo = towlower(*__lo);\n+        ++__lo;\n+      }\n+    return __hi;\n+  }\n+\n+  wchar_t\n+  ctype<wchar_t>::\n+  do_widen(char __c) const\n+  { return _M_widen[static_cast<unsigned char>(__c)]; }\n+\n+  const char* \n+  ctype<wchar_t>::\n+  do_widen(const char* __lo, const char* __hi, wchar_t* __dest) const\n+  {\n+    while (__lo < __hi)\n+      {\n+\t*__dest = _M_widen[static_cast<unsigned char>(*__lo)];\n+\t++__lo;\n+\t++__dest;\n+      }\n+    return __hi;\n+  }\n+\n+  char\n+  ctype<wchar_t>::\n+  do_narrow(wchar_t __wc, char __dfault) const\n+  { \n+    if (__wc >= 0 && __wc < 128 && _M_narrow_ok)\n+      return _M_narrow[__wc];\n+    const int __c = wctob(__wc);\n+    return (__c == EOF ? __dfault : static_cast<char>(__c)); \n+  }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::\n+  do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault, \n+\t    char* __dest) const\n+  {\n+    if (_M_narrow_ok)\n+      while (__lo < __hi)\n+\t{\n+\t  if (*__lo >= 0 && *__lo < 128)\n+\t    *__dest = _M_narrow[*__lo];\n+\t  else\n+\t    {\n+\t      const int __c = wctob(*__lo);\n+\t      *__dest = (__c == EOF ? __dfault : static_cast<char>(__c));\n+\t    }\n+\t  ++__lo;\n+\t  ++__dest;\n+\t}\n+    else\n+      while (__lo < __hi)\n+\t{\n+\t  const int __c = wctob(*__lo);\n+\t  *__dest = (__c == EOF ? __dfault : static_cast<char>(__c));\n+\t  ++__lo;\n+\t  ++__dest;\n+\t}\n+    return __hi;\n+  }\n+\n+  void\n+  ctype<wchar_t>::_M_initialize_ctype()\n+  {\n+    wint_t __i;\n+    for (__i = 0; __i < 128; ++__i)\n+      {\n+\tconst int __c = wctob(__i);\n+\tif (__c == EOF)\n+\t  break;\n+\telse\n+\t  _M_narrow[__i] = static_cast<char>(__c);\n+      }\n+    if (__i == 128)\n+      _M_narrow_ok = true;\n+    else\n+      _M_narrow_ok = false;\n+    for (size_t __i = 0;\n+\t __i < sizeof(_M_widen) / sizeof(wint_t); ++__i)\n+      _M_widen[__i] = btowc(__i);\n+  }\n+#endif //  _GLIBCXX_USE_WCHAR_T\n+}"}, {"sha": "caaf23ba0ef355f40dabc2f79cc2e6b1e8aff0ba", "filename": "libstdc++-v3/config/os/bsd/darwin/ctype_base.h", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_base.h?ref=f9686024eef090b7eaadb70556f6127bad72dbdb", "patch": "@@ -0,0 +1,74 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+// Information as gleaned from /usr/include/ctype.h on FreeBSD 3.4,\n+// 4.0 and all versions of the CVS managed file at:\n+// :pserver:anoncvs@anoncvs.freebsd.org:/home/ncvs/src/include/ctype.h\n+  \n+  struct ctype_base\n+  {\n+    // Non-standard typedefs.\n+    typedef const int* \t\t__to_type;\n+\n+    typedef unsigned long \tmask;\n+#ifdef _CTYPE_S\n+    // FreeBSD 4.0 uses this style of define.\n+    static const mask upper    \t= _CTYPE_U;\n+    static const mask lower \t= _CTYPE_L;\n+    static const mask alpha \t= _CTYPE_A;\n+    static const mask digit \t= _CTYPE_D;\n+    static const mask xdigit \t= _CTYPE_X;\n+    static const mask space \t= _CTYPE_S;\n+    static const mask print \t= _CTYPE_R;\n+    static const mask graph \t= _CTYPE_A | _CTYPE_D | _CTYPE_P;\n+    static const mask cntrl \t= _CTYPE_C;\n+    static const mask punct \t= _CTYPE_P;\n+    static const mask alnum \t= _CTYPE_A | _CTYPE_D;\n+#else\n+    // Older versions, including Free BSD 3.4, use this style of define.\n+    static const mask upper    \t= _U;\n+    static const mask lower \t= _L;\n+    static const mask alpha \t= _A;\n+    static const mask digit \t= _D;\n+    static const mask xdigit \t= _X;\n+    static const mask space \t= _S;\n+    static const mask print \t= _R;\n+    static const mask graph \t= _A | _D | _P;\n+    static const mask cntrl \t= _C;\n+    static const mask punct \t= _P;\n+    static const mask alnum \t= _A | _D;\n+#endif\n+  };\n+\n+\n+"}, {"sha": "31b6286a97b66493499094b7e7cfb95303d1e15c", "filename": "libstdc++-v3/config/os/bsd/darwin/ctype_inline.h", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_inline.h?ref=f9686024eef090b7eaadb70556f6127bad72dbdb", "patch": "@@ -0,0 +1,143 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2000, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+// ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n+// functions go in ctype.cc\n+  \n+  bool\n+  ctype<char>::\n+  is(mask __m, char __c) const\n+  { \n+    if (_M_table)\n+      return _M_table[static_cast<unsigned char>(__c)] & __m;\n+    else\n+      return __istype(__c, __m);\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  is(const char* __low, const char* __high, mask* __vec) const\n+  {\n+    if (_M_table)\n+      while (__low < __high)\n+\t*__vec++ = _M_table[static_cast<unsigned char>(*__low++)];\n+    else\n+      for (;__low < __high; ++__vec, ++__low)\n+\t{\n+#if defined (_CTYPE_S) || defined (__istype)\n+\t  *__vec = __maskrune (*__low, upper | lower | alpha | digit | xdigit\n+\t\t\t       | space | print | graph | cntrl | punct | alnum);\n+#else\n+\t  mask __m = 0;\n+\t  if (this->is(upper, *__low)) __m |= upper;\n+\t  if (this->is(lower, *__low)) __m |= lower;\n+\t  if (this->is(alpha, *__low)) __m |= alpha;\n+\t  if (this->is(digit, *__low)) __m |= digit;\n+\t  if (this->is(xdigit, *__low)) __m |= xdigit;\n+\t  if (this->is(space, *__low)) __m |= space;\n+\t  if (this->is(print, *__low)) __m |= print;\n+\t  if (this->is(graph, *__low)) __m |= graph;\n+\t  if (this->is(cntrl, *__low)) __m |= cntrl;\n+\t  if (this->is(punct, *__low)) __m |= punct;\n+\t  // Do not include explicit line for alnum mask since it is a\n+\t  // pure composite of masks on FreeBSD.\n+\t  *__vec = __m;\n+#endif\n+\t}\n+    return __high;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_is(mask __m, const char* __low, const char* __high) const\n+  {\n+    if (_M_table)\n+      while (__low < __high\n+\t     && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n+\t++__low;\n+    else\n+      while (__low < __high && !this->is(__m, *__low))\n+\t++__low;\n+    return __low;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_not(mask __m, const char* __low, const char* __high) const\n+  {\n+    if (_M_table)\n+      while (__low < __high\n+\t     && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n+\t++__low;\n+    else\n+      while (__low < __high && this->is(__m, *__low) != 0)\n+\t++__low;\n+    return __low;\n+  }\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T  \n+  inline bool\n+  ctype<wchar_t>::\n+  do_is(mask __m, wchar_t __c) const\n+  {\n+    return __istype (__c, __m);\n+  }\n+\n+  inline const wchar_t* \n+  ctype<wchar_t>::\n+  do_is(const wchar_t* __lo, const wchar_t* __hi, mask* __vec) const\n+  {\n+    for (; __lo < __hi; ++__vec, ++__lo)\n+      *__vec = __maskrune (*__lo, upper | lower | alpha | digit | xdigit\n+\t\t\t   | space | print | graph | cntrl | punct | alnum);\n+    return __hi;\n+  }\n+  \n+  inline const wchar_t* \n+  ctype<wchar_t>::\n+  do_scan_is(mask __m, const wchar_t* __lo, const wchar_t* __hi) const\n+  {\n+    while (__lo < __hi && ! __istype (*__lo, __m))\n+      ++__lo;\n+    return __lo;\n+  }\n+\n+  inline const wchar_t*\n+  ctype<wchar_t>::\n+  do_scan_not(mask __m, const char_type* __lo, const char_type* __hi) const\n+  {\n+    while (__lo < __hi && __istype (*__lo, __m))\n+      ++__lo;\n+    return __lo;\n+  }\n+#endif"}, {"sha": "ec5b5753547ac2afcbfbbb12970fed7a9577554a", "filename": "libstdc++-v3/config/os/bsd/darwin/ctype_noninline.h", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_noninline.h?ref=f9686024eef090b7eaadb70556f6127bad72dbdb", "patch": "@@ -0,0 +1,91 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+// Information as gleaned from /usr/include/ctype.h\n+  \n+  const ctype_base::mask*\n+  ctype<char>::classic_table() throw()\n+  { return 0; }\n+\n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs) \n+  : facet(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), \n+  _M_table(__table ? __table : classic_table()) \n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n+\n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n+  : facet(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), \n+  _M_table(__table ? __table : classic_table()) \n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n+\n+  char\n+  ctype<char>::do_toupper(char __c) const\n+  { return ::toupper((int) __c); }\n+\n+  const char*\n+  ctype<char>::do_toupper(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = ::toupper((int) *__low);\n+\t++__low;\n+      }\n+    return __high;\n+  }\n+\n+  char\n+  ctype<char>::do_tolower(char __c) const\n+  { return ::tolower((int) __c); }\n+\n+  const char* \n+  ctype<char>::do_tolower(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = ::tolower((int) *__low);\n+\t++__low;\n+      }\n+    return __high;\n+  }"}, {"sha": "9b68110d46aaa75dcfc8d947832ecbac01b43632", "filename": "libstdc++-v3/config/os/bsd/darwin/os_defines.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fos_defines.h?ref=f9686024eef090b7eaadb70556f6127bad72dbdb", "patch": "@@ -0,0 +1,41 @@\n+// Specific definitions for Darwin -*- C++ -*-\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n+\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n+\n+/* Darwin has the pthread routines in libSystem, which every program\n+   links to, so there's no need for weak-ness for that.  */\n+#define _GLIBCXX_GTHREAD_USE_WEAK 0\n+\n+#endif"}, {"sha": "07b2561164a3b808d08eb5ab6dbb842fe791f9f4", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=f9686024eef090b7eaadb70556f6127bad72dbdb", "patch": "@@ -5789,6 +5789,9 @@ fi\n \n         # ... at some point put __strxfrm_l tests in as well.\n         ;;\n+      darwin*)\n+        enable_clocale_flag=darwin\n+\t;;\n       *)\n         enable_clocale_flag=generic\n         ;;\n@@ -5827,6 +5830,25 @@ echo \"${ECHO_T}generic\" >&6\n       CTIME_CC=config/locale/generic/time_members.cc\n       CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h\n       ;;\n+    darwin)\n+      echo \"$as_me:$LINENO: result: darwin\" >&5\n+echo \"${ECHO_T}darwin\" >&6\n+\n+      CLOCALE_H=config/locale/generic/c_locale.h\n+      CLOCALE_CC=config/locale/generic/c_locale.cc\n+      CCODECVT_H=config/locale/generic/codecvt_specializations.h\n+      CCODECVT_CC=config/locale/generic/codecvt_members.cc\n+      CCOLLATE_CC=config/locale/generic/collate_members.cc\n+      CCTYPE_CC=config/locale/darwin/ctype_members.cc\n+      CMESSAGES_H=config/locale/generic/messages_members.h\n+      CMESSAGES_CC=config/locale/generic/messages_members.cc\n+      CMONEY_CC=config/locale/generic/monetary_members.cc\n+      CNUMERIC_CC=config/locale/generic/numeric_members.cc\n+      CTIME_H=config/locale/generic/time_members.h\n+      CTIME_CC=config/locale/generic/time_members.cc\n+      CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h\n+      ;;\n+\n     gnu)\n       echo \"$as_me:$LINENO: result: gnu\" >&5\n echo \"${ECHO_T}gnu\" >&6"}, {"sha": "cf18e986109701767a56199f47951090288ca855", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9686024eef090b7eaadb70556f6127bad72dbdb/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=f9686024eef090b7eaadb70556f6127bad72dbdb", "patch": "@@ -177,7 +177,7 @@ case \"${host_os}\" in\n     # Up to at least 10.3.5, -flat_namespace is required for proper\n     # treatment of coalesced symbols.\n     OPT_LDFLAGS=\"${OPT_LDFLAGS} -Wl,-single_module -Wl,-flat_namespace\"\n-    os_include_dir=\"os/generic\"\n+    os_include_dir=\"os/bsd/darwin\"\n     ;;\n   *djgpp*)      # leading * picks up \"msdosdjgpp\"\n     os_include_dir=\"os/djgpp\""}]}