{"sha": "87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdlM2Q3Y2ZiNWM1YzljZjI2NWU1ZWU4MDNjY2U5MDRmMmE1YTEyMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-10-05T12:10:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-10-05T12:10:55Z"}, "message": "[C++ PATCH] Kill IDENTIFIER_GLOBAL_VALUE\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-10/msg00239.html\n\tKill IDENTIFIER_GLOBAL_VALUE, SET_IDENTIFIER_GLOBAL_VALUE\n\t* cp-tree.h (IDENTIFIER_GLOBAL_VALUE,\n\tSET_IDENTIFIER_GLOBAL_VALUE): Delete.\n\t* name-lookup.h (set_global_binding): Remove NAME parm.\n\t(get_global_binding): New inline fn.\n\t* name-lookup.c (set_global_binding): Remove NAME parm. Adjust.\n\t(identifier_global_value): Move to ...\n\t* cp-objcp-common.c (identifier_global_value): ... here.\n\t* class.c (build_ctor_vtbl_group, build_vtbl_initializer): Adjust.\n\t* decl.c (record_builtin_type, expand_static_init,\n\tgrokdeclarator): Adjust.\n\t* decl2.c (get_guard, get_local_tls_init_fn, get_tls_init_fn,\n\tget_tls_wrapper_fn, maybe_warn_sized_delete): Adjust.\n\t* except.c (declare_library_fn, build_throw): Adjust.\n\t* init.c (throw_bad_array_length): Adjust.\n\t* rtti.c (throw_bad_cast, throw_bad_typeid, get_tinfo_decl): Adjust.\n\nFrom-SVN: r253444", "tree": {"sha": "2d41124961ddfd8ba4e2c6256e1ea90ef095ee6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d41124961ddfd8ba4e2c6256e1ea90ef095ee6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9eabdc5e16a1fe10028244f779cde7b01bca7629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eabdc5e16a1fe10028244f779cde7b01bca7629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eabdc5e16a1fe10028244f779cde7b01bca7629"}], "stats": {"total": 128, "additions": 70, "deletions": 58}, "files": [{"sha": "75778465200beb985753338a3e313f751076aac6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "patch": "@@ -1,5 +1,22 @@\n 2017-10-05  Nathan Sidwell  <nathan@acm.org>\n \n+\tKill IDENTIFIER_GLOBAL_VALUE, SET_IDENTIFIER_GLOBAL_VALUE\n+\t* cp-tree.h (IDENTIFIER_GLOBAL_VALUE,\n+\tSET_IDENTIFIER_GLOBAL_VALUE): Delete.\n+\t* name-lookup.h (set_global_binding): Remove NAME parm.\n+\t(get_global_binding): New inline fn.\n+\t* name-lookup.c (set_global_binding): Remove NAME parm. Adjust.\n+\t(identifier_global_value): Move to ...\n+\t* cp-objcp-common.c (identifier_global_value): ... here.\n+\t* class.c (build_ctor_vtbl_group, build_vtbl_initializer): Adjust.\n+\t* decl.c (record_builtin_type, expand_static_init,\n+\tgrokdeclarator): Adjust.\n+\t* decl2.c (get_guard, get_local_tls_init_fn, get_tls_init_fn,\n+\tget_tls_wrapper_fn, maybe_warn_sized_delete): Adjust.\n+\t* except.c (declare_library_fn, build_throw): Adjust.\n+\t* init.c (throw_bad_array_length): Adjust.\n+\t* rtti.c (throw_bad_cast, throw_bad_typeid, get_tinfo_decl): Adjust.\n+\n \t* decl2.c (record_mangling): Fix spello and formatting from\n \tprevious patch.\n "}, {"sha": "a90b85f2a5c731c7ade73223edd4f9269cc1d06e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "patch": "@@ -8912,7 +8912,7 @@ build_ctor_vtbl_group (tree binfo, tree t)\n \n   /* See if we've already created this construction vtable group.  */\n   id = mangle_ctor_vtbl_for_type (t, binfo);\n-  if (IDENTIFIER_GLOBAL_VALUE (id))\n+  if (get_global_binding (id))\n     return;\n \n   gcc_assert (!SAME_BINFO_TYPE_P (BINFO_TYPE (binfo), t));\n@@ -9294,7 +9294,7 @@ build_vtbl_initializer (tree binfo,\n \t      if (!dvirt_fn)\n \t\t{\n \t\t  tree name = get_identifier (\"__cxa_deleted_virtual\");\n-\t\t  dvirt_fn = IDENTIFIER_GLOBAL_VALUE (name);\n+\t\t  dvirt_fn = get_global_binding (name);\n \t\t  if (!dvirt_fn)\n \t\t    dvirt_fn = push_library_fn\n \t\t      (name,"}, {"sha": "f251b05775b2dc06864e29b2f906b65bf51cf009", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "patch": "@@ -400,6 +400,15 @@ cp_pushdecl (tree decl)\n   return pushdecl (decl);\n }\n \n+/* Get the global value binding of NAME.  Called directly from\n+   c-common.c, not via a hook. */\n+\n+tree\n+identifier_global_value (tree name)\n+{\n+  return get_global_binding (name);\n+}\n+\n /* Register c++-specific dumps.  */\n \n void"}, {"sha": "5f9874ba10b904402ed5ff77c322c43dd3530fd9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "patch": "@@ -613,11 +613,6 @@ struct GTY(()) ptrmem_cst {\n };\n typedef struct ptrmem_cst * ptrmem_cst_t;\n \n-#define IDENTIFIER_GLOBAL_VALUE(NODE) \\\n-  get_namespace_binding (NULL_TREE, (NODE))\n-#define SET_IDENTIFIER_GLOBAL_VALUE(NODE, VAL) \\\n-  set_global_binding ((NODE), (VAL))\n-\n #define CLEANUP_P(NODE)\t\tTREE_LANG_FLAG_0 (TRY_BLOCK_CHECK (NODE))\n \n #define BIND_EXPR_TRY_BLOCK(NODE) \\"}, {"sha": "2b4ed0131e0d89b744e14bc2afc5997d92cf0578", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "patch": "@@ -3897,7 +3897,7 @@ make_unbound_class_template (tree context, tree name, tree parm_list,\n    RID_POINTERS.  NAME is the name used when looking up the builtin\n    type.  TYPE is the _TYPE node for the builtin type.\n \n-   The calls to SET_IDENTIFIER_GLOBAL_VALUE below should be\n+   The calls to set_global_binding below should be\n    eliminated.  Built-in types should not be looked up name; their\n    names are keywords that the parser can recognize.  However, there\n    is code in c-common.c that uses identifier_global_value to look up\n@@ -3915,7 +3915,7 @@ record_builtin_type (enum rid rid_index,\n       tree tname = get_identifier (name);\n       tree tdecl = build_decl (BUILTINS_LOCATION, TYPE_DECL, tname, type);\n       DECL_ARTIFICIAL (tdecl) = 1;\n-      SET_IDENTIFIER_GLOBAL_VALUE (tname, tdecl);\n+      set_global_binding (tdecl);\n       decl = tdecl;\n     }\n \n@@ -3925,7 +3925,7 @@ record_builtin_type (enum rid rid_index,\n \t{\n \t  tree rdecl = build_decl (BUILTINS_LOCATION, TYPE_DECL, rname, type);\n \t  DECL_ARTIFICIAL (rdecl) = 1;\n-\t  SET_IDENTIFIER_GLOBAL_VALUE (rname, rdecl);\n+\t  set_global_binding (rdecl);\n \t  if (!decl)\n \t    decl = rdecl;\n \t}\n@@ -4509,7 +4509,7 @@ build_cp_library_fn_ptr (const char* name, tree type, int ecf_flags)\n }\n \n /* Like build_library_fn, but also pushes the function so that we will\n-   be able to find it via IDENTIFIER_GLOBAL_VALUE.  Also, the function\n+   be able to find it via get_global_binding.  Also, the function\n    may throw exceptions listed in RAISES.  */\n \n tree\n@@ -8055,9 +8055,9 @@ expand_static_init (tree decl, tree init)\n \t  acquire_name = get_identifier (\"__cxa_guard_acquire\");\n \t  release_name = get_identifier (\"__cxa_guard_release\");\n \t  abort_name = get_identifier (\"__cxa_guard_abort\");\n-\t  acquire_fn = identifier_global_value (acquire_name);\n-\t  release_fn = identifier_global_value (release_name);\n-\t  abort_fn = identifier_global_value (abort_name);\n+\t  acquire_fn = get_global_binding (acquire_name);\n+\t  release_fn = get_global_binding (release_name);\n+\t  abort_fn = get_global_binding (abort_name);\n \t  if (!acquire_fn)\n \t    acquire_fn = push_library_fn\n \t      (acquire_name, build_function_type_list (integer_type_node,\n@@ -10126,7 +10126,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t    gcc_assert (flags == NO_SPECIAL);\n \t\t    flags = TYPENAME_FLAG;\n \t\t    sfk = sfk_conversion;\n-\t\t    tree glob = IDENTIFIER_GLOBAL_VALUE (dname);\n+\t\t    tree glob = get_global_binding (dname);\n \t\t    if (glob && TREE_CODE (glob) == TYPE_DECL)\n \t\t      name = identifier_to_locale (IDENTIFIER_POINTER (dname));\n \t\t    else"}, {"sha": "ee4c80077eda250d0b57d56c03b3e8f8d21f31fb", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "patch": "@@ -2985,7 +2985,7 @@ get_guard (tree decl)\n   tree guard;\n \n   sname = mangle_guard_variable (decl);\n-  guard = IDENTIFIER_GLOBAL_VALUE (sname);\n+  guard = get_global_binding (sname);\n   if (! guard)\n     {\n       tree guard_type;\n@@ -3153,7 +3153,7 @@ static tree\n get_local_tls_init_fn (void)\n {\n   tree sname = get_identifier (\"__tls_init\");\n-  tree fn = IDENTIFIER_GLOBAL_VALUE (sname);\n+  tree fn = get_global_binding (sname);\n   if (!fn)\n     {\n       fn = build_lang_decl (FUNCTION_DECL, sname,\n@@ -3163,7 +3163,7 @@ get_local_tls_init_fn (void)\n       TREE_PUBLIC (fn) = false;\n       DECL_ARTIFICIAL (fn) = true;\n       mark_used (fn);\n-      SET_IDENTIFIER_GLOBAL_VALUE (sname, fn);\n+      set_global_binding (fn);\n     }\n   return fn;\n }\n@@ -3191,7 +3191,7 @@ get_tls_init_fn (tree var)\n     return get_local_tls_init_fn ();\n \n   tree sname = mangle_tls_init_fn (var);\n-  tree fn = IDENTIFIER_GLOBAL_VALUE (sname);\n+  tree fn = get_global_binding (sname);\n   if (!fn)\n     {\n       fn = build_lang_decl (FUNCTION_DECL, sname,\n@@ -3225,7 +3225,7 @@ get_tls_init_fn (tree var)\n \n       DECL_BEFRIENDING_CLASSES (fn) = var;\n \n-      SET_IDENTIFIER_GLOBAL_VALUE (sname, fn);\n+      set_global_binding (fn);\n     }\n   return fn;\n }\n@@ -3243,7 +3243,7 @@ get_tls_wrapper_fn (tree var)\n     return NULL_TREE;\n \n   tree sname = mangle_tls_wrapper_fn (var);\n-  tree fn = IDENTIFIER_GLOBAL_VALUE (sname);\n+  tree fn = get_global_binding (sname);\n   if (!fn)\n     {\n       /* A named rvalue reference is an lvalue, so the wrapper should\n@@ -3282,7 +3282,7 @@ get_tls_wrapper_fn (tree var)\n \n       DECL_BEFRIENDING_CLASSES (fn) = var;\n \n-      SET_IDENTIFIER_GLOBAL_VALUE (sname, fn);\n+      set_global_binding (fn);\n     }\n   return fn;\n }\n@@ -4427,7 +4427,7 @@ maybe_warn_sized_delete (enum tree_code code)\n   tree sized = NULL_TREE;\n   tree unsized = NULL_TREE;\n \n-  for (ovl_iterator iter (IDENTIFIER_GLOBAL_VALUE (cp_operator_id (code)));\n+  for (ovl_iterator iter (get_global_binding (cp_operator_id (code)));\n        iter; ++iter)\n     {\n       tree fn = *iter;"}, {"sha": "ecc8941984b317b4140d21f94935ae7ffd8f1d33", "filename": "gcc/cp/except.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "patch": "@@ -147,7 +147,7 @@ declare_library_fn (const char *name, tree rtype, tree ptype,\n \t\t    int ecf, int tm_ecf)\n {\n   tree ident = get_identifier (name);\n-  tree res = IDENTIFIER_GLOBAL_VALUE (ident);\n+  tree res = get_global_binding (ident);\n   if (!res)\n     {\n       tree type = build_function_type_list (rtype, ptype, NULL_TREE);\n@@ -158,7 +158,7 @@ declare_library_fn (const char *name, tree rtype, tree ptype,\n \t  char *tm_name = concat (\"_ITM_\", name + 2, NULL_TREE);\n \t  tree tm_ident = get_identifier (tm_name);\n \t  free (tm_name);\n-\t  tree tm_fn = IDENTIFIER_GLOBAL_VALUE (tm_ident);\n+\t  tree tm_fn = get_global_binding (tm_ident);\n \t  if (!tm_fn)\n \t    tm_fn = push_library_fn (tm_ident, type, except, ecf | tm_ecf);\n \t  record_tm_replacement (res, tm_fn);\n@@ -609,7 +609,7 @@ build_throw (tree exp)\n       if (!throw_fn)\n \t{\n \t  tree name = get_identifier (\"__cxa_throw\");\n-\t  throw_fn = IDENTIFIER_GLOBAL_VALUE (name);\n+\t  throw_fn = get_global_binding (name);\n \t  if (!throw_fn)\n \t    {\n \t      /* Declare void __cxa_throw (void*, void*, void (*)(void*)).  */\n@@ -622,7 +622,7 @@ build_throw (tree exp)\n \t      if (flag_tm)\n \t\t{\n \t\t  tree itm_name = get_identifier (\"_ITM_cxa_throw\");\n-\t\t  tree itm_fn = IDENTIFIER_GLOBAL_VALUE (itm_name);\n+\t\t  tree itm_fn = get_global_binding (itm_name);\n \t\t  if (!itm_fn)\n \t\t    itm_fn = push_throw_library_fn (itm_name, tmp);\n \t\t  apply_tm_attr (itm_fn, get_identifier (\"transaction_pure\"));\n@@ -764,7 +764,7 @@ build_throw (tree exp)\n       if (!rethrow_fn)\n \t{\n \t  tree name = get_identifier (\"__cxa_rethrow\");\n-\t  rethrow_fn = IDENTIFIER_GLOBAL_VALUE (name);\n+\t  rethrow_fn = get_global_binding (name);\n \t  if (!rethrow_fn)\n \t    /* Declare void __cxa_rethrow (void).  */\n \t    rethrow_fn = push_throw_library_fn"}, {"sha": "ad30f247cf6995360c1e251bb88a132c3a6b4bcf", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "patch": "@@ -2446,7 +2446,7 @@ throw_bad_array_new_length (void)\n     {\n       tree name = get_identifier (\"__cxa_throw_bad_array_new_length\");\n \n-      fn = IDENTIFIER_GLOBAL_VALUE (name);\n+      fn = get_global_binding (name);\n       if (!fn)\n \tfn = push_throw_library_fn\n \t  (name, build_function_type_list (sizetype, NULL_TREE));"}, {"sha": "a20c603243aef4a538502512966430b253e95b9e", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "patch": "@@ -3774,16 +3774,6 @@ identifier_type_value (tree id)\n   return ret;\n }\n \n-\n-/* Return the IDENTIFIER_GLOBAL_VALUE of T, for use in common code, since\n-   the definition of IDENTIFIER_GLOBAL_VALUE is different for C and C++.  */\n-\n-tree\n-identifier_global_value\t(tree t)\n-{\n-  return IDENTIFIER_GLOBAL_VALUE (t);\n-}\n-\n /* Push a definition of struct, union or enum tag named ID.  into\n    binding_level B.  DECL is a TYPE_DECL for the type.  We assume that\n    the tag ID is not already defined.  */\n@@ -4839,32 +4829,32 @@ get_namespace_binding (tree ns, tree name)\n   return ret;\n }\n \n-/* Set value binding of NAME in the global namespace to VAL.  Does not\n-   add it to the list of things in the namespace.  */\n+/* Push internal DECL into the global namespace.  Does not do the\n+   full overload fn handling and does not add it to the list of things\n+   in the namespace.  */\n \n void\n-set_global_binding (tree name, tree val)\n+set_global_binding (tree decl)\n {\n   bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n \n-  gcc_checking_assert (name == DECL_NAME (val));\n-  tree *slot = find_namespace_slot (global_namespace, name, true);\n+  tree *slot = find_namespace_slot (global_namespace, DECL_NAME (decl), true);\n   tree old = MAYBE_STAT_DECL (*slot);\n \n   if (!old)\n-    *slot = val;\n-  else if (old == val)\n+    *slot = decl;\n+  else if (old == decl)\n     ;\n   else if (!STAT_HACK_P (*slot)\n-\t   && TREE_CODE (val) == TYPE_DECL && DECL_ARTIFICIAL (val))\n-    *slot = stat_hack (old, val);\n+\t   && TREE_CODE (decl) == TYPE_DECL && DECL_ARTIFICIAL (decl))\n+    *slot = stat_hack (old, decl);\n   else if (!STAT_HACK_P (*slot)\n \t   && TREE_CODE (old) == TYPE_DECL && DECL_ARTIFICIAL (old))\n-    *slot = stat_hack (val, old);\n+    *slot = stat_hack (decl, old);\n   else\n     /* The user's placed something in the implementor's\n        namespace.  */\n-    diagnose_name_conflict (val, old);\n+    diagnose_name_conflict (decl, old);\n \n   timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n }"}, {"sha": "bf0bf85cd53b412899589dd436eab646bd891e3c", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "patch": "@@ -178,9 +178,6 @@ struct GTY(()) cp_label_binding {\n    CURRENT_BINDING_LEVEL.  You should use lookup_name_current_level\n    instead.  */\n \n-/* Note that the information in the `names' component of the global contour\n-   is duplicated in the IDENTIFIER_GLOBAL_VALUEs of all identifiers.  */\n-\n struct GTY(()) cp_binding_level {\n   /* A chain of _DECL nodes for all variables, constants, functions,\n       and typedef types.  These are in the reverse of the order\n@@ -303,7 +300,11 @@ extern tree lookup_name_prefer_type (tree, int);\n extern tree lookup_name_real (tree, int, int, bool, int, int);\n extern tree lookup_type_scope (tree, tag_scope);\n extern tree get_namespace_binding (tree ns, tree id);\n-extern void set_global_binding (tree id, tree val);\n+extern void set_global_binding (tree decl);\n+inline tree get_global_binding (tree id)\n+{\n+  return get_namespace_binding (NULL_TREE, id);\n+}\n extern tree lookup_qualified_name (tree, tree, int, bool, /*hidden*/bool = false);\n extern tree lookup_name_nonclass (tree);\n extern bool is_local_extern (tree);"}, {"sha": "5b2326cbbb63cda1c126e052ca4afd0436f7a649", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "patch": "@@ -52,7 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n    type_info objects for static initialization.\n \n    The type information VAR_DECL of a type is held on the\n-   IDENTIFIER_GLOBAL_VALUE of the type's mangled name. That VAR_DECL\n+   get_global_binding of the type's mangled name. That VAR_DECL\n    will be the internal type.  It will usually have the correct\n    internal type reflecting the kind of type it represents (pointer,\n    array, function, class, inherited class, etc).  When the type it\n@@ -226,7 +226,7 @@ throw_bad_cast (void)\n   if (!fn)\n     {\n       tree name = get_identifier (\"__cxa_bad_cast\");\n-      fn = IDENTIFIER_GLOBAL_VALUE (name);\n+      fn = get_global_binding (name);\n       if (!fn)\n \tfn = push_throw_library_fn\n \t  (name, build_function_type_list (ptr_type_node, NULL_TREE));\n@@ -245,7 +245,7 @@ throw_bad_typeid (void)\n   if (!fn)\n     {\n       tree name = get_identifier (\"__cxa_bad_typeid\");\n-      fn = IDENTIFIER_GLOBAL_VALUE (name);\n+      fn = get_global_binding (name);\n       if (!fn)\n \t{\n \t  tree t = build_reference_type (const_type_info_type_node);\n@@ -446,7 +446,7 @@ get_tinfo_decl (tree type)\n \n   name = mangle_typeinfo_for_type (type);\n \n-  d = IDENTIFIER_GLOBAL_VALUE (name);\n+  d = get_global_binding (name);\n   if (!d)\n     {\n       int ix = get_pseudo_ti_index (type);"}]}