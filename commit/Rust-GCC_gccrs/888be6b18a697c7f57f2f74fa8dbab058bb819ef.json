{"sha": "888be6b18a697c7f57f2f74fa8dbab058bb819ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg4YmU2YjE4YTY5N2M3ZjU3ZjJmNzRmYThkYmFiMDU4YmI4MTllZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T12:37:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T12:37:55Z"}, "message": "[multiple changes]\n\n2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_res.adb (Flag_Effectively_Volatile_Objects): New routine.\n\t(Resolve_Actuals): Flag effectively volatile objects with enabled\n\tproperty Async_Writers or Effective_Reads as illegal.\n\t* sem_util.adb (Is_OK_Volatile_Context): Comment reformatting.\n\n2016-04-27  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch3.adb (Make_Predefined_Primitive_Specs):\n\tDo not generate the profile of the equality operator if it has\n\tbeen explicitly defined as abstract in the parent type. Required\n\tto avoid reporting an spurious error.\n\n2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_dim.ads, sem_dim.adb (Check_Expression_Dimensions): New\n\tprocedure to compute the dimension vector of a scalar expression\n\tand compare it with the dimensions if its expected subtype. Used\n\tfor the ultimate components of a multidimensional aggregate,\n\twhose components typically are themselves aggregates that are\n\texpanded separately. Previous to this patch, dimensionality\n\tchecking on such aggregates generated spurious errors.\n\t* sem_aggr.adb (Resolve_Array_Aggregate): Use\n\tCheck_Expression_Dimensions when needed.\n\n2016-04-27  Javier Miranda  <miranda@adacore.com>\n\n\t* einfo.ads, einfo.adb (Corresponding_Function): New attribute\n\t(applicable to E_Procedure).\n\t(Corresponding_Procedure): New attribute (applicable to E_Function).\n\t* exp_util.adb (Build_Procedure_Form): Link the function with\n\tits internally built proc and viceversa.\n\t* sem_ch6.adb (Build_Subprogram_Declaration): Propagate the\n\tattribute Rewritten_For_C and Corresponding_Procedure to the body.\n\t* exp_ch6.adb (Rewritten_For_C_Func_Id): Removed.\n\t(Rewritten_For_C_Proc_Id): Removed.\n\t* exp_unst.adb (Note_Uplevel_Ref): Use the new attribute to\n\tlocate the corresponding procedure.\n\nFrom-SVN: r235493", "tree": {"sha": "d648d4e011ee94742841faaa4b264c82163554e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d648d4e011ee94742841faaa4b264c82163554e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/888be6b18a697c7f57f2f74fa8dbab058bb819ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888be6b18a697c7f57f2f74fa8dbab058bb819ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/888be6b18a697c7f57f2f74fa8dbab058bb819ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888be6b18a697c7f57f2f74fa8dbab058bb819ef/comments", "author": null, "committer": null, "parents": [{"sha": "c7518e6f52aad178875818666fcfc92ff4e08e8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7518e6f52aad178875818666fcfc92ff4e08e8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7518e6f52aad178875818666fcfc92ff4e08e8f"}], "stats": {"total": 397, "additions": 267, "deletions": 130}, "files": [{"sha": "eb0f5ae046f8fc1a5d02cb13a8941e5f6de8bd4d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=888be6b18a697c7f57f2f74fa8dbab058bb819ef", "patch": "@@ -1,3 +1,43 @@\n+2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_res.adb (Flag_Effectively_Volatile_Objects): New routine.\n+\t(Resolve_Actuals): Flag effectively volatile objects with enabled\n+\tproperty Async_Writers or Effective_Reads as illegal.\n+\t* sem_util.adb (Is_OK_Volatile_Context): Comment reformatting.\n+\n+2016-04-27  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch3.adb (Make_Predefined_Primitive_Specs):\n+\tDo not generate the profile of the equality operator if it has\n+\tbeen explicitly defined as abstract in the parent type. Required\n+\tto avoid reporting an spurious error.\n+\n+2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_dim.ads, sem_dim.adb (Check_Expression_Dimensions): New\n+\tprocedure to compute the dimension vector of a scalar expression\n+\tand compare it with the dimensions if its expected subtype. Used\n+\tfor the ultimate components of a multidimensional aggregate,\n+\twhose components typically are themselves aggregates that are\n+\texpanded separately. Previous to this patch, dimensionality\n+\tchecking on such aggregates generated spurious errors.\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): Use\n+\tCheck_Expression_Dimensions when needed.\n+\n+2016-04-27  Javier Miranda  <miranda@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Corresponding_Function): New attribute\n+\t(applicable to E_Procedure).\n+\t(Corresponding_Procedure): New attribute (applicable to E_Function).\n+\t* exp_util.adb (Build_Procedure_Form): Link the function with\n+\tits internally built proc and viceversa.\n+\t* sem_ch6.adb (Build_Subprogram_Declaration): Propagate the\n+\tattribute Rewritten_For_C and Corresponding_Procedure to the body.\n+\t* exp_ch6.adb (Rewritten_For_C_Func_Id): Removed.\n+\t(Rewritten_For_C_Proc_Id): Removed.\n+\t* exp_unst.adb (Note_Uplevel_Ref): Use the new attribute to\n+\tlocate the corresponding procedure.\n+\n 2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch13.adb (Analyze_Aspect_Export_Import): Signal that there is no"}, {"sha": "32a56a6f8f11d34462364b18b2c4d246f9d900fd", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=888be6b18a697c7f57f2f74fa8dbab058bb819ef", "patch": "@@ -256,6 +256,8 @@ package body Einfo is\n    --    Thunk_Entity                    Node31\n    --    Activation_Record_Component     Node31\n \n+   --    Corresponding_Function          Node32\n+   --    Corresponding_Procedure         Node32\n    --    Encapsulating_State             Node32\n    --    No_Tagged_Streams_Pragma        Node32\n \n@@ -915,6 +917,18 @@ package body Einfo is\n       return Node30 (Id);\n    end Corresponding_Equality;\n \n+   function Corresponding_Function (Id : E) return E is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Procedure);\n+      return Node32 (Id);\n+   end Corresponding_Function;\n+\n+   function Corresponding_Procedure (Id : E) return E is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Function);\n+      return Node32 (Id);\n+   end Corresponding_Procedure;\n+\n    function Corresponding_Protected_Entry (Id : E) return E is\n    begin\n       pragma Assert (Ekind (Id) = E_Subprogram_Body);\n@@ -3919,6 +3933,22 @@ package body Einfo is\n       Set_Node30 (Id, V);\n    end Set_Corresponding_Equality;\n \n+   procedure Set_Corresponding_Function (Id : E; V : E) is\n+   begin\n+      pragma Assert\n+        (Ekind (Id) = E_Procedure\n+          and then Rewritten_For_C (V));\n+      Set_Node32 (Id, V);\n+   end Set_Corresponding_Function;\n+\n+   procedure Set_Corresponding_Procedure (Id : E; V : E) is\n+   begin\n+      pragma Assert\n+        (Ekind (Id) = E_Function\n+          and then Rewritten_For_C (Id));\n+      Set_Node32 (Id, V);\n+   end Set_Corresponding_Procedure;\n+\n    procedure Set_Corresponding_Protected_Entry (Id : E; V : E) is\n    begin\n       pragma Assert (Ekind_In (Id, E_Void, E_Subprogram_Body));\n@@ -10276,6 +10306,12 @@ package body Einfo is\n               E_Variable                                   =>\n             Write_Str (\"Encapsulating_State\");\n \n+         when E_Function                                   =>\n+            Write_Str (\"Corresponding_Procedure\");\n+\n+         when E_Procedure                                  =>\n+            Write_Str (\"Corresponding_Function\");\n+\n          when Type_Kind                                    =>\n             Write_Str (\"No_Tagged_Streams_Pragma\");\n "}, {"sha": "e8cee391b5fa12ac918d0f11dc796e7f44e44059", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=888be6b18a697c7f57f2f74fa8dbab058bb819ef", "patch": "@@ -738,6 +738,17 @@ package Einfo is\n --       other function entities, only in implicit inequality routines,\n --       where Comes_From_Source is always False.\n \n+--    Corresponding_Function (Node32)\n+--       Defined on procedures internally built with an extra out parameter\n+--       to return a constrained array type, when Modify_Tree_For_C is set.\n+--       Denotes the function that returns the constrained array type for\n+--       which this procedure was built.\n+\n+--    Corresponding_Procedure (Node32)\n+--       Defined on functions that return a constrained array type, when\n+--       Modify_Tree_For_C is set. Denotes the internally built procedure\n+--       with an extra out parameter created for it.\n+\n --    Corresponding_Protected_Entry (Node18)\n --       Defined in subprogram bodies. Set for subprogram bodies that implement\n --       a protected type entry to point to the entity for the entry.\n@@ -5888,6 +5899,7 @@ package Einfo is\n    --    Subprograms_For_Type                (Node29)\n    --    Corresponding_Equality              (Node30)   (implicit /= only)\n    --    Thunk_Entity                        (Node31)   (thunk case only)\n+   --    Corresponding_Procedure             (Node32)   (generate C code only)\n    --    Linker_Section_Pragma               (Node33)\n    --    Contract                            (Node34)\n    --    Import_Pragma                       (Node35)   (non-generic case only)\n@@ -5938,7 +5950,7 @@ package Einfo is\n    --    Return_Present                      (Flag54)\n    --    Returns_By_Ref                      (Flag90)\n    --    Returns_Limited_View                (Flag134)  (non-generic case only)\n-   --    Rewritten_For_C                     (Flag287)\n+   --    Rewritten_For_C                     (Flag287)  (generate C code only)\n    --    Sec_Stack_Needed_For_Return         (Flag167)\n    --    SPARK_Pragma_Inherited              (Flag265)\n    --    Uses_Sec_Stack                      (Flag95)\n@@ -6201,6 +6213,7 @@ package Einfo is\n    --    Extra_Formals                       (Node28)\n    --    Static_Initialization               (Node30)   (init_proc only)\n    --    Thunk_Entity                        (Node31)   (thunk case only)\n+   --    Corresponding_Function              (Node32)   (generate C code only)\n    --    Linker_Section_Pragma               (Node33)\n    --    Contract                            (Node34)\n    --    Import_Pragma                       (Node35)   (non-generic case only)\n@@ -6774,6 +6787,8 @@ package Einfo is\n    function Corresponding_Concurrent_Type       (Id : E) return E;\n    function Corresponding_Discriminant          (Id : E) return E;\n    function Corresponding_Equality              (Id : E) return E;\n+   function Corresponding_Function              (Id : E) return E;\n+   function Corresponding_Procedure             (Id : E) return E;\n    function Corresponding_Protected_Entry       (Id : E) return E;\n    function Corresponding_Record_Type           (Id : E) return E;\n    function Corresponding_Remote_Type           (Id : E) return E;\n@@ -7441,6 +7456,8 @@ package Einfo is\n    procedure Set_Corresponding_Concurrent_Type   (Id : E; V : E);\n    procedure Set_Corresponding_Discriminant      (Id : E; V : E);\n    procedure Set_Corresponding_Equality          (Id : E; V : E);\n+   procedure Set_Corresponding_Function          (Id : E; V : E);\n+   procedure Set_Corresponding_Procedure         (Id : E; V : E);\n    procedure Set_Corresponding_Protected_Entry   (Id : E; V : E);\n    procedure Set_Corresponding_Record_Type       (Id : E; V : E);\n    procedure Set_Corresponding_Remote_Type       (Id : E; V : E);"}, {"sha": "5f6e3cd9eb16a526d7717ed018d299578d5083fc", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=888be6b18a697c7f57f2f74fa8dbab058bb819ef", "patch": "@@ -9637,11 +9637,13 @@ package body Exp_Ch3 is\n                   exit;\n \n                --  If the parent is not an interface type and has an abstract\n-               --  equality function, the inherited equality is abstract as\n-               --  well, and no body can be created for it.\n+               --  equality function explicitly defined in the sources, then\n+               --  the inherited equality is abstract as well, and no body can\n+               --  be created for it.\n \n                elsif not Is_Interface (Etype (Tag_Typ))\n                  and then Present (Alias (Node (Prim)))\n+                 and then Comes_From_Source (Alias (Node (Prim)))\n                  and then Is_Abstract_Subprogram (Alias (Node (Prim)))\n                then\n                   Eq_Needed := False;"}, {"sha": "1d3ab7d80df86699b4c8c6b894f3b619f63f2086", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 5, "deletions": 77, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=888be6b18a697c7f57f2f74fa8dbab058bb819ef", "patch": "@@ -2502,47 +2502,9 @@ package body Exp_Ch6 is\n          end if;\n       end New_Value;\n \n-      function Rewritten_For_C_Func_Id (Proc_Id : Entity_Id) return Entity_Id;\n-      --  Given the Id of the procedure with an extra out parameter internally\n-      --  built to handle functions that return a constrained array type return\n-      --  the Id of the corresponding function.\n-\n-      -----------------------------\n-      -- Rewritten_For_C_Func_Id --\n-      -----------------------------\n-\n-      function Rewritten_For_C_Func_Id (Proc_Id : Entity_Id) return Entity_Id\n-      is\n-         Decl      : constant Node_Id := Unit_Declaration_Node (Proc_Id);\n-         Func_Decl : Node_Id;\n-         Func_Id   : Entity_Id;\n-\n-      begin\n-         pragma Assert (Rewritten_For_C (Proc_Id));\n-         pragma Assert (Nkind (Decl) = N_Subprogram_Body);\n-\n-         Func_Decl := Nlists.Prev (Decl);\n-\n-         while Present (Func_Decl)\n-           and then\n-             (Nkind (Func_Decl) = N_Freeze_Entity\n-                or else\n-              Nkind (Func_Decl) /= N_Subprogram_Declaration\n-                or else\n-              Nkind (Specification (Func_Decl)) /= N_Function_Specification)\n-         loop\n-            Func_Decl := Nlists.Prev (Func_Decl);\n-         end loop;\n-\n-         pragma Assert (Present (Func_Decl));\n-         Func_Id := Defining_Entity (Specification (Func_Decl));\n-         pragma Assert (Chars (Proc_Id) = Chars (Func_Id));\n-         return Func_Id;\n-      end Rewritten_For_C_Func_Id;\n-\n       --  Local variables\n \n-      Remote        : constant Boolean   := Is_Remote_Call (Call_Node);\n+      Remote        : constant Boolean := Is_Remote_Call (Call_Node);\n       Actual        : Node_Id;\n       Formal        : Entity_Id;\n       Orig_Subp     : Entity_Id := Empty;\n@@ -2706,8 +2668,9 @@ package body Exp_Ch6 is\n                               N_Subprogram_Body\n          then\n             Set_Entity (Name (Call_Node),\n-              Rewritten_For_C_Func_Id\n-                (Ultimate_Alias (Entity (Name (Call_Node)))));\n+              Corresponding_Function\n+                (Corresponding_Procedure\n+                  (Ultimate_Alias (Entity (Name (Call_Node))))));\n          end if;\n \n          Rewrite_Function_Call_For_C (Call_Node);\n@@ -8405,45 +8368,10 @@ package body Exp_Ch6 is\n    ---------------------------------\n \n    procedure Rewrite_Function_Call_For_C (N : Node_Id) is\n-      function Rewritten_For_C_Proc_Id (Func_Id : Entity_Id) return Entity_Id;\n-      --  Given the Id of the function that returns a constrained array type\n-      --  return the Id of its internally built procedure with an extra out\n-      --  parameter.\n-\n-      -----------------------------\n-      -- Rewritten_For_C_Proc_Id --\n-      -----------------------------\n-\n-      function Rewritten_For_C_Proc_Id (Func_Id : Entity_Id) return Entity_Id\n-      is\n-         Func_Decl : constant Node_Id := Unit_Declaration_Node (Func_Id);\n-         Proc_Decl : Node_Id;\n-         Proc_Id   : Entity_Id;\n-\n-      begin\n-         Proc_Decl := Next (Func_Decl);\n-\n-         while Present (Proc_Decl)\n-           and then\n-             (Nkind (Proc_Decl) = N_Freeze_Entity\n-                or else\n-              Nkind (Proc_Decl) /= N_Subprogram_Declaration)\n-         loop\n-            Proc_Decl := Next (Proc_Decl);\n-         end loop;\n-\n-         pragma Assert (Present (Proc_Decl));\n-         Proc_Id := Defining_Entity (Proc_Decl);\n-         pragma Assert (Chars (Proc_Id) = Chars (Func_Id));\n-         return Proc_Id;\n-      end Rewritten_For_C_Proc_Id;\n-\n-      --  Local variables\n-\n       Orig_Func   : constant Entity_Id  := Entity (Name (N));\n       Func_Id     : constant Entity_Id  := Ultimate_Alias (Orig_Func);\n       Par         : constant Node_Id    := Parent (N);\n-      Proc_Id     : constant Entity_Id  := Rewritten_For_C_Proc_Id (Func_Id);\n+      Proc_Id     : constant Entity_Id  := Corresponding_Procedure (Func_Id);\n       Loc         : constant Source_Ptr := Sloc (Par);\n       Actuals     : List_Id;\n       Last_Actual : Node_Id;"}, {"sha": "302cc1008341849dbaf8d68f6ed6a277bda5ab7a", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=888be6b18a697c7f57f2f74fa8dbab058bb819ef", "patch": "@@ -507,7 +507,7 @@ package body Exp_Unst is\n \n                elsif Ekind (Callee) = E_Function\n                  and then Rewritten_For_C (Callee)\n-                 and then Next_Entity (Callee) = Caller\n+                 and then Corresponding_Procedure (Callee) = Caller\n                then\n                   return;\n                end if;"}, {"sha": "fe0f5882f791d2c4a992bf6ecdcf8c1788338729", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=888be6b18a697c7f57f2f74fa8dbab058bb819ef", "patch": "@@ -996,9 +996,12 @@ package body Exp_Util is\n \n       Set_Is_Immediately_Visible (Defining_Entity (Proc_Decl), False);\n \n-      --  Mark the function as having a procedure form\n+      --  Mark the function as having a procedure form and link the function\n+      --  and its internally built procedure.\n \n       Set_Rewritten_For_C (Subp);\n+      Set_Corresponding_Procedure (Subp, Defining_Entity (Proc_Decl));\n+      Set_Corresponding_Function (Defining_Entity (Proc_Decl), Subp);\n    end Build_Procedure_Form;\n \n    ------------------------"}, {"sha": "575a1d2ea3ccf8d1ca7aa210694589d885937a2e", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=888be6b18a697c7f57f2f74fa8dbab058bb819ef", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2052,6 +2052,13 @@ package body Sem_Aggr is\n                      Set_Parent (Expr, Parent (Expression (Assoc)));\n                      Analyze (Expr);\n \n+                     --  Compute its dimensions now, rather than at the end\n+                     --  of resolution, because in the case of multidimensional\n+                     --  aggregates subsequent expansion may lead to spurious\n+                     --  errors.\n+\n+                     Check_Expression_Dimensions (Expr, Component_Typ);\n+\n                      --  If the expression is a literal, propagate this info\n                      --  to the expression in the association, to enable some\n                      --  optimizations downstream."}, {"sha": "726c20ff3e86c4e4e31668b66169ab90240bcf73", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=888be6b18a697c7f57f2f74fa8dbab058bb819ef", "patch": "@@ -2405,14 +2405,20 @@ package body Sem_Ch6 is\n \n          Analyze (Subp_Decl);\n \n-         --  Propagate the attribute Rewritten_For_C to the body since the\n-         --  expander may generate calls using that entity. Required to ensure\n-         --  that Expand_Call rewrites calls to this function by calls to the\n-         --  built procedure.\n+         --  Propagate the attributes Rewritten_For_C and Corresponding_Proc to\n+         --  the body since the expander may generate calls using that entity.\n+         --  Required to ensure that Expand_Call rewrites calls to this\n+         --  function by calls to the built procedure.\n \n-         if Nkind (Body_Spec) = N_Function_Specification then\n-            Set_Rewritten_For_C (Defining_Entity (Body_Spec),\n-              Rewritten_For_C (Defining_Entity (Specification (Subp_Decl))));\n+         if Modify_Tree_For_C\n+           and then Nkind (Body_Spec) = N_Function_Specification\n+           and then\n+              Rewritten_For_C (Defining_Entity (Specification (Subp_Decl)))\n+         then\n+            Set_Rewritten_For_C (Defining_Entity (Body_Spec));\n+            Set_Corresponding_Procedure (Defining_Entity (Body_Spec),\n+              Corresponding_Procedure\n+                (Defining_Entity (Specification (Subp_Decl))));\n          end if;\n \n          --  Analyze any relocated source pragmas or pragmas created for aspect"}, {"sha": "754be84ab0df9812d896daee8654af56467af2bd", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=888be6b18a697c7f57f2f74fa8dbab058bb819ef", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2011-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1235,10 +1235,12 @@ package body Sem_Dim is\n          --  since it may not be decorated at this point. We also don't want to\n          --  issue the same error message multiple times on the same expression\n          --  (may happen when an aggregate is converted into a positional\n-         --  aggregate).\n+         --  aggregate). We also must verify that this is a scalar component,\n+         --  and not a subaggregate of a multidimensional aggregate.\n \n          if Comes_From_Source (Original_Node (Expr))\n            and then Present (Etype (Expr))\n+           and then Is_Numeric_Type (Etype (Expr))\n            and then Dimensions_Of (Expr) /= Dims_Of_Comp_Typ\n            and then Sloc (Comp) /= Sloc (Prev (Comp))\n          then\n@@ -2270,6 +2272,27 @@ package body Sem_Dim is\n       end case;\n    end Analyze_Dimension_Unary_Op;\n \n+   ---------------------------------\n+   -- Check_Expression_Dimensions --\n+   ---------------------------------\n+\n+   procedure Check_Expression_Dimensions\n+      (Expr : Node_Id;\n+       Typ  : Entity_Id)\n+   is\n+   begin\n+      if Is_Floating_Point_Type (Etype (Expr)) then\n+         Analyze_Dimension (Expr);\n+\n+         if Dimensions_Of (Expr) /= Dimensions_Of (Typ) then\n+            Error_Msg_N (\"dimensions mismatch in array aggregate\", Expr);\n+            Error_Msg_N\n+              (\"\\expected dimension \" & Dimensions_Msg_Of (Typ)\n+               & \", found \" & Dimensions_Msg_Of (Expr), Expr);\n+         end if;\n+      end if;\n+   end Check_Expression_Dimensions;\n+\n    ---------------------\n    -- Copy_Dimensions --\n    ---------------------"}, {"sha": "bce497a5850864aa6554076cead611cf9421157a", "filename": "gcc/ada/sem_dim.ads", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fsem_dim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fsem_dim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.ads?ref=888be6b18a697c7f57f2f74fa8dbab058bb819ef", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2011-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -164,6 +164,16 @@ package Sem_Dim is\n    --  For sub spec N, issue a warning for each dimensioned formal with a\n    --  literal default value in the list of formals Formals.\n \n+   procedure Check_Expression_Dimensions\n+      (Expr : Node_Id;\n+       Typ  : Entity_Id);\n+   --  Compute dimensions of a floating-point expression and compare them\n+   --  with the dimensions of a the given type. Used to verify dimensions\n+   --  of the components of a multidimensional array type, for which components\n+   --  are typically themselves arrays. The resolution of such arrays delays\n+   --  the resolution of the ultimate components to a separate phase, which\n+   --  forces this separate dimension verification.\n+\n    procedure Copy_Dimensions (From, To : Node_Id);\n    --  Copy dimension vector of node From to node To. Note that To must be a\n    --  node that is allowed to contain a dimension (see OK_For_Dimension in"}, {"sha": "57a7fc9e5398518636882ef50be9aded8f3c8f7c", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 69, "deletions": 6, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=888be6b18a697c7f57f2f74fa8dbab058bb819ef", "patch": "@@ -3107,6 +3107,10 @@ package body Sem_Res is\n       --  interpretation, but the form of the actual can only be determined\n       --  once the primitive operation is identified.\n \n+      procedure Flag_Effectively_Volatile_Objects (Expr : Node_Id);\n+      --  Emit an error concerning the illegal usage of an effectively volatile\n+      --  object in interfering context (SPARK RM 7.13(12)).\n+\n       procedure Insert_Default;\n       --  If the actual is missing in a call, insert in the actuals list\n       --  an instance of the default expression. The insertion is always\n@@ -3360,6 +3364,55 @@ package body Sem_Res is\n          end if;\n       end Check_Prefixed_Call;\n \n+      ---------------------------------------\n+      -- Flag_Effectively_Volatile_Objects --\n+      ---------------------------------------\n+\n+      procedure Flag_Effectively_Volatile_Objects (Expr : Node_Id) is\n+         function Flag_Object (N : Node_Id) return Traverse_Result;\n+         --  Determine whether arbitrary node N denotes an effectively volatile\n+         --  object and if it does, emit an error.\n+\n+         -----------------\n+         -- Flag_Object --\n+         -----------------\n+\n+         function Flag_Object (N : Node_Id) return Traverse_Result is\n+            Id : Entity_Id;\n+\n+         begin\n+            --  Do not consider nested function calls because they have already\n+            --  been processed during their own resolution.\n+\n+            if Nkind (N) = N_Function_Call then\n+               return Skip;\n+\n+            elsif Is_Entity_Name (N) and then Present (Entity (N)) then\n+               Id := Entity (N);\n+\n+               if Is_Object (Id)\n+                 and then Is_Effectively_Volatile (Id)\n+                 and then (Async_Writers_Enabled (Id)\n+                            or else Effective_Reads_Enabled (Id))\n+               then\n+                  Error_Msg_N\n+                    (\"volatile object cannot appear in this context (SPARK \"\n+                     & \"RM 7.1.3(11))\", N);\n+                  return Skip;\n+               end if;\n+            end if;\n+\n+            return OK;\n+         end Flag_Object;\n+\n+         procedure Flag_Objects is new Traverse_Proc (Flag_Object);\n+\n+      --  Start of processing for Flag_Effectively_Volatile_Objects\n+\n+      begin\n+         Flag_Objects (Expr);\n+      end Flag_Effectively_Volatile_Objects;\n+\n       --------------------\n       -- Insert_Default --\n       --------------------\n@@ -3461,7 +3514,6 @@ package body Sem_Res is\n             then\n                Set_Is_Controlling_Actual (Actval);\n             end if;\n-\n          end if;\n \n          --  If the default expression raises constraint error, then just\n@@ -4473,10 +4525,8 @@ package body Sem_Res is\n             --  they are not standard Ada legality rule. Internally generated\n             --  temporaries are ignored.\n \n-            if SPARK_Mode = On\n-              and then Comes_From_Source (A)\n-              and then Is_Effectively_Volatile_Object (A)\n-            then\n+            if SPARK_Mode = On and then Comes_From_Source (A) then\n+\n                --  An effectively volatile object may act as an actual when the\n                --  corresponding formal is of a non-scalar effectively volatile\n                --  type (SPARK RM 7.1.3(11)).\n@@ -4493,10 +4543,23 @@ package body Sem_Res is\n                elsif Is_Unchecked_Conversion_Instance (Nam) then\n                   null;\n \n-               else\n+               --  The actual denotes an object\n+\n+               elsif Is_Effectively_Volatile_Object (A) then\n                   Error_Msg_N\n                     (\"volatile object cannot act as actual in a call (SPARK \"\n                      & \"RM 7.1.3(11))\", A);\n+\n+               --  Otherwise the actual denotes an expression. Inspect the\n+               --  expression and flag each effectively volatile object with\n+               --  enabled property Async_Writers or Effective_Reads as illegal\n+               --  because it apprears within an interfering context. Note that\n+               --  this is usually done in Resolve_Entity_Name, but when the\n+               --  effectively volatile object appears as an actual in a call,\n+               --  the call must be resolved first.\n+\n+               else\n+                  Flag_Effectively_Volatile_Objects (A);\n                end if;\n \n                --  Detect an external variable with an enabled property that"}, {"sha": "b49c78885494c747377b0f2690679948c52a8abd", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888be6b18a697c7f57f2f74fa8dbab058bb819ef/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=888be6b18a697c7f57f2f74fa8dbab058bb819ef", "patch": "@@ -9314,7 +9314,7 @@ package body Sem_Util is\n            Has_Default_Aspect (Typ)\n              or else Has_Full_Default_Initialization (Component_Type (Typ));\n \n-      --  A protected type, record type or type extension is fully default\n+      --  A protected type, record type, or type extension is fully default\n       --  initialized if all its components either carry an initialization\n       --  expression or have a type that is fully default initialized. The\n       --  parent type of a type extension must be fully default initialized.\n@@ -13159,7 +13159,7 @@ package body Sem_Util is\n             when N_Function_Call =>\n                return Etype (N) /= Standard_Void_Type;\n \n-            --  Attributes 'Input, 'Loop_Entry, 'Old and 'Result produce\n+            --  Attributes 'Input, 'Loop_Entry, 'Old, and 'Result produce\n             --  objects.\n \n             when N_Attribute_Reference =>\n@@ -13346,14 +13346,15 @@ package body Sem_Util is\n    is\n       function Is_Protected_Operation_Call (Nod : Node_Id) return Boolean;\n       --  Determine whether an arbitrary node denotes a call to a protected\n-      --  entry, function or procedure in prefixed form where the prefix is\n+      --  entry, function, or procedure in prefixed form where the prefix is\n       --  Obj_Ref.\n \n       function Within_Check (Nod : Node_Id) return Boolean;\n       --  Determine whether an arbitrary node appears in a check node\n \n       function Within_Subprogram_Call (Nod : Node_Id) return Boolean;\n-      --  Determine whether an arbitrary node appears in a procedure call\n+      --  Determine whether an arbitrary node appears in an entry, function, or\n+      --  procedure call.\n \n       function Within_Volatile_Function (Id : Entity_Id) return Boolean;\n       --  Determine whether an arbitrary entity appears in a volatile function\n@@ -13405,7 +13406,7 @@ package body Sem_Util is\n             if Nkind (Par) in N_Raise_xxx_Error then\n                return True;\n \n-               --  Prevent the search from going too far\n+            --  Prevent the search from going too far\n \n             elsif Is_Body_Or_Package_Declaration (Par) then\n                exit;\n@@ -13435,7 +13436,7 @@ package body Sem_Util is\n             then\n                return True;\n \n-               --  Prevent the search from going too far\n+            --  Prevent the search from going too far\n \n             elsif Is_Body_Or_Package_Declaration (Par) then\n                exit;\n@@ -13481,8 +13482,8 @@ package body Sem_Util is\n       if Nkind (Context) = N_Assignment_Statement then\n          return True;\n \n-         --  The volatile object is part of the initialization expression of\n-         --  another object.\n+      --  The volatile object is part of the initialization expression of\n+      --  another object.\n \n       elsif Nkind (Context) = N_Object_Declaration\n         and then Present (Expression (Context))\n@@ -13497,21 +13498,21 @@ package body Sem_Util is\n          if Is_Return_Object (Obj_Id) then\n             return Within_Volatile_Function (Obj_Id);\n \n-            --  Otherwise this is a normal object initialization\n+         --  Otherwise this is a normal object initialization\n \n          else\n             return True;\n          end if;\n \n-         --  The volatile object acts as the name of a renaming declaration\n+      --  The volatile object acts as the name of a renaming declaration\n \n       elsif Nkind (Context) = N_Object_Renaming_Declaration\n         and then Name (Context) = Obj_Ref\n       then\n          return True;\n \n-         --  The volatile object appears as an actual parameter in a call to an\n-         --  instance of Unchecked_Conversion whose result is renamed.\n+      --  The volatile object appears as an actual parameter in a call to an\n+      --  instance of Unchecked_Conversion whose result is renamed.\n \n       elsif Nkind (Context) = N_Function_Call\n         and then Is_Entity_Name (Name (Context))\n@@ -13520,23 +13521,23 @@ package body Sem_Util is\n       then\n          return True;\n \n-         --  The volatile object is actually the prefix in a protected entry,\n-         --  function, or procedure call.\n+      --  The volatile object is actually the prefix in a protected entry,\n+      --  function, or procedure call.\n \n       elsif Is_Protected_Operation_Call (Context) then\n          return True;\n \n-         --  The volatile object appears as the expression of a simple return\n-         --  statement that applies to a volatile function.\n+      --  The volatile object appears as the expression of a simple return\n+      --  statement that applies to a volatile function.\n \n       elsif Nkind (Context) = N_Simple_Return_Statement\n         and then Expression (Context) = Obj_Ref\n       then\n          return\n            Within_Volatile_Function (Return_Statement_Entity (Context));\n \n-         --  The volatile object appears as the prefix of a name occurring in a\n-         --  non-interfering context.\n+      --  The volatile object appears as the prefix of a name occurring in a\n+      --  non-interfering context.\n \n       elsif Nkind_In (Context, N_Attribute_Reference,\n                       N_Explicit_Dereference,\n@@ -13550,8 +13551,8 @@ package body Sem_Util is\n       then\n          return True;\n \n-         --  The volatile object appears as the expression of a type conversion\n-         --  occurring in a non-interfering context.\n+      --  The volatile object appears as the expression of a type conversion\n+      --  occurring in a non-interfering context.\n \n       elsif Nkind_In (Context, N_Type_Conversion,\n                       N_Unchecked_Type_Conversion)\n@@ -13562,21 +13563,22 @@ package body Sem_Util is\n       then\n          return True;\n \n-         --  Allow references to volatile objects in various checks. This is\n-         --  not a direct SPARK 2014 requirement.\n+      --  Allow references to volatile objects in various checks. This is not a\n+      --  direct SPARK 2014 requirement.\n \n       elsif Within_Check (Context) then\n          return True;\n \n-         --  Assume that references to effectively volatile objects that appear\n-         --  as actual parameters in a subprogram call are always legal. A full\n-         --  legality check is done when the actuals are resolved.\n+      --  Assume that references to effectively volatile objects that appear\n+      --  as actual parameters in a subprogram call are always legal. A full\n+      --  legality check is done when the actuals are resolved (see routine\n+      --  Resolve_Actuals).\n \n       elsif Within_Subprogram_Call (Context) then\n          return True;\n \n-         --  Otherwise the context is not suitable for an effectively volatile\n-         --  object.\n+      --  Otherwise the context is not suitable for an effectively volatile\n+      --  object.\n \n       else\n          return False;\n@@ -13888,7 +13890,7 @@ package body Sem_Util is\n \n    begin\n       --  Verify that prefix is analyzed and has the proper form. Note that\n-      --  the attributes Elab_Spec, Elab_Body and Elab_Subp_Body which also\n+      --  the attributes Elab_Spec, Elab_Body, and Elab_Subp_Body, which also\n       --  produce the address of an entity, do not analyze their prefix\n       --  because they denote entities that are not necessarily visible.\n       --  Neither of them can apply to a protected type.\n@@ -16034,7 +16036,7 @@ package body Sem_Util is\n \n       procedure Copy_Itype_With_Replacement (New_Itype : Entity_Id) is\n       begin\n-         --  Translate Next_Entity, Scope and Etype fields, in case they\n+         --  Translate Next_Entity, Scope, and Etype fields, in case they\n          --  reference entities that have been mapped into copies.\n \n          Set_Next_Entity (New_Itype, Assoc (Next_Entity (New_Itype)));\n@@ -19986,8 +19988,8 @@ package body Sem_Util is\n          return False;\n       end if;\n \n-      --  Check that the size of the component is 8, 16, 32 or 64 bits and that\n-      --  Typ is properly aligned.\n+      --  Check that the size of the component is 8, 16, 32, or 64 bits and\n+      --  that Typ is properly aligned.\n \n       case Size is\n          when 8 | 16 | 32 | 64 =>"}]}