{"sha": "f267a3109884c6b623b72f20cbc208561efaf5ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI2N2EzMTA5ODg0YzZiNjIzYjcyZjIwY2JjMjA4NTYxZWZhZjVmZg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-16T08:11:07Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-16T21:35:34Z"}, "message": "d: Move generation of array bounds error to own function.\n\ngcc/d/ChangeLog:\n\n\t* d-codegen.cc (build_array_bounds_call): New function.\n\t(build_bounds_condition): Use build_array_bounds_call.\n\t* d-lang.cc (d_init_options): Explicitly set default check action to\n\tCHECKACTION_D.\n\t(d_post_options): Set check action to CHECKACTION_C if the flag\n\t-fno-druntime was seen.\n\t* d-tree.h (build_array_bounds_call): Declare.\n\t* expr.cc (ExprVisitor::visit (AssertExp *)): Use\n\tbuild_array_bounds_call.", "tree": {"sha": "855ddae45ab983915bafb49f5d4a5183a2f7c1c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/855ddae45ab983915bafb49f5d4a5183a2f7c1c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f267a3109884c6b623b72f20cbc208561efaf5ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f267a3109884c6b623b72f20cbc208561efaf5ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f267a3109884c6b623b72f20cbc208561efaf5ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f267a3109884c6b623b72f20cbc208561efaf5ff/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e40b11a91cb345db1324c3cb8f75b01e28056693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e40b11a91cb345db1324c3cb8f75b01e28056693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e40b11a91cb345db1324c3cb8f75b01e28056693"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "9d13e1263a995cc3e597dd432d55002889af6618", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f267a3109884c6b623b72f20cbc208561efaf5ff/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f267a3109884c6b623b72f20cbc208561efaf5ff/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=f267a3109884c6b623b72f20cbc208561efaf5ff", "patch": "@@ -1712,6 +1712,26 @@ void_okay_p (tree t)\n   return t;\n }\n \n+/* Builds a CALL_EXPR at location LOC in the source file to execute when an\n+   array bounds check fails.  */\n+\n+tree\n+build_array_bounds_call (const Loc &loc)\n+{\n+  switch (global.params.checkAction)\n+    {\n+    case CHECKACTION_D:\n+      return d_assert_call (loc, LIBCALL_ARRAY_BOUNDS);\n+\n+    case CHECKACTION_C:\n+    case CHECKACTION_halt:\n+      return build_call_expr (builtin_decl_explicit (BUILT_IN_TRAP), 0);\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* Builds a bounds condition checking that INDEX is between 0 and LEN.\n    The condition returns the INDEX if true, or throws a RangeError.\n    If INCLUSIVE, we allow INDEX == LEN to return true also.  */\n@@ -1731,9 +1751,7 @@ build_bounds_condition (const Loc& loc, tree index, tree len, bool inclusive)\n   tree condition = fold_build2 (inclusive ? GT_EXPR : GE_EXPR,\n \t\t\t\td_bool_type, index, len);\n   /* Terminate the program with a trap if no D runtime present.  */\n-  tree boundserr = (global.params.checkAction == CHECKACTION_D)\n-    ? d_assert_call (loc, LIBCALL_ARRAY_BOUNDS)\n-    : build_call_expr (builtin_decl_explicit (BUILT_IN_TRAP), 0);\n+  tree boundserr = build_array_bounds_call (loc);\n \n   return build_condition (TREE_TYPE (index), condition, boundserr, index);\n }"}, {"sha": "085d8393b5a4d1251747cdf865bdf4c7ae5cc2e1", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f267a3109884c6b623b72f20cbc208561efaf5ff/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f267a3109884c6b623b72f20cbc208561efaf5ff/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=f267a3109884c6b623b72f20cbc208561efaf5ff", "patch": "@@ -285,6 +285,7 @@ d_init_options (unsigned int, cl_decoded_option *decoded_options)\n   global.params.useOut = CHECKENABLEdefault;\n   global.params.useArrayBounds = CHECKENABLEdefault;\n   global.params.useSwitchError = CHECKENABLEdefault;\n+  global.params.checkAction = CHECKACTION_D;\n   global.params.useModuleInfo = true;\n   global.params.useTypeInfo = true;\n   global.params.useExceptions = true;\n@@ -775,7 +776,7 @@ d_post_options (const char ** fn)\n       if (!global_options_set.x_flag_exceptions)\n \tglobal.params.useExceptions = false;\n \n-      global.params.checkAction = CHECKACTION_halt;\n+      global.params.checkAction = CHECKACTION_C;\n     }\n \n   /* Keep in sync with existing -fbounds-check flag.  */"}, {"sha": "dd38b7328370acd1c934021160ebe32cdec21982", "filename": "gcc/d/d-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f267a3109884c6b623b72f20cbc208561efaf5ff/gcc%2Fd%2Fd-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f267a3109884c6b623b72f20cbc208561efaf5ff/gcc%2Fd%2Fd-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-tree.h?ref=f267a3109884c6b623b72f20cbc208561efaf5ff", "patch": "@@ -560,6 +560,7 @@ extern tree build_memref (tree, tree, tree);\n extern tree build_array_set (tree, tree, tree);\n extern tree build_array_from_val (Type *, tree);\n extern tree void_okay_p (tree);\n+extern tree build_array_bounds_call (const Loc &);\n extern tree build_bounds_condition (const Loc &, tree, tree, bool);\n extern bool array_bounds_check (void);\n extern tree bind_expr (tree, tree);"}, {"sha": "bf9bb45690ad205f16bf7f19d1ad08f1d215a562", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f267a3109884c6b623b72f20cbc208561efaf5ff/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f267a3109884c6b623b72f20cbc208561efaf5ff/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=f267a3109884c6b623b72f20cbc208561efaf5ff", "patch": "@@ -1218,9 +1218,7 @@ class ExprVisitor : public Visitor\n \n \tif (!e->indexIsInBounds && array_bounds_check ())\n \t  {\n-\t    tree tassert = (global.params.checkAction == CHECKACTION_D)\n-\t      ? d_assert_call (e->loc, LIBCALL_ARRAY_BOUNDS)\n-\t      : build_call_expr (builtin_decl_explicit (BUILT_IN_TRAP), 0);\n+\t    tree tassert = build_array_bounds_call (e->loc);\n \n \t    result = d_save_expr (result);\n \t    result = build_condition (TREE_TYPE (result),"}]}