{"sha": "c297b7cd54c0a39c906a3e445a36c16aeef7defd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI5N2I3Y2Q1NGMwYTM5YzkwNmEzZTQ0NWEzNmMxNmFlZWY3ZGVmZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-12-02T20:01:37Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-12-02T20:01:37Z"}, "message": "re PR c/68513 (ICE in gimplify_expr, at gimplify.c:8832, c_maybe_const_expr in IL)\n\n\tPR c/68513\n\t* gcc.dg/pr68513.c: New test.\n\nFrom-SVN: r231205", "tree": {"sha": "2f734c126e42085a94ee0e870fa3a1639d426798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f734c126e42085a94ee0e870fa3a1639d426798"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c297b7cd54c0a39c906a3e445a36c16aeef7defd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c297b7cd54c0a39c906a3e445a36c16aeef7defd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c297b7cd54c0a39c906a3e445a36c16aeef7defd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c297b7cd54c0a39c906a3e445a36c16aeef7defd/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f9bcf538c95f97e7920dc6c91085c4180678d63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f9bcf538c95f97e7920dc6c91085c4180678d63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f9bcf538c95f97e7920dc6c91085c4180678d63"}], "stats": {"total": 130, "additions": 130, "deletions": 0}, "files": [{"sha": "1fc69c87be1ffa5edc094f964fa4bda99b5c1b80", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c297b7cd54c0a39c906a3e445a36c16aeef7defd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c297b7cd54c0a39c906a3e445a36c16aeef7defd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c297b7cd54c0a39c906a3e445a36c16aeef7defd", "patch": "@@ -1,3 +1,8 @@\n+2015-12-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/68513\n+\t* gcc.dg/pr68513.c: New test.\n+\n 2015-12-02  Cesar Philippidis  <cesar@codesourcery.com>\n \n \tPR fortran/63861"}, {"sha": "86f878d5d73533e5da0f5713236e0465f4cda078", "filename": "gcc/testsuite/gcc.dg/pr68513.c", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c297b7cd54c0a39c906a3e445a36c16aeef7defd/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68513.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c297b7cd54c0a39c906a3e445a36c16aeef7defd/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68513.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68513.c?ref=c297b7cd54c0a39c906a3e445a36c16aeef7defd", "patch": "@@ -0,0 +1,125 @@\n+/* PR c/68513 */\n+/* { dg-do compile } */\n+/* { dg-options \"-funsafe-math-optimizations -fno-math-errno -O -Wno-div-by-zero\" } */\n+\n+int i;\n+unsigned u;\n+volatile int *e;\n+\n+#define E (i ? *e : 0)\n+\n+/* Can't trigger some of them because operand_equal_p will return false\n+   for side-effects.  */\n+\n+/* (x & ~m) | (y & m) -> ((x ^ y) & m) ^ x */\n+int\n+fn1 (void)\n+{\n+  int r = 0;\n+  r += (short) (E & ~u | i & u);\n+  r += -(short) (E & ~u | i & u);\n+  r += (short) -(E & ~u | i & u);\n+  return r;\n+}\n+\n+/* sqrt(x) < y is x >= 0 && x != +Inf, when y is large.  */\n+double\n+fn2 (void)\n+{\n+  double r;\n+  r = __builtin_sqrt (E) < __builtin_inf ();\n+  return r;\n+}\n+\n+/* sqrt(x) < c is the same as x >= 0 && x < c*c.  */\n+double\n+fn3 (void)\n+{\n+  double r;\n+  r = __builtin_sqrt (E) < 1.3;\n+  return r;\n+}\n+\n+/* copysign(x,y)*copysign(x,y) -> x*x.  */\n+double\n+fn4 (double y, double x)\n+{\n+  return __builtin_copysign (E, y) * __builtin_copysign (E, y);\n+}\n+\n+/* x <= +Inf is the same as x == x, i.e. !isnan(x).  */\n+int\n+fn5 (void)\n+{\n+  return E <= __builtin_inf ();\n+}\n+\n+/* Fold (A & ~B) - (A & B) into (A ^ B) - B.  */\n+int\n+fn6 (void)\n+{\n+  return (i & ~E) - (i & E);\n+}\n+\n+/* Fold (A & B) - (A & ~B) into B - (A ^ B).  */\n+int\n+fn7 (void)\n+{\n+  return (i & E) - (i & ~E);\n+}\n+\n+/* x + (x & 1) -> (x + 1) & ~1 */\n+int\n+fn8 (void)\n+{\n+  return E + (E & 1);\n+}\n+\n+/* Simplify comparison of something with itself.  */\n+int\n+fn9 (void)\n+{\n+  return E <= E | E >= E;\n+}\n+\n+/* Fold (A & ~B) - (A & B) into (A ^ B) - B.  */\n+int\n+fn10 (void)\n+{\n+  return (i & ~E) - (i & E);\n+}\n+\n+/* abs(x)*abs(x) -> x*x.  Should be valid for all types.  */\n+int\n+fn11 (void)\n+{\n+  return __builtin_abs (E) * __builtin_abs (E);\n+}\n+\n+/* (x | CST1) & CST2 -> (x & CST2) | (CST1 & CST2) */\n+int\n+fn12 (void)\n+{\n+  return (E | 11) & 12;\n+}\n+\n+/* fold_range_test */\n+int\n+fn13 (const char *s)\n+{\n+  return s[E] != '\\0' && s[E] != '/';\n+}\n+\n+/* fold_comparison */\n+int\n+fn14 (void)\n+{\n+  return (!!i ? : (u *= E / 0)) >= (u = E);\n+}\n+\n+/* fold_mult_zconjz */\n+_Complex int\n+fn15 (_Complex volatile int *z)\n+{\n+  return *z * ~*z;\n+}"}]}