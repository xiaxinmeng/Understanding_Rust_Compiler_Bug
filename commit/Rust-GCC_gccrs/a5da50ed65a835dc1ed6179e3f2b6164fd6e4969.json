{"sha": "a5da50ed65a835dc1ed6179e3f2b6164fd6e4969", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVkYTUwZWQ2NWE4MzVkYzFlZDYxNzllM2YyYjYxNjRmZDZlNDk2OQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-08-10T17:10:26Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-08-10T17:10:26Z"}, "message": "Fix NULL pointer dereference in doloop_contained_function_call.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/96556\n\t* frontend-passes.c (doloop_contained_function_call):\n\tDo not dereference a NULL pointer for value.function.esym.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/96556\n\t* gfortran.dg/do_check_15.f90: New test.", "tree": {"sha": "dc6dc107ea942f216e20d8134f0726e6dd8e14cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc6dc107ea942f216e20d8134f0726e6dd8e14cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5da50ed65a835dc1ed6179e3f2b6164fd6e4969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5da50ed65a835dc1ed6179e3f2b6164fd6e4969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5da50ed65a835dc1ed6179e3f2b6164fd6e4969", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5da50ed65a835dc1ed6179e3f2b6164fd6e4969/comments", "author": null, "committer": null, "parents": [{"sha": "5c64df80df274c753bfc8415bd902e1180e76f6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c64df80df274c753bfc8415bd902e1180e76f6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c64df80df274c753bfc8415bd902e1180e76f6a"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "83f6fd804b1db5cfed9b9092f2d5fda268106e7d", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5da50ed65a835dc1ed6179e3f2b6164fd6e4969/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5da50ed65a835dc1ed6179e3f2b6164fd6e4969/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=a5da50ed65a835dc1ed6179e3f2b6164fd6e4969", "patch": "@@ -2329,7 +2329,8 @@ doloop_contained_function_call (gfc_expr **e,\n   gfc_symbol *sym, *do_var;\n   contained_info *info;\n \n-  if (expr->expr_type != EXPR_FUNCTION || expr->value.function.isym)\n+  if (expr->expr_type != EXPR_FUNCTION || expr->value.function.isym\n+      || expr->value.function.esym == NULL)\n     return 0;\n \n   sym = expr->value.function.esym;"}, {"sha": "f67452b46603d7a53be965126867bc3b6937b6a5", "filename": "gcc/testsuite/gfortran.dg/do_check_15.f90", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5da50ed65a835dc1ed6179e3f2b6164fd6e4969/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5da50ed65a835dc1ed6179e3f2b6164fd6e4969/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_15.f90?ref=a5da50ed65a835dc1ed6179e3f2b6164fd6e4969", "patch": "@@ -0,0 +1,58 @@\n+! { dg-do compile }\n+! PR fortran/96556 - this used to cause an ICE.\n+! Test case by Juergen Reuter.\n+module polarizations\n+\n+  implicit none\n+  private\n+\n+  type :: smatrix_t\n+     private\n+     integer :: dim = 0\n+     integer :: n_entry = 0\n+     integer, dimension(:,:), allocatable :: index\n+   contains\n+     procedure :: write => smatrix_write\n+  end type smatrix_t\n+\n+  type, extends (smatrix_t) :: pmatrix_t\n+     private\n+   contains\n+     procedure :: write => pmatrix_write\n+     procedure :: normalize => pmatrix_normalize\n+  end type pmatrix_t\n+\n+contains\n+\n+  subroutine msg_error (string)\n+    character(len=*), intent(in), optional :: string\n+  end subroutine msg_error\n+  \n+  subroutine smatrix_write (object)\n+    class(smatrix_t), intent(in) :: object\n+  end subroutine smatrix_write\n+\n+  subroutine pmatrix_write (object)\n+    class(pmatrix_t), intent(in) :: object\n+    call object%smatrix_t%write ()\n+  end subroutine pmatrix_write\n+\n+  subroutine pmatrix_normalize (pmatrix)\n+    class(pmatrix_t), intent(inout) :: pmatrix\n+    integer :: i, hmax\n+    logical :: fermion, ok\n+    do i = 1, pmatrix%n_entry\n+       associate (index => pmatrix%index(:,i))\n+         if (index(1) == index(2)) then\n+            call error (\"diagonal must be real\")\n+         end if\n+       end associate\n+    end do\n+  contains\n+    subroutine error (msg)\n+      character(*), intent(in) :: msg\n+      call pmatrix%write ()\n+    end subroutine error\n+  end subroutine pmatrix_normalize\n+\n+end module polarizations"}]}