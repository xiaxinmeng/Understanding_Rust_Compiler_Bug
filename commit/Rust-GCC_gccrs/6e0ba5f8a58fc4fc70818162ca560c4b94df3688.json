{"sha": "6e0ba5f8a58fc4fc70818162ca560c4b94df3688", "node_id": "C_kwDOANBUbNoAKDZlMGJhNWY4YTU4ZmM0ZmM3MDgxODE2MmNhNTYwYzRiOTRkZjM2ODg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-10-06T10:38:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-06T10:38:39Z"}, "message": "Merge #1547\n\n1547: Dump item visibility r=CohenArthur a=CohenArthur\n\n\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "51e0c3726afb5ffb0e39a098001fa0588fc83da9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51e0c3726afb5ffb0e39a098001fa0588fc83da9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e0ba5f8a58fc4fc70818162ca560c4b94df3688", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjPrAvCRBK7hj4Ov3rIwAA7gAIAJOwmjooJuvlj1/uKmPJBBrw\npxAZyOy0gaesEj7pbj7mjO2VOoJNJlk7Cx3m+Tp3kKQzYZPaKo2x0pZeXebRws2v\nI7Q3WXaw4r9jyviQn13UkbBPOFUPqUf4y6uM7YptKfT0cIRx7q+b2Dzf6b1U18Xg\nlNimQ+yJJcR6IClCmw4ilmZCKeGm2uKy2Lx3wWuF9qSEQ9gRjUBPMH3DU4xru3SY\nMm25+Uc42ztuppjo85BkSnt5DK7dp7tFO9GCe/NkijHB2DPIj6l9XfHYe+1/AuDX\nWU4s+oo9rUcLl677TH1KQ80JdhRhGmbidcOAVTANRWYkh99y7mPrCucx+tbR940=\n=TQ5C\n-----END PGP SIGNATURE-----\n", "payload": "tree 51e0c3726afb5ffb0e39a098001fa0588fc83da9\nparent 40f8c333fe94906eedf792cfd1c74ea52e74caab\nparent 040c5f8933f58bcac170e0eb42f2c2279cab832b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1665052719 +0000\ncommitter GitHub <noreply@github.com> 1665052719 +0000\n\nMerge #1547\n\n1547: Dump item visibility r=CohenArthur a=CohenArthur\n\n\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0ba5f8a58fc4fc70818162ca560c4b94df3688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e0ba5f8a58fc4fc70818162ca560c4b94df3688", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0ba5f8a58fc4fc70818162ca560c4b94df3688/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40f8c333fe94906eedf792cfd1c74ea52e74caab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f8c333fe94906eedf792cfd1c74ea52e74caab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f8c333fe94906eedf792cfd1c74ea52e74caab"}, {"sha": "040c5f8933f58bcac170e0eb42f2c2279cab832b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/040c5f8933f58bcac170e0eb42f2c2279cab832b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/040c5f8933f58bcac170e0eb42f2c2279cab832b"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "bc4f7a3a5c17075e264594b517f44f78cbc874f9", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0ba5f8a58fc4fc70818162ca560c4b94df3688/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0ba5f8a58fc4fc70818162ca560c4b94df3688/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=6e0ba5f8a58fc4fc70818162ca560c4b94df3688", "patch": "@@ -108,6 +108,31 @@ Dump::emit_attrib (const Attribute &attrib)\n   stream << \"]\";\n }\n \n+void\n+Dump::emit_visibility (const Visibility &vis)\n+{\n+  switch (vis.get_vis_type ())\n+    {\n+    case Visibility::PUB:\n+      stream << \"pub \";\n+      break;\n+    case Visibility::PUB_CRATE:\n+      stream << \"pub(crate) \";\n+      break;\n+    case Visibility::PUB_SELF:\n+      stream << \"pub(self) \";\n+      break;\n+    case Visibility::PUB_SUPER:\n+      stream << \"pub(super) \";\n+      break;\n+    case Visibility::PUB_IN_PATH:\n+      stream << \"pub(in \" << vis.get_path ().as_string () << \") \";\n+      break;\n+    case Visibility::PRIV:\n+      break;\n+    }\n+}\n+\n std::ostream &\n Dump::emit_indented_string (const std::string &value,\n \t\t\t    const std::string &comment)\n@@ -590,7 +615,10 @@ Dump::visit (TypeBoundWhereClauseItem &item)\n void\n Dump::visit (Method &method)\n {\n-  stream << indentation << \"fn \" << method.get_method_name () << '(';\n+  // FIXME: Do we really need to dump the indentation here?\n+  stream << indentation;\n+  emit_visibility (method.get_visibility ());\n+  stream << \"fn \" << method.get_method_name () << '(';\n \n   auto &self = method.get_self_param ();\n   stream << self.as_string ();\n@@ -647,6 +675,7 @@ Dump::visit (UseDeclaration &use_decl)\n void\n Dump::visit (Function &function)\n {\n+  emit_visibility (function.get_visibility ());\n   stream << \"fn \" << function.get_function_name ();\n \n   if (function.has_generics ())\n@@ -742,6 +771,7 @@ void\n Dump::format_function_common (std::unique_ptr<Type> &return_type,\n \t\t\t      std::unique_ptr<BlockExpr> &block)\n {\n+  // FIXME: This should format the `<vis> fn <name> ( [args] )` as well\n   if (return_type)\n     {\n       stream << \"-> \";\n@@ -782,7 +812,13 @@ void\n Dump::visit (TraitItemMethod &item)\n {\n   auto method = item.get_trait_method_decl ();\n-  stream << indentation << \"fn \" << method.get_identifier () << '(';\n+\n+  // FIXME: Do we really need to dump the indentation here?\n+  stream << indentation;\n+\n+  // FIXME: Can we have visibility here?\n+  // emit_visibility (method.get_visibility ());\n+  stream << \"fn \" << method.get_identifier () << '(';\n \n   auto &self = method.get_self_param ();\n   stream << self.as_string ();\n@@ -822,6 +858,8 @@ Dump::visit (Trait &trait)\n       stream << \"\\n\" << indentation;\n     }\n \n+  emit_visibility (trait.get_visibility ());\n+\n   stream << \"trait \" << trait.get_identifier ();\n \n   // Traits actually have an implicit Self thrown at the start so we must expect\n@@ -902,6 +940,8 @@ Dump::visit (ExternalStaticItem &item)\n void\n Dump::visit (ExternalFunctionItem &function)\n {\n+  emit_visibility (function.get_visibility ());\n+\n   stream << \"fn \" << function.get_identifier () << '(';\n \n   for (size_t i = 0; i < function.get_function_params ().size (); i++)"}, {"sha": "a5a99f2b03e4a90d93b19c099da7e86f56283714", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0ba5f8a58fc4fc70818162ca560c4b94df3688/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0ba5f8a58fc4fc70818162ca560c4b94df3688/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=6e0ba5f8a58fc4fc70818162ca560c4b94df3688", "patch": "@@ -80,8 +80,17 @@ class Dump : public ASTVisitor\n    * Format a function's definition parameter\n    */\n   void format_function_param (FunctionParam &param);\n+\n+  /**\n+   * Emit an attribute\n+   */\n   void emit_attrib (const Attribute &attrib);\n \n+  /**\n+   * Emit an item's visibility\n+   */\n+  void emit_visibility (const Visibility &vis);\n+\n   /**\n    * Emit an indented string with an optional extra comment\n    */"}, {"sha": "20f1b93d948cca47d82a90b8c0d323111602039c", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0ba5f8a58fc4fc70818162ca560c4b94df3688/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0ba5f8a58fc4fc70818162ca560c4b94df3688/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=6e0ba5f8a58fc4fc70818162ca560c4b94df3688", "patch": "@@ -634,7 +634,7 @@ struct Visibility\n     : vis_type (vis_type), in_path (std::move (in_path))\n   {}\n \n-  VisType get_public_vis_type () const { return vis_type; }\n+  VisType get_vis_type () const { return vis_type; }\n \n   // Returns whether visibility is in an error state.\n   bool is_error () const"}, {"sha": "fa3a83db1db52eb12bf989aaf020730ca3bc08f1", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0ba5f8a58fc4fc70818162ca560c4b94df3688/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0ba5f8a58fc4fc70818162ca560c4b94df3688/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=6e0ba5f8a58fc4fc70818162ca560c4b94df3688", "patch": "@@ -36,7 +36,7 @@ translate_visibility (const AST::Visibility &vis)\n   if (vis.is_error ())\n     return Visibility::create_error ();\n \n-  switch (vis.get_public_vis_type ())\n+  switch (vis.get_vis_type ())\n     {\n     case AST::Visibility::PUB:\n       return Visibility (Visibility::VisType::PUBLIC);"}]}