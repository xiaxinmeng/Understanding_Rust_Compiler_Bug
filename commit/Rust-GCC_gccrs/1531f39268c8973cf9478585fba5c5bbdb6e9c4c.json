{"sha": "1531f39268c8973cf9478585fba5c5bbdb6e9c4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUzMWYzOTI2OGM4OTczY2Y5NDc4NTg1ZmJhNWM1YmJkYjZlOWM0Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-16T07:59:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-16T07:59:03Z"}, "message": "openmp: Fix up vectorization simd call badness computation [PR99100]\n\nAs mentioned in the PR, ix86_simd_clone_usable didn't make it more desirable\nto use 'e' mangled AVX512F entrypoints over 'd' mangled ones (AVX2) with the\nsame simdlen.  This patch fixes that.  I have tweaked the generic code too\nto make more room for these target specific badness factors.\n\n2021-02-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/99100\n\t* tree-vect-stmts.c (vectorizable_simd_clone_call): For num_calls != 1\n\tmultiply by 4096 and for inbranch by 8192.\n\t* config/i386/i386.c (ix86_simd_clone_usable): For TARGET_AVX512F,\n\treturn 3, 2 or 1 for mangle letters 'b', 'c' or 'd'.\n\n\t* gcc.target/i386/pr99100.c: New test.", "tree": {"sha": "5a9e9e29cdc883a2258dc42cf008893d6f1fa634", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a9e9e29cdc883a2258dc42cf008893d6f1fa634"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1531f39268c8973cf9478585fba5c5bbdb6e9c4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1531f39268c8973cf9478585fba5c5bbdb6e9c4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1531f39268c8973cf9478585fba5c5bbdb6e9c4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1531f39268c8973cf9478585fba5c5bbdb6e9c4c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b5c58c2dc3734005d4d5e4be4e6920f2dada64f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b5c58c2dc3734005d4d5e4be4e6920f2dada64f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b5c58c2dc3734005d4d5e4be4e6920f2dada64f"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "2fe182f3d07752ad2906f54602a82fb60234e7b3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1531f39268c8973cf9478585fba5c5bbdb6e9c4c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1531f39268c8973cf9478585fba5c5bbdb6e9c4c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1531f39268c8973cf9478585fba5c5bbdb6e9c4c", "patch": "@@ -22657,15 +22657,15 @@ ix86_simd_clone_usable (struct cgraph_node *node)\n \treturn -1;\n       if (!TARGET_AVX)\n \treturn 0;\n-      return TARGET_AVX2 ? 2 : 1;\n+      return TARGET_AVX512F ? 3 : TARGET_AVX2 ? 2 : 1;\n     case 'c':\n       if (!TARGET_AVX)\n \treturn -1;\n-      return TARGET_AVX2 ? 1 : 0;\n+      return TARGET_AVX512F ? 2 : TARGET_AVX2 ? 1 : 0;\n     case 'd':\n       if (!TARGET_AVX2)\n \treturn -1;\n-      return 0;\n+      return TARGET_AVX512F ? 1 : 0;\n     case 'e':\n       if (!TARGET_AVX512F)\n \treturn -1;"}, {"sha": "a17fe2824cd9083590c5c13f83ab9f7687161460", "filename": "gcc/testsuite/gcc.target/i386/pr99100.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1531f39268c8973cf9478585fba5c5bbdb6e9c4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99100.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1531f39268c8973cf9478585fba5c5bbdb6e9c4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99100.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99100.c?ref=1531f39268c8973cf9478585fba5c5bbdb6e9c4c", "patch": "@@ -0,0 +1,22 @@\n+/* PR target/99100 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -mavx512f -fopenmp-simd -mprefer-vector-width=512\" } */\n+/* { dg-final { scan-assembler \"_ZGVeN8v_myfunc\" } } */\n+/* { dg-final { scan-assembler \"_ZGVeN8v_sin\" } } */\n+\n+#pragma omp declare simd notinbranch\n+double sin (double x);\n+#pragma omp declare simd simdlen(8) notinbranch\n+__attribute__((const)) double myfunc (double x);\n+\n+#define N 1024\n+__attribute__((__aligned__ (256))) double a[N], b[N], c[N];\n+\n+void\n+foo ()\n+{\n+  for (int i = 0; i < N; i++)\n+    a[i] = myfunc (b[i]);\n+  for (int i = 0; i < N; i++)\n+    c[i] = sin (b[i]);\n+}"}, {"sha": "85d3161fe3b2fbe289396457361c7af7519bd2b3", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1531f39268c8973cf9478585fba5c5bbdb6e9c4c/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1531f39268c8973cf9478585fba5c5bbdb6e9c4c/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=1531f39268c8973cf9478585fba5c5bbdb6e9c4c", "patch": "@@ -3914,9 +3914,9 @@ vectorizable_simd_clone_call (vec_info *vinfo, stmt_vec_info stmt_info,\n \t    || n->simdclone->nargs != nargs)\n \t  continue;\n \tif (num_calls != 1)\n-\t  this_badness += exact_log2 (num_calls) * 1024;\n+\t  this_badness += exact_log2 (num_calls) * 4096;\n \tif (n->simdclone->inbranch)\n-\t  this_badness += 2048;\n+\t  this_badness += 8192;\n \tint target_badness = targetm.simd_clone.usable (n);\n \tif (target_badness < 0)\n \t  continue;"}]}