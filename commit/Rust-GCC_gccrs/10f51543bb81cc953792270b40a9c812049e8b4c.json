{"sha": "10f51543bb81cc953792270b40a9c812049e8b4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBmNTE1NDNiYjgxY2M5NTM3OTIyNzBiNDBhOWM4MTIwNDllOGI0Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-01T19:52:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-01T19:52:26Z"}, "message": "libstdc++: Add compile-time checks to__glibcxx_assert [PR 71960]\n\nThis change evaluates __glibcxx_assert checks unconditionally when a\nfunction is being constant evaluated (when std::is_constant_evaluated()\nis true). If the check fails, compilation will fail with an error.\n\nIf the function isn't being constant evaluated, the normal runtime check\nwill be done if enabled by _GLIBCXX_ASSERTIONS or _GLIBCXX_DEBUG, the\nsame as before.\n\nTangentially, the __glibcxx_assert and _GLIBCXX_PARALLEL_ASSERT macros\nare changed to expand to 'do { } while (false)' when assertions are\ndisabled, instead of expanding to nothing. This avoids -Wempty-body\nwarnings when a disabled assertion is used in an 'if' or 'else'\nstatement e.g.\n\n  if constexpr (/* precondition is testable */)\n    __glibcxx_assert(precondition);\n\na.C:9:27: warning: suggest braces around empty body in an \u2018if\u2019 statement [-Wempty-body]\n    9 |     __glibcxx_assert(precondition);\n      |                                  ^\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/71960\n\t* include/bits/c++config (__glibcxx_assert_impl): Remove\n\tdo-while so that uses of the macro need to add it.\n\t(__glibcxx_assert): Rename macro for runtime assertions\n\tto __glibcxx_assert_2.\n\t(__glibcxx_assert_1): Define macro for constexpr assertions.\n\t(__glibcxx_assert): Define macro for constexpr and runtime\n\tassertions.\n\t* include/bits/range_access.h (ranges::advance): Remove\n\tredundant precondition checks during constant evaluation.\n\t* include/parallel/base.h (_GLIBCXX_PARALLEL_ASSERT): Always\n\tuse do-while in macro expansion.\n\t* include/std/ranges (iota_view::iota_view(W, B)): Remove\n\tredundant braces.", "tree": {"sha": "871b9555550a2aa022e056d73237b2cf377de12a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/871b9555550a2aa022e056d73237b2cf377de12a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10f51543bb81cc953792270b40a9c812049e8b4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10f51543bb81cc953792270b40a9c812049e8b4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10f51543bb81cc953792270b40a9c812049e8b4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10f51543bb81cc953792270b40a9c812049e8b4c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bc0f24d7a20d89383859907b875a26ce59dc6c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc0f24d7a20d89383859907b875a26ce59dc6c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bc0f24d7a20d89383859907b875a26ce59dc6c8"}], "stats": {"total": 54, "additions": 32, "deletions": 22}, "files": [{"sha": "badf9d01a04c336938352295bc3182813a8324be", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10f51543bb81cc953792270b40a9c812049e8b4c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10f51543bb81cc953792270b40a9c812049e8b4c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=10f51543bb81cc953792270b40a9c812049e8b4c", "patch": "@@ -477,19 +477,16 @@ namespace std\n     __builtin_abort();\n   }\n }\n-#define __glibcxx_assert_impl(_Condition)\t\t\t\t \\\n-  do \t\t\t\t\t\t\t\t\t \\\n-  {\t\t\t\t\t\t\t      \t\t \\\n-    if (! (_Condition))                                                  \\\n-      std::__replacement_assert(__FILE__, __LINE__, __PRETTY_FUNCTION__, \\\n-\t\t\t\t#_Condition);\t\t\t\t \\\n-  } while (false)\n+#define __glibcxx_assert_impl(_Condition)\t\t\t       \\\n+  if (!bool(_Condition))\t\t\t\t\t       \\\n+    std::__replacement_assert(__FILE__, __LINE__, __PRETTY_FUNCTION__, \\\n+\t\t\t      #_Condition)\n #endif\n \n #if defined(_GLIBCXX_ASSERTIONS)\n-# define __glibcxx_assert(_Condition) __glibcxx_assert_impl(_Condition)\n+# define __glibcxx_assert_2(_Condition) __glibcxx_assert_impl(_Condition)\n #else\n-# define __glibcxx_assert(_Condition)\n+# define __glibcxx_assert_2(_Condition)\n #endif\n \n // Macros for race detectors.\n@@ -683,6 +680,26 @@ namespace std\n # endif\n #endif // GCC\n \n+#if _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+# define __glibcxx_assert_1(_Condition)\t\t\\\n+    if (__builtin_is_constant_evaluated())\t\\\n+     {\t\t\t\t\t\t\\\n+       void __failed_assertion();\t\\\n+       if (!bool(_Condition))\t\t\t\\\n+\t __failed_assertion();\t\\\n+     }\t\t\t\t\t\t\\\n+    else\n+#else\n+# define __glibcxx_assert_1(_Condition)\n+#endif\n+\n+# define __glibcxx_assert(_Condition)\t  \\\n+  do {\t\t\t\t\t  \\\n+    __glibcxx_assert_1(_Condition)\t  \\\n+    { __glibcxx_assert_2(_Condition); }   \\\n+  } while (false)\n+\n+\n // PSTL configuration\n \n #if __cplusplus >= 201703L"}, {"sha": "5c5b2fe0c6c820fb234c71e47e2fdaf56418556f", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10f51543bb81cc953792270b40a9c812049e8b4c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10f51543bb81cc953792270b40a9c812049e8b4c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=10f51543bb81cc953792270b40a9c812049e8b4c", "patch": "@@ -987,10 +987,7 @@ namespace ranges\n \t}\n       else\n \t{\n-#ifdef __cpp_lib_is_constant_evaluated\n-\t  if (std::is_constant_evaluated() && __n < 0)\n-\t    throw \"attempt to decrement a non-bidirectional iterator\";\n-#endif\n+\t  // cannot decrement a non-bidirectional iterator\n \t  __glibcxx_assert(__n >= 0);\n \t  while (__n-- > 0)\n \t    ++__it;\n@@ -1065,10 +1062,7 @@ namespace ranges\n \t}\n       else\n \t{\n-#ifdef __cpp_lib_is_constant_evaluated\n-\t  if (std::is_constant_evaluated() && __n < 0)\n-\t    throw \"attempt to decrement a non-bidirectional iterator\";\n-#endif\n+\t  // cannot decrement a non-bidirectional iterator\n \t  __glibcxx_assert(__n >= 0);\n \t  return __n;\n \t}"}, {"sha": "973a2dcd514ee08a85f45db1d79a88b821600d95", "filename": "libstdc++-v3/include/parallel/base.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10f51543bb81cc953792270b40a9c812049e8b4c/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10f51543bb81cc953792270b40a9c812049e8b4c/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h?ref=10f51543bb81cc953792270b40a9c812049e8b4c", "patch": "@@ -420,9 +420,10 @@ namespace __gnu_parallel\n     }\n \n #if _GLIBCXX_PARALLEL_ASSERTIONS && defined(__glibcxx_assert_impl)\n-#define _GLIBCXX_PARALLEL_ASSERT(_Condition) __glibcxx_assert_impl(_Condition)\n+# define _GLIBCXX_PARALLEL_ASSERT(_Condition) \\\n+  do { __glibcxx_assert_impl(_Condition); } while (false)\n #else\n-#define _GLIBCXX_PARALLEL_ASSERT(_Condition)\n+# define _GLIBCXX_PARALLEL_ASSERT(_Condition) do { } while (false)\n #endif\n \n } //namespace __gnu_parallel"}, {"sha": "054ffe85d0f627b1a4cd164578d518fd5d1c218d", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10f51543bb81cc953792270b40a9c812049e8b4c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10f51543bb81cc953792270b40a9c812049e8b4c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=10f51543bb81cc953792270b40a9c812049e8b4c", "patch": "@@ -860,9 +860,7 @@ namespace ranges\n       : _M_value(__value), _M_bound(__bound)\n       {\n \tif constexpr (totally_ordered_with<_Winc, _Bound>)\n-\t  {\n-\t    __glibcxx_assert( bool(__value <= __bound) );\n-\t  }\n+\t  __glibcxx_assert( bool(__value <= __bound) );\n       }\n \n       constexpr _Iterator"}]}