{"sha": "c1e72db48a0fa36966f2517cbf45fa2b758af268", "node_id": "C_kwDOANBUbNoAKGMxZTcyZGI0OGEwZmEzNjk2NmYyNTE3Y2JmNDVmYTJiNzU4YWYyNjg", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-16T11:01:28Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-17T09:20:13Z"}, "message": "macrorule: Add location information", "tree": {"sha": "af8bdb51ac35038c8d6804e5ce0921981a80de94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af8bdb51ac35038c8d6804e5ce0921981a80de94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1e72db48a0fa36966f2517cbf45fa2b758af268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e72db48a0fa36966f2517cbf45fa2b758af268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1e72db48a0fa36966f2517cbf45fa2b758af268", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e72db48a0fa36966f2517cbf45fa2b758af268/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d81ba63f4829c12b89e87564c398e95879c89db1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81ba63f4829c12b89e87564c398e95879c89db1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d81ba63f4829c12b89e87564c398e95879c89db1"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "e0524c6c21cd332488ef160c5183b7d186bf9aad", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e72db48a0fa36966f2517cbf45fa2b758af268/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e72db48a0fa36966f2517cbf45fa2b758af268/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=c1e72db48a0fa36966f2517cbf45fa2b758af268", "patch": "@@ -20,6 +20,7 @@\n #define RUST_AST_MACRO_H\n \n #include \"rust-ast.h\"\n+#include \"rust-location.h\"\n \n namespace Rust {\n namespace AST {\n@@ -295,26 +296,28 @@ struct MacroRule\n private:\n   MacroMatcher matcher;\n   MacroTranscriber transcriber;\n-\n-  // TODO: should store location information?\n+  Location locus;\n \n public:\n-  MacroRule (MacroMatcher matcher, MacroTranscriber transcriber)\n-    : matcher (std::move (matcher)), transcriber (std::move (transcriber))\n+  MacroRule (MacroMatcher matcher, MacroTranscriber transcriber, Location locus)\n+    : matcher (std::move (matcher)), transcriber (std::move (transcriber)),\n+      locus (locus)\n   {}\n \n   // Returns whether macro rule is in error state.\n   bool is_error () const { return matcher.is_error (); }\n \n   // Creates an error state macro rule.\n-  static MacroRule create_error ()\n+  static MacroRule create_error (Location locus)\n   {\n-    // FIXME: Once #928 is merged, give location to MacroMatcher\n-    return MacroRule (MacroMatcher::create_error (Location ()),\n+    return MacroRule (MacroMatcher::create_error (locus),\n \t\t      MacroTranscriber (DelimTokenTree::create_empty (),\n-\t\t\t\t\tLocation ()));\n+\t\t\t\t\tLocation ()),\n+\t\t      locus);\n   }\n \n+  Location get_locus () const { return locus; }\n+\n   std::string as_string () const;\n };\n "}, {"sha": "748381868adc2786cc579262bedc0659d7380ce6", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e72db48a0fa36966f2517cbf45fa2b758af268/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e72db48a0fa36966f2517cbf45fa2b758af268/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=c1e72db48a0fa36966f2517cbf45fa2b758af268", "patch": "@@ -1678,23 +1678,25 @@ template <typename ManagedTokenSource>\n AST::MacroRule\n Parser<ManagedTokenSource>::parse_macro_rule ()\n {\n+  Location locus = lexer.peek_token ()->get_locus ();\n+\n   // parse macro matcher\n   AST::MacroMatcher matcher = parse_macro_matcher ();\n \n   if (matcher.is_error ())\n-    return AST::MacroRule::create_error ();\n+    return AST::MacroRule::create_error (locus);\n \n   if (!skip_token (MATCH_ARROW))\n     {\n       // skip after somewhere?\n-      return AST::MacroRule::create_error ();\n+      return AST::MacroRule::create_error (locus);\n     }\n \n   // parse transcriber (this is just a delim token tree)\n   Location token_tree_loc = lexer.peek_token ()->get_locus ();\n   AST::MacroTranscriber transcriber (parse_delim_token_tree (), token_tree_loc);\n \n-  return AST::MacroRule (std::move (matcher), std::move (transcriber));\n+  return AST::MacroRule (std::move (matcher), std::move (transcriber), locus);\n }\n \n // Parses a macro matcher (part of a macro rule definition)."}]}