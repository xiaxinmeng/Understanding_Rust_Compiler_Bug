{"sha": "7a5b18b055a2e2bcf43fa8f75612ca1a21af9e1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E1YjE4YjA1NWEyZTJiY2Y0M2ZhOGY3NTYxMmNhMWEyMWFmOWUxZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-18T21:59:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-18T21:59:10Z"}, "message": "(gen_reload): Handle paradoxical SUBREGs.\n\nFrom-SVN: r9208", "tree": {"sha": "4573fd714cc603e199f8c3fb31866dae28793200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4573fd714cc603e199f8c3fb31866dae28793200"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a5b18b055a2e2bcf43fa8f75612ca1a21af9e1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a5b18b055a2e2bcf43fa8f75612ca1a21af9e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a5b18b055a2e2bcf43fa8f75612ca1a21af9e1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a5b18b055a2e2bcf43fa8f75612ca1a21af9e1d/comments", "author": null, "committer": null, "parents": [{"sha": "94bafba74145e6735ecad4e0ee5651c70aea0201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94bafba74145e6735ecad4e0ee5651c70aea0201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94bafba74145e6735ecad4e0ee5651c70aea0201"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "f8260c576b80d2bd2af674b88e78771ff42e9c94", "filename": "gcc/reload1.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5b18b055a2e2bcf43fa8f75612ca1a21af9e1d/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5b18b055a2e2bcf43fa8f75612ca1a21af9e1d/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=7a5b18b055a2e2bcf43fa8f75612ca1a21af9e1d", "patch": "@@ -1,5 +1,5 @@\n /* Reload pseudo regs into hard regs for insns that require hard regs.\n-   Copyright (C) 1987, 88, 89, 92, 93, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92, 93, 94, 1995 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -6649,6 +6649,20 @@ gen_reload (out, in, opnum, type)\n      enum reload_type type;\n {\n   rtx last = get_last_insn ();\n+  rtx tem;\n+\n+  /* If IN is a paradoxical SUBREG, remove it and try to put the\n+     opposite SUBREG on OUT.  Likewise for a paradoxical SUBREG on OUT.  */\n+  if (GET_CODE (in) == SUBREG\n+      && (GET_MODE_SIZE (GET_MODE (in))\n+\t  > GET_MODE_SIZE (GET_MODE (SUBREG_REG (in))))\n+      && (tem = gen_lowpart_common (GET_MODE (SUBREG_REG (in)), out)) != 0)\n+    in = SUBREG_REG (in), out = tem;\n+  else if (GET_CODE (out) == SUBREG\n+      && (GET_MODE_SIZE (GET_MODE (out))\n+\t  > GET_MODE_SIZE (GET_MODE (SUBREG_REG (out))))\n+      && (tem = gen_lowpart_common (GET_MODE (SUBREG_REG (out)), in)) != 0)\n+    out = SUBREG_REG (out), in = tem;\n \n   /* How to do this reload can get quite tricky.  Normally, we are being\n      asked to reload a simple operand, such as a MEM, a constant, or a pseudo"}]}