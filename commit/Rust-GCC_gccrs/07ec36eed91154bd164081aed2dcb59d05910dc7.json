{"sha": "07ec36eed91154bd164081aed2dcb59d05910dc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdlYzM2ZWVkOTExNTRiZDE2NDA4MWFlZDJkY2I1OWQwNTkxMGRjNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-07-03T08:13:34Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-03T08:13:34Z"}, "message": "[Ada] Document that boolean types with convention C now map to C99 bool\n\n2019-07-03  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* doc/gnat_rm/interfacing_to_other_languages.rst (Interfacing to C):\n\tDocument that boolean types with convention C now map to C99 bool.\n\t* gnat_rm.texi: Regenerate.\n\nFrom-SVN: r272960", "tree": {"sha": "38233162fed69c5620391a9d6e691a7e8c977844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38233162fed69c5620391a9d6e691a7e8c977844"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07ec36eed91154bd164081aed2dcb59d05910dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ec36eed91154bd164081aed2dcb59d05910dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07ec36eed91154bd164081aed2dcb59d05910dc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ec36eed91154bd164081aed2dcb59d05910dc7/comments", "author": null, "committer": null, "parents": [{"sha": "4a51756a8c5536d6f7b9718d7eea39147fcd24d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a51756a8c5536d6f7b9718d7eea39147fcd24d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a51756a8c5536d6f7b9718d7eea39147fcd24d2"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "96c16bda54d43ed164b7ffb6c8d3997b549888f1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ec36eed91154bd164081aed2dcb59d05910dc7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ec36eed91154bd164081aed2dcb59d05910dc7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=07ec36eed91154bd164081aed2dcb59d05910dc7", "patch": "@@ -1,3 +1,9 @@\n+2019-07-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/interfacing_to_other_languages.rst (Interfacing to C):\n+\tDocument that boolean types with convention C now map to C99 bool.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2019-07-03  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_attr.adb (Expand_Min_Max_Attribute): Code cleanup:"}, {"sha": "ad0be511d48004910358a89585529b5e4d38afee", "filename": "gcc/ada/doc/gnat_rm/interfacing_to_other_languages.rst", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ec36eed91154bd164081aed2dcb59d05910dc7/gcc%2Fada%2Fdoc%2Fgnat_rm%2Finterfacing_to_other_languages.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ec36eed91154bd164081aed2dcb59d05910dc7/gcc%2Fada%2Fdoc%2Fgnat_rm%2Finterfacing_to_other_languages.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Finterfacing_to_other_languages.rst?ref=07ec36eed91154bd164081aed2dcb59d05910dc7", "patch": "@@ -46,8 +46,10 @@ and C types:\n \n *\n   Ada enumeration types map to C enumeration types directly if pragma\n-  ``Convention C`` is specified, which causes them to have int\n-  length.  Without pragma ``Convention C``, Ada enumeration types map to\n+  ``Convention C`` is specified, which causes them to have a length of\n+  32 bits, except for boolean types which map to C99 ``bool`` and for\n+  which the length is 8 bits.\n+  Without pragma ``Convention C``, Ada enumeration types map to\n   8, 16, or 32 bits (i.e., C types ``signed char``, ``short``,\n   ``int``, respectively) depending on the number of values passed.\n   This is the only case in which pragma ``Convention C`` affects the"}, {"sha": "e4324473396fd9d7a35efc701907347df329c35a", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ec36eed91154bd164081aed2dcb59d05910dc7/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ec36eed91154bd164081aed2dcb59d05910dc7/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=07ec36eed91154bd164081aed2dcb59d05910dc7", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , May 27, 2019\n+GNAT Reference Manual , Jun 21, 2019\n \n AdaCore\n \n@@ -5220,18 +5220,19 @@ Syntax:\n pragma Machine_Attribute (\n      [Entity         =>] LOCAL_NAME,\n      [Attribute_Name =>] static_string_EXPRESSION\n-  [, [Info           =>] static_EXPRESSION] );\n+  [, [Info           =>] static_EXPRESSION @{, static_EXPRESSION@}] );\n @end example\n \n Machine-dependent attributes can be specified for types and/or\n declarations.  This pragma is semantically equivalent to\n @code{__attribute__((@emph{attribute_name}))} (if @code{info} is not\n specified) or @code{__attribute__((@emph{attribute_name(info})))}\n-in GNU C, where @emph{attribute_name} is recognized by the\n-compiler middle-end or the @code{TARGET_ATTRIBUTE_TABLE} machine\n-specific macro.  A string literal for the optional parameter @code{info}\n-is transformed into an identifier, which may make this pragma unusable\n-for some attributes.\n+or @code{__attribute__((@emph{attribute_name(info,...})))} in GNU C,\n+where @emph{attribute_name} is recognized by the compiler middle-end\n+or the @code{TARGET_ATTRIBUTE_TABLE} machine specific macro.  Note\n+that a string literal for the optional parameter @code{info} or the\n+following ones is transformed by default into an identifier,\n+which may make this pragma unusable for some attributes.\n For further information see @cite{GNU Compiler Collection (GCC) Internals}.\n \n @node Pragma Main,Pragma Main_Storage,Pragma Machine_Attribute,Implementation Defined Pragmas\n@@ -25540,8 +25541,10 @@ and C types:\n \n @item \n Ada enumeration types map to C enumeration types directly if pragma\n-@code{Convention C} is specified, which causes them to have int\n-length.  Without pragma @code{Convention C}, Ada enumeration types map to\n+@code{Convention C} is specified, which causes them to have a length of\n+32 bits, except for boolean types which map to C99 @code{bool} and for\n+which the length is 8 bits.\n+Without pragma @code{Convention C}, Ada enumeration types map to\n 8, 16, or 32 bits (i.e., C types @code{signed char}, @code{short},\n @code{int}, respectively) depending on the number of values passed.\n This is the only case in which pragma @code{Convention C} affects the"}]}