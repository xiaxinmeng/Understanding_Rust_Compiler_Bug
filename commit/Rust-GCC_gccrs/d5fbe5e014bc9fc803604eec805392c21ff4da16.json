{"sha": "d5fbe5e014bc9fc803604eec805392c21ff4da16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVmYmU1ZTAxNGJjOWZjODAzNjA0ZWVjODA1MzkyYzIxZmY0ZGExNg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2019-11-15T23:22:41Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-11-15T23:22:41Z"}, "message": "Diagnose duplicate C2x standard attributes.\n\nFor each of the attributes currently included in C2x, it has a\nconstraint that the attribute shall appear at most once in each\nattribute list (attribute-list being what appear between a single [[\nand ]]).\n\nThis patch implements that check.  As the corresponding check in the\nC++ front end (cp_parser_check_std_attribute) makes violations into\nerrors, I made them into errors, with the same wording, for C as well.\n\nThere is an existing check in the case of the fallthrough attribute,\nwith a warning rather than an error, in attribute_fallthrough_p.  That\nis more general, as it also covers __attribute__ ((fallthrough)) and\nthe case of [[fallthrough]] [[fallthrough]] (multiple attribute-lists\nin a single attribute-specifier-sequence), which is not a constraint\nviolation.  To avoid some [[fallthrough, fallthrough]] being diagnosed\ntwice, the check I added avoids adding duplicate attributes to the\nlist.\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc/c:\n\t* c-parser.c (c_parser_std_attribute_specifier): Diagnose\n\tduplicate standard attributes.\n\ngcc/testsuite:\n\t* gcc.dg/c2x-attr-deprecated-4.c, gcc.dg/c2x-attr-fallthrough-4.c,\n\tgcc.dg/c2x-attr-maybe_unused-4.c: New tests.\n\nFrom-SVN: r278324", "tree": {"sha": "5a5b4f07e9d4923388a279c438f4ea282c9f6ead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a5b4f07e9d4923388a279c438f4ea282c9f6ead"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5fbe5e014bc9fc803604eec805392c21ff4da16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5fbe5e014bc9fc803604eec805392c21ff4da16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5fbe5e014bc9fc803604eec805392c21ff4da16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5fbe5e014bc9fc803604eec805392c21ff4da16/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ab340fe17e7b5021c980badab9f5318d1517646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab340fe17e7b5021c980badab9f5318d1517646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ab340fe17e7b5021c980badab9f5318d1517646"}], "stats": {"total": 113, "additions": 111, "deletions": 2}, "files": [{"sha": "0076e83688803729a53feec5bf1e4805a97288ff", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5fbe5e014bc9fc803604eec805392c21ff4da16/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5fbe5e014bc9fc803604eec805392c21ff4da16/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=d5fbe5e014bc9fc803604eec805392c21ff4da16", "patch": "@@ -1,3 +1,8 @@\n+2019-11-15  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_std_attribute_specifier): Diagnose\n+\tduplicate standard attributes.\n+\n 2019-11-15  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-decl.c (std_attribute_table): Add maybe_unused."}, {"sha": "e48760dfd633bee3f270fce83c84d1990b4441ad", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5fbe5e014bc9fc803604eec805392c21ff4da16/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5fbe5e014bc9fc803604eec805392c21ff4da16/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=d5fbe5e014bc9fc803604eec805392c21ff4da16", "patch": "@@ -4873,6 +4873,9 @@ c_parser_std_attribute (c_parser *parser)\n static tree\n c_parser_std_attribute_specifier (c_parser *parser, bool for_tm)\n {\n+  bool seen_deprecated = false;\n+  bool seen_fallthrough = false;\n+  bool seen_maybe_unused = false;\n   location_t loc = c_parser_peek_token (parser)->location;\n   if (!c_parser_require (parser, CPP_OPEN_SQUARE, \"expected %<[%>\"))\n     return NULL_TREE;\n@@ -4898,8 +4901,55 @@ c_parser_std_attribute_specifier (c_parser *parser, bool for_tm)\n       tree attribute = c_parser_std_attribute (parser);\n       if (attribute != error_mark_node)\n \t{\n-\t  TREE_CHAIN (attribute) = attributes;\n-\t  attributes = attribute;\n+\t  bool duplicate = false;\n+\t  tree name = get_attribute_name (attribute);\n+\t  tree ns = get_attribute_namespace (attribute);\n+\t  if (ns == NULL_TREE)\n+\t    {\n+\t      /* Some standard attributes may appear at most once in\n+\t\t each attribute list.  Diagnose duplicates and remove\n+\t\t them from the list to avoid subsequent diagnostics\n+\t\t such as the more general one for multiple\n+\t\t \"fallthrough\" attributes in the same place (including\n+\t\t in separate attribute lists in the same attribute\n+\t\t specifier sequence, which is not a constraint\n+\t\t violation).  */\n+\t      if (is_attribute_p (\"deprecated\", name))\n+\t\t{\n+\t\t  if (seen_deprecated)\n+\t\t    {\n+\t\t      error (\"attribute %<deprecated%> can appear at most \"\n+\t\t\t     \"once in an attribute-list\");\n+\t\t      duplicate = true;\n+\t\t    }\n+\t\t  seen_deprecated = true;\n+\t\t}\n+\t      else if (is_attribute_p (\"fallthrough\", name))\n+\t\t{\n+\t\t  if (seen_fallthrough)\n+\t\t    {\n+\t\t      error (\"attribute %<fallthrough%> can appear at most \"\n+\t\t\t     \"once in an attribute-list\");\n+\t\t      duplicate = true;\n+\t\t    }\n+\t\t  seen_fallthrough = true;\n+\t\t}\n+\t      else if (is_attribute_p (\"maybe_unused\", name))\n+\t\t{\n+\t\t  if (seen_maybe_unused)\n+\t\t    {\n+\t\t      error (\"attribute %<maybe_unused%> can appear at most \"\n+\t\t\t     \"once in an attribute-list\");\n+\t\t      duplicate = true;\n+\t\t    }\n+\t\t  seen_maybe_unused = true;\n+\t\t}\n+\t    }\n+\t  if (!duplicate)\n+\t    {\n+\t      TREE_CHAIN (attribute) = attributes;\n+\t      attributes = attribute;\n+\t    }\n \t}\n       if (c_parser_next_token_is_not (parser, CPP_COMMA))\n \tbreak;"}, {"sha": "4376337e333e75430ce84bed7cf67e2d0916c4e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5fbe5e014bc9fc803604eec805392c21ff4da16/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5fbe5e014bc9fc803604eec805392c21ff4da16/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5fbe5e014bc9fc803604eec805392c21ff4da16", "patch": "@@ -1,3 +1,8 @@\n+2019-11-15  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c2x-attr-deprecated-4.c, gcc.dg/c2x-attr-fallthrough-4.c,\n+\tgcc.dg/c2x-attr-maybe_unused-4.c: New tests.\n+\n 2019-11-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/warn/Walways-true-1.C: Check locations too."}, {"sha": "ce6615b4ba15735c8de136aca53685039336f2e9", "filename": "gcc/testsuite/gcc.dg/c2x-attr-deprecated-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5fbe5e014bc9fc803604eec805392c21ff4da16/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5fbe5e014bc9fc803604eec805392c21ff4da16/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-4.c?ref=d5fbe5e014bc9fc803604eec805392c21ff4da16", "patch": "@@ -0,0 +1,13 @@\n+/* Test C2x deprecated attribute: duplicates.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+[[deprecated, __deprecated__]] int a; /* { dg-error \"can appear at most once\" } */\n+[[__deprecated__, deprecated(\"message\")]] int b; /* { dg-error \"can appear at most once\" } */\n+int c [[deprecated(\"message\"), deprecated]]; /* { dg-error \"can appear at most once\" } */\n+[[deprecated, deprecated]]; /* { dg-error \"can appear at most once\" } */\n+/* { dg-warning \"ignored\" \"ignored\" { target *-*-* } .-1 } */\n+\n+/* Separate attribute lists in the same attribute specifier sequence,\n+   with the same attribute in them, are OK.  */\n+[[deprecated]] [[deprecated]] int d [[deprecated]] [[deprecated]];"}, {"sha": "75aceff9941359c0ac80a78dbc44dd4cd3dee5df", "filename": "gcc/testsuite/gcc.dg/c2x-attr-fallthrough-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5fbe5e014bc9fc803604eec805392c21ff4da16/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-fallthrough-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5fbe5e014bc9fc803604eec805392c21ff4da16/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-fallthrough-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-fallthrough-4.c?ref=d5fbe5e014bc9fc803604eec805392c21ff4da16", "patch": "@@ -0,0 +1,23 @@\n+/* Test C2x fallthrough attribute: duplicates.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+int\n+f (int a)\n+{\n+  switch (a)\n+    {\n+    case 1:\n+      a++;\n+      [[fallthrough, __fallthrough__]]; /* { dg-error \"can appear at most once\" } */\n+    case 2:\n+      a++;\n+      /* Separate attribute lists in the same attribute specifier\n+\t sequence, with the same attribute in them, are OK (but\n+\t receive a warning).  */\n+      [[fallthrough]] [[fallthrough]]; /* { dg-warning \"specified multiple times\" } */\n+    case 3:\n+      a++;\n+    }\n+  return a;\n+}"}, {"sha": "ae7e1dcd0b762ea6a5a2deed0f0765e30a5f84ef", "filename": "gcc/testsuite/gcc.dg/c2x-attr-maybe_unused-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5fbe5e014bc9fc803604eec805392c21ff4da16/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-maybe_unused-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5fbe5e014bc9fc803604eec805392c21ff4da16/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-maybe_unused-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-maybe_unused-4.c?ref=d5fbe5e014bc9fc803604eec805392c21ff4da16", "patch": "@@ -0,0 +1,13 @@\n+/* Test C2x maybe_unused attribute: duplicates.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+[[maybe_unused, __maybe_unused__]] int a; /* { dg-error \"can appear at most once\" } */\n+[[__maybe_unused__, maybe_unused]] int b; /* { dg-error \"can appear at most once\" } */\n+int c [[maybe_unused, maybe_unused]]; /* { dg-error \"can appear at most once\" } */\n+[[maybe_unused, maybe_unused]]; /* { dg-error \"can appear at most once\" } */\n+/* { dg-warning \"ignored\" \"ignored\" { target *-*-* } .-1 } */\n+\n+/* Separate attribute lists in the same attribute specifier sequence,\n+   with the same attribute in them, are OK.  */\n+[[maybe_unused]] [[maybe_unused]] int d [[maybe_unused]] [[maybe_unused]];"}]}