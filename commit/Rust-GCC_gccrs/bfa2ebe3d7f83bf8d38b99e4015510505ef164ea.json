{"sha": "bfa2ebe3d7f83bf8d38b99e4015510505ef164ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZhMmViZTNkN2Y4M2JmOGQzOGI5OWU0MDE1NTEwNTA1ZWYxNjRlYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-07-31T07:51:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-07-31T07:51:41Z"}, "message": "data-streamer.h (streamer_write_data_stream): Declare here, renamed from ...\n\n2014-07-31  Richard Biener  <rguenther@suse.de>\n\n\t* data-streamer.h (streamer_write_data_stream): Declare here,\n\trenamed from ...\n\t* lto-streamer.h (lto_output_data_stream): ... this.  Remove.\n\t* lto-cgraph.c (lto_output_node): Adjust.\n\t(lto_output_varpool_node): Likewise.\n\t* data-streamer-out.c (streamer_string_index): Likewise.\n\t(streamer_write_data_stream, lto_append_block): Move from ...\n\t* lto-section-out.c (lto_output_data_stream,\n\tlto_append_block): ... here.\n\nFrom-SVN: r213317", "tree": {"sha": "ff37ca736ada5ffa9cbb047d08ff03f4d6d72c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff37ca736ada5ffa9cbb047d08ff03f4d6d72c52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfa2ebe3d7f83bf8d38b99e4015510505ef164ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfa2ebe3d7f83bf8d38b99e4015510505ef164ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfa2ebe3d7f83bf8d38b99e4015510505ef164ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfa2ebe3d7f83bf8d38b99e4015510505ef164ea/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5fbeafd47074bda9de09f2fe0e74f45c554f505", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5fbeafd47074bda9de09f2fe0e74f45c554f505", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5fbeafd47074bda9de09f2fe0e74f45c554f505"}], "stats": {"total": 173, "additions": 93, "deletions": 80}, "files": [{"sha": "7176ee8d08622d329bf5fd51d5751f0e5361af45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa2ebe3d7f83bf8d38b99e4015510505ef164ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa2ebe3d7f83bf8d38b99e4015510505ef164ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bfa2ebe3d7f83bf8d38b99e4015510505ef164ea", "patch": "@@ -1,3 +1,15 @@\n+2014-07-31  Richard Biener  <rguenther@suse.de>\n+\n+\t* data-streamer.h (streamer_write_data_stream): Declare here,\n+\trenamed from ...\n+\t* lto-streamer.h (lto_output_data_stream): ... this.  Remove.\n+\t* lto-cgraph.c (lto_output_node): Adjust.\n+\t(lto_output_varpool_node): Likewise.\n+\t* data-streamer-out.c (streamer_string_index): Likewise.\n+\t(streamer_write_data_stream, lto_append_block): Move from ...\n+\t* lto-section-out.c (lto_output_data_stream,\n+\tlto_append_block): ... here.\n+\n 2014-07-30  Mike Stump  <mikestump@comcast.net>\n \n \t* configure.ac: Also check for popen."}, {"sha": "4b3a0119dbe6c850dc18bb0462c171aed20cd62d", "filename": "gcc/data-streamer-out.c", "status": "modified", "additions": 75, "deletions": 1, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa2ebe3d7f83bf8d38b99e4015510505ef164ea/gcc%2Fdata-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa2ebe3d7f83bf8d38b99e4015510505ef164ea/gcc%2Fdata-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdata-streamer-out.c?ref=bfa2ebe3d7f83bf8d38b99e4015510505ef164ea", "patch": "@@ -32,6 +32,49 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"data-streamer.h\"\n \n+\n+/* Adds a new block to output stream OBS.  */\n+\n+void\n+lto_append_block (struct lto_output_stream *obs)\n+{\n+  struct lto_char_ptr_base *new_block;\n+\n+  gcc_assert (obs->left_in_block == 0);\n+\n+  if (obs->first_block == NULL)\n+    {\n+      /* This is the first time the stream has been written\n+\t into.  */\n+      obs->block_size = 1024;\n+      new_block = (struct lto_char_ptr_base*) xmalloc (obs->block_size);\n+      obs->first_block = new_block;\n+    }\n+  else\n+    {\n+      struct lto_char_ptr_base *tptr;\n+      /* Get a new block that is twice as big as the last block\n+\t and link it into the list.  */\n+      obs->block_size *= 2;\n+      new_block = (struct lto_char_ptr_base*) xmalloc (obs->block_size);\n+      /* The first bytes of the block are reserved as a pointer to\n+\t the next block.  Set the chain of the full block to the\n+\t pointer to the new block.  */\n+      tptr = obs->current_block;\n+      tptr->ptr = (char *) new_block;\n+    }\n+\n+  /* Set the place for the next char at the first position after the\n+     chain to the next block.  */\n+  obs->current_pointer\n+    = ((char *) new_block) + sizeof (struct lto_char_ptr_base);\n+  obs->current_block = new_block;\n+  /* Null out the newly allocated block's pointer to the next block.  */\n+  new_block->ptr = NULL;\n+  obs->left_in_block = obs->block_size - sizeof (struct lto_char_ptr_base);\n+}\n+\n+\n /* Return index used to reference STRING of LEN characters in the string table\n    in OB.  The string might or might not include a trailing '\\0'.\n    Then put the index onto the INDEX_STREAM.  \n@@ -71,7 +114,7 @@ streamer_string_index (struct output_block *ob, const char *s, unsigned int len,\n       new_slot->slot_num = start;\n       *slot = new_slot;\n       streamer_write_uhwi_stream (string_stream, len);\n-      lto_output_data_stream (string_stream, string, len);\n+      streamer_write_data_stream (string_stream, string, len);\n       return start + 1;\n     }\n   else\n@@ -304,3 +347,34 @@ streamer_write_gcov_count_stream (struct lto_output_stream *obs, gcov_type work)\n   gcc_assert ((HOST_WIDE_INT) work == work);\n   streamer_write_hwi_stream (obs, work);\n }\n+\n+/* Write raw DATA of length LEN to the output block OB.  */\n+\n+void\n+streamer_write_data_stream (struct lto_output_stream *obs, const void *data,\n+\t\t\t    size_t len)\n+{\n+  while (len)\n+    {\n+      size_t copy;\n+\n+      /* No space left.  */\n+      if (obs->left_in_block == 0)\n+\tlto_append_block (obs);\n+\n+      /* Determine how many bytes to copy in this loop.  */\n+      if (len <= obs->left_in_block)\n+\tcopy = len;\n+      else\n+\tcopy = obs->left_in_block;\n+\n+      /* Copy the data and do bookkeeping.  */\n+      memcpy (obs->current_pointer, data, copy);\n+      obs->current_pointer += copy;\n+      obs->total_size += copy;\n+      obs->left_in_block -= copy;\n+      data = (const char *) data + copy;\n+      len -= copy;\n+    }\n+}\n+"}, {"sha": "56fedd2764d67a3ed5b8cde2e58f30e200295eae", "filename": "gcc/data-streamer.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa2ebe3d7f83bf8d38b99e4015510505ef164ea/gcc%2Fdata-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa2ebe3d7f83bf8d38b99e4015510505ef164ea/gcc%2Fdata-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdata-streamer.h?ref=bfa2ebe3d7f83bf8d38b99e4015510505ef164ea", "patch": "@@ -70,6 +70,8 @@ void streamer_write_uhwi_stream (struct lto_output_stream *,\n \t\t\t\t unsigned HOST_WIDE_INT);\n void streamer_write_hwi_stream (struct lto_output_stream *, HOST_WIDE_INT);\n void streamer_write_gcov_count_stream (struct lto_output_stream *, gcov_type);\n+void streamer_write_data_stream (struct lto_output_stream *, const void *,\n+\t\t\t\t size_t);\n \n /* In data-streamer-in.c  */\n const char *string_for_index (struct data_in *, unsigned int, unsigned int *);"}, {"sha": "ab694a58335a670eb5664c57604bc81889ca0b23", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa2ebe3d7f83bf8d38b99e4015510505ef164ea/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa2ebe3d7f83bf8d38b99e4015510505ef164ea/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=bfa2ebe3d7f83bf8d38b99e4015510505ef164ea", "patch": "@@ -488,7 +488,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n     comdat = IDENTIFIER_POINTER (group);\n   else\n     comdat = \"\";\n-  lto_output_data_stream (ob->main_stream, comdat, strlen (comdat) + 1);\n+  streamer_write_data_stream (ob->main_stream, comdat, strlen (comdat) + 1);\n \n   if (group)\n     {\n@@ -546,7 +546,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n   bp_pack_enum (&bp, ld_plugin_symbol_resolution,\n \t        LDPR_NUM_KNOWN, node->resolution);\n   streamer_write_bitpack (&bp);\n-  lto_output_data_stream (ob->main_stream, section, strlen (section) + 1);\n+  streamer_write_data_stream (ob->main_stream, section, strlen (section) + 1);\n \n   if (node->thunk.thunk_p && !boundary_p)\n     {\n@@ -622,7 +622,7 @@ lto_output_varpool_node (struct lto_simple_output_block *ob, varpool_node *node,\n     comdat = IDENTIFIER_POINTER (group);\n   else\n     comdat = \"\";\n-  lto_output_data_stream (ob->main_stream, comdat, strlen (comdat) + 1);\n+  streamer_write_data_stream (ob->main_stream, comdat, strlen (comdat) + 1);\n \n   if (group)\n     {\n@@ -640,7 +640,7 @@ lto_output_varpool_node (struct lto_simple_output_block *ob, varpool_node *node,\n   section = node->get_section ();\n   if (!section)\n     section = \"\";\n-  lto_output_data_stream (ob->main_stream, section, strlen (section) + 1);\n+  streamer_write_data_stream (ob->main_stream, section, strlen (section) + 1);\n \n   streamer_write_enum (ob->main_stream, ld_plugin_symbol_resolution,\n \t\t       LDPR_NUM_KNOWN, node->resolution);"}, {"sha": "0c5f792bcde3c02cea5527d7e6f89d77264235e7", "filename": "gcc/lto-section-out.c", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa2ebe3d7f83bf8d38b99e4015510505ef164ea/gcc%2Flto-section-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa2ebe3d7f83bf8d38b99e4015510505ef164ea/gcc%2Flto-section-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-out.c?ref=bfa2ebe3d7f83bf8d38b99e4015510505ef164ea", "patch": "@@ -147,79 +147,6 @@ lto_write_stream (struct lto_output_stream *obs)\n }\n \n \n-/* Adds a new block to output stream OBS.  */\n-\n-void\n-lto_append_block (struct lto_output_stream *obs)\n-{\n-  struct lto_char_ptr_base *new_block;\n-\n-  gcc_assert (obs->left_in_block == 0);\n-\n-  if (obs->first_block == NULL)\n-    {\n-      /* This is the first time the stream has been written\n-\t into.  */\n-      obs->block_size = 1024;\n-      new_block = (struct lto_char_ptr_base*) xmalloc (obs->block_size);\n-      obs->first_block = new_block;\n-    }\n-  else\n-    {\n-      struct lto_char_ptr_base *tptr;\n-      /* Get a new block that is twice as big as the last block\n-\t and link it into the list.  */\n-      obs->block_size *= 2;\n-      new_block = (struct lto_char_ptr_base*) xmalloc (obs->block_size);\n-      /* The first bytes of the block are reserved as a pointer to\n-\t the next block.  Set the chain of the full block to the\n-\t pointer to the new block.  */\n-      tptr = obs->current_block;\n-      tptr->ptr = (char *) new_block;\n-    }\n-\n-  /* Set the place for the next char at the first position after the\n-     chain to the next block.  */\n-  obs->current_pointer\n-    = ((char *) new_block) + sizeof (struct lto_char_ptr_base);\n-  obs->current_block = new_block;\n-  /* Null out the newly allocated block's pointer to the next block.  */\n-  new_block->ptr = NULL;\n-  obs->left_in_block = obs->block_size - sizeof (struct lto_char_ptr_base);\n-}\n-\n-\n-/* Write raw DATA of length LEN to the output block OB.  */\n-\n-void\n-lto_output_data_stream (struct lto_output_stream *obs, const void *data,\n-\t\t\tsize_t len)\n-{\n-  while (len)\n-    {\n-      size_t copy;\n-\n-      /* No space left.  */\n-      if (obs->left_in_block == 0)\n-\tlto_append_block (obs);\n-\n-      /* Determine how many bytes to copy in this loop.  */\n-      if (len <= obs->left_in_block)\n-\tcopy = len;\n-      else\n-\tcopy = obs->left_in_block;\n-\n-      /* Copy the data and do bookkeeping.  */\n-      memcpy (obs->current_pointer, data, copy);\n-      obs->current_pointer += copy;\n-      obs->total_size += copy;\n-      obs->left_in_block -= copy;\n-      data = (const char *) data + copy;\n-      len -= copy;\n-    }\n-}\n-\n-\n /* Lookup NAME in ENCODER.  If NAME is not found, create a new entry in\n    ENCODER for NAME with the next available index of ENCODER,  then\n    print the index to OBS.  True is returned if NAME was added to"}, {"sha": "1d728f6aa0936945d64151d1941e5548ea4f89ee", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa2ebe3d7f83bf8d38b99e4015510505ef164ea/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa2ebe3d7f83bf8d38b99e4015510505ef164ea/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=bfa2ebe3d7f83bf8d38b99e4015510505ef164ea", "patch": "@@ -779,8 +779,6 @@ extern void lto_begin_section (const char *, bool);\n extern void lto_end_section (void);\n extern void lto_write_data (const void *, unsigned int);\n extern void lto_write_stream (struct lto_output_stream *);\n-extern void lto_output_data_stream (struct lto_output_stream *, const void *,\n-\t\t\t\t    size_t);\n extern bool lto_output_decl_index (struct lto_output_stream *,\n \t\t\t    struct lto_tree_ref_encoder *,\n \t\t\t    tree, unsigned int *);"}]}