{"sha": "5b21d7b23080cbc1972e160dff2c1f72750380a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIyMWQ3YjIzMDgwY2JjMTk3MmUxNjBkZmYyYzFmNzI3NTAzODBhOQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2009-02-05T11:59:20Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2009-02-05T11:59:20Z"}, "message": "20080625-1.c: Skip for M32C.\n\n        * gcc.c-torture/compile/20080625-1.c: Skip for M32C.\n        * gcc.c-torture/compile/limits-stringlit.c: Likewise.\n        * gcc.dg/cdce1.c: Likewise.\n        * gcc.dg/cpp/_Pragma6.c: Likewise.\n        * g++.dg/cpp/_Pragma1.C: Likewise.\n        * gcc.dg/utf32-2.c: Xfail for M32C.\n        * gcc.dg/utf32-1.c: Likewise.\n        * gcc.dg/utf32-3.c: Likewise.\n        * gcc.dg/Wtype-limits.c: Add expected warning messages for 16-bit\n        targets.\n        * gcc.dg/Wtype-limits-Wextra.c: Likewise.\n        * gcc.dg/utf32-4.c: Only run for 32-bit+ targets.\n        * gcc.dg/Wconversion-5.c: Likewise.\n        * gcc.dg/tree-ssa/data-dep-1.c: Likewise.\n        * gcc.dg/tree-ssa/ldist-3.c: Likewise.\n        * gcc.dg/tree-ssa/ldist-5.c: Likewise.\n        * gcc.dg/utf-inc-init.c: Likewise.\n        * gcc.dg/pr11492.c: Xfail for 16-bit targets.\n        * gcc.dg/utf-array.c: Add expected warning messages for M32C.\n        * gcc.dg/utf-array-short-wchar.c: Likewise.\n        * gcc.dg/tree-ssa/pr33920.c: Expect a warning from all 16-bit targets.\n        * gcc.dg/mallign.c: Use size_t instead of long.\n\nFrom-SVN: r143962", "tree": {"sha": "4e44d254b5dcfbbb9ebe8f4b876de8cd503fa847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e44d254b5dcfbbb9ebe8f4b876de8cd503fa847"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b21d7b23080cbc1972e160dff2c1f72750380a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b21d7b23080cbc1972e160dff2c1f72750380a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b21d7b23080cbc1972e160dff2c1f72750380a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b21d7b23080cbc1972e160dff2c1f72750380a9/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf9b2cc9250862b15f7520c70d689def2cec77c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf9b2cc9250862b15f7520c70d689def2cec77c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf9b2cc9250862b15f7520c70d689def2cec77c6"}], "stats": {"total": 104, "additions": 66, "deletions": 38}, "files": [{"sha": "6299f28c40923617c7d3e15f3be883b6d4881771", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -1,3 +1,28 @@\n+2009-02-05  Nick Clifton  <nickc@redhat.com>\n+\n+\t* gcc.c-torture/compile/20080625-1.c: Skip for M32C.\n+\t* gcc.c-torture/compile/limits-stringlit.c: Likewise.\n+\t* gcc.dg/cdce1.c: Likewise.\n+\t* gcc.dg/cpp/_Pragma6.c: Likewise.\n+\t* g++.dg/cpp/_Pragma1.C: Likewise.\n+\t* gcc.dg/utf32-2.c: Xfail for M32C.\n+\t* gcc.dg/utf32-1.c: Likewise.\n+\t* gcc.dg/utf32-3.c: Likewise.\n+\t* gcc.dg/Wtype-limits.c: Add expected warning messages for 16-bit\n+\ttargets.\n+\t* gcc.dg/Wtype-limits-Wextra.c: Likewise.\n+\t* gcc.dg/utf32-4.c: Only run for 32-bit+ targets.\n+\t* gcc.dg/Wconversion-5.c: Likewise.\n+\t* gcc.dg/tree-ssa/data-dep-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/ldist-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/ldist-5.c: Likewise.\n+\t* gcc.dg/utf-inc-init.c: Likewise.\n+\t* gcc.dg/pr11492.c: Xfail for 16-bit targets.\n+\t* gcc.dg/utf-array.c: Add expected warning messages for M32C.\n+\t* gcc.dg/utf-array-short-wchar.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr33920.c: Expect a warning from all 16-bit targets.\n+\t* gcc.dg/mallign.c: Use size_t instead of long.\n+\n 2009-02-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* g++.dg/torture/pr31863.C: Generalize dg-timeout-factor."}, {"sha": "e44709b45706d3d69d50e933269270026f40aae0", "filename": "gcc/testsuite/g++.dg/cpp/_Pragma1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2F_Pragma1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2F_Pragma1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2F_Pragma1.C?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -2,7 +2,7 @@\n // This is supposed to succeed only if\n // the target defines HANDLE_PRAGMA_PACK_PUSH_POP \n // and doesn't define HANDLE_PRAGMA_PACK_WITH_EXPANSION.\n-// { dg-do compile { target { ! { powerpc-ibm-aix* *-*-solaris2* fido-*-* m68k-*-* sh*-[us]*-elf } } } }\n+// { dg-do compile { target { ! { powerpc-ibm-aix* *-*-solaris2* fido-*-* m68k-*-* sh*-[us]*-elf m32c-*-* } } } }\n \n #define push bar\n #define foo _Pragma (\"pack(push)\")"}, {"sha": "e656cd4f58e4579788a06e415b4d88c2f696b8b5", "filename": "gcc/testsuite/gcc.c-torture/compile/20080625-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20080625-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20080625-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20080625-1.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-skip-if \"too much data\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"too much data\" { \"avr-*-*\" \"m32c-*-*\" } { \"*\" } { \"\" } } */\n struct peakbufStruct {\n     unsigned int lnum [5000];\n     int lscan [5000][4000];"}, {"sha": "75b824d19879c62a61e151399a581eba2c3117d3", "filename": "gcc/testsuite/gcc.c-torture/compile/limits-stringlit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-stringlit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-stringlit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-stringlit.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-skip-if \"Array too big\" { avr-*-* picochip-*-* } { \"*\" } { \"\" } } */ \n+/* { dg-skip-if \"Array too big\" { avr-*-* picochip-*-* m32c-*-* } { \"*\" } { \"\" } } */ \n \n #define STR2 \"012345678901234567890123456789012345678901234567890123456789\\\n 0123456789012345678901234567890123456789\""}, {"sha": "be749a9a65f5b9951c814c317f09dd618b1457f8", "filename": "gcc/testsuite/gcc.dg/Wconversion-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-5.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -19,7 +19,7 @@ void test1 (void)\n   unsigned char f = (int) uc;\n   signed char g = (int) sc;\n   unsigned char h = (unsigned int) (short int) uc;\n-  signed char i = (int) (unsigned short int) sc;\t/* { dg-warning \"may alter its value\" \"\" { xfail avr-*-* } } */\n+  signed char i = (int) (unsigned short int) sc;\t/* { dg-warning \"may alter its value\" \"\" { target { int32plus } } } */\n   unsigned char j = (unsigned int) (short int) us;\t/* { dg-warning \"may alter its value\" } */\n   signed char k = (int) (unsigned short int) ss;\t/* { dg-warning \"may alter its value\" } */\n }"}, {"sha": "f8f528c996b8b60a521309ec5d419aa964ddfda1", "filename": "gcc/testsuite/gcc.dg/Wtype-limits-Wextra.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -21,11 +21,14 @@ void a (unsigned char x)\n }\n \n void b (unsigned short x)\n-{\n-  if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { ! \"avr-*-*\" } } } */\n-  if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { ! \"avr-*-*\" } } } */\n-  if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { ! \"avr-*-*\" } } } */\n-  if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { ! \"avr-*-*\" } } } */\n+{                    /* { dg-warning \"comparison of unsigned expression < 0 is always false\" \"\" { target { ! int32plus } } 25 } */\n+  if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { int32plus } } } */\n+                     /* { dg-warning \"comparison of unsigned expression >= 0 is always true\" \"\" { target { ! int32plus } } 27 } */\n+  if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { int32plus } } } */\n+                     /* { dg-warning \"comparison of unsigned expression < 0 is always false\" \"\" { target { ! int32plus } } 29 } */\n+  if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { int32plus } } } */\n+                     /* { dg-warning \"comparison of unsigned expression >= 0 is always true\" \"\" { target { ! int32plus } } 31 } */\n+  if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { int32plus } } } */\n }\n \n void c (unsigned int x)\n@@ -58,7 +61,7 @@ void e (unsigned long long x)\n \n int test (int x) \n {\n-  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } 61 } */\n+  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } 64 } */\n     return 1;\n   else \n     return 0;"}, {"sha": "5ff9ac053da4b63cc35359118a111e33b35b69f5", "filename": "gcc/testsuite/gcc.dg/Wtype-limits.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -21,11 +21,14 @@ void a (unsigned char x)\n }\n \n void b (unsigned short x)\n-{\n-  if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { ! \"avr-*-*\" } } } */\n-  if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { ! \"avr-*-*\" } } } */\n-  if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { ! \"avr-*-*\" } } } */\n-  if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { ! \"avr-*-*\" } } } */\n+{                    /* { dg-warning \"comparison of unsigned expression < 0 is always false\" \"\" { target { ! int32plus } } 25 } */\n+  if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { int32plus } } } */\n+                     /* { dg-warning \"comparison of unsigned expression >= 0 is always true\" \"\" { target { ! int32plus } } 27 } */\n+  if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { int32plus } } } */  \n+                     /* { dg-warning \"comparison of unsigned expression < 0 is always false\" \"\" { target { ! int32plus } } 29 } */\n+  if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { int32plus } } } */\n+                     /* { dg-warning \"comparison of unsigned expression >= 0 is always true\" \"\" { target { ! int32plus } } 31 } */\n+  if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { int32plus } } } */\n }\n \n void c (unsigned int x)\n@@ -58,7 +61,7 @@ void e (unsigned long long x)\n \n int test (int x) \n {\n-  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } 61 } */\n+  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } 64 } */\n     return 1;\n   else \n     return 0;"}, {"sha": "dda50207015e0230786ce47cacfdf503feb3d862", "filename": "gcc/testsuite/gcc.dg/cdce1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce1.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do  run  } */\n-/* { dg-skip-if \"doubles are floats\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"doubles are floats\" { \"avr-*-*\" \"m32c-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-O2 -fmath-errno -fdump-tree-cdce-details  -lm\" } */\n /* { dg-final { scan-tree-dump  \"cdce1.c:16: note: function call is shrink-wrapped into error conditions\\.\"  \"cdce\" } } */\n /* { dg-final { cleanup-tree-dump \"cdce\" } } */"}, {"sha": "74511a10066cdae8c785af28af55c411e96f0ee5", "filename": "gcc/testsuite/gcc.dg/cpp/_Pragma6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma6.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -2,7 +2,7 @@\n /* This is supposed to succeed only if\n    the target defines HANDLE_PRAGMA_PACK_PUSH_POP\n    and doesn't define HANDLE_PRAGMA_PACK_WITH_EXPANSION.  */\n-/* { dg-do compile { target { ! { powerpc-ibm-aix* *-*-solaris2* fido-*-* m68k-*-* sh*-[us]*-elf } } } } */\n+/* { dg-do compile { target { ! { powerpc-ibm-aix* *-*-solaris2* fido-*-* m68k-*-* sh*-[us]*-elf m32c-*-* } } } } */\n \n #define push bar\n #define foo _Pragma (\"pack(push)\")"}, {"sha": "6a0041e646651aaabbdf47bf17fcf0546b943420", "filename": "gcc/testsuite/gcc.dg/mallign.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Fmallign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Fmallign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmallign.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -9,7 +9,7 @@ typedef int word __attribute__((mode(word)));\n \n int main()\n {\n-    if ((long)malloc (1) & (sizeof(word)-1))\n+    if ((size_t)malloc (1) & (sizeof(word)-1))\n \tabort ();\n     return 0;\n }                                                                              "}, {"sha": "4a8b617617f1e98636427a091c1d80c47d59a10f", "filename": "gcc/testsuite/gcc.dg/pr11492.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr11492.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr11492.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr11492.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -5,7 +5,7 @@ int main( void )\n {\n   unsigned int a;\n   unsigned char b;\n-  for ( a = 0, b = 2; a > b * 1000; a++ ) /* { dg-bogus \"comparison between signed and unsigned integer\" } */\n+  for ( a = 0, b = 2; a > b * 1000; a++ ) /* { dg-bogus \"comparison between signed and unsigned integer\" \"\" { xfail { ! int32plus } } } */\n     { ; }\n \n   return 0;"}, {"sha": "12e42b7491d2c8a6da4a23085adeac80ae377e5e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/data-dep-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdata-dep-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdata-dep-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdata-dep-1.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -1,5 +1,4 @@\n-/* { dg-do compile } */ \n-/* { dg-skip-if \"too much code for avr\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n+/* { dg-do compile { target int32plus } } */ \n /* { dg-options \"-O2 -ftree-loop-linear -fdump-tree-ltrans-all\" } */\n \n int foo (int n, int m)"}, {"sha": "40adfe1a981469303b24d2f13b05da2b2414f49d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ldist-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-3.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -1,5 +1,4 @@\n-/* { dg-do compile } */ \n-/* { dg-skip-if \"too much code for avr\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n+/* { dg-do compile { target int32plus } } */ \n /* { dg-options \"-O2 -ftree-loop-distribution -fdump-tree-ldist-all\" } */\n \n int loop1 (int k)"}, {"sha": "9a03dc17173e8091d66020baf4c2c48568e77f37", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ldist-5.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-5.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -1,5 +1,4 @@\n-/* { dg-do compile } */ \n-/* { dg-skip-if \"too much code for avr\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n+/* { dg-do compile { target int32plus } } */ \n /* { dg-options \"-O2 -ftree-loop-distribution -fdump-tree-ldist-all\" } */\n \n int loop1 (int k)"}, {"sha": "7ddcb21921f74fc8a886e803dfb8f8e596975573", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr33920.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33920.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33920.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33920.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -29,7 +29,7 @@ void init_code ()\n   object V658;\n \n T1240:\n-if (V648 >= (long)V651) /* { dg-warning \"cast from pointer to integer of different size\" \"\" { target { \"avr-*-*\" } } } */\n+if (V648 >= (long)V651) /* { dg-warning \"cast from pointer to integer of different size\" \"\" { target { ! int32plus } } } */\n     goto T1243;\n   V653 = ((char *) V654->v.v_self)[V648];\n   V659 = (object) V654 + V653;"}, {"sha": "55d164fc2878656467cb13ee68c474121ae675ff", "filename": "gcc/testsuite/gcc.dg/utf-array-short-wchar.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array-short-wchar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array-short-wchar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array-short-wchar.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -31,9 +31,9 @@ const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n \n const char32_t\ts32_4[0] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n const char32_t\ts32_5[1] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char32_t\ts32_6[2] = U\"ab\";\n-const char32_t\ts32_7[3] = U\"ab\";\n-const char32_t\ts32_8[4] = U\"ab\";\n+const char32_t\ts32_6[2] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n+const char32_t\ts32_7[3] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n+const char32_t\ts32_8[4] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n \n const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n const wchar_t\tsw_1[]\t= u\"ab\";"}, {"sha": "bbe0976a5391b07421573b29a4117aba4dd80224", "filename": "gcc/testsuite/gcc.dg/utf-array.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -31,9 +31,9 @@ const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" \"\" { target {\n \n const char32_t\ts32_4[0] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n const char32_t\ts32_5[1] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char32_t\ts32_6[2] = U\"ab\";\n-const char32_t\ts32_7[3] = U\"ab\";\n-const char32_t\ts32_8[4] = U\"ab\";\n+const char32_t\ts32_6[2] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n+const char32_t\ts32_7[3] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n+const char32_t\ts32_8[4] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n \n const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n const wchar_t\tsw_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" \"\" { target { ! wchar_t_char16_t_compatible } } } */"}, {"sha": "531d21b2694c2bf34234215536300592690de77b", "filename": "gcc/testsuite/gcc.dg/utf-inc-init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Futf-inc-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Futf-inc-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf-inc-init.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -1,6 +1,6 @@\n /* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n /* Test incremental initializers for char16_t/char32_t arrays. */\n-/* { dg-do run } */\n+/* { dg-do run { target int32plus } } */\n /* { dg-options \"-std=gnu99\" } */\n \n typedef __SIZE_TYPE__ size_t;"}, {"sha": "7919faa6371374d944b2d024a9ae0316fad6072d", "filename": "gcc/testsuite/gcc.dg/utf32-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Futf32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Futf32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf32-1.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -1,7 +1,7 @@\n /* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n /* Test the support for char32_t character constants. */\n /* { dg-do run } */\n-/* { dg-xfail-run-if \"PR36470\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n+/* { dg-xfail-run-if \"PR36470\" { \"avr-*-*\" \"m32c-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-std=gnu99 -Wall -Werror\" } */\n \n typedef __CHAR32_TYPE__ char32_t;"}, {"sha": "3fd1cf1fdf25fae07f3885dca39f78a5fdd43a11", "filename": "gcc/testsuite/gcc.dg/utf32-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Futf32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Futf32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf32-2.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -1,7 +1,7 @@\n /* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n /* Test the support for char32_t* string constants. */\n /* { dg-do run } */\n-/* { dg-xfail-run-if \"PR36470\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n+/* { dg-xfail-run-if \"PR36470\" { \"avr-*-*\" \"m32c-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-std=gnu99 -Wall -Werror\" } */\n \n typedef __CHAR32_TYPE__ char32_t;"}, {"sha": "486d04f946d74c96aae601025b892edd81a5d1de", "filename": "gcc/testsuite/gcc.dg/utf32-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Futf32-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Futf32-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf32-3.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -1,7 +1,7 @@\n /* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n /* Test concatenation of char32_t* string literals. */\n /* { dg-do run } */\n-/* { dg-xfail-run-if \"PR36470\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n+/* { dg-xfail-run-if \"PR36470\" { \"avr-*-*\" \"m32c-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-std=gnu99 -Wall -Werror\" } */\n \n typedef __CHAR32_TYPE__ char32_t;"}, {"sha": "34a78da5f4b44cea61e0a3a33f8cbf65b3cad0d3", "filename": "gcc/testsuite/gcc.dg/utf32-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Futf32-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b21d7b23080cbc1972e160dff2c1f72750380a9/gcc%2Ftestsuite%2Fgcc.dg%2Futf32-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf32-4.c?ref=5b21d7b23080cbc1972e160dff2c1f72750380a9", "patch": "@@ -1,6 +1,6 @@\n /* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n /* Expected errors for char32_t character constants. */\n-/* { dg-do compile } */\n+/* { dg-do compile { target int32plus } } */\n /* { dg-options \"-std=gnu99\" } */\n \n typedef __CHAR32_TYPE__ char32_t;"}]}