{"sha": "7057e6452ba6b205085eede49eddf37c2feab29a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA1N2U2NDUyYmE2YjIwNTA4NWVlZGU0OWVkZGYzN2MyZmVhYjI5YQ==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2013-10-31T14:01:23Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2013-10-31T14:01:23Z"}, "message": "Implement C++14 digit separators.\n\nlibcpp:\n\n2013-10-31  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n        Implement C++14 digit separators.\n\t* include/cpplib.h (cpp_options): Add digit_separators flag.\n\t* internal.h (DIGIT_SEP(c)): New macro.\n\t* expr.c (cpp_classify_number): Check improper placement of digit sep;\n\t(cpp_interpret_integer): Skip over digit separators.\n\t* init.c (lang_flags): Add digit_separators flag; (lang_defaults): Add\n\tdigit separator flags per language; (cpp_set_lang): Set\n\tdigit_separators\n\t* lex.c (lex_number): Add digits separator to allowable characters for\n\tC++14.\n\n\ngcc/c-family:\n\n2013-10-31  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n        Implement C++14 digit separators.\n\t* c-lex.c (interpret_float): Remove digit separators from scratch string\n\tbefore building real literal.\n\n\ngcc/testsuite:\n\n2013-10-31  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n        Implement C++14 digit separators.\n\t* g++.dg/cpp1y/digit-sep.C: New.\n\t* g++.dg/cpp1y/digit-sep-neg.C: New.\n\t* g++.dg/cpp1y/digit-sep-cxx11-neg.C: New.\n\n\nlibstdc++-v3:\n\n2013-10-31  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n        Implement C++14 digit separators.\n\t* include/include/bits/parse_numbers.h: Change struct _Digit<_Base, '`'>\n\tto struct _Digit<_Base, '\\''>.\n\nFrom-SVN: r204260", "tree": {"sha": "28dc58242b9d84a0f1723c9f24e40c623e194ef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28dc58242b9d84a0f1723c9f24e40c623e194ef1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7057e6452ba6b205085eede49eddf37c2feab29a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7057e6452ba6b205085eede49eddf37c2feab29a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7057e6452ba6b205085eede49eddf37c2feab29a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7057e6452ba6b205085eede49eddf37c2feab29a/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b63cb15373bf384f1d644c4cfae0c60422cc3909", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b63cb15373bf384f1d644c4cfae0c60422cc3909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b63cb15373bf384f1d644c4cfae0c60422cc3909"}], "stats": {"total": 218, "additions": 187, "deletions": 31}, "files": [{"sha": "3fa9d137b329db39baef3172dc5675937ebe5b2d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057e6452ba6b205085eede49eddf37c2feab29a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057e6452ba6b205085eede49eddf37c2feab29a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7057e6452ba6b205085eede49eddf37c2feab29a", "patch": "@@ -1,3 +1,9 @@\n+2013-10-31  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+        Implement C++14 digit separators.\n+\t* c-lex.c (interpret_float): Remove digit separators from scratch string\n+\tbefore building real literal.\n+\n 2013-10-30  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cilk.c (create_cilk_helper_decl): Use HOST_WIDE_INT_PRINT_DEC."}, {"sha": "6484352f4c61bf6ddcfff137cc6fc4bb20a928c2", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057e6452ba6b205085eede49eddf37c2feab29a/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057e6452ba6b205085eede49eddf37c2feab29a/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=7057e6452ba6b205085eede49eddf37c2feab29a", "patch": "@@ -774,8 +774,19 @@ interpret_float (const cpp_token *token, unsigned int flags,\n     }\n \n   copy = (char *) alloca (copylen + 1);\n-  memcpy (copy, token->val.str.text, copylen);\n-  copy[copylen] = '\\0';\n+  if (cxx_dialect > cxx11)\n+    {\n+      size_t maxlen = 0;\n+      for (size_t i = 0; i < copylen; ++i)\n+        if (token->val.str.text[i] != '\\'')\n+          copy[maxlen++] = token->val.str.text[i];\n+      copy[maxlen] = '\\0';\n+    }\n+  else\n+    {\n+      memcpy (copy, token->val.str.text, copylen);\n+      copy[copylen] = '\\0';\n+    }\n \n   real_from_string3 (&real, copy, TYPE_MODE (const_type));\n   if (const_type != type)"}, {"sha": "7283dbe3023ad6674d31d510dd9187dddae347dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057e6452ba6b205085eede49eddf37c2feab29a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057e6452ba6b205085eede49eddf37c2feab29a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7057e6452ba6b205085eede49eddf37c2feab29a", "patch": "@@ -1,3 +1,10 @@\n+2013-10-31  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+        Implement C++14 digit separators.\n+\t* g++.dg/cpp1y/digit-sep.C: New.\n+\t* g++.dg/cpp1y/digit-sep-neg.C: New.\n+\t* g++.dg/cpp1y/digit-sep-cxx11-neg.C: New.\n+\n 2013-10-31  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/vect/vect-align-3.c: New test."}, {"sha": "a078fa2a33f92e7d7cb23ad175f4df732f5329fc", "filename": "gcc/testsuite/g++.dg/cpp1y/digit-sep-cxx11-neg.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057e6452ba6b205085eede49eddf37c2feab29a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-cxx11-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057e6452ba6b205085eede49eddf37c2feab29a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-cxx11-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-cxx11-neg.C?ref=7057e6452ba6b205085eede49eddf37c2feab29a", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options -std=c++11 }\n+\n+#define assert(E) if(!(E))__builtin_abort();\n+\n+#define m(x) 0\n+\n+int\n+main()\n+{\n+  int i = m(1'2)+(3'4);\n+  assert(i == 0);\n+}"}, {"sha": "371e675577c9f274ffd9f53aec1af79cf733bfa1", "filename": "gcc/testsuite/g++.dg/cpp1y/digit-sep-neg.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057e6452ba6b205085eede49eddf37c2feab29a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057e6452ba6b205085eede49eddf37c2feab29a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg.C?ref=7057e6452ba6b205085eede49eddf37c2feab29a", "patch": "@@ -0,0 +1,26 @@\n+// { dg-options -std=c++1y }\n+\n+int\n+main()\n+{\n+  int i = 0;\n+  i = 1048''576; // { dg-error \"adjacent digit separators\" }\n+  i = 0X'100000; // { dg-error \"digit separator after base indicator\" }\n+  i = 0x'100000; // { dg-error \"digit separator after base indicator\" }\n+  i = 0004''000'000); // { dg-error \"adjacent digit separators\" }\n+  i = 0B1'0'0'0'0'0'0'0'0'0'0'0'0'0'0'0'0'0'0'0'0; // OK\n+  i = 0b'0001'0000'0000'0000'0000'0000; // { dg-error \"digit separator after base indicator\" }\n+  i = 0b0001'0000'0000'0000'0000'0000'; // { dg-error \"digit separator outside digit sequence\" }\n+  unsigned u = 0b0001'0000'0000'0000'0000'0000'U; // { dg-error \"digit separator outside digit sequence\" }\n+\n+  double d = 0.0;\n+  d = 1'.602'176'565e-19; // { dg-error \"digit separator adjacent to decimal point\" }\n+  d = 1.'602'176'565e-19; // { dg-error \"digit separator adjacent to decimal point\" }\n+  d = 1.602''176'565e-19; // { dg-error \"adjacent digit separators\" }\n+  d = 1.602'176'565'e-19; // { dg-error \"digit separator adjacent to exponent\" }\n+  d = 1.602'176'565e'-19; // { dg-error \"digit separator adjacent to exponent\" }\n+  d = 1.602'176'565e-'19; // { dg-error \"digit separator adjacent to exponent\" }\n+  d = 1.602'176'565e-1'9; // OK\n+  d = 1.602'176'565e-19'; // { dg-error \"digit separator outside digit sequence\" }\n+  float f = 1.602'176'565e-19'F; // { dg-error \"digit separator outside digit sequence\" }\n+}"}, {"sha": "69b1c6910147a5a657dd42d852f12da906de52d6", "filename": "gcc/testsuite/g++.dg/cpp1y/digit-sep.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057e6452ba6b205085eede49eddf37c2feab29a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057e6452ba6b205085eede49eddf37c2feab29a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep.C?ref=7057e6452ba6b205085eede49eddf37c2feab29a", "patch": "@@ -0,0 +1,22 @@\n+// { dg-options -std=c++1y }\n+\n+#define assert(E) if(!(E))__builtin_abort();\n+\n+#define m(x) 0\n+\n+int\n+main()\n+{\n+  assert(1048576 == 1'048'576);\n+  assert(1048576 == 0X100000);\n+  assert(1048576 == 0x10'0000);\n+  assert(1048576 == 0'004'000'000);\n+  assert(1048576 == 0B100000000000000000000);\n+  assert(1048576 == 0b0001'0000'0000'0000'0000'0000);\n+\n+  assert(1.602'176'565e-19 == 1.602176565e-19);\n+  assert(1.602'176'565e-1'9 == 1.602176565e-19);\n+\n+  int i = m(1'2)+(3'4);\n+  assert(i == 34);\n+}"}, {"sha": "2e98e34887e7f09be9deac3075ba2d7083f8cb5b", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057e6452ba6b205085eede49eddf37c2feab29a/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057e6452ba6b205085eede49eddf37c2feab29a/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=7057e6452ba6b205085eede49eddf37c2feab29a", "patch": "@@ -1,3 +1,16 @@\n+2013-10-31  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+        Implement C++14 digit separators.\n+\t* include/cpplib.h (cpp_options): Add digit_separators flag.\n+\t* internal.h (DIGIT_SEP(c)): New macro.\n+\t* expr.c (cpp_classify_number): Check improper placement of digit sep;\n+\t(cpp_interpret_integer): Skip over digit separators.\n+\t* init.c (lang_flags): Add digit_separators flag; (lang_defaults): Add\n+\tdigit separator flags per language; (cpp_set_lang): Set\n+\tdigit_separators\n+\t* lex.c (lex_number): Add digits separator to allowable characters for\n+\tC++14.\n+\n 2013-10-15  David Malcolm  <dmalcolm@redhat.com>\n \n \t* Makefile.in (PICFLAG): New."}, {"sha": "c0098073ab89a70aac3bd391e035bfc8fc893068", "filename": "libcpp/expr.c", "status": "modified", "additions": 56, "deletions": 11, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057e6452ba6b205085eede49eddf37c2feab29a/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057e6452ba6b205085eede49eddf37c2feab29a/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=7057e6452ba6b205085eede49eddf37c2feab29a", "patch": "@@ -394,6 +394,7 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n   unsigned int max_digit, result, radix;\n   enum {NOT_FLOAT = 0, AFTER_POINT, AFTER_EXPON} float_flag;\n   bool seen_digit;\n+  bool seen_digit_sep;\n \n   if (ud_suffix)\n     *ud_suffix = NULL;\n@@ -408,6 +409,7 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n   max_digit = 0;\n   radix = 10;\n   seen_digit = false;\n+  seen_digit_sep = false;\n \n   /* First, interpret the radix.  */\n   if (*str == '0')\n@@ -416,16 +418,27 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n       str++;\n \n       /* Require at least one hex digit to classify it as hex.  */\n-      if ((*str == 'x' || *str == 'X')\n-\t  && (str[1] == '.' || ISXDIGIT (str[1])))\n+      if (*str == 'x' || *str == 'X')\n \t{\n-\t  radix = 16;\n-\t  str++;\n+\t  if (str[1] == '.' || ISXDIGIT (str[1]))\n+\t    {\n+\t      radix = 16;\n+\t      str++;\n+\t    }\n+\t  else if (DIGIT_SEP (str[1]))\n+\t    SYNTAX_ERROR_AT (virtual_location,\n+\t\t\t     \"digit separator after base indicator\");\n \t}\n-      else if ((*str == 'b' || *str == 'B') && (str[1] == '0' || str[1] == '1'))\n+      else if (*str == 'b' || *str == 'B')\n \t{\n-\t  radix = 2;\n-\t  str++;\n+\t  if (str[1] == '0' || str[1] == '1')\n+\t    {\n+\t      radix = 2;\n+\t      str++;\n+\t    }\n+\t  else if (DIGIT_SEP (str[1]))\n+\t    SYNTAX_ERROR_AT (virtual_location,\n+\t\t\t     \"digit separator after base indicator\");\n \t}\n     }\n \n@@ -436,13 +449,24 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n \n       if (ISDIGIT (c) || (ISXDIGIT (c) && radix == 16))\n \t{\n+\t  seen_digit_sep = false;\n \t  seen_digit = true;\n \t  c = hex_value (c);\n \t  if (c > max_digit)\n \t    max_digit = c;\n \t}\n+      else if (DIGIT_SEP (c))\n+\t{\n+\t  if (seen_digit_sep)\n+\t    SYNTAX_ERROR_AT (virtual_location, \"adjacent digit separators\");\n+\t  seen_digit_sep = true;\n+\t}\n       else if (c == '.')\n \t{\n+\t  if (seen_digit_sep || DIGIT_SEP (*str))\n+\t    SYNTAX_ERROR_AT (virtual_location,\n+\t\t\t     \"digit separator adjacent to decimal point\");\n+\t  seen_digit_sep = false;\n \t  if (float_flag == NOT_FLOAT)\n \t    float_flag = AFTER_POINT;\n \t  else\n@@ -452,6 +476,9 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n       else if ((radix <= 10 && (c == 'e' || c == 'E'))\n \t       || (radix == 16 && (c == 'p' || c == 'P')))\n \t{\n+\t  if (seen_digit_sep || DIGIT_SEP (*str))\n+\t    SYNTAX_ERROR_AT (virtual_location,\n+\t\t\t     \"digit separator adjacent to exponent\");\n \t  float_flag = AFTER_EXPON;\n \t  break;\n \t}\n@@ -463,6 +490,10 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n \t}\n     }\n \n+  if (seen_digit_sep && float_flag != AFTER_EXPON)\n+    SYNTAX_ERROR_AT (virtual_location,\n+\t\t     \"digit separator outside digit sequence\");\n+\n   /* The suffix may be for decimal fixed-point constants without exponent.  */\n   if (radix != 16 && float_flag == NOT_FLOAT)\n     {\n@@ -520,16 +551,28 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n \n \t  /* Exponent is decimal, even if string is a hex float.  */\n \t  if (!ISDIGIT (*str))\n-\t    SYNTAX_ERROR_AT (virtual_location, \"exponent has no digits\");\n-\n+\t    {\n+\t      if (DIGIT_SEP (*str))\n+\t\tSYNTAX_ERROR_AT (virtual_location,\n+\t\t\t\t \"digit separator adjacent to exponent\");\n+\t      else\n+\t\tSYNTAX_ERROR_AT (virtual_location, \"exponent has no digits\");\n+\t    }\n \t  do\n-\t    str++;\n-\t  while (ISDIGIT (*str));\n+\t    {\n+\t      seen_digit_sep = DIGIT_SEP (*str);\n+\t      str++;\n+\t    }\n+\t  while (ISDIGIT (*str) || DIGIT_SEP (*str));\n \t}\n       else if (radix == 16)\n \tSYNTAX_ERROR_AT (virtual_location,\n \t\t\t \"hexadecimal floating constants require an exponent\");\n \n+      if (seen_digit_sep)\n+\tSYNTAX_ERROR_AT (virtual_location,\n+\t\t\t \"digit separator outside digit sequence\");\n+\n       result = interpret_float_suffix (pfile, str, limit - str);\n       if (result == 0)\n \t{\n@@ -723,6 +766,8 @@ cpp_interpret_integer (cpp_reader *pfile, const cpp_token *token,\n \n \t  if (ISDIGIT (c) || (base == 16 && ISXDIGIT (c)))\n \t    c = hex_value (c);\n+\t  else if (DIGIT_SEP (c))\n+\t    continue;\n \t  else\n \t    break;\n "}, {"sha": "34ad6c30c8ee9aec17944761fd71631beab85f35", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057e6452ba6b205085eede49eddf37c2feab29a/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057e6452ba6b205085eede49eddf37c2feab29a/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=7057e6452ba6b205085eede49eddf37c2feab29a", "patch": "@@ -437,6 +437,9 @@ struct cpp_options\n   /* Nonzero for C++ 2014 Standard binary constants.  */\n   unsigned char binary_constants;\n \n+  /* Nonzero for C++ 2014 Standard digit separators.  */\n+  unsigned char digit_separators;\n+\n   /* Holds the name of the target (execution) character set.  */\n   const char *narrow_charset;\n "}, {"sha": "97aa6cdd45fa408f64c9594694d9825bde6e4198", "filename": "libcpp/init.c", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057e6452ba6b205085eede49eddf37c2feab29a/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057e6452ba6b205085eede49eddf37c2feab29a/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=7057e6452ba6b205085eede49eddf37c2feab29a", "patch": "@@ -84,24 +84,25 @@ struct lang_flags\n   char rliterals;\n   char user_literals;\n   char binary_constants;\n+  char digit_separators;\n };\n \n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum xid std  //   digr ulit rlit udlit bin_cst */\n-  /* GNUC89   */  { 0,  0,  1,   0,  0,   1,   1,   0,   0,   0,    0 },\n-  /* GNUC99   */  { 1,  0,  1,   0,  0,   1,   1,   1,   1,   0,    0 },\n-  /* GNUC11   */  { 1,  0,  1,   0,  0,   1,   1,   1,   1,   0,    0 },\n-  /* STDC89   */  { 0,  0,  0,   0,  1,   0,   0,   0,   0,   0,    0 },\n-  /* STDC94   */  { 0,  0,  0,   0,  1,   0,   1,   0,   0,   0,    0 },\n-  /* STDC99   */  { 1,  0,  1,   0,  1,   1,   1,   0,   0,   0,    0 },\n-  /* STDC11   */  { 1,  0,  1,   0,  1,   1,   1,   1,   0,   0,    0 },\n-  /* GNUCXX   */  { 0,  1,  1,   0,  0,   1,   1,   0,   0,   0,    0 },\n-  /* CXX98    */  { 0,  1,  1,   0,  1,   1,   1,   0,   0,   0,    0 },\n-  /* GNUCXX11 */  { 1,  1,  1,   0,  0,   1,   1,   1,   1,   1,    0 },\n-  /* CXX11    */  { 1,  1,  1,   0,  1,   1,   1,   1,   1,   1,    0 },\n-  /* GNUCXX1Y */  { 1,  1,  1,   0,  0,   1,   1,   1,   1,   1,    1 },\n-  /* CXX1Y    */  { 1,  1,  1,   0,  1,   1,   1,   1,   1,   1,    1 },\n-  /* ASM      */  { 0,  0,  1,   0,  0,   1,   0,   0,   0,   0,    0 }\n+{ /*              c99 c++ xnum xid std  //   digr ulit rlit udlit bin_cst dig_sep */\n+  /* GNUC89   */  { 0,  0,  1,   0,  0,   1,   1,   0,   0,   0,    0,      0 },\n+  /* GNUC99   */  { 1,  0,  1,   0,  0,   1,   1,   1,   1,   0,    0,      0 },\n+  /* GNUC11   */  { 1,  0,  1,   0,  0,   1,   1,   1,   1,   0,    0,      0 },\n+  /* STDC89   */  { 0,  0,  0,   0,  1,   0,   0,   0,   0,   0,    0,      0 },\n+  /* STDC94   */  { 0,  0,  0,   0,  1,   0,   1,   0,   0,   0,    0,      0 },\n+  /* STDC99   */  { 1,  0,  1,   0,  1,   1,   1,   0,   0,   0,    0,      0 },\n+  /* STDC11   */  { 1,  0,  1,   0,  1,   1,   1,   1,   0,   0,    0,      0 },\n+  /* GNUCXX   */  { 0,  1,  1,   0,  0,   1,   1,   0,   0,   0,    0,      0 },\n+  /* CXX98    */  { 0,  1,  1,   0,  1,   1,   1,   0,   0,   0,    0,      0 },\n+  /* GNUCXX11 */  { 1,  1,  1,   0,  0,   1,   1,   1,   1,   1,    0,      0 },\n+  /* CXX11    */  { 1,  1,  1,   0,  1,   1,   1,   1,   1,   1,    0,      0 },\n+  /* GNUCXX1Y */  { 1,  1,  1,   0,  0,   1,   1,   1,   1,   1,    1,      1 },\n+  /* CXX1Y    */  { 1,  1,  1,   0,  1,   1,   1,   1,   1,   1,    1,      1 },\n+  /* ASM      */  { 0,  0,  1,   0,  0,   1,   0,   0,   0,   0,    0,      0 }\n   /* xid should be 1 for GNUC99, STDC99, GNUCXX, CXX98, GNUCXX11, CXX11,\n      GNUCXX1Y, and CXX1Y when no longer experimental (when all uses of\n      identifiers in the compiler have been audited for correct handling\n@@ -128,6 +129,7 @@ cpp_set_lang (cpp_reader *pfile, enum c_lang lang)\n   CPP_OPTION (pfile, rliterals)\t\t\t = l->rliterals;\n   CPP_OPTION (pfile, user_literals)\t\t = l->user_literals;\n   CPP_OPTION (pfile, binary_constants)\t\t = l->binary_constants;\n+  CPP_OPTION (pfile, digit_separators)\t\t = l->digit_separators;\n }\n \n /* Initialize library global state.  */"}, {"sha": "6de44ed355621e994f0afee790106b1d5e7f4bca", "filename": "libcpp/internal.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057e6452ba6b205085eede49eddf37c2feab29a/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057e6452ba6b205085eede49eddf37c2feab29a/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=7057e6452ba6b205085eede49eddf37c2feab29a", "patch": "@@ -59,6 +59,8 @@ struct cset_converter\n     || (((prevc) == 'p' || (prevc) == 'P') \\\n         && CPP_OPTION (pfile, extended_numbers))))\n \n+#define DIGIT_SEP(c) ((c) == '\\'' && CPP_OPTION (pfile, digit_separators))\n+\n #define CPP_OPTION(PFILE, OPTION) ((PFILE)->opts.OPTION)\n #define CPP_BUFFER(PFILE) ((PFILE)->buffer)\n #define CPP_BUF_COLUMN(BUF, CUR) ((CUR) - (BUF)->line_base)"}, {"sha": "95995edca336e8b237ab4e7fbd0d334634b763b6", "filename": "libcpp/lex.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057e6452ba6b205085eede49eddf37c2feab29a/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057e6452ba6b205085eede49eddf37c2feab29a/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=7057e6452ba6b205085eede49eddf37c2feab29a", "patch": "@@ -1274,7 +1274,8 @@ lex_number (cpp_reader *pfile, cpp_string *number,\n       cur = pfile->buffer->cur;\n \n       /* N.B. ISIDNUM does not include $.  */\n-      while (ISIDNUM (*cur) || *cur == '.' || VALID_SIGN (*cur, cur[-1]))\n+      while (ISIDNUM (*cur) || *cur == '.' || DIGIT_SEP (*cur)\n+\t     || VALID_SIGN (*cur, cur[-1]))\n \t{\n \t  cur++;\n \t  NORMALIZE_STATE_UPDATE_IDNUM (nst);"}, {"sha": "0b51888fb21ff2317ad1fb26ada1ed32da81b695", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057e6452ba6b205085eede49eddf37c2feab29a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057e6452ba6b205085eede49eddf37c2feab29a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7057e6452ba6b205085eede49eddf37c2feab29a", "patch": "@@ -1,3 +1,9 @@\n+2013-10-31  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+        Implement C++14 digit separators.\n+\t* include/include/bits/parse_numbers.h: Change struct _Digit<_Base, '`'>\n+\tto struct _Digit<_Base, '\\''>.\n+\n 2013-10-31  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/20_util/default_delete/48631_neg.cc: Tweak dg-prune."}, {"sha": "537b772e95ffd26c391009698beb700eb4155f29", "filename": "libstdc++-v3/include/bits/parse_numbers.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057e6452ba6b205085eede49eddf37c2feab29a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057e6452ba6b205085eede49eddf37c2feab29a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h?ref=7057e6452ba6b205085eede49eddf37c2feab29a", "patch": "@@ -32,7 +32,7 @@\n \n #pragma GCC system_header\n \n-// From n3642.pdf except I added binary literals and digit separator '`'.\n+// From n3642.pdf except I added binary literals and digit separator '\\''.\n \n #if __cplusplus > 201103L\n \n@@ -221,7 +221,7 @@ namespace __parse_int {\n \n   //  Digit separator\n   template<unsigned _Base>\n-    struct _Digit<_Base, '`'>\n+    struct _Digit<_Base, '\\''>\n     {\n       static constexpr bool valid{false};\n       static constexpr unsigned value{0};"}]}