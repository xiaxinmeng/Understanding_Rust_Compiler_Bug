{"sha": "4ca1f68f884d05a22695c0c247a72b32c49ec554", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNhMWY2OGY4ODRkMDVhMjI2OTVjMGMyNDdhNzJiMzJjNDllYzU1NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-29T20:13:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-29T20:13:12Z"}, "message": "mips.h (mips_builtins, [...]): Delete.\n\n\t* config/mips/mips.h (mips_builtins, mips_cmp_choice): Delete.\n\t(mips_function_type): Move to mips.c.\n\t* config/mips/mips.c (mips_builtin_type): New enum.\n\t(builtin_description): Replace code and ftype with builtin_type\n\tand function_type.\n\t(DIRECT_BUILTIN, CMP_SCALAR_BUILTINS, CMP_PS_BUILTINS, CMP_4S_BUILTINS)\n\t(MOVTF_BUILTINS, CMP_BUILTINS): New macros.\n\t(CODE_FOR_mips_abs_ps): Define.\n\t(mips_bdesc): Use new macros.\n\t(mips_expand_builtin): Use builtin_type.  Update calls to subroutines.\n\t(mips_init_builtins): Use the mips_bdesc[] index as the function code.\n\t(mips_expand_builtin_direct): New function.\n\t(mips_expand_builtin_movtf): Renamed from mips_expand_ps_cond_move_\n\tbuiltin.  Replace boolean parameter with builtin_type.\n\t(mips_expand_compare_builtin, mips_expand_scalar_compare_builtin)\n\t(mips_expand_4s_compare_builtin): Delete, replacing with...\n\t(mips_expand_builtin_compare): ...this new function.\n\nFrom-SVN: r86733", "tree": {"sha": "fa38d22fe213ccfaed72b57a06248aa73a040260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa38d22fe213ccfaed72b57a06248aa73a040260"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ca1f68f884d05a22695c0c247a72b32c49ec554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca1f68f884d05a22695c0c247a72b32c49ec554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca1f68f884d05a22695c0c247a72b32c49ec554", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca1f68f884d05a22695c0c247a72b32c49ec554/comments", "author": null, "committer": null, "parents": [{"sha": "5e9f78cc748e907a69955f0b88fecf2686683843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9f78cc748e907a69955f0b88fecf2686683843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e9f78cc748e907a69955f0b88fecf2686683843"}], "stats": {"total": 2002, "additions": 317, "deletions": 1685}, "files": [{"sha": "7e081b6bbea7df4554948fd39fe9778107192cee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca1f68f884d05a22695c0c247a72b32c49ec554/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca1f68f884d05a22695c0c247a72b32c49ec554/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ca1f68f884d05a22695c0c247a72b32c49ec554", "patch": "@@ -1,3 +1,23 @@\n+2004-08-29  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (mips_builtins, mips_cmp_choice): Delete.\n+\t(mips_function_type): Move to mips.c.\n+\t* config/mips/mips.c (mips_builtin_type): New enum.\n+\t(builtin_description): Replace code and ftype with builtin_type\n+\tand function_type.\n+\t(DIRECT_BUILTIN, CMP_SCALAR_BUILTINS, CMP_PS_BUILTINS, CMP_4S_BUILTINS)\n+\t(MOVTF_BUILTINS, CMP_BUILTINS): New macros.\n+\t(CODE_FOR_mips_abs_ps): Define.\n+\t(mips_bdesc): Use new macros.\n+\t(mips_expand_builtin): Use builtin_type.  Update calls to subroutines.\n+\t(mips_init_builtins): Use the mips_bdesc[] index as the function code.\n+\t(mips_expand_builtin_direct): New function.\n+\t(mips_expand_builtin_movtf): Renamed from mips_expand_ps_cond_move_\n+\tbuiltin.  Replace boolean parameter with builtin_type.\n+\t(mips_expand_compare_builtin, mips_expand_scalar_compare_builtin)\n+\t(mips_expand_4s_compare_builtin): Delete, replacing with...\n+\t(mips_expand_builtin_compare): ...this new function.\n+\n 2004-08-29  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR rtl-optimization/16590"}, {"sha": "39ea62d53f88b8fd998f773cfca8e273b2f11432", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 297, "deletions": 1318, "changes": 1615, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca1f68f884d05a22695c0c247a72b32c49ec554/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca1f68f884d05a22695c0c247a72b32c49ec554/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=4ca1f68f884d05a22695c0c247a72b32c49ec554", "patch": "@@ -132,6 +132,62 @@ enum mips_address_type {\n   ADDRESS_SYMBOLIC\n };\n \n+/* Classifies the prototype of a builtin function.  */\n+enum mips_function_type\n+{\n+  MIPS_V2SF_FTYPE_V2SF,\n+  MIPS_V2SF_FTYPE_V2SF_V2SF,\n+  MIPS_V2SF_FTYPE_V2SF_V2SF_INT,\n+  MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+  MIPS_V2SF_FTYPE_SF_SF,\n+  MIPS_INT_FTYPE_V2SF_V2SF,\n+  MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+  MIPS_INT_FTYPE_SF_SF,\n+  MIPS_INT_FTYPE_DF_DF,\n+  MIPS_SF_FTYPE_V2SF,\n+  MIPS_SF_FTYPE_SF,\n+  MIPS_SF_FTYPE_SF_SF,\n+  MIPS_DF_FTYPE_DF,\n+  MIPS_DF_FTYPE_DF_DF,\n+\n+  /* The last type.  */\n+  MIPS_MAX_FTYPE_MAX\n+};\n+\n+/* Specifies how a builtin function should be converted into rtl.  */\n+enum mips_builtin_type\n+{\n+  /* The builtin corresponds directly to an .md pattern.  The return\n+     value is mapped to operand 0 and the arguments are mapped to\n+     operands 1 and above.  */\n+  MIPS_BUILTIN_DIRECT,\n+\n+  /* The builtin corresponds to a comparison instruction followed by\n+     a mips_cond_move_tf_ps pattern.  The first two arguments are the\n+     values to compare and the second two arguments are the vector\n+     operands for the movt.ps or movf.ps instruction (in assembly order).  */\n+  MIPS_BUILTIN_MOVF,\n+  MIPS_BUILTIN_MOVT,\n+\n+  /* The builtin corresponds to a V2SF comparison instruction.  Operand 0\n+     of this instruction is the result of the comparison, which has mode\n+     CCV2 or CCV4.  The function arguments are mapped to operands 1 and\n+     above.  The function's return value is an SImode boolean that is\n+     true under the following conditions:\n+\n+     MIPS_BUILTIN_CMP_ANY: one of the registers is true\n+     MIPS_BUILTIN_CMP_ALL: all of the registers are true\n+     MIPS_BUILTIN_CMP_LOWER: the first register is true\n+     MIPS_BUILTIN_CMP_UPPER: the second register is true.  */\n+  MIPS_BUILTIN_CMP_ANY,\n+  MIPS_BUILTIN_CMP_ALL,\n+  MIPS_BUILTIN_CMP_UPPER,\n+  MIPS_BUILTIN_CMP_LOWER,\n+\n+  /* As above, but the instruction only sets a single $fcc register.  */\n+  MIPS_BUILTIN_CMP_SINGLE\n+};\n+\n /* A function to save or store a register.  The first argument is the\n    register and the second is the stack slot.  */\n typedef void (*mips_save_restore_fn) (rtx, rtx);\n@@ -267,13 +323,11 @@ static rtx mips_prepare_builtin_arg (enum insn_code, unsigned int, tree *);\n static rtx mips_prepare_builtin_target (enum insn_code, unsigned int, rtx);\n static rtx mips_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static void mips_init_builtins (void);\n-static rtx mips_expand_ps_cond_move_builtin (bool, enum insn_code, rtx, tree);\n-static rtx mips_expand_compare_builtin (bool, rtx, rtx, rtx, int);\n-static rtx mips_expand_scalar_compare_builtin (enum insn_code, rtx, tree);\n-static rtx mips_expand_4s_compare_builtin (enum mips_cmp_choice,\n-\t\t\t\t\t   enum insn_code, rtx, tree);\n-static rtx mips_expand_ps_compare_builtin (enum mips_cmp_choice,\n-\t\t\t\t\t   enum insn_code, rtx, tree);\n+static rtx mips_expand_builtin_direct (enum insn_code, rtx, tree);\n+static rtx mips_expand_builtin_movtf (enum mips_builtin_type,\n+\t\t\t\t      enum insn_code, rtx, tree);\n+static rtx mips_expand_builtin_compare (enum mips_builtin_type,\n+\t\t\t\t\tenum insn_code, rtx, tree);\n \n /* Structure to be filled in by compute_frame_size with register\n    save masks, and offsets for the current function.  */\n@@ -9212,804 +9266,131 @@ mips_prefetch_cookie (rtx write, rtx locality)\n \n struct builtin_description\n {\n-  /* Instruction code.  */\n+  /* The code of the main .md file instruction.  See mips_builtin_type\n+     for more information.  */\n   enum insn_code icode;\n-  /* Builtin function name.  */\n+\n+  /* The name of the builtin function.  */\n   const char *name;              \n-  /* Builtin code.  */\n-  enum mips_builtins code;       \n-  /* Function type.  */\n-  enum mips_function_type ftype; \n-  /* The target flag required for this builtin function.  */\n-  int target_flags;   \n+\n+  /* Specifies how the function should be expanded.  */\n+  enum mips_builtin_type builtin_type;\n+\n+  /* The function's prototype.  */\n+  enum mips_function_type function_type;\n+\n+  /* The target flags required for this function.  */\n+  int target_flags;\n };\n \n-/* NOTE: The order of mips_bdesc[] must be the same as the order of\n-   enum mips_builtins{} in mips.h.  */\n+/* Define a MIPS_BUILTIN_DIRECT function for instruction CODE_FOR_mips_<INSN>.\n+   FUNCTION_TYPE and TARGET_FLAGS are builtin_description fields.  */\n+#define DIRECT_BUILTIN(INSN, FUNCTION_TYPE, TARGET_FLAGS)\t\t\\\n+  { CODE_FOR_mips_ ## INSN, \"__builtin_mips_\" #INSN,\t\t\t\\\n+    MIPS_BUILTIN_DIRECT, FUNCTION_TYPE, TARGET_FLAGS }\n+\n+/* Define builtins for scalar comparison instructions CODE_FOR_mips_<INSN>_s\n+   and CODE_FOR_mips_<INSN>_d, both of which require TARGET_FLAGS.  */\n+#define CMP_SCALAR_BUILTINS(INSN, TARGET_FLAGS)\t\t\t\t\\\n+  { CODE_FOR_mips_ ## INSN ## _s, \"__builtin_mips_\" #INSN \"_s\",\t\t\\\n+    MIPS_BUILTIN_CMP_SINGLE, MIPS_INT_FTYPE_SF_SF, TARGET_FLAGS },\t\\\n+  { CODE_FOR_mips_ ## INSN ## _d, \"__builtin_mips_\" #INSN \"_d\",\t\t\\\n+    MIPS_BUILTIN_CMP_SINGLE, MIPS_INT_FTYPE_DF_DF, TARGET_FLAGS }\n+\n+/* Define builtins for PS comparison instruction CODE_FOR_mips_<INSN>_ps.\n+   The lower and upper forms require TARGET_FLAGS while the any and all\n+   forms require MASK_MIPS3D.  */\n+#define CMP_PS_BUILTINS(INSN, TARGET_FLAGS)\t\t\t\t\\\n+  { CODE_FOR_mips_ ## INSN ## _ps, \"__builtin_mips_any_\" #INSN \"_ps\",\t\\\n+    MIPS_BUILTIN_CMP_ANY, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\t\\\n+  { CODE_FOR_mips_ ## INSN ## _ps, \"__builtin_mips_all_\" #INSN \"_ps\",\t\\\n+    MIPS_BUILTIN_CMP_ALL, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\t\\\n+  { CODE_FOR_mips_ ## INSN ## _ps, \"__builtin_mips_lower_\" #INSN \"_ps\",\t\\\n+    MIPS_BUILTIN_CMP_LOWER, MIPS_INT_FTYPE_V2SF_V2SF, TARGET_FLAGS },\t\\\n+  { CODE_FOR_mips_ ## INSN ## _ps, \"__builtin_mips_upper_\" #INSN \"_ps\",\t\\\n+    MIPS_BUILTIN_CMP_UPPER, MIPS_INT_FTYPE_V2SF_V2SF, TARGET_FLAGS }\n+\n+/* Define builtins for instruction CODE_FOR_mips_<INSN>_4s, which compares\n+   two pairs of V2SF vectors.  The functions require MASK_MIPS3D.  */\n+#define CMP_4S_BUILTINS(INSN)\t\t\t\t\t\t\\\n+  { CODE_FOR_mips_ ## INSN ## _4s, \"__builtin_mips_any_\" #INSN \"_4s\",\t\\\n+    MIPS_BUILTIN_CMP_ANY, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\t\t\\\n+    MASK_MIPS3D },\t\t\t\t\t\t\t\\\n+  { CODE_FOR_mips_ ## INSN ## _4s, \"__builtin_mips_all_\" #INSN \"_4s\",\t\\\n+    MIPS_BUILTIN_CMP_ALL, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\t\t\\\n+    MASK_MIPS3D }\n+\n+/* Define movt and movf builtins that use CODE_FOR_mips_<INSN>_ps as\n+   the comparison instruction.  The comparison instruction requires\n+   TARGET_FLAGS.  */\n+#define MOVTF_BUILTINS(INSN, TARGET_FLAGS)\t\t\t\t\\\n+  { CODE_FOR_mips_ ## INSN ## _ps, \"__builtin_mips_movt_\" #INSN \"_ps\",\t\\\n+    MIPS_BUILTIN_MOVT, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\t\t\\\n+    TARGET_FLAGS },\t\t\t\t\t\t\t\\\n+  { CODE_FOR_mips_ ## INSN ## _ps, \"__builtin_mips_movf_\" #INSN \"_ps\",\t\\\n+    MIPS_BUILTIN_MOVF, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\t\t\\\n+    TARGET_FLAGS }\n+\n+/* Define all the builtins related to c.cond.fmt condition COND.  */\n+#define CMP_BUILTINS(COND)\t\t\t\t\t\t\\\n+  MOVTF_BUILTINS (c_ ## COND, MASK_PAIRED_SINGLE),\t\t\t\\\n+  MOVTF_BUILTINS (cabs_ ## COND, MASK_MIPS3D),\t\t\t\t\\\n+  CMP_SCALAR_BUILTINS (cabs_ ## COND, MASK_MIPS3D),\t\t\t\\\n+  CMP_PS_BUILTINS (c_ ## COND, MASK_PAIRED_SINGLE),\t\t\t\\\n+  CMP_PS_BUILTINS (cabs_ ## COND, MASK_MIPS3D),\t\t\t\t\\\n+  CMP_4S_BUILTINS (c_ ## COND),\t\t\t\t\t\t\\\n+  CMP_4S_BUILTINS (cabs_ ## COND)\n+\n+/* __builtin_mips_abs_ps() maps to the standard absM2 pattern.  */\n+#define CODE_FOR_mips_abs_ps CODE_FOR_absv2sf2\n+\n static const struct builtin_description mips_bdesc[] =\n {\n-  { CODE_FOR_mips_pll_ps, \"__builtin_mips_pll_ps\", MIPS_BUILTIN_PLL_PS,\n-    MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_pul_ps, \"__builtin_mips_pul_ps\", MIPS_BUILTIN_PUL_PS,\n-    MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_plu_ps, \"__builtin_mips_plu_ps\", MIPS_BUILTIN_PLU_PS,\n-    MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_puu_ps, \"__builtin_mips_puu_ps\", MIPS_BUILTIN_PUU_PS,\n-    MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_cvt_ps_s, \"__builtin_mips_cvt_ps_s\", MIPS_BUILTIN_CVT_PS_S,\n-    MIPS_V2SF_FTYPE_SF_SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_cvt_s_pl, \"__builtin_mips_cvt_s_pl\", MIPS_BUILTIN_CVT_S_PL,\n-    MIPS_SF_FTYPE_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_cvt_s_pu, \"__builtin_mips_cvt_s_pu\", MIPS_BUILTIN_CVT_S_PU,\n-    MIPS_SF_FTYPE_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_absv2sf2, \"__builtin_mips_abs_ps\", MIPS_BUILTIN_ABS_PS,\n-    MIPS_V2SF_FTYPE_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_alnv_ps, \"__builtin_mips_alnv_ps\", MIPS_BUILTIN_ALNV_PS,\n-    MIPS_V2SF_FTYPE_V2SF_V2SF_INT, MASK_PAIRED_SINGLE },\n-\n-  { CODE_FOR_mips_addr_ps, \"__builtin_mips_addr_ps\", MIPS_BUILTIN_ADDR_PS,\n-    MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_mulr_ps, \"__builtin_mips_mulr_ps\", MIPS_BUILTIN_MULR_PS,\n-    MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cvt_pw_ps, \"__builtin_mips_cvt_pw_ps\",\n-    MIPS_BUILTIN_CVT_PW_PS, MIPS_V2SF_FTYPE_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cvt_ps_pw, \"__builtin_mips_cvt_ps_pw\",\n-    MIPS_BUILTIN_CVT_PS_PW, MIPS_V2SF_FTYPE_V2SF, MASK_MIPS3D },\n-\n-  { CODE_FOR_mips_recip1_s, \"__builtin_mips_recip1_s\", MIPS_BUILTIN_RECIP1_S,\n-    MIPS_SF_FTYPE_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_recip1_d, \"__builtin_mips_recip1_d\", MIPS_BUILTIN_RECIP1_D,\n-    MIPS_DF_FTYPE_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_recip1_ps, \"__builtin_mips_recip1_ps\",\n-    MIPS_BUILTIN_RECIP1_PS, MIPS_V2SF_FTYPE_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_recip2_s, \"__builtin_mips_recip2_s\", MIPS_BUILTIN_RECIP2_S,\n-    MIPS_SF_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_recip2_d, \"__builtin_mips_recip2_d\", MIPS_BUILTIN_RECIP2_D,\n-    MIPS_DF_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_recip2_ps, \"__builtin_mips_recip2_ps\",\n-    MIPS_BUILTIN_RECIP2_PS, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-\n-  { CODE_FOR_mips_rsqrt1_s, \"__builtin_mips_rsqrt1_s\", MIPS_BUILTIN_RSQRT1_S,\n-    MIPS_SF_FTYPE_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_rsqrt1_d, \"__builtin_mips_rsqrt1_d\", MIPS_BUILTIN_RSQRT1_D,\n-    MIPS_DF_FTYPE_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_rsqrt1_ps, \"__builtin_mips_rsqrt1_ps\",\n-    MIPS_BUILTIN_RSQRT1_PS, MIPS_V2SF_FTYPE_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_rsqrt2_s, \"__builtin_mips_rsqrt2_s\", MIPS_BUILTIN_RSQRT2_S,\n-    MIPS_SF_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_rsqrt2_d, \"__builtin_mips_rsqrt2_d\", MIPS_BUILTIN_RSQRT2_D,\n-    MIPS_DF_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_rsqrt2_ps, \"__builtin_mips_rsqrt2_ps\",\n-    MIPS_BUILTIN_RSQRT2_PS, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-\n-  { CODE_FOR_mips_c_f_ps, \"__builtin_mips_any_c_f_ps\", MIPS_BUILTIN_ANY_C_F_PS,\n-    MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_f_ps, \"__builtin_mips_upper_c_f_ps\",\n-    MIPS_BUILTIN_UPPER_C_F_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_f_ps, \"__builtin_mips_lower_c_f_ps\",\n-    MIPS_BUILTIN_LOWER_C_F_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_f_ps, \"__builtin_mips_all_c_f_ps\", MIPS_BUILTIN_ALL_C_F_PS,\n-    MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_un_ps, \"__builtin_mips_any_c_un_ps\",\n-    MIPS_BUILTIN_ANY_C_UN_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_un_ps, \"__builtin_mips_upper_c_un_ps\",\n-    MIPS_BUILTIN_UPPER_C_UN_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_un_ps, \"__builtin_mips_lower_c_un_ps\",\n-    MIPS_BUILTIN_LOWER_C_UN_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_un_ps, \"__builtin_mips_all_c_un_ps\",\n-    MIPS_BUILTIN_ALL_C_UN_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_eq_ps, \"__builtin_mips_any_c_eq_ps\",\n-    MIPS_BUILTIN_ANY_C_EQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_eq_ps, \"__builtin_mips_upper_c_eq_ps\",\n-    MIPS_BUILTIN_UPPER_C_EQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_eq_ps, \"__builtin_mips_lower_c_eq_ps\",\n-    MIPS_BUILTIN_LOWER_C_EQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_eq_ps, \"__builtin_mips_all_c_eq_ps\",\n-    MIPS_BUILTIN_ALL_C_EQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ueq_ps, \"__builtin_mips_any_c_ueq_ps\",\n-    MIPS_BUILTIN_ANY_C_UEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ueq_ps, \"__builtin_mips_upper_c_ueq_ps\",\n-    MIPS_BUILTIN_UPPER_C_UEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ueq_ps, \"__builtin_mips_lower_c_ueq_ps\",\n-    MIPS_BUILTIN_LOWER_C_UEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ueq_ps, \"__builtin_mips_all_c_ueq_ps\",\n-    MIPS_BUILTIN_ALL_C_UEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_olt_ps, \"__builtin_mips_any_c_olt_ps\",\n-    MIPS_BUILTIN_ANY_C_OLT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_olt_ps, \"__builtin_mips_upper_c_olt_ps\",\n-    MIPS_BUILTIN_UPPER_C_OLT_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_olt_ps, \"__builtin_mips_lower_c_olt_ps\",\n-    MIPS_BUILTIN_LOWER_C_OLT_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_olt_ps, \"__builtin_mips_all_c_olt_ps\",\n-    MIPS_BUILTIN_ALL_C_OLT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ult_ps, \"__builtin_mips_any_c_ult_ps\",\n-    MIPS_BUILTIN_ANY_C_ULT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ult_ps, \"__builtin_mips_upper_c_ult_ps\",\n-    MIPS_BUILTIN_UPPER_C_ULT_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ult_ps, \"__builtin_mips_lower_c_ult_ps\",\n-    MIPS_BUILTIN_LOWER_C_ULT_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ult_ps, \"__builtin_mips_all_c_ult_ps\",\n-    MIPS_BUILTIN_ALL_C_ULT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ole_ps, \"__builtin_mips_any_c_ole_ps\",\n-    MIPS_BUILTIN_ANY_C_OLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ole_ps, \"__builtin_mips_upper_c_ole_ps\",\n-    MIPS_BUILTIN_UPPER_C_OLE_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ole_ps, \"__builtin_mips_lower_c_ole_ps\",\n-    MIPS_BUILTIN_LOWER_C_OLE_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ole_ps, \"__builtin_mips_all_c_ole_ps\",\n-    MIPS_BUILTIN_ALL_C_OLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ule_ps, \"__builtin_mips_any_c_ule_ps\",\n-    MIPS_BUILTIN_ANY_C_ULE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ule_ps, \"__builtin_mips_upper_c_ule_ps\",\n-    MIPS_BUILTIN_UPPER_C_ULE_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ule_ps, \"__builtin_mips_lower_c_ule_ps\",\n-    MIPS_BUILTIN_LOWER_C_ULE_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ule_ps, \"__builtin_mips_all_c_ule_ps\",\n-    MIPS_BUILTIN_ALL_C_ULE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_sf_ps, \"__builtin_mips_any_c_sf_ps\",\n-    MIPS_BUILTIN_ANY_C_SF_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_sf_ps, \"__builtin_mips_upper_c_sf_ps\",\n-    MIPS_BUILTIN_UPPER_C_SF_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_sf_ps, \"__builtin_mips_lower_c_sf_ps\",\n-    MIPS_BUILTIN_LOWER_C_SF_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_sf_ps, \"__builtin_mips_all_c_sf_ps\",\n-    MIPS_BUILTIN_ALL_C_SF_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ngle_ps, \"__builtin_mips_any_c_ngle_ps\",\n-    MIPS_BUILTIN_ANY_C_NGLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ngle_ps, \"__builtin_mips_upper_c_ngle_ps\",\n-    MIPS_BUILTIN_UPPER_C_NGLE_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ngle_ps, \"__builtin_mips_lower_c_ngle_ps\",\n-    MIPS_BUILTIN_LOWER_C_NGLE_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ngle_ps, \"__builtin_mips_all_c_ngle_ps\",\n-    MIPS_BUILTIN_ALL_C_NGLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_seq_ps, \"__builtin_mips_any_c_seq_ps\",\n-    MIPS_BUILTIN_ANY_C_SEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_seq_ps, \"__builtin_mips_upper_c_seq_ps\",\n-    MIPS_BUILTIN_UPPER_C_SEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_seq_ps, \"__builtin_mips_lower_c_seq_ps\",\n-    MIPS_BUILTIN_LOWER_C_SEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_seq_ps, \"__builtin_mips_all_c_seq_ps\",\n-    MIPS_BUILTIN_ALL_C_SEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ngl_ps, \"__builtin_mips_any_c_ngl_ps\",\n-    MIPS_BUILTIN_ANY_C_NGL_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ngl_ps, \"__builtin_mips_upper_c_ngl_ps\",\n-    MIPS_BUILTIN_UPPER_C_NGL_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ngl_ps, \"__builtin_mips_lower_c_ngl_ps\",\n-    MIPS_BUILTIN_LOWER_C_NGL_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ngl_ps, \"__builtin_mips_all_c_ngl_ps\",\n-    MIPS_BUILTIN_ALL_C_NGL_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_lt_ps, \"__builtin_mips_any_c_lt_ps\",\n-    MIPS_BUILTIN_ANY_C_LT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_lt_ps, \"__builtin_mips_upper_c_lt_ps\",\n-    MIPS_BUILTIN_UPPER_C_LT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_lt_ps, \"__builtin_mips_lower_c_lt_ps\",\n-    MIPS_BUILTIN_LOWER_C_LT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_lt_ps, \"__builtin_mips_all_c_lt_ps\",\n-    MIPS_BUILTIN_ALL_C_LT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_nge_ps, \"__builtin_mips_any_c_nge_ps\",\n-    MIPS_BUILTIN_ANY_C_NGE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_nge_ps, \"__builtin_mips_upper_c_nge_ps\",\n-    MIPS_BUILTIN_UPPER_C_NGE_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_nge_ps, \"__builtin_mips_lower_c_nge_ps\",\n-    MIPS_BUILTIN_LOWER_C_NGE_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_nge_ps, \"__builtin_mips_all_c_nge_ps\",\n-    MIPS_BUILTIN_ALL_C_NGE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_le_ps, \"__builtin_mips_any_c_le_ps\",\n-    MIPS_BUILTIN_ANY_C_LE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_le_ps, \"__builtin_mips_upper_c_le_ps\",\n-    MIPS_BUILTIN_UPPER_C_LE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_le_ps, \"__builtin_mips_lower_c_le_ps\",\n-    MIPS_BUILTIN_LOWER_C_LE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_le_ps, \"__builtin_mips_all_c_le_ps\",\n-    MIPS_BUILTIN_ALL_C_LE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ngt_ps, \"__builtin_mips_any_c_ngt_ps\",\n-    MIPS_BUILTIN_ANY_C_NGT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ngt_ps, \"__builtin_mips_upper_c_ngt_ps\",\n-    MIPS_BUILTIN_UPPER_C_NGT_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ngt_ps, \"__builtin_mips_lower_c_ngt_ps\",\n-    MIPS_BUILTIN_LOWER_C_NGT_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ngt_ps, \"__builtin_mips_all_c_ngt_ps\",\n-    MIPS_BUILTIN_ALL_C_NGT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-\n-  { CODE_FOR_mips_cabs_f_ps, \"__builtin_mips_any_cabs_f_ps\",\n-    MIPS_BUILTIN_ANY_CABS_F_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_f_ps, \"__builtin_mips_upper_cabs_f_ps\",\n-    MIPS_BUILTIN_UPPER_CABS_F_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_f_ps, \"__builtin_mips_lower_cabs_f_ps\",\n-    MIPS_BUILTIN_LOWER_CABS_F_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_f_ps, \"__builtin_mips_all_cabs_f_ps\",\n-    MIPS_BUILTIN_ALL_CABS_F_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_un_ps, \"__builtin_mips_any_cabs_un_ps\",\n-    MIPS_BUILTIN_ANY_CABS_UN_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_un_ps, \"__builtin_mips_upper_cabs_un_ps\",\n-    MIPS_BUILTIN_UPPER_CABS_UN_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_un_ps, \"__builtin_mips_lower_cabs_un_ps\",\n-    MIPS_BUILTIN_LOWER_CABS_UN_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_un_ps, \"__builtin_mips_all_cabs_un_ps\",\n-    MIPS_BUILTIN_ALL_CABS_UN_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_eq_ps, \"__builtin_mips_any_cabs_eq_ps\",\n-    MIPS_BUILTIN_ANY_CABS_EQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_eq_ps, \"__builtin_mips_upper_cabs_eq_ps\",\n-    MIPS_BUILTIN_UPPER_CABS_EQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_eq_ps, \"__builtin_mips_lower_cabs_eq_ps\",\n-    MIPS_BUILTIN_LOWER_CABS_EQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_eq_ps, \"__builtin_mips_all_cabs_eq_ps\",\n-    MIPS_BUILTIN_ALL_CABS_EQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ueq_ps, \"__builtin_mips_any_cabs_ueq_ps\",\n-    MIPS_BUILTIN_ANY_CABS_UEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ueq_ps, \"__builtin_mips_upper_cabs_ueq_ps\",\n-    MIPS_BUILTIN_UPPER_CABS_UEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ueq_ps, \"__builtin_mips_lower_cabs_ueq_ps\",\n-    MIPS_BUILTIN_LOWER_CABS_UEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ueq_ps, \"__builtin_mips_all_cabs_ueq_ps\",\n-    MIPS_BUILTIN_ALL_CABS_UEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_olt_ps, \"__builtin_mips_any_cabs_olt_ps\",\n-    MIPS_BUILTIN_ANY_CABS_OLT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_olt_ps, \"__builtin_mips_upper_cabs_olt_ps\",\n-    MIPS_BUILTIN_UPPER_CABS_OLT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_olt_ps, \"__builtin_mips_lower_cabs_olt_ps\",\n-    MIPS_BUILTIN_LOWER_CABS_OLT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_olt_ps, \"__builtin_mips_all_cabs_olt_ps\",\n-    MIPS_BUILTIN_ALL_CABS_OLT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ult_ps, \"__builtin_mips_any_cabs_ult_ps\",\n-    MIPS_BUILTIN_ANY_CABS_ULT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ult_ps, \"__builtin_mips_upper_cabs_ult_ps\",\n-    MIPS_BUILTIN_UPPER_CABS_ULT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ult_ps, \"__builtin_mips_lower_cabs_ult_ps\",\n-    MIPS_BUILTIN_LOWER_CABS_ULT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ult_ps, \"__builtin_mips_all_cabs_ult_ps\",\n-    MIPS_BUILTIN_ALL_CABS_ULT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ole_ps, \"__builtin_mips_any_cabs_ole_ps\",\n-    MIPS_BUILTIN_ANY_CABS_OLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ole_ps, \"__builtin_mips_upper_cabs_ole_ps\",\n-    MIPS_BUILTIN_UPPER_CABS_OLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ole_ps, \"__builtin_mips_lower_cabs_ole_ps\",\n-    MIPS_BUILTIN_LOWER_CABS_OLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ole_ps, \"__builtin_mips_all_cabs_ole_ps\",\n-    MIPS_BUILTIN_ALL_CABS_OLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ule_ps, \"__builtin_mips_any_cabs_ule_ps\",\n-    MIPS_BUILTIN_ANY_CABS_ULE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ule_ps, \"__builtin_mips_upper_cabs_ule_ps\",\n-    MIPS_BUILTIN_UPPER_CABS_ULE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ule_ps, \"__builtin_mips_lower_cabs_ule_ps\",\n-    MIPS_BUILTIN_LOWER_CABS_ULE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ule_ps, \"__builtin_mips_all_cabs_ule_ps\",\n-    MIPS_BUILTIN_ALL_CABS_ULE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_sf_ps, \"__builtin_mips_any_cabs_sf_ps\",\n-    MIPS_BUILTIN_ANY_CABS_SF_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_sf_ps, \"__builtin_mips_upper_cabs_sf_ps\",\n-    MIPS_BUILTIN_UPPER_CABS_SF_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_sf_ps, \"__builtin_mips_lower_cabs_sf_ps\",\n-    MIPS_BUILTIN_LOWER_CABS_SF_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_sf_ps, \"__builtin_mips_all_cabs_sf_ps\",\n-    MIPS_BUILTIN_ALL_CABS_SF_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngle_ps, \"__builtin_mips_any_cabs_ngle_ps\",\n-    MIPS_BUILTIN_ANY_CABS_NGLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngle_ps, \"__builtin_mips_upper_cabs_ngle_ps\",\n-    MIPS_BUILTIN_UPPER_CABS_NGLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngle_ps, \"__builtin_mips_lower_cabs_ngle_ps\",\n-    MIPS_BUILTIN_LOWER_CABS_NGLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngle_ps, \"__builtin_mips_all_cabs_ngle_ps\",\n-    MIPS_BUILTIN_ALL_CABS_NGLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_seq_ps, \"__builtin_mips_any_cabs_seq_ps\",\n-    MIPS_BUILTIN_ANY_CABS_SEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_seq_ps, \"__builtin_mips_upper_cabs_seq_ps\",\n-    MIPS_BUILTIN_UPPER_CABS_SEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_seq_ps, \"__builtin_mips_lower_cabs_seq_ps\",\n-    MIPS_BUILTIN_LOWER_CABS_SEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_seq_ps, \"__builtin_mips_all_cabs_seq_ps\",\n-    MIPS_BUILTIN_ALL_CABS_SEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngl_ps, \"__builtin_mips_any_cabs_ngl_ps\",\n-    MIPS_BUILTIN_ANY_CABS_NGL_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngl_ps, \"__builtin_mips_upper_cabs_ngl_ps\",\n-    MIPS_BUILTIN_UPPER_CABS_NGL_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngl_ps, \"__builtin_mips_lower_cabs_ngl_ps\",\n-    MIPS_BUILTIN_LOWER_CABS_NGL_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngl_ps, \"__builtin_mips_all_cabs_ngl_ps\",\n-    MIPS_BUILTIN_ALL_CABS_NGL_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_lt_ps, \"__builtin_mips_any_cabs_lt_ps\",\n-    MIPS_BUILTIN_ANY_CABS_LT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_lt_ps, \"__builtin_mips_upper_cabs_lt_ps\",\n-    MIPS_BUILTIN_UPPER_CABS_LT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_lt_ps, \"__builtin_mips_lower_cabs_lt_ps\",\n-    MIPS_BUILTIN_LOWER_CABS_LT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_lt_ps, \"__builtin_mips_all_cabs_lt_ps\",\n-    MIPS_BUILTIN_ALL_CABS_LT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_nge_ps, \"__builtin_mips_any_cabs_nge_ps\",\n-    MIPS_BUILTIN_ANY_CABS_NGE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_nge_ps, \"__builtin_mips_upper_cabs_nge_ps\",\n-    MIPS_BUILTIN_UPPER_CABS_NGE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_nge_ps, \"__builtin_mips_lower_cabs_nge_ps\",\n-    MIPS_BUILTIN_LOWER_CABS_NGE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_nge_ps, \"__builtin_mips_all_cabs_nge_ps\",\n-    MIPS_BUILTIN_ALL_CABS_NGE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_le_ps, \"__builtin_mips_any_cabs_le_ps\",\n-    MIPS_BUILTIN_ANY_CABS_LE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_le_ps, \"__builtin_mips_upper_cabs_le_ps\",\n-    MIPS_BUILTIN_UPPER_CABS_LE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_le_ps, \"__builtin_mips_lower_cabs_le_ps\",\n-    MIPS_BUILTIN_LOWER_CABS_LE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_le_ps, \"__builtin_mips_all_cabs_le_ps\",\n-    MIPS_BUILTIN_ALL_CABS_LE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngt_ps, \"__builtin_mips_any_cabs_ngt_ps\",\n-    MIPS_BUILTIN_ANY_CABS_NGT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngt_ps, \"__builtin_mips_upper_cabs_ngt_ps\",\n-    MIPS_BUILTIN_UPPER_CABS_NGT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngt_ps, \"__builtin_mips_lower_cabs_ngt_ps\",\n-    MIPS_BUILTIN_LOWER_CABS_NGT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngt_ps, \"__builtin_mips_all_cabs_ngt_ps\",\n-    MIPS_BUILTIN_ALL_CABS_NGT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n-\n-  { CODE_FOR_mips_c_f_4s, \"__builtin_mips_any_c_f_4s\",\n-    MIPS_BUILTIN_ANY_C_F_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_f_4s, \"__builtin_mips_all_c_f_4s\",\n-    MIPS_BUILTIN_ALL_C_F_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_c_un_4s, \"__builtin_mips_any_c_un_4s\",\n-    MIPS_BUILTIN_ANY_C_UN_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_un_4s, \"__builtin_mips_all_c_un_4s\",\n-    MIPS_BUILTIN_ALL_C_UN_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_eq_4s, \"__builtin_mips_any_c_eq_4s\",\n-    MIPS_BUILTIN_ANY_C_EQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_eq_4s, \"__builtin_mips_all_c_eq_4s\",\n-    MIPS_BUILTIN_ALL_C_EQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ueq_4s, \"__builtin_mips_any_c_ueq_4s\",\n-    MIPS_BUILTIN_ANY_C_UEQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ueq_4s, \"__builtin_mips_all_c_ueq_4s\",\n-    MIPS_BUILTIN_ALL_C_UEQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_olt_4s, \"__builtin_mips_any_c_olt_4s\",\n-    MIPS_BUILTIN_ANY_C_OLT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_olt_4s, \"__builtin_mips_all_c_olt_4s\",\n-    MIPS_BUILTIN_ALL_C_OLT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ult_4s, \"__builtin_mips_any_c_ult_4s\",\n-    MIPS_BUILTIN_ANY_C_ULT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ult_4s, \"__builtin_mips_all_c_ult_4s\",\n-    MIPS_BUILTIN_ALL_C_ULT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ole_4s, \"__builtin_mips_any_c_ole_4s\",\n-    MIPS_BUILTIN_ANY_C_OLE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ole_4s, \"__builtin_mips_all_c_ole_4s\",\n-    MIPS_BUILTIN_ALL_C_OLE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ule_4s, \"__builtin_mips_any_c_ule_4s\",\n-    MIPS_BUILTIN_ANY_C_ULE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ule_4s, \"__builtin_mips_all_c_ule_4s\",\n-    MIPS_BUILTIN_ALL_C_ULE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_sf_4s, \"__builtin_mips_any_c_sf_4s\",\n-    MIPS_BUILTIN_ANY_C_SF_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_sf_4s, \"__builtin_mips_all_c_sf_4s\",\n-    MIPS_BUILTIN_ALL_C_SF_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ngle_4s, \"__builtin_mips_any_c_ngle_4s\",\n-    MIPS_BUILTIN_ANY_C_NGLE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ngle_4s, \"__builtin_mips_all_c_ngle_4s\",\n-    MIPS_BUILTIN_ALL_C_NGLE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_seq_4s, \"__builtin_mips_any_c_seq_4s\",\n-    MIPS_BUILTIN_ANY_C_SEQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_seq_4s, \"__builtin_mips_all_c_seq_4s\",\n-    MIPS_BUILTIN_ALL_C_SEQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ngl_4s, \"__builtin_mips_any_c_ngl_4s\",\n-    MIPS_BUILTIN_ANY_C_NGL_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ngl_4s, \"__builtin_mips_all_c_ngl_4s\",\n-    MIPS_BUILTIN_ALL_C_NGL_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_lt_4s, \"__builtin_mips_any_c_lt_4s\",\n-    MIPS_BUILTIN_ANY_C_LT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_lt_4s, \"__builtin_mips_all_c_lt_4s\",\n-    MIPS_BUILTIN_ALL_C_LT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_nge_4s, \"__builtin_mips_any_c_nge_4s\",\n-    MIPS_BUILTIN_ANY_C_NGE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_nge_4s, \"__builtin_mips_all_c_nge_4s\",\n-    MIPS_BUILTIN_ALL_C_NGE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_le_4s, \"__builtin_mips_any_c_le_4s\",\n-    MIPS_BUILTIN_ANY_C_LE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_le_4s, \"__builtin_mips_all_c_le_4s\",\n-    MIPS_BUILTIN_ALL_C_LE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ngt_4s, \"__builtin_mips_any_c_ngt_4s\",\n-    MIPS_BUILTIN_ANY_C_NGT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_ngt_4s, \"__builtin_mips_all_c_ngt_4s\",\n-    MIPS_BUILTIN_ALL_C_NGT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-\n-  { CODE_FOR_mips_cabs_f_4s, \"__builtin_mips_any_cabs_f_4s\",\n-    MIPS_BUILTIN_ANY_CABS_F_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_f_4s, \"__builtin_mips_all_cabs_f_4s\",\n-    MIPS_BUILTIN_ALL_CABS_F_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_un_4s, \"__builtin_mips_any_cabs_un_4s\",\n-    MIPS_BUILTIN_ANY_CABS_UN_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_un_4s, \"__builtin_mips_all_cabs_un_4s\",\n-    MIPS_BUILTIN_ALL_CABS_UN_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_eq_4s, \"__builtin_mips_any_cabs_eq_4s\",\n-    MIPS_BUILTIN_ANY_CABS_EQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_eq_4s, \"__builtin_mips_all_cabs_eq_4s\",\n-    MIPS_BUILTIN_ALL_CABS_EQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ueq_4s, \"__builtin_mips_any_cabs_ueq_4s\",\n-    MIPS_BUILTIN_ANY_CABS_UEQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ueq_4s, \"__builtin_mips_all_cabs_ueq_4s\",\n-    MIPS_BUILTIN_ALL_CABS_UEQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_olt_4s, \"__builtin_mips_any_cabs_olt_4s\",\n-    MIPS_BUILTIN_ANY_CABS_OLT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_olt_4s, \"__builtin_mips_all_cabs_olt_4s\",\n-    MIPS_BUILTIN_ALL_CABS_OLT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ult_4s, \"__builtin_mips_any_cabs_ult_4s\",\n-    MIPS_BUILTIN_ANY_CABS_ULT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ult_4s, \"__builtin_mips_all_cabs_ult_4s\",\n-    MIPS_BUILTIN_ALL_CABS_ULT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ole_4s, \"__builtin_mips_any_cabs_ole_4s\",\n-    MIPS_BUILTIN_ANY_CABS_OLE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ole_4s, \"__builtin_mips_all_cabs_ole_4s\",\n-    MIPS_BUILTIN_ALL_CABS_OLE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ule_4s, \"__builtin_mips_any_cabs_ule_4s\",\n-    MIPS_BUILTIN_ANY_CABS_ULE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ule_4s, \"__builtin_mips_all_cabs_ule_4s\",\n-    MIPS_BUILTIN_ALL_CABS_ULE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_sf_4s, \"__builtin_mips_any_cabs_sf_4s\",\n-    MIPS_BUILTIN_ANY_CABS_SF_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_sf_4s, \"__builtin_mips_all_cabs_sf_4s\",\n-    MIPS_BUILTIN_ALL_CABS_SF_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngle_4s, \"__builtin_mips_any_cabs_ngle_4s\",\n-    MIPS_BUILTIN_ANY_CABS_NGLE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngle_4s, \"__builtin_mips_all_cabs_ngle_4s\",\n-    MIPS_BUILTIN_ALL_CABS_NGLE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_seq_4s, \"__builtin_mips_any_cabs_seq_4s\",\n-    MIPS_BUILTIN_ANY_CABS_SEQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_seq_4s, \"__builtin_mips_all_cabs_seq_4s\",\n-    MIPS_BUILTIN_ALL_CABS_SEQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngl_4s, \"__builtin_mips_any_cabs_ngl_4s\",\n-    MIPS_BUILTIN_ANY_CABS_NGL_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngl_4s, \"__builtin_mips_all_cabs_ngl_4s\",\n-    MIPS_BUILTIN_ALL_CABS_NGL_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_lt_4s, \"__builtin_mips_any_cabs_lt_4s\",\n-    MIPS_BUILTIN_ANY_CABS_LT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_lt_4s, \"__builtin_mips_all_cabs_lt_4s\",\n-    MIPS_BUILTIN_ALL_CABS_LT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_nge_4s, \"__builtin_mips_any_cabs_nge_4s\",\n-    MIPS_BUILTIN_ANY_CABS_NGE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_nge_4s, \"__builtin_mips_all_cabs_nge_4s\",\n-    MIPS_BUILTIN_ALL_CABS_NGE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_le_4s, \"__builtin_mips_any_cabs_le_4s\",\n-    MIPS_BUILTIN_ANY_CABS_LE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_le_4s, \"__builtin_mips_all_cabs_le_4s\",\n-    MIPS_BUILTIN_ALL_CABS_LE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngt_4s, \"__builtin_mips_any_cabs_ngt_4s\",\n-    MIPS_BUILTIN_ANY_CABS_NGT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngt_4s, \"__builtin_mips_all_cabs_ngt_4s\",\n-    MIPS_BUILTIN_ALL_CABS_NGT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-\n-  { CODE_FOR_mips_cabs_f_s, \"__builtin_mips_cabs_f_s\",\n-    MIPS_BUILTIN_CABS_F_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_un_s, \"__builtin_mips_cabs_un_s\",\n-    MIPS_BUILTIN_CABS_UN_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_eq_s, \"__builtin_mips_cabs_eq_s\",\n-    MIPS_BUILTIN_CABS_EQ_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ueq_s, \"__builtin_mips_cabs_ueq_s\",\n-    MIPS_BUILTIN_CABS_UEQ_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_olt_s, \"__builtin_mips_cabs_olt_s\",\n-    MIPS_BUILTIN_CABS_OLT_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ult_s, \"__builtin_mips_cabs_ult_s\",\n-    MIPS_BUILTIN_CABS_ULT_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ole_s, \"__builtin_mips_cabs_ole_s\",\n-    MIPS_BUILTIN_CABS_OLE_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ule_s, \"__builtin_mips_cabs_ule_s\",\n-    MIPS_BUILTIN_CABS_ULE_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_sf_s, \"__builtin_mips_cabs_sf_s\",\n-    MIPS_BUILTIN_CABS_SF_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngle_s, \"__builtin_mips_cabs_ngle_s\",\n-    MIPS_BUILTIN_CABS_NGLE_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_seq_s, \"__builtin_mips_cabs_seq_s\",\n-    MIPS_BUILTIN_CABS_SEQ_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngl_s, \"__builtin_mips_cabs_ngl_s\",\n-    MIPS_BUILTIN_CABS_NGL_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_lt_s, \"__builtin_mips_cabs_lt_s\",\n-    MIPS_BUILTIN_CABS_LT_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_nge_s, \"__builtin_mips_cabs_nge_s\",\n-    MIPS_BUILTIN_CABS_NGE_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_le_s, \"__builtin_mips_cabs_le_s\",\n-    MIPS_BUILTIN_CABS_LE_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngt_s, \"__builtin_mips_cabs_ngt_s\",\n-    MIPS_BUILTIN_CABS_NGT_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_f_d, \"__builtin_mips_cabs_f_d\",\n-    MIPS_BUILTIN_CABS_F_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_un_d, \"__builtin_mips_cabs_un_d\",\n-    MIPS_BUILTIN_CABS_UN_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_eq_d, \"__builtin_mips_cabs_eq_d\",\n-    MIPS_BUILTIN_CABS_EQ_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ueq_d, \"__builtin_mips_cabs_ueq_d\",\n-    MIPS_BUILTIN_CABS_UEQ_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_olt_d, \"__builtin_mips_cabs_olt_d\",\n-    MIPS_BUILTIN_CABS_OLT_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ult_d, \"__builtin_mips_cabs_ult_d\",\n-    MIPS_BUILTIN_CABS_ULT_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ole_d, \"__builtin_mips_cabs_ole_d\",\n-    MIPS_BUILTIN_CABS_OLE_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ule_d, \"__builtin_mips_cabs_ule_d\",\n-    MIPS_BUILTIN_CABS_ULE_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_sf_d, \"__builtin_mips_cabs_sf_d\",\n-    MIPS_BUILTIN_CABS_SF_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngle_d, \"__builtin_mips_cabs_ngle_d\",\n-    MIPS_BUILTIN_CABS_NGLE_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_seq_d, \"__builtin_mips_cabs_seq_d\",\n-    MIPS_BUILTIN_CABS_SEQ_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngl_d, \"__builtin_mips_cabs_ngl_d\",\n-    MIPS_BUILTIN_CABS_NGL_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_lt_d, \"__builtin_mips_cabs_lt_d\",\n-    MIPS_BUILTIN_CABS_LT_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_nge_d, \"__builtin_mips_cabs_nge_d\",\n-    MIPS_BUILTIN_CABS_NGE_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_le_d, \"__builtin_mips_cabs_le_d\",\n-    MIPS_BUILTIN_CABS_LE_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngt_d, \"__builtin_mips_cabs_ngt_d\",\n-    MIPS_BUILTIN_CABS_NGT_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n-\n-  { CODE_FOR_mips_c_f_ps, \"__builtin_mips_movt_c_f_ps\",\n-    MIPS_BUILTIN_MOVT_C_F_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_un_ps, \"__builtin_mips_movt_c_un_ps\",\n-    MIPS_BUILTIN_MOVT_C_UN_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_eq_ps, \"__builtin_mips_movt_c_eq_ps\",\n-    MIPS_BUILTIN_MOVT_C_EQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ueq_ps, \"__builtin_mips_movt_c_ueq_ps\",\n-    MIPS_BUILTIN_MOVT_C_UEQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_olt_ps, \"__builtin_mips_movt_c_olt_ps\",\n-    MIPS_BUILTIN_MOVT_C_OLT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ult_ps, \"__builtin_mips_movt_c_ult_ps\",\n-    MIPS_BUILTIN_MOVT_C_ULT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ole_ps, \"__builtin_mips_movt_c_ole_ps\",\n-    MIPS_BUILTIN_MOVT_C_OLE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ule_ps, \"__builtin_mips_movt_c_ule_ps\",\n-    MIPS_BUILTIN_MOVT_C_ULE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_sf_ps, \"__builtin_mips_movt_c_sf_ps\",\n-    MIPS_BUILTIN_MOVT_C_SF_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ngle_ps, \"__builtin_mips_movt_c_ngle_ps\",\n-    MIPS_BUILTIN_MOVT_C_NGLE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_seq_ps, \"__builtin_mips_movt_c_seq_ps\",\n-    MIPS_BUILTIN_MOVT_C_SEQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ngl_ps, \"__builtin_mips_movt_c_ngl_ps\",\n-    MIPS_BUILTIN_MOVT_C_NGL_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_lt_ps, \"__builtin_mips_movt_c_lt_ps\",\n-    MIPS_BUILTIN_MOVT_C_LT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_nge_ps, \"__builtin_mips_movt_c_nge_ps\",\n-    MIPS_BUILTIN_MOVT_C_NGE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_le_ps, \"__builtin_mips_movt_c_le_ps\",\n-    MIPS_BUILTIN_MOVT_C_LE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ngt_ps, \"__builtin_mips_movt_c_ngt_ps\",\n-    MIPS_BUILTIN_MOVT_C_NGT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_cabs_f_ps, \"__builtin_mips_movt_cabs_f_ps\",\n-    MIPS_BUILTIN_MOVT_CABS_F_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_un_ps, \"__builtin_mips_movt_cabs_un_ps\",\n-    MIPS_BUILTIN_MOVT_CABS_UN_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_eq_ps, \"__builtin_mips_movt_cabs_eq_ps\",\n-    MIPS_BUILTIN_MOVT_CABS_EQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ueq_ps, \"__builtin_mips_movt_cabs_ueq_ps\",\n-    MIPS_BUILTIN_MOVT_CABS_UEQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_olt_ps, \"__builtin_mips_movt_cabs_olt_ps\",\n-    MIPS_BUILTIN_MOVT_CABS_OLT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ult_ps, \"__builtin_mips_movt_cabs_ult_ps\",\n-    MIPS_BUILTIN_MOVT_CABS_ULT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ole_ps, \"__builtin_mips_movt_cabs_ole_ps\",\n-    MIPS_BUILTIN_MOVT_CABS_OLE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ule_ps, \"__builtin_mips_movt_cabs_ule_ps\",\n-    MIPS_BUILTIN_MOVT_CABS_ULE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_sf_ps, \"__builtin_mips_movt_cabs_sf_ps\",\n-    MIPS_BUILTIN_MOVT_CABS_SF_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngle_ps, \"__builtin_mips_movt_cabs_ngle_ps\",\n-    MIPS_BUILTIN_MOVT_CABS_NGLE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_seq_ps, \"__builtin_mips_movt_cabs_seq_ps\",\n-    MIPS_BUILTIN_MOVT_CABS_SEQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngl_ps, \"__builtin_mips_movt_cabs_ngl_ps\",\n-    MIPS_BUILTIN_MOVT_CABS_NGL_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_lt_ps, \"__builtin_mips_movt_cabs_lt_ps\",\n-    MIPS_BUILTIN_MOVT_CABS_LT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_nge_ps, \"__builtin_mips_movt_cabs_nge_ps\",\n-    MIPS_BUILTIN_MOVT_CABS_NGE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_le_ps, \"__builtin_mips_movt_cabs_le_ps\",\n-    MIPS_BUILTIN_MOVT_CABS_LE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngt_ps, \"__builtin_mips_movt_cabs_ngt_ps\",\n-    MIPS_BUILTIN_MOVT_CABS_NGT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_c_f_ps, \"__builtin_mips_movf_c_f_ps\",\n-    MIPS_BUILTIN_MOVF_C_F_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_un_ps, \"__builtin_mips_movf_c_un_ps\",\n-    MIPS_BUILTIN_MOVF_C_UN_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_eq_ps, \"__builtin_mips_movf_c_eq_ps\",\n-    MIPS_BUILTIN_MOVF_C_EQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ueq_ps, \"__builtin_mips_movf_c_ueq_ps\",\n-    MIPS_BUILTIN_MOVF_C_UEQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_olt_ps, \"__builtin_mips_movf_c_olt_ps\",\n-    MIPS_BUILTIN_MOVF_C_OLT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ult_ps, \"__builtin_mips_movf_c_ult_ps\",\n-    MIPS_BUILTIN_MOVF_C_ULT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ole_ps, \"__builtin_mips_movf_c_ole_ps\",\n-    MIPS_BUILTIN_MOVF_C_OLE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ule_ps, \"__builtin_mips_movf_c_ule_ps\",\n-    MIPS_BUILTIN_MOVF_C_ULE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_sf_ps, \"__builtin_mips_movf_c_sf_ps\",\n-    MIPS_BUILTIN_MOVF_C_SF_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ngle_ps, \"__builtin_mips_movf_c_ngle_ps\",\n-    MIPS_BUILTIN_MOVF_C_NGLE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_seq_ps, \"__builtin_mips_movf_c_seq_ps\",\n-    MIPS_BUILTIN_MOVF_C_SEQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ngl_ps, \"__builtin_mips_movf_c_ngl_ps\",\n-    MIPS_BUILTIN_MOVF_C_NGL_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_lt_ps, \"__builtin_mips_movf_c_lt_ps\",\n-    MIPS_BUILTIN_MOVF_C_LT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_nge_ps, \"__builtin_mips_movf_c_nge_ps\",\n-    MIPS_BUILTIN_MOVF_C_NGE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_le_ps, \"__builtin_mips_movf_c_le_ps\",\n-    MIPS_BUILTIN_MOVF_C_LE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_c_ngt_ps, \"__builtin_mips_movf_c_ngt_ps\",\n-    MIPS_BUILTIN_MOVF_C_NGT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_PAIRED_SINGLE },\n-  { CODE_FOR_mips_cabs_f_ps, \"__builtin_mips_movf_cabs_f_ps\",\n-    MIPS_BUILTIN_MOVF_CABS_F_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_un_ps, \"__builtin_mips_movf_cabs_un_ps\",\n-    MIPS_BUILTIN_MOVF_CABS_UN_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_eq_ps, \"__builtin_mips_movf_cabs_eq_ps\",\n-    MIPS_BUILTIN_MOVF_CABS_EQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ueq_ps, \"__builtin_mips_movf_cabs_ueq_ps\",\n-    MIPS_BUILTIN_MOVF_CABS_UEQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_olt_ps, \"__builtin_mips_movf_cabs_olt_ps\",\n-    MIPS_BUILTIN_MOVF_CABS_OLT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ult_ps, \"__builtin_mips_movf_cabs_ult_ps\",\n-    MIPS_BUILTIN_MOVF_CABS_ULT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ole_ps, \"__builtin_mips_movf_cabs_ole_ps\",\n-    MIPS_BUILTIN_MOVF_CABS_OLE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ule_ps, \"__builtin_mips_movf_cabs_ule_ps\",\n-    MIPS_BUILTIN_MOVF_CABS_ULE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_sf_ps, \"__builtin_mips_movf_cabs_sf_ps\",\n-    MIPS_BUILTIN_MOVF_CABS_SF_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngle_ps, \"__builtin_mips_movf_cabs_ngle_ps\",\n-    MIPS_BUILTIN_MOVF_CABS_NGLE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_seq_ps, \"__builtin_mips_movf_cabs_seq_ps\",\n-    MIPS_BUILTIN_MOVF_CABS_SEQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngl_ps, \"__builtin_mips_movf_cabs_ngl_ps\",\n-    MIPS_BUILTIN_MOVF_CABS_NGL_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_lt_ps, \"__builtin_mips_movf_cabs_lt_ps\",\n-    MIPS_BUILTIN_MOVF_CABS_LT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_nge_ps, \"__builtin_mips_movf_cabs_nge_ps\",\n-    MIPS_BUILTIN_MOVF_CABS_NGE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_le_ps, \"__builtin_mips_movf_cabs_le_ps\",\n-    MIPS_BUILTIN_MOVF_CABS_LE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-  { CODE_FOR_mips_cabs_ngt_ps, \"__builtin_mips_movf_cabs_ngt_ps\",\n-    MIPS_BUILTIN_MOVF_CABS_NGT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-    MASK_MIPS3D },\n-\n+  DIRECT_BUILTIN (pll_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE),\n+  DIRECT_BUILTIN (pul_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE),\n+  DIRECT_BUILTIN (plu_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE),\n+  DIRECT_BUILTIN (puu_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE),\n+  DIRECT_BUILTIN (cvt_ps_s, MIPS_V2SF_FTYPE_SF_SF, MASK_PAIRED_SINGLE),\n+  DIRECT_BUILTIN (cvt_s_pl, MIPS_SF_FTYPE_V2SF, MASK_PAIRED_SINGLE),\n+  DIRECT_BUILTIN (cvt_s_pu, MIPS_SF_FTYPE_V2SF, MASK_PAIRED_SINGLE),\n+  DIRECT_BUILTIN (abs_ps, MIPS_V2SF_FTYPE_V2SF, MASK_PAIRED_SINGLE),\n+\n+  DIRECT_BUILTIN (alnv_ps, MIPS_V2SF_FTYPE_V2SF_V2SF_INT, MASK_PAIRED_SINGLE),\n+  DIRECT_BUILTIN (addr_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_MIPS3D),\n+  DIRECT_BUILTIN (mulr_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_MIPS3D),\n+  DIRECT_BUILTIN (cvt_pw_ps, MIPS_V2SF_FTYPE_V2SF, MASK_MIPS3D),\n+  DIRECT_BUILTIN (cvt_ps_pw, MIPS_V2SF_FTYPE_V2SF, MASK_MIPS3D),\n+\n+  DIRECT_BUILTIN (recip1_s, MIPS_SF_FTYPE_SF, MASK_MIPS3D),\n+  DIRECT_BUILTIN (recip1_d, MIPS_DF_FTYPE_DF, MASK_MIPS3D),\n+  DIRECT_BUILTIN (recip1_ps, MIPS_V2SF_FTYPE_V2SF, MASK_MIPS3D),\n+  DIRECT_BUILTIN (recip2_s, MIPS_SF_FTYPE_SF_SF, MASK_MIPS3D),\n+  DIRECT_BUILTIN (recip2_d, MIPS_DF_FTYPE_DF_DF, MASK_MIPS3D),\n+  DIRECT_BUILTIN (recip2_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_MIPS3D),\n+\n+  DIRECT_BUILTIN (rsqrt1_s, MIPS_SF_FTYPE_SF, MASK_MIPS3D),\n+  DIRECT_BUILTIN (rsqrt1_d, MIPS_DF_FTYPE_DF, MASK_MIPS3D),\n+  DIRECT_BUILTIN (rsqrt1_ps, MIPS_V2SF_FTYPE_V2SF, MASK_MIPS3D),\n+  DIRECT_BUILTIN (rsqrt2_s, MIPS_SF_FTYPE_SF_SF, MASK_MIPS3D),\n+  DIRECT_BUILTIN (rsqrt2_d, MIPS_DF_FTYPE_DF_DF, MASK_MIPS3D),\n+  DIRECT_BUILTIN (rsqrt2_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_MIPS3D),\n+\n+  CMP_BUILTINS (f),\n+  CMP_BUILTINS (un),\n+  CMP_BUILTINS (eq),\n+  CMP_BUILTINS (ueq),\n+  CMP_BUILTINS (olt),\n+  CMP_BUILTINS (ult),\n+  CMP_BUILTINS (ole),\n+  CMP_BUILTINS (ule),\n+  CMP_BUILTINS (sf),\n+  CMP_BUILTINS (ngle),\n+  CMP_BUILTINS (seq),\n+  CMP_BUILTINS (ngl),\n+  CMP_BUILTINS (lt),\n+  CMP_BUILTINS (nge),\n+  CMP_BUILTINS (le),\n+  CMP_BUILTINS (ngt)\n };\n \n \n@@ -10055,8 +9436,8 @@ mips_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t\t     enum machine_mode mode ATTRIBUTE_UNUSED,\n \t\t     int ignore ATTRIBUTE_UNUSED)\n {\n-  rtx op0, op1, op2;\n   enum insn_code icode;\n+  enum mips_builtin_type type;\n   tree fndecl, arglist;\n   unsigned int fcode;\n \n@@ -10067,380 +9448,26 @@ mips_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     return 0;\n \n   icode = mips_bdesc[fcode].icode;\n-  switch (fcode)\n-    {\n-    /* Two Operands.  */\n-    case MIPS_BUILTIN_PLL_PS:\n-    case MIPS_BUILTIN_PUL_PS:\n-    case MIPS_BUILTIN_PLU_PS:\n-    case MIPS_BUILTIN_PUU_PS:\n-    case MIPS_BUILTIN_CVT_PS_S:\n-    case MIPS_BUILTIN_ADDR_PS:\n-    case MIPS_BUILTIN_MULR_PS:\n-    case MIPS_BUILTIN_RECIP2_S:\n-    case MIPS_BUILTIN_RECIP2_D:\n-    case MIPS_BUILTIN_RECIP2_PS:\n-    case MIPS_BUILTIN_RSQRT2_S:\n-    case MIPS_BUILTIN_RSQRT2_D:\n-    case MIPS_BUILTIN_RSQRT2_PS:\n-      target = mips_prepare_builtin_target (icode, 0, target);\n-      op0 = mips_prepare_builtin_arg (icode, 1, &arglist);\n-      op1 = mips_prepare_builtin_arg (icode, 2, &arglist);\n-      emit_insn (GEN_FCN (icode) (target, op0, op1));\n-      return target;\n-\n-    /* One Operand.  */\n-    case MIPS_BUILTIN_CVT_S_PL:\n-    case MIPS_BUILTIN_CVT_S_PU:\n-    case MIPS_BUILTIN_ABS_PS:\n-    case MIPS_BUILTIN_CVT_PW_PS:\n-    case MIPS_BUILTIN_CVT_PS_PW:\n-    case MIPS_BUILTIN_RECIP1_S:\n-    case MIPS_BUILTIN_RECIP1_D:\n-    case MIPS_BUILTIN_RECIP1_PS:\n-    case MIPS_BUILTIN_RSQRT1_S:\n-    case MIPS_BUILTIN_RSQRT1_D:\n-    case MIPS_BUILTIN_RSQRT1_PS:\n-      target = mips_prepare_builtin_target (icode, 0, target);\n-      op0 = mips_prepare_builtin_arg (icode, 1, &arglist);\n-      emit_insn (GEN_FCN (icode) (target, op0));\n-      return target;\n+  type = mips_bdesc[fcode].builtin_type;\n+  switch (type)\n+    {\n+    case MIPS_BUILTIN_DIRECT:\n+      return mips_expand_builtin_direct (icode, target, arglist);\n \n-    /* Three Operands.  */\n-    case MIPS_BUILTIN_ALNV_PS:\n-      target = mips_prepare_builtin_target (icode, 0, target);\n-      op0 = mips_prepare_builtin_arg (icode, 1, &arglist);\n-      op1 = mips_prepare_builtin_arg (icode, 2, &arglist);\n-      op2 = mips_prepare_builtin_arg (icode, 3, &arglist);\n-      emit_insn (GEN_FCN (icode) (target, op0, op1, op2));\n-      return target;\n-\n-    /* Paired Single Comparison.  */\n-    case MIPS_BUILTIN_ANY_C_F_PS:\n-    case MIPS_BUILTIN_ANY_C_UN_PS:\n-    case MIPS_BUILTIN_ANY_C_EQ_PS:\n-    case MIPS_BUILTIN_ANY_C_UEQ_PS:\n-    case MIPS_BUILTIN_ANY_C_OLT_PS:\n-    case MIPS_BUILTIN_ANY_C_ULT_PS:\n-    case MIPS_BUILTIN_ANY_C_OLE_PS:\n-    case MIPS_BUILTIN_ANY_C_ULE_PS:\n-    case MIPS_BUILTIN_ANY_C_SF_PS:\n-    case MIPS_BUILTIN_ANY_C_NGLE_PS:\n-    case MIPS_BUILTIN_ANY_C_SEQ_PS:\n-    case MIPS_BUILTIN_ANY_C_NGL_PS:\n-    case MIPS_BUILTIN_ANY_C_LT_PS:\n-    case MIPS_BUILTIN_ANY_C_NGE_PS:\n-    case MIPS_BUILTIN_ANY_C_LE_PS:\n-    case MIPS_BUILTIN_ANY_C_NGT_PS:\n-    case MIPS_BUILTIN_ANY_CABS_F_PS:\n-    case MIPS_BUILTIN_ANY_CABS_UN_PS:\n-    case MIPS_BUILTIN_ANY_CABS_EQ_PS:\n-    case MIPS_BUILTIN_ANY_CABS_UEQ_PS:\n-    case MIPS_BUILTIN_ANY_CABS_OLT_PS:\n-    case MIPS_BUILTIN_ANY_CABS_ULT_PS:\n-    case MIPS_BUILTIN_ANY_CABS_OLE_PS:\n-    case MIPS_BUILTIN_ANY_CABS_ULE_PS:\n-    case MIPS_BUILTIN_ANY_CABS_SF_PS:\n-    case MIPS_BUILTIN_ANY_CABS_NGLE_PS:\n-    case MIPS_BUILTIN_ANY_CABS_SEQ_PS:\n-    case MIPS_BUILTIN_ANY_CABS_NGL_PS:\n-    case MIPS_BUILTIN_ANY_CABS_LT_PS:\n-    case MIPS_BUILTIN_ANY_CABS_NGE_PS:\n-    case MIPS_BUILTIN_ANY_CABS_LE_PS:\n-    case MIPS_BUILTIN_ANY_CABS_NGT_PS:\n-      return mips_expand_ps_compare_builtin (MIPS_CMP_ANY, icode,\n-\t\t\t\t\t     target, arglist);\n-\n-    /* Paired Single Comparison.  */\n-    case MIPS_BUILTIN_UPPER_C_F_PS:\n-    case MIPS_BUILTIN_UPPER_C_UN_PS:\n-    case MIPS_BUILTIN_UPPER_C_EQ_PS:\n-    case MIPS_BUILTIN_UPPER_C_UEQ_PS:\n-    case MIPS_BUILTIN_UPPER_C_OLT_PS:\n-    case MIPS_BUILTIN_UPPER_C_ULT_PS:\n-    case MIPS_BUILTIN_UPPER_C_OLE_PS:\n-    case MIPS_BUILTIN_UPPER_C_ULE_PS:\n-    case MIPS_BUILTIN_UPPER_C_SF_PS:\n-    case MIPS_BUILTIN_UPPER_C_NGLE_PS:\n-    case MIPS_BUILTIN_UPPER_C_SEQ_PS:\n-    case MIPS_BUILTIN_UPPER_C_NGL_PS:\n-    case MIPS_BUILTIN_UPPER_C_LT_PS:\n-    case MIPS_BUILTIN_UPPER_C_NGE_PS:\n-    case MIPS_BUILTIN_UPPER_C_LE_PS:\n-    case MIPS_BUILTIN_UPPER_C_NGT_PS:\n-    case MIPS_BUILTIN_UPPER_CABS_F_PS:\n-    case MIPS_BUILTIN_UPPER_CABS_UN_PS:\n-    case MIPS_BUILTIN_UPPER_CABS_EQ_PS:\n-    case MIPS_BUILTIN_UPPER_CABS_UEQ_PS:\n-    case MIPS_BUILTIN_UPPER_CABS_OLT_PS:\n-    case MIPS_BUILTIN_UPPER_CABS_ULT_PS:\n-    case MIPS_BUILTIN_UPPER_CABS_OLE_PS:\n-    case MIPS_BUILTIN_UPPER_CABS_ULE_PS:\n-    case MIPS_BUILTIN_UPPER_CABS_SF_PS:\n-    case MIPS_BUILTIN_UPPER_CABS_NGLE_PS:\n-    case MIPS_BUILTIN_UPPER_CABS_SEQ_PS:\n-    case MIPS_BUILTIN_UPPER_CABS_NGL_PS:\n-    case MIPS_BUILTIN_UPPER_CABS_LT_PS:\n-    case MIPS_BUILTIN_UPPER_CABS_NGE_PS:\n-    case MIPS_BUILTIN_UPPER_CABS_LE_PS:\n-    case MIPS_BUILTIN_UPPER_CABS_NGT_PS:\n-      return mips_expand_ps_compare_builtin (MIPS_CMP_UPPER, icode,\n-\t\t\t\t\t     target, arglist);\n-\n-    /* Paired Single Comparison.  */\n-    case MIPS_BUILTIN_LOWER_C_F_PS:\n-    case MIPS_BUILTIN_LOWER_C_UN_PS:\n-    case MIPS_BUILTIN_LOWER_C_EQ_PS:\n-    case MIPS_BUILTIN_LOWER_C_UEQ_PS:\n-    case MIPS_BUILTIN_LOWER_C_OLT_PS:\n-    case MIPS_BUILTIN_LOWER_C_ULT_PS:\n-    case MIPS_BUILTIN_LOWER_C_OLE_PS:\n-    case MIPS_BUILTIN_LOWER_C_ULE_PS:\n-    case MIPS_BUILTIN_LOWER_C_SF_PS:\n-    case MIPS_BUILTIN_LOWER_C_NGLE_PS:\n-    case MIPS_BUILTIN_LOWER_C_SEQ_PS:\n-    case MIPS_BUILTIN_LOWER_C_NGL_PS:\n-    case MIPS_BUILTIN_LOWER_C_LT_PS:\n-    case MIPS_BUILTIN_LOWER_C_NGE_PS:\n-    case MIPS_BUILTIN_LOWER_C_LE_PS:\n-    case MIPS_BUILTIN_LOWER_C_NGT_PS:\n-    case MIPS_BUILTIN_LOWER_CABS_F_PS:\n-    case MIPS_BUILTIN_LOWER_CABS_UN_PS:\n-    case MIPS_BUILTIN_LOWER_CABS_EQ_PS:\n-    case MIPS_BUILTIN_LOWER_CABS_UEQ_PS:\n-    case MIPS_BUILTIN_LOWER_CABS_OLT_PS:\n-    case MIPS_BUILTIN_LOWER_CABS_ULT_PS:\n-    case MIPS_BUILTIN_LOWER_CABS_OLE_PS:\n-    case MIPS_BUILTIN_LOWER_CABS_ULE_PS:\n-    case MIPS_BUILTIN_LOWER_CABS_SF_PS:\n-    case MIPS_BUILTIN_LOWER_CABS_NGLE_PS:\n-    case MIPS_BUILTIN_LOWER_CABS_SEQ_PS:\n-    case MIPS_BUILTIN_LOWER_CABS_NGL_PS:\n-    case MIPS_BUILTIN_LOWER_CABS_LT_PS:\n-    case MIPS_BUILTIN_LOWER_CABS_NGE_PS:\n-    case MIPS_BUILTIN_LOWER_CABS_LE_PS:\n-    case MIPS_BUILTIN_LOWER_CABS_NGT_PS:\n-      return mips_expand_ps_compare_builtin (MIPS_CMP_LOWER, icode,\n-\t\t\t\t\t     target, arglist);\n-\n-    /* Paired Single Comparison.  */\n-    case MIPS_BUILTIN_ALL_C_F_PS:\n-    case MIPS_BUILTIN_ALL_C_UN_PS:\n-    case MIPS_BUILTIN_ALL_C_EQ_PS:\n-    case MIPS_BUILTIN_ALL_C_UEQ_PS:\n-    case MIPS_BUILTIN_ALL_C_OLT_PS:\n-    case MIPS_BUILTIN_ALL_C_ULT_PS:\n-    case MIPS_BUILTIN_ALL_C_OLE_PS:\n-    case MIPS_BUILTIN_ALL_C_ULE_PS:\n-    case MIPS_BUILTIN_ALL_C_SF_PS:\n-    case MIPS_BUILTIN_ALL_C_NGLE_PS:\n-    case MIPS_BUILTIN_ALL_C_SEQ_PS:\n-    case MIPS_BUILTIN_ALL_C_NGL_PS:\n-    case MIPS_BUILTIN_ALL_C_LT_PS:\n-    case MIPS_BUILTIN_ALL_C_NGE_PS:\n-    case MIPS_BUILTIN_ALL_C_LE_PS:\n-    case MIPS_BUILTIN_ALL_C_NGT_PS:\n-    case MIPS_BUILTIN_ALL_CABS_F_PS:\n-    case MIPS_BUILTIN_ALL_CABS_UN_PS:\n-    case MIPS_BUILTIN_ALL_CABS_EQ_PS:\n-    case MIPS_BUILTIN_ALL_CABS_UEQ_PS:\n-    case MIPS_BUILTIN_ALL_CABS_OLT_PS:\n-    case MIPS_BUILTIN_ALL_CABS_ULT_PS:\n-    case MIPS_BUILTIN_ALL_CABS_OLE_PS:\n-    case MIPS_BUILTIN_ALL_CABS_ULE_PS:\n-    case MIPS_BUILTIN_ALL_CABS_SF_PS:\n-    case MIPS_BUILTIN_ALL_CABS_NGLE_PS:\n-    case MIPS_BUILTIN_ALL_CABS_SEQ_PS:\n-    case MIPS_BUILTIN_ALL_CABS_NGL_PS:\n-    case MIPS_BUILTIN_ALL_CABS_LT_PS:\n-    case MIPS_BUILTIN_ALL_CABS_NGE_PS:\n-    case MIPS_BUILTIN_ALL_CABS_LE_PS:\n-    case MIPS_BUILTIN_ALL_CABS_NGT_PS:\n-      return mips_expand_ps_compare_builtin (MIPS_CMP_ALL, icode,\n-\t\t\t\t\t     target, arglist);\n-\n-    /* Four Single Comparison.  */\n-    case MIPS_BUILTIN_ANY_C_F_4S:\n-    case MIPS_BUILTIN_ANY_C_UN_4S:\n-    case MIPS_BUILTIN_ANY_C_EQ_4S:\n-    case MIPS_BUILTIN_ANY_C_UEQ_4S:\n-    case MIPS_BUILTIN_ANY_C_OLT_4S:\n-    case MIPS_BUILTIN_ANY_C_ULT_4S:\n-    case MIPS_BUILTIN_ANY_C_OLE_4S:\n-    case MIPS_BUILTIN_ANY_C_ULE_4S:\n-    case MIPS_BUILTIN_ANY_C_SF_4S:\n-    case MIPS_BUILTIN_ANY_C_NGLE_4S:\n-    case MIPS_BUILTIN_ANY_C_SEQ_4S:\n-    case MIPS_BUILTIN_ANY_C_NGL_4S:\n-    case MIPS_BUILTIN_ANY_C_LT_4S:\n-    case MIPS_BUILTIN_ANY_C_NGE_4S:\n-    case MIPS_BUILTIN_ANY_C_LE_4S:\n-    case MIPS_BUILTIN_ANY_C_NGT_4S:\n-    case MIPS_BUILTIN_ANY_CABS_F_4S:\n-    case MIPS_BUILTIN_ANY_CABS_UN_4S:\n-    case MIPS_BUILTIN_ANY_CABS_EQ_4S:\n-    case MIPS_BUILTIN_ANY_CABS_UEQ_4S:\n-    case MIPS_BUILTIN_ANY_CABS_OLT_4S:\n-    case MIPS_BUILTIN_ANY_CABS_ULT_4S:\n-    case MIPS_BUILTIN_ANY_CABS_OLE_4S:\n-    case MIPS_BUILTIN_ANY_CABS_ULE_4S:\n-    case MIPS_BUILTIN_ANY_CABS_SF_4S:\n-    case MIPS_BUILTIN_ANY_CABS_NGLE_4S:\n-    case MIPS_BUILTIN_ANY_CABS_SEQ_4S:\n-    case MIPS_BUILTIN_ANY_CABS_NGL_4S:\n-    case MIPS_BUILTIN_ANY_CABS_LT_4S:\n-    case MIPS_BUILTIN_ANY_CABS_NGE_4S:\n-    case MIPS_BUILTIN_ANY_CABS_LE_4S:\n-    case MIPS_BUILTIN_ANY_CABS_NGT_4S:\n-      return mips_expand_4s_compare_builtin (MIPS_CMP_ANY, icode,\n-\t\t\t\t\t     target, arglist);\n-\n-    /* Four Single Comparison.  */\n-    case MIPS_BUILTIN_ALL_C_F_4S:\n-    case MIPS_BUILTIN_ALL_C_UN_4S:\n-    case MIPS_BUILTIN_ALL_C_EQ_4S:\n-    case MIPS_BUILTIN_ALL_C_UEQ_4S:\n-    case MIPS_BUILTIN_ALL_C_OLT_4S:\n-    case MIPS_BUILTIN_ALL_C_ULT_4S:\n-    case MIPS_BUILTIN_ALL_C_OLE_4S:\n-    case MIPS_BUILTIN_ALL_C_ULE_4S:\n-    case MIPS_BUILTIN_ALL_C_SF_4S:\n-    case MIPS_BUILTIN_ALL_C_NGLE_4S:\n-    case MIPS_BUILTIN_ALL_C_SEQ_4S:\n-    case MIPS_BUILTIN_ALL_C_NGL_4S:\n-    case MIPS_BUILTIN_ALL_C_LT_4S:\n-    case MIPS_BUILTIN_ALL_C_NGE_4S:\n-    case MIPS_BUILTIN_ALL_C_LE_4S:\n-    case MIPS_BUILTIN_ALL_C_NGT_4S:\n-    case MIPS_BUILTIN_ALL_CABS_F_4S:\n-    case MIPS_BUILTIN_ALL_CABS_UN_4S:\n-    case MIPS_BUILTIN_ALL_CABS_EQ_4S:\n-    case MIPS_BUILTIN_ALL_CABS_UEQ_4S:\n-    case MIPS_BUILTIN_ALL_CABS_OLT_4S:\n-    case MIPS_BUILTIN_ALL_CABS_ULT_4S:\n-    case MIPS_BUILTIN_ALL_CABS_OLE_4S:\n-    case MIPS_BUILTIN_ALL_CABS_ULE_4S:\n-    case MIPS_BUILTIN_ALL_CABS_SF_4S:\n-    case MIPS_BUILTIN_ALL_CABS_NGLE_4S:\n-    case MIPS_BUILTIN_ALL_CABS_SEQ_4S:\n-    case MIPS_BUILTIN_ALL_CABS_NGL_4S:\n-    case MIPS_BUILTIN_ALL_CABS_LT_4S:\n-    case MIPS_BUILTIN_ALL_CABS_NGE_4S:\n-    case MIPS_BUILTIN_ALL_CABS_LE_4S:\n-    case MIPS_BUILTIN_ALL_CABS_NGT_4S:\n-      return mips_expand_4s_compare_builtin (MIPS_CMP_ALL, icode,\n-\t\t\t\t\t     target, arglist);\n-\n-    /* Single/Double Compare Absolute.  */\n-    case MIPS_BUILTIN_CABS_F_S:\n-    case MIPS_BUILTIN_CABS_UN_S:\n-    case MIPS_BUILTIN_CABS_EQ_S:\n-    case MIPS_BUILTIN_CABS_UEQ_S:\n-    case MIPS_BUILTIN_CABS_OLT_S:\n-    case MIPS_BUILTIN_CABS_ULT_S:\n-    case MIPS_BUILTIN_CABS_OLE_S:\n-    case MIPS_BUILTIN_CABS_ULE_S:\n-    case MIPS_BUILTIN_CABS_SF_S:\n-    case MIPS_BUILTIN_CABS_NGLE_S:\n-    case MIPS_BUILTIN_CABS_SEQ_S:\n-    case MIPS_BUILTIN_CABS_NGL_S:\n-    case MIPS_BUILTIN_CABS_LT_S:\n-    case MIPS_BUILTIN_CABS_NGE_S:\n-    case MIPS_BUILTIN_CABS_LE_S:\n-    case MIPS_BUILTIN_CABS_NGT_S:\n-    case MIPS_BUILTIN_CABS_F_D:\n-    case MIPS_BUILTIN_CABS_UN_D:\n-    case MIPS_BUILTIN_CABS_EQ_D:\n-    case MIPS_BUILTIN_CABS_UEQ_D:\n-    case MIPS_BUILTIN_CABS_OLT_D:\n-    case MIPS_BUILTIN_CABS_ULT_D:\n-    case MIPS_BUILTIN_CABS_OLE_D:\n-    case MIPS_BUILTIN_CABS_ULE_D:\n-    case MIPS_BUILTIN_CABS_SF_D:\n-    case MIPS_BUILTIN_CABS_NGLE_D:\n-    case MIPS_BUILTIN_CABS_SEQ_D:\n-    case MIPS_BUILTIN_CABS_NGL_D:\n-    case MIPS_BUILTIN_CABS_LT_D:\n-    case MIPS_BUILTIN_CABS_NGE_D:\n-    case MIPS_BUILTIN_CABS_LE_D:\n-    case MIPS_BUILTIN_CABS_NGT_D:\n-      return mips_expand_scalar_compare_builtin (icode, target, arglist);\n-\n-    /* Conditional Move on True.  */\n-    case MIPS_BUILTIN_MOVT_C_F_PS:\n-    case MIPS_BUILTIN_MOVT_C_UN_PS:\n-    case MIPS_BUILTIN_MOVT_C_EQ_PS:\n-    case MIPS_BUILTIN_MOVT_C_UEQ_PS:\n-    case MIPS_BUILTIN_MOVT_C_OLT_PS:\n-    case MIPS_BUILTIN_MOVT_C_ULT_PS:\n-    case MIPS_BUILTIN_MOVT_C_OLE_PS:\n-    case MIPS_BUILTIN_MOVT_C_ULE_PS:\n-    case MIPS_BUILTIN_MOVT_C_SF_PS:\n-    case MIPS_BUILTIN_MOVT_C_NGLE_PS:\n-    case MIPS_BUILTIN_MOVT_C_SEQ_PS:\n-    case MIPS_BUILTIN_MOVT_C_NGL_PS:\n-    case MIPS_BUILTIN_MOVT_C_LT_PS:\n-    case MIPS_BUILTIN_MOVT_C_NGE_PS:\n-    case MIPS_BUILTIN_MOVT_C_LE_PS:\n-    case MIPS_BUILTIN_MOVT_C_NGT_PS:\n-    case MIPS_BUILTIN_MOVT_CABS_F_PS:\n-    case MIPS_BUILTIN_MOVT_CABS_UN_PS:\n-    case MIPS_BUILTIN_MOVT_CABS_EQ_PS:\n-    case MIPS_BUILTIN_MOVT_CABS_UEQ_PS:\n-    case MIPS_BUILTIN_MOVT_CABS_OLT_PS:\n-    case MIPS_BUILTIN_MOVT_CABS_ULT_PS:\n-    case MIPS_BUILTIN_MOVT_CABS_OLE_PS:\n-    case MIPS_BUILTIN_MOVT_CABS_ULE_PS:\n-    case MIPS_BUILTIN_MOVT_CABS_SF_PS:\n-    case MIPS_BUILTIN_MOVT_CABS_NGLE_PS:\n-    case MIPS_BUILTIN_MOVT_CABS_SEQ_PS:\n-    case MIPS_BUILTIN_MOVT_CABS_NGL_PS:\n-    case MIPS_BUILTIN_MOVT_CABS_LT_PS:\n-    case MIPS_BUILTIN_MOVT_CABS_NGE_PS:\n-    case MIPS_BUILTIN_MOVT_CABS_LE_PS:\n-    case MIPS_BUILTIN_MOVT_CABS_NGT_PS:\n-      return mips_expand_ps_cond_move_builtin (true, icode, target, arglist);\n-\n-    /* Conditional Move on False.  */\n-    case MIPS_BUILTIN_MOVF_C_F_PS:\n-    case MIPS_BUILTIN_MOVF_C_UN_PS:\n-    case MIPS_BUILTIN_MOVF_C_EQ_PS:\n-    case MIPS_BUILTIN_MOVF_C_UEQ_PS:\n-    case MIPS_BUILTIN_MOVF_C_OLT_PS:\n-    case MIPS_BUILTIN_MOVF_C_ULT_PS:\n-    case MIPS_BUILTIN_MOVF_C_OLE_PS:\n-    case MIPS_BUILTIN_MOVF_C_ULE_PS:\n-    case MIPS_BUILTIN_MOVF_C_SF_PS:\n-    case MIPS_BUILTIN_MOVF_C_NGLE_PS:\n-    case MIPS_BUILTIN_MOVF_C_SEQ_PS:\n-    case MIPS_BUILTIN_MOVF_C_NGL_PS:\n-    case MIPS_BUILTIN_MOVF_C_LT_PS:\n-    case MIPS_BUILTIN_MOVF_C_NGE_PS:\n-    case MIPS_BUILTIN_MOVF_C_LE_PS:\n-    case MIPS_BUILTIN_MOVF_C_NGT_PS:\n-    case MIPS_BUILTIN_MOVF_CABS_F_PS:\n-    case MIPS_BUILTIN_MOVF_CABS_UN_PS:\n-    case MIPS_BUILTIN_MOVF_CABS_EQ_PS:\n-    case MIPS_BUILTIN_MOVF_CABS_UEQ_PS:\n-    case MIPS_BUILTIN_MOVF_CABS_OLT_PS:\n-    case MIPS_BUILTIN_MOVF_CABS_ULT_PS:\n-    case MIPS_BUILTIN_MOVF_CABS_OLE_PS:\n-    case MIPS_BUILTIN_MOVF_CABS_ULE_PS:\n-    case MIPS_BUILTIN_MOVF_CABS_SF_PS:\n-    case MIPS_BUILTIN_MOVF_CABS_NGLE_PS:\n-    case MIPS_BUILTIN_MOVF_CABS_SEQ_PS:\n-    case MIPS_BUILTIN_MOVF_CABS_NGL_PS:\n-    case MIPS_BUILTIN_MOVF_CABS_LT_PS:\n-    case MIPS_BUILTIN_MOVF_CABS_NGE_PS:\n-    case MIPS_BUILTIN_MOVF_CABS_LE_PS:\n-    case MIPS_BUILTIN_MOVF_CABS_NGT_PS:\n-      return mips_expand_ps_cond_move_builtin (false, icode, target, arglist);\n+    case MIPS_BUILTIN_MOVT:\n+    case MIPS_BUILTIN_MOVF:\n+      return mips_expand_builtin_movtf (type, icode, target, arglist);\n+\n+    case MIPS_BUILTIN_CMP_ANY:\n+    case MIPS_BUILTIN_CMP_ALL:\n+    case MIPS_BUILTIN_CMP_UPPER:\n+    case MIPS_BUILTIN_CMP_LOWER:\n+    case MIPS_BUILTIN_CMP_SINGLE:\n+      return mips_expand_builtin_compare (type, icode, target, arglist);\n \n     default:\n-      break;\n+      return 0;\n     }\n-\n-  return 0;\n }\n \n /* Init builtin functions.  This is called from TARGET_INIT_BUILTIN.  */\n@@ -10517,19 +9544,53 @@ mips_init_builtins (void)\n \n   for (d = mips_bdesc; d < &mips_bdesc[ARRAY_SIZE (mips_bdesc)]; d++)\n     if ((d->target_flags & target_flags) == d->target_flags)\n-      lang_hooks.builtin_function (d->name, types[d->ftype],\n-\t\t\t\t   d->code, BUILT_IN_MD, NULL, NULL_TREE);\n+      lang_hooks.builtin_function (d->name, types[d->function_type],\n+\t\t\t\t   d - mips_bdesc, BUILT_IN_MD, NULL, NULL);\n+}\n+\n+/* Expand a MIPS_BUILTIN_DIRECT function.  ICODE is the code of the\n+   .md pattern and ARGLIST is the list of function arguments.  TARGET,\n+   if nonnull, suggests a good place to put the result.  */\n+\n+static rtx\n+mips_expand_builtin_direct (enum insn_code icode, rtx target, tree arglist)\n+{\n+  rtx ops[MAX_RECOG_OPERANDS];\n+  int i;\n+\n+  target = mips_prepare_builtin_target (icode, 0, target);\n+  for (i = 1; i < insn_data[icode].n_operands; i++)\n+    ops[i] = mips_prepare_builtin_arg (icode, i, &arglist);\n+\n+  switch (insn_data[icode].n_operands)\n+    {\n+    case 2:\n+      emit_insn (GEN_FCN (icode) (target, ops[1]));\n+      break;\n+\n+    case 3:\n+      emit_insn (GEN_FCN (icode) (target, ops[1], ops[2]));\n+      break;\n+\n+    case 4:\n+      emit_insn (GEN_FCN (icode) (target, ops[1], ops[2], ops[3]));\n+      break;\n+\n+    default:\n+      abort ();\n+    }\n+  return target;\n }\n \n /* Expand a __builtin_mips_movt_*_ps() or __builtin_mips_movf_*_ps()\n-   function (MOVE_ON_TRUE says which).  ARGLIST is the list of arguments\n-   to the function and ICODE says which instruction should be used to\n+   function (TYPE says which).  ARGLIST is the list of arguments to\n+   the function and ICODE says which instruction should be used to\n    compare the first two arguments.  TARGET, if nonnull, suggests a\n    good place to put the result.  */\n \n static rtx\n-mips_expand_ps_cond_move_builtin (bool move_on_true, enum insn_code icode,\n-\t\t\t\t  rtx target, tree arglist)\n+mips_expand_builtin_movtf (enum mips_builtin_type type, enum insn_code icode,\n+\t\t\t   rtx target, tree arglist)\n {\n   rtx cmp_result, op0, op1;\n \n@@ -10540,7 +9601,7 @@ mips_expand_ps_cond_move_builtin (bool move_on_true, enum insn_code icode,\n \n   icode = CODE_FOR_mips_cond_move_tf_ps;\n   target = mips_prepare_builtin_target (icode, 0, target);\n-  if (move_on_true)\n+  if (type == MIPS_BUILTIN_MOVT)\n     {\n       op1 = mips_prepare_builtin_arg (icode, 2, &arglist);\n       op0 = mips_prepare_builtin_arg (icode, 1, &arglist);\n@@ -10554,171 +9615,89 @@ mips_expand_ps_cond_move_builtin (bool move_on_true, enum insn_code icode,\n   return target;\n }\n \n-/* Use comparison instruction PAT to set condition-code register REG.\n-   If NONZERO_IF_EQUAL_P, return an rtx that is 1 if the new value of\n-   REG equals CONSTANT and 0 otherwise.  Return the inverse if\n-   !NONZERO_IF_EQUAL_P.  TARGET, if nonnull, suggests a good place\n-   for the result.  */\n+/* Expand a comparison builtin of type BUILTIN_TYPE.  ICODE is the code of\n+   the comparison instruction and ARGLIST is the list of function arguments.\n+   TARGET, if nonnull, suggests a good place to put the boolean result.  */\n \n static rtx\n-mips_expand_compare_builtin (bool nonzero_if_equal_p, rtx target,\n-\t\t\t     rtx pat, rtx reg, int constant)\n+mips_expand_builtin_compare (enum mips_builtin_type builtin_type,\n+\t\t\t     enum insn_code icode, rtx target, tree arglist)\n {\n   rtx label1, label2, if_then_else;\n+  rtx pat, cmp_result, ops[MAX_RECOG_OPERANDS];\n+  rtx target_if_equal, target_if_unequal;\n+  int cmp_value, i;\n \n   if (target == 0 || GET_MODE (target) != SImode)\n     target = gen_reg_rtx (SImode);\n \n-  /* First assume that REG == CONSTANT.  */\n-  emit_move_insn (target, nonzero_if_equal_p ? const1_rtx : const0_rtx);\n+  /* Prepare the operands to the comparison.  */\n+  cmp_result = mips_prepare_builtin_target (icode, 0, 0);\n+  for (i = 1; i < insn_data[icode].n_operands; i++)\n+    ops[i] = mips_prepare_builtin_arg (icode, i, &arglist);\n+\n+  switch (insn_data[icode].n_operands)\n+    {\n+    case 3:\n+      pat = GEN_FCN (icode) (cmp_result, ops[1], ops[2]);\n+      break;\n+\n+    case 5:\n+      pat = GEN_FCN (icode) (cmp_result, ops[1], ops[2], ops[3], ops[4]);\n+      break;\n \n-  /* Branch to LABEL1 if REG != CONSTANT.  */\n+    default:\n+      abort ();\n+    }\n+\n+  /* If the comparison sets more than one register, we define the result\n+     to be 0 if all registers are false and -1 if all registers are true.\n+     The value of the complete result is indeterminate otherwise.  It is\n+     possible to test individual registers using SUBREGs.\n+\n+     Set up CMP_RESULT, CMP_VALUE, TARGET_IF_EQUAL and TARGET_IF_UNEQUAL so\n+     that the result should be TARGET_IF_EQUAL if (EQ CMP_RESULT CMP_VALUE)\n+     and TARGET_IF_UNEQUAL otherwise.  */\n+  if (builtin_type == MIPS_BUILTIN_CMP_ALL)\n+    {\n+      cmp_value = -1;\n+      target_if_equal = const1_rtx;\n+      target_if_unequal = const0_rtx;\n+    }\n+  else\n+    {\n+      cmp_value = 0;\n+      target_if_equal = const0_rtx;\n+      target_if_unequal = const1_rtx;\n+      if (builtin_type == MIPS_BUILTIN_CMP_UPPER)\n+\tcmp_result = simplify_gen_subreg (CCmode, cmp_result, CCV2mode, 4);\n+      else if (builtin_type == MIPS_BUILTIN_CMP_LOWER)\n+\tcmp_result = simplify_gen_subreg (CCmode, cmp_result, CCV2mode, 0);\n+    }\n+\n+  /* First assume that CMP_RESULT == CMP_VALUE.  */\n+  emit_move_insn (target, target_if_equal);\n+\n+  /* Branch to LABEL1 if CMP_RESULT != CMP_VALUE.  */\n   emit_insn (pat);\n   label1 = gen_label_rtx ();\n   label2 = gen_label_rtx ();\n   if_then_else\n     = gen_rtx_IF_THEN_ELSE (VOIDmode,\n-\t\t\t    gen_rtx_fmt_ee (NE, GET_MODE (reg),\n-\t\t\t\t\t    reg, GEN_INT (constant)),\n+\t\t\t    gen_rtx_fmt_ee (NE, GET_MODE (cmp_result),\n+\t\t\t\t\t    cmp_result, GEN_INT (cmp_value)),\n \t\t\t    gen_rtx_LABEL_REF (VOIDmode, label1), pc_rtx);\n   emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, if_then_else));\n   emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n \t\t\t       gen_rtx_LABEL_REF (VOIDmode, label2)));\n   emit_barrier ();\n   emit_label (label1);\n \n-  /* Fix TARGET for REG != CONSTANT.  */\n-  emit_move_insn (target, nonzero_if_equal_p ? const0_rtx : const1_rtx);\n+  /* Fix TARGET for CMP_RESULT != CMP_VALUE.  */\n+  emit_move_insn (target, target_if_unequal);\n   emit_label (label2);\n \n   return target;\n }\n-\n-/* Read two scalar arguments from ARGLIST and use instruction ICODE to\n-   compare them.  Return the result as a boolean SImode value.  TARGET,\n-   if nonnull, suggests a good place to put the result.  */\n-\n-rtx\n-mips_expand_scalar_compare_builtin (enum insn_code icode, rtx target,\n-\t\t\t\t    tree arglist)\n-{\n-  rtx pat, cmp_result, op0, op1;\n-\n-  cmp_result = mips_prepare_builtin_target (icode, 0, 0);\n-  op0 = mips_prepare_builtin_arg (icode, 1, &arglist);\n-  op1 = mips_prepare_builtin_arg (icode, 2, &arglist);\n-  pat = GEN_FCN (icode) (cmp_result, op0, op1);\n-\n-  return mips_expand_compare_builtin (false, target, pat, cmp_result, 0);\n-}\n-\n-/* Read four V2SF arguments from ARGLIST and use instruction ICODE to\n-   compare them.  Use CMP_CHOICE to convert the four condition codes\n-   into an SImode value.  TARGET, if nonnull, suggests a good place\n-   to put this value.  */\n-\n-rtx\n-mips_expand_4s_compare_builtin (enum mips_cmp_choice cmp_choice,\n-\t\t\t\tenum insn_code icode, rtx target,\n-\t\t\t\ttree arglist)\n-{\n-  rtx pat, cmp_result, op0, op1, op2, op3;\n-  int compare_value;\n-\n-  cmp_result = mips_prepare_builtin_target (icode, 0, 0);\n-  op0 = mips_prepare_builtin_arg (icode, 1, &arglist);\n-  op1 = mips_prepare_builtin_arg (icode, 2, &arglist);\n-  op2 = mips_prepare_builtin_arg (icode, 3, &arglist);\n-  op3 = mips_prepare_builtin_arg (icode, 4, &arglist);\n-  pat = GEN_FCN (icode) (cmp_result, op0, op1, op2, op3);\n-\n-  /* We fake the value of CCV4 to be:\n-     0 if all registers are false.\n-     -1 if all registers are true.\n-     an indeterminate value otherse.\n- \n-     Thus, we can map \"enum mips_cmp_choice\" to RTL comparison operators:\n-     MIPS_CMP_ANY ->   (NE 0)\n-     MIPS_CMP_ALL ->   (EQ -1).\n-\n-     However, because MIPS doesn't have \"branch_all\" instructions, \n-     for MIPS_CMP_ALL, we will use (NE -1) and reverse the assignment of\n-     the target to 1 first and then 0.  */\n-  switch (cmp_choice)\n-    {\n-    case MIPS_CMP_ANY:\n-      compare_value = 0;\n-      break;\n-\n-    case MIPS_CMP_ALL:\n-      compare_value = -1;\n-      break;\n-\n-    default:\n-      abort ();\n-    }\n-\n-  return mips_expand_compare_builtin (cmp_choice == MIPS_CMP_ALL,\n-\t\t\t\t      target, pat, cmp_result, compare_value);\n-}\n-\n-/* Like mips_expand_4s_compare_builtin, but compares two V2SF vectors rather\n-   than four.  The arguments and return type are otherwise the same. */\n-\n-rtx\n-mips_expand_ps_compare_builtin (enum mips_cmp_choice cmp_choice,\n-\t\t\t\tenum insn_code icode, rtx target,\n-\t\t\t\ttree arglist)\n-{\n-  rtx pat, cmp_result, op0, op1;\n-  int compare_value;\n-\n-  cmp_result = mips_prepare_builtin_target (icode, 0, 0);\n-  op0 = mips_prepare_builtin_arg (icode, 1, &arglist);\n-  op1 = mips_prepare_builtin_arg (icode, 2, &arglist);\n-  pat = GEN_FCN (icode) (cmp_result, op0, op1);\n-\n-  /* We fake the value of CCV2 to be:\n-     0 if all registers are false.\n-     -1 if all registers are true.\n-     an indeterminate value otherse.\n- \n-     Thus, we can map \"enum mips_cmp_choice\" to RTL comparison operators:\n-     MIPS_CMP_ANY ->   (NE 0)\n-     MIPS_CMP_ALL ->   (EQ -1).\n-\n-     However, because MIPS doesn't have \"branch_all\" instructions,\n-     for MIPS_CMP_ALL, we will use (NE -1) and reverse the assignment of\n-     the target to 1 first and then 0.\n-\n-     We handle MIPS_CMP_LOWER and MIPS_CMP_UPPER by taking the appropriate\n-     CCmode subreg and comparing against zero in the normal way.  */\n-  switch (cmp_choice)\n-    {\n-    case MIPS_CMP_ANY:\n-      compare_value = 0;\n-      break;\n-\n-    case MIPS_CMP_UPPER:\n-      cmp_result = simplify_gen_subreg (CCmode, cmp_result, CCV2mode, 4);\n-      compare_value = 0;\n-      break;\n-\n-    case MIPS_CMP_LOWER:\n-      cmp_result = simplify_gen_subreg (CCmode, cmp_result, CCV2mode, 0);\n-      compare_value = 0;\n-      break;\n-\n-    case MIPS_CMP_ALL:\n-      compare_value = -1;\n-      break;\n-\n-    default:\n-      abort ();\n-    }\n-\n-  return mips_expand_compare_builtin (cmp_choice == MIPS_CMP_ALL,\n-\t\t\t\t      target, pat, cmp_result, compare_value);\n-}\n \f\n #include \"gt-mips.h\""}, {"sha": "bebddce9e7457695d67ac47c03b2587b6f80dab5", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 367, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca1f68f884d05a22695c0c247a72b32c49ec554/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca1f68f884d05a22695c0c247a72b32c49ec554/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=4ca1f68f884d05a22695c0c247a72b32c49ec554", "patch": "@@ -3020,370 +3020,3 @@ while (0)\n \t\" TEXT_SECTION_ASM_OP);\n #endif\n #endif\n-\n-/* MIPS Paired-Single Floating Point Instruction & MIPS-3D Support.  */\n-\n-/* Builtin functions for MIPS.  */\n-/* NOTE: The order of mips_bdesc[] in mips.c must be the same as the order of\n-   enum mips_builtins{}.  */\n-\n-enum mips_builtins\n-{\n-  MIPS_BUILTIN_PLL_PS,\n-  MIPS_BUILTIN_PUL_PS,\n-  MIPS_BUILTIN_PLU_PS,\n-  MIPS_BUILTIN_PUU_PS,\n-  MIPS_BUILTIN_CVT_PS_S,\n-  MIPS_BUILTIN_CVT_S_PL,\n-  MIPS_BUILTIN_CVT_S_PU,\n-  MIPS_BUILTIN_ABS_PS,\n-  MIPS_BUILTIN_ALNV_PS,\n-  MIPS_BUILTIN_ADDR_PS,\n-  MIPS_BUILTIN_MULR_PS,\n-  MIPS_BUILTIN_CVT_PW_PS,\n-  MIPS_BUILTIN_CVT_PS_PW,\n-\n-  MIPS_BUILTIN_RECIP1_S,\n-  MIPS_BUILTIN_RECIP1_D,\n-  MIPS_BUILTIN_RECIP1_PS,\n-  MIPS_BUILTIN_RECIP2_S,\n-  MIPS_BUILTIN_RECIP2_D,\n-  MIPS_BUILTIN_RECIP2_PS,\n-\n-  MIPS_BUILTIN_RSQRT1_S,\n-  MIPS_BUILTIN_RSQRT1_D,\n-  MIPS_BUILTIN_RSQRT1_PS,\n-  MIPS_BUILTIN_RSQRT2_S,\n-  MIPS_BUILTIN_RSQRT2_D,\n-  MIPS_BUILTIN_RSQRT2_PS,\n-\n-  MIPS_BUILTIN_ANY_C_F_PS,\n-  MIPS_BUILTIN_UPPER_C_F_PS,\n-  MIPS_BUILTIN_LOWER_C_F_PS,\n-  MIPS_BUILTIN_ALL_C_F_PS,\n-  MIPS_BUILTIN_ANY_C_UN_PS,\n-  MIPS_BUILTIN_UPPER_C_UN_PS,\n-  MIPS_BUILTIN_LOWER_C_UN_PS,\n-  MIPS_BUILTIN_ALL_C_UN_PS,\n-  MIPS_BUILTIN_ANY_C_EQ_PS,\n-  MIPS_BUILTIN_UPPER_C_EQ_PS,\n-  MIPS_BUILTIN_LOWER_C_EQ_PS,\n-  MIPS_BUILTIN_ALL_C_EQ_PS,\n-  MIPS_BUILTIN_ANY_C_UEQ_PS,\n-  MIPS_BUILTIN_UPPER_C_UEQ_PS,\n-  MIPS_BUILTIN_LOWER_C_UEQ_PS,\n-  MIPS_BUILTIN_ALL_C_UEQ_PS,\n-  MIPS_BUILTIN_ANY_C_OLT_PS,\n-  MIPS_BUILTIN_UPPER_C_OLT_PS,\n-  MIPS_BUILTIN_LOWER_C_OLT_PS,\n-  MIPS_BUILTIN_ALL_C_OLT_PS,\n-  MIPS_BUILTIN_ANY_C_ULT_PS,\n-  MIPS_BUILTIN_UPPER_C_ULT_PS,\n-  MIPS_BUILTIN_LOWER_C_ULT_PS,\n-  MIPS_BUILTIN_ALL_C_ULT_PS,\n-  MIPS_BUILTIN_ANY_C_OLE_PS,\n-  MIPS_BUILTIN_UPPER_C_OLE_PS,\n-  MIPS_BUILTIN_LOWER_C_OLE_PS,\n-  MIPS_BUILTIN_ALL_C_OLE_PS,\n-  MIPS_BUILTIN_ANY_C_ULE_PS,\n-  MIPS_BUILTIN_UPPER_C_ULE_PS,\n-  MIPS_BUILTIN_LOWER_C_ULE_PS,\n-  MIPS_BUILTIN_ALL_C_ULE_PS,\n-  MIPS_BUILTIN_ANY_C_SF_PS,\n-  MIPS_BUILTIN_UPPER_C_SF_PS,\n-  MIPS_BUILTIN_LOWER_C_SF_PS,\n-  MIPS_BUILTIN_ALL_C_SF_PS,\n-  MIPS_BUILTIN_ANY_C_NGLE_PS,\n-  MIPS_BUILTIN_UPPER_C_NGLE_PS,\n-  MIPS_BUILTIN_LOWER_C_NGLE_PS,\n-  MIPS_BUILTIN_ALL_C_NGLE_PS,\n-  MIPS_BUILTIN_ANY_C_SEQ_PS,\n-  MIPS_BUILTIN_UPPER_C_SEQ_PS,\n-  MIPS_BUILTIN_LOWER_C_SEQ_PS,\n-  MIPS_BUILTIN_ALL_C_SEQ_PS,\n-  MIPS_BUILTIN_ANY_C_NGL_PS,\n-  MIPS_BUILTIN_UPPER_C_NGL_PS,\n-  MIPS_BUILTIN_LOWER_C_NGL_PS,\n-  MIPS_BUILTIN_ALL_C_NGL_PS,\n-  MIPS_BUILTIN_ANY_C_LT_PS,\n-  MIPS_BUILTIN_UPPER_C_LT_PS,\n-  MIPS_BUILTIN_LOWER_C_LT_PS,\n-  MIPS_BUILTIN_ALL_C_LT_PS,\n-  MIPS_BUILTIN_ANY_C_NGE_PS,\n-  MIPS_BUILTIN_UPPER_C_NGE_PS,\n-  MIPS_BUILTIN_LOWER_C_NGE_PS,\n-  MIPS_BUILTIN_ALL_C_NGE_PS,\n-  MIPS_BUILTIN_ANY_C_LE_PS,\n-  MIPS_BUILTIN_UPPER_C_LE_PS,\n-  MIPS_BUILTIN_LOWER_C_LE_PS,\n-  MIPS_BUILTIN_ALL_C_LE_PS,\n-  MIPS_BUILTIN_ANY_C_NGT_PS,\n-  MIPS_BUILTIN_UPPER_C_NGT_PS,\n-  MIPS_BUILTIN_LOWER_C_NGT_PS,\n-  MIPS_BUILTIN_ALL_C_NGT_PS,\n-  MIPS_BUILTIN_ANY_CABS_F_PS,\n-  MIPS_BUILTIN_UPPER_CABS_F_PS,\n-  MIPS_BUILTIN_LOWER_CABS_F_PS,\n-  MIPS_BUILTIN_ALL_CABS_F_PS,\n-  MIPS_BUILTIN_ANY_CABS_UN_PS,\n-  MIPS_BUILTIN_UPPER_CABS_UN_PS,\n-  MIPS_BUILTIN_LOWER_CABS_UN_PS,\n-  MIPS_BUILTIN_ALL_CABS_UN_PS,\n-  MIPS_BUILTIN_ANY_CABS_EQ_PS,\n-  MIPS_BUILTIN_UPPER_CABS_EQ_PS,\n-  MIPS_BUILTIN_LOWER_CABS_EQ_PS,\n-  MIPS_BUILTIN_ALL_CABS_EQ_PS,\n-  MIPS_BUILTIN_ANY_CABS_UEQ_PS,\n-  MIPS_BUILTIN_UPPER_CABS_UEQ_PS,\n-  MIPS_BUILTIN_LOWER_CABS_UEQ_PS,\n-  MIPS_BUILTIN_ALL_CABS_UEQ_PS,\n-  MIPS_BUILTIN_ANY_CABS_OLT_PS,\n-  MIPS_BUILTIN_UPPER_CABS_OLT_PS,\n-  MIPS_BUILTIN_LOWER_CABS_OLT_PS,\n-  MIPS_BUILTIN_ALL_CABS_OLT_PS,\n-  MIPS_BUILTIN_ANY_CABS_ULT_PS,\n-  MIPS_BUILTIN_UPPER_CABS_ULT_PS,\n-  MIPS_BUILTIN_LOWER_CABS_ULT_PS,\n-  MIPS_BUILTIN_ALL_CABS_ULT_PS,\n-  MIPS_BUILTIN_ANY_CABS_OLE_PS,\n-  MIPS_BUILTIN_UPPER_CABS_OLE_PS,\n-  MIPS_BUILTIN_LOWER_CABS_OLE_PS,\n-  MIPS_BUILTIN_ALL_CABS_OLE_PS,\n-  MIPS_BUILTIN_ANY_CABS_ULE_PS,\n-  MIPS_BUILTIN_UPPER_CABS_ULE_PS,\n-  MIPS_BUILTIN_LOWER_CABS_ULE_PS,\n-  MIPS_BUILTIN_ALL_CABS_ULE_PS,\n-  MIPS_BUILTIN_ANY_CABS_SF_PS,\n-  MIPS_BUILTIN_UPPER_CABS_SF_PS,\n-  MIPS_BUILTIN_LOWER_CABS_SF_PS,\n-  MIPS_BUILTIN_ALL_CABS_SF_PS,\n-  MIPS_BUILTIN_ANY_CABS_NGLE_PS,\n-  MIPS_BUILTIN_UPPER_CABS_NGLE_PS,\n-  MIPS_BUILTIN_LOWER_CABS_NGLE_PS,\n-  MIPS_BUILTIN_ALL_CABS_NGLE_PS,\n-  MIPS_BUILTIN_ANY_CABS_SEQ_PS,\n-  MIPS_BUILTIN_UPPER_CABS_SEQ_PS,\n-  MIPS_BUILTIN_LOWER_CABS_SEQ_PS,\n-  MIPS_BUILTIN_ALL_CABS_SEQ_PS,\n-  MIPS_BUILTIN_ANY_CABS_NGL_PS,\n-  MIPS_BUILTIN_UPPER_CABS_NGL_PS,\n-  MIPS_BUILTIN_LOWER_CABS_NGL_PS,\n-  MIPS_BUILTIN_ALL_CABS_NGL_PS,\n-  MIPS_BUILTIN_ANY_CABS_LT_PS,\n-  MIPS_BUILTIN_UPPER_CABS_LT_PS,\n-  MIPS_BUILTIN_LOWER_CABS_LT_PS,\n-  MIPS_BUILTIN_ALL_CABS_LT_PS,\n-  MIPS_BUILTIN_ANY_CABS_NGE_PS,\n-  MIPS_BUILTIN_UPPER_CABS_NGE_PS,\n-  MIPS_BUILTIN_LOWER_CABS_NGE_PS,\n-  MIPS_BUILTIN_ALL_CABS_NGE_PS,\n-  MIPS_BUILTIN_ANY_CABS_LE_PS,\n-  MIPS_BUILTIN_UPPER_CABS_LE_PS,\n-  MIPS_BUILTIN_LOWER_CABS_LE_PS,\n-  MIPS_BUILTIN_ALL_CABS_LE_PS,\n-  MIPS_BUILTIN_ANY_CABS_NGT_PS,\n-  MIPS_BUILTIN_UPPER_CABS_NGT_PS,\n-  MIPS_BUILTIN_LOWER_CABS_NGT_PS,\n-  MIPS_BUILTIN_ALL_CABS_NGT_PS,\n-\n-  MIPS_BUILTIN_ANY_C_F_4S,\n-  MIPS_BUILTIN_ALL_C_F_4S,\n-  MIPS_BUILTIN_ANY_C_UN_4S,\n-  MIPS_BUILTIN_ALL_C_UN_4S,\n-  MIPS_BUILTIN_ANY_C_EQ_4S,\n-  MIPS_BUILTIN_ALL_C_EQ_4S,\n-  MIPS_BUILTIN_ANY_C_UEQ_4S,\n-  MIPS_BUILTIN_ALL_C_UEQ_4S,\n-  MIPS_BUILTIN_ANY_C_OLT_4S,\n-  MIPS_BUILTIN_ALL_C_OLT_4S,\n-  MIPS_BUILTIN_ANY_C_ULT_4S,\n-  MIPS_BUILTIN_ALL_C_ULT_4S,\n-  MIPS_BUILTIN_ANY_C_OLE_4S,\n-  MIPS_BUILTIN_ALL_C_OLE_4S,\n-  MIPS_BUILTIN_ANY_C_ULE_4S,\n-  MIPS_BUILTIN_ALL_C_ULE_4S,\n-  MIPS_BUILTIN_ANY_C_SF_4S,\n-  MIPS_BUILTIN_ALL_C_SF_4S,\n-  MIPS_BUILTIN_ANY_C_NGLE_4S,\n-  MIPS_BUILTIN_ALL_C_NGLE_4S,\n-  MIPS_BUILTIN_ANY_C_SEQ_4S,\n-  MIPS_BUILTIN_ALL_C_SEQ_4S,\n-  MIPS_BUILTIN_ANY_C_NGL_4S,\n-  MIPS_BUILTIN_ALL_C_NGL_4S,\n-  MIPS_BUILTIN_ANY_C_LT_4S,\n-  MIPS_BUILTIN_ALL_C_LT_4S,\n-  MIPS_BUILTIN_ANY_C_NGE_4S,\n-  MIPS_BUILTIN_ALL_C_NGE_4S,\n-  MIPS_BUILTIN_ANY_C_LE_4S,\n-  MIPS_BUILTIN_ALL_C_LE_4S,\n-  MIPS_BUILTIN_ANY_C_NGT_4S,\n-  MIPS_BUILTIN_ALL_C_NGT_4S,\n-  MIPS_BUILTIN_ANY_CABS_F_4S,\n-  MIPS_BUILTIN_ALL_CABS_F_4S,\n-  MIPS_BUILTIN_ANY_CABS_UN_4S,\n-  MIPS_BUILTIN_ALL_CABS_UN_4S,\n-  MIPS_BUILTIN_ANY_CABS_EQ_4S,\n-  MIPS_BUILTIN_ALL_CABS_EQ_4S,\n-  MIPS_BUILTIN_ANY_CABS_UEQ_4S,\n-  MIPS_BUILTIN_ALL_CABS_UEQ_4S,\n-  MIPS_BUILTIN_ANY_CABS_OLT_4S,\n-  MIPS_BUILTIN_ALL_CABS_OLT_4S,\n-  MIPS_BUILTIN_ANY_CABS_ULT_4S,\n-  MIPS_BUILTIN_ALL_CABS_ULT_4S,\n-  MIPS_BUILTIN_ANY_CABS_OLE_4S,\n-  MIPS_BUILTIN_ALL_CABS_OLE_4S,\n-  MIPS_BUILTIN_ANY_CABS_ULE_4S,\n-  MIPS_BUILTIN_ALL_CABS_ULE_4S,\n-  MIPS_BUILTIN_ANY_CABS_SF_4S,\n-  MIPS_BUILTIN_ALL_CABS_SF_4S,\n-  MIPS_BUILTIN_ANY_CABS_NGLE_4S,\n-  MIPS_BUILTIN_ALL_CABS_NGLE_4S,\n-  MIPS_BUILTIN_ANY_CABS_SEQ_4S,\n-  MIPS_BUILTIN_ALL_CABS_SEQ_4S,\n-  MIPS_BUILTIN_ANY_CABS_NGL_4S,\n-  MIPS_BUILTIN_ALL_CABS_NGL_4S,\n-  MIPS_BUILTIN_ANY_CABS_LT_4S,\n-  MIPS_BUILTIN_ALL_CABS_LT_4S,\n-  MIPS_BUILTIN_ANY_CABS_NGE_4S,\n-  MIPS_BUILTIN_ALL_CABS_NGE_4S,\n-  MIPS_BUILTIN_ANY_CABS_LE_4S,\n-  MIPS_BUILTIN_ALL_CABS_LE_4S,\n-  MIPS_BUILTIN_ANY_CABS_NGT_4S,\n-  MIPS_BUILTIN_ALL_CABS_NGT_4S,\n-\n-  MIPS_BUILTIN_CABS_F_S,\n-  MIPS_BUILTIN_CABS_UN_S,\n-  MIPS_BUILTIN_CABS_EQ_S,\n-  MIPS_BUILTIN_CABS_UEQ_S,\n-  MIPS_BUILTIN_CABS_OLT_S,\n-  MIPS_BUILTIN_CABS_ULT_S,\n-  MIPS_BUILTIN_CABS_OLE_S,\n-  MIPS_BUILTIN_CABS_ULE_S,\n-  MIPS_BUILTIN_CABS_SF_S,\n-  MIPS_BUILTIN_CABS_NGLE_S,\n-  MIPS_BUILTIN_CABS_SEQ_S,\n-  MIPS_BUILTIN_CABS_NGL_S,\n-  MIPS_BUILTIN_CABS_LT_S,\n-  MIPS_BUILTIN_CABS_NGE_S,\n-  MIPS_BUILTIN_CABS_LE_S,\n-  MIPS_BUILTIN_CABS_NGT_S,\n-  MIPS_BUILTIN_CABS_F_D,\n-  MIPS_BUILTIN_CABS_UN_D,\n-  MIPS_BUILTIN_CABS_EQ_D,\n-  MIPS_BUILTIN_CABS_UEQ_D,\n-  MIPS_BUILTIN_CABS_OLT_D,\n-  MIPS_BUILTIN_CABS_ULT_D,\n-  MIPS_BUILTIN_CABS_OLE_D,\n-  MIPS_BUILTIN_CABS_ULE_D,\n-  MIPS_BUILTIN_CABS_SF_D,\n-  MIPS_BUILTIN_CABS_NGLE_D,\n-  MIPS_BUILTIN_CABS_SEQ_D,\n-  MIPS_BUILTIN_CABS_NGL_D,\n-  MIPS_BUILTIN_CABS_LT_D,\n-  MIPS_BUILTIN_CABS_NGE_D,\n-  MIPS_BUILTIN_CABS_LE_D,\n-  MIPS_BUILTIN_CABS_NGT_D,\n-\n-  MIPS_BUILTIN_MOVT_C_F_PS,\n-  MIPS_BUILTIN_MOVT_C_UN_PS,\n-  MIPS_BUILTIN_MOVT_C_EQ_PS,\n-  MIPS_BUILTIN_MOVT_C_UEQ_PS,\n-  MIPS_BUILTIN_MOVT_C_OLT_PS,\n-  MIPS_BUILTIN_MOVT_C_ULT_PS,\n-  MIPS_BUILTIN_MOVT_C_OLE_PS,\n-  MIPS_BUILTIN_MOVT_C_ULE_PS,\n-  MIPS_BUILTIN_MOVT_C_SF_PS,\n-  MIPS_BUILTIN_MOVT_C_NGLE_PS,\n-  MIPS_BUILTIN_MOVT_C_SEQ_PS,\n-  MIPS_BUILTIN_MOVT_C_NGL_PS,\n-  MIPS_BUILTIN_MOVT_C_LT_PS,\n-  MIPS_BUILTIN_MOVT_C_NGE_PS,\n-  MIPS_BUILTIN_MOVT_C_LE_PS,\n-  MIPS_BUILTIN_MOVT_C_NGT_PS,\n-  MIPS_BUILTIN_MOVT_CABS_F_PS,\n-  MIPS_BUILTIN_MOVT_CABS_UN_PS,\n-  MIPS_BUILTIN_MOVT_CABS_EQ_PS,\n-  MIPS_BUILTIN_MOVT_CABS_UEQ_PS,\n-  MIPS_BUILTIN_MOVT_CABS_OLT_PS,\n-  MIPS_BUILTIN_MOVT_CABS_ULT_PS,\n-  MIPS_BUILTIN_MOVT_CABS_OLE_PS,\n-  MIPS_BUILTIN_MOVT_CABS_ULE_PS,\n-  MIPS_BUILTIN_MOVT_CABS_SF_PS,\n-  MIPS_BUILTIN_MOVT_CABS_NGLE_PS,\n-  MIPS_BUILTIN_MOVT_CABS_SEQ_PS,\n-  MIPS_BUILTIN_MOVT_CABS_NGL_PS,\n-  MIPS_BUILTIN_MOVT_CABS_LT_PS,\n-  MIPS_BUILTIN_MOVT_CABS_NGE_PS,\n-  MIPS_BUILTIN_MOVT_CABS_LE_PS,\n-  MIPS_BUILTIN_MOVT_CABS_NGT_PS,\n-  MIPS_BUILTIN_MOVF_C_F_PS,\n-  MIPS_BUILTIN_MOVF_C_UN_PS,\n-  MIPS_BUILTIN_MOVF_C_EQ_PS,\n-  MIPS_BUILTIN_MOVF_C_UEQ_PS,\n-  MIPS_BUILTIN_MOVF_C_OLT_PS,\n-  MIPS_BUILTIN_MOVF_C_ULT_PS,\n-  MIPS_BUILTIN_MOVF_C_OLE_PS,\n-  MIPS_BUILTIN_MOVF_C_ULE_PS,\n-  MIPS_BUILTIN_MOVF_C_SF_PS,\n-  MIPS_BUILTIN_MOVF_C_NGLE_PS,\n-  MIPS_BUILTIN_MOVF_C_SEQ_PS,\n-  MIPS_BUILTIN_MOVF_C_NGL_PS,\n-  MIPS_BUILTIN_MOVF_C_LT_PS,\n-  MIPS_BUILTIN_MOVF_C_NGE_PS,\n-  MIPS_BUILTIN_MOVF_C_LE_PS,\n-  MIPS_BUILTIN_MOVF_C_NGT_PS,\n-  MIPS_BUILTIN_MOVF_CABS_F_PS,\n-  MIPS_BUILTIN_MOVF_CABS_UN_PS,\n-  MIPS_BUILTIN_MOVF_CABS_EQ_PS,\n-  MIPS_BUILTIN_MOVF_CABS_UEQ_PS,\n-  MIPS_BUILTIN_MOVF_CABS_OLT_PS,\n-  MIPS_BUILTIN_MOVF_CABS_ULT_PS,\n-  MIPS_BUILTIN_MOVF_CABS_OLE_PS,\n-  MIPS_BUILTIN_MOVF_CABS_ULE_PS,\n-  MIPS_BUILTIN_MOVF_CABS_SF_PS,\n-  MIPS_BUILTIN_MOVF_CABS_NGLE_PS,\n-  MIPS_BUILTIN_MOVF_CABS_SEQ_PS,\n-  MIPS_BUILTIN_MOVF_CABS_NGL_PS,\n-  MIPS_BUILTIN_MOVF_CABS_LT_PS,\n-  MIPS_BUILTIN_MOVF_CABS_NGE_PS,\n-  MIPS_BUILTIN_MOVF_CABS_LE_PS,\n-  MIPS_BUILTIN_MOVF_CABS_NGT_PS,\n-\n-  /* THE LAST BUILTIN.  */\n-  MIPS_BUILTIN_MAX_BUILTIN\n-};\n-\n-/* MIPS builtin function types.  */\n-\n-enum mips_function_type\n-{\n-  MIPS_V2SF_FTYPE_V2SF,\n-  MIPS_V2SF_FTYPE_V2SF_V2SF,\n-  MIPS_V2SF_FTYPE_V2SF_V2SF_INT,\n-  MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-  MIPS_V2SF_FTYPE_SF_SF,\n-  MIPS_INT_FTYPE_V2SF_V2SF,\n-  MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-  MIPS_INT_FTYPE_SF_SF,\n-  MIPS_INT_FTYPE_DF_DF,\n-  MIPS_SF_FTYPE_V2SF,\n-  MIPS_SF_FTYPE_SF,\n-  MIPS_SF_FTYPE_SF_SF,\n-  MIPS_DF_FTYPE_DF,\n-  MIPS_DF_FTYPE_DF_DF,\n-\n-  /* The last type.  */\n-  MIPS_MAX_FTYPE_MAX\n-};\n-\n-/* MIPS compare choices used for MIPS builtin functions.  */\n-\n-enum mips_cmp_choice\n-{\n-  MIPS_CMP_ANY,    /* Check if any result is true.  */\n-  MIPS_CMP_UPPER,  /* Check if the upper one of two results is true.  */\n-  MIPS_CMP_LOWER,  /* Check if the lower one of two results is true.  */\n-  MIPS_CMP_ALL,    /* Check if all results are true.  */\n-\n-  MIPS_CMP_MAX\n-};"}]}