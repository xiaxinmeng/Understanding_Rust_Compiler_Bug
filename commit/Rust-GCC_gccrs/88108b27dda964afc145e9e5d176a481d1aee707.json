{"sha": "88108b27dda964afc145e9e5d176a481d1aee707", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgxMDhiMjdkZGE5NjRhZmMxNDVlOWU1ZDE3NmE0ODFkMWFlZTcwNw==", "commit": {"author": {"name": "Andrew Waterman", "email": "andrew@sifive.com", "date": "2019-03-26T19:41:02Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2019-03-26T19:41:02Z"}, "message": "RISC-V: Add sifive-7 pipeline description.\n\n\t* config/riscv/generic.md (generic_alu, generic_load, generic_store)\n\t(generic_xfer, generic_branch, generic_imul, generic_idivsi)\n\t(generic_idivdi, generic_fmul_single, generic_fmul_double)\n\t(generic_fdiv, generic_fsqrt): Add check for generic tune.\n\t(generic_alu): Add auipc to type list.\n\t* config/riscv/riscv-opts.h (enum riscv_microarchitecture_type): New.\n\t(riscv_microarchitecture): Declare.\n\t* config/riscv/riscv-protos.h (riscv_store_data_bypass_p): Declare.\n\t* config/riscv/riscv.c (struct riscv_cpu_info): Add microarchitecture\n\tfield.\n\t(riscv_microarchitecture): New.\n\t(sifive_7_tune_info): New.\n\t(riscv_cpu_info_table): Add microarchitecture value for rocket and\n\tsize.  Add sifive-3-series, sifive-5-series, and sifive-7-series\n\tentries.\n\t(riscv_store_data_bypass_p): New.\n\t(riscv_option_override): Set riscv_microarchitecture from\n\tcpu->microarchitecture.\n\t* config/riscv/riscv.md: Include sifive-7.md.\n\t(type): Add auipc.\n\t(tune): New.\n\t(auipc<mode>): Change type to auipc.\n\t(restore_stack_nonlocal): New.\n\t* config/riscv/sifive-7.md: New.\n\t* doc/invoke.texi (RISC-V Options): Update mtune docs.\n\nCo-Authored-By: Jim Wilson <jimw@sifive.com>\n\nFrom-SVN: r269954", "tree": {"sha": "d246eb687ec1e908666d71afffd2152c6a17ccd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d246eb687ec1e908666d71afffd2152c6a17ccd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88108b27dda964afc145e9e5d176a481d1aee707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88108b27dda964afc145e9e5d176a481d1aee707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88108b27dda964afc145e9e5d176a481d1aee707", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88108b27dda964afc145e9e5d176a481d1aee707/comments", "author": {"login": "aswaterman", "id": 1031106, "node_id": "MDQ6VXNlcjEwMzExMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1031106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aswaterman", "html_url": "https://github.com/aswaterman", "followers_url": "https://api.github.com/users/aswaterman/followers", "following_url": "https://api.github.com/users/aswaterman/following{/other_user}", "gists_url": "https://api.github.com/users/aswaterman/gists{/gist_id}", "starred_url": "https://api.github.com/users/aswaterman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aswaterman/subscriptions", "organizations_url": "https://api.github.com/users/aswaterman/orgs", "repos_url": "https://api.github.com/users/aswaterman/repos", "events_url": "https://api.github.com/users/aswaterman/events{/privacy}", "received_events_url": "https://api.github.com/users/aswaterman/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a48d7fa69843ab586f553a3d7d8a3546cc617692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a48d7fa69843ab586f553a3d7d8a3546cc617692", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a48d7fa69843ab586f553a3d7d8a3546cc617692"}], "stats": {"total": 354, "additions": 333, "deletions": 21}, "files": [{"sha": "a298f878bbb36929d6ac221baadf24dec4c81363", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88108b27dda964afc145e9e5d176a481d1aee707/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88108b27dda964afc145e9e5d176a481d1aee707/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88108b27dda964afc145e9e5d176a481d1aee707", "patch": "@@ -1,3 +1,32 @@\n+2019-03-26  Andrew Waterman  <andrew@sifive.com>\n+\t    Jim Wilson  <jimw@sifive.com>\n+\n+\t* config/riscv/generic.md (generic_alu, generic_load, generic_store)\n+\t(generic_xfer, generic_branch, generic_imul, generic_idivsi)\n+\t(generic_idivdi, generic_fmul_single, generic_fmul_double)\n+\t(generic_fdiv, generic_fsqrt): Add check for generic tune.\n+\t(generic_alu): Add auipc to type list.\n+\t* config/riscv/riscv-opts.h (enum riscv_microarchitecture_type): New.\n+\t(riscv_microarchitecture): Declare.\n+\t* config/riscv/riscv-protos.h (riscv_store_data_bypass_p): Declare.\n+\t* config/riscv/riscv.c (struct riscv_cpu_info): Add microarchitecture\n+\tfield.\n+\t(riscv_microarchitecture): New.\n+\t(sifive_7_tune_info): New.\n+\t(riscv_cpu_info_table): Add microarchitecture value for rocket and\n+\tsize.  Add sifive-3-series, sifive-5-series, and sifive-7-series\n+\tentries.\n+\t(riscv_store_data_bypass_p): New.\n+\t(riscv_option_override): Set riscv_microarchitecture from\n+\tcpu->microarchitecture.\n+\t* config/riscv/riscv.md: Include sifive-7.md.\n+\t(type): Add auipc.\n+\t(tune): New.\n+\t(auipc<mode>): Change type to auipc.\n+\t(restore_stack_nonlocal): New.\n+\t* config/riscv/sifive-7.md: New.\n+\t* doc/invoke.texi (RISC-V Options): Update mtune docs.\n+\n 2019-03-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/89827"}, {"sha": "fcd78b990feccbdceeee70df8de2cd1341757744", "filename": "gcc/config/riscv/generic.md", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88108b27dda964afc145e9e5d176a481d1aee707/gcc%2Fconfig%2Friscv%2Fgeneric.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88108b27dda964afc145e9e5d176a481d1aee707/gcc%2Fconfig%2Friscv%2Fgeneric.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fgeneric.md?ref=88108b27dda964afc145e9e5d176a481d1aee707", "patch": "@@ -26,53 +26,65 @@\n (define_cpu_unit \"fdivsqrt\" \"pipe0\")\n \n (define_insn_reservation \"generic_alu\" 1\n-  (eq_attr \"type\" \"unknown,const,arith,shift,slt,multi,nop,logical,move\")\n+  (and (eq_attr \"tune\" \"generic\")\n+       (eq_attr \"type\" \"unknown,const,arith,shift,slt,multi,auipc,nop,logical,move\"))\n   \"alu\")\n \n (define_insn_reservation \"generic_load\" 3\n-  (eq_attr \"type\" \"load,fpload\")\n+  (and (eq_attr \"tune\" \"generic\")\n+       (eq_attr \"type\" \"load,fpload\"))\n   \"alu\")\n \n (define_insn_reservation \"generic_store\" 1\n-  (eq_attr \"type\" \"store,fpstore\")\n+  (and (eq_attr \"tune\" \"generic\")\n+       (eq_attr \"type\" \"store,fpstore\"))\n   \"alu\")\n \n (define_insn_reservation \"generic_xfer\" 3\n-  (eq_attr \"type\" \"mfc,mtc,fcvt,fmove,fcmp\")\n+  (and (eq_attr \"tune\" \"generic\")\n+       (eq_attr \"type\" \"mfc,mtc,fcvt,fmove,fcmp\"))\n   \"alu\")\n \n (define_insn_reservation \"generic_branch\" 1\n-  (eq_attr \"type\" \"branch,jump,call\")\n+  (and (eq_attr \"tune\" \"generic\")\n+       (eq_attr \"type\" \"branch,jump,call\"))\n   \"alu\")\n \n (define_insn_reservation \"generic_imul\" 10\n-  (eq_attr \"type\" \"imul\")\n+  (and (eq_attr \"tune\" \"generic\")\n+       (eq_attr \"type\" \"imul\"))\n   \"imuldiv*10\")\n \n (define_insn_reservation \"generic_idivsi\" 34\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"mode\" \"SI\"))\n+  (and (eq_attr \"tune\" \"generic\")\n+       (and (eq_attr \"type\" \"idiv\")\n+\t    (eq_attr \"mode\" \"SI\")))\n   \"imuldiv*34\")\n \n (define_insn_reservation \"generic_idivdi\" 66\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"mode\" \"DI\"))\n+  (and (eq_attr \"tune\" \"generic\")\n+       (and (eq_attr \"type\" \"idiv\")\n+\t    (eq_attr \"mode\" \"DI\")))\n   \"imuldiv*66\")\n \n (define_insn_reservation \"generic_fmul_single\" 5\n-  (and (eq_attr \"type\" \"fadd,fmul,fmadd\")\n-       (eq_attr \"mode\" \"SF\"))\n+  (and (eq_attr \"tune\" \"generic\")\n+       (and (eq_attr \"type\" \"fadd,fmul,fmadd\")\n+\t    (eq_attr \"mode\" \"SF\")))\n   \"alu\")\n \n (define_insn_reservation \"generic_fmul_double\" 7\n-  (and (eq_attr \"type\" \"fadd,fmul,fmadd\")\n-       (eq_attr \"mode\" \"DF\"))\n+  (and (eq_attr \"tune\" \"generic\")\n+       (and (eq_attr \"type\" \"fadd,fmul,fmadd\")\n+\t    (eq_attr \"mode\" \"DF\")))\n   \"alu\")\n \n (define_insn_reservation \"generic_fdiv\" 20\n-  (eq_attr \"type\" \"fdiv\")\n+  (and (eq_attr \"tune\" \"generic\")\n+       (eq_attr \"type\" \"fdiv\"))\n   \"fdivsqrt*20\")\n \n (define_insn_reservation \"generic_fsqrt\" 25\n-  (eq_attr \"type\" \"fsqrt\")\n+  (and (eq_attr \"tune\" \"generic\")\n+       (eq_attr \"type\" \"fsqrt\"))\n   \"fdivsqrt*25\")"}, {"sha": "f3031f2e523c8796ed7aac371d55d30bb6ff244f", "filename": "gcc/config/riscv/riscv-opts.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88108b27dda964afc145e9e5d176a481d1aee707/gcc%2Fconfig%2Friscv%2Friscv-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88108b27dda964afc145e9e5d176a481d1aee707/gcc%2Fconfig%2Friscv%2Friscv-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-opts.h?ref=88108b27dda964afc145e9e5d176a481d1aee707", "patch": "@@ -39,4 +39,11 @@ enum riscv_code_model {\n };\n extern enum riscv_code_model riscv_cmodel;\n \n+/* Keep this list in sync with define_attr \"tune\" in riscv.md.  */\n+enum riscv_microarchitecture_type {\n+  generic,\n+  sifive_7\n+};\n+extern enum riscv_microarchitecture_type riscv_microarchitecture;\n+\n #endif /* ! GCC_RISCV_OPTS_H */"}, {"sha": "8b510f87df87b0d17d011243f8108e4bb310c5b0", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88108b27dda964afc145e9e5d176a481d1aee707/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88108b27dda964afc145e9e5d176a481d1aee707/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=88108b27dda964afc145e9e5d176a481d1aee707", "patch": "@@ -71,6 +71,7 @@ extern bool riscv_epilogue_uses (unsigned int);\n extern bool riscv_can_use_return_insn (void);\n extern rtx riscv_function_value (const_tree, const_tree, enum machine_mode);\n extern bool riscv_expand_block_move (rtx, rtx, rtx);\n+extern bool riscv_store_data_bypass_p (rtx_insn *, rtx_insn *);\n \n /* Routines implemented in riscv-c.c.  */\n void riscv_cpu_cpp_builtins (cpp_reader *);"}, {"sha": "9aa0fd2fb71deb1177cbebc2bb9f7f0f843e2521", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 112, "deletions": 2, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88108b27dda964afc145e9e5d176a481d1aee707/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88108b27dda964afc145e9e5d176a481d1aee707/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=88108b27dda964afc145e9e5d176a481d1aee707", "patch": "@@ -226,6 +226,9 @@ struct riscv_cpu_info {\n   /* This CPU's canonical name.  */\n   const char *name;\n \n+  /* Which automaton to use for tuning.  */\n+  enum riscv_microarchitecture_type microarchitecture;\n+\n   /* Tuning parameters for this CPU.  */\n   const struct riscv_tune_info *tune_info;\n };\n@@ -246,6 +249,9 @@ static int epilogue_cfa_sp_offset;\n /* Which tuning parameters to use.  */\n static const struct riscv_tune_info *tune_info;\n \n+/* Which automaton to use for tuning.  */\n+enum riscv_microarchitecture_type riscv_microarchitecture;\n+\n /* Index R is the smallest register class that contains register R.  */\n const enum reg_class riscv_regno_to_class[FIRST_PSEUDO_REGISTER] = {\n   GR_REGS,\tGR_REGS,\tGR_REGS,\tGR_REGS,\n@@ -280,6 +286,19 @@ static const struct riscv_tune_info rocket_tune_info = {\n   true,\t\t\t\t\t\t/* slow_unaligned_access */\n };\n \n+/* Costs to use when optimizing for Sifive 7 Series.  */\n+static const struct riscv_tune_info sifive_7_tune_info = {\n+  {COSTS_N_INSNS (4), COSTS_N_INSNS (5)},\t/* fp_add */\n+  {COSTS_N_INSNS (4), COSTS_N_INSNS (5)},\t/* fp_mul */\n+  {COSTS_N_INSNS (20), COSTS_N_INSNS (20)},\t/* fp_div */\n+  {COSTS_N_INSNS (4), COSTS_N_INSNS (4)},\t/* int_mul */\n+  {COSTS_N_INSNS (6), COSTS_N_INSNS (6)},\t/* int_div */\n+  2,\t\t\t\t\t\t/* issue_rate */\n+  4,\t\t\t\t\t\t/* branch_cost */\n+  3,\t\t\t\t\t\t/* memory_cost */\n+  true,\t\t\t\t\t\t/* slow_unaligned_access */\n+};\n+\n /* Costs to use when optimizing for size.  */\n static const struct riscv_tune_info optimize_size_tune_info = {\n   {COSTS_N_INSNS (1), COSTS_N_INSNS (1)},\t/* fp_add */\n@@ -316,8 +335,11 @@ static const struct attribute_spec riscv_attribute_table[] =\n \n /* A table describing all the processors GCC knows about.  */\n static const struct riscv_cpu_info riscv_cpu_info_table[] = {\n-  { \"rocket\", &rocket_tune_info },\n-  { \"size\", &optimize_size_tune_info },\n+  { \"rocket\", generic, &rocket_tune_info },\n+  { \"sifive-3-series\", generic, &rocket_tune_info },\n+  { \"sifive-5-series\", generic, &rocket_tune_info },\n+  { \"sifive-7-series\", sifive_7, &sifive_7_tune_info },\n+  { \"size\", generic, &optimize_size_tune_info },\n };\n \n /* Return the riscv_cpu_info entry for the given name string.  */\n@@ -4094,6 +4116,93 @@ riscv_can_use_return_insn (void)\n \t  && ! cfun->machine->interrupt_handler_p);\n }\n \n+/* Given that there exists at least one variable that is set (produced)\n+   by OUT_INSN and read (consumed) by IN_INSN, return true iff\n+   IN_INSN represents one or more memory store operations and none of\n+   the variables set by OUT_INSN is used by IN_INSN as the address of a\n+   store operation.  If either IN_INSN or OUT_INSN does not represent\n+   a \"single\" RTL SET expression (as loosely defined by the\n+   implementation of the single_set function) or a PARALLEL with only\n+   SETs, CLOBBERs, and USEs inside, this function returns false.\n+\n+   Borrowed from rs6000, riscv_store_data_bypass_p checks for certain\n+   conditions that result in assertion failures in the generic\n+   store_data_bypass_p function and returns FALSE in such cases.\n+\n+   This is required to make -msave-restore work with the sifive-7\n+   pipeline description.  */\n+\n+bool\n+riscv_store_data_bypass_p (rtx_insn *out_insn, rtx_insn *in_insn)\n+{\n+  rtx out_set, in_set;\n+  rtx out_pat, in_pat;\n+  rtx out_exp, in_exp;\n+  int i, j;\n+\n+  in_set = single_set (in_insn);\n+  if (in_set)\n+    {\n+      if (MEM_P (SET_DEST (in_set)))\n+\t{\n+\t  out_set = single_set (out_insn);\n+\t  if (!out_set)\n+\t    {\n+\t      out_pat = PATTERN (out_insn);\n+\t      if (GET_CODE (out_pat) == PARALLEL)\n+\t\t{\n+\t\t  for (i = 0; i < XVECLEN (out_pat, 0); i++)\n+\t\t    {\n+\t\t      out_exp = XVECEXP (out_pat, 0, i);\n+\t\t      if ((GET_CODE (out_exp) == CLOBBER)\n+\t\t\t  || (GET_CODE (out_exp) == USE))\n+\t\t\tcontinue;\n+\t\t      else if (GET_CODE (out_exp) != SET)\n+\t\t\treturn false;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+  else\n+    {\n+      in_pat = PATTERN (in_insn);\n+      if (GET_CODE (in_pat) != PARALLEL)\n+\treturn false;\n+\n+      for (i = 0; i < XVECLEN (in_pat, 0); i++)\n+\t{\n+\t  in_exp = XVECEXP (in_pat, 0, i);\n+\t  if ((GET_CODE (in_exp) == CLOBBER) || (GET_CODE (in_exp) == USE))\n+\t    continue;\n+\t  else if (GET_CODE (in_exp) != SET)\n+\t    return false;\n+\n+\t  if (MEM_P (SET_DEST (in_exp)))\n+\t    {\n+\t      out_set = single_set (out_insn);\n+\t      if (!out_set)\n+\t\t{\n+\t\t  out_pat = PATTERN (out_insn);\n+\t\t  if (GET_CODE (out_pat) != PARALLEL)\n+\t\t    return false;\n+\t\t  for (j = 0; j < XVECLEN (out_pat, 0); j++)\n+\t\t    {\n+\t\t      out_exp = XVECEXP (out_pat, 0, j);\n+\t\t      if ((GET_CODE (out_exp) == CLOBBER)\n+\t\t\t  || (GET_CODE (out_exp) == USE))\n+\t\t\tcontinue;\n+\t\t      else if (GET_CODE (out_exp) != SET)\n+\t\t\treturn false;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+  return store_data_bypass_p (out_insn, in_insn);\n+}\n+\n /* Implement TARGET_SECONDARY_MEMORY_NEEDED.\n \n    When floating-point registers are wider than integer ones, moves between\n@@ -4358,6 +4467,7 @@ riscv_option_override (void)\n   /* Handle -mtune.  */\n   cpu = riscv_parse_cpu (riscv_tune_string ? riscv_tune_string :\n \t\t\t RISCV_TUNE_STRING_DEFAULT);\n+  riscv_microarchitecture = cpu->microarchitecture;\n   tune_info = optimize_size ? &optimize_size_tune_info : cpu->tune_info;\n \n   /* Use -mtune's setting for slow_unaligned_access, even when optimizing"}, {"sha": "e3799a5bdd8b6efed7ab457ac5ef9ed6fa35b393", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88108b27dda964afc145e9e5d176a481d1aee707/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88108b27dda964afc145e9e5d176a481d1aee707/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=88108b27dda964afc145e9e5d176a481d1aee707", "patch": "@@ -156,7 +156,7 @@\n (define_attr \"type\"\n   \"unknown,branch,jump,call,load,fpload,store,fpstore,\n    mtc,mfc,const,arith,logical,shift,slt,imul,idiv,move,fmove,fadd,fmul,\n-   fmadd,fdiv,fcmp,fcvt,fsqrt,multi,nop,ghost\"\n+   fmadd,fdiv,fcmp,fcvt,fsqrt,multi,auipc,nop,ghost\"\n   (cond [(eq_attr \"got\" \"load\") (const_string \"load\")\n \n \t ;; If a doubleword move uses these expensive instructions,\n@@ -235,6 +235,12 @@\n ;; Is copying of this instruction disallowed?\n (define_attr \"cannot_copy\" \"no,yes\" (const_string \"no\"))\n \n+;; Microarchitectures we know how to tune for.\n+;; Keep this in sync with enum riscv_microarchitecture.\n+(define_attr \"tune\"\n+  \"generic,sifive_7\"\n+  (const (symbol_ref \"((enum attr_tune) riscv_microarchitecture)\")))\n+\n ;; Describe a user's asm statement.\n (define_asm_attributes\n   [(set_attr \"type\" \"multi\")])\n@@ -1247,7 +1253,7 @@\n \t    UNSPEC_AUIPC))]\n   \"\"\n   \".LA%2: auipc\\t%0,%h1\"\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"type\" \"auipc\")\n    (set_attr \"cannot_copy\" \"yes\")])\n \n ;; Instructions for adding the low 12 bits of an address to a register.\n@@ -2422,7 +2428,25 @@\n   [(set_attr \"length\" \"0\")]\n )\n \n+;; This fixes a failure with gcc.c-torture/execute/pr64242.c at -O2 for a\n+;; 32-bit target when using -mtune=sifive-7-series.  The first sched pass\n+;; runs before register elimination, and we have a non-obvious dependency\n+;; between a use of the soft fp and a set of the hard fp.  We fix this by\n+;; emitting a clobber using the hard fp between the two insns.\n+(define_expand \"restore_stack_nonlocal\"\n+  [(match_operand 0 \"register_operand\")\n+   (match_operand 1 \"memory_operand\")]\n+  \"\"\n+{\n+  emit_move_insn (operands[0], operands[1]);\n+  /* Prevent the following hard fp restore from being moved before the move\n+     insn above which uses a copy of the soft fp reg.  */\n+  emit_clobber (gen_rtx_MEM (BLKmode, hard_frame_pointer_rtx));\n+  DONE;\n+})\n+\n (include \"sync.md\")\n (include \"peephole.md\")\n (include \"pic.md\")\n (include \"generic.md\")\n+(include \"sifive-7.md\")"}, {"sha": "d58e01f8936d12e6f10ffc0ae000fca13eb21a39", "filename": "gcc/config/riscv/sifive-7.md", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88108b27dda964afc145e9e5d176a481d1aee707/gcc%2Fconfig%2Friscv%2Fsifive-7.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88108b27dda964afc145e9e5d176a481d1aee707/gcc%2Fconfig%2Friscv%2Fsifive-7.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fsifive-7.md?ref=88108b27dda964afc145e9e5d176a481d1aee707", "patch": "@@ -0,0 +1,120 @@\n+(define_automaton \"sifive_7\")\n+\n+;; Sifive 7 Series Base Core\n+;; This has two pipelines, A (Address) and B (Branch).\n+;; Loads, stores, and FP <-> integer moves use the A-pipe.\n+;; Branches, MUL/DIV, and FP ops use the B-pipe.\n+;; Integer ALU ops can use either pipe.\n+\n+(define_cpu_unit \"sifive_7_A\" \"sifive_7\")\n+(define_cpu_unit \"sifive_7_B\" \"sifive_7\")\n+\n+(define_cpu_unit \"sifive_7_idiv\" \"sifive_7\")\n+(define_cpu_unit \"sifive_7_fpu\" \"sifive_7\")\n+\n+(define_insn_reservation \"sifive_7_load\" 3\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (eq_attr \"type\" \"load\"))\n+  \"sifive_7_A\")\n+\n+(define_insn_reservation \"sifive_7_fpload\" 2\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (eq_attr \"type\" \"fpload\"))\n+  \"sifive_7_A\")\n+\n+(define_insn_reservation \"sifive_7_store\" 1\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (eq_attr \"type\" \"store\"))\n+  \"sifive_7_A\")\n+\n+(define_insn_reservation \"sifive_7_fpstore\" 1\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (eq_attr \"type\" \"fpstore\"))\n+  \"sifive_7_A\")\n+\n+(define_insn_reservation \"sifive_7_branch\" 1\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (eq_attr \"type\" \"branch\"))\n+  \"sifive_7_B\")\n+\n+(define_insn_reservation \"sifive_7_jump\" 1\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (eq_attr \"type\" \"jump,call\"))\n+  \"sifive_7_B\")\n+\n+(define_insn_reservation \"sifive_7_mul\" 3\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (eq_attr \"type\" \"imul\"))\n+  \"sifive_7_B\")\n+\n+(define_insn_reservation \"sifive_7_div\" 16\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (eq_attr \"type\" \"idiv\"))\n+  \"sifive_7_B,sifive_7_idiv*15\")\n+\n+(define_insn_reservation \"sifive_7_alu\" 2\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (eq_attr \"type\" \"unknown,arith,shift,slt,multi,logical,move\"))\n+  \"sifive_7_A|sifive_7_B\")\n+\n+(define_insn_reservation \"sifive_7_load_immediate\" 1\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (eq_attr \"type\" \"nop,const,auipc\"))\n+  \"sifive_7_A|sifive_7_B\")\n+\n+(define_insn_reservation \"sifive_7_sfma\" 5\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (and (eq_attr \"type\" \"fadd,fmul,fmadd\")\n+\t    (eq_attr \"mode\" \"SF\")))\n+  \"sifive_7_B\")\n+\n+(define_insn_reservation \"sifive_7_dfma\" 7\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (and (eq_attr \"type\" \"fadd,fmul,fmadd\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"sifive_7_B\")\n+\n+(define_insn_reservation \"sifive_7_fp_other\" 3\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (eq_attr \"type\" \"fcvt,fcmp,fmove\"))\n+  \"sifive_7_B\")\n+\n+(define_insn_reservation \"sifive_7_fdiv_s\" 27\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (eq_attr \"type\" \"fdiv,fsqrt\")\n+       (eq_attr \"mode\" \"SF\"))\n+  \"sifive_7_B,sifive_7_fpu*26\")\n+\n+(define_insn_reservation \"sifive_7_fdiv_d\" 56\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (eq_attr \"type\" \"fdiv,fsqrt\")\n+       (eq_attr \"mode\" \"DF\"))\n+  \"sifive_7_B,sifive_7_fpu*55\")\n+\n+(define_insn_reservation \"sifive_7_i2f\" 3\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (eq_attr \"type\" \"mtc\"))\n+  \"sifive_7_A\")\n+\n+(define_insn_reservation \"sifive_7_f2i\" 3\n+  (and (eq_attr \"tune\" \"sifive_7\")\n+       (eq_attr \"type\" \"mfc\"))\n+  \"sifive_7_A\")\n+\n+(define_bypass 1 \"sifive_7_load,sifive_7_alu,sifive_7_mul,sifive_7_f2i\"\n+  \"sifive_7_alu,sifive_7_branch\")\n+\n+(define_bypass 1 \"sifive_7_load,sifive_7_alu,sifive_7_mul,sifive_7_f2i\"\n+  \"sifive_7_store\" \"riscv_store_data_bypass_p\")\n+\n+(define_bypass 2 \"sifive_7_i2f\"\n+  \"sifive_7_sfma,sifive_7_dfma,sifive_7_fp_other,sifive_7_fdiv_s,sifive_7_fdiv_d\")\n+\n+(define_bypass 2 \"sifive_7_fp_other\"\n+  \"sifive_7_sfma,sifive_7_dfma,sifive_7_fp_other,sifive_7_fdiv_s,sifive_7_fdiv_d\")\n+\n+(define_bypass 2 \"sifive_7_fp_other\"\n+  \"sifive_7_alu,sifive_7_branch\")\n+\n+(define_bypass 2 \"sifive_7_fp_other\"\n+  \"sifive_7_store\" \"riscv_store_data_bypass_p\")"}, {"sha": "1787967d753291c4df0839d380bf2f4fa594778e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88108b27dda964afc145e9e5d176a481d1aee707/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88108b27dda964afc145e9e5d176a481d1aee707/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=88108b27dda964afc145e9e5d176a481d1aee707", "patch": "@@ -23779,7 +23779,16 @@ lower-case.  Examples include @samp{rv64i}, @samp{rv32g}, @samp{rv32e}, and\n @item -mtune=@var{processor-string}\n @opindex mtune\n Optimize the output for the given processor, specified by microarchitecture\n-name.\n+name.  Permissible values for this option are: @samp{rocket},\n+@samp{sifive-3-series}, @samp{sifive-5-series}, @samp{sifive-7-series},\n+and @samp{size}.\n+\n+When @option{-mtune=} is not specified, the default is @samp{rocket}.\n+\n+The @samp{size} choice is not intended for use by end-users.  This is used\n+when @option{-Os} is specified.  It overrides the instruction cost info\n+provided by @option{-mtune=}, but does not override the pipeline info.  This\n+helps reduce code size while still giving good performance.\n \n @item -mpreferred-stack-boundary=@var{num}\n @opindex mpreferred-stack-boundary"}]}