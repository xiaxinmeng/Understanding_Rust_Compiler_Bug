{"sha": "491f54a74b896005f70bdba66df495d91822b325", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkxZjU0YTc0Yjg5NjAwNWY3MGJkYmE2NmRmNDk1ZDkxODIyYjMyNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-06-13T07:50:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-06-13T07:50:24Z"}, "message": "ada-tree.h (DECL_BY_DOUBLE_REF_P): Delete.\n\n\t* gcc-interface/ada-tree.h (DECL_BY_DOUBLE_REF_P): Delete.\n\t* gcc-interface/gigi.h (annotate_object): Adjust prototype.\n\t(convert_vms_descriptor): Likewise.\n\t* gcc-interface/decl.c (gnat_to_gnu_param): Do not pass fat pointer\n\ttypes by double dereference.\n\t(annotate_object): Remove BY_DOUBLE_REF parameter and adjust.\n\t(gnat_to_gnu_entity): Adjust calls to annotate_object.\n\t* gcc-interface/trans.c (Identifier_to_gnu): Do not deal with double\n\tdereference.\n\t(Call_to_gnu): Likewise.\n\t(build_function_stub): Adjust call to convert_vms_descriptor.\n\t(Subprogram_Body_to_gnu): Adjust call to annotate_object.\n\t* gcc-interface/utils.c (convert_vms_descriptor): Remove BY_REF\n\tparameter and adjust.\n\nFrom-SVN: r200057", "tree": {"sha": "2e9792b4327a5fe551145fb960cda679705fb362", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e9792b4327a5fe551145fb960cda679705fb362"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/491f54a74b896005f70bdba66df495d91822b325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/491f54a74b896005f70bdba66df495d91822b325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/491f54a74b896005f70bdba66df495d91822b325", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/491f54a74b896005f70bdba66df495d91822b325/comments", "author": null, "committer": null, "parents": [{"sha": "50751417db279b04c04a860b9476c215bd2a1a0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50751417db279b04c04a860b9476c215bd2a1a0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50751417db279b04c04a860b9476c215bd2a1a0a"}], "stats": {"total": 114, "additions": 36, "deletions": 78}, "files": [{"sha": "4122896c915ad87b8fc6fb1da550a7bf33e78e61", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491f54a74b896005f70bdba66df495d91822b325/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491f54a74b896005f70bdba66df495d91822b325/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=491f54a74b896005f70bdba66df495d91822b325", "patch": "@@ -1,3 +1,20 @@\n+2013-06-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h (DECL_BY_DOUBLE_REF_P): Delete.\n+\t* gcc-interface/gigi.h (annotate_object): Adjust prototype.\n+\t(convert_vms_descriptor): Likewise.\n+\t* gcc-interface/decl.c (gnat_to_gnu_param): Do not pass fat pointer\n+\ttypes by double dereference.\n+\t(annotate_object): Remove BY_DOUBLE_REF parameter and adjust.\n+\t(gnat_to_gnu_entity): Adjust calls to annotate_object.\n+\t* gcc-interface/trans.c (Identifier_to_gnu): Do not deal with double\n+\tdereference.\n+\t(Call_to_gnu): Likewise.\n+\t(build_function_stub): Adjust call to convert_vms_descriptor.\n+\t(Subprogram_Body_to_gnu): Adjust call to annotate_object.\n+\t* gcc-interface/utils.c (convert_vms_descriptor): Remove BY_REF\n+\tparameter and adjust.\n+\n 2013-05-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/Makefile.in (arm% androideabi): Robustify."}, {"sha": "c1b45effcdb34dcc3362bc10fecbaee67fd01533", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491f54a74b896005f70bdba66df495d91822b325/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491f54a74b896005f70bdba66df495d91822b325/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=491f54a74b896005f70bdba66df495d91822b325", "patch": "@@ -360,10 +360,6 @@ do {\t\t\t\t\t\t   \\\n    constant CONSTRUCTOR.  */\n #define DECL_CONST_ADDRESS_P(NODE) DECL_LANG_FLAG_0 (CONST_DECL_CHECK (NODE))\n \n-/* Nonzero in a PARM_DECL if it is always used by double reference, i.e. a\n-   pair of INDIRECT_REFs is needed to access the object.  */\n-#define DECL_BY_DOUBLE_REF_P(NODE) DECL_LANG_FLAG_0 (PARM_DECL_CHECK (NODE))\n-\n /* Nonzero in a FIELD_DECL if it is declared as aliased.  */\n #define DECL_ALIASED_P(NODE) DECL_LANG_FLAG_0 (FIELD_DECL_CHECK (NODE))\n "}, {"sha": "f632a3164e770d684c0ff3dd47ec83d16aeafd0a", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491f54a74b896005f70bdba66df495d91822b325/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491f54a74b896005f70bdba66df495d91822b325/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=491f54a74b896005f70bdba66df495d91822b325", "patch": "@@ -1025,7 +1025,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\tsave_gnu_tree (gnat_entity, gnu_decl, true);\n \t\t\tsaved = true;\n \t\t\tannotate_object (gnat_entity, gnu_type, NULL_TREE,\n-\t\t\t\t\t false, false);\n+\t\t\t\t\t false);\n \t\t\t/* This assertion will fail if the renamed object\n \t\t\t   isn't aligned enough as to make it possible to\n \t\t\t   honor the alignment set on the renaming.  */\n@@ -1604,7 +1604,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   type of the object and not on the object directly, and makes it\n \t   possible to support all confirming representation clauses.  */\n \tannotate_object (gnat_entity, TREE_TYPE (gnu_decl), gnu_object_size,\n-\t\t\t used_by_ref, false);\n+\t\t\t used_by_ref);\n       }\n       break;\n \n@@ -5650,7 +5650,7 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n   /* The parameter can be indirectly modified if its address is taken.  */\n   bool ro_param = in_param && !Address_Taken (gnat_param);\n   bool by_return = false, by_component_ptr = false;\n-  bool by_ref = false, by_double_ref = false;\n+  bool by_ref = false;\n   tree gnu_param;\n \n   /* Copy-return is used only for the first parameter of a valued procedure.\n@@ -5775,19 +5775,6 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n \tgnu_param_type\n \t  = build_qualified_type (gnu_param_type, TYPE_QUAL_RESTRICT);\n       by_ref = true;\n-\n-      /* In some ABIs, e.g. SPARC 32-bit, fat pointer types are themselves\n-\t passed by reference.  Pass them by explicit reference, this will\n-\t generate more debuggable code at -O0.  */\n-      if (TYPE_IS_FAT_POINTER_P (gnu_param_type)\n-\t  && targetm.calls.pass_by_reference (pack_cumulative_args (NULL),\n-\t\t\t\t\t      TYPE_MODE (gnu_param_type),\n-\t\t\t\t\t      gnu_param_type,\n-\t\t\t\t\t      true))\n-\t{\n-\t   gnu_param_type = build_reference_type (gnu_param_type);\n-\t   by_double_ref = true;\n-\t}\n     }\n \n   /* Pass In Out or Out parameters using copy-in copy-out mechanism.  */\n@@ -5830,7 +5817,6 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n   gnu_param = create_param_decl (gnu_param_name, gnu_param_type,\n \t\t\t\t ro_param || by_ref || by_component_ptr);\n   DECL_BY_REF_P (gnu_param) = by_ref;\n-  DECL_BY_DOUBLE_REF_P (gnu_param) = by_double_ref;\n   DECL_BY_COMPONENT_PTR_P (gnu_param) = by_component_ptr;\n   DECL_BY_DESCRIPTOR_P (gnu_param) = (mech == By_Descriptor ||\n                                       mech == By_Short_Descriptor);\n@@ -7554,18 +7540,13 @@ annotate_value (tree gnu_size)\n /* Given GNAT_ENTITY, an object (constant, variable, parameter, exception)\n    and GNU_TYPE, its corresponding GCC type, set Esize and Alignment to the\n    size and alignment used by Gigi.  Prefer SIZE over TYPE_SIZE if non-null.\n-   BY_REF is true if the object is used by reference and BY_DOUBLE_REF is\n-   true if the object is used by double reference.  */\n+   BY_REF is true if the object is used by reference.  */\n \n void\n-annotate_object (Entity_Id gnat_entity, tree gnu_type, tree size, bool by_ref,\n-\t\t bool by_double_ref)\n+annotate_object (Entity_Id gnat_entity, tree gnu_type, tree size, bool by_ref)\n {\n   if (by_ref)\n     {\n-      if (by_double_ref)\n-\tgnu_type = TREE_TYPE (gnu_type);\n-\n       if (TYPE_IS_FAT_POINTER_P (gnu_type))\n \tgnu_type = TYPE_UNCONSTRAINED_ARRAY (gnu_type);\n       else"}, {"sha": "8ee666059a92d1f13e85e3ffe5b365604f5e1afc", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491f54a74b896005f70bdba66df495d91822b325/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491f54a74b896005f70bdba66df495d91822b325/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=491f54a74b896005f70bdba66df495d91822b325", "patch": "@@ -178,10 +178,9 @@ extern tree choices_to_gnu (tree operand, Node_Id choices);\n /* Given GNAT_ENTITY, an object (constant, variable, parameter, exception)\n    and GNU_TYPE, its corresponding GCC type, set Esize and Alignment to the\n    size and alignment used by Gigi.  Prefer SIZE over TYPE_SIZE if non-null.\n-   BY_REF is true if the object is used by reference and BY_DOUBLE_REF is\n-   true if the object is used by double reference.  */\n+   BY_REF is true if the object is used by reference.  */\n extern void annotate_object (Entity_Id gnat_entity, tree gnu_type, tree size,\n-\t\t\t     bool by_ref, bool by_double_ref);\n+\t\t\t     bool by_ref);\n \n /* Return the variant part of RECORD_TYPE, if any.  Otherwise return NULL.  */\n extern tree get_variant_part (tree record_type);\n@@ -953,11 +952,10 @@ extern tree fill_vms_descriptor (tree gnu_type, tree gnu_expr,\n \n /* Convert GNU_EXPR, a pointer to a VMS descriptor, to GNU_TYPE, a regular\n    pointer or fat pointer type.  GNU_EXPR_ALT_TYPE is the alternate (32-bit)\n-   pointer type of GNU_EXPR.  BY_REF is true if the result is to be used by\n-   reference.  GNAT_SUBPROG is the subprogram to which the VMS descriptor is\n-   passed.  */\n+   pointer type of GNU_EXPR.  GNAT_SUBPROG is the subprogram to which the\n+   descriptor is passed.  */\n extern tree convert_vms_descriptor (tree gnu_type, tree gnu_expr,\n-\t\t\t\t    tree gnu_expr_alt_type, bool by_ref,\n+\t\t\t\t    tree gnu_expr_alt_type,\n \t\t\t\t    Entity_Id gnat_subprog);\n \n /* Indicate that we need to take the address of T and that it therefore"}, {"sha": "4b224abb398356c48fe3647fcd31dc2fcbf89e93", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491f54a74b896005f70bdba66df495d91822b325/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491f54a74b896005f70bdba66df495d91822b325/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=491f54a74b896005f70bdba66df495d91822b325", "patch": "@@ -1082,19 +1082,6 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n     {\n       const bool read_only = DECL_POINTS_TO_READONLY_P (gnu_result);\n \n-      /* First do the first dereference if needed.  */\n-      if (TREE_CODE (gnu_result) == PARM_DECL\n-\t  && DECL_BY_DOUBLE_REF_P (gnu_result))\n-\t{\n-\t  gnu_result = build_unary_op (INDIRECT_REF, NULL_TREE, gnu_result);\n-\t  if (TREE_CODE (gnu_result) == INDIRECT_REF)\n-\t    TREE_THIS_NOTRAP (gnu_result) = 1;\n-\n-\t  /* The first reference, in case of a double reference, always points\n-\t     to read-only, see gnat_to_gnu_param for the rationale.  */\n-\t  TREE_READONLY (gnu_result) = 1;\n-\t}\n-\n       /* If it's a PARM_DECL to foreign convention subprogram, convert it.  */\n       if (TREE_CODE (gnu_result) == PARM_DECL\n \t  && DECL_BY_COMPONENT_PTR_P (gnu_result))\n@@ -3375,7 +3362,6 @@ build_function_stub (tree gnu_subprog, Entity_Id gnat_subprog)\n \t    = convert_vms_descriptor (TREE_TYPE (gnu_subprog_param),\n \t\t\t\t      gnu_stub_param,\n \t\t\t\t      DECL_PARM_ALT_TYPE (gnu_stub_param),\n-\t\t\t\t      DECL_BY_DOUBLE_REF_P (gnu_subprog_param),\n \t\t\t\t      gnat_subprog);\n \t}\n       else\n@@ -3670,8 +3656,7 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n       bool is_var_decl = (TREE_CODE (gnu_param) == VAR_DECL);\n \n       annotate_object (gnat_param, TREE_TYPE (gnu_param), NULL_TREE,\n-\t\t       DECL_BY_REF_P (gnu_param),\n-\t\t       !is_var_decl && DECL_BY_DOUBLE_REF_P (gnu_param));\n+\t\t       DECL_BY_REF_P (gnu_param));\n \n       if (is_var_decl)\n \tsave_gnu_tree (gnat_param, NULL_TREE, false);\n@@ -4133,12 +4118,6 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t  /* The symmetry of the paths to the type of an entity is broken here\n \t     since arguments don't know that they will be passed by ref.  */\n \t  gnu_formal_type = TREE_TYPE (gnu_formal);\n-\n-\t  if (DECL_BY_DOUBLE_REF_P (gnu_formal))\n-\t    gnu_actual\n-\t      = build_unary_op (ADDR_EXPR, TREE_TYPE (gnu_formal_type),\n-\t\t\t\tgnu_actual);\n-\n \t  gnu_actual = build_unary_op (ADDR_EXPR, gnu_formal_type, gnu_actual);\n \t}\n       else if (is_true_formal_parm && DECL_BY_COMPONENT_PTR_P (gnu_formal))"}, {"sha": "409c0dee94fafbfb70d2246e02518419501829ce", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491f54a74b896005f70bdba66df495d91822b325/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491f54a74b896005f70bdba66df495d91822b325/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=491f54a74b896005f70bdba66df495d91822b325", "patch": "@@ -4096,33 +4096,25 @@ convert_vms_descriptor32 (tree gnu_type, tree gnu_expr, Entity_Id gnat_subprog)\n \n /* Convert GNU_EXPR, a pointer to a VMS descriptor, to GNU_TYPE, a regular\n    pointer or fat pointer type.  GNU_EXPR_ALT_TYPE is the alternate (32-bit)\n-   pointer type of GNU_EXPR.  BY_REF is true if the result is to be used by\n-   reference.  GNAT_SUBPROG is the subprogram to which the VMS descriptor is\n-   passed.  */\n+   pointer type of GNU_EXPR.  GNAT_SUBPROG is the subprogram to which the\n+   descriptor is passed.  */\n \n tree\n convert_vms_descriptor (tree gnu_type, tree gnu_expr, tree gnu_expr_alt_type,\n-\t\t\tbool by_ref, Entity_Id gnat_subprog)\n+\t\t\tEntity_Id gnat_subprog)\n {\n   tree desc_type = TREE_TYPE (TREE_TYPE (gnu_expr));\n   tree desc = build1 (INDIRECT_REF, desc_type, gnu_expr);\n   tree mbo = TYPE_FIELDS (desc_type);\n   const char *mbostr = IDENTIFIER_POINTER (DECL_NAME (mbo));\n   tree mbmo = DECL_CHAIN (DECL_CHAIN (DECL_CHAIN (mbo)));\n-  tree real_type, is64bit, gnu_expr32, gnu_expr64;\n-\n-  if (by_ref)\n-    real_type = TREE_TYPE (gnu_type);\n-  else\n-    real_type = gnu_type;\n+  tree is64bit, gnu_expr32, gnu_expr64;\n \n   /* If the field name is not MBO, it must be 32-bit and no alternate.\n      Otherwise primary must be 64-bit and alternate 32-bit.  */\n   if (strcmp (mbostr, \"MBO\") != 0)\n     {\n-      tree ret = convert_vms_descriptor32 (real_type, gnu_expr, gnat_subprog);\n-      if (by_ref)\n-\tret = build_unary_op (ADDR_EXPR, gnu_type, ret);\n+      tree ret = convert_vms_descriptor32 (gnu_type, gnu_expr, gnat_subprog);\n       return ret;\n     }\n \n@@ -4139,14 +4131,9 @@ convert_vms_descriptor (tree gnu_type, tree gnu_expr, tree gnu_expr_alt_type,\n \t\t\t\t\tinteger_minus_one_node));\n \n   /* Build the 2 possible end results.  */\n-  gnu_expr64 = convert_vms_descriptor64 (real_type, gnu_expr, gnat_subprog);\n-  if (by_ref)\n-    gnu_expr64 =  build_unary_op (ADDR_EXPR, gnu_type, gnu_expr64);\n+  gnu_expr64 = convert_vms_descriptor64 (gnu_type, gnu_expr, gnat_subprog);\n   gnu_expr = fold_convert (gnu_expr_alt_type, gnu_expr);\n-  gnu_expr32 = convert_vms_descriptor32 (real_type, gnu_expr, gnat_subprog);\n-  if (by_ref)\n-    gnu_expr32 =  build_unary_op (ADDR_EXPR, gnu_type, gnu_expr32);\n-\n+  gnu_expr32 = convert_vms_descriptor32 (gnu_type, gnu_expr, gnat_subprog);\n   return build3 (COND_EXPR, gnu_type, is64bit, gnu_expr64, gnu_expr32);\n }\n \f"}, {"sha": "17c934a0ab108690179824e589b462d346fcc825", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491f54a74b896005f70bdba66df495d91822b325/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491f54a74b896005f70bdba66df495d91822b325/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=491f54a74b896005f70bdba66df495d91822b325", "patch": "@@ -439,7 +439,7 @@ package Targparm is\n    --  the source program may not contain explicit 64-bit shifts. In addition,\n    --  the code generated for packed arrays will avoid the use of long shifts.\n \n-   Support_Nondefault_SSO_On_Target : Boolean := False;\n+   Support_Nondefault_SSO_On_Target : Boolean := True;\n    --  If True, the back end supports the non-default Scalar_Storage_Order\n    --  (i.e. allows non-confirming Scalar_Storage_Order attribute definition\n    --  clauses)."}]}