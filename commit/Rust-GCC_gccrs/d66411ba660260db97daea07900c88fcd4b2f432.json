{"sha": "d66411ba660260db97daea07900c88fcd4b2f432", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY2NDExYmE2NjAyNjBkYjk3ZGFlYTA3OTAwYzg4ZmNkNGIyZjQzMg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "francois.cppdevs@free.fr", "date": "2010-11-27T12:51:58Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2010-11-27T12:51:58Z"}, "message": "2010-11-27  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n\n        * include/debug/unordered_map, unordered_set (unordered_map<>::insert,\n        unordered_multimap<>::insert, unordered_set<>::insert, \n        unordered_multiset<>::insert) Debug check iterator hint and pass it to\n        normal implementation.\n\nFrom-SVN: r167198", "tree": {"sha": "3fa5d5b71b6a015b727c164df2e6d309705feb18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fa5d5b71b6a015b727c164df2e6d309705feb18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d66411ba660260db97daea07900c88fcd4b2f432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66411ba660260db97daea07900c88fcd4b2f432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d66411ba660260db97daea07900c88fcd4b2f432", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66411ba660260db97daea07900c88fcd4b2f432/comments", "author": null, "committer": null, "parents": [{"sha": "2dd24dbdfeed75a433307948e6083c78d7181f53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd24dbdfeed75a433307948e6083c78d7181f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dd24dbdfeed75a433307948e6083c78d7181f53"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "2e5663d4ce04340d5d1fe1f5f1e8492cd26b3df3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66411ba660260db97daea07900c88fcd4b2f432/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66411ba660260db97daea07900c88fcd4b2f432/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d66411ba660260db97daea07900c88fcd4b2f432", "patch": "@@ -1,3 +1,10 @@\n+2010-11-27  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n+\n+\t* include/debug/unordered_map, unordered_set (unordered_map<>::insert,\n+\tunordered_multimap<>::insert, unordered_set<>::insert,\n+\tunordered_multiset<>::insert) Debug check iterator hint and pass it to\n+\tnormal implementation.\n+\n 2010-11-27  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n \n \t* include/debug/bitset (bitset<>::reference): Clean code, use normal"}, {"sha": "d7b139388b0b72cacef882ef8e4cd3d1e42b3a86", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66411ba660260db97daea07900c88fcd4b2f432/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66411ba660260db97daea07900c88fcd4b2f432/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=d66411ba660260db97daea07900c88fcd4b2f432", "patch": "@@ -185,9 +185,10 @@ namespace __debug\n       }\n \n       iterator\n-      insert(const_iterator, const value_type& __obj)\n+      insert(const_iterator __hint, const value_type& __obj)\n       {\n-\treturn iterator(_Base::insert(__obj).first, this);\n+\t__glibcxx_check_insert(__hint);\n+\treturn iterator(_Base::insert(__hint.base(), __obj), this);\n       }\n \n       template<typename _Pair, typename = typename\n@@ -205,9 +206,11 @@ namespace __debug\n \t       std::enable_if<std::is_convertible<_Pair,\n \t\t\t\t\t\t  value_type>::value>::type>\n         iterator\n-        insert(const_iterator, _Pair&& __obj)\n+        insert(const_iterator __hint, _Pair&& __obj)\n         {\n-\t  return iterator(_Base::insert(std::forward<_Pair>(__obj)).first,\n+\t  __glibcxx_check_insert(__hint);\n+\t  return iterator(_Base::insert(__hint.base(),\n+\t\t\t\t\tstd::forward<_Pair>(__obj)),\n \t\t\t  this);\n \t}\n \n@@ -467,8 +470,11 @@ namespace __debug\n       { return iterator(_Base::insert(__obj), this); }\n \n       iterator\n-      insert(const_iterator, const value_type& __obj)\n-      { return iterator(_Base::insert(__obj), this); }\n+      insert(const_iterator __hint, const value_type& __obj)\n+      {\n+\t__glibcxx_check_insert(__hint);\n+\treturn iterator(_Base::insert(__hint.base(), __obj), this);\n+      }\n \n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_convertible<_Pair,\n@@ -481,8 +487,13 @@ namespace __debug\n \t       std::enable_if<std::is_convertible<_Pair,\n \t\t\t\t\t\t  value_type>::value>::type>\n \titerator\n-\tinsert(const_iterator, _Pair&& __obj)\n-\t{ return iterator(_Base::insert(std::forward<_Pair>(__obj)), this); }\n+\tinsert(const_iterator __hint, _Pair&& __obj)\n+\t{\n+\t  __glibcxx_check_insert(__hint);\n+\t  return iterator(_Base::insert(__hint.base(),\n+\t\t\t\t\tstd::forward<_Pair>(__obj)),\n+\t\t\t  this);\n+\t}\n \n       void\n       insert(std::initializer_list<value_type> __l)"}, {"sha": "e39cfa8f9a10fee06a0f316b83ebb7ce63b83e1b", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66411ba660260db97daea07900c88fcd4b2f432/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66411ba660260db97daea07900c88fcd4b2f432/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=d66411ba660260db97daea07900c88fcd4b2f432", "patch": "@@ -186,11 +186,10 @@ namespace __debug\n       }\n \n       iterator\n-      insert(const_iterator, const value_type& __obj)\n+      insert(const_iterator __hint, const value_type& __obj)\n       {\n-\ttypedef std::pair<_Base_iterator, bool> __pair_type;\n-\t__pair_type __res = _Base::insert(__obj);\n-\treturn iterator(__res.first, this);\n+\t__glibcxx_check_insert(__hint);\n+\treturn iterator(_Base::insert(__hint.base(), __obj), this);\n       }\n \n       std::pair<iterator, bool>\n@@ -202,11 +201,10 @@ namespace __debug\n       }\n \n       iterator\n-      insert(const_iterator, value_type&& __obj)\n+      insert(const_iterator __hint, value_type&& __obj)\n       {\n-\ttypedef std::pair<typename _Base::iterator, bool> __pair_type;\n-\t__pair_type __res = _Base::insert(std::move(__obj));\n-\treturn iterator(__res.first, this);\n+\t__glibcxx_check_insert(__hint);\n+\treturn iterator(_Base::insert(__hint.base(), std::move(__obj)), this);\n       }\n \n       void\n@@ -461,16 +459,22 @@ namespace __debug\n       { return iterator(_Base::insert(__obj), this); }\n \n       iterator\n-      insert(const_iterator, const value_type& __obj)\n-      { return iterator(_Base::insert(__obj), this); }\n+      insert(const_iterator __hint, const value_type& __obj)\n+      {\n+\t__glibcxx_check_insert(__hint);\n+\treturn iterator(_Base::insert(__hint.base(), __obj), this);\n+      }\n \n       iterator\n       insert(value_type&& __obj)\n       { return iterator(_Base::insert(std::move(__obj)), this); }\n \n       iterator\n-      insert(const_iterator, value_type&& __obj)\n-      { return iterator(_Base::insert(std::move(__obj)), this); }\n+      insert(const_iterator __hint, value_type&& __obj)\n+      {\n+\t__glibcxx_check_insert(__hint);\n+\treturn iterator(_Base::insert(__hint.base(), std::move(__obj)), this);\n+      }\n \n       void\n       insert(std::initializer_list<value_type> __l)"}]}