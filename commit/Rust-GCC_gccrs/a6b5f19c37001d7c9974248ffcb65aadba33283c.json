{"sha": "a6b5f19c37001d7c9974248ffcb65aadba33283c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZiNWYxOWMzNzAwMWQ3Yzk5NzQyNDhmZmNiNjVhYWRiYTMzMjgzYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-12-19T20:43:04Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-14T23:51:44Z"}, "message": "analyzer: add function-set.cc/h\n\nThis patch adds a simple mechanism for tracking sets of functions\nfor which a particular property holds, as a pragmatic way to build\nknowledge about important APIs into the analyzer without requiring\nmarkup of the user's libc.\n\ngcc/ChangeLog:\n\t* Makefile.in (ANALYZER_OBJS): Add analyzer/function-set.o.\n\ngcc/analyzer/ChangeLog:\n\t* analyzer-selftests.cc (selftest::run_analyzer_selftests): Call\n\tselftest::analyzer_function_set_cc_tests.\n\t* analyzer-selftests.h (selftest::analyzer_function_set_cc_tests):\n\tNew decl.\n\t* function-set.cc: New file.\n\t* function-set.h: New file.", "tree": {"sha": "522a2e34cdbf13604d0dc0f2bd527d9239843797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/522a2e34cdbf13604d0dc0f2bd527d9239843797"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6b5f19c37001d7c9974248ffcb65aadba33283c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6b5f19c37001d7c9974248ffcb65aadba33283c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6b5f19c37001d7c9974248ffcb65aadba33283c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6b5f19c37001d7c9974248ffcb65aadba33283c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef7827b0bd7cd980da625fcd12e6c56f51a166c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7827b0bd7cd980da625fcd12e6c56f51a166c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef7827b0bd7cd980da625fcd12e6c56f51a166c2"}], "stats": {"total": 253, "additions": 253, "deletions": 0}, "files": [{"sha": "73170037f0d41f54f7b00946845689bb6f9b7bc7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b5f19c37001d7c9974248ffcb65aadba33283c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b5f19c37001d7c9974248ffcb65aadba33283c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6b5f19c37001d7c9974248ffcb65aadba33283c", "patch": "@@ -1,3 +1,7 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Makefile.in (ANALYZER_OBJS): Add analyzer/function-set.o.\n+\n 2020-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/93009"}, {"sha": "c86fc7f41dc9418ba98563b6ab865f8bc7f67432", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b5f19c37001d7c9974248ffcb65aadba33283c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b5f19c37001d7c9974248ffcb65aadba33283c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a6b5f19c37001d7c9974248ffcb65aadba33283c", "patch": "@@ -1226,6 +1226,7 @@ ANALYZER_OBJS = \\\n \tanalyzer/constraint-manager.o \\\n \tanalyzer/diagnostic-manager.o \\\n \tanalyzer/engine.o \\\n+\tanalyzer/function-set.o \\\n \tanalyzer/pending-diagnostic.o \\\n \tanalyzer/program-point.o \\\n \tanalyzer/program-state.o \\"}, {"sha": "93efb47bb7ce08cb07a24d7b53029d8711f73db6", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b5f19c37001d7c9974248ffcb65aadba33283c/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b5f19c37001d7c9974248ffcb65aadba33283c/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=a6b5f19c37001d7c9974248ffcb65aadba33283c", "patch": "@@ -1,3 +1,12 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer-selftests.cc (selftest::run_analyzer_selftests): Call\n+\tselftest::analyzer_function_set_cc_tests.\n+\t* analyzer-selftests.h (selftest::analyzer_function_set_cc_tests):\n+\tNew decl.\n+\t* function-set.cc: New file.\n+\t* function-set.h: New file.\n+\n 2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analyzer.h (fndecl_has_gimple_body_p): New decl."}, {"sha": "99b730a6be5d428609b458994b0b186a52913688", "filename": "gcc/analyzer/analyzer-selftests.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b5f19c37001d7c9974248ffcb65aadba33283c/gcc%2Fanalyzer%2Fanalyzer-selftests.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b5f19c37001d7c9974248ffcb65aadba33283c/gcc%2Fanalyzer%2Fanalyzer-selftests.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer-selftests.cc?ref=a6b5f19c37001d7c9974248ffcb65aadba33283c", "patch": "@@ -50,6 +50,7 @@ run_analyzer_selftests ()\n {\n #if ENABLE_ANALYZER\n   analyzer_constraint_manager_cc_tests ();\n+  analyzer_function_set_cc_tests ();\n   analyzer_program_point_cc_tests ();\n   analyzer_program_state_cc_tests ();\n   analyzer_region_model_cc_tests ();"}, {"sha": "61e3a024dff3296bc43eec92686b7c8d401f3e20", "filename": "gcc/analyzer/analyzer-selftests.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b5f19c37001d7c9974248ffcb65aadba33283c/gcc%2Fanalyzer%2Fanalyzer-selftests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b5f19c37001d7c9974248ffcb65aadba33283c/gcc%2Fanalyzer%2Fanalyzer-selftests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer-selftests.h?ref=a6b5f19c37001d7c9974248ffcb65aadba33283c", "patch": "@@ -33,6 +33,7 @@ extern void run_analyzer_selftests ();\n    alphabetical order.  */\n extern void analyzer_checker_script_cc_tests ();\n extern void analyzer_constraint_manager_cc_tests ();\n+extern void analyzer_function_set_cc_tests ();\n extern void analyzer_program_point_cc_tests ();\n extern void analyzer_program_state_cc_tests ();\n extern void analyzer_region_model_cc_tests ();"}, {"sha": "93ce473405fb03ffd6bb906f84ba022275b1c58c", "filename": "gcc/analyzer/function-set.cc", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b5f19c37001d7c9974248ffcb65aadba33283c/gcc%2Fanalyzer%2Ffunction-set.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b5f19c37001d7c9974248ffcb65aadba33283c/gcc%2Fanalyzer%2Ffunction-set.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Ffunction-set.cc?ref=a6b5f19c37001d7c9974248ffcb65aadba33283c", "patch": "@@ -0,0 +1,191 @@\n+/* Sets of function names.\n+   Copyright (C) 2019-2020 Free Software Foundation, Inc.\n+   Contributed by David Malcolm <dmalcolm@redhat.com>.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tree.h\"\n+#include \"selftest.h\"\n+#include \"analyzer/function-set.h\"\n+\n+#if ENABLE_ANALYZER\n+\n+/* Return true if NAME is within this set.  */\n+\n+bool\n+function_set::contains_name_p (const char *name) const\n+{\n+  /* Binary search.  */\n+  int min = 0;\n+  int max = m_count - 1;\n+  while (true)\n+    {\n+      if (min > max)\n+\treturn false;\n+      int midpoint = (min + max) / 2;\n+      gcc_assert ((size_t)midpoint < m_count);\n+      int cmp = strcmp (name, m_names[midpoint]);\n+      if (cmp == 0)\n+\treturn true;\n+      else if (cmp < 0)\n+\tmax = midpoint - 1;\n+      else\n+\tmin = midpoint + 1;\n+    }\n+}\n+\n+/* Return true if FNDECL is within this set.  */\n+\n+bool\n+function_set::contains_decl_p (tree fndecl) const\n+{\n+  gcc_assert (fndecl && DECL_P (fndecl));\n+  return contains_name_p (IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n+}\n+\n+/* Assert that the list of names is in sorted order.  */\n+\n+void\n+function_set::assert_sorted () const\n+{\n+#if CHECKING_P\n+  for (size_t idx = 1; idx < m_count; idx++)\n+    gcc_assert (strcmp (m_names[idx - 1], m_names[idx]) < 0);\n+#endif /* #if CHECKING_P  */\n+}\n+\n+/* Assert that contains_p is true for all members of the set.  */\n+\n+void\n+function_set::assert_sane () const\n+{\n+#if CHECKING_P\n+  for (size_t i = 0; i < m_count; i++)\n+    gcc_assert (contains_name_p (m_names[i]));\n+#endif /* #if CHECKING_P  */\n+}\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Verify that an empty function_set works as expected.  */\n+\n+static void\n+test_empty ()\n+{\n+  function_set fs (NULL, 0);\n+  fs.assert_sorted ();\n+  fs.assert_sane ();\n+  ASSERT_FALSE (fs.contains_name_p (\"\"));\n+  ASSERT_FALSE (fs.contains_name_p (\"haystack\"));\n+}\n+\n+/* Verify that a function_set with an odd number of elements works as\n+   expected.  */\n+\n+static void\n+test_odd ()\n+{\n+  static const char * const names[3] = {\"alpha\", \"beta\", \"gamma\"};\n+  function_set fs (names, 3);\n+  fs.assert_sorted ();\n+  fs.assert_sane ();\n+  ASSERT_FALSE (fs.contains_name_p (\"\"));\n+  ASSERT_FALSE (fs.contains_name_p (\"haystack\"));\n+}\n+\n+/* Verify that a function_set with an even number of elements works as\n+   expected.  */\n+\n+static void\n+test_even ()\n+{\n+  static const char * const names[3] = {\"alpha\", \"beta\"};\n+  function_set fs (names, 2);\n+  fs.assert_sorted ();\n+  fs.assert_sane ();\n+  ASSERT_FALSE (fs.contains_name_p (\"\"));\n+  ASSERT_FALSE (fs.contains_name_p (\"haystack\"));\n+}\n+\n+/* Verify that a function_set with some nontrivial stdio.h data works as\n+   expected.  */\n+\n+static void\n+test_stdio_example ()\n+{\n+  static const char * const example[] = {\n+    \"__fbufsize\",\n+    \"__flbf\",\n+    \"__fpending\",\n+    \"__fpurge\",\n+    \"__freadable\",\n+    \"__freading\",\n+    \"__fsetlocking\",\n+    \"__fwritable\",\n+    \"__fwriting\",\n+    \"clearerr_unlocked\",\n+    \"feof_unlocked\",\n+    \"ferror_unlocked\",\n+    \"fflush_unlocked\",\n+    \"fgetc_unlocked\",\n+    \"fgets\",\n+    \"fgets_unlocked\",\n+    \"fgetwc_unlocked\",\n+    \"fgetws_unlocked\",\n+    \"fileno_unlocked\",\n+    \"fputc_unlocked\",\n+    \"fputs_unlocked\",\n+    \"fputwc_unlocked\",\n+    \"fputws_unlocked\",\n+    \"fread_unlocked\",\n+    \"fwrite_unlocked\",\n+    \"getc_unlocked\",\n+    \"getwc_unlocked\",\n+    \"putc_unlocked\"\n+  };\n+  const size_t count = sizeof(example) / sizeof (example[0]);\n+  function_set fs (example, count);\n+  fs.assert_sorted ();\n+  fs.assert_sane ();\n+  /* Examples of strings not present: before, after and alongside the\n+     sorted list.  */\n+  ASSERT_FALSE (fs.contains_name_p (\"___\"));\n+  ASSERT_FALSE (fs.contains_name_p (\"Z\"));\n+  ASSERT_FALSE (fs.contains_name_p (\"fgets_WITH_A_PREFIX\"));\n+}\n+\n+/* Run all of the selftests within this file.  */\n+\n+void\n+analyzer_function_set_cc_tests ()\n+{\n+  test_empty ();\n+  test_odd ();\n+  test_even ();\n+  test_stdio_example ();\n+}\n+\n+} // namespace selftest\n+\n+#endif /* CHECKING_P */\n+\n+#endif /* #if ENABLE_ANALYZER */"}, {"sha": "9c73bf57ade52d1f2c22a1581052d61e63db1208", "filename": "gcc/analyzer/function-set.h", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b5f19c37001d7c9974248ffcb65aadba33283c/gcc%2Fanalyzer%2Ffunction-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b5f19c37001d7c9974248ffcb65aadba33283c/gcc%2Fanalyzer%2Ffunction-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Ffunction-set.h?ref=a6b5f19c37001d7c9974248ffcb65aadba33283c", "patch": "@@ -0,0 +1,46 @@\n+/* Sets of function names.\n+   Copyright (C) 2019-2020 Free Software Foundation, Inc.\n+   Contributed by David Malcolm <dmalcolm@redhat.com>.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_ANALYZER_FUNCTION_SET_H\n+#define GCC_ANALYZER_FUNCTION_SET_H\n+\n+/* A set of names.  */\n+\n+class function_set\n+{\n+public:\n+  /* Construct from a sorted array NAMES of size COUNT.  */\n+  function_set (const char * const *names, size_t count)\n+  : m_names (names), m_count (count)\n+  {\n+  }\n+\n+  bool contains_name_p (const char *name) const;\n+  bool contains_decl_p (tree fndecl) const;\n+\n+  void assert_sorted () const;\n+  void assert_sane () const;\n+\n+private:\n+  const char * const *m_names; // must be sorted\n+  size_t m_count;\n+};\n+\n+#endif /* GCC_ANALYZER_FUNCTION_SET_H */"}]}