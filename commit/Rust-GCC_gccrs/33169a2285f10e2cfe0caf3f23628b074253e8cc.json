{"sha": "33169a2285f10e2cfe0caf3f23628b074253e8cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMxNjlhMjI4NWYxMGUyY2ZlMGNhZjNmMjM2MjhiMDc0MjUzZThjYw==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2010-06-09T19:40:58Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2010-06-09T19:40:58Z"}, "message": "re PR fortran/44359 (-Wall / -Wconversion: Too verbose warning for DATA BOZ conversions)\n\ngcc/fortran/:\n2010-06-09  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/44359\n\t* intrinsic.c (gfc_convert_type_warn): Further improve -Wconversion.\n\ngcc/testsuite/:\n2010-06-09  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/44359\n\t* gfortran.dg/warn_conversion.f90: Removed check for redundant\n\twarning.\n\t* gfortran.dg/warn_conversion_2.f90: Use non-constant expression to\n\tcheck for warning.\n\nFrom-SVN: r160505", "tree": {"sha": "0965b0a5fbfcff0a37723936eadb74d0ab756673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0965b0a5fbfcff0a37723936eadb74d0ab756673"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33169a2285f10e2cfe0caf3f23628b074253e8cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33169a2285f10e2cfe0caf3f23628b074253e8cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33169a2285f10e2cfe0caf3f23628b074253e8cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33169a2285f10e2cfe0caf3f23628b074253e8cc/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b51789feb00890d5d4b0e9ec7e10fb0c140709d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b51789feb00890d5d4b0e9ec7e10fb0c140709d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b51789feb00890d5d4b0e9ec7e10fb0c140709d1"}], "stats": {"total": 134, "additions": 80, "deletions": 54}, "files": [{"sha": "cafbd314b2efc7210dd598a7869be699396b7a92", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33169a2285f10e2cfe0caf3f23628b074253e8cc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33169a2285f10e2cfe0caf3f23628b074253e8cc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=33169a2285f10e2cfe0caf3f23628b074253e8cc", "patch": "@@ -1,3 +1,8 @@\n+2010-06-09  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/44359\n+\t* intrinsic.c (gfc_convert_type_warn): Further improve -Wconversion.\n+\n 2010-06-09  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/44430"}, {"sha": "e5463a1a74fe9a72181950baa63ee924f1b998cd", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 61, "deletions": 52, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33169a2285f10e2cfe0caf3f23628b074253e8cc/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33169a2285f10e2cfe0caf3f23628b074253e8cc/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=33169a2285f10e2cfe0caf3f23628b074253e8cc", "patch": "@@ -4022,58 +4022,67 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n     }\n   else if (wflag)\n     {\n-      /* Two modes of warning:\n-\t  - gfc_option.warn_conversion tries to be more intelligent\n-\t    about the warnings raised and omits those where smaller\n-\t    kinds are promoted to larger ones without change in the\n-\t    value\n-\t  - gfc_option.warn_conversion_extra does not take the kinds\n-\t    into account and also warns for coversions like\n-\t    REAL(4) -> REAL(8)\n-\n-\t NOTE: Possible enhancement for warn_conversion\n-\t If converting from a smaller to a larger kind, check if the\n-\t value is constant and if yes, whether the value still fits\n-\t in the smaller kind. If yes, omit the warning.\n-      */\n-\n-      /* If the types are the same (but not LOGICAL), and if from-kind\n-\t is larger than to-kind, this may indicate a loss of precision.\n-\t The same holds for conversions from REAL to COMPLEX.  */\n-      if (((from_ts.type == ts->type && from_ts.type != BT_LOGICAL)\n-           && ((gfc_option.warn_conversion && from_ts.kind > ts->kind)\n-\t       || gfc_option.warn_conversion_extra))\n-\t  || ((from_ts.type == BT_REAL && ts->type == BT_COMPLEX)\n-\t      && ((gfc_option.warn_conversion && from_ts.kind > ts->kind)\n-\t\t  || gfc_option.warn_conversion_extra)))\n-\tgfc_warning_now (\"Possible change of value in conversion \"\n-\t\t\t \"from %s to %s at %L\", gfc_typename (&from_ts),\n-\t\t\t gfc_typename (ts), &expr->where);\n-\n-      /* If INTEGER is converted to REAL/COMPLEX, this is generally ok if\n-\t the kind of the INTEGER value is less or equal to the kind of the\n-\t REAL/COMPLEX one. Otherwise the value may not fit.\n-\t Assignment of an overly large integer constant also generates\n-\t an overflow error with range checking. */\n-      else if (from_ts.type == BT_INTEGER\n-\t       && (ts->type == BT_REAL || ts->type == BT_COMPLEX)\n-\t       && ((gfc_option.warn_conversion && from_ts.kind > ts->kind)\n-\t\t   || gfc_option.warn_conversion_extra))\n-\tgfc_warning_now (\"Possible change of value in conversion \"\n-\t\t\t \"from %s to %s at %L\", gfc_typename (&from_ts),\n-\t\t\t gfc_typename (ts), &expr->where);\n-\n-      /* If REAL/COMPLEX is converted to INTEGER, or COMPLEX is converted\n-        to REAL we almost certainly have a loss of digits, regardless of\n-        the respective kinds.  */\n-      else if ((((from_ts.type == BT_REAL || from_ts.type == BT_COMPLEX)\n-\t\t  && ts->type == BT_INTEGER)\n-\t\t|| (from_ts.type == BT_COMPLEX && ts->type == BT_REAL))\n-\t       && (gfc_option.warn_conversion\n-\t           || gfc_option.warn_conversion_extra))\n-\tgfc_warning_now (\"Possible change of value in conversion from \"\n-\t\t\t\"%s to %s at %L\", gfc_typename (&from_ts),\n-\t\t\tgfc_typename (ts), &expr->where);\n+      if (gfc_option.flag_range_check\n+\t  && expr->expr_type == EXPR_CONSTANT\n+\t  && from_ts.type == ts->type)\n+\t{\n+\t  /* Do nothing. Constants of the same type are range-checked\n+\t     elsewhere. If a value too large for the target type is\n+\t     assigned, an error is generated. Not checking here avoids\n+\t     duplications of warnings/errors.\n+\t     If range checking was disabled, but -Wconversion enabled,\n+\t     a non range checked warning is generated below.  */\n+\t}\n+      else if (from_ts.type == BT_LOGICAL || ts->type == BT_LOGICAL)\n+\t{\n+\t  /* Do nothing. This block exists only to simplify the other\n+\t     else-if expressions.\n+\t       LOGICAL <> LOGICAL    no warning, independent of kind values\n+\t       LOGICAL <> INTEGER    extension, warned elsewhere\n+\t       LOGICAL <> REAL       invalid, error generated elsewhere\n+\t       LOGICAL <> COMPLEX    invalid, error generated elsewhere  */\n+\t}\n+      else if (from_ts.type == ts->type\n+\t       || (from_ts.type == BT_INTEGER && ts->type == BT_REAL)\n+\t       || (from_ts.type == BT_INTEGER && ts->type == BT_COMPLEX)\n+\t       || (from_ts.type == BT_REAL && ts->type == BT_COMPLEX))\n+\t{\n+\t  /* Larger kinds can hold values of smaller kinds without problems.\n+\t     Hence, only warn if target kind is smaller than the source\n+\t     kind - or if -Wconversion-extra is specified.  */\n+\t  if (gfc_option.warn_conversion_extra)\n+\t    gfc_warning_now (\"Conversion from %s to %s at %L\",\n+\t\t\t     gfc_typename (&from_ts), gfc_typename (ts),\n+\t\t\t     &expr->where);\n+\t  else if (gfc_option.warn_conversion\n+\t\t   && from_ts.kind > ts->kind)\n+\t    gfc_warning_now (\"Possible change of value in conversion \"\n+\t\t\t     \"from %s to %s at %L\", gfc_typename (&from_ts),\n+\t\t\t     gfc_typename (ts), &expr->where);\n+\t}\n+      else if ((from_ts.type == BT_REAL && ts->type == BT_INTEGER)\n+\t       || (from_ts.type == BT_COMPLEX && ts->type == BT_INTEGER)\n+\t       || (from_ts.type == BT_COMPLEX && ts->type == BT_REAL))\n+\t{\n+\t  /* Conversion from REAL/COMPLEX to INTEGER or COMPLEX to REAL\n+\t     usually comes with a loss of information, regardless of kinds.  */\n+\t  if (gfc_option.warn_conversion_extra\n+\t      || gfc_option.warn_conversion)\n+\t    gfc_warning_now (\"Possible change of value in conversion \"\n+\t\t\t     \"from %s to %s at %L\", gfc_typename (&from_ts),\n+\t\t\t     gfc_typename (ts), &expr->where);\n+\t}\n+      else if (from_ts.type == BT_HOLLERITH || ts->type == BT_HOLLERITH)\n+\t{\n+\t  /* If HOLLERITH is involved, all bets are off.  */\n+\t  if (gfc_option.warn_conversion_extra\n+\t      || gfc_option.warn_conversion)\n+\t    gfc_warning_now (\"Conversion from %s to %s at %L\",\n+\t\t\t     gfc_typename (&from_ts), gfc_typename (ts),\n+\t\t\t     &expr->where);\n+\t}\n+      else\n+        gcc_unreachable ();\n     }\n \n   /* Insert a pre-resolved function call to the right function.  */"}, {"sha": "5dcee0fb166163fa4cc6d9945b7346071c629607", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33169a2285f10e2cfe0caf3f23628b074253e8cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33169a2285f10e2cfe0caf3f23628b074253e8cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=33169a2285f10e2cfe0caf3f23628b074253e8cc", "patch": "@@ -1,3 +1,11 @@\n+2010-06-09  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/44359\n+\t* gfortran.dg/warn_conversion.f90: Removed check for redundant\n+\twarning.\n+\t* gfortran.dg/warn_conversion_2.f90: Use non-constant expression to\n+\tcheck for warning.\n+\n 2010-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* gfortran.dg/data_namelist_conflict.f90: New test."}, {"sha": "c8f0e23e2ffd10cf5e62b4115a93c0cf77c7693c", "filename": "gcc/testsuite/gfortran.dg/warn_conversion.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33169a2285f10e2cfe0caf3f23628b074253e8cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33169a2285f10e2cfe0caf3f23628b074253e8cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion.f90?ref=33169a2285f10e2cfe0caf3f23628b074253e8cc", "patch": "@@ -18,7 +18,6 @@ SUBROUTINE pr27866c4\n   integer(kind=4) :: i4\n   i4 = 2.3              ! { dg-warning \"conversion\" }\n   i1 = 500              ! { dg-error \"overflow\" }\n-                        ! { dg-warning \"conversion\" \"\" { target *-*-* } 20 }\n   a = 2**26-1           ! assignment INTEGER(4) to REAL(4) - no warning\n   b = 1d999             ! { dg-error \"overflow\" }\n "}, {"sha": "c0222983a0fb6932ffdeb1b1674d129c7cb7565f", "filename": "gcc/testsuite/gfortran.dg/warn_conversion_2.f90", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33169a2285f10e2cfe0caf3f23628b074253e8cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33169a2285f10e2cfe0caf3f23628b074253e8cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion_2.f90?ref=33169a2285f10e2cfe0caf3f23628b074253e8cc", "patch": "@@ -2,5 +2,10 @@\n ! { dg-options \"-Wconversion-extra\" }\n \n   real(8) :: sqrt2\n-  sqrt2 = sqrt(2.0)      ! { dg-warning \"conversion\" }\n+  real x\n+\n+  x = 2.0\n+  sqrt2 = sqrt(x)      ! { dg-warning \"Conversion\" }\n+\n+  sqrt2 = sqrt(2.0)    ! no warning; simplified to a constant and range checked\n end"}]}