{"sha": "299a53d7979aaa639298b95bd46b69d3a8546f49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk5YTUzZDc5NzlhYWE2MzkyOThiOTViZDQ2YjY5ZDNhODU0NmY0OQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-05-20T09:56:41Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-10-15T03:02:49Z"}, "message": "Enable gcc support for UINTR\n\n2020-05-20  Hongtao Liu  <hongtao.liu@intel.com>\n\ngcc/\n\t* common/config/i386/cpuinfo.h (get_available_features):\n\tDetect UINTR.\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA2_UINTR_SET\n\tOPTION_MASK_ISA2_UINTR_UNSET): New.\n\t(ix86_handle_option): Handle -muintr.\n\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n\tAdd FEATURE_UINTR.\n\t* common/config/i386/i386-isas.h: Add ISA_NAMES_TABLE_ENTRY\n\tfor uintr.\n\t* config.gcc: Add uintrintrin.h to extra_headers.\n\t* config/i386/uintrintrin.h: New.\n\t* config/i386/cpuid.h (bit_UINTR): New.\n\t* config/i386/i386-builtin-types.def: Add new types.\n\t* config/i386/i386-builtin.def: Add new builtins.\n\t* config/i386/i386-builtins.c (ix86_init_mmx_sse_builtins): Add\n\t__builtin_ia32_testui.\n\t* config/i386/i386-builtins.h (ix86_builtins): Add\n\tIX86_BUILTIN_TESTUI.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n\t__UINTR__.\n\t* config/i386/i386-expand.c (ix86_expand_special_args_builtin):\n\tHandle UINT8_FTYPE_VOID.\n\t(ix86_expand_builtin): Handle IX86_BUILTIN_TESTUI.\n\t* config/i386/i386-options.c (isa2_opts): Add -muintr.\n\t(ix86_valid_target_attribute_inner_p): Handle UINTR.\n\t(ix86_option_override_internal): Add TARGET_64BIT check for UINTR.\n\t* config/i386/i386.h (TARGET_UINTR, TARGET_UINTR_P, PTA_UINTR): New.\n\t(PTA_SAPPHIRRAPIDS): Add PTA_UINTR.\n\t* config/i386/i386.opt: Add -muintr.\n\t* config/i386/i386.md\n\t(define_int_iterator UINTR_UNSPECV): New.\n\t(define_int_attr uintr_unspecv): New.\n\t(uintr_<uintr_unspecv>, uintr_senduipi, testui):\n\tNew define_insn patterns.\n\t* config/i386/x86gprintrin.h: Include uintrintrin.h\n\t* doc/invoke.texi: Document -muintr.\n\t* doc/extend.texi: Document uintr.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n\t* gcc.target/i386/uintr-1.c: New test.\n\t* gcc.target/i386/uintr-2.c: Ditto.\n\t* gcc.target/i386/uintr-3.c: Ditto.\n\t* gcc.target/i386/uintr-4.c: Ditto.\n\t* gcc.target/i386/uintr-5.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-1.c: Add -muintr for 64bit target.\n\t* gcc.target/i386/x86gprintrin-2.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-3.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-4.c: Add muintr for 64bit target.\n\t* gcc.target/i386/x86gprintrin-5.c: Ditto.", "tree": {"sha": "38526ee4a057f3d8b01d302af56a847911809f03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38526ee4a057f3d8b01d302af56a847911809f03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/299a53d7979aaa639298b95bd46b69d3a8546f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299a53d7979aaa639298b95bd46b69d3a8546f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/299a53d7979aaa639298b95bd46b69d3a8546f49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299a53d7979aaa639298b95bd46b69d3a8546f49/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25"}], "stats": {"total": 286, "additions": 278, "deletions": 8}, "files": [{"sha": "0e63db271f6da685117213d1e6b19ff0a2f04180", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -701,6 +701,8 @@ get_available_features (struct __processor_model *cpu_model,\n \t    set_feature (FEATURE_AVX5124FMAPS);\n \t  if (edx & bit_AVX512VP2INTERSECT)\n \t    set_feature (FEATURE_AVX512VP2INTERSECT);\n+\t  if (edx & bit_UINTR)\n+\t    set_feature (FEATURE_UINTR);\n \n \t  __cpuid_count (7, 1, eax, ebx, ecx, edx);\n \t  if (eax & bit_AVX512BF16)"}, {"sha": "6a06383ef0d30b013075f6eaf65535174255a941", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -163,6 +163,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_ENQCMD_SET OPTION_MASK_ISA2_ENQCMD\n #define OPTION_MASK_ISA2_SERIALIZE_SET OPTION_MASK_ISA2_SERIALIZE\n #define OPTION_MASK_ISA2_TSXLDTRK_SET OPTION_MASK_ISA2_TSXLDTRK\n+#define OPTION_MASK_ISA2_UINTR_SET OPTION_MASK_ISA2_UINTR\n \n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n@@ -254,6 +255,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AMX_TILE_UNSET OPTION_MASK_ISA2_AMX_TILE\n #define OPTION_MASK_ISA2_AMX_INT8_UNSET OPTION_MASK_ISA2_AMX_INT8\n #define OPTION_MASK_ISA2_AMX_BF16_UNSET OPTION_MASK_ISA2_AMX_BF16\n+#define OPTION_MASK_ISA2_UINTR_UNSET OPTION_MASK_ISA2_UINTR\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -702,6 +704,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_muintr:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_UINTR_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_UINTR_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_UINTR_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_UINTR_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mavx5124fmaps:\n       if (value)\n \t{"}, {"sha": "3fc2af5c3b1511f61ac5012de3c2a1f00186750a", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -219,6 +219,7 @@ enum processor_features\n   FEATURE_AMX_TILE,\n   FEATURE_AMX_INT8,\n   FEATURE_AMX_BF16,\n+  FEATURE_UINTR,\n   CPU_FEATURE_MAX\n };\n "}, {"sha": "c2dc74171bf74ea5577e7547199b0d04b254690c", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -163,4 +163,5 @@ ISA_NAMES_TABLE_START\n   ISA_NAMES_TABLE_ENTRY(\"amx-tile\", FEATURE_AMX_TILE, P_NONE, \"-mamx-tile\")\n   ISA_NAMES_TABLE_ENTRY(\"amx-int8\", FEATURE_AMX_INT8, P_NONE, \"-mamx-int8\")\n   ISA_NAMES_TABLE_ENTRY(\"amx-bf16\", FEATURE_AMX_BF16, P_NONE, \"-mamx-bf16\")\n+  ISA_NAMES_TABLE_ENTRY(\"uintr\", FEATURE_UINTR, P_NONE, \"-muintr\")\n ISA_NAMES_TABLE_END"}, {"sha": "c02bdddab69fc4e5d4e84613f08eef68d20fc2a9", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -413,7 +413,7 @@ i[34567]86-*-*)\n \t\t       avx512bf16intrin.h enqcmdintrin.h serializeintrin.h\n \t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\n \t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n-\t\t       amxbf16intrin.h x86gprintrin.h\"\n+\t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -449,7 +449,7 @@ x86_64-*-*)\n \t\t       avx512bf16intrin.h enqcmdintrin.h serializeintrin.h\n \t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\n \t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n-\t\t       amxbf16intrin.h x86gprintrin.h\"\n+\t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "fbc8ca245bdd6214172eecb040c4f217da8fa81f", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -124,6 +124,7 @@\n #define bit_AVX5124FMAPS (1 << 3)\n #define bit_AVX512VP2INTERSECT\t(1 << 8)\n #define bit_IBT\t(1 << 20)\n+#define bit_UINTR (1 << 5)\n #define bit_PCONFIG\t(1 << 18)\n #define bit_SERIALIZE\t(1 << 14)\n #define bit_TSXLDTRK    (1 << 16)"}, {"sha": "964633da9ccfd7daf8c8f3510702e18ea6cd1b01", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -194,6 +194,7 @@ DEF_FUNCTION_TYPE (UNSIGNED)\n DEF_FUNCTION_TYPE (UINT)\n DEF_FUNCTION_TYPE (USHORT)\n DEF_FUNCTION_TYPE (INT)\n+DEF_FUNCTION_TYPE (UINT8)\n DEF_FUNCTION_TYPE (VOID)\n DEF_FUNCTION_TYPE (PVOID)\n "}, {"sha": "bc1b0c7dcec659a30c9bb24b779952074b5c9ebc", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -452,6 +452,11 @@ BDESC (0, OPTION_MASK_ISA2_SERIALIZE, CODE_FOR_serialize, \"__builtin_ia32_serial\n BDESC (0, OPTION_MASK_ISA2_TSXLDTRK, CODE_FOR_xsusldtrk, \"__builtin_ia32_xsusldtrk\", IX86_BUILTIN_XSUSLDTRK, UNKNOWN, (int) VOID_FTYPE_VOID)\n BDESC (0, OPTION_MASK_ISA2_TSXLDTRK, CODE_FOR_xresldtrk, \"__builtin_ia32_xresldtrk\", IX86_BUILTIN_XRESLDTRK, UNKNOWN, (int) VOID_FTYPE_VOID)\n \n+/* UINTR.  */\n+BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_UINTR, CODE_FOR_clui, \"__builtin_ia32_clui\", IX86_BUILTIN_CLUI, UNKNOWN, (int) VOID_FTYPE_VOID)\n+BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_UINTR, CODE_FOR_stui, \"__builtin_ia32_stui\", IX86_BUILTIN_STUI, UNKNOWN, (int) VOID_FTYPE_VOID)\n+BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_UINTR, CODE_FOR_senduipi, \"__builtin_ia32_senduipi\", IX86_BUILTIN_SENDUIPI, UNKNOWN, (int) VOID_FTYPE_UINT64)\n+\n BDESC_END (SPECIAL_ARGS, ARGS)\n \n /* Builtins with variable number of arguments.  */"}, {"sha": "504987a5410249a1827bb93952fa6d3f74b0f857", "filename": "gcc/config/i386/i386-builtins.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.c?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -1194,6 +1194,11 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (0, OPTION_MASK_ISA2_WAITPKG, \"__builtin_ia32_tpause\",\n \t       UINT8_FTYPE_UNSIGNED_UINT64, IX86_BUILTIN_TPAUSE);\n \n+  /* UINTR.  */\n+  def_builtin (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_UINTR,\n+\t       \"__builtin_ia32_testui\",\n+\t       UINT8_FTYPE_VOID, IX86_BUILTIN_TESTUI);\n+\n   /* CLDEMOTE.  */\n   def_builtin (0, OPTION_MASK_ISA2_CLDEMOTE, \"__builtin_ia32_cldemote\",\n \t       VOID_FTYPE_PCVOID, IX86_BUILTIN_CLDEMOTE);"}, {"sha": "a88cc0c387eadd2ee5be9b6fb13ab42d1c4e2bce", "filename": "gcc/config/i386/i386-builtins.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.h?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -40,6 +40,7 @@ enum ix86_builtins\n   IX86_BUILTIN_UMONITOR,\n   IX86_BUILTIN_UMWAIT,\n   IX86_BUILTIN_TPAUSE,\n+  IX86_BUILTIN_TESTUI,\n   IX86_BUILTIN_CLZERO,\n   IX86_BUILTIN_CLDEMOTE,\n   IX86_BUILTIN_VEC_INIT_V2SI,"}, {"sha": "219e1be23e695662245155dc3a49f1c1b4cb04cb", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -598,6 +598,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__LAHF_SAHF__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_MOVBE)\n     def_or_undef (parse_in, \"__MOVBE__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_UINTR)\n+    def_or_undef (parse_in, \"__UINTR__\");\n \n   if (TARGET_IAMCU)\n     {"}, {"sha": "e67c26737b772036b0c8e3deb1a9e8a847c4a93f", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -10417,6 +10417,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case USHORT_FTYPE_VOID:\n     case UINT64_FTYPE_VOID:\n     case UINT_FTYPE_VOID:\n+    case UINT8_FTYPE_VOID:\n     case UNSIGNED_FTYPE_VOID:\n       nargs = 0;\n       klass = load;\n@@ -11207,6 +11208,19 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \n       return target;\n \n+    case IX86_BUILTIN_TESTUI:\n+      emit_insn (gen_testui ());\n+\n+      if (target == 0\n+\t  || !register_operand (target, QImode))\n+\ttarget = gen_reg_rtx (QImode);\n+\n+      pat = gen_rtx_LTU (QImode, gen_rtx_REG (CCCmode, FLAGS_REG),\n+\t\t\t const0_rtx);\n+      emit_insn (gen_rtx_SET (target, pat));\n+\n+      return target;\n+\n     case IX86_BUILTIN_CLZERO:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       op0 = expand_normal (arg0);"}, {"sha": "1edc1c8a7b9d8763d4fcadf8f7343613dc41c8f2", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -212,7 +212,8 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mtsxldtrk\",\tOPTION_MASK_ISA2_TSXLDTRK },\n   { \"-mamx-tile\",\tOPTION_MASK_ISA2_AMX_TILE },\n   { \"-mamx-int8\",\tOPTION_MASK_ISA2_AMX_INT8 },\n-  { \"-mamx-bf16\",\tOPTION_MASK_ISA2_AMX_BF16 }\n+  { \"-mamx-bf16\",\tOPTION_MASK_ISA2_AMX_BF16 },\n+  { \"-muintr\",\t\tOPTION_MASK_ISA2_UINTR }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1031,6 +1032,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"movdir64b\", OPT_mmovdir64b),\n     IX86_ATTR_ISA (\"waitpkg\", OPT_mwaitpkg),\n     IX86_ATTR_ISA (\"cldemote\", OPT_mcldemote),\n+    IX86_ATTR_ISA (\"uintr\", OPT_muintr),\n     IX86_ATTR_ISA (\"ptwrite\",   OPT_mptwrite),\n     IX86_ATTR_ISA (\"avx512bf16\",   OPT_mavx512bf16),\n     IX86_ATTR_ISA (\"enqcmd\", OPT_menqcmd),\n@@ -1899,6 +1901,9 @@ ix86_option_override_internal (bool main_args_p,\n       opts->x_ix86_stringop_alg = no_stringop;\n     }\n \n+  if (TARGET_UINTR && !TARGET_64BIT)\n+    error (\"%<-muintr%> not supported for 32-bit code\");\n+\n   if (!opts->x_ix86_arch_string)\n     opts->x_ix86_arch_string\n       = TARGET_64BIT_P (opts->x_ix86_isa_flags)"}, {"sha": "e933b3588c239e8fdb20eb776c4719b6402f46c1", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -209,6 +209,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_AMX_INT8_P(x) TARGET_ISA2_AMX_INT8(x)\n #define TARGET_AMX_BF16 TARGET_ISA2_AMX_BF16\n #define TARGET_AMX_BF16_P(x) TARGET_ISA2_AMX_BF16(x)\n+#define TARGET_UINTR\tTARGET_ISA2_UINTR\n+#define TARGET_UINTR_P(x) TARGET_ISA2_UINTR_P(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)\n@@ -2475,6 +2477,7 @@ const wide_int_bitmask PTA_TSXLDTRK (0, HOST_WIDE_INT_1U << 18);\n const wide_int_bitmask PTA_AMX_TILE(0, HOST_WIDE_INT_1U << 19);\n const wide_int_bitmask PTA_AMX_INT8(0, HOST_WIDE_INT_1U << 20);\n const wide_int_bitmask PTA_AMX_BF16(0, HOST_WIDE_INT_1U << 21);\n+const wide_int_bitmask PTA_UINTR (0, HOST_WIDE_INT_1U << 22);\n \n const wide_int_bitmask PTA_X86_64_BASELINE = PTA_64BIT | PTA_MMX | PTA_SSE\n   | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR;\n@@ -2485,6 +2488,7 @@ const wide_int_bitmask PTA_X86_64_V3 = PTA_X86_64_V2\n   | PTA_MOVBE | PTA_XSAVE;\n const wide_int_bitmask PTA_X86_64_V4 = PTA_X86_64_V3\n   | PTA_AVX512F | PTA_AVX512BW | PTA_AVX512CD | PTA_AVX512DQ | PTA_AVX512VL;\n+\n const wide_int_bitmask PTA_CORE2 = PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2\n   | PTA_SSE3 | PTA_SSSE3 | PTA_CX16 | PTA_FXSR;\n const wide_int_bitmask PTA_NEHALEM = PTA_CORE2 | PTA_SSE4_1 | PTA_SSE4_2\n@@ -2518,7 +2522,7 @@ const wide_int_bitmask PTA_TIGERLAKE = PTA_ICELAKE_CLIENT | PTA_MOVDIRI\n const wide_int_bitmask PTA_SAPPHIRERAPIDS = PTA_COOPERLAKE | PTA_MOVDIRI\n   | PTA_MOVDIR64B | PTA_AVX512VP2INTERSECT | PTA_ENQCMD | PTA_CLDEMOTE\n   | PTA_PTWRITE | PTA_WAITPKG | PTA_SERIALIZE | PTA_TSXLDTRK | PTA_AMX_TILE\n-  | PTA_AMX_INT8 | PTA_AMX_BF16;\n+  | PTA_AMX_INT8 | PTA_AMX_BF16 | PTA_UINTR;\n const wide_int_bitmask PTA_ALDERLAKE = PTA_SKYLAKE | PTA_CLDEMOTE | PTA_PTWRITE\n   | PTA_WAITPKG | PTA_SERIALIZE;\n const wide_int_bitmask PTA_KNL = PTA_BROADWELL | PTA_AVX512PF | PTA_AVX512ER"}, {"sha": "d712a348ff97a0d061f2e00f7666eb143a5f6a42", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -293,6 +293,12 @@\n   UNSPECV_UMONITOR\n   UNSPECV_TPAUSE\n \n+  ;; For UINTR support\n+  UNSPECV_CLUI\n+  UNSPECV_STUI\n+  UNSPECV_TESTUI\n+  UNSPECV_SENDUIPI\n+\n   ;; For CLDEMOTE support\n   UNSPECV_CLDEMOTE\n \n@@ -13680,7 +13686,7 @@\n    (unspec [(const_int 0)] UNSPEC_INTERRUPT_RETURN)]\n   \"reload_completed\"\n {\n-  return TARGET_64BIT ? \"iretq\" : \"iret\";\n+  return TARGET_64BIT ? (TARGET_UINTR ? \"uiret\" : \"iretq\") : \"iret\";\n })\n \n ;; Used by x86_machine_dependent_reorg to avoid penalty on single byte RET\n@@ -21585,6 +21591,34 @@\n   \"enqcmd<enqcmd_sfx>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"other\")])\n \n+;; UINTR\n+(define_int_iterator UINTR [UNSPECV_CLUI UNSPECV_STUI])\n+(define_int_attr uintr [(UNSPECV_CLUI \"clui\") (UNSPECV_STUI \"stui\")])\n+\n+(define_insn \"<uintr>\"\n+  [(unspec_volatile [(const_int 0)] UINTR)]\n+  \"TARGET_UINTR && TARGET_64BIT\"\n+  \"<uintr>\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"testui\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(unspec_volatile:CCC [(const_int 0)] UNSPECV_TESTUI))]\n+  \"TARGET_UINTR && TARGET_64BIT\"\n+  \"testui\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"senduipi\"\n+  [(unspec_volatile\n+    [(match_operand:DI 0 \"register_operand\" \"r\")]\n+    UNSPECV_SENDUIPI)]\n+  \"TARGET_UINTR && TARGET_64BIT\"\n+  \"senduipi\\t%0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"4\")])\n+\n ;; WAITPKG\n \n (define_insn \"umwait\""}, {"sha": "68f49f53d4766cb79b5ea3927aa65e058279bb1e", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -788,6 +788,10 @@ mptwrite\n Target Report Mask(ISA2_PTWRITE) Var(ix86_isa_flags2) Save\n Support PTWRITE built-in functions and code generation.\n \n+muintr\n+Target Report Mask(ISA2_UINTR) Var(ix86_isa_flags2) Save\n+Support UINTR built-in functions and code generation.\n+\n msgx\n Target Report Mask(ISA2_SGX) Var(ix86_isa_flags2) Save\n Support SGX built-in functions and code generation."}, {"sha": "991f64279716a239b1aa18ca83b02a95bb0161f3", "filename": "gcc/config/i386/uintrintrin.h", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fuintrintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fuintrintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fuintrintrin.h?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -0,0 +1,87 @@\n+/* Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <uintrintrin.h> directly; include <x86gprintrin.h> instead.\"\n+#endif\n+\n+#ifndef _UINTRNTRIN_H_INCLUDED\n+#define _UINTRNTRIN_H_INCLUDED\n+\n+#ifdef __x86_64__\n+\n+#ifndef __UINTR__\n+#pragma GCC push_options\n+#pragma GCC target (\"uintr\")\n+#define __DISABLE_UINTR__\n+#endif /* __UINTR__ */\n+\n+struct __uintr_frame\n+{\n+  /* The position of the most significant bit set in user-interrupt\n+     request register.  */\n+  unsigned long long uirrv;\n+  /* RIP of the interrupted user process.  */\n+  unsigned long long rip;\n+  /* RFLAGS of the interrupted user process.  */\n+  unsigned long long rflags;\n+  /* RSP of the interrupted user process.  */\n+  unsigned long long rsp;\n+};\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_clui (void)\n+{\n+  __builtin_ia32_clui ();\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_stui (void)\n+{\n+  __builtin_ia32_stui ();\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_senduipi (unsigned long long __R)\n+{\n+  __builtin_ia32_senduipi (__R);\n+}\n+\n+extern __inline unsigned char\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_testui (void)\n+{\n+  return __builtin_ia32_testui ();\n+}\n+\n+#ifdef __DISABLE_UINTR__\n+#undef __DISABLE_UINTR__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_UINTR__ */\n+\n+#endif\n+\n+#endif /* _UINTRNTRIN_H_INCLUDED.  */"}, {"sha": "e35f4b65c9c004bc2777db6e42a26c740f40909d", "filename": "gcc/config/i386/x86gprintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -76,6 +76,8 @@\n \n #include <tsxldtrkintrin.h>\n \n+#include <uintrintrin.h>\n+\n #include <waitpkgintrin.h>\n \n #include <wbnoinvdintrin.h>"}, {"sha": "bd46ebc83cc1479c7af6d754e70449f110dd39ea", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -6638,6 +6638,11 @@ Enable/disable the generation of the AMX-INT8 instructions.\n @cindex @code{target(\"amx-bf16\")} function attribute, x86\n Enable/disable the generation of the AMX-BF16 instructions.\n \n+@item uintr\n+@itemx no-uintr\n+@cindex @code{target(\"uintr\")} function attribute, x86\n+Enable/disable the generation of the UINTR instructions.\n+\n @item cld\n @itemx no-cld\n @cindex @code{target(\"cld\")} function attribute, x86"}, {"sha": "0a5e1e88d21028b69cb6f3e73c53458215f6ec79", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -1364,7 +1364,7 @@ See RS/6000 and PowerPC Options.\n -mvpclmulqdq  -mavx512bitalg  -mmovdiri  -mmovdir64b  -mavx512vpopcntdq @gol\n -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid @gol\n -mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk@gol\n--mamx-tile  -mamx-int8  -mamx-bf16@gol\n+-mamx-tile  -mamx-int8  -mamx-bf16 -muintr@gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mmemcpy-strategy=@var{strategy}  -mmemset-strategy=@var{strategy} @gol\n@@ -30259,6 +30259,8 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -menqcmd\n @opindex menqcmd\n+@itemx -muintr\n+@opindex muintr\n @need 200\n @itemx -mtsxldtrk\n @opindex mtsxldtrk\n@@ -30300,8 +30302,8 @@ WBNOINVD, FMA4, PREFETCHW, RDPID, PREFETCHWT1, RDSEED, SGX, XOP, LWP,\n 3DNow!@:, enhanced 3DNow!@:, POPCNT, ABM, ADX, BMI, BMI2, LZCNT, FXSR, XSAVE,\n XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16,\n-ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE\n-or CLDEMOTE extended instruction sets.  Each has a corresponding\n+ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE,\n+UINTR or CLDEMOTE extended instruction sets.  Each has a corresponding\n @option{-mno-} option to disable use of these instructions.\n \n These extensions are also available as built-in functions: see"}, {"sha": "d6a2e8d2305028a755bf29fa8fdf55c5066fed45", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -74,6 +74,7 @@ extern void test_avx512vp2intersect (void)\t__attribute__((__target__(\"avx512vp2i\n extern void test_amx_tile (void)\t\t__attribute__((__target__(\"amx-tile\")));\n extern void test_amx_int8 (void)\t\t__attribute__((__target__(\"amx-int8\")));\n extern void test_amx_bf16 (void)\t\t__attribute__((__target__(\"amx-bf16\")));\n+extern void test_uintr (void)\t\t\t__attribute__((__target__(\"uintr\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -149,6 +150,7 @@ extern void test_no_avx512vp2intersect (void)\t__attribute__((__target__(\"no-avx5\n extern void test_no_amx_tile (void)\t\t__attribute__((__target__(\"no-amx-tile\")));\n extern void test_no_amx_int8 (void)\t\t__attribute__((__target__(\"no-amx-int8\")));\n extern void test_no_amx_bf16 (void)\t\t__attribute__((__target__(\"no-amx-bf16\")));\n+extern void test_no_uintr (void)\t\t__attribute__((__target__(\"no-uintr\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "f30f755a139a2632df3b8f86edd8baeea5972426", "filename": "gcc/testsuite/gcc.target/i386/uintr-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-1.c?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -muintr\" } */\n+/* { dg-final { scan-assembler-times \"clui\" \"1\" } } */\n+/* { dg-final { scan-assembler-times \"stui\" \"2\" } } */\n+/* { dg-final { scan-assembler-times \"senduipi\" \"1\" } } */\n+/* { dg-final { scan-assembler-times \"setc\" \"1\" } } */\n+/* { dg-final { scan-assembler-times \"testui\" \"1\" } } */\n+\n+#include <x86gprintrin.h>\n+\n+extern volatile unsigned char c;\n+extern volatile unsigned long long l;\n+\n+void\n+foo (void)\n+{\n+  _clui ();\n+  _stui ();\n+  _senduipi (l);\n+  c = _testui ();\n+}"}, {"sha": "e705732c1bd5504fe7dfdb98d4c7a651324a22c8", "filename": "gcc/testsuite/gcc.target/i386/uintr-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-2.c?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -muintr -mgeneral-regs-only\" } */\n+/* { dg-final { scan-assembler-times \"uiret\" \"2\" } } */\n+\n+#include <x86gprintrin.h>\n+\n+void\n+__attribute__((interrupt))\n+foo (void *frame)\n+{\n+}\n+\n+void\n+__attribute__((interrupt))\n+UINTR_hanlder (struct __uintr_frame *frame)\n+{\n+}"}, {"sha": "d2843495158ef4c952c2c6c316d7dd5ad3577b7c", "filename": "gcc/testsuite/gcc.target/i386/uintr-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-3.c?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -muintr\" } */\n+/* { dg-final { scan-assembler \"uiret\" } } */\n+#include <x86gprintrin.h>\n+\n+void __attribute__ ((target(\"general-regs-only\"), interrupt))\n+UINTR_handler (struct __uintr_frame *p)\n+{\n+}"}, {"sha": "f3b371b423155a977debca99702f276fa9926ce4", "filename": "gcc/testsuite/gcc.target/i386/uintr-4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-4.c?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -muintr\" } */\n+\n+#include <x86gprintrin.h>\n+\n+void __attribute__ ((interrupt))\n+UINTR_handler (struct __uintr_frame *p)\n+{ /* { dg-message \"SSE instructions aren't allowed in an interrupt service routine\" }  */\n+}"}, {"sha": "ac44be0a7064694f03e7c26f8f07e3db1635624b", "filename": "gcc/testsuite/gcc.target/i386/uintr-5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-5.c?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -muintr\" } */\n+/* { dg-error \"'-muintr' not supported for 32-bit code\" \"\" { target ia32 } 0 } */\n+\n+#include <x86gprintrin.h>\n+\n+void\n+UINTR_hanlder (struct __uintr_frame *frame)\n+{\n+}"}, {"sha": "a65e7d55bbb8947a4a8f2ee58f6a72da574b6074", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -1,6 +1,7 @@\n /* Test that <x86gprintrin.h> is usable with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n /* { dg-options \"-O -std=c89 -pedantic-errors -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n+/* { dg-additional-options \"-muintr\" { target { ! ia32 } } }  */\n \n #include <x86gprintrin.h>\n "}, {"sha": "ae56e5e9831f50499d6a4298cbe3e29c64878841", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -Werror-implicit-function-declaration -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n /* { dg-add-options bind_pic_locally } */\n+/* { dg-additional-options \"-muintr\" { target { ! ia32 } } }  */\n \n /* Test that the intrinsics in <x86gprintrin.h> compile with optimization.\n    All of them are defined as inline functions that reference the proper"}, {"sha": "c826acd9f3ee9bbfc7e414f15162f77beae47cf5", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O0 -Werror-implicit-function-declaration -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n /* { dg-add-options bind_pic_locally } */\n+/* { dg-additional-options \"-muintr\" { target { ! ia32 } } }  */\n \n /* Test that the intrinsics in <x86gprintrin.h> compile without optimization.\n    All of them are defined as inline functions that reference the proper"}, {"sha": "e0aa3a782af6350edc4c070144e3c3094c4d362d", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-4.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -14,8 +14,12 @@\n #define __inline\n \n #ifndef DIFFERENT_PRAGMAS\n+#ifdef __x86_64__\n+#pragma GCC target (\"adx,bmi,bmi2,fsgsbase,fxsr,lwp,lzcnt,popcnt,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,uintr,xsaveopt\")\n+#else\n #pragma GCC target (\"adx,bmi,bmi2,fsgsbase,fxsr,lwp,lzcnt,popcnt,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,xsaveopt\")\n #endif\n+#endif\n \n /* popcnintrin.h (POPCNT).  */\n #ifdef DIFFERENT_PRAGMAS"}, {"sha": "a28c16a90e3f99e470d22de8aa86e9c4d5f3fbb1", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-5.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299a53d7979aaa639298b95bd46b69d3a8546f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c?ref=299a53d7979aaa639298b95bd46b69d3a8546f49", "patch": "@@ -27,6 +27,10 @@\n /* rtmintrin.h */\n #define __builtin_ia32_xabort(M) __builtin_ia32_xabort(1)\n \n+#ifdef __x86_64__\n+#pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,enqcmd,fsgsbase,fxsr,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,uintr,xsavec,xsaveopt,xsaves,wbnoinvd\")\n+#else\n #pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,enqcmd,fsgsbase,fxsr,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,xsavec,xsaveopt,xsaves,wbnoinvd\")\n+#endif\n \n #include <x86gprintrin.h>"}]}