{"sha": "418173945d315abc08d2980ed53521fb1892d94b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE4MTczOTQ1ZDMxNWFiYzA4ZDI5ODBlZDUzNTIxZmIxODkyZDk0Yg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-06-10T18:53:35Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-06-10T18:53:35Z"}, "message": "ipa.c (cgraph_non_local_node_p_1): Break out from ...;\n\n\t* ipa.c (cgraph_non_local_node_p_1): Break out from ...;\n\t(cgraph_local_node_p): ... here; handle aliases.\n\t(has_addr_references_p): Break out from ...;\n\t(cgraph_remove_unreachable_nodes) ... here.\n\nFrom-SVN: r174925", "tree": {"sha": "a121323546d2f13093042d7f2888dd97b72586fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a121323546d2f13093042d7f2888dd97b72586fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/418173945d315abc08d2980ed53521fb1892d94b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/418173945d315abc08d2980ed53521fb1892d94b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/418173945d315abc08d2980ed53521fb1892d94b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/418173945d315abc08d2980ed53521fb1892d94b/comments", "author": null, "committer": null, "parents": [{"sha": "fb37c1de6967ec40db33ac86b8196fc187c38afb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb37c1de6967ec40db33ac86b8196fc187c38afb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb37c1de6967ec40db33ac86b8196fc187c38afb"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "f15bb2bd5b9938958ed34e214ee9ea7ece3d5eb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/418173945d315abc08d2980ed53521fb1892d94b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/418173945d315abc08d2980ed53521fb1892d94b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=418173945d315abc08d2980ed53521fb1892d94b", "patch": "@@ -1,3 +1,10 @@\n+2011-06-10  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa.c (cgraph_non_local_node_p_1): Break out from ...;\n+\t(cgraph_local_node_p): ... here; handle aliases.\n+\t(has_addr_references_p): Break out from ...;\n+\t(cgraph_remove_unreachable_nodes) ... here.\n+\n 2011-06-10  Jan Hubicka  <jh@suse.cz>\n \n \t* opts.c (default_options): Enlist OPT_finline_functions_called_once."}, {"sha": "7822cfde371c1dd2191edc4f9426ff933312d4df", "filename": "gcc/ipa.c", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/418173945d315abc08d2980ed53521fb1892d94b/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/418173945d315abc08d2980ed53521fb1892d94b/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=418173945d315abc08d2980ed53521fb1892d94b", "patch": "@@ -113,17 +113,43 @@ process_references (struct ipa_ref_list *list,\n     }\n }\n \n+\n+/* Return true when NODE can not be local. Worker for cgraph_local_node_p.  */\n+\n+static bool\n+cgraph_non_local_node_p_1 (struct cgraph_node *node, void *data ATTRIBUTE_UNUSED)\n+{\n+   return !(cgraph_only_called_directly_or_aliased_p (node)\n+\t    && node->analyzed\n+\t    && !DECL_EXTERNAL (node->decl)\n+\t    && !node->local.externally_visible\n+\t    && !node->reachable_from_other_partition\n+\t    && !node->in_other_partition);\n+}\n+\n /* Return true when function can be marked local.  */\n \n static bool\n cgraph_local_node_p (struct cgraph_node *node)\n {\n-   return (cgraph_only_called_directly_p (node)\n-\t   && node->analyzed\n-\t   && !DECL_EXTERNAL (node->decl)\n-\t   && !node->local.externally_visible\n-\t   && !node->reachable_from_other_partition\n-\t   && !node->in_other_partition);\n+   return !cgraph_for_node_and_aliases (cgraph_function_or_thunk_node (node, NULL),\n+\t\t\t\t\tcgraph_non_local_node_p_1, NULL, true);\n+\t\t\t\t\t\n+}\n+\n+/* Return true when NODE has ADDR reference.  */\n+\n+static bool\n+has_addr_references_p (struct cgraph_node *node,\n+\t\t       void *data ATTRIBUTE_UNUSED)\n+{\n+  int i;\n+  struct ipa_ref *ref;\n+\n+  for (i = 0; ipa_ref_list_refering_iterate (&node->ref_list, i, ref); i++)\n+    if (ref->use == IPA_REF_ADDR)\n+      return true;\n+  return false;\n }\n \n /* Perform reachability analysis and reclaim all unreachable nodes.\n@@ -417,16 +443,7 @@ cgraph_remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n     if (node->address_taken\n \t&& !node->reachable_from_other_partition)\n       {\n-\tint i;\n-        struct ipa_ref *ref;\n-\tbool found = false;\n-        for (i = 0; ipa_ref_list_refering_iterate (&node->ref_list, i, ref)\n-\t\t    && !found; i++)\n-\t  {\n-\t    gcc_assert (ref->use == IPA_REF_ADDR);\n-\t    found = true;\n-\t  }\n-\tif (!found)\n+\tif (!cgraph_for_node_and_aliases (node, has_addr_references_p, NULL, true))\n \t  {\n \t    if (file)\n \t      fprintf (file, \" %s\", cgraph_node_name (node));"}]}