{"sha": "5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJiZjc2NjRjM2UyNjI5MjcwMmQ5ZDdiMzdkNmExZjg3MmY4YjVlYQ==", "commit": {"author": {"name": "Michael Collison", "email": "michael.collison@arm.com", "date": "2017-07-23T22:46:34Z"}, "committer": {"name": "Michael Collison", "email": "collison@gcc.gnu.org", "date": "2017-07-23T22:46:34Z"}, "message": "Add optimized implementation of mersenne twister for aarch64\n\n2017-07-23  Michael Collison  <michael.collison@arm.com>\n\n\tAdd optimized implementation of mersenne twister for aarch64\n\t* config/cpu/aarch64/opt/ext/opt_random.h: New file.\n\t(__arch64_recursion): New function.\n\t(__aarch64_lsr_128): New function.\n\t(__aarch64_lsl_128): New function.\n\t(operator==): New function.\n\t(simd_fast_mersenne_twister_engine): Implement\n\tmethod _M_gen_rand.\n\t* config/cpu/aarch64/opt/bits/opt_random.h: New file.\n\t* include/ext/random: (simd_fast_mersenne_twister_engine):\n\tadd _M_state private array.\n\nFrom-SVN: r250464", "tree": {"sha": "602f85aa3eb7f63722540c741e95cafc2137af74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/602f85aa3eb7f63722540c741e95cafc2137af74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea/comments", "author": null, "committer": null, "parents": [{"sha": "c5014982bac1ec109d90e422f9a10039c21a5aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5014982bac1ec109d90e422f9a10039c21a5aa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5014982bac1ec109d90e422f9a10039c21a5aa0"}], "stats": {"total": 246, "additions": 246, "deletions": 0}, "files": [{"sha": "0a8759717717ef1e12f8bc41f0c0082a4454e388", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea", "patch": "@@ -1,3 +1,17 @@\n+2017-07-23  Michael Collison  <michael.collison@arm.com>\n+\n+\tAdd optimized implementation of mersenne twister for aarch64\n+\t* config/cpu/aarch64/opt/ext/opt_random.h: New file.\n+\t(__arch64_recursion): New function.\n+\t(__aarch64_lsr_128): New function.\n+\t(__aarch64_lsl_128): New function.\n+\t(operator==): New function.\n+\t(simd_fast_mersenne_twister_engine): Implement\n+\tmethod _M_gen_rand.\n+\t* config/cpu/aarch64/opt/bits/opt_random.h: New file.\n+\t* include/ext/random: (simd_fast_mersenne_twister_engine):\n+\tadd _M_state private array.\n+\n 2017-07-23  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/81064"}, {"sha": "fba7ea812adbfd5fe8220ae2cfb351c56edf945b", "filename": "libstdc++-v3/config/cpu/aarch64/opt/bits/opt_random.h", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Faarch64%2Fopt%2Fbits%2Fopt_random.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Faarch64%2Fopt%2Fbits%2Fopt_random.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Faarch64%2Fopt%2Fbits%2Fopt_random.h?ref=5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea", "patch": "@@ -0,0 +1,47 @@\n+// Optimizations for random number functions, aarch64 version -*- C++ -*-\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/opt_random.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{random}\n+ */\n+\n+#ifndef _BITS_OPT_RANDOM_H\n+#define _BITS_OPT_RANDOM_H 1\n+\n+#pragma GCC system_header\n+\n+\n+namespace std _GLIBCXX_VISIBILITY (default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+\n+\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n+\n+#endif // _BITS_OPT_RANDOM_H"}, {"sha": "330050fc7f79c42deafe592bebf54f7a2175d72a", "filename": "libstdc++-v3/config/cpu/aarch64/opt/ext/opt_random.h", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Faarch64%2Fopt%2Fext%2Fopt_random.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Faarch64%2Fopt%2Fext%2Fopt_random.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Faarch64%2Fopt%2Fext%2Fopt_random.h?ref=5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea", "patch": "@@ -0,0 +1,180 @@\n+// Optimizations for random number extensions, aarch64 version -*- C++ -*-\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file ext/random.tcc\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{ext/random}\n+ */\n+\n+#ifndef _EXT_OPT_RANDOM_H\n+#define _EXT_OPT_RANDOM_H 1\n+\n+#pragma GCC system_header\n+\n+#ifdef __ARM_NEON\n+\n+#ifdef __AARCH64EB__\n+# define __VEXT(_A,_B,_C) __builtin_shuffle (_A, _B, (__Uint8x16_t) \\\n+    {16-_C, 17-_C, 18-_C, 19-_C, 20-_C, 21-_C, 22-_C, 23-_C, \\\n+     24-_C, 25-_C, 26-_C, 27-_C, 28-_C, 29-_C, 30-_C, 31-_C})\n+#else\n+# define __VEXT(_A,_B,_C) __builtin_shuffle (_B, _A, (__Uint8x16_t) \\\n+    {_C, _C+1, _C+2, _C+3, _C+4, _C+5, _C+6, _C+7, \\\n+     _C+8, _C+9, _C+10, _C+11, _C+12, _C+13, _C+14, _C+15})\n+#endif\n+\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY (default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  namespace {\n+    // Logical Shift right 128-bits by c * 8 bits\n+\n+    __extension__ extern __inline __Uint32x4_t\n+    __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+    __aarch64_lsr_128 (__Uint8x16_t __a, __const int __c)\n+    {\n+      const __Uint8x16_t __zero = {0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t   0, 0, 0, 0, 0, 0, 0, 0};\n+\n+      return (__Uint32x4_t) __VEXT (__zero, __a, __c);\n+    }\n+\n+    // Logical Shift left 128-bits by c * 8 bits\n+\n+    __extension__ extern __inline __Uint32x4_t\n+    __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+    __aarch64_lsl_128 (__Uint8x16_t __a, __const int __c)\n+    {\n+      const __Uint8x16_t __zero = {0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t   0, 0, 0, 0, 0, 0, 0, 0};\n+\n+      return (__Uint32x4_t) __VEXT (__a, __zero, 16 - __c);\n+    }\n+\n+    template<size_t __sl1, size_t __sl2, size_t __sr1, size_t __sr2>\n+      inline __Uint32x4_t __aarch64_recursion (__Uint32x4_t __a,\n+\t\t\t\t\t       __Uint32x4_t __b,\n+\t\t\t\t\t       __Uint32x4_t __c,\n+\t\t\t\t\t       __Uint32x4_t __d,\n+\t\t\t\t\t       __Uint32x4_t __e)\n+    {\n+      __Uint32x4_t __y = (__b >> __sr1);\n+      __Uint32x4_t __z = __aarch64_lsr_128 ((__Uint8x16_t) __c, __sr2);\n+\n+      __Uint32x4_t __v = __d << __sl1;\n+\n+      __z = __z ^ __a;\n+      __z = __z ^ __v;\n+\n+      __Uint32x4_t __x = __aarch64_lsl_128 ((__Uint8x16_t) __a, __sl2);\n+\n+      __y = __y & __e;\n+      __z = __z ^ __x;\n+      return __z ^ __y;\n+    }\n+}\n+\n+#define _GLIBCXX_OPT_HAVE_RANDOM_SFMT_GEN_READ\t1\n+  template<typename _UIntType, size_t __m,\n+\t   size_t __pos1, size_t __sl1, size_t __sl2,\n+\t   size_t __sr1, size_t __sr2,\n+\t   uint32_t __msk1, uint32_t __msk2,\n+\t   uint32_t __msk3, uint32_t __msk4,\n+\t   uint32_t __parity1, uint32_t __parity2,\n+\t   uint32_t __parity3, uint32_t __parity4>\n+    void simd_fast_mersenne_twister_engine<_UIntType, __m,\n+\t\t\t\t\t   __pos1, __sl1, __sl2, __sr1, __sr2,\n+\t\t\t\t\t   __msk1, __msk2, __msk3, __msk4,\n+\t\t\t\t\t   __parity1, __parity2, __parity3,\n+\t\t\t\t\t   __parity4>::\n+    _M_gen_rand (void)\n+    {\n+      __Uint32x4_t __r1 = _M_state[_M_nstate - 2];\n+      __Uint32x4_t __r2 = _M_state[_M_nstate - 1];\n+\n+      __Uint32x4_t __aData = {__msk1, __msk2, __msk3, __msk4};\n+\n+      size_t __i;\n+      for (__i = 0; __i < _M_nstate - __pos1; ++__i)\n+\t{\n+\t  __Uint32x4_t __r = __aarch64_recursion<__sl1, __sl2, __sr1, __sr2>\n+\t    (_M_state[__i], _M_state[__i + __pos1], __r1, __r2, __aData);\n+\n+\t  _M_state[__i] = __r;\n+\n+\t  __r1 = __r2;\n+\t  __r2 = __r;\n+\t}\n+      for (; __i < _M_nstate; ++__i)\n+\t{\n+\t  __Uint32x4_t __r = __aarch64_recursion<__sl1, __sl2, __sr1, __sr2>\n+\t    (_M_state[__i], _M_state[__i + __pos1 - _M_nstate], __r1, __r2,\n+\t     __aData);\n+\n+\t  _M_state[__i] = __r;\n+\n+\t  __r1 = __r2;\n+\t  __r2 = __r;\n+\t}\n+\n+      _M_pos = 0;\n+    }\n+\n+\n+#define _GLIBCXX_OPT_HAVE_RANDOM_SFMT_OPERATOREQUAL\t1\n+  template<typename _UIntType, size_t __m,\n+\t   size_t __pos1, size_t __sl1, size_t __sl2,\n+\t   size_t __sr1, size_t __sr2,\n+\t   uint32_t __msk1, uint32_t __msk2,\n+\t   uint32_t __msk3, uint32_t __msk4,\n+\t   uint32_t __parity1, uint32_t __parity2,\n+\t   uint32_t __parity3, uint32_t __parity4>\n+    bool\n+    operator==(const __gnu_cxx::simd_fast_mersenne_twister_engine<_UIntType,\n+\t       __m, __pos1, __sl1, __sl2, __sr1, __sr2,\n+\t       __msk1, __msk2, __msk3, __msk4,\n+\t       __parity1, __parity2, __parity3, __parity4>& __lhs,\n+\t       const __gnu_cxx::simd_fast_mersenne_twister_engine<_UIntType,\n+\t       __m, __pos1, __sl1, __sl2, __sr1, __sr2,\n+\t       __msk1, __msk2, __msk3, __msk4,\n+\t       __parity1, __parity2, __parity3, __parity4>& __rhs)\n+    {\n+      if (__lhs._M_pos != __rhs._M_pos)\n+\treturn false;\n+\n+      __Uint32x4_t __res = __lhs._M_state[0] ^ __rhs._M_state[0];\n+\n+      for (size_t __i = 1; __i < __lhs._M_nstate; ++__i)\n+\t__res |= __lhs._M_state[__i] ^ __rhs._M_state[__i];\n+\n+      return (__int128) __res == 0;\n+    }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+  } // namespace\n+\n+#endif // __ARM_NEON\n+\n+#endif // _EXT_OPT_RANDOM_H"}, {"sha": "3665b285de7a200ba4d4a147507ae93fd84f9edf", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=5bbf7664c3e26292702d9d7b37d6a1f872f8b5ea", "patch": "@@ -183,6 +183,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n #ifdef __SSE2__\n \t__m128i _M_state[_M_nstate];\n+#endif\n+#ifdef __ARM_NEON\n+#ifdef __aarch64__\n+\t__Uint32x4_t _M_state[_M_nstate];\n+#endif\n #endif\n \tuint32_t _M_state32[_M_nstate32];\n \tresult_type _M_stateT[state_size];"}]}