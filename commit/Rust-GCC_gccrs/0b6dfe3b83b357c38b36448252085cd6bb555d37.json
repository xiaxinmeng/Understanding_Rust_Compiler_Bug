{"sha": "0b6dfe3b83b357c38b36448252085cd6bb555d37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI2ZGZlM2I4M2IzNTdjMzhiMzY0NDgyNTIwODVjZDZiYjU1NWQzNw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-10-07T07:59:12Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-10-07T07:59:12Z"}, "message": "AlreadyConnectedException.java, [...]: New file.\n\n2002-10-07  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/channels/AlreadyConnectedException.java,\n\tjava/nio/channels/ClosedChannelException.java,\n\tjava/nio/channels/ReadableByteChannel.java,\n\tjava/nio/channels/InterruptibleChannel.java,\n\tjava/nio/channels/Channel.java,\n\tjava/nio/channels/ByteChannel.java,\n\tjava/nio/channels/GatheringByteChannel.java,\n\tjava/nio/channels/ScatteringByteChannel.java,\n\tjava/nio/channels/WritableByteChannel.java,\n\tjava/nio/charset/CharacterCodingException.java,\n\tjava/nio/charset/IllegalCharsetNameException.java,\n\tjava/nio/charset/MalformedInputException.java,\n\tjava/nio/charset/UnmappableCharacterException.java,\n\tjava/nio/charset/UnsupportedCharsetException.java,\n\tjava/nio/charset/spi/CharsetProvider.java: New file.\n\tThese files are exceptions or interfaces,\n\tno real or abstract classes.\n\t* Makefile.am (java_native_source_files): Added new files.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r57885", "tree": {"sha": "a0184488f3d2d3eceb0483923c691d99f76fffaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0184488f3d2d3eceb0483923c691d99f76fffaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b6dfe3b83b357c38b36448252085cd6bb555d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6dfe3b83b357c38b36448252085cd6bb555d37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b6dfe3b83b357c38b36448252085cd6bb555d37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6dfe3b83b357c38b36448252085cd6bb555d37/comments", "author": null, "committer": null, "parents": [{"sha": "4ef7870a4d8aacd145bdbde7ae914f500bf13b56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ef7870a4d8aacd145bdbde7ae914f500bf13b56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ef7870a4d8aacd145bdbde7ae914f500bf13b56"}], "stats": {"total": 987, "additions": 987, "deletions": 0}, "files": [{"sha": "3a5b20bf5423fa1f0b76b0099dc07e1f1a559815", "filename": "libjava/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -1,3 +1,25 @@\n+2002-10-07  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/channels/AlreadyConnectedException.java,\n+\tjava/nio/channels/ClosedChannelException.java,\n+\tjava/nio/channels/ReadableByteChannel.java,\n+\tjava/nio/channels/InterruptibleChannel.java,\n+\tjava/nio/channels/Channel.java,\n+\tjava/nio/channels/ByteChannel.java,\n+\tjava/nio/channels/GatheringByteChannel.java,\n+\tjava/nio/channels/ScatteringByteChannel.java,\n+\tjava/nio/channels/WritableByteChannel.java,\n+\tjava/nio/charset/CharacterCodingException.java,\n+\tjava/nio/charset/IllegalCharsetNameException.java,\n+\tjava/nio/charset/MalformedInputException.java,\n+\tjava/nio/charset/UnmappableCharacterException.java,\n+\tjava/nio/charset/UnsupportedCharsetException.java,\n+\tjava/nio/charset/spi/CharsetProvider.java: New file.\n+\tThese files are exceptions or interfaces,\n+\tno real or abstract classes.\n+\t* Makefile.am (java_native_source_files): Added new files.\n+\t* Makefile.in: Regenerated.\n+\n 2002-10-05  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/InetAddress.java"}, {"sha": "286270658eadbf830601e41a32a14400770c6f3a", "filename": "libjava/Makefile.am", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -1956,11 +1956,26 @@ java/net/URLStreamHandler.java \\\n java/net/URLStreamHandlerFactory.java \\\n java/net/UnknownHostException.java \\\n java/net/UnknownServiceException.java \\\n+java/nio/channels/AlreadyConnectedException.java \\\n+java/nio/channels/ByteChannel.java \\\n+java/nio/channels/Channel.java \\\n+java/nio/channels/ClosedChannelException.java \\\n java/nio/channels/DatagramChannel.java \\\n+java/nio/channels/GatheringByteChannel.java \\\n java/nio/channels/IllegalBlockingModeException.java \\\n+java/nio/channels/InterruptibleChannel.java \\\n+java/nio/channels/ReadableByteChannel.java \\\n+java/nio/channels/ScatteringByteChannel.java \\\n java/nio/channels/ServerSocketChannel.java \\\n java/nio/channels/SocketChannel.java \\\n+java/nio/channels/WritableByteChannel.java \\\n java/nio/channels/spi/AbstractSelectableChannel.java \\\n+java/nio/charset/CharacterCodingException.java \\\n+java/nio/charset/IllegalCharsetNameException.java \\\n+java/nio/charset/MalformedInputException.java \\\n+java/nio/charset/UnmappableCharacterException.java \\\n+java/nio/charset/UnsupportedCharsetException.java \\\n+java/nio/charset/spi/CharsetProvider.java \\\n java/security/AccessControlContext.java \\\n java/security/AccessControlException.java \\\n java/security/AccessController.java \\"}, {"sha": "291f93222cd486326f0d371db339cf18ea05f826", "filename": "libjava/Makefile.in", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -1706,11 +1706,26 @@ java/net/URLStreamHandler.java \\\n java/net/URLStreamHandlerFactory.java \\\n java/net/UnknownHostException.java \\\n java/net/UnknownServiceException.java \\\n+java/nio/channels/AlreadyConnectedException.java \\\n+java/nio/channels/ByteChannel.java \\\n+java/nio/channels/Channel.java \\\n+java/nio/channels/ClosedChannelException.java \\\n java/nio/channels/DatagramChannel.java \\\n+java/nio/channels/GatheringByteChannel.java \\\n java/nio/channels/IllegalBlockingModeException.java \\\n+java/nio/channels/InterruptibleChannel.java \\\n+java/nio/channels/ReadableByteChannel.java \\\n+java/nio/channels/ScatteringByteChannel.java \\\n java/nio/channels/ServerSocketChannel.java \\\n java/nio/channels/SocketChannel.java \\\n+java/nio/channels/WritableByteChannel.java \\\n java/nio/channels/spi/AbstractSelectableChannel.java \\\n+java/nio/charset/CharacterCodingException.java \\\n+java/nio/charset/IllegalCharsetNameException.java \\\n+java/nio/charset/MalformedInputException.java \\\n+java/nio/charset/UnmappableCharacterException.java \\\n+java/nio/charset/UnsupportedCharsetException.java \\\n+java/nio/charset/spi/CharsetProvider.java \\\n java/security/AccessControlContext.java \\\n java/security/AccessControlException.java \\\n java/security/AccessController.java \\\n@@ -2941,11 +2956,25 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/net/natInetAddress.P .deps/java/net/natNetworkInterface.P \\\n .deps/java/net/natPlainDatagramSocketImpl.P \\\n .deps/java/net/natPlainSocketImpl.P \\\n+.deps/java/nio/channels/AlreadyConnectedException.P \\\n+.deps/java/nio/channels/ByteChannel.P .deps/java/nio/channels/Channel.P \\\n+.deps/java/nio/channels/ClosedChannelException.P \\\n .deps/java/nio/channels/DatagramChannel.P \\\n+.deps/java/nio/channels/GatheringByteChannel.P \\\n .deps/java/nio/channels/IllegalBlockingModeException.P \\\n+.deps/java/nio/channels/InterruptibleChannel.P \\\n+.deps/java/nio/channels/ReadableByteChannel.P \\\n+.deps/java/nio/channels/ScatteringByteChannel.P \\\n .deps/java/nio/channels/ServerSocketChannel.P \\\n .deps/java/nio/channels/SocketChannel.P \\\n+.deps/java/nio/channels/WritableByteChannel.P \\\n .deps/java/nio/channels/spi/AbstractSelectableChannel.P \\\n+.deps/java/nio/charset/CharacterCodingException.P \\\n+.deps/java/nio/charset/IllegalCharsetNameException.P \\\n+.deps/java/nio/charset/MalformedInputException.P \\\n+.deps/java/nio/charset/UnmappableCharacterException.P \\\n+.deps/java/nio/charset/UnsupportedCharsetException.P \\\n+.deps/java/nio/charset/spi/CharsetProvider.P \\\n .deps/java/rmi/AccessException.P .deps/java/rmi/AlreadyBoundException.P \\\n .deps/java/rmi/ConnectException.P .deps/java/rmi/ConnectIOException.P \\\n .deps/java/rmi/MarshalException.P .deps/java/rmi/MarshalledObject.P \\"}, {"sha": "29e3cda0efa96f43fc575cc738e5eb9877f4bc21", "filename": "libjava/java/nio/channels/AlreadyConnectedException.java", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FAlreadyConnectedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FAlreadyConnectedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FAlreadyConnectedException.java?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -0,0 +1,50 @@\n+/* AlreadyConnectedException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+import java.io.IOException;\n+\n+public class AlreadyConnectedException extends IOException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public AlreadyConnectedException()\n+  {\n+  }\n+}"}, {"sha": "f4958be2bf7a637df2d54d882ce523425b03312d", "filename": "libjava/java/nio/channels/ByteChannel.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FByteChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FByteChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FByteChannel.java?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -0,0 +1,43 @@\n+/* ByteChannel.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+public interface ByteChannel\n+  extends ReadableByteChannel, WritableByteChannel\n+{\n+}"}, {"sha": "b5272c367768432c27043dc9c60487392b9c95f9", "filename": "libjava/java/nio/channels/Channel.java", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FChannel.java?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -0,0 +1,55 @@\n+/* Channel.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+import java.io.IOException;\n+\n+public interface Channel\n+{\n+  /**\n+   * Tells whether this channel is open or not\n+   */\n+  public boolean isOpen();\n+\n+  /**\n+   * Closes this channel\n+   *\n+   * @exception IOException If an error occurs\n+   */\n+  public void close() throws IOException;\n+}"}, {"sha": "2576d34c3c81efc0d9a23ebea8185633a7bbb39f", "filename": "libjava/java/nio/channels/ClosedChannelException.java", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FClosedChannelException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FClosedChannelException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FClosedChannelException.java?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -0,0 +1,50 @@\n+/* ClosedChannelException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+import java.io.IOException;\n+\n+public class ClosedChannelException extends IOException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public ClosedChannelException()\n+  {\n+  }\n+}"}, {"sha": "3ef12b7b6dcb6f16ec71c274b041c75df3d42998", "filename": "libjava/java/nio/channels/GatheringByteChannel.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FGatheringByteChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FGatheringByteChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FGatheringByteChannel.java?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -0,0 +1,79 @@\n+/* GatheringByteChannel.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+import java.nio.ByteBuffer;\n+import java.io.IOException;\n+\n+public interface GatheringByteChannel\n+  extends WritableByteChannel\n+{\n+  /**\n+   * Writes a sequence of bytes to this channel from a subsequence of\n+   * the given buffers\n+   *\n+   * @exception AsynchronousCloseException If another thread closes this\n+   * channel while the write operation is in progress\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the write operation is in progress, thereby closing\n+   * the channel and setting the current thread's interrupt status\n+   * @exception ClosedChannelException If this channel is closed\n+   * @exception IndexOutOfBoundsException If the preconditions on the offset\n+   * and length parameters do not hold\n+   * @exception IOException If an error occurs\n+   * @exception NonWritableChannelException If this channel was not opened for\n+   * writing\n+   */\n+  public long write(ByteBuffer[] srcs, int offset, int length)\n+    throws IOException;\n+  \n+  /**\n+   * Writes a sequence of bytes to this channel from the given buffers\n+   *\n+   * @exception AsynchronousCloseException If another thread closes this\n+   * channel while the write operation is in progress\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the write operation is in progress, thereby closing\n+   * the channel and setting the current thread's interrupt status\n+   * @exception ClosedChannelException If this channel is closed\n+   * @exception IOException If an error occurs\n+   * @exception NonWritableChannelException If this channel was not opened for\n+   * writing\n+   */\n+  public long write(ByteBuffer[] srcs) throws IOException;\n+}"}, {"sha": "0b55e7619a5ac231670207ff10cdbcd8fe93cc3f", "filename": "libjava/java/nio/channels/InterruptibleChannel.java", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FInterruptibleChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FInterruptibleChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FInterruptibleChannel.java?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -0,0 +1,50 @@\n+/* InterruptibleChannel.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+import java.io.IOException;\n+\n+public interface InterruptibleChannel extends Channel\n+{\n+  /**\n+   * Closes this channel\n+   *\n+   * @exception IOException If an error occurs\n+   */\n+  void close() throws IOException;\n+}"}, {"sha": "d1653cc8d3ee960381a0bb8c533197eb2aa50f33", "filename": "libjava/java/nio/channels/ReadableByteChannel.java", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FReadableByteChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FReadableByteChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FReadableByteChannel.java?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -0,0 +1,59 @@\n+/* ReadableByteChannel.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+public interface ReadableByteChannel extends Channel\n+{\n+  /**\n+   * Reads a sequence of bytes from this channel into the given buffer\n+   *\n+   * @exception AsynchronousCloseException If another thread closes this\n+   * channel while the read operation is in progress\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the read operation is in progress, thereby closing\n+   * the channel and setting the current thread's interrupt status\n+   * @exception ClosedChannelException If this channel is closed\n+   * @exception IOException If an error occurs\n+   * @exception NonReadableChannelException If this channel was not opened for\n+   * reading\n+   */\n+  public int read (ByteBuffer dst) throws IOException;\n+}"}, {"sha": "a9efdbef448d198917db5167080fe71d4f9bfbdd", "filename": "libjava/java/nio/channels/ScatteringByteChannel.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FScatteringByteChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FScatteringByteChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FScatteringByteChannel.java?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -0,0 +1,79 @@\n+/* ScatteringByteChannel.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+import java.nio.ByteBuffer;\n+import java.io.IOException;\n+\n+public interface ScatteringByteChannel\n+  extends ReadableByteChannel\n+{\n+  /**\n+   * Reads a sequence of bytes from this channel into a subsequence of the\n+   * given buffers\n+   *\n+   * @exception AsynchronousCloseException If another thread closes this\n+   * channel while the write operation is in progress\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the write operation is in progress, thereby closing\n+   * the channel and setting the current thread's interrupt status\n+   * @exception ClosedChannelException If this channel is closed\n+   * @exception IndexOutOfBoundsException If the preconditions on the offset\n+   * and length parameters do not hold\n+   * @exception IOException If an error occurs\n+   * @exception NonReadableChannelException If this channel was not opened for\n+   * reading\n+   */\n+  public long read(ByteBuffer[] srcs, int offset, int length)\n+    throws IOException;\n+\n+  /**\n+   * Reads a sequence of bytes from this channel into the given buffers\n+   *\n+   * @exception AsynchronousCloseException If another thread closes this\n+   * channel while the write operation is in progress\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the write operation is in progress, thereby closing\n+   * the channel and setting the current thread's interrupt status\n+   * @exception ClosedChannelException If this channel is closed\n+   * @exception IOException If an error occurs\n+   * @exception NonReadableChannelException If this channel was not opened for\n+   * reading\n+   */\n+  public long read(ByteBuffer[] srcs) throws IOException;\n+}"}, {"sha": "003437e5f3cdab99fa09cb25f78389a2c25e342a", "filename": "libjava/java/nio/channels/WritableByteChannel.java", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FWritableByteChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fchannels%2FWritableByteChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FWritableByteChannel.java?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -0,0 +1,60 @@\n+/* WritableByteChannel.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+public interface WritableByteChannel\n+  extends Channel\n+{\n+  /**\n+   * Writes a sequence of bytes to this channel from the given buffer\n+   *\n+   * @exception AsynchronousCloseException If another thread closes this\n+   * channel while the write operation is in progress\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the write operation is in progress, thereby closing\n+   * the channel and setting the current thread's interrupt status\n+   * @exception ClosedChannelException If this channel is closed\n+   * @exception IOException If an error occurs\n+   * @exception NonWritableChannelException If this channel was not opened for\n+   * writing\n+   */\n+  public int write(ByteBuffer src) throws IOException;\n+}"}, {"sha": "2fba33e95097479cb69274cc9df7d73087034a0e", "filename": "libjava/java/nio/charset/CharacterCodingException.java", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fcharset%2FCharacterCodingException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fcharset%2FCharacterCodingException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2FCharacterCodingException.java?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -0,0 +1,50 @@\n+/* CharacterCodingException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.charset;\n+\n+import java.io.IOException;\n+\n+class CharacterCodingException extends IOException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public CharacterCodingException()\n+  {\n+  }\n+}"}, {"sha": "a3e0593327b9b16b7cc5f7e228d865962d3282db", "filename": "libjava/java/nio/charset/IllegalCharsetNameException.java", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fcharset%2FIllegalCharsetNameException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fcharset%2FIllegalCharsetNameException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2FIllegalCharsetNameException.java?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -0,0 +1,60 @@\n+/* IllegalCharsetNameException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.charset;\n+\n+class IllegalCharsetNameException extends IllegalArgumentException\n+{\n+  private String charsetName;\n+  \n+  /**\n+   * Creates the exception\n+   */\n+  public IllegalCharsetNameException (String charsetName)\n+  {\n+    super ();\n+    this.charsetName = charsetName;\n+  }\n+\n+  /**\n+   * Retrieves the illegal charset name\n+   */\n+  public String getCharsetName ()\n+  {\n+    return charsetName;\n+  }\n+}"}, {"sha": "2111b7978659e76db3fc6d3a2e60e225cfda43a7", "filename": "libjava/java/nio/charset/MalformedInputException.java", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fcharset%2FMalformedInputException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fcharset%2FMalformedInputException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2FMalformedInputException.java?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -0,0 +1,69 @@\n+/* MalformedInputException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.charset;\n+\n+class MalformedInputException extends CharacterCodingException\n+{\n+  private int inputLength;\n+  \n+  /**\n+   * Creates the exception\n+   */\n+  public MalformedInputException (int inputLength)\n+  {\n+    super ();\n+    this.inputLength = inputLength;\n+  }\n+\n+  /**\n+   * Retrieves the illegal charset name\n+   */\n+  public int getInputLength ()\n+  {\n+    return inputLength;\n+  }\n+\n+  /**\n+   * Returns the detail message string of this throwable\n+   */\n+  public String getMessage ()\n+  {\n+    // FIXME: I think this is not correct\n+    return \"\";\n+  }\n+}"}, {"sha": "f1714b8ec41c017899ca6fefbbb0f9dab0e22820", "filename": "libjava/java/nio/charset/UnmappableCharacterException.java", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fcharset%2FUnmappableCharacterException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fcharset%2FUnmappableCharacterException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2FUnmappableCharacterException.java?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -0,0 +1,69 @@\n+/* UnmappableCharacterException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.charset;\n+\n+class UnmappableCharacterException extends CharacterCodingException\n+{\n+  private int inputLength;\n+  \n+  /**\n+   * Creates the exception\n+   */\n+  public UnmappableCharacterException (int inputLength)\n+  {\n+    super ();\n+    this.inputLength = inputLength;\n+  }\n+\n+  /**\n+   * Retrieves the illegal charset name\n+   */\n+  public int getInputLength ()\n+  {\n+    return inputLength;\n+  }\n+\n+  /**\n+   * Returns the detail message string of this throwable\n+   */\n+  public String getMessage ()\n+  {\n+    // FIXME: I think this is not correct\n+    return \"\";\n+  }\n+}"}, {"sha": "943164a6837048c3ebacc8c66cf11abdf9a5fee3", "filename": "libjava/java/nio/charset/UnsupportedCharsetException.java", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fcharset%2FUnsupportedCharsetException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fcharset%2FUnsupportedCharsetException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2FUnsupportedCharsetException.java?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -0,0 +1,60 @@\n+/* UnsupportedCharsetException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.charset;\n+\n+class UnsupportedCharsetException extends IllegalArgumentException\n+{\n+  private String charsetName;\n+  \n+  /**\n+   * Creates the exception\n+   */\n+  public UnsupportedCharsetException (String charsetName)\n+  {\n+    super ();\n+    this.charsetName = charsetName;\n+  }\n+\n+  /**\n+   * Retrieves the illegal charset name\n+   */\n+  public String getCharsetName ()\n+  {\n+    return charsetName;\n+  }\n+}"}, {"sha": "32346a0457c006d639cd65a292cdad928f222163", "filename": "libjava/java/nio/charset/spi/CharsetProvider.java", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fcharset%2Fspi%2FCharsetProvider.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6dfe3b83b357c38b36448252085cd6bb555d37/libjava%2Fjava%2Fnio%2Fcharset%2Fspi%2FCharsetProvider.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2Fspi%2FCharsetProvider.java?ref=0b6dfe3b83b357c38b36448252085cd6bb555d37", "patch": "@@ -0,0 +1,88 @@\n+/* CharsetProvider.java -- charset service provider interface\n+   Copyright (C) 2002 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.charset.spi;\n+\n+import java.nio.charset.Charset;\n+import java.util.Iterator;\n+\n+/**\n+ * This class allows an implementor to provide additional character sets. The\n+ * subclass must have a nullary constructor, and be attached to charset\n+ * implementation classes. These extensions are loaded via the context class\n+ * loader. To provide the charset extension, all files named\n+ * <code>META-INF/services/java.nio.charset.spi.CharsetProvider</code> are\n+ * read from the classpath. Each one should be a UTF-8 encoded list of\n+ * fully-qualified names of concrete subclasses of this class; whitespace is\n+ * ignored, and '#' starts comments. Duplicates are ignored. The\n+ * implementations must be accessible to the classloader that requests them.\n+ *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Charset\n+ * @since 1.4\n+ * @status updated to 1.4\n+ */\n+public abstract class CharsetProvider\n+{\n+  /**\n+   * Initialize a new charset provider. This performs a security check on\n+   * RuntimePermission(\"charsetProvider\").\n+   *\n+   * @throws SecurityException if building a new set is not allowed\n+   */\n+  protected CharsetProvider()\n+  {\n+    SecurityManager s = System.getSecurityManager();\n+    if (s != null)\n+      s.checkPermission(new RuntimePermission(\"charsetProvider\"));\n+  }\n+\n+  /**\n+   * Returns an iterator over the charsets defined by this provider.\n+   *\n+   * @return the iterator\n+   * @see Charset#availableCharsets()\n+   */\n+  public abstract Iterator charsets();\n+\n+  /**\n+   * Returns the named charset, by canonical name or alias.\n+   *\n+   * @return the charset, or null if not supported\n+   */\n+  public abstract Charset charsetForName(String name);\n+} // class CharsetProvider"}]}