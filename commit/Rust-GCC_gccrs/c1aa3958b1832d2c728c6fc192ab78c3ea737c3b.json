{"sha": "c1aa3958b1832d2c728c6fc192ab78c3ea737c3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFhYTM5NThiMTgzMmQyYzcyOGM2ZmMxOTJhYjc4YzNlYTczN2MzYg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2003-10-29T21:02:14Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2003-10-29T21:02:14Z"}, "message": "rs6000.h (UNITS_PER_WORD): Revert to !TARGET_POWERPC64.\n\n        * config/rs6000/rs6000.h (UNITS_PER_WORD): Revert to\n        !TARGET_POWERPC64.\n        (UNITS_PER_GPR_WORD): Delete.\n        (HARD_REGNO_NREGS): Revert to UNITS_PER_WORD.\n        (HARD_REGNO_MODE_OK): Same.\n        (CLASS_MAX_NREGS): Same.\n\nFrom-SVN: r73060", "tree": {"sha": "87e4549afeff36eca001a432b06d026cad110a23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87e4549afeff36eca001a432b06d026cad110a23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1aa3958b1832d2c728c6fc192ab78c3ea737c3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1aa3958b1832d2c728c6fc192ab78c3ea737c3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1aa3958b1832d2c728c6fc192ab78c3ea737c3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1aa3958b1832d2c728c6fc192ab78c3ea737c3b/comments", "author": null, "committer": null, "parents": [{"sha": "e08fde98b7cbfb5307bb552e39bd50b472af871c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08fde98b7cbfb5307bb552e39bd50b472af871c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08fde98b7cbfb5307bb552e39bd50b472af871c"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "fddd65dafbbe84f1e40095d9177cd66411f1979f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1aa3958b1832d2c728c6fc192ab78c3ea737c3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1aa3958b1832d2c728c6fc192ab78c3ea737c3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1aa3958b1832d2c728c6fc192ab78c3ea737c3b", "patch": "@@ -1,3 +1,12 @@\n+2003-10-29  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.h (UNITS_PER_WORD): Revert to\n+\t!TARGET_POWERPC64.\n+\t(UNITS_PER_GPR_WORD): Delete.\n+\t(HARD_REGNO_NREGS): Revert to UNITS_PER_WORD.\n+\t(HARD_REGNO_MODE_OK): Same.\n+\t(CLASS_MAX_NREGS): Same.\n+\n 2003-10-29  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.h (ASM_COMMENT_START): Define."}, {"sha": "a742f5308fc858a002a660b04cb8713e98de7b82", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1aa3958b1832d2c728c6fc192ab78c3ea737c3b/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1aa3958b1832d2c728c6fc192ab78c3ea737c3b/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c1aa3958b1832d2c728c6fc192ab78c3ea737c3b", "patch": "@@ -625,7 +625,7 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n #define MAX_BITS_PER_WORD 64\n \n /* Width of a word, in units (bytes).  */\n-#define UNITS_PER_WORD (TARGET_32BIT ? 4 : 8)\n+#define UNITS_PER_WORD (! TARGET_POWERPC64 ? 4 : 8)\n #ifdef IN_LIBGCC2\n #define MIN_UNITS_PER_WORD UNITS_PER_WORD\n #else\n@@ -988,16 +988,14 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n    POWER and PowerPC GPRs hold 32 bits worth;\n    PowerPC64 GPRs and FPRs point register holds 64 bits worth.  */\n \n-#define UNITS_PER_GPR_WORD (! TARGET_POWERPC64 ? 4 : 8)\n-\n #define HARD_REGNO_NREGS(REGNO, MODE)\t\t\t\t\t\\\n   (FP_REGNO_P (REGNO)\t\t\t\t\t\t\t\\\n    ? ((GET_MODE_SIZE (MODE) + UNITS_PER_FP_WORD - 1) / UNITS_PER_FP_WORD) \\\n    : (SPE_SIMD_REGNO_P (REGNO) && TARGET_SPE && SPE_VECTOR_MODE (MODE))   \\\n    ? ((GET_MODE_SIZE (MODE) + UNITS_PER_SPE_WORD - 1) / UNITS_PER_SPE_WORD) \\\n    : ALTIVEC_REGNO_P (REGNO)\t\t\t\t\t\t\\\n    ? ((GET_MODE_SIZE (MODE) + UNITS_PER_ALTIVEC_WORD - 1) / UNITS_PER_ALTIVEC_WORD) \\\n-   : ((GET_MODE_SIZE (MODE) + UNITS_PER_GPR_WORD - 1) / UNITS_PER_GPR_WORD))\n+   : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n #define HARD_REGNO_CALL_PART_CLOBBERED(REGNO, MODE)\t\\\n   ((TARGET_32BIT && TARGET_POWERPC64\t\t\t\\\n@@ -1042,7 +1040,7 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n    : SPE_SIMD_REGNO_P (REGNO) && TARGET_SPE && SPE_VECTOR_MODE (MODE) ? 1 \\\n    : CR_REGNO_P (REGNO) ? GET_MODE_CLASS (MODE) == MODE_CC\t\t\\\n    : XER_REGNO_P (REGNO) ? (MODE) == PSImode\t\t\t\t\\\n-   : GET_MODE_SIZE (MODE) <= UNITS_PER_GPR_WORD)\n+   : GET_MODE_SIZE (MODE) <= UNITS_PER_WORD)\n \n /* Value is 1 if it is a good idea to tie two pseudo registers\n    when one has mode MODE1 and one has mode MODE2.\n@@ -1465,7 +1463,7 @@ enum reg_class\n #define CLASS_MAX_NREGS(CLASS, MODE)\t\t\t\t\t\\\n  (((CLASS) == FLOAT_REGS) \t\t\t\t\t\t\\\n   ? ((GET_MODE_SIZE (MODE) + UNITS_PER_FP_WORD - 1) / UNITS_PER_FP_WORD) \\\n-  : ((GET_MODE_SIZE (MODE) + UNITS_PER_GPR_WORD - 1) / UNITS_PER_GPR_WORD))\n+  : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n \n /* Return a class of registers that cannot change FROM mode to TO mode.  */"}]}