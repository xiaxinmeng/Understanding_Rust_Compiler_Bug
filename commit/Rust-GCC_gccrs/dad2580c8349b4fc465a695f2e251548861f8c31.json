{"sha": "dad2580c8349b4fc465a695f2e251548861f8c31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFkMjU4MGM4MzQ5YjRmYzQ2NWE2OTVmMmUyNTE1NDg4NjFmOGMzMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-07-24T16:06:58Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-07-24T16:06:58Z"}, "message": "Fix segfault in -fsave-optimization-record (PR tree-optimization/86636)\n\nThere are various ways that it's possible for a gimple statement to\nhave an UNKNOWN_LOCATION, and for that UNKNOWN_LOCATION to be wrapped\nin an ad-hoc location to capture inlining information.\n\nFor such a location, LOCATION_FILE (loc) is NULL.\n\nVarious places in -fsave-optimization-record were checking for\n  loc != UNKNOWN_LOCATION\nand were passing LOCATION_FILE (loc) to code that assumed a non-NULL\nfilename, thus leading to segfaults for the above cases.\n\nThis patch updates the tests to use\n  LOCATION_LOCUS (loc) != UNKNOWN_LOCATION\ninstead, to look through ad-hoc location wrappers, fixing the segfaults.\n\nIt also adds various assertions to the affected code.\n\ngcc/ChangeLog:\n\tPR tree-optimization/86636\n\t* json.cc (json::object::set): Fix comment.  Add assertions.\n\t(json::array::append): Move here from json.h.  Add comment and an\n\tassertion.\n\t(json::string::string): Likewise.\n\t* json.h (json::array::append): Move to json.cc.\n\t(json::string::string): Likewise.\n\t* optinfo-emit-json.cc\n\t(optrecord_json_writer::impl_location_to_json): Assert that we\n\taren't attempting to write out UNKNOWN_LOCATION, or an ad-hoc\n\twrapper around it.  Expand the location once, rather than three\n\ttimes.\n\t(optrecord_json_writer::inlining_chain_to_json): Fix the check for\n\tUNKNOWN_LOCATION, to use LOCATION_LOCUS to look through ad-hoc\n\twrappers.\n\t(optrecord_json_writer::optinfo_to_json): Likewise, in four\n\tplaces.  Fix some overlong lines.\n\ngcc/testsuite/ChangeLog:\n\tPR tree-optimization/86636\n\t* gcc.c-torture/compile/pr86636.c: New test.\n\nFrom-SVN: r262950", "tree": {"sha": "fcbc70ee67c79c6671935010a9ff4e91b5119c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcbc70ee67c79c6671935010a9ff4e91b5119c4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dad2580c8349b4fc465a695f2e251548861f8c31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad2580c8349b4fc465a695f2e251548861f8c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dad2580c8349b4fc465a695f2e251548861f8c31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad2580c8349b4fc465a695f2e251548861f8c31/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8da03df56724152e4f524160b68e63c615d4632a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da03df56724152e4f524160b68e63c615d4632a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8da03df56724152e4f524160b68e63c615d4632a"}], "stats": {"total": 86, "additions": 73, "deletions": 13}, "files": [{"sha": "02991c17bc5f2d4b540173ed85897af72ec9b4f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2580c8349b4fc465a695f2e251548861f8c31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2580c8349b4fc465a695f2e251548861f8c31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dad2580c8349b4fc465a695f2e251548861f8c31", "patch": "@@ -1,3 +1,23 @@\n+2018-07-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR tree-optimization/86636\n+\t* json.cc (json::object::set): Fix comment.  Add assertions.\n+\t(json::array::append): Move here from json.h.  Add comment and an\n+\tassertion.\n+\t(json::string::string): Likewise.\n+\t* json.h (json::array::append): Move to json.cc.\n+\t(json::string::string): Likewise.\n+\t* optinfo-emit-json.cc\n+\t(optrecord_json_writer::impl_location_to_json): Assert that we\n+\taren't attempting to write out UNKNOWN_LOCATION, or an ad-hoc\n+\twrapper around it.  Expand the location once, rather than three\n+\ttimes.\n+\t(optrecord_json_writer::inlining_chain_to_json): Fix the check for\n+\tUNKNOWN_LOCATION, to use LOCATION_LOCUS to look through ad-hoc\n+\twrappers.\n+\t(optrecord_json_writer::optinfo_to_json): Likewise, in four\n+\tplaces.  Fix some overlong lines.\n+\n 2018-07-24  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* config/aarch64/aarch64-simd.md"}, {"sha": "3ead98073f6a31d7fdd285e2dc0ed8f94d7829a9", "filename": "gcc/json.cc", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2580c8349b4fc465a695f2e251548861f8c31/gcc%2Fjson.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2580c8349b4fc465a695f2e251548861f8c31/gcc%2Fjson.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjson.cc?ref=dad2580c8349b4fc465a695f2e251548861f8c31", "patch": "@@ -76,12 +76,15 @@ object::print (pretty_printer *pp) const\n   pp_character (pp, '}');\n }\n \n-/* Set the json::value * for KEY, taking ownership of VALUE\n+/* Set the json::value * for KEY, taking ownership of V\n    (and taking a copy of KEY if necessary).  */\n \n void\n object::set (const char *key, value *v)\n {\n+  gcc_assert (key);\n+  gcc_assert (v);\n+\n   value **ptr = m_map.get (key);\n   if (ptr)\n     {\n@@ -126,6 +129,15 @@ array::print (pretty_printer *pp) const\n   pp_character (pp, ']');\n }\n \n+/* Append non-NULL value V to a json::array, taking ownership of V.  */\n+\n+void\n+array::append (value *v)\n+{\n+  gcc_assert (v);\n+  m_elements.safe_push (v);\n+}\n+\n /* class json::number, a subclass of json::value, wrapping a double.  */\n \n /* Implementation of json::value::print for json::number.  */\n@@ -140,6 +152,16 @@ number::print (pretty_printer *pp) const\n \n /* class json::string, a subclass of json::value.  */\n \n+/* json::string's ctor.  */\n+\n+string::string (const char *utf8)\n+{\n+  gcc_assert (utf8);\n+  m_utf8 = xstrdup (utf8);\n+}\n+\n+/* Implementation of json::value::print for json::string.  */\n+\n void\n string::print (pretty_printer *pp) const\n {"}, {"sha": "154d9e1b57517a75323fb2dc58981935c87ee1e5", "filename": "gcc/json.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2580c8349b4fc465a695f2e251548861f8c31/gcc%2Fjson.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2580c8349b4fc465a695f2e251548861f8c31/gcc%2Fjson.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjson.h?ref=dad2580c8349b4fc465a695f2e251548861f8c31", "patch": "@@ -107,7 +107,7 @@ class array : public value\n   enum kind get_kind () const FINAL OVERRIDE { return JSON_ARRAY; }\n   void print (pretty_printer *pp) const FINAL OVERRIDE;\n \n-  void append (value *v) { m_elements.safe_push (v); }\n+  void append (value *v);\n \n  private:\n   auto_vec<value *> m_elements;\n@@ -134,7 +134,7 @@ class number : public value\n class string : public value\n {\n  public:\n-  string (const char *utf8) : m_utf8 (xstrdup (utf8)) {}\n+  string (const char *utf8);\n   ~string () { free (m_utf8); }\n \n   enum kind get_kind () const FINAL OVERRIDE { return JSON_STRING; }"}, {"sha": "6460a812f9e8e09377587a3fb8963b734b2e0fa9", "filename": "gcc/optinfo-emit-json.cc", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2580c8349b4fc465a695f2e251548861f8c31/gcc%2Foptinfo-emit-json.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2580c8349b4fc465a695f2e251548861f8c31/gcc%2Foptinfo-emit-json.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptinfo-emit-json.cc?ref=dad2580c8349b4fc465a695f2e251548861f8c31", "patch": "@@ -202,10 +202,12 @@ optrecord_json_writer::impl_location_to_json (dump_impl_location_t loc)\n json::object *\n optrecord_json_writer::location_to_json (location_t loc)\n {\n+  gcc_assert (LOCATION_LOCUS (loc) != UNKNOWN_LOCATION);\n+  expanded_location exploc = expand_location (loc);\n   json::object *obj = new json::object ();\n-  obj->set (\"file\", new json::string (LOCATION_FILE (loc)));\n-  obj->set (\"line\", new json::number (LOCATION_LINE (loc)));\n-  obj->set (\"column\", new json::number (LOCATION_COLUMN (loc)));\n+  obj->set (\"file\", new json::string (exploc.file));\n+  obj->set (\"line\", new json::number (exploc.line));\n+  obj->set (\"column\", new json::number (exploc.column));\n   return obj;\n }\n \n@@ -330,7 +332,7 @@ optrecord_json_writer::inlining_chain_to_json (location_t loc)\n \t  const char *printable_name\n \t    = lang_hooks.decl_printable_name (fndecl, 2);\n \t  obj->set (\"fndecl\", new json::string (printable_name));\n-\t  if (*locus != UNKNOWN_LOCATION)\n+\t  if (LOCATION_LOCUS (*locus) != UNKNOWN_LOCATION)\n \t    obj->set (\"site\", location_to_json (*locus));\n \t  array->append (obj);\n \t}\n@@ -371,8 +373,9 @@ optrecord_json_writer::optinfo_to_json (const optinfo *optinfo)\n \t    json_item->set (\"expr\", new json::string (item->get_text ()));\n \n \t    /* Capture any location for the node.  */\n-\t    if (item->get_location () != UNKNOWN_LOCATION)\n-\t      json_item->set (\"location\", location_to_json (item->get_location ()));\n+\t    if (LOCATION_LOCUS (item->get_location ()) != UNKNOWN_LOCATION)\n+\t      json_item->set (\"location\",\n+\t\t\t      location_to_json (item->get_location ()));\n \n \t    message->append (json_item);\n \t  }\n@@ -383,8 +386,9 @@ optrecord_json_writer::optinfo_to_json (const optinfo *optinfo)\n \t    json_item->set (\"stmt\", new json::string (item->get_text ()));\n \n \t    /* Capture any location for the stmt.  */\n-\t    if (item->get_location () != UNKNOWN_LOCATION)\n-\t      json_item->set (\"location\", location_to_json (item->get_location ()));\n+\t    if (LOCATION_LOCUS (item->get_location ()) != UNKNOWN_LOCATION)\n+\t      json_item->set (\"location\",\n+\t\t\t      location_to_json (item->get_location ()));\n \n \t    message->append (json_item);\n \t  }\n@@ -395,8 +399,9 @@ optrecord_json_writer::optinfo_to_json (const optinfo *optinfo)\n \t    json_item->set (\"symtab_node\", new json::string (item->get_text ()));\n \n \t    /* Capture any location for the node.  */\n-\t    if (item->get_location () != UNKNOWN_LOCATION)\n-\t      json_item->set (\"location\", location_to_json (item->get_location ()));\n+\t    if (LOCATION_LOCUS (item->get_location ()) != UNKNOWN_LOCATION)\n+\t      json_item->set (\"location\",\n+\t\t\t      location_to_json (item->get_location ()));\n \t    message->append (json_item);\n \t  }\n \t  break;"}, {"sha": "f8cf9eeb466176a2a444825f87914a83a04f222d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2580c8349b4fc465a695f2e251548861f8c31/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2580c8349b4fc465a695f2e251548861f8c31/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dad2580c8349b4fc465a695f2e251548861f8c31", "patch": "@@ -1,3 +1,8 @@\n+2018-07-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR tree-optimization/86636\n+\t* gcc.c-torture/compile/pr86636.c: New test.\n+\n 2018-07-24  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* gcc.target/aarch64/vect-su-add-sub.c: New."}, {"sha": "2fe2f70486bceb4b83666dadd10340a807e5f286", "filename": "gcc/testsuite/gcc.c-torture/compile/pr86636.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2580c8349b4fc465a695f2e251548861f8c31/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86636.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2580c8349b4fc465a695f2e251548861f8c31/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86636.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86636.c?ref=dad2580c8349b4fc465a695f2e251548861f8c31", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-options \"-fsave-optimization-record -ftree-loop-vectorize -ftree-parallelize-loops=2\" } */\n+\n+void\n+n2 (int ih)\n+{\n+  while (ih < 1)\n+    ++ih;\n+}"}]}