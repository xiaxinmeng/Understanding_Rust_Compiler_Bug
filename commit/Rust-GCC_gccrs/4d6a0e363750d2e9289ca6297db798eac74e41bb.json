{"sha": "4d6a0e363750d2e9289ca6297db798eac74e41bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ2YTBlMzYzNzUwZDJlOTI4OWNhNjI5N2RiNzk4ZWFjNzRlNDFiYg==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T23:31:32Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T23:31:32Z"}, "message": "trans.h (struct gfc_ss): New field nested_ss.\n\n\t* trans.h (struct gfc_ss): New field nested_ss.\n\t* trans-expr.c (gfc_advance_se_ss_chain): Update assertion.\n\nFrom-SVN: r180893", "tree": {"sha": "6ec2157829ee7f05e68abf4e587f9b8b1a85d27a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ec2157829ee7f05e68abf4e587f9b8b1a85d27a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d6a0e363750d2e9289ca6297db798eac74e41bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d6a0e363750d2e9289ca6297db798eac74e41bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d6a0e363750d2e9289ca6297db798eac74e41bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d6a0e363750d2e9289ca6297db798eac74e41bb/comments", "author": null, "committer": null, "parents": [{"sha": "f49afcb009a548aa46c36344d8ebe4d0648ae429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f49afcb009a548aa46c36344d8ebe4d0648ae429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f49afcb009a548aa46c36344d8ebe4d0648ae429"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "92be1535b9eb7a26fdf79a5a0eae7584e532f5c8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d6a0e363750d2e9289ca6297db798eac74e41bb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d6a0e363750d2e9289ca6297db798eac74e41bb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4d6a0e363750d2e9289ca6297db798eac74e41bb", "patch": "@@ -1,3 +1,8 @@\n+2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans.h (struct gfc_ss): New field nested_ss.\n+\t* trans-expr.c (gfc_advance_se_ss_chain): Update assertion.\n+\n 2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans-array.c (set_vector_loop_bounds): Loop over the parents."}, {"sha": "4cfdc3e09067a5d0ee715db0e5b87f6efed791c1", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d6a0e363750d2e9289ca6297db798eac74e41bb/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d6a0e363750d2e9289ca6297db798eac74e41bb/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=4d6a0e363750d2e9289ca6297db798eac74e41bb", "patch": "@@ -92,7 +92,8 @@ gfc_advance_se_ss_chain (gfc_se * se)\n   while (p != NULL)\n     {\n       /* Simple consistency check.  */\n-      gcc_assert (p->parent == NULL || p->parent->ss == p->ss);\n+      gcc_assert (p->parent == NULL || p->parent->ss == p->ss\n+\t\t  || p->parent->ss->nested_ss == p->ss);\n \n       /* If we were in a nested loop, the next scalarized expression can be\n \t on the parent ss' next pointer.  Thus we should not take the next"}, {"sha": "06088797f64fbfd27f0e548b47b5ac0e90cfc803", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d6a0e363750d2e9289ca6297db798eac74e41bb/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d6a0e363750d2e9289ca6297db798eac74e41bb/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=4d6a0e363750d2e9289ca6297db798eac74e41bb", "patch": "@@ -249,6 +249,11 @@ typedef struct gfc_ss\n   /* Non-null if the ss is part of a nested loop.  */\n   struct gfc_ss *parent;\n \n+  /* If the evaluation of an expression requires a nested loop (for example\n+     if the sum intrinsic is evaluated inline), this points to the nested\n+     loop's gfc_ss.  */\n+  struct gfc_ss *nested_ss;\n+\n   /* The loop this gfc_ss is in.  */\n   struct gfc_loopinfo *loop;\n "}]}