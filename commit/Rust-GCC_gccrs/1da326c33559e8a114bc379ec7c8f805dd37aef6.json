{"sha": "1da326c33559e8a114bc379ec7c8f805dd37aef6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRhMzI2YzMzNTU5ZThhMTE0YmMzNzllYzdjOGY4MDVkZDM3YWVmNg==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-02-17T21:33:43Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-02-17T21:33:43Z"}, "message": "(c-decl.c, [...]): Replace DECL_SAVED_INSNS with DECL_STRUCT_FUNCTION.\n\n        * (c-decl.c, c-semantics.c, calls.c, cgraph.c, cgraphunit.c,\n        function.c, integrate.c, print-tree.c, toplev.c, tree-optimize.c,\n        tree.h): Replace DECL_SAVED_INSNS with DECL_STRUCT_FUNCTION.\n        * ada/utils.c: Likewise.\n        * cp/decl.c: Likewise.\n        * f/com.c: Likewise.\n        * java/class.c: Likewise.\n\nFrom-SVN: r77985", "tree": {"sha": "58f53ff8b90ef0d35498ee8d08bb3febee99cd2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58f53ff8b90ef0d35498ee8d08bb3febee99cd2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1da326c33559e8a114bc379ec7c8f805dd37aef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1da326c33559e8a114bc379ec7c8f805dd37aef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1da326c33559e8a114bc379ec7c8f805dd37aef6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1da326c33559e8a114bc379ec7c8f805dd37aef6/comments", "author": null, "committer": null, "parents": [{"sha": "65c0764148b74f9dda9348242e6ddf6b7733278b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c0764148b74f9dda9348242e6ddf6b7733278b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65c0764148b74f9dda9348242e6ddf6b7733278b"}], "stats": {"total": 117, "additions": 67, "deletions": 50}, "files": [{"sha": "5ece10cfede48b14d71a387e1e5f14d003971bdc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1da326c33559e8a114bc379ec7c8f805dd37aef6", "patch": "@@ -1,3 +1,13 @@\n+2004-02017  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* (c-decl.c, c-semantics.c, calls.c, cgraph.c, cgraphunit.c,\n+\tfunction.c, integrate.c, print-tree.c, toplev.c, tree-optimize.c,\n+\ttree.h): Replace DECL_SAVED_INSNS with DECL_STRUCT_FUNCTION.\n+\t* ada/utils.c: Likewise.\n+\t* cp/decl.c: Likewise.\n+\t* f/com.c: Likewise.\n+\t* java/class.c: Likewise.\n+\n 2004-02-17  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.md: Fix comment typos."}, {"sha": "30939d66c6a9e9e67bae959e419608bca665a873", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=1da326c33559e8a114bc379ec7c8f805dd37aef6", "patch": "@@ -1929,7 +1929,7 @@ end_subprog_body (void)\n        cico_list != 0; cico_list = TREE_CHAIN (cico_list))\n     TREE_VALUE (cico_list) = 0;\n \n-  if (DECL_SAVED_INSNS (current_function_decl) == 0)\n+  if (DECL_STRUCT_FUNCTION (current_function_decl) == 0)\n     {\n       /* Throw away DECL_RTL in any PARM_DECLs unless this function\n \t was saved for inline, in which case the DECL_RTLs are in"}, {"sha": "0f76b88eaf9d3bf9b294ddc24d3cb8b9f2089f53", "filename": "gcc/c-decl.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1da326c33559e8a114bc379ec7c8f805dd37aef6", "patch": "@@ -1441,7 +1441,7 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t{\n \t  DECL_RESULT (newdecl) = DECL_RESULT (olddecl);\n \t  DECL_INITIAL (newdecl) = DECL_INITIAL (olddecl);\n-\t  DECL_SAVED_INSNS (newdecl) = DECL_SAVED_INSNS (olddecl);\n+\t  DECL_STRUCT_FUNCTION (newdecl) = DECL_STRUCT_FUNCTION (olddecl);\n \t  DECL_SAVED_TREE (newdecl) = DECL_SAVED_TREE (olddecl);\n \t  DECL_ARGUMENTS (newdecl) = DECL_ARGUMENTS (olddecl);\n \n@@ -6066,8 +6066,9 @@ finish_function (void)\n       && current_function_returns_null)\n     warning (\"this function may return with or without a value\");\n \n-  /* We're leaving the context of this function, so zap cfun.  It's still in\n-     DECL_SAVED_INSNS, and we'll restore it in tree_rest_of_compilation.  */\n+  /* We're leaving the context of this function, so zap cfun.\n+     It's still in DECL_STRUCT_FUNCTION , and we'll restore it in\n+     tree_rest_of_compilation.  */\n   cfun = NULL;\n \n   /* ??? Objc emits functions after finalizing the compilation unit.\n@@ -6240,7 +6241,7 @@ c_pop_function_context (struct function *f)\n {\n   struct language_function *p = f->language;\n \n-  if (DECL_SAVED_INSNS (current_function_decl) == 0\n+  if (DECL_STRUCT_FUNCTION (current_function_decl) == 0\n       && DECL_SAVED_TREE (current_function_decl) == NULL_TREE)\n     {\n       /* Stop pointing to the local nodes about to be freed.  */"}, {"sha": "17a301cffffe9b363b0bae3bca37a603bb3d5a86", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=1da326c33559e8a114bc379ec7c8f805dd37aef6", "patch": "@@ -640,8 +640,8 @@ genrtl_scope_stmt (tree t)\n \t{\n \t  if (TREE_CODE (fn) == FUNCTION_DECL\n \t      && DECL_CONTEXT (fn) == current_function_decl\n-\t      && DECL_SAVED_INSNS (fn)\n-\t      && DECL_SAVED_INSNS (fn)->saved_for_inline\n+\t      && DECL_STRUCT_FUNCTION (fn)\n+\t      && DECL_STRUCT_FUNCTION (fn)->saved_for_inline\n \t      && !TREE_ASM_WRITTEN (fn)\n \t      && TREE_ADDRESSABLE (fn))\n \t    {"}, {"sha": "82664b5232c44822459897e92765a9eb9315a7c1", "filename": "gcc/calls.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=1da326c33559e8a114bc379ec7c8f805dd37aef6", "patch": "@@ -1778,11 +1778,11 @@ try_to_integrate (tree fndecl, tree actparms, rtx target, int ignore,\n \t      rtx insn = NULL_RTX, seq;\n \n \t      /* Look for a call in the inline function code.\n-\t         If DECL_SAVED_INSNS (fndecl)->outgoing_args_size is\n+\t         If DECL_STRUCT_FUNCTION (fndecl)->outgoing_args_size is\n \t         nonzero then there is a call and it is not necessary\n \t         to scan the insns.  */\n \n-\t      if (DECL_SAVED_INSNS (fndecl)->outgoing_args_size == 0)\n+\t      if (DECL_STRUCT_FUNCTION (fndecl)->outgoing_args_size == 0)\n \t\tfor (insn = first_insn; insn; insn = NEXT_INSN (insn))\n \t\t  if (GET_CODE (insn) == CALL_INSN)\n \t\t    break;\n@@ -1806,8 +1806,9 @@ try_to_integrate (tree fndecl, tree actparms, rtx target, int ignore,\n \t\t     value of reg_parm_stack_space is wrong, but gives\n \t\t     correct results on all supported machines.  */\n \n-\t\t  int adjust = (DECL_SAVED_INSNS (fndecl)->outgoing_args_size\n-\t\t\t\t+ reg_parm_stack_space);\n+\t\t  int adjust =\n+\t\t\t(DECL_STRUCT_FUNCTION (fndecl)->outgoing_args_size\n+\t\t\t + reg_parm_stack_space);\n \n \t\t  start_sequence ();\n \t\t  emit_stack_save (SAVE_BLOCK, &old_stack_level, NULL_RTX);\n@@ -2194,8 +2195,8 @@ expand_call (tree exp, rtx target, int ignore)\n       if (!flag_no_inline\n \t  && fndecl != current_function_decl\n \t  && DECL_INLINE (fndecl)\n-\t  && DECL_SAVED_INSNS (fndecl)\n-\t  && DECL_SAVED_INSNS (fndecl)->inlinable)\n+\t  && DECL_STRUCT_FUNCTION (fndecl)\n+\t  && DECL_STRUCT_FUNCTION (fndecl)->inlinable)\n \tis_integrable = 1;\n       else if (! TREE_ADDRESSABLE (fndecl))\n \t{"}, {"sha": "8cee3dfbffb76545077349ea1d56f1995429c3f8", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=1da326c33559e8a114bc379ec7c8f805dd37aef6", "patch": "@@ -235,7 +235,7 @@ cgraph_remove_node (struct cgraph_node *node)\n   if (node->next)\n     node->next->previous = node->previous;\n   DECL_SAVED_TREE (node->decl) = NULL;\n-  DECL_SAVED_INSNS (node->decl) = NULL;\n+  DECL_STRUCT_FUNCTION (node->decl) = NULL;\n   DECL_ARGUMENTS (node->decl) = NULL;\n   DECL_INITIAL (node->decl) = error_mark_node;\n   slot = "}, {"sha": "79bbe6d3e0fd1ba2706b157f714bba7d24ede5dc", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=1da326c33559e8a114bc379ec7c8f805dd37aef6", "patch": "@@ -232,7 +232,7 @@ cgraph_finalize_function (tree decl, bool nested)\n   /* We will never really output the function body, clear the SAVED_INSNS array\n      early then.  */\n   if (DECL_EXTERNAL (decl))\n-    DECL_SAVED_INSNS (decl) = NULL;\n+    DECL_STRUCT_FUNCTION (decl) = NULL;\n }\n \n /* Walk tree and record all calls.  Called via walk_tree.  */\n@@ -481,7 +481,7 @@ cgraph_mark_functions_to_output (void)\n \t  && !DECL_EXTERNAL (decl))\n \tnode->output = 1;\n       else\n-        DECL_SAVED_INSNS (decl) = NULL;\n+        DECL_STRUCT_FUNCTION (decl) = NULL;\n     }\n }\n \n@@ -861,7 +861,7 @@ cgraph_remove_unreachable_nodes (void)\n \t  int local_insns;\n \t  tree decl = node->decl;\n \n-\t  if (DECL_SAVED_INSNS (decl))\n+\t  if (DECL_STRUCT_FUNCTION (decl))\n \t    local_insns = node->local.self_insns;\n \t  else\n \t    local_insns = 0;"}, {"sha": "f3821c34a127640b2fe9e8d69b2b0fe2b3f75898", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1da326c33559e8a114bc379ec7c8f805dd37aef6", "patch": "@@ -1684,7 +1684,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t      && DECL_LANG_SPECIFIC (olddecl))\n \t    {\n \t      DECL_SAVED_TREE (newdecl) = DECL_SAVED_TREE (olddecl);\n-\t      DECL_SAVED_INSNS (newdecl) = DECL_SAVED_INSNS (olddecl);\n+\t      DECL_STRUCT_FUNCTION (newdecl) = DECL_STRUCT_FUNCTION (olddecl);\n \t    }\n \t}\n \n@@ -10861,8 +10861,9 @@ finish_function (int flags)\n       && (DECL_INLINE (fndecl) || processing_template_decl))\n     warning (\"no return statement in function returning non-void\");\n \n-  /* We're leaving the context of this function, so zap cfun.  It's still in\n-     DECL_SAVED_INSNS, and we'll restore it in tree_rest_of_compilation.  */\n+  /* We're leaving the context of this function, so zap cfun.\n+     It's still in DECL_STRUCT_FUNCTION, and we'll restore it in\n+     tree_rest_of_compilation.  */\n   cfun = NULL;\n   current_function_decl = NULL;\n "}, {"sha": "ebfce0a567011e2678b4a433925d3ed350544c93", "filename": "gcc/f/com.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=1da326c33559e8a114bc379ec7c8f805dd37aef6", "patch": "@@ -13402,7 +13402,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n \n       DECL_RESULT (newdecl) = DECL_RESULT (olddecl);\n       DECL_INITIAL (newdecl) = DECL_INITIAL (olddecl);\n-      DECL_SAVED_INSNS (newdecl) = DECL_SAVED_INSNS (olddecl);\n+      DECL_STRUCT_FUNCTION (newdecl) = DECL_STRUCT_FUNCTION (olddecl);\n       DECL_ARGUMENTS (newdecl) = DECL_ARGUMENTS (olddecl);\n     }\n \n@@ -13599,7 +13599,7 @@ finish_function (int nested)\n \n   if (TREE_CODE (fndecl) != ERROR_MARK\n       && !nested\n-      && DECL_SAVED_INSNS (fndecl) == 0)\n+      && DECL_STRUCT_FUNCTION (fndecl) == 0)\n     {\n       /* Stop pointing to the local nodes about to be freed.  */\n       /* But DECL_INITIAL must remain nonzero so we know this was an actual\n@@ -13755,7 +13755,7 @@ pop_f_function_context (void)\n \t= TREE_VALUE (link);\n \n   if (current_function_decl != error_mark_node\n-      && DECL_SAVED_INSNS (current_function_decl) == 0)\n+      && DECL_STRUCT_FUNCTION (current_function_decl) == 0)\n     {\n       /* Stop pointing to the local nodes about to be freed.  */\n       /* But DECL_INITIAL must remain nonzero so we know this was an actual\n@@ -14350,7 +14350,7 @@ poplevel (int keep, int reverse, int functionbody)\n \tif (DECL_ABSTRACT_ORIGIN (decl) != 0\n \t    && DECL_ABSTRACT_ORIGIN (decl) != decl)\n \t  TREE_ADDRESSABLE (DECL_ABSTRACT_ORIGIN (decl)) = 1;\n-\telse if (DECL_SAVED_INSNS (decl) != 0)\n+\telse if (DECL_STRUCT_FUNCTION (decl) != 0)\n \t  {\n \t    push_function_context ();\n \t    output_inline_function (decl);"}, {"sha": "bbb9a51b0679fbc32144904522002b7f079058d9", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=1da326c33559e8a114bc379ec7c8f805dd37aef6", "patch": "@@ -6414,7 +6414,7 @@ allocate_struct_function (tree fndecl)\n   if (fndecl == NULL)\n     return;\n \n-  DECL_SAVED_INSNS (fndecl) = cfun;\n+  DECL_STRUCT_FUNCTION (fndecl) = cfun;\n   cfun->decl = fndecl;\n \n   result = DECL_RESULT (fndecl);\n@@ -6439,8 +6439,8 @@ allocate_struct_function (tree fndecl)\n static void\n prepare_function_start (tree fndecl)\n {\n-  if (fndecl && DECL_SAVED_INSNS (fndecl))\n-    cfun = DECL_SAVED_INSNS (fndecl);\n+  if (fndecl && DECL_STRUCT_FUNCTION (fndecl))\n+    cfun = DECL_STRUCT_FUNCTION (fndecl);\n   else\n     allocate_struct_function (fndecl);\n   init_emit ();"}, {"sha": "c50d36bdb4240b1380d1cdd88baa2c645f9baa5f", "filename": "gcc/integrate.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=1da326c33559e8a114bc379ec7c8f805dd37aef6", "patch": "@@ -414,8 +414,8 @@ copy_decl_for_inlining (tree decl, tree from_fn, tree to_fn)\n }\n \n /* Make the insns and PARM_DECLs of the current function permanent\n-   and record other information in DECL_SAVED_INSNS to allow inlining\n-   of this function in subsequent calls.\n+   and record other information in DECL_STRUCT_FUNCTION to allow\n+   inlining of this function in subsequent calls.\n \n    This routine need not copy any insns because we are not going\n    to immediately compile the insns in the insn chain.  There\n@@ -642,7 +642,7 @@ expand_inline_function (tree fndecl, tree parms, rtx target, int ignore,\n \t\t\ttree type, rtx structure_value_addr)\n {\n   struct function *inlining_previous;\n-  struct function *inl_f = DECL_SAVED_INSNS (fndecl);\n+  struct function *inl_f = DECL_STRUCT_FUNCTION (fndecl);\n   tree formal, actual, block;\n   rtx parm_insns = inl_f->emit->x_first_insn;\n   rtx insns = (inl_f->inl_last_parm_insn\n@@ -953,7 +953,7 @@ expand_inline_function (tree fndecl, tree parms, rtx target, int ignore,\n \t     incoming arg rtx values are expanded now so that we can be\n \t     sure we have enough slots in the const equiv map since the\n \t     store_expr call can easily blow the size estimate.  */\n-\t  if (DECL_SAVED_INSNS (fndecl)->args_size != 0)\n+\t  if (DECL_STRUCT_FUNCTION (fndecl)->args_size != 0)\n \t    copy_rtx_and_substitute (virtual_incoming_args_rtx, map, 0);\n \t}\n       else if (GET_CODE (loc) == REG)\n@@ -1886,7 +1886,8 @@ copy_rtx_and_substitute (rtx orig, struct inline_remap *map, int for_lhs)\n       regno = REGNO (orig);\n       if (regno <= LAST_VIRTUAL_REGISTER\n \t  || (map->integrating\n-\t      && DECL_SAVED_INSNS (map->fndecl)->internal_arg_pointer == orig))\n+\t      && DECL_STRUCT_FUNCTION (map->fndecl)->internal_arg_pointer\n+\t\t == orig))\n \t{\n \t  /* Some hard registers are also mapped,\n \t     but others are not translated.  */\n@@ -1904,10 +1905,11 @@ copy_rtx_and_substitute (rtx orig, struct inline_remap *map, int for_lhs)\n \t  else if (regno == VIRTUAL_STACK_VARS_REGNUM)\n \t    {\n \t      rtx loc, seq;\n-\t      int size = get_func_frame_size (DECL_SAVED_INSNS (map->fndecl));\n+\t      int size\n+\t\t= get_func_frame_size (DECL_STRUCT_FUNCTION (map->fndecl));\n #ifdef FRAME_GROWS_DOWNWARD\n \t      int alignment\n-\t\t= (DECL_SAVED_INSNS (map->fndecl)->stack_alignment_needed\n+\t\t= (DECL_STRUCT_FUNCTION (map->fndecl)->stack_alignment_needed\n \t\t   / BITS_PER_UNIT);\n \n \t      /* In this case, virtual_stack_vars_rtx points to one byte\n@@ -1942,13 +1944,13 @@ copy_rtx_and_substitute (rtx orig, struct inline_remap *map, int for_lhs)\n \t    }\n \t  else if (regno == VIRTUAL_INCOMING_ARGS_REGNUM\n \t\t   || (map->integrating\n-\t\t       && (DECL_SAVED_INSNS (map->fndecl)->internal_arg_pointer\n+\t\t       && (DECL_STRUCT_FUNCTION (map->fndecl)->internal_arg_pointer\n \t\t\t   == orig)))\n \t    {\n \t      /* Do the same for a block to contain any arguments referenced\n \t\t in memory.  */\n \t      rtx loc, seq;\n-\t      int size = DECL_SAVED_INSNS (map->fndecl)->args_size;\n+\t      int size = DECL_STRUCT_FUNCTION (map->fndecl)->args_size;\n \n \t      start_sequence ();\n \t      loc = assign_stack_temp (BLKmode, size, 1);\n@@ -2956,8 +2958,8 @@ set_decl_abstract_flags (tree decl, int setting)\n     }\n }\n \f\n-/* Output the assembly language code for the function FNDECL\n-   from its DECL_SAVED_INSNS.  Used for inline functions that are output\n+/* Output the assembly language code for the function FNDECL from\n+   its DECL_STRUCT_FUNCTION.  Used for inline functions that are output\n    at end of compilation instead of where they came in the source.  */\n \n static GTY(()) struct function *old_cfun;\n@@ -2967,7 +2969,7 @@ output_inline_function (tree fndecl)\n {\n   enum debug_info_type old_write_symbols = write_symbols;\n   const struct gcc_debug_hooks *const old_debug_hooks = debug_hooks;\n-  struct function *f = DECL_SAVED_INSNS (fndecl);\n+  struct function *f = DECL_STRUCT_FUNCTION (fndecl);\n \n   old_cfun = cfun;\n   cfun = f;"}, {"sha": "f6471ef5c490240347c805b3caee5b97114fd0bf", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=1da326c33559e8a114bc379ec7c8f805dd37aef6", "patch": "@@ -1710,7 +1710,7 @@ finish_class (void)\n   /* Emit deferred inline methods. */  \n   for (method = type_methods; method != NULL_TREE; )\n     {\n-      if (! TREE_ASM_WRITTEN (method) && DECL_SAVED_INSNS (method) != 0)\n+      if (! TREE_ASM_WRITTEN (method) && DECL_STRUCT_FUNCTION (method) != 0)\n \t{\n \t  output_inline_function (method);\n \t  /* Scan the list again to see if there are any earlier"}, {"sha": "df566fbe645259c29eb62e42363e48765fdce2d2", "filename": "gcc/print-tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=1da326c33559e8a114bc379ec7c8f805dd37aef6", "patch": "@@ -440,11 +440,11 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t    }\n \t}\n       else if (TREE_CODE (node) == FUNCTION_DECL\n-\t       && DECL_SAVED_INSNS (node) != 0)\n+\t       && DECL_STRUCT_FUNCTION (node) != 0)\n \t{\n \t  indent_to (file, indent + 4);\n \t  fprintf (file, \"saved-insns \" HOST_PTR_PRINTF,\n-\t\t   (void *) DECL_SAVED_INSNS (node));\n+\t\t   (void *) DECL_STRUCT_FUNCTION (node));\n \t}\n \n       /* Print the decl chain only if decl is at second level.  */"}, {"sha": "09978fccb5a37f00b6835e9c7bcf64cad1b9b520", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=1da326c33559e8a114bc379ec7c8f805dd37aef6", "patch": "@@ -1658,8 +1658,8 @@ wrapup_global_declarations (tree *vec, int len)\n \n \t  if (TREE_CODE (decl) == FUNCTION_DECL\n \t      && DECL_INITIAL (decl) != 0\n-\t      && DECL_SAVED_INSNS (decl) != 0\n-\t      && DECL_SAVED_INSNS (decl)->saved_for_inline\n+\t      && DECL_STRUCT_FUNCTION (decl) != 0\n+\t      && DECL_STRUCT_FUNCTION (decl)->saved_for_inline\n \t      && (flag_keep_inline_functions\n \t\t  || (TREE_PUBLIC (decl) && !DECL_COMDAT (decl))\n \t\t  || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))))\n@@ -2677,7 +2677,8 @@ rest_of_handle_inlining (tree decl)\n \n   if (open_dump_file (DFI_rtl, decl))\n     {\n-      if (DECL_SAVED_INSNS (decl) && DECL_SAVED_INSNS (decl)->saved_for_inline)\n+      if (DECL_STRUCT_FUNCTION (decl)\n+\t  && DECL_STRUCT_FUNCTION (decl)->saved_for_inline)\n \tfprintf (rtl_dump_file, \";; (integrable)\\n\\n\");\n       close_dump_file (DFI_rtl, print_rtl, insns);\n     }\n@@ -2747,7 +2748,7 @@ rest_of_handle_inlining (tree decl)\n       timevar_push (TV_INTEGRATION);\n       save_for_inline (decl);\n       timevar_pop (TV_INTEGRATION);\n-      DECL_SAVED_INSNS (decl)->inlinable = inlinable;\n+      DECL_STRUCT_FUNCTION (decl)->inlinable = inlinable;\n       return true;\n     }\n \n@@ -3678,7 +3679,7 @@ rest_of_compilation (tree decl)\n   if (! DECL_DEFER_OUTPUT (decl))\n     {\n       free_after_compilation (cfun);\n-      DECL_SAVED_INSNS (decl) = 0;\n+      DECL_STRUCT_FUNCTION (decl) = 0;\n     }\n   cfun = 0;\n "}, {"sha": "35220167a9521c5d5373efd349568ad0d3a7f683", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=1da326c33559e8a114bc379ec7c8f805dd37aef6", "patch": "@@ -208,7 +208,7 @@ tree_rest_of_compilation (tree fndecl, bool nested_p)\n   if (!cgraph_function_possibly_inlined_p (fndecl))\n     {\n       DECL_SAVED_TREE (fndecl) = NULL;\n-      if (DECL_SAVED_INSNS (fndecl) == 0\n+      if (DECL_STRUCT_FUNCTION (fndecl) == 0\n \t  && !cgraph_node (fndecl)->origin)\n \t{\n \t  /* Stop pointing to the local nodes about to be freed."}, {"sha": "ee1f50c8c09858568af7cd988d16f134bf3e4cdf", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da326c33559e8a114bc379ec7c8f805dd37aef6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1da326c33559e8a114bc379ec7c8f805dd37aef6", "patch": "@@ -1375,8 +1375,9 @@ struct tree_type GTY(())\n    where the data was actually passed.  */\n #define DECL_INCOMING_RTL(NODE) (PARM_DECL_CHECK (NODE)->decl.u2.r)\n \n-/* For FUNCTION_DECL, if it is inline, holds the saved insn chain.  */\n-#define DECL_SAVED_INSNS(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.u2.f)\n+/* For FUNCTION_DECL, this holds a pointer to a structure (\"struct function\")\n+   that describes the status of this function.  */\n+#define DECL_STRUCT_FUNCTION(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.u2.f)\n \n /* For FUNCTION_DECL, if it is built-in,\n    this identifies which built-in operation it is.  */"}]}