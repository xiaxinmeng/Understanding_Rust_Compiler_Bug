{"sha": "fc53fe76ccbb60528aeb790474c3ac0c20e14680", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM1M2ZlNzZjY2JiNjA1MjhhZWI3OTA0NzRjM2FjMGMyMGUxNDY4MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-27T14:01:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-27T14:01:00Z"}, "message": "[multiple changes]\n\n2009-07-27  Sergey Rybin  <rybin@adacore.com>\n\n\t* gnat_ugn.texi: gnatcheck Unconstrained_Array_Returns rule: Add to the\n\trule definition the paragraph that explains that generic functions and\n\tfunctions from generic packages are not checked.\n\n2009-07-27  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch6.adb (New_Overloaded_Entity): Add test for an expanded null\n\tprocedure when determining whether to set the Overridden_Operation\n\tfield of a subprogram overriding an inherited subprogram.\n\t\n2009-07-27  Robert Dewar  <dewar@adacore.com>\n\n\t* a-except.adb, a-except-2005.ads: Minor reformatting\n\nFrom-SVN: r150120", "tree": {"sha": "53b02a8e5ca17e38ee9748b1580d30ede2c142c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53b02a8e5ca17e38ee9748b1580d30ede2c142c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc53fe76ccbb60528aeb790474c3ac0c20e14680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc53fe76ccbb60528aeb790474c3ac0c20e14680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc53fe76ccbb60528aeb790474c3ac0c20e14680", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc53fe76ccbb60528aeb790474c3ac0c20e14680/comments", "author": null, "committer": null, "parents": [{"sha": "cff7cd9b1336236660bf486021063e96271cf137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff7cd9b1336236660bf486021063e96271cf137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cff7cd9b1336236660bf486021063e96271cf137"}], "stats": {"total": 196, "additions": 116, "deletions": 80}, "files": [{"sha": "16e985a00dee1eea56efe22fd4221d609d272e07", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc53fe76ccbb60528aeb790474c3ac0c20e14680/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc53fe76ccbb60528aeb790474c3ac0c20e14680/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fc53fe76ccbb60528aeb790474c3ac0c20e14680", "patch": "@@ -1,3 +1,19 @@\n+2009-07-27  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* gnat_ugn.texi: gnatcheck Unconstrained_Array_Returns rule: Add to the\n+\trule definition the paragraph that explains that generic functions and\n+\tfunctions from generic packages are not checked.\n+\n+2009-07-27  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch6.adb (New_Overloaded_Entity): Add test for an expanded null\n+\tprocedure when determining whether to set the Overridden_Operation\n+\tfield of a subprogram overriding an inherited subprogram.\n+\t\n+2009-07-27  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-except.adb, a-except-2005.ads: Minor reformatting\n+\n 2009-07-27  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_util.adb, sem_util.ads (Kill_Current_Values): Reset Is_Known_Valid"}, {"sha": "033244dcd926d7925ee7d177512d0b6993386c23", "filename": "gcc/ada/a-except-2005.ads", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc53fe76ccbb60528aeb790474c3ac0c20e14680/gcc%2Fada%2Fa-except-2005.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc53fe76ccbb60528aeb790474c3ac0c20e14680/gcc%2Fada%2Fa-except-2005.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.ads?ref=fc53fe76ccbb60528aeb790474c3ac0c20e14680", "patch": "@@ -115,7 +115,9 @@ package Ada.Exceptions is\n    --    0xyyyyyyyy 0xyyyyyyyy ...\n    --\n    --  The lines are separated by a ASCII.LF character\n-   --  The nnnn is the partition Id given as decimal digits.\n+   --\n+   --  The nnnn is the partition Id given as decimal digits\n+   --\n    --  The 0x... line represents traceback program counter locations,\n    --  in order with the first one being the exception location.\n \n@@ -184,13 +186,13 @@ private\n    pragma Export\n      (Ada, Current_Target_Exception,\n       \"__gnat_current_target_exception\");\n-   --  This routine should return the current raised exception on targets\n-   --  which have built-in exception handling such as the Java Virtual\n-   --  Machine. For other targets this routine is simply ignored. Currently,\n-   --  only JGNAT uses this. See 4jexcept.ads for details. The pragma Export\n-   --  allows this routine to be accessed elsewhere in the run-time, even\n-   --  though it is in the private part of this package (it is not allowed\n-   --  to be in the visible part, since this is set by the reference manual).\n+   --  This routine should return the current raised exception on targets which\n+   --  have built-in exception handling such as the Java Virtual Machine. For\n+   --  other targets this routine is simply ignored. Currently, only JGNAT\n+   --  uses this. See 4jexcept.ads for details. The pragma Export allows this\n+   --  routine to be accessed elsewhere in the run-time, even though it is in\n+   --  the private part of this package (it is not allowed to be in the visible\n+   --  part, since this is set by the reference manual).\n \n    function Exception_Name_Simple (X : Exception_Occurrence) return String;\n    --  Like Exception_Name, but returns the simple non-qualified name of the\n@@ -230,8 +232,8 @@ private\n    procedure Raise_From_Controlled_Operation\n      (X : Ada.Exceptions.Exception_Occurrence);\n    pragma No_Return (Raise_From_Controlled_Operation);\n-   --  Raise Program_Error, providing information about X (an exception\n-   --  raised during a controlled operation) in the exception message.\n+   --  Raise Program_Error, providing information about X (an exception raised\n+   --  during a controlled operation) in the exception message.\n \n    procedure Reraise_Occurrence_Always (X : Exception_Occurrence);\n    pragma No_Return (Reraise_Occurrence_Always);\n@@ -244,8 +246,8 @@ private\n    pragma No_Return (Reraise_Occurrence_No_Defer);\n    --  Exactly like Reraise_Occurrence, except that abort is not deferred\n    --  before the call and the parameter X is known not to be the null\n-   --  occurrence. This is used in generated code when it is known that\n-   --  abort is already deferred.\n+   --  occurrence. This is used in generated code when it is known that abort\n+   --  is already deferred.\n \n    -----------------------\n    -- Polling Interface --\n@@ -287,6 +289,7 @@ private\n    type Exception_Occurrence is record\n       Id : Exception_Id;\n       --  Exception_Identity for this exception occurrence\n+      --\n       --  WARNING System.System.Finalization_Implementation.Finalize_List\n       --  relies on the fact that this field is always first in the exception\n       --  occurrence"}, {"sha": "c9fe38b466ebc888051cbbed9baeb4ab9a5e8ebd", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc53fe76ccbb60528aeb790474c3ac0c20e14680/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc53fe76ccbb60528aeb790474c3ac0c20e14680/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=fc53fe76ccbb60528aeb790474c3ac0c20e14680", "patch": "@@ -57,9 +57,9 @@ with System.Soft_Links;       use System.Soft_Links;\n package body Ada.Exceptions is\n \n    pragma Suppress (All_Checks);\n-   --  We definitely do not want exceptions occurring within this unit, or\n-   --  we are in big trouble. If an exceptional situation does occur, better\n-   --  that it not be raised, since raising it can cause confusing chaos.\n+   --  We definitely do not want exceptions occurring within this unit, or we\n+   --  are in big trouble. If an exceptional situation does occur, better that\n+   --  it not be raised, since raising it can cause confusing chaos.\n \n    -----------------------\n    -- Local Subprograms --\n@@ -77,14 +77,14 @@ package body Ada.Exceptions is\n \n    procedure To_Stderr (S : String);\n    pragma Export (Ada, To_Stderr, \"__gnat_to_stderr\");\n-   --  Little routine to output string to stderr that is also used\n-   --  in the tasking run time.\n+   --  Little routine to output string to stderr that is also used in the\n+   --  tasking run time.\n \n    procedure To_Stderr (C : Character);\n    pragma Inline (To_Stderr);\n    pragma Export (Ada, To_Stderr, \"__gnat_to_stderr_char\");\n-   --  Little routine to output a character to stderr, used by some of\n-   --  the separate units below.\n+   --  Little routine to output a character to stderr, used by some of the\n+   --  separate units below.\n \n    package Exception_Data is\n \n@@ -109,9 +109,9 @@ package body Ada.Exceptions is\n         (Id      : Exception_Id;\n          Message : String);\n       --  This routine is called to setup the exception referenced by the\n-      --  Current_Excep field in the TSD to contain the indicated Id value\n-      --  and message. Message is a string which is generated as the\n-      --  exception message.\n+      --  Current_Excep field in the TSD to contain the indicated Id value and\n+      --  message. Message is a string which is generated as the exception\n+      --  message.\n \n       --------------------------------------\n       -- Exception information subprogram --\n@@ -126,18 +126,20 @@ package body Ada.Exceptions is\n       --    Call stack traceback locations:  (only if at least one location)\n       --    <0xyyyyyyyy 0xyyyyyyyy ...>      (is recorded)\n       --\n-      --  The lines are separated by a ASCII.LF character.\n-      --  The nnnn is the partition Id given as decimal digits.\n+      --  The lines are separated by a ASCII.LF character\n+      --\n+      --  The nnnn is the partition Id given as decimal digits\n+      --\n       --  The 0x... line represents traceback program counter locations, in\n       --  execution order with the first one being the exception location. It\n       --  is present only\n       --\n-      --  The Exception_Name and Message lines are omitted in the abort\n-      --  signal case, since this is not really an exception.\n+      --  The Exception_Name and Message lines are omitted in the abort signal\n+      --  case, since this is not really an exception.\n \n-      --  !! If the format of the generated string is changed, please note\n-      --  !! that an equivalent modification to the routine String_To_EO must\n-      --  !! be made to preserve proper functioning of the stream attributes.\n+      --  Note: If the format of the generated string is changed, please note\n+      --  that an equivalent modification to the routine String_To_EO must be\n+      --  made to preserve proper functioning of the stream attributes.\n \n       ---------------------------------------\n       -- Exception backtracing subprograms --\n@@ -198,11 +200,11 @@ package body Ada.Exceptions is\n \n       procedure Unhandled_Exception_Terminate;\n       pragma No_Return (Unhandled_Exception_Terminate);\n-      --  This procedure is called to terminate execution following an\n-      --  unhandled exception. The exception information, including\n-      --  traceback if available is output, and execution is then\n-      --  terminated. Note that at the point where this routine is\n-      --  called, the stack has typically been destroyed.\n+      --  This procedure is called to terminate program execution following an\n+      --  unhandled exception. The exception information, including traceback\n+      --  if available is output, and execution is then terminated. Note that\n+      --  at the point where this routine is called, the stack has typically\n+      --  been destroyed.\n \n    end Exception_Traces;\n \n@@ -253,10 +255,10 @@ package body Ada.Exceptions is\n    procedure Raise_With_Msg (E : Exception_Id);\n    pragma No_Return (Raise_With_Msg);\n    pragma Export (C, Raise_With_Msg, \"__gnat_raise_with_msg\");\n-   --  Raises an exception with given exception id value. A message\n-   --  is associated with the raise, and has already been stored in the\n-   --  exception occurrence referenced by the Current_Excep in the TSD.\n-   --  Abort is deferred before the raise call.\n+   --  Raises an exception with given exception id value. A message is\n+   --  associated with the raise, and has already been stored in the exception\n+   --  occurrence referenced by the Current_Excep in the TSD. Abort is deferred\n+   --  before the raise call.\n \n    procedure Raise_With_Location_And_Msg\n      (E : Exception_Id;\n@@ -266,8 +268,8 @@ package body Ada.Exceptions is\n    pragma No_Return (Raise_With_Location_And_Msg);\n    --  Raise an exception with given exception id value. A filename and line\n    --  number is associated with the raise and is stored in the exception\n-   --  occurrence and in addition a string message M is appended to\n-   --  this (if M is not null).\n+   --  occurrence and in addition a string message M is appended to this\n+   --  if M is not null.\n \n    procedure Raise_Constraint_Error\n      (File : System.Address;\n@@ -344,9 +346,9 @@ package body Ada.Exceptions is\n    procedure Reraise;\n    pragma No_Return (Reraise);\n    pragma Export (C, Reraise, \"__gnat_reraise\");\n-   --  Reraises the exception referenced by the Current_Excep field of\n-   --  the TSD (all fields of this exception occurrence are set). Abort\n-   --  is deferred before the reraise operation.\n+   --  Reraises the exception referenced by the Current_Excep field of the TSD\n+   --  (all fields of this exception occurrence are set). Abort is deferred\n+   --  before the reraise operation.\n \n    --  Save_Occurrence variations: As the management of the private data\n    --  attached to occurrences is delicate, whether or not pointers to such\n@@ -373,11 +375,10 @@ package body Ada.Exceptions is\n    -- Run-Time Check Routines --\n    -----------------------------\n \n-   --  These routines raise a specific exception with a reason message\n-   --  attached. The parameters are the file name and line number in each\n-   --  case. The names are keyed to the codes defined in types.ads and\n-   --  a-types.h (for example, the name Rcheck_05 refers to the Reason\n-   --  RT_Exception_Code'Val (5)).\n+   --  Routines to a specific exception with a reason message attached. The\n+   --  parameters are the file name and line number in each case. The names are\n+   --  keyed to the codes defined in types.ads and a-types.h (for example, the\n+   --  name Rcheck_05 refers to the Reason RT_Exception_Code'Val (5)).\n \n    procedure Rcheck_00 (File : System.Address; Line : Integer);\n    procedure Rcheck_01 (File : System.Address; Line : Integer);\n@@ -546,8 +547,8 @@ package body Ada.Exceptions is\n    --  perform periodic but not systematic operations.\n \n    procedure Poll is separate;\n-   --  The actual polling routine is separate, so that it can easily\n-   --  be replaced with a target dependent version.\n+   --  The actual polling routine is separate, so that it can easily be\n+   --  replaced with a target dependent version.\n \n    ------------------------------\n    -- Current_Target_Exception --\n@@ -569,8 +570,8 @@ package body Ada.Exceptions is\n    -- EO_To_String --\n    ------------------\n \n-   --  We use the null string to represent the null occurrence, otherwise\n-   --  we output the Exception_Information string for the occurrence.\n+   --  We use the null string to represent the null occurrence, otherwise we\n+   --  output the Exception_Information string for the occurrence.\n \n    function EO_To_String (X : Exception_Occurrence) return String\n      renames Stream_Attributes.EO_To_String;\n@@ -583,9 +584,9 @@ package body Ada.Exceptions is\n      (X : Exception_Occurrence) return Exception_Id\n    is\n    begin\n-      --  Note that the following test used to be here for the original\n-      --  Ada 95 semantics, but these were modified by AI-241 to require\n-      --  returning Null_Id instead of raising Constraint_Error.\n+      --  Note that the following test used to be here for the original Ada 95\n+      --  semantics, but these were modified by AI-241 to require returning\n+      --  Null_Id instead of raising Constraint_Error.\n \n       --  if X.Id = Null_Id then\n       --     raise Constraint_Error;\n@@ -667,8 +668,8 @@ package body Ada.Exceptions is\n    --------------------\n \n    package body Exception_Data is separate;\n-   --  This package can be easily dummied out if we do not want the\n-   --  basic support for exception messages (such as in Ada 83).\n+   --  This package can be easily dummied out if we do not want the basic\n+   --  support for exception messages (such as in Ada 83).\n \n    package body Exception_Propagation is\n \n@@ -691,10 +692,10 @@ package body Ada.Exceptions is\n    ----------------------\n \n    package body Exception_Traces is separate;\n-   --  Depending on the underlying support for IO the implementation\n-   --  will differ. Moreover we would like to dummy out this package\n-   --  in case we do not want any exception tracing support. This is\n-   --  why this package is separated.\n+   --  Depending on the underlying support for IO the implementation will\n+   --  differ. Moreover we would like to dummy out this package in case we do\n+   --  not want any exception tracing support. This is why this package is\n+   --  separated.\n \n    -----------------------\n    -- Stream Attributes --\n@@ -720,17 +721,17 @@ package body Ada.Exceptions is\n       pragma Import (C, builtin_longjmp, \"_gnat_builtin_longjmp\");\n \n    begin\n-      --  WARNING: There should be no exception handler for this body\n-      --  because this would cause gigi to prepend a setup for a new\n-      --  jmpbuf to the sequence of statements in case of built-in sjljl.\n-      --  We would then always get this new buf in Jumpbuf_Ptr instead of the\n-      --  one for the exception we are handling, which would completely break\n-      --  the whole design of this procedure.\n+      --  WARNING: There should be no exception handler for this body because\n+      --  this would cause gigi to prepend a setup for a new jmpbuf to the\n+      --  sequence of statements in case of built-in sjljl. We would then\n+      --  always get this new buf in Jumpbuf_Ptr instead of the one for the\n+      --  exception we are handling, which would completely break the whole\n+      --  design of this procedure.\n \n-      --  If the jump buffer pointer is non-null, transfer control using\n-      --  it. Otherwise announce an unhandled exception (note that this\n-      --  means that we have no finalizations to do other than at the outer\n-      --  level). Perform the necessary notification tasks in both cases.\n+      --  If the jump buffer pointer is non-null, transfer control using it.\n+      --  Otherwise announce an unhandled exception (note that this means that\n+      --  we have no finalizations to do other than at the outer level).\n+      --  Perform the necessary notification tasks in both cases.\n \n       if Jumpbuf_Ptr /= Null_Address then\n          if not Excep.Exception_Raised then\n@@ -1251,9 +1252,9 @@ package body Ada.Exceptions is\n    begin\n       --  Setup Target as an exception to be propagated in the calling task\n       --  (rendezvous-wise), taking care not to clobber the associated private\n-      --  data.  Target is expected to be a pointer to the calling task's\n-      --  fixed TSD occurrence, which is very different from Get_Current_Excep\n-      --  here because this subprogram is called from the called task.\n+      --  data. Target is expected to be a pointer to the calling task's fixed\n+      --  TSD occurrence, which is very different from Get_Current_Excep here\n+      --  because this subprogram is called from the called task.\n \n       Save_Occurrence_No_Private (Target.all, Source);\n    end Transfer_Occurrence;\n@@ -1293,7 +1294,6 @@ package body Ada.Exceptions is\n    ---------------\n \n    procedure To_Stderr (C : Character) is\n-\n       type int is new Integer;\n \n       procedure put_char_stderr (C : int);"}, {"sha": "865f5da51186a3b5fd6209182cdd5bd10b8993fc", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc53fe76ccbb60528aeb790474c3ac0c20e14680/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc53fe76ccbb60528aeb790474c3ac0c20e14680/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=fc53fe76ccbb60528aeb790474c3ac0c20e14680", "patch": "@@ -22690,9 +22690,14 @@ This rule has no parameters.\n Flag each function returning an unconstrained array. Function declarations,\n function bodies (and body stubs) having no separate specifications,\n and generic function instantiations are checked.\n-Generic function declarations, function calls and function renamings are\n+Function calls and function renamings are\n not checked.\n \n+Generic function declarations, and function declarations in generic\n+packages are not checked, instead this rule checks the results of\n+generic instantiations (that is, expanded specification and expanded\n+body corresponding to an instantiation).\n+\n This rule has no parameters.\n \n @node Universal_Ranges"}, {"sha": "33ac2e66063d4de8e25be2b8c2e432302d5b9021", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc53fe76ccbb60528aeb790474c3ac0c20e14680/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc53fe76ccbb60528aeb790474c3ac0c20e14680/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=fc53fe76ccbb60528aeb790474c3ac0c20e14680", "patch": "@@ -7678,10 +7678,22 @@ package body Sem_Ch6 is\n                      Set_Is_Overriding_Operation (S);\n                      Check_Overriding_Indicator (S, E, Is_Primitive => True);\n \n-                     --  Indicate that S overrides the operation from which\n-                     --  E is inherited.\n-\n-                     if Comes_From_Source (S) then\n+                     --  If S is a user-defined subprogram or a null procedure\n+                     --  expanded to override an inherited null procedure, then\n+                     --  indicate that E overrides the operation from which S\n+                     --  is inherited. It seems odd that Overridden_Operation\n+                     --  isn't set in all cases where Is_Overriding_Operation\n+                     --  is true, but doing so causes infinite loops in the\n+                     --  compiler for implicit overriding subprograms. ???\n+\n+                     if Comes_From_Source (S)\n+                       or else\n+                         (Present (Parent (S))\n+                           and then\n+                             Nkind (Parent (S)) = N_Procedure_Specification\n+                           and then\n+                             Null_Present (Parent (S)))\n+                     then\n                         if Present (Alias (E)) then\n                            Set_Overridden_Operation (S, Alias (E));\n                         else"}]}