{"sha": "103cba80bd84f0f3c7e644783e1fb7154d07f522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAzY2JhODBiZDg0ZjBmM2M3ZTY0NDc4M2UxZmI3MTU0ZDA3ZjUyMg==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@gcc.gnu.org", "date": "2019-11-11T05:08:20Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@gcc.gnu.org", "date": "2019-11-11T05:08:20Z"}, "message": "[rs6000] Make load cost a bit more in vectorization cost\n\nTo align with rs6000_insn_cost costing more for load type insns,\nthis patch is to make load insns cost more in vectorization cost\nfunction.  The latency of load insns is about twice that of\n\"simple\" instructions; 2 vs. 1 on older cores, and 4 (or so) vs.\n2 on newer cores.  Considering that the result of load usually\nis used somehow later (true-dep) but store won't, we keep the\nstore as before.\n\nThe SPEC2017 performance evaluation on Power8 shows 525.x264_r\n+9.56%, 511.povray_r +2.08%, 527.cam4_r 1.16% gains, no \nsignificant degradation, SPECINT geomean +0.88%, SPECFP geomean\n+0.26%.\n\nThe SPEC2017 performance evaluation on Power9 shows no significant\nimprovement or degradation, SPECINT geomean +0.04%, SPECFP geomean\n+0.04%.\n\nThe SPEC2006 performance evaluation on Power8 shows 454.calculix\n+4.41% gain but 416.gamess -1.19% and 453.povray -3.83% degradation.\nI looked into the two degradation bmks, the degradation were NOT\ndue to hotspot changes by vectorization, were all side effects.\nSPECINT geomean +0.10%, SPECFP geomean no changed considering\nthe degradation.\n\ngcc/ChangeLog\n\n2019-11-11  Kewen Lin  <linkw@gcc.gnu.org>\n\n    * config/rs6000/rs6000.c (rs6000_builtin_vectorization_cost): Make\n    scalar_load, vector_load, unaligned_load and vector_gather_load cost\n    more to conform hardware latency and insn cost settings.\n\nFrom-SVN: r278033", "tree": {"sha": "cbaf9f47ba01498059274f3c5abc89e0e54791c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbaf9f47ba01498059274f3c5abc89e0e54791c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/103cba80bd84f0f3c7e644783e1fb7154d07f522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103cba80bd84f0f3c7e644783e1fb7154d07f522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/103cba80bd84f0f3c7e644783e1fb7154d07f522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103cba80bd84f0f3c7e644783e1fb7154d07f522/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b41bff2977ffb88bf447111b7c2463d4122cb96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b41bff2977ffb88bf447111b7c2463d4122cb96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b41bff2977ffb88bf447111b7c2463d4122cb96"}], "stats": {"total": 77, "additions": 44, "deletions": 33}, "files": [{"sha": "d34890b7b81466533ad4a0801c75cdfeaaeb97ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103cba80bd84f0f3c7e644783e1fb7154d07f522/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103cba80bd84f0f3c7e644783e1fb7154d07f522/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=103cba80bd84f0f3c7e644783e1fb7154d07f522", "patch": "@@ -1,3 +1,10 @@\n+2019-11-11  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_builtin_vectorization_cost):\n+\tMake scalar_load, vector_load, unaligned_load and\n+\tvector_gather_load cost more to conform hardware latency and\n+\tinsn cost settings.\n+\n 2019-11-10  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/darwin.h (MACHO_SYMBOL_FLAG_LINKER_VIS): New."}, {"sha": "6e67db75590ababb6d759421441d6c5642c3bda0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103cba80bd84f0f3c7e644783e1fb7154d07f522/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103cba80bd84f0f3c7e644783e1fb7154d07f522/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=103cba80bd84f0f3c7e644783e1fb7154d07f522", "patch": "@@ -4783,15 +4783,17 @@ rs6000_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n   switch (type_of_cost)\n     {\n       case scalar_stmt:\n-      case scalar_load:\n       case scalar_store:\n       case vector_stmt:\n-      case vector_load:\n       case vector_store:\n       case vec_to_scalar:\n       case scalar_to_vec:\n       case cond_branch_not_taken:\n         return 1;\n+      case scalar_load:\n+      case vector_load:\n+\t/* Like rs6000_insn_cost, make load insns cost a bit more.  */\n+\t  return 2;\n \n       case vec_perm:\n \t/* Power7 has only one permute unit, make it a bit expensive.  */\n@@ -4812,42 +4814,44 @@ rs6000_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n \n       case unaligned_load:\n       case vector_gather_load:\n+\t/* Like rs6000_insn_cost, make load insns cost a bit more.  */\n \tif (TARGET_EFFICIENT_UNALIGNED_VSX)\n-\t  return 1;\n-\n-        if (TARGET_VSX && TARGET_ALLOW_MOVMISALIGN)\n-          {\n-            elements = TYPE_VECTOR_SUBPARTS (vectype);\n-            if (elements == 2)\n-              /* Double word aligned.  */\n-              return 2;\n-\n-            if (elements == 4)\n-              {\n-                switch (misalign)\n-                  {\n-                    case 8:\n-                      /* Double word aligned.  */\n-                      return 2;\n+\t  return 2;\n \n-                    case -1:\n-                      /* Unknown misalignment.  */\n-                    case 4:\n-                    case 12:\n-                      /* Word aligned.  */\n-                      return 22;\n+\tif (TARGET_VSX && TARGET_ALLOW_MOVMISALIGN)\n+\t  {\n+\t    elements = TYPE_VECTOR_SUBPARTS (vectype);\n+\t    if (elements == 2)\n+\t      /* Double word aligned.  */\n+\t      return 4;\n \n-                    default:\n-                      gcc_unreachable ();\n-                  }\n-              }\n-          }\n+\t    if (elements == 4)\n+\t      {\n+\t\tswitch (misalign)\n+\t\t  {\n+\t\t  case 8:\n+\t\t    /* Double word aligned.  */\n+\t\t    return 4;\n+\n+\t\t  case -1:\n+\t\t    /* Unknown misalignment.  */\n+\t\t  case 4:\n+\t\t  case 12:\n+\t\t    /* Word aligned.  */\n+\t\t    return 33;\n+\n+\t\t  default:\n+\t\t    gcc_unreachable ();\n+\t\t  }\n+\t      }\n+\t  }\n \n-        if (TARGET_ALTIVEC)\n-          /* Misaligned loads are not supported.  */\n-          gcc_unreachable ();\n+\tif (TARGET_ALTIVEC)\n+\t  /* Misaligned loads are not supported.  */\n+\t  gcc_unreachable ();\n \n-        return 2;\n+\t/* Like rs6000_insn_cost, make load insns cost a bit more.  */\n+\treturn 4;\n \n       case unaligned_store:\n       case vector_scatter_store:"}]}