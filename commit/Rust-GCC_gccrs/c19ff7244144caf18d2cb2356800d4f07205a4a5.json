{"sha": "c19ff7244144caf18d2cb2356800d4f07205a4a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE5ZmY3MjQ0MTQ0Y2FmMThkMmNiMjM1NjgwMGQ0ZjA3MjA1YTRhNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-01-06T11:41:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-01-06T11:41:47Z"}, "message": "decl.c (annotate_value): Be prepared for discriminants inherited from parent record types.\n\n\t* gcc-interface/decl.c (annotate_value) <COMPONENT_REF>: Be prepared\n\tfor discriminants inherited from parent record types.\n\nFrom-SVN: r194939", "tree": {"sha": "ae81ecfc6d0850c3e4d688fdb87a565aafd1d532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae81ecfc6d0850c3e4d688fdb87a565aafd1d532"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c19ff7244144caf18d2cb2356800d4f07205a4a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19ff7244144caf18d2cb2356800d4f07205a4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19ff7244144caf18d2cb2356800d4f07205a4a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19ff7244144caf18d2cb2356800d4f07205a4a5/comments", "author": null, "committer": null, "parents": [{"sha": "83787c0e8c50dd11bb3098cb166425d82b76deb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83787c0e8c50dd11bb3098cb166425d82b76deb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83787c0e8c50dd11bb3098cb166425d82b76deb8"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "1ade2a0baea706380e5ab4cb616ed18724dfcdfe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19ff7244144caf18d2cb2356800d4f07205a4a5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19ff7244144caf18d2cb2356800d4f07205a4a5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c19ff7244144caf18d2cb2356800d4f07205a4a5", "patch": "@@ -1,3 +1,8 @@\n+2013-01-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (annotate_value) <COMPONENT_REF>: Be prepared\n+\tfor discriminants inherited from parent record types.\n+\n 2013-01-04  Robert Dewar  <dewar@adacore.com>\n \n \t* warnsw.adb: Minor fixes to -gnatw.d handling."}, {"sha": "f7db364c641105350aa688a8faeef843845a83a6", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19ff7244144caf18d2cb2356800d4f07205a4a5/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19ff7244144caf18d2cb2356800d4f07205a4a5/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=c19ff7244144caf18d2cb2356800d4f07205a4a5", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2013, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -4965,7 +4965,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    }\n \t}\n \n-      /* If this is a record type or subtype, call elaborate_expression_1 on\n+      /* If this is a record type or subtype, call elaborate_expression_2 on\n \t any field position.  Do this for both global and local types.\n \t Skip any fields that we haven't made trees for to avoid problems with\n \t class wide types.  */\n@@ -7286,15 +7286,22 @@ annotate_value (tree gnu_size)\n \n     case COMPONENT_REF:\n       /* The only case we handle here is a simple discriminant reference.  */\n-      if (TREE_CODE (TREE_OPERAND (gnu_size, 0)) == PLACEHOLDER_EXPR\n-\t  && TREE_CODE (TREE_OPERAND (gnu_size, 1)) == FIELD_DECL\n-\t  && DECL_DISCRIMINANT_NUMBER (TREE_OPERAND (gnu_size, 1)))\n-\treturn Create_Node (Discrim_Val,\n-\t\t\t    annotate_value (DECL_DISCRIMINANT_NUMBER\n-\t\t\t\t\t    (TREE_OPERAND (gnu_size, 1))),\n-\t\t\t    No_Uint, No_Uint);\n-      else\n-\treturn No_Uint;\n+      if (DECL_DISCRIMINANT_NUMBER (TREE_OPERAND (gnu_size, 1)))\n+\t{\n+\t  tree n = DECL_DISCRIMINANT_NUMBER (TREE_OPERAND (gnu_size, 1));\n+\n+\t  /* Climb up the chain of successive extensions, if any.  */\n+\t  while (TREE_CODE (TREE_OPERAND (gnu_size, 0)) == COMPONENT_REF\n+\t\t && DECL_NAME (TREE_OPERAND (TREE_OPERAND (gnu_size, 0), 1))\n+\t\t    == parent_name_id)\n+\t    gnu_size = TREE_OPERAND (gnu_size, 0);\n+\n+\t  if (TREE_CODE (TREE_OPERAND (gnu_size, 0)) == PLACEHOLDER_EXPR)\n+\t    return\n+\t      Create_Node (Discrim_Val, annotate_value (n), No_Uint, No_Uint);\n+\t}\n+\n+      return No_Uint;\n \n     CASE_CONVERT:   case NON_LVALUE_EXPR:\n       return annotate_value (TREE_OPERAND (gnu_size, 0));"}]}