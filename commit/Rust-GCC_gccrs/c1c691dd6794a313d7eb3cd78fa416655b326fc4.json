{"sha": "c1c691dd6794a313d7eb3cd78fa416655b326fc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFjNjkxZGQ2Nzk0YTMxM2Q3ZWIzY2Q3OGZhNDE2NjU1YjMyNmZjNA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-04T23:11:31Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-04T23:11:31Z"}, "message": "entered into RCS\n\nFrom-SVN: r892", "tree": {"sha": "13f29c59861c6af51193995d9fc44d9125f94c05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13f29c59861c6af51193995d9fc44d9125f94c05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1c691dd6794a313d7eb3cd78fa416655b326fc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c691dd6794a313d7eb3cd78fa416655b326fc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1c691dd6794a313d7eb3cd78fa416655b326fc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c691dd6794a313d7eb3cd78fa416655b326fc4/comments", "author": null, "committer": null, "parents": [{"sha": "7c6d68c8c4e94d1b230a93f7952e36e0547f88ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6d68c8c4e94d1b230a93f7952e36e0547f88ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c6d68c8c4e94d1b230a93f7952e36e0547f88ed"}], "stats": {"total": 174, "additions": 112, "deletions": 62}, "files": [{"sha": "8b10a2f7f7be3a58020f7189e90ac6c6ea9e55d5", "filename": "gcc/config/we32k/we32k.md", "status": "modified", "additions": 112, "deletions": 62, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1c691dd6794a313d7eb3cd78fa416655b326fc4/gcc%2Fconfig%2Fwe32k%2Fwe32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1c691dd6794a313d7eb3cd78fa416655b326fc4/gcc%2Fconfig%2Fwe32k%2Fwe32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.md?ref=c1c691dd6794a313d7eb3cd78fa416655b326fc4", "patch": "@@ -739,25 +739,42 @@\n   \"\"\n   \"mcomb %1, %0\")\n \f\n+;; test instruction\n+\n+;; We don't want to allow a constant operand for test insns because\n+;; (set (cc0) (const_int foo)) has no mode information.  Such insns will\n+;; be folded while optimizing anyway.\n+\n+(define_insn \"tstsi\"\n+  [(set (cc0) (match_operand:SI 0 \"nonimmediate_operand\" \"mr\"))]\n+  \"\"\n+  \"TSTW %0\")\n+\n+(define_insn \"tsthi\"\n+  [(set (cc0) (match_operand:HI 0 \"nonimmediate_operand\" \"mr\"))]\n+  \"\"\n+  \"TSTH %0\")\n+\n+(define_insn \"tstqi\"\n+  [(set (cc0) (match_operand:QI 0 \"nonimmediate_operand\" \"mr\"))]\n+  \"\"\n+  \"TSTB {sbyte}%0\")\n+\n ;; compare instruction\n \n (define_insn \"cmpsi\"\n-  [(set (cc0) (compare (match_operand:SI 0 \"general_operand\" \"mri\")\n+  [(set (cc0) (compare (match_operand:SI 0 \"nonimmediate_operand\" \"mr\")\n                        (match_operand:SI 1 \"general_operand\" \"mri\")))]\n   \"\"\n   \"CMPW %1, %0\")\n \n (define_insn \"cmphi\"\n-  [(set (cc0) (compare (match_operand:HI 0 \"general_operand\" \"mri\")\n+  [(set (cc0) (compare (match_operand:HI 0 \"nonimmediate_operand\" \"mr\")\n                        (match_operand:HI 1 \"general_operand\" \"mri\")))]\n   \"\"\n   \"*\n   {\n \n-  if (GET_CODE (operands[0]) == CONST_INT && \n-    ((unsigned long)INTVAL (operands[0]) & 0x8000L))\n-    operands[0] = gen_rtx(CONST_INT, SImode, INTVAL(operands[0]) | 0xffff0000L);\n-\n   if (GET_CODE (operands[1]) == CONST_INT &&\n     ((unsigned long)INTVAL (operands[1]) & 0x8000L))\n     operands[1] = gen_rtx(CONST_INT, SImode, INTVAL(operands[1]) | 0xffff0000L);\n@@ -768,59 +785,18 @@\n   }\")\n \n (define_insn \"cmpqi\"\n-  [(set (cc0) (compare (match_operand:QI 0 \"general_operand\" \"mri\")\n+  [(set (cc0) (compare (match_operand:QI 0 \"nonimmediate_operand\" \"mr\")\n                        (match_operand:QI 1 \"general_operand\" \"mri\")))]\n   \"\"\n   \"*\n   {\n \n-  if (GET_CODE (operands[0]) == CONST_INT && \n-    ((unsigned long)INTVAL (operands[0]) & 0x80L))\n-    operands[0] = gen_rtx(CONST_INT, SImode, INTVAL(operands[0]) | 0xffffff00L);\n-\n   if (GET_CODE (operands[1]) == CONST_INT &&\n     ((unsigned long)INTVAL (operands[1]) & 0x80L))\n     operands[1] = gen_rtx(CONST_INT, SImode, INTVAL(operands[1]) | 0xffffff00L);\n \n   output_asm_insn(\\\"CMPB {sbyte}%1, {sbyte}%0\\\",operands);\n \n-  return \\\"\\\";\n-  }\")\n-\n-;; test instruction\n-\n-(define_insn \"tstsi\"\n-  [(set (cc0) (match_operand:SI 0 \"general_operand\" \"mri\"))]\n-  \"\"\n-  \"TSTW %0\")\n-\n-(define_insn \"tsthi\"\n-  [(set (cc0) (match_operand:HI 0 \"general_operand\" \"mri\"))]\n-  \"\"\n-  \"*\n-  {\n-\n-  if (GET_CODE (operands[0]) == CONST_INT &&\n-    ((unsigned long)INTVAL (operands[0]) & 0x8000L))\n-    operands[0] = gen_rtx(CONST_INT, SImode, INTVAL(operands[0]) | 0xffff0000L);\n-\n-  output_asm_insn(\\\"TSTH %0\\\",operands);\n-\n-  return \\\"\\\";\n-  }\")\n-\n-(define_insn \"tstqi\"\n-  [(set (cc0) (match_operand:QI 0 \"general_operand\" \"mri\"))]\n-  \"\"\n-  \"*\n-  {\n-\n-  if (GET_CODE (operands[0]) == CONST_INT &&\n-    ((unsigned long)INTVAL (operands[0]) & 0x80L))\n-    operands[0] = gen_rtx(CONST_INT, SImode, INTVAL(operands[0]) | 0xffffff00L);\n-\n-  output_asm_insn(\\\"TSTB {sbyte}%0\\\",operands);\n-\n   return \\\"\\\";\n   }\")\n \f\n@@ -928,21 +904,95 @@\n \f\n ;; bit field instructions\n \n-;; (define_insn \"extzv\"\n-;;   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=mr\")\n-;;         (zero_extract:SI (match_operand:SI 1 \"register_operand\" \"mr\")\n-;;                          (match_operand:SI 2 \"general_operand\" \"mri\")\n-;;                          (match_operand:SI 3 \"general_operand\" \"mri\")))]\n-;;   \"\"\n-;;   \"EXTFW %2, %3, %1, %0\")\n+(define_insn \"extzv\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=mr\")\n+        (zero_extract:SI (match_operand:SI 1 \"general_operand\" \"mri\")\n+                         (match_operand:SI 2 \"immediate_operand\" \"i\")\n+                         (match_operand:SI 3 \"general_operand\" \"mri\")))]\n+  \"\"\n+  \"*\n+  {\n \n-;; (define_insn \"insv\"\n-;;   [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+mr\")\n-;;                          (match_operand:SI 1 \"general_operand\" \"mri\")\n-;;                          (match_operand:SI 2 \"general_operand\" \"mri\"))\n-;;         (match_operand:SI 3 \"general_operand\" \"mri\"))]\n-;;   \"\"\n-;;   \"INSFW %1, %2, %3, %0\")\n+  operands[2] = gen_rtx(CONST_INT, SImode, INTVAL(operands[2]) - 1);\n+  output_asm_insn(\\\"EXTFW %2, %3, %1, %0\\\",operands);\n+\n+  return \\\"\\\";\n+  }\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=mr\")\n+        (zero_extract:SI (match_operand:HI 1 \"general_operand\" \"mri\")\n+                         (match_operand:SI 2 \"immediate_operand\" \"i\")\n+                         (match_operand:SI 3 \"general_operand\" \"mri\")))]\n+  \"\"\n+  \"*\n+  {\n+\n+  operands[2] = gen_rtx(CONST_INT, SImode, INTVAL(operands[2]) - 1);\n+  output_asm_insn(\\\"EXTFH %2, %3, {uhalf}%1, {uword}%0\\\",operands);\n+\n+  return \\\"\\\";\n+  }\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=mr\")\n+        (zero_extract:SI (match_operand:QI 1 \"general_operand\" \"mri\")\n+                         (match_operand:SI 2 \"immediate_operand\" \"i\")\n+                         (match_operand:SI 3 \"general_operand\" \"mri\")))]\n+  \"\"\n+  \"*\n+  {\n+\n+  operands[2] = gen_rtx(CONST_INT, SImode, INTVAL(operands[2]) - 1);\n+  output_asm_insn(\\\"EXTFB %2, %3, {ubyte}%1, {uword}%0\\\",operands);\n+\n+  return \\\"\\\";\n+  }\")\n+\n+(define_insn \"insv\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+mr\")\n+                         (match_operand:SI 1 \"immediate_operand\" \"i\")\n+                         (match_operand:SI 2 \"general_operand\" \"mri\"))\n+        (match_operand:SI 3 \"general_operand\" \"mri\"))]\n+  \"\"\n+  \"*\n+  {\n+\n+  operands[1] = gen_rtx(CONST_INT, SImode, INTVAL(operands[1]) - 1);\n+  output_asm_insn(\\\"INSFW %1, %2, %3, %0\\\",operands);\n+\n+  return \\\"\\\";\n+  }\")\n+\n+(define_insn \"\"\n+  [(set (zero_extract:SI (match_operand:HI 0 \"nonimmediate_operand\" \"+mr\")\n+                         (match_operand:SI 1 \"immediate_operand\" \"i\")\n+                         (match_operand:SI 2 \"general_operand\" \"mri\"))\n+        (match_operand:SI 3 \"general_operand\" \"mri\"))]\n+  \"\"\n+  \"*\n+  {\n+\n+  operands[1] = gen_rtx(CONST_INT, SImode, INTVAL(operands[1]) - 1);\n+  output_asm_insn(\\\"INSFH %1, %2, {uword}%3, {uhalf}%0\\\",operands);\n+\n+  return \\\"\\\";\n+  }\")\n+\n+(define_insn \"\"\n+  [(set (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"+mr\")\n+                         (match_operand:SI 1 \"immediate_operand\" \"i\")\n+                         (match_operand:SI 2 \"general_operand\" \"mri\"))\n+        (match_operand:SI 3 \"general_operand\" \"mri\"))]\n+  \"\"\n+  \"*\n+  {\n+\n+  operands[1] = gen_rtx(CONST_INT, SImode, INTVAL(operands[1]) - 1);\n+  output_asm_insn(\\\"INSFB %1, %2, {uword}%3, {ubyte}%0\\\",operands);\n+\n+  return \\\"\\\";\n+  }\")\n \f\n ;; conditional branch instructions\n "}]}