{"sha": "577ee3a966170affb106f7a768f5253c692ef230", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc3ZWUzYTk2NjE3MGFmZmIxMDZmN2E3NjhmNTI1M2M2OTJlZjIzMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T12:37:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T12:37:45Z"}, "message": "[multiple changes]\n\n2013-10-14  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_prag.adb (Expand_Pragma_Check): Generate proper string\n\tfor invariant\n\t* gnat_rm.texi: Add documentation for pragmas\n\tType_Invariant[_Class]\n\t* par-prag.adb: Add entries for pragmas Type_Invariant[_Class]\n\t* sem_ch13.adb: Minor reformatting\n\t* sem_prag.adb: Implement pragmas Type_Invariant[_Class]\n\t* snames.ads-tmpl: Add entries for pragmas Type_Invariant[_Class]\n\n2013-10-14  Johannes Kanig  <kanig@adacore.com>\n\n\t* debug.adb: Release now unused debug switches that were only\n\trelevant for gnat2why backend, not the frontend\n\t* frontend.adb (Frontend) Do not stop when -gnatd.H is present,\n\twas unused\n\nFrom-SVN: r203524", "tree": {"sha": "59847790b25a063269e64e2337b8c480ef42c157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59847790b25a063269e64e2337b8c480ef42c157"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/577ee3a966170affb106f7a768f5253c692ef230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/577ee3a966170affb106f7a768f5253c692ef230", "html_url": "https://github.com/Rust-GCC/gccrs/commit/577ee3a966170affb106f7a768f5253c692ef230", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/577ee3a966170affb106f7a768f5253c692ef230/comments", "author": null, "committer": null, "parents": [{"sha": "d1d81616ecc0fe14487a862ad25b64a83da6173b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1d81616ecc0fe14487a862ad25b64a83da6173b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1d81616ecc0fe14487a862ad25b64a83da6173b"}], "stats": {"total": 194, "additions": 154, "deletions": 40}, "files": [{"sha": "e5fcfaca1bdc39d62321ec062c47d72343189f9b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=577ee3a966170affb106f7a768f5253c692ef230", "patch": "@@ -1,3 +1,21 @@\n+2013-10-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_prag.adb (Expand_Pragma_Check): Generate proper string\n+\tfor invariant\n+\t* gnat_rm.texi: Add documentation for pragmas\n+\tType_Invariant[_Class]\n+\t* par-prag.adb: Add entries for pragmas Type_Invariant[_Class]\n+\t* sem_ch13.adb: Minor reformatting\n+\t* sem_prag.adb: Implement pragmas Type_Invariant[_Class]\n+\t* snames.ads-tmpl: Add entries for pragmas Type_Invariant[_Class]\n+\n+2013-10-14  Johannes Kanig  <kanig@adacore.com>\n+\n+\t* debug.adb: Release now unused debug switches that were only\n+\trelevant for gnat2why backend, not the frontend\n+\t* frontend.adb (Frontend) Do not stop when -gnatd.H is present,\n+\twas unused\n+\n 2013-10-14  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_prag.adb (Analyze_Global_Item): Allow"}, {"sha": "5364574421b7168c702a2966512da04d32b6257e", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=577ee3a966170affb106f7a768f5253c692ef230", "patch": "@@ -125,16 +125,16 @@ package body Debug is\n    --  d.E\n    --  d.F  SPARK mode\n    --  d.G  Frame condition mode for gnat2why\n-   --  d.H  Standard package only mode for gnat2why\n+   --  d.H\n    --  d.I  Do not ignore enum representation clauses in CodePeer mode\n    --  d.J  Disable parallel SCIL generation mode\n-   --  d.K  SPARK check mode for gnat2why\n+   --  d.K\n    --  d.L  Depend on back end for limited types in if and case expressions\n    --  d.M  Relaxed RM semantics\n    --  d.N  Add node to all entities\n    --  d.O  Dump internal SCO tables\n    --  d.P  Previous (non-optimized) handling of length comparisons\n-   --  d.Q  Flow Analysis mode for gnat2why\n+   --  d.Q\n    --  d.R  Restrictions in ali files in positional form\n    --  d.S  Force Optimize_Alignment (Space)\n    --  d.T  Force Optimize_Alignment (Time)\n@@ -143,7 +143,7 @@ package body Debug is\n    --  d.W  Print out debugging information for Walk_Library_Items\n    --  d.X\n    --  d.Y\n-   --  d.Z  Dump flow analysis graphs, for debugging purposes (gnat2why)\n+   --  d.Z\n \n    --  d1   Error msgs have node numbers where possible\n    --  d2   Eliminate error flags in verbose form error messages\n@@ -596,7 +596,7 @@ package body Debug is\n \n    --  d.D  SPARK strict mode. Interpret compiler permissions as strictly as\n    --       possible in SPARK mode.\n-\n+   --\n    --  d.F  SPARK mode. Generate AST in a form suitable for formal\n    --       verification, as well as additional cross reference information in\n    --       ALI files to compute effects of subprograms. Note that ALI files\n@@ -606,10 +606,6 @@ package body Debug is\n    --       generate Why code. Instead, it generates ALI files with an extra\n    --       section which contains the effects of subprograms.\n \n-   --  d.H  Standard package only mode for gnat2why. In this mode, gnat2why\n-   --       will only generate Why code for package Standard. Any given input\n-   --       file will be ignored.\n-\n    --  d.I  Do not ignore enum representation clauses in CodePeer mode.\n    --       The default of ignoring representation clauses for enumeration\n    --       types in CodePeer is good for the majority of Ada code, but in some\n@@ -620,9 +616,6 @@ package body Debug is\n    --       done in parallel to speed processing. This switch disables this\n    --       behavior.\n \n-   --  d.K  SPARK check mode for gnat2why. In this mode, gnat2why does not\n-   --       generate Why code.\n-\n    --  d.L  Normally the front end generates special expansion for conditional\n    --       expressions of a limited type. This debug flag removes this special\n    --       case expansion, leaving it up to the back end to handle conditional\n@@ -644,9 +637,6 @@ package body Debug is\n    --       This is there in case we find a situation where the optimization\n    --       malfunctions, to provide a work around.\n \n-   --  d.Q  Flow Analysis mode for gnat2why. When this flag is given,\n-   --       gnat2why will do flow analysis, and no translation to Why is done.\n-\n    --  d.R  As documented in lib-writ.ads, restrictions in the ali file can\n    --       have two forms, positional and named. The named notation is the\n    --       current preferred form, but the use of this debug switch will force\n@@ -671,11 +661,6 @@ package body Debug is\n    --       the order in which units are walked. This is primarily for use in\n    --       debugging CodePeer mode.\n \n-   --  d.Z  In gnat2why, in Flow analysis mode (-gnatd.Q), dump the different\n-   --       graphs (control flow, control dependence) for debugging purposes.\n-   --       This debug flag will be removed when flow analysis is sufficiently\n-   --       stable.\n-\n    --  d.Y  Prevents the use of the N_Expression_With_Actions node even in the\n    --       case of the gcc back end. Provided as a back up in case the new\n    --       scheme has problems."}, {"sha": "5544e4719493142cff085617bdf94f364452de5d", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=577ee3a966170affb106f7a768f5253c692ef230", "patch": "@@ -311,6 +311,10 @@ package body Exp_Prag is\n       --  at\" is omitted for name = Assertion, since it is redundant, given\n       --  that the name of the exception is Assert_Failure.)\n \n+      --  Also, instead of \"XXX failed at\", we generate slightly\n+      --  different messages for some of the contract assertions (see\n+      --  code below for details).\n+\n       --  An alternative expansion is used when the No_Exception_Propagation\n       --  restriction is active and there is a local Assert_Failure handler.\n       --  This is not a common combination of circumstances, but it occurs in\n@@ -400,6 +404,15 @@ package body Exp_Prag is\n                   Insert_Str_In_Name_Buffer (\"failed \", 1);\n                   Add_Str_To_Name_Buffer (\" from \");\n \n+               --  For special case of Invariant, the string is \"failed\n+               --  invariant from yy\", to be consistent with the string that is\n+               --  generated for the aspect case (the code later on checks for\n+               --  this specific string to modify it in some cases, so this is\n+               --  functionally important).\n+\n+               elsif Nam = Name_Invariant then\n+                  Add_Str_To_Name_Buffer (\"failed invariant from \");\n+\n                --  For all other checks, the string is \"xxx failed at yyy\"\n                --  where xxx is the check name with current source file casing.\n "}, {"sha": "8a64134d91d908b8981962f775263d870a94301c", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=577ee3a966170affb106f7a768f5253c692ef230", "patch": "@@ -99,13 +99,6 @@ begin\n \n    CStand.Create_Standard;\n \n-   --  If the -gnatd.H flag is present, we are only interested in the Standard\n-   --  package, so the frontend has done its job here.\n-\n-   if Debug_Flag_Dot_HH then\n-      return;\n-   end if;\n-\n    --  Check possible symbol definitions specified by -gnateD switches\n \n    Prepcomp.Process_Command_Line_Symbol_Definitions;"}, {"sha": "9ea370b2c787f5c8df6302740590778463b96f9c", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=577ee3a966170affb106f7a768f5253c692ef230", "patch": "@@ -253,6 +253,8 @@ Implementation Defined Pragmas\n * Pragma Thread_Local_Storage::\n * Pragma Time_Slice::\n * Pragma Title::\n+* Pragma Type_Invariant::\n+* Pragma Type_Invariant_Class::\n * Pragma Unchecked_Union::\n * Pragma Unimplemented_Unit::\n * Pragma Universal_Aliasing ::\n@@ -1073,6 +1075,8 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Thread_Local_Storage::\n * Pragma Time_Slice::\n * Pragma Title::\n+* Pragma Type_Invariant::\n+* Pragma Type_Invariant_Class::\n * Pragma Unchecked_Union::\n * Pragma Unimplemented_Unit::\n * Pragma Universal_Aliasing ::\n@@ -5367,6 +5371,21 @@ subtype Q is R with\n   Dynamic_Predicate => F(Q) or G(Q);\n @end smallexample\n \n+Note that there is are no pragmas @code{Dynamic_Predicate}\n+or @code{Static_Predicate}. That is\n+because these pragmas would affect legality and semantics of\n+the program and thus do not have a neutral effect if ignored.\n+The motivation behind providing pragmas equivalent to\n+corresponding aspects is to allow a program to be written\n+using the pragmas, and then compiled with a compiler that\n+will ignore the pragmas. That doesn't work in the case of\n+static and dynamic predicates, since if the corresponding\n+pragmas are ignored, then the behavior of the program is\n+fundamentally changed (for example a membership test\n+@code{A in B} would not take into account a predicate\n+defined for subtype B). When following this approach, the\n+use of predicates should be avoided.\n+\n @node Pragma Preelaborable_Initialization\n @unnumberedsec Pragma Preelaborable_Initialization\n @findex Preelaborable_Initialization\n@@ -6786,6 +6805,56 @@ for this pragma, i.e.@: the parameters may be given in any order if named\n notation is used, and named and positional notation can be mixed\n following the normal rules for procedure calls in Ada.\n \n+@node Pragma Type_Invariant\n+@unnumberedsec Pragma Type_Invariant\n+@findex Invariant\n+@findex Type_Invariant pragma\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Type_Invariant\n+  ([Entity =>] type_LOCAL_NAME,\n+   [Check  =>] EXPRESSION);\n+@end smallexample\n+\n+@noindent\n+The @code{Type_Invariant} pragma is intended to be an exact\n+replacement for the language-defined @code{Type_Invariant}\n+aspect, and shares its restrictions and semantics. It differs\n+from the language defined @code{Invariant} pragma in that it\n+does not permit a string parameter, and it is\n+controlled by the assertion identifier @code{Type_Invariant}\n+rather than @code{Invariant}.\n+\n+@node Pragma Type_Invariant_Class\n+@unnumberedsec Pragma Type_Invariant_Class\n+@findex Invariant\n+@findex Type_Invariant_Class pragma\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Type_Invariant_Class\n+  ([Entity =>] type_LOCAL_NAME,\n+   [Check  =>] EXPRESSION);\n+@end smallexample\n+\n+@noindent\n+The @code{Type_Invariant_Class} pragma is intended to be an exact\n+replacement for the language-defined @code{Type_Invariant'Class}\n+aspect, and shares its restrictions and semantics.\n+\n+Note: This pragma is called @code{Type_Invariant_Class} rather than\n+@code{Type_Invariant'Class} because the latter would not be strictly\n+conforming to the allowed syntax for pragmas. The motivation\n+for providing pragmas equivalent to the aspects is to allow a program\n+to be written using the pragmas, and then compiled if necessary\n+using an Ada compiler that does not recognize the pragmas or\n+aspects, but is prepared to ignore the pragmas. The assertion\n+policy that controls this pragma is @code{Type_Invariant'Class},\n+not @code{Type_Invariant_Class}.\n+\n @node Pragma Unchecked_Union\n @unnumberedsec Pragma Unchecked_Union\n @cindex Unions in C"}, {"sha": "a965e12972cef6bd717fa6d6313221697dbf3613", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=577ee3a966170affb106f7a768f5253c692ef230", "patch": "@@ -1293,6 +1293,8 @@ begin\n            Pragma_Thread_Local_Storage           |\n            Pragma_Time_Slice                     |\n            Pragma_Title                          |\n+           Pragma_Type_Invariant                 |\n+           Pragma_Type_Invariant_Class           |\n            Pragma_Unchecked_Union                |\n            Pragma_Unimplemented_Unit             |\n            Pragma_Universal_Aliasing             |"}, {"sha": "c584560b22f4804c3a520a8edd28d38a03aa6ec3", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=577ee3a966170affb106f7a768f5253c692ef230", "patch": "@@ -5961,7 +5961,6 @@ package body Sem_Ch13 is\n \n       if Present (SId) then\n          PDecl := Unit_Declaration_Node (SId);\n-\n       else\n          PDecl := Build_Invariant_Procedure_Declaration (Typ);\n       end if;"}, {"sha": "30816d5ee0e3760d899dc50afa8ae10a468c8b67", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=577ee3a966170affb106f7a768f5253c692ef230", "patch": "@@ -846,7 +846,7 @@ package body Sem_Prag is\n \n          if Is_Input then\n             if (Ekind (Item_Id) = E_Out_Parameter\n-                  and then not Is_Unconstrained_Or_Tagged_Item (Item_Id))\n+                 and then not Is_Unconstrained_Or_Tagged_Item (Item_Id))\n               or else\n                (Global_Seen and then not Appears_In (Subp_Inputs, Item_Id))\n             then\n@@ -11772,7 +11772,6 @@ package body Sem_Prag is\n                 Name_Link_Name));\n \n             Check_At_Least_N_Arguments (2);\n-\n             Check_At_Most_N_Arguments  (4);\n             Process_Convention (C, Def_Id);\n \n@@ -13716,7 +13715,7 @@ package body Sem_Prag is\n          begin\n             GNAT_Pragma;\n             Check_At_Least_N_Arguments (2);\n-            Check_At_Most_N_Arguments (3);\n+            Check_At_Most_N_Arguments  (3);\n             Check_Optional_Identifier (Arg1, Name_Entity);\n             Check_Optional_Identifier (Arg2, Name_Check);\n \n@@ -15316,7 +15315,7 @@ package body Sem_Prag is\n          begin\n             GNAT_Pragma;\n             Check_At_Least_N_Arguments (1);\n-            Check_At_Most_N_Arguments (2);\n+            Check_At_Most_N_Arguments  (2);\n \n             --  Process first argument\n \n@@ -15700,11 +15699,13 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n-            Check_At_Least_N_Arguments (1);\n-            Check_At_Most_N_Arguments (1);\n+            Check_Arg_Count (1);\n             Check_No_Identifiers;\n             Check_Pre_Post;\n \n+            --  Rewrite Post[_Class] pragma as Precondition pragma setting the\n+            --  flag Class_Present to True for the Post_Class case.\n+\n             Set_Class_Present (N, Prag_Id = Pragma_Pre_Class);\n             PC_Pragma := New_Copy (N);\n             Set_Pragma_Identifier\n@@ -15760,11 +15761,13 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n-            Check_At_Least_N_Arguments (1);\n-            Check_At_Most_N_Arguments (1);\n+            Check_Arg_Count (1);\n             Check_No_Identifiers;\n             Check_Pre_Post;\n \n+            --  Rewrite Pre[_Class] pragma as Precondition pragma setting the\n+            --  flag Class_Present to True for the Pre_Class case.\n+\n             Set_Class_Present (N, Prag_Id = Pragma_Pre_Class);\n             PC_Pragma := New_Copy (N);\n             Set_Pragma_Identifier\n@@ -15787,7 +15790,7 @@ package body Sem_Prag is\n          begin\n             GNAT_Pragma;\n             Check_At_Least_N_Arguments (1);\n-            Check_At_Most_N_Arguments (2);\n+            Check_At_Most_N_Arguments  (2);\n             Check_Optional_Identifier (Arg1, Name_Check);\n             Check_Precondition_Postcondition (In_Body);\n \n@@ -18317,6 +18320,34 @@ package body Sem_Prag is\n             end loop;\n          end Title;\n \n+         ----------------------------\n+         -- Type_Invariant[_Class] --\n+         ----------------------------\n+\n+         --  pragma Type_Invariant[_Class]\n+         --    ([Entity =>] type_LOCAL_NAME,\n+         --     [Check  =>] EXPRESSION);\n+\n+         when Pragma_Type_Invariant       |\n+              Pragma_Type_Invariant_Class =>\n+         Type_Invariant : declare\n+            I_Pragma : Node_Id;\n+\n+         begin\n+            Check_Arg_Count (2);\n+\n+            --  Rewrite Type_Invariant[_Class] pragma as an Invariant pragma,\n+            --  setting Class_Present for the Type_Invariant_Class case.\n+\n+            Set_Class_Present (N, Prag_Id = Pragma_Type_Invariant_Class);\n+            I_Pragma := New_Copy (N);\n+            Set_Pragma_Identifier\n+              (I_Pragma, Make_Identifier (Loc, Name_Invariant));\n+            Rewrite (N, I_Pragma);\n+            Set_Analyzed (N, False);\n+            Analyze (N);\n+         end Type_Invariant;\n+\n          ---------------------\n          -- Unchecked_Union --\n          ---------------------\n@@ -21493,6 +21524,8 @@ package body Sem_Prag is\n       Pragma_Thread_Local_Storage           =>  0,\n       Pragma_Time_Slice                     => -1,\n       Pragma_Title                          => -1,\n+      Pragma_Type_Invariant                 => -1,\n+      Pragma_Type_Invariant_Class           => -1,\n       Pragma_Unchecked_Union                =>  0,\n       Pragma_Unimplemented_Unit             => -1,\n       Pragma_Universal_Aliasing             => -1,"}, {"sha": "cca70eb9a7c09122e60faa808d5111cc7c8d89a9", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577ee3a966170affb106f7a768f5253c692ef230/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=577ee3a966170affb106f7a768f5253c692ef230", "patch": "@@ -144,8 +144,6 @@ package Snames is\n    Name_Dynamic_Predicate              : constant Name_Id := N + $;\n    Name_Static_Predicate               : constant Name_Id := N + $;\n    Name_Synchronization                : constant Name_Id := N + $;\n-   Name_Type_Invariant                 : constant Name_Id := N + $;\n-   Name_Type_Invariant_Class           : constant Name_Id := N + $;\n \n    --  Some special names used by the expander. Note that the lower case u's\n    --  at the start of these names get translated to extra underscores. These\n@@ -448,7 +446,7 @@ package Snames is\n    Name_Wide_Character_Encoding        : constant Name_Id := N + $; -- GNAT\n    Last_Configuration_Pragma_Name      : constant Name_Id := N + $;\n \n-   --  Remaining pragma names\n+   --  Remaining pragma names (non-configuration pragmas)\n \n    Name_Abort_Defer                    : constant Name_Id := N + $; -- GNAT\n    Name_Abstract_State                 : constant Name_Id := N + $; -- GNAT\n@@ -621,6 +619,8 @@ package Snames is\n    Name_Thread_Local_Storage           : constant Name_Id := N + $; -- GNAT\n    Name_Time_Slice                     : constant Name_Id := N + $; -- GNAT\n    Name_Title                          : constant Name_Id := N + $; -- GNAT\n+   Name_Type_Invariant                 : constant Name_Id := N + $; -- GNAT\n+   Name_Type_Invariant_Class           : constant Name_Id := N + $; -- GNAT\n    Name_Unchecked_Union                : constant Name_Id := N + $; -- Ada 05\n    Name_Unimplemented_Unit             : constant Name_Id := N + $; -- GNAT\n    Name_Universal_Aliasing             : constant Name_Id := N + $; -- GNAT\n@@ -1905,6 +1905,8 @@ package Snames is\n       Pragma_Thread_Local_Storage,\n       Pragma_Time_Slice,\n       Pragma_Title,\n+      Pragma_Type_Invariant,\n+      Pragma_Type_Invariant_Class,\n       Pragma_Unchecked_Union,\n       Pragma_Unimplemented_Unit,\n       Pragma_Universal_Aliasing,"}]}