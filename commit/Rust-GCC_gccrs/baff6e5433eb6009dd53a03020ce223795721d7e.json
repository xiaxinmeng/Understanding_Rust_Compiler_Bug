{"sha": "baff6e5433eb6009dd53a03020ce223795721d7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFmZjZlNTQzM2ViNjAwOWRkNTNhMDMwMjBjZTIyMzc5NTcyMWQ3ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-09-06T08:53:49Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-09-06T08:53:49Z"}, "message": "for some reason this was missed in the\n2001-09-04  Nathan Sidwell  <nathan@codesourcery.com>\n\n\t* c-common.h (tree_dump_index): Add more comments.\n\t* c-dump.c (dump_files): Name flags `tree' rather than `ast'.\n\t(dump_option_value_info): New struct.\n\t(dump_options): New array.\n\t(dump_switch_p): Parse switch options symbolically.\n\t* doc/invoke.texi (-fdump-ast): Rename to ...\n\t(-fdump-tree): ... here. Document that options are symbolic, and\n\tnot all are applicable.\ncommit\n\nFrom-SVN: r45433", "tree": {"sha": "67ddde349859571d05e1e4e9db9b63123b97841b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67ddde349859571d05e1e4e9db9b63123b97841b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/baff6e5433eb6009dd53a03020ce223795721d7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baff6e5433eb6009dd53a03020ce223795721d7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baff6e5433eb6009dd53a03020ce223795721d7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baff6e5433eb6009dd53a03020ce223795721d7e/comments", "author": null, "committer": null, "parents": [{"sha": "418162d99e267af5340de074be303ddc5519bb5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/418162d99e267af5340de074be303ddc5519bb5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/418162d99e267af5340de074be303ddc5519bb5e"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "904e76be8ada9ca6d47bb126fa9e289557b2b28d", "filename": "gcc/c-dump.c", "status": "modified", "additions": 53, "deletions": 10, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baff6e5433eb6009dd53a03020ce223795721d7e/gcc%2Fc-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baff6e5433eb6009dd53a03020ce223795721d7e/gcc%2Fc-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-dump.c?ref=baff6e5433eb6009dd53a03020ce223795721d7e", "patch": "@@ -795,14 +795,32 @@ struct dump_file_info\n   int state;\t\t\t/* state of play */\n };\n \n-/* Table of tree dump switches.  */\n+/* Table of tree dump switches. This must be consistent with the\n+   TREE_DUMP_INDEX enumeration in c-common.h */\n static struct dump_file_info dump_files[TDI_end] =\n {\n   {\".tu\", \"dump-translation-unit\", 0, 0},\n   {\".class\", \"dump-class-hierarchy\", 0, 0},\n-  {\".original\", \"dump-ast-original\", 0, 0},\n-  {\".optimized\", \"dump-ast-optimized\", 0, 0},\n-  {\".inlined\", \"dump-ast-inlined\", 0, 0},\n+  {\".original\", \"dump-tree-original\", 0, 0},\n+  {\".optimized\", \"dump-tree-optimized\", 0, 0},\n+  {\".inlined\", \"dump-tree-inlined\", 0, 0},\n+};\n+\n+/* Define a name->number mapping for a dump flag value. */\n+struct dump_option_value_info\n+{\n+  const char *name;\t\t/* the name of the value */\n+  int value;\t\t\t/* the value of the name */\n+};\n+\n+/* Table of dump options. This must be consistent with the TDF_* flags\n+   in c-common.h */\n+static const struct dump_option_value_info dump_options[] =\n+{\n+  {\"address\", TDF_ADDRESS},\n+  {\"slim\", TDF_SLIM},\n+  {\"all\", ~0},\n+  {NULL, 0}\n };\n \n /* Begin a tree dump for PHASE. Stores any user supplied flag in\n@@ -876,13 +894,38 @@ dump_switch_p (arg)\n   for (ix = 0; ix != TDI_end; ix++)\n     if ((option_value = skip_leading_substring (arg, dump_files[ix].swtch)))\n       {\n+\tconst char *ptr = option_value;\n+\tint flags = 0;\n+\t\n+\twhile (*ptr)\n+\t  {\n+\t    const struct dump_option_value_info *option_ptr;\n+\t    const char *end_ptr;\n+\t    unsigned length;\n+\t    \n+\t    while (*ptr == '-')\n+\t      ptr++;\n+\t    end_ptr = strchr (ptr, '-');\n+\t    if (!end_ptr)\n+\t      end_ptr = ptr + strlen (ptr);\n+\t    length = end_ptr - ptr;\n+\t    \n+\t    for (option_ptr = dump_options; option_ptr->name;\n+\t\t option_ptr++)\n+\t      if (strlen (option_ptr->name) == length\n+\t\t  && !memcmp (option_ptr->name, ptr, length))\n+\t\t{\n+\t\t  flags |= option_ptr->value;\n+\t\t  goto found;\n+\t\t}\n+\t    warning (\"ignoring unknown option `%.*s' in `-f%s'\",\n+\t\t     length, ptr, dump_files[ix].swtch);\n+\t  found:;\n+\t    ptr = end_ptr;\n+\t  }\n+\t\n \tdump_files[ix].state = -1;\n-\tif (*option_value == '-')\n-\t  dump_files[ix].flags\n-\t    = read_integral_parameter (option_value + 1, arg, 0);\n-\telse if (*option_value)\n-\t  warning (\"ignoring `%s' at end of `-f%s'\",\n-\t\t   option_value, dump_files[ix].swtch);\n+\tdump_files[ix].flags = flags;\n \t\n \treturn 1;\n       }"}]}