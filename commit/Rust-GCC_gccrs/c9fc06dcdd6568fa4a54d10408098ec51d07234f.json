{"sha": "c9fc06dcdd6568fa4a54d10408098ec51d07234f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlmYzA2ZGNkZDY1NjhmYTRhNTRkMTA0MDgwOThlYzUxZDA3MjM0Zg==", "commit": {"author": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2011-06-21T06:42:05Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2011-06-21T06:42:05Z"}, "message": "PR middle-end/49139 fix always_inline diagnostics\n\nFrom-SVN: r175239", "tree": {"sha": "8dd93dc6abd84a32b62b4e2bfae943c2c673d753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dd93dc6abd84a32b62b4e2bfae943c2c673d753"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9fc06dcdd6568fa4a54d10408098ec51d07234f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9fc06dcdd6568fa4a54d10408098ec51d07234f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9fc06dcdd6568fa4a54d10408098ec51d07234f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9fc06dcdd6568fa4a54d10408098ec51d07234f/comments", "author": null, "committer": null, "parents": [{"sha": "f1ee724ceb567af3f1343ceac6d87a69abc9c800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ee724ceb567af3f1343ceac6d87a69abc9c800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ee724ceb567af3f1343ceac6d87a69abc9c800"}], "stats": {"total": 82, "additions": 50, "deletions": 32}, "files": [{"sha": "de9bbe3edeb611a07d44e689fb1e15d4436f9058", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=c9fc06dcdd6568fa4a54d10408098ec51d07234f", "patch": "@@ -986,6 +986,14 @@ process_function_and_variable_attributes (struct cgraph_node *first,\n \t  DECL_ATTRIBUTES (decl) = remove_attribute (\"weakref\",\n \t\t\t\t\t\t     DECL_ATTRIBUTES (decl));\n \t}\n+\n+      if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (decl))\n+\t  && !DECL_DECLARED_INLINE_P (decl)\n+\t  /* redefining extern inline function makes it DECL_UNINLINABLE.  */\n+\t  && !DECL_UNINLINABLE (decl))\n+\twarning_at (DECL_SOURCE_LOCATION (decl), OPT_Wattributes,\n+\t\t    \"always_inline function might not be inlinable\");\n+     \n       process_common_attributes (decl);\n     }\n   for (vnode = varpool_nodes; vnode != first_var; vnode = vnode->next)"}, {"sha": "39c0138956ed03f57510f4c922dc9f80486976c9", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=c9fc06dcdd6568fa4a54d10408098ec51d07234f", "patch": "@@ -348,8 +348,7 @@ inline_transform (struct cgraph_node *node)\n {\n   unsigned int todo = 0;\n   struct cgraph_edge *e;\n-  bool inline_p = false;\n-\n+ \n   /* FIXME: Currently the pass manager is adding inline transform more than\n      once to some clones.  This needs revisiting after WPA cleanups.  */\n   if (cfun->after_inlining)\n@@ -361,20 +360,17 @@ inline_transform (struct cgraph_node *node)\n     save_inline_function_body (node);\n \n   for (e = node->callees; e; e = e->next_callee)\n+    cgraph_redirect_edge_call_stmt_to_callee (e);\n+\n+  timevar_push (TV_INTEGRATION);\n+  if (node->callees)\n     {\n-      cgraph_redirect_edge_call_stmt_to_callee (e);\n-      if (!e->inline_failed || warn_inline)\n-        inline_p = true;\n       /* Redirecting edges might lead to a need for vops to be recomputed.  */\n       todo |= TODO_update_ssa_only_virtuals;\n-    }\n-\n-  if (inline_p)\n-    {\n-      timevar_push (TV_INTEGRATION);\n       todo = optimize_inline_calls (current_function_decl);\n-      timevar_pop (TV_INTEGRATION);\n     }\n+  timevar_pop (TV_INTEGRATION);\n+\n   cfun->always_inline_functions_inlined = true;\n   cfun->after_inlining = true;\n   return todo | execute_fixup_cfg ();"}, {"sha": "1c59122303dc1b286ef7a571aa5c51c642302e5f", "filename": "gcc/testsuite/g++.dg/ipa/devirt-7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-7.C?ref=c9fc06dcdd6568fa4a54d10408098ec51d07234f", "patch": "@@ -56,7 +56,7 @@ int __attribute__ ((noinline,noclone)) get_input(void)\n   return 1;\n }\n \n-int __attribute__ ((always_inline))\n+int inline __attribute__ ((always_inline))\n A::middleman_1 (int i)\n {\n   return this->foo (i);"}, {"sha": "bc8e7926be04eda82467d6d09a6b5877feed35b4", "filename": "gcc/testsuite/gcc.dg/20051201-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2F20051201-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2F20051201-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20051201-1.c?ref=c9fc06dcdd6568fa4a54d10408098ec51d07234f", "patch": "@@ -2,7 +2,7 @@\n    tree_flow_call_edges_add.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fprofile-generate\" } */\n+/* { dg-options \"-O1 -fprofile-generate -Wno-attributes\" } */\n \n static __attribute__ ((always_inline)) void \n baz ()"}, {"sha": "482a0a2b46c6509422ad18fa33c1d0e05821bb56", "filename": "gcc/testsuite/gcc.dg/always_inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c?ref=c9fc06dcdd6568fa4a54d10408098ec51d07234f", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Winline -O2\" } */\n+/* { dg-options \"-O2\" } */\n #include <stdarg.h>\n inline __attribute__ ((always_inline)) void\n-e(int t, ...) /* { dg-message \"sorry\\[^\\n\\]*variable argument\" \"\" } */\n+e(int t, ...) /* { dg-error \"variable argument lists\" } */\n {\n   va_list q;\n   va_start (q, t);"}, {"sha": "4f1634e13488d7c838f01621bda1939302f01441", "filename": "gcc/testsuite/gcc.dg/always_inline2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline2.c?ref=c9fc06dcdd6568fa4a54d10408098ec51d07234f", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Winline -O2\" } */\n-inline __attribute__ ((always_inline)) void t(void); /* { dg-message \"sorry\\[^\\n\\]*body not available\" \"\" } */\n+/* { dg-options \"-O2\" } */\n+inline __attribute__ ((always_inline)) void t(void); /* { dg-error \"body not available\" } */\n void\n q(void)\n {\n-  t(); \t\t\t\t/* { dg-message \"sorry\\[^\\n\\]*called from here\" \"\" } */\n+  t(); \t\t\t\t/* { dg-error \"called from here\" } */\n }"}, {"sha": "80ea314741b9310bf84de209b19835b4305b2b77", "filename": "gcc/testsuite/gcc.dg/always_inline3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c?ref=c9fc06dcdd6568fa4a54d10408098ec51d07234f", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Winline -O2\" } */\n+/* { dg-options \"-O2\" } */\n int do_something_evil (void);\n inline __attribute__ ((always_inline)) void\n-q2(void) /* { dg-message \"sorry\\[^\\n\\]*recursive\" \"\" } */\n+q2(void) /* { dg-error \"recursive inlining\" } */\n {\n   if (do_something_evil ())\n     return;\n-  q2(); \t\t\t/* { dg-message \"sorry\\[^\\n\\]*called from here\" \"\" } */\n+  q2(); \t\t\t/* { dg-error \"called from here\" } */\n   q2(); /* With -O2 we don't warn here, it is eliminated by tail recursion.  */\n }"}, {"sha": "7d03e51ae37ae71760289ad2e196a1567e61ca18", "filename": "gcc/testsuite/gcc.dg/debug/pr41264-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr41264-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr41264-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr41264-1.c?ref=c9fc06dcdd6568fa4a54d10408098ec51d07234f", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-options \"-Wno-attributes\" } */\n \n #if (__SIZEOF_INT__ <= 2)\t\n typedef unsigned long hashval_t;"}, {"sha": "4b196acb07f3fd670f462e033809157b10e2a793", "filename": "gcc/testsuite/gcc.dg/fail_always_inline.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Ffail_always_inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Ffail_always_inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffail_always_inline.c?ref=c9fc06dcdd6568fa4a54d10408098ec51d07234f", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+\n+extern __attribute__ ((always_inline)) void\n+ bar() { } /* { dg-warning \"function might not be inlinable\" } */\n+\n+void\n+f()\n+{\n+  bar(); \n+}\n+"}, {"sha": "1785e1ce6d5f49b6f3e3e5a452eaa9ae887d9467", "filename": "gcc/testsuite/gcc.dg/inline-22.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Finline-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Finline-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-22.c?ref=c9fc06dcdd6568fa4a54d10408098ec51d07234f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-funit-at-a-time\" } */\n+/* { dg-options \"-funit-at-a-time -Wno-attributes\" } */\n /* Verify we can inline without a complete prototype and with promoted\n    arguments.  See also PR32492.  */\n __attribute__((always_inline)) void f1() {}"}, {"sha": "750c2027510c53d5eb2762520967936140cce215", "filename": "gcc/testsuite/gcc.dg/lto/20090218-1_0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090218-1_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090218-1_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090218-1_0.c?ref=c9fc06dcdd6568fa4a54d10408098ec51d07234f", "patch": "@@ -1,4 +1,4 @@\n-void set_mem_alias_set ()  __attribute__ ((always_inline));\n+void inline set_mem_alias_set ()  __attribute__ ((always_inline));\n void emit_push_insn () {\n   set_mem_alias_set ();\n }"}, {"sha": "7db2c85e4cec7a716c1b682c9cd7549205eadf15", "filename": "gcc/testsuite/gcc.dg/lto/20090218-1_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090218-1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090218-1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090218-1_1.c?ref=c9fc06dcdd6568fa4a54d10408098ec51d07234f", "patch": "@@ -4,6 +4,6 @@ int main(void)\n }\n static void  __attribute__ ((noinline)) get_mem_attrs () {\n }\n-void  __attribute__ ((always_inline)) set_mem_alias_set () {\n+void  inline __attribute__ ((always_inline)) set_mem_alias_set () {\n   get_mem_attrs ();\n }"}, {"sha": "97e8946da544d5056f4b71e63defaf07e76434ea", "filename": "gcc/testsuite/gcc.dg/torture/pta-structcopy-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-structcopy-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-structcopy-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-structcopy-1.c?ref=c9fc06dcdd6568fa4a54d10408098ec51d07234f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fdump-tree-ealias\" } */\n+/* { dg-options \"-fdump-tree-ealias -Wno-attributes\" } */\n /* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n \n struct X"}, {"sha": "7fa0b253fb13e10c00357fd418bf75a9dbd76e24", "filename": "gcc/testsuite/gcc.dg/uninit-pred-5_a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pred-5_a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pred-5_a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pred-5_a.c?ref=c9fc06dcdd6568fa4a54d10408098ec51d07234f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Wuninitialized -O2\" } */\n+/* { dg-options \"-Wuninitialized -Wno-attributes -O2\" } */\n \n int g;\n int bar();"}, {"sha": "9760fa8a5c8c950a6f75c730095753325b7a7616", "filename": "gcc/testsuite/gcc.dg/uninit-pred-5_b.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pred-5_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pred-5_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pred-5_b.c?ref=c9fc06dcdd6568fa4a54d10408098ec51d07234f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Wuninitialized -O2\" } */\n+/* { dg-options \"-Wuninitialized -Wno-attributes -O2\" } */\n \n int g;\n int bar();"}, {"sha": "c8b9f4c19da34c728185d8e19869f3fc8de5b527", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fc06dcdd6568fa4a54d10408098ec51d07234f/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=c9fc06dcdd6568fa4a54d10408098ec51d07234f", "patch": "@@ -3192,7 +3192,7 @@ tree_inlinable_function_p (tree fn)\n \t As a bonus we can now give more details about the reason why a\n \t function is not inlinable.  */\n       if (always_inline)\n-\tsorry (inline_forbidden_reason, fn);\n+\terror (inline_forbidden_reason, fn);\n       else if (do_warning)\n \twarning (OPT_Winline, inline_forbidden_reason, fn);\n \n@@ -3742,11 +3742,13 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n \n       if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn))\n \t  /* Avoid warnings during early inline pass. */\n-\t  && cgraph_global_info_ready)\n+\t  && cgraph_global_info_ready\n+\t  /* PR 20090218-1_0.c. Body can be provided by another module. */\n+\t  && (reason != CIF_BODY_NOT_AVAILABLE || !flag_generate_lto))\n \t{\n-\t  sorry (\"inlining failed in call to %q+F: %s\", fn,\n-\t\t _(cgraph_inline_failed_string (reason)));\n-\t  sorry (\"called from here\");\n+\t  error (\"inlining failed in call to always_inline %q+F: %s\", fn,\n+\t\t cgraph_inline_failed_string (reason));\n+\t  error (\"called from here\");\n \t}\n       else if (warn_inline\n \t       && DECL_DECLARED_INLINE_P (fn)"}]}