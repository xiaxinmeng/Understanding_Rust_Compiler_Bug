{"sha": "b939d4f696ab25c3bfab64a779fd8749a67a470c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkzOWQ0ZjY5NmFiMjVjM2JmYWI2NGE3NzlmZDg3NDlhNjdhNDcwYw==", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "rafael.espindola@gmail.com", "date": "2012-01-27T19:38:56Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2012-01-27T19:38:56Z"}, "message": "typeinfo: Correctly match #pragma GCC visibility pop with #pragma GCC visibility push.\n\n2011-01-27  Rafael Avila de Espindola  <rafael.espindola@gmail.com>\n\n\t* libsupc++/typeinfo: Correctly match #pragma GCC visibility\n\tpop with #pragma GCC visibility push.\n\nFrom-SVN: r183641", "tree": {"sha": "b29e5508ec732924182811f7efeb1c20c3a624c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b29e5508ec732924182811f7efeb1c20c3a624c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b939d4f696ab25c3bfab64a779fd8749a67a470c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b939d4f696ab25c3bfab64a779fd8749a67a470c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b939d4f696ab25c3bfab64a779fd8749a67a470c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b939d4f696ab25c3bfab64a779fd8749a67a470c/comments", "author": {"login": "espindola", "id": 42633, "node_id": "MDQ6VXNlcjQyNjMz", "avatar_url": "https://avatars.githubusercontent.com/u/42633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/espindola", "html_url": "https://github.com/espindola", "followers_url": "https://api.github.com/users/espindola/followers", "following_url": "https://api.github.com/users/espindola/following{/other_user}", "gists_url": "https://api.github.com/users/espindola/gists{/gist_id}", "starred_url": "https://api.github.com/users/espindola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/espindola/subscriptions", "organizations_url": "https://api.github.com/users/espindola/orgs", "repos_url": "https://api.github.com/users/espindola/repos", "events_url": "https://api.github.com/users/espindola/events{/privacy}", "received_events_url": "https://api.github.com/users/espindola/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38ee08158813b3e8c5191017af03ed5d21a12f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38ee08158813b3e8c5191017af03ed5d21a12f63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38ee08158813b3e8c5191017af03ed5d21a12f63"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "0a455335ad7ef046a4671d32625a17cbcda26069", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b939d4f696ab25c3bfab64a779fd8749a67a470c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b939d4f696ab25c3bfab64a779fd8749a67a470c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b939d4f696ab25c3bfab64a779fd8749a67a470c", "patch": "@@ -1,3 +1,8 @@\n+2011-01-27  Rafael Avila de Espindola  <rafael.espindola@gmail.com>\n+\n+\t* libsupc++/typeinfo: Correctly match #pragma GCC visibility\n+\tpop with #pragma GCC visibility push.\n+\n 2012-01-27  Benjamin Kosnik  <bkoz@redhat.com>\n \t    Matthias Klose  <doko@ubuntu.com>\n "}, {"sha": "f0382d64f7653c28d355b729b122f29899054974", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b939d4f696ab25c3bfab64a779fd8749a67a470c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b939d4f696ab25c3bfab64a779fd8749a67a470c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=b939d4f696ab25c3bfab64a779fd8749a67a470c", "patch": "@@ -1,6 +1,6 @@\n // RTTI support for -*- C++ -*-\n // Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-// 2003, 2004, 2005, 2006, 2007, 2009, 2010, 2011\n+// 2003, 2004, 2005, 2006, 2007, 2009, 2010, 2011, 2012\n // Free Software Foundation\n //\n // This file is part of GCC.\n@@ -9,12 +9,12 @@\n // it under the terms of the GNU General Public License as published by\n // the Free Software Foundation; either version 3, or (at your option)\n // any later version.\n-// \n+//\n // GCC is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n-// \n+//\n // Under Section 7 of GPL version 3, you are granted additional\n // permissions described in the GCC Runtime Library Exception, version\n // 3.1, as published by the Free Software Foundation.\n@@ -38,7 +38,6 @@\n #include <bits/hash_bytes.h>\n #endif\n \n-\n #pragma GCC visibility push(default)\n \n extern \"C++\" {\n@@ -80,15 +79,15 @@ namespace __cxxabiv1\n   #endif\n #endif\n \n-namespace std \n+namespace std\n {\n   /**\n    *  @brief  Part of RTTI.\n    *\n    *  The @c type_info class describes type information generated by\n    *  an implementation.\n   */\n-  class type_info \n+  class type_info\n   {\n   public:\n     /** Destructor first. Being the first non-inline virtual function, this\n@@ -172,9 +171,9 @@ namespace std\n \n   protected:\n     const char *__name;\n-    \n+\n     explicit type_info(const char *__n): __name(__n) { }\n-    \n+\n   private:\n     /// Assigning type_info is not supported.\n     type_info& operator=(const type_info&);\n@@ -187,7 +186,7 @@ namespace std\n    *\n    *  If you attempt an invalid @c dynamic_cast expression, an instance of\n    *  this class (or something derived from this class) is thrown.  */\n-  class bad_cast : public exception \n+  class bad_cast : public exception\n   {\n   public:\n     bad_cast() _GLIBCXX_USE_NOEXCEPT { }\n@@ -199,12 +198,12 @@ namespace std\n     // See comment in eh_exception.cc.\n     virtual const char* what() const _GLIBCXX_USE_NOEXCEPT;\n   };\n-  \n-  /** \n+\n+  /**\n    *  @brief Thrown when a NULL pointer in a @c typeid expression is used.\n    *  @ingroup exceptions\n    */\n-  class bad_typeid : public exception \n+  class bad_typeid : public exception\n   {\n   public:\n     bad_typeid () _GLIBCXX_USE_NOEXCEPT { }\n@@ -218,7 +217,8 @@ namespace std\n   };\n } // namespace std\n \n+} // extern \"C++\"\n+\n #pragma GCC visibility pop\n \n-} // extern \"C++\"\n #endif"}]}