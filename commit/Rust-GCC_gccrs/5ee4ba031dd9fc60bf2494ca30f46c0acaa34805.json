{"sha": "5ee4ba031dd9fc60bf2494ca30f46c0acaa34805", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVlNGJhMDMxZGQ5ZmM2MGJmMjQ5NGNhMzBmNDZjMGFjYWEzNDgwNQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-22T23:46:05Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-22T23:46:05Z"}, "message": "analyzer: handle error/error_at_line [PR99196]\n\nPR analyzer/99196 describes a false positive from -fanalyzer due to\nthe analyzer not \"knowing\" that calls to GNU libc's error(3) with a\nnonzero status terminate the process and thus don't return.\n\nThis patch fixes the false positive by special-casing \"error\" and\n\"error_at_line\".\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/99196\n\t* engine.cc (exploded_node::on_stmt): Provide terminate_path\n\tflag as a way for on_call_pre to terminate the current analysis\n\tpath.\n\t* region-model-impl-calls.cc (call_details::num_args): New.\n\t(region_model::impl_call_error): New.\n\t* region-model.cc (region_model::on_call_pre): Add param\n\t\"out_terminate_path\".  Handle \"error\" and \"error_at_line\".\n\t* region-model.h (call_details::num_args): New decl.\n\t(region_model::on_call_pre): Add param \"out_terminate_path\".\n\t(region_model::impl_call_error): New decl.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/99196\n\t* gcc.dg/analyzer/error-1.c: New test.\n\t* gcc.dg/analyzer/error-2.c: New test.\n\t* gcc.dg/analyzer/error-3.c: New test.", "tree": {"sha": "a8f78d8b5ba74d0c16c5f5655244220ac862dd89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8f78d8b5ba74d0c16c5f5655244220ac862dd89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "609204abb889166c17a600121ba8ced18db2567a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/609204abb889166c17a600121ba8ced18db2567a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/609204abb889166c17a600121ba8ced18db2567a"}], "stats": {"total": 198, "additions": 194, "deletions": 4}, "files": [{"sha": "0edeb490a5348c3c69dd8faed5ed4dbe86f49a01", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=5ee4ba031dd9fc60bf2494ca30f46c0acaa34805", "patch": "@@ -1132,6 +1132,7 @@ exploded_node::on_stmt (exploded_graph &eg,\n \t\t\t\t  stmt);\n \n   bool unknown_side_effects = false;\n+  bool terminate_path = false;\n \n   switch (gimple_code (stmt))\n     {\n@@ -1203,7 +1204,7 @@ exploded_node::on_stmt (exploded_graph &eg,\n \t  }\n \telse\n \t  unknown_side_effects\n-\t    = state->m_region_model->on_call_pre (call, &ctxt);\n+\t    = state->m_region_model->on_call_pre (call, &ctxt, &terminate_path);\n       }\n       break;\n \n@@ -1215,6 +1216,9 @@ exploded_node::on_stmt (exploded_graph &eg,\n       break;\n     }\n \n+  if (terminate_path)\n+    return on_stmt_flags::terminate_path ();\n+\n   bool any_sm_changes = false;\n   int sm_idx;\n   sm_state_map *smap;"}, {"sha": "72404a5bc6149b5c2bad8b438de82a89ee8006c2", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=5ee4ba031dd9fc60bf2494ca30f46c0acaa34805", "patch": "@@ -96,6 +96,14 @@ call_details::maybe_set_lhs (const svalue *result) const\n     return false;\n }\n \n+/* Return the number of arguments used by the call statement.  */\n+\n+unsigned\n+call_details::num_args () const\n+{\n+  return gimple_call_num_args (m_call);\n+}\n+\n /* Get argument IDX at the callsite as a tree.  */\n \n tree\n@@ -240,6 +248,36 @@ region_model::impl_call_calloc (const call_details &cd)\n   return true;\n }\n \n+/* Handle the on_call_pre part of \"error\" and \"error_at_line\" from\n+   GNU's non-standard <error.h>.\n+   MIN_ARGS identifies the minimum number of expected arguments\n+   to be consistent with such a call (3 and 5 respectively).\n+   Return true if handling it as one of these functions.\n+   Write true to *OUT_TERMINATE_PATH if this execution path should be\n+   terminated (e.g. the function call terminates the process).  */\n+\n+bool\n+region_model::impl_call_error (const call_details &cd, unsigned min_args,\n+\t\t\t       bool *out_terminate_path)\n+{\n+  /* Bail if not enough args.  */\n+  if (cd.num_args () < min_args)\n+    return false;\n+\n+  /* Initial argument ought to be of type \"int\".  */\n+  if (cd.get_arg_type (0) != integer_type_node)\n+    return false;\n+\n+  /* The process exits if status != 0, so it only continues\n+     for the case where status == 0.\n+     Add that constraint, or terminate this analysis path.  */\n+  tree status = cd.get_arg_tree (0);\n+  if (!add_constraint (status, EQ_EXPR, integer_zero_node, cd.get_ctxt ()))\n+    *out_terminate_path = true;\n+\n+  return true;\n+}\n+\n /* Handle the on_call_post part of \"free\", after sm-handling.\n \n    If the ptr points to an underlying heap region, delete the region,"}, {"sha": "2053f8f79bbc98d01bf220e0b195313fe144fe34", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=5ee4ba031dd9fc60bf2494ca30f46c0acaa34805", "patch": "@@ -741,10 +741,14 @@ region_model::on_assignment (const gassign *assign, region_model_context *ctxt)\n \n    Return true if the function call has unknown side effects (it wasn't\n    recognized and we don't have a body for it, or are unable to tell which\n-   fndecl it is).  */\n+   fndecl it is).\n+\n+   Write true to *OUT_TERMINATE_PATH if this execution path should be\n+   terminated (e.g. the function call terminates the process).  */\n \n bool\n-region_model::on_call_pre (const gcall *call, region_model_context *ctxt)\n+region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n+\t\t\t   bool *out_terminate_path)\n {\n   bool unknown_side_effects = false;\n \n@@ -836,6 +840,20 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt)\n \treturn impl_call_calloc (cd);\n       else if (is_named_call_p (callee_fndecl, \"alloca\", call, 1))\n \treturn impl_call_alloca (cd);\n+      else if (is_named_call_p (callee_fndecl, \"error\"))\n+\t{\n+\t  if (impl_call_error (cd, 3, out_terminate_path))\n+\t    return false;\n+\t  else\n+\t    unknown_side_effects = true;\n+\t}\n+      else if (is_named_call_p (callee_fndecl, \"error_at_line\"))\n+\t{\n+\t  if (impl_call_error (cd, 5, out_terminate_path))\n+\t    return false;\n+\t  else\n+\t    unknown_side_effects = true;\n+\t}\n       else if (is_named_call_p (callee_fndecl, \"getchar\", call, 0))\n \t{\n \t  /* No side-effects (tracking stream state is out-of-scope"}, {"sha": "776839415a255a110b6eead13f5e690fd24ab6a5", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=5ee4ba031dd9fc60bf2494ca30f46c0acaa34805", "patch": "@@ -383,6 +383,8 @@ class call_details\n \n   bool maybe_set_lhs (const svalue *result) const;\n \n+  unsigned num_args () const;\n+\n   tree get_arg_tree (unsigned idx) const;\n   tree get_arg_type (unsigned idx) const;\n   const svalue *get_arg_svalue (unsigned idx) const;\n@@ -442,7 +444,8 @@ class region_model\n   void on_assignment (const gassign *stmt, region_model_context *ctxt);\n   const svalue *get_gassign_result (const gassign *assign,\n \t\t\t\t    region_model_context *ctxt);\n-  bool on_call_pre (const gcall *stmt, region_model_context *ctxt);\n+  bool on_call_pre (const gcall *stmt, region_model_context *ctxt,\n+\t\t    bool *out_terminate_path);\n   void on_call_post (const gcall *stmt,\n \t\t     bool unknown_side_effects,\n \t\t     region_model_context *ctxt);\n@@ -455,6 +458,8 @@ class region_model\n \t\t\t\tregion_model_context *ctxt);\n   bool impl_call_builtin_expect (const call_details &cd);\n   bool impl_call_calloc (const call_details &cd);\n+  bool impl_call_error (const call_details &cd, unsigned min_args,\n+\t\t\tbool *out_terminate_path);\n   void impl_call_free (const call_details &cd);\n   bool impl_call_malloc (const call_details &cd);\n   void impl_call_memcpy (const call_details &cd);"}, {"sha": "f82a4cdd3c090d4feb06b8416c99bcedf97c9099", "filename": "gcc/testsuite/gcc.dg/analyzer/error-1.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ferror-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ferror-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ferror-1.c?ref=5ee4ba031dd9fc60bf2494ca30f46c0acaa34805", "patch": "@@ -0,0 +1,66 @@\n+#include \"analyzer-decls.h\"\n+\n+extern int errno;\n+\n+extern void error (int __status, int __errnum, const char *__format, ...)\n+     __attribute__ ((__format__ (__printf__, 3, 4)));\n+\n+extern void error_at_line (int __status, int __errnum, const char *__fname,\n+\t\t\t   unsigned int __lineno, const char *__format, ...)\n+     __attribute__ ((__format__ (__printf__, 5, 6)));\n+\n+/* When status is an unknown param.  */\n+\n+void test_1 (int st)\n+{\n+  error (st, errno, \"test\");\n+  __analyzer_eval (st == 0); /* { dg-warning \"TRUE\" } */\n+}\n+\n+/* When status is known zero.  */\n+\n+void test_2 (int st)\n+{\n+  error (0, errno, \"test\");\n+  __analyzer_dump_path (); /* { dg-message \"here\" } */\n+}\n+\n+/* When status is a non-zero known constant.  */\n+\n+void test_3 (int st)\n+{\n+  error (1, errno, \"test\");\n+  __analyzer_dump_path (); /* { dg-bogus \"here\" } */\n+}\n+\n+/* When status has been tested against zero.  */\n+\n+void test_4 (int st)\n+{\n+  if (st)\n+    {\n+      error (st, errno, \"nonzero branch\");\n+      __analyzer_dump_path (); /* { dg-bogus \"here\" } */\n+    }\n+  else\n+    {\n+      error (st, errno, \"zero branch\");\n+      __analyzer_dump_path (); /* { dg-message \"here\" } */\n+    }\n+}\n+\n+/* Similarly for error_at_line.  */\n+\n+void test_5 (int st)\n+{\n+  error_at_line (st, errno, __FILE__, __LINE__, \"test\");\n+  __analyzer_eval (st == 0); /* { dg-warning \"TRUE\" } */\n+}\n+\n+/* Non-trivial format string.  */\n+\n+void test_6 (int st, const char *str)\n+{\n+  error (st, errno, \"test: %s\", str);\n+  __analyzer_eval (st == 0); /* { dg-warning \"TRUE\" } */\n+}"}, {"sha": "138ab9d30c520f016b9ae00c2cb09dd84147dfd3", "filename": "gcc/testsuite/gcc.dg/analyzer/error-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ferror-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ferror-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ferror-2.c?ref=5ee4ba031dd9fc60bf2494ca30f46c0acaa34805", "patch": "@@ -0,0 +1,48 @@\n+#define NULL ((void*)0)\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern int errno;\n+\n+extern void free (void *);\n+char *strdup (const char *)\n+  __attribute__((malloc (free)));\n+\n+extern size_t strlen (const char *__s)\n+  __attribute__ ((__nothrow__ , __leaf__))\n+  __attribute__ ((__pure__))\n+  __attribute__ ((__nonnull__ (1)));\n+\n+extern void error (int __status, int __errnum, const char *__format, ...)\n+     __attribute__ ((__format__ (__printf__, 3, 4)));\n+\n+extern void error_at_line (int __status, int __errnum, const char *__fname,\n+\t\t\t   unsigned int __lineno, const char *__format, ...)\n+     __attribute__ ((__format__ (__printf__, 5, 6)));\n+\n+/* PR analyzer/99196; extract taken from\n+     https://github.com/libguestfs/libguestfs/blob/f19fd566f6387ce7e4d82409528c9dde374d25e0/daemon/tar.c#L108\n+   (which is GPLv2 or later).  */\n+\n+extern char *read_whole_file (const char *error_file, size_t *out);\n+\n+#define EXIT_FAILURE 1\n+\n+char *read_error_file (const char *error_file)\n+{\n+  size_t len;\n+  char *str;\n+\n+  str = read_whole_file (error_file, &len);\n+  if (str == NULL) {\n+    str = strdup (\"(no error)\");\n+    if (str == NULL)\n+      error (EXIT_FAILURE, errno, \"strdup\");\n+    len = strlen (str); /* { dg-bogus \"NULL\" } */\n+  }\n+\n+  /* Remove trailing \\n character if any. */\n+  if (len > 0 && str[len-1] == '\\n')\n+    str[--len] = '\\0';\n+\n+  return str;                   /* caller frees */\n+}"}, {"sha": "b6ab6c8410ecb8afb84483a9d0f116011b0ab789", "filename": "gcc/testsuite/gcc.dg/analyzer/error-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ferror-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee4ba031dd9fc60bf2494ca30f46c0acaa34805/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ferror-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ferror-3.c?ref=5ee4ba031dd9fc60bf2494ca30f46c0acaa34805", "patch": "@@ -0,0 +1,11 @@\n+/* Verify that we gracefully handle error functions that don't match\n+   the signature of GNU's <error.h>.  */\n+\n+extern void error (void);\n+extern void error_at_line (void);\n+\n+void test_1 (void)\n+{\n+  error ();\n+  error_at_line ();\n+}"}]}