{"sha": "aaef9b06ac9ea6d57345f70e22327a122d6d897c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFlZjliMDZhYzllYTZkNTczNDVmNzBlMjIzMjdhMTIyZDZkODk3Yw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2004-03-06T20:49:30Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-03-06T20:49:30Z"}, "message": "collect2.c (main): Only export initfunc and finifunc if LD_INIT_SWITCH not defined.\n\n        * collect2.c (main): Only export initfunc and finifunc if\n        LD_INIT_SWITCH not defined.\n        (scan_prog_file): Only export constructors and destructors if\n        LD_INIT_SWITCH not defined.  Only export symbols not found in\n        shared objects.\n\nFrom-SVN: r79031", "tree": {"sha": "987b073666e53f5505a9113ffd957ec49bddccfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/987b073666e53f5505a9113ffd957ec49bddccfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaef9b06ac9ea6d57345f70e22327a122d6d897c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaef9b06ac9ea6d57345f70e22327a122d6d897c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaef9b06ac9ea6d57345f70e22327a122d6d897c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaef9b06ac9ea6d57345f70e22327a122d6d897c/comments", "author": null, "committer": null, "parents": [{"sha": "7a9a5a4441eeed70b2f5608dd9510612ae195f90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a9a5a4441eeed70b2f5608dd9510612ae195f90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a9a5a4441eeed70b2f5608dd9510612ae195f90"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "2de8e1d330bcf83643b6872fd8608fff7fe2defb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaef9b06ac9ea6d57345f70e22327a122d6d897c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaef9b06ac9ea6d57345f70e22327a122d6d897c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaef9b06ac9ea6d57345f70e22327a122d6d897c", "patch": "@@ -1,3 +1,11 @@\n+2004-03-06  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* collect2.c (main): Only export initfunc and finifunc if\n+\tLD_INIT_SWITCH not defined.\n+\t(scan_prog_file): Only export constructors and destructors if\n+\tLD_INIT_SWITCH not defined.  Only export symbols not found in\n+\tshared objects.\n+\n 2004-03-06  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.md (icacheflush): Reorder operands to make match_scratch operand"}, {"sha": "4fbe3a420032f40a5930b83732424319b2f3e59d", "filename": "gcc/collect2.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaef9b06ac9ea6d57345f70e22327a122d6d897c/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaef9b06ac9ea6d57345f70e22327a122d6d897c/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=aaef9b06ac9ea6d57345f70e22327a122d6d897c", "patch": "@@ -1398,10 +1398,12 @@ main (int argc, char **argv)\n       if (! exports.first)\n \t*ld2++ = concat (\"-bE:\", export_file, NULL);\n \n+#ifndef LD_INIT_SWITCH\n       add_to_list (&exports, initname);\n       add_to_list (&exports, fininame);\n       add_to_list (&exports, \"_GLOBAL__DI\");\n       add_to_list (&exports, \"_GLOBAL__DD\");\n+#endif\n       exportf = fopen (export_file, \"w\");\n       if (exportf == (FILE *) 0)\n \tfatal_perror (\"fopen %s\", export_file);\n@@ -2719,7 +2721,7 @@ scan_prog_file (const char *prog_name, enum pass which_pass)\n \t\t\tcase 1:\n \t\t\t  if (! is_shared)\n \t\t\t    add_to_list (&constructors, name);\n-#ifdef COLLECT_EXPORT_LIST\n+#if defined (COLLECT_EXPORT_LIST) && !defined (LD_INIT_SWITCH)\n \t\t\t  if (which_pass == PASS_OBJ)\n \t\t\t    add_to_list (&exports, name);\n #endif\n@@ -2728,7 +2730,7 @@ scan_prog_file (const char *prog_name, enum pass which_pass)\n \t\t\tcase 2:\n \t\t\t  if (! is_shared)\n \t\t\t    add_to_list (&destructors, name);\n-#ifdef COLLECT_EXPORT_LIST\n+#if defined (COLLECT_EXPORT_LIST) && !defined (LD_INIT_SWITCH)\n \t\t\t  if (which_pass == PASS_OBJ)\n \t\t\t    add_to_list (&exports, name);\n #endif\n@@ -2753,21 +2755,22 @@ scan_prog_file (const char *prog_name, enum pass which_pass)\n \t\t\tcase 5:\n \t\t\t  if (! is_shared)\n \t\t\t    add_to_list (&frame_tables, name);\n-#ifdef COLLECT_EXPORT_LIST\n+#if defined (COLLECT_EXPORT_LIST) && !defined (LD_INIT_SWITCH)\n \t\t\t  if (which_pass == PASS_OBJ)\n \t\t\t    add_to_list (&exports, name);\n #endif\n \t\t\t  break;\n \n \t\t\tdefault:\t/* not a constructor or destructor */\n #ifdef COLLECT_EXPORT_LIST\n-\t\t\t  /* If we are building a shared object on AIX we need\n-\t\t\t     to explicitly export all global symbols.  */\n-\t\t\t  if (shared_obj)\n-\t\t\t    {\n-\t\t\t      if (which_pass == PASS_OBJ && (! export_flag))\n-\t\t\t\tadd_to_list (&exports, name);\n-\t\t\t    }\n+\t\t\t  /* Explicitly export all global symbols when\n+\t\t\t     building a shared object on AIX, but do not\n+\t\t\t     re-export symbols from another shared object\n+\t\t\t     and do not export symbols if the user\n+\t\t\t     provides an explicit export list.  */\n+\t\t\t  if (shared_obj && !is_shared\n+\t\t\t      && which_pass == PASS_OBJ && !export_flag)\n+\t\t\t    add_to_list (&exports, name);\n #endif\n \t\t\t  continue;\n \t\t\t}"}]}