{"sha": "114bd7b45ea3db56fbd07048857db102fe87821f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE0YmQ3YjQ1ZWEzZGI1NmZiZDA3MDQ4ODU3ZGIxMDJmZTg3ODIxZg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-04-02T19:39:39Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-04-02T19:39:39Z"}, "message": "Address miscellaneous '-Werror=unused-parameter' diagnostics [#336]\n\n    In file included from [...]/gcc/rust/ast/rust-ast-full.h:23,\n                     from [...]/gcc/rust/parse/rust-parse.h:21,\n                     from [...]/gcc/rust/rust-session-manager.cc:34:\n    [...]/gcc/rust/ast/rust-expr.h: In member function \u2018virtual void Rust::AST::RangeExpr::set_outer_attrs(std::vector<Rust::AST::Attribute>)\u2019:\n    [...]/gcc/rust/ast/rust-expr.h:3220:48: error: unused parameter \u2018new_attrs\u2019 [-Werror=unused-parameter]\n     3220 |   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n          |                         ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n    [...]/gcc/rust/ast/rust-expr.h: In constructor \u2018Rust::AST::IfLetExpr::IfLetExpr(std::vector<std::unique_ptr<Rust::AST::Pattern> >, std::unique_ptr<Rust::AST::Expr>, std::unique_ptr<Rust::AST::BlockExpr>, std::vector<Rust::AST::Attribute>, Location)\u2019:\n    [...]/gcc/rust/ast/rust-expr.h:4380:37: error: unused parameter \u2018outer_attrs\u2019 [-Werror=unused-parameter]\n     4380 |              std::vector<Attribute> outer_attrs, Location locus)\n          |              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n\n    In file included from [...]/gcc/rust/backend/rust-compile-context.h:27,\n                     from [...]/gcc/rust/backend/rust-compile.h:24,\n                     from [...]/gcc/rust/rust-session-manager.cc:41:\n    [...]/gcc/rust/backend/rust-compile-tyty.h: In member function \u2018virtual void Rust::Compile::TyTyCompile::visit(Rust::TyTy::FnPtr&)\u2019:\n    [...]/gcc/rust/backend/rust-compile-tyty.h:67:28: error: unused parameter \u2018type\u2019 [-Werror=unused-parameter]\n       67 |   void visit (TyTy::FnPtr &type) override { gcc_unreachable (); }\n          |               ~~~~~~~~~~~~~^~~~\n\n    [...]/gcc/rust/rust-gcc.cc: In member function \u2018virtual Btype* Gcc_backend::function_ptr_type(Btype*, const std::vector<Btype*>&, Location)\u2019:\n    [...]/gcc/rust/rust-gcc.cc:998:42: error: unused parameter \u2018locus\u2019 [-Werror=unused-parameter]\n      998 |                                 Location locus)\n          |                                 ~~~~~~~~~^~~~~\n\n    [...]/gcc/rust/rust-lang.cc: In function \u2018void grs_langhook_init_options_struct(gcc_options*)\u2019:\n    [...]/gcc/rust/rust-lang.cc:153:55: error: unused parameter \u2018opts\u2019 [-Werror=unused-parameter]\n      153 | grs_langhook_init_options_struct (struct gcc_options *opts)\n          |                                   ~~~~~~~~~~~~~~~~~~~~^~~~", "tree": {"sha": "68d0694d2f71359c1d29928002dda244ecde629a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68d0694d2f71359c1d29928002dda244ecde629a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/114bd7b45ea3db56fbd07048857db102fe87821f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114bd7b45ea3db56fbd07048857db102fe87821f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/114bd7b45ea3db56fbd07048857db102fe87821f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114bd7b45ea3db56fbd07048857db102fe87821f/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e997db044394dd7ae751f52c209320a0097218be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e997db044394dd7ae751f52c209320a0097218be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e997db044394dd7ae751f52c209320a0097218be"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "0ef6be693a3d413492745d950228dc6dd6bc9a4e", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/114bd7b45ea3db56fbd07048857db102fe87821f/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/114bd7b45ea3db56fbd07048857db102fe87821f/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=114bd7b45ea3db56fbd07048857db102fe87821f", "patch": "@@ -3217,7 +3217,7 @@ class RangeExpr : public ExprWithoutBlock\n   Location get_locus_slow () const final override { return get_locus (); }\n \n   // should never be called - error if called\n-  void set_outer_attrs (std::vector<Attribute> new_attrs) override\n+  void set_outer_attrs (std::vector<Attribute> /* new_attrs */) override\n   {\n     rust_assert (false);\n   }\n@@ -4377,7 +4377,7 @@ class IfLetExpr : public ExprWithBlock\n \n   IfLetExpr (std::vector<std::unique_ptr<Pattern> > match_arm_patterns,\n \t     std::unique_ptr<Expr> value, std::unique_ptr<BlockExpr> if_block,\n-\t     std::vector<Attribute> outer_attrs, Location locus)\n+\t     std::vector<Attribute> /* outer_attrs */, Location locus)\n     : match_arm_patterns (std::move (match_arm_patterns)),\n       value (std::move (value)), if_block (std::move (if_block)), locus (locus)\n   {}"}, {"sha": "28db2897184706ebdca8ef4d172248b63b496732", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/114bd7b45ea3db56fbd07048857db102fe87821f/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/114bd7b45ea3db56fbd07048857db102fe87821f/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=114bd7b45ea3db56fbd07048857db102fe87821f", "patch": "@@ -64,7 +64,7 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n \n-  void visit (TyTy::FnPtr &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FnPtr &) override { gcc_unreachable (); }\n \n   void visit (TyTy::FnType &type) override\n   {"}, {"sha": "b23d14114cd8627a2c97b071e9a6c1ef1af8d154", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/114bd7b45ea3db56fbd07048857db102fe87821f/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/114bd7b45ea3db56fbd07048857db102fe87821f/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=114bd7b45ea3db56fbd07048857db102fe87821f", "patch": "@@ -995,7 +995,7 @@ Gcc_backend::function_type (const Btyped_identifier &receiver,\n Btype *\n Gcc_backend::function_ptr_type (Btype *result_type,\n \t\t\t\tconst std::vector<Btype *> &parameters,\n-\t\t\t\tLocation locus)\n+\t\t\t\tLocation /* locus */)\n {\n   tree args = NULL_TREE;\n   tree *pp = &args;"}, {"sha": "a6fd48ad05b29e6c332abeda902b28d0404a2a0c", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/114bd7b45ea3db56fbd07048857db102fe87821f/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/114bd7b45ea3db56fbd07048857db102fe87821f/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=114bd7b45ea3db56fbd07048857db102fe87821f", "patch": "@@ -150,7 +150,7 @@ grs_langhook_option_lang_mask (void)\n \n /* Initialize the options structure. */\n static void\n-grs_langhook_init_options_struct (struct gcc_options *opts)\n+grs_langhook_init_options_struct (struct gcc_options * /* opts */)\n {\n   // nothing yet - used by frontends to change specific options for the language\n   session.init_options ();"}]}