{"sha": "f8981f1984a0e66f165440ecbc72fd3a58075193", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg5ODFmMTk4NGEwZTY2ZjE2NTQ0MGVjYmM3MmZkM2E1ODA3NTE5Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-13T11:08:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-13T11:08:57Z"}, "message": "[multiple changes]\n\n2017-01-13  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch6.adb (Cloned_Expression): New subprogram.\n\t(Freeze_Expr_Types): Complete previous patch since the expression\n\tof an expression-function may have iterators and loops with\n\tdefining identifiers which, as part of the preanalysis of the\n\texpression, may be left decorated with itypes that will not be\n\tavailable in the tree passed to the backend.\n\n2017-01-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* checks.adb (Apply_Type_Conversion_Checks): Optimize a type\n\tconversion to Integer of an expression that is an attribute\n\treference 'Pos on an enumeration type.\n\n2017-01-13  Bob Duff  <duff@adacore.com>\n\n\t* atree.ads: Minor comment fix.\n\nFrom-SVN: r244423", "tree": {"sha": "9317cc3a5162c924b9eb44c8e7ec14b935c9bfbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9317cc3a5162c924b9eb44c8e7ec14b935c9bfbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8981f1984a0e66f165440ecbc72fd3a58075193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8981f1984a0e66f165440ecbc72fd3a58075193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8981f1984a0e66f165440ecbc72fd3a58075193", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8981f1984a0e66f165440ecbc72fd3a58075193/comments", "author": null, "committer": null, "parents": [{"sha": "996ce809cd29df96df27b7e7d75508fe2fe6fb93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996ce809cd29df96df27b7e7d75508fe2fe6fb93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/996ce809cd29df96df27b7e7d75508fe2fe6fb93"}], "stats": {"total": 151, "additions": 139, "deletions": 12}, "files": [{"sha": "0702a6d31cd531254f92f8e64c7a2176378235b8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8981f1984a0e66f165440ecbc72fd3a58075193/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8981f1984a0e66f165440ecbc72fd3a58075193/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f8981f1984a0e66f165440ecbc72fd3a58075193", "patch": "@@ -1,3 +1,22 @@\n+2017-01-13  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch6.adb (Cloned_Expression): New subprogram.\n+\t(Freeze_Expr_Types): Complete previous patch since the expression\n+\tof an expression-function may have iterators and loops with\n+\tdefining identifiers which, as part of the preanalysis of the\n+\texpression, may be left decorated with itypes that will not be\n+\tavailable in the tree passed to the backend.\n+\n+2017-01-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* checks.adb (Apply_Type_Conversion_Checks): Optimize a type\n+\tconversion to Integer of an expression that is an attribute\n+\treference 'Pos on an enumeration type.\n+\n+2017-01-13  Bob Duff  <duff@adacore.com>\n+\n+\t* atree.ads: Minor comment fix.\n+\n 2017-01-13  Justin Squirek  <squirek@adacore.com>\n \n \t* sem_ch6.adb (Check_Aggregate_Accessibility): Ignore function"}, {"sha": "6739be2dc51ec11fb6ed6baaa61350e83f27c333", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8981f1984a0e66f165440ecbc72fd3a58075193/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8981f1984a0e66f165440ecbc72fd3a58075193/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=f8981f1984a0e66f165440ecbc72fd3a58075193", "patch": "@@ -298,10 +298,10 @@ package Atree is\n    ------------------\n \n    --  The following variables denote the count of errors of various kinds\n-   --  detected in the tree. Note that these might be more logically located\n-   --  in Err_Vars, but we put it to deal with licensing issues (we need this\n-   --  to have the GPL exception licensing, since Check_Error_Detected can\n-   --  be called from units with this licensing).\n+   --  detected in the tree. Note that these might be more logically located in\n+   --  Err_Vars, but we put it here to deal with licensing issues (we need this\n+   --  to have the GPL exception licensing, since Check_Error_Detected can be\n+   --  called from units with this licensing).\n \n    Serious_Errors_Detected : Nat := 0;\n    --  This is a count of errors that are serious enough to stop expansion,"}, {"sha": "f67c44f37d421af8c4714072f8c76cd042e3108c", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8981f1984a0e66f165440ecbc72fd3a58075193/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8981f1984a0e66f165440ecbc72fd3a58075193/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=f8981f1984a0e66f165440ecbc72fd3a58075193", "patch": "@@ -3390,7 +3390,53 @@ package body Checks is\n                 In_Subrange_Of (Expr_Type, Target_Base, Fixed_Int => Conv_OK)\n               and then not Float_To_Int\n             then\n-               Activate_Overflow_Check (N);\n+               --  A small optimization : the attribute 'Pos applied to an\n+               --  enumeration type has a known range, even though its type\n+               --  is Universal_Integer. so in numeric conversions it is\n+               --  usually within range of of the target integer type. Use the\n+               --  static bounds of the base types to check.\n+\n+               if Nkind (Expr) = N_Attribute_Reference\n+                 and then Attribute_Name (Expr) = Name_Pos\n+                 and then Is_Enumeration_Type (Etype (Prefix (Expr)))\n+                 and then Is_Integer_Type (Target_Type)\n+               then\n+                  declare\n+                     Enum_T  : constant Entity_Id :=\n+                               Root_Type (Etype (Prefix (Expr)));\n+                     Int_T   : constant Entity_Id := Base_Type (Target_Type);\n+                     Last_I  : constant Uint :=\n+                        Intval (High_Bound (Scalar_Range (Int_T)));\n+                     Last_E  : Uint;\n+\n+                  begin\n+                     --  Character types have no explicit literals, we use\n+                     --  the known number of characters in the type.\n+\n+                     if Root_Type (Enum_T) = Standard_Character then\n+                        Last_E := UI_From_Int (255);\n+\n+                     elsif Enum_T = Standard_Wide_Character\n+                       or else Enum_T = Standard_Wide_Wide_Character\n+                     then\n+                        Last_E := UI_From_Int (65535);\n+\n+                     else\n+                        Last_E := Enumeration_Pos\n+                            (Entity (High_Bound (Scalar_Range (Enum_T))));\n+                     end if;\n+\n+                     if Last_E <= Last_I then\n+                        null;\n+\n+                     else\n+                        Activate_Overflow_Check (N);\n+                     end if;\n+                  end;\n+\n+               else\n+                  Activate_Overflow_Check (N);\n+               end if;\n             end if;\n \n             if not Range_Checks_Suppressed (Target_Type)"}, {"sha": "21f076932dcd286cf581916bac4fc7d89254b1c2", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 69, "deletions": 7, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8981f1984a0e66f165440ecbc72fd3a58075193/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8981f1984a0e66f165440ecbc72fd3a58075193/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=f8981f1984a0e66f165440ecbc72fd3a58075193", "patch": "@@ -2978,9 +2978,73 @@ package body Sem_Ch6 is\n       -----------------------\n \n       procedure Freeze_Expr_Types (Spec_Id : Entity_Id) is\n+         function Cloned_Expression return Node_Id;\n+         --  Build a duplicate of the expression of the return statement that\n+         --  has no defining entities shared with the original expression.\n+\n          function Freeze_Type_Refs (Node : Node_Id) return Traverse_Result;\n          --  Freeze all types referenced in the subtree rooted at Node\n \n+         -----------------------\n+         -- Cloned_Expression --\n+         -----------------------\n+\n+         function Cloned_Expression return Node_Id is\n+            function Clone_Id (Node : Node_Id) return Traverse_Result;\n+            --  Tree traversal routine that clones the defining identifier of\n+            --  iterator and loop parameter specification nodes.\n+\n+            ----------------\n+            -- Check_Node --\n+            ----------------\n+\n+            function Clone_Id (Node : Node_Id) return Traverse_Result is\n+            begin\n+               if Nkind_In (Node, N_Iterator_Specification,\n+                                  N_Loop_Parameter_Specification)\n+               then\n+                  Set_Defining_Identifier (Node,\n+                    New_Copy (Defining_Identifier (Node)));\n+               end if;\n+\n+               return OK;\n+            end Clone_Id;\n+\n+            -------------------\n+            -- Clone_Def_Ids --\n+            -------------------\n+\n+            procedure Clone_Def_Ids is new Traverse_Proc (Clone_Id);\n+\n+            --  Local variables\n+\n+            Return_Stmt : constant Node_Id :=\n+                            First\n+                              (Statements (Handled_Statement_Sequence (N)));\n+            Dup_Expr    : Node_Id;\n+\n+         --  Start of processing for Cloned_Expression\n+\n+         begin\n+            pragma Assert (Nkind (Return_Stmt) = N_Simple_Return_Statement);\n+\n+            --  We must duplicate the expression with semantic information to\n+            --  inherit the decoration of global entities in generic instances.\n+\n+            Dup_Expr := New_Copy_Tree (Expression (Return_Stmt));\n+\n+            --  Replace the defining identifier of iterators and loop param\n+            --  specifications by a clone to ensure that the cloned expression\n+            --  and the original expression don't have shared identifiers;\n+            --  otherwise, as part of the preanalysis of the expression, these\n+            --  shared identifiers may be left decorated with itypes which\n+            --  will not be available in the tree passed to the backend.\n+\n+            Clone_Def_Ids (Dup_Expr);\n+\n+            return Dup_Expr;\n+         end Cloned_Expression;\n+\n          ----------------------\n          -- Freeze_Type_Refs --\n          ----------------------\n@@ -3007,19 +3071,13 @@ package body Sem_Ch6 is\n \n          --  Local variables\n \n-         Return_Stmt : constant Node_Id :=\n-                         First (Statements (Handled_Statement_Sequence (N)));\n-         Dup_Expr    : constant Node_Id :=\n-                         New_Copy_Tree (Expression (Return_Stmt));\n-\n          Saved_First_Entity : constant Entity_Id := First_Entity (Spec_Id);\n          Saved_Last_Entity  : constant Entity_Id := Last_Entity  (Spec_Id);\n+         Dup_Expr           : constant Node_Id   := Cloned_Expression;\n \n       --  Start of processing for Freeze_Expr_Types\n \n       begin\n-         pragma Assert (Nkind (Return_Stmt) = N_Simple_Return_Statement);\n-\n          --  Preanalyze a duplicate of the expression to have available the\n          --  minimum decoration needed to locate referenced unfrozen types\n          --  without adding any decoration to the function expression. This\n@@ -3043,6 +3101,10 @@ package body Sem_Ch6 is\n          Set_First_Entity (Spec_Id, Saved_First_Entity);\n          Set_Last_Entity  (Spec_Id, Saved_Last_Entity);\n \n+         if Present (Last_Entity (Spec_Id)) then\n+            Set_Next_Entity (Last_Entity (Spec_Id), Empty);\n+         end if;\n+\n          --  Freeze all types referenced in the expression\n \n          Freeze_References (Dup_Expr);"}]}