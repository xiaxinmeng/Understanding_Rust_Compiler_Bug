{"sha": "489ec4e3bd232d184845a5b71322dfe18e65529f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg5ZWM0ZTNiZDIzMmQxODQ4NDVhNWI3MTMyMmRmZTE4ZTY1NTI5Zg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-02-26T18:43:50Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-02-26T18:43:50Z"}, "message": "re PR fortran/39295 (Too strict interface conformance check)\n\n2009-02-26  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/39295\n\t* interface.c (compare_type_rank_if): Return 1 if the symbols\n\tare the same and deal with external procedures where one is\n\tidentified to be a function or subroutine by usage but the\n\tother is not.\n\n2009-02-26  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/39295\n\t* gfortran.dg/interface_25.f90: New test.\n\t* gfortran.dg/interface_26.f90: New test.\n\nFrom-SVN: r144449", "tree": {"sha": "d310ef8eaa5e71425a136cec8058b82462b5febc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d310ef8eaa5e71425a136cec8058b82462b5febc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/489ec4e3bd232d184845a5b71322dfe18e65529f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/489ec4e3bd232d184845a5b71322dfe18e65529f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/489ec4e3bd232d184845a5b71322dfe18e65529f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/489ec4e3bd232d184845a5b71322dfe18e65529f/comments", "author": null, "committer": null, "parents": [{"sha": "ebb9cc41a88a3db8ebf141e15cf4fe2a094cb262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb9cc41a88a3db8ebf141e15cf4fe2a094cb262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebb9cc41a88a3db8ebf141e15cf4fe2a094cb262"}], "stats": {"total": 122, "additions": 118, "deletions": 4}, "files": [{"sha": "4bf462504725dd351aa7136f3c19a40df4342dc8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/489ec4e3bd232d184845a5b71322dfe18e65529f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/489ec4e3bd232d184845a5b71322dfe18e65529f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=489ec4e3bd232d184845a5b71322dfe18e65529f", "patch": "@@ -1,3 +1,11 @@\n+2009-02-26  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/39295\n+\t* interface.c (compare_type_rank_if): Return 1 if the symbols\n+\tare the same and deal with external procedures where one is\n+\tidentified to be a function or subroutine by usage but the\n+\tother is not.\n+\n 2009-02-26  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/39292"}, {"sha": "88638070d3cf0d17b60b38b782b4b4699c5d363a", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/489ec4e3bd232d184845a5b71322dfe18e65529f/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/489ec4e3bd232d184845a5b71322dfe18e65529f/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=489ec4e3bd232d184845a5b71322dfe18e65529f", "patch": "@@ -491,17 +491,26 @@ compare_type_rank_if (gfc_symbol *s1, gfc_symbol *s2)\n   if (s1 == NULL || s2 == NULL)\n     return s1 == s2 ? 1 : 0;\n \n+  if (s1 == s2)\n+    return 1;\n+\n   if (s1->attr.flavor != FL_PROCEDURE && s2->attr.flavor != FL_PROCEDURE)\n     return compare_type_rank (s1, s2);\n \n   if (s1->attr.flavor != FL_PROCEDURE || s2->attr.flavor != FL_PROCEDURE)\n     return 0;\n \n-  /* At this point, both symbols are procedures.  */\n-  if ((s1->attr.function == 0 && s1->attr.subroutine == 0)\n-      || (s2->attr.function == 0 && s2->attr.subroutine == 0))\n-    return 0;\n+  /* At this point, both symbols are procedures.  It can happen that\n+     external procedures are compared, where one is identified by usage\n+     to be a function or subroutine but the other is not.  Check TKR\n+     nonetheless for these cases.  */\n+  if (s1->attr.function == 0 && s1->attr.subroutine == 0)\n+    return s1->attr.external == 1 ? compare_type_rank (s1, s2) : 0;\n+\n+  if (s2->attr.function == 0 && s2->attr.subroutine == 0)\n+    return s2->attr.external == 1 ? compare_type_rank (s1, s2) : 0;\n \n+  /* Now the type of procedure has been identified.  */\n   if (s1->attr.function != s2->attr.function\n       || s1->attr.subroutine != s2->attr.subroutine)\n     return 0;"}, {"sha": "4b9936e9564790ecedaa563e43c8e1e63e019ab1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/489ec4e3bd232d184845a5b71322dfe18e65529f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/489ec4e3bd232d184845a5b71322dfe18e65529f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=489ec4e3bd232d184845a5b71322dfe18e65529f", "patch": "@@ -1,3 +1,9 @@\n+2009-02-26  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/39295\n+\t* gfortran.dg/interface_25.f90: New test.\n+\t* gfortran.dg/interface_26.f90: New test.\n+\n 2009-02-26  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/39292"}, {"sha": "0118cd563c7377bc435858c6c23df79702a2e286", "filename": "gcc/testsuite/gfortran.dg/interface_25.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/489ec4e3bd232d184845a5b71322dfe18e65529f/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_25.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/489ec4e3bd232d184845a5b71322dfe18e65529f/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_25.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_25.f90?ref=489ec4e3bd232d184845a5b71322dfe18e65529f", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do compile }\n+! Tests the fix for PR39295, in which the check of the interfaces\n+! at lines 25 and 42 failed because opfunc1 is identified as a \n+! function by usage, whereas opfunc2 is not.\n+!\n+! Contributed by Jon Hurst <jhurst@ucar.edu>\n+!\n+MODULE  funcs\n+CONTAINS\n+  INTEGER FUNCTION test1(a,b,opfunc1) \n+    INTEGER :: a,b\n+    INTEGER, EXTERNAL :: opfunc1\n+    test1 = opfunc1( a, b ) \n+  END FUNCTION test1\n+  INTEGER FUNCTION sumInts(a,b)\n+    INTEGER :: a,b\n+    sumInts = a + b\n+  END FUNCTION sumInts\n+END MODULE funcs\n+\n+PROGRAM test\n+  USE funcs \n+  INTEGER :: rs\n+  INTEGER, PARAMETER :: a = 2, b = 1\n+  rs = recSum( a, b, test1, sumInts )\n+  write(*,*) \"Results\", rs\n+CONTAINS\n+  RECURSIVE INTEGER FUNCTION recSum( a,b,UserFunction,UserOp ) RESULT( res )\n+    IMPLICIT NONE\n+    INTEGER :: a,b\n+    INTERFACE \n+       INTEGER FUNCTION UserFunction(a,b,opfunc2) \n+         INTEGER :: a,b\n+         INTEGER, EXTERNAL :: opfunc2\n+       END FUNCTION UserFunction\n+    END INTERFACE\n+    INTEGER, EXTERNAL :: UserOp \n+\n+    res = UserFunction( a,b, UserOp )\n+\n+    if( res .lt. 10 ) then\n+       res = recSum( a, res, UserFunction, UserOp ) \n+    end if\n+  END FUNCTION recSum\n+END PROGRAM test"}, {"sha": "9f7fa4ef3f6986fa6301329d56592cecac0d6abf", "filename": "gcc/testsuite/gfortran.dg/interface_26.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/489ec4e3bd232d184845a5b71322dfe18e65529f/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_26.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/489ec4e3bd232d184845a5b71322dfe18e65529f/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_26.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_26.f90?ref=489ec4e3bd232d184845a5b71322dfe18e65529f", "patch": "@@ -0,0 +1,46 @@\n+! { dg-do compile }\n+! Tests the fix for PR39295, in which the check of the interfaces\n+! at lines 26 and 43 failed because opfunc1 is identified as a \n+! function by usage, whereas opfunc2 is not. This testcase checks\n+! that TKR is stll OK in these cases.\n+!\n+! Contributed by Jon Hurst <jhurst@ucar.edu>\n+!\n+MODULE  funcs\n+CONTAINS\n+  INTEGER FUNCTION test1(a,b,opfunc1) \n+    INTEGER :: a,b\n+    INTEGER, EXTERNAL :: opfunc1\n+    test1 = opfunc1( a, b ) \n+  END FUNCTION test1\n+  INTEGER FUNCTION sumInts(a,b)\n+    INTEGER :: a,b\n+    sumInts = a + b\n+  END FUNCTION sumInts\n+END MODULE funcs\n+\n+PROGRAM test\n+  USE funcs \n+  INTEGER :: rs\n+  INTEGER, PARAMETER :: a = 2, b = 1\n+  rs = recSum( a, b, test1, sumInts ) ! { dg-error \"Type/rank mismatch in argument\" }\n+  write(*,*) \"Results\", rs\n+CONTAINS\n+  RECURSIVE INTEGER FUNCTION recSum( a,b,UserFunction,UserOp ) RESULT( res )\n+    IMPLICIT NONE\n+    INTEGER :: a,b\n+    INTERFACE \n+       INTEGER FUNCTION UserFunction(a,b,opfunc2) \n+         INTEGER :: a,b\n+         REAL, EXTERNAL :: opfunc2\n+       END FUNCTION UserFunction\n+    END INTERFACE\n+    INTEGER, EXTERNAL :: UserOp \n+\n+    res = UserFunction( a,b, UserOp )\n+\n+    if( res .lt. 10 ) then\n+       res = recSum( a, res, UserFunction, UserOp ) \n+    end if\n+  END FUNCTION recSum\n+END PROGRAM test"}]}