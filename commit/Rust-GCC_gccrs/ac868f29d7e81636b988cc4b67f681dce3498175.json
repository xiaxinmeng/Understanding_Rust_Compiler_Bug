{"sha": "ac868f29d7e81636b988cc4b67f681dce3498175", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM4NjhmMjlkN2U4MTYzNmI5ODhjYzRiNjdmNjgxZGNlMzQ5ODE3NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-04-11T11:13:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-04-11T11:13:39Z"}, "message": "re PR target/52624 (missing __builtin_bswap16)\n\n\tPR target/52624\n\t* doc/extend.texi (Other Builtins): Document __builtin_bswap16.\n\t(PowerPC AltiVec/VSX Built-in Functions): Remove it.\n\t* doc/md.texi (Standard Names): Add bswap.\n\t* builtin-types.def (BT_UINT16): New primitive type.\n\t(BT_FN_UINT16_UINT16): New function type.\n\t* builtins.def (BUILT_IN_BSWAP16): New.\n\t* builtins.c (expand_builtin_bswap): Add TARGET_MODE argument.\n\t(expand_builtin) <BUILT_IN_BSWAP16>: New case.  Pass TARGET_MODE to\n\texpand_builtin_bswap.\n\t(fold_builtin_bswap): Add BUILT_IN_BSWAP16 case.\n\t(fold_builtin_1): Likewise.\n\t(is_inexpensive_builtin): Likewise.\n\t* optabs.c (expand_unop): Deal with bswap in HImode specially.  Add\n\tmissing bits for bswap to libcall code.\n\t* tree.c (build_common_tree_nodes): Build uint16_type_node.\n\t* tree.h (enum tree_index): Add TI_UINT16_TYPE.\n\t(uint16_type_node): New define.\n\t* config/rs6000/rs6000-builtin.def (RS6000_BUILTIN_BSWAP_HI): Delete.\n\t* config/rs6000/rs6000.c (rs6000_expand_builtin): Remove handling of\n\tabove builtin.\n\t(rs6000_init_builtins): Likewise.\n\t* config/rs6000/rs6000.md (bswaphi2): Add TARGET_POWERPC predicate.\nc-family/\n\t* c-common.h (uint16_type_node): Rename into...\n\t(c_uint16_type_node): ...this.\n\t* c-common.c (c_common_nodes_and_builtins): Adjust for above renaming.\n\t* c-cppbuiltin.c (builtin_define_stdint_macros): Likewise.\n\nFrom-SVN: r186308", "tree": {"sha": "26e16c84589e707f12176d32446b9a868e2ac2b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26e16c84589e707f12176d32446b9a868e2ac2b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac868f29d7e81636b988cc4b67f681dce3498175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac868f29d7e81636b988cc4b67f681dce3498175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac868f29d7e81636b988cc4b67f681dce3498175", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac868f29d7e81636b988cc4b67f681dce3498175/comments", "author": null, "committer": null, "parents": [{"sha": "cca4dd5983e33e31bfb559b7544428db628fd554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca4dd5983e33e31bfb559b7544428db628fd554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cca4dd5983e33e31bfb559b7544428db628fd554"}], "stats": {"total": 228, "additions": 189, "deletions": 39}, "files": [{"sha": "d0eaaf799c13092b7e997451513d5ada5e5d7a7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -1,3 +1,29 @@\n+2012-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/52624\n+\t* doc/extend.texi (Other Builtins): Document __builtin_bswap16.\n+\t(PowerPC AltiVec/VSX Built-in Functions): Remove it.\n+\t* doc/md.texi (Standard Names): Add bswap.\n+\t* builtin-types.def (BT_UINT16): New primitive type.\n+\t(BT_FN_UINT16_UINT16): New function type.\n+\t* builtins.def (BUILT_IN_BSWAP16): New.\n+\t* builtins.c (expand_builtin_bswap): Add TARGET_MODE argument.\n+\t(expand_builtin) <BUILT_IN_BSWAP16>: New case.  Pass TARGET_MODE to\n+\texpand_builtin_bswap.\n+\t(fold_builtin_bswap): Add BUILT_IN_BSWAP16 case.\n+\t(fold_builtin_1): Likewise.\n+\t(is_inexpensive_builtin): Likewise.\n+\t* optabs.c (expand_unop): Deal with bswap in HImode specially.  Add\n+\tmissing bits for bswap to libcall code.\n+\t* tree.c (build_common_tree_nodes): Build uint16_type_node.\n+\t* tree.h (enum tree_index): Add TI_UINT16_TYPE.\n+\t(uint16_type_node): New define.\n+\t* config/rs6000/rs6000-builtin.def (RS6000_BUILTIN_BSWAP_HI): Delete.\n+\t* config/rs6000/rs6000.c (rs6000_expand_builtin): Remove handling of\n+\tabove builtin.\n+\t(rs6000_init_builtins): Likewise.\n+\t* config/rs6000/rs6000.md (bswaphi2): Add TARGET_POWERPC predicate.\n+\n 2012-04-11  Tristan Gingold  <gingold@adacore.com>\n \n \t* doc/extend.texi (Type Attributes): Move paragraph."}, {"sha": "d8e9e566694709919b3cc4e5a1633ebc4cf84f19", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -76,6 +76,7 @@ DEF_PRIMITIVE_TYPE (BT_INT128, int128_integer_type_node)\n DEF_PRIMITIVE_TYPE (BT_UINT128, int128_unsigned_type_node)\n DEF_PRIMITIVE_TYPE (BT_INTMAX, intmax_type_node)\n DEF_PRIMITIVE_TYPE (BT_UINTMAX, uintmax_type_node)\n+DEF_PRIMITIVE_TYPE (BT_UINT16, uint16_type_node)\n DEF_PRIMITIVE_TYPE (BT_UINT32, uint32_type_node)\n DEF_PRIMITIVE_TYPE (BT_UINT64, uint64_type_node)\n DEF_PRIMITIVE_TYPE (BT_WORD, (*lang_hooks.types.type_for_mode) (word_mode, 1))\n@@ -226,6 +227,7 @@ DEF_FUNCTION_TYPE_1 (BT_FN_VOID_PTRPTR, BT_VOID, BT_PTR_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_UINT_UINT, BT_UINT, BT_UINT)\n DEF_FUNCTION_TYPE_1 (BT_FN_ULONG_ULONG, BT_ULONG, BT_ULONG)\n DEF_FUNCTION_TYPE_1 (BT_FN_ULONGLONG_ULONGLONG, BT_ULONGLONG, BT_ULONGLONG)\n+DEF_FUNCTION_TYPE_1 (BT_FN_UINT16_UINT16, BT_UINT16, BT_UINT16)\n DEF_FUNCTION_TYPE_1 (BT_FN_UINT32_UINT32, BT_UINT32, BT_UINT32)\n DEF_FUNCTION_TYPE_1 (BT_FN_UINT64_UINT64, BT_UINT64, BT_UINT64)\n "}, {"sha": "b47f2180527aebc69240270bd7b6bef22fd947f8", "filename": "gcc/builtins.c", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -4626,28 +4626,34 @@ expand_builtin_alloca (tree exp, bool cannot_accumulate)\n   return result;\n }\n \n-/* Expand a call to a bswap builtin with argument ARG0.  MODE\n-   is the mode to expand with.  */\n+/* Expand a call to bswap builtin in EXP.\n+   Return NULL_RTX if a normal call should be emitted rather than expanding the\n+   function in-line.  If convenient, the result should be placed in TARGET.\n+   SUBTARGET may be used as the target for computing one of EXP's operands.  */\n \n static rtx\n-expand_builtin_bswap (tree exp, rtx target, rtx subtarget)\n+expand_builtin_bswap (enum machine_mode target_mode, tree exp, rtx target,\n+\t\t      rtx subtarget)\n {\n-  enum machine_mode mode;\n   tree arg;\n   rtx op0;\n \n   if (!validate_arglist (exp, INTEGER_TYPE, VOID_TYPE))\n     return NULL_RTX;\n \n   arg = CALL_EXPR_ARG (exp, 0);\n-  mode = TYPE_MODE (TREE_TYPE (arg));\n-  op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n+  op0 = expand_expr (arg,\n+\t\t     subtarget && GET_MODE (subtarget) == target_mode\n+\t\t     ? subtarget : NULL_RTX,\n+\t\t     target_mode, EXPAND_NORMAL);\n+  if (GET_MODE (op0) != target_mode)\n+    op0 = convert_to_mode (target_mode, op0, 1);\n \n-  target = expand_unop (mode, bswap_optab, op0, target, 1);\n+  target = expand_unop (target_mode, bswap_optab, op0, target, 1);\n \n   gcc_assert (target);\n \n-  return convert_to_mode (mode, target, 0);\n+  return convert_to_mode (target_mode, target, 1);\n }\n \n /* Expand a call to a unary builtin in EXP.\n@@ -6077,10 +6083,10 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       expand_stack_restore (CALL_EXPR_ARG (exp, 0));\n       return const0_rtx;\n \n+    case BUILT_IN_BSWAP16:\n     case BUILT_IN_BSWAP32:\n     case BUILT_IN_BSWAP64:\n-      target = expand_builtin_bswap (exp, target, subtarget);\n-\n+      target = expand_builtin_bswap (target_mode, exp, target, subtarget);\n       if (target)\n \treturn target;\n       break;\n@@ -8169,7 +8175,7 @@ fold_builtin_bitop (tree fndecl, tree arg)\n   return NULL_TREE;\n }\n \n-/* Fold function call to builtin_bswap and the long and long long\n+/* Fold function call to builtin_bswap and the short, long and long long\n    variants.  Return NULL_TREE if no simplification can be made.  */\n static tree\n fold_builtin_bswap (tree fndecl, tree arg)\n@@ -8182,15 +8188,15 @@ fold_builtin_bswap (tree fndecl, tree arg)\n     {\n       HOST_WIDE_INT hi, width, r_hi = 0;\n       unsigned HOST_WIDE_INT lo, r_lo = 0;\n-      tree type;\n+      tree type = TREE_TYPE (TREE_TYPE (fndecl));\n \n-      type = TREE_TYPE (arg);\n       width = TYPE_PRECISION (type);\n       lo = TREE_INT_CST_LOW (arg);\n       hi = TREE_INT_CST_HIGH (arg);\n \n       switch (DECL_FUNCTION_CODE (fndecl))\n \t{\n+\t  case BUILT_IN_BSWAP16:\n \t  case BUILT_IN_BSWAP32:\n \t  case BUILT_IN_BSWAP64:\n \t    {\n@@ -8220,9 +8226,9 @@ fold_builtin_bswap (tree fndecl, tree arg)\n \t}\n \n       if (width < HOST_BITS_PER_WIDE_INT)\n-\treturn build_int_cst (TREE_TYPE (TREE_TYPE (fndecl)), r_lo);\n+\treturn build_int_cst (type, r_lo);\n       else\n-\treturn build_int_cst_wide (TREE_TYPE (TREE_TYPE (fndecl)), r_lo, r_hi);\n+\treturn build_int_cst_wide (type, r_lo, r_hi);\n     }\n \n   return NULL_TREE;\n@@ -10575,6 +10581,7 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0, bool ignore)\n     CASE_FLT_FN (BUILT_IN_LLRINT):\n       return fold_fixed_mathfn (loc, fndecl, arg0);\n \n+    case BUILT_IN_BSWAP16:\n     case BUILT_IN_BSWAP32:\n     case BUILT_IN_BSWAP64:\n       return fold_builtin_bswap (fndecl, arg0);\n@@ -14339,6 +14346,7 @@ is_inexpensive_builtin (tree decl)\n       case BUILT_IN_ABS:\n       case BUILT_IN_ALLOCA:\n       case BUILT_IN_ALLOCA_WITH_ALIGN:\n+      case BUILT_IN_BSWAP16:\n       case BUILT_IN_BSWAP32:\n       case BUILT_IN_BSWAP64:\n       case BUILT_IN_CLZ:"}, {"sha": "d03e41092b8744bc0ee31722652959325a4109f0", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -628,6 +628,7 @@ DEF_GCC_BUILTIN        (BUILT_IN_AGGREGATE_INCOMING_ADDRESS, \"aggregate_incoming\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ALLOCA, \"alloca\", BT_FN_PTR_SIZE, ATTR_MALLOC_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_APPLY, \"apply\", BT_FN_PTR_PTR_FN_VOID_VAR_PTR_SIZE, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_APPLY_ARGS, \"apply_args\", BT_FN_PTR_VAR, ATTR_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_BSWAP16, \"bswap16\", BT_FN_UINT16_UINT16, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_BSWAP32, \"bswap32\", BT_FN_UINT32_UINT32, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_BSWAP64, \"bswap64\", BT_FN_UINT64_UINT64, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_CLEAR_CACHE, \"__clear_cache\", BT_FN_VOID_PTR_PTR, ATTR_NOTHROW_LEAF_LIST)"}, {"sha": "121d94a11a3dcef4b209082d6060011529c14f56", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -1,3 +1,11 @@\n+2012-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/52624\n+\t* c-common.h (uint16_type_node): Rename into...\n+\t(c_uint16_type_node): ...this.\n+\t* c-common.c (c_common_nodes_and_builtins): Adjust for above renaming.\n+\t* c-cppbuiltin.c (builtin_define_stdint_macros): Likewise.\n+\n 2012-04-10  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* c-common.c (warn_if_unused_value): Move definition to here."}, {"sha": "a08db464dfd4a88fb280c05cf763162192b77b5e", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -5087,7 +5087,7 @@ c_common_nodes_and_builtins (void)\n     uint8_type_node =\n       TREE_TYPE (identifier_global_value (c_get_ident (UINT8_TYPE)));\n   if (UINT16_TYPE)\n-    uint16_type_node =\n+    c_uint16_type_node =\n       TREE_TYPE (identifier_global_value (c_get_ident (UINT16_TYPE)));\n   if (UINT32_TYPE)\n     c_uint32_type_node ="}, {"sha": "dd411032272e2c3ff54444ee0548cc5a21c9e497", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -390,7 +390,7 @@ extern const unsigned int num_c_common_reswords;\n #define int32_type_node\t\t\tc_global_trees[CTI_INT32_TYPE]\n #define int64_type_node\t\t\tc_global_trees[CTI_INT64_TYPE]\n #define uint8_type_node\t\t\tc_global_trees[CTI_UINT8_TYPE]\n-#define uint16_type_node\t\tc_global_trees[CTI_UINT16_TYPE]\n+#define c_uint16_type_node\t\tc_global_trees[CTI_UINT16_TYPE]\n #define c_uint32_type_node\t\tc_global_trees[CTI_UINT32_TYPE]\n #define c_uint64_type_node\t\tc_global_trees[CTI_UINT64_TYPE]\n #define int_least8_type_node\t\tc_global_trees[CTI_INT_LEAST8_TYPE]"}, {"sha": "920154a73c8a170c26ba2890b12a00fd2379ca07", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -448,8 +448,8 @@ builtin_define_stdint_macros (void)\n     builtin_define_type_max (\"__INT64_MAX__\", int64_type_node);\n   if (uint8_type_node)\n     builtin_define_type_max (\"__UINT8_MAX__\", uint8_type_node);\n-  if (uint16_type_node)\n-    builtin_define_type_max (\"__UINT16_MAX__\", uint16_type_node);\n+  if (c_uint16_type_node)\n+    builtin_define_type_max (\"__UINT16_MAX__\", c_uint16_type_node);\n   if (c_uint32_type_node)\n     builtin_define_type_max (\"__UINT32_MAX__\", c_uint32_type_node);\n   if (c_uint64_type_node)"}, {"sha": "2fd51af458f98f2e788c5e550978cc79c1f08168", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -1430,9 +1430,6 @@ BU_SPECIAL_X (RS6000_BUILTIN_RSQRT, \"__builtin_rsqrt\", RS6000_BTM_FRSQRTE,\n BU_SPECIAL_X (RS6000_BUILTIN_RSQRTF, \"__builtin_rsqrtf\", RS6000_BTM_FRSQRTES,\n \t      RS6000_BTC_FP)\n \n-BU_SPECIAL_X (RS6000_BUILTIN_BSWAP_HI, \"__builtin_bswap16\", RS6000_BTM_POWERPC,\n-\t      RS6000_BTC_MEM)\n-\n /* Darwin CfString builtin.  */\n BU_SPECIAL_X (RS6000_BUILTIN_CFSTRING, \"__builtin_cfstring\", RS6000_BTM_POWERPC,\n \t      RS6000_BTC_MISC)"}, {"sha": "fa882de429bcbd01aad2c3cf0ab30da206c2702e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -11381,9 +11381,6 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     case RS6000_BUILTIN_RSQRT:\n       return rs6000_expand_unop_builtin (CODE_FOR_rsqrtdf2, exp, target);\n \n-    case RS6000_BUILTIN_BSWAP_HI:\n-      return rs6000_expand_unop_builtin (CODE_FOR_bswaphi2, exp, target);\n-\n     case POWER7_BUILTIN_BPERMD:\n       return rs6000_expand_binop_builtin (((TARGET_64BIT)\n \t\t\t\t\t   ? CODE_FOR_bpermd_di\n@@ -11673,12 +11670,6 @@ rs6000_init_builtins (void)\n \t\t\t\t POWER7_BUILTIN_BPERMD, \"__builtin_bpermd\");\n   def_builtin (\"__builtin_bpermd\", ftype, POWER7_BUILTIN_BPERMD);\n \n-      /* Don't use builtin_function_type here, as it maps HI/QI to SI.  */\n-  ftype = build_function_type_list (unsigned_intHI_type_node,\n-\t\t\t\t    unsigned_intHI_type_node,\n-\t\t\t\t    NULL_TREE);\n-  def_builtin (\"__builtin_bswap16\", ftype, RS6000_BUILTIN_BSWAP_HI);\n-\n #if TARGET_XCOFF\n   /* AIX libm provides clog as __clog.  */\n   if ((tdecl = builtin_decl_explicit (BUILT_IN_CLOG)) != NULL_TREE)"}, {"sha": "1f5085da1ca7b3569e91f64a48b2f98aeefc9264", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -2386,7 +2386,7 @@\n \t\t   (bswap:HI\n \t\t    (match_operand:HI 1 \"reg_or_mem_operand\" \"\")))\n \t      (clobber (match_scratch:SI 2 \"\"))])]\n-  \"\"\n+  \"TARGET_POWERPC\"\n {\n   if (!REG_P (operands[0]) && !REG_P (operands[1]))\n     operands[1] = force_reg (HImode, operands[1]);"}, {"sha": "dd08845fb9bf0f662a6e260236c71a41ec33b7bc", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -8535,12 +8535,17 @@ Similar to @code{__builtin_powi}, except the argument and return types\n are @code{long double}.\n @end deftypefn\n \n-@deftypefn {Built-in Function} int32_t __builtin_bswap32 (int32_t x)\n+@deftypefn {Built-in Function} int16_t __builtin_bswap16 (int16_t x)\n Returns @var{x} with the order of the bytes reversed; for example,\n-@code{0xaabbccdd} becomes @code{0xddccbbaa}.  Byte here always means\n+@code{0xaabb} becomes @code{0xbbaa}.  Byte here always means\n exactly 8 bits.\n @end deftypefn\n \n+@deftypefn {Built-in Function} int32_t __builtin_bswap32 (int32_t x)\n+Similar to @code{__builtin_bswap16}, except the argument and return types\n+are 32-bit.\n+@end deftypefn\n+\n @deftypefn {Built-in Function} int64_t __builtin_bswap64 (int64_t x)\n Similar to @code{__builtin_bswap32}, except the argument and return types\n are 64-bit.\n@@ -13426,7 +13431,6 @@ float __builtin_rsqrtf (float);\n double __builtin_recipdiv (double, double);\n double __builtin_rsqrt (double);\n long __builtin_bpermd (long, long);\n-int __builtin_bswap16 (int);\n @end smallexample\n \n The @code{vec_rsqrt}, @code{__builtin_rsqrt}, and"}, {"sha": "bca84a72ce5c464ff61dad7e8c32c7df43e90535", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -4736,6 +4736,10 @@ Other shift and rotate instructions, analogous to the\n Vector shift and rotate instructions that take vectors as operand 2\n instead of a scalar type.\n \n+@cindex @code{bswap@var{m}2} instruction pattern\n+@item @samp{bswap@var{m}2}\n+Reverse the order of bytes of operand 1 and store the result in operand 0.\n+\n @cindex @code{neg@var{m}2} instruction pattern\n @cindex @code{ssneg@var{m}2} instruction pattern\n @cindex @code{usneg@var{m}2} instruction pattern"}, {"sha": "080061a1f57b32bba0259e4000067b1d264a7de8", "filename": "gcc/optabs.c", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -3030,6 +3030,47 @@ expand_unop (enum machine_mode mode, optab unoptab, rtx op0, rtx target,\n   /* Widening (or narrowing) bswap needs special treatment.  */\n   if (unoptab == bswap_optab)\n     {\n+      /* HImode is special because in this mode BSWAP is equivalent to ROTATE\n+\t or ROTATERT.  First try these directly; if this fails, then try the\n+\t obvious pair of shifts with allowed widening, as this will probably\n+\t be always more efficient than the other fallback methods.  */\n+      if (mode == HImode)\n+\t{\n+\t  rtx last, temp1, temp2;\n+\n+\t  if (optab_handler (rotl_optab, mode) != CODE_FOR_nothing)\n+\t    {\n+\t      temp = expand_binop (mode, rotl_optab, op0, GEN_INT (8), target,\n+\t\t\t\t   unsignedp, OPTAB_DIRECT);\n+\t      if (temp)\n+\t\treturn temp;\n+\t     }\n+\n+\t  if (optab_handler (rotr_optab, mode) != CODE_FOR_nothing)\n+\t    {\n+\t      temp = expand_binop (mode, rotr_optab, op0, GEN_INT (8), target,\n+\t\t\t\t   unsignedp, OPTAB_DIRECT);\n+\t      if (temp)\n+\t\treturn temp;\n+\t    }\n+\n+\t  last = get_last_insn ();\n+\n+\t  temp1 = expand_binop (mode, ashl_optab, op0, GEN_INT (8), NULL_RTX,\n+\t\t\t        unsignedp, OPTAB_WIDEN);\n+\t  temp2 = expand_binop (mode, lshr_optab, op0, GEN_INT (8), NULL_RTX,\n+\t\t\t        unsignedp, OPTAB_WIDEN);\n+\t  if (temp1 && temp2)\n+\t    {\n+\t      temp = expand_binop (mode, ior_optab, temp1, temp2, target,\n+\t\t\t\t   unsignedp, OPTAB_WIDEN);\n+\t      if (temp)\n+\t\treturn temp;\n+\t    }\n+\n+\t  delete_insns_since (last);\n+\t}\n+\n       temp = widen_bswap (mode, op0, target);\n       if (temp)\n \treturn temp;\n@@ -3222,10 +3263,10 @@ expand_unop (enum machine_mode mode, optab unoptab, rtx op0, rtx target,\n \t      /* For certain operations, we need not actually extend\n \t\t the narrow operand, as long as we will truncate the\n \t\t results to the same narrowness.  */\n-\n \t      xop0 = widen_operand (xop0, wider_mode, mode, unsignedp,\n \t\t\t\t    (unoptab == neg_optab\n-\t\t\t\t     || unoptab == one_cmpl_optab)\n+\t\t\t\t     || unoptab == one_cmpl_optab\n+\t\t\t\t     || unoptab == bswap_optab)\n \t\t\t\t    && mclass == MODE_INT);\n \n \t      temp = expand_unop (wider_mode, unoptab, xop0, NULL_RTX,\n@@ -3240,6 +3281,20 @@ expand_unop (enum machine_mode mode, optab unoptab, rtx op0, rtx target,\n \t\t\t\t\t      - GET_MODE_PRECISION (mode)),\n \t\t\t\t     target, true, OPTAB_DIRECT);\n \n+\t      /* Likewise for bswap.  */\n+\t      if (unoptab == bswap_optab && temp != 0)\n+\t\t{\n+\t\t  gcc_assert (GET_MODE_PRECISION (wider_mode)\n+\t\t\t      == GET_MODE_BITSIZE (wider_mode)\n+\t\t\t      && GET_MODE_PRECISION (mode)\n+\t\t\t\t == GET_MODE_BITSIZE (mode));\n+\n+\t\t  temp = expand_shift (RSHIFT_EXPR, wider_mode, temp,\n+\t\t\t\t       GET_MODE_BITSIZE (wider_mode)\n+\t\t\t\t       - GET_MODE_BITSIZE (mode),\n+\t\t\t\t       NULL_RTX, true);\n+\t\t}\n+\n \t      if (temp)\n \t\t{\n \t\t  if (mclass != MODE_INT)"}, {"sha": "5c16617adfb1cac7be8837030b0e36f419cafc82", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -1,3 +1,10 @@\n+2012-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/builtin-bswap-1.c: Test __builtin_bswap16 & __builtin_bswap64.\n+\t* gcc.dg/builtin-bswap-4.c: Test __builtin_bswap16.\n+\t* gcc.dg/builtin-bswap-5.c: Likewise.\n+\t* gcc.target/i386/builtin-bswap-4.c: New test.\n+\n 2012-04-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR 24985"}, {"sha": "724ba1e9847e9bac2e241f17977be1cfa1666fa1", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-1.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-1.c?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -5,11 +5,29 @@\n \n #include <stdint.h>\n \n-uint32_t foo (uint32_t a)\n+uint16_t foo16 (uint16_t a)\n {\n-  int b;\n+  uint16_t b;\n+\n+  b = __builtin_bswap16 (a);\n+\n+  return b;\n+}\n+\n+uint32_t foo32 (uint32_t a)\n+{\n+  uint32_t b;\n \n   b = __builtin_bswap32 (a);\n \n   return b;\n }\n+\n+uint64_t foo64 (uint64_t a)\n+{\n+  uint64_t b;\n+\n+  b = __builtin_bswap64 (a);\n+\n+  return b;\n+}"}, {"sha": "da8ee68cd519b2f4c551887102f6bc09676949f4", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-4.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-4.c?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -16,11 +16,19 @@\n     return result;\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n \n+MAKE_FUN(16, uint16_t);\n MAKE_FUN(32, uint32_t);\n MAKE_FUN(64, uint64_t);\n \n extern void abort (void);\n \n+#define NUMS16\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    0x0000,\t\t\t\t\t\\\n+    0x1122,\t\t\t\t\t\\\n+    0xffff,\t\t\t\t\t\\\n+  }\n+\n #define NUMS32\t\t\t\t\t\\\n   {\t\t\t\t\t\t\\\n     0x00000000UL,\t\t\t\t\\\n@@ -35,6 +43,9 @@ extern void abort (void);\n     0xffffffffffffffffULL,\t\t\t\\\n   }\n \n+uint16_t uint16_ts[] =\n+  NUMS16;\n+\n uint32_t uint32_ts[] =\n   NUMS32;\n \n@@ -48,6 +59,10 @@ main (void)\n {\n   int i;\n \n+  for (i = 0; i < N(uint16_ts); i++)\n+    if (__builtin_bswap16 (uint16_ts[i]) != my_bswap16 (uint16_ts[i]))\n+      abort ();\n+\n   for (i = 0; i < N(uint32_ts); i++)\n     if (__builtin_bswap32 (uint32_ts[i]) != my_bswap32 (uint32_ts[i]))\n       abort ();"}, {"sha": "b29931e4e10d35048f76ea14bb2603227fe1ecc5", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-5.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-5.c?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -6,6 +6,9 @@ main (void)\n   /* Test constant folding.  */\n   extern void link_error (void);\n \n+  if (__builtin_bswap16(0xaabb) != 0xbbaa)\n+    link_error ();\n+\n   if (__builtin_bswap32(0xaabbccdd) != 0xddccbbaa)\n     link_error ();\n "}, {"sha": "65198aee89e74cd10066a209743e2717a51f83da", "filename": "gcc/testsuite/gcc.target/i386/builtin-bswap-4.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-bswap-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-bswap-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-bswap-4.c?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"bswap\\[ \\t\\]\" } } */\n+\n+short foo (short x)\n+{\n+  return __builtin_bswap16 (x);\n+}"}, {"sha": "e5a33de51ff9566de1ba2f4a49c8b954b3c923e0", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -9388,6 +9388,7 @@ build_common_tree_nodes (bool signed_char, bool short_double)\n   integer_ptr_type_node = build_pointer_type (integer_type_node);\n \n   /* Fixed size integer types.  */\n+  uint16_type_node = build_nonstandard_integer_type (16, true);\n   uint32_type_node = build_nonstandard_integer_type (32, true);\n   uint64_type_node = build_nonstandard_integer_type (64, true);\n "}, {"sha": "809017667d6ac5f0ab7e4e2b5dd95a87877b3e61", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac868f29d7e81636b988cc4b67f681dce3498175/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ac868f29d7e81636b988cc4b67f681dce3498175", "patch": "@@ -3747,6 +3747,7 @@ enum tree_index\n   TI_UINTDI_TYPE,\n   TI_UINTTI_TYPE,\n \n+  TI_UINT16_TYPE,\n   TI_UINT32_TYPE,\n   TI_UINT64_TYPE,\n \n@@ -3902,6 +3903,7 @@ extern GTY(()) tree global_trees[TI_MAX];\n #define unsigned_intDI_type_node\tglobal_trees[TI_UINTDI_TYPE]\n #define unsigned_intTI_type_node\tglobal_trees[TI_UINTTI_TYPE]\n \n+#define uint16_type_node\t\tglobal_trees[TI_UINT16_TYPE]\n #define uint32_type_node\t\tglobal_trees[TI_UINT32_TYPE]\n #define uint64_type_node\t\tglobal_trees[TI_UINT64_TYPE]\n "}]}