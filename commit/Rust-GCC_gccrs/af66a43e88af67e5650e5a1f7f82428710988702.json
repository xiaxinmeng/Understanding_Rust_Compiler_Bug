{"sha": "af66a43e88af67e5650e5a1f7f82428710988702", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY2NmE0M2U4OGFmNjdlNTY1MGU1YTFmN2Y4MjQyODcxMDk4ODcwMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-02-03T21:40:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-02-03T21:40:07Z"}, "message": "cwchar: New.\n\n2006-02-03  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/cwchar: New.\n\t* include/tr1/cwctype: Likewise.\n\t* include/tr1/wchar.h: Likewise.\n\t* include/tr1/wctype.h: Likewise.\n\t* include/Makefile.am: Add.\n\t* testsuite/tr1/8_c_compatibility/cinttypes/functions: New.\n\t* testsuite/tr1/8_c_compatibility/cwctype/functions.cc: Likewise.\n\t* testsuite/tr1/headers.cc: Update.\n\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Add <wchar.h> and\n\t<wctype.h> checks.\n\t* docs/html/ext/tr1.html: Update.\n\t* include/Makefile.in: Regenerate.\n\t* config.h.in: Likewise.\n\t* configure: Likewise.\n\n\t* testsuite/tr1/8_c_compatibility/cctype/functions.cc: Cosmetic tweak.\n\nFrom-SVN: r110562", "tree": {"sha": "dde8e45b257a62925224bbd90a000f87dbade5b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dde8e45b257a62925224bbd90a000f87dbade5b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af66a43e88af67e5650e5a1f7f82428710988702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af66a43e88af67e5650e5a1f7f82428710988702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af66a43e88af67e5650e5a1f7f82428710988702", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af66a43e88af67e5650e5a1f7f82428710988702/comments", "author": null, "committer": null, "parents": [{"sha": "c37db700bcefc885b60cc1fae5faf5977f295886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37db700bcefc885b60cc1fae5faf5977f295886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c37db700bcefc885b60cc1fae5faf5977f295886"}], "stats": {"total": 615, "additions": 589, "deletions": 26}, "files": [{"sha": "6c6a71aaa3dac0373894a28f8a1ce3ca6e9027fe", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=af66a43e88af67e5650e5a1f7f82428710988702", "patch": "@@ -1,3 +1,22 @@\n+2006-02-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/cwchar: New.\n+\t* include/tr1/cwctype: Likewise.\n+\t* include/tr1/wchar.h: Likewise.\n+\t* include/tr1/wctype.h: Likewise.\n+\t* include/Makefile.am: Add.\n+\t* testsuite/tr1/8_c_compatibility/cinttypes/functions: New.\n+\t* testsuite/tr1/8_c_compatibility/cwctype/functions.cc: Likewise.\n+\t* testsuite/tr1/headers.cc: Update.\n+\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Add <wchar.h> and\n+\t<wctype.h> checks.\n+\t* docs/html/ext/tr1.html: Update.\n+\t* include/Makefile.in: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* configure: Likewise.\n+\n+\t* testsuite/tr1/8_c_compatibility/cctype/functions.cc: Cosmetic tweak.\n+\n 2006-02-02  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/cfloat: New."}, {"sha": "a582d611dd37ee85417d7dcaff87335375f07ef6", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=af66a43e88af67e5650e5a1f7f82428710988702", "patch": "@@ -1190,13 +1190,10 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n \t           [intmax_t i, numer, denom, base;\n \t            const char* s;\n \t            char** endptr;\n-\t            intmax_t ret;\n-\t            uintmax_t uret;\n-\t            imaxdiv_t dret;\n-\t            ret = imaxabs(i);\n-\t            dret = imaxdiv(numer, denom);\n+\t            intmax_t ret = imaxabs(i);\n+\t            imaxdiv_t dret = imaxdiv(numer, denom);\n \t            ret = strtoimax(s, endptr, base);\n-\t            uret = strtoumax(s, endptr, base);\n+\t            uintmax_t uret = strtoumax(s, endptr, base);\n         \t   ],[ac_c99_inttypes_tr1=yes], [ac_c99_inttypes_tr1=no])\n   fi\n   AC_MSG_RESULT($ac_c99_inttypes_tr1)\n@@ -1206,6 +1203,50 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n               <tr1/cinttypes> in namespace std::tr1.])\n   fi\n \n+  # Check for the existence of <wchar.h> functions.\n+  AC_MSG_CHECKING([for ISO C99 support to TR1 in <wchar.h>])\n+  AC_CACHE_VAL(ac_c99_wchar_tr1, [\n+  AC_TRY_COMPILE([#include <wchar.h>\n+\t          #include <stdio.h>\n+\t          #include <stdarg.h>],\n+\t         [const wchar_t* nptr;\n+\t          const wchar_t* format;\n+\t          const wchar_t* s;\n+\t          wchar_t** endptr;\n+\t          FILE* stream;\n+\t          va_list arg;\n+\t          int base;\n+\t          float fret = wcstof(nptr, endptr);\n+\t          long double ldret = wcstold(nptr, endptr);\n+\t          int ret = vfwscanf(stream, format, arg);\n+  \t          ret = vswscanf(s, format, arg);\n+  \t          ret = vwscanf(format, arg);\n+\t          long long llret = wcstoll(nptr, endptr, base);\n+  \t          unsigned long long ullret = wcstoull(nptr, endptr, base);\n+\t\t ],[ac_c99_wchar_tr1=yes], [ac_c99_wchar_tr1=no])\n+  ])\n+  AC_MSG_RESULT($ac_c99_wchar_tr1)\n+  if test x\"$ac_c99_wchar_tr1\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_C99_WCHAR_TR1, 1,\n+              [Define if C99 functions in <wchar.h> should be imported in\n+\t      <tr1/cwchar> in namespace std::tr1.])\n+  fi\n+\n+  # Check for the existence of <wctype.h> functions.\n+  AC_MSG_CHECKING([for ISO C99 support to TR1 in <wctype.h>])\n+  AC_CACHE_VAL(ac_c99_wctype_tr1, [\n+  AC_TRY_COMPILE([#include <wctype.h>],\n+\t         [wint_t ch;\n+\t          int ret = iswblank(ch);\n+\t\t ],[ac_c99_wctype_tr1=yes], [ac_c99_wctype_tr1=no])\n+  ])\n+  AC_MSG_RESULT($ac_c99_wctype_tr1)\n+  if test x\"$ac_c99_wctype_tr1\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_C99_WCTYPE_TR1, 1,\n+              [Define if C99 functions in <wctype.h> should be imported in\n+\t      <tr1/cwctype> in namespace std::tr1.])\n+  fi\n+\n   AC_LANG_RESTORE\n ])\n "}, {"sha": "0f210cbcc9f1a057874400ac573054714e2e775b", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=af66a43e88af67e5650e5a1f7f82428710988702", "patch": "@@ -719,6 +719,14 @@\n    namespace std::tr1. */\n #undef _GLIBCXX_USE_C99_STDINT_TR1\n \n+/* Define if C99 functions in <wchar.h> should be imported in <tr1/cwchar> in\n+   namespace std::tr1. */\n+#undef _GLIBCXX_USE_C99_WCHAR_TR1\n+\n+/* Define if C99 functions in <wctype.h> should be imported in <tr1/cwctype>\n+   in namespace std::tr1. */\n+#undef _GLIBCXX_USE_C99_WCTYPE_TR1\n+\n /* Define if iconv and related functions exist and are usable. */\n #undef _GLIBCXX_USE_ICONV\n "}, {"sha": "5ce6410135fd719c4935ed90f6f46da3473a999f", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 151, "deletions": 6, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=af66a43e88af67e5650e5a1f7f82428710988702", "patch": "@@ -30629,13 +30629,10 @@ main ()\n intmax_t i, numer, denom, base;\n \t            const char* s;\n \t            char** endptr;\n-\t            intmax_t ret;\n-\t            uintmax_t uret;\n-\t            imaxdiv_t dret;\n-\t            ret = imaxabs(i);\n-\t            dret = imaxdiv(numer, denom);\n+\t            intmax_t ret = imaxabs(i);\n+\t            imaxdiv_t dret = imaxdiv(numer, denom);\n \t            ret = strtoimax(s, endptr, base);\n-\t            uret = strtoumax(s, endptr, base);\n+\t            uintmax_t uret = strtoumax(s, endptr, base);\n \n   ;\n   return 0;\n@@ -30682,6 +30679,154 @@ _ACEOF\n \n   fi\n \n+  # Check for the existence of <wchar.h> functions.\n+  echo \"$as_me:$LINENO: checking for ISO C99 support to TR1 in <wchar.h>\" >&5\n+echo $ECHO_N \"checking for ISO C99 support to TR1 in <wchar.h>... $ECHO_C\" >&6\n+  if test \"${ac_c99_wchar_tr1+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <wchar.h>\n+\t          #include <stdio.h>\n+\t          #include <stdarg.h>\n+int\n+main ()\n+{\n+const wchar_t* nptr;\n+\t          const wchar_t* format;\n+\t          const wchar_t* s;\n+\t          wchar_t** endptr;\n+\t          FILE* stream;\n+\t          va_list arg;\n+\t          int base;\n+\t          float fret = wcstof(nptr, endptr);\n+\t          long double ldret = wcstold(nptr, endptr);\n+\t          int ret = vfwscanf(stream, format, arg);\n+  \t          ret = vswscanf(s, format, arg);\n+  \t          ret = vwscanf(format, arg);\n+\t          long long llret = wcstoll(nptr, endptr, base);\n+  \t          unsigned long long ullret = wcstoull(nptr, endptr, base);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_c99_wchar_tr1=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_c99_wchar_tr1=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+  echo \"$as_me:$LINENO: result: $ac_c99_wchar_tr1\" >&5\n+echo \"${ECHO_T}$ac_c99_wchar_tr1\" >&6\n+  if test x\"$ac_c99_wchar_tr1\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_USE_C99_WCHAR_TR1 1\n+_ACEOF\n+\n+  fi\n+\n+  # Check for the existence of <wctype.h> functions.\n+  echo \"$as_me:$LINENO: checking for ISO C99 support to TR1 in <wctype.h>\" >&5\n+echo $ECHO_N \"checking for ISO C99 support to TR1 in <wctype.h>... $ECHO_C\" >&6\n+  if test \"${ac_c99_wctype_tr1+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <wctype.h>\n+int\n+main ()\n+{\n+wint_t ch;\n+\t          int ret = iswblank(ch);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_c99_wctype_tr1=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_c99_wctype_tr1=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+  echo \"$as_me:$LINENO: result: $ac_c99_wctype_tr1\" >&5\n+echo \"${ECHO_T}$ac_c99_wctype_tr1\" >&6\n+  if test x\"$ac_c99_wctype_tr1\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_USE_C99_WCTYPE_TR1 1\n+_ACEOF\n+\n+  fi\n+\n   ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'"}, {"sha": "467226076766cccaef1fbd8fe6e723be4bd8e63a", "filename": "libstdc++-v3/docs/html/ext/tr1.html", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html?ref=af66a43e88af67e5650e5a1f7f82428710988702", "patch": "@@ -2187,73 +2187,73 @@ <h1 align=\"center\">\n     <tr>\n       <td>8.30</td>\n       <td>Additions to header <code>&lt;cwchar&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.30.1</td>\n       <td>Synopsis</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.30.2</td>\n       <td>Definitions</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.30.3</td>\n       <td>Additional wide format specifiers</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.31</td>\n       <td>Additions to header <code>&lt;wchar.h&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.32</td>\n       <td>Additions to header <code>&lt;cwctype&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.32.1</td>\n       <td>Synopsis</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.32.2</td>\n       <td>Function <code>iswblank</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.33</td>\n       <td>Additions to header <code>&lt;wctype.h&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n   </tbody>\n@@ -2307,7 +2307,7 @@ <h3>Footnotes</h3>\n <table width=\"100%\" border=\"0\">\n <tr>\n   <td>\n-    <!-- IGNORE DIFF -->Last modified 2006-02-02\n+    <!-- IGNORE DIFF -->Last modified 2006-02-03\n   </td>\n   <td align=\"right\" valign=\"bottom\">\n     <a href=\"http://validator.w3.org/check/referer\">"}, {"sha": "4e06400b286a238781c9efc82487d78ed083da58", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=af66a43e88af67e5650e5a1f7f82428710988702", "patch": "@@ -494,6 +494,8 @@ tr1_headers = \\\n \t${tr1_srcdir}/cstdarg \\\n \t${tr1_srcdir}/cstdint \\\n \t${tr1_srcdir}/ctype.h \\\n+\t${tr1_srcdir}/cwchar \\\n+\t${tr1_srcdir}/cwctype \\\n \t${tr1_srcdir}/fenv.h \\\n \t${tr1_srcdir}/float.h \\\n \t${tr1_srcdir}/functional \\\n@@ -514,7 +516,9 @@ tr1_headers = \\\n \t${tr1_srcdir}/type_traits_fwd.h \\\n \t${tr1_srcdir}/unordered_set \\\n \t${tr1_srcdir}/unordered_map \\\n-\t${tr1_srcdir}/utility\n+\t${tr1_srcdir}/utility \\\n+\t${tr1_srcdir}/wchar.h \\\n+\t${tr1_srcdir}/wctype.h\n \n \n # This is the common subset of files that all three \"C\" header models use."}, {"sha": "a50108c801c7c7e7836d1789d9246fa13ab4ecdf", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=af66a43e88af67e5650e5a1f7f82428710988702", "patch": "@@ -711,6 +711,8 @@ tr1_headers = \\\n \t${tr1_srcdir}/cstdarg \\\n \t${tr1_srcdir}/cstdint \\\n \t${tr1_srcdir}/ctype.h \\\n+\t${tr1_srcdir}/cwchar \\\n+\t${tr1_srcdir}/cwctype \\\n \t${tr1_srcdir}/fenv.h \\\n \t${tr1_srcdir}/float.h \\\n \t${tr1_srcdir}/functional \\\n@@ -731,7 +733,9 @@ tr1_headers = \\\n \t${tr1_srcdir}/type_traits_fwd.h \\\n \t${tr1_srcdir}/unordered_set \\\n \t${tr1_srcdir}/unordered_map \\\n-\t${tr1_srcdir}/utility\n+\t${tr1_srcdir}/utility \\\n+\t${tr1_srcdir}/wchar.h \\\n+\t${tr1_srcdir}/wctype.h\n \n \n # This is the common subset of files that all three \"C\" header models use."}, {"sha": "608022a5c077d0d2bee9655fd96323a604f9d5c2", "filename": "libstdc++-v3/include/tr1/cwchar", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwchar?ref=af66a43e88af67e5650e5a1f7f82428710988702", "patch": "@@ -0,0 +1,96 @@\n+// TR1 cwchar -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_CWCHAR\n+#define _TR1_CWCHAR 1\n+\n+#include <bits/c++config.h>\n+\n+#if _GLIBCXX_USE_WCHAR_T\n+\n+#include <cwchar>\n+\n+#if _GLIBCXX_USE_C99_WCHAR_TR1\n+\n+#undef wcstof\n+#undef wcstold\n+#undef wcstoll\n+#undef wcstoull\n+#undef vfwscanf\n+#undef vswscanf\n+#undef vwscanf\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n+#if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n+  extern \"C\" long double\n+    (wcstold)(const wchar_t * restrict, wchar_t ** restrict);\n+#endif\n+#if !_GLIBCXX_USE_C99_DYNAMIC\n+  using ::wcstold;\n+#endif\n+#if _GLIBCXX_USE_C99_LONG_LONG_CHECK || _GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n+  extern \"C\" long long int\n+    (wcstoll)(const wchar_t * restrict, wchar_t ** restrict, int);\n+  extern \"C\" unsigned long long int\n+    (wcstoull)(const wchar_t * restrict, wchar_t ** restrict, int);\n+#endif\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n+  using ::wcstoll;\n+  using ::wcstoull;\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+// namespace std::tr1\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n+  using ::wcstof;\n+  using ::__gnu_cxx::wcstold;\n+  using ::__gnu_cxx::wcstoll;\n+  using ::__gnu_cxx::wcstoull;\n+\n+  using ::vfwscanf;\n+  using ::vswscanf;\n+  using ::vwscanf;\n+\n+_GLIBCXX_END_NAMESPACE\n+}\n+\n+#endif\n+\n+#endif\n+\n+#endif"}, {"sha": "3e94f270213abae2c488aca9e353694def3f0121", "filename": "libstdc++-v3/include/tr1/cwctype", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwctype?ref=af66a43e88af67e5650e5a1f7f82428710988702", "patch": "@@ -0,0 +1,61 @@\n+// TR1 cwctype -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_CWCTYPE\n+#define _TR1_CWCTYPE 1\n+\n+#include <bits/c++config.h>\n+\n+#if _GLIBCXX_USE_WCHAR_T\n+\n+#include <cwctype>\n+\n+#if _GLIBCXX_USE_C99_WCTYPE_TR1\n+\n+#undef iswblank\n+\n+// namespace std::tr1\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n+  using ::iswblank;\n+\n+_GLIBCXX_END_NAMESPACE\n+}\n+\n+#endif\n+\n+#endif\n+\n+#endif"}, {"sha": "295b6a966a6ac535513da75be12d226fced76680", "filename": "libstdc++-v3/include/tr1/wchar.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fwchar.h?ref=af66a43e88af67e5650e5a1f7f82428710988702", "patch": "@@ -0,0 +1,39 @@\n+// TR1 wchar.h -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_WCHAR_H\n+#define _TR1_WCHAR_H 1\n+\n+#include <tr1/cwchar>\n+\n+#endif"}, {"sha": "08341094947781d7c01318f9a20cbeb5c1af17dc", "filename": "libstdc++-v3/include/tr1/wctype.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fwctype.h?ref=af66a43e88af67e5650e5a1f7f82428710988702", "patch": "@@ -0,0 +1,39 @@\n+// TR1 wctype.h -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_WCTYPE_H\n+#define _TR1_WCTYPE_H 1\n+\n+#include <tr1/cwctype>\n+\n+#endif"}, {"sha": "35c34f412d5f8c708a7c2f7099dba56ecad122e2", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cctype/functions.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcctype%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcctype%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcctype%2Ffunctions.cc?ref=af66a43e88af67e5650e5a1f7f82428710988702", "patch": "@@ -28,8 +28,8 @@ void test01()\n {\n #if _GLIBCXX_USE_C99_CTYPE_TR1\n \n-  int ch = 0, r;\n-  r = std::tr1::isblank(ch);\n+  int ch = 0, ret;\n+  ret = std::tr1::isblank(ch);\n \n #endif\n }"}, {"sha": "577868a1504e08e72dc6d194a2596e4ec6ceb5e9", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cwchar/functions.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwchar%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwchar%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwchar%2Ffunctions.cc?ref=af66a43e88af67e5650e5a1f7f82428710988702", "patch": "@@ -0,0 +1,63 @@\n+// { dg-do compile }\n+\n+// 2006-02-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.6 Additions to header <cwchar>\n+\n+#include <tr1/cwchar>\n+#include <cstdio>\n+#include <cstdarg>\n+\n+#if _GLIBCXX_USE_WCHAR_T\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99_WCHAR_TR1\n+\n+  const wchar_t* nptr = 0;\n+  const wchar_t* format = 0;\n+  const wchar_t* s = 0;\n+  wchar_t** endptr = 0;\n+  FILE* stream = 0;\n+  std::va_list arg = 0;\n+\n+  float fret;\n+  long double ldret;\n+  int ret;\n+\n+  fret = std::tr1::wcstof(nptr, endptr);\n+  ldret = std::tr1::wcstold(nptr, endptr);\n+  ret = std::tr1::vfwscanf(stream, format, arg);\n+  ret = std::tr1::vswscanf(s, format, arg);\n+  ret = std::tr1::vwscanf(format, arg);\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  int base = 0;\n+  long long llret;\n+  unsigned long long ullret;\n+  llret = std::tr1::wcstoll(nptr, endptr, base);\n+  ullret = std::tr1::wcstoull(nptr, endptr, base);\n+#endif\n+\n+#endif\n+}\n+\n+#endif"}, {"sha": "5dc5a84b4d00f34af5a5efcc2122850ddc340454", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cwctype/functions.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwctype%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwctype%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwctype%2Ffunctions.cc?ref=af66a43e88af67e5650e5a1f7f82428710988702", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+\n+// 2006-02-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.32 Additions to header <cwctype>\n+\n+#include <tr1/cwctype>\n+\n+#if _GLIBCXX_USE_WCHAR_T\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99_WCTYPE_TR1\n+\n+  std::wint_t ch = 0;\n+  int ret;\n+  ret = std::tr1::iswblank(ch);\n+\n+#endif\n+}\n+\n+#endif"}, {"sha": "4b070036e0b21a12f842b34e7d60247dc92dc647", "filename": "libstdc++-v3/testsuite/tr1/headers.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af66a43e88af67e5650e5a1f7f82428710988702/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc?ref=af66a43e88af67e5650e5a1f7f82428710988702", "patch": "@@ -30,6 +30,8 @@\n #include <tr1/cstdarg>\n #include <tr1/cstdint>\n #include <tr1/ctype.h>\n+#include <tr1/cwchar>\n+#include <tr1/cwctype>\n #include <tr1/fenv.h>\n #include <tr1/float.h>\n #include <tr1/functional>\n@@ -44,3 +46,5 @@\n #include <tr1/unordered_set>\n #include <tr1/unordered_map>\n #include <tr1/utility>\n+#include <tr1/wchar.h>\n+#include <tr1/wctype.h>"}]}