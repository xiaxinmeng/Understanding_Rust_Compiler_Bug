{"sha": "658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU4YTgyZjhlZGFjZGJlNWY0OWViNDMwOWJmNWUyZmIzZGM5YjE0Nw==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2005-06-03T20:56:09Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2005-06-03T20:56:09Z"}, "message": "ITransport.java: New file.\n\n        * gnu/classpath/jdwp/transport/ITransport.java: New file.\n        * gnu/classpath/jdwp/transport/SocketTransport.java: New file.\n\nFrom-SVN: r100553", "tree": {"sha": "97da1c528a27e3848238a4840cff91630bf82344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97da1c528a27e3848238a4840cff91630bf82344"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25e3d99dc26b4312f21796c40ceb4403462d69b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e3d99dc26b4312f21796c40ceb4403462d69b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25e3d99dc26b4312f21796c40ceb4403462d69b0"}], "stats": {"total": 260, "additions": 260, "deletions": 0}, "files": [{"sha": "6e41cac24ba683ab895b27e284e75e24731ee348", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147", "patch": "@@ -1,3 +1,8 @@\n+2005-06-03  Keith Seitz  <keiths@redhat.com>\n+\n+\t* gnu/classpath/jdwp/transport/ITransport.java: New file.\n+\t* gnu/classpath/jdwp/transport/SocketTransport.java: New file.\n+\n 2005-06-03  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* jawt.c: Remove malloc.h, covered by stdlib.h."}, {"sha": "16706076f566f98d03be8ae57bdabfb3284687ea", "filename": "libjava/gnu/classpath/jdwp/transport/ITransport.java", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FITransport.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FITransport.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FITransport.java?ref=658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147", "patch": "@@ -0,0 +1,84 @@\n+/* ITransport.java -- An interface defining JDWP transports\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.transport;\n+\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.lang.IllegalArgumentException;\n+import java.util.HashMap;\n+\n+/**\n+ * A class representing a transport layer. This class serves as a generic\n+ * interface for all transport types used in the JDWP back-end.\n+ *\n+ * @author Keith Seitz <keiths@redhat.com>\n+ */\n+public interface ITransport\n+{\n+  /**\n+   * Configure the transport with the given properties\n+   *\n+   * @param   properties  properties of the transport configuration\n+   * @throws  TransportException on configury error\n+   */\n+  public void configure (HashMap properties)\n+    throws TransportException;\n+\n+  /**\n+   * Initialize the transport\n+   *\n+   * @throws  TransportException on initialization error\n+   */\n+  public void initialize ()\n+    throws TransportException;\n+\n+  /**\n+   * Get the input stream for the transport\n+   */\n+  public InputStream getInputStream ()\n+    throws IOException;\n+\n+  /**\n+   * Get the output stream for the transport\n+   */\n+  public OutputStream getOutputStream ()\n+    throws IOException;\n+}"}, {"sha": "3be193a052813117a76828bbd1c4d560a7476db8", "filename": "libjava/gnu/classpath/jdwp/transport/SocketTransport.java", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FSocketTransport.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FSocketTransport.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FSocketTransport.java?ref=658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147", "patch": "@@ -0,0 +1,171 @@\n+/* SocketTransport.java -- a socket transport\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.transport;\n+\n+import gnu.classpath.jdwp.transport.ITransport;\n+import gnu.classpath.jdwp.transport.TransportException;\n+\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.HashMap;\n+\n+import javax.net.ServerSocketFactory;\n+import javax.net.SocketFactory;\n+\n+/**\n+ * A socket-based transport. This transport uses\n+ * configury string that looks like \"name=dt_socket,\n+ * address=localhost:1234,server=y\".\n+ *\n+ * @author Keith Seitz <keiths@redhat.com>\n+ */\n+class SocketTransport\n+  implements ITransport\n+{\n+  /**\n+   * Name of this transport\n+   */\n+  public static final String NAME = \"dt_socket\";\n+\n+  // Configure properties\n+  private static final String _PROPERTY_ADDRESS = \"address\";\n+  private static final String _PROPERTY_SERVER = \"server\";\n+\n+  // Port number\n+  private int _port;\n+\n+  // Host name\n+  private String _host;\n+   \n+  // Are we acting as a server?\n+  private boolean _server = false;\n+\n+  // Socket\n+  private Socket _socket;\n+\n+  /**\n+   * Setup the connection configuration from the given properties\n+   *\n+   * @param  properties  the properties of the JDWP session\n+   * @throws TransportException for any configury errors\n+   */\n+  public void configure (HashMap properties)\n+    throws TransportException\n+  {\n+    // Get address [form: \"hostname:port\"]\n+    String p = (String) properties.get (_PROPERTY_ADDRESS);\n+    if (p != null)\n+      {\n+\tString[] s = p.split (\":\");\n+\tif (s.length == 2)\n+\t  {\n+\t    _host = s[0];\n+\t    _port = Integer.parseInt (s[1]);\n+\t  }\n+      }\n+\n+    // Get server [form: \"y\" or \"n\"]\n+    p = (String) properties.get (_PROPERTY_SERVER);\n+    if (p != null)\n+      {\n+\tif (p.toLowerCase().equals (\"y\"))\n+\t  _server = true;\n+      }\n+  }\n+\n+  /**\n+   * Initialize this socket connection. This includes\n+   * connecting to the host (or listening for it).\n+   *\n+   * @throws TransportException if a transport-related error occurs\n+   */\n+  public void initialize ()\n+    throws TransportException\n+  {\n+    try\n+      {\n+\tif (_server)\n+\t  {\n+\t    // Get a server socket\n+\t    ServerSocketFactory ssf = ServerSocketFactory.getDefault ();\n+\t    ServerSocket ss = ssf.createServerSocket (_port, 1);\n+\t    _socket = ss.accept ();\n+\t  }\n+\telse\n+\t  {\n+\t    // Get a client socket (the factory will connect it)\n+\t    SocketFactory sf = SocketFactory.getDefault ();\n+\t    _socket = sf.createSocket (_host, _port);\n+\t  }\n+      }\n+    catch (IOException ioe)\n+      {\n+\t// This will grab UnknownHostException, too.\n+\tthrow new TransportException (ioe);\n+      }\n+  }\n+\n+  /**\n+   * Returns an <code>InputStream</code> for the transport\n+   *\n+   * @throws IOException if an I/O error occurs creating the stream\n+   *                     or the socket is not connected\n+   */\n+  public InputStream getInputStream ()\n+    throws IOException\n+  {\n+    return _socket.getInputStream ();\n+  }\n+\n+  /**\n+   * Returns an <code>OutputStream</code> for the transport\n+   *\n+   * @throws IOException if an I/O error occurs creating the stream\n+   *                     or the socket is not connected\n+   */\n+  public OutputStream getOutputStream ()\n+    throws IOException\n+  {\n+    return _socket.getOutputStream ();\n+  }\n+}"}]}