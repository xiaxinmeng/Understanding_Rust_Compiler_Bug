{"sha": "e4d26fc71451ce53804a1cbb471689a53c3e83a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRkMjZmYzcxNDUxY2U1MzgwNGExY2JiNDcxNjg5YTUzYzNlODNhOA==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@cygnus.com", "date": "1999-01-14T15:17:46Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "1999-01-14T15:17:46Z"}, "message": "i960.c (i960_output_move_double_zero, [...]): New functions for moving zeros.\n\n1999-01-14  Vladimir N. Makarov  <vmakarov@cygnus.com>\n\t* config/i960/i960.c (i960_output_move_double_zero,\n\ti960_output_move_quad_zero): New functions for moving zeros.\n\t(i960_output_move_double, i960_output_move_quad): Additional code\n\tfor situation when moving unaligned register group.\n        * config/i960/i960.h (i960_output_move_double_zero,\n\ti960_output_move_quad_zero): The function definitions.\n\t* config/i960/i960.md (movdi+1, movti+1): Usage of the functions.\n\nFrom-SVN: r24666", "tree": {"sha": "ec4cb66c0905064c7a3f567c39508064d764bd57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec4cb66c0905064c7a3f567c39508064d764bd57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4d26fc71451ce53804a1cbb471689a53c3e83a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4d26fc71451ce53804a1cbb471689a53c3e83a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4d26fc71451ce53804a1cbb471689a53c3e83a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4d26fc71451ce53804a1cbb471689a53c3e83a8/comments", "author": null, "committer": null, "parents": [{"sha": "716618d5dd2d00e354fa393be49969a6b60af53f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/716618d5dd2d00e354fa393be49969a6b60af53f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/716618d5dd2d00e354fa393be49969a6b60af53f"}], "stats": {"total": 87, "additions": 74, "deletions": 13}, "files": [{"sha": "7ab408c10f7fb2eecb0abf600af8b5c1b807097f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d26fc71451ce53804a1cbb471689a53c3e83a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d26fc71451ce53804a1cbb471689a53c3e83a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4d26fc71451ce53804a1cbb471689a53c3e83a8", "patch": "@@ -1,3 +1,15 @@\n+1999-01-14  Vladimir N. Makarov  <vmakarov@cygnus.com>\n+\n+\t* config/i960/i960.c (i960_output_move_double_zero,\n+\ti960_output_move_quad_zero): New functions for moving zeros.\n+\t(i960_output_move_double, i960_output_move_quad): Additional code\n+\tfor situation when moving unaligned register group.\n+\t\n+        * config/i960/i960.h (i960_output_move_double_zero,\n+\ti960_output_move_quad_zero): The function definitions.\n+\n+\t* config/i960/i960.md (movdi+1, movti+1): Usage of the functions.\n+\n 1999-01-13  Vladimir N. Makarov  <vmakarov@cygnus.com>\n \n \t* config/i960/i960.c (i960_function_prologue): New code (optimal"}, {"sha": "3b79d644bdc47de44e3c770ae5a0b550703f8be4", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 58, "deletions": 7, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d26fc71451ce53804a1cbb471689a53c3e83a8/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d26fc71451ce53804a1cbb471689a53c3e83a8/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=e4d26fc71451ce53804a1cbb471689a53c3e83a8", "patch": "@@ -575,16 +575,20 @@ i960_address_cost (x)\n \n    Return 1 if we have written out everything that needs to be done to\n    do the move.  Otherwise, return 0 and the caller will emit the move\n-   normally.  */\n+   normally. */\n \n int\n emit_move_sequence (operands, mode)\n      rtx *operands;\n      enum machine_mode mode;\n {\n   /* We can only store registers to memory.  */\n-\n-  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) != REG)\n+  \n+  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) != REG\n+      && (operands[1] != const0_rtx || current_function_args_size\n+\t  || current_function_varargs || current_function_stdarg\n+\t  || rtx_equal_function_value_matters))\n+    /* Here we use the same test as movsi+1 pattern -- see i960.md. */\n     operands[1] = force_reg (mode, operands[1]);\n \n   /* Storing multi-word values in unaligned hard registers to memory may\n@@ -673,15 +677,36 @@ i960_output_move_double (dst, src)\n     {\n       if (REGNO (src) & 1)\n \t{\n-\t  /* This is handled by emit_move_sequence so we shouldn't get here.  */\n-\t  abort ();\n+\t  operands[0] = dst;\n+\t  operands[1] = adj_offsettable_operand (dst, UNITS_PER_WORD);\n+\t  if (! memory_address_p (word_mode, XEXP (operands[1], 0)))\n+\t    abort ();\n+\t  operands[2] = src;\n+\t  output_asm_insn (\"st\t%2,%0\\n\\tst\t%D2,%1\", operands);\n+\t  return \"\";\n \t}\n       return \"stl\t%1,%0\";\n     }\n   else\n     abort ();\n }\n \n+/* Output assembler to move a double word zero.  */\n+\n+char *\n+i960_output_move_double_zero (dst)\n+     rtx dst;\n+{\n+  rtx operands[2];\n+\n+  operands[0] = dst;\n+    {\n+      operands[1] = adj_offsettable_operand (dst, 4);\n+      output_asm_insn (\"st\tg14,%0\\n\\tst\tg14,%1\", operands);\n+    }\n+  return \"\";\n+}\n+\n /* Output assembler to move a quad word value.  */\n \n char *\n@@ -744,14 +769,40 @@ i960_output_move_quad (dst, src)\n     {\n       if (REGNO (src) & 3)\n \t{\n-\t  /* This is handled by emit_move_sequence so we shouldn't get here.  */\n-\t  abort ();\n+\t  operands[0] = dst;\n+\t  operands[1] = adj_offsettable_operand (dst, UNITS_PER_WORD);\n+\t  operands[2] = adj_offsettable_operand (dst, 2*UNITS_PER_WORD);\n+\t  operands[3] = adj_offsettable_operand (dst, 3*UNITS_PER_WORD);\n+\t  if (! memory_address_p (word_mode, XEXP (operands[3], 0)))\n+\t    abort ();\n+\t  operands[4] = src;\n+\t  output_asm_insn (\"st\t%4,%0\\n\\tst\t%D4,%1\\n\\tst\t%E4,%2\\n\\tst\t%F4,%3\", operands);\n+\t  return \"\";\n \t}\n       return \"stq\t%1,%0\";\n     }\n   else\n     abort ();\n }\n+\n+/* Output assembler to move a quad word zero.  */\n+\n+char *\n+i960_output_move_quad_zero (dst)\n+     rtx dst;\n+{\n+  rtx operands[4];\n+\n+  operands[0] = dst;\n+    {\n+      operands[1] = adj_offsettable_operand (dst, 4);\n+      operands[2] = adj_offsettable_operand (dst, 8);\n+      operands[3] = adj_offsettable_operand (dst, 12);\n+      output_asm_insn (\"st\tg14,%0\\n\\tst\tg14,%1\\n\\tst\tg14,%2\\n\\tst\tg14,%3\", operands);\n+    }\n+  return \"\";\n+}\n+\n \f\n /* Emit insns to load a constant to non-floating point registers.\n    Uses several strategies to try to use as few insns as possible.  */"}, {"sha": "67b3dc7dc78882169cdc000c2ba5abdd44c1d34d", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d26fc71451ce53804a1cbb471689a53c3e83a8/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d26fc71451ce53804a1cbb471689a53c3e83a8/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=e4d26fc71451ce53804a1cbb471689a53c3e83a8", "patch": "@@ -1564,7 +1564,9 @@ extern char *i960_output_ldconst ();\n extern char *i960_output_call_insn ();\n extern char *i960_output_ret_insn ();\n extern char *i960_output_move_double ();\n+extern char *i960_output_move_double_zero ();\n extern char *i960_output_move_quad ();\n+extern char *i960_output_move_quad_zero ();\n \n /* Defined in reload.c, and used in insn-recog.c.  */\n "}, {"sha": "53157e09c2fff02e184248b9f5c428dbc413ae41", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d26fc71451ce53804a1cbb471689a53c3e83a8/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d26fc71451ce53804a1cbb471689a53c3e83a8/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=e4d26fc71451ce53804a1cbb471689a53c3e83a8", "patch": "@@ -835,8 +835,7 @@\n     case 2:\n       return i960_output_ldconst (operands[0], operands[1]);\n     case 5:\n-      operands[1] = adj_offsettable_operand (operands[0], 4);\n-      return \\\"st\tg14,%0\\;st\tg14,%1\\\";\n+       return i960_output_move_double_zero (operands[0]);\n     }\n }\"\n   [(set_attr \"type\" \"move,move,load,load,store,store\")])\n@@ -915,10 +914,7 @@\n     case 2:\n       return i960_output_ldconst (operands[0], operands[1]);\n     case 5:\n-      operands[1] = adj_offsettable_operand (operands[0], 4);\n-      operands[2] = adj_offsettable_operand (operands[0], 8);\n-      operands[3] = adj_offsettable_operand (operands[0], 12);\n-      return \\\"st\tg14,%0\\;st\tg14,%1\\;st\tg14,%2\\;st\tg14,%3\\\";\n+      return i960_output_move_quad_zero (operands[0]);\n     }\n }\"\n   [(set_attr \"type\" \"move,move,load,load,store,store\")])"}]}