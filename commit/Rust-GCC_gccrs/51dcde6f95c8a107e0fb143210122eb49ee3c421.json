{"sha": "51dcde6f95c8a107e0fb143210122eb49ee3c421", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFkY2RlNmY5NWM4YTEwN2UwZmIxNDMyMTAxMjJlYjQ5ZWUzYzQyMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-04-18T20:28:39Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-04-18T20:28:39Z"}, "message": "ia64.c (ia64_function_arg_pass_by_reference): New.\n\n        * config/ia64/ia64.c (ia64_function_arg_pass_by_reference): New.\n        (ia64_va_arg): Expect variable sized types by reference.\n        * config/ia64/ia64-protos.h: Update.\n        * config/ia64/ia64.h (FUNCTION_ARG_PASS_BY_REFERENCE): Use\n        ia64_function_arg_pass_by_reference.\n\nFrom-SVN: r52494", "tree": {"sha": "a68bf81a9dde32eb7fcde964fe821cc364ee470f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a68bf81a9dde32eb7fcde964fe821cc364ee470f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51dcde6f95c8a107e0fb143210122eb49ee3c421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51dcde6f95c8a107e0fb143210122eb49ee3c421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51dcde6f95c8a107e0fb143210122eb49ee3c421", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51dcde6f95c8a107e0fb143210122eb49ee3c421/comments", "author": null, "committer": null, "parents": [{"sha": "a48632153d7f6013126d9a73125fbef7c05268c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a48632153d7f6013126d9a73125fbef7c05268c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a48632153d7f6013126d9a73125fbef7c05268c4"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "7b71e96161c8646b2b1768336eb2ebcf47494c3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51dcde6f95c8a107e0fb143210122eb49ee3c421/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51dcde6f95c8a107e0fb143210122eb49ee3c421/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51dcde6f95c8a107e0fb143210122eb49ee3c421", "patch": "@@ -1,3 +1,11 @@\n+2002-04-18  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/ia64.c (ia64_function_arg_pass_by_reference): New.\n+\t(ia64_va_arg): Expect variable sized types by reference.\n+\t* config/ia64/ia64-protos.h: Update.\n+\t* config/ia64/ia64.h (FUNCTION_ARG_PASS_BY_REFERENCE): Use \n+\tia64_function_arg_pass_by_reference.\n+\n 2002-04-18  Richard Henderson  <rth@redhat.com>\n \n         * ifcvt.c: Include except.h."}, {"sha": "8b0d1852862ab9f89919ee7d310976983bc6e1b1", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51dcde6f95c8a107e0fb143210122eb49ee3c421/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51dcde6f95c8a107e0fb143210122eb49ee3c421/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=51dcde6f95c8a107e0fb143210122eb49ee3c421", "patch": "@@ -114,6 +114,9 @@ extern int ia64_function_arg_partial_nregs PARAMS((CUMULATIVE_ARGS *,\n extern void ia64_function_arg_advance PARAMS((CUMULATIVE_ARGS *,\n \t\t\t\t\t      enum machine_mode,\n \t\t\t\t\t      tree, int));\n+extern int ia64_function_arg_pass_by_reference PARAMS((CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t       enum machine_mode,\n+\t\t\t\t\t\t       tree, int));\n extern int ia64_return_in_memory PARAMS((tree));\n extern void ia64_asm_output_external PARAMS((FILE *, tree, const char *));\n "}, {"sha": "d628dea91af747449914fe6d3b2edeec4bb8feff", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51dcde6f95c8a107e0fb143210122eb49ee3c421/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51dcde6f95c8a107e0fb143210122eb49ee3c421/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=51dcde6f95c8a107e0fb143210122eb49ee3c421", "patch": "@@ -3200,6 +3200,19 @@ ia64_function_arg_advance (cum, mode, type, named)\n       cum->int_regs = cum->words;\n     }\n }\n+\n+/* Variable sized types are passed by reference.  */\n+/* ??? At present this is a GCC extension to the IA-64 ABI.  */\n+\n+int\n+ia64_function_arg_pass_by_reference (cum, mode, type, named)\n+     CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+     tree type;\n+     int named ATTRIBUTE_UNUSED;\n+{\n+  return TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST;\n+}\n \f\n /* Implement va_start.  */\n \n@@ -3231,6 +3244,13 @@ ia64_va_arg (valist, type)\n {\n   tree t;\n \n+  /* Variable sized types are passed by reference.  */\n+  if (TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n+    {\n+      rtx addr = std_expand_builtin_va_arg (valist, build_pointer_type (type));\n+      return gen_rtx_MEM (ptr_mode, force_reg (Pmode, addr));\n+    }\n+\n   /* Arguments with alignment larger than 8 bytes start at the next even\n      boundary.  */\n   if (TYPE_ALIGN (type) > 8 * BITS_PER_UNIT)"}, {"sha": "fd880facde995afab0372dffaa912ac515b50624", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51dcde6f95c8a107e0fb143210122eb49ee3c421/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51dcde6f95c8a107e0fb143210122eb49ee3c421/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=51dcde6f95c8a107e0fb143210122eb49ee3c421", "patch": "@@ -1268,7 +1268,8 @@ enum reg_class\n    pointer is passed in whatever way is appropriate for passing a pointer to\n    that type.  */\n \n-#define FUNCTION_ARG_PASS_BY_REFERENCE(CUM, MODE, TYPE, NAMED) 0\n+#define FUNCTION_ARG_PASS_BY_REFERENCE(CUM, MODE, TYPE, NAMED) \\\n+  ia64_function_arg_pass_by_reference (&CUM, MODE, TYPE, NAMED)\n \n /* A C type for declaring a variable that is used as the first argument of\n    `FUNCTION_ARG' and other related values.  For some target machines, the type"}]}