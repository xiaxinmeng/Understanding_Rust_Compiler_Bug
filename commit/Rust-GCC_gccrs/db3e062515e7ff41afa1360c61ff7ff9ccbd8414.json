{"sha": "db3e062515e7ff41afa1360c61ff7ff9ccbd8414", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIzZTA2MjUxNWU3ZmY0MWFmYTEzNjBjNjFmZjdmZjljY2JkODQxNA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2019-11-28T00:11:28Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2019-11-28T00:11:28Z"}, "message": "Reformat movdi_internal64.\n\n2019-11-26  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/rs6000.md (movdi_internal64): Reformat.\n\nFrom-SVN: r278788", "tree": {"sha": "cba4a30ab3672a3ed206951c211c7ed395ffc14b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cba4a30ab3672a3ed206951c211c7ed395ffc14b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db3e062515e7ff41afa1360c61ff7ff9ccbd8414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3e062515e7ff41afa1360c61ff7ff9ccbd8414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db3e062515e7ff41afa1360c61ff7ff9ccbd8414", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3e062515e7ff41afa1360c61ff7ff9ccbd8414/comments", "author": null, "committer": null, "parents": [{"sha": "4a54de9dbd9e2fd325a23f0b65d7ae6f1a9caa9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a54de9dbd9e2fd325a23f0b65d7ae6f1a9caa9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a54de9dbd9e2fd325a23f0b65d7ae6f1a9caa9e"}], "stats": {"total": 79, "additions": 49, "deletions": 30}, "files": [{"sha": "857c06917a4c7b2268f29c498cefffa6f5acff10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3e062515e7ff41afa1360c61ff7ff9ccbd8414/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3e062515e7ff41afa1360c61ff7ff9ccbd8414/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db3e062515e7ff41afa1360c61ff7ff9ccbd8414", "patch": "@@ -1,6 +1,7 @@\n 2019-11-27  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* config/rs6000/rs6000.md (movsi_internal): Reformat.\n+\t(movdi_internal64): Reformat.\n \n 2019-11-27  Peter Bergner <bergner@linux.ibm.com>\n "}, {"sha": "876dfe3e9598f8e6e3873c9a7697168a5bad4e26", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 48, "deletions": 30, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3e062515e7ff41afa1360c61ff7ff9ccbd8414/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3e062515e7ff41afa1360c61ff7ff9ccbd8414/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=db3e062515e7ff41afa1360c61ff7ff9ccbd8414", "patch": "@@ -8827,24 +8827,33 @@\n   DONE;\n })\n \n-;;              GPR store  GPR load   GPR move   GPR li     GPR lis     GPR #\n-;;              FPR store  FPR load   FPR move   AVX store  AVX store   AVX load\n-;;              AVX load   VSX move   P9 0       P9 -1      AVX 0/-1    VSX 0\n-;;              VSX -1     P9 const   AVX const  From SPR   To SPR      SPR<->SPR\n-;;              VSX->GPR   GPR->VSX\n+;;\t\tGPR store  GPR load   GPR move\n+;;\t\tGPR li     GPR lis    GPR #\n+;;\t\tFPR store  FPR load   FPR move\n+;;\t\tAVX store  AVX store  AVX load   AVX load   VSX move\n+;;\t\tP9 0       P9 -1      AVX 0/-1   VSX 0      VSX -1\n+;;\t\tP9 const   AVX const\n+;;\t\tFrom SPR   To SPR     SPR<->SPR\n+;;\t\tVSX->GPR   GPR->VSX\n (define_insn \"*movdi_internal64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-               \"=YZ,       r,         r,         r,         r,          r,\n-                m,         ^d,        ^d,        wY,        Z,          $v,\n-                $v,        ^wa,       wa,        wa,        v,          wa,\n-                wa,        v,         v,         r,         *h,         *h,\n-                ?r,        ?wa\")\n+\t\t\"=YZ,       r,          r,\n+\t\tr,          r,          r,\n+\t\tm,          ^d,         ^d,\n+\t\twY,         Z,          $v,         $v,         ^wa,\n+\t\twa,         wa,         v,          wa,         wa,\n+\t\tv,          v,\n+\t\tr,          *h,         *h,\n+\t\t?r,         ?wa\")\n \t(match_operand:DI 1 \"input_operand\"\n-               \"r,         YZ,        r,         I,         L,          nF,\n-                ^d,        m,         ^d,        ^v,        $v,         wY,\n-                Z,         ^wa,       Oj,        wM,        OjwM,       Oj,\n-                wM,        wS,        wB,        *h,        r,          0,\n-                wa,        r\"))]\n+\t\t\"r,         YZ,         r,\n+\t\tI,          L,          nF,\n+\t\t^d,         m,          ^d,\n+\t\t^v,         $v,         wY,         Z,          ^wa,\n+\t\tOj,         wM,         OjwM,       Oj,         wM,\n+\t\twS,         wB,\n+\t\t*h,         r,          0,\n+\t\twa,         r\"))]\n   \"TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], DImode)\n        || gpc_reg_operand (operands[1], DImode))\"\n@@ -8876,24 +8885,33 @@\n    mfvsrd %0,%x1\n    mtvsrd %x0,%1\"\n   [(set_attr \"type\"\n-               \"store,      load,\t*,         *,         *,         *,\n-                fpstore,    fpload,     fpsimple,  fpstore,   fpstore,   fpload,\n-                fpload,     veclogical, vecsimple, vecsimple, vecsimple, veclogical,\n-                veclogical, vecsimple,  vecsimple, mfjmpr,    mtjmpr,    *,\n-                mftgpr,    mffgpr\")\n+\t\t\"store,      load,       *,\n+\t\t*,           *,          *,\n+\t\tfpstore,     fpload,     fpsimple,\n+\t\tfpstore,     fpstore,    fpload,     fpload,     veclogical,\n+\t\tvecsimple,   vecsimple,  vecsimple,  veclogical, veclogical,\n+\t\tvecsimple,   vecsimple,\n+\t\tmfjmpr,      mtjmpr,     *,\n+\t\tmftgpr,      mffgpr\")\n    (set_attr \"size\" \"64\")\n    (set_attr \"length\"\n-               \"*,         *,         *,         *,         *,          20,\n-                *,         *,         *,         *,         *,          *,\n-                *,         *,         *,         *,         *,          *,\n-                *,         8,         *,         *,         *,          *,\n-                *,         *\")\n+\t\t\"*,         *,          *,\n+\t\t*,          *,          20,\n+\t\t*,          *,          *,\n+\t\t*,          *,          *,          *,          *,\n+\t\t*,          *,          *,          *,          *,\n+\t\t8,          *,\n+\t\t*,          *,          *,\n+\t\t*,          *\")\n    (set_attr \"isa\"\n-               \"*,         *,         *,         *,         *,          *,\n-                *,         *,         *,         p9v,       p7v,        p9v,\n-                p7v,       *,         p9v,       p9v,       p7v,        *,\n-                *,         p7v,       p7v,       *,         *,          *,\n-                p8v,       p8v\")])\n+\t\t\"*,         *,          *,\n+\t\t*,          *,          *,\n+\t\t*,          *,          *,\n+\t\tp9v,        p7v,        p9v,        p7v,        *,\n+\t\tp9v,        p9v,        p7v,        *,          *,\n+\t\tp7v,        p7v,\n+\t\t*,          *,          *,\n+\t\tp8v,        p8v\")])\n \n ; Some DImode loads are best done as a load of -1 followed by a mask\n ; instruction."}]}