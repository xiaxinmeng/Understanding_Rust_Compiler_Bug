{"sha": "348846ff361ca51d0251ec70d0b2eec8c786aad3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ4ODQ2ZmYzNjFjYTUxZDAyNTFlYzcwZDBiMmVlYzhjNzg2YWFkMw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-12-12T20:48:00Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-12-12T20:48:00Z"}, "message": "extend.texi (Function Attributes): Clarify C++ aspects.\n\n\ngcc/ChangeLog:\n\n\t* doc/extend.texi (Function Attributes): Clarify C++ aspects.\n\t(Variable Attributes): Same.\n\t(Type Attributes): Same.\n\nFrom-SVN: r267064", "tree": {"sha": "84aaab3b8fd52c2cd12bf85bc7218d58f5c31a79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84aaab3b8fd52c2cd12bf85bc7218d58f5c31a79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/348846ff361ca51d0251ec70d0b2eec8c786aad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/348846ff361ca51d0251ec70d0b2eec8c786aad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/348846ff361ca51d0251ec70d0b2eec8c786aad3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/348846ff361ca51d0251ec70d0b2eec8c786aad3/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c46eb979063d5ef4d0933a4185cf5d71cb19eae8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c46eb979063d5ef4d0933a4185cf5d71cb19eae8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c46eb979063d5ef4d0933a4185cf5d71cb19eae8"}], "stats": {"total": 90, "additions": 58, "deletions": 32}, "files": [{"sha": "b366fa0717164af9ab4baed2da996f34ed771643", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/348846ff361ca51d0251ec70d0b2eec8c786aad3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/348846ff361ca51d0251ec70d0b2eec8c786aad3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=348846ff361ca51d0251ec70d0b2eec8c786aad3", "patch": "@@ -1,3 +1,9 @@\n+2018-12-12  Martin Sebor  <msebor@redhat.com>\n+\n+\t* doc/extend.texi (Function Attributes): Clarify C++ aspects.\n+\t(Variable Attributes): Same.\n+\t(Type Attributes): Same.\n+\n 2018-12-12  Olivier Hainque  <hainque@adacore.com>\n \n \t* config/aarch64/aarch64.c (aarch64_override_options): Once arch,"}, {"sha": "eb35ec562de5890cc5aa8666f4ebb1361b749e23", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 52, "deletions": 32, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/348846ff361ca51d0251ec70d0b2eec8c786aad3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/348846ff361ca51d0251ec70d0b2eec8c786aad3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=348846ff361ca51d0251ec70d0b2eec8c786aad3", "patch": "@@ -2332,30 +2332,46 @@ the enclosing block.\n @cindex @code{volatile} applied to function\n @cindex @code{const} applied to function\n \n-In GNU C, you can use function attributes to declare certain things\n-about functions called in your program which help the compiler\n-optimize calls and check your code more carefully.  For example, you\n-can use attributes to declare that a function never returns\n-(@code{noreturn}), returns a value depending only on its arguments\n-(@code{pure}), or has @code{printf}-style arguments (@code{format}).\n+In GNU C and C++, you can use function attributes to specify certain\n+function properties that may help the compiler optimize calls or\n+check code more carefully for correctness.  For example, you\n+can use attributes to specify that a function never returns\n+(@code{noreturn}), returns a value depending only on the values of\n+its arguments (@code{const}), or has @code{printf}-style arguments\n+(@code{format}).\n \n You can also use attributes to control memory placement, code\n generation options or call/return conventions within the function\n being annotated.  Many of these attributes are target-specific.  For\n example, many targets support attributes for defining interrupt\n handler functions, which typically must follow special register usage\n-and return conventions.\n+and return conventions.  Such attributes are described in the subsection\n+for each target.  However, a considerable number of attributes are\n+supported by most, if not all targets.  Those are described in\n+the @ref{Common Function Attributes} section.\n \n Function attributes are introduced by the @code{__attribute__} keyword\n-on a declaration, followed by an attribute specification inside double\n-parentheses.  You can specify multiple attributes in a declaration by\n-separating them by commas within the double parentheses or by\n-immediately following an attribute declaration with another attribute\n-declaration.  @xref{Attribute Syntax}, for the exact rules on attribute\n-syntax and placement.  Compatible attribute specifications on distinct\n-declarations of the same function are merged.  An attribute specification\n-that is not compatible with attributes already applied to a declaration\n-of the same function is ignored with a warning.\n+in the declaration of a function, followed by an attribute specification\n+enclosed in double parentheses.  You can specify multiple attributes in\n+a declaration by separating them by commas within the double parentheses\n+or by immediately following one attribute specification with another.\n+@xref{Attribute Syntax}, for the exact rules on attribute syntax and\n+placement.  Compatible attribute specifications on distinct declarations\n+of the same function are merged.  An attribute specification that is not\n+compatible with attributes already applied to a declaration of the same\n+function is ignored with a warning.\n+\n+Some function attributes take one or more arguments that refer to\n+the function's parameters by their positions within the function parameter\n+list.  Such attribute arguments are referred to as @dfn{positional arguments}.\n+Unless specified otherwise, positional arguments that specify properties\n+of parameters with pointer types can also specify the same properties of\n+the implicit C++ @code{this} argument in non-static member functions, and\n+of parameters of reference to a pointer type.  For ordinary functions,\n+position one refers to the first parameter on the list.  In C++ non-static\n+member functions, position one refers to the implicit @code{this} pointer.\n+The same restrictions and effects apply to function attributes used with\n+ordinary functions or C++ member functions.\n \n GCC also supports attributes on\n variable declarations (@pxref{Variable Attributes}),\n@@ -6127,13 +6143,13 @@ when this attribute is present.\n @cindex attribute of variables\n @cindex variable attributes\n \n-The keyword @code{__attribute__} allows you to specify special\n-attributes of variables or structure fields.  This keyword is followed\n-by an attribute specification inside double parentheses.  Some\n-attributes are currently defined generically for variables.\n-Other attributes are defined for variables on particular target\n-systems.  Other attributes are available for functions\n-(@pxref{Function Attributes}), labels (@pxref{Label Attributes}),\n+The keyword @code{__attribute__} allows you to specify special properties\n+of variables, function parameters, or structure, union, and, in C++, class\n+members.  This @code{__attribute__} keyword is followed by an attribute\n+specification enclosed in double parentheses.  Some attributes are currently\n+defined generically for variables.  Other attributes are defined for\n+variables on particular target systems.  Other attributes are available\n+for functions (@pxref{Function Attributes}), labels (@pxref{Label Attributes}),\n enumerators (@pxref{Enumerator Attributes}), statements\n (@pxref{Statement Attributes}), and for types (@pxref{Type Attributes}).\n Other front ends might define more attributes\n@@ -7086,17 +7102,21 @@ placed in either the @code{.bss_below100} section or the\n @cindex attribute of types\n @cindex type attributes\n \n-The keyword @code{__attribute__} allows you to specify special\n-attributes of types.  Some type attributes apply only to @code{struct}\n-and @code{union} types, while others can apply to any type defined\n-via a @code{typedef} declaration.  Other attributes are defined for\n-functions (@pxref{Function Attributes}), labels (@pxref{Label \n-Attributes}), enumerators (@pxref{Enumerator Attributes}), \n-statements (@pxref{Statement Attributes}), and for\n-variables (@pxref{Variable Attributes}).\n+The keyword @code{__attribute__} allows you to specify various special\n+properties of types.  Some type attributes apply only to structure and\n+union types, and in C++, also class types, while others can apply to\n+any type defined via a @code{typedef} declaration.  Unless otherwise\n+specified, the same restrictions and effects apply to attributes regardless\n+of whether a type is a trivial structure or a C++ class with user-defined\n+constructors, destructors, or a copy assignment.\n+\n+Other attributes are defined for functions (@pxref{Function Attributes}),\n+labels (@pxref{Label  Attributes}), enumerators (@pxref{Enumerator\n+Attributes}), statements (@pxref{Statement Attributes}), and for variables\n+(@pxref{Variable Attributes}).\n \n The @code{__attribute__} keyword is followed by an attribute specification\n-inside double parentheses.  \n+enclosed in double parentheses.\n \n You may specify type attributes in an enum, struct or union type\n declaration or definition by placing them immediately after the"}]}