{"sha": "92c392e657cf0238be5bcbd7e021a893ecafbc29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJjMzkyZTY1N2NmMDIzOGJlNWJjYmQ3ZTAyMWE4OTNlY2FmYmMyOQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-29T21:59:08Z"}, "committer": {"name": "Marek Michalkiewicz", "email": "marekm@gcc.gnu.org", "date": "2002-05-29T21:59:08Z"}, "message": "avr.c (avr_base_arch_macro, [...]): New.\n\n\n\t* config/avr/avr.c (avr_base_arch_macro, avr_extra_arch_macro): New.\n\t(avr_asm_only_p): Make non-static.\n\t(enum avr_arch): Remove.\n\t(avr_arch_types): New.\n\t(avr_mcu_types): Update.\n\t(avr_override_options): Use avr_arch_types table instead of switch.\n\t* avr.h (CPP_PREDEFINES): Die.\n\t(avr_base_arch_macro, avr_extra_arch_macro): New.\n\t(TARGET_CPU_CPP_BUILTINS): New.\n\t(CPP_SPEC, EXTRA_SPECS): Simplify.\n\t(CPP_AVR1_SPEC, CPP_AVR2_SPEC, CPP_AVR3_SPEC, CPP_AVR4_SPEC,\n\tCPP_AVR5_SPEC): Die.\n\nCo-Authored-By: Marek Michalkiewicz <marekm@amelek.gda.pl>\n\nFrom-SVN: r54023", "tree": {"sha": "d642f6bece5c0fe8d5c88b9f904299ce676232b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d642f6bece5c0fe8d5c88b9f904299ce676232b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92c392e657cf0238be5bcbd7e021a893ecafbc29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92c392e657cf0238be5bcbd7e021a893ecafbc29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92c392e657cf0238be5bcbd7e021a893ecafbc29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92c392e657cf0238be5bcbd7e021a893ecafbc29/comments", "author": null, "committer": null, "parents": [{"sha": "4528173ea3cb69787c3dfc00cc6e9521d4e6b4ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4528173ea3cb69787c3dfc00cc6e9521d4e6b4ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4528173ea3cb69787c3dfc00cc6e9521d4e6b4ef"}], "stats": {"total": 285, "additions": 119, "deletions": 166}, "files": [{"sha": "6ed0b6ecd58bdd1f2ded7fb8c34070b64e262192", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c392e657cf0238be5bcbd7e021a893ecafbc29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c392e657cf0238be5bcbd7e021a893ecafbc29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92c392e657cf0238be5bcbd7e021a893ecafbc29", "patch": "@@ -1,3 +1,19 @@\n+2002-05-29  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\t    Marek Michalkiewicz  <marekm@amelek.gda.pl>\n+\n+\t* config/avr/avr.c (avr_base_arch_macro, avr_extra_arch_macro): New.\n+\t(avr_asm_only_p): Make non-static.\n+\t(enum avr_arch): Remove.\n+\t(avr_arch_types): New.\n+\t(avr_mcu_types): Update.\n+\t(avr_override_options): Use avr_arch_types table instead of switch.\n+\t* avr.h (CPP_PREDEFINES): Die.\n+\t(avr_base_arch_macro, avr_extra_arch_macro): New.\n+\t(TARGET_CPU_CPP_BUILTINS): New.\n+\t(CPP_SPEC, EXTRA_SPECS): Simplify.\n+\t(CPP_AVR1_SPEC, CPP_AVR2_SPEC, CPP_AVR3_SPEC, CPP_AVR4_SPEC,\n+\tCPP_AVR5_SPEC): Die.\n+\n 2002-05-29  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config/arm/netbsd.h (TARGET_OS_CPP_BUILTINS): Use"}, {"sha": "5d34a49c8f98837ad3b5719373c4b012b3b20ce7", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 72, "deletions": 62, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c392e657cf0238be5bcbd7e021a893ecafbc29/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c392e657cf0238be5bcbd7e021a893ecafbc29/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=92c392e657cf0238be5bcbd7e021a893ecafbc29", "patch": "@@ -108,26 +108,40 @@ const char *avr_init_stack = \"__stack\";\n /* Default MCU name */\n const char *avr_mcu_name = \"avr2\";\n \n+/* Preprocessor macros to define depending on MCU type.  */\n+const char *avr_base_arch_macro;\n+const char *avr_extra_arch_macro;\n+\n /* More than 8K of program memory: use \"call\" and \"jmp\".  */\n int avr_mega_p = 0;\n \n /* Enhanced core: use \"movw\", \"mul\", ...  */\n int avr_enhanced_p = 0;\n \n /* Assembler only.  */\n-static int avr_asm_only_p = 0;\n-\n-enum avr_arch {\n-  AVR1 = 1,\n-  AVR2,\n-  AVR3,\n-  AVR4,\n-  AVR5\n+int avr_asm_only_p = 0;\n+\n+struct base_arch_s {\n+  int asm_only;\n+  int enhanced;\n+  int mega;\n+  const char *const macro;\n+};\n+\n+static const struct base_arch_s avr_arch_types[] = {\n+  { 1, 0, 0, NULL },  /* unknown device specified */\n+  { 1, 0, 0, \"__AVR_ARCH__=1\" },\n+  { 0, 0, 0, \"__AVR_ARCH__=2\" },\n+  { 0, 0, 1, \"__AVR_ARCH__=3\" },\n+  { 0, 1, 0, \"__AVR_ARCH__=4\" },\n+  { 0, 1, 1, \"__AVR_ARCH__=5\" }\n };\n \n struct mcu_type_s {\n   const char *const name;\n-  const enum avr_arch arch;\n+  int arch;  /* index in avr_arch_types[] */\n+  /* Must lie outside user's namespace.  NULL == no macro.  */\n+  const char *const macro;\n };\n \n /* List of all known AVR MCU types - if updated, it has to be kept\n@@ -140,52 +154,52 @@ struct mcu_type_s {\n \n static const struct mcu_type_s avr_mcu_types[] = {\n     /* Classic, <= 8K.  */\n-  { \"avr2\",      AVR2 },\n-  { \"at90s2313\", AVR2 },\n-  { \"at90s2323\", AVR2 },\n-  { \"at90s2333\", AVR2 },\n-  { \"at90s2343\", AVR2 },\n-  { \"attiny22\",  AVR2 },\n-  { \"attiny26\",  AVR2 },\n-  { \"at90s4414\", AVR2 },\n-  { \"at90s4433\", AVR2 },\n-  { \"at90s4434\", AVR2 },\n-  { \"at90s8515\", AVR2 },\n-  { \"at90c8534\", AVR2 },\n-  { \"at90s8535\", AVR2 },\n+  { \"avr2\",      2, NULL },\n+  { \"at90s2313\", 2, \"__AVR_AT90S2313__\" },\n+  { \"at90s2323\", 2, \"__AVR_AT90S2323__\" },\n+  { \"at90s2333\", 2, \"__AVR_AT90S2333__\" },\n+  { \"at90s2343\", 2, \"__AVR_AT90S2343__\" },\n+  { \"attiny22\",  2, \"__AVR_ATtiny22__\" },\n+  { \"attiny26\",  2, \"__AVR_ATtiny26__\" },\n+  { \"at90s4414\", 2, \"__AVR_AT90S4414__\" },\n+  { \"at90s4433\", 2, \"__AVR_AT90S4433__\" },\n+  { \"at90s4434\", 2, \"__AVR_AT90S4434__\" },\n+  { \"at90s8515\", 2, \"__AVR_AT90S8515__\" },\n+  { \"at90c8534\", 2, \"__AVR_AT90C8534__\" },\n+  { \"at90s8535\", 2, \"__AVR_AT90S8535__\" },\n     /* Classic, > 8K.  */\n-  { \"avr3\",      AVR3 },\n-  { \"atmega103\", AVR3 },\n-  { \"atmega603\", AVR3 },\n-  { \"at43usb320\", AVR3 },\n-  { \"at43usb355\", AVR3 },\n-  { \"at76c711\",  AVR3 },\n+  { \"avr3\",      3, NULL },\n+  { \"atmega103\", 3, \"__AVR_ATmega603__\" },\n+  { \"atmega603\", 3, \"__AVR_ATmega103__\" },\n+  { \"at43usb320\", 3, \"__AVR_AT43USB320__\" },\n+  { \"at43usb355\", 3, \"__AVR_AT43USB355__\" },\n+  { \"at76c711\",  3, \"__AVR_AT76C711__\" },\n     /* Enhanced, <= 8K.  */\n-  { \"avr4\",      AVR4 },\n-  { \"atmega8\",   AVR4 },\n-  { \"atmega83\",  AVR4 },\n-  { \"atmega85\",  AVR4 },\n-  { \"atmega8515\", AVR4 },\n+  { \"avr4\",      4, NULL },\n+  { \"atmega8\",   4, \"__AVR_ATmega8__\" },\n+  { \"atmega83\",  4, \"__AVR_ATmega83__\" },\n+  { \"atmega85\",  4, \"__AVR_ATmega85__\" },\n+  { \"atmega8515\", 4, \"__AVR_ATmega8515__\" },\n     /* Enhanced, > 8K.  */\n-  { \"avr5\",      AVR5 },\n-  { \"atmega16\",  AVR5 },\n-  { \"atmega161\", AVR5 },\n-  { \"atmega162\", AVR5 },\n-  { \"atmega163\", AVR5 },\n-  { \"atmega32\",  AVR5 },\n-  { \"atmega323\", AVR5 },\n-  { \"atmega64\",  AVR5 },\n-  { \"atmega128\", AVR5 },\n-  { \"at94k\",     AVR5 },\n+  { \"avr5\",      5, NULL },\n+  { \"atmega16\",  5, \"__AVR_ATmega16__\" },\n+  { \"atmega161\", 5, \"__AVR_ATmega161__\" },\n+  { \"atmega162\", 5, \"__AVR_ATmega162__\" },\n+  { \"atmega163\", 5, \"__AVR_ATmega163__\" },\n+  { \"atmega32\",  5, \"__AVR_ATmega32__\" },\n+  { \"atmega323\", 5, \"__AVR_ATmega323__\" },\n+  { \"atmega64\",  5, \"__AVR_ATmega64__\" },\n+  { \"atmega128\", 5, \"__AVR_ATmega128__\" },\n+  { \"at94k\",     5, \"__AVR_AT94K__\" },\n     /* Assembler only.  */\n-  { \"avr1\",      AVR1 },\n-  { \"at90s1200\", AVR1 },\n-  { \"attiny10\",  AVR1 },\n-  { \"attiny11\",  AVR1 },\n-  { \"attiny12\",  AVR1 },\n-  { \"attiny15\",  AVR1 },\n-  { \"attiny28\",  AVR1 },\n-  { NULL, 0 }\n+  { \"avr1\",      1, NULL },\n+  { \"at90s1200\", 1, \"__AVR_AT90S1200__\" },\n+  { \"attiny10\",  1, \"__AVR_ATtiny11__\" }, /* Yes, tiny11.  */\n+  { \"attiny11\",  1, \"__AVR_ATtiny11__\" },\n+  { \"attiny12\",  1, \"__AVR_ATtiny12__\" },\n+  { \"attiny15\",  1, \"__AVR_ATtiny15__\" },\n+  { \"attiny28\",  1, \"__AVR_ATtiny28__\" },\n+  { NULL,        0, NULL }\n };\n \n int avr_case_values_threshold = 30000;\n@@ -213,6 +227,7 @@ void\n avr_override_options ()\n {\n   const struct mcu_type_s *t;\n+  const struct base_arch_s *base;\n \n   for (t = avr_mcu_types; t->name; t++)\n     if (strcmp (t->name, avr_mcu_name) == 0)\n@@ -226,17 +241,12 @@ avr_override_options ()\n \tfprintf (stderr,\"   %s\\n\", t->name);\n     }\n \n-  switch (t->arch)\n-    {\n-    case AVR1:\n-    default:\n-      avr_asm_only_p = 1;\n-      /* ... fall through ... */\n-    case AVR2: avr_enhanced_p = 0; avr_mega_p = 0; break;\n-    case AVR3: avr_enhanced_p = 0; avr_mega_p = 1; break;\n-    case AVR4: avr_enhanced_p = 1; avr_mega_p = 0; break;\n-    case AVR5: avr_enhanced_p = 1; avr_mega_p = 1; break;\n-    }\n+  base = &avr_arch_types[t->arch];\n+  avr_asm_only_p = base->asm_only;\n+  avr_enhanced_p = base->enhanced;\n+  avr_mega_p = base->mega;\n+  avr_base_arch_macro = base->macro;\n+  avr_extra_arch_macro = t->macro;\n \n   if (optimize && !TARGET_NO_TABLEJUMP)\n     avr_case_values_threshold = (!AVR_MEGA || TARGET_CALL_PROLOGUES) ? 8 : 17;"}, {"sha": "22843ec1e84e0e3d689007700e2be89e6b3c6e7b", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 31, "deletions": 104, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c392e657cf0238be5bcbd7e021a893ecafbc29/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c392e657cf0238be5bcbd7e021a893ecafbc29/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=92c392e657cf0238be5bcbd7e021a893ecafbc29", "patch": "@@ -22,8 +22,28 @@ Boston, MA 02111-1307, USA.  */\n \n /* Names to predefine in the preprocessor for this target machine. */\n \n-#define CPP_PREDEFINES \"-DAVR\"\n-\n+#define TARGET_CPU_CPP_BUILTINS() \t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      builtin_define_std (\"AVR\");\t\t\\\n+      if (avr_base_arch_macro)\t\t\t\\\n+\tbuiltin_define (avr_base_arch_macro);\t\\\n+      if (avr_extra_arch_macro)\t\t\t\\\n+\tbuiltin_define (avr_extra_arch_macro);\t\\\n+      if (avr_asm_only_p)\t\t\t\\\n+\tbuiltin_define (\"__AVR_ASM_ONLY__\");\t\\\n+      if (avr_enhanced_p)\t\t\t\\\n+\tbuiltin_define (\"__AVR_ENHANCED__\");\t\\\n+      if (avr_mega_p)\t\t\t\t\\\n+\tbuiltin_define (\"__AVR_MEGA__\");\t\\\n+      if (TARGET_NO_INTERRUPTS)\t\t\t\\\n+\tbuiltin_define (\"__NO_INTERRUPTS__\");\t\\\n+      if (TARGET_INT8)\t\t\t\t\\\n+\tbuiltin_define (\"__INT_MAX__=127\");\t\\\n+      else\t\t\t\t\t\\\n+\tbuiltin_define (\"__INT_MAX__=32767\");\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n \n /* This declaration should be present. */\n extern int target_flags;\n@@ -54,9 +74,6 @@ extern int target_flags;\n #define TARGET_RTL_DUMP\t\t(target_flags & MASK_RTL_DUMP)\n #define TARGET_ALL_DEBUG \t(target_flags & MASK_ALL_DEBUG)\n \n-\n-\n-\n #define TARGET_SWITCHES {\t\t\t\t\t\t\\\n   { \"order1\", MASK_ORDER_1, NULL },\t\t\t\t\t\\\n   { \"order2\", MASK_ORDER_2, NULL },\t\t\t\t\t\\\n@@ -77,8 +94,12 @@ extern int target_flags;\n \n extern const char *avr_init_stack;\n extern const char *avr_mcu_name;\n+\n+extern const char *avr_base_arch_macro;\n+extern const char *avr_extra_arch_macro;\n extern int avr_mega_p;\n extern int avr_enhanced_p;\n+extern int avr_asm_only_p;\n \n #define AVR_MEGA (avr_mega_p)\n #define AVR_ENHANCED (avr_enhanced_p)\n@@ -2513,51 +2534,8 @@ extern int avr_case_values_threshold;\n    (and ANSI C) library functions `memcpy' and `memset' rather than\n    the BSD functions `bcopy' and `bzero'.  */\n \n-#define CPP_SPEC \"\\\n-%{!mmcu*|mmcu=avr2:%(cpp_avr2)} \\\n-%{mmcu=at90s2313:%(cpp_avr2) -D__AVR_AT90S2313__} \\\n-%{mmcu=at90s2323:%(cpp_avr2) -D__AVR_AT90S2323__} \\\n-%{mmcu=at90s2333:%(cpp_avr2) -D__AVR_AT90S2333__} \\\n-%{mmcu=at90s2343:%(cpp_avr2) -D__AVR_AT90S2343__} \\\n-%{mmcu=attiny22: %(cpp_avr2) -D__AVR_ATtiny22__} \\\n-%{mmcu=attiny26: %(cpp_avr2) -D__AVR_ATtiny26__} \\\n-%{mmcu=at90s4433:%(cpp_avr2) -D__AVR_AT90S4433__} \\\n-%{mmcu=at90s4414:%(cpp_avr2) -D__AVR_AT90S4414__} \\\n-%{mmcu=at90s4434:%(cpp_avr2) -D__AVR_AT90S4434__} \\\n-%{mmcu=at90s8515:%(cpp_avr2) -D__AVR_AT90S8515__} \\\n-%{mmcu=at90s8535:%(cpp_avr2) -D__AVR_AT90S8535__} \\\n-%{mmcu=at90c8534:%(cpp_avr2) -D__AVR_AT90C8534__} \\\n-%{mmcu=avr3:%(cpp_avr3)} \\\n-%{mmcu=atmega603:%(cpp_avr3) -D__AVR_ATmega603__} \\\n-%{mmcu=atmega103:%(cpp_avr3) -D__AVR_ATmega103__} \\\n-%{mmcu=at43usb320:%(cpp_avr3) -D__AVR_AT43USB320__} \\\n-%{mmcu=at43usb355:%(cpp_avr3) -D__AVR_AT43USB355__} \\\n-%{mmcu=at76c711: %(cpp_avr3) -D__AVR_AT76C711__} \\\n-%{mmcu=avr4:%(cpp_avr4)} \\\n-%{mmcu=atmega8:  %(cpp_avr4) -D__AVR_ATmega8__} \\\n-%{mmcu=atmega83: %(cpp_avr4) -D__AVR_ATmega83__} \\\n-%{mmcu=atmega85: %(cpp_avr4) -D__AVR_ATmega85__} \\\n-%{mmcu=atmega8515: %(cpp_avr4) -D__AVR_ATmega8515__} \\\n-%{mmcu=avr5:%(cpp_avr5)} \\\n-%{mmcu=atmega16: %(cpp_avr5) -D__AVR_ATmega16__} \\\n-%{mmcu=atmega161:%(cpp_avr5) -D__AVR_ATmega161__} \\\n-%{mmcu=atmega162:%(cpp_avr5) -D__AVR_ATmega162__} \\\n-%{mmcu=atmega163:%(cpp_avr5) -D__AVR_ATmega163__} \\\n-%{mmcu=atmega32: %(cpp_avr5) -D__AVR_ATmega32__} \\\n-%{mmcu=atmega323:%(cpp_avr5) -D__AVR_ATmega323__} \\\n-%{mmcu=atmega64: %(cpp_avr5) -D__AVR_ATmega64__} \\\n-%{mmcu=atmega128:%(cpp_avr5) -D__AVR_ATmega128__} \\\n-%{mmcu=at94k:    %(cpp_avr5) -D__AVR_AT94K__} \\\n-%{mmcu=avr1:%(cpp_avr1)} \\\n-%{mmcu=at90s1200:%(cpp_avr1) -D__AVR_AT90S1200__} \\\n-%{mmcu=attiny10|mmcu=attiny11: %(cpp_avr1) -D__AVR_ATtiny11__} \\\n-%{mmcu=attiny12: %(cpp_avr1) -D__AVR_ATtiny12__} \\\n-%{mmcu=attiny15: %(cpp_avr1) -D__AVR_ATtiny15__} \\\n-%{mmcu=attiny28: %(cpp_avr1) -D__AVR_ATtiny28__} \\\n-%{mno-interrupts:-D__NO_INTERRUPTS__} \\\n-%{mint8:-D__INT_MAX__=127} \\\n-%{!mint*:-D__INT_MAX__=32767} \\\n-%{posix:-D_POSIX_SOURCE}\"\n+#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n+\n /* A C string constant that tells the GNU CC driver program options to\n    pass to CPP.  It can also specify how to translate options you\n    give to GNU CC into options for GNU CC to pass to the CPP.\n@@ -2700,62 +2678,11 @@ extern int avr_case_values_threshold;\n %{mmcu=atmega128:crtm128.o%s} \\\n %{mmcu=at94k:crtat94k.o%s}\"\n \n-#define CPP_AVR1_SPEC \"-D__AVR_ARCH__=1 -D__AVR_ASM_ONLY__ \"\n-#define CPP_AVR2_SPEC \"-D__AVR_ARCH__=2 \"\n-#define CPP_AVR3_SPEC \"-D__AVR_ARCH__=3 -D__AVR_MEGA__ \"\n-#define CPP_AVR4_SPEC \"-D__AVR_ARCH__=4 -D__AVR_ENHANCED__ \"\n-#define CPP_AVR5_SPEC \"-D__AVR_ARCH__=5 -D__AVR_ENHANCED__ -D__AVR_MEGA__ \"\n-\n-#define EXTRA_SPECS                           \\\n-{\"cpp_avr1\", CPP_AVR1_SPEC},                  \\\n-{\"cpp_avr2\", CPP_AVR2_SPEC},                  \\\n-{\"cpp_avr3\", CPP_AVR3_SPEC},                  \\\n-{\"cpp_avr4\", CPP_AVR4_SPEC},                  \\\n-{\"cpp_avr5\", CPP_AVR5_SPEC},                  \\\n-{\"crt_binutils\", CRT_BINUTILS_SPECS},\n+#define EXTRA_SPECS {\"crt_binutils\", CRT_BINUTILS_SPECS},\n+\n /* Define this macro to provide additional specifications to put in\n    the `specs' file that can be used in various specifications like\n-   `CC1_SPEC'.\n-\n-   The definition should be an initializer for an array of structures,\n-   containing a string constant, that defines the specification name,\n-   and a string constant that provides the specification.\n-\n-   Do not define this macro if it does not need to do anything.\n-\n-   `EXTRA_SPECS' is useful when an architecture contains several\n-   related targets, which have various `..._SPECS' which are similar\n-   to each other, and the maintainer would like one central place to\n-   keep these definitions.\n-\n-   For example, the PowerPC System V.4 targets use `EXTRA_SPECS' to\n-   define either `_CALL_SYSV' when the System V calling sequence is\n-   used or `_CALL_AIX' when the older AIX-based calling sequence is\n-   used.\n-\n-   The `config/rs6000/rs6000.h' target file defines:\n-\n-   #define EXTRA_SPECS \\\n-   { \"cpp_sysv_default\", CPP_SYSV_DEFAULT },\n-\n-   #define CPP_SYS_DEFAULT \"\"\n-\n-   The `config/rs6000/sysv.h' target file defines:\n-   #undef CPP_SPEC\n-   #define CPP_SPEC \\\n-   \"%{posix: -D_POSIX_SOURCE } \\\n-   %{mcall-sysv: -D_CALL_SYSV } %{mcall-aix: -D_CALL_AIX } \\\n-   %{!mcall-sysv: %{!mcall-aix: %(cpp_sysv_default) }} \\\n-   %{msoft-float: -D_SOFT_FLOAT} %{mcpu=403: -D_SOFT_FLOAT}\"\n-\n-   #undef CPP_SYSV_DEFAULT\n-   #define CPP_SYSV_DEFAULT \"-D_CALL_SYSV\"\n-\n-   while the `config/rs6000/eabiaix.h' target file defines\n-   `CPP_SYSV_DEFAULT' as:\n-\n-   #undef CPP_SYSV_DEFAULT\n-   #define CPP_SYSV_DEFAULT \"-D_CALL_AIX\"  */\n+   `CC1_SPEC'.  */\n \n /* This is the default without any -mmcu=* option (AT90S*).  */\n #define MULTILIB_DEFAULTS { \"mmcu=avr2\" }"}]}