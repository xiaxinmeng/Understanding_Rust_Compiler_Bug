{"sha": "0a915e3d7a94aae8a572f3f7a631269980250050", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE5MTVlM2Q3YTk0YWFlOGE1NzJmM2Y3YTYzMTI2OTk4MDI1MDA1MA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-01-12T00:05:55Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-01-12T00:05:55Z"}, "message": "re PR tree-optimization/17949 (Tree loop optimization generates unaligned access (STRICT_ALIGNMENT is set))\n\n\tPR tree-optimization/17949\n\t* tree-ssa-loop-ivopts.c (may_be_unaligned_p): New function.\n\t(find_interesting_uses_address): Use it.\n\nFrom-SVN: r93209", "tree": {"sha": "b73b45d4e9db23918f55c23b3446e4237574ffd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b73b45d4e9db23918f55c23b3446e4237574ffd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a915e3d7a94aae8a572f3f7a631269980250050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a915e3d7a94aae8a572f3f7a631269980250050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a915e3d7a94aae8a572f3f7a631269980250050", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a915e3d7a94aae8a572f3f7a631269980250050/comments", "author": null, "committer": null, "parents": [{"sha": "78593d78f1800fcdf5d274e7eef51ed6ca379716", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78593d78f1800fcdf5d274e7eef51ed6ca379716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78593d78f1800fcdf5d274e7eef51ed6ca379716"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "20f5d2f9aeece432c672e4826c69d8f4fc3a4053", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a915e3d7a94aae8a572f3f7a631269980250050/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a915e3d7a94aae8a572f3f7a631269980250050/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a915e3d7a94aae8a572f3f7a631269980250050", "patch": "@@ -1,3 +1,9 @@\n+2005-01-11  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/17949\n+\t* tree-ssa-loop-ivopts.c (may_be_unaligned_p): New function.\n+\t(find_interesting_uses_address): Use it.\n+\n 2005-01-11  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* regrename.c (kill_value): Handle subreg's that won't simplify."}, {"sha": "475f45eb8f42441527f50d3fb40d90fe5a505bd2", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a915e3d7a94aae8a572f3f7a631269980250050/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a915e3d7a94aae8a572f3f7a631269980250050/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=0a915e3d7a94aae8a572f3f7a631269980250050", "patch": "@@ -1400,6 +1400,37 @@ idx_record_use (tree base, tree *idx,\n   return true;\n }\n \n+/* Returns true if memory reference REF may be unaligned.  */\n+\n+static bool\n+may_be_unaligned_p (tree ref)\n+{\n+  tree base;\n+  tree base_type;\n+  HOST_WIDE_INT bitsize;\n+  HOST_WIDE_INT bitpos;\n+  tree toffset;\n+  enum machine_mode mode;\n+  int unsignedp, volatilep;\n+  unsigned base_align;\n+\n+  /* The test below is basically copy of what expr.c:normal_inner_ref\n+     does to check whether the object must be loaded by parts when\n+     STRICT_ALIGNMENT is true.  */\n+  base = get_inner_reference (ref, &bitsize, &bitpos, &toffset, &mode,\n+\t\t\t      &unsignedp, &volatilep, true);\n+  base_type = TREE_TYPE (base);\n+  base_align = TYPE_ALIGN (base_type);\n+\n+  if (mode != BLKmode\n+      && (base_align < GET_MODE_ALIGNMENT (mode)\n+\t  || bitpos % GET_MODE_ALIGNMENT (mode) != 0\n+\t  || bitpos % BITS_PER_UNIT != 0))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Finds addresses in *OP_P inside STMT.  */\n \n static void\n@@ -1415,6 +1446,10 @@ find_interesting_uses_address (struct ivopts_data *data, tree stmt, tree *op_p)\n       && DECL_NONADDRESSABLE_P (TREE_OPERAND (base, 1)))\n     goto fail;\n \n+  if (STRICT_ALIGNMENT\n+      && may_be_unaligned_p (base))\n+    goto fail;\n+\n   ifs_ivopts_data.ivopts_data = data;\n   ifs_ivopts_data.stmt = stmt;\n   ifs_ivopts_data.step_p = &step;"}]}