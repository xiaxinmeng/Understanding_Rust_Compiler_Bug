{"sha": "53f2aaf0b3c322e65d014ad2203a706bc8b26b8f", "node_id": "C_kwDOANBUbNoAKDUzZjJhYWYwYjNjMzIyZTY1ZDAxNGFkMjIwM2E3MDZiYzhiMjZiOGY", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-01-18T20:24:32Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-10T08:19:22Z"}, "message": "[Ada] Avoid repeated conversions from Int to Char_Code\n\nWhen expanding aggregates like \"(others => 'x')\" into strings we\nrepeated conversion from Int to Char_Code for every character.  Now we\nconvert once and use the Char_Code directly.\n\nCleanup related to handling characters in GNATprove counterexamples;\nsemantics is unaffected.\n\ngcc/ada/\n\n\t* exp_aggr.adb (Expand_N_Aggregate): Replace UI_To_Int with\n\tUI_To_CC; replace magic literals with high-level routines that\n\trecognise wide and wide wide characters; reorder if-then-elsif\n\tcondition, because we don't have a routine to detect wide wide\n\tcharacters.", "tree": {"sha": "d2c68c8f27fd72d26227af1e5901bbf3e3dd8a82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2c68c8f27fd72d26227af1e5901bbf3e3dd8a82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53f2aaf0b3c322e65d014ad2203a706bc8b26b8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f2aaf0b3c322e65d014ad2203a706bc8b26b8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53f2aaf0b3c322e65d014ad2203a706bc8b26b8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f2aaf0b3c322e65d014ad2203a706bc8b26b8f/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ad8cac47099983e9b24103e8327bc2518044877", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad8cac47099983e9b24103e8327bc2518044877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ad8cac47099983e9b24103e8327bc2518044877"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "939d091e065defc2e5e1ee381d61ee6cd17a491f", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f2aaf0b3c322e65d014ad2203a706bc8b26b8f/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f2aaf0b3c322e65d014ad2203a706bc8b26b8f/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=53f2aaf0b3c322e65d014ad2203a706bc8b26b8f", "patch": "@@ -7161,10 +7161,10 @@ package body Exp_Aggr is\n                  and then No (Expressions (N))\n                then\n                   declare\n-                     X  : constant Node_Id := First_Index (T);\n-                     EC : constant Node_Id := Expression (CA);\n-                     CV : constant Uint    := Char_Literal_Value (EC);\n-                     CC : constant Int     := UI_To_Int (CV);\n+                     X  : constant Node_Id   := First_Index (T);\n+                     EC : constant Node_Id   := Expression (CA);\n+                     CV : constant Uint      := Char_Literal_Value (EC);\n+                     CC : constant Char_Code := UI_To_CC (CV);\n \n                   begin\n                      if Nkind (X) = N_Range\n@@ -7180,17 +7180,19 @@ package body Exp_Aggr is\n                               Start_String;\n \n                               for J in 1 .. UI_To_Int (Hi) loop\n-                                 Store_String_Char (Char_Code (CC));\n+                                 Store_String_Char (CC);\n                               end loop;\n \n                               Rewrite (N,\n                                 Make_String_Literal (Sloc (N),\n                                   Strval => End_String));\n \n-                              if CC >= Int (2 ** 16) then\n-                                 Set_Has_Wide_Wide_Character (N);\n-                              elsif CC >= Int (2 ** 8) then\n+                              if In_Character_Range (CC) then\n+                                 null;\n+                              elsif In_Wide_Character_Range (CC) then\n                                  Set_Has_Wide_Character (N);\n+                              else\n+                                 Set_Has_Wide_Wide_Character (N);\n                               end if;\n \n                               Analyze_And_Resolve (N, T);"}]}