{"sha": "4c50b2212d92f84945a39df321f0eb10dedf98c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM1MGIyMjEyZDkyZjg0OTQ1YTM5ZGYzMjFmMGViMTBkZWRmOThjNw==", "commit": {"author": {"name": "Jan Kratochvil", "email": "jan.kratochvil@redhat.com", "date": "2015-06-02T07:37:22Z"}, "committer": {"name": "Jan Kratochvil", "email": "jkratoch@gcc.gnu.org", "date": "2015-06-02T07:37:22Z"}, "message": "re PR other/65366 (gdbhooks.py is incompatible with Python3)\n\n\tPR other/65366\n\t* gdbhooks.py: Use int(...) instead of long(...).  Use print(...)\n\tinstead of print ... .\n\nFrom-SVN: r224012", "tree": {"sha": "b508da888936fbdee0f3dacc12164dc9e92bbbac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b508da888936fbdee0f3dacc12164dc9e92bbbac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c50b2212d92f84945a39df321f0eb10dedf98c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c50b2212d92f84945a39df321f0eb10dedf98c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c50b2212d92f84945a39df321f0eb10dedf98c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c50b2212d92f84945a39df321f0eb10dedf98c7/comments", "author": {"login": "jankratochvil", "id": 1223939, "node_id": "MDQ6VXNlcjEyMjM5Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1223939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jankratochvil", "html_url": "https://github.com/jankratochvil", "followers_url": "https://api.github.com/users/jankratochvil/followers", "following_url": "https://api.github.com/users/jankratochvil/following{/other_user}", "gists_url": "https://api.github.com/users/jankratochvil/gists{/gist_id}", "starred_url": "https://api.github.com/users/jankratochvil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jankratochvil/subscriptions", "organizations_url": "https://api.github.com/users/jankratochvil/orgs", "repos_url": "https://api.github.com/users/jankratochvil/repos", "events_url": "https://api.github.com/users/jankratochvil/events{/privacy}", "received_events_url": "https://api.github.com/users/jankratochvil/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae2bb6daf3a27388090dda644b6993bccd636d67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2bb6daf3a27388090dda644b6993bccd636d67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae2bb6daf3a27388090dda644b6993bccd636d67"}], "stats": {"total": 70, "additions": 38, "deletions": 32}, "files": [{"sha": "b88973708a0f83387907165183e5dd6891704698", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c50b2212d92f84945a39df321f0eb10dedf98c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c50b2212d92f84945a39df321f0eb10dedf98c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c50b2212d92f84945a39df321f0eb10dedf98c7", "patch": "@@ -1,3 +1,9 @@\n+2015-06-02  Jan Kratochvil  <jan.kratochvil@redhat.com>\n+\n+\tPR other/65366\n+\t* gdbhooks.py: Use int(...) instead of long(...).  Use print(...)\n+\tinstead of print ... .\n+\n 2015-06-02  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/vsx.md (vsx_extract_v4sf): Revert accidental"}, {"sha": "20842bbc940625aa8cc593055a253542c0888602", "filename": "gcc/gdbhooks.py", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c50b2212d92f84945a39df321f0eb10dedf98c7/gcc%2Fgdbhooks.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c50b2212d92f84945a39df321f0eb10dedf98c7/gcc%2Fgdbhooks.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgdbhooks.py?ref=4c50b2212d92f84945a39df321f0eb10dedf98c7", "patch": "@@ -158,7 +158,7 @@ def __init__(self, gdbval):\n         self.gdbval = gdbval\n \n     def is_nonnull(self):\n-        return long(self.gdbval)\n+        return int(self.gdbval)\n \n     def TREE_CODE(self):\n         \"\"\"\n@@ -197,7 +197,7 @@ def to_string (self):\n         # like gcc/print-tree.c:print_node_brief\n         # #define TREE_CODE(NODE) ((enum tree_code) (NODE)->base.code)\n         # tree_code_name[(int) TREE_CODE (node)])\n-        if long(self.gdbval) == 0:\n+        if int(self.gdbval) == 0:\n             return '<tree 0x0>'\n \n         val_TREE_CODE = self.node.TREE_CODE()\n@@ -209,17 +209,17 @@ def to_string (self):\n         val_tclass = val_tree_code_type[val_TREE_CODE]\n \n         val_tree_code_name = gdb.parse_and_eval('tree_code_name')\n-        val_code_name = val_tree_code_name[long(val_TREE_CODE)]\n-        #print val_code_name.string()\n+        val_code_name = val_tree_code_name[int(val_TREE_CODE)]\n+        #print(val_code_name.string())\n \n-        result = '<%s 0x%x' % (val_code_name.string(), long(self.gdbval))\n-        if long(val_tclass) == tcc_declaration:\n+        result = '<%s 0x%x' % (val_code_name.string(), int(self.gdbval))\n+        if int(val_tclass) == tcc_declaration:\n             tree_DECL_NAME = self.node.DECL_NAME()\n             if tree_DECL_NAME.is_nonnull():\n                  result += ' %s' % tree_DECL_NAME.IDENTIFIER_POINTER()\n             else:\n                 pass # TODO: labels etc\n-        elif long(val_tclass) == tcc_type:\n+        elif int(val_tclass) == tcc_type:\n             tree_TYPE_NAME = Tree(self.gdbval['type_common']['name'])\n             if tree_TYPE_NAME.is_nonnull():\n                 if tree_TYPE_NAME.TREE_CODE() == IDENTIFIER_NODE:\n@@ -242,8 +242,8 @@ def __init__(self, gdbval):\n         self.gdbval = gdbval\n \n     def to_string (self):\n-        result = '<cgraph_node* 0x%x' % long(self.gdbval)\n-        if long(self.gdbval):\n+        result = '<cgraph_node* 0x%x' % int(self.gdbval)\n+        if int(self.gdbval):\n             # symtab_node::name calls lang_hooks.decl_printable_name\n             # default implementation (lhd_decl_printable_name) is:\n             #    return IDENTIFIER_POINTER (DECL_NAME (decl));\n@@ -261,12 +261,12 @@ def __init__(self, gdbval):\n         self.gdbval = gdbval\n \n     def to_string (self):\n-        if long(self.gdbval) == 0:\n+        if int(self.gdbval) == 0:\n             return '<dw_die_ref 0x0>'\n-        result = '<dw_die_ref 0x%x' % long(self.gdbval)\n+        result = '<dw_die_ref 0x%x' % int(self.gdbval)\n         result += ' %s' % self.gdbval['die_tag']\n-        if long(self.gdbval['die_parent']) != 0:\n-            result += ' <parent=0x%x %s>' % (long(self.gdbval['die_parent']),\n+        if int(self.gdbval['die_parent']) != 0:\n+            result += ' <parent=0x%x %s>' % (int(self.gdbval['die_parent']),\n                                              self.gdbval['die_parent']['die_tag'])\n                                              \n         result += '>'\n@@ -279,13 +279,13 @@ def __init__(self, gdbval):\n         self.gdbval = gdbval\n \n     def to_string (self):\n-        if long(self.gdbval) == 0:\n+        if int(self.gdbval) == 0:\n             return '<gimple 0x0>'\n         val_gimple_code = self.gdbval['code']\n         val_gimple_code_name = gdb.parse_and_eval('gimple_code_name')\n-        val_code_name = val_gimple_code_name[long(val_gimple_code)]\n+        val_code_name = val_gimple_code_name[int(val_gimple_code)]\n         result = '<%s 0x%x' % (val_code_name.string(),\n-                               long(self.gdbval))\n+                               int(self.gdbval))\n         result += '>'\n         return result\n \n@@ -306,9 +306,9 @@ def __init__(self, gdbval):\n         self.gdbval = gdbval\n \n     def to_string (self):\n-        result = '<basic_block 0x%x' % long(self.gdbval)\n-        if long(self.gdbval):\n-            result += ' (%s)' % bb_index_to_str(long(self.gdbval['index']))\n+        result = '<basic_block 0x%x' % int(self.gdbval)\n+        if int(self.gdbval):\n+            result += ' (%s)' % bb_index_to_str(int(self.gdbval['index']))\n         result += '>'\n         return result\n \n@@ -317,10 +317,10 @@ def __init__(self, gdbval):\n         self.gdbval = gdbval\n \n     def to_string (self):\n-        result = '<edge 0x%x' % long(self.gdbval)\n-        if long(self.gdbval):\n-            src = bb_index_to_str(long(self.gdbval['src']['index']))\n-            dest = bb_index_to_str(long(self.gdbval['dest']['index']))\n+        result = '<edge 0x%x' % int(self.gdbval)\n+        if int(self.gdbval):\n+            src = bb_index_to_str(int(self.gdbval['src']['index']))\n+            dest = bb_index_to_str(int(self.gdbval['dest']['index']))\n             result += ' (%s -> %s)' % (src, dest)\n         result += '>'\n         return result\n@@ -336,7 +336,7 @@ def GET_CODE(self):\n \n def GET_RTX_LENGTH(code):\n     val_rtx_length = gdb.parse_and_eval('rtx_length')\n-    return long(val_rtx_length[code])\n+    return int(val_rtx_length[code])\n \n def GET_RTX_NAME(code):\n     val_rtx_name = gdb.parse_and_eval('rtx_name')\n@@ -359,17 +359,17 @@ def to_string (self):\n         \"\"\"\n         # We use print_inline_rtx to avoid a trailing newline\n         gdb.execute('call print_inline_rtx (stderr, (const_rtx) %s, 0)'\n-                    % long(self.gdbval))\n+                    % int(self.gdbval))\n         return ''\n \n         # or by hand; based on gcc/print-rtl.c:print_rtx\n         result = ('<rtx_def 0x%x'\n-                  % (long(self.gdbval)))\n+                  % (int(self.gdbval)))\n         code = self.rtx.GET_CODE()\n         result += ' (%s' % GET_RTX_NAME(code)\n         format_ = GET_RTX_FORMAT(code)\n         for i in range(GET_RTX_LENGTH(code)):\n-            print format_[i]\n+            print(format_[i])\n         result += ')>'\n         return result\n \n@@ -380,11 +380,11 @@ def __init__(self, gdbval):\n         self.gdbval = gdbval\n \n     def to_string (self):\n-        result = '<opt_pass* 0x%x' % long(self.gdbval)\n-        if long(self.gdbval):\n+        result = '<opt_pass* 0x%x' % int(self.gdbval)\n+        if int(self.gdbval):\n             result += (' \"%s\"(%i)'\n                        % (self.gdbval['name'].string(),\n-                          long(self.gdbval['static_pass_number'])))\n+                          int(self.gdbval['static_pass_number'])))\n         result += '>'\n         return result\n \n@@ -401,10 +401,10 @@ def display_hint (self):\n     def to_string (self):\n         # A trivial implementation; prettyprinting the contents is done\n         # by gdb calling the \"children\" method below.\n-        return '0x%x' % long(self.gdbval)\n+        return '0x%x' % int(self.gdbval)\n \n     def children (self):\n-        if long(self.gdbval) == 0:\n+        if int(self.gdbval) == 0:\n             return\n         m_vecpfx = self.gdbval['m_vecpfx']\n         m_num = m_vecpfx['m_num']"}]}