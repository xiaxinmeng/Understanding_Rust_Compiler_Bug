{"sha": "9325973e950abdec507306238a253d2c6029a0c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMyNTk3M2U5NTBhYmRlYzUwNzMwNjIzOGEyNTNkMmM2MDI5YTBjNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-05-12T23:52:37Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-05-12T23:52:37Z"}, "message": "function.c (instantiate_virtual_regs_in_insn): Do not simplify addition to move unless dest is a register.\n\n        * function.c (instantiate_virtual_regs_in_insn): Do not simplify\n        addition to move unless dest is a register.  Do not skip\n        instantiation in dest on addition simplification.\n\nFrom-SVN: r99637", "tree": {"sha": "70c14f666232110ced2ed02e6c5a232fbed22b2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70c14f666232110ced2ed02e6c5a232fbed22b2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9325973e950abdec507306238a253d2c6029a0c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9325973e950abdec507306238a253d2c6029a0c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9325973e950abdec507306238a253d2c6029a0c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9325973e950abdec507306238a253d2c6029a0c6/comments", "author": null, "committer": null, "parents": [{"sha": "8fd1590ca61628b3e9598b51851a1b1e7a8fca7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd1590ca61628b3e9598b51851a1b1e7a8fca7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd1590ca61628b3e9598b51851a1b1e7a8fca7f"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "4ad9bb4e6016462cfffd2859dabbb8b06a5e35db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9325973e950abdec507306238a253d2c6029a0c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9325973e950abdec507306238a253d2c6029a0c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9325973e950abdec507306238a253d2c6029a0c6", "patch": "@@ -1,3 +1,9 @@\n+2005-05-13  Richard Henderson  <rth@redhat.com>\n+\n+\t* function.c (instantiate_virtual_regs_in_insn): Do not simplify\n+\taddition to move unless dest is a register.  Do not skip \n+\tinstantiation in dest on addition simplification.\n+\n 2005-05-13  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.c (cris_print_operand) <case 'H'; case"}, {"sha": "2e2152da49801767912bc1841c2a8cff7c5ac531", "filename": "gcc/function.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9325973e950abdec507306238a253d2c6029a0c6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9325973e950abdec507306238a253d2c6029a0c6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=9325973e950abdec507306238a253d2c6029a0c6", "patch": "@@ -1317,7 +1317,7 @@ instantiate_virtual_regs_in_insn (rtx insn)\n {\n   HOST_WIDE_INT offset;\n   int insn_code, i;\n-  bool any_change;\n+  bool any_change = false;\n   rtx set, new, x, seq;\n \n   /* There are some special cases to be handled first.  */\n@@ -1374,6 +1374,7 @@ instantiate_virtual_regs_in_insn (rtx insn)\n \t}\n \n       extract_insn (insn);\n+      insn_code = INSN_CODE (insn);\n \n       /* Handle a plus involving a virtual register by determining if the\n \t operands remain valid if they're modified in place.  */\n@@ -1387,7 +1388,9 @@ instantiate_virtual_regs_in_insn (rtx insn)\n \t  offset += INTVAL (recog_data.operand[2]);\n \n \t  /* If the sum is zero, then replace with a plain move.  */\n-\t  if (offset == 0)\n+\t  if (offset == 0\n+\t      && REG_P (SET_DEST (set))\n+\t      && REGNO (SET_DEST (set)) > LAST_VIRTUAL_REGISTER)\n \t    {\n \t      start_sequence ();\n \t      emit_move_insn (SET_DEST (set), new);\n@@ -1400,7 +1403,6 @@ instantiate_virtual_regs_in_insn (rtx insn)\n \t    }\n \n \t  x = gen_int_mode (offset, recog_data.operand_mode[2]);\n-\t  insn_code = INSN_CODE (insn);\n \n \t  /* Using validate_change and apply_change_group here leaves\n \t     recog_data in an invalid state.  Since we know exactly what\n@@ -1411,15 +1413,17 @@ instantiate_virtual_regs_in_insn (rtx insn)\n \t      *recog_data.operand_loc[1] = recog_data.operand[1] = new;\n \t      *recog_data.operand_loc[2] = recog_data.operand[2] = x;\n \t      any_change = true;\n-\t      goto verify;\n+\n+\t      /* Fall through into the regular operand fixup loop in\n+\t\t order to take care of operands other than 1 and 2.  */\n \t    }\n \t}\n     }\n   else\n-    extract_insn (insn);\n-\n-  insn_code = INSN_CODE (insn);\n-  any_change = false;\n+    {\n+      extract_insn (insn);\n+      insn_code = INSN_CODE (insn);\n+    }\n \n   /* In the general case, we expect virtual registers to appear only in\n      operands, and then only as either bare registers or inside memories.  */\n@@ -1503,7 +1507,6 @@ instantiate_virtual_regs_in_insn (rtx insn)\n       any_change = true;\n     }\n \n- verify:\n   if (any_change)\n     {\n       /* Propagate operand changes into the duplicates.  */"}]}