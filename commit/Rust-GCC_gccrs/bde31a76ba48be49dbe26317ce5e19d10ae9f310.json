{"sha": "bde31a76ba48be49dbe26317ce5e19d10ae9f310", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRlMzFhNzZiYTQ4YmU0OWRiZTI2MzE3Y2U1ZTE5ZDEwYWU5ZjMxMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-03-11T04:53:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-03-11T20:45:39Z"}, "message": "c++: Fix ICE with concepts and aliases [PR93907].\n\nThe problem here was that we were checking satisfaction once with 'e', a\ntypedef of 'void', and another time with 'void' directly, and treated them\nas different for hashing based on the assumption that\ncanonicalize_type_argument would have already removed a typedef that wasn't\na complex dependent alias.  But that wasn't happening here, so let's add a\ncall.\n\ngcc/cp/ChangeLog\n2020-03-11  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/93907\n\t* constraint.cc (tsubst_parameter_mapping): Canonicalize type\n\targument.", "tree": {"sha": "ef6e881a0d62e8369c1a1f8d78e1ee5e36b7d182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef6e881a0d62e8369c1a1f8d78e1ee5e36b7d182"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bde31a76ba48be49dbe26317ce5e19d10ae9f310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde31a76ba48be49dbe26317ce5e19d10ae9f310", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bde31a76ba48be49dbe26317ce5e19d10ae9f310", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde31a76ba48be49dbe26317ce5e19d10ae9f310/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eb5be6ab91ec03f93038ac2bcf3028cf2e7c82b"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "8cde3000e8da083a092a11e3b15ac1af90a8c078", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde31a76ba48be49dbe26317ce5e19d10ae9f310/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde31a76ba48be49dbe26317ce5e19d10ae9f310/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bde31a76ba48be49dbe26317ce5e19d10ae9f310", "patch": "@@ -1,3 +1,9 @@\n+2020-03-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93907\n+\t* constraint.cc (tsubst_parameter_mapping): Canonicalize type\n+\targument.\n+\n 2020-03-11  Marek Polacek  <polacek@redhat.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "697ed6726b806c4cd0498eabfbaec24f57abf3cc", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde31a76ba48be49dbe26317ce5e19d10ae9f310/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde31a76ba48be49dbe26317ce5e19d10ae9f310/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=bde31a76ba48be49dbe26317ce5e19d10ae9f310", "patch": "@@ -2232,7 +2232,11 @@ tsubst_parameter_mapping (tree map, tree args, subst_info info)\n       else if (ARGUMENT_PACK_P (arg))\n \tnew_arg = tsubst_argument_pack (arg, args, complain, in_decl);\n       if (!new_arg)\n-\tnew_arg = tsubst_template_arg (arg, args, complain, in_decl);\n+\t{\n+\t  new_arg = tsubst_template_arg (arg, args, complain, in_decl);\n+\t  if (TYPE_P (new_arg))\n+\t    new_arg = canonicalize_type_argument (new_arg, complain);\n+\t}\n       if (new_arg == error_mark_node)\n \treturn error_mark_node;\n "}, {"sha": "757cdd8168a0cd985d406e2b29cb3a001f5e46b3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde31a76ba48be49dbe26317ce5e19d10ae9f310/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde31a76ba48be49dbe26317ce5e19d10ae9f310/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bde31a76ba48be49dbe26317ce5e19d10ae9f310", "patch": "@@ -7016,6 +7016,7 @@ extern tree resolve_nondeduced_context_or_error\t(tree, tsubst_flags_t);\n extern hashval_t iterative_hash_template_arg (tree arg, hashval_t val);\n extern tree coerce_template_parms               (tree, tree, tree);\n extern tree coerce_template_parms               (tree, tree, tree, tsubst_flags_t);\n+extern tree canonicalize_type_argument\t\t(tree, tsubst_flags_t);\n extern void register_local_specialization       (tree, tree);\n extern tree retrieve_local_specialization       (tree);\n extern tree extract_fnparm_pack                 (tree, tree *);"}, {"sha": "789ccdbbbd18efb5f554bdcc991a64f10f9cb45b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde31a76ba48be49dbe26317ce5e19d10ae9f310/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde31a76ba48be49dbe26317ce5e19d10ae9f310/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=bde31a76ba48be49dbe26317ce5e19d10ae9f310", "patch": "@@ -7943,7 +7943,7 @@ template_template_parm_bindings_ok_p (tree tparms, tree targs)\n /* Since type attributes aren't mangled, we need to strip them from\n    template type arguments.  */\n \n-static tree\n+tree\n canonicalize_type_argument (tree arg, tsubst_flags_t complain)\n {\n   if (!arg || arg == error_mark_node || arg == TYPE_CANONICAL (arg))"}, {"sha": "b1a45d5e59581f5ff19759c477e60fd40e9cf996", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-using2.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde31a76ba48be49dbe26317ce5e19d10ae9f310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-using2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde31a76ba48be49dbe26317ce5e19d10ae9f310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-using2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-using2.C?ref=bde31a76ba48be49dbe26317ce5e19d10ae9f310", "patch": "@@ -0,0 +1,45 @@\n+// PR c++/93907\n+// { dg-options -std=gnu++20 }\n+\n+template <int a> struct c {\n+  static constexpr int d = a;\n+  typedef c e;\n+};\n+template <typename> struct f;\n+template <typename b> using g = typename f<b>::e;\n+struct b;\n+template <typename b> struct f { using e = b; };\n+template <typename ai> struct m { typedef g<ai> aj; };\n+template <typename b> class n { typedef typename m<b>::aj e; };\n+template <typename b> using an = typename n<b>::e;\n+template <typename> constexpr bool ao = c<true>::d;\n+template <typename> constexpr bool i = c<1>::d;\n+template <typename> concept bb = i<b>;\n+using cc = __int128;\n+template <typename> concept cd = bb<cc>;\n+template <typename bt> concept ce = requires { requires cd<bt>; };\n+template <typename bt> concept h = ce<bt>;\n+template <typename bt> concept l = h<bt>;\n+template <typename> concept cl = ao<b>;\n+template <typename b> concept cp = requires(b j) {\n+  requires h<an<decltype(j.begin())>>;\n+};\n+struct o {\n+  template <cl b> requires cp<b> auto operator()(b) {}\n+};\n+template <typename b> using cm = decltype(o{}(b()));\n+template <typename bt> concept ct = l<bt>;\n+template <typename da> concept dd = ct<cm<da>>;\n+template <typename da> concept de = dd<da>;\n+struct {\n+  template <de da, typename b> void operator()(da, b);\n+} di;\n+class p {\n+  void begin();\n+};\n+template <typename> using df = p;\n+template <int> void q() {\n+  df<int> k;\n+  int d;\n+  di(k, d);\n+}"}]}