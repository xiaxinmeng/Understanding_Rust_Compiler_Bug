{"sha": "be1f1ed97b2e41073dc1775d6f13e7597eb22664", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUxZjFlZDk3YjJlNDEwNzNkYzE3NzVkNmYxM2U3NTk3ZWIyMjY2NA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-09-24T05:42:03Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-09-24T05:42:03Z"}, "message": "re PR fortran/40571 (F2008: ISO_FORTRAN_ENV: Missing constants)\n\n2010-09-24  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/40571\n        * iso-fortran-env.def: Add NAMED_KINDARRAY with\n        character_kinds, integer_kinds, logical_kinds and\n        real_kinds.\n        * gfortran.h: Add them to iso_fortran_env_symbol.\n        * libgfortran.h: Rename GFC_INQUIRE_INTERNAL_UNIT to\n        LIBERROR_INQUIRE_INTERNAL_UNIT and move it from\n        libgfortran_stat_codes to libgfortran_error_codes.\n        * module.c (create_int_parameter_array): New function.\n        (use_iso_fortran_env_module): Use it for\n        NAMED_KINDARRAY of iso-fortran-env.def.\n        * trans-decl.c (gfc_get_symbol_decl): Parameter\n        arrays of intrinsics modules become local static variables.\n        * intrinsic.texi (ISO_FORTRAN_ENV): Add character_kinds,\n        integer_kinds, logical_kinds and real_kinds.\n\n2010-09-24  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/40571\n        * gfortran.dg/iso_fortran_env_7.f90: New.\n\nFrom-SVN: r164581", "tree": {"sha": "7fc5f24d161e97648b35a60ab0f7dcfe64b15cf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fc5f24d161e97648b35a60ab0f7dcfe64b15cf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be1f1ed97b2e41073dc1775d6f13e7597eb22664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1f1ed97b2e41073dc1775d6f13e7597eb22664", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be1f1ed97b2e41073dc1775d6f13e7597eb22664", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1f1ed97b2e41073dc1775d6f13e7597eb22664/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b3a48378862f67ffea656516857c1517dae7658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b3a48378862f67ffea656516857c1517dae7658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b3a48378862f67ffea656516857c1517dae7658"}], "stats": {"total": 269, "additions": 256, "deletions": 13}, "files": [{"sha": "18ce1ff7b9ddf4495f221174200b716df371e63b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=be1f1ed97b2e41073dc1775d6f13e7597eb22664", "patch": "@@ -1,3 +1,21 @@\n+2010-09-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/40571\n+\t* iso-fortran-env.def: Add NAMED_KINDARRAY with\n+\tcharacter_kinds, integer_kinds, logical_kinds and\n+\treal_kinds.\n+\t* gfortran.h: Add them to iso_fortran_env_symbol.\n+\t* libgfortran.h: Rename GFC_INQUIRE_INTERNAL_UNIT to\n+\tLIBERROR_INQUIRE_INTERNAL_UNIT and move it from\n+\tlibgfortran_stat_codes to libgfortran_error_codes.\n+\t* module.c (create_int_parameter_array): New function.\n+\t(use_iso_fortran_env_module): Use it for\n+\tNAMED_KINDARRAY of iso-fortran-env.def.\n+\t* trans-decl.c (gfc_get_symbol_decl): Parameter\n+\tarrays of intrinsics modules become local static variables.\n+\t* intrinsic.texi (ISO_FORTRAN_ENV): Add character_kinds,\n+\tinteger_kinds, logical_kinds and real_kinds.\n+\n 2010-09-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/45744"}, {"sha": "95886cd2c9ac5ba45c15b696a65efb55776f486d", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=be1f1ed97b2e41073dc1775d6f13e7597eb22664", "patch": "@@ -613,14 +613,15 @@ gfc_reverse;\n #define BBT_HEADER(self) int priority; struct self *left, *right\n \n #define NAMED_INTCST(a,b,c,d) a,\n+#define NAMED_KINDARRAY(a,b,c,d) a,\n typedef enum\n {\n   ISOFORTRANENV_INVALID = -1,\n #include \"iso-fortran-env.def\"\n   ISOFORTRANENV_LAST, ISOFORTRANENV_NUMBER = ISOFORTRANENV_LAST\n }\n iso_fortran_env_symbol;\n-#undef NAMED_INTCST\n+#undef NAMED_KINDARRAY\n \n #define NAMED_INTCST(a,b,c,d) a,\n #define NAMED_REALCST(a,b,c) a,"}, {"sha": "5c7d4630aafdcd14e9343d74327321ec6e80420f", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=be1f1ed97b2e41073dc1775d6f13e7597eb22664", "patch": "@@ -12606,6 +12606,10 @@ integer variables used in atomic operations. (Fortran 2008 or later.)\n Default-kind integer constant to be used as kind parameter when defining\n logical variables used in atomic operations. (Fortran 2008 or later.)\n \n+@item @code{CHARACTER_KINDS}:\n+Default-kind integer constant array of rank one containing the supported kind\n+parameters of the @code{CHARACTER} type. (Fortran 2008 or later.)\n+\n @item @code{CHARACTER_STORAGE_SIZE}:\n Size in bits of the character storage unit.\n \n@@ -12624,6 +12628,10 @@ Kind type parameters to specify an INTEGER type with a storage\n size of 16, 32, and 64 bits. It is negative if a target platform\n does not support the particular kind. (Fortran 2008 or later.)\n \n+@item @code{INTEGER_KINDS}:\n+Default-kind integer constant array of rank one containing the supported kind\n+parameters of the @code{INTEGER} type. (Fortran 2008 or later.)\n+\n @item @code{IOSTAT_END}:\n The value assigned to the variable passed to the @code{IOSTAT=} specifier of\n an input/output statement if an end-of-file condition occurred.\n@@ -12640,6 +12648,10 @@ internal unit. (Fortran 2008 or later.)\n @item @code{NUMERIC_STORAGE_SIZE}:\n The size in bits of the numeric storage unit.\n \n+@item @code{LOGICAL_KINDS}:\n+Default-kind integer constant array of rank one containing the supported kind\n+parameters of the @code{LOGICAL} type. (Fortran 2008 or later.)\n+\n @item @code{OUTPUT_UNIT}:\n Identifies the preconnected unit identified by the asterisk\n (@code{*}) in @code{WRITE} statement.\n@@ -12649,6 +12661,10 @@ Kind type parameters to specify a REAL type with a storage\n size of 32, 64, and 128 bits. It is negative if a target platform\n does not support the particular kind. (Fortran 2008 or later.)\n \n+@item @code{REAL_KINDS}:\n+Default-kind integer constant array of rank one containing the supported kind\n+parameters of the @code{REAL} type. (Fortran 2008 or later.)\n+\n @item @code{STAT_LOCKED}:\n Scalar default-integer constant used as STAT= return value by @code{LOCK} to\n denote that the lock variable is locked by the executing image. (Fortran 2008"}, {"sha": "cd4f1d1145caf8dfb6239f281b32a93c639bbf02", "filename": "gcc/fortran/iso-fortran-env.def", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ffortran%2Fiso-fortran-env.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ffortran%2Fiso-fortran-env.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fiso-fortran-env.def?ref=be1f1ed97b2e41073dc1775d6f13e7597eb22664", "patch": "@@ -19,6 +19,15 @@ along with GCC; see the file COPYING3.  If not see\n /* This file contains the definition of the named integer constants provided\n    by the Fortran 2003 ISO_FORTRAN_ENV intrinsic module.  */\n \n+#ifndef NAMED_INTCST\n+# define NAMED_INTCST(a,b,c,d)\n+#endif\n+\n+#ifndef NAMED_KINDARRAY\n+# define NAMED_KINDARRAY(a,b,c,d)\n+#endif\n+\n+\n /* The arguments to NAMED_INTCST are:\n      -- an internal name\n      -- the symbol name in the module, as seen by Fortran code\n@@ -50,7 +59,7 @@ NAMED_INTCST (ISOFORTRANENV_IOSTAT_END, \"iostat_end\", LIBERROR_END, \\\n NAMED_INTCST (ISOFORTRANENV_IOSTAT_EOR, \"iostat_eor\", LIBERROR_EOR, \\\n               GFC_STD_F2003)\n NAMED_INTCST (ISOFORTRANENV_IOSTAT_INQUIRE_INTERNAL_UNIT, \\\n-              \"iostat_inquire_internal_unit\", GFC_INQUIRE_INTERNAL_UNIT, \\\n+              \"iostat_inquire_internal_unit\", LIBERROR_INQUIRE_INTERNAL_UNIT, \\\n               GFC_STD_F2008)\n NAMED_INTCST (ISOFORTRANENV_NUMERIC_STORAGE_SIZE, \"numeric_storage_size\", \\\n               gfc_numeric_storage_size, GFC_STD_F2003)\n@@ -72,3 +81,21 @@ NAMED_INTCST (ISOFORTRANENV_FILE_STAT_STOPPED_IMAGE, \"stat_stopped_image\", \\\n NAMED_INTCST (ISOFORTRANENV_FILE_STAT_UNLOCKED, \"stat_unlocked\", \\\n               GFC_STAT_UNLOCKED, GFC_STD_F2008)\n \n+\n+/* The arguments to NAMED_KINDARRAY are:\n+     -- an internal name\n+     -- the symbol name in the module, as seen by Fortran code\n+     -- the gfortran variable containing the information\n+     -- the Fortran standard  */\n+\n+NAMED_KINDARRAY (ISOFORTRAN_CHARACTER_KINDS, \"character_kinds\", \\\n+                 gfc_character_kinds, GFC_STD_F2008)\n+NAMED_KINDARRAY (ISOFORTRAN_INTEGER_KINDS, \"integer_kinds\", \\\n+                 gfc_integer_kinds, GFC_STD_F2008)\n+NAMED_KINDARRAY (ISOFORTRAN_LOGICAL_KINDS, \"logical_kinds\", \\\n+                 gfc_logical_kinds, GFC_STD_F2008)\n+NAMED_KINDARRAY (ISOFORTRAN_REAL_KINDS, \"real_kinds\", \\\n+                 gfc_real_kinds, GFC_STD_F2008)\n+\n+#undef NAMED_INTCST\n+#undef NAMED_KINDARRAY"}, {"sha": "e26cbf9b5f4689d0ed689f6311f6febdf57301f7", "filename": "gcc/fortran/libgfortran.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ffortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ffortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flibgfortran.h?ref=be1f1ed97b2e41073dc1775d6f13e7597eb22664", "patch": "@@ -93,6 +93,7 @@ typedef enum\n   LIBERROR_DIRECT_EOR,\n   LIBERROR_SHORT_RECORD,\n   LIBERROR_CORRUPT_FILE,\n+  LIBERROR_INQUIRE_INTERNAL_UNIT, /* Must be different from STAT_STOPPED_IMAGE.  */\n   LIBERROR_LAST\t\t\t/* Not a real error, the last error # + 1.  */\n }\n libgfortran_error_codes;\n@@ -102,8 +103,7 @@ typedef enum\n   GFC_STAT_UNLOCKED = 0,\n   GFC_STAT_LOCKED,\n   GFC_STAT_LOCKED_OTHER_IMAGE,\n-  GFC_STAT_STOPPED_IMAGE,\n-  GFC_INQUIRE_INTERNAL_UNIT  /* Must be different from STAT_STOPPED_IMAGE.  */\n+  GFC_STAT_STOPPED_IMAGE\n }\n libgfortran_stat_codes;\n "}, {"sha": "d4824a73da11c16da963b78bbec2136a22e22905", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 107, "deletions": 6, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=be1f1ed97b2e41073dc1775d6f13e7597eb22664", "patch": "@@ -5305,6 +5305,49 @@ create_int_parameter (const char *name, int value, const char *modname,\n }\n \n \n+/* Value is already contained the array constructor, but not yet the shape.  */\n+\n+static void\n+create_int_parameter_array (const char *name, int size, gfc_expr *value,\n+\t\t\t    const char *modname, intmod_id module, int id)\n+{\n+  gfc_symtree *tmp_symtree;\n+  gfc_symbol *sym;\n+  gfc_expr *e;\n+\n+  tmp_symtree = gfc_find_symtree (gfc_current_ns->sym_root, name);\n+  if (tmp_symtree != NULL)\n+    {\n+      if (strcmp (modname, tmp_symtree->n.sym->module) == 0)\n+\treturn;\n+      else\n+\tgfc_error (\"Symbol '%s' already declared\", name);\n+    }\n+\n+  gfc_get_sym_tree (name, gfc_current_ns, &tmp_symtree, false);\n+  sym = tmp_symtree->n.sym;\n+\n+  sym->module = gfc_get_string (modname);\n+  sym->attr.flavor = FL_PARAMETER;\n+  sym->ts.type = BT_INTEGER;\n+  sym->ts.kind = gfc_default_integer_kind;\n+  sym->attr.use_assoc = 1;\n+  sym->from_intmod = module;\n+  sym->intmod_sym_id = id;\n+  sym->attr.dimension = 1;\n+  sym->as = gfc_get_array_spec ();\n+  sym->as->rank = 1;\n+  sym->as->type = AS_EXPLICIT;\n+  sym->as->lower[0] = gfc_get_int_expr (gfc_default_integer_kind, NULL, 1);\n+  sym->as->upper[0] = gfc_get_int_expr (gfc_default_integer_kind, NULL, size); \n+\n+  sym->value = value;\n+  e->shape = gfc_get_shape (1);\n+  mpz_init_set_ui (e->shape[0], size);\n+}\n+\n+\n+\n /* USE the ISO_FORTRAN_ENV intrinsic module.  */\n \n static void\n@@ -5314,12 +5357,16 @@ use_iso_fortran_env_module (void)\n   gfc_use_rename *u;\n   gfc_symbol *mod_sym;\n   gfc_symtree *mod_symtree;\n-  int i;\n+  gfc_expr *expr;\n+  int i, j;\n \n   intmod_sym symbol[] = {\n #define NAMED_INTCST(a,b,c,d) { a, b, 0, d },\n #include \"iso-fortran-env.def\"\n #undef NAMED_INTCST\n+#define NAMED_KINDARRAY(a,b,c,d) { a, b, 0, d },\n+#include \"iso-fortran-env.def\"\n+#undef NAMED_KINDARRAY\n     { ISOFORTRANENV_INVALID, NULL, -1234, 0 } };\n \n   i = 0;\n@@ -5371,10 +5418,39 @@ use_iso_fortran_env_module (void)\n \t\t\t\t gfc_option.flag_default_integer\n \t\t\t\t   ? \"-fdefault-integer-8\"\n \t\t\t\t   : \"-fdefault-real-8\");\n+\t      switch (symbol[i].id)\n+\t\t{\n+#define NAMED_INTCST(a,b,c,d) \\\n+\t\tcase a:\n+#include \"iso-fortran-env.def\"\n+#undef NAMED_INTCST\n+\t\t  create_int_parameter (u->local_name[0] ? u->local_name\n+\t\t\t\t\t\t\t : u->use_name,\n+\t\t\t\t\tsymbol[i].value, mod,\n+\t\t\t\t\tINTMOD_ISO_FORTRAN_ENV, symbol[i].id);\n+\t\t  break;\n+\n+#define NAMED_KINDARRAY(a,b,KINDS,d) \\\n+\t\tcase a:\\\n+\t\t  expr = gfc_get_array_expr (BT_INTEGER, \\\n+\t\t\t\t\t     gfc_default_integer_kind,\\\n+\t\t\t\t\t     NULL); \\\n+\t\t  for (j = 0; KINDS[j].kind != 0; j++) \\\n+\t\t    gfc_constructor_append_expr (&expr->value.constructor, \\\n+\t\t\tgfc_get_int_expr (gfc_default_integer_kind, NULL, \\\n+\t\t\t\t\t  KINDS[j].kind), NULL); \\\n+\t\t  create_int_parameter_array (u->local_name[0] ? u->local_name \\\n+\t\t\t\t\t\t\t : u->use_name, \\\n+\t\t\t\t\t      j, expr, mod, \\\n+\t\t\t\t\t      INTMOD_ISO_FORTRAN_ENV, \\\n+\t\t\t\t\t      symbol[i].id); \\\n+\t\t  break;\n+#include \"iso-fortran-env.def\"\n+#undef NAMED_KINDARRAY\n \n-\t      create_int_parameter (u->local_name[0] ? u->local_name : u->use_name,\n-\t\t\t\t    symbol[i].value, mod,\n-\t\t\t\t    INTMOD_ISO_FORTRAN_ENV, symbol[i].id);\n+\t\tdefault:\n+\t\t  gcc_unreachable ();\n+\t\t}\n \t    }\n \t}\n \n@@ -5391,8 +5467,33 @@ use_iso_fortran_env_module (void)\n \t\t\t     gfc_option.flag_default_integer\n \t\t\t\t? \"-fdefault-integer-8\" : \"-fdefault-real-8\");\n \n-\t  create_int_parameter (symbol[i].name, symbol[i].value, mod,\n-\t\t\t\tINTMOD_ISO_FORTRAN_ENV, symbol[i].id);\n+\t  switch (symbol[i].id)\n+\t    {\n+#define NAMED_INTCST(a,b,c,d) \\\n+\t    case a:\n+#include \"iso-fortran-env.def\"\n+#undef NAMED_INTCST\n+\t      create_int_parameter (symbol[i].name, symbol[i].value, mod,\n+\t\t\t\t    INTMOD_ISO_FORTRAN_ENV, symbol[i].id);\n+\t      break;\n+\n+#define NAMED_KINDARRAY(a,b,KINDS,d) \\\n+\t    case a:\\\n+\t      expr = gfc_get_array_expr (BT_INTEGER, gfc_default_integer_kind, \\\n+\t\t\t\t\t NULL); \\\n+\t      for (j = 0; KINDS[j].kind != 0; j++) \\\n+\t\tgfc_constructor_append_expr (&expr->value.constructor, \\\n+                      gfc_get_int_expr (gfc_default_integer_kind, NULL, \\\n+                                        KINDS[j].kind), NULL); \\\n+            create_int_parameter_array (symbol[i].name, j, expr, mod, \\\n+                                        INTMOD_ISO_FORTRAN_ENV, symbol[i].id);\\\n+            break;\n+#include \"iso-fortran-env.def\"\n+#undef NAMED_KINDARRAY\n+\n+\t  default:\n+\t    gcc_unreachable ();\n+\t  }\n \t}\n     }\n "}, {"sha": "d15d673af036b05045eaea6a6a70869300b45ec0", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=be1f1ed97b2e41073dc1775d6f13e7597eb22664", "patch": "@@ -1044,6 +1044,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n   tree length = NULL_TREE;\n   tree attributes;\n   int byref;\n+  bool intrinsic_array_parameter = false;\n \n   gcc_assert (sym->attr.referenced\n \t\t|| sym->attr.use_assoc\n@@ -1181,6 +1182,12 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n   if (sym->attr.intrinsic)\n     internal_error (\"intrinsic variable which isn't a procedure\");\n \n+  /* Special case for array-valued named constants from intrinsic\n+     procedures; those are inlined.  */\n+  if (sym->attr.use_assoc && sym->from_intmod && sym->attr.dimension\n+      && sym->attr.flavor == FL_PARAMETER)\n+    intrinsic_array_parameter = true;\n+\n   /* Create string length decl first so that they can be used in the\n      type declaration.  */\n   if (sym->ts.type == BT_CHARACTER)\n@@ -1200,7 +1207,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n   if (sym->module)\n     {\n       gfc_set_decl_assembler_name (decl, gfc_sym_mangled_identifier (sym));\n-      if (sym->attr.use_assoc)\n+      if (sym->attr.use_assoc && !intrinsic_array_parameter)\n \tDECL_IGNORED_P (decl) = 1;\n     }\n \n@@ -1226,7 +1233,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \t  && !sym->attr.data\n \t  && !sym->attr.allocatable\n \t  && (sym->value && !sym->ns->proc_name->attr.is_main_program)\n-\t  && !sym->attr.use_assoc))\n+\t  && !(sym->attr.use_assoc && !intrinsic_array_parameter)))\n     gfc_defer_symbol_init (sym);\n \n   gfc_finish_var_decl (decl, sym);\n@@ -1280,7 +1287,14 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n   if (sym->attr.assign)\n     gfc_add_assign_aux_vars (sym);\n \n-  if (TREE_STATIC (decl) && !sym->attr.use_assoc\n+  if (intrinsic_array_parameter)\n+    {\n+      TREE_STATIC (decl) = 1;\n+      DECL_EXTERNAL (decl) = 0;\n+    }\n+\n+  if (TREE_STATIC (decl)\n+      && !(sym->attr.use_assoc && !intrinsic_array_parameter)\n       && (sym->attr.save || sym->ns->proc_name->attr.is_main_program\n \t  || gfc_option.flag_max_stack_var_size == 0\n \t  || sym->attr.data || sym->ns->proc_name->attr.flavor == FL_MODULE))"}, {"sha": "932dfa17a3846a80d3ef30c7486fb58b6ad3aa26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be1f1ed97b2e41073dc1775d6f13e7597eb22664", "patch": "@@ -1,3 +1,8 @@\n+2010-09-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/40571\n+\t* gfortran.dg/iso_fortran_env_7.f90: New.\n+\n 2010-09-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* obj-c++.dg/too-many-args.mm: New file."}, {"sha": "c8617efb169af4bb7eaedd986b4bb4f572a2c6de", "filename": "gcc/testsuite/gfortran.dg/iso_fortran_env_7.f90", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1f1ed97b2e41073dc1775d6f13e7597eb22664/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_7.f90?ref=be1f1ed97b2e41073dc1775d6f13e7597eb22664", "patch": "@@ -0,0 +1,61 @@\n+! { dg-do link }\n+!\n+! PR fortran/40571\n+!\n+! This test case adds check for the new Fortran 2008 array parameters\n+! in ISO_FORTRAN_ENV: integer_kinds, logical_kinds, character_kinds,\n+! and real_kinds.\n+!\n+! The test thus also checks that the values of the parameter are used\n+! and no copy is made. (Cf. PR 44856.)\n+\n+program test\n+  use iso_fortran_env, only: integer_kinds, character_kinds\n+  implicit none\n+  integer :: aaaa(2),i\n+  i=1\n+\n+  print *, integer_kinds\n+  print *, integer_kinds(1)\n+  print *, (integer_kinds)\n+  print *, (integer_kinds + 1)\n+  print *, integer_kinds(1:2)\n+  print *, integer_kinds(i)\n+\n+  aaaa = character_kinds\n+  aaaa(1:2) = character_kinds(1:2)\n+  aaaa(i) = character_kinds(i)\n+  aaaa = character_kinds + 0\n+  aaaa(1:2) = character_kinds(1:2) + 0\n+  aaaa(i) = character_kinds(i) + 0\n+end program test\n+\n+subroutine one()\n+  use iso_fortran_env, only: ik => integer_kinds, ik2 => integer_kinds\n+  implicit none\n+\n+  if (any (ik /= ik2)) call never_call_me()\n+end subroutine one\n+\n+subroutine two()\n+  use iso_fortran_env\n+  implicit none\n+\n+  ! Should be 1, 2, 4, 8 and possibly 16\n+  if (size (integer_kinds) < 4) call never_call_me()\n+  if (any (integer_kinds(1:4) /= [1,2,4,8])) call never_call_me()\n+  if (any (integer_kinds /= logical_kinds)) call never_call_me()\n+\n+  if (size (character_kinds) /= 2) call never_call_me()\n+  if (any (character_kinds /= [1,4])) call never_call_me()\n+\n+  if (size (real_kinds) < 2) call never_call_me()\n+  if (any (real_kinds(1:2) /= [4,8])) call never_call_me()\n+end subroutine two\n+\n+subroutine three()\n+  use iso_fortran_env\n+  integer :: i, j(2)\n+  i = real_kinds(1)\n+  j = real_kinds(1:2)\n+end subroutine three"}]}