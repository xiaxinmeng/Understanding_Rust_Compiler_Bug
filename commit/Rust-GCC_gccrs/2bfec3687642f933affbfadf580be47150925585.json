{"sha": "2bfec3687642f933affbfadf580be47150925585", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJmZWMzNjg3NjQyZjkzM2FmZmJmYWRmNTgwYmU0NzE1MDkyNTU4NQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-09-03T21:21:14Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-09-03T21:21:14Z"}, "message": "dump_parse_tree (gfc_run_passes): Call optimize_namespace instead of optimize_code.\n\n2010-09-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\t* dump_parse_tree (gfc_run_passes):  Call optimize_namespace\n\tinstead of optimize_code.\n\t(optimize_namespace):  New function.\n\n2010-09-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\t* gfortran.dg/trim_optimize_2.f90:  New test.\n\nFrom-SVN: r163846", "tree": {"sha": "580ce409671fc81be7bfde8ec05ed37ef541fa6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/580ce409671fc81be7bfde8ec05ed37ef541fa6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bfec3687642f933affbfadf580be47150925585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfec3687642f933affbfadf580be47150925585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bfec3687642f933affbfadf580be47150925585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfec3687642f933affbfadf580be47150925585/comments", "author": null, "committer": null, "parents": [{"sha": "d158303227fdca143db5decf983978f635be2ba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d158303227fdca143db5decf983978f635be2ba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d158303227fdca143db5decf983978f635be2ba9"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "14c5fe4e1773e5b1f6d181dde0c249022e736287", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfec3687642f933affbfadf580be47150925585/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfec3687642f933affbfadf580be47150925585/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=2bfec3687642f933affbfadf580be47150925585", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Forward declarations.  */\n \n static void strip_function_call (gfc_expr *);\n+static void optimize_namespace (gfc_namespace *);\n static void optimize_assignment (gfc_code *);\n static void optimize_expr_0 (gfc_expr *);\n static bool optimize_expr (gfc_expr *);\n@@ -41,10 +42,21 @@ static void optimize_actual_arglist (gfc_actual_arglist *);\n    optimization pass is run.  */\n \n void\n-gfc_run_passes (gfc_namespace * ns)\n+gfc_run_passes (gfc_namespace *ns)\n {\n   if (optimize)\n-    optimize_code (ns->code);\n+    optimize_namespace (ns);\n+}\n+\n+/* Optimize a namespace, including all contained namespaces.  */\n+\n+static void\n+optimize_namespace (gfc_namespace *ns)\n+{\n+  optimize_code (ns->code);\n+\n+  for (ns = ns->contained; ns; ns = ns->sibling)\n+    optimize_namespace (ns);\n }\n \n static void"}, {"sha": "b7ae1e3e533025f15d6a62257a846f9e8a4c7a84", "filename": "gcc/testsuite/gfortran.dg/trim_optimize_2.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfec3687642f933affbfadf580be47150925585/gcc%2Ftestsuite%2Fgfortran.dg%2Ftrim_optimize_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfec3687642f933affbfadf580be47150925585/gcc%2Ftestsuite%2Fgfortran.dg%2Ftrim_optimize_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftrim_optimize_2.f90?ref=2bfec3687642f933affbfadf580be47150925585", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do run }\n+! { dg-options \"-O -fdump-tree-original\" }\n+! Optimize unnecessary TRIMs in contained namespaces too.\n+module faz\n+  implicit none\n+contains\n+  subroutine bar\n+    character(len=3) :: a\n+    character(len=4) :: b,c\n+    b = 'abcd'\n+    a = trim(b)\n+    c = trim(trim(a))\n+    if (a /= 'abc') call abort\n+    if (c /= 'abc') call abort\n+  end subroutine bar\n+end module faz\n+\n+program main\n+  use faz\n+  implicit none\n+  call foo\n+  call bar\n+contains\n+  subroutine foo\n+    character(len=3) :: a\n+    character(len=4) :: b,c\n+    b = 'abcd'\n+    a = trim(b)\n+    c = trim(trim(a))\n+    if (a /= 'abc') call abort\n+    if (c /= 'abc') call abort\n+  end subroutine foo\n+end program main\n+\n+! { dg-final { scan-tree-dump-times \"memmove\" 4 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"string_trim\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}