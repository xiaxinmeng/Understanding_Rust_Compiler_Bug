{"sha": "33e9feb53082ee79d5f4321bcedf025f1bbd691d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNlOWZlYjUzMDgyZWU3OWQ1ZjQzMjFiY2VkZjAyNWYxYmJkNjkxZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-07-18T13:49:30Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-07-18T13:49:30Z"}, "message": "re PR tree-optimization/81462 (ICE in estimate_bb_frequencies at gcc/predict.c:3546)\n\n\n\tPR middle-end/81462\n\t* predict.c (set_even_probabilities): Cleanup; do not affect\n\tprobabilities that are already known.\n\t(combine_predictions_for_bb): Call even when count is set.\n\n\t* g++.dg/torture/pr81462.C: New testcase.\n\nFrom-SVN: r250310", "tree": {"sha": "57c3c850bc4efb6a3e987bff4d868699cf4fb069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57c3c850bc4efb6a3e987bff4d868699cf4fb069"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33e9feb53082ee79d5f4321bcedf025f1bbd691d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e9feb53082ee79d5f4321bcedf025f1bbd691d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33e9feb53082ee79d5f4321bcedf025f1bbd691d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e9feb53082ee79d5f4321bcedf025f1bbd691d/comments", "author": null, "committer": null, "parents": [{"sha": "ff22eb1256b05c1d0e0cf4b4b3114808bbf29457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff22eb1256b05c1d0e0cf4b4b3114808bbf29457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff22eb1256b05c1d0e0cf4b4b3114808bbf29457"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "892c0258534c60ccb2c5dedc2d791d493a19b535", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e9feb53082ee79d5f4321bcedf025f1bbd691d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e9feb53082ee79d5f4321bcedf025f1bbd691d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33e9feb53082ee79d5f4321bcedf025f1bbd691d", "patch": "@@ -1,3 +1,10 @@\n+2017-07-18  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR middle-end/81462\n+\t* predict.c (set_even_probabilities): Cleanup; do not affect\n+\tprobabilities that are already known.\n+\t(combine_predictions_for_bb): Call even when count is set.\n+\n 2017-07-18  Nathan Sidwell  <nathan@acm.org>\n \n \t* tree-parloops.c (try_transform_to_exit_first_loop_alt): Use"}, {"sha": "1e2e11d71f00e8b35cfbb7c3fb4b67d4d590e768", "filename": "gcc/predict.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e9feb53082ee79d5f4321bcedf025f1bbd691d/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e9feb53082ee79d5f4321bcedf025f1bbd691d/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=33e9feb53082ee79d5f4321bcedf025f1bbd691d", "patch": "@@ -817,16 +817,25 @@ static void\n set_even_probabilities (basic_block bb,\n \t\t\thash_set<edge> *unlikely_edges = NULL)\n {\n-  unsigned nedges = 0;\n+  unsigned nedges = 0, unlikely_count = 0;\n   edge e = NULL;\n   edge_iterator ei;\n+  profile_probability all = profile_probability::always ();\n \n   FOR_EACH_EDGE (e, ei, bb->succs)\n-    if (!unlikely_executed_edge_p (e))\n-      nedges ++;\n+    if (e->probability.initialized_p ())\n+      all -= e->probability;\n+    else if (!unlikely_executed_edge_p (e))\n+      {\n+        nedges ++;\n+        if (unlikely_edges != NULL && unlikely_edges->contains (e))\n+\t  {\n+\t    all -= profile_probability::very_unlikely ();\n+\t    unlikely_count++;\n+\t  }\n+      }\n \n   /* Make the distribution even if all edges are unlikely.  */\n-  unsigned unlikely_count = unlikely_edges ? unlikely_edges->elements () : 0;\n   if (unlikely_count == nedges)\n     {\n       unlikely_edges = NULL;\n@@ -836,13 +845,14 @@ set_even_probabilities (basic_block bb,\n   unsigned c = nedges - unlikely_count;\n \n   FOR_EACH_EDGE (e, ei, bb->succs)\n-    if (!unlikely_executed_edge_p (e))\n+    if (e->probability.initialized_p ())\n+      ;\n+    else if (!unlikely_executed_edge_p (e))\n       {\n \tif (unlikely_edges != NULL && unlikely_edges->contains (e))\n \t  e->probability = profile_probability::very_unlikely ();\n \telse\n-\t  e->probability = profile_probability::guessed_always ()\n-\t\t\t\t.apply_scale (1, c);\n+\t  e->probability = all.apply_scale (1, c).guessed ();\n       }\n     else\n       e->probability = profile_probability::never ();\n@@ -1151,7 +1161,7 @@ combine_predictions_for_bb (basic_block bb, bool dry_run)\n \t  if (pred->ep_probability <= PROB_VERY_UNLIKELY)\n \t    unlikely_edges.add (pred->ep_edge);\n \n-      if (!bb->count.initialized_p () && !dry_run)\n+      if (!dry_run)\n \tset_even_probabilities (bb, &unlikely_edges);\n       clear_bb_predictions (bb);\n       if (dump_file)"}, {"sha": "01f24abca7cd3454d4bc5091fc5aed1c019b7e09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e9feb53082ee79d5f4321bcedf025f1bbd691d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e9feb53082ee79d5f4321bcedf025f1bbd691d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=33e9feb53082ee79d5f4321bcedf025f1bbd691d", "patch": "@@ -1,3 +1,8 @@\n+2017-07-18  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR middle-end/81462\n+\t* g++.dg/torture/pr81462.C: New testcase.\n+\n 2017-07-18  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR target/81408"}, {"sha": "044c8b78ee5054be60c313c07cdad0dcf2a1bf05", "filename": "gcc/testsuite/g++.dg/torture/pr81462.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e9feb53082ee79d5f4321bcedf025f1bbd691d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81462.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e9feb53082ee79d5f4321bcedf025f1bbd691d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81462.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81462.C?ref=33e9feb53082ee79d5f4321bcedf025f1bbd691d", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+// { dg-options \"-O1 -fno-ipa-pure-const\" }\n+struct B {\n+        B* self;\n+        B() : self( this ) { self->f(); }\n+        virtual void f() = 0;\n+    };\n+\n+    struct D : B\n+    {\n+        void f() {}\n+    };\n+\n+    int main()\n+    {\n+        D d;\n+    }"}]}