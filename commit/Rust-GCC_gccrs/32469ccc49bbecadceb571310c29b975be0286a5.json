{"sha": "32469ccc49bbecadceb571310c29b975be0286a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI0NjljY2M0OWJiZWNhZGNlYjU3MTMxMGMyOWI5NzViZTAyODZhNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-09-17T15:22:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-09-17T15:22:42Z"}, "message": "i386.c (ix86_build_const_vector): Handle V8SImode and V4DImode.\n\n\t* config/i386/i386.c (ix86_build_const_vector): Handle V8SImode\n\tand V4DImode.\n\t(ix86_build_signbit_mask): Likewise.\n\t(ix86_expand_int_vcond): Likewise.  Handle V16HImode and\n\tV32QImode.\n\t(bdesc_args): Use CODE_FOR_{s,u}m{ax,in}v{32q,16h,8s}i3\n\tinstead of CODE_FOR_avx2_{s,u}m{ax,in}v{32q,16h,8s}i3.\n\t* config/i386/sse.md (avx2_<code><mode>3 umaxmin expand): Rename\n\tto...\n\t(<code><mode>3) ... this.\n\t(avx2_<code><mode>3 smaxmin expand): Rename to...\n\t(<code><mode>3) ... this.\n\t(smax<mode>3, smin<mode>3): Macroize using smaxmin code iterator.\n\t(smaxv2di3, sminv2di3): Macroize using smaxmin code iterator and\n\tVI8_AVX2 mode iterator.\n\t(umaxv2di3, uminv2di3): Macroize using umaxmin code iterator and\n\tVI8_AVX2 mode iterator.\n\t(vcond<V_256:mode><VI_256:mode>, vcondu<V_256:mode><VI_256:mode>):\n\tNew expanders.\n\nFrom-SVN: r178929", "tree": {"sha": "c02a4e8650ab0f06e8e711106d5b74d05dcd8ec4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c02a4e8650ab0f06e8e711106d5b74d05dcd8ec4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32469ccc49bbecadceb571310c29b975be0286a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32469ccc49bbecadceb571310c29b975be0286a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32469ccc49bbecadceb571310c29b975be0286a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32469ccc49bbecadceb571310c29b975be0286a5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7214727cc7522198b87f9d025ca3d0907fbee9ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7214727cc7522198b87f9d025ca3d0907fbee9ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7214727cc7522198b87f9d025ca3d0907fbee9ed"}], "stats": {"total": 204, "additions": 105, "deletions": 99}, "files": [{"sha": "3498f979aff1f5386feaca8d91f3d168369f551a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32469ccc49bbecadceb571310c29b975be0286a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32469ccc49bbecadceb571310c29b975be0286a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32469ccc49bbecadceb571310c29b975be0286a5", "patch": "@@ -1,3 +1,25 @@\n+2011-09-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_build_const_vector): Handle V8SImode\n+\tand V4DImode.\n+\t(ix86_build_signbit_mask): Likewise.\n+\t(ix86_expand_int_vcond): Likewise.  Handle V16HImode and\n+\tV32QImode.\n+\t(bdesc_args): Use CODE_FOR_{s,u}m{ax,in}v{32q,16h,8s}i3\n+\tinstead of CODE_FOR_avx2_{s,u}m{ax,in}v{32q,16h,8s}i3.\n+\t* config/i386/sse.md (avx2_<code><mode>3 umaxmin expand): Rename\n+\tto...\n+\t(<code><mode>3) ... this.\n+\t(avx2_<code><mode>3 smaxmin expand): Rename to...\n+\t(<code><mode>3) ... this.\n+\t(smax<mode>3, smin<mode>3): Macroize using smaxmin code iterator.\n+\t(smaxv2di3, sminv2di3): Macroize using smaxmin code iterator and\n+\tVI8_AVX2 mode iterator.\n+\t(umaxv2di3, uminv2di3): Macroize using umaxmin code iterator and\n+\tVI8_AVX2 mode iterator.\n+\t(vcond<V_256:mode><VI_256:mode>, vcondu<V_256:mode><VI_256:mode>):\n+\tNew expanders.\n+\t\n 2011-09-17  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/ia64/itanium2.md: Use match_test rather than eq/ne symbol_ref"}, {"sha": "d4f589d8d194a2ff1c1ff7d172a1ef90235cc9ad", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32469ccc49bbecadceb571310c29b975be0286a5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32469ccc49bbecadceb571310c29b975be0286a5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=32469ccc49bbecadceb571310c29b975be0286a5", "patch": "@@ -16946,7 +16946,9 @@ ix86_build_const_vector (enum machine_mode mode, bool vect, rtx value)\n \n   switch (mode)\n     {\n+    case V8SImode:\n     case V4SImode:\n+    case V4DImode:\n     case V2DImode:\n       gcc_assert (vect);\n     case V8SFmode:\n@@ -16987,6 +16989,7 @@ ix86_build_signbit_mask (enum machine_mode mode, bool vect, bool invert)\n   /* Find the sign bit, sign extended to 2*HWI.  */\n   switch (mode)\n     {\n+    case V8SImode:\n     case V4SImode:\n     case V8SFmode:\n     case V4SFmode:\n@@ -16996,6 +16999,7 @@ ix86_build_signbit_mask (enum machine_mode mode, bool vect, bool invert)\n       lo = 0x80000000, hi = lo < 0;\n       break;\n \n+    case V4DImode:\n     case V2DImode:\n     case V4DFmode:\n     case V2DFmode:\n@@ -19107,17 +19111,26 @@ ix86_expand_int_vcond (rtx operands[])\n \n \t  switch (mode)\n \t    {\n+\t    case V8SImode:\n+\t    case V4DImode:\n \t    case V4SImode:\n \t    case V2DImode:\n \t\t{\n \t\t  rtx t1, t2, mask;\n \t\t  rtx (*gen_sub3) (rtx, rtx, rtx);\n \n+\t\t  switch (mode)\n+\t\t    {\n+\t\t    case V8SImode: gen_sub3 = gen_subv8si3; break;\n+\t\t    case V4DImode: gen_sub3 = gen_subv4di3; break;\n+\t\t    case V4SImode: gen_sub3 = gen_subv4si3; break;\n+\t\t    case V2DImode: gen_sub3 = gen_subv2di3; break;\n+\t\t    default:\n+\t\t      gcc_unreachable ();\n+\t\t    }\n \t\t  /* Subtract (-(INT MAX) - 1) from both operands to make\n \t\t     them signed.  */\n \t\t  mask = ix86_build_signbit_mask (mode, true, false);\n-\t\t  gen_sub3 = (mode == V4SImode\n-\t\t\t      ? gen_subv4si3 : gen_subv2di3);\n \t\t  t1 = gen_reg_rtx (mode);\n \t\t  emit_insn (gen_sub3 (t1, cop0, mask));\n \n@@ -19130,6 +19143,8 @@ ix86_expand_int_vcond (rtx operands[])\n \t\t}\n \t      break;\n \n+\t    case V32QImode:\n+\t    case V16HImode:\n \t    case V16QImode:\n \t    case V8HImode:\n \t      /* Perform a parallel unsigned saturating subtraction.  */\n@@ -25723,18 +25738,18 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_phsubswv16hi3, \"__builtin_ia32_phsubsw256\", IX86_BUILTIN_PHSUBSW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_pmaddubsw256, \"__builtin_ia32_pmaddubsw256\", IX86_BUILTIN_PMADDUBSW256, UNKNOWN, (int) V16HI_FTYPE_V32QI_V32QI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_pmaddwd, \"__builtin_ia32_pmaddwd256\", IX86_BUILTIN_PMADDWD256, UNKNOWN, (int) V8SI_FTYPE_V16HI_V16HI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_smaxv32qi3, \"__builtin_ia32_pmaxsb256\", IX86_BUILTIN_PMAXSB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_smaxv16hi3, \"__builtin_ia32_pmaxsw256\", IX86_BUILTIN_PMAXSW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_smaxv8si3 , \"__builtin_ia32_pmaxsd256\", IX86_BUILTIN_PMAXSD256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_umaxv32qi3, \"__builtin_ia32_pmaxub256\", IX86_BUILTIN_PMAXUB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_umaxv16hi3, \"__builtin_ia32_pmaxuw256\", IX86_BUILTIN_PMAXUW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_umaxv8si3 , \"__builtin_ia32_pmaxud256\", IX86_BUILTIN_PMAXUD256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_sminv32qi3, \"__builtin_ia32_pminsb256\", IX86_BUILTIN_PMINSB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_sminv16hi3, \"__builtin_ia32_pminsw256\", IX86_BUILTIN_PMINSW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_sminv8si3 , \"__builtin_ia32_pminsd256\", IX86_BUILTIN_PMINSD256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_uminv32qi3, \"__builtin_ia32_pminub256\", IX86_BUILTIN_PMINUB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_uminv16hi3, \"__builtin_ia32_pminuw256\", IX86_BUILTIN_PMINUW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_uminv8si3 , \"__builtin_ia32_pminud256\", IX86_BUILTIN_PMINUD256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_smaxv32qi3, \"__builtin_ia32_pmaxsb256\", IX86_BUILTIN_PMAXSB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_smaxv16hi3, \"__builtin_ia32_pmaxsw256\", IX86_BUILTIN_PMAXSW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_smaxv8si3 , \"__builtin_ia32_pmaxsd256\", IX86_BUILTIN_PMAXSD256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_umaxv32qi3, \"__builtin_ia32_pmaxub256\", IX86_BUILTIN_PMAXUB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_umaxv16hi3, \"__builtin_ia32_pmaxuw256\", IX86_BUILTIN_PMAXUW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_umaxv8si3 , \"__builtin_ia32_pmaxud256\", IX86_BUILTIN_PMAXUD256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_sminv32qi3, \"__builtin_ia32_pminsb256\", IX86_BUILTIN_PMINSB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_sminv16hi3, \"__builtin_ia32_pminsw256\", IX86_BUILTIN_PMINSW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_sminv8si3 , \"__builtin_ia32_pminsd256\", IX86_BUILTIN_PMINSD256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_uminv32qi3, \"__builtin_ia32_pminub256\", IX86_BUILTIN_PMINUB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_uminv16hi3, \"__builtin_ia32_pminuw256\", IX86_BUILTIN_PMINUW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_uminv8si3 , \"__builtin_ia32_pminud256\", IX86_BUILTIN_PMINUD256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_pmovmskb, \"__builtin_ia32_pmovmskb256\", IX86_BUILTIN_PMOVMSKB256, UNKNOWN, (int) INT_FTYPE_V32QI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_sign_extendv16qiv16hi2, \"__builtin_ia32_pmovsxbw256\", IX86_BUILTIN_PMOVSXBW256, UNKNOWN, (int) V16HI_FTYPE_V16QI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_sign_extendv8qiv8si2  , \"__builtin_ia32_pmovsxbd256\", IX86_BUILTIN_PMOVSXBD256, UNKNOWN, (int) V8SI_FTYPE_V16QI },"}, {"sha": "5d605bb6f5beea8cf6d00c23864dd144b0a46ced", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 54, "deletions": 85, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32469ccc49bbecadceb571310c29b975be0286a5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32469ccc49bbecadceb571310c29b975be0286a5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=32469ccc49bbecadceb571310c29b975be0286a5", "patch": "@@ -5806,7 +5806,7 @@\n   operands[1] = gen_lowpart (V1TImode, operands[1]);\n })\n \n-(define_expand \"avx2_<code><mode>3\"\n+(define_expand \"<code><mode>3\"\n   [(set (match_operand:VI124_256 0 \"register_operand\" \"\")\n \t(umaxmin:VI124_256\n \t  (match_operand:VI124_256 1 \"nonimmediate_operand\" \"\")\n@@ -5853,7 +5853,7 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"avx2_<code><mode>3\"\n+(define_expand \"<code><mode>3\"\n   [(set (match_operand:VI124_256 0 \"register_operand\" \"\")\n \t(smaxmin:VI124_256\n \t  (match_operand:VI124_256 1 \"nonimmediate_operand\" \"\")\n@@ -5904,47 +5904,22 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"smax<mode>3\"\n-  [(set (match_operand:VI14_128 0 \"register_operand\" \"\")\n-\t(smax:VI14_128 (match_operand:VI14_128 1 \"register_operand\" \"\")\n-\t\t       (match_operand:VI14_128 2 \"register_operand\" \"\")))]\n-  \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_fixup_binary_operands_no_copy (SMAX, <MODE>mode, operands);\n-  else\n-    {\n-      rtx xops[6];\n-      bool ok;\n-\n-      xops[0] = operands[0];\n-      xops[1] = operands[1];\n-      xops[2] = operands[2];\n-      xops[3] = gen_rtx_GT (VOIDmode, operands[1], operands[2]);\n-      xops[4] = operands[1];\n-      xops[5] = operands[2];\n-      ok = ix86_expand_int_vcond (xops);\n-      gcc_assert (ok);\n-      DONE;\n-    }\n-})\n-\n-(define_expand \"smin<mode>3\"\n+(define_expand \"<code><mode>3\"\n   [(set (match_operand:VI14_128 0 \"register_operand\" \"\")\n-\t(smin:VI14_128 (match_operand:VI14_128 1 \"register_operand\" \"\")\n-\t\t       (match_operand:VI14_128 2 \"register_operand\" \"\")))]\n+\t(smaxmin:VI14_128 (match_operand:VI14_128 1 \"register_operand\" \"\")\n+\t\t\t  (match_operand:VI14_128 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n   if (TARGET_SSE4_1)\n-    ix86_fixup_binary_operands_no_copy (SMIN, <MODE>mode, operands);\n+    ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\n   else\n     {\n       rtx xops[6];\n       bool ok;\n \n       xops[0] = operands[0];\n-      xops[1] = operands[2];\n-      xops[2] = operands[1];\n+      xops[1] = operands[<CODE> == SMAX ? 1 : 2];\n+      xops[2] = operands[<CODE> == SMAX ? 2 : 1];\n       xops[3] = gen_rtx_GT (VOIDmode, operands[1], operands[2]);\n       xops[4] = operands[1];\n       xops[5] = operands[2];\n@@ -5962,38 +5937,18 @@\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, V8HImode, operands);\")\n \n-(define_expand \"smaxv2di3\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n-\t(smax:V2DI (match_operand:V2DI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:V2DI 2 \"register_operand\" \"\")))]\n-  \"TARGET_SSE4_2\"\n-{\n-  rtx xops[6];\n-  bool ok;\n-\n-  xops[0] = operands[0];\n-  xops[1] = operands[1];\n-  xops[2] = operands[2];\n-  xops[3] = gen_rtx_GT (VOIDmode, operands[1], operands[2]);\n-  xops[4] = operands[1];\n-  xops[5] = operands[2];\n-  ok = ix86_expand_int_vcond (xops);\n-  gcc_assert (ok);\n-  DONE;\n-})\n-\n-(define_expand \"sminv2di3\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n-\t(smin:V2DI (match_operand:V2DI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:V2DI 2 \"register_operand\" \"\")))]\n+(define_expand \"<code><mode>3\"\n+  [(set (match_operand:VI8_AVX2 0 \"register_operand\" \"\")\n+\t(smaxmin:VI8_AVX2 (match_operand:VI8_AVX2 1 \"register_operand\" \"\")\n+\t\t\t  (match_operand:VI8_AVX2 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE4_2\"\n {\n   rtx xops[6];\n   bool ok;\n \n   xops[0] = operands[0];\n-  xops[1] = operands[2];\n-  xops[2] = operands[1];\n+  xops[1] = operands[<CODE> == SMAX ? 1 : 2];\n+  xops[2] = operands[<CODE> == SMAX ? 2 : 1];\n   xops[3] = gen_rtx_GT (VOIDmode, operands[1], operands[2]);\n   xops[4] = operands[1];\n   xops[5] = operands[2];\n@@ -6110,38 +6065,18 @@\n     }\n })\n \n-(define_expand \"umaxv2di3\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n-\t(umax:V2DI (match_operand:V2DI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:V2DI 2 \"register_operand\" \"\")))]\n-  \"TARGET_SSE4_2\"\n-{\n-  rtx xops[6];\n-  bool ok;\n-\n-  xops[0] = operands[0];\n-  xops[1] = operands[1];\n-  xops[2] = operands[2];\n-  xops[3] = gen_rtx_GTU (VOIDmode, operands[1], operands[2]);\n-  xops[4] = operands[1];\n-  xops[5] = operands[2];\n-  ok = ix86_expand_int_vcond (xops);\n-  gcc_assert (ok);\n-  DONE;\n-})\n-\n-(define_expand \"uminv2di3\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n-\t(umin:V2DI (match_operand:V2DI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:V2DI 2 \"register_operand\" \"\")))]\n+(define_expand \"<code><mode>3\"\n+  [(set (match_operand:VI8_AVX2 0 \"register_operand\" \"\")\n+\t(umaxmin:VI8_AVX2 (match_operand:VI8_AVX2 1 \"register_operand\" \"\")\n+\t\t\t  (match_operand:VI8_AVX2 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE4_2\"\n {\n   rtx xops[6];\n   bool ok;\n \n   xops[0] = operands[0];\n-  xops[1] = operands[2];\n-  xops[2] = operands[1];\n+  xops[1] = operands[<CODE> == UMAX ? 1 : 2];\n+  xops[2] = operands[<CODE> == UMAX ? 2 : 1];\n   xops[3] = gen_rtx_GTU (VOIDmode, operands[1], operands[2]);\n   xops[4] = operands[1];\n   xops[5] = operands[2];\n@@ -6265,6 +6200,23 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_expand \"vcond<V_256:mode><VI_256:mode>\"\n+  [(set (match_operand:V_256 0 \"register_operand\" \"\")\n+\t(if_then_else:V_256\n+\t  (match_operator 3 \"\"\n+\t    [(match_operand:VI_256 4 \"nonimmediate_operand\" \"\")\n+\t     (match_operand:VI_256 5 \"nonimmediate_operand\" \"\")])\n+\t  (match_operand:V_256 1 \"general_operand\" \"\")\n+\t  (match_operand:V_256 2 \"general_operand\" \"\")))]\n+  \"TARGET_AVX2\n+   && (GET_MODE_NUNITS (<V_256:MODE>mode)\n+       == GET_MODE_NUNITS (<VI_256:MODE>mode))\"\n+{\n+  bool ok = ix86_expand_int_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n (define_expand \"vcond<V_128:mode><VI124_128:mode>\"\n   [(set (match_operand:V_128 0 \"register_operand\" \"\")\n \t(if_then_else:V_128\n@@ -6297,6 +6249,23 @@\n   DONE;\n })\n \n+(define_expand \"vcondu<V_256:mode><VI_256:mode>\"\n+  [(set (match_operand:V_256 0 \"register_operand\" \"\")\n+\t(if_then_else:V_256\n+\t  (match_operator 3 \"\"\n+\t    [(match_operand:VI_256 4 \"nonimmediate_operand\" \"\")\n+\t     (match_operand:VI_256 5 \"nonimmediate_operand\" \"\")])\n+\t  (match_operand:V_256 1 \"general_operand\" \"\")\n+\t  (match_operand:V_256 2 \"general_operand\" \"\")))]\n+  \"TARGET_AVX2\n+   && (GET_MODE_NUNITS (<V_256:MODE>mode)\n+       == GET_MODE_NUNITS (<VI_256:MODE>mode))\"\n+{\n+  bool ok = ix86_expand_int_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n (define_expand \"vcondu<V_128:mode><VI124_128:mode>\"\n   [(set (match_operand:V_128 0 \"register_operand\" \"\")\n \t(if_then_else:V_128"}]}