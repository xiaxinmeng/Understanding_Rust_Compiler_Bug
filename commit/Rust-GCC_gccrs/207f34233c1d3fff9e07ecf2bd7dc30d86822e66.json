{"sha": "207f34233c1d3fff9e07ecf2bd7dc30d86822e66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA3ZjM0MjMzYzFkM2ZmZjllMDdlY2YyYmQ3ZGMzMGQ4NjgyMmU2Ng==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-03-16T20:09:21Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-03-16T20:09:21Z"}, "message": "re PR target/71294 (ICE in gen_add2_insn, at optabs.c:4442 on powerpc64le-linux)\n\n[gcc]\n2017-03-16  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/71294\n\t* config/rs6000/vsx.md (vsx_splat_<mode>, VSX_D iterator): Allow a\n\tSPLAT operation on ISA 2.07 64-bit systems that have direct move,\n\tbut no MTVSRDD support, by doing MTVSRD and XXPERMDI.\n\n[gcc/testsuite]\n2017-03-16  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/71294\n\t* g++.dg/pr71294.C: New test.\n\nFrom-SVN: r246209", "tree": {"sha": "fa4b47ab2820940b9fd689b27f412a86529dc1a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa4b47ab2820940b9fd689b27f412a86529dc1a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/207f34233c1d3fff9e07ecf2bd7dc30d86822e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207f34233c1d3fff9e07ecf2bd7dc30d86822e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/207f34233c1d3fff9e07ecf2bd7dc30d86822e66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207f34233c1d3fff9e07ecf2bd7dc30d86822e66/comments", "author": null, "committer": null, "parents": [{"sha": "c87550223ac148a5c50b7b3c785ef1f1f5ffd3ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c87550223ac148a5c50b7b3c785ef1f1f5ffd3ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c87550223ac148a5c50b7b3c785ef1f1f5ffd3ac"}], "stats": {"total": 99, "additions": 92, "deletions": 7}, "files": [{"sha": "2fd226d056fd5cc876837db76cce6a9e3958c8b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207f34233c1d3fff9e07ecf2bd7dc30d86822e66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207f34233c1d3fff9e07ecf2bd7dc30d86822e66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=207f34233c1d3fff9e07ecf2bd7dc30d86822e66", "patch": "@@ -1,3 +1,10 @@\n+2017-03-16  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/71294\n+\t* config/rs6000/vsx.md (vsx_splat_<mode>, VSX_D iterator): Allow a\n+\tSPLAT operation on ISA 2.07 64-bit systems that have direct move,\n+\tbut no MTVSRDD support, by doing MTVSRD and XXPERMDI.\n+\n 2017-03-16  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/71437\n@@ -23,14 +30,14 @@\n \t(vrp_finalize): Do not call identify_jump_threads here.\n \t(execute_vrp): Do it here instead and call thread_through_all_blocks\n \there too.\n-\t\n+\n \tPR tree-optimization/71437\n \t* tree-ssa-dom.c (pfn_simplify): Add basic_block argument.  All\n \tcallers changed.\n \t(simplify_stmt_for_jump_threading): Add basic_block argument.  All\n \tcallers changed.\n \t(lhs_of_dominating_assert): Moved from here into tree-vrp.c.\n-\t(dom_opt_dom_walker::thread_across_edge): Remove \n+\t(dom_opt_dom_walker::thread_across_edge): Remove\n \thandle_dominating_asserts argument.  All callers changed.\n \t(record_temporary_equivalences_from_stmts_at_dest): Corresponding\n \tchanges.  Remove calls to lhs_of_dominating_assert.  Other"}, {"sha": "f4f1663b36d6c148c3bb6a11f48b3a1b579431a6", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207f34233c1d3fff9e07ecf2bd7dc30d86822e66/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207f34233c1d3fff9e07ecf2bd7dc30d86822e66/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=207f34233c1d3fff9e07ecf2bd7dc30d86822e66", "patch": "@@ -3067,16 +3067,29 @@\n })\n \n ;; V2DF/V2DI splat\n-(define_insn \"vsx_splat_<mode>\"\n-  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=<VSa>,<VSa>,we\")\n+(define_insn_and_split \"vsx_splat_<mode>\"\n+  [(set (match_operand:VSX_D 0 \"vsx_register_operand\"\n+\t\t\t\t\t\"=<VSa>,    <VSa>,we,<VS_64dm>\")\n \t(vec_duplicate:VSX_D\n-\t (match_operand:<VS_scalar> 1 \"splat_input_operand\" \"<VS_64reg>,Z,b\")))]\n+\t (match_operand:<VS_scalar> 1 \"splat_input_operand\"\n+\t\t\t\t\t\"<VS_64reg>,Z,    b, wr\")))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n   \"@\n    xxpermdi %x0,%x1,%x1,0\n    lxvdsx %x0,%y1\n-   mtvsrdd %x0,%1,%1\"\n-  [(set_attr \"type\" \"vecperm,vecload,vecperm\")])\n+   mtvsrdd %x0,%1,%1\n+   #\"\n+  \"&& reload_completed && TARGET_POWERPC64 && !TARGET_P9_VECTOR\n+   && int_reg_operand (operands[1], <VS_scalar>mode)\"\n+  [(set (match_dup 2)\n+\t(match_dup 1))\n+   (set (match_dup 0)\n+\t(vec_duplicate:VSX_D (match_dup 2)))]\n+{\n+  operands[2] = gen_rtx_REG (<VS_scalar>mode, reg_or_subregno (operands[0]));\n+}\n+  [(set_attr \"type\" \"vecperm,vecload,vecperm,vecperm\")\n+   (set_attr \"length\" \"4,4,4,8\")])\n \n ;; V4SI splat support\n (define_insn \"vsx_splat_v4si\""}, {"sha": "72c74df18d23e024ade9094596164d2f03a912ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207f34233c1d3fff9e07ecf2bd7dc30d86822e66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207f34233c1d3fff9e07ecf2bd7dc30d86822e66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=207f34233c1d3fff9e07ecf2bd7dc30d86822e66", "patch": "@@ -1,3 +1,8 @@\n+2017-03-16  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/71294\n+\t* g++.dg/pr71294.C: New test.\n+\n 2017-03-16  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* gcc.dg/tree-prof/pr66295.c: Skip unless on an x86 target."}, {"sha": "55dd01e5ccf12ab8aed79dd09a3fa0df7e444ba4", "filename": "gcc/testsuite/g++.dg/pr71294.C", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207f34233c1d3fff9e07ecf2bd7dc30d86822e66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71294.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207f34233c1d3fff9e07ecf2bd7dc30d86822e66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71294.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71294.C?ref=207f34233c1d3fff9e07ecf2bd7dc30d86822e66", "patch": "@@ -0,0 +1,60 @@\n+// { dg-do compile { target { powerpc64*-*-* && lp64 } } }\n+// { dg-require-effective-target powerpc_p8vector_ok } */\n+// { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } }\n+// { dg-options \"-mcpu=power8 -O3 -fstack-protector -mno-lra\" }\n+\n+// PAR target/71294 failed because RELOAD could not figure how create a V2DI\n+// vector that auto vectorization created with each element being the same\n+// stack address, with stack-protector turned on.\n+\n+class A;\n+template <typename _Tp, int m, int n> class B {\n+public:\n+  _Tp val[m * n];\n+};\n+class C {\n+public:\n+  C(A);\n+};\n+struct D {\n+  D();\n+  unsigned long &operator[](int);\n+  unsigned long *p;\n+};\n+class A {\n+public:\n+  template <typename _Tp, int m, int n> A(const B<_Tp, m, n> &, bool);\n+  int rows, cols;\n+  unsigned char *data;\n+  unsigned char *datastart;\n+  unsigned char *dataend;\n+  unsigned char *datalimit;\n+  D step;\n+};\n+template <typename _Tp, int m, int n>\n+A::A(const B<_Tp, m, n> &p1, bool)\n+    : rows(m), cols(n) {\n+  step[0] = cols * sizeof(_Tp);\n+  datastart = data = (unsigned char *)p1.val;\n+  datalimit = dataend = datastart + rows * step[0];\n+}\n+class F {\n+public:\n+  static void compute(C);\n+  template <typename _Tp, int m, int n, int nm>\n+  static void compute(const B<_Tp, m, n> &, B<_Tp, nm, 1> &, B<_Tp, m, nm> &,\n+                      B<_Tp, n, nm> &);\n+};\n+D::D() {}\n+unsigned long &D::operator[](int p1) { return p[p1]; }\n+template <typename _Tp, int m, int n, int nm>\n+void F::compute(const B<_Tp, m, n> &, B<_Tp, nm, 1> &, B<_Tp, m, nm> &,\n+                B<_Tp, n, nm> &p4) {\n+  A a(p4, false);\n+  compute(a);\n+}\n+void fn1() {\n+  B<double, 4, 4> b, c, e;\n+  B<double, 4, 1> d;\n+  F::compute(b, d, c, e);\n+}"}]}