{"sha": "2d41ed582029561858ae03b01234cc05e1730107", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ0MWVkNTgyMDI5NTYxODU4YWUwM2IwMTIzNGNjMDVlMTczMDEwNw==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2014-11-14T21:21:25Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2014-11-14T21:21:25Z"}, "message": "[AARCH64] Add scheduler for ThunderX\n\nThis adds the schedule model for ThunderX. There are a few TODOs in that\nnot all of the SIMD is model currently.  Also the idea of a simple\nshift/extend is not modeled and all cases where there is a shift/extend\nis considered as non simple and take up two cycles rather than correct\nvalue of one cycle.  Also the 32bit divide and the 64bit divide\nhave different cycle counts but there is no way to model that currently.\nAlso multiply high takes one cycle more than the normal multiply but\nthere is no way to model that currently either.\n\nBuild and tested for aarch64-elf with no regressions.\n\nChangeLog:\n* config/aarch64/aarch64-cores.def (thunderx): Change the scheduler\nover to thunderx.\n* config/aarch64/aarch64.md: Include thunderx.md.\n(generic_sched): Set to no for thunderx.\n* config/aarch64/thunderx.md: New file.\n\nFrom-SVN: r217593", "tree": {"sha": "ddfaaa1597dfadd800e1c108e4f32ad83cc38cc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddfaaa1597dfadd800e1c108e4f32ad83cc38cc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d41ed582029561858ae03b01234cc05e1730107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d41ed582029561858ae03b01234cc05e1730107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d41ed582029561858ae03b01234cc05e1730107", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d41ed582029561858ae03b01234cc05e1730107/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c307d8f7eca608544d183c8c3d068a40571676c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c307d8f7eca608544d183c8c3d068a40571676c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c307d8f7eca608544d183c8c3d068a40571676c"}], "stats": {"total": 273, "additions": 271, "deletions": 2}, "files": [{"sha": "600ef7b058fddec18bc3181500418ecd2a28f5c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d41ed582029561858ae03b01234cc05e1730107/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d41ed582029561858ae03b01234cc05e1730107/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d41ed582029561858ae03b01234cc05e1730107", "patch": "@@ -1,3 +1,11 @@\n+2014-11-14  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* config/aarch64/aarch64-cores.def (thunderx): Change the scheduler\n+\tover to thunderx.\n+\t* config/aarch64/aarch64.md: Include thunderx.md.\n+\t(generic_sched): Set to no for thunderx.\n+\t* config/aarch64/thunderx.md: New file.\n+\n 2014-11-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/predicates.md (easy_fp_constant): Delete redunant"}, {"sha": "471cdd6f5626911cc88abd2d73dec0586fbe9d31", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d41ed582029561858ae03b01234cc05e1730107/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d41ed582029561858ae03b01234cc05e1730107/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=2d41ed582029561858ae03b01234cc05e1730107", "patch": "@@ -36,7 +36,7 @@\n \n AARCH64_CORE(\"cortex-a53\",  cortexa53, cortexa53, 8,  AARCH64_FL_FPSIMD | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, cortexa53)\n AARCH64_CORE(\"cortex-a57\",  cortexa15, cortexa15, 8,  AARCH64_FL_FPSIMD | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, cortexa57)\n-AARCH64_CORE(\"thunderx\",    thunderx,  cortexa53, 8,  AARCH64_FL_FPSIMD | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx)\n+AARCH64_CORE(\"thunderx\",    thunderx,  thunderx, 8,  AARCH64_FL_FPSIMD | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx)\n \n /* V8 big.LITTLE implementations.  */\n "}, {"sha": "5e1a2756de6639c198cec267a51ac8dce9713e76", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d41ed582029561858ae03b01234cc05e1730107/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d41ed582029561858ae03b01234cc05e1730107/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=2d41ed582029561858ae03b01234cc05e1730107", "patch": "@@ -191,13 +191,14 @@\n \n (define_attr \"generic_sched\" \"yes,no\"\n   (const (if_then_else\n-          (eq_attr \"tune\" \"cortexa53,cortexa15\")\n+          (eq_attr \"tune\" \"cortexa53,cortexa15,thunderx\")\n           (const_string \"no\")\n           (const_string \"yes\"))))\n \n ;; Scheduling\n (include \"../arm/cortex-a53.md\")\n (include \"../arm/cortex-a15.md\")\n+(include \"thunderx.md\")\n \n ;; -------------------------------------------------------------------\n ;; Jumps and other miscellaneous insns"}, {"sha": "30e43958c5859ac2cfb96bcbefb78eae96f28d2a", "filename": "gcc/config/aarch64/thunderx.md", "status": "added", "additions": 260, "deletions": 0, "changes": 260, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d41ed582029561858ae03b01234cc05e1730107/gcc%2Fconfig%2Faarch64%2Fthunderx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d41ed582029561858ae03b01234cc05e1730107/gcc%2Fconfig%2Faarch64%2Fthunderx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fthunderx.md?ref=2d41ed582029561858ae03b01234cc05e1730107", "patch": "@@ -0,0 +1,260 @@\n+;; Cavium ThunderX pipeline description\n+;; Copyright (C) 2014 Free Software Foundation, Inc.\n+;;\n+;; Written by Andrew Pinski  <apinski@cavium.com>\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+;;   Copyright (C) 2004, 2005, 2006 Cavium Networks.\n+\n+\n+;; Thunder is a dual-issue processor that can issue all instructions on\n+;; pipe0 and a subset on pipe1.\n+\n+\n+(define_automaton \"thunderx_main, thunderx_mult, thunderx_divide, thunderx_simd\")\n+\n+(define_cpu_unit \"thunderx_pipe0\" \"thunderx_main\")\n+(define_cpu_unit \"thunderx_pipe1\" \"thunderx_main\")\n+(define_cpu_unit \"thunderx_mult\" \"thunderx_mult\")\n+(define_cpu_unit \"thunderx_divide\" \"thunderx_divide\")\n+(define_cpu_unit \"thunderx_simd\" \"thunderx_simd\")\n+\n+(define_insn_reservation \"thunderx_add\" 1\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"adc_imm,adc_reg,adr,alu_imm,alu_sreg,alus_imm,alus_sreg,extend,logic_imm,logic_reg,logics_imm,logics_reg,mov_imm,mov_reg\"))\n+  \"thunderx_pipe0 | thunderx_pipe1\")\n+\n+(define_insn_reservation \"thunderx_shift\" 1\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"bfm,extend,shift_imm,shift_reg\"))\n+  \"thunderx_pipe0 | thunderx_pipe1\")\n+\n+\n+;; Arthimentic instructions with an extra shift or extend is two cycles.\n+;; FIXME: This needs more attributes on aarch64 than what is currently there;\n+;;    this is conserative for now.\n+;; Except this is not correct as this is only for !(LSL && shift by 0/1/2/3)\n+;; Except this is not correct as this is only for !(zero extend)\n+\n+(define_insn_reservation \"thunderx_arith_shift\" 2\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"alu_ext,alu_shift_imm,alu_shift_reg,alus_ext,logic_shift_imm,logic_shift_reg,logics_shift_imm,logics_shift_reg,alus_shift_imm\"))\n+  \"thunderx_pipe0 | thunderx_pipe1\")\n+\n+(define_insn_reservation \"thunderx_csel\" 2\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"csel\"))\n+  \"thunderx_pipe0 | thunderx_pipe1\")\n+\n+;; Multiply and mulitply accumulate and count leading zeros can only happen on pipe 1\n+\n+(define_insn_reservation \"thunderx_mul\" 4\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"mul,muls,mla,mlas,clz,smull,umull,smlal,umlal\"))\n+  \"thunderx_pipe1 + thunderx_mult\")\n+\n+;; Multiply high instructions take an extra cycle and cause the muliply unit to\n+;; be busy for an extra cycle.\n+\n+;(define_insn_reservation \"thunderx_mul_high\" 5\n+;  (and (eq_attr \"tune\" \"thunderx\")\n+;       (eq_attr \"type\" \"smull,umull\"))\n+;  \"thunderx_pipe1 + thunderx_mult\")\n+\n+(define_insn_reservation \"thunderx_div32\" 22\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"udiv,sdiv\"))\n+  \"thunderx_pipe1 + thunderx_divide, thunderx_divide * 21\")\n+\n+;(define_insn_reservation \"thunderx_div64\" 38\n+;  (and (eq_attr \"tune\" \"thunderx\")\n+;       (eq_attr \"type\" \"udiv,sdiv\")\n+;       (eq_attr \"mode\" \"DI\"))\n+;  \"thunderx_pipe1 + thunderx_divide, thunderx_divide * 34\")\n+\n+;; Stores take one cycle in pipe 0\n+(define_insn_reservation \"thunderx_store\" 1\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"store1\"))\n+  \"thunderx_pipe0\")\n+\n+;; Store pair are single issued\n+(define_insn_reservation \"thunderx_storepair\" 1\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"store2\"))\n+  \"thunderx_pipe0 + thunderx_pipe1\")\n+\n+\n+;; loads (and load pairs) from L1 take 3 cycles in pipe 0\n+(define_insn_reservation \"thunderx_load\" 3\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"load1, load2\"))\n+  \"thunderx_pipe0\")\n+\n+(define_insn_reservation \"thunderx_brj\" 1\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"branch,trap,call\"))\n+  \"thunderx_pipe1\")\n+\n+;; FPU\n+\n+(define_insn_reservation \"thunderx_fadd\" 4\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"faddd,fadds\"))\n+  \"thunderx_pipe1\")\n+\n+(define_insn_reservation \"thunderx_fconst\" 1\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"fconsts,fconstd\"))\n+  \"thunderx_pipe1\")\n+\n+;; Moves between fp are 2 cycles including min/max/select/abs/neg\n+(define_insn_reservation \"thunderx_fmov\" 2\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"fmov,f_minmaxs,f_minmaxd,fcsel,ffarithd,ffariths\"))\n+  \"thunderx_pipe1\")\n+\n+(define_insn_reservation \"thunderx_fmovgpr\" 2\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"f_mrc, f_mcr\"))\n+  \"thunderx_pipe1\")\n+\n+(define_insn_reservation \"thunderx_fmul\" 6\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"fmacs,fmacd,fmuls,fmuld\"))\n+  \"thunderx_pipe1\")\n+\n+(define_insn_reservation \"thunderx_fdivs\" 12\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"fdivs\"))\n+  \"thunderx_pipe1 + thunderx_divide, thunderx_divide*8\")\n+\n+(define_insn_reservation \"thunderx_fdivd\" 22\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"fdivd\"))\n+  \"thunderx_pipe1 + thunderx_divide, thunderx_divide*18\")\n+\n+(define_insn_reservation \"thunderx_fsqrts\" 17\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"fsqrts\"))\n+  \"thunderx_pipe1 + thunderx_divide, thunderx_divide*13\")\n+\n+(define_insn_reservation \"thunderx_fsqrtd\" 28\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"fsqrtd\"))\n+  \"thunderx_pipe1 + thunderx_divide, thunderx_divide*31\")\n+\n+;; The rounding conversion inside fp is 4 cycles\n+(define_insn_reservation \"thunderx_frint\" 4\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"f_rints,f_rintd\"))\n+  \"thunderx_pipe1\")\n+\n+;; Float to integer with a move from int to/from float is 6 cycles\n+(define_insn_reservation \"thunderx_f_cvt\" 6\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"f_cvt,f_cvtf2i,f_cvti2f\"))\n+  \"thunderx_pipe1\")\n+\n+;; FP/SIMD load/stores happen in pipe 0\n+;; 64bit Loads register/pairs are 4 cycles from L1\n+(define_insn_reservation \"thunderx_64simd_fp_load\" 4\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"f_loadd,f_loads,neon_load1_1reg,\\\n+\t\t\tneon_load1_1reg_q,neon_load1_2reg\"))\n+  \"thunderx_pipe0\")\n+\n+;; 128bit load pair is singled issue and 4 cycles from L1\n+(define_insn_reservation \"thunderx_128simd_pair_load\" 4\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"neon_load1_2reg_q\"))\n+  \"thunderx_pipe0+thunderx_pipe1\")\n+\n+;; FP/SIMD Stores takes one cycle in pipe 0\n+(define_insn_reservation \"thunderx_simd_fp_store\" 1\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"f_stored,f_stores,neon_store1_1reg,neon_store1_1reg_q\"))\n+  \"thunderx_pipe0\")\n+\n+;; 64bit neon store pairs are single issue for one cycle\n+(define_insn_reservation \"thunderx_64neon_storepair\" 1\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"neon_store1_2reg\"))\n+  \"thunderx_pipe0 + thunderx_pipe1\")\n+\n+;; 128bit neon store pair are single issued for two cycles\n+(define_insn_reservation \"thunderx_128neon_storepair\" 2\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"neon_store1_2reg_q\"))\n+  \"(thunderx_pipe0 + thunderx_pipe1)*2\")\n+\n+\n+;; SIMD/NEON (q forms take an extra cycle)\n+\n+;; Thunder simd move instruction types - 2/3 cycles\n+(define_insn_reservation \"thunderx_neon_move\" 2\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"neon_logic, neon_bsl, neon_fp_compare_s, \\\n+\t\t\tneon_fp_compare_d, neon_move\"))\n+  \"thunderx_pipe1 + thunderx_simd\")\n+\n+(define_insn_reservation \"thunderx_neon_move_q\" 3\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"neon_logic_q, neon_bsl_q, neon_fp_compare_s_q, \\\n+\t\t\tneon_fp_compare_d_q, neon_move_q\"))\n+  \"thunderx_pipe1 + thunderx_simd, thunderx_simd\")\n+\n+\n+;; Thunder simd simple/add instruction types - 4/5 cycles\n+\n+(define_insn_reservation \"thunderx_neon_add\" 4\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"neon_reduc_add, neon_reduc_minmax, neon_fp_reduc_add_s, \\\n+\t\t\tneon_fp_reduc_add_d, neon_fp_to_int_s, neon_fp_to_int_d, \\\n+\t\t\tneon_add_halve, neon_sub_halve, neon_qadd, neon_compare, \\\n+\t\t\tneon_compare_zero, neon_minmax, neon_abd, neon_add, neon_sub, \\\n+\t\t\tneon_fp_minmax_s, neon_fp_minmax_d, neon_reduc_add, neon_cls, \\\n+\t\t\tneon_qabs, neon_qneg, neon_fp_addsub_s, neon_fp_addsub_d\"))\n+  \"thunderx_pipe1 + thunderx_simd\")\n+\n+;; BIG NOTE: neon_add_long/neon_sub_long don't have a q form which is incorrect\n+\n+(define_insn_reservation \"thunderx_neon_add_q\" 5\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"neon_reduc_add_q, neon_reduc_minmax_q, neon_fp_reduc_add_s_q, \\\n+\t\t\tneon_fp_reduc_add_d_q, neon_fp_to_int_s_q, neon_fp_to_int_d_q, \\\n+\t\t\tneon_add_halve_q, neon_sub_halve_q, neon_qadd_q, neon_compare_q, \\\n+\t\t\tneon_compare_zero_q, neon_minmax_q, neon_abd_q, neon_add_q, neon_sub_q, \\\n+\t\t\tneon_fp_minmax_s_q, neon_fp_minmax_d_q, neon_reduc_add_q, neon_cls_q, \\\n+\t\t\tneon_qabs_q, neon_qneg_q, neon_fp_addsub_s_q, neon_fp_addsub_d_q, \\\n+\t\t\tneon_add_long, neon_sub_long\"))\n+  \"thunderx_pipe1 + thunderx_simd, thunderx_simd\")\n+\n+\n+;; Thunder 128bit SIMD reads the upper halve in cycle 2 and writes in the last cycle\n+(define_bypass 2 \"thunderx_neon_move_q\" \"thunderx_neon_move_q, thunderx_neon_add_q\")\n+(define_bypass 4 \"thunderx_neon_add_q\" \"thunderx_neon_move_q, thunderx_neon_add_q\")\n+\n+;; Assume both pipes are needed for unknown and multiple-instruction\n+;; patterns.\n+\n+(define_insn_reservation \"thunderx_unknown\" 1\n+  (and (eq_attr \"tune\" \"thunderx\")\n+       (eq_attr \"type\" \"untyped,multiple\"))\n+  \"thunderx_pipe0 + thunderx_pipe1\")\n+\n+"}]}