{"sha": "9ff3516a35fc7223000fd245f62da36045eeb6a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZmMzUxNmEzNWZjNzIyMzAwMGZkMjQ1ZjYyZGEzNjA0NWVlYjZhOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-06-29T20:02:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-06-29T20:02:13Z"}, "message": "(reload): Can't eliminate if frame pointer needed and TO is stack pointer.\n\nSpill HARD_FRAME_POINTER_REGNUM if not FRAME_POINTER_REGNUM and frame pointer\nis needed.\n(spill_hard_reg): If CANT_ELIMINATE, set regs_ever_live; no longer done by\ncallers.\n\nFrom-SVN: r7605", "tree": {"sha": "9db9bc5cf502ce91868ef454586236e7dd18f705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9db9bc5cf502ce91868ef454586236e7dd18f705"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ff3516a35fc7223000fd245f62da36045eeb6a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff3516a35fc7223000fd245f62da36045eeb6a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ff3516a35fc7223000fd245f62da36045eeb6a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff3516a35fc7223000fd245f62da36045eeb6a9/comments", "author": null, "committer": null, "parents": [{"sha": "daf55ac69a0ab8a559d68d9b0b0b1fc2b120de26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daf55ac69a0ab8a559d68d9b0b0b1fc2b120de26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daf55ac69a0ab8a559d68d9b0b0b1fc2b120de26"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "360dc89238944ba8153f21dce0e67d44c4db5f13", "filename": "gcc/reload1.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff3516a35fc7223000fd245f62da36045eeb6a9/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff3516a35fc7223000fd245f62da36045eeb6a9/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=9ff3516a35fc7223000fd245f62da36045eeb6a9", "patch": "@@ -614,8 +614,7 @@ reload (first, global, dumpfile)\n     {\n       ep->can_eliminate = ep->can_eliminate_previous\n \t= (CAN_ELIMINATE (ep->from, ep->to)\n-\t   && (ep->from != HARD_FRAME_POINTER_REGNUM \n-\t       || ! frame_pointer_needed));\n+\t   && ! (ep->to == STACK_POINTER_REGNUM && frame_pointer_needed));\n     }\n #else\n   reg_eliminate[0].can_eliminate = reg_eliminate[0].can_eliminate_previous\n@@ -703,10 +702,12 @@ reload (first, global, dumpfile)\n   /* Spill any hard regs that we know we can't eliminate.  */\n   for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n     if (! ep->can_eliminate)\n-      {\n-\tspill_hard_reg (ep->from, global, dumpfile, 1);\n-\tregs_ever_live[ep->from] = 1;\n-      }\n+      spill_hard_reg (ep->from, global, dumpfile, 1);\n+\n+#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n+  if (frame_pointer_needed)\n+    spill_hard_reg (HARD_FRAME_POINTER_REGNUM, global, dumpfile, 1);\n+#endif\n \n   if (global)\n     for (i = 0; i < N_REG_CLASSES; i++)\n@@ -760,6 +761,7 @@ reload (first, global, dumpfile)\n       rtx max_nongroups_insn[N_REG_CLASSES];\n       rtx x;\n       int starting_frame_size = get_frame_size ();\n+      int previous_frame_pointer_needed = frame_pointer_needed;\n       static char *reg_class_names[] = REG_CLASS_NAMES;\n \n       something_changed = 0;\n@@ -1504,12 +1506,21 @@ reload (first, global, dumpfile)\n \t    {\n \t      ep->can_eliminate_previous = 0;\n \t      spill_hard_reg (ep->from, global, dumpfile, 1);\n-\t      regs_ever_live[ep->from] = 1;\n \t      something_changed = 1;\n \t      num_eliminable--;\n \t    }\n \t}\n \n+#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n+      /* If we didn't need a frame pointer last time, but we do now, spill\n+\t the hard frame pointer.  */\n+      if (frame_pointer_needed && ! previous_frame_pointer_needed)\n+\t{\n+\t  spill_hard_reg (HARD_FRAME_POINTER_REGNUM, global, dumpfile, 1);\n+\t  something_changed = 1;\n+\t}\n+#endif\n+\n       /* If all needs are met, we win.  */\n \n       for (i = 0; i < N_REG_CLASSES; i++)\n@@ -3355,6 +3366,9 @@ spill_hard_reg (regno, global, dumpfile, cant_eliminate)\n \n   SET_HARD_REG_BIT (forbidden_regs, regno);\n \n+  if (cant_eliminate)\n+    regs_ever_live[regno] = 1;\n+\n   /* Spill every pseudo reg that was allocated to this reg\n      or to something that overlaps this reg.  */\n "}]}