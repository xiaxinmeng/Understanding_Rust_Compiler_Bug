{"sha": "cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q4YjE5YWZjMGQyYmUyYWE3ZmE5ZTA4NTE4ODhmYzBhZTIyN2Q3Mg==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2016-10-07T21:36:41Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2016-10-07T21:36:41Z"}, "message": "aarch64-arches.def (AARCH64_ARCH): #undef at the end.\n\n2016-10-07  Andrew Pinski  <apinski@cavium.com>\n\n        * config/aarch64/aarch64-arches.def (AARCH64_ARCH): #undef at the end.\n        * config/aarch64/aarch64-cores.def (AARCH64_CORE): Likewise.\n        * config/aarch64/aarch64-fusion-pairs.def (AARCH64_FUSION_PAIR): Likewise.\n        * config/aarch64/aarch64-option-extensions.def (AARCH64_OPT_EXTENSION): Likewise.\n        * config/aarch64/aarch64-tuning-flags.def (AARCH64_EXTRA_TUNING_OPTION): Likewise.\n        * config/aarch64/aarch64-opts.h (AARCH64_CORE): Don't #undef here.\n        (AARCH64_ARCH): Likewise.\n        * common/config/aarch64/aarch64-common.c (AARCH64_OPT_EXTENSION): Likewise.\n        (AARCH64_CORE): Likewise.\n        (AARCH64_ARCH): Likewise.\n        * config/aarch64/aarch64-protos.h (AARCH64_FUSION_PAIR): Likewise.\n        (AARCH64_EXTRA_TUNING_OPTION): Likewise.\n        * config/aarch64/aarch64.c (AARCH64_FUION_PAIR): Likewise.\n        (AARCH64_EXTRA_TUNING_OPTION): Likewise.\n        (AARCH64_ARCH): Likewise.\n        (AARCH64_CORE): Likewise.\n        * config/aarch64/aarch64.h (AARCH64_CORE): Likewise.\n        * config/aarch64/driver-aarch64.c (AARCH64_OPT_EXTENSION): Likewise.\n        (AARCH64_CORE): Likewise.\n        (AARCH64_ARCH): Likewise.\n\nFrom-SVN: r240876", "tree": {"sha": "5334ab5560aefe8dc4fa3ab241c482943d349a7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5334ab5560aefe8dc4fa3ab241c482943d349a7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "56d3a930ae50cd8ab744a1d2ea4ed803995b47bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56d3a930ae50cd8ab744a1d2ea4ed803995b47bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56d3a930ae50cd8ab744a1d2ea4ed803995b47bf"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "a7d6689566db5d56740e1aba20a3b8d2fa5d985d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72", "patch": "@@ -1,3 +1,26 @@\n+2016-10-07  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* config/aarch64/aarch64-arches.def (AARCH64_ARCH): #undef at the end.\n+\t* config/aarch64/aarch64-cores.def (AARCH64_CORE): Likewise.\n+\t* config/aarch64/aarch64-fusion-pairs.def (AARCH64_FUSION_PAIR): Likewise.\n+\t* config/aarch64/aarch64-option-extensions.def (AARCH64_OPT_EXTENSION): Likewise.\n+\t* config/aarch64/aarch64-tuning-flags.def (AARCH64_EXTRA_TUNING_OPTION): Likewise.\n+\t* config/aarch64/aarch64-opts.h (AARCH64_CORE): Don't #undef here.\n+\t(AARCH64_ARCH): Likewise.\n+\t* common/config/aarch64/aarch64-common.c (AARCH64_OPT_EXTENSION): Likewise.\n+\t(AARCH64_CORE): Likewise.\n+\t(AARCH64_ARCH): Likewise.\n+\t* config/aarch64/aarch64-protos.h (AARCH64_FUSION_PAIR): Likewise.\n+\t(AARCH64_EXTRA_TUNING_OPTION): Likewise.\n+\t* config/aarch64/aarch64.c (AARCH64_FUION_PAIR): Likewise.\n+\t(AARCH64_EXTRA_TUNING_OPTION): Likewise.\n+\t(AARCH64_ARCH): Likewise.\n+\t(AARCH64_CORE): Likewise.\n+\t* config/aarch64/aarch64.h (AARCH64_CORE): Likewise.\n+\t* config/aarch64/driver-aarch64.c (AARCH64_OPT_EXTENSION): Likewise.\n+\t(AARCH64_CORE): Likewise.\n+\t(AARCH64_ARCH): Likewise.\n+\n 2016-10-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Split"}, {"sha": "09debee06b80d2208424dcadcd4fc194f08ad7f5", "filename": "gcc/common/config/aarch64/aarch64-common.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c?ref=cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72", "patch": "@@ -123,7 +123,6 @@ static const struct aarch64_option_extension all_extensions[] =\n #define AARCH64_OPT_EXTENSION(NAME, FLAG_CANONICAL, FLAGS_ON, FLAGS_OFF, Z) \\\n   {NAME, FLAG_CANONICAL, FLAGS_ON, FLAGS_OFF},\n #include \"config/aarch64/aarch64-option-extensions.def\"\n-#undef AARCH64_OPT_EXTENSION\n   {NULL, 0, 0, 0}\n };\n \n@@ -148,7 +147,6 @@ static const struct processor_name_to_arch all_cores[] =\n #define AARCH64_CORE(NAME, X, IDENT, ARCH_IDENT, FLAGS, COSTS, IMP, PART) \\\n   {NAME, AARCH64_ARCH_##ARCH_IDENT, FLAGS},\n #include \"config/aarch64/aarch64-cores.def\"\n-#undef AARCH64_CORE\n   {\"generic\", AARCH64_ARCH_8A, AARCH64_FL_FOR_ARCH8},\n   {\"\", aarch64_no_arch, 0}\n };\n@@ -159,7 +157,6 @@ static const struct arch_to_arch_name all_architectures[] =\n #define AARCH64_ARCH(NAME, CORE, ARCH_IDENT, ARCH, FLAGS) \\\n   {AARCH64_ARCH_##ARCH_IDENT, NAME, FLAGS},\n #include \"config/aarch64/aarch64-arches.def\"\n-#undef AARCH64_ARCH\n   {aarch64_no_arch, \"\", 0}\n };\n "}, {"sha": "830a7cf545532c050847a8c915d21bef12152388", "filename": "gcc/config/aarch64/aarch64-arches.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def?ref=cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72", "patch": "@@ -34,3 +34,4 @@ AARCH64_ARCH(\"armv8-a\",\t      generic,\t     8A,\t8,  AARCH64_FL_FOR_ARCH8)\n AARCH64_ARCH(\"armv8.1-a\",     generic,\t     8_1A,\t8,  AARCH64_FL_FOR_ARCH8_1)\n AARCH64_ARCH(\"armv8.2-a\",     generic,\t     8_2A,\t8,  AARCH64_FL_FOR_ARCH8_2)\n \n+#undef AARCH64_ARCH"}, {"sha": "516d12b577fef14df288ad396f0d9963d1783aca", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72", "patch": "@@ -70,3 +70,5 @@ AARCH64_CORE(\"cortex-a57.cortex-a53\",  cortexa57cortexa53, cortexa53, 8A,  AARCH\n AARCH64_CORE(\"cortex-a72.cortex-a53\",  cortexa72cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa72, \"0x41\", \"0xd08.0xd03\")\n AARCH64_CORE(\"cortex-a73.cortex-a35\",  cortexa73cortexa35, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa73, \"0x41\", \"0xd09.0xd04\")\n AARCH64_CORE(\"cortex-a73.cortex-a53\",  cortexa73cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa73, \"0x41\", \"0xd09.0xd03\")\n+\n+#undef AARCH64_CORE"}, {"sha": "e50ced4cdc61d0e2bf2b99beb660302e3c6a326b", "filename": "gcc/config/aarch64/aarch64-fusion-pairs.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def?ref=cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72", "patch": "@@ -35,3 +35,4 @@ AARCH64_FUSION_PAIR (\"adrp+ldr\", ADRP_LDR)\n AARCH64_FUSION_PAIR (\"cmp+branch\", CMP_BRANCH)\n AARCH64_FUSION_PAIR (\"aes+aesmc\", AES_AESMC)\n \n+#undef AARCH64_FUSION_PAIR"}, {"sha": "b8921ce73ec761883d15d1199c323733b10da014", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72", "patch": "@@ -59,3 +59,5 @@ AARCH64_OPT_EXTENSION(\"lse\", AARCH64_FL_LSE, 0, 0, \"atomics\")\n /* Enabling \"fp16\" also enables \"fp\".\n    Disabling \"fp16\" just disables \"fp16\".  */\n AARCH64_OPT_EXTENSION(\"fp16\", AARCH64_FL_F16, AARCH64_FL_FP, 0, \"fp16\")\n+\n+#undef AARCH64_OPT_EXTENSION"}, {"sha": "7eaca7e46eae75780d127f6243db9430fe276306", "filename": "gcc/config/aarch64/aarch64-opts.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-opts.h?ref=cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72", "patch": "@@ -28,7 +28,6 @@ enum aarch64_processor\n #define AARCH64_CORE(NAME, INTERNAL_IDENT, SCHED, ARCH, FLAGS, COSTS, IMP, PART) \\\n   INTERNAL_IDENT,\n #include \"aarch64-cores.def\"\n-#undef AARCH64_CORE\n   /* Used to indicate that no processor has been specified.  */\n   generic,\n   /* Used to mark the end of the processor table.  */\n@@ -40,7 +39,6 @@ enum aarch64_arch\n #define AARCH64_ARCH(NAME, CORE, ARCH_IDENT, ARCH_REV, FLAGS) \\\n   AARCH64_ARCH_##ARCH_IDENT,\n #include \"aarch64-arches.def\"\n-#undef AARCH64_ARCH\n   aarch64_no_arch\n };\n "}, {"sha": "07a8cd0455d64a861cb919083a9d369bf23724b7", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72", "patch": "@@ -248,7 +248,6 @@ enum aarch64_fusion_pairs_index\n #include \"aarch64-fusion-pairs.def\"\n   AARCH64_FUSE_index_END\n };\n-#undef AARCH64_FUSION_PAIR\n \n #define AARCH64_FUSION_PAIR(x, name) \\\n   AARCH64_FUSE_##name = (1u << AARCH64_FUSE_##name##_index),\n@@ -259,7 +258,6 @@ enum aarch64_fusion_pairs\n #include \"aarch64-fusion-pairs.def\"\n   AARCH64_FUSE_ALL = (1u << AARCH64_FUSE_index_END) - 1\n };\n-#undef AARCH64_FUSION_PAIR\n \n #define AARCH64_EXTRA_TUNING_OPTION(x, name) \\\n   AARCH64_EXTRA_TUNE_##name##_index,\n@@ -269,7 +267,6 @@ enum aarch64_extra_tuning_flags_index\n #include \"aarch64-tuning-flags.def\"\n   AARCH64_EXTRA_TUNE_index_END\n };\n-#undef AARCH64_EXTRA_TUNING_OPTION\n \n \n #define AARCH64_EXTRA_TUNING_OPTION(x, name) \\\n@@ -281,7 +278,6 @@ enum aarch64_extra_tuning_flags\n #include \"aarch64-tuning-flags.def\"\n   AARCH64_EXTRA_TUNE_ALL = (1u << AARCH64_EXTRA_TUNE_index_END) - 1\n };\n-#undef AARCH64_EXTRA_TUNING_OPTION\n \n /* Enum describing the various ways that the\n    aarch64_parse_{arch,tune,cpu,extension} functions can fail."}, {"sha": "b0118be1b61e6f3f808bdeccd861f52c56700233", "filename": "gcc/config/aarch64/aarch64-tuning-flags.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def?ref=cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72", "patch": "@@ -34,3 +34,5 @@ AARCH64_EXTRA_TUNING_OPTION (\"rename_fma_regs\", RENAME_FMA_REGS)\n two load/stores are not at least 8 byte aligned don't create load/store\n pairs.   */\n AARCH64_EXTRA_TUNING_OPTION (\"slow_unaligned_ldpw\", SLOW_UNALIGNED_LDPW)\n+\n+#undef AARCH64_EXTRA_TUNING_OPTION"}, {"sha": "ea7835ee0f37a6d4620e918b452eddd2a6de95b4", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72", "patch": "@@ -172,7 +172,6 @@ static const struct aarch64_flag_desc aarch64_fusible_pairs[] =\n   { \"all\", AARCH64_FUSE_ALL },\n   { NULL, AARCH64_FUSE_NOTHING }\n };\n-#undef AARCH64_FUION_PAIR\n \n #define AARCH64_EXTRA_TUNING_OPTION(name, internal_name) \\\n   { name, AARCH64_EXTRA_TUNE_##internal_name },\n@@ -183,7 +182,6 @@ static const struct aarch64_flag_desc aarch64_tuning_flags[] =\n   { \"all\", AARCH64_EXTRA_TUNE_ALL },\n   { NULL, AARCH64_EXTRA_TUNE_NONE }\n };\n-#undef AARCH64_EXTRA_TUNING_OPTION\n \n /* Tuning parameters.  */\n \n@@ -828,7 +826,6 @@ static const struct processor all_architectures[] =\n #define AARCH64_ARCH(NAME, CORE, ARCH_IDENT, ARCH_REV, FLAGS) \\\n   {NAME, CORE, CORE, AARCH64_ARCH_##ARCH_IDENT, ARCH_REV, FLAGS, NULL},\n #include \"aarch64-arches.def\"\n-#undef AARCH64_ARCH\n   {NULL, aarch64_none, aarch64_none, aarch64_no_arch, 0, 0, NULL}\n };\n \n@@ -840,7 +837,6 @@ static const struct processor all_cores[] =\n   all_architectures[AARCH64_ARCH_##ARCH].architecture_version,\t\\\n   FLAGS, &COSTS##_tunings},\n #include \"aarch64-cores.def\"\n-#undef AARCH64_CORE\n   {\"generic\", generic, cortexa53, AARCH64_ARCH_8A, 8,\n     AARCH64_FL_FOR_ARCH8, &generic_tunings},\n   {NULL, aarch64_none, aarch64_none, aarch64_no_arch, 0, 0, NULL}"}, {"sha": "584ff5c43afcd1a7918019b09165371bb88bfda1", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72", "patch": "@@ -493,7 +493,6 @@ enum target_cpus\n #define AARCH64_CORE(NAME, INTERNAL_IDENT, SCHED, ARCH, FLAGS, COSTS, IMP, PART) \\\n   TARGET_CPU_##INTERNAL_IDENT,\n #include \"aarch64-cores.def\"\n-#undef AARCH64_CORE\n   TARGET_CPU_generic\n };\n "}, {"sha": "d1aa4c18be4f1b10fd3e5ce141869c8b991dd622", "filename": "gcc/config/aarch64/driver-aarch64.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c?ref=cd8b19afc0d2be2aa7fa9e0851888fc0ae227d72", "patch": "@@ -40,7 +40,6 @@ static struct aarch64_arch_extension aarch64_extensions[] =\n {\n #include \"aarch64-option-extensions.def\"\n };\n-#undef AARCH64_OPT_EXTENSION\n \n \n struct aarch64_core_data\n@@ -61,7 +60,6 @@ static struct aarch64_core_data aarch64_cpu_data[] =\n   { NULL, NULL, NULL, NULL, 0 }\n };\n \n-#undef AARCH64_CORE\n \n struct aarch64_arch_driver_info\n {\n@@ -79,7 +77,6 @@ static struct aarch64_arch_driver_info aarch64_arches[] =\n   {NULL, NULL, 0}\n };\n \n-#undef AARCH64_ARCH\n \n /* Return an aarch64_arch_driver_info for the architecture described\n    by ID, or NULL if ID describes something we don't know about.  */"}]}