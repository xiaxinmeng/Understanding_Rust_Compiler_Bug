{"sha": "2d806801404fc7628a3d022da92b73cd06197f49", "node_id": "C_kwDOANBUbNoAKDJkODA2ODAxNDA0ZmM3NjI4YTNkMDIyZGE5MmI3M2NkMDYxOTdmNDk", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-05-25T16:43:31Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-05-26T16:28:04Z"}, "message": "gccrs: Fix bounds checking to check both sides\n\nWe were missing bounds checking for both lhs and rhs directions this is\nimportant as we might fail checking for all specified bounds properly.\nThis is why for #2236 we need the Type parameter T to realise that it\n_cannot_ coerce to the i32 max function directly without any adjustments\nbecause T has the specified bound of Deref but i32 does not implement\nDeref. This indrectly forces the autoderef cycle to try a deref in order\nto get an i32 which _will_ match the i32 max function in the case we\npass an &32 as the type parameter T.\n\nFixes #2236\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-type-check-path.cc (TypeCheckExpr::resolve_segments): stop if error\n\t* typecheck/rust-tyty-bounds.cc (TypeBoundsProbe::assemble_sized_builtin): fix sized options\n\t* typecheck/rust-tyty.cc (BaseType::satisfies_bound): its ok if its an ?T\n\t(BaseType::bounds_compatible): likewise\n\t* typecheck/rust-tyty.h: update prototype\n\t* typecheck/rust-unify.cc (UnifyRules::go): check both sides bounds\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/execute/torture/issue-2236.rs: New test.\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "501116f5b32b72b897f2d6ead3f205d3f5052bc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/501116f5b32b72b897f2d6ead3f205d3f5052bc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d806801404fc7628a3d022da92b73cd06197f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d806801404fc7628a3d022da92b73cd06197f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d806801404fc7628a3d022da92b73cd06197f49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d806801404fc7628a3d022da92b73cd06197f49/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d47f52a583133e7ea1b703bdc1e0461aa650a414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d47f52a583133e7ea1b703bdc1e0461aa650a414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d47f52a583133e7ea1b703bdc1e0461aa650a414"}], "stats": {"total": 114, "additions": 93, "deletions": 21}, "files": [{"sha": "68966e06fc302b7a45c35c5e9b308fde840a9292", "filename": "gcc/rust/typecheck/rust-hir-type-check-path.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d806801404fc7628a3d022da92b73cd06197f49/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d806801404fc7628a3d022da92b73cd06197f49/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc?ref=2d806801404fc7628a3d022da92b73cd06197f49", "patch": "@@ -422,6 +422,11 @@ TypeCheckExpr::resolve_segments (NodeId root_resolved_node_id,\n \t\t\t\t     TyTy::TyWithLocation (prev_segment),\n \t\t\t\t     TyTy::TyWithLocation (impl_block_ty),\n \t\t\t\t     seg.get_locus ());\n+\t  bool ok = prev_segment->get_kind () != TyTy::TypeKind::ERROR;\n+\t  if (!ok)\n+\t    {\n+\t      return;\n+\t    }\n \n \t  if (found_impl_trait)\n \t    {"}, {"sha": "12e66593546d2bc660a4343f2f475c7a2cf5c24d", "filename": "gcc/rust/typecheck/rust-tyty-bounds.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d806801404fc7628a3d022da92b73cd06197f49/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d806801404fc7628a3d022da92b73cd06197f49/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc?ref=2d806801404fc7628a3d022da92b73cd06197f49", "patch": "@@ -111,7 +111,6 @@ TypeBoundsProbe::assemble_sized_builtin ()\n     case TyTy::REF:\n     case TyTy::POINTER:\n     case TyTy::PARAM:\n-    case TyTy::ARRAY:\n     case TyTy::SLICE:\n     case TyTy::FNDEF:\n     case TyTy::FNPTR:\n@@ -123,16 +122,16 @@ TypeBoundsProbe::assemble_sized_builtin ()\n     case TyTy::FLOAT:\n     case TyTy::USIZE:\n     case TyTy::ISIZE:\n+    case TyTy::CLOSURE:\n+    case TyTy::INFER:\n       assemble_builtin_candidate (Analysis::RustLangItem::SIZED);\n       break;\n \n-      // not-sure about this.... FIXME\n-    case TyTy::INFER:\n+    case TyTy::ARRAY:\n     case TyTy::NEVER:\n     case TyTy::PLACEHOLDER:\n     case TyTy::PROJECTION:\n     case TyTy::DYNAMIC:\n-    case TyTy::CLOSURE:\n     case TyTy::ERROR:\n       break;\n     }"}, {"sha": "312fc5995d2d5795b29f1381f499e6541663d9f2", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d806801404fc7628a3d022da92b73cd06197f49/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d806801404fc7628a3d022da92b73cd06197f49/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=2d806801404fc7628a3d022da92b73cd06197f49", "patch": "@@ -273,8 +273,11 @@ BaseType::get_locus () const\n \n // FIXME this is missing locus\n bool\n-BaseType::satisfies_bound (const TypeBoundPredicate &predicate) const\n+BaseType::satisfies_bound (const TypeBoundPredicate &predicate,\n+\t\t\t   bool emit_error) const\n {\n+  bool is_infer_var = destructure ()->get_kind () == TyTy::TypeKind::INFER;\n+\n   const Resolver::TraitReference *query = predicate.get ();\n   for (const auto &bound : specified_bounds)\n     {\n@@ -283,6 +286,9 @@ BaseType::satisfies_bound (const TypeBoundPredicate &predicate) const\n \treturn true;\n     }\n \n+  if (is_infer_var)\n+    return true;\n+\n   bool satisfied = false;\n   auto probed = Resolver::TypeBoundsProbe::Probe (this);\n   for (const auto &b : probed)\n@@ -313,6 +319,11 @@ BaseType::satisfies_bound (const TypeBoundPredicate &predicate) const\n       const HIR::ImplBlock &impl = *(b.second);\n       for (const auto &item : impl.get_impl_items ())\n \t{\n+\t  bool is_associated_type = item->get_impl_item_type ()\n+\t\t\t\t    == HIR::ImplItem::ImplItemType::TYPE_ALIAS;\n+\t  if (!is_associated_type)\n+\t    continue;\n+\n \t  TyTy::BaseType *impl_item_ty = nullptr;\n \t  Analysis::NodeMapping i = item->get_impl_mappings ();\n \t  bool query_ok = Resolver::query_type (i.get_hirid (), &impl_item_ty);\n@@ -331,15 +342,21 @@ BaseType::satisfies_bound (const TypeBoundPredicate &predicate) const\n \t  // compare the types\n \t  if (!bound_ty->can_eq (impl_item_ty, false))\n \t    {\n-\t      RichLocation r (mappings->lookup_location (get_ref ()));\n-\t      r.add_range (predicate.get_locus ());\n-\t      r.add_range (mappings->lookup_location (i.get_hirid ()));\n-\n-\t      rust_error_at (\n-\t\tr, \"expected %<%s%> got %<%s%>\",\n-\t\tbound_ty->destructure ()->get_name ().c_str (),\n-\t\timpl_item_ty->destructure ()->get_name ().c_str ());\n-\t      return false;\n+\t      if (!impl_item_ty->can_eq (bound_ty, false))\n+\t\t{\n+\t\t  if (emit_error)\n+\t\t    {\n+\t\t      RichLocation r (mappings->lookup_location (get_ref ()));\n+\t\t      r.add_range (predicate.get_locus ());\n+\t\t      r.add_range (mappings->lookup_location (i.get_hirid ()));\n+\n+\t\t      rust_error_at (\n+\t\t\tr, \"expected %<%s%> got %<%s%>\",\n+\t\t\tbound_ty->destructure ()->get_name ().c_str (),\n+\t\t\timpl_item_ty->destructure ()->get_name ().c_str ());\n+\t\t    }\n+\t\t  return false;\n+\t\t}\n \t    }\n \t}\n \n@@ -357,7 +374,7 @@ BaseType::bounds_compatible (const BaseType &other, Location locus,\n     unsatisfied_bounds;\n   for (auto &bound : get_specified_bounds ())\n     {\n-      if (!other.satisfies_bound (bound))\n+      if (!other.satisfies_bound (bound, emit_error))\n \tunsatisfied_bounds.push_back (bound);\n     }\n "}, {"sha": "f9e4b513fe47cefe1e59dbc0bccf104ee04966c1", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d806801404fc7628a3d022da92b73cd06197f49/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d806801404fc7628a3d022da92b73cd06197f49/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=2d806801404fc7628a3d022da92b73cd06197f49", "patch": "@@ -114,7 +114,8 @@ class BaseType : public TypeBoundsMappings\n   //     2. (For functions) have the same signature\n   virtual bool is_equal (const BaseType &other) const;\n \n-  bool satisfies_bound (const TypeBoundPredicate &predicate) const;\n+  bool satisfies_bound (const TypeBoundPredicate &predicate,\n+\t\t\tbool emit_error) const;\n   bool bounds_compatible (const BaseType &other, Location locus,\n \t\t\t  bool emit_error) const;\n   void inherit_bounds (const BaseType &other);"}, {"sha": "19a4e238ffa606b33bae77ce1a50bc19a0d42fd0", "filename": "gcc/rust/typecheck/rust-unify.cc", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d806801404fc7628a3d022da92b73cd06197f49/gcc%2Frust%2Ftypecheck%2Frust-unify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d806801404fc7628a3d022da92b73cd06197f49/gcc%2Frust%2Ftypecheck%2Frust-unify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-unify.cc?ref=2d806801404fc7628a3d022da92b73cd06197f49", "patch": "@@ -151,13 +151,26 @@ UnifyRules::go ()\n \t      rtype->debug_str ().c_str ());\n \n   // check bounds\n-  if (ltype->num_specified_bounds () > 0)\n+  bool should_check_bounds = !ltype->is_equal (*rtype);\n+  if (should_check_bounds)\n     {\n-      if (!ltype->bounds_compatible (*rtype, locus, emit_error))\n+      if (ltype->num_specified_bounds () > 0)\n \t{\n-\t  // already emitted an error\n-\t  emit_error = false;\n-\t  return new TyTy::ErrorType (0);\n+\t  if (!ltype->bounds_compatible (*rtype, locus, emit_error))\n+\t    {\n+\t      // already emitted an error\n+\t      emit_error = false;\n+\t      return new TyTy::ErrorType (0);\n+\t    }\n+\t}\n+      else if (rtype->num_specified_bounds () > 0)\n+\t{\n+\t  if (!rtype->bounds_compatible (*ltype, locus, emit_error))\n+\t    {\n+\t      // already emitted an error\n+\t      emit_error = false;\n+\t      return new TyTy::ErrorType (0);\n+\t    }\n \t}\n     }\n "}, {"sha": "1edc5a5176285345c4827bff66d7515fe564bae0", "filename": "gcc/testsuite/rust/execute/torture/issue-2236.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d806801404fc7628a3d022da92b73cd06197f49/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-2236.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d806801404fc7628a3d022da92b73cd06197f49/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-2236.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-2236.rs?ref=2d806801404fc7628a3d022da92b73cd06197f49", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-w\" }\n+mod core {\n+    mod ops {\n+        #[lang = \"deref\"]\n+        trait Deref {\n+            type Target;\n+            fn deref(&self) -> &Self::Target;\n+        }\n+\n+        impl<T> Deref for &T {\n+            type Target = T;\n+\n+            fn deref(&self) -> &T {\n+                *self\n+            }\n+        }\n+    }\n+}\n+\n+impl i32 {\n+    fn max(self, other: i32) -> i32 {\n+        if self > other {\n+            self\n+        } else {\n+            other\n+        }\n+    }\n+}\n+\n+fn foo<T: core::ops::Deref<Target = i32>>(t: T) -> i32 {\n+    t.max(2)\n+}\n+\n+fn main() -> i32 {\n+    let a: i32 = 1;\n+    foo(&a) - 2\n+}"}]}