{"sha": "15e38d0dce922e77304932817a10f1f42579553f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVlMzhkMGRjZTkyMmU3NzMwNDkzMjgxN2ExMGYxZjQyNTc5NTUzZg==", "commit": {"author": {"name": "Chris Fairles", "email": "chris.fairles@gmail.com", "date": "2008-07-15T23:23:23Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-07-15T23:23:23Z"}, "message": "chrono: New, as per N2661.\n\n2008-07-15  Chris Fairles  <chris.fairles@gmail.com>\n\n        * include/std/chrono: New, as per N2661.\n        * src/chrono.cc: New.\n        * include/Makefile.am: Update.\n        * src/Makefile.am: Likewise.\n        * include/Makefile.in: Regenerate.\n        * src/Makefile.in: Likewise.\n        * acinclude.m4: Add tests for clock_gettime and gettimeofday that\n\tdefine _GLIBCXX_HAS_CLOCK_GETTIME and/or _GLIBCXX_HAS_GETTIMEOFDAY.\n        * configure.ac: Use them.\n        * configure: Regenerate.\n        * config.h.in: Likewise.\n        * config/abi/pre/gnu.ver: Add symbols for system_clock::now() and\n        system_clock::is_monotonic.\n        * testsuite/20_util/duration/cons/1.cc: New.\n        * testsuite/20_util/duration/cons/2.cc: Likewise.\n        * testsuite/20_util/duration/cons/1_neg.cc: Likewise.\n        * testsuite/20_util/duration/requirements/explicit_instantiation/\n        explicit_instantiation.cc: Likewise.\n        * testsuite/20_util/duration/arithmetic/1.cc: Likewise.\n        * testsuite/20_util/duration/arithmetic/2.cc: Likewise.\n        * testsuite/20_util/duration/comparisons/1.cc: Likewise.\n        * testsuite/20_util/time_point/requirements/explicit_instantiation/\n        explicit_instantiation.cc: Likewise.\n        * testsuite/20_util/time_point/1.cc: Likewise.\n        * testsuite/20_util/time_point/2.cc: Likewise.\n        * testsuite/20_util/time_point/3.cc: Likewise.\n        * testsuite/20_util/clocks/1.cc: Likewise.\n        * testsuite/17_intro/headers/c++200x/all_multiple_inclusion.cc: Add\n        missing headers.\n        * testsuite/17_intro/headers/c++200x/all.cc: Likewise.\n        * include/precompiled/stdc++.h: Likewise and remove <date_time>.\n        * doc/doxygen/user.cfg.in: Likewise.\n\nFrom-SVN: r137858", "tree": {"sha": "eafc38353a48e1cd63e574edc380874a144179ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eafc38353a48e1cd63e574edc380874a144179ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15e38d0dce922e77304932817a10f1f42579553f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e38d0dce922e77304932817a10f1f42579553f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15e38d0dce922e77304932817a10f1f42579553f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e38d0dce922e77304932817a10f1f42579553f/comments", "author": {"login": "chrisfearless", "id": 812000, "node_id": "MDQ6VXNlcjgxMjAwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/812000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisfearless", "html_url": "https://github.com/chrisfearless", "followers_url": "https://api.github.com/users/chrisfearless/followers", "following_url": "https://api.github.com/users/chrisfearless/following{/other_user}", "gists_url": "https://api.github.com/users/chrisfearless/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisfearless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisfearless/subscriptions", "organizations_url": "https://api.github.com/users/chrisfearless/orgs", "repos_url": "https://api.github.com/users/chrisfearless/repos", "events_url": "https://api.github.com/users/chrisfearless/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisfearless/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "141368f01df366809a596c6093825d205835c86b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/141368f01df366809a596c6093825d205835c86b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/141368f01df366809a596c6093825d205835c86b"}], "stats": {"total": 2227, "additions": 2220, "deletions": 7}, "files": [{"sha": "3301a014ccf5556447133a9ccc1427797e5f1ccd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -1,3 +1,38 @@\n+2008-07-15  Chris Fairles  <chris.fairles@gmail.com>\n+\n+        * include/std/chrono: New, as per N2661.\n+        * src/chrono.cc: New.\n+        * include/Makefile.am: Update.\n+        * src/Makefile.am: Likewise.\n+        * include/Makefile.in: Regenerate.\n+        * src/Makefile.in: Likewise.\n+        * acinclude.m4: Add tests for clock_gettime and gettimeofday that\n+\tdefine _GLIBCXX_HAS_CLOCK_GETTIME and/or _GLIBCXX_HAS_GETTIMEOFDAY.\n+        * configure.ac: Use them.\n+        * configure: Regenerate.\n+        * config.h.in: Likewise.\n+        * config/abi/pre/gnu.ver: Add symbols for system_clock::now() and\n+        system_clock::is_monotonic.\n+        * testsuite/20_util/duration/cons/1.cc: New.\n+        * testsuite/20_util/duration/cons/2.cc: Likewise.\n+        * testsuite/20_util/duration/cons/1_neg.cc: Likewise.\n+        * testsuite/20_util/duration/requirements/explicit_instantiation/\n+        explicit_instantiation.cc: Likewise.\n+        * testsuite/20_util/duration/arithmetic/1.cc: Likewise.\n+        * testsuite/20_util/duration/arithmetic/2.cc: Likewise.\n+        * testsuite/20_util/duration/comparisons/1.cc: Likewise.\n+        * testsuite/20_util/time_point/requirements/explicit_instantiation/\n+        explicit_instantiation.cc: Likewise.\n+        * testsuite/20_util/time_point/1.cc: Likewise.\n+        * testsuite/20_util/time_point/2.cc: Likewise.\n+        * testsuite/20_util/time_point/3.cc: Likewise.\n+        * testsuite/20_util/clocks/1.cc: Likewise.\n+        * testsuite/17_intro/headers/c++200x/all_multiple_inclusion.cc: Add\n+        missing headers.\n+        * testsuite/17_intro/headers/c++200x/all.cc: Likewise.\n+        * include/precompiled/stdc++.h: Likewise and remove <date_time>.\n+        * doc/doxygen/user.cfg.in: Likewise.\n+\n 2008-07-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/36832"}, {"sha": "e998471c446a29742787caf2e1c01639c263fa65", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -1008,6 +1008,94 @@ AC_DEFUN([GLIBCXX_ENABLE_C99], [\n ])\n \n \n+dnl\n+dnl Check for IEEE Std 1003.1-2001 clock_gettime required for \n+dnl 20.8.5 [time.clock] in the current C++0X working draft.\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_CLOCK_GETTIME], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+  \n+  AC_CHECK_HEADERS(unistd.h, ac_has_unistd_h=yes, ac_has_unistd_h=no)\n+  \n+  ac_has_clock_monotonic=no;  \n+  ac_has_clock_realtime=no;  \n+  if test x\"$ac_has_unistd_h\" = x\"yes\"; then    \n+    AC_MSG_CHECKING([for monotonic clock])\n+    AC_TRY_LINK(\n+      [#include <unistd.h>\n+       #include <time.h>\n+      ],\n+      [#if _POSIX_TIMERS > 0 && defined(_POSIX_MONOTONIC_CLOCK)\n+        timespec tp;     \n+       #endif\n+        clock_gettime(CLOCK_MONOTONIC, &tp);\n+      ], [ac_has_clock_monotonic=yes], [ac_has_clock_monotonic=no])\n+    \n+    AC_MSG_RESULT($ac_has_clock_monotonic)   \n+    \n+    AC_MSG_CHECKING([for realtime clock])\n+    AC_TRY_LINK(\n+      [#include <unistd.h>\n+       #include <time.h>\n+      ],\n+      [#if _POSIX_TIMERS > 0\n+        timespec tp;      \n+       #endif\n+        clock_gettime(CLOCK_REALTIME, &tp);\n+      ], [ac_has_clock_realtime=yes], [ac_has_clock_realtime=no])\n+    \n+    AC_MSG_RESULT($ac_has_clock_realtime)\n+  fi \n+  \n+  if test x\"$ac_has_clock_monotonic\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_CLOCK_MONOTONIC, 1,\n+      [ Defined if clock_gettime has monotonic clock support. ])\n+  fi\n+  \n+  if test x\"$ac_has_clock_realtime\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_CLOCK_REALTIME, 1,\n+      [ Defined if clock_gettime has realtime clock support. ])\n+  fi\n+  \n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+])\n+\n+dnl\n+dnl Check for IEEE Std 1003.1-2001 gettimeofday required for \n+dnl 20.8.5 [time.clock] in the current C++0X working draft.\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_GETTIMEOFDAY], [\n+  \n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+  \n+  ac_has_gettimeofday=no;\n+  AC_CHECK_HEADERS(sys/time.h, ac_has_sys_time_h=yes, ac_has_sys_time_h=no)\n+  if test x\"$ac_has_sys_time_h\" = x\"yes\"; then\n+    AC_MSG_CHECKING([for gettimeofday])\n+    AC_TRY_LINK([#include <sys/time.h>],\n+      [timeval tv; gettimeofday(&tv, 0);],\n+      [ac_has_gettimeofday=yes], [ac_has_gettimeofday=no])\n+    \n+    AC_MSG_RESULT($ac_has_gettimeofday)\n+  fi\n+  \n+  if test x\"$ac_has_gettimeofday\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_GETTIMEOFDAY, 1,\n+      [ Defined if gettimeofday is available. ])\n+  fi\n+  \n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+])\n+\n dnl\n dnl Check for ISO/IEC 9899:1999 \"C99\" support to ISO/IEC DTR 19768 \"TR1\"\n dnl facilities in Chapter 8, \"C compatibility\"."}, {"sha": "256637abcecf532bf0d32b05dc0bbd7f53267d0b", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -811,6 +811,15 @@\n    namespace std::tr1. */\n #undef _GLIBCXX_USE_C99_STDINT_TR1\n \n+/* Defined if clock_gettime has monotonic clock support. */\n+#undef _GLIBCXX_USE_CLOCK_MONOTONIC\n+\n+/* Defined if clock_gettime has realtime clock support. */\n+#undef _GLIBCXX_USE_CLOCK_REALTIME\n+\n+/* Defined if gettimeofday is available. */\n+#undef _GLIBCXX_USE_GETTIMEOFDAY\n+\n /* Define if LFS support is available. */\n #undef _GLIBCXX_USE_LFS\n "}, {"sha": "a9c94fc694b90d7fd61149fe680fce14eee96d9a", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -885,6 +885,10 @@ GLIBCXX_3.4.11 {\n     # char16_t and char32_t\n     _ZNSt14numeric_limitsIu8char*;\n \n+    # chrono\n+    _ZNSt6chrono12system_clock12is_monotonicE;\n+    _ZNSt6chrono12system_clock3nowEv;\n+\n } GLIBCXX_3.4.10;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "901a2dc1e4fbd0d727adf947db68b13dcaad7e44", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 565, "deletions": 0, "changes": 565, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -40947,6 +40947,571 @@ _ACEOF\n \n \n \n+  # For clock_gettime support.\n+\n+\n+\n+\n+  ac_ext=cc\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+\n+for ac_header in unistd.h\n+do\n+as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n+echo $ECHO_N \"checking for $ac_header... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_Header'}'`\" >&6\n+else\n+  # Is the header compilable?\n+echo \"$as_me:$LINENO: checking $ac_header usability\" >&5\n+echo $ECHO_N \"checking $ac_header usability... $ECHO_C\" >&6\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+$ac_includes_default\n+#include <$ac_header>\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_header_compiler=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_header_compiler=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+echo \"$as_me:$LINENO: result: $ac_header_compiler\" >&5\n+echo \"${ECHO_T}$ac_header_compiler\" >&6\n+\n+# Is the header present?\n+echo \"$as_me:$LINENO: checking $ac_header presence\" >&5\n+echo $ECHO_N \"checking $ac_header presence... $ECHO_C\" >&6\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <$ac_header>\n+_ACEOF\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_cpp conftest.$ac_ext\\\"\") >&5\n+  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } >/dev/null; then\n+  if test -s conftest.err; then\n+    ac_cpp_err=$ac_cxx_preproc_warn_flag\n+    ac_cpp_err=$ac_cpp_err$ac_cxx_werror_flag\n+  else\n+    ac_cpp_err=\n+  fi\n+else\n+  ac_cpp_err=yes\n+fi\n+if test -z \"$ac_cpp_err\"; then\n+  ac_header_preproc=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+  ac_header_preproc=no\n+fi\n+rm -f conftest.err conftest.$ac_ext\n+echo \"$as_me:$LINENO: result: $ac_header_preproc\" >&5\n+echo \"${ECHO_T}$ac_header_preproc\" >&6\n+\n+# So?  What about this header?\n+case $ac_header_compiler:$ac_header_preproc:$ac_cxx_preproc_warn_flag in\n+  yes:no: )\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!\" >&5\n+echo \"$as_me: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: proceeding with the compiler's result\" >&5\n+echo \"$as_me: WARNING: $ac_header: proceeding with the compiler's result\" >&2;}\n+    ac_header_preproc=yes\n+    ;;\n+  no:yes:* )\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: present but cannot be compiled\" >&5\n+echo \"$as_me: WARNING: $ac_header: present but cannot be compiled\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header:     check for missing prerequisite headers?\" >&5\n+echo \"$as_me: WARNING: $ac_header:     check for missing prerequisite headers?\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: see the Autoconf documentation\" >&5\n+echo \"$as_me: WARNING: $ac_header: see the Autoconf documentation\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header:     section \\\"Present But Cannot Be Compiled\\\"\" >&5\n+echo \"$as_me: WARNING: $ac_header:     section \\\"Present But Cannot Be Compiled\\\"\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: proceeding with the preprocessor's result\" >&5\n+echo \"$as_me: WARNING: $ac_header: proceeding with the preprocessor's result\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: in the future, the compiler will take precedence\" >&5\n+echo \"$as_me: WARNING: $ac_header: in the future, the compiler will take precedence\" >&2;}\n+    (\n+      cat <<\\_ASBOX\n+## ----------------------------------------- ##\n+## Report this to the package-unused lists.  ##\n+## ----------------------------------------- ##\n+_ASBOX\n+    ) |\n+      sed \"s/^/$as_me: WARNING:     /\" >&2\n+    ;;\n+esac\n+echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n+echo $ECHO_N \"checking for $ac_header... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  eval \"$as_ac_Header=\\$ac_header_preproc\"\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_Header'}'`\" >&6\n+\n+fi\n+if test `eval echo '${'$as_ac_Header'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_header\" | $as_tr_cpp` 1\n+_ACEOF\n+ ac_has_unistd_h=yes\n+else\n+  ac_has_unistd_h=no\n+fi\n+\n+done\n+\n+\n+  ac_has_clock_monotonic=no;\n+  ac_has_clock_realtime=no;\n+  if test x\"$ac_has_unistd_h\" = x\"yes\"; then\n+    echo \"$as_me:$LINENO: checking for monotonic clock\" >&5\n+echo $ECHO_N \"checking for monotonic clock... $ECHO_C\" >&6\n+    if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <unistd.h>\n+       #include <time.h>\n+\n+int\n+main ()\n+{\n+#if _POSIX_TIMERS > 0 && defined(_POSIX_MONOTONIC_CLOCK)\n+        timespec tp;\n+       #endif\n+        clock_gettime(CLOCK_MONOTONIC, &tp);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_has_clock_monotonic=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_has_clock_monotonic=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+\n+    echo \"$as_me:$LINENO: result: $ac_has_clock_monotonic\" >&5\n+echo \"${ECHO_T}$ac_has_clock_monotonic\" >&6\n+\n+    echo \"$as_me:$LINENO: checking for realtime clock\" >&5\n+echo $ECHO_N \"checking for realtime clock... $ECHO_C\" >&6\n+    if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <unistd.h>\n+       #include <time.h>\n+\n+int\n+main ()\n+{\n+#if _POSIX_TIMERS > 0\n+        timespec tp;\n+       #endif\n+        clock_gettime(CLOCK_REALTIME, &tp);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_has_clock_realtime=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_has_clock_realtime=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+\n+    echo \"$as_me:$LINENO: result: $ac_has_clock_realtime\" >&5\n+echo \"${ECHO_T}$ac_has_clock_realtime\" >&6\n+  fi\n+\n+  if test x\"$ac_has_clock_monotonic\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_USE_CLOCK_MONOTONIC 1\n+_ACEOF\n+\n+  fi\n+\n+  if test x\"$ac_has_clock_realtime\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_USE_CLOCK_REALTIME 1\n+_ACEOF\n+\n+  fi\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n+  # For gettimeofday support.\n+\n+\n+\n+\n+  ac_ext=cc\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  ac_has_gettimeofday=no;\n+\n+for ac_header in sys/time.h\n+do\n+as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n+echo $ECHO_N \"checking for $ac_header... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_Header'}'`\" >&6\n+else\n+  # Is the header compilable?\n+echo \"$as_me:$LINENO: checking $ac_header usability\" >&5\n+echo $ECHO_N \"checking $ac_header usability... $ECHO_C\" >&6\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+$ac_includes_default\n+#include <$ac_header>\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_header_compiler=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_header_compiler=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+echo \"$as_me:$LINENO: result: $ac_header_compiler\" >&5\n+echo \"${ECHO_T}$ac_header_compiler\" >&6\n+\n+# Is the header present?\n+echo \"$as_me:$LINENO: checking $ac_header presence\" >&5\n+echo $ECHO_N \"checking $ac_header presence... $ECHO_C\" >&6\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <$ac_header>\n+_ACEOF\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_cpp conftest.$ac_ext\\\"\") >&5\n+  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } >/dev/null; then\n+  if test -s conftest.err; then\n+    ac_cpp_err=$ac_cxx_preproc_warn_flag\n+    ac_cpp_err=$ac_cpp_err$ac_cxx_werror_flag\n+  else\n+    ac_cpp_err=\n+  fi\n+else\n+  ac_cpp_err=yes\n+fi\n+if test -z \"$ac_cpp_err\"; then\n+  ac_header_preproc=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+  ac_header_preproc=no\n+fi\n+rm -f conftest.err conftest.$ac_ext\n+echo \"$as_me:$LINENO: result: $ac_header_preproc\" >&5\n+echo \"${ECHO_T}$ac_header_preproc\" >&6\n+\n+# So?  What about this header?\n+case $ac_header_compiler:$ac_header_preproc:$ac_cxx_preproc_warn_flag in\n+  yes:no: )\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!\" >&5\n+echo \"$as_me: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: proceeding with the compiler's result\" >&5\n+echo \"$as_me: WARNING: $ac_header: proceeding with the compiler's result\" >&2;}\n+    ac_header_preproc=yes\n+    ;;\n+  no:yes:* )\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: present but cannot be compiled\" >&5\n+echo \"$as_me: WARNING: $ac_header: present but cannot be compiled\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header:     check for missing prerequisite headers?\" >&5\n+echo \"$as_me: WARNING: $ac_header:     check for missing prerequisite headers?\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: see the Autoconf documentation\" >&5\n+echo \"$as_me: WARNING: $ac_header: see the Autoconf documentation\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header:     section \\\"Present But Cannot Be Compiled\\\"\" >&5\n+echo \"$as_me: WARNING: $ac_header:     section \\\"Present But Cannot Be Compiled\\\"\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: proceeding with the preprocessor's result\" >&5\n+echo \"$as_me: WARNING: $ac_header: proceeding with the preprocessor's result\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: in the future, the compiler will take precedence\" >&5\n+echo \"$as_me: WARNING: $ac_header: in the future, the compiler will take precedence\" >&2;}\n+    (\n+      cat <<\\_ASBOX\n+## ----------------------------------------- ##\n+## Report this to the package-unused lists.  ##\n+## ----------------------------------------- ##\n+_ASBOX\n+    ) |\n+      sed \"s/^/$as_me: WARNING:     /\" >&2\n+    ;;\n+esac\n+echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n+echo $ECHO_N \"checking for $ac_header... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  eval \"$as_ac_Header=\\$ac_header_preproc\"\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_Header'}'`\" >&6\n+\n+fi\n+if test `eval echo '${'$as_ac_Header'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_header\" | $as_tr_cpp` 1\n+_ACEOF\n+ ac_has_sys_time_h=yes\n+else\n+  ac_has_sys_time_h=no\n+fi\n+\n+done\n+\n+  if test x\"$ac_has_sys_time_h\" = x\"yes\"; then\n+    echo \"$as_me:$LINENO: checking for gettimeofday\" >&5\n+echo $ECHO_N \"checking for gettimeofday... $ECHO_C\" >&6\n+    if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <sys/time.h>\n+int\n+main ()\n+{\n+timeval tv; gettimeofday(&tv, 0);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_has_gettimeofday=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_has_gettimeofday=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+\n+    echo \"$as_me:$LINENO: result: $ac_has_gettimeofday\" >&5\n+echo \"${ECHO_T}$ac_has_gettimeofday\" >&6\n+  fi\n+\n+  if test x\"$ac_has_gettimeofday\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_USE_GETTIMEOFDAY 1\n+_ACEOF\n+\n+  fi\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n   # For TLS support.\n \n    # Check whether --enable-tls or --disable-tls was given."}, {"sha": "b23e17714dd2e90938387ef934b4b9e4c781eaf6", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -161,6 +161,12 @@ if $GLIBCXX_IS_NATIVE; then\n   # For dev/random and dev/urandom for TR1.\n   GLIBCXX_CHECK_RANDOM_TR1\n \n+  # For clock_gettime support.\n+  GLIBCXX_CHECK_CLOCK_GETTIME\n+\n+  # For gettimeofday support.\n+  GLIBCXX_CHECK_GETTIMEOFDAY\n+\n   # For TLS support.\n   GCC_CHECK_TLS\n "}, {"sha": "849d64e24159ce0e12029e14e7090c253189e187", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -468,8 +468,8 @@ INPUT                  = @srcdir@/libsupc++/cxxabi.h \\\n                          include/algorithm \\\n                          include/array \\\n                          include/bitset \\\n+                         include/chrono \\\n                          include/condition_variable \\\n-                         include/date_time \\\n                          include/deque \\\n                          include/fstream \\\n                          include/functional \\\n@@ -489,6 +489,7 @@ INPUT                  = @srcdir@/libsupc++/cxxabi.h \\\n                          include/ostream \\\n                          include/queue \\\n                          include/random \\\n+                         include/ratio \\\n                          include/regex \\\n                          include/set \\\n                          include/sstream \\"}, {"sha": "1249930c80d5961a6f7dc81e5e9230f7b2bb33a8", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -32,6 +32,7 @@ std_headers = \\\n \t${std_srcdir}/array \\\n \t${std_srcdir}/bitset \\\n \t${std_srcdir}/c++0x_warning.h \\\n+\t${std_srcdir}/chrono \\\n \t${std_srcdir}/complex \\\n \t${std_srcdir}/condition_variable \\\n \t${std_srcdir}/deque \\"}, {"sha": "cb529671e3ad04c7dbac19adefcd2c94f693d295", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -285,6 +285,7 @@ std_headers = \\\n \t${std_srcdir}/array \\\n \t${std_srcdir}/bitset \\\n \t${std_srcdir}/c++0x_warning.h \\\n+\t${std_srcdir}/chrono \\\n \t${std_srcdir}/complex \\\n \t${std_srcdir}/condition_variable \\\n \t${std_srcdir}/deque \\"}, {"sha": "b924935367850a89ec69fdd6003830a22e8bb986", "filename": "libstdc++-v3/include/precompiled/stdc++.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -98,8 +98,9 @@\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n #include <array>\n-#include <date_time>\n+#include <chrono>\n #include <random>\n+#include <ratio>\n #include <regex>\n #include <system_error>\n #include <tuple>"}, {"sha": "74fee965f9af9b035a7746a999607f6257ae7075", "filename": "libstdc++-v3/include/std/chrono", "status": "added", "additions": 626, "deletions": 0, "changes": 626, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -0,0 +1,626 @@\n+// <chrono> -*- C++ -*-\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/chrono\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_CHRONO\n+#define _GLIBCXX_CHRONO 1\n+\n+#pragma GCC system_header\n+\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+# include <c++0x_warning.h>\n+#else\n+\n+#ifdef _GLIBCXX_INCLUDE_AS_TR1\n+#  error C++0x header cannot be included from TR1 header\n+#endif\n+\n+#include <ratio>\n+#include <type_traits>\n+#include <limits>\n+#include <ctime>\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+\n+namespace std \n+{\n+  namespace chrono\n+  {\n+    template<typename _Rep, typename _Period = ratio<1>>\n+      struct duration;\n+\n+    template<typename _Clock, typename _Duration = typename _Clock::duration>\n+      struct time_point;\n+  }\n+\n+  // 20.8.2.3 specialization of common_type (for duration)\n+  template<typename _Rep1, typename _Period1, typename _Rep2, typename _Period2>\n+    struct common_type<chrono::duration<_Rep1, _Period1>,\n+                       chrono::duration<_Rep2, _Period2>>\n+    {\n+      typedef chrono::duration<typename common_type<_Rep1, _Rep2>::type,\n+        ratio<__static_gcd<_Period1::num, _Period2::num>::value,\n+        (_Period1::den / __static_gcd<_Period1::den, _Period2::den>::value)\n+        * _Period2::den>> type;\n+    };\n+  \n+  // 20.8.2.3 specialization of common_type (for time_point)\n+  template<typename _Clock, typename _Duration1, typename _Duration2>\n+    struct common_type<chrono::time_point<_Clock, _Duration1>,\n+                       chrono::time_point<_Clock, _Duration2>>\n+    {\n+      typedef chrono::time_point<_Clock, \n+        typename common_type<_Duration1, _Duration2>::type> type;\n+    };\n+\n+  namespace chrono \n+  {\n+    // primary template for duration_cast impl.\n+    template<typename _ToDuration, typename _CF, typename _CR,\n+             bool _NumIsOne = false, bool _DenIsOne = false>\n+      struct __duration_cast_impl\n+      {\n+        template<typename _Rep, typename _Period>\n+          static _ToDuration __cast(const duration<_Rep, _Period>& __d)\n+          {\n+            return _ToDuration(static_cast<\n+              typename _ToDuration::rep>(static_cast<_CR>(__d.count())\n+              * static_cast<_CR>(_CF::num)\n+              / static_cast<_CR>(_CF::den)));\n+          }\n+      };\n+\n+    template<typename _ToDuration, typename _CF, typename _CR>\n+      struct __duration_cast_impl<_ToDuration, _CF, _CR, true, true>\n+      {\n+        template<typename _Rep, typename _Period>\n+          static _ToDuration __cast(const duration<_Rep, _Period>& __d)\n+          {\n+            return _ToDuration(\n+              static_cast<typename _ToDuration::rep>(__d.count()));\n+          }\n+      };\n+\n+    template<typename _ToDuration, typename _CF, typename _CR>\n+      struct __duration_cast_impl<_ToDuration, _CF, _CR, true, false>\n+      {\n+        template<typename _Rep, typename _Period>\n+          static _ToDuration __cast(const duration<_Rep, _Period>& __d)\n+          {\n+            return _ToDuration(static_cast<typename _ToDuration::rep>(\n+              static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den))); \n+          }\n+      };\n+\n+    template<typename _ToDuration, typename _CF, typename _CR>\n+      struct __duration_cast_impl<_ToDuration, _CF, _CR, false, true>\n+      {\n+        template<typename _Rep, typename _Period>\n+          static _ToDuration __cast(const duration<_Rep, _Period>& __d)\n+          {\n+            return _ToDuration(static_cast<typename _ToDuration::rep>(\n+              static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));\n+          }\n+      };\n+\n+    template<typename _ToDuration, typename _Rep, typename _Period>\n+      inline _ToDuration\n+      duration_cast(const duration<_Rep, _Period>& __d)\n+      {\n+        typedef typename\n+          ratio_divide<_Period, typename _ToDuration::period>::type __cf;\n+        typedef typename\n+          common_type<typename _ToDuration::rep, _Rep, intmax_t>::type __cr;\n+\n+        return __duration_cast_impl<_ToDuration, __cf, __cr,\n+          __cf::num == 1, __cf::den == 1>::__cast(__d);\n+      }\n+\n+    template<typename _Rep>\n+      struct treat_as_floating_point \n+      : is_floating_point<_Rep>\n+      { };\n+\n+    template<typename _Rep>\n+      struct duration_values\n+      {\n+        static const _Rep\n+        zero()\n+        { return _Rep(0); }\n+        \n+        static const _Rep\n+        max()\n+        { return numeric_limits<_Rep>::max(); }\n+        \n+        static const _Rep\n+        min()\n+        { return numeric_limits<_Rep>::min(); }\n+      };\n+\n+    template<typename _Rep, typename _Period>\n+      struct duration\n+      {\n+        static_assert(_Period::num > 0, \"period must be positive\");\n+        \n+        typedef _Rep    rep;\n+        typedef _Period period;\n+        \n+        // construction / destruction  \n+        duration ()\n+        : __r(rep(0))\n+        { }\n+\n+        template<typename _Rep2>\n+          explicit duration(_Rep2 const& __rep)\n+          : __r(static_cast<rep>(__rep))\n+          {\n+            static_assert(is_convertible<_Rep2,rep>::value == true \n+              && (treat_as_floating_point<rep>::value == true \n+              || (!treat_as_floating_point<rep>::value \n+              && !treat_as_floating_point<_Rep2>::value)), \n+              \"cannot construct integral duration with floating point type\");\n+          }\n+\n+        duration(const duration& __d)\n+        : __r(__d.count())\n+        { }\n+\n+        // conversions\n+        template<typename _Rep2, typename _Period2>\n+          duration(const duration<_Rep2, _Period2>& __d)\n+          : __r(duration_cast<duration>(__d).count())\n+          {\n+            static_assert(treat_as_floating_point<rep>::value == true \n+              || ratio_divide<_Period2, period>::type::den == 1, \n+              \"the resulting duration is not exactly representable\");\n+          }\n+\n+        // observer\n+        rep\n+        count() const\n+        { return __r; }\n+\n+        // arithmetic\n+        duration\n+        operator+() const \n+        { return *this; }\n+\n+        duration\n+        operator-() const \n+        { return duration(-__r); }\n+\n+        duration&\n+        operator++() \n+        {\n+          ++__r;\n+          return *this;\n+        }\n+\n+        duration\n+        operator++(int) \n+        { return duration(__r++); }\n+\n+        duration&\n+        operator--() \n+        { \n+          --__r;\n+          return *this;\n+        }\n+\n+        duration\n+        operator--(int) \n+        { return duration(__r--); }\n+        \n+        duration&\n+        operator+=(const duration& __d)\n+        {\n+          __r += __d.count();\n+          return *this;\n+        }\n+\n+        duration&\n+        operator-=(const duration& __d)\n+        {\n+          __r -= __d.count();\n+          return *this;\n+        }\n+\n+        duration&\n+        operator*=(const rep& __rhs)\n+        {\n+          __r *= __rhs;\n+          return *this;\n+        }\n+\n+        duration&\n+        operator/=(const rep& __rhs)\n+        { \n+          __r /= __rhs;\n+          return *this;\n+        }\n+\n+        // special values\n+        // TODO: These should be constexprs.\n+        static const duration\n+        zero()\n+        { return duration(duration_values<rep>::zero()); }\n+\n+        static const duration\n+        min()\n+        { return duration(duration_values<rep>::min()); }\n+      \n+        static const duration\n+        max()\n+        { return duration(duration_values<rep>::max()); }\n+   \n+      private:    \n+        rep __r;\n+      };\n+\n+    template<typename _Rep1, typename _Period1,\n+             typename _Rep2, typename _Period2>\n+      inline typename common_type<duration<_Rep1, _Period1>, \n+                                  duration<_Rep2, _Period2>>::type\n+      operator+(const duration<_Rep1, _Period1>& __lhs, \n+                const duration<_Rep2, _Period2>& __rhs)\n+      {\n+        typedef typename common_type<duration<_Rep1, _Period1>, \n+                                     duration<_Rep2, _Period2>>::type __ct;\n+        return __ct(__lhs) += __rhs;\n+      }\n+\n+    template<typename _Rep1, typename _Period1, \n+             typename _Rep2, typename _Period2>\n+      inline typename common_type<duration<_Rep1, _Period1>, \n+                                  duration<_Rep2, _Period2>>::type\n+      operator-(const duration<_Rep1, _Period1>& __lhs, \n+                const duration<_Rep2, _Period2>& __rhs)\n+      {\n+        typedef typename common_type<duration<_Rep1, _Period1>,\n+                                     duration<_Rep2, _Period2>>::type __ct;\n+        return __ct(__lhs) -= __rhs;\n+      }\n+\n+    template<typename _Rep1, typename _Period, typename _Rep2>\n+      inline duration<typename common_type<_Rep1, _Rep2>::type, _Period>\n+      operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n+      {\n+        typedef typename common_type<_Rep1, _Rep2>::type __cr;\n+        return duration<__cr, _Period>(__d) *= __s;\n+      }\n+\n+    template<typename _Rep1, typename _Period, typename _Rep2>\n+      inline duration<typename common_type<_Rep1, _Rep2>::type, _Period>\n+      operator*(const _Rep2& __s, const duration<_Rep1, _Period>& __d)\n+      { return __d * __s; }\n+\n+    template<typename _Tp>\n+      struct __is_not_duration\n+      : std::true_type\n+      { };\n+    \n+    template<typename _Rep, typename _Period>\n+      struct __is_not_duration<duration<_Rep, _Period>>\n+      : std::false_type\n+      { };\n+  \n+    template<typename _Tp, typename _Up, typename _Ep = void>\n+      struct __division_impl;\n+  \n+    template<typename _Rep1, typename _Period, typename _Rep2>\n+      struct __division_impl<duration<_Rep1, _Period>, _Rep2, \n+        typename enable_if<__is_not_duration<_Rep2>::value>::type>\n+      {\n+        typedef typename common_type<_Rep1, _Rep2>::type __cr;\n+        typedef \n+          duration<typename common_type<_Rep1, _Rep2>::type, _Period> __rt;\n+\n+        static __rt\n+        __divide(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n+        { return duration<__cr, _Period>(__d) /= __s; }\n+      };\n+\n+    template<typename _Rep1, typename _Period1, \n+             typename _Rep2, typename _Period2>\n+      struct __division_impl<duration<_Rep1, _Period1>, \n+                             duration<_Rep2, _Period2>>\n+      {\n+        typedef typename common_type<duration<_Rep1, _Period1>, \n+                                     duration<_Rep2, _Period2>>::type __ct;\n+        typedef typename common_type<_Rep1, _Rep2>::type __rt;\n+\n+        static __rt\n+        __divide(const duration<_Rep1, _Period1>& __lhs, \n+                 const duration<_Rep2, _Period2>& __rhs)\n+        { return __ct(__lhs).count() / __ct(__rhs).count(); }\n+      };\n+  \n+    template<typename _Rep, typename _Period, typename _Up>\n+      inline typename __division_impl<duration<_Rep, _Period>, _Up>::__rt\n+      operator/(const duration<_Rep, _Period>& __d, const _Up& __u)\n+      {\n+        return \n+          __division_impl<duration<_Rep, _Period>, _Up>::__divide(__d, __u);\n+      }\n+ \n+    // comparisons\n+    template<typename _Rep1, typename _Period1,\n+             typename _Rep2, typename _Period2>\n+      inline bool\n+      operator==(const duration<_Rep1, _Period1>& __lhs, \n+                 const duration<_Rep2, _Period2>& __rhs)\n+      {\n+        typedef typename common_type<duration<_Rep1, _Period1>, \n+                                     duration<_Rep2, _Period2>>::type __ct;\n+        return __ct(__lhs).count() == __ct(__rhs).count();\n+      }\n+\n+    template<typename _Rep1, typename _Period1,\n+             typename _Rep2, typename _Period2>\n+      inline bool\n+      operator<(const duration<_Rep1, _Period1>& __lhs, \n+                const duration<_Rep2, _Period2>& __rhs)\n+      {\n+        typedef typename common_type<duration<_Rep1, _Period1>, \n+                                     duration<_Rep2, _Period2>>::type __ct;\n+        return __ct(__lhs).count() < __ct(__rhs).count();\n+      }\n+\n+    template<typename _Rep1, typename _Period1,\n+             typename _Rep2, typename _Period2>\n+      inline bool\n+      operator!=(const duration<_Rep1, _Period1>& __lhs, \n+                 const duration<_Rep2, _Period2>& __rhs)\n+      { return !(__lhs == __rhs); }\n+\n+    template<typename _Rep1, typename _Period1,\n+             typename _Rep2, typename _Period2>\n+      inline bool\n+      operator<=(const duration<_Rep1, _Period1>& __lhs, \n+                 const duration<_Rep2, _Period2>& __rhs)\n+      { return !(__rhs < __lhs); }\n+\n+    template<typename _Rep1, typename _Period1,\n+             typename _Rep2, typename _Period2>\n+      inline bool \n+      operator>(const duration<_Rep1, _Period1>& __lhs, \n+                const duration<_Rep2, _Period2>& __rhs)\n+      { return __rhs < __lhs; }\n+\n+    template<typename _Rep1, typename _Period1, \n+             typename _Rep2, typename _Period2>\n+      inline bool\n+      operator>=(const duration<_Rep1, _Period1>& __lhs, \n+                 const duration<_Rep2, _Period2>& __rhs)\n+      { return !(__lhs < __rhs); }\n+\n+    typedef duration<int64_t,        nano> nanoseconds;\n+    typedef duration<int64_t,       micro> microseconds;\n+    typedef duration<int64_t,       milli> milliseconds;\n+    typedef duration<int64_t             > seconds;\n+    typedef duration<int,     ratio<  60>> minutes;\n+    typedef duration<int,     ratio<3600>> hours;\n+\n+    template<typename _Clock, typename _Duration>\n+    struct time_point\n+    {\n+      typedef _Clock                    clock;\n+      typedef _Duration                 duration;\n+      typedef typename duration::rep    rep;\n+      typedef typename duration::period period;\n+\n+      time_point()\n+      : __d(duration::zero())\n+      { }\n+\n+      explicit time_point(const duration& __dur)\n+      : __d(duration::zero() + __dur)\n+      { }\n+\n+      // conversions\n+      template<typename _Duration2>\n+        time_point(const time_point<clock, _Duration2>& __t)\n+        : __d(__t.time_since_epoch())\n+        { }\n+\n+      // observer\n+      duration\n+      time_since_epoch() const\n+      { return __d; }\n+\n+      // arithmetic\n+      time_point&\n+      operator+=(const duration& __dur)\n+      {\n+        __d += __dur;\n+        return *this;\n+      }\n+\n+      time_point&\n+      operator-=(const duration& __dur)\n+      {\n+        __d -= __dur;\n+        return *this;\n+      }\n+\n+      // special values\n+      // TODO: These should be constexprs.\n+      static const time_point\n+      min()\n+      { return time_point(duration::min()); }\n+\n+      static const time_point\n+      max()\n+      { return time_point(duration::max()); }\n+\n+    private:\n+      duration __d;\n+    };\n+  \n+    template<typename _ToDuration, typename _Clock, typename _Duration>\n+      inline time_point<_Clock, _ToDuration> \n+      time_point_cast(const time_point<_Clock, _Duration>& __t)\n+      {\n+        return time_point<_Clock, _ToDuration>(\n+          duration_cast<_ToDuration>(__t.time_since_epoch()));  \n+      }\n+\n+    template<typename _Clock, typename _Duration1,\n+             typename _Rep2, typename _Period2>\n+      inline time_point<_Clock, \n+        typename common_type<_Duration1, duration<_Rep2, _Period2>>::type>\n+      operator+(const time_point<_Clock, _Duration1>& __lhs, \n+                const duration<_Rep2, _Period2>& __rhs)\n+      {\n+        typedef time_point<_Clock, \n+          typename common_type<_Duration1, \n+                               duration<_Rep2, _Period2>>::type> __ct;\n+        return __ct(__lhs) += __rhs;\n+      }\n+\n+    template<typename _Rep1, typename _Period1,\n+             typename _Clock, typename _Duration2>\n+      inline time_point<_Clock, \n+        typename common_type<duration<_Rep1, _Period1>, _Duration2>::type>\n+      operator+(const duration<_Rep1, _Period1>& __lhs, \n+                const time_point<_Clock, _Duration2>& __rhs)\n+      { return __rhs + __lhs; }\n+\n+    template<typename _Clock, typename _Duration1,\n+             typename _Rep2, typename _Period2>\n+      inline time_point<_Clock, \n+        typename common_type<_Duration1, duration<_Rep2, _Period2>>::type>\n+      operator-(const time_point<_Clock, _Duration1>& __lhs, \n+                const duration<_Rep2, _Period2>& __rhs)\n+      { return __lhs + (-__rhs); }\n+\n+    template<typename _Clock, typename _Duration1, typename _Duration2>\n+      inline typename common_type<_Duration1, _Duration2>::type\n+      operator-(const time_point<_Clock, _Duration1>& __lhs, \n+                const time_point<_Clock, _Duration2>& __rhs)\n+      { return __lhs.time_since_epoch() - __rhs.time_since_epoch(); }\n+\n+    template<typename _Clock, typename _Duration1, typename _Duration2>\n+      inline bool\n+      operator==(const time_point<_Clock, _Duration1>& __lhs,\n+                 const time_point<_Clock, _Duration2>& __rhs)\n+      { return __lhs.time_since_epoch() == __rhs.time_since_epoch(); }\n+\n+    template<typename _Clock, typename _Duration1, typename _Duration2>\n+      inline bool\n+      operator!=(const time_point<_Clock, _Duration1>& __lhs,\n+                 const time_point<_Clock, _Duration2>& __rhs)\n+      { return !(__lhs == __rhs); }\n+\n+    template<typename _Clock, typename _Duration1, typename _Duration2>\n+      inline bool\n+      operator<(const time_point<_Clock, _Duration1>& __lhs,\n+                const time_point<_Clock, _Duration2>& __rhs)\n+      { return  __lhs.time_since_epoch() < __rhs.time_since_epoch(); }\n+\n+    template<typename _Clock, typename _Duration1, typename _Duration2>\n+      inline bool\n+      operator<=(const time_point<_Clock, _Duration1>& __lhs,\n+                 const time_point<_Clock, _Duration2>& __rhs)\n+      { return !(__rhs < __lhs); }\n+\n+    template<typename _Clock, typename _Duration1, typename _Duration2>\n+      inline bool\n+      operator>(const time_point<_Clock, _Duration1>& __lhs,\n+                const time_point<_Clock, _Duration2>& __rhs)\n+      { return __rhs < __lhs; }\n+\n+    template<typename _Clock, typename _Duration1, typename _Duration2>\n+      inline bool\n+      operator>=(const time_point<_Clock, _Duration1>& __lhs,\n+                 const time_point<_Clock, _Duration2>& __rhs)\n+      { return !(__lhs < __rhs); }\n+\n+    struct system_clock\n+    {\n+#if defined(_GLIBCXX_USE_CLOCK_MONOTONIC) || \\\n+    defined(_GLIBCXX_USE_CLOCK_REALTIME)\n+      typedef chrono::nanoseconds     duration;      \n+#elif defined(_GLIBCXX_USE_GETTIMEOFDAY)\n+      typedef chrono::microseconds    duration;      \n+#else\n+      typedef chrono::seconds         duration;      \n+#endif\n+\n+      typedef duration::rep    rep;\n+      typedef duration::period period;\n+      typedef chrono::time_point<system_clock, duration> time_point;\n+\n+#ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n+      static const bool is_monotonic = true;\n+#else\n+      static const bool is_monotonic = false;\n+#endif      \n+\n+      static time_point\n+      now();      \n+\n+      // Map to C API\n+      static std::time_t\n+      to_time_t(const time_point& __t)\n+      {\n+        return std::time_t(\n+          duration_cast<chrono::seconds>(__t.time_since_epoch()).count());\n+      }\n+\n+      static time_point\n+      from_time_t(std::time_t __t)\n+      { \n+        return time_point_cast<system_clock::duration>(\n+          chrono::time_point<system_clock, chrono::seconds>(\n+            chrono::seconds(__t)));\n+      }\n+\n+      // TODO: requires constexpr\n+      /*  \n+      static_assert(\n+        system_clock::duration::min() < \n+        system_clock::duration::zero(), \n+        \"a clock's minimum duration cannot be less than its epoch\");\n+      */\n+    };\n+\n+    typedef system_clock high_resolution_clock;\n+    typedef system_clock monotonic_clock;    \n+  }\n+}\n+\n+#endif //_GLIBCXX_USE_C99_STDINT_TR1\n+\n+#endif //__GXX_EXPERIMENTAL_CXX0X__\n+\n+#endif //_GLIBCXX_CHRONO"}, {"sha": "d41f3ebf290f58b87c2e185c4b44da68c1d8170c", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -186,6 +186,7 @@ sources = \\\n \twstring-inst.cc \\\n \tmutex.cc \\\n \tcondition_variable.cc \\\n+\tchrono.cc \\\n \t${host_sources} \\\n \t${host_sources_extra} \n \n@@ -272,6 +273,11 @@ atomic.lo: atomic.cc\n atomic.o: atomic.cc\n \t$(CXXCOMPILE) -x c++ -std=gnu++0x -c $<\n \n+chrono.lo: chrono.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+chrono.o: chrono.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n if GLIBCXX_LDBL_COMPAT\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64."}, {"sha": "27c9b70c0beec4f63d0b370d4254750b5afb4dc7", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -84,10 +84,10 @@ am__libstdc___la_SOURCES_DIST = atomic.cc bitmap_allocator.cc \\\n \tistream-inst.cc istream.cc locale-inst.cc misc-inst.cc \\\n \tostream-inst.cc sstream-inst.cc streambuf-inst.cc streambuf.cc \\\n \tstring-inst.cc valarray-inst.cc wlocale-inst.cc \\\n-\twstring-inst.cc mutex.cc condition_variable.cc atomicity.cc \\\n-\tcodecvt_members.cc collate_members.cc ctype_members.cc \\\n-\tmessages_members.cc monetary_members.cc numeric_members.cc \\\n-\ttime_members.cc basic_file.cc c++locale.cc \\\n+\twstring-inst.cc mutex.cc condition_variable.cc chrono.cc \\\n+\tatomicity.cc codecvt_members.cc collate_members.cc \\\n+\tctype_members.cc messages_members.cc monetary_members.cc \\\n+\tnumeric_members.cc time_members.cc basic_file.cc c++locale.cc \\\n \tcompatibility-ldbl.cc parallel_list.cc parallel_settings.cc\n am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tctype_members.lo messages_members.lo monetary_members.lo \\\n@@ -109,7 +109,7 @@ am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n \tistream-inst.lo istream.lo locale-inst.lo misc-inst.lo \\\n \tostream-inst.lo sstream-inst.lo streambuf-inst.lo streambuf.lo \\\n \tstring-inst.lo valarray-inst.lo wlocale-inst.lo \\\n-\twstring-inst.lo mutex.lo condition_variable.lo \\\n+\twstring-inst.lo mutex.lo condition_variable.lo chrono.lo \\\n \t$(am__objects_1) $(am__objects_4)\n am_libstdc___la_OBJECTS = $(am__objects_5)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n@@ -422,6 +422,7 @@ sources = \\\n \twstring-inst.cc \\\n \tmutex.cc \\\n \tcondition_variable.cc \\\n+\tchrono.cc \\\n \t${host_sources} \\\n \t${host_sources_extra} \n \n@@ -866,6 +867,11 @@ atomic.lo: atomic.cc\n atomic.o: atomic.cc\n \t$(CXXCOMPILE) -x c++ -std=gnu++0x -c $<\n \n+chrono.lo: chrono.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+chrono.o: chrono.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64.\n @GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.lo: compatibility-ldbl.cc"}, {"sha": "88fb4c180e97a10916b643edf3b2462742fe4ea6", "filename": "libstdc++-v3/src/chrono.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -0,0 +1,76 @@\n+// chrono -*- C++ -*-\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <chrono>\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+\n+// conditional inclusion of sys/time.h for gettimeofday\n+#if !defined(_GLIBCXX_USE_CLOCK_MONOTONIC) && \\\n+    !defined(_GLIBCXX_USE_CLOCK_REALTIME) && \\\n+     defined(_GLIBCXX_USE_GETTIMEOFDAY)\n+#include <sys/time.h>\n+#endif\n+\n+namespace std\n+{\n+  namespace chrono\n+  {\n+    const bool system_clock::is_monotonic;\n+\n+    system_clock::time_point\n+    system_clock::now()\n+    {\n+#ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n+        timespec tp;\n+        // -EINVAL, -EFAULT\n+        clock_gettime(CLOCK_MONOTONIC, &tp);\n+        return time_point(duration(chrono::seconds(tp.tv_sec)\n+                                   + chrono::nanoseconds(tp.tv_nsec)));\n+#elif defined(_GLIBCXX_USE_CLOCK_REALTIME)\n+        timespec tp;\n+        // -EINVAL, -EFAULT\n+        clock_gettime(CLOCK_REALTIME, &tp);\n+        return time_point(duration(chrono::seconds(tp.tv_sec)\n+                                   + chrono::nanoseconds(tp.tv_nsec)));\n+#elif defined(_GLIBCXX_USE_GETTIMEOFDAY)\n+        timeval tv;\n+        // EINVAL, EFAULT\n+        gettimeofday(&tv, NULL);\n+        return time_point(duration(chrono::seconds(tv.tv_sec)\n+                                   + chrono::microseconds(tv.tv_usec)));\n+#else\n+        std::time_t __sec = std::time(0);\n+        return system_clock::from_time_t(__sec);\n+#endif\n+    }\n+  }\n+}\n+\n+#endif // _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "4c2e31be081325993599e5cd2a78982b4d83752f", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++200x/all.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -95,6 +95,7 @@\n #include <algorithm>\n #include <array>\n #include <bitset>\n+#include <chrono>\n #include <condition_variable>\n #include <complex>\n #include <deque>\n@@ -118,6 +119,7 @@\n #include <ostream>\n #include <queue>\n #include <random>\n+#include <ratio>\n #include <regex>\n #include <set>\n #include <sstream>"}, {"sha": "f88edc8268a2fa822bf9f51127262c5a0082c652", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++200x/all_multiple_inclusion.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall_multiple_inclusion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall_multiple_inclusion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall_multiple_inclusion.cc?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -93,6 +93,7 @@\n #include <algorithm>\n #include <array>\n #include <bitset>\n+#include <chrono>\n #include <complex>\n #include <deque>\n #include <exception>\n@@ -114,6 +115,7 @@\n #include <ostream>\n #include <queue>\n #include <random>\n+#include <ratio>\n #include <regex>\n #include <set>\n #include <sstream>\n@@ -203,6 +205,7 @@\n #include <algorithm>\n #include <array>\n #include <bitset>\n+#include <chrono>\n #include <complex>\n #include <deque>\n #include <exception>\n@@ -219,11 +222,13 @@\n #include <locale>\n #include <map>\n #include <memory>\n+#include <mutex>\n #include <new>\n #include <numeric>\n #include <ostream>\n #include <queue>\n #include <random>\n+#include <ratio>\n #include <regex>\n #include <set>\n #include <sstream>"}, {"sha": "bcbe210d22f54fabbcc9743649f30f3a22170cdd", "filename": "libstdc++-v3/testsuite/20_util/clocks/1.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fclocks%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fclocks%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fclocks%2F1.cc?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.8.5 Clocks [time.clock]\n+\n+#include <chrono>\n+\n+// 20.8.5.1 system_clock [time.clock.system]\n+int\n+main()\n+{\n+  using namespace std::chrono;\n+\n+  system_clock::time_point t1 = system_clock::now();\n+  bool is_monotonic = system_clock::is_monotonic;\n+  is_monotonic = is_monotonic; // suppress unused warning\n+  std::time_t t2 = system_clock::to_time_t(t1);\n+  system_clock::time_point t3 = system_clock::from_time_t(t2);\n+  \n+  return 0;\n+}"}, {"sha": "55533eb1dde3644895d4c2bac34c50acc8e9d4f5", "filename": "libstdc++-v3/testsuite/20_util/duration/arithmetic/1.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Farithmetic%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Farithmetic%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Farithmetic%2F1.cc?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -0,0 +1,94 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.8.3 Class template duration [time.duration]\n+\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+// 20.8.3.3 duration arithmetic [time.duration.arithmetic] (unary member ops)\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::chrono;\n+  \n+  duration<int> d0(3);\n+  duration<int> d1 = -d0;\n+  VERIFY(d0.count() == 3);\n+  VERIFY(d1.count() == -3);\n+  \n+  duration<int> d2 = (+d0);\n+  VERIFY(d2.count() == 3);\n+    \n+  duration<int> d3(++d2);\n+  VERIFY(d2.count() == 4);\n+  VERIFY(d3.count() == 4);\n+    \n+  duration<int> d4(d3++);\n+  VERIFY(d3.count() == 5);\n+  VERIFY(d4.count() == 4);\n+  \n+  duration<int> d5(--d4);\n+  VERIFY(d4.count() == 3);\n+  VERIFY(d5.count() == 3);\n+  \n+  duration<int> d6(d5--);\n+  VERIFY(d5.count() == 2);\n+  VERIFY(d6.count() == 3);\n+}\n+\n+// 20.8.3.3 duration arithmetic [time.duration.arithmetic] (binary member ops)\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::chrono;\n+  \n+  duration<int> d7(3);\n+  duration<int> d8(9);\n+  d7 += d8;\n+  VERIFY(d7.count() == 12);\n+  VERIFY(d8.count() == 9);\n+  \n+  duration<int> d9(3);\n+  duration<int> d10(9);\n+  d9 -= d10;\n+  VERIFY(d9.count() == -6);\n+  VERIFY(d10.count() == 9);\n+  \n+  duration<int> d11(9);\n+  int i = 3;\n+  d11 *= i;\n+  VERIFY(d11.count() == 27);\n+    \n+  duration<int> d12(12);  \n+  d12 /= i;\n+  VERIFY(d12.count() == 4);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "e096334c9809a808e2b73832f27470599bfce9af", "filename": "libstdc++-v3/testsuite/20_util/duration/arithmetic/2.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Farithmetic%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Farithmetic%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Farithmetic%2F2.cc?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -0,0 +1,62 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.8.3 Class template duration [time.duration]\n+\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+// 20.8.3.5 duration non-member arithmetic [time.duration.nonmember]\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::chrono;\n+  \n+  duration<int> d0(12);\n+  duration<int> d1(3);\n+  int i = 3;\n+  \n+  duration<int> d2 = d0 + d1;\n+  VERIFY(d2.count() == 15);\n+  \n+  duration<int> d3 = d0 - d1;\n+  VERIFY(d3.count() == 9);\n+\n+  duration<int> d4 = d0 * i;\n+  VERIFY(d4.count() == 36);\n+  \n+  duration<int> d5 = i * d0;\n+  VERIFY(d5.count() == 36);\n+ \n+  duration<int> d6 = d0 / i;\n+  VERIFY(d6.count() == 4);\n+  \n+  int j = d0 / d1;\n+  VERIFY(j == 4);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "31ac42ddceed30b6f1598b9cd6c898f73886208b", "filename": "libstdc++-v3/testsuite/20_util/duration/comparisons/1.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcomparisons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcomparisons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcomparisons%2F1.cc?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.8.3 Class template duration [time.duration]\n+\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+// 20.8.3.6 duration comparisons [time.duration.comparisons]\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::chrono;\n+  \n+  duration<int> d0(12);\n+  duration<int> d1(3);\n+  duration<int> d2(3);\n+  \n+  VERIFY(d1 < d0);  \n+  VERIFY(d0 > d1);\n+  \n+  VERIFY(d0 != d1);\n+  VERIFY(d1 == d2);\n+  \n+  VERIFY(d1 <= d2);\n+  VERIFY(d1 >= d2);\n+  \n+  VERIFY(d1 <= d0);\n+  VERIFY(d0 >= d1);  \n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6d12dbb5bd73dc23e885cbb0400b6bfabb31729b", "filename": "libstdc++-v3/testsuite/20_util/duration/cons/1.cc", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1.cc?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -0,0 +1,138 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.8.3 Class template duration [time.duration]\n+\n+#include <chrono>\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+struct type_emulator\n+{\n+  type_emulator()\n+  : i(T(0)) { }\n+  \n+  type_emulator(T j)\n+  : i(j) { }\n+  \n+  type_emulator(const type_emulator& e)\n+  : i(e.i) { }\n+\n+  type_emulator&\n+  operator*=(type_emulator a)\n+  {\n+    i *= a.i;\n+    return *this;\n+  }\n+  \n+  type_emulator&\n+  operator+=(type_emulator a)\n+  {\n+    i += a.i;\n+    return *this;\n+  }\n+    \n+  operator T ()\n+  { return i; }\n+  \n+  T i;\n+};\n+\n+template<typename T>\n+bool\n+operator==(type_emulator<T> a, type_emulator<T> b)\n+{ return a.i == b.i; }\n+\n+template<typename T>\n+bool\n+operator<(type_emulator<T> a, type_emulator<T> b)\n+{ return a.i < b.i; }\n+\n+template<typename T>\n+type_emulator<T>\n+operator+(type_emulator<T> a, type_emulator<T> b)\n+{ return a += b; }\n+\n+template<typename T>\n+type_emulator<T>\n+operator*(type_emulator<T> a, type_emulator<T> b)\n+{ return a *= b; }\n+\n+namespace std\n+{\n+  template<typename T, typename U>\n+  struct common_type<type_emulator<T>, U>\n+  { typedef typename common_type<T,U>::type type; };\n+\n+  template<typename T, typename U>\n+  struct common_type<U, type_emulator<T>>\n+  { typedef typename common_type<U,T>::type type; };\n+\n+  template<typename T, typename U>\n+  struct common_type<type_emulator<T>, type_emulator<U>>\n+  { typedef typename common_type<T,U>::type type; };\n+\n+  namespace chrono\n+  {    \n+    template<typename T>\n+    struct treat_as_floating_point<type_emulator<T>>\n+    : is_floating_point<T>\n+    { };\n+  }\n+}\n+\n+typedef type_emulator<int> int_emulator;\n+typedef type_emulator<double> dbl_emulator;\n+\n+// 20.8.3.1 duration constructors [time.duration.cons]\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::chrono::duration;\n+  \n+  duration<int> d0;\n+  VERIFY(d0.count() == static_cast<duration<int>::rep>(0));\n+\n+  int r = 3;\n+  duration<int> d1(r);\n+  VERIFY(d1.count() == static_cast<duration<int>::rep>(r));\n+  \n+  double s = 8.0;\n+  duration<double> d2(s);\n+  VERIFY(d2.count() == static_cast<duration<double>::rep>(s));\n+    \n+  int_emulator ie(3);\n+  duration<int_emulator> d3(ie);\n+  VERIFY(d3.count() == static_cast<duration<int_emulator>::rep>(ie));\n+  \n+  dbl_emulator de(4.0);\n+  duration<dbl_emulator> d4(de);\n+  VERIFY(d4.count() == static_cast<duration<dbl_emulator>::rep>(de));\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8710d74de7e04e287ab36550ec72d235df1fd4c0", "filename": "libstdc++-v3/testsuite/20_util/duration/cons/1_neg.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1_neg.cc?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.8.3.1 duration constructors [time.duration.cons]\n+\n+#include <chrono>\n+\n+void\n+test01()\n+{\n+  std::chrono::duration<int> d1(1.0);\n+}\n+\n+void\n+test02()\n+{\n+  using namespace std::chrono;\n+  \n+  duration<int, std::micro> d2(8);\n+  duration<int, std::milli> d2_copy(d2);\n+}\n+\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 30 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 39 }\n+// { dg-error \"not exactly representable\" \"\" { target *-*-* } 202 }\n+// { dg-error \"integral duration with floating point\" \"\" { target *-*-* } 186 }\n+// { dg-excess-errors \"In instantiation of\" }"}, {"sha": "b491224dc48f6c0bf4d0a8706b8811fce1d62769", "filename": "libstdc++-v3/testsuite/20_util/duration/cons/2.cc", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F2.cc?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -0,0 +1,120 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.8.3 Class template duration [time.duration]\n+\n+#include <chrono>\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+struct type_emulator\n+{\n+  type_emulator() : i(T(0)) { }\n+  type_emulator(T j) : i(j) { }\n+  type_emulator(const type_emulator& e) : i(e.i) { }\n+\n+  type_emulator& operator*=(type_emulator a)\n+  { i *= a.i; return *this; }\n+  \n+  type_emulator& operator+=(type_emulator a)\n+  { i += a.i; return *this; }\n+    \n+  operator T () { return i; }\n+  T i;\n+};\n+\n+template<typename T>\n+bool operator==(type_emulator<T> a, type_emulator<T> b)\n+{ return a.i == b.i; }\n+\n+template<typename T>\n+bool operator<(type_emulator<T> a, type_emulator<T> b)\n+{ return a.i < b.i; }\n+\n+template<typename T>\n+type_emulator<T> operator+(type_emulator<T> a, type_emulator<T> b)\n+{ return a += b; }\n+\n+template<typename T>\n+type_emulator<T> operator*(type_emulator<T> a, type_emulator<T> b)\n+{ return a *= b; }\n+\n+namespace std\n+{\n+  template<typename T, typename U>\n+  struct common_type<type_emulator<T>, U>\n+  { typedef typename common_type<T,U>::type type; };\n+  \n+  template<typename T, typename U>\n+  struct common_type<U, type_emulator<T>>\n+  { typedef typename common_type<U,T>::type type; };\n+  \n+  template<typename T, typename U>\n+  struct common_type<type_emulator<T>, type_emulator<U>>\n+  { typedef typename common_type<T,U>::type type; };\n+  \n+  namespace chrono\n+  {    \n+    template<typename T>\n+    struct treat_as_floating_point<type_emulator<T>>\n+    : is_floating_point<T>\n+    { };\n+  }\n+}\n+\n+typedef type_emulator<int> int_emulator;\n+typedef type_emulator<double> dbl_emulator;\n+\n+// 20.8.3.1 duration constructors [time.duration.cons]\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::chrono;\n+  \n+  duration<int> d0(3);\n+  duration<int> d0_copy(d0);\n+  VERIFY(d0_copy.count() == d0.count());\n+  \n+  duration<int, std::milli> d1(5);\n+  duration<int, std::micro> d1_copy(d1);\n+  VERIFY(d1.count() * 1000 == d1_copy.count());\n+  \n+  duration<double, std::micro> d2(8.0);\n+  duration<double, std::milli> d2_copy(d2);\n+  VERIFY(d2.count() == d2_copy.count() * 1000.0);\n+  \n+  duration<int_emulator, std::milli> d3(5);\n+  duration<int_emulator, std::micro> d3_copy(d3);\n+  VERIFY(d3.count() * 1000 == d3_copy.count());\n+  \n+  duration<dbl_emulator, std::micro> d4(5.0);\n+  duration<dbl_emulator, std::milli> d4_copy(d4);\n+  VERIFY(d4.count() == d4_copy.count() * dbl_emulator(1000.0));\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7613411879de63030bc6dbb021871275e417da11", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/explicit_instantiation/explicit_instantiation.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Fexplicit_instantiation%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Fexplicit_instantiation%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Fexplicit_instantiation%2Fexplicit_instantiation.cc?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <ratio>\n+#include <chrono>\n+\n+template class std::chrono::duration<int>;\n+template class std::chrono::duration<float, std::ratio<2,3>>;"}, {"sha": "70f4d7800ebf14527889651a18a26122a6fd600a", "filename": "libstdc++-v3/testsuite/20_util/time_point/1.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2F1.cc?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.8.4 Class template time_point [time.point]\n+\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+// 20.8.4.1 time_point constructors [time.point.cons]\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::chrono;\n+  \n+  time_point<system_clock> t1;\n+  VERIFY(t1.time_since_epoch() == system_clock::duration::zero());\n+\n+  time_point<monotonic_clock> t2;\n+  VERIFY(t2.time_since_epoch() == monotonic_clock::duration::zero());\n+\n+  time_point<high_resolution_clock> t3;\n+  VERIFY(t3.time_since_epoch() == high_resolution_clock::duration::zero());\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "91f21a5e0f731a170258c5dd39b8417a1cf2d602", "filename": "libstdc++-v3/testsuite/20_util/time_point/2.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2F2.cc?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -0,0 +1,72 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.8.4 Class template time_point [time.point]\n+\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+// 20.8.4.3 time_point arithmetic [time.point.arithmetic]\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::chrono;\n+  \n+  time_point<system_clock> t1, t2;\n+  t1 += seconds(1);\n+  VERIFY(t2.time_since_epoch() + seconds(1) == t1.time_since_epoch());\n+  \n+  t1 -= std::chrono::seconds(1);\n+  VERIFY(t2.time_since_epoch() == t1.time_since_epoch());\n+}\n+\n+// 20.8.4.5 time_point non-member arithmetic [time.point.nonmember]\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::chrono;\n+  \n+  time_point<system_clock> t1;\n+  time_point<system_clock> t2(t1 + seconds(1));\n+  VERIFY(t2.time_since_epoch() == t1.time_since_epoch() + seconds(1));\n+ \n+  time_point<system_clock> t3(seconds(1) + t1);\n+  VERIFY(t3.time_since_epoch() == t1.time_since_epoch() + seconds(1));\n+  \n+  time_point<system_clock> t4(seconds(1));\n+  time_point<system_clock> t5(seconds(2));\n+  \n+  time_point<system_clock> t6(t5 - seconds(1));\n+  VERIFY(t6.time_since_epoch() == t4.time_since_epoch());\n+  \n+  time_point<system_clock> t7(t5 - t4);\n+  VERIFY(t7.time_since_epoch() == t4.time_since_epoch());\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "20820cebea1aac7b2b227b967065d992f8483f65", "filename": "libstdc++-v3/testsuite/20_util/time_point/3.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2F3.cc?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.8.4 Class template time_point [time.point]\n+\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+// 20.8.4.6 time_point comparisons [time.point.comparisons]\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::chrono;\n+  \n+  time_point<system_clock> t1(seconds(1));\n+  time_point<system_clock> t2(seconds(1));\n+  time_point<system_clock> t3(seconds(2));\n+  \n+  VERIFY(t1 == t2);\n+  VERIFY(t1 != t3);\n+  VERIFY(t1 < t3);\n+  VERIFY(t1 <= t3);\n+  VERIFY(t1 <= t2);\n+  VERIFY(t3 > t1);\n+  VERIFY(t3 >= t1);\n+  VERIFY(t2 >= t1);  \n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7f9bbdf3d1693b4b93fa400dc2be2ea53f46e807", "filename": "libstdc++-v3/testsuite/20_util/time_point/requirements/explicit_instantiation/explicit_instantiation.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Frequirements%2Fexplicit_instantiation%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e38d0dce922e77304932817a10f1f42579553f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Frequirements%2Fexplicit_instantiation%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Frequirements%2Fexplicit_instantiation%2Fexplicit_instantiation.cc?ref=15e38d0dce922e77304932817a10f1f42579553f", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <chrono>\n+\n+template class std::chrono::time_point<std::chrono::system_clock>;"}]}