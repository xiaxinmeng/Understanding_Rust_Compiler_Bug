{"sha": "0e159efc76324f40c85581af4aca9cd4f0852cc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUxNTllZmM3NjMyNGY0MGM4NTU4MWFmNGFjYTljZDRmMDg1MmNjOA==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-01-07T15:27:50Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2020-01-07T15:27:50Z"}, "message": "[amdgcn] Add more modes for vector comparisons\n\n2020-01-07  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/gcn-valu.md (VEC_1REG_INT_ALT): Delete iterator.\n\t(VEC_ALLREG_ALT): New iterator.\n\t(VEC_ALLREG_INT_MODE): New iterator.\n\t(VCMP_MODE): New iterator.\n\t(VCMP_MODE_INT): New iterator.\n\t(vec_cmpu<mode>di): Use VCMP_MODE_INT.\n\t(vec_cmp<u>v64qidi): New define_expand.\n\t(vec_cmp<mode>di_exec): Use VCMP_MODE.\n\t(vec_cmpu<mode>di_exec): New define_expand.\n\t(vec_cmp<u>v64qidi_exec): New define_expand.\n\t(vec_cmp<mode>di_dup): Use VCMP_MODE.\n\t(vec_cmp<mode>di_dup_exec): Use VCMP_MODE.\n\t(vcond<VEC_ALL1REG_MODE:mode><VEC_1REG_ALT:mode>): Rename ...\n\t(vcond<VEC_ALLREG_MODE:mode><VEC_ALLREG_ALT:mode>): ... to this.\n\t(vcond<VEC_ALL1REG_MODE:mode><VEC_1REG_ALT:mode>_exec): Rename ...\n\t(vcond<VEC_ALLREG_MODE:mode><VEC_ALLREG_ALT:mode>_exec): ... to this.\n\t(vcondu<VEC_ALL1REG_MODE:mode><VEC_1REG_INT_ALT:mode>): Rename ...\n\t(vcondu<VEC_ALLREG_MODE:mode><VEC_ALLREG_INT_MODE:mode>): ... to this.\n\t(vcondu<VEC_ALL1REG_MODE:mode><VEC_1REG_INT_ALT:mode>_exec): Rename ...\n\t(vcondu<VEC_ALLREG_MODE:mode><VEC_ALLREG_INT_MODE:mode>_exec): ... to\n\tthis.\n\t* config/gcn/gcn.c (print_operand): Fix 8 and 16 bit suffixes.\n\t* config/gcn/gcn.md (expander): Add sign_extend and zero_extend.\n\nFrom-SVN: r279961", "tree": {"sha": "1c5d6ac1cc77dcf03a58eebb70eea7c8279b3f91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c5d6ac1cc77dcf03a58eebb70eea7c8279b3f91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e159efc76324f40c85581af4aca9cd4f0852cc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e159efc76324f40c85581af4aca9cd4f0852cc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e159efc76324f40c85581af4aca9cd4f0852cc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e159efc76324f40c85581af4aca9cd4f0852cc8/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd65538abb6a48c97f9fd02d037b41e5a6397a70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd65538abb6a48c97f9fd02d037b41e5a6397a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd65538abb6a48c97f9fd02d037b41e5a6397a70"}], "stats": {"total": 187, "additions": 137, "deletions": 50}, "files": [{"sha": "ca3b4d441369b8b728aab91521fb6fd7586e6874", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e159efc76324f40c85581af4aca9cd4f0852cc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e159efc76324f40c85581af4aca9cd4f0852cc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e159efc76324f40c85581af4aca9cd4f0852cc8", "patch": "@@ -1,3 +1,29 @@\n+2020-01-07  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (VEC_1REG_INT_ALT): Delete iterator.\n+\t(VEC_ALLREG_ALT): New iterator.\n+\t(VEC_ALLREG_INT_MODE): New iterator.\n+\t(VCMP_MODE): New iterator.\n+\t(VCMP_MODE_INT): New iterator.\n+\t(vec_cmpu<mode>di): Use VCMP_MODE_INT.\n+\t(vec_cmp<u>v64qidi): New define_expand.\n+\t(vec_cmp<mode>di_exec): Use VCMP_MODE.\n+\t(vec_cmpu<mode>di_exec): New define_expand.\n+\t(vec_cmp<u>v64qidi_exec): New define_expand.\n+\t(vec_cmp<mode>di_dup): Use VCMP_MODE.\n+\t(vec_cmp<mode>di_dup_exec): Use VCMP_MODE.\n+\t(vcond<VEC_ALL1REG_MODE:mode><VEC_1REG_ALT:mode>): Rename ...\n+\t(vcond<VEC_ALLREG_MODE:mode><VEC_ALLREG_ALT:mode>): ... to this.\n+\t(vcond<VEC_ALL1REG_MODE:mode><VEC_1REG_ALT:mode>_exec): Rename ...\n+\t(vcond<VEC_ALLREG_MODE:mode><VEC_ALLREG_ALT:mode>_exec): ... to this.\n+\t(vcondu<VEC_ALL1REG_MODE:mode><VEC_1REG_INT_ALT:mode>): Rename ...\n+\t(vcondu<VEC_ALLREG_MODE:mode><VEC_ALLREG_INT_MODE:mode>): ... to this.\n+\t(vcondu<VEC_ALL1REG_MODE:mode><VEC_1REG_INT_ALT:mode>_exec): Rename ...\n+\t(vcondu<VEC_ALLREG_MODE:mode><VEC_ALLREG_INT_MODE:mode>_exec): ... to\n+\tthis.\n+\t* config/gcn/gcn.c (print_operand): Fix 8 and 16 bit suffixes.\n+\t* config/gcn/gcn.md (expander): Add sign_extend and zero_extend.\n+\n 2020-01-07  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/constraints.md (DA): Update description and match."}, {"sha": "7c3de8cbc7ec24d2858fd5320b5e3f5f75d7c3cc", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 105, "deletions": 46, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e159efc76324f40c85581af4aca9cd4f0852cc8/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e159efc76324f40c85581af4aca9cd4f0852cc8/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=0e159efc76324f40c85581af4aca9cd4f0852cc8", "patch": "@@ -26,8 +26,6 @@\n \n (define_mode_iterator VEC_1REG_INT_MODE\n \t\t      [V64SI])\n-(define_mode_iterator VEC_1REG_INT_ALT\n-\t\t      [V64SI])\n (define_mode_iterator VEC_ALL1REG_INT_MODE\n \t\t      [V64QI V64HI V64SI])\n (define_mode_iterator VEC_ALL1REG_INT_ALT\n@@ -44,6 +42,12 @@\n (define_mode_iterator VEC_ALLREG_MODE\n \t\t      [V64QI V64HI V64SI V64HF V64SF    ; Single reg\n \t\t       V64DI V64DF])\t\t        ; Double reg\n+(define_mode_iterator VEC_ALLREG_ALT\n+\t\t      [V64QI V64HI V64SI V64HF V64SF    ; Single reg\n+\t\t       V64DI V64DF])\t\t        ; Double reg\n+(define_mode_iterator VEC_ALLREG_INT_MODE\n+\t\t      [V64QI V64HI V64SI\t        ; Single reg\n+\t\t       V64DI])\t\t\t        ; Double reg\n \n (define_mode_attr scalar_mode\n   [(V64QI \"qi\") (V64HI \"hi\") (V64SI \"si\")\n@@ -2521,12 +2525,15 @@\n ;; }}}\n ;; {{{ Vector comparison/merge\n \n+(define_mode_iterator VCMP_MODE [V64HI V64SI V64DI V64HF V64SF V64DF])\n+(define_mode_iterator VCMP_MODE_INT [V64HI V64SI V64DI])\n+\n (define_insn \"vec_cmp<mode>di\"\n   [(set (match_operand:DI 0 \"register_operand\"\t      \"=cV,cV,  e, e,Sg,Sg\")\n \t(match_operator 1 \"comparison_operator\"\n-\t  [(match_operand:VEC_1REG_MODE 2 \"gcn_alu_operand\"\n+\t  [(match_operand:VCMP_MODE 2 \"gcn_alu_operand\"\n \t\t\t\t\t\t      \"vSv, B,vSv, B, v,vA\")\n-\t   (match_operand:VEC_1REG_MODE 3 \"gcn_vop3_operand\"\n+\t   (match_operand:VCMP_MODE 3 \"gcn_vop3_operand\"\n \t\t\t\t\t\t      \"  v, v,  v, v,vA, v\")]))\n    (clobber (match_scratch:DI 4\t\t\t      \"= X, X, cV,cV, X, X\"))]\n   \"\"\n@@ -2543,8 +2550,8 @@\n (define_expand \"vec_cmpu<mode>di\"\n   [(match_operand:DI 0 \"register_operand\")\n    (match_operator 1 \"comparison_operator\"\n-     [(match_operand:VEC_1REG_INT_MODE 2 \"gcn_alu_operand\")\n-      (match_operand:VEC_1REG_INT_MODE 3 \"gcn_vop3_operand\")])]\n+     [(match_operand:VCMP_MODE_INT 2 \"gcn_alu_operand\")\n+      (match_operand:VCMP_MODE_INT 3 \"gcn_vop3_operand\")])]\n   \"\"\n   {\n     /* Unsigned comparisons use the same patterns as signed comparisons,\n@@ -2555,13 +2562,30 @@\n     DONE;\n   })\n \n+; There's no instruction for 8-bit vector comparison, so we need to extend.\n+(define_expand \"vec_cmp<u>v64qidi\"\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operator 1 \"comparison_operator\"\n+     [(any_extend:V64SI (match_operand:V64QI 2 \"gcn_alu_operand\"))\n+      (any_extend:V64SI (match_operand:V64QI 3 \"gcn_vop3_operand\"))])]\n+  \"can_create_pseudo_p ()\"\n+  {\n+    rtx sitmp1 = gen_reg_rtx (V64SImode);\n+    rtx sitmp2 = gen_reg_rtx (V64SImode);\n+\n+    emit_insn (gen_<expander>v64qiv64si2 (sitmp1, operands[2]));\n+    emit_insn (gen_<expander>v64qiv64si2 (sitmp2, operands[3]));\n+    emit_insn (gen_vec_cmpv64sidi (operands[0], operands[1], sitmp1, sitmp2));\n+    DONE;\n+  })\n+\n (define_insn \"vec_cmp<mode>di_exec\"\n   [(set (match_operand:DI 0 \"register_operand\"\t       \"=cV,cV,  e, e,Sg,Sg\")\n \t(and:DI\n \t  (match_operator 1 \"comparison_operator\"\n-\t    [(match_operand:VEC_1REG_MODE 2 \"gcn_alu_operand\"\n+\t    [(match_operand:VCMP_MODE 2 \"gcn_alu_operand\"\n \t\t\t\t\t\t       \"vSv, B,vSv, B, v,vA\")\n-\t     (match_operand:VEC_1REG_MODE 3 \"gcn_vop3_operand\"\n+\t     (match_operand:VCMP_MODE 3 \"gcn_vop3_operand\"\n \t\t\t\t\t\t       \"  v, v,  v, v,vA, v\")])\n \t  (match_operand:DI 4 \"gcn_exec_reg_operand\"   \"  e, e,  e, e, e, e\")))\n    (clobber (match_scratch:DI 5\t\t\t       \"= X, X, cV,cV, X, X\"))]\n@@ -2576,14 +2600,50 @@\n   [(set_attr \"type\" \"vopc,vopc,vopc,vopc,vop3a,vop3a\")\n    (set_attr \"length\" \"4,8,4,8,8,8\")])\n \n+(define_expand \"vec_cmpu<mode>di_exec\"\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operator 1 \"comparison_operator\"\n+     [(match_operand:VCMP_MODE_INT 2 \"gcn_alu_operand\")\n+      (match_operand:VCMP_MODE_INT 3 \"gcn_vop3_operand\")])\n+   (match_operand:DI 4 \"gcn_exec_reg_operand\")]\n+  \"\"\n+  {\n+    /* Unsigned comparisons use the same patterns as signed comparisons,\n+       except that they use unsigned operators (e.g. LTU vs LT).\n+       The '%E1' directive then does the Right Thing.  */\n+    emit_insn (gen_vec_cmpu<mode>di_exec (operands[0], operands[1],\n+\t\t\t\t\t  operands[2], operands[3],\n+\t\t\t\t\t  operands[4]));\n+    DONE;\n+  })\n+\n+(define_expand \"vec_cmp<u>v64qidi_exec\"\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operator 1 \"comparison_operator\"\n+     [(any_extend:V64SI (match_operand:V64QI 2 \"gcn_alu_operand\"))\n+      (any_extend:V64SI (match_operand:V64QI 3 \"gcn_vop3_operand\"))])\n+   (match_operand:DI 4 \"gcn_exec_reg_operand\")]\n+  \"can_create_pseudo_p ()\"\n+  {\n+    rtx sitmp1 = gen_reg_rtx (V64SImode);\n+    rtx sitmp2 = gen_reg_rtx (V64SImode);\n+\n+    emit_insn (gen_<expander>v64qiv64si2_exec (sitmp1, operands[2],\n+\t\t\t\t\t       operands[2], operands[4]));\n+    emit_insn (gen_<expander>v64qiv64si2_exec (sitmp2, operands[3],\n+\t\t\t\t\t       operands[3], operands[4]));\n+    emit_insn (gen_vec_cmpv64sidi_exec (operands[0], operands[1], sitmp1,\n+\t\t\t\t\tsitmp2, operands[4]));\n+    DONE;\n+  })\n+\n (define_insn \"vec_cmp<mode>di_dup\"\n   [(set (match_operand:DI 0 \"register_operand\"\t\t   \"=cV,cV, e,e,Sg\")\n \t(match_operator 1 \"comparison_operator\"\n-\t  [(vec_duplicate:VEC_1REG_MODE\n+\t  [(vec_duplicate:VCMP_MODE\n \t     (match_operand:<SCALAR_MODE> 2 \"gcn_alu_operand\"\n \t\t\t\t\t\t\t   \" Sv, B,Sv,B, A\"))\n-\t   (match_operand:VEC_1REG_MODE 3 \"gcn_vop3_operand\"\n-\t\t\t\t\t\t\t   \"  v, v, v,v, v\")]))\n+\t   (match_operand:VCMP_MODE 3 \"gcn_vop3_operand\"   \"  v, v, v,v, v\")]))\n    (clobber (match_scratch:DI 4\t\t\t\t   \"= X,X,cV,cV, X\"))]\n   \"\"\n   \"@\n@@ -2599,11 +2659,10 @@\n   [(set (match_operand:DI 0 \"register_operand\"\t\t    \"=cV,cV, e,e,Sg\")\n \t(and:DI\n \t  (match_operator 1 \"comparison_operator\"\n-\t    [(vec_duplicate:VEC_1REG_MODE\n+\t    [(vec_duplicate:VCMP_MODE\n \t       (match_operand:<SCALAR_MODE> 2 \"gcn_alu_operand\"\n \t\t\t\t\t\t\t    \" Sv, B,Sv,B, A\"))\n-\t     (match_operand:VEC_1REG_MODE 3 \"gcn_vop3_operand\"\n-\t\t\t\t\t\t\t    \"  v, v, v,v, v\")])\n+\t     (match_operand:VCMP_MODE 3 \"gcn_vop3_operand\"  \"  v, v, v,v, v\")])\n \t  (match_operand:DI 4 \"gcn_exec_reg_operand\"\t    \"  e, e, e,e, e\")))\n    (clobber (match_scratch:DI 5\t\t\t\t    \"= X,X,cV,cV, X\"))]\n   \"\"\n@@ -2627,72 +2686,72 @@\n   \"\"\n   \"\")\n \n-(define_expand \"vcond<VEC_ALL1REG_MODE:mode><VEC_1REG_ALT:mode>\"\n-  [(match_operand:VEC_ALL1REG_MODE 0 \"register_operand\")\n-   (match_operand:VEC_ALL1REG_MODE 1 \"gcn_vop3_operand\")\n-   (match_operand:VEC_ALL1REG_MODE 2 \"gcn_alu_operand\")\n+(define_expand \"vcond<VEC_ALLREG_MODE:mode><VEC_ALLREG_ALT:mode>\"\n+  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n+   (match_operand:VEC_ALLREG_MODE 1 \"gcn_vop3_operand\")\n+   (match_operand:VEC_ALLREG_MODE 2 \"gcn_alu_operand\")\n    (match_operator 3 \"comparison_operator\"\n-     [(match_operand:VEC_1REG_ALT 4 \"gcn_alu_operand\")\n-      (match_operand:VEC_1REG_ALT 5 \"gcn_vop3_operand\")])]\n+     [(match_operand:VEC_ALLREG_ALT 4 \"gcn_alu_operand\")\n+      (match_operand:VEC_ALLREG_ALT 5 \"gcn_vop3_operand\")])]\n   \"\"\n   {\n     rtx tmp = gen_reg_rtx (DImode);\n-    emit_insn (gen_vec_cmp<VEC_1REG_ALT:mode>di\n+    emit_insn (gen_vec_cmp<VEC_ALLREG_ALT:mode>di\n \t       (tmp, operands[3], operands[4], operands[5]));\n-    emit_insn (gen_vcond_mask_<VEC_ALL1REG_MODE:mode>di\n+    emit_insn (gen_vcond_mask_<VEC_ALLREG_MODE:mode>di\n \t       (operands[0], operands[1], operands[2], tmp));\n     DONE;\n   })\n \n-(define_expand \"vcond<VEC_ALL1REG_MODE:mode><VEC_1REG_ALT:mode>_exec\"\n-  [(match_operand:VEC_ALL1REG_MODE 0 \"register_operand\")\n-   (match_operand:VEC_ALL1REG_MODE 1 \"gcn_vop3_operand\")\n-   (match_operand:VEC_ALL1REG_MODE 2 \"gcn_alu_operand\")\n+(define_expand \"vcond<VEC_ALLREG_MODE:mode><VEC_ALLREG_ALT:mode>_exec\"\n+  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n+   (match_operand:VEC_ALLREG_MODE 1 \"gcn_vop3_operand\")\n+   (match_operand:VEC_ALLREG_MODE 2 \"gcn_alu_operand\")\n    (match_operator 3 \"comparison_operator\"\n-     [(match_operand:VEC_1REG_ALT 4 \"gcn_alu_operand\")\n-      (match_operand:VEC_1REG_ALT 5 \"gcn_vop3_operand\")])\n+     [(match_operand:VEC_ALLREG_ALT 4 \"gcn_alu_operand\")\n+      (match_operand:VEC_ALLREG_ALT 5 \"gcn_vop3_operand\")])\n    (match_operand:DI 6 \"gcn_exec_reg_operand\" \"e\")]\n   \"\"\n   {\n     rtx tmp = gen_reg_rtx (DImode);\n-    emit_insn (gen_vec_cmp<VEC_1REG_ALT:mode>di_exec\n+    emit_insn (gen_vec_cmp<VEC_ALLREG_ALT:mode>di_exec\n \t       (tmp, operands[3], operands[4], operands[5], operands[6]));\n-    emit_insn (gen_vcond_mask_<VEC_ALL1REG_MODE:mode>di\n+    emit_insn (gen_vcond_mask_<VEC_ALLREG_MODE:mode>di\n \t       (operands[0], operands[1], operands[2], tmp));\n     DONE;\n   })\n \n-(define_expand \"vcondu<VEC_ALL1REG_MODE:mode><VEC_1REG_INT_ALT:mode>\"\n-  [(match_operand:VEC_ALL1REG_MODE 0 \"register_operand\")\n-   (match_operand:VEC_ALL1REG_MODE 1 \"gcn_vop3_operand\")\n-   (match_operand:VEC_ALL1REG_MODE 2 \"gcn_alu_operand\")\n+(define_expand \"vcondu<VEC_ALLREG_MODE:mode><VEC_ALLREG_INT_MODE:mode>\"\n+  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n+   (match_operand:VEC_ALLREG_MODE 1 \"gcn_vop3_operand\")\n+   (match_operand:VEC_ALLREG_MODE 2 \"gcn_alu_operand\")\n    (match_operator 3 \"comparison_operator\"\n-     [(match_operand:VEC_1REG_INT_ALT 4 \"gcn_alu_operand\")\n-      (match_operand:VEC_1REG_INT_ALT 5 \"gcn_vop3_operand\")])]\n+     [(match_operand:VEC_ALLREG_INT_MODE 4 \"gcn_alu_operand\")\n+      (match_operand:VEC_ALLREG_INT_MODE 5 \"gcn_vop3_operand\")])]\n   \"\"\n   {\n     rtx tmp = gen_reg_rtx (DImode);\n-    emit_insn (gen_vec_cmp<VEC_1REG_INT_ALT:mode>di\n+    emit_insn (gen_vec_cmpu<VEC_ALLREG_INT_MODE:mode>di\n \t       (tmp, operands[3], operands[4], operands[5]));\n-    emit_insn (gen_vcond_mask_<VEC_ALL1REG_MODE:mode>di\n+    emit_insn (gen_vcond_mask_<VEC_ALLREG_MODE:mode>di\n \t       (operands[0], operands[1], operands[2], tmp));\n     DONE;\n   })\n \n-(define_expand \"vcondu<VEC_ALL1REG_MODE:mode><VEC_1REG_INT_ALT:mode>_exec\"\n-  [(match_operand:VEC_ALL1REG_MODE 0 \"register_operand\")\n-   (match_operand:VEC_ALL1REG_MODE 1 \"gcn_vop3_operand\")\n-   (match_operand:VEC_ALL1REG_MODE 2 \"gcn_alu_operand\")\n+(define_expand \"vcondu<VEC_ALLREG_MODE:mode><VEC_ALLREG_INT_MODE:mode>_exec\"\n+  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n+   (match_operand:VEC_ALLREG_MODE 1 \"gcn_vop3_operand\")\n+   (match_operand:VEC_ALLREG_MODE 2 \"gcn_alu_operand\")\n    (match_operator 3 \"comparison_operator\"\n-     [(match_operand:VEC_1REG_INT_ALT 4 \"gcn_alu_operand\")\n-      (match_operand:VEC_1REG_INT_ALT 5 \"gcn_vop3_operand\")])\n+     [(match_operand:VEC_ALLREG_INT_MODE 4 \"gcn_alu_operand\")\n+      (match_operand:VEC_ALLREG_INT_MODE 5 \"gcn_vop3_operand\")])\n    (match_operand:DI 6 \"gcn_exec_reg_operand\" \"e\")]\n   \"\"\n   {\n     rtx tmp = gen_reg_rtx (DImode);\n-    emit_insn (gen_vec_cmp<VEC_1REG_INT_ALT:mode>di_exec\n+    emit_insn (gen_vec_cmpu<VEC_ALLREG_INT_MODE:mode>di_exec\n \t       (tmp, operands[3], operands[4], operands[5], operands[6]));\n-    emit_insn (gen_vcond_mask_<VEC_ALL1REG_MODE:mode>di\n+    emit_insn (gen_vcond_mask_<VEC_ALLREG_MODE:mode>di\n \t       (operands[0], operands[1], operands[2], tmp));\n     DONE;\n   })"}, {"sha": "c78df1d5e3ee3cd8f01e1af6c49e468e427dfcaa", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e159efc76324f40c85581af4aca9cd4f0852cc8/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e159efc76324f40c85581af4aca9cd4f0852cc8/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=0e159efc76324f40c85581af4aca9cd4f0852cc8", "patch": "@@ -5939,10 +5939,10 @@ print_operand (FILE *file, rtx x, int code)\n \tswitch (GET_MODE_SIZE (mode))\n \t  {\n \t  case 1:\n-\t    s = \"32\";\n-\t    break;\n+\t    output_operand_lossage (\"operand %%xn code invalid for QImode\");\n+\t    return;\n \t  case 2:\n-\t    s = float_p ? \"16\" : \"32\";\n+\t    s = \"16\";\n \t    break;\n \t  case 4:\n \t    s = \"32\";"}, {"sha": "a4705361d4a5b8f2cf581cac79199e3d02e866da", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e159efc76324f40c85581af4aca9cd4f0852cc8/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e159efc76324f40c85581af4aca9cd4f0852cc8/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=0e159efc76324f40c85581af4aca9cd4f0852cc8", "patch": "@@ -360,7 +360,9 @@\n    (not \"one_cmpl\")\n    (popcount \"popcount\")\n    (clz \"clz\")\n-   (ctz \"ctz\")])\n+   (ctz \"ctz\")\n+   (sign_extend \"extend\")\n+   (zero_extend \"zero_extend\")])\n \n ;; }}}\n ;; {{{ Miscellaneous instructions"}]}