{"sha": "f1e344ed754edda1085dfeecca07680119f3a67c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFlMzQ0ZWQ3NTRlZGRhMTA4NWRmZWVjY2EwNzY4MDExOWYzYTY3Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-10-20T21:17:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-10-20T21:17:30Z"}, "message": "re PR tree-optimization/45919 (ICE: SIGSEGV in fold_ctor_reference (tree-ssa-ccp.c:1527) at -O1)\n\n\tPR tree-optimization/45919\n\t* tree-ssa-ccp.c (fold_nonarray_ctor_reference): Handle flexible\n\tarray members.\n\n\t* gcc.c-torture/compile/pr45919.c: New test.\n\nFrom-SVN: r165740", "tree": {"sha": "6cf3a5a5babb67d1351ee60f1f15129bdb7a263b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cf3a5a5babb67d1351ee60f1f15129bdb7a263b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1e344ed754edda1085dfeecca07680119f3a67c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e344ed754edda1085dfeecca07680119f3a67c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1e344ed754edda1085dfeecca07680119f3a67c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e344ed754edda1085dfeecca07680119f3a67c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1dff453d7b77b6b12ef93ab80e2016e5dbab637d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dff453d7b77b6b12ef93ab80e2016e5dbab637d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dff453d7b77b6b12ef93ab80e2016e5dbab637d"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "5fc321d012d90e7c216260e054bbea6929b76fde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e344ed754edda1085dfeecca07680119f3a67c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e344ed754edda1085dfeecca07680119f3a67c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1e344ed754edda1085dfeecca07680119f3a67c", "patch": "@@ -1,5 +1,9 @@\n 2010-10-20  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/45919\n+\t* tree-ssa-ccp.c (fold_nonarray_ctor_reference): Handle flexible\n+\tarray members.\n+\n \tPR tree-optimization/46066\n \t* tree-parloops.c (create_parallel_loop): Use gsi_last_nondebug_bb\n \tinstead of gsi_last_bb."}, {"sha": "5abf927bf9a9d5f8f5572b82bd2d42a6ed1a4ae5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e344ed754edda1085dfeecca07680119f3a67c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e344ed754edda1085dfeecca07680119f3a67c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1e344ed754edda1085dfeecca07680119f3a67c", "patch": "@@ -1,5 +1,8 @@\n 2010-10-20  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/45919\n+\t* gcc.c-torture/compile/pr45919.c: New test.\n+\n \tPR tree-optimization/46066\n \t* gcc.dg/autopar/pr46066.c: New test.\n "}, {"sha": "caf518db041fcaa4fa5b1603b58f84f972e1d14a", "filename": "gcc/testsuite/gcc.c-torture/compile/pr45919.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e344ed754edda1085dfeecca07680119f3a67c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr45919.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e344ed754edda1085dfeecca07680119f3a67c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr45919.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr45919.c?ref=f1e344ed754edda1085dfeecca07680119f3a67c", "patch": "@@ -0,0 +1,9 @@\n+/* PR tree-optimization/45919 */\n+\n+const struct S { int a; int b[]; } s = { 0, { 0 }};\n+\n+int\n+foo (void)\n+{\n+  return s.b[0];\n+}"}, {"sha": "2d9c1233ea92b32e3c44e32c53862f12cdff06c9", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e344ed754edda1085dfeecca07680119f3a67c/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e344ed754edda1085dfeecca07680119f3a67c/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=f1e344ed754edda1085dfeecca07680119f3a67c", "patch": "@@ -1523,23 +1523,30 @@ fold_nonarray_ctor_reference (tree type, tree ctor,\n       double_int bits_per_unit_cst = uhwi_to_double_int (BITS_PER_UNIT);\n       double_int bitoffset_end;\n \n-      /* Variable sized objects in static constructors makes no sense.  */\n+      /* Variable sized objects in static constructors makes no sense,\n+\t but field_size can be NULL for flexible array members.  */\n       gcc_assert (TREE_CODE (field_offset) == INTEGER_CST\n \t\t  && TREE_CODE (byte_offset) == INTEGER_CST\n-\t\t  && TREE_CODE (field_size) == INTEGER_CST);\n+\t\t  && (field_size != NULL_TREE\n+\t\t      ? TREE_CODE (field_size) == INTEGER_CST\n+\t\t      : TREE_CODE (TREE_TYPE (cfield)) == ARRAY_TYPE));\n \n       /* Compute bit offset of the field.  */\n       bitoffset = double_int_add (tree_to_double_int (field_offset),\n \t\t\t\t  double_int_mul (byte_offset_cst,\n \t\t\t\t\t\t  bits_per_unit_cst));\n       /* Compute bit offset where the field ends.  */\n-      bitoffset_end = double_int_add (bitoffset,\n-\t\t\t\t      tree_to_double_int (field_size));\n+      if (field_size != NULL_TREE)\n+\tbitoffset_end = double_int_add (bitoffset,\n+\t\t\t\t\ttree_to_double_int (field_size));\n+      else\n+\tbitoffset_end = double_int_zero;\n \n       /* Is OFFSET in the range (BITOFFSET, BITOFFSET_END)? */\n       if (double_int_cmp (uhwi_to_double_int (offset), bitoffset, 0) >= 0\n-\t  && double_int_cmp (uhwi_to_double_int (offset),\n-\t\t\t     bitoffset_end, 0) < 0)\n+\t  && (field_size == NULL_TREE\n+\t      || double_int_cmp (uhwi_to_double_int (offset),\n+\t\t\t\t bitoffset_end, 0) < 0))\n \t{\n \t  double_int access_end = double_int_add (uhwi_to_double_int (offset),\n \t\t\t\t\t\t  uhwi_to_double_int (size));"}]}