{"sha": "23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNjNjQ4NTNjODNmM2NmOWNkZjY5MjVhYjFjNzdkOTUxY2QxNjg2Yg==", "commit": {"author": {"name": "Jennifer Yao", "email": "jenny.hyphen.fa@gmail.com", "date": "2015-11-13T14:51:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-11-13T14:51:25Z"}, "message": "More fine-grained autoconf checks for C99 library\n\n2015-11-13  Jennifer Yao  <jenny.hyphen.fa@gmail.com>\n\t    Jonathan Wakely  <jwakely@redhat.com>\n\n\tPR libstdc++/58393\n\tPR libstdc++/61580\n\t* acinclude.m4 (GLIBCXX_ENABLE_C99): Perform tests twice, with\n\t-std=c++11 as well as -std=c++98, and define separate macros for each.\n\tCache the results of checking for complex math and wide character\n\tfunctions. Reformat for readability.\n\t* config.h.in: Regenerate.\n\t* include/bits/c++config: Define _GLIBCXX_USE_C99_XXX macros to\n\teither _GLIBCXX98_USE_C99_XXX or _GLIBCXX11_USE_C99_XXX according to\n\tlanguage standard in use.\n\t* config/locale/dragonfly/c_locale.h (std::__convert_from_v): Replace\n\t_GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_STDIO.\n\t* config/locale/generic/c_locale.h (std::__convert_from_v): Likewise.\n\t* config/locale/gnu/c_locale.h (std::__convert_from_v): Likewise.\n\t* config/os/bsd/dragonfly/os_defines.h: Define _GLIBCXX_USE_C99_STDIO,\n\t_GLIBCXX_USE_C99_STDLIB, and _GLIBCXX_USE_C99_WCHAR.\n\t* configure: Regenerate.\n\t* include/bits/basic_string.h: Make numeric conversion functions\n\tdepend on _GLIBCXX_USE_C99_STDIO, _GLIBCXX_USE_C99_STDLIB, or\n\t_GLIBCXX_USE_C99_WCHAR, instead of _GLIBCXX_USE_C99.\n\t* include/ext/vstring.h: Likewise.\n\t* include/bits/locale_facets.tcc (std::num_put::_M_insert_float):\n\tReplace _GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_STDIO.\n\t* include/bits/locale_facets_nonio.tcc (std::money_put::do_put):\n\tLikewise.\n\t* include/c_compatibility/math.h: Replace _GLIBCXX_USE_C99 with\n\t_GLIBCXX_USE_C99_MATH.\n\t* include/c_compatibility/wchar.h: Replace _GLIBCXX_USE_C99 with\n\t_GLIBCXX_USE_C99_WCHAR.\n\t* include/c_global/cstdio: Replace _GLIBCXX_USE_C99 with\n\t_GLIBCXX_USE_C99_STDIO.\n\t* include/c_global/cstdlib: Replace _GLIBCXX_USE_C99 with\n\t_GLIBCXX_USE_C99_STDLIB.\n\t* include/c_global/cwchar: Replace _GLIBCXX_USE_C99 with\n\t_GLIBCXX_USE_C99_WCHAR.\n\t* include/c_std/cstdio: Replace _GLIBCXX_USE_C99 with\n\t_GLIBCXX_USE_C99_STDIO.\n\t* include/c_std/cstdlib: Replace _GLIBCXX_USE_C99 with\n\t_GLIBCXX_USE_C99_STDLIB.\n\t* include/c_std/cwchar: Replace _GLIBCXX_USE_C99 with\n\t_GLIBCXX_USE_C99_WCHAR.\n\t* include/tr1/cstdio: Replace _GLIBCXX_USE_C99 with\n\t_GLIBCXX_USE_C99_STDIO.\n\t* include/tr1/cstdlib: Replace _GLIBCXX_USE_C99 with\n\t_GLIBCXX_USE_C99_STDLIB.\n\t* include/tr1/cwchar: Replace _GLIBCXX_USE_C99 with\n\t_GLIBCXX_USE_C99_WCHAR.\n\t* include/tr1/stdlib.h: Replace _GLIBCXX_USE_C99 with\n\t_GLIBCXX_USE_C99_STDLIB.\n\t* src/c++98/locale_facets.cc (std::__num_base::_S_format_float):\n\tReplace _GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_STDIO.\n\t* testsuite/18_support/exception_ptr/60612-terminate.cc: Replace\n\t_GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_STDLIB.\n\t* testsuite/18_support/exception_ptr/60612-unexpected.cc: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stod.cc\n\t(test01): Replace _GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_WCHAR.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tstof.cc: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tstoi.cc: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tstol.cc: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tstold.cc: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tstoll.cc: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tstoul.cc: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tstoull.cc: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tto_wstring.cc: Likewise.\n\t* testsuite/26_numerics/headers/cstdlib/13943.cc: Replace\n\t_GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_STDLIB.\n\t* testsuite/26_numerics/headers/cstdlib/types_std_c++0x.cc: Likewise.\n\t* testsuite/lib/libstdc++.exp (check_v3_target_string_conversions):\n\tChange preprocessor #if conditional so that it uses\n\t_GLIBCXX_USE_C99_STDIO, _GLIBCXX_USE_C99_STDLIB, and\n\t_GLIBCXX_USE_C99_WCHAR, instead of _GLIBCXX_USE_C99.\n\t* testsuite/tr1/8_c_compatibility/cmath/templates.cc: Replace\n\t_GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_MATH.\n\t* testsuite/tr1/8_c_compatibility/cstdio/functions.cc: Replace\n\t_GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_STDIO.\n\t* testsuite/tr1/8_c_compatibility/cstdlib/functions.cc: Replace\n\t_GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_STDLIB.\n\t* testsuite/tr1/8_c_compatibility/cstdlib/types_std_tr1.cc: Likewise.\n\t* testsuite/tr1/8_c_compatibility/cwchar/functions.cc: Replace\n\t_GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_WCHAR.\n\t* testsuite/util/testsuite_fs.h: Replace _GLIBCXX_USE_C99 with\n\t_GLIBCXX_USE_C99_STDIO.\n\nCo-Authored-By: Jonathan Wakely <jwakely@redhat.com>\n\nFrom-SVN: r230324", "tree": {"sha": "016605b19b096572e3039c93cd9cad0d7940b26d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/016605b19b096572e3039c93cd9cad0d7940b26d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/comments", "author": {"login": "Jenny-fa", "id": 12257753, "node_id": "MDQ6VXNlcjEyMjU3NzUz", "avatar_url": "https://avatars.githubusercontent.com/u/12257753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jenny-fa", "html_url": "https://github.com/Jenny-fa", "followers_url": "https://api.github.com/users/Jenny-fa/followers", "following_url": "https://api.github.com/users/Jenny-fa/following{/other_user}", "gists_url": "https://api.github.com/users/Jenny-fa/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jenny-fa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jenny-fa/subscriptions", "organizations_url": "https://api.github.com/users/Jenny-fa/orgs", "repos_url": "https://api.github.com/users/Jenny-fa/repos", "events_url": "https://api.github.com/users/Jenny-fa/events{/privacy}", "received_events_url": "https://api.github.com/users/Jenny-fa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a054560d994d592b11f461447e4fafb0e51787d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a054560d994d592b11f461447e4fafb0e51787d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a054560d994d592b11f461447e4fafb0e51787d3"}], "stats": {"total": 2169, "additions": 1572, "deletions": 597}, "files": [{"sha": "dd86ffb1eb4e5d74bea1d1b2882b7520f2d2b003", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -1,3 +1,97 @@\n+2015-11-13  Jennifer Yao  <jenny.hyphen.fa@gmail.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/58393\n+\tPR libstdc++/61580\n+\t* acinclude.m4 (GLIBCXX_ENABLE_C99): Perform tests twice, with\n+\t-std=c++11 as well as -std=c++98, and define separate macros for each.\n+\tCache the results of checking for complex math and wide character\n+\tfunctions. Reformat for readability.\n+\t* config.h.in: Regenerate.\n+\t* include/bits/c++config: Define _GLIBCXX_USE_C99_XXX macros to\n+\teither _GLIBCXX98_USE_C99_XXX or _GLIBCXX11_USE_C99_XXX according to\n+\tlanguage standard in use.\n+\t* config/locale/dragonfly/c_locale.h (std::__convert_from_v): Replace\n+\t_GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_STDIO.\n+\t* config/locale/generic/c_locale.h (std::__convert_from_v): Likewise.\n+\t* config/locale/gnu/c_locale.h (std::__convert_from_v): Likewise.\n+\t* config/os/bsd/dragonfly/os_defines.h: Define _GLIBCXX_USE_C99_STDIO,\n+\t_GLIBCXX_USE_C99_STDLIB, and _GLIBCXX_USE_C99_WCHAR.\n+\t* configure: Regenerate.\n+\t* include/bits/basic_string.h: Make numeric conversion functions\n+\tdepend on _GLIBCXX_USE_C99_STDIO, _GLIBCXX_USE_C99_STDLIB, or\n+\t_GLIBCXX_USE_C99_WCHAR, instead of _GLIBCXX_USE_C99.\n+\t* include/ext/vstring.h: Likewise.\n+\t* include/bits/locale_facets.tcc (std::num_put::_M_insert_float):\n+\tReplace _GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_STDIO.\n+\t* include/bits/locale_facets_nonio.tcc (std::money_put::do_put):\n+\tLikewise.\n+\t* include/c_compatibility/math.h: Replace _GLIBCXX_USE_C99 with\n+\t_GLIBCXX_USE_C99_MATH.\n+\t* include/c_compatibility/wchar.h: Replace _GLIBCXX_USE_C99 with\n+\t_GLIBCXX_USE_C99_WCHAR.\n+\t* include/c_global/cstdio: Replace _GLIBCXX_USE_C99 with\n+\t_GLIBCXX_USE_C99_STDIO.\n+\t* include/c_global/cstdlib: Replace _GLIBCXX_USE_C99 with\n+\t_GLIBCXX_USE_C99_STDLIB.\n+\t* include/c_global/cwchar: Replace _GLIBCXX_USE_C99 with\n+\t_GLIBCXX_USE_C99_WCHAR.\n+\t* include/c_std/cstdio: Replace _GLIBCXX_USE_C99 with\n+\t_GLIBCXX_USE_C99_STDIO.\n+\t* include/c_std/cstdlib: Replace _GLIBCXX_USE_C99 with\n+\t_GLIBCXX_USE_C99_STDLIB.\n+\t* include/c_std/cwchar: Replace _GLIBCXX_USE_C99 with\n+\t_GLIBCXX_USE_C99_WCHAR.\n+\t* include/tr1/cstdio: Replace _GLIBCXX_USE_C99 with\n+\t_GLIBCXX_USE_C99_STDIO.\n+\t* include/tr1/cstdlib: Replace _GLIBCXX_USE_C99 with\n+\t_GLIBCXX_USE_C99_STDLIB.\n+\t* include/tr1/cwchar: Replace _GLIBCXX_USE_C99 with\n+\t_GLIBCXX_USE_C99_WCHAR.\n+\t* include/tr1/stdlib.h: Replace _GLIBCXX_USE_C99 with\n+\t_GLIBCXX_USE_C99_STDLIB.\n+\t* src/c++98/locale_facets.cc (std::__num_base::_S_format_float):\n+\tReplace _GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_STDIO.\n+\t* testsuite/18_support/exception_ptr/60612-terminate.cc: Replace\n+\t_GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_STDLIB.\n+\t* testsuite/18_support/exception_ptr/60612-unexpected.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stod.cc\n+\t(test01): Replace _GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_WCHAR.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tstof.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tstoi.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tstol.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tstold.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tstoll.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tstoul.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tstoull.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tto_wstring.cc: Likewise.\n+\t* testsuite/26_numerics/headers/cstdlib/13943.cc: Replace\n+\t_GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_STDLIB.\n+\t* testsuite/26_numerics/headers/cstdlib/types_std_c++0x.cc: Likewise.\n+\t* testsuite/lib/libstdc++.exp (check_v3_target_string_conversions):\n+\tChange preprocessor #if conditional so that it uses\n+\t_GLIBCXX_USE_C99_STDIO, _GLIBCXX_USE_C99_STDLIB, and\n+\t_GLIBCXX_USE_C99_WCHAR, instead of _GLIBCXX_USE_C99.\n+\t* testsuite/tr1/8_c_compatibility/cmath/templates.cc: Replace\n+\t_GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_MATH.\n+\t* testsuite/tr1/8_c_compatibility/cstdio/functions.cc: Replace\n+\t_GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_STDIO.\n+\t* testsuite/tr1/8_c_compatibility/cstdlib/functions.cc: Replace\n+\t_GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_STDLIB.\n+\t* testsuite/tr1/8_c_compatibility/cstdlib/types_std_tr1.cc: Likewise.\n+\t* testsuite/tr1/8_c_compatibility/cwchar/functions.cc: Replace\n+\t_GLIBCXX_USE_C99 with _GLIBCXX_USE_C99_WCHAR.\n+\t* testsuite/util/testsuite_fs.h: Replace _GLIBCXX_USE_C99 with\n+\t_GLIBCXX_USE_C99_STDIO.\n+\n 2015-11-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/experimental/bits/shared_ptr.h: Tweak comments."}, {"sha": "deefa04155edbef7f987cd3f46b934fd76e79164", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 425, "deletions": 221, "changes": 646, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -915,234 +915,438 @@ AC_DEFUN([GLIBCXX_ENABLE_C99], [\n   GLIBCXX_ENABLE(c99,$1,,[turns on ISO/IEC 9899:1999 support])\n \n   if test x\"$enable_c99\" = x\"yes\"; then\n+    AC_LANG_SAVE\n+    AC_LANG_CPLUSPLUS\n \n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n+    # Use -std=c++98 (instead of -std=gnu++98) because leaving __STRICT_ANSI__\n+    # undefined may cause fake C99 facilities, like pre-standard snprintf,\n+    # to be spuriously enabled.\n+    ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+    CXXFLAGS=\"$CXXFLAGS -std=c++98\"\n+    ac_save_LIBS=\"$LIBS\"\n+    ac_save_gcc_no_link=\"$gcc_no_link\"\n+\n+    if test x$gcc_no_link != xyes; then\n+      # Use -fno-exceptions to that the C driver can link these tests without\n+      # hitting undefined references to personality routines.\n+      CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+      AC_CHECK_LIB(m, sin, [LIBS=\"$LIBS -lm\"], [\n+        # Use the default compile-only tests in GCC_TRY_COMPILE_OR_LINK\n+        gcc_no_link=yes\n+      ])\n+    fi\n \n-  # Use -std=c++98 because the default (-std=gnu++98) leaves __STRICT_ANSI__\n-  # undefined and fake C99 facilities - like pre-standard snprintf - may be\n-  # spuriously enabled.\n-  # Long term, -std=c++0x could be even better, could manage to explicitly\n-  # request C99 facilities to the underlying C headers.\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\"$CXXFLAGS -std=c++98\"\n-  ac_save_LIBS=\"$LIBS\"\n-  ac_save_gcc_no_link=\"$gcc_no_link\"\n+    # Check for the existence of <math.h> functions used if C99 is enabled.\n+    AC_MSG_CHECKING([for ISO C99 support in <math.h> for C++98])\n+    AC_CACHE_VAL(glibcxx_cv_c99_math_cxx98, [\n+      GCC_TRY_COMPILE_OR_LINK(\n+        [#include <math.h>\n+         volatile double d1, d2;\n+         volatile int i;],\n+        [i = fpclassify(d1);\n+         i = isfinite(d1);\n+         i = isinf(d1);\n+         i = isnan(d1);\n+         i = isnormal(d1);\n+         i = signbit(d1);\n+         i = isgreater(d1, d2);\n+         i = isgreaterequal(d1, d2);\n+         i = isless(d1, d2);\n+         i = islessequal(d1, d2);\n+         i = islessgreater(d1, d2);\n+         i = islessgreater(d1, d2);\n+         i = isunordered(d1, d2);\n+        ], [glibcxx_cv_c99_math_cxx98=yes], [glibcxx_cv_c99_math_cxx98=no])\n+    ])\n+    AC_MSG_RESULT($glibcxx_cv_c99_math_cxx98)\n+    if test x\"$glibcxx_cv_c99_math_cxx98\" = x\"yes\"; then\n+      AC_DEFINE(_GLIBCXX98_USE_C99_MATH, 1,\n+        [Define if C99 functions or macros in <math.h> should be imported\n+        in <cmath> in namespace std for C++98.])\n+    fi\n \n-  if test x$gcc_no_link != xyes; then\n-    # Use -fno-exceptions to that the C driver can link these tests without\n-    # hitting undefined references to personality routines.\n-    CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n-    AC_CHECK_LIB(m, sin, [\n-      LIBS=\"$LIBS -lm\"\n-    ], [\n-      # Use the default compile-only tests in GCC_TRY_COMPILE_OR_LINK\n-      gcc_no_link=yes\n+    # Check for the existence of <complex.h> complex math functions.\n+    # This is necessary even though libstdc++ uses the builtin versions\n+    # of these functions, because if the builtin cannot be used, a reference\n+    # to the library function is emitted.\n+    AC_CHECK_HEADERS(tgmath.h, ac_has_tgmath_h=yes, ac_has_tgmath_h=no)\n+    AC_CHECK_HEADERS(complex.h, ac_has_complex_h=yes, ac_has_complex_h=no)\n+    if test x\"$ac_has_complex_h\" = x\"yes\"; then\n+      AC_MSG_CHECKING([for ISO C99 support in <complex.h> for C++98])\n+      AC_CACHE_VAL(glibcxx_cv_c99_complex_cxx98, [\n+        GCC_TRY_COMPILE_OR_LINK(\n+          [#include <complex.h>\n+           typedef __complex__ float float_type;\n+           typedef __complex__ double double_type;\n+           typedef __complex__ long double ld_type;\n+           volatile float_type tmpf;\n+           volatile double_type tmpd;\n+           volatile ld_type tmpld;\n+           volatile float f;\n+           volatile double d;\n+           volatile long double ld;],\n+          [f = cabsf(tmpf);\n+           f = cargf(tmpf);\n+           tmpf = ccosf(tmpf);\n+           tmpf = ccoshf(tmpf);\n+           tmpf = cexpf(tmpf);\n+           tmpf = clogf(tmpf);\n+           tmpf = csinf(tmpf);\n+           tmpf = csinhf(tmpf);\n+           tmpf = csqrtf(tmpf);\n+           tmpf = ctanf(tmpf);\n+           tmpf = ctanhf(tmpf);\n+           tmpf = cpowf(tmpf, tmpf);\n+           tmpf = cprojf(tmpf);\n+           d = cabs(tmpd);\n+           d = carg(tmpd);\n+           tmpd = ccos(tmpd);\n+           tmpd = ccosh(tmpd);\n+           tmpd = cexp(tmpd);\n+           tmpd = clog(tmpd);\n+           tmpd = csin(tmpd);\n+           tmpd = csinh(tmpd);\n+           tmpd = csqrt(tmpd);\n+           tmpd = ctan(tmpd);\n+           tmpd = ctanh(tmpd);\n+           tmpd = cpow(tmpd, tmpd);\n+           tmpd = cproj(tmpd);\n+           ld = cabsl(tmpld);\n+           ld = cargl(tmpld);\n+           tmpld = ccosl(tmpld);\n+           tmpld = ccoshl(tmpld);\n+           tmpld = cexpl(tmpld);\n+           tmpld = clogl(tmpld);\n+           tmpld = csinl(tmpld);\n+           tmpld = csinhl(tmpld);\n+           tmpld = csqrtl(tmpld);\n+           tmpld = ctanl(tmpld);\n+           tmpld = ctanhl(tmpld);\n+           tmpld = cpowl(tmpld, tmpld);\n+           tmpld = cprojl(tmpld);\n+          ], [glibcxx_cv_c99_complex_cxx98=yes], [glibcxx_cv_c99_complex_cxx98=no])\n+      ])\n+    fi\n+    AC_MSG_RESULT($glibcxx_cv_c99_complex_cxx98)\n+    if test x\"$glibcxx_cv_c99_complex_cxx98\" = x\"yes\"; then\n+      AC_DEFINE(_GLIBCXX98_USE_C99_COMPLEX, 1,\n+        [Define if C99 functions in <complex.h> should be used in\n+        <complex> for C++98. Using compiler builtins for these functions\n+        requires corresponding C99 library functions to be present.])\n+    fi\n+\n+    # Check for the existence in <stdio.h> of vscanf, et. al.\n+    AC_MSG_CHECKING([for ISO C99 support in <stdio.h> for C++98])\n+    AC_CACHE_VAL(glibcxx_cv_c99_stdio_cxx98, [\n+      GCC_TRY_COMPILE_OR_LINK(\n+        [#include <stdio.h>\n+         #include <stdarg.h>\n+         void foo(char* fmt, ...)\n+         {\n+           va_list args; va_start(args, fmt);\n+           vfscanf(stderr, \"%i\", args);\n+           vscanf(\"%i\", args);\n+           vsnprintf(fmt, 0, \"%i\", args);\n+           vsscanf(fmt, \"%i\", args);\n+           snprintf(fmt, 0, \"%i\");\n+         }], [],\n+        [glibcxx_cv_c99_stdio_cxx98=yes], [glibcxx_cv_c99_stdio_cxx98=no])\n     ])\n-  fi\n+    AC_MSG_RESULT($glibcxx_cv_c99_stdio_cxx98)\n+    if test x\"$glibcxx_cv_c99_stdio_cxx98\" = x\"yes\"; then\n+      AC_DEFINE(_GLIBCXX98_USE_C99_STDIO, 1,\n+        [Define if C99 functions or macros in <stdio.h> should be imported\n+        in <cstdio> in namespace std for C++98.])\n+    fi\n \n-  # Check for the existence of <math.h> functions used if C99 is enabled.\n-  AC_MSG_CHECKING([for ISO C99 support in <math.h>])\n-  AC_CACHE_VAL(glibcxx_cv_c99_math, [\n-  GCC_TRY_COMPILE_OR_LINK(\n-     [#include <math.h>\n-      volatile double d1, d2;\n-      volatile int i;],\n-     [i = fpclassify(d1);\n-      i = isfinite(d1);\n-      i = isinf(d1);\n-      i = isnan(d1);\n-      i = isnormal(d1);\n-      i = signbit(d1);\n-      i = isgreater(d1, d2);\n-      i = isgreaterequal(d1, d2);\n-      i = isless(d1, d2);\n-      i = islessequal(d1, d2);\n-      i = islessgreater(d1, d2);\n-      i = islessgreater(d1, d2);\n-      i = isunordered(d1, d2);\n-     ],[glibcxx_cv_c99_math=yes], [glibcxx_cv_c99_math=no])\n-  ])\n-  AC_MSG_RESULT($glibcxx_cv_c99_math)\n-  if test x\"$glibcxx_cv_c99_math\" = x\"yes\"; then\n-    AC_DEFINE(_GLIBCXX_USE_C99_MATH, 1,\n-\t      [Define if C99 functions or macros in <math.h> should be imported\n-\t      in <cmath> in namespace std.])\n-  fi\n+    # Check for the existence in <wchar.h> of wcstold, etc.\n+    if test x\"$ac_has_wchar_h\" = xyes &&\n+       test x\"$ac_has_wctype_h\" = xyes; then\n+      AC_MSG_CHECKING([for ISO C99 support in <wchar.h> for C++98])\n+      AC_CACHE_VAL(glibcxx_cv_c99_wchar_cxx98, [\n+        AC_TRY_COMPILE([#include <wchar.h>\n+          namespace test\n+          {\n+            using ::wcstold;\n+            using ::wcstoll;\n+            using ::wcstoull;\n+          }\n+        ], [], [glibcxx_cv_c99_wchar_cxx98=yes], [glibcxx_cv_c99_wchar_cxx98=no])\n+      ])\n \n-  # Check for the existence of <complex.h> complex math functions.\n-  # This is necessary even though libstdc++ uses the builtin versions\n-  # of these functions, because if the builtin cannot be used, a reference\n-  # to the library function is emitted.\n-  AC_CHECK_HEADERS(tgmath.h, ac_has_tgmath_h=yes, ac_has_tgmath_h=no)\n-  AC_CHECK_HEADERS(complex.h, ac_has_complex_h=yes, ac_has_complex_h=no)\n-  glibcxx_cv_c99_complex=no;\n-  if test x\"$ac_has_complex_h\" = x\"yes\"; then\n-    AC_MSG_CHECKING([for ISO C99 support in <complex.h>])\n-    GCC_TRY_COMPILE_OR_LINK(\n-       [#include <complex.h>\n-\ttypedef __complex__ float float_type;\n-\ttypedef __complex__ double double_type;\n-\ttypedef __complex__ long double ld_type;\n-\tvolatile float_type tmpf;\n-\tvolatile double_type tmpd;\n-\tvolatile ld_type tmpld;\n-\tvolatile float f;\n-\tvolatile double d;\n-\tvolatile long double ld;],\n-       [f = cabsf(tmpf);\n-\tf = cargf(tmpf);\n-\ttmpf = ccosf(tmpf);\n-\ttmpf = ccoshf(tmpf);\n-\ttmpf = cexpf(tmpf);\n-\ttmpf = clogf(tmpf);\n-\ttmpf = csinf(tmpf);\n-\ttmpf = csinhf(tmpf);\n-\ttmpf = csqrtf(tmpf);\n-\ttmpf = ctanf(tmpf);\n-\ttmpf = ctanhf(tmpf);\n-\ttmpf = cpowf(tmpf, tmpf);\n-\ttmpf = cprojf(tmpf);\n-\td = cabs(tmpd);\n-\td = carg(tmpd);\n-\ttmpd = ccos(tmpd);\n-\ttmpd = ccosh(tmpd);\n-\ttmpd = cexp(tmpd);\n-\ttmpd = clog(tmpd);\n-\ttmpd = csin(tmpd);\n-\ttmpd = csinh(tmpd);\n-\ttmpd = csqrt(tmpd);\n-\ttmpd = ctan(tmpd);\n-\ttmpd = ctanh(tmpd);\n-\ttmpd = cpow(tmpd, tmpd);\n-\ttmpd = cproj(tmpd);\n-\tld = cabsl(tmpld);\n-\tld = cargl(tmpld);\n-\ttmpld = ccosl(tmpld);\n-\ttmpld = ccoshl(tmpld);\n-\ttmpld = cexpl(tmpld);\n-\ttmpld = clogl(tmpld);\n-\ttmpld = csinl(tmpld);\n-\ttmpld = csinhl(tmpld);\n-\ttmpld = csqrtl(tmpld);\n-\ttmpld = ctanl(tmpld);\n-\ttmpld = ctanhl(tmpld);\n-\ttmpld = cpowl(tmpld, tmpld);\n-\ttmpld = cprojl(tmpld);\n-       ],[glibcxx_cv_c99_complex=yes], [glibcxx_cv_c99_complex=no])\n-  fi\n-  AC_MSG_RESULT($glibcxx_cv_c99_complex)\n-  if test x\"$glibcxx_cv_c99_complex\" = x\"yes\"; then\n-    AC_DEFINE(_GLIBCXX_USE_C99_COMPLEX, 1,\n-\t      [Define if C99 functions in <complex.h> should be used in\n-\t      <complex>. Using compiler builtins for these functions requires\n-\t      corresponding C99 library functions to be present.])\n-  fi\n-\n-  # Check for the existence in <stdio.h> of vscanf, et. al.\n-  AC_MSG_CHECKING([for ISO C99 support in <stdio.h>])\n-  AC_CACHE_VAL(glibcxx_cv_c99_stdio, [\n-  GCC_TRY_COMPILE_OR_LINK(\n-     [#include <stdio.h>\n-      #include <stdarg.h>\n-      void foo(char* fmt, ...)\n-      {\n-\tva_list args; va_start(args, fmt);\n-\tvfscanf(stderr, \"%i\", args);\n-\tvscanf(\"%i\", args);\n-\tvsnprintf(fmt, 0, \"%i\", args);\n-\tvsscanf(fmt, \"%i\", args);\n-\tsnprintf(fmt, 0, \"%i\");\n-      }], [],\n-     [glibcxx_cv_c99_stdio=yes], [glibcxx_cv_c99_stdio=no])\n-  ])\n-  AC_MSG_RESULT($glibcxx_cv_c99_stdio)\n-\n-  # Check for the existence in <stdlib.h> of lldiv_t, et. al.\n-  AC_MSG_CHECKING([for ISO C99 support in <stdlib.h>])\n-  AC_CACHE_VAL(glibcxx_cv_c99_stdlib, [\n-  GCC_TRY_COMPILE_OR_LINK(\n-     [#include <stdlib.h>\n-      volatile float f;\n-      volatile long double ld;\n-      volatile unsigned long long ll;\n-      lldiv_t mydivt;],\n-     [char* tmp;\n-      f = strtof(\"gnu\", &tmp);\n-      ld = strtold(\"gnu\", &tmp);\n-      ll = strtoll(\"gnu\", &tmp, 10);\n-      ll = strtoull(\"gnu\", &tmp, 10);\n-      ll = llabs(10);\n-      mydivt = lldiv(10,1);\n-      ll = mydivt.quot;\n-      ll = mydivt.rem;\n-      ll = atoll(\"10\");\n-      _Exit(0);\n-      ],[glibcxx_cv_c99_stdlib=yes], [glibcxx_cv_c99_stdlib=no])\n-  ])\n-  AC_MSG_RESULT($glibcxx_cv_c99_stdlib)\n-\n-  # Check for the existence in <wchar.h> of wcstold, etc.\n-  glibcxx_cv_c99_wchar=no;\n-  if test x\"$ac_has_wchar_h\" = xyes &&\n-     test x\"$ac_has_wctype_h\" = xyes; then\n-    AC_MSG_CHECKING([for ISO C99 support in <wchar.h>])\n-    AC_TRY_COMPILE([#include <wchar.h>\n-\t\t    namespace test\n-\t\t    {\n-\t\t      using ::wcstold;\n-\t\t      using ::wcstoll;\n-\t\t      using ::wcstoull;\n-\t\t    }\n-\t\t   ],[],[glibcxx_cv_c99_wchar=yes], [glibcxx_cv_c99_wchar=no])\n-\n-    # Checks for wide character functions that may not be present.\n-    # Injection of these is wrapped with guard macros.\n-    # NB: only put functions here, instead of immediately above, if\n-    # absolutely necessary.\n-    AC_TRY_COMPILE([#include <wchar.h>\n-\t\t    namespace test { using ::vfwscanf; } ], [],\n- \t    \t   [AC_DEFINE(HAVE_VFWSCANF,1,\n-\t\t\t[Defined if vfwscanf exists.])],[])\n-\n-    AC_TRY_COMPILE([#include <wchar.h>\n-\t\t    namespace test { using ::vswscanf; } ], [],\n- \t    \t   [AC_DEFINE(HAVE_VSWSCANF,1,\n-\t\t\t[Defined if vswscanf exists.])],[])\n-\n-    AC_TRY_COMPILE([#include <wchar.h>\n-\t\t    namespace test { using ::vwscanf; } ], [],\n- \t    \t   [AC_DEFINE(HAVE_VWSCANF,1,[Defined if vwscanf exists.])],[])\n-\n-    AC_TRY_COMPILE([#include <wchar.h>\n-\t\t    namespace test { using ::wcstof; } ], [],\n- \t    \t   [AC_DEFINE(HAVE_WCSTOF,1,[Defined if wcstof exists.])],[])\n-\n-    AC_TRY_COMPILE([#include <wctype.h>],\n-\t\t   [ wint_t t; int i = iswblank(t);],\n- \t    \t   [AC_DEFINE(HAVE_ISWBLANK,1,\n-\t\t\t[Defined if iswblank exists.])],[])\n-\n-    AC_MSG_RESULT($glibcxx_cv_c99_wchar)\n-  fi\n-\n-  # Option parsed, now set things appropriately.\n-  if test x\"$glibcxx_cv_c99_math\" = x\"no\" ||\n-     test x\"$glibcxx_cv_c99_complex\" = x\"no\" ||\n-     test x\"$glibcxx_cv_c99_stdio\" = x\"no\" ||\n-     test x\"$glibcxx_cv_c99_stdlib\" = x\"no\" ||\n-     test x\"$glibcxx_cv_c99_wchar\" = x\"no\"; then\n-    enable_c99=no;\n-  else\n-    AC_DEFINE(_GLIBCXX_USE_C99, 1,\n-    [Define if C99 functions or macros from <wchar.h>, <math.h>,\n-    <complex.h>, <stdio.h>, and <stdlib.h> can be used or exposed.])\n-  fi\n+      # Checks for wide character functions that may not be present.\n+      # Injection of these is wrapped with guard macros.\n+      # NB: only put functions here, instead of immediately above, if\n+      # absolutely necessary.\n+      AC_TRY_COMPILE([#include <wchar.h>\n+        namespace test { using ::vfwscanf; }], [],\n+        [AC_DEFINE(HAVE_VFWSCANF, 1, [Defined if vfwscanf exists.])], [])\n \n-  gcc_no_link=\"$ac_save_gcc_no_link\"\n-  LIBS=\"$ac_save_LIBS\"\n-  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  AC_LANG_RESTORE\n+      AC_TRY_COMPILE([#include <wchar.h>\n+        namespace test { using ::vswscanf; }], [],\n+        [AC_DEFINE(HAVE_VSWSCANF, 1, [Defined if vswscanf exists.])], [])\n+\n+      AC_TRY_COMPILE([#include <wchar.h>\n+        namespace test { using ::vwscanf; }], [],\n+        [AC_DEFINE(HAVE_VWSCANF, 1, [Defined if vwscanf exists.])], [])\n+\n+      AC_TRY_COMPILE([#include <wchar.h>\n+        namespace test { using ::wcstof; }], [],\n+        [AC_DEFINE(HAVE_WCSTOF, 1, [Defined if wcstof exists.])], [])\n+\n+      AC_TRY_COMPILE([#include <wctype.h>],\n+        [wint_t t; int i = iswblank(t);],\n+        [AC_DEFINE(HAVE_ISWBLANK, 1, [Defined if iswblank exists.])], [])\n+\n+      AC_MSG_RESULT($glibcxx_cv_c99_wchar_cxx98)\n+      if test x\"$glibcxx_cv_c99_wchar_cxx98\" = x\"yes\"; then\n+        AC_DEFINE(_GLIBCXX98_USE_C99_WCHAR, 1,\n+          [Define if C99 functions or macros in <wchar.h> should be imported\n+          in <cwchar> in namespace std for C++98.])\n+      fi\n+    fi\n+\n+    # Option parsed, now set things appropriately.\n+    if test x\"$glibcxx_cv_c99_math_cxx98\" = x\"no\" ||\n+       test x\"$glibcxx_cv_c99_complex_cxx98\" = x\"no\" ||\n+       test x\"$glibcxx_cv_c99_stdio_cxx98\" = x\"no\" ||\n+       test x\"$glibcxx_cv_c99_stdlib_cxx98\" = x\"no\" ||\n+       test x\"$glibcxx_cv_c99_wchar_cxx98\" = x\"no\"; then\n+      enable_c99=no;\n+    else\n+      AC_DEFINE(_GLIBCXX_USE_C99, 1,\n+        [Define if C99 functions or macros from <wchar.h>, <math.h>,\n+        <complex.h>, <stdio.h>, and <stdlib.h> can be used or exposed.])\n+    fi\n+\n+    gcc_no_link=\"$ac_save_gcc_no_link\"\n+    LIBS=\"$ac_save_LIBS\"\n+    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+    AC_LANG_RESTORE\n+\n+    AC_LANG_SAVE\n+    AC_LANG_CPLUSPLUS\n+\n+    # Use -std=c++11 and test again for C99 library feature in C++11 mode.\n+    # For the reasons given above we use -std=c++11 not -std=gnu++11.\n+    ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+    CXXFLAGS=\"$CXXFLAGS -std=c++11\"\n+    ac_save_LIBS=\"$LIBS\"\n+    ac_save_gcc_no_link=\"$gcc_no_link\"\n+\n+    if test x$gcc_no_link != xyes; then\n+      # Use -fno-exceptions to that the C driver can link these tests without\n+      # hitting undefined references to personality routines.\n+      CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+      AC_CHECK_LIB(m, sin, [LIBS=\"$LIBS -lm\"], [\n+        # Use the default compile-only tests in GCC_TRY_COMPILE_OR_LINK\n+        gcc_no_link=yes\n+      ])\n+    fi\n+\n+    # Check for the existence of <math.h> functions used if C99 is enabled.\n+    AC_MSG_CHECKING([for ISO C99 support in <math.h> for C++11])\n+    AC_CACHE_VAL(glibcxx_cv_c99_math_cxx11, [\n+      GCC_TRY_COMPILE_OR_LINK(\n+        [#include <math.h>\n+         volatile double d1, d2;\n+         volatile int i;],\n+        [i = fpclassify(d1);\n+         i = isfinite(d1);\n+         i = isinf(d1);\n+         i = isnan(d1);\n+         i = isnormal(d1);\n+         i = signbit(d1);\n+         i = isgreater(d1, d2);\n+         i = isgreaterequal(d1, d2);\n+         i = isless(d1, d2);\n+         i = islessequal(d1, d2);\n+         i = islessgreater(d1, d2);\n+         i = islessgreater(d1, d2);\n+         i = isunordered(d1, d2);\n+        ], [glibcxx_cv_c99_math_cxx11=yes], [glibcxx_cv_c99_math_cxx11=no])\n+    ])\n+    AC_MSG_RESULT($glibcxx_cv_c99_math_cxx11)\n+    if test x\"$glibcxx_cv_c99_math_cxx11\" = x\"yes\"; then\n+      AC_DEFINE(_GLIBCXX11_USE_C99_MATH, 1,\n+        [Define if C99 functions or macros in <math.h> should be imported\n+        in <cmath> in namespace std for C++11.])\n+    fi\n+\n+    # Check for the existence of <complex.h> complex math functions.\n+    # This is necessary even though libstdc++ uses the builtin versions\n+    # of these functions, because if the builtin cannot be used, a reference\n+    # to the library function is emitted.\n+    AC_CHECK_HEADERS(tgmath.h, ac_has_tgmath_h=yes, ac_has_tgmath_h=no)\n+    AC_CHECK_HEADERS(complex.h, ac_has_complex_h=yes, ac_has_complex_h=no)\n+    if test x\"$ac_has_complex_h\" = x\"yes\"; then\n+      AC_MSG_CHECKING([for ISO C99 support in <complex.h> for C++11])\n+      AC_CACHE_VAL(glibcxx_cv_c99_complex_cxx11, [\n+        GCC_TRY_COMPILE_OR_LINK(\n+          [#include <complex.h>\n+           typedef __complex__ float float_type;\n+           typedef __complex__ double double_type;\n+           typedef __complex__ long double ld_type;\n+           volatile float_type tmpf;\n+           volatile double_type tmpd;\n+           volatile ld_type tmpld;\n+           volatile float f;\n+           volatile double d;\n+           volatile long double ld;],\n+          [f = cabsf(tmpf);\n+           f = cargf(tmpf);\n+           tmpf = ccosf(tmpf);\n+           tmpf = ccoshf(tmpf);\n+           tmpf = cexpf(tmpf);\n+           tmpf = clogf(tmpf);\n+           tmpf = csinf(tmpf);\n+           tmpf = csinhf(tmpf);\n+           tmpf = csqrtf(tmpf);\n+           tmpf = ctanf(tmpf);\n+           tmpf = ctanhf(tmpf);\n+           tmpf = cpowf(tmpf, tmpf);\n+           tmpf = cprojf(tmpf);\n+           d = cabs(tmpd);\n+           d = carg(tmpd);\n+           tmpd = ccos(tmpd);\n+           tmpd = ccosh(tmpd);\n+           tmpd = cexp(tmpd);\n+           tmpd = clog(tmpd);\n+           tmpd = csin(tmpd);\n+           tmpd = csinh(tmpd);\n+           tmpd = csqrt(tmpd);\n+           tmpd = ctan(tmpd);\n+           tmpd = ctanh(tmpd);\n+           tmpd = cpow(tmpd, tmpd);\n+           tmpd = cproj(tmpd);\n+           ld = cabsl(tmpld);\n+           ld = cargl(tmpld);\n+           tmpld = ccosl(tmpld);\n+           tmpld = ccoshl(tmpld);\n+           tmpld = cexpl(tmpld);\n+           tmpld = clogl(tmpld);\n+           tmpld = csinl(tmpld);\n+           tmpld = csinhl(tmpld);\n+           tmpld = csqrtl(tmpld);\n+           tmpld = ctanl(tmpld);\n+           tmpld = ctanhl(tmpld);\n+           tmpld = cpowl(tmpld, tmpld);\n+           tmpld = cprojl(tmpld);\n+          ], [glibcxx_cv_c99_complex_cxx11=yes], [glibcxx_cv_c99_complex_cxx11=no])\n+      ])\n+    fi\n+    AC_MSG_RESULT($glibcxx_cv_c99_complex_cxx11)\n+    if test x\"$glibcxx_cv_c99_complex_cxx11\" = x\"yes\"; then\n+      AC_DEFINE(_GLIBCXX11_USE_C99_COMPLEX, 1,\n+        [Define if C99 functions in <complex.h> should be used in\n+        <complex> for C++11. Using compiler builtins for these functions\n+        requires corresponding C99 library functions to be present.])\n+    fi\n+\n+    # Check for the existence in <stdio.h> of vscanf, et. al.\n+    AC_MSG_CHECKING([for ISO C99 support in <stdio.h> for C++11])\n+    AC_CACHE_VAL(glibcxx_cv_c99_stdio_cxx11, [\n+      GCC_TRY_COMPILE_OR_LINK(\n+        [#include <stdio.h>\n+         #include <stdarg.h>\n+         void foo(char* fmt, ...)\n+         {\n+           va_list args; va_start(args, fmt);\n+           vfscanf(stderr, \"%i\", args);\n+           vscanf(\"%i\", args);\n+           vsnprintf(fmt, 0, \"%i\", args);\n+           vsscanf(fmt, \"%i\", args);\n+           snprintf(fmt, 0, \"%i\");\n+         }], [],\n+        [glibcxx_cv_c99_stdio_cxx11=yes], [glibcxx_cv_c99_stdio_cxx11=no])\n+    ])\n+    AC_MSG_RESULT($glibcxx_cv_c99_stdio_cxx11)\n+    if test x\"$glibcxx_cv_c99_stdio_cxx11\" = x\"yes\"; then\n+      AC_DEFINE(_GLIBCXX11_USE_C99_STDIO, 1,\n+        [Define if C99 functions or macros in <stdio.h> should be imported\n+        in <cstdio> in namespace std for C++11.])\n+    fi\n+\n+    # Check for the existence in <stdlib.h> of lldiv_t, et. al.\n+    AC_MSG_CHECKING([for ISO C99 support in <stdlib.h> for C++11])\n+    AC_CACHE_VAL(glibcxx_cv_c99_stdlib_cxx11, [\n+      GCC_TRY_COMPILE_OR_LINK(\n+        [#include <stdlib.h>\n+         volatile float f;\n+         volatile long double ld;\n+         volatile unsigned long long ll;\n+         lldiv_t mydivt;],\n+        [char* tmp;\n+         f = strtof(\"gnu\", &tmp);\n+         ld = strtold(\"gnu\", &tmp);\n+         ll = strtoll(\"gnu\", &tmp, 10);\n+         ll = strtoull(\"gnu\", &tmp, 10);\n+         ll = llabs(10);\n+         mydivt = lldiv(10,1);\n+         ll = mydivt.quot;\n+         ll = mydivt.rem;\n+         ll = atoll(\"10\");\n+         _Exit(0);\n+        ], [glibcxx_cv_c99_stdlib_cxx11=yes], [glibcxx_cv_c99_stdlib_cxx11=no])\n+    ])\n+    AC_MSG_RESULT($glibcxx_cv_c99_stdlib_cxx11)\n+    if test x\"$glibcxx_cv_c99_stdlib_cxx11\" = x\"yes\"; then\n+      AC_DEFINE(_GLIBCXX11_USE_C99_STDLIB, 1,\n+        [Define if C99 functions or macros in <stdlib.h> should be imported\n+        in <cstdlib> in namespace std for C++11.])\n+    fi\n+\n+    # Check for the existence in <wchar.h> of wcstold, etc.\n+    if test x\"$ac_has_wchar_h\" = xyes &&\n+       test x\"$ac_has_wctype_h\" = xyes; then\n+      AC_MSG_CHECKING([for ISO C99 support in <wchar.h> for C++11])\n+      AC_CACHE_VAL(glibcxx_cv_c99_wchar_cxx11, [\n+        AC_TRY_COMPILE([#include <wchar.h>\n+          namespace test\n+          {\n+            using ::wcstold;\n+            using ::wcstoll;\n+            using ::wcstoull;\n+          }\n+        ], [], [glibcxx_cv_c99_wchar_cxx11=yes], [glibcxx_cv_c99_wchar_cxx11=no])\n+      ])\n+\n+      # Checks for wide character functions that may not be present.\n+      # Injection of these is wrapped with guard macros.\n+      # NB: only put functions here, instead of immediately above, if\n+      # absolutely necessary.\n+      AC_TRY_COMPILE([#include <wchar.h>\n+        namespace test { using ::vfwscanf; }], [],\n+        [AC_DEFINE(HAVE_VFWSCANF, 1, [Defined if vfwscanf exists.])], [])\n+\n+      AC_TRY_COMPILE([#include <wchar.h>\n+        namespace test { using ::vswscanf; }], [],\n+        [AC_DEFINE(HAVE_VSWSCANF, 1, [Defined if vswscanf exists.])], [])\n+\n+      AC_TRY_COMPILE([#include <wchar.h>\n+        namespace test { using ::vwscanf; }], [],\n+        [AC_DEFINE(HAVE_VWSCANF, 1, [Defined if vwscanf exists.])], [])\n+\n+      AC_TRY_COMPILE([#include <wchar.h>\n+        namespace test { using ::wcstof; }], [],\n+        [AC_DEFINE(HAVE_WCSTOF, 1, [Defined if wcstof exists.])], [])\n+\n+      AC_TRY_COMPILE([#include <wctype.h>],\n+        [wint_t t; int i = iswblank(t);],\n+        [AC_DEFINE(HAVE_ISWBLANK, 1, [Defined if iswblank exists.])], [])\n+\n+      AC_MSG_RESULT($glibcxx_cv_c99_wchar_cxx11)\n+      if test x\"$glibcxx_cv_c99_wchar_cxx11\" = x\"yes\"; then\n+        AC_DEFINE(_GLIBCXX11_USE_C99_WCHAR, 1,\n+          [Define if C99 functions or macros in <wchar.h> should be imported\n+          in <cwchar> in namespace std for C++11.])\n+      fi\n+    fi\n+\n+    gcc_no_link=\"$ac_save_gcc_no_link\"\n+    LIBS=\"$ac_save_LIBS\"\n+    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+    AC_LANG_RESTORE\n   fi\n \n   AC_MSG_CHECKING([for fully enabled ISO C99 support])"}, {"sha": "f58b2f4e94e01b5b48ba527201bb53462d0fd69b", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -731,6 +731,44 @@\n /* Version number of package */\n #undef VERSION\n \n+/* Define if C99 functions in <complex.h> should be used in <complex> for\n+   C++11. Using compiler builtins for these functions requires corresponding\n+   C99 library functions to be present. */\n+#undef _GLIBCXX11_USE_C99_COMPLEX\n+\n+/* Define if C99 functions or macros in <math.h> should be imported in <cmath>\n+   in namespace std for C++11. */\n+#undef _GLIBCXX11_USE_C99_MATH\n+\n+/* Define if C99 functions or macros in <stdio.h> should be imported in\n+   <cstdio> in namespace std for C++11. */\n+#undef _GLIBCXX11_USE_C99_STDIO\n+\n+/* Define if C99 functions or macros in <stdlib.h> should be imported in\n+   <cstdlib> in namespace std for C++11. */\n+#undef _GLIBCXX11_USE_C99_STDLIB\n+\n+/* Define if C99 functions or macros in <wchar.h> should be imported in\n+   <cwchar> in namespace std for C++11. */\n+#undef _GLIBCXX11_USE_C99_WCHAR\n+\n+/* Define if C99 functions in <complex.h> should be used in <complex> for\n+   C++98. Using compiler builtins for these functions requires corresponding\n+   C99 library functions to be present. */\n+#undef _GLIBCXX98_USE_C99_COMPLEX\n+\n+/* Define if C99 functions or macros in <math.h> should be imported in <cmath>\n+   in namespace std for C++98. */\n+#undef _GLIBCXX98_USE_C99_MATH\n+\n+/* Define if C99 functions or macros in <stdio.h> should be imported in\n+   <cstdio> in namespace std for C++98. */\n+#undef _GLIBCXX98_USE_C99_STDIO\n+\n+/* Define if C99 functions or macros in <wchar.h> should be imported in\n+   <cwchar> in namespace std for C++98. */\n+#undef _GLIBCXX98_USE_C99_WCHAR\n+\n /* Define if the compiler supports C++11 atomics. */\n #undef _GLIBCXX_ATOMIC_BUILTINS\n \n@@ -791,11 +829,6 @@\n    <stdio.h>, and <stdlib.h> can be used or exposed. */\n #undef _GLIBCXX_USE_C99\n \n-/* Define if C99 functions in <complex.h> should be used in <complex>. Using\n-   compiler builtins for these functions requires corresponding C99 library\n-   functions to be present. */\n-#undef _GLIBCXX_USE_C99_COMPLEX\n-\n /* Define if C99 functions in <complex.h> should be used in <tr1/complex>.\n    Using compiler builtins for these functions requires corresponding C99\n    library functions to be present. */\n@@ -817,10 +850,6 @@\n    <tr1/cinttypes> in namespace std::tr1. */\n #undef _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1\n \n-/* Define if C99 functions or macros in <math.h> should be imported in <cmath>\n-   in namespace std. */\n-#undef _GLIBCXX_USE_C99_MATH\n-\n /* Define if C99 functions or macros in <math.h> should be imported in\n    <tr1/cmath> in namespace std::tr1. */\n #undef _GLIBCXX_USE_C99_MATH_TR1"}, {"sha": "867a4042cf9322407e619844236adfe6ccc6bf82", "filename": "libstdc++-v3/config/locale/dragonfly/c_locale.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fc_locale.h?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -64,7 +64,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __builtin_va_list __args;\n     __builtin_va_start(__args, __fmt);\n \n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDIO\n     const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);\n #else\n     const int __ret = __builtin_vsprintf(__out, __fmt, __args);"}, {"sha": "fa7629f9b4aeb959c579c1cc4ecd40cf675abea6", "filename": "libstdc++-v3/config/locale/generic/c_locale.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -70,7 +70,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __builtin_va_list __args;\n     __builtin_va_start(__args, __fmt);\n \n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDIO\n     const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);\n #else\n     const int __ret = __builtin_vsprintf(__out, __fmt, __args);"}, {"sha": "f8ddfebb544d72bd4418946b60402c483400d3d0", "filename": "libstdc++-v3/config/locale/gnu/c_locale.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -88,7 +88,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __builtin_va_list __args;\n     __builtin_va_start(__args, __fmt);\n \n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDIO\n     const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);\n #else\n     const int __ret = __builtin_vsprintf(__out, __fmt, __args);"}, {"sha": "055c5b657b056801cb6d15fe23fd0e649b61058c", "filename": "libstdc++-v3/config/os/bsd/dragonfly/os_defines.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdragonfly%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdragonfly%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdragonfly%2Fos_defines.h?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -30,6 +30,9 @@\n // file will come before all others.\n \n #define _GLIBCXX_USE_C99 1\n+#define _GLIBCXX_USE_C99_STDIO 1\n+#define _GLIBCXX_USE_C99_STDLIB 1\n+#define _GLIBCXX_USE_C99_WCHAR 1\n #define _GLIBCXX_USE_C99_CHECK 1\n #define _GLIBCXX_USE_C99_DYNAMIC (!(__ISO_C_VISIBLE >= 1999))\n #define _GLIBCXX_USE_C99_LONG_LONG_CHECK 1"}, {"sha": "991818b3707d03b68b0a3bb928cdc5eeeac9eb0c", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 901, "deletions": 300, "changes": 1201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -16542,29 +16542,26 @@ fi\n \n   if test x\"$enable_c99\" = x\"yes\"; then\n \n-\n-  ac_ext=cpp\n+    ac_ext=cpp\n ac_cpp='$CXXCPP $CPPFLAGS'\n ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n \n-  # Use -std=c++98 because the default (-std=gnu++98) leaves __STRICT_ANSI__\n-  # undefined and fake C99 facilities - like pre-standard snprintf - may be\n-  # spuriously enabled.\n-  # Long term, -std=c++0x could be even better, could manage to explicitly\n-  # request C99 facilities to the underlying C headers.\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\"$CXXFLAGS -std=c++98\"\n-  ac_save_LIBS=\"$LIBS\"\n-  ac_save_gcc_no_link=\"$gcc_no_link\"\n+    # Use -std=c++98 (instead of -std=gnu++98) because leaving __STRICT_ANSI__\n+    # undefined may cause fake C99 facilities, like pre-standard snprintf,\n+    # to be spuriously enabled.\n+    ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+    CXXFLAGS=\"$CXXFLAGS -std=c++98\"\n+    ac_save_LIBS=\"$LIBS\"\n+    ac_save_gcc_no_link=\"$gcc_no_link\"\n \n-  if test x$gcc_no_link != xyes; then\n-    # Use -fno-exceptions to that the C driver can link these tests without\n-    # hitting undefined references to personality routines.\n-    CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for sin in -lm\" >&5\n+    if test x$gcc_no_link != xyes; then\n+      # Use -fno-exceptions to that the C driver can link these tests without\n+      # hitting undefined references to personality routines.\n+      CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for sin in -lm\" >&5\n $as_echo_n \"checking for sin in -lm... \" >&6; }\n if test \"${ac_cv_lib_m_sin+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n@@ -16604,56 +16601,646 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_m_sin\" >&5\n $as_echo \"$ac_cv_lib_m_sin\" >&6; }\n if test \"x$ac_cv_lib_m_sin\" = x\"\"yes; then :\n+  LIBS=\"$LIBS -lm\"\n+else\n+\n+        # Use the default compile-only tests in GCC_TRY_COMPILE_OR_LINK\n+        gcc_no_link=yes\n \n-      LIBS=\"$LIBS -lm\"\n+fi\n+\n+    fi\n \n+    # Check for the existence of <math.h> functions used if C99 is enabled.\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ISO C99 support in <math.h> for C++98\" >&5\n+$as_echo_n \"checking for ISO C99 support in <math.h> for C++98... \" >&6; }\n+    if test \"${glibcxx_cv_c99_math_cxx98+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n else\n \n-      # Use the default compile-only tests in GCC_TRY_COMPILE_OR_LINK\n-      gcc_no_link=yes\n+      if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <math.h>\n+         volatile double d1, d2;\n+         volatile int i;\n+int\n+main ()\n+{\n+i = fpclassify(d1);\n+         i = isfinite(d1);\n+         i = isinf(d1);\n+         i = isnan(d1);\n+         i = isnormal(d1);\n+         i = signbit(d1);\n+         i = isgreater(d1, d2);\n+         i = isgreaterequal(d1, d2);\n+         i = isless(d1, d2);\n+         i = islessequal(d1, d2);\n+         i = islessgreater(d1, d2);\n+         i = islessgreater(d1, d2);\n+         i = isunordered(d1, d2);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_c99_math_cxx98=yes\n+else\n+  glibcxx_cv_c99_math_cxx98=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <math.h>\n+         volatile double d1, d2;\n+         volatile int i;\n+int\n+main ()\n+{\n+i = fpclassify(d1);\n+         i = isfinite(d1);\n+         i = isinf(d1);\n+         i = isnan(d1);\n+         i = isnormal(d1);\n+         i = signbit(d1);\n+         i = isgreater(d1, d2);\n+         i = isgreaterequal(d1, d2);\n+         i = isless(d1, d2);\n+         i = islessequal(d1, d2);\n+         i = islessgreater(d1, d2);\n+         i = islessgreater(d1, d2);\n+         i = isunordered(d1, d2);\n \n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_c99_math_cxx98=yes\n+else\n+  glibcxx_cv_c99_math_cxx98=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n fi\n \n-  fi\n+fi\n \n-  # Check for the existence of <math.h> functions used if C99 is enabled.\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ISO C99 support in <math.h>\" >&5\n-$as_echo_n \"checking for ISO C99 support in <math.h>... \" >&6; }\n-  if test \"${glibcxx_cv_c99_math+set}\" = set; then :\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_c99_math_cxx98\" >&5\n+$as_echo \"$glibcxx_cv_c99_math_cxx98\" >&6; }\n+    if test x\"$glibcxx_cv_c99_math_cxx98\" = x\"yes\"; then\n+\n+$as_echo \"#define _GLIBCXX98_USE_C99_MATH 1\" >>confdefs.h\n+\n+    fi\n+\n+    # Check for the existence of <complex.h> complex math functions.\n+    # This is necessary even though libstdc++ uses the builtin versions\n+    # of these functions, because if the builtin cannot be used, a reference\n+    # to the library function is emitted.\n+    for ac_header in tgmath.h\n+do :\n+  ac_fn_cxx_check_header_mongrel \"$LINENO\" \"tgmath.h\" \"ac_cv_header_tgmath_h\" \"$ac_includes_default\"\n+if test \"x$ac_cv_header_tgmath_h\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_TGMATH_H 1\n+_ACEOF\n+ ac_has_tgmath_h=yes\n+else\n+  ac_has_tgmath_h=no\n+fi\n+\n+done\n+\n+    for ac_header in complex.h\n+do :\n+  ac_fn_cxx_check_header_mongrel \"$LINENO\" \"complex.h\" \"ac_cv_header_complex_h\" \"$ac_includes_default\"\n+if test \"x$ac_cv_header_complex_h\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_COMPLEX_H 1\n+_ACEOF\n+ ac_has_complex_h=yes\n+else\n+  ac_has_complex_h=no\n+fi\n+\n+done\n+\n+    if test x\"$ac_has_complex_h\" = x\"yes\"; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ISO C99 support in <complex.h> for C++98\" >&5\n+$as_echo_n \"checking for ISO C99 support in <complex.h> for C++98... \" >&6; }\n+      if test \"${glibcxx_cv_c99_complex_cxx98+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n \n+        if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <complex.h>\n+           typedef __complex__ float float_type;\n+           typedef __complex__ double double_type;\n+           typedef __complex__ long double ld_type;\n+           volatile float_type tmpf;\n+           volatile double_type tmpd;\n+           volatile ld_type tmpld;\n+           volatile float f;\n+           volatile double d;\n+           volatile long double ld;\n+int\n+main ()\n+{\n+f = cabsf(tmpf);\n+           f = cargf(tmpf);\n+           tmpf = ccosf(tmpf);\n+           tmpf = ccoshf(tmpf);\n+           tmpf = cexpf(tmpf);\n+           tmpf = clogf(tmpf);\n+           tmpf = csinf(tmpf);\n+           tmpf = csinhf(tmpf);\n+           tmpf = csqrtf(tmpf);\n+           tmpf = ctanf(tmpf);\n+           tmpf = ctanhf(tmpf);\n+           tmpf = cpowf(tmpf, tmpf);\n+           tmpf = cprojf(tmpf);\n+           d = cabs(tmpd);\n+           d = carg(tmpd);\n+           tmpd = ccos(tmpd);\n+           tmpd = ccosh(tmpd);\n+           tmpd = cexp(tmpd);\n+           tmpd = clog(tmpd);\n+           tmpd = csin(tmpd);\n+           tmpd = csinh(tmpd);\n+           tmpd = csqrt(tmpd);\n+           tmpd = ctan(tmpd);\n+           tmpd = ctanh(tmpd);\n+           tmpd = cpow(tmpd, tmpd);\n+           tmpd = cproj(tmpd);\n+           ld = cabsl(tmpld);\n+           ld = cargl(tmpld);\n+           tmpld = ccosl(tmpld);\n+           tmpld = ccoshl(tmpld);\n+           tmpld = cexpl(tmpld);\n+           tmpld = clogl(tmpld);\n+           tmpld = csinl(tmpld);\n+           tmpld = csinhl(tmpld);\n+           tmpld = csqrtl(tmpld);\n+           tmpld = ctanl(tmpld);\n+           tmpld = ctanhl(tmpld);\n+           tmpld = cpowl(tmpld, tmpld);\n+           tmpld = cprojl(tmpld);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_c99_complex_cxx98=yes\n+else\n+  glibcxx_cv_c99_complex_cxx98=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n   if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <complex.h>\n+           typedef __complex__ float float_type;\n+           typedef __complex__ double double_type;\n+           typedef __complex__ long double ld_type;\n+           volatile float_type tmpf;\n+           volatile double_type tmpd;\n+           volatile ld_type tmpld;\n+           volatile float f;\n+           volatile double d;\n+           volatile long double ld;\n+int\n+main ()\n+{\n+f = cabsf(tmpf);\n+           f = cargf(tmpf);\n+           tmpf = ccosf(tmpf);\n+           tmpf = ccoshf(tmpf);\n+           tmpf = cexpf(tmpf);\n+           tmpf = clogf(tmpf);\n+           tmpf = csinf(tmpf);\n+           tmpf = csinhf(tmpf);\n+           tmpf = csqrtf(tmpf);\n+           tmpf = ctanf(tmpf);\n+           tmpf = ctanhf(tmpf);\n+           tmpf = cpowf(tmpf, tmpf);\n+           tmpf = cprojf(tmpf);\n+           d = cabs(tmpd);\n+           d = carg(tmpd);\n+           tmpd = ccos(tmpd);\n+           tmpd = ccosh(tmpd);\n+           tmpd = cexp(tmpd);\n+           tmpd = clog(tmpd);\n+           tmpd = csin(tmpd);\n+           tmpd = csinh(tmpd);\n+           tmpd = csqrt(tmpd);\n+           tmpd = ctan(tmpd);\n+           tmpd = ctanh(tmpd);\n+           tmpd = cpow(tmpd, tmpd);\n+           tmpd = cproj(tmpd);\n+           ld = cabsl(tmpld);\n+           ld = cargl(tmpld);\n+           tmpld = ccosl(tmpld);\n+           tmpld = ccoshl(tmpld);\n+           tmpld = cexpl(tmpld);\n+           tmpld = clogl(tmpld);\n+           tmpld = csinl(tmpld);\n+           tmpld = csinhl(tmpld);\n+           tmpld = csqrtl(tmpld);\n+           tmpld = ctanl(tmpld);\n+           tmpld = ctanhl(tmpld);\n+           tmpld = cpowl(tmpld, tmpld);\n+           tmpld = cprojl(tmpld);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_c99_complex_cxx98=yes\n+else\n+  glibcxx_cv_c99_complex_cxx98=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+fi\n+\n+    fi\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_c99_complex_cxx98\" >&5\n+$as_echo \"$glibcxx_cv_c99_complex_cxx98\" >&6; }\n+    if test x\"$glibcxx_cv_c99_complex_cxx98\" = x\"yes\"; then\n+\n+$as_echo \"#define _GLIBCXX98_USE_C99_COMPLEX 1\" >>confdefs.h\n+\n+    fi\n+\n+    # Check for the existence in <stdio.h> of vscanf, et. al.\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ISO C99 support in <stdio.h> for C++98\" >&5\n+$as_echo_n \"checking for ISO C99 support in <stdio.h> for C++98... \" >&6; }\n+    if test \"${glibcxx_cv_c99_stdio_cxx98+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+      if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <stdio.h>\n+         #include <stdarg.h>\n+         void foo(char* fmt, ...)\n+         {\n+           va_list args; va_start(args, fmt);\n+           vfscanf(stderr, \"%i\", args);\n+           vscanf(\"%i\", args);\n+           vsnprintf(fmt, 0, \"%i\", args);\n+           vsscanf(fmt, \"%i\", args);\n+           snprintf(fmt, 0, \"%i\");\n+         }\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_c99_stdio_cxx98=yes\n+else\n+  glibcxx_cv_c99_stdio_cxx98=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <stdio.h>\n+         #include <stdarg.h>\n+         void foo(char* fmt, ...)\n+         {\n+           va_list args; va_start(args, fmt);\n+           vfscanf(stderr, \"%i\", args);\n+           vscanf(\"%i\", args);\n+           vsnprintf(fmt, 0, \"%i\", args);\n+           vsscanf(fmt, \"%i\", args);\n+           snprintf(fmt, 0, \"%i\");\n+         }\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_c99_stdio_cxx98=yes\n+else\n+  glibcxx_cv_c99_stdio_cxx98=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+fi\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_c99_stdio_cxx98\" >&5\n+$as_echo \"$glibcxx_cv_c99_stdio_cxx98\" >&6; }\n+    if test x\"$glibcxx_cv_c99_stdio_cxx98\" = x\"yes\"; then\n+\n+$as_echo \"#define _GLIBCXX98_USE_C99_STDIO 1\" >>confdefs.h\n+\n+    fi\n+\n+    # Check for the existence in <wchar.h> of wcstold, etc.\n+    if test x\"$ac_has_wchar_h\" = xyes &&\n+       test x\"$ac_has_wctype_h\" = xyes; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ISO C99 support in <wchar.h> for C++98\" >&5\n+$as_echo_n \"checking for ISO C99 support in <wchar.h> for C++98... \" >&6; }\n+      if test \"${glibcxx_cv_c99_wchar_cxx98+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+        cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <wchar.h>\n+          namespace test\n+          {\n+            using ::wcstold;\n+            using ::wcstoll;\n+            using ::wcstoull;\n+          }\n+\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_c99_wchar_cxx98=yes\n+else\n+  glibcxx_cv_c99_wchar_cxx98=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+\n+      # Checks for wide character functions that may not be present.\n+      # Injection of these is wrapped with guard macros.\n+      # NB: only put functions here, instead of immediately above, if\n+      # absolutely necessary.\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <wchar.h>\n+        namespace test { using ::vfwscanf; }\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+\n+$as_echo \"#define HAVE_VFWSCANF 1\" >>confdefs.h\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <wchar.h>\n+        namespace test { using ::vswscanf; }\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+\n+$as_echo \"#define HAVE_VSWSCANF 1\" >>confdefs.h\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <wchar.h>\n+        namespace test { using ::vwscanf; }\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+\n+$as_echo \"#define HAVE_VWSCANF 1\" >>confdefs.h\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <wchar.h>\n+        namespace test { using ::wcstof; }\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+\n+$as_echo \"#define HAVE_WCSTOF 1\" >>confdefs.h\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <wctype.h>\n+int\n+main ()\n+{\n+wint_t t; int i = iswblank(t);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+\n+$as_echo \"#define HAVE_ISWBLANK 1\" >>confdefs.h\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_c99_wchar_cxx98\" >&5\n+$as_echo \"$glibcxx_cv_c99_wchar_cxx98\" >&6; }\n+      if test x\"$glibcxx_cv_c99_wchar_cxx98\" = x\"yes\"; then\n+\n+$as_echo \"#define _GLIBCXX98_USE_C99_WCHAR 1\" >>confdefs.h\n+\n+      fi\n+    fi\n+\n+    # Option parsed, now set things appropriately.\n+    if test x\"$glibcxx_cv_c99_math_cxx98\" = x\"no\" ||\n+       test x\"$glibcxx_cv_c99_complex_cxx98\" = x\"no\" ||\n+       test x\"$glibcxx_cv_c99_stdio_cxx98\" = x\"no\" ||\n+       test x\"$glibcxx_cv_c99_stdlib_cxx98\" = x\"no\" ||\n+       test x\"$glibcxx_cv_c99_wchar_cxx98\" = x\"no\"; then\n+      enable_c99=no;\n+    else\n+\n+$as_echo \"#define _GLIBCXX_USE_C99 1\" >>confdefs.h\n+\n+    fi\n+\n+    gcc_no_link=\"$ac_save_gcc_no_link\"\n+    LIBS=\"$ac_save_LIBS\"\n+    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+    ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n+    ac_ext=cpp\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+\n+    # Use -std=c++11 and test again for C99 library feature in C++11 mode.\n+    # For the reasons given above we use -std=c++11 not -std=gnu++11.\n+    ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+    CXXFLAGS=\"$CXXFLAGS -std=c++11\"\n+    ac_save_LIBS=\"$LIBS\"\n+    ac_save_gcc_no_link=\"$gcc_no_link\"\n+\n+    if test x$gcc_no_link != xyes; then\n+      # Use -fno-exceptions to that the C driver can link these tests without\n+      # hitting undefined references to personality routines.\n+      CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for sin in -lm\" >&5\n+$as_echo_n \"checking for sin in -lm... \" >&6; }\n+if test \"${ac_cv_lib_m_sin+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char sin ();\n+int\n+main ()\n+{\n+return sin ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  ac_cv_lib_m_sin=yes\n+else\n+  ac_cv_lib_m_sin=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_m_sin\" >&5\n+$as_echo \"$ac_cv_lib_m_sin\" >&6; }\n+if test \"x$ac_cv_lib_m_sin\" = x\"\"yes; then :\n+  LIBS=\"$LIBS -lm\"\n+else\n+\n+        # Use the default compile-only tests in GCC_TRY_COMPILE_OR_LINK\n+        gcc_no_link=yes\n+\n+fi\n+\n+    fi\n+\n+    # Check for the existence of <math.h> functions used if C99 is enabled.\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ISO C99 support in <math.h> for C++11\" >&5\n+$as_echo_n \"checking for ISO C99 support in <math.h> for C++11... \" >&6; }\n+    if test \"${glibcxx_cv_c99_math_cxx11+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+      if test x$gcc_no_link = xyes; then\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <math.h>\n-      volatile double d1, d2;\n-      volatile int i;\n+         volatile double d1, d2;\n+         volatile int i;\n int\n main ()\n {\n i = fpclassify(d1);\n-      i = isfinite(d1);\n-      i = isinf(d1);\n-      i = isnan(d1);\n-      i = isnormal(d1);\n-      i = signbit(d1);\n-      i = isgreater(d1, d2);\n-      i = isgreaterequal(d1, d2);\n-      i = isless(d1, d2);\n-      i = islessequal(d1, d2);\n-      i = islessgreater(d1, d2);\n-      i = islessgreater(d1, d2);\n-      i = isunordered(d1, d2);\n+         i = isfinite(d1);\n+         i = isinf(d1);\n+         i = isnan(d1);\n+         i = isnormal(d1);\n+         i = signbit(d1);\n+         i = isgreater(d1, d2);\n+         i = isgreaterequal(d1, d2);\n+         i = isless(d1, d2);\n+         i = islessequal(d1, d2);\n+         i = islessgreater(d1, d2);\n+         i = islessgreater(d1, d2);\n+         i = isunordered(d1, d2);\n \n   ;\n   return 0;\n }\n _ACEOF\n if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  glibcxx_cv_c99_math=yes\n+  glibcxx_cv_c99_math_cxx11=yes\n else\n-  glibcxx_cv_c99_math=no\n+  glibcxx_cv_c99_math_cxx11=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n else\n@@ -16663,53 +17250,53 @@ fi\n cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <math.h>\n-      volatile double d1, d2;\n-      volatile int i;\n+         volatile double d1, d2;\n+         volatile int i;\n int\n main ()\n {\n i = fpclassify(d1);\n-      i = isfinite(d1);\n-      i = isinf(d1);\n-      i = isnan(d1);\n-      i = isnormal(d1);\n-      i = signbit(d1);\n-      i = isgreater(d1, d2);\n-      i = isgreaterequal(d1, d2);\n-      i = isless(d1, d2);\n-      i = islessequal(d1, d2);\n-      i = islessgreater(d1, d2);\n-      i = islessgreater(d1, d2);\n-      i = isunordered(d1, d2);\n+         i = isfinite(d1);\n+         i = isinf(d1);\n+         i = isnan(d1);\n+         i = isnormal(d1);\n+         i = signbit(d1);\n+         i = isgreater(d1, d2);\n+         i = isgreaterequal(d1, d2);\n+         i = isless(d1, d2);\n+         i = islessequal(d1, d2);\n+         i = islessgreater(d1, d2);\n+         i = islessgreater(d1, d2);\n+         i = isunordered(d1, d2);\n \n   ;\n   return 0;\n }\n _ACEOF\n if ac_fn_cxx_try_link \"$LINENO\"; then :\n-  glibcxx_cv_c99_math=yes\n+  glibcxx_cv_c99_math_cxx11=yes\n else\n-  glibcxx_cv_c99_math=no\n+  glibcxx_cv_c99_math_cxx11=no\n fi\n rm -f core conftest.err conftest.$ac_objext \\\n     conftest$ac_exeext conftest.$ac_ext\n fi\n \n fi\n \n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_c99_math\" >&5\n-$as_echo \"$glibcxx_cv_c99_math\" >&6; }\n-  if test x\"$glibcxx_cv_c99_math\" = x\"yes\"; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_c99_math_cxx11\" >&5\n+$as_echo \"$glibcxx_cv_c99_math_cxx11\" >&6; }\n+    if test x\"$glibcxx_cv_c99_math_cxx11\" = x\"yes\"; then\n \n-$as_echo \"#define _GLIBCXX_USE_C99_MATH 1\" >>confdefs.h\n+$as_echo \"#define _GLIBCXX11_USE_C99_MATH 1\" >>confdefs.h\n \n-  fi\n+    fi\n \n-  # Check for the existence of <complex.h> complex math functions.\n-  # This is necessary even though libstdc++ uses the builtin versions\n-  # of these functions, because if the builtin cannot be used, a reference\n-  # to the library function is emitted.\n-  for ac_header in tgmath.h\n+    # Check for the existence of <complex.h> complex math functions.\n+    # This is necessary even though libstdc++ uses the builtin versions\n+    # of these functions, because if the builtin cannot be used, a reference\n+    # to the library function is emitted.\n+    for ac_header in tgmath.h\n do :\n   ac_fn_cxx_check_header_mongrel \"$LINENO\" \"tgmath.h\" \"ac_cv_header_tgmath_h\" \"$ac_includes_default\"\n if test \"x$ac_cv_header_tgmath_h\" = x\"\"yes; then :\n@@ -16723,7 +17310,7 @@ fi\n \n done\n \n-  for ac_header in complex.h\n+    for ac_header in complex.h\n do :\n   ac_fn_cxx_check_header_mongrel \"$LINENO\" \"complex.h\" \"ac_cv_header_complex_h\" \"$ac_includes_default\"\n if test \"x$ac_cv_header_complex_h\" = x\"\"yes; then :\n@@ -16737,74 +17324,77 @@ fi\n \n done\n \n-  glibcxx_cv_c99_complex=no;\n-  if test x\"$ac_has_complex_h\" = x\"yes\"; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ISO C99 support in <complex.h>\" >&5\n-$as_echo_n \"checking for ISO C99 support in <complex.h>... \" >&6; }\n-    if test x$gcc_no_link = xyes; then\n+    if test x\"$ac_has_complex_h\" = x\"yes\"; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ISO C99 support in <complex.h> for C++11\" >&5\n+$as_echo_n \"checking for ISO C99 support in <complex.h> for C++11... \" >&6; }\n+      if test \"${glibcxx_cv_c99_complex_cxx11+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+        if test x$gcc_no_link = xyes; then\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <complex.h>\n-\ttypedef __complex__ float float_type;\n-\ttypedef __complex__ double double_type;\n-\ttypedef __complex__ long double ld_type;\n-\tvolatile float_type tmpf;\n-\tvolatile double_type tmpd;\n-\tvolatile ld_type tmpld;\n-\tvolatile float f;\n-\tvolatile double d;\n-\tvolatile long double ld;\n+           typedef __complex__ float float_type;\n+           typedef __complex__ double double_type;\n+           typedef __complex__ long double ld_type;\n+           volatile float_type tmpf;\n+           volatile double_type tmpd;\n+           volatile ld_type tmpld;\n+           volatile float f;\n+           volatile double d;\n+           volatile long double ld;\n int\n main ()\n {\n f = cabsf(tmpf);\n-\tf = cargf(tmpf);\n-\ttmpf = ccosf(tmpf);\n-\ttmpf = ccoshf(tmpf);\n-\ttmpf = cexpf(tmpf);\n-\ttmpf = clogf(tmpf);\n-\ttmpf = csinf(tmpf);\n-\ttmpf = csinhf(tmpf);\n-\ttmpf = csqrtf(tmpf);\n-\ttmpf = ctanf(tmpf);\n-\ttmpf = ctanhf(tmpf);\n-\ttmpf = cpowf(tmpf, tmpf);\n-\ttmpf = cprojf(tmpf);\n-\td = cabs(tmpd);\n-\td = carg(tmpd);\n-\ttmpd = ccos(tmpd);\n-\ttmpd = ccosh(tmpd);\n-\ttmpd = cexp(tmpd);\n-\ttmpd = clog(tmpd);\n-\ttmpd = csin(tmpd);\n-\ttmpd = csinh(tmpd);\n-\ttmpd = csqrt(tmpd);\n-\ttmpd = ctan(tmpd);\n-\ttmpd = ctanh(tmpd);\n-\ttmpd = cpow(tmpd, tmpd);\n-\ttmpd = cproj(tmpd);\n-\tld = cabsl(tmpld);\n-\tld = cargl(tmpld);\n-\ttmpld = ccosl(tmpld);\n-\ttmpld = ccoshl(tmpld);\n-\ttmpld = cexpl(tmpld);\n-\ttmpld = clogl(tmpld);\n-\ttmpld = csinl(tmpld);\n-\ttmpld = csinhl(tmpld);\n-\ttmpld = csqrtl(tmpld);\n-\ttmpld = ctanl(tmpld);\n-\ttmpld = ctanhl(tmpld);\n-\ttmpld = cpowl(tmpld, tmpld);\n-\ttmpld = cprojl(tmpld);\n-\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  glibcxx_cv_c99_complex=yes\n-else\n-  glibcxx_cv_c99_complex=no\n+           f = cargf(tmpf);\n+           tmpf = ccosf(tmpf);\n+           tmpf = ccoshf(tmpf);\n+           tmpf = cexpf(tmpf);\n+           tmpf = clogf(tmpf);\n+           tmpf = csinf(tmpf);\n+           tmpf = csinhf(tmpf);\n+           tmpf = csqrtf(tmpf);\n+           tmpf = ctanf(tmpf);\n+           tmpf = ctanhf(tmpf);\n+           tmpf = cpowf(tmpf, tmpf);\n+           tmpf = cprojf(tmpf);\n+           d = cabs(tmpd);\n+           d = carg(tmpd);\n+           tmpd = ccos(tmpd);\n+           tmpd = ccosh(tmpd);\n+           tmpd = cexp(tmpd);\n+           tmpd = clog(tmpd);\n+           tmpd = csin(tmpd);\n+           tmpd = csinh(tmpd);\n+           tmpd = csqrt(tmpd);\n+           tmpd = ctan(tmpd);\n+           tmpd = ctanh(tmpd);\n+           tmpd = cpow(tmpd, tmpd);\n+           tmpd = cproj(tmpd);\n+           ld = cabsl(tmpld);\n+           ld = cargl(tmpld);\n+           tmpld = ccosl(tmpld);\n+           tmpld = ccoshl(tmpld);\n+           tmpld = cexpl(tmpld);\n+           tmpld = clogl(tmpld);\n+           tmpld = csinl(tmpld);\n+           tmpld = csinhl(tmpld);\n+           tmpld = csqrtl(tmpld);\n+           tmpld = ctanl(tmpld);\n+           tmpld = ctanhl(tmpld);\n+           tmpld = cpowl(tmpld, tmpld);\n+           tmpld = cprojl(tmpld);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_c99_complex_cxx11=yes\n+else\n+  glibcxx_cv_c99_complex_cxx11=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n else\n@@ -16814,100 +17404,103 @@ fi\n cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <complex.h>\n-\ttypedef __complex__ float float_type;\n-\ttypedef __complex__ double double_type;\n-\ttypedef __complex__ long double ld_type;\n-\tvolatile float_type tmpf;\n-\tvolatile double_type tmpd;\n-\tvolatile ld_type tmpld;\n-\tvolatile float f;\n-\tvolatile double d;\n-\tvolatile long double ld;\n+           typedef __complex__ float float_type;\n+           typedef __complex__ double double_type;\n+           typedef __complex__ long double ld_type;\n+           volatile float_type tmpf;\n+           volatile double_type tmpd;\n+           volatile ld_type tmpld;\n+           volatile float f;\n+           volatile double d;\n+           volatile long double ld;\n int\n main ()\n {\n f = cabsf(tmpf);\n-\tf = cargf(tmpf);\n-\ttmpf = ccosf(tmpf);\n-\ttmpf = ccoshf(tmpf);\n-\ttmpf = cexpf(tmpf);\n-\ttmpf = clogf(tmpf);\n-\ttmpf = csinf(tmpf);\n-\ttmpf = csinhf(tmpf);\n-\ttmpf = csqrtf(tmpf);\n-\ttmpf = ctanf(tmpf);\n-\ttmpf = ctanhf(tmpf);\n-\ttmpf = cpowf(tmpf, tmpf);\n-\ttmpf = cprojf(tmpf);\n-\td = cabs(tmpd);\n-\td = carg(tmpd);\n-\ttmpd = ccos(tmpd);\n-\ttmpd = ccosh(tmpd);\n-\ttmpd = cexp(tmpd);\n-\ttmpd = clog(tmpd);\n-\ttmpd = csin(tmpd);\n-\ttmpd = csinh(tmpd);\n-\ttmpd = csqrt(tmpd);\n-\ttmpd = ctan(tmpd);\n-\ttmpd = ctanh(tmpd);\n-\ttmpd = cpow(tmpd, tmpd);\n-\ttmpd = cproj(tmpd);\n-\tld = cabsl(tmpld);\n-\tld = cargl(tmpld);\n-\ttmpld = ccosl(tmpld);\n-\ttmpld = ccoshl(tmpld);\n-\ttmpld = cexpl(tmpld);\n-\ttmpld = clogl(tmpld);\n-\ttmpld = csinl(tmpld);\n-\ttmpld = csinhl(tmpld);\n-\ttmpld = csqrtl(tmpld);\n-\ttmpld = ctanl(tmpld);\n-\ttmpld = ctanhl(tmpld);\n-\ttmpld = cpowl(tmpld, tmpld);\n-\ttmpld = cprojl(tmpld);\n+           f = cargf(tmpf);\n+           tmpf = ccosf(tmpf);\n+           tmpf = ccoshf(tmpf);\n+           tmpf = cexpf(tmpf);\n+           tmpf = clogf(tmpf);\n+           tmpf = csinf(tmpf);\n+           tmpf = csinhf(tmpf);\n+           tmpf = csqrtf(tmpf);\n+           tmpf = ctanf(tmpf);\n+           tmpf = ctanhf(tmpf);\n+           tmpf = cpowf(tmpf, tmpf);\n+           tmpf = cprojf(tmpf);\n+           d = cabs(tmpd);\n+           d = carg(tmpd);\n+           tmpd = ccos(tmpd);\n+           tmpd = ccosh(tmpd);\n+           tmpd = cexp(tmpd);\n+           tmpd = clog(tmpd);\n+           tmpd = csin(tmpd);\n+           tmpd = csinh(tmpd);\n+           tmpd = csqrt(tmpd);\n+           tmpd = ctan(tmpd);\n+           tmpd = ctanh(tmpd);\n+           tmpd = cpow(tmpd, tmpd);\n+           tmpd = cproj(tmpd);\n+           ld = cabsl(tmpld);\n+           ld = cargl(tmpld);\n+           tmpld = ccosl(tmpld);\n+           tmpld = ccoshl(tmpld);\n+           tmpld = cexpl(tmpld);\n+           tmpld = clogl(tmpld);\n+           tmpld = csinl(tmpld);\n+           tmpld = csinhl(tmpld);\n+           tmpld = csqrtl(tmpld);\n+           tmpld = ctanl(tmpld);\n+           tmpld = ctanhl(tmpld);\n+           tmpld = cpowl(tmpld, tmpld);\n+           tmpld = cprojl(tmpld);\n \n   ;\n   return 0;\n }\n _ACEOF\n if ac_fn_cxx_try_link \"$LINENO\"; then :\n-  glibcxx_cv_c99_complex=yes\n+  glibcxx_cv_c99_complex_cxx11=yes\n else\n-  glibcxx_cv_c99_complex=no\n+  glibcxx_cv_c99_complex_cxx11=no\n fi\n rm -f core conftest.err conftest.$ac_objext \\\n     conftest$ac_exeext conftest.$ac_ext\n fi\n-  fi\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_c99_complex\" >&5\n-$as_echo \"$glibcxx_cv_c99_complex\" >&6; }\n-  if test x\"$glibcxx_cv_c99_complex\" = x\"yes\"; then\n \n-$as_echo \"#define _GLIBCXX_USE_C99_COMPLEX 1\" >>confdefs.h\n+fi\n \n-  fi\n+    fi\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_c99_complex_cxx11\" >&5\n+$as_echo \"$glibcxx_cv_c99_complex_cxx11\" >&6; }\n+    if test x\"$glibcxx_cv_c99_complex_cxx11\" = x\"yes\"; then\n+\n+$as_echo \"#define _GLIBCXX11_USE_C99_COMPLEX 1\" >>confdefs.h\n \n-  # Check for the existence in <stdio.h> of vscanf, et. al.\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ISO C99 support in <stdio.h>\" >&5\n-$as_echo_n \"checking for ISO C99 support in <stdio.h>... \" >&6; }\n-  if test \"${glibcxx_cv_c99_stdio+set}\" = set; then :\n+    fi\n+\n+    # Check for the existence in <stdio.h> of vscanf, et. al.\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ISO C99 support in <stdio.h> for C++11\" >&5\n+$as_echo_n \"checking for ISO C99 support in <stdio.h> for C++11... \" >&6; }\n+    if test \"${glibcxx_cv_c99_stdio_cxx11+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n \n-  if test x$gcc_no_link = xyes; then\n+      if test x$gcc_no_link = xyes; then\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <stdio.h>\n-      #include <stdarg.h>\n-      void foo(char* fmt, ...)\n-      {\n-\tva_list args; va_start(args, fmt);\n-\tvfscanf(stderr, \"%i\", args);\n-\tvscanf(\"%i\", args);\n-\tvsnprintf(fmt, 0, \"%i\", args);\n-\tvsscanf(fmt, \"%i\", args);\n-\tsnprintf(fmt, 0, \"%i\");\n-      }\n+         #include <stdarg.h>\n+         void foo(char* fmt, ...)\n+         {\n+           va_list args; va_start(args, fmt);\n+           vfscanf(stderr, \"%i\", args);\n+           vscanf(\"%i\", args);\n+           vsnprintf(fmt, 0, \"%i\", args);\n+           vsscanf(fmt, \"%i\", args);\n+           snprintf(fmt, 0, \"%i\");\n+         }\n int\n main ()\n {\n@@ -16917,9 +17510,9 @@ main ()\n }\n _ACEOF\n if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  glibcxx_cv_c99_stdio=yes\n+  glibcxx_cv_c99_stdio_cxx11=yes\n else\n-  glibcxx_cv_c99_stdio=no\n+  glibcxx_cv_c99_stdio_cxx11=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n else\n@@ -16929,16 +17522,16 @@ fi\n cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <stdio.h>\n-      #include <stdarg.h>\n-      void foo(char* fmt, ...)\n-      {\n-\tva_list args; va_start(args, fmt);\n-\tvfscanf(stderr, \"%i\", args);\n-\tvscanf(\"%i\", args);\n-\tvsnprintf(fmt, 0, \"%i\", args);\n-\tvsscanf(fmt, \"%i\", args);\n-\tsnprintf(fmt, 0, \"%i\");\n-      }\n+         #include <stdarg.h>\n+         void foo(char* fmt, ...)\n+         {\n+           va_list args; va_start(args, fmt);\n+           vfscanf(stderr, \"%i\", args);\n+           vscanf(\"%i\", args);\n+           vsnprintf(fmt, 0, \"%i\", args);\n+           vsscanf(fmt, \"%i\", args);\n+           snprintf(fmt, 0, \"%i\");\n+         }\n int\n main ()\n {\n@@ -16948,57 +17541,62 @@ main ()\n }\n _ACEOF\n if ac_fn_cxx_try_link \"$LINENO\"; then :\n-  glibcxx_cv_c99_stdio=yes\n+  glibcxx_cv_c99_stdio_cxx11=yes\n else\n-  glibcxx_cv_c99_stdio=no\n+  glibcxx_cv_c99_stdio_cxx11=no\n fi\n rm -f core conftest.err conftest.$ac_objext \\\n     conftest$ac_exeext conftest.$ac_ext\n fi\n \n fi\n \n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_c99_stdio\" >&5\n-$as_echo \"$glibcxx_cv_c99_stdio\" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_c99_stdio_cxx11\" >&5\n+$as_echo \"$glibcxx_cv_c99_stdio_cxx11\" >&6; }\n+    if test x\"$glibcxx_cv_c99_stdio_cxx11\" = x\"yes\"; then\n+\n+$as_echo \"#define _GLIBCXX11_USE_C99_STDIO 1\" >>confdefs.h\n \n-  # Check for the existence in <stdlib.h> of lldiv_t, et. al.\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ISO C99 support in <stdlib.h>\" >&5\n-$as_echo_n \"checking for ISO C99 support in <stdlib.h>... \" >&6; }\n-  if test \"${glibcxx_cv_c99_stdlib+set}\" = set; then :\n+    fi\n+\n+    # Check for the existence in <stdlib.h> of lldiv_t, et. al.\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ISO C99 support in <stdlib.h> for C++11\" >&5\n+$as_echo_n \"checking for ISO C99 support in <stdlib.h> for C++11... \" >&6; }\n+    if test \"${glibcxx_cv_c99_stdlib_cxx11+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n \n-  if test x$gcc_no_link = xyes; then\n+      if test x$gcc_no_link = xyes; then\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <stdlib.h>\n-      volatile float f;\n-      volatile long double ld;\n-      volatile unsigned long long ll;\n-      lldiv_t mydivt;\n+         volatile float f;\n+         volatile long double ld;\n+         volatile unsigned long long ll;\n+         lldiv_t mydivt;\n int\n main ()\n {\n char* tmp;\n-      f = strtof(\"gnu\", &tmp);\n-      ld = strtold(\"gnu\", &tmp);\n-      ll = strtoll(\"gnu\", &tmp, 10);\n-      ll = strtoull(\"gnu\", &tmp, 10);\n-      ll = llabs(10);\n-      mydivt = lldiv(10,1);\n-      ll = mydivt.quot;\n-      ll = mydivt.rem;\n-      ll = atoll(\"10\");\n-      _Exit(0);\n+         f = strtof(\"gnu\", &tmp);\n+         ld = strtold(\"gnu\", &tmp);\n+         ll = strtoll(\"gnu\", &tmp, 10);\n+         ll = strtoull(\"gnu\", &tmp, 10);\n+         ll = llabs(10);\n+         mydivt = lldiv(10,1);\n+         ll = mydivt.quot;\n+         ll = mydivt.rem;\n+         ll = atoll(\"10\");\n+         _Exit(0);\n \n   ;\n   return 0;\n }\n _ACEOF\n if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  glibcxx_cv_c99_stdlib=yes\n+  glibcxx_cv_c99_stdlib_cxx11=yes\n else\n-  glibcxx_cv_c99_stdlib=no\n+  glibcxx_cv_c99_stdlib_cxx11=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n else\n@@ -17008,58 +17606,66 @@ fi\n cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <stdlib.h>\n-      volatile float f;\n-      volatile long double ld;\n-      volatile unsigned long long ll;\n-      lldiv_t mydivt;\n+         volatile float f;\n+         volatile long double ld;\n+         volatile unsigned long long ll;\n+         lldiv_t mydivt;\n int\n main ()\n {\n char* tmp;\n-      f = strtof(\"gnu\", &tmp);\n-      ld = strtold(\"gnu\", &tmp);\n-      ll = strtoll(\"gnu\", &tmp, 10);\n-      ll = strtoull(\"gnu\", &tmp, 10);\n-      ll = llabs(10);\n-      mydivt = lldiv(10,1);\n-      ll = mydivt.quot;\n-      ll = mydivt.rem;\n-      ll = atoll(\"10\");\n-      _Exit(0);\n+         f = strtof(\"gnu\", &tmp);\n+         ld = strtold(\"gnu\", &tmp);\n+         ll = strtoll(\"gnu\", &tmp, 10);\n+         ll = strtoull(\"gnu\", &tmp, 10);\n+         ll = llabs(10);\n+         mydivt = lldiv(10,1);\n+         ll = mydivt.quot;\n+         ll = mydivt.rem;\n+         ll = atoll(\"10\");\n+         _Exit(0);\n \n   ;\n   return 0;\n }\n _ACEOF\n if ac_fn_cxx_try_link \"$LINENO\"; then :\n-  glibcxx_cv_c99_stdlib=yes\n+  glibcxx_cv_c99_stdlib_cxx11=yes\n else\n-  glibcxx_cv_c99_stdlib=no\n+  glibcxx_cv_c99_stdlib_cxx11=no\n fi\n rm -f core conftest.err conftest.$ac_objext \\\n     conftest$ac_exeext conftest.$ac_ext\n fi\n \n fi\n \n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_c99_stdlib\" >&5\n-$as_echo \"$glibcxx_cv_c99_stdlib\" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_c99_stdlib_cxx11\" >&5\n+$as_echo \"$glibcxx_cv_c99_stdlib_cxx11\" >&6; }\n+    if test x\"$glibcxx_cv_c99_stdlib_cxx11\" = x\"yes\"; then\n \n-  # Check for the existence in <wchar.h> of wcstold, etc.\n-  glibcxx_cv_c99_wchar=no;\n-  if test x\"$ac_has_wchar_h\" = xyes &&\n-     test x\"$ac_has_wctype_h\" = xyes; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ISO C99 support in <wchar.h>\" >&5\n-$as_echo_n \"checking for ISO C99 support in <wchar.h>... \" >&6; }\n-    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+$as_echo \"#define _GLIBCXX11_USE_C99_STDLIB 1\" >>confdefs.h\n+\n+    fi\n+\n+    # Check for the existence in <wchar.h> of wcstold, etc.\n+    if test x\"$ac_has_wchar_h\" = xyes &&\n+       test x\"$ac_has_wctype_h\" = xyes; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ISO C99 support in <wchar.h> for C++11\" >&5\n+$as_echo_n \"checking for ISO C99 support in <wchar.h> for C++11... \" >&6; }\n+      if test \"${glibcxx_cv_c99_wchar_cxx11+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+        cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <wchar.h>\n-\t\t    namespace test\n-\t\t    {\n-\t\t      using ::wcstold;\n-\t\t      using ::wcstoll;\n-\t\t      using ::wcstoull;\n-\t\t    }\n+          namespace test\n+          {\n+            using ::wcstold;\n+            using ::wcstoll;\n+            using ::wcstoull;\n+          }\n \n int\n main ()\n@@ -17070,20 +17676,23 @@ main ()\n }\n _ACEOF\n if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  glibcxx_cv_c99_wchar=yes\n+  glibcxx_cv_c99_wchar_cxx11=yes\n else\n-  glibcxx_cv_c99_wchar=no\n+  glibcxx_cv_c99_wchar_cxx11=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n \n-    # Checks for wide character functions that may not be present.\n-    # Injection of these is wrapped with guard macros.\n-    # NB: only put functions here, instead of immediately above, if\n-    # absolutely necessary.\n-    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+fi\n+\n+\n+      # Checks for wide character functions that may not be present.\n+      # Injection of these is wrapped with guard macros.\n+      # NB: only put functions here, instead of immediately above, if\n+      # absolutely necessary.\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <wchar.h>\n-\t\t    namespace test { using ::vfwscanf; }\n+        namespace test { using ::vfwscanf; }\n int\n main ()\n {\n@@ -17099,10 +17708,10 @@ $as_echo \"#define HAVE_VFWSCANF 1\" >>confdefs.h\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n \n-    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <wchar.h>\n-\t\t    namespace test { using ::vswscanf; }\n+        namespace test { using ::vswscanf; }\n int\n main ()\n {\n@@ -17118,10 +17727,10 @@ $as_echo \"#define HAVE_VSWSCANF 1\" >>confdefs.h\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n \n-    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <wchar.h>\n-\t\t    namespace test { using ::vwscanf; }\n+        namespace test { using ::vwscanf; }\n int\n main ()\n {\n@@ -17137,10 +17746,10 @@ $as_echo \"#define HAVE_VWSCANF 1\" >>confdefs.h\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n \n-    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <wchar.h>\n-\t\t    namespace test { using ::wcstof; }\n+        namespace test { using ::wcstof; }\n int\n main ()\n {\n@@ -17156,13 +17765,13 @@ $as_echo \"#define HAVE_WCSTOF 1\" >>confdefs.h\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n \n-    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <wctype.h>\n int\n main ()\n {\n- wint_t t; int i = iswblank(t);\n+wint_t t; int i = iswblank(t);\n   ;\n   return 0;\n }\n@@ -17174,27 +17783,19 @@ $as_echo \"#define HAVE_ISWBLANK 1\" >>confdefs.h\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n \n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_c99_wchar\" >&5\n-$as_echo \"$glibcxx_cv_c99_wchar\" >&6; }\n-  fi\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_c99_wchar_cxx11\" >&5\n+$as_echo \"$glibcxx_cv_c99_wchar_cxx11\" >&6; }\n+      if test x\"$glibcxx_cv_c99_wchar_cxx11\" = x\"yes\"; then\n \n-  # Option parsed, now set things appropriately.\n-  if test x\"$glibcxx_cv_c99_math\" = x\"no\" ||\n-     test x\"$glibcxx_cv_c99_complex\" = x\"no\" ||\n-     test x\"$glibcxx_cv_c99_stdio\" = x\"no\" ||\n-     test x\"$glibcxx_cv_c99_stdlib\" = x\"no\" ||\n-     test x\"$glibcxx_cv_c99_wchar\" = x\"no\"; then\n-    enable_c99=no;\n-  else\n+$as_echo \"#define _GLIBCXX11_USE_C99_WCHAR 1\" >>confdefs.h\n \n-$as_echo \"#define _GLIBCXX_USE_C99 1\" >>confdefs.h\n-\n-  fi\n+      fi\n+    fi\n \n-  gcc_no_link=\"$ac_save_gcc_no_link\"\n-  LIBS=\"$ac_save_LIBS\"\n-  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  ac_ext=c\n+    gcc_no_link=\"$ac_save_gcc_no_link\"\n+    LIBS=\"$ac_save_LIBS\"\n+    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+    ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'"}, {"sha": "b3853cd58286a7f629ca453acd5e967fd6d0a5b4", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -5387,7 +5387,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#if __cplusplus >= 201103L && defined(_GLIBCXX_USE_C99)\n+#if __cplusplus >= 201103L\n \n #include <ext/string_conversions.h>\n \n@@ -5396,6 +5396,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n+#if _GLIBCXX_USE_C99_STDLIB\n   // 21.4 Numeric Conversions [string.conversions].\n   inline int\n   stoi(const string& __str, size_t* __idx = 0, int __base = 10)\n@@ -5434,7 +5435,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   inline long double\n   stold(const string& __str, size_t* __idx = 0)\n   { return __gnu_cxx::__stoa(&std::strtold, \"stold\", __str.c_str(), __idx); }\n+#endif // _GLIBCXX_USE_C99_STDLIB\n \n+#if _GLIBCXX_USE_C99_STDIO\n   // NB: (v)snprintf vs sprintf.\n \n   // DR 1261.\n@@ -5498,8 +5501,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,\n \t\t\t\t\t   \"%Lf\", __val);\n   }\n+#endif // _GLIBCXX_USE_C99_STDIO\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n+#if defined(_GLIBCXX_USE_WCHAR_T) && defined(_GLIBCXX_USE_C99_WCHAR)\n   inline int \n   stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)\n   { return __gnu_cxx::__stoa<long, int>(&std::wcstol, \"stoi\", __str.c_str(),\n@@ -5601,13 +5605,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t\t\t\t    L\"%Lf\", __val);\n   }\n #endif // _GLIBCXX_HAVE_BROKEN_VSWPRINTF\n-#endif\n+#endif // _GLIBCXX_USE_WCHAR_T && _GLIBCXX_USE_C99_WCHAR\n \n _GLIBCXX_END_NAMESPACE_CXX11\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif /* C++11 && _GLIBCXX_USE_C99 ... */\n+#endif /* C++11 */\n \n #if __cplusplus >= 201103L\n "}, {"sha": "723feb12ee0f11faf4193ba994abc1087f0c9209", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -529,4 +529,40 @@ namespace std\n #undef min\n #undef max\n \n+// N.B. these _GLIBCXX_USE_C99_XXX macros are defined unconditionally\n+// so they should be tested with #if not with #ifdef.\n+#if __cplusplus >= 201103L\n+# ifndef _GLIBCXX_USE_C99_MATH\n+#  define _GLIBCXX_USE_C99_MATH _GLIBCXX11_USE_C99_MATH\n+# endif\n+# ifndef _GLIBCXX_USE_C99_COMPLEX\n+# define _GLIBCXX_USE_C99_COMPLEX _GLIBCXX11_USE_C99_COMPLEX\n+# endif\n+# ifndef _GLIBCXX_USE_C99_STDIO\n+# define _GLIBCXX_USE_C99_STDIO _GLIBCXX11_USE_C99_STDIO\n+# endif\n+# ifndef _GLIBCXX_USE_C99_STDLIB\n+# define _GLIBCXX_USE_C99_STDLIB _GLIBCXX11_USE_C99_STDLIB\n+# endif\n+# ifndef _GLIBCXX_USE_C99_WCHAR\n+# define _GLIBCXX_USE_C99_WCHAR _GLIBCXX11_USE_C99_WCHAR\n+# endif\n+#else\n+# ifndef _GLIBCXX_USE_C99_MATH\n+#  define _GLIBCXX_USE_C99_MATH _GLIBCXX98_USE_C99_MATH\n+# endif\n+# ifndef _GLIBCXX_USE_C99_COMPLEX\n+# define _GLIBCXX_USE_C99_COMPLEX _GLIBCXX98_USE_C99_COMPLEX\n+# endif\n+# ifndef _GLIBCXX_USE_C99_STDIO\n+# define _GLIBCXX_USE_C99_STDIO _GLIBCXX98_USE_C99_STDIO\n+# endif\n+# ifndef _GLIBCXX_USE_C99_STDLIB\n+# define _GLIBCXX_USE_C99_STDLIB _GLIBCXX98_USE_C99_STDLIB\n+# endif\n+# ifndef _GLIBCXX_USE_C99_WCHAR\n+# define _GLIBCXX_USE_C99_WCHAR _GLIBCXX98_USE_C99_WCHAR\n+# endif\n+#endif\n+\n // End of prewritten config; the settings discovered at configure time follow."}, {"sha": "2db2d83a48bf98adf8948bba926a8ac1072e122b", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -959,13 +959,13 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n     }\n \n   // The following code uses vsnprintf (or vsprintf(), when\n-  // _GLIBCXX_USE_C99 is not defined) to convert floating point values\n-  // for insertion into a stream.  An optimization would be to replace\n-  // them with code that works directly on a wide buffer and then use\n-  // __pad to do the padding.  It would be good to replace them anyway\n-  // to gain back the efficiency that C++ provides by knowing up front\n-  // the type of the values to insert.  Also, sprintf is dangerous\n-  // since may lead to accidental buffer overruns.  This\n+  // _GLIBCXX_USE_C99_STDIO is not defined) to convert floating point\n+  // values for insertion into a stream.  An optimization would be to\n+  // replace them with code that works directly on a wide buffer and\n+  // then use __pad to do the padding.  It would be good to replace\n+  // them anyway to gain back the efficiency that C++ provides by\n+  // knowing up front the type of the values to insert.  Also, sprintf\n+  // is dangerous since may lead to accidental buffer overruns.  This\n   // implementation follows the C++ standard fairly directly as\n   // outlined in 22.2.2.2 [lib.locale.num.put]\n   template<typename _CharT, typename _OutIter>\n@@ -992,7 +992,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n \tchar __fbuf[16];\n \t__num_base::_S_format_float(__io, __fbuf, __mod);\n \n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDIO\n \t// Precision is always used except for hexfloat format.\n \tconst bool __use_prec =\n \t  (__io.flags() & ios_base::floatfield) != ios_base::floatfield;"}, {"sha": "631ef537791e16529989e9f805c689590321d47f", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -578,7 +578,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n     {\n       const locale __loc = __io.getloc();\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDIO\n       // First try a buffer perhaps big enough.\n       int __cs_size = 64;\n       char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n@@ -751,7 +751,7 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \t\tcase 'S':\n \t\t  // Seconds. [tm_sec]\n \t\t  // [00, 60] in C99 (one leap-second), [00, 61] in C89.\n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99\n \t\t  __beg = _M_extract_num(__beg, __end, __tm->tm_sec, 0, 60, 2,\n #else\n \t\t  __beg = _M_extract_num(__beg, __end, __tm->tm_sec, 0, 61, 2,"}, {"sha": "7729896dd5ee4f90a6fcea3cc288ab98bfb799a2", "filename": "libstdc++-v3/include/c_compatibility/math.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -56,7 +56,7 @@ using std::fabs;\n using std::floor;\n using std::fmod;\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_MATH\n using std::fpclassify;\n using std::isfinite;\n using std::isinf;"}, {"sha": "3bc12d07272dded7eb39c060a28527fee9924ba7", "filename": "libstdc++-v3/include/c_compatibility/wchar.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwchar.h?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -103,7 +103,7 @@ using std::wmemmove;\n using std::wmemset;\n using std::wcsftime;\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_WCHAR\n using std::wcstold;\n using std::wcstoll;\n using std::wcstoull;"}, {"sha": "486cee9905e4aa086f52049d7ea3271b1fd4dde6", "filename": "libstdc++-v3/include/c_global/cstdio", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -146,7 +146,7 @@ namespace std\n   using ::vsprintf;\n } // namespace\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDIO\n \n #undef snprintf\n #undef vfscanf\n@@ -189,6 +189,6 @@ namespace std\n   using ::__gnu_cxx::vsscanf;\n } // namespace std\n \n-#endif // _GLIBCXX_USE_C99\n+#endif // _GLIBCXX_USE_C99_STDIO\n \n #endif"}, {"sha": "a2f44fc3eafc41a0709723fcb2bb52d53f01853d", "filename": "libstdc++-v3/include/c_global/cstdlib", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -195,7 +195,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDLIB\n \n #undef _Exit\n #undef llabs\n@@ -266,7 +266,7 @@ namespace std\n   using ::__gnu_cxx::strtold;\n } // namespace std\n \n-#endif // _GLIBCXX_USE_C99\n+#endif // _GLIBCXX_USE_C99_STDLIB\n \n #endif // !_GLIBCXX_HOSTED\n "}, {"sha": "15714633c1e5e33b1b73e22cdc8cc509abb90a8b", "filename": "libstdc++-v3/include/c_global/cwchar", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -232,7 +232,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_WCHAR\n \n #undef wcstold\n #undef wcstoll\n@@ -289,7 +289,7 @@ namespace std\n   using std::vwscanf;\n #endif\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_WCHAR\n   using std::wcstold;\n   using std::wcstoll;\n   using std::wcstoull;"}, {"sha": "b7860f96853089e829192ccb710b65c4f2822382", "filename": "libstdc++-v3/include/c_std/cstdio", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -144,7 +144,7 @@ namespace std\n   using ::vsprintf;\n } // namespace std\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDIO\n \n #undef snprintf\n #undef vfscanf"}, {"sha": "7b69884f8704c95104ad77d0dec7d74b94322c82", "filename": "libstdc++-v3/include/c_std/cstdlib", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdlib?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -192,7 +192,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDLIB\n \n #undef _Exit\n #undef llabs\n@@ -263,7 +263,7 @@ namespace std\n   using ::__gnu_cxx::strtold;\n } // namespace std\n \n-#endif // _GLIBCXX_USE_C99\n+#endif // _GLIBCXX_USE_C99_STDLIB\n \n #endif // !_GLIBCXX_HOSTED\n "}, {"sha": "5aade7f64bab5a567256df289785d20878ea235b", "filename": "libstdc++-v3/include/c_std/cwchar", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwchar?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -228,7 +228,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_WCHAR\n \n #undef wcstold\n #undef wcstoll"}, {"sha": "8732bd38891a7b74a0a0f4cf8d4f804c3db7a689", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -2680,14 +2680,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#if ((__cplusplus >= 201103L) && defined(_GLIBCXX_USE_C99))\n+#if __cplusplus >= 201103L\n \n #include <ext/string_conversions.h>\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+#if _GLIBCXX_USE_C99_STDLIB\n   // 21.4 Numeric Conversions [string.conversions].\n   inline int\n   stoi(const __vstring& __str, std::size_t* __idx = 0, int __base = 10)\n@@ -2726,7 +2727,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   inline long double\n   stold(const __vstring& __str, std::size_t* __idx = 0)\n   { return __gnu_cxx::__stoa(&std::strtold, \"stold\", __str.c_str(), __idx); }\n+#endif // _GLIBCXX_USE_C99_STDLIB\n \n+#if _GLIBCXX_USE_C99_STDIO\n   // NB: (v)snprintf vs sprintf.\n \n   // DR 1261.\n@@ -2789,8 +2792,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return __gnu_cxx::__to_xstring<__vstring>(&std::vsnprintf, __n,\n \t\t\t\t\t      \"%Lf\", __val);\n   }\n+#endif // _GLIBCXX_USE_C99_STDIO\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n+#if defined(_GLIBCXX_USE_WCHAR_T) && defined(_GLIBCXX_USE_C99_WCHAR)\n   inline int \n   stoi(const __wvstring& __str, std::size_t* __idx = 0, int __base = 10)\n   { return __gnu_cxx::__stoa<long, int>(&std::wcstol, \"stoi\", __str.c_str(),\n@@ -2890,8 +2894,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return __gnu_cxx::__to_xstring<__wvstring>(&std::vswprintf, __n,\n \t\t\t\t\t       L\"%Lf\", __val);\n   }\n-#endif\n-#endif\n+#endif // _GLIBCXX_HAVE_BROKEN_VSWPRINTF\n+#endif // _GLIBCXX_USE_WCHAR_T && _GLIBCXX_USE_C99_WCHAR\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "f1d3b79f504d1f2323a7ba1cf11f1c13df993531", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -995,7 +995,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     complex<_Tp>\n     pow(const complex<_Tp>& __x, const _Tp& __y)\n     {\n-#ifndef _GLIBCXX_USE_C99_COMPLEX\n+#if ! _GLIBCXX_USE_C99_COMPLEX\n       if (__x == _Tp())\n \treturn _Tp();\n #endif\n@@ -1831,7 +1831,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     arg(_Tp __x)\n     {\n       typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-#if (_GLIBCXX_USE_C99_MATH && !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC)\n+#if (_GLIBCXX11_USE_C99_MATH && !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC)\n       return std::signbit(__x) ? __type(3.1415926535897932384626433832795029L)\n \t                       : __type();\n #else"}, {"sha": "b8fc04f72c6e931d4a27eda34069ed182b704660", "filename": "libstdc++-v3/include/tr1/cstdio", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdio?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -33,7 +33,7 @@\n \n #include <cstdio>\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDIO\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "35a91334c943afe0666ac620856360bd52a061af", "filename": "libstdc++-v3/include/tr1/cstdlib", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdlib?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -35,7 +35,7 @@\n \n #if _GLIBCXX_HOSTED\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDLIB\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -65,7 +65,7 @@ namespace tr1\n }\n }\n \n-#endif // _GLIBCXX_USE_C99 \n+#endif // _GLIBCXX_USE_C99_STDLIB\n \n #endif // _GLIBCXX_HOSTED\n "}, {"sha": "0db2262f7b1513f1a1ddccdb604d0a3a9303a6f1", "filename": "libstdc++-v3/include/tr1/cwchar", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwchar?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -52,7 +52,7 @@ namespace tr1\n   using std::vwscanf;\n #endif\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_WCHAR\n   using std::wcstold;\n   using std::wcstoll;\n   using std::wcstoull;"}, {"sha": "5e826d6270a193cb5d4cb838faf1a8237f4831f8", "filename": "libstdc++-v3/include/tr1/stdlib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fstdlib.h?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -33,7 +33,7 @@\n \n #if _GLIBCXX_HOSTED\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDLIB\n \n using std::tr1::atoll;\n using std::tr1::strtoll;"}, {"sha": "28b6f3aabb7f62168167f1befa39ec15a35ba2fe", "filename": "libstdc++-v3/src/c++98/locale_facets.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_facets.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_facets.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_facets.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -72,7 +72,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     ios_base::fmtflags __fltfield = __flags & ios_base::floatfield;\n \n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDIO\n     // Precision is always used except for hexfloat format.\n     if (__fltfield != (ios_base::fixed | ios_base::scientific))\n #endif\n@@ -89,7 +89,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       *__fptr++ = 'f';\n     else if (__fltfield == ios_base::scientific)\n       *__fptr++ = (__flags & ios_base::uppercase) ? 'E' : 'e';\n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDIO\n     else if (__fltfield == (ios_base::fixed | ios_base::scientific))\n       *__fptr++ = (__flags & ios_base::uppercase) ? 'A' : 'a';\n #endif"}, {"sha": "1a53c06aa216707a3488421d2d8f18defe6b4484", "filename": "libstdc++-v3/testsuite/18_support/exception_ptr/60612-terminate.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F60612-terminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F60612-terminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F60612-terminate.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -23,7 +23,7 @@\n #include <exception>\n #include <stdlib.h>\n \n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDLIB\n void terminate() { _Exit(0); }\n \n void f() noexcept\n@@ -39,7 +39,7 @@ void f() noexcept\n \n int main()\n {\n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDLIB\n   f();\n #endif\n   return 0;"}, {"sha": "3f8e08d008f0229c6a47b7e1f54869468dff8364", "filename": "libstdc++-v3/testsuite/18_support/exception_ptr/60612-unexpected.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F60612-unexpected.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F60612-unexpected.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F60612-unexpected.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -23,7 +23,7 @@\n #include <exception>\n #include <stdlib.h>\n \n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDLIB\n void unexpected() { _Exit(0); }\n \n void f() throw()\n@@ -39,7 +39,7 @@ void f() throw()\n \n int main()\n {\n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDLIB\n   f();\n #endif\n }"}, {"sha": "ea284ccd529dceb70252d4ae8aa02e07a6779913", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stod.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstod.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -29,7 +29,7 @@\n void\n test01()\n {\n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_WCHAR\n \n   bool test __attribute__((unused)) = false;\n   using namespace std;"}, {"sha": "fd54d57c6ff2118c902d3745e4d3a1e2b64d7364", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stof.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstof.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstof.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstof.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -29,7 +29,7 @@\n void\n test01()\n {\n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_WCHAR\n \n   bool test __attribute__((unused)) = false;\n   using namespace std;"}, {"sha": "8cd0ea1ff997810e7bdbffdc564ec30da17e3dc3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoi.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoi.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -29,7 +29,7 @@\n void\n test01()\n {\n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_WCHAR\n \n   bool test __attribute__((unused)) = false;\n   using namespace std;"}, {"sha": "9be3f391507e651c7c5b8da92530fc6e24ac648c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stol.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstol.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstol.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstol.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -29,7 +29,7 @@\n void\n test01()\n {\n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_WCHAR\n \n   bool test __attribute__((unused)) = false;\n   using namespace std;"}, {"sha": "7d9e414970d162a81f84bb58e12d5ffb29626618", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stold.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstold.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -29,7 +29,7 @@\n void\n test01()\n {\n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_WCHAR\n \n   bool test __attribute__((unused)) = false;\n   using namespace std;"}, {"sha": "2927da3382b95631130a895e9b7b7047ef1a8b96", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoll.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoll.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoll.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoll.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -29,7 +29,7 @@\n void\n test01()\n {\n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_WCHAR\n \n   bool test __attribute__((unused)) = false;\n   using namespace std;"}, {"sha": "256cee546b3c30193e60250f98cba04aad0ea38d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoul.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoul.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoul.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoul.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -29,7 +29,7 @@\n void\n test01()\n {\n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_WCHAR\n \n   bool test __attribute__((unused)) = false;\n   using namespace std;"}, {"sha": "e102c6a0018ad4ca75729630b0feba57395e573a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoull.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoull.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -29,7 +29,7 @@\n void\n test01()\n {\n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_WCHAR\n \n   bool test __attribute__((unused)) = false;\n   using namespace std;"}, {"sha": "467bd9fc46e394a07a78db44391099b36e3f1a4c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/to_wstring.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fto_wstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fto_wstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fto_wstring.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -27,7 +27,7 @@\n void\n test01()\n {\n-#ifdef _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_WCHAR\n \n   bool test __attribute__((unused)) = true;\n   using namespace std;"}, {"sha": "50c6b32835540d4ae86068f34b9885623cbae6ad", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cstdlib/13943.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2F13943.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2F13943.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2F13943.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -19,7 +19,7 @@\n #include <cstdlib>\n #include <testsuite_hooks.h>\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDLIB\n // libstdc++/13943\n void test01()\n {\n@@ -36,7 +36,7 @@ void test01()\n \n int main()\n {\n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDLIB\n   test01();\n #endif\n   return 0;"}, {"sha": "bfcbe9a35430ed6858bfef1ffc2b9ef12fa9c29d", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cstdlib/types_std_c++0x.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Ftypes_std_c%2B%2B0x.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -24,10 +24,10 @@\n \n void test01()\n {\n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDLIB\n \n   typedef std::lldiv_t     my_lldiv_t;\n-  \n+\n #endif\n }\n "}, {"sha": "6a62dfd72717a1e007ae95751ac20ccabb56d58a", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -1614,7 +1614,7 @@ proc check_v3_target_string_conversions { } {\n \n         set f [open $src \"w\"]\n         puts $f \"#include <bits/c++config.h>\"\n-        puts $f \"#if !defined(_GLIBCXX_USE_C99) || defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF)\"\n+        puts $f \"#if !(_GLIBCXX_USE_C99_STDIO && _GLIBCXX_USE_C99_STDLIB && _GLIBCXX_USE_C99_WCHAR) || defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF)\"\n         puts $f \"#  error No string conversions\"\n         puts $f \"#endif\"\n         close $f"}, {"sha": "ac8933c97e8a96a1c3fadfdfb913490936246241", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cmath/templates.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ftemplates.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ftemplates.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ftemplates.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -23,7 +23,7 @@\n \n #include <tr1/cmath>\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_MATH\n #if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC\n \n template<typename T>"}, {"sha": "5a9eb6c2c4ff4df586f56872f3e0c3318b756fc3", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cstdio/functions.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdio%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdio%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdio%2Ffunctions.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -30,7 +30,7 @@ void test01(int dummy, ...)\n   std::va_list ap;\n   va_start(ap, dummy);\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDIO\n \n   char* s = 0;\n   const char* cs = 0;"}, {"sha": "dfa08ef894d9cbcffde7594a8cf80c4fe4629b41", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cstdlib/functions.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdlib%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdlib%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdlib%2Ffunctions.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -27,7 +27,7 @@\n \n void test01()\n {\n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDLIB\n \n   long long i = 0;\n   const char* s = 0;"}, {"sha": "12524634b339aaf49fcf75b93eea3bd852059411", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cstdlib/types_std_tr1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdlib%2Ftypes_std_tr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdlib%2Ftypes_std_tr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdlib%2Ftypes_std_tr1.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -27,10 +27,10 @@\n \n void test01()\n {\n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDLIB\n \n   typedef std::tr1::lldiv_t     my_lldiv_t;\n-  \n+\n #endif\n }\n "}, {"sha": "c745b19dc41536618860895e88e3cfa14f5dad23", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cwchar/functions.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwchar%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwchar%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwchar%2Ffunctions.cc?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -67,7 +67,7 @@ void test01(int dummy, ...)\n   ret3 = ret3; // Suppress unused warning.\n #endif\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_WCHAR\n \n   const wchar_t* nptr2 = 0;\n   wchar_t** endptr2 = 0;"}, {"sha": "ddcbdccf442659a8be231ec4a8983ff78958712a", "filename": "libstdc++-v3/testsuite/util/testsuite_fs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c64853c83f3cf9cdf6925ab1c77d951cd1686b/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h?ref=23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "patch": "@@ -83,7 +83,7 @@ namespace __gnu_test\n     p = tmp;\n #else\n     char buf[64];\n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_STDIO\n     std::snprintf(buf, 64, \"filesystem-ts-test.%lu\", (unsigned long)::getpid());\n #else\n     std::sprintf(buf, \"filesystem-ts-test.%lu\", (unsigned long)::getpid());"}]}