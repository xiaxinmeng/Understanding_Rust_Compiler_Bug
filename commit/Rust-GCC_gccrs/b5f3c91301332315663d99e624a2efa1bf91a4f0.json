{"sha": "b5f3c91301332315663d99e624a2efa1bf91a4f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVmM2M5MTMwMTMzMjMxNTY2M2Q5OWU2MjRhMmVmYTFiZjkxYTRmMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-13T11:16:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-13T11:16:56Z"}, "message": "[multiple changes]\n\n2017-01-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.ads: minor grammar fixes in comment of Normalized_Position_Max.\n\t* scil_ll.adb: Minor style fix in comment.\n\t* sem_ch8.adb (Analyze_Expanded_Name): Perform dimension analysis\n\teven if entity is already set, because the node may be renalyzed\n\tafter inlining transformations.\n\n2017-01-13  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_res.adb (Resolve_Call): Do not establish a transient scope\n\tfor a call to inlinable expression function (since the call will\n\tbe replaced by its returned object).\n\t* exp_ch6.ads (Is_Inlinable_Expression_Function): New subprogram.\n\t* exp_ch6.adb (Expression_Of_Expression_Function): New subprogram.\n\t(Expand_Call): For inlinable expression function call replace the\n\tcall by its returned object.\n\t(Is_Inlinable_Expression_Function): New subprogram.\n\nFrom-SVN: r244425", "tree": {"sha": "66ffcefcd89fd72cc4b9f08d815450c2eaf21b6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66ffcefcd89fd72cc4b9f08d815450c2eaf21b6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5f3c91301332315663d99e624a2efa1bf91a4f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f3c91301332315663d99e624a2efa1bf91a4f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5f3c91301332315663d99e624a2efa1bf91a4f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f3c91301332315663d99e624a2efa1bf91a4f0/comments", "author": null, "committer": null, "parents": [{"sha": "82e5c2434e6709118bdf4499cdcbd5dc2c535368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e5c2434e6709118bdf4499cdcbd5dc2c535368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e5c2434e6709118bdf4499cdcbd5dc2c535368"}], "stats": {"total": 123, "additions": 118, "deletions": 5}, "files": [{"sha": "58188455e8b46e48778225fba5480282b37d7b36", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f3c91301332315663d99e624a2efa1bf91a4f0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f3c91301332315663d99e624a2efa1bf91a4f0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b5f3c91301332315663d99e624a2efa1bf91a4f0", "patch": "@@ -1,3 +1,22 @@\n+2017-01-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads: minor grammar fixes in comment of Normalized_Position_Max.\n+\t* scil_ll.adb: Minor style fix in comment.\n+\t* sem_ch8.adb (Analyze_Expanded_Name): Perform dimension analysis\n+\teven if entity is already set, because the node may be renalyzed\n+\tafter inlining transformations.\n+\n+2017-01-13  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Call): Do not establish a transient scope\n+\tfor a call to inlinable expression function (since the call will\n+\tbe replaced by its returned object).\n+\t* exp_ch6.ads (Is_Inlinable_Expression_Function): New subprogram.\n+\t* exp_ch6.adb (Expression_Of_Expression_Function): New subprogram.\n+\t(Expand_Call): For inlinable expression function call replace the\n+\tcall by its returned object.\n+\t(Is_Inlinable_Expression_Function): New subprogram.\n+\n 2017-01-13  Gary Dismukes  <dismukes@adacore.com>\n \n \t* checks.adb: Minor typo fix and reformatting."}, {"sha": "6b85bb9d5bc25c7077479e46e038c111a2593686", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f3c91301332315663d99e624a2efa1bf91a4f0/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f3c91301332315663d99e624a2efa1bf91a4f0/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=b5f3c91301332315663d99e624a2efa1bf91a4f0", "patch": "@@ -3647,8 +3647,8 @@ package Einfo is\n --       depends on discriminants. In this case, the Normalized_Position_Max\n --       field represents the maximum possible value of Normalized_Position\n --       assuming min/max values for discriminant subscripts in all fields.\n---       This is used by Layout in front end layout mode to properly computed\n---       the maximum size such records (needed for allocation purposes when\n+--       This is used by Layout in front end layout mode to properly compute\n+--       the maximum size of such records (needed for allocation purposes when\n --       there are default discriminants, and also for the 'Size value).\n \n --    Number_Dimensions (synthesized)"}, {"sha": "5e7a30015adf56260605d5b65425578255e33ec8", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f3c91301332315663d99e624a2efa1bf91a4f0/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f3c91301332315663d99e624a2efa1bf91a4f0/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=b5f3c91301332315663d99e624a2efa1bf91a4f0", "patch": "@@ -219,6 +219,10 @@ package body Exp_Ch6 is\n    --  reference to the object itself, and the call becomes a call to the\n    --  corresponding protected subprogram.\n \n+   function Expression_Of_Expression_Function\n+     (Subp : Entity_Id) return Node_Id;\n+   --  Return the expression of the expression function Subp\n+\n    function Has_Unconstrained_Access_Discriminants\n      (Subtyp : Entity_Id) return Boolean;\n    --  Returns True if the given subtype is unconstrained and has one\n@@ -3938,6 +3942,14 @@ package body Exp_Ch6 is\n          if not Is_Inlined (Subp) then\n             null;\n \n+         --  Frontend inlining of expression functions (performed also when\n+         --  backend inlining is enabled)\n+\n+         elsif Is_Inlinable_Expression_Function (Subp) then\n+            Rewrite (N, New_Copy (Expression_Of_Expression_Function (Subp)));\n+            Analyze (N);\n+            return;\n+\n          --  Handle frontend inlining\n \n          elsif not Back_End_Inlining then\n@@ -6958,6 +6970,36 @@ package body Exp_Ch6 is\n       end if;\n    end Expand_Simple_Function_Return;\n \n+   ---------------------------------------\n+   -- Expression_Of_Expression_Function --\n+   ---------------------------------------\n+\n+   function Expression_Of_Expression_Function\n+     (Subp : Entity_Id) return Node_Id\n+   is\n+      Expr_Func : Node_Id;\n+\n+   begin\n+      pragma Assert (Is_Expression_Function_Or_Completion (Subp));\n+\n+      if Nkind (Original_Node (Subprogram_Spec (Subp)))\n+           = N_Expression_Function\n+      then\n+         Expr_Func := Original_Node (Subprogram_Spec (Subp));\n+\n+      elsif Nkind (Original_Node (Subprogram_Body (Subp)))\n+              = N_Expression_Function\n+      then\n+         Expr_Func := Original_Node (Subprogram_Body (Subp));\n+\n+      else\n+         pragma Assert (False);\n+         null;\n+      end if;\n+\n+      return Original_Node (Expression (Expr_Func));\n+   end Expression_Of_Expression_Function;\n+\n    --------------------------------------------\n    -- Has_Unconstrained_Access_Discriminants --\n    --------------------------------------------\n@@ -7285,6 +7327,39 @@ package body Exp_Ch6 is\n       end if;\n    end Freeze_Subprogram;\n \n+   --------------------------------------\n+   -- Is_Inlinable_Expression_Function --\n+   --------------------------------------\n+\n+   function Is_Inlinable_Expression_Function (Subp : Entity_Id) return Boolean\n+   is\n+      Return_Expr : Node_Id;\n+\n+   begin\n+      if Is_Expression_Function_Or_Completion (Subp)\n+        and then Has_Pragma_Inline_Always (Subp)\n+        and then Needs_No_Actuals (Subp)\n+        and then No (Contract (Subp))\n+        and then not Is_Dispatching_Operation (Subp)\n+        and then Needs_Finalization (Etype (Subp))\n+        and then not Is_Class_Wide_Type (Etype (Subp))\n+        and then not (Has_Invariants (Etype (Subp)))\n+        and then Present (Subprogram_Body (Subp))\n+        and then Was_Expression_Function (Subprogram_Body (Subp))\n+      then\n+         Return_Expr := Expression_Of_Expression_Function (Subp);\n+\n+         --  The returned object must not have a qualified expression and its\n+         --  nominal subtype must be statically compatible with the result\n+         --  subtype of the expression function.\n+\n+         return Nkind (Return_Expr) = N_Identifier\n+           and then Etype (Return_Expr) = Etype (Subp);\n+      end if;\n+\n+      return False;\n+   end Is_Inlinable_Expression_Function;\n+\n    -----------------------\n    -- Is_Null_Procedure --\n    -----------------------"}, {"sha": "1facf76ed6a31618c8428d3f9903c4e67e691e5b", "filename": "gcc/ada/exp_ch6.ads", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f3c91301332315663d99e624a2efa1bf91a4f0/gcc%2Fada%2Fexp_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f3c91301332315663d99e624a2efa1bf91a4f0/gcc%2Fada%2Fexp_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.ads?ref=b5f3c91301332315663d99e624a2efa1bf91a4f0", "patch": "@@ -137,6 +137,20 @@ package Exp_Ch6 is\n    --  that requires handling as a build-in-place call or is a qualified\n    --  expression applied to such a call; otherwise returns False.\n \n+   function Is_Inlinable_Expression_Function (Subp : Entity_Id) return Boolean;\n+   --  Return True if Subp is an expression function that fulfills all the\n+   --  following requirements for inlining:\n+   --     1. pragma/aspect Inline_Always\n+   --     2. No formals\n+   --     3. No contracts\n+   --     4. No dispatching primitive\n+   --     5. Result subtype controlled (or with controlled components)\n+   --     6. Result subtype not subject to type-invariant checks\n+   --     7. Result subtype not a class-wide type\n+   --     8. Return expression naming an object global to the function\n+   --     9. Nominal subtype of the returned object statically compatible\n+   --        with the result subtype of the expression function.\n+\n    function Is_Null_Procedure (Subp : Entity_Id) return Boolean;\n    --  Predicate to recognize stubbed procedures and null procedures, which\n    --  can be inlined unconditionally in all cases."}, {"sha": "151fda3c99373a11416594c53fd1a3f954de6a52", "filename": "gcc/ada/scil_ll.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f3c91301332315663d99e624a2efa1bf91a4f0/gcc%2Fada%2Fscil_ll.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f3c91301332315663d99e624a2efa1bf91a4f0/gcc%2Fada%2Fscil_ll.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscil_ll.adb?ref=b5f3c91301332315663d99e624a2efa1bf91a4f0", "patch": "@@ -75,7 +75,7 @@ package body SCIL_LL is\n       Key        => Node_Id,\n       Hash       => Hash,\n       Equal      => \"=\");\n-   --  This table records the value of attribute SCIL_Node of tree nodes.\n+   --  This table records the value of attribute SCIL_Node of tree nodes\n \n    --------------------\n    -- Copy_SCIL_Node --"}, {"sha": "10233500398fd72c7f4058f13f1d7071770ee318", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f3c91301332315663d99e624a2efa1bf91a4f0/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f3c91301332315663d99e624a2efa1bf91a4f0/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=b5f3c91301332315663d99e624a2efa1bf91a4f0", "patch": "@@ -609,11 +609,12 @@ package body Sem_Ch8 is\n             Set_Etype (N, Etype (Entity (N)));\n          end if;\n \n-         return;\n       else\n          Find_Expanded_Name (N);\n       end if;\n \n+      --  In either case, propagate dimension of entity to expanded name\n+\n       Analyze_Dimension (N);\n    end Analyze_Expanded_Name;\n "}, {"sha": "71c3a5bcf31568d62f465c96588cb59d5906a188", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f3c91301332315663d99e624a2efa1bf91a4f0/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f3c91301332315663d99e624a2efa1bf91a4f0/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=b5f3c91301332315663d99e624a2efa1bf91a4f0", "patch": "@@ -6260,7 +6260,10 @@ package body Sem_Res is\n       --  within the specialized Exp_Ch6 procedures for expanding those\n       --  build-in-place calls.\n \n-      --  e) If the subprogram is marked Inline_Always, then even if it returns\n+      --  e) Calls to inlinable expression functions do not use the secondary\n+      --  stack (since the call will be replaced by its returned object).\n+\n+      --  f) If the subprogram is marked Inline_Always, then even if it returns\n       --  an unconstrained type the call does not require use of the secondary\n       --  stack. However, inlining will only take place if the body to inline\n       --  is already present. It may not be available if e.g. the subprogram is\n@@ -6281,6 +6284,7 @@ package body Sem_Res is\n       elsif Ekind (Nam) = E_Enumeration_Literal\n         or else Is_Build_In_Place_Function (Nam)\n         or else Is_Intrinsic_Subprogram (Nam)\n+        or else Is_Inlinable_Expression_Function (Nam)\n       then\n          null;\n "}]}