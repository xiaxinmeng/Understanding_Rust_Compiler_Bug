{"sha": "79e5286cbab0f3bf252de42e3fc39b924001d903", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzllNTI4NmNiYWIwZjNiZjI1MmRlNDJlM2ZjMzliOTI0MDAxZDkwMw==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2009-01-27T18:07:54Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2009-01-27T18:07:54Z"}, "message": "re PR fortran/38883 (ICE for MVBITS with derived type argument that has run-time subscripts)\n\n2009-01-27  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/38883\n\t* trans-stmt.c (gfc_conv_elemental_dependencies):  Create temporary\n\tfor the real type needed to make it work for subcomponent-references.\n\n2009-01-27  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/38883\n\t* gfortran.dg/mvbits_6.f90:  New test.\n\t* gfortran.dg/mvbits_7.f90:  New test.\n\t* gfortran.dg/mvbits_8.f90:  New test.\n\nFrom-SVN: r143707", "tree": {"sha": "6b57802deba68e19c09e443be537564eb92052fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b57802deba68e19c09e443be537564eb92052fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79e5286cbab0f3bf252de42e3fc39b924001d903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e5286cbab0f3bf252de42e3fc39b924001d903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79e5286cbab0f3bf252de42e3fc39b924001d903", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e5286cbab0f3bf252de42e3fc39b924001d903/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b7d60003fdc93ba1be6b25fbb7c393e2837c0e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b7d60003fdc93ba1be6b25fbb7c393e2837c0e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b7d60003fdc93ba1be6b25fbb7c393e2837c0e6"}], "stats": {"total": 140, "additions": 129, "deletions": 11}, "files": [{"sha": "6facf64d27c845abf4df614af91a5f747866ba88", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e5286cbab0f3bf252de42e3fc39b924001d903/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e5286cbab0f3bf252de42e3fc39b924001d903/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=79e5286cbab0f3bf252de42e3fc39b924001d903", "patch": "@@ -1,3 +1,9 @@\n+2009-01-27  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/38883\n+\t* trans-stmt.c (gfc_conv_elemental_dependencies):  Create temporary\n+\tfor the real type needed to make it work for subcomponent-references.\n+\n 2009-01-21  Daniel Kraft  <d@domob.eu>\n \n \t* trans-stmt.c (gfc_conv_elemental_dependencies):  Cleaned up comment."}, {"sha": "42f0ac438ab443962908a815ab7275b1d153bf45", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e5286cbab0f3bf252de42e3fc39b924001d903/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e5286cbab0f3bf252de42e3fc39b924001d903/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=79e5286cbab0f3bf252de42e3fc39b924001d903", "patch": "@@ -213,7 +213,6 @@ gfc_conv_elemental_dependencies (gfc_se * se, gfc_se * loopse,\n   gfc_ss_info *info;\n   gfc_symbol *fsym;\n   int n;\n-  stmtblock_t block;\n   tree data;\n   tree offset;\n   tree size;\n@@ -252,7 +251,7 @@ gfc_conv_elemental_dependencies (gfc_se * se, gfc_se * loopse,\n \t    && gfc_check_fncall_dependency (e, fsym->attr.intent,\n \t\t\t\t\t    sym, arg0, check_variable))\n \t{\n-\t  tree initial;\n+\t  tree initial, temptype;\n \t  stmtblock_t temp_post;\n \n \t  /* Make a local loopinfo for the temporary creation, so that\n@@ -278,24 +277,31 @@ gfc_conv_elemental_dependencies (gfc_se * se, gfc_se * loopse,\n \t  else\n \t    initial = NULL_TREE;\n \n-\t  /* Generate the temporary.  Merge the block so that the\n-\t     declarations are put at the right binding level.  Cleaning up the\n-\t     temporary should be the very last thing done, so we add the code to\n-\t     a new block and add it to se->post as last instructions.  */\n+\t  /* Find the type of the temporary to create; we don't use the type\n+\t     of e itself as this breaks for subcomponent-references in e (where\n+\t     the type of e is that of the final reference, but parmse.expr's\n+\t     type corresponds to the full derived-type).  */\n+\t  /* TODO: Fix this somehow so we don't need a temporary of the whole\n+\t     array but instead only the components referenced.  */\n+\t  temptype = TREE_TYPE (parmse.expr); /* Pointer to descriptor.  */\n+\t  gcc_assert (TREE_CODE (temptype) == POINTER_TYPE);\n+\t  temptype = TREE_TYPE (temptype);\n+\t  temptype = gfc_get_element_type (temptype);\n+\n+\t  /* Generate the temporary.  Cleaning up the temporary should be the\n+\t     very last thing done, so we add the code to a new block and add it\n+\t     to se->post as last instructions.  */\n \t  size = gfc_create_var (gfc_array_index_type, NULL);\n \t  data = gfc_create_var (pvoid_type_node, NULL);\n-\t  gfc_start_block (&block);\n \t  gfc_init_block (&temp_post);\n-\t  tmp = gfc_typenode_for_spec (&e->ts);\n \t  tmp = gfc_trans_create_temp_array (&se->pre, &temp_post,\n-\t\t\t\t\t     &tmp_loop, info, tmp,\n+\t\t\t\t\t     &tmp_loop, info, temptype,\n \t\t\t\t\t     initial,\n \t\t\t\t\t     false, true, false,\n \t\t\t\t\t     &arg->expr->where);\n \t  gfc_add_modify (&se->pre, size, tmp);\n \t  tmp = fold_convert (pvoid_type_node, info->data);\n \t  gfc_add_modify (&se->pre, data, tmp);\n-\t  gfc_merge_block_scope (&block);\n \n \t  /* Calculate the offset for the temporary.  */\n \t  offset = gfc_index_zero_node;\n@@ -315,7 +321,7 @@ gfc_conv_elemental_dependencies (gfc_se * se, gfc_se * loopse,\n \t  tmp = build_call_expr (gfor_fndecl_in_unpack, 2, parmse.expr, data);\n \t  gfc_add_expr_to_block (&se->post, tmp);\n \n-\t  gfc_add_block_to_block (&se->pre, &parmse.pre);\n+\t  /* parmse.pre is already added above.  */\n \t  gfc_add_block_to_block (&se->post, &parmse.post);\n \t  gfc_add_block_to_block (&se->post, &temp_post);\n \t}"}, {"sha": "e1c767a7e697ae76ac5faaf12b4c05ffbb8bc466", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e5286cbab0f3bf252de42e3fc39b924001d903/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e5286cbab0f3bf252de42e3fc39b924001d903/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79e5286cbab0f3bf252de42e3fc39b924001d903", "patch": "@@ -1,3 +1,10 @@\n+2009-01-27  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/38883\n+\t* gfortran.dg/mvbits_6.f90:  New test.\n+\t* gfortran.dg/mvbits_7.f90:  New test.\n+\t* gfortran.dg/mvbits_8.f90:  New test.\n+\n 2009-01-27  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/38503"}, {"sha": "c8986df21ca1126a22faf81151c3f88065e2c577", "filename": "gcc/testsuite/gfortran.dg/mvbits_6.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e5286cbab0f3bf252de42e3fc39b924001d903/gcc%2Ftestsuite%2Fgfortran.dg%2Fmvbits_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e5286cbab0f3bf252de42e3fc39b924001d903/gcc%2Ftestsuite%2Fgfortran.dg%2Fmvbits_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmvbits_6.f90?ref=79e5286cbab0f3bf252de42e3fc39b924001d903", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do compile }\n+\n+! PR fortran/38883\n+! This ICE'd because the temporary-creation in the MVBITS call was wrong.\n+! This is the original test from the PR, the complicated version.\n+\n+! Contributed by Dick Hendrickson <dick.hendrickson@gmail.com>\n+\n+     module yg0009_stuff\n+\n+      type unseq\n+         integer I\n+      end type\n+\n+      contains\n+\n+      SUBROUTINE YG0009(TDA2L,NF4,NF3,NF1,MF1,MF4,MF3)\n+        TYPE(UNSEQ) TDA2L(NF4,NF3)\n+\n+        CALL MVBITS (TDA2L(NF4:NF1:MF1,NF1:NF3)%I,2, &\n+          4, TDA2L(-MF4:-MF1:-NF1,-MF1:-MF3)%I, 3)\n+\n+      END SUBROUTINE\n+\n+      end module yg0009_stuff\n+\n+      program try_yg0009\n+      use yg0009_stuff\n+      type(unseq)  tda2l(4,3)\n+\n+      call yg0009(tda2l,4,3,1,-1,-4,-3)\n+\n+      end"}, {"sha": "2c7cab8ac24956a4162cb43abf2555586704f38b", "filename": "gcc/testsuite/gfortran.dg/mvbits_7.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e5286cbab0f3bf252de42e3fc39b924001d903/gcc%2Ftestsuite%2Fgfortran.dg%2Fmvbits_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e5286cbab0f3bf252de42e3fc39b924001d903/gcc%2Ftestsuite%2Fgfortran.dg%2Fmvbits_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmvbits_7.f90?ref=79e5286cbab0f3bf252de42e3fc39b924001d903", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do run }\n+\n+! PR fortran/38883\n+! This ICE'd because the temporary-creation in the MVBITS call was wrong.\n+\n+! Contributed by Paul Richard Thomas <paul.richard.thomas@gmail.com>\n+\n+  type t\n+    integer  ::  I\n+    character(9)  :: chr\n+  end type\n+  type(t) :: x(4,3)\n+  type(t) :: y(4,3)\n+  x = reshape ([((t (i*j, \"a\"),i = 1,4), j=1,3)], [4,3])\n+  call foo (x)\n+  y = reshape ([((t (i*j*2, \"a\"),i = 1,4), j=1,3)], [4,3])\n+  call bar(y, 4, 3, 1, -1, -4, -3)\n+  if (any (x%i .ne. y%i)) call abort\n+contains\n+  SUBROUTINE foo (x)\n+    TYPE(t) x(4, 3)      ! No dependency at all\n+    CALL MVBITS (x%i, 0, 6, x%i, 8)\n+    x%i = x%i * 2\n+  END SUBROUTINE\n+  SUBROUTINE bar (x, NF4, NF3, NF1, MF1, MF4, MF3)\n+    TYPE(t) x(NF4, NF3)  ! Dependency through variable indices\n+    CALL MVBITS (x(NF4:NF1:MF1, NF1:NF3)%i, 1, &\n+                 6, x(-MF4:-MF1:-NF1, -MF1:-MF3)%i, 9)\n+  END SUBROUTINE\n+end"}, {"sha": "f69d1e84f9a0d572b8754c65da667e622cf51a2a", "filename": "gcc/testsuite/gfortran.dg/mvbits_8.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e5286cbab0f3bf252de42e3fc39b924001d903/gcc%2Ftestsuite%2Fgfortran.dg%2Fmvbits_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e5286cbab0f3bf252de42e3fc39b924001d903/gcc%2Ftestsuite%2Fgfortran.dg%2Fmvbits_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmvbits_8.f90?ref=79e5286cbab0f3bf252de42e3fc39b924001d903", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+\n+! PR fortran/38883\n+! This ICE'd because the temporary-creation in the MVBITS call was wrong.\n+\n+PROGRAM main\n+  IMPLICIT NONE\n+\n+  TYPE inner\n+    INTEGER :: i\n+    INTEGER :: j\n+  END TYPE inner\n+\n+  TYPE outer\n+    TYPE(inner) :: comp(2)\n+  END TYPE outer\n+\n+  TYPE(outer) :: var\n+\n+  var%comp%i = (/ 1, 2 /)\n+  var%comp%j = (/ 3, 4 /)\n+\n+  CALL foobar (var, 1, 2)\n+\n+  IF (ANY (var%comp%i /= (/ 1, 2 /))) CALL abort ()\n+  IF (ANY (var%comp%j /= (/ 3, 4 /))) CALL abort ()\n+\n+CONTAINS\n+\n+  SUBROUTINE foobar (x, lower, upper)\n+    TYPE(outer), INTENT(INOUT) :: x\n+    INTEGER, INTENT(IN) :: lower, upper\n+    CALL MVBITS (x%comp%i, 1, 2, x%comp(lower:upper)%i, 1)\n+  END SUBROUTINE foobar\n+\n+END PROGRAM main"}]}