{"sha": "4630113714e750b24684b4006ae8d647202b3341", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYzMDExMzcxNGU3NTBiMjQ2ODRiNDAwNmFlOGQ2NDcyMDJiMzM0MQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2012-04-13T14:53:07Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2012-04-13T14:53:07Z"}, "message": "tree-ssa-tail-merge.c (gsi_advance_bw_nondebug_nonlocal): Add parameters vuse and vuse_escaped.\n\n2012-04-13  Tom de Vries  <tom@codesourcery.com>\n\n\t* tree-ssa-tail-merge.c (gsi_advance_bw_nondebug_nonlocal): Add\n\tparameters vuse and vuse_escaped.\n\t(find_duplicate): Init vuse1, vuse2 and vuse_escaped.  Pass to\n\tgsi_advance_bw_nondebug_nonlocal.  Return if vuse_escaped and\n\tvuse1 != vuse2.\n\nFrom-SVN: r186418", "tree": {"sha": "9bc2caf8ed6374d1b3cd7f9a78b67e90e7c35d40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bc2caf8ed6374d1b3cd7f9a78b67e90e7c35d40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4630113714e750b24684b4006ae8d647202b3341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4630113714e750b24684b4006ae8d647202b3341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4630113714e750b24684b4006ae8d647202b3341", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4630113714e750b24684b4006ae8d647202b3341/comments", "author": null, "committer": null, "parents": [{"sha": "95df37bf8bded356f45539ecaa8bff3078d9cf86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95df37bf8bded356f45539ecaa8bff3078d9cf86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95df37bf8bded356f45539ecaa8bff3078d9cf86"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "50849efde06e3a4f7878180d32fedb1e9029f429", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4630113714e750b24684b4006ae8d647202b3341/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4630113714e750b24684b4006ae8d647202b3341/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4630113714e750b24684b4006ae8d647202b3341", "patch": "@@ -1,3 +1,11 @@\n+2012-04-13  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* tree-ssa-tail-merge.c (gsi_advance_bw_nondebug_nonlocal): Add\n+\tparameters vuse and vuse_escaped.\n+\t(find_duplicate): Init vuse1, vuse2 and vuse_escaped.  Pass to\n+\tgsi_advance_bw_nondebug_nonlocal.  Return if vuse_escaped and\n+\tvuse1 != vuse2.\n+\n 2012-04-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52969"}, {"sha": "89abfa020e8797301dc0b15e7b3b23e53e1b52ba", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4630113714e750b24684b4006ae8d647202b3341/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4630113714e750b24684b4006ae8d647202b3341/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=4630113714e750b24684b4006ae8d647202b3341", "patch": "@@ -1123,18 +1123,31 @@ gimple_equal_p (same_succ same_succ, gimple s1, gimple s2)\n     }\n }\n \n-/* Let GSI skip backwards over local defs.  */\n+/* Let GSI skip backwards over local defs.  Return the earliest vuse in VUSE.\n+   Return true in VUSE_ESCAPED if the vuse influenced a SSA_OP_DEF of one of the\n+   processed statements.  */\n \n static void\n-gsi_advance_bw_nondebug_nonlocal (gimple_stmt_iterator *gsi)\n+gsi_advance_bw_nondebug_nonlocal (gimple_stmt_iterator *gsi, tree *vuse,\n+\t\t\t\t  bool *vuse_escaped)\n {\n   gimple stmt;\n+  tree lvuse;\n \n   while (true)\n     {\n       if (gsi_end_p (*gsi))\n \treturn;\n       stmt = gsi_stmt (*gsi);\n+\n+      lvuse = gimple_vuse (stmt);\n+      if (lvuse != NULL_TREE)\n+\t{\n+\t  *vuse = lvuse;\n+\t  if (!ZERO_SSA_OPERANDS (stmt, SSA_OP_DEF))\n+\t    *vuse_escaped = true;\n+\t}\n+\n       if (!(is_gimple_assign (stmt) && local_def (gimple_get_lhs (stmt))\n \t    && !gimple_has_side_effects (stmt)))\n \treturn;\n@@ -1150,9 +1163,11 @@ find_duplicate (same_succ same_succ, basic_block bb1, basic_block bb2)\n {\n   gimple_stmt_iterator gsi1 = gsi_last_nondebug_bb (bb1);\n   gimple_stmt_iterator gsi2 = gsi_last_nondebug_bb (bb2);\n+  tree vuse1 = NULL_TREE, vuse2 = NULL_TREE;\n+  bool vuse_escaped = false;\n \n-  gsi_advance_bw_nondebug_nonlocal (&gsi1);\n-  gsi_advance_bw_nondebug_nonlocal (&gsi2);\n+  gsi_advance_bw_nondebug_nonlocal (&gsi1, &vuse1, &vuse_escaped);\n+  gsi_advance_bw_nondebug_nonlocal (&gsi2, &vuse2, &vuse_escaped);\n \n   while (!gsi_end_p (gsi1) && !gsi_end_p (gsi2))\n     {\n@@ -1161,13 +1176,20 @@ find_duplicate (same_succ same_succ, basic_block bb1, basic_block bb2)\n \n       gsi_prev_nondebug (&gsi1);\n       gsi_prev_nondebug (&gsi2);\n-      gsi_advance_bw_nondebug_nonlocal (&gsi1);\n-      gsi_advance_bw_nondebug_nonlocal (&gsi2);\n+      gsi_advance_bw_nondebug_nonlocal (&gsi1, &vuse1, &vuse_escaped);\n+      gsi_advance_bw_nondebug_nonlocal (&gsi2, &vuse2, &vuse_escaped);\n     }\n \n   if (!(gsi_end_p (gsi1) && gsi_end_p (gsi2)))\n     return;\n \n+  /* If the incoming vuses are not the same, and the vuse escaped into an\n+     SSA_OP_DEF, then merging the 2 blocks will change the value of the def,\n+     which potentially means the semantics of one of the blocks will be changed.\n+     TODO: make this check more precise.  */\n+  if (vuse_escaped && vuse1 != vuse2)\n+    return;\n+\n   if (dump_file)\n     fprintf (dump_file, \"find_duplicates: <bb %d> duplicate of <bb %d>\\n\",\n \t     bb1->index, bb2->index);"}]}