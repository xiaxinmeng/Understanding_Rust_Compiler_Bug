{"sha": "9655d83b750bc6de0074b0501044d4bcb28679d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY1NWQ4M2I3NTBiYzZkZTAwNzRiMDUwMTA0NGQ0YmNiMjg2NzlkOQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-06-10T13:29:34Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-06-10T13:29:34Z"}, "message": "fold-const.c (fold_abs_const): Make extern.\n\n\n\t* fold-const.c (fold_abs_const): Make extern.\n\t* tree.h (fold_abs_const): Prototype here.\n\t* builtins.c (fold_builtin_fabs): New function to transform\n\tfabs, fabsf and fabsl builtins into ABS_EXPR tree nodes.\n\t(fold_builtin_abs): New function to transform abs, labs, llabs\n\tand imaxabs builtins into ABS_EXPR tree nodes.\n\t(expand_builtin): Fall back to a function call for abs, labs,\n\tllabs and imaxabs builtins that survive constant folding.\n\t(fold_builtin_1): Call fold_builtin_fabs for FABS, FABSF and\n\tFABSL, and fold_builtin_abs for ABS, LABS, LLABS and IMAXABS.\n\nFrom-SVN: r82916", "tree": {"sha": "e940d7de6a39821eb5ab7003e89e3a25995283fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e940d7de6a39821eb5ab7003e89e3a25995283fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9655d83b750bc6de0074b0501044d4bcb28679d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9655d83b750bc6de0074b0501044d4bcb28679d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9655d83b750bc6de0074b0501044d4bcb28679d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9655d83b750bc6de0074b0501044d4bcb28679d9/comments", "author": null, "committer": null, "parents": [{"sha": "a7b155a6ad9475549f1c0e32bb7c29dc66567864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7b155a6ad9475549f1c0e32bb7c29dc66567864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7b155a6ad9475549f1c0e32bb7c29dc66567864"}], "stats": {"total": 68, "additions": 56, "deletions": 12}, "files": [{"sha": "712b0064c2c52b7ddb17200ad1176e7ef0d7c545", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9655d83b750bc6de0074b0501044d4bcb28679d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9655d83b750bc6de0074b0501044d4bcb28679d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9655d83b750bc6de0074b0501044d4bcb28679d9", "patch": "@@ -1,3 +1,16 @@\n+2004-06-10  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold_abs_const): Make extern.\n+\t* tree.h (fold_abs_const): Prototype here.\n+\t* builtins.c (fold_builtin_fabs): New function to transform\n+\tfabs, fabsf and fabsl builtins into ABS_EXPR tree nodes.\n+\t(fold_builtin_abs): New function to transform abs, labs, llabs\n+\tand imaxabs builtins into ABS_EXPR tree nodes.\n+\t(expand_builtin): Fall back to a function call for abs, labs,\n+\tllabs and imaxabs builtins that survive constant folding.\n+\t(fold_builtin_1): Call fold_builtin_fabs for FABS, FABSF and\n+\tFABSL, and fold_builtin_abs for ABS, LABS, LLABS and IMAXABS.\n+\n 2004-06-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/ia64/unwind-ia64.c (uw_frame_state_for): Don't assume a"}, {"sha": "793d7bc9208f08f573cd1bbef11be0e8aee97baa", "filename": "gcc/builtins.c", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9655d83b750bc6de0074b0501044d4bcb28679d9/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9655d83b750bc6de0074b0501044d4bcb28679d9/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9655d83b750bc6de0074b0501044d4bcb28679d9", "patch": "@@ -166,6 +166,8 @@ static tree fold_builtin_copysign (tree, tree);\n static tree fold_builtin_isascii (tree);\n static tree fold_builtin_toascii (tree);\n static tree fold_builtin_isdigit (tree);\n+static tree fold_builtin_fabs (tree, tree);\n+static tree fold_builtin_abs (tree, tree);\n \n static tree simplify_builtin_memcmp (tree);\n static tree simplify_builtin_strcmp (tree);\n@@ -5628,13 +5630,6 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \n   switch (fcode)\n     {\n-    case BUILT_IN_ABS:\n-    case BUILT_IN_LABS:\n-    case BUILT_IN_LLABS:\n-    case BUILT_IN_IMAXABS:\n-      /* build_function_call changes these into ABS_EXPR.  */\n-      abort ();\n-\n     case BUILT_IN_FABS:\n     case BUILT_IN_FABSF:\n     case BUILT_IN_FABSL:\n@@ -7587,6 +7582,38 @@ fold_builtin_isdigit (tree arglist)\n     }\n }\n \n+/* Fold a call to fabs, fabsf or fabsl.  */\n+\n+static tree\n+fold_builtin_fabs (tree arglist, tree type)\n+{\n+  tree arg;\n+\n+  if (!validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n+    return 0;\n+\n+  arg = TREE_VALUE (arglist);\n+  if (TREE_CODE (arg) == REAL_CST)\n+    return fold_abs_const (arg, type);\n+  return fold (build1 (ABS_EXPR, type, arg));\n+}\n+\n+/* Fold a call to abs, labs, llabs or imaxabs.  */\n+\n+static tree\n+fold_builtin_abs (tree arglist, tree type)\n+{\n+  tree arg;\n+\n+  if (!validate_arglist (arglist, INTEGER_TYPE, VOID_TYPE))\n+    return 0;\n+\n+  arg = TREE_VALUE (arglist);\n+  if (TREE_CODE (arg) == INTEGER_CST)\n+    return fold_abs_const (arg, type);\n+  return fold (build1 (ABS_EXPR, type, arg));\n+}\n+\n /* Used by constant folding to eliminate some builtin calls early.  EXP is\n    the CALL_EXPR of a call to a builtin function.  */\n \n@@ -7628,9 +7655,13 @@ fold_builtin_1 (tree exp)\n     case BUILT_IN_FABS:\n     case BUILT_IN_FABSF:\n     case BUILT_IN_FABSL:\n-      if (validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n-\treturn fold (build1 (ABS_EXPR, type, TREE_VALUE (arglist)));\n-      break;\n+      return fold_builtin_fabs (arglist, type);\n+\n+    case BUILT_IN_ABS:\n+    case BUILT_IN_LABS:\n+    case BUILT_IN_LLABS:\n+    case BUILT_IN_IMAXABS:\n+      return fold_builtin_abs (arglist, type);\n \n     case BUILT_IN_CABS:\n     case BUILT_IN_CABSF:"}, {"sha": "f5bd659fa3423ba47af394654c8f185acd25a529", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9655d83b750bc6de0074b0501044d4bcb28679d9/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9655d83b750bc6de0074b0501044d4bcb28679d9/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9655d83b750bc6de0074b0501044d4bcb28679d9", "patch": "@@ -135,7 +135,6 @@ static bool reorder_operands_p (tree, tree);\n static bool tree_swap_operands_p (tree, tree, bool);\n \n static tree fold_negate_const (tree, tree);\n-static tree fold_abs_const (tree, tree);\n static tree fold_not_const (tree, tree);\n static tree fold_relational_const (enum tree_code, tree, tree, tree);\n static tree fold_relational_hi_lo (enum tree_code *, const tree,\n@@ -9846,7 +9845,7 @@ fold_negate_const (tree arg0, tree type)\n \n    TYPE is the type of the result.  */\n \n-static tree\n+tree\n fold_abs_const (tree arg0, tree type)\n {\n   tree t = NULL_TREE;"}, {"sha": "6e97babfd6e0306934a0cac6897cb06c39c792d4", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9655d83b750bc6de0074b0501044d4bcb28679d9/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9655d83b750bc6de0074b0501044d4bcb28679d9/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9655d83b750bc6de0074b0501044d4bcb28679d9", "patch": "@@ -3462,6 +3462,7 @@ extern tree fold (tree);\n extern tree fold_initializer (tree);\n extern tree fold_convert (tree, tree);\n extern tree fold_single_bit_test (enum tree_code, tree, tree, tree);\n+extern tree fold_abs_const (tree, tree);\n \n extern int force_fit_type (tree, int);\n extern int add_double (unsigned HOST_WIDE_INT, HOST_WIDE_INT,"}]}