{"sha": "441e96b5bc6736abb50a7f7927b77e4ab5b57daf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQxZTk2YjViYzY3MzZhYmI1MGE3Zjc5MjdiNzdlNGFiNWI1N2RhZg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2005-06-03T21:07:11Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2005-06-03T21:07:11Z"}, "message": "tree-ssa-dom.c (record_edge_info): Use last_basic_block to allocate info array.\n\n\n\t* tree-ssa-dom.c (record_edge_info): Use last_basic_block to\n\tallocate info array.\n\t* tree-vrp.c (extract_range_from_unary_expr): Set resulting\n\trange to varying in cast expressions that change\n\tTYPE_PRECISION.\n\ntestsuite/ChangeLog\n\n\t* gcc.dg/tree-ssa/vrp14.c: New test.\n\nFrom-SVN: r100554", "tree": {"sha": "caa57108bab4889bac26004363221e15a6c72c67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caa57108bab4889bac26004363221e15a6c72c67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/441e96b5bc6736abb50a7f7927b77e4ab5b57daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441e96b5bc6736abb50a7f7927b77e4ab5b57daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/441e96b5bc6736abb50a7f7927b77e4ab5b57daf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441e96b5bc6736abb50a7f7927b77e4ab5b57daf/comments", "author": null, "committer": null, "parents": [{"sha": "658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/658a82f8edacdbe5f49eb4309bf5e2fb3dc9b147"}], "stats": {"total": 74, "additions": 69, "deletions": 5}, "files": [{"sha": "be74bb1b786ce71f34fc5eb1485adafaa20b96eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441e96b5bc6736abb50a7f7927b77e4ab5b57daf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441e96b5bc6736abb50a7f7927b77e4ab5b57daf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=441e96b5bc6736abb50a7f7927b77e4ab5b57daf", "patch": "@@ -1,3 +1,11 @@\n+2005-06-03  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-ssa-dom.c (record_edge_info): Use last_basic_block to\n+\tallocate info array.\n+\t* tree-vrp.c (extract_range_from_unary_expr): Set resulting\n+\trange to varying in cast expressions that change\n+\tTYPE_PRECISION.\n+\n 2005-06-03  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/mips.opt: Add RejectNegative to divide-breaks and"}, {"sha": "3142634db3b88b992271d605b399ab1d425e59bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441e96b5bc6736abb50a7f7927b77e4ab5b57daf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441e96b5bc6736abb50a7f7927b77e4ab5b57daf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=441e96b5bc6736abb50a7f7927b77e4ab5b57daf", "patch": "@@ -1,3 +1,7 @@\n+2005-06-03  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/vrp14.c: New test.\n+\n 2005-06-03  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/21336"}, {"sha": "833a73dcadc3d5ea55884031b1235d3fa6b12934", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp14.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441e96b5bc6736abb50a7f7927b77e4ab5b57daf/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441e96b5bc6736abb50a7f7927b77e4ab5b57daf/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp14.c?ref=441e96b5bc6736abb50a7f7927b77e4ab5b57daf", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+struct tree_decl\n+{\n+  union tree_decl_u1 {\n+    int f;\n+    long i;\n+    struct tree_decl_u1_a {\n+      unsigned int align : 24;\n+      unsigned int off_align : 8;\n+    } a;\n+  } u1;\n+};\n+\n+extern void abort (void);\n+\n+unsigned int\n+assemble_variable (struct tree_decl decl)\n+{\n+  unsigned int align;\n+\n+  align = decl.u1.a.align;\n+\n+  if (align > (1 << ((8 * 4) < 64 ? (8 * 4) - 2 : 62)))\n+    align = (1 << ((8 * 4) < 64 ? (8 * 4) - 2 : 62));\n+\n+  /* VRP should not be propagating 0 to the RHS of this assignment.\n+     But it was erroneously applying a cast operation between types of\n+     different precision.  align is an unsigned int with range [0,\n+     0x4000000] but the .align field holds only 24 bits.  So the cast\n+     was returning a [0, 0] range.  */\n+  decl.u1.a.align = align;\n+\n+  return decl.u1.a.align;\n+}\n+\n+main ()\n+{\n+  struct tree_decl decl;\n+  decl.u1.a.align = 13;\n+  unsigned int x = assemble_variable (decl);\n+  if (x == 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "2bd527a231eb63a3fbad365c9cf3c2aae58b3329", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441e96b5bc6736abb50a7f7927b77e4ab5b57daf/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441e96b5bc6736abb50a7f7927b77e4ab5b57daf/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=441e96b5bc6736abb50a7f7927b77e4ab5b57daf", "patch": "@@ -2422,7 +2422,7 @@ record_edge_info (basic_block bb)\n \t    {\n \t      tree labels = SWITCH_LABELS (stmt);\n \t      int i, n_labels = TREE_VEC_LENGTH (labels);\n-\t      tree *info = xcalloc (n_basic_blocks, sizeof (tree));\n+\t      tree *info = xcalloc (last_basic_block, sizeof (tree));\n \t      edge e;\n \t      edge_iterator ei;\n "}, {"sha": "373e8d9313557481f1726b32e20d8d0940347272", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441e96b5bc6736abb50a7f7927b77e4ab5b57daf/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441e96b5bc6736abb50a7f7927b77e4ab5b57daf/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=441e96b5bc6736abb50a7f7927b77e4ab5b57daf", "patch": "@@ -1295,17 +1295,23 @@ extract_range_from_unary_expr (value_range_t *vr, tree expr)\n     }\n \n   /* Handle unary expressions on integer ranges.  */\n-  if ((code == NOP_EXPR || code == CONVERT_EXPR)\n-      && (TYPE_SIZE (TREE_TYPE (vr0.min)) != TYPE_SIZE (TREE_TYPE (expr))))\n+  if (code == NOP_EXPR || code == CONVERT_EXPR)\n     {\n+      tree inner_type = TREE_TYPE (op0);\n+      tree outer_type = TREE_TYPE (expr);\n+\n       /* When converting types of different sizes, set the result to\n \t VARYING.  Things like sign extensions and precision loss may\n \t change the range.  For instance, if x_3 is of type 'long long\n \t int' and 'y_5 = (unsigned short) x_3', if x_3 is ~[0, 0], it\n \t is impossible to know at compile time whether y_5 will be\n \t ~[0, 0].  */\n-      set_value_range_to_varying (vr);\n-      return;\n+      if (TYPE_SIZE (inner_type) != TYPE_SIZE (outer_type)\n+\t  || TYPE_PRECISION (inner_type) != TYPE_PRECISION (outer_type))\n+\t{\n+\t  set_value_range_to_varying (vr);\n+\t  return;\n+\t}\n     }\n \n   /* Apply the operation to each end of the range and see what we end"}]}