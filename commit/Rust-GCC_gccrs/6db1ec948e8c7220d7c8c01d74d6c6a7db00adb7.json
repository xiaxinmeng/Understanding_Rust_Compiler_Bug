{"sha": "6db1ec948e8c7220d7c8c01d74d6c6a7db00adb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRiMWVjOTQ4ZThjNzIyMGQ3YzhjMDFkNzRkNmM2YTdkYjAwYWRiNw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-11-26T10:00:49Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-11-26T10:00:49Z"}, "message": "[AArch64] [2/4 Fix vtbx1] Handle poly types in the new Simd types infrastructure\n\ngcc/\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_type_qualifiers): Add qualifier_poly.\n\t(aarch64_build_scalar_type): Also build Poly types.\n\t(aarch64_build_vector_type): Likewise.\n\t(aarch64_build_type): Likewise.\n\t(aarch64_build_signed_type): New.\n\t(aarch64_build_unsigned_type): Likewise.\n\t(aarch64_build_poly_type): Likewise.\n\t(aarch64_init_simd_builtins): Also handle Poly types.\n\nFrom-SVN: r205384", "tree": {"sha": "023723cd2f0f6873a76bbdf8dbf4add26c491322", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/023723cd2f0f6873a76bbdf8dbf4add26c491322"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6db1ec948e8c7220d7c8c01d74d6c6a7db00adb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db1ec948e8c7220d7c8c01d74d6c6a7db00adb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6db1ec948e8c7220d7c8c01d74d6c6a7db00adb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db1ec948e8c7220d7c8c01d74d6c6a7db00adb7/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e993fea1ac45e88f113a598956224527bcb41753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e993fea1ac45e88f113a598956224527bcb41753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e993fea1ac45e88f113a598956224527bcb41753"}], "stats": {"total": 125, "additions": 90, "deletions": 35}, "files": [{"sha": "7704433df3fccd33485b19a8bd694479161e9c0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db1ec948e8c7220d7c8c01d74d6c6a7db00adb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db1ec948e8c7220d7c8c01d74d6c6a7db00adb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6db1ec948e8c7220d7c8c01d74d6c6a7db00adb7", "patch": "@@ -1,3 +1,15 @@\n+2013-11-26  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_type_qualifiers): Add qualifier_poly.\n+\t(aarch64_build_scalar_type): Also build Poly types.\n+\t(aarch64_build_vector_type): Likewise.\n+\t(aarch64_build_type): Likewise.\n+\t(aarch64_build_signed_type): New.\n+\t(aarch64_build_unsigned_type): Likewise.\n+\t(aarch64_build_poly_type): Likewise.\n+\t(aarch64_init_simd_builtins): Also handle Poly types.\n+\n 2013-11-26  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c"}, {"sha": "cb80f9a67e4385e0351751bf8c479d74cbf81d5b", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 78, "deletions": 35, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db1ec948e8c7220d7c8c01d74d6c6a7db00adb7/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db1ec948e8c7220d7c8c01d74d6c6a7db00adb7/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=6db1ec948e8c7220d7c8c01d74d6c6a7db00adb7", "patch": "@@ -124,7 +124,9 @@ enum aarch64_type_qualifiers\n   /* qualifier_pointer | qualifier_map_mode  */\n   qualifier_pointer_map_mode = 0x84,\n   /* qualifier_const_pointer | qualifier_map_mode  */\n-  qualifier_const_pointer_map_mode = 0x86\n+  qualifier_const_pointer_map_mode = 0x86,\n+  /* Polynomial types.  */\n+  qualifier_poly = 0x100\n };\n \n typedef struct\n@@ -340,7 +342,9 @@ static GTY(()) tree aarch64_builtin_decls[AARCH64_BUILTIN_MAX];\n /* Return a tree for a signed or unsigned argument of either\n    the mode specified by MODE, or the inner mode of MODE.  */\n tree\n-aarch64_build_scalar_type (enum machine_mode mode, bool unsigned_p)\n+aarch64_build_scalar_type (enum machine_mode mode,\n+\t\t\t   bool unsigned_p,\n+\t\t\t   bool poly_p)\n {\n #undef INT_TYPES\n #define INT_TYPES \\\n@@ -357,6 +361,7 @@ aarch64_build_scalar_type (enum machine_mode mode, bool unsigned_p)\n /* Statically declare all the possible types we might need.  */\n #undef AARCH64_TYPE_BUILDER\n #define AARCH64_TYPE_BUILDER(X) \\\n+  static tree X##_aarch64_type_node_p = NULL; \\\n   static tree X##_aarch64_type_node_s = NULL; \\\n   static tree X##_aarch64_type_node_u = NULL;\n \n@@ -377,6 +382,11 @@ aarch64_build_scalar_type (enum machine_mode mode, bool unsigned_p)\n \t      ? X##_aarch64_type_node_u \\\n \t      : X##_aarch64_type_node_u \\\n \t\t  = make_unsigned_type (GET_MODE_PRECISION (mode))); \\\n+    else if (poly_p) \\\n+       return (X##_aarch64_type_node_p \\\n+\t      ? X##_aarch64_type_node_p \\\n+\t      : X##_aarch64_type_node_p \\\n+\t\t  = make_unsigned_type (GET_MODE_PRECISION (mode))); \\\n     else \\\n        return (X##_aarch64_type_node_s \\\n \t      ? X##_aarch64_type_node_s \\\n@@ -411,7 +421,9 @@ aarch64_build_scalar_type (enum machine_mode mode, bool unsigned_p)\n }\n \n tree\n-aarch64_build_vector_type (enum machine_mode mode, bool unsigned_p)\n+aarch64_build_vector_type (enum machine_mode mode,\n+\t\t\t   bool unsigned_p,\n+\t\t\t   bool poly_p)\n {\n   tree eltype;\n \n@@ -431,7 +443,8 @@ aarch64_build_vector_type (enum machine_mode mode, bool unsigned_p)\n #undef AARCH64_TYPE_BUILDER\n #define AARCH64_TYPE_BUILDER(X) \\\n   static tree X##_aarch64_type_node_s = NULL; \\\n-  static tree X##_aarch64_type_node_u = NULL;\n+  static tree X##_aarch64_type_node_u = NULL; \\\n+  static tree X##_aarch64_type_node_p = NULL;\n \n   VECTOR_TYPES\n \n@@ -446,66 +459,90 @@ aarch64_build_vector_type (enum machine_mode mode, bool unsigned_p)\n \t     : X##_aarch64_type_node_u \\\n \t\t= build_vector_type_for_mode (aarch64_build_scalar_type \\\n \t\t\t\t\t\t(GET_MODE_INNER (mode), \\\n-\t\t\t\t\t\t unsigned_p), mode); \\\n+\t\t\t\t\t\t unsigned_p, poly_p), mode); \\\n+    else if (poly_p) \\\n+       return X##_aarch64_type_node_p \\\n+\t      ? X##_aarch64_type_node_p \\\n+\t      : X##_aarch64_type_node_p \\\n+\t\t= build_vector_type_for_mode (aarch64_build_scalar_type \\\n+\t\t\t\t\t\t(GET_MODE_INNER (mode), \\\n+\t\t\t\t\t\t unsigned_p, poly_p), mode); \\\n     else \\\n        return X##_aarch64_type_node_s \\\n \t      ? X##_aarch64_type_node_s \\\n \t      : X##_aarch64_type_node_s \\\n \t\t= build_vector_type_for_mode (aarch64_build_scalar_type \\\n \t\t\t\t\t\t(GET_MODE_INNER (mode), \\\n-\t\t\t\t\t\t unsigned_p), mode); \\\n+\t\t\t\t\t\t unsigned_p, poly_p), mode); \\\n     break;\n \n   switch (mode)\n     {\n       default:\n-\teltype = aarch64_build_scalar_type (GET_MODE_INNER (mode), unsigned_p);\n+\teltype = aarch64_build_scalar_type (GET_MODE_INNER (mode),\n+\t\t\t\t\t    unsigned_p, poly_p);\n \treturn build_vector_type_for_mode (eltype, mode);\n \tbreak;\n       VECTOR_TYPES\n    }\n }\n \n tree\n-aarch64_build_type (enum machine_mode mode, bool unsigned_p)\n+aarch64_build_type (enum machine_mode mode, bool unsigned_p, bool poly_p)\n {\n   if (VECTOR_MODE_P (mode))\n-    return aarch64_build_vector_type (mode, unsigned_p);\n+    return aarch64_build_vector_type (mode, unsigned_p, poly_p);\n   else\n-    return aarch64_build_scalar_type (mode, unsigned_p);\n+    return aarch64_build_scalar_type (mode, unsigned_p, poly_p);\n+}\n+\n+tree\n+aarch64_build_signed_type (enum machine_mode mode)\n+{\n+  return aarch64_build_type (mode, false, false);\n+}\n+\n+tree\n+aarch64_build_unsigned_type (enum machine_mode mode)\n+{\n+  return aarch64_build_type (mode, true, false);\n+}\n+\n+tree\n+aarch64_build_poly_type (enum machine_mode mode)\n+{\n+  return aarch64_build_type (mode, false, true);\n }\n \n static void\n aarch64_init_simd_builtins (void)\n {\n   unsigned int i, fcode = AARCH64_SIMD_BUILTIN_BASE + 1;\n \n-  /* In order that 'poly' types mangle correctly they must not share\n-     a base tree with the other scalar types, thus we must generate them\n-     as a special case.  */\n-  tree aarch64_simd_polyQI_type_node =\n-    make_signed_type (GET_MODE_PRECISION (QImode));\n-  tree aarch64_simd_polyHI_type_node =\n-    make_signed_type (GET_MODE_PRECISION (HImode));\n-\n-  /* Scalar type nodes.  */\n-  tree aarch64_simd_intQI_type_node = aarch64_build_type (QImode, false);\n-  tree aarch64_simd_intHI_type_node = aarch64_build_type (HImode, false);\n-  tree aarch64_simd_intSI_type_node = aarch64_build_type (SImode, false);\n-  tree aarch64_simd_intDI_type_node = aarch64_build_type (DImode, false);\n-  tree aarch64_simd_intTI_type_node = aarch64_build_type (TImode, false);\n-  tree aarch64_simd_intEI_type_node = aarch64_build_type (EImode, false);\n-  tree aarch64_simd_intOI_type_node = aarch64_build_type (OImode, false);\n-  tree aarch64_simd_intCI_type_node = aarch64_build_type (CImode, false);\n-  tree aarch64_simd_intXI_type_node = aarch64_build_type (XImode, false);\n-  tree aarch64_simd_intUQI_type_node = aarch64_build_type (QImode, true);\n-  tree aarch64_simd_intUHI_type_node = aarch64_build_type (HImode, true);\n-  tree aarch64_simd_intUSI_type_node = aarch64_build_type (SImode, true);\n-  tree aarch64_simd_intUDI_type_node = aarch64_build_type (DImode, true);\n+  /* Signed scalar type nodes.  */\n+  tree aarch64_simd_intQI_type_node = aarch64_build_signed_type (QImode);\n+  tree aarch64_simd_intHI_type_node = aarch64_build_signed_type (HImode);\n+  tree aarch64_simd_intSI_type_node = aarch64_build_signed_type (SImode);\n+  tree aarch64_simd_intDI_type_node = aarch64_build_signed_type (DImode);\n+  tree aarch64_simd_intTI_type_node = aarch64_build_signed_type (TImode);\n+  tree aarch64_simd_intEI_type_node = aarch64_build_signed_type (EImode);\n+  tree aarch64_simd_intOI_type_node = aarch64_build_signed_type (OImode);\n+  tree aarch64_simd_intCI_type_node = aarch64_build_signed_type (CImode);\n+  tree aarch64_simd_intXI_type_node = aarch64_build_signed_type (XImode);\n+\n+  /* Unsigned scalar type nodes.  */\n+  tree aarch64_simd_intUQI_type_node = aarch64_build_unsigned_type (QImode);\n+  tree aarch64_simd_intUHI_type_node = aarch64_build_unsigned_type (HImode);\n+  tree aarch64_simd_intUSI_type_node = aarch64_build_unsigned_type (SImode);\n+  tree aarch64_simd_intUDI_type_node = aarch64_build_unsigned_type (DImode);\n+\n+  /* Poly scalar type nodes.  */\n+  tree aarch64_simd_polyQI_type_node = aarch64_build_poly_type (QImode);\n+  tree aarch64_simd_polyHI_type_node = aarch64_build_poly_type (HImode);\n \n   /* Float type nodes.  */\n-  tree aarch64_simd_float_type_node = aarch64_build_type (SFmode, false);\n-  tree aarch64_simd_double_type_node = aarch64_build_type (DFmode, false);\n+  tree aarch64_simd_float_type_node = aarch64_build_signed_type (SFmode);\n+  tree aarch64_simd_double_type_node = aarch64_build_signed_type (DFmode);\n \n   /* Define typedefs which exactly correspond to the modes we are basing vector\n      types on.  If you change these names you'll need to change\n@@ -603,6 +640,11 @@ aarch64_init_simd_builtins (void)\n \t      type_signature[arg_num] = 'u';\n \t      print_type_signature_p = true;\n \t    }\n+\t  else if (qualifiers & qualifier_poly)\n+\t    {\n+\t      type_signature[arg_num] = 'p';\n+\t      print_type_signature_p = true;\n+\t    }\n \t  else\n \t    type_signature[arg_num] = 's';\n \n@@ -621,7 +663,8 @@ aarch64_init_simd_builtins (void)\n \t    op_mode = GET_MODE_INNER (op_mode);\n \n \t  eltype = aarch64_build_type (op_mode,\n-\t\t\t\t       qualifiers & qualifier_unsigned);\n+\t\t\t\t       qualifiers & qualifier_unsigned,\n+\t\t\t\t       qualifiers & qualifier_poly);\n \n \t  /* Add qualifiers.  */\n \t  if (qualifiers & qualifier_const)"}]}