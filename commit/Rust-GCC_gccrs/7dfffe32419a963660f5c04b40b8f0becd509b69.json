{"sha": "7dfffe32419a963660f5c04b40b8f0becd509b69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RmZmZlMzI0MTlhOTYzNjYwZjVjMDRiNDBiOGYwYmVjZDUwOWI2OQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-22T16:00:20Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-22T16:05:20Z"}, "message": "c++: fix injected friend of template class\n\nIn working on fixing hiddenness, I discovered some suspicious code in\ntemplate instantiation.  I suspect it dates from when we didn't do the\nhidden friend injection thing at all.  The xreftag finds the same\nclass, but makes it visible to name lookup.  Which is wrong.\nhurrah, fixing a bug by deleting code!\n\n\tgcc/cp/\n\t* pt.c (instantiate_class_template_1): Do not repush and unhide\n\tinjected friend.\n\tgcc/testsuite/\n\t* g++.old-deja/g++.pt/friend34.C: Check injected friend is still\n\tinvisible.", "tree": {"sha": "e5233181fc5ad8f5213a171fda2bae5be6dd459e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5233181fc5ad8f5213a171fda2bae5be6dd459e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dfffe32419a963660f5c04b40b8f0becd509b69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dfffe32419a963660f5c04b40b8f0becd509b69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dfffe32419a963660f5c04b40b8f0becd509b69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dfffe32419a963660f5c04b40b8f0becd509b69/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "160061ac10f9143d9698daac5f7e46b5a615825c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/160061ac10f9143d9698daac5f7e46b5a615825c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/160061ac10f9143d9698daac5f7e46b5a615825c"}], "stats": {"total": 24, "additions": 4, "deletions": 20}, "files": [{"sha": "44ca14afc4e50a790d51ffd797e541c0b6af0295", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dfffe32419a963660f5c04b40b8f0becd509b69/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dfffe32419a963660f5c04b40b8f0becd509b69/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7dfffe32419a963660f5c04b40b8f0becd509b69", "patch": "@@ -12030,25 +12030,6 @@ instantiate_class_template_1 (tree type)\n \t\t    adjust_processing_template_decl = true;\n \t\t  --processing_template_decl;\n \t\t}\n-\t      else if (TREE_CODE (friend_type) != BOUND_TEMPLATE_TEMPLATE_PARM\n-\t\t       && !CLASSTYPE_USE_TEMPLATE (friend_type)\n-\t\t       && TYPE_HIDDEN_P (friend_type))\n-\t\t{\n-\t\t  /* friend class C;\n-\n-\t\t     where C hasn't been declared yet.  Let's lookup name\n-\t\t     from namespace scope directly, bypassing any name that\n-\t\t     come from dependent base class.  */\n-\t\t  tree ns = decl_namespace_context (TYPE_MAIN_DECL (friend_type));\n-\n-\t\t  /* The call to xref_tag_from_type does injection for friend\n-\t\t     classes.  */\n-\t\t  push_nested_namespace (ns);\n-\t\t  friend_type =\n-\t\t    xref_tag_from_type (friend_type, NULL_TREE,\n-\t\t\t\t\t/*tag_scope=*/ts_current);\n-\t\t  pop_nested_namespace (ns);\n-\t\t}\n \t      else if (uses_template_parms (friend_type))\n \t\t/* friend class C<T>;  */\n \t\tfriend_type = tsubst (friend_type, args,"}, {"sha": "dcd6df0ce553b3f129c2f2fc2cecc5bb1d555696", "filename": "gcc/testsuite/g++.old-deja/g++.pt/friend34.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dfffe32419a963660f5c04b40b8f0becd509b69/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dfffe32419a963660f5c04b40b8f0becd509b69/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend34.C?ref=7dfffe32419a963660f5c04b40b8f0becd509b69", "patch": "@@ -6,9 +6,12 @@\n template <typename T = void>\n class bar {\n public:\n-  friend class foo; // this is not bar::foo, it forward-declares ::foo\n+  friend class foo; // this is not bar::foo, it injects hidden ::foo\n   class foo {};\n   bar() { foo(); } // but this should refer to bar::foo\n };\n \n bar<> baz;\n+\n+// We still have not made foo visible.\n+foo *b;  // { dg-error \"does not name a type\" }"}]}