{"sha": "d41049119d659d066a7d7479fab5af84aef471be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQxMDQ5MTE5ZDY1OWQwNjZhN2Q3NDc5ZmFiNWFmODRhZWY0NzFiZQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@st.com", "date": "2019-09-10T08:06:52Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2019-09-10T08:06:52Z"}, "message": "[ARM/FDPIC v6 18/24] [ARM][testsuite] FDPIC: Enable tests on pie_enabled targets\n\nSome tests have the \"nonpic\" guard, but pass on\narm*-*-uclinuxfdpiceabi because it is in PIE mode by default. Rather\nthan adding this target to all these tests, add the \"pie_enabled\"\neffective target.\n\n2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n\n\tgcc/testsuite/\n\t* g++.dg/cpp0x/noexcept03.C: Add pie_enabled.\n\t* g++.dg/ipa/devirt-c-7.C: Likewise.\n\t* g++.dg/ipa/ivinline-1.C: Likewise.\n\t* g++.dg/ipa/ivinline-2.C: Likewise.\n\t* g++.dg/ipa/ivinline-3.C: Likewise.\n\t* g++.dg/ipa/ivinline-4.C: Likewise.\n\t* g++.dg/ipa/ivinline-5.C: Likewise.\n\t* g++.dg/ipa/ivinline-7.C: Likewise.\n\t* g++.dg/ipa/ivinline-8.C: Likewise.\n\t* g++.dg/ipa/ivinline-9.C: Likewise.\n\t* g++.dg/tls/pr79288.C: Likewise.\n\t* gcc.dg/addr_equal-1.c: Likewise.\n\t* gcc.dg/const-1.c: Likewise.\n\t* gcc.dg/ipa/pure-const-1.c: Likewise.\n\t* gcc.dg/noreturn-8.c: Likewise.\n\t* gcc.dg/pr33826.c: Likewise.\n\t* gcc.dg/torture/ipa-pta-1.c: Likewise.\n\t* gcc.dg/tree-ssa/alias-2.c: Likewise.\n\t* gcc.dg/tree-ssa/ipa-split-5.c: Likewise.\n\t* gcc.dg/tree-ssa/loadpre6.c: Likewise.\n\t* gcc.dg/uninit-19.c: Likewise.\n\nFrom-SVN: r275580", "tree": {"sha": "df9f489e5cb292da8951610fa99ec2a92b9c0f36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df9f489e5cb292da8951610fa99ec2a92b9c0f36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d41049119d659d066a7d7479fab5af84aef471be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d41049119d659d066a7d7479fab5af84aef471be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d41049119d659d066a7d7479fab5af84aef471be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d41049119d659d066a7d7479fab5af84aef471be/comments", "author": null, "committer": null, "parents": [{"sha": "e8977296e13df4062e9fa163ca44f961c05561d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8977296e13df4062e9fa163ca44f961c05561d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8977296e13df4062e9fa163ca44f961c05561d6"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "e2e2b69ccd80f41f7c44372ce677ac193b71590e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,3 +1,27 @@\n+2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n+\n+\t* g++.dg/cpp0x/noexcept03.C: Add pie_enabled.\n+\t* g++.dg/ipa/devirt-c-7.C: Likewise.\n+\t* g++.dg/ipa/ivinline-1.C: Likewise.\n+\t* g++.dg/ipa/ivinline-2.C: Likewise.\n+\t* g++.dg/ipa/ivinline-3.C: Likewise.\n+\t* g++.dg/ipa/ivinline-4.C: Likewise.\n+\t* g++.dg/ipa/ivinline-5.C: Likewise.\n+\t* g++.dg/ipa/ivinline-7.C: Likewise.\n+\t* g++.dg/ipa/ivinline-8.C: Likewise.\n+\t* g++.dg/ipa/ivinline-9.C: Likewise.\n+\t* g++.dg/tls/pr79288.C: Likewise.\n+\t* gcc.dg/addr_equal-1.c: Likewise.\n+\t* gcc.dg/const-1.c: Likewise.\n+\t* gcc.dg/ipa/pure-const-1.c: Likewise.\n+\t* gcc.dg/noreturn-8.c: Likewise.\n+\t* gcc.dg/pr33826.c: Likewise.\n+\t* gcc.dg/torture/ipa-pta-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/alias-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/ipa-split-5.c: Likewise.\n+\t* gcc.dg/tree-ssa/loadpre6.c: Likewise.\n+\t* gcc.dg/uninit-19.c: Likewise.\n+\n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n \n \t* g++.dg/abi/forced.C: Add *-*-uclinux*."}, {"sha": "906a44da45772f5625ed34652fefa175098f2245", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept03.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept03.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept03.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept03.C?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,6 +1,6 @@\n // Runtime test for noexcept-specification.\n // { dg-options \"-Wnoexcept\" }\n-// { dg-do run { target nonpic } }\n+// { dg-do run { target { nonpic || pie_enabled } } }\n // { dg-require-effective-target c++11 }\n \n #include <exception>"}, {"sha": "efb65c2ece326a8380408414d998a35c971cd316", "filename": "gcc/testsuite/g++.dg/ipa/devirt-c-7.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-c-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-c-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-c-7.C?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,7 +1,6 @@\n /* Verify that ipa-cp will not get confused by placement new constructing an\n    object within another one when looking for dynamic type change .  */\n-/* { dg-do run } */\n-/* { dg-require-effective-target nonpic } */\n+/* { dg-do run { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-O3 -Wno-attributes\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "2d988bc6d55ea374f9f8ee8007eb4be79a073fc8", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-1.C?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,6 +1,6 @@\n /* Verify that simple virtual calls are inlined even without early\n    inlining.  */\n-/* { dg-do run { target nonpic } } */\n+/* { dg-do run { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining -fno-ipa-cp\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "d9786386f637522cc0ec45d8203e5555655c8447", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-2.C?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,6 +1,6 @@\n /* Verify that simple virtual calls using this pointer are inlined\n    even without early inlining..  */\n-/* { dg-do run { target nonpic } } */\n+/* { dg-do run { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining -fno-ipa-cp\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "f756a16bae99eb0845f77dba43f096f0a63e904e", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-3.C?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,6 +1,6 @@\n /* Verify that simple virtual calls on an object refrence are inlined\n    even without early inlining.  */\n-/* { dg-do run { target nonpic } } */\n+/* { dg-do run { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining -fno-ipa-cp\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "5fbd3ef78589943c2a76319bcc4c427b60823566", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-4.C?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,7 +1,7 @@\n /* Verify that simple virtual calls are inlined even without early\n    inlining, even when a typecast to an ancestor is involved along the\n    way.  */\n-/* { dg-do run { target nonpic } } */\n+/* { dg-do run { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining -fno-ipa-cp\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "6c19907686e644c24bedf24018fe775edc34af62", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-5.C?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,6 +1,6 @@\n /* Verify that virtual call inlining does not pick a wrong method when\n    there is a user defined ancestor in an object.  */\n-/* { dg-do run { target nonpic } } */\n+/* { dg-do run { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining -fno-ipa-cp\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "fd6aba60c32490932da8a686906d7034bf1104c4", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-7.C?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,7 +1,7 @@\n /* Verify that simple virtual calls are inlined even without early\n    inlining, even when a typecast to an ancestor is involved along the\n    way and that ancestor is not the first one with virtual functions.  */\n-/* { dg-do run { target nonpic } } */\n+/* { dg-do run { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining -fno-ipa-cp\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "bc81abfe3474744efe46a1c05f61825e61d7a2f4", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-8.C?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,6 +1,6 @@\n /* Verify that virtual calls are inlined (ithout early inlining) even\n    when their caller is itself indirectly inlined.  */\n-/* { dg-do run { target nonpic } } */\n+/* { dg-do run { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining -fno-ipa-cp\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "0917f15872c92496e7fe3194c7159fb034d6f8f8", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-9.C?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -2,7 +2,7 @@\n    inlining, even when a typecast to an ancestor is involved along the\n    way and that ancestor itself has an ancestor wich is not the\n    primary base class.  */\n-/* { dg-do run { target nonpic } } */\n+/* { dg-do run { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining -fno-ipa-cp\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "da6751f5149d7b0dfd2cc03e3332e9ad0aba9206", "filename": "gcc/testsuite/g++.dg/tls/pr79288.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fpr79288.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fpr79288.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fpr79288.C?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,5 +1,5 @@\n // PR c++/79288\n-// { dg-do compile { target nonpic } }\n+// { dg-do compile { target { nonpic || pie_enabled } } }\n // { dg-require-effective-target tls }\n // { dg-options \"-O2\" }\n // { dg-final { scan-assembler-not \"@tpoff\" { target i?86-*-* x86_64-*-* } } }"}, {"sha": "35fa0102e30637ec9f2d5cd13179a9ffe2a13abb", "filename": "gcc/testsuite/gcc.dg/addr_equal-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Faddr_equal-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Faddr_equal-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faddr_equal-1.c?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,5 +1,4 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target nonpic } */\n+/* { dg-do run { target { nonpic || pie_enabled } } } */\n /* { dg-require-weak \"\" } */\n /* { dg-require-alias \"\" } */\n /* { dg-options \"-O2 -fdelete-null-pointer-checks\" } */"}, {"sha": "5c2d49d8700e18dd290fac62162ba3851a95526c", "filename": "gcc/testsuite/gcc.dg/const-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-1.c?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target nonpic } } */\n+/* { dg-do compile { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-O2 -Wsuggest-attribute=const -fno-finite-loops\" } */\n \n extern int extern_const(int a) __attribute__ ((const));"}, {"sha": "dd58457b6292aa73604e3c231da8bd05ba9a3490", "filename": "gcc/testsuite/gcc.dg/ipa/pure-const-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpure-const-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpure-const-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpure-const-1.c?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target nonpic } } */\n+/* { dg-do compile { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-O3 -fdump-tree-local-pure-const1 -fdump-ipa-pure-const -fdump-tree-optimized -fno-early-inlining -fgnu89-inline\" } */\n void abort (void);\n int error_code;"}, {"sha": "ce41cabfa5151f83948f6122866abe7bd17ecd6b", "filename": "gcc/testsuite/gcc.dg/noreturn-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-8.c?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run { target nonpic } } */\n+/* { dg-do run { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-O2\" } */\n void exit (int);\n void noreturn_autodetection_failed ();"}, {"sha": "d2227743a943e772fdde406ee8f608480da90b49", "filename": "gcc/testsuite/gcc.dg/pr33826.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33826.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33826.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33826.c?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,8 +1,7 @@\n /* Regression test for PR middle-end/33826 */\n /* Verify that recursive functions cannot be pure or const.  */\n \n-/* { dg-do compile } */\n-/* { dg-require-effective-target nonpic } */\n+/* { dg-do compile { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-O1 -fdump-tree-local-pure-const1 -fdump-ipa-pure-const\" } */\n \n int recurse1 (int);"}, {"sha": "30156a3b06d6fe008287df8fa7a0c7e5e17f9b0c", "filename": "gcc/testsuite/gcc.dg/torture/ipa-pta-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fipa-pta-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fipa-pta-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fipa-pta-1.c?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { nonpic } } } */\n+/* { dg-do compile { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-fipa-pta -fdump-ipa-pta2 -fno-ipa-icf\" } */\n /* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-fno-fat-lto-objects\" } { \"\" } } */\n "}, {"sha": "f9d2dd4915fd9a7805ed09109074f2249ce22677", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-2.c?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { nonpic } } } */\n+/* { dg-do compile { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-O2 -fdump-tree-optimized\" } */\n static int a;\n int f;"}, {"sha": "3b5a94f8170ebac491e8b1e98a34cf1269ef9053", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ipa-split-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-split-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-split-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-split-5.c?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target nonpic } } */\n+/* { dg-do compile { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-O3 -fdump-tree-fnsplit -fdump-tree-optimized --param=builtin-expect-probability=100\" } */\n \n struct a {int a,b;};"}, {"sha": "b4e9296ced8e34885742d12fb16a6f99d0d00439", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loadpre6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41049119d659d066a7d7479fab5af84aef471be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre6.c?ref=d41049119d659d066a7d7479fab5af84aef471be", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target nonpic } } */\n+/* { dg-do compile { target { nonpic || pie_enabled } } } */\n /* { dg-options \"-O2 -fdump-tree-pre-stats -fdump-tree-fre1\" } */\n #include <stddef.h>\n "}]}