{"sha": "8c14315a0de2a70121941f646942a476767fad4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMxNDMxNWEwZGUyYTcwMTIxOTQxZjY0Njk0MmE0NzY3NjdmYWQ0ZQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2015-10-26T10:24:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T10:24:05Z"}, "message": "sem_ch12.adb (Analyze_Formal_Package_Declaration): Code clean up.\n\n\n2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Formal_Package_Declaration): Code clean up.\n\t* sem_ch13.adb (Check_Inherited_Indexing): New inner procedure\n\tof Check_Indexing_Functions, to verify that a derived type with an\n\tIndexing aspect is not inheriting such an aspect from an ancestor.\n\t(Check_Indexing_Functions): Call Check_Inherited_Indexing within\n\tan instance.\n\nFrom-SVN: r229316", "tree": {"sha": "3a2e33ee6564818115b96ca0643b1f32272c7793", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a2e33ee6564818115b96ca0643b1f32272c7793"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c14315a0de2a70121941f646942a476767fad4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c14315a0de2a70121941f646942a476767fad4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c14315a0de2a70121941f646942a476767fad4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c14315a0de2a70121941f646942a476767fad4e/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "013a83cc0252d9cc8cce994000d7a44d8e40555b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/013a83cc0252d9cc8cce994000d7a44d8e40555b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/013a83cc0252d9cc8cce994000d7a44d8e40555b"}], "stats": {"total": 90, "additions": 55, "deletions": 35}, "files": [{"sha": "d0f3e5f8dac7b762c61824ae22e533bb8e9f4625", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c14315a0de2a70121941f646942a476767fad4e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c14315a0de2a70121941f646942a476767fad4e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8c14315a0de2a70121941f646942a476767fad4e", "patch": "@@ -1,3 +1,12 @@\n+2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Formal_Package_Declaration): Code clean up.\n+\t* sem_ch13.adb (Check_Inherited_Indexing): New inner procedure\n+\tof Check_Indexing_Functions, to verify that a derived type with an\n+\tIndexing aspect is not inheriting such an aspect from an ancestor.\n+\t(Check_Indexing_Functions): Call Check_Inherited_Indexing within\n+\tan instance.\n+\n 2015-10-26  Gary Dismukes  <dismukes@adacore.com>\n \n \t* a-reatim.adb, contracts.adb, contracts.ads: Minor reformatting and"}, {"sha": "7d52d2e44ae9f124022c281b98753b3c1210e183", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c14315a0de2a70121941f646942a476767fad4e/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c14315a0de2a70121941f646942a476767fad4e/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=8c14315a0de2a70121941f646942a476767fad4e", "patch": "@@ -2587,7 +2587,6 @@ package body Sem_Ch12 is\n         or else Nkind (First (Generic_Associations (N))) = N_Others_Choice\n       then\n          Associations := False;\n-         Set_Box_Present (N);\n       end if;\n \n       --  If there are no generic associations, the generic parameters appear"}, {"sha": "fea90d11d64f4b6cd8994605d5aaca9d2fe3da27", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 46, "deletions": 34, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c14315a0de2a70121941f646942a476767fad4e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c14315a0de2a70121941f646942a476767fad4e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=8c14315a0de2a70121941f646942a476767fad4e", "patch": "@@ -3971,6 +3971,10 @@ package body Sem_Ch13 is\n       procedure Check_Indexing_Functions is\n          Indexing_Found : Boolean := False;\n \n+         procedure Check_Inherited_Indexing;\n+         --  For a derived type, check that no indexing aspect is specified\n+         --  for the type if it is also inherited\n+\n          procedure Check_One_Function (Subp : Entity_Id);\n          --  Check one possible interpretation. Sets Indexing_Found True if a\n          --  legal indexing function is found.\n@@ -3979,6 +3983,46 @@ package body Sem_Ch13 is\n          --  Diagnose illegal indexing function if not overloaded. In the\n          --  overloaded case indicate that no legal interpretation  exists.\n \n+         ------------------------------\n+         -- Check_Inherited_Indexing --\n+         ------------------------------\n+\n+         procedure Check_Inherited_Indexing is\n+            Inherited : Node_Id;\n+\n+         begin\n+            if Attr = Name_Constant_Indexing then\n+               Inherited :=\n+                 Find_Aspect (Etype (Ent), Aspect_Constant_Indexing);\n+            else pragma Assert (Attr = Name_Variable_Indexing);\n+               Inherited :=\n+                  Find_Aspect (Etype (Ent), Aspect_Variable_Indexing);\n+            end if;\n+\n+            if Present (Inherited) then\n+               if Debug_Flag_Dot_XX then\n+                  null;\n+\n+               --  OK if current attribute_definition_clause is expansion\n+               --  of inherited aspect.\n+\n+               elsif Aspect_Rep_Item (Inherited) = N then\n+                  null;\n+\n+               --  Indicate the operation that must be overridden, rather\n+               --  than redefining the indexing aspect\n+\n+               else\n+                  Illegal_Indexing\n+                    (\"indexing function already inherited \"\n+                     & \"from parent type\");\n+                  Error_Msg_NE\n+                    (\"!override & instead\",\n+                     N, Entity (Expression (Inherited)));\n+               end if;\n+            end if;\n+         end Check_Inherited_Indexing;\n+\n          ------------------------\n          -- Check_One_Function --\n          ------------------------\n@@ -4013,40 +4057,8 @@ package body Sem_Ch13 is\n                  (\"indexing function must have at least two parameters\");\n                return;\n \n-            --  For a derived type, check that no indexing aspect is specified\n-            --  for the type if it is also inherited\n-\n             elsif Is_Derived_Type (Ent) then\n-               declare\n-                  Inherited : Node_Id;\n-\n-               begin\n-                  if Attr = Name_Constant_Indexing then\n-                     Inherited :=\n-                       Find_Aspect (Etype (Ent), Aspect_Constant_Indexing);\n-                  else pragma Assert (Attr = Name_Variable_Indexing);\n-                     Inherited :=\n-                        Find_Aspect (Etype (Ent), Aspect_Variable_Indexing);\n-                  end if;\n-\n-                  if Present (Inherited) then\n-                     if Debug_Flag_Dot_XX then\n-                        null;\n-\n-                     --  Indicate the operation that must be overridden, rather\n-                     --  than redefining the indexing aspect\n-\n-                     else\n-                        Illegal_Indexing\n-                          (\"indexing function already inherited \"\n-                           & \"from parent type\");\n-                        Error_Msg_NE\n-                          (\"!override & instead\",\n-                           N, Entity (Expression (Inherited)));\n-                        return;\n-                     end if;\n-                  end if;\n-               end;\n+               Check_Inherited_Indexing;\n             end if;\n \n             if not Check_Primitive_Function (Subp) then\n@@ -4165,7 +4177,7 @@ package body Sem_Ch13 is\n \n       begin\n          if In_Instance then\n-            return;\n+            Check_Inherited_Indexing;\n          end if;\n \n          Analyze (Expr);"}]}