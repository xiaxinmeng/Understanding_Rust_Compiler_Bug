{"sha": "9752c4ad248eb383f72f9bd354af4c1890f1f1a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc1MmM0YWQyNDhlYjM4M2Y3MmY5YmQzNTRhZjRjMTg5MGYxZjFhMw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2009-03-31T03:11:34Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2009-03-31T03:11:34Z"}, "message": "* doc/invoke.texi (RS/6000 and PowerPC Options):Document mtls-markers.\n\n\t* configure.ac (HAVE_AS_TLS_MARKERS): New gas feature check.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* config/rs6000/rs6000.opt (mtls-markers): Add.\n\t* config/rs6000/rs6000.h (TARGET_TLS_MARKERS): Define.\n\t* config/rs6000/rs6000.md (tls_gd_aix, tls_gd_sysv): Add splitter.\n\t(tls_ld_aix, tls_ld_sysv): Likewise.\n\t(tls_gd, tls_gd_call_aix, tls_gd_call_sysv): New insns.\n\t(tls_ld, tls_ld_call_aix, tls_ld_call_sysv): Likewise.\n\nFrom-SVN: r145330", "tree": {"sha": "e40cb055451edf78dd0f574e269ceae291ee73bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e40cb055451edf78dd0f574e269ceae291ee73bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9752c4ad248eb383f72f9bd354af4c1890f1f1a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9752c4ad248eb383f72f9bd354af4c1890f1f1a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9752c4ad248eb383f72f9bd354af4c1890f1f1a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/comments", "author": null, "committer": null, "parents": [{"sha": "89da36ae12174eba690491535940c4191639a428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89da36ae12174eba690491535940c4191639a428", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89da36ae12174eba690491535940c4191639a428"}], "stats": {"total": 214, "additions": 210, "deletions": 4}, "files": [{"sha": "3cad793ab19e1bbf3324f2b0008d6e4cfe5c4944", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9752c4ad248eb383f72f9bd354af4c1890f1f1a3", "patch": "@@ -1,3 +1,16 @@\n+2009-03-31  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options):Document mtls-markers.\n+\t* configure.ac (HAVE_AS_TLS_MARKERS): New gas feature check.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* config/rs6000/rs6000.opt (mtls-markers): Add.\n+\t* config/rs6000/rs6000.h (TARGET_TLS_MARKERS): Define.\n+\t* config/rs6000/rs6000.md (tls_gd_aix, tls_gd_sysv): Add splitter.\n+\t(tls_ld_aix, tls_ld_sysv): Likewise.\n+\t(tls_gd, tls_gd_call_aix, tls_gd_call_sysv): New insns.\n+\t(tls_ld, tls_ld_call_aix, tls_ld_call_sysv): Likewise.\n+\n 2009-03-31  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/spu/spu.c (spu_expand_prologue): Delete redundant code."}, {"sha": "ecc85b040fed64b56bb96a5b21b1eeec94429918", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=9752c4ad248eb383f72f9bd354af4c1890f1f1a3", "patch": "@@ -371,6 +371,12 @@\n #endif\n \n \n+/* Define if your assembler supports arg info for __tls_get_addr. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_TLS_MARKERS\n+#endif\n+\n+\n /* Define if your assembler supports VSX instructions. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_VSX"}, {"sha": "8a6fe6846953b5f9102677b3582a0467447d6dcf", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=9752c4ad248eb383f72f9bd354af4c1890f1f1a3", "patch": "@@ -240,6 +240,15 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define TARGET_DFP 0\n #endif\n \n+/* Define TARGET_TLS_MARKERS if the target assembler does not support\n+   arg markers for __tls_get_addr calls.  */\n+#ifndef HAVE_AS_TLS_MARKERS\n+#undef  TARGET_TLS_MARKERS\n+#define TARGET_TLS_MARKERS 0\n+#else\n+#define TARGET_TLS_MARKERS tls_markers\n+#endif\n+\n #ifndef TARGET_SECURE_PLT\n #define TARGET_SECURE_PLT 0\n #endif"}, {"sha": "88322fd66dcab9844c20c7706e9e996b92446766", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 125, "deletions": 4, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=9752c4ad248eb383f72f9bd354af4c1890f1f1a3", "patch": "@@ -10412,7 +10412,7 @@\n (define_mode_attr tls_sysv_suffix [(SI \"si\") (DI \"di\")])\n (define_mode_attr tls_insn_suffix [(SI \"wz\") (DI \"d\")])\n \n-(define_insn \"tls_gd_aix<TLSmode:tls_abi_suffix>\"\n+(define_insn_and_split \"tls_gd_aix<TLSmode:tls_abi_suffix>\"\n   [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n         (call (mem:TLSmode (match_operand:TLSmode 3 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 4 \"\" \"g\")))\n@@ -10422,10 +10422,21 @@\n    (clobber (reg:SI LR_REGNO))]\n   \"HAVE_AS_TLS && DEFAULT_ABI == ABI_AIX\"\n   \"addi %0,%1,%2@got@tlsgd\\;bl %z3\\;%.\"\n+  \"&& TARGET_TLS_MARKERS\"\n+  [(set (match_dup 0)\n+\t(unspec:TLSmode [(match_dup 1)\n+\t\t\t (match_dup 2)]\n+\t\t\tUNSPEC_TLSGD))\n+   (parallel [(set (match_dup 0)\n+   \t     \t   (call (mem:TLSmode (match_dup 3))\n+\t\t   \t (match_dup 4)))\n+\t      (unspec:TLSmode [(match_dup 2)] UNSPEC_TLSGD)\n+\t      (clobber (reg:SI LR_REGNO))])]\n+  \"\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"12\")])\n \n-(define_insn \"tls_gd_sysv<TLSmode:tls_sysv_suffix>\"\n+(define_insn_and_split \"tls_gd_sysv<TLSmode:tls_sysv_suffix>\"\n   [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n         (call (mem:TLSmode (match_operand:TLSmode 3 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 4 \"\" \"g\")))\n@@ -10445,10 +10456,62 @@\n   else\n     return \"addi %0,%1,%2@got@tlsgd\\;bl %z3\";\n }\n+  \"&& TARGET_TLS_MARKERS\"\n+  [(set (match_dup 0)\n+\t(unspec:TLSmode [(match_dup 1)\n+\t\t\t (match_dup 2)]\n+\t\t\tUNSPEC_TLSGD))\n+   (parallel [(set (match_dup 0)\n+   \t     \t   (call (mem:TLSmode (match_dup 3))\n+\t\t   \t (match_dup 4)))\n+\t      (unspec:TLSmode [(match_dup 2)] UNSPEC_TLSGD)\n+\t      (clobber (reg:SI LR_REGNO))])]\n+  \"\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"tls_ld_aix<TLSmode:tls_abi_suffix>\"\n+(define_insn \"*tls_gd<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n+\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t\tUNSPEC_TLSGD))]\n+  \"HAVE_AS_TLS && TARGET_TLS_MARKERS\"\n+  \"addi %0,%1,%2@got@tlsgd\"\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_insn \"*tls_gd_call_aix<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n+        (call (mem:TLSmode (match_operand:TLSmode 1 \"symbol_ref_operand\" \"s\"))\n+\t      (match_operand 2 \"\" \"g\")))\n+   (unspec:TLSmode [(match_operand:TLSmode 3 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t   UNSPEC_TLSGD)\n+   (clobber (reg:SI LR_REGNO))]\n+  \"HAVE_AS_TLS && DEFAULT_ABI == ABI_AIX && TARGET_TLS_MARKERS\"\n+  \"bl %z1(%3@tlsgd)\\;%.\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"*tls_gd_call_sysv<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n+        (call (mem:TLSmode (match_operand:TLSmode 1 \"symbol_ref_operand\" \"s\"))\n+\t      (match_operand 2 \"\" \"g\")))\n+   (unspec:TLSmode [(match_operand:TLSmode 3 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t   UNSPEC_TLSGD)\n+   (clobber (reg:SI LR_REGNO))]\n+  \"HAVE_AS_TLS && DEFAULT_ABI == ABI_V4 && TARGET_TLS_MARKERS\"\n+{\n+  if (flag_pic)\n+    {\n+      if (TARGET_SECURE_PLT && flag_pic == 2)\n+\treturn \"bl %z1+32768(%3@tlsgd)@plt\";\n+      return \"bl %z1(%3@tlsgd)@plt\";\n+    }\n+  return \"bl %z1(%3@tlsgd)\";\n+}\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn_and_split \"tls_ld_aix<TLSmode:tls_abi_suffix>\"\n   [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n         (call (mem:TLSmode (match_operand:TLSmode 2 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 3 \"\" \"g\")))\n@@ -10457,9 +10520,19 @@\n    (clobber (reg:SI LR_REGNO))]\n   \"HAVE_AS_TLS && DEFAULT_ABI == ABI_AIX\"\n   \"addi %0,%1,%&@got@tlsld\\;bl %z2\\;%.\"\n+  \"&& TARGET_TLS_MARKERS\"\n+  [(set (match_dup 0)\n+\t(unspec:TLSmode [(match_dup 1)]\n+\t\t\tUNSPEC_TLSLD))\n+   (parallel [(set (match_dup 0)\n+   \t     \t   (call (mem:TLSmode (match_dup 2))\n+\t\t   \t (match_dup 3)))\n+\t      (unspec:TLSmode [(const_int 0)] UNSPEC_TLSLD)\n+\t      (clobber (reg:SI LR_REGNO))])]\n+  \"\"\n   [(set_attr \"length\" \"12\")])\n \n-(define_insn \"tls_ld_sysv<TLSmode:tls_sysv_suffix>\"\n+(define_insn_and_split \"tls_ld_sysv<TLSmode:tls_sysv_suffix>\"\n   [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n         (call (mem:TLSmode (match_operand:TLSmode 2 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 3 \"\" \"g\")))\n@@ -10478,8 +10551,56 @@\n   else\n     return \"addi %0,%1,%&@got@tlsld\\;bl %z2\";\n }\n+  \"&& TARGET_TLS_MARKERS\"\n+  [(set (match_dup 0)\n+\t(unspec:TLSmode [(match_dup 1)]\n+\t\t\tUNSPEC_TLSLD))\n+   (parallel [(set (match_dup 0)\n+   \t     \t   (call (mem:TLSmode (match_dup 2))\n+\t\t   \t (match_dup 3)))\n+\t      (unspec:TLSmode [(const_int 0)] UNSPEC_TLSLD)\n+\t      (clobber (reg:SI LR_REGNO))])]\n+  \"\"\n   [(set_attr \"length\" \"8\")])\n \n+(define_insn \"*tls_ld<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n+\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")]\n+\t\t\tUNSPEC_TLSLD))]\n+  \"HAVE_AS_TLS && TARGET_TLS_MARKERS\"\n+  \"addi %0,%1,%&@got@tlsld\"\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_insn \"*tls_ld_call_aix<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n+        (call (mem:TLSmode (match_operand:TLSmode 1 \"symbol_ref_operand\" \"s\"))\n+\t      (match_operand 2 \"\" \"g\")))\n+   (unspec:TLSmode [(const_int 0)] UNSPEC_TLSLD)\n+   (clobber (reg:SI LR_REGNO))]\n+  \"HAVE_AS_TLS && DEFAULT_ABI == ABI_AIX && TARGET_TLS_MARKERS\"\n+  \"bl %z1(%&@tlsld)\\;%.\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"*tls_ld_call_sysv<TLSmode:tls_abi_suffix>\"\n+  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n+        (call (mem:TLSmode (match_operand:TLSmode 1 \"symbol_ref_operand\" \"s\"))\n+\t      (match_operand 2 \"\" \"g\")))\n+   (unspec:TLSmode [(const_int 0)] UNSPEC_TLSLD)\n+   (clobber (reg:SI LR_REGNO))]\n+  \"HAVE_AS_TLS && DEFAULT_ABI == ABI_V4 && TARGET_TLS_MARKERS\"\n+{\n+  if (flag_pic)\n+    {\n+      if (TARGET_SECURE_PLT && flag_pic == 2)\n+\treturn \"bl %z1+32768(%&@tlsld)@plt\";\n+      return \"bl %z1(%&@tlsld)@plt\";\n+    }\n+  return \"bl %z1(%&@tlsld)\";\n+}\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"tls_dtprel_<TLSmode:tls_abi_suffix>\"\n   [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n \t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")"}, {"sha": "3030c59b4d21ab9c3d5de8bd8f97f97346828534", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=9752c4ad248eb383f72f9bd354af4c1890f1f1a3", "patch": "@@ -131,6 +131,10 @@ mfused-madd\n Target Report RejectNegative InverseMask(NO_FUSED_MADD, FUSED_MADD)\n Generate fused multiply/add instructions\n \n+mtls-markers\n+Target Report Var(tls_markers) Init(1)\n+Mark __tls_get_addr calls with argument info\n+\n msched-prolog\n Target Report Var(TARGET_SCHED_PROLOG) Init(1)\n Schedule the start and end of the procedure"}, {"sha": "914919717ea52d524fe9c7a38093e4b2241a147d", "filename": "gcc/configure", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=9752c4ad248eb383f72f9bd354af4c1890f1f1a3", "patch": "@@ -23328,6 +23328,43 @@ cat >>confdefs.h <<\\_ACEOF\n #define HAVE_AS_GNU_ATTRIBUTE 1\n _ACEOF\n \n+fi\n+\n+    echo \"$as_me:$LINENO: checking assembler for tls marker support\" >&5\n+echo $ECHO_N \"checking assembler for tls marker support... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_powerpc_tls_markers+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_powerpc_tls_markers=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 9 \\* 1000 \\) + 99 \\) \\* 1000 + 0`\n+  then gcc_cv_as_powerpc_tls_markers=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    echo ' bl __tls_get_addr(x@tlsgd)' > conftest.s\n+    if { ac_try='$gcc_cv_as  -o conftest.o conftest.s >&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }\n+    then\n+\tgcc_cv_as_powerpc_tls_markers=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_powerpc_tls_markers\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_powerpc_tls_markers\" >&6\n+if test $gcc_cv_as_powerpc_tls_markers = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_AS_TLS_MARKERS 1\n+_ACEOF\n+\n fi\n     ;;\n "}, {"sha": "6a6a7d3f326dfee31487619f0e6acbe7504cfad9", "filename": "gcc/configure.ac", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=9752c4ad248eb383f72f9bd354af4c1890f1f1a3", "patch": "@@ -3128,6 +3128,12 @@ LCF0:\n       [.gnu_attribute 4,1],,\n       [AC_DEFINE(HAVE_AS_GNU_ATTRIBUTE, 1,\n \t  [Define if your assembler supports .gnu_attribute.])])\n+\n+    gcc_GAS_CHECK_FEATURE([tls marker support],\n+      gcc_cv_as_powerpc_tls_markers, [2,20,0],,\n+      [ bl __tls_get_addr(x@tlsgd)],,\n+      [AC_DEFINE(HAVE_AS_TLS_MARKERS, 1,\n+\t  [Define if your assembler supports arg info for __tls_get_addr.])])\n     ;;\n \n   mips*-*-*)"}, {"sha": "980810451f5f377d9e65c7921a67fdc7be10afa7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9752c4ad248eb383f72f9bd354af4c1890f1f1a3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9752c4ad248eb383f72f9bd354af4c1890f1f1a3", "patch": "@@ -14407,6 +14407,16 @@ to use or discard it.\n In the future, we may cause GCC to ignore all longcall specifications\n when the linker is known to generate glue.\n \n+@item -mtls-markers\n+@itemx -mno-tls-markers\n+@opindex mtls-markers\n+@opindex mno-tls-markers\n+Mark (do not mark) calls to @code{__tls_get_addr} with a relocation\n+specifying the function argument.  The relocation allows ld to\n+reliably associate function call with argument setup instructions for\n+TLS optimization, which in turn allows gcc to better schedule the\n+sequence.\n+\n @item -pthread\n @opindex pthread\n Adds support for multithreading with the @dfn{pthreads} library."}]}