{"sha": "3aa0cc4e82a3f0455704a262e0b715f127ca019b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FhMGNjNGU4MmEzZjA0NTU3MDRhMjYyZTBiNzE1ZjEyN2NhMDE5Yg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2003-01-04T03:44:07Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2003-01-04T03:44:07Z"}, "message": "Merge with Classpath:\n\n\t* java/io/ObjectStreamClass.java (lookup): Split method and call\n\tlookupForClassObject().\n\t(lookupForClassObject): New method.\n\t(isProxyClass): New field.\n\t(setClass): Set isProxyClass, add object to classLookupTable, set\n\tsuperClass and calculateOffsets.\n\t(ObjectStreamClass): Set isProxyClass. Only set uid when Serializable\n\tand not a proxy class.\n\t(setFields): Set accessible true for serialPersistentFields.\n\t(getClassUID): Same for suid. And check if suid is of type long.\n\t(hasClassInitializer): Don't throw NoSuchMethodError.\n\nFrom-SVN: r60867", "tree": {"sha": "74b3f7ec645e8f76f6314fcc86bc21fca8f8e9b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74b3f7ec645e8f76f6314fcc86bc21fca8f8e9b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aa0cc4e82a3f0455704a262e0b715f127ca019b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa0cc4e82a3f0455704a262e0b715f127ca019b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aa0cc4e82a3f0455704a262e0b715f127ca019b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa0cc4e82a3f0455704a262e0b715f127ca019b/comments", "author": null, "committer": null, "parents": [{"sha": "2d2d0877ca0d5477ec0100aed0934bf35f5a20c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d2d0877ca0d5477ec0100aed0934bf35f5a20c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d2d0877ca0d5477ec0100aed0934bf35f5a20c1"}], "stats": {"total": 125, "additions": 82, "deletions": 43}, "files": [{"sha": "b38a3a5db9ea87665e9132c79965b98c02b1d408", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa0cc4e82a3f0455704a262e0b715f127ca019b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa0cc4e82a3f0455704a262e0b715f127ca019b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3aa0cc4e82a3f0455704a262e0b715f127ca019b", "patch": "@@ -1,3 +1,18 @@\n+2003-01-03  Mark Wielaard  <mark@klomp.org>\n+\n+\tMerge with Classpath:\n+\t* java/io/ObjectStreamClass.java (lookup): Split method and call\n+\tlookupForClassObject().\n+\t(lookupForClassObject): New method.\n+\t(isProxyClass): New field.\n+\t(setClass): Set isProxyClass, add object to classLookupTable, set\n+\tsuperClass and calculateOffsets.\n+\t(ObjectStreamClass): Set isProxyClass. Only set uid when Serializable\n+\tand not a proxy class.\n+\t(setFields): Set accessible true for serialPersistentFields.\n+\t(getClassUID): Same for suid. And check if suid is of type long.\n+\t(hasClassInitializer): Don't throw NoSuchMethodError.\n+\n 2003-01-03  Mark Wielaard  <mark@klomp.org>\n \n \t* java/io/FileInputStream.java (finalize): Don't explicitly"}, {"sha": "5d4c102f22028a258cbd20ed968ec33057769c0f", "filename": "libjava/java/io/ObjectStreamClass.java", "status": "modified", "additions": 67, "deletions": 43, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa0cc4e82a3f0455704a262e0b715f127ca019b/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa0cc4e82a3f0455704a262e0b715f127ca019b/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamClass.java?ref=3aa0cc4e82a3f0455704a262e0b715f127ca019b", "patch": "@@ -1,6 +1,6 @@\n /* ObjectStreamClass.java -- Class used to write class information\n    about serialized objects.\n-   Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2003  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -44,6 +44,7 @@\n import java.lang.reflect.Member;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.lang.reflect.Proxy;\n import java.security.DigestOutputStream;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n@@ -76,6 +77,19 @@ public static ObjectStreamClass lookup (Class cl)\n     if (! (Serializable.class).isAssignableFrom (cl))\n       return null;\n \n+    return lookupForClassObject (cl);\n+  }\n+\n+  /**\n+   * This lookup for internal use by ObjectOutputStream.  Suppose\n+   * we have a java.lang.Class object C for class A, though A is not\n+   * serializable, but it's okay to serialize C.\n+   */\n+  static ObjectStreamClass lookupForClassObject (Class cl)\n+  {\n+    if (cl == null)\n+      return null;\n+\n     ObjectStreamClass osc = (ObjectStreamClass)classLookupTable.get (cl);\n \n     if (osc != null)\n@@ -260,22 +274,29 @@ int getFlags ()\n   void setClass (Class cl) throws InvalidClassException\n   {\n     this.clazz = cl;\n+\n     long class_uid = getClassUID (cl);\n     if (uid == 0)\n+      uid = class_uid;\n+    else\n       {\n-       uid = class_uid;\n-       return;\n-      }\n-    \n-    // Check that the actual UID of the resolved class matches the UID from \n-    // the stream.    \n-    if (uid != class_uid)\n-      {\n-       String msg = cl + \n-\t \": Local class not compatible: stream serialVersionUID=\"\n-\t + uid + \", local serialVersionUID=\" + class_uid;\n-       throw new InvalidClassException (msg);\n+\t// Check that the actual UID of the resolved class matches the UID from \n+\t// the stream.    \n+\tif (uid != class_uid)\n+\t  {\n+\t    String msg = cl + \n+\t      \": Local class not compatible: stream serialVersionUID=\"\n+\t      + uid + \", local serialVersionUID=\" + class_uid;\n+\t    throw new InvalidClassException (msg);\n+\t  }\n       }\n+\n+    isProxyClass = clazz != null && Proxy.isProxyClass (clazz);\n+    ObjectStreamClass osc = (ObjectStreamClass)classLookupTable.get (clazz);\n+    if (osc == null)\n+      classLookupTable.put (clazz, this);\n+    superClass = lookupForClassObject (clazz.getSuperclass ());\n+    calculateOffsets ();\n   }\n \n   void setSuperclass (ObjectStreamClass osc)\n@@ -328,12 +349,15 @@ private ObjectStreamClass (Class cl)\n   {\n     uid = 0;\n     flags = 0;\n+    isProxyClass = Proxy.isProxyClass (cl);\n \n     clazz = cl;\n     name = cl.getName ();\n     setFlags (cl);\n     setFields (cl);\n-    uid = getClassUID (cl);\n+    // to those class nonserializable, its uid field is 0\n+    if ( (Serializable.class).isAssignableFrom (cl) && !isProxyClass)\n+      uid = getClassUID (cl);\n     superClass = lookup (cl.getSuperclass ());\n   }\n \n@@ -377,6 +401,7 @@ private void setFields (Class cl)\n     {\n       Field serialPersistentFields\n \t= cl.getDeclaredField (\"serialPersistentFields\");\n+      serialPersistentFields.setAccessible(true);\n       int modifiers = serialPersistentFields.getModifiers ();\n \n       if (Modifier.isStatic (modifiers)\n@@ -427,26 +452,27 @@ private long getClassUID (Class cl)\n   {\n     try\n     {\n+      // Use getDeclaredField rather than getField, since serialVersionUID\n+      // may not be public AND we only want the serialVersionUID of this\n+      // class, not a superclass or interface.\n       Field suid = cl.getDeclaredField (\"serialVersionUID\");\n+      suid.setAccessible(true);\n       int modifiers = suid.getModifiers ();\n \n-      if (Modifier.isStatic (modifiers) && Modifier.isFinal (modifiers))\n-\treturn suid.getLong (null);\t  \n+      if (Modifier.isStatic (modifiers)\n+\t  && Modifier.isFinal (modifiers)\n+\t  && suid.getType() == Long.TYPE)\n+\treturn suid.getLong (null);\n     }\n     catch (NoSuchFieldException ignore)\n-    {\n-    }\n+    {}\n     catch (IllegalAccessException ignore)\n-    {\n-    }\n+    {}\n \n     // cl didn't define serialVersionUID, so we have to compute it\n     try\n     {\n-      MessageDigest md = null;\n-      DigestOutputStream digest_out = null;\n-      DataOutputStream data_out = null;\n-\n+      MessageDigest md;\n       try \n \t{\n \t  md = MessageDigest.getInstance (\"SHA\");\n@@ -459,8 +485,10 @@ private long getClassUID (Class cl)\n \t  md = MessageDigest.getInstance (\"SHA\");\n \t}\n \n-      digest_out = new DigestOutputStream (nullOutputStream, md);\n-      data_out = new DataOutputStream (digest_out);\n+      DigestOutputStream digest_out =\n+\tnew DigestOutputStream (nullOutputStream, md);\n+      DataOutputStream data_out = new DataOutputStream (digest_out);\n+\n       data_out.writeUTF (cl.getName ());\n \n       int modifiers = cl.getModifiers ();\n@@ -497,17 +525,7 @@ private long getClassUID (Class cl)\n       }\n \n       // write class initializer method if present\n-      boolean has_init;\n-      try\n-      {\n-\thas_init = hasClassInitializer (cl);\n-      }\n-      catch (NoSuchMethodError e)\n-      {\n-\thas_init = false;\n-      }\n-\n-      if (has_init)\n+      if (hasClassInitializer (cl))\n       {\n \tdata_out.writeUTF (\"<clinit>\");\n \tdata_out.writeInt (Modifier.STATIC);\n@@ -564,11 +582,11 @@ private long getClassUID (Class cl)\n     catch (NoSuchAlgorithmException e)\n     {\n       throw new RuntimeException (\"The SHA algorithm was not found to use in computing the Serial Version UID for class \"\n-\t\t\t\t  + cl.getName ());\n+\t\t\t\t  + cl.getName (), e);\n     }\n     catch (IOException ioe)\n     {\n-      throw new RuntimeException (ioe.getMessage ());\n+      throw new RuntimeException (ioe);\n     }\n   }\n \n@@ -582,6 +600,7 @@ private ObjectStreamField[] getSerialPersistentFields (Class clazz)\n \t// Use getDeclaredField rather than getField for the same reason\n \t// as above in getDefinedSUID.\n \tField f = clazz.getDeclaredField (\"getSerialPersistentFields\");\n+\tf.setAccessible(true);\n \to = (ObjectStreamField[])f.get (null);\n       }\n     catch (java.lang.NoSuchFieldException e)\n@@ -597,21 +616,23 @@ private ObjectStreamField[] getSerialPersistentFields (Class clazz)\n \n   // Returns true if CLAZZ has a static class initializer\n   // (a.k.a. <clinit>).\n-  //\n-  // A NoSuchMethodError is raised if CLAZZ has no such method.\n   private static boolean hasClassInitializer (Class clazz)\n-    throws java.lang.NoSuchMethodError\n   {\n     Method m = null;\n \n     try\n       {\n+\t/*\n+\t * There exists a problem here, according to the spec\n+\t * clazz.getDeclaredMethod (\"<clinit>\", classArgs);\n+\t * will always throw NoSuchMethodException, even if the static \n+\t * intializer does exist.\n+\t */\n \tClass classArgs[] = {};\n \tm = clazz.getDeclaredMethod (\"<clinit>\", classArgs);\n       }\n     catch (java.lang.NoSuchMethodException e)\n       {\n-\tthrow new java.lang.NoSuchMethodError ();\n       }\n \n     return m != null;\n@@ -640,9 +661,12 @@ private static boolean hasClassInitializer (Class clazz)\n   int primFieldSize = -1;  // -1 if not yet calculated\n   int objectFieldCount;\n \n+  boolean isProxyClass = false;\n+\n   // This is probably not necessary because this class is special cased already\n   // but it will avoid showing up as a discrepancy when comparing SUIDs.\n   private static final long serialVersionUID = -6120832682080437368L;\n+\n }\n \n "}]}