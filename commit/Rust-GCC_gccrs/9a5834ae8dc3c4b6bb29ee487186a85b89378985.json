{"sha": "9a5834ae8dc3c4b6bb29ee487186a85b89378985", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE1ODM0YWU4ZGMzYzRiNmJiMjllZTQ4NzE4NmE4NWI4OTM3ODk4NQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-05-12T18:43:33Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-05-12T18:43:33Z"}, "message": "gensupport.c (n_comma_elts): Moved here from genattrtab.c.\n\n\t* gensupport.c (n_comma_elts): Moved here from genattrtab.c.\n\t(scan_comma_elt): New function.  Accepts whitespace in comma lists.\n\t* gensupport.h: Prototype new routines.\n\t* genattr.c (gen_attr): Use scan_comma_elt.  Avoid unnecessary\n\tuse of printf.\n\t* genattrtab.c (n_comma_elts): Moved to gensupport.c.\n\t(next_comma_elt): Use scan_comma_elt.\n\n\t* config/i386/i386.md: Use new attribute notation to break up\n\tlong lines in define_attr forms.\n\nFrom-SVN: r53403", "tree": {"sha": "041a0c07e04b7b1e912cc3fbfff87c4cb5742d5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/041a0c07e04b7b1e912cc3fbfff87c4cb5742d5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a5834ae8dc3c4b6bb29ee487186a85b89378985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a5834ae8dc3c4b6bb29ee487186a85b89378985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a5834ae8dc3c4b6bb29ee487186a85b89378985", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a5834ae8dc3c4b6bb29ee487186a85b89378985/comments", "author": null, "committer": null, "parents": [{"sha": "0d08ea488f729f49298fcba3ff5e574da24291ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d08ea488f729f49298fcba3ff5e574da24291ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d08ea488f729f49298fcba3ff5e574da24291ec"}], "stats": {"total": 182, "additions": 119, "deletions": 63}, "files": [{"sha": "4a547c1ed91b00e6b86ba5b84eb403bd66ea7d85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5834ae8dc3c4b6bb29ee487186a85b89378985/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5834ae8dc3c4b6bb29ee487186a85b89378985/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a5834ae8dc3c4b6bb29ee487186a85b89378985", "patch": "@@ -1,3 +1,16 @@\n+2002-05-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* gensupport.c (n_comma_elts): Moved here from genattrtab.c.\n+\t(scan_comma_elt): New function.  Accepts whitespace in comma lists.\n+\t* gensupport.h: Prototype new routines.\n+\t* genattr.c (gen_attr): Use scan_comma_elt.  Avoid unnecessary\n+\tuse of printf.\n+\t* genattrtab.c (n_comma_elts): Moved to gensupport.c.\n+\t(next_comma_elt): Use scan_comma_elt.\n+\n+\t* config/i386/i386.md: Use new attribute notation to break up\n+\tlong lines in define_attr forms.\n+\n 2002-05-12  Richard Henderson  <rth@redhat.com>\n \n \t* expr.c (compress_float_constant): New."}, {"sha": "ad463c37741b25b8acca88307966505db3336d68", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5834ae8dc3c4b6bb29ee487186a85b89378985/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5834ae8dc3c4b6bb29ee487186a85b89378985/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9a5834ae8dc3c4b6bb29ee487186a85b89378985", "patch": "@@ -123,20 +123,31 @@\n ;; A basic instruction type.  Refinements due to arguments to be\n ;; provided in other attributes.\n (define_attr \"type\"\n-  \"other,multi,alu1,negnot,alu,icmp,test,imov,imovx,lea,incdec,ishift,rotate,imul,idiv,ibr,setcc,push,pop,call,callv,icmov,fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,str,cld,sse,sseadd,ssemul,ssediv,ssemov,ssecmp,ssecvt,sselog,sseiadd,sseishft,sseimul,mmx,mmxmov,mmxadd,mmxshft,mmxcmp,mmxcvt,mmxmul,fistp\"\n+  \"other,multi,\n+   alu,alu1,negnot,imov,imovx,lea,\n+   incdec,ishift,rotate,imul,idiv,\n+   icmp,test,ibr,setcc,icmov,\n+   push,pop,call,callv,\n+   str,cld,\n+   fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp,\n+   sselog,sseiadd,sseishft,sseimul,\n+   sse,ssemov,sseadd,ssemul,ssecmp,ssecvt,ssediv,\n+   mmx,mmxmov,mmxadd,mmxmul,mmxcmp,mmxcvt,mmxshft\"\n   (const_string \"other\"))\n \n ;; Main data type used by the insn\n-(define_attr \"mode\" \"unknown,none,QI,HI,SI,DI,unknownfp,SF,DF,XF,TI,V4SF,V2DF,V2SF\"\n+(define_attr \"mode\"\n+  \"unknown,none,QI,HI,SI,DI,unknownfp,SF,DF,XF,TI,V4SF,V2DF,V2SF\"\n   (const_string \"unknown\"))\n \n ;; The CPU unit operations uses.\n (define_attr \"unit\" \"integer,i387,sse,mmx,unknown\"\n   (cond [(eq_attr \"type\" \"fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp\")\n \t   (const_string \"i387\")\n-\t (eq_attr \"type\" \"sse,sseadd,ssemul,ssediv,ssemov,ssecmp,ssecvt,sselog,sseiadd,sseishft,sseimul\")\n+\t (eq_attr \"type\" \"sselog,sseiadd,sseishft,sseimul,\n+\t\t\t  sse,ssemov,sseadd,ssemul,ssecmp,ssecvt,ssediv\")\n \t   (const_string \"sse\")\n-\t (eq_attr \"type\" \"mmx,mmxmov,mmxadd,mmxshft,mmxcmp,mmxcvt,mmxmul\")\n+\t (eq_attr \"type\" \"mmx,mmxmov,mmxadd,mmxmul,mmxcmp,mmxcvt,mmxshft\")\n \t   (const_string \"mmx\")]\n \t (const_string \"integer\")))\n \n@@ -146,7 +157,8 @@\n \t   (const_int 0)\n \t (eq_attr \"unit\" \"i387,sse,mmx\")\n \t   (const_int 0)\n-\t (eq_attr \"type\" \"alu1,negnot,alu,icmp,imovx,ishift,rotate,imul,push,pop\")\n+\t (eq_attr \"type\" \"alu,alu1,negnot,imovx,ishift,rotate,imul,\n+\t\t\t  icmp,push,pop\")\n \t   (symbol_ref \"ix86_attr_length_immediate_default(insn,1)\")\n \t (eq_attr \"type\" \"imov,test\")\n \t   (symbol_ref \"ix86_attr_length_immediate_default(insn,0)\")\n@@ -166,7 +178,8 @@\n \t     (const_int 1)\n \t     (const_int 4))\n \t ]\n-\t (symbol_ref \"/* Update immediate_length and other attributes! */ abort(),1\")))\n+\t (symbol_ref \"/* Update immediate_length and other attributes! */\n+\t\t      abort(),1\")))\n \n ;; The (bounding maximum) length of an instruction address.\n (define_attr \"length_address\" \"\"\n@@ -196,7 +209,12 @@\n \n ;; Set when 0f opcode prefix is used.\n (define_attr \"prefix_0f\" \"\"\n-  (if_then_else (eq_attr \"type\" \"imovx,setcc,icmov,sse,sseadd,ssemul,ssediv,ssemov,ssecmp,ssecvt,sselog,sseiadd,sseishft,sseimul,mmx,mmxmov,mmxadd,mmxshft,mmxcmp,mmxcvt,mmxmul\")\n+  (if_then_else \n+    (eq_attr \"type\" \n+             \"imovx,setcc,icmov,\n+              sselog,sseiadd,sseishft,sseimul,\n+              sse,ssemov,sseadd,ssemul,ssecmp,ssecvt,ssediv,\n+              mmx,mmxmov,mmxadd,mmxmul,mmxcmp,mmxcvt,mmxshft\")\n     (const_int 1)\n     (const_int 0)))\n \n@@ -287,7 +305,12 @@\n \t   (const_string \"store\")\n \t (match_operand 1 \"memory_operand\" \"\")\n \t   (const_string \"load\")\n-\t (and (eq_attr \"type\" \"!icmp,test,alu1,negnot,fsgn,imov,imovx,fmov,fcmp,sse,ssecmp,mmx,ssemov,mmxmov,ssecvt,mmxcvt,mmxcmp\")\n+\t (and (eq_attr \"type\"\n+\t\t \"!alu1,negnot,\n+\t\t   imov,imovx,icmp,test,\n+\t\t   fmov,fcmp,fsgn,\n+\t\t   sse,ssemov,ssecmp,ssecvt,\n+\t\t   mmx,mmxmov,mmxcmp,mmxcvt\")\n \t      (match_operand 2 \"memory_operand\" \"\"))\n \t   (const_string \"load\")\n \t (and (eq_attr \"type\" \"icmov\")"}, {"sha": "b688bd49bad888cf4f3ed0d1972dd6e9f89fe9d2", "filename": "gcc/genattr.c", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5834ae8dc3c4b6bb29ee487186a85b89378985/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5834ae8dc3c4b6bb29ee487186a85b89378985/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=9a5834ae8dc3c4b6bb29ee487186a85b89378985", "patch": "@@ -86,34 +86,30 @@ static void\n gen_attr (attr)\n      rtx attr;\n {\n-  const char *p;\n+  const char *p, *tag;\n   int is_const = GET_CODE (XEXP (attr, 2)) == CONST;  \n \n   printf (\"#define HAVE_ATTR_%s\\n\", XSTR (attr, 0));\n \n   /* If numeric attribute, don't need to write an enum.  */\n-  if (*XSTR (attr, 1) == '\\0')\n+  p = XSTR (attr, 1);\n+  if (*p == '\\0')\n     printf (\"extern int get_attr_%s PARAMS ((%s));\\n\", XSTR (attr, 0),\n \t    (is_const ? \"void\" : \"rtx\"));\n   else\n     {\n       printf (\"enum attr_%s {\", XSTR (attr, 0));\n-      write_upcase (XSTR (attr, 0));\n-      printf (\"_\");\n \n-      for (p = XSTR (attr, 1); *p != '\\0'; p++)\n+      while ((tag = scan_comma_elt (&p)) != 0)\n \t{\n-\t  if (*p == ',')\n-\t    {\n-\t      printf (\", \");\n-\t      write_upcase (XSTR (attr, 0));\n-\t      printf (\"_\");\n-\t    }\n-\t  else\n-\t    putchar (TOUPPER(*p));\n+\t  write_upcase (XSTR (attr, 0));\n+\t  putchar ('_');\n+\t  while (tag != p)\n+\t    putchar (TOUPPER (*tag++));\n+\t  fputs (\", \", stdout);\n \t}\n \n-      printf (\"};\\n\");\n+      fputs (\"};\\n\", stdout);\n       printf (\"extern enum attr_%s get_attr_%s PARAMS ((%s));\\n\\n\",\n \t      XSTR (attr, 0), XSTR (attr, 0), (is_const ? \"void\" : \"rtx\"));\n     }\n@@ -122,11 +118,12 @@ gen_attr (attr)\n      variables used by `insn_current_length'.  */\n   if (! strcmp (XSTR (attr, 0), \"length\"))\n     {\n-      printf (\"extern void shorten_branches PARAMS ((rtx));\\n\");\n-      printf (\"extern int insn_default_length PARAMS ((rtx));\\n\");\n-      printf (\"extern int insn_variable_length_p PARAMS ((rtx));\\n\");\n-      printf (\"extern int insn_current_length PARAMS ((rtx));\\n\\n\");\n-      printf (\"#include \\\"insn-addr.h\\\"\\n\\n\");\n+      puts (\"\\\n+extern void shorten_branches PARAMS ((rtx));\\n\\\n+extern int insn_default_length PARAMS ((rtx));\\n\\\n+extern int insn_variable_length_p PARAMS ((rtx));\\n\\\n+extern int insn_current_length PARAMS ((rtx));\\n\\n\\\n+#include \\\"insn-addr.h\\\"\\n\");\n     }\n }\n "}, {"sha": "1561e77218d165e88afe2a17e3186b3787ebacba", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 5, "deletions": 34, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5834ae8dc3c4b6bb29ee487186a85b89378985/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5834ae8dc3c4b6bb29ee487186a85b89378985/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=9a5834ae8dc3c4b6bb29ee487186a85b89378985", "patch": "@@ -456,7 +456,6 @@ static void write_complex_function PARAMS ((struct function_unit *, const char *\n static int write_expr_attr_cache PARAMS ((rtx, struct attr_desc *));\n static void write_toplevel_expr\tPARAMS ((rtx));\n static void write_const_num_delay_slots PARAMS ((void));\n-static int n_comma_elts\t\tPARAMS ((const char *));\n static char *next_comma_elt\tPARAMS ((const char **));\n static struct attr_desc *find_attr PARAMS ((const char *, int));\n static struct attr_value *find_most_used  PARAMS ((struct attr_desc *));\n@@ -5793,25 +5792,6 @@ write_complex_function (unit, name, connection)\n \f\n /* This page contains miscellaneous utility routines.  */\n \n-/* Given a string, return the number of comma-separated elements in it.\n-   Return 0 for the null string.  */\n-\n-static int\n-n_comma_elts (s)\n-     const char *s;\n-{\n-  int n;\n-\n-  if (*s == '\\0')\n-    return 0;\n-\n-  for (n = 1; *s; s++)\n-    if (*s == ',')\n-      n++;\n-\n-  return n;\n-}\n-\n /* Given a pointer to a (char *), return a malloc'ed string containing the\n    next comma-separated element.  Advance the pointer to after the string\n    scanned, or the end-of-string.  Return NULL if at end of string.  */\n@@ -5820,23 +5800,14 @@ static char *\n next_comma_elt (pstr)\n      const char **pstr;\n {\n-  char *out_str;\n-  const char *p;\n-\n-  if (**pstr == '\\0')\n-    return NULL;\n-\n-  /* Find end of string to compute length.  */\n-  for (p = *pstr; *p != ',' && *p != '\\0'; p++)\n-    ;\n+  const char *start;\n \n-  out_str = attr_string (*pstr, p - *pstr);\n-  *pstr = p;\n+  start = scan_comma_elt (pstr);\n \n-  if (**pstr == ',')\n-    (*pstr)++;\n+  if (start == NULL)\n+    return NULL;\n \n-  return out_str;\n+  return attr_string (start, *pstr - start);\n }\n \n /* Return a `struct attr_desc' pointer for a given named attribute.  If CREATE"}, {"sha": "e6292d9981faa4c3c2dc7cba8bf43e470aa96d39", "filename": "gcc/gensupport.c", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5834ae8dc3c4b6bb29ee487186a85b89378985/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5834ae8dc3c4b6bb29ee487186a85b89378985/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=9a5834ae8dc3c4b6bb29ee487186a85b89378985", "patch": "@@ -1,5 +1,5 @@\n /* Support routines for the various generation passes.\n-   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -1099,3 +1099,51 @@ read_md_rtx (lineno, seqnr)\n \n   return desc;\n }\n+\n+/* Given a string, return the number of comma-separated elements in it.\n+   Return 0 for the null string.  */\n+int\n+n_comma_elts (s)\n+     const char *s;\n+{\n+  int n;\n+\n+  if (*s == '\\0')\n+    return 0;\n+\n+  for (n = 1; *s; s++)\n+    if (*s == ',')\n+      n++;\n+\n+  return n;\n+}\n+\n+/* Given a pointer to a (char *), return a pointer to the beginning of the\n+   next comma-separated element in the string.  Advance the pointer given\n+   to the end of that element.  Return NULL if at end of string.  Caller\n+   is responsible for copying the string if necessary.  White space between\n+   a comma and an element is ignored.  */\n+\n+const char *\n+scan_comma_elt (pstr)\n+     const char **pstr;\n+{\n+  const char *start;\n+  const char *p = *pstr;\n+\n+  if (*p == ',')\n+    p++;\n+  while (ISSPACE(*p))\n+    p++;\n+\n+  if (*p == '\\0')\n+    return NULL;\n+\n+  start = p;\n+\n+  while (*p != ',' && *p != '\\0')\n+    p++;\n+\n+  *pstr = p;\n+  return start;\n+}"}, {"sha": "bac804b22a6b9a0ee84353b8f14252ba79c4f1af", "filename": "gcc/gensupport.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5834ae8dc3c4b6bb29ee487186a85b89378985/gcc%2Fgensupport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5834ae8dc3c4b6bb29ee487186a85b89378985/gcc%2Fgensupport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.h?ref=9a5834ae8dc3c4b6bb29ee487186a85b89378985", "patch": "@@ -1,5 +1,5 @@\n /* Declarations for rtx-reader support for gen* routines.\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -27,3 +27,7 @@ extern rtx read_md_rtx\t\tPARAMS ((int *, int *));\n \n extern void message_with_line\tPARAMS ((int, const char *, ...))\n      ATTRIBUTE_PRINTF_2;\n+\n+extern int n_comma_elts\t\tPARAMS ((const char *));\n+extern const char *scan_comma_elt PARAMS ((const char **));\n+"}]}