{"sha": "66194a987634c42eaa7be0118ce34f4145abe609", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYxOTRhOTg3NjM0YzQyZWFhN2JlMDExOGNlMzRmNDE0NWFiZTYwOQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2010-08-30T13:26:10Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2010-08-30T13:26:10Z"}, "message": "decl.c (FOREIGN_FORCE_REALIGN_STACK): New macro, replacement for FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN.\n\n        * gcc-interface/decl.c (FOREIGN_FORCE_REALIGN_STACK): New macro,\n        replacement for FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN.\n        (gnat_to_gnu_entity) <case ..., E_Procedure>: Use it.\n\nFrom-SVN: r163641", "tree": {"sha": "603f3d4b21c48da62328377d0852ec13d70d8364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/603f3d4b21c48da62328377d0852ec13d70d8364"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66194a987634c42eaa7be0118ce34f4145abe609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66194a987634c42eaa7be0118ce34f4145abe609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66194a987634c42eaa7be0118ce34f4145abe609", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66194a987634c42eaa7be0118ce34f4145abe609/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a95054c150f3afdf014474dd9cb5e51f563d445a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a95054c150f3afdf014474dd9cb5e51f563d445a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a95054c150f3afdf014474dd9cb5e51f563d445a"}], "stats": {"total": 52, "additions": 24, "deletions": 28}, "files": [{"sha": "5b427f8f6fce3be5423d9021c2483544fb82e6b2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66194a987634c42eaa7be0118ce34f4145abe609/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66194a987634c42eaa7be0118ce34f4145abe609/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=66194a987634c42eaa7be0118ce34f4145abe609", "patch": "@@ -1,3 +1,9 @@\n+2010-08-30  Olivier Hainque  <hainque@adacore.com>\n+\n+        * gcc-interface/decl.c (FOREIGN_FORCE_REALIGN_STACK): New macro,\n+        replacement for FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN.\n+        (gnat_to_gnu_entity) <case ..., E_Procedure>: Use it.\n+\n 2010-08-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tracebak.c: Fix typo in comment."}, {"sha": "75cdb849391e7100e84161fb287989617bb687a4", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66194a987634c42eaa7be0118ce34f4145abe609/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66194a987634c42eaa7be0118ce34f4145abe609/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=66194a987634c42eaa7be0118ce34f4145abe609", "patch": "@@ -60,27 +60,20 @@\n #define Has_Stdcall_Convention(E) (0)\n #endif\n \n-/* Stack realignment for functions with foreign conventions is provided on a\n-   per back-end basis now, as it is handled by the prologue expanders and not\n-   as part of the function's body any more.  It might be requested by way of a\n-   dedicated function type attribute on the targets that support it.\n-\n-   We need a way to avoid setting the attribute on the targets that don't\n-   support it and use FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN for this purpose.\n-\n-   It is defined on targets where the circuitry is available, and indicates\n-   whether the realignment is needed for 'main'.  We use this to decide for\n-   foreign subprograms as well.\n-\n-   It is not defined on targets where the circuitry is not implemented, and\n-   we just never set the attribute in these cases.\n-\n-   Whether it is defined on all targets that would need it in theory is\n-   not entirely clear.  We currently trust the base GCC settings for this\n-   purpose.  */\n-\n-#ifndef FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN\n-#define FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN 0\n+/* Stack realignment is necessary for functions with foreign conventions when\n+   the ABI doesn't mandate as much as what the compiler assumes - that is, up\n+   to PREFERRED_STACK_BOUNDARY.\n+\n+   Such realignment can be requested with a dedicated function type attribute\n+   on the targets that support it.  We define FOREIGN_FORCE_REALIGN_STACK to\n+   characterize the situations where the attribute should be set.  We rely on\n+   compiler configuration settings for 'main' to decide.  */\n+\n+#ifdef MAIN_STACK_BOUNDARY\n+#define FOREIGN_FORCE_REALIGN_STACK \\\n+  (MAIN_STACK_BOUNDARY < PREFERRED_STACK_BOUNDARY)\n+#else\n+#define FOREIGN_FORCE_REALIGN_STACK 0\n #endif\n \n struct incomplete\n@@ -4208,13 +4201,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t     get_identifier (\"stdcall\"), NULL_TREE,\n \t     gnat_entity);\n \n-\t/* If we are on a target where stack realignment is needed for 'main'\n-\t   to honor GCC's implicit expectations (stack alignment greater than\n-\t   what the base ABI guarantees), ensure we do the same for foreign\n-\t   convention subprograms as they might be used as callbacks from code\n-\t   breaking such expectations.  Note that this applies to task entry\n-\t   points in particular.  */\n-\tif (FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN\n+\t/* If we should request stack realignment for a foreign convention\n+\t   subprogram, do so.  Note that this applies to task entry points in\n+\t   particular.  */\n+\tif (FOREIGN_FORCE_REALIGN_STACK\n \t    && Has_Foreign_Convention (gnat_entity))\n \t  prepend_one_attribute_to\n \t    (&attr_list, ATTR_MACHINE_ATTRIBUTE,"}]}