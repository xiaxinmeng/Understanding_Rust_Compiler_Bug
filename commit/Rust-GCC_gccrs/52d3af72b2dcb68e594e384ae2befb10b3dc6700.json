{"sha": "52d3af72b2dcb68e594e384ae2befb10b3dc6700", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJkM2FmNzJiMmRjYjY4ZTU5NGUzODRhZTJiZWZiMTBiM2RjNjcwMA==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-02-28T12:27:05Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-02-28T12:27:05Z"}, "message": "[multiple changes]\n\nSun Feb 28 15:10:17 1999  David Edelsohn  <edelsohn@mhpcc.edu>\n        * rs6000.md (elf_high, movsi_got, *movsi_got_internal,\n        *movsi_got_internal_mem, GOT splitter, movdf_hardfloat32,\n        movdf_softfloat32, movdf_hardfloat64, movdf_softfloat64,\n        load_multiple, allocate_stack, call_indirect_aix32,\n        call_indirect_aix64, call_value_indirect_aix32,\n        call_value_indirect_aix64, call_indirect_nt,\n        call_value_indirect_nt): Use gpc_reg_operand instead of\n        register_operand.\nSun Feb 28 15:10:17 1999  Michael Meissner  <meissner@cygnus.com>\n        * rs6000.md (one_cmplsi2, andsi3, iorsi3, xorsi3, *eqvsi3,\n        *andcsi3, *iorcsi3, *nandsi3, *norsi3): Add alternatives to use CR\n        other than cr0.\n        * rs6000.c (and{,64}_operand): If the user did -ffixed-cr0, don't\n        allow andi. or andis. which always set cr0.\n\nFrom-SVN: r25501", "tree": {"sha": "4dbbf566bb5b046b74e45532ff4e70ff18ac2589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dbbf566bb5b046b74e45532ff4e70ff18ac2589"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52d3af72b2dcb68e594e384ae2befb10b3dc6700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52d3af72b2dcb68e594e384ae2befb10b3dc6700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52d3af72b2dcb68e594e384ae2befb10b3dc6700", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52d3af72b2dcb68e594e384ae2befb10b3dc6700/comments", "author": null, "committer": null, "parents": [{"sha": "85397055b2e99f76ac18cffdaf45120d2fa773f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85397055b2e99f76ac18cffdaf45120d2fa773f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85397055b2e99f76ac18cffdaf45120d2fa773f7"}], "stats": {"total": 731, "additions": 554, "deletions": 177}, "files": [{"sha": "a8367db938af00ff9bd567da932b124c33ef8628", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d3af72b2dcb68e594e384ae2befb10b3dc6700/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d3af72b2dcb68e594e384ae2befb10b3dc6700/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52d3af72b2dcb68e594e384ae2befb10b3dc6700", "patch": "@@ -1,3 +1,22 @@\n+Sun Feb 28 15:10:17 1999  David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+\t* rs6000.md (elf_high, movsi_got, *movsi_got_internal,\n+\t*movsi_got_internal_mem, GOT splitter, movdf_hardfloat32,\n+\tmovdf_softfloat32, movdf_hardfloat64, movdf_softfloat64,\n+\tload_multiple, allocate_stack, call_indirect_aix32,\n+\tcall_indirect_aix64, call_value_indirect_aix32,\n+\tcall_value_indirect_aix64, call_indirect_nt,\n+\tcall_value_indirect_nt): Use gpc_reg_operand instead of\n+\tregister_operand. \n+\n+Sun Feb 28 15:10:17 1999  Michael Meissner  <meissner@cygnus.com>\n+\n+\t* rs6000.md (one_cmplsi2, andsi3, iorsi3, xorsi3, *eqvsi3,\n+\t*andcsi3, *iorcsi3, *nandsi3, *norsi3): Add alternatives to use CR\n+\tother than cr0.\n+\t* rs6000.c (and{,64}_operand): If the user did -ffixed-cr0, don't\n+\tallow andi. or andis. which always set cr0.\n+\n Sun Feb 28 01:15:04 PST 1999 Jeff Law  (law@cygnus.com)\n \n \t* version.c: Bump for snapshot."}, {"sha": "c158fc3a3b5706c130d97fadfc5aa626bd22e6c6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d3af72b2dcb68e594e384ae2befb10b3dc6700/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d3af72b2dcb68e594e384ae2befb10b3dc6700/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=52d3af72b2dcb68e594e384ae2befb10b3dc6700", "patch": "@@ -1041,8 +1041,10 @@ and64_operand (op, mode)\n     register rtx op;\n     enum machine_mode mode;\n {\n-  return (logical_operand (op, mode)\n-\t  || mask64_operand (op, mode));\n+  if (fixed_regs[68])\t/* CR0 not available, don't do andi./andis. */\n+    return (gpc_reg_operand (op, mode) || mask64_operand (op, mode));\n+\n+  return (logical_operand (op, mode) || mask64_operand (op, mode));\n }\n \n /* Return 1 if the operand is either a non-special register or a\n@@ -1053,8 +1055,10 @@ and_operand (op, mode)\n     register rtx op;\n     enum machine_mode mode;\n {\n-  return (logical_operand (op, mode)\n-\t  || mask_operand (op, mode));\n+  if (fixed_regs[68])\t/* CR0 not available, don't do andi./andis. */\n+    return (gpc_reg_operand (op, mode) || mask_operand (op, mode));\n+\n+  return (logical_operand (op, mode) || mask_operand (op, mode));\n }\n \n /* Return 1 if the operand is a general register or memory operand.  */"}, {"sha": "cbfafd9606c2724e8eee547683ae37d92a1fd08b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 527, "deletions": 173, "changes": 700, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d3af72b2dcb68e594e384ae2befb10b3dc6700/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d3af72b2dcb68e594e384ae2befb10b3dc6700/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=52d3af72b2dcb68e594e384ae2befb10b3dc6700", "patch": "@@ -1018,23 +1018,56 @@\n   \"nor %0,%1,%1\")\n \n (define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n-\t(compare:CC (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 2 \"=r\"))]\n+   (clobber (match_scratch:SI 2 \"=r,r\"))]\n   \"\"\n-  \"nor. %2,%1,%1\"\n-  [(set_attr \"type\" \"compare\")])\n+  \"@\n+   nor. %2,%1,%1\n+   #\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:SI 2 \"\"))]\n+  \"reload_completed\"\n+  [(set (match_dup 2)\n+\t(not:SI (match_dup 1)))\n+   (set (match_dup 0)\n+\t(compare:CC (match_dup 2)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n-\t(compare:CC (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n+  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(not:SI (match_dup 1)))]\n   \"\"\n-  \"nor. %0,%1,%1\"\n-  [(set_attr \"type\" \"compare\")])\n+  \"@\n+   nor. %0,%1,%1\n+   #\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(not:SI (match_dup 1)))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(not:SI (match_dup 1)))\n+   (set (match_dup 2)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n@@ -1828,36 +1861,89 @@\n    {rlinm|rlwinm} %0,%1,0,%m2,%M2\n    {andil.|andi.} %0,%1,%b2\n    {andiu.|andis.} %0,%1,%u2\"\n-  [(set_attr \"length\" \"4,4,4,4\")])\n+  [(set_attr \"length\" \"4\")])\n+\n+;; Note to set cr's other than cr0 we do the and immediate and then\n+;; the test again -- this avoids a mcrf which on the higher end\n+;; machines causes an execution serialization\n \n (define_insn \"*andsi3_internal2\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,x,x\")\n-\t(compare:CC (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r\")\n-\t\t\t    (match_operand:SI 2 \"and_operand\" \"r,K,J,L\"))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,x,x,?y,??y,??y,?y\")\n+\t(compare:CC (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r,r,r\")\n+\t\t\t    (match_operand:SI 2 \"and_operand\" \"r,K,J,L,r,K,J,L\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n+   (clobber (match_scratch:SI 3 \"=r,r,r,r,r,r,r,r\"))\n+   (clobber (match_scratch:CC 4 \"=X,X,X,X,X,x,x,X\"))]\n   \"\"\n   \"@\n    and. %3,%1,%2\n    {andil.|andi.} %3,%1,%b2\n    {andiu.|andis.} %3,%1,%u2\n-   {rlinm.|rlwinm.} %3,%1,0,%m2,%M2\"\n-  [(set_attr \"type\" \"compare,compare,compare,delayed_compare\")])\n+   {rlinm.|rlwinm.} %3,%1,0,%m2,%M2\n+   #\n+   #\n+   #\n+   #\"\n+  [(set_attr \"type\" \"compare,compare,compare,delayed_compare,compare,compare,compare,compare\")\n+   (set_attr \"length\" \"4,4,4,4,8,8,8,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n+\t\t\t    (match_operand:SI 2 \"and_operand\" \"\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:SI 3 \"\"))\n+   (clobber (match_scratch:CC 4 \"\"))]\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 3)\n+\t\t   (and:SI (match_dup 1)\n+\t\t\t   (match_dup 2)))\n+\t      (clobber (match_dup 4))])\n+   (set (match_dup 0)\n+\t(compare:CC (match_dup 3)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n (define_insn \"*andsi3_internal3\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,x,x\")\n-\t(compare:CC (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r\")\n-\t\t\t    (match_operand:SI 2 \"and_operand\" \"r,K,J,L\"))\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,x,x,?y,??y,??y,?y\")\n+\t(compare:CC (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r,r,r\")\n+\t\t\t    (match_operand:SI 2 \"and_operand\" \"r,K,J,L,r,K,J,L\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n-\t(and:SI (match_dup 1) (match_dup 2)))]\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r,r,r,r\")\n+\t(and:SI (match_dup 1)\n+\t\t(match_dup 2)))\n+   (clobber (match_scratch:CC 4 \"=X,X,X,X,X,x,x,X\"))]\n   \"\"\n   \"@\n    and. %0,%1,%2\n    {andil.|andi.} %0,%1,%b2\n    {andiu.|andis.} %0,%1,%u2\n-   {rlinm.|rlwinm.} %0,%1,0,%m2,%M2\"\n-  [(set_attr \"type\" \"compare,compare,compare,delayed_compare\")])\n+   {rlinm.|rlwinm.} %0,%1,0,%m2,%M2\n+   #\n+   #\n+   #\n+   #\"\n+  [(set_attr \"type\" \"compare,compare,compare,delayed_compare,compare,compare,compare,compare\")\n+   (set_attr \"length\" \"4,4,4,4,8,8,8,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n+\t\t\t    (match_operand:SI 2 \"and_operand\" \"\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t(and:SI (match_dup 1)\n+\t\t(match_dup 2)))\n+   (clobber (match_scratch:CC 4 \"\"))]\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (and:SI (match_dup 1)\n+\t\t\t   (match_dup 2)))\n+\t      (clobber (match_dup 4))])\n+   (set (match_dup 3)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n (define_expand \"iorsi3\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n@@ -1893,25 +1979,63 @@\n   [(set_attr \"length\" \"4,4,4\")])\n \n (define_insn \"*iorsi3_internal2\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n-\t(compare:CC (ior:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\")\n-\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (ior:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n+\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r\"))]\n+   (clobber (match_scratch:SI 3 \"=r,r\"))]\n   \"\"\n-  \"or. %3,%1,%2\"\n-  [(set_attr \"type\" \"compare\")])\n+  \"@\n+   or. %3,%1,%2\n+   #\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (ior:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n+\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:SI 3 \"\"))]\n+  \"reload_completed\"\n+  [(set (match_dup 3)\n+\t(ior:SI (match_dup 1)\n+\t\t(match_dup 2)))\n+   (set (match_dup 0)\n+\t(compare:CC (match_dup 3)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n (define_insn \"*iorsi3_internal3\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n-\t(compare:CC (ior:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\")\n-\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (ior:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n+\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ior:SI (match_dup 1) (match_dup 2)))]\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(ior:SI (match_dup 1)\n+\t\t(match_dup 2)))]\n   \"\"\n-  \"or. %0,%1,%2\"\n-  [(set_attr \"type\" \"compare\")])\n+  \"@\n+   or. %0,%1,%2\n+   #\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (ior:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n+\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t(ior:SI (match_dup 1) (match_dup 2)))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(ior:SI (match_dup 1)\n+\t\t(match_dup 2)))\n+   (set (match_dup 3)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n ;; Split an IOR that we can't do in one insn into two insns, each of which\n ;; does one 16-bit part.  This is used by combine.\n@@ -1963,25 +2087,63 @@\n   [(set_attr \"length\" \"4,4,4\")])\n \n (define_insn \"*xorsi3_internal2\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n-\t(compare:CC (xor:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\")\n-\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (xor:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n+\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r\"))]\n+   (clobber (match_scratch:SI 3 \"=r,r\"))]\n   \"\"\n-  \"xor. %3,%1,%2\"\n-  [(set_attr \"type\" \"compare\")])\n+  \"@\n+   xor. %3,%1,%2\n+   #\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (xor:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n+\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:SI 3 \"\"))]\n+  \"reload_completed\"\n+  [(set (match_dup 3)\n+\t(xor:SI (match_dup 1)\n+\t\t(match_dup 2)))\n+   (set (match_dup 0)\n+\t(compare:CC (match_dup 3)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n (define_insn \"*xorsi3_internal3\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n-\t(compare:CC (xor:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\")\n-\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (xor:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n+\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(xor:SI (match_dup 1) (match_dup 2)))]\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(xor:SI (match_dup 1)\n+\t\t(match_dup 2)))]\n   \"\"\n-  \"xor. %0,%1,%2\"\n-  [(set_attr \"type\" \"compare\")])\n+  \"@\n+   xor. %0,%1,%2\n+   #\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (xor:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n+\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t(xor:SI (match_dup 1) (match_dup 2)))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(xor:SI (match_dup 1)\n+\t\t(match_dup 2)))\n+   (set (match_dup 3)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n ;; Split an XOR that we can't do in one insn into two insns, each of which\n ;; does one 16-bit part.  This is used by combine.\n@@ -2007,25 +2169,63 @@\n    \"eqv %0,%1,%2\")\n \n (define_insn \"*eqvsi3_internal2\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n-\t(compare:CC (not:SI (xor:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\")\n-\t\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (not:SI (xor:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n+\t\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\")))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r\"))]\n+   (clobber (match_scratch:SI 3 \"=r,r\"))]\n    \"\"\n-   \"eqv. %3,%1,%2\"\n-   [(set_attr \"type\" \"compare\")])\n+   \"@\n+    eqv. %3,%1,%2\n+    #\"\n+   [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (not:SI (xor:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n+\t\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"\")))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:SI 3 \"\"))]\n+  \"reload_completed\"\n+  [(set (match_dup 3)\n+\t(not:SI (xor:SI (match_dup 1)\n+\t\t\t(match_dup 2))))\n+   (set (match_dup 0)\n+\t(compare:CC (match_dup 3)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n (define_insn \"*eqvsi3_internal3\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n-\t(compare:CC (not:SI (xor:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\")\n-\t\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (not:SI (xor:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n+\t\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\")))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(not:SI (xor:SI (match_dup 1) (match_dup 2))))]\n    \"\"\n-   \"eqv. %0,%1,%2\"\n-   [(set_attr \"type\" \"compare\")])\n+   \"@\n+    eqv. %0,%1,%2\n+    #\"\n+   [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (not:SI (xor:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n+\t\t\t\t    (match_operand:SI 2 \"reg_or_short_operand\" \"\")))\n+\t\t    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t(not:SI (xor:SI (match_dup 1)\n+\t\t\t(match_dup 2))))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(not:SI (xor:SI (match_dup 1)\n+\t\t\t(match_dup 2))))\n+   (set (match_dup 3)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n (define_insn \"*andcsi3_internal1\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n@@ -2035,25 +2235,64 @@\n   \"andc %0,%2,%1\")\n \n (define_insn \"*andcsi3_internal2\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n-\t(compare:CC (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n+\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r\"))]\n+   (clobber (match_scratch:SI 3 \"=r,r\"))]\n   \"\"\n-  \"andc. %3,%2,%1\"\n-  [(set_attr \"type\" \"compare\")])\n+  \"@\n+   andc. %3,%2,%1\n+   #\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:SI 3 \"\"))]\n+  \"reload_completed\"\n+  [(set (match_dup 3)\n+\t(and:SI (not:SI (match_dup 1))\n+\t\t(match_dup 2)))\n+   (set (match_dup 0)\n+\t(compare:CC (match_dup 3)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n (define_insn \"*andcsi3_internal3\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n-\t(compare:CC (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n+\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(and:SI (not:SI (match_dup 1)) (match_dup 2)))]\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(and:SI (not:SI (match_dup 1))\n+\t\t(match_dup 2)))]\n   \"\"\n-  \"andc. %0,%2,%1\"\n-  [(set_attr \"type\" \"compare\")])\n+  \"@\n+   andc. %0,%2,%1\n+   #\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t(and:SI (not:SI (match_dup 1))\n+\t\t(match_dup 2)))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(and:SI (not:SI (match_dup 1))\n+\t\t(match_dup 2)))\n+   (set (match_dup 3)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n (define_insn \"*iorcsi3_internal1\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n@@ -2063,26 +2302,63 @@\n   \"orc %0,%2,%1\")\n \n (define_insn \"*iorcsi3_internal2\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n-\t(compare:CC (ior:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (ior:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n+\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r\"))]\n+   (clobber (match_scratch:SI 3 \"=r,r\"))]\n   \"\"\n-  \"orc. %3,%2,%1\"\n-  [(set_attr \"type\" \"compare\")])\n+  \"@\n+   orc. %3,%2,%1\n+   #\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (ior:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:SI 3 \"\"))]\n+  \"reload_completed\"\n+  [(set (match_dup 3)\n+\t(ior:SI (not:SI (match_dup 1))\n+\t\t(match_dup 2)))\n+   (set (match_dup 0)\n+\t(compare:CC (match_dup 3)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n (define_insn \"*iorcsi3_internal3\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n-\t(compare:CC (ior:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (ior:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n+\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(ior:SI (not:SI (match_dup 1)) (match_dup 2)))]\n   \"\"\n-  \"orc. %0,%2,%1\"\n+  \"@\n+   orc. %0,%2,%1\n+   #\"\n   [(set_attr \"type\" \"compare\")])\n \n+(define_split\n+  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (ior:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t(ior:SI (not:SI (match_dup 1))\n+\t\t(match_dup 2)))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(ior:SI (not:SI (match_dup 1))\n+\t\t(match_dup 2)))\n+   (set (match_dup 3)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\")\n+\n (define_insn \"*nandsi3_internal1\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(ior:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n@@ -2091,25 +2367,64 @@\n   \"nand %0,%1,%2\")\n \n (define_insn \"*nandsi3_internal2\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n-\t(compare:CC (ior:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t\t    (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (ior:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\"))\n+\t\t\t    (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\")))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r\"))]\n+   (clobber (match_scratch:SI 3 \"=r,r\"))]\n   \"\"\n-  \"nand. %3,%1,%2\"\n-  [(set_attr \"type\" \"compare\")])\n+  \"@\n+   nand. %3,%1,%2\n+   #\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (ior:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t\t\t    (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"\")))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:SI 3 \"\"))]\n+  \"reload_completed\"\n+  [(set (match_dup 3)\n+\t(ior:SI (not:SI (match_dup 1))\n+\t\t(not:SI (match_dup 2))))\n+   (set (match_dup 0)\n+\t(compare:CC (match_dup 3)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n (define_insn \"*nandsi3_internal3\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n-\t(compare:CC (ior:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t\t    (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (ior:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\"))\n+\t\t\t    (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\")))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ior:SI (not:SI (match_dup 1)) (not:SI (match_dup 2))))]\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(ior:SI (not:SI (match_dup 1))\n+\t\t(not:SI (match_dup 2))))]\n   \"\"\n-  \"nand. %0,%1,%2\"\n-  [(set_attr \"type\" \"compare\")])\n+  \"@\n+   nand. %0,%1,%2\n+   #\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (ior:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t\t\t    (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"\")))\n+\t\t    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t(ior:SI (not:SI (match_dup 1))\n+\t\t(not:SI (match_dup 2))))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(ior:SI (not:SI (match_dup 1))\n+\t\t(not:SI (match_dup 2))))\n+   (set (match_dup 3)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n (define_insn \"*norsi3_internal1\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n@@ -2119,25 +2434,64 @@\n   \"nor %0,%1,%2\")\n \n (define_insn \"*norsi3_internal2\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n-\t(compare:CC (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t\t    (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\"))\n+\t\t\t    (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\")))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r\"))]\n+   (clobber (match_scratch:SI 3 \"=r,r\"))]\n   \"\"\n-  \"nor. %3,%1,%2\"\n-  [(set_attr \"type\" \"compare\")])\n+  \"@\n+   nor. %3,%1,%2\n+   #\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t\t\t    (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"\")))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:SI 3 \"\"))]\n+  \"reload_completed\"\n+  [(set (match_dup 3)\n+\t(and:SI (not:SI (match_dup 1))\n+\t\t(not:SI (match_dup 2))))\n+   (set (match_dup 0)\n+\t(compare:CC (match_dup 3)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n (define_insn \"*norsi3_internal3\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n-\t(compare:CC (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t\t    (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\"))\n+\t\t\t    (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\")))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(and:SI (not:SI (match_dup 1)) (not:SI (match_dup 2))))]\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(and:SI (not:SI (match_dup 1))\n+\t\t(not:SI (match_dup 2))))]\n   \"\"\n-  \"nor. %0,%1,%2\"\n-  [(set_attr \"type\" \"compare\")])\n+  \"@\n+   nor. %0,%1,%2\n+   #\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_split\n+  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+\t(compare:CC (and:SI (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t\t\t    (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"\")))\n+\t\t    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t(and:SI (not:SI (match_dup 1))\n+\t\t(not:SI (match_dup 2))))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(and:SI (not:SI (match_dup 1))\n+\t\t(not:SI (match_dup 2))))\n+   (set (match_dup 3)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\")\n \n ;; maskir insn.  We need four forms because things might be in arbitrary\n ;; orders.  Don't define forms that only set CR fields because these\n@@ -5412,22 +5766,22 @@\n ;; registers, since almost all uses of this will need it\n ;; in a base register shortly.\n (define_insn \"elf_high\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=b\")\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=b\")\n \t(high:SI (match_operand 1 \"\" \"\")))]\n   \"TARGET_ELF && !TARGET_64BIT\"\n   \"{liu|lis} %0,%1@ha\")\n \n (define_insn \"elf_low\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"b\")\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n \t\t   (match_operand 2 \"\" \"\")))]\n    \"TARGET_ELF && !TARGET_64BIT\"\n    \"{cal|la} %0,%2@l(%1)\")\n \n ;; Set up a register with a value from the GOT table\n \n (define_expand \"movsi_got\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(unspec [(match_operand:SI 1 \"got_operand\" \"\")\n \t\t (match_dup 2)] 8))]\n   \"(DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS) && flag_pic == 1\"\n@@ -5455,9 +5809,9 @@\n }\")\n \n (define_insn \"*movsi_got_internal\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(unspec [(match_operand:SI 1 \"got_no_const_operand\" \"\")\n-\t\t (match_operand:SI 2 \"register_operand\" \"b\")] 8))]\n+\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"b\")] 8))]\n   \"(DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS) && flag_pic == 1\"\n   \"{l|lwz} %0,%a1@got(%2)\"\n   [(set_attr \"type\" \"load\")])\n@@ -5467,7 +5821,7 @@\n ;; Force final to split this insn (if it hasn't been split already) to\n ;; avoid having to create a suitable output template.\n (define_insn \"*movsi_got_internal_mem\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(unspec [(match_operand:SI 1 \"got_no_const_operand\" \"\")\n \t\t (match_operand:SI 2 \"memory_operand\" \"m\")] 8))]\n   \"(DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS)\n@@ -5480,7 +5834,7 @@\n ;; Used by sched, shorten_branches and final when the GOT pseudo reg\n ;; didn't get allocated to a hard register.\n (define_split \n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(unspec [(match_operand:SI 1 \"got_no_const_operand\" \"\")\n \t\t (match_operand:SI 2 \"memory_operand\" \"m\")] 8))]\n   \"(DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS)\n@@ -5981,8 +6335,8 @@\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=!r,??r,o,!r,!r,!r,f,f,m\")\n \t(match_operand:DF 1 \"input_operand\" \"r,o,r,G,H,F,f,m,f\"))]\n   \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\n-   && (register_operand (operands[0], DFmode)\n-       || register_operand (operands[1], DFmode))\"\n+   && (gpc_reg_operand (operands[0], DFmode)\n+       || gpc_reg_operand (operands[1], DFmode))\"\n   \"*\n {\n   switch (which_alternative)\n@@ -6028,8 +6382,8 @@\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r\")\n \t(match_operand:DF 1 \"input_operand\" \"r,m,r,G,H,F\"))]\n   \"! TARGET_POWERPC64 && TARGET_SOFT_FLOAT\n-   && (register_operand (operands[0], DFmode)\n-       || register_operand (operands[1], DFmode))\"\n+   && (gpc_reg_operand (operands[0], DFmode)\n+       || gpc_reg_operand (operands[1], DFmode))\"\n   \"*\n {\n   switch (which_alternative)\n@@ -6069,8 +6423,8 @@\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=!r,??r,m,!r,!r,!r,f,f,m\")\n \t(match_operand:DF 1 \"input_operand\" \"r,m,r,G,H,F,f,m,f\"))]\n   \"TARGET_POWERPC64 && TARGET_HARD_FLOAT\n-   && (register_operand (operands[0], DFmode)\n-       || register_operand (operands[1], DFmode))\"\n+   && (gpc_reg_operand (operands[0], DFmode)\n+       || gpc_reg_operand (operands[1], DFmode))\"\n   \"@\n    mr %0,%1\n    ld%U1%X1 %0,%1\n@@ -6088,8 +6442,8 @@\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r\")\n \t(match_operand:DF 1 \"input_operand\" \"r,m,r,G,H,F\"))]\n   \"TARGET_POWERPC64 && TARGET_SOFT_FLOAT\n-   && (register_operand (operands[0], DFmode)\n-       || register_operand (operands[1], DFmode))\"\n+   && (gpc_reg_operand (operands[0], DFmode)\n+       || gpc_reg_operand (operands[1], DFmode))\"\n   \"@\n    mr %0,%1\n    ld%U1%X1 %0,%1\n@@ -6624,7 +6978,7 @@\n (define_insn \"\"\n   [(match_parallel 0 \"load_multiple_operation\"\n \t\t   [(set (match_operand:SI 1 \"gpc_reg_operand\" \"=r\")\n-\t\t\t (mem:SI (match_operand:SI 2 \"register_operand\" \"b\")))])]\n+\t\t\t (mem:SI (match_operand:SI 2 \"gpc_reg_operand\" \"b\")))])]\n   \"TARGET_STRING\"\n   \"*\n {\n@@ -6735,7 +7089,7 @@\n \n (define_insn \"\"\n   [(match_parallel 0 \"store_multiple_operation\"\n-\t\t   [(set (mem:SI (match_operand:SI 1 \"register_operand\" \"b\"))\n+\t\t   [(set (mem:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\"))\n \t\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n \t\t    (clobber (match_scratch:SI 3 \"X\"))])]\n   \"TARGET_STRING && !TARGET_POWER\"\n@@ -6783,11 +7137,11 @@\n   \"\")\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+  [(set (mem:BLK (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n    (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (clobber (match_operand:SI 4 \"register_operand\" \"=r\"))\n+   (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=r\"))\n    (clobber (reg:SI  6))\n    (clobber (reg:SI  7))\n    (clobber (reg:SI  8))\n@@ -6806,11 +7160,11 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+  [(set (mem:BLK (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n    (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (clobber (match_operand:SI 4 \"register_operand\" \"=r\"))\n+   (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=r\"))\n    (clobber (reg:SI  6))\n    (clobber (reg:SI  7))\n    (clobber (reg:SI  8))\n@@ -6846,11 +7200,11 @@\n   \"\")\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+  [(set (mem:BLK (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n    (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (clobber (match_operand:SI 4 \"register_operand\" \"=r\"))\n+   (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=r\"))\n    (clobber (reg:SI  8))\n    (clobber (reg:SI  9))\n    (clobber (reg:SI 10))\n@@ -6867,11 +7221,11 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+  [(set (mem:BLK (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n    (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (clobber (match_operand:SI 4 \"register_operand\" \"=r\"))\n+   (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=r\"))\n    (clobber (reg:SI  8))\n    (clobber (reg:SI  9))\n    (clobber (reg:SI 10))\n@@ -6903,11 +7257,11 @@\n   \"\")\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+  [(set (mem:BLK (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n    (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (clobber (match_operand:SI 4 \"register_operand\" \"=r\"))\n+   (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=r\"))\n    (clobber (reg:SI 10))\n    (clobber (reg:SI 11))\n    (clobber (reg:SI 12))\n@@ -6922,11 +7276,11 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+  [(set (mem:BLK (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n    (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (clobber (match_operand:SI 4 \"register_operand\" \"=r\"))\n+   (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=r\"))\n    (clobber (reg:SI 10))\n    (clobber (reg:SI 11))\n    (clobber (reg:SI 12))\n@@ -6952,8 +7306,8 @@\n   \"\")\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+  [(set (mem:BLK (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n    (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (clobber (match_scratch:DI 4 \"=&r\"))\n@@ -6965,8 +7319,8 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+  [(set (mem:BLK (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n    (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (clobber (match_scratch:DI 4 \"=&r\"))\n@@ -6989,8 +7343,8 @@\n   \"\")\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+  [(set (mem:BLK (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n    (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (clobber (match_scratch:SI 4 \"=&r\"))\n@@ -7002,8 +7356,8 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+  [(set (mem:BLK (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n    (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (clobber (match_scratch:SI 4 \"=&r\"))\n@@ -7274,7 +7628,7 @@\n ;; We move the back-chain and decrement the stack pointer.\n \n (define_expand \"allocate_stack\"\n-  [(set (match_operand 0 \"register_operand\" \"=r\")\n+  [(set (match_operand 0 \"gpc_reg_operand\" \"=r\")\n \t(minus (reg 1) (match_operand 1 \"reg_or_short_operand\" \"\")))\n    (set (reg 1)\n \t(minus (reg 1) (match_dup 1)))]\n@@ -7434,12 +7788,12 @@\n ;; to move the load of the new TOC before any loads from the TOC.\n \n (define_insn \"call_indirect_aix32\"\n-  [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"b\"))\n+  [(call (mem:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n \t (match_operand 1 \"const_int_operand\" \"n\"))\n    (use (match_operand 2 \"const_int_operand\" \"n\"))\n    (use (match_operand 3 \"offsettable_mem_operand\" \"o\"))\n-   (use (match_operand 4 \"register_operand\" \"r\"))\n-   (clobber (match_operand 5 \"register_operand\" \"=r\"))\n+   (use (match_operand 4 \"gpc_reg_operand\" \"r\"))\n+   (clobber (match_operand 5 \"gpc_reg_operand\" \"=r\"))\n    (clobber (match_scratch:SI 6 \"=&r\"))\n    (clobber (match_scratch:SI 7 \"=l\"))]\n   \"DEFAULT_ABI == ABI_AIX\n@@ -7449,12 +7803,12 @@\n    (set_attr \"length\" \"28\")])\n \n (define_insn \"call_indirect_aix64\"\n-  [(call (mem:SI (match_operand:DI 0 \"register_operand\" \"b\"))\n+  [(call (mem:SI (match_operand:DI 0 \"gpc_reg_operand\" \"b\"))\n \t (match_operand 1 \"const_int_operand\" \"n\"))\n    (use (match_operand 2 \"const_int_operand\" \"n\"))\n    (use (match_operand 3 \"offsettable_mem_operand\" \"o\"))\n-   (use (match_operand 4 \"register_operand\" \"r\"))\n-   (clobber (match_operand 5 \"register_operand\" \"=r\"))\n+   (use (match_operand 4 \"gpc_reg_operand\" \"r\"))\n+   (clobber (match_operand 5 \"gpc_reg_operand\" \"=r\"))\n    (clobber (match_scratch:SI 6 \"=&r\"))\n    (clobber (match_scratch:SI 7 \"=l\"))]\n   \"TARGET_64BIT && DEFAULT_ABI == ABI_AIX\n@@ -7465,12 +7819,12 @@\n \n (define_insn \"call_value_indirect_aix32\"\n   [(set (match_operand 0 \"register_operand\" \"fg\")\n-\t(call (mem:SI (match_operand:SI 1 \"register_operand\" \"b\"))\n+\t(call (mem:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\"))\n \t      (match_operand 2 \"const_int_operand\" \"n\")))\n    (use (match_operand 3 \"const_int_operand\" \"n\"))\n    (use (match_operand 4 \"offsettable_mem_operand\" \"o\"))\n-   (use (match_operand 5 \"register_operand\" \"r\"))\n-   (clobber (match_operand 6 \"register_operand\" \"=r\"))\n+   (use (match_operand 5 \"gpc_reg_operand\" \"r\"))\n+   (clobber (match_operand 6 \"gpc_reg_operand\" \"=r\"))\n    (clobber (match_scratch:SI 7 \"=&r\"))\n    (clobber (match_scratch:SI 8 \"=l\"))]\n   \"DEFAULT_ABI == ABI_AIX\n@@ -7481,12 +7835,12 @@\n \n (define_insn \"call_value_indirect_aix64\"\n   [(set (match_operand 0 \"register_operand\" \"fg\")\n-\t(call (mem:SI (match_operand:DI 1 \"register_operand\" \"b\"))\n+\t(call (mem:SI (match_operand:DI 1 \"gpc_reg_operand\" \"b\"))\n \t      (match_operand 2 \"const_int_operand\" \"n\")))\n    (use (match_operand 3 \"const_int_operand\" \"n\"))\n    (use (match_operand 4 \"offsettable_mem_operand\" \"o\"))\n-   (use (match_operand 5 \"register_operand\" \"r\"))\n-   (clobber (match_operand 6 \"register_operand\" \"=r\"))\n+   (use (match_operand 5 \"gpc_reg_operand\" \"r\"))\n+   (clobber (match_operand 6 \"gpc_reg_operand\" \"=r\"))\n    (clobber (match_scratch:SI 7 \"=&r\"))\n    (clobber (match_scratch:SI 8 \"=l\"))]\n   \"TARGET_64BIT && DEFAULT_ABI == ABI_AIX\n@@ -7510,11 +7864,11 @@\n ;; to move the load of the new TOC before any loads from the TOC.\n \n (define_insn \"call_indirect_nt\"\n-  [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"b\"))\n+  [(call (mem:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n \t (match_operand 1 \"const_int_operand\" \"n\"))\n    (use (match_operand 2 \"const_int_operand\" \"n\"))\n    (use (match_operand 3 \"offsettable_mem_operand\" \"o\"))\n-   (use (match_operand 4 \"register_operand\" \"r\"))\n+   (use (match_operand 4 \"gpc_reg_operand\" \"r\"))\n    (clobber (match_scratch:SI 5 \"=&r\"))\n    (clobber (match_scratch:SI 6 \"=l\"))]\n   \"DEFAULT_ABI == ABI_NT\n@@ -7525,11 +7879,11 @@\n \n (define_insn \"call_value_indirect_nt\"\n   [(set (match_operand 0 \"register_operand\" \"fg\")\n-\t(call (mem:SI (match_operand:SI 1 \"register_operand\" \"b\"))\n+\t(call (mem:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\"))\n \t      (match_operand 2 \"const_int_operand\" \"n\")))\n    (use (match_operand 3 \"const_int_operand\" \"n\"))\n    (use (match_operand 4 \"offsettable_mem_operand\" \"o\"))\n-   (use (match_operand 5 \"register_operand\" \"r\"))\n+   (use (match_operand 5 \"gpc_reg_operand\" \"r\"))\n    (clobber (match_scratch:SI 6 \"=&r\"))\n    (clobber (match_scratch:SI 7 \"=l\"))]\n   \"DEFAULT_ABI == ABI_NT"}]}