{"sha": "11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFjZjRkMTgzMTA3MWQyM2M4NGUxYWRkOGEyZDNmYmRkMzYwYTgyZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-06-14T05:30:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-06-14T05:30:09Z"}, "message": "tree.h (TYPE_USER_ALIGN, [...]): Define.\n\n\t* tree.h (TYPE_USER_ALIGN, DECL_USER_ALIGN): Define.\n\t(struct tree_type, struct tree_decl): Add user_align member.\n\t* stor-layout.c (layout_decl): Set DECL_USER_ALIGN.\n\t(place_union_field): If BIGGEST_FIELD_ALIGNMENT is defined\n\tand DECL_USER_ALIGN 0, cap alignment to this value.\n\t(place_field): Likewise.\n\t(finalize_type_size): Set TYPE_USER_ALIGN.\n\t(layout_type): Likewise.\n\t(initialize_sizetypes): Likewise.\n\t* c-common.c (decl_attributes): Set TYPE_USER_ALIGN resp.\n\tDECL_USER_ALIGN to 1.\n\t* c-decl.c (duplicate_decls): Set DECL_USER_ALIGN.\n\t(xfer_tag): Set TYPE_USER_ALIGN.\n\t(finish_struct): Set DECL_USER_ALIGN resp. TYPE_USER_ALIGN.\n\t(finish_enum): Likewise.\n\t* stmt.c (expand_decl): Set DECL_USER_ALIGN.\n\t(expand_anon_union_decl): Likewise.\n\t* tree.c (make_node): Set DECL_USER_ALIGN resp. TYPE_USER_ALIGN.\n\t(build_index_type): Set TYPE_USER_ALIGN.\n\t(build_range_type): Likewise.\n\t(build_common_tree_nodes_2): Likewise.\n\t* tm.texi (BIGGEST_FIELD_ALIGNMENT): Document the changed meaning.\n\nch/:\n\t* decl.c (init_decl_processing): Set TYPE_USER_ALIGN.\n\t(layout_enum): Set DECL_USER_ALIGN resp. TYPE_USER_ALIGN.\n\t* typeck.c (layout_chill_range_type): Set TYPE_USER_ALIGN.\n\t(apply_chill_field_layout): Set DECL_USER_ALIGN.\n\t(layout_chill_struct_type): Set TYPE_USER_ALIGN.\n\ncp/:\n\t* class.c (build_secondary_vtable): Set DECL_USER_ALIGN.\n\t(check_bitfield_decl, check_field_decl): Likewise.\n\t(build_vtbl_or_vbase_field, build_base_field): Likewise.\n\t(layout_class_type): Set DECL_USER_ALIGN resp. CLASSTYPE_USER_ALIGN.\n\t* decl.c (record_unknown_type): Set TYPE_USER_ALIGN.\n\t(xfer_tag, finish_enum): Likewise.\n\t* decl2.c (finish_builtin_type): Likewise.\n\t* init.c (init_init_processing): Likewise.\n\t* pt.c (instantiate_class_template): Likewise.\n\t* rtti.c (get_tinfo_decl, synthesize_tinfo_fn): Set DECL_USER_ALIGN.\n\t* cp-tree.h (struct lang_type): Add user_align member.\n\t(CLASSTYPE_USER_ALIGN): Define.\n\nf/:\n\t* com.c (ffecom_transform_common_): Set DECL_USER_ALIGN.\n\t(ffecom_transform_equiv_, ffecom_decl_field): Likewise.\n\t(ffecom_init_0): Set DECL_USER_ALIGN resp. TYPE_USER_ALIGN.\n\t(duplicate_decls): Set DECL_USER_ALIGN.\n\njava/:\n\t* typeck.c (build_java_array_type): Set TYPE_USER_ALIGN.\n\t* parse.y (java_complete_class): Set DECL_USER_ALIGN.\n\t* parse.c: Rebuilt.\n\nFrom-SVN: r34541", "tree": {"sha": "48e491d0a3752df2f9332542b6e3fd795956e7c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48e491d0a3752df2f9332542b6e3fd795956e7c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51d0e20cae600863c06b07134419166632180a80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d0e20cae600863c06b07134419166632180a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51d0e20cae600863c06b07134419166632180a80"}], "stats": {"total": 223, "additions": 200, "deletions": 23}, "files": [{"sha": "a62f254d1c89e4c2fc8fae999dead36382156d88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -1,3 +1,28 @@\n+2000-06-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.h (TYPE_USER_ALIGN, DECL_USER_ALIGN): Define.\n+\t(struct tree_type, struct tree_decl): Add user_align member.\n+\t* stor-layout.c (layout_decl): Set DECL_USER_ALIGN.\n+\t(place_union_field): If BIGGEST_FIELD_ALIGNMENT is defined\n+\tand DECL_USER_ALIGN 0, cap alignment to this value.\n+\t(place_field): Likewise.\n+\t(finalize_type_size): Set TYPE_USER_ALIGN.\n+\t(layout_type): Likewise.\n+\t(initialize_sizetypes): Likewise.\n+\t* c-common.c (decl_attributes): Set TYPE_USER_ALIGN resp.\n+\tDECL_USER_ALIGN to 1.\n+\t* c-decl.c (duplicate_decls): Set DECL_USER_ALIGN.\n+\t(xfer_tag): Set TYPE_USER_ALIGN.\n+\t(finish_struct): Set DECL_USER_ALIGN resp. TYPE_USER_ALIGN.\n+\t(finish_enum): Likewise.\n+\t* stmt.c (expand_decl): Set DECL_USER_ALIGN.\n+\t(expand_anon_union_decl): Likewise.\n+\t* tree.c (make_node): Set DECL_USER_ALIGN resp. TYPE_USER_ALIGN.\n+\t(build_index_type): Set TYPE_USER_ALIGN.\n+\t(build_range_type): Likewise.\n+\t(build_common_tree_nodes_2): Likewise.\n+\t* tm.texi (BIGGEST_FIELD_ALIGNMENT): Document the changed meaning.\n+\n 2000-06-13  Andreas Jaeger  <aj@suse.de>\n \n \t* configure.in: Use --enable-checking=misc,tree,gc by default if"}, {"sha": "445ec0941c4cf24ccaf976a1fe2dd803dd6cd830", "filename": "gcc/c-common.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -779,13 +779,19 @@ decl_attributes (node, attributes, prefix_attributes)\n \t    else if (i > HOST_BITS_PER_INT - 2)\n \t      error (\"requested alignment is too large\");\n \t    else if (is_type)\n-\t      TYPE_ALIGN (type) = (1 << i) * BITS_PER_UNIT;\n+\t      {\n+\t\tTYPE_ALIGN (type) = (1 << i) * BITS_PER_UNIT;\n+\t\tTYPE_USER_ALIGN (type) = 1;\n+\t      }\n \t    else if (TREE_CODE (decl) != VAR_DECL\n \t\t     && TREE_CODE (decl) != FIELD_DECL)\n \t      error_with_decl (decl,\n \t\t\t       \"alignment may not be specified for `%s'\");\n \t    else\n-\t      DECL_ALIGN (decl) = (1 << i) * BITS_PER_UNIT;\n+\t      {\n+\t\tDECL_ALIGN (decl) = (1 << i) * BITS_PER_UNIT;\n+\t\tDECL_USER_ALIGN (decl) = 1;\n+\t      }\n \t  }\n \t  break;\n "}, {"sha": "cabc4c197e2a466ec6a76038d6c842394d76f67f", "filename": "gcc/c-decl.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -1805,7 +1805,10 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t  DECL_MODE (newdecl) = DECL_MODE (olddecl);\n \t  if (TREE_CODE (olddecl) != FUNCTION_DECL)\n \t    if (DECL_ALIGN (olddecl) > DECL_ALIGN (newdecl))\n-\t      DECL_ALIGN (newdecl) = DECL_ALIGN (olddecl);\n+\t      {\n+\t\tDECL_ALIGN (newdecl) = DECL_ALIGN (olddecl);\n+\t\tDECL_USER_ALIGN (newdecl) |= DECL_ALIGN (olddecl);\n+\t      }\n \t}\n \n       /* Keep the old rtl since we can safely use it.  */\n@@ -5102,6 +5105,7 @@ xref_tag (code, name)\n \t to avoid crashing if it does not get defined.  */\n       TYPE_MODE (ref) = TYPE_MODE (unsigned_type_node);\n       TYPE_ALIGN (ref) = TYPE_ALIGN (unsigned_type_node);\n+      TYPE_USER_ALIGN (ref) = 0;\n       TREE_UNSIGNED (ref) = 1;\n       TYPE_PRECISION (ref) = TYPE_PRECISION (unsigned_type_node);\n       TYPE_MIN_VALUE (ref) = TYPE_MIN_VALUE (unsigned_type_node);\n@@ -5328,8 +5332,11 @@ finish_struct (t, fieldlist, attributes)\n #endif\n #ifdef PCC_BITFIELD_TYPE_MATTERS\n \t\t  if (PCC_BITFIELD_TYPE_MATTERS)\n-\t\t    DECL_ALIGN (x) = MAX (DECL_ALIGN (x),\n-\t\t\t\t\t  TYPE_ALIGN (TREE_TYPE (x)));\n+\t\t    {\n+\t\t      DECL_ALIGN (x) = MAX (DECL_ALIGN (x),\n+\t\t\t\t\t    TYPE_ALIGN (TREE_TYPE (x)));\n+\t\t      DECL_USER_ALIGN (x) |= TYPE_USER_ALIGN (TREE_TYPE (x));\n+\t\t    }\n #endif\n \t\t}\n \t    }\n@@ -5343,6 +5350,8 @@ finish_struct (t, fieldlist, attributes)\n \t  /* Non-bit-fields are aligned for their type, except packed\n \t     fields which require only BITS_PER_UNIT alignment.  */\n \t  DECL_ALIGN (x) = MAX (DECL_ALIGN (x), min_align);\n+\t  if (! DECL_PACKED (x))\n+\t    DECL_USER_ALIGN (x) |= TYPE_USER_ALIGN (TREE_TYPE (x));\n \t}\n \n       DECL_INITIAL (x) = 0;\n@@ -5400,6 +5409,7 @@ finish_struct (t, fieldlist, attributes)\n       TYPE_FIELDS (x) = TYPE_FIELDS (t);\n       TYPE_LANG_SPECIFIC (x) = TYPE_LANG_SPECIFIC (t);\n       TYPE_ALIGN (x) = TYPE_ALIGN (t);\n+      TYPE_USER_ALIGN (x) = TYPE_USER_ALIGN (t);\n     }\n \n   /* If this was supposed to be a transparent union, but we can't\n@@ -5584,6 +5594,7 @@ finish_enum (enumtype, values, attributes)\n \t  DECL_SIZE (enu) = TYPE_SIZE (enumtype);\n \t  DECL_SIZE_UNIT (enu) = TYPE_SIZE_UNIT (enumtype);\n \t  DECL_ALIGN (enu) = TYPE_ALIGN (enumtype);\n+\t  DECL_USER_ALIGN (enu) = TYPE_USER_ALIGN (enumtype);\n \t  DECL_MODE (enu) = TYPE_MODE (enumtype);\n \t  DECL_INITIAL (enu) = convert (enumtype, DECL_INITIAL (enu));\n \n@@ -5607,6 +5618,7 @@ finish_enum (enumtype, values, attributes)\n       TYPE_MODE (tem) = TYPE_MODE (enumtype);\n       TYPE_PRECISION (tem) = TYPE_PRECISION (enumtype);\n       TYPE_ALIGN (tem) = TYPE_ALIGN (enumtype);\n+      TYPE_USER_ALIGN (tem) = TYPE_USER_ALIGN (enumtype);\n       TREE_UNSIGNED (tem) = TREE_UNSIGNED (enumtype);\n     }\n "}, {"sha": "59ab934233682300902f0fbcf69ad71e1c41b0e5", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -1,3 +1,11 @@\n+2000-06-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* decl.c (init_decl_processing): Set TYPE_USER_ALIGN.\n+\t(layout_enum): Set DECL_USER_ALIGN resp. TYPE_USER_ALIGN.\n+\t* typeck.c (layout_chill_range_type): Set TYPE_USER_ALIGN.\n+\t(apply_chill_field_layout): Set DECL_USER_ALIGN.\n+\t(layout_chill_struct_type): Set TYPE_USER_ALIGN.\n+\n Tue Jun 13 15:30:46 2000  Maciej W. Rozycki  <macro@ds2.pg.gda.pl>\n \n \t* Make-lang.in (CHILL.install-common): Use $(INSTALL_SCRIPT), not"}, {"sha": "d5fcb1d26aa8b9a2dcf2b1d1506b773801072a06", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -3447,6 +3447,7 @@ init_decl_processing ()\n   /* We are not going to have real types in C with less than byte alignment,\n      so we might as well not have any types that claim to have it.  */\n   TYPE_ALIGN (void_type_node) = BITS_PER_UNIT;\n+  TYPE_USER_ALIGN (void_type_node) = 0;\n \n   /* This is for wide string constants.  */\n   wchar_type_node = short_unsigned_type_node;\n@@ -4596,6 +4597,7 @@ layout_enum (enumtype)\n       DECL_SIZE (decl) = TYPE_SIZE (enumtype);\n       DECL_SIZE_UNIT (decl) = TYPE_SIZE_UNIT (enumtype);\n       DECL_ALIGN (decl) = TYPE_ALIGN (enumtype);\n+      DECL_USER_ALIGN (decl) = TYPE_USER_ALIGN (enumtype);\n \n       /* Set the TREE_VALUE to the name, rather than the decl,\n \t since that is what the rest of the compiler expects. */\n@@ -4612,6 +4614,7 @@ layout_enum (enumtype)\n       TYPE_MODE (tem) = TYPE_MODE (enumtype);\n       TYPE_PRECISION (tem) = TYPE_PRECISION (enumtype);\n       TYPE_ALIGN (tem) = TYPE_ALIGN (enumtype);\n+      TYPE_USER_ALIGN (tem) = TYPE_USER_ALIGN (enumtype);\n       TREE_UNSIGNED (tem) = TREE_UNSIGNED (enumtype);\n     }\n "}, {"sha": "7c4f554e7deb937bb6624f0d030a606307183044", "filename": "gcc/ch/typeck.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fch%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fch%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftypeck.c?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -2725,6 +2725,7 @@ layout_chill_range_type (rangetype, must_be_const)\n   TYPE_SIZE (rangetype) = TYPE_SIZE (type);\n   TYPE_SIZE_UNIT (rangetype) = TYPE_SIZE_UNIT (type);\n   TYPE_ALIGN (rangetype) = TYPE_ALIGN (type);\n+  TYPE_USER_ALIGN (rangetype) = TYPE_USER_ALIGN (type);\n   TREE_UNSIGNED (rangetype) = TREE_UNSIGNED (type);\n   CH_NOVELTY (rangetype) = CH_NOVELTY (type);\n   return rangetype;\n@@ -3113,7 +3114,10 @@ apply_chill_field_layout (decl, next_struct_offset)\n \t  DECL_SIZE (decl) = bitsize_int (natural_length);\n \t}\n       else\n-\tDECL_ALIGN (decl) = BITS_PER_UNIT;\n+\t{\n+\t  DECL_ALIGN (decl) = BITS_PER_UNIT;\n+\t  DECL_USER_ALIGN (decl) = 0;\n+\t}\n \n       DECL_PACKED (decl) = 1;\n       *next_struct_offset += natural_length;\n@@ -3351,6 +3355,7 @@ layout_chill_struct_type (t)\n       TYPE_FIELDS (x) = TYPE_FIELDS (t);\n       TYPE_LANG_SPECIFIC (x) = TYPE_LANG_SPECIFIC (t);\n       TYPE_ALIGN (x) = TYPE_ALIGN (t);\n+      TYPE_USER_ALIGN (x) = TYPE_USER_ALIGN (t);\n     }\n \n   resume_momentary (old_momentary);"}, {"sha": "ff78949a53a264cbf2dc63a1f3695ebebe17c93f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -1,3 +1,18 @@\n+2000-06-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* class.c (build_secondary_vtable): Set DECL_USER_ALIGN.\n+\t(check_bitfield_decl, check_field_decl): Likewise.\n+\t(build_vtbl_or_vbase_field, build_base_field): Likewise.\n+\t(layout_class_type): Set DECL_USER_ALIGN resp. CLASSTYPE_USER_ALIGN.\n+\t* decl.c (record_unknown_type): Set TYPE_USER_ALIGN.\n+\t(xfer_tag, finish_enum): Likewise.\n+\t* decl2.c (finish_builtin_type): Likewise.\n+\t* init.c (init_init_processing): Likewise.\n+\t* pt.c (instantiate_class_template): Likewise.\n+\t* rtti.c (get_tinfo_decl, synthesize_tinfo_fn): Set DECL_USER_ALIGN.\n+\t* cp-tree.h (struct lang_type): Add user_align member.\n+\t(CLASSTYPE_USER_ALIGN): Define.\n+\n Tue Jun 13 15:48:03 2000  Maciej W. Rozycki  <macro@ds2.pg.gda.pl>\n \n \t* Make-lang.in (c++.install-common): Install g++-cross in"}, {"sha": "5d8390f2b5bfd2585a9fc18f1e4e0718fd450c5b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -984,6 +984,7 @@ build_secondary_vtable (binfo, for_type)\n \n   new_decl = build_vtable (for_type, name, TREE_TYPE (orig_decl));\n   DECL_ALIGN (new_decl) = DECL_ALIGN (orig_decl);\n+  DECL_USER_ALIGN (new_decl) = DECL_USER_ALIGN (orig_decl);\n   BINFO_VTABLE (binfo) = pushdecl_top_level (new_decl);\n \n #ifdef GATHER_STATISTICS\n@@ -3225,8 +3226,11 @@ check_bitfield_decl (field)\n #endif\n #ifdef PCC_BITFIELD_TYPE_MATTERS\n \t  if (PCC_BITFIELD_TYPE_MATTERS)\n-\t    DECL_ALIGN (field) = MAX (DECL_ALIGN (field), \n-\t\t\t\t      TYPE_ALIGN (type));\n+\t    {\n+\t      DECL_ALIGN (field) = MAX (DECL_ALIGN (field), \n+\t\t\t\t\tTYPE_ALIGN (type));\n+\t      DECL_USER_ALIGN (field) |= TYPE_USER_ALIGN (type);\n+\t    }\n #endif\n \t}\n     }\n@@ -3236,6 +3240,7 @@ check_bitfield_decl (field)\n       DECL_BIT_FIELD (field) = 0;\n       CLEAR_DECL_C_BIT_FIELD (field);\n       DECL_ALIGN (field) = MAX (DECL_ALIGN (field), TYPE_ALIGN (type));\n+      DECL_USER_ALIGN (field) |= TYPE_USER_ALIGN (type);\n     }\n }\n \n@@ -3326,6 +3331,8 @@ check_field_decl (field, t, cant_have_const_ctor,\n \t\t\t    (DECL_PACKED (field) \n \t\t\t     ? BITS_PER_UNIT\n \t\t\t     : TYPE_ALIGN (TREE_TYPE (field))));\n+  if (! DECL_PACKED (field))\n+    DECL_USER_ALIGN (field) |= TYPE_USER_ALIGN (TREE_TYPE (field));\n }\n \n /* Check the data members (both static and non-static), class-scoped\n@@ -3625,6 +3632,7 @@ build_vtbl_or_vbase_field (name, assembler_name, type, class_type, fcontext,\n   DECL_FIELD_CONTEXT (field) = class_type;\n   DECL_FCONTEXT (field) = fcontext;\n   DECL_ALIGN (field) = TYPE_ALIGN (type);\n+  DECL_USER_ALIGN (field) = TYPE_USER_ALIGN (type);\n \n   /* Return it.  */\n   return field;\n@@ -3844,6 +3852,7 @@ build_base_field (rli, binfo, empty_p, base_align, v)\n   DECL_SIZE (decl) = CLASSTYPE_SIZE (basetype);\n   DECL_SIZE_UNIT (decl) = CLASSTYPE_SIZE_UNIT (basetype);\n   DECL_ALIGN (decl) = CLASSTYPE_ALIGN (basetype);\n+  DECL_USER_ALIGN (decl) = CLASSTYPE_USER_ALIGN (basetype);\n   \n   if (! flag_new_abi)\n     {\n@@ -4800,6 +4809,7 @@ layout_class_type (t, empty_p, vfuns_p,\n \t\t\t\tTYPE_SIZE (integer_type));\n \t  DECL_SIZE (field) = TYPE_SIZE (integer_type);\n \t  DECL_ALIGN (field) = TYPE_ALIGN (integer_type);\n+\t  DECL_USER_ALIGN (field) = TYPE_USER_ALIGN (integer_type);\n \t}\n       else\n \tpadding = NULL_TREE;\n@@ -4821,6 +4831,7 @@ layout_class_type (t, empty_p, vfuns_p,\n \t  DECL_BIT_FIELD (padding_field) = 1;\n \t  DECL_SIZE (padding_field) = padding;\n \t  DECL_ALIGN (padding_field) = 1;\n+\t  DECL_USER_ALIGN (padding_field) = 0;\n \t  layout_nonempty_base_or_field (rli, padding_field, NULL_TREE, v);\n \t}\n     }\n@@ -4897,6 +4908,7 @@ layout_class_type (t, empty_p, vfuns_p,\n     }\n \n   CLASSTYPE_ALIGN (t) = TYPE_ALIGN (t);\n+  CLASSTYPE_USER_ALIGN (t) = TYPE_USER_ALIGN (t);\n \n   /* Set the TYPE_DECL for this type to contain the right\n      value for DECL_OFFSET, so that we can use it as part"}, {"sha": "8fd811573d32c4fbeff6fb4ac83c621bdad39f36", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -1395,6 +1395,7 @@ struct lang_type\n   unsigned has_abstract_assign_ref : 1;\n   unsigned non_aggregate : 1;\n   unsigned is_partial_instantiation : 1;\n+  unsigned user_align : 1;\n \n   /* When adding a flag here, consider whether or not it ought to\n      apply to a template instance if it applies to the template.  If\n@@ -1403,7 +1404,7 @@ struct lang_type\n   /* There are some bits left to fill out a 32-bit word.  Keep track\n      of this by updating the size of this bitfield whenever you add or\n      remove a flag.  */\n-  unsigned dummy : 9;\n+  unsigned dummy : 8;\n       \n   int vsize;\n   int vfield_parent;\n@@ -1637,6 +1638,7 @@ struct lang_type\n #define CLASSTYPE_SIZE(NODE) (TYPE_LANG_SPECIFIC(NODE)->size)\n #define CLASSTYPE_SIZE_UNIT(NODE) (TYPE_LANG_SPECIFIC(NODE)->size_unit)\n #define CLASSTYPE_ALIGN(NODE) (TYPE_LANG_SPECIFIC(NODE)->align)\n+#define CLASSTYPE_USER_ALIGN(NODE) (TYPE_LANG_SPECIFIC(NODE)->user_align)\n \n /* The alignment of NODE, without its virtual bases, in bytes.  */\n #define CLASSTYPE_ALIGN_UNIT(NODE) \\"}, {"sha": "93e6c3f40deba65029a0fd63a45848dde3f68d80", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -6200,6 +6200,7 @@ record_unknown_type (type, name)\n   TYPE_DECL_SUPPRESS_DEBUG (decl) = 1;\n   TYPE_SIZE (type) = TYPE_SIZE (void_type_node);\n   TYPE_ALIGN (type) = 1;\n+  TYPE_USER_ALIGN (type) = 0;\n   TYPE_MODE (type) = TYPE_MODE (void_type_node);\n }\n \n@@ -12884,6 +12885,7 @@ xref_tag (code_type_node, name, globalize)\n \t     to avoid crashing if it does not get defined.  */\n \t  TYPE_MODE (ref) = TYPE_MODE (unsigned_type_node);\n \t  TYPE_ALIGN (ref) = TYPE_ALIGN (unsigned_type_node);\n+\t  TYPE_USER_ALIGN (ref) = 0;\n \t  TREE_UNSIGNED (ref) = 1;\n \t  TYPE_PRECISION (ref) = TYPE_PRECISION (unsigned_type_node);\n \t  TYPE_MIN_VALUE (ref) = TYPE_MIN_VALUE (unsigned_type_node);\n@@ -13297,6 +13299,7 @@ finish_enum (enumtype)\n \t  TYPE_MODE (tem) = TYPE_MODE (enumtype);\n \t  TYPE_PRECISION (tem) = TYPE_PRECISION (enumtype);\n \t  TYPE_ALIGN (tem) = TYPE_ALIGN (enumtype);\n+\t  TYPE_USER_ALIGN (tem) = TYPE_USER_ALIGN (enumtype);\n \t  TREE_UNSIGNED (tem) = TREE_UNSIGNED (enumtype);\n \t}\n "}, {"sha": "75fed4674ffd9af292afac7dc6bc1d9427a14273", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -2297,6 +2297,7 @@ finish_builtin_type (type, name, fields, len, align_type)\n     }\n   DECL_FIELD_CONTEXT (fields[i]) = type;\n   TYPE_ALIGN (type) = TYPE_ALIGN (align_type);\n+  TYPE_USER_ALIGN (type) = TYPE_USER_ALIGN (align_type);\n   layout_type (type);\n #if 0 /* not yet, should get fixed properly later */\n   TYPE_NAME (type) = make_type_decl (get_identifier (name), type);"}, {"sha": "bb07c1bb8f2e7cf88709a1129a06f697f2bec8a0", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -74,6 +74,7 @@ void init_init_processing ()\n   /* Use the biggest alignment supported by the target to prevent operator\n      new from returning misaligned pointers. */\n   TYPE_ALIGN (BI_header_type) = BIGGEST_ALIGNMENT;\n+  TYPE_USER_ALIGN (BI_header_type) = 0;\n   finish_builtin_type (BI_header_type, \"__new_cookie\", fields,\n \t\t       0, BI_header_type);\n   BI_header_size = size_in_bytes (BI_header_type);"}, {"sha": "625fc1a08bb7e76b6033baccd6245789a6cc0c38", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -4930,6 +4930,7 @@ instantiate_class_template (type)\n     = TYPE_USES_VIRTUAL_BASECLASSES (pattern);\n   TYPE_PACKED (type) = TYPE_PACKED (pattern);\n   TYPE_ALIGN (type) = TYPE_ALIGN (pattern);\n+  TYPE_USER_ALIGN (type) = TYPE_USER_ALIGN (pattern);\n   TYPE_FOR_JAVA (type) = TYPE_FOR_JAVA (pattern); /* For libjava's JArray<T> */\n   if (ANON_AGGR_TYPE_P (pattern))\n     SET_ANON_AGGR_TYPE_P (type);"}, {"sha": "3dd1845f4b80d8a7cabab586a848b93fad77a772", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -438,6 +438,7 @@ get_tinfo_decl (type)\n       \n       DECL_ARTIFICIAL (d) = 1;\n       DECL_ALIGN (d) = TYPE_ALIGN (ptr_type_node);\n+      DECL_USER_ALIGN (d) = 0;\n       TREE_READONLY (d) = 1;\n       TREE_STATIC (d) = 1;\n       DECL_EXTERNAL (d) = 1;\n@@ -1180,6 +1181,7 @@ synthesize_tinfo_fn (fndecl)\n   DECL_COMMON (tdecl) = 1;\n   TREE_USED (tdecl) = 1;\n   DECL_ALIGN (tdecl) = TYPE_ALIGN (ptr_type_node);\n+  DECL_USER_ALIGN (tdecl) = 0;\n   cp_finish_decl (tdecl, NULL_TREE, NULL_TREE, 0);\n \n   /* Begin processing the function.  */"}, {"sha": "e1efb7fb5989557847fea5ab4464c24af04d36ec", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -1,3 +1,10 @@\n+2000-06-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* com.c (ffecom_transform_common_): Set DECL_USER_ALIGN.\n+\t(ffecom_transform_equiv_, ffecom_decl_field): Likewise.\n+\t(ffecom_init_0): Set DECL_USER_ALIGN resp. TYPE_USER_ALIGN.\n+\t(duplicate_decls): Set DECL_USER_ALIGN.\n+\n Sun Jun 11 00:03:00 2000  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* com.c (lang_get_alias_set): Mark parameter with ATTRIBUTE_UNUSED."}, {"sha": "7611d2408a3a617f362419d1ec88476432dd4759", "filename": "gcc/f/com.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -8801,6 +8801,7 @@ ffecom_transform_common_ (ffesymbol s)\n      this seems easy enough.  */\n \n   DECL_ALIGN (cbt) = BIGGEST_ALIGNMENT;\n+  DECL_USER_ALIGN (cbt) = 0;\n \n   if (is_init && (ffestorag_init (st) == NULL))\n     init = ffecom_init_zero_ (cbt);\n@@ -8936,6 +8937,7 @@ ffecom_transform_equiv_ (ffestorag eqst)\n      this seems easy enough.  */\n \n   DECL_ALIGN (eqt) = BIGGEST_ALIGNMENT;\n+  DECL_USER_ALIGN (eqt) = 0;\n \n   if ((!is_init && ffe_is_init_local_zero ())\n       || (is_init && (ffestorag_init (eqst) == NULL)))\n@@ -10999,6 +11001,7 @@ ffecom_decl_field (tree context, tree prevfield,\n   field = build_decl (FIELD_DECL, get_identifier (name), type);\n   DECL_CONTEXT (field) = context;\n   DECL_ALIGN (field) = 0;\n+  DECL_USER_ALIGN (field) = 0;\n   if (prevfield != NULL_TREE)\n     TREE_CHAIN (prevfield) = field;\n \n@@ -11634,6 +11637,7 @@ ffecom_init_0 ()\n   /* We are not going to have real types in C with less than byte alignment,\n      so we might as well not have any types that claim to have it.  */\n   TYPE_ALIGN (void_type_node) = BITS_PER_UNIT;\n+  TYPE_USER_ALIGN (void_type_node) = 0;\n \n   string_type_node = build_pointer_type (char_type_node);\n \n@@ -12055,6 +12059,7 @@ ffecom_init_0 ()\n \tDECL_CONTEXT (ffecom_multi_fields_[i][j])\n \t  = ffecom_multi_type_node_;\n \tDECL_ALIGN (ffecom_multi_fields_[i][j]) = 0;\n+\tDECL_USER_ALIGN (ffecom_multi_fields_[i][j]) = 0;\n \tTREE_CHAIN (ffecom_multi_fields_[i][j]) = field;\n \tfield = ffecom_multi_fields_[i][j];\n       }\n@@ -13783,7 +13788,10 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t  DECL_SIZE_UNIT (newdecl) = DECL_SIZE_UNIT (olddecl);\n \t  if (TREE_CODE (olddecl) != FUNCTION_DECL)\n \t    if (DECL_ALIGN (olddecl) > DECL_ALIGN (newdecl))\n-\t      DECL_ALIGN (newdecl) = DECL_ALIGN (olddecl);\n+\t      {\n+\t\tDECL_ALIGN (newdecl) = DECL_ALIGN (olddecl);\n+\t\tDECL_USER_ALIGN (newdecl) |= DECL_USER_ALIGN (olddecl);\n+\t      }\n \t}\n \n       /* Keep the old rtl since we can safely use it.  */"}, {"sha": "b19bc570c350ff952c88ea549fefe3cc7ee18a4f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -1,3 +1,9 @@\n+2000-06-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* typeck.c (build_java_array_type): Set TYPE_USER_ALIGN.\n+\t* parse.y (java_complete_class): Set DECL_USER_ALIGN.\n+\t* parse.c: Rebuilt.\n+\n 2000-06-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* decl.c (create_primitive_vtable): Prototype."}, {"sha": "22c5bf1b074f3df8d04023db11be7594491a9427", "filename": "gcc/java/parse.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -7949,6 +7949,7 @@ java_complete_class ()\n \t\tpop_obstacks ();\n \t\tTREE_TYPE (field_decl) = field_type;\n \t\tDECL_ALIGN (field_decl) = 0;\n+\t\tDECL_USER_ALIGN (field_decl) = 0;\n \t\tlayout_decl (field_decl, 0);\n \t\tSOURCE_FRONTEND_DEBUG \n \t\t  ((\"Completed field/var decl `%s' with `%s'\","}, {"sha": "6b13e0c66141147992dd07faf30d5c7584054b9a", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -5249,6 +5249,7 @@ java_complete_class ()\n \t\tpop_obstacks ();\n \t\tTREE_TYPE (field_decl) = field_type;\n \t\tDECL_ALIGN (field_decl) = 0;\n+\t\tDECL_USER_ALIGN (field_decl) = 0;\n \t\tlayout_decl (field_decl, 0);\n \t\tSOURCE_FRONTEND_DEBUG \n \t\t  ((\"Completed field/var decl `%s' with `%s'\","}, {"sha": "1a7256d64820cc443498a5ae1b0760f8ab27d232", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -421,7 +421,10 @@ build_java_array_type (element_type, length)\n       TREE_CHAIN (fld) = arfld;\n     }\n   else\n-    TYPE_ALIGN (t) = TYPE_ALIGN (element_type);\n+    {\n+      TYPE_ALIGN (t) = TYPE_ALIGN (element_type);\n+      TYPE_USER_ALIGN (t) = TYPE_USER_ALIGN (element_type);\n+    }\n   pop_obstacks ();\n \n   /* We could layout_class, but that loads java.lang.Object prematurely."}, {"sha": "f97faaa0081f2541aa0de165fa73d6432e082176", "filename": "gcc/stmt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -3849,6 +3849,7 @@ expand_decl (decl)\n       /* Set alignment we actually gave this decl.  */\n       DECL_ALIGN (decl) = (DECL_MODE (decl) == BLKmode ? BIGGEST_ALIGNMENT\n \t\t\t   : GET_MODE_BITSIZE (DECL_MODE (decl)));\n+      DECL_USER_ALIGN (decl) = 0;\n \n       if (oldaddr)\n \t{\n@@ -3901,6 +3902,7 @@ expand_decl (decl)\n #else\n       DECL_ALIGN (decl) = BIGGEST_ALIGNMENT;\n #endif\n+      DECL_USER_ALIGN (decl) = 0;\n     }\n }\n \f\n@@ -4204,6 +4206,7 @@ expand_anon_union_decl (decl, cleanup, decl_elts)\n \n       /* Propagate the union's alignment to the elements.  */\n       DECL_ALIGN (decl_elt) = DECL_ALIGN (decl);\n+      DECL_USER_ALIGN (decl_elt) = DECL_USER_ALIGN (decl);\n \n       /* If the element has BLKmode and the union doesn't, the union is\n          aligned such that the element doesn't need to have BLKmode, so"}, {"sha": "65ac15b12bc5d25ad9405f2c26dc0b2c3034302a", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 45, "deletions": 8, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -330,7 +330,10 @@ layout_decl (decl, known_align)\n       && (DECL_ALIGN (decl) == 0\n \t  || (! (code == FIELD_DECL && DECL_PACKED (decl))\n \t      && TYPE_ALIGN (type) > DECL_ALIGN (decl))))\n-    DECL_ALIGN (decl) = TYPE_ALIGN (type);\n+    {\t      \n+      DECL_ALIGN (decl) = TYPE_ALIGN (type);\n+      DECL_USER_ALIGN (decl) = TYPE_USER_ALIGN (type);\n+    }\n \n   /* For fields, set the bit field type and update the alignment.  */\n   if (code == FIELD_DECL)\n@@ -339,7 +342,10 @@ layout_decl (decl, known_align)\n       if (maximum_field_alignment != 0)\n \tDECL_ALIGN (decl) = MIN (DECL_ALIGN (decl), maximum_field_alignment);\n       else if (DECL_PACKED (decl))\n-\tDECL_ALIGN (decl) = MIN (DECL_ALIGN (decl), BITS_PER_UNIT);\n+\t{\n+\t  DECL_ALIGN (decl) = MIN (DECL_ALIGN (decl), BITS_PER_UNIT);\n+\t  DECL_USER_ALIGN (decl) = 0;\n+\t}\n     }\n \n   /* See if we can use an ordinary integer mode for a bit-field. \n@@ -572,14 +578,27 @@ place_union_field (rli, field)\n      record_layout_info rli;\n      tree field;\n {\n+  unsigned int desired_align;\n+\n   layout_decl (field, 0);\n   \n   DECL_FIELD_OFFSET (field) = size_zero_node;\n   DECL_FIELD_BIT_OFFSET (field) = bitsize_zero_node;\n   DECL_OFFSET_ALIGN (field) = BIGGEST_ALIGNMENT;\n \n+  desired_align = DECL_ALIGN (field);\n+\n+#ifdef BIGGEST_FIELD_ALIGNMENT\n+  /* Some targets (i.e. i386) limit union field alignment\n+     to a lower boundary than alignment of variables unless\n+     it was overridden by attribute aligned.  */\n+  if (! DECL_USER_ALIGN (field))\n+    desired_align =\n+      MIN (desired_align, (unsigned) BIGGEST_FIELD_ALIGNMENT);\n+#endif\n+\n   /* Union must be at least as aligned as any field requires.  */\n-  rli->record_align = MAX (rli->record_align, DECL_ALIGN (field));\n+  rli->record_align = MAX (rli->record_align, desired_align);\n \n #ifdef PCC_BITFIELD_TYPE_MATTERS\n   /* On the m88000, a bit field of declare type `int' forces the\n@@ -615,6 +634,7 @@ place_field (rli, field)\n      record as it presently stands.  */\n   unsigned int known_align;\n   unsigned int actual_align;\n+  unsigned int user_align;\n   /* The type of this field.  */\n   tree type = TREE_TYPE (field);\n  \n@@ -660,14 +680,21 @@ place_field (rli, field)\n      packed field, use the alignment as specified, disregarding what\n      the type would want.  */\n   desired_align = DECL_ALIGN (field);\n+  user_align = DECL_USER_ALIGN (field);\n   layout_decl (field, known_align);\n   if (! DECL_PACKED (field))\n-    desired_align = DECL_ALIGN (field);\n+    {\n+      desired_align = DECL_ALIGN (field);\n+      user_align = DECL_USER_ALIGN (field);\n+    }\n \n-  /* Some targets (i.e. VMS) limit struct field alignment\n-     to a lower boundary than alignment of variables.  */\n #ifdef BIGGEST_FIELD_ALIGNMENT\n-  desired_align = MIN (desired_align, (unsigned) BIGGEST_FIELD_ALIGNMENT);\n+  /* Some targets (i.e. i386, VMS) limit struct field alignment\n+     to a lower boundary than alignment of variables unless\n+     it was overridden by attribute aligned.  */\n+  if (! user_align)\n+    desired_align =\n+      MIN (desired_align, (unsigned) BIGGEST_FIELD_ALIGNMENT);\n #endif\n #ifdef ADJUST_FIELD_ALIGN\n   desired_align = ADJUST_FIELD_ALIGN (field, desired_align);\n@@ -902,6 +929,7 @@ finalize_record_size (rli)\n #else\n   TYPE_ALIGN (rli->t) = MAX (TYPE_ALIGN (rli->t), rli->record_align);\n #endif\n+  TYPE_USER_ALIGN (rli->t) = 1;\n \n   /* Compute the size so far.  Be sure to allow for extra bits in the\n      size in bytes.  We have guaranteed above that it will be no more\n@@ -1083,7 +1111,10 @@ finalize_type_size (type)\n \t  || (TREE_CODE (type) != RECORD_TYPE && TREE_CODE (type) != UNION_TYPE\n \t      && TREE_CODE (type) != QUAL_UNION_TYPE\n \t      && TREE_CODE (type) != ARRAY_TYPE)))\n-    TYPE_ALIGN (type) = GET_MODE_ALIGNMENT (TYPE_MODE (type));\n+    {\n+      TYPE_ALIGN (type) = GET_MODE_ALIGNMENT (TYPE_MODE (type));\n+      TYPE_USER_ALIGN (type) = 0;\n+    }\n \n   /* Do machine-dependent extra alignment.  */\n #ifdef ROUND_TYPE_ALIGN\n@@ -1133,6 +1164,7 @@ finalize_type_size (type)\n       tree size = TYPE_SIZE (type);\n       tree size_unit = TYPE_SIZE_UNIT (type);\n       unsigned int align = TYPE_ALIGN (type);\n+      unsigned int user_align = TYPE_USER_ALIGN (type);\n       enum machine_mode mode = TYPE_MODE (type);\n \n       /* Copy it into all variants.  */\n@@ -1143,6 +1175,7 @@ finalize_type_size (type)\n \t  TYPE_SIZE (variant) = size;\n \t  TYPE_SIZE_UNIT (variant) = size_unit;\n \t  TYPE_ALIGN (variant) = align;\n+\t  TYPE_USER_ALIGN (variant) = user_align;\n \t  TYPE_MODE (variant) = mode;\n \t}\n     }\n@@ -1256,6 +1289,7 @@ layout_type (type)\n     case VOID_TYPE:\n       /* This is an incomplete type and so doesn't have a size.  */\n       TYPE_ALIGN (type) = 1;\n+      TYPE_USER_ALIGN (type) = 0;\n       TYPE_MODE (type) = VOIDmode;\n       break;\n \n@@ -1460,6 +1494,7 @@ layout_type (type)\n \t  TYPE_SIZE (type) = bitsize_int (rounded_size);\n \t  TYPE_SIZE_UNIT (type) = size_int (rounded_size / BITS_PER_UNIT);\n \t  TYPE_ALIGN (type) = alignment;\n+\t  TYPE_USER_ALIGN (type) = 0;\n \t  TYPE_PRECISION (type) = size_in_bits;\n \t}\n       break;\n@@ -1468,6 +1503,7 @@ layout_type (type)\n       /* The size may vary in different languages, so the language front end\n \t should fill in the size.  */\n       TYPE_ALIGN (type) = BIGGEST_ALIGNMENT;\n+      TYPE_USER_ALIGN (type) = 0;\n       TYPE_MODE  (type) = BLKmode;\n       break;\n \n@@ -1534,6 +1570,7 @@ initialize_sizetypes ()\n \n   TYPE_MODE (t) = SImode;\n   TYPE_ALIGN (t) = GET_MODE_ALIGNMENT (SImode);\n+  TYPE_USER_ALIGN (t) = 0;\n   TYPE_SIZE (t) = build_int_2 (GET_MODE_BITSIZE (SImode), 0);\n   TYPE_SIZE_UNIT (t) = build_int_2 (GET_MODE_SIZE (SImode), 0);\n   TREE_UNSIGNED (t) = 1;"}, {"sha": "458b9ba50fe4c249973a886963293c98e210eb23", "filename": "gcc/tm.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -849,9 +849,10 @@ on machines that don't have byte or half-word store operations.\n \n @findex BIGGEST_FIELD_ALIGNMENT\n @item BIGGEST_FIELD_ALIGNMENT\n-Biggest alignment that any structure field can require on this machine,\n-in bits.  If defined, this overrides @code{BIGGEST_ALIGNMENT} for\n-structure fields only.\n+Biggest alignment that any structure or union field can require on this\n+machine, in bits.  If defined, this overrides @code{BIGGEST_ALIGNMENT} for\n+structure and union fields only, unless the field alignment has been set\n+by the @code{__attribute__ ((aligned (@var{n})))} construct.\n \n @findex ADJUST_FIELD_ALIGN\n @item ADJUST_FIELD_ALIGN (@var{field}, @var{computed})"}, {"sha": "933bba81fd5df6c105a1f0275541015067d70fca", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -1063,6 +1063,7 @@ make_node (code)\n     case 'd':\n       if (code != FUNCTION_DECL)\n \tDECL_ALIGN (t) = 1;\n+      DECL_USER_ALIGN (t) = 0;\n       DECL_IN_SYSTEM_HEADER (t) = in_system_header;\n       DECL_SOURCE_LINE (t) = lineno;\n       DECL_SOURCE_FILE (t) = \n@@ -1076,6 +1077,7 @@ make_node (code)\n     case 't':\n       TYPE_UID (t) = next_type_uid++;\n       TYPE_ALIGN (t) = 1;\n+      TYPE_USER_ALIGN (t) = 0;\n       TYPE_MAIN_VARIANT (t) = t;\n       TYPE_OBSTACK (t) = obstack;\n       TYPE_ATTRIBUTES (t) = NULL_TREE;\n@@ -4649,6 +4651,7 @@ build_index_type (maxval)\n   TYPE_SIZE (itype) = TYPE_SIZE (sizetype);\n   TYPE_SIZE_UNIT (itype) = TYPE_SIZE_UNIT (sizetype);\n   TYPE_ALIGN (itype) = TYPE_ALIGN (sizetype);\n+  TYPE_USER_ALIGN (itype) = TYPE_USER_ALIGN (sizetype);\n \n   if (host_integerp (maxval, 1))\n     return type_hash_canon (tree_low_cst (maxval, 1), itype);\n@@ -4681,6 +4684,7 @@ build_range_type (type, lowval, highval)\n   TYPE_SIZE (itype) = TYPE_SIZE (type);\n   TYPE_SIZE_UNIT (itype) = TYPE_SIZE_UNIT (type);\n   TYPE_ALIGN (itype) = TYPE_ALIGN (type);\n+  TYPE_USER_ALIGN (itype) = TYPE_USER_ALIGN (type);\n \n   if (host_integerp (lowval, 0) && highval != 0 && host_integerp (highval, 0))\n     return type_hash_canon (tree_low_cst (highval, 0)\n@@ -5714,6 +5718,7 @@ build_common_tree_nodes_2 (short_double)\n   /* We are not going to have real types in C with less than byte alignment,\n      so we might as well not have any types that claim to have it.  */\n   TYPE_ALIGN (void_type_node) = BITS_PER_UNIT;\n+  TYPE_USER_ALIGN (void_type_node) = 0;\n \n   null_pointer_node = build_int_2 (0, 0);\n   TREE_TYPE (null_pointer_node) = build_pointer_type (void_type_node);"}, {"sha": "1b68a461d7f46246ea2a44bbe99af8be5caceb1b", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cf4d1831071d23c84e1add8a2d3fbdd360a82e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=11cf4d1831071d23c84e1add8a2d3fbdd360a82e", "patch": "@@ -931,6 +931,10 @@ struct tree_block\n    The value is an int, measured in bits.  */\n #define TYPE_ALIGN(NODE) (TYPE_CHECK (NODE)->type.align)\n \n+/* 1 if the alignment for this type was requested by \"aligned\" attribute,\n+   0 if it is the default for this type.  */\n+#define TYPE_USER_ALIGN(NODE) (TYPE_CHECK (NODE)->type.user_align)\n+\n /* The alignment for NODE, in bytes.  */\n #define TYPE_ALIGN_UNIT(NODE) \\\n   (TYPE_ALIGN (NODE) / BITS_PER_UNIT)\n@@ -1113,6 +1117,7 @@ struct tree_type\n   unsigned lang_flag_4 : 1;\n   unsigned lang_flag_5 : 1;\n   unsigned lang_flag_6 : 1;\n+  unsigned user_align : 1;\n \n   unsigned int align;\n   union tree_node *pointer_to;\n@@ -1297,6 +1302,9 @@ struct tree_type\n #define DECL_ALIGN(NODE) (DECL_CHECK (NODE)->decl.u1.a.align)\n /* For FIELD_DECLs, holds the alignment that DECL_FIELD_OFFSET has.  */\n #define DECL_OFFSET_ALIGN(NODE) (FIELD_DECL_CHECK (NODE)->decl.u1.a.off_align)\n+/* 1 if the alignment for this type was requested by \"aligned\" attribute,\n+   0 if it is the default for this type.  */\n+#define DECL_USER_ALIGN(NODE) (DECL_CHECK (NODE)->decl.user_align)\n /* Holds the machine mode corresponding to the declaration of a variable or\n    field.  Always equal to TYPE_MODE (TREE_TYPE (decl)) except for a\n    FIELD_DECL.  */\n@@ -1595,7 +1603,8 @@ struct tree_decl\n   unsigned pure_flag : 1;\n   unsigned pointer_depth : 2;\n   unsigned non_addressable : 1;\n-  /* Four unused bits.  */\n+  unsigned user_align : 1;\n+  /* Three unused bits.  */\n \n   unsigned lang_flag_0 : 1;\n   unsigned lang_flag_1 : 1;"}]}