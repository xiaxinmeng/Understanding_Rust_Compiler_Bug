{"sha": "c05ba1f17969c3423e76bee3e863727c9cf28ca0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA1YmExZjE3OTY5YzM0MjNlNzZiZWUzZTg2MzcyN2M5Y2YyOGNhMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T11:00:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T11:00:44Z"}, "message": "[multiple changes]\n\n2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Make_Call_Into_Operator): In ASIS mode, propagate\n\tback the resolved operands to the original call node, taking\n\tinto account that the original call may have named associations.\n\n2014-11-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* inline.adb (Has_Some_Contract): Change the\n\tguard to test the Ekind of the entity rather than the Analyzed\n\tflag. This handles partially analyzed contexts.\n\n2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Object_Renaming): In Ada 83 mode, do\n\tnot reject the renaming of a function result if the renaming\n\tdoes not come for source.\n\n2014-11-20  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_util.ads: Minor addition of ??? clause.\n\n2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Is_Variable): For an Ada 2012 implicit\n\tdereference introduced for an indexing opertion, check that the\n\ttype of the corresponding access discriminant is not an access\n\tto constant.\n\n2014-11-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch6.adb (Find_Corresponding_Spec): Inherit\n\tthe ghostness of the matching spec, the same way convention\n\tis inherited.\n\nFrom-SVN: r217835", "tree": {"sha": "89ec69df270ace088b55995a8f20af1ca31d2b2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89ec69df270ace088b55995a8f20af1ca31d2b2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c05ba1f17969c3423e76bee3e863727c9cf28ca0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05ba1f17969c3423e76bee3e863727c9cf28ca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c05ba1f17969c3423e76bee3e863727c9cf28ca0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05ba1f17969c3423e76bee3e863727c9cf28ca0/comments", "author": null, "committer": null, "parents": [{"sha": "4a0a5d5fc14e61fb73c1440a5a5bf2bee0b7ced8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a0a5d5fc14e61fb73c1440a5a5bf2bee0b7ced8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a0a5d5fc14e61fb73c1440a5a5bf2bee0b7ced8"}], "stats": {"total": 123, "additions": 109, "deletions": 14}, "files": [{"sha": "27f16af46f3dd05756a37fbe31cb4e91c1bc4c5e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ba1f17969c3423e76bee3e863727c9cf28ca0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ba1f17969c3423e76bee3e863727c9cf28ca0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c05ba1f17969c3423e76bee3e863727c9cf28ca0", "patch": "@@ -1,3 +1,38 @@\n+2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Make_Call_Into_Operator): In ASIS mode, propagate\n+\tback the resolved operands to the original call node, taking\n+\tinto account that the original call may have named associations.\n+\n+2014-11-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* inline.adb (Has_Some_Contract): Change the\n+\tguard to test the Ekind of the entity rather than the Analyzed\n+\tflag. This handles partially analyzed contexts.\n+\n+2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Object_Renaming): In Ada 83 mode, do\n+\tnot reject the renaming of a function result if the renaming\n+\tdoes not come for source.\n+\n+2014-11-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_util.ads: Minor addition of ??? clause.\n+\n+2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Is_Variable): For an Ada 2012 implicit\n+\tdereference introduced for an indexing opertion, check that the\n+\ttype of the corresponding access discriminant is not an access\n+\tto constant.\n+\n+2014-11-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch6.adb (Find_Corresponding_Spec): Inherit\n+\tthe ghostness of the matching spec, the same way convention\n+\tis inherited.\n+\n 2014-11-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_ch3.adb (Analyze_Object_Declaration): Swap a couple of"}, {"sha": "99e81ec86b2c57350a23adeb6f84f00f3184435d", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ba1f17969c3423e76bee3e863727c9cf28ca0/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ba1f17969c3423e76bee3e863727c9cf28ca0/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=c05ba1f17969c3423e76bee3e863727c9cf28ca0", "patch": "@@ -511,6 +511,9 @@ package Exp_Util is\n    --  Note: this function can be costly and must be invoked with special care.\n    --  Possibly we could introduce a flag at parse time indicating the presence\n    --  of an address clause to speed this up???\n+   --\n+   --  Note: currently this function does not scan the private part, that seems\n+   --  like a potential bug ???\n \n    procedure Force_Evaluation\n      (Exp      : Node_Id;"}, {"sha": "c900cd394f30b5636168bbd8d855db736a8ffbb9", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ba1f17969c3423e76bee3e863727c9cf28ca0/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ba1f17969c3423e76bee3e863727c9cf28ca0/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=c05ba1f17969c3423e76bee3e863727c9cf28ca0", "patch": "@@ -1327,9 +1327,9 @@ package body Inline is\n       begin\n          --  A call to an expression function may precede the actual body which\n          --  is inserted at the end of the enclosing declarations. Ensure that\n-         --  the related entity is analyzed before inspecting the contract.\n+         --  the related entity is decorated before inspecting the contract.\n \n-         if Analyzed (Id) then\n+         if Is_Subprogram_Or_Generic_Subprogram (Id) then\n             Items := Contract (Id);\n \n             return Present (Items)"}, {"sha": "832a3ea7ab0d63106cbe1b22696223b327bf4899", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ba1f17969c3423e76bee3e863727c9cf28ca0/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ba1f17969c3423e76bee3e863727c9cf28ca0/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=c05ba1f17969c3423e76bee3e863727c9cf28ca0", "patch": "@@ -7415,8 +7415,16 @@ package body Sem_Ch6 is\n                --  spec to match a body, full conformance is expected.\n \n                if In_Instance then\n+\n+                  --  Inherit the convention and \"ghostness\" of the matching\n+                  --  spec to ensure proper full and subtype conformance.\n+\n                   Set_Convention (Designator, Convention (E));\n \n+                  if Is_Ghost_Entity (E) then\n+                     Set_Is_Ghost_Entity (Designator);\n+                  end if;\n+\n                   --  Skip past subprogram bodies and subprogram renamings that\n                   --  may appear to have a matching spec, but that aren't fully\n                   --  conformant with it. That can occur in cases where an"}, {"sha": "4edeac9afde50f831bfc707bf6127402cddaaa76", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ba1f17969c3423e76bee3e863727c9cf28ca0/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ba1f17969c3423e76bee3e863727c9cf28ca0/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=c05ba1f17969c3423e76bee3e863727c9cf28ca0", "patch": "@@ -1058,10 +1058,11 @@ package body Sem_Ch8 is\n       if Nkind (Nam) = N_Function_Call then\n          case Ada_Version is\n \n-            --  Usage is illegal in Ada 83\n+            --  Usage is illegal in Ada 83, but renamings are also introduced\n+            --  during expansion, and error does not apply to those.\n \n             when Ada_83 =>\n-               if Comes_From_Source (Nam) then\n+               if Comes_From_Source (N) then\n                   Error_Msg_N\n                     (\"(Ada 83) cannot rename function return object\", Nam);\n                end if;"}, {"sha": "6e02a2583f01fd93c94a74a5dc52ae3dd66cd453", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 55, "deletions": 9, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ba1f17969c3423e76bee3e863727c9cf28ca0/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ba1f17969c3423e76bee3e863727c9cf28ca0/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=c05ba1f17969c3423e76bee3e863727c9cf28ca0", "patch": "@@ -1793,15 +1793,61 @@ package body Sem_Res is\n         and then Nkind (N) in N_Op\n         and then Nkind (Original_Node (N)) = N_Function_Call\n       then\n-         if Is_Binary then\n-            Rewrite (First (Parameter_Associations (Original_Node (N))),\n-               Relocate_Node (Left_Opnd (N)));\n-            Rewrite (Next (First (Parameter_Associations (Original_Node (N)))),\n-               Relocate_Node (Right_Opnd (N)));\n-         else\n-            Rewrite (First (Parameter_Associations (Original_Node (N))),\n-               Relocate_Node (Right_Opnd (N)));\n-         end if;\n+         declare\n+            L : constant Node_Id := Left_Opnd  (N);\n+            R : constant Node_Id := Right_Opnd (N);\n+\n+            Old_First : constant Node_Id :=\n+                          First (Parameter_Associations (Original_Node (N)));\n+            Old_Sec   : Node_Id;\n+\n+         begin\n+            if Is_Binary then\n+               Old_Sec   := Next (Old_First);\n+\n+               --  If the original call has named associations, replace the\n+               --  explicit actual parameter in the association with the proper\n+               --  resolved operand.\n+\n+               if Nkind (Old_First) = N_Parameter_Association then\n+                  if Chars (Selector_Name (Old_First)) =\n+                     Chars (First_Entity (Op_Id))\n+                  then\n+                     Rewrite (Explicit_Actual_Parameter (Old_First),\n+                       Relocate_Node (L));\n+                  else\n+                     Rewrite (Explicit_Actual_Parameter (Old_First),\n+                       Relocate_Node (R));\n+                  end if;\n+\n+               else\n+                  Rewrite (Old_First, Relocate_Node (L));\n+               end if;\n+\n+               if Nkind (Old_Sec) = N_Parameter_Association then\n+                  if Chars (Selector_Name (Old_Sec))  =\n+                     Chars (First_Entity (Op_Id))\n+                  then\n+                     Rewrite (Explicit_Actual_Parameter (Old_Sec),\n+                       Relocate_Node (L));\n+                  else\n+                     Rewrite (Explicit_Actual_Parameter (Old_Sec),\n+                       Relocate_Node (R));\n+                  end if;\n+\n+               else\n+                  Rewrite (Old_Sec, Relocate_Node (R));\n+               end if;\n+\n+            else\n+               if Nkind (Old_First) = N_Parameter_Association then\n+                  Rewrite (Explicit_Actual_Parameter (Old_First),\n+                    Relocate_Node (R));\n+               else\n+                  Rewrite (Old_First, Relocate_Node (R));\n+               end if;\n+            end if;\n+         end;\n \n          Set_Parent (Original_Node (N), Parent (N));\n       end if;"}, {"sha": "dd2ba869f5ce92cf2317592c747ed1177ca3fb35", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ba1f17969c3423e76bee3e863727c9cf28ca0/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ba1f17969c3423e76bee3e863727c9cf28ca0/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c05ba1f17969c3423e76bee3e863727c9cf28ca0", "patch": "@@ -12806,12 +12806,14 @@ package body Sem_Util is\n              Is_Variable_Prefix (Original_Node (Prefix (N)));\n \n       --  in Ada 2012, the dereference may have been added for a type with\n-      --  a declared implicit dereference aspect.\n+      --  a declared implicit dereference aspect. Check that it is not an\n+      --  access to constant.\n \n       elsif Nkind (N) = N_Explicit_Dereference\n         and then Present (Etype (Orig_Node))\n         and then Ada_Version >= Ada_2012\n         and then Has_Implicit_Dereference (Etype (Orig_Node))\n+        and then not Is_Access_Constant (Etype (Prefix (N)))\n       then\n          return True;\n "}]}