{"sha": "2022be54daf638885e1e685afd36619cb4b01a93", "node_id": "C_kwDOANBUbNoAKDIwMjJiZTU0ZGFmNjM4ODg1ZTFlNjg1YWZkMzY2MTljYjRiMDFhOTM", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-01-27T09:46:28Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-01-27T10:36:27Z"}, "message": "rs6000: Fix an assertion in update_target_cost_per_stmt [PR103702]\n\nThis patch is to fix one wrong assertion which is too aggressive.\nVectorizer can do vec_construct costing for the vector type which\nonly has one unit.  For the failed case, the passed in vector type\nis \"vector(1) int\", though it doesn't end up with any construction\neventually, we have to handle this kind of possibility.\n\ngcc/ChangeLog:\n\n\tPR target/103702\n\t* config/rs6000/rs6000.cc\n\t(rs6000_cost_data::update_target_cost_per_stmt): Fix one wrong\n\tassertion with early return.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/103702\n\t* gcc.target/powerpc/pr103702.c: New test.", "tree": {"sha": "c4e7172d651aaed7eeefbf1d330048eed4ebb7f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4e7172d651aaed7eeefbf1d330048eed4ebb7f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2022be54daf638885e1e685afd36619cb4b01a93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2022be54daf638885e1e685afd36619cb4b01a93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2022be54daf638885e1e685afd36619cb4b01a93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2022be54daf638885e1e685afd36619cb4b01a93/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c91b014923f418e0aab789c5cf57facf04bf266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c91b014923f418e0aab789c5cf57facf04bf266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c91b014923f418e0aab789c5cf57facf04bf266"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "a5fd36b72d9cb31dc9a97ef65d6daf3932237d90", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2022be54daf638885e1e685afd36619cb4b01a93/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2022be54daf638885e1e685afd36619cb4b01a93/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=2022be54daf638885e1e685afd36619cb4b01a93", "patch": "@@ -5439,8 +5439,11 @@ rs6000_cost_data::update_target_cost_per_stmt (vect_cost_for_stmt kind,\n \t{\n \t  tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n \t  unsigned int nunits = vect_nunits_for_cost (vectype);\n-\t  /* We don't expect strided/elementwise loads for just 1 nunit.  */\n-\t  gcc_assert (nunits > 1);\n+\t  /* As PR103702 shows, it's possible that vectorizer wants to do\n+\t     costings for only one unit here, it's no need to do any\n+\t     penalization for it, so simply early return here.  */\n+\t  if (nunits == 1)\n+\t    return;\n \t  /* i386 port adopts nunits * stmt_cost as the penalized cost\n \t     for this kind of penalization, we used to follow it but\n \t     found it could result in an unreliable body cost especially"}, {"sha": "585946fd64b635bf74f09cd500765aa6cc4d3319", "filename": "gcc/testsuite/gcc.target/powerpc/pr103702.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2022be54daf638885e1e685afd36619cb4b01a93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103702.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2022be54daf638885e1e685afd36619cb4b01a93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103702.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103702.c?ref=2022be54daf638885e1e685afd36619cb4b01a93", "patch": "@@ -0,0 +1,24 @@\n+/* We don't have one powerpc.*_ok for Power6, use altivec_ok conservatively.  */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power6 -O2 -ftree-loop-vectorize -fno-tree-scev-cprop\" } */\n+\n+/* Verify there is no ICE.  */\n+\n+unsigned short a, e;\n+int *b, *d;\n+int c;\n+extern int fn2 ();\n+void\n+fn1 ()\n+{\n+  void *f;\n+  for (;;)\n+    {\n+      fn2 ();\n+      b = f;\n+      e = 0;\n+      for (; e < a; ++e)\n+\tb[e] = d[e * c];\n+    }\n+}\n+"}]}