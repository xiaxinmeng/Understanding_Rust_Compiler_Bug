{"sha": "247d8075711bc24632eb919c15524ed095485c16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ3ZDgwNzU3MTFiYzI0NjMyZWI5MTljMTU1MjRlZDA5NTQ4NWMxNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-03-19T10:36:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-19T10:36:57Z"}, "message": "stl_algo.h (shuffle): Add, per D3056.\n\n2010-03-19  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_algo.h (shuffle): Add, per D3056.\n\t(random_shuffle): Fix signature in C++0x mode.\n\t(lower_bound, __lg): Move...\n\t* include/bits/stl_algobase.h: ... here.\n\t* include/bits/algorithmfwd.h: Adjust.\n\t* include/parallel/algorithmfwd.h: Likewise.\n\t* include/parallel/algo.h: Likewise.\n\t* include/bits/hashtable_policy.h (__lower_bound): Remove,\n\tadjust callers.\n\t* include/tr1/hashtable_policy.h (__lower_bound): Likewise.\n\t* include/bits/random.tcc (__detail::__transform): Add,\n\tadjust std::transform callers; don't include <algorithm>.\n\t* testsuite/25_algorithms/shuffle/1.cc: Add.\n\t* testsuite/25_algorithms/shuffle/requirements/\n\texplicit_instantiation/2.cc: Likewise.\n\t* testsuite/25_algorithms/shuffle/requirements/\n\texplicit_instantiation/pod.cc: Likewise.\n\n\t* include/bits/random.h: Add comments.\n\nFrom-SVN: r157564", "tree": {"sha": "884bdcb882db407e570871577799d5642ec6cc56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/884bdcb882db407e570871577799d5642ec6cc56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/247d8075711bc24632eb919c15524ed095485c16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247d8075711bc24632eb919c15524ed095485c16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/247d8075711bc24632eb919c15524ed095485c16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247d8075711bc24632eb919c15524ed095485c16/comments", "author": null, "committer": null, "parents": [{"sha": "0aeb3cc6c9df098de6fe0d0433f98e260696399e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aeb3cc6c9df098de6fe0d0433f98e260696399e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aeb3cc6c9df098de6fe0d0433f98e260696399e"}], "stats": {"total": 737, "additions": 493, "deletions": 244}, "files": [{"sha": "1b06dae51d99807e54e2a2a4c60e42651bffcad1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=247d8075711bc24632eb919c15524ed095485c16", "patch": "@@ -1,3 +1,25 @@\n+2010-03-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_algo.h (shuffle): Add, per D3056.\n+\t(random_shuffle): Fix signature in C++0x mode.\n+\t(lower_bound, __lg): Move...\n+\t* include/bits/stl_algobase.h: ... here.\n+\t* include/bits/algorithmfwd.h: Adjust.\n+\t* include/parallel/algorithmfwd.h: Likewise.\n+\t* include/parallel/algo.h: Likewise.\n+\t* include/bits/hashtable_policy.h (__lower_bound): Remove,\n+\tadjust callers.\n+\t* include/tr1/hashtable_policy.h (__lower_bound): Likewise.\n+\t* include/bits/random.tcc (__detail::__transform): Add,\n+\tadjust std::transform callers; don't include <algorithm>.\n+\t* testsuite/25_algorithms/shuffle/1.cc: Add.\n+\t* testsuite/25_algorithms/shuffle/requirements/\n+\texplicit_instantiation/2.cc: Likewise.\n+\t* testsuite/25_algorithms/shuffle/requirements/\n+\texplicit_instantiation/pod.cc: Likewise.\n+\n+\t* include/bits/random.h: Add comments.\n+\n 2010-03-17  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* doc/xml/manual/debug_mode.xml: Correct debug headers."}, {"sha": "803fa47694753ff560992232e2beb477bee850d0", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=247d8075711bc24632eb919c15524ed095485c16", "patch": "@@ -1,6 +1,6 @@\n // <algorithm> declarations  -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -111,6 +111,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     set_intersection\n     set_symmetric_difference\n     set_union\n+    shuffle (C++0x)\n     sort\n     sort_heap\n     stable_partition\n@@ -517,6 +518,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // set_symmetric_difference\n   // set_union\n \n+#if defined(__GXX_EXPERIMENTAL_CXX0X__) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+  template<typename _RAIter, typename _UGenerator>\n+    void\n+    shuffle(_RAIter, _RAIter, _UGenerator&&);\n+#endif\n+\n   template<typename _RAIter>\n     void \n     sort_heap(_RAIter, _RAIter);\n@@ -684,7 +691,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   template<typename _RAIter, typename _Generator>\n     void \n-    random_shuffle(_RAIter, _RAIter, _Generator&);\n+    random_shuffle(_RAIter, _RAIter,\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t\t   _Generator&&);\n+#else\n+\t\t   _Generator&);\n+#endif\n \n   template<typename _FIter, typename _Tp>\n     void "}, {"sha": "142c57fd9a682f3abb6a5def92d43262eec34186", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=247d8075711bc24632eb919c15524ed095485c16", "patch": "@@ -56,29 +56,6 @@ namespace __detail\n       return __distance_fw(__first, __last, _Tag());\n     }\n \n-  template<typename _RAIter, typename _Tp>\n-    _RAIter\n-    __lower_bound(_RAIter __first, _RAIter __last, const _Tp& __val)\n-    {\n-      typedef typename std::iterator_traits<_RAIter>::difference_type _DType;\n-\n-      _DType __len = __last - __first;\n-      while (__len > 0)\n-\t{\n-\t  _DType __half = __len >> 1;\n-\t  _RAIter __middle = __first + __half;\n-\t  if (*__middle < __val)\n-\t    {\n-\t      __first = __middle;\n-\t      ++__first;\n-\t      __len = __len - __half - 1;\n-\t    }\n-\t  else\n-\t    __len = __half;\n-\t}\n-      return __first;\n-    }\n-\n   // Auxiliary types used for all instantiations of _Hashtable: nodes\n   // and iterators.\n   \n@@ -447,8 +424,8 @@ namespace __detail\n   _Prime_rehash_policy::\n   _M_next_bkt(std::size_t __n) const\n   {\n-    const unsigned long* __p = __lower_bound(__prime_list, __prime_list\n-\t\t\t\t\t     + _S_n_primes, __n);\n+    const unsigned long* __p = std::lower_bound(__prime_list, __prime_list\n+\t\t\t\t\t\t+ _S_n_primes, __n);\n     _M_next_resize = \n       static_cast<std::size_t>(__builtin_ceil(*__p * _M_max_load_factor));\n     return *__p;\n@@ -461,8 +438,8 @@ namespace __detail\n   _M_bkt_for_elements(std::size_t __n) const\n   {\n     const float __min_bkts = __n / _M_max_load_factor;\n-    const unsigned long* __p = __lower_bound(__prime_list, __prime_list\n-\t\t\t\t\t     + _S_n_primes, __min_bkts);\n+    const unsigned long* __p = std::lower_bound(__prime_list, __prime_list\n+\t\t\t\t\t\t+ _S_n_primes, __min_bkts);\n     _M_next_resize =\n       static_cast<std::size_t>(__builtin_ceil(*__p * _M_max_load_factor));\n     return *__p;\n@@ -490,8 +467,8 @@ namespace __detail\n \t  {\n \t    __min_bkts = std::max(__min_bkts, _M_growth_factor * __n_bkt);\n \t    const unsigned long* __p =\n-\t      __lower_bound(__prime_list, __prime_list + _S_n_primes,\n-\t\t\t    __min_bkts);\n+\t      std::lower_bound(__prime_list, __prime_list + _S_n_primes,\n+\t\t\t       __min_bkts);\n \t    _M_next_resize = static_cast<std::size_t>\n \t      (__builtin_ceil(*__p * _M_max_load_factor));\n \t    return std::make_pair(true, *__p);"}, {"sha": "cc950f03ae2b81202b374ef424f7e3273355a118", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 93, "deletions": 45, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=247d8075711bc24632eb919c15524ed095485c16", "patch": "@@ -1694,20 +1694,6 @@ namespace std\n       b() const\n       { return _M_param.b(); }\n \n-      /**\n-       * @brief Returns the inclusive lower bound of the distribution range.\n-       */\n-      result_type\n-      min() const\n-      { return this->a(); }\n-\n-      /**\n-       * @brief Returns the inclusive upper bound of the distribution range.\n-       */\n-      result_type\n-      max() const\n-      { return this->b(); }\n-\n       /**\n        * @brief Returns the parameter set of the distribution.\n        */\n@@ -1724,19 +1710,27 @@ namespace std\n       { _M_param = __param; }\n \n       /**\n-       * Gets a uniformly distributed random number in the range\n-       * @f$(min, max)@f$.\n+       * @brief Returns the inclusive lower bound of the distribution range.\n+       */\n+      result_type\n+      min() const\n+      { return this->a(); }\n+\n+      /**\n+       * @brief Returns the inclusive upper bound of the distribution range.\n+       */\n+      result_type\n+      max() const\n+      { return this->b(); }\n+\n+      /**\n+       * @brief Generating functions.\n        */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n         { return this->operator()(__urng, this->param()); }\n \n-      /**\n-       * Gets a uniform random number in the range @f$[0, n)@f$.\n-       *\n-       * This function is aimed at use with std::random_shuffle.\n-       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng,\n@@ -1875,6 +1869,21 @@ namespace std\n       b() const\n       { return _M_param.b(); }\n \n+      /**\n+       * @brief Returns the parameter set of the distribution.\n+       */\n+      param_type\n+      param() const\n+      { return _M_param; }\n+\n+      /**\n+       * @brief Sets the parameter set of the distribution.\n+       * @param __param The new parameter set of the distribution.\n+       */\n+      void\n+      param(const param_type& __param)\n+      { _M_param = __param; }\n+\n       /**\n        * @brief Returns the inclusive lower bound of the distribution range.\n        */\n@@ -1890,20 +1899,8 @@ namespace std\n       { return this->b(); }\n \n       /**\n-       * @brief Returns the parameter set of the distribution.\n-       */\n-      param_type\n-      param() const\n-      { return _M_param; }\n-\n-      /**\n-       * @brief Sets the parameter set of the distribution.\n-       * @param __param The new parameter set of the distribution.\n+       * @brief Generating functions.\n        */\n-      void\n-      param(const param_type& __param)\n-      { _M_param = __param; }\n-\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n@@ -2095,6 +2092,9 @@ namespace std\n       max() const\n       { return std::numeric_limits<result_type>::max(); }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n@@ -2265,6 +2265,9 @@ namespace std\n       max() const\n       { return std::numeric_limits<result_type>::max(); }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n@@ -2456,6 +2459,9 @@ namespace std\n       max() const\n       { return std::numeric_limits<result_type>::max(); }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n@@ -2613,6 +2619,9 @@ namespace std\n       max() const\n       { return std::numeric_limits<result_type>::max(); }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n@@ -2786,6 +2795,9 @@ namespace std\n       max() const\n       { return std::numeric_limits<result_type>::max(); }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n@@ -2959,6 +2971,9 @@ namespace std\n       max() const\n       { return std::numeric_limits<result_type>::max(); }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n@@ -3129,6 +3144,9 @@ namespace std\n       max() const\n       { return std::numeric_limits<result_type>::max(); }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n         operator()(_UniformRandomNumberGenerator& __urng)\n@@ -3310,7 +3328,7 @@ namespace std\n     { return std::numeric_limits<result_type>::max(); }\n \n     /**\n-     * @brief Returns the next value in the Bernoullian sequence.\n+     * @brief Generating functions.\n      */\n     template<typename _UniformRandomNumberGenerator>\n       result_type\n@@ -3509,6 +3527,19 @@ namespace std\n       max() const\n       { return _M_param.t(); }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng)\n+\t{ return this->operator()(__urng, this->param()); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p);\n+\n       /**\n        * @brief Return true if two binomial distributions have\n        *        the same parameters and the sequences that would\n@@ -3524,16 +3555,6 @@ namespace std\n         { return __d1.param() == __d2.param(); }\n #endif\n \n-      template<typename _UniformRandomNumberGenerator>\n-\tresult_type\n-\toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n-\n-      template<typename _UniformRandomNumberGenerator>\n-\tresult_type\n-\toperator()(_UniformRandomNumberGenerator& __urng,\n-\t\t   const param_type& __p);\n-\n       /**\n        * @brief Inserts a %binomial_distribution random number distribution\n        * @p __x into the output stream @p __os.\n@@ -3691,6 +3712,9 @@ namespace std\n       max() const\n       { return std::numeric_limits<result_type>::max(); }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n@@ -3860,6 +3884,9 @@ namespace std\n       max() const\n       { return std::numeric_limits<result_type>::max(); }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n         operator()(_UniformRandomNumberGenerator& __urng);\n@@ -4040,6 +4067,9 @@ namespace std\n       max() const\n       { return std::numeric_limits<result_type>::max(); }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n@@ -4219,6 +4249,9 @@ namespace std\n       max() const\n       { return std::numeric_limits<result_type>::max(); }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n@@ -4396,6 +4429,9 @@ namespace std\n       max() const\n       { return std::numeric_limits<result_type>::max(); }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n@@ -4568,6 +4604,9 @@ namespace std\n       max() const\n       { return std::numeric_limits<result_type>::max(); }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n@@ -4756,6 +4795,9 @@ namespace std\n       max() const\n       { return this->_M_param._M_prob.size() - 1; }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n@@ -4960,6 +5002,9 @@ namespace std\n       max() const\n       { return this->_M_param._M_int.back(); }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n@@ -5168,6 +5213,9 @@ namespace std\n       max() const\n       { return this->_M_param._M_int.back(); }\n \n+      /**\n+       * @brief Generating functions.\n+       */\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)"}, {"sha": "e47b1c83c7f778a5f25a9385e47f87bce2ba9dac", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=247d8075711bc24632eb919c15524ed095485c16", "patch": "@@ -27,8 +27,7 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#include <numeric>\n-#include <algorithm>\n+#include <numeric> // std::accumulate and std::partial_sum\n \n namespace std\n {\n@@ -87,6 +86,17 @@ namespace std\n \t__calc(_Tp __x)\n \t{ return __a * __x + __c; }\n       };\n+\n+  template<typename _InputIterator, typename _OutputIterator,\n+\t   typename _UnaryOperation>\n+    _OutputIterator\n+    __transform(_InputIterator __first, _InputIterator __last,\n+\t      _OutputIterator __result, _UnaryOperation __unary_op)\n+    {\n+      for (; __first != __last; ++__first, ++__result)\n+\t*__result = __unary_op(*__first);\n+      return __result;\n+    }\n   } // namespace __detail\n \n \n@@ -2177,8 +2187,8 @@ namespace std\n       const double __sum = std::accumulate(_M_prob.begin(),\n \t\t\t\t\t   _M_prob.end(), 0.0);\n       // Now normalize the probabilites.\n-      std::transform(_M_prob.begin(), _M_prob.end(), _M_prob.begin(),\n-\t\t     std::bind2nd(std::divides<double>(), __sum));\n+      __detail::__transform(_M_prob.begin(), _M_prob.end(), _M_prob.begin(),\n+\t\t\t  std::bind2nd(std::divides<double>(), __sum));\n       // Accumulate partial sums.\n       _M_cp.reserve(_M_prob.size());\n       std::partial_sum(_M_prob.begin(), _M_prob.end(),\n@@ -2299,8 +2309,8 @@ namespace std\n       const double __sum = std::accumulate(_M_den.begin(),\n \t\t\t\t\t   _M_den.end(), 0.0);\n \n-      std::transform(_M_den.begin(), _M_den.end(), _M_den.begin(),\n-\t\t     std::bind2nd(std::divides<double>(), __sum));\n+      __detail::__transform(_M_den.begin(), _M_den.end(), _M_den.begin(),\n+\t\t\t    std::bind2nd(std::divides<double>(), __sum));\n \n       _M_cp.reserve(_M_den.size());\n       std::partial_sum(_M_den.begin(), _M_den.end(),\n@@ -2499,14 +2509,14 @@ namespace std\n \t}\n \n       //  Now normalize the densities...\n-      std::transform(_M_den.begin(), _M_den.end(), _M_den.begin(),\n-\t\t     std::bind2nd(std::divides<double>(), __sum));\n+      __detail::__transform(_M_den.begin(), _M_den.end(), _M_den.begin(),\n+\t\t\t  std::bind2nd(std::divides<double>(), __sum));\n       //  ... and partial sums... \n-      std::transform(_M_cp.begin(), _M_cp.end(), _M_cp.begin(),\n-\t\t     std::bind2nd(std::divides<double>(), __sum));\n+      __detail::__transform(_M_cp.begin(), _M_cp.end(), _M_cp.begin(),\n+\t\t\t    std::bind2nd(std::divides<double>(), __sum));\n       //  ... and slopes.\n-      std::transform(_M_m.begin(), _M_m.end(), _M_m.begin(),\n-\t\t     std::bind2nd(std::divides<double>(), __sum));\n+      __detail::__transform(_M_m.begin(), _M_m.end(), _M_m.begin(),\n+\t\t\t    std::bind2nd(std::divides<double>(), __sum));\n       //  Make sure the last cumulative probablility is one.\n       _M_cp[_M_cp.size() - 1] = 1.0;\n      }"}, {"sha": "2f96d0670ef622e93c33518f1ef2a58e395e7a87", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 50, "deletions": 123, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=247d8075711bc24632eb919c15524ed095485c16", "patch": "@@ -62,6 +62,10 @@\n #include <bits/stl_heap.h>\n #include <bits/stl_tempbuf.h>  // for _Temporary_buffer\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#include <random> // for std::uniform_int_distribution\n+#endif\n+\n // See concept_check.h for the __glibcxx_*_requires macros.\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n@@ -2301,29 +2305,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     }\n \n-  /// This is a helper function for the sort routines.  Precondition: __n > 0.\n-  template<typename _Size>\n-    inline _Size\n-    __lg(_Size __n)\n-    {\n-      _Size __k;\n-      for (__k = 0; __n != 0; __n >>= 1)\n-\t++__k;\n-      return __k - 1;\n-    }\n-\n-  inline int\n-  __lg(int __n)\n-  { return sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }\n-\n-  inline long\n-  __lg(long __n)\n-  { return sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }\n-\n-  inline long long\n-  __lg(long long __n)\n-  { return sizeof(long long) * __CHAR_BIT__ - 1 - __builtin_clzll(__n); }\n-\n   // sort\n \n   template<typename _RandomAccessIterator, typename _Size>\n@@ -2386,106 +2367,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // nth_element\n \n-  /**\n-   *  @brief Finds the first position in which @a val could be inserted\n-   *         without changing the ordering.\n-   *  @param  first   An iterator.\n-   *  @param  last    Another iterator.\n-   *  @param  val     The search term.\n-   *  @return         An iterator pointing to the first element <em>not less\n-   *                  than</em> @a val, or end() if every element is less than \n-   *                  @a val.\n-   *  @ingroup binary_search_algorithms\n-  */\n-  template<typename _ForwardIterator, typename _Tp>\n-    _ForwardIterator\n-    lower_bound(_ForwardIterator __first, _ForwardIterator __last,\n-\t\tconst _Tp& __val)\n-    {\n-      typedef typename iterator_traits<_ForwardIterator>::value_type\n-\t_ValueType;\n-      typedef typename iterator_traits<_ForwardIterator>::difference_type\n-\t_DistanceType;\n-\n-      // concept requirements\n-      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcxx_function_requires(_LessThanOpConcept<_ValueType, _Tp>)\n-      __glibcxx_requires_partitioned_lower(__first, __last, __val);\n-\n-      _DistanceType __len = std::distance(__first, __last);\n-      _DistanceType __half;\n-      _ForwardIterator __middle;\n-\n-      while (__len > 0)\n-\t{\n-\t  __half = __len >> 1;\n-\t  __middle = __first;\n-\t  std::advance(__middle, __half);\n-\t  if (*__middle < __val)\n-\t    {\n-\t      __first = __middle;\n-\t      ++__first;\n-\t      __len = __len - __half - 1;\n-\t    }\n-\t  else\n-\t    __len = __half;\n-\t}\n-      return __first;\n-    }\n-\n-  /**\n-   *  @brief Finds the first position in which @a val could be inserted\n-   *         without changing the ordering.\n-   *  @ingroup binary_search_algorithms\n-   *  @param  first   An iterator.\n-   *  @param  last    Another iterator.\n-   *  @param  val     The search term.\n-   *  @param  comp    A functor to use for comparisons.\n-   *  @return An iterator pointing to the first element <em>not less\n-   *           than</em> @a val, or end() if every element is less\n-   *           than @a val.\n-   *  @ingroup binary_search_algorithms\n-   *\n-   *  The comparison function should have the same effects on ordering as\n-   *  the function used for the initial sort.\n-  */\n-  template<typename _ForwardIterator, typename _Tp, typename _Compare>\n-    _ForwardIterator\n-    lower_bound(_ForwardIterator __first, _ForwardIterator __last,\n-\t\tconst _Tp& __val, _Compare __comp)\n-    {\n-      typedef typename iterator_traits<_ForwardIterator>::value_type\n-\t_ValueType;\n-      typedef typename iterator_traits<_ForwardIterator>::difference_type\n-\t_DistanceType;\n-\n-      // concept requirements\n-      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n-\t\t\t\t  _ValueType, _Tp>)\n-      __glibcxx_requires_partitioned_lower_pred(__first, __last,\n-\t\t\t\t\t\t__val, __comp);\n-\n-      _DistanceType __len = std::distance(__first, __last);\n-      _DistanceType __half;\n-      _ForwardIterator __middle;\n-\n-      while (__len > 0)\n-\t{\n-\t  __half = __len >> 1;\n-\t  __middle = __first;\n-\t  std::advance(__middle, __half);\n-\t  if (__comp(*__middle, __val))\n-\t    {\n-\t      __first = __middle;\n-\t      ++__first;\n-\t      __len = __len - __half - 1;\n-\t    }\n-\t  else\n-\t    __len = __half;\n-\t}\n-      return __first;\n-    }\n+  // lower_bound moved to stl_algobase.h\n \n   /**\n    *  @brief Finds the last position in which @a val could be inserted\n@@ -4179,6 +4061,47 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tstd::minmax_element(__l.begin(), __l.end(), __comp);\n       return std::make_pair(*__p.first, *__p.second);\n     }\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  /**\n+   *  @brief Shuffle the elements of a sequence using a uniform random\n+   *         number generator.\n+   *  @ingroup mutating_algorithms\n+   *  @param  first   A forward iterator.\n+   *  @param  last    A forward iterator.\n+   *  @param  g       A UniformRandomNumberGenerator (26.5.1.3).\n+   *  @return  Nothing.\n+   *\n+   *  Reorders the elements in the range @p [first,last) using @p g to\n+   *  provide random numbers.\n+  */\n+  template<typename _RandomAccessIterator,\n+\t   typename _UniformRandomNumberGenerator>\n+    void\n+    shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,\n+\t    _UniformRandomNumberGenerator&& __g)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n+\t    _RandomAccessIterator>)\n+      __glibcxx_requires_valid_range(__first, __last);\n+\n+      if (__first == __last)\n+\treturn;\n+\n+      typedef typename iterator_traits<_RandomAccessIterator>::difference_type\n+\t_DistanceType;\n+\n+      typedef typename std::make_unsigned<_DistanceType>::type __ud_type;\n+      typedef typename std::uniform_int_distribution<__ud_type> __distr_type;\n+      typedef typename __distr_type::param_type __p_type;\n+      __distr_type __d;\n+\n+      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)\n+\tstd::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));\n+    }\n+#endif\n+\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n _GLIBCXX_END_NAMESPACE\n@@ -4996,7 +4919,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n   template<typename _RandomAccessIterator, typename _RandomNumberGenerator>\n     void\n     random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t\t   _RandomNumberGenerator&& __rand)\n+#else\n \t\t   _RandomNumberGenerator& __rand)\n+#endif\n     {\n       // concept requirements\n       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<"}, {"sha": "1756966a5a1daef07ab174bb020f6c245ac1dbbd", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=247d8075711bc24632eb919c15524ed095485c16", "patch": "@@ -938,6 +938,131 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t\t\t    __first2, __last2);\n     }\n \n+  /**\n+   *  @brief Finds the first position in which @a val could be inserted\n+   *         without changing the ordering.\n+   *  @param  first   An iterator.\n+   *  @param  last    Another iterator.\n+   *  @param  val     The search term.\n+   *  @return         An iterator pointing to the first element <em>not less\n+   *                  than</em> @a val, or end() if every element is less than \n+   *                  @a val.\n+   *  @ingroup binary_search_algorithms\n+  */\n+  template<typename _ForwardIterator, typename _Tp>\n+    _ForwardIterator\n+    lower_bound(_ForwardIterator __first, _ForwardIterator __last,\n+\t\tconst _Tp& __val)\n+    {\n+      typedef typename iterator_traits<_ForwardIterator>::value_type\n+\t_ValueType;\n+      typedef typename iterator_traits<_ForwardIterator>::difference_type\n+\t_DistanceType;\n+\n+      // concept requirements\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_ValueType, _Tp>)\n+      __glibcxx_requires_partitioned_lower(__first, __last, __val);\n+\n+      _DistanceType __len = std::distance(__first, __last);\n+      _DistanceType __half;\n+      _ForwardIterator __middle;\n+\n+      while (__len > 0)\n+\t{\n+\t  __half = __len >> 1;\n+\t  __middle = __first;\n+\t  std::advance(__middle, __half);\n+\t  if (*__middle < __val)\n+\t    {\n+\t      __first = __middle;\n+\t      ++__first;\n+\t      __len = __len - __half - 1;\n+\t    }\n+\t  else\n+\t    __len = __half;\n+\t}\n+      return __first;\n+    }\n+\n+  /**\n+   *  @brief Finds the first position in which @a val could be inserted\n+   *         without changing the ordering.\n+   *  @ingroup binary_search_algorithms\n+   *  @param  first   An iterator.\n+   *  @param  last    Another iterator.\n+   *  @param  val     The search term.\n+   *  @param  comp    A functor to use for comparisons.\n+   *  @return An iterator pointing to the first element <em>not less\n+   *           than</em> @a val, or end() if every element is less\n+   *           than @a val.\n+   *  @ingroup binary_search_algorithms\n+   *\n+   *  The comparison function should have the same effects on ordering as\n+   *  the function used for the initial sort.\n+  */\n+  template<typename _ForwardIterator, typename _Tp, typename _Compare>\n+    _ForwardIterator\n+    lower_bound(_ForwardIterator __first, _ForwardIterator __last,\n+\t\tconst _Tp& __val, _Compare __comp)\n+    {\n+      typedef typename iterator_traits<_ForwardIterator>::value_type\n+\t_ValueType;\n+      typedef typename iterator_traits<_ForwardIterator>::difference_type\n+\t_DistanceType;\n+\n+      // concept requirements\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n+\t\t\t\t  _ValueType, _Tp>)\n+      __glibcxx_requires_partitioned_lower_pred(__first, __last,\n+\t\t\t\t\t\t__val, __comp);\n+\n+      _DistanceType __len = std::distance(__first, __last);\n+      _DistanceType __half;\n+      _ForwardIterator __middle;\n+\n+      while (__len > 0)\n+\t{\n+\t  __half = __len >> 1;\n+\t  __middle = __first;\n+\t  std::advance(__middle, __half);\n+\t  if (__comp(*__middle, __val))\n+\t    {\n+\t      __first = __middle;\n+\t      ++__first;\n+\t      __len = __len - __half - 1;\n+\t    }\n+\t  else\n+\t    __len = __half;\n+\t}\n+      return __first;\n+    }\n+\n+  /// This is a helper function for the sort routines and for random.tcc.\n+  //  Precondition: __n > 0.\n+  template<typename _Size>\n+    inline _Size\n+    __lg(_Size __n)\n+    {\n+      _Size __k;\n+      for (__k = 0; __n != 0; __n >>= 1)\n+\t++__k;\n+      return __k - 1;\n+    }\n+\n+  inline int\n+  __lg(int __n)\n+  { return sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }\n+\n+  inline long\n+  __lg(long __n)\n+  { return sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }\n+\n+  inline long long\n+  __lg(long long __n)\n+  { return sizeof(long long) * __CHAR_BIT__ - 1 - __builtin_clzll(__n); }\n+\n _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)"}, {"sha": "aa87a48450a53b65e6ad33d22dd05b3a7f47f211", "filename": "libstdc++-v3/include/parallel/algo.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h?ref=247d8075711bc24632eb919c15524ed095485c16", "patch": "@@ -1645,7 +1645,7 @@ namespace __parallel\n   // Sequential fallback.\n   template<typename _RAIter, typename _RandomNumberGenerator>\n     inline void\n-    random_shuffle(_RAIter __begin, _RAIter __end, \n+    random_shuffle(_RAIter __begin, _RAIter __end,\n                    _RandomNumberGenerator& __rand,\n                    __gnu_parallel::sequential_tag)\n     { _GLIBCXX_STD_P::random_shuffle(__begin, __end, __rand); }\n@@ -1673,8 +1673,12 @@ namespace __parallel\n   // Parallel algorithm for random access iterators.\n   template<typename _RAIter, typename _RandomNumberGenerator>\n     void\n-    random_shuffle(_RAIter __begin, _RAIter __end, \n+    random_shuffle(_RAIter __begin, _RAIter __end,\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+                   _RandomNumberGenerator&& __rand)\n+#else\n                    _RandomNumberGenerator& __rand)\n+#endif\n     {\n       if (__begin == __end)\n         return;"}, {"sha": "f2749b89eb12f4896fed36577555b66cdf0d8469", "filename": "libstdc++-v3/include/parallel/algorithmfwd.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgorithmfwd.h?ref=247d8075711bc24632eb919c15524ed095485c16", "patch": "@@ -1,6 +1,6 @@\n // <algorithm> parallel extensions -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -690,7 +690,12 @@ namespace __parallel\n \n   template<typename _RAIter, typename _RandomNumberGenerator>\n     void\n-    random_shuffle(_RAIter, _RAIter, _RandomNumberGenerator&);\n+    random_shuffle(_RAIter, _RAIter,\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t\t   _RandomNumberGenerator&&);\n+#else\n+\t\t   _RandomNumberGenerator&);\n+#endif\n \n   template<typename _IIter1, typename _IIter2, typename _OIter>\n     _OIter"}, {"sha": "2a0e0ed4e1a71beffad2f760f5987e917338d7a0", "filename": "libstdc++-v3/include/tr1/hashtable_policy.h", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h?ref=247d8075711bc24632eb919c15524ed095485c16", "patch": "@@ -55,29 +55,6 @@ namespace __detail\n       return __distance_fw(__first, __last, _Tag());\n     }\n \n-  template<typename _RAIter, typename _Tp>\n-    _RAIter\n-    __lower_bound(_RAIter __first, _RAIter __last, const _Tp& __val)\n-    {\n-      typedef typename std::iterator_traits<_RAIter>::difference_type _DType;\n-\n-      _DType __len = __last - __first;\n-      while (__len > 0)\n-\t{\n-\t  _DType __half = __len >> 1;\n-\t  _RAIter __middle = __first + __half;\n-\t  if (*__middle < __val)\n-\t    {\n-\t      __first = __middle;\n-\t      ++__first;\n-\t      __len = __len - __half - 1;\n-\t    }\n-\t  else\n-\t    __len = __half;\n-\t}\n-      return __first;\n-    }\n-\n   // Auxiliary types used for all instantiations of _Hashtable: nodes\n   // and iterators.\n   \n@@ -440,8 +417,8 @@ namespace __detail\n   _Prime_rehash_policy::\n   _M_next_bkt(std::size_t __n) const\n   {\n-    const unsigned long* __p = __lower_bound(__prime_list, __prime_list\n-\t\t\t\t\t     + _S_n_primes, __n);\n+    const unsigned long* __p = std::lower_bound(__prime_list, __prime_list\n+\t\t\t\t\t\t+ _S_n_primes, __n);\n     _M_next_resize = \n       static_cast<std::size_t>(__builtin_ceil(*__p * _M_max_load_factor));\n     return *__p;\n@@ -454,8 +431,8 @@ namespace __detail\n   _M_bkt_for_elements(std::size_t __n) const\n   {\n     const float __min_bkts = __n / _M_max_load_factor;\n-    const unsigned long* __p = __lower_bound(__prime_list, __prime_list\n-\t\t\t\t\t     + _S_n_primes, __min_bkts);\n+    const unsigned long* __p = std::lower_bound(__prime_list, __prime_list\n+\t\t\t\t\t\t+ _S_n_primes, __min_bkts);\n     _M_next_resize =\n       static_cast<std::size_t>(__builtin_ceil(*__p * _M_max_load_factor));\n     return *__p;\n@@ -483,8 +460,8 @@ namespace __detail\n \t  {\n \t    __min_bkts = std::max(__min_bkts, _M_growth_factor * __n_bkt);\n \t    const unsigned long* __p =\n-\t      __lower_bound(__prime_list, __prime_list + _S_n_primes,\n-\t\t\t    __min_bkts);\n+\t      std::lower_bound(__prime_list, __prime_list + _S_n_primes,\n+\t\t\t       __min_bkts);\n \t    _M_next_resize = static_cast<std::size_t>\n \t      (__builtin_ceil(*__p * _M_max_load_factor));\n \t    return std::make_pair(true, *__p);"}, {"sha": "b0e3574b4e0c66dd016791c5a79882c6d0f55178", "filename": "libstdc++-v3/testsuite/25_algorithms/shuffle/1.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshuffle%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshuffle%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshuffle%2F1.cc?ref=247d8075711bc24632eb919c15524ed095485c16", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// 2010-03-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <algorithm>\n+#include <random>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  for (unsigned size = 0; size < 50; ++size)\n+    {\n+      std::vector<int> vref(size);\n+      std::iota(vref.begin(), vref.end(), 0);\n+      std::vector<int> v1(vref), v2(vref);\n+\n+      std::ranlux48_base g1(size), g2(size + 1);\n+      std::shuffle(v1.begin(), v1.end(), g1);\n+      std::shuffle(v2.begin(), v2.end(), g2);\n+\n+      if (size >= 10)\n+\t{\n+\t  VERIFY( !std::equal(v1.begin(), v1.end(), vref.begin()) );\n+\t  VERIFY( !std::equal(v2.begin(), v2.end(), vref.begin()) );\n+\t  VERIFY( !std::equal(v1.begin(), v1.end(), v2.begin()) );\n+\t}\n+\n+      for (unsigned ind = 0; ind < size; ++ind)\n+\t{\n+\t  auto it1 = std::find(v1.begin(), v1.end(), vref[ind]);\n+\t  auto it2 = std::find(v2.begin(), v2.end(), vref[ind]);\n+\t  VERIFY( it1 != v1.end() );\n+\t  VERIFY( it2 != v2.end() );\n+\t  v1.erase(it1);\n+\t  v2.erase(it2);\n+\t}\n+      VERIFY( v1.empty() );\n+      VERIFY( v2.empty() );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4b921dca712a95600964584225264cae033b757b", "filename": "libstdc++-v3/testsuite/25_algorithms/shuffle/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshuffle%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshuffle%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshuffle%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=247d8075711bc24632eb919c15524ed095485c16", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// 2010-03-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <algorithm>\n+#include <random>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible         value_type;\n+  typedef value_type* \t\t       iterator_type;\n+  typedef std::mt19937_64            ugenerator_type;\n+\n+  template void shuffle(iterator_type, iterator_type, ugenerator_type&&);\n+} "}, {"sha": "0f0a1e19ea4c31a8b324140e344efe6470a996cc", "filename": "libstdc++-v3/testsuite/25_algorithms/shuffle/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshuffle%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247d8075711bc24632eb919c15524ed095485c16/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshuffle%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshuffle%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=247d8075711bc24632eb919c15524ed095485c16", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// 2010-03-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <algorithm>\n+#include <random>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\t          value_type;\n+  typedef value_type* \t               iterator_type;\n+  typedef std::mt19937_64            ugenerator_type;\n+\n+  template void shuffle(iterator_type, iterator_type, ugenerator_type&&);\n+} "}]}