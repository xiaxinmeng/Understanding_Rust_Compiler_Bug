{"sha": "ae52741c5e69eafabc749445ca991b01857f4ea0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1Mjc0MWM1ZTY5ZWFmYWJjNzQ5NDQ1Y2E5OTFiMDE4NTdmNGVhMA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-04-21T14:53:21Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-04-21T14:53:21Z"}, "message": "re PR c/35441 (pretty-printer cannot handle some expressions)\n\n2012-04-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR 35441\n\t* c-typeck.c (inform_declaration): New.\n\t(build_function_call_vec):  Do not pretty-print\n\texpressions when caret is enabled.\n\t(convert_arguments): Use inform_declaration.\ncp/\n\t* typeck.c (cp_build_function_call_vec): Do not pretty-print\n\texpressions when caret is enabled.\ntestsuite/\n\t* c-c++-common/pr35441.C: New.\n\nFrom-SVN: r186652", "tree": {"sha": "e0172180b9b6ef470102a85cd1da2ee85e3ccdb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0172180b9b6ef470102a85cd1da2ee85e3ccdb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae52741c5e69eafabc749445ca991b01857f4ea0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae52741c5e69eafabc749445ca991b01857f4ea0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae52741c5e69eafabc749445ca991b01857f4ea0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae52741c5e69eafabc749445ca991b01857f4ea0/comments", "author": null, "committer": null, "parents": [{"sha": "aab316c7c997b98b4aa4413856c5c743a4bf6f1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aab316c7c997b98b4aa4413856c5c743a4bf6f1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aab316c7c997b98b4aa4413856c5c743a4bf6f1d"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "94e92477e464c8efef969c3546a341facf2ce2b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae52741c5e69eafabc749445ca991b01857f4ea0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae52741c5e69eafabc749445ca991b01857f4ea0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae52741c5e69eafabc749445ca991b01857f4ea0", "patch": "@@ -1,3 +1,11 @@\n+2012-04-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 35441\n+\t* c-typeck.c (inform_declaration): New.\n+\t(build_function_call_vec):  Do not pretty-print\n+\texpressions when caret is enabled.\n+\t(convert_arguments): Use inform_declaration.\n+\n 2012-04-20  Jim Meyering  <meyering@redhat.com>\n \n \t* genmodes.c (make_complex_modes): Don't truncate a mode name of"}, {"sha": "2cd9572ec61a64380ad048c47bc84127fd088a1e", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae52741c5e69eafabc749445ca991b01857f4ea0/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae52741c5e69eafabc749445ca991b01857f4ea0/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ae52741c5e69eafabc749445ca991b01857f4ea0", "patch": "@@ -2682,6 +2682,14 @@ build_function_call (location_t loc, tree function, tree params)\n   return ret;\n }\n \n+/* Give a note about the location of the declaration of DECL.  */\n+\n+static void inform_declaration (tree decl)\n+{\n+  if (decl && (TREE_CODE (decl) != FUNCTION_DECL || !DECL_BUILT_IN (decl)))\n+    inform (DECL_SOURCE_LOCATION (decl), \"declared here\");\n+}\n+\n /* Build a function call to function FUNCTION with parameters PARAMS.\n    ORIGTYPES, if not NULL, is a vector of types; each element is\n    either NULL or the original type of the corresponding element in\n@@ -2744,7 +2752,20 @@ build_function_call_vec (location_t loc, tree function, VEC(tree,gc) *params,\n   if (!(TREE_CODE (fntype) == POINTER_TYPE\n \t&& TREE_CODE (TREE_TYPE (fntype)) == FUNCTION_TYPE))\n     {\n-      error_at (loc, \"called object %qE is not a function\", function);\n+      if (!flag_diagnostics_show_caret)\n+\terror_at (loc,\n+\t\t  \"called object %qE is not a function or function pointer\",\n+\t\t  function);\n+      else if (DECL_P (function))\n+\t{\n+\t  error_at (loc,\n+\t\t    \"called object %qD is not a function or function pointer\",\n+\t\t    function);\n+\t  inform_declaration (function);\n+\t}\n+      else\n+\terror_at (loc,\n+\t\t  \"called object is not a function or function pointer\");\n       return error_mark_node;\n     }\n \n@@ -3034,9 +3055,7 @@ convert_arguments (tree typelist, VEC(tree,gc) *values,\n \t  else\n \t    error_at (input_location,\n \t\t      \"too many arguments to function %qE\", function);\n-\n-\t  if (fundecl && !DECL_BUILT_IN (fundecl))\n-\t    inform (DECL_SOURCE_LOCATION (fundecl), \"declared here\");\n+\t  inform_declaration (fundecl);\n \t  return parmnum;\n \t}\n \n@@ -3269,8 +3288,7 @@ convert_arguments (tree typelist, VEC(tree,gc) *values,\n     {\n       error_at (input_location,\n \t\t\"too few arguments to function %qE\", function);\n-      if (fundecl && !DECL_BUILT_IN (fundecl))\n-\tinform (DECL_SOURCE_LOCATION (fundecl), \"declared here\");\n+      inform_declaration (fundecl);\n       return -1;\n     }\n "}, {"sha": "479ff69416eb705bd1d269942355c9f1586dcd47", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae52741c5e69eafabc749445ca991b01857f4ea0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae52741c5e69eafabc749445ca991b01857f4ea0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ae52741c5e69eafabc749445ca991b01857f4ea0", "patch": "@@ -1,3 +1,9 @@\n+2012-04-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 35441\n+\t* typeck.c (cp_build_function_call_vec): Do not pretty-print\n+\texpressions when caret is enabled.\n+\n 2012-04-20  Jan Hubicka  <jh@suse.cz>\n \n \tPR target/53042"}, {"sha": "5fb0946706932d0e1719c48eed8736e025433e8a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae52741c5e69eafabc749445ca991b01857f4ea0/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae52741c5e69eafabc749445ca991b01857f4ea0/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ae52741c5e69eafabc749445ca991b01857f4ea0", "patch": "@@ -3322,7 +3322,18 @@ cp_build_function_call_vec (tree function, VEC(tree,gc) **params,\n \t|| TREE_CODE (function) == TEMPLATE_ID_EXPR))\n     {\n       if (complain & tf_error)\n-\terror (\"%qE cannot be used as a function\", original);\n+\t{\n+\t  if (!flag_diagnostics_show_caret)\n+\t    error_at (input_location,\n+\t\t      \"%qE cannot be used as a function\", original);\n+\t  else if (DECL_P (original))\n+\t    error_at (input_location,\n+\t\t      \"%qD cannot be used as a function\", original);\n+\t  else \n+\t    error_at (input_location,\n+\t\t      \"expression cannot be used as a function\");\n+\t}\n+\n       return error_mark_node;\n     }\n "}, {"sha": "f5ac6345892a534d47dfc0c91f13c878d9b8daf5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae52741c5e69eafabc749445ca991b01857f4ea0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae52741c5e69eafabc749445ca991b01857f4ea0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae52741c5e69eafabc749445ca991b01857f4ea0", "patch": "@@ -1,3 +1,8 @@\n+2012-04-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 35441\n+\t* c-c++-common/pr35441.C: New.\n+\n 2012-04-20  Ian Lance Taylor  <iant@google.com>\n \n \t* go.test/go-test.exp (go-set-goarch): Recognize powerpc*-*-*."}]}