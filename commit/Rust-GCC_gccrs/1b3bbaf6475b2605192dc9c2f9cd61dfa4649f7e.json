{"sha": "1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIzYmJhZjY0NzViMjYwNTE5MmRjOWMyZjljZDYxZGZhNDY0OWY3ZQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2019-04-02T11:01:06Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2019-04-02T11:01:06Z"}, "message": "S/390: arch13: vec_revb vector byte swap builtin\n\ngcc/ChangeLog:\n\n2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* config/s390/s390-builtin-types.def: Add new builtin function types.\n\t* config/s390/s390-builtins.def: Add overloaded builtin\n\ts390_vec_revb. Add low-level builtins for vlbr and vstbr\n\tinstructions.\n\t* config/s390/vecintrin.h (vec_revb): New builtin name definition.\n\t* config/s390/vector.md (VT_HW_HSDT): New mode iterator.\n\t(\"bswap<mode>\"): New expander.\n\t(\"*bswap<mode>\", \"*bswap<mode>_emu\"): New insn definitions.\n\ngcc/testsuite/ChangeLog:\n\n2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* gcc.target/s390/zvector/vec-revb-load-double-z14.c: New test.\n\t* gcc.target/s390/zvector/vec-revb-load-double.c: New test.\n\t* gcc.target/s390/zvector/vec-revb-store-double-z14.c: New test.\n\t* gcc.target/s390/zvector/vec-revb-store-double.c: New test.\n\nFrom-SVN: r270084", "tree": {"sha": "abf6d85389bdd0d60308e3008c6ed6ebc965d9e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abf6d85389bdd0d60308e3008c6ed6ebc965d9e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e633a4f2550bbeafaba60249518cd59d82e4e2c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e633a4f2550bbeafaba60249518cd59d82e4e2c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e633a4f2550bbeafaba60249518cd59d82e4e2c8"}], "stats": {"total": 217, "additions": 217, "deletions": 0}, "files": [{"sha": "9017bb214816940f3014786ee1bbbba91a61fad8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e", "patch": "@@ -1,3 +1,14 @@\n+2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390-builtin-types.def: Add new builtin function types.\n+\t* config/s390/s390-builtins.def: Add overloaded builtin\n+\ts390_vec_revb. Add low-level builtins for vlbr and vstbr\n+\tinstructions.\n+\t* config/s390/vecintrin.h (vec_revb): New builtin name definition.\n+\t* config/s390/vector.md (VT_HW_HSDT): New mode iterator.\n+\t(\"bswap<mode>\"): New expander.\n+\t(\"*bswap<mode>\", \"*bswap<mode>_emu\"): New insn definitions.\n+\n 2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* config/s390/s390-builtins.def (B_VXE2): New builtin flag definition."}, {"sha": "cfd8f5783e55cd7f6857c5467a5b74abf90cbd27", "filename": "gcc/config/s390/s390-builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def?ref=1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e", "patch": "@@ -83,6 +83,7 @@ DEF_VECTOR_TYPE (BT_UV2DI, BT_ULONGLONG, 2)\n DEF_VECTOR_TYPE (BT_UV4SI, BT_UINT, 4)\n DEF_VECTOR_TYPE (BT_UV8HI, BT_USHORT, 8)\n DEF_VECTOR_TYPE (BT_V16QI, BT_SCHAR, 16)\n+DEF_VECTOR_TYPE (BT_V1TI, BT_INT128, 1)\n DEF_VECTOR_TYPE (BT_V2DF, BT_DBL, 2)\n DEF_VECTOR_TYPE (BT_V2DI, BT_LONGLONG, 2)\n DEF_VECTOR_TYPE (BT_V4SF, BT_FLT, 4)\n@@ -151,6 +152,7 @@ DEF_FN_TYPE_1 (BT_FN_UV8HI_UV8HI, BT_UV8HI, BT_UV8HI)\n DEF_FN_TYPE_1 (BT_FN_V16QI_SCHAR, BT_V16QI, BT_SCHAR)\n DEF_FN_TYPE_1 (BT_FN_V16QI_UCHAR, BT_V16QI, BT_UCHAR)\n DEF_FN_TYPE_1 (BT_FN_V16QI_V16QI, BT_V16QI, BT_V16QI)\n+DEF_FN_TYPE_1 (BT_FN_V1TI_V1TI, BT_V1TI, BT_V1TI)\n DEF_FN_TYPE_1 (BT_FN_V2DF_DBL, BT_V2DF, BT_DBL)\n DEF_FN_TYPE_1 (BT_FN_V2DF_DBLCONSTPTR, BT_V2DF, BT_DBLCONSTPTR)\n DEF_FN_TYPE_1 (BT_FN_V2DF_FLTCONSTPTR, BT_V2DF, BT_FLTCONSTPTR)"}, {"sha": "a2276858fe85af2e92b6e39c7def53d753827d97", "filename": "gcc/config/s390/s390-builtins.def", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtins.def?ref=1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e", "patch": "@@ -2867,3 +2867,28 @@ OB_DEF_VAR (s390_vec_fp_test_data_class_flt,s390_vftcisbcc, B_VXE,\n OB_DEF_VAR (s390_vec_fp_test_data_class_dbl,s390_vftcidbcc, 0,                  O2_U12,             BT_OV_BV2DI_V2DF_USHORT_INTPTR)          /* vftcidb */\n \n /* arch 13 builtins */\n+\n+/* Returns a vector where each vector element contains the corresponding byte-reversed vector element of the input vector in OP0.  */\n+OB_DEF     (s390_vec_revb,              s390_vec_revb_s16,  s390_vec_revb_dbl,  B_VX,               BT_FN_OV4SI_OV4SI)\n+OB_DEF_VAR (s390_vec_revb_s16,          s390_vlbrh,         0,                  0,                  BT_OV_V8HI_V8HI)\n+OB_DEF_VAR (s390_vec_revb_u16,          s390_vlbrh,         0,                  0,                  BT_OV_UV8HI_UV8HI)\n+OB_DEF_VAR (s390_vec_revb_s32,          s390_vlbrf,         0,                  0,                  BT_OV_V4SI_V4SI)\n+OB_DEF_VAR (s390_vec_revb_u32,          s390_vlbrf,         0,                  0,                  BT_OV_UV4SI_UV4SI)\n+OB_DEF_VAR (s390_vec_revb_s64,          s390_vlbrg,         0,                  0,                  BT_OV_V2DI_V2DI)\n+OB_DEF_VAR (s390_vec_revb_u64,          s390_vlbrg,         0,                  0,                  BT_OV_UV2DI_UV2DI)\n+OB_DEF_VAR (s390_vec_revb_flt,          s390_vlbrf_flt,     0,                  B_VXE,              BT_OV_V4SF_V4SF)\n+OB_DEF_VAR (s390_vec_revb_dbl,          s390_vlbrg_dbl,     0,                  0,                  BT_OV_V2DF_V2DF)\n+\n+B_DEF      (s390_vlbrh,                 bswapv8hi,          0,                  B_VX,               0,                   BT_FN_V8HI_V8HI)\n+B_DEF      (s390_vlbrf,                 bswapv4si,          0,                  B_VX,               0,                   BT_FN_V4SI_V4SI)\n+B_DEF      (s390_vlbrg,                 bswapv2di,          0,                  B_VX,               0,                   BT_FN_V2DI_V2DI)\n+B_DEF      (s390_vlbrq,                 bswapv1ti,          0,                  B_VX,               0,                   BT_FN_V1TI_V1TI)\n+B_DEF      (s390_vlbrf_flt,             bswapv4sf,          0,                  B_VXE,              0,                   BT_FN_V4SF_V4SF)\n+B_DEF      (s390_vlbrg_dbl,             bswapv2df,          0,                  B_VX,               0,                   BT_FN_V2DF_V2DF)\n+\n+B_DEF      (s390_vstbrh,                bswapv8hi,          0,                  B_VX,               0,                   BT_FN_V8HI_V8HI)\n+B_DEF      (s390_vstbrf,                bswapv4si,          0,                  B_VX,               0,                   BT_FN_V4SI_V4SI)\n+B_DEF      (s390_vstbrg,                bswapv2di,          0,                  B_VX,               0,                   BT_FN_V2DI_V2DI)\n+B_DEF      (s390_vstbrq,                bswapv1ti,          0,                  B_VX,               0,                   BT_FN_V1TI_V1TI)\n+B_DEF      (s390_vstbrf_flt,            bswapv4sf,          0,                  B_VXE,              0,                   BT_FN_V4SF_V4SF)\n+B_DEF      (s390_vstbrg_dbl,            bswapv2df,          0,                  B_VX,               0,                   BT_FN_V2DF_V2DF)"}, {"sha": "91f0a57623619997da74485f032251fa9b883a5b", "filename": "gcc/config/s390/vecintrin.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Fconfig%2Fs390%2Fvecintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Fconfig%2Fs390%2Fvecintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvecintrin.h?ref=1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e", "patch": "@@ -311,4 +311,5 @@ __lcbb(const void *ptr, int bndry)\n #define vec_nabs __builtin_s390_vec_nabs\n #define vec_sqrt __builtin_s390_vec_sqrt\n #define vec_fp_test_data_class __builtin_s390_vec_fp_test_data_class\n+#define vec_revb __builtin_s390_vec_revb\n #endif /* _VECINTRIN_H */"}, {"sha": "f25c86691575d63e0a079b17ad7afd5ddda4684a", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e", "patch": "@@ -33,6 +33,7 @@\n (define_mode_iterator V_HW2 [V16QI V8HI V4SI V2DI V2DF (V4SF \"TARGET_VXE\") (V1TF \"TARGET_VXE\")])\n \n (define_mode_iterator V_HW_64 [V2DI V2DF])\n+(define_mode_iterator VT_HW_HSDT [V8HI V4SI V4SF V2DI V2DF V1TI V1TF TI TF])\n \n ; Including TI for instructions that support it (va, vn, ...)\n (define_mode_iterator VT_HW [V16QI V8HI V4SI V2DI V2DF V1TI TI (V4SF \"TARGET_VXE\") (V1TF \"TARGET_VXE\")])\n@@ -2045,6 +2046,71 @@\n   \"vcl<VX_VEC_CONV_INT:bhfgq><VX_VEC_CONV_BFP:xde>b\\t%v0,%v1,0,5\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n+;\n+; Vector byte swap patterns\n+;\n+\n+; FIXME: The bswap rtl standard name currently does not appear to be\n+; used for vector modes.\n+(define_expand \"bswap<mode>\"\n+  [(set (match_operand:VT_HW_HSDT                   0 \"nonimmediate_operand\" \"\")\n+\t(bswap:VT_HW_HSDT (match_operand:VT_HW_HSDT 1 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_VX\")\n+\n+; vlbrh, vlbrf, vlbrg, vlbrq, vstbrh, vstbrf, vstbrg, vstbrq\n+(define_insn \"*bswap<mode>\"\n+  [(set (match_operand:VT_HW_HSDT                   0 \"nonimmediate_operand\" \"=v,v,R\")\n+\t(bswap:VT_HW_HSDT (match_operand:VT_HW_HSDT 1 \"nonimmediate_operand\"  \"v,R,v\")))]\n+  \"TARGET_VXE2\"\n+  \"@\n+   #\n+   vlbr<bhfgq>\\t%v0,%v1\n+   vstbr<bhfgq>\\t%v1,%v0\"\n+  [(set_attr \"op_type\" \"*,VRX,VRX\")])\n+\n+(define_insn_and_split \"*bswap<mode>_emu\"\n+  [(set (match_operand:VT_HW_HSDT                   0 \"nonimmediate_operand\" \"=vR\")\n+\t(bswap:VT_HW_HSDT (match_operand:VT_HW_HSDT 1 \"nonimmediate_operand\" \"vR\")))]\n+  \"TARGET_VX && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& ((!memory_operand (operands[1], <MODE>mode)\n+        && !memory_operand (operands[0], <MODE>mode))\n+        || !TARGET_VXE2)\"\n+  [(set (match_dup 3)\n+\t(unspec:V16QI [(match_dup 4)\n+\t\t       (match_dup 4)\n+\t\t       (match_dup 2)]\n+\t\t      UNSPEC_VEC_PERM))\n+   (set (match_dup 0) (subreg:VT_HW_HSDT (match_dup 3) 0))]\n+{\n+  static char p[4][16] =\n+    { { 1,  0,  3,  2,  5,  4,  7, 6, 9,  8,  11, 10, 13, 12, 15, 14 },   /* H */\n+      { 3,  2,  1,  0,  7,  6,  5, 4, 11, 10, 9,  8,  15, 14, 13, 12 },   /* S */\n+      { 7,  6,  5,  4,  3,  2,  1, 0, 15, 14, 13, 12, 11, 10, 9,  8  },   /* D */\n+      { 15, 14, 13, 12, 11, 10, 9, 8, 7,  6,  5,  4,  3,  2,  1,  0  } }; /* T */\n+  char *perm;\n+  rtx perm_rtx[16], constv;\n+\n+  switch (GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)))\n+    {\n+    case 2: perm = p[0]; break;\n+    case 4: perm = p[1]; break;\n+    case 8: perm = p[2]; break;\n+    case 16: perm = p[3]; break;\n+    default: gcc_unreachable ();\n+    }\n+  for (int i = 0; i < 16; i++)\n+    perm_rtx[i] = GEN_INT (perm[i]);\n+\n+  operands[1] = force_reg (<MODE>mode, operands[1]);\n+  operands[2] = gen_reg_rtx (V16QImode);\n+  operands[3] = gen_reg_rtx (V16QImode);\n+  operands[4] = simplify_gen_subreg (V16QImode, operands[1], <MODE>mode, 0);\n+  constv = force_const_mem (V16QImode, gen_rtx_CONST_VECTOR (V16QImode, gen_rtvec_v (16, perm_rtx)));\n+  emit_move_insn (operands[2], constv);\n+})\n+\n+\n ; reduc_smin\n ; reduc_smax\n ; reduc_umin"}, {"sha": "4b4d1f1c1e5ff1b332981430b7964ca99b821645", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e", "patch": "@@ -1,3 +1,10 @@\n+2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/zvector/vec-revb-load-double-z14.c: New test.\n+\t* gcc.target/s390/zvector/vec-revb-load-double.c: New test.\n+\t* gcc.target/s390/zvector/vec-revb-store-double-z14.c: New test.\n+\t* gcc.target/s390/zvector/vec-revb-store-double.c: New test.\n+\n 2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* gcc.target/s390/arch13/fp-signedint-convert-1.c: New test."}, {"sha": "e394460cf29bb4f62b5ddd086f9737cd3c1c35eb", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-revb-load-double-z14.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-revb-load-double-z14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-revb-load-double-z14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-revb-load-double-z14.c?ref=1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=z14 -mzvector\" } */\n+\n+#include <vecintrin.h>\n+\n+vector double\n+test (vector double x)\n+{\n+  return vec_revb (x);\n+}\n+\n+vector double\n+test2 (vector double *x)\n+{\n+  return vec_revb (*x);\n+}\n+\n+vector double\n+test3 (double *x)\n+{\n+  return vec_revb (vec_xl (0, x));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\\t\" 3 } } */"}, {"sha": "e5be06cdd4aaa740c97021995c5070f8f386b386", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-revb-load-double.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-revb-load-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-revb-load-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-revb-load-double.c?ref=1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=arch13 -mzvector\" } */\n+\n+#include <vecintrin.h>\n+\n+vector double\n+test (vector double x)\n+{\n+  return vec_revb (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\\t\" 1 } } */\n+\n+\n+vector double\n+test2 (vector double *x)\n+{\n+  return vec_revb (*x);\n+}\n+\n+vector double\n+test3 (double *x)\n+{\n+  return vec_revb (vec_xl (0, x));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlbrg\\t\" 2 } } */"}, {"sha": "56a74425bb6719ee13417028ae7b10d167119fa5", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-revb-store-double-z14.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-revb-store-double-z14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-revb-store-double-z14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-revb-store-double-z14.c?ref=1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=z14 -mzvector\" } */\n+\n+#include <vecintrin.h>\n+\n+/* reg -> mem */\n+void\n+test (vector double *target, vector double x)\n+{\n+  *target = vec_revb (x);\n+}\n+\n+void\n+test3 (double *target, vector double x)\n+{\n+  vec_xst (vec_revb (x), 0, target);\n+}\n+\n+/* mem -> mem */\n+void\n+test2 (vector double *target, vector double *x)\n+{\n+  *target = vec_revb (*x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\\t\" 3 } } */"}, {"sha": "9aa6ec9fe57b7586b7b8f67ede16673d1694dbca", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-revb-store-double.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-revb-store-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-revb-store-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-revb-store-double.c?ref=1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=arch13 -mzvector\" } */\n+\n+#include <vecintrin.h>\n+\n+/* reg -> mem */\n+void\n+test (vector double *target, vector double x)\n+{\n+  *target = vec_revb (x);\n+}\n+\n+void\n+test3 (double *target, vector double x)\n+{\n+  vec_xst (vec_revb (x), 0, target);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstbrg\\t\" 2 } } */\n+\n+/* mem -> mem: This becomes vlbrg + vst */\n+void\n+test2 (vector double *target, vector double *x)\n+{\n+  *target = vec_revb (*x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlbrg\\t\" 1 } } */"}]}