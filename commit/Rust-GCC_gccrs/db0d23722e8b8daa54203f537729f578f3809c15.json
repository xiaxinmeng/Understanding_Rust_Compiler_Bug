{"sha": "db0d23722e8b8daa54203f537729f578f3809c15", "node_id": "C_kwDOANBUbNoAKGRiMGQyMzcyMmU4YjhkYWE1NDIwM2Y1Mzc3MjlmNTc4ZjM4MDljMTU", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-13T10:45:46Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-13T10:49:36Z"}, "message": "Simplify git-backport.py script.\n\nIt's very unlikely that somebody is going to backport a revision\nthat is > 14 months old to a release branch.\n\ncontrib/ChangeLog:\n\n\t* git-backport.py: Simplify the script as pre-auto-ChangeLog era\n\tis 14 months old.", "tree": {"sha": "9d523ec667ac4b6db31033d6ae652f12d803cc45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d523ec667ac4b6db31033d6ae652f12d803cc45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db0d23722e8b8daa54203f537729f578f3809c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db0d23722e8b8daa54203f537729f578f3809c15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db0d23722e8b8daa54203f537729f578f3809c15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db0d23722e8b8daa54203f537729f578f3809c15/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fcc3a1dd2372deea8856c55d25337b06e201203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fcc3a1dd2372deea8856c55d25337b06e201203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fcc3a1dd2372deea8856c55d25337b06e201203"}], "stats": {"total": 39, "additions": 2, "deletions": 37}, "files": [{"sha": "bc2907a14ede7798fdc136e8dee2912bee062f77", "filename": "contrib/git-backport.py", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0d23722e8b8daa54203f537729f578f3809c15/contrib%2Fgit-backport.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0d23722e8b8daa54203f537729f578f3809c15/contrib%2Fgit-backport.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgit-backport.py?ref=db0d23722e8b8daa54203f537729f578f3809c15", "patch": "@@ -23,43 +23,8 @@\n import subprocess\n \n if __name__ == '__main__':\n-    parser = argparse.ArgumentParser(description='Backport a git revision and '\n-                                     'stash all ChangeLog files.')\n+    parser = argparse.ArgumentParser(description='Backport a git revision.')\n     parser.add_argument('revision', help='Revision')\n     args = parser.parse_args()\n \n-    r = subprocess.run('git cherry-pick -x %s' % args.revision, shell=True)\n-    if r.returncode == 0:\n-        cmd = 'git show --name-only --pretty=\"\" -- \"*ChangeLog\"'\n-        changelogs = subprocess.check_output(cmd, shell=True, encoding='utf8')\n-        changelogs = changelogs.strip()\n-        if changelogs:\n-            for changelog in changelogs.split('\\n'):\n-                subprocess.check_output('git checkout HEAD~ %s' % changelog,\n-                                        shell=True)\n-        subprocess.check_output('git commit --amend --no-edit', shell=True)\n-    else:\n-        # 1) remove all ChangeLog files from conflicts\n-        out = subprocess.check_output('git diff --name-only --diff-filter=U',\n-                                      shell=True,\n-                                      encoding='utf8')\n-        conflicts = out.strip().split('\\n')\n-        changelogs = [c for c in conflicts if c.endswith('ChangeLog')]\n-        if changelogs:\n-            cmd = 'git checkout --theirs %s' % ' '.join(changelogs)\n-            subprocess.check_output(cmd, shell=True)\n-        # 2) remove all ChangeLog files from index\n-        cmd = 'git diff --name-only --diff-filter=M HEAD'\n-        out = subprocess.check_output(cmd, shell=True, encoding='utf8')\n-        out = out.strip().split('\\n')\n-        modified = [c for c in out if c.endswith('ChangeLog')]\n-        for m in modified:\n-            subprocess.check_output('git reset %s' % m, shell=True)\n-            subprocess.check_output('git checkout %s' % m, shell=True)\n-\n-        # try to continue\n-        if len(conflicts) == len(changelogs):\n-            cmd = 'git -c core.editor=true cherry-pick --continue'\n-            subprocess.check_output(cmd, shell=True)\n-        else:\n-            print('Please resolve all remaining file conflicts.')\n+    subprocess.run('git cherry-pick -x %s' % args.revision, shell=True)"}]}