{"sha": "87673f8408b5214dfc58cb4f7255fea96097e5db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc2NzNmODQwOGI1MjE0ZGZjNThjYjRmNzI1NWZlYTk2MDk3ZTVkYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-01-22T12:48:03Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-01-22T12:48:03Z"}, "message": "re PR target/38931 (Seg fault when getting instruction latency on a *movsi_1 with an MMX target register)\n\n\tPR target/38931\n\t* config/i386/i386.md (*movsi_1): Use type \"mmx\" for alternative 2.\n\t(*movdi_1_rex64): Use type \"mmx\" for alternative 5.\n\ntestsuite/ChangeLog:\n\n\tPR target/38931\n\t* gcc.target/i386/pr38931.c: New test.\n\nFrom-SVN: r143567", "tree": {"sha": "2416558286110cf27f48a8955c29ad3eb65ac9ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2416558286110cf27f48a8955c29ad3eb65ac9ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87673f8408b5214dfc58cb4f7255fea96097e5db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87673f8408b5214dfc58cb4f7255fea96097e5db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87673f8408b5214dfc58cb4f7255fea96097e5db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87673f8408b5214dfc58cb4f7255fea96097e5db/comments", "author": null, "committer": null, "parents": [{"sha": "963392680fda9affbde3be6ce9c1465c1c732e90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/963392680fda9affbde3be6ce9c1465c1c732e90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/963392680fda9affbde3be6ce9c1465c1c732e90"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "8b921a2142405d9f4f1233a0d2a55a8246559a3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87673f8408b5214dfc58cb4f7255fea96097e5db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87673f8408b5214dfc58cb4f7255fea96097e5db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87673f8408b5214dfc58cb4f7255fea96097e5db", "patch": "@@ -1,11 +1,17 @@\n+2009-01-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/38931\n+\t* config/i386/i386.md (*movsi_1): Use type \"mmx\" for alternative 2.\n+\t(*movdi_1_rex64): Use type \"mmx\" for alternative 5.\n+\n 2009-01-22  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.h (DATA_ALIGNMENT): Align structures, unions and arrays to\n \ta word boundary.\n \t(LOCAL_ALIGNMENT): Similarly.\n \n 2009-01-22  Mark Shinwell  <shinwell@codesourcery.com>\n-            Joseph Myers  <joseph@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/arm/arm.c (all_architectures): Add iWMMXt2 entry.\n \t* config/arm/arm-cores.def: New ARM_CORE entry for iWMMXt2."}, {"sha": "6543cf5ec57400495d3708f1c278483f6c0cbc3d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87673f8408b5214dfc58cb4f7255fea96097e5db/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87673f8408b5214dfc58cb4f7255fea96097e5db/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=87673f8408b5214dfc58cb4f7255fea96097e5db", "patch": "@@ -1534,7 +1534,7 @@\n \t  gcc_unreachable ();\n \t}\n \n-    case TYPE_MMXADD:\n+    case TYPE_MMX:\n       return \"pxor\\t%0, %0\";\n \n     case TYPE_MMXMOV:\n@@ -1552,7 +1552,7 @@\n }\n   [(set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"2\")\n-\t      (const_string \"mmxadd\")\n+\t      (const_string \"mmx\")\n \t    (eq_attr \"alternative\" \"3,4,5\")\n \t      (const_string \"mmxmov\")\n \t    (eq_attr \"alternative\" \"6\")\n@@ -2370,7 +2370,7 @@\n     case TYPE_SSELOG1:\n       return \"%vpxor\\t%0, %d0\";\n \n-    case TYPE_MMXADD:\n+    case TYPE_MMX:\n       return \"pxor\\t%0, %0\";\n \n     case TYPE_MULTI:\n@@ -2391,7 +2391,7 @@\n }\n   [(set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"5\")\n-\t      (const_string \"mmxadd\")\n+\t      (const_string \"mmx\")\n \t    (eq_attr \"alternative\" \"6,7,8,9,10\")\n \t      (const_string \"mmxmov\")\n \t    (eq_attr \"alternative\" \"11\")"}, {"sha": "dde062e1838a5f563b14efa5c7721156ffe907ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87673f8408b5214dfc58cb4f7255fea96097e5db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87673f8408b5214dfc58cb4f7255fea96097e5db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87673f8408b5214dfc58cb4f7255fea96097e5db", "patch": "@@ -1,3 +1,8 @@\n+2009-01-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/38931\n+\t* gcc.target/i386/pr38931.c: New test.\n+\n 2009-01-22  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/38930"}, {"sha": "dd35dec75205f6ec5b47f2d7fce28ee4041159cc", "filename": "gcc/testsuite/gcc.target/i386/pr38931.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87673f8408b5214dfc58cb4f7255fea96097e5db/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr38931.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87673f8408b5214dfc58cb4f7255fea96097e5db/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr38931.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr38931.c?ref=87673f8408b5214dfc58cb4f7255fea96097e5db", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse\" } */\n+\n+typedef int __m64 __attribute__ ((__vector_size__ (8)));\n+\n+extern __m64 foo () ;\n+\n+void bar (const int input_bpl, const unsigned char *input,\n+\t  unsigned char *output, unsigned long x1)\n+{\n+  unsigned char *pix_end_ptr = output + x1 * 4;\n+  __m64 m_original = { 0, 0 };\n+  __m64 m_base_addr = __builtin_ia32_vec_init_v2si (0, input_bpl);\n+  __m64 m_addr = __builtin_ia32_paddd (m_original, m_base_addr);\n+  __m64 *a0 = (__m64 *) input;\n+\n+  for (; output < pix_end_ptr; output += 4)\n+    {\n+      a0 = (__m64 *) (input + __builtin_ia32_vec_ext_v2si (m_addr, 0));\n+      m_addr = foo ();\n+      __builtin_prefetch (a0, 0);\n+    }\n+}"}]}