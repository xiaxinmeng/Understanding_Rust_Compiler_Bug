{"sha": "de0c0e694f430d942db00e60e6218d9e1715f119", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUwYzBlNjk0ZjQzMGQ5NDJkYjAwZTYwZTYyMThkOWUxNzE1ZjExOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-04-20T11:48:36Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-04-20T11:48:36Z"}, "message": "re PR c++/10405 (Segfault in setup_class_bindings)\n\ncp:\n\tPR c++/10405\n\t* search.c (lookup_field_1): Final scan goes backwards for\n\ttypes, forwards for non-types.\ntestsuite:\n\tPR c++/10405\n\t* g++.dg/lookup/struct-hack1.C: New test.\n\nFrom-SVN: r65846", "tree": {"sha": "e581bf7754f4355768ae4c9b814d1df04746f00e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e581bf7754f4355768ae4c9b814d1df04746f00e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de0c0e694f430d942db00e60e6218d9e1715f119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de0c0e694f430d942db00e60e6218d9e1715f119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de0c0e694f430d942db00e60e6218d9e1715f119", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de0c0e694f430d942db00e60e6218d9e1715f119/comments", "author": null, "committer": null, "parents": [{"sha": "1613e52bdd61cfd2e00fb326c5cfef8e07f8c797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1613e52bdd61cfd2e00fb326c5cfef8e07f8c797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1613e52bdd61cfd2e00fb326c5cfef8e07f8c797"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "0667a9718055577a8c682b668ab346790de1ba70", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0c0e694f430d942db00e60e6218d9e1715f119/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0c0e694f430d942db00e60e6218d9e1715f119/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=de0c0e694f430d942db00e60e6218d9e1715f119", "patch": "@@ -1,3 +1,9 @@\n+2003-04-19  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/10405\n+\t* search.c (lookup_field_1): Final scan goes backwards for\n+\ttypes, forwards for non-types.\n+\n 2003-04-17  Roger Sayle  <roger@eyesopen.com>\n \n \tPR c/10375"}, {"sha": "433e1ac13ae046c4b6e5364604b9796711a12ced", "filename": "gcc/cp/search.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0c0e694f430d942db00e60e6218d9e1715f119/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0c0e694f430d942db00e60e6218d9e1715f119/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=de0c0e694f430d942db00e60e6218d9e1715f119", "patch": "@@ -472,19 +472,23 @@ lookup_field_1 (tree type, tree name, bool want_type)\n \n \t      /* We might have a nested class and a field with the\n \t\t same name; we sorted them appropriately via\n-\t\t field_decl_cmp, so just look for the last field with\n-\t\t this name.  */\n-\t      while (true)\n+\t\t field_decl_cmp, so just look for the first or last\n+\t\t field with this name.  */\n+\t      if (want_type)\n \t\t{\n-\t\t  if (!want_type \n-\t\t      || TREE_CODE (fields[i]) == TYPE_DECL\n-\t\t      || DECL_CLASS_TEMPLATE_P (fields[i]))\n-\t\t    field = fields[i];\n-\t\t  if (i + 1 == hi || DECL_NAME (fields[i+1]) != name)\n-\t\t    break;\n-\t\t  i++;\n+\t\t  do\n+\t\t    field = fields[i--];\n+\t\t  while (i >= lo && DECL_NAME (fields[i]) == name);\n+\t\t  if (TREE_CODE (field) != TYPE_DECL\n+\t\t      && !DECL_CLASS_TEMPLATE_P (field))\n+\t\t    field = NULL_TREE;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  do\n+\t\t    field = fields[i++];\n+\t\t  while (i < hi && DECL_NAME (fields[i]) == name);\n \t\t}\n-\n \t      return field;\n \t    }\n \t}"}, {"sha": "408d817eea36cb971f65f8f90e078c194d2573f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0c0e694f430d942db00e60e6218d9e1715f119/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0c0e694f430d942db00e60e6218d9e1715f119/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de0c0e694f430d942db00e60e6218d9e1715f119", "patch": "@@ -1,3 +1,8 @@\n+2003-04-19  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/10405\n+\t* g++.dg/lookup/struct-hack1.C: New test.\n+\n 2003-04-20  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* ucs.c: Update diagnostic messages."}, {"sha": "e84d65b335507a2716dd8243b844b46671eb755a", "filename": "gcc/testsuite/g++.dg/lookup/struct-hack1.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0c0e694f430d942db00e60e6218d9e1715f119/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fstruct-hack1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0c0e694f430d942db00e60e6218d9e1715f119/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fstruct-hack1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fstruct-hack1.C?ref=de0c0e694f430d942db00e60e6218d9e1715f119", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 19 Apr 2003 <nathan@codesourcery.com>\n+\n+// PR 10405. ICE\n+\n+#define MEM_ENUM(name) int name; enum name {};\n+\n+struct Base\n+{\n+  MEM_ENUM (a)\n+  MEM_ENUM (b)\n+  MEM_ENUM (c)\n+  MEM_ENUM (d)\n+  MEM_ENUM (e)\n+  MEM_ENUM (f)\n+  MEM_ENUM (g)\n+  MEM_ENUM (h)\n+  MEM_ENUM (i)\n+  MEM_ENUM (j)\n+  MEM_ENUM (k)\n+  MEM_ENUM (l)\n+  MEM_ENUM (m)\n+  MEM_ENUM (n)\n+  MEM_ENUM (o)\n+  MEM_ENUM (p)\n+  MEM_ENUM (q)\n+  MEM_ENUM (r)\n+  MEM_ENUM (s)\n+  MEM_ENUM (t)\n+  MEM_ENUM (u)\n+  MEM_ENUM (v)\n+  MEM_ENUM (w)\n+    };\n+\n+struct D : Base  {};\n+"}]}