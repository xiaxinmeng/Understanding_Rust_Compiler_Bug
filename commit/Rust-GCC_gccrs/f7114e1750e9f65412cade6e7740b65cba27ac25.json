{"sha": "f7114e1750e9f65412cade6e7740b65cba27ac25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcxMTRlMTc1MGU5ZjY1NDEyY2FkZTZlNzc0MGI2NWNiYTI3YWMyNQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-01-06T00:15:29Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-06T00:15:29Z"}, "message": "cpp.texi: Update for -MQ.\n\n        * cpp.texi: Update for -MQ.\n        * cppinit.c (cpp_create_reader): Always create pfile->deps.\n        (cpp_cleanup): Always free pfile->deps.\n        (initialize_dependency_output): Don't create pfile->deps.\n        (cpp_handle_option): Similarly.\n        (OPT_MQ): New.\n        * gcc.c (cpp_options): Handle -MQ.\n        (DEFAULT_WORD_SWITCH_TAKES_ARG): Add -MQ.\n        * mkdeps.c (base_name): Remove.\n        (deps_init): Don't allocate vector space until it's needed.\n        (deps_free): Only free vectors if allocated.\n        (deps_add_target, deps_add_dep): Update for initial allocation.\n        (deps_add_default_target): Don't strip to the base_name.\n\nFrom-SVN: r38735", "tree": {"sha": "dfcf1a323ecd306223b732c5c47577888caad329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfcf1a323ecd306223b732c5c47577888caad329"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7114e1750e9f65412cade6e7740b65cba27ac25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7114e1750e9f65412cade6e7740b65cba27ac25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7114e1750e9f65412cade6e7740b65cba27ac25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7114e1750e9f65412cade6e7740b65cba27ac25/comments", "author": null, "committer": null, "parents": [{"sha": "a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87"}], "stats": {"total": 128, "additions": 65, "deletions": 63}, "files": [{"sha": "84f8a29522b0f3681f3469b2995710945cd2023b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7114e1750e9f65412cade6e7740b65cba27ac25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7114e1750e9f65412cade6e7740b65cba27ac25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7114e1750e9f65412cade6e7740b65cba27ac25", "patch": "@@ -1,3 +1,19 @@\n+2001-01-05  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cpp.texi: Update for -MQ.\n+        * cppinit.c (cpp_create_reader): Always create pfile->deps.\n+        (cpp_cleanup): Always free pfile->deps.\n+        (initialize_dependency_output): Don't create pfile->deps.\n+        (cpp_handle_option): Similarly.\n+        (OPT_MQ): New.\n+        * gcc.c (cpp_options): Handle -MQ.\n+        (DEFAULT_WORD_SWITCH_TAKES_ARG): Add -MQ.\n+        * mkdeps.c (base_name): Remove.\n+        (deps_init): Don't allocate vector space until it's needed.\n+        (deps_free): Only free vectors if allocated.\n+        (deps_add_target, deps_add_dep): Update for initial allocation.\n+        (deps_add_default_target): Don't strip to the base_name.\n+\n 2001-01-05  DJ Delorie <dj@redhat.com>\n \n \t* config/v850/v850.h (RETURN_ADDR_RTX): Define."}, {"sha": "1f8121f9b101909b5dba7ebd4a471268ff75dc49", "filename": "gcc/cpp.texi", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7114e1750e9f65412cade6e7740b65cba27ac25/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7114e1750e9f65412cade6e7740b65cba27ac25/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=f7114e1750e9f65412cade6e7740b65cba27ac25", "patch": "@@ -3491,24 +3491,36 @@ This is typical output:-\n /tmp/test.h:\n @end smallexample\n \n+@item -MQ @var{target}\n @item -MT @var{target}\n @findex -MT\n-By default CPP uses the base file name and appends the object suffix,\n-normally ``.o'', to it to obtain the name of the target for dependency\n-generation.  With @samp{-MT} you can specify a target yourself,\n-overriding the default one.\n+@findex -MQ\n+By default CPP uses the main file name, including any path, and appends\n+the object suffix, normally ``.o'', to it to obtain the name of the\n+target for dependency generation.  With @samp{-MT} you can specify a\n+target yourself, overriding the default one.\n \n If you want multiple targets, you can specify them as a single argument\n to @samp{-MT}, or use multiple @samp{-MT} options.\n \n The targets you specify are output in the order they appear on the\n-command line, and, unlike the default target, are not quoted for MAKE.\n-This allows you to do things like, for example,\n+command line.  @samp{-MQ} is identical to @samp{-MT}, except that the\n+target name is quoted for Make, but with @samp{-MT} it isn't.  For\n+example, -MT '$(objpfx)foo.o' gives\n \n @smallexample\n--MT '$(objpfx)foo.o $(objpfx)foo.os $(objpfx)foo.op'\n+$(objpfx)foo.o: /tmp/foo.c\n @end smallexample\n \n+but -MQ '$(objpfx)foo.o' gives\n+\n+@smallexample\n+$$(objpfx)foo.o: /tmp/foo.c\n+@end smallexample\n+\n+The default target is automatically quoted, as if it were given with\n+@samp{-MQ}.\n+\n @item -H\n @findex -H\n Print the name of each header file used, in addition to other normal"}, {"sha": "b0c00ae425edbd52efe602b54eef81176eb3bb60", "filename": "gcc/cppinit.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7114e1750e9f65412cade6e7740b65cba27ac25/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7114e1750e9f65412cade6e7740b65cba27ac25/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=f7114e1750e9f65412cade6e7740b65cba27ac25", "patch": "@@ -499,6 +499,10 @@ cpp_create_reader (lang)\n   /* After creating pfile->pending.  */\n   set_lang (pfile, lang);\n \n+  /* It's simplest to just create this struct whether or not it will\n+     be needed.  */\n+  pfile->deps = deps_init ();\n+\n   /* Initialize lexer state.  */\n   pfile->state.save_comments = ! CPP_OPTION (pfile, discard_comments);\n \n@@ -552,8 +556,7 @@ cpp_cleanup (pfile)\n   if (pfile->macro_buffer)\n     free ((PTR) pfile->macro_buffer);\n \n-  if (pfile->deps)\n-    deps_free (pfile->deps);\n+  deps_free (pfile->deps);\n \n   _cpp_cleanup_includes (pfile);\n   _cpp_cleanup_stacks (pfile);\n@@ -753,9 +756,6 @@ initialize_dependency_output (pfile)\n \t    return;\n \t}\n \n-      if (! pfile->deps)\n-\tpfile->deps = deps_init ();\n-\n       /* Find the space before the DEPS_TARGET, if there is one.  */\n       s = strchr (spec, ' ');\n       if (s)\n@@ -1083,6 +1083,7 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"MM\",                       0,      OPT_MM)                         \\\n   DEF_OPT(\"MMD\",                      no_fil, OPT_MMD)                        \\\n   DEF_OPT(\"MP\",                       0,      OPT_MP)                         \\\n+  DEF_OPT(\"MQ\",                       no_tgt, OPT_MQ)                         \\\n   DEF_OPT(\"MT\",                       no_tgt, OPT_MT)                         \\\n   DEF_OPT(\"P\",                        0,      OPT_P)                          \\\n   DEF_OPT(\"U\",                        no_mac, OPT_U)                          \\\n@@ -1494,9 +1495,6 @@ cpp_handle_option (pfile, argc, argv)\n \tcase OPT_MD:\n \tcase OPT_MM:\n \tcase OPT_MMD:\n-\t  if (! pfile->deps)\n-\t    pfile->deps = deps_init ();\n-\n \t  if (opt_code == OPT_M || opt_code == OPT_MD)\n \t    CPP_OPTION (pfile, print_deps) = 2;\n  \t  else\n@@ -1515,11 +1513,10 @@ cpp_handle_option (pfile, argc, argv)\n \t  CPP_OPTION (pfile, deps_phony_targets) = 1;\n \t  break;\n \n+\tcase OPT_MQ:\n \tcase OPT_MT:\n-\t  /* Add a target.  */\n-\t  if (! pfile->deps)\n-\t    pfile->deps = deps_init ();\n-\t  deps_add_target (pfile->deps, arg, 0);\n+\t  /* Add a target.  -MQ quotes for Make.  */\n+\t  deps_add_target (pfile->deps, arg, opt_code == OPT_MQ);\n \t  break;\n \n \tcase OPT_A:"}, {"sha": "65fa5206a8eb6291fbac375107eb7fd18c78f078", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7114e1750e9f65412cade6e7740b65cba27ac25/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7114e1750e9f65412cade6e7740b65cba27ac25/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=f7114e1750e9f65412cade6e7740b65cba27ac25", "patch": "@@ -584,7 +584,7 @@ static const char *cpp_options =\n \"%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n  %{std*} %{nostdinc*}\\\n  %{C} %{v} %{I*} %{P} %{$} %I\\\n- %{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG} %{MP} %{MT}\\\n+ %{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG} %{MP} %{MQ} %{MT}\\\n  %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3}\\\n  %{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n  %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n@@ -663,7 +663,7 @@ static struct user_specs *user_specs_head, *user_specs_tail;\n   || !strcmp (STR, \"idirafter\") || !strcmp (STR, \"iprefix\") \\\n   || !strcmp (STR, \"iwithprefix\") || !strcmp (STR, \"iwithprefixbefore\") \\\n   || !strcmp (STR, \"isystem\") || !strcmp (STR, \"specs\") \\\n-  || !strcmp (STR, \"MF\") || !strcmp (STR, \"MT\"))\n+  || !strcmp (STR, \"MF\") || !strcmp (STR, \"MT\") || !strcmp (STR, \"MQ\"))\n \n #ifndef WORD_SWITCH_TAKES_ARG\n #define WORD_SWITCH_TAKES_ARG(STR) DEFAULT_WORD_SWITCH_TAKES_ARG (STR)"}, {"sha": "a128a6f326fef83640fa2754b6cde91611aa8e8e", "filename": "gcc/mkdeps.c", "status": "modified", "additions": 19, "deletions": 42, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7114e1750e9f65412cade6e7740b65cba27ac25/gcc%2Fmkdeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7114e1750e9f65412cade6e7740b65cba27ac25/gcc%2Fmkdeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkdeps.c?ref=f7114e1750e9f65412cade6e7740b65cba27ac25", "patch": "@@ -38,7 +38,6 @@ struct deps\n };\n \n static const char *munge\tPARAMS ((const char *));\n-static const char *base_name\tPARAMS ((const char *));\n \n /* Given a filename, quote characters in that filename which are\n    significant to Make.  Note that it's not possible to quote all such\n@@ -107,49 +106,22 @@ munge (filename)\n   return buffer;\n }\n \n-/* Given a pathname, calculate the non-directory part.  This always\n-   knows how to handle Unix-style pathnames, and understands VMS and\n-   DOS paths on those systems.  */\n-\n-/* Find the base name of a (partial) pathname FNAME.\n-   Returns a pointer into the string passed in.\n-   Accepts Unix (/-separated) paths on all systems,\n-   DOS and VMS paths on those systems.  */\n-\n-static const char *\n-base_name (fname)\n-     const char *fname;\n-{\n-  const char *s = fname;\n-  const char *p;\n-#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n-  if (ISALPHA (s[0]) && s[1] == ':') s += 2;\n-  if ((p = strrchr (s, '\\\\'))) s = p + 1;\n-#elif defined VMS\n-  if ((p = strrchr (s, ':'))) s = p + 1; /* Skip device.  */\n-  if ((p = strrchr (s, ']'))) s = p + 1; /* Skip directory.  */\n-  if ((p = strrchr (s, '>'))) s = p + 1; /* Skip alternate (int'n'l) dir.  */\n-#endif\n-  if ((p = strrchr (s, '/'))) s = p + 1;\n-  return s;\n-}\n-\n /* Public routines.  */\n \n struct deps *\n deps_init ()\n {\n   struct deps *d = (struct deps *) xmalloc (sizeof (struct deps));\n \n-  /* Allocate space for the vectors now.  */\n+  /* Allocate space for the vectors only if we need it.  */\n \n-  d->targetv = (const char **) xmalloc (2 * sizeof (const char *));\n-  d->depv = (const char **) xmalloc (8 * sizeof (const char *));\n+  d->targetv = 0;\n+  d->depv = 0;\n \n   d->ntargets = 0;\n-  d->targets_size = 2;\n+  d->targets_size = 0;\n   d->ndeps = 0;\n-  d->deps_size = 8;\n+  d->deps_size = 0;\n \n   return d;\n }\n@@ -160,14 +132,20 @@ deps_free (d)\n {\n   unsigned int i;\n \n-  for (i = 0; i < d->ntargets; i++)\n-    free ((PTR) d->targetv[i]);\n+  if (d->targetv)\n+    {\n+      for (i = 0; i < d->ntargets; i++)\n+\tfree ((PTR) d->targetv[i]);\n+      free (d->targetv);\n+    }\n \n-  for (i = 0; i < d->ndeps; i++)\n-    free ((PTR) d->depv[i]);\n+  if (d->depv)\n+    {\n+      for (i = 0; i < d->ndeps; i++)\n+\tfree ((PTR) d->depv[i]);\n+      free (d->depv);\n+    }\n \n-  free (d->targetv);\n-  free (d->depv);\n   free (d);\n }\n \n@@ -181,7 +159,7 @@ deps_add_target (d, t, quote)\n {\n   if (d->ntargets == d->targets_size)\n     {\n-      d->targets_size *= 2;\n+      d->targets_size = d->targets_size * 2 + 4;\n       d->targetv = (const char **) xrealloc (d->targetv,\n \t\t\t     d->targets_size * sizeof (const char *));\n     }\n@@ -212,7 +190,6 @@ deps_add_default_target (d, tgt)\n     deps_add_target (d, \"-\", 1);\n   else\n     {\n-      tgt = base_name (tgt);\n       o = (char *) alloca (strlen (tgt) + 8);\n \n       strcpy (o, tgt);\n@@ -239,7 +216,7 @@ deps_add_dep (d, t)\n \n   if (d->ndeps == d->deps_size)\n     {\n-      d->deps_size *= 2;\n+      d->deps_size *= 2 + 8;\n       d->depv = (const char **)\n \txrealloc (d->depv, d->deps_size * sizeof (const char *));\n     }"}]}