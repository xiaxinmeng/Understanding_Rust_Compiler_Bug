{"sha": "bc071d3a951a98284a3f46043afd44c03c123376", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMwNzFkM2E5NTFhOTgyODRhM2Y0NjA0M2FmZDQ0YzAzYzEyMzM3Ng==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2020-01-15T15:23:54Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2020-01-15T18:38:21Z"}, "message": "Fix ctz issues (PR93231)\n\nFurther improve the ctz recognition: Avoid ICEing on negative shift\ncounts or multiply constants.  Check the type is a char type for the\nstring constant case to avoid accidentally matching a wide STRING_CST.\nAdd a tree_expr_nonzero_p check to allow the optimization even if\nCTZ_DEFINED_VALUE_AT_ZERO returns 0 or 1.  Add extra test cases.\n\nBootstrap OK on AArch64 and x64.\n\n    gcc/\n\tPR tree-optimization/93231\n\t* tree-ssa-forwprop.c (optimize_count_trailing_zeroes): Check\n\tinput_type is unsigned.  Use tree_to_shwi for shift constant.\n\tCheck CST_STRING element size is CHAR_TYPE_SIZE bits.\n\t(simplify_count_trailing_zeroes): Add test to handle known non-zero\n\tinputs more efficiently.\n\n    testsuite/\n\tPR tree-optimization/93231\n\t* gcc.dg/pr90838.c: New test.\n\t* gcc.dg/pr93231.c: New test.\n\t* gcc.target/aarch64/pr90838.c: Use #define u 0.", "tree": {"sha": "4fdacca959bb6ac3ad5a46af26c642f9a675a959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fdacca959bb6ac3ad5a46af26c642f9a675a959"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc071d3a951a98284a3f46043afd44c03c123376", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc071d3a951a98284a3f46043afd44c03c123376", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc071d3a951a98284a3f46043afd44c03c123376", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc071d3a951a98284a3f46043afd44c03c123376/comments", "author": null, "committer": null, "parents": [{"sha": "2a0f6c61b4db19535c632be68bddad74b6adb6cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a0f6c61b4db19535c632be68bddad74b6adb6cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a0f6c61b4db19535c632be68bddad74b6adb6cf"}], "stats": {"total": 138, "additions": 128, "deletions": 10}, "files": [{"sha": "76ef4d2305eb19feb757e39d824c8605ddff2b73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc071d3a951a98284a3f46043afd44c03c123376/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc071d3a951a98284a3f46043afd44c03c123376/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc071d3a951a98284a3f46043afd44c03c123376", "patch": "@@ -1,3 +1,12 @@\n+2020-01-15  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR tree-optimization/93231\n+\t* tree-ssa-forwprop.c (optimize_count_trailing_zeroes): Check\n+\tinput_type is unsigned.  Use tree_to_shwi for shift constant.\n+\tCheck CST_STRING element size is CHAR_TYPE_SIZE bits.\n+\t(simplify_count_trailing_zeroes): Add test to handle known non-zero\n+\tinputs more efficiently.\n+\n 2020-01-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*movsf_internal): Do not require"}, {"sha": "769020d67ca622324f3c7ccdc5d5d52bc944d61d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc071d3a951a98284a3f46043afd44c03c123376/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc071d3a951a98284a3f46043afd44c03c123376/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc071d3a951a98284a3f46043afd44c03c123376", "patch": "@@ -1,3 +1,9 @@\n+2020-01-15  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc.dg/pr90838.c: New test.\n+\t* gcc.dg/pr93231.c: New test.\n+\t* gcc.target/aarch64/pr90838.c: Use #define u 0.\n+\n 2020-01-15  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/93273"}, {"sha": "41c5dab9a5c1526164ab99caf0d6a8097b84806f", "filename": "gcc/testsuite/gcc.dg/pr90838.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc071d3a951a98284a3f46043afd44c03c123376/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90838.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc071d3a951a98284a3f46043afd44c03c123376/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90838.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90838.c?ref=bc071d3a951a98284a3f46043afd44c03c123376", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop2-details\" } */\n+\n+int ctz1 (unsigned x)\n+{\n+  static const char table[32] = \"\\x00\\x01\\x1c\\x02\\x1d\\x0e\\x18\\x03\\x1e\\x16\\x14\"\n+    \"\\x0f\\x19\\x11\\x04\\b\\x1f\\x1b\\r\\x17\\x15\\x13\\x10\\x07\\x1a\\f\\x12\\x06\\v\\x05\\n\\t\";\n+\n+  return table[((unsigned)((x & -x) * 0x077CB531U)) >> 27];\n+}\n+\n+int ctz2 (unsigned x)\n+{\n+#define u 0\n+  static short table[64] =\n+    {\n+      32, 0, 1,12, 2, 6, u,13, 3, u, 7, u, u, u, u,14,\n+      10, 4, u, u, 8, u, u,25, u, u, u, u, u,21,27,15,\n+      31,11, 5, u, u, u, u, u, 9, u, u,24, u, u,20,26,\n+      30, u, u, u, u,23, u,19,29, u,22,18,28,17,16, u\n+    };\n+\n+  x = (x & -x) * 0x0450FBAF;\n+  return table[x >> 26];\n+}\n+\n+int ctz3 (unsigned x)\n+{\n+  static int table[32] =\n+    {\n+      0, 1, 2,24, 3,19, 6,25, 22, 4,20,10,16, 7,12,26,\n+      31,23,18, 5,21, 9,15,11,30,17, 8,14,29,13,28,27\n+    };\n+\n+  if (x == 0) return 32;\n+  x = (x & -x) * 0x04D7651F;\n+  return table[x >> 27];\n+}\n+\n+static const unsigned long long magic = 0x03f08c5392f756cdULL;\n+\n+static const char table[64] = {\n+     0,  1, 12,  2, 13, 22, 17,  3,\n+    14, 33, 23, 36, 18, 58, 28,  4,\n+    62, 15, 34, 26, 24, 48, 50, 37,\n+    19, 55, 59, 52, 29, 44, 39,  5,\n+    63, 11, 21, 16, 32, 35, 57, 27,\n+    61, 25, 47, 49, 54, 51, 43, 38,\n+    10, 20, 31, 56, 60, 46, 53, 42,\n+     9, 30, 45, 41,  8, 40,  7,  6,\n+};\n+\n+int ctz4 (unsigned long x)\n+{\n+  unsigned long lsb = x & -x;\n+  return table[(lsb * magic) >> 58];\n+}\n+\n+/* { dg-final { scan-tree-dump-times {= \\.CTZ} 4 \"forwprop2\" { target aarch64*-*-* } } } */"}, {"sha": "cd0b3f320f78ffdd3d82cf487a63e861d0bf8eab", "filename": "gcc/testsuite/gcc.dg/pr93231.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc071d3a951a98284a3f46043afd44c03c123376/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93231.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc071d3a951a98284a3f46043afd44c03c123376/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93231.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93231.c?ref=bc071d3a951a98284a3f46043afd44c03c123376", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop2-details -Wno-shift-count-negative\" } */\n+\n+int ctz_ice1 (int x)\n+{\n+  static const char table[32] =\n+    {\n+      0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,\n+      31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9\n+    };\n+\n+  return table[((int)((x & -x) * -0x077CB531)) >> 27];\n+}\n+\n+int ctz_ice2 (unsigned x)\n+{\n+  static const char table[32] =\n+    {\n+      0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,\n+      31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9\n+    };\n+\n+  return table[((unsigned)((x & -x) * 0x077CB531U)) >> -27];\n+}\n+\n+// This should never match\n+int ctz_fail (unsigned x)\n+{\n+  static const unsigned short int table[32] =\n+    u\"\\x0100\\x021c\\x0e1d\\x0318\\x161e\\x0f14\\x1119\\x0804\\x1b1f\\x170d\\x1315\\x0710\\x0c1a\\x0612\\x050b\\x090a\";\n+\n+  return table[((x & -x) * 0x077CB531) >> 27];\n+}\n+\n+/* { dg-final { scan-tree-dump-not {= \\.CTZ} \"forwprop2\" } } */"}, {"sha": "e1e19ac6a618dc35e8c1bc2d7ae25f5ed24b9845", "filename": "gcc/testsuite/gcc.target/aarch64/pr90838.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc071d3a951a98284a3f46043afd44c03c123376/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr90838.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc071d3a951a98284a3f46043afd44c03c123376/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr90838.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr90838.c?ref=bc071d3a951a98284a3f46043afd44c03c123376", "patch": "@@ -14,7 +14,7 @@ int ctz1 (unsigned x)\n \n int ctz2 (unsigned x)\n {\n-  const int u = 0;\n+#define u 0\n   static short table[64] =\n     {\n       32, 0, 1,12, 2, 6, u,13, 3, u, 7, u, u, u, u,14,"}, {"sha": "d63e87c8a5b79783a7bad0a0e9fee58cb8bcaa5d", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc071d3a951a98284a3f46043afd44c03c123376/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc071d3a951a98284a3f46043afd44c03c123376/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=bc071d3a951a98284a3f46043afd44c03c123376", "patch": "@@ -1864,9 +1864,9 @@ optimize_count_trailing_zeroes (tree array_ref, tree x, tree mulc,\n   tree input_type = TREE_TYPE (x);\n   unsigned input_bits = tree_to_shwi (TYPE_SIZE (input_type));\n \n-  /* Check the array is not wider than integer type and the input is a 32-bit\n-     or 64-bit type.  */\n-  if (TYPE_PRECISION (type) > 32)\n+  /* Check the array element type is not wider than 32 bits and the input is\n+     an unsigned 32-bit or 64-bit type.  */\n+  if (TYPE_PRECISION (type) > 32 || !TYPE_UNSIGNED (input_type))\n     return false;\n   if (input_bits != 32 && input_bits != 64)\n     return false;\n@@ -1879,7 +1879,7 @@ optimize_count_trailing_zeroes (tree array_ref, tree x, tree mulc,\n   if (!low || !integer_zerop (low))\n     return false;\n \n-  unsigned shiftval = tree_to_uhwi (tshift);\n+  unsigned shiftval = tree_to_shwi (tshift);\n \n   /* Check the shift extracts the top 5..7 bits.  */\n   if (shiftval < input_bits - 7 || shiftval > input_bits - 5)\n@@ -1894,7 +1894,8 @@ optimize_count_trailing_zeroes (tree array_ref, tree x, tree mulc,\n   if (TREE_CODE (ctor) == CONSTRUCTOR)\n     return check_ctz_array (ctor, val, zero_val, shiftval, input_bits);\n \n-  if (TREE_CODE (ctor) == STRING_CST)\n+  if (TREE_CODE (ctor) == STRING_CST\n+      && TYPE_PRECISION (type) == CHAR_TYPE_SIZE)\n     return check_ctz_string (ctor, val, zero_val, shiftval, input_bits);\n \n   return false;\n@@ -1920,16 +1921,24 @@ simplify_count_trailing_zeroes (gimple_stmt_iterator *gsi)\n \t\t\t\t      res_ops[1], res_ops[2], zero_val))\n     {\n       tree type = TREE_TYPE (res_ops[0]);\n-      HOST_WIDE_INT ctzval = 0;\n+      HOST_WIDE_INT ctz_val = 0;\n       HOST_WIDE_INT type_size = tree_to_shwi (TYPE_SIZE (type));\n       bool zero_ok\n-\t= CTZ_DEFINED_VALUE_AT_ZERO (SCALAR_INT_TYPE_MODE (type), ctzval) == 2;\n+\t= CTZ_DEFINED_VALUE_AT_ZERO (SCALAR_INT_TYPE_MODE (type), ctz_val) == 2;\n+\n+      /* If the input value can't be zero, don't special case ctz (0).  */\n+      if (tree_expr_nonzero_p (res_ops[0]))\n+\t{\n+\t  zero_ok = true;\n+\t  zero_val = 0;\n+\t  ctz_val = 0;\n+\t}\n \n       /* Skip if there is no value defined at zero, or if we can't easily\n \t return the correct value for zero.  */\n       if (!zero_ok)\n \treturn false;\n-      if (zero_val != ctzval && !(zero_val == 0 && ctzval == type_size))\n+      if (zero_val != ctz_val && !(zero_val == 0 && ctz_val == type_size))\n \treturn false;\n \n       gimple_seq seq = NULL;\n@@ -1942,7 +1951,7 @@ simplify_count_trailing_zeroes (gimple_stmt_iterator *gsi)\n       tree prev_lhs = gimple_call_lhs (call);\n \n       /* Emit ctz (x) & 31 if ctz (0) is 32 but we need to return 0.  */\n-      if (zero_val == 0 && ctzval == type_size)\n+      if (zero_val == 0 && ctz_val == type_size)\n \t{\n \t  g = gimple_build_assign (make_ssa_name (integer_type_node),\n \t\t\t\t   BIT_AND_EXPR, prev_lhs,"}]}