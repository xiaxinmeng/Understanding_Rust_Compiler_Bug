{"sha": "d53301c91fe9cfffaa06880ea1e32a9fc9246709", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUzMzAxYzkxZmU5Y2ZmZmFhMDY4ODBlYTFlMzJhOWZjOTI0NjcwOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-09-19T08:14:28Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-19T08:14:28Z"}, "message": "[Ada] Fix bogus \"too late\" error with nested generics and inlining\n\nThis prevents the compiler from issuing a bogus error about a constant\nwhose full declaration appears too late, if it is declared in a nested\ngeneric package and instantiated in another nested instantiation, when\nthe instantiations are done in a unit withed from the main unit and\ncontaining an inlined subprogram, and cross-unit inlining is enabled.\n\nIt turns out that, under these very peculiar conditions, the compiler\nends up instantiating the body of the generic package twice, which leads\nto various semantic errors, in particular for declarations of constants.\n\n2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch12.adb (Instantiate_Package_Body): Check that the body\n\thas not already been instantiated when the body of the parent\n\twas being loaded.\n\ngcc/testsuite/\n\n\t* gnat.dg/inline21.adb, gnat.dg/inline21_g.ads,\n\tgnat.dg/inline21_h.adb, gnat.dg/inline21_h.ads,\n\tgnat.dg/inline21_q.ads: New testcase.\n\nFrom-SVN: r275953", "tree": {"sha": "c89237b2bf638a5f295172469f9425fb024ffe04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c89237b2bf638a5f295172469f9425fb024ffe04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d53301c91fe9cfffaa06880ea1e32a9fc9246709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d53301c91fe9cfffaa06880ea1e32a9fc9246709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d53301c91fe9cfffaa06880ea1e32a9fc9246709", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d53301c91fe9cfffaa06880ea1e32a9fc9246709/comments", "author": null, "committer": null, "parents": [{"sha": "9e0746fcd5bb14d164d3686b0940ae7129d05231", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e0746fcd5bb14d164d3686b0940ae7129d05231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e0746fcd5bb14d164d3686b0940ae7129d05231"}], "stats": {"total": 124, "additions": 124, "deletions": 0}, "files": [{"sha": "c10f7fffa79a970ecb40ecabe3c02dd9d8cb1576", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d53301c91fe9cfffaa06880ea1e32a9fc9246709/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d53301c91fe9cfffaa06880ea1e32a9fc9246709/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d53301c91fe9cfffaa06880ea1e32a9fc9246709", "patch": "@@ -1,3 +1,9 @@\n+2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Package_Body): Check that the body\n+\thas not already been instantiated when the body of the parent\n+\twas being loaded.\n+\n 2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_util.adb (In_Instance): Test whether the current unit has"}, {"sha": "280c9258e187196ee1dc1593d668f7828e475d00", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d53301c91fe9cfffaa06880ea1e32a9fc9246709/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d53301c91fe9cfffaa06880ea1e32a9fc9246709/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=d53301c91fe9cfffaa06880ea1e32a9fc9246709", "patch": "@@ -11442,6 +11442,68 @@ package body Sem_Ch12 is\n          else\n             Load_Parent_Of_Generic\n               (Inst_Node, Specification (Gen_Decl), Body_Optional);\n+\n+            --  Surprisingly enough, loading the body of the parent can cause\n+            --  the body to be instantiated and the double instantiation needs\n+            --  to be prevented in order to avoid giving bogus semantic errors.\n+\n+            --  This case can occur because of the Collect_Previous_Instances\n+            --  machinery of Load_Parent_Of_Generic, which will instantiate\n+            --  bodies that are deemed to be ahead of the body of the parent\n+            --  in the compilation unit. But the relative position of these\n+            --  bodies is computed using the mere comparison of their Sloc.\n+\n+            --  Now suppose that you have two generic packages G and H, with\n+            --  G containing a mere instantiation of H:\n+\n+            --    generic\n+            --    package H is\n+\n+            --      generic\n+            --      package Nested_G is\n+            --         ...\n+            --      end Nested_G;\n+\n+            --    end H;\n+\n+            --    with H;\n+\n+            --    generic\n+            --    package G is\n+\n+            --      package My_H is new H;\n+\n+            --    end G;\n+\n+            --  and a third package Q instantiating G and Nested_G:\n+\n+            --    with G;\n+\n+            --    package Q is\n+\n+            --      package My_G is new G;\n+\n+            --      package My_Nested_G is new My_G.My_H.Nested_G;\n+\n+            --    end Q;\n+\n+            --  The body to be instantiated is that of My_Nested_G and its\n+            --  parent is the instance My_G.My_H. This latter instantiation\n+            --  is done when My_G is analyzed, i.e. after the declarations\n+            --  of My_G and My_Nested_G have been parsed; as a result, the\n+            --  Sloc of My_G.My_H is greater than the Sloc of My_Nested_G.\n+\n+            --  Therefore loading the body of My_G.My_H will cause the body\n+            --  of My_Nested_G to be instantiated because it is deemed to be\n+            --  ahead of My_G.My_H. This means that Load_Parent_Of_Generic\n+            --  will again be invoked on My_G.My_H, but this time with the\n+            --  Collect_Previous_Instances machinery disabled, so there is\n+            --  no endless mutual recursion and things are done in order.\n+\n+            if Present (Corresponding_Body (Instance_Spec (Inst_Node))) then\n+               goto Leave;\n+            end if;\n+\n             Gen_Body_Id := Corresponding_Body (Gen_Decl);\n          end if;\n       end if;"}, {"sha": "c8eea78877ba62e15fffaa884040410c69196507", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d53301c91fe9cfffaa06880ea1e32a9fc9246709/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d53301c91fe9cfffaa06880ea1e32a9fc9246709/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d53301c91fe9cfffaa06880ea1e32a9fc9246709", "patch": "@@ -1,3 +1,9 @@\n+2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/inline21.adb, gnat.dg/inline21_g.ads,\n+\tgnat.dg/inline21_h.adb, gnat.dg/inline21_h.ads,\n+\tgnat.dg/inline21_q.ads: New testcase.\n+\n 2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/inline20.adb, gnat.dg/inline20_g.adb,"}, {"sha": "5df569158eb3d13036fbaaf85c5fe4aaccef6f6e", "filename": "gcc/testsuite/gnat.dg/inline21.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d53301c91fe9cfffaa06880ea1e32a9fc9246709/gcc%2Ftestsuite%2Fgnat.dg%2Finline21.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d53301c91fe9cfffaa06880ea1e32a9fc9246709/gcc%2Ftestsuite%2Fgnat.dg%2Finline21.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline21.adb?ref=d53301c91fe9cfffaa06880ea1e32a9fc9246709", "patch": "@@ -0,0 +1,9 @@\n+--  { dg-compile }\n+--  { dg-options \"-O -gnatn\" }\n+\n+with Inline21_Q;\n+\n+procedure Inline21 is\n+begin\n+  Inline21_Q.My_Nested_G.Proc;\n+end;"}, {"sha": "b4faf0130734a7f1997fd72656453fdec2285e88", "filename": "gcc/testsuite/gnat.dg/inline21_g.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d53301c91fe9cfffaa06880ea1e32a9fc9246709/gcc%2Ftestsuite%2Fgnat.dg%2Finline21_g.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d53301c91fe9cfffaa06880ea1e32a9fc9246709/gcc%2Ftestsuite%2Fgnat.dg%2Finline21_g.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline21_g.ads?ref=d53301c91fe9cfffaa06880ea1e32a9fc9246709", "patch": "@@ -0,0 +1,8 @@\n+with Inline21_H;\n+\n+generic\n+package Inline21_G is\n+\n+   package My_H is new Inline21_H;\n+\n+end Inline21_G;"}, {"sha": "c6cf063c2b3b525acd59446c006620ef633f788d", "filename": "gcc/testsuite/gnat.dg/inline21_h.adb", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d53301c91fe9cfffaa06880ea1e32a9fc9246709/gcc%2Ftestsuite%2Fgnat.dg%2Finline21_h.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d53301c91fe9cfffaa06880ea1e32a9fc9246709/gcc%2Ftestsuite%2Fgnat.dg%2Finline21_h.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline21_h.adb?ref=d53301c91fe9cfffaa06880ea1e32a9fc9246709", "patch": "@@ -0,0 +1,14 @@\n+package body Inline21_H is\n+\n+   package body Nested_G is\n+\n+      C : constant Integer := 0;\n+\n+      procedure Proc is\n+      begin\n+         null;\n+      end;\n+\n+   end Nested_G;\n+\n+end Inline21_H;\n\\ No newline at end of file"}, {"sha": "494c54425f4e6f39af88d76b9debb2ecd6caff80", "filename": "gcc/testsuite/gnat.dg/inline21_h.ads", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d53301c91fe9cfffaa06880ea1e32a9fc9246709/gcc%2Ftestsuite%2Fgnat.dg%2Finline21_h.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d53301c91fe9cfffaa06880ea1e32a9fc9246709/gcc%2Ftestsuite%2Fgnat.dg%2Finline21_h.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline21_h.ads?ref=d53301c91fe9cfffaa06880ea1e32a9fc9246709", "patch": "@@ -0,0 +1,10 @@\n+generic\n+package Inline21_H is\n+\n+   generic\n+   package Nested_G is\n+      procedure Proc;\n+      pragma Inline (Proc);\n+   end Nested_G;\n+\n+end Inline21_H;"}, {"sha": "d3c20013a92007f096819ce8de43d3a6662403a1", "filename": "gcc/testsuite/gnat.dg/inline21_q.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d53301c91fe9cfffaa06880ea1e32a9fc9246709/gcc%2Ftestsuite%2Fgnat.dg%2Finline21_q.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d53301c91fe9cfffaa06880ea1e32a9fc9246709/gcc%2Ftestsuite%2Fgnat.dg%2Finline21_q.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline21_q.ads?ref=d53301c91fe9cfffaa06880ea1e32a9fc9246709", "patch": "@@ -0,0 +1,9 @@\n+with Inline21_G;\n+\n+package Inline21_Q is\n+\n+   package My_G is new Inline21_G;\n+\n+   package My_Nested_G is new My_G.My_H.Nested_G;\n+\n+end Inline21_Q;"}]}