{"sha": "f6cfbd02b9a9c7e02be56eae394bec6bffe837d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZjZmJkMDJiOWE5YzdlMDJiZTU2ZWFlMzk0YmVjNmJmZmU4MzdkNA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-12-09T06:21:35Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-12-09T06:21:35Z"}, "message": "Initial revision\n\nFrom-SVN: r107", "tree": {"sha": "0cc3ce5dae114aa0bec840ed6246ad9844800837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cc3ce5dae114aa0bec840ed6246ad9844800837"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6cfbd02b9a9c7e02be56eae394bec6bffe837d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6cfbd02b9a9c7e02be56eae394bec6bffe837d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6cfbd02b9a9c7e02be56eae394bec6bffe837d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6cfbd02b9a9c7e02be56eae394bec6bffe837d4/comments", "author": null, "committer": null, "parents": [{"sha": "524c190f1fa953223b4c2f140546d1b6af10fca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/524c190f1fa953223b4c2f140546d1b6af10fca3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/524c190f1fa953223b4c2f140546d1b6af10fca3"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "6f517e54a26c4831c06fe9922a7d545795cf25b2", "filename": "gcc/config/i386/unix.h", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6cfbd02b9a9c7e02be56eae394bec6bffe837d4/gcc%2Fconfig%2Fi386%2Funix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6cfbd02b9a9c7e02be56eae394bec6bffe837d4/gcc%2Fconfig%2Fi386%2Funix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Funix.h?ref=f6cfbd02b9a9c7e02be56eae394bec6bffe837d4", "patch": "@@ -0,0 +1,121 @@\n+/* Definitions for Unix assembler syntax for the Intel 80386.\n+   Copyright (C) 1988 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* This file defines the aspects of assembler syntax\n+   that are the same for all the i386 Unix systems\n+   (though they may differ in non-Unix systems).  */\n+\n+/* Define some concatenation macros to concatenate an opcode\n+   and one, two or three operands.  In other assembler syntaxes\n+   they may alter the order of ther operands.  */\n+\n+/* Note that the other files fail to use these\n+   in some of the places where they should.  */\n+\n+#ifdef __STDC__\n+#define AS2(a,b,c) #a \" \" #b \",\" #c\n+#define AS3(a,b,c,d) #a \" \" #b \",\" #c \",\" #d\n+#define AS1(a,b) #a \" \" #b\n+#else\n+#define AS1(a,b) \"a b\"\n+#define AS2(a,b,c) \"a b,c\"\n+#define AS3(a,b,c,d) \"a b,c,d\"\n+#endif  \n+\n+/* Output the size-letter for an opcode.\n+   CODE is the letter used in an operand spec (L, B, W, S or Q).\n+   CH is the corresponding lower case letter\n+     (except if CODE is L then CH is `l').  */\n+#define PUT_OP_SIZE(CODE,CH,FILE) putc (CH,(FILE))\n+\n+/* Opcode suffix for fullword insn.  */\n+#define L_SIZE \"l\"\n+\n+/* Prefix for register names in this syntax.  */\n+#define RP \"%\"\n+\n+/* Prefix for immediate operands in this syntax.  */\n+#define IP \"$\"\n+\n+/* Indirect call instructions should use `*'.  */\n+#define USE_STAR 1\n+\n+/* Prefix for a memory-operand X.  */\n+#define PRINT_PTR(X, FILE)\n+\n+/* Delimiters that surround base reg and index reg.  */\n+#define ADDR_BEG(FILE) putc('(', (FILE))\n+#define ADDR_END(FILE) putc(')', (FILE))\n+\n+/* Print an index register (whose rtx is IREG).  */\n+#define PRINT_IREG(FILE,IREG) \\\n+  do\t\t\t\t\t\t\t\t\\\n+  { fputs (\",\", (FILE)); PRINT_REG ((IREG), 0, (FILE)); }\t\\\n+  while (0)\n+  \n+/* Print an index scale factor SCALE.  */\n+#define PRINT_SCALE(FILE,SCALE) \\\n+  if ((SCALE) != 1) fprintf ((FILE), \",%d\", (SCALE))\n+\n+/* Print a base/index combination.\n+   BREG is the base reg rtx, IREG is the index reg rtx,\n+   and SCALE is the index scale factor (an integer).  */\n+\n+#define PRINT_B_I_S(BREG,IREG,SCALE,FILE) \\\n+  { ADDR_BEG (FILE); \t\t\t\t\\\n+    if (BREG) PRINT_REG ((BREG), 0, (FILE));\t\\\n+    if ((IREG) != 0)\t\t\t\t\\\n+      { PRINT_IREG ((FILE), (IREG));\t\t\\\n+        PRINT_SCALE ((FILE), (SCALE)); }\t\\\n+    ADDR_END (FILE); }\n+\f\n+/* Define the syntax of pseudo-ops, labels and comments.  */\n+\n+/* String containing the assembler's comment-starter.  */\n+\n+#define ASM_COMMENT_START \"/\"\n+#define COMMENT_BEGIN \"/\"\n+\n+/* Output to assembler file text saying following lines\n+   may contain character constants, extra white space, comments, etc.  */\n+\n+#define ASM_APP_ON \"/APP\\n\"\n+\n+/* Output to assembler file text saying following lines\n+   no longer contain unusual constructs.  */\n+\n+#define ASM_APP_OFF \"/NO_APP\\n\"\n+\n+/* Output before read-only data.  */\n+\n+#define TEXT_SECTION_ASM_OP \".text\"\n+\n+/* Output before writable (initialized) data.  */\n+\n+#define DATA_SECTION_ASM_OP \".data\"\n+\n+/* Output before writable (uninitialized) data.  */\n+\n+#define BSS_SECTION_ASM_OP \".bss\"\n+\n+/* This is how to output a command to make the user-level label named NAME\n+   defined for reference from other files.  */\n+\n+#define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n+  (fputs (\".globl \", FILE), assemble_name (FILE, NAME), fputs (\"\\n\", FILE))"}]}