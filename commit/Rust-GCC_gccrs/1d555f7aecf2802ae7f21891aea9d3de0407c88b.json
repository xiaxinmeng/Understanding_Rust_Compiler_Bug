{"sha": "1d555f7aecf2802ae7f21891aea9d3de0407c88b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ1NTVmN2FlY2YyODAyYWU3ZjIxODkxYWVhOWQzZGUwNDA3Yzg4Yg==", "commit": {"author": {"name": "Matt Austern", "email": "austern@apple.com", "date": "2003-03-05T22:08:39Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2003-03-05T22:08:39Z"}, "message": "decl.c (cp_binding_level): Add static_decls varray member.\n\n\t* decl.c (cp_binding_level): Add static_decls varray member.\n\t(add_decl_to_level): Add static/inline namespace scope\n\tdeclarations to static_decls array.\n\t(wrapup_global_for_namespace): Pass static_decls only, instead of\n\tall decls, to wrapup_global_declarations/check_global_declarations.\n\t(push_namespace): Initialize static_decls for ordinary namespaces.\n\t(cxx_init_decl_processing): Initialize static_decls for global\n\tnamespace.\n\nFrom-SVN: r63866", "tree": {"sha": "b7d625569420453dc5ec062beba56a278188f78c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7d625569420453dc5ec062beba56a278188f78c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d555f7aecf2802ae7f21891aea9d3de0407c88b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d555f7aecf2802ae7f21891aea9d3de0407c88b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d555f7aecf2802ae7f21891aea9d3de0407c88b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d555f7aecf2802ae7f21891aea9d3de0407c88b/comments", "author": null, "committer": null, "parents": [{"sha": "35b0708052ed3381ee58d4e6251e3e43da411a4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b0708052ed3381ee58d4e6251e3e43da411a4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35b0708052ed3381ee58d4e6251e3e43da411a4e"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "d874ac06ec9b792c936b74279ff3f7d9f454bb03", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d555f7aecf2802ae7f21891aea9d3de0407c88b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d555f7aecf2802ae7f21891aea9d3de0407c88b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1d555f7aecf2802ae7f21891aea9d3de0407c88b", "patch": "@@ -1,3 +1,14 @@\n+2003-03-02  Matt Austern  <austern@apple.com>\n+\n+\t* decl.c (cp_binding_level): Add static_decls varray member.\n+\t(add_decl_to_level): Add static/inline namespace scope\n+\tdeclarations to static_decls array.\n+\t(wrapup_global_for_namespace): Pass static_decls only, instead of\n+\tall decls, to wrapup_global_declarations/check_global_declarations.\n+\t(push_namespace): Initialize static_decls for ordinary namespaces.\n+\t(cxx_init_decl_processing): Initialize static_decls for global\n+\tnamespace.\n+\t\n 2003-03-05  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (end_of_class): Correct thinko."}, {"sha": "a320ef0615c9ca42d1f9f98c2d10f0c64c8f172f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d555f7aecf2802ae7f21891aea9d3de0407c88b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d555f7aecf2802ae7f21891aea9d3de0407c88b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1d555f7aecf2802ae7f21891aea9d3de0407c88b", "patch": "@@ -327,6 +327,9 @@ struct cp_binding_level GTY(())\n     /* A chain of NAMESPACE_DECL nodes.  */\n     tree namespaces;\n \n+    /* An array of static functions and variables (for namespaces only) */\n+    varray_type static_decls;\n+\n     /* A chain of VTABLE_DECL nodes.  */\n     tree vtables; \n \n@@ -1019,6 +1022,13 @@ add_decl_to_level (tree decl,\n       TREE_CHAIN (decl) = b->names;\n       b->names = decl;\n       b->names_size++;\n+\n+      /* If appropriate, add decl to separate list of statics */\n+      if (b->namespace_p)\n+\tif ((TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl))\n+\t    || (TREE_CODE (decl) == FUNCTION_DECL\n+\t\t&& (!TREE_PUBLIC (decl) || DECL_DECLARED_INLINE_P (decl))))\n+\t  VARRAY_PUSH_TREE (b->static_decls, decl);\n     }\n }\n \n@@ -1849,29 +1859,20 @@ walk_globals (walk_globals_pred p, walk_globals_fn f, void *data)\n int\n wrapup_globals_for_namespace (tree namespace, void* data)\n {\n-  tree globals = cp_namespace_decls (namespace);\n-  int len = NAMESPACE_LEVEL (namespace)->names_size;\n-  tree *vec = (tree *) alloca (sizeof (tree) * len);\n-  int i;\n-  int result;\n-  tree decl;\n+  struct cp_binding_level *level = NAMESPACE_LEVEL (namespace);\n+  varray_type statics = level->static_decls;\n+  tree *vec = &VARRAY_TREE (statics, 0);\n+  int len = VARRAY_ACTIVE_SIZE (statics);\n   int last_time = (data != 0);\n \n-  /* Process the decls in reverse order--earliest first.\n-     Put them into VEC from back to front, then take out from front.  */       \n-  for (i = 0, decl = globals; i < len; i++, decl = TREE_CHAIN (decl))\n-    vec[len - i - 1] = decl;\n-\n   if (last_time)\n     {\n       check_global_declarations (vec, len);\n       return 0;\n     }\n \n   /* Write out any globals that need to be output.  */\n-  result = wrapup_global_declarations (vec, len);\n-\n-  return result;\n+  return wrapup_global_declarations (vec, len);\n }\n \n \f\n@@ -2195,6 +2196,9 @@ push_namespace (tree name)\n \t  pushlevel (0);\n \t  declare_namespace_level ();\n \t  NAMESPACE_LEVEL (d) = current_binding_level;\n+\t  VARRAY_TREE_INIT (current_binding_level->static_decls,\n+\t\t\t    name != std_identifier ? 10 : 200,\n+\t\t\t    \"Static declarations\");\n \t}\n     }\n   else\n@@ -6323,6 +6327,10 @@ cxx_init_decl_processing (void)\n   NAMESPACE_LEVEL (global_namespace) = global_binding_level;\n   declare_namespace_level ();\n \n+  VARRAY_TREE_INIT (global_binding_level->static_decls,\n+\t\t    200,\n+\t\t    \"Static declarations\");\n+\n   /* Create the `std' namespace.  */\n   push_namespace (std_identifier);\n   std_node = current_namespace;"}]}