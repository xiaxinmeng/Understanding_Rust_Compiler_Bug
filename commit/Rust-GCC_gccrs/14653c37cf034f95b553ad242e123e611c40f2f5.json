{"sha": "14653c37cf034f95b553ad242e123e611c40f2f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ2NTNjMzdjZjAzNGY5NWI1NTNhZDI0MmUxMjNlNjExYzQwZjJmNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-02-18T10:08:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-02-18T10:08:04Z"}, "message": "* config/s390/s390.md (*<risbg_n>_ior_and_sr_ze,\n\n\t*<risbg_n>_<mode>_ior_and_lshiftrt, *<risbg_n>_sidi_ior_and_lshiftrt):\n\tUse HOST_WIDE_INT_M1U instead of ~(0ULL).\n\t(*<risbg_n>_and_subregdi_rotr, *<risbg_n>_and_subregdi_rotl): Use\n\tHOST_WIDE_INT_1U instead of 1ULL.\n\t(*pre_z10_extzv<mode>, *pre_z10_extv<mode>): Change mask type from int\n\tto unsigned HOST_WIDE_INT, use HOST_WIDE_INT_1U instead of 1ul.\n\t(*insv<mode><clobbercc_or_nocc>_appendbitsleft,\n\tz = (x << c) | (y >> d) splitters): Use HOST_WIDE_INT_1U\n\tinstead of 1UL.\n\t(*insv<mode>_mem_reg, *insvdi_mem_reghigh): Use HOST_WIDE_INT_1U\n\tinstead of 1ul.\n\nFrom-SVN: r268982", "tree": {"sha": "73a4d233363854dfe6f30c75ef96ffbc3019c54e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73a4d233363854dfe6f30c75ef96ffbc3019c54e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14653c37cf034f95b553ad242e123e611c40f2f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14653c37cf034f95b553ad242e123e611c40f2f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14653c37cf034f95b553ad242e123e611c40f2f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14653c37cf034f95b553ad242e123e611c40f2f5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a5f87af7edff53d77f51ba253da42dbfc74ada58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f87af7edff53d77f51ba253da42dbfc74ada58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5f87af7edff53d77f51ba253da42dbfc74ada58"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "7dfa7c3201fbcc180a472d5376098b4314c7fe19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14653c37cf034f95b553ad242e123e611c40f2f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14653c37cf034f95b553ad242e123e611c40f2f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14653c37cf034f95b553ad242e123e611c40f2f5", "patch": "@@ -1,3 +1,18 @@\n+2019-02-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/s390/s390.md (*<risbg_n>_ior_and_sr_ze,\n+\t*<risbg_n>_<mode>_ior_and_lshiftrt, *<risbg_n>_sidi_ior_and_lshiftrt):\n+\tUse HOST_WIDE_INT_M1U instead of ~(0ULL).\n+\t(*<risbg_n>_and_subregdi_rotr, *<risbg_n>_and_subregdi_rotl): Use\n+\tHOST_WIDE_INT_1U instead of 1ULL.\n+\t(*pre_z10_extzv<mode>, *pre_z10_extv<mode>): Change mask type from int\n+\tto unsigned HOST_WIDE_INT, use HOST_WIDE_INT_1U instead of 1ul.\n+\t(*insv<mode><clobbercc_or_nocc>_appendbitsleft,\n+\tz = (x << c) | (y >> d) splitters): Use HOST_WIDE_INT_1U\n+\tinstead of 1UL.\n+\t(*insv<mode>_mem_reg, *insvdi_mem_reghigh): Use HOST_WIDE_INT_1U\n+\tinstead of 1ul.\n+\n 2019-02-18  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/89209"}, {"sha": "377420c5af9c65dd640408178a22afc9fde85566", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14653c37cf034f95b553ad242e123e611c40f2f5/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14653c37cf034f95b553ad242e123e611c40f2f5/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=14653c37cf034f95b553ad242e123e611c40f2f5", "patch": "@@ -3917,7 +3917,7 @@\n \t\t 4)))]\n   \"<z10_or_zEC12_cond>\n    && EXTRACT_ARGS_IN_RANGE (INTVAL (operands[4]), INTVAL (operands[5]), 64)\n-   && UINTVAL (operands[2]) == (~(0ULL) << UINTVAL (operands[4]))\"\n+   && UINTVAL (operands[2]) == (HOST_WIDE_INT_M1U << UINTVAL (operands[4]))\"\n   \"<risbg_n>\\t%0,%3,64-%4,63,%4+%5\"\n   [(set_attr \"op_type\" \"RIE\")\n    (set_attr \"z10prop\" \"z10_super_E1\")])\n@@ -3943,7 +3943,8 @@\n \t\t\t     (match_operand:SINT 2 \"const_int_operand\" \"\")) 0)\n \t\t(match_operand:DI 3 \"contiguous_bitmask_operand\" \"\")))]\n   \"<z10_or_zEC12_cond>\n-   && UINTVAL (operands[3]) < (1ULL << (UINTVAL (operands[2]) & 0x3f))\"\n+   && (UINTVAL (operands[3])\n+       < (HOST_WIDE_INT_1U << (UINTVAL (operands[2]) & 0x3f)))\"\n   \"<risbg_n>\\t%0,%1,%s3,128+%e3,<bitoff_plus>%2\" ; dst, src, start, end, shift\n   [(set_attr \"op_type\" \"RIE\")\n    (set_attr \"z10prop\" \"z10_super_E1\")])\n@@ -3955,7 +3956,8 @@\n \t\t\t     (match_operand:SINT 2 \"const_int_operand\" \"\")) 0)\n \t\t(match_operand:DI 3 \"contiguous_bitmask_operand\" \"\")))]\n   \"<z10_or_zEC12_cond>\n-   && !(UINTVAL (operands[3]) & ((1ULL << (UINTVAL (operands[2]) & 0x3f)) - 1))\"\n+   && !(UINTVAL (operands[3])\n+\t& ((HOST_WIDE_INT_1U << (UINTVAL (operands[2]) & 0x3f)) - 1))\"\n   \"<risbg_n>\\t%0,%1,%s3,128+%e3,%2\" ; dst, src, start, end, shift\n   [(set_attr \"op_type\" \"RIE\")\n    (set_attr \"z10prop\" \"z10_super_E1\")])\n@@ -3986,7 +3988,8 @@\n {\n   int bitsize = INTVAL (operands[2]);\n   int size = (bitsize - 1) / BITS_PER_UNIT + 1; /* round up */\n-  int mask = ((1ul << size) - 1) << (GET_MODE_SIZE (SImode) - size);\n+  unsigned HOST_WIDE_INT mask\n+    = ((HOST_WIDE_INT_1U << size) - 1) << (GET_MODE_SIZE (SImode) - size);\n \n   operands[1] = adjust_address (operands[1], BLKmode, 0);\n   set_mem_size (operands[1], size);\n@@ -4012,7 +4015,8 @@\n {\n   int bitsize = INTVAL (operands[2]);\n   int size = (bitsize - 1) / BITS_PER_UNIT + 1; /* round up */\n-  int mask = ((1ul << size) - 1) << (GET_MODE_SIZE (SImode) - size);\n+  unsigned HOST_WIDE_INT mask\n+    = ((HOST_WIDE_INT_1U << size) - 1) << (GET_MODE_SIZE (SImode) - size);\n \n   operands[1] = adjust_address (operands[1], BLKmode, 0);\n   set_mem_size (operands[1], size);\n@@ -4116,7 +4120,7 @@\n \t\t (ashift:GPR (match_operand:GPR 3 \"nonimmediate_operand\" \"d\")\n \t\t\t     (match_operand:GPR 4 \"nonzero_shift_count_operand\" \"\"))))]\n   \"<z10_or_zEC12_cond>\n-   && UINTVAL (operands[2]) == (1UL << UINTVAL (operands[4])) - 1\"\n+   && UINTVAL (operands[2]) == (HOST_WIDE_INT_1U << UINTVAL (operands[4])) - 1\"\n   \"<risbg_n>\\t%0,%3,<bitoff>,64-%4-1,%4\"\n   [(set_attr \"op_type\" \"RIE\")\n    (set_attr \"z10prop\" \"z10_super_E1\")])\n@@ -4131,7 +4135,8 @@\n \t\t  (match_operand:GPR 3 \"register_operand\" \"d\")\n \t\t  (match_operand:GPR 4 \"nonzero_shift_count_operand\" \"\"))))]\n   \"<z10_or_zEC12_cond> && UINTVAL (operands[2])\n-   == (~(0ULL) << (GET_MODE_BITSIZE (<MODE>mode) - UINTVAL (operands[4])))\"\n+   == (HOST_WIDE_INT_M1U\n+       << (GET_MODE_BITSIZE (<MODE>mode) - UINTVAL (operands[4])))\"\n   \"<risbg_n>\\t%0,%3,<bitoff_plus>%4,63,64-%4\"\n   [(set_attr \"op_type\" \"RIE\")\n    (set_attr \"z10prop\" \"z10_super_E1\")])\n@@ -4147,7 +4152,7 @@\n \t\t  (match_operand:DI 3 \"register_operand\" \"d\")\n \t\t  (match_operand:DI 4 \"nonzero_shift_count_operand\" \"\")) 4)))]\n   \"<z10_or_zEC12_cond>\n-   && UINTVAL (operands[2]) == ~(~(0ULL) >> UINTVAL (operands[4]))\"\n+   && UINTVAL (operands[2]) == ~(HOST_WIDE_INT_M1U >> UINTVAL (operands[4]))\"\n   \"<risbg_n>\\t%0,%3,%4,63,64-%4\"\n   [(set_attr \"op_type\" \"RIE\")\n    (set_attr \"z10prop\" \"z10_super_E1\")])\n@@ -4182,7 +4187,7 @@\n \t(ior:GPR (and:GPR (match_dup 6) (match_dup 5))\n \t\t (ashift:GPR (match_dup 3) (match_dup 4))))]\n {\n-  operands[5] = GEN_INT ((1UL << UINTVAL (operands[4])) - 1);\n+  operands[5] = GEN_INT ((HOST_WIDE_INT_1U << UINTVAL (operands[4])) - 1);\n   if (reg_overlap_mentioned_p (operands[0], operands[3]))\n     {\n       if (!can_create_pseudo_p ())\n@@ -4210,7 +4215,7 @@\n \t\t   (ashift:GPR (match_dup 3) (match_dup 4))))\n      (clobber (reg:CC CC_REGNUM))])]\n {\n-  operands[5] = GEN_INT ((1UL << UINTVAL (operands[4])) - 1);\n+  operands[5] = GEN_INT ((HOST_WIDE_INT_1U << UINTVAL (operands[4])) - 1);\n   if (reg_overlap_mentioned_p (operands[0], operands[3]))\n     {\n       if (!can_create_pseudo_p ())\n@@ -4419,7 +4424,7 @@\n {\n     int size = INTVAL (operands[1]) / BITS_PER_UNIT;\n \n-    operands[1] = GEN_INT ((1ul << size) - 1);\n+    operands[1] = GEN_INT ((HOST_WIDE_INT_1U << size) - 1);\n     return (which_alternative == 0) ? \"stcm\\t%2,%1,%S0\"\n \t\t\t\t    : \"stcmy\\t%2,%1,%S0\";\n }\n@@ -4441,7 +4446,7 @@\n {\n     int size = INTVAL (operands[1]) / BITS_PER_UNIT;\n \n-    operands[1] = GEN_INT ((1ul << size) - 1);\n+    operands[1] = GEN_INT ((HOST_WIDE_INT_1U << size) - 1);\n     return \"stcmh\\t%2,%1,%S0\";\n }\n [(set_attr \"op_type\" \"RSY\")"}]}