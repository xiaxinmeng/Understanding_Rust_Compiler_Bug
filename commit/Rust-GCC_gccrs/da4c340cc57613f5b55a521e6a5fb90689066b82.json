{"sha": "da4c340cc57613f5b55a521e6a5fb90689066b82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE0YzM0MGNjNTc2MTNmNWI1NWE1MjFlNmE1ZmI5MDY4OTA2NmI4Mg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2005-03-25T19:50:53Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2005-03-25T19:50:53Z"}, "message": "rs6000.md (UNSPEC constants): Add UNSPEC_STFIWX.\n\n\t* config/rs6000/rs6000.md (UNSPEC constants): Add UNSPEC_STFIWX.\n\t(fix_truncdfsi2): Allow registers or memory as destination.\n\tWhen TARGET_PPC_GFXOPT, generate simplified pattern.\n\t(fix_truncdfsi2_internal): Use define_insn_and_split.\n\t(fix_truncdfsi2_internal_gfxopt): New.\n\t(fctiwz): Don't confuse register allocation by giving it no choices.\n\t(stfiwx): New.\n\t* config/rs6000/rs6000.h (EXTRA_CONSTRAINT): Add 'Z'.\n\t(EXTRA_MEMORY_CONSTRAINT): Likewise.\n\t* config/rs6000/rs6000.c (indexed_or_indirect_operand): New.\n\t* config/rs6000/rs6000-protos.h (indexed_or_indirect_operand): New.\n\nFrom-SVN: r97058", "tree": {"sha": "9939aa9903cc9a3b806d05e10fea5a51aabf6ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9939aa9903cc9a3b806d05e10fea5a51aabf6ae0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da4c340cc57613f5b55a521e6a5fb90689066b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da4c340cc57613f5b55a521e6a5fb90689066b82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da4c340cc57613f5b55a521e6a5fb90689066b82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da4c340cc57613f5b55a521e6a5fb90689066b82/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86f1f8581b02f7f0fc88efb3ea210c9aece12880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f1f8581b02f7f0fc88efb3ea210c9aece12880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86f1f8581b02f7f0fc88efb3ea210c9aece12880"}], "stats": {"total": 111, "additions": 94, "deletions": 17}, "files": [{"sha": "e99685a65bd3ec95d31b258bb0438bcf601a2381", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4c340cc57613f5b55a521e6a5fb90689066b82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4c340cc57613f5b55a521e6a5fb90689066b82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da4c340cc57613f5b55a521e6a5fb90689066b82", "patch": "@@ -1,3 +1,17 @@\n+2005-03-25  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* config/rs6000/rs6000.md (UNSPEC constants): Add UNSPEC_STFIWX.\n+\t(fix_truncdfsi2): Allow registers or memory as destination.\n+\tWhen TARGET_PPC_GFXOPT, generate simplified pattern.\n+\t(fix_truncdfsi2_internal): Use define_insn_and_split.\n+\t(fix_truncdfsi2_internal_gfxopt): New.\n+\t(fctiwz): Don't confuse register allocation by giving it no choices.\n+\t(stfiwx): New.\n+\t* config/rs6000/rs6000.h (EXTRA_CONSTRAINT): Add 'Z'.\n+\t(EXTRA_MEMORY_CONSTRAINT): Likewise.\n+\t* config/rs6000/rs6000.c (indexed_or_indirect_operand): New. \n+\t* config/rs6000/rs6000-protos.h (indexed_or_indirect_operand): New.\n+\n 2005-03-25  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* dominance.c (free_dominance_info): Speed up by freeing et"}, {"sha": "dd8590cf9e16144914626338a57da57a69ce89b2", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4c340cc57613f5b55a521e6a5fb90689066b82/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4c340cc57613f5b55a521e6a5fb90689066b82/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=da4c340cc57613f5b55a521e6a5fb90689066b82", "patch": "@@ -49,6 +49,7 @@ extern bool rs6000_legitimate_offset_address_p (enum machine_mode, rtx, int);\n extern rtx rs6000_got_register (rtx);\n extern rtx find_addr_reg (rtx);\n extern int word_offset_memref_operand (rtx, enum machine_mode);\n+extern int indexed_or_indirect_operand (rtx, enum machine_mode);\n extern rtx gen_easy_vector_constant_add_self (rtx);\n extern const char *output_vec_const_move (rtx *);\n extern void build_mask64_2_operands (rtx, rtx *);"}, {"sha": "3fc857a459b0b7606060434b37c8cb787e4a3b39", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4c340cc57613f5b55a521e6a5fb90689066b82/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4c340cc57613f5b55a521e6a5fb90689066b82/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=da4c340cc57613f5b55a521e6a5fb90689066b82", "patch": "@@ -2297,6 +2297,25 @@ word_offset_memref_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n   return (off % 4) == 0;\n }\n \n+/* Return true if the operand is an indirect or indexed memory operand.  */\n+\n+int\n+indexed_or_indirect_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+{\n+  rtx addr;\n+  if (!memory_operand (op, mode))\n+    return 0;\n+\n+  addr = XEXP (op, 0);\n+  if (GET_CODE (addr) == REG)\n+    return 1;\n+  if (GET_CODE (addr) == PLUS\n+      && GET_CODE (XEXP (addr, 0)) == REG\n+      && GET_CODE (XEXP (addr, 1)) == REG)\n+    return 1;\n+  return 0;\n+}\n+\n /* Return true if either operand is a general purpose register.  */\n \n bool"}, {"sha": "adef69579d77061050ba9de42a18953234164a3a", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4c340cc57613f5b55a521e6a5fb90689066b82/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4c340cc57613f5b55a521e6a5fb90689066b82/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=da4c340cc57613f5b55a521e6a5fb90689066b82", "patch": "@@ -1357,6 +1357,7 @@ enum reg_class\n    'U' is for V.4 small data references.\n    'W' is a vector constant that can be easily generated (no mem refs).\n    'Y' is a indexed or word-aligned displacement memory operand.\n+   'Z' is an indexed or indirect memory operand.\n    't' is for AND masks that can be performed by two rldic{l,r} insns.  */\n \n #define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\t\t\\\n@@ -1372,14 +1373,15 @@ enum reg_class\n \t\t   && !mask64_operand (OP, DImode))\t\t\t\\\n    : (C) == 'W' ? (easy_vector_constant (OP, GET_MODE (OP)))\t\t\\\n    : (C) == 'Y' ? (word_offset_memref_operand (OP, GET_MODE (OP)))      \\\n+   : (C) == 'Z' ? (indexed_or_indirect_operand (OP, GET_MODE (OP)))\t\\\n    : 0)\n \n /* Define which constraints are memory constraints.  Tell reload\n    that any memory address can be reloaded by copying the\n    memory address into a base register if required.  */\n \n #define EXTRA_MEMORY_CONSTRAINT(C, STR)\t\t\t\t\\\n-  ((C) == 'Q' || (C) == 'Y')\n+  ((C) == 'Q' || (C) == 'Y' || (C) == 'Z')\n \n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use."}, {"sha": "b9fa39c386df77750ab9bb0c654a0d85569ee2d4", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 45, "deletions": 16, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4c340cc57613f5b55a521e6a5fb90689066b82/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4c340cc57613f5b55a521e6a5fb90689066b82/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=da4c340cc57613f5b55a521e6a5fb90689066b82", "patch": "@@ -51,6 +51,7 @@\n    (UNSPEC_TLSTLS\t\t29)\n    (UNSPEC_FIX_TRUNC_TF\t\t30)\t; fadd, rounding towards zero\n    (UNSPEC_MV_CR_GT\t\t31)\t; move_from_CR_eq_bit\n+   (UNSPEC_STFIWX\t\t32)\n   ])\n \n ;;\n@@ -5272,7 +5273,7 @@\n }\")\n \n (define_expand \"fix_truncdfsi2\"\n-  [(parallel [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+  [(parallel [(set (match_operand:SI 0 \"reg_or_mem_operand\" \"\")\n \t\t   (fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"\")))\n \t      (clobber (match_dup 2))\n \t      (clobber (match_dup 3))])]\n@@ -5286,28 +5287,29 @@\n      DONE;\n     }\n   operands[2] = gen_reg_rtx (DImode);\n+  if (TARGET_PPC_GFXOPT)\n+    {\n+      rtx orig_dest = operands[0];\n+      if (GET_CODE (orig_dest) != MEM)\n+\toperands[0] = assign_stack_temp (SImode, GET_MODE_SIZE (SImode), 0);\n+      emit_insn (gen_fix_truncdfsi2_internal_gfxopt (operands[0], operands[1],\n+\t\t\t\t\t\t     operands[2]));\n+      if (operands[0] != orig_dest)\n+\temit_move_insn (orig_dest, operands[0]);\n+      DONE;\n+    }\n   operands[3] = assign_stack_temp (DImode, GET_MODE_SIZE (DImode), 0);\n }\")\n \n-(define_insn \"*fix_truncdfsi2_internal\"\n+(define_insn_and_split \"*fix_truncdfsi2_internal\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=f\"))\n    (clobber (match_operand:DI 3 \"memory_operand\" \"=o\"))]\n   \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n-  [(set_attr \"length\" \"16\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"\")))\n-   (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n-   (clobber (match_operand:DI 3 \"offsettable_mem_operand\" \"\"))]\n-  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"\")))\n-   (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n-   (clobber (match_operand:DI 3 \"offsettable_mem_operand\" \"\"))]\n+  \"&& 1\"\n+  [(pc)]\n   \"\n {\n   rtx lowword;\n@@ -5321,20 +5323,47 @@\n   emit_move_insn (operands[3], operands[2]);\n   emit_move_insn (operands[0], gen_rtx_MEM (SImode, lowword));\n   DONE;\n-}\")\n+}\"\n+  [(set_attr \"length\" \"16\")])\n+\n+(define_insn_and_split \"fix_truncdfsi2_internal_gfxopt\"\n+  [(set (match_operand:SI 0 \"memory_operand\" \"=Z\")\n+\t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))\n+   (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=f\"))]\n+  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && TARGET_PPC_GFXOPT\"\n+  \"#\"\n+  \"&& 1\"\n+  [(pc)]\n+  \"\n+{\n+  emit_insn (gen_fctiwz (operands[2], operands[1]));\n+  emit_insn (gen_stfiwx (operands[0], operands[2]));\n+  DONE;\n+}\"\n+  [(set_attr \"length\" \"16\")])\n \n ; Here, we use (set (reg) (unspec:DI [(fix:SI ...)] UNSPEC_FCTIWZ))\n ; rather than (set (subreg:SI (reg)) (fix:SI ...))\n ; because the first makes it clear that operand 0 is not live\n ; before the instruction.\n (define_insn \"fctiwz\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=*f\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:DI [(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\"))]\n \t\t   UNSPEC_FCTIWZ))]\n   \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fcirz|fctiwz} %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n+; An UNSPEC is used so we don't have to support SImode in FP registers.\n+(define_insn \"stfiwx\"\n+  [(set (match_operand:SI 0 \"memory_operand\" \"=Z\")\n+\t(unspec:SI [(match_operand:DI 1 \"gpc_reg_operand\" \"f\")]\n+\t\t   UNSPEC_STFIWX))]\n+  \"TARGET_PPC_GFXOPT\"\n+  \"stfiwx %1,%y0\"\n+  [(set_attr \"type\" \"fpstore\")])\n+\n (define_expand \"floatsisf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n         (float:SF (match_operand:SI 1 \"gpc_reg_operand\" \"\")))]"}, {"sha": "7594edc797a8d5460dd82bd168d5610496dcac34", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4c340cc57613f5b55a521e6a5fb90689066b82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4c340cc57613f5b55a521e6a5fb90689066b82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da4c340cc57613f5b55a521e6a5fb90689066b82", "patch": "@@ -1,3 +1,7 @@\n+2005-03-25  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.dg/ppc-stfiwx.c: New.\n+\n 2005-03-25  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR target/19888"}, {"sha": "47a29ed3f17aad0e9fb4b82dd601bcbe6e611c86", "filename": "gcc/testsuite/gcc.dg/ppc-stfiwx.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4c340cc57613f5b55a521e6a5fb90689066b82/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-stfiwx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4c340cc57613f5b55a521e6a5fb90689066b82/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-stfiwx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-stfiwx.c?ref=da4c340cc57613f5b55a521e6a5fb90689066b82", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-options \"-mpowerpc-gfxopt\" } */\n+/* { dg-final { scan-assembler \"stfiwx\" } } */\n+\n+int foo (double x)\n+{\n+  return x;\n+}"}]}