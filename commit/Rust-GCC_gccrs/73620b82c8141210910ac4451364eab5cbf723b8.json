{"sha": "73620b82c8141210910ac4451364eab5cbf723b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM2MjBiODJjODE0MTIxMDkxMGFjNDQ1MTM2NGVhYjVjYmY3MjNiOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-31T12:24:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-31T12:24:20Z"}, "message": "(preserve_temp_slots): Preserve anything whose address was taken when\nX is zero.\n\nFrom-SVN: r8363", "tree": {"sha": "2f82d37e46a2555b37f1a4e08913605fea25ca99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f82d37e46a2555b37f1a4e08913605fea25ca99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73620b82c8141210910ac4451364eab5cbf723b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73620b82c8141210910ac4451364eab5cbf723b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73620b82c8141210910ac4451364eab5cbf723b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73620b82c8141210910ac4451364eab5cbf723b8/comments", "author": null, "committer": null, "parents": [{"sha": "7a0b7b9a972c599a69113e5baf619fcb28acb578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a0b7b9a972c599a69113e5baf619fcb28acb578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a0b7b9a972c599a69113e5baf619fcb28acb578"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "821d61ac7101f77ad49448a1a30b7104e06d97b6", "filename": "gcc/function.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73620b82c8141210910ac4451364eab5cbf723b8/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73620b82c8141210910ac4451364eab5cbf723b8/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=73620b82c8141210910ac4451364eab5cbf723b8", "patch": "@@ -1028,8 +1028,16 @@ preserve_temp_slots (x)\n {\n   struct temp_slot *p = 0;\n \n+  /* If there is no result, we still might have some objects whose address\n+     were taken, so we need to make sure they stay around.  */\n   if (x == 0)\n-    return;\n+    {\n+      for (p = temp_slots; p; p = p->next)\n+\tif (p->in_use && p->level == temp_slot_level && p->addr_taken)\n+\t  p->level--;\n+\n+      return;\n+    }\n \n   /* If X is a register that is being used as a pointer, see if we have\n      a temporary slot we know it points to.  To be consistent with\n@@ -1051,7 +1059,7 @@ preserve_temp_slots (x)\n     }\n \n   /* First see if we can find a match.  */\n-  if ( p== 0)\n+  if (p == 0)\n     p = find_temp_slot_from_address (XEXP (x, 0));\n \n   if (p != 0)"}]}