{"sha": "3bb1ed661a7dc49c4536613d430699d124641b10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JiMWVkNjYxYTdkYzQ5YzQ1MzY2MTNkNDMwNjk5ZDEyNDY0MWIxMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2010-06-08T09:59:10Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2010-06-08T09:59:10Z"}, "message": "decl.c (record_key_method_defined): New, broken out of ...\n\n\tcp/\n\t* decl.c (record_key_method_defined): New, broken out of ...\n\t(finish_function): ... here.  Call it.\t\n\t(start_decl): Treat aliases as definitions.\n\n\ttestsuite/\n\t* g++.dg/ext/attr-alias-1.C: New.\n\t* g++.dg/ext/attr-alias-2.C: New.\n\nFrom-SVN: r160431", "tree": {"sha": "906559e4176cecbde6bf18a6a401846d2ff55bce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/906559e4176cecbde6bf18a6a401846d2ff55bce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bb1ed661a7dc49c4536613d430699d124641b10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb1ed661a7dc49c4536613d430699d124641b10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bb1ed661a7dc49c4536613d430699d124641b10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb1ed661a7dc49c4536613d430699d124641b10/comments", "author": null, "committer": null, "parents": [{"sha": "4b9c045f7e3afb16f845649c04fa62634098a885", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b9c045f7e3afb16f845649c04fa62634098a885", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b9c045f7e3afb16f845649c04fa62634098a885"}], "stats": {"total": 120, "additions": 111, "deletions": 9}, "files": [{"sha": "3bb19a09af086224e803bb4e875b21968fbbb26c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb1ed661a7dc49c4536613d430699d124641b10/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb1ed661a7dc49c4536613d430699d124641b10/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3bb1ed661a7dc49c4536613d430699d124641b10", "patch": "@@ -1,3 +1,9 @@\n+2010-06-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* decl.c (record_key_method_defined): New, broken out of ...\n+\t(finish_function): ... here.  Call it.\t\n+\t(start_decl): Treat aliases as definitions.\n+\n 2010-06-08  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n \n \t* typeck2.c (abstract_virtuals_error): Use typed GC allocation."}, {"sha": "ca3152f9caf6b6abb8f759c0c8fb34bfdbedf769", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb1ed661a7dc49c4536613d430699d124641b10/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb1ed661a7dc49c4536613d430699d124641b10/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3bb1ed661a7dc49c4536613d430699d124641b10", "patch": "@@ -90,6 +90,7 @@ static void check_function_type (tree, tree);\n static void finish_constructor_body (void);\n static void begin_destructor_body (void);\n static void finish_destructor_body (void);\n+static void record_key_method_defined (tree);\n static tree create_array_type_for_decl (tree, tree, tree);\n static tree get_atexit_node (void);\n static tree get_dso_handle_node (void);\n@@ -4129,6 +4130,7 @@ start_decl (const cp_declarator *declarator,\n   tree context;\n   bool was_public;\n   int flags;\n+  bool alias;\n \n   *pushed_scope_p = NULL_TREE;\n \n@@ -4190,6 +4192,10 @@ start_decl (const cp_declarator *declarator,\n       if (toplevel_bindings_p ())\n \tTREE_STATIC (decl) = 1;\n     }\n+  alias = lookup_attribute (\"alias\", DECL_ATTRIBUTES (decl)) != 0;\n+  \n+  if (alias && TREE_CODE (decl) == FUNCTION_DECL)\n+    record_key_method_defined (decl);\n \n   /* If this is a typedef that names the class for linkage purposes\n      (7.1.3p8), apply any attributes directly to the type.  */\n@@ -4292,7 +4298,9 @@ start_decl (const cp_declarator *declarator,\n \t    DECL_EXTERNAL (decl) = 1;\n \t}\n \n-      if (DECL_EXTERNAL (decl) && ! DECL_TEMPLATE_SPECIALIZATION (decl))\n+      if (DECL_EXTERNAL (decl) && ! DECL_TEMPLATE_SPECIALIZATION (decl)\n+\t  /* Aliases are definitions. */\n+\t  && !alias)\n \tpermerror (input_location, \"declaration of %q#D outside of class is not definition\",\n \t\t   decl);\n \n@@ -12502,6 +12510,22 @@ outer_curly_brace_block (tree fndecl)\n   return block;\n }\n \n+/* If FNDECL is a class's key method, add the class to the list of\n+   keyed classes that should be emitted.  */\n+\n+static void\n+record_key_method_defined (tree fndecl)\n+{\n+  if (DECL_NONSTATIC_MEMBER_FUNCTION_P (fndecl)\n+      && DECL_VIRTUAL_P (fndecl)\n+      && !processing_template_decl)\n+    {\n+      tree fnclass = DECL_CONTEXT (fndecl);\n+      if (fndecl == CLASSTYPE_KEY_METHOD (fnclass))\n+\tkeyed_classes = tree_cons (NULL_TREE, fnclass, keyed_classes);\n+    }\n+}\n+\n /* Finish up a function declaration and compile that function\n    all the way to assembler language output.  The free the storage\n    for the function definition.\n@@ -12528,14 +12552,7 @@ finish_function (int flags)\n   gcc_assert (!defer_mark_used_calls);\n   defer_mark_used_calls = true;\n \n-  if (DECL_NONSTATIC_MEMBER_FUNCTION_P (fndecl)\n-      && DECL_VIRTUAL_P (fndecl)\n-      && !processing_template_decl)\n-    {\n-      tree fnclass = DECL_CONTEXT (fndecl);\n-      if (fndecl == CLASSTYPE_KEY_METHOD (fnclass))\n-\tkeyed_classes = tree_cons (NULL_TREE, fnclass, keyed_classes);\n-    }\n+  record_key_method_defined (fndecl);\n \n   nested = function_depth > 1;\n   fntype = TREE_TYPE (fndecl);"}, {"sha": "284bbc951fbb0664a1d4f9cf6fd7a02c6c461a34", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb1ed661a7dc49c4536613d430699d124641b10/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb1ed661a7dc49c4536613d430699d124641b10/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3bb1ed661a7dc49c4536613d430699d124641b10", "patch": "@@ -1,3 +1,8 @@\n+2010-06-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/ext/attr-alias-1.C: New.\n+\t* g++.dg/ext/attr-alias-2.C: New.\n+\n 2010-06-07  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/44446"}, {"sha": "1427267e5173954bf8410aeef5d21edc4aba09c4", "filename": "gcc/testsuite/g++.dg/ext/attr-alias-1.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb1ed661a7dc49c4536613d430699d124641b10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-alias-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb1ed661a7dc49c4536613d430699d124641b10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-alias-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-alias-1.C?ref=3bb1ed661a7dc49c4536613d430699d124641b10", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run }  */\n+/* { dg-require-alias \"\" } */\n+\n+#include <typeinfo>\n+\n+struct Klass\n+{\n+  int implementation () const;\n+  int magic () const;\n+};\n+\n+int Klass::implementation (void) const\n+{\n+  return 0;\n+}\n+\n+int Klass::magic () const\n+  __attribute__ ((alias (\"_ZNK5Klass14implementationEv\")));\n+\n+int __attribute__ ((noinline))\n+  Foo (Klass const *ptr)\n+{\n+  if (ptr->magic () != 0)\n+    return 1;\n+\n+  if (typeid (*ptr) != typeid (Klass))\n+    return 2;\n+\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  Klass obj;\n+  \n+  return Foo (&obj);\n+}"}, {"sha": "61a132f77a7b02107af0da5c256fb180925dd4f3", "filename": "gcc/testsuite/g++.dg/ext/attr-alias-2.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb1ed661a7dc49c4536613d430699d124641b10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-alias-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb1ed661a7dc49c4536613d430699d124641b10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-alias-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-alias-2.C?ref=3bb1ed661a7dc49c4536613d430699d124641b10", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run }  */\n+/* { dg-require-alias \"\" } */\n+\n+#include <typeinfo>\n+\n+struct Klass\n+{\n+  int implementation () const;\n+  virtual int magic () const;\n+};\n+\n+int Klass::implementation (void) const\n+{\n+  return 0;\n+}\n+\n+int Klass::magic () const\n+  __attribute__ ((alias (\"_ZNK5Klass14implementationEv\")));\n+\n+int __attribute__ ((noinline))\n+  Foo (Klass const *ptr)\n+{\n+  if (ptr->magic () != 0)\n+    return 1;\n+\n+  if (typeid (*ptr) != typeid (Klass))\n+    return 2;\n+\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  Klass obj;\n+  \n+  return Foo (&obj);\n+}"}]}