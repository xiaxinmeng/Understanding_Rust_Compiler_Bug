{"sha": "cc3c4f62f32c2945e5bbd85c084dae1f7046280b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MzYzRmNjJmMzJjMjk0NWU1YmJkODVjMDg0ZGFlMWY3MDQ2MjgwYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2012-11-28T09:27:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-11-28T09:27:10Z"}, "message": "re PR c/35634 (operand of pre-/postin-/decrement not promoted)\n\n2012-11-28  Richard Biener  <rguenther@suse.de>\n\n\tPR c/35634\n\t* gimple.h (gimplify_self_mod_expr): Declare.\n\t* gimplify.c (gimplify_self_mod_expr): Export.  Take a different\n\ttype for performing the arithmetic in.\n\t(gimplify_expr): Adjust.\n\t* tree-vect-loop-manip.c (vect_can_advance_ivs_p): Strip\n\tsign conversions we can re-apply after adjusting the IV.\n\n\tc-family/\n\t* c-gimplify.c (c_gimplify_expr): Gimplify self-modify expressions\n\there and use a type with proper overflow behavior for types that would\n\tneed to be promoted for the arithmetic.\n\n\t* gcc.dg/torture/pr35634.c: New testcase.\n\t* g++.dg/torture/pr35634.C: Likewise.\n\t* gcc.dg/vect/pr18536.c: Mark worker function noinline.\n\nFrom-SVN: r193882", "tree": {"sha": "708df4dc743c4f6d7778396707a8a1254049b1dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/708df4dc743c4f6d7778396707a8a1254049b1dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc3c4f62f32c2945e5bbd85c084dae1f7046280b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc3c4f62f32c2945e5bbd85c084dae1f7046280b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc3c4f62f32c2945e5bbd85c084dae1f7046280b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1c2b51b6662adebbc37c6590d697e9fe3439076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c2b51b6662adebbc37c6590d697e9fe3439076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c2b51b6662adebbc37c6590d697e9fe3439076"}], "stats": {"total": 134, "additions": 114, "deletions": 20}, "files": [{"sha": "b1a4afb0010b2095ea143748d4b9474599aa26bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc3c4f62f32c2945e5bbd85c084dae1f7046280b", "patch": "@@ -1,3 +1,13 @@\n+2012-11-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/35634\n+\t* gimple.h (gimplify_self_mod_expr): Declare.\n+\t* gimplify.c (gimplify_self_mod_expr): Export.  Take a different\n+\ttype for performing the arithmetic in.\n+\t(gimplify_expr): Adjust.\n+\t* tree-vect-loop-manip.c (vect_can_advance_ivs_p): Strip\n+\tsign conversions we can re-apply after adjusting the IV.\n+\n 2012-11-28  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR rtl-optimization/55006"}, {"sha": "ab68f3abd05cc3c6a51ea605f384df5647f0b1a2", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=cc3c4f62f32c2945e5bbd85c084dae1f7046280b", "patch": "@@ -1,3 +1,10 @@\n+2012-11-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/35634\n+\t* c-gimplify.c (c_gimplify_expr): Gimplify self-modify expressions\n+\there and use a type with proper overflow behavior for types that would\n+\tneed to be promoted for the arithmetic.\n+\n 2012-11-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/55435"}, {"sha": "74c94c140f56d96bc3acf41d1d43d9358e770998", "filename": "gcc/c-family/c-gimplify.c", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Fc-family%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Fc-family%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.c?ref=cc3c4f62f32c2945e5bbd85c084dae1f7046280b", "patch": "@@ -172,16 +172,37 @@ c_gimplify_expr (tree *expr_p, gimple_seq *pre_p ATTRIBUTE_UNUSED,\n {\n   enum tree_code code = TREE_CODE (*expr_p);\n \n-  /* This is handled mostly by gimplify.c, but we have to deal with\n-     not warning about int x = x; as it is a GCC extension to turn off\n-     this warning but only if warn_init_self is zero.  */\n-  if (code == DECL_EXPR\n-      && TREE_CODE (DECL_EXPR_DECL (*expr_p)) == VAR_DECL\n-      && !DECL_EXTERNAL (DECL_EXPR_DECL (*expr_p))\n-      && !TREE_STATIC (DECL_EXPR_DECL (*expr_p))\n-      && (DECL_INITIAL (DECL_EXPR_DECL (*expr_p)) == DECL_EXPR_DECL (*expr_p))\n-      && !warn_init_self)\n-    TREE_NO_WARNING (DECL_EXPR_DECL (*expr_p)) = 1;\n+  switch (code)\n+    {\n+    case DECL_EXPR:\n+      /* This is handled mostly by gimplify.c, but we have to deal with\n+\t not warning about int x = x; as it is a GCC extension to turn off\n+\t this warning but only if warn_init_self is zero.  */\n+      if (TREE_CODE (DECL_EXPR_DECL (*expr_p)) == VAR_DECL\n+\t  && !DECL_EXTERNAL (DECL_EXPR_DECL (*expr_p))\n+\t  && !TREE_STATIC (DECL_EXPR_DECL (*expr_p))\n+\t  && (DECL_INITIAL (DECL_EXPR_DECL (*expr_p)) == DECL_EXPR_DECL (*expr_p))\n+\t  && !warn_init_self)\n+\tTREE_NO_WARNING (DECL_EXPR_DECL (*expr_p)) = 1;\n+      break;\n+\n+    case PREINCREMENT_EXPR:\n+    case PREDECREMENT_EXPR:\n+    case POSTINCREMENT_EXPR:\n+    case POSTDECREMENT_EXPR:\n+      {\n+\ttree type = TREE_TYPE (TREE_OPERAND (*expr_p, 0));\n+\tif (INTEGRAL_TYPE_P (type) && c_promoting_integer_type_p (type))\n+\t  {\n+\t    if (TYPE_OVERFLOW_UNDEFINED (type))\n+\t      type = unsigned_type_for (type);\n+\t    return gimplify_self_mod_expr (expr_p, pre_p, post_p, 1, type);\n+\t  }\n+\tbreak;\n+      }\n+\n+    default:;\n+    }\n \n   return GS_UNHANDLED;\n }"}, {"sha": "5fcaac60d08472b6180372e4d1d2b4b95f760fce", "filename": "gcc/gimple.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=cc3c4f62f32c2945e5bbd85c084dae1f7046280b", "patch": "@@ -979,6 +979,8 @@ extern enum gimplify_status gimplify_expr (tree *, gimple_seq *, gimple_seq *,\n \t\t\t\t\t   bool (*) (tree), fallback_t);\n extern void gimplify_type_sizes (tree, gimple_seq *);\n extern void gimplify_one_sizepos (tree *, gimple_seq *);\n+enum gimplify_status gimplify_self_mod_expr (tree *, gimple_seq *, gimple_seq *,\n+\t\t\t\t\t     bool, tree);\n extern bool gimplify_stmt (tree *, gimple_seq *);\n extern gimple gimplify_body (tree, bool);\n extern void push_gimplify_context (struct gimplify_ctx *);"}, {"sha": "384adb21c352500c1467296ad5443bbea21fcc27", "filename": "gcc/gimplify.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=cc3c4f62f32c2945e5bbd85c084dae1f7046280b", "patch": "@@ -2317,11 +2317,13 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t*EXPR_P should be stored.\n \n     WANT_VALUE is nonzero iff we want to use the value of this expression\n-\tin another expression.  */\n+\tin another expression.\n \n-static enum gimplify_status\n+    ARITH_TYPE is the type the computation should be performed in.  */\n+\n+enum gimplify_status\n gimplify_self_mod_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n-\t\t\tbool want_value)\n+\t\t\tbool want_value, tree arith_type)\n {\n   enum tree_code code;\n   tree lhs, lvalue, rhs, t1;\n@@ -2382,27 +2384,32 @@ gimplify_self_mod_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \treturn ret;\n     }\n \n+  if (postfix)\n+    lhs = get_initialized_tmp_var (lhs, pre_p, NULL);\n+\n   /* For POINTERs increment, use POINTER_PLUS_EXPR.  */\n   if (POINTER_TYPE_P (TREE_TYPE (lhs)))\n     {\n       rhs = convert_to_ptrofftype_loc (loc, rhs);\n       if (arith_code == MINUS_EXPR)\n \trhs = fold_build1_loc (loc, NEGATE_EXPR, TREE_TYPE (rhs), rhs);\n-      arith_code = POINTER_PLUS_EXPR;\n+      t1 = fold_build2 (POINTER_PLUS_EXPR, TREE_TYPE (*expr_p), lhs, rhs);\n     }\n+  else\n+    t1 = fold_convert (TREE_TYPE (*expr_p),\n+\t\t       fold_build2 (arith_code, arith_type,\n+\t\t\t\t    fold_convert (arith_type, lhs),\n+\t\t\t\t    fold_convert (arith_type, rhs)));\n \n   if (postfix)\n     {\n-      tree t2 = get_initialized_tmp_var (lhs, pre_p, NULL);\n-      t1 = build2 (arith_code, TREE_TYPE (*expr_p), t2, rhs);\n       gimplify_assign (lvalue, t1, pre_p);\n       gimplify_seq_add_seq (orig_post_p, post);\n-      *expr_p = t2;\n+      *expr_p = lhs;\n       return GS_ALL_DONE;\n     }\n   else\n     {\n-      t1 = build2 (arith_code, TREE_TYPE (*expr_p), lhs, rhs);\n       *expr_p = build2 (MODIFY_EXPR, TREE_TYPE (lvalue), lvalue, t1);\n       return GS_OK;\n     }\n@@ -7111,7 +7118,8 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \tcase PREINCREMENT_EXPR:\n \tcase PREDECREMENT_EXPR:\n \t  ret = gimplify_self_mod_expr (expr_p, pre_p, post_p,\n-\t\t\t\t\tfallback != fb_none);\n+\t\t\t\t\tfallback != fb_none,\n+\t\t\t\t\tTREE_TYPE (*expr_p));\n \t  break;\n \n \tcase ARRAY_REF:"}, {"sha": "e537cdd237215e88d22ee4457171c13a618aa245", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc3c4f62f32c2945e5bbd85c084dae1f7046280b", "patch": "@@ -1,3 +1,10 @@\n+2012-11-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/35634\n+\t* gcc.dg/torture/pr35634.c: New testcase.\n+\t* g++.dg/torture/pr35634.C: Likewise.\n+\t* gcc.dg/vect/pr18536.c: Mark worker function noinline.\n+\n 2012-11-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/55476"}, {"sha": "00848e35d734c61df01346f344f4a13b4638a136", "filename": "gcc/testsuite/g++.dg/torture/pr35634.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr35634.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr35634.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr35634.C?ref=cc3c4f62f32c2945e5bbd85c084dae1f7046280b", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+\n+extern \"C\" void abort (void);\n+extern \"C\" void exit (int);\n+\n+void foo (int i)\n+{\n+    static int n;\n+    if (i < -128 || i > 127)\n+        abort ();\n+    if (++n > 1000)\n+        exit (0);\n+}\n+\n+int main ()\n+{\n+    char c;\n+    for (c = 0; ; c++) foo (c);\n+}"}, {"sha": "32df7d48c28b41dfbf38e03dbaba457ec15b3524", "filename": "gcc/testsuite/gcc.dg/torture/pr35634.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr35634.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr35634.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr35634.c?ref=cc3c4f62f32c2945e5bbd85c084dae1f7046280b", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+\n+void abort (void);\n+void exit (int);\n+\n+void foo (int i)\n+{\n+    static int n;\n+    if (i < -128 || i > 127)\n+        abort ();\n+    if (++n > 1000)\n+        exit (0);\n+}\n+\n+int main ()\n+{\n+    char c;\n+    for (c = 0; ; c++) foo (c);\n+}"}, {"sha": "6eac90ff14ddcd95d7aaf26ab8d9e7170f52da96", "filename": "gcc/testsuite/gcc.dg/vect/pr18536.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr18536.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr18536.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr18536.c?ref=cc3c4f62f32c2945e5bbd85c084dae1f7046280b", "patch": "@@ -5,7 +5,7 @@\n \n #define N 16\n \n-int main1 (short a, short *b)\n+__attribute__ ((noinline)) int main1 (short a, short *b)\n {\n   while (++a < 4) *b++ = 2;\n "}, {"sha": "d3f23c995d6a9ad90d5f4aa6f03923a8313d9589", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3c4f62f32c2945e5bbd85c084dae1f7046280b/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=cc3c4f62f32c2945e5bbd85c084dae1f7046280b", "patch": "@@ -1727,6 +1727,7 @@ vect_can_advance_ivs_p (loop_vec_info loop_vinfo)\n \t  return false;\n \t}\n \n+      STRIP_NOPS (access_fn);\n       if (dump_enabled_p ())\n         {\n \t  dump_printf_loc (MSG_NOTE, vect_location,"}]}