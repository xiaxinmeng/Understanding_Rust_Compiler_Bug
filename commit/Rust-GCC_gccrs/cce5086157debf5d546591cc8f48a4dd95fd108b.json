{"sha": "cce5086157debf5d546591cc8f48a4dd95fd108b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NlNTA4NjE1N2RlYmY1ZDU0NjU5MWNjOGY0OGE0ZGQ5NWZkMTA4Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-06-12T21:16:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-06-12T21:16:20Z"}, "message": "re PR c/53532 (function call ignored when called with argument of incompatible, undefined structure)\n\n\tPR c/53532\n\tPR c/51034\n\tPR c/53196\n\t* c-decl.c (build_compound_literal): Call c_incomplete_type_error\n\tif type isn't complete.\n\n\t* gcc.dg/pr53532.c: New test.\n\t* gcc.dg/c99-complit-2.c: Add two new dg-error directives,\n\tadjust line numbers.\n\t* gcc.dg/noncompile/950825-1.c: Expect incomplete type error message.\n\t* gcc.dg/Wcxx-compat-8.c: Likewise.\n\t* gcc.dg/pr51034.c: New test.\n\t* gcc.dg/pr53196-1.c: New test.\n\t* gcc.dg/pr53196-2.c: New test.\n\nFrom-SVN: r188483", "tree": {"sha": "e993739bf8bc3a9a389b46900f9bbbceaa67308b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e993739bf8bc3a9a389b46900f9bbbceaa67308b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cce5086157debf5d546591cc8f48a4dd95fd108b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce5086157debf5d546591cc8f48a4dd95fd108b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cce5086157debf5d546591cc8f48a4dd95fd108b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce5086157debf5d546591cc8f48a4dd95fd108b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57"}], "stats": {"total": 116, "additions": 101, "deletions": 15}, "files": [{"sha": "8824983eb2a2f610e8715b566978ef40811e2bd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cce5086157debf5d546591cc8f48a4dd95fd108b", "patch": "@@ -1,3 +1,11 @@\n+2012-06-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/53532\n+\tPR c/51034\n+\tPR c/53196\n+\t* c-decl.c (build_compound_literal): Call c_incomplete_type_error\n+\tif type isn't complete.\n+\n 2012-06-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/ia64/sync.md (fetchop_name): Change ior attribute to \"or\"."}, {"sha": "86add1402b4ff64cbd6b6013759480432d716b90", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=cce5086157debf5d546591cc8f48a4dd95fd108b", "patch": "@@ -4637,7 +4637,10 @@ build_compound_literal (location_t loc, tree type, tree init, bool non_const)\n     }\n \n   if (type == error_mark_node || !COMPLETE_TYPE_P (type))\n-    return error_mark_node;\n+    {\n+      c_incomplete_type_error (NULL_TREE, type);\n+      return error_mark_node;\n+    }\n \n   stmt = build_stmt (DECL_SOURCE_LOCATION (decl), DECL_EXPR, decl);\n   complit = build1 (COMPOUND_LITERAL_EXPR, type, stmt);"}, {"sha": "cdeb722d27b73ac98bc200d2d734f0997302dbdf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cce5086157debf5d546591cc8f48a4dd95fd108b", "patch": "@@ -1,3 +1,17 @@\n+2012-06-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/53532\n+\tPR c/51034\n+\tPR c/53196\n+\t* gcc.dg/pr53532.c: New test.\n+\t* gcc.dg/c99-complit-2.c: Add two new dg-error directives,\n+\tadjust line numbers.\n+\t* gcc.dg/noncompile/950825-1.c: Expect incomplete type error message.\n+\t* gcc.dg/Wcxx-compat-8.c: Likewise.\n+\t* gcc.dg/pr51034.c: New test.\n+\t* gcc.dg/pr53196-1.c: New test.\n+\t* gcc.dg/pr53196-2.c: New test.\n+\n 2012-06-12  Janis Johnson  <janisjo@codesourcery.com>\n \n \t* gcc.dg/torture/stackalign/stackalign.exp: Combine stack"}, {"sha": "f7e8c557914625d909e5aa52b4419488be2989d8", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-8.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-8.c?ref=cce5086157debf5d546591cc8f48a4dd95fd108b", "patch": "@@ -63,3 +63,5 @@ f5 ()\n {\n   return &((struct t8) { });  /* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n }\n+\n+/* { dg-error \"invalid use of undefined type\" \"\" { target *-*-* } 64 } */"}, {"sha": "1285e7e0d2bf1b24da0651e2236ba350bbe708e1", "filename": "gcc/testsuite/gcc.dg/c99-complit-2.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-complit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-complit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-complit-2.c?ref=cce5086157debf5d546591cc8f48a4dd95fd108b", "patch": "@@ -18,51 +18,53 @@ foo (int a)\n   /* { dg-error \"init\" \"void type\" { target *-*-* } 17 } */\n   &(struct si) { 1 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n   /* { dg-error \"init\" \"incomplete struct type\" { target *-*-* } 19 } */\n+  /* { dg-error \"invalid use of undefined type\" \"\" { target *-*-* } 19 } */\n   &(union ui) { 1 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-  /* { dg-error \"init\" \"incomplete union type\" { target *-*-* } 21 } */\n+  /* { dg-error \"init\" \"incomplete union type\" { target *-*-* } 22 } */\n+  /* { dg-error \"invalid use of undefined type\" \"\" { target *-*-* } 22 } */\n   (void (void)) { 0 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-  /* { dg-error \"init\" \"function type\" { target *-*-* } 23 } */\n+  /* { dg-error \"init\" \"function type\" { target *-*-* } 25 } */\n   (int [a]) { 1 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-  /* { dg-error \"init|variable\" \"VLA type\" { target *-*-* } 25 } */\n+  /* { dg-error \"init|variable\" \"VLA type\" { target *-*-* } 27 } */\n   /* Initializers must not attempt to initialize outside the object\n      declared.  */\n   (int [1]) { [1] = 2 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-  /* { dg-error \"init\" \"value outside array\" { target *-*-* } 29 } */\n-  (int [1]) { [-1] = 2 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n   /* { dg-error \"init\" \"value outside array\" { target *-*-* } 31 } */\n-  (int [1]) { 0, 1 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  (int [1]) { [-1] = 2 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n   /* { dg-error \"init\" \"value outside array\" { target *-*-* } 33 } */\n+  (int [1]) { 0, 1 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  /* { dg-error \"init\" \"value outside array\" { target *-*-* } 35 } */\n }\n \n int z;\n \n /* Outside a function, initializers must be constant.  */\n struct s *s0 = &(struct s) { 0, z }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"init\" \"non-const\" { target *-*-* } 40 } */\n-int sz = sizeof((struct s) { 0, z }); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n /* { dg-error \"init\" \"non-const\" { target *-*-* } 42 } */\n+int sz = sizeof((struct s) { 0, z }); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"init\" \"non-const\" { target *-*-* } 44 } */\n \n /* Compound literals aren't themselves constant expressions.  */\n int x = (int) { 0 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"init\" \"non-const\" { target *-*-* } 46 } */\n+/* { dg-error \"init\" \"non-const\" { target *-*-* } 48 } */\n \n /* Nor are they suitable structure or union initializers\n    outside a function.  */\n struct s s1 = (struct s) { 0, 1 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"init\" \"struct bad init\" { target *-*-* } 51 } */\n+/* { dg-error \"init\" \"struct bad init\" { target *-*-* } 53 } */\n union u u1 = (union u) { 0 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"init\" \"union bad init\" { target *-*-* } 53 } */\n+/* { dg-error \"init\" \"union bad init\" { target *-*-* } 55 } */\n \n /* They aren't suitable for array initializers, either inside or outside\n    a function.  */\n int y[2] = (int [2]) { 0, 1 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"init\" \"array bad init\" { target *-*-* } 58 } */\n+/* { dg-error \"init\" \"array bad init\" { target *-*-* } 60 } */\n \n void\n bar (void)\n {\n   struct s s2 = (struct s) { 0, 1 };\n   union u u2 = (union u) { 0 };\n   int z[2] = (int [2]) { 0, 1 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-  /* { dg-error \"init\" \"array bad init\" { target *-*-* } 66 } */\n+  /* { dg-error \"init\" \"array bad init\" { target *-*-* } 68 } */\n }"}, {"sha": "43dca2f103ebcae8169e97fdbcaf88db9ab849c8", "filename": "gcc/testsuite/gcc.dg/noncompile/950825-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F950825-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F950825-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F950825-1.c?ref=cce5086157debf5d546591cc8f48a4dd95fd108b", "patch": "@@ -1,4 +1,4 @@\n main()\n {\n-return (struct x) {{y: 0}};   /* { dg-error \"extra|near|excess|incompatible\" } */\n+return (struct x) {{y: 0}};   /* { dg-error \"extra|near|excess|incompatible|invalid\" } */\n }"}, {"sha": "c9b9c27c9cdb33a8bf83ee4a7860d34b45b674da", "filename": "gcc/testsuite/gcc.dg/pr51034.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51034.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51034.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51034.c?ref=cce5086157debf5d546591cc8f48a4dd95fd108b", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/51034 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+struct S;\n+\n+int\n+main ()\n+{\n+  struct R { typeof (((struct W) {})) x; } r;\t/* { dg-error \"invalid use of undefined type\" } */\n+  struct S { typeof (((struct S) {})) x; } s;\t/* { dg-error \"invalid use of undefined type\" } */\n+  struct T { int x[sizeof ((struct T) {})]; } t;/* { dg-error \"invalid use of undefined type\" } */\n+  struct U { int x[sizeof((struct V){})];} u;\t/* { dg-error \"invalid use of undefined type\" } */\n+}"}, {"sha": "b33e0432ebeccb8df168a4b3acd50ee6407deaeb", "filename": "gcc/testsuite/gcc.dg/pr53196-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53196-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53196-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53196-1.c?ref=cce5086157debf5d546591cc8f48a4dd95fd108b", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/53196 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+extern int printf (const char *, ...);\n+struct foo { int i; };\n+\n+int\n+main ()\n+{\n+  struct foo f = (struct foo_typo) { };\t/* { dg-error \"invalid use of undefined type\" } */\n+  printf (\"%d\\n\", f.i);\n+  return 0;\n+}"}, {"sha": "efb6a82c6bb0aee5b605caec215c52fa745b8e63", "filename": "gcc/testsuite/gcc.dg/pr53196-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53196-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53196-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53196-2.c?ref=cce5086157debf5d546591cc8f48a4dd95fd108b", "patch": "@@ -0,0 +1,16 @@\n+/* PR c/53196 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+\n+extern int printf (const char *, ...);\n+struct foo { int i; };\n+\n+int\n+main ()\n+{\n+  struct foo f = (struct foo_typo) { };\t/* { dg-error \"invalid use of undefined type\" } */\n+  printf (\"%d\\n\", f.i);\n+  return 0;\n+}\n+\n+/* { dg-error \"ISO C forbids empty initializer braces\" \"\" { target *-*-* } 11 } */"}, {"sha": "9caea40be9c52ed2db1710b1d877632e828dafac", "filename": "gcc/testsuite/gcc.dg/pr53532.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53532.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce5086157debf5d546591cc8f48a4dd95fd108b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53532.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53532.c?ref=cce5086157debf5d546591cc8f48a4dd95fd108b", "patch": "@@ -0,0 +1,13 @@\n+/* PR c/53532 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+struct S {};\n+extern int foo (struct S);\n+\n+int\n+main ()\n+{\n+  foo ((struct T) {});\t/* { dg-error \"invalid use of undefined type\" } */\n+  return 0;\n+}"}]}