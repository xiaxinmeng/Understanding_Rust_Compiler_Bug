{"sha": "0f7164706b48fba1c832d74ee787deded16034a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY3MTY0NzA2YjQ4ZmJhMWM4MzJkNzRlZTc4N2RlZGVkMTYwMzRhMQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-09-05T07:53:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T07:53:10Z"}, "message": "exp_attr.adb: Handle vax fpt for 'Valid attribute\n\n2005-09-01  Robert Dewar  <dewar@adacore.com>\n\t    Doug Rupp  <rupp@adacore.com>\n\n\t* exp_attr.adb: Handle vax fpt for 'Valid attribute\n\t* exp_vfpt.ads, exp_vfpt.adb: (Expand_Vax_Valid): New procedure\n\t* s-vaflop-vms-alpha.adb, s-vaflop.ads, s-vaflop.adb\n\t(Valid_D, Valid_F, Valid_G): New functions\n\nFrom-SVN: r103860", "tree": {"sha": "3618aae5514f82a3f4fba73b73fe7fdd4c483062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3618aae5514f82a3f4fba73b73fe7fdd4c483062"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f7164706b48fba1c832d74ee787deded16034a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7164706b48fba1c832d74ee787deded16034a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f7164706b48fba1c832d74ee787deded16034a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7164706b48fba1c832d74ee787deded16034a1/comments", "author": null, "committer": null, "parents": [{"sha": "3711d64615812c04a47aecb0787136a57548f31b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3711d64615812c04a47aecb0787136a57548f31b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3711d64615812c04a47aecb0787136a57548f31b"}], "stats": {"total": 176, "additions": 157, "deletions": 19}, "files": [{"sha": "b9d7ee1f1dfabd02c609e50fb8c988b8c991471f", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7164706b48fba1c832d74ee787deded16034a1/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7164706b48fba1c832d74ee787deded16034a1/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=0f7164706b48fba1c832d74ee787deded16034a1", "patch": "@@ -35,6 +35,7 @@ with Exp_Pakd; use Exp_Pakd;\n with Exp_Strm; use Exp_Strm;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n+with Exp_VFpt; use Exp_VFpt;\n with Gnatvsn;  use Gnatvsn;\n with Hostparm; use Hostparm;\n with Lib;      use Lib;\n@@ -3826,13 +3827,20 @@ package body Exp_Attr is\n                Rtp : constant Entity_Id := Root_Type (Etype (Pref));\n \n             begin\n+               --  For vax fpt types, call appropriate routine in special vax\n+               --  floating point unit. We do not have to worry about loads in\n+               --  this case, since these types have no signalling NaN's.\n+\n+               if Vax_Float (Rtp) then\n+                  Expand_Vax_Valid (N);\n+\n                --  If the floating-point object might be unaligned, we need\n                --  to call the special routine Unaligned_Valid, which makes\n                --  the needed copy, being careful not to load the value into\n                --  any floating-point register. The argument in this case is\n                --  obj'Address (see Unchecked_Valid routine in s-fatgen.ads).\n \n-               if Is_Possibly_Unaligned_Object (Pref) then\n+               elsif Is_Possibly_Unaligned_Object (Pref) then\n                   Set_Attribute_Name (N, Name_Unaligned_Valid);\n                   Expand_Fpt_Attribute\n                     (N, Rtp, Name_Unaligned_Valid,\n@@ -3842,7 +3850,7 @@ package body Exp_Attr is\n                          Attribute_Name => Name_Address)));\n \n                --  In the normal case where we are sure the object is aligned,\n-               --  we generate a caqll to Valid, and the argument in this case\n+               --  we generate a call to Valid, and the argument in this case\n                --  is obj'Unrestricted_Access (after converting obj to the\n                --  right floating-point type).\n "}, {"sha": "98b2b075ce05f57893cd7887eaffe70b351791ac", "filename": "gcc/ada/exp_vfpt.adb", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7164706b48fba1c832d74ee787deded16034a1/gcc%2Fada%2Fexp_vfpt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7164706b48fba1c832d74ee787deded16034a1/gcc%2Fada%2Fexp_vfpt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_vfpt.adb?ref=0f7164706b48fba1c832d74ee787deded16034a1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1997-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -353,7 +353,7 @@ package body Exp_VFpt is\n                      Make_Real_Literal (Loc,\n                        Realval => Ureal_1 / Small_Value (T_Typ))))));\n \n-      --  All other cases.\n+      --  All other cases\n \n       else\n          --  Compute types for call\n@@ -499,4 +499,38 @@ package body Exp_VFpt is\n       end if;\n    end Expand_Vax_Real_Literal;\n \n+   ----------------------\n+   -- Expand_Vax_Valid --\n+   ----------------------\n+\n+   procedure Expand_Vax_Valid (N : Node_Id) is\n+      Loc  : constant Source_Ptr := Sloc (N);\n+      Pref : constant Node_Id    := Prefix (N);\n+      Ptyp : constant Entity_Id  := Root_Type (Etype (Pref));\n+      Rtyp : constant Entity_Id  := Etype (N);\n+      Vtyp : RE_Id;\n+      Func : RE_Id;\n+\n+   begin\n+      if Digits_Value (Ptyp) = VAXFF_Digits then\n+         Func := RE_Valid_F;\n+         Vtyp := RE_F;\n+      elsif Digits_Value (Ptyp) = VAXDF_Digits then\n+         Func := RE_Valid_D;\n+         Vtyp := RE_D;\n+      else pragma Assert (Digits_Value (Ptyp) = VAXGF_Digits);\n+         Func := RE_Valid_G;\n+         Vtyp := RE_G;\n+      end if;\n+\n+      Rewrite (N,\n+        Convert_To (Rtyp,\n+          Make_Function_Call (Loc,\n+            Name                   => New_Occurrence_Of (RTE (Func), Loc),\n+            Parameter_Associations => New_List (\n+              Convert_To (RTE (Vtyp), Pref)))));\n+\n+      Analyze_And_Resolve (N);\n+   end Expand_Vax_Valid;\n+\n end Exp_VFpt;"}, {"sha": "fb33b795db9a96c8993c29db33f86b0864ec0c7b", "filename": "gcc/ada/exp_vfpt.ads", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7164706b48fba1c832d74ee787deded16034a1/gcc%2Fada%2Fexp_vfpt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7164706b48fba1c832d74ee787deded16034a1/gcc%2Fada%2Fexp_vfpt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_vfpt.ads?ref=0f7164706b48fba1c832d74ee787deded16034a1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---             Copyright (C) 1997 Free Software Foundation, Inc.            --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -26,29 +26,34 @@\n \n --  This package contains specialized routines for handling the expansion\n --  of arithmetic and conversion operations involving Vax format floating-\n---  point formats as used on the Vax and the Alpha.\n+--  point formats as used on the Vax and the Alpha and the ia64.\n \n with Types; use Types;\n \n package Exp_VFpt is\n \n    procedure Expand_Vax_Arith (N : Node_Id);\n    --  The node N is an arithmetic node (N_Op_Abs, N_Op_Add, N_Op_Sub,\n-   --  N_Op_Div, N_Op_Mul, N_Op_Minus where the operands are in Vax\n-   --  float format. This procedure expands the necessary call.\n+   --  N_Op_Div, N_Op_Mul, N_Op_Minus where the operands are in Vax float\n+   --  format. This procedure expands the necessary call.\n \n    procedure Expand_Vax_Comparison (N : Node_Id);\n-   --  The node N is an arithmetic comparison node where the types to\n-   --  be compared are in Vax float format. This procedure expands the\n-   --  necessary call.\n+   --  The node N is an arithmetic comparison node where the types to be\n+   --  compared are in Vax float format. This procedure expands the necessary\n+   --  call.\n \n    procedure Expand_Vax_Conversion (N : Node_Id);\n-   --  The node N is a type conversion node where either the source or\n-   --  the target type, or both, are Vax floating-point type.\n+   --  The node N is a type conversion node where either the source or the\n+   --  target type, or both, are Vax floating-point type.\n \n    procedure Expand_Vax_Real_Literal (N : Node_Id);\n-   --  The node N is a real literal node where the type is a Vax\n-   --  floating-point type. This procedure rewrites the node to eliminate\n-   --  the occurrence of such constants.\n+   --  The node N is a real literal node where the type is a Vax floating-point\n+   --  type. This procedure rewrites the node to eliminate the occurrence of\n+   --  such constants.\n+\n+   procedure Expand_Vax_Valid (N : Node_Id);\n+   --  The node N is an attribute reference node for the Valid attribute where\n+   --  the prefix is of a Vax floating-point type. This procedure expands the\n+   --  necessary call for the validity test.\n \n end Exp_VFpt;"}, {"sha": "45a39bba08bf788aef88cfd0245bdee28f833d0f", "filename": "gcc/ada/s-vaflop-vms-alpha.adb", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7164706b48fba1c832d74ee787deded16034a1/gcc%2Fada%2Fs-vaflop-vms-alpha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7164706b48fba1c832d74ee787deded16034a1/gcc%2Fada%2Fs-vaflop-vms-alpha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vaflop-vms-alpha.adb?ref=0f7164706b48fba1c832d74ee787deded16034a1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2000 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1997-2005 Free Software Foundation, Inc.          --\n --                       (Version for Alpha OpenVMS)                        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n@@ -618,4 +618,43 @@ package body System.Vax_Float_Operations is\n       return R1;\n    end Sub_G;\n \n+   -------------\n+   -- Valid_D --\n+   -------------\n+\n+   --  For now, convert to IEEE and do Valid test on result. This is not quite\n+   --  accurate, but is good enough in practice.\n+\n+   function Valid_D (Arg : D) return Boolean is\n+      Val : T := G_To_T (D_To_G (Arg));\n+   begin\n+      return Val'Valid;\n+   end Valid_D;\n+\n+   -------------\n+   -- Valid_F --\n+   -------------\n+\n+   --  For now, convert to IEEE and do Valid test on result. This is not quite\n+   --  accurate, but is good enough in practice.\n+\n+   function Valid_F (Arg : F) return Boolean is\n+      Val : S := F_To_S (Arg);\n+   begin\n+      return Val'Valid;\n+   end Valid_F;\n+\n+   -------------\n+   -- Valid_G --\n+   -------------\n+\n+   --  For now, convert to IEEE and do Valid test on result. This is not quite\n+   --  accurate, but is good enough in practice.\n+\n+   function Valid_G (Arg : G) return Boolean is\n+      Val : T := G_To_T (Arg);\n+   begin\n+      return Val'Valid;\n+   end Valid_G;\n+\n end System.Vax_Float_Operations;"}, {"sha": "ae721cfa33d09e999c1602ddd90eceeaa2f7d7a3", "filename": "gcc/ada/s-vaflop.adb", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7164706b48fba1c832d74ee787deded16034a1/gcc%2Fada%2Fs-vaflop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7164706b48fba1c832d74ee787deded16034a1/gcc%2Fada%2Fs-vaflop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vaflop.adb?ref=0f7164706b48fba1c832d74ee787deded16034a1", "patch": "@@ -41,7 +41,7 @@ with System.IO; use System.IO;\n \n package body System.Vax_Float_Operations is\n    pragma Warnings (Off);\n-   --  Warnings about infinite recursion when the -gnatdm switch is used.\n+   --  Warnings about infinite recursion when the -gnatdm switch is used\n \n    -----------\n    -- Abs_F --\n@@ -418,4 +418,43 @@ package body System.Vax_Float_Operations is\n       return G (X);\n    end T_To_G;\n \n+   -------------\n+   -- Valid_D --\n+   -------------\n+\n+   --  For now, convert to IEEE and do Valid test on result. This is not quite\n+   --  accurate, but is good enough in practice.\n+\n+   function Valid_D (Arg : D) return Boolean is\n+      Val : T := G_To_T (D_To_G (Arg));\n+   begin\n+      return Val'Valid;\n+   end Valid_D;\n+\n+   -------------\n+   -- Valid_F --\n+   -------------\n+\n+   --  For now, convert to IEEE and do Valid test on result. This is not quite\n+   --  accurate, but is good enough in practice.\n+\n+   function Valid_F (Arg : F) return Boolean is\n+      Val : S := F_To_S (Arg);\n+   begin\n+      return Val'Valid;\n+   end Valid_F;\n+\n+   -------------\n+   -- Valid_G --\n+   -------------\n+\n+   --  For now, convert to IEEE and do Valid test on result. This is not quite\n+   --  accurate, but is good enough in practice.\n+\n+   function Valid_G (Arg : G) return Boolean is\n+      Val : T := G_To_T (Arg);\n+   begin\n+      return Val'Valid;\n+   end Valid_G;\n+\n end System.Vax_Float_Operations;"}, {"sha": "a7bfc9319ae9e859a22cb29b7aba1825756fc576", "filename": "gcc/ada/s-vaflop.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7164706b48fba1c832d74ee787deded16034a1/gcc%2Fada%2Fs-vaflop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7164706b48fba1c832d74ee787deded16034a1/gcc%2Fada%2Fs-vaflop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vaflop.ads?ref=0f7164706b48fba1c832d74ee787deded16034a1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1997-1998 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1997-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -139,6 +139,15 @@ package System.Vax_Float_Operations is\n    function Lt_G (X, Y : G) return Boolean;\n    --  Compares for X < Y\n \n+   ----------------------------------\n+   -- Routines for Valid Attribute --\n+   ----------------------------------\n+\n+   function Valid_D (Arg : D) return Boolean;\n+   function Valid_F (Arg : F) return Boolean;\n+   function Valid_G (Arg : G) return Boolean;\n+   --  Test whether Arg has a valid representation\n+\n    ----------------------\n    -- Debug Procedures --\n    ----------------------\n@@ -210,4 +219,8 @@ private\n    pragma Inline (Lt_F);\n    pragma Inline (Lt_G);\n \n+   pragma Inline (Valid_D);\n+   pragma Inline (Valid_F);\n+   pragma Inline (Valid_G);\n+\n end System.Vax_Float_Operations;"}]}