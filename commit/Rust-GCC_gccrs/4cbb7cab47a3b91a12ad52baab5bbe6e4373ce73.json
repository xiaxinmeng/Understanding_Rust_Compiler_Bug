{"sha": "4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNiYjdjYWI0N2EzYjkxYTEyYWQ1MmJhYWI1YmJlNmU0MzczY2U3Mw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-12-07T14:43:18Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-12-14T10:47:29Z"}, "message": "arm: Auto-vectorization for MVE: vneg\n\nThis patch enables MVE vneg instructions for auto-vectorization.  MVE\nvnegq insns in mve.md are modified to use 'neg' instead of unspec\nexpression.  The neg<mode>2 expander is added to vec-common.md.\n\nExisting patterns in neon.md are prefixed with neon_.\nIt's not clear why we have different patterns for VDQW\nand VH in neon.md, when WDQWH handles both, and patterns\nwith VDQ have provision for attributes for FP modes.\n\nAnother question is why <absneg_str><mode>2 always sets\nneon_abs<q> type when it also handles neon_neq<q> cases.\n\n2020-12-11  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/mve.md (mve_vnegq_f): Use 'neg' instead of unspec.\n\t(mve_vnegq_s): Likewise.\n\t* config/arm/neon.md (neg<mode>2): Rename into neon_neg<mode>2.\n\t(<absneg_str><mode>2): Rename into neon_<absneg_str><mode>2.\n\t(neon_v<absneg_str><mode>): Call gen_neon_<absneg_str><mode>2.\n\t(vashr<mode>3): Call gen_neon_neg<mode>2.\n\t(vlshr<mode>3): Call gen_neon_neg<mode>2.\n\t(neon_vneg<mode>): Call gen_neon_neg<mode>2.\n\t* config/arm/unspecs.md (VNEGQ_F, VNEGQ_S): Remove.\n\t* config/arm/vec-common.md (neg<mode>2): New expander.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/simd/mve-vneg.c: Add tests for vneg.", "tree": {"sha": "94e038977c65f295ce1daabbc56138fb7e0e805e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94e038977c65f295ce1daabbc56138fb7e0e805e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73/comments", "author": null, "committer": null, "parents": [{"sha": "fd43603414a9b7bdbac5a822af144dcd559733eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd43603414a9b7bdbac5a822af144dcd559733eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd43603414a9b7bdbac5a822af144dcd559733eb"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "b4c5a1e27c41e2270e05f9f4da1c055457a20ad3", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73", "patch": "@@ -271,8 +271,7 @@\n (define_insn \"mve_vnegq_f<mode>\"\n   [\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")]\n-\t VNEGQ_F))\n+\t(neg:MVE_0 (match_operand:MVE_0 1 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n   \"vneg.f%#<V_sz_elem>  %q0, %q1\"\n@@ -422,8 +421,7 @@\n (define_insn \"mve_vnegq_s<mode>\"\n   [\n    (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")]\n-\t VNEGQ_S))\n+\t(neg:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE\"\n   \"vneg.s%#<V_sz_elem>  %q0, %q1\""}, {"sha": "d2e92baeb495de6b8887056b04220d200c29f5f8", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73", "patch": "@@ -775,7 +775,7 @@\n                     (const_string \"neon_abs<q>\")))]\n )\n \n-(define_insn \"neg<mode>2\"\n+(define_insn \"neon_neg<mode>2\"\n   [(set (match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n \t(neg:VDQW (match_operand:VDQW 1 \"s_register_operand\" \"w\")))]\n   \"TARGET_NEON\"\n@@ -786,7 +786,7 @@\n                     (const_string \"neon_neg<q>\")))]\n )\n \n-(define_insn \"<absneg_str><mode>2\"\n+(define_insn \"neon_<absneg_str><mode>2\"\n   [(set (match_operand:VH 0 \"s_register_operand\" \"=w\")\n     (ABSNEG:VH (match_operand:VH 1 \"s_register_operand\" \"w\")))]\n  \"TARGET_NEON_FP16INST\"\n@@ -800,7 +800,7 @@\n    (ABSNEG:VH (match_operand:VH 1 \"s_register_operand\")))]\n  \"TARGET_NEON_FP16INST\"\n {\n-  emit_insn (gen_<absneg_str><mode>2 (operands[0], operands[1]));\n+  emit_insn (gen_neon_<absneg_str><mode>2 (operands[0], operands[1]));\n   DONE;\n })\n \n@@ -952,7 +952,7 @@\n   if (s_register_operand (operands[2], <MODE>mode))\n     {\n       rtx neg = gen_reg_rtx (<MODE>mode);\n-      emit_insn (gen_neg<mode>2 (neg, operands[2]));\n+      emit_insn (gen_neon_neg<mode>2 (neg, operands[2]));\n       emit_insn (gen_ashl<mode>3_signed (operands[0], operands[1], neg));\n     }\n   else\n@@ -969,7 +969,7 @@\n   if (s_register_operand (operands[2], <MODE>mode))\n     {\n       rtx neg = gen_reg_rtx (<MODE>mode);\n-      emit_insn (gen_neg<mode>2 (neg, operands[2]));\n+      emit_insn (gen_neon_neg<mode>2 (neg, operands[2]));\n       emit_insn (gen_ashl<mode>3_unsigned (operands[0], operands[1], neg));\n     }\n   else\n@@ -2953,7 +2953,7 @@\n    (match_operand:VDQW 1 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n-  emit_insn (gen_neg<mode>2 (operands[0], operands[1]));\n+  emit_insn (gen_neon_neg<mode>2 (operands[0], operands[1]));\n   DONE;\n })\n "}, {"sha": "ef64989600dcad642af54d7bf0250728a9fb7502", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73", "patch": "@@ -530,7 +530,6 @@\n   VRNDMQ_F\n   VRNDAQ_F\n   VREV64Q_F\n-  VNEGQ_F\n   VDUPQ_N_F\n   VABSQ_F\n   VREV32Q_F\n@@ -549,7 +548,6 @@\n   VREV64Q_S\n   VREV64Q_U\n   VQABSQ_S\n-  VNEGQ_S\n   VDUPQ_N_U\n   VDUPQ_N_S\n   VCLZQ_U"}, {"sha": "2d0932b95a1615e94aa6572a593fc9849c9b36db", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73", "patch": "@@ -199,3 +199,9 @@\n \t(not:VDQ (match_operand:VDQ 1 \"s_register_operand\")))]\n   \"ARM_HAVE_<MODE>_ARITH\"\n )\n+\n+(define_expand \"neg<mode>2\"\n+  [(set (match_operand:VDQWH 0 \"s_register_operand\" \"\")\n+\t(neg:VDQWH (match_operand:VDQWH 1 \"s_register_operand\" \"\")))]\n+  \"ARM_HAVE_<MODE>_ARITH\"\n+)"}, {"sha": "afd0d6087bd50b8d5e7812f0c2bc78ee63be7b0d", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vneg.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vneg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vneg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vneg.c?ref=4cbb7cab47a3b91a12ad52baab5bbe6e4373ce73", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include <stdint.h>\n+#include <arm_mve.h>\n+\n+#define FUNC(SIGN, TYPE, BITS, NB, OP, NAME)\t\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE##BITS##_t * __restrict__ dest, TYPE##BITS##_t *a) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = OP a[i];\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define FUNC_FLOAT(SIGN, TYPE, BITS, NB, OP, NAME)\t\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE * __restrict__ dest, TYPE *a) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = OP a[i];\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* vmnvq supports only 16-bit and 32-bit elements.  */\n+/* 64-bit vectors.  */\n+FUNC(s, int, 32, 2, -, vneg)\n+FUNC(u, uint, 32, 2, -, vneg)\n+FUNC(s, int, 16, 4, -, vneg)\n+FUNC(u, uint, 16, 4, -, vneg)\n+FUNC(s, int, 8, 8, -, vneg)\n+FUNC(u, uint, 8, 8, -, vneg)\n+FUNC_FLOAT(f, float, 32, 2, -, vneg)\n+FUNC(f, float, 16, 4, -, vneg)\n+\n+/* 128-bit vectors.  */\n+FUNC(s, int, 32, 4, -, vneg)\n+FUNC(u, uint, 32, 4, -, vneg)\n+FUNC(s, int, 16, 8, -, vneg)\n+FUNC(u, uint, 16, 8, -, vneg)\n+FUNC(s, int, 8, 16, -, vneg)\n+FUNC(u, uint, 8, 16, -, vneg)\n+FUNC_FLOAT(f, float, 32, 4, -, vneg)\n+FUNC(f, float, 16, 8, -, vneg)\n+\n+/* MVE has only 128-bit vectors, so we can vectorize only half of the\n+   functions above.  */\n+/* { dg-final { scan-assembler-times {vneg.s[0-9]+  q[0-9]+, q[0-9]+} 6 } } */\n+/* { dg-final { scan-assembler-times {vneg.f[0-9]+  q[0-9]+, q[0-9]+} 2 } } */"}]}