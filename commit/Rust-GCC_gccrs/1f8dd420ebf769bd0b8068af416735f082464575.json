{"sha": "1f8dd420ebf769bd0b8068af416735f082464575", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY4ZGQ0MjBlYmY3NjliZDBiODA2OGFmNDE2NzM1ZjA4MjQ2NDU3NQ==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-07-14T17:07:47Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-07-14T17:07:47Z"}, "message": "re PR fortran/70842 (internal compiler error with character members within a polymorphic pointer)\n\ngcc/testsuite/ChangeLog:\n\n2016-07-14  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/70842\n\t* gfortran.dg/select_type_35.f03: New test.\n\ngcc/fortran/ChangeLog:\n\n2016-07-14  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/70842\n\t* simplify.c (gfc_simplify_len): Only for unlimited polymorphic\n\ttypes replace the expression's _data ref with a _len ref.\n\nFrom-SVN: r238347", "tree": {"sha": "7f737d9f104e3471b6e68a90dba3176927887b54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f737d9f104e3471b6e68a90dba3176927887b54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f8dd420ebf769bd0b8068af416735f082464575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8dd420ebf769bd0b8068af416735f082464575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f8dd420ebf769bd0b8068af416735f082464575", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8dd420ebf769bd0b8068af416735f082464575/comments", "author": null, "committer": null, "parents": [{"sha": "aefae0f13c8622a095ae966de321566d529bbd70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aefae0f13c8622a095ae966de321566d529bbd70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aefae0f13c8622a095ae966de321566d529bbd70"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "0abf7d03045ff74ec3c6dbfb33519af4d9195440", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8dd420ebf769bd0b8068af416735f082464575/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8dd420ebf769bd0b8068af416735f082464575/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1f8dd420ebf769bd0b8068af416735f082464575", "patch": "@@ -1,3 +1,9 @@\n+2016-07-14  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/70842\n+\t* simplify.c (gfc_simplify_len): Only for unlimited polymorphic\n+\ttypes replace the expression's _data ref with a _len ref.\n+\n 2016-07-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/71783"}, {"sha": "8096a926161a0dc1c0a3bb5c47dfa2b102c226c8", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8dd420ebf769bd0b8068af416735f082464575/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8dd420ebf769bd0b8068af416735f082464575/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=1f8dd420ebf769bd0b8068af416735f082464575", "patch": "@@ -3816,8 +3816,12 @@ gfc_simplify_len (gfc_expr *e, gfc_expr *kind)\n     }\n   else if (e->expr_type == EXPR_VARIABLE && e->ts.type == BT_CHARACTER\n \t   && e->symtree->n.sym\n+\t   && e->symtree->n.sym->ts.type != BT_DERIVED\n \t   && e->symtree->n.sym->assoc && e->symtree->n.sym->assoc->target\n-\t   && e->symtree->n.sym->assoc->target->ts.type == BT_DERIVED)\n+\t   && e->symtree->n.sym->assoc->target->ts.type == BT_DERIVED\n+\t   && e->symtree->n.sym->assoc->target->symtree->n.sym\n+\t   && UNLIMITED_POLY (e->symtree->n.sym->assoc->target->symtree->n.sym))\n+\n     /* The expression in assoc->target points to a ref to the _data component\n        of the unlimited polymorphic entity.  To get the _len component the last\n        _data ref needs to be stripped and a ref to the _len component added.  */"}, {"sha": "ef810565182ada45b1cb79c89be31b5b5d3a210a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8dd420ebf769bd0b8068af416735f082464575/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8dd420ebf769bd0b8068af416735f082464575/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f8dd420ebf769bd0b8068af416735f082464575", "patch": "@@ -1,3 +1,8 @@\n+2016-07-14  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/70842\n+\t* gfortran.dg/select_type_35.f03: New test.\n+\n 2016-07-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/65951"}, {"sha": "92d2f27531311b76abf9dac25745f7c6dfe9bf05", "filename": "gcc/testsuite/gfortran.dg/select_type_35.f03", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8dd420ebf769bd0b8068af416735f082464575/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_35.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8dd420ebf769bd0b8068af416735f082464575/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_35.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_35.f03?ref=1f8dd420ebf769bd0b8068af416735f082464575", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do run }\n+!\n+! Contributed by Nathanael Huebbe\n+! Check fix for PR/70842\n+\n+program foo\n+\n+  TYPE, ABSTRACT :: t_Intermediate\n+  END TYPE t_Intermediate\n+\n+  type, extends(t_Intermediate) :: t_Foo\n+    character(:), allocatable :: string\n+  end type t_Foo\n+\n+  class(t_Foo), allocatable :: obj\n+\n+  allocate(obj)\n+  obj%string = \"blabarfoo\"\n+\n+  call bar(obj)\n+\n+  deallocate(obj)\n+contains\n+  subroutine bar(me)\n+    class(t_Intermediate), target :: me\n+\n+    class(*), pointer :: alias\n+\n+    select type(me)\n+      type is(t_Foo)\n+      if (len(me%string) /= 9) call abort()\n+    end select\n+\n+    alias => me\n+    select type(alias)\n+      type is(t_Foo)\n+        if (len(alias%string) /= 9) call abort()\n+    end select\n+  end subroutine bar\n+end program foo\n+"}]}