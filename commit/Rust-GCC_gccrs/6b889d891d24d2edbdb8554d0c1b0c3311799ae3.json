{"sha": "6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI4ODlkODkxZDI0ZDJlZGJkYjg1NTRkMGMxYjBjMzMxMTc5OWFlMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-06-16T09:52:48Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-06-16T09:52:48Z"}, "message": "re PR middle-end/31723 (Use reciprocal and reciprocal square root with -ffast-math)\n\n    PR middle-end/31723\n    * hooks.c (hook_tree_tree_bool_null): New hook.\n    * hooks.h (hook_tree_tree_bool_null): Add prototype.\n    * tree-pass.h (pass_convert_to_rsqrt): Declare.\n    * passes.c (init_optimization_passes): Add pass_convert_to_rsqrt.\n    * tree-ssa-math-opts.c (execute_cse_reciprocals): Scan for a/func(b)\n    and convert it to reciprocal a*rfunc(b).\n    (execute_convert_to_rsqrt): New function.\n    (gate_convert_to_rsqrt): New function.\n    (pass_convert_to_rsqrt): New pass definition.\n    * target.h (struct gcc_target): Add builtin_reciprocal.\n    * target-def.h (TARGET_BUILTIN_RECIPROCAL): New define.\n    (TARGET_INITIALIZER): Initialize builtin_reciprocal with\n    TARGET_BUILTIN_RECIPROCAL.\n    * doc/tm.texi (TARGET_BUILTIN_RECIPROCAL): Document.\n\n    * config/i386/i386.h (TARGET_RECIP): New define.\n    * config/i386/i386.md (divsf3): Expand by calling ix86_emit_swdivsf\n    for TARGET_SSE_MATH and TARGET_RECIP when\n    flag_unsafe_math_optimizations is set and not optimizing for size.\n    (*rcpsf2_sse): New insn pattern.\n    (*rsqrtsf2_sse): Ditto.\n    (rsqrtsf2): New expander.  Expand by calling ix86_emit_swsqrtsf\n    for TARGET_SSE_MATH and TARGET_RECIP when\n    flag_unsafe_math_optimizations is set and not optimizing for size.\n    (sqrt<mode>2): Expand SFmode operands by calling ix86_emit_swsqrtsf\n    for TARGET_SSE_MATH and TARGET_RECIP when\n    flag_unsafe_math_optimizations is set and not optimizing for size.\n    * config/i386/sse.md (divv4sf): Expand by calling ix86_emit_swdivsf\n    for TARGET_SSE_MATH and TARGET_RECIP when\n    flag_unsafe_math_optimizations is set and not optimizing for size.\n    (*sse_rsqrtv4sf2): Do not export.\n    (sqrtv4sf2): Ditto.\n    (sse_rsqrtv4sf2): New expander.  Expand by calling ix86_emit_swsqrtsf\n    for TARGET_SSE_MATH and TARGET_RECIP when\n    flag_unsafe_math_optimizations is set and not optimizing for size.\n    (sqrtv4sf2): Ditto.\n    * config/i386/i386.opt (mrecip): New option.\n    * config/i386/i386-protos.h (ix86_emit_swdivsf): Declare.\n    (ix86_emit_swsqrtsf): Ditto.\n    * config/i386/i386.c (IX86_BUILTIN_RSQRTF): New constant.\n    (ix86_init_mmx_sse_builtins): __builtin_ia32_rsqrtf: New\n    builtin definition.\n    (ix86_expand_builtin): Expand IX86_BUILTIN_RSQRTF using\n    ix86_expand_unop1_builtin.\n    (ix86_emit_swdivsf): New function.\n    (ix86_emit_swsqrtsf): Ditto.\n    (ix86_builtin_reciprocal): New function.\n    (TARGET_BUILTIN_RECIPROCAL): Use it.\n    (ix86_vectorize_builtin_conversion): Rename from\n    ix86_builtin_conversion.\n    (TARGET_VECTORIZE_BUILTIN_CONVERSION): Use renamed function.\n    * doc/invoke.texi (Machine Dependent Options): Add -mrecip to\n    \"i386 and x86_64 Options\" section.\n    (Intel 386 and AMD x86_64 Options): Document -mrecip.\n\ntestsuite/ChangeLog:\n\n    PR middle-end/31723\n    * gcc.target/i386/recip-divf.c: New test.\n    * gcc.target/i386/recip-sqrtf.c: Ditto.\n    * gcc.target/i386/recip-vec-divf.c: Ditto.\n    * gcc.target/i386/recip-vec-sqrtf.c: Ditto.\n    * gcc.target/i386/sse-recip.c: Ditto.\n\nFrom-SVN: r125756", "tree": {"sha": "332aeacd4c176a2297138e64e399861ff84a0b59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/332aeacd4c176a2297138e64e399861ff84a0b59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5be014d5b728cf754020b8ab4df1cd029f69922e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be014d5b728cf754020b8ab4df1cd029f69922e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5be014d5b728cf754020b8ab4df1cd029f69922e"}], "stats": {"total": 615, "additions": 604, "deletions": 11}, "files": [{"sha": "f832b77e9a5701f882b9b53987710aba50573e65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -1,3 +1,66 @@\n+2007-06-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR middle-end/31723\n+\t* hooks.c (hook_tree_tree_bool_null): New hook.\n+\t* hooks.h (hook_tree_tree_bool_null): Add prototype.\n+\t* tree-pass.h (pass_convert_to_rsqrt): Declare.\n+\t* passes.c (init_optimization_passes): Add pass_convert_to_rsqrt.\n+\t* tree-ssa-math-opts.c (execute_cse_reciprocals): Scan for a/func(b)\n+\tand convert it to reciprocal a*rfunc(b).\n+\t(execute_convert_to_rsqrt): New function.\n+\t(gate_convert_to_rsqrt): New function.\n+\t(pass_convert_to_rsqrt): New pass definition.\n+\t* target.h (struct gcc_target): Add builtin_reciprocal.\n+\t* target-def.h (TARGET_BUILTIN_RECIPROCAL): New define.\n+\t(TARGET_INITIALIZER): Initialize builtin_reciprocal with\n+\tTARGET_BUILTIN_RECIPROCAL.\n+\t* doc/tm.texi (TARGET_BUILTIN_RECIPROCAL): Document.\n+\n+\t* config/i386/i386.h (TARGET_RECIP): New define.\n+\t* config/i386/i386.md (divsf3): Expand by calling ix86_emit_swdivsf\n+\tfor TARGET_SSE_MATH and TARGET_RECIP when flag_finite_math_only and\n+\tflag_unsafe_math_optimizations are set, flag_trapping_math is unset\n+\tand not optimizing for size.\n+\t(*rcpsf2_sse): New insn pattern.\n+\t(*rsqrtsf2_sse): Ditto.\n+\t(rsqrtsf2): New expander.  Expand by calling ix86_emit_swsqrtsf\n+\tfor TARGET_SSE_MATH and TARGET_RECIP when flag_finite_math_only and\n+\tflag_unsafe_math_optimizations are set, flag_trapping_math is unset\n+\tand not optimizing for size.\n+\t(sqrt<mode>2): Expand SFmode operands by calling ix86_emit_swsqrtsf\n+\tfor TARGET_SSE_MATH and TARGET_RECIP when flag_finite_math_only and\n+\tflag_unsafe_math_optimizations are set, flag_trapping_math is unset\n+\tand not optimizing for size.\n+\t* config/i386/sse.md (divv4sf): Expand by calling ix86_emit_swdivsf\n+\tfor TARGET_SSE_MATH and TARGET_RECIP when flag_finite_math_only and\n+\tflag_unsafe_math_optimizations are set, flag_trapping_math is unset\n+\tand not optimizing for size.\n+\t(*sse_rsqrtv4sf2): Do not export.\n+\t(sqrtv4sf2): Ditto.\n+\t(sse_rsqrtv4sf2): New expander.  Expand by calling ix86_emit_swsqrtsf\n+\tfor TARGET_SSE_MATH and TARGET_RECIP when flag_finite_math_only and\n+\tflag_unsafe_math_optimizations are set, flag_trapping_math is unset\n+\tand not optimizing for size.\n+\t(sqrtv4sf2): Ditto.\n+\t* config/i386/i386.opt (mrecip): New option.\n+\t* config/i386/i386-protos.h (ix86_emit_swdivsf): Declare.\n+\t(ix86_emit_swsqrtsf): Ditto.\n+\t* config/i386/i386.c (IX86_BUILTIN_RSQRTF): New constant.\n+\t(ix86_init_mmx_sse_builtins): __builtin_ia32_rsqrtf: New\n+\tbuiltin definition.\n+\t(ix86_expand_builtin): Expand IX86_BUILTIN_RSQRTF using\n+\tix86_expand_unop1_builtin.\n+\t(ix86_emit_swdivsf): New function.\n+\t(ix86_emit_swsqrtsf): Ditto.\n+\t(ix86_builtin_reciprocal): New function.\n+\t(TARGET_BUILTIN_RECIPROCAL): Use it.\n+\t(ix86_vectorize_builtin_conversion): Rename from\n+\tix86_builtin_conversion.\n+\t(TARGET_VECTORIZE_BUILTIN_CONVERSION): Use renamed function.\n+\t* doc/invoke.texi (Machine Dependent Options): Add -mrecip to\n+\t\"i386 and x86_64 Options\" section.\n+\t(Intel 386 and AMD x86_64 Options): Document -mrecip.\n+\n 2007-06-15  Andrew Pinski <andrew_pinski@playstation.sony.com>\n             Zdenek Dvorak <dvorakz@suse.cz>\n             Richard Guenther  <rguenther@suse.de>"}, {"sha": "a0eab4852a8cd20aa492f02e2bfbbc4692090b90", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -163,6 +163,8 @@ extern void x86_emit_floatuns (rtx [2]);\n extern void ix86_emit_fp_unordered_jump (rtx);\n \n extern void ix86_emit_i387_log1p (rtx, rtx);\n+extern void ix86_emit_swdivsf (rtx, rtx, rtx, enum machine_mode);\n+extern void ix86_emit_swsqrtsf (rtx, rtx, enum machine_mode, bool);\n \n extern enum rtx_code ix86_reverse_condition (enum rtx_code, enum machine_mode);\n "}, {"sha": "f4ae18bc353e6ca510234fa299ce0bffdd9b375d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 136, "deletions": 3, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -16450,6 +16450,7 @@ enum ix86_builtins\n   IX86_BUILTIN_RCPSS,\n   IX86_BUILTIN_RSQRTPS,\n   IX86_BUILTIN_RSQRTSS,\n+  IX86_BUILTIN_RSQRTF,\n   IX86_BUILTIN_SQRTPS,\n   IX86_BUILTIN_SQRTSS,\n \n@@ -18039,6 +18040,10 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (OPTION_MASK_ISA_SSE, \"__builtin_ia32_rcpss\", v4sf_ftype_v4sf, IX86_BUILTIN_RCPSS);\n   def_builtin_const (OPTION_MASK_ISA_SSE, \"__builtin_ia32_rsqrtps\", v4sf_ftype_v4sf, IX86_BUILTIN_RSQRTPS);\n   def_builtin_const (OPTION_MASK_ISA_SSE, \"__builtin_ia32_rsqrtss\", v4sf_ftype_v4sf, IX86_BUILTIN_RSQRTSS);\n+  ftype = build_function_type_list (float_type_node,\n+\t\t\t\t    float_type_node,\n+\t\t\t\t    NULL_TREE);\n+  def_builtin_const (OPTION_MASK_ISA_SSE, \"__builtin_ia32_rsqrtf\", ftype, IX86_BUILTIN_RSQRTF);\n   def_builtin_const (OPTION_MASK_ISA_SSE, \"__builtin_ia32_sqrtps\", v4sf_ftype_v4sf, IX86_BUILTIN_SQRTPS);\n   def_builtin_const (OPTION_MASK_ISA_SSE, \"__builtin_ia32_sqrtss\", v4sf_ftype_v4sf, IX86_BUILTIN_SQRTSS);\n \n@@ -19133,6 +19138,9 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       emit_insn (pat);\n       return 0;\n \n+    case IX86_BUILTIN_RSQRTF:\n+      return ix86_expand_unop1_builtin (CODE_FOR_rsqrtsf2, exp, target);\n+\n     case IX86_BUILTIN_SQRTSS:\n       return ix86_expand_unop1_builtin (CODE_FOR_sse_vmsqrtv4sf2, exp, target);\n     case IX86_BUILTIN_RSQRTSS:\n@@ -19869,7 +19877,7 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n    input vector of type TYPE, or NULL_TREE if it is not available.  */\n \n static tree\n-ix86_builtin_conversion (unsigned int code, tree type)\n+ix86_vectorize_builtin_conversion (unsigned int code, tree type)\n {\n   if (TREE_CODE (type) != VECTOR_TYPE)\n     return NULL_TREE;\n@@ -19899,6 +19907,32 @@ ix86_builtin_conversion (unsigned int code, tree type)\n     }\n }\n \n+/* Returns a code for a target-specific builtin that implements\n+   reciprocal of the function, or NULL_TREE if not available.  */\n+\n+static tree\n+ix86_builtin_reciprocal (unsigned int code, bool sqrt ATTRIBUTE_UNUSED)\n+{\n+  if (! (TARGET_SSE_MATH && TARGET_RECIP && !optimize_size\n+\t && flag_finite_math_only && !flag_trapping_math\n+\t && flag_unsafe_math_optimizations))\n+    return NULL_TREE;\n+\n+  switch (code)\n+    {\n+    /* Sqrt to rsqrt conversion.  */\n+    case BUILT_IN_SQRTF:\n+      return ix86_builtins[IX86_BUILTIN_RSQRTF];\n+\n+    /* Vectorized version of sqrt to rsqrt conversion.  */\n+    case IX86_BUILTIN_SQRTPS:\n+      return ix86_builtins[IX86_BUILTIN_RSQRTPS];\n+\n+    default:\n+      return NULL_TREE;\n+    }\n+}\n+\n /* Store OPERAND to the memory after reload is completed.  This means\n    that we can't easily use assign_stack_local.  */\n rtx\n@@ -22501,6 +22535,100 @@ void ix86_emit_i387_log1p (rtx op0, rtx op1)\n   emit_label (label2);\n }\n \n+/* Output code to perform a Newton-Rhapson approximation of a single precision\n+   floating point divide [http://en.wikipedia.org/wiki/N-th_root_algorithm].  */\n+\n+void ix86_emit_swdivsf (rtx res, rtx a, rtx b, enum machine_mode mode)\n+{\n+  rtx x0, x1, e0, e1, two;\n+\n+  x0 = gen_reg_rtx (mode);\n+  e0 = gen_reg_rtx (mode);\n+  e1 = gen_reg_rtx (mode);\n+  x1 = gen_reg_rtx (mode);\n+\n+  two = CONST_DOUBLE_FROM_REAL_VALUE (dconst2, SFmode);\n+\n+  if (VECTOR_MODE_P (mode))\n+    two = ix86_build_const_vector (SFmode, true, two);\n+\n+  two = force_reg (mode, two);\n+\n+  /* a / b = a * rcp(b) * (2.0 - b * rcp(b)) */\n+\n+  /* x0 = 1./b estimate */\n+  emit_insn (gen_rtx_SET (VOIDmode, x0,\n+\t\t\t  gen_rtx_UNSPEC (mode, gen_rtvec (1, b),\n+\t\t\t\t\t  UNSPEC_RCP)));\n+  /* e0 = x0 * b */\n+  emit_insn (gen_rtx_SET (VOIDmode, e0,\n+\t\t\t  gen_rtx_MULT (mode, x0, b)));\n+  /* e1 = 2. - e0 */\n+  emit_insn (gen_rtx_SET (VOIDmode, e1,\n+\t\t\t  gen_rtx_MINUS (mode, two, e0)));\n+  /* x1 = x0 * e1 */\n+  emit_insn (gen_rtx_SET (VOIDmode, x1,\n+\t\t\t  gen_rtx_MULT (mode, x0, e1)));\n+  /* res = a * x1 */\n+  emit_insn (gen_rtx_SET (VOIDmode, res,\n+\t\t\t  gen_rtx_MULT (mode, a, x1)));\n+}\n+\n+/* Output code to perform a Newton-Rhapson approximation of a\n+   single precision floating point [reciprocal] square root.  */\n+\n+void ix86_emit_swsqrtsf (rtx res, rtx a, enum machine_mode mode,\n+\t\t\t bool recip)\n+{\n+  rtx x0, e0, e1, e2, e3, three, half;\n+\n+  x0 = gen_reg_rtx (mode);\n+  e0 = gen_reg_rtx (mode);\n+  e1 = gen_reg_rtx (mode);\n+  e2 = gen_reg_rtx (mode);\n+  e3 = gen_reg_rtx (mode);\n+\n+  three = CONST_DOUBLE_FROM_REAL_VALUE (dconst3, SFmode);\n+  half = CONST_DOUBLE_FROM_REAL_VALUE (dconsthalf, SFmode);\n+\n+  if (VECTOR_MODE_P (mode))\n+    {\n+      three = ix86_build_const_vector (SFmode, true, three);\n+      half = ix86_build_const_vector (SFmode, true, half);\n+    }\n+\n+  three = force_reg (mode, three);\n+  half = force_reg (mode, half);\n+\n+  /* sqrt(a) = 0.5 * a * rsqrtss(a) * (3.0 - a * rsqrtss(a) * rsqrtss(a))\n+     1.0 / sqrt(a) = 0.5 * rsqrtss(a) * (3.0 - a * rsqrtss(a) * rsqrtss(a)) */\n+\n+  /* x0 = 1./sqrt(a) estimate */\n+  emit_insn (gen_rtx_SET (VOIDmode, x0,\n+\t\t\t  gen_rtx_UNSPEC (mode, gen_rtvec (1, a),\n+\t\t\t\t\t  UNSPEC_RSQRT)));\n+  /* e0 = x0 * a */\n+  emit_insn (gen_rtx_SET (VOIDmode, e0,\n+\t\t\t  gen_rtx_MULT (mode, x0, a)));\n+  /* e1 = e0 * x0 */\n+  emit_insn (gen_rtx_SET (VOIDmode, e1,\n+\t\t\t  gen_rtx_MULT (mode, e0, x0)));\n+  /* e2 = 3. - e1 */\n+  emit_insn (gen_rtx_SET (VOIDmode, e2,\n+\t\t\t  gen_rtx_MINUS (mode, three, e1)));\n+  if (recip)\n+    /* e3 = .5 * x0 */\n+    emit_insn (gen_rtx_SET (VOIDmode, e3,\n+\t\t\t    gen_rtx_MULT (mode, half, x0)));\n+  else\n+    /* e3 = .5 * e0 */\n+    emit_insn (gen_rtx_SET (VOIDmode, e3,\n+\t\t\t    gen_rtx_MULT (mode, half, e0)));\n+  /* ret = e2 * e3 */\n+  emit_insn (gen_rtx_SET (VOIDmode, res,\n+\t\t\t  gen_rtx_MULT (mode, e2, e3)));\n+}\n+\n /* Solaris implementation of TARGET_ASM_NAMED_SECTION.  */\n \n static void ATTRIBUTE_UNUSED\n@@ -23205,9 +23333,14 @@ static const struct attribute_spec ix86_attribute_table[] =\n #define TARGET_EXPAND_BUILTIN ix86_expand_builtin\n \n #undef TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION\n-#define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION ix86_builtin_vectorized_function\n+#define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION \\\n+  ix86_builtin_vectorized_function\n+\n #undef TARGET_VECTORIZE_BUILTIN_CONVERSION\n-#define TARGET_VECTORIZE_BUILTIN_CONVERSION ix86_builtin_conversion\n+#define TARGET_VECTORIZE_BUILTIN_CONVERSION ix86_vectorize_builtin_conversion\n+\n+#undef TARGET_BUILTIN_RECIPROCAL\n+#define TARGET_BUILTIN_RECIPROCAL ix86_builtin_reciprocal\n \n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE ix86_output_function_epilogue"}, {"sha": "ee1fbbc27651be8547e25f562b7a953de1a86939", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -365,6 +365,7 @@ extern int x86_prefetch_sse;\n #define TARGET_POPCNT\t\tx86_popcnt\n #define TARGET_PREFETCH_SSE\tx86_prefetch_sse\n #define TARGET_SAHF\t\tx86_sahf\n+#define TARGET_RECIP\t\tx86_recip\n \n #define ASSEMBLER_DIALECT\t(ix86_asm_dialect)\n "}, {"sha": "3f8f97b46cb8d09ea2bda7d2d6faa70dcedf5f5c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -7470,7 +7470,16 @@\n \t(div:SF (match_operand:SF 1 \"register_operand\" \"\")\n \t\t(match_operand:SF 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_80387 || TARGET_SSE_MATH\"\n-  \"\")\n+{\n+  if (TARGET_SSE_MATH && TARGET_RECIP && !optimize_size\n+      && flag_finite_math_only && !flag_trapping_math\n+      && flag_unsafe_math_optimizations)\n+    {\n+      ix86_emit_swdivsf (operands[0], operands[1],\n+\t\t\t operands[2], SFmode);\n+      DONE;\n+    }\n+})\n \f\n ;; Remainder instructions.\n \n@@ -15516,6 +15525,15 @@\n               (const_string \"fop\")))\n    (set_attr \"mode\" \"SF\")])\n \n+(define_insn \"*rcpsf2_sse\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n+\t(unspec:SF [(match_operand:SF 1 \"nonimmediate_operand\" \"xm\")]\n+\t\t   UNSPEC_RCP))]\n+  \"TARGET_SSE_MATH\"\n+  \"rcpss\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"mode\" \"SF\")])\n+\n (define_insn \"*fop_sf_1_sse\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n \t(match_operator:SF 3 \"binary_fp_operator\"\n@@ -15980,6 +15998,27 @@\n    (set_attr \"athlon_decode\" \"direct\")   \n    (set_attr \"amdfam10_decode\" \"direct\")])\n \n+(define_insn \"*rsqrtsf2_sse\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n+\t(unspec:SF [(match_operand:SF 1 \"nonimmediate_operand\" \"xm\")]\n+\t\t   UNSPEC_RSQRT))]\n+  \"TARGET_SSE_MATH\"\n+  \"rsqrtss\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+(define_expand \"rsqrtsf2\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n+\t(unspec:SF [(match_operand:SF 1 \"nonimmediate_operand\" \"xm\")]\n+\t\t   UNSPEC_RSQRT))]\n+  \"TARGET_SSE_MATH && TARGET_RECIP && !optimize_size\n+   && flag_finite_math_only && !flag_trapping_math\n+   && flag_unsafe_math_optimizations\"\n+{\n+  ix86_emit_swsqrtsf (operands[0], operands[1], SFmode, 1);\n+  DONE;\n+})\n+\n (define_insn \"*sqrt<mode>2_sse\"\n   [(set (match_operand:SSEMODEF 0 \"register_operand\" \"=x\")\n \t(sqrt:SSEMODEF\n@@ -15998,6 +16037,15 @@\n   \"TARGET_USE_FANCY_MATH_387\n    || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n {\n+  if (<MODE>mode == SFmode\n+      && TARGET_SSE_MATH && TARGET_RECIP && !optimize_size\n+      && flag_finite_math_only && !flag_trapping_math\n+      && flag_unsafe_math_optimizations)\n+    {\n+      ix86_emit_swsqrtsf (operands[0], operands[1], SFmode, 0);\n+      DONE;\n+    }\n+\n   if (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH))\n     {\n       rtx op0 = gen_reg_rtx (XFmode);"}, {"sha": "1e36d0f0babe7911ab7206f7209537c72fa0faf6", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -258,3 +258,7 @@ Support code generation of popcnt instruction.\n msahf\n Target Report RejectNegative Var(x86_sahf)\n Support code generation of sahf instruction in 64bit x86-64 code.\n+\n+mrecip\n+Target Report RejectNegative Var(x86_recip)\n+Generate reciprocals instead of divss and sqrtss."}, {"sha": "65abbcf3b69cd7aef46235bf814083b7789d0b70", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -450,7 +450,18 @@\n \t(div:V4SF (match_operand:V4SF 1 \"register_operand\" \"\")\n \t\t  (match_operand:V4SF 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE\"\n-  \"ix86_fixup_binary_operands_no_copy (DIV, V4SFmode, operands);\")\n+{\n+  ix86_fixup_binary_operands_no_copy (DIV, V4SFmode, operands);\n+\n+  if (TARGET_SSE_MATH && TARGET_RECIP && !optimize_size\n+      && flag_finite_math_only && !flag_trapping_math\n+      && flag_unsafe_math_optimizations)\n+    {\n+      ix86_emit_swdivsf (operands[0], operands[1],\n+\t\t\t operands[2], V4SFmode);\n+      DONE;\n+    }\n+})\n \n (define_insn \"*divv4sf3\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n@@ -494,7 +505,7 @@\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"sse_rsqrtv4sf2\"\n+(define_insn \"*sse_rsqrtv4sf2\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(unspec:V4SF\n \t  [(match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\")] UNSPEC_RSQRT))]\n@@ -503,6 +514,21 @@\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"V4SF\")])\n \n+(define_expand \"sse_rsqrtv4sf2\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n+\t(unspec:V4SF\n+\t  [(match_operand:V4SF 1 \"nonimmediate_operand\" \"\")] UNSPEC_RSQRT))]\n+  \"TARGET_SSE\"\n+{\n+  if (TARGET_SSE_MATH && TARGET_RECIP && !optimize_size\n+      && flag_finite_math_only && !flag_trapping_math\n+      && flag_unsafe_math_optimizations)\n+    {\n+      ix86_emit_swsqrtsf (operands[0], operands[1], V4SFmode, 1);\n+      DONE;\n+    }\n+})\n+\n (define_insn \"sse_vmrsqrtv4sf2\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(vec_merge:V4SF\n@@ -515,14 +541,28 @@\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"sqrtv4sf2\"\n+(define_insn \"*sqrtv4sf2\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(sqrt:V4SF (match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE\"\n   \"sqrtps\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"V4SF\")])\n \n+(define_expand \"sqrtv4sf2\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=\")\n+\t(sqrt:V4SF (match_operand:V4SF 1 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_SSE\"\n+{\n+  if (TARGET_SSE_MATH && TARGET_RECIP && !optimize_size\n+      && flag_finite_math_only && !flag_trapping_math\n+      && flag_unsafe_math_optimizations)\n+    {\n+      ix86_emit_swsqrtsf (operands[0], operands[1], V4SFmode, 0);\n+      DONE;\n+    }\n+})\n+\n (define_insn \"sse_vmsqrtv4sf2\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(vec_merge:V4SF"}, {"sha": "d12a627573507819933412d02943fe70a75ee52d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -548,7 +548,7 @@ Objective-C and Objective-C++ Dialects}.\n -masm=@var{dialect}  -mno-fancy-math-387 @gol\n -mno-fp-ret-in-387  -msoft-float @gol\n -mno-wide-multiply  -mrtd  -malign-double @gol\n--mpreferred-stack-boundary=@var{num} -mcx16 -msahf @gol\n+-mpreferred-stack-boundary=@var{num} -mcx16 -msahf -mrecip @gol\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 @gol\n -msse4a -m3dnow -mpopcnt -mabm @gol\n -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n@@ -10346,6 +10346,13 @@ SAHF are load and store instructions, respectively, for certain status flags.\n In 64-bit mode, SAHF instruction is used to optimize @code{fmod}, @code{drem}\n or @code{remainder} built-in functions: see @ref{Other Builtins} for details.\n \n+@item -mrecip\n+@opindex mrecip\n+This option will enable GCC to use RCPSS and RSQRTSS instructions (and their\n+vectorized variants RCPPS and RSQRTPS) instead of DIVSS and SQRTSS (and their\n+vectorized variants).  These instructions will be generated only when\n+@option{-funsafe-math-optimizatons} is enabled.\n+\n @item -mpush-args\n @itemx -mno-push-args\n @opindex mpush-args"}, {"sha": "cd7ae6bdfae095c13215672ef9857cc3c9d205d2", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -5345,6 +5345,15 @@ of @var{x}.\n The default version returns false for all constants.\n @end deftypefn\n \n+@deftypefn {Target Hook} tree TARGET_BUILTIN_RECIPROCAL (enum tree_code @var{code}, bool @var{sqrt})\n+This hook should return the DECL of a function that implements reciprocal of\n+the builtin function with builtin function code @var{code}, or\n+@code{NULL_TREE} if such a function is not available.  When @var{sqrt} is\n+true, additional optimizations that apply only to the reciprocal of a square\n+root function are performed, and only reciprocals of @code{sqrt} function\n+are valid.\n+@end deftypefn\n+\n @deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD (void)\n This hook should return the DECL of a function @var{f} that given an\n address @var{addr} as an argument returns a mask @var{m} that can be"}, {"sha": "4c57a1687ee09f6c432bf1f091cfc47437c5e05a", "filename": "gcc/hooks.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -266,7 +266,15 @@ hook_constcharptr_tree_null (tree t ATTRIBUTE_UNUSED)\n }\n \n tree\n-hook_tree_tree_tree_bool_null (tree t0 ATTRIBUTE_UNUSED, tree t1 ATTRIBUTE_UNUSED,\n+hook_tree_tree_bool_null (tree t0 ATTRIBUTE_UNUSED,\n+\t\t\t  bool ignore ATTRIBUTE_UNUSED)\n+{\n+  return NULL;\n+}\n+\n+tree\n+hook_tree_tree_tree_bool_null (tree t0 ATTRIBUTE_UNUSED,\n+\t\t\t       tree t1 ATTRIBUTE_UNUSED,\n \t\t\t       bool ignore ATTRIBUTE_UNUSED)\n {\n   return NULL;"}, {"sha": "15efef7ef223dd355adb812cda1ef868a96efa19", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -58,6 +58,7 @@ extern int hook_int_void_no_regs (void);\n \n extern tree hook_tree_tree_tree_null (tree, tree);\n extern tree hook_tree_tree_tree_tree_3rd_identity (tree, tree, tree);\n+extern tree hook_tree_tree_bool_null (tree, bool);\n extern tree hook_tree_tree_tree_bool_null (tree, tree, bool);\n \n extern unsigned hook_uint_uint_constcharptrptr_0 (unsigned, const char **);"}, {"sha": "c954847b82d7ae8fda9918d27845426e88db9ba4", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -647,6 +647,7 @@ init_optimization_passes (void)\n \t  NEXT_PASS (pass_tree_loop_done);\n \t}\n       NEXT_PASS (pass_cse_reciprocals);\n+      NEXT_PASS (pass_convert_to_rsqrt);\n       NEXT_PASS (pass_reassoc);\n       NEXT_PASS (pass_vrp);\n       NEXT_PASS (pass_dominator);"}, {"sha": "8acaa19beadf46862bc074f27c4c3b9966fbef25", "filename": "gcc/target-def.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -350,8 +350,10 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n    TARGET_SCHED_SET_SCHED_FLAGS}\n \n #define TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD 0\n-#define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION default_builtin_vectorized_function\n-#define TARGET_VECTORIZE_BUILTIN_CONVERSION default_builtin_vectorized_conversion\n+#define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION \\\n+  default_builtin_vectorized_function\n+#define TARGET_VECTORIZE_BUILTIN_CONVERSION \\\n+  default_builtin_vectorized_conversion\n #define TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN 0\n #define TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD 0\n \n@@ -385,6 +387,9 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #define TARGET_RESOLVE_OVERLOADED_BUILTIN NULL\n #define TARGET_FOLD_BUILTIN hook_tree_tree_tree_bool_null\n \n+/* In tree-ssa-math-opts.c  */\n+#define TARGET_BUILTIN_RECIPROCAL hook_tree_tree_bool_null\n+\n /* In varasm.c.  */\n #ifndef TARGET_SECTION_TYPE_FLAGS\n #define TARGET_SECTION_TYPE_FLAGS default_section_type_flags\n@@ -668,6 +673,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n   TARGET_EXPAND_BUILTIN,\t\t\t\\\n   TARGET_RESOLVE_OVERLOADED_BUILTIN,\t\t\\\n   TARGET_FOLD_BUILTIN,\t\t\t\t\\\n+  TARGET_BUILTIN_RECIPROCAL,\t\t\t\\\n   TARGET_MANGLE_FUNDAMENTAL_TYPE,\t\t\\\n   TARGET_INIT_LIBFUNCS,\t\t\t\t\\\n   TARGET_SECTION_TYPE_FLAGS,\t\t\t\\"}, {"sha": "2d446a121dcea469da003569315d6bd1db1f188b", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -483,6 +483,10 @@ struct gcc_target\n   /* Fold a target-specific builtin.  */\n   tree (* fold_builtin) (tree fndecl, tree arglist, bool ignore);\n \n+  /* Returns a code for a target-specific builtin that implements\n+     reciprocal of the function, or NULL_TREE if not available.  */\n+  tree (* builtin_reciprocal) (unsigned, bool);\n+\n   /* For a vendor-specific fundamental TYPE, return a pointer to\n      a statically-allocated string containing the C++ mangling for\n      TYPE.  In all other cases, return NULL.  */"}, {"sha": "cc98594c016fe5888a021ba94e7fbc503e8312f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -1,3 +1,12 @@\n+2007-06-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR middle-end/31723\n+\t* gcc.target/i386/recip-divf.c: New test.\n+\t* gcc.target/i386/recip-sqrtf.c: Ditto.\n+\t* gcc.target/i386/recip-vec-divf.c: Ditto.\n+\t* gcc.target/i386/recip-vec-sqrtf.c: Ditto.\n+\t* gcc.target/i386/sse-recip.c: Ditto.\n+\n 2007-06-15  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR tree-opt/32225"}, {"sha": "0a2e9c8bd81c2fa2122290dabf82b892ef290663", "filename": "gcc/testsuite/gcc.target/i386/recip-divf.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-divf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-divf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-divf.c?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ffast-math -msse2 -mfpmath=sse -mrecip\" } */\n+\n+float t1(float a, float b)\n+{\n+  return a / b;\n+}\n+\n+/* { dg-final { scan-assembler \"rcpss\" } } */"}, {"sha": "c387077aae26a7005c7a0bb03a313916bf2bf479", "filename": "gcc/testsuite/gcc.target/i386/recip-sqrtf.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-sqrtf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-sqrtf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-sqrtf.c?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ffast-math -msse2 -mfpmath=sse -mrecip\" } */\n+\n+extern float sqrtf (float);\n+\n+float t1(float a, float b)\n+{\n+  return a/sqrtf(b);\n+}\n+\n+float t2(float x, float a, float b)\n+{\n+  return sqrtf(a/b);\n+}\n+\n+float t3(float a)\n+{\n+  return sqrtf(a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"rsqrtss\" 3 } } */"}, {"sha": "bf41e6c4fde6da25457117b309c8e22d88541c7c", "filename": "gcc/testsuite/gcc.target/i386/recip-vec-divf.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-vec-divf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-vec-divf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-vec-divf.c?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse2 -mfpmath=sse -mrecip\" } */\n+\n+float a[16];\n+float b[16];\n+float r[16];\n+\n+void t1(void)\n+{\n+ int i;\n+\n+ for (i = 0; i < 16; i++)\n+   r[i] = a[i] / b[i];\n+}\n+\n+/* { dg-final { scan-assembler \"rcpps\" } } */"}, {"sha": "2eb3f861f425b2f0f9ad756500ca0228db800b67", "filename": "gcc/testsuite/gcc.target/i386/recip-vec-sqrtf.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-vec-sqrtf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-vec-sqrtf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-vec-sqrtf.c?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse2 -mfpmath=sse -mrecip\" } */\n+\n+float a[16];\n+float b[16];\n+float r[16];\n+\n+extern float sqrtf (float);\n+\n+void t1(void)\n+{\n+ int i;\n+\n+ for (i = 0; i < 16; i++)\n+   r[i] = a[i] / sqrtf (b[i]);\n+}\n+\n+void t2(void)\n+{\n+ int i;\n+\n+ for (i = 0; i < 16; i++)\n+   r[i] = sqrtf (a[i] / b[i]);\n+}\n+\n+void t3(void)\n+{\n+ int i;\n+\n+ for (i = 0; i < 16; i++)\n+   r[i] = sqrtf (a[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times \"rsqrtps\" 3 } } */"}, {"sha": "2d7dff9145257e1b0f1de024880474a11e02f672", "filename": "gcc/testsuite/gcc.target/i386/sse-recip.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip.c?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -msse -mfpmath=sse -mrecip\" } */\n+\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+extern float sqrtf (float);\n+extern void abort (void);\n+\n+#define N 8\n+\n+int __attribute__((noinline))\n+main1 ()\n+{\n+  float a[N] = { 0.f, 18.f, 108.f, 324.f, 720.f, 1944.f, 3087.f, 5832.f };\n+  float b[N] = { 1.f, 2.f, 3.f, 4.f, 5.f, 6.f, 7.f, 8.f };\n+  float r[N];\n+\n+  float rc[N] = { 0.f, 3.f, 6.f, 9.f, 12.f, 18.f, 21.f, 27.f };\n+\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      r[i] = sqrtf (a[i] / b[i]);\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (r[i] != rc[i])\n+\tabort();\n+    }   \n+\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  unsigned long cpu_facilities;\n+\n+  cpu_facilities = i386_cpuid ();\n+\n+  if ((cpu_facilities & (bit_MMX | bit_SSE | bit_CMOV))\n+      != (bit_MMX | bit_SSE | bit_CMOV))\n+    /* If host has no vector support, pass.  */\n+    return 0;\n+\n+  main1 ();\n+  return 0;\n+}"}, {"sha": "333ec41b853071bc56c3727f6cd8ee9e05f9b1af", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -293,6 +293,7 @@ extern struct tree_opt_pass pass_early_warn_uninitialized;\n extern struct tree_opt_pass pass_late_warn_uninitialized;\n extern struct tree_opt_pass pass_cse_reciprocals;\n extern struct tree_opt_pass pass_cse_sincos;\n+extern struct tree_opt_pass pass_convert_to_rsqrt;\n extern struct tree_opt_pass pass_warn_function_return;\n extern struct tree_opt_pass pass_warn_function_noreturn;\n extern struct tree_opt_pass pass_phiopt;"}, {"sha": "0534dcf2f90b030164a97a23eb3c0c1aa5ef8592", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b889d891d24d2edbdb8554d0c1b0c3311799ae3/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=6b889d891d24d2edbdb8554d0c1b0c3311799ae3", "patch": "@@ -496,6 +496,46 @@ execute_cse_reciprocals (void)\n \t      && TREE_CODE (def) == SSA_NAME)\n \t    execute_cse_reciprocals_1 (&bsi, def);\n \t}\n+\n+      /* Scan for a/func(b) and convert it to reciprocal a*rfunc(b).  */\n+      for (bsi = bsi_after_labels (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n+        {\n+\t  tree stmt = bsi_stmt (bsi);\n+\t  tree fndecl;\n+\n+\t  if (TREE_CODE (stmt) == GIMPLE_MODIFY_STMT\n+\t      && TREE_CODE (GIMPLE_STMT_OPERAND (stmt, 1)) == RDIV_EXPR)\n+\t    {\n+\t      tree arg1 = TREE_OPERAND (GIMPLE_STMT_OPERAND (stmt, 1), 1);\n+\t      tree stmt1 = SSA_NAME_DEF_STMT (arg1);\n+\n+\t      if (TREE_CODE (stmt1) == GIMPLE_MODIFY_STMT\n+\t\t  && TREE_CODE (GIMPLE_STMT_OPERAND (stmt1, 1)) == CALL_EXPR\n+\t\t  && (fndecl\n+\t\t      = get_callee_fndecl (GIMPLE_STMT_OPERAND (stmt1, 1)))\n+\t\t  && (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n+\t\t      || DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD))\n+\t\t{\n+\t\t  enum built_in_function code;\n+\t\t  tree arg10;\n+\t\t  tree tmp;\n+\n+\t\t  code = DECL_FUNCTION_CODE (fndecl);\n+\t\t  fndecl = targetm.builtin_reciprocal (code, false);\n+\t\t  if (!fndecl)\n+\t\t    continue;\n+\n+\t\t  arg10 = CALL_EXPR_ARG (GIMPLE_STMT_OPERAND (stmt1, 1), 0);\n+\t\t  tmp = build_call_expr (fndecl, 1, arg10);\n+\t\t  GIMPLE_STMT_OPERAND (stmt1, 1) = tmp;\n+\t\t  update_stmt (stmt1);\n+\n+\t\t  TREE_SET_CODE (GIMPLE_STMT_OPERAND (stmt, 1), MULT_EXPR);\n+\t\t  fold_stmt_inplace (stmt);\n+\t\t  update_stmt (stmt);\n+\t\t}\n+\t    }\n+\t}\n     }\n \n   free_dominance_info (CDI_DOMINATORS);\n@@ -726,3 +766,88 @@ struct tree_opt_pass pass_cse_sincos =\n     | TODO_verify_stmts,                /* todo_flags_finish */\n   0\t\t\t\t        /* letter */\n };\n+\n+/* Find all expressions in the form of sqrt(a/b) and\n+   convert them to rsqrt(b/a).  */\n+\n+static unsigned int\n+execute_convert_to_rsqrt (void)\n+{\n+  basic_block bb;\n+\n+  FOR_EACH_BB (bb)\n+    {\n+      block_stmt_iterator bsi;\n+\n+      for (bsi = bsi_after_labels (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n+        {\n+\t  tree stmt = bsi_stmt (bsi);\n+\t  tree fndecl;\n+\n+\t  if (TREE_CODE (stmt) == GIMPLE_MODIFY_STMT\n+\t      && TREE_CODE (GIMPLE_STMT_OPERAND (stmt, 1)) == CALL_EXPR\n+\t      && (fndecl = get_callee_fndecl (GIMPLE_STMT_OPERAND (stmt, 1)))\n+\t      && (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n+\t\t  || DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD))\n+\t    {\n+\t      enum built_in_function code;\n+\t      tree arg1;\n+\t      tree stmt1;\n+\n+\t      code = DECL_FUNCTION_CODE (fndecl);\n+\t      fndecl = targetm.builtin_reciprocal (code, true);\n+\t      if (!fndecl)\n+\t\tcontinue;\n+\n+\t      arg1 = CALL_EXPR_ARG (GIMPLE_STMT_OPERAND (stmt, 1), 0);\n+\t      stmt1 = SSA_NAME_DEF_STMT (arg1);\n+\n+\t      if (TREE_CODE (stmt1) == GIMPLE_MODIFY_STMT\n+\t\t  && TREE_CODE (GIMPLE_STMT_OPERAND (stmt1, 1)) == RDIV_EXPR)\n+\t\t{\n+\t\t  tree arg10, arg11;\n+\t\t  tree tmp;\n+\n+\t\t  arg10 = TREE_OPERAND (GIMPLE_STMT_OPERAND (stmt1, 1), 0);\n+\t\t  arg11 = TREE_OPERAND (GIMPLE_STMT_OPERAND (stmt1, 1), 1);\n+\n+\t\t  /* Swap operands of RDIV_EXPR.  */\n+\t\t  TREE_OPERAND (GIMPLE_STMT_OPERAND (stmt1, 1), 0) = arg11;\n+\t\t  TREE_OPERAND (GIMPLE_STMT_OPERAND (stmt1, 1), 1) = arg10;\n+\t\t  fold_stmt_inplace (stmt1);\n+\t\t  update_stmt (stmt1);\n+\n+\t\t  tmp = build_call_expr (fndecl, 1, arg1);\n+\t\t  GIMPLE_STMT_OPERAND (stmt, 1) = tmp;\n+\t\t  update_stmt (stmt);\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n+static bool\n+gate_convert_to_rsqrt (void)\n+{\n+  return flag_unsafe_math_optimizations && optimize;\n+}\n+\n+struct tree_opt_pass pass_convert_to_rsqrt =\n+{\n+  \"rsqrt\",\t\t\t\t/* name */\n+  gate_convert_to_rsqrt,\t\t/* gate */\n+  execute_convert_to_rsqrt,\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  0,\t\t\t\t\t/* tv_id */\n+  PROP_ssa,\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  TODO_dump_func | TODO_update_ssa | TODO_verify_ssa\n+    | TODO_verify_stmts,                /* todo_flags_finish */\n+  0\t\t\t\t        /* letter */\n+};"}]}