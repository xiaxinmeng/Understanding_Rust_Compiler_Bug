{"sha": "2df6cea5dc471c577065eaacce5a75658861009f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRmNmNlYTVkYzQ3MWM1NzcwNjVlYWFjY2U1YTc1NjU4ODYxMDA5Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-06-17T19:50:45Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-06-17T19:50:45Z"}, "message": "cfgbuild.c (make_edges): Do not use label_value_list.\n\n\n\t* cfgbuild.c (make_edges): Do not use label_value_list.\n\t(find_basic_blocks_1): Do not collect label_value_list.\n\t(find_sub_basic_blocks): Update call of make_edges.\n\nFrom-SVN: r83304", "tree": {"sha": "cbaca57461c8bd537c8baf9e75d46e25f171dead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbaca57461c8bd537c8baf9e75d46e25f171dead"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2df6cea5dc471c577065eaacce5a75658861009f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df6cea5dc471c577065eaacce5a75658861009f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2df6cea5dc471c577065eaacce5a75658861009f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df6cea5dc471c577065eaacce5a75658861009f/comments", "author": null, "committer": null, "parents": [{"sha": "d00ad49ba1c217ec55751ed6461890e8911bb001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d00ad49ba1c217ec55751ed6461890e8911bb001", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d00ad49ba1c217ec55751ed6461890e8911bb001"}], "stats": {"total": 57, "additions": 13, "deletions": 44}, "files": [{"sha": "bab0cf09cc245657935044e089ad026ea621b328", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df6cea5dc471c577065eaacce5a75658861009f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df6cea5dc471c577065eaacce5a75658861009f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2df6cea5dc471c577065eaacce5a75658861009f", "patch": "@@ -1,3 +1,9 @@\n+2004-06-17  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cfgbuild.c (make_edges): Do not use label_value_list.\n+\t(find_basic_blocks_1): Do not collect label_value_list.\n+\t(find_sub_basic_blocks): Update call of make_edges.\n+\n 2004-06-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* tree-cfg.c (tree_make_forwarder_block):  Use SET_PHI_RESULT."}, {"sha": "ac064cfc4114e4ac5504c26f8fe246dd0f7cce28", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 7, "deletions": 44, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df6cea5dc471c577065eaacce5a75658861009f/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df6cea5dc471c577065eaacce5a75658861009f/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=2df6cea5dc471c577065eaacce5a75658861009f", "patch": "@@ -50,7 +50,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n static int count_basic_blocks (rtx);\n static void find_basic_blocks_1 (rtx);\n-static void make_edges (rtx, basic_block, basic_block, int);\n+static void make_edges (basic_block, basic_block, int);\n static void make_label_edge (sbitmap *, basic_block, rtx, int);\n static void find_bb_boundaries (basic_block);\n static void compute_outgoing_frequencies (basic_block);\n@@ -223,7 +223,7 @@ rtl_make_eh_edge (sbitmap *edge_cache, basic_block src, rtx insn)\n    the list of exception regions active at the end of the basic block.  */\n \n static void\n-make_edges (rtx label_value_list, basic_block min, basic_block max, int update_p)\n+make_edges (basic_block min, basic_block max, int update_p)\n {\n   basic_block bb;\n   sbitmap *edge_cache = NULL;\n@@ -240,7 +240,7 @@ make_edges (rtx label_value_list, basic_block min, basic_block max, int update_p\n   /* Heavy use of computed goto in machine-generated code can lead to\n      nearly fully-connected CFGs.  In that case we spend a significant\n      amount of time searching the edge lists for duplicates.  */\n-  if (forced_labels || label_value_list || cfun->max_jumptable_ents > 100)\n+  if (forced_labels || cfun->max_jumptable_ents > 100)\n     {\n       edge_cache = sbitmap_vector_alloc (last_basic_block, last_basic_block);\n       sbitmap_vector_zero (edge_cache, last_basic_block);\n@@ -326,14 +326,11 @@ make_edges (rtx label_value_list, basic_block min, basic_block max, int update_p\n \t    }\n \n \t  /* If this is a computed jump, then mark it as reaching\n-\t     everything on the label_value_list and forced_labels list.  */\n+\t     everything on the forced_labels list.  */\n \t  else if (computed_jump_p (insn))\n \t    {\n \t      current_function_has_computed_jump = 1;\n \n-\t      for (x = label_value_list; x; x = XEXP (x, 1))\n-\t\tmake_label_edge (edge_cache, bb, XEXP (x, 0), EDGE_ABNORMAL);\n-\n \t      for (x = forced_labels; x; x = XEXP (x, 1))\n \t\tmake_label_edge (edge_cache, bb, XEXP (x, 0), EDGE_ABNORMAL);\n \t    }\n@@ -424,7 +421,6 @@ find_basic_blocks_1 (rtx f)\n {\n   rtx insn, next;\n   rtx bb_note = NULL_RTX;\n-  rtx lvl = NULL_RTX;\n   rtx head = NULL_RTX;\n   rtx end = NULL_RTX;\n   basic_block prev = ENTRY_BLOCK_PTR;\n@@ -493,38 +489,6 @@ find_basic_blocks_1 (rtx f)\n \tdefault:\n \t  abort ();\n \t}\n-\n-      if (GET_CODE (insn) == INSN || GET_CODE (insn) == CALL_INSN)\n-\t{\n-\t  rtx note;\n-\n-\t  /* Make a list of all labels referred to other than by jumps.\n-\n-\t     Make a special exception for labels followed by an ADDR*VEC,\n-\t     as this would be a part of the tablejump setup code.\n-\n-\t     Make a special exception to registers loaded with label\n-\t     values just before jump insns that use them.  */\n-\n-\t  for (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n-\t    if (REG_NOTE_KIND (note) == REG_LABEL)\n-\t      {\n-\t\trtx lab = XEXP (note, 0), next;\n-\n-\t\tif ((next = next_nonnote_insn (lab)) != NULL\n-\t\t\t && GET_CODE (next) == JUMP_INSN\n-\t\t\t && (GET_CODE (PATTERN (next)) == ADDR_VEC\n-\t\t\t     || GET_CODE (PATTERN (next)) == ADDR_DIFF_VEC))\n-\t\t  ;\n-\t\telse if (GET_CODE (lab) == NOTE)\n-\t\t  ;\n-\t\telse if (GET_CODE (NEXT_INSN (insn)) == JUMP_INSN\n-\t\t\t && find_reg_note (NEXT_INSN (insn), REG_LABEL, lab))\n-\t\t  ;\n-\t\telse\n-\t\t  lvl = alloc_EXPR_LIST (0, XEXP (note, 0), lvl);\n-\t      }\n-\t}\n     }\n \n   if (head != NULL_RTX)\n@@ -535,7 +499,6 @@ find_basic_blocks_1 (rtx f)\n   if (last_basic_block != n_basic_blocks)\n     abort ();\n \n-  label_value_list = lvl;\n   clear_aux_for_blocks ();\n }\n \n@@ -584,7 +547,7 @@ find_basic_blocks (rtx f, int nregs ATTRIBUTE_UNUSED,\n   find_basic_blocks_1 (f);\n \n   /* Discover the edges of our cfg.  */\n-  make_edges (label_value_list, ENTRY_BLOCK_PTR->next_bb, EXIT_BLOCK_PTR->prev_bb, 0);\n+  make_edges (ENTRY_BLOCK_PTR->next_bb, EXIT_BLOCK_PTR->prev_bb, 0);\n \n   /* Do very simple cleanup now, for the benefit of code that runs between\n      here and cleanup_cfg, e.g. thread_prologue_and_epilogue_insns.  */\n@@ -729,7 +692,7 @@ find_many_sub_basic_blocks (sbitmap blocks)\n \n   /* Now re-scan and wire in all edges.  This expect simple (conditional)\n      jumps at the end of each new basic blocks.  */\n-  make_edges (NULL, min, max, 1);\n+  make_edges (min, max, 1);\n \n   /* Update branch probabilities.  Expect only (un)conditional jumps\n      to be created with only the forward edges.  */\n@@ -771,7 +734,7 @@ find_sub_basic_blocks (basic_block bb)\n \n   /* Now re-scan and wire in all edges.  This expect simple (conditional)\n      jumps at the end of each new basic blocks.  */\n-  make_edges (NULL, min, max, 1);\n+  make_edges (min, max, 1);\n \n   /* Update branch probabilities.  Expect only (un)conditional jumps\n      to be created with only the forward edges.  */"}]}