{"sha": "8bf4eeece3076a35dbfe8d7385b4fef2488337d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJmNGVlZWNlMzA3NmEzNWRiZmU4ZDczODViNGZlZjI0ODgzMzdkNg==", "commit": {"author": {"name": "Dimitris Vyzovitis", "email": "vyzo@media.mit.edu", "date": "2001-10-03T21:19:31Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2001-10-03T21:19:31Z"}, "message": "stl_threads.h (_Atomic_swap): New function.\n\n\t    * include/bits/stl_threads.h (_Atomic_swap): New function.\n\t    (_Swap_lock_struct<__dummy>::_S_swap_lock): New data.\n\t    * testsuite/ext/rope.cc: New file.\n\nFrom-SVN: r45999", "tree": {"sha": "434b86749df20dfd37c844d9000f55dd45c8a0ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/434b86749df20dfd37c844d9000f55dd45c8a0ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bf4eeece3076a35dbfe8d7385b4fef2488337d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf4eeece3076a35dbfe8d7385b4fef2488337d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bf4eeece3076a35dbfe8d7385b4fef2488337d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf4eeece3076a35dbfe8d7385b4fef2488337d6/comments", "author": null, "committer": null, "parents": [{"sha": "b52a8930ff4e8b14b1ab65ca91529e041273ddec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52a8930ff4e8b14b1ab65ca91529e041273ddec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b52a8930ff4e8b14b1ab65ca91529e041273ddec"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "bff3412543482b53b71a0819e686c8e3811a10f0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf4eeece3076a35dbfe8d7385b4fef2488337d6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf4eeece3076a35dbfe8d7385b4fef2488337d6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8bf4eeece3076a35dbfe8d7385b4fef2488337d6", "patch": "@@ -1,3 +1,9 @@\n+2001-10-03  Dimitris Vyzovitis  <vyzo@media.mit.edu>\n+\n+\t    * include/bits/stl_threads.h (_Atomic_swap): New function.\n+\t    (_Swap_lock_struct<__dummy>::_S_swap_lock): New data.\n+\t    * testsuite/ext/rope.cc: New file.\n+\n 2001-10-02  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* config/locale/time_members_gnu.h: Remove."}, {"sha": "dd27422f5c0ab1a9129cdb0223b995ee1ee4fda2", "filename": "libstdc++-v3/include/bits/stl_threads.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf4eeece3076a35dbfe8d7385b4fef2488337d6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf4eeece3076a35dbfe8d7385b4fef2488337d6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h?ref=8bf4eeece3076a35dbfe8d7385b4fef2488337d6", "patch": "@@ -202,6 +202,28 @@ struct _Refcount_Base\n // later, if required.  You can start by cloning the __STL_PTHREADS\n // path while making the obvious changes.  Later it could be optimized\n // to use the atomicity.h abstraction layer from libstdc++-v3.\n+// vyzo: simple _Atomic_swap implementation following the guidelines above\n+       // We use a template here only to get a unique initialized instance.\n+    template<int __dummy>\n+    struct _Swap_lock_struct {\n+        static __gthread_mutex_t _S_swap_lock;\n+    };\n+\n+    template<int __dummy>\n+    __gthread_mutex_t\n+    _Swap_lock_struct<__dummy>::_S_swap_lock = __GTHREAD_MUTEX_INIT;\n+\n+    // This should be portable, but performance is expected\n+    // to be quite awful.  This really needs platform specific\n+    // code.\n+    inline unsigned long _Atomic_swap(unsigned long * __p, unsigned long __q) {\n+        __gthread_mutex_lock(&_Swap_lock_struct<0>::_S_swap_lock);\n+        unsigned long __result = *__p;\n+        *__p = __q;\n+        __gthread_mutex_unlock(&_Swap_lock_struct<0>::_S_swap_lock);\n+        return __result;\n+    }\n+\n #else\n // GCC extension end\n # ifdef __STL_SGI_THREADS"}, {"sha": "79eecf822b5954769e3ac3c7abfcd422d274548a", "filename": "libstdc++-v3/testsuite/ext/rope.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf4eeece3076a35dbfe8d7385b4fef2488337d6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf4eeece3076a35dbfe8d7385b4fef2488337d6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope.cc?ref=8bf4eeece3076a35dbfe8d7385b4fef2488337d6", "patch": "@@ -0,0 +1,38 @@\n+// 2001-10-03 From: Dimitris Vyzovitis <vyzo@media.mit.edu>\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// rope (SGI extension)\n+\n+#include <ext/rope>\n+#include <iostream>\n+\n+void test01()\n+{\n+  std::crope foo;\n+  foo += \"bar\";\n+  const char* data = foo.c_str();\n+  std::cout << data << std::endl;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}