{"sha": "c8196921610abdf83eadb294945fd63bddfbf87f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgxOTY5MjE2MTBhYmRmODNlYWRiMjk0OTQ1ZmQ2M2JkZGZiZjg3Zg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2014-11-18T11:19:52Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2014-11-18T11:19:52Z"}, "message": "neon-testgen.ml (emit_prologue): Handle new compile_test_optim argument.\n\n2014-11-18  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/neon-testgen.ml (emit_prologue): Handle new\n\tcompile_test_optim argument.\n\t(emit_automatics): Rename to emit_variables. Support variable\n\tindentation of its output.\n\t(compile_test_optim): New function.\n\t(test_intrinsic): Call compile_test_optim.\n\t* config/arm/neon.ml (features): Add Compiler_optim.\n\t(ops): Add Compiler_optim feature to Vbic and Vorn.\n\t(type_in_crypto_only): Replace 'or' by '||'.\n\t(reinterp): Likewise.\n\t(reinterpq): Likewise.\n\n\ttestsuite/\n\t* gcc.target/arm/neon/vbicQs16.c: Regenerate.\n\t* gcc.target/arm/neon/vbicQs32.c: Likewise.\n\t* gcc.target/arm/neon/vbicQs64.c: Likewise.\n\t* gcc.target/arm/neon/vbicQs8.c: Likewise.\n\t* gcc.target/arm/neon/vbicQu16.c: Likewise.\n\t* gcc.target/arm/neon/vbicQu32.c: Likewise.\n\t* gcc.target/arm/neon/vbicQu64.c: Likewise.\n\t* gcc.target/arm/neon/vbicQu8.c: Likewise.\n\t* gcc.target/arm/neon/vbics16.c: Likewise.\n\t* gcc.target/arm/neon/vbics32.c: Likewise.\n\t* gcc.target/arm/neon/vbics64.c: Likewise.\n\t* gcc.target/arm/neon/vbics8.c: Likewise.\n\t* gcc.target/arm/neon/vbicu16.c: Likewise.\n\t* gcc.target/arm/neon/vbicu32.c: Likewise.\n\t* gcc.target/arm/neon/vbicu64.c: Likewise.\n\t* gcc.target/arm/neon/vbicu8.c: Likewise.\n\t* gcc.target/arm/neon/vornQs16.c: Likewise.\n\t* gcc.target/arm/neon/vornQs32.c: Likewise.\n\t* gcc.target/arm/neon/vornQs64.c: Likewise.\n\t* gcc.target/arm/neon/vornQs8.c: Likewise.\n\t* gcc.target/arm/neon/vornQu16.c: Likewise.\n\t* gcc.target/arm/neon/vornQu32.c: Likewise.\n\t* gcc.target/arm/neon/vornQu64.c: Likewise.\n\t* gcc.target/arm/neon/vornQu8.c: Likewise.\n\t* gcc.target/arm/neon/vorns16.c: Likewise.\n\t* gcc.target/arm/neon/vorns32.c: Likewise.\n\t* gcc.target/arm/neon/vorns64.c: Likewise.\n\t* gcc.target/arm/neon/vorns8.c: Likewise.\n\t* gcc.target/arm/neon/vornu16.c: Likewise.\n\t* gcc.target/arm/neon/vornu32.c: Likewise.\n\t* gcc.target/arm/neon/vornu64.c: Likewise.\n\t* gcc.target/arm/neon/vornu8.c: Likewise.\n\nFrom-SVN: r217707", "tree": {"sha": "8dd1dde3d91d0ddce4bd64e5f1ab36960a5d9bd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dd1dde3d91d0ddce4bd64e5f1ab36960a5d9bd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8196921610abdf83eadb294945fd63bddfbf87f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8196921610abdf83eadb294945fd63bddfbf87f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8196921610abdf83eadb294945fd63bddfbf87f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8196921610abdf83eadb294945fd63bddfbf87f/comments", "author": null, "committer": null, "parents": [{"sha": "58332aa080cd776cbbf757288b3e6a1d0ce485ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58332aa080cd776cbbf757288b3e6a1d0ce485ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58332aa080cd776cbbf757288b3e6a1d0ce485ad"}], "stats": {"total": 379, "additions": 225, "deletions": 154}, "files": [{"sha": "1dc082d3b113720a12b831c146dab2ed6c7ad2e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -1,3 +1,17 @@\n+2014-11-18  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/neon-testgen.ml (emit_prologue): Handle new\n+\tcompile_test_optim argument.\n+\t(emit_automatics): Rename to emit_variables. Support variable\n+\tindentation of its output.\n+\t(compile_test_optim): New function.\n+\t(test_intrinsic): Call compile_test_optim.\n+\t* config/arm/neon.ml (features): Add Compiler_optim.\n+\t(ops): Add Compiler_optim feature to Vbic and Vorn.\n+\t(type_in_crypto_only): Replace 'or' by '||'.\n+\t(reinterp): Likewise.\n+\t(reinterpq): Likewise.\n+\n 2014-11-18  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/arm_neon.h (vld1_dup_f32, vld1_dup_f64, vld1_dup_p8,"}, {"sha": "f3898193835bd788fe650a683fc008a0be35c7bc", "filename": "gcc/config/arm/neon-testgen.ml", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Fconfig%2Farm%2Fneon-testgen.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Fconfig%2Farm%2Fneon-testgen.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon-testgen.ml?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -46,20 +46,19 @@ let open_test_file dir name =\n     failwith (\"Could not create test source file \" ^ name ^ \": \" ^ str)\n \n (* Emit prologue code to a test source file.  *)\n-let emit_prologue chan test_name effective_target =\n+let emit_prologue chan test_name effective_target compile_test_optim =\n   Printf.fprintf chan \"/* Test the `%s' ARM Neon intrinsic.  */\\n\" test_name;\n   Printf.fprintf chan \"/* This file was autogenerated by neon-testgen.  */\\n\\n\";\n   Printf.fprintf chan \"/* { dg-do assemble } */\\n\";\n   Printf.fprintf chan \"/* { dg-require-effective-target %s_ok } */\\n\"\n                  effective_target;\n-  Printf.fprintf chan \"/* { dg-options \\\"-save-temps -O0\\\" } */\\n\";\n+  Printf.fprintf chan \"/* { dg-options \\\"-save-temps %s\\\" } */\\n\" compile_test_optim;\n   Printf.fprintf chan \"/* { dg-add-options %s } */\\n\" effective_target;\n-  Printf.fprintf chan \"\\n#include \\\"arm_neon.h\\\"\\n\\n\";\n-  Printf.fprintf chan \"void test_%s (void)\\n{\\n\" test_name\n+  Printf.fprintf chan \"\\n#include \\\"arm_neon.h\\\"\\n\\n\"\n \n-(* Emit declarations of local variables that are going to be passed\n+(* Emit declarations of variables that are going to be passed\n    to an intrinsic, together with one to take a returned value if needed.  *)\n-let emit_automatics chan c_types features =\n+let emit_variables chan c_types features spaces =\n   let emit () =\n     ignore (\n       List.fold_left (fun arg_number -> fun (flags, ty) ->\n@@ -69,8 +68,8 @@ let emit_automatics chan c_types features =\n                           (* Const arguments to builtins are directly\n                              written in as constants.  *)\n                           if not (List.mem Const flags) then\n-                            Printf.fprintf chan \"  %s %sarg%d_%s;\\n\"\n-                                           ty pointer_bit arg_number ty;\n+                            Printf.fprintf chan \"%s%s %sarg%d_%s;\\n\"\n+                                           spaces ty pointer_bit arg_number ty;\n                         arg_number + 1)\n                      0 (List.tl c_types))\n   in\n@@ -81,13 +80,13 @@ let emit_automatics chan c_types features =\n              allocation for vget_low tests or they fail because of copy\n              elimination.  *)\n           ((if List.mem Fixed_vector_reg features then\n-              Printf.fprintf chan \"  register %s out_%s asm (\\\"d18\\\");\\n\"\n-                             return_ty return_ty\n+              Printf.fprintf chan \"%sregister %s out_%s asm (\\\"d18\\\");\\n\"\n+                             spaces return_ty return_ty\n             else if List.mem Fixed_core_reg features then\n-              Printf.fprintf chan \"  register %s out_%s asm (\\\"r0\\\");\\n\"\n-                             return_ty return_ty\n+              Printf.fprintf chan \"%sregister %s out_%s asm (\\\"r0\\\");\\n\"\n+                             spaces return_ty return_ty\n             else\n-              Printf.fprintf chan \"  %s out_%s;\\n\" return_ty return_ty);\n+              Printf.fprintf chan \"%s%s out_%s;\\n\" spaces return_ty return_ty);\n \t   emit ())\n         end else\n           (* The intrinsic does not return a value.  *)\n@@ -173,6 +172,17 @@ let effective_target features =\n     | _ -> assert false\n   with Not_found -> \"arm_neon\"\n \n+(* Work out what the testcase optimization level should be, default to -O0.  *)\n+let compile_test_optim features =\n+  try\n+    match List.find (fun feature ->\n+                       match feature with Compiler_optim _ -> true\n+                                        | _ -> false)\n+                     features with\n+      Compiler_optim opt -> opt\n+    | _ -> assert false\n+  with Not_found -> \"-O0\"\n+\n (* Given an intrinsic shape, produce a regexp that will match\n    the right-hand sides of instructions generated by an intrinsic of\n    that shape.  *)\n@@ -280,12 +290,22 @@ let test_intrinsic dir opcode features shape name munge elt_ty =\n \t\t\t  \"!?\\\\(\\\\[ \\t\\\\]+@\\\\[a-zA-Z0-9 \\\\]+\\\\)?\\\\n\")\n                          (analyze_all_shapes features shape analyze_shape)\n   in\n-  let effective_target = effective_target features\n+  let effective_target = effective_target features in\n+  let compile_test_optim = compile_test_optim features\n   in\n     (* Emit file and function prologues.  *)\n-    emit_prologue chan test_name effective_target;\n-    (* Emit local variable declarations.  *)\n-    emit_automatics chan c_types features;\n+    emit_prologue chan test_name effective_target compile_test_optim;\n+\n+    if (compare compile_test_optim \"-O0\") <> 0 then\n+        (* Emit variable declarations.  *)\n+        emit_variables chan c_types features \"\";\n+\n+    Printf.fprintf chan \"void test_%s (void)\\n{\\n\" test_name;\n+\n+    if compare compile_test_optim \"-O0\" = 0 then\n+        (* Emit variable declarations.  *)\n+        emit_variables chan c_types features \"  \";\n+\n     Printf.fprintf chan \"\\n\";\n     (* Emit the call to the intrinsic.  *)\n     emit_call chan const_valuator c_types name elt_ty;"}, {"sha": "e16e2b063e901ab3ec0c6e073fdaa07767ee5ec9", "filename": "gcc/config/arm/neon.ml", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Fconfig%2Farm%2Fneon.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Fconfig%2Farm%2Fneon.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.ml?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -294,6 +294,8 @@ type features =\n     (* Mark that the intrinsic requires a particular bit in __ARM_FP to\n     be set.   *)\n   | Requires_FP_bit of int\n+    (* Compiler optimization level for the test.  *)\n+  | Compiler_optim of string\n \n exception MixedMode of elts * elts\n \n@@ -1941,18 +1943,18 @@ let ops =\n     Veor, [], All (3, Qreg), \"veorQ\", notype_2, su_8_64;\n \n     (* Bic (And-not).  *)\n-    Vbic, [], All (3, Dreg), \"vbic\", notype_2, su_8_32;\n-    Vbic, [No_op], All (3, Dreg), \"vbic\", notype_2, [S64; U64];\n-    Vbic, [], All (3, Qreg), \"vbicQ\", notype_2, su_8_64;\n+    Vbic, [Compiler_optim \"-O2\"], All (3, Dreg), \"vbic\", notype_2, su_8_32;\n+    Vbic, [No_op; Compiler_optim \"-O2\"], All (3, Dreg), \"vbic\", notype_2, [S64; U64];\n+    Vbic, [Compiler_optim \"-O2\"], All (3, Qreg), \"vbicQ\", notype_2, su_8_64;\n \n     (* Or-not.  *)\n-    Vorn, [], All (3, Dreg), \"vorn\", notype_2, su_8_32;\n-    Vorn, [No_op], All (3, Dreg), \"vorn\", notype_2, [S64; U64];\n-    Vorn, [], All (3, Qreg), \"vornQ\", notype_2, su_8_64;\n+    Vorn, [Compiler_optim \"-O2\"], All (3, Dreg), \"vorn\", notype_2, su_8_32;\n+    Vorn, [No_op; Compiler_optim \"-O2\"], All (3, Dreg), \"vorn\", notype_2, [S64; U64];\n+    Vorn, [Compiler_optim \"-O2\"], All (3, Qreg), \"vornQ\", notype_2, su_8_64;\n   ]\n \n let type_in_crypto_only t\n-  = (t == P64) or (t == P128)\n+  = (t == P64) || (t == P128)\n \n let cross_product s1 s2\n   = List.filter (fun (e, e') -> e <> e')\n@@ -1963,7 +1965,7 @@ let reinterp =\n   let casts = cross_product elems elems in\n   List.map\n     (fun (convto, convfrom) ->\n-       Vreinterp, (if (type_in_crypto_only convto) or (type_in_crypto_only convfrom)\n+       Vreinterp, (if (type_in_crypto_only convto) || (type_in_crypto_only convfrom)\n                    then [Requires_feature \"CRYPTO\"] else []) @ [No_op], Use_operands [| Dreg; Dreg |],\n                    \"vreinterpret\", conv_1, [Cast (convto, convfrom)])\n     casts\n@@ -1973,7 +1975,7 @@ let reinterpq =\n   let casts = cross_product elems elems in\n   List.map\n     (fun (convto, convfrom) ->\n-       Vreinterp, (if (type_in_crypto_only convto) or (type_in_crypto_only convfrom)\n+       Vreinterp, (if (type_in_crypto_only convto) || (type_in_crypto_only convfrom)\n                    then [Requires_feature \"CRYPTO\"] else []) @ [No_op], Use_operands [| Qreg; Qreg |],\n                    \"vreinterpretQ\", conv_1, [Cast (convto, convfrom)])\n     casts"}, {"sha": "80f5519aeb69dd26348340eca7f2e7b5f6c45287", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -1,3 +1,38 @@\n+2014-11-18  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/neon/vbicQs16.c: Regenerate.\n+\t* gcc.target/arm/neon/vbicQs32.c: Likewise.\n+\t* gcc.target/arm/neon/vbicQs64.c: Likewise.\n+\t* gcc.target/arm/neon/vbicQs8.c: Likewise.\n+\t* gcc.target/arm/neon/vbicQu16.c: Likewise.\n+\t* gcc.target/arm/neon/vbicQu32.c: Likewise.\n+\t* gcc.target/arm/neon/vbicQu64.c: Likewise.\n+\t* gcc.target/arm/neon/vbicQu8.c: Likewise.\n+\t* gcc.target/arm/neon/vbics16.c: Likewise.\n+\t* gcc.target/arm/neon/vbics32.c: Likewise.\n+\t* gcc.target/arm/neon/vbics64.c: Likewise.\n+\t* gcc.target/arm/neon/vbics8.c: Likewise.\n+\t* gcc.target/arm/neon/vbicu16.c: Likewise.\n+\t* gcc.target/arm/neon/vbicu32.c: Likewise.\n+\t* gcc.target/arm/neon/vbicu64.c: Likewise.\n+\t* gcc.target/arm/neon/vbicu8.c: Likewise.\n+\t* gcc.target/arm/neon/vornQs16.c: Likewise.\n+\t* gcc.target/arm/neon/vornQs32.c: Likewise.\n+\t* gcc.target/arm/neon/vornQs64.c: Likewise.\n+\t* gcc.target/arm/neon/vornQs8.c: Likewise.\n+\t* gcc.target/arm/neon/vornQu16.c: Likewise.\n+\t* gcc.target/arm/neon/vornQu32.c: Likewise.\n+\t* gcc.target/arm/neon/vornQu64.c: Likewise.\n+\t* gcc.target/arm/neon/vornQu8.c: Likewise.\n+\t* gcc.target/arm/neon/vorns16.c: Likewise.\n+\t* gcc.target/arm/neon/vorns32.c: Likewise.\n+\t* gcc.target/arm/neon/vorns64.c: Likewise.\n+\t* gcc.target/arm/neon/vorns8.c: Likewise.\n+\t* gcc.target/arm/neon/vornu16.c: Likewise.\n+\t* gcc.target/arm/neon/vornu32.c: Likewise.\n+\t* gcc.target/arm/neon/vornu64.c: Likewise.\n+\t* gcc.target/arm/neon/vornu8.c: Likewise.\n+\n 2014-11-18  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vcls.c: New test."}, {"sha": "c8c026f015f658aa2b0579b0a35c127c45cab70d", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQs16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs16.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+int16x8_t out_int16x8_t;\n+int16x8_t arg0_int16x8_t;\n+int16x8_t arg1_int16x8_t;\n void test_vbicQs16 (void)\n {\n-  int16x8_t out_int16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n \n   out_int16x8_t = vbicq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n }"}, {"sha": "3b858576ac120c9ca8685114371dd772b812500b", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQs32.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs32.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+int32x4_t out_int32x4_t;\n+int32x4_t arg0_int32x4_t;\n+int32x4_t arg1_int32x4_t;\n void test_vbicQs32 (void)\n {\n-  int32x4_t out_int32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n \n   out_int32x4_t = vbicq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n }"}, {"sha": "d71da8737a5e0e0b70b0206881f13349aed3f503", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQs64.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs64.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+int64x2_t out_int64x2_t;\n+int64x2_t arg0_int64x2_t;\n+int64x2_t arg1_int64x2_t;\n void test_vbicQs64 (void)\n {\n-  int64x2_t out_int64x2_t;\n-  int64x2_t arg0_int64x2_t;\n-  int64x2_t arg1_int64x2_t;\n \n   out_int64x2_t = vbicq_s64 (arg0_int64x2_t, arg1_int64x2_t);\n }"}, {"sha": "4cbfe9fde64f64794b395b8e131cd8ea1fa8ad43", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQs8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs8.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+int8x16_t out_int8x16_t;\n+int8x16_t arg0_int8x16_t;\n+int8x16_t arg1_int8x16_t;\n void test_vbicQs8 (void)\n {\n-  int8x16_t out_int8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-  int8x16_t arg1_int8x16_t;\n \n   out_int8x16_t = vbicq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n }"}, {"sha": "6661c510d804352e4a5881ab79328748b96e5902", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQu16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu16.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+uint16x8_t out_uint16x8_t;\n+uint16x8_t arg0_uint16x8_t;\n+uint16x8_t arg1_uint16x8_t;\n void test_vbicQu16 (void)\n {\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n \n   out_uint16x8_t = vbicq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n }"}, {"sha": "ca8391e92486cc8fc60dffa36d33286a19393333", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQu32.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu32.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+uint32x4_t out_uint32x4_t;\n+uint32x4_t arg0_uint32x4_t;\n+uint32x4_t arg1_uint32x4_t;\n void test_vbicQu32 (void)\n {\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n \n   out_uint32x4_t = vbicq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n }"}, {"sha": "d565333d6ec6876d20dedbe90ed7cca7e13cf510", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQu64.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu64.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+uint64x2_t out_uint64x2_t;\n+uint64x2_t arg0_uint64x2_t;\n+uint64x2_t arg1_uint64x2_t;\n void test_vbicQu64 (void)\n {\n-  uint64x2_t out_uint64x2_t;\n-  uint64x2_t arg0_uint64x2_t;\n-  uint64x2_t arg1_uint64x2_t;\n \n   out_uint64x2_t = vbicq_u64 (arg0_uint64x2_t, arg1_uint64x2_t);\n }"}, {"sha": "d9f18edb4902fee03891a9f24eff376df9319354", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQu8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu8.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+uint8x16_t out_uint8x16_t;\n+uint8x16_t arg0_uint8x16_t;\n+uint8x16_t arg1_uint8x16_t;\n void test_vbicQu8 (void)\n {\n-  uint8x16_t out_uint8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  uint8x16_t arg1_uint8x16_t;\n \n   out_uint8x16_t = vbicq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n }"}, {"sha": "7247878fa704415c7d19d5ff332efe9f096ef79e", "filename": "gcc/testsuite/gcc.target/arm/neon/vbics16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics16.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+int16x4_t out_int16x4_t;\n+int16x4_t arg0_int16x4_t;\n+int16x4_t arg1_int16x4_t;\n void test_vbics16 (void)\n {\n-  int16x4_t out_int16x4_t;\n-  int16x4_t arg0_int16x4_t;\n-  int16x4_t arg1_int16x4_t;\n \n   out_int16x4_t = vbic_s16 (arg0_int16x4_t, arg1_int16x4_t);\n }"}, {"sha": "585d2ef16dc86e2506523b74d2545b4a7cd6dc13", "filename": "gcc/testsuite/gcc.target/arm/neon/vbics32.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics32.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+int32x2_t out_int32x2_t;\n+int32x2_t arg0_int32x2_t;\n+int32x2_t arg1_int32x2_t;\n void test_vbics32 (void)\n {\n-  int32x2_t out_int32x2_t;\n-  int32x2_t arg0_int32x2_t;\n-  int32x2_t arg1_int32x2_t;\n \n   out_int32x2_t = vbic_s32 (arg0_int32x2_t, arg1_int32x2_t);\n }"}, {"sha": "8932a287138e7c5eaefa52f4c26d536b3e053377", "filename": "gcc/testsuite/gcc.target/arm/neon/vbics64.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics64.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+int64x1_t out_int64x1_t;\n+int64x1_t arg0_int64x1_t;\n+int64x1_t arg1_int64x1_t;\n void test_vbics64 (void)\n {\n-  int64x1_t out_int64x1_t;\n-  int64x1_t arg0_int64x1_t;\n-  int64x1_t arg1_int64x1_t;\n \n   out_int64x1_t = vbic_s64 (arg0_int64x1_t, arg1_int64x1_t);\n }"}, {"sha": "9a1839a1c8af8ad83adcd199f2efdb205f4e67f1", "filename": "gcc/testsuite/gcc.target/arm/neon/vbics8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics8.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+int8x8_t out_int8x8_t;\n+int8x8_t arg0_int8x8_t;\n+int8x8_t arg1_int8x8_t;\n void test_vbics8 (void)\n {\n-  int8x8_t out_int8x8_t;\n-  int8x8_t arg0_int8x8_t;\n-  int8x8_t arg1_int8x8_t;\n \n   out_int8x8_t = vbic_s8 (arg0_int8x8_t, arg1_int8x8_t);\n }"}, {"sha": "3f3002b7af73f03d0bf517d6fdb454a09436b927", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicu16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu16.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+uint16x4_t out_uint16x4_t;\n+uint16x4_t arg0_uint16x4_t;\n+uint16x4_t arg1_uint16x4_t;\n void test_vbicu16 (void)\n {\n-  uint16x4_t out_uint16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n \n   out_uint16x4_t = vbic_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n }"}, {"sha": "0653d6df0386947c1838fd966c52d1699c53c41b", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicu32.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu32.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+uint32x2_t out_uint32x2_t;\n+uint32x2_t arg0_uint32x2_t;\n+uint32x2_t arg1_uint32x2_t;\n void test_vbicu32 (void)\n {\n-  uint32x2_t out_uint32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n \n   out_uint32x2_t = vbic_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n }"}, {"sha": "7d0571388a55b072bb28c0116e24c25ceda787cd", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicu64.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu64.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+uint64x1_t out_uint64x1_t;\n+uint64x1_t arg0_uint64x1_t;\n+uint64x1_t arg1_uint64x1_t;\n void test_vbicu64 (void)\n {\n-  uint64x1_t out_uint64x1_t;\n-  uint64x1_t arg0_uint64x1_t;\n-  uint64x1_t arg1_uint64x1_t;\n \n   out_uint64x1_t = vbic_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n }"}, {"sha": "10c70b0b0eb05029aa65aa0702addd39a6ddefe1", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicu8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu8.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+uint8x8_t out_uint8x8_t;\n+uint8x8_t arg0_uint8x8_t;\n+uint8x8_t arg1_uint8x8_t;\n void test_vbicu8 (void)\n {\n-  uint8x8_t out_uint8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n \n   out_uint8x8_t = vbic_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n }"}, {"sha": "2e6356437850b8e899446016c293b06fb8336685", "filename": "gcc/testsuite/gcc.target/arm/neon/vornQs16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQs16.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+int16x8_t out_int16x8_t;\n+int16x8_t arg0_int16x8_t;\n+int16x8_t arg1_int16x8_t;\n void test_vornQs16 (void)\n {\n-  int16x8_t out_int16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n \n   out_int16x8_t = vornq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n }"}, {"sha": "339514b7c888c5c6163c20cd8f74458db55b52bf", "filename": "gcc/testsuite/gcc.target/arm/neon/vornQs32.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQs32.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+int32x4_t out_int32x4_t;\n+int32x4_t arg0_int32x4_t;\n+int32x4_t arg1_int32x4_t;\n void test_vornQs32 (void)\n {\n-  int32x4_t out_int32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n \n   out_int32x4_t = vornq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n }"}, {"sha": "64d62698f3ec49a4fe93bb5f0170299ae689e83d", "filename": "gcc/testsuite/gcc.target/arm/neon/vornQs64.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQs64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQs64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQs64.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+int64x2_t out_int64x2_t;\n+int64x2_t arg0_int64x2_t;\n+int64x2_t arg1_int64x2_t;\n void test_vornQs64 (void)\n {\n-  int64x2_t out_int64x2_t;\n-  int64x2_t arg0_int64x2_t;\n-  int64x2_t arg1_int64x2_t;\n \n   out_int64x2_t = vornq_s64 (arg0_int64x2_t, arg1_int64x2_t);\n }"}, {"sha": "c8b1ed2624d007d9f200eefcec8aff7d8d807437", "filename": "gcc/testsuite/gcc.target/arm/neon/vornQs8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQs8.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+int8x16_t out_int8x16_t;\n+int8x16_t arg0_int8x16_t;\n+int8x16_t arg1_int8x16_t;\n void test_vornQs8 (void)\n {\n-  int8x16_t out_int8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-  int8x16_t arg1_int8x16_t;\n \n   out_int8x16_t = vornq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n }"}, {"sha": "c0663672087653d8624bcfe6263126e7070b3ba1", "filename": "gcc/testsuite/gcc.target/arm/neon/vornQu16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQu16.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+uint16x8_t out_uint16x8_t;\n+uint16x8_t arg0_uint16x8_t;\n+uint16x8_t arg1_uint16x8_t;\n void test_vornQu16 (void)\n {\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n \n   out_uint16x8_t = vornq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n }"}, {"sha": "7a278e07b000273d01b1634c0ae330860460b682", "filename": "gcc/testsuite/gcc.target/arm/neon/vornQu32.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQu32.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+uint32x4_t out_uint32x4_t;\n+uint32x4_t arg0_uint32x4_t;\n+uint32x4_t arg1_uint32x4_t;\n void test_vornQu32 (void)\n {\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n \n   out_uint32x4_t = vornq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n }"}, {"sha": "7948e10e290806ac687ef2ae47fe8fad9519da7d", "filename": "gcc/testsuite/gcc.target/arm/neon/vornQu64.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQu64.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+uint64x2_t out_uint64x2_t;\n+uint64x2_t arg0_uint64x2_t;\n+uint64x2_t arg1_uint64x2_t;\n void test_vornQu64 (void)\n {\n-  uint64x2_t out_uint64x2_t;\n-  uint64x2_t arg0_uint64x2_t;\n-  uint64x2_t arg1_uint64x2_t;\n \n   out_uint64x2_t = vornq_u64 (arg0_uint64x2_t, arg1_uint64x2_t);\n }"}, {"sha": "31aa62cbd22cfc707c4351e048063fbd11ed20c2", "filename": "gcc/testsuite/gcc.target/arm/neon/vornQu8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvornQu8.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+uint8x16_t out_uint8x16_t;\n+uint8x16_t arg0_uint8x16_t;\n+uint8x16_t arg1_uint8x16_t;\n void test_vornQu8 (void)\n {\n-  uint8x16_t out_uint8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  uint8x16_t arg1_uint8x16_t;\n \n   out_uint8x16_t = vornq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n }"}, {"sha": "375a0e99761faf9f47f1897d7fa6d590a02ae344", "filename": "gcc/testsuite/gcc.target/arm/neon/vorns16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorns16.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+int16x4_t out_int16x4_t;\n+int16x4_t arg0_int16x4_t;\n+int16x4_t arg1_int16x4_t;\n void test_vorns16 (void)\n {\n-  int16x4_t out_int16x4_t;\n-  int16x4_t arg0_int16x4_t;\n-  int16x4_t arg1_int16x4_t;\n \n   out_int16x4_t = vorn_s16 (arg0_int16x4_t, arg1_int16x4_t);\n }"}, {"sha": "502b9acfbf53dd235aaed55a9827fea0142cbed6", "filename": "gcc/testsuite/gcc.target/arm/neon/vorns32.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorns32.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+int32x2_t out_int32x2_t;\n+int32x2_t arg0_int32x2_t;\n+int32x2_t arg1_int32x2_t;\n void test_vorns32 (void)\n {\n-  int32x2_t out_int32x2_t;\n-  int32x2_t arg0_int32x2_t;\n-  int32x2_t arg1_int32x2_t;\n \n   out_int32x2_t = vorn_s32 (arg0_int32x2_t, arg1_int32x2_t);\n }"}, {"sha": "090e9d44fab576036c3614276e237736da2851c2", "filename": "gcc/testsuite/gcc.target/arm/neon/vorns64.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorns64.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+int64x1_t out_int64x1_t;\n+int64x1_t arg0_int64x1_t;\n+int64x1_t arg1_int64x1_t;\n void test_vorns64 (void)\n {\n-  int64x1_t out_int64x1_t;\n-  int64x1_t arg0_int64x1_t;\n-  int64x1_t arg1_int64x1_t;\n \n   out_int64x1_t = vorn_s64 (arg0_int64x1_t, arg1_int64x1_t);\n }"}, {"sha": "d50afc8a263fb0f930dde375aa701aa6b17e81aa", "filename": "gcc/testsuite/gcc.target/arm/neon/vorns8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorns8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorns8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorns8.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+int8x8_t out_int8x8_t;\n+int8x8_t arg0_int8x8_t;\n+int8x8_t arg1_int8x8_t;\n void test_vorns8 (void)\n {\n-  int8x8_t out_int8x8_t;\n-  int8x8_t arg0_int8x8_t;\n-  int8x8_t arg1_int8x8_t;\n \n   out_int8x8_t = vorn_s8 (arg0_int8x8_t, arg1_int8x8_t);\n }"}, {"sha": "d20bffc272eb5f95bc23f107e579c9880ec19c27", "filename": "gcc/testsuite/gcc.target/arm/neon/vornu16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvornu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvornu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvornu16.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+uint16x4_t out_uint16x4_t;\n+uint16x4_t arg0_uint16x4_t;\n+uint16x4_t arg1_uint16x4_t;\n void test_vornu16 (void)\n {\n-  uint16x4_t out_uint16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n \n   out_uint16x4_t = vorn_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n }"}, {"sha": "f17394f5bb828dbeb5791b48a7b47dcbc65149d3", "filename": "gcc/testsuite/gcc.target/arm/neon/vornu32.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvornu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvornu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvornu32.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+uint32x2_t out_uint32x2_t;\n+uint32x2_t arg0_uint32x2_t;\n+uint32x2_t arg1_uint32x2_t;\n void test_vornu32 (void)\n {\n-  uint32x2_t out_uint32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n \n   out_uint32x2_t = vorn_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n }"}, {"sha": "86af5c56f9bbaac8f5677594abc05e0ba44a2e55", "filename": "gcc/testsuite/gcc.target/arm/neon/vornu64.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvornu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvornu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvornu64.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+uint64x1_t out_uint64x1_t;\n+uint64x1_t arg0_uint64x1_t;\n+uint64x1_t arg1_uint64x1_t;\n void test_vornu64 (void)\n {\n-  uint64x1_t out_uint64x1_t;\n-  uint64x1_t arg0_uint64x1_t;\n-  uint64x1_t arg1_uint64x1_t;\n \n   out_uint64x1_t = vorn_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n }"}, {"sha": "347f9c8fc934e21652f50c6586aaaa1091500f44", "filename": "gcc/testsuite/gcc.target/arm/neon/vornu8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvornu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8196921610abdf83eadb294945fd63bddfbf87f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvornu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvornu8.c?ref=c8196921610abdf83eadb294945fd63bddfbf87f", "patch": "@@ -3,16 +3,16 @@\n \n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-options \"-save-temps -O2\" } */\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n \n+uint8x8_t out_uint8x8_t;\n+uint8x8_t arg0_uint8x8_t;\n+uint8x8_t arg1_uint8x8_t;\n void test_vornu8 (void)\n {\n-  uint8x8_t out_uint8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n \n   out_uint8x8_t = vorn_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n }"}]}