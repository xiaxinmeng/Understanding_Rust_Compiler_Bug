{"sha": "15e2a6c05ec5a600a8263ba1812d5dead9ba4aaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVlMmE2YzA1ZWM1YTYwMGE4MjYzYmExODEyZDVkZWFkOWJhNGFhZg==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@kit.edu", "date": "2009-10-28T10:04:03Z"}, "committer": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2009-10-28T10:04:03Z"}, "message": "re PR libstdc++/40852 ([parallel-mode] parallel sort run time increases ~10 fold when vector size gets over ~4*10^9)\n\n2009-10-28  Johannes Singler  <singler@kit.edu>\n\n        PR libstdc++/40852\n        * include/parallel/multiseq_selection.h\n        (multiseq_partition, multiseq_selection):  Avoid intermediate\n        values exceeding the integer type range for very large inputs.\n\nFrom-SVN: r153648", "tree": {"sha": "64e54bb79d451d3556a6bdfea473a74a179f613c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64e54bb79d451d3556a6bdfea473a74a179f613c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15e2a6c05ec5a600a8263ba1812d5dead9ba4aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e2a6c05ec5a600a8263ba1812d5dead9ba4aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15e2a6c05ec5a600a8263ba1812d5dead9ba4aaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e2a6c05ec5a600a8263ba1812d5dead9ba4aaf/comments", "author": null, "committer": null, "parents": [{"sha": "533d4b998d2161784cc6601bd71901ca0ddb14cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/533d4b998d2161784cc6601bd71901ca0ddb14cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/533d4b998d2161784cc6601bd71901ca0ddb14cc"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "8abe9b9e38f7faeff594087717dd498800fd9833", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e2a6c05ec5a600a8263ba1812d5dead9ba4aaf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e2a6c05ec5a600a8263ba1812d5dead9ba4aaf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=15e2a6c05ec5a600a8263ba1812d5dead9ba4aaf", "patch": "@@ -1,3 +1,10 @@\n+2009-10-28  Johannes Singler  <singler@kit.edu>\n+\n+\tPR libstdc++/40852\n+\t* include/parallel/multiseq_selection.h \n+\t(multiseq_partition, multiseq_selection):  Avoid intermediate \n+\tvalues exceeding the integer type range for very large inputs.\n+\n 2009-10-26  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/chrono (duration<>::duration(const duration<>&)): Fix"}, {"sha": "ac06385b44ba27dd6767c9c58fe12402d928b861", "filename": "libstdc++-v3/include/parallel/multiseq_selection.h", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e2a6c05ec5a600a8263ba1812d5dead9ba4aaf/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e2a6c05ec5a600a8263ba1812d5dead9ba4aaf/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h?ref=15e2a6c05ec5a600a8263ba1812d5dead9ba4aaf", "patch": "@@ -187,9 +187,6 @@ namespace __gnu_parallel\n       // equality iff __nmax = 2^__k - 1.\n       __l = (1ULL << __r) - 1;\n \n-      // From now on, including padding.\n-      __N = __l * __m;\n-\n       for (int __i = 0; __i < __m; __i++)\n         {\n           __a[__i] = 0;\n@@ -215,7 +212,7 @@ namespace __gnu_parallel\n           __sample.push_back(\n             std::make_pair(__S(__i)[0] /*__dummy element*/, __i));\n \n-      _DifferenceType __localrank = __rank * __m / __N ;\n+      _DifferenceType __localrank = __rank / __l;\n \n       int __j;\n       for (__j = 0;\n@@ -265,15 +262,11 @@ namespace __gnu_parallel\n                 __b[__i] -= __n + 1;\n             }\n \n-          _DifferenceType __leftsize = 0, __total = 0;\n+          _DifferenceType __leftsize = 0;\n           for (int __i = 0; __i < __m; __i++)\n-            {\n               __leftsize += __a[__i] / (__n + 1);\n-              __total += __l / (__n + 1);\n-            }\n-          \n-          _DifferenceType __skew = static_cast<_DifferenceType>\n-            (static_cast<uint64_t>(__total) * __rank / __N - __leftsize);\n+\n+          _DifferenceType __skew = __rank / (__n + 1) - __leftsize;\n \n           if (__skew > 0)\n             {\n@@ -442,9 +435,6 @@ namespace __gnu_parallel\n       // equality iff __nmax = 2^__k - 1\n       __l = pow2(__r) - 1;\n \n-      // From now on, including padding.\n-      __N = __l * __m;\n-\n       for (int __i = 0; __i < __m; ++__i)\n         {\n           __a[__i] = 0;\n@@ -472,7 +462,7 @@ namespace __gnu_parallel\n           __sample.push_back(\n             std::make_pair(__S(__i)[0] /*__dummy element*/, __i));\n \n-      _DifferenceType __localrank = __rank * __m / __N ;\n+      _DifferenceType __localrank = __rank / __l;\n \n       int __j;\n       for (__j = 0;\n@@ -513,15 +503,11 @@ namespace __gnu_parallel\n                 __b[__i] -= __n + 1;\n             }\n \n-          _DifferenceType __leftsize = 0, __total = 0;\n+          _DifferenceType __leftsize = 0;\n           for (int __i = 0; __i < __m; ++__i)\n-            {\n               __leftsize += __a[__i] / (__n + 1);\n-              __total += __l / (__n + 1);\n-            }\n \n-          _DifferenceType __skew = ((unsigned long long)__total * __rank / __N\n-                                  - __leftsize);\n+          _DifferenceType __skew = __rank / (__n + 1) - __leftsize;\n \n           if (__skew > 0)\n             {"}]}