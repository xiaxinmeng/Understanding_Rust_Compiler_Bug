{"sha": "f974a7b3ecd0c3a0676dc7413af2e8faef005add", "node_id": "C_kwDOANBUbNoAKGY5NzRhN2IzZWNkMGMzYTA2NzZkYzc0MTNhZjJlOGZhZWYwMDVhZGQ", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-16T13:40:05Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:09:22Z"}, "message": "arm: improve tests for vqdmlahq_m*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s8.c: Likewise.", "tree": {"sha": "32434e02d549d4b81b0f17cafb04e9e65384d390", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32434e02d549d4b81b0f17cafb04e9e65384d390"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f974a7b3ecd0c3a0676dc7413af2e8faef005add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f974a7b3ecd0c3a0676dc7413af2e8faef005add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f974a7b3ecd0c3a0676dc7413af2e8faef005add", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f974a7b3ecd0c3a0676dc7413af2e8faef005add/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a"}], "stats": {"total": 348, "additions": 264, "deletions": 84}, "files": [{"sha": "94d938745422a4f93f51be03affc67a305018350", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s16.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s16.c?ref=f974a7b3ecd0c3a0676dc7413af2e8faef005add", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlaht.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n-foo (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+foo (int16x8_t add, int16x8_t m1, int16_t m2, mve_pred16_t p)\n {\n-  return vqdmlahq_m_n_s16 (a, b, c, p);\n+  return vqdmlahq_m_n_s16 (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlaht.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlaht.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n-foo1 (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+foo1 (int16x8_t add, int16x8_t m1, int16_t m2, mve_pred16_t p)\n {\n-  return vqdmlahq_m (a, b, c, p);\n+  return vqdmlahq_m (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlaht.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a3dab7fa02eb85a44ee186d847f4a96ad8ec43f1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s32.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s32.c?ref=f974a7b3ecd0c3a0676dc7413af2e8faef005add", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlaht.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n-foo (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+foo (int32x4_t add, int32x4_t m1, int32_t m2, mve_pred16_t p)\n {\n-  return vqdmlahq_m_n_s32 (a, b, c, p);\n+  return vqdmlahq_m_n_s32 (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlaht.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlaht.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n-foo1 (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+foo1 (int32x4_t add, int32x4_t m1, int32_t m2, mve_pred16_t p)\n {\n-  return vqdmlahq_m (a, b, c, p);\n+  return vqdmlahq_m (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlaht.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "610580478a31002b8be1a97df674b0cc3fce5caa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s8.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s8.c?ref=f974a7b3ecd0c3a0676dc7413af2e8faef005add", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlaht.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n-foo (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+foo (int8x16_t add, int8x16_t m1, int8_t m2, mve_pred16_t p)\n {\n-  return vqdmlahq_m_n_s8 (a, b, c, p);\n+  return vqdmlahq_m_n_s8 (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlaht.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlaht.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n-foo1 (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+foo1 (int8x16_t add, int8x16_t m1, int8_t m2, mve_pred16_t p)\n {\n-  return vqdmlahq_m (a, b, c, p);\n+  return vqdmlahq_m (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlaht.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "210bacec2fbf1314339212152ea68428e41bf4eb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_n_s16.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s16.c?ref=f974a7b3ecd0c3a0676dc7413af2e8faef005add", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqdmlah.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n-foo (int16x8_t a, int16x8_t b, int16_t c)\n+foo (int16x8_t add, int16x8_t m1, int16_t m2)\n {\n-  return vqdmlahq_n_s16 (a, b, c);\n+  return vqdmlahq_n_s16 (add, m1, m2);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlah.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqdmlah.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n-foo1 (int16x8_t a, int16x8_t b, int16_t c)\n+foo1 (int16x8_t add, int16x8_t m1, int16_t m2)\n {\n-  return vqdmlahq (a, b, c);\n+  return vqdmlahq (add, m1, m2);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlah.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "dbb2494b216639d092a58b60efe67e1e4526587a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_n_s32.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s32.c?ref=f974a7b3ecd0c3a0676dc7413af2e8faef005add", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqdmlah.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n-foo (int32x4_t a, int32x4_t b, int32_t c)\n+foo (int32x4_t add, int32x4_t m1, int32_t m2)\n {\n-  return vqdmlahq_n_s32 (a, b, c);\n+  return vqdmlahq_n_s32 (add, m1, m2);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlah.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqdmlah.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n-foo1 (int32x4_t a, int32x4_t b, int32_t c)\n+foo1 (int32x4_t add, int32x4_t m1, int32_t m2)\n {\n-  return vqdmlahq (a, b, c);\n+  return vqdmlahq (add, m1, m2);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlah.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a7962f82d385a5a909572f29db91aeb278871a48", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_n_s8.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s8.c?ref=f974a7b3ecd0c3a0676dc7413af2e8faef005add", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqdmlah.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n-foo (int8x16_t a, int8x16_t b, int8_t c)\n+foo (int8x16_t add, int8x16_t m1, int8_t m2)\n {\n-  return vqdmlahq_n_s8 (a, b, c);\n+  return vqdmlahq_n_s8 (add, m1, m2);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlah.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqdmlah.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n-foo1 (int8x16_t a, int8x16_t b, int8_t c)\n+foo1 (int8x16_t add, int8x16_t m1, int8_t m2)\n {\n-  return vqdmlahq (a, b, c);\n+  return vqdmlahq (add, m1, m2);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlah.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "34d407f014298b188717f8547b966a70e925e564", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s16.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s16.c?ref=f974a7b3ecd0c3a0676dc7413af2e8faef005add", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlasht.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n-foo (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+foo (int16x8_t m1, int16x8_t m2, int16_t add, mve_pred16_t p)\n {\n-  return vqdmlashq_m_n_s16 (a, b, c, p);\n+  return vqdmlashq_m_n_s16 (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlasht.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlasht.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n-foo1 (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+foo1 (int16x8_t m1, int16x8_t m2, int16_t add, mve_pred16_t p)\n {\n-  return vqdmlashq_m (a, b, c, p);\n+  return vqdmlashq_m (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlasht.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "50a665ea7e5112ea7b148dfaaef87c26c875969c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s32.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s32.c?ref=f974a7b3ecd0c3a0676dc7413af2e8faef005add", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlasht.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n-foo (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+foo (int32x4_t m1, int32x4_t m2, int32_t add, mve_pred16_t p)\n {\n-  return vqdmlashq_m_n_s32 (a, b, c, p);\n+  return vqdmlashq_m_n_s32 (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlasht.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlasht.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n-foo1 (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+foo1 (int32x4_t m1, int32x4_t m2, int32_t add, mve_pred16_t p)\n {\n-  return vqdmlashq_m (a, b, c, p);\n+  return vqdmlashq_m (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlasht.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "45f34b603826328d74141cbeb1af399b3a783ea0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s8.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s8.c?ref=f974a7b3ecd0c3a0676dc7413af2e8faef005add", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlasht.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n-foo (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+foo (int8x16_t m1, int8x16_t m2, int8_t add, mve_pred16_t p)\n {\n-  return vqdmlashq_m_n_s8 (a, b, c, p);\n+  return vqdmlashq_m_n_s8 (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlasht.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlasht.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n-foo1 (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+foo1 (int8x16_t m1, int8x16_t m2, int8_t add, mve_pred16_t p)\n {\n-  return vqdmlashq_m (a, b, c, p);\n+  return vqdmlashq_m (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlasht.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a3f1ae8d6b8d3e114d3ce2dfb8146bb30af5afaa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlashq_n_s16.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s16.c?ref=f974a7b3ecd0c3a0676dc7413af2e8faef005add", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqdmlash.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n-foo (int16x8_t a, int16x8_t b, int16_t c)\n+foo (int16x8_t m1, int16x8_t m2, int16_t add)\n {\n-  return vqdmlashq_n_s16 (a, b, c);\n+  return vqdmlashq_n_s16 (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlash.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqdmlash.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n-foo1 (int16x8_t a, int16x8_t b, int16_t c)\n+foo1 (int16x8_t m1, int16x8_t m2, int16_t add)\n {\n-  return vqdmlashq (a, b, c);\n+  return vqdmlashq (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlash.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "cf867e56874322be06896dc538ade630b099890b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlashq_n_s32.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s32.c?ref=f974a7b3ecd0c3a0676dc7413af2e8faef005add", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqdmlash.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n-foo (int32x4_t a, int32x4_t b, int32_t c)\n+foo (int32x4_t m1, int32x4_t m2, int32_t add)\n {\n-  return vqdmlashq_n_s32 (a, b, c);\n+  return vqdmlashq_n_s32 (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlash.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqdmlash.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n-foo1 (int32x4_t a, int32x4_t b, int32_t c)\n+foo1 (int32x4_t m1, int32x4_t m2, int32_t add)\n {\n-  return vqdmlashq (a, b, c);\n+  return vqdmlashq (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlash.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7e9362cab605a1f8bd3bd06da1bae253410d5eaf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlashq_n_s8.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974a7b3ecd0c3a0676dc7413af2e8faef005add/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s8.c?ref=f974a7b3ecd0c3a0676dc7413af2e8faef005add", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqdmlash.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n-foo (int8x16_t a, int8x16_t b, int8_t c)\n+foo (int8x16_t m1, int8x16_t m2, int8_t add)\n {\n-  return vqdmlashq_n_s8 (a, b, c);\n+  return vqdmlashq_n_s8 (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlash.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqdmlash.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n-foo1 (int8x16_t a, int8x16_t b, int8_t c)\n+foo1 (int8x16_t m1, int8x16_t m2, int8_t add)\n {\n-  return vqdmlashq (a, b, c);\n+  return vqdmlashq (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlash.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}