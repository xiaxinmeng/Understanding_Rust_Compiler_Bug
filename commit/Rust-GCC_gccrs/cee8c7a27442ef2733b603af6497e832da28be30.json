{"sha": "cee8c7a27442ef2733b603af6497e832da28be30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VlOGM3YTI3NDQyZWYyNzMzYjYwM2FmNjQ5N2U4MzJkYTI4YmUzMA==", "commit": {"author": {"name": "Jeffrey Yasskin", "email": "jyasskin@gcc.gnu.org", "date": "2012-02-05T12:58:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-02-05T12:58:51Z"}, "message": "re PR c++/52119 ([C++11] overflow in signed left shift isn't diagnosed)\n\n2012-02-05  Jeffrey Yasskin  <jyasskin@gcc.gnu.org>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/52119\n\t* include/std/limits (__glibcxx_min): Fix to avoid undefined behavior.\n\nFrom-SVN: r183905", "tree": {"sha": "f4da6d6cd4e6a2187bc2b2a1b9659e75a82df0ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4da6d6cd4e6a2187bc2b2a1b9659e75a82df0ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cee8c7a27442ef2733b603af6497e832da28be30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cee8c7a27442ef2733b603af6497e832da28be30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cee8c7a27442ef2733b603af6497e832da28be30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cee8c7a27442ef2733b603af6497e832da28be30/comments", "author": null, "committer": null, "parents": [{"sha": "b1c02fdc550e83ba4dbb907cce1808fac2f0ecef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c02fdc550e83ba4dbb907cce1808fac2f0ecef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c02fdc550e83ba4dbb907cce1808fac2f0ecef"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "96125f95dc3df4e9f8516361e3f81767aa748d3d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cee8c7a27442ef2733b603af6497e832da28be30/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cee8c7a27442ef2733b603af6497e832da28be30/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cee8c7a27442ef2733b603af6497e832da28be30", "patch": "@@ -1,3 +1,9 @@\n+2012-02-05  Jeffrey Yasskin  <jyasskin@gcc.gnu.org>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/52119\n+\t* include/std/limits (__glibcxx_min): Fix to avoid undefined behavior.\n+\n 2012-02-03  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/49445\n@@ -97,7 +103,7 @@\n \tPR libstdc++/51795\n \t* include/bits/random.h (linear_congruential_generator): Add\n \tstatic_assert preventing instantiation for values of 'a' and 'm'\n-\tcurrently handled incorrectly but _Mod::__calc.\n+\tcurrently handled incorrectly by _Mod::__calc.\n \t* include/bits/random.tcc (seed_seq::generate): Avoid unsafe\n \tuses of _Mod::__calc.\n "}, {"sha": "ea37d9d20cd592dc8cfdf9472cce30b2abf4a240", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cee8c7a27442ef2733b603af6497e832da28be30/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cee8c7a27442ef2733b603af6497e832da28be30/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=cee8c7a27442ef2733b603af6497e832da28be30", "patch": "@@ -1,7 +1,7 @@\n // The template and inlines for the numeric_limits classes. -*- C++ -*-\n \n // Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n-// 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -129,7 +129,7 @@\n #define __glibcxx_signed(T)\t((T)(-1) < 0)\n \n #define __glibcxx_min(T) \\\n-  (__glibcxx_signed (T) ? (T)1 << __glibcxx_digits (T) : (T)0)\n+  (__glibcxx_signed (T) ? -__glibcxx_max (T) - 1 : (T)0)\n \n #define __glibcxx_max(T) \\\n   (__glibcxx_signed (T) ? \\"}]}