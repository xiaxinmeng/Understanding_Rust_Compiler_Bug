{"sha": "7192e1387baa0b2d9541b1b1a3da9451461cc23c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE5MmUxMzg3YmFhMGIyZDk1NDFiMWIxYTNkYTk0NTE0NjFjYzIzYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-10-17T17:40:12Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-10-17T17:40:12Z"}, "message": "dump.c (dequeue_and_dump): Handle CLEANUP_POINT_EXPR.\n\n\t* dump.c (dequeue_and_dump): Handle CLEANUP_POINT_EXPR.\n\n\t* ir.texi: Clean up documentation of RETURN_INIT.\n\nFrom-SVN: r30056", "tree": {"sha": "65d9d88b0479b1de4cb21d346ad253009d75775f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65d9d88b0479b1de4cb21d346ad253009d75775f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7192e1387baa0b2d9541b1b1a3da9451461cc23c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7192e1387baa0b2d9541b1b1a3da9451461cc23c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7192e1387baa0b2d9541b1b1a3da9451461cc23c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7192e1387baa0b2d9541b1b1a3da9451461cc23c/comments", "author": null, "committer": null, "parents": [{"sha": "a42cd965521407872308f03bea01f1bb5bd8303d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42cd965521407872308f03bea01f1bb5bd8303d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a42cd965521407872308f03bea01f1bb5bd8303d"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "996d713a71a96fd9a94c99179f7af970e8275b03", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7192e1387baa0b2d9541b1b1a3da9451461cc23c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7192e1387baa0b2d9541b1b1a3da9451461cc23c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7192e1387baa0b2d9541b1b1a3da9451461cc23c", "patch": "@@ -1,3 +1,9 @@\n+1999-10-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* dump.c (dequeue_and_dump): Handle CLEANUP_POINT_EXPR.\n+\n+\t* ir.texi: Clean up documentation of RETURN_INIT.\n+\t\n 1999-10-15  Greg McGary  <gkm@gnu.org>\n \n \t* lex.c (lang_init_options): Set flag_bounds_check as \"unspecified\"."}, {"sha": "6ba83213f556d8e941f474b6562474a4e8308776", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7192e1387baa0b2d9541b1b1a3da9451461cc23c/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7192e1387baa0b2d9541b1b1a3da9451461cc23c/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=7192e1387baa0b2d9541b1b1a3da9451461cc23c", "patch": "@@ -773,6 +773,7 @@ dequeue_and_dump (di)\n     case ADDR_EXPR:\n     case INDIRECT_REF:\n     case THROW_EXPR:\n+    case CLEANUP_POINT_EXPR:\n       /* These nodes are unary, but do not have code class `1'.  */\n       dump_child (\"op 0\", TREE_OPERAND (t, 0));\n       break;"}, {"sha": "df9c5db278029b12c1b80d92168f9c0fbec1eb9b", "filename": "gcc/cp/ir.texi", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7192e1387baa0b2d9541b1b1a3da9451461cc23c/gcc%2Fcp%2Fir.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7192e1387baa0b2d9541b1b1a3da9451461cc23c/gcc%2Fcp%2Fir.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fir.texi?ref=7192e1387baa0b2d9541b1b1a3da9451461cc23c", "patch": "@@ -1124,22 +1124,7 @@ use of the particular value given by @code{DECL_INITIAL}.\n The @code{DECL_SAVED_TREE} macro will give the complete body of the\n function.  This node will usually be a @code{COMPOUND_STMT} representing\n the outermost block of the function, but it may also be a\n-@code{TRY_BLOCK} or a @code{RETURN_INIT}.\n-\n-If the function has a function try-block, the @code{DECL_SAVED_TREE}\n-will be a @code{TRY_BLOCK}.  The @code{TRY_STMTS} will then be either a\n-@code{RETURN_INIT}, or a @code{COMPOUND_STMT}.\n-\n-If the function uses the G++ ``named return value'' extension, meaning\n-that the function has been defined like:\n-@example\n-S f(int) return s @{...@}\n-@end example\n-the @code{DECL_SAVED_TREE} will be a @code{RETURN_INIT}.  The\n-@code{TREE_CHAIN} of the @code{RETURN_INIT} will be the\n-@code{COMPOUND_STMT} representing the body of the function.  There is\n-never a named returned value for a constructor.  FIXME: Document how the\n-@code{RETURN_INIT} can be used.\n+@code{TRY_BLOCK}, a @code{RETURN_INIT}, or any other valid statement.\n \n @subsection Statements\n \n@@ -1343,6 +1328,22 @@ statement can be obtained with the @code{LABEL_STMT_LABEL} macro.  The\n @code{IDENTIFIER_NODE} giving the name of the label can be obtained from\n the @code{LABEL_DECL} with @code{DECL_NAME}.\n \n+@item RETURN_INIT\n+\n+If the function uses the G++ ``named return value'' extension, meaning\n+that the function has been defined like:\n+@example\n+S f(int) return s @{...@}\n+@end example\n+then there will be a @code{RETURN_INIT}.  There is never a named\n+returned value for a constructor.  The first argument to the\n+@code{RETURN_INIT} is the name of the object returned; the second\n+argument is the initializer for the object.  The object is initialized\n+when the @code{RETURN_INIT} is encountered.  The object referred to is\n+the actual object returned; this extension is a manual way of doing the\n+``return-value optimization.''  Therefore, the object must actually be\n+constructed in the place where the object will be returned.\n+\n @item RETURN_STMT\n \n Used to represent a @code{return} statement.  The @code{RETURN_EXPR} is"}]}