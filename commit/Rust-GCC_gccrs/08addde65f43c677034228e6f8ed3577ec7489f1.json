{"sha": "08addde65f43c677034228e6f8ed3577ec7489f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhhZGRkZTY1ZjQzYzY3NzAzNDIyOGU2ZjhlZDM1NzdlYzc0ODlmMQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-06-10T21:52:25Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-06-10T21:52:25Z"}, "message": "BUGS: Update from 2.90.8 snapshot.\n\n2003-06-10  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* docs/html/17_intro/BUGS:  Update from 2.90.8 snapshot.\n\t* docs/html/17_intro/CHECKLIST:  Bring up to date with respect to\n\tcorrectness of container::iterator typedefs.  Fix whitespace.\n\t* docs/html/20_util/howto.html, docs/html/ext/howto.html:  Add links\n\tto allocator docs.\n\t* docs/html/documentation.html:  Regenerate.\n\n\t* include/bits/basic_string.h, include/bits/basic_string.tcc,\n\tinclude/bits/deque.tcc, include/bits/list.tcc, include/bits/stl_algo.h,\n\tinclude/bits/stl_algobase.h, include/bits/stl_bvector.h,\n\tinclude/bits/stl_deque.h, include/bits/stl_iterator_base_funcs.h,\n\tinclude/bits/stl_list.h, include/bits/stl_uninitialized.h,\n\tinclude/bits/stl_vector.h, include/bits/vector.tcc,\n\tinclude/ext/algorithm, include/ext/slist, include/std/std_bitset.h:\n\tChange _Iter names to _Iterator, and __pos to __position.\n\n\t* include/bits/stl_relops.h, include/bits/stl_numeric.h,\n\tinclude/bits/stl_multiset.h, include/bits/stl_set.h:\n\tRemove emacs markers.\n\n\t* include/bits/stl_threads.h (_STL_auto_lock):  Add __unused__.\n\nFrom-SVN: r67736", "tree": {"sha": "6d305530f853e29a0c20ce47e09aa32875419d7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d305530f853e29a0c20ce47e09aa32875419d7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08addde65f43c677034228e6f8ed3577ec7489f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08addde65f43c677034228e6f8ed3577ec7489f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08addde65f43c677034228e6f8ed3577ec7489f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08addde65f43c677034228e6f8ed3577ec7489f1/comments", "author": null, "committer": null, "parents": [{"sha": "e8face4c5909cdc9a03029677d0612a82d557199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8face4c5909cdc9a03029677d0612a82d557199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8face4c5909cdc9a03029677d0612a82d557199"}], "stats": {"total": 2627, "additions": 1317, "deletions": 1310}, "files": [{"sha": "62f3dc26f26b99940c1eb95809daf84204eea792", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -1,3 +1,27 @@\n+2003-06-10  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* docs/html/17_intro/BUGS:  Update from 2.90.8 snapshot.\n+\t* docs/html/17_intro/CHECKLIST:  Bring up to date with respect to\n+\tcorrectness of container::iterator typedefs.  Fix whitespace.\n+\t* docs/html/20_util/howto.html, docs/html/ext/howto.html:  Add links\n+\tto allocator docs.\n+\t* docs/html/documentation.html:  Regenerate.\n+\n+\t* include/bits/basic_string.h, include/bits/basic_string.tcc,\n+\tinclude/bits/deque.tcc, include/bits/list.tcc, include/bits/stl_algo.h,\n+\tinclude/bits/stl_algobase.h, include/bits/stl_bvector.h,\n+\tinclude/bits/stl_deque.h, include/bits/stl_iterator_base_funcs.h,\n+\tinclude/bits/stl_list.h, include/bits/stl_uninitialized.h,\n+\tinclude/bits/stl_vector.h, include/bits/vector.tcc,\n+\tinclude/ext/algorithm, include/ext/slist, include/std/std_bitset.h:\n+\tChange _Iter names to _Iterator, and __pos to __position.\n+\n+\t* include/bits/stl_relops.h, include/bits/stl_numeric.h,\n+\tinclude/bits/stl_multiset.h, include/bits/stl_set.h:\n+\tRemove emacs markers.\n+\n+\t* include/bits/stl_threads.h (_STL_auto_lock):  Add __unused__.\n+\n 2003-06-10  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/bits/fstream.tcc (overflow): According to"}, {"sha": "e71304d0666f60e56b296b4b57caf1572890c868", "filename": "libstdc++-v3/docs/html/17_intro/BUGS", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FBUGS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FBUGS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FBUGS?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -1,7 +1,4 @@\n-2000-03-24 libstdc++2.90.8\n-\n-- testsuite/27_io/istream_extractors_char.cc: \n-  Failing on all platforms with -O2, working with -O. Need to look at this.\n+2003-04-26\n \n - _GLIBCPP_HAS_BUILTIN_SINF: We should still hold out for a cleaner solution the is currenly the case in bits/std_cmath.h. \n "}, {"sha": "ad02b0d8731abe5d7c5331fe930b54ff667f3368", "filename": "libstdc++-v3/docs/html/17_intro/CHECKLIST", "status": "modified", "additions": 45, "deletions": 57, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FCHECKLIST", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FCHECKLIST", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FCHECKLIST?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -1,6 +1,6 @@\n \n    Completion Checklist for the Standard C++ Library\n-   Updated: 1999-05-18\n+   Updated: 2003-04-25\n \n    Status Code Legend:\n     M - Missing\n@@ -17,10 +17,8 @@\n    issues appear [in brackets].\n \n    Note that this checklist does not (yet) include all emendations\n-   recommended by the ISO Library Working Group:  (restricted site)\n-     http://www.cygnus.com/iso/wp/html/fdis/lwg-issues.html\n-   The LWG has announced its intention to release a public version\n-   of the issues list, URL to be added here.   XXX\n+   recommended by the ISO Library Working Group:\n+   http://anubis.dkuug.dk/jtc1/sc22/wg21/docs/lwg-toc.html\n \n    Detailed explanation of status codes:\n \n@@ -36,7 +34,7 @@\n         It may have an incorrect base class, wrong namespace, wrong\n         storage class, or simply not fully implement requirements.\n         However, it may be sufficiently usable to help test other\n-\tcomponents.\n+        components.\n \n     T - Implemented, pending test/inspection:  Implementation believed\n         to be complete, and informal testing suggests it is ready for\n@@ -49,14 +47,14 @@\n         Inspected, \"implementation-defined\" documentation accepted,\n         local usability criteria satisfied, formally inspected for\n         other untestable conformance.  (Untestable requirements\n-\tinclude exception-safety, thread-safety, worst-case\n-\tcomplexity, memory cleanliness, usefulness.)\n+        include exception-safety, thread-safety, worst-case\n+        complexity, memory cleanliness, usefulness.)\n \n     P - Portability verified:  Qualified on all primary target platforms.\n \n     C - Certified:  Formally certified to have passed all tests,\n         inspections, qualifications; approved under \"signing authority\"\n-\tto be used to satisfy contractual guarantees.\n+        to be used to satisfy contractual guarantees.\n \n    ----------------------------------------------------------------------\n        <algorithm>    <iomanip>    <list>      <ostream>     <streambuf>\n@@ -89,21 +87,18 @@ X   wctrans_t, wctype_t, and wint_t.\n     subroutines is implementation-defined.\n \n    18.1  Types                                        [lib.support.types]\n-X\t<cstddef>\n-X\tNULL\n-X  \toffsetof\n-X\tptrdiff_t\n-X\tsize_t\n+X      <cstddef>\n+X      NULL\n+X      offsetof\n+X      ptrdiff_t\n+X      size_t\n \n    18.2  Implementation properties                   [lib.support.limits]\n \n     <limits>, <climits>, and <cfloat>\n \n    18.2.1  Numeric limits                                    [lib.limits]\n \n-   [Note: the numeric_limits templates are now automatically\n-    generated. ]\n-\n X   template<class T> class numeric_limits;\n \n T   enum float_round_style;\n@@ -192,7 +187,7 @@ T     denorm present = 1;\n \n    1 Header <climits> (Table 3):\n       CHAR_BIT   INT_MAX    LONG_MIN     SCHAR_MIN   UCHAR_MAX   USHRT_MAX\n-X  \t  CHAR_MAX   INT_MIN    MB_LEN_MAX   SHRT_MAX    UINT_MAX\n+X     CHAR_MAX   INT_MIN    MB_LEN_MAX   SHRT_MAX    UINT_MAX\n       CHAR_MIN   LONG_MAX   SCHAR_MAX    SHRT_MIN    ULONG_MAX\n \n    3 Header <cfloat> (Table 4):\n@@ -457,7 +452,7 @@ X                    |Macros:   EDOM   ERANGE   errno |\n    Header <utility> synopsis\n \n     // _lib.operators_, operators:\n-X    namespace rel_ops {\n+T    namespace rel_ops {\n T      template<class T> bool operator!=(const T&, const T&);\n T      template<class T> bool operator> (const T&, const T&);\n T      template<class T> bool operator<=(const T&, const T&);\n@@ -2280,7 +2275,7 @@ X           Functions:   localeconv    setlocale\n \n    Header <deque> synopsis\n \n-X   template <class T, class Allocator = allocator<T> > class deque;\n+T   template <class T, class Allocator = allocator<T> > class deque;\n T   template <class T, class Allocator>\n       bool operator==(const deque<T,Allocator>& x, const deque<T,Allocator>& y);\n T   template <class T, class Allocator>\n@@ -2299,7 +2294,7 @@ T   template <class T, class Allocator>\n \n    Header <list> synopsis\n \n-X   template <class T, class Allocator = allocator<T> > class list;\n+T   template <class T, class Allocator = allocator<T> > class list;\n T   template <class T, class Allocator>\n       bool operator==(const list<T,Allocator>& x, const list<T,Allocator>& y);\n T   template <class T, class Allocator>\n@@ -2319,7 +2314,7 @@ T   template <class T, class Allocator>\n    Header <queue> synopsis\n \n    namespace std {\n-X   template <class T, class Container = deque<T> > class queue;\n+T   template <class T, class Container = deque<T> > class queue;\n T   template <class T, class Container>\n       bool operator==(const queue<T, Container>& x,\n                       const queue<T, Container>& y);\n@@ -2418,13 +2413,13 @@ T   template <class Allocator>\n    23.2.1  Template class deque                               [lib.deque]\n \n     template <class T, class Allocator = allocator<T> >\n-X   class deque {\n+T   class deque {\n     public:\n       // types:\n T     typedef typename Allocator::reference         reference;\n T     typedef typename Allocator::const_reference   const_reference;\n-X     typedef implementation defined                iterator;\n-X     typedef implementation defined                const_iterator;\n+T     typedef implementation defined                iterator;\n+T     typedef implementation defined                const_iterator;\n T     typedef implementation defined                size_type;\n T     typedef implementation defined                difference_type;\n T     typedef T                                     value_type;\n@@ -2511,14 +2506,14 @@ T   template <class T, class Allocator>\n \n    23.2.2  Template class list                                 [lib.list]\n \n-X   template <class T, class Allocator = allocator<T> >\n+T   template <class T, class Allocator = allocator<T> >\n     class list {\n     public:\n       // types:\n T     typedef typename Allocator::reference         reference;\n T     typedef typename Allocator::const_reference   const_reference;\n-X     typedef implementation defined                iterator;\n-X     typedef implementation defined                const_iterator;\n+T     typedef implementation defined                iterator;\n+T     typedef implementation defined                const_iterator;\n T     typedef implementation defined                size_type;\n T     typedef implementation defined                difference_type;\n T     typedef T                                     value_type;\n@@ -2720,13 +2715,13 @@ T   template <class T, class Container>\n    23.2.4  Template class vector                             [lib.vector]\n \n     template <class T, class Allocator = allocator<T> >\n-X   class vector {\n+T   class vector {\n     public:\n       // types:\n T     typedef typename Allocator::reference         reference;\n T     typedef typename Allocator::const_reference   const_reference;\n-X     typedef implementation defined                iterator;\n-X     typedef implementation defined                const_iterator;\n+T     typedef implementation defined                iterator;\n+T     typedef implementation defined                const_iterator;\n T     typedef implementation defined                size_type;\n T     typedef implementation defined                difference_type;\n T     typedef T                                     value_type;\n@@ -2814,12 +2809,12 @@ T   template <class T, class Allocator>\n \n    23.2.5  Class vector<bool>                           [lib.vector.bool]\n \n-X   template <class Allocator> class vector<bool, Allocator> {\n+T   template <class Allocator> class vector<bool, Allocator> {\n     public:\n       // types:\n T     typedef bool                                  const_reference;\n-X     typedef implementation defined                iterator;\n-X     typedef implementation defined                const_iterator;\n+T     typedef implementation defined                iterator;\n+T     typedef implementation defined                const_iterator;\n T     typedef implementation defined                size_type;\n T     typedef implementation defined                difference_type;\n T     typedef bool                                  value_type;\n@@ -2925,7 +2920,7 @@ T   template <class Allocator>\n \n     template <class Key, class T, class Compare = less<Key>,\n               class Allocator = allocator<pair<const Key, T> > >\n-X     class map;\n+T     class map;\n \n T   template <class Key, class T, class Compare, class Allocator>\n       bool operator==(const map<Key,T,Compare,Allocator>& x,\n@@ -2978,7 +2973,7 @@ T   template <class Key, class T, class Compare, class Allocator>\n \n     template <class Key, class Compare = less<Key>,\n               class Allocator = allocator<Key> >\n-X     class set;\n+T     class set;\n \n T   template <class Key, class Compare, class Allocator>\n       bool operator==(const set<Key,Compare,Allocator>& x,\n@@ -3031,7 +3026,7 @@ T   template <class Key, class Compare, class Allocator>\n \n     template <class Key, class T, class Compare = less<Key>,\n               class Allocator = allocator<pair<const Key, T> > >\n-X     class map {\n+T     class map {\n     public:\n       // types:\n T     typedef Key                                   key_type;\n@@ -3041,8 +3036,8 @@ T     typedef Compare                               key_compare;\n T     typedef Allocator                             allocator_type;\n T     typedef typename Allocator::reference         reference;\n T     typedef typename Allocator::const_reference   const_reference;\n-X     typedef implementation defined                iterator;\n-X     typedef implementation defined                const_iterator;\n+T     typedef implementation defined                iterator;\n+T     typedef implementation defined                const_iterator;\n T     typedef implementation defined                size_type;\n T     typedef implementation defined                difference_type;\n T     typedef typename Allocator::pointer           pointer;\n@@ -3140,7 +3135,7 @@ T   template <class Key, class T, class Compare, class Allocator>\n \n     template <class Key, class T, class Compare = less<Key>,\n               class Allocator = allocator<pair<const Key, T> > >\n-X   class multimap {\n+T   class multimap {\n     public:\n       // types:\n T     typedef Key                                   key_type;\n@@ -3150,8 +3145,8 @@ T     typedef Compare                               key_compare;\n T     typedef Allocator                             allocator_type;\n T     typedef typename Allocator::reference         reference;\n T     typedef typename Allocator::const_reference   const_reference;\n-X     typedef implementation defined                iterator;\n-X     typedef implementation defined                const_iterator;\n+T     typedef implementation defined                iterator;\n+T     typedef implementation defined                const_iterator;\n T     typedef implementation defined                size_type;\n T     typedef implementation defined                difference_type\n T     typedef typename Allocator::pointer           pointer;\n@@ -3248,7 +3243,7 @@ T   template <class Key, class T, class Compare, class Allocator>\n \n     template <class Key, class Compare = less<Key>,\n               class Allocator = allocator<Key> >\n-X   class set {\n+T   class set {\n     public:\n       // types:\n T     typedef Key                                   key_type;\n@@ -3258,8 +3253,8 @@ T     typedef Compare                               value_compare;\n T     typedef Allocator                             allocator_type;\n T     typedef typename Allocator::reference         reference;\n T     typedef typename Allocator::const_reference   const_reference;\n-X     typedef implementation defined                iterator;\n-X     typedef implementation defined                const_iterator;\n+T     typedef implementation defined                iterator;\n+T     typedef implementation defined                const_iterator;\n T     typedef implementation defined                size_type;\n T     typedef implementation defined                difference_type;\n T     typedef typename Allocator::pointer           pointer;\n@@ -3338,7 +3333,7 @@ T   template <class Key, class Compare, class Allocator>\n \n     template <class Key, class Compare = less<Key>,\n               class Allocator = allocator<Key> >\n-X   class multiset {\n+T   class multiset {\n     public:\n       // types:\n T     typedef Key                                   key_type;\n@@ -3348,8 +3343,8 @@ T     typedef Compare                               value_compare;\n T     typedef Allocator                             allocator_type;\n T     typedef typename Allocator::reference         reference;\n T     typedef typename Allocator::const_reference   const_reference;\n-X     typedef implementation defined                iterator;\n-X     typedef implementation defined                const_iterator;\n+T     typedef implementation defined                iterator;\n+T     typedef implementation defined                const_iterator;\n T     typedef implementation defined                size_type;\n T     typedef implementation defined                difference_type\n T     typedef typename Allocator::pointer           pointer;\n@@ -3430,14 +3425,7 @@ T   template <class Key, class Compare, class Allocator>\n \n    Header <bitset> synopsis\n \n-   [What's this stuff?\n-   #include <cstddef>              // for size_t\n-   #include <string>\n-   #include <stdexcept>            // for invalid_argument,\n-                                  //     out_of_range, overflow_error\n-   #include <iosfwd>               // for istream, ostream\n-   ]\n-X   template <size_t N> class bitset;\n+T   template <size_t N> class bitset;\n     // _lib.bitset.operators_ bitset operations:\n T   template <size_t N>\n       bitset<N> operator&(const bitset<N>&, const bitset<N>&);\n@@ -3452,7 +3440,7 @@ T   template <class charT, class traits, size_t N>\n       basic_ostream<charT, traits>&\n       operator<<(basic_ostream<charT, traits>& os, const bitset<N>& x);\n \n-X   template<size_t N> class bitset {\n+T   template<size_t N> class bitset {\n     public:\n       // bit reference:\n T     class reference {"}, {"sha": "af40bceae0e7792a2f77e712ce4ce1ff9668d3bf", "filename": "libstdc++-v3/docs/html/20_util/howto.html", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -30,6 +30,7 @@ <h1>Contents</h1>\n    <li><a href=\"#2\"><code>auto_ptr</code> inside container classes</a></li>\n    <li><a href=\"#3\">Functors</a></li>\n    <li><a href=\"#4\">Pairs</a></li>\n+   <li><a href=\"#5\">Memory allocators</a></li>\n </ul>\n \n <hr />\n@@ -207,7 +208,14 @@ <h2><a name=\"4\">Pairs</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-\n+<hr />\n+<h2><a name=\"5\">Memory allocators</a></h2>\n+   <p>The available free store (&quot;heap&quot;) management classes are\n+      described <a href=\"../ext/howto.html\">here</a>.\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n \n <!-- ####################################################### -->"}, {"sha": "68f79f7f3c447c181be9b519be2b387c6692f578", "filename": "libstdc++-v3/docs/html/documentation.html", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -143,6 +143,7 @@ <h2><a name=\"3\">Chapter-Specific Documentation</a></h2>\n      <li><a href=\"20_util/howto.html#2\"><code>auto_ptr</code> inside container classes</a></li>\n      <li><a href=\"20_util/howto.html#3\">Functors</a></li>\n      <li><a href=\"20_util/howto.html#4\">Pairs</a></li>\n+     <li><a href=\"20_util/howto.html#5\">Memory allocators</a></li>\n    </ul>\n    </li>\n \n@@ -222,8 +223,8 @@ <h2><a name=\"3\">Chapter-Specific Documentation</a></h2>\n    <ul>\n      <li><a href=\"ext/howto.html#1\">Ropes and trees and hashes, oh my!</a></li>\n      <li><a href=\"ext/howto.html#2\">Added members and types</a></li>\n-     <li><a href=\"ext/howto.html#3\">Allocators (versions 3.0, 3.1, 3.2)</a></li>\n-     <li><a href=\"ext/howto.html#6\">Allocators (version 3.3)</a></li>\n+     <li><a href=\"ext/howto.html#3\">Allocators (versions 3.0, 3.1, 3.2, 3.3)</a></li>\n+     <li><a href=\"ext/howto.html#6\">Allocators (version 3.4)</a></li>\n      <li><a href=\"ext/howto.html#4\">Compile-time checks</a></li>\n      <li><a href=\"ext/howto.html#5\">LWG Issues</a></li>\n      <li><a href=\"ext/../18_support/howto.html#5\">Demangling</a></li>"}, {"sha": "3289619625c9d99347b0a7a5eb8d16753f746317", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -41,8 +41,8 @@ <h1>Contents</h1>\n <ul>\n    <li><a href=\"#1\">Ropes and trees and hashes, oh my!</a></li>\n    <li><a href=\"#2\">Added members and types</a></li>\n-   <li><a href=\"#3\">Allocators (versions 3.0, 3.1, 3.2)</a></li>\n-   <li><a href=\"#6\">Allocators (version 3.3)</a></li>\n+   <li><a href=\"#3\">Allocators (versions 3.0, 3.1, 3.2, 3.3)</a></li>\n+   <li><a href=\"#6\">Allocators (version 3.4)</a></li>\n    <li><a href=\"#4\">Compile-time checks</a></li>\n    <li><a href=\"#5\">LWG Issues</a></li>\n    <li><a href=\"../18_support/howto.html#5\">Demangling</a></li>\n@@ -134,7 +134,7 @@ <h2><a name=\"2\">Added members and types</a></h2>\n    </p>\n \n <hr />\n-<h2><a name=\"3\">Allocators (versions 3.0, 3.1, 3.2)</a></h2>\n+<h2><a name=\"3\">Allocators (versions 3.0, 3.1, 3.2, 3.3)</a></h2>\n    <p>Thread-safety, space efficiency, high speed, portability... this is a\n       mess.  Where to begin?\n    </p>\n@@ -361,9 +361,14 @@ <h3>3.0.x</h3>\n    </p>\n \n <hr />\n-<h2><a name=\"6\">Allocators (version 3.3)</a></h2>\n+<h2><a name=\"6\">Allocators (version 3.4)</a></h2>\n    <p>Changes are coming...\n    </p>\n+   <p>If you plan on writing your own allocators,\n+      <a href=\"../documentation.html#4\">source documentation</a> is\n+      available.  You'll need to get the &quot;maintainers&quot; collection\n+      in order to see the helper classes and extra notes.\n+   </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>"}, {"sha": "968d4cae5263924342cc0e8214757d195a07c167", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -661,43 +661,43 @@ namespace std\n \n       // _S_construct_aux is used to implement the 21.3.1 para 15 which\n       // requires special behaviour if _InIter is an integral type\n-      template<class _InIter>\n+      template<class _InIterator>\n         static _CharT*\n-        _S_construct_aux(_InIter __beg, _InIter __end, const _Alloc& __a,\n+        _S_construct_aux(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n \t\t\t __false_type)\n \t{\n-          typedef typename iterator_traits<_InIter>::iterator_category _Tag;\n+          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;\n           return _S_construct(__beg, __end, __a, _Tag());\n \t}\n \n-      template<class _InIter>\n+      template<class _InIterator>\n         static _CharT*\n-        _S_construct_aux(_InIter __beg, _InIter __end, const _Alloc& __a,\n+        _S_construct_aux(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n \t\t\t __true_type)\n \t{\n \t  return _S_construct(static_cast<size_type>(__beg),\n \t\t\t      static_cast<value_type>(__end), __a);\n \t}\n \n-      template<class _InIter>\n+      template<class _InIterator>\n         static _CharT*\n-        _S_construct(_InIter __beg, _InIter __end, const _Alloc& __a)\n+        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)\n \t{\n-\t  typedef typename _Is_integer<_InIter>::_Integral _Integral;\n+\t  typedef typename _Is_integer<_InIterator>::_Integral _Integral;\n \t  return _S_construct_aux(__beg, __end, __a, _Integral());\n         }\n \n       // For Input Iterators, used in istreambuf_iterators, etc.\n-      template<class _InIter>\n+      template<class _InIterator>\n         static _CharT*\n-         _S_construct(_InIter __beg, _InIter __end, const _Alloc& __a,\n+         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n \t\t      input_iterator_tag);\n \n       // For forward_iterators up to random_access_iterators, used for\n       // string::iterator, _CharT*, etc.\n-      template<class _FwdIter>\n+      template<class _FwdIterator>\n         static _CharT*\n-        _S_construct(_FwdIter __beg, _FwdIter __end, const _Alloc& __a,\n+        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,\n \t\t     forward_iterator_tag);\n \n       static _CharT*"}, {"sha": "3855eff98826c78c6b8c61422abcb34663c8eb54", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -71,10 +71,10 @@ namespace std\n   // Input Iterators have a cost structure very different from\n   // pointers, calling for a different coding style.\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    template<typename _InIter>\n+    template<typename _InIterator>\n       _CharT*\n       basic_string<_CharT, _Traits, _Alloc>::\n-      _S_construct(_InIter __beg, _InIter __end, const _Alloc& __a,\n+      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n \t\t   input_iterator_tag)\n       {\n \tif (__beg == __end && __a == _Alloc())\n@@ -131,17 +131,17 @@ namespace std\n       }\n   \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    template <class _InIter>\n+    template <class _InIterator>\n       _CharT*\n       basic_string<_CharT, _Traits, _Alloc>::\n-      _S_construct(_InIter __beg, _InIter __end, const _Alloc& __a, \n+      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a, \n \t\t   forward_iterator_tag)\n       {\n \tif (__beg == __end && __a == _Alloc())\n \t  return _S_empty_rep()._M_refcopy();\n \n \t// NB: Not required, but considered best practice.\n-\tif (__builtin_expect(__beg == _InIter(), 0))\n+\tif (__builtin_expect(__beg == _InIterator(), 0))\n \t  __throw_logic_error(\"basic_string::_S_construct NULL not valid\");\n \n \tconst size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));\n@@ -234,9 +234,9 @@ namespace std\n     { }\n  \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    template<typename _InputIter>\n+    template<typename _InputIterator>\n     basic_string<_CharT, _Traits, _Alloc>::\n-    basic_string(_InputIter __beg, _InputIter __end, const _Alloc& __a)\n+    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)\n     : _M_dataplus(_S_construct(__beg, __end, __a), __a)\n     { }\n \n@@ -613,11 +613,11 @@ namespace std\n   // for input iterators and reverse iterators. It buffers internally and then\n   // calls _M_replace_safe.\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    template<typename _InputIter>\n+    template<typename _InputIterator>\n       basic_string<_CharT, _Traits, _Alloc>&\n       basic_string<_CharT, _Traits, _Alloc>::\n-      _M_replace(iterator __i1, iterator __i2, _InputIter __k1, \n-\t\t _InputIter __k2, input_iterator_tag)\n+      _M_replace(iterator __i1, iterator __i2, _InputIterator __k1, \n+\t\t _InputIterator __k2, input_iterator_tag)\n       {\n \t// Save concerned source string data in a temporary.\n \tconst basic_string __s(__k1, __k2);\n@@ -628,11 +628,11 @@ namespace std\n   // and can be used in \"safe\" situations involving forward iterators,\n   // i.e., when source and destination ranges are known to not overlap.\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    template<typename _ForwardIter>\n+    template<typename _ForwardIterator>\n       basic_string<_CharT, _Traits, _Alloc>&\n       basic_string<_CharT, _Traits, _Alloc>::\n-      _M_replace_safe(iterator __i1, iterator __i2, _ForwardIter __k1, \n-\t\t      _ForwardIter __k2)\n+      _M_replace_safe(iterator __i1, iterator __i2, _ForwardIterator __k1, \n+\t\t      _ForwardIterator __k2)\n       {\n \tconst size_type __dnew = static_cast<size_type>(std::distance(__k1, __k2));\n \tconst size_type __dold = __i2 - __i1;"}, {"sha": "7e3b21efe04fc5ac97fb277ff44abe3acd98c6e7", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -186,10 +186,10 @@ namespace std\n     }\n     \n   template <typename _Tp, class _Alloc>\n-    template <typename _InputIter>\n+    template <typename _InputIterator>\n       void\n       deque<_Tp,_Alloc>\n-      ::_M_assign_aux(_InputIter __first, _InputIter __last, input_iterator_tag)\n+      ::_M_assign_aux(_InputIterator __first, _InputIterator __last, input_iterator_tag)\n       {\n         iterator __cur = begin();\n         for ( ; __first != __last && __cur != end(); ++__cur, ++__first)\n@@ -710,4 +710,3 @@ namespace std\n } // namespace std \n   \n #endif /* __GLIBCPP_INTERNAL_DEQUE_TCC */\n-"}, {"sha": "95a74273155e055211f3349392c7ac44ec05d183", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -160,10 +160,10 @@ namespace std\n     }\n   \n   template<typename _Tp, typename _Alloc>\n-    template <typename _InputIter>\n+    template <typename _InputIterator>\n       void\n       list<_Tp,_Alloc>::\n-      _M_assign_dispatch(_InputIter __first2, _InputIter __last2, __false_type)\n+      _M_assign_dispatch(_InputIterator __first2, _InputIterator __last2, __false_type)\n       {\n         iterator __first1 = begin();\n         iterator __last1 = end();"}, {"sha": "ac15b3afcbfaa6b69f4026fcccad1bb37bd329bd", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 854, "deletions": 850, "changes": 1704, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=08addde65f43c677034228e6f8ed3577ec7489f1"}, {"sha": "a65e8952e4d891431e7cd0a13b82a0e423d1b20e", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 117, "deletions": 116, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -86,16 +86,16 @@ namespace std\n    *  This function swaps the values pointed to by two iterators, not the\n    *  iterators themselves.\n   */\n-  template<typename _ForwardIter1, typename _ForwardIter2>\n+  template<typename _ForwardIterator1, typename _ForwardIterator2>\n     inline void\n-    iter_swap(_ForwardIter1 __a, _ForwardIter2 __b)\n+    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)\n     {\n-      typedef typename iterator_traits<_ForwardIter1>::value_type _ValueType1;\n-      typedef typename iterator_traits<_ForwardIter2>::value_type _ValueType2;\n+      typedef typename iterator_traits<_ForwardIterator1>::value_type _ValueType1;\n+      typedef typename iterator_traits<_ForwardIterator2>::value_type _ValueType2;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter1>)\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter2>)\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator1>)\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator2>)\n       __glibcpp_function_requires(_ConvertibleConcept<_ValueType1, _ValueType2>)\n       __glibcpp_function_requires(_ConvertibleConcept<_ValueType2, _ValueType1>)\n \n@@ -210,22 +210,22 @@ namespace std\n   // (2) If we're using random access iterators, then write the loop as\n   // a for loop with an explicit count.\n \n-  template<typename _InputIter, typename _OutputIter>\n-    inline _OutputIter\n-    __copy(_InputIter __first, _InputIter __last,\n-\t   _OutputIter __result, input_iterator_tag)\n+  template<typename _InputIterator, typename _OutputIterator>\n+    inline _OutputIterator\n+    __copy(_InputIterator __first, _InputIterator __last,\n+\t   _OutputIterator __result, input_iterator_tag)\n     {\n       for (; __first != __last; ++__result, ++__first)\n \t*__result = *__first;\n       return __result;\n     }\n \n-  template<typename _RandomAccessIter, typename _OutputIter>\n-    inline _OutputIter\n-    __copy(_RandomAccessIter __first, _RandomAccessIter __last,\n-\t   _OutputIter __result, random_access_iterator_tag)\n+  template<typename _RandomAccessIterator, typename _OutputIterator>\n+    inline _OutputIterator\n+    __copy(_RandomAccessIterator __first, _RandomAccessIterator __last,\n+\t   _OutputIterator __result, random_access_iterator_tag)\n     {\n-      typedef typename iterator_traits<_RandomAccessIter>::difference_type\n+      typedef typename iterator_traits<_RandomAccessIterator>::difference_type\n           _Distance;\n       for (_Distance __n = __last - __first; __n > 0; --__n) \n \t{\n@@ -244,16 +244,16 @@ namespace std\n       return __result + (__last - __first);\n     }\n \n-  template<typename _InputIter, typename _OutputIter>\n-    inline _OutputIter\n-    __copy_aux2(_InputIter __first, _InputIter __last, _OutputIter __result, \n-\t\t__false_type)\n+  template<typename _InputIterator, typename _OutputIterator>\n+    inline _OutputIterator\n+    __copy_aux2(_InputIterator __first, _InputIterator __last,\n+\t\t_OutputIterator __result, __false_type)\n     { return __copy(__first, __last, __result, __iterator_category(__first)); }\n \n-  template<typename _InputIter, typename _OutputIter>\n-    inline _OutputIter\n-    __copy_aux2(_InputIter __first, _InputIter __last, _OutputIter __result, \n-\t\t__true_type)\n+  template<typename _InputIterator, typename _OutputIterator>\n+    inline _OutputIterator\n+    __copy_aux2(_InputIterator __first, _InputIterator __last,\n+\t\t_OutputIterator __result, __true_type)\n     { return __copy(__first, __last, __result, __iterator_category(__first)); }\n \n   template<typename _Tp>\n@@ -267,45 +267,45 @@ namespace std\n \t\t__true_type)\n     { return __copy_trivial(__first, __last, __result); }\n \n-  template<typename _InputIter, typename _OutputIter>\n-    inline _OutputIter\n-    __copy_ni2(_InputIter __first, _InputIter __last, _OutputIter __result, \n-\t       __true_type)\n+  template<typename _InputIterator, typename _OutputIterator>\n+    inline _OutputIterator\n+    __copy_ni2(_InputIterator __first, _InputIterator __last,\n+\t       _OutputIterator __result, __true_type)\n     {\n-      typedef typename iterator_traits<_InputIter>::value_type\n+      typedef typename iterator_traits<_InputIterator>::value_type\n \t  _ValueType;\n       typedef typename __type_traits<_ValueType>::has_trivial_assignment_operator\n \t  _Trivial;\n-      return _OutputIter(__copy_aux2(__first, __last, __result.base(), \n-\t\t\t\t     _Trivial()));\n+      return _OutputIterator(__copy_aux2(__first, __last, __result.base(),\n+\t\t\t\t\t _Trivial()));\n     }\n \n-  template<typename _InputIter, typename _OutputIter>\n-    inline _OutputIter\n-    __copy_ni2(_InputIter __first, _InputIter __last, _OutputIter __result, \n-\t       __false_type)\n+  template<typename _InputIterator, typename _OutputIterator>\n+    inline _OutputIterator\n+    __copy_ni2(_InputIterator __first, _InputIterator __last,\n+\t       _OutputIterator __result, __false_type)\n     {\n-      typedef typename iterator_traits<_InputIter>::value_type _ValueType;\n+      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;\n       typedef typename __type_traits<_ValueType>::has_trivial_assignment_operator\n           _Trivial;\n       return __copy_aux2(__first, __last, __result, _Trivial());\n     }\n \n-  template<typename _InputIter, typename _OutputIter>\n-    inline _OutputIter\n-    __copy_ni1(_InputIter __first, _InputIter __last, _OutputIter __result, \n-\t       __true_type)\n+  template<typename _InputIterator, typename _OutputIterator>\n+    inline _OutputIterator\n+    __copy_ni1(_InputIterator __first, _InputIterator __last,\n+\t       _OutputIterator __result, __true_type)\n     {\n-      typedef typename _Is_normal_iterator<_OutputIter>::_Normal __Normal;\n+      typedef typename _Is_normal_iterator<_OutputIterator>::_Normal __Normal;\n       return __copy_ni2(__first.base(), __last.base(), __result, __Normal());\n     }\n \n-  template<typename _InputIter, typename _OutputIter>\n-    inline _OutputIter\n-    __copy_ni1(_InputIter __first, _InputIter __last, _OutputIter __result, \n-\t       __false_type)\n+  template<typename _InputIterator, typename _OutputIterator>\n+    inline _OutputIterator\n+    __copy_ni1(_InputIterator __first, _InputIterator __last,\n+\t       _OutputIterator __result, __false_type)\n     {\n-      typedef typename _Is_normal_iterator<_OutputIter>::_Normal __Normal;\n+      typedef typename _Is_normal_iterator<_OutputIterator>::_Normal __Normal;\n       return __copy_ni2(__first, __last, __result, __Normal());\n     }\n \n@@ -322,35 +322,35 @@ namespace std\n    *  optimizations such as unrolling).  If the input range and the output\n    *  range overlap, then the copy_backward function should be used instead.\n   */\n-  template<typename _InputIter, typename _OutputIter>\n-    inline _OutputIter\n-    copy(_InputIter __first, _InputIter __last, _OutputIter __result)\n+  template<typename _InputIterator, typename _OutputIterator>\n+    inline _OutputIterator\n+    copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter>::value_type>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    typename iterator_traits<_InputIterator>::value_type>)\n \n-       typedef typename _Is_normal_iterator<_InputIter>::_Normal __Normal;\n+       typedef typename _Is_normal_iterator<_InputIterator>::_Normal __Normal;\n        return __copy_ni1(__first, __last, __result, __Normal());\n     }\n \n-  template<typename _BidirectionalIter1, typename _BidirectionalIter2>\n-    inline _BidirectionalIter2\n-    __copy_backward(_BidirectionalIter1 __first, _BidirectionalIter1 __last, \n-\t\t    _BidirectionalIter2 __result, bidirectional_iterator_tag)\n+  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2>\n+    inline _BidirectionalIterator2\n+    __copy_backward(_BidirectionalIterator1 __first, _BidirectionalIterator1 __last, \n+\t\t    _BidirectionalIterator2 __result, bidirectional_iterator_tag)\n     {\n       while (__first != __last)\n         *--__result = *--__last;\n       return __result;\n     }\n \n-  template<typename _RandomAccessIter, typename _BidirectionalIter>\n-    inline _BidirectionalIter\n-    __copy_backward(_RandomAccessIter __first, _RandomAccessIter __last, \n-\t\t    _BidirectionalIter __result, random_access_iterator_tag)\n+  template<typename _RandomAccessIterator, typename _BidirectionalIterator>\n+    inline _BidirectionalIterator\n+    __copy_backward(_RandomAccessIterator __first, _RandomAccessIterator __last, \n+\t\t    _BidirectionalIterator __result, random_access_iterator_tag)\n     {\n-      typename iterator_traits<_RandomAccessIter>::difference_type __n;\n+      typename iterator_traits<_RandomAccessIterator>::difference_type __n;\n       for (__n = __last - __first; __n > 0; --__n)\n         *--__result = *--__last;\n       return __result;\n@@ -361,13 +361,13 @@ namespace std\n   // have partial ordering of function templates.  All we're doing is\n   // creating a specialization so that we can turn a call to copy_backward\n   // into a memmove whenever possible.\n-  template<typename _BidirectionalIter1, typename _BidirectionalIter2,\n+  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,\n            typename _BoolType>\n     struct __copy_backward_dispatch\n     {\n-      static _BidirectionalIter2\n-      copy(_BidirectionalIter1 __first, _BidirectionalIter1 __last, \n-\t   _BidirectionalIter2 __result)\n+      static _BidirectionalIterator2\n+      copy(_BidirectionalIterator1 __first, _BidirectionalIterator1 __last, \n+\t   _BidirectionalIterator2 __result)\n       {\n         return __copy_backward(__first, __last, __result, \n \t\t\t       __iterator_category(__first));\n@@ -483,12 +483,12 @@ namespace std\n    *  types filling contiguous areas of memory, this becomes an inline call to\n    *  @c memset.\n   */\n-  template<typename _ForwardIter, typename _Tp>\n+  template<typename _ForwardIterator, typename _Tp>\n     void\n-    fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __value)\n+    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>)\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n \n       for ( ; __first != __last; ++__first)\n \t*__first = __value;\n@@ -505,12 +505,12 @@ namespace std\n    *  types filling contiguous areas of memory, this becomes an inline call to\n    *  @c memset.\n   */\n-  template<typename _OutputIter, typename _Size, typename _Tp>\n-    _OutputIter\n-    fill_n(_OutputIter __first, _Size __n, const _Tp& __value)\n+  template<typename _OutputIterator, typename _Size, typename _Tp>\n+    _OutputIterator\n+    fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,_Tp>)\n+      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,_Tp>)\n \n       for ( ; __n > 0; --__n, ++__first)\n \t*__first = __value;\n@@ -576,24 +576,25 @@ namespace std\n    *  second iterator points into the second range, and the elements pointed\n    *  to by the iterators are not equal.\n   */\n-  template<typename _InputIter1, typename _InputIter2>\n-    pair<_InputIter1, _InputIter2>\n-    mismatch(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2)\n+  template<typename _InputIterator1, typename _InputIterator2>\n+    pair<_InputIterator1, _InputIterator2>\n+    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n+\t     _InputIterator2 __first2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcpp_function_requires(_EqualityComparableConcept<\n-\t    typename iterator_traits<_InputIter1>::value_type>)\n+\t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcpp_function_requires(_EqualityComparableConcept<\n-\t    typename iterator_traits<_InputIter2>::value_type>)\n+\t    typename iterator_traits<_InputIterator2>::value_type>)\n \n-      while (__first1 != __last1 && *__first1 == *__first2) \n-\t{\n+      while (__first1 != __last1 && *__first1 == *__first2)\n+        {\n \t  ++__first1;\n \t  ++__first2;\n-\t}\n-      return pair<_InputIter1, _InputIter2>(__first1, __first2);\n+        }\n+      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n     }\n \n   /**\n@@ -610,21 +611,21 @@ namespace std\n    *  second iterator points into the second range, and the elements pointed\n    *  to by the iterators are not equal.\n   */\n-  template<typename _InputIter1, typename _InputIter2, typename _BinaryPredicate>\n-    pair<_InputIter1, _InputIter2>\n-    mismatch(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2,\n-\t     _BinaryPredicate __binary_pred)\n+  template<typename _InputIterator1, typename _InputIterator2, typename _BinaryPredicate>\n+    pair<_InputIterator1, _InputIterator2>\n+    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n+\t     _InputIterator2 __first2, _BinaryPredicate __binary_pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n \n-      while (__first1 != __last1 && __binary_pred(*__first1, *__first2)) \n-\t{\n+      while (__first1 != __last1 && __binary_pred(*__first1, *__first2))\n+        {\n \t  ++__first1;\n \t  ++__first2;\n-\t}\n-      return pair<_InputIter1, _InputIter2>(__first1, __first2);\n+        }\n+      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n     }\n \n   /**\n@@ -638,16 +639,16 @@ namespace std\n    *  false depending on whether all of the corresponding elements of the\n    *  ranges are equal.\n   */\n-  template<typename _InputIter1, typename _InputIter2>\n+  template<typename _InputIterator1, typename _InputIterator2>\n     inline bool\n-    equal(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2)\n+    equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcpp_function_requires(_EqualOpConcept<\n-\t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>)\n+\t    typename iterator_traits<_InputIterator1>::value_type,\n+\t    typename iterator_traits<_InputIterator2>::value_type>)\n \n       for ( ; __first1 != __last1; ++__first1, ++__first2)\n \tif (!(*__first1 == *__first2))\n@@ -668,15 +669,15 @@ namespace std\n    *  false depending on whether all of the corresponding elements of the\n    *  ranges are equal.\n   */\n-  template<typename _InputIter1, typename _InputIter2, typename _BinaryPredicate>\n+  template<typename _InputIterator1, typename _InputIterator2, typename _BinaryPredicate>\n     inline bool\n-    equal(_InputIter1 __first1, _InputIter1 __last1,\n-\t  _InputIter2 __first2,\n+    equal(_InputIterator1 __first1, _InputIterator1 __last1,\n+\t  _InputIterator2 __first2,\n \t  _BinaryPredicate __binary_pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n \n       for ( ; __first1 != __last1; ++__first1, ++__first2)\n \tif (!__binary_pred(*__first1, *__first2))\n@@ -698,18 +699,18 @@ namespace std\n    *  (Quoted from [25.3.8]/1.)  If the iterators are all character pointers,\n    *  then this is an inline call to @c memcmp.\n   */\n-  template<typename _InputIter1, typename _InputIter2>\n+  template<typename _InputIterator1, typename _InputIterator2>\n     bool\n-    lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,\n-\t\t\t    _InputIter2 __first2, _InputIter2 __last2)\n+    lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,\n+\t\t\t    _InputIterator2 __first2, _InputIterator2 __last2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIter1>::value_type>)\n+\t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIter2>::value_type>)\n+\t    typename iterator_traits<_InputIterator2>::value_type>)\n \n       for (;__first1 != __last1 && __first2 != __last2; ++__first1, ++__first2) \n \t{\n@@ -733,15 +734,15 @@ namespace std\n    *  The same as the four-parameter @c lexigraphical_compare, but uses the\n    *  comp parameter instead of @c <.\n   */\n-  template<typename _InputIter1, typename _InputIter2, typename _Compare>\n+  template<typename _InputIterator1, typename _InputIterator2, typename _Compare>\n     bool\n-    lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,\n-\t\t\t    _InputIter2 __first2, _InputIter2 __last2,\n+    lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,\n+\t\t\t    _InputIterator2 __first2, _InputIterator2 __last2,\n \t\t\t    _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n \n       for ( ; __first1 != __last1 && __first2 != __last2\n \t    ; ++__first1, ++__first2) "}, {"sha": "1a862b99d72be0fef9a781d4c591b3ef3a563400", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -575,8 +575,8 @@ template <typename _Alloc>\n     void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)\n       { _M_fill_assign((size_t) __n, (bool) __val); }\n   \n-    template <class _InputIter>\n-    void _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)\n+    template <class _InputIterator>\n+    void _M_assign_dispatch(_InputIterator __first, _InputIterator __last, __false_type)\n       { _M_assign_aux(__first, __last, __iterator_category(__first)); }\n   \n     template <class _InputIterator>"}, {"sha": "8805b7589f63518f6d155a14094ec79d71bc6dac", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -1112,7 +1112,7 @@ namespace std\n   \n     /**\n      *  @brief  Inserts a range into the %deque.\n-     *  @param  pos  An iterator into the %deque.\n+     *  @param  position  An iterator into the %deque.\n      *  @param  first  An input iterator.\n      *  @param  last   An input iterator.\n      *\n@@ -1122,11 +1122,11 @@ namespace std\n     */\n     template<typename _InputIterator>\n       void\n-      insert(iterator __pos, _InputIterator __first, _InputIterator __last)\n+      insert(iterator __position, _InputIterator __first, _InputIterator __last)\n       {\n         // Check whether it's an integral type.  If so, it's not an iterator.\n         typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n-        _M_insert_dispatch(__pos, __first, __last, _Integral());\n+        _M_insert_dispatch(__position, __first, __last, _Integral());\n       }\n   \n     /**\n@@ -1203,12 +1203,12 @@ namespace std\n       }\n   \n     // called by the range constructor to implement [23.1.1]/9\n-    template<typename _InputIter>\n+    template<typename _InputIterator>\n       void\n-      _M_initialize_dispatch(_InputIter __first, _InputIter __last,\n+      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n                              __false_type)\n       {\n-        typedef typename iterator_traits<_InputIter>::iterator_category\n+        typedef typename iterator_traits<_InputIterator>::iterator_category\n                          _IterCategory;\n         _M_range_initialize(__first, __last, _IterCategory());\n       }\n@@ -1268,11 +1268,11 @@ namespace std\n       }\n   \n     // called by the range assign to implement [23.1.1]/9\n-    template<typename _InputIter>\n+    template<typename _InputIterator>\n       void\n-      _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)\n+      _M_assign_dispatch(_InputIterator __first, _InputIterator __last, __false_type)\n       {\n-        typedef typename iterator_traits<_InputIter>::iterator_category\n+        typedef typename iterator_traits<_InputIterator>::iterator_category\n                          _IterCategory;\n         _M_assign_aux(__first, __last, _IterCategory());\n       }"}, {"sha": "8ea22a0a7e592af6eb6b6b1d5f21bc6c071452dc", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -114,12 +114,12 @@ namespace std\n       return __distance(__first, __last, __iterator_category(__first));\n     }\n   \n-  template<typename _InputIter, typename _Distance>\n+  template<typename _InputIterator, typename _Distance>\n     inline void\n-    __advance(_InputIter& __i, _Distance __n, input_iterator_tag)\n+    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n       while (__n--) ++__i;\n     }\n   "}, {"sha": "46d9e7b6bdaa9745ec961e189de8566ecb055a6a", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -773,12 +773,12 @@ namespace std\n      *  time, and does not invalidate iterators and references.\n     */\n     void\n-    insert(iterator __pos, size_type __n, const value_type& __x)\n-    { _M_fill_insert(__pos, __n, __x); }\n+    insert(iterator __position, size_type __n, const value_type& __x)\n+    { _M_fill_insert(__position, __n, __x); }\n   \n     /**\n      *  @brief  Inserts a range into the %list.\n-     *  @param  pos  An iterator into the %list.\n+     *  @param  position  An iterator into the %list.\n      *  @param  first  An input iterator.\n      *  @param  last   An input iterator.\n      *\n@@ -790,11 +790,11 @@ namespace std\n     */\n     template<typename _InputIterator>\n       void\n-      insert(iterator __pos, _InputIterator __first, _InputIterator __last)\n+      insert(iterator __position, _InputIterator __first, _InputIterator __last)\n       {\n         // Check whether it's an integral type.  If so, it's not an iterator.\n         typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n-        _M_insert_dispatch(__pos, __first, __last, _Integral());\n+        _M_insert_dispatch(__position, __first, __last, _Integral());\n       }\n   \n     /**\n@@ -968,9 +968,9 @@ namespace std\n       }\n   \n     // called by the range assign to implement [23.1.1]/9\n-    template<typename _InputIter>\n+    template<typename _InputIterator>\n       void\n-      _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type);\n+      _M_assign_dispatch(_InputIterator __first, _InputIterator __last, __false_type);\n   \n     // Called by assign(n,t), and the range assign when it turns out to be the\n     // same thing."}, {"sha": "9235f8fd5dcaa264719998180b63c4982dcf0752", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -271,7 +271,3 @@ inline void swap(multiset<_Key,_Compare,_Alloc>& __x,\n } // namespace std\n \n #endif /* __GLIBCPP_INTERNAL_MULTISET_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "53b193b95ce5016a735f1e69832e5257af258fb9", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -209,7 +209,3 @@ namespace std\n } // namespace std\n \n #endif /* _CPP_BITS_STL_NUMERIC_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "a8a3a173dd443d030dbab5a9418e26dfd69cefb6", "filename": "libstdc++-v3/include/bits/stl_relops.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -135,7 +135,3 @@ inline bool operator>=(const _Tp& __x, const _Tp& __y) {\n } // namespace std\n \n #endif /* _CPP_BITS_STL_RELOPS_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "96dc4b307a364721f018b405c4ece855a8972d4a", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -268,7 +268,3 @@ inline void swap(set<_Key,_Compare,_Alloc>& __x,\n } // namespace std\n \n #endif /* __GLIBCPP_INTERNAL_SET_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "a95fc38a4236003d1cffb34d8a87eda2cd165cdc", "filename": "libstdc++-v3/include/bits/stl_threads.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -208,7 +208,7 @@ namespace std\n   private:\n     void operator=(const _STL_auto_lock&);\n     _STL_auto_lock(const _STL_auto_lock&);\n-  };\n+  } __attribute__ ((__unused__));\n   \n } // namespace std\n "}, {"sha": "5f86058043367a4f6064ffe4f03ff41f99b71569", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 46, "deletions": 50, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -68,20 +68,20 @@ namespace std\n \n   // uninitialized_copy\n \n-  template<typename _InputIter, typename _ForwardIter>\n-    inline _ForwardIter \n-    __uninitialized_copy_aux(_InputIter __first, _InputIter __last,\n-\t\t\t     _ForwardIter __result,\n+  template<typename _InputIterator, typename _ForwardIterator>\n+    inline _ForwardIterator \n+    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,\n+\t\t\t     _ForwardIterator __result,\n \t\t\t     __true_type)\n     { return copy(__first, __last, __result); }\n \n-  template<typename _InputIter, typename _ForwardIter>\n-    _ForwardIter \n-    __uninitialized_copy_aux(_InputIter __first, _InputIter __last,\n-\t\t\t     _ForwardIter __result,\n+  template<typename _InputIterator, typename _ForwardIterator>\n+    _ForwardIterator \n+    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,\n+\t\t\t     _ForwardIterator __result,\n \t\t\t     __false_type)\n     {\n-      _ForwardIter __cur = __result;\n+      _ForwardIterator __cur = __result;\n       try {\n \tfor ( ; __first != __last; ++__first, ++__cur)\n \t  _Construct(&*__cur, *__first);\n@@ -103,11 +103,11 @@ namespace std\n    *\n    *  Like copy(), but does not require an initialized output range.\n   */\n-  template<typename _InputIter, typename _ForwardIter>\n-    inline _ForwardIter\n-    uninitialized_copy(_InputIter __first, _InputIter __last, _ForwardIter __result)\n+  template<typename _InputIterator, typename _ForwardIterator>\n+    inline _ForwardIterator\n+    uninitialized_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result)\n     {\n-      typedef typename iterator_traits<_ForwardIter>::value_type _ValueType;\n+      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;\n       typedef typename __type_traits<_ValueType>::is_POD_type _Is_POD;\n       return __uninitialized_copy_aux(__first, __last, __result, _Is_POD());\n     }\n@@ -129,18 +129,18 @@ namespace std\n \n   // Valid if copy construction is equivalent to assignment, and if the\n   // destructor is trivial.\n-  template<typename _ForwardIter, typename _Tp>\n+  template<typename _ForwardIterator, typename _Tp>\n     inline void\n-    __uninitialized_fill_aux(_ForwardIter __first, _ForwardIter __last, \n+    __uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last, \n \t\t\t     const _Tp& __x, __true_type)\n     { fill(__first, __last, __x); }\n \n-  template<typename _ForwardIter, typename _Tp>\n+  template<typename _ForwardIterator, typename _Tp>\n     void\n-    __uninitialized_fill_aux(_ForwardIter __first, _ForwardIter __last, \n+    __uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last, \n \t\t\t     const _Tp& __x, __false_type)\n     {\n-      _ForwardIter __cur = __first;\n+      _ForwardIterator __cur = __first;\n       try {\n \tfor ( ; __cur != __last; ++__cur)\n \t  _Construct(&*__cur, __x);\n@@ -161,31 +161,31 @@ namespace std\n    *\n    *  Like fill(), but does not require an initialized output range.\n   */\n-  template<typename _ForwardIter, typename _Tp>\n+  template<typename _ForwardIterator, typename _Tp>\n     inline void\n-    uninitialized_fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __x)\n+    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x)\n     {\n-      typedef typename iterator_traits<_ForwardIter>::value_type _ValueType;\n+      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;\n       typedef typename __type_traits<_ValueType>::is_POD_type _Is_POD;\n       __uninitialized_fill_aux(__first, __last, __x, _Is_POD());\n     }\n \n   // Valid if copy construction is equivalent to assignment, and if the\n   //  destructor is trivial.\n-  template<typename _ForwardIter, typename _Size, typename _Tp>\n-    inline _ForwardIter\n-    __uninitialized_fill_n_aux(_ForwardIter __first, _Size __n,\n+  template<typename _ForwardIterator, typename _Size, typename _Tp>\n+    inline _ForwardIterator\n+    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,\n \t\t\t       const _Tp& __x, __true_type)\n     {\n       return fill_n(__first, __n, __x);\n     }\n \n-  template<typename _ForwardIter, typename _Size, typename _Tp>\n-    _ForwardIter\n-    __uninitialized_fill_n_aux(_ForwardIter __first, _Size __n,\n+  template<typename _ForwardIterator, typename _Size, typename _Tp>\n+    _ForwardIterator\n+    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,\n \t\t\t       const _Tp& __x, __false_type)\n     {\n-      _ForwardIter __cur = __first;\n+      _ForwardIterator __cur = __first;\n       try {\n \tfor ( ; __n > 0; --__n, ++__cur)\n \t  _Construct(&*__cur, __x);\n@@ -207,11 +207,11 @@ namespace std\n    *\n    *  Like fill_n(), but does not require an initialized output range.\n   */\n-  template<typename _ForwardIter, typename _Size, typename _Tp>\n-    inline _ForwardIter \n-    uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x)\n+  template<typename _ForwardIterator, typename _Size, typename _Tp>\n+    inline _ForwardIterator \n+    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)\n     {\n-      typedef typename iterator_traits<_ForwardIter>::value_type _ValueType;\n+      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;\n       typedef typename __type_traits<_ValueType>::is_POD_type _Is_POD;\n       return __uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());\n     }\n@@ -224,13 +224,13 @@ namespace std\n   //  copies [first2, last2) into\n   //  [result, result + (last1 - first1) + (last2 - first2)).\n \n-  template<typename _InputIter1, typename _InputIter2, typename _ForwardIter>\n-    inline _ForwardIter\n-    __uninitialized_copy_copy(_InputIter1 __first1, _InputIter1 __last1,\n-\t\t\t      _InputIter2 __first2, _InputIter2 __last2,\n-\t\t\t      _ForwardIter __result)\n+  template<typename _InputIterator1, typename _InputIterator2, typename _ForwardIterator>\n+    inline _ForwardIterator\n+    __uninitialized_copy_copy(_InputIterator1 __first1, _InputIterator1 __last1,\n+\t\t\t      _InputIterator2 __first2, _InputIterator2 __last2,\n+\t\t\t      _ForwardIterator __result)\n     {\n-      _ForwardIter __mid = uninitialized_copy(__first1, __last1, __result);\n+      _ForwardIterator __mid = uninitialized_copy(__first1, __last1, __result);\n       try {\n \treturn uninitialized_copy(__first2, __last2, __mid);\n       }\n@@ -244,11 +244,11 @@ namespace std\n   // __uninitialized_fill_copy\n   // Fills [result, mid) with x, and copies [first, last) into\n   //  [mid, mid + (last - first)).\n-  template<typename _ForwardIter, typename _Tp, typename _InputIter>\n-    inline _ForwardIter \n-    __uninitialized_fill_copy(_ForwardIter __result, _ForwardIter __mid,\n+  template<typename _ForwardIterator, typename _Tp, typename _InputIterator>\n+    inline _ForwardIterator \n+    __uninitialized_fill_copy(_ForwardIterator __result, _ForwardIterator __mid,\n \t\t\t      const _Tp& __x,\n-\t\t\t      _InputIter __first, _InputIter __last)\n+\t\t\t      _InputIterator __first, _InputIterator __last)\n     {\n       uninitialized_fill(__result, __mid, __x);\n       try {\n@@ -264,13 +264,13 @@ namespace std\n   // __uninitialized_copy_fill\n   // Copies [first1, last1) into [first2, first2 + (last1 - first1)), and\n   //  fills [first2 + (last1 - first1), last2) with x.\n-  template<typename _InputIter, typename _ForwardIter, typename _Tp>\n+  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>\n     inline void\n-    __uninitialized_copy_fill(_InputIter __first1, _InputIter __last1,\n-\t\t\t      _ForwardIter __first2, _ForwardIter __last2,\n+    __uninitialized_copy_fill(_InputIterator __first1, _InputIterator __last1,\n+\t\t\t      _ForwardIterator __first2, _ForwardIterator __last2,\n \t\t\t      const _Tp& __x)\n     {\n-      _ForwardIter __mid2 = uninitialized_copy(__first1, __last1, __first2);\n+      _ForwardIterator __mid2 = uninitialized_copy(__first1, __last1, __first2);\n       try {\n \tuninitialized_fill(__mid2, __last2, __x);\n       }\n@@ -284,7 +284,3 @@ namespace std\n } // namespace std\n \n #endif /* _CPP_BITS_STL_UNINITIALIZED_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "bbd2edb8bb6f95954e834a712758e2637d3de726", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -650,12 +650,12 @@ namespace std\n        *  consider using std::list.\n        */\n       void\n-      insert(iterator __pos, size_type __n, const value_type& __x)\n-      { _M_fill_insert(__pos, __n, __x); }\n+      insert(iterator __position, size_type __n, const value_type& __x)\n+      { _M_fill_insert(__position, __n, __x); }\n       \n       /**\n        *  @brief  Inserts a range into the %vector.\n-       *  @param  pos  An iterator into the %vector.\n+       *  @param  position  An iterator into the %vector.\n        *  @param  first  An input iterator.\n        *  @param  last   An input iterator.\n        *\n@@ -669,11 +669,11 @@ namespace std\n        */\n       template<typename _InputIterator>\n         void\n-        insert(iterator __pos, _InputIterator __first, _InputIterator __last)\n+        insert(iterator __position, _InputIterator __first, _InputIterator __last)\n         {\n \t  // Check whether it's an integral type.  If so, it's not an iterator.\n \t  typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n-\t  _M_insert_dispatch(__pos, __first, __last, _Integral());\n+\t  _M_insert_dispatch(__position, __first, __last, _Integral());\n \t}\n       \n       /**\n@@ -780,12 +780,12 @@ namespace std\n \t}\n       \n       // Called by the range constructor to implement [23.1.1]/9\n-      template<typename _InputIter>\n+      template<typename _InputIterator>\n         void\n-        _M_initialize_dispatch(_InputIter __first, _InputIter __last,\n+        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n \t\t\t       __false_type)\n         {\n-\t  typedef typename iterator_traits<_InputIter>::iterator_category\n+\t  typedef typename iterator_traits<_InputIterator>::iterator_category\n \t    _IterCategory;\n \t  _M_range_initialize(__first, __last, _IterCategory());\n \t}\n@@ -827,11 +827,11 @@ namespace std\n \t}\n       \n       // Called by the range assign to implement [23.1.1]/9\n-      template<typename _InputIter>\n+      template<typename _InputIterator>\n         void\n-        _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)\n+        _M_assign_dispatch(_InputIterator __first, _InputIterator __last, __false_type)\n         {\n-\t  typedef typename iterator_traits<_InputIter>::iterator_category\n+\t  typedef typename iterator_traits<_InputIterator>::iterator_category\n \t    _IterCategory;\n \t  _M_assign_aux(__first, __last, _IterCategory());\n \t}"}, {"sha": "a3a36c555ccb48f4eb717603d92d5553ccacb9f3", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -176,10 +176,10 @@ namespace std\n         erase(fill_n(begin(), __n, __val), end());\n     }\n   \n-  template<typename _Tp, typename _Alloc> template<typename _InputIter>\n+  template<typename _Tp, typename _Alloc> template<typename _InputIterator>\n     void\n     vector<_Tp,_Alloc>::\n-    _M_assign_aux(_InputIter __first, _InputIter __last, input_iterator_tag)\n+    _M_assign_aux(_InputIterator __first, _InputIterator __last, input_iterator_tag)\n     {\n       iterator __cur(begin());\n       for ( ; __first != __last && __cur != end(); ++__cur, ++__first)\n@@ -190,10 +190,10 @@ namespace std\n         insert(end(), __first, __last);\n     }\n   \n-  template<typename _Tp, typename _Alloc> template<typename _ForwardIter>\n+  template<typename _Tp, typename _Alloc> template<typename _ForwardIterator>\n     void\n     vector<_Tp,_Alloc>::\n-    _M_assign_aux(_ForwardIter __first, _ForwardIter __last,\n+    _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,\n                   forward_iterator_tag)\n     {\n       size_type __len = std::distance(__first, __last);\n@@ -215,7 +215,7 @@ namespace std\n       }\n       else\n       {\n-        _ForwardIter __mid = __first;\n+        _ForwardIterator __mid = __first;\n         advance(__mid, size());\n         copy(__first, __mid, this->_M_start);\n         this->_M_finish = uninitialized_copy(__mid, __last, this->_M_finish);"}, {"sha": "2d457503393fc9aad80bb27a39b91029b7ef4335", "filename": "libstdc++-v3/include/ext/algorithm", "status": "modified", "additions": 93, "deletions": 93, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -77,28 +77,28 @@ namespace __gnu_cxx\n   //--------------------------------------------------\n   // copy_n (not part of the C++ standard)\n \n-  template<typename _InputIter, typename _Size, typename _OutputIter>\n-    pair<_InputIter, _OutputIter>\n-    __copy_n(_InputIter __first, _Size __count,\n-\t     _OutputIter __result,\n+  template<typename _InputIterator, typename _Size, typename _OutputIterator>\n+    pair<_InputIterator, _OutputIterator>\n+    __copy_n(_InputIterator __first, _Size __count,\n+\t     _OutputIterator __result,\n \t     input_iterator_tag)\n     {\n       for ( ; __count > 0; --__count) {\n \t*__result = *__first;\n \t++__first;\n \t++__result;\n       }\n-      return pair<_InputIter, _OutputIter>(__first, __result);\n+      return pair<_InputIterator, _OutputIterator>(__first, __result);\n     }\n \n-  template<typename _RAIter, typename _Size, typename _OutputIter>\n-    inline pair<_RAIter, _OutputIter>\n-    __copy_n(_RAIter __first, _Size __count,\n-\t     _OutputIter __result,\n+  template<typename _RAIterator, typename _Size, typename _OutputIterator>\n+    inline pair<_RAIterator, _OutputIterator>\n+    __copy_n(_RAIterator __first, _Size __count,\n+\t     _OutputIterator __result,\n \t     random_access_iterator_tag)\n     {\n-      _RAIter __last = __first + __count;\n-      return pair<_RAIter, _OutputIter>(__last,\n+      _RAIterator __last = __first + __count;\n+      return pair<_RAIterator, _OutputIterator>(__last,\n \t\t\t\t\tstd::copy(__first, __last, __result));\n     }\n \n@@ -116,23 +116,23 @@ namespace __gnu_cxx\n    *  optimizations such as unrolling).\n    *  @ingroup SGIextensions\n   */\n-  template<typename _InputIter, typename _Size, typename _OutputIter>\n-    inline pair<_InputIter, _OutputIter>\n-    copy_n(_InputIter __first, _Size __count, _OutputIter __result)\n+  template<typename _InputIterator, typename _Size, typename _OutputIterator>\n+    inline pair<_InputIterator, _OutputIterator>\n+    copy_n(_InputIterator __first, _Size __count, _OutputIterator __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter>::value_type>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    typename iterator_traits<_InputIterator>::value_type>)\n \n       return __copy_n(__first, __count, __result,\n \t\t      std::__iterator_category(__first));\n     }\n \n-  template<typename _InputIter1, typename _InputIter2>\n+  template<typename _InputIterator1, typename _InputIterator2>\n     int\n-    __lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,\n-\t\t\t\t   _InputIter2 __first2, _InputIter2 __last2)\n+    __lexicographical_compare_3way(_InputIterator1 __first1, _InputIterator1 __last1,\n+\t\t\t\t   _InputIterator2 __first2, _InputIterator2 __last2)\n     {\n       while (__first1 != __last1 && __first2 != __last2) {\n \tif (*__first1 < *__first2)\n@@ -195,51 +195,51 @@ namespace __gnu_cxx\n    *  This is an SGI extension.\n    *  @ingroup SGIextensions\n   */\n-  template<typename _InputIter1, typename _InputIter2>\n+  template<typename _InputIterator1, typename _InputIterator2>\n     int\n-    lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,\n-\t\t\t\t _InputIter2 __first2, _InputIter2 __last2)\n+    lexicographical_compare_3way(_InputIterator1 __first1, _InputIterator1 __last1,\n+\t\t\t\t _InputIterator2 __first2, _InputIterator2 __last2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIter1>::value_type>)\n+\t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIter2>::value_type>)\n+\t    typename iterator_traits<_InputIterator2>::value_type>)\n \n       return __lexicographical_compare_3way(__first1, __last1, __first2, __last2);\n     }\n \n   // count and count_if: this version, whose return type is void, was present\n   // in the HP STL, and is retained as an extension for backward compatibility.\n \n-  template<typename _InputIter, typename _Tp, typename _Size>\n+  template<typename _InputIterator, typename _Tp, typename _Size>\n     void\n-    count(_InputIter __first, _InputIter __last,\n+    count(_InputIterator __first, _InputIterator __last,\n \t  const _Tp& __value,\n \t  _Size& __n)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n       __glibcpp_function_requires(_EqualityComparableConcept<\n-\t    typename iterator_traits<_InputIter>::value_type >)\n+\t    typename iterator_traits<_InputIterator>::value_type >)\n       __glibcpp_function_requires(_EqualityComparableConcept<_Tp>)\n       for ( ; __first != __last; ++__first)\n \tif (*__first == __value)\n \t  ++__n;\n     }\n \n-  template<typename _InputIter, typename _Predicate, typename _Size>\n+  template<typename _InputIterator, typename _Predicate, typename _Size>\n     void\n-    count_if(_InputIter __first, _InputIter __last,\n+    count_if(_InputIterator __first, _InputIterator __last,\n \t     _Predicate __pred,\n \t     _Size& __n)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n       __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n-\t    typename iterator_traits<_InputIter>::value_type>)\n+\t    typename iterator_traits<_InputIterator>::value_type>)\n       for ( ; __first != __last; ++__first)\n \tif (__pred(*__first))\n \t  ++__n;\n@@ -252,15 +252,15 @@ namespace __gnu_cxx\n    *  @ingroup SGIextensions\n    *  @doctodo\n   */\n-  template<typename _ForwardIter, typename _OutputIter, typename _Distance>\n-    _OutputIter\n-    random_sample_n(_ForwardIter __first, _ForwardIter __last,\n-                    _OutputIter __out, const _Distance __n)\n+  template<typename _ForwardIterator, typename _OutputIterator, typename _Distance>\n+    _OutputIterator\n+    random_sample_n(_ForwardIterator __first, _ForwardIterator __last,\n+                    _OutputIterator __out, const _Distance __n)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t\ttypename iterator_traits<_ForwardIter>::value_type>)\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t\ttypename iterator_traits<_ForwardIterator>::value_type>)\n \n       _Distance __remaining = std::distance(__first, __last);\n       _Distance __m = min(__n, __remaining);\n@@ -283,17 +283,17 @@ namespace __gnu_cxx\n    *  @ingroup SGIextensions\n    *  @doctodo\n   */\n-  template<typename _ForwardIter, typename _OutputIter, typename _Distance,\n+  template<typename _ForwardIterator, typename _OutputIterator, typename _Distance,\n \t   typename _RandomNumberGenerator>\n-    _OutputIter\n-    random_sample_n(_ForwardIter __first, _ForwardIter __last,\n-                   _OutputIter __out, const _Distance __n, \n+    _OutputIterator\n+    random_sample_n(_ForwardIterator __first, _ForwardIterator __last,\n+                   _OutputIterator __out, const _Distance __n, \n \t\t   _RandomNumberGenerator& __rand)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t\ttypename iterator_traits<_ForwardIter>::value_type>)\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t\ttypename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcpp_function_requires(_UnaryFunctionConcept<\n \t\t_RandomNumberGenerator, _Distance, _Distance>)\n \n@@ -313,10 +313,10 @@ namespace __gnu_cxx\n       return __out;\n     }\n \n-  template<typename _InputIter, typename _RandomAccessIter, typename _Distance>\n-    _RandomAccessIter\n-    __random_sample(_InputIter __first, _InputIter __last,\n-\t\t    _RandomAccessIter __out,\n+  template<typename _InputIterator, typename _RandomAccessIterator, typename _Distance>\n+    _RandomAccessIterator\n+    __random_sample(_InputIterator __first, _InputIterator __last,\n+\t\t    _RandomAccessIterator __out,\n \t\t    const _Distance __n)\n     {\n       _Distance __m = 0;\n@@ -335,11 +335,11 @@ namespace __gnu_cxx\n       return __out + __m;\n     }\n \n-  template<typename _InputIter, typename _RandomAccessIter,\n+  template<typename _InputIterator, typename _RandomAccessIterator,\n \t   typename _RandomNumberGenerator, typename _Distance>\n-    _RandomAccessIter\n-    __random_sample(_InputIter __first, _InputIter __last,\n-\t\t    _RandomAccessIter __out,\n+    _RandomAccessIterator\n+    __random_sample(_InputIterator __first, _InputIterator __last,\n+\t\t    _RandomAccessIterator __out,\n \t\t    _RandomNumberGenerator& __rand,\n \t\t    const _Distance __n)\n     {\n@@ -368,15 +368,15 @@ namespace __gnu_cxx\n    *  @ingroup SGIextensions\n    *  @doctodo\n   */\n-  template<typename _InputIter, typename _RandomAccessIter>\n-    inline _RandomAccessIter\n-    random_sample(_InputIter __first, _InputIter __last,\n-\t\t  _RandomAccessIter __out_first, _RandomAccessIter __out_last) \n+  template<typename _InputIterator, typename _RandomAccessIterator>\n+    inline _RandomAccessIterator\n+    random_sample(_InputIterator __first, _InputIterator __last,\n+\t\t  _RandomAccessIterator __out_first, _RandomAccessIterator __out_last) \n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIter>)\n+\t    _RandomAccessIterator>)\n \n       return __random_sample(__first, __last,\n \t\t\t     __out_first, __out_last - __out_first);\n@@ -387,17 +387,17 @@ namespace __gnu_cxx\n    *  @ingroup SGIextensions\n    *  @doctodo\n   */\n-  template<typename _InputIter, typename _RandomAccessIter, \n+  template<typename _InputIterator, typename _RandomAccessIterator, \n \t   typename _RandomNumberGenerator>\n-    inline _RandomAccessIter\n-    random_sample(_InputIter __first, _InputIter __last,\n-\t\t  _RandomAccessIter __out_first, _RandomAccessIter __out_last,\n+    inline _RandomAccessIterator\n+    random_sample(_InputIterator __first, _InputIterator __last,\n+\t\t  _RandomAccessIterator __out_first, _RandomAccessIterator __out_last,\n \t\t  _RandomNumberGenerator& __rand) \n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIter>)\n+\t    _RandomAccessIterator>)\n \n       return __random_sample(__first, __last,\n \t\t\t     __out_first, __rand,\n@@ -408,9 +408,9 @@ namespace __gnu_cxx\n   // a heap.  This function is an extension, not part of the C++\n   // standard.\n \n-  template<typename _RandomAccessIter, typename _Distance>\n+  template<typename _RandomAccessIterator, typename _Distance>\n     bool\n-    __is_heap(_RandomAccessIter __first, _Distance __n)\n+    __is_heap(_RandomAccessIterator __first, _Distance __n)\n     {\n       _Distance __parent = 0;\n       for (_Distance __child = 1; __child < __n; ++__child) {\n@@ -422,10 +422,10 @@ namespace __gnu_cxx\n       return true;\n     }\n \n-  template<typename _RandomAccessIter, typename _Distance,\n+  template<typename _RandomAccessIterator, typename _Distance,\n            typename _StrictWeakOrdering>\n     bool\n-    __is_heap(_RandomAccessIter __first, _StrictWeakOrdering __comp,\n+    __is_heap(_RandomAccessIterator __first, _StrictWeakOrdering __comp,\n \t      _Distance __n)\n     {\n       _Distance __parent = 0;\n@@ -443,14 +443,14 @@ namespace __gnu_cxx\n    *  @ingroup SGIextensions\n    *  @doctodo\n   */\n-  template<typename _RandomAccessIter>\n+  template<typename _RandomAccessIterator>\n     inline bool\n-    is_heap(_RandomAccessIter __first, _RandomAccessIter __last)\n+    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIter>)\n+      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_RandomAccessIter>::value_type>)\n+\t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n \n       return __is_heap(__first, __last - __first);\n     }\n@@ -460,16 +460,16 @@ namespace __gnu_cxx\n    *  @ingroup SGIextensions\n    *  @doctodo\n   */\n-  template<typename _RandomAccessIter, typename _StrictWeakOrdering>\n+  template<typename _RandomAccessIterator, typename _StrictWeakOrdering>\n     inline bool\n-    is_heap(_RandomAccessIter __first, _RandomAccessIter __last,\n+    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t    _StrictWeakOrdering __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIter>)\n+      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_StrictWeakOrdering,\n-\t    typename iterator_traits<_RandomAccessIter>::value_type, \n-\t    typename iterator_traits<_RandomAccessIter>::value_type>)\n+\t    typename iterator_traits<_RandomAccessIterator>::value_type, \n+\t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n \n       return __is_heap(__first, __comp, __last - __first);\n     }\n@@ -483,19 +483,19 @@ namespace __gnu_cxx\n    *  @ingroup SGIextensions\n    *  @doctodo\n   */\n-  template<typename _ForwardIter>\n+  template<typename _ForwardIterator>\n     bool\n-    is_sorted(_ForwardIter __first, _ForwardIter __last)\n+    is_sorted(_ForwardIterator __first, _ForwardIterator __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_ForwardIter>::value_type>)\n+\t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n       if (__first == __last)\n \treturn true;\n \n-      _ForwardIter __next = __first;\n+      _ForwardIterator __next = __first;\n       for (++__next; __next != __last; __first = __next, ++__next) {\n \tif (*__next < *__first)\n \t  return false;\n@@ -509,20 +509,20 @@ namespace __gnu_cxx\n    *  @ingroup SGIextensions\n    *  @doctodo\n   */\n-  template<typename _ForwardIter, typename _StrictWeakOrdering>\n+  template<typename _ForwardIterator, typename _StrictWeakOrdering>\n     bool\n-    is_sorted(_ForwardIter __first, _ForwardIter __last, _StrictWeakOrdering __comp)\n+    is_sorted(_ForwardIterator __first, _ForwardIterator __last, _StrictWeakOrdering __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_StrictWeakOrdering,\n-\t    typename iterator_traits<_ForwardIter>::value_type, \n-\t    typename iterator_traits<_ForwardIter>::value_type>)\n+\t    typename iterator_traits<_ForwardIterator>::value_type, \n+\t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n       if (__first == __last)\n \treturn true;\n \n-      _ForwardIter __next = __first;\n+      _ForwardIterator __next = __first;\n       for (++__next; __next != __last; __first = __next, ++__next) {\n \tif (__comp(*__next, *__first))\n \t  return false;"}, {"sha": "780e2c2d69309c655d71282cac99bdd0b12e0f9a", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -474,10 +474,10 @@ private:\n   }\n \n   // Check whether it's an integral type.  If so, it's not an iterator.\n-  template <class _InIter>\n+  template <class _InIterator>\n   void _M_insert_after_range(_Node_base* __pos, \n-                             _InIter __first, _InIter __last) {\n-    typedef typename _Is_integer<_InIter>::_Integral _Integral;\n+                             _InIterator __first, _InIterator __last) {\n+    typedef typename _Is_integer<_InIterator>::_Integral _Integral;\n     _M_insert_after_range(__pos, __first, __last, _Integral());\n   }\n \n@@ -487,9 +487,9 @@ private:\n     _M_insert_after_fill(__pos, __n, __x);\n   }\n \n-  template <class _InIter>\n+  template <class _InIterator>\n   void _M_insert_after_range(_Node_base* __pos,\n-                             _InIter __first, _InIter __last,\n+                             _InIterator __first, _InIterator __last,\n                              __false_type) {\n     while (__first != __last) {\n       __pos = __slist_make_link(__pos, _M_create_node(*__first));\n@@ -513,8 +513,8 @@ public:\n \n   // We don't need any dispatching tricks here, because _M_insert_after_range\n   // already does them.\n-  template <class _InIter>\n-  void insert_after(iterator __pos, _InIter __first, _InIter __last) {\n+  template <class _InIterator>\n+  void insert_after(iterator __pos, _InIterator __first, _InIterator __last) {\n     _M_insert_after_range(__pos._M_node, __first, __last);\n   }\n \n@@ -537,8 +537,8 @@ public:\n     \n   // We don't need any dispatching tricks here, because _M_insert_after_range\n   // already does them.\n-  template <class _InIter>\n-  void insert(iterator __pos, _InIter __first, _InIter __last) {\n+  template <class _InIterator>\n+  void insert(iterator __pos, _InIterator __first, _InIterator __last) {\n     _M_insert_after_range(__slist_previous(&this->_M_head, __pos._M_node), \n                           __first, __last);\n   }\n@@ -678,9 +678,9 @@ void slist<_Tp, _Alloc>::_M_fill_assign(size_type __n, const _Tp& __val) {\n     this->_M_erase_after(__prev, 0);\n }\n \n-template <class _Tp, class _Alloc> template <class _InputIter>\n+template <class _Tp, class _Alloc> template <class _InputIterator>\n void\n-slist<_Tp, _Alloc>::_M_assign_dispatch(_InputIter __first, _InputIter __last,\n+slist<_Tp, _Alloc>::_M_assign_dispatch(_InputIterator __first, _InputIterator __last,\n                                        __false_type)\n {\n   _Node_base* __prev = &this->_M_head;"}, {"sha": "558389207c178b18b15023985210afdf3b46b5cd", "filename": "libstdc++-v3/include/std/std_bitset.h", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08addde65f43c677034228e6f8ed3577ec7489f1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h?ref=08addde65f43c677034228e6f8ed3577ec7489f1", "patch": "@@ -698,38 +698,38 @@ namespace std\n     /**\n      *  @brief  Use a subset of a string.\n      *  @param  s  A string of '0' and '1' characters.\n-     *  @param  pos  Index of the first character in @a s to use; defaults\n+     *  @param  position  Index of the first character in @a s to use; defaults\n      *               to zero.\n      *  @throw  std::out_of_range  If @a pos is bigger the size of @a s.\n      *  @throw  std::invalid_argument  If a character appears in the string\n      *                                 which is neither '0' nor '1'.\n     */\n     template<class _CharT, class _Traits, class _Alloc>\n       explicit bitset(const basic_string<_CharT, _Traits, _Alloc>& __s,\n-\t\t      size_t __pos = 0) : _Base()\n+\t\t      size_t __position = 0) : _Base()\n       {\n-\tif (__pos > __s.size())\n+\tif (__position > __s.size())\n \t  __throw_out_of_range(\"bitset::bitset initial position not valid\");\n-\t_M_copy_from_string(__s, __pos,\n+\t_M_copy_from_string(__s, __position,\n \t\t\t    basic_string<_CharT, _Traits, _Alloc>::npos);\n       }\n \n     /**\n      *  @brief  Use a subset of a string.\n      *  @param  s  A string of '0' and '1' characters.\n-     *  @param  pos  Index of the first character in @a s to use.\n+     *  @param  position  Index of the first character in @a s to use.\n      *  @param  n    The number of characters to copy.\n      *  @throw  std::out_of_range  If @a pos is bigger the size of @a s.\n      *  @throw  std::invalid_argument  If a character appears in the string\n      *                                 which is neither '0' nor '1'.\n     */\n     template<class _CharT, class _Traits, class _Alloc>\n       bitset(const basic_string<_CharT, _Traits, _Alloc>& __s,\n-\t     size_t __pos, size_t __n) : _Base()\n+\t     size_t __position, size_t __n) : _Base()\n       {\n-\tif (__pos > __s.size())\n+\tif (__position > __s.size())\n \t  __throw_out_of_range(\"bitset::bitset initial position not valid\");\n-\t_M_copy_from_string(__s, __pos, __n);\n+\t_M_copy_from_string(__s, __position, __n);\n       }\n \n     // 23.3.5.2 bitset operations:\n@@ -765,16 +765,16 @@ namespace std\n     //@{\n     /**\n      *  @brief  Operations on bitsets.\n-     *  @param  pos  The number of places to shift.\n+     *  @param  position  The number of places to shift.\n      *\n      *  These should be self-explanatory.\n     */\n     bitset<_Nb>&\n-    operator<<=(size_t __pos)\n+    operator<<=(size_t __position)\n     {\n-      if (__builtin_expect(__pos < _Nb, 1))\n+      if (__builtin_expect(__position < _Nb, 1))\n         {\n-          this->_M_do_left_shift(__pos);\n+          this->_M_do_left_shift(__position);\n           this->_M_do_sanitize();\n         }\n       else\n@@ -783,11 +783,11 @@ namespace std\n     }\n \n     bitset<_Nb>&\n-    operator>>=(size_t __pos)\n+    operator>>=(size_t __position)\n     {\n-      if (__builtin_expect(__pos < _Nb, 1))\n+      if (__builtin_expect(__position < _Nb, 1))\n         {\n-          this->_M_do_right_shift(__pos);\n+          this->_M_do_right_shift(__position);\n           this->_M_do_sanitize();\n         }\n       else\n@@ -855,16 +855,16 @@ namespace std\n \n     /**\n      *  @brief Sets a given bit to a particular value.\n-     *  @param  pos  The index of the bit.\n+     *  @param  position  The index of the bit.\n      *  @param  val  Either true or false, defaults to true.\n      *  @throw  std::out_of_range  If @a pos is bigger the size of the %set.\n     */\n     bitset<_Nb>&\n-    set(size_t __pos, bool __val = true)\n+    set(size_t __position, bool __val = true)\n     {\n-      if (__pos >= _Nb)\n+      if (__position >= _Nb)\n \t__throw_out_of_range(__N(\"bitset::set\"));\n-      return _Unchecked_set(__pos, __val);\n+      return _Unchecked_set(__position, __val);\n     }\n \n     /**\n@@ -879,17 +879,17 @@ namespace std\n \n     /**\n      *  @brief Sets a given bit to false.\n-     *  @param  pos  The index of the bit.\n+     *  @param  position  The index of the bit.\n      *  @throw  std::out_of_range  If @a pos is bigger the size of the %set.\n      *\n      *  Same as writing @c set(pos,false).\n     */\n     bitset<_Nb>&\n-    reset(size_t __pos)\n+    reset(size_t __position)\n     {\n-      if (__pos >= _Nb)\n+      if (__position >= _Nb)\n \t__throw_out_of_range(__N(\"bitset::reset\"));\n-      return _Unchecked_reset(__pos);\n+      return _Unchecked_reset(__position);\n     }\n \n     /**\n@@ -905,15 +905,15 @@ namespace std\n \n     /**\n      *  @brief Toggles a given bit to its opposite value.\n-     *  @param  pos  The index of the bit.\n+     *  @param  position  The index of the bit.\n      *  @throw  std::out_of_range  If @a pos is bigger the size of the %set.\n     */\n     bitset<_Nb>&\n-    flip(size_t __pos)\n+    flip(size_t __position)\n     {\n-      if (__pos >= _Nb)\n+      if (__position >= _Nb)\n \t__throw_out_of_range(__N(\"bitset::flip\"));\n-      return _Unchecked_flip(__pos);\n+      return _Unchecked_flip(__position);\n     }\n \n     /// See the no-argument flip().\n@@ -923,7 +923,7 @@ namespace std\n     //@{\n     /**\n      *  @brief  Array-indexing support.\n-     *  @param  pos  Index into the %bitset.\n+     *  @param  position  Index into the %bitset.\n      *  @return  A bool for a 'const %bitset'.  For non-const bitsets, an\n      *           instance of the reference proxy class.\n      *  @note  These operators do no range checking and throw no exceptions,\n@@ -938,10 +938,10 @@ namespace std\n      *  @endif\n     */\n     reference\n-    operator[](size_t __pos) { return reference(*this,__pos); }\n+    operator[](size_t __position) { return reference(*this,__position); }\n \n     bool\n-    operator[](size_t __pos) const { return _Unchecked_test(__pos); }\n+    operator[](size_t __position) const { return _Unchecked_test(__position); }\n     //@}\n \n     /**\n@@ -1007,16 +1007,16 @@ namespace std\n \n     /**\n      *  @brief Tests the value of a bit.\n-     *  @param  pos  The index of a bit.\n+     *  @param  position  The index of a bit.\n      *  @return  The value at @a pos.\n      *  @throw  std::out_of_range  If @a pos is bigger the size of the %set.\n     */\n     bool\n-    test(size_t __pos) const\n+    test(size_t __position) const\n     {\n-      if (__pos >= _Nb)\n+      if (__position >= _Nb)\n \t__throw_out_of_range(__N(\"bitset::test\"));\n-      return _Unchecked_test(__pos);\n+      return _Unchecked_test(__position);\n     }\n \n     /**\n@@ -1036,12 +1036,12 @@ namespace std\n     //@{\n     /// Self-explanatory.\n     bitset<_Nb>\n-    operator<<(size_t __pos) const\n-    { return bitset<_Nb>(*this) <<= __pos; }\n+    operator<<(size_t __position) const\n+    { return bitset<_Nb>(*this) <<= __position; }\n \n     bitset<_Nb>\n-    operator>>(size_t __pos) const\n-    { return bitset<_Nb>(*this) >>= __pos; }\n+    operator>>(size_t __position) const\n+    { return bitset<_Nb>(*this) >>= __position; }\n     //@}\n \n     /**"}]}