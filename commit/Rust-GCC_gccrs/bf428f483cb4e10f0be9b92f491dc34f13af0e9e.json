{"sha": "bf428f483cb4e10f0be9b92f491dc34f13af0e9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY0MjhmNDgzY2I0ZTEwZjBiZTliOTJmNDkxZGMzNGYxM2FmMGU5ZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-01T01:25:23Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-01T01:25:23Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1363", "tree": {"sha": "43d4f3c0e166ab150081f5634f45600d4c0cb569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43d4f3c0e166ab150081f5634f45600d4c0cb569"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf428f483cb4e10f0be9b92f491dc34f13af0e9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf428f483cb4e10f0be9b92f491dc34f13af0e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf428f483cb4e10f0be9b92f491dc34f13af0e9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf428f483cb4e10f0be9b92f491dc34f13af0e9e/comments", "author": null, "committer": null, "parents": [{"sha": "8fcd361eac822f38485d0010d41f401df79f2031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fcd361eac822f38485d0010d41f401df79f2031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fcd361eac822f38485d0010d41f401df79f2031"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "282d8578fd06d9be6fd9b5b0c34b42ccd7ab8351", "filename": "gcc/Makefile.in", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf428f483cb4e10f0be9b92f491dc34f13af0e9e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf428f483cb4e10f0be9b92f491dc34f13af0e9e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=bf428f483cb4e10f0be9b92f491dc34f13af0e9e", "patch": "@@ -87,13 +87,15 @@ CCLIBFLAGS = -O\n # Version of ar to use when compiling libgcc1.a.\n OLDAR = ar\n \n-# The GCC to use for compiling libgcc2.a.  Usually the one we just built.\n+# The GCC to use for compiling libgcc2.a, enquire, and cross-test.\n+# Usually the one we just built.\n # Don't use this as a dependency--use $(GCC_PASSES) or $(GCC_PARTS).\n GCC_FOR_TARGET = ./xgcc\n \n # This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.\n # It omits XCFLAGS, and specifies -B./.\n-GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) -B./\n+# It also specifies -B$(tooldir)/ to find as and ld for a cross compiler.\n+GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) -B./ -B$(tooldir)/\n \n # Special flags for compiling enquire.\n # We disable optimization to make floating point more reliable.\n@@ -327,12 +329,12 @@ SUBDIR_INCLUDES = -I.. -I../$(srcdir) -I../$(srcdir)/config\n COMPILERS = cc1 cc1plus cc1obj\n \n # Language-specific object files for C.\n-C_OBJS = c-parse.o c-lang.o \\\n-   c-lex.o c-decl.o c-typeck.o c-convert.o c-aux-info.o c-common.o\n+C_OBJS = c-parse.o c-lang.o c-lex.o \\\n+   c-decl.o c-typeck.o c-convert.o c-aux-info.o c-common.o c-pragma.o\n \n # Language-specific object files for Objectionable C.\n OBJC_OBJS = objc-parse.o objc-actions.o \\\n-   c-lex.o c-decl.o c-typeck.o c-convert.o c-aux-info.o c-common.o\n+   c-lex.o c-decl.o c-typeck.o c-convert.o c-aux-info.o c-common.o c-pragma.o\n \n # Language-specific object files for C++.\n CPLUS_OBJS = cp-parse.o cp-decl.o cp-decl2.o \\\n@@ -384,7 +386,7 @@ LIB2FUNCS = _muldi3 _divdi3 _moddi3 _udivdi3 _umoddi3 _negdi2 \\\n      _lshrdi3 _lshldi3 _ashldi3 _ashrdi3  \\\n     _udivmoddi4 _cmpdi2 _ucmpdi2 _floatdidf _floatdisf \\\n     _fixunsdfsi _fixunssfsi _fixunsdfdi _fixdfdi _fixunssfdi _fixsfdi \\\n-    _varargs _eprintf _builtin_new _builtin_New _builtin_del \\\n+    _varargs _eprintf _builtin_new _caps_New _builtin_del \\\n     _bb _shtab _clear_cache _trampoline __main _exit\n \n # Header files that are made available under the same name\n@@ -672,6 +674,7 @@ c-lex.o : c-lex.c $(CONFIG_H) $(TREE_H) c-lex.h c-tree.h c-parse.h \\\n     input.h flags.h\n c-aux-info.o : c-aux-info.c  $(CONFIG_H) $(TREE_H) c-tree.h flags.h\n c-convert.o : c-convert.c $(CONFIG_H) $(TREE_H) flags.h\n+c-pragma.o: c-pragma.c $(CONFIG_H) $(TREE_H)\n \n # C++ language specific files.\n \n@@ -837,7 +840,7 @@ sched.o : sched.c $(CONFIG_H) $(RTL_H) basic-block.h regs.h hard-reg-set.h \\\n    flags.h insn-config.h insn-attr.h\n final.o : final.c $(CONFIG_H) $(RTL_H) gvarargs.h flags.h regs.h \\\n    recog.h conditions.h insn-config.h insn-attr.h real.h output.h \\\n-   hard-reg-set.h insn-codes.h gstab.h xcoffout.h\n+   hard-reg-set.h insn-flags.h insn-codes.h gstab.h xcoffout.h\n recog.o : recog.c $(CONFIG_H) $(RTL_H)  \\\n    regs.h recog.h hard-reg-set.h flags.h insn-config.h insn-attr.h \\\n    insn-flags.h insn-codes.h real.h\n@@ -1600,17 +1603,17 @@ bootstrap: force\n # To prevent `make install' from compiling alloca.o and then relinking cc1\n # because alloca.o is newer, we permit these recursive makes to compile\n # alloca.o.  Then cc1 is newer, so it won't have to be relinked.\n-\t$(MAKE) CC=\"stage1/gcc -Bstage1/\" CFLAGS=\"$(BOOT_CFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"$(BOOT_CFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n \t$(MAKE) stage2\n-\t$(MAKE) CC=\"stage2/gcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n \n bootstrap2: force\n-\t$(MAKE) CC=\"stage1/gcc -Bstage1/\" CFLAGS=\"$(BOOT_CFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"$(BOOT_CFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n \t$(MAKE) stage2\n-\t$(MAKE) CC=\"stage2/gcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n \n bootstrap3: force\n-\t$(MAKE) CC=\"stage2/gcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n \n # Compare the object files in the current directory with those in the\n # stage2 directory."}]}