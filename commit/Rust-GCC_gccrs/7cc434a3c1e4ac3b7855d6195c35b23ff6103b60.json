{"sha": "7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NjNDM0YTNjMWU0YWMzYjc4NTVkNjE5NWMzNWIyM2ZmNjEwM2I2MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-02T11:41:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-02T11:41:35Z"}, "message": "tree-flow.h (make_rename_temp): Remove.\n\n2012-08-02  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-flow.h (make_rename_temp): Remove.\n\t* tree-dfa.c (make_rename_temp): Likewise.\n\t* cgraphunit.c (thunk_adjust, assemble_thunk): Use create_tmp_reg\n\tinstead of make_rename_temp.\n\t* omp-low.c (expand_omp_for_generic, expand_omp_for_static_nochunk,\n\texpand_omp_atomic_pipeline): Likewise.\n\t* trans-mem.c (tm_log_emit_save_or_restores, build_tm_load,\n\tbuild_tm_store, expand_call_tm, expand_transaction,\n\tipa_tm_insert_gettmclone_call): Likewise.\n\t* tree-complex.c (expand_complex_div_wide): Likewise.\n\t* tree-mudflap.c (mf_decl_cache_locals, mf_build_check_statement_for):\n\tLikewise.\n\t* tree-ssa-loop-im.c (execute_sm_if_changed_flag_set, execute_sm):\n\tLikewise.\n\t* tree-ssa-math-opts.c (insert_reciprocals): Likewise.\n\t* value-prof.c (gimple_divmod_fixed_value, gimple_mod_pow2,\n\tgimple_mod_subtract): Likewise.\n\nFrom-SVN: r190074", "tree": {"sha": "0e0dffe31ea1bae355b8df209a5c5e0b95682e5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e0dffe31ea1bae355b8df209a5c5e0b95682e5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "322445530d0742db2345197405f83bbf505acf9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/322445530d0742db2345197405f83bbf505acf9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/322445530d0742db2345197405f83bbf505acf9d"}], "stats": {"total": 95, "additions": 53, "deletions": 42}, "files": [{"sha": "27d5cbd30cf45e9e670fd161fd53e874e4f0a7ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "patch": "@@ -1,3 +1,23 @@\n+2012-08-02  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-flow.h (make_rename_temp): Remove.\n+\t* tree-dfa.c (make_rename_temp): Likewise.\n+\t* cgraphunit.c (thunk_adjust, assemble_thunk): Use create_tmp_reg\n+\tinstead of make_rename_temp.\n+\t* omp-low.c (expand_omp_for_generic, expand_omp_for_static_nochunk,\n+\texpand_omp_atomic_pipeline): Likewise.\n+\t* trans-mem.c (tm_log_emit_save_or_restores, build_tm_load,\n+\tbuild_tm_store, expand_call_tm, expand_transaction,\n+\tipa_tm_insert_gettmclone_call): Likewise.\n+\t* tree-complex.c (expand_complex_div_wide): Likewise.\n+\t* tree-mudflap.c (mf_decl_cache_locals, mf_build_check_statement_for):\n+\tLikewise.\n+\t* tree-ssa-loop-im.c (execute_sm_if_changed_flag_set, execute_sm):\n+\tLikewise.\n+\t* tree-ssa-math-opts.c (insert_reciprocals): Likewise.\n+\t* value-prof.c (gimple_divmod_fixed_value, gimple_mod_pow2,\n+\tgimple_mod_subtract): Likewise.\n+\n 2012-08-02  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-flow.h (set_default_def): Rename to ..."}, {"sha": "a6591b5c13314f5480b57525173d0d1a4bb26b9e", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "patch": "@@ -1280,7 +1280,7 @@ thunk_adjust (gimple_stmt_iterator * bsi,\n \t}\n \n       vtabletmp =\n-\tmake_rename_temp (build_pointer_type\n+\tcreate_tmp_reg (build_pointer_type\n \t\t\t  (build_pointer_type (vtable_entry_type)), \"vptr\");\n \n       /* The vptr is always at offset zero in the object.  */\n@@ -1290,7 +1290,7 @@ thunk_adjust (gimple_stmt_iterator * bsi,\n       gsi_insert_after (bsi, stmt, GSI_NEW_STMT);\n \n       /* Form the vtable address.  */\n-      vtabletmp2 = make_rename_temp (TREE_TYPE (TREE_TYPE (vtabletmp)),\n+      vtabletmp2 = create_tmp_reg (TREE_TYPE (TREE_TYPE (vtabletmp)),\n \t\t\t\t     \"vtableaddr\");\n       stmt = gimple_build_assign (vtabletmp2,\n \t\t\t\t  build_simple_mem_ref (vtabletmp));\n@@ -1304,7 +1304,7 @@ thunk_adjust (gimple_stmt_iterator * bsi,\n       gsi_insert_after (bsi, stmt, GSI_NEW_STMT);\n \n       /* Get the offset itself.  */\n-      vtabletmp3 = make_rename_temp (TREE_TYPE (TREE_TYPE (vtabletmp2)),\n+      vtabletmp3 = create_tmp_reg (TREE_TYPE (TREE_TYPE (vtabletmp2)),\n \t\t\t\t     \"vcalloffset\");\n       stmt = gimple_build_assign (vtabletmp3,\n \t\t\t\t  build_simple_mem_ref (vtabletmp2));\n@@ -1326,7 +1326,7 @@ thunk_adjust (gimple_stmt_iterator * bsi,\n         ptrtmp = ptr;\n       else\n         {\n-          ptrtmp = make_rename_temp (TREE_TYPE (ptr), \"ptr\");\n+          ptrtmp = create_tmp_reg (TREE_TYPE (ptr), \"ptr\");\n           stmt = gimple_build_assign (ptrtmp, ptr);\n \t  gsi_insert_after (bsi, stmt, GSI_NEW_STMT);\n \t}\n@@ -1335,7 +1335,7 @@ thunk_adjust (gimple_stmt_iterator * bsi,\n     }\n \n   /* Emit the statement and gimplify the adjustment expression.  */\n-  ret = make_rename_temp (TREE_TYPE (ptr), \"adjusted_this\");\n+  ret = create_tmp_reg (TREE_TYPE (ptr), \"adjusted_this\");\n   stmt = gimple_build_assign (ret, ptr);\n   gsi_insert_after (bsi, stmt, GSI_NEW_STMT);\n \n@@ -1440,7 +1440,7 @@ assemble_thunk (struct cgraph_node *node)\n \t      BLOCK_VARS (DECL_INITIAL (current_function_decl)) = restmp;\n \t    }\n \t  else\n-            restmp = make_rename_temp (restype, \"retval\");\n+\t    restmp = create_tmp_reg (restype, \"retval\");\n \t}\n \n       for (arg = a; arg; arg = DECL_CHAIN (arg))"}, {"sha": "190360f6320f3da034da6c738c6d691f2126316c", "filename": "gcc/omp-low.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "patch": "@@ -3811,7 +3811,7 @@ expand_omp_for_generic (struct omp_region *region,\n \t    counts[i] = t;\n \t  else\n \t    {\n-\t      counts[i] = make_rename_temp (type, \".count\");\n+\t      counts[i] = create_tmp_reg (type, \".count\");\n \t      t = force_gimple_operand_gsi (&gsi, t, false, NULL_TREE,\n \t\t\t\t\t    true, GSI_SAME_STMT);\n \t      stmt = gimple_build_assign (counts[i], t);\n@@ -3936,7 +3936,7 @@ expand_omp_for_generic (struct omp_region *region,\n \t\t\t\t   false, GSI_CONTINUE_LINKING);\n   if (fd->collapse > 1)\n     {\n-      tree tem = make_rename_temp (type, \".tem\");\n+      tree tem = create_tmp_reg (type, \".tem\");\n       stmt = gimple_build_assign (tem, fd->loop.v);\n       gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n       for (i = fd->collapse - 1; i >= 0; i--)\n@@ -4224,12 +4224,12 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n   t = fold_convert (itype, t);\n   n = force_gimple_operand_gsi (&gsi, t, true, NULL_TREE, true, GSI_SAME_STMT);\n \n-  q = make_rename_temp (itype, \"q\");\n+  q = create_tmp_reg (itype, \"q\");\n   t = fold_build2 (TRUNC_DIV_EXPR, itype, n, nthreads);\n   t = force_gimple_operand_gsi (&gsi, t, false, NULL_TREE, true, GSI_SAME_STMT);\n   gsi_insert_before (&gsi, gimple_build_assign (q, t), GSI_SAME_STMT);\n \n-  tt = make_rename_temp (itype, \"tt\");\n+  tt = create_tmp_reg (itype, \"tt\");\n   t = fold_build2 (TRUNC_MOD_EXPR, itype, n, nthreads);\n   t = force_gimple_operand_gsi (&gsi, t, false, NULL_TREE, true, GSI_SAME_STMT);\n   gsi_insert_before (&gsi, gimple_build_assign (tt, t), GSI_SAME_STMT);\n@@ -5289,8 +5289,8 @@ expand_omp_atomic_pipeline (basic_block load_bb, basic_block store_bb,\n     {\n       tree iaddr_val;\n \n-      iaddr = make_rename_temp (build_pointer_type_for_mode (itype, ptr_mode,\n-\t\t\t\t\t\t\t     true), NULL);\n+      iaddr = create_tmp_reg (build_pointer_type_for_mode (itype, ptr_mode,\n+\t\t\t\t\t\t\t   true), NULL);\n       iaddr_val\n \t= force_gimple_operand_gsi (&si,\n \t\t\t\t    fold_convert (TREE_TYPE (iaddr), addr),"}, {"sha": "edb678e8c1e4000b56592b57e9004c281bf8ed1e", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "patch": "@@ -1285,7 +1285,7 @@ tm_log_emit_save_or_restores (basic_block entry_block,\n   gsi = gsi_last_bb (cond_bb);\n \n   /* t1 = status & A_{property}.  */\n-  t1 = make_rename_temp (TREE_TYPE (status), NULL);\n+  t1 = create_tmp_reg (TREE_TYPE (status), NULL);\n   t2 = build_int_cst (TREE_TYPE (status), trxn_prop);\n   stmt = gimple_build_assign_with_ops (BIT_AND_EXPR, t1, status, t2);\n   gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n@@ -2057,7 +2057,7 @@ build_tm_load (location_t loc, tree lhs, tree rhs, gimple_stmt_iterator *gsi)\n       gimple g;\n       tree temp;\n \n-      temp = make_rename_temp (t, NULL);\n+      temp = create_tmp_reg (t, NULL);\n       gimple_call_set_lhs (gcall, temp);\n       gsi_insert_before (gsi, gcall, GSI_SAME_STMT);\n \n@@ -2135,7 +2135,7 @@ build_tm_store (location_t loc, tree lhs, tree rhs, gimple_stmt_iterator *gsi)\n       gimple g;\n       tree temp;\n \n-      temp = make_rename_temp (simple_type, NULL);\n+      temp = create_tmp_reg (simple_type, NULL);\n       t = fold_build1 (VIEW_CONVERT_EXPR, simple_type, rhs);\n       g = gimple_build_assign (temp, t);\n       gimple_set_location (g, loc);\n@@ -2302,7 +2302,7 @@ expand_call_tm (struct tm_region *region,\n   if (lhs && requires_barrier (region->entry_block, lhs, stmt)\n       && !gimple_call_return_slot_opt_p (stmt))\n     {\n-      tree tmp = make_rename_temp (TREE_TYPE (lhs), NULL);\n+      tree tmp = create_tmp_reg (TREE_TYPE (lhs), NULL);\n       location_t loc = gimple_location (stmt);\n       edge fallthru_edge = NULL;\n \n@@ -2638,7 +2638,7 @@ expand_transaction (struct tm_region *region)\n   int flags, subcode;\n \n   tm_start = builtin_decl_explicit (BUILT_IN_TM_START);\n-  status = make_rename_temp (TREE_TYPE (TREE_TYPE (tm_start)), \"tm_state\");\n+  status = create_tmp_reg (TREE_TYPE (TREE_TYPE (tm_start)), \"tm_state\");\n \n   /* ??? There are plenty of bits here we're not computing.  */\n   subcode = gimple_transaction_subcode (region->transaction_stmt);\n@@ -2695,7 +2695,7 @@ expand_transaction (struct tm_region *region)\n \tregion->entry_block = test_bb;\n       gsi = gsi_last_bb (test_bb);\n \n-      t1 = make_rename_temp (TREE_TYPE (status), NULL);\n+      t1 = create_tmp_reg (TREE_TYPE (status), NULL);\n       t2 = build_int_cst (TREE_TYPE (status), A_ABORTTRANSACTION);\n       g = gimple_build_assign_with_ops (BIT_AND_EXPR, t1, status, t2);\n       gsi_insert_after (&gsi, g, GSI_CONTINUE_LINKING);\n@@ -4499,7 +4499,7 @@ ipa_tm_insert_gettmclone_call (struct cgraph_node *node,\n     {\n       tree temp;\n \n-      temp = make_rename_temp (rettype, 0);\n+      temp = create_tmp_reg (rettype, 0);\n       gimple_call_set_lhs (stmt, temp);\n \n       g2 = gimple_build_assign (lhs,"}, {"sha": "28757d9015e043c743413fa8b9ff7e69953f28c4", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "patch": "@@ -1155,8 +1155,8 @@ expand_complex_div_wide (gimple_stmt_iterator *gsi, tree inner_type,\n           set_immediate_dominator (CDI_DOMINATORS, bb_false, bb_cond);\n         }\n \n-      rr = make_rename_temp (inner_type, NULL);\n-      ri = make_rename_temp (inner_type, NULL);\n+      rr = create_tmp_reg (inner_type, NULL);\n+      ri = create_tmp_reg (inner_type, NULL);\n     }\n \n   /* In the TRUE branch, we compute"}, {"sha": "12bb577df5e275319642666fe811bdd805c88f15", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "patch": "@@ -114,14 +114,6 @@ renumber_gimple_stmt_uids_in_blocks (basic_block *blocks, int n_blocks)\n     }\n }\n \n-/* Build a temporary.  Make sure and register it to be renamed.  */\n-\n-tree\n-make_rename_temp (tree type, const char *prefix)\n-{\n-  return create_tmp_reg (type, prefix);\n-}\n-\n \n \n /*---------------------------------------------------------------------------"}, {"sha": "2e6a1ae9a07a25c52f0d9f449edd7164ef8157b7", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "patch": "@@ -444,7 +444,6 @@ extern void dump_dfa_stats (FILE *);\n extern void debug_dfa_stats (void);\n extern void dump_variable (FILE *, tree);\n extern void debug_variable (tree);\n-extern tree make_rename_temp (tree, const char *);\n extern void set_ssa_default_def (struct function *, tree, tree);\n extern tree ssa_default_def (struct function *, tree);\n extern tree get_or_create_ssa_default_def (struct function *, tree);"}, {"sha": "775f8b9aa3decfff741f6a22a8bb4990614546f1", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "patch": "@@ -471,11 +471,11 @@ mf_decl_cache_locals (void)\n \n   /* Build the cache vars.  */\n   mf_cache_shift_decl_l\n-    = mf_mark (make_rename_temp (TREE_TYPE (mf_cache_shift_decl),\n+    = mf_mark (create_tmp_reg (TREE_TYPE (mf_cache_shift_decl),\n                                \"__mf_lookup_shift_l\"));\n \n   mf_cache_mask_decl_l\n-    = mf_mark (make_rename_temp (TREE_TYPE (mf_cache_mask_decl),\n+    = mf_mark (create_tmp_reg (TREE_TYPE (mf_cache_mask_decl),\n                                \"__mf_lookup_mask_l\"));\n \n   /* Build initialization nodes for the cache vars.  We just load the\n@@ -562,9 +562,9 @@ mf_build_check_statement_for (tree base, tree limit,\n     add_bb_to_loop (then_bb, cond_bb->loop_father);\n \n   /* Build our local variables.  */\n-  mf_elem = make_rename_temp (mf_cache_structptr_type, \"__mf_elem\");\n-  mf_base = make_rename_temp (mf_uintptr_type, \"__mf_base\");\n-  mf_limit = make_rename_temp (mf_uintptr_type, \"__mf_limit\");\n+  mf_elem = create_tmp_reg (mf_cache_structptr_type, \"__mf_elem\");\n+  mf_base = create_tmp_reg (mf_uintptr_type, \"__mf_base\");\n+  mf_limit = create_tmp_reg (mf_uintptr_type, \"__mf_limit\");\n \n   /* Build: __mf_base = (uintptr_t) <base address expression>.  */\n   seq = NULL;\n@@ -645,7 +645,7 @@ mf_build_check_statement_for (tree base, tree limit,\n   t = build2 (TRUTH_OR_EXPR, boolean_type_node, t, u);\n   t = force_gimple_operand (t, &stmts, false, NULL_TREE);\n   gimple_seq_add_seq (&seq, stmts);\n-  cond = make_rename_temp (boolean_type_node, \"__mf_unlikely_cond\");\n+  cond = create_tmp_reg (boolean_type_node, \"__mf_unlikely_cond\");\n   g = gimple_build_assign  (cond, t);\n   gimple_set_location (g, location);\n   gimple_seq_add_stmt (&seq, g);"}, {"sha": "e0d4bf21590933f69c1d8f45158095ad75548d9c", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "patch": "@@ -2120,7 +2120,7 @@ execute_sm_if_changed_flag_set (struct loop *loop, mem_ref_p ref)\n   char *str = get_lsm_tmp_name (ref->mem, ~0);\n \n   lsm_tmp_name_add (\"_flag\");\n-  flag = make_rename_temp (boolean_type_node, str);\n+  flag = create_tmp_reg (boolean_type_node, str);\n   get_all_locs_in_loop (loop, ref, &locs);\n   FOR_EACH_VEC_ELT (mem_ref_loc_p, locs, i, loc)\n     {\n@@ -2158,7 +2158,7 @@ execute_sm (struct loop *loop, VEC (edge, heap) *exits, mem_ref_p ref)\n       fprintf (dump_file, \" from loop %d\\n\", loop->num);\n     }\n \n-  tmp_var = make_rename_temp (TREE_TYPE (ref->mem),\n+  tmp_var = create_tmp_reg (TREE_TYPE (ref->mem),\n \t\t\t      get_lsm_tmp_name (ref->mem, ~0));\n \n   fmt_data.loop = loop;"}, {"sha": "2a37abe0f1388cea39749e3f69de5dfdf6211de6", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "patch": "@@ -345,7 +345,7 @@ insert_reciprocals (gimple_stmt_iterator *def_gsi, struct occurrence *occ,\n     {\n       /* Make a variable with the replacement and substitute it.  */\n       type = TREE_TYPE (def);\n-      recip_def = make_rename_temp (type, \"reciptmp\");\n+      recip_def = create_tmp_reg (type, \"reciptmp\");\n       new_stmt = gimple_build_assign_with_ops (RDIV_EXPR, recip_def,\n \t\t\t\t\t       build_one_cst (type), def);\n "}, {"sha": "6f57e7008be153906790ebd3b1ffc98873f1ece9", "filename": "gcc/value-prof.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc434a3c1e4ac3b7855d6195c35b23ff6103b60/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=7cc434a3c1e4ac3b7855d6195c35b23ff6103b60", "patch": "@@ -623,7 +623,7 @@ gimple_divmod_fixed_value (gimple stmt, tree value, int prob, gcov_type count,\n   gsi_insert_before (&gsi, stmt3, GSI_SAME_STMT);\n   bb1end = stmt3;\n \n-  tmp2 = make_rename_temp (optype, \"PROF\");\n+  tmp2 = create_tmp_reg (optype, \"PROF\");\n   stmt1 = gimple_build_assign_with_ops (gimple_assign_rhs_code (stmt), tmp2,\n \t\t\t\t\top1, tmp0);\n   gsi_insert_before (&gsi, stmt1, GSI_SAME_STMT);\n@@ -767,7 +767,7 @@ gimple_mod_pow2 (gimple stmt, int prob, gcov_type count, gcov_type all)\n   bb = gimple_bb (stmt);\n   gsi = gsi_for_stmt (stmt);\n \n-  result = make_rename_temp (optype, \"PROF\");\n+  result = create_tmp_reg (optype, \"PROF\");\n   tmpv = create_tmp_var (optype, \"PROF\");\n   tmp2 = make_ssa_name (tmpv, NULL);\n   tmp3 = make_ssa_name (tmpv, NULL);\n@@ -923,7 +923,7 @@ gimple_mod_subtract (gimple stmt, int prob1, int prob2, int ncounts,\n   bb = gimple_bb (stmt);\n   gsi = gsi_for_stmt (stmt);\n \n-  result = make_rename_temp (optype, \"PROF\");\n+  result = create_tmp_reg (optype, \"PROF\");\n   tmp1 = make_ssa_name (create_tmp_var (optype, \"PROF\"), NULL);\n   stmt1 = gimple_build_assign (result, op1);\n   stmt2 = gimple_build_assign (tmp1, op2);"}]}