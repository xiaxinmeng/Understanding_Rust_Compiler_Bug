{"sha": "3f07249e98a147a94675a5427f73ca0b0ce3ef9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YwNzI0OWU5OGExNDdhOTQ2NzVhNTQyN2Y3M2NhMGIwY2UzZWY5Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2006-10-29T18:20:45Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-10-29T18:20:45Z"}, "message": "mips.md (mul<mode>3): Check ISA_HAS_MUL3 rather than GENERATE_MULT3_<MODE>.\n\ngcc/\n\t* config/mips/mips.md (mul<mode>3): Check ISA_HAS_MUL3 rather than\n\tGENERATE_MULT3_<MODE>.  Restrict the test to SImode.  Use ISA_HAS_MUL3\n\trather than GENERATE_MULT3_SI in the various define_peephole2s.\n\t(mulsi3_mult3): Depend on ISA_HAS_MUL3 rather than GENERATE_MULT3_SI.\n\tUse an inclusive test for \"mult\" rather than \"mul\".\n\t(rotr<mode>3): Depend on ISA_HAS_ROR.\n\t* config/mips/mips.h (GENERATE_MULT3_SI): Delete in favor of\n\tISA_HAS_MUL3.\n\t(GENERATE_MULT3_DI): Delete.\n\t(ISA_HAS_64BIT_REGS): Use consistent formatting.\n\t(ISA_HAS_MUL3): New macro.\n\t(ISA_HAS_CONDMOVE, ISA_HAS_8CC): Use consistent formatting.\n\t(ISA_HAS_FP4, ISA_HAS_MADD_MSUB, ISA_HAS_NMADD_NMSUB): Likewise.\n\t(ISA_HAS_CLZ_CLO): Likewise.\n\t(ISA_HAS_DCLZ_DCLO): Delete.\n\t(ISA_HAS_MULHI, ISA_HAS_MULS, ISA_HAS_MSAC): Require !TARGET_MIPS16.\n\t(ISA_HAS_MACC): Require !TARGET_MIPS16 for all ISAs, not just\n\tthe VR4120 and VR4130.\n\t(ISA_HAS_MACCHI): Use consistent formatting.\n\t(ISA_HAS_ROTR_SI, ISA_HAS_ROTR_DI): Delete in favor of...\n\t(ISA_HAS_ROR): ...this new macro.\n\t(ISA_HAS_PREFETCH, ISA_HAS_PREFETCHX): Use consistent formatting.\n\t(ISA_HAS_SEB_SEH, ISA_HAS_EXT_INS): Likewise.\n\t(ISA_HAS_LOAD_DELAY): Use ISA_MIPS1.\n\nFrom-SVN: r118153", "tree": {"sha": "fbb92ee38e04ce8d49bbacacef4f6e6377f30e50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbb92ee38e04ce8d49bbacacef4f6e6377f30e50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f07249e98a147a94675a5427f73ca0b0ce3ef9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f07249e98a147a94675a5427f73ca0b0ce3ef9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f07249e98a147a94675a5427f73ca0b0ce3ef9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f07249e98a147a94675a5427f73ca0b0ce3ef9b/comments", "author": null, "committer": null, "parents": [{"sha": "f8ed9a1c654104efd3cc124f52a4e14f396b43ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ed9a1c654104efd3cc124f52a4e14f396b43ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8ed9a1c654104efd3cc124f52a4e14f396b43ad"}], "stats": {"total": 222, "additions": 106, "deletions": 116}, "files": [{"sha": "920d31da62b29319cddadfdb94ee3a94e3316a34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f07249e98a147a94675a5427f73ca0b0ce3ef9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f07249e98a147a94675a5427f73ca0b0ce3ef9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f07249e98a147a94675a5427f73ca0b0ce3ef9b", "patch": "@@ -1,3 +1,30 @@\n+2006-10-29  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/mips/mips.md (mul<mode>3): Check ISA_HAS_MUL3 rather than\n+\tGENERATE_MULT3_<MODE>.  Restrict the test to SImode.  Use ISA_HAS_MUL3\n+\trather than GENERATE_MULT3_SI in the various define_peephole2s.\n+\t(mulsi3_mult3): Depend on ISA_HAS_MUL3 rather than GENERATE_MULT3_SI.\n+\tUse an inclusive test for \"mult\" rather than \"mul\".\n+\t(rotr<mode>3): Depend on ISA_HAS_ROR.\n+\t* config/mips/mips.h (GENERATE_MULT3_SI): Delete in favor of\n+\tISA_HAS_MUL3.\n+\t(GENERATE_MULT3_DI): Delete.\n+\t(ISA_HAS_64BIT_REGS): Use consistent formatting.\n+\t(ISA_HAS_MUL3): New macro.\n+\t(ISA_HAS_CONDMOVE, ISA_HAS_8CC): Use consistent formatting.\n+\t(ISA_HAS_FP4, ISA_HAS_MADD_MSUB, ISA_HAS_NMADD_NMSUB): Likewise.\n+\t(ISA_HAS_CLZ_CLO): Likewise.\n+\t(ISA_HAS_DCLZ_DCLO): Delete.\n+\t(ISA_HAS_MULHI, ISA_HAS_MULS, ISA_HAS_MSAC): Require !TARGET_MIPS16.\n+\t(ISA_HAS_MACC): Require !TARGET_MIPS16 for all ISAs, not just\n+\tthe VR4120 and VR4130.\n+\t(ISA_HAS_MACCHI): Use consistent formatting.\n+\t(ISA_HAS_ROTR_SI, ISA_HAS_ROTR_DI): Delete in favor of...\n+\t(ISA_HAS_ROR): ...this new macro.\n+\t(ISA_HAS_PREFETCH, ISA_HAS_PREFETCHX): Use consistent formatting.\n+\t(ISA_HAS_SEB_SEH, ISA_HAS_EXT_INS): Likewise.\n+\t(ISA_HAS_LOAD_DELAY): Use ISA_MIPS1.\n+\n 2006-10-29  Roger Sayle  <roger@eyesopen.com>\n \n \tPR tree-optimization/15458"}, {"sha": "9e2542f552bf0493a043b54208a39393ef3abb50", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 69, "deletions": 88, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f07249e98a147a94675a5427f73ca0b0ce3ef9b/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f07249e98a147a94675a5427f73ca0b0ce3ef9b/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=3f07249e98a147a94675a5427f73ca0b0ce3ef9b", "patch": "@@ -553,22 +553,6 @@ extern const struct mips_rtx_cost_data *mips_cost;\n \t\t\t\t && !TARGET_SR71K                       \\\n \t\t\t\t && !TARGET_MIPS16)\n \n-/* Generate three-operand multiply instructions for SImode.  */\n-#define GENERATE_MULT3_SI       ((TARGET_MIPS3900                       \\\n-                                  || TARGET_MIPS5400                    \\\n-                                  || TARGET_MIPS5500                    \\\n-                                  || TARGET_MIPS7000                    \\\n-                                  || TARGET_MIPS9000                    \\\n-\t\t\t\t  || TARGET_MAD\t\t\t\t\\\n-                                  || ISA_MIPS32\t                        \\\n-                                  || ISA_MIPS32R2                       \\\n-                                  || ISA_MIPS64)                        \\\n-                                 && !TARGET_MIPS16)\n-\n-/* Generate three-operand multiply instructions for DImode.  */\n-#define GENERATE_MULT3_DI       ((TARGET_MIPS3900)                      \\\n-\t\t\t\t && !TARGET_MIPS16)\n-\n /* True if the ABI can only work with 64-bit integer registers.  We\n    generally allow ad-hoc variations for TARGET_SINGLE_FLOAT, but\n    otherwise floating-point registers must also be 64-bit.  */\n@@ -584,146 +568,143 @@ extern const struct mips_rtx_cost_data *mips_cost;\n /* ISA has instructions for managing 64 bit fp and gp regs (e.g. mips3).  */\n #define ISA_HAS_64BIT_REGS\t(ISA_MIPS3\t\t\t\t\\\n \t\t\t\t || ISA_MIPS4\t\t\t\t\\\n-                                 || ISA_MIPS64)\n+\t\t\t\t || ISA_MIPS64)\n \n /* ISA has branch likely instructions (e.g. mips2).  */\n /* Disable branchlikely for tx39 until compare rewrite.  They haven't\n    been generated up to this point.  */\n #define ISA_HAS_BRANCHLIKELY\t(!ISA_MIPS1)\n \n+/* ISA has a three-operand multiplcation instruction (usually spelt \"mul\").  */\n+#define ISA_HAS_MUL3\t\t((TARGET_MIPS3900                       \\\n+\t\t\t\t  || TARGET_MIPS5400\t\t\t\\\n+\t\t\t\t  || TARGET_MIPS5500\t\t\t\\\n+\t\t\t\t  || TARGET_MIPS7000\t\t\t\\\n+\t\t\t\t  || TARGET_MIPS9000\t\t\t\\\n+\t\t\t\t  || TARGET_MAD\t\t\t\t\\\n+\t\t\t\t  || ISA_MIPS32\t\t\t\t\\\n+\t\t\t\t  || ISA_MIPS32R2\t\t\t\\\n+\t\t\t\t  || ISA_MIPS64)\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n+\n /* ISA has the conditional move instructions introduced in mips4.  */\n-#define ISA_HAS_CONDMOVE        ((ISA_MIPS4\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS32\t                        \\\n-\t\t\t\t  || ISA_MIPS32R2                       \\\n+#define ISA_HAS_CONDMOVE\t((ISA_MIPS4\t\t\t\t\\\n+\t\t\t\t  || ISA_MIPS32\t\t\t\t\\\n+\t\t\t\t  || ISA_MIPS32R2\t\t\t\\\n \t\t\t\t  || ISA_MIPS64)\t\t\t\\\n-                                 && !TARGET_MIPS5500                    \\\n+\t\t\t\t && !TARGET_MIPS5500\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has the mips4 FP condition code instructions: FP-compare to CC,\n    branch on CC, and move (both FP and non-FP) on CC.  */\n #define ISA_HAS_8CC\t\t(ISA_MIPS4\t\t\t\t\\\n-                         \t || ISA_MIPS32\t                        \\\n-                         \t || ISA_MIPS32R2                        \\\n+\t\t\t\t || ISA_MIPS32\t\t\t\t\\\n+\t\t\t\t || ISA_MIPS32R2\t\t\t\\\n \t\t\t\t || ISA_MIPS64)\n \n /* This is a catch all for other mips4 instructions: indexed load, the\n    FP madd and msub instructions, and the FP recip and recip sqrt\n    instructions.  */\n-#define ISA_HAS_FP4             ((ISA_MIPS4\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64)       \t\t\t\\\n- \t\t\t\t && !TARGET_MIPS16)\n+#define ISA_HAS_FP4\t\t((ISA_MIPS4\t\t\t\t\\\n+\t\t\t\t  || ISA_MIPS64)\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has conditional trap instructions.  */\n #define ISA_HAS_COND_TRAP\t(!ISA_MIPS1\t\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has integer multiply-accumulate instructions, madd and msub.  */\n-#define ISA_HAS_MADD_MSUB       ((ISA_MIPS32\t\t\t\t\\\n+#define ISA_HAS_MADD_MSUB\t((ISA_MIPS32\t\t\t\t\\\n \t\t\t\t  || ISA_MIPS32R2\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64\t\t\t\t\\\n-\t\t\t\t  ) && !TARGET_MIPS16)\n+\t\t\t\t  || ISA_MIPS64)\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has floating-point nmadd and nmsub instructions.  */\n #define ISA_HAS_NMADD_NMSUB\t((ISA_MIPS4\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64)       \t\t\t\\\n-                                 && (!TARGET_MIPS5400 || TARGET_MAD)    \\\n-\t\t\t\t && ! TARGET_MIPS16)\n+\t\t\t\t  || ISA_MIPS64)\t\t\t\\\n+\t\t\t\t && (!TARGET_MIPS5400 || TARGET_MAD)\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has count leading zeroes/ones instruction (not implemented).  */\n-#define ISA_HAS_CLZ_CLO         ((ISA_MIPS32\t\t\t\t\\\n-                                  || ISA_MIPS32R2\t\t\t\\\n-                                  || ISA_MIPS64\t\t\t\t\\\n-                                 ) && !TARGET_MIPS16)\n-\n-/* ISA has double-word count leading zeroes/ones instruction (not\n-   implemented).  */\n-#define ISA_HAS_DCLZ_DCLO       (ISA_MIPS64\t\t\t\t\\\n+#define ISA_HAS_CLZ_CLO\t\t((ISA_MIPS32\t\t\t\t\\\n+\t\t\t\t  || ISA_MIPS32R2\t\t\t\\\n+\t\t\t\t  || ISA_MIPS64)\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has three operand multiply instructions that put\n    the high part in an accumulator: mulhi or mulhiu.  */\n-#define ISA_HAS_MULHI           (TARGET_MIPS5400                        \\\n-                                 || TARGET_MIPS5500                     \\\n-                                 || TARGET_SR71K                        \\\n-                                 )\n+#define ISA_HAS_MULHI\t\t((TARGET_MIPS5400\t\t\t \\\n+\t\t\t\t  || TARGET_MIPS5500\t\t\t \\\n+\t\t\t\t  || TARGET_SR71K)\t\t\t \\\n+\t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has three operand multiply instructions that\n    negates the result and puts the result in an accumulator.  */\n-#define ISA_HAS_MULS            (TARGET_MIPS5400                        \\\n-                                 || TARGET_MIPS5500                     \\\n-                                 || TARGET_SR71K                        \\\n-                                 )\n+#define ISA_HAS_MULS\t\t((TARGET_MIPS5400\t\t\t\\\n+\t\t\t\t  || TARGET_MIPS5500\t\t\t\\\n+\t\t\t\t  || TARGET_SR71K)\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has three operand multiply instructions that subtracts the\n    result from a 4th operand and puts the result in an accumulator.  */\n-#define ISA_HAS_MSAC            (TARGET_MIPS5400                        \\\n-                                 || TARGET_MIPS5500                     \\\n-                                 || TARGET_SR71K                        \\\n-                                 )\n+#define ISA_HAS_MSAC\t\t((TARGET_MIPS5400\t\t\t\\\n+\t\t\t\t  || TARGET_MIPS5500\t\t\t\\\n+\t\t\t\t  || TARGET_SR71K)\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n+\n /* ISA has three operand multiply instructions that  the result\n    from a 4th operand and puts the result in an accumulator.  */\n-#define ISA_HAS_MACC            ((TARGET_MIPS4120 && !TARGET_MIPS16)\t\\\n-                                 || (TARGET_MIPS4130 && !TARGET_MIPS16)\t\\\n-                                 || TARGET_MIPS5400                     \\\n-                                 || TARGET_MIPS5500                     \\\n-                                 || TARGET_SR71K                        \\\n-                                 )\n+#define ISA_HAS_MACC\t\t((TARGET_MIPS4120\t\t\t\\\n+\t\t\t\t  || TARGET_MIPS4130\t\t\t\\\n+\t\t\t\t  || TARGET_MIPS5400\t\t\t\\\n+\t\t\t\t  || TARGET_MIPS5500\t\t\t\\\n+\t\t\t\t  || TARGET_SR71K)\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has NEC VR-style MACC, MACCHI, DMACC and DMACCHI instructions.  */\n-#define ISA_HAS_MACCHI\t\t(!TARGET_MIPS16\t\t\t\t\\\n-\t\t\t\t && (TARGET_MIPS4120\t\t\t\\\n-\t\t\t\t     || TARGET_MIPS4130))\n-\n-/* ISA has 32-bit rotate right instruction.  */\n-#define ISA_HAS_ROTR_SI         (!TARGET_MIPS16                         \\\n-                                 && (ISA_MIPS32R2                       \\\n-                                     || TARGET_MIPS5400                 \\\n-                                     || TARGET_MIPS5500                 \\\n-                                     || TARGET_SR71K                    \\\n-                                     ))\n-\n-/* ISA has 64-bit rotate right instruction.  */\n-#define ISA_HAS_ROTR_DI         (TARGET_64BIT                           \\\n-                                 && !TARGET_MIPS16                      \\\n-                                 && (TARGET_MIPS5400                    \\\n-                                     || TARGET_MIPS5500                 \\\n-                                     || TARGET_SR71K                    \\\n-                                     ))\n+#define ISA_HAS_MACCHI\t\t((TARGET_MIPS4120\t\t\t\\\n+\t\t\t\t  || TARGET_MIPS4130)\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n+\n+/* ISA has the \"ror\" (rotate right) instructions.  */\n+#define ISA_HAS_ROR\t\t((ISA_MIPS32R2\t\t\t\t\\\n+\t\t\t\t  || TARGET_MIPS5400\t\t\t\\\n+\t\t\t\t  || TARGET_MIPS5500\t\t\t\\\n+\t\t\t\t  || TARGET_SR71K)\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has data prefetch instructions.  This controls use of 'pref'.  */\n #define ISA_HAS_PREFETCH\t((ISA_MIPS4\t\t\t\t\\\n \t\t\t\t  || ISA_MIPS32\t\t\t\t\\\n \t\t\t\t  || ISA_MIPS32R2\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64)\t       \t\t\\\n+\t\t\t\t  || ISA_MIPS64)\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has data indexed prefetch instructions.  This controls use of\n    'prefx', along with TARGET_HARD_FLOAT and TARGET_DOUBLE_FLOAT.\n    (prefx is a cop1x instruction, so can only be used if FP is\n    enabled.)  */\n-#define ISA_HAS_PREFETCHX       ((ISA_MIPS4\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64)       \t\t\t\\\n- \t\t\t\t && !TARGET_MIPS16)\n+#define ISA_HAS_PREFETCHX\t((ISA_MIPS4\t\t\t\t\\\n+\t\t\t\t  || ISA_MIPS64)\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n \n /* True if trunc.w.s and trunc.w.d are real (not synthetic)\n    instructions.  Both require TARGET_HARD_FLOAT, and trunc.w.d\n    also requires TARGET_DOUBLE_FLOAT.  */\n #define ISA_HAS_TRUNC_W\t\t(!ISA_MIPS1)\n \n /* ISA includes the MIPS32r2 seb and seh instructions.  */\n-#define ISA_HAS_SEB_SEH         (!TARGET_MIPS16                        \\\n-                                 && (ISA_MIPS32R2                      \\\n-                                     ))\n+#define ISA_HAS_SEB_SEH\t\t(ISA_MIPS32R2\t\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n \n /* ISA includes the MIPS32/64 rev 2 ext and ins instructions.  */\n-#define ISA_HAS_EXT_INS         (!TARGET_MIPS16                        \\\n-                                 && (ISA_MIPS32R2                      \\\n-                                     ))\n+#define ISA_HAS_EXT_INS\t\t(ISA_MIPS32R2\t\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n \n /* True if the result of a load is not available to the next instruction.\n    A nop will then be needed between instructions like \"lw $4,...\"\n    and \"addiu $4,$4,1\".  */\n-#define ISA_HAS_LOAD_DELAY\t(mips_isa == 1\t\t\t\t\\\n+#define ISA_HAS_LOAD_DELAY\t(ISA_MIPS1\t\t\t\t\\\n \t\t\t\t && !TARGET_MIPS3900\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n "}, {"sha": "661387149147cb7f35fc9efd91d78ead9d5785cc", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f07249e98a147a94675a5427f73ca0b0ce3ef9b/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f07249e98a147a94675a5427f73ca0b0ce3ef9b/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=3f07249e98a147a94675a5427f73ca0b0ce3ef9b", "patch": "@@ -1014,7 +1014,7 @@\n \t\t  (match_operand:GPR 2 \"register_operand\")))]\n   \"\"\n {\n-  if (GENERATE_MULT3_<MODE>)\n+  if (<MODE>mode == SImode && ISA_HAS_MUL3)\n     emit_insn (gen_mul<mode>3_mult3 (operands[0], operands[1], operands[2]));\n   else if (!TARGET_FIX_R4000)\n     emit_insn (gen_mul<mode>3_internal (operands[0], operands[1],\n@@ -1030,35 +1030,17 @@\n \t\t (match_operand:SI 2 \"register_operand\" \"d,d\")))\n    (clobber (match_scratch:SI 3 \"=h,h\"))\n    (clobber (match_scratch:SI 4 \"=l,X\"))]\n-  \"GENERATE_MULT3_SI\"\n+  \"ISA_HAS_MUL3\"\n {\n   if (which_alternative == 1)\n     return \"mult\\t%1,%2\";\n-  if (TARGET_MAD\n-      || TARGET_MIPS5400\n-      || TARGET_MIPS5500\n-      || TARGET_MIPS7000\n-      || TARGET_MIPS9000\n-      || ISA_MIPS32\n-      || ISA_MIPS32R2\n-      || ISA_MIPS64)\n-    return \"mul\\t%0,%1,%2\";\n-  return \"mult\\t%0,%1,%2\";\n+  if (TARGET_MIPS3900)\n+    return \"mult\\t%0,%1,%2\";\n+  return \"mul\\t%0,%1,%2\";\n }\n   [(set_attr \"type\" \"imul3,imul\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"muldi3_mult3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(mult:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t (match_operand:DI 2 \"register_operand\" \"d\")))\n-   (clobber (match_scratch:DI 3 \"=h\"))\n-   (clobber (match_scratch:DI 4 \"=l\"))]\n-  \"TARGET_64BIT && GENERATE_MULT3_DI\"\n-  \"dmult\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"imul3\")\n-   (set_attr \"mode\" \"DI\")])\n-\n ;; If a register gets allocated to LO, and we spill to memory, the reload\n ;; will include a move from LO to a GPR.  Merge it into the multiplication\n ;; if it can set the GPR directly.\n@@ -1077,7 +1059,7 @@\n         (clobber (scratch:SI))])\n    (set (match_operand:SI 4 \"register_operand\")\n \t(unspec [(match_dup 0) (match_dup 3)] UNSPEC_MFHILO))]\n-  \"GENERATE_MULT3_SI && peep2_reg_dead_p (2, operands[0])\"\n+  \"ISA_HAS_MUL3 && peep2_reg_dead_p (2, operands[0])\"\n   [(parallel\n        [(set (match_dup 4)\n \t     (mult:SI (match_dup 1)\n@@ -1124,7 +1106,7 @@\n         (clobber (match_operand:SI 3 \"register_operand\"))])\n    (set (match_operand:SI 4 \"register_operand\")\n \t(unspec:SI [(match_dup 0) (match_dup 3)] UNSPEC_MFHILO))]\n-  \"ISA_HAS_MACC && !GENERATE_MULT3_SI\"\n+  \"ISA_HAS_MACC && !ISA_HAS_MUL3\"\n   [(set (match_dup 0)\n \t(const_int 0))\n    (parallel\n@@ -1359,7 +1341,7 @@\n \t     (match_operand:SI 4 \"macc_msac_operand\"))\n \t(clobber (match_operand:SI 5 \"register_operand\"))\n \t(clobber (match_dup 1))])]\n-  \"GENERATE_MULT3_SI\n+  \"ISA_HAS_MUL3\n    && true_regnum (operands[1]) == LO_REGNUM\n    && peep2_reg_dead_p (2, operands[1])\n    && GP_REG_P (true_regnum (operands[3]))\"\n@@ -1398,7 +1380,7 @@\n    (match_dup 0)\n    (set (match_operand:SI 5 \"register_operand\")\n \t(unspec:SI [(match_dup 1) (match_dup 4)] UNSPEC_MFHILO))]\n-  \"GENERATE_MULT3_SI && peep2_reg_dead_p (3, operands[1])\"\n+  \"ISA_HAS_MUL3 && peep2_reg_dead_p (3, operands[1])\"\n   [(parallel [(set (match_dup 0)\n \t\t   (match_dup 6))\n \t      (clobber (match_dup 4))\n@@ -4259,7 +4241,7 @@\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n \t(rotatert:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n \t\t      (match_operand:SI 2 \"arith_operand\" \"dI\")))]\n-  \"ISA_HAS_ROTR_<MODE>\"\n+  \"ISA_HAS_ROR\"\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n     gcc_assert (INTVAL (operands[2]) >= 0"}]}