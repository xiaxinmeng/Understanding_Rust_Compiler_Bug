{"sha": "199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk5Zjg0N2M5ODE5YjZjYjJjMzZmMTA5ZTUzZDFlZjBhZDhhY2U4Mw==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2013-12-03T10:58:05Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2013-12-03T10:58:05Z"}, "message": "Fix some testcases for nds32 target and provide new nds32 target specific tests.\n\ngcc/testsuite/\n\t* gcc.dg/20020312-2.c: Add __nds32__ case.\n\t* gcc.dg/builtin-apply2.c: Skip for nds32*-*-*.\n\t* gcc.dg/sibcall-3.c: Expected fail for nds32*-*-*.\n\t* gcc.dg/sibcall-4.c: Expected fail for nds32*-*-*.\n\t* gcc.dg/stack-usage-1.c (SIZE): Define case for __nds32__.\n\t* gcc.dg/torture/pr37868.c: Skip for nds32*-*-*.\n\t* gcc.dg/torture/stackalign/builtin-apply-2.c: Skip for nds32*-*-*.\n\t* gcc.dg/tree-ssa/20040204-1.c: Expected fail for nds32*-*-*.\n\t* gcc.dg/tree-ssa/pr42585.c: Skip for nds32*-*-*.\n\t* gcc.dg/tree-ssa/sra-12.c: Skip for nds32*-*-*.\n\t* gcc.target/nds32: New nds32 specific directory and testcases.\n\t* lib/target-supports.exp (check_profiling_available): Check for\n\tnds32*-*-elf.\n\nFrom-SVN: r205625", "tree": {"sha": "0c2e31a57e360ac432a6cd76d5fd5dfe97c6d127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c2e31a57e360ac432a6cd76d5fd5dfe97c6d127"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb5a6c6939f619d1a05293ea540a41e07a7d6200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5a6c6939f619d1a05293ea540a41e07a7d6200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb5a6c6939f619d1a05293ea540a41e07a7d6200"}], "stats": {"total": 172, "additions": 164, "deletions": 8}, "files": [{"sha": "c34641f1a17c50aa6b7fd8c896c9dc5293faeab9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -1,3 +1,19 @@\n+2013-12-03  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* gcc.dg/20020312-2.c: Add __nds32__ case.\n+\t* gcc.dg/builtin-apply2.c: Skip for nds32*-*-*.\n+\t* gcc.dg/sibcall-3.c: Expected fail for nds32*-*-*.\n+\t* gcc.dg/sibcall-4.c: Expected fail for nds32*-*-*.\n+\t* gcc.dg/stack-usage-1.c (SIZE): Define case for __nds32__.\n+\t* gcc.dg/torture/pr37868.c: Skip for nds32*-*-*.\n+\t* gcc.dg/torture/stackalign/builtin-apply-2.c: Skip for nds32*-*-*.\n+\t* gcc.dg/tree-ssa/20040204-1.c: Expected fail for nds32*-*-*.\n+\t* gcc.dg/tree-ssa/pr42585.c: Skip for nds32*-*-*.\n+\t* gcc.dg/tree-ssa/sra-12.c: Skip for nds32*-*-*.\n+\t* gcc.target/nds32: New nds32 specific directory and testcases.\n+\t* lib/target-supports.exp (check_profiling_available): Check for\n+\tnds32*-*-elf.\n+\n 2013-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/59362"}, {"sha": "7562a8d65f6afa65a7e5706f9f97bcf602d07dea", "filename": "gcc/testsuite/gcc.dg/20020312-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -52,6 +52,8 @@ extern void abort (void);\n /* No pic register.  */\n #elif defined(__moxie__)\n /* No pic register.  */\n+#elif defined(__nds32__)\n+/* No pic register.  */\n #elif defined(__hppa__)\n /* PIC register is %r27 or %r19, but is used even without -fpic.  */\n #elif defined(__pdp11__)"}, {"sha": "3ae2adc6e076903f43a0febe336c0d6ce8fa3f96", "filename": "gcc/testsuite/gcc.dg/builtin-apply2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-skip-if \"Variadic funcs have all args on stack. Normal funcs have args in registers.\" { \"aarch64*-*-* avr-*-* \" } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"Variadic funcs have all args on stack. Normal funcs have args in registers.\" { \"aarch64*-*-* avr-*-* nds32*-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"Variadic funcs use Base AAPCS.  Normal funcs use VFP variant.\" { arm*-*-* && arm_hf_eabi } { \"*\" } { \"\" } } */\n \n /* PR target/12503 */"}, {"sha": "e02a410e6d9b21fd201bdc73c179819b3ffa28fb", "filename": "gcc/testsuite/gcc.dg/sibcall-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-3.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -5,7 +5,7 @@\n    Copyright (C) 2002 Free Software Foundation Inc.\n    Contributed by Hans-Peter Nilsson  <hp@bitrange.com>  */\n \n-/* { dg-do run { xfail { { cris-*-* crisv32-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n+/* { dg-do run { xfail { { cris-*-* crisv32-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* nds32*-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n /* -mlongcall disables sibcall patterns.  */\n /* { dg-skip-if \"\" { powerpc*-*-* } { \"-mlongcall\" } { \"\" } } */\n /* { dg-options \"-O2 -foptimize-sibling-calls\" } */"}, {"sha": "a66ed079862ce4c50933ae61f87cb7110d5ea165", "filename": "gcc/testsuite/gcc.dg/sibcall-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-4.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -5,7 +5,7 @@\n    Copyright (C) 2002 Free Software Foundation Inc.\n    Contributed by Hans-Peter Nilsson  <hp@bitrange.com>  */\n \n-/* { dg-do run { xfail { { cris-*-* crisv32-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n+/* { dg-do run { xfail { { cris-*-* crisv32-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* nds32*-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n /* -mlongcall disables sibcall patterns.  */\n /* { dg-skip-if \"\" { powerpc*-*-* } { \"-mlongcall\" } { \"\" } } */\n /* { dg-options \"-O2 -foptimize-sibling-calls\" } */"}, {"sha": "7956efc4089d57276dff757e9d31bd19c4078338", "filename": "gcc/testsuite/gcc.dg/stack-usage-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -38,6 +38,9 @@\n #  else\n #    define SIZE 248\n #  endif\n+#elif defined (__nds32__)\n+#  define SIZE 248 /* 256 - 8 bytes, only $fp and padding bytes are saved in\n+                      the register save area under O0 optimization level.  */\n #elif defined (__powerpc64__) || defined (__ppc64__) || defined (__POWERPC64__) \\\n       || defined (__PPC64__)\n #  if _CALL_ELF == 2"}, {"sha": "5204c5a5941cdd407189a811f9cf8740bdfaf2b4", "filename": "gcc/testsuite/gcc.dg/torture/pr37868.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr37868.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr37868.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr37868.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-fno-strict-aliasing\" } */\n-/* { dg-skip-if \"unaligned access\" { arc*-*-* epiphany-*-* sparc*-*-* sh*-*-* tic6x-*-* } \"*\" \"\" } */\n+/* { dg-skip-if \"unaligned access\" { arc*-*-* epiphany-*-* nds32*-*-* sparc*-*-* sh*-*-* tic6x-*-* } \"*\" \"\" } */\n \n extern void abort (void);\n #if (__SIZEOF_INT__ <= 2)"}, {"sha": "8eba13aed6794038ab1a92533c3b246bf4a04b95", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/builtin-apply-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -10,6 +10,7 @@\n    avr: Variadic funcs don't pass arguments in registers, while normal funcs\n         do.  */\n /* { dg-skip-if \"Variadic funcs use different argument passing from normal funcs\" { arm_hf_eabi || { avr-*-* } } \"*\" \"\" } */\n+/* { dg-skip-if \"Variadic funcs have all args on stack. Normal funcs have args in registers.\" { nds32*-*-* } \"*\" \"\" } */\n    \n \n #define INTEGER_ARG  5"}, {"sha": "8518dfb1a8b2ba026df0dd158d0b6732c9273c7d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040204-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -33,5 +33,5 @@ void test55 (int x, int y)\n    that the && should be emitted (based on BRANCH_COST).  Fix this\n    by teaching dom to look through && and register all components\n    as true.  */\n-/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" { xfail { ! \"alpha*-*-* arm*-*-* powerpc*-*-* cris-*-* crisv32-*-* hppa*-*-* i?86-*-* mmix-*-* mips*-*-* m68k*-*-* moxie-*-* sparc*-*-* spu-*-* x86_64-*-*\" } } } } */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" { xfail { ! \"alpha*-*-* arm*-*-* powerpc*-*-* cris-*-* crisv32-*-* hppa*-*-* i?86-*-* mmix-*-* mips*-*-* m68k*-*-* moxie-*-* nds32*-*-* sparc*-*-* spu-*-* x86_64-*-*\" } } } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "a970c855b884acaf93cc5e681bb7b8104a92c87c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr42585.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr42585.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr42585.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr42585.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -35,6 +35,6 @@ Cyc_string_ungetc (int ignore, struct _fat_ptr *sptr)\n /* Whether the structs are totally scalarized or not depends on the\n    MOVE_RATIO macro definition in the back end.  The scalarization will\n    not take place when using small values for MOVE_RATIO.  */\n-/* { dg-final { scan-tree-dump-times \"struct _fat_ptr _ans\" 0 \"optimized\" { target { ! \"arm*-*-* avr-*-* powerpc*-*-* s390*-*-* sh*-*-*\" } } } } */\n-/* { dg-final { scan-tree-dump-times \"struct _fat_ptr _T2\" 0 \"optimized\" { target { ! \"arm*-*-* avr-*-* powerpc*-*-* s390*-*-* sh*-*-*\" } } } } */\n+/* { dg-final { scan-tree-dump-times \"struct _fat_ptr _ans\" 0 \"optimized\" { target { ! \"arm*-*-* avr-*-* nds32*-*-* powerpc*-*-* s390*-*-* sh*-*-*\" } } } } */\n+/* { dg-final { scan-tree-dump-times \"struct _fat_ptr _T2\" 0 \"optimized\" { target { ! \"arm*-*-* avr-*-* nds32*-*-* powerpc*-*-* s390*-*-* sh*-*-*\" } } } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "59e5e6af6d960b6d1c30d4ce8ae96415bb5307c0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/sra-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsra-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsra-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsra-12.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -21,5 +21,5 @@ int foo (struct S *p)\n   *p = l;\n }\n \n-/* { dg-final { scan-tree-dump-times \"l;\" 0 \"release_ssa\" { target { ! \"avr*-*-*\" } } } } */\n+/* { dg-final { scan-tree-dump-times \"l;\" 0 \"release_ssa\" { target { ! \"avr*-*-* nds32*-*-*\" } } } } */\n /* { dg-final { cleanup-tree-dump \"release_ssa\" } } */"}, {"sha": "6fdbc357fbd160ae413a6b169d50991d3b80b8ee", "filename": "gcc/testsuite/gcc.target/nds32/basic-main.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbasic-main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbasic-main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbasic-main.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -0,0 +1,9 @@\n+/* This is a basic main function test program.  */\n+\n+/* { dg-do run }  */\n+/* { dg-options \"-O0\" }  */\n+\n+int main(void)\n+{\n+  return 0;\n+}"}, {"sha": "e65061bae0deaf46dd6f4ed02c9c4cfbc42bccd3", "filename": "gcc/testsuite/gcc.target/nds32/builtin-isb.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-isb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-isb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-isb.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -0,0 +1,11 @@\n+/* Verify that we generate isb instruction with builtin function.  */\n+\n+/* { dg-do compile }  */\n+/* { dg-options \"-O0\" }  */\n+/* { dg-final { scan-assembler \"\\\\tisb\" } }  */\n+\n+void\n+test (void)\n+{\n+  __builtin_nds32_isb ();\n+}"}, {"sha": "3160e4ad38572a4bbef7478b35ba70d54b719c5e", "filename": "gcc/testsuite/gcc.target/nds32/builtin-isync.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-isync.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-isync.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-isync.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -0,0 +1,12 @@\n+/* Verify that we generate isync instruction with builtin function.  */\n+\n+/* { dg-do compile }  */\n+/* { dg-options \"-O0\" }  */\n+/* { dg-final { scan-assembler \"\\\\tisync\" } }  */\n+\n+void\n+test (void)\n+{\n+  int *addr = (int *) 0x53000000;\n+  __builtin_nds32_isync (addr);\n+}"}, {"sha": "db4c55845c05b6cc1a37f9a32f640e99b1cc2ca5", "filename": "gcc/testsuite/gcc.target/nds32/builtin-mfsr-mtsr.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-mfsr-mtsr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-mfsr-mtsr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-mfsr-mtsr.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -0,0 +1,17 @@\n+/* Verify that we generate mfsr/mtsr instruction with builtin function.  */\n+\n+/* { dg-do compile }  */\n+/* { dg-options \"-O0\" }  */\n+/* { dg-final { scan-assembler \"\\\\tmfsr\" } }  */\n+/* { dg-final { scan-assembler \"\\\\tmtsr\" } }  */\n+\n+#include <nds32_intrinsic.h>\n+\n+void\n+test (void)\n+{\n+  int ipsw_value;\n+\n+  ipsw_value = __builtin_nds32_mfsr (__NDS32_REG_IPSW__);\n+  __builtin_nds32_mtsr (ipsw_value, __NDS32_REG_IPSW__);\n+}"}, {"sha": "3cfaab951147d23bba7c2a092924a9c6432f9125", "filename": "gcc/testsuite/gcc.target/nds32/builtin-mfusr-mtusr.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-mfusr-mtusr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-mfusr-mtusr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-mfusr-mtusr.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -0,0 +1,17 @@\n+/* Verify that we generate mfusr/mtusr instruction with builtin function.  */\n+\n+/* { dg-do compile }  */\n+/* { dg-options \"-O0\" }  */\n+/* { dg-final { scan-assembler \"\\\\tmfusr\" } }  */\n+/* { dg-final { scan-assembler \"\\\\tmtusr\" } }  */\n+\n+#include <nds32_intrinsic.h>\n+\n+void\n+test (void)\n+{\n+  int itype_value;\n+\n+  itype_value = __builtin_nds32_mfusr (__NDS32_REG_ITYPE__);\n+  __builtin_nds32_mtusr (itype_value, __NDS32_REG_ITYPE__);\n+}"}, {"sha": "2dceed98ac8e8cbf63522a8e703b782137184c06", "filename": "gcc/testsuite/gcc.target/nds32/builtin-setgie-dis.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-setgie-dis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-setgie-dis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-setgie-dis.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -0,0 +1,11 @@\n+/* Verify that we generate setgie.d instruction with builtin function.  */\n+\n+/* { dg-do compile }  */\n+/* { dg-options \"-O0\" }  */\n+/* { dg-final { scan-assembler \"\\\\tsetgie.d\" } }  */\n+\n+void\n+test (void)\n+{\n+  __builtin_nds32_setgie_dis ();\n+}"}, {"sha": "892887019c9375ba3f2126648eabeb26d9c7af3d", "filename": "gcc/testsuite/gcc.target/nds32/builtin-setgie-en.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-setgie-en.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-setgie-en.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fbuiltin-setgie-en.c?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -0,0 +1,11 @@\n+/* Verify that we generate setgie.e instruction with builtin function.  */\n+\n+/* { dg-do compile }  */\n+/* { dg-options \"-O0\" }  */\n+/* { dg-final { scan-assembler \"\\\\tsetgie.e\" } }  */\n+\n+void\n+test (void)\n+{\n+  __builtin_nds32_setgie_en ();\n+}"}, {"sha": "e88d0222729ffe24d5295c241c4a34af2611f785", "filename": "gcc/testsuite/gcc.target/nds32/nds32.exp", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fnds32.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fnds32.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnds32%2Fnds32.exp?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -0,0 +1,45 @@\n+# Target test cases of Andes NDS32 cpu for GNU compiler\n+# Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+# Contributed by Andes Technology Corporation.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it\n+# under the terms of the GNU General Public License as published\n+# by the Free Software Foundation; either version 3, or (at your\n+# option) any later version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+# License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't a nds32 target.\n+if ![istarget nds32*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "642c3448bdab61175deba66661f9a9011a75df19", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199f847c9819b6cb2c36f109e53d1ef0ad8ace83/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=199f847c9819b6cb2c36f109e53d1ef0ad8ace83", "patch": "@@ -530,6 +530,7 @@ proc check_profiling_available { test_what } {\n \t     || [istarget mn10300-*-elf*]\n \t     || [istarget moxie-*-elf*]\n \t     || [istarget msp430-*-*]\n+\t     || [istarget nds32*-*-elf]\n \t     || [istarget picochip-*-*]\n \t     || [istarget powerpc-*-eabi*]\n \t     || [istarget powerpc-*-elf]"}]}