{"sha": "378004b9d2633f4817da26feb2e07ba739b2eba1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc4MDA0YjlkMjYzM2Y0ODE3ZGEyNmZlYjJlMDdiYTczOWIyZWJhMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-12-09T19:35:18Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-12-09T19:35:18Z"}, "message": "re PR lto/68811 (ICE: in get, at cgraph.h:1218)\n\n\n\tPR lto/68811\n\t* g++.dg/lto/pr68811_0.C: New testcase.\n\t* g++.dg/lto/pr68811_1.C: New testcase.\n\n\t* lto-symtab.c (lto_symtab_merge_decls_2): Decl can never be prevailed\n\tby itself.\n\nFrom-SVN: r231473", "tree": {"sha": "67dd9ada0d311d144f45d0c3ceb077eda686a4f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67dd9ada0d311d144f45d0c3ceb077eda686a4f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/378004b9d2633f4817da26feb2e07ba739b2eba1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378004b9d2633f4817da26feb2e07ba739b2eba1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/378004b9d2633f4817da26feb2e07ba739b2eba1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378004b9d2633f4817da26feb2e07ba739b2eba1/comments", "author": null, "committer": null, "parents": [{"sha": "811582ec147f4eb722b75578faba4a94c5cfd829", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811582ec147f4eb722b75578faba4a94c5cfd829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/811582ec147f4eb722b75578faba4a94c5cfd829"}], "stats": {"total": 122, "additions": 120, "deletions": 2}, "files": [{"sha": "9f0733d82493d15643f16a7d9396dc8bcf301da5", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378004b9d2633f4817da26feb2e07ba739b2eba1/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378004b9d2633f4817da26feb2e07ba739b2eba1/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=378004b9d2633f4817da26feb2e07ba739b2eba1", "patch": "@@ -1,3 +1,9 @@\n+2015-12-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR lto/68811\n+\t* lto-symtab.c (lto_symtab_merge_decls_2): Decl can never be prevailed\n+\tby itself.\n+\n 2015-12-08  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/61886"}, {"sha": "d4868c4dcd784bf493be77786ebfdb42c79d11f8", "filename": "gcc/lto/lto-symtab.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378004b9d2633f4817da26feb2e07ba739b2eba1/gcc%2Flto%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378004b9d2633f4817da26feb2e07ba739b2eba1/gcc%2Flto%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-symtab.c?ref=378004b9d2633f4817da26feb2e07ba739b2eba1", "patch": "@@ -568,7 +568,8 @@ lto_symtab_merge_decls_2 (symtab_node *first, bool diagnosed_p)\n       for (this_prevailing = prevailing; ;\n \t   this_prevailing = this_prevailing->next_sharing_asm_name)\n \t{\n-\t  if (lto_symtab_merge_p (this_prevailing->decl, e->decl))\n+\t  if (this_prevailing->decl != e->decl\n+\t      && lto_symtab_merge_p (this_prevailing->decl, e->decl))\n \t    break;\n \t  if (this_prevailing == last_prevailing)\n \t    {\n@@ -709,7 +710,7 @@ lto_symtab_merge_decls_1 (symtab_node *first)\n \t\t&& lto_symtab_symbol_p (e))\n \t      prevailing = e;\n \t}\n-      /* For variables prefer the non-builtin if one is available.  */\n+      /* For functions prefer the non-builtin if one is available.  */\n       else if (TREE_CODE (prevailing->decl) == FUNCTION_DECL)\n \t{\n \t  for (e = first; e; e = e->next_sharing_asm_name)"}, {"sha": "17f7b07e48acda4fbd32e0a8da41c4ee26dff4ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378004b9d2633f4817da26feb2e07ba739b2eba1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378004b9d2633f4817da26feb2e07ba739b2eba1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=378004b9d2633f4817da26feb2e07ba739b2eba1", "patch": "@@ -1,3 +1,9 @@\n+2015-12-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR lto/68811\n+\t* g++.dg/lto/pr68811_0.C: New testcase.\n+\t* g++.dg/lto/pr68811_1.C: New testcase.\n+\n 2015-12-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/60218"}, {"sha": "2ae4eb06b5e62d4b6c16577c28cb66f43c0988b6", "filename": "gcc/testsuite/g++.dg/lto/pr68811_0.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378004b9d2633f4817da26feb2e07ba739b2eba1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr68811_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378004b9d2633f4817da26feb2e07ba739b2eba1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr68811_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr68811_0.C?ref=378004b9d2633f4817da26feb2e07ba739b2eba1", "patch": "@@ -0,0 +1,11 @@\n+// { dg-lto-do link }\n+/* { dg-lto-options \"-O2  -w\" } */\n+// { dg-extra-ld-options \"-r -nostdlib\" }\n+extern \"C\" char *strcpy(char *, const char *);\n+char InitXPCOMGlue_lastSlash;\n+void InitXPCOMGlue() { strcpy(&InitXPCOMGlue_lastSlash, \".so\"); }\n+extern \"C\" void memcpy(void *);\n+char LZ4_decompress_safe_usingDict_ip;\n+void LZ4_decompress_safe_usingDict() {\n+  memcpy(&LZ4_decompress_safe_usingDict_ip);\n+}"}, {"sha": "1f5b356ba975cd784835bf1adee727b2c5441faa", "filename": "gcc/testsuite/g++.dg/lto/pr68811_1.C", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378004b9d2633f4817da26feb2e07ba739b2eba1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr68811_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378004b9d2633f4817da26feb2e07ba739b2eba1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr68811_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr68811_1.C?ref=378004b9d2633f4817da26feb2e07ba739b2eba1", "patch": "@@ -0,0 +1,94 @@\n+// { dg-options \"-O2 -flto -w\" }\n+template <typename> class allocator;\n+template <typename _CharT, typename = _CharT, typename = allocator<_CharT>>\n+class Trans_NS___cxx11_basic_string;\n+struct __false_type {};\n+template <typename> using __void_t = void;\n+template <typename, typename, template <typename...> class, typename...>\n+struct __detector {\n+  using type = int;\n+};\n+template <typename _Default, template <typename...> class _Op,\n+          typename... _Args>\n+struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...> {\n+  using type = _Op<_Args...>;\n+};\n+template <typename _Default, template <typename...> class _Op,\n+          typename... _Args>\n+using __detected_or = __detector<_Default, void, _Op, _Args...>;\n+template <typename _Default, template <typename...> class _Op,\n+          typename... _Args>\n+using __detected_or_t = typename __detected_or<_Default, _Op, _Args...>::type;\n+template <template <typename...> class _Default,\n+          template <typename...> class _Op, typename... _Args>\n+using __detected_or_t_ = __detected_or_t<_Default<_Args...>, _Op, _Args...>;\n+struct random_access_iterator_tag {};\n+class __undefined;\n+template <typename, typename> using __replace_first_arg_t = __undefined;\n+template <typename> class allocator {\n+public:\n+  template <typename> struct rebind { typedef allocator other; };\n+};\n+struct __allocator_traits_base {\n+  template <typename _Alloc, typename _Up>\n+  using __rebind = typename _Alloc::template rebind<_Up>::other;\n+  template <typename _Tp> using __pointer = typename _Tp::pointer;\n+  template <typename _Tp> using __size_type = typename _Tp::size_type;\n+};\n+template <typename _Alloc, typename _Up>\n+using __alloc_rebind =\n+    __detected_or_t_<__replace_first_arg_t, __allocator_traits_base::__rebind,\n+                     _Alloc, _Up>;\n+struct allocator_traits : __allocator_traits_base {\n+  using pointer = __detected_or_t<char, __pointer, allocator<char>>;\n+  using size_type = __detected_or_t<int, __size_type, allocator<char>>;\n+  template <typename _Tp>\n+  using rebind_alloc = __alloc_rebind<allocator<char>, _Tp>;\n+};\n+struct __alloc_traits : allocator_traits {\n+  struct rebind {\n+    typedef rebind_alloc<int> other;\n+  };\n+};\n+template <typename, typename, typename> class Trans_NS___cxx11_basic_string {\n+public:\n+  struct _Alloc_hider : __alloc_traits::rebind::other {\n+    _Alloc_hider(__alloc_traits::pointer, allocator);\n+  } _M_dataplus;\n+  __alloc_traits::pointer _M_local_data();\n+  template <typename _InIterator>\n+  void _M_construct_aux(_InIterator __beg, _InIterator __end, __false_type) {\n+    _M_construct(__beg, __end, random_access_iterator_tag());\n+  }\n+  template <typename _InIterator>\n+  void _M_construct(_InIterator __beg, _InIterator __end) {\n+    _M_construct_aux(__beg, __end, __false_type());\n+  }\n+  template <typename _FwdIterator>\n+  void _M_construct(_FwdIterator, _FwdIterator, random_access_iterator_tag);\n+  char _S_copy___s2;\n+  void _S_copy(char *, __alloc_traits::size_type __n) {\n+    __builtin_memcpy(0, &_S_copy___s2, __n);\n+  }\n+  template <class _Iterator>\n+  void _S_copy_chars(char *__p, _Iterator __k1, _Iterator __k2) {\n+    _S_copy(__p, __k2 - __k1);\n+  }\n+  Trans_NS___cxx11_basic_string(char *__s,\n+                                allocator<char> __a = allocator<char>())\n+      : _M_dataplus(_M_local_data(), __a) {\n+    _M_construct(__s, __s);\n+  }\n+};\n+template <typename _CharT, typename _Traits, typename _Alloc>\n+template <typename _InIterator>\n+void Trans_NS___cxx11_basic_string<_CharT, _Traits, _Alloc>::_M_construct(\n+    _InIterator __beg, _InIterator __end, random_access_iterator_tag) {\n+  _S_copy_chars(0, __beg, __end);\n+}\n+class Decimal {\n+  Trans_NS___cxx11_basic_string<char> toString() const;\n+};\n+Trans_NS___cxx11_basic_string<char> Decimal::toString() const {\n+  return \"Infinity\";\n+}"}]}