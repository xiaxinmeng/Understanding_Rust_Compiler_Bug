{"sha": "6210710649654e6a364ba7895a369cbebe0677c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIxMDcxMDY0OTY1NGU2YTM2NGJhNzg5NWEzNjljYmViZTA2NzdjNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-27T17:56:52Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-27T17:56:52Z"}, "message": "* tree.h: Fix truncated long macros.\n\nFrom-SVN: r158792", "tree": {"sha": "0d043d54a68316358420e17267db88ddb84b146b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d043d54a68316358420e17267db88ddb84b146b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6210710649654e6a364ba7895a369cbebe0677c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6210710649654e6a364ba7895a369cbebe0677c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6210710649654e6a364ba7895a369cbebe0677c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6210710649654e6a364ba7895a369cbebe0677c6/comments", "author": null, "committer": null, "parents": [{"sha": "ad21109137176779256ba227c2fe696dce8ea967", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad21109137176779256ba227c2fe696dce8ea967", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad21109137176779256ba227c2fe696dce8ea967"}], "stats": {"total": 262, "additions": 163, "deletions": 99}, "files": [{"sha": "e282e15d8f0c2e8c5d99c9c9aa724cdb7bcfae74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6210710649654e6a364ba7895a369cbebe0677c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6210710649654e6a364ba7895a369cbebe0677c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6210710649654e6a364ba7895a369cbebe0677c6", "patch": "@@ -1,3 +1,7 @@\n+2010-04-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.h: Fix truncated long macros.\n+\n 2010-04-27  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* collect2.c (TARGET_64BIT): Redefine to target's default.\n@@ -27,8 +31,8 @@\n \t* opts.c (decode_options): Enable ipa-profile at -O1.\n \t* timevar.def (TV_IPA_PROFILE): Define.\n \t* common.opt (fipa-profile): Add.\n-\t* cgraph.c (cgraph_clone_node): Set local flag and clear vtable method flag\n-\tfor clones.\n+\t* cgraph.c (cgraph_clone_node): Set local flag and clear vtable method\n+\tflag for clones.\n \t(cgraph_propagate_frequency): Handle only local ones.\n \t* tree-pass.h (pass_ipa_profile): Declare.\n \t* ipa-profile.c (gate_profile): Use flag_ipa_profile."}, {"sha": "5aa994add19ddca7b586bb98b8f151d2c9e51fe8", "filename": "gcc/tree.h", "status": "modified", "additions": 157, "deletions": 97, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6210710649654e6a364ba7895a369cbebe0677c6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6210710649654e6a364ba7895a369cbebe0677c6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6210710649654e6a364ba7895a369cbebe0677c6", "patch": "@@ -1419,7 +1419,8 @@ struct GTY(()) tree_real_cst {\n /* In a FIXED_CST node.  */\n struct fixed_value;\n \n-#define TREE_FIXED_CST_PTR(NODE) (FIXED_CST_CHECK (NODE)->fixed_cst.fixed_cst_ptr)\n+#define TREE_FIXED_CST_PTR(NODE) \\\n+  (FIXED_CST_CHECK (NODE)->fixed_cst.fixed_cst_ptr)\n #define TREE_FIXED_CST(NODE) (*TREE_FIXED_CST_PTR (NODE))\n \n struct GTY(()) tree_fixed_cst {\n@@ -1506,7 +1507,8 @@ struct GTY(()) tree_vec {\n #define CONSTRUCTOR_ELTS(NODE) (CONSTRUCTOR_CHECK (NODE)->constructor.elts)\n #define CONSTRUCTOR_ELT(NODE,IDX) \\\n   (VEC_index (constructor_elt, CONSTRUCTOR_ELTS (NODE), IDX))\n-#define CONSTRUCTOR_NELTS(NODE) (VEC_length (constructor_elt, CONSTRUCTOR_ELTS (NODE)))\n+#define CONSTRUCTOR_NELTS(NODE) \\\n+  (VEC_length (constructor_elt, CONSTRUCTOR_ELTS (NODE)))\n \n /* Iterate through the vector V of CONSTRUCTOR_ELT elements, yielding the\n    value of each element (stored within VAL). IX must be a scratch variable\n@@ -1587,7 +1589,8 @@ struct GTY(()) tree_constructor {\n /* The source location of this expression.  Non-tree_exp nodes such as\n    decls and constants can be shared among multiple locations, so\n    return nothing.  */\n-#define EXPR_LOCATION(NODE) (EXPR_P ((NODE)) ? (NODE)->exp.locus : UNKNOWN_LOCATION)\n+#define EXPR_LOCATION(NODE) \\\n+  (EXPR_P ((NODE)) ? (NODE)->exp.locus : UNKNOWN_LOCATION)\n #define SET_EXPR_LOCATION(NODE, LOCUS) EXPR_CHECK ((NODE))->exp.locus = (LOCUS)\n #define EXPR_HAS_LOCATION(NODE) (EXPR_LOCATION (NODE) != UNKNOWN_LOCATION)\n #define EXPR_FILENAME(NODE) LOCATION_FILE (EXPR_CHECK ((NODE))->exp.locus)\n@@ -1882,7 +1885,7 @@ struct GTY(()) tree_exp {\n    the very first reference to S in the function is a read operation.\n    Default definitions are always created by an empty statement and\n    belong to no basic block.  */\n-#define SSA_NAME_IS_DEFAULT_DEF(NODE)\t\\\n+#define SSA_NAME_IS_DEFAULT_DEF(NODE) \\\n     SSA_NAME_CHECK (NODE)->base.default_def_flag\n \n /* Attributes for SSA_NAMEs for pointer-type variables.  */\n@@ -1975,9 +1978,12 @@ struct varray_head_tag;\n \n /* In a BLOCK node.  */\n #define BLOCK_VARS(NODE) (BLOCK_CHECK (NODE)->block.vars)\n-#define BLOCK_NONLOCALIZED_VARS(NODE) (BLOCK_CHECK (NODE)->block.nonlocalized_vars)\n-#define BLOCK_NUM_NONLOCALIZED_VARS(NODE) VEC_length (tree, BLOCK_NONLOCALIZED_VARS (NODE))\n-#define BLOCK_NONLOCALIZED_VAR(NODE,N) VEC_index (tree, BLOCK_NONLOCALIZED_VARS (NODE), N)\n+#define BLOCK_NONLOCALIZED_VARS(NODE) \\\n+  (BLOCK_CHECK (NODE)->block.nonlocalized_vars)\n+#define BLOCK_NUM_NONLOCALIZED_VARS(NODE) \\\n+  VEC_length (tree, BLOCK_NONLOCALIZED_VARS (NODE))\n+#define BLOCK_NONLOCALIZED_VAR(NODE,N) \\\n+  VEC_index (tree, BLOCK_NONLOCALIZED_VARS (NODE), N)\n #define BLOCK_SUBBLOCKS(NODE) (BLOCK_CHECK (NODE)->block.subblocks)\n #define BLOCK_SUPERCONTEXT(NODE) (BLOCK_CHECK (NODE)->block.supercontext)\n /* Note: when changing this, make sure to find the places\n@@ -2118,7 +2124,8 @@ extern enum machine_mode vector_type_mode (const_tree);\n /* For a VECTOR_TYPE node, this describes a different type which is emitted\n    in the debugging output.  We use this to describe a vector as a\n    structure containing an array.  */\n-#define TYPE_DEBUG_REPRESENTATION_TYPE(NODE) (VECTOR_TYPE_CHECK (NODE)->type.values)\n+#define TYPE_DEBUG_REPRESENTATION_TYPE(NODE) \\\n+  (VECTOR_TYPE_CHECK (NODE)->type.values)\n \n /* For record and union types, information about this type, as a base type\n    for itself.  */\n@@ -2504,18 +2511,23 @@ struct function;\n \n /* Every ..._DECL node gets a unique number that stays the same even\n    when the decl is copied by the inliner once it is set.  */\n-#define DECL_PT_UID(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.pt_uid == -1u ? (NODE)->decl_minimal.uid : (NODE)->decl_common.pt_uid)\n+#define DECL_PT_UID(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.pt_uid == -1u \\\n+   ? (NODE)->decl_minimal.uid : (NODE)->decl_common.pt_uid)\n /* Initialize the ..._DECL node pt-uid to the decls uid.  */\n-#define SET_DECL_PT_UID(NODE, UID) (DECL_COMMON_CHECK (NODE)->decl_common.pt_uid = (UID))\n+#define SET_DECL_PT_UID(NODE, UID) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.pt_uid = (UID))\n /* Whether the ..._DECL node pt-uid has been initialized and thus needs to\n    be preserved when copyin the decl.  */\n-#define DECL_PT_UID_SET_P(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.pt_uid != -1u)\n+#define DECL_PT_UID_SET_P(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.pt_uid != -1u)\n \n /* These two fields describe where in the source code the declaration\n    was.  If the declaration appears in several places (as for a C\n    function that is declared first and then defined later), this\n    information should refer to the definition.  */\n-#define DECL_SOURCE_LOCATION(NODE) (DECL_MINIMAL_CHECK (NODE)->decl_minimal.locus)\n+#define DECL_SOURCE_LOCATION(NODE) \\\n+  (DECL_MINIMAL_CHECK (NODE)->decl_minimal.locus)\n #define DECL_SOURCE_FILE(NODE) LOCATION_FILE (DECL_SOURCE_LOCATION (NODE))\n #define DECL_SOURCE_LINE(NODE) LOCATION_LINE (DECL_SOURCE_LOCATION (NODE))\n #define DECL_IS_BUILTIN(DECL) \\\n@@ -2529,7 +2541,8 @@ struct function;\n     NULL_TREE or a TRANSLATION_UNIT_DECL if the given decl has \"file\n     scope\".  */\n #define DECL_CONTEXT(NODE) (DECL_MINIMAL_CHECK (NODE)->decl_minimal.context)\n-#define DECL_FIELD_CONTEXT(NODE) (FIELD_DECL_CHECK (NODE)->decl_minimal.context)\n+#define DECL_FIELD_CONTEXT(NODE) \\\n+  (FIELD_DECL_CHECK (NODE)->decl_minimal.context)\n struct GTY(()) tree_decl_minimal {\n   struct tree_common common;\n   location_t locus;\n@@ -2545,7 +2558,8 @@ struct GTY(()) tree_decl_minimal {\n \n    The C front-end also uses this in a nested declaration of an inline\n    function, to point back to the definition.  */\n-#define DECL_ABSTRACT_ORIGIN(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.abstract_origin)\n+#define DECL_ABSTRACT_ORIGIN(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.abstract_origin)\n \n /* Like DECL_ABSTRACT_ORIGIN, but returns NODE if there's no abstract\n    origin.  This is useful when setting the DECL_ABSTRACT_ORIGIN.  */\n@@ -2556,11 +2570,13 @@ struct GTY(()) tree_decl_minimal {\n    inline instance of some original (abstract) decl from an inline function;\n    suppress any warnings about shadowing some other variable.  FUNCTION_DECL\n    nodes can also have their abstract origin set to themselves.  */\n-#define DECL_FROM_INLINE(NODE) (DECL_ABSTRACT_ORIGIN (NODE) != NULL_TREE \\\n-\t\t\t\t&& DECL_ABSTRACT_ORIGIN (NODE) != (NODE))\n+#define DECL_FROM_INLINE(NODE) \\\n+  (DECL_ABSTRACT_ORIGIN (NODE) != NULL_TREE \\\n+   && DECL_ABSTRACT_ORIGIN (NODE) != (NODE))\n \n /* In a DECL this is the field where attributes are stored.  */\n-#define DECL_ATTRIBUTES(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.attributes)\n+#define DECL_ATTRIBUTES(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.attributes)\n \n /* For a FUNCTION_DECL, holds the tree of BINDINGs.\n    For a TRANSLATION_UNIT_DECL, holds the namespace's BLOCK.\n@@ -2585,7 +2601,8 @@ struct GTY(()) tree_decl_minimal {\n #define DECL_ALIGN_UNIT(NODE) (DECL_ALIGN (NODE) / BITS_PER_UNIT)\n /* Set if the alignment of this DECL has been set by the user, for\n    example with an 'aligned' attribute.  */\n-#define DECL_USER_ALIGN(NODE) (DECL_COMMON_CHECK (NODE)->common.base.user_align)\n+#define DECL_USER_ALIGN(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->common.base.user_align)\n /* Holds the machine mode corresponding to the declaration of a variable or\n    field.  Always equal to TYPE_MODE (TREE_TYPE (decl)) except for a\n    FIELD_DECL.  */\n@@ -2606,18 +2623,21 @@ struct GTY(()) tree_decl_minimal {\n /* Nonzero for a given ..._DECL node means that the name of this node should\n    be ignored for symbolic debug purposes.  Moreover, for a FUNCTION_DECL,\n    the body of the function should also be ignored.  */\n-#define DECL_IGNORED_P(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.ignored_flag)\n+#define DECL_IGNORED_P(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.ignored_flag)\n \n /* Nonzero for a given ..._DECL node means that this node represents an\n    \"abstract instance\" of the given declaration (e.g. in the original\n    declaration of an inline function).  When generating symbolic debugging\n    information, we mustn't try to generate any address information for nodes\n    marked as \"abstract instances\" because we don't actually generate\n    any code or allocate any data space for such instances.  */\n-#define DECL_ABSTRACT(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.abstract_flag)\n+#define DECL_ABSTRACT(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.abstract_flag)\n \n /* Language-specific decl information.  */\n-#define DECL_LANG_SPECIFIC(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.lang_specific)\n+#define DECL_LANG_SPECIFIC(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.lang_specific)\n \n /* In a VAR_DECL or FUNCTION_DECL, nonzero means external reference:\n    do not allocate storage, and refer to a definition elsewhere.  Note that\n@@ -2635,26 +2655,38 @@ struct GTY(()) tree_decl_minimal {\n \n    Also set in some languages for variables, etc., outside the normal\n    lexical scope, such as class instance variables.  */\n-#define DECL_NONLOCAL(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.nonlocal_flag)\n+#define DECL_NONLOCAL(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.nonlocal_flag)\n \n /* Used in VAR_DECLs to indicate that the variable is a vtable.\n    Used in FIELD_DECLs for vtable pointers.\n    Used in FUNCTION_DECLs to indicate that the function is virtual.  */\n-#define DECL_VIRTUAL_P(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.virtual_flag)\n+#define DECL_VIRTUAL_P(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.virtual_flag)\n \n /* Used to indicate that this DECL represents a compiler-generated entity.  */\n-#define DECL_ARTIFICIAL(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.artificial_flag)\n+#define DECL_ARTIFICIAL(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.artificial_flag)\n \n /* Additional flags for language-specific uses.  */\n-#define DECL_LANG_FLAG_0(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_0)\n-#define DECL_LANG_FLAG_1(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_1)\n-#define DECL_LANG_FLAG_2(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_2)\n-#define DECL_LANG_FLAG_3(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_3)\n-#define DECL_LANG_FLAG_4(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_4)\n-#define DECL_LANG_FLAG_5(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_5)\n-#define DECL_LANG_FLAG_6(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_6)\n-#define DECL_LANG_FLAG_7(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_7)\n-#define DECL_LANG_FLAG_8(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_8)\n+#define DECL_LANG_FLAG_0(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_0)\n+#define DECL_LANG_FLAG_1(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_1)\n+#define DECL_LANG_FLAG_2(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_2)\n+#define DECL_LANG_FLAG_3(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_3)\n+#define DECL_LANG_FLAG_4(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_4)\n+#define DECL_LANG_FLAG_5(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_5)\n+#define DECL_LANG_FLAG_6(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_6)\n+#define DECL_LANG_FLAG_7(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_7)\n+#define DECL_LANG_FLAG_8(NODE) \\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_8)\n \n /* Nonzero for a decl which is at file scope.  */\n #define DECL_FILE_SCOPE_P(EXP) \t\t\t\t\t\\\n@@ -2755,7 +2787,7 @@ extern void decl_value_expr_insert (tree, tree);\n   (TREE_CHECK2 (NODE, VAR_DECL, PARM_DECL)->decl_common.decl_flag_2)\n #define DECL_VALUE_EXPR(NODE) \\\n   (decl_value_expr_lookup (DECL_WRTL_CHECK (NODE)))\n-#define SET_DECL_VALUE_EXPR(NODE, VAL)\t\t\t\\\n+#define SET_DECL_VALUE_EXPR(NODE, VAL) \\\n   (decl_value_expr_insert (DECL_WRTL_CHECK (NODE), VAL))\n \n /* Holds the RTL expression for the value of a variable or function.\n@@ -2773,12 +2805,14 @@ extern void decl_value_expr_insert (tree, tree);\n #define HAS_RTL_P(NODE) (CODE_CONTAINS_STRUCT (TREE_CODE (NODE), TS_DECL_WRTL))\n \n /* Returns nonzero if the DECL_RTL for NODE has already been set.  */\n-#define DECL_RTL_SET_P(NODE)  (HAS_RTL_P (NODE) && DECL_WRTL_CHECK (NODE)->decl_with_rtl.rtl != NULL)\n+#define DECL_RTL_SET_P(NODE) \\\n+  (HAS_RTL_P (NODE) && DECL_WRTL_CHECK (NODE)->decl_with_rtl.rtl != NULL)\n \n /* Copy the RTL from NODE1 to NODE2.  If the RTL was not set for\n    NODE1, it will not be set for NODE2; this is a lazy copy.  */\n #define COPY_DECL_RTL(NODE1, NODE2) \\\n-  (DECL_WRTL_CHECK (NODE2)->decl_with_rtl.rtl = DECL_WRTL_CHECK (NODE1)->decl_with_rtl.rtl)\n+  (DECL_WRTL_CHECK (NODE2)->decl_with_rtl.rtl \\\n+   = DECL_WRTL_CHECK (NODE1)->decl_with_rtl.rtl)\n \n /* The DECL_RTL for NODE, if it is set, or NULL, if it is not set.  */\n #define DECL_RTL_IF_SET(NODE) (DECL_RTL_SET_P (NODE) ? DECL_RTL (NODE) : NULL)\n@@ -2800,12 +2834,14 @@ struct GTY(()) tree_decl_with_rtl {\n    field from DECL_FIELD_OFFSET.  This field may be nonzero even for fields\n    that are not bit fields (since DECL_OFFSET_ALIGN may be larger than the\n    natural alignment of the field's type).  */\n-#define DECL_FIELD_BIT_OFFSET(NODE) (FIELD_DECL_CHECK (NODE)->field_decl.bit_offset)\n+#define DECL_FIELD_BIT_OFFSET(NODE) \\\n+  (FIELD_DECL_CHECK (NODE)->field_decl.bit_offset)\n \n /* In a FIELD_DECL, this indicates whether the field was a bit-field and\n    if so, the type that was originally specified for it.\n    TREE_TYPE may have been modified (in finish_struct).  */\n-#define DECL_BIT_FIELD_TYPE(NODE) (FIELD_DECL_CHECK (NODE)->field_decl.bit_field_type)\n+#define DECL_BIT_FIELD_TYPE(NODE) \\\n+  (FIELD_DECL_CHECK (NODE)->field_decl.bit_field_type)\n \n /* For a FIELD_DECL in a QUAL_UNION_TYPE, records the expression, which\n    if nonzero, indicates that the field occupies the type.  */\n@@ -2902,7 +2938,8 @@ struct GTY(()) tree_const_decl {\n \n /* For PARM_DECL, holds an RTL for the stack slot or register\n    where the data was actually passed.  */\n-#define DECL_INCOMING_RTL(NODE) (PARM_DECL_CHECK (NODE)->parm_decl.incoming_rtl)\n+#define DECL_INCOMING_RTL(NODE) \\\n+  (PARM_DECL_CHECK (NODE)->parm_decl.incoming_rtl)\n \n struct GTY(()) tree_parm_decl {\n   struct tree_decl_with_rtl common;\n@@ -2911,25 +2948,38 @@ struct GTY(()) tree_parm_decl {\n };\n \n \n-/* Nonzero in a decl means that the gimplifier has seen (or placed)\n-   this variable in a BIND_EXPR.  */\n-#define DECL_SEEN_IN_BIND_EXPR_P(NODE) \\\n-  (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.seen_in_bind_expr)\n-\n-/* Used to indicate that the linkage status of this DECL is not yet known,\n-   so it should not be output now.  */\n-#define DECL_DEFER_OUTPUT(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.defer_output)\n-\n /* Nonzero for a given ..._DECL node means that no warnings should be\n    generated just because this node is unused.  */\n #define DECL_IN_SYSTEM_HEADER(NODE) \\\n   (in_system_header_at (DECL_SOURCE_LOCATION (NODE)))\n \n+/* Used to indicate that the linkage status of this DECL is not yet known,\n+   so it should not be output now.  */\n+#define DECL_DEFER_OUTPUT(NODE) \\\n+  (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.defer_output)\n+\n+/* In a VAR_DECL that's static,\n+   nonzero if the space is in the text section.  */\n+#define DECL_IN_TEXT_SECTION(NODE) \\\n+  (VAR_DECL_CHECK (NODE)->decl_with_vis.in_text_section)\n+\n+/* Nonzero for a given ..._DECL node means that this node should be\n+   put in .common, if possible.  If a DECL_INITIAL is given, and it\n+   is not error_mark_node, then the decl cannot be put in .common.  */\n+#define DECL_COMMON(NODE) \\\n+  (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.common_flag)\n+\n+/* In a VAR_DECL, nonzero if the decl is a register variable with\n+   an explicit asm specification.  */\n+#define DECL_HARD_REGISTER(NODE)  \\\n+  (VAR_DECL_CHECK (NODE)->decl_with_vis.hard_register)\n+\n   /* Used to indicate that this DECL has weak linkage.  */\n #define DECL_WEAK(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.weak_flag)\n \n /* Used to indicate that the DECL is a dllimport.  */\n-#define DECL_DLLIMPORT_P(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.dllimport_flag)\n+#define DECL_DLLIMPORT_P(NODE) \\\n+  (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.dllimport_flag)\n \n /* Used in a DECL to indicate that, even if it TREE_PUBLIC, it need\n    not be put out unless it is needed in this translation unit.\n@@ -2940,9 +2990,15 @@ struct GTY(()) tree_parm_decl {\n    back-end; it is up to front-ends which set this flag to ensure\n    that there will never be any harm, other than bloat, in putting out\n    something which is DECL_COMDAT.  */\n-#define DECL_COMDAT(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.comdat_flag)\n+#define DECL_COMDAT(NODE) \\\n+  (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.comdat_flag)\n \n-#define DECL_COMDAT_GROUP(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.comdat_group)\n+#define DECL_COMDAT_GROUP(NODE) \\\n+  (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.comdat_group)\n+\n+/* Used in TREE_PUBLIC decls to indicate that copies of this DECL in\n+   multiple translation units should be merged.  */\n+#define DECL_ONE_ONLY(NODE) (DECL_COMDAT_GROUP (NODE) != NULL_TREE)\n \n /* A replaceable function is one which may be replaced at link-time\n    with an entirely different definition, provided that the\n@@ -2978,7 +3034,8 @@ struct GTY(()) tree_parm_decl {\n    the NODE might still have a DECL_ASSEMBLER_NAME -- it just hasn't been set\n    yet.  */\n #define DECL_ASSEMBLER_NAME_SET_P(NODE) \\\n-  (HAS_DECL_ASSEMBLER_NAME_P (NODE) &&  DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.assembler_name != NULL_TREE)\n+  (HAS_DECL_ASSEMBLER_NAME_P (NODE) \\\n+   && DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.assembler_name != NULL_TREE)\n \n /* Set the DECL_ASSEMBLER_NAME for NODE to NAME.  */\n #define SET_DECL_ASSEMBLER_NAME(NODE, NAME) \\\n@@ -3001,18 +3058,37 @@ struct GTY(()) tree_parm_decl {\n \n /* Records the section name in a section attribute.  Used to pass\n    the name from decl_attributes to make_function_rtl and make_decl_rtl.  */\n-#define DECL_SECTION_NAME(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.section_name)\n+#define DECL_SECTION_NAME(NODE) \\\n+  (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.section_name)\n+\n+/* Nonzero in a decl means that the gimplifier has seen (or placed)\n+   this variable in a BIND_EXPR.  */\n+#define DECL_SEEN_IN_BIND_EXPR_P(NODE) \\\n+  (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.seen_in_bind_expr)\n \n /* Value of the decls's visibility attribute */\n-#define DECL_VISIBILITY(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.visibility)\n+#define DECL_VISIBILITY(NODE) \\\n+  (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.visibility)\n \n /* Nonzero means that the decl had its visibility specified rather than\n    being inferred.  */\n-#define DECL_VISIBILITY_SPECIFIED(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.visibility_specified)\n+#define DECL_VISIBILITY_SPECIFIED(NODE) \\\n+  (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.visibility_specified)\n \n-/* Used in TREE_PUBLIC decls to indicate that copies of this DECL in\n-   multiple translation units should be merged.  */\n-#define DECL_ONE_ONLY(NODE) (DECL_COMDAT_GROUP (NODE) != NULL_TREE)\n+/* In a VAR_DECL, the model to use if the data should be allocated from\n+   thread-local storage.  */\n+#define DECL_TLS_MODEL(NODE) (VAR_DECL_CHECK (NODE)->decl_with_vis.tls_model)\n+\n+/* In a VAR_DECL, nonzero if the data should be allocated from\n+   thread-local storage.  */\n+#define DECL_THREAD_LOCAL_P(NODE) \\\n+  (VAR_DECL_CHECK (NODE)->decl_with_vis.tls_model >= TLS_MODEL_REAL)\n+\n+/* In a non-local VAR_DECL with static storage duration, true if the\n+   variable has an initialization priority.  If false, the variable\n+   will be initialized at the DEFAULT_INIT_PRIORITY.  */\n+#define DECL_HAS_INIT_PRIORITY_P(NODE) \\\n+  (VAR_DECL_CHECK (NODE)->decl_with_vis.init_priority_p)\n \n struct GTY(()) tree_decl_with_vis {\n  struct tree_decl_with_rtl common;\n@@ -3044,19 +3120,6 @@ struct GTY(()) tree_decl_with_vis {\n  /* 15 unused bits. */\n };\n \n-/* In a VAR_DECL that's static,\n-   nonzero if the space is in the text section.  */\n-#define DECL_IN_TEXT_SECTION(NODE) (VAR_DECL_CHECK (NODE)->decl_with_vis.in_text_section)\n-\n-/* Nonzero for a given ..._DECL node means that this node should be\n-   put in .common, if possible.  If a DECL_INITIAL is given, and it\n-   is not error_mark_node, then the decl cannot be put in .common.  */\n-#define DECL_COMMON(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.common_flag)\n-\n-/* In a VAR_DECL, nonzero if the decl is a register variable with\n-   an explicit asm specification.  */\n-#define DECL_HARD_REGISTER(NODE)  (VAR_DECL_CHECK (NODE)->decl_with_vis.hard_register)\n-\n extern tree decl_debug_expr_lookup (tree);\n extern void decl_debug_expr_insert (tree, tree);\n /* For VAR_DECL, this is set to either an expression that it was split\n@@ -3076,12 +3139,6 @@ extern priority_type decl_fini_priority_lookup (tree);\n extern void decl_init_priority_insert (tree, priority_type);\n extern void decl_fini_priority_insert (tree, priority_type);\n \n-/* In a non-local VAR_DECL with static storage duration, true if the\n-   variable has an initialization priority.  If false, the variable\n-   will be initialized at the DEFAULT_INIT_PRIORITY.  */\n-#define DECL_HAS_INIT_PRIORITY_P(NODE) \\\n-  (VAR_DECL_CHECK (NODE)->decl_with_vis.init_priority_p)\n-\n /* For a VAR_DECL or FUNCTION_DECL the initialization priority of\n    NODE.  */\n #define DECL_INIT_PRIORITY(NODE) \\\n@@ -3108,15 +3165,6 @@ extern void decl_fini_priority_insert (tree, priority_type);\n    libraries.  */\n #define MAX_RESERVED_INIT_PRIORITY 100\n \n-/* In a VAR_DECL, the model to use if the data should be allocated from\n-   thread-local storage.  */\n-#define DECL_TLS_MODEL(NODE) (VAR_DECL_CHECK (NODE)->decl_with_vis.tls_model)\n-\n-/* In a VAR_DECL, nonzero if the data should be allocated from\n-   thread-local storage.  */\n-#define DECL_THREAD_LOCAL_P(NODE) \\\n-  (VAR_DECL_CHECK (NODE)->decl_with_vis.tls_model >= TLS_MODEL_REAL)\n-\n #define DECL_VAR_ANN_PTR(NODE) \\\n   (TREE_CODE (NODE) == VAR_DECL ? &(NODE)->var_decl.ann \\\n    : TREE_CODE (NODE) == PARM_DECL ? &(NODE)->parm_decl.ann \\\n@@ -3131,7 +3179,8 @@ struct GTY(()) tree_var_decl {\n \n /* This field is used to reference anything in decl.result and is meant only\n    for use by the garbage collector.  */\n-#define DECL_RESULT_FLD(NODE) (DECL_NON_COMMON_CHECK (NODE)->decl_non_common.result)\n+#define DECL_RESULT_FLD(NODE) \\\n+  (DECL_NON_COMMON_CHECK (NODE)->decl_non_common.result)\n \n /* The DECL_VINDEX is used for FUNCTION_DECLS in two different ways.\n    Before the struct containing the FUNCTION_DECL is laid out,\n@@ -3141,7 +3190,8 @@ struct GTY(()) tree_var_decl {\n    to an INTEGER_CST node which is suitable for use as an index\n    into the virtual function table.\n    C++ also uses this field in namespaces, hence the DECL_NON_COMMON_CHECK.  */\n-#define DECL_VINDEX(NODE) (DECL_NON_COMMON_CHECK (NODE)->decl_non_common.vindex)\n+#define DECL_VINDEX(NODE) \\\n+  (DECL_NON_COMMON_CHECK (NODE)->decl_non_common.vindex)\n \n struct GTY(())\n  tree_decl_non_common {\n@@ -3160,16 +3210,19 @@ struct GTY(())\n #define DECL_RESULT(NODE) (FUNCTION_DECL_CHECK (NODE)->decl_non_common.result)\n \n /* In a FUNCTION_DECL, nonzero if the function cannot be inlined.  */\n-#define DECL_UNINLINABLE(NODE) (FUNCTION_DECL_CHECK (NODE)->function_decl.uninlinable)\n+#define DECL_UNINLINABLE(NODE) \\\n+  (FUNCTION_DECL_CHECK (NODE)->function_decl.uninlinable)\n \n /* In a FUNCTION_DECL, the saved representation of the body of the\n    entire function.  */\n-#define DECL_SAVED_TREE(NODE) (FUNCTION_DECL_CHECK (NODE)->decl_non_common.saved_tree)\n+#define DECL_SAVED_TREE(NODE) \\\n+  (FUNCTION_DECL_CHECK (NODE)->decl_non_common.saved_tree)\n \n /* Nonzero in a FUNCTION_DECL means this function should be treated\n    as if it were a malloc, meaning it returns a pointer that is\n    not an alias.  */\n-#define DECL_IS_MALLOC(NODE) (FUNCTION_DECL_CHECK (NODE)->function_decl.malloc_flag)\n+#define DECL_IS_MALLOC(NODE) \\\n+  (FUNCTION_DECL_CHECK (NODE)->function_decl.malloc_flag)\n \n /* Nonzero in a FUNCTION_DECL means this function should be treated as\n    C++ operator new, meaning that it returns a pointer for which we\n@@ -3198,7 +3251,8 @@ struct GTY(())\n /* Nonzero in a FUNCTION_DECL means this function should be treated\n    as \"novops\" function (function that does not read global memory,\n    but may have arbitrary side effects).  */\n-#define DECL_IS_NOVOPS(NODE) (FUNCTION_DECL_CHECK (NODE)->function_decl.novops_flag)\n+#define DECL_IS_NOVOPS(NODE) \\\n+  (FUNCTION_DECL_CHECK (NODE)->function_decl.novops_flag)\n \n /* Used in FUNCTION_DECLs to indicate that they should be run automatically\n    at the beginning or end of execution.  */\n@@ -3248,7 +3302,8 @@ struct GTY(())\n \n /* For FUNCTION_DECL, this holds a pointer to a structure (\"struct function\")\n    that describes the status of this function.  */\n-#define DECL_STRUCT_FUNCTION(NODE) (FUNCTION_DECL_CHECK (NODE)->function_decl.f)\n+#define DECL_STRUCT_FUNCTION(NODE) \\\n+  (FUNCTION_DECL_CHECK (NODE)->function_decl.f)\n \n /* In a FUNCTION_DECL, nonzero means a built in function.  */\n #define DECL_BUILT_IN(NODE) (DECL_BUILT_IN_CLASS (NODE) != NOT_BUILT_IN)\n@@ -3260,8 +3315,10 @@ struct GTY(())\n /* In FUNCTION_DECL, a chain of ..._DECL nodes.\n    VAR_DECL and PARM_DECL reserve the arguments slot for language-specific\n    uses.  */\n-#define DECL_ARGUMENTS(NODE) (FUNCTION_DECL_CHECK (NODE)->decl_non_common.arguments)\n-#define DECL_ARGUMENT_FLD(NODE) (DECL_NON_COMMON_CHECK (NODE)->decl_non_common.arguments)\n+#define DECL_ARGUMENTS(NODE) \\\n+  (FUNCTION_DECL_CHECK (NODE)->decl_non_common.arguments)\n+#define DECL_ARGUMENT_FLD(NODE) \\\n+  (DECL_NON_COMMON_CHECK (NODE)->decl_non_common.arguments)\n \n /* In FUNCTION_DECL, the function specific target options to use when compiling\n    this function.  */\n@@ -3321,7 +3378,8 @@ struct GTY(()) tree_function_decl {\n };\n \n /* For a TYPE_DECL, holds the \"original\" type.  (TREE_TYPE has the copy.) */\n-#define DECL_ORIGINAL_TYPE(NODE) (TYPE_DECL_CHECK (NODE)->decl_non_common.result)\n+#define DECL_ORIGINAL_TYPE(NODE) \\\n+  (TYPE_DECL_CHECK (NODE)->decl_non_common.result)\n \n /* In a TYPE_DECL nonzero means the detail info about this type is not dumped\n    into stabs.  Instead it will generate cross reference ('x') of names.\n@@ -3755,7 +3813,8 @@ extern GTY(()) tree global_trees[TI_MAX];\n #define void_list_node                  global_trees[TI_VOID_LIST_NODE]\n \n #define main_identifier_node\t\tglobal_trees[TI_MAIN_IDENTIFIER]\n-#define MAIN_NAME_P(NODE) (IDENTIFIER_NODE_CHECK (NODE) == main_identifier_node)\n+#define MAIN_NAME_P(NODE) \\\n+  (IDENTIFIER_NODE_CHECK (NODE) == main_identifier_node)\n \n /* Optimization options (OPTIMIZATION_NODE) to use for default and current\n    functions.  */\n@@ -5125,6 +5184,7 @@ extern void internal_reference_types (void);\n extern unsigned int update_alignment_for_field (record_layout_info, tree,\n                                                 unsigned int);\n /* varasm.c */\n+extern tree tree_output_constant_def (tree);\n extern void make_decl_rtl (tree);\n extern rtx make_decl_rtl_for_debug (tree);\n extern void make_decl_one_only (tree, tree);"}]}