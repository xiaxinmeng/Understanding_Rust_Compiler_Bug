{"sha": "1c53bc4fc8f687bc44f26b1dfd51a6e4745ef09c", "node_id": "C_kwDOANBUbNoAKDFjNTNiYzRmYzhmNjg3YmM0NGYyNmIxZGZkNTFhNmU0NzQ1ZWYwOWM", "commit": {"author": {"name": "Faisal Abbas", "email": "90.abbasfaisal@gmail.com", "date": "2022-08-08T17:42:33Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-25T11:40:27Z"}, "message": "rust constexpr: conttinue porting cxx_eval_builtin_function_call\n\nSigned-off-by: Faisal Abbas <90.abbasfaisal@gmail.com>", "tree": {"sha": "be153d96aa7fd1b8ce5c2c644488ff65a3b555c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be153d96aa7fd1b8ce5c2c644488ff65a3b555c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c53bc4fc8f687bc44f26b1dfd51a6e4745ef09c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c53bc4fc8f687bc44f26b1dfd51a6e4745ef09c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c53bc4fc8f687bc44f26b1dfd51a6e4745ef09c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c53bc4fc8f687bc44f26b1dfd51a6e4745ef09c/comments", "author": {"login": "abbasfaisal", "id": 9428333, "node_id": "MDQ6VXNlcjk0MjgzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/9428333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abbasfaisal", "html_url": "https://github.com/abbasfaisal", "followers_url": "https://api.github.com/users/abbasfaisal/followers", "following_url": "https://api.github.com/users/abbasfaisal/following{/other_user}", "gists_url": "https://api.github.com/users/abbasfaisal/gists{/gist_id}", "starred_url": "https://api.github.com/users/abbasfaisal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abbasfaisal/subscriptions", "organizations_url": "https://api.github.com/users/abbasfaisal/orgs", "repos_url": "https://api.github.com/users/abbasfaisal/repos", "events_url": "https://api.github.com/users/abbasfaisal/events{/privacy}", "received_events_url": "https://api.github.com/users/abbasfaisal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1170b0abe208b212eb395dc1d79fcfb7515e754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1170b0abe208b212eb395dc1d79fcfb7515e754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1170b0abe208b212eb395dc1d79fcfb7515e754"}], "stats": {"total": 170, "additions": 170, "deletions": 0}, "files": [{"sha": "f4a8383b19d7bb4536c4290b997198ab3687097c", "filename": "gcc/rust/backend/rust-tree.cc", "status": "modified", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c53bc4fc8f687bc44f26b1dfd51a6e4745ef09c/gcc%2Frust%2Fbackend%2Frust-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c53bc4fc8f687bc44f26b1dfd51a6e4745ef09c/gcc%2Frust%2Fbackend%2Frust-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-tree.cc?ref=1c53bc4fc8f687bc44f26b1dfd51a6e4745ef09c", "patch": "@@ -4883,4 +4883,172 @@ fold_builtin_source_location (location_t loc)\n   return build_fold_addr_expr_with_type_loc (loc, var, const_ptr_type_node);\n }\n \n+// forked from gcc/c-family.c-common.cc braced_lists_to_strings\n+\n+/* Attempt to convert a braced array initializer list CTOR for array\n+   TYPE into a STRING_CST for convenience and efficiency.  Return\n+   the converted string on success or the original ctor on failure.  */\n+\n+static tree\n+braced_list_to_string (tree type, tree ctor, bool member)\n+{\n+  /* Ignore non-members with unknown size like arrays with unspecified\n+     bound.  */\n+  tree typesize = TYPE_SIZE_UNIT (type);\n+  if (!member && !tree_fits_uhwi_p (typesize))\n+    return ctor;\n+\n+  /* If the target char size differes from the host char size, we'd risk\n+     loosing data and getting object sizes wrong by converting to\n+     host chars.  */\n+  if (TYPE_PRECISION (char_type_node) != CHAR_BIT)\n+    return ctor;\n+\n+  /* If the array has an explicit bound, use it to constrain the size\n+     of the string.  If it doesn't, be sure to create a string that's\n+     as long as implied by the index of the last zero specified via\n+     a designator, as in:\n+       const char a[] = { [7] = 0 };  */\n+  unsigned HOST_WIDE_INT maxelts;\n+  if (typesize)\n+    {\n+      maxelts = tree_to_uhwi (typesize);\n+      maxelts /= tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (type)));\n+    }\n+  else\n+    maxelts = HOST_WIDE_INT_M1U;\n+\n+  /* Avoid converting initializers for zero-length arrays (but do\n+     create them for flexible array members).  */\n+  if (!maxelts)\n+    return ctor;\n+\n+  unsigned HOST_WIDE_INT nelts = CONSTRUCTOR_NELTS (ctor);\n+\n+  auto_vec<char> str;\n+  str.reserve (nelts + 1);\n+\n+  unsigned HOST_WIDE_INT i;\n+  tree index, value;\n+\n+  FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ctor), i, index, value)\n+    {\n+      unsigned HOST_WIDE_INT idx = i;\n+      if (index)\n+\t{\n+\t  if (!tree_fits_uhwi_p (index))\n+\t    return ctor;\n+\t  idx = tree_to_uhwi (index);\n+\t}\n+\n+      /* auto_vec is limited to UINT_MAX elements.  */\n+      if (idx > UINT_MAX)\n+\treturn ctor;\n+\n+      /* Avoid non-constant initializers.  */\n+      if (!tree_fits_shwi_p (value))\n+\treturn ctor;\n+\n+      /* Skip over embedded nuls except the last one (initializer\n+\t elements are in ascending order of indices).  */\n+      HOST_WIDE_INT val = tree_to_shwi (value);\n+      if (!val && i + 1 < nelts)\n+\tcontinue;\n+\n+      if (idx < str.length ())\n+\treturn ctor;\n+\n+      /* Bail if the CTOR has a block of more than 256 embedded nuls\n+\t due to implicitly initialized elements.  */\n+      unsigned nchars = (idx - str.length ()) + 1;\n+      if (nchars > 256)\n+\treturn ctor;\n+\n+      if (nchars > 1)\n+\t{\n+\t  str.reserve (idx);\n+\t  str.quick_grow_cleared (idx);\n+\t}\n+\n+      if (idx >= maxelts)\n+\treturn ctor;\n+\n+      str.safe_insert (idx, val);\n+    }\n+\n+  /* Append a nul string termination.  */\n+  if (maxelts != HOST_WIDE_INT_M1U && str.length () < maxelts)\n+    str.safe_push (0);\n+\n+  /* Build a STRING_CST with the same type as the array.  */\n+  tree res = build_string (str.length (), str.begin ());\n+  TREE_TYPE (res) = type;\n+  return res;\n+}\n+\n+// forked from gcc/c-family.c-common.cc braced_lists_to_strings\n+\n+/* Implementation of the two-argument braced_lists_to_string withe\n+   the same arguments plus MEMBER which is set for struct members\n+   to allow initializers for flexible member arrays.  */\n+\n+static tree\n+braced_lists_to_strings (tree type, tree ctor, bool member)\n+{\n+  if (TREE_CODE (ctor) != CONSTRUCTOR)\n+    return ctor;\n+\n+  tree_code code = TREE_CODE (type);\n+\n+  tree ttp;\n+  if (code == ARRAY_TYPE)\n+    ttp = TREE_TYPE (type);\n+  else if (code == RECORD_TYPE)\n+    {\n+      ttp = TREE_TYPE (ctor);\n+      if (TREE_CODE (ttp) == ARRAY_TYPE)\n+\t{\n+\t  type = ttp;\n+\t  ttp = TREE_TYPE (ttp);\n+\t}\n+    }\n+  else\n+    return ctor;\n+\n+  if ((TREE_CODE (ttp) == ARRAY_TYPE || TREE_CODE (ttp) == INTEGER_TYPE)\n+      && TYPE_STRING_FLAG (ttp))\n+    return braced_list_to_string (type, ctor, member);\n+\n+  code = TREE_CODE (ttp);\n+  if (code == ARRAY_TYPE || RECORD_OR_UNION_TYPE_P (ttp))\n+    {\n+      bool rec = RECORD_OR_UNION_TYPE_P (ttp);\n+\n+      /* Handle array of arrays or struct member initializers.  */\n+      tree val;\n+      unsigned HOST_WIDE_INT idx;\n+      FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (ctor), idx, val)\n+\t{\n+\t  val = braced_lists_to_strings (ttp, val, rec);\n+\t  CONSTRUCTOR_ELT (ctor, idx)->value = val;\n+\t}\n+    }\n+\n+  return ctor;\n+}\n+\n+// forked from gcc/c-family.c-common.cc braced_lists_to_strings\n+\n+/* Attempt to convert a CTOR containing braced array initializer lists\n+   for array TYPE into one containing STRING_CSTs, for convenience and\n+   efficiency.  Recurse for arrays of arrays and member initializers.\n+   Return the converted CTOR or STRING_CST on success or the original\n+   CTOR otherwise.  */\n+\n+tree\n+braced_lists_to_strings (tree type, tree ctor)\n+{\n+  return braced_lists_to_strings (type, ctor, false);\n+}\n+\n } // namespace Rust"}, {"sha": "b79fa188652dfc398706fdc03150467c1a9db7cc", "filename": "gcc/rust/backend/rust-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c53bc4fc8f687bc44f26b1dfd51a6e4745ef09c/gcc%2Frust%2Fbackend%2Frust-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c53bc4fc8f687bc44f26b1dfd51a6e4745ef09c/gcc%2Frust%2Fbackend%2Frust-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-tree.h?ref=1c53bc4fc8f687bc44f26b1dfd51a6e4745ef09c", "patch": "@@ -2740,6 +2740,8 @@ extern tree lookup_enumerator (tree, tree);\n extern int\n is_class_type (tree, int);\n \n+extern tree braced_lists_to_strings (tree, tree);\n+\n // forked from gcc/cp/cp-tree.h\n \n enum"}]}