{"sha": "462f6c2041fad058abcdd5122e99a024f69a39d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYyZjZjMjA0MWZhZDA1OGFiY2RkNTEyMmU5OWEwMjRmNjlhMzlkNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-03T21:38:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-03T21:39:19Z"}, "message": "libstdc++: Workaround is_trivially_copyable<volatile T> (PR 94013)\n\nSeveral algorithms check the is_trivially_copyable trait to decide\nwhether to dispatch to memmove or memcmp as an optimization. Since\nr271435 (CWG DR 2094) the trait is true for volatile-qualified scalars,\nbut we can't use memmove or memcmp when the type is volatile. We need to\nalso check for volatile types.\n\nThis is complicated by the fact that in C++20 (but not earlier standards)\niterator_traits<volatile T*>::value_type is T, so we can't just check\nwhether the value_type is volatile.\n\nThe solution in this patch is to introduce new traits __memcpyable and\n__memcmpable which combine into a single trait the checks for pointers,\nthe value types being the same, and the type being trivially copyable\nbut not volatile-qualified.\n\n\tPR libstdc++/94013\n\t* include/bits/cpp_type_traits.h (__memcpyable, __memcmpable): New\n\ttraits to control when to use memmove and memcmp optimizations.\n\t(__is_nonvolatile_trivially_copyable): New helper trait.\n\t* include/bits/ranges_algo.h (__lexicographical_compare_fn): Do not\n\tuse memcmp optimization with volatile data.\n\t* include/bits/ranges_algobase.h (__equal_fn): Use __memcmpable.\n\t(__copy_or_move, __copy_or_move_backward): Use __memcpyable.\n\t* include/bits/stl_algobase.h (__copy_move_a2): Use __memcpyable.\n\t(__copy_move_backward_a2): Likewise.\n\t(__equal_aux1): Use __memcmpable.\n\t(__lexicographical_compare_aux): Do not use memcmp optimization with\n\tvolatile data.\n\t* testsuite/25_algorithms/copy/94013.cc: New test.\n\t* testsuite/25_algorithms/copy_backward/94013.cc: New test.\n\t* testsuite/25_algorithms/equal/94013.cc: New test.\n\t* testsuite/25_algorithms/fill/94013.cc: New test.\n\t* testsuite/25_algorithms/lexicographical_compare/94013.cc: New test.\n\t* testsuite/25_algorithms/move/94013.cc: New test.\n\t* testsuite/25_algorithms/move_backward/94013.cc: New test.", "tree": {"sha": "f6c890cf99d1ae83cf91bfd4a5d751e89d71a5e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6c890cf99d1ae83cf91bfd4a5d751e89d71a5e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/462f6c2041fad058abcdd5122e99a024f69a39d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/462f6c2041fad058abcdd5122e99a024f69a39d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/462f6c2041fad058abcdd5122e99a024f69a39d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/462f6c2041fad058abcdd5122e99a024f69a39d5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9"}], "stats": {"total": 646, "additions": 603, "deletions": 43}, "files": [{"sha": "640c5be90abd3307d013fdddd4ec83ee8828a2b5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=462f6c2041fad058abcdd5122e99a024f69a39d5", "patch": "@@ -1,5 +1,26 @@\n 2020-03-03  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/94013\n+\t* include/bits/cpp_type_traits.h (__memcpyable, __memcmpable): New\n+\ttraits to control when to use memmove and memcmp optimizations.\n+\t(__is_nonvolatile_trivially_copyable): New helper trait.\n+\t* include/bits/ranges_algo.h (__lexicographical_compare_fn): Do not\n+\tuse memcmp optimization with volatile data.\n+\t* include/bits/ranges_algobase.h (__equal_fn): Use __memcmpable.\n+\t(__copy_or_move, __copy_or_move_backward): Use __memcpyable.\n+\t* include/bits/stl_algobase.h (__copy_move_a2): Use __memcpyable.\n+\t(__copy_move_backward_a2): Likewise.\n+\t(__equal_aux1): Use __memcmpable.\n+\t(__lexicographical_compare_aux): Do not use memcmp optimization with\n+\tvolatile data.\n+\t* testsuite/25_algorithms/copy/94013.cc: New test.\n+\t* testsuite/25_algorithms/copy_backward/94013.cc: New test.\n+\t* testsuite/25_algorithms/equal/94013.cc: New test.\n+\t* testsuite/25_algorithms/fill/94013.cc: New test.\n+\t* testsuite/25_algorithms/lexicographical_compare/94013.cc: New test.\n+\t* testsuite/25_algorithms/move/94013.cc: New test.\n+\t* testsuite/25_algorithms/move_backward/94013.cc: New test.\n+\n \t* include/bits/stl_algobase.h (lexicographical_compare_three_way):\n \tAvoid redundant iterator comparisons (LWG 3410).\n "}, {"sha": "fac6e4bbea256aa97c1348d631f0148f78010b71", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=462f6c2041fad058abcdd5122e99a024f69a39d5", "patch": "@@ -420,6 +420,65 @@ __INT_N(__GLIBCXX_TYPE_INT_N_3)\n     };\n #endif\n \n+  template<typename> struct iterator_traits;\n+\n+  // A type that is safe for use with memcpy, memmove, memcmp etc.\n+  template<typename _Tp>\n+    struct __is_nonvolatile_trivially_copyable\n+    {\n+      enum { __value = __is_trivially_copyable(_Tp) };\n+    };\n+\n+  // Cannot use memcpy/memmove/memcmp on volatile types, but before C++20\n+  // iterator_traits<volatile T*>::value_type is volatile T and so the\n+  // partial specializations below match for volatile-qualified pointers\n+  // e.g. __memcpyable<volatile int*, volatile int*, volatile int>.\n+  template<typename _Tp>\n+    struct __is_nonvolatile_trivially_copyable<volatile _Tp>\n+    {\n+      enum { __value = 0 };\n+    };\n+\n+  // Whether two iterator types can be used with memcpy/memmove.\n+  template<typename _OutputIter, typename _InputIter>\n+    struct __memcpyable\n+    {\n+      enum { __value = 0 };\n+    };\n+\n+  template<typename _Tp>\n+    struct __memcpyable<_Tp*, _Tp*>\n+    : __is_nonvolatile_trivially_copyable<_Tp>\n+    { };\n+\n+  template<typename _Tp>\n+    struct __memcpyable<_Tp*, const _Tp*>\n+    : __is_nonvolatile_trivially_copyable<_Tp>\n+    { };\n+\n+  // Whether two iterator types can be used with memcmp.\n+  template<typename _Iter1, typename _Iter2>\n+    struct __memcmpable\n+    {\n+      enum { __value = 0 };\n+    };\n+\n+  // OK to use memcmp with pointers to trivially copyable types.\n+  template<typename _Tp>\n+    struct __memcmpable<_Tp*, _Tp*>\n+    : __is_nonvolatile_trivially_copyable<_Tp>\n+    { };\n+\n+  template<typename _Tp>\n+    struct __memcmpable<const _Tp*, _Tp*>\n+    : __is_nonvolatile_trivially_copyable<_Tp>\n+    { };\n+\n+  template<typename _Tp>\n+    struct __memcmpable<_Tp*, const _Tp*>\n+    : __is_nonvolatile_trivially_copyable<_Tp>\n+    { };\n+\n   //\n   // Move iterator type\n   //"}, {"sha": "56fbd50ce8ef2e9cca04c5aae9dcfdf7c59dc947", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=462f6c2041fad058abcdd5122e99a024f69a39d5", "patch": "@@ -3473,8 +3473,8 @@ namespace ranges\n \t\t     && __is_byte<_ValueType2>::__value\n \t\t     && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed\n \t\t     && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed\n-\t\t     && is_pointer_v<_Iter1>\n-\t\t     && is_pointer_v<_Iter2>\n+\t\t     && __ptr_to_nonvolatile<_Iter1>\n+\t\t     && __ptr_to_nonvolatile<_Iter2>\n \t\t     && (is_same_v<_Comp, ranges::less>\n \t\t\t || is_same_v<_Comp, ranges::greater>)\n \t\t     && is_same_v<_Proj1, identity>\n@@ -3537,6 +3537,11 @@ namespace ranges\n \t\t       std::move(__comp),\n \t\t       std::move(__proj1), std::move(__proj2));\n       }\n+\n+  private:\n+    template<typename _Iter, typename _Ref = iter_reference_t<_Iter>>\n+      static constexpr bool __ptr_to_nonvolatile\n+\t= is_pointer_v<_Iter> && !is_volatile_v<remove_reference_t<_Ref>>;\n   };\n \n   inline constexpr __lexicographical_compare_fn lexicographical_compare;"}, {"sha": "c0102f5ab11a9e3c227c151c46cc6d90510298e7", "filename": "libstdc++-v3/include/bits/ranges_algobase.h", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h?ref=462f6c2041fad058abcdd5122e99a024f69a39d5", "patch": "@@ -104,9 +104,7 @@ namespace ranges\n \t    using _ValueType2 = iter_value_t<_Iter2>;\n \t    constexpr bool __use_memcmp\n \t      = ((is_integral_v<_ValueType1> || is_pointer_v<_ValueType1>)\n-\t\t && is_same_v<_ValueType1, _ValueType2>\n-\t\t && is_pointer_v<_Iter1>\n-\t\t && is_pointer_v<_Iter2>\n+\t\t && __memcmpable<_Iter1, _Iter2>::__value\n \t\t && is_same_v<_Pred, ranges::equal_to>\n \t\t && is_same_v<_Proj1, identity>\n \t\t && is_same_v<_Proj2, identity>);\n@@ -252,16 +250,9 @@ namespace ranges\n \t  if (!std::is_constant_evaluated())\n #endif\n \t    {\n-\t      using _ValueTypeI = iter_value_t<_Iter>;\n-\t      using _ValueTypeO = typename iterator_traits<_Out>::value_type;\n-\t      constexpr bool __use_memmove\n-\t\t= (is_trivially_copyable_v<_ValueTypeI>\n-\t\t    && is_same_v<_ValueTypeI, _ValueTypeO>\n-\t\t    && is_pointer_v<_Iter>\n-\t\t    && is_pointer_v<_Out>);\n-\n-\t      if constexpr (__use_memmove)\n+\t      if constexpr (__memcpyable<_Iter, _Out>::__value)\n \t\t{\n+\t\t  using _ValueTypeI = iter_value_t<_Iter>;\n \t\t  static_assert(_IsMove\n \t\t      ? is_move_assignable_v<_ValueTypeI>\n \t\t      : is_copy_assignable_v<_ValueTypeI>);\n@@ -393,15 +384,9 @@ namespace ranges\n \t  if (!std::is_constant_evaluated())\n #endif\n \t    {\n-\t      using _ValueTypeI = iter_value_t<_Iter>;\n-\t      using _ValueTypeO = typename iterator_traits<_Out>::value_type;\n-\t      constexpr bool __use_memmove\n-\t\t= (is_trivially_copyable_v<_ValueTypeI>\n-\t\t    && is_same_v<_ValueTypeI, _ValueTypeO>\n-\t\t    && is_pointer_v<_Iter>\n-\t\t    && is_pointer_v<_Out>);\n-\t      if constexpr (__use_memmove)\n+\t      if constexpr (__memcpyable<_Out, _Iter>::__value)\n \t\t{\n+\t\t  using _ValueTypeI = iter_value_t<_Iter>;\n \t\t  static_assert(_IsMove\n \t\t      ? is_move_assignable_v<_ValueTypeI>\n \t\t      : is_copy_assignable_v<_ValueTypeI>);"}, {"sha": "8f3ca885f03160c20ceafb8f8b508f6f6976ea6d", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=462f6c2041fad058abcdd5122e99a024f69a39d5", "patch": "@@ -468,13 +468,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn std::__copy_move<_IsMove, false, _Category>::\n \t  __copy_m(__first, __last, __result);\n #endif\n-      typedef typename iterator_traits<_II>::value_type _ValueTypeI;\n-      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;\n-      const bool __simple = (__is_trivially_copyable(_ValueTypeI)\n-\t\t\t     && __is_pointer<_II>::__value\n-\t\t\t     && __is_pointer<_OI>::__value\n-\t\t\t     && __are_same<_ValueTypeI, _ValueTypeO>::__value);\n-      return std::__copy_move<_IsMove, __simple,\n+      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,\n \t\t\t      _Category>::__copy_m(__first, __last, __result);\n     }\n \n@@ -710,14 +704,8 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n \treturn std::__copy_move_backward<_IsMove, false, _Category>::\n \t  __copy_move_b(__first, __last, __result);\n #endif\n-      typedef typename iterator_traits<_BI1>::value_type _ValueType1;\n-      typedef typename iterator_traits<_BI2>::value_type _ValueType2;\n-      const bool __simple = (__is_trivially_copyable(_ValueType1)\n-\t\t\t     && __is_pointer<_BI1>::__value\n-\t\t\t     && __is_pointer<_BI2>::__value\n-\t\t\t     && __are_same<_ValueType1, _ValueType2>::__value);\n-\n-      return std::__copy_move_backward<_IsMove, __simple,\n+      return std::__copy_move_backward<_IsMove,\n+\t\t\t\t       __memcpyable<_BI2, _BI1>::__value,\n \t\t\t\t       _Category>::__copy_move_b(__first,\n \t\t\t\t\t\t\t\t __last,\n \t\t\t\t\t\t\t\t __result);\n@@ -1153,13 +1141,9 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n     __equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2)\n     {\n       typedef typename iterator_traits<_II1>::value_type _ValueType1;\n-      typedef typename iterator_traits<_II2>::value_type _ValueType2;\n       const bool __simple = ((__is_integer<_ValueType1>::__value\n \t\t\t      || __is_pointer<_ValueType1>::__value)\n-\t\t\t     && __is_pointer<_II1>::__value\n-\t\t\t     && __is_pointer<_II2>::__value\n-\t\t\t     && __are_same<_ValueType1, _ValueType2>::__value);\n-\n+\t\t\t     && __memcmpable<_II1, _II2>::__value);\n       return std::__equal<__simple>::equal(__first1, __last1, __first2);\n     }\n \n@@ -1298,7 +1282,15 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n \t && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed\n \t && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed\n \t && __is_pointer<_II1>::__value\n-\t && __is_pointer<_II2>::__value);\n+\t && __is_pointer<_II2>::__value\n+#if __cplusplus > 201703L\n+\t // For C++20 iterator_traits<volatile T*>::value_type is non-volatile\n+\t // so __is_byte<T> could be true, but we can't use memcmp with\n+\t // volatile data.\n+\t && !is_volatile_v<remove_reference_t<iter_reference_t<_II1>>>\n+\t && !is_volatile_v<remove_reference_t<iter_reference_t<_II2>>>\n+#endif\n+\t );\n \n       return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,\n \t\t\t\t\t\t\t    __first2, __last2);"}, {"sha": "8e72637aad15c6e52dcac95e4af26fdb69cc7b86", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/94013.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F94013.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F94013.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F94013.cc?ref=462f6c2041fad058abcdd5122e99a024f69a39d5", "patch": "@@ -0,0 +1,78 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  volatile int i[2] = { 1, 2 };\n+  volatile int j[2] = { 0, 0 };\n+  int k[2] = { 0, 0 };\n+\n+  std::copy(i, i+2, j);\n+  VERIFY( j[0] == 1 && j[1] == 2 );\n+  std::copy(i, i+2, k);\n+  VERIFY( k[0] == 1 && k[1] == 2 );\n+  std::copy(k+1, k+2, i);\n+  VERIFY( i[0] == 2 );\n+\n+  const volatile int* cj = j;\n+  std::copy(cj, cj+2, i);\n+  VERIFY( i[0] == 1 && i[1] == 2 );\n+  std::copy(cj+1, cj+2, k);\n+  VERIFY( k[0] == 2 );\n+  const int* ck = k;\n+  std::copy(ck, ck+2, i);\n+  VERIFY( i[0] == 2 && i[1] == 2 );\n+}\n+\n+void\n+test02()\n+{\n+#if __cplusplus > 201703L\n+  volatile int i[2] = { 1, 2 };\n+  volatile int j[2] = { 0, 0 };\n+  int k[2] = { 0, 0 };\n+\n+  std::ranges::copy(i, i+2, j);\n+  VERIFY( j[0] == 1 && j[1] == 2 );\n+  std::ranges::copy(i, i+2, k);\n+  VERIFY( k[0] == 1 && k[1] == 2 );\n+  std::ranges::copy(k+1, k+2, i);\n+  VERIFY( i[0] == 2 );\n+\n+  const volatile int* cj = j;\n+  std::ranges::copy(cj, cj+2, i);\n+  VERIFY( i[0] == 1 && i[1] == 2 );\n+  std::ranges::copy(cj+1, cj+2, k);\n+  VERIFY( k[0] == 2 );\n+  const int* ck = k;\n+  std::ranges::copy(ck, ck+2, i);\n+  VERIFY( i[0] == 2 && i[1] == 2 );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "18411521c545280b473b3c41cbe777dd6472bc60", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_backward/94013.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2F94013.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2F94013.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2F94013.cc?ref=462f6c2041fad058abcdd5122e99a024f69a39d5", "patch": "@@ -0,0 +1,78 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  volatile int i[2] = { 1, 2 };\n+  volatile int j[2] = { 0, 0 };\n+  int k[2] = { 0, 0 };\n+\n+  std::copy_backward(i, i+2, j+2);\n+  VERIFY( j[0] == 1 && j[1] == 2 );\n+  std::copy_backward(i, i+2, k+2);\n+  VERIFY( k[0] == 1 && k[1] == 2 );\n+  std::copy_backward(k+1, k+2, i+1);\n+  VERIFY( i[0] == 2 );\n+\n+  const volatile int* cj = j;\n+  std::copy_backward(cj, cj+2, i+2);\n+  VERIFY( i[0] == 1 && i[1] == 2 );\n+  std::copy_backward(cj+1, cj+2, k+1);\n+  VERIFY( k[0] == 2 );\n+  const int* ck = k;\n+  std::copy_backward(ck, ck+2, i+2);\n+  VERIFY( i[0] == 2 && i[1] == 2 );\n+}\n+\n+void\n+test02()\n+{\n+#if __cplusplus > 201703L\n+  volatile int i[2] = { 1, 2 };\n+  volatile int j[2] = { 0, 0 };\n+  int k[2] = { 0, 0 };\n+\n+  std::ranges::copy_backward(i, i+2, j+2);\n+  VERIFY( j[0] == 1 && j[1] == 2 );\n+  std::ranges::copy_backward(i, i+2, k+2);\n+  VERIFY( k[0] == 1 && k[1] == 2 );\n+  std::ranges::copy_backward(k+1, k+2, i+1);\n+  VERIFY( i[0] == 2 );\n+\n+  const volatile int* cj = j;\n+  std::ranges::copy_backward(cj, cj+2, i+2);\n+  VERIFY( i[0] == 1 && i[1] == 2 );\n+  std::ranges::copy_backward(cj+1, cj+2, k+1);\n+  VERIFY( k[0] == 2 );\n+  const int* ck = k;\n+  std::ranges::copy_backward(ck, ck+2, i+2);\n+  VERIFY( i[0] == 2 && i[1] == 2 );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "a5d275a1e929aa7d675bd17ebc9e5d965edd341e", "filename": "libstdc++-v3/testsuite/25_algorithms/equal/94013.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2F94013.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2F94013.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2F94013.cc?ref=462f6c2041fad058abcdd5122e99a024f69a39d5", "patch": "@@ -0,0 +1,69 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  volatile int i[] = { 0, 1, 2, 3 };\n+  volatile int j[] = { 1, 2, 3 };\n+  int k[] = { 2, 3, 4 };\n+\n+  VERIFY( std::equal(i+1, i+4, j) );\t  // volatile, volatile\n+  VERIFY( std::equal(i+2, i+4, k) );\t  // volatile, unqual\n+  VERIFY( ! std::equal(k, k+3, i+1) );\t  // unqual, volatile\n+\n+  const volatile int* cj = j;\n+  VERIFY( ! std::equal(cj, cj+2, cj+1) ); // const volatile, const volatile\n+  VERIFY( std::equal(cj, cj+3, i+1) );\t  // const volatile, volatile\n+  VERIFY( ! std::equal(i, i+2, cj) );\t  // volatile, const volatile\n+  VERIFY( std::equal(cj+1, cj+3, k) );\t  // const volatile, unqual\n+  VERIFY( ! std::equal(k, k+2, cj) );\t  // unqual, const volatile\n+  const int* ck = k;\n+  VERIFY( std::equal(ck, ck+2, i+2) );\t  // const, volatile\n+  VERIFY( ! std::equal(i, i+3, ck) );\t  // volatile, const\n+  VERIFY( std::equal(cj+1, cj+3, ck) );\t  // const volatile, const\n+  VERIFY( ! std::equal(ck, ck+1, cj) );\t  // const, const volatile\n+\n+#if __cplusplus > 201703L\n+  using std::ranges::equal;\n+  VERIFY( equal(i+1, i+4, j, j+3) );\t  // volatile, volatile\n+  VERIFY( equal(i+2, i+4, k, k+2) );\t  // volatile, unqual\n+  VERIFY( ! equal(k, k+3, i+1, i+4) );\t  // unqual, volatile\n+\n+  VERIFY( ! equal(cj, cj+2, cj+1, cj+3) );// const volatile, const volatile\n+  VERIFY( equal(cj, cj+3, i+1, i+4) );\t  // const volatile, volatile\n+  VERIFY( ! equal(i, i+2, cj, cj+2) );\t  // volatile, const volatile\n+  VERIFY( equal(cj+1, cj+3, k, k+2) );\t  // const volatile, unqual\n+  VERIFY( ! equal(k, k+2, cj, cj+2) );\t  // unqual, const volatile\n+\n+  VERIFY( equal(ck, ck+2, i+2, i+4) );\t  // const, volatile\n+  VERIFY( ! equal(i, i+3, ck, ck+3) );\t  // volatile, const\n+  VERIFY( equal(cj+1, cj+3, ck, ck+2) );  // const volatile, const\n+  VERIFY( ! equal(ck, ck+1, cj, cj+1) );  // const, const volatile\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "b28eb76157b6298eb5b0ac1c4270f9cb7685f002", "filename": "libstdc++-v3/testsuite/25_algorithms/fill/94013.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F94013.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F94013.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F94013.cc?ref=462f6c2041fad058abcdd5122e99a024f69a39d5", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  volatile unsigned char a[2] = { 1, 2 };\n+  volatile unsigned char c = 3;\n+\n+  std::fill(a, a+2, c);\n+  VERIFY( a[0] == 3 && a[1] == 3 );\n+\n+#if __cplusplus > 201703L\n+  c = 4;\n+  std::ranges::fill(a, c);\n+  VERIFY( a[0] == 4 && a[1] == 4 );\n+  // currently fails, see PR 94017\n+  // unsigned char c2 = 5;\n+  // std::ranges::fill(a, c2);\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "70cb0e7e2ca7226c1993cc7cb14e5429936d654f", "filename": "libstdc++-v3/testsuite/25_algorithms/lexicographical_compare/94013.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2F94013.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2F94013.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2F94013.cc?ref=462f6c2041fad058abcdd5122e99a024f69a39d5", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  volatile unsigned char i[] = { 0, 1, 2, 3 };\n+  volatile unsigned char j[] = { 1, 2, 3 };\n+  unsigned char k[] = { 2, 3, 4 };\n+\n+  // v = volatile, c = const, cv = const volatile, u = unqualified\n+\n+  VERIFY( ! std::lexicographical_compare(i+1, i+4, j, j+2) ); // v v\n+  VERIFY( std::lexicographical_compare(i+2, i+4, k, k+3) );   // v u\n+  VERIFY( ! std::lexicographical_compare(k, k+3, i+1, i+4) ); // u v\n+\n+  const volatile unsigned char* cj = j;\n+  VERIFY( std::lexicographical_compare(cj, cj+2, cj+1, cj+3) );\t// cv cv\n+  VERIFY( ! std::lexicographical_compare(cj, cj+3, i+1, i+4) );\t// cv v\n+  VERIFY( std::lexicographical_compare(i, i+2, cj, cj+2) );\t// v cv\n+  VERIFY( std::lexicographical_compare(cj+1, cj+3, k, k+3) );\t// cv u\n+  VERIFY( ! std::lexicographical_compare(k, k+2, cj, cj+3) );\t// u cv\n+  const unsigned char* ck = k;\n+  VERIFY( ! std::lexicographical_compare(ck, ck+2, i+1, i+2) );\t// c v\n+  VERIFY( std::lexicographical_compare(i, i+3, ck, ck+3) );\t// v c\n+  VERIFY( std::lexicographical_compare(cj+1, cj+3, ck, ck+3) );\t// cv c\n+  VERIFY( ! std::lexicographical_compare(ck, ck+1, cj, cj+2) );\t// c cv\n+\n+#if __cplusplus > 201703L\n+  using std::ranges::lexicographical_compare;\n+  VERIFY( ! lexicographical_compare(i+1, i+4, j, j+2) ); // v v\n+  VERIFY( lexicographical_compare(i+2, i+4, k, k+3) );   // v u\n+  VERIFY( ! lexicographical_compare(k, k+3, i+1, i+4) ); // u v\n+\n+  VERIFY( lexicographical_compare(cj, cj+2, cj+1, cj+3) );\t// cv cv\n+  VERIFY( ! lexicographical_compare(cj, cj+3, i+1, i+4) );\t// cv v\n+  VERIFY( lexicographical_compare(i, i+2, cj, cj+2) );\t\t// v cv\n+  VERIFY( lexicographical_compare(cj+1, cj+3, k, k+3) );\t// cv u\n+  VERIFY( ! lexicographical_compare(k, k+2, cj, cj+3) );\t// u cv\n+\n+  VERIFY( ! lexicographical_compare(ck, ck+2, i+1, i+2) );\t// c v\n+  VERIFY( lexicographical_compare(i, i+3, ck, ck+3) );\t\t// v c\n+  VERIFY( lexicographical_compare(cj+1, cj+3, ck, ck+3) );\t// cv c\n+  VERIFY( ! lexicographical_compare(ck, ck+1, cj, cj+2) );\t// c cv\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "45ee475244f7327eebe6a9004c8399b54405ed52", "filename": "libstdc++-v3/testsuite/25_algorithms/move/94013.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F94013.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F94013.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F94013.cc?ref=462f6c2041fad058abcdd5122e99a024f69a39d5", "patch": "@@ -0,0 +1,78 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  volatile int i[2] = { 1, 2 };\n+  volatile int j[2] = { 0, 0 };\n+  int k[2] = { 0, 0 };\n+\n+  std::move(i, i+2, j);\n+  VERIFY( j[0] == 1 && j[1] == 2 );\n+  std::move(i, i+2, k);\n+  VERIFY( k[0] == 1 && k[1] == 2 );\n+  std::move(k+1, k+2, i);\n+  VERIFY( i[0] == 2 );\n+\n+  const volatile int* cj = j;\n+  std::move(cj, cj+2, i);\n+  VERIFY( i[0] == 1 && i[1] == 2 );\n+  std::move(cj+1, cj+2, k);\n+  VERIFY( k[0] == 2 );\n+  const int* ck = k;\n+  std::move(ck, ck+2, i);\n+  VERIFY( i[0] == 2 && i[1] == 2 );\n+}\n+\n+void\n+test02()\n+{\n+#if __cplusplus > 201703L\n+  volatile int i[2] = { 1, 2 };\n+  volatile int j[2] = { 0, 0 };\n+  int k[2] = { 0, 0 };\n+\n+  std::ranges::move(i, i+2, j);\n+  VERIFY( j[0] == 1 && j[1] == 2 );\n+  std::ranges::move(i, i+2, k);\n+  VERIFY( k[0] == 1 && k[1] == 2 );\n+  std::ranges::move(k+1, k+2, i);\n+  VERIFY( i[0] == 2 );\n+\n+  const volatile int* cj = j;\n+  std::ranges::move(cj, cj+2, i);\n+  VERIFY( i[0] == 1 && i[1] == 2 );\n+  std::ranges::move(cj+1, cj+2, k);\n+  VERIFY( k[0] == 2 );\n+  const int* ck = k;\n+  std::ranges::move(ck, ck+2, i);\n+  VERIFY( i[0] == 2 && i[1] == 2 );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "2fc68f94e71eea82ff7f454f3ae9d60e49d30bcf", "filename": "libstdc++-v3/testsuite/25_algorithms/move_backward/94013.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2F94013.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f6c2041fad058abcdd5122e99a024f69a39d5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2F94013.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2F94013.cc?ref=462f6c2041fad058abcdd5122e99a024f69a39d5", "patch": "@@ -0,0 +1,78 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  volatile int i[2] = { 1, 2 };\n+  volatile int j[2] = { 0, 0 };\n+  int k[2] = { 0, 0 };\n+\n+  std::move_backward(i, i+2, j+2);\n+  VERIFY( j[0] == 1 && j[1] == 2 );\n+  std::move_backward(i, i+2, k+2);\n+  VERIFY( k[0] == 1 && k[1] == 2 );\n+  std::move_backward(k+1, k+2, i+1);\n+  VERIFY( i[0] == 2 );\n+\n+  const volatile int* cj = j;\n+  std::move_backward(cj, cj+2, i+2);\n+  VERIFY( i[0] == 1 && i[1] == 2 );\n+  std::move_backward(cj+1, cj+2, k+1);\n+  VERIFY( k[0] == 2 );\n+  const int* ck = k;\n+  std::move_backward(ck, ck+2, i+2);\n+  VERIFY( i[0] == 2 && i[1] == 2 );\n+}\n+\n+void\n+test02()\n+{\n+#if __cplusplus > 201703L\n+  volatile int i[2] = { 1, 2 };\n+  volatile int j[2] = { 0, 0 };\n+  int k[2] = { 0, 0 };\n+\n+  std::ranges::move_backward(i, i+2, j+2);\n+  VERIFY( j[0] == 1 && j[1] == 2 );\n+  std::ranges::move_backward(i, i+2, k+2);\n+  VERIFY( k[0] == 1 && k[1] == 2 );\n+  std::ranges::move_backward(k+1, k+2, i+1);\n+  VERIFY( i[0] == 2 );\n+\n+  const volatile int* cj = j;\n+  std::ranges::move_backward(cj, cj+2, i+2);\n+  VERIFY( i[0] == 1 && i[1] == 2 );\n+  std::ranges::move_backward(cj+1, cj+2, k+1);\n+  VERIFY( k[0] == 2 );\n+  const int* ck = k;\n+  std::ranges::move_backward(ck, ck+2, i+2);\n+  VERIFY( i[0] == 2 && i[1] == 2 );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}