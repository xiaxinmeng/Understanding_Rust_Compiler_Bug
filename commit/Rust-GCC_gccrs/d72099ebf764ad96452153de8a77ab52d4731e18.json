{"sha": "d72099ebf764ad96452153de8a77ab52d4731e18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcyMDk5ZWJmNzY0YWQ5NjQ1MjE1M2RlOGE3N2FiNTJkNDczMWUxOA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-05-24T13:04:34Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-24T13:04:34Z"}, "message": "[Ada] Spurious error on imported subprogram with precondition\n\nThis patch modifies the generation of wrappers for imported subprograms which\nare subject to contracts. In the case of an imported function, the original\nfunction is relocated within the wrapper, and the wrapper simply invokes the\nimported subprogram, returning its value. When the result type of the imported\nsubprogram is anonymous access, the relocation creates a new anonymous access\ntype, but with a different accessibility level. Since both return types are\nessentially the same type, eliminate the accessibility level inconsistency by\nunchecked converting the result of calling the imported function to the return\ntype.\n\n------------\n-- Source --\n------------\n\n--  pack.ads\n\npackage Pack is\n   type Integer_Ptr is access all Integer;\n   type Typ is null record;\n\n   function Predicate (Val : Typ) return Boolean is (True);\n\n   function Imported_1 (Val : Typ) return access Integer\n     with Pre => Predicate (Val), Import;\n\n   function Imported_2 (Val : Typ) return Integer_Ptr\n     with Pre => Predicate (Val), Import;\nend Pack;\n\n-----------------\n-- Compilation --\n-----------------\n\n$ gcc -c pack.ads\n\n2018-05-24  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* freeze.adb (Wrap_Imported_Subprogram): Generate an unchecked\n\tconversion to the return type to avoid a side effect where an imported\n\trelocated function generates a new anonymous access type, whose\n\taccessibility level does not agree with with that of the wrapper.\n\nFrom-SVN: r260645", "tree": {"sha": "708a3eb0682131c904a74f560fcc3aef2a61f763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/708a3eb0682131c904a74f560fcc3aef2a61f763"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d72099ebf764ad96452153de8a77ab52d4731e18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d72099ebf764ad96452153de8a77ab52d4731e18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d72099ebf764ad96452153de8a77ab52d4731e18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d72099ebf764ad96452153de8a77ab52d4731e18/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b5252ac694ea0393cc9443ef2cebcab60bab40d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b5252ac694ea0393cc9443ef2cebcab60bab40d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b5252ac694ea0393cc9443ef2cebcab60bab40d"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "c25e026b289e64f291fbc1398ad164ba3e577ae2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d72099ebf764ad96452153de8a77ab52d4731e18/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d72099ebf764ad96452153de8a77ab52d4731e18/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d72099ebf764ad96452153de8a77ab52d4731e18", "patch": "@@ -1,3 +1,10 @@\n+2018-05-24  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* freeze.adb (Wrap_Imported_Subprogram): Generate an unchecked\n+\tconversion to the return type to avoid a side effect where an imported\n+\trelocated function generates a new anonymous access type, whose\n+\taccessibility level does not agree with with that of the wrapper.\n+\n 2018-05-24  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_util.adb (Abstract_Interface_List): Add missing support for"}, {"sha": "a95a3673cbad5adfe0ee685aa20120d6bb7a3ad8", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d72099ebf764ad96452153de8a77ab52d4731e18/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d72099ebf764ad96452153de8a77ab52d4731e18/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=d72099ebf764ad96452153de8a77ab52d4731e18", "patch": "@@ -5172,13 +5172,24 @@ package body Freeze is\n \n             --  Build the call\n \n+            --  An imported function whose result type is anonymous access\n+            --  creates a new anonynous access type when it is relocated into\n+            --  the declarations of the body generated below. As a result, the\n+            --  accessibility level of these two anonymous access types may not\n+            --  be compatible even though they are essentially the same type.\n+            --  Use an unchecked type conversion to reconcile this case. Note\n+            --  that the conversion is safe because in the named access type\n+            --  case, both the body and imported function utilize the same\n+            --  type.\n+\n             if Ekind_In (E, E_Function, E_Generic_Function) then\n                Stmt :=\n                  Make_Simple_Return_Statement (Loc,\n                    Expression =>\n-                     Make_Function_Call (Loc,\n-                       Name                   => Make_Identifier (Loc, CE),\n-                       Parameter_Associations => Parms));\n+                     Unchecked_Convert_To (Etype (E),\n+                       Make_Function_Call (Loc,\n+                         Name                   => Make_Identifier (Loc, CE),\n+                         Parameter_Associations => Parms)));\n \n             else\n                Stmt :="}]}