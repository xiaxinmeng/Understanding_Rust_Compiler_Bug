{"sha": "6143c99823d855df4b855dc6ebf697310fa1dc8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE0M2M5OTgyM2Q4NTVkZjRiODU1ZGM2ZWJmNjk3MzEwZmExZGM4YQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2017-04-19T06:55:33Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2017-04-19T06:55:33Z"}, "message": "Use relative line number for subsequent dg directives\n\n2017-04-19  Tom de Vries  <tom@codesourcery.com>\n\n\tPR testsuite/80221\n\t* c-c++-common/Wimplicit-fallthrough-6.c: Use relative line number for\n\tsubsequent dg directives.\n\t* c-c++-common/Wimplicit-fallthrough-7.c: Same.\n\t* c-c++-common/Wint-to-pointer-cast-3.c: Same.\n\t* c-c++-common/attr-fallthrough-2.c: Same.\n\t* c-c++-common/cilk-plus/AN/parser_errors2.c: Same.\n\t* c-c++-common/cilk-plus/AN/parser_errors3.c: Same.\n\t* c-c++-common/cilk-plus/AN/pr61191.c: Same.\n\t* c-c++-common/cilk-plus/AN/pr61963.c: Same.\n\t* c-c++-common/cilk-plus/AN/pr62008.c: Same.\n\t* c-c++-common/cilk-plus/AN/rank_mismatch.c: Same.\n\t* c-c++-common/cilk-plus/CK/cilk_for_errors.c: Same.\n\t* c-c++-common/cilk-plus/CK/errors.c: Same.\n\t* c-c++-common/cilk-plus/CK/no_args_error.c: Same.\n\t* c-c++-common/cilk-plus/PS/clauses1.c: Same.\n\t* c-c++-common/cilk-plus/SE/vlength_errors.c: Same.\n\t* c-c++-common/cpp/pr57580.c: Same.\n\t* c-c++-common/goacc/asyncwait-1.c: Same.\n\t* c-c++-common/goacc/cache-2.c: Same.\n\t* c-c++-common/goacc/declare-2.c: Same.\n\t* c-c++-common/goacc/deviceptr-1.c: Same.\n\t* c-c++-common/goacc/routine-5.c: Same.\n\t* c-c++-common/gomp/clauses-2.c: Same.\n\t* c-c++-common/gomp/ordered-3.c: Same.\n\t* c-c++-common/gomp/pr67501.c: Same.\n\t* c-c++-common/pr20000.c: Same.\n\t* c-c++-common/pr43395.c: Same.\n\t* c-c++-common/pr49706.c: Same.\n\t* c-c++-common/pr77624-1.c: Same.\n\t* c-c++-common/pr77624-2.c: Same.\n\t* c-c++-common/raw-string-14.c: Same.\n\t* c-c++-common/raw-string-16.c: Same.\n\t* c-c++-common/raw-string-3.c: Same.\n\t* c-c++-common/raw-string-4.c: Same.\n\t* c-c++-common/raw-string-5.c: Same.\n\t* c-c++-common/raw-string-6.c: Same.\n\t* g++.dg/abi/mangle41.C: Same.\n\t* g++.dg/conversion/nullptr1.C: Same.\n\t* g++.dg/cpp0x/alias-decl-80296.C: Same.\n\t* g++.dg/cpp0x/auto27.C: Same.\n\t* g++.dg/cpp0x/constexpr-98.C: Same.\n\t* g++.dg/cpp0x/constexpr-diag2.C: Same.\n\t* g++.dg/cpp0x/diag2.C: Same.\n\t* g++.dg/cpp0x/lambda/lambda-syntax1.C: Same.\n\t* g++.dg/cpp0x/nullptr15.C: Same.\n\t* g++.dg/cpp0x/pr31431-2.C: Same.\n\t* g++.dg/cpp0x/pr31431.C: Same.\n\t* g++.dg/cpp0x/pr79118.C: Same.\n\t* g++.dg/cpp0x/static_assert3.C: Same.\n\t* g++.dg/cpp0x/temp_default2.C: Same.\n\t* g++.dg/cpp0x/trailing4.C: Same.\n\t* g++.dg/cpp0x/variadic-ex10.C: Same.\n\t* g++.dg/cpp0x/variadic-ex13.C: Same.\n\t* g++.dg/cpp0x/variadic-ex14.C: Same.\n\t* g++.dg/cpp0x/variadic-ex3.C: Same.\n\t* g++.dg/cpp0x/variadic-ex4.C: Same.\n\t* g++.dg/cpp0x/variadic59.C: Same.\n\t* g++.dg/cpp0x/vt-37737-2.C: Same.\n\t* g++.dg/cpp0x/vt-57397-1.C: Same.\n\t* g++.dg/cpp0x/vt-57397-2.C: Same.\n\t* g++.dg/cpp1z/constexpr-lambda8.C: Same.\n\t* g++.dg/cpp1z/gen-attrs1.C: Same.\n\t* g++.dg/diagnostic/pr71075.C: Same.\n\t* g++.dg/eh/goto2.C: Same.\n\t* g++.dg/eh/goto3.C: Same.\n\t* g++.dg/expr/bitfield4.C: Same.\n\t* g++.dg/expr/bitfield5.C: Same.\n\t* g++.dg/expr/bitfield6.C: Same.\n\t* g++.dg/expr/bool1.C: Same.\n\t* g++.dg/expr/bool3.C: Same.\n\t* g++.dg/expr/cond10.C: Same.\n\t* g++.dg/expr/cond11.C: Same.\n\t* g++.dg/expr/lval3.C: Same.\n\t* g++.dg/expr/lval4.C: Same.\n\t* g++.dg/ext/anon-struct4.C: Same.\n\t* g++.dg/ext/attrib44.C: Same.\n\t* g++.dg/ext/builtin3.C: Same.\n\t* g++.dg/ext/dllimport7.C: Same.\n\t* g++.dg/ext/label5.C: Same.\n\t* g++.dg/ext/no-asm-1.C: Same.\n\t* g++.dg/ext/utf16-4.C: Same.\n\t* g++.dg/ext/vla2.C: Same.\n\t* g++.dg/gomp/block-1.C: Same.\n\t* g++.dg/gomp/block-2.C: Same.\n\t* g++.dg/gomp/block-3.C: Same.\n\t* g++.dg/gomp/block-5.C: Same.\n\t* g++.dg/gomp/linear-2.C: Same.\n\t* g++.dg/gomp/target-1.C: Same.\n\t* g++.dg/gomp/target-2.C: Same.\n\t* g++.dg/gomp/taskgroup-1.C: Same.\n\t* g++.dg/gomp/teams-1.C: Same.\n\t* g++.dg/inherit/pure1.C: Same.\n\t* g++.dg/init/array43.C: Same.\n\t* g++.dg/init/array46.C: Same.\n\t* g++.dg/init/const10.C: Same.\n\t* g++.dg/init/ctor4-1.C: Same.\n\t* g++.dg/init/ctor4.C: Same.\n\t* g++.dg/init/new37.C: Same.\n\t* g++.dg/init/pr25811.C: Same.\n\t* g++.dg/init/pr29043.C: Same.\n\t* g++.dg/init/pr29571.C: Same.\n\t* g++.dg/lookup/duperr1.C: Same.\n\t* g++.dg/lookup/error1.C: Same.\n\t* g++.dg/lookup/koenig5.C: Same.\n\t* g++.dg/lookup/pr77549.C: Same.\n\t* g++.dg/lookup/suggestions1.C: Same.\n\t* g++.dg/lookup/using16.C: Same.\n\t* g++.dg/lookup/using7.C: Same.\n\t* g++.dg/other/anon-union3.C: Same.\n\t* g++.dg/other/array2.C: Same.\n\t* g++.dg/other/error13.C: Same.\n\t* g++.dg/other/error34.C: Same.\n\t* g++.dg/overload/builtin1.C: Same.\n\t* g++.dg/overload/conv-op1.C: Same.\n\t* g++.dg/overload/error3.C: Same.\n\t* g++.dg/overload/koenig1.C: Same.\n\t* g++.dg/overload/operator5.C: Same.\n\t* g++.dg/overload/template5.C: Same.\n\t* g++.dg/overload/unknown1.C: Same.\n\t* g++.dg/overload/using2.C: Same.\n\t* g++.dg/parse/constructor1.C: Same.\n\t* g++.dg/parse/crash36.C: Same.\n\t* g++.dg/parse/crash63.C: Same.\n\t* g++.dg/parse/error11.C: Same.\n\t* g++.dg/parse/error12.C: Same.\n\t* g++.dg/parse/error14.C: Same.\n\t* g++.dg/parse/error2.C: Same.\n\t* g++.dg/parse/error21.C: Same.\n\t* g++.dg/parse/error26.C: Same.\n\t* g++.dg/parse/error36.C: Same.\n\t* g++.dg/parse/friend12.C: Same.\n\t* g++.dg/parse/invalid-op1.C: Same.\n\t* g++.dg/parse/missing-template1.C: Same.\n\t* g++.dg/parse/parser-pr28152-2.C: Same.\n\t* g++.dg/parse/parser-pr28152.C: Same.\n\t* g++.dg/parse/pr16696-permissive.C: Same.\n\t* g++.dg/parse/pr16696.C: Same.\n\t* g++.dg/parse/pr69628.C: Same.\n\t* g++.dg/parse/ret-type2.C: Same.\n\t* g++.dg/parse/specialization1.C: Same.\n\t* g++.dg/parse/template3.C: Same.\n\t* g++.dg/parse/template9.C: Same.\n\t* g++.dg/parse/typename11.C: Same.\n\t* g++.dg/plugin/attribute_plugin-test-1.C: Same.\n\t* g++.dg/pr45330.C: Same.\n\t* g++.dg/rtti/typeid6.C: Same.\n\t* g++.dg/spellcheck-fields.C: Same.\n\t* g++.dg/spellcheck-typenames.C: Same.\n\t* g++.dg/tc1/dr108.C: Same.\n\t* g++.dg/tc1/dr147.C: Same.\n\t* g++.dg/template/arg7.C: Same.\n\t* g++.dg/template/conv11.C: Same.\n\t* g++.dg/template/crash13.C: Same.\n\t* g++.dg/template/crash55.C: Same.\n\t* g++.dg/template/dependent-expr5.C: Same.\n\t* g++.dg/template/error17.C: Same.\n\t* g++.dg/template/error33.C: Same.\n\t* g++.dg/template/error4.C: Same.\n\t* g++.dg/template/error50.C: Same.\n\t* g++.dg/template/error53.C: Same.\n\t* g++.dg/template/friend.C: Same.\n\t* g++.dg/template/func2.C: Same.\n\t* g++.dg/template/local6.C: Same.\n\t* g++.dg/template/member5.C: Same.\n\t* g++.dg/template/meminit1.C: Same.\n\t* g++.dg/template/nested3.C: Same.\n\t* g++.dg/template/nontype6.C: Same.\n\t* g++.dg/template/overload12.C: Same.\n\t* g++.dg/template/ptrmem8.C: Same.\n\t* g++.dg/template/qualified-id1.C: Same.\n\t* g++.dg/template/spec15.C: Same.\n\t* g++.dg/template/static1.C: Same.\n\t* g++.dg/template/static10.C: Same.\n\t* g++.dg/template/static2.C: Same.\n\t* g++.dg/template/ttp25.C: Same.\n\t* g++.dg/template/typedef2.C: Same.\n\t* g++.dg/template/typename2.C: Same.\n\t* g++.dg/template/unify10.C: Same.\n\t* g++.dg/template/unify6.C: Same.\n\t* g++.dg/template/unify7.C: Same.\n\t* g++.dg/template/unify9.C: Same.\n\t* g++.dg/template/varmod1.C: Same.\n\t* g++.dg/ubsan/div-by-zero-1.C: Same.\n\t* g++.dg/ubsan/pr63956.C: Same.\n\t* g++.dg/warn/Waddress-1.C: Same.\n\t* g++.dg/warn/Wconversion2.C: Same.\n\t* g++.dg/warn/Wnull-conversion-1.C: Same.\n\t* g++.dg/warn/Wsubobject-linkage-1.C: Same.\n\t* g++.dg/warn/Wsubobject-linkage-3.C: Same.\n\t* g++.dg/warn/Wswitch-1.C: Same.\n\t* g++.dg/warn/Wtype-limits-Wextra.C: Same.\n\t* g++.dg/warn/Wtype-limits.C: Same.\n\t* g++.dg/warn/Wunused-parm-5.C: Same.\n\t* g++.dg/warn/deprecated-6.C: Same.\n\t* g++.dg/warn/deprecated.C: Same.\n\t* g++.dg/warn/incomplete1.C: Same.\n\t* g++.dg/warn/multiple-overflow-warn-1.C: Same.\n\t* g++.dg/warn/multiple-overflow-warn-2.C: Same.\n\t* g++.dg/warn/multiple-overflow-warn-3.C: Same.\n\t* g++.dg/warn/overflow-warn-1.C: Same.\n\t* g++.dg/warn/overflow-warn-3.C: Same.\n\t* g++.dg/warn/overflow-warn-4.C: Same.\n\t* g++.dg/warn/pr12242.C: Same.\n\t* g++.dg/warn/pr30551-2.C: Same.\n\t* g++.dg/warn/pr30551.C: Same.\n\t* g++.old-deja/g++.benjamin/16077.C: Same.\n\t* g++.old-deja/g++.bob/inherit1.C: Same.\n\t* g++.old-deja/g++.brendan/crash56.C: Same.\n\t* g++.old-deja/g++.brendan/template17.C: Same.\n\t* g++.old-deja/g++.eh/ctor1.C: Same.\n\t* g++.old-deja/g++.jason/bool5.C: Same.\n\t* g++.old-deja/g++.jason/cond.C: Same.\n\t* g++.old-deja/g++.jason/operator.C: Same.\n\t* g++.old-deja/g++.jason/pmf5.C: Same.\n\t* g++.old-deja/g++.law/ctors5.C: Same.\n\t* g++.old-deja/g++.law/missed-error2.C: Same.\n\t* g++.old-deja/g++.law/operators9.C: Same.\n\t* g++.old-deja/g++.law/temps1.C: Same.\n\t* g++.old-deja/g++.mike/for2.C: Same.\n\t* g++.old-deja/g++.mike/ns5.C: Same.\n\t* g++.old-deja/g++.mike/ns7.C: Same.\n\t* g++.old-deja/g++.mike/p10769b.C: Same.\n\t* g++.old-deja/g++.niklas/t120.C: Same.\n\t* g++.old-deja/g++.niklas/t121.C: Same.\n\t* g++.old-deja/g++.ns/koenig5.C: Same.\n\t* g++.old-deja/g++.oliva/overload1.C: Same.\n\t* g++.old-deja/g++.other/crash24.C: Same.\n\t* g++.old-deja/g++.other/crash25.C: Same.\n\t* g++.old-deja/g++.other/decl5.C: Same.\n\t* g++.old-deja/g++.other/lineno5.C: Same.\n\t* g++.old-deja/g++.other/null3.C: Same.\n\t* g++.old-deja/g++.other/overcnv2.C: Same.\n\t* g++.old-deja/g++.other/ptrmem7.C: Same.\n\t* g++.old-deja/g++.other/typename1.C: Same.\n\t* g++.old-deja/g++.other/vaarg3.C: Same.\n\t* g++.old-deja/g++.pt/crash10.C: Same.\n\t* g++.old-deja/g++.pt/crash28.C: Same.\n\t* g++.old-deja/g++.pt/crash38.C: Same.\n\t* g++.old-deja/g++.pt/explicit70.C: Same.\n\t* g++.old-deja/g++.pt/explicit77.C: Same.\n\t* g++.old-deja/g++.pt/expr2.C: Same.\n\t* g++.old-deja/g++.pt/spec5.C: Same.\n\t* g++.old-deja/g++.pt/spec6.C: Same.\n\t* g++.old-deja/g++.pt/typename3.C: Same.\n\t* g++.old-deja/g++.pt/typename5.C: Same.\n\t* g++.old-deja/g++.pt/typename6.C: Same.\n\t* g++.old-deja/g++.pt/typename7.C: Same.\n\t* g++.old-deja/g++.pt/unify4.C: Same.\n\t* g++.old-deja/g++.pt/unify8.C: Same.\n\t* g++.old-deja/g++.pt/vaarg3.C: Same.\n\t* g++.old-deja/g++.robertl/eb22.C: Same.\n\t* g++.old-deja/g++.robertl/eb4.C: Same.\n\t* g++.old-deja/g++.robertl/eb44.C: Same.\n\t* g++.old-deja/g++.robertl/eb69.C: Same.\n\t* g++.old-deja/g++.robertl/eb98.C: Same.\n\t* gcc.dg/20031223-1.c: Same.\n\t* gcc.dg/940510-1.c: Same.\n\t* gcc.dg/990506-0.c: Same.\n\t* gcc.dg/Walloca-1.c: Same.\n\t* gcc.dg/Walloca-2.c: Same.\n\t* gcc.dg/Wconversion-integer.c: Same.\n\t* gcc.dg/Wcxx-compat-8.c: Same.\n\t* gcc.dg/Wimplicit-int-1.c: Same.\n\t* gcc.dg/Wimplicit-int-2.c: Same.\n\t* gcc.dg/Wimplicit-int-4.c: Same.\n\t* gcc.dg/Wpointer-sign-Wall.c: Same.\n\t* gcc.dg/Wpointer-sign-pedantic.c: Same.\n\t* gcc.dg/Wshadow-1.c: Same.\n\t* gcc.dg/Wshadow-3.c: Same.\n\t* gcc.dg/Wswitch-enum-error.c: Same.\n\t* gcc.dg/Wswitch-enum.c: Same.\n\t* gcc.dg/Wswitch-error.c: Same.\n\t* gcc.dg/Wswitch.c: Same.\n\t* gcc.dg/Wtype-limits-Wextra.c: Same.\n\t* gcc.dg/Wtype-limits.c: Same.\n\t* gcc.dg/Wvla-larger-than-2.c: Same.\n\t* gcc.dg/anon-struct-5.c: Same.\n\t* gcc.dg/array-10.c: Same.\n\t* gcc.dg/array-11.c: Same.\n\t* gcc.dg/array-15.c: Same.\n\t* gcc.dg/array-2.c: Same.\n\t* gcc.dg/array-8.c: Same.\n\t* gcc.dg/array-const-2.c: Same.\n\t* gcc.dg/array-const-3.c: Same.\n\t* gcc.dg/bitfld-1.c: Same.\n\t* gcc.dg/bitfld-8.c: Same.\n\t* gcc.dg/builtin-redefine.c: Same.\n\t* gcc.dg/c11-noreturn-1.c: Same.\n\t* gcc.dg/c11-noreturn-2.c: Same.\n\t* gcc.dg/c11-static-assert-3.c: Same.\n\t* gcc.dg/c90-arraydecl-1.c: Same.\n\t* gcc.dg/c90-complex-1.c: Same.\n\t* gcc.dg/c90-complit-1.c: Same.\n\t* gcc.dg/c90-const-expr-11.c: Same.\n\t* gcc.dg/c90-const-expr-7.c: Same.\n\t* gcc.dg/c90-const-expr-8.c: Same.\n\t* gcc.dg/c90-enum-comma-1.c: Same.\n\t* gcc.dg/c90-flex-array-1.c: Same.\n\t* gcc.dg/c90-hexfloat-1.c: Same.\n\t* gcc.dg/c90-idem-qual-1.c: Same.\n\t* gcc.dg/c90-idem-qual-2.c: Same.\n\t* gcc.dg/c90-idem-qual-3.c: Same.\n\t* gcc.dg/c90-mixdecl-1.c: Same.\n\t* gcc.dg/c90-restrict-1.c: Same.\n\t* gcc.dg/c90-return-1.c: Same.\n\t* gcc.dg/c99-array-nonobj-1.c: Same.\n\t* gcc.dg/c99-arraydecl-1.c: Same.\n\t* gcc.dg/c99-complex-1.c: Same.\n\t* gcc.dg/c99-complex-2.c: Same.\n\t* gcc.dg/c99-complit-2.c: Same.\n\t* gcc.dg/c99-const-expr-7.c: Same.\n\t* gcc.dg/c99-const-expr-8.c: Same.\n\t* gcc.dg/c99-flex-array-3.c: Same.\n\t* gcc.dg/c99-flex-array-7.c: Same.\n\t* gcc.dg/c99-flex-array-typedef-7.c: Same.\n\t* gcc.dg/c99-impl-decl-1.c: Same.\n\t* gcc.dg/c99-impl-int-1.c: Same.\n\t* gcc.dg/c99-impl-int-2.c: Same.\n\t* gcc.dg/c99-init-3.c: Same.\n\t* gcc.dg/c99-restrict-1.c: Same.\n\t* gcc.dg/c99-return-1.c: Same.\n\t* gcc.dg/c99-tag-1.c: Same.\n\t* gcc.dg/c99-tag-3.c: Same.\n\t* gcc.dg/call-diag-2.c: Same.\n\t* gcc.dg/cpp/19940712-1.c: Same.\n\t* gcc.dg/cpp/19951025-1.c: Same.\n\t* gcc.dg/cpp/19990413-1.c: Same.\n\t* gcc.dg/cpp/direct2.c: Same.\n\t* gcc.dg/cpp/direct2s.c: Same.\n\t* gcc.dg/cpp/pr28709.c: Same.\n\t* gcc.dg/cpp/pr61854-c90.c: Same.\n\t* gcc.dg/cpp/pr61854-c94.c: Same.\n\t* gcc.dg/cpp/pragma-1.c: Same.\n\t* gcc.dg/cpp/pragma-2.c: Same.\n\t* gcc.dg/cpp/trad/escaped-eof.c: Same.\n\t* gcc.dg/cpp/trad/literals-2.c: Same.\n\t* gcc.dg/cpp/warn-comments-2.c: Same.\n\t* gcc.dg/cpp/warn-comments-3.c: Same.\n\t* gcc.dg/cpp/warn-comments.c: Same.\n\t* gcc.dg/cpp/warn-long-long-2.c: Same.\n\t* gcc.dg/cpp/warn-long-long.c: Same.\n\t* gcc.dg/cpp/warn-redefined-2.c: Same.\n\t* gcc.dg/cpp/warn-redefined.c: Same.\n\t* gcc.dg/darwin-cfstring-2.c: Same.\n\t* gcc.dg/darwin-cfstring-format-1.c: Same.\n\t* gcc.dg/decl-9.c: Same.\n\t* gcc.dg/declspec-1.c: Same.\n\t* gcc.dg/declspec-10.c: Same.\n\t* gcc.dg/declspec-11.c: Same.\n\t* gcc.dg/declspec-13.c: Same.\n\t* gcc.dg/declspec-18.c: Same.\n\t* gcc.dg/declspec-4.c: Same.\n\t* gcc.dg/declspec-5.c: Same.\n\t* gcc.dg/declspec-6.c: Same.\n\t* gcc.dg/declspec-8.c: Same.\n\t* gcc.dg/deprecated-4.c: Same.\n\t* gcc.dg/deprecated.c: Same.\n\t* gcc.dg/dfp/composite-type.c: Same.\n\t* gcc.dg/empty-source-2.c: Same.\n\t* gcc.dg/empty-source-3.c: Same.\n\t* gcc.dg/format/attr-6.c: Same.\n\t* gcc.dg/format/branch-1.c: Same.\n\t* gcc.dg/format/c90-printf-1.c: Same.\n\t* gcc.dg/format/c90-strftime-2.c: Same.\n\t* gcc.dg/format/c99-strftime-1.c: Same.\n\t* gcc.dg/format/cmn-err-1.c: Same.\n\t* gcc.dg/format/few-1.c: Same.\n\t* gcc.dg/format/ms_branch-1.c: Same.\n\t* gcc.dg/format/ms_unnamed-1.c: Same.\n\t* gcc.dg/format/ms_va-1.c: Same.\n\t* gcc.dg/format/unnamed-1.c: Same.\n\t* gcc.dg/format/va-1.c: Same.\n\t* gcc.dg/format/xopen-1.c: Same.\n\t* gcc.dg/funcdef-var-1.c: Same.\n\t* gcc.dg/funcdef-var-2.c: Same.\n\t* gcc.dg/gnu89-const-expr-1.c: Same.\n\t* gcc.dg/gnu89-const-expr-2.c: Same.\n\t* gcc.dg/gnu90-const-expr-1.c: Same.\n\t* gcc.dg/gnu99-const-expr-1.c: Same.\n\t* gcc.dg/gnu99-const-expr-2.c: Same.\n\t* gcc.dg/gnu99-init-2.c: Same.\n\t* gcc.dg/gomp/_Atomic-5.c: Same.\n\t* gcc.dg/gomp/appendix-a/a.24.1.c: Same.\n\t* gcc.dg/gomp/atomic-5.c: Same.\n\t* gcc.dg/gomp/linear-1.c: Same.\n\t* gcc.dg/gomp/pr67500.c: Same.\n\t* gcc.dg/init-bad-1.c: Same.\n\t* gcc.dg/init-bad-2.c: Same.\n\t* gcc.dg/init-bad-3.c: Same.\n\t* gcc.dg/init-string-1.c: Same.\n\t* gcc.dg/label-compound-stmt-1.c: Same.\n\t* gcc.dg/label-decl-2.c: Same.\n\t* gcc.dg/label-decl-4.c: Same.\n\t* gcc.dg/large-size-array-2.c: Same.\n\t* gcc.dg/large-size-array-4.c: Same.\n\t* gcc.dg/lvalue-6.c: Same.\n\t* gcc.dg/m-un-2.c: Same.\n\t* gcc.dg/multiple-overflow-warn-1.c: Same.\n\t* gcc.dg/multiple-overflow-warn-2.c: Same.\n\t* gcc.dg/multiple-overflow-warn-3.c: Same.\n\t* gcc.dg/nested-redef-1.c: Same.\n\t* gcc.dg/no-asm-1.c: Same.\n\t* gcc.dg/no-asm-3.c: Same.\n\t* gcc.dg/no-asm-4.c: Same.\n\t* gcc.dg/noncompile/20010524-1.c: Same.\n\t* gcc.dg/noncompile/incomplete-5.c: Same.\n\t* gcc.dg/noncompile/pr44517.c: Same.\n\t* gcc.dg/noncompile/pr52290.c: Same.\n\t* gcc.dg/noreturn-1.c: Same.\n\t* gcc.dg/overflow-warn-1.c: Same.\n\t* gcc.dg/overflow-warn-2.c: Same.\n\t* gcc.dg/overflow-warn-3.c: Same.\n\t* gcc.dg/overflow-warn-4.c: Same.\n\t* gcc.dg/parm-mismatch-1.c: Same.\n\t* gcc.dg/parser-pr28152-2.c: Same.\n\t* gcc.dg/parser-pr28152.c: Same.\n\t* gcc.dg/pedwarn-init.c: Same.\n\t* gcc.dg/pointer-arith-2.c: Same.\n\t* gcc.dg/pointer-arith-3.c: Same.\n\t* gcc.dg/pointer-arith-4.c: Same.\n\t* gcc.dg/pr14475.c: Same.\n\t* gcc.dg/pr18596-3.c: Same.\n\t* gcc.dg/pr18809-1.c: Same.\n\t* gcc.dg/pr27953.c: Same.\n\t* gcc.dg/pr30457.c: Same.\n\t* gcc.dg/pr30551-2.c: Same.\n\t* gcc.dg/pr30551-3.c: Same.\n\t* gcc.dg/pr30551-4.c: Same.\n\t* gcc.dg/pr30551-5.c: Same.\n\t* gcc.dg/pr30551-6.c: Same.\n\t* gcc.dg/pr30551.c: Same.\n\t* gcc.dg/pr36997.c: Same.\n\t* gcc.dg/pr41842.c: Same.\n\t* gcc.dg/pr48552-1.c: Same.\n\t* gcc.dg/pr48552-2.c: Same.\n\t* gcc.dg/pr59717.c: Same.\n\t* gcc.dg/pr61077.c: Same.\n\t* gcc.dg/pr61096-1.c: Same.\n\t* gcc.dg/pr63626.c: Same.\n\t* gcc.dg/pr64223-1.c: Same.\n\t* gcc.dg/pr64223-2.c: Same.\n\t* gcc.dg/pr8788-1.c: Same.\n\t* gcc.dg/pr8927-1.c: Same.\n\t* gcc.dg/pragma-darwin.c: Same.\n\t* gcc.dg/pragma-diag-5.c: Same.\n\t* gcc.dg/pragma-message.c: Same.\n\t* gcc.dg/redecl-1.c: Same.\n\t* gcc.dg/simd-1.c: Same.\n\t* gcc.dg/simd-5.c: Same.\n\t* gcc.dg/simd-6.c: Same.\n\t* gcc.dg/spellcheck-fields.c: Same.\n\t* gcc.dg/spellcheck-typenames.c: Same.\n\t* gcc.dg/struct-semi-2.c: Same.\n\t* gcc.dg/struct-semi-3.c: Same.\n\t* gcc.dg/transparent-union-3.c: Same.\n\t* gcc.dg/ucnid-8.c: Same.\n\t* gcc.dg/uninit-pr19430-O0.c: Same.\n\t* gcc.dg/uninit-pr19430.c: Same.\n\t* gcc.dg/uninit-pr20644-O0.c: Same.\n\t* gcc.dg/utf-dflt.c: Same.\n\t* gcc.dg/utf-dflt2.c: Same.\n\t* gcc.dg/utf16-4.c: Same.\n\t* gcc.dg/vla-11.c: Same.\n\t* gcc.dg/vla-20.c: Same.\n\t* gcc.dg/vla-init-1.c: Same.\n\t* gcc.dg/vla-init-2.c: Same.\n\t* gcc.dg/vla-init-3.c: Same.\n\t* gcc.dg/weak/weak-6.c: Same.\n\t* gcc.dg/weak/weak-7.c: Same.\n\t* gcc.dg/wtr-int-type-1.c: Same.\n\t* gcc.target/aarch64/mgeneral-regs_1.c: Same.\n\t* gcc.target/arm/polytypes.c: Same.\n\t* gcc.target/i386/spellcheck-options-4.c: Same.\n\t* gcc.target/powerpc/20030218-1.c: Same.\n\t* gcc.target/sh/pr21255-4.c: Same.\n\t* gcc.test-framework/dg-error-exp-XP.c: Same.\n\t* gfortran.dg/array_constructor_30.f03: Same.\n\t* gfortran.dg/class_30.f90: Same.\n\t* gfortran.dg/goacc/subarrays.f95: Same.\n\t* gfortran.dg/gomp/appendix-a/a.23.5.f90: Same.\n\t* gfortran.dg/gomp/appendix-a/a.24.1.f90: Same.\n\t* gfortran.dg/intrinsic_std_1.f90: Same.\n\t* gfortran.dg/pr70006.f90: Same.\n\t* gfortran.dg/warning-directive-1.F90: Same.\n\t* gfortran.dg/warning-directive-2.F90: Same.\n\t* gfortran.dg/warning-directive-3.F90: Same.\n\t* gfortran.dg/warning-directive-4.F90: Same.\n\t* obj-c++.dg/attributes/method-noreturn-1.mm: Same.\n\t* obj-c++.dg/class-extension-1.mm: Same.\n\t* obj-c++.dg/class-extension-2.mm: Same.\n\t* obj-c++.dg/class-protocol-1.mm: Same.\n\t* obj-c++.dg/cxx-ivars-1.mm: Same.\n\t* obj-c++.dg/duplicate-class-1.mm: Same.\n\t* obj-c++.dg/exceptions-3.mm: Same.\n\t* obj-c++.dg/exceptions-4.mm: Same.\n\t* obj-c++.dg/exceptions-5.mm: Same.\n\t* obj-c++.dg/fsf-nsstring-format-1.mm: Same.\n\t* obj-c++.dg/fsf-package-0.m: Same.\n\t* obj-c++.dg/invalid-type-1.mm: Same.\n\t* obj-c++.dg/method-12.mm: Same.\n\t* obj-c++.dg/method-13.mm: Same.\n\t* obj-c++.dg/method-15.mm: Same.\n\t* obj-c++.dg/method-16.mm: Same.\n\t* obj-c++.dg/method-6.mm: Same.\n\t* obj-c++.dg/method-7.mm: Same.\n\t* obj-c++.dg/property/at-property-1.mm: Same.\n\t* obj-c++.dg/property/at-property-14.mm: Same.\n\t* obj-c++.dg/property/at-property-17.mm: Same.\n\t* obj-c++.dg/property/at-property-21.mm: Same.\n\t* obj-c++.dg/property/at-property-5.mm: Same.\n\t* obj-c++.dg/property/dotsyntax-4.mm: Same.\n\t* obj-c++.dg/property/dynamic-3.mm: Same.\n\t* obj-c++.dg/property/dynamic-4.mm: Same.\n\t* obj-c++.dg/property/property-neg-1.mm: Same.\n\t* obj-c++.dg/property/property-neg-6.mm: Same.\n\t* obj-c++.dg/property/synthesize-11.mm: Same.\n\t* obj-c++.dg/property/synthesize-5.mm: Same.\n\t* obj-c++.dg/property/synthesize-6.mm: Same.\n\t* obj-c++.dg/proto-lossage-4.mm: Same.\n\t* obj-c++.dg/protocol-qualifier-2.mm: Same.\n\t* obj-c++.dg/strings/strings-1.mm: Same.\n\t* obj-c++.dg/super-class-1.mm: Same.\n\t* obj-c++.dg/syntax-error-6.mm: Same.\n\t* obj-c++.dg/syntax-error-7.mm: Same.\n\t* obj-c++.dg/syntax-error-9.mm: Same.\n\t* obj-c++.dg/try-catch-13.mm: Same.\n\t* objc.dg/attributes/method-noreturn-1.m: Same.\n\t* objc.dg/bad-receiver-type-2.m: Same.\n\t* objc.dg/bad-receiver-type.m: Same.\n\t* objc.dg/call-super-2.m: Same.\n\t* objc.dg/class-2.m: Same.\n\t* objc.dg/class-extension-1.m: Same.\n\t* objc.dg/class-extension-2.m: Same.\n\t* objc.dg/class-protocol-1.m: Same.\n\t* objc.dg/desig-init-1.m: Same.\n\t* objc.dg/duplicate-class-1.m: Same.\n\t* objc.dg/exceptions-3.m: Same.\n\t* objc.dg/exceptions-4.m: Same.\n\t* objc.dg/exceptions-5.m: Same.\n\t* objc.dg/foreach-6.m: Same.\n\t* objc.dg/foreach-7.m: Same.\n\t* objc.dg/fsf-nsstring-format-1.m: Same.\n\t* objc.dg/fsf-package-0.m: Same.\n\t* objc.dg/invalid-type-1.m: Same.\n\t* objc.dg/method-11.m: Same.\n\t* objc.dg/method-19.m: Same.\n\t* objc.dg/method-2.m: Same.\n\t* objc.dg/method-20.m: Same.\n\t* objc.dg/method-5.m: Same.\n\t* objc.dg/method-6.m: Same.\n\t* objc.dg/method-7.m: Same.\n\t* objc.dg/method-9.m: Same.\n\t* objc.dg/missing-proto-3.m: Same.\n\t* objc.dg/private-1.m: Same.\n\t* objc.dg/property/at-property-1.m: Same.\n\t* objc.dg/property/at-property-14.m: Same.\n\t* objc.dg/property/at-property-17.m: Same.\n\t* objc.dg/property/at-property-21.m: Same.\n\t* objc.dg/property/at-property-5.m: Same.\n\t* objc.dg/property/dynamic-3.m: Same.\n\t* objc.dg/property/dynamic-4.m: Same.\n\t* objc.dg/property/property-neg-1.m: Same.\n\t* objc.dg/property/property-neg-6.m: Same.\n\t* objc.dg/property/synthesize-11.m: Same.\n\t* objc.dg/property/synthesize-5.m: Same.\n\t* objc.dg/property/synthesize-6.m: Same.\n\t* objc.dg/proto-hier-1.m: Same.\n\t* objc.dg/proto-lossage-4.m: Same.\n\t* objc.dg/protocol-qualifier-2.m: Same.\n\t* objc.dg/strings/strings-1.m: Same.\n\t* objc.dg/type-size-1.m: Same.\n\nFrom-SVN: r246988", "tree": {"sha": "cae8ca6d0226564e86231bd1b20464741d7cb93a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cae8ca6d0226564e86231bd1b20464741d7cb93a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6143c99823d855df4b855dc6ebf697310fa1dc8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6143c99823d855df4b855dc6ebf697310fa1dc8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6143c99823d855df4b855dc6ebf697310fa1dc8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6143c99823d855df4b855dc6ebf697310fa1dc8a/comments", "author": null, "committer": null, "parents": [{"sha": "d904a98328774c6df5d0aa6e2940b749dc36b12c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d904a98328774c6df5d0aa6e2940b749dc36b12c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d904a98328774c6df5d0aa6e2940b749dc36b12c"}], "stats": {"total": 3555, "additions": 2065, "deletions": 1490}, "files": [{"sha": "90fdddb5f91e87f46224e2f201353a57a7285053", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 575, "deletions": 0, "changes": 575, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,3 +1,578 @@\n+2017-04-19  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR testsuite/80221\n+\t* c-c++-common/Wimplicit-fallthrough-6.c: Use relative line number for\n+\tsubsequent dg directives.\n+\t* c-c++-common/Wimplicit-fallthrough-7.c: Same.\n+\t* c-c++-common/Wint-to-pointer-cast-3.c: Same.\n+\t* c-c++-common/attr-fallthrough-2.c: Same.\n+\t* c-c++-common/cilk-plus/AN/parser_errors2.c: Same.\n+\t* c-c++-common/cilk-plus/AN/parser_errors3.c: Same.\n+\t* c-c++-common/cilk-plus/AN/pr61191.c: Same.\n+\t* c-c++-common/cilk-plus/AN/pr61963.c: Same.\n+\t* c-c++-common/cilk-plus/AN/pr62008.c: Same.\n+\t* c-c++-common/cilk-plus/AN/rank_mismatch.c: Same.\n+\t* c-c++-common/cilk-plus/CK/cilk_for_errors.c: Same.\n+\t* c-c++-common/cilk-plus/CK/errors.c: Same.\n+\t* c-c++-common/cilk-plus/CK/no_args_error.c: Same.\n+\t* c-c++-common/cilk-plus/PS/clauses1.c: Same.\n+\t* c-c++-common/cilk-plus/SE/vlength_errors.c: Same.\n+\t* c-c++-common/cpp/pr57580.c: Same.\n+\t* c-c++-common/goacc/asyncwait-1.c: Same.\n+\t* c-c++-common/goacc/cache-2.c: Same.\n+\t* c-c++-common/goacc/declare-2.c: Same.\n+\t* c-c++-common/goacc/deviceptr-1.c: Same.\n+\t* c-c++-common/goacc/routine-5.c: Same.\n+\t* c-c++-common/gomp/clauses-2.c: Same.\n+\t* c-c++-common/gomp/ordered-3.c: Same.\n+\t* c-c++-common/gomp/pr67501.c: Same.\n+\t* c-c++-common/pr20000.c: Same.\n+\t* c-c++-common/pr43395.c: Same.\n+\t* c-c++-common/pr49706.c: Same.\n+\t* c-c++-common/pr77624-1.c: Same.\n+\t* c-c++-common/pr77624-2.c: Same.\n+\t* c-c++-common/raw-string-14.c: Same.\n+\t* c-c++-common/raw-string-16.c: Same.\n+\t* c-c++-common/raw-string-3.c: Same.\n+\t* c-c++-common/raw-string-4.c: Same.\n+\t* c-c++-common/raw-string-5.c: Same.\n+\t* c-c++-common/raw-string-6.c: Same.\n+\t* g++.dg/abi/mangle41.C: Same.\n+\t* g++.dg/conversion/nullptr1.C: Same.\n+\t* g++.dg/cpp0x/alias-decl-80296.C: Same.\n+\t* g++.dg/cpp0x/auto27.C: Same.\n+\t* g++.dg/cpp0x/constexpr-98.C: Same.\n+\t* g++.dg/cpp0x/constexpr-diag2.C: Same.\n+\t* g++.dg/cpp0x/diag2.C: Same.\n+\t* g++.dg/cpp0x/lambda/lambda-syntax1.C: Same.\n+\t* g++.dg/cpp0x/nullptr15.C: Same.\n+\t* g++.dg/cpp0x/pr31431-2.C: Same.\n+\t* g++.dg/cpp0x/pr31431.C: Same.\n+\t* g++.dg/cpp0x/pr79118.C: Same.\n+\t* g++.dg/cpp0x/static_assert3.C: Same.\n+\t* g++.dg/cpp0x/temp_default2.C: Same.\n+\t* g++.dg/cpp0x/trailing4.C: Same.\n+\t* g++.dg/cpp0x/variadic-ex10.C: Same.\n+\t* g++.dg/cpp0x/variadic-ex13.C: Same.\n+\t* g++.dg/cpp0x/variadic-ex14.C: Same.\n+\t* g++.dg/cpp0x/variadic-ex3.C: Same.\n+\t* g++.dg/cpp0x/variadic-ex4.C: Same.\n+\t* g++.dg/cpp0x/variadic59.C: Same.\n+\t* g++.dg/cpp0x/vt-37737-2.C: Same.\n+\t* g++.dg/cpp0x/vt-57397-1.C: Same.\n+\t* g++.dg/cpp0x/vt-57397-2.C: Same.\n+\t* g++.dg/cpp1z/constexpr-lambda8.C: Same.\n+\t* g++.dg/cpp1z/gen-attrs1.C: Same.\n+\t* g++.dg/diagnostic/pr71075.C: Same.\n+\t* g++.dg/eh/goto2.C: Same.\n+\t* g++.dg/eh/goto3.C: Same.\n+\t* g++.dg/expr/bitfield4.C: Same.\n+\t* g++.dg/expr/bitfield5.C: Same.\n+\t* g++.dg/expr/bitfield6.C: Same.\n+\t* g++.dg/expr/bool1.C: Same.\n+\t* g++.dg/expr/bool3.C: Same.\n+\t* g++.dg/expr/cond10.C: Same.\n+\t* g++.dg/expr/cond11.C: Same.\n+\t* g++.dg/expr/lval3.C: Same.\n+\t* g++.dg/expr/lval4.C: Same.\n+\t* g++.dg/ext/anon-struct4.C: Same.\n+\t* g++.dg/ext/attrib44.C: Same.\n+\t* g++.dg/ext/builtin3.C: Same.\n+\t* g++.dg/ext/dllimport7.C: Same.\n+\t* g++.dg/ext/label5.C: Same.\n+\t* g++.dg/ext/no-asm-1.C: Same.\n+\t* g++.dg/ext/utf16-4.C: Same.\n+\t* g++.dg/ext/vla2.C: Same.\n+\t* g++.dg/gomp/block-1.C: Same.\n+\t* g++.dg/gomp/block-2.C: Same.\n+\t* g++.dg/gomp/block-3.C: Same.\n+\t* g++.dg/gomp/block-5.C: Same.\n+\t* g++.dg/gomp/linear-2.C: Same.\n+\t* g++.dg/gomp/target-1.C: Same.\n+\t* g++.dg/gomp/target-2.C: Same.\n+\t* g++.dg/gomp/taskgroup-1.C: Same.\n+\t* g++.dg/gomp/teams-1.C: Same.\n+\t* g++.dg/inherit/pure1.C: Same.\n+\t* g++.dg/init/array43.C: Same.\n+\t* g++.dg/init/array46.C: Same.\n+\t* g++.dg/init/const10.C: Same.\n+\t* g++.dg/init/ctor4-1.C: Same.\n+\t* g++.dg/init/ctor4.C: Same.\n+\t* g++.dg/init/new37.C: Same.\n+\t* g++.dg/init/pr25811.C: Same.\n+\t* g++.dg/init/pr29043.C: Same.\n+\t* g++.dg/init/pr29571.C: Same.\n+\t* g++.dg/lookup/duperr1.C: Same.\n+\t* g++.dg/lookup/error1.C: Same.\n+\t* g++.dg/lookup/koenig5.C: Same.\n+\t* g++.dg/lookup/pr77549.C: Same.\n+\t* g++.dg/lookup/suggestions1.C: Same.\n+\t* g++.dg/lookup/using16.C: Same.\n+\t* g++.dg/lookup/using7.C: Same.\n+\t* g++.dg/other/anon-union3.C: Same.\n+\t* g++.dg/other/array2.C: Same.\n+\t* g++.dg/other/error13.C: Same.\n+\t* g++.dg/other/error34.C: Same.\n+\t* g++.dg/overload/builtin1.C: Same.\n+\t* g++.dg/overload/conv-op1.C: Same.\n+\t* g++.dg/overload/error3.C: Same.\n+\t* g++.dg/overload/koenig1.C: Same.\n+\t* g++.dg/overload/operator5.C: Same.\n+\t* g++.dg/overload/template5.C: Same.\n+\t* g++.dg/overload/unknown1.C: Same.\n+\t* g++.dg/overload/using2.C: Same.\n+\t* g++.dg/parse/constructor1.C: Same.\n+\t* g++.dg/parse/crash36.C: Same.\n+\t* g++.dg/parse/crash63.C: Same.\n+\t* g++.dg/parse/error11.C: Same.\n+\t* g++.dg/parse/error12.C: Same.\n+\t* g++.dg/parse/error14.C: Same.\n+\t* g++.dg/parse/error2.C: Same.\n+\t* g++.dg/parse/error21.C: Same.\n+\t* g++.dg/parse/error26.C: Same.\n+\t* g++.dg/parse/error36.C: Same.\n+\t* g++.dg/parse/friend12.C: Same.\n+\t* g++.dg/parse/invalid-op1.C: Same.\n+\t* g++.dg/parse/missing-template1.C: Same.\n+\t* g++.dg/parse/parser-pr28152-2.C: Same.\n+\t* g++.dg/parse/parser-pr28152.C: Same.\n+\t* g++.dg/parse/pr16696-permissive.C: Same.\n+\t* g++.dg/parse/pr16696.C: Same.\n+\t* g++.dg/parse/pr69628.C: Same.\n+\t* g++.dg/parse/ret-type2.C: Same.\n+\t* g++.dg/parse/specialization1.C: Same.\n+\t* g++.dg/parse/template3.C: Same.\n+\t* g++.dg/parse/template9.C: Same.\n+\t* g++.dg/parse/typename11.C: Same.\n+\t* g++.dg/plugin/attribute_plugin-test-1.C: Same.\n+\t* g++.dg/pr45330.C: Same.\n+\t* g++.dg/rtti/typeid6.C: Same.\n+\t* g++.dg/spellcheck-fields.C: Same.\n+\t* g++.dg/spellcheck-typenames.C: Same.\n+\t* g++.dg/tc1/dr108.C: Same.\n+\t* g++.dg/tc1/dr147.C: Same.\n+\t* g++.dg/template/arg7.C: Same.\n+\t* g++.dg/template/conv11.C: Same.\n+\t* g++.dg/template/crash13.C: Same.\n+\t* g++.dg/template/crash55.C: Same.\n+\t* g++.dg/template/dependent-expr5.C: Same.\n+\t* g++.dg/template/error17.C: Same.\n+\t* g++.dg/template/error33.C: Same.\n+\t* g++.dg/template/error4.C: Same.\n+\t* g++.dg/template/error50.C: Same.\n+\t* g++.dg/template/error53.C: Same.\n+\t* g++.dg/template/friend.C: Same.\n+\t* g++.dg/template/func2.C: Same.\n+\t* g++.dg/template/local6.C: Same.\n+\t* g++.dg/template/member5.C: Same.\n+\t* g++.dg/template/meminit1.C: Same.\n+\t* g++.dg/template/nested3.C: Same.\n+\t* g++.dg/template/nontype6.C: Same.\n+\t* g++.dg/template/overload12.C: Same.\n+\t* g++.dg/template/ptrmem8.C: Same.\n+\t* g++.dg/template/qualified-id1.C: Same.\n+\t* g++.dg/template/spec15.C: Same.\n+\t* g++.dg/template/static1.C: Same.\n+\t* g++.dg/template/static10.C: Same.\n+\t* g++.dg/template/static2.C: Same.\n+\t* g++.dg/template/ttp25.C: Same.\n+\t* g++.dg/template/typedef2.C: Same.\n+\t* g++.dg/template/typename2.C: Same.\n+\t* g++.dg/template/unify10.C: Same.\n+\t* g++.dg/template/unify6.C: Same.\n+\t* g++.dg/template/unify7.C: Same.\n+\t* g++.dg/template/unify9.C: Same.\n+\t* g++.dg/template/varmod1.C: Same.\n+\t* g++.dg/ubsan/div-by-zero-1.C: Same.\n+\t* g++.dg/ubsan/pr63956.C: Same.\n+\t* g++.dg/warn/Waddress-1.C: Same.\n+\t* g++.dg/warn/Wconversion2.C: Same.\n+\t* g++.dg/warn/Wnull-conversion-1.C: Same.\n+\t* g++.dg/warn/Wsubobject-linkage-1.C: Same.\n+\t* g++.dg/warn/Wsubobject-linkage-3.C: Same.\n+\t* g++.dg/warn/Wswitch-1.C: Same.\n+\t* g++.dg/warn/Wtype-limits-Wextra.C: Same.\n+\t* g++.dg/warn/Wtype-limits.C: Same.\n+\t* g++.dg/warn/Wunused-parm-5.C: Same.\n+\t* g++.dg/warn/deprecated-6.C: Same.\n+\t* g++.dg/warn/deprecated.C: Same.\n+\t* g++.dg/warn/incomplete1.C: Same.\n+\t* g++.dg/warn/multiple-overflow-warn-1.C: Same.\n+\t* g++.dg/warn/multiple-overflow-warn-2.C: Same.\n+\t* g++.dg/warn/multiple-overflow-warn-3.C: Same.\n+\t* g++.dg/warn/overflow-warn-1.C: Same.\n+\t* g++.dg/warn/overflow-warn-3.C: Same.\n+\t* g++.dg/warn/overflow-warn-4.C: Same.\n+\t* g++.dg/warn/pr12242.C: Same.\n+\t* g++.dg/warn/pr30551-2.C: Same.\n+\t* g++.dg/warn/pr30551.C: Same.\n+\t* g++.old-deja/g++.benjamin/16077.C: Same.\n+\t* g++.old-deja/g++.bob/inherit1.C: Same.\n+\t* g++.old-deja/g++.brendan/crash56.C: Same.\n+\t* g++.old-deja/g++.brendan/template17.C: Same.\n+\t* g++.old-deja/g++.eh/ctor1.C: Same.\n+\t* g++.old-deja/g++.jason/bool5.C: Same.\n+\t* g++.old-deja/g++.jason/cond.C: Same.\n+\t* g++.old-deja/g++.jason/operator.C: Same.\n+\t* g++.old-deja/g++.jason/pmf5.C: Same.\n+\t* g++.old-deja/g++.law/ctors5.C: Same.\n+\t* g++.old-deja/g++.law/missed-error2.C: Same.\n+\t* g++.old-deja/g++.law/operators9.C: Same.\n+\t* g++.old-deja/g++.law/temps1.C: Same.\n+\t* g++.old-deja/g++.mike/for2.C: Same.\n+\t* g++.old-deja/g++.mike/ns5.C: Same.\n+\t* g++.old-deja/g++.mike/ns7.C: Same.\n+\t* g++.old-deja/g++.mike/p10769b.C: Same.\n+\t* g++.old-deja/g++.niklas/t120.C: Same.\n+\t* g++.old-deja/g++.niklas/t121.C: Same.\n+\t* g++.old-deja/g++.ns/koenig5.C: Same.\n+\t* g++.old-deja/g++.oliva/overload1.C: Same.\n+\t* g++.old-deja/g++.other/crash24.C: Same.\n+\t* g++.old-deja/g++.other/crash25.C: Same.\n+\t* g++.old-deja/g++.other/decl5.C: Same.\n+\t* g++.old-deja/g++.other/lineno5.C: Same.\n+\t* g++.old-deja/g++.other/null3.C: Same.\n+\t* g++.old-deja/g++.other/overcnv2.C: Same.\n+\t* g++.old-deja/g++.other/ptrmem7.C: Same.\n+\t* g++.old-deja/g++.other/typename1.C: Same.\n+\t* g++.old-deja/g++.other/vaarg3.C: Same.\n+\t* g++.old-deja/g++.pt/crash10.C: Same.\n+\t* g++.old-deja/g++.pt/crash28.C: Same.\n+\t* g++.old-deja/g++.pt/crash38.C: Same.\n+\t* g++.old-deja/g++.pt/explicit70.C: Same.\n+\t* g++.old-deja/g++.pt/explicit77.C: Same.\n+\t* g++.old-deja/g++.pt/expr2.C: Same.\n+\t* g++.old-deja/g++.pt/spec5.C: Same.\n+\t* g++.old-deja/g++.pt/spec6.C: Same.\n+\t* g++.old-deja/g++.pt/typename3.C: Same.\n+\t* g++.old-deja/g++.pt/typename5.C: Same.\n+\t* g++.old-deja/g++.pt/typename6.C: Same.\n+\t* g++.old-deja/g++.pt/typename7.C: Same.\n+\t* g++.old-deja/g++.pt/unify4.C: Same.\n+\t* g++.old-deja/g++.pt/unify8.C: Same.\n+\t* g++.old-deja/g++.pt/vaarg3.C: Same.\n+\t* g++.old-deja/g++.robertl/eb22.C: Same.\n+\t* g++.old-deja/g++.robertl/eb4.C: Same.\n+\t* g++.old-deja/g++.robertl/eb44.C: Same.\n+\t* g++.old-deja/g++.robertl/eb69.C: Same.\n+\t* g++.old-deja/g++.robertl/eb98.C: Same.\n+\t* gcc.dg/20031223-1.c: Same.\n+\t* gcc.dg/940510-1.c: Same.\n+\t* gcc.dg/990506-0.c: Same.\n+\t* gcc.dg/Walloca-1.c: Same.\n+\t* gcc.dg/Walloca-2.c: Same.\n+\t* gcc.dg/Wconversion-integer.c: Same.\n+\t* gcc.dg/Wcxx-compat-8.c: Same.\n+\t* gcc.dg/Wimplicit-int-1.c: Same.\n+\t* gcc.dg/Wimplicit-int-2.c: Same.\n+\t* gcc.dg/Wimplicit-int-4.c: Same.\n+\t* gcc.dg/Wpointer-sign-Wall.c: Same.\n+\t* gcc.dg/Wpointer-sign-pedantic.c: Same.\n+\t* gcc.dg/Wshadow-1.c: Same.\n+\t* gcc.dg/Wshadow-3.c: Same.\n+\t* gcc.dg/Wswitch-enum-error.c: Same.\n+\t* gcc.dg/Wswitch-enum.c: Same.\n+\t* gcc.dg/Wswitch-error.c: Same.\n+\t* gcc.dg/Wswitch.c: Same.\n+\t* gcc.dg/Wtype-limits-Wextra.c: Same.\n+\t* gcc.dg/Wtype-limits.c: Same.\n+\t* gcc.dg/Wvla-larger-than-2.c: Same.\n+\t* gcc.dg/anon-struct-5.c: Same.\n+\t* gcc.dg/array-10.c: Same.\n+\t* gcc.dg/array-11.c: Same.\n+\t* gcc.dg/array-15.c: Same.\n+\t* gcc.dg/array-2.c: Same.\n+\t* gcc.dg/array-8.c: Same.\n+\t* gcc.dg/array-const-2.c: Same.\n+\t* gcc.dg/array-const-3.c: Same.\n+\t* gcc.dg/bitfld-1.c: Same.\n+\t* gcc.dg/bitfld-8.c: Same.\n+\t* gcc.dg/builtin-redefine.c: Same.\n+\t* gcc.dg/c11-noreturn-1.c: Same.\n+\t* gcc.dg/c11-noreturn-2.c: Same.\n+\t* gcc.dg/c11-static-assert-3.c: Same.\n+\t* gcc.dg/c90-arraydecl-1.c: Same.\n+\t* gcc.dg/c90-complex-1.c: Same.\n+\t* gcc.dg/c90-complit-1.c: Same.\n+\t* gcc.dg/c90-const-expr-11.c: Same.\n+\t* gcc.dg/c90-const-expr-7.c: Same.\n+\t* gcc.dg/c90-const-expr-8.c: Same.\n+\t* gcc.dg/c90-enum-comma-1.c: Same.\n+\t* gcc.dg/c90-flex-array-1.c: Same.\n+\t* gcc.dg/c90-hexfloat-1.c: Same.\n+\t* gcc.dg/c90-idem-qual-1.c: Same.\n+\t* gcc.dg/c90-idem-qual-2.c: Same.\n+\t* gcc.dg/c90-idem-qual-3.c: Same.\n+\t* gcc.dg/c90-mixdecl-1.c: Same.\n+\t* gcc.dg/c90-restrict-1.c: Same.\n+\t* gcc.dg/c90-return-1.c: Same.\n+\t* gcc.dg/c99-array-nonobj-1.c: Same.\n+\t* gcc.dg/c99-arraydecl-1.c: Same.\n+\t* gcc.dg/c99-complex-1.c: Same.\n+\t* gcc.dg/c99-complex-2.c: Same.\n+\t* gcc.dg/c99-complit-2.c: Same.\n+\t* gcc.dg/c99-const-expr-7.c: Same.\n+\t* gcc.dg/c99-const-expr-8.c: Same.\n+\t* gcc.dg/c99-flex-array-3.c: Same.\n+\t* gcc.dg/c99-flex-array-7.c: Same.\n+\t* gcc.dg/c99-flex-array-typedef-7.c: Same.\n+\t* gcc.dg/c99-impl-decl-1.c: Same.\n+\t* gcc.dg/c99-impl-int-1.c: Same.\n+\t* gcc.dg/c99-impl-int-2.c: Same.\n+\t* gcc.dg/c99-init-3.c: Same.\n+\t* gcc.dg/c99-restrict-1.c: Same.\n+\t* gcc.dg/c99-return-1.c: Same.\n+\t* gcc.dg/c99-tag-1.c: Same.\n+\t* gcc.dg/c99-tag-3.c: Same.\n+\t* gcc.dg/call-diag-2.c: Same.\n+\t* gcc.dg/cpp/19940712-1.c: Same.\n+\t* gcc.dg/cpp/19951025-1.c: Same.\n+\t* gcc.dg/cpp/19990413-1.c: Same.\n+\t* gcc.dg/cpp/direct2.c: Same.\n+\t* gcc.dg/cpp/direct2s.c: Same.\n+\t* gcc.dg/cpp/pr28709.c: Same.\n+\t* gcc.dg/cpp/pr61854-c90.c: Same.\n+\t* gcc.dg/cpp/pr61854-c94.c: Same.\n+\t* gcc.dg/cpp/pragma-1.c: Same.\n+\t* gcc.dg/cpp/pragma-2.c: Same.\n+\t* gcc.dg/cpp/trad/escaped-eof.c: Same.\n+\t* gcc.dg/cpp/trad/literals-2.c: Same.\n+\t* gcc.dg/cpp/warn-comments-2.c: Same.\n+\t* gcc.dg/cpp/warn-comments-3.c: Same.\n+\t* gcc.dg/cpp/warn-comments.c: Same.\n+\t* gcc.dg/cpp/warn-long-long-2.c: Same.\n+\t* gcc.dg/cpp/warn-long-long.c: Same.\n+\t* gcc.dg/cpp/warn-redefined-2.c: Same.\n+\t* gcc.dg/cpp/warn-redefined.c: Same.\n+\t* gcc.dg/darwin-cfstring-2.c: Same.\n+\t* gcc.dg/darwin-cfstring-format-1.c: Same.\n+\t* gcc.dg/decl-9.c: Same.\n+\t* gcc.dg/declspec-1.c: Same.\n+\t* gcc.dg/declspec-10.c: Same.\n+\t* gcc.dg/declspec-11.c: Same.\n+\t* gcc.dg/declspec-13.c: Same.\n+\t* gcc.dg/declspec-18.c: Same.\n+\t* gcc.dg/declspec-4.c: Same.\n+\t* gcc.dg/declspec-5.c: Same.\n+\t* gcc.dg/declspec-6.c: Same.\n+\t* gcc.dg/declspec-8.c: Same.\n+\t* gcc.dg/deprecated-4.c: Same.\n+\t* gcc.dg/deprecated.c: Same.\n+\t* gcc.dg/dfp/composite-type.c: Same.\n+\t* gcc.dg/empty-source-2.c: Same.\n+\t* gcc.dg/empty-source-3.c: Same.\n+\t* gcc.dg/format/attr-6.c: Same.\n+\t* gcc.dg/format/branch-1.c: Same.\n+\t* gcc.dg/format/c90-printf-1.c: Same.\n+\t* gcc.dg/format/c90-strftime-2.c: Same.\n+\t* gcc.dg/format/c99-strftime-1.c: Same.\n+\t* gcc.dg/format/cmn-err-1.c: Same.\n+\t* gcc.dg/format/few-1.c: Same.\n+\t* gcc.dg/format/ms_branch-1.c: Same.\n+\t* gcc.dg/format/ms_unnamed-1.c: Same.\n+\t* gcc.dg/format/ms_va-1.c: Same.\n+\t* gcc.dg/format/unnamed-1.c: Same.\n+\t* gcc.dg/format/va-1.c: Same.\n+\t* gcc.dg/format/xopen-1.c: Same.\n+\t* gcc.dg/funcdef-var-1.c: Same.\n+\t* gcc.dg/funcdef-var-2.c: Same.\n+\t* gcc.dg/gnu89-const-expr-1.c: Same.\n+\t* gcc.dg/gnu89-const-expr-2.c: Same.\n+\t* gcc.dg/gnu90-const-expr-1.c: Same.\n+\t* gcc.dg/gnu99-const-expr-1.c: Same.\n+\t* gcc.dg/gnu99-const-expr-2.c: Same.\n+\t* gcc.dg/gnu99-init-2.c: Same.\n+\t* gcc.dg/gomp/_Atomic-5.c: Same.\n+\t* gcc.dg/gomp/appendix-a/a.24.1.c: Same.\n+\t* gcc.dg/gomp/atomic-5.c: Same.\n+\t* gcc.dg/gomp/linear-1.c: Same.\n+\t* gcc.dg/gomp/pr67500.c: Same.\n+\t* gcc.dg/init-bad-1.c: Same.\n+\t* gcc.dg/init-bad-2.c: Same.\n+\t* gcc.dg/init-bad-3.c: Same.\n+\t* gcc.dg/init-string-1.c: Same.\n+\t* gcc.dg/label-compound-stmt-1.c: Same.\n+\t* gcc.dg/label-decl-2.c: Same.\n+\t* gcc.dg/label-decl-4.c: Same.\n+\t* gcc.dg/large-size-array-2.c: Same.\n+\t* gcc.dg/large-size-array-4.c: Same.\n+\t* gcc.dg/lvalue-6.c: Same.\n+\t* gcc.dg/m-un-2.c: Same.\n+\t* gcc.dg/multiple-overflow-warn-1.c: Same.\n+\t* gcc.dg/multiple-overflow-warn-2.c: Same.\n+\t* gcc.dg/multiple-overflow-warn-3.c: Same.\n+\t* gcc.dg/nested-redef-1.c: Same.\n+\t* gcc.dg/no-asm-1.c: Same.\n+\t* gcc.dg/no-asm-3.c: Same.\n+\t* gcc.dg/no-asm-4.c: Same.\n+\t* gcc.dg/noncompile/20010524-1.c: Same.\n+\t* gcc.dg/noncompile/incomplete-5.c: Same.\n+\t* gcc.dg/noncompile/pr44517.c: Same.\n+\t* gcc.dg/noncompile/pr52290.c: Same.\n+\t* gcc.dg/noreturn-1.c: Same.\n+\t* gcc.dg/overflow-warn-1.c: Same.\n+\t* gcc.dg/overflow-warn-2.c: Same.\n+\t* gcc.dg/overflow-warn-3.c: Same.\n+\t* gcc.dg/overflow-warn-4.c: Same.\n+\t* gcc.dg/parm-mismatch-1.c: Same.\n+\t* gcc.dg/parser-pr28152-2.c: Same.\n+\t* gcc.dg/parser-pr28152.c: Same.\n+\t* gcc.dg/pedwarn-init.c: Same.\n+\t* gcc.dg/pointer-arith-2.c: Same.\n+\t* gcc.dg/pointer-arith-3.c: Same.\n+\t* gcc.dg/pointer-arith-4.c: Same.\n+\t* gcc.dg/pr14475.c: Same.\n+\t* gcc.dg/pr18596-3.c: Same.\n+\t* gcc.dg/pr18809-1.c: Same.\n+\t* gcc.dg/pr27953.c: Same.\n+\t* gcc.dg/pr30457.c: Same.\n+\t* gcc.dg/pr30551-2.c: Same.\n+\t* gcc.dg/pr30551-3.c: Same.\n+\t* gcc.dg/pr30551-4.c: Same.\n+\t* gcc.dg/pr30551-5.c: Same.\n+\t* gcc.dg/pr30551-6.c: Same.\n+\t* gcc.dg/pr30551.c: Same.\n+\t* gcc.dg/pr36997.c: Same.\n+\t* gcc.dg/pr41842.c: Same.\n+\t* gcc.dg/pr48552-1.c: Same.\n+\t* gcc.dg/pr48552-2.c: Same.\n+\t* gcc.dg/pr59717.c: Same.\n+\t* gcc.dg/pr61077.c: Same.\n+\t* gcc.dg/pr61096-1.c: Same.\n+\t* gcc.dg/pr63626.c: Same.\n+\t* gcc.dg/pr64223-1.c: Same.\n+\t* gcc.dg/pr64223-2.c: Same.\n+\t* gcc.dg/pr8788-1.c: Same.\n+\t* gcc.dg/pr8927-1.c: Same.\n+\t* gcc.dg/pragma-darwin.c: Same.\n+\t* gcc.dg/pragma-diag-5.c: Same.\n+\t* gcc.dg/pragma-message.c: Same.\n+\t* gcc.dg/redecl-1.c: Same.\n+\t* gcc.dg/simd-1.c: Same.\n+\t* gcc.dg/simd-5.c: Same.\n+\t* gcc.dg/simd-6.c: Same.\n+\t* gcc.dg/spellcheck-fields.c: Same.\n+\t* gcc.dg/spellcheck-typenames.c: Same.\n+\t* gcc.dg/struct-semi-2.c: Same.\n+\t* gcc.dg/struct-semi-3.c: Same.\n+\t* gcc.dg/transparent-union-3.c: Same.\n+\t* gcc.dg/ucnid-8.c: Same.\n+\t* gcc.dg/uninit-pr19430-O0.c: Same.\n+\t* gcc.dg/uninit-pr19430.c: Same.\n+\t* gcc.dg/uninit-pr20644-O0.c: Same.\n+\t* gcc.dg/utf-dflt.c: Same.\n+\t* gcc.dg/utf-dflt2.c: Same.\n+\t* gcc.dg/utf16-4.c: Same.\n+\t* gcc.dg/vla-11.c: Same.\n+\t* gcc.dg/vla-20.c: Same.\n+\t* gcc.dg/vla-init-1.c: Same.\n+\t* gcc.dg/vla-init-2.c: Same.\n+\t* gcc.dg/vla-init-3.c: Same.\n+\t* gcc.dg/weak/weak-6.c: Same.\n+\t* gcc.dg/weak/weak-7.c: Same.\n+\t* gcc.dg/wtr-int-type-1.c: Same.\n+\t* gcc.target/aarch64/mgeneral-regs_1.c: Same.\n+\t* gcc.target/arm/polytypes.c: Same.\n+\t* gcc.target/i386/spellcheck-options-4.c: Same.\n+\t* gcc.target/powerpc/20030218-1.c: Same.\n+\t* gcc.target/sh/pr21255-4.c: Same.\n+\t* gcc.test-framework/dg-error-exp-XP.c: Same.\n+\t* gfortran.dg/array_constructor_30.f03: Same.\n+\t* gfortran.dg/class_30.f90: Same.\n+\t* gfortran.dg/goacc/subarrays.f95: Same.\n+\t* gfortran.dg/gomp/appendix-a/a.23.5.f90: Same.\n+\t* gfortran.dg/gomp/appendix-a/a.24.1.f90: Same.\n+\t* gfortran.dg/intrinsic_std_1.f90: Same.\n+\t* gfortran.dg/pr70006.f90: Same.\n+\t* gfortran.dg/warning-directive-1.F90: Same.\n+\t* gfortran.dg/warning-directive-2.F90: Same.\n+\t* gfortran.dg/warning-directive-3.F90: Same.\n+\t* gfortran.dg/warning-directive-4.F90: Same.\n+\t* obj-c++.dg/attributes/method-noreturn-1.mm: Same.\n+\t* obj-c++.dg/class-extension-1.mm: Same.\n+\t* obj-c++.dg/class-extension-2.mm: Same.\n+\t* obj-c++.dg/class-protocol-1.mm: Same.\n+\t* obj-c++.dg/cxx-ivars-1.mm: Same.\n+\t* obj-c++.dg/duplicate-class-1.mm: Same.\n+\t* obj-c++.dg/exceptions-3.mm: Same.\n+\t* obj-c++.dg/exceptions-4.mm: Same.\n+\t* obj-c++.dg/exceptions-5.mm: Same.\n+\t* obj-c++.dg/fsf-nsstring-format-1.mm: Same.\n+\t* obj-c++.dg/fsf-package-0.m: Same.\n+\t* obj-c++.dg/invalid-type-1.mm: Same.\n+\t* obj-c++.dg/method-12.mm: Same.\n+\t* obj-c++.dg/method-13.mm: Same.\n+\t* obj-c++.dg/method-15.mm: Same.\n+\t* obj-c++.dg/method-16.mm: Same.\n+\t* obj-c++.dg/method-6.mm: Same.\n+\t* obj-c++.dg/method-7.mm: Same.\n+\t* obj-c++.dg/property/at-property-1.mm: Same.\n+\t* obj-c++.dg/property/at-property-14.mm: Same.\n+\t* obj-c++.dg/property/at-property-17.mm: Same.\n+\t* obj-c++.dg/property/at-property-21.mm: Same.\n+\t* obj-c++.dg/property/at-property-5.mm: Same.\n+\t* obj-c++.dg/property/dotsyntax-4.mm: Same.\n+\t* obj-c++.dg/property/dynamic-3.mm: Same.\n+\t* obj-c++.dg/property/dynamic-4.mm: Same.\n+\t* obj-c++.dg/property/property-neg-1.mm: Same.\n+\t* obj-c++.dg/property/property-neg-6.mm: Same.\n+\t* obj-c++.dg/property/synthesize-11.mm: Same.\n+\t* obj-c++.dg/property/synthesize-5.mm: Same.\n+\t* obj-c++.dg/property/synthesize-6.mm: Same.\n+\t* obj-c++.dg/proto-lossage-4.mm: Same.\n+\t* obj-c++.dg/protocol-qualifier-2.mm: Same.\n+\t* obj-c++.dg/strings/strings-1.mm: Same.\n+\t* obj-c++.dg/super-class-1.mm: Same.\n+\t* obj-c++.dg/syntax-error-6.mm: Same.\n+\t* obj-c++.dg/syntax-error-7.mm: Same.\n+\t* obj-c++.dg/syntax-error-9.mm: Same.\n+\t* obj-c++.dg/try-catch-13.mm: Same.\n+\t* objc.dg/attributes/method-noreturn-1.m: Same.\n+\t* objc.dg/bad-receiver-type-2.m: Same.\n+\t* objc.dg/bad-receiver-type.m: Same.\n+\t* objc.dg/call-super-2.m: Same.\n+\t* objc.dg/class-2.m: Same.\n+\t* objc.dg/class-extension-1.m: Same.\n+\t* objc.dg/class-extension-2.m: Same.\n+\t* objc.dg/class-protocol-1.m: Same.\n+\t* objc.dg/desig-init-1.m: Same.\n+\t* objc.dg/duplicate-class-1.m: Same.\n+\t* objc.dg/exceptions-3.m: Same.\n+\t* objc.dg/exceptions-4.m: Same.\n+\t* objc.dg/exceptions-5.m: Same.\n+\t* objc.dg/foreach-6.m: Same.\n+\t* objc.dg/foreach-7.m: Same.\n+\t* objc.dg/fsf-nsstring-format-1.m: Same.\n+\t* objc.dg/fsf-package-0.m: Same.\n+\t* objc.dg/invalid-type-1.m: Same.\n+\t* objc.dg/method-11.m: Same.\n+\t* objc.dg/method-19.m: Same.\n+\t* objc.dg/method-2.m: Same.\n+\t* objc.dg/method-20.m: Same.\n+\t* objc.dg/method-5.m: Same.\n+\t* objc.dg/method-6.m: Same.\n+\t* objc.dg/method-7.m: Same.\n+\t* objc.dg/method-9.m: Same.\n+\t* objc.dg/missing-proto-3.m: Same.\n+\t* objc.dg/private-1.m: Same.\n+\t* objc.dg/property/at-property-1.m: Same.\n+\t* objc.dg/property/at-property-14.m: Same.\n+\t* objc.dg/property/at-property-17.m: Same.\n+\t* objc.dg/property/at-property-21.m: Same.\n+\t* objc.dg/property/at-property-5.m: Same.\n+\t* objc.dg/property/dynamic-3.m: Same.\n+\t* objc.dg/property/dynamic-4.m: Same.\n+\t* objc.dg/property/property-neg-1.m: Same.\n+\t* objc.dg/property/property-neg-6.m: Same.\n+\t* objc.dg/property/synthesize-11.m: Same.\n+\t* objc.dg/property/synthesize-5.m: Same.\n+\t* objc.dg/property/synthesize-6.m: Same.\n+\t* objc.dg/proto-hier-1.m: Same.\n+\t* objc.dg/proto-lossage-4.m: Same.\n+\t* objc.dg/protocol-qualifier-2.m: Same.\n+\t* objc.dg/strings/strings-1.m: Same.\n+\t* objc.dg/type-size-1.m: Same.\n+\n 2017-04-18  Jeff Law  <law@redhat.com>\n \n \tPR target/74563"}, {"sha": "5b6ac30c27bdbfbe01120a335c15954df33177a8", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-6.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-6.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -117,11 +117,11 @@ f (int i)\n   switch (i)\n     {\n     case 1:\n-      { /* { dg-warning \"statement may fall through\" \"\" { target c } 120 } */\n+      { /* { dg-warning \"statement may fall through\" \"\" { target c } . } */\n \tint j = 0;\n \tbar (j);\n \tif (j == 8)\n-\t  return; /* { dg-warning \"statement may fall through\" \"\" { target c++ } 124 } */\n+\t  return; /* { dg-warning \"statement may fall through\" \"\" { target c++ } . } */\n       }\n     case 2:\n       bar (99);\n@@ -145,13 +145,13 @@ f (int i)\n   switch (i)\n     {\n     case 1:\n-      { /* { dg-warning \"statement may fall through\" \"\" { target c } 148 } */\n+      { /* { dg-warning \"statement may fall through\" \"\" { target c } . } */\n \tint j = 0;\n \tbar (j);\n \tif (j == 8)\n \t  bar (1);\n \telse\n-\t  return; /* { dg-warning \"statement may fall through\" \"\" { target c++ } 154 } */\n+\t  return; /* { dg-warning \"statement may fall through\" \"\" { target c++ } . } */\n       }\n     case 2:\n       bar (99);\n@@ -175,13 +175,13 @@ f (int i)\n   switch (i)\n     {\n     case 1:\n-      { /* { dg-warning \"statement may fall through\" \"\" { target c } 178 } */\n+      { /* { dg-warning \"statement may fall through\" \"\" { target c } . } */\n \tint j = 0;\n \tbar (j);\n \tif (j == 8)\n \t  bar (1);\n \telse\n-\t  bar (2); /* { dg-warning \"statement may fall through\" \"\" { target c++ } 184 } */\n+\t  bar (2); /* { dg-warning \"statement may fall through\" \"\" { target c++ } . } */\n       }\n     case 2:\n       bar (99);\n@@ -279,9 +279,9 @@ f (int i)\n   switch (i)\n     {\n     case 1:\n-      { /* { dg-warning \"statement may fall through\" \"\" { target c } 282 } */\n+      { /* { dg-warning \"statement may fall through\" \"\" { target c } . } */\n \tint j = 9;\n-\tswitch (j); /* { dg-warning \"statement may fall through\" \"\" { target c++ } 284 } */\n+\tswitch (j); /* { dg-warning \"statement may fall through\" \"\" { target c++ } . } */\n       }\n     case 2:\n       bar (99);"}, {"sha": "df8ae35ad472b814a8076b7ed11518871b125337", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-7.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -21,8 +21,8 @@ f (int i)\n   switch (i)\n     {\n     case 1:\n-      { /* { dg-warning \"statement may fall through\" \"\" { target c } 24 } */\n-\tint a[i]; /* { dg-warning \"statement may fall through\" \"\" { target c++ } 25 } */\n+      { /* { dg-warning \"statement may fall through\" \"\" { target c } . } */\n+\tint a[i]; /* { dg-warning \"statement may fall through\" \"\" { target c++ } . } */\n       }\n     case 2:\n       bar (99);\n@@ -31,8 +31,8 @@ f (int i)\n   switch (i)\n     {\n     case 1:\n-      for (int j = 0; j < 10; j++) /* { dg-warning \"statement may fall through\" \"\" { target c } 34 } */\n-\tmap[j] = j; /* { dg-warning \"statement may fall through\" \"\" { target c++ } 35 } */\n+      for (int j = 0; j < 10; j++) /* { dg-warning \"statement may fall through\" \"\" { target c } . } */\n+\tmap[j] = j; /* { dg-warning \"statement may fall through\" \"\" { target c++ } . } */\n     case 2:\n       bar (99);\n     }"}, {"sha": "8df4e1fa4ae83e6a0269e4048e0ad5090b199ab4", "filename": "gcc/testsuite/c-c++-common/Wint-to-pointer-cast-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWint-to-pointer-cast-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWint-to-pointer-cast-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWint-to-pointer-cast-3.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -17,6 +17,6 @@ char\n g (void)\n {\n   return (char) p;\n-/* { dg-warning \"cast from pointer to integer of different size\" \"\" { target c } 19 } */\n-/* { dg-error \"cast from 'void\\\\*' to 'char' loses precision\" \"\" { target c++ } 19 } */\n+/* { dg-warning \"cast from pointer to integer of different size\" \"\" { target c } .-1 } */\n+/* { dg-error \"cast from 'void\\\\*' to 'char' loses precision\" \"\" { target c++ } .-2 } */\n }"}, {"sha": "e8659e572ca6dbbd6ac0272f23a768701008e7aa", "filename": "gcc/testsuite/c-c++-common/attr-fallthrough-2.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-fallthrough-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-fallthrough-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-fallthrough-2.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,21 +11,21 @@ fn (int i)\n   case 1:\n     bar (1);\n     __attribute__((used));\n-    /* { dg-warning \"empty declaration\" \"\" { target c } 13 } */\n-    /* { dg-warning \"ignored\" \"\" { target c++ } 13 } */\n+    /* { dg-warning \"empty declaration\" \"\" { target c } .-1 } */\n+    /* { dg-warning \"ignored\" \"\" { target c++ } .-2 } */\n   case 2:\n     bar (1);\n     __attribute__((foo));\n-    /* { dg-warning \"empty declaration\" \"\" { target c } 18 } */\n-    /* { dg-warning \"ignored\" \"\" { target c++ } 18 } */\n+    /* { dg-warning \"empty declaration\" \"\" { target c } .-1 } */\n+    /* { dg-warning \"ignored\" \"\" { target c++ } .-2 } */\n   case 3:\n     bar (1);\n     __attribute__((fallthrough)) /* { dg-warning \"not followed\" \"\" { target c } } */\n   case 4: /* { dg-error \"expected\" } */\n     bar (1);\n     __attribute__((fallthrough)) 1;\n-    /* { dg-error \"expected\" \"\" { target c } 26 } */\n-    /* { dg-warning \"not followed\" \"\" { target *-*-* } 26 } */\n+    /* { dg-error \"expected\" \"\" { target c } .-1 } */\n+    /* { dg-warning \"not followed\" \"\" { target *-*-* } .-2 } */\n   case 5:\n     bar (1);\n     __attribute__((fallthrough)) int i; /* { dg-warning \"ignored|not followed\" } */\n@@ -40,7 +40,7 @@ fn (int i)\n     __attribute__((fallthrough));\n   case 9:\n     __attribute__((fallthrough));\n-    /* { dg-warning \"not preceding\" \"\" { target *-*-* } 42 } */\n+    /* { dg-warning \"not preceding\" \"\" { target *-*-* } .-1 } */\n     bar (1);\n   case 10:\n     bar (1);"}, {"sha": "2bb91343a79fd79c244c4fcaca2a16fb454d33e8", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/parser_errors2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fparser_errors2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fparser_errors2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fparser_errors2.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,7 +6,7 @@ int main (void)\n   int array[10][10], array2[10];\n   \n   array2[:] = array2[1:2:] ;  /* { dg-error \"expected expression before\" \"\" { target c } } */ \n-  /* { dg-error  \"expected primary-expression before\" \"\" { target c++ } 8 } */\n+  /* { dg-error  \"expected primary-expression before\" \"\" { target c++ } .-1 } */\n \n   return 0; /* { dg-error \"expected ';' before\" \"\" { target c }  } */\n }"}, {"sha": "9270007050e6a5600f8fa4c91d2470312b20a7f5", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/parser_errors3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fparser_errors3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fparser_errors3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fparser_errors3.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,7 +6,7 @@ int main (void)\n   int array[10][10], array2[10];\n   \n   array2[:] = array2[1: :] ;  /* { dg-error \"expected expression before\" \"\" { target c }  } */ \n-  /* { dg-error \"expected primary-expression before\" \"\" { target c++ }  8 } */\n+  /* { dg-error \"expected primary-expression before\" \"\" { target c++ }  .-1 } */\n \n   return 0; /* { dg-error \"expected ';' before\" \"\" { target c } } */\n }"}, {"sha": "a9a9d6601bcf4a6c326235da7fa46d9fd9be2d3b", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/pr61191.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr61191.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr61191.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr61191.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -5,6 +5,6 @@\n double f(double * A, double * B)\n {\n   return __sec_reduce_add((B[0:500])(; /* { dg-error \"called object\" \"\" { target c } } */\n-/* { dg-error \"expected expression before ';' token\" \"\" { target c } 7 } */\n-/* { dg-error \"expected primary-expression before ';' token\" \"\" { target c++ } 7 } */\n+/* { dg-error \"expected expression before ';' token\" \"\" { target c } .-1 } */\n+/* { dg-error \"expected primary-expression before ';' token\" \"\" { target c++ } .-2 } */\n } /* { dg-error \"expected\" \"\" { target c } } */"}, {"sha": "5f1abd96917b146a633143b0de9dff9b9b16a26e", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/pr61963.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr61963.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr61963.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr61963.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,6 +4,6 @@\n \n void f (int * int *a) /* { dg-error \"expected\" } */\n {\n-    a[0:64] = 0; /* { dg-error \"was not declared\" \"\" { target c++ } 7 } */\n+    a[0:64] = 0; /* { dg-error \"was not declared\" \"\" { target c++ } . } */\n     a[0:64] = 0;\n }"}, {"sha": "eec57dc0359bbbda358e14ef0974812b2ef0bc18", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/pr62008.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr62008.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr62008.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr62008.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,5 +6,5 @@ void f(int *a, int w, int h)\n {\n   int tmp[w][h];\n   tmp[:][:] = a[0:w][0:h]; /* { dg-error \"base of array section must be pointer or array type\" } */\n-  /* { dg-error \"start-index and length fields necessary\" \"\" { target c } 8 } */\n+  /* { dg-error \"start-index and length fields necessary\" \"\" { target c } .-1 } */\n }"}, {"sha": "29dee80739683c8148b78f923d626efad66214ba", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/rank_mismatch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Frank_mismatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Frank_mismatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Frank_mismatch.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -10,7 +10,7 @@ int main (void)\n   int array[10][10], array2[10];\n \n   array[:][:] = array[:]; /* { dg-error \"rank mismatch between\" } */\n-  /* { dg-error \"invalid conversion\" \"\" { target c++ } 12 } */\n+  /* { dg-error \"invalid conversion\" \"\" { target c++ } .-1 } */\n \n   x = array2[:]; /* { dg-error \"cannot be scalar when\" } */\n "}, {"sha": "ca080c8f27aa730ef93e9327efea8b8c8df9824f", "filename": "gcc/testsuite/c-c++-common/cilk-plus/CK/cilk_for_errors.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fcilk_for_errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fcilk_for_errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fcilk_for_errors.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,7 +8,7 @@ int main (void)\n   int q = 0, ii = 0, jj = 0;\n \n   _Cilk_for (int ii; ii < 10; ii++) /* { dg-error \"is not initialized\" \"\" { target c } } */\n-    /* { dg-error \"expected\" \"\" { target c++ } 10 } */\n+    /* { dg-error \"expected\" \"\" { target c++ } .-1 } */\n     q = 5;\n \n   _Cilk_for (; ii < 10; ii++) /* { dg-error \"expected iteration declaration\" } */\n@@ -18,7 +18,7 @@ int main (void)\n     q = 2;\n \n   _Cilk_for (int ii = 0; ii < 10, jj < 10; ii++)  /* { dg-error \"expected ';' before ',' token\" \"\" { target c } } */\n-    /* { dg-error \"invalid controlling predicate\" \"\" { target c++ }  20 } */\n+    /* { dg-error \"invalid controlling predicate\" \"\" { target c++ }  .-1 } */\n     q = 5;\n \n   _Cilk_for (int ii = 0; ii < 10; ) /* { dg-error \"missing increment\" } */\n@@ -46,7 +46,7 @@ int main (void)\n     q = 5;\n \n   _Cilk_for (int ii; ii < 10; ii++) /* { dg-error \"is not initialized\" \"\" { target c } } */\n-    /* { dg-error \"expected\" \"\" { target c++ } 48 } */\n+    /* { dg-error \"expected\" \"\" { target c++ } .-1 } */\n     q = 5;\n \n   return 0;"}, {"sha": "b1e336e332843fa7b2abab99ff16a0620feea13a", "filename": "gcc/testsuite/c-c++-common/cilk-plus/CK/errors.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ferrors.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -9,7 +9,7 @@ int check_spawn(int v)\n   /* XXX: no error in C++ */\n     ;\n   if (v + _Cilk_spawn func_2())  /* { dg-error \"cannot contain\" \"\" { target c } } */\n-  /* { dg-error \"invalid use\" \"\" { target c++ } 11 } */\n+  /* { dg-error \"invalid use\" \"\" { target c++ } .-1 } */\n     ;\n   if (v, _Cilk_spawn func_2()) /* { dg-error \"spawned function call cannot be part\" } */\n     ;"}, {"sha": "990f206ab0944e76df7f6c07d57c7f5bae38f384", "filename": "gcc/testsuite/c-c++-common/cilk-plus/CK/no_args_error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fno_args_error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fno_args_error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fno_args_error.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -5,7 +5,7 @@ int spawn_1 ();\n typedef int(*func) (int);\n \n void check () {\n-      func var = spawn_1; /* { dg-error \"invalid conversion from\" \"\" { target c++ } 8 } */\n+      func var = spawn_1; /* { dg-error \"invalid conversion from\" \"\" { target c++ } . } */\n         _Cilk_spawn var (); /* { dg-error \"too few arguments to function\" } */ \n }\n "}, {"sha": "332e01cbdded5df6e92b9a2f4833f3b3123bac51", "filename": "gcc/testsuite/c-c++-common/cilk-plus/PS/clauses1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FPS%2Fclauses1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FPS%2Fclauses1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FPS%2Fclauses1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -69,8 +69,8 @@ void foo()\n     a[i] = b[j];\n \n #pragma simd linear(blah2, 36)\n-  /* { dg-error \"'blah2' \\(undeclared\\|has not been\\)\" \"undeclared\" { target *-*-* } 71 } */\n-  /* { dg-error \"expected\" \"expected\" { target *-*-* } 71 } */\n+  /* { dg-error \"'blah2' \\(undeclared\\|has not been\\)\" \"undeclared\" { target *-*-* } .-1 } */\n+  /* { dg-error \"expected\" \"expected\" { target *-*-* } .-2 } */\n   for (int i=0; i < 1000; ++i)\n     a[i] = b[j];\n "}, {"sha": "88e4678552b6eee2ec0a4f6c662ef8a3d380bdb4", "filename": "gcc/testsuite/c-c++-common/cilk-plus/SE/vlength_errors.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fvlength_errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fvlength_errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fvlength_errors.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,7 +6,7 @@\n int z = Q;\n \n __attribute__ ((vector (uniform(x), vectorlength (), linear (y:1) ))) /* { dg-error \"expected expression\" \"\" { target c } } */ \n-     /* { dg-error \"expected primary-expression\" \"\" { target c++ }  8 } */ \n+     /* { dg-error \"expected primary-expression\" \"\" { target c++ }  .-1 } */ \n int func2 (int x, int y)\n {\n   int zq = 5;\n@@ -21,7 +21,7 @@ int func3 (int x, int y)\n }\n \n __attribute__ ((vector (uniform(x), linear (y:1), vectorlength (z) ))) /* { dg-error \"vectorlength must be an integer\" \"\" { target c } } */ \n-     /* { dg-error \"constant\" \"\" { target c++ } 23 } */\n+     /* { dg-error \"constant\" \"\" { target c++ } .-1 } */\n int func4 (int x, int y)\n {\n   int zq = 5;\n@@ -36,7 +36,7 @@ int func5 (int x, int y)\n }\n \n __attribute__ ((vector (uniform(x), vectorlength (z), linear (y:1)))) /* { dg-error \"vectorlength must be an integer\" \"\"  { target c } } */ \n-     /* { dg-error \"constant\" \"\" { target c++ }  38 } */\n+     /* { dg-error \"constant\" \"\" { target c++ }  .-1 } */\n int func6 (int x, int y)\n {\n   int zq = 5;"}, {"sha": "e77462b20deaa1a80cb96868e563ed98de5fad14", "filename": "gcc/testsuite/c-c++-common/cpp/pr57580.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr57580.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr57580.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr57580.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,4 +6,4 @@\n   _Pragma(\"message(\\\"message0\\\")\")\t\\\n   _Pragma(\"message(\\\"message1\\\")\")\n MSG\t/* { dg-message \"message0\" } */\n-/* { dg-message \"message1\" \"\" { target *-*-* } 8 } */\n+/* { dg-message \"message1\" \"\" { target *-*-* } .-1 } */"}, {"sha": "e1840af5d70b902166e21a18be168bc031728210", "filename": "gcc/testsuite/c-c++-common/goacc/asyncwait-1.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fasyncwait-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fasyncwait-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fasyncwait-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -52,16 +52,16 @@ f (int N, float *a, float *b)\n     }\n \n #pragma acc parallel copyin (a[0:N]) copy (b[0:N]) async (a)\n-\t/* { dg-error \"expected integer expression before\" \"\" { target c } 54 } */\n-\t/* { dg-error \"'async' expression must be integral\" \"\" { target c++ } 54 } */\n+\t/* { dg-error \"expected integer expression before\" \"\" { target c } .-1 } */\n+\t/* { dg-error \"'async' expression must be integral\" \"\" { target c++ } .-2 } */\n     {\n         for (ii = 0; ii < N; ii++)\n             b[ii] = a[ii];\n     }\n \n #pragma acc parallel copyin (a[0:N]) copy (b[0:N]) async (1.0)\n-\t/* { dg-error \"expected integer expression before\" \"\" { target c } 62 } */\n-\t/* { dg-error \"'async' expression must be integral\" \"\" { target c++ } 62 } */\n+\t/* { dg-error \"expected integer expression before\" \"\" { target c } .-1 } */\n+\t/* { dg-error \"'async' expression must be integral\" \"\" { target c++ } .-2 } */\n     {\n         for (ii = 0; ii < N; ii++)\n             b[ii] = a[ii];\n@@ -116,7 +116,7 @@ f (int N, float *a, float *b)\n     }\n \n #pragma acc parallel copyin (a[0:N]) copy (b[0:N]) wait (1 /* { dg-error \"expected '\\\\\\)' before end of line\" } */\n-    /* { dg-error \"expected integer expression before '\\\\\\)'\" \"\" { target c++ } 118 } */\n+    /* { dg-error \"expected integer expression before '\\\\\\)'\" \"\" { target c++ } .-1 } */\n     {\n         for (ii = 0; ii < N; ii++)\n             b[ii] = a[ii];\n@@ -171,7 +171,7 @@ f (int N, float *a, float *b)\n #pragma acc wait (1,2,,) /* { dg-error \"expected (primary-|)expression before\" } */\n \n #pragma acc wait (1 /* { dg-error \"expected '\\\\\\)' before end of line\" } */\n-    /* { dg-error \"expected integer expression before '\\\\\\)'\" \"\" { target c++ } 173 } */\n+    /* { dg-error \"expected integer expression before '\\\\\\)'\" \"\" { target c++ } .-1 } */\n \n #pragma acc wait (1,*) /* { dg-error \"expected (primary-|)expression before\" } */\n \n@@ -204,10 +204,10 @@ f (int N, float *a, float *b)\n #pragma acc wait async (*) /* { dg-error \"expected (primary-|)expression before \" } */\n \n #pragma acc wait async (a)\n-    /* { dg-error \"expected integer expression before\" \"\" { target c } 206 } */\n-    /* { dg-error \"expression must be integral\" \"\" { target c++ } 206 } */\n+    /* { dg-error \"expected integer expression before\" \"\" { target c } .-1 } */\n+    /* { dg-error \"expression must be integral\" \"\" { target c++ } .-2 } */\n \n #pragma acc wait async (1.0)\n-   /* { dg-error \"expected integer expression before\" \"\" { target c } 210 } */\n-   /* { dg-error \"expression must be integral\" \"\" { target c++ } 210 } */\n+   /* { dg-error \"expected integer expression before\" \"\" { target c } .-1 } */\n+   /* { dg-error \"expression must be integral\" \"\" { target c++ } .-2 } */\n }"}, {"sha": "d1181d1b6e7d8c96f4e6d1c1d6c42f6e4ece4ea2", "filename": "gcc/testsuite/c-c++-common/goacc/cache-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcache-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcache-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcache-2.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -25,7 +25,7 @@ main (int argc, char **argv)\n \n #pragma acc cache /* { dg-error \"expected '\\\\\\(' before end of line\" } */\n #pragma acc cache a[0:N] /* { dg-error \"expected '\\\\\\(' before 'a'\" } */\n-\t/* { dg-bogus \"expected end of line before 'a'\" \"\" { xfail c++ } 27 } */\n+\t/* { dg-bogus \"expected end of line before 'a'\" \"\" { xfail c++ } .-1 } */\n #pragma acc cache (a) /* { dg-error \"expected '\\\\\\['\" } */\n #pragma acc cache ( /* { dg-error \"expected (identifier|unqualified-id) before end of line\" } */\n #pragma acc cache () /* { dg-error \"expected (identifier|unqualified-id) before '\\\\\\)' token\" } */\n@@ -36,7 +36,7 @@ main (int argc, char **argv)\n #pragma acc cache () /* { dg-error \"expected (identifier|unqualified-id) before '\\\\\\)' token\" } */\n #pragma acc cache (a[0:N] b[0:N]) /* { dg-error \"expected '\\\\\\)' before 'b'\" } */\n #pragma acc cache (a[0:N] b[0:N}) /* { dg-error \"expected '\\\\\\)' before 'b'\" } */\n-\t/* { dg-bogus \"expected end of line before '\\\\\\}' token\" \"\" { xfail c++ } 38 } */\n+\t/* { dg-bogus \"expected end of line before '\\\\\\}' token\" \"\" { xfail c++ } .-1 } */\n #pragma acc cache (a[0:N] /* { dg-error \"expected '\\\\\\)' before end of line\" } */\n #pragma acc cache (a[0:N]) ( /* { dg-error \"expected end of line before '\\\\(' token\" } */\n #pragma acc cache (a[0:N]) ii /* { dg-error \"expected end of line before 'ii'\" } */"}, {"sha": "e41a0f59537c1a7f1e0c0f5918e5a053b57b916b", "filename": "gcc/testsuite/c-c++-common/goacc/declare-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeclare-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeclare-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeclare-2.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,7 +4,7 @@\n #pragma acc declare /* { dg-error \"no valid clauses\" } */\n \n #pragma acc declare create(undeclared) /* { dg-error \"undeclared\" } */\n-/* { dg-error \"no valid clauses\" \"second error\" { target *-*-* } 6 } */\n+/* { dg-error \"no valid clauses\" \"second error\" { target *-*-* } .-1 } */\n \n int v0[10];\n #pragma acc declare create(v0[1:3]) /* { dg-error \"array section\" } */"}, {"sha": "21f8380a0de25e8bf1269957f6069c77ed0f7a83", "filename": "gcc/testsuite/c-c++-common/goacc/deviceptr-1.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeviceptr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeviceptr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeviceptr-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,24 +11,24 @@ fun1 (void)\n #pragma acc data deviceptr(fun1) /* { dg-error \"'fun1' is not a variable\" } */\n   ;\n #pragma acc parallel deviceptr(fun1[2:5])\n-  /* { dg-error \"'fun1' is not a variable\" \"not a variable\" { target *-*-* } 13 } */\n-  /* { dg-error \"expected '\\\\\\)' before '\\\\\\[' token\" \"array\" { target *-*-* } 13 } */\n+  /* { dg-error \"'fun1' is not a variable\" \"not a variable\" { target *-*-* } .-1 } */\n+  /* { dg-error \"expected '\\\\\\)' before '\\\\\\[' token\" \"array\" { target *-*-* } .-2 } */\n   ;\n \n   int i;\n #pragma acc kernels deviceptr(i) /* { dg-error \"'i' is not a pointer variable\" } */\n   ;\n #pragma acc data deviceptr(i[0:4])\n-  /* { dg-error \"'i' is not a pointer variable\" \"not a pointer variable\" { target *-*-* } 21 } */\n-  /* { dg-error \"expected '\\\\\\)' before '\\\\\\[' token\" \"array\" { target *-*-* } 21 } */\n+  /* { dg-error \"'i' is not a pointer variable\" \"not a pointer variable\" { target *-*-* } .-1 } */\n+  /* { dg-error \"expected '\\\\\\)' before '\\\\\\[' token\" \"array\" { target *-*-* } .-2 } */\n   ;\n \n   float fa[10];\n #pragma acc parallel deviceptr(fa) /* { dg-error \"'fa' is not a pointer variable\" } */\n   ;\n #pragma acc kernels deviceptr(fa[1:5])\n-  /* { dg-error \"'fa' is not a pointer variable\" \"not a pointer variable\" { target *-*-* } 29 } */\n-  /* { dg-error \"expected '\\\\\\)' before '\\\\\\[' token\" \"array\" { target *-*-* } 29 } */\n+  /* { dg-error \"'fa' is not a pointer variable\" \"not a pointer variable\" { target *-*-* } .-1 } */\n+  /* { dg-error \"expected '\\\\\\)' before '\\\\\\[' token\" \"array\" { target *-*-* } .-2 } */\n   ;\n \n   float *fp;\n@@ -44,10 +44,10 @@ fun2 (void)\n   int i;\n   float *fp;\n #pragma acc kernels deviceptr(fp,u,fun2,i,fp)\n-  /* { dg-error \"'u' undeclared\" \"u undeclared\" { target *-*-* } 46 } */\n-  /* { dg-error \"'fun2' is not a variable\" \"fun2 not a variable\" { target *-*-* } 46 } */\n-  /* { dg-error \"'i' is not a pointer variable\" \"i not a pointer variable\" { target *-*-* } 46 } */\n-  /* { dg-error \"'fp' appears more than once in data clauses\" \"fp more than once\" { target *-*-* } 46 } */\n+  /* { dg-error \"'u' undeclared\" \"u undeclared\" { target *-*-* } .-1 } */\n+  /* { dg-error \"'fun2' is not a variable\" \"fun2 not a variable\" { target *-*-* } .-2 } */\n+  /* { dg-error \"'i' is not a pointer variable\" \"i not a pointer variable\" { target *-*-* } .-3 } */\n+  /* { dg-error \"'fp' appears more than once in data clauses\" \"fp more than once\" { target *-*-* } .-4 } */\n   ;\n }\n "}, {"sha": "b967a7447bdb397f1f84430b81ab1f6fa7f72828", "filename": "gcc/testsuite/c-c++-common/goacc/routine-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-5.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -9,8 +9,8 @@ struct PC\n \n void PC1( /* { dg-bogus \"variable or field .PC1. declared void\" \"TODO\" { xfail c++ } } */\n #pragma acc routine\n-\t /* { dg-error \".#pragma acc routine. must be at file scope\" \"\" { target c } 11 }\n-\t    { dg-error \".#pragma. is not allowed here\" \"\" { target c++ } 11 } */\n+\t /* { dg-error \".#pragma acc routine. must be at file scope\" \"\" { target c } .-1 }\n+\t    { dg-error \".#pragma. is not allowed here\" \"\" { target c++ } .-2 } */\n ) /* { dg-bogus \"expected declaration specifiers or .\\\\.\\\\.\\\\.. before .\\\\). token\" \"TODO\" { xfail c } } */\n {\n }"}, {"sha": "9225773009c7ed1c81234ebf793bb85d72cfe239", "filename": "gcc/testsuite/c-c++-common/gomp/clauses-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-2.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -49,5 +49,5 @@ foo (int *p, int q, struct S t, int i, int j, int k, int l)\n   #pragma omp target map (t.r) map (t) map (t.s[0]) firstprivate (t) /* { dg-error \"appears both in data and map clauses\" } */\n     bar (t.s);\n   #pragma omp target map (t) map (t.r) firstprivate (t) map (t.s[0]) /* { dg-error \"appears both in data and map clauses\" } */\n-    bar (t.s); /* { dg-error \"appears more than once in map clauses\" \"\" { target *-*-* } 51 } */\n+    bar (t.s); /* { dg-error \"appears more than once in map clauses\" \"\" { target *-*-* } .-1 } */\n }"}, {"sha": "e7fd738f6697c013be584548508abada9ad7731f", "filename": "gcc/testsuite/c-c++-common/gomp/ordered-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fordered-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fordered-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fordered-3.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -45,7 +45,7 @@ foo (void)\n   for (i = 0; i < 64; i++)\n     {\n       #pragma omp ordered threads, simd, threads, simd\t/* { dg-error \"too many .threads. clauses\" } */\n-      ;\t/* { dg-error \"too many .simd. clauses\" \"\" { target *-*-* } 47 } */\n+      ;\t/* { dg-error \"too many .simd. clauses\" \"\" { target *-*-* } .-1 } */\n     }\n   #pragma omp for simd ordered(1)\t/* { dg-error \".ordered. clause with parameter may not be specified on .#pragma omp for simd. construct\" } */\n   for (i = 0; i < 64; i++)"}, {"sha": "515513588f0470b21b03e27b371b56c4a196915b", "filename": "gcc/testsuite/c-c++-common/gomp/pr67501.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr67501.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr67501.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr67501.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -7,6 +7,6 @@ foo (void)\n {\n   int i, j;\n   #pragma omp for simd copyprivate(j\t/* { dg-error \"before end of line\" } */\n-  for (i = 0; i < 16; ++i)\t\t/* { dg-error \"is not valid for\" \"\" { target *-*-* } 9 } */\n+  for (i = 0; i < 16; ++i)\t\t/* { dg-error \"is not valid for\" \"\" { target *-*-* } .-1 } */\n     ;\n }"}, {"sha": "63253926736b4d5d6088acf3c5c0710d3b7cd853", "filename": "gcc/testsuite/c-c++-common/pr20000.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr20000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr20000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr20000.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -10,7 +10,7 @@ void h(void) __attribute__((noreturn));\n \n int g(void) {\n   return 1; /* { dg-warning \"function declared 'noreturn' has a 'return' statement\" \"has return\" } */\n-}           /* { dg-warning \"'noreturn' function does return\" \"does return\" { target *-*-* } 12 } */\n+}           /* { dg-warning \"'noreturn' function does return\" \"does return\" { target *-*-* } .-1 } */\n \n int g2(void) {\n   h();\n@@ -24,8 +24,8 @@ int vg(void);\n int vg2(void); /* { dg-bogus \".noreturn. function returns non-void value\" } */\n \n int vg(void) {\n-  return 1; /* { dg-warning \"function declared 'noreturn' has a 'return' statement\" \"has return\" { target c } 27 } */\n-}           /* { dg-warning \"'noreturn' function does return\" \"does return\" { target c } 27  } */\n+  return 1; /* { dg-warning \"function declared 'noreturn' has a 'return' statement\" \"has return\" { target c } . } */\n+}           /* { dg-warning \"'noreturn' function does return\" \"does return\" { target c } .-1 } */\n \n int vg2(void) {\n   h();"}, {"sha": "2c30634f45f9526c029fbfeebe31719cccead02c", "filename": "gcc/testsuite/c-c++-common/pr43395.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr43395.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr43395.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr43395.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,7 +6,7 @@ foo (void)\n {\n lab:\n   return &&lab;\n-/* { dg-warning \"function returns address of label\" \"\" { target c } 8 } */\n+/* { dg-warning \"function returns address of label\" \"\" { target c } .-1 } */\n /* { dg-warning \"address of label\" \"\" { target c++ } 7 } */\n }\n \n@@ -16,7 +16,7 @@ bar (void)\n   __label__ lab;\n lab:\n   return &&lab;\n-/* { dg-warning \"function returns address of label\" \"\" { target c } 18 } */\n+/* { dg-warning \"function returns address of label\" \"\" { target c } .-1 } */\n /* { dg-warning \"address of label\" \"\" { target c++ } 17 } */\n }\n \n@@ -25,6 +25,6 @@ baz (void)\n {\n   int i;\n   return &i;\n-/* { dg-warning \"function returns address of local variable\" \"\" { target c } 27 } */\n+/* { dg-warning \"function returns address of local variable\" \"\" { target c } .-1 } */\n /* { dg-warning \"address of local variable\" \"\" { target c++ } 26 } */\n }"}, {"sha": "027d8bfdac561ca95c3a3405597e30204aa20354", "filename": "gcc/testsuite/c-c++-common/pr49706.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr49706.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr49706.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr49706.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -12,13 +12,13 @@ extern bool foo_b (void);\n extern int foo_i (void);\n \n #ifdef __cplusplus\n-template <class T, class U> bool tfn1(T t, U u) { return (!t == u); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } 15 } */\n+template <class T, class U> bool tfn1(T t, U u) { return (!t == u); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } . } */\n template <class T, class U> bool tfn2(T t, U u) { return ((!t) == u); }\n-template <class T, class U> bool tfn3(T t, U u) { return (!g(t) == u); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } 17 } */\n+template <class T, class U> bool tfn3(T t, U u) { return (!g(t) == u); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } . } */\n template <class T, class U> bool tfn4(T t, U u) { return ((!g(t)) == u); }\n template <class T, class U> bool tfn5(T t, U u) { return (!!t == u); } /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n template <class T, class U> bool tfn6(T t, U u) { return (!!g(t) == u); } /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n-template <int N> bool tfn7(int i1, int i2) { return (!i1 == i2); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } 21 } */\n+template <int N> bool tfn7(int i1, int i2) { return (!i1 == i2); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } . } */\n #endif\n \n void"}, {"sha": "3567e9b866f107cd550be79147929e4b43d1624a", "filename": "gcc/testsuite/c-c++-common/pr77624-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr77624-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr77624-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr77624-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -5,10 +5,10 @@ int\n foo (int a)\n {\n   return __atomic_is_lock_free (2, a);\t\t/* { dg-warning \"pointer from integer\" \"\" { target c } } */\n-}\t\t\t\t\t\t/* { dg-error \"invalid conversion\" \"\" { target c++ } 7 } */\n+}\t\t\t\t\t\t/* { dg-error \"invalid conversion\" \"\" { target c++ } .-1 } */\n \n int\n bar (int a)\n {\n   return __atomic_always_lock_free (2, a);\t/* { dg-warning \"pointer from integer\" \"\" { target c } } */\n-}\t\t\t\t\t\t/* { dg-error \"invalid conversion\" \"\" { target c++ } 13 } */\n+}\t\t\t\t\t\t/* { dg-error \"invalid conversion\" \"\" { target c++ } .-1 } */"}, {"sha": "b8e805b42fed8fae1493333813337f1c206776eb", "filename": "gcc/testsuite/c-c++-common/pr77624-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr77624-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr77624-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr77624-2.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,8 +8,8 @@ foo (int *a)\n   __atomic_is_lock_free (2, a, 2);\t/* { dg-error \"too many arguments\" } */\n   __atomic_is_lock_free (2);\t\t/* { dg-error \"too few arguments\" } */\n   __atomic_is_lock_free (2, b);\t\t/* { dg-error \"incompatible type\" \"\" { target c } } */\n-\t\t\t\t\t/* { dg-message \"expected\" \"\" { target c } 10 } */\n-\t\t\t\t\t/* { dg-error \"convert\" \"\" { target c++ } 10 } */\n+\t\t\t\t\t/* { dg-message \"expected\" \"\" { target c } .-1 } */\n+\t\t\t\t\t/* { dg-error \"convert\" \"\" { target c++ } .-2 } */\n   __atomic_is_lock_free (2, 0);\n }\n \n@@ -20,7 +20,7 @@ bar (int *a)\n   __atomic_always_lock_free (2, a, 2);\t/* { dg-error \"too many arguments\" } */\n   __atomic_always_lock_free (2);\t/* { dg-error \"too few arguments\" } */\n   __atomic_always_lock_free (2, b);\t/* { dg-error \"incompatible type\" \"\" { target c } } */\n-\t\t\t\t\t/* { dg-message \"expected\" \"\" { target c } 22 } */\n-\t\t\t\t\t/* { dg-error \"convert\" \"\" { target c++ } 22 } */\n+\t\t\t\t\t/* { dg-message \"expected\" \"\" { target c } .-1 } */\n+\t\t\t\t\t/* { dg-error \"convert\" \"\" { target c++ } .-2 } */\n   __atomic_always_lock_free (2, 0);\n }"}, {"sha": "b2e395c3f73fd41d01eab163cedb8daa332a6487", "filename": "gcc/testsuite/c-c++-common/raw-string-14.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-14.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -14,15 +14,15 @@ const void *s1 = R\"??/\n \t// { dg-warning \"missing terminating\" \"missing\" { target *-*-* } 10 }\n \t// { dg-error \"19:missing terminating\" \"missing\" { target *-*-* } 10 }\n const void *s2 = R\"abcdefghijklmn??/(a)abcdefghijklmn???\";\n-\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } 16 }\n-\t// { dg-error \"stray\" \"stray\" { target *-*-* } 16 }\n-\t// { dg-error \"expected\" \"expected\" { target *-*-* } 16 }\n+\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } .-1 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } .-2 }\n+\t// { dg-error \"expected\" \"expected\" { target *-*-* } .-3 }\n const void *s3 = R\"abcdefghijklmno??/(a)abcdefghijklmno???\";\n-\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } 20 }\n-\t// { dg-error \"stray\" \"stray\" { target *-*-* } 20 }\n+\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } .-1 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } .-2 }\n const void *s4 = R\"abcdefghijklmnop??=(a)abcdefghijklmnop??=\";\n-\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } 23 }\n-\t// { dg-error \"stray\" \"stray\" { target *-*-* } 23 }\n+\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } .-1 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } .-2 }\n const void *s5 = R\"abc\\\n ()abcdef\";\n \t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 26 }"}, {"sha": "1185c0e377e0c5aa95cbc2644d84e6e66eca13a1", "filename": "gcc/testsuite/c-c++-common/raw-string-16.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-16.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,15 +8,15 @@ def()abcdef\";\n \t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 6 }\n \t// { dg-error \"stray\" \"stray\" { target *-*-* } 6 }\n const void *s1 = R\"abcdefghijklmn??/(a)abcdefghijklmn???\";\n-\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } 10 }\n-\t// { dg-error \"stray\" \"stray\" { target *-*-* } 10 }\n+\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } .-1 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } .-2 }\n \n const void *s2 = R\"abcdefghijklmno??/(a)abcdefghijklmno???\";\n-\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } 14 }\n-\t// { dg-error \"stray\" \"stray\" { target *-*-* } 14 }\n+\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } .-1 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } .-2 }\n const void *s3 = R\"abcdefghijklmnop??=(a)abcdefghijklmnop??=?\"; // { dg-warning \"trigraph ..= ignored\" }\n-\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } 17 }\n-\t// { dg-error \"stray\" \"stray\" { target *-*-* } 17 }\n+\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } .-1 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } .-2 }\n const void *s4 = R\"abc\\\n ()abcdef\";\n \t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 20 }"}, {"sha": "e4e820c0c1c45e99738da63bfb546824720710b4", "filename": "gcc/testsuite/c-c++-common/raw-string-3.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-3.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -5,26 +5,26 @@\n // { dg-options \"-std=c++98\" { target c++ } }\n \n const void\t*s0\t= R\"(a)\";\t// { dg-error \"was not declared|undeclared\" \"undeclared\" }\n-                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } 7 }\n+                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } .-1 }\n const void\t*s1\t= uR\"(a)\";\t// { dg-error \"was not declared|undeclared\" \"undeclared\" }\n-                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } 9 }\n+                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } .-1 }\n const void\t*s2\t= UR\"(a)\";\t// { dg-error \"was not declared|undeclared\" \"undeclared\" }\n-                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } 11 }\n+                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } .-1 }\n const void\t*s3\t= u8R\"(a)\";\t// { dg-error \"was not declared|undeclared\" \"undeclared\" }\n-                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } 13 }\n+                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } .-1 }\n const void\t*s4\t= LR\"(a)\";\t// { dg-error \"was not declared|undeclared\" \"undeclared\" }\n-                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } 15 }\n+                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } .-1 }\n \n const int\ti0\t= R'a';\t\t// { dg-error \"was not declared\" \"undeclared\" { target c++ } }\n-                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } 18 }\n+                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } .-1 }\n const int\ti1\t= uR'a';\t// { dg-error \"was not declared\" \"undeclared\" { target c++ } }\n-                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } 20 }\n+                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } .-1 }\n const int\ti2\t= UR'a';\t// { dg-error \"was not declared\" \"undeclared\" { target c++ } }\n-                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } 22 }\n+                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } .-1 }\n const int\ti3\t= u8R'a';\t// { dg-error \"was not declared\" \"undeclared\" { target c++ } }\n-                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } 24 }\n+                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } .-1 }\n const int\ti4\t= LR'a';\t// { dg-error \"was not declared\" \"undeclared\" { target c++ } }\n-                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } 26 }\n+                // { dg-error \"expected ',' or ';'\" \"expected\" { target c } .-1 }\n \n #define R\t\"a\"\n #define uR\t\"b\""}, {"sha": "303233bb344ecae2b883fc52f49d7ce413863bc5", "filename": "gcc/testsuite/c-c++-common/raw-string-4.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-4.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,15 +4,15 @@\n // { dg-options \"-std=c++0x\" { target c++ } }\n \n const int\ti0\t= R'a';\t// { dg-error \"was not declared|undeclared\" \"undeclared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"expected\" { target c } 6 }\n+\t\t// { dg-error \"expected ',' or ';'\" \"expected\" { target c } .-1 }\n const int\ti1\t= uR'a';\t// { dg-error \"was not declared|undeclared\" \"undeclared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"expected\" { target c } 8 }\n+\t\t// { dg-error \"expected ',' or ';'\" \"expected\" { target c } .-1 }\n const int\ti2\t= UR'a';\t// { dg-error \"was not declared|undeclared\" \"undeclared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"expected\" { target c } 10 }\n+\t\t// { dg-error \"expected ',' or ';'\" \"expected\" { target c } .-1 }\n const int\ti3\t= u8R'a';\t// { dg-error \"was not declared|undeclared\" \"undeclared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"expected\" { target c } 12 }\n+\t\t// { dg-error \"expected ',' or ';'\" \"expected\" { target c } .-1 }\n const int\ti4\t= LR'a';\t// { dg-error \"was not declared|undeclared\" \"undeclared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"expected\" { target c } 14 }\n+\t\t// { dg-error \"expected ',' or ';'\" \"expected\" { target c } .-1 }\n \n #define R\t1 +\n #define uR\t2 +"}, {"sha": "78602dcb725bd409b0d90e377a1d203515d960e2", "filename": "gcc/testsuite/c-c++-common/raw-string-5.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-5.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,25 +3,25 @@\n // { dg-options \"-std=c++0x\" { target c++ } }\n \n const void *s0 = R\"0123456789abcdefg()0123456789abcdefg\";\n-\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } 5 }\n-\t// { dg-error \"stray\" \"stray\" { target *-*-* } 5 }\n+\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } .-1 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } .-2 }\n const void *s1 = R\" () \";\n-\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 8 }\n-\t// { dg-error \"stray\" \"stray\" { target *-*-* } 8 }\n+\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } .-1 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } .-2 }\n const void *s2 = R\"\t()\t\";\n-\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 11 }\n-\t// { dg-error \"stray\" \"stray\" { target *-*-* } 11 }\n+\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } .-1 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } .-2 }\n const void *s3 = R\")())\";\n-\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 14 }\n-\t// { dg-error \"stray\" \"stray\" { target *-*-* } 14 }\n+\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } .-1 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } .-2 }\n const void *s4 = R\"@()@\";\n-\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 17 }\n-\t// { dg-error \"stray\" \"stray\" { target *-*-* } 17 }\n+\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } .-1 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } .-2 }\n const void *s5 = R\"$()$\";\n-\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 20 }\n-\t// { dg-error \"stray\" \"stray\" { target *-*-* } 20 }\n+\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } .-1 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } .-2 }\n const void *s6 = R\"\\u0040()\\u0040\";\n-\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 23 }\n-\t// { dg-error \"stray\" \"stray\" { target *-*-* } 23 }\n+\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } .-1 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } .-2 }\n \n int main () {}"}, {"sha": "2c2d5b2d9ef4bbb1acc0d0ecc399bdd2633f534a", "filename": "gcc/testsuite/c-c++-common/raw-string-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-6.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,4 +3,4 @@\n // { dg-options \"-std=c++0x\" { target c++ } }\n \n const void *s0 = R\"ouch()ouCh\";\t// { dg-error \"at end of input\" \"end\" }\n-\t// { dg-error \"unterminated raw string\" \"unterminated\" { target *-*-* } 5 }\n+\t// { dg-error \"unterminated raw string\" \"unterminated\" { target *-*-* } .-1 }"}, {"sha": "5fa47f1652661a6f3f08a65734e6e9f27294955d", "filename": "gcc/testsuite/g++.dg/abi/mangle41.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle41.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -5,4 +5,4 @@\n #include <x86intrin.h>\n void f(__m128) { }\t\t// { dg-message \"previous declaration\" }\n void f(__m256) { }\t\t// { dg-error \"conflicts\" }\n-// { dg-message \"mangling\" \"\" { target *-*-* } 7 }\n+// { dg-message \"mangling\" \"\" { target *-*-* } .-1 }"}, {"sha": "f1dd60238d2f287d2dd650ff53715b6cc6063550", "filename": "gcc/testsuite/g++.dg/conversion/nullptr1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fnullptr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fnullptr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fnullptr1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,5 +6,5 @@\n void *p = 0;\n \n void *q = 0 * (INT_MAX + 1);  // { dg-error \"invalid conversion\" }\n-// { dg-warning \"integer overflow in expression\" \"\" { target *-*-* } 8 }\n+// { dg-warning \"integer overflow in expression\" \"\" { target *-*-* } .-1 }\n "}, {"sha": "829c938e54276a2e2c00510fd726b183e2072774", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-80296.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-80296.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-80296.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-80296.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,4 +6,4 @@ template <int...> struct A {};\n template <int... N> using B = A<+N...>;\n \n B<int> b; // { dg-error \"type/value mismatch\" }\n-          // { dg-message \"expected a constant\" \"expected\" { target *-*-* } 8 }\n+          // { dg-message \"expected a constant\" \"expected\" { target *-*-* } .-1 }"}, {"sha": "e41b7c3a23e229de587a6f63f43c52d2a0fdd89d", "filename": "gcc/testsuite/g++.dg/cpp0x/auto27.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto27.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,6 +1,6 @@\n // PR c++/51186\n \n auto main()->int\t       // { dg-error \"std=\" \"std\" { target { ! c++11 } } }\n-\t\t\t       // { dg-error \"auto\" \"auto\" { target { ! c++11 } } 3 }\n-\t\t\t       // { dg-error \"no type\" \"no type\" { target { ! c++11 } } 3 }\n+\t\t\t       // { dg-error \"auto\" \"auto\" { target { ! c++11 } } .-1 }\n+\t\t\t       // { dg-error \"no type\" \"no type\" { target { ! c++11 } } .-2 }\n { }"}, {"sha": "de164e69234865ffe39e90a12bac37f014b3e383", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-98.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-98.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-98.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-98.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,4 +1,4 @@\n // { dg-options \"-std=c++98\" }\n \n constexpr int i = 42;\t  // { dg-message \"std=c\\\\+\\\\+11\" }\n-// { dg-error \"constexpr\" \"\" { target *-*-* } 3 }\n+// { dg-error \"constexpr\" \"\" { target *-*-* } .-1 }"}, {"sha": "e85c29bb6a82bc8626ff4ecea9c040cbe7bf21e8", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-diag2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -2,4 +2,4 @@\n // { dg-do compile { target c++11 } }\n \n constexpr int X (X);\t\t// { dg-error \"not usable\" }\n-// { dg-message \"own initializer\" \"\" { target *-*-* } 4 }\n+// { dg-message \"own initializer\" \"\" { target *-*-* } .-1 }"}, {"sha": "bf3f18be20ded676a872aae6fe343ddb81195c5f", "filename": "gcc/testsuite/g++.dg/cpp0x/diag2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdiag2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdiag2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdiag2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -13,7 +13,7 @@ int main()\n {\n   const A a;\n   f(a);\t\t\t\t// { dg-error \"no match\" }\n-  // { dg-error \"qualifiers\" \"\" { target *-*-* } 15 }\n-  // { dg-error \"lvalue\" \"\" { target *-*-* } 15 }\n+  // { dg-error \"qualifiers\" \"\" { target *-*-* } .-1 }\n+  // { dg-error \"lvalue\" \"\" { target *-*-* } .-2 }\n   g(a);\t\t\t\t// { dg-error \"qualifiers\" }\n }"}, {"sha": "789c93eecce286265b9eeac6c850faf2ea416e6e", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-syntax1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-syntax1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-syntax1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-syntax1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -2,4 +2,4 @@\n // { dg-do compile { target c++11 } }\n \n void foo() { [] () -> void (); } // { dg-error \"returning a function\" \"returning\" }\n-// { dg-error \"expected .\\{\" \"expected\" { target *-*-* } 4 }\n+// { dg-error \"expected .\\{\" \"expected\" { target *-*-* } .-1 }"}, {"sha": "ffbd6c4128fcb85c618032bbd094db0e8aac4256", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr15.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr15.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -17,10 +17,10 @@ void test_g()\n   // Deduction to nullptr_t, no deduction to pointer type\n   //\n   g(nullptr);               // { dg-error \"no matching function for call to \" }\n-  // { dg-message \"(candidate|mismatched types)\" \"candidate note\" { target *-*-* } 19 }\n+  // { dg-message \"(candidate|mismatched types)\" \"candidate note\" { target *-*-* } .-1 }\n   type_equal<float*>(g((float*)nullptr));\n   decltype(nullptr) mynull = 0;\n   g(mynull);                // { dg-error \"no matching function for call to \" }\n-  // { dg-message \"(candidate|mismatched types)\" \"candidate note\" { target *-*-* } 23 }\n+  // { dg-message \"(candidate|mismatched types)\" \"candidate note\" { target *-*-* } .-1 }\n   type_equal<float*>(g((float*)mynull));\n }"}, {"sha": "4be16fc35a39d177a4e315f737db57bacaea3438", "filename": "gcc/testsuite/g++.dg/cpp0x/pr31431-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31431-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31431-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31431-2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,5 +4,5 @@ template<typename, typename..., typename> void foo(); // { dg-message \"note\" }\n void bar()\n {\n   foo<int>(); // { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 6 }\n+  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "8116e7f567a884452aad4301d10f446282a3c819", "filename": "gcc/testsuite/g++.dg/cpp0x/pr31431.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31431.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31431.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31431.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,5 +4,5 @@ template<typename..., typename> void foo(); // { dg-message \"note\" }\n void bar()\n {\n   foo<int>(); // { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 6 }\n+  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "5db22a96dd4088035026df6bb829be97ae23269d", "filename": "gcc/testsuite/g++.dg/cpp0x/pr79118.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr79118.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr79118.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr79118.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -33,7 +33,7 @@ struct Two\n   constexpr Two (int) : a() {} // { dg-error \"b' must be initialized\" }\n   constexpr Two (unsigned) : b () {} // { dg-error \"a' must be initialized\" }\n   constexpr Two (void *) {} // { dg-error \"a' must be initialized\" }\n-   // { dg-error \"b' must be initialized\" \"\" { target *-*-* } 35 }\n+   // { dg-error \"b' must be initialized\" \"\" { target *-*-* } .-1 }\n };\n \n Two e ();"}, {"sha": "2b62661f8fa47fdc6061df6ffe4b8d779beb795c", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,4 +1,4 @@\n // { dg-do compile { target c++11 } }\n static_assert(7 / 0, \"X\"); // { dg-error \"non-constant condition\" \"non-constant\" }\n-// { dg-warning \"division by zero\" \"zero\" { target *-*-* } 2 }\n-// { dg-error \"division by zero is not a constant expression\" \"not a constant\" { target *-*-* } 2 }\n+// { dg-warning \"division by zero\" \"zero\" { target *-*-* } .-1 }\n+// { dg-error \"division by zero is not a constant expression\" \"not a constant\" { target *-*-* } .-2 }"}, {"sha": "9084636bdd826e8b534f49e06f6e050a4edd3bb2", "filename": "gcc/testsuite/g++.dg/cpp0x/temp_default2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,7 +8,7 @@ void g()\n   f(1, 'c'); // f<int,char>(1,'c') \n   f(1); // f<int,double>(1,0) \n   f(); // { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 10 }\n+  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n   f<int>(); // f<int,double>(0,0) \n   f<int,char>(); // f<int,char>(0,0) \n } "}, {"sha": "e9b7608a0436e31f5f9046ef57597be0ff56b59e", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing4.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,5 +8,5 @@ auto f(T,U) -> decltype(T() + U())\n template<class T> void g(T){}\t// { dg-message \"note\" }\n \n int main() { g(f); }\t\t// { dg-error \"no matching function\" }\n-// { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 10 }\n+// { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n "}, {"sha": "959978a0589dad656aae59e236e1219d7e91d927", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex10.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -5,4 +5,4 @@ Tuple<> t0; // Types contains no arguments\n Tuple<int> t1; // Types contains one argument: int\n Tuple<int, float> t2; // Types contains two arguments: int and float\n Tuple<0> error; // { dg-error \"mismatch\" \"mismatch\" }\n-// { dg-message \"expected a type\" \"expected a type\" { target *-*-* } 7 }\n+// { dg-message \"expected a type\" \"expected a type\" { target *-*-* } .-1 }"}, {"sha": "105208701bfaeb17a92439ec4121bc2c4241a80c", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex13.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -34,6 +34,6 @@ template<typename... Args> void g(Args... args)\n    f(const_cast<const Args*>(&args)...); // okay: ``Args'' and ``args'' are expanded\n    f(5 ...); // { dg-error \"contains no argument packs\" }\n    f(args); // { dg-error \"5:parameter packs not expanded\" }\n-   // { dg-message \"args\" \"note\" { target *-*-* } 36 }\n+   // { dg-message \"args\" \"note\" { target *-*-* } .-1 }\n    f(h(args...) + args...); // okay: first ``args'' expanded within h, second ``args'' expanded within f.\n }"}, {"sha": "832c06394fc5d116ab0a5cdeaf45a66bbccff315", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex14.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -9,9 +9,9 @@ template<template<class...> class Q> class Y { /* ... */ };\n \n X<A> xA; // okay\n X<B> xB; // { dg-error \"mismatch\" \"mismatch\" }\n-// { dg-message \"expected a template\" \"expected\" { target *-*-* } 11 }\n+// { dg-message \"expected a template\" \"expected\" { target *-*-* } .-1 }\n X<C> xC; // { dg-error \"mismatch\" \"mismatch\" }\n-// { dg-message \"expected a template\" \"expected\" { target *-*-* } 13 }\n+// { dg-message \"expected a template\" \"expected\" { target *-*-* } .-1 }\n Y<A> yA;\n Y<B> yB;\n Y<C> yC; // okay"}, {"sha": "65ff549b3f9109172ee1817968778420bec8dc54", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,8 +4,8 @@ void g()\n { \n   int i = f<int>(5.6);\n   int j = f(5.6);         // { dg-error \"no matching\" }\n-  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 6 }\n+  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n   f<void>(f<int, bool>);\n   f<void>(f<int>);        // { dg-error \"no matching\" }\n-  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 9 }\n+  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n } "}, {"sha": "36d0b6fede5fe8a87ceae0bc1ba254769dd8ffe1", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex4.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,6 +8,6 @@ void g()\n   f<int>(\"aa\",3.0); // Y is deduced to be char*, and \n                     // Z is deduced to be double \n   f(\"aa\",3.0); // { dg-error \"no matching\" }\n-  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 10 }\n+  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n   f2<char, short, int, long>(); // okay\n } "}, {"sha": "f13e427faddd97d8728412232782cf72c17e85c8", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic59.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic59.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic59.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic59.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,4 +1,4 @@\n // { dg-do compile { target c++11 } }\n template<class T, typename... VarArgs>\n void print(T t, VarArgs args); // { dg-error \"packs not expanded\" }\n-// { dg-message \"VarArgs\" \"note\" { target *-*-* } 3 }\n+// { dg-message \"VarArgs\" \"note\" { target *-*-* } .-1 }"}, {"sha": "56bfdb2008ae559f5ce21b2fcee186857a9ff981", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-37737-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-37737-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-37737-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-37737-2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,7 +4,7 @@ template<class U, class... T>\n void f()\t\t\t// { dg-message \"note\" }\n {\n   f<T...>(); // { dg-error \"no matching\" }\n-  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 6 }\n+  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n }\n \n template<>"}, {"sha": "440bea5b2f75c99524f62e20ba641a1b03ca6a21", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-57397-1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-57397-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-57397-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-57397-1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -10,13 +10,13 @@ void bar(T1, T2, Tn...);\n int main()\n {\n   foo();   // { dg-error \"no matching\" }\n-  // { dg-message \"candidate expects at least 1 argument, 0 provided\" \"\" { target *-*-* } 12 }\n+  // { dg-message \"candidate expects at least 1 argument, 0 provided\" \"\" { target *-*-* } .-1 }\n   foo(1);\n   foo(1, 2);\n   bar();   // { dg-error \"no matching\" }\n-  // { dg-message \"candidate expects at least 2 arguments, 0 provided\" \"\" { target *-*-* } 16 }\n+  // { dg-message \"candidate expects at least 2 arguments, 0 provided\" \"\" { target *-*-* } .-1 }\n   bar(1);  // { dg-error \"no matching\" }\n-  // { dg-message \"candidate expects at least 2 arguments, 1 provided\" \"\" { target *-*-* } 18 }\n+  // { dg-message \"candidate expects at least 2 arguments, 1 provided\" \"\" { target *-*-* } .-1 }\n   bar(1, 2);\n   bar(1, 2, 3);\n }"}, {"sha": "1a99e22c5cb26c2d86509375cee4793f92f046cc", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-57397-2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-57397-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-57397-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-57397-2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -10,14 +10,14 @@ void bar(T1, T2, Tn..., Tm...);\n int main()\n {\n   foo();   // { dg-error \"no matching\" }\n-  // { dg-message \"candidate expects at least 1 argument, 0 provided\" \"\" { target *-*-* } 12 }\n+  // { dg-message \"candidate expects at least 1 argument, 0 provided\" \"\" { target *-*-* } .-1 }\n   foo(1);\n   foo(1, 2);\n   foo(1, 2, 3);\n   bar();   // { dg-error \"no matching\" }\n-  // { dg-message \"candidate expects at least 2 arguments, 0 provided\" \"\" { target *-*-* } 17 }\n+  // { dg-message \"candidate expects at least 2 arguments, 0 provided\" \"\" { target *-*-* } .-1 }\n   bar(1);  // { dg-error \"no matching\" }\n-  // { dg-message \"candidate expects at least 2 arguments, 1 provided\" \"\" { target *-*-* } 19 }\n+  // { dg-message \"candidate expects at least 2 arguments, 1 provided\" \"\" { target *-*-* } .-1 }\n   bar(1, 2);\n   bar(1, 2, 3);\n   bar(1, 2, 3, 4);"}, {"sha": "89c020813eb3a73f7cc1ee4b8a481e09d8cd7260", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda8.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -7,7 +7,7 @@ static_assert( Fwd(C ,3) == 3); // OK\n // No specialization of the function call operator template can be constexpr\n // (because of the local static).\n auto NC = [](auto a) { static int s; return a; }; // { dg-error \"static\" }\n-// { dg-message \"operator int\" \"\" { target *-*-* } 11 }\n+// { dg-message \"operator int\" \"\" { target *-*-* } .+1 }\n static_assert( Fwd(NC ,3) == 3); // { dg-error \"\" }\n \n // We look for the string \"operator int\" to check that we aren't trying to do"}, {"sha": "019175f7519f5a856dd8584e2774d0b2f9082747", "filename": "gcc/testsuite/g++.dg/cpp1z/gen-attrs1.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fgen-attrs1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fgen-attrs1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fgen-attrs1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,10 +6,10 @@ foo ()\n {\n   static int a [[using gnu: unused, used]];\t// { dg-warning \"attribute using prefix only available\" \"\" { target c++14_down } }\n   int b [[ using foo : bar (2), baz ]];\t\t// { dg-warning \"'foo::bar' scoped attribute directive ignored\" }\n-\t\t\t\t\t\t// { dg-warning \"'foo::baz' scoped attribute directive ignored\" \"\" { target *-*-* } 8 }\n-\t\t\t\t\t\t// { dg-warning \"attribute using prefix only available\" \"\" { target c++14_down } 8 }\n+\t\t\t\t\t\t// { dg-warning \"'foo::baz' scoped attribute directive ignored\" \"\" { target *-*-* } .-1 }\n+\t\t\t\t\t\t// { dg-warning \"attribute using prefix only available\" \"\" { target c++14_down } .-2 }\n   int c [[ using foo : using (\"foo\")]];\t\t// { dg-warning \"'foo::using' scoped attribute directive ignored\" }\n-\t\t\t\t\t\t// { dg-warning \"attribute using prefix only available\" \"\" { target c++14_down } 11 }\n+\t\t\t\t\t\t// { dg-warning \"attribute using prefix only available\" \"\" { target c++14_down } .-1 }\n   b = 0;\n   c = 0;\n   return b + c;\n@@ -19,11 +19,11 @@ int\n bar ()\n {\n   int a [[ using BAR: foo::bar]];\t\t// { dg-error \"attribute using prefix used together with scoped attribute token\" }\n-\t\t\t\t\t\t// { dg-warning \"ignored\" \"\" { target *-*-* } 21 }\n-\t\t\t\t\t\t// { dg-warning \"attribute using prefix only available\" \"\" { target c++14_down } 21 }\n+\t\t\t\t\t\t// { dg-warning \"ignored\" \"\" { target *-*-* } .-1 }\n+\t\t\t\t\t\t// { dg-warning \"attribute using prefix only available\" \"\" { target c++14_down } .-2 }\n   int b [[ using BAZ: bar(2), bar::bar(3, 4) ]];// { dg-error \"attribute using prefix used together with scoped attribute token\" }\n-\t\t\t\t\t\t// { dg-warning \"ignored\" \"\" { target *-*-* } 24 }\n-\t\t\t\t\t\t// { dg-warning \"attribute using prefix only available\" \"\" { target c++14_down } 24 }\n+\t\t\t\t\t\t// { dg-warning \"ignored\" \"\" { target *-*-* } .-1 }\n+\t\t\t\t\t\t// { dg-warning \"attribute using prefix only available\" \"\" { target c++14_down } .-2 }\n   a = 0;\n   b = 0;\n   return a + b;\n@@ -33,10 +33,10 @@ int\n baz ()\n {\n   int a [[ using using: using]];\t\t// { dg-warning \"attribute using prefix only available\" \"\" { target c++14_down } }\n-\t\t\t\t\t\t// { dg-warning \"'using::using' scoped attribute directive ignored\" \"\" { target *-*-* } 35 }\n+\t\t\t\t\t\t// { dg-warning \"'using::using' scoped attribute directive ignored\" \"\" { target *-*-* } .-1 }\n   int b [[ using bitand: bitor, xor]];\t\t// { dg-warning \"attribute using prefix only available\" \"\" { target c++14_down } }\n-\t\t\t\t\t\t// { dg-warning \"'bitand::bitor' scoped attribute directive ignored\" \"\" { target *-*-* } 37 }\n-\t\t\t\t\t\t// { dg-warning \"'bitand::xor' scoped attribute directive ignored\" \"\" { target *-*-* } 37 }\n+\t\t\t\t\t\t// { dg-warning \"'bitand::bitor' scoped attribute directive ignored\" \"\" { target *-*-* } .-1 }\n+\t\t\t\t\t\t// { dg-warning \"'bitand::xor' scoped attribute directive ignored\" \"\" { target *-*-* } .-2 }\n   a = 0;\n   b = 0;\n   return a + b;"}, {"sha": "62b6e0d17ed235315873bba0788dcafe5bdd5e14", "filename": "gcc/testsuite/g++.dg/diagnostic/pr71075.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr71075.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr71075.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr71075.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,5 +4,5 @@ template<typename T, int I> struct A {};\n template<typename T> void foo(A<T,1>) {}\n int main() {\n   foo(A<int,2>()); // { dg-error \"no matching\" }\n-// { dg-message \"template argument .2. does not match .1.\" \"\" { target *-*-* } 6 }\n+// { dg-message \"template argument .2. does not match .1.\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "1cd254c0404c7cf5d9ad0de865f54d586dfa73fc", "filename": "gcc/testsuite/g++.dg/eh/goto2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fgoto2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fgoto2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fgoto2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,6 +8,6 @@ try\n   } catch (...)\n   {\n   l2: ;            // { dg-error \"jump to label 'l2'\" }\n-                   // { dg-message \"enters catch block\" \"\" { target *-*-*} 10 }\n+                   // { dg-message \"enters catch block\" \"\" { target *-*-*} .-1 }\n     goto l1;       // { dg-message \"from here|enters try block\" }\n   }"}, {"sha": "250324e08f41a5baaa1bebfbd1dea9e0cffa7454", "filename": "gcc/testsuite/g++.dg/eh/goto3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fgoto3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fgoto3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fgoto3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -9,6 +9,6 @@ try\n   } catch (...)\n   {\n   l2: ;\t    // { dg-error \"jump to label 'l2'\" }\n-\t\t   // { dg-message \"enters catch block\" \"\" { target *-*-*} 11 }\n+\t\t   // { dg-message \"enters catch block\" \"\" { target *-*-*} .-1 }\n     goto l1;       // { dg-message \"from here|enters try block\" }\n   }"}, {"sha": "3bb9d2b6a9dd1b6226b216e5c6246e7c11bf6c76", "filename": "gcc/testsuite/g++.dg/expr/bitfield4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield4.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -15,7 +15,7 @@ void f(bool) {}\n \n int main() {\n   f(s.x++); // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n-  // { dg-error \"forbidden\" \"\" { target c++1z } 17 }\n+  // { dg-error \"forbidden\" \"\" { target c++1z } .-1 }\n   f(++s.x); // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n-  // { dg-error \"forbidden\" \"\" { target c++1z } 19 }\n+  // { dg-error \"forbidden\" \"\" { target c++1z } .-1 }\n }"}, {"sha": "6effd0a77381074a9bcde07ea1805d43191c688c", "filename": "gcc/testsuite/g++.dg/expr/bitfield5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -9,11 +9,11 @@ S s;\n \n int main() {\n   s.x++; // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n-  // { dg-error \"forbidden\" \"\" { target c++1z } 11 }\n+  // { dg-error \"forbidden\" \"\" { target c++1z } .-1 }\n   if (s.x != 1)\n     return 1;\n   ++s.x; // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n-  // { dg-error \"forbidden\" \"\" { target c++1z } 15 }\n+  // { dg-error \"forbidden\" \"\" { target c++1z } .-1 }\n   if (s.x != 1)\n     return 2;\n }"}, {"sha": "263164fe7a25d58784e7f2fee5175e2cb9200f3a", "filename": "gcc/testsuite/g++.dg/expr/bitfield6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield6.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,5 +8,5 @@ S s;\n \n void f() {\n   ++s.x = false; // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n-  // { dg-error \"forbidden\" \"\" { target c++1z } 10 }\n+  // { dg-error \"forbidden\" \"\" { target c++1z } .-1 }\n }"}, {"sha": "ba2df1d5642142a1dabe5d319abc930c7facd671", "filename": "gcc/testsuite/g++.dg/expr/bool1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,9 +11,9 @@ int main()\n   int i;\n \n   b++; // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n-  // { dg-error \"forbidden\" \"\" { target c++1z } 13 }\n+  // { dg-error \"forbidden\" \"\" { target c++1z } .-1 }\n   b++; // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n-  // { dg-error \"forbidden\" \"\" { target c++1z } 15 }\n+  // { dg-error \"forbidden\" \"\" { target c++1z } .-1 }\n   i = b;\n   if (i != 1)\n     abort ();"}, {"sha": "d7bb77357140a4b2401220fff335dd83a5f6d53c", "filename": "gcc/testsuite/g++.dg/expr/bool3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,9 +11,9 @@ int main()\n   int i;\n \n   b++; // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n-  // { dg-error \"forbidden\" \"\" { target c++1z } 13 }\n+  // { dg-error \"forbidden\" \"\" { target c++1z } .-1 }\n   b++; // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n-  // { dg-error \"forbidden\" \"\" { target c++1z } 15 }\n+  // { dg-error \"forbidden\" \"\" { target c++1z } .-1 }\n   i = b;\n   if (i != 1)\n     abort ();"}, {"sha": "b22dc158a879afd13e43f9cea20103f5eabf3771", "filename": "gcc/testsuite/g++.dg/expr/cond10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond10.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -13,5 +13,5 @@ void\n foo (bool b)\n {\n   b ? c : s;\t\t\t// { dg-error \"?:\" }\n-  // { dg-message \"convert\" \"\" { target *-*-* } 15 }\n+  // { dg-message \"convert\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "6f91cf917ac8a68acd3a00123a6fa00439e18886", "filename": "gcc/testsuite/g++.dg/expr/cond11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond11.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -16,5 +16,5 @@ void\n foo (bool b)\n {\n   b ? c : a;\t\t\t// { dg-error \"?:\" }\n-  // { dg-message \"ambiguous\" \"\" { target *-*-* } 18 }\n+  // { dg-message \"ambiguous\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "ffbbe3121ab553b23a5b45fbf80985aa9446d994", "filename": "gcc/testsuite/g++.dg/expr/lval3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Flval3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Flval3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Flval3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,5 +4,5 @@ f()\n {\n   bool i = 0;\n   i++ = 3; // { dg-error \"\" }\n-  // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } 6 }\n+  // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-1 }\n }"}, {"sha": "e731c2039f3e45544a98fc3b60f6c3a0a3078e09", "filename": "gcc/testsuite/g++.dg/expr/lval4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Flval4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Flval4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Flval4.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,6 +4,6 @@ f()\n {\n   bool i = 0;\n   ++i = 3;\n-  // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } 6 }\n-  // { dg-error \"forbidden\" \"\" { target c++1z } 6 }\n+  // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-1 }\n+  // { dg-error \"forbidden\" \"\" { target c++1z } .-2 }\n }"}, {"sha": "b3fdd4c15ec23a70c834fc40aecb745bc8b2d81c", "filename": "gcc/testsuite/g++.dg/ext/anon-struct4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,5 +1,5 @@\n // PR c++/14401\n \n struct { struct { int& i ; } bar ; } foo ; // { dg-error \"deleted|uninitialized\" \"uninit\" }\n-// { dg-warning \"unnamed\" \"anon\" { target { ! c++11 } } 3 }\n-// { dg-message \"should be initialized\" \"ref-uninit\" { target { ! c++11 } } 3 }\n+// { dg-warning \"unnamed\" \"anon\" { target { ! c++11 } } .-1 }\n+// { dg-message \"should be initialized\" \"ref-uninit\" { target { ! c++11 } } .-2 }"}, {"sha": "0d9f5203446a3a5d54cc15d1c547e169a2082507", "filename": "gcc/testsuite/g++.dg/ext/attrib44.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib44.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,4 +1,4 @@\n // PR c++/52671\n // { dg-do compile }\n __attribute__ ((deprecated)) enum E { E0 };\t// { dg-warning \"attribute ignored in declaration of\" \"ignored\" }\n-// { dg-message \"must follow the\" \"must follow\" { target *-*-* } 3 }\n+// { dg-message \"must follow the\" \"must follow\" { target *-*-* } .-1 }"}, {"sha": "6becaa055e6480338f5d06aebffb48c5869f33dc", "filename": "gcc/testsuite/g++.dg/ext/builtin3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -10,5 +10,5 @@ extern \"C\" int printf(char*, ...); // { dg-message \"std::printf\" }\n \n void foo() {\n   printf(\"abc\"); \t\t// { dg-error \"3:'printf' was not declared\" }\n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 12 }\n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-1 }\n }"}, {"sha": "bc14e8c00d2d3412c96c504434f856626f7f8048", "filename": "gcc/testsuite/g++.dg/ext/dllimport7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport7.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -19,7 +19,7 @@ class  __declspec(dllimport) Bar\n };\n \n const int Bar::three = 3;       //  { dg-warning \"redeclared without dllimport\" }\n-//  { dg-error \"definition of static data\" \"C++ specific error\" { target i?86-*-cygwin* i?86-*-mingw* x86_64-*-mingw* } 21 }\n+//  { dg-error \"definition of static data\" \"C++ specific error\" { target i?86-*-cygwin* i?86-*-mingw* x86_64-*-mingw* } .-1 }\n \t\t\t\t\n const Baz Bar::null_baz;\t//  { dg-warning \"redeclared without dllimport\" }\n "}, {"sha": "6de3576a3330c74414af9fd2036a5fdb3cb4a9b9", "filename": "gcc/testsuite/g++.dg/ext/label5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,4 +3,4 @@\n \n struct A { };\n int main() { b: A() && && b; } // { dg-error \"operand types are 'A' and 'void\\\\*'\" }\n-// { dg-message \"candidate|operator&&|no known conversion\" \"additional\" { target *-*-* } 5 }\n+// { dg-message \"candidate|operator&&|no known conversion\" \"additional\" { target *-*-* } .-1 }"}, {"sha": "7dec2dbce62f2c62de60ac607ffade07188b5f89", "filename": "gcc/testsuite/g++.dg/ext/no-asm-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fno-asm-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fno-asm-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fno-asm-1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,5 +6,5 @@\n \n int asm;\t// { dg-error \"before .asm.\" }\n int typeof;\t// { dg-error \"expected\" \"expected\" }\n-// { dg-error \"multiple types\" \"multiple\" { target *-*-* } 8 }\n-// { dg-error \"declaration\" \"declaration\" { target *-*-* } 8 }\n+// { dg-error \"multiple types\" \"multiple\" { target *-*-* } .-1 }\n+// { dg-error \"declaration\" \"declaration\" { target *-*-* } .-2 }"}, {"sha": "8ba88afe54e93703af0cad156af2ffe7eb8fa81e", "filename": "gcc/testsuite/g++.dg/ext/utf16-4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf16-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf16-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf16-4.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -13,6 +13,6 @@ const static char16_t\tc5 = U'\\u2029';\n const static char16_t\tc6 = U'\\U00064321';\t/* { dg-warning \"implicitly truncated\" } */\n const static char16_t\tc7 = L'a';\n const static char16_t\tc8 = L'\\u2029';\n-const static char16_t\tc9 = L'\\U00064321';\t/* { dg-warning \"implicitly truncated\" \"\" { target { 4byte_wchar_t } } 16 } */\n-\t\t\t\t\t\t/* { dg-warning \"constant too long\" \"\" { target { ! 4byte_wchar_t } } 16 } */\n+const static char16_t\tc9 = L'\\U00064321';\t/* { dg-warning \"implicitly truncated\" \"\" { target { 4byte_wchar_t } } . } */\n+\t\t\t\t\t\t/* { dg-warning \"constant too long\" \"\" { target { ! 4byte_wchar_t } } .-1 } */\n int main () {}"}, {"sha": "7e67fb0305b20a882f60739da30fcce37b6bd154", "filename": "gcc/testsuite/g++.dg/ext/vla2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -15,5 +15,5 @@ void bar(int i)\n   char d[i] ;\n   \n   begin(d);  // { dg-error \"no matching function\" \"\" }\n-  // { dg-message \"(candidate|valid template argument)\" \"candidate note\" { target *-*-* } 17 }\n+  // { dg-message \"(candidate|valid template argument)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "6acdd396f9e8e6dd79bce710742969555d7b9817", "filename": "gcc/testsuite/g++.dg/gomp/block-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -10,7 +10,7 @@ void foo()\n   #pragma omp parallel\n     {\n       bad2: ;\t\t\t// { dg-error \"jump to label\" }\n-                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } 12 }\n+                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } .-1 }\n     }\n \n   #pragma omp parallel"}, {"sha": "b4e5516a8daa6d8b8bd80a58f4bdf1e1393749e9", "filename": "gcc/testsuite/g++.dg/gomp/block-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -18,7 +18,7 @@ void foo()\n   for (i = 0; i < 10; ++i)\n     {\n       bad2: ;\t\t\t// { dg-error \"jump\" }\n-                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } 20 }\n+                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } .-1 }\n     }\n \n   #pragma omp for"}, {"sha": "753c19b5cfa7a4bd564ed75418da4f0a46e443cc", "filename": "gcc/testsuite/g++.dg/gomp/block-3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -26,13 +26,13 @@ void foo()\n       goto bad2;\t\t// { dg-message \"from here\" }\n     }\n   bad2:;\t\t\t// { dg-error \"jump\" }\n-                                // { dg-message \"exits OpenMP\" \"\" { target *-*-* } 28 }\n+                                // { dg-message \"exits OpenMP\" \"\" { target *-*-* } .-1 }\n \n   goto bad3;\t\t\t// { dg-message \"from here\" }\n   #pragma omp sections\n     {\n       bad3: ;\t\t\t// { dg-error \"jump\" }\n-                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } 34 }\n+                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } .-1 }\n     }\n \n   #pragma omp sections"}, {"sha": "985e761d3855ebab7e6d1f1378b4a8fdfd30b108", "filename": "gcc/testsuite/g++.dg/gomp/block-5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -10,7 +10,7 @@ void foo()\n   #pragma omp master\n     {\n     bad1:\t\t// { dg-error \"jump\" }\n-                        // { dg-message \"exits OpenMP\" \"\" { target *-*-* } 12 }\n+                        // { dg-message \"exits OpenMP\" \"\" { target *-*-* } .-1 }\n       return;\t\t// { dg-error \"invalid exit\" }\n     }\n }"}, {"sha": "eed982276e7f2f0966261636ee8c2202030fed3a", "filename": "gcc/testsuite/g++.dg/gomp/linear-2.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Flinear-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Flinear-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Flinear-2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -33,7 +33,7 @@ void\n f4 ()\n {\n   #pragma omp for linear (i:1) linear (j:2) collapse(2)\t// { dg-error \"iteration variable .i. should not be linear\" }\n-  for (i = 0; i < 32; i++)\t\t\t\t// { dg-error \"iteration variable .j. should not be linear\" \"\" { target *-*-* } 35 }\n+  for (i = 0; i < 32; i++)\t\t\t\t// { dg-error \"iteration variable .j. should not be linear\" \"\" { target *-*-* } .-1 }\n     for (j = 0; j < 32; j+=2)\n       ;\n }\n@@ -50,7 +50,7 @@ f5 ()\n void\n f6 ()\n {\n-  #pragma omp parallel for linear (i:1) collapse(2) linear (j:2)\t// { dg-error \"iteration variable .i. should not be linear\" \"\" { target *-*-* } 54 }\n+  #pragma omp parallel for linear (i:1) collapse(2) linear (j:2)\t// { dg-error \"iteration variable .i. should not be linear\" \"\" { target *-*-* } .+1 }\n   for (i = 0; i < 32; i++)\t\t\t\t\t\t// { dg-error \"iteration variable .j. should not be linear\" }\n     for (j = 0; j < 32; j+=2)\n       ;\n@@ -88,7 +88,7 @@ void\n f10 ()\n {\n   #pragma omp for linear (i:1) linear (j:2) collapse(2)\t// { dg-error \"iteration variable .i. should not be linear\" }\n-  for (i = 0; i < 32; i++)\t\t\t\t// { dg-error \"iteration variable .j. should not be linear\" \"\" { target *-*-* } 90 }\n+  for (i = 0; i < 32; i++)\t\t\t\t// { dg-error \"iteration variable .j. should not be linear\" \"\" { target *-*-* } .-1 }\n     for (j = 0; j < 32; j+=2)\n       ;\n }\n@@ -107,7 +107,7 @@ template <int N>\n void\n f12 ()\n {\n-  #pragma omp parallel for linear (i:1) collapse(2) linear (j:2)\t// { dg-error \"iteration variable .i. should not be linear\" \"\" { target *-*-* } 111 }\n+  #pragma omp parallel for linear (i:1) collapse(2) linear (j:2)\t// { dg-error \"iteration variable .i. should not be linear\" \"\" { target *-*-* } .+1 }\n   for (i = 0; i < 32; i++)\t\t\t\t\t\t// { dg-error \"iteration variable .j. should not be linear\" }\n     for (j = 0; j < 32; j+=2)\n       ;"}, {"sha": "81837c965babc8e421c336fd4fb5a297539c0a84", "filename": "gcc/testsuite/g++.dg/gomp/target-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftarget-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftarget-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftarget-1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,7 +11,7 @@ foo (int x)\n   #pragma omp target\n     {\n       bad2: ;\t\t\t// { dg-error \"jump to label\" }\n-                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } 13 }\n+                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } .-1 }\n     }\n \n   #pragma omp target\n@@ -26,7 +26,7 @@ foo (int x)\n   {\n   #pragma omp target\t\t// { dg-warning \"statement will never be executed\" }\n     { case 0:; }\t\t// { dg-error \"jump\" }\n-                                // { dg-message \"enters\" \"\" { target *-*-* } 28 }\n+                                // { dg-message \"enters\" \"\" { target *-*-* } .-1 }\n   }\n }\n "}, {"sha": "afb55e4ab31f86ba6ebd139ec6e2a7c313bcecf2", "filename": "gcc/testsuite/g++.dg/gomp/target-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftarget-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftarget-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftarget-2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,7 +11,7 @@ foo (int x, int y)\n   #pragma omp target data map(tofrom: y)\n     {\n       bad2: ;\t\t\t// { dg-error \"jump to label\" }\n-                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } 13 }\n+                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } .-1 }\n     }\n \n   #pragma omp target data map(tofrom: y)\n@@ -26,7 +26,7 @@ foo (int x, int y)\n   {\n   #pragma omp target data map(tofrom: y) // { dg-warning \"statement will never be executed\" }\n     { case 0:; }\t\t// { dg-error \"jump\" }\n-                                // { dg-message \"enters\" \"\" { target *-*-* } 28 }\n+                                // { dg-message \"enters\" \"\" { target *-*-* } .-1 }\n   }\n }\n "}, {"sha": "9b8b1f74a1ae0c348c29208555d7e97f87aa97d6", "filename": "gcc/testsuite/g++.dg/gomp/taskgroup-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftaskgroup-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftaskgroup-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftaskgroup-1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,7 +11,7 @@ foo (int x)\n   #pragma omp taskgroup\n     {\n       bad2: ;\t\t\t// { dg-error \"jump to label\" }\n-                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } 13 }\n+                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } .-1 }\n     }\n \n   #pragma omp taskgroup\n@@ -26,7 +26,7 @@ foo (int x)\n   {\n   #pragma omp taskgroup\t\t// { dg-warning \"statement will never be executed\" }\n     { case 0:; }\t\t// { dg-error \"jump\" }\n-                                // { dg-message \"enters\" \"\" { target *-*-* } 28 }\n+                                // { dg-message \"enters\" \"\" { target *-*-* } .-1 }\n   }\n }\n "}, {"sha": "a453c7cd47ed21a7d1806068362685ad8ac16e33", "filename": "gcc/testsuite/g++.dg/gomp/teams-1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fteams-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fteams-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fteams-1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,7 +11,7 @@ foo (int x)\n   #pragma omp target teams\n     {\n       bad2: ;\t\t\t// { dg-error \"jump to label\" }\n-                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } 13 }\n+                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } .-1 }\n     }\n \n   #pragma omp target teams\n@@ -44,7 +44,7 @@ bar (int x)\n   #pragma omp teams\n     {\n       bad2: ;\t\t\t// { dg-error \"jump to label\" }\n-                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } 46 }\n+                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } .-1 }\n     }\n \n   #pragma omp target\n@@ -61,7 +61,7 @@ bar (int x)\n   #pragma omp target\t\t// { dg-warning \"statement will never be executed\" }\n   #pragma omp teams\n     { case 0:; }\t\t// { dg-error \"jump\" }\n-                                // { dg-message \"enters\" \"\" { target *-*-* } 63 }\n+                                // { dg-message \"enters\" \"\" { target *-*-* } .-1 }\n   }\n }\n "}, {"sha": "364369b85e19fdcdd0f009459ac04f658fbb5857", "filename": "gcc/testsuite/g++.dg/inherit/pure1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fpure1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fpure1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fpure1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,7 +4,7 @@\n \n void foo0() = 0;                   // { dg-error \"like a variable\" }\n virtual void foo1() = 0;           // { dg-error \"1:'virtual' outside class\" }\n-// { dg-error \"like a variable\" \"\" { target *-*-* } 6 }\n+// { dg-error \"like a variable\" \"\" { target *-*-* } .-1 }\n struct A\n {\n   void foo2() = 0;                 // { dg-error \"non-virtual\" }"}, {"sha": "b4e6512284a7dc1ed639e188ff04d8fa5de3cbc0", "filename": "gcc/testsuite/g++.dg/init/array43.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray43.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,2 +1,2 @@\n int a[] = 0;  // { dg-error \"5:initializer fails to determine size\" }\n-// { dg-error \"11:array must be initialized\" \"\" { target *-*-* } 1 }\n+// { dg-error \"11:array must be initialized\" \"\" { target *-*-* } .-1 }"}, {"sha": "858496451446b463f7e65b4948d789efa4daabbf", "filename": "gcc/testsuite/g++.dg/init/array46.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray46.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,3 +1,3 @@\n int foo();\n int a[] = foo();  // { dg-error \"14:initializer fails to determine size\" }\n-// { dg-error \"14:array must be initialized\" \"\" { target *-*-* } 2 }\n+// { dg-error \"14:array must be initialized\" \"\" { target *-*-* } .-1 }"}, {"sha": "283da624b5c325b6520dfc044f99698824899973", "filename": "gcc/testsuite/g++.dg/init/const10.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst10.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -2,15 +2,15 @@\n // { dg-do compile { target c++11 } }\n \n class B // { dg-message \"implicitly deleted\" }\n-        // { dg-error \"uninitialized\" \"\" { target c++11 } 4 }\n+        // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int const v_; // { dg-message \"should be initialized\" }\n };\n \n struct D : B {}; // { dg-error \"deleted\" }\n \n class A // { dg-message \"implicitly deleted\" }\n-\t// { dg-error \"uninitialized\" \"\" { target c++11 } 12 }\n+\t// { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int& ref; // { dg-message \"should be initialized\" }\n };"}, {"sha": "33e58dfec3245b1796bba0f5e2a01391dbdbbbcc", "filename": "gcc/testsuite/g++.dg/init/ctor4-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor4-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor4-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor4-1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,7 +6,7 @@ public:\n };\n \n class bar: public foo {\t// { dg-error \"uninitialized\" }\n-\t\t   // { dg-message \"implicitly deleted\" \"\" { target c++11 } 8 }\n+\t\t   // { dg-message \"implicitly deleted\" \"\" { target c++11 } .-1 }\n private:\n   int const a; // { dg-message \"should be initialized\" }\n };\n@@ -17,5 +17,5 @@ foo::foo() {\n int main(int argc, char **argv)\n {\n   bar x; // { dg-error \"deleted\" \"\" { target c++11 } }\n-\t // { dg-message \"synthesized\" \"\" { target { ! c++11 } } 19 }\n+\t // { dg-message \"synthesized\" \"\" { target { ! c++11 } } .-1 }\n }"}, {"sha": "5450fc14acb04c50e7bdf8b9fbf5828fd852e9d9", "filename": "gcc/testsuite/g++.dg/init/ctor4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor4.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -7,7 +7,7 @@ public:\n };\n \n class bar: public foo {\t// { dg-error \"uninitialized\" }\n-\t\t   // { dg-message \"implicitly deleted\" \"\" { target c++11 } 9 }\n+\t\t   // { dg-message \"implicitly deleted\" \"\" { target c++11 } .-1 }\n private:\n   int &a; // { dg-message \"should be initialized\" }\n };\n@@ -18,5 +18,5 @@ foo::foo() {\n int main(int argc, char **argv)\n {\n   bar x; // { dg-error \"deleted\" \"\" { target c++11 } }\n-         // { dg-message \"synthesized\" \"\" { target { ! c++11 } } 20 }\n+         // { dg-message \"synthesized\" \"\" { target { ! c++11 } } .-1 }\n }"}, {"sha": "3255a696143fd2f6bcd31f0829a409ea173faa6a", "filename": "gcc/testsuite/g++.dg/init/new37.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew37.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -41,7 +41,7 @@ struct T1 {\n \n struct T2 {\n   static const double n = 2; // { dg-error \"23:'constexpr' needed\" \"\" { target c++11 } }\n-  // { dg-error \"23:ISO C\\\\+\\\\+ forbids\" \"\" { target c++98_only } 43 }\n+  // { dg-error \"23:ISO C\\\\+\\\\+ forbids\" \"\" { target c++98_only } .-1 }\n };\n \n struct T3 {"}, {"sha": "4cda484e5af521fffbfad3415a00ef1c2db46cf4", "filename": "gcc/testsuite/g++.dg/init/pr25811.C", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr25811.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr25811.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr25811.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -2,56 +2,56 @@\n // { dg-do compile }\n \n struct A1 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-          // { dg-error \"uninitialized\" \"\" { target c++11 } 4 }\n+          // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int const j; // { dg-message \"should be initialized\" }\n };\n \n struct A2 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-          // { dg-error \"uninitialized\" \"\" { target c++11 } 10 }\n+          // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int const volatile i; // { dg-message \"should be initialized\" }\n };\n \n struct A3 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 16 }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int& ref; // { dg-message \"should be initialized\" }\n };\n \n struct A4 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 22 }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int const& ref; // { dg-message \"should be initialized\" }\n };\n \n struct A5 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 28 }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int& ref; // { dg-message \"should be initialized\" }\n   int const i; // { dg-message \"should be initialized\" }\n };\n \n template <class T> struct S1 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t\t\t     // { dg-error \"uninitialized\" \"\" { target c++11 } 35 }\n+\t\t\t     // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   T const i; // { dg-message \"should be initialized\" }\n };\n \n template <class T> struct S2 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t\t\t     // { dg-error \"uninitialized\" \"\" { target c++11 } 41 }\n+\t\t\t     // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   T const volatile i; // { dg-message \"should be initialized\" }\n };\n \n template <class T> struct S3 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t\t\t     // { dg-error \"uninitialized\" \"\" { target c++11 } 47 }\n+\t\t\t     // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   T& ref; // { dg-message \"should be initialized\" }\n };\n \n template <class T> struct S4 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t\t\t     // { dg-error \"uninitialized\" \"\" { target c++11 } 53 }\n+\t\t\t     // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   T const i; // { dg-message \"should be initialized\" }\n   T& ref; // { dg-message \"should be initialized\" }\n@@ -65,7 +65,7 @@ struct X\n };\n \n struct Y11 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t   // { dg-error \"uninitialized\" \"\" { target c++11 } 67 }\n+\t   // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int const i; // { dg-message \"should be initialized\" }\n };\n@@ -76,7 +76,7 @@ struct Y1 // { dg-error \"deleted\" \"\" { target c++11 } }\n };\n \n struct Y22 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t   // { dg-error \"uninitialized\" \"\" { target c++11 } 78 }\n+\t   // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int& ref; // { dg-message \"should be initialized\" }\n };\n@@ -87,25 +87,25 @@ struct Y2 // { dg-error \"deleted\" \"\" { target c++11 } }\n };\n \n struct Z1 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 89 }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int const i; // { dg-message \"should be initialized\" }\n };\n \n struct Z2 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 95 }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int& ref; // { dg-message \"should be initialized\" }\n };\n \n struct Z3 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 101 }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int const i; // { dg-message \"should be initialized\" }\n };\n \n struct Z4 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 107 }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int& ref; // { dg-message \"should be initialized\" }\n };\n@@ -125,7 +125,7 @@ struct Z // { dg-error \"deleted\" \"\" { target c++11 } }\n };\n \n union U // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t// { dg-error \"uninitialized\" \"\" { target c++11 } 127 }\n+\t// { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int const i; // { dg-message \"should be initialized\" }\n };"}, {"sha": "61845951a4acc98ebb0bc9484e44c4c120d09f9c", "filename": "gcc/testsuite/g++.dg/init/pr29043.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr29043.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr29043.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr29043.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -2,7 +2,7 @@\n // { dg-do compile }\n \n struct S // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t // { dg-error \"uninitialized\" \"\" { target c++11 } 4 }\n+\t // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int const i; // { dg-message \"should be initialized\" }\n };\n@@ -15,7 +15,7 @@ public:\n };\n \n struct S2 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 17 }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int& ref;   // { dg-message \"should be initialized\" }\n };\n@@ -36,7 +36,7 @@ class C3\n };\n \n struct S4 // { dg-message \"implicitly deleted\" \"\" { target c++11 } }\n-\t  // { dg-error \"uninitialized\" \"\" { target c++11 } 38 }\n+\t  // { dg-error \"uninitialized\" \"\" { target c++11 } .-1 }\n {\n   int const i; // { dg-message \"should be initialized\" }\n };"}, {"sha": "32e8973f22cb0872bd8af41efa19688cb9dd05b8", "filename": "gcc/testsuite/g++.dg/init/pr29571.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr29571.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr29571.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr29571.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,7 +3,7 @@\n struct A\n {\n   static const int i = 0/0 + \"\"; // { dg-warning \"division by zero\" }\n-  // { dg-error \"constant|conversion|initializ\" \"\" { target *-*-* } 5 }\n+  // { dg-error \"constant|conversion|initializ\" \"\" { target *-*-* } .-1 }\n   static const int j = int(i);\n };\n "}, {"sha": "78f66a9ae6fd45d41c6ea69579f3475dcdebb409", "filename": "gcc/testsuite/g++.dg/lookup/duperr1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fduperr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fduperr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fduperr1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,5 +1,5 @@\n // PR c++/29048\n \n class A { int i; }; // { dg-bogus \"is private.*is private\" }\n-// { dg-message \"private\" \"\" { target *-*-* } 3 }\n+// { dg-message \"private\" \"\" { target *-*-* } .-1 }\n class B:public A { B() { A::i=0; } }; // { dg-error \"within this context\" }"}, {"sha": "d2741fb2812be0509cf6648ca414c21a6a15d634", "filename": "gcc/testsuite/g++.dg/lookup/error1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ferror1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ferror1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ferror1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,7 +4,7 @@\n \n namespace N { int i; }\t\t// { dg-message \"N::i\" }\n void foo() { i; }   // { dg-error \"not declared\" }\n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 6 }\n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-1 }\n \n using namespace N;\n void bar() { i; }"}, {"sha": "89c8ed8b142484ee744d533bdbbcd38863be0001", "filename": "gcc/testsuite/g++.dg/lookup/koenig5.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -32,18 +32,18 @@ void g (N::A *a, M::B *b, O::C *c)\n   One (a); // ok\n   One (a, b); // ok\n   One (b); // { dg-error \"3:'One' was not declared\" }\n-  // { dg-message \"suggested alternatives\" \"suggested alternative for One\" { target *-*-* } 34 }\n+  // { dg-message \"suggested alternatives\" \"suggested alternative for One\" { target *-*-* } .-1 }\n \n   Two (c); // ok\n   Two (a, c); // ok\n   Two (a); // { dg-error \"3:'Two' was not declared\" }\n-  // { dg-message \"suggested alternatives\" \"suggested alternative for Two\" { target *-*-* } 39 }\n+  // { dg-message \"suggested alternatives\" \"suggested alternative for Two\" { target *-*-* } .-1 }\n   Two (a, a); // error masked by earlier error\n   Two (b); // error masked by earlier error\n   Two (a, b); // error masked by earlier error\n   \n   Three (b); // ok\n   Three (a, b); // ok\n   Three (a); // { dg-error \"3:'Three' was not declared\" }\n-  // { dg-message \"suggested alternatives\" \"suggested alternative for Three\" { target *-*-* } 47 }\n+  // { dg-message \"suggested alternatives\" \"suggested alternative for Three\" { target *-*-* } .-1 }\n }"}, {"sha": "b4b8d0ef25423f9677bc5ba9f87b7ed21e52c846", "filename": "gcc/testsuite/g++.dg/lookup/pr77549.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr77549.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr77549.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr77549.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -23,7 +23,7 @@ f2 ()\n {\n   using N::bar;\n   baz++;\t\t// { dg-error \"'baz' was not declared in this scope\" }\n-}\t\t\t// { dg-message \"note: suggested alternative: 'bar'\" \"\" { target *-*-* } 25 }\n+}\t\t\t// { dg-message \"note: suggested alternative: 'bar'\" \"\" { target *-*-* } .-1 }\n \n int\n bar ()\n@@ -45,7 +45,7 @@ f3 ()\n {\n   using M::bar;\n   baz ();\t\t// { dg-error \"'baz' was not declared in this scope\" }\n-}\t\t\t// { dg-message \"note: suggested alternative: 'bar'\" \"\" { target *-*-* } 47 }\n+}\t\t\t// { dg-message \"note: suggested alternative: 'bar'\" \"\" { target *-*-* } .-1 }\n \n namespace O\n {\n@@ -71,6 +71,6 @@ f4 ()\n   using O::foo;\n   using P::bar;\n   fooo ();\t\t// { dg-error \"'fooo' was not declared in this scope\" }\n-\t\t\t// { dg-message \"note: suggested alternative: 'foo'\" \"\" { target *-*-* } 73 }\n+\t\t\t// { dg-message \"note: suggested alternative: 'foo'\" \"\" { target *-*-* } .-1 }\n   baz ();\t\t// { dg-error \"'baz' was not declared in this scope\" }\n-}\t\t\t// { dg-message \"note: suggested alternative: 'bar'\" \"\" { target *-*-* } 75 }\n+}\t\t\t// { dg-message \"note: suggested alternative: 'bar'\" \"\" { target *-*-* } .-1 }"}, {"sha": "da98d11cbc9deefdcfb7c48b34bce75a2b50df4a", "filename": "gcc/testsuite/g++.dg/lookup/suggestions1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -2,7 +2,7 @@\n \n namespace N { namespace M { int foo; } } // { dg-message \"N::M::foo\" }\n int f (void) { return N::foo; }\t\t // { dg-error \"not a member\" }\n-// { dg-message \"suggested alternative\" \"missing namespace\" { target *-*-* } 4 }\n+// { dg-message \"suggested alternative\" \"missing namespace\" { target *-*-* } .-1 }\n \n int g (void) { return ::foo; }\t// { dg-error \"not been declared\" }\n-// { dg-message \"suggested alternative\" \"omitted namespace\" { target *-*-* } 7 }\n+// { dg-message \"suggested alternative\" \"omitted namespace\" { target *-*-* } .-1 }"}, {"sha": "7f2a74f8a83bc0055b8ba4540329c8c0d78ea9a1", "filename": "gcc/testsuite/g++.dg/lookup/using16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing16.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -15,4 +15,4 @@ using namespace M;\n using namespace N;\n \n struct ::S s; // { dg-bogus \"ambiguous.*ambiguous\" \"duplicate error\" }\n-// { dg-error \"reference to 'S' is ambiguous|invalid type\" \"\" { target *-*-* } 17 }}\n+// { dg-error \"reference to 'S' is ambiguous|invalid type\" \"\" { target *-*-* } .-1 }}"}, {"sha": "f774021d9b44649e72c24825be7effa5058cbe7b", "filename": "gcc/testsuite/g++.dg/lookup/using7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing7.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,7 +6,7 @@ template <typename T, bool=T::X> struct A\n template <typename T> struct B : A<T> // { dg-error \"incomplete\" }\n {\n   using A<T>::i; // { dg-error \"incomplete\" \"incomplete\" } \n-                 // { dg-error \"using\" \"using\" { target *-*-* } 8 }\n+                 // { dg-error \"using\" \"using\" { target *-*-* } .-1 }\n };\n \n B<void> b; // { dg-message \"required\" }"}, {"sha": "ca59d0233fb42976b59c57d7cf9d4fd15714d692", "filename": "gcc/testsuite/g++.dg/other/anon-union3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon-union3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon-union3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon-union3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,7 +3,7 @@\n class C\n {\n   auto union      // { dg-error \"storage class\" \"\" { target { ! c++11 } } }\n-    {\t\t  // { dg-error \"auto\" \"\" { target c++11 } 5 }\n+    {\t\t  // { dg-error \"auto\" \"\" { target c++11 } .-1 }\n       int a;\n     };            // { dg-error \"multiple types\" \"\" { target c++11 } }\n   register union  // { dg-error \"storage class\" }"}, {"sha": "95a2fa6067cc3439898d32ef79c1c8bfcadffa90", "filename": "gcc/testsuite/g++.dg/other/array2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile }\n \n int x[1/0];  // { dg-warning \"division by zero\" }\n-             // { dg-error \"constant\" \"constant\" { target *-*-* } 4 }\n+             // { dg-error \"constant\" \"constant\" { target *-*-* } .-1 }\n "}, {"sha": "c04e68750a97d2f193eb979646610917f13127cf", "filename": "gcc/testsuite/g++.dg/other/error13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror13.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,7 +3,7 @@\n struct A\t\t\t// { dg-message \"note\" }\n {\n   A(void x); // { dg-error \"invalid use|incomplete type|candidates\" }\n-  // { dg-message \"\" \"match candidate text\" { target *-*-* } 5 }\n+  // { dg-message \"\" \"match candidate text\" { target *-*-* } .-1 }\n };\n \n struct B : A {}; // { dg-error \"no matching function for call|deleted\" }"}, {"sha": "f5ced1adfdc59ff5a4e02ad65638507ab719cc95", "filename": "gcc/testsuite/g++.dg/other/error34.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,4 +3,4 @@\n // { dg-options \"\" }\n \n S () : str(__PRETTY_FUNCTION__) {}\t// { dg-error \"forbids declaration\" \"decl\" }\n-// { dg-error \"only constructors\" \"constructor\" { target *-*-* } 5 }\n+// { dg-error \"only constructors\" \"constructor\" { target *-*-* } .-1 }"}, {"sha": "f2b324b1d45a6de9ef3cadc539a620e44363a1c2", "filename": "gcc/testsuite/g++.dg/overload/builtin1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fbuiltin1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fbuiltin1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fbuiltin1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -13,5 +13,5 @@ int main ()\n {\n   A a;\n   a + a;\t\t\t// { dg-error \"ambiguous\" \"ambiguous\" }\n-  // { dg-message \"operator\" \"match candidate text\" { target *-*-* } 15 }\n+  // { dg-message \"operator\" \"match candidate text\" { target *-*-* } .-1 }\n }"}, {"sha": "abcd7413b1f881aeabe8215969d9f137b0b38835", "filename": "gcc/testsuite/g++.dg/overload/conv-op1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fconv-op1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fconv-op1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fconv-op1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,7 +11,7 @@ void f()\n {\n   const int i = 42;\n   A()(i);\t\t\t// { dg-message \"<conversion>\" }\n-  // { dg-error \"qualifiers\" \"\" { target *-*-* } 13 }\n+  // { dg-error \"qualifiers\" \"\" { target *-*-* } .-1 }\n }\n \n // { dg-prune-output \"no match\" }"}, {"sha": "0eb66cb26e241a4a9f2c05a4a356ad7624e12e41", "filename": "gcc/testsuite/g++.dg/overload/error3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -35,7 +35,7 @@ class MainWindow  {\n void MainWindow::update_status(Result result) {\n     switch (result) {\n         status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color::Color(\"green\")); // { dg-error \"\" }\n-\t// { dg-warning \"statement will never be executed\" \"\" { target *-*-* } 37 }\n+\t// { dg-warning \"statement will never be executed\" \"\" { target *-*-* } .-1 }\n         status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color::Color(\"red\")); // { dg-error \"\" }\n         status_label.set_text(\"Out of memory\");\n     }"}, {"sha": "3c1c293560b52fc5aadbdf4cf0a0b5cc46f1f5d9", "filename": "gcc/testsuite/g++.dg/overload/koenig1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -14,6 +14,6 @@ void g ()\n   B *bp;\n   N::A *ap;\n   f (bp);\t\t\t// { dg-error \"3:'f' was not declared\" }\n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 16 }\n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-1 }\n   f (ap);\n }"}, {"sha": "329775aa87213c1ad679fd01084b755fc45ceda7", "filename": "gcc/testsuite/g++.dg/overload/operator5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -13,4 +13,4 @@ inline bool equalPossiblyIgnoringCase(const String& a,\n                                       const String& b,\n                                       bool ignoreCase) {\n   return ignoreCase ? equalIgnoringCase(a, b) : (a == b); } // { dg-error \"ambiguous\" }\n-// { dg-message \"note\" \"note\" { target *-*-* } 15 }\n+// { dg-message \"note\" \"note\" { target *-*-* } .-1 }"}, {"sha": "8ff1b3d657ccb5f0f05b2751bf8895d83af59b61", "filename": "gcc/testsuite/g++.dg/overload/template5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ftemplate5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ftemplate5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ftemplate5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -9,7 +9,7 @@ int high(T a, T b, T c) { return a + b + c; } // { dg-message \"template\" }\n int test (void)\n {\n   low (5, 6);\t\t\t// { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|3 arguments, 2 provided)\" \"\" { target *-*-* } 11 }\n+  // { dg-message \"(candidate|3 arguments, 2 provided)\" \"\" { target *-*-* } .-1 }\n   high (5, 6, 7, 8);\t\t// { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|3 arguments, 4 provided)\" \"\" { target *-*-* } 13 }\n+  // { dg-message \"(candidate|3 arguments, 4 provided)\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "b4b5c1c48d90f2a0fcd5e157e309c17dab1ce2fc", "filename": "gcc/testsuite/g++.dg/overload/unknown1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Funknown1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Funknown1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Funknown1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,5 +6,5 @@ template <typename T> void bar(T f); // { dg-message \"note\" }\n \n void baz() {\n   bar(foo); // { dg-error \"<unresolved overloaded function type>\" }\n-  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 8 }\n+  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "b1d52f7cf437c645a8b3fb995b3aa09e87a5df4d", "filename": "gcc/testsuite/g++.dg/overload/using2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fusing2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fusing2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fusing2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -47,11 +47,11 @@ using std::C1;\n \n   void abort (void) throw (); // { dg-message \"previous\" }\n   void _exit (int) throw (); // { dg-error \"conflicts\" \"conflicts\" }\n-                             // { dg-message \"void _exit\" \"_exit\" { target *-*-* } 49 }\n+                             // { dg-message \"void _exit\" \"_exit\" { target *-*-* } .-1 }\n \n   extern \"C\" void c1 (void) throw ();\n   void C1 (void) throw (); // { dg-error \"conflicts\" \"conflicts\" }\n-                           // { dg-message \"void C1\" \"C1\" { target *-*-* } 53 }\n+                           // { dg-message \"void C1\" \"C1\" { target *-*-* } .-1 }\n \n   extern \"C\" void c2 (void) throw ();\n   void C2 (void) throw (); // { dg-message \"previous\" }"}, {"sha": "b3a67b76b58276d1ed52904c855b74280640a611", "filename": "gcc/testsuite/g++.dg/parse/constructor1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstructor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstructor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstructor1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -2,7 +2,7 @@\n // { dg-options \"-fshow-column\" }\n \n ACE_Process_Descriptor::ACE_Process_Descriptor () :\n-  // { dg-error \"does not name a type\" \"no type\" { target *-*-* } 4 }\n+  // { dg-error \"does not name a type\" \"no type\" { target *-*-* } .-1 }\n   process_ (0)\n {\n }"}, {"sha": "4b2384cb9f298e0bfc6ea7ef54fef1fd1e72fb01", "filename": "gcc/testsuite/g++.dg/parse/crash36.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash36.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -5,7 +5,7 @@\n template <typename... T> struct A\t// { dg-warning \"variadic templates\" }\n {\n   static T &t;\t\t\t\t// { dg-error \"not expanded with\" \"not expanded\" }\n-\t\t\t\t\t// { dg-message \"T\" \"T\" { target *-*-* } 7 }\n+\t\t\t\t\t// { dg-message \"T\" \"T\" { target *-*-* } .-1 }\n   static const int i = sizeof (++t);\t// { dg-error \"was not declared in this scope\" }\n };\n "}, {"sha": "c2e2d5d7ee3a01875837dff5c5f06f6a0cdade87", "filename": "gcc/testsuite/g++.dg/parse/crash63.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash63.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash63.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash63.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,5 +6,5 @@ namespace std\n   template <class E> class initializer_list {};\n   template <int N> struct D { D(initializer_list<int>) {} };\n   D<0> d {1, 2, 3};  // { dg-error \"constructor|no matching\" }\n-  // { dg-warning \"initializer list\" \"\" { target *-*-* } 8 }\n+  // { dg-warning \"initializer list\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "d118c19deb8985fd2167dd080e1aeefd2f4a0c48", "filename": "gcc/testsuite/g++.dg/parse/error11.C", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror11.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -17,33 +17,33 @@ struct Foo\n \n   void method(void) {\n     typename Foo<::B>::template Nested<::B> n; // { dg-error \"17:'<::' cannot begin\" \"17-begin\" { target { ! c++11 } } }\n-// { dg-message \"17:'<:' is an alternate spelling\" \"17-alt\" { target { ! c++11 } } 19 }\n-// { dg-error \"39:'<::' cannot begin\" \"39-begin\" { target { ! c++11 } } 19 }\n-// { dg-message \"39:'<:' is an alternate spelling\" \"39-alt\" { target { ! c++11 } } 19 }\n+// { dg-message \"17:'<:' is an alternate spelling\" \"17-alt\" { target { ! c++11 } } .-1 }\n+// { dg-error \"39:'<::' cannot begin\" \"39-begin\" { target { ! c++11 } } .-2 }\n+// { dg-message \"39:'<:' is an alternate spelling\" \"39-alt\" { target { ! c++11 } } .-3 }\n     n.template Nested<B>::method();\n     n.template Nested<::B>::method();  // { dg-error \"22:'<::' cannot begin\" \"error\" { target { ! c++11 } } }\n-// { dg-message \"22:'<:' is an alternate\" \"note\" { target { ! c++11 } } 24 }\n+// { dg-message \"22:'<:' is an alternate\" \"note\" { target { ! c++11 } } .-1 }\n     Nested<B>::method();\n     Nested<::B>::method(); // { dg-error \"11:'<::' cannot begin\" \"error\" { target { ! c++11 } } }\n-// { dg-message \"11:'<:' is an alternate\" \"note\" { target { ! c++11 } } 27 }\n+// { dg-message \"11:'<:' is an alternate\" \"note\" { target { ! c++11 } } .-1 }\n   }\n };\n \n template <int N> struct Foo2 {};\n template struct Foo2<::B>;  // { dg-error \"21:'<::' cannot begin\" \"begin\" { target { ! c++11 } } }\n-// { dg-message \"21:'<:' is an alternate\" \"alt\" { target { ! c++11 } } 33 }\n-// { dg-message \"25:type/value mismatch\" \"mismatch\" { target *-*-* } 33 }\n-// { dg-message \"25:expected a constant\" \"const\" { target *-*-* } 33 }\n+// { dg-message \"21:'<:' is an alternate\" \"alt\" { target { ! c++11 } } .-1 }\n+// { dg-message \"25:type/value mismatch\" \"mismatch\" { target *-*-* } .-2 }\n+// { dg-message \"25:expected a constant\" \"const\" { target *-*-* } .-3 }\n \n int value = 0;\n \n void func(void)\n {\n   Foo<::B> f; // { dg-error \"cannot begin\" \"begin\" { target { ! c++11 } } }\n-// { dg-message \"alternate spelling\" \"alt\" { target { ! c++11 } } 42 }\n+// { dg-message \"alternate spelling\" \"alt\" { target { ! c++11 } } .-1 }\n   f.Foo<B>::method();\n   f.Foo<::B>::method(); // { dg-error \"8:cannot begin\" \"begin\" { target { ! c++11 } } }\n-// { dg-message \"8:alternate spelling\" \"alt\" { target { ! c++11 } } 45 }\n+// { dg-message \"8:alternate spelling\" \"alt\" { target { ! c++11 } } .-1 }\n \n   // Check cases where we the token sequence is the correct one, but there\n   //  was no digraph or whitespaces in the middle, so we should not emit\n@@ -62,7 +62,7 @@ void func(void)\n }\n \n template struct Foo<::B>; // { dg-error \"20:'<::' cannot begin\" \"begin\" { target { ! c++11 } } }\n-// { dg-message \"20:is an alternate\" \"alt\" { target { ! c++11 } } 64 }\n+// { dg-message \"20:is an alternate\" \"alt\" { target { ! c++11 } } .-1 }\n \n // On the first error message, an additional note about the use of \n //  -fpermissive should be present"}, {"sha": "f146a6d306f96d34cca095bf0072c70ec8a8a3bf", "filename": "gcc/testsuite/g++.dg/parse/error12.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror12.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -9,5 +9,5 @@ template <class A>\n struct Foo {};\n \n Foo<::B> foo;   // { dg-bogus \"error\" \"error in place of warning\" { target { ! c++11 } } }\n-// { dg-warning \"4: '<::' cannot begin a template-argument list\" \"warning <::\" { target { ! c++11 } } 11 }\n-// { dg-message \"4:'<:' is an alternate spelling for '.'. Insert whitespace between '<' and '::'\" \"note <:\" { target { ! c++11 } } 11 }\n+// { dg-warning \"4: '<::' cannot begin a template-argument list\" \"warning <::\" { target { ! c++11 } } .-1 }\n+// { dg-message \"4:'<:' is an alternate spelling for '.'. Insert whitespace between '<' and '::'\" \"note <:\" { target { ! c++11 } } .-2 }"}, {"sha": "e87ce83201d95ad877024a752ad871b8ef23ccde", "filename": "gcc/testsuite/g++.dg/parse/error14.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror14.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -20,5 +20,5 @@ struct X\n \t\t  //    }\n \n }; // { dg-error \"2:expected '.' at end of input\" \"at end of input\" }\n-   // { dg-error \"1:expected primary-expression before '.' token\" \"primary\" { target *-*-* } 22 }\n-   // { dg-error \"1:expected unqualified-id\" \"unqualified-id\" { target *-*-* } 22 }\n+   // { dg-error \"1:expected primary-expression before '.' token\" \"primary\" { target *-*-* } .-1 }\n+   // { dg-error \"1:expected unqualified-id\" \"unqualified-id\" { target *-*-* } .-2 }"}, {"sha": "0675730461ff1574015a7bd990ac24ad61d0c3c5", "filename": "gcc/testsuite/g++.dg/parse/error2.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,7 +8,7 @@ int func(double);\n template <int>\n struct Foo {};\n \n-Foo<func(g)> f; // { dg-error \"5:'int func.double.' cannot appear in a constant-expression\" \"func double\" { target *-*-* } 11 }\n-// { dg-error \"10:'g' cannot appear in a constant-expression\" \"g\" { target *-*-* } 11 }\n-// { dg-error \"11:a function call cannot appear in a constant-expression\" \"call\" { target *-*-* } 11 }\n-// { dg-error \"12:template argument 1 is invalid\" \"invalid template argument\" { target *-*-* } 11 }\n+Foo<func(g)> f; // { dg-error \"5:'int func.double.' cannot appear in a constant-expression\" \"func double\" { target *-*-* } . }\n+// { dg-error \"10:'g' cannot appear in a constant-expression\" \"g\" { target *-*-* } .-1 }\n+// { dg-error \"11:a function call cannot appear in a constant-expression\" \"call\" { target *-*-* } .-2 }\n+// { dg-error \"12:template argument 1 is invalid\" \"invalid template argument\" { target *-*-* } .-3 }"}, {"sha": "8c717d7e81113473faf13ac6ebcc6ae0eb2bc926", "filename": "gcc/testsuite/g++.dg/parse/error21.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror21.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,6 +8,6 @@ void foo()\n   // Check that we do not complain about an unused\n   // compiler-generated variable.\n   A& = a; // { dg-error \"6:expected unqualified-id before '=' token\" \"6\" }\n-  // { dg-error \"8:'a' was not declared in this scope\" \"8\" { target *-*-* } 10 }\n+  // { dg-error \"8:'a' was not declared in this scope\" \"8\" { target *-*-* } .-1 }\n }\n "}, {"sha": "95f299163e9eb8a1bcf0600cff2734ad1299cfc2", "filename": "gcc/testsuite/g++.dg/parse/error26.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror26.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,11 +4,11 @@\n void foo()\n {\n   if (({int c[2];})) ; // { dg-error \"7:ISO C.. forbids\" \"7\" }\n-  // { dg-error \"17:could not convert\" \"17\" { target *-*-* } 6 }\n+  // { dg-error \"17:could not convert\" \"17\" { target *-*-* } .-1 }\n }\n \n void bar()\n {\n   if (({})); // { dg-error \"7:ISO C.. forbids\" \"7\" }\n-  // { dg-error \"11:could not convert\" \"11\" { target *-*-* } 12 }\n+  // { dg-error \"11:could not convert\" \"11\" { target *-*-* } .-1 }\n }"}, {"sha": "46080b4835dc90793a68464474bbd988e5a31412", "filename": "gcc/testsuite/g++.dg/parse/error36.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror36.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -12,15 +12,15 @@ void f(T t)\n {\n   typedef A<T>::foo type;\t// { dg-error \"typename\" }\n   A<T>::bar b;\t\t\t// { dg-error \"typename\" \"typename\" }\n-} // { dg-error \"expected ';'\" \"expected\" { target *-*-* } 14 }\n+} // { dg-error \"expected ';'\" \"expected\" { target *-*-* } .-1 }\n \n // PR c++/36353\n template <class T> struct B\n {\n   void f()\n   {\n     A<T>::baz z;\t\t// { dg-error \"typename\" \"typename\" }\n-  } // { dg-error \"expected ';'\" \"expected\" { target *-*-* } 22 }\n+  } // { dg-error \"expected ';'\" \"expected\" { target *-*-* } .-1 }\n };\n \n // PR c++/40738"}, {"sha": "84d6e25e766c5273c74d3451df2061723c3a8cbc", "filename": "gcc/testsuite/g++.dg/parse/friend12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend12.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,5 +3,5 @@\n struct A\n {\n   friend int i = 0;  // { dg-error \"cannot be declared friend\" }\n-// { dg-error \"non-static data member\" \"\" { target { ! c++11 } } 5 }\n+// { dg-error \"non-static data member\" \"\" { target { ! c++11 } } .-1 }\n };"}, {"sha": "e07ed49de8a9b50c0e3fca440a49dd9dabfc8111", "filename": "gcc/testsuite/g++.dg/parse/invalid-op1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Finvalid-op1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Finvalid-op1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Finvalid-op1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -7,7 +7,7 @@ template <int I> struct A\n     template <int> struct B\n     {\n         enum { e = I * A<I-1>::B }; // { dg-error \"dependent-name\" \"depname\" }\n-         // { dg-message \"note\" \"note\" { target *-*-* } 9 }\n+         // { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n     };\n };\n "}, {"sha": "fcc3aa0c3ff414fe712e4265d663f36d8ceeb966", "filename": "gcc/testsuite/g++.dg/parse/missing-template1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fmissing-template1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fmissing-template1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fmissing-template1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -13,8 +13,8 @@ template <typename T> struct A\n template <typename T> void foo()\n {\n     typedef typename A<T>::B<T>::X Y; // { dg-error \"non-template\" \"non\" }\n-    // { dg-error \"not declare\" \"decl\" { target *-*-* } 15 }\n-    // { dg-message \"note\" \"note\" { target *-*-* } 15 }\n+    // { dg-error \"not declare\" \"decl\" { target *-*-* } .-1 }\n+    // { dg-message \"note\" \"note\" { target *-*-* } .-2 }\n }\n \n void bar()"}, {"sha": "11e1063e12a76479b4a0b5e752a84cc79a82cd13", "filename": "gcc/testsuite/g++.dg/parse/parser-pr28152-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152-2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,4 +8,4 @@ main (void)\n \n   z = __complex__ (1.90000007326203904e+19, 0.0);   // { dg-error \"expected primary-expression before '__complex__'\" \"primary-expression\" } \n   z = __complex__ (1.0e+0, 0.0) / z;    // { dg-error \"expected primary-expression before '__complex__'\" \"primaty-expression\" } \n-  // { dg-error \"at end of input\" \"end\" { target *-*-* } 10 }\n+  // { dg-error \"at end of input\" \"end\" { target *-*-* } .-1 }"}, {"sha": "ceefee3790c56101e1c094e0065b5f168d658cdd", "filename": "gcc/testsuite/g++.dg/parse/parser-pr28152.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,4 +8,4 @@ main (void)\n \n   z = _Complex (1.90000007326203904e+19, 0.0);   // { dg-error \"expected primary-expression before '_Complex'\" \"primary-expression\" } \n   z = _Complex (1.0e+0, 0.0) / z;    // { dg-error \"expected primary-expression before '_Complex'\" \"primary-expression\" } \n-  // { dg-error \"at end of input\" \"end\" { target *-*-* } 10 }\n+  // { dg-error \"at end of input\" \"end\" { target *-*-* } .-1 }"}, {"sha": "c8fe5c658f1811afb0b123b893e22719b2022f17", "filename": "gcc/testsuite/g++.dg/parse/pr16696-permissive.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr16696-permissive.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr16696-permissive.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr16696-permissive.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -12,6 +12,6 @@ int main () {\n   x++; // { dg-warning \"trying prefix operator\" } \n \n   y++; // { dg-warning \"trying prefix operator\" } \n-  // { dg-error \"no match\" \"\" { target *-*-* } 14 }\n+  // { dg-error \"no match\" \"\" { target *-*-* } .-1 }\n } \n "}, {"sha": "ae15b43e5adae530bc6133c6c6031fa11f95a477", "filename": "gcc/testsuite/g++.dg/parse/pr16696.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr16696.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr16696.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr16696.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -10,8 +10,8 @@ int main () {\n   X x; \n   Y y;\n   x++; // { dg-bogus \"trying prefix operator\" } \n-  // { dg-error \"fpermissive\" \"\" { target *-*-* } 12 }\n+  // { dg-error \"fpermissive\" \"\" { target *-*-* } .-1 }\n   y++; // { dg-bogus \"trying prefix operator\" } \n-  // { dg-error \"fpermissive\" \"\" { target *-*-* } 14 }\n+  // { dg-error \"fpermissive\" \"\" { target *-*-* } .-1 }\n } \n "}, {"sha": "7643fd1b35ec1c9e4dc624a33eabe7877ae9736c", "filename": "gcc/testsuite/g++.dg/parse/pr69628.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr69628.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr69628.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr69628.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -2,4 +2,4 @@\n // { dg-do compile }\n \n 0''; // { dg-error \"empty character constant\" }\n-// { dg-error \"expected unqualified-id before numeric constant\" \"\" { target *-*-* } 4 }\n+// { dg-error \"expected unqualified-id before numeric constant\" \"\" { target *-*-* } .-1 }"}, {"sha": "4b7a0457eddb1848c65be5881e9d361085a1c601", "filename": "gcc/testsuite/g++.dg/parse/ret-type2.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fret-type2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fret-type2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fret-type2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,10 +1,10 @@\n struct S {} f(); // { dg-error \"return\" \"err\" }\n-// { dg-message \"note\" \"note\" { target *-*-* } 1 }\n+// { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n struct T {} *g(); // { dg-error \"return\" }\n-// { dg-message \"note\" \"note\" { target *-*-* } 3 }\n+// { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n struct U {} h() {} // { dg-error \"return\" }\n-// { dg-message \"note\" \"note\" { target *-*-* } 5 }\n+// { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n struct V {} *i() {} // { dg-error \"return\" }\n-// { dg-message \"note\" \"note\" { target *-*-* } 7 }\n+// { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n struct W {} (*p) (); // { dg-error \"return\" }\n-// { dg-message \"note\" \"note\" { target *-*-* } 9 }\n+// { dg-message \"note\" \"note\" { target *-*-* } .-1 }"}, {"sha": "44a98baa2f441cb909ffb42c1cfa0cccc2d5c385", "filename": "gcc/testsuite/g++.dg/parse/specialization1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fspecialization1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fspecialization1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fspecialization1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,4 +4,4 @@\n \n template <typename T> class A;\n template <typename T> class A<T>::B; // { dg-error \"declaration\" \"err\" }\n-// { dg-warning \"declaration\" \"warn\" { target *-*-* } 6 }\n+// { dg-warning \"declaration\" \"warn\" { target *-*-* } .-1 }"}, {"sha": "c284a5ee040dd3d4fd16e648c53e709d84d4b893", "filename": "gcc/testsuite/g++.dg/parse/template3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -14,6 +14,6 @@ struct X : Outer<b>::template Inner<T>\n \n template <bool b, typename T>\n struct Y : Outer<b>::Inner<T> {}; // { dg-error \"used as template\" \"temp\" }\n-// { dg-error \"expected\" \"exp\" { target *-*-* } 16 }\n-// { dg-message \"note\" \"note\" { target *-*-* } 16 }\n+// { dg-error \"expected\" \"exp\" { target *-*-* } .-1 }\n+// { dg-message \"note\" \"note\" { target *-*-* } .-2 }\n "}, {"sha": "fb6cfba7157bd162e02ec8bf5fca86a710e2f5e3", "filename": "gcc/testsuite/g++.dg/parse/template9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate9.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,6 +1,6 @@\n template <typename T> \n void f() {\n   g(); // { dg-error \"must be available\" \"err\" }\n-       // { dg-message \"note\" \"note\" { target *-*-* } 3 }\n+       // { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n   h(3); // { dg-error \"must be available\" }\n }"}, {"sha": "22f300707c8d5a6f28abd06c7a5abd458c24da41", "filename": "gcc/testsuite/g++.dg/parse/typename11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename11.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,6 +11,6 @@ template <int dim> struct Y : X<dim> {\n // note: I is nested type in X, not Y!\n template <int dim>\n Y<dim>::I::I () {}\t\t// { dg-error \"dependent typedef\" \"typedef\" }\n-// { dg-error \"no type|dependent type\" \"no type\" { target *-*-* } 13 }\n+// { dg-error \"no type|dependent type\" \"no type\" { target *-*-* } .-1 }\n \n template struct Y<1>;"}, {"sha": "d68219a124e94e6a974424ebc2ebcc6ee0f7e516", "filename": "gcc/testsuite/g++.dg/plugin/attribute_plugin-test-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin-test-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin-test-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin-test-1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -5,7 +5,7 @@ void normal_func (char __attribute__((user(\"param\"))) c, char);\n void normal_func (char c, char __attribute__((user(\"param\"))) c2) \n {\n } // { dg-warning \"attribute 'user' on param 'c' of function normal_func\" }\n-// { dg-warning \"attribute 'user' on param 'c2' of function normal_func\" \"\" { target *-*-* } 7 }\n+// { dg-warning \"attribute 'user' on param 'c2' of function normal_func\" \"\" { target *-*-* } .-1 }\n \n class Foo {\n   void method (char __attribute__((user(\"param\"))) c);"}, {"sha": "f89d1e5c93bfbc6d2edd05c777dfe8d2e21e9ac6", "filename": "gcc/testsuite/g++.dg/pr45330.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr45330.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr45330.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr45330.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -32,6 +32,6 @@ namespace E\n int bar()\n {\n   return foo;\t\t\t// { dg-error \"was not declared\" }\n-  // { dg-message \"maximum limit of 4 namespaces\" \"maximum limit\" { target *-*-* } 34 }\n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 34 }\n+  // { dg-message \"maximum limit of 4 namespaces\" \"maximum limit\" { target *-*-* } .-1 }\n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-2 }\n }"}, {"sha": "25f241ff4bd6512924c3ae4d74c94845a91f5031", "filename": "gcc/testsuite/g++.dg/rtti/typeid6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ftypeid6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ftypeid6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ftypeid6.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,5 +8,5 @@ namespace std\n template<int> void foo()\n {\n   !typeid(void); // { dg-error \"!typeid\\\\(void\\\\)|candidate is\" }\n-  // { dg-message \"\" \"match candidate text\" { target *-*-* } 10 }\n+  // { dg-message \"\" \"match candidate text\" { target *-*-* } .-1 }\n }"}, {"sha": "504992aa541e38ec458773c6ba582a5eb3f21540", "filename": "gcc/testsuite/g++.dg/spellcheck-fields.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-fields.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-fields.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-fields.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -38,7 +38,7 @@ int test4 (struct foo *ptr)\n int test5 (struct foo *ptr)\n {\n   return ptr->this_is_unlike_any_of_the_fields;   /* { dg-bogus \"did you mean\" } */\n-  /* { dg-error \"has no member named\" \"\" { target *-*-* } 40 } */\n+  /* { dg-error \"has no member named\" \"\" { target *-*-* } .-1 } */\n }\n \n union u"}, {"sha": "01bcf78781e8bf5471bce4f6e79ef039126ac430", "filename": "gcc/testsuite/g++.dg/spellcheck-typenames.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-typenames.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-typenames.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-typenames.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -70,7 +70,7 @@ int64 i; // { dg-error \"1: 'int64' does not name a type; did you mean 'int64_t'?\n /* Verify that gcc doesn't offer nonsensical suggestions.  */\n \n nonsensical_suggestion_t var; /* { dg-bogus \"did you mean\" } */\n-/* { dg-error \"'nonsensical_suggestion_t' does not name a type\" \"\" { target { *-*-* } } 72 } */\n+/* { dg-error \"'nonsensical_suggestion_t' does not name a type\" \"\" { target { *-*-* } } .-1 } */\n /* { dg-begin-multiline-output \"\" }\n  nonsensical_suggestion_t var;\n  ^~~~~~~~~~~~~~~~~~~~~~~~"}, {"sha": "036543964479ca59507239f5ccd2ff72ab91fca9", "filename": "gcc/testsuite/g++.dg/tc1/dr108.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr108.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr108.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr108.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,6 +8,6 @@ template <class T> struct S {\n   };\n   struct I2 : public I1 {\n     X x;    // { dg-error \"does not name a type\" \"name\" }\n-\t    // { dg-message \"note\" \"note\" { target *-*-* } 10 }\n+\t    // { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n   };\n };"}, {"sha": "6b656491e816495315bea8a961fd7b8dc308e587", "filename": "gcc/testsuite/g++.dg/tc1/dr147.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr147.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr147.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr147.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -21,7 +21,7 @@ void A::f()\n void f()\n {\n   A::A a; // { dg-error \"constructor\" \"constructor\" }\n-} // { dg-error \"\" \"error cascade\" { target *-*-* } 23 } error cascade\n+} // { dg-error \"\" \"error cascade\" { target *-*-* } .-1 } error cascade\n }\n \n namespace N2 {"}, {"sha": "4575f2513d6bfc35f96d590fecdd091515ed4cfb", "filename": "gcc/testsuite/g++.dg/template/arg7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg7.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,7 +3,7 @@\n template<typename T> struct A\n {\n   template<template<T> class> struct B {}; // { dg-error \"void|mismatch|expected\" }\n-  // { dg-bogus \"not supported\" \"\" { target *-*-* } 5 }\n+  // { dg-bogus \"not supported\" \"\" { target *-*-* } .-1 }\n   template<T> struct C;\t\t\t   // { dg-error \"void\" }\n   B<C> b;\n };"}, {"sha": "b9aadf7b596661eebbd1542a44391650993b49bf", "filename": "gcc/testsuite/g++.dg/template/conv11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconv11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconv11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconv11.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -7,5 +7,5 @@ struct A\n int main()\n {\n   A().operator int();\t\t// { dg-error \"operator int\" }\n-  // { dg-message \"(candidate|mismatched types)\" \"candidate note\" { target *-*-* } 9 }\n+  // { dg-message \"(candidate|mismatched types)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "6e0fb39312143ae99e31a50bc5a56fcbc8d712ef", "filename": "gcc/testsuite/g++.dg/template/crash13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash13.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -13,7 +13,7 @@ template <typename T> struct C\n {\n     typedef typename A<T>::B X;\n     X::Y;\t\t\t// { dg-error \"not a base type\" }\n-// { dg-warning \"deprecated\" \"\" { target *-*-* } 15 }\n+// { dg-warning \"deprecated\" \"\" { target *-*-* } .-1 }\n };\n \n C<void> c;"}, {"sha": "eac5d3cb195564ff49b734d71467baadf589484b", "filename": "gcc/testsuite/g++.dg/template/crash55.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash55.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,7 +1,7 @@\n //PR c++/27668\n \n template<typename class T, T = T()> // { dg-error \"nested-name-specifier|two or more|valid type\" }\n-// { dg-error \"cast\" \"\" { target c++98_only } 3 }\n+// { dg-error \"cast\" \"\" { target c++98_only } .-1 }\n struct A {};\n \n template<int> void foo(A<int>);\t// { dg-error \"template argument 2\" \"\" { target c++98_only } }"}, {"sha": "85d91cfcb6fa8d4d71269cc0cf884aa6c95aa3f9", "filename": "gcc/testsuite/g++.dg/template/dependent-expr5.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -40,12 +40,12 @@ struct foo {\n       bind (&bar::baikt);\n \n       bind (&barf); // { dg-error \"no matching function\" }\n-      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 42 }\n+      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n       bind (&foo::barf); // { dg-error \"no matching function\" }\n-      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 44 }\n+      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n \n       bindm (&barf); // { dg-error \"no matching function\" }\n-      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 47 }\n+      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n       bindm (&foo::barf);\n \n       bindn (&barf);\n@@ -56,12 +56,12 @@ struct foo {\n \n \n       bind (&bark); // { dg-error \"no matching function\" }\n-      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 58 }\n+      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n       bind (&bar::bark); // { dg-error \"no matching function\" }\n-      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 60 }\n+      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n \n       bindm (&bark); // { dg-error \"no matching function\" }\n-      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 63 }\n+      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n       bindm (&bar::bark);\n \n       bindn (&bark);\n@@ -92,12 +92,12 @@ struct foo {\n       bind (&barT::baikt);\n \n       bind (&barf); // { dg-error \"no matching function\" }\n-      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 94 }\n+      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n       bind (&foo::barf); // { dg-error \"no matching function\" }\n-      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 96 }\n+      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n \n       bindm (&barf); // { dg-error \"no matching function\" }\n-      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 99 }\n+      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n       bindm (&foo::barf);\n \n       bindn (&barf);\n@@ -108,12 +108,12 @@ struct foo {\n \n \n       bind (&bark); // { dg-error \"no matching function\" }\n-      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 110 }\n+      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n       bind (&barT::bark); // { dg-error \"no matching function\" }\n-      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 112 }\n+      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n \n       bindm (&bark); // { dg-error \"no matching function\" }\n-      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 115 }\n+      // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n       bindm (&barT::bark);\n \n       bindn (&bark);"}, {"sha": "30a693f84d123e87c3ea375abc731ef85050477c", "filename": "gcc/testsuite/g++.dg/template/error17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror17.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -5,5 +5,5 @@ void\n foo()\n {\n   union { struct { }; }; // { dg-error \"prohibits anonymous struct\" \"anon\" }\n-  // { dg-error \"not inside\" \"not inside\" { target *-*-* } 7 }\n+  // { dg-error \"not inside\" \"not inside\" { target *-*-* } .-1 }\n }"}, {"sha": "f71496d177d4c6aa290d28beca26887940537a6b", "filename": "gcc/testsuite/g++.dg/template/error33.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror33.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -7,6 +7,6 @@ template<int> struct A\n };\n \n template<int> int A<0>::i(0);\t// { dg-error \"template\" \"error\" }\n-// { dg-message \"note\" \"note\" { target *-*-* } 9 }\n+// { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n \n A<0> a;"}, {"sha": "9d76561aa02102d71620cfb11882c3ace776d090", "filename": "gcc/testsuite/g++.dg/template/error4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror4.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,4 +6,4 @@ template<class T> struct C1\n \n template<class T, class U>\n void foo(typename C1<T>::C2<U>::Type *) { } // { dg-error \"template\" \"error \" }\n-// { dg-message \"note\" \"note\" { target *-*-* } 8 }\n+// { dg-message \"note\" \"note\" { target *-*-* } .-1 }"}, {"sha": "f85470bf4d1b2f404a6be4dbae028aa71a70f974", "filename": "gcc/testsuite/g++.dg/template/error50.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror50.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror50.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror50.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -16,4 +16,4 @@ int main()\n {\n   D d;\n   f(d);  // { dg-error \"no matching\" }\n-}        // { dg-message \"'A<T>' is an ambiguous base\" \"\" { target *-*-* } 18 }\n+}        // { dg-message \"'A<T>' is an ambiguous base\" \"\" { target *-*-* } .-1 }"}, {"sha": "221003477a4f53e3653b9c4938c44d859ad706c8", "filename": "gcc/testsuite/g++.dg/template/error53.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror53.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror53.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror53.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -10,4 +10,4 @@ void f()\n {\n   S<1000> t;\n   g(t);         // { dg-error \"no matching\" }\n-}  // { dg-message \"mismatched types 'long long int' and 'int'\" \"\" { target *-*-* } 12 }\n+}  // { dg-message \"mismatched types 'long long int' and 'int'\" \"\" { target *-*-* } .-1 }"}, {"sha": "eccb60b852aed2ca8c8c60957aaeaa8bb0b932f4", "filename": "gcc/testsuite/g++.dg/template/friend.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -26,5 +26,5 @@ int main()\n {\n   s<int>::t y;\n   cout << y; // { dg-error \"\" }\n-  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 28 }\n+  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "0116f23d94523aa88dfb327d4b7e0fe22407d50d", "filename": "gcc/testsuite/g++.dg/template/func2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffunc2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffunc2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffunc2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,8 +4,8 @@ typedef void (*fptr)();\n fptr zeroptr = 0;\n template<typename T, fptr F> struct foo { };\n template<typename T> struct foo<T,zeroptr> { };\n-// { dg-error \"not a valid template argument\" \"not valid\" { target *-*-* } 6 } \n-// { dg-message \"must be the address\" \"must be the address \" { target *-*-* } 6 }\n+// { dg-error \"not a valid template argument\" \"not valid\" { target *-*-* } .-1 } \n+// { dg-message \"must be the address\" \"must be the address \" { target *-*-* } .-2 }\n \n // The rest is needed to trigger the ICE in 4.0 to 4.3:\n void f() { }"}, {"sha": "94c19be56a29e3b91e608a818c61813bbab6716a", "filename": "gcc/testsuite/g++.dg/template/local6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal6.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -5,7 +5,7 @@ template <class T> struct PCVector2 // { dg-message \"note\" }\n     PCVector2<T> operator- (const PCVector2<T> &ov) const \n \t{ \n \t  return PCVector2<T>(ov.xFIELD, ov.yFIELD); // { dg-error \"matching\" }\n-\t  // { dg-message \"(candidate|expects 1 argument, 2 provided|cannot convert)\" \"candidate note\" { target *-*-* } 7 }\n+\t  // { dg-message \"(candidate|expects 1 argument, 2 provided|cannot convert)\" \"candidate note\" { target *-*-* } .-1 }\n \t}\n \n     T xFIELD, yFIELD;"}, {"sha": "dbce9a84b714112134119e96e2b31c3364084a77", "filename": "gcc/testsuite/g++.dg/template/member5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmember5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmember5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmember5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -28,6 +28,6 @@ struct S {\n template< typename _A > void S::foo() {} \n \n template void S::foo< 0 >();    // { dg-error \"no definition available\" \"no def\" }\n-\t\t\t\t// { dg-message \"required\" \"instantiated\" { target *-*-* } 30 }\n+\t\t\t\t// { dg-message \"required\" \"instantiated\" { target *-*-* } .-1 }\n \n }"}, {"sha": "5a9edf452a4f1f68c4020c03861f07dbf4a623bd", "filename": "gcc/testsuite/g++.dg/template/meminit1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmeminit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmeminit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmeminit1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,6 +3,6 @@ template <class T >\n struct S\n {\n   S() : S() {} // { dg-message \"delegating constructors\" }\n-}; // { dg-error \"delegates to itself\" \"\" { target *-*-* } 5 }\n+}; // { dg-error \"delegates to itself\" \"\" { target *-*-* } .-1 }\n \n S<int> s;"}, {"sha": "a5ec7c303a126e594eabddf6111f1ffad6a327cb", "filename": "gcc/testsuite/g++.dg/template/nested3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -18,8 +18,8 @@ class B {\n     int _j;\n   };\n   A<U,SubB1>::SubA<SubB2> _a; // { dg-error \"not a base type\" \"not base\" }\n-\t\t// { dg-message \"note\" \"note\" { target *-*-* } 20 }\n-\t\t// { dg-error \"non-template\" \"non-template\" { target *-*-* } 20 }\n+\t\t// { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n+\t\t// { dg-error \"non-template\" \"non-template\" { target *-*-* } .-2 }\n };\n \n "}, {"sha": "2da57b746293126786a4c2972886238b187cd2d9", "filename": "gcc/testsuite/g++.dg/template/nontype6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype6.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -13,7 +13,7 @@ template <class T>\n void func(void)\n {\n   (void)A<T>::type();\t // { dg-error \"non-type\" \"non-type\" }\n-// { dg-message \"if a type\" \"note\" { target *-*-* } 15 }\n+// { dg-message \"if a type\" \"note\" { target *-*-* } .-1 }\n }\n \n template void func<float>(void);    // { dg-message \"required from here\" }"}, {"sha": "3251474bd6a55c594c12bd6a3f01f42d08181644", "filename": "gcc/testsuite/g++.dg/template/overload12.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload12.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,12 +6,12 @@ int foo(T a, T b) {return a + b;} // { dg-message \"template\" }\n template<typename T, typename T2>\n int foo(T a, T2& b, T2 c) {return a + b;}  // { dg-message \"template\" }\n int foo(char*, S&); // { dg-message \"foo\" }\n-// { dg-message \"candidate expects 2 arguments, 3 provided\" \"arity\" { target *-*-* } 8 }\n+// { dg-message \"candidate expects 2 arguments, 3 provided\" \"arity\" { target *-*-* } .-1 }\n \n int foo2(int x)\n {\n   S s={1,2};\n   char c;\n   foo(c, 2, c); // { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|deduced conflicting types for)\" \"candidate note\" { target *-*-* } 15 }\n+  // { dg-message \"(candidate|deduced conflicting types for)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "85ffa4a6e8d3081fecc478bf71b3b1fb6e93fddf", "filename": "gcc/testsuite/g++.dg/template/ptrmem8.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem8.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -16,9 +16,9 @@ template <int (D::*fun)() const> int Get(); // { dg-message \"note\" }\n int main () \n {\n   Get<&B::I>();   // { dg-error \"not a valid template argument\" \"not valid\" }\n-  // { dg-error \"no match\" \"no match\" { target *-*-* } 18 }\n-  // { dg-message \"note\" \"note\" { target *-*-* } 18 }\n+  // { dg-error \"no match\" \"no match\" { target *-*-* } .-1 }\n+  // { dg-message \"note\" \"note\" { target *-*-* } .-2 }\n   Get<&D::I>();   // { dg-error \"not a valid template argument\" \"not valid\" }\n-  // { dg-error \"no match\" \"no match\" { target *-*-* } 21 }\n-  // { dg-message \"note\" \"note\" { target *-*-* } 21 }\n+  // { dg-error \"no match\" \"no match\" { target *-*-* } .-1 }\n+  // { dg-message \"note\" \"note\" { target *-*-* } .-2 }\n }"}, {"sha": "af17b2d7a28413f7aefeee4806afdc3a9bf3d948", "filename": "gcc/testsuite/g++.dg/template/qualified-id1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualified-id1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualified-id1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualified-id1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -18,7 +18,7 @@ template <typename T> void foo()\n {\n   T::C (); // { dg-error \"parsed as a non-type|if a type is meant\" }\n   T::template B<false>(); // { dg-error \"parsed as a non-type\" \"non-type\" }\n-\t\t\t  // { dg-message \"if a type\" \"if a type\" { target *-*-* } 20 }\n+\t\t\t  // { dg-message \"if a type\" \"if a type\" { target *-*-* } .-1 }\n }\n \n void bar()"}, {"sha": "e76b9112d966b263ac953233a1f9042eaabb23e6", "filename": "gcc/testsuite/g++.dg/template/spec15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec15.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -19,7 +19,7 @@ struct A<float> {\n };\n \n template <> void A<int>::f (int);                    // { dg-error \"\" }\n-// { dg-message \"need 2\" \"\" { target *-*-* } 21 }\n+// { dg-message \"need 2\" \"\" { target *-*-* } .-1 }\n template <> template <> void A<int>::f (int);\n \n template <> void A<int>::f2 (int);"}, {"sha": "5218414b7dbdc7b1c88e9a2ed214877a904a04ac", "filename": "gcc/testsuite/g++.dg/template/static1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,6 +1,6 @@\n template <typename T> struct A\n {\n   static const int t[1][1]={{0}}; // { dg-error \"20:'constexpr' needed\" \"\" { target c++11 } }\n-  // { dg-error \"20:invalid in-class\" \"\" { target c++98_only } 3 }\n-  // { dg-error \"28:a brace-enclosed\" \"\" { target c++98_only } 3 }\n+  // { dg-error \"20:invalid in-class\" \"\" { target c++98_only } .-1 }\n+  // { dg-error \"28:a brace-enclosed\" \"\" { target c++98_only } .-2 }\n };"}, {"sha": "5740ac44eeab183a78603fa31525ceab91f6b6d5", "filename": "gcc/testsuite/g++.dg/template/static10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic10.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -20,5 +20,5 @@ namespace std\n {\n   template<> void\n   vector<int, allocator<int> >::swap(vector<int, allocator<int> >&) { } // { dg-error \"\" }\n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 22 }\n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-1 }\n }"}, {"sha": "84342be4d89221bded60b6008b39a34a3fdb4b20", "filename": "gcc/testsuite/g++.dg/template/static2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -5,8 +5,8 @@ class B\n {\n public:\n   static int A::* const p = P; // { dg-error \"25:'constexpr' needed\" \"\" { target c++11 } }\n-  // { dg-error \"25:invalid in-class\" \"\" { target c++98_only } 7 }\n-  // { dg-error \"29:template parameter\" \"\" { target c++98_only } 7 }\n+  // { dg-error \"25:invalid in-class\" \"\" { target c++98_only } .-1 }\n+  // { dg-error \"29:template parameter\" \"\" { target c++98_only } .-2 }\n };\n \n class A"}, {"sha": "47adabab450bfc237bcc72fe9b8285172b303bcc", "filename": "gcc/testsuite/g++.dg/template/ttp25.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp25.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -18,12 +18,12 @@ void f4(T, C<5>);\t\t// { dg-message \"note\" }\n template<int N> struct X {};\n void g() {\n   f1(5l, X<5>()); // { dg-error \"no matching\" }\n-  // { dg-message \"(candidate|inconsistent with)\" \"candidate note\" { target *-*-* } 20 }\n+  // { dg-message \"(candidate|inconsistent with)\" \"candidate note\" { target *-*-* } .-1 }\n   f2(X<5>(), 5);\n   f3(X<5>(), 5l); // { dg-error \"no matching\" }\n-  // { dg-message \"(candidate|inconsistent with)\" \"candidate note\" { target *-*-* } 23 }\n+  // { dg-message \"(candidate|inconsistent with)\" \"candidate note\" { target *-*-* } .-1 }\n   f4(5, X<5>());\n   f4(5l, X<5>()); // { dg-error \"no matching\" }\n-  // { dg-message \"(candidate|inconsistent with)\" \"candidate note\" { target *-*-* } 26 }\n+  // { dg-message \"(candidate|inconsistent with)\" \"candidate note\" { target *-*-* } .-1 }\n   f4((short)5, X<5>());\n }"}, {"sha": "4b39348eb69d0f0d9e5de683861800b922c84b9d", "filename": "gcc/testsuite/g++.dg/template/typedef2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,4 +1,4 @@\n // PR c++/18155\n \n template<int> typedef struct A; // { dg-warning \"'typedef' was ignored\" }\n-                                // { dg-error \"\" \"\" { target *-*-* } 3 }\n+                                // { dg-error \"\" \"\" { target *-*-* } .-1 }"}, {"sha": "251eb3f37b2134ee596579ead34f6668bc096f05", "filename": "gcc/testsuite/g++.dg/template/typename2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -22,5 +22,5 @@ template<typename _CharT>\n class ctype2 : public __ctype_abstract_base<_CharT>\n {\n   typedef mask mask; // { dg-error \"does not name a type\" \"no type\" }\n-  // { dg-message \"note\" \"note\" { target *-*-* } 24 }\n+  // { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n };"}, {"sha": "88e3f329aba82f4e2e23c118a6539c12ac28d570", "filename": "gcc/testsuite/g++.dg/template/unify10.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify10.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -26,34 +26,34 @@ void cvFunction(void (CLASS::* method)() const volatile) {} // { dg-message \"not\n int main() {\n   mFunction(&MyClass::mMethod);\n   mFunction(&MyClass::cMethod);    // { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } 28 }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n   mFunction(&MyClass::vMethod);    // { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } 30 }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n   mFunction(&MyClass::cvMethod);   // { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } 32 }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n \n   cFunction(&MyClass::mMethod);    // { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } 35 }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n   cFunction(&MyClass::cMethod);\n   cFunction(&MyClass::vMethod);    // { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } 38 }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n   cFunction(&MyClass::cvMethod);   // { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } 40 }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n \n   vFunction(&MyClass::mMethod);    // { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } 43 }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n   vFunction(&MyClass::cMethod);    // { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } 45 }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n   vFunction(&MyClass::vMethod);\n   vFunction(&MyClass::cvMethod);   // { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } 48 }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n \n   cvFunction(&MyClass::mMethod);   // { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } 51 }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n   cvFunction(&MyClass::cMethod);   // { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } 53 }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n   cvFunction(&MyClass::vMethod);   // { dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } 55 }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n   cvFunction(&MyClass::cvMethod);\n \n   return 0;"}, {"sha": "8228e3e0c749dc46aeddfe2395224be8cebeb28a", "filename": "gcc/testsuite/g++.dg/template/unify6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify6.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -19,5 +19,5 @@ void Bar ()\n   Foo3 (&Baz);\n \n   Foo3 (&Baz, &Baz); // { dg-error \"no matching function\" \"\" }\n-  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } 21 }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "91cd58f3a6fefc4d352cda8e5070a43e962b1572", "filename": "gcc/testsuite/g++.dg/template/unify7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify7.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,5 +11,5 @@ int main()\n {\n   Foo (f);\n   Baz (f); // { dg-error \"no matching function\" \"\" }\n-  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } 13 }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "ee18b86eb1f0508c8e31b4ee1e4333d8a96d68ef", "filename": "gcc/testsuite/g++.dg/template/unify9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify9.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -14,5 +14,5 @@ const X *x;\n  \n int main () { \n   f (*x, &X::g);  // {  dg-error \"no matching function\" }\n-  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } 16 }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n } "}, {"sha": "38e1e1c85dfd17162acd9c6d2419d7c02f3dac29", "filename": "gcc/testsuite/g++.dg/template/varmod1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvarmod1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvarmod1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvarmod1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -7,5 +7,5 @@ void bar()\n   int i;\n   int A[i][i]; \n   foo(A); // { dg-error \"\" } \n-  // { dg-message \"(candidate|not a valid template argument)\" \"candidate note\" { target *-*-* } 9 }\n+  // { dg-message \"(candidate|not a valid template argument)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "11ed7ec08930caa4c625725d9abefa0f032dfb21", "filename": "gcc/testsuite/g++.dg/ubsan/div-by-zero-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fdiv-by-zero-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fdiv-by-zero-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fdiv-by-zero-1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,5 +6,5 @@ foo (int i)\n {\n   switch (i)\n   case 0 * (1 / 0): /* { dg-warning \"division by zero\" } */\n-    ;  /* { dg-error \"is not a constant.expression\" \"\" { target *-*-* } 8 } */\n+    ;  /* { dg-error \"is not a constant.expression\" \"\" { target *-*-* } .-1 } */\n }"}, {"sha": "bce7b1cd2daa399096ef7d8798f12315e8109311", "filename": "gcc/testsuite/g++.dg/ubsan/pr63956.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -10,9 +10,9 @@ fn1 (int a, int b)\n {\n   if (b != 2)\n     a <<= b;\n-    // { dg-error \"5 << -2.. is negative\" \"\" { target *-*-* } 12 }\n-    // { dg-error \"is >= than the precision of the left operand\" \"\" { target *-*-* } 12 }\n-    // { dg-error \"-2 << 4.. is negative\" \"\" { target *-*-* } 12 }\n+    // { dg-error \"5 << -2.. is negative\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"is >= than the precision of the left operand\" \"\" { target *-*-* } .-2 }\n+    // { dg-error \"-2 << 4.. is negative\" \"\" { target *-*-* } .-3 }\n   return a;\n }\n \n@@ -33,8 +33,8 @@ fn2 (int a, int b)\n {\n   if (b != 2)\n     a >>= b;\n-    // { dg-error \"4 >> -1.. is negative\" \"\" { target *-*-* } 35 }\n-    // { dg-error \"is >= than the precision of the left operand\" \"\" { target *-*-* } 35 }\n+    // { dg-error \"4 >> -1.. is negative\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"is >= than the precision of the left operand\" \"\" { target *-*-* } .-2 }\n \n   return a;\n }"}, {"sha": "8795c88bf4d894a4b2490a41b1161e668de3c250", "filename": "gcc/testsuite/g++.dg/warn/Waddress-1.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -24,13 +24,13 @@ void ll() { if (&s != (T*)0) z(); }     // { dg-warning \"address\" }\n void ml() { if (&t != (S*)0) z(); }     // { dg-warning \"address\" }\n \n void nl() { if (z != (S*)0) z(); }      // { dg-error \"comparison\" }\n-// { dg-warning \"address\" \"\" { target *-*-* } 26 }\n+// { dg-warning \"address\" \"\" { target *-*-* } .-1 }\n void pl() { if (z != (ptrfn)0) z(); }   // { dg-error \"comparison\" }\n-// { dg-warning \"address\" \"\" { target *-*-* } 28 }\n+// { dg-warning \"address\" \"\" { target *-*-* } .-1 }\n void ql() { if (&d != (int*)0) z(); }   // { dg-error \"comparison\" }\n-// { dg-warning \"address\" \"\" { target *-*-* } 30 }\n+// { dg-warning \"address\" \"\" { target *-*-* } .-1 }\n void rl() { if (&s != (U*)0) z(); }     // { dg-error \"comparison\" }\n-// { dg-warning \"address\" \"\" { target *-*-* } 32 }\n+// { dg-warning \"address\" \"\" { target *-*-* } .-1 }\n \n void gr() { if (0 != z) z(); }          // { dg-warning \"address\" }\n void hr() { if ((ptrf)0 != z) z(); }    // { dg-warning \"address\" }\n@@ -41,10 +41,10 @@ void lr() { if ((T*)0 != &s) z(); }     // { dg-warning \"address\" }\n void mr() { if ((S*)0 != &t) z(); }     // { dg-warning \"address\" }\n \n void nr() { if ((S*)0 != z) z(); }      // { dg-error \"comparison\" }\n-// { dg-warning \"address\" \"\" { target *-*-* } 43 }\n+// { dg-warning \"address\" \"\" { target *-*-* } .-1 }\n void pr() { if ((ptrfn)0 != z) z(); }   // { dg-error \"comparison\" }\n-// { dg-warning \"address\" \"\" { target *-*-* } 45 }\n+// { dg-warning \"address\" \"\" { target *-*-* } .-1 }\n void qr() { if ((int*)0 != &d) z(); }   // { dg-error \"comparison\" }\n-// { dg-warning \"address\" \"\" { target *-*-* } 47 }\n+// { dg-warning \"address\" \"\" { target *-*-* } .-1 }\n void rr() { if ((U*)0 != &s) z(); }     // { dg-error \"comparison\" }\n-// { dg-warning \"address\" \"\" { target *-*-* } 49 }\n+// { dg-warning \"address\" \"\" { target *-*-* } .-1 }"}, {"sha": "158c2a96719c7845222a823ea770d12ea07dd571", "filename": "gcc/testsuite/g++.dg/warn/Wconversion2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,4 +1,4 @@\n // { dg-options \"-Wconversion-null\" }\n void foo(const char *); \n void bar() { foo(false); } // { dg-warning \"pointer type for argument\" \"\" { target { ! c++11 } } }\n-// { dg-error \"cannot convert\" \"\" { target c++11 } 3 }\n+// { dg-error \"cannot convert\" \"\" { target c++11 } .-1 }"}, {"sha": "099be9555b9c76790d74aa284a423ad01c91c042", "filename": "gcc/testsuite/g++.dg/warn/Wnull-conversion-1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnull-conversion-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnull-conversion-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnull-conversion-1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -7,12 +7,12 @@ void func1(int* ptr);\n \n void func2() {\n   int* t = false;             // { dg-warning \"converting 'false' to pointer\" \"\" { target { ! c++11 } } }\n-// { dg-error \"cannot convert\" \"\" { target c++11 } 9 }\n+// { dg-error \"cannot convert\" \"\" { target c++11 } .-1 }\n   int* p;\n   p = false;                  // { dg-warning \"converting 'false' to pointer\" \"\" { target { ! c++11 } } }\n-// { dg-error \"cannot convert\" \"\" { target c++11 } 12 }\n+// { dg-error \"cannot convert\" \"\" { target c++11 } .-1 }\n   int* r = sizeof(char) / 2;  // { dg-error \"invalid conversion from\" \"\" { target c++11 } }\n   func1(false);               // { dg-warning \"converting 'false' to pointer\" \"\" { target { ! c++11 } } }\n-// { dg-error \"cannot convert\" \"\" { target c++11 } 15 }\n+// { dg-error \"cannot convert\" \"\" { target c++11 } .-1 }\n   int i = NULL;               // { dg-warning \"converting to non-pointer\" }\n }"}, {"sha": "fb963f6195020e0d19dc14d313a8887185631ddd", "filename": "gcc/testsuite/g++.dg/warn/Wsubobject-linkage-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsubobject-linkage-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsubobject-linkage-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsubobject-linkage-1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,6 +4,6 @@ typedef volatile struct { } Foo;\n \n #line 6 \"foo.C\"\n struct Bar { Foo foo; };   // { dg-warning \"no linkage\" }\n-// { dg-bogus \"anonymous namespace\" \"\" { target *-*-* } 6 }\n+// { dg-bogus \"anonymous namespace\" \"\" { target *-*-* } .-1 }\n struct Bar2 : Foo { };     // { dg-warning \"no linkage\" }\n-// { dg-bogus \"anonymous namespace\" \"\" { target *-*-* } 8 }\n+// { dg-bogus \"anonymous namespace\" \"\" { target *-*-* } .-1 }"}, {"sha": "95a04501441a5b38168bc192340e435bb0f599f8", "filename": "gcc/testsuite/g++.dg/warn/Wsubobject-linkage-3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsubobject-linkage-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsubobject-linkage-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsubobject-linkage-3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,6 +4,6 @@ namespace { struct Foo { }; }\n \n #line 6 \"foo.C\"\n struct Bar { Foo foo; };   // { dg-warning \"anonymous namespace\" }\n-// { dg-bogus \"no linkage\" \"\" { target *-*-* } 6 }\n+// { dg-bogus \"no linkage\" \"\" { target *-*-* } .-1 }\n struct Bar2 : Foo { };     // { dg-warning \"anonymous namespace\" }\n-// { dg-bogus \"no linkage\" \"\" { target *-*-* } 8 }\n+// { dg-bogus \"no linkage\" \"\" { target *-*-* } .-1 }"}, {"sha": "f15416f87b5e420cffb76877290b0dc4083e7cb2", "filename": "gcc/testsuite/g++.dg/warn/Wswitch-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWswitch-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWswitch-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWswitch-1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -20,7 +20,7 @@ foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n     default: break;\n     }\n   switch (ei) /* { dg-warning \"enumeration value 'e1' not handled in switch\" \"enum e1\" } */\n-    { /* { dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } 22 } */\n+    { /* { dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } .-1 } */\n     }\n   switch (ej)\n     {"}, {"sha": "6470d4f04c8ee7ec704a33b9d1115ec6910e13a0", "filename": "gcc/testsuite/g++.dg/warn/Wtype-limits-Wextra.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits-Wextra.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits-Wextra.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits-Wextra.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -13,7 +13,7 @@ void a (unsigned char x)\n     return;\n   if (255 >= x) /* { dg-warning \"comparison is always true due to limited range of data type\" } */\n     return;\n-  if ((int)x <= 255) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } 16 } */\n+  if ((int)x <= 255) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } . } */\n     return;\n   if (255 >= (unsigned char) 1)\n     return;\n@@ -58,7 +58,7 @@ void e (unsigned long long x)\n \n int test (int x) \n {\n-  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } 61 } */\n+  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } . } */\n     return 1;\n   else \n     return 0;"}, {"sha": "f585e97aa230028bfb7e58c1d39ffe3a857ec586", "filename": "gcc/testsuite/g++.dg/warn/Wtype-limits.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -13,7 +13,7 @@ void a (unsigned char x)\n     return;\n   if (255 >= x) /* { dg-warning \"comparison is always true due to limited range of data type\" } */\n     return;\n-  if ((int)x <= 255) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } 16 } */\n+  if ((int)x <= 255) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } . } */\n     return;\n   if (255 >= (unsigned char) 1)\n     return;\n@@ -58,7 +58,7 @@ void e (unsigned long long x)\n \n int test (int x) \n {\n-  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } 61 } */\n+  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } . } */\n     return 1;\n   else \n     return 0;"}, {"sha": "5e408581abf94ac45114e5689582d6bdc88536cb", "filename": "gcc/testsuite/g++.dg/warn/Wunused-parm-5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,11 +4,11 @@\n void f1 (long s) { }  // { dg-warning \"15:unused parameter 's'\" }\n \n void f2 (long s, int u) { }  // { dg-warning \"15:unused parameter 's'\" }\n-// { dg-warning \"22:unused parameter 'u'\" \"\" { target *-*-* } 6 }\n+// { dg-warning \"22:unused parameter 'u'\" \"\" { target *-*-* } .-1 }\n \n void f3 (long s);\n void f3 (long s) { }  // { dg-warning \"15:unused parameter 's'\" }\n \n void f4 (long s, int u);\n void f4 (long s, int u) { }  // { dg-warning \"15:unused parameter 's'\" }\n-// { dg-warning \"22:unused parameter 'u'\" \"\" { target *-*-* } 13 }\n+// { dg-warning \"22:unused parameter 'u'\" \"\" { target *-*-* } .-1 }"}, {"sha": "ad9eb3d4820f7d6a4b3e09bf4a0f0f4130b55bc5", "filename": "gcc/testsuite/g++.dg/warn/deprecated-6.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-6.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -51,9 +51,9 @@ int func1()\n    int (*pf)() = f1;\t\t\t/* { dg-warning \"'INT1 f1\\\\(\\\\)' is deprecated: Please avoid f1\" \"\" } */\n \n    z = w + x + y + g1 + g2 + g3;\t/* { dg-warning \"'x' is deprecated: Please avoid x\" \"\" } */\n-\t\t\t\t\t/* { dg-warning \"'y' is deprecated: Please avoid y\" \"y\" { target *-*-* } 53 } */\n-\t\t\t\t\t/* { dg-warning \"'g2' is deprecated: Please avoid g2\" \"g2\" { target *-*-* } 53 } */\n-\t\t\t\t\t/* { dg-warning \"'g3' is deprecated: Please avoid g3\" \"g3\" { target *-*-* } 53 } */\n+\t\t\t\t\t/* { dg-warning \"'y' is deprecated: Please avoid y\" \"y\" { target *-*-* } .-1 } */\n+\t\t\t\t\t/* { dg-warning \"'g2' is deprecated: Please avoid g2\" \"g2\" { target *-*-* } .-2 } */\n+\t\t\t\t\t/* { dg-warning \"'g3' is deprecated: Please avoid g3\" \"g3\" { target *-*-* } .-3 } */\n    return f1(); \t\t\t/* { dg-warning \"'INT1 f1\\\\(\\\\)' is deprecated: Please avoid f1\" \"f1\" } */\n }\n \n@@ -69,7 +69,7 @@ int func2(S1 *p)\n   p->u1.field5 = g1 + p->field7;\n   p->u2.field9;\t\t\t\t/* { dg-warning \"'S1::u2' is deprecated: Please avoid u2\" \"\" } */\n   return p->u1.field6 + p->field8;\t/* { dg-warning \"'S1::<unnamed union>::field6' is deprecated: Please avoid field6\" \"\" } */\n-\t\t\t\t\t/* { dg-warning \"'S1::field8' is deprecated: Please avoid field8\" \"field8\" { target *-*-* } 71 } */\n+\t\t\t\t\t/* { dg-warning \"'S1::field8' is deprecated: Please avoid field8\" \"field8\" { target *-*-* } .-1 } */\n }\n \n struct SS1 {"}, {"sha": "a5b2aee03e36a19592f43699a024427be0ee7cd3", "filename": "gcc/testsuite/g++.dg/warn/deprecated.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -53,9 +53,9 @@ int func1()\n    int (*pf)() = f1;\t\t\t/* { dg-warning \"'INT1 f1\\\\(\\\\)' is deprecated\" \"\" } */\n \n    z = w + x + y + g1 + g2 + g3;\t/* { dg-warning \"'x' is deprecated\" \"\" } */\n-   \t\t\t\t\t/* { dg-warning \"'y' is deprecated\" \"y\" { target *-*-* } 55 } */\n-   \t\t\t\t\t/* { dg-warning \"'g2' is deprecated\" \"g2\" { target *-*-* } 55 } */\n-   \t\t\t\t\t/* { dg-warning \"'g3' is deprecated\" \"g3\" { target *-*-* } 55 } */\n+   \t\t\t\t\t/* { dg-warning \"'y' is deprecated\" \"y\" { target *-*-* } .-1 } */\n+   \t\t\t\t\t/* { dg-warning \"'g2' is deprecated\" \"g2\" { target *-*-* } .-2 } */\n+   \t\t\t\t\t/* { dg-warning \"'g3' is deprecated\" \"g3\" { target *-*-* } .-3 } */\n    return f1(); \t\t\t/* { dg-warning \"'INT1 f1\\\\(\\\\)' is deprecated\" \"f1\" } */\n }\n \n@@ -71,7 +71,7 @@ int func2(S1 *p)\n   p->u1.field5 = g1 + p->field7;\n   p->u2.field9;\t\t\t\t/* { dg-warning \"'S1::u2' is deprecated\" \"\" } */\n   return p->u1.field6 + p->field8;\t/* { dg-warning \"'S1::<unnamed union>::field6' is deprecated\" \"\" } */\n-  \t\t\t\t\t/* { dg-warning \"'S1::field8' is deprecated\" \"field8\" { target *-*-* } 73 } */\n+  \t\t\t\t\t/* { dg-warning \"'S1::field8' is deprecated\" \"field8\" { target *-*-* } .-1 } */\n }\n \n struct SS1 {"}, {"sha": "e880e360eb029408d2dfbec95e9fb183f2db3715", "filename": "gcc/testsuite/g++.dg/warn/incomplete1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fincomplete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fincomplete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fincomplete1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -17,6 +17,6 @@ int\n main (int argc, char **argv)\n {\n   delete a;\t// { dg-warning \"delete\" \"warn\" }\n-  // { dg-message \"note\" \"note\" { target *-*-* } 19 }\n+  // { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n   return 0;\n }"}, {"sha": "5ccc7aff868e3170e9550f86cf40b6b6cf0cd9c4", "filename": "gcc/testsuite/g++.dg/warn/multiple-overflow-warn-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmultiple-overflow-warn-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmultiple-overflow-warn-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmultiple-overflow-warn-1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,6 +8,6 @@ int\n g (void)\n {\n   return - - - - -INT_MIN; /* { dg-bogus \"integer overflow in expression.*integer overflow in expression\" } */\n-  /* { dg-warning \"integer overflow in expression\" \"\" { target *-*-* } 10 } */\n+  /* { dg-warning \"integer overflow in expression\" \"\" { target *-*-* } .-1 } */\n }\n "}, {"sha": "31e00ed993d8e282b003ed8ae529a07e5aa62561", "filename": "gcc/testsuite/g++.dg/warn/multiple-overflow-warn-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmultiple-overflow-warn-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmultiple-overflow-warn-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmultiple-overflow-warn-2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,5 +8,5 @@ int\n g1 (void)\n {\n   return INT_MAX + 1 - INT_MAX; /* { dg-bogus \"integer overflow in expression.*integer overflow in expression\" } */\n-  /* { dg-warning \"integer overflow in expression\" \"\" { target *-*-* } 10 } */\n+  /* { dg-warning \"integer overflow in expression\" \"\" { target *-*-* } .-1 } */\n }"}, {"sha": "19eac3a9f20738046e241fba01eb2ea7091a529d", "filename": "gcc/testsuite/g++.dg/warn/multiple-overflow-warn-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmultiple-overflow-warn-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmultiple-overflow-warn-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmultiple-overflow-warn-3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,7 +6,7 @@ short int\n g (void)\n {\n   short int wc = ((short int)1 << 31) - 1; /* { dg-bogus \"overflow .* overflow\" } */\n-  /* { dg-warning \"overflow\" \"\" { target *-*-* } 8 } */\n+  /* { dg-warning \"overflow\" \"\" { target *-*-* } .-1 } */\n   return wc;\n }\n "}, {"sha": "b29eec34f8fc5cfe1fa8f07d43fe9e32d7a904b5", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-1.C", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,18 +11,18 @@ enum e {\n   E1 = UINT_MAX + 1,\n   /* Overflow in an unevaluated part of an expression is OK (example\n      in the standard).  */\n-  E2 = 2 || 1 / 0, /* { dg-bogus \"warning: division by zero\" \"\" { xfail *-*-* } 14 } */\n+  E2 = 2 || 1 / 0, /* { dg-bogus \"warning: division by zero\" \"\" { xfail *-*-* } . } */\n   E3 = 1 / 0, /* { dg-warning \"division by zero\" } */\n-  /* { dg-error \"enumerator value for 'E3' is not an integer constant|not a constant.expression\" \"enum error\" { target *-*-* } 15 } */\n+  /* { dg-error \"enumerator value for 'E3' is not an integer constant|not a constant.expression\" \"enum error\" { target *-*-* } .-1 } */\n   /* But as in DR#031, the 1/0 in an evaluated subexpression means the\n      whole expression violates the constraints.  */\n   E4 = 0 * (1 / 0), /* { dg-warning \"division by zero\" } */\n-  /* { dg-error \"enumerator value for 'E4' is not an integer constant\" \"enum error\" { target c++ } 19 } */\n+  /* { dg-error \"enumerator value for 'E4' is not an integer constant\" \"enum error\" { target c++ } .-1 } */\n   E5 = INT_MAX + 1, /* { dg-warning \"integer overflow in expression\" } */\n-  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 21 } */\n+  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   /* Again, overflow in evaluated subexpression.  */\n   E6 = 0 * (INT_MAX + 1), /* { dg-warning \"integer overflow in expression\" } */\n-  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 24 } */\n+  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   /* A cast does not constitute overflow in conversion.  */\n   E7 = (char) INT_MAX\n };\n@@ -31,7 +31,7 @@ struct s {\n   int a;\n   int : 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n   int : 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n-  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 33 } */\n+  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n };\n \n void\n@@ -52,9 +52,9 @@ void *n = 0;\n    constants.  The third has the overflow in an unevaluated\n    subexpression, so is a null pointer constant.  */\n void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n-/* { dg-warning \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } 54 } */\n+/* { dg-warning \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } .-1 } */\n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n-/* { dg-error \"invalid conversion from 'int' to 'void*'\" \"null\" { xfail *-*-* } 56 } */\n+/* { dg-error \"invalid conversion from 'int' to 'void*'\" \"null\" { xfail *-*-* } .-1 } */\n void *r = (1 ? 0 : INT_MAX+1); /* { dg-bogus \"integer overflow in expression\" \"\" { xfail *-*-* } } */\n \n void\n@@ -65,7 +65,7 @@ g (int i)\n     case 0 * (1/0): /* { dg-warning \"division by zero\" } */\n       ;\n     case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"integer overflow in expression\" } */\n-      /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 67 } */\n+      /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n       ;\n     }\n }"}, {"sha": "a43ea5c0b0ddba00f553176ad7a34dafa4529956", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-3.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,18 +11,18 @@ enum e {\n   E1 = UINT_MAX + 1,\n   /* Overflow in an unevaluated part of an expression is OK (example\n      in the standard).  */\n-  E2 = 2 || 1 / 0, /* { dg-bogus \"warning: division by zero\" \"\" { xfail *-*-* } 14 } */\n+  E2 = 2 || 1 / 0, /* { dg-bogus \"warning: division by zero\" \"\" { xfail *-*-* } . } */\n   E3 = 1 / 0, /* { dg-warning \"division by zero\" } */\n-  /* { dg-error \"enumerator value for 'E3' is not an integer constant|not a constant.expression\" \"enum error\" { target *-*-* } 15 } */\n+  /* { dg-error \"enumerator value for 'E3' is not an integer constant|not a constant.expression\" \"enum error\" { target *-*-* } .-1 } */\n   /* But as in DR#031, the 1/0 in an evaluated subexpression means the\n      whole expression violates the constraints.  */\n   E4 = 0 * (1 / 0), /* { dg-warning \"division by zero\" } */\n-  /* { dg-error \"enumerator value for 'E4' is not an integer constant\" \"enum error\" { target c++ } 19 } */\n+  /* { dg-error \"enumerator value for 'E4' is not an integer constant\" \"enum error\" { target c++ } .-1 } */\n   E5 = INT_MAX + 1, /* { dg-warning \"integer overflow in expression\" } */\n-  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 21 } */\n+  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   /* Again, overflow in evaluated subexpression.  */\n   E6 = 0 * (INT_MAX + 1), /* { dg-warning \"integer overflow in expression\" } */\n-  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 24 } */\n+  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   /* A cast does not constitute overflow in conversion.  */\n   E7 = (char) INT_MAX\n };\n@@ -31,7 +31,7 @@ struct s {\n   int a;\n   int : 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n   int : 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n-  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 33 } */\n+  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n };\n \n void\n@@ -53,10 +53,10 @@ void *n = 0;\n    constants.  The third has the overflow in an unevaluated\n    subexpression, so is a null pointer constant.  */\n void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n-/* { dg-warning \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } 55 } */\n+/* { dg-warning \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } .-1 } */\n \n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n-/* { dg-warning \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } 58 } */\n+/* { dg-warning \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } .-1 } */\n void *r = (1 ? 0 : INT_MAX+1); /* { dg-bogus \"integer overflow in expression\" \"\" { xfail *-*-* } } */\n \n void\n@@ -65,9 +65,9 @@ g (int i)\n   switch (i)\n     {\n     case 0 * (1/0): /* { dg-warning \"division by zero\" } */\n-      ;  /* { dg-error \"division by zero is not a constant expression\" \"division\" { target c++11 } 67 }  */\n+      ;  /* { dg-error \"division by zero is not a constant expression\" \"division\" { target c++11 } .-1 }  */\n     case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"integer overflow in expression\" } */\n-      /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 69 } */\n+      /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n       ;\n     }\n }"}, {"sha": "b9d4ebd7d25b23c6d4903d535fa7127b51ca1d90", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-4.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-4.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -13,18 +13,18 @@ enum e {\n      in the standard).  */\n   E2 = 2 || 1 / 0, /* { dg-bogus \"warning: division by zero\" \"\" { xfail *-*-* } } */\n   E3 = 1 / 0, /* { dg-warning \"division by zero\" } */\n-  /* { dg-error \"enumerator value for 'E3' is not an integer constant|not a constant.expression\" \"enum error\" { target *-*-* } 15 } */\n+  /* { dg-error \"enumerator value for 'E3' is not an integer constant|not a constant.expression\" \"enum error\" { target *-*-* } .-1 } */\n   /* But as in DR#031, the 1/0 in an evaluated subexpression means the\n      whole expression violates the constraints.  */\n   E4 = 0 * (1 / 0), /* { dg-warning \"division by zero\" } */\n-  /* { dg-error \"enumerator value for 'E4' is not an integer constant\" \"enum error\" { target c++ } 19 } */\n+  /* { dg-error \"enumerator value for 'E4' is not an integer constant\" \"enum error\" { target c++ } .-1 } */\n   E5 = INT_MAX + 1, /* { dg-warning \"integer overflow in expression\" } */\n-  /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 21 } */\n-  /* { dg-error \"enumerator value for 'E5' is not an integer constant\" \"enum error\" { target *-*-* } 21 } */\n+  /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n+  /* { dg-error \"enumerator value for 'E5' is not an integer constant\" \"enum error\" { target *-*-* } .-2 } */\n   /* Again, overflow in evaluated subexpression.  */\n   E6 = 0 * (INT_MAX + 1), /* { dg-warning \"integer overflow in expression\" } */\n-  /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 25 } */\n-  /* { dg-error \"enumerator value for 'E6' is not an integer constant\" \"enum error\" { target *-*-* } 25 } */\n+  /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n+  /* { dg-error \"enumerator value for 'E6' is not an integer constant\" \"enum error\" { target *-*-* } .-2 } */\n   /* A cast does not constitute overflow in conversion.  */\n   E7 = (char) INT_MAX\n };\n@@ -33,8 +33,8 @@ struct s {\n   int a;\n   int : 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n   int : 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n-  /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 35 } */\n-  /* { dg-error \"bit-field .* width not an integer constant\" \"\" { target *-*-* } 35 } */\n+  /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n+  /* { dg-error \"bit-field .* width not an integer constant\" \"\" { target *-*-* } .-2 } */\n };\n \n void\n@@ -56,10 +56,10 @@ void *n = 0;\n    constants.  The third has the overflow in an unevaluated\n    subexpression, so is a null pointer constant.  */\n void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n-/* { dg-error \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } 58 } */\n+/* { dg-error \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } .-1 } */\n \n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n-/* { dg-error \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } 61 } */\n+/* { dg-error \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } .-1 } */\n void *r = (1 ? 0 : INT_MAX+1); /* { dg-bogus \"integer overflow in expression\" \"\" { xfail *-*-* } } */\n \n void\n@@ -68,9 +68,9 @@ g (int i)\n   switch (i)\n     {\n     case 0 * (1/0): /* { dg-warning \"division by zero\" } */\n-      ;  /* { dg-error \"division by zero is not a constant expression\" \"division\" { target c++11 } 70 } */\n+      ;  /* { dg-error \"division by zero is not a constant expression\" \"division\" { target c++11 } .-1 } */\n     case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"integer overflow in expression\" } */\n-      /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 72 } */\n+      /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n       ;\n     }\n }"}, {"sha": "f95bf8b92d90b9f6cfd2eeb1bdb469e46403dc30", "filename": "gcc/testsuite/g++.dg/warn/pr12242.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr12242.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr12242.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr12242.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,7 +11,7 @@ void example ()\n   Y y;\n   \n   x = 10;  // { dg-warning \"invalid conversion from .int. to .X.\" \"invalid\" }\n-           // { dg-warning \"unspecified\" \"unspecified\" { target *-*-* } 13 }\n+           // { dg-warning \"unspecified\" \"unspecified\" { target *-*-* } .-1 }\n   x = 1;   // { dg-warning \"invalid conversion from .int. to .X.\" }\n   x = C;   // { dg-error \"cannot convert .Y. to .X. in assignment\" }  \n   x = D;   // { dg-error \"cannot convert .Y. to .X. in assignment\" }  "}, {"sha": "b22447091b5efe763af4687f771507b73ddff446", "filename": "gcc/testsuite/g++.dg/warn/pr30551-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551-2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,4 +3,4 @@\n // { dg-options \"-pedantic-errors\" }\n // { dg-skip-if \"-Wmain not enabled with -pedantic on SPU\" { spu-*-* } } \n int main(char a) {} /* { dg-error \"first argument of .*main.* should be .int.\" \"int\" } */\n-/* { dg-error \"main.* takes only zero or two arguments\" \"zero or two\" { target *-*-* } 5 } */ \n+/* { dg-error \"main.* takes only zero or two arguments\" \"zero or two\" { target *-*-* } .-1 } */ "}, {"sha": "4b3868e4717c856afb53847df9b79753bd8a5a95", "filename": "gcc/testsuite/g++.dg/warn/pr30551.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,4 +3,4 @@\n // { dg-options \"\" }\n // { dg-skip-if \"-Wmain not enabled on SPU\" { spu-*-* } } \n int main(char a) {} /* { dg-warning \"first argument of .*main.* should be .int.\" \"int\" } */\n-/* { dg-warning \"main.* takes only zero or two arguments\" \"zero or two\" { target *-*-* } 5 } */ \n+/* { dg-warning \"main.* takes only zero or two arguments\" \"zero or two\" { target *-*-* } .-1 } */ "}, {"sha": "4fc3a6b8a6801eaa71efcb6c5d9bf30eb0d0a9da", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/16077.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F16077.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F16077.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F16077.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -22,8 +22,8 @@ void peace(const colombia&);\n \n void foo(nicaragua& b) {\n   peace(b); // { dg-warning \"choosing 'nicaragua::operator\" \"nic\" }\n-  // { dg-warning \"conversion\" \"conv\" { target *-*-* } 24 }\n-  // { dg-message \"note\" \"note\" { target *-*-* } 24 }\n+  // { dg-warning \"conversion\" \"conv\" { target *-*-* } .-1 }\n+  // { dg-message \"note\" \"note\" { target *-*-* } .-2 }\n }\n \n "}, {"sha": "79fb4fb01df414cb6e7a5792c89a861dc0609ab1", "filename": "gcc/testsuite/g++.old-deja/g++.bob/inherit1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -12,7 +12,7 @@ public:\n class B : public A {\n public:\n     char* m1 () { C::m1(); return \"\"; } // { dg-error \"cannot call\" } \n-    // { dg-warning \"deprecated|forbids converting a string constant\" \"depr\" { target *-*-* } 14 }\n+    // { dg-warning \"deprecated|forbids converting a string constant\" \"depr\" { target *-*-* } .-1 }\n };\n \n int main () {"}, {"sha": "1b2f079b6f94c4e3ffe4a289fa610f7a76b1bad9", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash56.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -278,7 +278,7 @@ SetLD<T>::remove(const T& item)\n     Vix x;\n     for (first(x); 0 != x && this->REMOVE_CURRENT != a; next(x, a))\n \ta = operator()(x) == item ? this->REMOVE_CURRENT: this->NORMAL; // { dg-error \"\" } .*\n-    // { dg-message \"(candidate|not derived from)\" \"candidate note\" { target *-*-* } 280 }\n+    // { dg-message \"(candidate|not derived from)\" \"candidate note\" { target *-*-* } .-1 }\n }\n template<class T>\n bool\n@@ -287,7 +287,7 @@ SetLD<T>::contains(const T& item) const\n     Vix x;\n     for (first(x); 0 != x; next(x)) {\n \tif (operator()(x) == item)// { dg-error \"\" } .*\n-\t  // { dg-message \"(candidate|not derived from)\" \"candidate note\" { target *-*-* } 289 }\n+\t  // { dg-message \"(candidate|not derived from)\" \"candidate note\" { target *-*-* } .-1 }\n \t    return TRUE;\n     }\n     return FALSE;"}, {"sha": "7d557eb152a565becb43e5a40addc748f6709d48", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template17.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate17.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -9,7 +9,7 @@ public:\n };\n \n const Regex NDAMName<'L'>::pattern(\"^[Ll](.*)$\",   1);// { dg-error \"type/value mismatch\" \"mismatch\" }\n-// { dg-message \"expected a type\" \"expected\" { target *-*-* } 11 }\n-// { dg-warning \"deprecated|forbids converting a string constant\" \"depr\" { target *-*-* } 11 }\n+// { dg-message \"expected a type\" \"expected\" { target *-*-* } .-1 }\n+// { dg-warning \"deprecated|forbids converting a string constant\" \"depr\" { target *-*-* } .-2 }\n unsigned NDAMName<'L'>::sequence_number = 0;// { dg-error \"type/value mismatch\" \"mismatch\" }\n-// { dg-message \"expected a type\" \"exp\" { target *-*-* } 14 }\n+// { dg-message \"expected a type\" \"exp\" { target *-*-* } .-1 }"}, {"sha": "93f6dcd38a1aedd8d48a7e13b6852ce8883ae580", "filename": "gcc/testsuite/g++.old-deja/g++.eh/ctor1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fctor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fctor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fctor1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,7 +11,7 @@ main ()\n   try\n     {\n       throw A();\t\t// { dg-error \"rvalue\" \"\" { target c++14_down } } can't copy\n-      // { dg-error \"thrown expression\" \"expr\" { target c++14_down } 13 }\n+      // { dg-error \"thrown expression\" \"expr\" { target c++14_down } .-1 }\n     }\n   catch (...) { }\n }"}, {"sha": "1ed6d5c3a6810ff229c129bfee75d42bd5706a24", "filename": "gcc/testsuite/g++.old-deja/g++.jason/bool5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fbool5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fbool5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fbool5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,11 +3,11 @@ int main ()\n {\n   bool b = false;\n   int i = b++; // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n-  // { dg-error \"forbidden\" \"\" { target c++1z } 5 }\n+  // { dg-error \"forbidden\" \"\" { target c++1z } .-1 }\n   if (i != false || b != true)\n     return 1;\n   i = b++; // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n-  // { dg-error \"forbidden\" \"\" { target c++1z } 9 }\n+  // { dg-error \"forbidden\" \"\" { target c++1z } .-1 }\n   if (i != true || b != true)\n     return 1;\n }"}, {"sha": "dfc21dd5378f869051510efa53d7dc0c45fb33c8", "filename": "gcc/testsuite/g++.old-deja/g++.jason/cond.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcond.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcond.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcond.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -39,7 +39,7 @@ int main()\n   A bar;\t\t\t// { dg-error \"not declared\" \"decl\" } \n   \n   if (enum A { one, two, three } foo = one) // { dg-error \"defined\" \"def\" } \n-  // { dg-error \"not declared\" \"expected\" { target *-*-* } 41 }\n+  // { dg-error \"not declared\" \"expected\" { target *-*-* } .-1 }\n     ;\n \n   struct B { operator int () { return 2; } };\n@@ -48,7 +48,7 @@ int main()\n     ;\n \n   if (int f () = 1)\t\t// { dg-warning \"extern\" \"extern\" } \n-  // { dg-error \"is initialized like a variable\" \"var\" { target *-*-* } 50 }\n+  // { dg-error \"is initialized like a variable\" \"var\" { target *-*-* } .-1 }\n     ;\n   \n   if (int a[2] = {1, 2})\t// { dg-error \"extended init\" \"\" { target { ! c++11 } } }"}, {"sha": "339e6a447b449a37a7703734b74dfa4c459b5c0b", "filename": "gcc/testsuite/g++.old-deja/g++.jason/operator.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foperator.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foperator.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foperator.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -29,4 +29,4 @@ void * operator new (A a);\t// { dg-error \"first parameter\" }\n void operator delete (A a);\t// { dg-error \"first parameter\" }\n \n char * operator char * (int);\t// { dg-error \"return type\" \"ret\" }\n-// { dg-error \"nonstatic member function\" \"mem\" { target *-*-* } 31 }\n+// { dg-error \"nonstatic member function\" \"mem\" { target *-*-* } .-1 }"}, {"sha": "fb7e1688145e61adaf0402f0c63d558cfef69553", "filename": "gcc/testsuite/g++.old-deja/g++.jason/pmf5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fpmf5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fpmf5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fpmf5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -16,4 +16,4 @@ static ThingEntry KeyWordTable[] = {\n         &Thing::FunctionA,\n         Thing::OverloadFn,\n };\t\t\t\t// { dg-error \"assuming\" \"assuming\" } implicit &\n-// { dg-message \"note\" \"note\" { target *-*-* } 18 }\n+// { dg-message \"note\" \"note\" { target *-*-* } .-1 }"}, {"sha": "96604e858b908d7e8fc46959ff03413eb6c2d830", "filename": "gcc/testsuite/g++.old-deja/g++.law/ctors5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -15,15 +15,15 @@ class X\t      // { dg-message \"7:X::X|candidate expects\" } implicit constructor\n };\n \n class Y // { dg-error \"1:new types may not be defined in a return type\" \"err\" }\n-        // { dg-message \"1:\\\\(perhaps a semicolon is missing after the definition of 'Y'\\\\)\" \"note\" { target *-*-* } 17 }\n+        // { dg-message \"1:\\\\(perhaps a semicolon is missing after the definition of 'Y'\\\\)\" \"note\" { target *-*-* } .-1 }\n {\n   private:\n     X xx;\n   public:\n     Y();\n }\n X::X( int xi ) // { dg-error \"14:return type specification for constructor invalid\" \"err\" }\n-// { dg-message \"1:X::X|candidate expects\" \"match candidate text\" { target *-*-* } 25 }\n+// { dg-message \"1:X::X|candidate expects\" \"match candidate text\" { target *-*-* } .-1 }\n {\n     x = xi;\n }"}, {"sha": "ee69e1156cc1cbb4a7ecd4ea7f70b7098eb233e0", "filename": "gcc/testsuite/g++.old-deja/g++.law/missed-error2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fmissed-error2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fmissed-error2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fmissed-error2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -15,9 +15,9 @@\n #endif\n \n inline int max(int a, int b) {return a > b ? a : b;}; // { dg-message \"note\" } \n- // { dg-error \"extra ';'\" \"extra ;\" { target *-*-* } 17 }\n+ // { dg-error \"extra ';'\" \"extra ;\" { target *-*-* } .-1 }\n inline double max(double a, double b) {return a > b ? a : b;}; // { dg-message \"note\" } candidate\n- // { dg-error \"extra ';'\" \"extra ;\" { target *-*-* } 19 }\n+ // { dg-error \"extra ';'\" \"extra ;\" { target *-*-* } .-1 }\n \n int main() {\n    static void foo(int i, int j, double x, double y) ;// { dg-error \"\" } .*"}, {"sha": "91c4130679bf6d804a4302b2fdbfa701e9d6a734", "filename": "gcc/testsuite/g++.old-deja/g++.law/operators9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators9.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -10,7 +10,7 @@ class B\n {\n public:\n       operator=(B &); // { dg-error \"no type\" }\n-      // { dg-message \"B::operator=|no known conversion\" \"note\" { target *-*-* } 12 }\n+      // { dg-message \"B::operator=|no known conversion\" \"note\" { target *-*-* } .-1 }\n };\n \n void"}, {"sha": "ad42f4257511ef3f94848716fec26cd5c51e1ecb", "filename": "gcc/testsuite/g++.old-deja/g++.law/temps1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemps1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemps1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemps1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -17,4 +17,4 @@ struct cookie\n };\n \n cookie cat(&foo(\"apabepa\"));// { dg-warning \"deprecated conversion|forbids converting a string constant\" \"dep\" }\n-// { dg-warning \"taking address of temporary\" \"add\" { target *-*-* } 19 }\n+// { dg-warning \"taking address of temporary\" \"add\" { target *-*-* } .-1 }"}, {"sha": "6eb5d66675e568bba22f3116095b12cad4363afb", "filename": "gcc/testsuite/g++.old-deja/g++.mike/for2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Ffor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Ffor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Ffor2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -15,6 +15,6 @@ void bar() {\n void bee () {\n   int i = 0;\n   for (int fun() = 0; i != 2; ++i) {\t// { dg-warning \"extern\" \"extern\" }\n-  // { dg-error \"initialized\" \"init\" { target *-*-* } 17 }\n+  // { dg-error \"initialized\" \"init\" { target *-*-* } .-1 }\n   }\n }"}, {"sha": "3d317bf2d53da44b01961ea6468ce91c8e9f15ae", "filename": "gcc/testsuite/g++.old-deja/g++.mike/ns5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,4 +4,4 @@ namespace A {\n }\n \n int j = i;\t\t// { dg-error \"\" } \n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 6 }\n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-1 }"}, {"sha": "14a38b6267e9caf38f2764d53c3954d41618c422", "filename": "gcc/testsuite/g++.old-deja/g++.mike/ns7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns7.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,5 +6,5 @@ namespace A {\n \n namespace B {\n   int j = i;\t// { dg-error \"\" } \n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 8 }\n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-1 }\n }"}, {"sha": "3ff25c38087a62071d8f39a4f2f42559509b6a7c", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p10769b.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10769b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10769b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10769b.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -18,7 +18,7 @@ public:\n void A::main() {\n   void (B::*mPtrB)(B*);\n   (*(void (*)(A*))PMF2PF(mPtrB))(&b);\t// { dg-error \"argument passing\" } \n-  // { dg-warning \"convert\" \"warn\" { target *-*-* } 20 }\n+  // { dg-warning \"convert\" \"warn\" { target *-*-* } .-1 }\n }\n \n int main() {"}, {"sha": "aff25af816ece53e2f43572d4709c625c70a7a4f", "filename": "gcc/testsuite/g++.old-deja/g++.niklas/t120.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.niklas%2Ft120.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.niklas%2Ft120.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.niklas%2Ft120.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,4 +3,4 @@\n typedef void (*T) (...);\n void f ();\n struct S { void g (T); void h() { g(f); } };// { dg-error \"\" \"match\" }\n-// { dg-message \"candidate|S::g|no known conversion\" \"match candidate text\" { target *-*-* } 5 }\n+// { dg-message \"candidate|S::g|no known conversion\" \"match candidate text\" { target *-*-* } .-1 }"}, {"sha": "dd95a6070cdc21a3ca6a3320426c02e1b2eac211", "filename": "gcc/testsuite/g++.old-deja/g++.niklas/t121.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.niklas%2Ft121.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.niklas%2Ft121.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.niklas%2Ft121.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,4 +3,4 @@\n void f ();\n void g1 (void (*) (...)); void h1 () { g1 (f); }// { dg-error \"invalid conversion\" }\n struct S { void g2 (void (*) (...)); void h2 () { g2 (f); } };// { dg-error \"invalid conversion\" \"match\" }\n-// { dg-message \"candidate|S::g2|no known conversion\" \"match candidate text\" { target *-*-* } 5 }\n+// { dg-message \"candidate|S::g2|no known conversion\" \"match candidate text\" { target *-*-* } .-1 }"}, {"sha": "2246f8a4c4c61dd2e851c4548ed247cf2d484c21", "filename": "gcc/testsuite/g++.old-deja/g++.ns/koenig5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -15,5 +15,5 @@ void g()\n \t\t\t // foo variable first, and therefore do not\n \t\t\t // perform argument-dependent lookup.\n   bar(new X);            // { dg-error \"3:'bar' was not declared\" }\n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 17 }\n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-1 }\n }"}, {"sha": "5645206df78943760b7b173fbdd6ec3168e9e5b2", "filename": "gcc/testsuite/g++.old-deja/g++.oliva/overload1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Foverload1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Foverload1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Foverload1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -14,7 +14,7 @@ struct foo {\n    -pedantic, even in bad1.  */\n int (*ok1)() = foo::bar;\n void (foo::*bad1)(int) = foo::bar; // { dg-error \"assuming pointer\" }\n-// { dg-message \"note\" \"note\" { target *-*-* } 16 }\n+// { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n \n int (*ok2)() = &foo::bar; // ok\n void (*bad2)(int) = foo::bar; // { dg-error \"no matches\" }"}, {"sha": "8f0e545e7a7b5d109324c2507c7bd8abafd138b5", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash24.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash24.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -12,7 +12,7 @@ class foo {\n static void iteratorTest(const foo &x)\n {\n    foo::const_iterator i = x.begin();\t\t// { dg-error \"incomplete type\" \"incomplete type\" } \n-   // { dg-error \"const foo\" \"\" { target *-*-* } 14 }\n+   // { dg-error \"const foo\" \"\" { target *-*-* } .-1 }\n    for (; i; ++i)\n       *i;\n }"}, {"sha": "5b313db1a8dab3d2c1dda2a5dbc6957370b330c1", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash25.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash25.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,7 +3,7 @@\n // Origin: Jakub Jelinek <jakub@redhat.com>\n \n class X { // { dg-error \"1:new types may not be defined in a return type\" \"new types\" }\n-// { dg-message \"1:\\\\(perhaps a semicolon is missing after the definition of 'X'\\\\)\" \"note\" { target *-*-* } 5 }\n+// { dg-message \"1:\\\\(perhaps a semicolon is missing after the definition of 'X'\\\\)\" \"note\" { target *-*-* } .-1 }\n public:\n   X();\n   virtual ~X();"}, {"sha": "9167061c6b1f5554955432412ce1375748634cfc", "filename": "gcc/testsuite/g++.old-deja/g++.other/decl5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -12,7 +12,7 @@ struct A {\n   int A::m;           // { dg-error \"extra qualification\" } \n   struct e;\n   struct A::e {int i;}; // { dg-error \"extra qualification\" \"qual\" } \n-  // { dg-error \"anonymous struct\" \"anon\" { target *-*-* } 14 }\n+  // { dg-error \"anonymous struct\" \"anon\" { target *-*-* } .-1 }\n   struct A::expand {  // { dg-error \"qualified name\" } \n   int m;\n   };"}, {"sha": "63dc0b4b6daab04c29fc1350513c92bbb327b122", "filename": "gcc/testsuite/g++.old-deja/g++.other/lineno5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flineno5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flineno5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flineno5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -16,5 +16,5 @@ namespace tmp {\n class A {\n   public:\n   int kaka(tmp::B = b);\t\t// { dg-error \"\" } no b in scope\n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 18 }\n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-1 }\n };"}, {"sha": "0654f7f4ac0b50ce40f383f0148038c63d595e95", "filename": "gcc/testsuite/g++.old-deja/g++.other/null3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,5 +3,5 @@\n void x()\n {\n  int* p = 1==0;\t// { dg-warning \"converting 'false' to pointer\" \"\" { target { ! c++11 } } }\n-// { dg-error \"cannot convert\" \"\" { target { c++11 } } 5 }\n+// { dg-error \"cannot convert\" \"\" { target { c++11 } } .-1 }\n }"}, {"sha": "4572474a025c506452e581cdb36a57580041a1d8", "filename": "gcc/testsuite/g++.old-deja/g++.other/overcnv2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fovercnv2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fovercnv2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fovercnv2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -17,8 +17,8 @@ int main()\n {\n   B b;\n   if ((const char *)b != 0)  // { dg-warning \"choosing 'B\" \"B\" } surprising overload resolution\n-  // { dg-warning \"for conversion\" \"conv\" { target *-*-* } 19 }\n-  // { dg-message \"note\" \"note\" { target *-*-* } 19 }\n+  // { dg-warning \"for conversion\" \"conv\" { target *-*-* } .-1 }\n+  // { dg-message \"note\" \"note\" { target *-*-* } .-2 }\n     return 1;\n   if ((const char *)(const B)b == 0)\n     return 2;"}, {"sha": "cda4f426b243a1c19765b5a9fe1f436edbe1cfab", "filename": "gcc/testsuite/g++.old-deja/g++.other/ptrmem7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem7.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -21,7 +21,7 @@ void A::foo ()\n {\n   int (A::*ptr1) (int) = &A::ns;\n   int (A::*ptr2) (int) = A::ns;           // { dg-error \"pointer to member\" \"err\" }\n-  // { dg-message \"pointer to member\" \"note\" { target *-*-* } 23 }\n+  // { dg-message \"pointer to member\" \"note\" { target *-*-* } .-1 }\n   int (A::*ptr3) (int) = &ns;             // { dg-error \"pointer to member\" \"err\" }\n   int (A::*ptr4) (int) = ns;              // { dg-error \"pointer to member\" \"err\" }\n "}, {"sha": "4e1a4a834ddd758ba9be8ac4280449a04b136353", "filename": "gcc/testsuite/g++.old-deja/g++.other/typename1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypename1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypename1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypename1.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -14,4 +14,4 @@ template<class T>\n void f()\n {\n   Vector<T>::iterator i = 0; // { dg-error \"typename\" \"typename\" } missing typename\n-} // { dg-error \"expected\" \"expected\" { target *-*-* } 16 }\n+} // { dg-error \"expected\" \"expected\" { target *-*-* } .-1 }"}, {"sha": "c14a4db4ccc85a6b92dc9d9a41b1c5259fd4d1c9", "filename": "gcc/testsuite/g++.old-deja/g++.other/vaarg3.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvaarg3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvaarg3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvaarg3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -23,11 +23,11 @@ void fn1(va_list args)\n   const Z &z2 = va_arg (args, Z);       // { dg-error \"incomplete\" } \n \n   va_arg (args, char);    // { dg-warning \"promote\" } \n-  // { dg-message \"should pass\" \"pass\" { target *-*-* } 25 }\n-  // { dg-message \"abort\" \"abort\" { target *-*-* } 25 }\n+  // { dg-message \"should pass\" \"pass\" { target *-*-* } .-1 }\n+  // { dg-message \"abort\" \"abort\" { target *-*-* } .-2 }\n   va_arg (args, int []);  // { dg-error \"array with unspecified bounds\" } promote\n   va_arg (args, int ());  // { dg-warning \"promoted\" } promote\n-  // { dg-message \"abort\" \"abort\" { target *-*-* } 29 }\n+  // { dg-message \"abort\" \"abort\" { target *-*-* } .-1 }\n   va_arg (args, bool);    // { dg-warning \"promote\" \"promote\" } \n-  // { dg-message \"abort\" \"abort\" { target *-*-* } 31 }\n+  // { dg-message \"abort\" \"abort\" { target *-*-* } .-1 }\n }"}, {"sha": "a84b19004eed4b82c02ce8869b10c131baaae0b5", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash10.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash10.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,8 +4,8 @@ template<int M, int N>\n class GCD {\n public:\n   enum { val = (N == 0) ? M : GCD<N, M % N>::val };\n-// { dg-error \"constant expression\" \"valid\" { target *-*-* } 6 }\n-// { dg-message \"template argument\" \"valid\" { target *-*-* } 6 }\n+// { dg-error \"constant expression\" \"valid\" { target *-*-* } .-1 }\n+// { dg-message \"template argument\" \"valid\" { target *-*-* } .-2 }\n };\n \n int main() {"}, {"sha": "8fb520d6eb391937d3208a513435d8edf740bdf4", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash28.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash28.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,5 +11,5 @@ void f(unsigned int n) {\n   int x[n];\n \n   asize(x); // { dg-error \"\" } no matching function\n-  // { dg-message \"(candidate|not a valid template argument)\" \"candidate note\" { target *-*-* } 13 }\n+  // { dg-message \"(candidate|not a valid template argument)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "5d3861324365b4eda578a3cb3775083ff6db6dcb", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash38.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash38.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,8 +4,8 @@\n template <class T>\n struct S {\n   typedef typename T::Y<T>::Z X; // { dg-error \"non-template\" \"non-template\" } No Y in A\n-// { dg-message \"note\" \"note\" { target *-*-* } 6 }\n-// { dg-error \"does not declare\" \"not declare\" { target *-*-* } 6 }\n+// { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n+// { dg-error \"does not declare\" \"not declare\" { target *-*-* } .-2 }\n   X x; // { dg-error \"does not name a type\" } No Y in A\n };\n "}, {"sha": "d744055d9165272b62719cd3cc5aee06a806d80a", "filename": "gcc/testsuite/g++.old-deja/g++.pt/explicit70.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit70.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit70.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit70.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -41,4 +41,4 @@ template <class T>\n void g(T);\n \n template void g(int); // { dg-error \"no definition available\" \"no def\" }\n-// { dg-message \"required\" \"inst\" { target *-*-* } 43 }\n+// { dg-message \"required\" \"inst\" { target *-*-* } .-1 }"}, {"sha": "0f7cdf85e6a07e66cfb59d718f1bee6f4693f29e", "filename": "gcc/testsuite/g++.old-deja/g++.pt/explicit77.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit77.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit77.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit77.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -15,5 +15,5 @@ void g() {\n   \n   f<0>(s0, s2);\n   f(s0, s2); // { dg-error \"\" } no matching function\n-  // { dg-message \"(candidate|deduced conflicting|ambiguous base class)\" \"candidate note\" { target *-*-* } 17 }\n+  // { dg-message \"(candidate|deduced conflicting|ambiguous base class)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "3dc666821398d4df1cac4d0891f59c2194ac68b2", "filename": "gcc/testsuite/g++.old-deja/g++.pt/expr2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexpr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexpr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexpr2.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -9,5 +9,5 @@ void foo(S<J + 2>);\t\t// { dg-message \"note\" }\n void bar()\n {\n   foo(S<3>()); // { dg-error \"\" } no way to deduce J from this.\n-  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 11 }\n+  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "a34c2aee8db17d2d99f52b42e6160eee3ae86116", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -14,9 +14,9 @@ template void g(int i, int j);\n void h()\n {\n   f(3, 'c'); // { dg-error \"\" } no matching function\n-  // { dg-message \"(candidate|deduced conflicting types)\" \"candidate note\" { target *-*-* } 16 }\n+  // { dg-message \"(candidate|deduced conflicting types)\" \"candidate note\" { target *-*-* } .-1 }\n   g(3, 'c'); // { dg-error \"\" } no matching function\n-  // { dg-message \"(candidate|deduced conflicting types)\" \"candidate note\" { target *-*-* } 18 }\n+  // { dg-message \"(candidate|deduced conflicting types)\" \"candidate note\" { target *-*-* } .-1 }\n }\n \n "}, {"sha": "293bb31701f621170df670ff4c13ded306f0ab32", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec6.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec6.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -25,9 +25,9 @@ void h()\n {\n   S1 s1;\n   s1.f(3, 'c'); // { dg-error \"\" } no matching function\n-  // { dg-message \"(candidate|deduced conflicting types)\" \"candidate note\" { target *-*-* } 27 }\n+  // { dg-message \"(candidate|deduced conflicting types)\" \"candidate note\" { target *-*-* } .-1 }\n \n   S2<char> s2;\n   s2.f(3, 'c'); // { dg-error \"\" } no matching function\n-  // { dg-message \"(candidate|deduced conflicting types)\" \"candidate note\" { target *-*-* } 31 }\n+  // { dg-message \"(candidate|deduced conflicting types)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "6d145590721ce30bf3ee7abd5dee81e70a7f7551", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -12,7 +12,7 @@ template <class U>\n struct B : public A<U>\n {\n   A_Type Func(); // { dg-error \"does not name a type\" \"err\" } implicit typename\n-  // { dg-message \"note\" \"note\" { target *-*-* } 14 }\n+  // { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n };\n \n "}, {"sha": "87b50d6b750a76bf203731dbf85b3050a72f8871", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename5.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -23,5 +23,5 @@ struct C : public B<U>\n \n template <class U>\n void C<U>::Func(A_Type) { // { dg-error \"declared void\" \"void\" } implicit typename\n-// { dg-error \"not declared\" \"decl\" { target *-*-* } 25 }\n+// { dg-error \"not declared\" \"decl\" { target *-*-* } .-1 }\n }"}, {"sha": "18bce27019fdff1145ef7f1b28010f9bb2ce6069", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename6.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -11,7 +11,7 @@ template <class U>\n struct B : public A<U>\n {\n   A_Type Func();\t\t// { dg-error \"does not name a type\" \"err\" }\n-  // { dg-message \"note\" \"note\" { target *-*-* } 13 }\n+  // { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n };\n \n template <class U>"}, {"sha": "4119250b86cb805df99d0d0f7db585ad8745bdcc", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename7.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename7.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -16,7 +16,7 @@ struct D : public A <C <T> > {\n   void f ()\n     {\n       B* new_entries = (B *) 0;  // { dg-error \"'B' was not declared in this scope\" \"B\" }\n-      // { dg-error \"'new_entries' was not declared in this scope\" \"new_entries\" { target *-*-* } 18 }\n-      // { dg-error \"expected\" \"exp\" { target *-*-* } 18 }\n+      // { dg-error \"'new_entries' was not declared in this scope\" \"new_entries\" { target *-*-* } .-1 }\n+      // { dg-error \"expected\" \"exp\" { target *-*-* } .-2 }\n     }\n };"}, {"sha": "55b1037d81339a69406508a778eb2359a1971512", "filename": "gcc/testsuite/g++.old-deja/g++.pt/unify4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Funify4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Funify4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Funify4.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,6 +8,6 @@ int\n main ()\n {\n   f (g);\t\t\t// { dg-error \"\" } ambiguous unification\n-  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } 10 }\n+  // { dg-message \"(candidate|deduce template parameter)\" \"candidate note\" { target *-*-* } .-1 }\n   return 0;\n }"}, {"sha": "d46856d52584d61b85ddabc58c78142f14f82910", "filename": "gcc/testsuite/g++.old-deja/g++.pt/unify8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Funify8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Funify8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Funify8.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -16,6 +16,6 @@ void Foo (float);     // { dg-message \"note\" } candidate\n void baz (int **p1)\n {\n   Foo (p1);   // { dg-error \"match\" } no such function\n-  // { dg-message \"(candidate|incompatible cv-qualifiers|conversion)\" \"candidate note\" { target *-*-* } 18 }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers|conversion)\" \"candidate note\" { target *-*-* } .-1 }\n   Bar (p1);   // OK\n }"}, {"sha": "ad276c6efd52f3e5e1e685a3c55c12d16b6ff977", "filename": "gcc/testsuite/g++.old-deja/g++.pt/vaarg3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fvaarg3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fvaarg3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fvaarg3.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -23,6 +23,6 @@ int main (void)\n {\n A dummy;\n PrintArgs (dummy, dummy); // { dg-message \"pass\" } cannot pass non-POD\n-// { dg-message \"required\" \"inst\" { target *-*-* } 25 }\n+// { dg-message \"required\" \"inst\" { target *-*-* } .-1 }\n return 0;\n }"}, {"sha": "62dd18d0ccb843610489e70fa4eb7e295c802682", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb22.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb22.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -24,5 +24,5 @@ bool operator==(const MyInt& a, const MyInt& b) // { dg-message \"operator==\" } c\n bool f()\n {\n   return 3 == MyInt();                          // { dg-error \"ambiguous\" \"err\" } \n-  // { dg-message \"operator==\" \"match candidate text\" { target *-*-* } 26 }\n+  // { dg-message \"operator==\" \"match candidate text\" { target *-*-* } .-1 }\n }"}, {"sha": "99c2ca979ad8f202fe5e656bde4c24e6c112dc73", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb4.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -31,7 +31,7 @@ public:\n         };\n \n class some_derived::func(derived_func_args &a)  // { dg-error \"does not name a type\" \"type\" } illegal member syntax\n-// { dg-error \"expected\" \"exp\" { target *-*-* } 33 }\n+// { dg-error \"expected\" \"exp\" { target *-*-* } .-1 }\n         {\n         std::cout << a.i << ' ' << a.f << std::endl;\n         }"}, {"sha": "b21343c478ac9fa8549257a08825d7b69339e372", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb44.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb44.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -15,7 +15,7 @@ template <class T>\n class Vector\n {\n   friend ostream& operator<< (ostream& out, const Vector<T> & vec); // { dg-warning \"non-template\" \"warn\" } \n-  // { dg-message \"note\" \"note\" { target *-*-* } 17 }\n+  // { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n };\n \n template <class T>"}, {"sha": "04a17a89296c66c12920d94fdf97f37aa90a4a3c", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb69.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb69.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb69.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb69.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -12,7 +12,7 @@ struct foo {\t\t        // { dg-message \"note\" } candidate\n struct bar : foo {\n   typedef int an_int;\n   bar() : bar::an_int(3) {}\t// { dg-error \"match\" \"match\" } not a base\n-  // { dg-message \"expected\" \"exp\" { target *-*-* } 14 }\n+  // { dg-message \"expected\" \"exp\" { target *-*-* } .-1 }\n };\n \n int"}, {"sha": "64a1cb5bec26afebcf5452920bcf7ee1a214b385", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb98.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb98.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb98.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb98.C?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -15,5 +15,5 @@\n     void f()\n     {\n       extent(b);  // { dg-error \"\" } no matching function\n-      // { dg-message \"(candidate|mismatched types)\" \"candidate note\" { target *-*-* } 17 }\n+      // { dg-message \"(candidate|mismatched types)\" \"candidate note\" { target *-*-* } .-1 }\n     }"}, {"sha": "68aa74ffe50bca536b605c9d5f74c7be46851333", "filename": "gcc/testsuite/gcc.dg/20031223-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2F20031223-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2F20031223-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20031223-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,6 +8,6 @@\n void f ()\n {\n  l: int; /* { dg-error \"a label can only be part of a statement and a declaration is not a statement\" \"not stmt\" } */\n- /* { dg-warning \"useless type name in empty declaration\" \"type name\" { target *-*-* } 10 } */\n- /* { dg-error \"label at end of compound statement\" \"label\" { target *-*-* } 10 } */\n+ /* { dg-warning \"useless type name in empty declaration\" \"type name\" { target *-*-* } .-1 } */\n+ /* { dg-error \"label at end of compound statement\" \"label\" { target *-*-* } .-2 } */\n }"}, {"sha": "46183831d096d815a0bc4250cb73077ca7fe7aea", "filename": "gcc/testsuite/gcc.dg/940510-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2F940510-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2F940510-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F940510-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=c89 -pedantic\" } */\n struct { int a[]; } x = { 0 };\t/* { dg-warning \"ISO C90 does not support flexible array members\" } */\n-/* { dg-error \"flexible array member in a struct with no named members\"  \"\" { target *-*-* }  3 } */\n+/* { dg-error \"flexible array member in a struct with no named members\"  \"\" { target *-*-* }  .-1 } */\n "}, {"sha": "901dfa1e23185d594e5d37ba921ebf82f7e110df", "filename": "gcc/testsuite/gcc.dg/990506-0.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2F990506-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2F990506-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F990506-0.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,6 +4,6 @@\n x()\n {\n   foo (i);\n-  /* { dg-error \"undeclared\" \"undeclared-variable message\" { target *-*-* } 6 } */\n-  /* { dg-message \"function it appears in\" \"reminder message\" { target *-*-* } 6 } */ \n+  /* { dg-error \"undeclared\" \"undeclared-variable message\" { target *-*-* } .-1 } */\n+  /* { dg-message \"function it appears in\" \"reminder message\" { target *-*-* } .-2 } */ \n }"}, {"sha": "ad39373fb9f071130c63c810390628016ac7f9de", "filename": "gcc/testsuite/gcc.dg/Walloca-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -25,7 +25,7 @@ void foo1 (size_t len, size_t len2, size_t len3)\n   useit (s);\t\t\t// OK, constant argument to alloca\n \n   s = alloca (num);\t\t// { dg-warning \"large due to conversion\" \"\" { target lp64 } }\n-  // { dg-warning \"unbounded use of 'alloca'\" \"\" { target { ! lp64 } } 27 }\n+  // { dg-warning \"unbounded use of 'alloca'\" \"\" { target { ! lp64 } } .-1 }\n   useit (s);\n \n   s = alloca (30000);\t\t/* { dg-warning \"is too large\" } */"}, {"sha": "766ff8d8af39f9e2f8e925d43fa8d98eb7368a5f", "filename": "gcc/testsuite/gcc.dg/Walloca-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-2.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -37,8 +37,8 @@ g3 (int n)\n   if (n > 0 && n < 3000)\n     {\n       p = __builtin_alloca (n); // { dg-warning \"'alloca' may be too large\" \"\" { target lp64} }\n-      // { dg-message \"note:.*argument may be as large as 2999\" \"note\" { target lp64 } 39 }\n-      // { dg-warning \"unbounded use of 'alloca'\" \"\" { target { ! lp64 } } 39 }\n+      // { dg-message \"note:.*argument may be as large as 2999\" \"note\" { target lp64 } .-1 }\n+      // { dg-warning \"unbounded use of 'alloca'\" \"\" { target { ! lp64 } } .-2 }\n     }\n   else\n     p = __builtin_malloc (n);"}, {"sha": "dc13e8fab36b14a48c8a88e94d6627219103a0e0", "filename": "gcc/testsuite/gcc.dg/Wconversion-integer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -41,9 +41,9 @@ void h (int x)\n   uc = 'A';\n \n   uc = x ? 1U : -1; /* { dg-warning \" conversion\" \"conversion\" } */\n-  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"implicit\" { target *-*-* } 43 } */\n+  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"implicit\" { target *-*-* } .-1 } */\n   uc = x ? SCHAR_MIN : 1U; /* { dg-warning \" conversion\" \"conversion\" } */\n-  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"implicit\" { target *-*-* } 45 } */\n+  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"implicit\" { target *-*-* } .-1 } */\n   uc = x ? 1 : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n   uc = x ? SCHAR_MIN : 1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n   ui = x ? 1U : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */"}, {"sha": "85ccec7989ff74c0b0976d4d08501aa94ae800e6", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-8.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -25,15 +25,15 @@ int v4 = C;\n enum e3\n {\n   F = sizeof (struct t3),\t/* { dg-bogus \"invalid in C\\[+\\]\\[+\\]\" } */\n-  /* { dg-error \"invalid application of 'sizeof'\" \"\" { target *-*-* } 27 } */\n+  /* { dg-error \"invalid application of 'sizeof'\" \"\" { target *-*-* } .-1 } */\n   G = __alignof__ (struct t4), /* { dg-bogus \"invalid in C\\[+\\]\\[+\\]\" } */\n-  /* { dg-error \"invalid application of '__alignof__'\" \"\" { target *-*-* } 29 } */\n+  /* { dg-error \"invalid application of '__alignof__'\" \"\" { target *-*-* } .-1 } */\n   H\n };\n \n __typeof__ (struct s5 { int i; }) v5; /* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n __typeof__ (struct t5) w5; /* { dg-bogus \"invalid in C\\[+\\]\\[+\\]\" } */\n-  /* { dg-error \"storage size of 'w5' isn't known\" \"\" { target *-*-* } 35 } */\n+  /* { dg-error \"storage size of 'w5' isn't known\" \"\" { target *-*-* } .-1 } */\n \n int\n f1 (struct s1 *p)"}, {"sha": "4a96e8f505d98d87599e2a1769262164caf7d3cb", "filename": "gcc/testsuite/gcc.dg/Wimplicit-int-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-int-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-int-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-int-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,7 +4,7 @@\n static l; /* { dg-warning \"type defaults to\" } */\n \n foo (a) /* { dg-warning \"return type defaults to\" } */\n-/* { dg-warning \"type of .a. defaults to .int.\" \"type\" { target *-*-* } 6 } */\n+/* { dg-warning \"type of .a. defaults to .int.\" \"type\" { target *-*-* } .-1 } */\n {\n   auto p; /* { dg-warning \"type defaults to\" } */\n   typedef bar; /* { dg-warning \"type defaults to\" } */"}, {"sha": "4ff16f3673829532374d8daa244bf2e5484d416f", "filename": "gcc/testsuite/gcc.dg/Wimplicit-int-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-int-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-int-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-int-2.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,7 +4,7 @@\n static l; /* { dg-error \"type defaults to\" } */\n \n foo (a) /* { dg-error \"return type defaults to\" } */\n-/* { dg-error \"type of .a. defaults to .int.\" \"type\" { target *-*-* } 6 } */\n+/* { dg-error \"type of .a. defaults to .int.\" \"type\" { target *-*-* } .-1 } */\n {\n   auto p; /* { dg-error \"type defaults to\" } */\n   typedef bar; /* { dg-error \"type defaults to\" } */"}, {"sha": "c9c6e8e5e95674076dcf96e937816fc79ed9b1d5", "filename": "gcc/testsuite/gcc.dg/Wimplicit-int-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-int-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-int-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-int-4.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,7 +4,7 @@\n static l; /* { dg-warning \"type defaults to\" } */\n \n foo (a) /* { dg-warning \"return type defaults to\" } */\n-/* { dg-warning \"type of .a. defaults to .int.\" \"type\" { target *-*-* } 6 } */\n+/* { dg-warning \"type of .a. defaults to .int.\" \"type\" { target *-*-* } .-1 } */\n {\n   auto p; /* { dg-warning \"type defaults to\" } */\n   typedef bar; /* { dg-warning \"type defaults to\" } */"}, {"sha": "66cc3a59327356942be83b3f6397d2cefc8e64af", "filename": "gcc/testsuite/gcc.dg/Wpointer-sign-Wall.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-Wall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-Wall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-Wall.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -2,7 +2,7 @@\n \n /* { dg-options \"-Wall\" } */\n \n-void foo(unsigned long* ulp); /* { dg-message \"note: expected '\\[^\\n'\\]*' but argument is of type '\\[^\\n'\\]*'\" \"note: expected\" { target *-*-* } 5 } */\n+void foo(unsigned long* ulp); /* { dg-message \"note: expected '\\[^\\n'\\]*' but argument is of type '\\[^\\n'\\]*'\" \"note: expected\" { target *-*-* } . } */\n \n \n void bar(long* lp) {"}, {"sha": "7b1eef2317138db158655f09967677c8cf26068e", "filename": "gcc/testsuite/gcc.dg/Wpointer-sign-pedantic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-pedantic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-pedantic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-pedantic.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -2,7 +2,7 @@\n \n /* { dg-options \"-pedantic\" } */\n \n-void foo(unsigned long* ulp);/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } 5 } */\n+void foo(unsigned long* ulp);/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } . } */\n \n void bar(long* lp) {\n   foo(lp); /* { dg-warning \"differ in signedness\" } */"}, {"sha": "0d15aac59c597e77f13dea4ade66adf8e2d3466c", "filename": "gcc/testsuite/gcc.dg/Wshadow-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -13,7 +13,7 @@ void foo (double decl1)\t\t/* { dg-warning \"shadows a global decl\" } */\n void foo1 (int d)\t\t/* { dg-message \"note: previous definition\" } */\n {\n   double d;\t /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-  /* { dg-error \"redeclared as different\" \"\" { target *-*-* } 15 } */\n+  /* { dg-error \"redeclared as different\" \"\" { target *-*-* } .-1 } */\n }\n \n void foo2 (int d)\t\t/* { dg-message \"shadowed declaration\" } */"}, {"sha": "0fa41bca3035c4084c197c32d6232c57705593d5", "filename": "gcc/testsuite/gcc.dg/Wshadow-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-3.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -18,4 +18,4 @@ int f9(x) int x; { return 0; }\n int f10(v) { return 0; } /* { dg-warning \"declaration of 'v' shadows a global declaration\" } */\n int f11(int a, int b(int a));\n int f12(int a, int b(int a, int x[a])); /* { dg-warning \"declaration of 'a' shadows a parameter\" } */\n-/* { dg-message \"shadowed declaration\" \"outer parm\" { target *-*-* } 20 } */\n+/* { dg-message \"shadowed declaration\" \"outer parm\" { target *-*-* } .-1 } */"}, {"sha": "e9e18262aaa95c743153d523344529cc5be296ee", "filename": "gcc/testsuite/gcc.dg/Wswitch-enum-error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum-error.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -20,10 +20,10 @@ foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n     default: break;\n     }\n   switch (ei) /* { dg-warning \"enumeration value 'e1' not handled in switch\" \"enum e1\" } */\n-    { /* { dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } 22 } */\n+    { /* { dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } .-1 } */\n     }\n   switch (ej) /* { dg-error \"enumeration value 'e1' not handled in switch\" \"enum e1\" } */\n-    { /* { dg-error \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } 25 } */\n+    { /* { dg-error \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } .-1 } */\n     default: break;\n     }\n   switch (ek) /* { dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" } */"}, {"sha": "010712e59c083458b8e39c8a0b24144e1f941b21", "filename": "gcc/testsuite/gcc.dg/Wswitch-enum.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -20,10 +20,10 @@ foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n     default: break;\n     }\n   switch (ei) /* { dg-warning \"enumeration value 'e1' not handled in switch\" \"enum e1\" } */\n-    { /* { dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } 22 } */\n+    { /* { dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } .-1 } */\n     }\n   switch (ej) /* { dg-warning \"enumeration value 'e1' not handled in switch\" \"enum e1\" } */\n-    { /* { dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } 25 } */\n+    { /* { dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } .-1 } */\n     default: break;\n     }\n   switch (ek) /* { dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" } */"}, {"sha": "0d2f0b37eaeccc05d5f7e2c71d531472b08ac42b", "filename": "gcc/testsuite/gcc.dg/Wswitch-error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-error.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -20,10 +20,10 @@ foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n     default: break;\n     }\n   switch (ei) /* { dg-error \"enumeration value 'e1' not handled in switch\" \"enum e1\" } */\n-    { /* { dg-error \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } 22 } */\n+    { /* { dg-error \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } .-1 } */\n     }\n   switch (ej) /* { dg-warning \"enumeration value 'e1' not handled in switch\" \"enum e1\" } */\n-    { /* { dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } 25 } */\n+    { /* { dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } .-1 } */\n     default: break;\n     }\n   switch (ek) /* { dg-error \"enumeration value 'e2' not handled in switch\" \"enum e2\" } */"}, {"sha": "7bf5eb19375c0983a7468c8c8a7e039d64b6526f", "filename": "gcc/testsuite/gcc.dg/Wswitch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -20,7 +20,7 @@ foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n     default: break;\n     }\n   switch (ei) /* { dg-warning \"enumeration value 'e1' not handled in switch\" \"enum e1\" } */\n-    { /*{ dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } 22 } */\n+    { /*{ dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } .-1 } */\n     }\n   switch (ej)\n     {"}, {"sha": "bf08734039d4d2b4e0087d4cc837e9a0b835bdcd", "filename": "gcc/testsuite/gcc.dg/Wtype-limits-Wextra.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -13,21 +13,21 @@ void a (unsigned char x)\n     return;\n   if (255 >= x) /* { dg-warning \"comparison is always true due to limited range of data type\" } */\n     return;\n-  if ((int)x <= 255) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } 16 } */\n+  if ((int)x <= 255) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } . } */\n     return;\n   if (255 >= (unsigned char) 1)\n     return;\n \n }\n \n void b (unsigned short x)\n-{                    /* { dg-warning \"comparison of unsigned expression < 0 is always false\" \"\" { target { ! int32plus } } 25 } */\n+{                    /* { dg-warning \"comparison of unsigned expression < 0 is always false\" \"\" { target { ! int32plus } } .+1 } */\n   if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { int32plus } } } */\n-                     /* { dg-warning \"comparison of unsigned expression >= 0 is always true\" \"\" { target { ! int32plus } } 27 } */\n+                     /* { dg-warning \"comparison of unsigned expression >= 0 is always true\" \"\" { target { ! int32plus } } .+1 } */\n   if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { int32plus } } } */\n-                     /* { dg-warning \"comparison of unsigned expression < 0 is always false\" \"\" { target { ! int32plus } } 29 } */\n+                     /* { dg-warning \"comparison of unsigned expression < 0 is always false\" \"\" { target { ! int32plus } } .+1 } */\n   if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { int32plus } } } */\n-                     /* { dg-warning \"comparison of unsigned expression >= 0 is always true\" \"\" { target { ! int32plus } } 31 } */\n+                     /* { dg-warning \"comparison of unsigned expression >= 0 is always true\" \"\" { target { ! int32plus } } .+1 } */\n   if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { int32plus } } } */\n }\n \n@@ -61,7 +61,7 @@ void e (unsigned long long x)\n \n int test (int x) \n {\n-  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } 64 } */\n+  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } . } */\n     return 1;\n   else \n     return 0;"}, {"sha": "c137385ee5ea164596110f84489809b35ab41f76", "filename": "gcc/testsuite/gcc.dg/Wtype-limits.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -13,21 +13,21 @@ void a (unsigned char x)\n     return;\n   if (255 >= x) /* { dg-warning \"comparison is always true due to limited range of data type\" } */\n     return;\n-  if ((int)x <= 255) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } 16 } */\n+  if ((int)x <= 255) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } . } */\n     return;\n   if (255 >= (unsigned char) 1)\n     return;\n \n }\n \n void b (unsigned short x)\n-{                    /* { dg-warning \"comparison of unsigned expression < 0 is always false\" \"\" { target { ! int32plus } } 25 } */\n+{                    /* { dg-warning \"comparison of unsigned expression < 0 is always false\" \"\" { target { ! int32plus } } .+1 } */\n   if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { int32plus } } } */\n-                     /* { dg-warning \"comparison of unsigned expression >= 0 is always true\" \"\" { target { ! int32plus } } 27 } */\n+                     /* { dg-warning \"comparison of unsigned expression >= 0 is always true\" \"\" { target { ! int32plus } } .+1 } */\n   if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { int32plus } } } */  \n-                     /* { dg-warning \"comparison of unsigned expression < 0 is always false\" \"\" { target { ! int32plus } } 29 } */\n+                     /* { dg-warning \"comparison of unsigned expression < 0 is always false\" \"\" { target { ! int32plus } } .+1 } */\n   if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { int32plus } } } */\n-                     /* { dg-warning \"comparison of unsigned expression >= 0 is always true\" \"\" { target { ! int32plus } } 31 } */\n+                     /* { dg-warning \"comparison of unsigned expression >= 0 is always true\" \"\" { target { ! int32plus } } .+1 } */\n   if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { int32plus } } } */\n }\n \n@@ -61,7 +61,7 @@ void e (unsigned long long x)\n \n int test (int x) \n {\n-  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } 64 } */\n+  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } . } */\n     return 1;\n   else \n     return 0;"}, {"sha": "5c0ba5105658dc8577c8d92cba535244d5f7a533", "filename": "gcc/testsuite/gcc.dg/Wvla-larger-than-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-2.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -24,7 +24,7 @@ f2 (__SIZE_TYPE__ a)\n     {\n       // 11 * 4 bytes = 44: Not OK.\n       uint32_t x[a]; // { dg-warning \"array may be too large\" }\n-      // { dg-message \"note:.*argument may be as large as 44\" \"note\" { target *-*-* } 26 }\n+      // { dg-message \"note:.*argument may be as large as 44\" \"note\" { target *-*-* } .-1 }\n       f0 (x);\n     }\n }"}, {"sha": "e283e0d1692124d6f36b5bd8f7c5006d4b71eafe", "filename": "gcc/testsuite/gcc.dg/anon-struct-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-5.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,5 +3,5 @@\n /* { dg-options \"-std=c99 -pedantic-errors\" } */\n \n struct Foo { int; }; /* { dg-bogus \"unnamed\" } */\n-/* { dg-error \"declaration does not declare anything\" \"int;\" { target *-*-* } 5 } */\n-/* { dg-error \"struct has no members\" \"no members\" { target *-*-* } 5 } */\n+/* { dg-error \"declaration does not declare anything\" \"int;\" { target *-*-* } .-1 } */\n+/* { dg-error \"struct has no members\" \"no members\" { target *-*-* } .-2 } */"}, {"sha": "c1c73ff62b9b306c05aa0b2d073d4a67c6e5fe15", "filename": "gcc/testsuite/gcc.dg/array-10.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Farray-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Farray-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-10.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -21,13 +21,13 @@ struct c4 { int (*x)[(__UINTPTR_TYPE__)&a]; }; /* { dg-error \"19:at file scope\"\n typeof (int [(__UINTPTR_TYPE__)&a]) c5; /* { dg-error \"37:at file scope\" } */\n \n int d0[1/0]; /* { dg-error \"5:at file scope\" } */\n-/* { dg-warning \"9:division by zero\" \"\" { target *-*-* } 23 } */\n+/* { dg-warning \"9:division by zero\" \"\" { target *-*-* } .-1 } */\n int (*d1)[1/0]; /* { dg-error \"7:at file scope\" } */\n-/* { dg-warning \"12:division by zero\" \"\" { target *-*-* } 25 } */\n+/* { dg-warning \"12:division by zero\" \"\" { target *-*-* } .-1 } */\n int (*d2())[1/0]; /* { dg-error \"7:at file scope\" } */\n-/* { dg-warning \"14:division by zero\" \"\" { target *-*-* } 27 } */\n+/* { dg-warning \"14:division by zero\" \"\" { target *-*-* } .-1 } */\n struct d3 { int x[1/0]; }; /* { dg-error \"17:at file scope\" } */\n-/* { dg-warning \"20:division by zero\" \"\" { target *-*-* } 29 } */\n+/* { dg-warning \"20:division by zero\" \"\" { target *-*-* } .-1 } */\n struct d4 { int (*x)[1/0]; }; /* { dg-error \"19:at file scope\" } */\n-/* { dg-warning \"23:division by zero\" \"\" { target *-*-* } 31 } */\n+/* { dg-warning \"23:division by zero\" \"\" { target *-*-* } .-1 } */\n typeof (int [1/0]) d5; /* { dg-error \"20:at file scope\" } */"}, {"sha": "3b216a38e062557b843368afe889aeb0d4c3deff", "filename": "gcc/testsuite/gcc.dg/array-11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Farray-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Farray-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-11.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -9,7 +9,7 @@ struct f { int w; T x; };\n struct g { struct f f; };\n struct g g1 = { { 0, { } } };\n struct g g2 = { { 0, { 1 } } }; /* { dg-error \"nested context\" \"nested\" } */\n-\t\t\t\t/* { dg-message \"near init\" \"near\" { target *-*-* } 11 } */\n+\t\t\t\t/* { dg-message \"near init\" \"near\" { target *-*-* } .-1 } */\n struct h { int x[0]; int y; };\n struct h h1 = { { 0 }, 1 }; /* { dg-warning \"excess elements\" \"excess\" } */\n-\t\t\t    /* { dg-message \"near init\" \"before end\" { target *-*-* } 14 } */\n+\t\t\t    /* { dg-message \"near init\" \"before end\" { target *-*-* } .-1 } */"}, {"sha": "8e7c0adad2e0b47a04c012e03c1d289c0fe0e610", "filename": "gcc/testsuite/gcc.dg/array-15.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Farray-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Farray-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-15.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -5,48 +5,48 @@\n struct S\n {\n   int a[1][][2]; /* { dg-error \"array type has incomplete element type\" } */\n-  /* { dg-message \"declaration of .a. as multidimensional array must have bounds\" \"\" { target *-*-* } 7 } */\n+  /* { dg-message \"declaration of .a. as multidimensional array must have bounds\" \"\" { target *-*-* } .-1 } */\n };\n \n struct R\n {\n   int i;\n   int a[][]; /* { dg-error \"array type has incomplete element type\" } */\n-  /* { dg-message \"declaration of .a. as multidimensional array must have bounds\" \"\" { target *-*-* } 14 } */\n+  /* { dg-message \"declaration of .a. as multidimensional array must have bounds\" \"\" { target *-*-* } .-1 } */\n };\n \n typedef int T[];\n typedef int U[][]; /* { dg-error \"array type has incomplete element type\" } */\n-/* { dg-message \"declaration of .U. as multidimensional array must have bounds\" \"\" { target *-*-* } 19 } */\n+/* { dg-message \"declaration of .U. as multidimensional array must have bounds\" \"\" { target *-*-* } .-1 } */\n \n int x[][]; /* { dg-error \"array type has incomplete element type\" } */\n-/* { dg-message \"declaration of .x. as multidimensional array must have bounds\" \"\" { target *-*-* } 22 } */\n+/* { dg-message \"declaration of .x. as multidimensional array must have bounds\" \"\" { target *-*-* } .-1 } */\n \n struct N;\n \n void\n fn1 (int z[][]) /* { dg-error \"array type has incomplete element type\" } */\n-/* { dg-message \"declaration of .z. as multidimensional array must have bounds\" \"\" { target *-*-* } 28 } */\n+/* { dg-message \"declaration of .z. as multidimensional array must have bounds\" \"\" { target *-*-* } .-1 } */\n {\n   int a[1][][2]; /* { dg-error \"array type has incomplete element type\" } */\n-  /* { dg-message \"declaration of .a. as multidimensional array must have bounds\" \"\" { target *-*-* } 31 } */\n+  /* { dg-message \"declaration of .a. as multidimensional array must have bounds\" \"\" { target *-*-* } .-1 } */\n   /* OK */\n   int b[3][2][1];\n   int c[1][2][3][]; /* { dg-error \"array type has incomplete element type\" } */\n-  /* { dg-message \"declaration of .c. as multidimensional array must have bounds\" \"\" { target *-*-* } 35 } */\n+  /* { dg-message \"declaration of .c. as multidimensional array must have bounds\" \"\" { target *-*-* } .-1 } */\n   T d[1]; /* { dg-error \"array type has incomplete element type\" } */\n-  /* { dg-message \"declaration of .d. as multidimensional array must have bounds\" \"\" { target *-*-* } 37 } */\n+  /* { dg-message \"declaration of .d. as multidimensional array must have bounds\" \"\" { target *-*-* } .-1 } */\n   T e[]; /* { dg-error \"array type has incomplete element type\" } */\n-  /* { dg-message \"declaration of .e. as multidimensional array must have bounds\" \"\" { target *-*-* } 39 } */\n+  /* { dg-message \"declaration of .e. as multidimensional array must have bounds\" \"\" { target *-*-* } .-1 } */\n \n   /* This array has incomplete element type, but is not multidimensional.  */\n   struct N f[1]; /* { dg-error \"array type has incomplete element type\" } */\n-  /* { dg-bogus \"declaration of .f. as multidimensional array must have bounds\" \"\" { target *-*-* } 43 } */\n+  /* { dg-bogus \"declaration of .f. as multidimensional array must have bounds\" \"\" { target *-*-* } .-1 } */\n }\n \n void fn2 (int [][]); /* { dg-error \"array type has incomplete element type\" } */\n-/* { dg-message \"declaration of multidimensional array must have bounds\" \"\" { target *-*-* } 47 } */\n+/* { dg-message \"declaration of multidimensional array must have bounds\" \"\" { target *-*-* } .-1 } */\n /* OK */\n void fn3 (int [][*]);\n void fn4 (T []); /* { dg-error \"array type has incomplete element type\" } */\n-/* { dg-message \"declaration of multidimensional array must have bounds\" \"\" { target *-*-* } 51 } */\n+/* { dg-message \"declaration of multidimensional array must have bounds\" \"\" { target *-*-* } .-1 } */"}, {"sha": "f207af58d41fbb19872566eed1fcb8e70a53ae31", "filename": "gcc/testsuite/gcc.dg/array-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Farray-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Farray-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-2.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -8,7 +8,7 @@ struct f { int w; int x[]; };\n struct g { struct f f; };\n struct g g1 = { { 0, { } } };\n struct g g2 = { { 0, { 1 } } }; /* { dg-error \"nested context\" \"nested\" } */\n-\t\t\t\t/* { dg-message \"near init\" \"near\" { target *-*-* } 10 } */\n+\t\t\t\t/* { dg-message \"near init\" \"near\" { target *-*-* } .-1 } */\n struct h { int x[0]; int y; };\n struct h h1 = { { 0 }, 1 }; /* { dg-warning \"excess elements\" \"excess\" } */\n-\t\t\t    /* { dg-message \"near init\" \"before end\" { target *-*-* } 13 } */\n+\t\t\t    /* { dg-message \"near init\" \"before end\" { target *-*-* } .-1 } */"}, {"sha": "644d84f14aab78394c8c997c84eab7ead2e43c9c", "filename": "gcc/testsuite/gcc.dg/array-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Farray-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Farray-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-8.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -43,6 +43,6 @@ g (void)\n   pv[0]; /* { dg-warning \"dereferencing 'void \\\\*' pointer\" } */\n   0[pv]; /* { dg-warning \"dereferencing 'void \\\\*' pointer\" } */\n   sip[0]; /* { dg-error \"invalid use of undefined type 'struct si'\" } */\n-  /* { dg-error \"dereferencing pointer to incomplete type\" \"incomplete\" { target *-*-* } 45 } */\n+  /* { dg-error \"dereferencing pointer to incomplete type\" \"incomplete\" { target *-*-* } .-1 } */\n   0[sip]; /* { dg-error \"invalid use of undefined type 'struct si'\" } */\n }"}, {"sha": "d962a3729b7d73f4a8e4ce53813c59316d535a49", "filename": "gcc/testsuite/gcc.dg/array-const-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Farray-const-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Farray-const-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-const-2.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,4 +6,4 @@\n \n extern int i;\n int a[] = { [1 ? 1 : i] = 0 }; /* { dg-warning \"array index in initializer is not an integer constant expression\" } */\n-/* { dg-message \"near initialization\" \"near init\" { target *-*-* } 8 } */\n+/* { dg-message \"near initialization\" \"near init\" { target *-*-* } .-1 } */"}, {"sha": "b7089284f8cd201fdd036768d742e8f805224288", "filename": "gcc/testsuite/gcc.dg/array-const-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Farray-const-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Farray-const-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-const-3.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -6,4 +6,4 @@\n \n extern int i;\n int a[] = { [1 ? 1 : i] = 0 }; /* { dg-error \"array index in initializer is not an integer constant expression\" } */\n-/* { dg-message \"near initialization\" \"near init\" { target *-*-* } 8 } */\n+/* { dg-message \"near initialization\" \"near init\" { target *-*-* } .-1 } */"}, {"sha": "246e07c58914da9c655fa2dbd3793a6c620a08f0", "filename": "gcc/testsuite/gcc.dg/bitfld-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -25,7 +25,7 @@ struct bf1\n   unsigned long g: 5;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n   ui h: 5;\n   enum foo i: 2;\t\t/* { dg-warning \"narrower\" } */\n-    /* { dg-warning \"GCC extension|ISO C\" \"extension\" { target *-*-* } 27 } */\n+    /* { dg-warning \"GCC extension|ISO C\" \"extension\" { target *-*-* } .-1 } */\n   enum foo j: 3;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n   unsigned int k: 256;\t\t/* { dg-error \"exceeds its type\" } */\n };"}, {"sha": "c73642c79d9e4cf2954ae9cce1fd2ae8cca17ea6", "filename": "gcc/testsuite/gcc.dg/bitfld-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-8.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,4 +4,4 @@\n /* { dg-options \"\" } */\n \n struct { int i : 1999; } x; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"width\" \"bit-field too wide\" { target *-*-* } 6 } */\n+/* { dg-error \"width\" \"bit-field too wide\" { target *-*-* } .-1 } */"}, {"sha": "9b21afdd6697c7960634459822ba0494f847eae0", "filename": "gcc/testsuite/gcc.dg/builtin-redefine.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-redefine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-redefine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-redefine.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -7,17 +7,17 @@\n \n #if defined(__DATE__)\n #error \"__DATE__ is defined, but should not be (-U command line error)\"\n-/* { dg-bogus \"__DATE__ is defined\" \"\" { target *-*-* } 9 } */\n+/* { dg-bogus \"__DATE__ is defined\" \"\" { target *-*-* } .-1 } */\n #endif\n \n #if __TIME__ != X\n #error \"__TIME__ is not defined as expected (-D command line error)\"\n-/* { dg-bogus \"__TIME__ is not defined\" \"\" { target *-*-* } 14 } */\n+/* { dg-bogus \"__TIME__ is not defined\" \"\" { target *-*-* } .-1 } */\n #endif\n \n #if !defined(__TIMESTAMP__)\n #error \"__TIMESTAMP__ is not defined (built-in macro expectation error)\"\n-/* { dg-bogus \"__TIMESTAMP__ is not defined\" \"\" { target *-*-* } 19 } */\n+/* { dg-bogus \"__TIMESTAMP__ is not defined\" \"\" { target *-*-* } .-1 } */\n #endif\n \n \n@@ -57,7 +57,7 @@\n \n #if !defined(__FILE__) || !defined(__BASE_FILE__)\n #error \"Expected built-in is not defined (built-in macro expectation error)\"\n-/* { dg-bogus \"Expected built-in is not defined\" \"\" { target *-*-* } 59 } */\n+/* { dg-bogus \"Expected built-in is not defined\" \"\" { target *-*-* } .-1 } */\n #endif\n \n #define __FILE__ \"X\"         /* Define while already defined.  */\n@@ -68,7 +68,7 @@\n \n #if !defined(__LINE__) || !defined(__INCLUDE_LEVEL__) || !defined(__COUNTER__)\n #error \"Expected built-in is not defined (built-in macro expectation error)\"\n-/* { dg-bogus \"Expected built-in is not defined\" \"\" { target *-*-* } 70 } */\n+/* { dg-bogus \"Expected built-in is not defined\" \"\" { target *-*-* } .-1 } */\n #endif\n \n #define __LINE__ 0           /* { dg-warning \"\\\"__LINE__\\\" redef\" } */"}, {"sha": "1b0c218b08b967118826cfa1d47c481431452c7f", "filename": "gcc/testsuite/gcc.dg/c11-noreturn-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-noreturn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-noreturn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-noreturn-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -18,14 +18,14 @@ _Noreturn int\n f4 (void)\n {\n   return 1; /* { dg-warning \"has a 'return' statement\" } */\n-  /* { dg-warning \"does return\" \"second warning\" { target *-*-* } 20 } */\n+  /* { dg-warning \"does return\" \"second warning\" { target *-*-* } .-1 } */\n }\n \n _Noreturn void\n f5 (void)\n {\n   return; /* { dg-warning \"has a 'return' statement\" } */\n-  /* { dg-warning \"does return\" \"second warning\" { target *-*-* } 27 } */\n+  /* { dg-warning \"does return\" \"second warning\" { target *-*-* } .-1 } */\n }\n \n _Noreturn void"}, {"sha": "58fafdb2e14d75f19a66c82b1eb71695903ccc5d", "filename": "gcc/testsuite/gcc.dg/c11-noreturn-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-noreturn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-noreturn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-noreturn-2.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -23,14 +23,14 @@ noreturn int\n f4 (void)\n {\n   return 1; /* { dg-warning \"has a 'return' statement\" } */\n-  /* { dg-warning \"does return\" \"second warning\" { target *-*-* } 25 } */\n+  /* { dg-warning \"does return\" \"second warning\" { target *-*-* } .-1 } */\n }\n \n noreturn void\n f5 (void)\n {\n   return; /* { dg-warning \"has a 'return' statement\" } */\n-  /* { dg-warning \"does return\" \"second warning\" { target *-*-* } 32 } */\n+  /* { dg-warning \"does return\" \"second warning\" { target *-*-* } .-1 } */\n }\n \n noreturn void"}, {"sha": "9799b972e0cbdc821af46199a42fb572fc8b9ae8", "filename": "gcc/testsuite/gcc.dg/c11-static-assert-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-static-assert-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-static-assert-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-static-assert-3.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -3,7 +3,7 @@\n /* { dg-options \"-std=c11 -pedantic-errors\" } */\n \n _Static_assert (__INT_MAX__ * 2, \"overflow\"); /* { dg-warning \"integer overflow in expression\" } */\n-/* { dg-error \"overflow in constant expression\" \"error\" { target *-*-* } 5 } */\n+/* { dg-error \"overflow in constant expression\" \"error\" { target *-*-* } .-1 } */\n \n _Static_assert ((void *)(__SIZE_TYPE__)16, \"non-integer\"); /* { dg-error \"not an integer\" } */\n "}, {"sha": "358abbfe252e48bc2a52dc1ae01565524cf2aef8", "filename": "gcc/testsuite/gcc.dg/c90-arraydecl-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-arraydecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-arraydecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-arraydecl-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -16,15 +16,15 @@ void foo1 (int, int [*]); /* { dg-error \"ISO C90\" \"\\[*\\] not in C90\" } */\n    is a C99 feature.  */\n \n void bar0 (int a[const]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"ISO C90\" \"\\[quals\\] not in C90\" { target *-*-* } 18 } */\n+/* { dg-error \"ISO C90\" \"\\[quals\\] not in C90\" { target *-*-* } .-1 } */\n void bar1 (int a[const 2]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"ISO C90\" \"\\[quals expr\\] not in C90\" { target *-*-* } 20 } */\n+/* { dg-error \"ISO C90\" \"\\[quals expr\\] not in C90\" { target *-*-* } .-1 } */\n void bar2 (int a[static 2]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"ISO C90\" \"\\[static expr\\] not in C90\" { target *-*-* } 22 } */\n+/* { dg-error \"ISO C90\" \"\\[static expr\\] not in C90\" { target *-*-* } .-1 } */\n void bar3 (int a[static const 2]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"ISO C90\" \"\\[static quals expr\\] not in C90\" { target *-*-* } 24 } */\n+/* { dg-error \"ISO C90\" \"\\[static quals expr\\] not in C90\" { target *-*-* } .-1 } */\n void bar4 (int a[const static 2]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"ISO C90\" \"\\[quals static expr\\] not in C90\" { target *-*-* } 26 } */\n+/* { dg-error \"ISO C90\" \"\\[quals static expr\\] not in C90\" { target *-*-* } .-1 } */\n \n /* Because [*] isn't properly implemented and so warns, we don't test here\n    for [const *] yet.  */"}, {"sha": "43648955d41e803f2ef147a2147e7f52de9449c6", "filename": "gcc/testsuite/gcc.dg/c90-complex-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-complex-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-complex-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-complex-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,4 +4,4 @@\n /* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n \n _Complex double foo; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"C\" \"_Complex not in C90\" { target *-*-* } 6 } */\n+/* { dg-error \"C\" \"_Complex not in C90\" { target *-*-* } .-1 } */"}, {"sha": "824288f34b9c6b3aa925324ecca9a4634e2d3412", "filename": "gcc/testsuite/gcc.dg/c90-complit-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-complit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-complit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-complit-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -10,11 +10,11 @@ void\n foo (void)\n {\n   (int) { 1 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-  /* { dg-error \"compound literal\" \"scalar\" { target *-*-* } 12 } */\n+  /* { dg-error \"compound literal\" \"scalar\" { target *-*-* } .-1 } */\n   (struct s) { 1, 2 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-  /* { dg-error \"compound literal\" \"struct\" { target *-*-* } 14 } */\n+  /* { dg-error \"compound literal\" \"struct\" { target *-*-* } .-1 } */\n   (union u) { 1 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-  /* { dg-error \"compound literal\" \"union\" { target *-*-* } 16 } */\n+  /* { dg-error \"compound literal\" \"union\" { target *-*-* } .-1 } */\n   (int [1]) { 1 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-  /* { dg-error \"compound literal\" \"array\" { target *-*-* } 18 } */\n+  /* { dg-error \"compound literal\" \"array\" { target *-*-* } .-1 } */\n }"}, {"sha": "5cd704a8d7335228df5999ec97a845939b3a65dd", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-11.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -19,9 +19,9 @@ f (void)\n   struct s a = { atan (1.0) }; /* { dg-error \"is not a constant expression|near initialization\" } */\n   /* Overflow.  */\n   struct t b = { INT_MAX + 1 }; /* { dg-warning \"integer overflow in expression\" } */\n-  /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 21 } */\n+  /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   struct t c = { DBL_MAX }; /* { dg-warning \"overflow in implicit constant conversion\" } */\n-  /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 23 } */\n+  /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   /* Bad operator outside sizeof.  */\n   struct s d = { 1 ? 1.0 : atan (a.d) }; /* { dg-error \"is not a constant expression|near initialization\" } */\n }"}, {"sha": "7a9120506be220d6e7c556196157a2d274787614", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-7.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-7.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -7,20 +7,20 @@\n #include <float.h>\n \n int a = DBL_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n-/* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 9 } */\n+/* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n int b = (int) DBL_MAX; /* { dg-error \"overflow\" \"\" } */\n unsigned int c = -1.0; /* { dg-warning \"overflow in implicit constant conversion\" } */\n-/* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 12 } */\n+/* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n unsigned int d = (unsigned)-1.0; /* { dg-error \"overflow\" } */\n \n int e = 0 << 1000; /* { dg-warning \"shift count\" } */\n-/* { dg-error \"constant\" \"constant\" { target *-*-* } 16 } */\n+/* { dg-error \"constant\" \"constant\" { target *-*-* } .-1 } */\n int f = 0 << -1; /* { dg-warning \"shift count\" } */\n-/* { dg-error \"constant\" \"constant\" { target *-*-* } 18 } */\n+/* { dg-error \"constant\" \"constant\" { target *-*-* } .-1 } */\n int g = 0 >> 1000; /* { dg-warning \"shift count\" } */\n-/* { dg-error \"constant\" \"constant\" { target *-*-* } 20 } */\n+/* { dg-error \"constant\" \"constant\" { target *-*-* } .-1 } */\n int h = 0 >> -1; /* { dg-warning \"shift count\" } */\n-/* { dg-error \"constant\" \"constant\" { target *-*-* } 22 } */\n+/* { dg-error \"constant\" \"constant\" { target *-*-* } .-1 } */\n \n int b1 = (0 ? (int) DBL_MAX : 0);\n unsigned int d1 = (0 ? (unsigned int)-1.0 : 0);\n@@ -32,4 +32,4 @@ int h1 = (0 ? 0 >> -1: 0);\n int i = -1 << 0;\n \n int j[1] = { DBL_MAX }; /* { dg-warning \"overflow in implicit constant conversion\" } */\n-/* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 34 } */\n+/* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */"}, {"sha": "c9e41541f2b84299cad04ce0d9951e1ecdefbe4b", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-8.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-8.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -10,19 +10,19 @@\n \n enum e {\n   E0 = 0 * (INT_MAX + 1), /* { dg-warning \"21:integer overflow in expression\" } */\n-  /* { dg-error \"3:overflow in constant expression\" \"constant\" { target *-*-* } 12 } */\n+  /* { dg-error \"3:overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   E1 = 0 * (INT_MIN / -1), /* { dg-warning \"21:integer overflow in expression\" } */\n-  /* { dg-error \"3:overflow in constant expression\" \"constant\" { target *-*-* } 14 } */\n+  /* { dg-error \"3:overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   E2 = 0 * (INT_MAX * INT_MAX), /* { dg-warning \"21:integer overflow in expression\" } */\n-  /* { dg-error \"3:overflow in constant expression\" \"constant\" { target *-*-* } 16 } */\n+  /* { dg-error \"3:overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   E3 = 0 * (INT_MIN - 1), /* { dg-warning \"21:integer overflow in expression\" } */\n-  /* { dg-error \"3:overflow in constant expression\" \"constant\" { target *-*-* } 18 } */\n+  /* { dg-error \"3:overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   E4 = 0 * (unsigned)(INT_MIN - 1), /* { dg-warning \"31:integer overflow in expression\" } */\n-  /* { dg-error \"3:overflow in constant expression\" \"constant\" { target *-*-* } 20 } */\n+  /* { dg-error \"3:overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   E5 = 0 * -INT_MIN, /* { dg-warning \"12:integer overflow in expression\" } */\n-  /* { dg-error \"3:overflow in constant expression\" \"constant\" { target *-*-* } 22 } */\n+  /* { dg-error \"3:overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   E6 = 0 * !-INT_MIN, /* { dg-warning \"13:integer overflow in expression\" } */\n-  /* { dg-error \"8:not an integer constant\" \"constant\" { target *-*-* } 24 } */\n+  /* { dg-error \"8:not an integer constant\" \"constant\" { target *-*-* } .-1 } */\n   E7 = INT_MIN % -1 /* { dg-warning \"16:integer overflow in expression\" } */\n-  /* { dg-error \"1:overflow in constant expression\" \"constant\" { target *-*-* } 28 } */\n+  /* { dg-error \"1:overflow in constant expression\" \"constant\" { target *-*-* } .+1 } */\n };"}, {"sha": "d8143c0094f3b6ac84abc5fc489e3d84fcc0ef39", "filename": "gcc/testsuite/gcc.dg/c90-enum-comma-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-enum-comma-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-enum-comma-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-enum-comma-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,4 +4,4 @@\n /* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n \n enum foo { bar, };  /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"comma at end\" \"enum comma error\" { target *-*-* } 6 } */\n+/* { dg-error \"comma at end\" \"enum comma error\" { target *-*-* } .-1 } */"}, {"sha": "871fdfcdf44bc63f8bb061bc5073a6f7e95baed3", "filename": "gcc/testsuite/gcc.dg/c90-flex-array-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-flex-array-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-flex-array-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-flex-array-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,4 +4,4 @@\n /* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n \n struct flex { int a; int b[]; }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"ISO C90\" \"flexible array members not in C90\" { target *-*-* } 6 } */\n+/* { dg-error \"ISO C90\" \"flexible array members not in C90\" { target *-*-* } .-1 } */"}, {"sha": "b67b1b7dff6c55c9bef936e4cec91daa92806cb2", "filename": "gcc/testsuite/gcc.dg/c90-hexfloat-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-hexfloat-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-hexfloat-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-hexfloat-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -4,8 +4,8 @@\n /* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n \n double d = 0x1.2p2; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"hexadecimal floating\" \"hex float error\" { target *-*-* } 6 } */\n+/* { dg-error \"hexadecimal floating\" \"hex float error\" { target *-*-* } .-1 } */\n double d1 = 0x1p2; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"hexadecimal floating\" \"hex float error\" { target *-*-* } 8 } */\n+/* { dg-error \"hexadecimal floating\" \"hex float error\" { target *-*-* } .-1 } */\n double d2 = 0x1...p2; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"too many decimal points\" \"bad hex float\" { target *-*-* } 10 } */\n+/* { dg-error \"too many decimal points\" \"bad hex float\" { target *-*-* } .-1 } */"}, {"sha": "bc0068e8a2a7159a4dd144d9991205ef13b057e3", "filename": "gcc/testsuite/gcc.dg/c90-idem-qual-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-idem-qual-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6143c99823d855df4b855dc6ebf697310fa1dc8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-idem-qual-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-idem-qual-1.c?ref=6143c99823d855df4b855dc6ebf697310fa1dc8a", "patch": "@@ -5,4 +5,4 @@\n \n typedef const int cint;\n const cint foo; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"duplicate\" \"duplicate type qualifier error\" { target *-*-* } 7 } */\n+/* { dg-error \"duplicate\" \"duplicate type qualifier error\" { target *-*-* } .-1 } */"}]}