{"sha": "17f4d7aa737f13a00221654dbb5429b26989d53c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdmNGQ3YWE3MzdmMTNhMDAyMjE2NTRkYmI1NDI5YjI2OTg5ZDUzYw==", "commit": {"author": {"name": "Laurynas Biveinis", "email": "lauras@softhome.net", "date": "2000-12-09T04:10:22Z"}, "committer": {"name": "Christopher Faylor", "email": "cgf@gcc.gnu.org", "date": "2000-12-09T04:10:22Z"}, "message": "winnt: Remove obsolete directory.\n\n* config/winnt: Remove obsolete directory.\n* install.texi (Configurations): Remove obsolete documentation for Windows NT.\n\nFrom-SVN: r38147", "tree": {"sha": "6267c70e6a515f71755375df8fa4437bf26262cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6267c70e6a515f71755375df8fa4437bf26262cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17f4d7aa737f13a00221654dbb5429b26989d53c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f4d7aa737f13a00221654dbb5429b26989d53c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17f4d7aa737f13a00221654dbb5429b26989d53c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f4d7aa737f13a00221654dbb5429b26989d53c/comments", "author": null, "committer": null, "parents": [{"sha": "1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2"}], "stats": {"total": 1736, "additions": 6, "deletions": 1730}, "files": [{"sha": "a5753dc0f680ad72f8e2e076a9f13756aa875717", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f4d7aa737f13a00221654dbb5429b26989d53c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f4d7aa737f13a00221654dbb5429b26989d53c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17f4d7aa737f13a00221654dbb5429b26989d53c", "patch": "@@ -1,3 +1,9 @@\n+2000-12-08 Laurynas Biveinis <lauras@softhome.net>\n+\n+\t* config/winnt: Remove obsolete directory.\n+\t* install.texi (Configurations): Remove obsolete documentation for\n+\tWindows NT.\n+\n 2000-12-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* configure.in: Don't define INSTALL_INFO."}, {"sha": "688d1264e898ec0616fe5d91a8ebaa7ed32d94aa", "filename": "gcc/config/winnt/config-nt.bat", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fconfig-nt.bat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fconfig-nt.bat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fconfig-nt.bat?ref=1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2", "patch": "@@ -1,58 +0,0 @@\n-echo Configuring GCC for Windows NT on %2\n-rem This batch file assumes a unix-type \"sed\" program\n-\n-if %2.==alpha. echo #include \"alpha/xm-alpha.h\" >config.h\n-if %2.==alpha. echo #include \"winnt/xm-winnt.h\" >>config.h\n-if %2.==alpha. echo #include \"alpha/xm-winnt.h\" >>config.h\n-if not %2.==alpha.  echo #include \"%2/xm-winnt.h\" >config.h\n-copy config.h hconfig.h\n-copy config.h tconfig.h\n-\n-if %2.==alpha. echo #define TARGET_CPU_DEFAULT 64 >tm.h\n-if %2.==alpha. echo #include \"alpha/alpha.h\" >>tm.h\n-if %2.==alpha. echo #include \"alpha/win-nt.h\" >>tm.h\n-if not %2.==alpha. echo #include \"%2/win-nt.h\" >tm.h\n-\n-rem This batch file assumes a unix-type \"sed\" program\n-\n-echo # Makefile generated by \"config-nt.bat\"> Makefile\n-echo all.nt: cpp.exe cc1.exe cc1obj.exe xgcc.exe ld.exe stmp-headers libgcc.lib stmp-float_h specs stamp-objlist>> Makefile\n-sed -f config/%2/config-nt.sed -f config/winnt/config-nt.sed Makefile.in >> Makefile\n-\n-set LANG=\n-\n-echo # >specs.h\n-echo # >options.h\n-\n-if not exist cp\\make-lang.in goto no_cp\n-if exist cp\\lang-specs.h echo #include \"cp/lang-specs.h\">>specs.h\n-if exist cp\\lang-options.h echo #include \"cp/lang-options.h\">>options.h\n-sed -f config/%2/config-nt.sed -f config/winnt/config-nt.sed cp\\make-lang.in >> Makefile\n-sed -f config/%2/config-nt.sed -f config/winnt/config-nt.sed cp\\makefile.in > cp\\Makefile\n-set LANG=%LANG% c++.#\t\n-:no_cp\n-\n-if not exist ada\\make-lang.in goto no_ada\n-if exist ada\\lang-specs.h echo #include \"ada/lang-specs.h\">>specs.h\n-if exist ada\\lang-options.h echo #include \"ada/lang-options.h\">>options.h\n-sed -f config/%2/config-nt.sed -f config/winnt/config-nt.sed ada\\make-lang.in >> Makefile\n-sed -f config/%2/config-nt.sed -f config/winnt/config-nt.sed ada\\makefile.in > ada\\Makefile\n-set LANG=%LANG% ada.#\t\n-:no_ada\n-\n-if not exist f\\make-lang.in goto no_f\n-if exist f\\lang-specs.h echo #include \"f/lang-specs.h\">>specs.h\n-if exist f\\lang-options.h echo #include \"f/lang-options.h\">>options.h\n-sed -f config/%2/config-nt.sed -f config/winnt/config-nt.sed f\\make-lang.in >> Makefile\n-sed -f config/%2/config-nt.sed -f config/winnt/config-nt.sed f\\makefile.in > f\\Makefile\n-set LANG=%LANG% f.#\t\n-:no_f\n-\n-echo lang.mostlyclean: %LANG% | sed \"s/#/mostlyclean/g\" >> Makefile\n-echo lang.clean: %LANG% | sed \"s/#/clean/g\" >> Makefile\n-echo lang.distclean: %LANG% | sed \"s/#/distclean/g\" >> Makefile\n-echo lang.realclean: %LANG% | sed \"s/#/realclean/g\" >> Makefile\n-\n-echo #define MULTILIB_SELECT \". ;\" > multilib.h1\n-copy multilib.h1 multilib.h\n-del multilib.h1"}, {"sha": "23a05ddc373a7c3eb1a932b9973f0e9dcc210c3d", "filename": "gcc/config/winnt/config-nt.sed", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fconfig-nt.sed", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fconfig-nt.sed", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fconfig-nt.sed?ref=1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2", "patch": "@@ -1,128 +0,0 @@\n-/^Makefile/,/^\trm -f config.run/d\n-s/rm -f/del/\n-s/|| cp/|| copy/\n-/^config.status/,/\tfi/d\n-s/config.status//g\n-s/\\/dev\\/null/NUL/g\n-s/$(srcdir)\\/c-parse/c-parse/g\n-s/$(srcdir)\\/objc-parse.y/objc-parse.y/g\n-s/$(srcdir)\\/c-gperf/c-gperf/g\n-/^multilib.h/ s/multilib/not-multilib/\n-/^xmake_file=/ d\n-/^tmake_file=/ d\n-/^lang_specs_files=/ d\n-/^lang_options_files=/ d\n-/^version=/ c\\\n-version=2.8.1\n-s/CC = cc/CC = cl/\n-s/^SHELL =.*/SHELL =/\n-s/CFLAGS = -g/CFLAGS =/\n-s/:\\$/: \\$/g\n-s/<\\ *\\$(srcdir)\\//< $(srcdir)\\\\/g\n-s/^\t\\$(SHELL) \\$(srcdir)\\/move-if-change/\tcopy/\n-s/^\t\\$(srcdir)\\/move-if-change/\tcopy/\n-s/^USE_/# USE_/\n-s/`echo \\$(srcdir)\\///g\n-s/ | sed 's,\\^\\\\\\.\\/,,'`//g\n-s/^\tcd \\$(srcdir)[ \t]*;/\t/\n-/^stamp-attrtab/,/copy/ {\n-  /\\\\$/d\n-  /\tfi/d\n-  /copy/ i\\\n-\\\t  genattrtab $(md_file) > tmp-attrtab.c\n-}\n-/^enquire[ \t]*:/ s/\\$(GCC_PARTS)//g\n-/^enquire.o[ \t]*:/ s/\\$(GCC_PASSES)//g\n-/^GCC_FOR_TARGET =/ c\\\n-GCC_FOR_TARGET = xgcc\n-/^ENQUIRE_LDFLAGS =/ c\\\n-ENQUIRE_LDFLAGS =\n-s/; *@true//\n-/> *stamp-objlist/ c\\\n-\techo.exe  $(OBJS) | sed -e \"s, \\([a-z]\\), ../\\1,g\" >stamp-objlist\n-/^OBJS.*stamp-objlist/ s?`cat ../stamp-objlist`?@../stamp-objlist?\n-s/^\\(SUBDIR_OBSTACK *=\\).*$/\\1 ..\\/obstack.o/\n-s/^\\(SUBDIR_USE_ALLOCA *=\\).*$/\\1/\n-s/^\\(SUBDIR_MALLOC *=\\).*$/\\1/\n-/####target/ i\\\n-STMP_FIXPROTO = \\\n-OTHER_FIXINCLUDES_DIRS=. \\\n-RANLIB = : \\\n-RANLIB_TEST = false \\\n-OLDCC = cl \\\n-MAKE = nmake \\\n-SYMLINK = copy \\\n-INSTALL = $(srcdir)/install.sh -c \\\n-exeext = .exe \\\n-objext = .obj \\\n-oldobjext = .obj \\\n-\\\n-EXTRA_PROGRAMS=ld.exe \\\n-\\\n-ld.obj: $(srcdir)/config/winnt/ld.c \\\n-\\\t$(CC) $(CFLAGS) \\\\\\\n-\\ \t-I. -I$(srcdir) -I$(srcdir)/config -c $(srcdir)/config/winnt/ld.c \\\n-\\\n-ld.exe: ld.obj \\\n-\tlink -out:ld.exe ld.obj $(LDFLAGS) $(CLIB) \\\n-\\\n-EXTRA_GCC_OBJS=spawnv.obj oldnames.obj \\\n-spawnv.obj: $(srcdir)/config/winnt/spawnv.c \\\n-\\\t$(CC) $(CFLAGS) \\\\\\\n-\\ \t-I. -I$(srcdir) -I$(srcdir)/config -c $(srcdir)/config/winnt/spawnv.c \\\n-\\\n-oldnames.obj: $(srcdir)/config/winnt/oldnames.c \\\n-\\\t$(CC) $(CFLAGS) \\\\\\\n-\\ \t-I. -I$(srcdir) -I$(srcdir)/config -c $(srcdir)/config/winnt/oldnames.c\n-s/^C c:/Cc:/\n-s/\\${OBJS}/\\$(OBJS)/g\n-s/\\${SYSTEM_HEADER_DIR}/\\$(SYSTEM_HEADER_DIR)/g\n-s/\\${HOST_CC}/\\$(HOST_CC)/g\n-s/ \\${srcdir}\\// /g\n-s/\\${mainversion}/\\$(mainversion)/g\n-s/\\$(srcdir)\\/move-if-change/copy/g\n-s/\\$(SHELL) \\$(srcdir)\\/move-if-change/copy/g\n-/^# USE_HOST_OBSTACK/ i\\\n-USE_HOST_OBSTACK=obstack.obj\n-/^# USE_ALLOCA/ i\\\n-USE_ALLOCA=alloca.obj\n-/^# USE_HOST_ALLOCA/ i\\\n-USE_HOST_ALLOCA=alloca.obj\n-s/^ALLOCA =/ALLOCA = alloca.obj/\n-s/^ALLOCA_FINISH = true/ALLOCA_FINISH =/\n-s/\t\\.\\//\t/\n-s/^gen\\([a-z]*\\) *:/gen\\1.exe :/\n-s/ gen\\([a-z]*\\)$/ gen\\1.exe/\n-s/ gen\\([a-z]*\\) / gen\\1.exe /g\n-s/genmultilib.exe/genmultilib/g\n-s/^cccp *:/cccp.exe :/\n-s/cccp$/cccp.exe/\n-s/cccp /cccp.exe /\n-s/CCCP=cccp.exe/CCCP=cccp/\n-s/(CCCP)$/(CCCP)$(exeext)/\n-s/^cpp *:/cpp.exe :/\n-s/cpp$/cpp.exe/\n-s/cpp /cpp.exe /\n-s/^cc1 *:/cc1.exe :/\n-s/cc1$/cc1.exe/\n-s/cc1 /cc1.exe /\n-s/^cc1obj *:/cc1obj.exe :/\n-s/cc1obj$/cc1obj.exe/\n-s/cc1obj /cc1obj.exe /\n-s/^xgcc *:/xgcc.exe :/\n-s/xgcc$/xgcc.exe/\n-s/xgcc /xgcc.exe /\n-s/^enquire *:/enquire.exe :/\n-s/enquire$/enquire.exe/\n-s/enquire /enquire.exe /\n-s/\\.o *:/.obj :/\n-s/\\.o$/.obj/\n-s/\\.o /.obj /g\n-s/-rm -f cpp.exe/del cpp.exe/\n-s/\\$(CC) \\$(ALL_CFLAGS) \\$(LDFLAGS) -o /link $(LDFLAGS) -out:/\n-s/\\$(HOST_CC) \\$(HOST_CFLAGS) \\$(HOST_LDFLAGS) -o /link $(HOST_LDFLAGS) -out:/\n-/^# Build libgcc.a/ r config/winnt/libgcc.mak\n-/^# Build libgcc.a/,/\f/ d\n-/^# Build the include directory\\./ r config/winnt/headers.mak\n-/^# Build the include directory\\./,/touch objc-headers/ d\n-s/^\\\f//"}, {"sha": "f20e1f7d597edf50d7bd2e66556f5a35939ca90b", "filename": "gcc/config/winnt/dirent.c", "status": "removed", "additions": 0, "deletions": 360, "changes": 360, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fdirent.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fdirent.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fdirent.c?ref=1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2", "patch": "@@ -1,360 +0,0 @@\n-/*\n- * @(#)msd_dir.c 1.4 87/11/06\tPublic Domain.\n- *\n- *  A public domain implementation of BSD directory routines for\n- *  MS-DOS.  Written by Michael Rendell ({uunet,utai}michael@garfield),\n- *  August 1897\n- *\n- *  Modified by Ian Stewartson, Data Logic (istewart@datlog.co.uk).\n- *\n- *  Updates:  1.  To support OS/2 1.x\n- *\t      2.  To support HPFS long filenames\n- *\t      3.  To support OS/2 2.x\n- *\t      4.  To support TurboC\n- *\t      5.  To support Windows NT\n- */\n-\n-#include <sys/types.h>\n-#include <sys/stat.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n-\n-#include <malloc.h>\n-\n-#include <string.h>\n-#include <limits.h>\n-#include <safe-ctype.h>\n-#include <errno.h>\n-#include <dirent.h>\n-\n-\n-#define WIN32_LEAN_AND_MEAN\n-#include <windows.h>\n-\n-#define FILE_NAME_E\t\tcFileName\n-#define OS_CloseFH(a)\t\tFindClose (a)\n-#define FIND_BUFFER\t\tWIN32_FIND_DATA\n-#define DISABLE_HARD_ERRORS\tSetErrorMode (0)\n-#define ENABLE_HARD_ERRORS\tSetErrorMode (SEM_FAILCRITICALERRORS | \\\n-\t\t\t\t\t      SEM_NOOPENFILEERRORBOX);\n-\n-#  define ERROR_EMPTY_DIR\tERROR_FILE_NOT_FOUND\n-\n-#  define ATTRIBUTES\t\t(_A_SUBDIR | _A_HIDDEN | _A_SYSTEM | \\\n-\t\t\t\t _A_NORMAL | _A_RDONLY | _A_ARCH)\n-\n-/*\n- * missing ??\n- */\n-\n-#ifndef ENOTDIR\n-#  define ENOTDIR\t120\t/* Not a directory\t\t\t*/\n-#endif\n-\n-#ifndef S_IFMT\n-#  define\tS_IFMT\t0xf000\t/* type of file\t\t\t\t*/\n-#endif\n-\n-#ifndef S_ISDIR\n-#  define S_ISDIR(m)\t((((m) & S_IFMT) == S_IFDIR))\n-#endif\n-\n-/*\n- * Internals\n- */\n-\n-typedef struct _dircontents\tDIRCONT;\n-static void\t\t\tfree_dircontents (DIRCONT *);\n-\n-/*\n- * Open the directory stream\n- */\n-\n-DIR *\n-opendir (name)\n-    const char\t*name;\n-{\n-    struct stat\t\tstatb;\n-    DIR\t\t\t*dirp;\n-    char\t\t*last;\n-    DIRCONT\t\t*dp;\n-    char\t\t*nbuf;\n-    int\t\t\tlen = strlen (name);\n-    unsigned long\trc;\n-    FIND_BUFFER\t\tdtabuf;\n-    HANDLE\t\td_handle;\n-    bool\t\tHPFS = FALSE;\n-\n-    if (!len)\n-    {\n-\terrno = ENOTDIR;\n-\treturn (DIR *)NULL;\n-    }\n-\n-    if ((nbuf = malloc (len + 5)) == (char *)NULL)\n-\treturn (DIR *) NULL;\n-\n-    strcpy (nbuf, name);\n-    last = &nbuf[len - 1];\n-\n-/* Ok, DOS is very picky about its directory names.  The following are\n- * valid.\n- *\n- *  c:/\n- *  c:.\n- *  c:name/name1\n- *\n- *  c:name/ is not valid\n- */\n-\n-    if (((*last == '\\\\') || (*last == '/')) && (len > 1) &&\n-\t(!((len == 3) && (name[1] == ':'))))\n-\t*(last--) = 0;\n-\n-/* Check its a directory */\n-\n-    DISABLE_HARD_ERRORS;\n-    rc = stat (nbuf, &statb);\n-    ENABLE_HARD_ERRORS;\n-\n-    if (rc)\n-    {\n-\tfree (nbuf);\n-\treturn (DIR *) NULL;\n-    }\n-\n-    if (!S_ISDIR (statb.st_mode))\n-    {\n-\tfree (nbuf);\n-\terrno = ENOTDIR;\n-\treturn (DIR *)NULL;\n-    }\n-\n-    if ((dirp = (DIR *) malloc (sizeof (DIR))) == (DIR *) NULL)\n-    {\n-\tfree (nbuf);\n-\treturn (DIR *) NULL;\n-    }\n-\n-/* Set up to find everything */\n-\n-    if ((*last != '\\\\') && (*last != '/'))\n-\tstrcat (last, \"/\");\n-\n-    strcat (last, \"*.*\");\n-\n-/* Find the file system type */\n-\n-    HPFS = IsHPFSFileSystem (nbuf);\n-\n-    dirp->dd_loc      = 0;\n-    dirp->dd_cp       = (DIRCONT *) NULL;\n-    dirp->dd_contents = (DIRCONT *) NULL;\n-\n-    DISABLE_HARD_ERRORS;\n-\n-    d_handle = FindFirstFile (nbuf, &dtabuf);\n-    rc = (d_handle == INVALID_HANDLE_VALUE) ? GetLastError () : 0;\n-\n-    ENABLE_HARD_ERRORS;\n-\n-/* Check for errors */\n-\n-    if (rc)\n-    {\n-\tfree (nbuf);\n-\n-/* Empty directory */\n-\n-#if defined (ERROR_EMPTY_DIR)\n-\tif (rc == ERROR_EMPTY_DIR)\n-\t    return dirp;\n-#endif\n-\n-\tfree (dirp);\n-\treturn (DIR *) NULL;\n-    }\n-\n-/* Process the directory */\n-\n-    do\n-    {\n-\tif (((dp = (DIRCONT *) malloc (sizeof (DIRCONT))) == (DIRCONT *)NULL) ||\n-\t    ((dp->_d_entry = strdup (dtabuf.FILE_NAME_E)) == (char *) NULL))\n-\t{\n-\t    if (dp->_d_entry != (char *)NULL)\n-\t\tfree ((char *)dp);\n-\n-\t    free (nbuf);\n-\t    free_dircontents (dirp->dd_contents);\n-\n-\t    OS_CloseFH (d_handle);\n-\t    return (DIR *) NULL;\n-\t}\n-\n-\tif (!HPFS)\n-\t    strlwr (dp->_d_entry);\n-\n-\tif (dirp->dd_contents != (DIRCONT *) NULL)\n-\t    dirp->dd_cp = dirp->dd_cp->_d_next = dp;\n-\n-\telse\n-\t    dirp->dd_contents = dirp->dd_cp = dp;\n-\n-\tdp->_d_next = (DIRCONT *) NULL;\n-\n-    } while (FindNextFile (d_handle, &dtabuf));\n-\n-    dirp->dd_cp = dirp->dd_contents;\n-    free (nbuf);\n-\n-    OS_CloseFH (d_handle);\n-    return dirp;\n-}\n-\n-\n-/*\n- * Close the directory stream\n- */\n-\n-int\n-closedir (dirp)\n-    DIR *dirp;\n-{\n-    if (dirp != (DIR *)NULL)\n-    {\n-\tfree_dircontents (dirp->dd_contents);\n-\tfree ((char *)dirp);\n-    }\n-\n-    return 0;\n-}\n-\n-/*\n- * Read the next record from the stream\n- */\n-\n-struct dirent *\n-readdir (dirp)\n-    DIR\t*dirp;\n-{\n-    static struct dirent\tdp;\n-\n-    if ((dirp == (DIR *)NULL) || (dirp->dd_cp == (DIRCONT *) NULL))\n-\treturn (struct dirent *) NULL;\n-\n-    dp.d_reclen = strlen (strcpy (dp.d_name, dirp->dd_cp->_d_entry));\n-    dp.d_off    = dirp->dd_loc * 32;\n-    dp.d_ino    = (ino_t)++dirp->dd_loc;\n-    dirp->dd_cp = dirp->dd_cp->_d_next;\n-\n-    return &dp;\n-}\n-\n-/*\n- * Restart the directory stream\n- */\n-\n-void\n-rewinddir (dirp)\n-    DIR *dirp;\n-{\n-    seekdir (dirp, (off_t)0);\n-}\n-\n-/*\n- * Move to a know position in the stream\n- */\n-\n-void\n-seekdir (dirp, off)\n-    DIR *dirp;\n-    off_t off;\n-{\n-    long\ti = off;\n-    DIRCONT\t*dp;\n-\n-    if ((dirp == (DIR *)NULL) || (off < 0L))\n-\treturn;\n-\n-    for (dp = dirp->dd_contents; (--i >= 0) && (dp != (DIRCONT *)NULL);\n-\t dp = dp->_d_next)\n-\t;\n-\n-    dirp->dd_loc = off - (i + 1);\n-    dirp->dd_cp = dp;\n-}\n-\n-/*\n- * Get the current position\n- */\n-\n-off_t\n-telldir(dirp)\n-    DIR *dirp;\n-{\n-    return (dirp == (DIR *)NULL) ? (off_t) -1 : dirp->dd_loc;\n-}\n-\n-/*\n- * Release the internal structure\n- */\n-\n-static void\n-free_dircontents (dp)\n-    DIRCONT *dp;\n-{\n-    DIRCONT\t*odp;\n-\n-    while ((odp = dp) != (DIRCONT *)NULL)\n-    {\n-\tif (dp->_d_entry != (char *)NULL)\n-\t    free (dp->_d_entry);\n-\n-\tdp = dp->_d_next;\n-\tfree ((char *)odp);\n-    }\n-}\n-\n-\n-/*\n- * Windows NT version\n- */\n-\n-bool\n-IsHPFSFileSystem (directory)\n-    char *directory;\n-{\n-    char\t\tbName[4];\n-    DWORD\t\tflags;\n-    DWORD\t\tmaxname;\n-    BOOL\t\trc;\n-    unsigned int\tnDrive;\n-    char\t\tszCurDir [MAX_PATH];\n-\n-    if (ISALPHA (directory[0]) && (directory[1] == ':'))\n-\tnDrive = TOUPPER (directory[0]) - '@';\n-\n-    else\n-    {\n-\tGetCurrentDirectory (MAX_PATH, szCurDir);\n-\tnDrive = szCurDir[0] - 'A' + 1;\n-    }\n-\n-/* Set up the drive name */\n-\n-    strcpy (bName, \"x:\\\\\");\n-    bName[0] = (char) (nDrive + '@');\n-\n-/* Read the volume info, if we fail - assume non-HPFS */\n-\n-    DISABLE_HARD_ERRORS;\n-\n-    rc = GetVolumeInformation (bName, (LPTSTR)NULL, 0, (LPDWORD)NULL,\n-\t\t\t       &maxname, &flags, (LPTSTR)NULL, 0);\n-    ENABLE_HARD_ERRORS;\n-\n-    return ((rc) && (flags & (FS_CASE_SENSITIVE | FS_CASE_IS_PRESERVED)))\n-    \t\t? TRUE : FALSE;\n-}\n-"}, {"sha": "822bd2cab06d04ea7614cbf7b00aa11006b7cc59", "filename": "gcc/config/winnt/dirent.h", "status": "removed", "additions": 0, "deletions": 96, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fdirent.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fdirent.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fdirent.h?ref=1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2", "patch": "@@ -1,96 +0,0 @@\n-/*\n- * dirent.h\n- */\n-\n-#ifndef _DIRENT_H\n-#  define _DIRENT_H\n-\n-#  include <sys/types.h>\n-#  include <limits.h>\n-\n-#define MAXNAMLEN\t255\t/* maximum filename length\t\t*/\n-\n-#ifndef NAME_MAX\n-#define\tNAME_MAX\t(MAXNAMLEN - 1)\n-#endif\n-\n-struct dirent\t\t\t/* data from getdents()/readdir()\t*/\n-{\n-    ino_t\td_ino;\t\t/* inode number of entry\t\t*/\n-    off_t\td_off;\t\t/* offset of disk directory entry\t*/\n-    wchar_t\td_reclen;\t/* length of this record\t\t*/\n-    char\td_name[MAXNAMLEN + 1];\n-};\n-\n-\n-/* The following nonportable ugliness could have been avoided by defining\n- * DIRENTSIZ and DIRENTBASESIZ to also have (struct dirent *) arguments.\n- * There shouldn't be any problem if you avoid using the DIRENTSIZ() macro.\n- */\n-\n-#define\tDIRENTBASESIZ\t\t(((struct dirent *)0)->d_name \\\n-\t\t\t\t- (char *)&((struct dirent *)0)->d_ino)\n-\n-#define\tDIRENTSIZ(namlen)\t((DIRENTBASESIZ + sizeof(long) + (namlen)) \\\n-\t\t\t\t/ sizeof(long) * sizeof(long))\n-\n-\n-\n-#  ifndef _BOOL_T_DEFINED\n-typedef unsigned char\tbool;\n-#  define _BOOL_T_DEFINED\n-#  endif\n-\n-#  define DIRBUF\t8192\t/* buffer size for fs-indep. dirs\t*/\n-\t\t\t\t/* must in general be larger than the\t*/\n-\t\t\t\t/* filesystem buffer size\t\t*/\n-\n-struct _dircontents {\n-    char\t\t*_d_entry;\n-    struct _dircontents\t*_d_next;\n-};\n-\n-typedef struct _dirdesc {\n-    int\t\t\tdd_id;\t/* uniquely identify each open directory */\n-    long\t\tdd_loc;\t/* where we are in directory entry is this */\n-    struct _dircontents\t*dd_contents;\t/* pointer to contents of dir\t*/\n-    struct _dircontents\t*dd_cp;\t\t/* pointer to current position\t*/\n-} DIR;\n-\n-\n-#if defined (__STDC__)\n-#  define _PROTO(p)\tp\n-#else\n-#  define _PROTO(p)\t()\n-#  undef  const\n-#  undef  volatile\n-#endif\n-\n-/* Functions */\n-\n-extern DIR *\t\topendir\t_PROTO ((const char *));\n-extern struct dirent * \treaddir _PROTO ((DIR *));\n-extern void\t\trewinddir _PROTO ((DIR *));\n-\n-extern int\t\tclosedir _PROTO ((DIR *));\n-extern void\t\tseekdir\t_PROTO ((DIR *, off_t));\n-extern off_t\t\ttelldir\t_PROTO ((DIR *));\n-\n-extern int\t\tchdir _PROTO ((const char *));\n-extern char * \t\tgetcwd _PROTO ((char *, size_t));\n-\n-extern int\t\tmkdir _PROTO ((const char *));\n-\n-extern int\t\trmdir _PROTO ((const char *));\n-extern int\t\tscandir _PROTO ((char *,\n-\t\t\t struct dirent ***,\n-\t\t\t int (*)(const void *, const void *),\n-\t\t\t int (*)(const void *, const void *)));\n-\n-extern int\t\t_chdrive _PROTO ((int));\n-extern int\t\t_getdrive _PROTO ((void));\n-extern char * \t\t_getdcwd _PROTO ((int, char *, int));\n-\n-extern bool\t\tIsHPFSFileSystem _PROTO ((char *));\n-\n-#endif"}, {"sha": "f7e1a35d09417990b9847bb4443bc3e5820d0158", "filename": "gcc/config/winnt/fixinc-nt.c", "status": "removed", "additions": 0, "deletions": 260, "changes": 260, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Ffixinc-nt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Ffixinc-nt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Ffixinc-nt.c?ref=1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2", "patch": "@@ -1,260 +0,0 @@\n-#include <stdlib.h>\n-#include <string.h>\n-#include <sys/stat.h>\n-#include <dirent.h>\n-#include <stdio.h>\n-#include <io.h>\n-#include <fcntl.h>\n-#include <process.h>\n-\n-static char *concat();\n-static char *concat3();\n-static char *concat4();\n-static int onlyonedir;\n-static int atleastone;\n-static char *fixeddirs, *origdirs;\n-\n-/* Convert all /'s to \\'s */\n-\n-char *\n-slash2slash (dirname)\n-  char *dirname;\n-{\n-  int i;\n-  for (i=0; dirname[i]; i++)\n-    if (dirname [i] == '/')\n-      dirname [i] = '\\\\';\n-\n-  return dirname;\n-}\n-\n-/* Examine each directory component of a path and create the directory */\n-\n-int\n-mkdirpath (dirpath)\n-  char *dirpath;\n-{\n-  char *ndirpath = strdup (dirpath);\n-  char *bp, *fp;\n-\n-  fp = bp = ndirpath;\n-\n-  while (bp) \n-    {\n-      bp = strchr (fp, '\\\\');\n-      if (bp)\n-        {\n-          *bp = 0;\n-          _mkdir (ndirpath);\n-          *bp = '\\\\';\n-          fp = ++bp;\n-        }\n-      else\n-        _mkdir (ndirpath);\n-    }\n-}\n-\n-/* Construct a relative directory path from a given path by removing the\n-   leading slash, if it exists and changing a drive letter from X: to X-. */\n-\n-char *\n-newname (olddirname)\n-  char *olddirname;\n-{\n-  char *newname = strdup (olddirname);\n-\n-  if ((strlen (newname) >= 2)\n-      && (ISALPHA (newname[0]) && newname[1] == ':'))\n-    newname [1] = '-';\n-  else if ((strlen (newname) >= 1) \n-           && (newname [0] == '/' || newname [0] == '\\\\'))\n-    newname = &newname[1];\n-\n-  return newname;\n- \n-}\n-\n-/* Run the sed script on one header file.  If no modifications were made, then\n-   delete the newly created file. */\n-\n-int\n-doheader (oneheader, outheader, oldsize)\n-  char *oneheader, *outheader;\n-  int oldsize;\n-{\n-  char *newbuff, *oldbuff;\n-  char *newheader = concat3 (\"include\", \"\\\\\", newname (outheader));\n-  struct _stat newstatbuf;\n-  int newdesc, olddesc;\n-  int i;\n-\n-  system (concat4 (\"sed -f fixinc-nt.sed \", oneheader, \" > \", newheader));\n-  _stat (newheader, &newstatbuf);\n-  if (oldsize != newstatbuf.st_size) \n-    {\n-      atleastone = 1;\n-      printf (\"Fixing: %s\\n\", oneheader);\n-      return 0;\n-    }\n-  oldbuff = malloc (oldsize);\n-  newbuff = malloc (newstatbuf.st_size);\n-  olddesc = open (oneheader, _O_RDONLY | _O_BINARY);\n-  newdesc = open (newheader, _O_RDONLY | _O_BINARY);\n-  read (olddesc, oldbuff, oldsize);\n-  read (newdesc, newbuff, newstatbuf.st_size);\n-  close (olddesc);\n-  close (newdesc);\n-  for (i=0; i<oldsize; i++)\n-    {\n-      if (oldbuff [i] != newbuff [i])\n-        {\n-          free (oldbuff);\n-          free (newbuff);\n-          atleastone = 1;\n-          printf (\"Fixing: %s\\n\", oneheader);\n-          return 0;\n-        }\n-    }\n-  free (oldbuff);\n-  free (newbuff);\n-  unlink (newheader);\n-  return 0;\n-  \n-}\n-\n-/* Examine the contents of a directory and call doheader () for a regular file\n-   and recursively call dodir () for an enclosed directory. */\n-\n-int\n-dodir (indir, outdir)\n-  char *indir, *outdir;\n-{\n-  DIR *dir;\n-  struct dirent *dire;\n-  struct _stat statbuf;\n-  char *intempbuf, *outtempbuf;\n-\n-  dir = opendir (indir);\n-  if (!dir) return 0;\n-\n-  mkdirpath (concat3 (\"include\", \"\\\\\", newname (outdir)));\n-  while ((dire = readdir (dir)))\n-    {\n-      if (dire->d_name[0] == '.')\n-        continue;\n-  \n-      intempbuf = slash2slash (concat3 (indir, \"\\\\\", dire->d_name));\n-      outtempbuf = slash2slash (concat3 (outdir, \"\\\\\", dire->d_name));\n-      _stat (intempbuf, &statbuf);\n-  \n-      /* If directory ... */\n-      if (statbuf.st_mode & _S_IFDIR)\n-        dodir (intempbuf, outtempbuf);\n-  \n-      /* If regular file ... */\n-      if (statbuf.st_mode & _S_IFREG)\n-        doheader (intempbuf, outtempbuf, statbuf.st_size);\n-    }\n-  closedir (dir);\n-  return 0;\n-}\n-\n-/* Retrieve the value of the Include environment variable, copy it into a\n-   temporary and append a semi-colon for book-keeping purposes. Then call\n-   dodir () for each complete directory that is named therein.  If there is\n-   only one directory, then direct the output to use include\\. as the\n-   root instead of include/<directory path>, where <directory path> is a path\n-   constructed from the path named in the Include environment variable.  \n-   I.e. if Include=C:\\MSTOOLS\\Include;D:\\MSVC20\\Include then the modified\n-   header files will be in include\\C-\\MSTOOLS\\Include and \n-   include\\D-\\MSVC20\\Include.  However if Include=C:\\MSTOOLS\\Include then the\n-   modified files will be in include\\. */\n-\n-int\n-main ()\n-{\n-  char *fp, *bp, *foobar;\n-  char *incvar = getenv (\"Include\");\n-  int varlen = 0;\n-  struct _stat statbuf;\n-\n-  if (incvar == NULL) return 0;\n-\n-  varlen = strlen (incvar);\n-  foobar = (char *) malloc (varlen + 2);\n-\n-  strcpy (foobar, incvar);\n-  foobar = slash2slash (foobar);\n-  if (foobar [varlen-1] != ';') strcat (foobar, \";\");\n-  fp = bp = foobar;\n-\n-  if (strchr (fp, ';') == strrchr (fp, ';'))\n-    onlyonedir = 1;\n-  else\n-    onlyonedir = 0;\n-\n-  fixeddirs = strdup(\".\\\\include\");\n-  origdirs = strdup(\"\");\n-\n-  while (bp)\n-    {\n-      bp = strchr (fp, ';');\n-      if (bp)\n-        {\n-          *bp = 0;\n-          _stat (fp, &statbuf);\n-          if (statbuf.st_mode & _S_IFDIR)\n-            {\n-              atleastone = 0;\n-              if (onlyonedir) \n-                dodir (fp, \".\");\n-              else\n-                dodir (fp, fp);\n-              if (atleastone && !onlyonedir)\n-                {\n-                  origdirs = concat3 (origdirs, \";\", fp);\n-                  fixeddirs = concat3 (fixeddirs, \";\", \n-                    concat3 (\".\\\\include\", \"\\\\\", newname(fp)));\n-                }\n-            }\n-          fp = ++bp;\n-        }\n-    }\n-  printf (\"set C_Include_Path=%s%s\\n\", fixeddirs, origdirs);\n-  return 0;\n-}\n-\n-/* Utility function that mallocs space and concatenates two strings. */\n-\n-static char *\n-concat (s1, s2)\n-     char *s1, *s2;\n-{\n-  int len1 = strlen (s1);\n-  int len2 = strlen (s2);\n-  char *result = malloc (len1 + len2 + 1);\n-\n-  strcpy (result, s1);\n-  strcpy (result + len1, s2);\n-  *(result + len1 + len2) = 0;\n-\n-  return result;\n-}\n-\n-/* Utility function that concatenates three strings. */\n-\n-static char *\n-concat3 (s1, s2, s3)\n-     char *s1, *s2, *s3;\n-{\n-  return concat (concat (s1, s2), s3);\n-}\n-\n-/* Utility function that concatenates four strings. */\n-\n-static char *\n-concat4 (s1, s2, s3, s4)\n-     char *s1, *s2, *s3, *s4;\n-{\n-  return concat (concat (s1, s2), concat (s3, s4));\n-}"}, {"sha": "8dec34132fc8b2f6314061939d93df316f7b2727", "filename": "gcc/config/winnt/headers.mak", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fheaders.mak", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fheaders.mak", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fheaders.mak?ref=1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2", "patch": "@@ -1,51 +0,0 @@\n-# Build the include directory.  The stamp files are stmp-* rather than\n-# stamp-* so that mostlyclean does not force the include directory to\n-# be rebuilt.\n-\n-\n-# Copy in the headers provided with gcc.\n-USER_H = $(srcdir)\\ginclude\\stdarg.h $(srcdir)\\ginclude\\stddef.h \\\n-    $(srcdir)\\ginclude\\varargs.h $(srcdir)\\ginclude\\va-alpha.h \\\n-    $(srcdir)\\ginclude\\va-h8300.h $(srcdir)\\ginclude\\va-i860.h \\\n-    $(srcdir)\\ginclude\\va-i960.h $(srcdir)\\ginclude\\va-mips.h \\\n-    $(srcdir)\\ginclude\\va-m88k.h $(srcdir)\\ginclude\\va-pa.h \\\n-    $(srcdir)\\ginclude\\va-pyr.h $(srcdir)\\ginclude\\va-sparc.h \\\n-    $(srcdir)\\ginclude\\va-clipper.h $(srcdir)\\ginclude\\va-spur.h \\\n-    $(srcdir)\\ginclude\\iso646.h \\\n-    $(srcdir)\\ginclude\\proto.h\n-\n-# Build the include directory except for float.h (which depends upon\n-# enquire).\n-\n-stmp-int-hdrs: $(USER_H)\n-\ttype $(srcdir)\\limitx.h >xlimits.h\n-\ttype $(srcdir)\\glimits.h >>xlimits.h\n-\ttype $(srcdir)\\limity.h >>xlimits.h\n-\n-\t-mkdir include\t\n-\tfor %%f in ($(USER_H)) do copy %%f include\n-\tdel include\\limits.h\n-\tcopy xlimits.h include\\limits.h\n-\tdel include\\syslimits.h\n-\tcopy $(srcdir)\\gsyslimits.h include\\syslimits.h\n-\tcopy include\\limits.h include\\syslimits.h\n-\tdel include\\README\n-\tcopy $(srcdir)\\README-fixinc include\\README\n-\ttouch stmp-int-hdrs\n-\n-stmp-headers: stmp-int-hdrs fixinc-nt.exe\n-\tfixinc-nt\n-\ttouch stmp-headers\n-\n-# Build float.h.\n-stmp-float_h: libgcc.lib enquire.exe\n-\t-.\\enquire -f > tmp-float.h\n-\tdel include\\float.h\n-\tcopy tmp-float.h include\\float.h\n-\ttouch stmp-float_h\n-\n-fixinc-nt.obj: $(srcdir)/config/winnt/fixinc-nt.c\n-\tcl -c -I. -I$(srcdir) -I$(srcdir)/include -I$(srcdir)/config/winnt $(srcdir)/config/winnt/fixinc-nt.c\n-\n-fixinc-nt.exe: fixinc-nt.obj dirent.obj\n-\tcl fixinc-nt.obj dirent.obj libc.lib kernel32.lib"}, {"sha": "b02d1ede2295c9e1af8579b3df02b912afaa330d", "filename": "gcc/config/winnt/ld.c", "status": "removed", "additions": 0, "deletions": 348, "changes": 348, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fld.c?ref=1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2", "patch": "@@ -1,348 +0,0 @@\n-/* Call Windows NT 3.x linker.\n-   Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n-   Contributed by Douglas B. Rupp (drupp@cs.washington.edu).\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#include \"config.h\"\n-#include <stdio.h>\n-#include <sys/types.h>\n-#include <sys/stat.h>\n-#include <stdlib.h>\n-#include <string.h>\n-#include <process.h>\n-\n-static char *concat ();\n-static char *concat3 ();\n-\n-/* These can be set by command line arguments */\n-char *linker_path = 0;\n-int verbose = 0;\n-int subsystem = 0;\n-int entry = 0;\n-\n-int link_arg_max = -1;\n-char **link_args = (char **) 0;\n-int link_arg_index = -1;\n-\n-char *search_dirs = \".\";\n-\n-static int is_regular_file (char *name);\n-\n-/* Add the argument contained in STR to the list of arguments to pass to the\n-   linker */\n-\n-static void\n-addarg (str)\n-     char *str;\n-{\n-  int i;\n-\n-  if (++link_arg_index >= link_arg_max)\n-    {\n-      char **new_link_args\n-\t= (char **) calloc (link_arg_max + 1000, sizeof (char *));\n-\n-      for (i = 0; i <= link_arg_max; i++)\n-\tnew_link_args [i] = link_args [i];\n-\n-      if (link_args)\n-\tfree (link_args);\n-\n-      link_arg_max += 1000;\n-      link_args = new_link_args;\n-    }\n-\n-  link_args [link_arg_index] = str;\n-}\n-\n-/* Locate the file named in FILE_NAME in the set of paths contained in\n-   PATH_VAL */\n-\n-static char *\n-locate_file (file_name, path_val)\n-     char *file_name;\n-     char *path_val;\n-{\n-  char buf [1000];\n-  int file_len = strlen (file_name);\n-  char *end_path = path_val + strlen (path_val);\n-  char *ptr;\n-\n-  /* Handle absolute pathnames */\n-  if (file_name [0] == '/' || file_name [0] == DIR_SEPARATOR\n-      || ISALPHA (file_name [0]) && file_name [1] == ':')\n-    {\n-      strncpy (buf, file_name, sizeof buf);\n-      buf[sizeof buf - 1] = '\\0';\n-      if (is_regular_file (buf))\n-\treturn strdup (buf);\n-      else\n-\treturn 0;\n-  }\n-\n-  if (! path_val)\n-    return 0;\n-\n-  for (;;)\n-    {\n-      for (; *path_val == PATH_SEPARATOR ; path_val++)\n-\t;\n-      if (! *path_val)\n-\treturn 0;\n-\n-      for (ptr = buf; *path_val && *path_val != PATH_SEPARATOR; )\n-\t*ptr++ = *path_val++;\n-\n-      ptr--;\n-      if (*ptr != '/' && *ptr != DIR_SEPARATOR)\n-\t*++ptr = DIR_SEPARATOR;\n-\n-      strcpy (++ptr, file_name);\n-\n-      if (is_regular_file (buf))\n-\treturn strdup (buf);\n-    }\n-\n-  return 0;\n-}\n-\n-/* Given a library name in NAME, i.e. foo.  Look first for libfoo.lib and then\n-   libfoo.a in the set of directories we are allowed to search in */\n-\n-static char *\n-expand_lib (name)\n-     char *name;\n-{\n-  char *lib, *lib_path;\n-\n-  lib = malloc (strlen (name) + 8);\n-  strcpy (lib, \"lib\");\n-  strcat (lib, name);\n-  strcat (lib, \".lib\");\n-  lib_path = locate_file (lib, search_dirs);\n-  if (!lib_path)\n-    {\n-      strcpy (lib, \"lib\");\n-      strcat (lib, name);\n-      strcat (lib, \".a\");\n-      lib_path = locate_file (lib, search_dirs);\n-      if (!lib_path)\n-        {\n-          fprintf\n-            (stderr, \n-             \"Couldn't locate library: lib%s.a or lib%s.lib\\n\", name, name);\n-          exit (1);\n-        }\n-    }\n-\n-  return lib_path;\n-}\n-\n-/* Check to see if the file named in NAME is a regular file, i.e. not a\n-   directory */\n-\n-static int\n-is_regular_file (name)\n-     char *name;\n-{\n-  int ret;\n-  struct stat statbuf;\n-\n-  ret = stat(name, &statbuf);\n-  return !ret && S_ISREG (statbuf.st_mode);\n-}\n-\n-/* Process the number of args in P_ARGC and contained in ARGV.  Look for\n-   special flags, etc. that must be handled for the Microsoft linker */\n-\n-static void\n-process_args (p_argc, argv)\n-     int *p_argc;\n-     char *argv[];\n-{\n-  int i, j;\n-\n-  for (i = 1; i < *p_argc; i++)\n-    {\n-      /* -v turns on verbose option here and is passed on to gcc */\n-      if (! strcmp (argv [i], \"-v\"))\n-\tverbose = 1;\n-      else if (! strncmp (argv [i], \"-g\", 2))\n-      {\n-        addarg (\"-debugtype:coff -debug:full\");\n-      }\n-      else if (! strncmp (argv [i], \"-stack\", 6))\n-      {\n-        i++;\n-        addarg (concat (\"-stack:\",argv[i]));\n-      }\n-      else if (! strncmp (argv [i], \"-subsystem\", 10))\n-      {\n-\tsubsystem = 1;\n-        i++;\n-        addarg (concat (\"-subsystem:\",argv[i]));\n-      }\n-      else if (! strncmp (argv [i], \"-e\", 2))\n-      {\n-\tentry = 1;\n-        i++;\n-        addarg (concat (\"-entry:\",&argv[i][1]));\n-      }\n-    }\n-}\n-\n-/* The main program.  Spawn the Microsoft linker after fixing up the\n-   Unix-like flags and args to be what the Microsoft linker wants */\n-\n-main (argc, argv)\n-     int argc;\n-     char *argv[];\n-{\n-  int i;\n-  int done_an_ali = 0;\n-  int file_name_index;\n-  char *pathval = getenv (\"PATH\");\n-  char *spawn_args [5];\n-  char *tmppathval = malloc (strlen (pathval) + 3);\n-\n-  strcpy (tmppathval, \".;\");\n-  pathval = strcat (tmppathval, pathval);\n-\n-  linker_path = locate_file (\"link32.exe\", pathval);\n-  if (!linker_path)\n-    {\n-      linker_path = locate_file (\"link.exe\", pathval);\n-      if (!linker_path)\n-\t{\n-\t  fprintf (stderr, \"Couldn't locate link32 or link\\n\");\n-\t  exit (1);\n-\t}\n-    }\n-\n-  addarg (linker_path);\n-\n-  process_args (&argc , argv);\n-  if (! subsystem) addarg (\"-subsystem:console\");\n-  if (! entry) addarg (\"-entry:mainCRTStartup\");\n-\n-  for (i = 1; i < argc; i++)\n-    {\n-      int arg_len = strlen (argv [i]);\n-\n-      if (!strcmp (argv [i], \"-o\"))\n-\t{\n-\t  char *buff, *ptr;\n-\t  int out_len;\n-\n-\t  i++;\n-\t  out_len = strlen (argv[i]) + 10;\n-\t  buff = malloc (out_len);\n-\t  strcpy (buff, \"-out:\");\n-\t  strcat (buff, argv[i]);\n-\t  ptr = strstr (buff, \".exe\");\n-\t  if (ptr == NULL || strlen (ptr) != 4)\n-\t    strcat (buff, \".exe\");\n-\t  addarg (buff);\n-\t}\n-      else if (arg_len > 2 && !strncmp (argv [i], \"-L\", 2))\n-\t{\n-\t  char *nbuff, *sdbuff;\n-\t  int j, new_len, search_dirs_len;\n-\n-\t  new_len = strlen (&argv[i][2]);\n-\t  search_dirs_len = strlen (search_dirs);\n-\n-\t  nbuff = malloc (new_len + 1);\n-\t  strcpy (nbuff, &argv[i][2]);\n-\n-\t  for (j = 0; j < new_len; j++)\n-\t    if (nbuff[j] == '/') nbuff[j] = DIR_SEPARATOR;\n-\n-\t  sdbuff = malloc (search_dirs_len + new_len + 2);\n-\t  strcpy (sdbuff, search_dirs);\n-\t  sdbuff[search_dirs_len] = PATH_SEPARATOR;\n-\t  sdbuff[search_dirs_len+1] = 0;\n-\t  strcat (sdbuff, nbuff);\n-\n-\t  search_dirs = sdbuff;\n-\t}\n-\n-      else if (arg_len > 2 && !strncmp (argv [i], \"-l\", 2))\n-        {\n-\t  addarg (expand_lib (&argv[i][2]));\n-        }\n-      else if (!strcmp (argv [i], \"-v\") \n-            || !strcmp (argv [i], \"-g\")\n-            || !strcmp (argv [i], \"-noinhibit-exec\"))\n-        {\n-          ;\n-        }\n-      else if (!strcmp (argv [i], \"-stack\")\n-            || !strcmp (argv [i], \"-subsystem\")\n-            || !strcmp (argv [i], \"-e\"))\n-        {\n-          i++;\n-        }\n-      else\n-        {\n-          addarg (argv [i]);\n-        }\n-    }\n-\n-  addarg (NULL);\n-\n-  if (verbose)\n-    {\n-      int i;\n-\n-      for (i = 0; i < link_arg_index; i++)\n-\tprintf (\"%s \", link_args [i]);\n-      putchar ('\\n');\n-    }\n-\n-  if (spawnvp (P_WAIT, linker_path, (const char * const *)link_args) != 0)\n-    {\n-      fprintf (stderr, \"Error executing %s\\n\", link_args[0]);\n-      exit (1);\n-    }\n-\n-  exit (0);\n-}\n-\n-static char *\n-concat (s1, s2)\n-     char *s1, *s2;\n-{\n-  int len1 = strlen (s1);\n-  int len2 = strlen (s2);\n-  char *result = malloc (len1 + len2 + 1);\n-\n-  strcpy (result, s1);\n-  strcpy (result + len1, s2);\n-  *(result + len1 + len2) = 0;\n-\n-  return result;\n-}\n-\n-static char *\n-concat3 (s1, s2, s3)\n-     char *s1, *s2, *s3;\n-{\n-  return concat (concat (s1, s2), s3);\n-}"}, {"sha": "adfb57e63cc8056e05c929509ad048fc446106e5", "filename": "gcc/config/winnt/libgcc.mak", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Flibgcc.mak", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Flibgcc.mak", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Flibgcc.mak?ref=1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2", "patch": "@@ -1,19 +0,0 @@\n-# Build libgcc.a\n-\n-libgcc.lib : libgcc1.c libgcc2.c mklibgcc.exe\n-\tmklibgcc -c\n-\tmklibgcc \"cl -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)\" libgcc1.c $(LIB1FUNCS)\n-\tmklibgcc \"xgcc -B./ -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)\" libgcc2.c $(LIB2FUNCS)\n-\tmklibnow.bat\n-\t-del libgcc.lib\n-\tlib -verbose -out:libgcc.lib lgcctmp/*.obj\n-\n-mklibgcc.obj : $(srcdir)/config/winnt/mklibgcc.c\n-\tcl -I. -I$(srcdir) -I$(srcdir)/config/winnt -c $(srcdir)/config/winnt/mklibgcc.c\n-\n-dirent.obj : $(srcdir)/config/winnt/dirent.c stmp-int-hdrs\n-\tcl -I. -I$(srcdir) -I$(srcdir)/include -I$(srcdir)/config/winnt -c $(srcdir)/config/winnt/dirent.c\n-\n-mklibgcc.exe : mklibgcc.obj dirent.obj\n-\tcl mklibgcc.obj dirent.obj libc.lib kernel32.lib\n-"}, {"sha": "081e4ec22c49395363ee9205b992886d1698414d", "filename": "gcc/config/winnt/mklibgcc.c", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fmklibgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fmklibgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fmklibgcc.c?ref=1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2", "patch": "@@ -1,97 +0,0 @@\n-#include <stdio.h>\n-#include <string.h>\n-#include <dirent.h>\n-\n-char *skips[] = {\n-  0\n-};\n-\n-int\n-do_clean()\n-{\n-  DIR *dir;\n-  struct dirent *de;\n-  remove(\"mklibnow.bat\");\n-\n-  dir = opendir(\"lgcctmp\");\n-  if (!dir)\n-    return 0;\n-  while ((de=readdir(dir)))\n-    {\n-      char buf[30];\n-      if (de->d_name[0] == '.')\n-        continue;\n-      sprintf(buf, \"lgcctmp/%s\", de->d_name);\n-      unlink(buf);\n-    }\n-  closedir(dir);\n-  return 0;\n-}\n-\n-int\n-main(int argc, char **argv)\n-{\n-  char *cc = argv[1];\n-  char *csrc=argv[2];\n-  int i;\n-  FILE *batfile;\n-  FILE *cfile;\n-\n-  if (argc > 1 && strcmp(argv[1], \"-c\")==0)\n-    return do_clean();\n-\n-  _mkdir(\"lgcctmp\", 0755);\n-\n-  batfile = fopen(\"mklibnow.bat\", \"a\");\n-  if (!batfile)\n-    {\n-      perror(\"mklibnow.bat\");\n-      return 1;\n-    }\n-/*  fprintf(batfile, \"@echo off\\n\"); */\n-\n-  for (i=3; i<argc; i++)\n-    {\n-      char dirname[30], basename[30], fullname[30], *bp;\n-      int s;\n-      for (s=0; skips[s]; s++)\n-        if (strcmp(skips[s], argv[i]) == 0)\n-  \tbreak;\n-      if (skips[s])\n-        continue;\n-      strcpy(dirname, \"lgcctmp/\");\n-      strcpy(basename, \"\\0\");\n-      if (strncmp(argv[i], \"_fix\", 4)==0)\n-        {\n-          strcat(basename, \"fx\");\n-          strcat(basename, argv[i]+4);\n-        }\n-      else if (strncmp(argv[i], \"_float\", 4)==0)\n-        {\n-          strcat(basename, \"flt\");\n-          strcat(basename, argv[i]+6);\n-        }\n-      else\n-        {\n-          strcat(basename, argv[i]);\n-        }\n-      strcpy (fullname, dirname);\n-      strcat (fullname, basename);\n-      fprintf(batfile, \"%s -c lgcctmp/%s.c\\n\", cc, basename);\n-      fprintf(batfile, \"copy %s.obj lgcctmp\\n\", basename);\n-      bp = fullname + strlen(fullname);\n-      strcpy(bp, \".c\");\n-      cfile = fopen(fullname, \"w\");\n-      if (cfile)\n-        {\n-          *bp = 0;\n-          fprintf(cfile, \"#define L%s\\n#include \\\"%s\\\"\\n\", argv[i], csrc);\n-          fclose(cfile);\n-        }\n-      else\n-        perror(fullname);\n-    }\n-\n-  fclose(batfile);\n-  return 0;\n-}"}, {"sha": "b7a1779b507157559dadda29098f1d03fbb48fc3", "filename": "gcc/config/winnt/oldnames.c", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Foldnames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Foldnames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Foldnames.c?ref=1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2", "patch": "@@ -1,47 +0,0 @@\n-int\n-access (const char *path, int mode)\n-{\n-  return _access (path, mode);\n-}\n-\n-int\n-chmod (const char *filename, int pmode)\n-{\n-  return _chmod (filename, pmode);\n-}\n-\n-int\n-close (int handle)\n-{\n-  return _close (handle);\n-}\n-\n-char *\n-mktemp (char *template)\n-{\n-   return (char *) _mktemp (template);\n-}\n-\n-int\n-open (const char *filename, int oflag, int pmode)\n-{\n-  return _open (filename, oflag, pmode);\n-} \n-\n-int\n-read (int handle, void *buffer, unsigned int count)\n-{\n-  return _read (handle, buffer, count);\n-}\n-\n-int\n-unlink (const char *path)\n-{\n-  return _unlink (path);\n-}\n-\n-int\n-write (int handle, void *buffer, unsigned int count)\n-{\n-  return _write (handle, buffer, count);\n-}"}, {"sha": "49096af998fd68d513751ab30ee9f828227c8090", "filename": "gcc/config/winnt/spawnv.c", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fspawnv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fspawnv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fspawnv.c?ref=1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2", "patch": "@@ -1,71 +0,0 @@\n-/* This is a kludge to get around the Microsoft C spawn functions' propensity\n-   to remove the outermost set of double quotes from all arguments.  */\n-\n-#define index(s,c) strchr((s),(c))\n-\n-extern char *malloc ();\n-\n-const char * const *\n-fix_argv (argv)\n-  char **argv;\n-{\n-  static char sh_chars[] = \"\\\"\";\n-\n-  int i, len;\n-  char *new_argv;\n-  char *p, *ap;\n-\n-  for (i=1; argv[i]; i++)\n-    {\n-\n-      len = strlen (argv[i]);\n-      new_argv = malloc (2*len+3);\n-      ap = new_argv;\n-\n-      for (p = argv[i]; *p != '\\0'; ++p)\n-        {\n-          if (index (sh_chars, *p) != 0)\n-            *ap++ = '\\\\';\n-          *ap++ = *p;\n-        }\n-      *ap = '\\0';\n-      argv[i] = new_argv;\n-    }\n-\n-  return (const char * const *) argv;\n-}\n-\n-int __spawnv (mode, cmdname, argv)\n-  int mode;\n-  const char *cmdname;\n-  char **argv;\n-{\n-  _spawnv (mode, cmdname, fix_argv (argv));\n-}\n-\n-int __spawnvp (mode, cmdname, argv)\n-  int mode;\n-  const char *cmdname;\n-  char **argv;\n-{\n-  _spawnvp (mode, cmdname, fix_argv (argv));\n-}\n-\n-int spawnve (mode, cmdname, argv, envp)\n-  int mode;\n-  const char *cmdname;\n-  char **argv;\n-  const char *const *envp;\n-{\n-  _spawnve (mode, cmdname, fix_argv (argv), envp);\n-}\n-\n-int __spawnvpe (mode, cmdname, argv, envp)\n-  int mode;\n-  const char *cmdname;\n-  char **argv;\n-  const char *const *envp;\n-{\n-  _spawnvpe (mode, cmdname, fix_argv (argv), envp);\n-}\n-"}, {"sha": "f123b0497fc9d19ab218442b3550073323f90cf4", "filename": "gcc/config/winnt/win-nt.h", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fwin-nt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fwin-nt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fwin-nt.h?ref=1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2", "patch": "@@ -1,61 +0,0 @@\n-/* Operating system specific defines to be used when targeting GCC for\n-   Windows NT 3.x.\n-   Copyright (C) 1994, 1995, 1997 Free Software Foundation, Inc.\n-   Contributed by Douglas B. Rupp (drupp@cs.washington.edu).\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#define TARGET_MEM_FUNCTIONS\n-\n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"\"\n-\n-#undef LINK_SPEC\n-#define LINK_SPEC \"-stack 5000000,5000000 -noinhibit-exec %{g}\"\n-\n-#undef CPP_SPEC\n-#define CPP_SPEC \"\"\n-\n-#undef STANDARD_EXEC_PREFIX\n-#define STANDARD_EXEC_PREFIX \"\"\n-\n-#undef STANDARD_STARTFILE_PREFIX\n-#define STANDARD_STARTFILE_PREFIX \"\"\n-\n-#undef TOOLDIR_BASE_PREFIX\n-#define TOOLDIR_BASE_PREFIX \"\"\n-\n-#ifdef STANDARD_INCLUDE_DIR\n-#undef STANDARD_INCLUDE_DIR\n-#endif\n-#define STANDARD_INCLUDE_DIR \"\"\n-\n-#undef LOCAL_INCLUDE_DIR\n-#define LOCAL_INCLUDE_DIR \"\"\n-\n-#undef INCLUDE_DEFAULTS\n-#define INCLUDE_DEFAULTS\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\\\n-    { 0, 0, 0, 0 }\t\t\t\t\t\t\\\n-  }\n-\n-#undef STDC_VALUE\n-#define STDC_VALUE 0\n-\n-/* Enable parsing of #pragma pack(push,<n>) and #pragma pack(pop).  */\n-#define HANDLE_PRAGMA_PACK_PUSH_POP 1"}, {"sha": "36e36b9c1a259ba436fc3671576adaab1ae962e0", "filename": "gcc/config/winnt/x-winnt", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fx-winnt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fx-winnt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fx-winnt?ref=1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2", "patch": "@@ -1,34 +0,0 @@\n-STMP_FIXPROTO =\n-OTHER_FIXINCLUDES_DIRS=${srcdir}\n-RANLIB = :\n-RANLIB_TEST = false\n-OLDCC = cl\n-MAKE = make\n-SHELL = sh\n-SYMLINK = cp\n-INSTALL = $(srcdir)/install.sh -c\n-.SUFFIXES: .obj\n-.c.obj:\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n-.adb.obj:\n-\t$(CC) -c $(ALL_ADAFLAGS) $<\n-.ads.obj:\n-\t$(CC) -c $(ALL_ADAFLAGS) $<\n-exeext = .exe\n-objext = .obj\n-\n-CC = gcc\n-CLIB = \n-LDFLAGS = \n-\n-ld.o: $(srcdir)/config/winnt/ld.c\n-\t$(CC) -I. -I$(srcdir) -I$(srcdir)/config -c $(srcdir)/config/winnt/ld.c\n- \n-ld.exe: ld.o\n-\t$(CC) -o ld.exe ld.o\n-\n-oldnames.o: $(srcdir)/config/winnt/oldnames.c\n-\t$(CC) -I. -I$(srcdir) -I$(srcdir)/config -c $(srcdir)/config/winnt/oldnames.c\n-\n-spawnv.o: $(srcdir)/config/winnt/spawnv.c\n-\t$(CC) -I. -I$(srcdir) -I$(srcdir)/config -c $(srcdir)/config/winnt/spawnv.c"}, {"sha": "88a4b572ecced66915601144a7c7726032e4b7b3", "filename": "gcc/config/winnt/xm-winnt.h", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fxm-winnt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2/gcc%2Fconfig%2Fwinnt%2Fxm-winnt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fxm-winnt.h?ref=1ccfe3fa1f8cfbdc90f6425501fd442bf1bbc4a2", "patch": "@@ -1,71 +0,0 @@\n-/* Configuration for GNU compiler for processor running Windows NT 3.x.\n-   Copyright (C) 1993, 1995, 1997, 1999 Free Software Foundation, Inc.\n-   Contributed by Douglas B. Rupp (drupp@cs.washington.edu)\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#include <stdlib.h>\n-\n-#ifndef USG\n-#define USG 1\n-#endif\n-\n-#ifndef ONLY_INT_FIELD\n-#define ONLY_INT_FIELDS 1\n-#endif\n-\n-#ifndef USE_PROTOTYPES\n-#define USE_PROTOTYPES 1\n-#endif\n-\n-#ifndef HAVE_PUTENV\n-#define HAVE_PUTENV 1\n-#endif\n-\n-#ifndef HAVE_VPRINTF\n-#define HAVE_VPRINTF 1\n-#endif\n-\n-#define kill(a,b) raise(b)\n-\n-#define OBJECT_SUFFIX \".obj\"\n-#define EXECUTABLE_SUFFIX \".exe\"\n-#define PATH_SEPARATOR ';'\n-\n-#define DIR_SEPARATOR '\\\\'\n-#define DIR_SEPARATOR_2 '/'\n-\n-/* Allows checks for drive names.  */\n-#define HAVE_DOS_BASED_FILE_SYSTEM\n-\n-/* Tell GCC about NT's bit bucket. */\n-\n-#define HOST_BIT_BUCKET \"NUL\"\n-\n-#define S_IRUSR 0000400\n-#define S_IWUSR 0000200\n-#define S_IXUSR 0000100\n-#define S_IRGRP 0000040\n-#define S_IWGRP 0000020\n-#define S_IXGRP 0000010\n-#define S_IROTH 0000004\n-#define S_IWOTH 0000002\n-#define S_IXOTH 0000001\n-#define S_IRWXU S_IRUSR | S_IWUSR | S_IXUSR\n-#define S_ISREG(m) (((m)&S_IFMT) == S_IFREG)\n-#define S_ISDIR(m) (((m)&S_IFMT) == S_IFDIR)"}, {"sha": "928387eea817bdc951bad6d85f77c05f985b789a", "filename": "gcc/install.texi", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f4d7aa737f13a00221654dbb5429b26989d53c/gcc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f4d7aa737f13a00221654dbb5429b26989d53c/gcc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finstall.texi?ref=17f4d7aa737f13a00221654dbb5429b26989d53c", "patch": "@@ -1113,35 +1113,6 @@ and Microsoft named libraries.  For example, if you specify\n @samp{-lfoo}, @file{ld.exe} will look first for @file{libfoo.a}\n and then for @file{foo.lib}.\n \n-You may install GNU CC for Windows NT in one of two ways, depending on\n-whether or not you have a Unix-like shell and various Unix-like\n-utilities.\n-\n-@enumerate\n-@item\n-If you do not have a Unix-like shell and few Unix-like utilities, you\n-will use a DOS style batch script called @file{configure.bat}.  Invoke\n-it as @code{configure winnt} from an MSDOS console window or from the\n-program manager dialog box.  @file{configure.bat} assumes you have\n-already installed and have in your path a Unix-like @file{sed} program\n-which is used to create a working @file{Makefile} from @file{Makefile.in}.\n-\n-@file{Makefile} uses the Microsoft Nmake program maintenance utility and\n-the Visual C/C++ V8.00 compiler to build GNU CC.  You need only have the\n-utilities @file{sed} and @file{touch} to use this installation method,\n-which only automatically builds the compiler itself.  You must then\n-examine what @file{fixinc.winnt} does, edit the header files by hand and\n-build @file{libgcc.a} manually.\n-\n-@item\n-The second type of installation assumes you are running a Unix-like\n-shell, have a complete suite of Unix-like utilities in your path, and\n-have a previous version of GNU CC already installed, either through\n-building it via the above installation method or acquiring a pre-built\n-binary.  In this case, use the @file{configure} script in the normal\n-fashion.\n-@end enumerate\n-\n @item i860-intel-osf1\n This is the Paragon.\n @ifset INSTALLONLY"}]}