{"sha": "4fda1ad1dcd40178e001a11b6cd82bce5eed7260", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZkYTFhZDFkY2Q0MDE3OGUwMDFhMTFiNmNkODJiY2U1ZWVkNzI2MA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2012-10-30T12:31:49Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2012-10-30T12:31:49Z"}, "message": "2012-10-30  James Greenhalgh  <james.greenhalgh@arm.com>\n\t    Tejas Belagod  <tejas.belagod@arm.com>\n\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_simd_bsl<mode>_internal): New pattern.\n\t(aarch64_simd_bsl<mode>): Likewise.\n\t(aarch64_vcond_internal<mode>): Likewise.\n\t(vcondu<mode><mode>): Likewise.\n\t(vcond<mode><mode>): Likewise.\n\t* config/aarch64/iterators.md (UNSPEC_BSL): Add to define_constants.\n\n\nCo-Authored-By: Tejas Belagod <tejas.belagod@arm.com>\n\nFrom-SVN: r192985", "tree": {"sha": "54f30fff13df5e781b420a295fe8f379858e0652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54f30fff13df5e781b420a295fe8f379858e0652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fda1ad1dcd40178e001a11b6cd82bce5eed7260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fda1ad1dcd40178e001a11b6cd82bce5eed7260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fda1ad1dcd40178e001a11b6cd82bce5eed7260", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fda1ad1dcd40178e001a11b6cd82bce5eed7260/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c96cab6e77de25e1f15b3d8c33cd22a789bc7c4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c96cab6e77de25e1f15b3d8c33cd22a789bc7c4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c96cab6e77de25e1f15b3d8c33cd22a789bc7c4f"}], "stats": {"total": 156, "additions": 156, "deletions": 0}, "files": [{"sha": "467bec3c3c7649d5386a374b71518010af34f881", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fda1ad1dcd40178e001a11b6cd82bce5eed7260/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fda1ad1dcd40178e001a11b6cd82bce5eed7260/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fda1ad1dcd40178e001a11b6cd82bce5eed7260", "patch": "@@ -1,3 +1,14 @@\n+2012-10-30  James Greenhalgh  <james.greenhalgh@arm.com>\n+\t    Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_simd_bsl<mode>_internal): New pattern.\n+\t(aarch64_simd_bsl<mode>): Likewise.\n+\t(aarch64_vcond_internal<mode>): Likewise.\n+\t(vcondu<mode><mode>): Likewise.\n+\t(vcond<mode><mode>): Likewise.\n+\t* config/aarch64/iterators.md (UNSPEC_BSL): Add to define_constants.\n+\n 2012-10-30  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/55111"}, {"sha": "b3d01c1919905d8d5a73a3e3ac2965870de5c35b", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fda1ad1dcd40178e001a11b6cd82bce5eed7260/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fda1ad1dcd40178e001a11b6cd82bce5eed7260/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=4fda1ad1dcd40178e001a11b6cd82bce5eed7260", "patch": "@@ -1467,6 +1467,150 @@\n    (set_attr \"simd_mode\" \"V2SI\")]\n )\n \n+;; vbsl_* intrinsics may compile to any of vbsl/vbif/vbit depending on register\n+;; allocation.  For an intrinsic of form:\n+;;   vD = bsl_* (vS, vN, vM)\n+;; We can use any of:\n+;;   bsl vS, vN, vM  (if D = S)\n+;;   bit vD, vN, vS  (if D = M, so 1-bits in vS choose bits from vN, else vM)\n+;;   bif vD, vM, vS  (if D = N, so 0-bits in vS choose bits from vM, else vN)\n+\n+(define_insn \"aarch64_simd_bsl<mode>_internal\"\n+  [(set (match_operand:VDQ 0 \"register_operand\"\t\t     \"=w,w,w\")\n+\t(unspec:VDQ [(match_operand:VDQ 1 \"register_operand\" \" 0,w,w\")\n+\t\t     (match_operand:VDQ 2 \"register_operand\" \" w,w,0\")\n+\t\t     (match_operand:VDQ 3 \"register_operand\" \" w,0,w\")]\n+\t\t    UNSPEC_BSL))]\n+  \"TARGET_SIMD\"\n+  \"@\n+  bsl\\\\t%0.<Vbtype>, %2.<Vbtype>, %3.<Vbtype>\n+  bit\\\\t%0.<Vbtype>, %2.<Vbtype>, %1.<Vbtype>\n+  bif\\\\t%0.<Vbtype>, %3.<Vbtype>, %1.<Vbtype>\"\n+)\n+\n+(define_expand \"aarch64_simd_bsl<mode>\"\n+  [(set (match_operand:VDQ 0 \"register_operand\")\n+\t(unspec:VDQ [(match_operand:<V_cmp_result> 1 \"register_operand\")\n+\t\t     (match_operand:VDQ 2 \"register_operand\")\n+\t\t     (match_operand:VDQ 3 \"register_operand\")]\n+\t\t    UNSPEC_BSL))]\n+  \"TARGET_SIMD\"\n+{\n+  /* We can't alias operands together if they have different modes.  */\n+  operands[1] = gen_lowpart (<MODE>mode, operands[1]);\n+})\n+\n+(define_expand \"aarch64_vcond_internal<mode>\"\n+  [(set (match_operand:VDQ 0 \"register_operand\")\n+\t(if_then_else:VDQ\n+\t  (match_operator 3 \"comparison_operator\"\n+\t    [(match_operand:VDQ 4 \"register_operand\")\n+\t     (match_operand:VDQ 5 \"nonmemory_operand\")])\n+\t  (match_operand:VDQ 1 \"register_operand\")\n+\t  (match_operand:VDQ 2 \"register_operand\")))]\n+  \"TARGET_SIMD\"\n+{\n+  int inverse = 0, has_zero_imm_form = 0;\n+  rtx mask = gen_reg_rtx (<MODE>mode);\n+\n+  switch (GET_CODE (operands[3]))\n+    {\n+    case LE:\n+    case LT:\n+    case NE:\n+      inverse = 1;\n+      /* Fall through.  */\n+    case GE:\n+    case GT:\n+    case EQ:\n+      has_zero_imm_form = 1;\n+      break;\n+    case LEU:\n+    case LTU:\n+      inverse = 1;\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  if (!REG_P (operands[5])\n+      && (operands[5] != CONST0_RTX (<MODE>mode) || !has_zero_imm_form))\n+    operands[5] = force_reg (<MODE>mode, operands[5]);\n+\n+  switch (GET_CODE (operands[3]))\n+    {\n+    case LT:\n+    case GE:\n+      emit_insn (gen_aarch64_cmge<mode> (mask, operands[4], operands[5]));\n+      break;\n+\n+    case LE:\n+    case GT:\n+      emit_insn (gen_aarch64_cmgt<mode> (mask, operands[4], operands[5]));\n+      break;\n+\n+    case LTU:\n+    case GEU:\n+      emit_insn (gen_aarch64_cmhs<mode> (mask, operands[4], operands[5]));\n+      break;\n+\n+    case LEU:\n+    case GTU:\n+      emit_insn (gen_aarch64_cmhi<mode> (mask, operands[4], operands[5]));\n+      break;\n+\n+    case NE:\n+    case EQ:\n+      emit_insn (gen_aarch64_cmeq<mode> (mask, operands[4], operands[5]));\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  if (inverse)\n+    emit_insn (gen_aarch64_simd_bsl<mode> (operands[0], mask, operands[2],\n+\t\t\t\t    operands[1]));\n+  else\n+    emit_insn (gen_aarch64_simd_bsl<mode> (operands[0], mask, operands[1],\n+\t\t\t\t    operands[2]));\n+\n+  DONE;\n+})\n+\n+(define_expand \"vcond<mode><mode>\"\n+  [(set (match_operand:VDQ 0 \"register_operand\")\n+\t(if_then_else:VDQ\n+\t  (match_operator 3 \"comparison_operator\"\n+\t    [(match_operand:VDQ 4 \"register_operand\")\n+\t     (match_operand:VDQ 5 \"nonmemory_operand\")])\n+\t  (match_operand:VDQ 1 \"register_operand\")\n+\t  (match_operand:VDQ 2 \"register_operand\")))]\n+  \"TARGET_SIMD\"\n+{\n+  emit_insn (gen_aarch64_vcond_internal<mode> (operands[0], operands[1],\n+\t\t\t\t\t       operands[2], operands[3],\n+\t\t\t\t\t       operands[4], operands[5]));\n+  DONE;\n+})\n+\n+\n+(define_expand \"vcondu<mode><mode>\"\n+  [(set (match_operand:VDQ 0 \"register_operand\")\n+\t(if_then_else:VDQ\n+\t  (match_operator 3 \"comparison_operator\"\n+\t    [(match_operand:VDQ 4 \"register_operand\")\n+\t     (match_operand:VDQ 5 \"nonmemory_operand\")])\n+\t  (match_operand:VDQ 1 \"register_operand\")\n+\t  (match_operand:VDQ 2 \"register_operand\")))]\n+  \"TARGET_SIMD\"\n+{\n+  emit_insn (gen_aarch64_vcond_internal<mode> (operands[0], operands[1],\n+\t\t\t\t\t       operands[2], operands[3],\n+\t\t\t\t\t       operands[4], operands[5]));\n+  DONE;\n+})\n+\n ;; Patterns for AArch64 SIMD Intrinsics.\n \n (define_expand \"aarch64_create<mode>\""}, {"sha": "8d5d4b0d5ed88fc5c02c82d25a484abbe6b2da8a", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fda1ad1dcd40178e001a11b6cd82bce5eed7260/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fda1ad1dcd40178e001a11b6cd82bce5eed7260/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=4fda1ad1dcd40178e001a11b6cd82bce5eed7260", "patch": "@@ -227,6 +227,7 @@\n     UNSPEC_CMTST\t; Used in aarch64-simd.md.\n     UNSPEC_FMAX\t\t; Used in aarch64-simd.md.\n     UNSPEC_FMIN\t\t; Used in aarch64-simd.md.\n+    UNSPEC_BSL\t\t; Used in aarch64-simd.md.\n ])\n \n ;; -------------------------------------------------------------------"}]}