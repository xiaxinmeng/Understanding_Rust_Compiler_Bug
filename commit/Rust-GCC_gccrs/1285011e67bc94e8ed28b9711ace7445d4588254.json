{"sha": "1285011e67bc94e8ed28b9711ace7445d4588254", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI4NTAxMWU2N2JjOTRlOGVkMjhiOTcxMWFjZTc0NDVkNDU4ODI1NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-11-03T15:50:04Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-11-03T15:50:04Z"}, "message": "emit-rtl.c (set_mem_attributes): Set RTX_UNCHANGINGP_P if T is a constant expression.\n\n\t* emit-rtl.c (set_mem_attributes): Set RTX_UNCHANGINGP_P if T is a\n\tconstant expression.\n\t(set_mem_decl): New function.\n\t* expr.h (set_mem_decl): New declaration.\n\t* final.c (get_decl_from_op): Don't use ORIGINAL_REGNO if not pseudo.\n\t(output_asm_operand_names): Add tab.\n\t* reload1.c (alter_reg): Set decl of MEM from REG_DECL.\n\nFrom-SVN: r46733", "tree": {"sha": "72debaad8ba738e2cb6c88c8463e497466353307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72debaad8ba738e2cb6c88c8463e497466353307"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1285011e67bc94e8ed28b9711ace7445d4588254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1285011e67bc94e8ed28b9711ace7445d4588254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1285011e67bc94e8ed28b9711ace7445d4588254", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1285011e67bc94e8ed28b9711ace7445d4588254/comments", "author": null, "committer": null, "parents": [{"sha": "343fb4120866d610c7e233f19dfcf2b3322774ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/343fb4120866d610c7e233f19dfcf2b3322774ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/343fb4120866d610c7e233f19dfcf2b3322774ca"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "61866387cf31e6b5c9cedbb075958fe761ce43e1", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1285011e67bc94e8ed28b9711ace7445d4588254/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1285011e67bc94e8ed28b9711ace7445d4588254/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=1285011e67bc94e8ed28b9711ace7445d4588254", "patch": "@@ -1691,8 +1691,9 @@ set_mem_attributes (ref, t, objectp)\n   MEM_VOLATILE_P (ref) = TYPE_VOLATILE (type);\n   MEM_IN_STRUCT_P (ref) = AGGREGATE_TYPE_P (type);\n   RTX_UNCHANGING_P (ref)\n-    |= (lang_hooks.honor_readonly\n-\t&& (TYPE_READONLY (type) || TREE_READONLY (t)));\n+    |= ((lang_hooks.honor_readonly\n+\t && (TYPE_READONLY (type) || TREE_READONLY (t)))\n+\t|| (! TYPE_P (t) && TREE_CONSTANT (t)));\n \n   /* If we are making an object of this type, or if this is a DECL, we know\n      that it is a scalar if the type is not an aggregate.  */\n@@ -1783,6 +1784,18 @@ set_mem_align (mem, align)\n \t\t\t\t   MEM_OFFSET (mem), MEM_SIZE (mem), align,\n \t\t\t\t   GET_MODE (mem));\n }\n+\n+/* Set the decl for MEM to DECL.  */\n+\n+void\n+set_mem_decl (mem, decl)\n+     rtx mem;\n+     tree decl;\n+{\n+  MEM_ATTRS (mem)\n+    = get_mem_attrs (MEM_ALIAS_SET (mem), decl, MEM_OFFSET (mem),\n+\t\t     MEM_SIZE (mem), MEM_ALIGN (mem), GET_MODE (mem));\n+}\n \f\n /* Return a memory reference like MEMREF, but with its mode changed to MODE\n    and its address changed to ADDR.  (VOIDmode means don't change the mode."}, {"sha": "4b5f124758dcd3f9674c11563f1369a8340965b3", "filename": "gcc/expr.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1285011e67bc94e8ed28b9711ace7445d4588254/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1285011e67bc94e8ed28b9711ace7445d4588254/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=1285011e67bc94e8ed28b9711ace7445d4588254", "patch": "@@ -615,6 +615,9 @@ extern void set_mem_alias_set PARAMS ((rtx, HOST_WIDE_INT));\n /* Set the alignment of MEM to ALIGN bits.  */\n extern void set_mem_align PARAMS ((rtx, unsigned int));\n \n+/* Set the DECL for MEM to DECL.  */\n+extern void set_mem_decl PARAMS ((rtx, tree));\n+\n /* Return a memory reference like MEMREF, but with its mode changed\n    to MODE and its address changed to ADDR.\n    (VOIDmode means don't change the mode."}, {"sha": "6b2ea7eda6014ee716795c2e7bb381037f9de683", "filename": "gcc/final.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1285011e67bc94e8ed28b9711ace7445d4588254/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1285011e67bc94e8ed28b9711ace7445d4588254/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=1285011e67bc94e8ed28b9711ace7445d4588254", "patch": "@@ -3304,7 +3304,7 @@ get_decl_from_op (op, paddressp)\n \n   *paddressp = 0;\n \n-  if (GET_CODE (op) == REG)\n+  if (GET_CODE (op) == REG && ORIGINAL_REGNO (op) >= FIRST_PSEUDO_REGISTER)\n     return REGNO_DECL (ORIGINAL_REGNO (op));\n   else if (GET_CODE (op) != MEM)\n     return 0;\n@@ -3353,9 +3353,9 @@ output_asm_operand_names (operands, oporder, nops)\n \n       if (decl && DECL_NAME (decl))\n \t{\n-\t  fprintf (asm_out_file, \"%s %s%s\",\n-\t\t   wrote ? \",\" : ASM_COMMENT_START, addressp ? \"*\" : \"\",\n-\t\t   IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\t  fprintf (asm_out_file, \"%c%s %s%s\",\n+\t\t   wrote ? ',' : '\\t', wrote ? \"\" : ASM_COMMENT_START,\n+\t\t   addressp ? \"*\" : \"\", IDENTIFIER_POINTER (DECL_NAME (decl)));\n \t  wrote = 1;\n \t}\n     }"}, {"sha": "165573bdf8d867ccaa2a7c1db2207beab52147c9", "filename": "gcc/reload1.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1285011e67bc94e8ed28b9711ace7445d4588254/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1285011e67bc94e8ed28b9711ace7445d4588254/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=1285011e67bc94e8ed28b9711ace7445d4588254", "patch": "@@ -2043,8 +2043,17 @@ alter_reg (i, from_reg)\n \n       /* If we have any adjustment to make, or if the stack slot is the\n \t wrong mode, make a new stack slot.  */\n-      if (adjust != 0 || GET_MODE (x) != GET_MODE (regno_reg_rtx[i]))\n-\tx = adjust_address_nv (x, GET_MODE (regno_reg_rtx[i]), adjust);\n+      x = adjust_address_nv (x, GET_MODE (regno_reg_rtx[i]), adjust);\n+\n+      /* If we have a decl for the original register, set it for the\n+\t memory.  If this is a shared MEM, make a copy.  */\n+      if (REGNO_DECL (i))\n+\t{\n+\t  if (from_reg != -1 && spill_stack_slot[from_reg] == x)\n+\t    x = copy_rtx (x);\n+\n+\t  set_mem_decl (x, REGNO_DECL (i));\n+\t}\n \n       /* Save the stack slot for later.  */\n       reg_equiv_memory_loc[i] = x;"}]}