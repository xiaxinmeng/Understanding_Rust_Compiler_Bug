{"sha": "07999eb2b1ec560419d1f50874429fc2c802ed26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc5OTllYjJiMWVjNTYwNDE5ZDFmNTA4NzQ0MjlmYzJjODAyZWQyNg==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2017-08-09T18:58:37Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2017-08-09T18:58:37Z"}, "message": "fold-vec-cntlz-int.c: New.\n\n\n\t2017-08-09  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-cntlz-int.c: New.\n\t* gcc.target/powerpc/fold-vec-cntlz-char.c: New.\n\t* gcc.target/powerpc/fold-vec-cntlz-short.c: New.\n\t* gcc.target/powerpc/fold-vec-cntlz-longlong.c: New.\n\nFrom-SVN: r250995", "tree": {"sha": "9cabcc5ea071eefbe09e5c2948adcd0696ee861e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cabcc5ea071eefbe09e5c2948adcd0696ee861e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07999eb2b1ec560419d1f50874429fc2c802ed26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07999eb2b1ec560419d1f50874429fc2c802ed26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07999eb2b1ec560419d1f50874429fc2c802ed26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07999eb2b1ec560419d1f50874429fc2c802ed26/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9fb82e652cee118b5c9d77e1e60a351a37a55dc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb82e652cee118b5c9d77e1e60a351a37a55dc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fb82e652cee118b5c9d77e1e60a351a37a55dc8"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "97a17e33f166b8c7f7a102995001795d82e2099e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07999eb2b1ec560419d1f50874429fc2c802ed26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07999eb2b1ec560419d1f50874429fc2c802ed26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07999eb2b1ec560419d1f50874429fc2c802ed26", "patch": "@@ -1,3 +1,10 @@\n+2017-08-09  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-cntlz-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-cntlz-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-cntlz-short.c: New.\n+\t* gcc.target/powerpc/fold-vec-cntlz-longlong.c: New.\n+\n 2017-08-09  Slava Barinov  <v.barinov@samsung.com>\n \n \t* g++.dg/asan/asan.exp: Switch on *.cc tests."}, {"sha": "61dfbccd672f3b0962066f5380187762570f3dbe", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-cntlz-char.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07999eb2b1ec560419d1f50874429fc2c802ed26/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cntlz-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07999eb2b1ec560419d1f50874429fc2c802ed26/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cntlz-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cntlz-char.c?ref=07999eb2b1ec560419d1f50874429fc2c802ed26", "patch": "@@ -0,0 +1,22 @@\n+/* Verify that overloaded built-ins for vec_cntlz with char\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-maltivec -mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed char\n+testsc_h (vector signed char vsc2)\n+{\n+  return vec_cntlz (vsc2);\n+}\n+\n+vector unsigned char\n+testuc_h (vector unsigned char vuc2)\n+{\n+  return vec_cntlz (vuc2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vclzb\" 2 } } */"}, {"sha": "ae4dd5776928e67b6718f7d1e4025923f960ba25", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-cntlz-int.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07999eb2b1ec560419d1f50874429fc2c802ed26/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cntlz-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07999eb2b1ec560419d1f50874429fc2c802ed26/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cntlz-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cntlz-int.c?ref=07999eb2b1ec560419d1f50874429fc2c802ed26", "patch": "@@ -0,0 +1,22 @@\n+/* Verify that overloaded built-ins for vec_cntlz with int\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-maltivec -mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed int\n+testsi (vector signed int vsi2)\n+{\n+  return vec_cntlz (vsi2);\n+}\n+\n+vector unsigned int\n+testui (vector unsigned int vui2)\n+{\n+  return vec_cntlz (vui2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vclzw\" 2 } } */"}, {"sha": "1a72a2d38c7fcf455e09fd950504502f99ff9c76", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-cntlz-longlong.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07999eb2b1ec560419d1f50874429fc2c802ed26/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cntlz-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07999eb2b1ec560419d1f50874429fc2c802ed26/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cntlz-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cntlz-longlong.c?ref=07999eb2b1ec560419d1f50874429fc2c802ed26", "patch": "@@ -0,0 +1,22 @@\n+/* Verify that overloaded built-ins for vec_cntlz with long long\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mvsx -mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed long long\n+testsl (vector signed long long vsl2)\n+{\n+  return vec_cntlz (vsl2);\n+}\n+\n+vector unsigned long long\n+testul (vector unsigned long long vul2)\n+{\n+  return vec_cntlz (vul2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vclzd\" 2 } } */"}, {"sha": "0f05cace2e65cbfa9274ca88968d3ef3558e1434", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-cntlz-short.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07999eb2b1ec560419d1f50874429fc2c802ed26/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cntlz-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07999eb2b1ec560419d1f50874429fc2c802ed26/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cntlz-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-cntlz-short.c?ref=07999eb2b1ec560419d1f50874429fc2c802ed26", "patch": "@@ -0,0 +1,22 @@\n+/* Verify that overloaded built-ins for vec_cntlz with int\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-maltivec -mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed short\n+testsi (vector signed short vss2)\n+{\n+  return vec_cntlz (vss2);\n+}\n+\n+vector unsigned short\n+testui (vector unsigned short vus2)\n+{\n+  return vec_cntlz (vus2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vclzh\" 2 } } */"}]}