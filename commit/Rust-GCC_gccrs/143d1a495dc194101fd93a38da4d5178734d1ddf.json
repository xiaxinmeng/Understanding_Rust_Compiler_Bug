{"sha": "143d1a495dc194101fd93a38da4d5178734d1ddf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQzZDFhNDk1ZGMxOTQxMDFmZDkzYTM4ZGE0ZDUxNzg3MzRkMWRkZg==", "commit": {"author": {"name": "Roland McGrath", "email": "roland@gcc.gnu.org", "date": "1993-03-06T08:14:18Z"}, "committer": {"name": "Roland McGrath", "email": "roland@gcc.gnu.org", "date": "1993-03-06T08:14:18Z"}, "message": "entered into RCS\n\nFrom-SVN: r3666", "tree": {"sha": "779294981c091adba996c5792ea2ff293130dfb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/779294981c091adba996c5792ea2ff293130dfb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/143d1a495dc194101fd93a38da4d5178734d1ddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143d1a495dc194101fd93a38da4d5178734d1ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/143d1a495dc194101fd93a38da4d5178734d1ddf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143d1a495dc194101fd93a38da4d5178734d1ddf/comments", "author": null, "committer": null, "parents": [{"sha": "a8137d17b19ab3d5fac20a4b3772d05fe3fa3744", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8137d17b19ab3d5fac20a4b3772d05fe3fa3744", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8137d17b19ab3d5fac20a4b3772d05fe3fa3744"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "58df99b9ee33a3ede32c94e0cf2076d8eb8e923c", "filename": "gcc/config/i386/scodbx.h", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143d1a495dc194101fd93a38da4d5178734d1ddf/gcc%2Fconfig%2Fi386%2Fscodbx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143d1a495dc194101fd93a38da4d5178734d1ddf/gcc%2Fconfig%2Fi386%2Fscodbx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fscodbx.h?ref=143d1a495dc194101fd93a38da4d5178734d1ddf", "patch": "@@ -0,0 +1,88 @@\n+/* Definitions for Intel 386 running SCO Unix System V,\n+   using dbx-in-coff encapsulation.\n+   Copyright (C) 1992 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"i386/svr3dbx.h\"\n+\n+/* Overridden defines for SCO systems from sco.h. */\n+\n+/* By default, target has a 80387, uses IEEE compatible arithmetic,\n+   and returns float values in the 387, ie,\n+   (TARGET_80387 | TARGET_FLOAT_RETURNS_IN_80387)\n+\n+   SCO's software emulation of a 387 fails to handle the `fucomp'\n+   opcode.  fucomp is only used when generating IEEE compliant code.\n+   So don't make TARGET_IEEE_FP default for SCO. */\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT 0201\n+\n+/* Use crt1.o as a startup file and crtn.o as a closing file.  */\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  \"%{!r:%{!z:svr3.ifile%s}%{z:svr3z.ifile%s}}\\\n+   %{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}}\"\n+\n+/* Library spec, including SCO international language support. */\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \\\n+ \"%{p:-L/usr/lib/libp}%{pg:-L/usr/lib/libp} %{scointl:libintl.a%s} -lc\"\n+\n+/* Specify predefined symbols in preprocessor.  */\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dunix -Di386 -DM_UNIX -DM_I386 -DM_COFF -DM_WORDSWAP\"\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{scointl:-DM_INTERNAT}\"\n+\n+/* This spec is used for telling cpp whether char is signed or not.  */\n+\n+#undef SIGNED_CHAR_SPEC\n+#if DEFAULT_SIGNED_CHAR\n+#define SIGNED_CHAR_SPEC \\\n+ \"%{funsigned-char:-D__CHAR_UNSIGNED__ -D_CHAR_UNSIGNED}\"\n+#else\n+#define SIGNED_CHAR_SPEC \\\n+ \"%{!fsigned-char:-D__CHAR_UNSIGNED__ -D_CHAR_UNSIGNED}\"\n+#endif\n+\n+/* Use atexit for static destructors, instead of defining\n+   our own exit function.  */\n+#define HAVE_ATEXIT\n+\n+/* caller has to pop the extra argument passed to functions that return\n+   structures. */\n+\n+#undef RETURN_POPS_ARGS\n+#define RETURN_POPS_ARGS(FUNTYPE,SIZE)   \\\n+  (TREE_CODE (FUNTYPE) == IDENTIFIER_NODE ? 0\t\t\t\\\n+   : (TARGET_RTD\t\t\t\t\t\t\\\n+      && (TYPE_ARG_TYPES (FUNTYPE) == 0\t\t\t\t\\\n+\t  || (TREE_VALUE (tree_last (TYPE_ARG_TYPES (FUNTYPE)))\t\\\n+\t      == void_type_node))) ? (SIZE)\t\t\t\\\n+   : 0)\n+/* On other 386 systems, the last line looks like this:\n+   : (aggregate_value_p (FUNTYPE)) ? GET_MODE_SIZE (Pmode) : 0)  */\n+\n+/* Use periods rather than dollar signs in special g++ assembler names.  */\n+\n+#define NO_DOLLAR_IN_LABEL"}]}