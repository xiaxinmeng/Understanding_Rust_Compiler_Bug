{"sha": "e472781227253bf87e273512026256fb563b1646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ3Mjc4MTIyNzI1M2JmODdlMjczNTEyMDI2MjU2ZmI1NjNiMTY0Ng==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2014-11-17T13:52:37Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2014-11-17T13:52:37Z"}, "message": "tree-chkp-opt.c (chkp_get_nobnd_fndecl): New.\n\ngcc/\n\n\t* tree-chkp-opt.c (chkp_get_nobnd_fndecl): New.\n\t(chkp_get_nochk_fndecl): New.\n\t(chkp_optimize_string_function_calls): New.\n\t(chkp_opt_execute): Call chkp_optimize_string_function_calls.\n\t* tree-cfg.h (insert_cond_bb): New.\n\t* tree-cfg.c (insert_cond_bb): New.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/chkp-stropt-1.c: New.\n\t* gcc.target/i386/chkp-stropt-2.c: New.\n\t* gcc.target/i386/chkp-stropt-3.c: New.\n\t* gcc.target/i386/chkp-stropt-4.c: New.\n\t* gcc.target/i386/chkp-stropt-5.c: New.\n\t* gcc.target/i386/chkp-stropt-6.c: New.\n\t* gcc.target/i386/chkp-stropt-7.c: New.\n\t* gcc.target/i386/chkp-stropt-8.c: New.\n\t* gcc.target/i386/chkp-stropt-9.c: New.\n\t* gcc.target/i386/chkp-stropt-10.c: New.\n\t* gcc.target/i386/chkp-stropt-11.c: New.\n\t* gcc.target/i386/chkp-stropt-12.c: New.\n\t* gcc.target/i386/chkp-stropt-13.c: New.\n\t* gcc.target/i386/chkp-stropt-14.c: New.\n\t* gcc.target/i386/chkp-stropt-15.c: New.\n\t* gcc.target/i386/chkp-stropt-16.c: New.\n\nFrom-SVN: r217656", "tree": {"sha": "3c75dec2d28402651373e70d1c33fc2231b609a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c75dec2d28402651373e70d1c33fc2231b609a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e472781227253bf87e273512026256fb563b1646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e472781227253bf87e273512026256fb563b1646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e472781227253bf87e273512026256fb563b1646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e472781227253bf87e273512026256fb563b1646/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "edcf72f3c9e070fe904ff9ff2f2fd145e694af83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edcf72f3c9e070fe904ff9ff2f2fd145e694af83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edcf72f3c9e070fe904ff9ff2f2fd145e694af83"}], "stats": {"total": 525, "additions": 525, "deletions": 0}, "files": [{"sha": "a67defd5bdaf8c6dc16f9e98863b8ffbca990343", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -1,3 +1,12 @@\n+2014-11-17  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* tree-chkp-opt.c (chkp_get_nobnd_fndecl): New.\n+\t(chkp_get_nochk_fndecl): New.\n+\t(chkp_optimize_string_function_calls): New.\n+\t(chkp_opt_execute): Call chkp_optimize_string_function_calls.\n+\t* tree-cfg.h (insert_cond_bb): New.\n+\t* tree-cfg.c (insert_cond_bb): New.\n+\n 2014-11-17  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* tree-core.h (built_in_class): Add builtin codes to be used"}, {"sha": "2701c114a4e69a9e33b83b53b6bbaf3386dce015", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -1,3 +1,22 @@\n+2014-11-17  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* gcc.target/i386/chkp-stropt-1.c: New.\n+\t* gcc.target/i386/chkp-stropt-2.c: New.\n+\t* gcc.target/i386/chkp-stropt-3.c: New.\n+\t* gcc.target/i386/chkp-stropt-4.c: New.\n+\t* gcc.target/i386/chkp-stropt-5.c: New.\n+\t* gcc.target/i386/chkp-stropt-6.c: New.\n+\t* gcc.target/i386/chkp-stropt-7.c: New.\n+\t* gcc.target/i386/chkp-stropt-8.c: New.\n+\t* gcc.target/i386/chkp-stropt-9.c: New.\n+\t* gcc.target/i386/chkp-stropt-10.c: New.\n+\t* gcc.target/i386/chkp-stropt-11.c: New.\n+\t* gcc.target/i386/chkp-stropt-12.c: New.\n+\t* gcc.target/i386/chkp-stropt-13.c: New.\n+\t* gcc.target/i386/chkp-stropt-14.c: New.\n+\t* gcc.target/i386/chkp-stropt-15.c: New.\n+\t* gcc.target/i386/chkp-stropt-16.c: New.\n+\n 2014-11-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* g++.dg/ipa/pr63894.C (new): Replace unsigned long with"}, {"sha": "c0050412401ba33e30d0e4e5795955f402f439bf", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-1.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-nochk-string-functions\" } */\n+/* { dg-final { scan-tree-dump \"memcpy_nochk\" \"chkpopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkpopt\" } } */\n+\n+#include \"string.h\"\n+\n+void test (int *buf1, int *buf2, size_t len)\n+{\n+  memcpy (buf1, buf2, len);\n+}"}, {"sha": "9b3c15fdc592c8cce517dd5ca8fe24616f9da832", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-10.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-10.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-fast-string-functions\" } */\n+/* { dg-final { scan-tree-dump-not \"memset_nobnd\" \"chkpopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkpopt\" } } */\n+\n+#include \"string.h\"\n+\n+void test (void *buf1, int c, size_t len)\n+{\n+  memset (buf1, c, len);\n+}"}, {"sha": "7ef079c7ca4529092b96e43b2d9f8ec48b1b01f4", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-11.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-11.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-fast-string-functions\" } */\n+/* { dg-final { scan-tree-dump-not \"memmove_nobnd\" \"chkpopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkpopt\" } } */\n+\n+#include \"string.h\"\n+\n+void test (void *buf1, void *buf2, size_t len)\n+{\n+  memmove (buf1, buf2, len);\n+}"}, {"sha": "94e936d83c2b58062e25d36c679efa118a11f8b5", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-12.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-12.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-fast-string-functions -D_GNU_SOURCE\" } */\n+/* { dg-final { scan-tree-dump-not \"mempcpy_nobnd\" \"chkpopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkpopt\" } } */\n+\n+#include \"string.h\"\n+\n+void test (void *buf1, void *buf2, size_t len)\n+{\n+  mempcpy (buf1, buf2, len);\n+}"}, {"sha": "f6d38c819dababfdde205bf46cfc18f394a1508a", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-13.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-13.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-nochk-string-functions -fchkp-use-fast-string-functions\" } */\n+/* { dg-final { scan-tree-dump \"memcpy_nobnd_nochk\" \"chkpopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkpopt\" } } */\n+\n+#include \"string.h\"\n+\n+void test (int *buf1, int *buf2, size_t len)\n+{\n+  memcpy (buf1, buf2, len);\n+}"}, {"sha": "a7f43cbb7d9fddd96fabc58eb528c68b134ab99b", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-14.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-14.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-nochk-string-functions -fchkp-use-fast-string-functions\" } */\n+/* { dg-final { scan-tree-dump \"memset_nobnd_nochk\" \"chkpopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkpopt\" } } */\n+\n+#include \"string.h\"\n+\n+void test (int *buf1, int c, size_t len)\n+{\n+  memset (buf1, c, len);\n+}"}, {"sha": "041e88555990f9fb338be96cde33852ae69abcc3", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-15.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-15.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-nochk-string-functions -fchkp-use-fast-string-functions\" } */\n+/* { dg-final { scan-tree-dump \"memmove_nobnd_nochk\" \"chkpopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkpopt\" } } */\n+\n+#include \"string.h\"\n+\n+void test (int *buf1, int *buf2, size_t len)\n+{\n+  memmove (buf1, buf2, len);\n+}"}, {"sha": "4b26d5820a664f007495751ce6f58e9e61364e5d", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-16.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-16.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-nochk-string-functions -fchkp-use-fast-string-functions -D_GNU_SOURCE\" } */\n+/* { dg-final { scan-tree-dump \"mempcpy_nobnd_nochk\" \"chkpopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkpopt\" } } */\n+\n+#include \"string.h\"\n+\n+void test (int *buf1, int *buf2, size_t len)\n+{\n+  mempcpy (buf1, buf2, len);\n+}"}, {"sha": "c56656ed25546d77599bb4bb598032621e55a1aa", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-2.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-nochk-string-functions\" } */\n+/* { dg-final { scan-tree-dump \"memset_nochk\" \"chkpopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkpopt\" } } */\n+\n+#include \"string.h\"\n+\n+void test (int *buf1, int c, size_t len)\n+{\n+  memset (buf1, c, len);\n+}"}, {"sha": "a91f0070f394184b063d1fce6f1bfba273b1793b", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-3.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-nochk-string-functions\" } */\n+/* { dg-final { scan-tree-dump \"memmove_nochk\" \"chkpopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkpopt\" } } */\n+\n+#include \"string.h\"\n+\n+void test (int *buf1, int *buf2, size_t len)\n+{\n+  memmove (buf1, buf2, len);\n+}"}, {"sha": "4ee2390c04d7a45504cb044b513cb8b9b952cfa8", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-4.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-nochk-string-functions -D_GNU_SOURCE\" } */\n+/* { dg-final { scan-tree-dump \"mempcpy_nochk\" \"chkpopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkpopt\" } } */\n+\n+#include \"string.h\"\n+\n+void test (int *buf1, int *buf2, size_t len)\n+{\n+  mempcpy (buf1, buf2, len);\n+}"}, {"sha": "8d08ee60e7448bb3ab71ccddfd79d79d17674946", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-5.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-5.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-fast-string-functions\" } */\n+/* { dg-final { scan-tree-dump \"memcpy_nobnd\" \"chkpopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkpopt\" } } */\n+\n+#include \"string.h\"\n+\n+void test (int *buf1, int *buf2, size_t len)\n+{\n+  memcpy (buf1, buf2, len);\n+}"}, {"sha": "92f187eb0e56e70490dc39f17ab7088a74494b4f", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-6.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-fast-string-functions\" } */\n+/* { dg-final { scan-tree-dump \"memset_nobnd\" \"chkpopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkpopt\" } } */\n+\n+#include \"string.h\"\n+\n+void test (int *buf1, int c, size_t len)\n+{\n+  memset (buf1, c, len);\n+}"}, {"sha": "eb1e61cc35ed7cc19a35842124c41e6611b3fdd5", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-7.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-7.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-fast-string-functions\" } */\n+/* { dg-final { scan-tree-dump \"memmove_nobnd\" \"chkpopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkpopt\" } } */\n+\n+#include \"string.h\"\n+\n+void test (int *buf1, int *buf2, size_t len)\n+{\n+  memmove (buf1, buf2, len);\n+}"}, {"sha": "8c3b15d2025c49eeaaea11e84e8a59c93c1b7f1b", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-8.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-8.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-fast-string-functions -D_GNU_SOURCE\" } */\n+/* { dg-final { scan-tree-dump \"mempcpy_nobnd\" \"chkpopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkpopt\" } } */\n+\n+#include \"string.h\"\n+\n+void test (int *buf1, int *buf2, size_t len)\n+{\n+  mempcpy (buf1, buf2, len);\n+}"}, {"sha": "da54c9ca5bded8d01c08361a00b1fc392a813253", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-9.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-9.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-fast-string-functions\" } */\n+/* { dg-final { scan-tree-dump-not \"memcpy_nobnd\" \"chkpopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkpopt\" } } */\n+\n+#include \"string.h\"\n+\n+void test (void *buf1, void *buf2, size_t len)\n+{\n+  memcpy (buf1, buf2, len);\n+}"}, {"sha": "9dd8961cb8f9421fe1ef7e4710835506c5c0cd55", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -8178,6 +8178,46 @@ make_pass_split_crit_edges (gcc::context *ctxt)\n }\n \n \n+/* Insert COND expression which is GIMPLE_COND after STMT\n+   in basic block BB with appropriate basic block split\n+   and creation of a new conditionally executed basic block.\n+   Return created basic block.  */\n+basic_block\n+insert_cond_bb (basic_block bb, gimple stmt, gimple cond)\n+{\n+  edge fall = split_block (bb, stmt);\n+  gimple_stmt_iterator iter = gsi_last_bb (bb);\n+  basic_block new_bb;\n+\n+  /* Insert cond statement.  */\n+  gcc_assert (gimple_code (cond) == GIMPLE_COND);\n+  if (gsi_end_p (iter))\n+    gsi_insert_before (&iter, cond, GSI_CONTINUE_LINKING);\n+  else\n+    gsi_insert_after (&iter, cond, GSI_CONTINUE_LINKING);\n+\n+  /* Create conditionally executed block.  */\n+  new_bb = create_empty_bb (bb);\n+  make_edge (bb, new_bb, EDGE_TRUE_VALUE);\n+  make_single_succ_edge (new_bb, fall->dest, EDGE_FALLTHRU);\n+\n+  /* Fix edge for split bb.  */\n+  fall->flags = EDGE_FALSE_VALUE;\n+\n+  /* Update dominance info.  */\n+  if (dom_info_available_p (CDI_DOMINATORS))\n+    {\n+      set_immediate_dominator (CDI_DOMINATORS, new_bb, bb);\n+      set_immediate_dominator (CDI_DOMINATORS, fall->dest, bb);\n+    }\n+\n+  /* Update loop info.  */\n+  if (current_loops)\n+    add_bb_to_loop (new_bb, bb->loop_father);\n+\n+  return new_bb;\n+}\n+\n /* Build a ternary operation and gimplify it.  Emit code before GSI.\n    Return the gimple_val holding the result.  */\n "}, {"sha": "bc5967be0bc276d01d0dacd81a617702f265d869", "filename": "gcc/tree-cfg.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftree-cfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftree-cfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.h?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -100,5 +100,6 @@ extern tree gimplify_build1 (gimple_stmt_iterator *, enum tree_code,\n extern void extract_true_false_edges_from_block (basic_block, edge *, edge *);\n extern unsigned int execute_fixup_cfg (void);\n extern unsigned int split_critical_edges (void);\n+extern basic_block insert_cond_bb (basic_block, gimple, gimple);\n \n #endif /* _TREE_CFG_H  */"}, {"sha": "ff390d7bb3ddc0a9cc2d9660d502a09479519d04", "filename": "gcc/tree-chkp-opt.c", "status": "modified", "additions": 264, "deletions": 0, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e472781227253bf87e273512026256fb563b1646/gcc%2Ftree-chkp-opt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e472781227253bf87e273512026256fb563b1646/gcc%2Ftree-chkp-opt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp-opt.c?ref=e472781227253bf87e273512026256fb563b1646", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify-me.h\"\n #include \"expr.h\"\n #include \"tree-chkp.h\"\n+#include \"ipa-chkp.h\"\n #include \"diagnostic.h\"\n \n enum check_type\n@@ -845,6 +846,265 @@ chkp_remove_constant_checks (void)\n     }\n }\n \n+/* Return fast version of string function FNCODE.  */\n+static tree\n+chkp_get_nobnd_fndecl (enum built_in_function fncode)\n+{\n+  /* Check if we are allowed to use fast string functions.  */\n+  if (!flag_chkp_use_fast_string_functions)\n+    return NULL_TREE;\n+\n+  tree fndecl = NULL_TREE;\n+\n+  switch (fncode)\n+    {\n+    case BUILT_IN_MEMCPY_CHKP:\n+      fndecl = builtin_decl_implicit (BUILT_IN_CHKP_MEMCPY_NOBND);\n+      break;\n+\n+    case BUILT_IN_MEMPCPY_CHKP:\n+      fndecl = builtin_decl_implicit (BUILT_IN_CHKP_MEMPCPY_NOBND);\n+      break;\n+\n+    case BUILT_IN_MEMMOVE_CHKP:\n+      fndecl = builtin_decl_implicit (BUILT_IN_CHKP_MEMMOVE_NOBND);\n+      break;\n+\n+    case BUILT_IN_MEMSET_CHKP:\n+      fndecl = builtin_decl_implicit (BUILT_IN_CHKP_MEMSET_NOBND);\n+      break;\n+\n+    case BUILT_IN_CHKP_MEMCPY_NOCHK_CHKP:\n+      fndecl = builtin_decl_implicit (BUILT_IN_CHKP_MEMCPY_NOBND_NOCHK);\n+      break;\n+\n+    case BUILT_IN_CHKP_MEMPCPY_NOCHK_CHKP:\n+      fndecl = builtin_decl_implicit (BUILT_IN_CHKP_MEMPCPY_NOBND_NOCHK);\n+      break;\n+\n+    case BUILT_IN_CHKP_MEMMOVE_NOCHK_CHKP:\n+      fndecl = builtin_decl_implicit (BUILT_IN_CHKP_MEMMOVE_NOBND_NOCHK);\n+      break;\n+\n+    case BUILT_IN_CHKP_MEMSET_NOCHK_CHKP:\n+      fndecl = builtin_decl_implicit (BUILT_IN_CHKP_MEMSET_NOBND_NOCHK);\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  if (fndecl)\n+    fndecl = chkp_maybe_clone_builtin_fndecl (fndecl);\n+\n+  return fndecl;\n+}\n+\n+\n+/* Return no-check version of string function FNCODE.  */\n+static tree\n+chkp_get_nochk_fndecl (enum built_in_function fncode)\n+{\n+  /* Check if we are allowed to use fast string functions.  */\n+  if (!flag_chkp_use_nochk_string_functions)\n+    return NULL_TREE;\n+\n+  tree fndecl = NULL_TREE;\n+\n+  switch (fncode)\n+    {\n+    case BUILT_IN_MEMCPY_CHKP:\n+      fndecl = builtin_decl_implicit (BUILT_IN_CHKP_MEMCPY_NOCHK);\n+      break;\n+\n+    case BUILT_IN_MEMPCPY_CHKP:\n+      fndecl = builtin_decl_implicit (BUILT_IN_CHKP_MEMPCPY_NOCHK);\n+      break;\n+\n+    case BUILT_IN_MEMMOVE_CHKP:\n+      fndecl = builtin_decl_implicit (BUILT_IN_CHKP_MEMMOVE_NOCHK);\n+      break;\n+\n+    case BUILT_IN_MEMSET_CHKP:\n+      fndecl = builtin_decl_implicit (BUILT_IN_CHKP_MEMSET_NOCHK);\n+      break;\n+\n+    case BUILT_IN_CHKP_MEMCPY_NOBND_CHKP:\n+      fndecl = builtin_decl_implicit (BUILT_IN_CHKP_MEMCPY_NOBND_NOCHK);\n+      break;\n+\n+    case BUILT_IN_CHKP_MEMPCPY_NOBND_CHKP:\n+      fndecl = builtin_decl_implicit (BUILT_IN_CHKP_MEMPCPY_NOBND_NOCHK);\n+      break;\n+\n+    case BUILT_IN_CHKP_MEMMOVE_NOBND_CHKP:\n+      fndecl = builtin_decl_implicit (BUILT_IN_CHKP_MEMMOVE_NOBND_NOCHK);\n+      break;\n+\n+    case BUILT_IN_CHKP_MEMSET_NOBND_CHKP:\n+      fndecl = builtin_decl_implicit (BUILT_IN_CHKP_MEMSET_NOBND_NOCHK);\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  if (fndecl)\n+    fndecl = chkp_maybe_clone_builtin_fndecl (fndecl);\n+\n+  return fndecl;\n+}\n+\n+/* Find memcpy, mempcpy, memmove and memset calls, perform\n+   checks before call and then call no_chk version of\n+   functions.  We do it on O2 to enable inlining of these\n+   functions during expand.\n+\n+   Also try to find memcpy, mempcpy, memmove and memset calls\n+   which are known to not write pointers to memory and use\n+   faster function versions for them.  */\n+static void\n+chkp_optimize_string_function_calls (void)\n+{\n+  basic_block bb;\n+\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    fprintf (dump_file, \"Searching for replaceable string function calls...\\n\");\n+\n+  FOR_EACH_BB_FN (bb, cfun)\n+    {\n+      gimple_stmt_iterator i;\n+\n+      for (i = gsi_start_bb (bb); !gsi_end_p (i); gsi_next (&i))\n+        {\n+\t  gimple stmt = gsi_stmt (i);\n+\t  tree fndecl;\n+\n+\t  if (gimple_code (stmt) != GIMPLE_CALL\n+\t      || !gimple_call_with_bounds_p (stmt))\n+\t    continue;\n+\n+\t  fndecl = gimple_call_fndecl (stmt);\n+\n+\t  if (!fndecl || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)\n+\t    continue;\n+\n+\t  if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_MEMCPY_CHKP\n+\t      || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_MEMPCPY_CHKP\n+\t      || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_MEMMOVE_CHKP\n+\t      || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_MEMSET_CHKP)\n+\t    {\n+\t      tree dst = gimple_call_arg (stmt, 0);\n+\t      tree dst_bnd = gimple_call_arg (stmt, 1);\n+\t      bool is_memset = DECL_FUNCTION_CODE (fndecl) == BUILT_IN_MEMSET_CHKP;\n+\t      tree size = gimple_call_arg (stmt, is_memset ? 3 : 4);\n+\t      tree fndecl_nochk;\n+\t      gimple_stmt_iterator j;\n+\t      basic_block check_bb;\n+\t      address_t size_val;\n+\t      int sign;\n+\t      bool known;\n+\n+\t      /* We may replace call with corresponding __chkp_*_nobnd\n+\t\t call in case destination pointer base type is not\n+\t\t void or pointer.  */\n+\t      if (POINTER_TYPE_P (TREE_TYPE (dst))\n+\t\t  && !VOID_TYPE_P (TREE_TYPE (TREE_TYPE (dst)))\n+\t\t  && !chkp_type_has_pointer (TREE_TYPE (TREE_TYPE (dst))))\n+\t\t{\n+\t\t  tree fndecl_nobnd\n+\t\t    = chkp_get_nobnd_fndecl (DECL_FUNCTION_CODE (fndecl));\n+\n+\t\t  if (fndecl_nobnd)\n+\t\t    fndecl = fndecl_nobnd;\n+\t\t}\n+\n+\t      fndecl_nochk = chkp_get_nochk_fndecl (DECL_FUNCTION_CODE (fndecl));\n+\n+\t      if (fndecl_nochk)\n+\t\tfndecl = fndecl_nochk;\n+\n+\t      if (fndecl != gimple_call_fndecl (stmt))\n+\t\t{\n+\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t    {\n+\t\t      fprintf (dump_file, \"Replacing call: \");\n+\t\t      print_gimple_stmt (dump_file, stmt, 0,\n+\t\t\t\t\t TDF_VOPS|TDF_MEMSYMS);\n+\t\t    }\n+\n+\t\t  gimple_call_set_fndecl (stmt, fndecl);\n+\n+\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t    {\n+\t\t      fprintf (dump_file, \"With a new call: \");\n+\t\t      print_gimple_stmt (dump_file, stmt, 0,\n+\t\t\t\t\t TDF_VOPS|TDF_MEMSYMS);\n+\t\t    }\n+\t\t}\n+\n+\t      /* If there is no nochk version of function then\n+\t\t do nothing.  Otherwise insert checks before\n+\t\t the call.  */\n+\t      if (!fndecl_nochk)\n+\t\tcontinue;\n+\n+\t      /* If size passed to call is known and > 0\n+\t\t then we may insert checks unconditionally.  */\n+\t      size_val.pol.create (0);\n+\t      chkp_collect_value (size, size_val);\n+\t      known = chkp_is_constant_addr (size_val, &sign);\n+\t      size_val.pol.release ();\n+\n+\t      /* If we are not sure size is not zero then we have\n+\t\t to perform runtime check for size and perform\n+\t\t checks only when size is not zero.  */\n+\t      if (!known)\n+\t\t{\n+\t\t  gimple check = gimple_build_cond (NE_EXPR,\n+\t\t\t\t\t\t    size,\n+\t\t\t\t\t\t    size_zero_node,\n+\t\t\t\t\t\t    NULL_TREE,\n+\t\t\t\t\t\t    NULL_TREE);\n+\n+\t\t  /* Split block before string function call.  */\n+\t\t  gsi_prev (&i);\n+\t\t  check_bb = insert_cond_bb (bb, gsi_stmt (i), check);\n+\n+\t\t  /* Set position for checks.  */\n+\t\t  j = gsi_last_bb (check_bb);\n+\n+\t\t  /* The block was splitted and therefore we\n+\t\t     need to set iterator to its end.  */\n+\t\t  i = gsi_last_bb (bb);\n+\t\t}\n+\t      /* If size is known to be zero then no checks\n+\t\t should be performed.  */\n+\t      else if (!sign)\n+\t\tcontinue;\n+\t      else\n+\t\tj = i;\n+\n+\t      size = size_binop (MINUS_EXPR, size, size_one_node);\n+\t      if (!is_memset)\n+\t\t{\n+\t\t  tree src = gimple_call_arg (stmt, 2);\n+\t\t  tree src_bnd = gimple_call_arg (stmt, 3);\n+\n+\t\t  chkp_check_mem_access (src, fold_build_pointer_plus (src, size),\n+\t\t\t\t\t src_bnd, j, gimple_location (stmt),\n+\t\t\t\t\t integer_zero_node);\n+\t\t}\n+\n+\t      chkp_check_mem_access (dst, fold_build_pointer_plus (dst, size),\n+\t\t\t\t     dst_bnd, j, gimple_location (stmt),\n+\t\t\t\t     integer_one_node);\n+\n+\t    }\n+\t}\n+    }\n+}\n+\n /* Intrumentation pass inserts most of bounds creation code\n    in the header of the function.  We want to move bounds\n    creation closer to bounds usage to reduce bounds lifetime.\n@@ -1026,6 +1286,10 @@ chkp_opt_execute (void)\n {\n   chkp_opt_init();\n \n+  /* This optimization may introduce new checks\n+     and thus we put it before checks search.  */\n+  chkp_optimize_string_function_calls ();\n+\n   chkp_gather_checks_info ();\n \n   chkp_remove_excess_intersections ();"}]}