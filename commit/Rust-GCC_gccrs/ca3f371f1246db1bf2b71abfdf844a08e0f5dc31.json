{"sha": "ca3f371f1246db1bf2b71abfdf844a08e0f5dc31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzZjM3MWYxMjQ2ZGIxYmYyYjcxYWJmZGY4NDRhMDhlMGY1ZGMzMQ==", "commit": {"author": {"name": "Teresa Johnson", "email": "tejohnson@google.com", "date": "2012-10-26T17:19:35Z"}, "committer": {"name": "Teresa Johnson", "email": "tejohnson@gcc.gnu.org", "date": "2012-10-26T17:19:35Z"}, "message": "Avoid conservative behavior in REE by allowing removal of redundant extends when...\n\nAvoid conservative behavior in REE by allowing removal of redundant extends\nwhen the def feeds another extend with a different mode. This works because\nin merge_def_and_ext only calls combine_set_extension if the candidate for\nremoval has a wider mode than the def extend's mode, otherwise the def extend\nmode is preserved. In combine_set_extension the def is modified to use the\nwider candidate's mode.\n\n2012-10-26  Teresa Johnson  <tejohnson@google.com>\n\n\t* ree.c (add_removable_extension): Remove unnecessary\n\tmode check with other extension.\n\t* testsuite/gcc.c-torture/execute/20111227-2.c: New test.\n\t* testsuite/gcc.c-torture/execute/20111227-3.c: Ditto.\n\nFrom-SVN: r192850", "tree": {"sha": "a2eaa87b296b3829f298c857f1de301049610cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2eaa87b296b3829f298c857f1de301049610cf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca3f371f1246db1bf2b71abfdf844a08e0f5dc31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3f371f1246db1bf2b71abfdf844a08e0f5dc31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca3f371f1246db1bf2b71abfdf844a08e0f5dc31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3f371f1246db1bf2b71abfdf844a08e0f5dc31/comments", "author": {"login": "teresajohnson", "id": 20446403, "node_id": "MDQ6VXNlcjIwNDQ2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/20446403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teresajohnson", "html_url": "https://github.com/teresajohnson", "followers_url": "https://api.github.com/users/teresajohnson/followers", "following_url": "https://api.github.com/users/teresajohnson/following{/other_user}", "gists_url": "https://api.github.com/users/teresajohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/teresajohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teresajohnson/subscriptions", "organizations_url": "https://api.github.com/users/teresajohnson/orgs", "repos_url": "https://api.github.com/users/teresajohnson/repos", "events_url": "https://api.github.com/users/teresajohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/teresajohnson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8256d5ca7870ab4aa5f74b9cb9183393b1024d0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8256d5ca7870ab4aa5f74b9cb9183393b1024d0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8256d5ca7870ab4aa5f74b9cb9183393b1024d0b"}], "stats": {"total": 98, "additions": 97, "deletions": 1}, "files": [{"sha": "db8c3520563c71246ab63ac0a230917a03222ad7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3f371f1246db1bf2b71abfdf844a08e0f5dc31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3f371f1246db1bf2b71abfdf844a08e0f5dc31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca3f371f1246db1bf2b71abfdf844a08e0f5dc31", "patch": "@@ -1,3 +1,10 @@\n+2012-10-26  Teresa Johnson  <tejohnson@google.com>\n+\n+\t* ree.c (add_removable_extension): Remove unnecessary\n+\tmode check with other extension.\n+\t* testsuite/gcc.c-torture/execute/20111227-2.c: New test.\n+\t* testsuite/gcc.c-torture/execute/20111227-3.c: Ditto.\n+\n 2012-10-26  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline-transform.c (inline_call): Only account size changes"}, {"sha": "a2ede97b72e36a777fcf944a4724892a2d490e80", "filename": "gcc/ree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3f371f1246db1bf2b71abfdf844a08e0f5dc31/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3f371f1246db1bf2b71abfdf844a08e0f5dc31/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=ca3f371f1246db1bf2b71abfdf844a08e0f5dc31", "patch": "@@ -803,7 +803,7 @@ add_removable_extension (const_rtx expr, rtx insn,\n       for (def = defs; def; def = def->next)\n \tif ((idx = def_map[INSN_UID(DF_REF_INSN (def->ref))])\n \t    && (cand = &VEC_index (ext_cand, *insn_list, idx - 1))\n-\t    && (cand->code != code || cand->mode != mode))\n+\t    && cand->code != code)\n \t  {\n \t    if (dump_file)\n \t      {"}, {"sha": "692c947e9a8d1dec93dcb4f2d36042de6efbb1e2", "filename": "gcc/testsuite/gcc.c-torture/execute/20111227-2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3f371f1246db1bf2b71abfdf844a08e0f5dc31/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20111227-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3f371f1246db1bf2b71abfdf844a08e0f5dc31/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20111227-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20111227-2.c?ref=ca3f371f1246db1bf2b71abfdf844a08e0f5dc31", "patch": "@@ -0,0 +1,44 @@\n+/* Testcase derived from 20111227-1.c to ensure that REE is combining\n+   redundant zero extends with zero extend to wider mode.  */\n+/* { dg-options \"-fdump-rtl-ree -O\" } */\n+extern void abort (void);\n+\n+unsigned short s;\n+unsigned int i;\n+unsigned long l;\n+unsigned char v = -1;\n+\n+void __attribute__((noinline,noclone))\n+bar (int t)\n+{\n+  if (t == 2 && s != 0xff)\n+    abort ();\n+  if (t == 1 && i != 0xff)\n+    abort ();\n+  if (t == 0 && l != 0xff)\n+    abort ();\n+}\n+\n+void __attribute__((noinline,noclone))\n+foo (unsigned char *a, int t)\n+{\n+  unsigned char r = v;\n+\n+  if (t == 2)\n+    s = (unsigned short) r;\n+  else if (t == 1)\n+    i = (unsigned int) r;\n+  else if (t == 0)\n+    l = (unsigned long) r;\n+  bar (t);\n+}\n+\n+int main(void)\n+{\n+  foo (&v, 0);\n+  foo (&v, 1);\n+  foo (&v, 2);\n+  return 0;\n+}\n+/* { dg-final { scan-rtl-dump \"Elimination opportunities = 3 realized = 3\" \"ree\" } }  */\n+/* { dg-final { cleanup-rtl-dump \"ree\" } }  */"}, {"sha": "d6726c473558b9211122558c393eee8b4dabceac", "filename": "gcc/testsuite/gcc.c-torture/execute/20111227-3.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3f371f1246db1bf2b71abfdf844a08e0f5dc31/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20111227-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3f371f1246db1bf2b71abfdf844a08e0f5dc31/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20111227-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20111227-3.c?ref=ca3f371f1246db1bf2b71abfdf844a08e0f5dc31", "patch": "@@ -0,0 +1,45 @@\n+/* Testcase derived from 20111227-1.c to ensure that REE is combining\n+   redundant sign extends with sign extend to wider mode.  */\n+/* { dg-options \"-fdump-rtl-ree -O\" } */\n+\n+extern void abort (void);\n+\n+signed short s;\n+signed int i;\n+signed long l;\n+signed char v = -1;\n+\n+void __attribute__((noinline,noclone))\n+bar (int t)\n+{\n+  if (t == 2 && s != -1)\n+    abort ();\n+  if (t == 1 && i != -1)\n+    abort ();\n+  if (t == 0 && l != -1)\n+    abort ();\n+}\n+\n+void __attribute__((noinline,noclone))\n+foo (signed char *a, int t)\n+{\n+  signed char r = v;\n+\n+  if (t == 2)\n+    s = (signed short) r;\n+  else if (t == 1)\n+    i = (signed int) r;\n+  else if (t == 0)\n+    l = (signed long) r;\n+  bar (t);\n+}\n+\n+int main(void)\n+{\n+  foo (&v, 0);\n+  foo (&v, 1);\n+  foo (&v, 2);\n+  return 0;\n+}\n+/* { dg-final { scan-rtl-dump \"Elimination opportunities = 3 realized = 3\" \"ree\" } }  */\n+/* { dg-final { cleanup-rtl-dump \"ree\" } }  */"}]}