{"sha": "a91c72e2141bbad97e7017a467d80ae0cdcd8eaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkxYzcyZTIxNDFiYmFkOTdlNzAxN2E0NjdkODBhZTBjZGNkOGVhZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-11-09T22:40:44Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-11-09T22:40:44Z"}, "message": "re PR middle-end/68259 ([sso] tree checking failure in reverse_storage_order_for_component_p, at tree.h:4392)\n\n\tPR middle-end/68259\n\t* tree.h (reverse_storage_order_for_component_p) <COMPONENT_REF>:\n\tCheck that the type of the first operand is an aggregate type.\n\nFrom-SVN: r230056", "tree": {"sha": "753b3f8e319e891e75281afc0e55d037439842a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/753b3f8e319e891e75281afc0e55d037439842a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a91c72e2141bbad97e7017a467d80ae0cdcd8eaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a91c72e2141bbad97e7017a467d80ae0cdcd8eaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a91c72e2141bbad97e7017a467d80ae0cdcd8eaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a91c72e2141bbad97e7017a467d80ae0cdcd8eaf/comments", "author": null, "committer": null, "parents": [{"sha": "374d022552a1aa11ad0a53ec635255d09f365289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374d022552a1aa11ad0a53ec635255d09f365289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/374d022552a1aa11ad0a53ec635255d09f365289"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "3c764de4a89b81c2d68074e873b2f1bf6baccf8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a91c72e2141bbad97e7017a467d80ae0cdcd8eaf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a91c72e2141bbad97e7017a467d80ae0cdcd8eaf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a91c72e2141bbad97e7017a467d80ae0cdcd8eaf", "patch": "@@ -1,3 +1,9 @@\n+2015-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/68259\n+\t* tree.h (reverse_storage_order_for_component_p) <COMPONENT_REF>:\n+\tCheck that the type of the first operand is an aggregate type.\n+\n 2015-11-09  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* omp-low.c: Fix some OpenACC comment typos."}, {"sha": "d5942e49f96e47fc2ce2b402171eaf9fbaafed62", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a91c72e2141bbad97e7017a467d80ae0cdcd8eaf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a91c72e2141bbad97e7017a467d80ae0cdcd8eaf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a91c72e2141bbad97e7017a467d80ae0cdcd8eaf", "patch": "@@ -1,3 +1,7 @@\n+2015-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* g++.dg/ubsan/pr68259.C: New test.\n+\n 2015-11-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* g++.dg/cilk-plus/CK/pr66326.cc: Do not include cilk.h."}, {"sha": "5137edd1f8bd705c7598d326694d846d92e3eb64", "filename": "gcc/testsuite/g++.dg/ubsan/pr68259.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a91c72e2141bbad97e7017a467d80ae0cdcd8eaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr68259.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a91c72e2141bbad97e7017a467d80ae0cdcd8eaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr68259.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr68259.C?ref=a91c72e2141bbad97e7017a467d80ae0cdcd8eaf", "patch": "@@ -0,0 +1,54 @@\n+// PR middle-end/68259\r\n+\r\n+// { dg-do compile }\r\n+// { dg-options \"-fsanitize=undefined -w\" }\r\n+\r\n+namespace std {\r\n+  template < typename _Tp > class allocator { };\r\n+    template < typename _Tp, typename _Alloc\r\n+= std::allocator < _Tp >\r\n+>class vector {\r\n+  public:\r\n+typedef _Tp value_type;\r\n+    void push_back (const value_type & __x) { }\r\n+  };\r\n+}\r\n+class Foo;\r\n+class FooBar {\r\n+public:\r\n+Foo * primitive_context;\r\n+  FooBar () { }\r\n+  FooBar (const FooBar & pnhp);\r\n+};\r\n+template < class KEY, class CONTENT > class AVLTreeNode { };\r\n+template < class KEY, class CONTENT > class FooTree final\r\n+{\r\n+  FooBar insertPrimitive ();\r\n+public:\r\n+AVLTreeNode < KEY, CONTENT > *seek_no_lock (const KEY & key) { }\r\n+  void primitive_patterns ( std::vector < FooBar > &patterns);\r\n+};\r\n+template < class KEY, class CONTENT > void FooTree < KEY,\r\n+  CONTENT >::primitive_patterns ( std::vector <FooBar > &patterns)\r\n+{\r\n+    patterns.push_back (insertPrimitive());\r\n+}\r\n+template < class KEY, class CONTENT >\r\n+FooBar FooTree < KEY, CONTENT >::insertPrimitive ()\r\n+{\r\n+  FooBar place;\r\n+  seek_no_lock (place.primitive_context);\r\n+  return place;\r\n+}\r\n+class ManuverResults { };\r\n+class opc_info_t\r\n+{\r\n+public:\r\n+FooTree < Foo *, ManuverResults > *primitivecache;\r\n+};\r\n+static void\r\n+do_optical_prox_corr_tsafe (opc_info_t * opc_info)\r\n+{\r\n+  std::vector < FooBar > patterns;\r\n+  opc_info->primitivecache->primitive_patterns (patterns);\r\n+}\r"}, {"sha": "1bb59f2ac8c0ab7e0c6bb611368be2cf49bba0d8", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a91c72e2141bbad97e7017a467d80ae0cdcd8eaf/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a91c72e2141bbad97e7017a467d80ae0cdcd8eaf/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a91c72e2141bbad97e7017a467d80ae0cdcd8eaf", "patch": "@@ -4387,8 +4387,9 @@ reverse_storage_order_for_component_p (tree t)\n     {\n     case ARRAY_REF:\n     case COMPONENT_REF:\n-      /* ??? Fortran can take COMPONENT_REF of a void type.  */\n-      return !VOID_TYPE_P (TREE_TYPE (TREE_OPERAND (t, 0)))\n+      /* ??? Fortran can take COMPONENT_REF of a VOID_TYPE.  */\n+      /* ??? UBSan can take COMPONENT_REF of a REFERENCE_TYPE.  */\n+      return AGGREGATE_TYPE_P (TREE_TYPE (TREE_OPERAND (t, 0)))\n \t     && TYPE_REVERSE_STORAGE_ORDER (TREE_TYPE (TREE_OPERAND (t, 0)));\n \n     case BIT_FIELD_REF:"}]}