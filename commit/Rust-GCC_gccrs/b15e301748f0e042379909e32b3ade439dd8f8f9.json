{"sha": "b15e301748f0e042379909e32b3ade439dd8f8f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE1ZTMwMTc0OGYwZTA0MjM3OTkwOWUzMmIzYWRlNDM5ZGQ4ZjhmOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-07-09T09:45:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-07-14T18:59:56Z"}, "message": "c++: enable -fdelete-dead-exceptions by default\n\nAs I was discussing with richi, I don't think it makes sense to protect\ncalls to pure/const functions from DCE just because they aren't explicitly\ndeclared noexcept.  PR100382 indicates that there are different\nconsiderations for Go, which has non-call exceptions.  But still turn the\nflag off for that specific testcase.\n\ngcc/c-family/ChangeLog:\n\n\t* c-opts.c (c_common_post_options): Set -fdelete-dead-exceptions.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: -fdelete-dead-exceptions is on by default for\n\tC++.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/torture/pr100382.C: Pass -fno-delete-dead-exceptions.", "tree": {"sha": "16cda41375af0b9e2b0f01c9c8305ac7d4f28f9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16cda41375af0b9e2b0f01c9c8305ac7d4f28f9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b15e301748f0e042379909e32b3ade439dd8f8f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15e301748f0e042379909e32b3ade439dd8f8f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b15e301748f0e042379909e32b3ade439dd8f8f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15e301748f0e042379909e32b3ade439dd8f8f9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4940166a15193d6583b320f2957af8720745b76c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4940166a15193d6583b320f2957af8720745b76c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4940166a15193d6583b320f2957af8720745b76c"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "1c4e832c7ed09c60ba847ad8ef2d7c34bdca83b6", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15e301748f0e042379909e32b3ade439dd8f8f9/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15e301748f0e042379909e32b3ade439dd8f8f9/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=b15e301748f0e042379909e32b3ade439dd8f8f9", "patch": "@@ -1015,6 +1015,10 @@ c_common_post_options (const char **pfilename)\n   SET_OPTION_IF_UNSET (&global_options, &global_options_set, flag_finite_loops,\n \t\t       optimize >= 2 && cxx_dialect >= cxx11);\n \n+  /* It's OK to discard calls to pure/const functions that might throw.  */\n+  SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t       flag_delete_dead_exceptions, true);\n+\n   if (cxx_dialect >= cxx11)\n     {\n       /* If we're allowing C++0x constructs, don't warn about C++98"}, {"sha": "ea8812425e95245c4f910b6db0b7d4b00991ee50", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15e301748f0e042379909e32b3ade439dd8f8f9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15e301748f0e042379909e32b3ade439dd8f8f9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b15e301748f0e042379909e32b3ade439dd8f8f9", "patch": "@@ -16335,8 +16335,10 @@ arbitrary signal handlers such as @code{SIGALRM}.\n @opindex fdelete-dead-exceptions\n Consider that instructions that may throw exceptions but don't otherwise\n contribute to the execution of the program can be optimized away.\n-This option is enabled by default for the Ada compiler, as permitted by\n-the Ada language specification.\n+This does not affect calls to functions except those with the\n+@code{pure} or @code{const} attributes.\n+This option is enabled by default for the Ada and C++ compilers, as permitted by\n+the language specifications.\n Optimization passes that cause dead exceptions to be removed are enabled independently at different optimization levels.\n \n @item -funwind-tables"}, {"sha": "eac5743b956d59484075cd5014358e5be9758433", "filename": "gcc/testsuite/g++.dg/torture/pr100382.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15e301748f0e042379909e32b3ade439dd8f8f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr100382.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15e301748f0e042379909e32b3ade439dd8f8f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr100382.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr100382.C?ref=b15e301748f0e042379909e32b3ade439dd8f8f9", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run }\n+// { dg-additional-options -fno-delete-dead-exceptions }\n \n int x, y;\n int __attribute__((pure,noinline)) foo () { if (x) throw 1; return y; }"}]}