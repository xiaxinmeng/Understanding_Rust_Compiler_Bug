{"sha": "5586e7e85de381f3df843091494889f8ad8e3e1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU4NmU3ZTg1ZGUzODFmM2RmODQzMDkxNDk0ODg5ZjhhZDhlM2UxZg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-07-18T13:12:29Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-07-18T19:21:24Z"}, "message": "x86: Don't issue vzeroupper if callee returns AVX register\n\nDon't issue vzeroupper before function call if callee returns AVX\nregister since callee must be compiled with AVX.\n\ngcc/\n\n\tPR target/101495\n\t* config/i386/i386.c (ix86_check_avx_upper_stores): Moved before\n\tix86_avx_u128_mode_needed.\n\t(ix86_avx_u128_mode_needed): Return AVX_U128_DIRTY if callee\n\treturns AVX register.\n\ngcc/testsuite/\n\n\tPR target/101495\n\t* gcc.target/i386/avx-vzeroupper-28.c: New test.", "tree": {"sha": "63053b13cd02751f972af62587de4a541dbc0145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63053b13cd02751f972af62587de4a541dbc0145"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5586e7e85de381f3df843091494889f8ad8e3e1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5586e7e85de381f3df843091494889f8ad8e3e1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5586e7e85de381f3df843091494889f8ad8e3e1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5586e7e85de381f3df843091494889f8ad8e3e1f/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cca4131e4aabf70a18e362620ad65a3cebf227a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cca4131e4aabf70a18e362620ad65a3cebf227a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cca4131e4aabf70a18e362620ad65a3cebf227a"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "8481693ab7faee8ac011aec2321fabfafcdb8663", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5586e7e85de381f3df843091494889f8ad8e3e1f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5586e7e85de381f3df843091494889f8ad8e3e1f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5586e7e85de381f3df843091494889f8ad8e3e1f", "patch": "@@ -14093,6 +14093,18 @@ ix86_check_avx_upper_register (const_rtx exp)\n \t  && GET_MODE_BITSIZE (GET_MODE (exp)) > 128);\n }\n \n+/* Check if a 256bit or 512bit AVX register is referenced in stores.   */\n+\n+static void\n+ix86_check_avx_upper_stores (rtx dest, const_rtx, void *data)\n+ {\n+   if (ix86_check_avx_upper_register (dest))\n+    {\n+      bool *used = (bool *) data;\n+      *used = true;\n+    }\n+ }\n+\n /* Return needed mode for entity in optimize_mode_switching pass.  */\n \n static int\n@@ -14117,6 +14129,14 @@ ix86_avx_u128_mode_needed (rtx_insn *insn)\n \t    }\n \t}\n \n+      /* Needed mode is set to AVX_U128_CLEAN if there are no 256bit\n+\t nor 512bit registers used in the function return register.  */\n+      bool avx_upper_reg_found = false;\n+      note_stores (insn, ix86_check_avx_upper_stores,\n+\t\t   &avx_upper_reg_found);\n+      if (avx_upper_reg_found)\n+\treturn AVX_U128_DIRTY;\n+\n       /* If the function is known to preserve some SSE registers,\n \t RA and previous passes can legitimately rely on that for\n \t modes wider than 256 bits.  It's only safe to issue a\n@@ -14217,18 +14237,6 @@ ix86_mode_needed (int entity, rtx_insn *insn)\n   return 0;\n }\n \n-/* Check if a 256bit or 512bit AVX register is referenced in stores.   */\n- \n-static void\n-ix86_check_avx_upper_stores (rtx dest, const_rtx, void *data)\n- {\n-   if (ix86_check_avx_upper_register (dest))\n-    {\n-      bool *used = (bool *) data;\n-      *used = true;\n-    }\n- } \n-\n /* Calculate mode of upper 128bit AVX registers after the insn.  */\n \n static int"}, {"sha": "381ee9a7f96ecb5aad6953c07848f849e576feca", "filename": "gcc/testsuite/gcc.target/i386/avx-vzeroupper-28.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5586e7e85de381f3df843091494889f8ad8e3e1f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5586e7e85de381f3df843091494889f8ad8e3e1f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-28.c?ref=5586e7e85de381f3df843091494889f8ad8e3e1f", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/101495  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2 -mtune=generic -dp\" } */\n+\n+#include <immintrin.h>\n+\n+extern __m256 x, y;\n+extern __m256 bar (void);\n+\n+__m256\n+foo ()\n+{\n+  x = y;\n+  return bar ();\n+}\n+\n+/* { dg-final { scan-assembler-not \"avx_vzeroupper\" } } */"}]}