{"sha": "050d3f9d806005a0951d13b742b75d8bee38f3f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUwZDNmOWQ4MDYwMDVhMDk1MWQxM2I3NDJiNzVkOGJlZTM4ZjNmOQ==", "commit": {"author": {"name": "Vasiliy Fofanov", "email": "fofanov@adacore.com", "date": "2009-08-11T16:33:41Z"}, "committer": {"name": "Douglas Rupp", "email": "rupp@gcc.gnu.org", "date": "2009-08-11T16:33:41Z"}, "message": "alpha.c (alpha_return_in_memory): On VMS...\n\n\n\t* config/alpha/alpha.c (alpha_return_in_memory): On VMS, ensure\n\tthat records that fit in 64 bits are returned by immediate value,\n\tas required by OpenVMS Calling Standard.\n\t(function_value): Adjust for above modification.\n\t(alpha_va_start) <TARGET_ABI_OPEN_VMS>: Use\n\tvirtual_incoming_args_rtx as base object, not next_arg.\n\t* config/alpha/vms.h: (DEFAULT_PCC_STRUCT_RETURN): Define as 0.\n\n\nCo-Authored-By: Douglas B Rupp <rupp@gnat.com>\nCo-Authored-By: Eric Botcazou <ebotcazou@adacore.com>\n\nFrom-SVN: r150652", "tree": {"sha": "dce32ed9aa9c73c4a1653f820255b540db9437cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dce32ed9aa9c73c4a1653f820255b540db9437cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/050d3f9d806005a0951d13b742b75d8bee38f3f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/050d3f9d806005a0951d13b742b75d8bee38f3f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/050d3f9d806005a0951d13b742b75d8bee38f3f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/050d3f9d806005a0951d13b742b75d8bee38f3f9/comments", "author": {"login": "t-14", "id": 18482303, "node_id": "MDQ6VXNlcjE4NDgyMzAz", "avatar_url": "https://avatars.githubusercontent.com/u/18482303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-14", "html_url": "https://github.com/t-14", "followers_url": "https://api.github.com/users/t-14/followers", "following_url": "https://api.github.com/users/t-14/following{/other_user}", "gists_url": "https://api.github.com/users/t-14/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-14/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-14/subscriptions", "organizations_url": "https://api.github.com/users/t-14/orgs", "repos_url": "https://api.github.com/users/t-14/repos", "events_url": "https://api.github.com/users/t-14/events{/privacy}", "received_events_url": "https://api.github.com/users/t-14/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2fa8205d74c37fc5ff73c03a7f04dec2faf0bf2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fa8205d74c37fc5ff73c03a7f04dec2faf0bf2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fa8205d74c37fc5ff73c03a7f04dec2faf0bf2d"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "74736d6f77dd969d0c5798251822f28570b58ecd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/050d3f9d806005a0951d13b742b75d8bee38f3f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/050d3f9d806005a0951d13b742b75d8bee38f3f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=050d3f9d806005a0951d13b742b75d8bee38f3f9", "patch": "@@ -1,3 +1,15 @@\n+2009-08-11  Vasiliy Fofanov  <fofanov@adacore.com>\n+            Eric Botcazou  <botcazou@adacore.com>\n+            Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* config/alpha/alpha.c (alpha_return_in_memory): On VMS, ensure\n+\tthat records that fit in 64 bits are returned by immediate value,\n+\tas required by OpenVMS Calling Standard.\n+\t(function_value): Adjust for above modification.\n+\t(alpha_va_start) <TARGET_ABI_OPEN_VMS>: Use\n+\tvirtual_incoming_args_rtx as base object, not next_arg.\n+\t* config/alpha/vms.h: (DEFAULT_PCC_STRUCT_RETURN): Define as 0.\n+\n 2009-08-11  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* reload.c (find_reloads_subreg_address): Check the original"}, {"sha": "ccf92881ff68070683f9ffd7d8ed266f109736f6", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/050d3f9d806005a0951d13b742b75d8bee38f3f9/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/050d3f9d806005a0951d13b742b75d8bee38f3f9/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=050d3f9d806005a0951d13b742b75d8bee38f3f9", "patch": "@@ -5771,7 +5771,14 @@ alpha_return_in_memory (const_tree type, const_tree fndecl ATTRIBUTE_UNUSED)\n     {\n       mode = TYPE_MODE (type);\n \n-      /* All aggregates are returned in memory.  */\n+      /* All aggregates are returned in memory, except on OpenVMS where\n+\t records that fit 64 bits should be returned by immediate value\n+\t as required by section 3.8.7.1 of the OpenVMS Calling Standard.  */\n+      if (TARGET_ABI_OPEN_VMS\n+\t  && TREE_CODE (type) != ARRAY_TYPE\n+\t  && (unsigned HOST_WIDE_INT) int_size_in_bytes(type) <= 8)\n+\treturn false;\n+\n       if (AGGREGATE_TYPE_P (type))\n \treturn true;\n     }\n@@ -5842,7 +5849,10 @@ function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED,\n   switch (mclass)\n     {\n     case MODE_INT:\n-      PROMOTE_MODE (mode, dummy, valtype);\n+      /* Do the same thing as PROMOTE_MODE except for libcalls on VMS,\n+\t where we have them returning both SImode and DImode.  */\n+      if (!(TARGET_ABI_OPEN_VMS && valtype && AGGREGATE_TYPE_P (valtype)))\n+        PROMOTE_MODE (mode, dummy, valtype);\n       /* FALLTHRU */\n \n     case MODE_COMPLEX_INT:\n@@ -5867,6 +5877,12 @@ function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED,\n \t\t\t\t         GEN_INT (GET_MODE_SIZE (cmode)))));\n       }\n \n+    case MODE_RANDOM:\n+      /* We should only reach here for BLKmode on VMS.  */\n+      gcc_assert (TARGET_ABI_OPEN_VMS && mode == BLKmode);\n+      regnum = 0;\n+      break;\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -6260,12 +6276,11 @@ alpha_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n \n   if (TARGET_ABI_OPEN_VMS)\n     {\n-      nextarg = plus_constant (nextarg, offset);\n-      nextarg = plus_constant (nextarg, NUM_ARGS * UNITS_PER_WORD);\n-      t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist,\n-\t\t  make_tree (ptr_type_node, nextarg));\n+      t = make_tree (ptr_type_node, virtual_incoming_args_rtx);\n+      t = build2 (POINTER_PLUS_EXPR, ptr_type_node, t,\n+\t\t size_int (offset + NUM_ARGS * UNITS_PER_WORD));\n+      t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist, t);\n       TREE_SIDE_EFFECTS (t) = 1;\n-\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n     }\n   else"}, {"sha": "819dee449a34a868a31bbbb9f526aa5793cce322", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/050d3f9d806005a0951d13b742b75d8bee38f3f9/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/050d3f9d806005a0951d13b742b75d8bee38f3f9/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=050d3f9d806005a0951d13b742b75d8bee38f3f9", "patch": "@@ -191,9 +191,7 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n      (CUM).num_args += ALPHA_ARG_SIZE (MODE, TYPE, NAMED);\t\t\\\n     }\n \n-/* ABI has stack checking, but it's broken.  */\n-#undef STACK_CHECK_BUILTIN\n-#define STACK_CHECK_BUILTIN 0\n+#define DEFAULT_PCC_STRUCT_RETURN 0\n \n #undef  ASM_WEAKEN_LABEL\n #define ASM_WEAKEN_LABEL(FILE, NAME)                            \\"}]}