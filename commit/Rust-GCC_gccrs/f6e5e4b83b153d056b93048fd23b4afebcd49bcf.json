{"sha": "f6e5e4b83b153d056b93048fd23b4afebcd49bcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZlNWU0YjgzYjE1M2QwNTZiOTMwNDhmZDIzYjRhZmViY2Q0OWJjZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-07-16T08:41:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-07-16T08:41:03Z"}, "message": "[rs6000] Fix ambiguous .md attribute uses\n\nThis patch is part of a series that fixes ambiguous attribute\nuses in .md files, i.e. cases in which attributes didn't use\n<ITER:ATTR> to specify an iterator, and in which <ATTR> could\nhave different values depending on the iterator chosen.\n\nNo behavioural change -- produces the same code as before except\nfor formatting and line numbers.\n\n2019-07-16  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/rs6000/rs6000.md (*mov<mode>_update1): Explicitly\n\tuse <SFDF:mode>, <SFDF:MODE>, <SFDF:Ff> and <SFDF:bits> rather than\n\tleaving the choice between SFDF and P implicit.\n\t(*mov<mode>_update2): Likewise.\n\t(*cmp<IBM128:mode>_internal2): Explicitly use <IBM128:MODE>\n\trather than leaving the choice betweem IBM128 and GPR implicit.\n\t(*fix<uns>_trunc<IEEE128:mode><QHSI:mode>2_mem): Explicitly use\n\t<IEEE128:MODE> rather than leaving the choice between IEEE128 and\n\tQHSI implicit.\n\t(AltiVec define_peephole2s): Explicitly use <ALTIVEC_DFORM:MODE>\n\trather than leaving the choice between ALTIVEC_DFORM and P implicit.\n\t* config/rs6000/vsx.md\n\t(*vsx_ext_<VSX_EXTRACT_I:VS_scalar>_fl_<FL_CONV:mode>)\n\t(*vsx_ext_<VSX_EXTRACT_I:VS_scalar>_ufl_<FL_CONV:mode>): Explicitly\n\tuse <FL_CONV:VSisa> rather than leaving the choice between FL_CONV\n\tand VSX_EXTRACT_I implicit.\n\nFrom-SVN: r273509", "tree": {"sha": "43e7c27749fd092719cd12a648c02f1dd0e46567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43e7c27749fd092719cd12a648c02f1dd0e46567"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6e5e4b83b153d056b93048fd23b4afebcd49bcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e5e4b83b153d056b93048fd23b4afebcd49bcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6e5e4b83b153d056b93048fd23b4afebcd49bcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e5e4b83b153d056b93048fd23b4afebcd49bcf/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f5b616591371edc9ec4f31f9b8c1d611b3b7577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f5b616591371edc9ec4f31f9b8c1d611b3b7577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f5b616591371edc9ec4f31f9b8c1d611b3b7577"}], "stats": {"total": 61, "additions": 42, "deletions": 19}, "files": [{"sha": "d8998f6b8088de8241096e937aaf8d48b40d92f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e5e4b83b153d056b93048fd23b4afebcd49bcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e5e4b83b153d056b93048fd23b4afebcd49bcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6e5e4b83b153d056b93048fd23b4afebcd49bcf", "patch": "@@ -1,3 +1,22 @@\n+2019-07-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/rs6000/rs6000.md (*mov<mode>_update1): Explicitly\n+\tuse <SFDF:mode>, <SFDF:MODE>, <SFDF:Ff> and <SFDF:bits> rather than\n+\tleaving the choice between SFDF and P implicit.\n+\t(*mov<mode>_update2): Likewise.\n+\t(*cmp<IBM128:mode>_internal2): Explicitly use <IBM128:MODE>\n+\trather than leaving the choice betweem IBM128 and GPR implicit.\n+\t(*fix<uns>_trunc<IEEE128:mode><QHSI:mode>2_mem): Explicitly use\n+\t<IEEE128:MODE> rather than leaving the choice between IEEE128 and\n+\tQHSI implicit.\n+\t(AltiVec define_peephole2s): Explicitly use <ALTIVEC_DFORM:MODE>\n+\trather than leaving the choice between ALTIVEC_DFORM and P implicit.\n+\t* config/rs6000/vsx.md\n+\t(*vsx_ext_<VSX_EXTRACT_I:VS_scalar>_fl_<FL_CONV:mode>)\n+\t(*vsx_ext_<VSX_EXTRACT_I:VS_scalar>_ufl_<FL_CONV:mode>): Explicitly\n+\tuse <FL_CONV:VSisa> rather than leaving the choice between FL_CONV\n+\tand VSX_EXTRACT_I implicit.\n+\n 2019-07-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/mips/micromips.md (*movep<MOVEP1:mode><MOVEP2:mode>):"}, {"sha": "4ef199346526cf88215791a467fcecc11d0150de", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e5e4b83b153d056b93048fd23b4afebcd49bcf/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e5e4b83b153d056b93048fd23b4afebcd49bcf/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f6e5e4b83b153d056b93048fd23b4afebcd49bcf", "patch": "@@ -9311,39 +9311,39 @@\n    (set_attr \"update\" \"yes\")\n    (set_attr \"indexed\" \"yes,no\")])\n \n-(define_insn \"*mov<mode>_update1\"\n-  [(set (match_operand:SFDF 3 \"gpc_reg_operand\" \"=<Ff>,<Ff>\")\n+(define_insn \"*mov<SFDF:mode>_update1\"\n+  [(set (match_operand:SFDF 3 \"gpc_reg_operand\" \"=<SFDF:Ff>,<SFDF:Ff>\")\n \t(mem:SFDF (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n \t\t\t  (match_operand:P 2 \"reg_or_short_operand\" \"r,I\"))))\n    (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_HARD_FLOAT && TARGET_UPDATE\n-   && (!avoiding_indexed_address_p (<MODE>mode)\n+   && (!avoiding_indexed_address_p (<SFDF:MODE>mode)\n        || !gpc_reg_operand (operands[2], Pmode))\"\n   \"@\n    lf<sd>ux %3,%0,%2\n    lf<sd>u %3,%2(%0)\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"update\" \"yes\")\n    (set_attr \"indexed\" \"yes,no\")\n-   (set_attr \"size\" \"<bits>\")])\n+   (set_attr \"size\" \"<SFDF:bits>\")])\n \n-(define_insn \"*mov<mode>_update2\"\n+(define_insn \"*mov<SFDF:mode>_update2\"\n   [(set (mem:SFDF (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n \t\t\t  (match_operand:P 2 \"reg_or_short_operand\" \"r,I\")))\n-\t(match_operand:SFDF 3 \"gpc_reg_operand\" \"<Ff>,<Ff>\"))\n+\t(match_operand:SFDF 3 \"gpc_reg_operand\" \"<SFDF:Ff>,<SFDF:Ff>\"))\n    (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_HARD_FLOAT && TARGET_UPDATE\n-   && (!avoiding_indexed_address_p (<MODE>mode)\n+   && (!avoiding_indexed_address_p (<SFDF:MODE>mode)\n        || !gpc_reg_operand (operands[2], Pmode))\"\n   \"@\n    stf<sd>ux %3,%0,%2\n    stf<sd>u %3,%2(%0)\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"update\" \"yes\")\n    (set_attr \"indexed\" \"yes,no\")\n-   (set_attr \"size\" \"<bits>\")])\n+   (set_attr \"size\" \"<SFDF:bits>\")])\n \n (define_insn \"*movsf_update3\"\n   [(set (match_operand:SF 3 \"gpc_reg_operand\" \"=r,r\")\n@@ -11557,7 +11557,7 @@\n   [(set_attr \"type\" \"fpcompare\")\n    (set_attr \"length\" \"12\")])\n \n-(define_insn_and_split \"*cmp<mode>_internal2\"\n+(define_insn_and_split \"*cmp<IBM128:mode>_internal2\"\n   [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n \t(compare:CCFP (match_operand:IBM128 1 \"gpc_reg_operand\" \"d\")\n \t\t      (match_operand:IBM128 2 \"gpc_reg_operand\" \"d\")))\n@@ -11570,7 +11570,7 @@\n     (clobber (match_scratch:DF 9 \"=d\"))\n     (clobber (match_scratch:DF 10 \"=d\"))\n     (clobber (match_scratch:GPR 11 \"=b\"))]\n-  \"TARGET_XL_COMPAT && FLOAT128_IBM_P (<MODE>mode)\n+  \"TARGET_XL_COMPAT && FLOAT128_IBM_P (<IBM128:MODE>mode)\n    && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -11594,10 +11594,14 @@\n   const int lo_word = LONG_DOUBLE_LARGE_FIRST ? GET_MODE_SIZE (DFmode) : 0;\n   const int hi_word = LONG_DOUBLE_LARGE_FIRST ? 0 : GET_MODE_SIZE (DFmode);\n \n-  operands[5] = simplify_gen_subreg (DFmode, operands[1], <MODE>mode, hi_word);\n-  operands[6] = simplify_gen_subreg (DFmode, operands[1], <MODE>mode, lo_word);\n-  operands[7] = simplify_gen_subreg (DFmode, operands[2], <MODE>mode, hi_word);\n-  operands[8] = simplify_gen_subreg (DFmode, operands[2], <MODE>mode, lo_word);\n+  operands[5] = simplify_gen_subreg (DFmode, operands[1],\n+\t\t\t\t     <IBM128:MODE>mode, hi_word);\n+  operands[6] = simplify_gen_subreg (DFmode, operands[1],\n+\t\t\t\t     <IBM128:MODE>mode, lo_word);\n+  operands[7] = simplify_gen_subreg (DFmode, operands[2],\n+\t\t\t\t     <IBM128:MODE>mode, hi_word);\n+  operands[8] = simplify_gen_subreg (DFmode, operands[2],\n+\t\t\t\t     <IBM128:MODE>mode, lo_word);\n   operands[12] = gen_label_rtx ();\n   operands[13] = gen_label_rtx ();\n   real_inf (&rv);\n@@ -13596,7 +13600,7 @@\n   new_addr = gen_rtx_PLUS (Pmode, add_op0, tmp_reg);\n \n   operands[4] = add_op1;\n-  operands[5] = change_address (mem, <MODE>mode, new_addr);\n+  operands[5] = change_address (mem, <ALTIVEC_DFORM:MODE>mode, new_addr);\n })\n \n ;; Optimize cases were want to do a D-form store on ISA 2.06/2.07 from an\n@@ -13632,7 +13636,7 @@\n   new_addr = gen_rtx_PLUS (Pmode, add_op0, tmp_reg);\n \n   operands[4] = add_op1;\n-  operands[5] = change_address (mem, <MODE>mode, new_addr);\n+  operands[5] = change_address (mem, <ALTIVEC_DFORM:MODE>mode, new_addr);\n })\n    \n \f\n@@ -14072,7 +14076,7 @@\n \t(any_fix:QHSI\n \t (match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")))\n    (clobber (match_scratch:QHSI 2 \"=v\"))]\n-  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n+  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<IEEE128:MODE>mode)\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)"}, {"sha": "7633171df9c8ff24bbda39e0b419989ed0bcf3a4", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e5e4b83b153d056b93048fd23b4afebcd49bcf/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e5e4b83b153d056b93048fd23b4afebcd49bcf/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=f6e5e4b83b153d056b93048fd23b4afebcd49bcf", "patch": "@@ -3828,7 +3828,7 @@\n {\n   operands[4] = gen_rtx_REG (DImode, REGNO (operands[3]));\n }\n-  [(set_attr \"isa\" \"<VSisa>\")])\n+  [(set_attr \"isa\" \"<FL_CONV:VSisa>\")])\n \n (define_insn_and_split \"*vsx_ext_<VSX_EXTRACT_I:VS_scalar>_ufl_<FL_CONV:mode>\"\n   [(set (match_operand:FL_CONV 0 \"gpc_reg_operand\" \"=wa\")\n@@ -3851,7 +3851,7 @@\n {\n   operands[4] = gen_rtx_REG (DImode, REGNO (operands[3]));\n }\n-  [(set_attr \"isa\" \"<VSisa>\")])\n+  [(set_attr \"isa\" \"<FL_CONV:VSisa>\")])\n \n ;; V4SI/V8HI/V16QI set operation on ISA 3.0\n (define_insn \"vsx_set_<mode>_p9\""}]}