{"sha": "f3ced6772e2257bdef4e6f4dbdd0bdcf34b5bb3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNjZWQ2NzcyZTIyNTdiZGVmNGU2ZjRkYmRkMGJkY2YzNGI1YmIzZg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-30T16:33:13Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-30T16:33:13Z"}, "message": "libstdc++: Fix the default constructor of ranges::__detail::__box\n\nThe class template semiregular-box<T> of [range.semi.wrap] is specified\nto value-initialize the underlying object whenever its type is default\ninitializable.  Our primary template for __detail::__box respects this\nrequirement, but the recently added partial specialization (for types\nthat are already semiregular) does not.\n\nThis patch fixes this issue, and additionally makes the corresponding in\nplace constructor explicit (as in the primary template).\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (__detail::__box): For the partial\n\tspecialization used by types that are already semiregular,\n\tmake the default constructor value-initialize the underlying\n\tobject instead of default-initializing it.  Make its in place\n\tconstructor explicit.\n\t* testsuite/std/ranges/adaptors/detail/semiregular_box.cc:\n\tAugment test.", "tree": {"sha": "804e94af2e15a4b5cc080f9afcdf5c2f80eef3ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/804e94af2e15a4b5cc080f9afcdf5c2f80eef3ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3ced6772e2257bdef4e6f4dbdd0bdcf34b5bb3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ced6772e2257bdef4e6f4dbdd0bdcf34b5bb3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ced6772e2257bdef4e6f4dbdd0bdcf34b5bb3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ced6772e2257bdef4e6f4dbdd0bdcf34b5bb3f/comments", "author": null, "committer": null, "parents": [{"sha": "24d762d1435257a8efd242c4a1a476c9b2037c03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d762d1435257a8efd242c4a1a476c9b2037c03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d762d1435257a8efd242c4a1a476c9b2037c03"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "610083167d8971c4cb6d24cec6b933409020a86d", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ced6772e2257bdef4e6f4dbdd0bdcf34b5bb3f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ced6772e2257bdef4e6f4dbdd0bdcf34b5bb3f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=f3ced6772e2257bdef4e6f4dbdd0bdcf34b5bb3f", "patch": "@@ -141,7 +141,7 @@ namespace ranges\n       struct __box<_Tp>\n       {\n       private:\n-\t[[no_unique_address]] _Tp _M_value;\n+\t[[no_unique_address]] _Tp _M_value = _Tp();\n \n       public:\n \t__box() = default;\n@@ -160,7 +160,7 @@ namespace ranges\n \n \ttemplate<typename... _Args>\n \t  requires constructible_from<_Tp, _Args...>\n-\t  constexpr\n+\t  constexpr explicit\n \t  __box(in_place_t, _Args&&... __args)\n \t  noexcept(is_nothrow_constructible_v<_Tp, _Args...>)\n \t  : _M_value{std::forward<_Args>(__args)...}"}, {"sha": "748137f7e33216ab0347de2018a91113cc3e530a", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/detail/semiregular_box.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ced6772e2257bdef4e6f4dbdd0bdcf34b5bb3f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fdetail%2Fsemiregular_box.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ced6772e2257bdef4e6f4dbdd0bdcf34b5bb3f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fdetail%2Fsemiregular_box.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fdetail%2Fsemiregular_box.cc?ref=f3ced6772e2257bdef4e6f4dbdd0bdcf34b5bb3f", "patch": "@@ -71,3 +71,13 @@ static_assert(requires (__box<U> a) {\n   a.operator->();\n   a.has_value();\n });\n+\n+constexpr bool\n+test01()\n+{\n+  // Verify the default constructor value-initializes the underlying object.\n+  __box<int> x;\n+  __glibcxx_assert(*x == 0);\n+  return true;\n+}\n+static_assert(test01());"}]}