{"sha": "a961aa79587ca417a9920cd2ba4df4d3144fd26d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk2MWFhNzk1ODdjYTQxN2E5OTIwY2QyYmE0ZGY0ZDMxNDRmZDI2ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-19T12:29:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-19T12:29:25Z"}, "message": "[multiple changes]\n\n2010-10-19  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb, exp_ch4.ads (Expand_Quantified_Expression): New procedure\n\t* exp_util.adb (Insert_Actions): Include Quantified_Expression.\n\t* expander.adb: Call Expand_Qualified_Expression.\n\t* par.adb: New procedure P_Quantified_Expression. Make\n\tP_Loop_Parameter_Specification global for use in quantified expressions.\n\t* par-ch3.adb (P_Subtype_Mark_Resync): Allow \"some\" as an identifier if\n\tversion < Ada2012.\n\t* par-ch4.adb: New procedure P_Quantified_Expression.\n\t* par-ch5.adb: P_Loop_Parameter_Specification is now global.\n\t* scans.adb, scans.ads: Introduce token Some. For now leave as\n\tunreserved.\n\t* scn.adb (Scan_Reserved_Identifier): For earlier versions of Ada,\n\ttreat Some as a regular identifier.\n\t* sem.adb: Call Analyze_Quantified_Expression.\n\t* sem_ch4.adb, sem_ch4.ads: New procedure Analyze_Quantified_Expression.\n\t* sem_ch5.adb, sem_ch5.ads: Analyze_Iteration_Scheme is public, for use\n\tin quantified expressions.\n\t* sem_res.adb: New procedure Resolve_Qualified_Expression.\n\t* sinfo.adb, sinfo.ads: New node N_Quantified_Expression\n\t* snames.ads-tmpl: New name Some.\n\t* sprint.adb: Output quantified_expression.\n\n2010-10-19  Robert Dewar  <dewar@adacore.com>\n\n\t* a-exexda.adb: Minor reformatting\n\tMinor code reorganization.\n\nFrom-SVN: r165698", "tree": {"sha": "fbc3350cd46472344fa50199f9069aaab0f8bfc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbc3350cd46472344fa50199f9069aaab0f8bfc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a961aa79587ca417a9920cd2ba4df4d3144fd26d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a961aa79587ca417a9920cd2ba4df4d3144fd26d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a961aa79587ca417a9920cd2ba4df4d3144fd26d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a961aa79587ca417a9920cd2ba4df4d3144fd26d/comments", "author": null, "committer": null, "parents": [{"sha": "11c260d7cd8c3aaee5502f8d5ff192327b2a904d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11c260d7cd8c3aaee5502f8d5ff192327b2a904d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11c260d7cd8c3aaee5502f8d5ff192327b2a904d"}], "stats": {"total": 381, "additions": 358, "deletions": 23}, "files": [{"sha": "9eb7c45c86656ef3d903198c445663f14f450d1c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -1,3 +1,32 @@\n+2010-10-19  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb, exp_ch4.ads (Expand_Quantified_Expression): New procedure\n+\t* exp_util.adb (Insert_Actions): Include Quantified_Expression.\n+\t* expander.adb: Call Expand_Qualified_Expression.\n+\t* par.adb: New procedure P_Quantified_Expression. Make\n+\tP_Loop_Parameter_Specification global for use in quantified expressions.\n+\t* par-ch3.adb (P_Subtype_Mark_Resync): Allow \"some\" as an identifier if\n+\tversion < Ada2012.\n+\t* par-ch4.adb: New procedure P_Quantified_Expression.\n+\t* par-ch5.adb: P_Loop_Parameter_Specification is now global.\n+\t* scans.adb, scans.ads: Introduce token Some. For now leave as\n+\tunreserved.\n+\t* scn.adb (Scan_Reserved_Identifier): For earlier versions of Ada,\n+\ttreat Some as a regular identifier.\n+\t* sem.adb: Call Analyze_Quantified_Expression.\n+\t* sem_ch4.adb, sem_ch4.ads: New procedure Analyze_Quantified_Expression.\n+\t* sem_ch5.adb, sem_ch5.ads: Analyze_Iteration_Scheme is public, for use\n+\tin quantified expressions.\n+\t* sem_res.adb: New procedure Resolve_Qualified_Expression.\n+\t* sinfo.adb, sinfo.ads: New node N_Quantified_Expression\n+\t* snames.ads-tmpl: New name Some.\n+\t* sprint.adb: Output quantified_expression.\n+\n+2010-10-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-exexda.adb: Minor reformatting\n+\tMinor code reorganization.\n+\n 2010-10-19  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_eval.adb: Minor reformatting."}, {"sha": "63ab461a9faa65cbeeaf4d8d888f8bc91a01146b", "filename": "gcc/ada/a-exexda.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fa-exexda.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fa-exexda.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexda.adb?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -574,15 +574,18 @@ package body Exception_Data is\n       -------------------\n \n       procedure Append_Number (Number : Integer) is\n-         Val  : Integer := Number;\n-         Size : Integer := 1;\n+         Val  : Integer;\n+         Size : Integer;\n+\n       begin\n          if Number <= 0 then\n             return;\n          end if;\n \n          --  Compute the number of needed characters\n \n+         Size := 1;\n+         Val := Number;\n          while Val > 0 loop\n             Val := Val / 10;\n             Size := Size + 1;\n@@ -606,6 +609,8 @@ package body Exception_Data is\n          end if;\n       end Append_Number;\n \n+   --  Start of processing for Set_Exception_C_Msg\n+\n    begin\n       Exception_Propagation.Setup_Exception (Excep, Excep);\n       Excep.Exception_Raised := False;"}, {"sha": "04fd5c07f7da6b16e1148b147352111f9bef48e9", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -7393,6 +7393,91 @@ package body Exp_Ch4 is\n       end if;\n    end Expand_N_Qualified_Expression;\n \n+   ------------------------------------\n+   -- Expand_N_Quantified_Expression --\n+   ------------------------------------\n+\n+   procedure Expand_N_Quantified_Expression (N : Node_Id) is\n+      Loc      : constant Source_Ptr := Sloc (N);\n+      Iterator : constant Node_Id := Loop_Parameter_Specification (N);\n+      Cond     : constant Node_Id := Condition (N);\n+\n+      Actions : List_Id;\n+      Decl    : Node_Id;\n+      Test    : Node_Id;\n+      Tnn     : Entity_Id;\n+\n+      --  We expand\n+      --      for all X in range => Cond\n+      --    into\n+      --        R := True;\n+      --        for all X in range loop\n+      --           if not Cond then\n+      --              R := False;\n+      --              exit;\n+      --           end if;\n+      --        end loop;\n+      --\n+      --  Conversely, an existentially quantified expression becomes:\n+      --\n+      --        R := False;\n+      --        for all X in range loop\n+      --           if Cond then\n+      --              R := True;\n+      --              exit;\n+      --           end if;\n+      --        end loop;\n+\n+   begin\n+      Actions := New_List;\n+      Tnn := Make_Temporary (Loc, 'T');\n+      Decl := Make_Object_Declaration (Loc,\n+        Defining_Identifier => Tnn,\n+        Object_Definition   => New_Occurrence_Of (Standard_Boolean, Loc));\n+\n+      Append_To (Actions, Decl);\n+\n+      if All_Present (N) then\n+         Set_Expression (Decl, New_Occurrence_Of (Standard_True, Loc));\n+\n+         Test :=\n+           Make_If_Statement (Loc,\n+             Condition =>\n+                Make_Op_Not (Loc, Relocate_Node (Cond)),\n+             Then_Statements => New_List (\n+               Make_Assignment_Statement (Loc,\n+                 Name => New_Occurrence_Of (Tnn, Loc),\n+                 Expression => New_Occurrence_Of (Standard_False, Loc)),\n+               Make_Exit_Statement (Loc)));\n+      else\n+         Set_Expression (Decl, New_Occurrence_Of (Standard_False, Loc));\n+\n+         Test :=\n+           Make_If_Statement (Loc,\n+             Condition => Relocate_Node (Cond),\n+             Then_Statements => New_List (\n+               Make_Assignment_Statement (Loc,\n+                 Name => New_Occurrence_Of (Tnn, Loc),\n+                 Expression => New_Occurrence_Of (Standard_True, Loc)),\n+               Make_Exit_Statement (Loc)));\n+      end if;\n+\n+      Append_To (Actions,\n+        Make_Loop_Statement (Loc,\n+          Iteration_Scheme =>\n+            Make_Iteration_Scheme (Loc,\n+              Loop_Parameter_Specification => Iterator),\n+              Statements => New_List (Test),\n+              End_Label  => Empty));\n+\n+      Rewrite (N,\n+        Make_Expression_With_Actions (Loc,\n+          Expression => New_Occurrence_Of (Tnn, Loc),\n+          Actions    => Actions));\n+\n+      Analyze_And_Resolve (N, Standard_Boolean);\n+   end Expand_N_Quantified_Expression;\n+\n    ---------------------------------\n    -- Expand_N_Selected_Component --\n    ---------------------------------"}, {"sha": "804365806a6bfb4a94a311fc96fcbb265b5bf950", "filename": "gcc/ada/exp_ch4.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fexp_ch4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fexp_ch4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.ads?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -66,6 +66,7 @@ package Exp_Ch4 is\n    procedure Expand_N_Op_Xor                      (N : Node_Id);\n    procedure Expand_N_Or_Else                     (N : Node_Id);\n    procedure Expand_N_Qualified_Expression        (N : Node_Id);\n+   procedure Expand_N_Quantified_Expression       (N : Node_Id);\n    procedure Expand_N_Selected_Component          (N : Node_Id);\n    procedure Expand_N_Slice                       (N : Node_Id);\n    procedure Expand_N_Type_Conversion             (N : Node_Id);"}, {"sha": "ac67366d6bcfa06c7113c6f0f4e49d1a28afbd90", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -2877,6 +2877,7 @@ package body Exp_Util is\n                N_Push_Program_Error_Label               |\n                N_Push_Storage_Error_Label               |\n                N_Qualified_Expression                   |\n+               N_Quantified_Expression                  |\n                N_Range                                  |\n                N_Range_Constraint                       |\n                N_Real_Literal                           |"}, {"sha": "23d2aef834b72c5aaad54495fe18c27dd284a8ac", "filename": "gcc/ada/expander.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fexpander.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fexpander.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpander.adb?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -364,6 +364,9 @@ package body Expander is\n                when N_Qualified_Expression =>\n                   Expand_N_Qualified_Expression (N);\n \n+               when N_Quantified_Expression  =>\n+                  Expand_N_Quantified_Expression (N);\n+\n                when N_Raise_Statement =>\n                   Expand_N_Raise_Statement (N);\n "}, {"sha": "126fb4ab0cf30987ee00ce044c37bdc4585b5696", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -1137,6 +1137,16 @@ package body Ch3 is\n          Discard_Junk_Node (P_Array_Type_Definition);\n          return Error;\n \n+      --  If Some becomes a keyword, the following is needed to make it\n+      --  acceptable in older versions of Ada.\n+\n+      elsif Token = Tok_Some\n+        and then Ada_Version < Ada_2012\n+      then\n+         Scan_Reserved_Identifier (False);\n+         Scan;\n+         return Token_Node;\n+\n       else\n          Type_Node := P_Qualified_Simple_Name_Resync;\n "}, {"sha": "b679e20334873e62493c750dbd5b4014580d704f", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 97, "deletions": 7, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -648,7 +648,7 @@ package body Ch4 is\n             Error_Msg\n               (\"expect identifier in parameter association\",\n                 Sloc (Expr_Node));\n-            Scan;  --   past arrow.\n+            Scan;  --   past arrow\n \n          elsif not Comma_Present then\n             T_Right_Paren;\n@@ -1214,6 +1214,13 @@ package body Ch4 is\n          T_Right_Paren;\n          return Expr_Node;\n \n+      --  Quantified expression case\n+\n+      elsif Token = Tok_For then\n+         Expr_Node := P_Quantified_Expression;\n+         T_Right_Paren;\n+         return Expr_Node;\n+\n       --  Note: the mechanism used here of rescanning the initial expression\n       --  is distinctly unpleasant, but it saves a lot of fiddling in scanning\n       --  out the discrete choice list.\n@@ -1415,8 +1422,19 @@ package body Ch4 is\n          --  that doesn't belong to us!\n \n          if Token in Token_Class_Eterm then\n-            Error_Msg_AP (\"expecting expression or component association\");\n-            exit;\n+\n+            --  If Some becomes a keyword, the following is needed to make it\n+            --  acceptable in older versions of Ada.\n+\n+            if Token = Tok_Some\n+              and then Ada_Version < Ada_2012\n+            then\n+               Scan_Reserved_Identifier (False);\n+            else\n+               Error_Msg_AP\n+                 (\"expecting expression or component association\");\n+               exit;\n+            end if;\n          end if;\n \n          --  Deal with misused box\n@@ -1616,15 +1634,20 @@ package body Ch4 is\n    end P_Expression;\n \n    --  This function is identical to the normal P_Expression, except that it\n-   --  also permits the appearence of a case of conditional expression without\n-   --  the usual surrounding parentheses.\n+   --  also permits the appearance of a case, conditional, or quantified\n+   --  expression without the usual surrounding parentheses.\n \n    function P_Expression_If_OK return Node_Id is\n    begin\n       if Token = Tok_Case then\n          return P_Case_Expression;\n+\n       elsif Token = Tok_If then\n          return P_Conditional_Expression;\n+\n+      elsif Token = Tok_For then\n+         return P_Quantified_Expression;\n+\n       else\n          return P_Expression;\n       end if;\n@@ -1720,14 +1743,20 @@ package body Ch4 is\n       end if;\n    end P_Expression_Or_Range_Attribute;\n \n-   --  Version that allows a non-parenthesized case or conditional expression\n+   --  Version that allows a non-parenthesized case, conditional, or quantified\n+   --  expression\n \n    function P_Expression_Or_Range_Attribute_If_OK return Node_Id is\n    begin\n       if Token = Tok_Case then\n          return P_Case_Expression;\n+\n       elsif Token = Tok_If then\n          return P_Conditional_Expression;\n+\n+      elsif Token = Tok_For then\n+         return P_Quantified_Expression;\n+\n       else\n          return P_Expression_Or_Range_Attribute;\n       end if;\n@@ -2285,7 +2314,7 @@ package body Ch4 is\n    --    NUMERIC_LITERAL  | null\n    --  | STRING_LITERAL   | AGGREGATE\n    --  | NAME             | QUALIFIED_EXPRESSION\n-   --  | ALLOCATOR        | (EXPRESSION)\n+   --  | ALLOCATOR        | (EXPRESSION) | QUANTIFIED_EXPRESSION\n \n    --  Error recovery: can raise Error_Resync\n \n@@ -2436,6 +2465,25 @@ package body Ch4 is\n                   return P_Identifier;\n                end if;\n \n+            --  For [all | some]  indicates a quantified expression\n+\n+            when Tok_For =>\n+\n+               if Token_Is_At_Start_Of_Line then\n+                  Error_Msg_AP (\"misplaced loop\");\n+                  return Error;\n+\n+               elsif Ada_Version >= Ada_2012 then\n+                  Error_Msg_SC (\"quantified expression must be parenthesized\");\n+                  return P_Quantified_Expression;\n+\n+               else\n+\n+               --  Otherwise treat as misused identifier\n+\n+                  return P_Identifier;\n+               end if;\n+\n             --  Anything else is illegal as the first token of a primary, but\n             --  we test for a reserved identifier so that it is treated nicely\n \n@@ -2457,6 +2505,48 @@ package body Ch4 is\n       end loop;\n    end P_Primary;\n \n+   -------------------------------\n+   -- 4.4 Quantified_Expression --\n+   -------------------------------\n+\n+   --  QUANTIFIED_EXPRESSION ::=\n+   --    for QUANTIFIER LOOP_PARAMETER_SPECIFICATION => PREDICATE |\n+   --    for QUANTIFIER ITERATOR_SPECIFICATION => PREDICATE\n+\n+   function P_Quantified_Expression return Node_Id is\n+      Node1 : Node_Id;\n+\n+   begin\n+      Scan;  --  past FOR\n+\n+      Node1 := New_Node (N_Quantified_Expression, Prev_Token_Ptr);\n+\n+      if Token = Tok_All then\n+         Set_All_Present (Node1);\n+\n+      --  We treat Some as a non-reserved keyword, so it appears to\n+      --  the scanner as an identifier. If Some is made into a reserved\n+      --  work, the check below is against Tok_Some.\n+\n+      elsif Token /= Tok_Identifier\n+        or else Chars (Token_Node) /= Name_Some\n+      then\n+         Error_Msg_AP (\"missing quantifier\");\n+         raise Error_Resync;\n+      end if;\n+\n+      Scan;\n+      Set_Loop_Parameter_Specification (Node1, P_Loop_Parameter_Specification);\n+      if Token = Tok_Arrow then\n+         Scan;\n+         Set_Condition (Node1, P_Expression);\n+         return Node1;\n+      else\n+         Error_Msg_AP (\"missing arrow\");\n+         raise Error_Resync;\n+      end if;\n+   end P_Quantified_Expression;\n+\n    ---------------------------\n    -- 4.5  Logical Operator --\n    ---------------------------"}, {"sha": "15e290eee7f8c8387e9c66ac2973f7eb8226e597", "filename": "gcc/ada/par-ch5.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fpar-ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fpar-ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch5.adb?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -38,7 +38,6 @@ package body Ch5 is\n    function P_Goto_Statement                     return Node_Id;\n    function P_If_Statement                       return Node_Id;\n    function P_Label                              return Node_Id;\n-   function P_Loop_Parameter_Specification       return Node_Id;\n    function P_Null_Statement                     return Node_Id;\n \n    function P_Assignment_Statement (LHS : Node_Id)  return Node_Id;"}, {"sha": "4f360ca43f2de40a10e5e185cca445232bd05557", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -703,6 +703,10 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       function P_Qualified_Expression (Subtype_Mark : Node_Id) return Node_Id;\n       --  This routine scans out a qualified expression when the caller has\n       --  already scanned out the name and apostrophe of the construct.\n+\n+      function P_Quantified_Expression return Node_Id;\n+      --  This routine scans out a quantified expression when the caller has\n+      --  already scanned out the keyword \"for\" of the construct.\n    end Ch4;\n \n    -------------\n@@ -713,6 +717,9 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       function P_Condition return Node_Id;\n       --  Scan out and return a condition\n \n+      function P_Loop_Parameter_Specification return Node_Id;\n+      --  Used in loop constructs and quantified expressions.\n+\n       function P_Statement_Name (Name_Node : Node_Id) return Node_Id;\n       --  Given a node representing a name (which is a call), converts it\n       --  to the syntactically corresponding procedure call statement."}, {"sha": "7f6b808a56529d62f823792d01d6762d4585a41c", "filename": "gcc/ada/scans.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fscans.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fscans.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.adb?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -118,6 +118,13 @@ package body Scans is\n       Set_Reserved (Name_Reverse,   Tok_Reverse);\n       Set_Reserved (Name_Select,    Tok_Select);\n       Set_Reserved (Name_Separate,  Tok_Separate);\n+\n+      --  We choose to make Some into a non-reserved word, so it is handled\n+      --  like a regular identifier in most contexts. Uncomment the following\n+      --  line if a pedantic Ada2012 mode is required.\n+\n+      --  Set_Reserved (Name_Some,      Tok_Some);\n+\n       Set_Reserved (Name_Subtype,   Tok_Subtype);\n       Set_Reserved (Name_Tagged,    Tok_Tagged);\n       Set_Reserved (Name_Task,      Tok_Task);"}, {"sha": "fcf474bc8194842f62f241ba359f3b546c1674cb", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -130,6 +130,7 @@ package Scans is\n       Tok_Record,          -- RECORD       Eterm, Sterm\n       Tok_Renames,         -- RENAMES      Eterm, Sterm\n       Tok_Reverse,         -- REVERSE      Eterm, Sterm\n+      Tok_Some,            -- SOME         Eterm, Sterm\n       Tok_Tagged,          -- TAGGED       Eterm, Sterm\n       Tok_Then,            -- THEN         Eterm, Sterm\n "}, {"sha": "fb38d225b2632b5c0b36a1b01f246d8e1b664b69", "filename": "gcc/ada/scn.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fscn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fscn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn.adb?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -472,9 +472,20 @@ package body Scn is\n       Token_Name := Name_Find;\n \n       if not Used_As_Identifier (Token) or else Force_Msg then\n-         Error_Msg_Name_1 := Token_Name;\n-         Error_Msg_SC (\"reserved word* cannot be used as identifier!\");\n-         Used_As_Identifier (Token) := True;\n+\n+         --  If \"some\" is made into a reseverd work in Ada2012, the following\n+         --  check will make it into a regular identifer in earlier versions\n+         --  of the language.\n+\n+         if Token = Tok_Some\n+           and then Ada_Version < Ada_2012\n+         then\n+            null;\n+         else\n+            Error_Msg_Name_1 := Token_Name;\n+            Error_Msg_SC (\"reserved word* cannot be used as identifier!\");\n+            Used_As_Identifier (Token) := True;\n+         end if;\n       end if;\n \n       Token := Tok_Identifier;"}, {"sha": "42447c2357f97febf2e89aa4a3f8b4b9966bc47a", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -470,6 +470,9 @@ package body Sem is\n          when N_Qualified_Expression =>\n             Analyze_Qualified_Expression (N);\n \n+         when N_Quantified_Expression =>\n+            Analyze_Quantified_Expression (N);\n+\n          when N_Raise_Statement =>\n             Analyze_Raise_Statement (N);\n "}, {"sha": "a96bcecd81083b9b9a6d2a7989d155277976dd4b", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -46,6 +46,7 @@ with Sem_Aux;  use Sem_Aux;\n with Sem_Case; use Sem_Case;\n with Sem_Cat;  use Sem_Cat;\n with Sem_Ch3;  use Sem_Ch3;\n+with Sem_Ch5;  use Sem_Ch5;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Disp; use Sem_Disp;\n@@ -3176,6 +3177,32 @@ package body Sem_Ch4 is\n       Set_Etype  (N, T);\n    end Analyze_Qualified_Expression;\n \n+   -----------------------------------\n+   -- Analyze_Quantified_Expression --\n+   -----------------------------------\n+\n+   procedure Analyze_Quantified_Expression (N : Node_Id) is\n+      Loc : constant Source_Ptr := Sloc (N);\n+      Ent : constant Entity_Id :=\n+              New_Internal_Entity\n+                (E_Loop, Current_Scope, Sloc (N), 'L');\n+\n+      Iterator : Node_Id;\n+   begin\n+      Set_Etype  (Ent,  Standard_Void_Type);\n+      Set_Parent (Ent, N);\n+\n+      Iterator :=\n+        Make_Iteration_Scheme (Loc,\n+           Loop_Parameter_Specification =>  Loop_Parameter_Specification (N));\n+\n+      Push_Scope (Ent);\n+      Analyze_Iteration_Scheme (Iterator);\n+      Analyze (Condition (N));\n+      End_Scope;\n+      Set_Etype (N, Standard_Boolean);\n+   end Analyze_Quantified_Expression;\n+\n    -------------------\n    -- Analyze_Range --\n    -------------------"}, {"sha": "340f1f7c04a20a5383461a7636b613ceadf9e48f", "filename": "gcc/ada/sem_ch4.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsem_ch4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsem_ch4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.ads?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -42,6 +42,7 @@ package Sem_Ch4  is\n    procedure Analyze_Negation                           (N : Node_Id);\n    procedure Analyze_Null                               (N : Node_Id);\n    procedure Analyze_Qualified_Expression               (N : Node_Id);\n+   procedure Analyze_Quantified_Expression              (N : Node_Id);\n    procedure Analyze_Range                              (N : Node_Id);\n    procedure Analyze_Reference                          (N : Node_Id);\n    procedure Analyze_Selected_Component                 (N : Node_Id);"}, {"sha": "2de95d873a8d39982037cabe436ef9f1ef6cc717", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -70,12 +70,6 @@ package body Sem_Ch5 is\n    --  messages. This variable is recursively saved on entry to processing the\n    --  construct, and restored on exit.\n \n-   -----------------------\n-   -- Local Subprograms --\n-   -----------------------\n-\n-   procedure Analyze_Iteration_Scheme (N : Node_Id);\n-\n    ------------------------\n    -- Analyze_Assignment --\n    ------------------------"}, {"sha": "48e9764f61a4177714542c12752610e8202426e4", "filename": "gcc/ada/sem_ch5.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsem_ch5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsem_ch5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.ads?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,6 +34,7 @@ package Sem_Ch5 is\n    procedure Analyze_Goto_Statement             (N : Node_Id);\n    procedure Analyze_If_Statement               (N : Node_Id);\n    procedure Analyze_Implicit_Label_Declaration (N : Node_Id);\n+   procedure Analyze_Iteration_Scheme           (N : Node_Id);\n    procedure Analyze_Label                      (N : Node_Id);\n    procedure Analyze_Loop_Statement             (N : Node_Id);\n    procedure Analyze_Null_Statement             (N : Node_Id);"}, {"sha": "cc8ac857b56bf04d945a188910cea9a15ed7455a", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -192,6 +192,7 @@ package body Sem_Res is\n    procedure Resolve_Op_Expon                  (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Op_Not                    (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Qualified_Expression      (N : Node_Id; Typ : Entity_Id);\n+   procedure Resolve_Quantified_Expression     (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Range                     (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Real_Literal              (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Reference                 (N : Node_Id; Typ : Entity_Id);\n@@ -2698,6 +2699,9 @@ package body Sem_Res is\n             when N_Qualified_Expression\n                              => Resolve_Qualified_Expression     (N, Ctx_Type);\n \n+            when N_Quantified_Expression\n+                             => Resolve_Quantified_Expression    (N, Ctx_Type);\n+\n             when N_Raise_xxx_Error\n                              => Set_Etype (N, Ctx_Type);\n \n@@ -7767,6 +7771,18 @@ package body Sem_Res is\n       Eval_Qualified_Expression (N);\n    end Resolve_Qualified_Expression;\n \n+   -----------------------------------\n+   -- Resolve_Quantified_Expression --\n+   -----------------------------------\n+\n+   procedure Resolve_Quantified_Expression (N : Node_Id; Typ : Entity_Id) is\n+   begin\n+      --  The loop structure is already resolved during its analysis, only the\n+      --  resolution of the condition needs to be done.\n+\n+      Resolve (Condition (N), Typ);\n+   end Resolve_Quantified_Expression;\n+\n    -------------------\n    -- Resolve_Range --\n    -------------------"}, {"sha": "dd09e4c5c207a731dc53ddf51db63420f2064e3d", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -224,6 +224,7 @@ package body Sinfo is\n       pragma Assert (False\n         or else NT (N).Nkind = N_Access_Definition\n         or else NT (N).Nkind = N_Access_To_Object_Definition\n+        or else NT (N).Nkind = N_Quantified_Expression\n         or else NT (N).Nkind = N_Use_Type_Clause);\n       return Flag15 (N);\n    end All_Present;\n@@ -512,6 +513,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Exit_Statement\n         or else NT (N).Nkind = N_If_Statement\n         or else NT (N).Nkind = N_Iteration_Scheme\n+        or else NT (N).Nkind = N_Quantified_Expression\n         or else NT (N).Nkind = N_Raise_Constraint_Error\n         or else NT (N).Nkind = N_Raise_Program_Error\n         or else NT (N).Nkind = N_Raise_Storage_Error\n@@ -1988,7 +1990,8 @@ package body Sinfo is\n       (N : Node_Id) return Node_Id is\n    begin\n       pragma Assert (False\n-        or else NT (N).Nkind = N_Iteration_Scheme);\n+        or else NT (N).Nkind = N_Iteration_Scheme\n+        or else NT (N).Nkind = N_Quantified_Expression);\n       return Node4 (N);\n    end Loop_Parameter_Specification;\n \n@@ -3219,6 +3222,7 @@ package body Sinfo is\n       pragma Assert (False\n         or else NT (N).Nkind = N_Access_Definition\n         or else NT (N).Nkind = N_Access_To_Object_Definition\n+        or else NT (N).Nkind = N_Quantified_Expression\n         or else NT (N).Nkind = N_Use_Type_Clause);\n       Set_Flag15 (N, Val);\n    end Set_All_Present;\n@@ -3507,6 +3511,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Exit_Statement\n         or else NT (N).Nkind = N_If_Statement\n         or else NT (N).Nkind = N_Iteration_Scheme\n+        or else NT (N).Nkind = N_Quantified_Expression\n         or else NT (N).Nkind = N_Raise_Constraint_Error\n         or else NT (N).Nkind = N_Raise_Program_Error\n         or else NT (N).Nkind = N_Raise_Storage_Error\n@@ -4975,7 +4980,8 @@ package body Sinfo is\n       (N : Node_Id; Val : Node_Id) is\n    begin\n       pragma Assert (False\n-        or else NT (N).Nkind = N_Iteration_Scheme);\n+        or else NT (N).Nkind = N_Iteration_Scheme\n+        or else NT (N).Nkind = N_Quantified_Expression);\n       Set_Node4_With_Parent (N, Val);\n    end Set_Loop_Parameter_Specification;\n "}, {"sha": "556bffad1f31900aa4988e6fb5211ae6ece49975", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -3817,6 +3817,22 @@ package Sinfo is\n       --  point operands if the Treat_Fixed_As_Integer flag is set and will\n       --  thus treat these nodes in identical manner, ignoring small values.\n \n+      ---------------------------------\n+      -- 4.5.9 Quantified Expression --\n+      ---------------------------------\n+\n+      --  QUANTIFIED_EXPRESSION ::=\n+      --    for QUANTIFIER LOOP_PARAMETER_SPECIFICATION => PREDICATE |\n+      --    for QUANTIFIER ITERATOR_SPECIFICATION => PREDICATE\n+      --\n+      --  QUANTIFIER ::= all  |  some\n+\n+      --  N_Quantified_Expression\n+      --  Sloc points to token for\n+      --  Loop_Parameter_Specification (Node4)\n+      --  Condition (Node1)\n+      --  All_Present (Flag15)\n+\n       --------------------------\n       -- 4.6  Type Conversion --\n       --------------------------\n@@ -7447,6 +7463,7 @@ package Sinfo is\n       N_Null,\n       N_Procedure_Call_Statement,\n       N_Qualified_Expression,\n+      N_Quantified_Expression,\n \n       --  N_Raise_xxx_Error, N_Subexpr, N_Has_Etype\n \n@@ -10473,6 +10490,13 @@ package Sinfo is\n         4 => True,    --  Subtype_Mark (Node4)\n         5 => False),  --  Etype (Node5-Sem)\n \n+     N_Quantified_Expression =>\n+       (1 => True,    --  Condition (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => True,    --  Loop_Parameter_Specification (Node4)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n      N_Allocator =>\n        (1 => False,   --  Storage_Pool (Node1-Sem)\n         2 => False,   --  Procedure_To_Call (Node2-Sem)"}, {"sha": "57f40a5593cc42f19d81c2cf4e0bedd03df6a1aa", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -985,6 +985,7 @@ package Snames is\n    Name_Reverse                          : constant Name_Id := N + $;\n    Name_Select                           : constant Name_Id := N + $;\n    Name_Separate                         : constant Name_Id := N + $;\n+   Name_Some                             : constant Name_Id := N + $;\n    Name_Subtype                          : constant Name_Id := N + $;\n    Name_Task                             : constant Name_Id := N + $;\n    Name_Terminate                        : constant Name_Id := N + $;"}, {"sha": "e2bb1734c8b2ef6011b65d9b595f260ecc01dfe8", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961aa79587ca417a9920cd2ba4df4d3144fd26d/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=a961aa79587ca417a9920cd2ba4df4d3144fd26d", "patch": "@@ -2626,6 +2626,19 @@ package body Sprint is\n                Write_Char (')');\n             end if;\n \n+         when N_Quantified_Expression =>\n+            Write_Str (\" for\");\n+\n+            if All_Present (Node) then\n+               Write_Str (\" all \");\n+            else\n+               Write_Str (\" some \");\n+            end if;\n+\n+            Sprint_Node (Loop_Parameter_Specification (Node));\n+            Write_Str (\" => \");\n+            Sprint_Node (Condition (Node));\n+\n          when N_Raise_Constraint_Error =>\n \n             --  This node can be used either as a subexpression or as a"}]}