{"sha": "3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JjNzUxYmRmZWI4Y2RkNzZjOWEwMjE0ZjBmOWRhNmI0NDBiNTkwYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-07-29T22:22:41Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-07-29T22:22:41Z"}, "message": "expr.c (expand_expr_real_1): Do not load mem targets into register.\n\n\n\t* expr.c (expand_expr_real_1): Do not load mem targets into register.\n\t* i386.c (ix86_fixup_binary_operands): Likewise.\n\t(ix86_expand_unary_operator): Likewise.\n\t(ix86_expand_fp_absneg_operator): Likewise.\n\t* optabs.c (expand_vec_cond_expr): Validate dest.\n\nFrom-SVN: r102570", "tree": {"sha": "7422c6f520abc7c3130ef5743f9e08959e3f3236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7422c6f520abc7c3130ef5743f9e08959e3f3236"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c/comments", "author": null, "committer": null, "parents": [{"sha": "0bab7d3f439709b993ee0d87316a37c78d50e266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bab7d3f439709b993ee0d87316a37c78d50e266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bab7d3f439709b993ee0d87316a37c78d50e266"}], "stats": {"total": 44, "additions": 10, "deletions": 34}, "files": [{"sha": "ef5a77457e28f32d3d18753f44871d81dec73a52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c", "patch": "@@ -1,3 +1,11 @@\n+2005-07-30  Jan Hubicka  <jh@suse.cz>\n+\n+\t* expr.c (expand_expr_real_1): Do not load mem targets into register.\n+\t* i386.c (ix86_fixup_binary_operands): Likewise.\n+\t(ix86_expand_unary_operator): Likewise.\n+\t(ix86_expand_fp_absneg_operator): Likewise.\n+\t* optabs.c (expand_vec_cond_expr): Validate dest.\n+\n 2005-07-29  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/21720"}, {"sha": "e9cf7db9f858c20ab353e69141b5eff4e65dcd99", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c", "patch": "@@ -8154,17 +8154,6 @@ ix86_fixup_binary_operands (enum rtx_code code, enum machine_mode mode,\n       && GET_RTX_CLASS (code) != RTX_COMM_ARITH)\n     src1 = force_reg (mode, src1);\n \n-  /* If optimizing, copy to regs to improve CSE */\n-  if (optimize && ! no_new_pseudos)\n-    {\n-      if (GET_CODE (dst) == MEM)\n-\tdst = gen_reg_rtx (mode);\n-      if (GET_CODE (src1) == MEM)\n-\tsrc1 = force_reg (mode, src1);\n-      if (GET_CODE (src2) == MEM)\n-\tsrc2 = force_reg (mode, src2);\n-    }\n-\n   src1 = operands[1] = src1;\n   src2 = operands[2] = src2;\n   return dst;\n@@ -8274,15 +8263,6 @@ ix86_expand_unary_operator (enum rtx_code code, enum machine_mode mode,\n   if (MEM_P (src) && !matching_memory)\n     src = force_reg (mode, src);\n \n-  /* If optimizing, copy to regs to improve CSE.  */\n-  if (optimize && ! no_new_pseudos)\n-    {\n-      if (GET_CODE (dst) == MEM)\n-\tdst = gen_reg_rtx (mode);\n-      if (GET_CODE (src) == MEM)\n-\tsrc = force_reg (mode, src);\n-    }\n-\n   /* Emit the instruction.  */\n \n   op = gen_rtx_SET (VOIDmode, dst, gen_rtx_fmt_e (code, mode, src));\n@@ -8410,7 +8390,7 @@ ix86_expand_fp_absneg_operator (enum rtx_code code, enum machine_mode mode,\n   matching_memory = false;\n   if (MEM_P (dst))\n     {\n-      if (rtx_equal_p (dst, src) && (!optimize || no_new_pseudos))\n+      if (rtx_equal_p (dst, src))\n \tmatching_memory = true;\n       else\n \tdst = gen_reg_rtx (mode);"}, {"sha": "472e10a157957967512d7b734ed6e3a945c484f1", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c", "patch": "@@ -6578,18 +6578,6 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       target = 0;\n     }\n \n-  /* If will do cse, generate all results into pseudo registers\n-     since 1) that allows cse to find more things\n-     and 2) otherwise cse could produce an insn the machine\n-     cannot support.  An exception is a CONSTRUCTOR into a multi-word\n-     MEM: that's much more likely to be most efficient into the MEM.\n-     Another is a CALL_EXPR which must return in memory.  */\n-\n-  if (! cse_not_expected && mode != BLKmode && target\n-      && (!REG_P (target) || REGNO (target) < FIRST_PSEUDO_REGISTER)\n-      && ! (code == CONSTRUCTOR && GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n-      && ! (code == CALL_EXPR && aggregate_value_p (exp, exp)))\n-    target = 0;\n \n   switch (code)\n     {"}, {"sha": "466a56c7c148cef875cb9760f354457c2ca07d76", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=3bc751bdfeb8cdd76c9a0214f0f9da6b440b590c", "patch": "@@ -5475,7 +5475,7 @@ expand_vec_cond_expr (tree vec_cond_expr, rtx target)\n   if (icode == CODE_FOR_nothing)\n     return 0;\n \n-  if (!target)\n+  if (!target || !insn_data[icode].operand[0].predicate (target, mode))\n     target = gen_reg_rtx (mode);\n \n   /* Get comparison rtx.  First expand both cond expr operands.  */"}]}