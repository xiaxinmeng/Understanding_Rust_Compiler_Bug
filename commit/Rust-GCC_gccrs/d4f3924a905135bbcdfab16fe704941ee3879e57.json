{"sha": "d4f3924a905135bbcdfab16fe704941ee3879e57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRmMzkyNGE5MDUxMzViYmNkZmFiMTZmZTcwNDk0MWVlMzg3OWU1Nw==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2010-03-22T18:05:36Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2010-03-22T18:05:36Z"}, "message": "sourcebuild.texi (Test Directives): Split into six subsections...\n\n2010-03-22  Janis Johnson  <janis187@us.ibm.com>\n\t    Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>\n\n\t* doc/sourcebuild.texi (Test Directives): Split into six\n\tsubsections, with most of the current text in new subsections\n\tDirectives, Selectors, and Final Actions.\n\t(Directives): Split list of test directives into multiple\n\tsubsubsections.\n\t(Selectors): Describe use and syntax of selectors.\n\t(Effective-Target Keywords): Describe all existing keywords.\n\t(Add Options): Describe features for dg-add-options.\n\t(Require Support): Describe variants of dg-require-support.\n\t(Final Actions): Describe commands to use in dg-final.\n\nCo-Authored-By: Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>\n\nFrom-SVN: r157646", "tree": {"sha": "0b4b0d74548edbfd412c788a90bbe6353ed30003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b4b0d74548edbfd412c788a90bbe6353ed30003"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4f3924a905135bbcdfab16fe704941ee3879e57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f3924a905135bbcdfab16fe704941ee3879e57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4f3924a905135bbcdfab16fe704941ee3879e57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f3924a905135bbcdfab16fe704941ee3879e57/comments", "author": null, "committer": null, "parents": [{"sha": "fccff34135bbbeb31d6b4f4f859c8fbc5e33007d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fccff34135bbbeb31d6b4f4f859c8fbc5e33007d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fccff34135bbbeb31d6b4f4f859c8fbc5e33007d"}], "stats": {"total": 1004, "additions": 916, "deletions": 88}, "files": [{"sha": "278d03f38e09a4a92039adc9f7e8180214d6bb91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f3924a905135bbcdfab16fe704941ee3879e57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f3924a905135bbcdfab16fe704941ee3879e57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4f3924a905135bbcdfab16fe704941ee3879e57", "patch": "@@ -1,3 +1,17 @@\n+2010-03-22  Janis Johnson  <janis187@us.ibm.com>\n+\t    Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* doc/sourcebuild.texi (Test Directives): Split into six\n+\tsubsections, with most of the current text in new subsections\n+\tDirectives, Selectors, and Final Actions.\n+\t(Directives): Split list of test directives into multiple\n+\tsubsubsections.\n+\t(Selectors): Describe use and syntax of selectors.\n+\t(Effective-Target Keywords): Describe all existing keywords.\n+\t(Add Options): Describe features for dg-add-options.\n+\t(Require Support): Describe variants of dg-require-support.\n+\t(Final Actions): Describe commands to use in dg-final.\n+\n 2010-03-22  Michael Matz  <matz@suse.de>\n \n \tPR middle-end/43475"}, {"sha": "eaceae08d93aa30783d6cf95bb7a90d542094ae3", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 902, "deletions": 88, "changes": 990, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f3924a905135bbcdfab16fe704941ee3879e57/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f3924a905135bbcdfab16fe704941ee3879e57/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=d4f3924a905135bbcdfab16fe704941ee3879e57", "patch": "@@ -914,6 +914,18 @@ FIXME: discuss non-C testsuites here.\n @node Test Directives\n @section Directives used within DejaGnu tests\n \n+@menu\n+* Directives::  Syntax and descriptions of test directives.\n+* Selectors:: Selecting targets to which a test applies.\n+* Effective-Target Keywords:: Keywords describing target attributes.\n+* Add Options:: Features for @code{dg-add-options}\n+* Require Support:: Variants of @code{dg-require-@var{support}}\n+* Final Actions:: Commands for use in @code{dg-final}\n+@end menu\n+\n+@node Directives\n+@subsection Syntax and Descriptions of test directives\n+\n Test directives appear within comments in a test source file and begin\n with @code{dg-}.  Some of these are defined within DejaGnu and others\n are local to the GCC testsuite.\n@@ -923,27 +935,10 @@ directives local to GCC sometimes override information used by the\n DejaGnu directives, which know nothing about the GCC directives, so the\n DejaGnu directives must precede GCC directives.\n \n-Several test directives include selectors which are usually preceded by\n-the keyword @code{target} or @code{xfail}.  A selector is: one or more\n-target triplets, possibly including wildcard characters; a single\n-effective-target keyword; or a logical expression.  Depending on the\n-context, the selector specifies whether a test is skipped and reported\n-as unsupported or is expected to fail.  Use @samp{*-*-*} to match any\n-target.\n-Effective-target keywords are defined in @file{lib/target-supports.exp} in\n-the GCC testsuite.\n+Several test directives include selectors (@pxref{Selectors, , })\n+which are usually preceded by the keyword @code{target} or @code{xfail}.\n \n-A selector expression appears within curly braces and uses a single\n-logical operator: one of @samp{!}, @samp{&&}, or @samp{||}.  An\n-operand is another selector expression, an effective-target keyword,\n-a single target triplet, or a list of target triplets within quotes or\n-curly braces.  For example:\n-\n-@smallexample\n-@{ target @{ ! \"hppa*-*-* ia64*-*-*\" @} @}\n-@{ target @{ powerpc*-*-* && lp64 @} @}\n-@{ xfail @{ lp64 || vect_no_align @} @}\n-@end smallexample\n+@subsubsection Specify how to build the test\n \n @table @code\n @item @{ dg-do @var{do-what-keyword} [@{ target/xfail @var{selector} @}] @}\n@@ -969,15 +964,19 @@ tests by redefining @code{dg-do-what-default} within the @code{.exp}\n file for those tests.\n \n If the directive includes the optional @samp{@{ target @var{selector} @}}\n-then the test is skipped unless the target system is included in the\n-list of target triplets or matches the effective-target keyword.\n+then the test is skipped unless the target system matches the\n+@var{selector}.\n \n If @var{do-what-keyword} is @code{run} and the directive includes\n the optional @samp{@{ xfail @var{selector} @}} and the selector is met\n then the test is expected to fail.  The @code{xfail} clause is ignored\n for other values of @var{do-what-keyword}; those tests can use\n directive @code{dg-xfail-if}.\n+@end table\n+\n+@subsubsection Specify additional compiler options\n \n+@table @code\n @item @{ dg-options @var{options} [@{ target @var{selector} @}] @}\n This DejaGnu directive provides a list of compiler options, to be used\n if the target system matches @var{selector}, that replace the default\n@@ -988,21 +987,13 @@ Add any compiler options that are needed to access certain features.\n This directive does nothing on targets that enable the features by\n default, or that don't provide them at all.  It must come after\n all @code{dg-options} directives.\n-\n-The supported values of @var{feature} are:\n-@table @code\n-@item c99_runtime\n-The target's C99 runtime (both headers and libraries).\n-\n-@item mips16_attribute\n-@code{mips16} function attributes.  Only MIPS targets support this feature,\n-and only then in certain modes.\n+For supported values of @var{feature} see @ref{Add Options, ,}.\n @end table\n \n-@item @{ dg-timeout @var{n} [@{target @var{selector} @}] @}\n-Set the time limit for the compilation and for the execution of the test\n-to the specified number of seconds.  The normal timeout limit, in\n-seconds, is found by searching the following in order:\n+@subsubsection Modify the test timeout value\n+\n+The normal timeout limit, in seconds, is found by searching the\n+following in order:\n \n @itemize @bullet\n @item the value defined by an earlier @code{dg-timeout} directive in\n@@ -1015,10 +1006,19 @@ the test\n @item 300\n @end itemize\n \n+@table @code\n+@item @{ dg-timeout @var{n} [@{target @var{selector} @}] @}\n+Set the time limit for the compilation and for the execution of the test\n+to the specified number of seconds.\n+\n @item @{ dg-timeout-factor @var{x} [@{ target @var{selector} @}] @}\n Multiply the normal time limit for compilation and execution of the test\n by the specified floating-point factor.\n+@end table\n+\n+@subsubsection Skip a test for some targets\n \n+@table @code\n @item @{ dg-skip-if @var{comment} @{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]] @}\n Arguments @var{include-opts} and @var{exclude-opts} are lists in which\n each element is a string of zero or more GCC options.\n@@ -1056,7 +1056,7 @@ To skip a test if either @code{-O2} or @code{-O3} is present:\n /* @{ dg-skip-if \"\" @{ *-*-* @}  @{ \"-O2\" \"-O3\" @} @{ \"\" @} @} */\n @end smallexample\n \n-To skip a test unless option @code{-OS} is present:\n+To skip a test unless option @code{-Os} is present:\n \n @smallexample\n /* @{ dg-skip-if \"\" @{ *-*-* @}  @{ \"*\" @} @{ \"-Os\" @} @} */\n@@ -1069,47 +1069,60 @@ but not if @code{-fpic} is also present:\n /* @{ dg-skip-if \"\" @{ *-*-* @}  @{ \"-O2 -g\" \"-O3 -g\" @} @{ \"-fpic\" @} @} */\n @end smallexample\n \n-@item  @{ dg-xfail-if @var{comment} @{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]] @}\n-Expect the test to fail if the conditions (which are the same as for\n-@code{dg-skip-if}) are met.  This does not affect the execute step.\n-\n-@item  @{ dg-xfail-run-if @var{comment} @{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]] @}\n-Expect the execute step of a test to fail if the conditions (which are\n-the same as for @code{dg-skip-if} and @code{dg-xfail-if}) are met.\n+@item @{ dg-require-effective-target @var{keyword} @}\n+Skip the test if the test target, including current multilib flags,\n+is not covered by the effective-target keyword.\n+This directive must appear after any @code{dg-do} directive in the test\n+and before any @code{dg-additional-sources} directive.\n+@xref{Effective-Target Keywords, , }.\n \n @item @{ dg-require-@var{support} args @}\n-Skip the test if the target does not provide the required support;\n-see @file{lib/gcc-dg.exp} in the GCC testsuite for the actual directives.\n+Skip the test if the target does not provide the required support.\n These directives must appear after any @code{dg-do} directive in the test\n and before any @code{dg-additional-sources} directive.\n They require at least one argument, which can be an empty string if the\n specific procedure does not examine the argument.\n+@xref{Require Support, , }, for a complete list of these directives.\n+@end table\n \n-@item @{ dg-require-effective-target @var{keyword} @}\n-Skip the test if the test target, including current multilib flags,\n-is not covered by the effective-target keyword.\n-This directive must appear after any @code{dg-do} directive in the test\n-and before any @code{dg-additional-sources} directive.\n+@subsubsection Expect a test to fail for some targets\n+\n+@table @code\n+@item  @{ dg-xfail-if @var{comment} @{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]] @}\n+Expect the test to fail if the conditions (which are the same as for\n+@code{dg-skip-if}) are met.  This does not affect the execute step.\n+\n+@item  @{ dg-xfail-run-if @var{comment} @{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]] @}\n+Expect the execute step of a test to fail if the conditions (which are\n+the same as for @code{dg-skip-if}) are met.\n+@end table\n+\n+@subsubsection Expect the test executable to fail\n \n+@table @code\n @item  @{ dg-shouldfail @var{comment} [@{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]]] @}\n Expect the test executable to return a nonzero exit status if the\n conditions (which are the same as for @code{dg-skip-if}) are met.\n+@end table\n+\n+@subsubsection Verify compiler messages\n \n+@table @code\n @item @{ dg-error @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}\n This DejaGnu directive appears on a source line that is expected to get\n an error message, or else specifies the source line associated with the\n message.  If there is no message for that line or if the text of that\n message is not matched by @var{regexp} then the check fails and\n @var{comment} is included in the @code{FAIL} message.  The check does\n-not look for the string @samp{\"error\"} unless it is part of @var{regexp}.\n+not look for the string @samp{error} unless it is part of @var{regexp}.\n \n @item @{ dg-warning @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}\n This DejaGnu directive appears on a source line that is expected to get\n a warning message, or else specifies the source line associated with the\n message.  If there is no message for that line or if the text of that\n message is not matched by @var{regexp} then the check fails and\n @var{comment} is included in the @code{FAIL} message.  The check does\n-not look for the string @samp{\"warning\"} unless it is part of @var{regexp}.\n+not look for the string @samp{warning} unless it is part of @var{regexp}.\n \n @item @{ dg-message @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}\n The line is expected to get a message other than an error or warning.\n@@ -1130,110 +1143,897 @@ to compiler messages that are not handled by @samp{dg-error},\n @samp{dg-warning} or @samp{dg-bogus}.  For this directive @samp{xfail}\n has the same effect as @samp{target}.\n \n+@item @{ dg-prune-output @var{regexp} @}\n+Prune messages matching @var{regexp} from the test output.\n+@end table\n+\n+@subsubsection Verify output of the test executable\n+\n+@table @code\n @item @{ dg-output @var{regexp} [@{ target/xfail @var{selector} @}] @}\n This DejaGnu directive compares @var{regexp} to the combined output\n that the test executable writes to @file{stdout} and @file{stderr}.\n+@end table\n \n-@item @{ dg-prune-output @var{regexp} @}\n-Prune messages matching @var{regexp} from test output.\n+@subsubsection Specify additional files for a test\n \n+@table @code\n @item @{ dg-additional-files \"@var{filelist}\" @}\n Specify additional files, other than source files, that must be copied\n to the system where the compiler runs.\n \n @item @{ dg-additional-sources \"@var{filelist}\" @}\n Specify additional source files to appear in the compile line\n following the main test file.\n+@end table\n \n+@subsubsection Add checks at the end of a test\n+\n+@table @code\n @item @{ dg-final @{ @var{local-directive} @} @}\n This DejaGnu directive is placed within a comment anywhere in the\n source file and is processed after the test has been compiled and run.\n Multiple @samp{dg-final} commands are processed in the order in which\n-they appear in the source file.\n+they appear in the source file.  @xref{Final Actions, , }, for a list\n+of directives that can be used within @code{dg-final}.\n+@end table\n \n-The GCC testsuite defines the following directives to be used within\n-@code{dg-final}.\n+@node Selectors\n+@subsection Selecting targets to which a test applies\n+\n+Several test directives include @var{selector}s to limit the targets\n+for which a test is run or to declare that a test is expected to fail\n+on particular targets.\n+\n+A selector is:\n+@itemize @bullet\n+@item one or more target triplets, possibly including wildcard characters\n+@item a single effective-target keyword (@pxref{Effective-Target Keywords})\n+@item a logical expression\n+@end itemize\n+\n+Depending on the\n+context, the selector specifies whether a test is skipped and reported\n+as unsupported or is expected to fail.  Use @samp{*-*-*} to match any\n+target.\n+\n+A selector expression appears within curly braces and uses a single\n+logical operator: one of @samp{!}, @samp{&&}, or @samp{||}.  An\n+operand is another selector expression, an effective-target keyword,\n+a single target triplet, or a list of target triplets within quotes or\n+curly braces.  For example:\n+\n+@smallexample\n+@{ target @{ ! \"hppa*-*-* ia64*-*-*\" @} @}\n+@{ target @{ powerpc*-*-* && lp64 @} @}\n+@{ xfail @{ lp64 || vect_no_align @} @}\n+@end smallexample\n+\n+@node Effective-Target Keywords\n+@subsection Keywords describing target attributes\n+\n+Effective-target keywords identify sets of targets that support\n+particular functionality.  They are used to limit tests to be run only\n+for particular targets, or to specify that particular sets of targets\n+are expected to fail some tests.\n+\n+Effective-target keywords are defined in @file{lib/target-supports.exp} in\n+the GCC testsuite, with the exception of those that are documented as\n+being local to a particular test directory.\n+\n+The @samp{effective target} takes into account all of the compiler options\n+with which the test will be compiled, including the multilib options.\n+By convention, keywords ending in @code{_nocache} can also include options\n+specified for the particular test in an earlier @code{dg-options} or\n+@code{dg-add-options} directive.\n+\n+@subsubsection Data type sizes\n \n @table @code\n-@item cleanup-coverage-files\n-Removes coverage data files generated for this test.\n+@item ilp32\n+Target has 32-bit @code{int}, @code{long}, and pointers.\n \n-@item cleanup-repo-files\n-Removes files generated for this test for @option{-frepo}.\n+@item lp64\n+Target has 32-bit @code{int}, 64-bit @code{long} and pointers.\n \n-@item cleanup-rtl-dump @var{suffix}\n-Removes RTL dump files generated for this test.\n+@item llp64\n+Target has 32-bit @code{int} and @code{long}, 64-bit @code{long long}\n+and pointers.\n \n-@item cleanup-tree-dump @var{suffix}\n-Removes tree dump files matching @var{suffix} which were generated for\n-this test.\n+@item double64\n+Target has 64-bit @code{double}.\n \n-@item cleanup-saved-temps\n-Removes files for the current test which were kept for @option{--save-temps}.\n+@item double64plus\n+Target has @code{double} that is 64 bits or longer.\n+\n+@item int32plus\n+Target has @code{int} that is at 32 bits or longer.\n+\n+@item int16\n+Target has @code{int} that is 16 bits or shorter.\n+\n+@item large_double\n+Target supports @code{double} that is longer than @code{float}.\n+\n+@item large_long_double\n+Target supports @code{long double} that is longer than @code{double}.\n+\n+@item ptr32plus\n+Target has pointers that are 32 bits or longer.\n+\n+@item size32plus\n+Target supports array and structure sizes that are 32 bits or longer.\n+\n+@item 4byte_wchar_t\n+Target has @code{wchar_t} that is at least 4 bytes.\n+@end table\n+\n+@subsubsection Fortran-specific attributes\n+\n+@table @code\n+@item fortran_integer_16\n+Target supports Fortran @code{integer} that is 16 bytes or longer.\n+\n+@item fortran_large_int\n+Target supports Fortran @code{integer} kinds larger than @code{integer(8)}.\n+\n+@item fortran_large_real\n+Target supports Fortran @code{real} kinds larger than @code{real(8)}.\n+@end table\n+\n+@subsubsection Vector-specific attributes\n+\n+@table @code\n+@item vect_condition\n+Target supports vector conditional operations.\n+\n+@item vect_double\n+Target supports hardware vectors of @code{double}.\n+\n+@item vect_float\n+Target supports hardware vectors of @code{float}.\n+\n+@item vect_int\n+Target supports hardware vectors of @code{int}.\n+\n+@item vect_int_mult\n+Target supports a vector widening multiplication of @code{short} operands\n+into an @code{int} result, or supports promotion (unpacking) from\n+@code{short} to @code{int} and a non-widening multiplication of @code{int}.\n+\n+@item vect_long\n+Target supports hardware vectors of @code{long}.\n+\n+@item vect_long_long\n+Target supports hardware vectors of @code{long long}.\n+\n+@item vect_aligned_arrays\n+Target aligns arrays to vector alignment boundary.\n+\n+@item vect_hw_misalign\n+Target supports a vector misalign access.\n+\n+@item vect_no_align\n+Target does not support a vector alignment mechanism.\n+\n+@item vect_no_int_max\n+Target does not support a vector max instruction on @code{int}.\n+\n+@item vect_no_int_add\n+Target does not support a vector add instruction on @code{int}.\n+\n+@item vect_no_bitwise\n+Target does not support vector bitwise instructions.\n+\n+@item vect_char_mult\n+Target supports @code{vector char} multiplication.\n+\n+@item vect_short_mult\n+Target supports @code{vector short} multiplication.\n+\n+@item vect_int_mult\n+Target supports @code{vector int} multiplication.\n+\n+@item vect_extract_even_odd\n+Target supports vector even/odd element extraction.\n+\n+@item vect_extract_even_odd_wide\n+Target supports vector even/odd element extraction of vectors with elements\n+@code{SImode} or larger.\n+\n+@item vect_interleave\n+Target supports vector interleaving.\n+\n+@item vect_strided\n+Target supports vector interleaving and extract even/odd.\n+\n+@item vect_strided_wide\n+Target supports vector interleaving and extract even/odd for wide\n+element types.\n+\n+@item vect_perm\n+Target supports vector permutation.\n+\n+@item vect_shift\n+Target supports a hardware vector shift operation.\n+\n+@item vect_widen_sum_hi_to_si\n+Target supports a vector widening summation of @code{short} operands\n+into @code{int} results, or can promote (unpack) from @code{short}\n+to @code{int}.\n+\n+@item vect_widen_sum_qi_to_hi\n+Target supports a vector widening summation of @code{char} operands\n+into @code{short} results, or can promote (unpack) from @code{char}\n+to @code{short}.\n+\n+@item vect_widen_sum_qi_to_si\n+Target supports a vector widening summation of @code{char} operands\n+into @code{int} results.\n+\n+@item vect_widen_mult_qi_to_hi\n+Target supports a vector widening multiplication of @code{char} operands\n+into @code{short} results, or can promote (unpack) from @code{char} to\n+@code{short} and perform non-widening multiplication of @code{short}.\n+\n+@item vect_widen_mult_hi_to_si\n+Target supports a vector widening multiplication of @code{short} operands\n+into @code{int} results, or can promote (unpack) from @code{short} to\n+@code{int} and perform non-widening multiplication of @code{int}.\n+\n+@item vect_sdot_qi\n+Target supports a vector dot-product of @code{signed char}.\n+\n+@item vect_udot_qi\n+Target supports a vector dot-product of @code{unsigned char}.\n+\n+@item vect_sdot_hi\n+Target supports a vector dot-product of @code{signed short}.\n+\n+@item vect_udot_hi\n+Target supports a vector dot-product of @code{unsigned short}.\n+\n+@item vect_pack_trunc\n+Target supports a vector demotion (packing) of @code{short} to @code{char}\n+and from @code{int} to @code{short} using modulo arithmetic.\n+\n+@item vect_unpack\n+Target supports a vector promotion (unpacking) of @code{char} to @code{short}\n+and from @code{char} to @code{int}.\n+\n+@item vect_intfloat_cvt\n+Target supports conversion from @code{signed int} to @code{float}.\n+\n+@item vect_uintfloat_cvt\n+Target supports conversion from @code{unsigned int} to @code{float}.\n+\n+@item vect_floatint_cvt\n+Target supports conversion from @code{float} to @code{signed int}.\n+\n+@item vect_floatuint_cvt\n+Target supports conversion from @code{float} to @code{unsigned int}.\n+@end table\n+\n+@subsubsection Thread Local Storage attributes\n+\n+@table @code\n+@item tls\n+Target supports thread-local storage.\n+\n+@item tls_native\n+Target supports native (rather than emulated) thread-local storage.\n+\n+@item tls_runtime\n+Test system supports executing TLS executables.\n+@end table\n+\n+@subsubsection Decimal floating point attributes\n+\n+@table @code\n+@item dfp\n+Targets supports compiling decimal floating point extension to C.\n+\n+@item dfp_nocache\n+Including the options used to compile this particular test, the\n+target supports compiling decimal floating point extension to C.\n+\n+@item dfprt\n+Test system can execute decimal floating point tests.\n+\n+@item dfprt_nocache\n+Including the options used to compile this particular test, the\n+test system can execute decimal floating point tests.\n+\n+@item hard_dfp\n+Target generates decimal floating point instructions with current options.\n+@end table\n+\n+@subsubsection ARM-specific attributes\n+\n+@table @code\n+@item arm32\n+ARM target generates 32-bit code.\n+\n+@item arm_eabi\n+ARM target adheres to the ABI for the ARM Architecture.\n+\n+@item arm_hard_vfp_ok\n+ARM target supports @code{-mfpu=vfp -mfloat-abi=hard}.\n+Some multilibs may be incompatible with these options.\n+\n+@item arm_iwmmxt_ok\n+ARM target supports @code{-mcpu=iwmmxt}.\n+Some multilibs may be incompatible with this option.\n+\n+@item arm_neon\n+ARM target supports generating NEON instructions.\n+\n+@item arm_neon_hw\n+Test system supports executing NEON instructions.\n+\n+@item arm_neon_ok\n+ARM Target supports @code{-mfpu=neon -mfloat-abi=softfp}.\n+Some multilibs may be incompatible with these options.\n+\n+@item arm_thumb1_ok\n+ARM target generates Thumb-1 code for @code{-mthumb}.\n+\n+@item arm_thumb2_ok\n+ARM target generates Thumb-2 code for @code{-mthumb}.\n+\n+@item arm_vfp_ok\n+ARM target supports @code{-mfpu=vfp -mfloat-abi=softfp}.\n+Some multilibs may be incompatible with these options.\n+@end table\n+\n+@subsubsection MIPS-specific attributes\n+\n+@table @code\n+@item mips64\n+MIPS target supports 64-bit instructions.\n+\n+@item nomips16\n+MIPS target does not produce MIPS16 code.\n+\n+@item mips16_attribute\n+MIPS target can generate MIPS16 code.\n+\n+@item mips_loongson\n+MIPS target is a Loongson-2E or -2F target using an ABI that supports\n+the Loongson vector modes.\n+\n+@item mips_newabi_large_long_double\n+MIPS target supports @code{long double} larger than @code{double}\n+when using the new ABI.\n+\n+@item mpaired_single\n+MIPS target supports @code{-mpaired-single}.\n+@end table\n+\n+@subsubsection PowerPC-specific attributes\n \n+@table @code\n+@item powerpc64\n+Test system supports executing 64-bit instructions.\n+\n+@item powerpc_altivec\n+PowerPC target supports AltiVec.\n+\n+@item powerpc_altivec_ok\n+PowerPC target supports @code{-maltivec}.\n+\n+@item powerpc_fprs\n+PowerPC target supports floating-point registers.\n+\n+@item powerpc_hard_double\n+PowerPC target supports hardware double-precision floating-point.\n+\n+@item powerpc_ppu_ok\n+PowerPC target supports @code{-mcpu=cell}.\n+\n+@item powerpc_spe\n+PowerPC target supports PowerPC SPE.\n+\n+@item powerpc_spe_nocache\n+Including the options used to compile this particular test, the\n+PowerPC target supports PowerPC SPE.\n+\n+@item powerpc_spu\n+PowerPC target supports PowerPC SPU.\n+\n+@item spu_auto_overlay\n+SPU target has toolchain that supports automatic overlay generation.\n+\n+@item powerpc_vsx_ok\n+PowerPC target supports @code{-mvsx}.\n+\n+@item powerpc_405_nocache\n+Including the options used to compile this particular test, the\n+PowerPC target supports PowerPC 405.\n+\n+@item vmx_hw\n+PowerPC target supports executing AltiVec instructions.\n+@end table\n+\n+@subsubsection Other hardware attributes\n+\n+@table @code\n+@item avx\n+Target supports compiling AVX instructions.\n+\n+@item cell_hw\n+Test system can execute AltiVec and Cell PPU instructions.\n+\n+@item coldfire_fpu\n+Target uses a ColdFire FPU.\n+\n+@item hard_float\n+Target supports FPU instructions.\n+\n+@item sync_char_short\n+Target supports atomic operations on @code{char} and @code{short}.\n+\n+@item sync_int_long\n+Target supports atomic operations on @code{int} and @code{long}.\n+\n+@item ultrasparc_hw\n+Test environment appears to run executables on a simulator that\n+accepts only @code{EM_SPARC} executables and chokes on @code{EM_SPARC32PLUS}\n+or @code{EM_SPARCV9} executables.\n+\n+@item vect_cmdline_needed\n+Target requires a command line argument to enable a SIMD instruction set.\n+@end table\n+\n+@subsubsection Environment attributes\n+\n+@table @code\n+@item c\n+The language for the compiler under test is C.\n+\n+@item c++\n+The language for the compiler under test is C++.\n+\n+@item c99_runtime\n+Target provides a full C99 runtime.\n+\n+@item correct_iso_cpp_string_wchar_protos\n+Target @code{string.h} and @code{wchar.h} headers provide C++ required\n+overloads for @code{strchr} etc. functions.\n+\n+@item dummy_wcsftime\n+Target uses a dummy @code{wcsftime} function that always returns zero.\n+\n+@item fd_truncate\n+Target can truncate a file from a file descriptor, as used by\n+@file{libgfortran/io/unix.c:fd_truncate}; i.e. @code{ftruncate} or\n+@code{chsize}.\n+\n+@item freestanding\n+Target is @samp{freestanding} as defined in section 4 of the C99 standard.\n+Effectively, it is a target which supports no extra headers or libraries\n+other than what is considered essential.\n+\n+@item init_priority\n+Target supports constructors with initialization priority arguments.\n+\n+@item inttypes_types\n+Target has the basic signed and unsigned types in @code{inttypes.h}.\n+This is for tests that GCC's notions of these types agree with those\n+in the header, as some systems have only @code{inttypes.h}.\n+\n+@item lax_strtofp\n+Target might have errors of a few ULP in string to floating-point\n+conversion functions and overflow is not always detected correctly by\n+those functions.\n+\n+@item newlib\n+Target supports Newlib.\n+\n+@item pow10\n+Target provides @code{pow10} function.\n+\n+@item pthread\n+Target can compile using @code{pthread.h} with no errors or warnings.\n+\n+@item pthread_h\n+Target has @code{pthread.h}.\n+\n+@item simulator\n+Test system runs executables on a simulator (i.e. slowly) rather than\n+hardware (i.e. fast).\n+\n+@item stdint_types\n+Target has the basic signed and unsigned C types in @code{stdint.h}.\n+This will be obsolete when GCC ensures a working @code{stdint.h} for\n+all targets.\n+\n+@item trampolines\n+Target supports trampolines.\n+\n+@item uclibc\n+Target supports uClibc.\n+\n+@item unwrapped\n+Target does not use a status wrapper.\n+\n+@item vxworks_kernel\n+Target is a VxWorks kernel.\n+\n+@item vxworks_rtp\n+Target is a VxWorks RTP.\n+\n+@item wchar\n+Target supports wide characters.\n+@end table\n+\n+@subsubsection Other attributes\n+\n+@table @code\n+@item automatic_stack_alignment\n+Target supports automatic stack alignment.\n+\n+@item cxa_atexit\n+Target uses @code{__cxa_atexit}.\n+\n+@item default_packed\n+Target has packed layout of structure members by default.\n+\n+@item fgraphite\n+Target supports Graphite optimizations.\n+\n+@item fixed_point\n+Target supports fixed-point extension to C.\n+\n+@item fopenmp\n+Target supports OpenMP via @option{-fopenmp}.\n+\n+@item fpic\n+Target supports @option{-fpic} and @option{-fPIC}.\n+\n+@item freorder\n+Target supports @option{-freorder-blocks-and-partition}.\n+\n+@item fstack_protector\n+Target supports @option{-fstack-protector}.\n+\n+@item gc_sections\n+Target supports @option{--gc-sections}.\n+\n+@item keeps_null_pointer_checks\n+Target keeps null pointer checks, either due to the use of\n+@option{-fno-delete-null-pointer-checks} or hardwired into the target.\n+\n+@item lto\n+Compiler has been configured to support link-time optimization (LTO).\n+\n+@item named_sections\n+Target supports named sections.\n+\n+@item natural_alignment_32\n+Target uses natural alignment (aligned to type size) for types of\n+32 bits or less.\n+\n+@item target_natural_alignment_64\n+Target uses natural alignment (aligned to type size) for types of\n+64 bits or less.\n+\n+@item nonpic\n+Target does not generate PIC by default.\n+\n+@item pcc_bitfield_type_matters\n+Target defines @code{PCC_BITFIELD_TYPE_MATTERS}.\n+\n+@item pe_aligned_commons\n+Target supports @option{-mpe-aligned-commons}.\n+\n+@item section_anchors\n+Target supports section anchors.\n+\n+@item short_enums\n+Target defaults to short enums.\n+\n+@item static\n+Target supports @option{-static}.\n+\n+@item static_libgfortran\n+Target supports statically linking @samp{libgfortran}.\n+\n+@item string_merging\n+Target supports merging string constants at link time.\n+\n+@item ucn\n+Target supports compiling and assembling UCN.\n+\n+@item ucn_nocache\n+Including the options used to compile this particular test, the\n+target supports compiling and assembling UCN.\n+\n+@item unaligned_stack\n+Target does not guarantee that its @code{STACK_BOUNDARY} is greater than\n+or equal to the required vector alignment.\n+\n+@item vector_alignment_reachable\n+Vector alignment is reachable for types of 32 bits or less.\n+\n+@item vector_alignment_reachable_for_64bit\n+Vector alignment is reachable for types of 64 bits or less.\n+\n+@item wchar_t_char16_t_compatible\n+Target supports @code{wchar_t} that is compatible with @code{char16_t}.\n+\n+@item wchar_t_char32_t_compatible\n+Target supports @code{wchar_t} that is compatible with @code{char32_t}.\n+@end table\n+\n+@subsubsection Local to tests in @code{gcc.target/i386}\n+\n+@table @code\n+@item aes\n+Target supports compiling @code{aes} instructions.\n+\n+@item fma4\n+Target supports compiling @code{fma4} instructions.\n+\n+@item ms_hook_prologue\n+Target supports attribute @code{ms_hook_prologue}.\n+\n+@item pclmul\n+Target supports compiling @code{pclmul} instructions.\n+\n+@item sse4\n+Target supports compiling @code{sse4} instructions.\n+\n+@item sse4a\n+Target supports compiling @code{sse4a} instructions.\n+\n+@item ssse3\n+Target supports compiling @code{ssse3} instructions.\n+\n+@item vaes\n+Target supports compiling @code{vaes} instructions.\n+\n+@item vpclmul\n+Target supports compiling @code{vpclmul} instructions.\n+\n+@item xop\n+Target supports compiling @code{xop} instructions.\n+@end table\n+\n+@subsubsection Local to tests in @code{gcc.target/spu/ea}\n+\n+@table @code\n+@item ealib\n+Target @code{__ea} library functions are available.\n+@end table\n+\n+@subsubsection Local to tests in @code{gcc.test-framework}\n+\n+@table @code\n+@item no\n+Always returns 0.\n+\n+@item yes\n+Always returns 1.\n+@end table\n+\n+@node Add Options\n+@subsection Features for @code{dg-add-options}\n+\n+The supported values of @var{feature} for directive @code{dg-add-options}\n+are:\n+\n+@table @code\n+@item bind_pic_locally\n+Add the target-specific flags needed to enable functions to bind\n+locally when using pic/PIC passes in the testsuite.\n+\n+@item c99_runtime\n+Add the target-specific flags needed to access the C99 runtime.\n+\n+@item ieee\n+Add the target-specific flags needed to enable full IEEE\n+compliance mode.\n+\n+@item mips16_attribute\n+@code{mips16} function attributes.\n+Only MIPS targets support this feature, and only then in certain modes.\n+@end table\n+\n+@node Require Support\n+@subsection Variants of @code{dg-require-@var{support}}\n+\n+A few of the @code{dg-require} directives take arguments.\n+\n+@table @code\n+@item dg-require-iconv @var{codeset}\n+Skip the test if the target does not support iconv.  @var{codeset} is\n+the codeset to convert to.\n+\n+@item dg-require-profiling @var{profopt}\n+Skip the test if the target does not support profiling with option\n+@var{profopt}.\n+\n+@item dg-require-visibility @var{vis}\n+Skip the test if the target does not support the @code{visibility} attribute.\n+If @var{vis} is @code{\"\"}, support for @code{visibility(\"hidden\")} is\n+checked, for @code{visibility(\"@var{vis}\")} otherwise.\n+@end table\n+\n+The original @code{dg-require} directives were defined before there\n+was support for effective-target keywords.  The directives that do not\n+take arguments could be replaced with effective-target keywords.\n+\n+@table @code\n+@item dg-require-alias \"\"\n+Skip the test if the target does not support the @samp{alias} attribute.\n+\n+@item dg-require-compat-dfp \"\"\n+Skip this test unless both compilers in a @file{compat} testsuite\n+support decimal floating point.\n+\n+@item dg-require-cxa-atexit \"\"\n+Skip the test if the target does not support @code{__cxa_atexit}.\n+This is equivalent to @code{dg-require-effective-target cxa_atexit}.\n+\n+@item dg-require-dll \"\"\n+Skip the test if the target does not support DLL attributes.\n+\n+@item dg-require-fork \"\"\n+Skip the test if the target does not support @code{fork}.\n+\n+@item dg-require-gc-sections \"\"\n+Skip the test if the target's linker does not support the\n+@code{--gc-sections} flags.\n+This is equivalent to @code{dg-require-effective-target gc-sections}.\n+\n+@item dg-require-host-local \"\"\n+Skip the test if the host is remote, rather than the same as the build\n+system.  Some tests are incompatible with DejaGnu's handling of remote\n+hosts, which involves copying the source file to the host and compiling\n+it with a relative path and \"@code{-o a.out}\".\n+\n+@item dg-require-mkfifo \"\"\n+Skip the test if the target does not support @code{mkfifo}.\n+\n+@item dg-require-named-sections \"\"\n+Skip the test is the target does not support named sections.\n+This is equivalent to @code{dg-require-effective-target named_sections}.\n+\n+@item dg-require-weak \"\"\n+Skip the test if the target does not support weak symbols.\n+\n+@item dg-require-weak-override \"\"\n+Skip the test if the target does not support overriding weak symbols.\n+@end table\n+\n+@node Final Actions\n+@subsection Commands for use in @code{dg-final}\n+\n+The GCC testsuite defines the following directives to be used within\n+@code{dg-final}.\n+\n+@subsubsection Scan a particular file\n+\n+@table @code\n @item scan-file @var{filename} @var{regexp} [@{ target/xfail @var{selector} @}]\n Passes if @var{regexp} matches text in @var{filename}.\n-\n @item scan-file-not @var{filename} @var{regexp} [@{ target/xfail @var{selector} @}]\n Passes if @var{regexp} does not match text in @var{filename}.\n+@item scan-module @var{module} @var{regexp} [@{ target/xfail @var{selector} @}]\n+Passes if @var{regexp} matches in Fortran module @var{module}.\n+@end table\n \n-@item scan-hidden @var{symbol} [@{ target/xfail @var{selector} @}]\n-Passes if @var{symbol} is defined as a hidden symbol in the test's\n-assembly output.\n-\n-@item scan-not-hidden @var{symbol} [@{ target/xfail @var{selector} @}]\n-Passes if @var{symbol} is not defined as a hidden symbol in the test's\n-assembly output.\n-\n-@item scan-assembler-times @var{regex} @var{num} [@{ target/xfail @var{selector} @}]\n-Passes if @var{regex} is matched exactly @var{num} times in the test's\n-assembler output.\n+@subsubsection Scan the assembly output\n \n+@table @code\n @item scan-assembler @var{regex} [@{ target/xfail @var{selector} @}]\n Passes if @var{regex} matches text in the test's assembler output.\n \n @item scan-assembler-not @var{regex} [@{ target/xfail @var{selector} @}]\n Passes if @var{regex} does not match text in the test's assembler output.\n \n+@item scan-assembler-times @var{regex} @var{num} [@{ target/xfail @var{selector} @}]\n+Passes if @var{regex} is matched exactly @var{num} times in the test's\n+assembler output.\n+\n @item scan-assembler-dem @var{regex} [@{ target/xfail @var{selector} @}]\n Passes if @var{regex} matches text in the test's demangled assembler output.\n \n @item scan-assembler-dem-not @var{regex} [@{ target/xfail @var{selector} @}]\n Passes if @var{regex} does not match text in the test's demangled assembler\n output.\n \n-@item scan-tree-dump-times @var{regex} @var{num} @var{suffix} [@{ target/xfail @var{selector} @}]\n-Passes if @var{regex} is found exactly @var{num} times in the dump file\n-with suffix @var{suffix}.\n+@item scan-hidden @var{symbol} [@{ target/xfail @var{selector} @}]\n+Passes if @var{symbol} is defined as a hidden symbol in the test's\n+assembly output.\n+\n+@item scan-not-hidden @var{symbol} [@{ target/xfail @var{selector} @}]\n+Passes if @var{symbol} is not defined as a hidden symbol in the test's\n+assembly output.\n+@end table\n+\n+@subsubsection Scan optimization dump files\n \n-@item scan-tree-dump @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]\n+These commands are available for @var{kind} of @code{tree}, @code{rtl},\n+and @code{ipa}.\n+\n+@table @code\n+@item scan-@var{kind}-dump @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]\n Passes if @var{regex} matches text in the dump file with suffix @var{suffix}.\n \n-@item scan-tree-dump-not @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]\n+@item scan-@var{kind}-dump-not @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]\n Passes if @var{regex} does not match text in the dump file with suffix\n @var{suffix}.\n \n-@item scan-tree-dump-dem @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]\n+@item scan-@var{kind}-dump-times @var{regex} @var{num} @var{suffix} [@{ target/xfail @var{selector} @}]\n+Passes if @var{regex} is found exactly @var{num} times in the dump file\n+with suffix @var{suffix}.\n+\n+@item scan-@var{kind}-dump-dem @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]\n Passes if @var{regex} matches demangled text in the dump file with\n suffix @var{suffix}.\n \n-@item scan-tree-dump-dem-not @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]\n+@item scan-@var{kind}-dump-dem-not @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]\n Passes if @var{regex} does not match demangled text in the dump file with\n suffix @var{suffix}.\n+@end table\n+\n+@subsubsection Verify that an output files exists or not\n \n+@table @code\n @item output-exists [@{ target/xfail @var{selector} @}]\n Passes if compiler output file exists.\n \n @item output-exists-not [@{ target/xfail @var{selector} @}]\n Passes if compiler output file does not exist.\n+@end table\n+\n+@subsubsection Check for LTO tests\n+\n+@table @code\n+@item scan-symbol @var{regexp} [@{ target/xfail @var{selector} @}]\n+Passes if the pattern is present in the final executable.\n+@end table\n \n+@subsubsection Checks for @command{gcov} tests\n+\n+@table @code\n @item run-gcov @var{sourcefile}\n Check line counts in @command{gcov} tests.\n \n @item run-gcov [branches] [calls] @{ @var{opts} @var{sourcefile} @}\n Check branch and/or call counts, in addition to line counts, in\n @command{gcov} tests.\n @end table\n+\n+@subsubsection Clean up generated test files\n+\n+@table @code\n+@item cleanup-coverage-files\n+Removes coverage data files generated for this test.\n+\n+@item cleanup-ipa-dump @var{suffix}\n+Removes IPA dump files generated for this test.\n+\n+@item cleanup-modules\n+Removes Fortran module files generated for this test.\n+\n+@item cleanup-profile-file\n+Removes profiling files generated for this test.\n+\n+@item cleanup-repo-files\n+Removes files generated for this test for @option{-frepo}.\n+\n+@item cleanup-rtl-dump @var{suffix}\n+Removes RTL dump files generated for this test.\n+\n+@item cleanup-saved-temps\n+Removes files for the current test which were kept for @option{-save-temps}.\n+\n+@item cleanup-tree-dump @var{suffix}\n+Removes tree dump files matching @var{suffix} which were generated for\n+this test.\n @end table\n \n @node Ada Tests\n@@ -1244,7 +2044,7 @@ testsuite, publicly available at\n @uref{http://www.adaic.org/compilers/acats/2.5}.\n \n These tests are integrated in the GCC testsuite in the\n-@file{gcc/testsuite/ada/acats} directory, and\n+@file{ada/acats} directory, and\n enabled automatically when running @code{make check}, assuming\n the Ada language has been enabled when configuring GCC@.\n \n@@ -1431,6 +2231,12 @@ Unlike @code{dg-do}, @code{dg-lto-do} does not support an optional\n This directive provides a list of one or more sets of compiler options\n to override @var{LTO_OPTIONS}.  Each test will be compiled and run with\n each of these sets of options.\n+\n+@item @{ dg-extra-ld-options @var{options} @}\n+This directive adds @var{options} to the linker options used.\n+\n+@item @{ dg-suppress-ld-options @var{options} @}\n+This directive removes @var{options} from the set of linker options used.\n @end table\n \n @node gcov Testing\n@@ -1536,6 +2342,14 @@ suffix of profile data files\n @item PROFOPT_OPTIONS\n list of options with which to run each test, similar to the lists for\n torture tests\n+\n+@item @{ dg-final-generate @{ @var{local-directive} @} @}\n+This directive is similar to @code{dg-final}, but the\n+@var{local-directive} is run after the generation of profile data.\n+\n+@item @{ dg-final-use @{ @var{local-directive} @} @}\n+The @var{local-directive} is run after the profile data have been\n+used.\n @end table\n \n @node compat Testing"}]}