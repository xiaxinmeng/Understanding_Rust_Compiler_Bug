{"sha": "48e21e878b2c6cfc7797088a7393a735de75883c", "node_id": "C_kwDOANBUbNoAKDQ4ZTIxZTg3OGIyYzZjZmM3Nzk3MDg4YTczOTNhNzM1ZGU3NTg4M2M", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-05T12:23:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-06T21:33:29Z"}, "message": "libstdc++: The Trouble with Tribbles\n\nFix digit grouping for integers formatted with \"{:#Lx}\" which were\nincluding the \"0x\" prefix in the grouped digits. This resulted in output\nlike \"0,xff,fff\" instead of \"0xff,fff\".\n\nAlso change std:::basic_format_parse_context to not throw for an arg-id\nthat is larger than the actual number of format arguments. I clarified\nwith Victor Zverovich that this is the intended behaviour for the\nrun-time format-string checks. An out-of-range arg-id should be\ndiagnosed at compile-time (as clarified by LWG 3825) but not run-time.\nThe formatting function will still throw at run-time when args.arg(id)\nreturns an empty basic_format_arg.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/format (basic_format_parse_context::next_arg_id):\n\tOnly check arg-id is in range during constant evaluation.\n\t* testsuite/std/format/functions/format.cc: Check \"{:#Lx}\".\n\t* testsuite/std/format/parse_ctx.cc: Adjust expected results for\n\tformat-strings using an out-of-range arg-id.", "tree": {"sha": "a9cf68c07d14eccf8aaa5f6a1a5d0ea724dc64a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9cf68c07d14eccf8aaa5f6a1a5d0ea724dc64a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48e21e878b2c6cfc7797088a7393a735de75883c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e21e878b2c6cfc7797088a7393a735de75883c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48e21e878b2c6cfc7797088a7393a735de75883c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e21e878b2c6cfc7797088a7393a735de75883c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba1536dac780f3f92c5eab999fda6931f6247fc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba1536dac780f3f92c5eab999fda6931f6247fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba1536dac780f3f92c5eab999fda6931f6247fc1"}], "stats": {"total": 78, "additions": 40, "deletions": 38}, "files": [{"sha": "6d6a770eb8cafe9a73775094b6cb2ca7fcb5069f", "filename": "libstdc++-v3/include/std/format", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e21e878b2c6cfc7797088a7393a735de75883c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e21e878b2c6cfc7797088a7393a735de75883c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat?ref=48e21e878b2c6cfc7797088a7393a735de75883c", "patch": "@@ -221,7 +221,10 @@ namespace __format\n \tif (_M_indexing == _Manual)\n \t  __format::__conflicting_indexing_in_format_string();\n \t_M_indexing = _Auto;\n-\t// if (std::is_constant_evaluated()) // XXX skip runtime check?\n+\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 3825. Missing compile-time argument id check in next_arg_id\n+\tif (std::is_constant_evaluated())\n \t  if (_M_next_arg_id == _M_num_args)\n \t    __format::__invalid_arg_id_in_format_string();\n \treturn _M_next_arg_id++;\n@@ -234,7 +237,7 @@ namespace __format\n \t  __format::__conflicting_indexing_in_format_string();\n \t_M_indexing = _Manual;\n \n-\t// if (std::is_constant_evaluated()) // XXX skip runtime check?\n+\tif (std::is_constant_evaluated())\n \t  if (__id >= _M_num_args)\n \t    __format::__invalid_arg_id_in_format_string();\n       }\n@@ -1167,15 +1170,18 @@ namespace __format\n \t\t  string __grp = __np.grouping();\n \t\t  if (!__grp.empty())\n \t\t    {\n-\t\t      size_t __n = __str.size();\n+\t\t      size_t __n = __str.size() - __prefix_len;\n \t\t      auto __p = (_CharT*)__builtin_alloca(2 * __n\n-\t\t\t\t\t\t\t     * sizeof(_CharT));\n-\t\t      auto __end = std::__add_grouping(__p,\n+\t\t\t\t\t\t\t     * sizeof(_CharT)\n+\t\t\t\t\t\t\t     + __prefix_len);\n+\t\t      auto __s = __str.data();\n+\t\t      char_traits<_CharT>::copy(__p, __s, __prefix_len);\n+\t\t      __s += __prefix_len;\n+\t\t      auto __end = std::__add_grouping(__p + __prefix_len,\n \t\t\t\t\t\t       __np.thousands_sep(),\n \t\t\t\t\t\t       __grp.data(),\n \t\t\t\t\t\t       __grp.size(),\n-\t\t\t\t\t\t       __str.data(),\n-\t\t\t\t\t\t       __str.data() + __n);\n+\t\t\t\t\t\t       __s, __s + __n);\n \t\t      __str = {__p, size_t(__end - __p)};\n \t\t    }\n \t\t}\n@@ -3381,10 +3387,11 @@ namespace __format\n       __ctx.advance_to(__format::__write(__ctx.out()));\n     }\n \n-  // TODO define __process_format_string which takes an object with callbacks\n-  // can use that for initial constexpr parse of format string (with callbacks\n-  // that have no side effects, just non-constant on error).\n-\n+  // Abstract base class defining an interface for scanning format strings.\n+  // Scan the characters in a format string, dividing it up into strings of\n+  // ordinary characters, escape sequences, and replacement fields.\n+  // Call virtual functions for derived classes to parse format-specifiers\n+  // or write formatted output.\n   template<typename _CharT>\n     struct _Scanner\n     {"}, {"sha": "7a155208a4858d809857ec16f9c37d33e4a0efa0", "filename": "libstdc++-v3/testsuite/std/format/functions/format.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e21e878b2c6cfc7797088a7393a735de75883c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Ffunctions%2Fformat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e21e878b2c6cfc7797088a7393a735de75883c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Ffunctions%2Fformat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Ffunctions%2Fformat.cc?ref=48e21e878b2c6cfc7797088a7393a735de75883c", "patch": "@@ -111,6 +111,10 @@ test_std_examples()\n     string s3 = format(\"{:L}\", 1234);\n     VERIFY(s3 == \"1,234\");\n \n+    // Test locale's \"byte-and-a-half\" grouping (Imperial word? tribble?).\n+    string s4 = format(\"{:#Lx}\", 0xfffff);\n+    VERIFY(s4 == \"0xff,fff\");\n+\n     // Restore\n     std::locale::global(std::locale::classic());\n   }"}, {"sha": "069dfceced588f7bd3f557786f2774d74387ac64", "filename": "libstdc++-v3/testsuite/std/format/parse_ctx.cc", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e21e878b2c6cfc7797088a7393a735de75883c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Fparse_ctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e21e878b2c6cfc7797088a7393a735de75883c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Fparse_ctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Fparse_ctx.cc?ref=48e21e878b2c6cfc7797088a7393a735de75883c", "patch": "@@ -4,11 +4,11 @@\n #include <format>\n #include <testsuite_hooks.h>\n \n-template<typename T, size_t N = 1, bool auto_indexing = true>\n+template<typename T, bool auto_indexing = true>\n bool\n is_std_format_spec_for(std::string_view spec)\n {\n-  std::format_parse_context pc(spec, N);\n+  std::format_parse_context pc(spec);\n   if (auto_indexing)\n     (void) pc.next_arg_id();\n   else\n@@ -49,11 +49,9 @@ test_char()\n   VERIFY( ! is_std_format_spec_for<char>(\"0\") );\n   VERIFY( ! is_std_format_spec_for<char>(\"00d\") );\n   VERIFY( is_std_format_spec_for<char>(\"01d\") );\n-  VERIFY( ! is_std_format_spec_for<char>(\"0{}d\") );\n+  VERIFY( is_std_format_spec_for<char>(\"0{}d\") );\n   VERIFY( ! is_std_format_spec_for<char>(\"0{1}d\") );\n-  VERIFY(( is_std_format_spec_for<char, 2>(\"0{}d\") ));\n-  VERIFY(( ! is_std_format_spec_for<char, 2>(\"0{1}d\") ));\n-  VERIFY(( is_std_format_spec_for<char, 2, false>(\"0{1}d\") ));\n+  VERIFY(( is_std_format_spec_for<char, false>(\"0{1}d\") ));\n   VERIFY( is_std_format_spec_for<char>(\"1\") );\n   VERIFY( ! is_std_format_spec_for<char>(\"-1\") );\n   VERIFY( is_std_format_spec_for<char>(\"-1d\") ); // sign and width\n@@ -98,11 +96,10 @@ test_int()\n   VERIFY( is_std_format_spec_for<int>(\"0\") );\n   VERIFY( ! is_std_format_spec_for<int>(\"00d\") );\n   VERIFY( is_std_format_spec_for<int>(\"01d\") );\n-  VERIFY( ! is_std_format_spec_for<int>(\"0{}d\") );\n   VERIFY( ! is_std_format_spec_for<int>(\"0{1}d\") );\n-  VERIFY(( is_std_format_spec_for<int, 2>(\"0{}d\") ));\n-  VERIFY(( ! is_std_format_spec_for<int, 2>(\"0{1}d\") ));\n-  VERIFY(( is_std_format_spec_for<int, 2, false>(\"0{1}d\") ));\n+  VERIFY(( is_std_format_spec_for<int>(\"0{}d\") ));\n+  VERIFY(( ! is_std_format_spec_for<int>(\"0{1}d\") ));\n+  VERIFY(( is_std_format_spec_for<int, false>(\"0{1}d\") ));\n   VERIFY( is_std_format_spec_for<int>(\"1\") );\n   VERIFY( is_std_format_spec_for<int>(\"-1\") ); // sign and width\n   VERIFY( ! is_std_format_spec_for<int>(\".\") );\n@@ -193,24 +190,20 @@ test_float()\n   VERIFY( is_std_format_spec_for<float>(\"0\") );\n   VERIFY( ! is_std_format_spec_for<float>(\"00f\") );\n   VERIFY( is_std_format_spec_for<float>(\"01f\") );\n-  VERIFY( ! is_std_format_spec_for<float>(\"0{}f\") );\n+  VERIFY( is_std_format_spec_for<float>(\"0{}f\") );\n   VERIFY( ! is_std_format_spec_for<float>(\"0{1}f\") );\n-  VERIFY(( is_std_format_spec_for<float, 2>(\"0{}f\") ));\n-  VERIFY(( ! is_std_format_spec_for<float, 2>(\"0{1}f\") ));\n-  VERIFY(( is_std_format_spec_for<float, 2, false>(\"0{1}f\") ));\n+  VERIFY( ! is_std_format_spec_for<float>(\"0{1}f\") );\n+  VERIFY(( is_std_format_spec_for<float, false>(\"0{1}f\") ));\n   VERIFY( is_std_format_spec_for<float>(\"1\") );\n   VERIFY( is_std_format_spec_for<float>(\"-1\") ); // sign and width\n   VERIFY( ! is_std_format_spec_for<float>(\".\") );\n   VERIFY( is_std_format_spec_for<float>(\".1\") );\n-  VERIFY( ! is_std_format_spec_for<float>(\".{}\") );\n+  VERIFY( is_std_format_spec_for<float>(\".{}\") );\n   VERIFY( ! is_std_format_spec_for<float>(\".{1}\") );\n-  VERIFY(( is_std_format_spec_for<float, 2>(\".{}\") ));\n-  VERIFY(( ! is_std_format_spec_for<float, 2>(\".{1}\") ));\n-  VERIFY(( is_std_format_spec_for<float, 2, false>(\".{1}\") ));\n-  VERIFY(( ! is_std_format_spec_for<float, 2>(\"{}.{}\") ));\n-  VERIFY(( is_std_format_spec_for<float, 3>(\"{}.{}\") ));\n-  VERIFY(( is_std_format_spec_for<float, 2, false>(\"{1}.{1}\") ));\n-  VERIFY(( is_std_format_spec_for<float, 3, false>(\"{2}.{1}\") ));\n+  VERIFY(( is_std_format_spec_for<float, false>(\".{1}\") ));\n+  VERIFY( is_std_format_spec_for<float>(\"{}.{}\") );\n+  VERIFY(( is_std_format_spec_for<float, false>(\"{1}.{1}\") ));\n+  VERIFY(( is_std_format_spec_for<float, false>(\"{2}.{1}\") ));\n   VERIFY( ! is_std_format_spec_for<float>(\"c\") );\n   VERIFY( ! is_std_format_spec_for<float>(\"b\") );\n   VERIFY( ! is_std_format_spec_for<float>(\"B\") );\n@@ -302,11 +295,9 @@ test_string()\n   VERIFY( ! is_std_format_spec_for<const char*>(\"-1s\") );\n   VERIFY( ! is_std_format_spec_for<const char*>(\".\") );\n   VERIFY( is_std_format_spec_for<const char*>(\".1\") );\n-  VERIFY( ! is_std_format_spec_for<const char*>(\".{}\") );\n-  VERIFY(( ! is_std_format_spec_for<const char*, 1, false>(\".{1}\") ));\n-  VERIFY(( is_std_format_spec_for<const char*, 1, false>(\".{0}\") ));\n-  VERIFY(( is_std_format_spec_for<const char*, 2>(\".{}\") ));\n-  VERIFY(( is_std_format_spec_for<const char*, 2, false>(\".{1}\") ));\n+  VERIFY( is_std_format_spec_for<const char*>(\".{}\") );\n+  VERIFY(( is_std_format_spec_for<const char*, false>(\".{0}\") ));\n+  VERIFY(( is_std_format_spec_for<const char*, false>(\".{1}\") ));\n   VERIFY( ! is_std_format_spec_for<const char*>(\"c\") );\n   VERIFY( ! is_std_format_spec_for<const char*>(\"b\") );\n   VERIFY( ! is_std_format_spec_for<const char*>(\"B\") );"}]}