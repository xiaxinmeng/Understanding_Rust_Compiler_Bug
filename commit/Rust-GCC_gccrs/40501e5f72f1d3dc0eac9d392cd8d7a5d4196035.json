{"sha": "40501e5f72f1d3dc0eac9d392cd8d7a5d4196035", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA1MDFlNWY3MmYxZDNkYzBlYWM5ZDM5MmNkOGQ3YTVkNDE5NjAzNQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2001-09-20T02:35:00Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2001-09-20T02:35:00Z"}, "message": "revert: rs6000.c (logical_operand): CONST_INTs are already sign-extended.\n\n2001-09-19  Alan Modra  <amodra@bigpond.net.au>\n            David Edelsohn  <edelsohn@gnu.org>\n\n        Revert:\n        * config/rs6000/rs6000.c (logical_operand): CONST_INTs are\n        already sign-extended.\n\n        * config/rs6000/aix.h (INIT_TARGET_OPTABS): Define TFmode handlers.\n        * config/rs6000/rs6000.c (logical_operand): Streamline comparison\n        with HOST_WIDE_INT.\n        (rs6000_emit_set_long_const): Avoid unnecessary shift.\n        (output_profile_hook): Declare label_name const.\n        * config/rs6000/rs6000.md (boolcsi3, boolcdi3): Change predicates\n        to match constraints.\n\nCo-Authored-By: David Edelsohn <edelsohn@gnu.org>\n\nFrom-SVN: r45699", "tree": {"sha": "7111ceeada09720a99749ab721caffa5486a8fd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7111ceeada09720a99749ab721caffa5486a8fd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40501e5f72f1d3dc0eac9d392cd8d7a5d4196035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40501e5f72f1d3dc0eac9d392cd8d7a5d4196035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40501e5f72f1d3dc0eac9d392cd8d7a5d4196035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40501e5f72f1d3dc0eac9d392cd8d7a5d4196035/comments", "author": null, "committer": null, "parents": [{"sha": "e3aafbad8771a52e23ca48f58c7d2ad35381be31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3aafbad8771a52e23ca48f58c7d2ad35381be31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3aafbad8771a52e23ca48f58c7d2ad35381be31"}], "stats": {"total": 83, "additions": 57, "deletions": 26}, "files": [{"sha": "0d6f11fb25e36a7f1d079e1b6908d108c9d17db8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40501e5f72f1d3dc0eac9d392cd8d7a5d4196035/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40501e5f72f1d3dc0eac9d392cd8d7a5d4196035/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40501e5f72f1d3dc0eac9d392cd8d7a5d4196035", "patch": "@@ -1,3 +1,18 @@\n+2001-09-19  Alan Modra  <amodra@bigpond.net.au>\n+\t    David Edelsohn  <edelsohn@gnu.org>\n+\n+\tRevert:\n+\t* config/rs6000/rs6000.c (logical_operand): CONST_INTs are\n+\talready sign-extended.\n+\n+\t* config/rs6000/aix.h (INIT_TARGET_OPTABS): Define TFmode handlers.\n+\t* config/rs6000/rs6000.c (logical_operand): Always compare op as\n+\tHOST_WIDE_INT.\n+\t(rs6000_emit_set_long_const): Avoid unnecessary shift.\n+\t(output_profile_hook): Declare label_name const.\n+\t* config/rs6000/rs6000.md (boolcsi3, boolcdi3): Change predicates\n+\tto match constraints.\n+\n 2001-09-19  Stan Shebs  <shebs@apple.com>\n \n \t* alias.c: Fix typos in comments."}, {"sha": "d807ee2a9db293336e38e1d9319683e4e540ad3d", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40501e5f72f1d3dc0eac9d392cd8d7a5d4196035/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40501e5f72f1d3dc0eac9d392cd8d7a5d4196035/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=40501e5f72f1d3dc0eac9d392cd8d7a5d4196035", "patch": "@@ -146,15 +146,31 @@ Boston, MA 02111-1307, USA.  */\n /* Define cutoff for using external functions to save floating point.  */\n #define FP_SAVE_INLINE(FIRST_REG) ((FIRST_REG) == 62 || (FIRST_REG) == 63)\n \n-/* Optabs entries for the int->float routines, using the standard\n-   AIX names.  */\n+/* Optabs entries for the int->float routines and quad FP operations\n+   using the standard AIX names.  */\n+#define ADDTF3_LIBCALL \"_xlqadd\"\n+#define DIVTF3_LIBCALL \"_xlqdiv\"\n+#define MULTF3_LIBCALL \"_xlqmul\"\n+#define SUBTF3_LIBCALL \"_xlqsub\"\n+\n #define INIT_TARGET_OPTABS\t\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (! TARGET_POWER2 && ! TARGET_POWERPC && TARGET_HARD_FLOAT)\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tfixdfsi_libfunc = init_one_libfunc (RS6000_ITRUNC);\t\t\\\n \tfixunsdfsi_libfunc = init_one_libfunc (RS6000_UITRUNC);\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n+    if (TARGET_HARD_FLOAT)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tadd_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n+\t  = init_one_libfunc (ADDTF3_LIBCALL);\t\t\t\t\\\n+\tsub_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n+\t  = init_one_libfunc (SUBTF3_LIBCALL);\t\t\t\t\\\n+\tsmul_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n+\t  = init_one_libfunc (MULTF3_LIBCALL);\t\t\t\t\\\n+\tsdiv_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n+\t  = init_one_libfunc (DIVTF3_LIBCALL);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n \n /* AIX always has a TOC.  */"}, {"sha": "c1b1f71152dbdaf918e9015b584fac30476d7092", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40501e5f72f1d3dc0eac9d392cd8d7a5d4196035/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40501e5f72f1d3dc0eac9d392cd8d7a5d4196035/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=40501e5f72f1d3dc0eac9d392cd8d7a5d4196035", "patch": "@@ -1104,36 +1104,35 @@ logical_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode;\n {\n-  /* an unsigned representation of 'op'.  */\n-  unsigned HOST_WIDE_INT opl, oph;\n+  HOST_WIDE_INT opl, oph;\n \n   if (gpc_reg_operand (op, mode))\n     return 1;\n \n   if (GET_CODE (op) == CONST_INT)\n-    opl = INTVAL (op);\n+    {\n+      opl = INTVAL (op) & GET_MODE_MASK (mode);\n+\n+#if HOST_BITS_PER_WIDE_INT <= 32\n+      if (GET_MODE_BITSIZE (mode) > HOST_BITS_PER_WIDE_INT && opl < 0)\n+\treturn 0;\n+#endif\n+    }\n   else if (GET_CODE (op) == CONST_DOUBLE)\n     {\n       if (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n-\tabort();\n+\tabort ();\n \n       opl = CONST_DOUBLE_LOW (op);\n       oph = CONST_DOUBLE_HIGH (op);\n-\n-      if (oph != ((unsigned HOST_WIDE_INT)0\n-\t\t  - ((opl & ((unsigned HOST_WIDE_INT)1\n-\t\t\t     << (HOST_BITS_PER_WIDE_INT - 1))) != 0)))\n+      if (oph != 0)\n \treturn 0;\n     }\n   else\n     return 0;\n \n-  /* This must really be SImode, not MODE.  */\n-  if (opl != (unsigned HOST_WIDE_INT) trunc_int_for_mode (opl, SImode))\n-    return 0;\n-\n-  return ((opl & 0xffff) == 0\n-\t  || (opl & ~ (unsigned HOST_WIDE_INT) 0xffff) == 0);\n+  return ((opl & ~ (unsigned HOST_WIDE_INT) 0xffff) == 0\n+\t  || (opl & ~ (unsigned HOST_WIDE_INT) 0xffff0000) == 0);\n }\n \n /* Return 1 if C is a constant that is not a logical operand (as\n@@ -1740,23 +1739,24 @@ rs6000_emit_set_long_const (dest, c1, c2)\n #endif\n \n       /* Construct the high word */\n-      if (d4)\n+      if (d4 != 0)\n \t{\n \t  emit_move_insn (dest, GEN_INT (d4));\n-\t  if (d3)\n+\t  if (d3 != 0)\n \t    emit_move_insn (dest,\n \t\t\t    gen_rtx_PLUS (DImode, dest, GEN_INT (d3)));\n \t}\n       else\n \temit_move_insn (dest, GEN_INT (d3));\n \n       /* Shift it into place */\n-      emit_move_insn (dest, gen_rtx_ASHIFT (DImode, dest, GEN_INT (32)));\n+      if (d3 != 0 || d4 != 0)\n+\temit_move_insn (dest, gen_rtx_ASHIFT (DImode, dest, GEN_INT (32)));\n \n       /* Add in the low bits.  */\n-      if (d2)\n+      if (d2 != 0)\n \temit_move_insn (dest, gen_rtx_PLUS (DImode, dest, GEN_INT (d2)));\n-      if (d1)\n+      if (d1 != 0)\n \temit_move_insn (dest, gen_rtx_PLUS (DImode, dest, GEN_INT (d1)));\n     }\n \n@@ -7834,7 +7834,7 @@ output_profile_hook (labelno)\n   if (DEFAULT_ABI == ABI_AIX)\n     {\n       char buf[30];\n-      char *label_name;\n+      const char *label_name;\n       rtx fun;\n \n       labelno += 1;"}, {"sha": "34781f573f73a046f7b28daab9e5a20b222bc9a6", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40501e5f72f1d3dc0eac9d392cd8d7a5d4196035/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40501e5f72f1d3dc0eac9d392cd8d7a5d4196035/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=40501e5f72f1d3dc0eac9d392cd8d7a5d4196035", "patch": "@@ -2804,7 +2804,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(match_operator:SI 3 \"boolean_operator\"\n \t [(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t  (match_operand:SI 2 \"logical_operand\" \"r\")]))]\n+\t  (match_operand:SI 2 \"gpc_reg_operand\" \"r\")]))]\n   \"\"\n   \"%q3 %0,%2,%1\")\n \n@@ -2870,7 +2870,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(match_operator:SI 3 \"boolean_operator\"\n \t [(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t  (not:SI (match_operand:SI 2 \"logical_operand\" \"r\"))]))]\n+\t  (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))]))]\n   \"\"\n   \"%q3 %0,%1,%2\")\n \n@@ -7129,7 +7129,7 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(match_operator:DI 3 \"boolean_operator\"\n \t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\"))\n-\t  (match_operand:DI 2 \"logical_operand\" \"r\")]))]\n+\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r\")]))]\n   \"TARGET_POWERPC64\"\n   \"%q3 %0,%2,%1\")\n \n@@ -7195,7 +7195,7 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(match_operator:DI 3 \"boolean_operator\"\n \t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\"))\n-\t  (not:DI (match_operand:DI 2 \"logical_operand\" \"r\"))]))]\n+\t  (not:DI (match_operand:DI 2 \"gpc_reg_operand\" \"r\"))]))]\n   \"TARGET_POWERPC64\"\n   \"%q3 %0,%1,%2\")\n "}]}