{"sha": "730814edc8b3c1bc872c54a39064ac59e2b8fdbd", "node_id": "C_kwDOANBUbNoAKDczMDgxNGVkYzhiM2MxYmM4NzJjNTRhMzkwNjRhYzU5ZTJiOGZkYmQ", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2022-06-30T16:20:52Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-13T10:01:14Z"}, "message": "[Ada] Fix CodePeer warnings in GNAT sources\n\nThis patch fixes various redundant constructs or uninitialized variables\nidentified by CodePeer in the GNAT frontend and runtime sources.\n\ngcc/ada/\n\n\t* exp_ch6.adb (Expand_N_Extended_Return_Statement): Add default\n\tinitialization for Stmts.\n\t* sem_ch12.adb (Analyze_Associations): Add default\n\tinitialization for Match.\n\t* libgnat/a-ztenau.adb (Scan_Enum_Lit): Remove duplicated\n\tboolean test.\n\t* libgnat/g-spipat.adb (XMatch): Combine duplicated cases.", "tree": {"sha": "4859c335942d87468bdec8679958832794858693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4859c335942d87468bdec8679958832794858693"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/730814edc8b3c1bc872c54a39064ac59e2b8fdbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730814edc8b3c1bc872c54a39064ac59e2b8fdbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/730814edc8b3c1bc872c54a39064ac59e2b8fdbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730814edc8b3c1bc872c54a39064ac59e2b8fdbd/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d73dfb5e6f60030bb0809266fb9c639eb60fa11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d73dfb5e6f60030bb0809266fb9c639eb60fa11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d73dfb5e6f60030bb0809266fb9c639eb60fa11"}], "stats": {"total": 134, "additions": 17, "deletions": 117}, "files": [{"sha": "fad130da350f74983617b67bfe4bc8f4f609075b", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730814edc8b3c1bc872c54a39064ac59e2b8fdbd/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730814edc8b3c1bc872c54a39064ac59e2b8fdbd/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=730814edc8b3c1bc872c54a39064ac59e2b8fdbd", "patch": "@@ -5175,7 +5175,7 @@ package body Exp_Ch6 is\n       Exp         : Node_Id;\n       HSS         : Node_Id;\n       Result      : Node_Id;\n-      Stmts       : List_Id;\n+      Stmts       : List_Id := No_List;\n \n       Return_Stmt : Node_Id := Empty;\n       --  Force initialization to facilitate static analysis"}, {"sha": "d66e547c50161642ca78b7fdba2b06976bdb8523", "filename": "gcc/ada/libgnat/a-ztenau.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730814edc8b3c1bc872c54a39064ac59e2b8fdbd/gcc%2Fada%2Flibgnat%2Fa-ztenau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730814edc8b3c1bc872c54a39064ac59e2b8fdbd/gcc%2Fada%2Flibgnat%2Fa-ztenau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ztenau.adb?ref=730814edc8b3c1bc872c54a39064ac59e2b8fdbd", "patch": "@@ -303,8 +303,6 @@ package body Ada.Wide_Wide_Text_IO.Enumeration_Aux is\n \n             exit when\n               Is_Character (WC)\n-                and then\n-                  not Is_Letter (To_Character (WC))\n                 and then\n                   not Is_Letter (To_Character (WC))\n                 and then"}, {"sha": "9fb55bc47ed1ed36ad92a281746e724d6bf97778", "filename": "gcc/ada/libgnat/g-spipat.adb", "status": "modified", "additions": 15, "deletions": 113, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730814edc8b3c1bc872c54a39064ac59e2b8fdbd/gcc%2Fada%2Flibgnat%2Fg-spipat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730814edc8b3c1bc872c54a39064ac59e2b8fdbd/gcc%2Fada%2Flibgnat%2Fg-spipat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-spipat.adb?ref=730814edc8b3c1bc872c54a39064ac59e2b8fdbd", "patch": "@@ -3961,7 +3961,7 @@ package body GNAT.Spitbol.Patterns is\n \n          --  Any (one character case)\n \n-         when PC_Any_CH =>\n+         when PC_Any_CH | PC_Char =>\n             if Cursor < Length\n               and then Subject (Cursor + 1) = Node.Char\n             then\n@@ -4103,9 +4103,10 @@ package body GNAT.Spitbol.Patterns is\n             Pop_Region;\n             goto Succeed;\n \n-         --  Assign on match. This node sets up for the eventual assignment\n+         --  Write/assign on match. This node sets up for the eventual write\n+         --  or assignment.\n \n-         when PC_Assign_OnM =>\n+         when PC_Assign_OnM | PC_Write_OnM =>\n             Stack (Stack_Base - 1).Node := Node;\n             Push (CP_Assign'Access);\n             Pop_Region;\n@@ -4144,9 +4145,9 @@ package body GNAT.Spitbol.Patterns is\n             Push (Node);\n             goto Succeed;\n \n-         --  Break (one character case)\n+         --  Break & BreakX (one character case)\n \n-         when PC_Break_CH =>\n+         when PC_Break_CH | PC_BreakX_CH =>\n             while Cursor < Length loop\n                if Subject (Cursor + 1) = Node.Char then\n                   goto Succeed;\n@@ -4157,9 +4158,9 @@ package body GNAT.Spitbol.Patterns is\n \n             goto Fail;\n \n-         --  Break (character set case)\n+         --  Break & BreakX (character set case)\n \n-         when PC_Break_CS =>\n+         when PC_Break_CS | PC_BreakX_CS =>\n             while Cursor < Length loop\n                if Is_In (Subject (Cursor + 1), Node.CS) then\n                   goto Succeed;\n@@ -4170,9 +4171,9 @@ package body GNAT.Spitbol.Patterns is\n \n             goto Fail;\n \n-         --  Break (string function case)\n+         --  Break & BreakX (string function case)\n \n-         when PC_Break_VF => declare\n+         when PC_Break_VF | PC_BreakX_VF => declare\n             U : constant VString := Node.VF.all;\n             S : Big_String_Access;\n             L : Natural;\n@@ -4191,77 +4192,9 @@ package body GNAT.Spitbol.Patterns is\n             goto Fail;\n          end;\n \n-         --  Break (string pointer case)\n+         --  Break & BreakX (string pointer case)\n \n-         when PC_Break_VP => declare\n-            U : constant VString := Node.VP.all;\n-            S : Big_String_Access;\n-            L : Natural;\n-\n-         begin\n-            Get_String (U, S, L);\n-\n-            while Cursor < Length loop\n-               if Is_In (Subject (Cursor + 1), S (1 .. L)) then\n-                  goto Succeed;\n-               else\n-                  Cursor := Cursor + 1;\n-               end if;\n-            end loop;\n-\n-            goto Fail;\n-         end;\n-\n-         --  BreakX (one character case)\n-\n-         when PC_BreakX_CH =>\n-            while Cursor < Length loop\n-               if Subject (Cursor + 1) = Node.Char then\n-                  goto Succeed;\n-               else\n-                  Cursor := Cursor + 1;\n-               end if;\n-            end loop;\n-\n-            goto Fail;\n-\n-         --  BreakX (character set case)\n-\n-         when PC_BreakX_CS =>\n-            while Cursor < Length loop\n-               if Is_In (Subject (Cursor + 1), Node.CS) then\n-                  goto Succeed;\n-               else\n-                  Cursor := Cursor + 1;\n-               end if;\n-            end loop;\n-\n-            goto Fail;\n-\n-         --  BreakX (string function case)\n-\n-         when PC_BreakX_VF => declare\n-            U : constant VString := Node.VF.all;\n-            S : Big_String_Access;\n-            L : Natural;\n-\n-         begin\n-            Get_String (U, S, L);\n-\n-            while Cursor < Length loop\n-               if Is_In (Subject (Cursor + 1), S (1 .. L)) then\n-                  goto Succeed;\n-               else\n-                  Cursor := Cursor + 1;\n-               end if;\n-            end loop;\n-\n-            goto Fail;\n-         end;\n-\n-         --  BreakX (string pointer case)\n-\n-         when PC_BreakX_VP => declare\n+         when PC_Break_VP | PC_BreakX_VP => declare\n             U : constant VString := Node.VP.all;\n             S : Big_String_Access;\n             L : Natural;\n@@ -4288,18 +4221,6 @@ package body GNAT.Spitbol.Patterns is\n             Cursor := Cursor + 1;\n             goto Succeed;\n \n-         --  Character (one character string)\n-\n-         when PC_Char =>\n-            if Cursor < Length\n-              and then Subject (Cursor + 1) = Node.Char\n-            then\n-               Cursor := Cursor + 1;\n-               goto Succeed;\n-            else\n-               goto Fail;\n-            end if;\n-\n          --  End of Pattern\n \n          when PC_EOP =>\n@@ -4941,15 +4862,6 @@ package body GNAT.Spitbol.Patterns is\n                Subject (Stack (Stack_Base - 1).Cursor + 1 .. Cursor));\n             Pop_Region;\n             goto Succeed;\n-\n-         --  Write on match. This node sets up for the eventual write\n-\n-         when PC_Write_OnM =>\n-            Stack (Stack_Base - 1).Node := Node;\n-            Push (CP_Assign'Access);\n-            Pop_Region;\n-            Assign_OnM := True;\n-            goto Succeed;\n       end case;\n \n       --  We are NOT allowed to fall though this case statement, since every\n@@ -5445,20 +5357,10 @@ package body GNAT.Spitbol.Patterns is\n                goto Fail;\n             end if;\n \n-         --  Arbno_S (simple Arbno initialize). This is the node that\n-         --  initiates the match of a simple Arbno structure.\n-\n-         when PC_Arbno_S =>\n-            Dout (Img (Node) &\n-                  \"setting up Arbno alternative \" & Img (Node.Alt));\n-            Push (Node.Alt);\n-            Node := Node.Pthen;\n-            goto Match;\n-\n-         --  Arbno_X (Arbno initialize). This is the node that initiates\n-         --  the match of a complex Arbno structure.\n+         --  Arbno_S/X (simple and complex Arbno initialize). This is the node\n+         --  that initiates the match of a simple or complex Arbno structure.\n \n-         when PC_Arbno_X =>\n+         when PC_Arbno_S | PC_Arbno_X =>\n             Dout (Img (Node) &\n                   \"setting up Arbno alternative \" & Img (Node.Alt));\n             Push (Node.Alt);"}, {"sha": "9525140b45b3552eea2663f726135bd8c221ac9e", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730814edc8b3c1bc872c54a39064ac59e2b8fdbd/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730814edc8b3c1bc872c54a39064ac59e2b8fdbd/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=730814edc8b3c1bc872c54a39064ac59e2b8fdbd", "patch": "@@ -1113,7 +1113,7 @@ package body Sem_Ch12 is\n       Analyzed_Formal : Node_Id;\n       First_Named     : Node_Id := Empty;\n       Formal          : Node_Id;\n-      Match           : Node_Id;\n+      Match           : Node_Id := Empty;\n       Named           : Node_Id;\n       Saved_Formal    : Node_Id;\n "}]}