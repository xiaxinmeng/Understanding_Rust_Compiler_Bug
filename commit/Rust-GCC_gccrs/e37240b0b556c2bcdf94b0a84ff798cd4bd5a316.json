{"sha": "e37240b0b556c2bcdf94b0a84ff798cd4bd5a316", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM3MjQwYjBiNTU2YzJiY2RmOTRiMGE4NGZmNzk4Y2Q0YmQ1YTMxNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-04-01T11:36:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-04-01T11:36:25Z"}, "message": "re PR tree-optimization/46590 (long compile time with -O2 and many loops)\n\n2019-04-01  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/46590\n\t* domwalk.h (dom_walker::dom_walker): Consolidate constructors.\n\t(dom_walker::m_reachability): Add in place of...\n\t(dom_walker::m_skip_unreachable_blocks): ...this.\n\t* domwalk.c (dom_walker::dom_walker): Consoliate constructors.\n\tMove complex initialization ...\n\t(dom_walker::walk): Here.  Especially compute m_bb_to_rpo\n\tlazily and initialize edge flags on each invocation.\n\t(dom_walker::bb_reachable): Use m_reachability.\n\nFrom-SVN: r270055", "tree": {"sha": "c0f105af1a80974454d81ff0d3c560467a115568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0f105af1a80974454d81ff0d3c560467a115568"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e37240b0b556c2bcdf94b0a84ff798cd4bd5a316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37240b0b556c2bcdf94b0a84ff798cd4bd5a316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e37240b0b556c2bcdf94b0a84ff798cd4bd5a316", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37240b0b556c2bcdf94b0a84ff798cd4bd5a316/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90f1430589e2f3efa8136346615fc08edfd936f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f1430589e2f3efa8136346615fc08edfd936f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90f1430589e2f3efa8136346615fc08edfd936f3"}], "stats": {"total": 100, "additions": 35, "deletions": 65}, "files": [{"sha": "2b0a73afd58574907061034f527a7ac1be88fcd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37240b0b556c2bcdf94b0a84ff798cd4bd5a316/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37240b0b556c2bcdf94b0a84ff798cd4bd5a316/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e37240b0b556c2bcdf94b0a84ff798cd4bd5a316", "patch": "@@ -1,3 +1,15 @@\n+2019-04-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/46590\n+\t* domwalk.h (dom_walker::dom_walker): Consolidate constructors.\n+\t(dom_walker::m_reachability): Add in place of...\n+\t(dom_walker::m_skip_unreachable_blocks): ...this.\n+\t* domwalk.c (dom_walker::dom_walker): Consoliate constructors.\n+\tMove complex initialization ...\n+\t(dom_walker::walk): Here.  Especially compute m_bb_to_rpo\n+\tlazily and initialize edge flags on each invocation.\n+\t(dom_walker::bb_reachable): Use m_reachability.\n+\n 2019-04-01  Martin Liska  <mliska@suse.cz>\n \n \tPR driver/89861"}, {"sha": "8c0fdecb4621ff849aa9161e2c2f8dd10531d70d", "filename": "gcc/domwalk.c", "status": "modified", "additions": 20, "deletions": 61, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37240b0b556c2bcdf94b0a84ff798cd4bd5a316/gcc%2Fdomwalk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37240b0b556c2bcdf94b0a84ff798cd4bd5a316/gcc%2Fdomwalk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.c?ref=e37240b0b556c2bcdf94b0a84ff798cd4bd5a316", "patch": "@@ -190,69 +190,11 @@ dom_walker::dom_walker (cdi_direction direction,\n \t\t\tenum reachability reachability,\n \t\t\tint *bb_index_to_rpo)\n   : m_dom_direction (direction),\n-    m_skip_unreachable_blocks (reachability != ALL_BLOCKS),\n-    m_user_bb_to_rpo (true),\n+    m_reachability (reachability),\n+    m_user_bb_to_rpo (bb_index_to_rpo != NULL),\n     m_unreachable_dom (NULL),\n     m_bb_to_rpo (bb_index_to_rpo)\n {\n-  /* Set up edge flags if need be.  */\n-  switch (reachability)\n-    {\n-    default:\n-      gcc_unreachable ();\n-    case ALL_BLOCKS:\n-      /* No need to touch edge flags.  */\n-      break;\n-\n-    case REACHABLE_BLOCKS:\n-      set_all_edges_as_executable (cfun);\n-      break;\n-\n-    case REACHABLE_BLOCKS_PRESERVING_FLAGS:\n-      /* Preserve the edge flags.  */\n-      break;\n-    }\n-}\n-\n-/* Constructor for a dom walker.  */\n-\n-dom_walker::dom_walker (cdi_direction direction,\n-\t\t\tenum reachability reachability)\n-  : m_dom_direction (direction),\n-    m_skip_unreachable_blocks (reachability != ALL_BLOCKS),\n-    m_user_bb_to_rpo (false),\n-    m_unreachable_dom (NULL),\n-    m_bb_to_rpo (NULL)\n-{\n-  /* Compute the basic-block index to RPO mapping.  */\n-  if (direction == CDI_DOMINATORS)\n-    {\n-      int *postorder = XNEWVEC (int, n_basic_blocks_for_fn (cfun));\n-      int postorder_num = pre_and_rev_post_order_compute (NULL, postorder,\n-\t\t\t\t\t\t\t  true);\n-      m_bb_to_rpo = XNEWVEC (int, last_basic_block_for_fn (cfun));\n-      for (int i = 0; i < postorder_num; ++i)\n-\tm_bb_to_rpo[postorder[i]] = i;\n-      free (postorder);\n-    }\n-\n-  /* Set up edge flags if need be.  */\n-  switch (reachability)\n-    {\n-    default:\n-      gcc_unreachable ();\n-    case ALL_BLOCKS:\n-      /* No need to touch edge flags.  */\n-      break;\n-\n-    case REACHABLE_BLOCKS:\n-      set_all_edges_as_executable (cfun);\n-      break;\n-\n-    case REACHABLE_BLOCKS_PRESERVING_FLAGS:\n-      /* Preserve the edge flags.  */\n-      break;\n-    }\n }\n \n /* Destructor.  */\n@@ -270,7 +212,7 @@ dom_walker::bb_reachable (struct function *fun, basic_block bb)\n {\n   /* If we're not skipping unreachable blocks, then assume everything\n      is reachable.  */\n-  if (!m_skip_unreachable_blocks)\n+  if (m_reachability == ALL_BLOCKS)\n     return true;\n \n   /* If any of the predecessor edges that do not come from blocks dominated\n@@ -331,6 +273,23 @@ const edge dom_walker::STOP = (edge)-1;\n void\n dom_walker::walk (basic_block bb)\n {\n+  /* Compute the basic-block index to RPO mapping lazily.  */\n+  if (!m_bb_to_rpo\n+      && m_dom_direction == CDI_DOMINATORS)\n+    {\n+      int *postorder = XNEWVEC (int, n_basic_blocks_for_fn (cfun));\n+      int postorder_num = pre_and_rev_post_order_compute (NULL, postorder,\n+\t\t\t\t\t\t\t  true);\n+      m_bb_to_rpo = XNEWVEC (int, last_basic_block_for_fn (cfun));\n+      for (int i = 0; i < postorder_num; ++i)\n+\tm_bb_to_rpo[postorder[i]] = i;\n+      free (postorder);\n+    }\n+\n+  /* Set up edge flags if need be.  */\n+  if (m_reachability == REACHABLE_BLOCKS)\n+    set_all_edges_as_executable (cfun);\n+\n   basic_block dest;\n   basic_block *worklist = XNEWVEC (basic_block,\n \t\t\t\t   n_basic_blocks_for_fn (cfun) * 2);"}, {"sha": "f865c61588f38762c426011f9f39544d268077cb", "filename": "gcc/domwalk.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37240b0b556c2bcdf94b0a84ff798cd4bd5a316/gcc%2Fdomwalk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37240b0b556c2bcdf94b0a84ff798cd4bd5a316/gcc%2Fdomwalk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.h?ref=e37240b0b556c2bcdf94b0a84ff798cd4bd5a316", "patch": "@@ -60,13 +60,12 @@ class dom_walker\n     REACHABLE_BLOCKS_PRESERVING_FLAGS\n   };\n \n-  dom_walker (cdi_direction direction, enum reachability = ALL_BLOCKS);\n-\n   /* You can provide a mapping of basic-block index to RPO if you\n      have that readily available or you do multiple walks.  If you\n      specify NULL as BB_INDEX_TO_RPO dominator children will not be\n      walked in RPO order.  */\n-  dom_walker (cdi_direction direction, enum reachability, int *bb_index_to_rpo);\n+  dom_walker (cdi_direction direction, enum reachability = ALL_BLOCKS,\n+\t      int *bb_index_to_rpo = NULL);\n \n   ~dom_walker ();\n \n@@ -94,7 +93,7 @@ class dom_walker\n      if it is set to CDI_POST_DOMINATORS, then we walk the post\n      dominator tree.  */\n   const ENUM_BITFIELD (cdi_direction) m_dom_direction : 2;\n-  bool m_skip_unreachable_blocks;\n+  const ENUM_BITFIELD (reachability) m_reachability : 2;\n   bool m_user_bb_to_rpo;\n   basic_block m_unreachable_dom;\n   int *m_bb_to_rpo;"}]}