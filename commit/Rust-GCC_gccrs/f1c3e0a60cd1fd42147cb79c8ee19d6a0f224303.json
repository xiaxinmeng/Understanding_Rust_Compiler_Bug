{"sha": "f1c3e0a60cd1fd42147cb79c8ee19d6a0f224303", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFjM2UwYTYwY2QxZmQ0MjE0N2NiNzljOGVlMTlkNmEwZjIyNDMwMw==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2004-06-14T18:29:01Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2004-06-14T18:29:01Z"}, "message": "configure.in: Support --enable-version-specific-runtime-libs.\n\n\t* configure.in: Support --enable-version-specific-runtime-libs.\n\t* configure: Regenerated.\n\nFrom-SVN: r83125", "tree": {"sha": "ccfc021d4a01d14baa2b4f27d59a0fee90b10192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccfc021d4a01d14baa2b4f27d59a0fee90b10192"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1c3e0a60cd1fd42147cb79c8ee19d6a0f224303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c3e0a60cd1fd42147cb79c8ee19d6a0f224303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1c3e0a60cd1fd42147cb79c8ee19d6a0f224303", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c3e0a60cd1fd42147cb79c8ee19d6a0f224303/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2373de3a834c39ee799a0a7f6b099f0338ec82df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2373de3a834c39ee799a0a7f6b099f0338ec82df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2373de3a834c39ee799a0a7f6b099f0338ec82df"}], "stats": {"total": 813, "additions": 441, "deletions": 372}, "files": [{"sha": "f1f20cb2c391a03ef0989638d2e127bc1888b476", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c3e0a60cd1fd42147cb79c8ee19d6a0f224303/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c3e0a60cd1fd42147cb79c8ee19d6a0f224303/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f1c3e0a60cd1fd42147cb79c8ee19d6a0f224303", "patch": "@@ -1,3 +1,8 @@\n+2004-06-14  Andreas Jaeger  <aj@suse.de>\n+\n+\t* configure.in: Support --enable-version-specific-runtime-libs.\n+\t* configure: Regenerated.\n+\n 2004-06-14  Bryce McKinlay  <mckinlay@redhat.com>\n \n \t* java/util/Calendar.java: Change ResourceBundle.getBundle() calls"}, {"sha": "baf065d97a1237cb0aef58fa9fa44c20b4f52c5b", "filename": "libjava/configure", "status": "modified", "additions": 395, "deletions": 360, "changes": 755, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c3e0a60cd1fd42147cb79c8ee19d6a0f224303/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c3e0a60cd1fd42147cb79c8ee19d6a0f224303/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=f1c3e0a60cd1fd42147cb79c8ee19d6a0f224303"}, {"sha": "c763b7525f1154a17f1f3ccb1b9a6981a0a3a61f", "filename": "libjava/configure.in", "status": "modified", "additions": 41, "deletions": 12, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c3e0a60cd1fd42147cb79c8ee19d6a0f224303/libjava%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c3e0a60cd1fd42147cb79c8ee19d6a0f224303/libjava%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.in?ref=f1c3e0a60cd1fd42147cb79c8ee19d6a0f224303", "patch": "@@ -20,6 +20,19 @@ AC_ARG_WITH(cross-host,\n AC_ARG_WITH(newlib,\n [  --with-newlib           Configuring with newlib])\n \n+AC_ARG_ENABLE(version-specific-runtime-libs,\n+[  --enable-version-specific-runtime-libs    \n+   specify that runtime libraries should be installed in a compiler-specific\n+   directory ],\n+    [case \"$enableval\" in\n+      yes) version_specific_libs=yes ;;\n+      no)  version_specific_libs=no ;;\n+      *)   AC_MSG_ERROR([Unknown argument to enable/disable version-specific libs]);;\n+     esac],\n+    [version_specific_libs=no]\n+)\n+\n+\n LIBGCJ_CONFIGURE(.)\n \n AM_CONFIG_HEADER(include/config.h gcj/libgcj-config.h)\n@@ -1024,18 +1037,34 @@ AM_CONDITIONAL(NATIVE, test \"$NATIVE\" = yes || test \"$NULL_TARGET\" = yes)\n AM_CONDITIONAL(NEEDS_DATA_START, test \"$NEEDS_DATA_START\" = yes && test \"$NATIVE\" = yes)\n AC_SUBST(GCC_UNWIND_INCLUDE)\n \n-if test -n \"$with_cross_host\" &&\n-   test x\"$with_cross_host\" != x\"no\"; then\n-  toolexecdir='$(exec_prefix)/$(target_alias)'\n-  toolexecmainlibdir='$(toolexecdir)/lib'\n-else\n-  toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n-  toolexecmainlibdir='$(libdir)'\n-fi\n-multi_os_directory=`$CC -print-multi-os-directory`\n-case $multi_os_directory in\n-  .) toolexeclibdir=$toolexecmainlibdir ;; # Avoid trailing /.\n-  *) toolexeclibdir=$toolexecmainlibdir/$multi_os_directory ;;\n+# Process the option \"--enable-version-specific-runtime-libs\"\n+# Calculate toolexeclibdir\n+case ${version_specific_libs} in\n+  yes)\n+    # Need the gcc compiler version to know where to install libraries\n+    # and header files if --enable-version-specific-runtime-libs option\n+    # is selected.\n+    includedir='${libdir}/gcc/${target_alias}/'$gcc_version/include/\n+    toolexecdir='$(libdir)/gcc/$(target_alias)'\n+    toolexecmainlibdir='$(toolexecdir)/'${gcc_version}'$(MULTISUBDIR)'\n+    toolexeclibdir=$toolexecmainlibdir\n+    ;;\n+  no)\n+    if test -n \"$with_cross_host\" &&\n+       test x\"$with_cross_host\" != x\"no\"; then\n+      # Install a library built with a cross compiler in tooldir, not libdir.\n+      toolexecdir='$(exec_prefix)/$(target_alias)'\n+      toolexecmainlibdir='$(toolexecdir)/lib'\n+    else\n+      toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n+      toolexecmainlibdir='$(libdir)'\n+    fi\n+    multi_os_directory=`$CC -print-multi-os-directory`\n+    case $multi_os_directory in\n+      .) toolexeclibdir=$toolexecmainlibdir ;; # Avoid trailing /.\n+      *) toolexeclibdir=$toolexecmainlibdir/$multi_os_directory ;;\n+    esac\n+    ;;\n esac\n AC_SUBST(toolexecdir)\n AC_SUBST(toolexecmainlibdir)"}]}