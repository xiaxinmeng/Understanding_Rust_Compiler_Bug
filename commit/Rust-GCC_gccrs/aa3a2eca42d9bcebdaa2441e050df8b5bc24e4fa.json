{"sha": "aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEzYTJlY2E0MmQ5YmNlYmRhYTI0NDFlMDUwZGY4YjViYzI0ZTRmYQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2018-12-12T08:47:16Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2018-12-12T08:47:16Z"}, "message": "rs6000, update Darwin call handling to latest scheme.\n\nThis patch mormalises Darwin's call handling to match the scheme\nrecently introduced and gives it target-specific call expanders.\n\n2018-12-12  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* config/rs6000/rs6000-protos.h (rs6000_call_darwin): New.\n\t(rs6000_sibcall_darwin): New. (macho_call_template): Remove.\n\t* config/rs6000/rs6000.c (get_prev_label): Forward declaration. \n\t(rs6000_call_template_1): Handle Darwin.\n\t(macho_call_template): Remove.\n\t(rs6000_call_sysv): Remove handling for Darwin.\n\t(rs6000_call_darwin_1, rs6000_call_darwin): New\n\t(rs6000_sibcall_darwin): New.\n\t* config/rs6000/rs6000.md (define_expand \u201ccall\u201d): Handle Darwin\n\twith its own expander. (define_expand \u201ccall_value\u201d): Likewise.\n\t(define_expand \u201csibcall\u201d): Likewise.\n\t(define_expand \u201csibcall_value\u201d): Likewise.\n\t(call_nonlocal_sysv): Remove Darwin special-casing.\n\t(call_value_nonlocal_sysv): Likewise.\n\nFrom-SVN: r267048", "tree": {"sha": "335db18cac33323d402d0de8b75c469160970324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/335db18cac33323d402d0de8b75c469160970324"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13de99bc7d085125e614ffdb75d486e9a7a8a48f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13de99bc7d085125e614ffdb75d486e9a7a8a48f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13de99bc7d085125e614ffdb75d486e9a7a8a48f"}], "stats": {"total": 212, "additions": 185, "deletions": 27}, "files": [{"sha": "c561bce2627f8013730d6a93442f7c3387802132", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa", "patch": "@@ -1,3 +1,20 @@\n+2018-12-12  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/rs6000/rs6000-protos.h (rs6000_call_darwin): New.\n+\t(rs6000_sibcall_darwin): New. (macho_call_template): Remove.\n+\t* config/rs6000/rs6000.c (get_prev_label): Forward declaration. \n+\t(rs6000_call_template_1): Handle Darwin.\n+\t(macho_call_template): Remove.\n+\t(rs6000_call_sysv): Remove handling for Darwin.\n+\t(rs6000_call_darwin_1, rs6000_call_darwin): New\n+\t(rs6000_sibcall_darwin): New.\n+\t* config/rs6000/rs6000.md (define_expand \u201ccall\u201d): Handle Darwin\n+\twith its own expander. (define_expand \u201ccall_value\u201d): Likewise.\n+\t(define_expand \u201csibcall\u201d): Likewise.\n+\t(define_expand \u201csibcall_value\u201d): Likewise.\n+\t(call_nonlocal_sysv): Remove Darwin special-casing.\n+\t(call_value_nonlocal_sysv): Likewise.\n+\n 2018-12-12  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/rs6000/darwin.md (call_indirect_nonlocal_darwin64): Remove."}, {"sha": "5ac864e83eedd7d29f38a7c963033930d0fc7d50", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa", "patch": "@@ -199,6 +199,8 @@ extern void rs6000_call_aix (rtx, rtx, rtx, rtx);\n extern void rs6000_sibcall_aix (rtx, rtx, rtx, rtx);\n extern void rs6000_call_sysv (rtx, rtx, rtx, rtx);\n extern void rs6000_sibcall_sysv (rtx, rtx, rtx, rtx);\n+extern void rs6000_call_darwin (rtx, rtx, rtx, rtx);\n+extern void rs6000_sibcall_darwin (rtx, rtx, rtx, rtx);\n extern void rs6000_aix_asm_output_dwarf_table_ref (char *);\n extern void get_ppc476_thunk_name (char name[32]);\n extern bool rs6000_overloaded_builtin_p (enum rs6000_builtins);\n@@ -226,10 +228,6 @@ extern void (*rs6000_target_modify_macros_ptr) (bool, HOST_WIDE_INT,\n /* Declare functions in rs6000-d.c  */\n extern void rs6000_d_target_versions (void);\n \n-#if TARGET_MACHO\n-char *macho_call_template (rtx_insn *, rtx *, int, int);\n-#endif\n-\n #ifdef NO_DOLLAR_IN_LABEL\n const char * rs6000_xcoff_strip_dollar (const char *);\n #endif"}, {"sha": "5beb8dfe24af2936982b49c4c9509ad4cde3b112", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 146, "deletions": 11, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa", "patch": "@@ -1364,6 +1364,7 @@ static rtx rs6000_darwin64_record_arg (CUMULATIVE_ARGS *, const_tree,\n \t\t\t\t       bool, bool);\n #if TARGET_MACHO\n static void macho_branch_islands (void);\n+static tree get_prev_label (tree);\n #endif\n static rtx rs6000_legitimize_reload_address (rtx, machine_mode, int, int,\n \t\t\t\t\t     int, int *);\n@@ -21534,13 +21535,39 @@ rs6000_call_template_1 (rtx *operands, unsigned int funop, bool sibcall)\n \t    ? \"+32768\" : \"\"));\n \n   static char str[32];  /* 2 spare */\n-  if (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2\n-      || DEFAULT_ABI == ABI_DARWIN)\n+  if (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\n     sprintf (str, \"b%s %s%s%s\", sibcall ? \"\" : \"l\", z, arg,\n \t     sibcall ? \"\" : \"\\n\\tnop\");\n   else if (DEFAULT_ABI == ABI_V4)\n     sprintf (str, \"b%s %s%s%s\", sibcall ? \"\" : \"l\", z, arg,\n \t     flag_pic ? \"@plt\" : \"\");\n+#if TARGET_MACHO\n+  /* If/when we remove the mlongcall opt, we can share the AIX/ELGv2 case. */\n+   else if (DEFAULT_ABI == ABI_DARWIN)\n+    {\n+      /* The cookie is in operand func+2.  */\n+      gcc_checking_assert (GET_CODE (operands[funop + 2]) == CONST_INT);\n+      int cookie = INTVAL (operands[funop + 2]);\n+      if (cookie & CALL_LONG)\n+\t{\n+\t  tree funname = get_identifier (XSTR (operands[funop], 0));\n+\t  tree labelname = get_prev_label (funname);\n+\t  gcc_checking_assert (labelname && !sibcall);\n+\n+\t  /* \"jbsr foo, L42\" is Mach-O for \"Link as 'bl foo' if a 'bl'\n+\t     instruction will reach 'foo', otherwise link as 'bl L42'\".\n+\t     \"L42\" should be a 'branch island', that will do a far jump to\n+\t     'foo'.  Branch islands are generated in\n+\t     macho_branch_islands().  */\n+\t  sprintf (str, \"jbsr %%z%u,%.10s\", funop,\n+\t\t   IDENTIFIER_POINTER (labelname));\n+\t}\n+      else\n+        /* Same as AIX or ELFv2, except to keep backwards compat, no nop\n+\t   after the call.  */\n+\tsprintf (str, \"b%s %s%s\", sibcall ? \"\" : \"l\", z, arg);\n+    }\n+#endif\n   else\n     gcc_unreachable ();\n   return str;\n@@ -37959,7 +37986,6 @@ rs6000_call_sysv (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n \n   /* Handle longcall attributes.  */\n   if ((INTVAL (cookie) & CALL_LONG) != 0\n-      && DEFAULT_ABI != ABI_DARWIN /* Darwin does it's own thing.  */\n       && GET_CODE (func_desc) == SYMBOL_REF)\n     {\n       func = rs6000_longcall_ref (func_desc, tlsarg);\n@@ -38000,14 +38026,8 @@ rs6000_call_sysv (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n   if (value != NULL_RTX)\n     call[0] = gen_rtx_SET (value, call[0]);\n \n-  if (DEFAULT_ABI == ABI_DARWIN && TARGET_32BIT)\n-    call[1] = gen_rtx_USE (VOIDmode, GEN_INT (INTVAL (cookie)));\n-  else\n-    {\n-      unsigned int mask = CALL_V4_SET_FP_ARGS | CALL_V4_CLEAR_FP_ARGS;\n-      call[1] = gen_rtx_USE (VOIDmode, GEN_INT (INTVAL (cookie) & mask));\n-    }\n-\n+  unsigned int mask = CALL_V4_SET_FP_ARGS | CALL_V4_CLEAR_FP_ARGS;\n+  call[1] = gen_rtx_USE (VOIDmode, GEN_INT (INTVAL (cookie) & mask));\n   call[2] = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, LR_REGNO));\n \n   insn = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (3, call));\n@@ -38081,6 +38101,121 @@ rs6000_sibcall_sysv (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n     use_reg (&CALL_INSN_FUNCTION_USAGE (insn), abi_reg);\n }\n \n+#if TARGET_MACHO\n+\n+/* Expand code to perform a call under the Darwin ABI.\n+   Modulo handling of mlongcall, this is much the same as sysv.\n+   if/when the longcall optimisation is removed, we could drop this\n+   code and use the sysv case (taking care to avoid the tls stuff).\n+\n+   We can use this for sibcalls too, if needed.  */\n+\n+void\n+rs6000_call_darwin_1 (rtx value, rtx func_desc, rtx tlsarg,\n+\t\t      rtx cookie, bool sibcall)\n+{\n+  rtx func = func_desc;\n+  rtx func_addr;\n+  rtx call[3];\n+  rtx insn;\n+  int cookie_val = INTVAL (cookie);\n+  bool make_island = false;\n+\n+  /* Handle longcall attributes, there are two cases for Darwin:\n+     1) Newer linkers are capable of synthesising any branch islands needed.\n+     2) We need a helper branch island synthesised by the compiler.\n+     The second case has mostly been retired and we don't use it for m64.\n+     In fact, it's is an optimisation, we could just indirect as sysv does..\n+     ... however, backwards compatibility for now.\n+     If we're going to use this, then we need to keep the CALL_LONG bit set,\n+     so that we can pick up the special insn form later.  */\n+  if ((cookie_val & CALL_LONG) != 0\n+      && GET_CODE (func_desc) == SYMBOL_REF)\n+    {\n+      if (darwin_emit_branch_islands && TARGET_32BIT)\n+\tmake_island = true; /* Do nothing yet, retain the CALL_LONG flag.  */\n+      else\n+\t{\n+\t  /* The linker is capable of doing this, but the user explicitly\n+\t     asked for -mlongcall, so we'll do the 'normal' version.  */\n+\t  func = rs6000_longcall_ref (func_desc, NULL_RTX);\n+\t  cookie_val &= ~CALL_LONG; /* Handled, zap it.  */\n+\t}\n+    }\n+\n+  /* Handle indirect calls.  */\n+  if (GET_CODE (func) != SYMBOL_REF)\n+    {\n+      func = force_reg (Pmode, func);\n+\n+      /* Indirect calls via CTR are strongly preferred over indirect\n+\t calls via LR, and are required for indirect sibcalls, so move\n+\t the address there.   */\n+      func_addr = gen_rtx_REG (Pmode, CTR_REGNO);\n+      emit_move_insn (func_addr, func);\n+    }\n+  else\n+    func_addr = func;\n+\n+  /* Create the call.  */\n+  call[0] = gen_rtx_CALL (VOIDmode, gen_rtx_MEM (SImode, func_addr), tlsarg);\n+  if (value != NULL_RTX)\n+    call[0] = gen_rtx_SET (value, call[0]);\n+\n+  call[1] = gen_rtx_USE (VOIDmode, GEN_INT (cookie_val));\n+\n+  if (sibcall)\n+    call[2] = simple_return_rtx;\n+  else\n+    call[2] = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, LR_REGNO));\n+\n+  insn = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (3, call));\n+  insn = emit_call_insn (insn);\n+  /* Now we have the debug info in the insn, we can set up the branch island\n+     if we're using one.  */\n+  if (make_island)\n+    {\n+      tree funname = get_identifier (XSTR (func_desc, 0));\n+\n+      if (no_previous_def (funname))\n+\t{\n+\t  rtx label_rtx = gen_label_rtx ();\n+\t  char *label_buf, temp_buf[256];\n+\t  ASM_GENERATE_INTERNAL_LABEL (temp_buf, \"L\",\n+\t\t\t\t       CODE_LABEL_NUMBER (label_rtx));\n+\t  label_buf = temp_buf[0] == '*' ? temp_buf + 1 : temp_buf;\n+\t  tree labelname = get_identifier (label_buf);\n+\t  add_compiler_branch_island (labelname, funname,\n+\t\t\t\t     insn_line ((const rtx_insn*)insn));\n+\t}\n+     }\n+}\n+#endif\n+\n+void\n+rs6000_call_darwin (rtx value ATTRIBUTE_UNUSED, rtx func_desc ATTRIBUTE_UNUSED,\n+\t\t    rtx tlsarg ATTRIBUTE_UNUSED, rtx cookie ATTRIBUTE_UNUSED)\n+{\n+#if TARGET_MACHO\n+  rs6000_call_darwin_1 (value, func_desc, tlsarg, cookie, false);\n+#else\n+  gcc_unreachable();\n+#endif\n+}\n+\n+\n+void\n+rs6000_sibcall_darwin (rtx value ATTRIBUTE_UNUSED, rtx func_desc ATTRIBUTE_UNUSED,\n+\t\t       rtx tlsarg ATTRIBUTE_UNUSED, rtx cookie ATTRIBUTE_UNUSED)\n+{\n+#if TARGET_MACHO\n+  rs6000_call_darwin_1 (value, func_desc, tlsarg, cookie, true);\n+#else\n+  gcc_unreachable();\n+#endif\n+}\n+\n+\n /* Return whether we need to always update the saved TOC pointer when we update\n    the stack pointer.  */\n "}, {"sha": "4499371a50b29d641fe925d6d3b618d213e083aa", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=aa3a2eca42d9bcebdaa2441e050df8b5bc24e4fa", "patch": "@@ -10285,8 +10285,12 @@\n \n   if (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\n     rs6000_call_aix (NULL_RTX, operands[0], operands[1], operands[2]);\n-  else\n+  else if (DEFAULT_ABI == ABI_V4)\n     rs6000_call_sysv (NULL_RTX, operands[0], operands[1], operands[2]);\n+  else if (DEFAULT_ABI == ABI_DARWIN)\n+    rs6000_call_darwin (NULL_RTX, operands[0], operands[1], operands[2]);\n+  else\n+    gcc_unreachable ();\n \n   DONE;\n })\n@@ -10310,8 +10314,12 @@\n \n   if (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\n     rs6000_call_aix (operands[0], operands[1], operands[2], operands[3]);\n-  else\n+  else if (DEFAULT_ABI == ABI_V4)\n     rs6000_call_sysv (operands[0], operands[1], operands[2], operands[3]);\n+  else if (DEFAULT_ABI == ABI_DARWIN)\n+    rs6000_call_darwin (operands[0], operands[1], operands[2], operands[3]);\n+  else\n+    gcc_unreachable ();\n \n   DONE;\n })\n@@ -10447,11 +10455,7 @@\n   else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\"creqv 6,6,6\", operands);\n \n-#if TARGET_MACHO\n-  return macho_call_template (insn, operands, 0, 2);\n-#else\n   return rs6000_call_template (operands, 0);\n-#endif\n }\n   \"DEFAULT_ABI == ABI_V4\n    && TARGET_SECURE_PLT && flag_pic && !SYMBOL_REF_LOCAL_P (operands[0])\n@@ -10533,11 +10537,7 @@\n   else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\"creqv 6,6,6\", operands);\n \n-#if TARGET_MACHO\n-  return macho_call_template (insn, operands, 1, 3);\n-#else\n   return rs6000_call_template (operands, 1);\n-#endif\n }\n   \"DEFAULT_ABI == ABI_V4\n    && TARGET_SECURE_PLT && flag_pic && !SYMBOL_REF_LOCAL_P (operands[1])\n@@ -10746,8 +10746,12 @@\n \n   if (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\n     rs6000_sibcall_aix (NULL_RTX, operands[0], operands[1], operands[2]);\n-  else\n+  else if (DEFAULT_ABI == ABI_V4)\n     rs6000_sibcall_sysv (NULL_RTX, operands[0], operands[1], operands[2]);\n+  else if (DEFAULT_ABI == ABI_DARWIN)\n+    rs6000_sibcall_darwin (NULL_RTX, operands[0], operands[1], operands[2]);\n+  else\n+    gcc_unreachable ();\n \n   DONE;\n })\n@@ -10772,8 +10776,12 @@\n \n   if (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\n     rs6000_sibcall_aix (operands[0], operands[1], operands[2], operands[3]);\n-  else\n+  else if (DEFAULT_ABI == ABI_V4)\n     rs6000_sibcall_sysv (operands[0], operands[1], operands[2], operands[3]);\n+  else if (DEFAULT_ABI == ABI_DARWIN)\n+    rs6000_sibcall_darwin (operands[0], operands[1], operands[2], operands[3]);\n+  else\n+    gcc_unreachable ();\n \n   DONE;\n })"}]}