{"sha": "8e91d222caa45afa9dc15aff60df1bf378fe2545", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU5MWQyMjJjYWE0NWFmYTlkYzE1YWZmNjBkZjFiZjM3OGZlMjU0NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-02-04T13:08:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-02-04T13:08:00Z"}, "message": "re PR tree-optimization/60023 (ICE: verify_gimple failed: dead STMT in EH table with -O3 -fnon-call-exceptions -mavx2)\n\n\tPR tree-optimization/60023\n\t* tree-if-conv.c (predicate_mem_writes): Pass true instead of\n\tfalse to gsi_replace.\n\t* tree-vect-stmts.c (vect_finish_stmt_generation): If stmt\n\thas been in some EH region and vec_stmt could throw, add\n\tvec_stmt into the same EH region.\n\t* tree-data-ref.c (get_references_in_stmt): If IFN_MASK_LOAD\n\thas no lhs, ignore it.\n\t* internal-fn.c (expand_MASK_LOAD): Likewise.\n\n\t* g++.dg/vect/pr60023.cc: New test.\n\nFrom-SVN: r207464", "tree": {"sha": "c3cb8d1b945a0700909d02857e6552cf666be347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3cb8d1b945a0700909d02857e6552cf666be347"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e91d222caa45afa9dc15aff60df1bf378fe2545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e91d222caa45afa9dc15aff60df1bf378fe2545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e91d222caa45afa9dc15aff60df1bf378fe2545", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e91d222caa45afa9dc15aff60df1bf378fe2545/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb259c4a329898bbae30bf7b55f9598fa73c7dd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb259c4a329898bbae30bf7b55f9598fa73c7dd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb259c4a329898bbae30bf7b55f9598fa73c7dd1"}], "stats": {"total": 106, "additions": 105, "deletions": 1}, "files": [{"sha": "17a62621325e227f2daaf894ed5836370c69c0c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e91d222caa45afa9dc15aff60df1bf378fe2545/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e91d222caa45afa9dc15aff60df1bf378fe2545/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e91d222caa45afa9dc15aff60df1bf378fe2545", "patch": "@@ -1,5 +1,15 @@\n 2014-02-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/60023\n+\t* tree-if-conv.c (predicate_mem_writes): Pass true instead of\n+\tfalse to gsi_replace.\n+\t* tree-vect-stmts.c (vect_finish_stmt_generation): If stmt\n+\thas been in some EH region and vec_stmt could throw, add\n+\tvec_stmt into the same EH region.\n+\t* tree-data-ref.c (get_references_in_stmt): If IFN_MASK_LOAD\n+\thas no lhs, ignore it.\n+\t* internal-fn.c (expand_MASK_LOAD): Likewise.\n+\n \tPR ipa/60026\n \t* tree-inline.c (copy_forbidden): Fail for\n \t__attribute__((optimize (0))) functions."}, {"sha": "3efd2b119340c6ea0cb88d1e4f3fda5bd229aae5", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e91d222caa45afa9dc15aff60df1bf378fe2545/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e91d222caa45afa9dc15aff60df1bf378fe2545/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=8e91d222caa45afa9dc15aff60df1bf378fe2545", "patch": "@@ -820,6 +820,8 @@ expand_MASK_LOAD (gimple stmt)\n \n   maskt = gimple_call_arg (stmt, 2);\n   lhs = gimple_call_lhs (stmt);\n+  if (lhs == NULL_TREE)\n+    return;\n   type = TREE_TYPE (lhs);\n   rhs = fold_build2 (MEM_REF, type, gimple_call_arg (stmt, 0),\n \t\t     gimple_call_arg (stmt, 1));"}, {"sha": "4c49fc3c2a7b702217d6c6bb4233a00dbc8e6561", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e91d222caa45afa9dc15aff60df1bf378fe2545/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e91d222caa45afa9dc15aff60df1bf378fe2545/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e91d222caa45afa9dc15aff60df1bf378fe2545", "patch": "@@ -1,5 +1,8 @@\n 2014-02-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/60023\n+\t* g++.dg/vect/pr60023.cc: New test.\n+\n \tPR ipa/60026\n \t* c-c++-common/torture/pr60026.c: New test.\n "}, {"sha": "78f325e6f7b0d3311d5ca98ba4d9ea4dba2ab84e", "filename": "gcc/testsuite/g++.dg/vect/pr60023.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e91d222caa45afa9dc15aff60df1bf378fe2545/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr60023.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e91d222caa45afa9dc15aff60df1bf378fe2545/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr60023.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr60023.cc?ref=8e91d222caa45afa9dc15aff60df1bf378fe2545", "patch": "@@ -0,0 +1,80 @@\n+// PR tree-optimization/60023\n+// { dg-do compile }\n+// { dg-additional-options \"-O3 -std=c++11 -fnon-call-exceptions\" }\n+// { dg-additional-options \"-mavx2\" { target { i?86-*-* x86_64-*-* } } }\n+\n+struct A { A (); ~A (); };\n+\n+void\n+f1 (int *p, int *q, int *r) noexcept (true)\n+{\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    if (r[i])\n+      p[i] = q[i] + 1;\n+}\n+\n+void\n+f2 (int *p, int *q, int *r)\n+{\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    if (r[i])\n+      p[i] = q[i] + 1;\n+}\n+\n+void\n+f3 (int *p, int *q) noexcept (true)\n+{\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    p[i] = q[i] + 1;\n+}\n+\n+void\n+f4 (int *p, int *q)\n+{\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    p[i] = q[i] + 1;\n+}\n+\n+void\n+f5 (int *p, int *q, int *r) noexcept (true)\n+{\n+  int i;\n+  A a;\n+  for (i = 0; i < 1024; i++)\n+    if (r[i])\n+      p[i] = q[i] + 1;\n+}\n+\n+void\n+f6 (int *p, int *q, int *r)\n+{\n+  int i;\n+  A a;\n+  for (i = 0; i < 1024; i++)\n+    if (r[i])\n+      p[i] = q[i] + 1;\n+}\n+\n+void\n+f7 (int *p, int *q) noexcept (true)\n+{\n+  int i;\n+  A a;\n+  for (i = 0; i < 1024; i++)\n+    p[i] = q[i] + 1;\n+}\n+\n+void\n+f8 (int *p, int *q)\n+{\n+  int i;\n+  A a;\n+  for (i = 0; i < 1024; i++)\n+    p[i] = q[i] + 1;\n+}\n+\n+// { dg-final { cleanup-tree-dump \"vect\" } }"}, {"sha": "01d0a7a79d832826f0e0109f20c5ed129f4bd388", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e91d222caa45afa9dc15aff60df1bf378fe2545/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e91d222caa45afa9dc15aff60df1bf378fe2545/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=8e91d222caa45afa9dc15aff60df1bf378fe2545", "patch": "@@ -4401,6 +4401,8 @@ get_references_in_stmt (gimple stmt, vec<data_ref_loc, va_heap> *references)\n \tswitch (gimple_call_internal_fn (stmt))\n \t  {\n \t  case IFN_MASK_LOAD:\n+\t    if (gimple_call_lhs (stmt) == NULL_TREE)\n+\t      break;\n \t    ref.is_read = true;\n \t  case IFN_MASK_STORE:\n \t    ref.ref = fold_build2 (MEM_REF,"}, {"sha": "0dc340f15aab9336db5c18920b3b657db69458b1", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e91d222caa45afa9dc15aff60df1bf378fe2545/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e91d222caa45afa9dc15aff60df1bf378fe2545/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=8e91d222caa45afa9dc15aff60df1bf378fe2545", "patch": "@@ -1723,7 +1723,7 @@ predicate_mem_writes (loop_p loop)\n \t      new_stmt\n \t\t= gimple_build_call_internal (IFN_MASK_STORE, 4, addr, ptr,\n \t\t\t\t\t      mask, rhs);\n-\t    gsi_replace (&gsi, new_stmt, false);\n+\t    gsi_replace (&gsi, new_stmt, true);\n \t  }\n \telse if (gimple_vdef (stmt))\n \t  {"}, {"sha": "8ed834bc5fa59c5fc153e94f6aaebb6e0aefe05a", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e91d222caa45afa9dc15aff60df1bf378fe2545/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e91d222caa45afa9dc15aff60df1bf378fe2545/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=8e91d222caa45afa9dc15aff60df1bf378fe2545", "patch": "@@ -1691,6 +1691,13 @@ vect_finish_stmt_generation (gimple stmt, gimple vec_stmt,\n     }\n \n   gimple_set_location (vec_stmt, gimple_location (stmt));\n+\n+  /* While EH edges will generally prevent vectorization, stmt might\n+     e.g. be in a must-not-throw region.  Ensure newly created stmts\n+     that could throw are part of the same region.  */\n+  int lp_nr = lookup_stmt_eh_lp (stmt);\n+  if (lp_nr != 0 && stmt_could_throw_p (vec_stmt))\n+    add_stmt_to_eh_lp (vec_stmt, lp_nr);\n }\n \n /* Checks if CALL can be vectorized in type VECTYPE.  Returns"}]}