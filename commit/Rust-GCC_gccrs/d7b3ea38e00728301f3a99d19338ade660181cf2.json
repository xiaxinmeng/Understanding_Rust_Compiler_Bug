{"sha": "d7b3ea38e00728301f3a99d19338ade660181cf2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdiM2VhMzhlMDA3MjgzMDFmM2E5OWQxOTMzOGFkZTY2MDE4MWNmMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "1999-02-11T00:10:47Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-02-11T00:10:47Z"}, "message": "fold-const.c (range_binop): Take account of the bounded nature of fixed length arithmetic when...\n\nh\n\t* fold-const.c (range_binop): Take account of the bounded nature\n\tof fixed length arithmetic when comparing unbounded ranges.\n\nFrom-SVN: r25146", "tree": {"sha": "96b65a6ab40550d6a17f0bdc1614cb3c1934aa5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96b65a6ab40550d6a17f0bdc1614cb3c1934aa5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7b3ea38e00728301f3a99d19338ade660181cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b3ea38e00728301f3a99d19338ade660181cf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7b3ea38e00728301f3a99d19338ade660181cf2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b3ea38e00728301f3a99d19338ade660181cf2/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "708bcaa7b1bf98a8b06abb2959067e62c72a827d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/708bcaa7b1bf98a8b06abb2959067e62c72a827d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/708bcaa7b1bf98a8b06abb2959067e62c72a827d"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "0dbce12b22f50b817e1372a050c66be7b39ed145", "filename": "gcc/fold-const.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b3ea38e00728301f3a99d19338ade660181cf2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b3ea38e00728301f3a99d19338ade660181cf2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d7b3ea38e00728301f3a99d19338ade660181cf2", "patch": "@@ -3009,21 +3009,33 @@ range_binop (code, type, arg0, upper0_p, arg1, upper1_p)\n     return 0;\n \n   /* Set SGN[01] to -1 if ARG[01] is a lower bound, 1 for upper, and 0\n-     for neither.  Then compute our result treating them as never equal\n-     and comparing bounds to non-bounds as above.  */\n+     for neither.  In real maths, we cannot assume open ended ranges are\n+     the same. But, this is computer arithmetic, where numbers are finite.\n+     We can therefore make the transformation of any unbounded range with\n+     the value Z, Z being greater than any representable number. This permits\n+     us to treat unbounded ranges as equal. */\n   sgn0 = arg0 != 0 ? 0 : (upper0_p ? 1 : -1);\n   sgn1 = arg1 != 0 ? 0 : (upper1_p ? 1 : -1);\n   switch (code)\n     {\n-    case EQ_EXPR:  case NE_EXPR:\n-      result = (code == NE_EXPR);\n+    case EQ_EXPR:\n+      result = sgn0 == sgn1;\n+      break;\n+    case NE_EXPR:\n+      result = sgn0 != sgn1;\n       break;\n-    case LT_EXPR:  case LE_EXPR:\n+    case LT_EXPR:\n       result = sgn0 < sgn1;\n       break;\n-    case GT_EXPR:  case GE_EXPR:\n+    case LE_EXPR:\n+      result = sgn0 <= sgn1;\n+      break;\n+    case GT_EXPR:\n       result = sgn0 > sgn1;\n       break;\n+    case GE_EXPR:\n+      result = sgn0 >= sgn1;\n+      break;\n     default:\n       abort ();\n     }"}]}