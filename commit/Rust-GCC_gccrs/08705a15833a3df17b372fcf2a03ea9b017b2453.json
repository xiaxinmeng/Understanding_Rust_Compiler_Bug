{"sha": "08705a15833a3df17b372fcf2a03ea9b017b2453", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg3MDVhMTU4MzNhM2RmMTdiMzcyZmNmMmEwM2VhOWIwMTdiMjQ1Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2017-09-08T12:34:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T12:34:54Z"}, "message": "gnat_rm.texi, [...]: Update documentation.\n\n       * gnat_rm.texi, gnat_ugn.texi,\n        doc/gnat_ugn/the_gnat_compilation_model.rst,\n        doc/gnat_ugn/getting_started_with_gnat.rst,\n        doc/gnat_ugn/inline_assembler.rst,\n        doc/gnat_ugn/building_executable_programs_with_gnat.rst,\n        doc/gnat_ugn/elaboration_order_handling_in_gnat.rst,\n        doc/gnat_ugn/about_this_guide.rst,\n        doc/gnat_ugn/platform_specific_information.rst,\n        doc/gnat_ugn/example_of_binder_output.rst,\n        doc/gnat_ugn/gnat_and_program_execution.rst,\n        doc/gnat_ugn/gnat_utility_programs.rst,\n        doc/gnat_rm/implementation_of_specific_ada_features.rst,\n        doc/gnat_rm/interfacing_to_other_languages.rst,\n        doc/gnat_rm/implementation_defined_aspects.rst,\n        doc/gnat_rm/intrinsic_subprograms.rst,\n        doc/gnat_rm/implementation_defined_characteristics.rst,\n        doc/gnat_rm/implementation_advice.rst,\n        doc/gnat_rm/implementation_defined_attributes.rst,\n        doc/gnat_rm/compatibility_and_porting_guide.rst,\n        doc/gnat_rm/standard_library_routines.rst,\n        doc/gnat_rm/the_gnat_library.rst,\n        doc/gnat_rm/implementation_defined_pragmas.rst,\n        doc/gnat_rm/representation_clauses_and_pragmas.rst,\n        doc/gnat_rm/standard_and_implementation_defined_restrictions.rst,\n        doc/gnat_rm/obsolescent_features.rst,\n        doc/gnat_rm/about_this_guide.rst,\n        doc/gnat_rm/the_implementation_of_standard_i_o.rst,\n        doc/gnat_rm/implementation_of_ada_2012_features.rst,\n        doc/gnat_ugn.rst,\n        doc/gnat_rm.rst: Update documentation.\n\nFrom-SVN: r251889", "tree": {"sha": "52e5a3645dd1fa186152c67d947a9f736b5b6827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52e5a3645dd1fa186152c67d947a9f736b5b6827"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08705a15833a3df17b372fcf2a03ea9b017b2453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08705a15833a3df17b372fcf2a03ea9b017b2453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08705a15833a3df17b372fcf2a03ea9b017b2453", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08705a15833a3df17b372fcf2a03ea9b017b2453/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9651fbafd1d66bd4ca357387e9e33991907b2509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9651fbafd1d66bd4ca357387e9e33991907b2509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9651fbafd1d66bd4ca357387e9e33991907b2509"}], "stats": {"total": 24529, "additions": 12683, "deletions": 11846}, "files": [{"sha": "53a0aaf2255c7615d13c0e345f9475353a5c5e9b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -1,3 +1,42 @@\n+2017-09-08  Arnaud Charlet <charlet@adacore.com>\n+\n+\t* gnat_rm.texi, gnat_ugn.texi,\n+\tdoc/gnat_ugn/the_gnat_compilation_model.rst,\n+\tdoc/gnat_ugn/getting_started_with_gnat.rst,\n+\tdoc/gnat_ugn/inline_assembler.rst,\n+\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst,\n+\tdoc/gnat_ugn/elaboration_order_handling_in_gnat.rst,\n+\tdoc/gnat_ugn/about_this_guide.rst,\n+\tdoc/gnat_ugn/platform_specific_information.rst,\n+\tdoc/gnat_ugn/example_of_binder_output.rst,\n+\tdoc/gnat_ugn/gnat_and_program_execution.rst,\n+\tdoc/gnat_ugn/gnat_utility_programs.rst,\n+\tdoc/gnat_rm/implementation_of_specific_ada_features.rst,\n+\tdoc/gnat_rm/interfacing_to_other_languages.rst,\n+\tdoc/gnat_rm/implementation_defined_aspects.rst,\n+\tdoc/gnat_rm/intrinsic_subprograms.rst,\n+\tdoc/gnat_rm/implementation_defined_characteristics.rst,\n+\tdoc/gnat_rm/implementation_advice.rst,\n+\tdoc/gnat_rm/implementation_defined_attributes.rst,\n+\tdoc/gnat_rm/compatibility_and_porting_guide.rst,\n+\tdoc/gnat_rm/standard_library_routines.rst,\n+\tdoc/gnat_rm/the_gnat_library.rst,\n+\tdoc/gnat_rm/implementation_defined_pragmas.rst,\n+\tdoc/gnat_rm/representation_clauses_and_pragmas.rst,\n+\tdoc/gnat_rm/standard_and_implementation_defined_restrictions.rst,\n+\tdoc/gnat_rm/obsolescent_features.rst,\n+\tdoc/gnat_rm/about_this_guide.rst,\n+\tdoc/gnat_rm/the_implementation_of_standard_i_o.rst,\n+\tdoc/gnat_rm/implementation_of_ada_2012_features.rst,\n+\tdoc/gnat_ugn.rst,\n+\tdoc/gnat_rm.rst: Update documentation.\n+\n+2017-09-08  Arnaud Charlet <charlet@adacore.com>\n+\n+\t* s-dwalin.ads, s-dwalin.adb, s-trasym-dwarf.adb, s-objrea.ads,\n+\ts-objrea.adb, s-tsmona-linux.adb, s-tsmona-mingw.adb: New.\n+\t* gcc-interface/Makefile.in: Enable s-trasym-dwarf.adb on x86*linux.\n+\n 2017-09-08  Bob Duff  <duff@adacore.com>\n \n \t* s-ststop.ads, s-ststop.adb, rtsfind.ads (String_Input_Tag):"}, {"sha": "9360a8fc7a7225016b87bd39162827bb4acdbd9e", "filename": "gcc/ada/doc/gnat_rm.rst", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -1,37 +1,39 @@\n GNAT Reference Manual\n =====================\n \n-*GNAT, The GNU Ada Development Environment*\n+.. only:: not latex\n \n-.. only:: PRO\n+    *GNAT, The GNU Ada Development Environment*\n \n-   *GNAT Pro Edition*\n+    .. only:: PRO\n \n-   | Version |version|\n-   | Date: |today|\n+       *GNAT Pro Edition*\n \n-.. only:: GPL\n+       | Version |version|\n+       | Date: |today|\n \n-   *GNAT GPL Edition*\n+    .. only:: GPL\n \n-   | Version |version|\n-   | Date: |today|\n+       *GNAT GPL Edition*\n \n-.. only:: FSF\n+       | Version |version|\n+       | Date: |today|\n \n-   .. raw:: texinfo\n+    .. only:: FSF\n \n-      @include gcc-common.texi\n-      GCC version @value{version-GCC}@*\n+       .. raw:: texinfo\n \n-AdaCore\n+          @include gcc-common.texi\n+          GCC version @value{version-GCC}@*\n \n-Permission is granted to copy, distribute and/or modify this document\n-under the terms of the GNU Free Documentation License, Version 1.3 or\n-any later version published by the Free Software Foundation; with no\n-Invariant Sections, with the Front-Cover Texts being \"GNAT Reference\n-Manual\", and with no Back-Cover Texts.  A copy of the license is\n-included in the section entitled :ref:`gnu_fdl`.\n+    AdaCore\n+\n+    Permission is granted to copy, distribute and/or modify this document\n+    under the terms of the GNU Free Documentation License, Version 1.3 or\n+    any later version published by the Free Software Foundation; with no\n+    Invariant Sections, with the Front-Cover Texts being \"GNAT Reference\n+    Manual\", and with no Back-Cover Texts.  A copy of the license is\n+    included in the section entitled :ref:`gnu_fdl`.\n \n .. toctree::\n    :numbered:"}, {"sha": "b48785eeed0e9e4f89798c75a24b3ac90b8fa96d", "filename": "gcc/ada/doc/gnat_rm/about_this_guide.rst", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fabout_this_guide.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fabout_this_guide.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fabout_this_guide.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -130,14 +130,14 @@ Conventions\n Following are examples of the typographical and graphic conventions used\n in this guide:\n \n-* `Functions`, `utility program names`, `standard names`,\n-  and `classes`.\n+* ``Functions``, ``utility program names``, ``standard names``,\n+  and ``classes``.\n \n-* `Option flags`\n+* ``Option flags``\n \n * :file:`File names`\n \n-* `Variables`\n+* ``Variables``\n \n * *Emphasis*\n "}, {"sha": "5a20995ca084b3ec5f88bb678ac1f3828a979f56", "filename": "gcc/ada/doc/gnat_rm/compatibility_and_porting_guide.rst", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fcompatibility_and_porting_guide.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fcompatibility_and_porting_guide.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fcompatibility_and_porting_guide.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -16,7 +16,7 @@ Writing Portable Fixed-Point Declarations\n =========================================\n \n The Ada Reference Manual gives an implementation freedom to choose bounds\n-that are narrower by `Small` from the given bounds.\n+that are narrower by ``Small`` from the given bounds.\n For example, if we write\n \n .. code-block:: ada\n@@ -31,7 +31,7 @@ look at this, and figure out how to avoid these problems.\n \n First, why does this freedom exist, and why would an implementation\n take advantage of it? To answer this, take a closer look at the type\n-declaration for `F1` above. If the compiler uses the given bounds,\n+declaration for ``F1`` above. If the compiler uses the given bounds,\n it would need 9 bits to hold the largest positive value (and typically\n that means 16 bits on all machines). But if the implementation chooses\n the +127.0 bound then it can fit values of the type in 8 bits.\n@@ -67,7 +67,7 @@ We could imagine three types of implementation:\n (a) those that narrow the range automatically if they can figure\n     out that the narrower range will allow storage in a smaller machine unit,\n \n-(b) those that will narrow only if forced to by a `'Size` clause, and\n+(b) those that will narrow only if forced to by a ``'Size`` clause, and\n \n (c) those that will never narrow.\n \n@@ -90,9 +90,9 @@ and no real compiler would do this. All real compilers will fall into one of\n the categories (a), (b) or (c) above.\n \n So, how do you get the compiler to do what you want? The answer is give the\n-actual bounds you want, and then use a `'Small` clause and a\n-`'Size` clause to absolutely pin down what the compiler does.\n-E.g., for `F2` above, we will write:\n+actual bounds you want, and then use a ``'Small`` clause and a\n+``'Size`` clause to absolutely pin down what the compiler does.\n+E.g., for ``F2`` above, we will write:\n \n .. code-block:: ada\n \n@@ -161,7 +161,7 @@ Ada 95 and later versions of the standard:\n * *Character literals*\n \n   Some uses of character literals are ambiguous.  Since Ada 95 has introduced\n-  `Wide_Character` as a new predefined character type, some uses of\n+  ``Wide_Character`` as a new predefined character type, some uses of\n   character literals that were legal in Ada 83 are illegal in Ada 95.\n   For example:\n \n@@ -170,7 +170,7 @@ Ada 95 and later versions of the standard:\n        for Char in 'A' .. 'Z' loop ... end loop;\n \n   The problem is that 'A' and 'Z' could be from either\n-  `Character` or `Wide_Character`.  The simplest correction\n+  ``Character`` or ``Wide_Character``.  The simplest correction\n   is to make the type explicit; e.g.:\n \n   .. code-block:: ada\n@@ -179,8 +179,8 @@ Ada 95 and later versions of the standard:\n \n * *New reserved words*\n \n-  The identifiers `abstract`, `aliased`, `protected`,\n-  `requeue`, `tagged`, and `until` are reserved in Ada 95.\n+  The identifiers ``abstract``, ``aliased``, ``protected``,\n+  ``requeue``, ``tagged``, and ``until`` are reserved in Ada 95.\n   Existing Ada 83 code using any of these identifiers must be edited to\n   use some alternative name.\n \n@@ -207,38 +207,38 @@ Ada 95 and later versions of the standard:\n   body if it is empty, or, if it is non-empty, introduce a dummy declaration\n   into the spec that makes the body required.  One approach is to add a private\n   part to the package declaration (if necessary), and define a parameterless\n-  procedure called `Requires_Body`, which must then be given a dummy\n+  procedure called ``Requires_Body``, which must then be given a dummy\n   procedure body in the package body, which then becomes required.\n   Another approach (assuming that this does not introduce elaboration\n-  circularities) is to add an `Elaborate_Body` pragma to the package spec,\n+  circularities) is to add an ``Elaborate_Body`` pragma to the package spec,\n   since one effect of this pragma is to require the presence of a package body.\n \n * *Numeric_Error is the same exception as Constraint_Error*\n \n-  In Ada 95, the exception `Numeric_Error` is a renaming of `Constraint_Error`.\n+  In Ada 95, the exception ``Numeric_Error`` is a renaming of ``Constraint_Error``.\n   This means that it is illegal to have separate exception handlers for\n   the two exceptions.  The fix is simply to remove the handler for the\n-  `Numeric_Error` case (since even in Ada 83, a compiler was free to raise\n-  `Constraint_Error` in place of `Numeric_Error` in all cases).\n+  ``Numeric_Error`` case (since even in Ada 83, a compiler was free to raise\n+  ``Constraint_Error`` in place of ``Numeric_Error`` in all cases).\n \n * *Indefinite subtypes in generics*\n \n-  In Ada 83, it was permissible to pass an indefinite type (e.g, `String`)\n+  In Ada 83, it was permissible to pass an indefinite type (e.g, ``String``)\n   as the actual for a generic formal private type, but then the instantiation\n   would be illegal if there were any instances of declarations of variables\n   of this type in the generic body.  In Ada 95, to avoid this clear violation\n   of the methodological principle known as the 'contract model',\n   the generic declaration explicitly indicates whether\n   or not such instantiations are permitted.  If a generic formal parameter\n-  has explicit unknown discriminants, indicated by using `(<>)` after the\n+  has explicit unknown discriminants, indicated by using ``(<>)`` after the\n   subtype name, then it can be instantiated with indefinite types, but no\n   stand-alone variables can be declared of this type.  Any attempt to declare\n   such a variable will result in an illegality at the time the generic is\n-  declared.  If the `(<>)` notation is not used, then it is illegal\n+  declared.  If the ``(<>)`` notation is not used, then it is illegal\n   to instantiate the generic with an indefinite type.\n   This is the potential incompatibility issue when porting Ada 83 code to Ada 95.\n   It will show up as a compile time error, and\n-  the fix is usually simply to add the `(<>)` to the generic declaration.\n+  the fix is usually simply to add the ``(<>)`` to the generic declaration.\n \n \n .. _More_deterministic_semantics:\n@@ -273,21 +273,21 @@ The worst kind of incompatibility is one where a program that is legal in\n Ada 83 is also legal in Ada 95 but can have an effect in Ada 95 that was not\n possible in Ada 83.  Fortunately this is extremely rare, but the one\n situation that you should be alert to is the change in the predefined type\n-`Character` from 7-bit ASCII to 8-bit Latin-1.\n+``Character`` from 7-bit ASCII to 8-bit Latin-1.\n \n     .. index:: Latin-1\n \n-* *Range of type `Character`*\n+* *Range of type ``Character``*\n \n-  The range of `Standard.Character` is now the full 256 characters\n+  The range of ``Standard.Character`` is now the full 256 characters\n   of Latin-1, whereas in most Ada 83 implementations it was restricted\n   to 128 characters. Although some of the effects of\n   this change will be manifest in compile-time rejection of legal\n   Ada 83 programs it is possible for a working Ada 83 program to have\n   a different effect in Ada 95, one that was not permitted in Ada 83.\n   As an example, the expression\n-  `Character'Pos(Character'Last)` returned `127` in Ada 83 and now\n-  delivers `255` as its value.\n+  ``Character'Pos(Character'Last)`` returned ``127`` in Ada 83 and now\n+  delivers ``255`` as its value.\n   In general, you should look at the logic of any\n   character-processing Ada 83 program and see whether it needs to be adapted\n   to work correctly with Latin-1.  Note that the predefined Ada 95 API has a\n@@ -313,7 +313,7 @@ Other language compatibility issues\n   as identifiers as in Ada 83.  However,\n   in practice, it is usually advisable to make the necessary modifications\n   to the program to remove the need for using this switch.\n-  See the `Compiling Different Versions of Ada` section in\n+  See the ``Compiling Different Versions of Ada`` section in\n   the :title:`GNAT User's Guide`.\n \n \n@@ -324,8 +324,8 @@ Other language compatibility issues\n   compilers are allowed, but not required, to implement these missing\n   elements.  In contrast with some other compilers, GNAT implements all\n   such pragmas and attributes, eliminating this compatibility concern.  These\n-  include `pragma Interface` and the floating point type attributes\n-  (`Emax`, `Mantissa`, etc.), among other items.\n+  include ``pragma Interface`` and the floating point type attributes\n+  (``Emax``, ``Mantissa``, etc.), among other items.\n \n \n .. _Compatibility_between_Ada_95_and_Ada_2005:\n@@ -343,20 +343,20 @@ for a complete description please see the\n \n * *New reserved words.*\n \n-  The words `interface`, `overriding` and `synchronized` are\n+  The words ``interface``, ``overriding`` and ``synchronized`` are\n   reserved in Ada 2005.\n   A pre-Ada 2005 program that uses any of these as an identifier will be\n   illegal.\n \n * *New declarations in predefined packages.*\n \n   A number of packages in the predefined environment contain new declarations:\n-  `Ada.Exceptions`, `Ada.Real_Time`, `Ada.Strings`,\n-  `Ada.Strings.Fixed`, `Ada.Strings.Bounded`,\n-  `Ada.Strings.Unbounded`, `Ada.Strings.Wide_Fixed`,\n-  `Ada.Strings.Wide_Bounded`, `Ada.Strings.Wide_Unbounded`,\n-  `Ada.Tags`, `Ada.Text_IO`, and `Interfaces.C`.\n-  If an Ada 95 program does a `with` and `use` of any of these\n+  ``Ada.Exceptions``, ``Ada.Real_Time``, ``Ada.Strings``,\n+  ``Ada.Strings.Fixed``, ``Ada.Strings.Bounded``,\n+  ``Ada.Strings.Unbounded``, ``Ada.Strings.Wide_Fixed``,\n+  ``Ada.Strings.Wide_Bounded``, ``Ada.Strings.Wide_Unbounded``,\n+  ``Ada.Tags``, ``Ada.Text_IO``, and ``Interfaces.C``.\n+  If an Ada 95 program does a ``with`` and ``use`` of any of these\n   packages, the new declarations may cause name clashes.\n \n * *Access parameters.*\n@@ -382,7 +382,7 @@ for a complete description please see the\n   are now ambiguous.\n   The ambiguity may be resolved either by applying a type conversion to the\n   expression, or by explicitly invoking the operation from package\n-  `Standard`.\n+  ``Standard``.\n \n * *Return-by-reference types.*\n \n@@ -411,17 +411,17 @@ Implementation-defined pragmas\n \n Ada compilers are allowed to supplement the language-defined pragmas, and\n these are a potential source of non-portability.  All GNAT-defined pragmas\n-are described in the `Implementation Defined Pragmas` chapter of the\n-:title:`GNAT Reference Manual`, and these include several that are specifically\n+are described in :ref:`Implementation_Defined_Pragmas`,\n+and these include several that are specifically\n intended to correspond to other vendors' Ada 83 pragmas.\n-For migrating from VADS, the pragma `Use_VADS_Size` may be useful.\n+For migrating from VADS, the pragma ``Use_VADS_Size`` may be useful.\n For compatibility with HP Ada 83, GNAT supplies the pragmas\n-`Extend_System`, `Ident`, `Inline_Generic`,\n-`Interface_Name`, `Passive`, `Suppress_All`,\n-and `Volatile`.\n-Other relevant pragmas include `External` and `Link_With`.\n+``Extend_System``, ``Ident``, ``Inline_Generic``,\n+``Interface_Name``, ``Passive``, ``Suppress_All``,\n+and ``Volatile``.\n+Other relevant pragmas include ``External`` and ``Link_With``.\n Some vendor-specific\n-Ada 83 pragmas (`Share_Generic`, `Subtitle`, and `Title`) are\n+Ada 83 pragmas (``Share_Generic``, ``Subtitle``, and ``Title``) are\n recognized, thus\n avoiding compiler rejection of units that contain such pragmas; they are not\n relevant in a GNAT context and hence are not otherwise implemented.\n@@ -434,12 +434,12 @@ Implementation-defined attributes\n \n Analogous to pragmas, the set of attributes may be extended by an\n implementation.  All GNAT-defined attributes are described in\n-`Implementation Defined Attributes` section of the\n-:title:`GNAT Reference Manual`, and these include several that are specifically intended\n+:ref:`Implementation_Defined_Attributes`,\n+and these include several that are specifically intended\n to correspond to other vendors' Ada 83 attributes.  For migrating from VADS,\n-the attribute `VADS_Size` may be useful.  For compatibility with HP\n-Ada 83, GNAT supplies the attributes `Bit`, `Machine_Size` and\n-`Type_Class`.\n+the attribute ``VADS_Size`` may be useful.  For compatibility with HP\n+Ada 83, GNAT supplies the attributes ``Bit``, ``Machine_Size`` and\n+``Type_Class``.\n \n .. _Libraries:\n \n@@ -474,24 +474,24 @@ Program_Error being raised due to an 'Access Before Elaboration': an attempt\n to invoke a subprogram before its body has been elaborated, or to instantiate\n a generic before the generic body has been elaborated.  By default GNAT\n attempts to choose a safe order (one that will not encounter access before\n-elaboration problems) by implicitly inserting `Elaborate` or\n-`Elaborate_All` pragmas where\n+elaboration problems) by implicitly inserting ``Elaborate`` or\n+``Elaborate_All`` pragmas where\n needed.  However, this can lead to the creation of elaboration circularities\n and a resulting rejection of the program by gnatbind.  This issue is\n-thoroughly described in the `Elaboration Order Handling in GNAT` appendix\n+thoroughly described in the *Elaboration Order Handling in GNAT* appendix\n in the :title:`GNAT User's Guide`.\n In brief, there are several\n ways to deal with this situation:\n \n * Modify the program to eliminate the circularities, e.g., by moving\n   elaboration-time code into explicitly-invoked procedures\n \n-* Constrain the elaboration order by including explicit `Elaborate_Body` or\n-  `Elaborate` pragmas, and then inhibit the generation of implicit\n-  `Elaborate_All`\n+* Constrain the elaboration order by including explicit ``Elaborate_Body`` or\n+  ``Elaborate`` pragmas, and then inhibit the generation of implicit\n+  ``Elaborate_All``\n   pragmas either globally (as an effect of the *-gnatE* switch) or locally\n   (by selectively suppressing elaboration checks via pragma\n-  `Suppress(Elaboration_Check)` when it is safe to do so).\n+  ``Suppress(Elaboration_Check)`` when it is safe to do so).\n \n \n .. _Target-specific_aspects:\n@@ -581,14 +581,14 @@ the cases most likely to arise in existing Ada 83 code.\n   Reference Manuals as implementation advice that is followed by GNAT.\n   The problem will show up as an error\n   message rejecting the size clause.  The fix is simply to provide\n-  the explicit pragma `Pack`, or for more fine tuned control, provide\n+  the explicit pragma ``Pack``, or for more fine tuned control, provide\n   a Component_Size clause.\n \n * *Meaning of Size Attribute*\n \n   The Size attribute in Ada 95 (and Ada 2005) for discrete types is defined as\n   the minimal number of bits required to hold values of the type.  For example,\n-  on a 32-bit machine, the size of `Natural` will typically be 31 and not\n+  on a 32-bit machine, the size of ``Natural`` will typically be 31 and not\n   32 (since no sign bit is required).  Some Ada 83 compilers gave 31, and\n   some 32 in this situation.  This problem will usually show up as a compile\n   time error, but not always.  It is a good idea to check all uses of the"}, {"sha": "b006f32e6bbd566f1a3b1580703c2e03462f6ca0", "filename": "gcc/ada/doc/gnat_rm/implementation_advice.rst", "status": "modified", "additions": 182, "deletions": 182, "changes": 364, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_advice.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_advice.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_advice.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -32,7 +32,7 @@ RM 1.1.3(20): Error Detection\n =============================\n \n   \"If an implementation detects the use of an unsupported Specialized Needs\n-  Annex feature at run time, it should raise `Program_Error` if\n+  Annex feature at run time, it should raise ``Program_Error`` if\n   feasible.\"\n \n Not relevant.  All specialized needs annex features are either supported,\n@@ -56,7 +56,7 @@ RM 1.1.5(12): Bounded Errors\n ============================\n \n   \"If an implementation detects a bounded error or erroneous\n-  execution, it should raise `Program_Error`.\"\n+  execution, it should raise ``Program_Error``.\"\n \n Followed in all cases in which the implementation detects a bounded\n error or erroneous execution.  Not all such situations are detected at\n@@ -111,10 +111,10 @@ RM 2.8(17-19): Pragmas\n   \"Normally, an implementation should not define pragmas that can\n   make an illegal program legal, except as follows:\n \n-  * A pragma used to complete a declaration, such as a pragma `Import`;\n+  * A pragma used to complete a declaration, such as a pragma ``Import``;\n \n   * A pragma used to configure the environment by adding, removing, or\n-    replacing `library_items`.\"\n+    replacing ``library_items``.\"\n \n See :ref:`RM_2_8_16_Pragmas`.\n \n@@ -126,15 +126,15 @@ RM 3.5.2(5): Alternative Character Sets\n =======================================\n \n   \"If an implementation supports a mode with alternative interpretations\n-  for `Character` and `Wide_Character`, the set of graphic\n-  characters of `Character` should nevertheless remain a proper\n-  subset of the set of graphic characters of `Wide_Character`.  Any\n+  for ``Character`` and ``Wide_Character``, the set of graphic\n+  characters of ``Character`` should nevertheless remain a proper\n+  subset of the set of graphic characters of ``Wide_Character``.  Any\n   character set 'localizations' should be reflected in the results of\n   the subprograms defined in the language-defined package\n-  `Characters.Handling` (see A.3) available in such a mode.  In a mode with\n-  an alternative interpretation of `Character`, the implementation should\n+  ``Characters.Handling`` (see A.3) available in such a mode.  In a mode with\n+  an alternative interpretation of ``Character``, the implementation should\n   also support a corresponding change in what is a legal\n-  `identifier_letter`.\"\n+  ``identifier_letter``.\"\n \n Not all wide character modes follow this advice, in particular the JIS\n and IEC modes reflect standard usage in Japan, and in these encoding,\n@@ -148,13 +148,13 @@ there is no such restriction.\n RM 3.5.4(28): Integer Types\n ===========================\n \n-  \"An implementation should support `Long_Integer` in addition to\n-  `Integer` if the target machine supports 32-bit (or longer)\n+  \"An implementation should support ``Long_Integer`` in addition to\n+  ``Integer`` if the target machine supports 32-bit (or longer)\n   arithmetic.  No other named integer subtypes are recommended for package\n-  `Standard`.  Instead, appropriate named integer subtypes should be\n-  provided in the library package `Interfaces` (see B.2).\"\n+  ``Standard``.  Instead, appropriate named integer subtypes should be\n+  provided in the library package ``Interfaces`` (see B.2).\"\n \n-`Long_Integer` is supported.  Other standard integer types are supported\n+``Long_Integer`` is supported.  Other standard integer types are supported\n so this advice is not fully followed.  These types\n are supported for convenient interface to C, and so that all hardware\n types of the machine are easily available.\n@@ -164,7 +164,7 @@ RM 3.5.4(29): Integer Types\n \n   \"An implementation for a two's complement machine should support\n   modular types with a binary modulus up to ``System.Max_Int*2+2``.  An\n-  implementation should support a non-binary modules up to `Integer'Last`.\"\n+  implementation should support a non-binary modules up to ``Integer'Last``.\"\n \n Followed.\n \n@@ -177,7 +177,7 @@ RM 3.5.5(8): Enumeration Values\n   subtype, if the value of the operand does not correspond to the internal\n   code for any enumeration literal of its type (perhaps due to an\n   un-initialized variable), then the implementation should raise\n-  `Program_Error`.  This is particularly important for enumeration\n+  ``Program_Error``.  This is particularly important for enumeration\n   types with noncontiguous internal codes specified by an\n   enumeration_representation_clause.\"\n \n@@ -188,19 +188,19 @@ Followed.\n RM 3.5.7(17): Float Types\n =========================\n \n-  \"An implementation should support `Long_Float` in addition to\n-  `Float` if the target machine supports 11 or more digits of\n+  \"An implementation should support ``Long_Float`` in addition to\n+  ``Float`` if the target machine supports 11 or more digits of\n   precision.  No other named floating point subtypes are recommended for\n-  package `Standard`.  Instead, appropriate named floating point subtypes\n-  should be provided in the library package `Interfaces` (see B.2).\"\n+  package ``Standard``.  Instead, appropriate named floating point subtypes\n+  should be provided in the library package ``Interfaces`` (see B.2).\"\n \n-`Short_Float` and `Long_Long_Float` are also provided.  The\n+``Short_Float`` and ``Long_Long_Float`` are also provided.  The\n former provides improved compatibility with other implementations\n supporting this type.  The latter corresponds to the highest precision\n floating-point type supported by the hardware.  On most machines, this\n-will be the same as `Long_Float`, but on some machines, it will\n+will be the same as ``Long_Float``, but on some machines, it will\n correspond to the IEEE extended form.  The notable case is all ia32\n-(x86) implementations, where `Long_Long_Float` corresponds to\n+(x86) implementations, where ``Long_Long_Float`` corresponds to\n the 80-bit extended precision format supported in hardware on this\n processor.  Note that the 128-bit format on SPARC is not supported,\n since this is a software rather than a hardware format.\n@@ -214,9 +214,9 @@ RM 3.6.2(11): Multidimensional Arrays\n \n   \"An implementation should normally represent multidimensional arrays in\n   row-major order, consistent with the notation used for multidimensional\n-  array aggregates (see 4.3.3).  However, if a pragma `Convention`\n-  (`Fortran`, ...) applies to a multidimensional array type, then\n-  column-major order should be used instead (see B.5, `Interfacing with Fortran`).\"\n+  array aggregates (see 4.3.3).  However, if a pragma ``Convention``\n+  (``Fortran``, ...) applies to a multidimensional array type, then\n+  column-major order should be used instead (see B.5, *Interfacing with Fortran*).\"\n \n Followed.\n \n@@ -225,13 +225,13 @@ Followed.\n RM 9.6(30-31): Duration'Small\n =============================\n \n-  \"Whenever possible in an implementation, the value of `Duration'Small`\n+  \"Whenever possible in an implementation, the value of ``Duration'Small``\n   should be no greater than 100 microseconds.\"\n \n-Followed.  (`Duration'Small` = 10**(-9)).\n+Followed.  (``Duration'Small`` = 10**(-9)).\n \n-  \"The time base for `delay_relative_statements` should be monotonic;\n-  it need not be the same time base as used for `Calendar.Clock`.\"\n+  \"The time base for ``delay_relative_statements`` should be monotonic;\n+  it need not be the same time base as used for ``Calendar.Clock``.\"\n \n Followed.\n \n@@ -255,23 +255,23 @@ advice without severely impacting efficiency of execution.\n RM 11.4.1(19): Exception Information\n ====================================\n \n-  \"`Exception_Message` by default and `Exception_Information`\n+  \"``Exception_Message`` by default and ``Exception_Information``\n   should produce information useful for\n-  debugging.  `Exception_Message` should be short, about one\n-  line.  `Exception_Information` can be long.  `Exception_Message`\n+  debugging.  ``Exception_Message`` should be short, about one\n+  line.  ``Exception_Information`` can be long.  ``Exception_Message``\n   should not include the\n-  `Exception_Name`.  `Exception_Information` should include both\n-  the `Exception_Name` and the `Exception_Message`.\"\n+  ``Exception_Name``.  ``Exception_Information`` should include both\n+  the ``Exception_Name`` and the ``Exception_Message``.\"\n \n Followed.  For each exception that doesn't have a specified\n-`Exception_Message`, the compiler generates one containing the location\n+``Exception_Message``, the compiler generates one containing the location\n of the raise statement.  This location has the form 'file_name:line', where\n file_name is the short file name (without path information) and line is the line\n number in the file.  Note that in the case of the Zero Cost Exception\n mechanism, these messages become redundant with the Exception_Information that\n contains a full backtrace of the calling sequence, so they are disabled.\n To disable explicitly the generation of the source location message, use the\n-Pragma `Discard_Names`.\n+Pragma ``Discard_Names``.\n \n .. index:: Suppression of checks\n \n@@ -312,7 +312,7 @@ For example:\n     for Y'Address use X'Address;>>\n \n \n-  \"An implementation need not support a specification for the `Size`\n+  \"An implementation need not support a specification for the ``Size``\n   for a given composite subtype, nor the size or storage place for an\n   object (including a component) of a given composite subtype, unless the\n   constraints on the subtype and its composite subcomponents (if any) are\n@@ -337,13 +337,13 @@ RM 13.2(6-8): Packed Types\n   speed of accessing components, subject to reasonable complexity in\n   addressing calculations.\n \n-  The recommended level of support pragma `Pack` is:\n+  The recommended level of support pragma ``Pack`` is:\n \n   For a packed record type, the components should be packed as tightly as\n   possible subject to the Sizes of the component subtypes, and subject to\n-  any `record_representation_clause` that applies to the type; the\n+  any *record_representation_clause* that applies to the type; the\n   implementation may, but need not, reorder components or cross aligned\n-  word boundaries to improve the packing.  A component whose `Size` is\n+  word boundaries to improve the packing.  A component whose ``Size`` is\n   greater than the word size may be allocated an integral number of words.\"\n \n Followed.  Tight packing of arrays is supported for all component sizes\n@@ -364,22 +364,22 @@ Followed.\n RM 13.3(14-19): Address Clauses\n ===============================\n \n-  \"For an array `X`, ``X'Address`` should point at the first\n+  \"For an array ``X``, ``X'Address`` should point at the first\n   component of the array, and not at the array bounds.\"\n \n Followed.\n \n-  \"The recommended level of support for the `Address` attribute is:\n+  \"The recommended level of support for the ``Address`` attribute is:\n \n-  ``X'Address`` should produce a useful result if `X` is an\n+  ``X'Address`` should produce a useful result if ``X`` is an\n   object that is aliased or of a by-reference type, or is an entity whose\n-  `Address` has been specified.\"\n+  ``Address`` has been specified.\"\n \n Followed.  A valid address will be produced even if none of those\n conditions have been met.  If necessary, the object is forced into\n memory to ensure the address is valid.\n \n-  \"An implementation should support `Address` clauses for imported\n+  \"An implementation should support ``Address`` clauses for imported\n   subprograms.\"\n \n Followed.\n@@ -389,7 +389,7 @@ Followed.\n \n Followed.\n \n-  \"If the `Address` of an object is specified, or it is imported or exported,\n+  \"If the ``Address`` of an object is specified, or it is imported or exported,\n   then the implementation should not perform optimizations based on\n   assumptions of no aliases.\"\n \n@@ -400,7 +400,7 @@ Followed.\n RM 13.3(29-35): Alignment Clauses\n =================================\n \n-  \"The recommended level of support for the `Alignment` attribute for\n+  \"The recommended level of support for the ``Alignment`` attribute for\n   subtypes is:\n \n   An implementation should support specified Alignments that are factors\n@@ -416,12 +416,12 @@ Followed.\n Followed.\n \n   \"An implementation need not support specified Alignments that are\n-  greater than the maximum `Alignment` the implementation ever returns by\n+  greater than the maximum ``Alignment`` the implementation ever returns by\n   default.\"\n \n Followed.\n \n-  \"The recommended level of support for the `Alignment` attribute for\n+  \"The recommended level of support for the ``Alignment`` attribute for\n   objects is:\n \n   Same as above, for subtypes, but in addition:\"\n@@ -440,23 +440,23 @@ Followed.\n RM 13.3(42-43): Size Clauses\n ============================\n \n-  \"The recommended level of support for the `Size` attribute of\n+  \"The recommended level of support for the ``Size`` attribute of\n   objects is:\n \n-  A `Size` clause should be supported for an object if the specified\n-  `Size` is at least as large as its subtype's `Size`, and\n+  A ``Size`` clause should be supported for an object if the specified\n+  ``Size`` is at least as large as its subtype's ``Size``, and\n   corresponds to a size in storage elements that is a multiple of the\n-  object's `Alignment` (if the `Alignment` is nonzero).\"\n+  object's ``Alignment`` (if the ``Alignment`` is nonzero).\"\n \n Followed.\n \n RM 13.3(50-56): Size Clauses\n ============================\n \n-  \"If the `Size` of a subtype is specified, and allows for efficient\n+  \"If the ``Size`` of a subtype is specified, and allows for efficient\n   independent addressability (see 9.10) on the target architecture, then\n-  the `Size` of the following objects of the subtype should equal the\n-  `Size` of the subtype:\n+  the ``Size`` of the following objects of the subtype should equal the\n+  ``Size`` of the subtype:\n \n   Aliased objects (including components).\"\n \n@@ -468,18 +468,18 @@ Followed.\n Followed. But note that this can be overridden by use of the implementation\n pragma Implicit_Packing in the case of packed arrays.\n \n-  \"The recommended level of support for the `Size` attribute of subtypes is:\n+  \"The recommended level of support for the ``Size`` attribute of subtypes is:\n \n-  The `Size` (if not specified) of a static discrete or fixed point\n+  The ``Size`` (if not specified) of a static discrete or fixed point\n   subtype should be the number of bits needed to represent each value\n   belonging to the subtype using an unbiased representation, leaving space\n   for a sign bit only if the subtype contains negative values.  If such a\n   subtype is a first subtype, then an implementation should support a\n-  specified `Size` for it that reflects this representation.\"\n+  specified ``Size`` for it that reflects this representation.\"\n \n Followed.\n \n-  \"For a subtype implemented with levels of indirection, the `Size`\n+  \"For a subtype implemented with levels of indirection, the ``Size``\n   should include the size of the pointers, but not the size of what they\n   point at.\"\n \n@@ -490,11 +490,11 @@ Followed.\n RM 13.3(71-73): Component Size Clauses\n ======================================\n \n-  \"The recommended level of support for the `Component_Size`\n+  \"The recommended level of support for the ``Component_Size``\n   attribute is:\n \n-  An implementation need not support specified `Component_Sizes` that are\n-  less than the `Size` of the component subtype.\"\n+  An implementation need not support specified ``Component_Sizes`` that are\n+  less than the ``Size`` of the component subtype.\"\n \n Followed.\n \n@@ -520,7 +520,7 @@ RM 13.4(9-10): Enumeration Representation Clauses\n \n   An implementation need not support enumeration representation clauses\n   for boolean types, but should at minimum support the internal codes in\n-  the range `System.Min_Int .. System.Max_Int`.\"\n+  the range ``System.Min_Int .. System.Max_Int``.\"\n \n Followed.\n \n@@ -532,7 +532,7 @@ RM 13.5.1(17-22): Record Representation Clauses\n ===============================================\n \n   \"The recommended level of support for\n-  `record_representation_clauses` is:\n+  *record_representation_clause*\\ s is:\n \n   An implementation should support storage places that can be extracted\n   with a load, mask, shift sequence of machine code, and set with a load,\n@@ -542,13 +542,13 @@ RM 13.5.1(17-22): Record Representation Clauses\n Followed.\n \n   \"A storage place should be supported if its size is equal to the\n-  `Size` of the component subtype, and it starts and ends on a\n-  boundary that obeys the `Alignment` of the component subtype.\"\n+  ``Size`` of the component subtype, and it starts and ends on a\n+  boundary that obeys the ``Alignment`` of the component subtype.\"\n \n Followed.\n \n   \"If the default bit ordering applies to the declaration of a given type,\n-  then for a component whose subtype's `Size` is less than the word\n+  then for a component whose subtype's ``Size`` is less than the word\n   size, any storage place that does not cross an aligned word boundary\n   should be supported.\"\n \n@@ -561,7 +561,7 @@ Followed.  The storage place for the tag field is the beginning of the tagged\n record, and its size is Address'Size.  GNAT will reject an explicit component\n clause for the tag field.\n \n-  \"An implementation need not support a `component_clause` for a\n+  \"An implementation need not support a *component_clause* for a\n   component of an extension part if the storage place is not after the\n   storage places of all components of the parent type, whether or not\n   those storage places had been specified.\"\n@@ -591,7 +591,7 @@ RM 13.5.3(7-8): Bit Ordering\n \n   \"The recommended level of support for the non-default bit ordering is:\n \n-  If `Word_Size` = `Storage_Unit`, then the implementation\n+  If ``Word_Size`` = ``Storage_Unit``, then the implementation\n   should support the non-default bit ordering in addition to the default\n   bit ordering.\"\n \n@@ -607,33 +607,33 @@ RM 13.7(37): Address as Private\n \n Followed.\n \n-.. index:: Operations, on `Address`\n+.. index:: Operations, on ``Address``\n \n .. index:: Address, operations of\n \n RM 13.7.1(16): Address Operations\n =================================\n \n-  \"Operations in `System` and its children should reflect the target\n+  \"Operations in ``System`` and its children should reflect the target\n   environment semantics as closely as is reasonable.  For example, on most\n   machines, it makes sense for address arithmetic to 'wrap around'.\n-  Operations that do not make sense should raise `Program_Error`.\"\n+  Operations that do not make sense should raise ``Program_Error``.\"\n \n Followed.  Address arithmetic is modular arithmetic that wraps around.  No\n-operation raises `Program_Error`, since all operations make sense.\n+operation raises ``Program_Error``, since all operations make sense.\n \n .. index:: Unchecked conversion\n \n RM 13.9(14-17): Unchecked Conversion\n ====================================\n \n-  \"The `Size` of an array object should not include its bounds; hence,\n+  \"The ``Size`` of an array object should not include its bounds; hence,\n   the bounds should not be part of the converted data.\"\n \n Followed.\n \n   \"The implementation should not generate unnecessary run-time checks to\n-  ensure that the representation of `S` is a representation of the\n+  ensure that the representation of ``S`` is a representation of the\n   target type.  It should take advantage of the permission to return by\n   reference when possible.  Restrictions on unchecked conversions should be\n   avoided unless required by the target environment.\"\n@@ -696,7 +696,7 @@ Followed.\n RM 13.11.2(17): Unchecked Deallocation\n ======================================\n \n-  \"For a standard storage pool, `Free` should actually reclaim the\n+  \"For a standard storage pool, ``Free`` should actually reclaim the\n   storage.\"\n \n Followed.\n@@ -707,8 +707,8 @@ RM 13.13.2(17): Stream Oriented Attributes\n ==========================================\n \n   \"If a stream element is the same size as a storage element, then the\n-  normal in-memory representation should be used by `Read` and\n-  `Write` for scalar objects.  Otherwise, `Read` and `Write`\n+  normal in-memory representation should be used by ``Read`` and\n+  ``Write`` for scalar objects.  Otherwise, ``Read`` and ``Write``\n   should use the smallest number of stream elements needed to represent\n   all values in the base range of the scalar type.\"\n \n@@ -717,7 +717,7 @@ which specifies using the size of the first subtype.\n However, such an implementation is based on direct binary\n representations and is therefore target- and endianness-dependent.\n To address this issue, GNAT also supplies an alternate implementation\n-of the stream attributes `Read` and `Write`,\n+of the stream attributes ``Read`` and ``Write``,\n which uses the target-independent XDR standard representation\n for scalar types.\n \n@@ -730,13 +730,13 @@ for scalar types.\n .. index:: Stream oriented attributes\n \n The XDR implementation is provided as an alternative body of the\n-`System.Stream_Attributes` package, in the file\n+``System.Stream_Attributes`` package, in the file\n :file:`s-stratt-xdr.adb` in the GNAT library.\n There is no :file:`s-stratt-xdr.ads` file.\n In order to install the XDR implementation, do the following:\n \n * Replace the default implementation of the\n-  `System.Stream_Attributes` package with the XDR implementation.\n+  ``System.Stream_Attributes`` package with the XDR implementation.\n   For example on a Unix platform issue the commands:\n \n   .. code-block:: sh\n@@ -747,7 +747,7 @@ In order to install the XDR implementation, do the following:\n \n *\n   Rebuild the GNAT run-time library as documented in\n-  the `GNAT and Libraries` section of the :title:`GNAT User's Guide`.\n+  the *GNAT and Libraries* section of the :title:`GNAT User's Guide`.\n \n RM A.1(52): Names of Predefined Numeric Types\n =============================================\n@@ -762,12 +762,12 @@ Followed.\n \n .. index:: Ada.Characters.Handling\n \n-RM A.3.2(49): `Ada.Characters.Handling`\n-=======================================\n+RM A.3.2(49): ``Ada.Characters.Handling``\n+=========================================\n \n-  \"If an implementation provides a localized definition of `Character`\n-  or `Wide_Character`, then the effects of the subprograms in\n-  `Characters.Handling` should reflect the localizations.\n+  \"If an implementation provides a localized definition of ``Character``\n+  or ``Wide_Character``, then the effects of the subprograms in\n+  ``Characters.Handling`` should reflect the localizations.\n   See also 3.5.2.\"\n \n Followed.  GNAT provides no such localized definitions.\n@@ -787,14 +787,14 @@ Followed.  No implicit pointers or dynamic allocation are used.\n RM A.5.2(46-47): Random Number Generation\n =========================================\n \n-  \"Any storage associated with an object of type `Generator` should be\n+  \"Any storage associated with an object of type ``Generator`` should be\n   reclaimed on exit from the scope of the object.\"\n \n Followed.\n \n   \"If the generator period is sufficiently long in relation to the number\n   of distinct initiator values, then each possible value of\n-  `Initiator` passed to `Reset` should initiate a sequence of\n+  ``Initiator`` passed to ``Reset`` should initiate a sequence of\n   random numbers that does not, in a practical sense, overlap the sequence\n   initiated by any other value.  If this is not possible, then the mapping\n   between initiator values and generator states should be a rapidly\n@@ -805,72 +805,72 @@ condition here to hold true.\n \n .. index:: Get_Immediate\n \n-RM A.10.7(23): `Get_Immediate`\n-==============================\n+RM A.10.7(23): ``Get_Immediate``\n+================================\n \n-  \"The `Get_Immediate` procedures should be implemented with\n+  \"The ``Get_Immediate`` procedures should be implemented with\n   unbuffered input.  For a device such as a keyboard, input should be\n   available if a key has already been typed, whereas for a disk\n   file, input should always be available except at end of file.  For a file\n   associated with a keyboard-like device, any line-editing features of the\n   underlying operating system should be disabled during the execution of\n-  `Get_Immediate`.\"\n+  ``Get_Immediate``.\"\n \n Followed on all targets except VxWorks. For VxWorks, there is no way to\n provide this functionality that does not result in the input buffer being\n-flushed before the `Get_Immediate` call. A special unit\n-`Interfaces.Vxworks.IO` is provided that contains routines to enable\n+flushed before the ``Get_Immediate`` call. A special unit\n+``Interfaces.Vxworks.IO`` is provided that contains routines to enable\n this functionality.\n \n .. index:: Export\n \n-RM B.1(39-41): Pragma `Export`\n-==============================\n+RM B.1(39-41): Pragma ``Export``\n+================================\n \n-  \"If an implementation supports pragma `Export` to a given language,\n+  \"If an implementation supports pragma ``Export`` to a given language,\n   then it should also allow the main subprogram to be written in that\n   language.  It should support some mechanism for invoking the elaboration\n   of the Ada library units included in the system, and for invoking the\n   finalization of the environment task.  On typical systems, the\n   recommended mechanism is to provide two subprograms whose link names are\n-  `adainit` and `adafinal`.  `adainit` should contain the\n-  elaboration code for library units.  `adafinal` should contain the\n+  ``adainit`` and ``adafinal``.  ``adainit`` should contain the\n+  elaboration code for library units.  ``adafinal`` should contain the\n   finalization code.  These subprograms should have no effect the second\n   and subsequent time they are called.\"\n \n Followed.\n \n   \"Automatic elaboration of pre-elaborated packages should be\n-  provided when pragma `Export` is supported.\"\n+  provided when pragma ``Export`` is supported.\"\n \n Followed when the main program is in Ada.  If the main program is in a\n foreign language, then\n-`adainit` must be called to elaborate pre-elaborated\n+``adainit`` must be called to elaborate pre-elaborated\n packages.\n \n-  \"For each supported convention `L` other than `Intrinsic`, an\n-  implementation should support `Import` and `Export` pragmas\n-  for objects of `L`-compatible types and for subprograms, and pragma\n-  `Convention` for `L`-eligible types and for subprograms,\n+  \"For each supported convention *L* other than ``Intrinsic``, an\n+  implementation should support ``Import`` and ``Export`` pragmas\n+  for objects of *L*\\ -compatible types and for subprograms, and pragma\n+  `Convention` for *L*\\ -eligible types and for subprograms,\n   presuming the other language has corresponding features.  Pragma\n-  `Convention` need not be supported for scalar types.\"\n+  ``Convention`` need not be supported for scalar types.\"\n \n Followed.\n \n .. index:: Package Interfaces\n \n .. index:: Interfaces\n \n-RM B.2(12-13): Package `Interfaces`\n-===================================\n+RM B.2(12-13): Package ``Interfaces``\n+=====================================\n \n   \"For each implementation-defined convention identifier, there should be a\n   child package of package Interfaces with the corresponding name.  This\n   package should contain any declarations that would be useful for\n   interfacing to the language (implementation) represented by the\n   convention.  Any declarations useful for interfacing to any language on\n   the given hardware architecture should be provided directly in\n-  `Interfaces`.\"\n+  ``Interfaces``.\"\n \n Followed.\n \n@@ -898,37 +898,37 @@ Followed.\n \n Followed.\n \n-  \"An Ada `in` scalar parameter is passed as a scalar argument to a C\n+  \"An Ada ``in`` scalar parameter is passed as a scalar argument to a C\n   function.\"\n \n Followed.\n \n-  \"An Ada `in` parameter of an access-to-object type with designated\n-  type `T` is passed as a ``t*`` argument to a C function,\n-  where ``t`` is the C type corresponding to the Ada type `T`.\"\n+  \"An Ada ``in`` parameter of an access-to-object type with designated\n+  type ``T`` is passed as a ``t*`` argument to a C function,\n+  where ``t`` is the C type corresponding to the Ada type ``T``.\"\n \n Followed.\n \n-  \"An Ada access `T` parameter, or an Ada `out` or `in out`\n-  parameter of an elementary type `T`, is passed as a ``t*``\n+  \"An Ada access ``T`` parameter, or an Ada ``out`` or ``in out``\n+  parameter of an elementary type ``T``, is passed as a ``t*``\n   argument to a C function, where ``t`` is the C type corresponding to\n-  the Ada type `T`.  In the case of an elementary `out` or\n-  `in out` parameter, a pointer to a temporary copy is used to\n+  the Ada type ``T``.  In the case of an elementary ``out`` or\n+  ``in out`` parameter, a pointer to a temporary copy is used to\n   preserve by-copy semantics.\"\n \n Followed.\n \n-  \"An Ada parameter of a record type `T`, of any mode, is passed as a\n+  \"An Ada parameter of a record type ``T``, of any mode, is passed as a\n   ``t*`` argument to a C function, where ``t`` is the C\n-  structure corresponding to the Ada type `T`.\"\n+  structure corresponding to the Ada type ``T``.\"\n \n Followed.  This convention may be overridden by the use of the C_Pass_By_Copy\n pragma, or Convention, or by explicitly specifying the mechanism for a given\n call using an extended import or export pragma.\n \n-  \"An Ada parameter of an array type with component type `T`, of any\n+  \"An Ada parameter of an array type with component type ``T``, of any\n   mode, is passed as a ``t*`` argument to a C function, where\n-  ``t`` is the C type corresponding to the Ada type `T`.\"\n+  ``t`` is the C type corresponding to the Ada type ``T``.\"\n \n Followed.\n \n@@ -948,8 +948,8 @@ RM B.4(95-98): Interfacing with COBOL\n \n Followed.\n \n-  \"An Ada access `T` parameter is passed as a ``BY REFERENCE`` data item of\n-  the COBOL type corresponding to `T`.\"\n+  \"An Ada access ``T`` parameter is passed as a ``BY REFERENCE`` data item of\n+  the COBOL type corresponding to ``T``.\"\n \n Followed.\n \n@@ -982,9 +982,9 @@ Followed.\n \n Followed.\n \n-  \"An Ada parameter of an elementary, array, or record type `T` is\n-  passed as a `T` argument to a Fortran procedure, where `T` is\n-  the Fortran type corresponding to the Ada type `T`, and where the\n+  \"An Ada parameter of an elementary, array, or record type ``T`` is\n+  passed as a ``T`` argument to a Fortran procedure, where ``T`` is\n+  the Fortran type corresponding to the Ada type ``T``, and where the\n   INTENT attribute of the corresponding dummy argument matches the Ada\n   formal parameter mode; the Fortran implementation's parameter passing\n   conventions are used.  For elementary types, a local copy is used if\n@@ -1011,7 +1011,7 @@ Followed.\n \n   \"The interfacing pragmas (see Annex B) should support interface to\n   assembler; the default assembler should be associated with the\n-  convention identifier `Assembler`.\"\n+  convention identifier ``Assembler``.\"\n \n Followed.\n \n@@ -1065,7 +1065,7 @@ Followed on any target supporting such operations.\n RM C.3(28): Interrupt Support\n =============================\n \n-  \"If the `Ceiling_Locking` policy is not in effect, the\n+  \"If the ``Ceiling_Locking`` policy is not in effect, the\n   implementation should provide means for the application to specify which\n   interrupts are to be blocked during protected actions, if the underlying\n   system allows for a finer-grain control of interrupt blocking.\"\n@@ -1089,17 +1089,17 @@ such direct calls.\n \n Followed.  Compile time warnings are given when possible.\n \n-.. index:: Package `Interrupts`\n+.. index:: Package ``Interrupts``\n \n .. index:: Interrupts\n \n-RM C.3.2(25): Package `Interrupts`\n-==================================\n+RM C.3.2(25): Package ``Interrupts``\n+====================================\n \n   \"If implementation-defined forms of interrupt handler procedures are\n   supported, such as protected procedures with parameters, then for each\n-  such form of a handler, a type analogous to `Parameterless_Handler`\n-  should be specified in a child package of `Interrupts`, with the\n+  such form of a handler, a type analogous to ``Parameterless_Handler``\n+  should be specified in a child package of ``Interrupts``, with the\n   same operations as in the predefined package Interrupts.\"\n \n Followed.\n@@ -1117,8 +1117,8 @@ RM C.4(14): Pre-elaboration Requirements\n Followed.  Executable code is generated in some cases, e.g., loops\n to initialize large arrays.\n \n-RM C.5(8): Pragma `Discard_Names`\n-=================================\n+RM C.5(8): Pragma ``Discard_Names``\n+===================================\n \n   \"If the pragma applies to an entity, then the implementation should\n   reduce the amount of storage used for storing names associated with that\n@@ -1138,9 +1138,9 @@ RM C.7.2(30): The Package Task_Attributes\n   recommended that the storage for task attributes will be pre-allocated\n   statically and not from the heap.  This can be accomplished by either\n   placing restrictions on the number and the size of the task's\n-  attributes, or by using the pre-allocated storage for the first `N`\n+  attributes, or by using the pre-allocated storage for the first ``N``\n   attribute objects, and the heap for the others.  In the latter case,\n-  `N` should be documented.\"\n+  ``N`` should be documented.\"\n \n Not followed.  This implementation is not targeted to such a domain.\n \n@@ -1153,8 +1153,8 @@ RM D.3(17): Locking Policies\n   locking policies defined by the implementation.\"\n \n Followed.  Two implementation-defined locking policies are defined,\n-whose names (`Inheritance_Locking` and\n-`Concurrent_Readers_Locking`) follow this suggestion.\n+whose names (``Inheritance_Locking`` and\n+``Concurrent_Readers_Locking``) follow this suggestion.\n \n .. index:: Entry queuing policies\n \n@@ -1171,10 +1171,10 @@ Followed.  No such implementation-defined queuing policies exist.\n RM D.6(9-10): Preemptive Abort\n ==============================\n \n-  \"Even though the `abort_statement` is included in the list of\n+  \"Even though the *abort_statement* is included in the list of\n   potentially blocking operations (see 9.5.1), it is recommended that this\n   statement be implemented in a way that never requires the task executing\n-  the `abort_statement` to block.\"\n+  the *abort_statement* to block.\"\n \n Followed.\n \n@@ -1194,29 +1194,29 @@ RM D.7(21): Tasking Restrictions\n \n GNAT currently takes advantage of these restrictions by providing an optimized\n run time when the Ravenscar profile and the GNAT restricted run time set\n-of restrictions are specified.  See pragma `Profile (Ravenscar)` and\n-pragma `Profile (Restricted)` for more details.\n+of restrictions are specified.  See pragma ``Profile (Ravenscar)`` and\n+pragma ``Profile (Restricted)`` for more details.\n \n .. index:: Time, monotonic\n \n RM D.8(47-49): Monotonic Time\n =============================\n \n   \"When appropriate, implementations should provide configuration\n-  mechanisms to change the value of `Tick`.\"\n+  mechanisms to change the value of ``Tick``.\"\n \n Such configuration mechanisms are not appropriate to this implementation\n and are thus not supported.\n \n-  \"It is recommended that `Calendar.Clock` and `Real_Time.Clock`\n+  \"It is recommended that ``Calendar.Clock`` and ``Real_Time.Clock``\n   be implemented as transformations of the same time base.\"\n \n Followed.\n \n \n   \"It is recommended that the best time base which exists in\n   the underlying system be available to the application through\n-  `Clock`.  `Best` may mean highest accuracy or largest range.\"\n+  ``Clock``.  `Best` may mean highest accuracy or largest range.\"\n \n Followed.\n \n@@ -1235,9 +1235,9 @@ RM E.5(28-29): Partition Communication Subsystem\n Followed by GLADE, a separately supplied PCS that can be used with\n GNAT.\n \n-  \"The `Write` operation on a stream of type `Params_Stream_Type`\n-  should raise `Storage_Error` if it runs out of space trying to\n-  write the `Item` into the stream.\"\n+  \"The ``Write`` operation on a stream of type ``Params_Stream_Type``\n+  should raise ``Storage_Error`` if it runs out of space trying to\n+  write the ``Item`` into the stream.\"\n \n Followed by GLADE, a separately supplied PCS that can be used with\n GNAT.\n@@ -1249,9 +1249,9 @@ RM F(7): COBOL Support\n \n   \"If COBOL (respectively, C) is widely supported in the target\n   environment, implementations supporting the Information Systems Annex\n-  should provide the child package `Interfaces.COBOL` (respectively,\n-  `Interfaces.C`) specified in Annex B and should support a\n-  `convention_identifier` of COBOL (respectively, C) in the interfacing\n+  should provide the child package ``Interfaces.COBOL`` (respectively,\n+  ``Interfaces.C``) specified in Annex B and should support a\n+  ``convention_identifier`` of COBOL (respectively, C) in the interfacing\n   pragmas (see Annex B), thus allowing Ada programs to interface with\n   programs written in that language.\"\n \n@@ -1263,9 +1263,9 @@ RM F.1(2): Decimal Radix Support\n ================================\n \n   \"Packed decimal should be used as the internal representation for objects\n-  of subtype `S` when `S`'Machine_Radix = 10.\"\n+  of subtype ``S`` when ``S``'Machine_Radix = 10.\"\n \n-Not followed.  GNAT ignores `S`'Machine_Radix and always uses binary\n+Not followed.  GNAT ignores ``S``'Machine_Radix and always uses binary\n representations.\n \n .. index:: Numerics\n@@ -1275,9 +1275,9 @@ RM G: Numerics\n \n   \"If Fortran (respectively, C) is widely supported in the target\n   environment, implementations supporting the Numerics Annex\n-  should provide the child package `Interfaces.Fortran` (respectively,\n-  `Interfaces.C`) specified in Annex B and should support a\n-  `convention_identifier` of Fortran (respectively, C) in the interfacing\n+  should provide the child package ``Interfaces.Fortran`` (respectively,\n+  ``Interfaces.C``) specified in Annex B and should support a\n+  ``convention_identifier`` of Fortran (respectively, C) in the interfacing\n   pragmas (see Annex B), thus allowing Ada programs to interface with\n   programs written in that language.\"\n \n@@ -1308,8 +1308,8 @@ Not followed.\n   complex operand and a real operand is that the imaginary operand remains\n   unchanged, an implementation should not perform this operation by first\n   promoting the real operand to complex type and then performing a full\n-  complex addition.  In implementations in which the `Signed_Zeros`\n-  attribute of the component type is `True` (and which therefore\n+  complex addition.  In implementations in which the ``Signed_Zeros``\n+  attribute of the component type is ``True`` (and which therefore\n   conform to IEC 559:1989 in regard to the handling of the sign of zero in\n   predefined arithmetic operations), the latter technique will not\n   generate the required result when the imaginary component of the complex\n@@ -1321,15 +1321,15 @@ Not followed.\n \n Not followed.\n \n-  \"Implementations in which `Real'Signed_Zeros` is `True` should\n+  \"Implementations in which ``Real'Signed_Zeros`` is ``True`` should\n   attempt to provide a rational treatment of the signs of zero results and\n-  result components.  As one example, the result of the `Argument`\n+  result components.  As one example, the result of the ``Argument``\n   function should have the sign of the imaginary component of the\n-  parameter `X` when the point represented by that parameter lies on\n+  parameter ``X`` when the point represented by that parameter lies on\n   the positive real axis; as another, the sign of the imaginary component\n-  of the `Compose_From_Polar` function should be the same as\n-  (respectively, the opposite of) that of the `Argument` parameter when that\n-  parameter has a value of zero and the `Modulus` parameter has a\n+  of the ``Compose_From_Polar`` function should be the same as\n+  (respectively, the opposite of) that of the ``Argument`` parameter when that\n+  parameter has a value of zero and the ``Modulus`` parameter has a\n   nonnegative (respectively, negative) value.\"\n \n Followed.\n@@ -1339,8 +1339,8 @@ Followed.\n RM G.1.2(49): Complex Elementary Functions\n ==========================================\n \n-  \"Implementations in which `Complex_Types.Real'Signed_Zeros` is\n-  `True` should attempt to provide a rational treatment of the signs\n+  \"Implementations in which ``Complex_Types.Real'Signed_Zeros`` is\n+  ``True`` should attempt to provide a rational treatment of the signs\n   of zero results and result components.  For example, many of the complex\n   elementary functions have components that are odd functions of one of\n   the parameter components; in these cases, the result component should\n@@ -1357,13 +1357,13 @@ RM G.2.4(19): Accuracy Requirements\n ===================================\n \n   \"The versions of the forward trigonometric functions without a\n-  `Cycle` parameter should not be implemented by calling the\n-  corresponding version with a `Cycle` parameter of\n-  `2.0*Numerics.Pi`, since this will not provide the required\n+  ``Cycle`` parameter should not be implemented by calling the\n+  corresponding version with a ``Cycle`` parameter of\n+  ``2.0*Numerics.Pi``, since this will not provide the required\n   accuracy in some portions of the domain.  For the same reason, the\n-  version of `Log` without a `Base` parameter should not be\n-  implemented by calling the corresponding version with a `Base`\n-  parameter of `Numerics.e`.\"\n+  version of ``Log`` without a ``Base`` parameter should not be\n+  implemented by calling the corresponding version with a ``Base``\n+  parameter of ``Numerics.e``.\"\n \n Followed.\n \n@@ -1374,10 +1374,10 @@ Followed.\n RM G.2.6(15): Complex Arithmetic Accuracy\n =========================================\n \n-  \"The version of the `Compose_From_Polar` function without a\n-  `Cycle` parameter should not be implemented by calling the\n-  corresponding version with a `Cycle` parameter of\n-  `2.0*Numerics.Pi`, since this will not provide the required\n+  \"The version of the ``Compose_From_Polar`` function without a\n+  ``Cycle`` parameter should not be implemented by calling the\n+  corresponding version with a ``Cycle`` parameter of\n+  ``2.0*Numerics.Pi``, since this will not provide the required\n   accuracy in some portions of the domain.\"\n \n Followed.\n@@ -1387,7 +1387,7 @@ Followed.\n RM H.6(15/2): Pragma Partition_Elaboration_Policy\n =================================================\n \n-  \"If the partition elaboration policy is `Sequential` and the\n+  \"If the partition elaboration policy is ``Sequential`` and the\n   Environment task becomes permanently blocked during elaboration then the\n   partition is deadlocked and it is recommended that the partition be\n   immediately terminated.\""}, {"sha": "be7338f74362762b9ded54da29ae91361c34c20d", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_aspects.rst", "status": "modified", "additions": 45, "deletions": 39, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -78,15 +78,15 @@ corresponding to :ref:`pragma Annotate<Pragma-Annotate>`.\n \n \n *Annotate => ID*\n-  Equivalent to `pragma Annotate (ID, Entity => Name);`\n+  Equivalent to ``pragma Annotate (ID, Entity => Name);``\n \n \n *Annotate => (ID)*\n-  Equivalent to `pragma Annotate (ID, Entity => Name);`\n+  Equivalent to ``pragma Annotate (ID, Entity => Name);``\n \n \n *Annotate => (ID ,ID {, ARG})*\n-  Equivalent to `pragma Annotate (ID, ID {, ARG}, Entity => Name);`\n+  Equivalent to ``pragma Annotate (ID, ID {, ARG}, Entity => Name);``\n \n Aspect Async_Readers\n ====================\n@@ -130,7 +130,7 @@ Aspect Dimension\n ================\n .. index:: Dimension\n \n-The `Dimension` aspect is used to specify the dimensions of a given\n+The ``Dimension`` aspect is used to specify the dimensions of a given\n subtype of a dimensioned numeric type. The aspect also specifies a symbol\n used when doing formatted output of dimensioned quantities. The syntax is::\n \n@@ -148,23 +148,23 @@ used when doing formatted output of dimensioned quantities. The syntax is::\n \n \n This aspect can only be applied to a subtype whose parent type has\n-a `Dimension_System` aspect. The aspect must specify values for\n+a ``Dimension_System`` aspect. The aspect must specify values for\n all dimensions of the system. The rational values are the powers of the\n corresponding dimensions that are used by the compiler to verify that\n physical (numeric) computations are dimensionally consistent. For example,\n the computation of a force must result in dimensions (L => 1, M => 1, T => -2).\n For further examples of the usage\n-of this aspect, see package `System.Dim.Mks`.\n+of this aspect, see package ``System.Dim.Mks``.\n Note that when the dimensioned type is an integer type, then any\n dimension value must be an integer literal.\n \n Aspect Dimension_System\n =======================\n .. index:: Dimension_System\n \n-The `Dimension_System` aspect is used to define a system of\n+The ``Dimension_System`` aspect is used to define a system of\n dimensions that will be used in subsequent subtype declarations with\n-`Dimension` aspects that reference this system. The syntax is::\n+``Dimension`` aspects that reference this system. The syntax is::\n \n   with Dimension_System => (DIMENSION {, DIMENSION});\n \n@@ -177,20 +177,20 @@ dimensions that will be used in subsequent subtype declarations with\n \n This aspect is applied to a type, which must be a numeric derived type\n (typically a floating-point type), that\n-will represent values within the dimension system. Each `DIMENSION`\n+will represent values within the dimension system. Each ``DIMENSION``\n corresponds to one particular dimension. A maximum of 7 dimensions may\n-be specified. `Unit_Name` is the name of the dimension (for example\n-`Meter`). `Unit_Symbol` is the shorthand used for quantities\n-of this dimension (for example `m` for `Meter`).\n-`Dim_Symbol` gives\n+be specified. ``Unit_Name`` is the name of the dimension (for example\n+``Meter``). ``Unit_Symbol`` is the shorthand used for quantities\n+of this dimension (for example ``m`` for ``Meter``).\n+``Dim_Symbol`` gives\n the identification within the dimension system (typically this is a\n-single letter, e.g. `L` standing for length for unit name `Meter`).\n-The `Unit_Symbol` is used in formatted output of dimensioned quantities.\n-The `Dim_Symbol` is used in error messages when numeric operations have\n+single letter, e.g. ``L`` standing for length for unit name ``Meter``).\n+The ``Unit_Symbol`` is used in formatted output of dimensioned quantities.\n+The ``Dim_Symbol`` is used in error messages when numeric operations have\n inconsistent dimensions.\n \n GNAT provides the standard definition of the International MKS system in\n-the run-time package `System.Dim.Mks`. You can easily define\n+the run-time package ``System.Dim.Mks``. You can easily define\n similar packages for cgs units or British units, and define conversion factors\n between values in different systems. The MKS system is characterized by the\n following aspect:\n@@ -208,7 +208,7 @@ following aspect:\n          (Unit_Name => Candela,  Unit_Symbol => \"cd\",  Dim_Symbol => 'J'));\n \n \n-Note that in the above type definition, we use the `at` symbol (``@``) to\n+Note that in the above type definition, we use the ``at`` symbol (``@``) to\n represent a theta character (avoiding the use of extended Latin-1\n characters in this context).\n \n@@ -219,9 +219,9 @@ Aspect Disable_Controlled\n =========================\n .. index:: Disable_Controlled\n \n-The aspect  `Disable_Controlled` is defined for controlled record types. If\n-active, this aspect causes suppression of all related calls to `Initialize`,\n-`Adjust`, and `Finalize`. The intended use is for conditional compilation,\n+The aspect  ``Disable_Controlled`` is defined for controlled record types. If\n+active, this aspect causes suppression of all related calls to ``Initialize``,\n+``Adjust``, and ``Finalize``. The intended use is for conditional compilation,\n where for example you might want a record to be controlled or not depending on\n whether some run-time check is enabled or suppressed.\n \n@@ -284,16 +284,16 @@ Aspect Invariant\n .. index:: Invariant\n \n This aspect is equivalent to :ref:`pragma Invariant<Pragma-Invariant>`. It is a\n-synonym for the language defined aspect `Type_Invariant` except\n-that it is separately controllable using pragma `Assertion_Policy`.\n+synonym for the language defined aspect ``Type_Invariant`` except\n+that it is separately controllable using pragma ``Assertion_Policy``.\n \n Aspect Invariant'Class\n ======================\n .. index:: Invariant'Class\n \n This aspect is equivalent to :ref:`pragma Type_Invariant_Class<Pragma-Type_Invariant_Class>`. It is a\n-synonym for the language defined aspect `Type_Invariant'Class` except\n-that it is separately controllable using pragma `Assertion_Policy`.\n+synonym for the language defined aspect ``Type_Invariant'Class`` except\n+that it is separately controllable using pragma ``Assertion_Policy``.\n \n Aspect Iterable\n ===============\n@@ -302,10 +302,10 @@ Aspect Iterable\n This aspect provides a light-weight mechanism for loops and quantified\n expressions over container types, without the overhead imposed by the tampering\n checks of standard Ada 2012 iterators. The value of the aspect is an aggregate\n-with four named components: `First`, `Next`, `Has_Element`, and `Element` (the\n+with four named components: ``First``, ``Next``, ``Has_Element``, and ``Element`` (the\n last one being optional). When only 3 components are specified, only the\n-`for .. in` form of iteration over cursors is available. When all 4 components\n-are specified, both this form and the `for .. of` form of iteration over\n+``for .. in`` form of iteration over cursors is available. When all 4 components\n+are specified, both this form and the ``for .. of`` form of iteration over\n elements are available. The following is a typical example of use:\n \n .. code-block:: ada\n@@ -316,30 +316,30 @@ elements are available. The following is a typical example of use:\n                    Has_Element  => Cursor_Has_Element,\n                   [Element      => Get_Element]);\n \n-* The value denoted by `First` must denote a primitive operation of the\n-  container type that returns a `Cursor`, which must a be a type declared in\n+* The value denoted by ``First`` must denote a primitive operation of the\n+  container type that returns a ``Cursor``, which must a be a type declared in\n   the container package or visible from it. For example:\n \n .. code-block:: ada\n \n   function First_Cursor (Cont : Container) return Cursor;\n \n-* The value of `Next` is a primitive operation of the container type that takes\n+* The value of ``Next`` is a primitive operation of the container type that takes\n   both a container and a cursor and yields a cursor. For example:\n \n .. code-block:: ada\n \n   function Advance (Cont : Container; Position : Cursor) return Cursor;\n \n-* The value of `Has_Element` is a primitive operation of the container type\n+* The value of ``Has_Element`` is a primitive operation of the container type\n   that takes both a container and a cursor and yields a boolean. For example:\n \n .. code-block:: ada\n \n   function Cursor_Has_Element (Cont : Container; Position : Cursor) return Boolean;\n \n-* The value of `Element` is a primitive operation of the container type that\n-  takes both a container and a cursor and yields an `Element_Type`, which must\n+* The value of ``Element`` is a primitive operation of the container type that\n+  takes both a container and a cursor and yields an ``Element_Type``, which must\n   be a type declared in the container package or visible from it. For example:\n \n .. code-block:: ada\n@@ -373,6 +373,12 @@ Aspect No_Elaboration_Code_All\n This aspect is equivalent to :ref:`pragma No_Elaboration_Code_All<Pragma-No_Elaboration_Code_All>`\n for a program unit.\n \n+Aspect No_Inline\n+================\n+.. index:: No_Inline\n+\n+This boolean aspect is equivalent to :ref:`pragma No_Inline<Pragma-No_Inline>`.\n+\n Aspect No_Tagged_Streams\n ========================\n .. index:: No_Tagged_Streams\n@@ -412,11 +418,11 @@ Aspect Predicate\n .. index:: Predicate\n \n This aspect is equivalent to :ref:`pragma Predicate<Pragma-Predicate>`. It is thus\n-similar to the language defined aspects `Dynamic_Predicate`\n-and `Static_Predicate` except that whether the resulting\n+similar to the language defined aspects ``Dynamic_Predicate``\n+and ``Static_Predicate`` except that whether the resulting\n predicate is static or dynamic is controlled by the form of the\n expression. It is also separately controllable using pragma\n-`Assertion_Policy`.\n+``Assertion_Policy``.\n \n Aspect Pure_Function\n ====================\n@@ -473,7 +479,7 @@ Aspect Shared\n .. index:: Shared\n \n This boolean aspect is equivalent to :ref:`pragma Shared<Pragma-Shared>`\n-and is thus a synonym for aspect `Atomic`.\n+and is thus a synonym for aspect ``Atomic``.\n \n Aspect Simple_Storage_Pool\n ==========================\n@@ -574,5 +580,5 @@ Aspect Warnings\n .. index:: Warnings\n \n This aspect is equivalent to the two argument form of :ref:`pragma Warnings<Pragma_Warnings>`,\n-where the first argument is `ON` or `OFF` and the second argument\n+where the first argument is ``ON`` or ``OFF`` and the second argument\n is the entity."}, {"sha": "6f0322339add2a08218e2d4511ab7fa7556a4406", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_attributes.rst", "status": "modified", "additions": 239, "deletions": 238, "changes": 477, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -27,7 +27,7 @@ Attribute Abort_Signal\n ======================\n .. index:: Abort_Signal\n \n-`Standard'Abort_Signal` (`Standard` is the only allowed\n+``Standard'Abort_Signal`` (``Standard`` is the only allowed\n prefix) provides the entity for the special exception used to signal\n task abort or asynchronous transfer of control.  Normally this attribute\n should only be used in the tasking runtime (it is highly peculiar, and\n@@ -36,13 +36,13 @@ intercept the abort exception).\n \n Attribute Address_Size\n ======================\n-.. index:: Size of `Address`\n+.. index:: Size of ``Address``\n \n .. index:: Address_Size\n \n-`Standard'Address_Size` (`Standard` is the only allowed\n+``Standard'Address_Size`` (``Standard`` is the only allowed\n prefix) is a static constant giving the number of bits in an\n-`Address`. It is the same value as System.Address'Size,\n+``Address``. It is the same value as System.Address'Size,\n but has the advantage of being static, while a direct\n reference to System.Address'Size is nonstatic because Address\n is a private type.\n@@ -51,7 +51,7 @@ Attribute Asm_Input\n ===================\n .. index:: Asm_Input\n \n-The `Asm_Input` attribute denotes a function that takes two\n+The ``Asm_Input`` attribute denotes a function that takes two\n parameters.  The first is a string, the second is an expression of the\n type designated by the prefix.  The first (string) argument is required\n to be a static expression, and is the constraint for the parameter,\n@@ -65,7 +65,7 @@ Attribute Asm_Output\n ====================\n .. index:: Asm_Output\n \n-The `Asm_Output` attribute denotes a function that takes two\n+The ``Asm_Output`` attribute denotes a function that takes two\n parameters.  The first is a string, the second is the name of a variable\n of the type designated by the attribute prefix.  The first (string)\n argument is required to be a static expression and designates the\n@@ -74,14 +74,14 @@ required).  The second argument is the variable to be updated with the\n result.  The possible values for constraint are the same as those used in\n the RTL, and are dependent on the configuration file used to build the\n GCC back end.  If there are no output operands, then this argument may\n-either be omitted, or explicitly given as `No_Output_Operands`.\n+either be omitted, or explicitly given as ``No_Output_Operands``.\n :ref:`Machine_Code_Insertions`\n \n Attribute Atomic_Always_Lock_Free\n =================================\n .. index:: Atomic_Always_Lock_Free\n \n-The prefix of the `Atomic_Always_Lock_Free` attribute is a type.\n+The prefix of the ``Atomic_Always_Lock_Free`` attribute is a type.\n The result is a Boolean value which is True if the type has discriminants,\n and False otherwise.  The result indicate whether atomic operations are\n supported by the target for the given type.\n@@ -90,11 +90,11 @@ Attribute Bit\n =============\n .. index:: Bit\n \n-``obj'Bit``, where `obj` is any object, yields the bit\n+``obj'Bit``, where ``obj`` is any object, yields the bit\n offset within the storage unit (byte) that contains the first bit of\n storage allocated for the object.  The value of this attribute is of the\n-type `Universal_Integer`, and is always a non-negative number not\n-exceeding the value of `System.Storage_Unit`.\n+type *universal_integer*, and is always a non-negative number not\n+exceeding the value of ``System.Storage_Unit``.\n \n For an object that is a variable or a constant allocated in a register,\n the value is zero.  (The use of this attribute does not force the\n@@ -105,26 +105,26 @@ to either the matching actual parameter or to a copy of the\n matching actual parameter.\n \n For an access object the value is zero.  Note that\n-``obj.all'Bit`` is subject to an `Access_Check` for the\n+``obj.all'Bit`` is subject to an ``Access_Check`` for the\n designated object.  Similarly for a record component\n ``X.C'Bit`` is subject to a discriminant check and\n ``X(I).Bit`` and ``X(I1..I2)'Bit``\n are subject to index checks.\n \n This attribute is designed to be compatible with the DEC Ada 83 definition\n-and implementation of the `Bit` attribute.\n+and implementation of the ``Bit`` attribute.\n \n Attribute Bit_Position\n ======================\n .. index:: Bit_Position\n \n-``R.C'Bit_Position``, where `R` is a record object and `C` is one\n+``R.C'Bit_Position``, where ``R`` is a record object and ``C`` is one\n of the fields of the record type, yields the bit\n offset within the record contains the first bit of\n storage allocated for the object.  The value of this attribute is of the\n-type `Universal_Integer`.  The value depends only on the field\n-`C` and is independent of the alignment of\n-the containing record `R`.\n+type *universal_integer*.  The value depends only on the field\n+``C`` and is independent of the alignment of\n+the containing record ``R``.\n \n Attribute Code_Address\n ======================\n@@ -133,7 +133,7 @@ Attribute Code_Address\n \n .. index:: Address of subprogram code\n \n-The `'Address`\n+The ``'Address``\n attribute may be applied to subprograms in Ada 95 and Ada 2005, but the\n intended effect seems to be to provide\n an address value which can be used to call the subprogram by means of\n@@ -148,42 +148,42 @@ an address clause as in the following example:\n   pragma Import (Ada, L);\n \n \n-A call to `L` is then expected to result in a call to `K`.\n+A call to ``L`` is then expected to result in a call to ``K``.\n In Ada 83, where there were no access-to-subprogram values, this was\n a common work-around for getting the effect of an indirect call.\n-GNAT implements the above use of `Address` and the technique\n+GNAT implements the above use of ``Address`` and the technique\n illustrated by the example code works correctly.\n \n However, for some purposes, it is useful to have the address of the start\n of the generated code for the subprogram.  On some architectures, this is\n-not necessarily the same as the `Address` value described above.\n-For example, the `Address` value may reference a subprogram\n+not necessarily the same as the ``Address`` value described above.\n+For example, the ``Address`` value may reference a subprogram\n descriptor rather than the subprogram itself.\n \n-The `'Code_Address` attribute, which can only be applied to\n+The ``'Code_Address`` attribute, which can only be applied to\n subprogram entities, always returns the address of the start of the\n generated code of the specified subprogram, which may or may not be\n-the same value as is returned by the corresponding `'Address`\n+the same value as is returned by the corresponding ``'Address``\n attribute.\n \n Attribute Compiler_Version\n ==========================\n .. index:: Compiler_Version\n \n-`Standard'Compiler_Version` (`Standard` is the only allowed\n+``Standard'Compiler_Version`` (``Standard`` is the only allowed\n prefix) yields a static string identifying the version of the compiler\n being used to compile the unit containing the attribute reference.\n \n Attribute Constrained\n =====================\n .. index:: Constrained\n \n-In addition to the usage of this attribute in the Ada RM, `GNAT`\n-also permits the use of the `'Constrained` attribute\n+In addition to the usage of this attribute in the Ada RM, GNAT\n+also permits the use of the ``'Constrained`` attribute\n in a generic template\n for any type, including types without discriminants. The value of this\n attribute in the generic instance when applied to a scalar type or a\n-record type without discriminants is always `True`. This usage is\n+record type without discriminants is always ``True``. This usage is\n compatible with older Ada compilers, including notably DEC Ada.\n \n \n@@ -195,11 +195,11 @@ Attribute Default_Bit_Order\n \n .. index:: Default_Bit_Order\n \n-`Standard'Default_Bit_Order` (`Standard` is the only\n-permissible prefix), provides the value `System.Default_Bit_Order`\n-as a `Pos` value (0 for `High_Order_First`, 1 for\n-`Low_Order_First`).  This is used to construct the definition of\n-`Default_Bit_Order` in package `System`.\n+``Standard'Default_Bit_Order`` (``Standard`` is the only\n+permissible prefix), provides the value ``System.Default_Bit_Order``\n+as a ``Pos`` value (0 for ``High_Order_First``, 1 for\n+``Low_Order_First``).  This is used to construct the definition of\n+``Default_Bit_Order`` in package ``System``.\n \n Attribute Default_Scalar_Storage_Order\n ======================================\n@@ -209,19 +209,19 @@ Attribute Default_Scalar_Storage_Order\n \n .. index:: Default_Scalar_Storage_Order\n \n-`Standard'Default_Scalar_Storage_Order` (`Standard` is the only\n+``Standard'Default_Scalar_Storage_Order`` (``Standard`` is the only\n permissible prefix), provides the current value of the default scalar storage\n-order (as specified using pragma `Default_Scalar_Storage_Order`, or\n-equal to `Default_Bit_Order` if unspecified) as a\n-`System.Bit_Order` value. This is a static attribute.\n+order (as specified using pragma ``Default_Scalar_Storage_Order``, or\n+equal to ``Default_Bit_Order`` if unspecified) as a\n+``System.Bit_Order`` value. This is a static attribute.\n \n Attribute Deref\n ===============\n .. index:: Deref\n \n-The attribute `typ'Deref(expr)` where `expr` is of type `System.Address` yields\n-the variable of type `typ` that is located at the given address. It is similar\n-to `(totyp (expr).all)`, where `totyp` is an unchecked conversion from address to\n+The attribute ``typ'Deref(expr)`` where ``expr`` is of type ``System.Address`` yields\n+the variable of type ``typ`` that is located at the given address. It is similar\n+to ``(totyp (expr).all)``, where ``totyp`` is an unchecked conversion from address to\n a named access-to-`typ` type, except that it yields a variable, so it can be\n used on the left side of an assignment.\n \n@@ -233,7 +233,7 @@ Attribute Descriptor_Size\n \n .. index:: Descriptor_Size\n \n-Nonstatic attribute `Descriptor_Size` returns the size in bits of the\n+Nonstatic attribute ``Descriptor_Size`` returns the size in bits of the\n descriptor allocated for a type.  The result is non-zero only for unconstrained\n array types and the returned value is of type universal integer.  In GNAT, an\n array descriptor contains bounds information and is located immediately before\n@@ -247,14 +247,14 @@ the first element of the array.\n \n The attribute takes into account any additional padding due to type alignment.\n In the example above, the descriptor contains two values of type\n-`Positive` representing the low and high bound.  Since `Positive` has\n-a size of 31 bits and an alignment of 4, the descriptor size is `2 * Positive'Size + 2` or 64 bits.\n+``Positive`` representing the low and high bound.  Since ``Positive`` has\n+a size of 31 bits and an alignment of 4, the descriptor size is ``2 * Positive'Size + 2`` or 64 bits.\n \n Attribute Elaborated\n ====================\n .. index:: Elaborated\n \n-The prefix of the `'Elaborated` attribute must be a unit name.  The\n+The prefix of the ``'Elaborated`` attribute must be a unit name.  The\n value is a Boolean which indicates whether or not the given unit has been\n elaborated.  This attribute is primarily intended for internal use by the\n generated code for dynamic elaboration checking, but it can also be used\n@@ -305,29 +305,29 @@ Attribute Emax\n \n .. index:: Emax\n \n-The `Emax` attribute is provided for compatibility with Ada 83.  See\n+The ``Emax`` attribute is provided for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n this attribute.\n \n Attribute Enabled\n =================\n .. index:: Enabled\n \n-The `Enabled` attribute allows an application program to check at compile\n+The ``Enabled`` attribute allows an application program to check at compile\n time to see if the designated check is currently enabled. The prefix is a\n simple identifier, referencing any predefined check name (other than\n-`All_Checks`) or a check name introduced by pragma Check_Name. If\n+``All_Checks``) or a check name introduced by pragma Check_Name. If\n no argument is given for the attribute, the check is for the general state\n of the check, if an argument is given, then it is an entity name, and the\n-check indicates whether an `Suppress` or `Unsuppress` has been\n+check indicates whether an ``Suppress`` or ``Unsuppress`` has been\n given naming the entity (if not, then the argument is ignored).\n \n Note that instantiations inherit the check status at the point of the\n instantiation, so a useful idiom is to have a library package that\n-introduces a check name with `pragma Check_Name`, and then contains\n-generic packages or subprograms which use the `Enabled` attribute\n+introduces a check name with ``pragma Check_Name``, and then contains\n+generic packages or subprograms which use the ``Enabled`` attribute\n to see if the check is enabled. A user of this package can then issue\n-a `pragma Suppress` or `pragma Unsuppress` before instantiating\n+a ``pragma Suppress`` or ``pragma Unsuppress`` before instantiating\n the package or subprogram, controlling whether the check will be present.\n \n Attribute Enum_Rep\n@@ -336,42 +336,42 @@ Attribute Enum_Rep\n \n .. index:: Enum_Rep\n \n-For every enumeration subtype `S`, ``S'Enum_Rep`` denotes a\n+For every enumeration subtype ``S``, ``S'Enum_Rep`` denotes a\n function with the following spec:\n \n .. code-block:: ada\n \n   function S'Enum_Rep (Arg : S'Base) return <Universal_Integer>;\n \n \n-It is also allowable to apply `Enum_Rep` directly to an object of an\n+It is also allowable to apply ``Enum_Rep`` directly to an object of an\n enumeration type or to a non-overloaded enumeration\n literal.  In this case ``S'Enum_Rep`` is equivalent to\n-``typ'Enum_Rep(S)`` where `typ` is the type of the\n+``typ'Enum_Rep(S)`` where ``typ`` is the type of the\n enumeration literal or object.\n \n The function returns the representation value for the given enumeration\n-value.  This will be equal to value of the `Pos` attribute in the\n+value.  This will be equal to value of the ``Pos`` attribute in the\n absence of an enumeration representation clause.  This is a static\n attribute (i.e.,:the result is static if the argument is static).\n \n ``S'Enum_Rep`` can also be used with integer types and objects,\n in which case it simply returns the integer value.  The reason for this\n-is to allow it to be used for `(<>)` discrete formal arguments in\n+is to allow it to be used for ``(<>)`` discrete formal arguments in\n a generic unit that can be instantiated with either enumeration types\n-or integer types.  Note that if `Enum_Rep` is used on a modular\n+or integer types.  Note that if ``Enum_Rep`` is used on a modular\n type whose upper bound exceeds the upper bound of the largest signed\n integer type, and the argument is a variable, so that the universal\n-integer calculation is done at run time, then the call to `Enum_Rep`\n-may raise `Constraint_Error`.\n+integer calculation is done at run time, then the call to ``Enum_Rep``\n+may raise ``Constraint_Error``.\n \n Attribute Enum_Val\n ==================\n .. index:: Representation of enums\n \n .. index:: Enum_Val\n \n-For every enumeration subtype `S`, ``S'Enum_Val`` denotes a\n+For every enumeration subtype ``S``, ``S'Enum_Val`` denotes a\n function with the following spec:\n \n .. code-block:: ada\n@@ -382,7 +382,7 @@ function with the following spec:\n The function returns the enumeration value whose representation matches the\n argument, or raises Constraint_Error if no enumeration literal of the type\n has the matching value.\n-This will be equal to value of the `Val` attribute in the\n+This will be equal to value of the ``Val`` attribute in the\n absence of an enumeration representation clause.  This is a static\n attribute (i.e., the result is static if the argument is static).\n \n@@ -392,28 +392,28 @@ Attribute Epsilon\n \n .. index:: Epsilon\n \n-The `Epsilon` attribute is provided for compatibility with Ada 83.  See\n+The ``Epsilon`` attribute is provided for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n this attribute.\n \n Attribute Fast_Math\n ===================\n .. index:: Fast_Math\n \n-`Standard'Fast_Math` (`Standard` is the only allowed\n+``Standard'Fast_Math`` (``Standard`` is the only allowed\n prefix) yields a static Boolean value that is True if pragma\n-`Fast_Math` is active, and False otherwise.\n+``Fast_Math`` is active, and False otherwise.\n \n Attribute Finalization_Size\n ===========================\n .. index:: Finalization_Size\n \n-The prefix of attribute `Finalization_Size` must be an object or\n+The prefix of attribute ``Finalization_Size`` must be an object or\n a non-class-wide type. This attribute returns the size of any hidden data\n reserved by the compiler to handle finalization-related actions. The type of\n-the attribute is `universal_integer`.\n+the attribute is *universal_integer*.\n \n-`Finalization_Size` yields a value of zero for a type with no controlled\n+``Finalization_Size`` yields a value of zero for a type with no controlled\n parts, an object whose type has no controlled parts, or an object of a\n class-wide type whose tag denotes a type with no controlled parts.\n \n@@ -423,20 +423,20 @@ Attribute Fixed_Value\n =====================\n .. index:: Fixed_Value\n \n-For every fixed-point type `S`, ``S'Fixed_Value`` denotes a\n+For every fixed-point type ``S``, ``S'Fixed_Value`` denotes a\n function with the following specification:\n \n .. code-block:: ada\n \n   function S'Fixed_Value (Arg : <Universal_Integer>) return S;\n \n-The value returned is the fixed-point value `V` such that::\n+The value returned is the fixed-point value ``V`` such that::\n \n   V = Arg * S'Small\n \n \n The effect is thus similar to first converting the argument to the\n-integer type used to represent `S`, and then doing an unchecked\n+integer type used to represent ``S``, and then doing an unchecked\n conversion to the fixed-point type.  The difference is\n that there are full range checks, to ensure that the result is in range.\n This attribute is primarily intended for use in implementation of the\n@@ -455,7 +455,7 @@ Attribute Has_Access_Values\n \n .. index:: Has_Access_Values\n \n-The prefix of the `Has_Access_Values` attribute is a type.  The result\n+The prefix of the ``Has_Access_Values`` attribute is a type.  The result\n is a Boolean value which is True if the is an access type, or is a composite\n type with a component (at any nesting depth) that is an access type, and is\n False otherwise.\n@@ -469,7 +469,7 @@ Attribute Has_Discriminants\n \n .. index:: Has_Discriminants\n \n-The prefix of the `Has_Discriminants` attribute is a type.  The result\n+The prefix of the ``Has_Discriminants`` attribute is a type.  The result\n is a Boolean value which is True if the type has discriminants, and False\n otherwise.  The intended use of this attribute is in conjunction with generic\n definitions.  If the attribute is applied to a generic private type, it\n@@ -479,9 +479,9 @@ Attribute Img\n =============\n .. index:: Img\n \n-The `Img` attribute differs from `Image` in that it is applied\n+The ``Img`` attribute differs from ``Image`` in that it is applied\n directly to an object, and yields the same result as\n-`Image` for the subtype of the object.  This is convenient for\n+``Image`` for the subtype of the object.  This is convenient for\n debugging:\n \n .. code-block:: ada\n@@ -495,31 +495,31 @@ has the same meaning as the more verbose:\n \n   Put_Line (\"X = \" & T'Image (X));\n \n-where `T` is the (sub)type of the object `X`.\n+where ``T`` is the (sub)type of the object ``X``.\n \n-Note that technically, in analogy to `Image`,\n-`X'Img` returns a parameterless function\n+Note that technically, in analogy to ``Image``,\n+``X'Img`` returns a parameterless function\n that returns the appropriate string when called. This means that\n-`X'Img` can be renamed as a function-returning-string, or used\n+``X'Img`` can be renamed as a function-returning-string, or used\n in an instantiation as a function parameter.\n \n Attribute Integer_Value\n =======================\n .. index:: Integer_Value\n \n-For every integer type `S`, ``S'Integer_Value`` denotes a\n+For every integer type ``S``, ``S'Integer_Value`` denotes a\n function with the following spec:\n \n .. code-block:: ada\n \n   function S'Integer_Value (Arg : <Universal_Fixed>) return S;\n \n-The value returned is the integer value `V`, such that::\n+The value returned is the integer value ``V``, such that::\n \n   Arg = V * T'Small\n \n \n-where `T` is the type of `Arg`.\n+where ``T`` is the type of ``Arg``.\n The effect is thus similar to first doing an unchecked conversion from\n the fixed-point type to its corresponding implementation type, and then\n converting the result to the target integer type.  The difference is\n@@ -550,15 +550,15 @@ Attribute Large\n \n .. index:: Large\n \n-The `Large` attribute is provided for compatibility with Ada 83.  See\n+The ``Large`` attribute is provided for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n this attribute.\n \n Attribute Library_Level\n =======================\n .. index:: Library_Level\n \n-`P'Library_Level`, where P is an entity name,\n+``P'Library_Level``, where P is an entity name,\n returns a Boolean value which is True if the entity is declared\n at the library level, and False otherwise. Note that within a\n generic instantition, the name of the generic unit denotes the\n@@ -582,8 +582,8 @@ Attribute Lock_Free\n ===================\n .. index:: Lock_Free\n \n-`P'Lock_Free`, where P is a protected object, returns True if a\n-pragma `Lock_Free` applies to P.\n+``P'Lock_Free``, where P is a protected object, returns True if a\n+pragma ``Lock_Free`` applies to P.\n \n Attribute Loop_Entry\n ====================\n@@ -594,28 +594,28 @@ Syntax::\n   X'Loop_Entry [(loop_name)]\n \n \n-The `Loop_Entry` attribute is used to refer to the value that an\n+The ``Loop_Entry`` attribute is used to refer to the value that an\n expression had upon entry to a given loop in much the same way that the\n-`Old` attribute in a subprogram postcondition can be used to refer\n+``Old`` attribute in a subprogram postcondition can be used to refer\n to the value an expression had upon entry to the subprogram. The\n relevant loop is either identified by the given loop name, or it is the\n innermost enclosing loop when no loop name is given.\n \n-A `Loop_Entry` attribute can only occur within a\n-`Loop_Variant` or `Loop_Invariant` pragma. A common use of\n-`Loop_Entry` is to compare the current value of objects with their\n-initial value at loop entry, in a `Loop_Invariant` pragma.\n+A ``Loop_Entry`` attribute can only occur within a\n+``Loop_Variant`` or ``Loop_Invariant`` pragma. A common use of\n+``Loop_Entry`` is to compare the current value of objects with their\n+initial value at loop entry, in a ``Loop_Invariant`` pragma.\n \n-The effect of using `X'Loop_Entry` is the same as declaring\n-a constant initialized with the initial value of `X` at loop\n+The effect of using ``X'Loop_Entry`` is the same as declaring\n+a constant initialized with the initial value of ``X`` at loop\n entry. This copy is not performed if the loop is not entered, or if the\n corresponding pragmas are ignored or disabled.\n \n Attribute Machine_Size\n ======================\n .. index:: Machine_Size\n \n-This attribute is identical to the `Object_Size` attribute.  It is\n+This attribute is identical to the ``Object_Size`` attribute.  It is\n provided for compatibility with the DEC Ada 83 attribute of this name.\n \n Attribute Mantissa\n@@ -624,7 +624,7 @@ Attribute Mantissa\n \n .. index:: Mantissa\n \n-The `Mantissa` attribute is provided for compatibility with Ada 83.  See\n+The ``Mantissa`` attribute is provided for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n this attribute.\n \n@@ -636,7 +636,7 @@ Attribute Maximum_Alignment\n \n .. index:: Maximum_Alignment\n \n-`Standard'Maximum_Alignment` (`Standard` is the only\n+``Standard'Maximum_Alignment`` (``Standard`` is the only\n permissible prefix) provides the maximum useful alignment value for the\n target.  This is a static value that can be used to specify the alignment\n for an object, guaranteeing that it is properly aligned in all\n@@ -650,11 +650,11 @@ Attribute Mechanism_Code\n \n .. index:: Mechanism_Code\n \n-``function'Mechanism_Code`` yields an integer code for the\n-mechanism used for the result of function, and\n-``subprogram'Mechanism_Code (n)`` yields the mechanism\n-used for formal parameter number `n` (a static integer value with 1\n-meaning the first parameter) of `subprogram`.  The code returned is:\n+``func'Mechanism_Code`` yields an integer code for the\n+mechanism used for the result of function ``func``, and\n+``subprog'Mechanism_Code (n)`` yields the mechanism\n+used for formal parameter number *n* (a static integer value, with 1\n+meaning the first parameter) of subprogram ``subprog``.  The code returned is:\n \n \n \n@@ -671,7 +671,7 @@ Attribute Null_Parameter\n .. index:: Null_Parameter\n \n A reference ``T'Null_Parameter`` denotes an imaginary object of\n-type or subtype `T` allocated at machine address zero.  The attribute\n+type or subtype ``T`` allocated at machine address zero.  The attribute\n is allowed only as the default expression of a formal parameter, or as\n an actual expression of a subprogram call.  In either case, the\n subprogram must be imported.\n@@ -682,7 +682,7 @@ default).\n \n This capability is needed to specify that a zero address should be\n passed for a record or other composite object passed by reference.\n-There is no way of indicating this without the `Null_Parameter`\n+There is no way of indicating this without the ``Null_Parameter``\n attribute.\n \n .. _Attribute-Object_Size:\n@@ -696,8 +696,8 @@ Attribute Object_Size\n The size of an object is not necessarily the same as the size of the type\n of an object.  This is because by default object sizes are increased to be\n a multiple of the alignment of the object.  For example,\n-`Natural'Size` is\n-31, but by default objects of type `Natural` will have a size of 32 bits.\n+``Natural'Size`` is\n+31, but by default objects of type ``Natural`` will have a size of 32 bits.\n Similarly, a record containing an integer and a character:\n \n .. code-block:: ada\n@@ -708,7 +708,7 @@ Similarly, a record containing an integer and a character:\n   end record;\n \n \n-will have a size of 40 (that is `Rec'Size` will be 40).  The\n+will have a size of 40 (that is ``Rec'Size`` will be 40).  The\n alignment will be 4, because of the\n integer field, and so the default size of record objects for this type\n will be 64 (8 bytes).\n@@ -720,7 +720,7 @@ an object size of 40 can be explicitly specified in this case.\n A consequence of this capability is that different object sizes can be\n given to subtypes that would otherwise be considered in Ada to be\n statically matching.  But it makes no sense to consider such subtypes\n-as statically matching.  Consequently, in `GNAT` we add a rule\n+as statically matching.  Consequently, GNAT adds a rule\n to the static matching rules that requires object sizes to match.\n Consider this example:\n \n@@ -746,10 +746,10 @@ Consider this example:\n \n \n In the absence of lines 5 and 6,\n-types `R1` and `R2` statically match and\n+types ``R1`` and ``R2`` statically match and\n hence the conversion on line 12 is legal. But since lines 5 and 6\n-cause the object sizes to differ, `GNAT` considers that types\n-`R1` and `R2` are not statically matching, and line 12\n+cause the object sizes to differ, GNAT considers that types\n+``R1`` and ``R2`` are not statically matching, and line 12\n generates the diagnostic shown above.\n \n Similar additional checks are performed in other contexts requiring\n@@ -759,24 +759,24 @@ Attribute Old\n =============\n .. index:: Old\n \n-In addition to the usage of `Old` defined in the Ada 2012 RM (usage\n-within `Post` aspect), GNAT also permits the use of this attribute\n-in implementation defined pragmas `Postcondition`,\n-`Contract_Cases` and `Test_Case`. Also usages of\n-`Old` which would be illegal according to the Ada 2012 RM\n+In addition to the usage of ``Old`` defined in the Ada 2012 RM (usage\n+within ``Post`` aspect), GNAT also permits the use of this attribute\n+in implementation defined pragmas ``Postcondition``,\n+``Contract_Cases`` and ``Test_Case``. Also usages of\n+``Old`` which would be illegal according to the Ada 2012 RM\n definition are allowed under control of\n-implementation defined pragma `Unevaluated_Use_Of_Old`.\n+implementation defined pragma ``Unevaluated_Use_Of_Old``.\n \n Attribute Passed_By_Reference\n =============================\n .. index:: Parameters, when passed by reference\n \n .. index:: Passed_By_Reference\n \n-``type'Passed_By_Reference`` for any subtype `type` returns\n-a value of type `Boolean` value that is `True` if the type is\n-normally passed by reference and `False` if the type is normally\n-passed by copy in calls.  For scalar types, the result is always `False`\n+``typ'Passed_By_Reference`` for any subtype `typ` returns\n+a value of type ``Boolean`` value that is ``True`` if the type is\n+normally passed by reference and ``False`` if the type is normally\n+passed by copy in calls.  For scalar types, the result is always ``False``\n and is static.  For non-scalar types, the result is nonstatic.\n \n Attribute Pool_Address\n@@ -785,7 +785,7 @@ Attribute Pool_Address\n \n .. index:: Pool_Address\n \n-``X'Pool_Address`` for any object `X` returns the address\n+``X'Pool_Address`` for any object ``X`` returns the address\n of X within its storage pool. This is the same as\n ``X'Address``, except that for an unconstrained array whose\n bounds are allocated just before the first component,\n@@ -797,18 +797,18 @@ Here, we are interpreting 'storage pool' broadly to mean\n ``wherever the object is allocated``, which could be a\n user-defined storage pool,\n the global heap, on the stack, or in a static memory area.\n-For an object created by `new`, ``Ptr.all'Pool_Address`` is\n-what is passed to `Allocate` and returned from `Deallocate`.\n+For an object created by ``new``, ``Ptr.all'Pool_Address`` is\n+what is passed to ``Allocate`` and returned from ``Deallocate``.\n \n Attribute Range_Length\n ======================\n .. index:: Range_Length\n \n-``type'Range_Length`` for any discrete type `type` yields\n+``typ'Range_Length`` for any discrete type `typ` yields\n the number of values represented by the subtype (zero for a null\n-range).  The result is static for static subtypes.  `Range_Length`\n+range).  The result is static for static subtypes.  ``Range_Length``\n applied to the index subtype of a one dimensional array always gives the\n-same result as `Length` applied to the array itself.\n+same result as ``Length`` applied to the array itself.\n \n Attribute Restriction_Set\n =========================\n@@ -832,7 +832,7 @@ There are two forms:\n In the case of the first form, the only restriction names\n allowed are parameterless restrictions that are checked\n for consistency at bind time. For a complete list see the\n-subtype `System.Rident.Partition_Boolean_Restrictions`.\n+subtype ``System.Rident.Partition_Boolean_Restrictions``.\n \n The result returned is True if the restriction is known to\n be in effect, and False if the restriction is known not to\n@@ -894,7 +894,7 @@ Attribute Safe_Emax\n \n .. index:: Safe_Emax\n \n-The `Safe_Emax` attribute is provided for compatibility with Ada 83.  See\n+The ``Safe_Emax`` attribute is provided for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n this attribute.\n \n@@ -904,7 +904,7 @@ Attribute Safe_Large\n \n .. index:: Safe_Large\n \n-The `Safe_Large` attribute is provided for compatibility with Ada 83.  See\n+The ``Safe_Large`` attribute is provided for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n this attribute.\n \n@@ -914,7 +914,7 @@ Attribute Safe_Small\n \n .. index:: Safe_Small\n \n-The `Safe_Small` attribute is provided for compatibility with Ada 83.  See\n+The ``Safe_Small`` attribute is provided for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n this attribute.\n \n@@ -928,8 +928,8 @@ Attribute Scalar_Storage_Order\n \n .. index:: Scalar_Storage_Order\n \n-For every array or record type `S`, the representation attribute\n-`Scalar_Storage_Order` denotes the order in which storage elements\n+For every array or record type ``S``, the representation attribute\n+``Scalar_Storage_Order`` denotes the order in which storage elements\n that make up scalar components are ordered within S. The value given must\n be a static expression of type System.Bit_Order. The following is an example\n of the use of this feature:\n@@ -967,32 +967,33 @@ of the use of this feature:\n      --  the former is used.\n \n \n-Other properties are as for standard representation attribute `Bit_Order`,\n-as defined by Ada RM 13.5.3(4). The default is `System.Default_Bit_Order`.\n+Other properties are as for standard representation attribute ``Bit_Order``,\n+as defined by Ada RM 13.5.3(4). The default is ``System.Default_Bit_Order``.\n \n-For a record type `T`, if ``T'Scalar_Storage_Order`` is\n+For a record type ``T``, if ``T'Scalar_Storage_Order`` is\n specified explicitly, it shall be equal to ``T'Bit_Order``. Note:\n-this means that if a `Scalar_Storage_Order` attribute definition\n-clause is not confirming, then the type's `Bit_Order` shall be\n+this means that if a ``Scalar_Storage_Order`` attribute definition\n+clause is not confirming, then the type's ``Bit_Order`` shall be\n specified explicitly and set to the same value.\n \n Derived types inherit an explicitly set scalar storage order from their parent\n types. This may be overridden for the derived type by giving an explicit scalar\n storage order for the derived type. For a record extension, the derived type\n must have the same scalar storage order as the parent type.\n \n-A component of a record or array type that is a bit-packed array, or that\n-does not start on a byte boundary, must have the same scalar storage order\n-as the enclosing record or array type.\n+A component of a record type that is itself a record or an array and that does\n+not start and end on a byte boundary must have have the same scalar storage\n+order as the record type. A component of a bit-packed array type that is itself\n+a record or an array must have the same scalar storage order as the array type.\n \n-No component of a type that has an explicit `Scalar_Storage_Order`\n+No component of a type that has an explicit ``Scalar_Storage_Order``\n attribute definition may be aliased.\n \n-A confirming `Scalar_Storage_Order` attribute definition clause (i.e.\n-with a value equal to `System.Default_Bit_Order`) has no effect.\n+A confirming ``Scalar_Storage_Order`` attribute definition clause (i.e.\n+with a value equal to ``System.Default_Bit_Order``) has no effect.\n \n If the opposite storage order is specified, then whenever the value of\n-a scalar component of an object of type `S` is read, the storage\n+a scalar component of an object of type ``S`` is read, the storage\n elements of the enclosing machine scalar are first reversed (before\n retrieving the component value, possibly applying some shift and mask\n operatings on the enclosing machine scalar), and the opposite operation\n@@ -1002,23 +1003,23 @@ In that case, the restrictions set forth in 13.5.1(10.3/2) for scalar components\n are relaxed. Instead, the following rules apply:\n \n * the underlying storage elements are those at positions\n-  `(position + first_bit / storage_element_size) ..         (position + (last_bit + storage_element_size - 1) /                     storage_element_size)`\n+  ``(position + first_bit / storage_element_size) .. (position + (last_bit + storage_element_size - 1) / storage_element_size)``\n * the sequence of underlying storage elements shall have\n   a size no greater than the largest machine scalar\n * the enclosing machine scalar is defined as the smallest machine\n   scalar starting at a position no greater than\n-  `position + first_bit / storage_element_size` and covering\n-  storage elements at least up to `position + (last_bit +         storage_element_size - 1) / storage_element_size`\n+  ``position + first_bit / storage_element_size`` and covering\n+  storage elements at least up to ``position + (last_bit + storage_element_size - 1) / storage_element_size```\n * the position of the component is interpreted relative to that machine\n   scalar.\n \n If no scalar storage order is specified for a type (either directly, or by\n inheritance in the case of a derived type), then the default is normally\n the native ordering of the target, but this default can be overridden using\n-pragma `Default_Scalar_Storage_Order`.\n+pragma ``Default_Scalar_Storage_Order``.\n \n-Note that if a component of `T` is itself of a record or array type,\n-the specfied `Scalar_Storage_Order` does *not* apply to that nested type:\n+Note that if a component of ``T`` is itself of a record or array type,\n+the specfied ``Scalar_Storage_Order`` does *not* apply to that nested type:\n an explicit attribute definition clause must be provided for the component\n type as well if desired.\n \n@@ -1036,8 +1037,8 @@ Attribute Simple_Storage_Pool\n \n .. index:: Simple_Storage_Pool\n \n-For every nonformal, nonderived access-to-object type `Acc`, the\n-representation attribute `Simple_Storage_Pool` may be specified\n+For every nonformal, nonderived access-to-object type ``Acc``, the\n+representation attribute ``Simple_Storage_Pool`` may be specified\n via an attribute_definition_clause (or by specifying the equivalent aspect):\n \n .. code-block:: ada\n@@ -1051,51 +1052,51 @@ via an attribute_definition_clause (or by specifying the equivalent aspect):\n \n \n The name given in an attribute_definition_clause for the\n-`Simple_Storage_Pool` attribute shall denote a variable of\n+``Simple_Storage_Pool`` attribute shall denote a variable of\n a 'simple storage pool type' (see pragma `Simple_Storage_Pool_Type`).\n \n The use of this attribute is only allowed for a prefix denoting a type\n for which it has been specified. The type of the attribute is the type\n of the variable specified as the simple storage pool of the access type,\n and the attribute denotes that variable.\n \n-It is illegal to specify both `Storage_Pool` and `Simple_Storage_Pool`\n+It is illegal to specify both ``Storage_Pool`` and ``Simple_Storage_Pool``\n for the same access type.\n \n-If the `Simple_Storage_Pool` attribute has been specified for an access\n-type, then applying the `Storage_Pool` attribute to the type is flagged\n-with a warning and its evaluation raises the exception `Program_Error`.\n+If the ``Simple_Storage_Pool`` attribute has been specified for an access\n+type, then applying the ``Storage_Pool`` attribute to the type is flagged\n+with a warning and its evaluation raises the exception ``Program_Error``.\n \n If the Simple_Storage_Pool attribute has been specified for an access\n-type `S`, then the evaluation of the attribute ``S'Storage_Size``\n+type ``S``, then the evaluation of the attribute ``S'Storage_Size``\n returns the result of calling ``Storage_Size (S'Simple_Storage_Pool)``,\n which is intended to indicate the number of storage elements reserved for\n the simple storage pool. If the Storage_Size function has not been defined\n for the simple storage pool type, then this attribute returns zero.\n \n-If an access type `S` has a specified simple storage pool of type\n-`SSP`, then the evaluation of an allocator for that access type calls\n-the primitive `Allocate` procedure for type `SSP`, passing\n+If an access type ``S`` has a specified simple storage pool of type\n+``SSP``, then the evaluation of an allocator for that access type calls\n+the primitive ``Allocate`` procedure for type ``SSP``, passing\n ``S'Simple_Storage_Pool`` as the pool parameter. The detailed\n semantics of such allocators is the same as those defined for allocators\n in section 13.11 of the :title:`Ada Reference Manual`, with the term\n-`simple storage pool` substituted for `storage pool`.\n+*simple storage pool* substituted for *storage pool*.\n \n-If an access type `S` has a specified simple storage pool of type\n-`SSP`, then a call to an instance of the `Ada.Unchecked_Deallocation`\n-for that access type invokes the primitive `Deallocate` procedure\n-for type `SSP`, passing ``S'Simple_Storage_Pool`` as the pool\n+If an access type ``S`` has a specified simple storage pool of type\n+``SSP``, then a call to an instance of the ``Ada.Unchecked_Deallocation``\n+for that access type invokes the primitive ``Deallocate`` procedure\n+for type ``SSP``, passing ``S'Simple_Storage_Pool`` as the pool\n parameter. The detailed semantics of such unchecked deallocations is the same\n as defined in section 13.11.2 of the Ada Reference Manual, except that the\n-term 'simple storage pool' is substituted for 'storage pool'.\n+term *simple storage pool* is substituted for *storage pool*.\n \n Attribute Small\n ===============\n .. index:: Ada 83 attributes\n \n .. index:: Small\n \n-The `Small` attribute is defined in Ada 95 (and Ada 2005) only for\n+The ``Small`` attribute is defined in Ada 95 (and Ada 2005) only for\n fixed-point types.\n GNAT also allows this attribute to be applied to floating-point types\n for compatibility with Ada 83.  See\n@@ -1106,8 +1107,8 @@ Attribute Storage_Unit\n ======================\n .. index:: Storage_Unit\n \n-`Standard'Storage_Unit` (`Standard` is the only permissible\n-prefix) provides the same value as `System.Storage_Unit`.\n+``Standard'Storage_Unit`` (``Standard`` is the only permissible\n+prefix) provides the same value as ``System.Storage_Unit``.\n \n Attribute Stub_Type\n ===================\n@@ -1122,12 +1123,12 @@ call on any dispatching operation of such a stub object does the\n remote call, if necessary, using the information in the stub object\n to locate the target partition, etc.\n \n-For a prefix `T` that denotes a remote access-to-classwide type,\n-`T'Stub_Type` denotes the type of the corresponding stub objects.\n+For a prefix ``T`` that denotes a remote access-to-classwide type,\n+``T'Stub_Type`` denotes the type of the corresponding stub objects.\n \n-By construction, the layout of `T'Stub_Type` is identical to that of\n-type `RACW_Stub_Type` declared in the internal implementation-defined\n-unit `System.Partition_Interface`. Use of this attribute will create\n+By construction, the layout of ``T'Stub_Type`` is identical to that of\n+type ``RACW_Stub_Type`` declared in the internal implementation-defined\n+unit ``System.Partition_Interface``. Use of this attribute will create\n an implicit dependency on this unit.\n \n Attribute System_Allocator_Alignment\n@@ -1136,7 +1137,7 @@ Attribute System_Allocator_Alignment\n \n .. index:: System_Allocator_Alignment\n \n-`Standard'System_Allocator_Alignment` (`Standard` is the only\n+``Standard'System_Allocator_Alignment`` (``Standard`` is the only\n permissible prefix) provides the observable guaranted to be honored by\n the system allocator (malloc). This is a static value that can be used\n in user storage pools based on malloc either to reject allocation\n@@ -1147,7 +1148,7 @@ Attribute Target_Name\n =====================\n .. index:: Target_Name\n \n-`Standard'Target_Name` (`Standard` is the only permissible\n+``Standard'Target_Name`` (``Standard`` is the only permissible\n prefix) provides a static string value that identifies the target\n for the current compilation. For GCC implementations, this is the\n standard gcc target name without the terminating slash (for\n@@ -1157,10 +1158,10 @@ Attribute To_Address\n ====================\n .. index:: To_Address\n \n-The `System'To_Address`\n-(`System` is the only permissible prefix)\n+The ``System'To_Address``\n+(``System`` is the only permissible prefix)\n denotes a function identical to\n-`System.Storage_Elements.To_Address` except that\n+``System.Storage_Elements.To_Address`` except that\n it is a static attribute.  This means that if its argument is\n a static expression, then the result of the attribute is a\n static expression.  This means that such an expression can be\n@@ -1184,9 +1185,9 @@ Attribute Type_Class\n ====================\n .. index:: Type_Class\n \n-``type'Type_Class`` for any type or subtype `type` yields\n-the value of the type class for the full type of `type`.  If\n-`type` is a generic formal type, the value is the value for the\n+``typ'Type_Class`` for any type or subtype `typ` yields\n+the value of the type class for the full type of `typ`.  If\n+`typ` is a generic formal type, the value is the value for the\n corresponding actual subtype.  The value of this attribute is of type\n ``System.Aux_DEC.Type_Class``, which has the following definition:\n \n@@ -1204,15 +1205,15 @@ corresponding actual subtype.  The value of this attribute is of type\n      Type_Class_Address);\n \n \n-Protected types yield the value `Type_Class_Task`, which thus\n+Protected types yield the value ``Type_Class_Task``, which thus\n applies to all concurrent types.  This attribute is designed to\n be compatible with the DEC Ada 83 attribute of the same name.\n \n Attribute Type_Key\n ==================\n .. index:: Type_Key\n \n-The `Type_Key` attribute is applicable to a type or subtype and\n+The ``Type_Key`` attribute is applicable to a type or subtype and\n yields a value of type Standard.String containing encoded information\n about the type or subtype. This provides improved compatibility with\n other implementations that support this attribute.\n@@ -1228,10 +1229,10 @@ Attribute Unconstrained_Array\n =============================\n .. index:: Unconstrained_Array\n \n-The `Unconstrained_Array` attribute can be used with a prefix that\n+The ``Unconstrained_Array`` attribute can be used with a prefix that\n denotes any type or subtype. It is a static attribute that yields\n-`True` if the prefix designates an unconstrained array,\n-and `False` otherwise. In a generic instance, the result is\n+``True`` if the prefix designates an unconstrained array,\n+and ``False`` otherwise. In a generic instance, the result is\n still static, and yields the result of applying this test to the\n generic actual.\n \n@@ -1241,7 +1242,7 @@ Attribute Universal_Literal_String\n \n .. index:: Universal_Literal_String\n \n-The prefix of `Universal_Literal_String` must be a named\n+The prefix of ``Universal_Literal_String`` must be a named\n number.  The static result is the string consisting of the characters of\n the number as defined in the original source.  This allows the user\n program to access the actual text of named numbers without intermediate\n@@ -1266,18 +1267,18 @@ Attribute Unrestricted_Access\n \n .. index:: Unrestricted_Access\n \n-The `Unrestricted_Access` attribute is similar to `Access`\n+The ``Unrestricted_Access`` attribute is similar to ``Access``\n except that all accessibility and aliased view checks are omitted.  This\n is a user-beware attribute.\n \n-For objects, it is similar to `Address`, for which it is a\n+For objects, it is similar to ``Address``, for which it is a\n desirable replacement where the value desired is an access type.\n In other words, its effect is similar to first applying the\n-`Address` attribute and then doing an unchecked conversion to a\n+``Address`` attribute and then doing an unchecked conversion to a\n desired access type.\n \n-For subprograms, `P'Unrestricted_Access` may be used where\n-`P'Access` would be illegal, to construct a value of a\n+For subprograms, ``P'Unrestricted_Access`` may be used where\n+``P'Access`` would be illegal, to construct a value of a\n less-nested named access type that designates a more-nested\n subprogram. This value may be used in indirect calls, so long as the\n more-nested subprogram still exists; once the subprogram containing it\n@@ -1314,11 +1315,11 @@ When P1 is called from P2, the call via Global is OK, but if P1 were\n called after P2 returns, it would be an erroneous use of a dangling\n pointer.\n \n-For objects, it is possible to use `Unrestricted_Access` for any\n+For objects, it is possible to use ``Unrestricted_Access`` for any\n type. However, if the result is of an access-to-unconstrained array\n subtype, then the resulting pointer has the same scope as the context\n of the attribute, and must not be returned to some enclosing scope.\n-For instance, if a function uses `Unrestricted_Access` to create\n+For instance, if a function uses ``Unrestricted_Access`` to create\n an access-to-unconstrained-array and returns that value to the caller,\n the result will involve dangling pointers. In addition, it is only\n valid to create pointers to unconstrained arrays using this attribute\n@@ -1398,17 +1399,17 @@ considered to be erroneous. Consider the following example:\n A normal unconstrained array value\n or a constrained array object marked as aliased has the bounds in memory\n just before the array, so a thin pointer can retrieve both the data and\n-the bounds.  But in this case, the non-aliased object `X` does not have the\n-bounds before the string.  If the size clause for type `A`\n+the bounds.  But in this case, the non-aliased object ``X`` does not have the\n+bounds before the string.  If the size clause for type ``A``\n were not present, then the pointer\n would be a fat pointer, where one component is a pointer to the bounds,\n and all would be well.  But with the size clause present, the conversion from\n fat pointer to thin pointer in the call loses the bounds, and so this\n-is erroneous, and the program likely raises a `Program_Error` exception.\n+is erroneous, and the program likely raises a ``Program_Error`` exception.\n \n In general, it is advisable to completely\n avoid mixing the use of thin pointers and the use of\n-`Unrestricted_Access` where the designated type is an\n+``Unrestricted_Access`` where the designated type is an\n unconstrained array.  The use of thin pointers should be restricted to\n cases of porting legacy code that implicitly assumes the size of pointers,\n and such code should not in any case be using this attribute.\n@@ -1431,8 +1432,8 @@ Here we attempt to modify the constant P from 4 to 3, but the compiler may\n or may not notice this attempt, and subsequent references to P may yield\n either the value 3 or the value 4 or the assignment may blow up if the\n compiler decides to put P in read-only memory. One particular case where\n-`Unrestricted_Access` can be used in this way is to modify the\n-value of an `IN` parameter:\n+``Unrestricted_Access`` can be used in this way is to modify the\n+value of an ``in`` parameter:\n \n .. code-block:: ada\n \n@@ -1445,14 +1446,14 @@ value of an `IN` parameter:\n \n \n In general this is a risky approach. It may appear to \"work\" but such uses of\n-`Unrestricted_Access` are potentially non-portable, even from one version\n-of `GNAT` to another, so are best avoided if possible.\n+``Unrestricted_Access`` are potentially non-portable, even from one version\n+of GNAT to another, so are best avoided if possible.\n \n Attribute Update\n ================\n .. index:: Update\n \n-The `Update` attribute creates a copy of an array or record value\n+The ``Update`` attribute creates a copy of an array or record value\n with one or more modified components. The syntax is::\n \n   PREFIX'Update ( RECORD_COMPONENT_ASSOCIATION_LIST )\n@@ -1465,9 +1466,9 @@ with one or more modified components. The syntax is::\n   INDEX_EXPRESSION_LIST                        ::= ( EXPRESSION {, EXPRESSION } )\n \n \n-where `PREFIX` is the name of an array or record object, the\n-association list in parentheses does not contain an `others`\n-choice and the box symbol `<>` may not appear in any\n+where ``PREFIX`` is the name of an array or record object, the\n+association list in parentheses does not contain an ``others``\n+choice and the box symbol ``<>`` may not appear in any\n expression. The effect is to yield a copy of the array or record value\n which is unchanged apart from the components mentioned in the\n association list, which are changed to the indicated value. The\n@@ -1482,7 +1483,7 @@ example:\n   Avar2 : Arr := Avar1'Update (2 => 10, 3 .. 4 => 20);\n \n \n-yields a value for `Avar2` of 1,10,20,20,5 with `Avar1`\n+yields a value for ``Avar2`` of 1,10,20,20,5 with ``Avar1``\n begin unmodified. Similarly:\n \n .. code-block:: ada\n@@ -1493,8 +1494,8 @@ begin unmodified. Similarly:\n   Rvar2 : Rec := Rvar1'Update (B => 20);\n \n \n-yields a value for `Rvar2` of (A => 1, B => 20, C => 3),\n-with `Rvar1` being unmodifed.\n+yields a value for ``Rvar2`` of (A => 1, B => 20, C => 3),\n+with ``Rvar1`` being unmodifed.\n Note that the value of the attribute reference is computed\n completely before it is used. This means that if you write:\n \n@@ -1503,13 +1504,13 @@ completely before it is used. This means that if you write:\n   Avar1 := Avar1'Update (1 => 10, 2 => Function_Call);\n \n \n-then the value of `Avar1` is not modified if `Function_Call`\n+then the value of ``Avar1`` is not modified if ``Function_Call``\n raises an exception, unlike the effect of a series of direct assignments\n-to elements of `Avar1`. In general this requires that\n+to elements of ``Avar1``. In general this requires that\n two extra complete copies of the object are required, which should be\n kept in mind when considering efficiency.\n \n-The `Update` attribute cannot be applied to prefixes of a limited\n+The ``Update`` attribute cannot be applied to prefixes of a limited\n type, and cannot reference discriminants in the case of a record type.\n The accessibility level of an Update attribute result object is defined\n as for an aggregate.\n@@ -1533,29 +1534,29 @@ Attribute Valid_Scalars\n =======================\n .. index:: Valid_Scalars\n \n-The `'Valid_Scalars` attribute is intended to make it easier to\n+The ``'Valid_Scalars`` attribute is intended to make it easier to\n check the validity of scalar subcomponents of composite objects. It\n-is defined for any prefix `X` that denotes an object.\n+is defined for any prefix ``X`` that denotes an object.\n The value of this attribute is of the predefined type Boolean.\n-`X'Valid_Scalars` yields True if and only if evaluation of\n-`P'Valid` yields True for every scalar part P of X or if X has\n+``X'Valid_Scalars`` yields True if and only if evaluation of\n+``P'Valid`` yields True for every scalar part P of X or if X has\n no scalar parts. It is not specified in what order the scalar parts\n are checked, nor whether any more are checked after any one of them\n-is determined to be invalid. If the prefix `X` is of a class-wide\n-type `T'Class` (where `T` is the associated specific type),\n-or if the prefix `X` is of a specific tagged type `T`, then\n-only the scalar parts of components of `T` are traversed; in other\n-words, components of extensions of `T` are not traversed even if\n-`T'Class (X)'Tag /= T'Tag` . The compiler will issue a warning if it can\n+is determined to be invalid. If the prefix ``X`` is of a class-wide\n+type ``T'Class`` (where ``T`` is the associated specific type),\n+or if the prefix ``X`` is of a specific tagged type ``T``, then\n+only the scalar parts of components of ``T`` are traversed; in other\n+words, components of extensions of ``T`` are not traversed even if\n+``T'Class (X)'Tag /= T'Tag`` . The compiler will issue a warning if it can\n be determined at compile time that the prefix of the attribute has no\n scalar parts (e.g., if the prefix is of an access type, an interface type,\n an undiscriminated task type, or an undiscriminated protected type).\n \n-For scalar types, `Valid_Scalars` is equivalent to `Valid`. The use\n-of this attribute is not permitted for `Unchecked_Union` types for which\n+For scalar types, ``Valid_Scalars`` is equivalent to ``Valid``. The use\n+of this attribute is not permitted for ``Unchecked_Union`` types for which\n in general it is not possible to determine the values of the discriminants.\n \n-Note: `Valid_Scalars` can generate a lot of code, especially in the case\n+Note: ``Valid_Scalars`` can generate a lot of code, especially in the case\n of a large variant record. If the attribute is called in many places in the\n same program applied to objects of the same type, it can reduce program size\n to write a function with a single use of the attribute, and then call that\n@@ -1567,13 +1568,13 @@ Attribute VADS_Size\n \n .. index:: VADS_Size\n \n-The `'VADS_Size` attribute is intended to make it easier to port\n-legacy code which relies on the semantics of `'Size` as implemented\n+The ``'VADS_Size`` attribute is intended to make it easier to port\n+legacy code which relies on the semantics of ``'Size`` as implemented\n by the VADS Ada 83 compiler.  GNAT makes a best effort at duplicating the\n-same semantic interpretation.  In particular, `'VADS_Size` applied\n+same semantic interpretation.  In particular, ``'VADS_Size`` applied\n to a predefined or other primitive type with no Size clause yields the\n-Object_Size (for example, `Natural'Size` is 32 rather than 31 on\n-typical machines).  In addition `'VADS_Size` applied to an object\n+Object_Size (for example, ``Natural'Size`` is 32 rather than 31 on\n+typical machines).  In addition ``'VADS_Size`` applied to an object\n gives the result that would be obtained by applying the attribute to\n the corresponding type.\n \n@@ -1587,22 +1588,22 @@ Attribute Value_Size\n \n ``type'Value_Size`` is the number of bits required to represent\n a value of the given subtype.  It is the same as ``type'Size``,\n-but, unlike `Size`, may be set for non-first subtypes.\n+but, unlike ``Size``, may be set for non-first subtypes.\n \n Attribute Wchar_T_Size\n ======================\n .. index:: Wchar_T_Size\n \n-`Standard'Wchar_T_Size` (`Standard` is the only permissible\n-prefix) provides the size in bits of the C `wchar_t` type\n+``Standard'Wchar_T_Size`` (``Standard`` is the only permissible\n+prefix) provides the size in bits of the C ``wchar_t`` type\n primarily for constructing the definition of this type in\n-package `Interfaces.C`. The result is a static constant.\n+package ``Interfaces.C``. The result is a static constant.\n \n Attribute Word_Size\n ===================\n .. index:: Word_Size\n \n-`Standard'Word_Size` (`Standard` is the only permissible\n-prefix) provides the value `System.Word_Size`. The result is\n+``Standard'Word_Size`` (``Standard`` is the only permissible\n+prefix) provides the value ``System.Word_Size``. The result is\n a static constant.\n "}, {"sha": "44d29935de18789e92d94b54d9b876d518917258", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_characteristics.rst", "status": "modified", "additions": 160, "deletions": 158, "changes": 318, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -45,7 +45,7 @@ There are no variations from the standard.\n   \"Which code_statements cause external\n   interactions.  See 1.1.3(10).\"\n \n-Any `code_statement` can potentially cause external interactions.\n+Any *code_statement* can potentially cause external interactions.\n \n *\n   \"The coded representation for the text of an Ada\n@@ -80,16 +80,16 @@ length of a lexical element is the same as the maximum line length.\n See :ref:`Implementation_Defined_Pragmas`.\n \n *\n-  \"Effect of pragma `Optimize`.  See 2.8(27).\"\n+  \"Effect of pragma ``Optimize``.  See 2.8(27).\"\n \n-Pragma `Optimize`, if given with a `Time` or `Space`\n+Pragma ``Optimize``, if given with a ``Time`` or ``Space``\n parameter, checks that the optimization flag is set, and aborts if it is\n not.\n \n *\n   \"The sequence of characters of the value returned by\n   ``S'Image`` when some of the graphic characters of\n-  ``S'Wide_Image`` are not defined in `Character`.  See\n+  ``S'Wide_Image`` are not defined in ``Character``.  See\n   3.5(37).\"\n \n The sequence of characters is as defined by the wide character encoding\n@@ -98,7 +98,7 @@ further details.\n \n *\n   \"The predefined integer types declared in\n-  `Standard`.  See 3.5.4(25).\"\n+  ``Standard``.  See 3.5.4(25).\"\n \n ====================== =======================================\n Type                   Representation\n@@ -132,7 +132,7 @@ The precision and range is as defined by the IEEE standard.\n \n *\n   \"The predefined floating point types declared in\n-  `Standard`.  See 3.5.7(16).\"\n+  ``Standard``.  See 3.5.7(16).\"\n \n ====================== ====================================================\n Type                   Representation\n@@ -146,25 +146,25 @@ Type                   Representation\n *\n   \"The small of an ordinary fixed point type.  See 3.5.9(8).\"\n \n-`Fine_Delta` is 2**(-63)\n+``Fine_Delta`` is 2**(-63)\n \n *\n   \"What combinations of small, range, and digits are\n   supported for fixed point types.  See 3.5.9(10).\"\n \n Any combinations are permitted that do not result in a small less than\n-`Fine_Delta` and do not result in a mantissa larger than 63 bits.\n+``Fine_Delta`` and do not result in a mantissa larger than 63 bits.\n If the mantissa is larger than 53 bits on machines where Long_Long_Float\n is 64 bits (true of all architectures except ia32), then the output from\n Text_IO is accurate to only 53 bits, rather than the full mantissa.  This\n is because floating-point conversions are used to convert fixed point.\n \n \n *\n-  \"The result of `Tags.Expanded_Name` for types declared\n-  within an unnamed `block_statement`.  See 3.9(10).\"\n+  \"The result of ``Tags.Expanded_Name`` for types declared\n+  within an unnamed *block_statement*.  See 3.9(10).\"\n \n-Block numbers of the form `B`nnn``, where `nnn` is a\n+Block numbers of the form :samp:`B{nnn}`, where *nnn* is a\n decimal integer are allocated.\n \n *\n@@ -181,33 +181,33 @@ There are no implementation-defined time types.\n   \"The time base associated with relative delays.\"\n \n See 9.6(20).  The time base used is that provided by the C library\n-function `gettimeofday`.\n+function ``gettimeofday``.\n \n *\n-  \"The time base of the type `Calendar.Time`.  See\n+  \"The time base of the type ``Calendar.Time``.  See\n   9.6(23).\"\n \n The time base used is that provided by the C library function\n-`gettimeofday`.\n+``gettimeofday``.\n \n *\n-  \"The time zone used for package `Calendar`\n+  \"The time zone used for package ``Calendar``\n   operations.  See 9.6(24).\"\n \n-The time zone used by package `Calendar` is the current system time zone\n+The time zone used by package ``Calendar`` is the current system time zone\n setting for local time, as accessed by the C library function\n-`localtime`.\n+``localtime``.\n \n *\n-  \"Any limit on `delay_until_statements` of\n-  `select_statements`.  See 9.6(29).\"\n+  \"Any limit on *delay_until_statements* of\n+  *select_statements*.  See 9.6(29).\"\n \n There are no such limits.\n \n *\n   \"Whether or not two non-overlapping parts of a composite\n   object are independently addressable, in the case where packing, record\n-  layout, or `Component_Size` is specified for the object.  See\n+  layout, or ``Component_Size`` is specified for the object.  See\n   9.10(1).\"\n \n Separate components are independently addressable if they do not share\n@@ -253,7 +253,7 @@ provides the binder options *-z* and *-n* respectively, and in\n this case a list of units can be explicitly supplied to the binder for\n inclusion in the partition (all units needed by these units will also\n be included automatically).  For full details on the use of these\n-options, refer to the `GNAT Make Program gnatmake` in the\n+options, refer to *GNAT Make Program gnatmake* in the\n :title:`GNAT User's Guide`.\n \n *\n@@ -274,7 +274,7 @@ The main program is designated by providing the name of the\n corresponding :file:`ALI` file as the input parameter to the binder.\n \n *\n-  \"The order of elaboration of `library_items`.  See\n+  \"The order of elaboration of *library_items*.  See\n   10.2(18).\"\n \n The first constraint on ordering is that it meets the requirements of\n@@ -293,7 +293,7 @@ where a choice still remains.\n The main program has no parameters.  It may be a procedure, or a function\n returning an integer type.  In the latter case, the returned integer\n value is the return code of the program (overriding any value that\n-may have been set by a call to `Ada.Command_Line.Set_Exit_Status`).\n+may have been set by a call to ``Ada.Command_Line.Set_Exit_Status``).\n \n *\n   \"The mechanisms for building and running partitions.  See\n@@ -320,24 +320,24 @@ provided by the operating system.  See the GLADE reference manual for\n further details.\n \n *\n-  \"The information returned by `Exception_Message`.  See\n+  \"The information returned by ``Exception_Message``.  See\n   11.4.1(10).\"\n \n Exception message returns the null string unless a specific message has\n been passed by the program.\n \n *\n-  \"The result of `Exceptions.Exception_Name` for types\n-  declared within an unnamed `block_statement`.  See 11.4.1(12).\"\n+  \"The result of ``Exceptions.Exception_Name`` for types\n+  declared within an unnamed *block_statement*.  See 11.4.1(12).\"\n \n-Blocks have implementation defined names of the form `B`nnn``\n-where `nnn` is an integer.\n+Blocks have implementation defined names of the form :samp:`B{nnn}`\n+where *nnn* is an integer.\n \n *\n   \"The information returned by\n-  `Exception_Information`.  See 11.4.1(13).\"\n+  ``Exception_Information``.  See 11.4.1(13).\"\n \n-`Exception_Information` returns a string in the following format::\n+``Exception_Information`` returns a string in the following format::\n \n   *Exception_Name:* nnnnn\n   *Message:* mmmmm\n@@ -348,12 +348,12 @@ where `nnn` is an integer.\n \n where\n \n-  *  `nnnn` is the fully qualified name of the exception in all upper\n+  *  ``nnnn`` is the fully qualified name of the exception in all upper\n      case letters. This line is always present.\n \n-  *  `mmmm` is the message (this line present only if message is non-null)\n+  *  ``mmmm`` is the message (this line present only if message is non-null)\n \n-  *  `ppp` is the Process Id value as a decimal integer (this line is\n+  *  ``ppp`` is the Process Id value as a decimal integer (this line is\n      present only if the Process Id is nonzero). Currently we are\n      not making use of this field.\n \n@@ -364,7 +364,7 @@ where\n      the main executable. The values are given in C style format, with lower case\n      letters for a-f, and only as many digits present as are necessary.\n      The line terminator sequence at the end of each line, including\n-     the last line is a single `LF` character (`16#0A#`).\n+     the last line is a single ``LF`` character (``16#0A#``).\n \n *\n   \"Implementation-defined check names.  See 11.5(27).\"\n@@ -373,7 +373,7 @@ The implementation defined check names include Alignment_Check,\n Atomic_Synchronization, Duplicated_Tag_Check, Container_Checks,\n Tampering_Check, Predicate_Check, and Validity_Check. In addition, a user\n program can add implementation-defined check names by means of the pragma\n-Check_Name. See the description of pragma `Suppress` for full details.\n+Check_Name. See the description of pragma ``Suppress`` for full details.\n \n *\n   \"The interpretation of each aspect of representation.  See\n@@ -388,7 +388,7 @@ See separate section on data representations.\n See separate section on data representations.\n \n *\n-  \"The meaning of `Size` for indefinite subtypes.  See\n+  \"The meaning of ``Size`` for indefinite subtypes.  See\n   13.3(48).\"\n \n Size for an indefinite subtype is the maximum possible size, except that\n@@ -416,15 +416,15 @@ The only implementation defined component is the tag for a tagged type,\n which contains a pointer to the dispatching table.\n \n *\n-  \"If `Word_Size` = `Storage_Unit`, the default bit\n+  \"If ``Word_Size`` = ``Storage_Unit``, the default bit\n   ordering.  See 13.5.3(5).\"\n \n-`Word_Size` (32) is not the same as `Storage_Unit` (8) for this\n+``Word_Size`` (32) is not the same as ``Storage_Unit`` (8) for this\n implementation, so no non-default bit ordering is supported.  The default\n bit ordering corresponds to the natural endianness of the target architecture.\n \n *\n-  \"The contents of the visible part of package `System`\n+  \"The contents of the visible part of package ``System``\n   and its language-defined children.  See 13.7(2).\"\n \n See the definition of these packages in files :file:`system.ads` and\n@@ -438,8 +438,8 @@ System.\n \n *\n   \"The contents of the visible part of package\n-  `System.Machine_Code`, and the meaning of\n-  `code_statements`.  See 13.8(7).\"\n+  ``System.Machine_Code``, and the meaning of\n+  *code_statements*.  See 13.8(7).\"\n \n See the definition and documentation in file :file:`s-maccod.ads`.\n \n@@ -487,14 +487,14 @@ on the simple assignment of the invalid negative value from Y to Z.\n \n *\n   \"The manner of choosing a storage pool for an access type\n-  when `Storage_Pool` is not specified for the type.  See 13.11(17).\"\n+  when ``Storage_Pool`` is not specified for the type.  See 13.11(17).\"\n \n There are 3 different standard pools used by the compiler when\n-`Storage_Pool` is not specified depending whether the type is local\n+``Storage_Pool`` is not specified depending whether the type is local\n to a subprogram or defined at the library level and whether\n-`Storage_Size`is specified or not.  See documentation in the runtime\n-library units `System.Pool_Global`, `System.Pool_Size` and\n-`System.Pool_Local` in files :file:`s-poosiz.ads`,\n+``Storage_Size``is specified or not.  See documentation in the runtime\n+library units ``System.Pool_Global``, ``System.Pool_Size`` and\n+``System.Pool_Local`` in files :file:`s-poosiz.ads`,\n :file:`s-pooglo.ads` and :file:`s-pooloc.ads` for full details on the\n default pools used.\n \n@@ -503,13 +503,13 @@ default pools used.\n   names for the standard pool type(s).  See 13.11(17).\"\n \n See documentation in the sources of the run time mentioned in the previous\n-paragraph.  All these pools are accessible by means of `with`'ing\n+paragraph.  All these pools are accessible by means of `with`\\ ing\n these units.\n \n *\n-  \"The meaning of `Storage_Size`.  See 13.11(18).\"\n+  \"The meaning of ``Storage_Size``.  See 13.11(18).\"\n \n-`Storage_Size` is measured in storage units, and refers to the\n+``Storage_Size`` is measured in storage units, and refers to the\n total space available for an access type collection, or to the primary\n stack space for a task.\n \n@@ -523,21 +523,21 @@ for details on GNAT-defined aspects of storage pools.\n \n *\n   \"The set of restrictions allowed in a pragma\n-  `Restrictions`.  See 13.12(7).\"\n+  ``Restrictions``.  See 13.12(7).\"\n \n See :ref:`Standard_and_Implementation_Defined_Restrictions`.\n \n *\n   \"The consequences of violating limitations on\n-  `Restrictions` pragmas.  See 13.12(9).\"\n+  ``Restrictions`` pragmas.  See 13.12(9).\"\n \n Restrictions that can be checked at compile time result in illegalities\n if violated.  Currently there are no other consequences of violating\n restrictions.\n \n *\n-  \"The representation used by the `Read` and\n-  `Write` attributes of elementary types in terms of stream\n+  \"The representation used by the ``Read`` and\n+  ``Write`` attributes of elementary types in terms of stream\n   elements.  See 13.13.2(9).\"\n \n The representation is the in-memory representation of the base type of\n@@ -546,15 +546,15 @@ the type, using the number of bits corresponding to the\n \n *\n   \"The names and characteristics of the numeric subtypes\n-  declared in the visible part of package `Standard`.  See A.1(3).\"\n+  declared in the visible part of package ``Standard``.  See A.1(3).\"\n \n See items describing the integer and floating-point types supported.\n \n *\n-  \"The string returned by `Character_Set_Version`.\n+  \"The string returned by ``Character_Set_Version``.\n   See A.3.5(3).\"\n \n-`Ada.Wide_Characters.Handling.Character_Set_Version` returns\n+``Ada.Wide_Characters.Handling.Character_Set_Version`` returns\n the string \"Unicode 4.0\", referring to version 4.0 of the\n Unicode specification.\n \n@@ -567,21 +567,21 @@ library.  Only fast math mode is implemented.\n \n *\n   \"The sign of a zero result from some of the operators or\n-  functions in `Numerics.Generic_Elementary_Functions`, when\n-  `Float_Type'Signed_Zeros` is `True`.  See A.5.1(46).\"\n+  functions in ``Numerics.Generic_Elementary_Functions``, when\n+  ``Float_Type'Signed_Zeros`` is ``True``.  See A.5.1(46).\"\n \n The sign of zeroes follows the requirements of the IEEE 754 standard on\n floating-point.\n \n *\n   \"The value of\n-  `Numerics.Float_Random.Max_Image_Width`.  See A.5.2(27).\"\n+  ``Numerics.Float_Random.Max_Image_Width``.  See A.5.2(27).\"\n \n Maximum image width is 6864, see library file :file:`s-rannum.ads`.\n \n *\n   \"The value of\n-  `Numerics.Discrete_Random.Max_Image_Width`.  See A.5.2(27).\"\n+  ``Numerics.Discrete_Random.Max_Image_Width``.  See A.5.2(27).\"\n \n Maximum image width is 6864, see library file :file:`s-rannum.ads`.\n \n@@ -610,13 +610,13 @@ The minimum period between reset calls to guarantee distinct series of\n random numbers is one microsecond.\n \n *\n-  \"The values of the `Model_Mantissa`,\n-  `Model_Emin`, `Model_Epsilon`, `Model`,\n-  `Safe_First`, and `Safe_Last` attributes, if the Numerics\n+  \"The values of the ``Model_Mantissa``,\n+  ``Model_Emin``, ``Model_Epsilon``, ``Model``,\n+  ``Safe_First``, and ``Safe_Last`` attributes, if the Numerics\n   Annex is not supported.  See A.5.3(72).\"\n \n Run the compiler with *-gnatS* to produce a listing of package\n-`Standard`, has the values of all numeric attributes.\n+``Standard``, has the values of all numeric attributes.\n \n *\n   \"Any implementation-defined characteristics of the\n@@ -626,10 +626,10 @@ There are no special implementation defined characteristics for these\n packages.\n \n *\n-  \"The value of `Buffer_Size` in `Storage_IO`.  See\n+  \"The value of ``Buffer_Size`` in ``Storage_IO``.  See\n   A.9(10).\"\n \n-All type representations are contiguous, and the `Buffer_Size` is\n+All type representations are contiguous, and the ``Buffer_Size`` is\n the value of ``type'Size`` rounded up to the next storage unit\n boundary.\n \n@@ -641,38 +641,38 @@ These files are mapped onto the files provided by the C streams\n libraries.  See source file :file:`i-cstrea.ads` for further details.\n \n *\n-  \"The accuracy of the value produced by `Put`.  See\n+  \"The accuracy of the value produced by ``Put``.  See\n   A.10.9(36).\"\n \n If more digits are requested in the output than are represented by the\n precision of the value, zeroes are output in the corresponding least\n significant digit positions.\n \n *\n-  \"The meaning of `Argument_Count`, `Argument`, and\n-  `Command_Name`.  See A.15(1).\"\n+  \"The meaning of ``Argument_Count``, ``Argument``, and\n+  ``Command_Name``.  See A.15(1).\"\n \n-These are mapped onto the `argv` and `argc` parameters of the\n+These are mapped onto the ``argv`` and ``argc`` parameters of the\n main program in the natural manner.\n \n *\n-  \"The interpretation of the `Form` parameter in procedure\n-  `Create_Directory`.  See A.16(56).\"\n+  \"The interpretation of the ``Form`` parameter in procedure\n+  ``Create_Directory``.  See A.16(56).\"\n \n-The `Form` parameter is not used.\n+The ``Form`` parameter is not used.\n \n *\n-  \"The interpretation of the `Form` parameter in procedure\n-  `Create_Path`.  See A.16(60).\"\n+  \"The interpretation of the ``Form`` parameter in procedure\n+  ``Create_Path``.  See A.16(60).\"\n \n-The `Form` parameter is not used.\n+The ``Form`` parameter is not used.\n \n *\n-  \"The interpretation of the `Form` parameter in procedure\n-  `Copy_File`.  See A.16(68).\"\n+  \"The interpretation of the ``Form`` parameter in procedure\n+  ``Copy_File``.  See A.16(68).\"\n \n-The `Form` parameter is case-insensitive.\n-Two fields are recognized in the `Form` parameter::\n+The ``Form`` parameter is case-insensitive.\n+Two fields are recognized in the ``Form`` parameter::\n \n   *preserve=<value>*\n   *mode=<value>*\n@@ -721,13 +721,13 @@ Examples of incorrect Forms::\n   Form => \"mode=internal, preserve=timestamps\"\n \n *\n-  \"The interpretation of the `Pattern` parameter, when not the null string,\n-  in the `Start_Search` and `Search` procedures.\n+  \"The interpretation of the ``Pattern`` parameter, when not the null string,\n+  in the ``Start_Search`` and ``Search`` procedures.\n   See A.16(104) and A.16(112).\"\n \n-When the `Pattern` parameter is not the null string, it is interpreted\n+When the ``Pattern`` parameter is not the null string, it is interpreted\n according to the syntax of regular expressions as defined in the\n-`GNAT.Regexp` package.\n+``GNAT.Regexp`` package.\n \n See :ref:`GNAT.Regexp_(g-regexp.ads)`.\n \n@@ -757,7 +757,7 @@ Convention Name         Interpretation\n *Default*               Treated the same as C\n *External*              Treated the same as C\n *Fortran*               Fortran\n-*Intrinsic*             For support of pragma `Import` with convention Intrinsic, see\n+*Intrinsic*             For support of pragma ``Import`` with convention Intrinsic, see\n                         separate section on Intrinsic Subprograms.\n *Stdcall*               Stdcall (used for Windows implementations only).  This convention correspond\n                         to the WINAPI (previously called Pascal convention) C/C++ convention under\n@@ -767,8 +767,8 @@ Convention Name         Interpretation\n *Win32*                 Synonym for Stdcall\n *Stubbed*               Stubbed is a special convention used to indicate that the body of the\n                         subprogram will be entirely ignored.  Any call to the subprogram\n-                        is converted into a raise of the `Program_Error` exception.  If a\n-                        pragma `Import` specifies convention `stubbed` then no body need\n+                        is converted into a raise of the ``Program_Error`` exception.  If a\n+                        pragma ``Import`` specifies convention ``stubbed`` then no body need\n                         be present at all.  This convention is useful during development for the\n                         inclusion of subprograms whose body has not yet been written.\n                         In addition, all otherwise unrecognized convention names are also\n@@ -792,41 +792,41 @@ external language, interpreting the Ada name as being in all lower case\n letters.\n \n *\n-  \"The effect of pragma `Linker_Options`.  See B.1(37).\"\n+  \"The effect of pragma ``Linker_Options``.  See B.1(37).\"\n \n-The string passed to `Linker_Options` is presented uninterpreted as\n+The string passed to ``Linker_Options`` is presented uninterpreted as\n an argument to the link command, unless it contains ASCII.NUL characters.\n NUL characters if they appear act as argument separators, so for example\n \n .. code-block:: ada\n \n   pragma Linker_Options (\"-labc\" & ASCII.NUL & \"-ldef\");\n \n-causes two separate arguments `-labc` and `-ldef` to be passed to the\n+causes two separate arguments ``-labc`` and ``-ldef`` to be passed to the\n linker. The order of linker options is preserved for a given unit. The final\n list of options passed to the linker is in reverse order of the elaboration\n order. For example, linker options for a body always appear before the options\n from the corresponding package spec.\n \n *\n   \"The contents of the visible part of package\n-  `Interfaces` and its language-defined descendants.  See B.2(1).\"\n+  ``Interfaces`` and its language-defined descendants.  See B.2(1).\"\n \n See files with prefix :file:`i-` in the distributed library.\n \n *\n   \"Implementation-defined children of package\n-  `Interfaces`.  The contents of the visible part of package\n-  `Interfaces`.  See B.2(11).\"\n+  ``Interfaces``.  The contents of the visible part of package\n+  ``Interfaces``.  See B.2(11).\"\n \n See files with prefix :file:`i-` in the distributed library.\n \n *\n-  \"The types `Floating`, `Long_Floating`,\n-  `Binary`, `Long_Binary`, `Decimal_ Element`, and\n-  `COBOL_Character`; and the initialization of the variables\n-  `Ada_To_COBOL` and `COBOL_To_Ada`, in\n-  `Interfaces.COBOL`.  See B.4(50).\"\n+  \"The types ``Floating``, ``Long_Floating``,\n+  ``Binary``, ``Long_Binary``, ``Decimal_ Element``, and\n+  ``COBOL_Character``; and the initialization of the variables\n+  ``Ada_To_COBOL`` and ``COBOL_To_Ada``, in\n+  ``Interfaces.COBOL``.  See B.4(50).\"\n \n ===================== ====================================\n COBOL                 Ada\n@@ -857,7 +857,7 @@ See documentation in file :file:`s-maccod.ads` in the distributed library.\n \n Interrupts are mapped to signals or conditions as appropriate.  See\n definition of unit\n-`Ada.Interrupt_Names` in source file :file:`a-intnam.ads` for details\n+``Ada.Interrupt_Names`` in source file :file:`a-intnam.ads` for details\n on the interrupts supported on a particular target.\n \n *\n@@ -868,25 +868,25 @@ GNAT does not permit a partition to be restarted without reloading,\n except under control of the debugger.\n \n *\n-  \"The semantics of pragma `Discard_Names`.  See C.5(7).\"\n+  \"The semantics of pragma ``Discard_Names``.  See C.5(7).\"\n \n-Pragma `Discard_Names` causes names of enumeration literals to\n+Pragma ``Discard_Names`` causes names of enumeration literals to\n be suppressed.  In the presence of this pragma, the Image attribute\n provides the image of the Pos of the literal, and Value accepts\n Pos values.\n \n *\n-  \"The result of the `Task_Identification.Image`\n+  \"The result of the ``Task_Identification.Image``\n   attribute.  See C.7.1(7).\"\n \n The result of this attribute is a string that identifies\n-the object or component that denotes a given task. If a variable `Var`\n-has a task type, the image for this task will have the form `Var_`XXXXXXXX``,\n-where the suffix\n+the object or component that denotes a given task. If a variable ``Var``\n+has a task type, the image for this task will have the form :samp:`Var_{XXXXXXXX}`,\n+where the suffix *XXXXXXXX*\n is the hexadecimal representation of the virtual address of the corresponding\n task control block. If the variable is an array of tasks, the image of each\n task will have the form of an indexed component indicating the position of a\n-given task in the array, e.g., `Group(5)_`XXXXXXX``. If the task is a\n+given task in the array, e.g., :samp:`Group(5)_{XXXXXXX}`. If the task is a\n component of a record, the image of the task will have the form of a selected\n component. These rules are fully recursive, so that the image of a task that\n is a subcomponent of a composite object corresponds to the expression that\n@@ -904,28 +904,30 @@ the numeric suffix, that is to say the hexadecimal representation of the\n virtual address of the control block of the task.\n \n *\n-  \"The value of `Current_Task` when in a protected entry\n+  \"The value of ``Current_Task`` when in a protected entry\n   or interrupt handler.  See C.7.1(17).\"\n \n Protected entries or interrupt handlers can be executed by any\n-convenient thread, so the value of `Current_Task` is undefined.\n+convenient thread, so the value of ``Current_Task`` is undefined.\n \n *\n-  \"The effect of calling `Current_Task` from an entry\n+  \"The effect of calling ``Current_Task`` from an entry\n   body or interrupt handler.  See C.7.1(19).\"\n \n-The effect of calling `Current_Task` from an entry body or\n-interrupt handler is to return the identification of the task currently\n-executing the code.\n+When GNAT can determine statically that ``Current_Task`` is called directly in\n+the body of an entry (or barrier) then a warning is emitted and ``Program_Error``\n+is raised at run time. Otherwise, the effect of calling ``Current_Task`` from an\n+entry body or interrupt handler is to return the identification of the task\n+currently executing the code.\n \n *\n   \"Implementation-defined aspects of\n-  `Task_Attributes`.  See C.7.2(19).\"\n+  ``Task_Attributes``.  See C.7.2(19).\"\n \n-There are no implementation-defined aspects of `Task_Attributes`.\n+There are no implementation-defined aspects of ``Task_Attributes``.\n \n *\n-  \"Values of all `Metrics`.  See D(2).\"\n+  \"Values of all ``Metrics``.  See D(2).\"\n \n The metrics information for GNAT depends on the performance of the\n underlying operating system.  The sources of the run-time for tasking\n@@ -937,8 +939,8 @@ on the exact target in use, this information can be used to determine\n the required metrics.\n \n *\n-  \"The declarations of `Any_Priority` and\n-  `Priority`.  See D.1(11).\"\n+  \"The declarations of ``Any_Priority`` and\n+  ``Priority``.  See D.1(11).\"\n \n See declarations in file :file:`system.ads`.\n \n@@ -963,8 +965,8 @@ and appropriate, these threads correspond to native threads of the\n underlying operating system.\n \n *\n-  \"Implementation-defined `policy_identifiers` allowed\n-  in a pragma `Task_Dispatching_Policy`.  See D.2.2(3).\"\n+  \"Implementation-defined *policy_identifiers* allowed\n+  in a pragma ``Task_Dispatching_Policy``.  See D.2.2(3).\"\n \n There are no implementation-defined policy-identifiers allowed in this\n pragma.\n@@ -982,32 +984,32 @@ of delay expirations for lower priority tasks.\n The policy is the same as that of the underlying threads implementation.\n \n *\n-  \"Implementation-defined `policy_identifiers` allowed\n-  in a pragma `Locking_Policy`.  See D.3(4).\"\n+  \"Implementation-defined *policy_identifiers* allowed\n+  in a pragma ``Locking_Policy``.  See D.3(4).\"\n \n The two implementation defined policies permitted in GNAT are\n-`Inheritance_Locking` and  `Concurrent_Readers_Locking`. On\n-targets that support the `Inheritance_Locking` policy, locking is\n+``Inheritance_Locking`` and  ``Concurrent_Readers_Locking``. On\n+targets that support the ``Inheritance_Locking`` policy, locking is\n implemented by inheritance, i.e., the task owning the lock operates\n at a priority equal to the highest priority of any task currently\n requesting the lock. On targets that support the\n-`Concurrent_Readers_Locking` policy, locking is implemented with a\n+``Concurrent_Readers_Locking`` policy, locking is implemented with a\n read/write lock allowing multiple protected object functions to enter\n concurrently.\n \n *\n   \"Default ceiling priorities.  See D.3(10).\"\n \n The ceiling priority of protected objects of the type\n-`System.Interrupt_Priority'Last` as described in the Ada\n+``System.Interrupt_Priority'Last`` as described in the Ada\n Reference Manual D.3(10),\n \n *\n   \"The ceiling of any protected object used internally by\n   the implementation.  See D.3(16).\"\n \n The ceiling priority of internal protected objects is\n-`System.Priority'Last`.\n+``System.Priority'Last``.\n \n *\n   \"Implementation-defined queuing policies.  See D.4(1).\"\n@@ -1031,25 +1033,25 @@ task creation.\n \n *\n   \"What happens when a task terminates in the presence of\n-  pragma `No_Task_Termination`. See D.7(15).\"\n+  pragma ``No_Task_Termination``. See D.7(15).\"\n \n Execution is erroneous in that case.\n \n *\n   \"Implementation-defined aspects of pragma\n-  `Restrictions`.  See D.7(20).\"\n+  ``Restrictions``.  See D.7(20).\"\n \n There are no such implementation-defined aspects.\n \n *\n   \"Implementation-defined aspects of package\n-  `Real_Time`.  See D.8(17).\"\n+  ``Real_Time``.  See D.8(17).\"\n \n-There are no implementation defined aspects of package `Real_Time`.\n+There are no implementation defined aspects of package ``Real_Time``.\n \n *\n   \"Implementation-defined aspects of\n-  `delay_statements`.  See D.9(8).\"\n+  *delay_statements*.  See D.9(8).\"\n \n Any difference greater than one microsecond will cause the task to be\n delayed (see D.9(7)).\n@@ -1114,7 +1116,7 @@ implementation defined interfaces.\n \n *\n   \"The values of named numbers in the package\n-  `Decimal`.  See F.2(7).\"\n+  ``Decimal``.  See F.2(7).\"\n \n ==================== ==========\n Named Number         Value\n@@ -1127,14 +1129,14 @@ Named Number         Value\n ==================== ==========\n \n *\n-  \"The value of `Max_Picture_Length` in the package\n-  `Text_IO.Editing`.  See F.3.3(16).\"\n+  \"The value of ``Max_Picture_Length`` in the package\n+  ``Text_IO.Editing``.  See F.3.3(16).\"\n \n 64\n \n *\n-  \"The value of `Max_Picture_Length` in the package\n-  `Wide_Text_IO.Editing`.  See F.3.4(5).\"\n+  \"The value of ``Max_Picture_Length`` in the package\n+  ``Wide_Text_IO.Editing``.  See F.3.4(5).\"\n \n 64\n \n@@ -1147,17 +1149,17 @@ operations.  Only fast math mode is currently supported.\n \n *\n   \"The sign of a zero result (or a component thereof) from\n-  any operator or function in `Numerics.Generic_Complex_Types`, when\n-  `Real'Signed_Zeros` is True.  See G.1.1(53).\"\n+  any operator or function in ``Numerics.Generic_Complex_Types``, when\n+  ``Real'Signed_Zeros`` is True.  See G.1.1(53).\"\n \n The signs of zero values are as recommended by the relevant\n implementation advice.\n \n *\n   \"The sign of a zero result (or a component thereof) from\n   any operator or function in\n-  `Numerics.Generic_Complex_Elementary_Functions`, when\n-  `Real'Signed_Zeros` is `True`.  See G.1.2(45).\"\n+  ``Numerics.Generic_Complex_Elementary_Functions``, when\n+  ``Real'Signed_Zeros`` is ``True``.  See G.1.2(45).\"\n \n The signs of zero values are as recommended by the relevant\n implementation advice.\n@@ -1179,8 +1181,8 @@ floating-point format.\n \n *\n   \"The result of a floating point arithmetic operation in\n-  overflow situations, when the `Machine_Overflows` attribute of the\n-  result type is `False`.  See G.2.1(13).\"\n+  overflow situations, when the ``Machine_Overflows`` attribute of the\n+  result type is ``False``.  See G.2.1(13).\"\n \n Infinite and NaN values are produced as dictated by the IEEE\n floating-point standard.\n@@ -1208,7 +1210,7 @@ floating-point, the operation is done in floating-point, and the result\n is converted to the target type.\n \n *\n-  \"Conditions on a `universal_real` operand of a fixed\n+  \"Conditions on a *universal_real* operand of a fixed\n   point multiplication or division for which the result shall be in the\n   perfect result set.  See G.2.3(22).\"\n \n@@ -1218,16 +1220,16 @@ representable in 64-bits.\n \n *\n   \"The result of a fixed point arithmetic operation in\n-  overflow situations, when the `Machine_Overflows` attribute of the\n-  result type is `False`.  See G.2.3(27).\"\n+  overflow situations, when the ``Machine_Overflows`` attribute of the\n+  result type is ``False``.  See G.2.3(27).\"\n \n-Not relevant, `Machine_Overflows` is `True` for fixed-point\n+Not relevant, ``Machine_Overflows`` is ``True`` for fixed-point\n types.\n \n *\n   \"The result of an elementary function reference in\n-  overflow situations, when the `Machine_Overflows` attribute of the\n-  result type is `False`.  See G.2.4(4).\"\n+  overflow situations, when the ``Machine_Overflows`` attribute of the\n+  result type is ``False``.  See G.2.4(4).\"\n \n IEEE infinite and Nan values are produced as appropriate.\n \n@@ -1248,8 +1250,8 @@ Information on this subject is not yet available.\n *\n   \"The result of a complex arithmetic operation or complex\n   elementary function reference in overflow situations, when the\n-  `Machine_Overflows` attribute of the corresponding real type is\n-  `False`.  See G.2.6(5).\"\n+  ``Machine_Overflows`` attribute of the corresponding real type is\n+  ``False``.  See G.2.6(5).\"\n \n IEEE infinite and Nan values are produced as appropriate.\n \n@@ -1268,21 +1270,21 @@ Information on this subject is not yet available.\n \n *\n   \"Implementation-defined aspects of pragma\n-  `Inspection_Point`.  See H.3.2(8).\"\n+  ``Inspection_Point``.  See H.3.2(8).\"\n \n-Pragma `Inspection_Point` ensures that the variable is live and can\n+Pragma ``Inspection_Point`` ensures that the variable is live and can\n be examined by the debugger at the inspection point.\n \n *\n   \"Implementation-defined aspects of pragma\n-  `Restrictions`.  See H.4(25).\"\n+  ``Restrictions``.  See H.4(25).\"\n \n-There are no implementation-defined aspects of pragma `Restrictions`.  The\n-use of pragma `Restrictions [No_Exceptions]` has no effect on the\n-generated code.  Checks must suppressed by use of pragma `Suppress`.\n+There are no implementation-defined aspects of pragma ``Restrictions``.  The\n+use of pragma ``Restrictions [No_Exceptions]`` has no effect on the\n+generated code.  Checks must suppressed by use of pragma ``Suppress``.\n \n *\n-  \"Any restrictions on pragma `Restrictions`.  See\n+  \"Any restrictions on pragma ``Restrictions``.  See\n   H.4(27).\"\n \n-There are no restrictions on pragma `Restrictions`.\n+There are no restrictions on pragma ``Restrictions``."}, {"sha": "305301338cfaeebf3f0c67ee3aee07a5e30f1e79", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 792, "deletions": 702, "changes": 1494, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453"}, {"sha": "2825362c61640867dbdf2d9738730548f793301e", "filename": "gcc/ada/doc/gnat_rm/implementation_of_ada_2012_features.rst", "status": "modified", "additions": 122, "deletions": 122, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_of_ada_2012_features.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_of_ada_2012_features.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_of_ada_2012_features.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -19,7 +19,7 @@ implemented.\n Generally, these features are only\n available if the *-gnat12* (Ada 2012 features enabled) option is set,\n which is the default behavior,\n-or if the configuration pragma `Ada_2012` is used.\n+or if the configuration pragma ``Ada_2012`` is used.\n \n However, new pragmas, attributes, and restrictions are\n unconditionally available, since the Ada 95 standard allows the addition of\n@@ -88,7 +88,7 @@ http://www.ada-auth.org/ai05-summary.html.\n * *AI-0163 Pragmas in place of null (2010-07-01)*\n \n   A statement sequence may be composed entirely of pragmas. It is no longer\n-  necessary to add a dummy `null` statement to make the sequence legal.\n+  necessary to add a dummy ``null`` statement to make the sequence legal.\n \n   RM References:  2.08 (7)   2.08 (16)\n \n@@ -109,58 +109,58 @@ http://www.ada-auth.org/ai05-summary.html.\n   forms of declarations listed in the AI are supported. The following is a\n   list of the aspects supported (with GNAT implementation aspects marked)\n \n-================================== ===========\n-Supported Aspect                    Source\n-================================== ===========\n-  `Ada_2005`                           -- GNAT\n-  `Ada_2012`                           -- GNAT\n-  `Address`\n-  `Alignment`\n-  `Atomic`\n-  `Atomic_Components`\n-  `Bit_Order`\n-  `Component_Size`\n-  `Contract_Cases`                     -- GNAT\n-  `Discard_Names`\n-  `External_Tag`\n-  `Favor_Top_Level`                    -- GNAT\n-  `Inline`\n-  `Inline_Always`                      -- GNAT\n-  `Invariant`                          -- GNAT\n-  `Machine_Radix`\n-  `No_Return`\n-  `Object_Size`                        -- GNAT\n-  `Pack`\n-  `Persistent_BSS`                     -- GNAT\n-  `Post`\n-  `Pre`\n-  `Predicate`\n-  `Preelaborable_Initialization`\n-  `Pure_Function`                      -- GNAT\n-  `Remote_Access_Type`                 -- GNAT\n-  `Shared`                             -- GNAT\n-  `Size`\n-  `Storage_Pool`\n-  `Storage_Size`\n-  `Stream_Size`\n-  `Suppress`\n-  `Suppress_Debug_Info`                -- GNAT\n-  `Test_Case`                          -- GNAT\n-  `Thread_Local_Storage`               -- GNAT\n-  `Type_Invariant`\n-  `Unchecked_Union`\n-  `Universal_Aliasing`                 -- GNAT\n-  `Unmodified`                         -- GNAT\n-  `Unreferenced`                       -- GNAT\n-  `Unreferenced_Objects`               -- GNAT\n-  `Unsuppress`\n-  `Value_Size`                         -- GNAT\n-  `Volatile`\n-  `Volatile_Components`\n-  `Warnings`                           -- GNAT\n-================================== ===========\n-\n-  Note that for aspects with an expression, e.g. `Size`, the expression is\n+==================================== ===========\n+Supported Aspect                     Source\n+==================================== ===========\n+  ``Ada_2005``                           -- GNAT\n+  ``Ada_2012``                           -- GNAT\n+  ``Address``\n+  ``Alignment``\n+  ``Atomic``\n+  ``Atomic_Components``\n+  ``Bit_Order``\n+  ``Component_Size``\n+  ``Contract_Cases``                     -- GNAT\n+  ``Discard_Names``\n+  ``External_Tag``\n+  ``Favor_Top_Level``                    -- GNAT\n+  ``Inline``\n+  ``Inline_Always``                      -- GNAT\n+  ``Invariant``                          -- GNAT\n+  ``Machine_Radix``\n+  ``No_Return``\n+  ``Object_Size``                        -- GNAT\n+  ``Pack``\n+  ``Persistent_BSS``                     -- GNAT\n+  ``Post``\n+  ``Pre``\n+  ``Predicate``\n+  ``Preelaborable_Initialization``\n+  ``Pure_Function``                      -- GNAT\n+  ``Remote_Access_Type``                 -- GNAT\n+  ``Shared``                             -- GNAT\n+  ``Size``\n+  ``Storage_Pool``\n+  ``Storage_Size``\n+  ``Stream_Size``\n+  ``Suppress``\n+  ``Suppress_Debug_Info``                -- GNAT\n+  ``Test_Case``                          -- GNAT\n+  ``Thread_Local_Storage``               -- GNAT\n+  ``Type_Invariant``\n+  ``Unchecked_Union``\n+  ``Universal_Aliasing``                 -- GNAT\n+  ``Unmodified``                         -- GNAT\n+  ``Unreferenced``                       -- GNAT\n+  ``Unreferenced_Objects``               -- GNAT\n+  ``Unsuppress``\n+  ``Value_Size``                         -- GNAT\n+  ``Volatile``\n+  ``Volatile_Components``\n+  ``Warnings``                           -- GNAT\n+==================================== ===========\n+\n+  Note that for aspects with an expression, e.g. ``Size``, the expression is\n   treated like a default expression (visibility is analyzed at the point of\n   occurrence of the aspect, but evaluation of the expression occurs at the\n   freeze point of the entity involved).\n@@ -188,7 +188,7 @@ Supported Aspect                    Source\n * *AI-0003 Qualified expressions as names (2010-07-11)*\n \n   In Ada 2012, a qualified expression is considered to be syntactically a name,\n-  meaning that constructs such as `A'(F(X)).B` are now legal. This is\n+  meaning that constructs such as ``A'(F(X)).B`` are now legal. This is\n   useful in disambiguating some cases of overloading.\n \n   RM References:  3.03 (11)   3.03 (21)   4.01 (2)   4.04 (7)   4.07 (3)\n@@ -211,7 +211,7 @@ Supported Aspect                    Source\n \n   The wording in the RM implied that if you have a general access to a\n   constrained object, it could be used to modify the discriminants. This was\n-  obviously not intended. `Constraint_Error` should be raised, and GNAT\n+  obviously not intended. ``Constraint_Error`` should be raised, and GNAT\n   has always done so in this situation.\n \n   RM References:  3.03 (23)   3.10.02 (26/2)   4.01 (9)   6.04.01 (17)   8.05.01 (5/2)\n@@ -242,22 +242,22 @@ Supported Aspect                    Source\n * *AI-0181 Soft hyphen is a non-graphic character (2010-07-23)*\n \n   From Ada 2005 on, soft hyphen is considered a non-graphic character, which\n-  means that it has a special name (`SOFT_HYPHEN`) in conjunction with the\n-  `Image` and `Value` attributes for the character types. Strictly\n+  means that it has a special name (``SOFT_HYPHEN``) in conjunction with the\n+  ``Image`` and ``Value`` attributes for the character types. Strictly\n   speaking this is an inconsistency with Ada 95, but in practice the use of\n   these attributes is so obscure that it will not cause problems.\n \n   RM References:  3.05.02 (2/2)   A.01 (35/2)   A.03.03 (21)\n \n .. index:: AI-0182 (Ada 2012 feature)\n \n-* *AI-0182 Additional forms for `Character'Value* (0000-00-00)`\n+* *AI-0182 Additional forms for* ``Character'Value`` *(0000-00-00)*\n \n-  This AI allows `Character'Value` to accept the string `'?'` where\n-  `?` is any character including non-graphic control characters. GNAT has\n+  This AI allows ``Character'Value`` to accept the string ``'?'`` where\n+  ``?`` is any character including non-graphic control characters. GNAT has\n   always accepted such strings. It also allows strings such as\n-  `HEX_00000041` to be accepted, but GNAT does not take advantage of this\n-  permission and raises `Constraint_Error`, as is certainly still\n+  ``HEX_00000041`` to be accepted, but GNAT does not take advantage of this\n+  permission and raises ``Constraint_Error``, as is certainly still\n   permitted.\n \n   RM References:  3.05 (56/2)\n@@ -298,8 +298,8 @@ Supported Aspect                    Source\n \n * *AI-0173 Testing if tags represent abstract types (2010-07-03)*\n \n-  The function `Ada.Tags.Type_Is_Abstract` returns `True` if invoked\n-  with the tag of an abstract type, and `False` otherwise.\n+  The function ``Ada.Tags.Type_Is_Abstract`` returns ``True`` if invoked\n+  with the tag of an abstract type, and ``False`` otherwise.\n \n   RM References:  3.09 (7.4/2)   3.09 (12.4/2)\n \n@@ -450,8 +450,8 @@ Supported Aspect                    Source\n \n * *AI-0037 Out-of-range box associations in aggregate (0000-00-00)*\n \n-  This AI confirms that an association of the form `Indx => <>` in an\n-  array aggregate must raise `Constraint_Error` if `Indx`\n+  This AI confirms that an association of the form ``Indx => <>`` in an\n+  array aggregate must raise ``Constraint_Error`` if ``Indx``\n   is out of range. The RM specified a range check on other associations, but\n   not when the value of the association was defaulted. GNAT has always inserted\n   a constraint check on the index value.\n@@ -464,7 +464,7 @@ Supported Aspect                    Source\n \n   Equality of untagged record composes, so that the predefined equality for a\n   composite type that includes a component of some untagged record type\n-  `R` uses the equality operation of `R` (which may be user-defined\n+  ``R`` uses the equality operation of ``R`` (which may be user-defined\n   or predefined). This makes the behavior of untagged records identical to that\n   of tagged types in this respect.\n \n@@ -541,7 +541,7 @@ Supported Aspect                    Source\n \n   The new syntax for iterating over arrays and containers is now implemented.\n   Iteration over containers is for now limited to read-only iterators. Only\n-  default iterators are supported, with the syntax:  `for Elem of C`.\n+  default iterators are supported, with the syntax:  ``for Elem of C``.\n \n   RM References:  5.05\n \n@@ -586,7 +586,7 @@ Supported Aspect                    Source\n \n * *AI-0196 Null exclusion tests for out parameters (0000-00-00)*\n \n-  Null exclusion checks are not made for `**out**` parameters when\n+  Null exclusion checks are not made for ``out`` parameters when\n   evaluating the actual parameters. GNAT has never generated these checks.\n \n   RM References:  6.04.01 (13)\n@@ -638,7 +638,7 @@ Supported Aspect                    Source\n \n * *AI-0050 Raising Constraint_Error early for function call (0000-00-00)*\n \n-  The implementation permissions for raising `Constraint_Error` early on a function call\n+  The implementation permissions for raising ``Constraint_Error`` early on a function call\n   when it was clear an exception would be raised were over-permissive and allowed\n   mishandling of discriminants in some cases. GNAT did\n   not take advantage of these incorrect permissions in any case.\n@@ -745,7 +745,7 @@ Supported Aspect                    Source\n   Requeue is permitted to a protected, synchronized or task interface primitive\n   providing it is known that the overriding operation is an entry. Otherwise\n   the requeue statement has the same effect as a procedure call. Use of pragma\n-  `Implemented` provides a way to impose a static requirement on the\n+  ``Implemented`` provides a way to impose a static requirement on the\n   overriding operation by adhering to one of the implementation kinds: entry,\n   protected procedure or any of the above.\n \n@@ -756,7 +756,7 @@ Supported Aspect                    Source\n \n * *AI-0201 Independence of atomic object components (2010-07-22)*\n \n-  If an Atomic object has a pragma `Pack` or a `Component_Size`\n+  If an Atomic object has a pragma ``Pack`` or a ``Component_Size``\n   attribute, then individual components may not be addressable by independent\n   tasks. However, if the representation clause has no effect (is confirming),\n   then independence is not compromised. Furthermore, in GNAT, specification of\n@@ -770,8 +770,8 @@ Supported Aspect                    Source\n \n * *AI-0009 Pragma Independent[_Components] (2010-07-23)*\n \n-  This AI introduces the new pragmas `Independent` and\n-  `Independent_Components`,\n+  This AI introduces the new pragmas ``Independent`` and\n+  ``Independent_Components``,\n   which control guaranteeing independence of access to objects and components.\n   The AI also requires independence not unaffected by confirming rep clauses.\n \n@@ -782,7 +782,7 @@ Supported Aspect                    Source\n \n * *AI-0072 Task signalling using 'Terminated (0000-00-00)*\n \n-  This AI clarifies that task signalling for reading `'Terminated` only\n+  This AI clarifies that task signalling for reading ``'Terminated`` only\n   occurs if the result is True. GNAT semantics has always been consistent with\n   this notion of task signalling.\n \n@@ -904,9 +904,9 @@ Supported Aspect                    Source\n \n   This AI concerns giving names to various representation aspects, but the\n   practical effect is simply to make the use of duplicate\n-  `Atomic[_Components]`,\n-  `Volatile[_Components]`, and\n-  `Independent[_Components]` pragmas illegal, and GNAT\n+  ``Atomic[_Components]``,\n+  ``Volatile[_Components]``, and\n+  ``Independent[_Components]`` pragmas illegal, and GNAT\n   now performs this required check.\n \n   RM References:  13.01 (8)\n@@ -925,7 +925,7 @@ Supported Aspect                    Source\n * *AI-0012 Pack/Component_Size for aliased/atomic (2010-07-15)*\n \n   It is now illegal to give an inappropriate component size or a pragma\n-  `Pack` that attempts to change the component size in the case of atomic\n+  ``Pack`` that attempts to change the component size in the case of atomic\n   or aliased components. Previously GNAT ignored such an attempt with a\n   warning.\n \n@@ -945,10 +945,10 @@ Supported Aspect                    Source\n \n * *AI-0095 Address of intrinsic subprograms (0000-00-00)*\n \n-  The prefix of `'Address` cannot statically denote a subprogram with\n-  convention `Intrinsic`. The use of the `Address` attribute raises\n-  `Program_Error` if the prefix denotes a subprogram with convention\n-  `Intrinsic`.\n+  The prefix of ``'Address`` cannot statically denote a subprogram with\n+  convention ``Intrinsic``. The use of the ``Address`` attribute raises\n+  ``Program_Error`` if the prefix denotes a subprogram with convention\n+  ``Intrinsic``.\n \n   RM References:  13.03 (11/1)\n \n@@ -967,17 +967,17 @@ Supported Aspect                    Source\n * *AI-0146 Type invariants (2009-09-21)*\n \n   Type invariants may be specified for private types using the aspect notation.\n-  Aspect `Type_Invariant` may be specified for any private type,\n-  `Type_Invariant'Class` can\n+  Aspect ``Type_Invariant`` may be specified for any private type,\n+  ``Type_Invariant'Class`` can\n   only be specified for tagged types, and is inherited by any descendent of the\n   tagged types. The invariant is a boolean expression that is tested for being\n   true in the following situations: conversions to the private type, object\n   declarations for the private type that are default initialized, and\n   [**in**] **out**\n   parameters and returned result on return from any primitive operation for\n   the type that is visible to a client.\n-  GNAT defines the synonyms `Invariant` for `Type_Invariant` and\n-  `Invariant'Class` for `Type_Invariant'Class`.\n+  GNAT defines the synonyms ``Invariant`` for ``Type_Invariant`` and\n+  ``Invariant'Class`` for ``Type_Invariant'Class``.\n \n   RM References:  13.03.03 (00)\n \n@@ -1011,8 +1011,8 @@ Supported Aspect                    Source\n \n * *AI-0193 Alignment of allocators (2010-09-16)*\n \n-  This AI introduces a new attribute `Max_Alignment_For_Allocation`,\n-  analogous to `Max_Size_In_Storage_Elements`, but for alignment instead\n+  This AI introduces a new attribute ``Max_Alignment_For_Allocation``,\n+  analogous to ``Max_Size_In_Storage_Elements``, but for alignment instead\n   of size.\n \n   RM References:  13.11 (16)   13.11 (21)   13.11.01 (0)   13.11.01 (1)\n@@ -1048,7 +1048,7 @@ Supported Aspect                    Source\n \n * *AI-0161 Restriction No_Default_Stream_Attributes (2010-09-11)*\n \n-  A new restriction `No_Default_Stream_Attributes` prevents the use of any\n+  A new restriction ``No_Default_Stream_Attributes`` prevents the use of any\n   of the default stream attributes for elementary types. If this restriction is\n   in force, then it is necessary to provide explicit subprograms for any\n   stream attributes used.\n@@ -1059,7 +1059,7 @@ Supported Aspect                    Source\n \n * *AI-0194 Value of Stream_Size attribute (0000-00-00)*\n \n-  The `Stream_Size` attribute returns the default number of bits in the\n+  The ``Stream_Size`` attribute returns the default number of bits in the\n   stream representation of the given type.\n   This value is not affected by the presence\n   of stream subprogram attributes for the type. GNAT has always implemented\n@@ -1131,12 +1131,12 @@ Supported Aspect                    Source\n \n * *AI-0114 Classification of letters (0000-00-00)*\n \n-  The code points 170 (`FEMININE ORDINAL INDICATOR`),\n-  181 (`MICRO SIGN`), and\n-  186 (`MASCULINE ORDINAL INDICATOR`) are technically considered\n+  The code points 170 (``FEMININE ORDINAL INDICATOR``),\n+  181 (``MICRO SIGN``), and\n+  186 (``MASCULINE ORDINAL INDICATOR``) are technically considered\n   lower case letters by Unicode.\n   However, they are not allowed in identifiers, and they\n-  return `False` to `Ada.Characters.Handling.Is_Letter/Is_Lower`.\n+  return ``False`` to ``Ada.Characters.Handling.Is_Letter/Is_Lower``.\n   This behavior is consistent with that defined in Ada 95.\n \n   RM References:  A.03.02 (59)   A.04.06 (7)\n@@ -1145,22 +1145,22 @@ Supported Aspect                    Source\n \n * *AI-0185 Ada.Wide_[Wide_]Characters.Handling (2010-07-06)*\n \n-  Two new packages `Ada.Wide_[Wide_]Characters.Handling` provide\n-  classification functions for `Wide_Character` and\n-  `Wide_Wide_Character`, as well as providing\n-  case folding routines for `Wide_[Wide_]Character` and\n-  `Wide_[Wide_]String`.\n+  Two new packages ``Ada.Wide_[Wide_]Characters.Handling`` provide\n+  classification functions for ``Wide_Character`` and\n+  ``Wide_Wide_Character``, as well as providing\n+  case folding routines for ``Wide_[Wide_]Character`` and\n+  ``Wide_[Wide_]String``.\n \n   RM References:  A.03.05 (0)   A.03.06 (0)\n \n .. index:: AI-0031 (Ada 2012 feature)\n \n * *AI-0031 Add From parameter to Find_Token (2010-07-25)*\n \n-  A new version of `Find_Token` is added to all relevant string packages,\n-  with an extra parameter `From`. Instead of starting at the first\n+  A new version of ``Find_Token`` is added to all relevant string packages,\n+  with an extra parameter ``From``. Instead of starting at the first\n   character of the string, the search for a matching Token starts at the\n-  character indexed by the value of `From`.\n+  character indexed by the value of ``From``.\n   These procedures are available in all versions of Ada\n   but if used in versions earlier than Ada 2012 they will generate a warning\n   that an Ada 2012 subprogram is being used.\n@@ -1173,7 +1173,7 @@ Supported Aspect                    Source\n * *AI-0056 Index on null string returns zero (0000-00-00)*\n \n   The wording in the Ada 2005 RM implied an incompatible handling of the\n-  `Index` functions, resulting in raising an exception instead of\n+  ``Index`` functions, resulting in raising an exception instead of\n   returning zero in some situations.\n   This was not intended and has been corrected.\n   GNAT always returned zero, and is thus consistent with this AI.\n@@ -1184,20 +1184,20 @@ Supported Aspect                    Source\n \n * *AI-0137 String encoding package (2010-03-25)*\n \n-  The packages `Ada.Strings.UTF_Encoding`, together with its child\n-  packages, `Conversions`, `Strings`, `Wide_Strings`,\n-  and `Wide_Wide_Strings` have been\n+  The packages ``Ada.Strings.UTF_Encoding``, together with its child\n+  packages, ``Conversions``, ``Strings``, ``Wide_Strings``,\n+  and ``Wide_Wide_Strings`` have been\n   implemented. These packages (whose documentation can be found in the spec\n   files :file:`a-stuten.ads`, :file:`a-suenco.ads`, :file:`a-suenst.ads`,\n   :file:`a-suewst.ads`, :file:`a-suezst.ads`) allow encoding and decoding of\n-  `String`, `Wide_String`, and `Wide_Wide_String`\n+  ``String``, ``Wide_String``, and ``Wide_Wide_String``\n   values using UTF coding schemes (including UTF-8, UTF-16LE, UTF-16BE, and\n   UTF-16), as well as conversions between the different UTF encodings. With\n-  the exception of `Wide_Wide_Strings`, these packages are available in\n+  the exception of ``Wide_Wide_Strings``, these packages are available in\n   Ada 95 and Ada 2005 mode as well as Ada 2012 mode.\n-  The `Wide_Wide_Strings package`\n+  The ``Wide_Wide_Strings`` package\n   is available in Ada 2005 mode as well as Ada 2012 mode (but not in Ada 95\n-  mode since it uses `Wide_Wide_Character`).\n+  mode since it uses ``Wide_Wide_Character``).\n \n   RM References:  A.04.11\n \n@@ -1236,7 +1236,7 @@ Supported Aspect                    Source\n \n   The compiler is not required to support exporting an Ada subprogram with\n   convention C if there are parameters or a return type of an unconstrained\n-  array type (such as `String`). GNAT allows such declarations but\n+  array type (such as ``String``). GNAT allows such declarations but\n   generates warnings. It is possible, but complicated, to write the\n   corresponding C code and certainly such code would be specific to GNAT and\n   non-portable.\n@@ -1247,7 +1247,7 @@ Supported Aspect                    Source\n \n * *AI-0216 No_Task_Hierarchy forbids local tasks (0000-00-00)*\n \n-  It is clearly the intention that `No_Task_Hierarchy` is intended to\n+  It is clearly the intention that ``No_Task_Hierarchy`` is intended to\n   forbid tasks declared locally within subprograms, or functions returning task\n   objects, and that is the implementation that GNAT has always provided.\n   However the language in the RM was not sufficiently clear on this point.\n@@ -1259,16 +1259,16 @@ Supported Aspect                    Source\n \n * *AI-0211 No_Relative_Delays forbids Set_Handler use (2010-07-09)*\n \n-  The restriction `No_Relative_Delays` forbids any calls to the subprogram\n-  `Ada.Real_Time.Timing_Events.Set_Handler`.\n+  The restriction ``No_Relative_Delays`` forbids any calls to the subprogram\n+  ``Ada.Real_Time.Timing_Events.Set_Handler``.\n \n   RM References:  D.07 (5)   D.07 (10/2)   D.07 (10.4/2)   D.07 (10.7/2)\n \n .. index:: AI-0190 (Ada 2012 feature)\n \n * *AI-0190 pragma Default_Storage_Pool (2010-09-15)*\n \n-  This AI introduces a new pragma `Default_Storage_Pool`, which can be\n+  This AI introduces a new pragma ``Default_Storage_Pool``, which can be\n   used to control storage pools globally.\n   In particular, you can force every access\n   type that is used for allocation (**new**) to have an explicit storage pool,\n@@ -1281,7 +1281,7 @@ Supported Aspect                    Source\n \n * *AI-0189 No_Allocators_After_Elaboration (2010-01-23)*\n \n-  This AI introduces a new restriction `No_Allocators_After_Elaboration`,\n+  This AI introduces a new restriction ``No_Allocators_After_Elaboration``,\n   which says that no dynamic allocation will occur once elaboration is\n   completed.\n   In general this requires a run-time check, which is not required, and which\n@@ -1295,9 +1295,9 @@ Supported Aspect                    Source\n \n * *AI-0171 Pragma CPU and Ravenscar Profile (2010-09-24)*\n \n-  A new package `System.Multiprocessors` is added, together with the\n-  definition of pragma `CPU` for controlling task affinity. A new no\n-  dependence restriction, on `System.Multiprocessors.Dispatching_Domains`,\n+  A new package ``System.Multiprocessors`` is added, together with the\n+  definition of pragma ``CPU`` for controlling task affinity. A new no\n+  dependence restriction, on ``System.Multiprocessors.Dispatching_Domains``,\n   is added to the Ravenscar profile.\n \n   RM References:  D.13.01 (4/2)   D.16\n@@ -1324,7 +1324,7 @@ Supported Aspect                    Source\n \n * *AI-0152 Restriction No_Anonymous_Allocators (2010-09-08)*\n \n-  Restriction `No_Anonymous_Allocators` prevents the use of allocators\n+  Restriction ``No_Anonymous_Allocators`` prevents the use of allocators\n   where the type of the returned value is an anonymous access type.\n \n   RM References:  H.04 (8/1)"}, {"sha": "3f55dc30d975c332eac5f5638e364042a21e0a65", "filename": "gcc/ada/doc/gnat_rm/implementation_of_specific_ada_features.rst", "status": "modified", "additions": 58, "deletions": 49, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_of_specific_ada_features.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_of_specific_ada_features.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_of_specific_ada_features.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -14,7 +14,7 @@ Machine Code Insertions\n \n .. index:: Machine Code insertions\n \n-Package `Machine_Code` provides machine code support as described\n+Package ``Machine_Code`` provides machine code support as described\n in the Ada Reference Manual in two separate forms:\n \n *\n@@ -30,12 +30,12 @@ and use of the facilities in this package requires understanding the asm\n instruction, see the section on Extended Asm in\n :title:`Using_the_GNU_Compiler_Collection_(GCC)`.\n \n-Calls to the function `Asm` and the procedure `Asm` have identical\n+Calls to the function ``Asm`` and the procedure ``Asm`` have identical\n semantic restrictions and effects as described below.  Both are provided so\n that the procedure call can be used as a statement, and the function call\n can be used to form a code_statement.\n \n-Consider this C `asm` instruction:\n+Consider this C ``asm`` instruction:\n \n ::\n \n@@ -51,14 +51,14 @@ The equivalent can be written for GNAT as:\n        My_Float'Asm_Input  (\"f\",  angle));\n \n \n-The first argument to `Asm` is the assembler template, and is\n+The first argument to ``Asm`` is the assembler template, and is\n identical to what is used in GNU C.  This string must be a static\n expression.  The second argument is the output operand list.  It is\n-either a single `Asm_Output` attribute reference, or a list of such\n+either a single ``Asm_Output`` attribute reference, or a list of such\n references enclosed in parentheses (technically an array aggregate of\n such references).\n \n-The `Asm_Output` attribute denotes a function that takes two\n+The ``Asm_Output`` attribute denotes a function that takes two\n parameters.  The first is a string, the second is the name of a variable\n of the type designated by the attribute prefix.  The first (string)\n argument is required to be a static expression and designates the\n@@ -69,19 +69,19 @@ argument is the variable to be written or updated with the\n result.  The possible values for constraint are the same as those used in\n the RTL, and are dependent on the configuration file used to build the\n GCC back end.  If there are no output operands, then this argument may\n-either be omitted, or explicitly given as `No_Output_Operands`.\n+either be omitted, or explicitly given as ``No_Output_Operands``.\n No support is provided for GNU C's symbolic names for output parameters.\n \n The second argument of ``my_float'Asm_Output`` functions as\n-though it were an `out` parameter, which is a little curious, but\n+though it were an ``out`` parameter, which is a little curious, but\n all names have the form of expressions, so there is no syntactic\n irregularity, even though normally functions would not be permitted\n-`out` parameters.  The third argument is the list of input\n-operands.  It is either a single `Asm_Input` attribute reference, or\n+``out`` parameters.  The third argument is the list of input\n+operands.  It is either a single ``Asm_Input`` attribute reference, or\n a list of such references enclosed in parentheses (technically an array\n aggregate of such references).\n \n-The `Asm_Input` attribute denotes a function that takes two\n+The ``Asm_Input`` attribute denotes a function that takes two\n parameters.  The first is a string, the second is an expression of the\n type designated by the prefix.  The first (string) argument is required\n to be a static expression, and is the constraint for the parameter,\n@@ -92,19 +92,19 @@ the configuration file used to built the GCC back end.\n No support is provided for GNU C's symbolic names for input parameters.\n \n If there are no input operands, this argument may either be omitted, or\n-explicitly given as `No_Input_Operands`.  The fourth argument, not\n+explicitly given as ``No_Input_Operands``.  The fourth argument, not\n present in the above example, is a list of register names, called the\n *clobber* argument.  This argument, if given, must be a static string\n expression, and is a space or comma separated list of names of registers\n-that must be considered destroyed as a result of the `Asm` call.  If\n+that must be considered destroyed as a result of the ``Asm`` call.  If\n this argument is the null string (the default value), then the code\n generator assumes that no additional registers are destroyed.\n-In addition to registers, the special clobbers `memory` and\n-`cc` as described in the GNU C docs are both supported.\n+In addition to registers, the special clobbers ``memory`` and\n+``cc`` as described in the GNU C docs are both supported.\n \n The fifth argument, not present in the above example, called the\n-*volatile* argument, is by default `False`.  It can be set to\n-the literal value `True` to indicate to the code generator that all\n+*volatile* argument, is by default ``False``.  It can be set to\n+the literal value ``True`` to indicate to the code generator that all\n optimizations with respect to the instruction specified should be\n suppressed, and in particular an instruction that has outputs\n will still be generated, even if none of the outputs are\n@@ -114,14 +114,14 @@ Generally it is strongly advisable to use Volatile for any ASM statement\n that is missing either input or output operands or to avoid unwanted\n optimizations. A warning is generated if this advice is not followed.\n \n-No support is provided for GNU C's `asm goto` feature.\n+No support is provided for GNU C's ``asm goto`` feature.\n \n-The `Asm` subprograms may be used in two ways.  First the procedure\n+The ``Asm`` subprograms may be used in two ways.  First the procedure\n forms can be used anywhere a procedure call would be valid, and\n correspond to what the RM calls 'intrinsic' routines.  Such calls can\n be used to intersperse machine instructions with other Ada statements.\n Second, the function forms, which return a dummy value of the limited\n-private type `Asm_Insn`, can be used in code statements, and indeed\n+private type ``Asm_Insn``, can be used in code statements, and indeed\n this is the only context where such calls are allowed.  Code statements\n appear as aggregates of the form:\n \n@@ -137,7 +137,7 @@ not permissible to intermix such statements with other Ada statements.\n Typically the form using intrinsic procedure calls is more convenient\n and more flexible.  The code statement form is provided to meet the RM\n suggestion that such a facility should be made available.  The following\n-is the exact syntax of the call to `Asm`. As usual, if named notation\n+is the exact syntax of the call to ``Asm``. As usual, if named notation\n is used, the arguments may be given in arbitrary order, following the\n normal rules for use of positional and named arguments:\n \n@@ -166,10 +166,10 @@ normal rules for use of positional and named arguments:\n   INPUT_OPERAND_ATTRIBUTE ::=\n     SUBTYPE_MARK'Asm_Input (static_string_EXPRESSION, EXPRESSION)\n \n-The identifiers `No_Input_Operands` and `No_Output_Operands`\n-are declared in the package `Machine_Code` and must be referenced\n+The identifiers ``No_Input_Operands`` and ``No_Output_Operands``\n+are declared in the package ``Machine_Code`` and must be referenced\n according to normal visibility rules. In particular if there is no\n-`use` clause for this package, then appropriate package name\n+``use`` clause for this package, then appropriate package name\n qualification is required.\n \n .. _GNAT_Implementation_of_Tasking:\n@@ -251,7 +251,7 @@ the underlying threads has significant advantages, it does create some\n complications when it comes to respecting the scheduling semantics\n specified in the real-time annex (Annex D).\n \n-For instance the Annex D requirement for the `FIFO_Within_Priorities`\n+For instance the Annex D requirement for the ``FIFO_Within_Priorities``\n scheduling policy states:\n \n   *When the active priority of a ready task that is not running\n@@ -293,22 +293,31 @@ Support for Locking Policies\n This section specifies which policies specified by pragma Locking_Policy\n are supported on which platforms.\n \n-GNAT supports the standard `Ceiling_Locking` policy, and the\n-implementation defined `Inheritance_Locking` and\n-`Concurrent_Readers_Locking` policies.\n+GNAT supports the standard ``Ceiling_Locking`` policy, and the\n+implementation defined ``Inheritance_Locking`` and\n+``Concurrent_Readers_Locking`` policies.\n \n-`Ceiling_Locking` is supported on all platforms if the operating system\n-supports it. In particular, `Ceiling_Locking` is not supported on\n+``Ceiling_Locking`` is supported on all platforms if the operating system\n+supports it. In particular, ``Ceiling_Locking`` is not supported on\n VxWorks.\n-`Inheritance_Locking` is supported on\n+``Inheritance_Locking`` is supported on\n Linux,\n Darwin (Mac OS X),\n LynxOS 178,\n and VxWorks.\n-`Concurrent_Readers_Locking` is supported on Linux.\n-\n-Note that on Linux, `Ceiling_Locking` requires the program to be running\n-with root privileges. Otherwise, the policy is ignored.\n+``Concurrent_Readers_Locking`` is supported on Linux.\n+\n+Notes about ``Ceiling_Locking`` on Linux:\n+If the process is running as 'root', ceiling locking is used.\n+If the capabilities facility is installed\n+(\"sudo apt-get --assume-yes install libcap-dev\" on Ubuntu,\n+for example),\n+and the program is linked against that library\n+(\"-largs -lcap\"),\n+and the executable file has the cap_sys_nice capability\n+(\"sudo /sbin/setcap cap_sys_nice=ep executable_file_name\"),\n+then ceiling locking is used.\n+Otherwise, the ``Ceiling_Locking`` policy is ignored.\n \n .. _GNAT_Implementation_of_Shared_Passive_Packages:\n \n@@ -318,7 +327,7 @@ GNAT Implementation of Shared Passive Packages\n .. index:: Shared passive packages\n \n GNAT fully implements the :index:`pragma <pragma Shared_Passive>`\n-`Shared_Passive` for\n+``Shared_Passive`` for\n the purpose of designating shared passive packages.\n This allows the use of passive partitions in the\n context described in the Ada Reference Manual; i.e., for communication\n@@ -353,7 +362,7 @@ written.\n \n .. index:: SHARED_MEMORY_DIRECTORY environment variable\n \n-The environment variable `SHARED_MEMORY_DIRECTORY` should be\n+The environment variable ``SHARED_MEMORY_DIRECTORY`` should be\n set to the directory to be used for these files.\n The files in this directory\n have names that correspond to their fully qualified names. For\n@@ -367,7 +376,7 @@ example, if we have the package\n     Z : Float;\n   end X;\n \n-and the environment variable is set to `/stemp/`, then the files created\n+and the environment variable is set to ``/stemp/``, then the files created\n will have the names:\n \n ::\n@@ -384,7 +393,7 @@ will be used. This model ensures that there are no issues in synchronizing\n the elaboration process, since elaboration of passive packages elaborates the\n initial values, but does not create the files.\n \n-The files are written using normal `Stream_IO` access.\n+The files are written using normal ``Stream_IO`` access.\n If you want to be able\n to communicate between programs or partitions running on different\n architectures, then you should use the XDR versions of the stream attribute\n@@ -487,7 +496,7 @@ Constant aggregates with unconstrained nominal types\n ----------------------------------------------------\n \n In such cases the aggregate itself establishes the subtype, so that\n-associations with `others` cannot be used.  GNAT determines the\n+associations with ``others`` cannot be used.  GNAT determines the\n bounds for the actual subtype of the aggregate, and allocates the\n aggregate statically as well.  No code is generated for the following:\n \n@@ -587,7 +596,7 @@ that temporary will be copied onto the target.\n The Size of Discriminated Records with Default Discriminants\n ============================================================\n \n-If a discriminated type `T` has discriminants with default values, it is\n+If a discriminated type ``T`` has discriminants with default values, it is\n possible to declare an object of this type without providing an explicit\n constraint:\n \n@@ -620,12 +629,12 @@ that depend on it:\n \n In order to support this behavior efficiently, an unconstrained object is\n given the maximum size that any value of the type requires. In the case\n-above, `Word` has storage for the discriminant and for\n-a `String` of length 100.\n+above, ``Word`` has storage for the discriminant and for\n+a ``String`` of length 100.\n It is important to note that unconstrained objects do not require dynamic\n allocation. It would be an improper implementation to place on the heap those\n components whose size depends on discriminants. (This improper implementation\n-was used by some Ada83 compilers, where the `Name` component above\n+was used by some Ada83 compilers, where the ``Name`` component above\n would have\n been stored as a pointer to a dynamic string). Following the principle that\n dynamic storage management should never be introduced implicitly,\n@@ -651,13 +660,13 @@ declaration:\n   Too_Large : Rec;\n \n is flagged by the compiler with a warning:\n-an attempt to create `Too_Large` will raise `Storage_Error`,\n-because the required size includes `Positive'Last`\n+an attempt to create ``Too_Large`` will raise ``Storage_Error``,\n+because the required size includes ``Positive'Last``\n bytes. As the first example indicates, the proper approach is to declare an\n index type of 'reasonable' range so that unconstrained objects are not too\n large.\n \n-One final wrinkle: if the object is declared to be `aliased`, or if it is\n+One final wrinkle: if the object is declared to be ``aliased``, or if it is\n created in the heap by means of an allocator, then it is *not*\n unconstrained:\n it is constrained by the default values of the discriminants, and those values\n@@ -685,8 +694,8 @@ calls and generic instantiations (*-gnatE*), and stack overflow checking\n (*-fstack-check*).\n \n Note that the result of a floating point arithmetic operation in overflow and\n-invalid situations, when the `Machine_Overflows` attribute of the result\n-type is `False`, is to generate IEEE NaN and infinite values. This is the\n+invalid situations, when the ``Machine_Overflows`` attribute of the result\n+type is ``False``, is to generate IEEE NaN and infinite values. This is the\n case for machines compliant with the IEEE floating-point standard, but on\n machines that are not fully compliant with this standard, such as Alpha, the\n *-mieee* compiler flag must be used for achieving IEEE confirming"}, {"sha": "bb629f41572c79f407a8274011a25fd732f7725a", "filename": "gcc/ada/doc/gnat_rm/interfacing_to_other_languages.rst", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Finterfacing_to_other_languages.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Finterfacing_to_other_languages.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Finterfacing_to_other_languages.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -16,13 +16,13 @@ Interfacing to C\n Interfacing to C with GNAT can use one of two approaches:\n \n *\n-  The types in the package `Interfaces.C` may be used.\n+  The types in the package ``Interfaces.C`` may be used.\n *\n   Standard Ada types may be used directly.  This may be less portable to\n   other compilers, but will work on all GNAT compilers, which guarantee\n   correspondence between the C and Ada types.\n \n-Pragma `Convention C` may be applied to Ada types, but mostly has no\n+Pragma ``Convention C`` may be applied to Ada types, but mostly has no\n effect, since this is the default.  The following table shows the\n correspondence between Ada scalar types and the corresponding C types.\n \n@@ -46,11 +46,11 @@ and C types:\n \n *\n   Ada enumeration types map to C enumeration types directly if pragma\n-  `Convention C` is specified, which causes them to have int\n-  length.  Without pragma `Convention C`, Ada enumeration types map to\n-  8, 16, or 32 bits (i.e., C types `signed char`, `short`,\n-  `int`, respectively) depending on the number of values passed.\n-  This is the only case in which pragma `Convention C` affects the\n+  ``Convention C`` is specified, which causes them to have int\n+  length.  Without pragma ``Convention C``, Ada enumeration types map to\n+  8, 16, or 32 bits (i.e., C types ``signed char``, ``short``,\n+  ``int``, respectively) depending on the number of values passed.\n+  This is the only case in which pragma ``Convention C`` affects the\n   representation of an Ada type.\n \n *\n@@ -80,29 +80,29 @@ Using these pragmas it is possible to achieve complete\n inter-operability between Ada tagged types and C++ class definitions.\n See :ref:`Implementation_Defined_Pragmas`, for more details.\n \n-*pragma CPP_Class ([Entity =>] `LOCAL_NAME`)*\n+:samp:`pragma CPP_Class ([Entity =>] {LOCAL_NAME})`\n   The argument denotes an entity in the current declarative region that is\n   declared as a tagged or untagged record type. It indicates that the type\n   corresponds to an externally declared C++ class type, and is to be laid\n   out the same way that C++ would lay out the type.\n \n-  Note: Pragma `CPP_Class` is currently obsolete. It is supported\n+  Note: Pragma ``CPP_Class`` is currently obsolete. It is supported\n   for backward compatibility but its functionality is available\n-  using pragma `Import` with `Convention` = `CPP`.\n+  using pragma ``Import`` with ``Convention`` = ``CPP``.\n \n \n-*pragma CPP_Constructor ([Entity =>] `LOCAL_NAME`)*\n+:samp:`pragma CPP_Constructor ([Entity =>] {LOCAL_NAME})`\n   This pragma identifies an imported function (imported in the usual way\n-  with pragma `Import`) as corresponding to a C++ constructor.\n+  with pragma ``Import``) as corresponding to a C++ constructor.\n \n-A few restrictions are placed on the use of the `Access` attribute\n-in conjunction with subprograms subject to convention `CPP`: the\n+A few restrictions are placed on the use of the ``Access`` attribute\n+in conjunction with subprograms subject to convention ``CPP``: the\n attribute may be used neither on primitive operations of a tagged\n-record type with convention `CPP`, imported or not, nor on\n-subprograms imported with pragma `CPP_Constructor`.\n+record type with convention ``CPP``, imported or not, nor on\n+subprograms imported with pragma ``CPP_Constructor``.\n \n In addition, C++ exceptions are propagated and can be handled in an\n-`others` choice of an exception handler. The corresponding Ada\n+``others`` choice of an exception handler. The corresponding Ada\n occurrence has no message, and the simple name of the exception identity\n contains ``Foreign_Exception``. Finalization and awaiting dependent\n tasks works properly when such foreign exceptions are propagated.\n@@ -118,7 +118,7 @@ It is also possible to import a C++ exception using the following syntax:\n     [External_Name =>] static_string_EXPRESSION);\n \n \n-The `External_Name` is the name of the C++ RTTI symbol. You can then\n+The ``External_Name`` is the name of the C++ RTTI symbol. You can then\n cover a specific C++ exception in an exception handler.\n \n .. _Interfacing_to_COBOL:\n@@ -135,7 +135,7 @@ Interfacing to Fortran\n ======================\n \n Interfacing to Fortran is achieved as described in section B.5 of the\n-Ada Reference Manual.  The pragma `Convention Fortran`, applied to a\n+Ada Reference Manual.  The pragma ``Convention Fortran``, applied to a\n multi-dimensional array causes the array to be stored in column-major\n order as required for convenient interface to Fortran.\n \n@@ -144,8 +144,8 @@ order as required for convenient interface to Fortran.\n Interfacing to non-GNAT Ada code\n ================================\n \n-It is possible to specify the convention `Ada` in a pragma\n-`Import` or pragma `Export`.  However this refers to\n+It is possible to specify the convention ``Ada`` in a pragma\n+``Import`` or pragma ``Export``.  However this refers to\n the calling conventions used by GNAT, which may or may not be\n similar enough to those used by some other Ada 83 / Ada 95 / Ada 2005\n compiler to allow interoperation."}, {"sha": "f5f8463f28271f001659f95676ec325cb19c3a3b", "filename": "gcc/ada/doc/gnat_rm/intrinsic_subprograms.rst", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fintrinsic_subprograms.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fintrinsic_subprograms.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fintrinsic_subprograms.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -31,13 +31,13 @@ Intrinsic Operators\n .. index:: Intrinsic operator\n \n All the predefined numeric operators in package Standard\n-in `pragma Import (Intrinsic,..)`\n+in ``pragma Import (Intrinsic,..)``\n declarations.  In the binary operator case, the operands must have the same\n size.  The operand or operands must also be appropriate for\n the operator.  For example, for addition, the operands must\n both be floating-point or both be fixed-point, and the\n-right operand for `\"**\"` must have a root type of\n-`Standard.Integer'Base`.\n+right operand for ``\"**\"`` must have a root type of\n+``Standard.Integer'Base``.\n You can use an intrinsic operator declaration as in the following example:\n \n \n@@ -52,7 +52,7 @@ You can use an intrinsic operator declaration as in the following example:\n   \n \n This declaration would permit 'mixed mode' arithmetic on items\n-of the differing types `Int1` and `Int2`.\n+of the differing types ``Int1`` and ``Int2``.\n It is also possible to specify such operators for private types, if the\n full views are appropriate arithmetic types.\n \n@@ -64,11 +64,11 @@ Compilation_Date\n .. index:: Compilation_Date\n \n This intrinsic subprogram is used in the implementation of the\n-library package `GNAT.Source_Info`.  The only useful use of the\n+library package ``GNAT.Source_Info``.  The only useful use of the\n intrinsic import in this case is the one in this unit, so an\n application program should simply call the function\n-`GNAT.Source_Info.Compilation_Date` to obtain the date of\n-the current compilation (in local time format MMM DD YYYY).\n+``GNAT.Source_Info.Compilation_ISO_Date`` to obtain the date of\n+the current compilation (in local time format YYYY-MM-DD).\n \n .. _Compilation_Time:\n \n@@ -78,10 +78,10 @@ Compilation_Time\n .. index:: Compilation_Time\n \n This intrinsic subprogram is used in the implementation of the\n-library package `GNAT.Source_Info`.  The only useful use of the\n+library package ``GNAT.Source_Info``.  The only useful use of the\n intrinsic import in this case is the one in this unit, so an\n application program should simply call the function\n-`GNAT.Source_Info.Compilation_Time` to obtain the time of\n+``GNAT.Source_Info.Compilation_Time`` to obtain the time of\n the current compilation (in local time format HH:MM:SS).\n \n .. _Enclosing_Entity:\n@@ -92,10 +92,10 @@ Enclosing_Entity\n .. index:: Enclosing_Entity\n \n This intrinsic subprogram is used in the implementation of the\n-library package `GNAT.Source_Info`.  The only useful use of the\n+library package ``GNAT.Source_Info``.  The only useful use of the\n intrinsic import in this case is the one in this unit, so an\n application program should simply call the function\n-`GNAT.Source_Info.Enclosing_Entity` to obtain the name of\n+``GNAT.Source_Info.Enclosing_Entity`` to obtain the name of\n the current subprogram, package, task, entry, or protected subprogram.\n \n .. _Exception_Information:\n@@ -106,10 +106,10 @@ Exception_Information\n .. index:: Exception_Information'\n \n This intrinsic subprogram is used in the implementation of the\n-library package `GNAT.Current_Exception`.  The only useful\n+library package ``GNAT.Current_Exception``.  The only useful\n use of the intrinsic import in this case is the one in this unit,\n so an application program should simply call the function\n-`GNAT.Current_Exception.Exception_Information` to obtain\n+``GNAT.Current_Exception.Exception_Information`` to obtain\n the exception information associated with the current exception.\n \n .. _Exception_Message:\n@@ -120,10 +120,10 @@ Exception_Message\n .. index:: Exception_Message\n \n This intrinsic subprogram is used in the implementation of the\n-library package `GNAT.Current_Exception`.  The only useful\n+library package ``GNAT.Current_Exception``.  The only useful\n use of the intrinsic import in this case is the one in this unit,\n so an application program should simply call the function\n-`GNAT.Current_Exception.Exception_Message` to obtain\n+``GNAT.Current_Exception.Exception_Message`` to obtain\n the message associated with the current exception.\n \n .. _Exception_Name:\n@@ -134,10 +134,10 @@ Exception_Name\n .. index:: Exception_Name\n \n This intrinsic subprogram is used in the implementation of the\n-library package `GNAT.Current_Exception`.  The only useful\n+library package ``GNAT.Current_Exception``.  The only useful\n use of the intrinsic import in this case is the one in this unit,\n so an application program should simply call the function\n-`GNAT.Current_Exception.Exception_Name` to obtain\n+``GNAT.Current_Exception.Exception_Name`` to obtain\n the name of the current exception.\n \n .. _File:\n@@ -148,10 +148,10 @@ File\n .. index:: File\n \n This intrinsic subprogram is used in the implementation of the\n-library package `GNAT.Source_Info`.  The only useful use of the\n+library package ``GNAT.Source_Info``.  The only useful use of the\n intrinsic import in this case is the one in this unit, so an\n application program should simply call the function\n-`GNAT.Source_Info.File` to obtain the name of the current\n+``GNAT.Source_Info.File`` to obtain the name of the current\n file.\n \n .. _Line:\n@@ -162,10 +162,10 @@ Line\n .. index:: Line\n \n This intrinsic subprogram is used in the implementation of the\n-library package `GNAT.Source_Info`.  The only useful use of the\n+library package ``GNAT.Source_Info``.  The only useful use of the\n intrinsic import in this case is the one in this unit, so an\n application program should simply call the function\n-`GNAT.Source_Info.Line` to obtain the number of the current\n+``GNAT.Source_Info.Line`` to obtain the number of the current\n source line.\n \n .. _Shifts_and_Rotates:\n@@ -184,7 +184,7 @@ Shifts and Rotates\n .. index:: Rotate_Right\n \n In standard Ada, the shift and rotate functions are available only\n-for the predefined modular types in package `Interfaces`.  However, in\n+for the predefined modular types in package ``Interfaces``.  However, in\n GNAT it is possible to define these functions for any integer\n type (signed or modular), as in this example:\n \n@@ -201,7 +201,7 @@ Shift_Left, Shift_Right, Shift_Right_Arithmetic, Rotate_Left, or\n Rotate_Right. T must be an integer type. T'Size must be\n 8, 16, 32 or 64 bits; if T is modular, the modulus\n must be 2**8, 2**16, 2**32 or 2**64.\n-The result type must be the same as the type of `Value`.\n+The result type must be the same as the type of ``Value``.\n The shift amount must be Natural.\n The formal parameter names can be anything.\n \n@@ -217,9 +217,9 @@ Source_Location\n .. index:: Source_Location\n \n This intrinsic subprogram is used in the implementation of the\n-library routine `GNAT.Source_Info`.  The only useful use of the\n+library routine ``GNAT.Source_Info``.  The only useful use of the\n intrinsic import in this case is the one in this unit, so an\n application program should simply call the function\n-`GNAT.Source_Info.Source_Location` to obtain the current\n+``GNAT.Source_Info.Source_Location`` to obtain the current\n source file location.\n "}, {"sha": "2082a2a33fe364c041f090d973bd66a810b15450", "filename": "gcc/ada/doc/gnat_rm/obsolescent_features.rst", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fobsolescent_features.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fobsolescent_features.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fobsolescent_features.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -14,7 +14,7 @@ compatibility purposes.\n pragma No_Run_Time\n ==================\n \n-The pragma `No_Run_Time` is used to achieve an affect similar\n+The pragma ``No_Run_Time`` is used to achieve an affect similar\n to the use of the \"Zero Foot Print\" configurable run time, but without\n requiring a specially configured run time. The result of using this\n pragma, which must be used for all units in a partition, is to restrict\n@@ -27,28 +27,28 @@ includes just those features that are to be made accessible.\n pragma Ravenscar\n ================\n \n-The pragma `Ravenscar` has exactly the same effect as pragma\n-`Profile (Ravenscar)`. The latter usage is preferred since it\n+The pragma ``Ravenscar`` has exactly the same effect as pragma\n+``Profile (Ravenscar)``. The latter usage is preferred since it\n is part of the new Ada 2005 standard.\n \n .. _pragma_Restricted_Run_Time:\n \n pragma Restricted_Run_Time\n ==========================\n \n-The pragma `Restricted_Run_Time` has exactly the same effect as\n-pragma `Profile (Restricted)`. The latter usage is\n-preferred since the Ada 2005 pragma `Profile` is intended for\n+The pragma ``Restricted_Run_Time`` has exactly the same effect as\n+pragma ``Profile (Restricted)``. The latter usage is\n+preferred since the Ada 2005 pragma ``Profile`` is intended for\n this kind of implementation dependent addition.\n \n .. _pragma_Task_Info:\n \n pragma Task_Info\n ================\n \n-The functionality provided by pragma `Task_Info` is now part of the\n-Ada language. The `CPU` aspect and the package\n-`System.Multiprocessors` offer a less system-dependent way to specify\n+The functionality provided by pragma ``Task_Info`` is now part of the\n+Ada language. The ``CPU`` aspect and the package\n+``System.Multiprocessors`` offer a less system-dependent way to specify\n task affinity or to query the number of processsors.\n \n Syntax\n@@ -58,9 +58,9 @@ Syntax\n   pragma Task_Info (EXPRESSION);\n \n This pragma appears within a task definition (like pragma\n-`Priority`) and applies to the task in which it appears.  The\n-argument must be of type `System.Task_Info.Task_Info_Type`.\n-The `Task_Info` pragma provides system dependent control over\n+``Priority``) and applies to the task in which it appears.  The\n+argument must be of type ``System.Task_Info.Task_Info_Type``.\n+The ``Task_Info`` pragma provides system dependent control over\n aspects of tasking implementation, for example, the ability to map\n tasks to specific processors.  For details on the facilities available\n for the version of GNAT that you are using, see the documentation\n@@ -73,9 +73,9 @@ package System.Task_Info (:file:`s-tasinf.ads`)\n ===============================================\n \n This package provides target dependent functionality that is used\n-to support the `Task_Info` pragma. The predefined Ada package\n-`System.Multiprocessors` and the `CPU` aspect now provide a\n-standard replacement for GNAT's `Task_Info` functionality.\n+to support the ``Task_Info`` pragma. The predefined Ada package\n+``System.Multiprocessors`` and the ``CPU`` aspect now provide a\n+standard replacement for GNAT's ``Task_Info`` functionality.\n \n .. raw:: latex\n "}, {"sha": "8ff5224020678759c982fe1c1cca64c8737ce62f", "filename": "gcc/ada/doc/gnat_rm/representation_clauses_and_pragmas.rst", "status": "modified", "additions": 162, "deletions": 167, "changes": 329, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -1,3 +1,5 @@\n+.. role:: switch(samp)\n+\n .. _Representation_Clauses_and_Pragmas:\n \n **********************************\n@@ -35,17 +37,17 @@ values are as follows:\n * *Elementary Types*.\n \n   For elementary types, the alignment is the minimum of the actual size of\n-  objects of the type divided by `Storage_Unit`,\n+  objects of the type divided by ``Storage_Unit``,\n   and the maximum alignment supported by the target.\n   (This maximum alignment is given by the GNAT-specific attribute\n-  `Standard'Maximum_Alignment`; see :ref:`Attribute_Maximum_Alignment`.)\n+  ``Standard'Maximum_Alignment``; see :ref:`Attribute_Maximum_Alignment`.)\n \n   .. index:: Maximum_Alignment attribute\n \n-  For example, for type `Long_Float`, the object size is 8 bytes, and the\n+  For example, for type ``Long_Float``, the object size is 8 bytes, and the\n   default alignment will be 8 on any target that supports alignments\n   this large, but on some targets, the maximum alignment may be smaller\n-  than 8, in which case objects of type `Long_Float` will be maximally\n+  than 8, in which case objects of type ``Long_Float`` will be maximally\n   aligned.\n \n * *Arrays*.\n@@ -64,9 +66,9 @@ values are as follows:\n \n   For the normal non-packed case, the alignment of a record is equal to\n   the maximum alignment of any of its components.  For tagged records, this\n-  includes the implicit access type used for the tag.  If a pragma `Pack`\n+  includes the implicit access type used for the tag.  If a pragma ``Pack``\n   is used and all components are packable (see separate section on pragma\n-  `Pack`), then the resulting alignment is 1, unless the layout of the\n+  ``Pack``), then the resulting alignment is 1, unless the layout of the\n   record makes it profitable to increase it.\n \n   A special case is when:\n@@ -86,14 +88,14 @@ values are as follows:\n        end record;\n        for Small'Size use 16;\n \n-  then the default alignment of the record type `Small` is 2, not 1. This\n+  then the default alignment of the record type ``Small`` is 2, not 1. This\n   leads to more efficient code when the record is treated as a unit, and also\n-  allows the type to specified as `Atomic` on architectures requiring\n+  allows the type to specified as ``Atomic`` on architectures requiring\n   strict alignment.\n \n An alignment clause may specify a larger alignment than the default value\n up to some maximum value dependent on the target (obtainable by using the\n-attribute reference `Standard'Maximum_Alignment`). It may also specify\n+attribute reference ``Standard'Maximum_Alignment``). It may also specify\n a smaller alignment than the default value for enumeration, integer and\n fixed point types, as well as for record types, for example\n \n@@ -107,7 +109,7 @@ fixed point types, as well as for record types, for example\n \n .. index:: Alignment, default\n \n-The default alignment for the type `V` is 4, as a result of the\n+The default alignment for the type ``V`` is 4, as a result of the\n Integer field in the record, but it is permissible, as shown, to\n override the default alignment of the record with a smaller value.\n \n@@ -125,15 +127,15 @@ to control this choice. Consider:\n      subtype RS is R range 1 .. 1000;\n \n The alignment clause specifies an alignment of 1 for the first named subtype\n-`R` but this does not necessarily apply to `RS`. When writing\n+``R`` but this does not necessarily apply to ``RS``. When writing\n portable Ada code, you should avoid writing code that explicitly or\n implicitly relies on the alignment of such subtypes.\n \n For the GNAT compiler, if an explicit alignment clause is given, this\n value is also used for any subsequent subtypes. So for GNAT, in the\n-above example, you can count on the alignment of `RS` being 1. But this\n+above example, you can count on the alignment of ``RS`` being 1. But this\n assumption is non-portable, and other compilers may choose different\n-alignments for the subtype `RS`.\n+alignments for the subtype ``RS``.\n \n .. _Size_Clauses:\n \n@@ -142,13 +144,13 @@ Size Clauses\n \n .. index:: Size Clause\n \n-The default size for a type `T` is obtainable through the\n-language-defined attribute `T'Size` and also through the\n-equivalent GNAT-defined attribute `T'Value_Size`.\n-For objects of type `T`, GNAT will generally increase the type size\n+The default size for a type ``T`` is obtainable through the\n+language-defined attribute ``T'Size`` and also through the\n+equivalent GNAT-defined attribute ``T'Value_Size``.\n+For objects of type ``T``, GNAT will generally increase the type size\n so that the object size (obtainable through the GNAT-defined attribute\n-`T'Object_Size`)\n-is a multiple of `T'Alignment * Storage_Unit`.\n+``T'Object_Size``)\n+is a multiple of ``T'Alignment * Storage_Unit``.\n \n For example:\n \n@@ -161,27 +163,27 @@ For example:\n         Y2 : boolean;\n      end record;\n \n-In this example, `Smallint'Size` = `Smallint'Value_Size` = 3,\n+In this example, ``Smallint'Size`` = ``Smallint'Value_Size`` = 3,\n as specified by the RM rules,\n but objects of this type will have a size of 8\n-(`Smallint'Object_Size` = 8),\n+(``Smallint'Object_Size`` = 8),\n since objects by default occupy an integral number\n of storage units.  On some targets, notably older\n versions of the Digital Alpha, the size of stand\n alone objects of this type may be 32, reflecting\n the inability of the hardware to do byte load/stores.\n \n-Similarly, the size of type `Rec` is 40 bits\n-(`Rec'Size` = `Rec'Value_Size` = 40), but\n+Similarly, the size of type ``Rec`` is 40 bits\n+(``Rec'Size`` = ``Rec'Value_Size`` = 40), but\n the alignment is 4, so objects of this type will have\n their size increased to 64 bits so that it is a multiple\n of the alignment (in bits).  This decision is\n in accordance with the specific Implementation Advice in RM 13.3(43):\n \n-   \"A `Size` clause should be supported for an object if the specified\n-   `Size` is at least as large as its subtype's `Size`, and corresponds\n+   \"A ``Size`` clause should be supported for an object if the specified\n+   ``Size`` is at least as large as its subtype's ``Size``, and corresponds\n    to a size in storage elements that is a multiple of the object's\n-   `Alignment` (if the `Alignment` is nonzero).\"\n+   ``Alignment`` (if the ``Alignment`` is nonzero).\"\n \n An explicit size clause may be used to override the default size by\n increasing it.  For example, if we have:\n@@ -217,36 +219,36 @@ Storage_Size Clauses\n \n .. index:: Storage_Size Clause\n \n-For tasks, the `Storage_Size` clause specifies the amount of space\n+For tasks, the ``Storage_Size`` clause specifies the amount of space\n to be allocated for the task stack.  This cannot be extended, and if the\n-stack is exhausted, then `Storage_Error` will be raised (if stack\n-checking is enabled).  Use a `Storage_Size` attribute definition clause,\n-or a `Storage_Size` pragma in the task definition to set the\n+stack is exhausted, then ``Storage_Error`` will be raised (if stack\n+checking is enabled).  Use a ``Storage_Size`` attribute definition clause,\n+or a ``Storage_Size`` pragma in the task definition to set the\n appropriate required size.  A useful technique is to include in every\n task definition a pragma of the form:\n \n .. code-block:: ada\n \n      pragma Storage_Size (Default_Stack_Size);\n \n-Then `Default_Stack_Size` can be defined in a global package, and\n+Then ``Default_Stack_Size`` can be defined in a global package, and\n modified as required. Any tasks requiring stack sizes different from the\n default can have an appropriate alternative reference in the pragma.\n \n You can also use the *-d* binder switch to modify the default stack\n size.\n \n-For access types, the `Storage_Size` clause specifies the maximum\n+For access types, the ``Storage_Size`` clause specifies the maximum\n space available for allocation of objects of the type.  If this space is\n-exceeded then `Storage_Error` will be raised by an allocation attempt.\n+exceeded then ``Storage_Error`` will be raised by an allocation attempt.\n In the case where the access type is declared local to a subprogram, the\n-use of a `Storage_Size` clause triggers automatic use of a special\n-predefined storage pool (`System.Pool_Size`) that ensures that all\n+use of a ``Storage_Size`` clause triggers automatic use of a special\n+predefined storage pool (``System.Pool_Size``) that ensures that all\n space for the pool is automatically reclaimed on exit from the scope in\n which the type is declared.\n \n A special case recognized by the compiler is the specification of a\n-`Storage_Size` of zero for an access type.  This means that no\n+``Storage_Size`` of zero for an access type.  This means that no\n items can be allocated from the pool, and this is recognized at compile\n time, and all the overhead normally associated with maintaining a fixed\n size storage pool is eliminated.  Consider the following example:\n@@ -336,7 +338,7 @@ variant value to V2, therefore 16 bits must be allocated for V2\n in the general case, even fewer bits may be needed at any particular\n point during the program execution.\n \n-As can be seen from the output of this program, the `'Size`\n+As can be seen from the output of this program, the ``'Size``\n attribute applied to such an object in GNAT gives the actual allocated\n size of the variable, which is the largest size of any of the variants.\n The Ada Reference Manual is not completely clear on what choice should\n@@ -387,9 +389,9 @@ The output from this program is\n   16\n   16\n \n-Here we see that while the `'Size` attribute always returns\n+Here we see that while the ``'Size`` attribute always returns\n the maximum size, regardless of the current variant value, the\n-`Size` function does indeed return the size of the current\n+``Size`` function does indeed return the size of the current\n variant value.\n \n \n@@ -415,7 +417,7 @@ For example, suppose we have the declaration:\n      type Small is range -7 .. -4;\n      for Small'Size use 2;\n \n-Although the default size of type `Small` is 4, the `Size`\n+Although the default size of type ``Small`` is 4, the ``Size``\n clause is accepted by GNAT and results in the following representation\n scheme:\n \n@@ -426,7 +428,7 @@ scheme:\n     -5 is represented as 2#10#\n     -4 is represented as 2#11#\n \n-Biased representation is only used if the specified `Size` clause\n+Biased representation is only used if the specified ``Size`` clause\n cannot be accepted in any other manner.  These reduced sizes that force\n biased representation can be used for all discrete types except for\n enumeration types for which a representation clause is given.\n@@ -441,13 +443,13 @@ Value_Size and Object_Size Clauses\n .. index:: Object_Size\n .. index:: Size, of objects\n \n-In Ada 95 and Ada 2005, `T'Size` for a type `T` is the minimum\n-number of bits required to hold values of type `T`.\n+In Ada 95 and Ada 2005, ``T'Size`` for a type ``T`` is the minimum\n+number of bits required to hold values of type ``T``.\n Although this interpretation was allowed in Ada 83, it was not required,\n and this requirement in practice can cause some significant difficulties.\n-For example, in most Ada 83 compilers, `Natural'Size` was 32.\n+For example, in most Ada 83 compilers, ``Natural'Size`` was 32.\n However, in Ada 95 and Ada 2005,\n-`Natural'Size` is\n+``Natural'Size`` is\n typically 31.  This means that code may change in behavior when moving\n from Ada 83 to Ada 95 or Ada 2005.  For example, consider:\n \n@@ -463,99 +465,99 @@ from Ada 83 to Ada 95 or Ada 2005.  For example, consider:\n         at 0  range Natural'Size .. 2 * Natural'Size - 1;\n      end record;\n \n-In the above code, since the typical size of `Natural` objects\n-is 32 bits and `Natural'Size` is 31, the above code can cause\n+In the above code, since the typical size of ``Natural`` objects\n+is 32 bits and ``Natural'Size`` is 31, the above code can cause\n unexpected inefficient packing in Ada 95 and Ada 2005, and in general\n there are cases where the fact that the object size can exceed the\n size of the type causes surprises.\n \n To help get around this problem GNAT provides two implementation\n-defined attributes, `Value_Size` and `Object_Size`.  When\n+defined attributes, ``Value_Size`` and ``Object_Size``.  When\n applied to a type, these attributes yield the size of the type\n (corresponding to the RM defined size attribute), and the size of\n objects of the type respectively.\n \n-The `Object_Size` is used for determining the default size of\n+The ``Object_Size`` is used for determining the default size of\n objects and components.  This size value can be referred to using the\n-`Object_Size` attribute.  The phrase 'is used' here means that it is\n+``Object_Size`` attribute.  The phrase 'is used' here means that it is\n the basis of the determination of the size.  The backend is free to\n pad this up if necessary for efficiency, e.g., an 8-bit stand-alone\n character might be stored in 32 bits on a machine with no efficient\n byte access instructions such as the Alpha.\n \n-The default rules for the value of `Object_Size` for\n+The default rules for the value of ``Object_Size`` for\n discrete types are as follows:\n \n *\n-  The `Object_Size` for base subtypes reflect the natural hardware\n+  The ``Object_Size`` for base subtypes reflect the natural hardware\n   size in bits (run the compiler with *-gnatS* to find those values\n   for numeric types). Enumeration types and fixed-point base subtypes have\n   8, 16, 32, or 64 bits for this size, depending on the range of values\n   to be stored.\n \n *\n-  The `Object_Size` of a subtype is the same as the\n-  `Object_Size` of\n+  The ``Object_Size`` of a subtype is the same as the\n+  ``Object_Size`` of\n   the type from which it is obtained.\n \n *\n-  The `Object_Size` of a derived base type is copied from the parent\n-  base type, and the `Object_Size` of a derived first subtype is copied\n+  The ``Object_Size`` of a derived base type is copied from the parent\n+  base type, and the ``Object_Size`` of a derived first subtype is copied\n   from the parent first subtype.\n \n-The `Value_Size` attribute\n+The ``Value_Size`` attribute\n is the (minimum) number of bits required to store a value\n of the type.\n This value is used to determine how tightly to pack\n records or arrays with components of this type, and also affects\n the semantics of unchecked conversion (unchecked conversions where\n-the `Value_Size` values differ generate a warning, and are potentially\n+the ``Value_Size`` values differ generate a warning, and are potentially\n target dependent).\n \n-The default rules for the value of `Value_Size` are as follows:\n+The default rules for the value of ``Value_Size`` are as follows:\n \n *\n-  The `Value_Size` for a base subtype is the minimum number of bits\n+  The ``Value_Size`` for a base subtype is the minimum number of bits\n   required to store all values of the type (including the sign bit\n   only if negative values are possible).\n \n *\n   If a subtype statically matches the first subtype of a given type, then it has\n-  by default the same `Value_Size` as the first subtype.  This is a\n+  by default the same ``Value_Size`` as the first subtype.  This is a\n   consequence of RM 13.1(14): \"if two subtypes statically match,\n   then their subtype-specific aspects are the same\".)\n \n *\n-  All other subtypes have a `Value_Size` corresponding to the minimum\n+  All other subtypes have a ``Value_Size`` corresponding to the minimum\n   number of bits required to store all values of the subtype.  For\n   dynamic bounds, it is assumed that the value can range down or up\n   to the corresponding bound of the ancestor\n \n-The RM defined attribute `Size` corresponds to the\n-`Value_Size` attribute.\n+The RM defined attribute ``Size`` corresponds to the\n+``Value_Size`` attribute.\n \n-The `Size` attribute may be defined for a first-named subtype.  This sets\n-the `Value_Size` of\n+The ``Size`` attribute may be defined for a first-named subtype.  This sets\n+the ``Value_Size`` of\n the first-named subtype to the given value, and the\n-`Object_Size` of this first-named subtype to the given value padded up\n+``Object_Size`` of this first-named subtype to the given value padded up\n to an appropriate boundary.  It is a consequence of the default rules\n-above that this `Object_Size` will apply to all further subtypes.  On the\n-other hand, `Value_Size` is affected only for the first subtype, any\n+above that this ``Object_Size`` will apply to all further subtypes.  On the\n+other hand, ``Value_Size`` is affected only for the first subtype, any\n dynamic subtypes obtained from it directly, and any statically matching\n-subtypes.  The `Value_Size` of any other static subtypes is not affected.\n+subtypes.  The ``Value_Size`` of any other static subtypes is not affected.\n \n-`Value_Size` and\n-`Object_Size` may be explicitly set for any subtype using\n+``Value_Size`` and\n+``Object_Size`` may be explicitly set for any subtype using\n an attribute definition clause.  Note that the use of these attributes\n can cause the RM 13.1(14) rule to be violated.  If two access types\n-reference aliased objects whose subtypes have differing `Object_Size`\n+reference aliased objects whose subtypes have differing ``Object_Size``\n values as a result of explicit attribute definition clauses, then it\n is illegal to convert from one access subtype to the other. For a more\n complete description of this additional legality rule, see the\n-description of the `Object_Size` attribute.\n+description of the ``Object_Size`` attribute.\n \n To get a feel for the difference, consider the following examples (note\n-that in each case the base is `Short_Short_Integer` with a size of 8):\n+that in each case the base is ``Short_Short_Integer`` with a size of 8):\n \n +---------------------------------------------+-------------+-------------+\n |Type or subtype declaration                  | Object_Size |   Value_Size|\n@@ -582,22 +584,22 @@ case. What GNAT does is to allocate sufficient bits to accomodate any\n possible dynamic values for the bounds at run-time.\n \n So far, so good, but GNAT has to obey the RM rules, so the question is\n-under what conditions must the RM `Size` be used.\n+under what conditions must the RM ``Size`` be used.\n The following is a list\n-of the occasions on which the RM `Size` must be used:\n+of the occasions on which the RM ``Size`` must be used:\n \n *\n   Component size for packed arrays or records\n \n *\n-  Value of the attribute `Size` for a type\n+  Value of the attribute ``Size`` for a type\n \n *\n   Warning about sizes not matching for unchecked conversion\n \n-For record types, the `Object_Size` is always a multiple of the\n+For record types, the ``Object_Size`` is always a multiple of the\n alignment of the type (this is true for all types). In some cases the\n-`Value_Size` can be smaller. Consider:\n+``Value_Size`` can be smaller. Consider:\n \n \n .. code-block:: ada\n@@ -610,18 +612,18 @@ alignment of the type (this is true for all types). In some cases the\n \n On a typical 32-bit architecture, the X component will be four bytes, and\n require four-byte alignment, and the Y component will be one byte. In this\n-case `R'Value_Size` will be 40 (bits) since this is the minimum size\n+case ``R'Value_Size`` will be 40 (bits) since this is the minimum size\n required to store a value of this type, and for example, it is permissible\n to have a component of type R in an outer array whose component size is\n-specified to be 48 bits. However, `R'Object_Size` will be 64 (bits),\n+specified to be 48 bits. However, ``R'Object_Size`` will be 64 (bits),\n since it must be rounded up so that this value is a multiple of the\n alignment (4 bytes = 32 bits).\n \n-For all other types, the `Object_Size`\n-and `Value_Size` are the same (and equivalent to the RM attribute `Size`).\n-Only `Size` may be specified for such types.\n+For all other types, the ``Object_Size``\n+and ``Value_Size`` are the same (and equivalent to the RM attribute ``Size``).\n+Only ``Size`` may be specified for such types.\n \n-Note that `Value_Size` can be used to force biased representation\n+Note that ``Value_Size`` can be used to force biased representation\n for a particular subtype. Consider this example:\n \n \n@@ -632,24 +634,24 @@ for a particular subtype. Consider this example:\n      subtype REF is R range E .. F;\n \n \n-By default, `RAB`\n+By default, ``RAB``\n has a size of 1 (sufficient to accommodate the representation\n-of `A` and `B`, 0 and 1), and `REF`\n+of ``A`` and ``B``, 0 and 1), and ``REF``\n has a size of 3 (sufficient to accommodate the representation\n-of `E` and `F`, 4 and 5). But if we add the\n-following `Value_Size` attribute definition clause:\n+of ``E`` and ``F``, 4 and 5). But if we add the\n+following ``Value_Size`` attribute definition clause:\n \n \n .. code-block:: ada\n \n      for REF'Value_Size use 1;\n \n \n-then biased representation is forced for `REF`,\n-and 0 will represent `E` and 1 will represent `F`.\n-A warning is issued when a `Value_Size` attribute\n+then biased representation is forced for ``REF``,\n+and 0 will represent ``E`` and 1 will represent ``F``.\n+A warning is issued when a ``Value_Size`` attribute\n definition clause forces biased representation. This\n-warning can be turned off using `-gnatw.B`.\n+warning can be turned off using :switch:`-gnatw.B`.\n \n .. _Component_Size_Clauses:\n \n@@ -713,7 +715,7 @@ Bit_Order Clauses\n \n .. index:: ordering, of bits\n \n-For record subtypes, GNAT permits the specification of the `Bit_Order`\n+For record subtypes, GNAT permits the specification of the ``Bit_Order``\n attribute.  The specification may either correspond to the default bit\n order for the target, in which case the specification has no effect and\n places no additional restrictions, or it may be for the non-standard\n@@ -728,7 +730,7 @@ restrictions placed on component clauses as follows:\n * Components fitting within a single storage unit.\n \n   These are unrestricted, and the effect is merely to renumber bits.  For\n-  example if we are on a little-endian machine with `Low_Order_First`\n+  example if we are on a little-endian machine with ``Low_Order_First``\n   being the default, then the following two declarations have exactly\n   the same effect:\n \n@@ -759,14 +761,14 @@ restrictions placed on component clauses as follows:\n \n \n   The useful application here is to write the second declaration with the\n-  `Bit_Order` attribute definition clause, and know that it will be treated\n+  ``Bit_Order`` attribute definition clause, and know that it will be treated\n   the same, regardless of whether the target is little-endian or big-endian.\n \n * Components occupying an integral number of bytes.\n \n   These are components that exactly fit in two or more bytes.  Such component\n   declarations are allowed, but have no effect, since it is important to realize\n-  that the `Bit_Order` specification does not affect the ordering of bytes.\n+  that the ``Bit_Order`` specification does not affect the ordering of bytes.\n   In particular, the following attempt at getting an endian-independent integer\n   does not work:\n \n@@ -788,7 +790,7 @@ restrictions placed on component clauses as follows:\n   little-endian machine, and a big-endian integer on a big-endian machine.\n   If byte flipping is required for interoperability between big- and\n   little-endian machines, this must be explicitly programmed.  This capability\n-  is not provided by `Bit_Order`.\n+  is not provided by ``Bit_Order``.\n \n * Components that are positioned across byte boundaries.\n \n@@ -802,7 +804,7 @@ restrictions placed on component clauses as follows:\n Since the misconception that Bit_Order automatically deals with all\n endian-related incompatibilities is a common one, the specification of\n a component field that is an integral number of bytes will always\n-generate a warning.  This warning may be suppressed using `pragma Warnings (Off)`\n+generate a warning.  This warning may be suppressed using ``pragma Warnings (Off)``\n if desired.  The following section contains additional\n details regarding the issue of byte ordering.\n \n@@ -815,11 +817,11 @@ Effect of Bit_Order on Byte Ordering\n \n .. index:: ordering, of bytes\n \n-In this section we will review the effect of the `Bit_Order` attribute\n+In this section we will review the effect of the ``Bit_Order`` attribute\n definition clause on byte ordering.  Briefly, it has no effect at all, but\n a detailed example will be helpful.  Before giving this\n example, let us review the precise\n-definition of the effect of defining `Bit_Order`.  The effect of a\n+definition of the effect of defining ``Bit_Order``.  The effect of a\n non-standard bit order is described in section 13.5.3 of the Ada\n Reference Manual:\n \n@@ -836,7 +838,7 @@ this context, we visit section 13.5.1 of the manual:\n    less than Storage_Unit.\"\n \n The critical point here is that storage places are taken from\n-the values after normalization, not before.  So the `Bit_Order`\n+the values after normalization, not before.  So the ``Bit_Order``\n interpretation applies to normalized values.  The interpretation\n is described in the later part of the 13.5.3 paragraph:\n \n@@ -936,7 +938,7 @@ the byte is backwards, so we have to rewrite the record rep clause as:\n It is a nuisance to have to rewrite the clause, especially if\n the code has to be maintained on both machines.  However,\n this is a case that we can handle with the\n-`Bit_Order` attribute if it is implemented.\n+``Bit_Order`` attribute if it is implemented.\n Note that the implementation is not required on byte addressed\n machines, but it is indeed implemented in GNAT.\n This means that we can simply use the\n@@ -953,7 +955,7 @@ independent of whether the code is compiled on a big-endian or little-endian\n machine.\n \n The important point to understand is that byte ordering is not affected.\n-A `Bit_Order` attribute definition never affects which byte a field\n+A ``Bit_Order`` attribute definition never affects which byte a field\n ends up in, only where it ends up in that byte.\n To make this clear, let us rewrite the record rep clause of the previous\n example as:\n@@ -1008,21 +1010,21 @@ This is exactly equivalent to saying (a repeat of the first example):\n      end record;\n \n \n-Why are they equivalent? Well take a specific field, the `Slave_V2`\n+Why are they equivalent? Well take a specific field, the ``Slave_V2``\n field.  The storage place attributes are obtained by normalizing the\n-values given so that the `First_Bit` value is less than 8.  After\n+values given so that the ``First_Bit`` value is less than 8.  After\n normalizing the values (0,10,10) we get (1,2,2) which is exactly what\n we specified in the other case.\n \n-Now one might expect that the `Bit_Order` attribute might affect\n+Now one might expect that the ``Bit_Order`` attribute might affect\n bit numbering within the entire record component (two bytes in this\n case, thus affecting which byte fields end up in), but that is not\n the way this feature is defined, it only affects numbering of bits,\n not which byte they end up in.\n \n Consequently it never makes sense to specify a starting bit number\n greater than 7 (for a byte addressable field) if an attribute\n-definition for `Bit_Order` has been given, and indeed it\n+definition for ``Bit_Order`` has been given, and indeed it\n may be actively confusing to specify such a value, so the compiler\n generates a warning for such usage.\n \n@@ -1060,7 +1062,7 @@ some machines we might write:\n      end record;\n \n Now to switch between machines, all that is necessary is\n-to set the boolean constant `Master_Byte_First` in\n+to set the boolean constant ``Master_Byte_First`` in\n an appropriate manner.\n \n .. _Pragma_Pack_for_Arrays:\n@@ -1070,7 +1072,7 @@ Pragma Pack for Arrays\n \n .. index:: Pragma Pack (for arrays)\n \n-Pragma `Pack` applied to an array has an effect that depends upon whether the\n+Pragma ``Pack`` applied to an array has an effect that depends upon whether the\n component type is *packable*.  For a component type to be *packable*, it must\n be one of the following cases:\n \n@@ -1081,7 +1083,7 @@ be one of the following cases:\n * Any small simple record type with a static size.\n \n For all these cases, if the component subtype size is in the range\n-1 through 64, then the effect of the pragma `Pack` is exactly as though a\n+1 through 64, then the effect of the pragma ``Pack`` is exactly as though a\n component size were specified giving the component subtype size.\n \n All other types are non-packable, they occupy an integral number of storage\n@@ -1096,18 +1098,18 @@ For example if we have:\n      type ar is array (1 .. 8) of r;\n      pragma Pack (ar);\n \n-Then the component size of `ar` will be set to 5 (i.e., to `r'size`,\n-and the size of the array `ar` will be exactly 40 bits).\n+Then the component size of ``ar`` will be set to 5 (i.e., to ``r'size``,\n+and the size of the array ``ar`` will be exactly 40 bits).\n \n Note that in some cases this rather fierce approach to packing can produce\n unexpected effects.  For example, in Ada 95 and Ada 2005,\n-subtype `Natural` typically has a size of 31, meaning that if you\n-pack an array of `Natural`, you get 31-bit\n+subtype ``Natural`` typically has a size of 31, meaning that if you\n+pack an array of ``Natural``, you get 31-bit\n close packing, which saves a few bits, but results in far less efficient\n access.  Since many other Ada compilers will ignore such a packing request,\n-GNAT will generate a warning on some uses of pragma `Pack` that it guesses\n+GNAT will generate a warning on some uses of pragma ``Pack`` that it guesses\n might not be what is intended.  You can easily remove this warning by\n-using an explicit `Component_Size` setting instead, which never generates\n+using an explicit ``Component_Size`` setting instead, which never generates\n a warning, since the intention of the programmer is clear in this case.\n \n GNAT treats packed arrays in one of two ways.  If the size of the array is\n@@ -1147,18 +1149,18 @@ rejecting the size clause and noting that the minimum size allowed is 64.\n \n One special case that is worth noting occurs when the base type of the\n component size is 8/16/32 and the subtype is one bit less. Notably this\n-occurs with subtype `Natural`. Consider:\n+occurs with subtype ``Natural``. Consider:\n \n .. code-block:: ada\n \n      type Arr is array (1 .. 32) of Natural;\n      pragma Pack (Arr);\n \n In all commonly used Ada 83 compilers, this pragma Pack would be ignored,\n-since typically `Natural'Size` is 32 in Ada 83, and in any case most\n+since typically ``Natural'Size`` is 32 in Ada 83, and in any case most\n Ada 83 compilers did not attempt 31 bit packing.\n \n-In Ada 95 and Ada 2005, `Natural'Size` is required to be 31. Furthermore,\n+In Ada 95 and Ada 2005, ``Natural'Size`` is required to be 31. Furthermore,\n GNAT really does pack 31-bit subtype to 31 bits. This may result in a\n substantial unintended performance penalty when porting legacy Ada 83 code.\n To help prevent this, GNAT generates a warning in such cases. If you really\n@@ -1180,7 +1182,7 @@ Pragma Pack for Records\n \n .. index:: Pragma Pack (for records)\n \n-Pragma `Pack` applied to a record will pack the components to reduce\n+Pragma ``Pack`` applied to a record will pack the components to reduce\n wasted space from alignment gaps and by reducing the amount of space\n taken by components.  We distinguish between *packable* components and\n *non-packable* components.\n@@ -1194,13 +1196,13 @@ Components of the following types are considered packable:\n \n * Small simple records, where the size is statically known, are also packable.\n \n-For all these cases, if the 'Size value is in the range 1 through 64, the\n+For all these cases, if the ``'Size`` value is in the range 1 through 64, the\n components occupy the exact number of bits corresponding to this value\n and are packed with no padding bits, i.e. they can start on an arbitrary\n bit boundary.\n \n All other types are non-packable, they occupy an integral number of storage\n-units and the only effect of pragma Pack is to remove alignment gaps.\n+units and the only effect of pragma ``Pack`` is to remove alignment gaps.\n \n For example, consider the record\n \n@@ -1224,7 +1226,7 @@ For example, consider the record\n      end record;\n      pragma Pack (X2);\n \n-The representation for the record X2 is as follows:\n+The representation for the record ``X2`` is as follows:\n \n .. code-block:: ada\n \n@@ -1238,17 +1240,17 @@ The representation for the record X2 is as follows:\n      L6 at 18 range  0 .. 71;\n   end record;\n \n-Studying this example, we see that the packable fields `L1`\n-and `L2` are\n+Studying this example, we see that the packable fields ``L1``\n+and ``L2`` are\n of length equal to their sizes, and placed at specific bit boundaries (and\n not byte boundaries) to\n-eliminate padding.  But `L3` is of a non-packable float type (because\n+eliminate padding.  But ``L3`` is of a non-packable float type (because\n it is aliased), so it is on the next appropriate alignment boundary.\n \n-The next two fields are fully packable, so `L4` and `L5` are\n-minimally packed with no gaps.  However, type `Rb2` is a packed\n+The next two fields are fully packable, so ``L4`` and ``L5`` are\n+minimally packed with no gaps.  However, type ``Rb2`` is a packed\n array that is longer than 64 bits, so it is itself non-packable.  Thus\n-the `L6` field is aligned to the next byte boundary, and takes an\n+the ``L6`` field is aligned to the next byte boundary, and takes an\n integral number of bytes, i.e., 72 bits.\n \n .. _Record_Representation_Clauses:\n@@ -1266,7 +1268,7 @@ of the component.\n .. index:: Component Clause\n \n For all components of an elementary type, the only restriction on component\n-clauses is that the size must be at least the 'Size value of the type\n+clauses is that the size must be at least the ``'Size`` value of the type\n (actually the Value_Size).  There are no restrictions due to alignment,\n and such components may freely cross storage boundaries.\n \n@@ -1280,7 +1282,7 @@ thus the same lack of restriction applies.  For example, if you declare:\n      pragma Pack (R);\n      for R'Size use 49;\n \n-then a component clause for a component of type R may start on any\n+then a component clause for a component of type ``R`` may start on any\n specified bit boundary, and may specify a value of 49 bits or greater.\n \n For packed bit arrays that are longer than 64 bits, there are two\n@@ -1304,9 +1306,9 @@ the start of the record.  No component clause may attempt to overlay this\n tag. When a tagged type appears as a component, the tag field must have\n proper alignment\n \n-In the case of a record extension T1, of a type T, no component clause applied\n-to the type T1 can specify a storage location that would overlap the first\n-T'Size bytes of the record.\n+In the case of a record extension ``T1``, of a type ``T``, no component clause applied\n+to the type ``T1`` can specify a storage location that would overlap the first\n+``T'Size`` bytes of the record.\n \n For all other component types, including non-bit-packed arrays,\n the component can be placed at an arbitrary bit boundary,\n@@ -1329,13 +1331,6 @@ so for example, the following is permitted:\n         R at 0 range 82 .. 161;\n      end record;\n \n-Note: the above rules apply to recent releases of GNAT 5.\n-In GNAT 3, there are more severe restrictions on larger components.\n-For composite types, including packed arrays with a size greater than\n-64 bits, component clauses must respect the alignment requirement of the\n-type, in particular, always starting on a byte boundary, and the length\n-must be a multiple of the storage unit.\n-\n .. _Handling_of_Records_with_Holes:\n \n Handling of Records with Holes\n@@ -1454,10 +1449,10 @@ manner.  Consider the declarations:\n      type t is array (r) of Character;\n \n The array type t corresponds to a vector with exactly three elements and\n-has a default size equal to `3*Character'Size`.  This ensures efficient\n+has a default size equal to ``3*Character'Size``.  This ensures efficient\n use of space, but means that accesses to elements of the array will incur\n the overhead of converting representation values to the corresponding\n-positional values, (i.e., the value delivered by the `Pos` attribute).\n+positional values, (i.e., the value delivered by the ``Pos`` attribute).\n \n \n .. _Address_Clauses:\n@@ -1557,7 +1552,7 @@ thus when used as an address clause value is always permitted.\n Additionally, GNAT treats as static an address clause that is an\n unchecked_conversion of a static integer value.  This simplifies the porting\n of legacy code, and provides a portable equivalent to the GNAT attribute\n-`To_Address`.\n+``To_Address``.\n \n Another issue with address clauses is the interaction with alignment\n requirements.  When an address clause is given for an object, the address\n@@ -1570,10 +1565,10 @@ Since this source of erroneous behavior can have unfortunate effects on\n machines with strict alignment requirements, GNAT\n checks (at compile time if possible, generating a warning, or at execution\n time with a run-time check) that the alignment is appropriate.  If the\n-run-time check fails, then `Program_Error` is raised.  This run-time\n+run-time check fails, then ``Program_Error`` is raised.  This run-time\n check is suppressed if range checks are suppressed, or if the special GNAT\n check Alignment_Check is suppressed, or if\n-`pragma Restrictions (No_Elaboration_Code)` is in effect. It is also\n+``pragma Restrictions (No_Elaboration_Code)`` is in effect. It is also\n suppressed by default on non-strict alignment machines (such as the x86).\n \n Finally, GNAT does not permit overlaying of objects of class-wide types. In\n@@ -1661,27 +1656,27 @@ or alternatively, using the form recommended by the RM:\n     for B'Address use Addr;\n \n \n-In both of these cases, `A` and `B` become aliased to one another\n+In both of these cases, ``A`` and ``B`` become aliased to one another\n via the address clause. This use of address clauses to overlay\n variables, achieving an effect similar to unchecked conversion\n was erroneous in Ada 83, but in Ada 95 and Ada 2005\n the effect is implementation defined. Furthermore, the\n Ada RM specifically recommends that in a situation\n-like this, `B` should be subject to the following\n+like this, ``B`` should be subject to the following\n implementation advice (RM 13.3(19)):\n \n    \"19  If the Address of an object is specified, or it is imported\n    or exported, then the implementation should not perform\n    optimizations based on assumptions of no aliases.\"\n \n GNAT follows this recommendation, and goes further by also applying\n-this recommendation to the overlaid variable (`A` in the above example)\n+this recommendation to the overlaid variable (``A`` in the above example)\n in this case. This means that the overlay works \"as expected\", in that\n a modification to one of the variables will affect the value of the other.\n \n More generally, GNAT interprets this recommendation conservatively for\n address clauses: in the cases other than overlays, it considers that the\n-object is effectively subject to pragma `Volatile` and implements the\n+object is effectively subject to pragma ``Volatile`` and implements the\n associated semantics.\n \n Note that when address clause overlays are used in this way, there is an\n@@ -1704,9 +1699,9 @@ issue of unintentional initialization, as shown by this example:\n \n   end Overwrite_Record;\n \n-Here the default initialization of `Y` will clobber the value\n-of `X`, which justifies the warning. The warning notes that\n-this effect can be eliminated by adding a `pragma Import`\n+Here the default initialization of ``Y`` will clobber the value\n+of ``X``, which justifies the warning. The warning notes that\n+this effect can be eliminated by adding a ``pragma Import``\n which suppresses the initialization:\n \n .. code-block:: ada\n@@ -1723,12 +1718,12 @@ which suppresses the initialization:\n   end Overwrite_Record;\n \n \n-Note that the use of `pragma Initialize_Scalars` may cause variables to\n+Note that the use of ``pragma Initialize_Scalars`` may cause variables to\n be initialized when they would not otherwise have been in the absence\n of the use of this pragma. This may cause an overlay to have this\n unintended clobbering effect. The compiler avoids this for scalar\n types, but not for composite objects (where in general the effect\n-of `Initialize_Scalars` is part of the initialization routine\n+of ``Initialize_Scalars`` is part of the initialization routine\n for the composite object:\n \n ::\n@@ -1754,7 +1749,7 @@ for the composite object:\n   end Overwrite_Array;\n \n The above program generates the warning as shown, and at execution\n-time, prints `X was clobbered`. If the `pragma Import` is\n+time, prints ``X was clobbered``. If the ``pragma Import`` is\n added as suggested:\n \n .. code-block:: ada\n@@ -1776,7 +1771,7 @@ added as suggested:\n   end Overwrite_Array;\n \n then the program compiles without the warning and when run will generate\n-the output `X was not clobbered`.\n+the output ``X was not clobbered``.\n \n \n .. _Use_of_Address_Clauses_for_Memory-Mapped_I/O:\n@@ -1834,8 +1829,8 @@ It is best to be explicit in this situation, by either declaring the\n components to be atomic if you want the byte store, or explicitly writing\n the full word access sequence if that is what the hardware requires.\n Alternatively, if the full word access sequence is required, GNAT also\n-provides the pragma `Volatile_Full_Access` which can be used in lieu of\n-pragma `Atomic` and will give the additional guarantee.\n+provides the pragma ``Volatile_Full_Access`` which can be used in lieu of\n+pragma ``Atomic`` and will give the additional guarantee.\n \n \n .. _Effect_of_Convention_on_Representation:\n@@ -1872,9 +1867,9 @@ There are four exceptions to this general rule:\n        type Color is (Red, Green, Blue);\n \n   8 bits is sufficient to store all values of the type, so by default, objects\n-  of type `Color` will be represented using 8 bits.  However, normal C\n+  of type ``Color`` will be represented using 8 bits.  However, normal C\n   convention is to use 32 bits for all enum values in C, since enum values\n-  are essentially of type int.  If pragma `Convention C` is specified for an\n+  are essentially of type int.  If pragma ``Convention C`` is specified for an\n   Ada enumeration type, then the size is modified as necessary (usually to\n   32 bits) to be consistent with the C convention for enum values.\n \n@@ -1893,7 +1888,7 @@ There are four exceptions to this general rule:\n   true.  In Ada, the normal convention is that two specific values, typically\n   0/1, are used to represent false/true respectively.\n \n-  Fortran has a similar convention for `LOGICAL` values (any nonzero\n+  Fortran has a similar convention for ``LOGICAL`` values (any nonzero\n   value represents true).\n \n   To accommodate the Fortran and C conventions, if a pragma Convention specifies\n@@ -2006,8 +2001,8 @@ representation clause or pragma is accepted, there can still be questions\n of what the compiler actually does.  For example, if a partial record\n representation clause specifies the location of some components and not\n others, then where are the non-specified components placed? Or if pragma\n-`Pack` is used on a record, then exactly where are the resulting\n-fields placed? The section on pragma `Pack` in this chapter can be\n+``Pack`` is used on a record, then exactly where are the resulting\n+fields placed? The section on pragma ``Pack`` in this chapter can be\n used to answer the second question, but it is often easier to just see\n what the compiler does.\n \n@@ -2130,7 +2125,7 @@ fields present, including the parent field, which is a copy of the fields\n of the parent type of r2, i.e., r1.\n \n The component size and size clauses for types rb1 and rb2 show\n-the exact effect of pragma `Pack` on these arrays, and the record\n+the exact effect of pragma ``Pack`` on these arrays, and the record\n representation clause for type x2 shows how pragma `Pack` affects\n this record type.\n "}, {"sha": "7b6476823149d0103e842e93eeb5e06f28795187", "filename": "gcc/ada/doc/gnat_rm/standard_and_implementation_defined_restrictions.rst", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -54,8 +54,8 @@ the call.\n \n .. index:: Max_Entry_Queue_Depth\n \n-The restriction `Max_Entry_Queue_Depth` is recognized as a\n-synonym for `Max_Entry_Queue_Length`. This is retained for historical\n+The restriction ``Max_Entry_Queue_Depth`` is recognized as a\n+synonym for ``Max_Entry_Queue_Length``. This is retained for historical\n compatibility purposes (and a warning will be generated for its use if\n warnings on obsolescent features are activated).\n \n@@ -201,7 +201,7 @@ No_Dispatch\n .. index:: No_Dispatch\n \n [RM H.4] This restriction ensures at compile time that there are no\n-occurrences of `T'Class`, for any (tagged) subtype `T`.\n+occurrences of ``T'Class``, for any (tagged) subtype ``T``.\n \n No_Dispatching_Calls\n --------------------\n@@ -217,7 +217,7 @@ in the implementation of class-wide objects assignments. The\n membership test is allowed in the presence of this restriction, because its\n implementation requires no dispatching.\n This restriction is comparable to the official Ada restriction\n-`No_Dispatch` except that it is a bit less restrictive in that it allows\n+``No_Dispatch`` except that it is a bit less restrictive in that it allows\n all classwide constructs that do not imply dispatching.\n The following example indicates constructs that violate this restriction.\n \n@@ -274,8 +274,8 @@ Detach_Handler, and Reference).\n \n .. index:: No_Dynamic_Interrupts\n \n-The restriction `No_Dynamic_Interrupts` is recognized as a\n-synonym for `No_Dynamic_Attachment`. This is retained for historical\n+The restriction ``No_Dynamic_Interrupts`` is recognized as a\n+synonym for ``No_Dynamic_Attachment``. This is retained for historical\n compatibility purposes (and a warning will be generated for its use if\n warnings on obsolescent features are activated).\n \n@@ -368,11 +368,11 @@ performed by the compiler to support these features. The following types\n are no longer considered controlled when this restriction is in effect:\n \n *\n-  `Ada.Finalization.Controlled`\n+  ``Ada.Finalization.Controlled``\n *\n-  `Ada.Finalization.Limited_Controlled`\n+  ``Ada.Finalization.Limited_Controlled``\n *\n-  Derivations from `Controlled` or `Limited_Controlled`\n+  Derivations from ``Controlled`` or ``Limited_Controlled``\n *\n   Class-wide types\n *\n@@ -421,8 +421,8 @@ No_Implicit_Dynamic_Code\n [GNAT] This restriction prevents the compiler from building 'trampolines'.\n This is a structure that is built on the stack and contains dynamic\n code to be executed at run time. On some targets, a trampoline is\n-built for the following features: `Access`,\n-`Unrestricted_Access`, or `Address` of a nested subprogram;\n+built for the following features: ``Access``,\n+``Unrestricted_Access``, or ``Address`` of a nested subprogram;\n nested task bodies; primitive operations of nested tagged types.\n Trampolines do not work on machines that prevent execution of stack\n data. For example, on windows systems, enabling DEP (data execution\n@@ -433,8 +433,8 @@ On many targets, trampolines have been largely eliminated. Look at the\n version of system.ads for your target --- if it has\n Always_Compatible_Rep equal to False, then trampolines are largely\n eliminated. In particular, a trampoline is built for the following\n-features: `Address` of a nested subprogram;\n-`Access` or `Unrestricted_Access` of a nested subprogram,\n+features: ``Address`` of a nested subprogram;\n+``Access`` or ``Unrestricted_Access`` of a nested subprogram,\n but only if pragma Favor_Top_Level applies, or the access type has a\n foreign-language convention; primitive operations of nested tagged\n types.\n@@ -559,21 +559,21 @@ No_Relative_Delay\n .. index:: No_Relative_Delay\n \n [RM D.7] This restriction ensures at compile time that there are no delay\n-relative statements and prevents expressions such as `delay 1.23;` from\n+relative statements and prevents expressions such as ``delay 1.23;`` from\n appearing in source code.\n \n No_Requeue_Statements\n ---------------------\n .. index:: No_Requeue_Statements\n \n [RM D.7] This restriction ensures at compile time that no requeue statements\n-are permitted and prevents keyword `requeue` from being used in source\n+are permitted and prevents keyword ``requeue`` from being used in source\n code.\n \n .. index:: No_Requeue\n \n-The restriction `No_Requeue` is recognized as a\n-synonym for `No_Requeue_Statements`. This is retained for historical\n+The restriction ``No_Requeue`` is recognized as a\n+synonym for ``No_Requeue_Statements``. This is retained for historical\n compatibility purposes (and a warning will be generated for its use if\n warnings on oNobsolescent features are activated).\n \n@@ -584,15 +584,15 @@ No_Secondary_Stack\n [GNAT] This restriction ensures at compile time that the generated code\n does not contain any reference to the secondary stack.  The secondary\n stack is used to implement functions returning unconstrained objects\n-(arrays or records) on some targets. Suppresses the allocation of \n+(arrays or records) on some targets. Suppresses the allocation of\n secondary stacks for tasks (excluding the environment task) at run time.\n \n No_Select_Statements\n --------------------\n .. index:: No_Select_Statements\n \n [RM D.7] This restriction ensures at compile time no select statements of any\n-kind are permitted, that is the keyword `select` may not appear.\n+kind are permitted, that is the keyword ``select`` may not appear.\n \n No_Specific_Termination_Handlers\n --------------------------------\n@@ -632,8 +632,8 @@ No_Stream_Optimizations\n .. index:: No_Stream_Optimizations\n \n [GNAT] This restriction affects the performance of stream operations on types\n-`String`, `Wide_String` and `Wide_Wide_String`. By default, the\n-compiler uses block reads and writes when manipulating `String` objects\n+``String``, ``Wide_String`` and ``Wide_Wide_String``. By default, the\n+compiler uses block reads and writes when manipulating ``String`` objects\n due to their supperior performance. When this restriction is in effect, the\n compiler performs all IO operations on a per-character basis.\n \n@@ -644,8 +644,8 @@ No_Streams\n [GNAT] This restriction ensures at compile/bind time that there are no\n stream objects created and no use of stream attributes.\n This restriction does not forbid dependences on the package\n-`Ada.Streams`. So it is permissible to with\n-`Ada.Streams` (or another package that does so itself)\n+``Ada.Streams``. So it is permissible to with\n+``Ada.Streams`` (or another package that does so itself)\n as long as no actual stream objects are created and no\n stream attributes are used.\n \n@@ -676,12 +676,12 @@ No_Task_Attributes_Package\n .. index:: No_Task_Attributes_Package\n \n [GNAT] This restriction ensures at compile time that there are no implicit or\n-explicit dependencies on the package `Ada.Task_Attributes`.\n+explicit dependencies on the package ``Ada.Task_Attributes``.\n \n .. index:: No_Task_Attributes\n \n-The restriction `No_Task_Attributes` is recognized as a synonym\n-for `No_Task_Attributes_Package`. This is retained for historical\n+The restriction ``No_Task_Attributes`` is recognized as a synonym\n+for ``No_Task_Attributes_Package``. This is retained for historical\n compatibility purposes (and a warning will be generated for its use if\n warnings on obsolescent features are activated).\n \n@@ -704,7 +704,7 @@ No_Tasking\n \n [GNAT] This restriction prevents the declaration of tasks or task types\n throughout the partition.  It is similar in effect to the use of\n-`Max_Tasks => 0` except that violations are caught at compile time\n+``Max_Tasks => 0`` except that violations are caught at compile time\n and cause an error message to be output either by the compiler or\n binder.\n \n@@ -755,8 +755,7 @@ Pure_Barriers\n [GNAT] This restriction ensures at compile time that protected entry\n barriers are restricted to:\n \n-* simple variables defined in the private part of the\n-  protected type/object,\n+* components of the protected object (excluding selection from dereferences),\n * constant declarations,\n * named numbers,\n * enumeration literals,\n@@ -765,7 +764,8 @@ barriers are restricted to:\n * character literals,\n * implicitly defined comparison operators,\n * uses of the Standard.\"not\" operator,\n-* short-circuit operator\n+* short-circuit operator,\n+* the Count attribute\n \n This restriction is a relaxation of the Simple_Barriers restriction,\n but still ensures absence of side effects, exceptions, and recursion\n@@ -782,8 +782,8 @@ part of the protected type.  No other form of entry barriers is permitted.\n \n .. index:: Boolean_Entry_Barriers\n \n-The restriction `Boolean_Entry_Barriers` is recognized as a\n-synonym for `Simple_Barriers`. This is retained for historical\n+The restriction ``Boolean_Entry_Barriers`` is recognized as a\n+synonym for ``Simple_Barriers``. This is retained for historical\n compatibility purposes (and a warning will be generated for its use if\n warnings on obsolescent features are activated).\n \n@@ -793,7 +793,7 @@ Static_Priorities\n \n [GNAT] This restriction ensures at compile time that all priority expressions\n are static, and that there are no dependences on the package\n-`Ada.Dynamic_Priorities`.\n+``Ada.Dynamic_Priorities``.\n \n Static_Storage_Size\n -------------------\n@@ -820,10 +820,10 @@ No_Elaboration_Code\n \n [GNAT] This restriction ensures at compile time that no elaboration code is\n generated.  Note that this is not the same condition as is enforced\n-by pragma `Preelaborate`.  There are cases in which pragma\n-`Preelaborate` still permits code to be generated (e.g., code\n+by pragma ``Preelaborate``.  There are cases in which pragma\n+``Preelaborate`` still permits code to be generated (e.g., code\n to initialize a large array to all zeroes), and there are cases of units\n-which do not meet the requirements for pragma `Preelaborate`,\n+which do not meet the requirements for pragma ``Preelaborate``,\n but for which no elaboration code is generated.  Generally, it is\n the case that preelaborable units will meet the restrictions, with\n the exception of large aggregates initialized with an others_clause,\n@@ -834,7 +834,7 @@ throughout a partition.\n \n In the case of aggregates with others, if the aggregate has a dynamic\n size, there is no way to eliminate the elaboration code (such dynamic\n-bounds would be incompatible with `Preelaborate` in any case). If\n+bounds would be incompatible with ``Preelaborate`` in any case). If\n the bounds are static, then use of this restriction actually modifies\n the code choice of the compiler to avoid generating a loop, and instead\n generate the aggregate statically if possible, no matter how many times\n@@ -932,7 +932,7 @@ No_Implementation_Restrictions\n .. index:: No_Implementation_Restrictions\n \n [GNAT] This restriction checks at compile time that no GNAT-defined restriction\n-identifiers (other than `No_Implementation_Restrictions` itself)\n+identifiers (other than ``No_Implementation_Restrictions`` itself)\n are present.  With this restriction, the only other restriction identifiers\n that can be used are those defined in the Ada Reference Manual.\n \n@@ -961,9 +961,9 @@ No_Implicit_Loops\n .. index:: No_Implicit_Loops\n \n [GNAT] This restriction ensures that the generated code of the unit marked\n-with this restriction does not contain any implicit `for` loops, either by\n+with this restriction does not contain any implicit ``for`` loops, either by\n modifying the generated code where possible, or by rejecting any construct\n-that would otherwise generate an implicit `for` loop. If this restriction is\n+that would otherwise generate an implicit ``for`` loop. If this restriction is\n active, it is possible to build large array aggregates with all static\n components without generating an intermediate temporary, and without generating\n a loop to initialize individual components. Otherwise, a loop is created for\n@@ -982,11 +982,11 @@ No_Wide_Characters\n .. index:: No_Wide_Characters\n \n [GNAT] This restriction ensures at compile time that no uses of the types\n-`Wide_Character` or `Wide_String` or corresponding wide\n+``Wide_Character`` or ``Wide_String`` or corresponding wide\n wide types\n appear, and that no wide or wide wide string or character literals\n appear in the program (that is literals representing characters not in\n-type `Character`).\n+type ``Character``).\n \n SPARK_05\n --------\n@@ -1005,10 +1005,10 @@ SPARK restriction have the form:\n \n .. index:: SPARK\n \n-The restriction `SPARK` is recognized as a\n-synonym for `SPARK_05`. This is retained for historical\n+The restriction ``SPARK`` is recognized as a\n+synonym for ``SPARK_05``. This is retained for historical\n compatibility purposes (and an unconditional warning will be generated\n-for its use, advising replacement by `SPARK`).\n+for its use, advising replacement by ``SPARK``).\n \n This is not a replacement for the semantic checks performed by the\n SPARK Examiner tool, as the compiler currently only deals with code,\n@@ -1018,7 +1018,7 @@ cases of constructs forbidden by SPARK 2005.\n Thus it may well be the case that code which passes the compiler with\n the SPARK restriction is rejected by the SPARK Examiner, e.g. due to\n the different visibility rules of the Examiner based on SPARK 2005\n-`inherit` annotations.\n+``inherit`` annotations.\n \n This restriction can be useful in providing an initial filter for code\n developed using SPARK 2005, or in examining legacy code to see how far"}, {"sha": "e6fceeb798c692c4762d9ebab847f1b83d71353f", "filename": "gcc/ada/doc/gnat_rm/standard_library_routines.rst", "status": "modified", "additions": 48, "deletions": 46, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_library_routines.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_library_routines.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_library_routines.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -37,31 +37,31 @@ the unit is not implemented.\n \n \n ``Ada.Assertions`` *(11.4.2)*\n-  `Assertions` provides the `Assert` subprograms, and also\n-  the declaration of the `Assertion_Error` exception.\n+  ``Assertions`` provides the ``Assert`` subprograms, and also\n+  the declaration of the ``Assertion_Error`` exception.\n \n \n ``Ada.Asynchronous_Task_Control`` *(D.11)*\n-  `Asynchronous_Task_Control` provides low level facilities for task\n+  ``Asynchronous_Task_Control`` provides low level facilities for task\n   synchronization. It is typically not implemented. See package spec for details.\n \n \n ``Ada.Calendar`` *(9.6)*\n-  `Calendar` provides time of day access, and routines for\n+  ``Calendar`` provides time of day access, and routines for\n   manipulating times and durations.\n \n \n ``Ada.Calendar.Arithmetic`` *(9.6.1)*\n   This package provides additional arithmetic\n-  operations for `Calendar`.\n+  operations for ``Calendar``.\n \n \n ``Ada.Calendar.Formatting`` *(9.6.1)*\n-  This package provides formatting operations for `Calendar`.\n+  This package provides formatting operations for ``Calendar``.\n \n \n ``Ada.Calendar.Time_Zones`` *(9.6.1)*\n-  This package provides additional `Calendar` facilities\n+  This package provides additional ``Calendar`` facilities\n   for handling time zones.\n \n \n@@ -84,14 +84,14 @@ the unit is not implemented.\n   that appear in type CHARACTER.  It is useful for writing programs that\n   will run in international environments.  For example, if you want an\n   upper case E with an acute accent in a string, it is often better to use\n-  the definition of `UC_E_Acute` in this package.  Then your program\n+  the definition of ``UC_E_Acute`` in this package.  Then your program\n   will print in an understandable manner even if your environment does not\n   support these extended characters.\n \n \n ``Ada.Command_Line`` *(A.15)*\n   This package provides access to the command line parameters and the name\n-  of the current program (analogous to the use of `argc` and `argv`\n+  of the current program (analogous to the use of ``argc`` and ``argv``\n   in C), and also allows the exit status for the program to be set in a\n   system-independent manner.\n \n@@ -272,7 +272,9 @@ the unit is not implemented.\n \n ``Ada.Locales`` *(A.19)*\n   This package provides declarations providing information (Language\n-  and Country) about the current locale.\n+  and Country) about the current locale. This package is currently not\n+  implemented other than by providing stubs which will always return\n+  Language_Unknown/Country_Unknown.\n \n \n ``Ada.Numerics``\n@@ -289,14 +291,14 @@ the unit is not implemented.\n ``Ada.Numerics.Complex_Elementary_Functions``\n   Provides the implementation of standard elementary functions (such as\n   log and trigonometric functions) operating on complex numbers using the\n-  standard `Float` and the `Complex` and `Imaginary` types\n-  created by the package `Numerics.Complex_Types`.\n+  standard ``Float`` and the ``Complex`` and ``Imaginary`` types\n+  created by the package ``Numerics.Complex_Types``.\n \n \n ``Ada.Numerics.Complex_Types``\n   This is a predefined instantiation of\n-  `Numerics.Generic_Complex_Types` using `Standard.Float` to\n-  build the type `Complex` and `Imaginary`.\n+  ``Numerics.Generic_Complex_Types`` using ``Standard.Float`` to\n+  build the type ``Complex`` and ``Imaginary``.\n \n \n ``Ada.Numerics.Discrete_Random``\n@@ -318,15 +320,15 @@ the unit is not implemented.\n \n   * ``Short_Float``\n \n-    `Ada.Numerics.Short_Complex_Elementary_Functions`\n+    ``Ada.Numerics.Short_Complex_Elementary_Functions``\n \n   * ``Float``\n \n-    `Ada.Numerics.Complex_Elementary_Functions`\n+    ``Ada.Numerics.Complex_Elementary_Functions``\n \n   * ``Long_Float``\n \n-    `Ada.Numerics.Long_Complex_Elementary_Functions`\n+    ``Ada.Numerics.Long_Complex_Elementary_Functions``\n \n ``Ada.Numerics.Generic_Complex_Types``\n   This is a generic package that allows the creation of complex types,\n@@ -336,15 +338,15 @@ the unit is not implemented.\n \n   * ``Short_Float``\n \n-    `Ada.Numerics.Short_Complex_Complex_Types`\n+    ``Ada.Numerics.Short_Complex_Complex_Types``\n \n   * ``Float``\n \n-    `Ada.Numerics.Complex_Complex_Types`\n+    ``Ada.Numerics.Complex_Complex_Types``\n \n   * ``Long_Float``\n \n-    `Ada.Numerics.Long_Complex_Complex_Types`\n+    ``Ada.Numerics.Long_Complex_Complex_Types``\n \n ``Ada.Numerics.Generic_Elementary_Functions``\n   This is a generic package that provides the implementation of standard\n@@ -355,15 +357,15 @@ the unit is not implemented.\n \n   * ``Short_Float``\n \n-    `Ada.Numerics.Short_Elementary_Functions`\n+    ``Ada.Numerics.Short_Elementary_Functions``\n \n   * ``Float``\n \n-    `Ada.Numerics.Elementary_Functions`\n+    ``Ada.Numerics.Elementary_Functions``\n \n   * ``Long_Float``\n \n-    `Ada.Numerics.Long_Elementary_Functions`\n+    ``Ada.Numerics.Long_Elementary_Functions``\n \n ``Ada.Numerics.Generic_Real_Arrays`` *(G.3.1)*\n   Generic operations on arrays of reals\n@@ -372,7 +374,7 @@ the unit is not implemented.\n   Preinstantiation of Ada.Numerics.Generic_Real_Arrays (Float).\n \n ``Ada.Real_Time`` *(D.8)*\n-  This package provides facilities similar to those of `Calendar`, but\n+  This package provides facilities similar to those of ``Calendar``, but\n   operating with a finer clock suitable for real time control. Note that\n   annex D requires that there be no backward clock jumps, and GNAT generally\n   guarantees this behavior, but of course if the external clock on which\n@@ -394,12 +396,12 @@ the unit is not implemented.\n \n ``Ada.Streams`` *(13.13.1)*\n   This is a generic package that provides the basic support for the\n-  concept of streams as used by the stream attributes (`Input`,\n-  `Output`, `Read` and `Write`).\n+  concept of streams as used by the stream attributes (``Input``,\n+  ``Output``, ``Read`` and ``Write``).\n \n ``Ada.Streams.Stream_IO`` *(A.12.1)*\n-  This package is a specialization of the type `Streams` defined in\n-  package `Streams` together with a set of operations providing\n+  This package is a specialization of the type ``Streams`` defined in\n+  package ``Streams`` together with a set of operations providing\n   Stream_IO capability.  The Stream_IO model permits both random and\n   sequential access to a file which can contain an arbitrary set of values\n   of one or more Ada types.\n@@ -511,8 +513,8 @@ the unit is not implemented.\n ``Ada.Strings.Wide_Unbounded`` *(A.4.7)*\n   These packages provide analogous capabilities to the corresponding\n   packages without ``Wide_`` in the name, but operate with the types\n-  `Wide_String` and `Wide_Character` instead of `String`\n-  and `Character`. Versions of all the child packages are available.\n+  ``Wide_String`` and ``Wide_Character`` instead of ``String``\n+  and ``Character``. Versions of all the child packages are available.\n \n ``Ada.Strings.Wide_Wide_Bounded`` *(A.4.7)*\n \n@@ -523,8 +525,8 @@ the unit is not implemented.\n ``Ada.Strings.Wide_Wide_Unbounded`` *(A.4.7)*\n   These packages provide analogous capabilities to the corresponding\n   packages without ``Wide_`` in the name, but operate with the types\n-  `Wide_Wide_String` and `Wide_Wide_Character` instead\n-  of `String` and `Character`.\n+  ``Wide_Wide_String`` and ``Wide_Wide_Character`` instead\n+  of ``String`` and ``Character``.\n \n ``Ada.Synchronous_Barriers`` *(D.10.1)*\n   This package provides facilities for synchronizing tasks at a low level\n@@ -578,39 +580,39 @@ the unit is not implemented.\n \n   * ``Short_Float``\n \n-    `Short_Float_Text_IO`\n+    ``Short_Float_Text_IO``\n \n   * ``Float``\n \n-    `Float_Text_IO`\n+    ``Float_Text_IO``\n \n   * ``Long_Float``\n \n-    `Long_Float_Text_IO`\n+    ``Long_Float_Text_IO``\n \n ``Ada.Text_IO.Integer_IO``\n   Provides input-output facilities for integer types.  The following\n   predefined instantiations of this generic package are available:\n \n   * ``Short_Short_Integer``\n \n-    `Ada.Short_Short_Integer_Text_IO`\n+    ``Ada.Short_Short_Integer_Text_IO``\n \n   * ``Short_Integer``\n \n-    `Ada.Short_Integer_Text_IO`\n+    ``Ada.Short_Integer_Text_IO``\n \n   * ``Integer``\n \n-    `Ada.Integer_Text_IO`\n+    ``Ada.Integer_Text_IO``\n \n   * ``Long_Integer``\n \n-    `Ada.Long_Integer_Text_IO`\n+    ``Ada.Long_Integer_Text_IO``\n \n   * ``Long_Long_Integer``\n \n-    `Ada.Long_Long_Integer_Text_IO`\n+    ``Ada.Long_Long_Integer_Text_IO``\n \n ``Ada.Text_IO.Modular_IO``\n   Provides input-output facilities for modular (unsigned) types.\n@@ -691,17 +693,17 @@ the unit is not implemented.\n   allocated by use of an allocator.\n \n ``Ada.Wide_Text_IO`` *(A.11)*\n-  This package is similar to `Ada.Text_IO`, except that the external\n+  This package is similar to ``Ada.Text_IO``, except that the external\n   file supports wide character representations, and the internal types are\n-  `Wide_Character` and `Wide_String` instead of `Character`\n-  and `String`. The corresponding set of nested packages and child\n+  ``Wide_Character`` and ``Wide_String`` instead of ``Character``\n+  and ``String``. The corresponding set of nested packages and child\n   packages are defined.\n \n ``Ada.Wide_Wide_Text_IO`` *(A.11)*\n-  This package is similar to `Ada.Text_IO`, except that the external\n+  This package is similar to ``Ada.Text_IO``, except that the external\n   file supports wide character representations, and the internal types are\n-  `Wide_Character` and `Wide_String` instead of `Character`\n-  and `String`. The corresponding set of nested packages and child\n+  ``Wide_Character`` and ``Wide_String`` instead of ``Character``\n+  and ``String``. The corresponding set of nested packages and child\n   packages are defined.\n \n For packages in Interfaces and System, all the RM defined packages are"}, {"sha": "ed614e3b5360678bf8472f98addd6d796e1a44a9", "filename": "gcc/ada/doc/gnat_rm/the_gnat_library.rst", "status": "modified", "additions": 462, "deletions": 394, "changes": 856, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_gnat_library.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_gnat_library.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_gnat_library.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -1,3 +1,5 @@\n+.. role:: switch(samp)\n+\n .. _The_GNAT_Library:\n \n ****************\n@@ -18,116 +20,116 @@ with all GNAT releases.  For example, to find out the full specifications of\n the SPITBOL pattern matching capability, including a full tutorial and\n extensive examples, look in the :file:`g-spipat.ads` file in the library.\n \n-For each entry here, the package name (as it would appear in a `with`\n+For each entry here, the package name (as it would appear in a ``with``\n clause) is given, followed by the name of the corresponding spec file in\n-parentheses.  The packages are children in four hierarchies, `Ada`,\n-`Interfaces`, `System`, and `GNAT`, the latter being a\n+parentheses.  The packages are children in four hierarchies, ``Ada``,\n+``Interfaces``, ``System``, and ``GNAT``, the latter being a\n GNAT-specific hierarchy.\n \n Note that an application program should only use packages in one of these\n four hierarchies if the package is defined in the Ada Reference Manual,\n or is listed in this section of the GNAT Programmers Reference Manual.\n All other units should be considered internal implementation units and\n-should not be directly `with`'ed by application code.  The use of\n-a `with` statement that references one of these internal implementation\n+should not be directly ``with``\\ ed by application code.  The use of\n+a ``with`` clause that references one of these internal implementation\n units makes an application potentially dependent on changes in versions\n of GNAT, and will generate a warning message.\n \n .. _`Ada.Characters.Latin_9_(a-chlat9.ads)`:\n \n-`Ada.Characters.Latin_9` (:file:`a-chlat9.ads`)\n-===============================================\n+``Ada.Characters.Latin_9`` (:file:`a-chlat9.ads`)\n+=================================================\n \n .. index:: Ada.Characters.Latin_9 (a-chlat9.ads)\n \n .. index:: Latin_9 constants for Character\n \n-This child of `Ada.Characters`\n+This child of ``Ada.Characters``\n provides a set of definitions corresponding to those in the\n-RM-defined package `Ada.Characters.Latin_1` but with the\n-few modifications required for `Latin-9`\n+RM-defined package ``Ada.Characters.Latin_1`` but with the\n+few modifications required for ``Latin-9``\n The provision of such a package\n is specifically authorized by the Ada Reference Manual\n (RM A.3.3(27)).\n \n .. _`Ada.Characters.Wide_Latin_1_(a-cwila1.ads)`:\n \n-`Ada.Characters.Wide_Latin_1` (:file:`a-cwila1.ads`)\n-====================================================\n+``Ada.Characters.Wide_Latin_1`` (:file:`a-cwila1.ads`)\n+======================================================\n \n .. index:: Ada.Characters.Wide_Latin_1 (a-cwila1.ads)\n \n .. index:: Latin_1 constants for Wide_Character\n \n-This child of `Ada.Characters`\n+This child of ``Ada.Characters``\n provides a set of definitions corresponding to those in the\n-RM-defined package `Ada.Characters.Latin_1` but with the\n-types of the constants being `Wide_Character`\n-instead of `Character`.  The provision of such a package\n+RM-defined package ``Ada.Characters.Latin_1`` but with the\n+types of the constants being ``Wide_Character``\n+instead of ``Character``.  The provision of such a package\n is specifically authorized by the Ada Reference Manual\n (RM A.3.3(27)).\n \n .. _`Ada.Characters.Wide_Latin_9_(a-cwila1.ads)`:\n \n-`Ada.Characters.Wide_Latin_9` (:file:`a-cwila1.ads`)\n-====================================================\n+``Ada.Characters.Wide_Latin_9`` (:file:`a-cwila1.ads`)\n+======================================================\n \n .. index:: Ada.Characters.Wide_Latin_9 (a-cwila1.ads)\n \n .. index:: Latin_9 constants for Wide_Character\n \n-This child of `Ada.Characters`\n+This child of ``Ada.Characters``\n provides a set of definitions corresponding to those in the\n-GNAT defined package `Ada.Characters.Latin_9` but with the\n-types of the constants being `Wide_Character`\n-instead of `Character`.  The provision of such a package\n+GNAT defined package ``Ada.Characters.Latin_9`` but with the\n+types of the constants being ``Wide_Character``\n+instead of ``Character``.  The provision of such a package\n is specifically authorized by the Ada Reference Manual\n (RM A.3.3(27)).\n \n .. _`Ada.Characters.Wide_Wide_Latin_1_(a-chzla1.ads)`:\n \n-`Ada.Characters.Wide_Wide_Latin_1` (:file:`a-chzla1.ads`)\n-=========================================================\n+``Ada.Characters.Wide_Wide_Latin_1`` (:file:`a-chzla1.ads`)\n+===========================================================\n \n .. index:: Ada.Characters.Wide_Wide_Latin_1 (a-chzla1.ads)\n \n .. index:: Latin_1 constants for Wide_Wide_Character\n \n-This child of `Ada.Characters`\n+This child of ``Ada.Characters``\n provides a set of definitions corresponding to those in the\n-RM-defined package `Ada.Characters.Latin_1` but with the\n-types of the constants being `Wide_Wide_Character`\n-instead of `Character`.  The provision of such a package\n+RM-defined package ``Ada.Characters.Latin_1`` but with the\n+types of the constants being ``Wide_Wide_Character``\n+instead of ``Character``.  The provision of such a package\n is specifically authorized by the Ada Reference Manual\n (RM A.3.3(27)).\n \n .. _`Ada.Characters.Wide_Wide_Latin_9_(a-chzla9.ads)`:\n \n-`Ada.Characters.Wide_Wide_Latin_9` (:file:`a-chzla9.ads`)\n-=========================================================\n+``Ada.Characters.Wide_Wide_Latin_9`` (:file:`a-chzla9.ads`)\n+===========================================================\n \n .. index:: Ada.Characters.Wide_Wide_Latin_9 (a-chzla9.ads)\n \n .. index:: Latin_9 constants for Wide_Wide_Character\n \n-This child of `Ada.Characters`\n+This child of ``Ada.Characters``\n provides a set of definitions corresponding to those in the\n-GNAT defined package `Ada.Characters.Latin_9` but with the\n-types of the constants being `Wide_Wide_Character`\n-instead of `Character`.  The provision of such a package\n+GNAT defined package ``Ada.Characters.Latin_9`` but with the\n+types of the constants being ``Wide_Wide_Character``\n+instead of ``Character``.  The provision of such a package\n is specifically authorized by the Ada Reference Manual\n (RM A.3.3(27)).\n \n .. _`Ada.Containers.Formal_Doubly_Linked_Lists_(a-cfdlli.ads)`:\n \n-`Ada.Containers.Formal_Doubly_Linked_Lists` (:file:`a-cfdlli.ads`)\n-==================================================================\n+``Ada.Containers.Formal_Doubly_Linked_Lists`` (:file:`a-cfdlli.ads`)\n+====================================================================\n \n .. index:: Ada.Containers.Formal_Doubly_Linked_Lists (a-cfdlli.ads)\n \n .. index:: Formal container for doubly linked lists\n \n-This child of `Ada.Containers` defines a modified version of the\n+This child of ``Ada.Containers`` defines a modified version of the\n Ada 2005 container for doubly linked lists, meant to facilitate formal\n verification of code using such containers. The specification of this\n unit is compatible with SPARK 2014.\n@@ -139,14 +141,14 @@ does not have the complex overhead required to detect cursor tampering.\n \n .. _`Ada.Containers.Formal_Hashed_Maps_(a-cfhama.ads)`:\n \n-`Ada.Containers.Formal_Hashed_Maps` (:file:`a-cfhama.ads`)\n-==========================================================\n+``Ada.Containers.Formal_Hashed_Maps`` (:file:`a-cfhama.ads`)\n+============================================================\n \n .. index:: Ada.Containers.Formal_Hashed_Maps (a-cfhama.ads)\n \n .. index:: Formal container for hashed maps\n \n-This child of `Ada.Containers` defines a modified version of the\n+This child of ``Ada.Containers`` defines a modified version of the\n Ada 2005 container for hashed maps, meant to facilitate formal\n verification of code using such containers. The specification of this\n unit is compatible with SPARK 2014.\n@@ -158,14 +160,14 @@ does not have the complex overhead required to detect cursor tampering.\n \n .. _`Ada.Containers.Formal_Hashed_Sets_(a-cfhase.ads)`:\n \n-`Ada.Containers.Formal_Hashed_Sets` (:file:`a-cfhase.ads`)\n-==========================================================\n+``Ada.Containers.Formal_Hashed_Sets`` (:file:`a-cfhase.ads`)\n+============================================================\n \n .. index:: Ada.Containers.Formal_Hashed_Sets (a-cfhase.ads)\n \n .. index:: Formal container for hashed sets\n \n-This child of `Ada.Containers` defines a modified version of the\n+This child of ``Ada.Containers`` defines a modified version of the\n Ada 2005 container for hashed sets, meant to facilitate formal\n verification of code using such containers. The specification of this\n unit is compatible with SPARK 2014.\n@@ -177,14 +179,14 @@ does not have the complex overhead required to detect cursor tampering.\n \n .. _`Ada.Containers.Formal_Ordered_Maps_(a-cforma.ads)`:\n \n-`Ada.Containers.Formal_Ordered_Maps` (:file:`a-cforma.ads`)\n-===========================================================\n+``Ada.Containers.Formal_Ordered_Maps`` (:file:`a-cforma.ads`)\n+=============================================================\n \n .. index:: Ada.Containers.Formal_Ordered_Maps (a-cforma.ads)\n \n .. index:: Formal container for ordered maps\n \n-This child of `Ada.Containers` defines a modified version of the\n+This child of ``Ada.Containers`` defines a modified version of the\n Ada 2005 container for ordered maps, meant to facilitate formal\n verification of code using such containers. The specification of this\n unit is compatible with SPARK 2014.\n@@ -196,14 +198,14 @@ does not have the complex overhead required to detect cursor tampering.\n \n .. _`Ada.Containers.Formal_Ordered_Sets_(a-cforse.ads)`:\n \n-`Ada.Containers.Formal_Ordered_Sets` (:file:`a-cforse.ads`)\n-===========================================================\n+``Ada.Containers.Formal_Ordered_Sets`` (:file:`a-cforse.ads`)\n+=============================================================\n \n .. index:: Ada.Containers.Formal_Ordered_Sets (a-cforse.ads)\n \n .. index:: Formal container for ordered sets\n \n-This child of `Ada.Containers` defines a modified version of the\n+This child of ``Ada.Containers`` defines a modified version of the\n Ada 2005 container for ordered sets, meant to facilitate formal\n verification of code using such containers. The specification of this\n unit is compatible with SPARK 2014.\n@@ -215,14 +217,14 @@ does not have the complex overhead required to detect cursor tampering.\n \n .. _`Ada.Containers.Formal_Vectors_(a-cofove.ads)`:\n \n-`Ada.Containers.Formal_Vectors` (:file:`a-cofove.ads`)\n-======================================================\n+``Ada.Containers.Formal_Vectors`` (:file:`a-cofove.ads`)\n+========================================================\n \n .. index:: Ada.Containers.Formal_Vectors (a-cofove.ads)\n \n .. index:: Formal container for vectors\n \n-This child of `Ada.Containers` defines a modified version of the\n+This child of ``Ada.Containers`` defines a modified version of the\n Ada 2005 container for vectors, meant to facilitate formal\n verification of code using such containers. The specification of this\n unit is compatible with SPARK 2014.\n@@ -234,14 +236,14 @@ does not have the complex overhead required to detect cursor tampering.\n \n .. _`Ada.Containers.Formal_Indefinite_Vectors_(a-cfinve.ads)`:\n \n-`Ada.Containers.Formal_Indefinite_Vectors` (:file:`a-cfinve.ads`)\n-=================================================================\n+``Ada.Containers.Formal_Indefinite_Vectors`` (:file:`a-cfinve.ads`)\n+===================================================================\n \n .. index:: Ada.Containers.Formal_Indefinite_Vectors (a-cfinve.ads)\n \n .. index:: Formal container for vectors\n \n-This child of `Ada.Containers` defines a modified version of the\n+This child of ``Ada.Containers`` defines a modified version of the\n Ada 2005 container for vectors of indefinite elements, meant to\n facilitate formal verification of code using such containers. The\n specification of this unit is compatible with SPARK 2014.\n@@ -251,52 +253,118 @@ in mind, it may well be generally useful in that it is a simplified more\n efficient version than the one defined in the standard. In particular it\n does not have the complex overhead required to detect cursor tampering.\n \n+.. _`Ada.Containers.Functional_Vectors_(a-cofuve.ads)`:\n+\n+``Ada.Containers.Functional_Vectors`` (:file:`a-cofuve.ads`)\n+=================================================================\n+\n+.. index:: Ada.Containers.Functional_Vectors (a-cofuve.ads)\n+\n+.. index:: Functional vectors\n+\n+This child of ``Ada.Containers`` defines immutable vectors. These\n+containers are unbounded and may contain indefinite elements. Furthermore, to\n+be usable in every context, they are neither controlled nor limited. As they\n+are functional, that is, no primitives are provided which would allow modifying\n+an existing container, these containers can still be used safely.\n+\n+Their API features functions creating new containers from existing ones.\n+As a consequence, these containers are highly inefficient. They are also\n+memory consuming, as the allocated memory is not reclaimed when the container\n+is no longer referenced. Thus, they should in general be used in ghost code\n+and annotations, so that they can be removed from the final executable. The\n+specification of this unit is compatible with SPARK 2014.\n+\n+.. _`Ada.Containers.Functional_Sets_(a-cofuse.ads)`:\n+\n+``Ada.Containers.Functional_Sets`` (:file:`a-cofuse.ads`)\n+=================================================================\n+\n+.. index:: Ada.Containers.Functional_Sets (a-cofuse.ads)\n+\n+.. index:: Functional sets\n+\n+This child of ``Ada.Containers`` defines immutable sets. These containers are\n+unbounded and may contain indefinite elements. Furthermore, to be usable in\n+every context, they are neither controlled nor limited. As they are functional,\n+that is, no primitives are provided which would allow modifying an existing\n+container, these containers can still be used safely.\n+\n+Their API features functions creating new containers from existing ones.\n+As a consequence, these containers are highly inefficient. They are also\n+memory consuming, as the allocated memory is not reclaimed when the container\n+is no longer referenced. Thus, they should in general be used in ghost code\n+and annotations, so that they can be removed from the final executable. The\n+specification of this unit is compatible with SPARK 2014.\n+\n+.. _`Ada.Containers.Functional_Maps_(a-cofuma.ads)`:\n+\n+``Ada.Containers.Functional_Maps`` (:file:`a-cofuma.ads`)\n+=================================================================\n+\n+.. index:: Ada.Containers.Functional_Maps (a-cofuma.ads)\n+\n+.. index:: Functional maps\n+\n+This child of ``Ada.Containers`` defines immutable maps. These containers are\n+unbounded and may contain indefinite elements. Furthermore, to be usable in\n+every context, they are neither controlled nor limited. As they are functional,\n+that is, no primitives are provided which would allow modifying an existing\n+container, these containers can still be used safely.\n+\n+Their API features functions creating new containers from existing ones.\n+As a consequence, these containers are highly inefficient. They are also\n+memory consuming, as the allocated memory is not reclaimed when the container\n+is no longer referenced. Thus, they should in general be used in ghost code\n+and annotations, so that they can be removed from the final executable. The\n+specification of this unit is compatible with SPARK 2014.\n+\n .. _`Ada.Containers.Bounded_Holders_(a-coboho.ads)`:\n \n-`Ada.Containers.Bounded_Holders` (:file:`a-coboho.ads`)\n-=======================================================\n+``Ada.Containers.Bounded_Holders`` (:file:`a-coboho.ads`)\n+=========================================================\n \n .. index:: Ada.Containers.Bounded_Holders (a-coboho.ads)\n \n .. index:: Formal container for vectors\n \n-This child of `Ada.Containers` defines a modified version of\n+This child of ``Ada.Containers`` defines a modified version of\n Indefinite_Holders that avoids heap allocation.\n \n .. _`Ada.Command_Line.Environment_(a-colien.ads)`:\n \n-`Ada.Command_Line.Environment` (:file:`a-colien.ads`)\n-=====================================================\n+``Ada.Command_Line.Environment`` (:file:`a-colien.ads`)\n+=======================================================\n \n .. index:: Ada.Command_Line.Environment (a-colien.ads)\n \n .. index:: Environment entries\n \n-This child of `Ada.Command_Line`\n+This child of ``Ada.Command_Line``\n provides a mechanism for obtaining environment values on systems\n where this concept makes sense.\n \n .. _`Ada.Command_Line.Remove_(a-colire.ads)`:\n \n-`Ada.Command_Line.Remove` (:file:`a-colire.ads`)\n-================================================\n+``Ada.Command_Line.Remove`` (:file:`a-colire.ads`)\n+==================================================\n \n .. index:: Ada.Command_Line.Remove (a-colire.ads)\n \n .. index:: Removing command line arguments\n \n .. index:: Command line, argument removal\n \n-This child of `Ada.Command_Line`\n+This child of ``Ada.Command_Line``\n provides a mechanism for logically removing\n arguments from the argument list.  Once removed, an argument is not visible\n-to further calls on the subprograms in `Ada.Command_Line` will not\n+to further calls on the subprograms in ``Ada.Command_Line`` will not\n see the removed argument.\n \n .. _`Ada.Command_Line.Response_File_(a-clrefi.ads)`:\n \n-`Ada.Command_Line.Response_File` (:file:`a-clrefi.ads`)\n-=======================================================\n+``Ada.Command_Line.Response_File`` (:file:`a-clrefi.ads`)\n+=========================================================\n \n .. index:: Ada.Command_Line.Response_File (a-clrefi.ads)\n \n@@ -306,42 +374,42 @@ see the removed argument.\n \n .. index:: Command line, handling long command lines\n \n-This child of `Ada.Command_Line` provides a mechanism facilities for\n+This child of ``Ada.Command_Line`` provides a mechanism facilities for\n getting command line arguments from a text file, called a \"response file\".\n Using a response file allow passing a set of arguments to an executable longer\n than the maximum allowed by the system on the command line.\n \n .. _`Ada.Direct_IO.C_Streams_(a-diocst.ads)`:\n \n-`Ada.Direct_IO.C_Streams` (:file:`a-diocst.ads`)\n-================================================\n+``Ada.Direct_IO.C_Streams`` (:file:`a-diocst.ads`)\n+==================================================\n \n .. index:: Ada.Direct_IO.C_Streams (a-diocst.ads)\n \n .. index:: C Streams, Interfacing with Direct_IO\n \n This package provides subprograms that allow interfacing between\n-C streams and `Direct_IO`.  The stream identifier can be\n+C streams and ``Direct_IO``.  The stream identifier can be\n extracted from a file opened on the Ada side, and an Ada file\n can be constructed from a stream opened on the C side.\n \n .. _`Ada.Exceptions.Is_Null_Occurrence_(a-einuoc.ads)`:\n \n-`Ada.Exceptions.Is_Null_Occurrence` (:file:`a-einuoc.ads`)\n-==========================================================\n+``Ada.Exceptions.Is_Null_Occurrence`` (:file:`a-einuoc.ads`)\n+============================================================\n \n .. index:: Ada.Exceptions.Is_Null_Occurrence (a-einuoc.ads)\n \n .. index:: Null_Occurrence, testing for\n \n This child subprogram provides a way of testing for the null\n-exception occurrence (`Null_Occurrence`) without raising\n+exception occurrence (``Null_Occurrence``) without raising\n an exception.\n \n .. _`Ada.Exceptions.Last_Chance_Handler_(a-elchha.ads)`:\n \n-`Ada.Exceptions.Last_Chance_Handler` (:file:`a-elchha.ads`)\n-===========================================================\n+``Ada.Exceptions.Last_Chance_Handler`` (:file:`a-elchha.ads`)\n+=============================================================\n \n .. index:: Ada.Exceptions.Last_Chance_Handler (a-elchha.ads)\n \n@@ -353,49 +421,49 @@ terminating the program. Note that this subprogram never returns.\n \n .. _`Ada.Exceptions.Traceback_(a-exctra.ads)`:\n \n-`Ada.Exceptions.Traceback` (:file:`a-exctra.ads`)\n-=================================================\n+``Ada.Exceptions.Traceback`` (:file:`a-exctra.ads`)\n+===================================================\n \n .. index:: Ada.Exceptions.Traceback (a-exctra.ads)\n \n .. index:: Traceback for Exception Occurrence\n \n-This child package provides the subprogram (`Tracebacks`) to\n+This child package provides the subprogram (``Tracebacks``) to\n give a traceback array of addresses based on an exception\n occurrence.\n \n .. _`Ada.Sequential_IO.C_Streams_(a-siocst.ads)`:\n \n-`Ada.Sequential_IO.C_Streams` (:file:`a-siocst.ads`)\n-====================================================\n+``Ada.Sequential_IO.C_Streams`` (:file:`a-siocst.ads`)\n+======================================================\n \n .. index:: Ada.Sequential_IO.C_Streams (a-siocst.ads)\n \n .. index:: C Streams, Interfacing with Sequential_IO\n \n This package provides subprograms that allow interfacing between\n-C streams and `Sequential_IO`.  The stream identifier can be\n+C streams and ``Sequential_IO``.  The stream identifier can be\n extracted from a file opened on the Ada side, and an Ada file\n can be constructed from a stream opened on the C side.\n \n .. _`Ada.Streams.Stream_IO.C_Streams_(a-ssicst.ads)`:\n \n-`Ada.Streams.Stream_IO.C_Streams` (:file:`a-ssicst.ads`)\n-========================================================\n+``Ada.Streams.Stream_IO.C_Streams`` (:file:`a-ssicst.ads`)\n+==========================================================\n \n .. index:: Ada.Streams.Stream_IO.C_Streams (a-ssicst.ads)\n \n .. index:: C Streams, Interfacing with Stream_IO\n \n This package provides subprograms that allow interfacing between\n-C streams and `Stream_IO`.  The stream identifier can be\n+C streams and ``Stream_IO``.  The stream identifier can be\n extracted from a file opened on the Ada side, and an Ada file\n can be constructed from a stream opened on the C side.\n \n .. _`Ada.Strings.Unbounded.Text_IO_(a-suteio.ads)`:\n \n-`Ada.Strings.Unbounded.Text_IO` (:file:`a-suteio.ads`)\n-======================================================\n+``Ada.Strings.Unbounded.Text_IO`` (:file:`a-suteio.ads`)\n+========================================================\n \n .. index:: Ada.Strings.Unbounded.Text_IO (a-suteio.ads)\n \n@@ -409,8 +477,8 @@ with ordinary strings.\n \n .. _`Ada.Strings.Wide_Unbounded.Wide_Text_IO_(a-swuwti.ads)`:\n \n-`Ada.Strings.Wide_Unbounded.Wide_Text_IO` (:file:`a-swuwti.ads`)\n-================================================================\n+``Ada.Strings.Wide_Unbounded.Wide_Text_IO`` (:file:`a-swuwti.ads`)\n+==================================================================\n \n .. index:: Ada.Strings.Wide_Unbounded.Wide_Text_IO (a-swuwti.ads)\n \n@@ -424,8 +492,8 @@ with ordinary wide strings.\n \n .. _`Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Text_IO_(a-szuzti.ads)`:\n \n-`Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Text_IO` (:file:`a-szuzti.ads`)\n-==========================================================================\n+``Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Text_IO`` (:file:`a-szuzti.ads`)\n+============================================================================\n \n .. index:: Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Text_IO (a-szuzti.ads)\n \n@@ -439,22 +507,22 @@ with ordinary wide wide strings.\n \n .. _`Ada.Text_IO.C_Streams_(a-tiocst.ads)`:\n \n-`Ada.Text_IO.C_Streams` (:file:`a-tiocst.ads`)\n-==============================================\n+``Ada.Text_IO.C_Streams`` (:file:`a-tiocst.ads`)\n+================================================\n \n .. index:: Ada.Text_IO.C_Streams (a-tiocst.ads)\n \n-.. index:: C Streams, Interfacing with `Text_IO`\n+.. index:: C Streams, Interfacing with ``Text_IO``\n \n This package provides subprograms that allow interfacing between\n-C streams and `Text_IO`.  The stream identifier can be\n+C streams and ``Text_IO``.  The stream identifier can be\n extracted from a file opened on the Ada side, and an Ada file\n can be constructed from a stream opened on the C side.\n \n .. _`Ada.Text_IO.Reset_Standard_Files_(a-tirsfi.ads)`:\n \n-`Ada.Text_IO.Reset_Standard_Files` (:file:`a-tirsfi.ads`)\n-=========================================================\n+``Ada.Text_IO.Reset_Standard_Files`` (:file:`a-tirsfi.ads`)\n+===========================================================\n \n .. index:: Ada.Text_IO.Reset_Standard_Files (a-tirsfi.ads)\n \n@@ -468,8 +536,8 @@ interactive).\n \n .. _`Ada.Wide_Characters.Unicode_(a-wichun.ads)`:\n \n-`Ada.Wide_Characters.Unicode` (:file:`a-wichun.ads`)\n-====================================================\n+``Ada.Wide_Characters.Unicode`` (:file:`a-wichun.ads`)\n+======================================================\n \n .. index:: Ada.Wide_Characters.Unicode (a-wichun.ads)\n \n@@ -480,22 +548,22 @@ Wide_Character values according to Unicode categories.\n \n .. _`Ada.Wide_Text_IO.C_Streams_(a-wtcstr.ads)`:\n \n-`Ada.Wide_Text_IO.C_Streams` (:file:`a-wtcstr.ads`)\n-===================================================\n+``Ada.Wide_Text_IO.C_Streams`` (:file:`a-wtcstr.ads`)\n+=====================================================\n \n .. index:: Ada.Wide_Text_IO.C_Streams (a-wtcstr.ads)\n \n-.. index:: C Streams, Interfacing with `Wide_Text_IO`\n+.. index:: C Streams, Interfacing with ``Wide_Text_IO``\n \n This package provides subprograms that allow interfacing between\n-C streams and `Wide_Text_IO`.  The stream identifier can be\n+C streams and ``Wide_Text_IO``.  The stream identifier can be\n extracted from a file opened on the Ada side, and an Ada file\n can be constructed from a stream opened on the C side.\n \n .. _`Ada.Wide_Text_IO.Reset_Standard_Files_(a-wrstfi.ads)`:\n \n-`Ada.Wide_Text_IO.Reset_Standard_Files` (:file:`a-wrstfi.ads`)\n-==============================================================\n+``Ada.Wide_Text_IO.Reset_Standard_Files`` (:file:`a-wrstfi.ads`)\n+================================================================\n \n .. index:: Ada.Wide_Text_IO.Reset_Standard_Files (a-wrstfi.ads)\n \n@@ -509,8 +577,8 @@ interactive).\n \n .. _`Ada.Wide_Wide_Characters.Unicode_(a-zchuni.ads)`:\n \n-`Ada.Wide_Wide_Characters.Unicode` (:file:`a-zchuni.ads`)\n-=========================================================\n+``Ada.Wide_Wide_Characters.Unicode`` (:file:`a-zchuni.ads`)\n+===========================================================\n \n .. index:: Ada.Wide_Wide_Characters.Unicode (a-zchuni.ads)\n \n@@ -521,22 +589,22 @@ Wide_Wide_Character values according to Unicode categories.\n \n .. _`Ada.Wide_Wide_Text_IO.C_Streams_(a-ztcstr.ads)`:\n \n-`Ada.Wide_Wide_Text_IO.C_Streams` (:file:`a-ztcstr.ads`)\n-========================================================\n+``Ada.Wide_Wide_Text_IO.C_Streams`` (:file:`a-ztcstr.ads`)\n+==========================================================\n \n .. index:: Ada.Wide_Wide_Text_IO.C_Streams (a-ztcstr.ads)\n \n-.. index:: C Streams, Interfacing with `Wide_Wide_Text_IO`\n+.. index:: C Streams, Interfacing with ``Wide_Wide_Text_IO``\n \n This package provides subprograms that allow interfacing between\n-C streams and `Wide_Wide_Text_IO`.  The stream identifier can be\n+C streams and ``Wide_Wide_Text_IO``.  The stream identifier can be\n extracted from a file opened on the Ada side, and an Ada file\n can be constructed from a stream opened on the C side.\n \n .. _`Ada.Wide_Wide_Text_IO.Reset_Standard_Files_(a-zrstfi.ads)`:\n \n-`Ada.Wide_Wide_Text_IO.Reset_Standard_Files` (:file:`a-zrstfi.ads`)\n-===================================================================\n+``Ada.Wide_Wide_Text_IO.Reset_Standard_Files`` (:file:`a-zrstfi.ads`)\n+=====================================================================\n \n .. index:: Ada.Wide_Wide_Text_IO.Reset_Standard_Files (a-zrstfi.ads)\n \n@@ -550,8 +618,8 @@ redefined to be interactive).\n \n .. _`GNAT.Altivec_(g-altive.ads)`:\n \n-`GNAT.Altivec` (:file:`g-altive.ads`)\n-=====================================\n+``GNAT.Altivec`` (:file:`g-altive.ads`)\n+=======================================\n \n .. index:: GNAT.Altivec (g-altive.ads)\n \n@@ -563,8 +631,8 @@ binding.\n \n .. _`GNAT.Altivec.Conversions_(g-altcon.ads)`:\n \n-`GNAT.Altivec.Conversions` (:file:`g-altcon.ads`)\n-=================================================\n+``GNAT.Altivec.Conversions`` (:file:`g-altcon.ads`)\n+===================================================\n \n .. index:: GNAT.Altivec.Conversions (g-altcon.ads)\n \n@@ -574,8 +642,8 @@ This package provides the Vector/View conversion routines.\n \n .. _`GNAT.Altivec.Vector_Operations_(g-alveop.ads)`:\n \n-`GNAT.Altivec.Vector_Operations` (:file:`g-alveop.ads`)\n-=======================================================\n+``GNAT.Altivec.Vector_Operations`` (:file:`g-alveop.ads`)\n+=========================================================\n \n .. index:: GNAT.Altivec.Vector_Operations (g-alveop.ads)\n \n@@ -588,8 +656,8 @@ is common to both bindings.\n \n .. _`GNAT.Altivec.Vector_Types_(g-alvety.ads)`:\n \n-`GNAT.Altivec.Vector_Types` (:file:`g-alvety.ads`)\n-==================================================\n+``GNAT.Altivec.Vector_Types`` (:file:`g-alvety.ads`)\n+====================================================\n \n .. index:: GNAT.Altivec.Vector_Types (g-alvety.ads)\n \n@@ -600,8 +668,8 @@ to AltiVec facilities.\n \n .. _`GNAT.Altivec.Vector_Views_(g-alvevi.ads)`:\n \n-`GNAT.Altivec.Vector_Views` (:file:`g-alvevi.ads`)\n-==================================================\n+``GNAT.Altivec.Vector_Views`` (:file:`g-alvevi.ads`)\n+====================================================\n \n .. index:: GNAT.Altivec.Vector_Views (g-alvevi.ads)\n \n@@ -615,8 +683,8 @@ objects.\n \n .. _`GNAT.Array_Split_(g-arrspl.ads)`:\n \n-`GNAT.Array_Split` (:file:`g-arrspl.ads`)\n-=========================================\n+``GNAT.Array_Split`` (:file:`g-arrspl.ads`)\n+===========================================\n \n .. index:: GNAT.Array_Split (g-arrspl.ads)\n \n@@ -628,8 +696,8 @@ to the resulting slices.\n \n .. _`GNAT.AWK_(g-awk.ads)`:\n \n-`GNAT.AWK` (:file:`g-awk.ads`)\n-==============================\n+``GNAT.AWK`` (:file:`g-awk.ads`)\n+================================\n \n .. index:: GNAT.AWK (g-awk.ads)\n \n@@ -643,21 +711,21 @@ where each record is a line and a field is a data element in this line.\n \n .. _`GNAT.Bind_Environment_(g-binenv.ads)`:\n \n-`GNAT.Bind_Environment` (:file:`g-binenv.ads`)\n-==============================================\n+``GNAT.Bind_Environment`` (:file:`g-binenv.ads`)\n+================================================\n \n .. index:: GNAT.Bind_Environment (g-binenv.ads)\n \n .. index:: Bind environment\n \n Provides access to key=value associations captured at bind time.\n-These associations can be specified using the `-V` binder command\n+These associations can be specified using the :switch:`-V` binder command\n line switch.\n \n .. _`GNAT.Bounded_Buffers_(g-boubuf.ads)`:\n \n-`GNAT.Bounded_Buffers` (:file:`g-boubuf.ads`)\n-=============================================\n+``GNAT.Bounded_Buffers`` (:file:`g-boubuf.ads`)\n+===============================================\n \n .. index:: GNAT.Bounded_Buffers (g-boubuf.ads)\n \n@@ -671,8 +739,8 @@ such as mailboxes.\n \n .. _`GNAT.Bounded_Mailboxes_(g-boumai.ads)`:\n \n-`GNAT.Bounded_Mailboxes` (:file:`g-boumai.ads`)\n-===============================================\n+``GNAT.Bounded_Mailboxes`` (:file:`g-boumai.ads`)\n+=================================================\n \n .. index:: GNAT.Bounded_Mailboxes (g-boumai.ads)\n \n@@ -684,8 +752,8 @@ Provides a thread-safe asynchronous intertask mailbox communication facility.\n \n .. _`GNAT.Bubble_Sort_(g-bubsor.ads)`:\n \n-`GNAT.Bubble_Sort` (:file:`g-bubsor.ads`)\n-=========================================\n+``GNAT.Bubble_Sort`` (:file:`g-bubsor.ads`)\n+===========================================\n \n .. index:: GNAT.Bubble_Sort (g-bubsor.ads)\n \n@@ -699,8 +767,8 @@ access-to-procedure values.\n \n .. _`GNAT.Bubble_Sort_A_(g-busora.ads)`:\n \n-`GNAT.Bubble_Sort_A` (:file:`g-busora.ads`)\n-===========================================\n+``GNAT.Bubble_Sort_A`` (:file:`g-busora.ads`)\n+=============================================\n \n .. index:: GNAT.Bubble_Sort_A (g-busora.ads)\n \n@@ -711,28 +779,28 @@ access-to-procedure values.\n Provides a general implementation of bubble sort usable for sorting arbitrary\n data items.  Move and comparison procedures are provided by passing\n access-to-procedure values. This is an older version, retained for\n-compatibility. Usually `GNAT.Bubble_Sort` will be preferable.\n+compatibility. Usually ``GNAT.Bubble_Sort`` will be preferable.\n \n .. _`GNAT.Bubble_Sort_G_(g-busorg.ads)`:\n \n-`GNAT.Bubble_Sort_G` (:file:`g-busorg.ads`)\n-===========================================\n+``GNAT.Bubble_Sort_G`` (:file:`g-busorg.ads`)\n+=============================================\n \n .. index:: GNAT.Bubble_Sort_G (g-busorg.ads)\n \n .. index:: Sorting\n \n .. index:: Bubble sort\n \n-Similar to `Bubble_Sort_A` except that the move and sorting procedures\n+Similar to ``Bubble_Sort_A`` except that the move and sorting procedures\n are provided as generic parameters, this improves efficiency, especially\n if the procedures can be inlined, at the expense of duplicating code for\n multiple instantiations.\n \n .. _`GNAT.Byte_Order_Mark_(g-byorma.ads)`:\n \n-`GNAT.Byte_Order_Mark` (:file:`g-byorma.ads`)\n-=============================================\n+``GNAT.Byte_Order_Mark`` (:file:`g-byorma.ads`)\n+===============================================\n \n .. index:: GNAT.Byte_Order_Mark (g-byorma.ads)\n \n@@ -747,8 +815,8 @@ sequences for various UCS input formats.\n \n .. _`GNAT.Byte_Swapping_(g-bytswa.ads)`:\n \n-`GNAT.Byte_Swapping` (:file:`g-bytswa.ads`)\n-===========================================\n+``GNAT.Byte_Swapping`` (:file:`g-bytswa.ads`)\n+=============================================\n \n .. index:: GNAT.Byte_Swapping (g-bytswa.ads)\n \n@@ -761,22 +829,22 @@ Machine-specific implementations are available in some cases.\n \n .. _`GNAT.Calendar_(g-calend.ads)`:\n \n-`GNAT.Calendar` (:file:`g-calend.ads`)\n-======================================\n+``GNAT.Calendar`` (:file:`g-calend.ads`)\n+========================================\n \n .. index:: GNAT.Calendar (g-calend.ads)\n \n .. index:: Calendar\n \n-Extends the facilities provided by `Ada.Calendar` to include handling\n-of days of the week, an extended `Split` and `Time_Of` capability.\n-Also provides conversion of `Ada.Calendar.Time` values to and from the\n-C `timeval` format.\n+Extends the facilities provided by ``Ada.Calendar`` to include handling\n+of days of the week, an extended ``Split`` and ``Time_Of`` capability.\n+Also provides conversion of ``Ada.Calendar.Time`` values to and from the\n+C ``timeval`` format.\n \n .. _`GNAT.Calendar.Time_IO_(g-catiio.ads)`:\n \n-`GNAT.Calendar.Time_IO` (:file:`g-catiio.ads`)\n-==============================================\n+``GNAT.Calendar.Time_IO`` (:file:`g-catiio.ads`)\n+================================================\n \n .. index:: Calendar\n \n@@ -786,8 +854,8 @@ C `timeval` format.\n \n .. _`GNAT.CRC32_(g-crc32.ads)`:\n \n-`GNAT.CRC32` (:file:`g-crc32.ads`)\n-==================================\n+``GNAT.CRC32`` (:file:`g-crc32.ads`)\n+====================================\n \n .. index:: GNAT.CRC32 (g-crc32.ads)\n \n@@ -803,23 +871,23 @@ Aug. 1988.  Sarwate, D.V.\n \n .. _`GNAT.Case_Util_(g-casuti.ads)`:\n \n-`GNAT.Case_Util` (:file:`g-casuti.ads`)\n-=======================================\n+``GNAT.Case_Util`` (:file:`g-casuti.ads`)\n+=========================================\n \n .. index:: GNAT.Case_Util (g-casuti.ads)\n \n .. index:: Casing utilities\n \n-.. index:: Character handling (`GNAT.Case_Util`)\n+.. index:: Character handling (``GNAT.Case_Util``)\n \n A set of simple routines for handling upper and lower casing of strings\n without the overhead of the full casing tables\n-in `Ada.Characters.Handling`.\n+in ``Ada.Characters.Handling``.\n \n .. _`GNAT.CGI_(g-cgi.ads)`:\n \n-`GNAT.CGI` (:file:`g-cgi.ads`)\n-==============================\n+``GNAT.CGI`` (:file:`g-cgi.ads`)\n+================================\n \n .. index:: GNAT.CGI (g-cgi.ads)\n \n@@ -833,8 +901,8 @@ with this table.\n \n .. _`GNAT.CGI.Cookie_(g-cgicoo.ads)`:\n \n-`GNAT.CGI.Cookie` (:file:`g-cgicoo.ads`)\n-========================================\n+``GNAT.CGI.Cookie`` (:file:`g-cgicoo.ads`)\n+==========================================\n \n .. index:: GNAT.CGI.Cookie (g-cgicoo.ads)\n \n@@ -848,8 +916,8 @@ cookies (piece of information kept in the Web client software).\n \n .. _`GNAT.CGI.Debug_(g-cgideb.ads)`:\n \n-`GNAT.CGI.Debug` (:file:`g-cgideb.ads`)\n-=======================================\n+``GNAT.CGI.Debug`` (:file:`g-cgideb.ads`)\n+=========================================\n \n .. index:: GNAT.CGI.Debug (g-cgideb.ads)\n \n@@ -860,21 +928,21 @@ programs written in Ada.\n \n .. _`GNAT.Command_Line_(g-comlin.ads)`:\n \n-`GNAT.Command_Line` (:file:`g-comlin.ads`)\n-==========================================\n+``GNAT.Command_Line`` (:file:`g-comlin.ads`)\n+============================================\n \n .. index:: GNAT.Command_Line (g-comlin.ads)\n \n .. index:: Command line\n \n-Provides a high level interface to `Ada.Command_Line` facilities,\n+Provides a high level interface to ``Ada.Command_Line`` facilities,\n including the ability to scan for named switches with optional parameters\n and expand file names using wild card notations.\n \n .. _`GNAT.Compiler_Version_(g-comver.ads)`:\n \n-`GNAT.Compiler_Version` (:file:`g-comver.ads`)\n-==============================================\n+``GNAT.Compiler_Version`` (:file:`g-comver.ads`)\n+================================================\n \n .. index:: GNAT.Compiler_Version (g-comver.ads)\n \n@@ -890,8 +958,8 @@ of a partition).\n \n .. _`GNAT.Ctrl_C_(g-ctrl_c.ads)`:\n \n-`GNAT.Ctrl_C` (:file:`g-ctrl_c.ads`)\n-====================================\n+``GNAT.Ctrl_C`` (:file:`g-ctrl_c.ads`)\n+======================================\n \n .. index:: GNAT.Ctrl_C (g-ctrl_c.ads)\n \n@@ -901,8 +969,8 @@ Provides a simple interface to handle Ctrl-C keyboard events.\n \n .. _`GNAT.Current_Exception_(g-curexc.ads)`:\n \n-`GNAT.Current_Exception` (:file:`g-curexc.ads`)\n-===============================================\n+``GNAT.Current_Exception`` (:file:`g-curexc.ads`)\n+=================================================\n \n .. index:: GNAT.Current_Exception (g-curexc.ads)\n \n@@ -918,8 +986,8 @@ obtaining information about exceptions provided by Ada 83 compilers.\n \n .. _`GNAT.Debug_Pools_(g-debpoo.ads)`:\n \n-`GNAT.Debug_Pools` (:file:`g-debpoo.ads`)\n-=========================================\n+``GNAT.Debug_Pools`` (:file:`g-debpoo.ads`)\n+===========================================\n \n .. index:: GNAT.Debug_Pools (g-debpoo.ads)\n \n@@ -931,12 +999,12 @@ obtaining information about exceptions provided by Ada 83 compilers.\n \n Provide a debugging storage pools that helps tracking memory corruption\n problems.\n-See `The GNAT Debug_Pool Facility` section in the :title:`GNAT User's Guide`.\n+See ``The GNAT Debug_Pool Facility`` section in the :title:`GNAT User's Guide`.\n \n .. _`GNAT.Debug_Utilities_(g-debuti.ads)`:\n \n-`GNAT.Debug_Utilities` (:file:`g-debuti.ads`)\n-=============================================\n+``GNAT.Debug_Utilities`` (:file:`g-debuti.ads`)\n+===============================================\n \n .. index:: GNAT.Debug_Utilities (g-debuti.ads)\n \n@@ -948,8 +1016,8 @@ for hexadecimal literals.\n \n .. _`GNAT.Decode_String_(g-decstr.ads)`:\n \n-`GNAT.Decode_String` (:file:`g-decstr.ads`)\n-===========================================\n+``GNAT.Decode_String`` (:file:`g-decstr.ads`)\n+=============================================\n \n .. index:: GNAT.Decode_String (g-decstr.ads)\n \n@@ -972,8 +1040,8 @@ preinstantiation for UTF-8. See next entry.\n \n .. _`GNAT.Decode_UTF8_String_(g-deutst.ads)`:\n \n-`GNAT.Decode_UTF8_String` (:file:`g-deutst.ads`)\n-================================================\n+``GNAT.Decode_UTF8_String`` (:file:`g-deutst.ads`)\n+==================================================\n \n .. index:: GNAT.Decode_UTF8_String (g-deutst.ads)\n \n@@ -993,8 +1061,8 @@ A preinstantiation of GNAT.Decode_Strings for UTF-8 encoding.\n \n .. _`GNAT.Directory_Operations_(g-dirope.ads)`:\n \n-`GNAT.Directory_Operations` (:file:`g-dirope.ads`)\n-==================================================\n+``GNAT.Directory_Operations`` (:file:`g-dirope.ads`)\n+====================================================\n \n .. index:: GNAT.Directory_Operations (g-dirope.ads)\n \n@@ -1006,8 +1074,8 @@ directory.\n \n .. _`GNAT.Directory_Operations.Iteration_(g-diopit.ads)`:\n \n-`GNAT.Directory_Operations.Iteration` (:file:`g-diopit.ads`)\n-============================================================\n+``GNAT.Directory_Operations.Iteration`` (:file:`g-diopit.ads`)\n+==============================================================\n \n .. index:: GNAT.Directory_Operations.Iteration (g-diopit.ads)\n \n@@ -1018,8 +1086,8 @@ for iterating through directories.\n \n .. _`GNAT.Dynamic_HTables_(g-dynhta.ads)`:\n \n-`GNAT.Dynamic_HTables` (:file:`g-dynhta.ads`)\n-=============================================\n+``GNAT.Dynamic_HTables`` (:file:`g-dynhta.ads`)\n+===============================================\n \n .. index:: GNAT.Dynamic_HTables (g-dynhta.ads)\n \n@@ -1029,15 +1097,15 @@ A generic implementation of hash tables that can be used to hash arbitrary\n data.  Provided in two forms, a simple form with built in hash functions,\n and a more complex form in which the hash function is supplied.\n \n-This package provides a facility similar to that of `GNAT.HTable`,\n+This package provides a facility similar to that of ``GNAT.HTable``,\n except that this package declares a type that can be used to define\n dynamic instances of the hash table, while an instantiation of\n-`GNAT.HTable` creates a single instance of the hash table.\n+``GNAT.HTable`` creates a single instance of the hash table.\n \n .. _`GNAT.Dynamic_Tables_(g-dyntab.ads)`:\n \n-`GNAT.Dynamic_Tables` (:file:`g-dyntab.ads`)\n-============================================\n+``GNAT.Dynamic_Tables`` (:file:`g-dyntab.ads`)\n+==============================================\n \n .. index:: GNAT.Dynamic_Tables (g-dyntab.ads)\n \n@@ -1048,15 +1116,15 @@ dynamic instances of the hash table, while an instantiation of\n A generic package providing a single dimension array abstraction where the\n length of the array can be dynamically modified.\n \n-This package provides a facility similar to that of `GNAT.Table`,\n+This package provides a facility similar to that of ``GNAT.Table``,\n except that this package declares a type that can be used to define\n dynamic instances of the table, while an instantiation of\n-`GNAT.Table` creates a single instance of the table type.\n+``GNAT.Table`` creates a single instance of the table type.\n \n .. _`GNAT.Encode_String_(g-encstr.ads)`:\n \n-`GNAT.Encode_String` (:file:`g-encstr.ads`)\n-===========================================\n+``GNAT.Encode_String`` (:file:`g-encstr.ads`)\n+=============================================\n \n .. index:: GNAT.Encode_String (g-encstr.ads)\n \n@@ -1077,8 +1145,8 @@ Note there is a preinstantiation for UTF-8. See next entry.\n \n .. _`GNAT.Encode_UTF8_String_(g-enutst.ads)`:\n \n-`GNAT.Encode_UTF8_String` (:file:`g-enutst.ads`)\n-================================================\n+``GNAT.Encode_UTF8_String`` (:file:`g-enutst.ads`)\n+==================================================\n \n .. index:: GNAT.Encode_UTF8_String (g-enutst.ads)\n \n@@ -1098,8 +1166,8 @@ A preinstantiation of GNAT.Encode_Strings for UTF-8 encoding.\n \n .. _`GNAT.Exception_Actions_(g-excact.ads)`:\n \n-`GNAT.Exception_Actions` (:file:`g-excact.ads`)\n-===============================================\n+``GNAT.Exception_Actions`` (:file:`g-excact.ads`)\n+=================================================\n \n .. index:: GNAT.Exception_Actions (g-excact.ads)\n \n@@ -1111,8 +1179,8 @@ can be used for instance to force a core dump to ease debugging.\n \n .. _`GNAT.Exception_Traces_(g-exctra.ads)`:\n \n-`GNAT.Exception_Traces` (:file:`g-exctra.ads`)\n-==============================================\n+``GNAT.Exception_Traces`` (:file:`g-exctra.ads`)\n+================================================\n \n .. index:: GNAT.Exception_Traces (g-exctra.ads)\n \n@@ -1125,8 +1193,8 @@ occurrences.\n \n .. _`GNAT.Exceptions_(g-expect.ads)`:\n \n-`GNAT.Exceptions` (:file:`g-expect.ads`)\n-========================================\n+``GNAT.Exceptions`` (:file:`g-expect.ads`)\n+==========================================\n \n .. index:: GNAT.Exceptions (g-expect.ads)\n \n@@ -1136,44 +1204,44 @@ occurrences.\n \n Normally it is not possible to raise an exception with\n a message from a subprogram in a pure package, since the\n-necessary types and subprograms are in `Ada.Exceptions`\n-which is not a pure unit. `GNAT.Exceptions` provides a\n+necessary types and subprograms are in ``Ada.Exceptions``\n+which is not a pure unit. ``GNAT.Exceptions`` provides a\n facility for getting around this limitation for a few\n predefined exceptions, and for example allow raising\n-`Constraint_Error` with a message from a pure subprogram.\n+``Constraint_Error`` with a message from a pure subprogram.\n \n .. _`GNAT.Expect_(g-expect.ads)`:\n \n-`GNAT.Expect` (:file:`g-expect.ads`)\n-====================================\n+``GNAT.Expect`` (:file:`g-expect.ads`)\n+======================================\n \n .. index:: GNAT.Expect (g-expect.ads)\n \n Provides a set of subprograms similar to what is available\n with the standard Tcl Expect tool.\n It allows you to easily spawn and communicate with an external process.\n You can send commands or inputs to the process, and compare the output\n-with some expected regular expression. Currently `GNAT.Expect`\n+with some expected regular expression. Currently ``GNAT.Expect``\n is implemented on all native GNAT ports.\n It is not implemented for cross ports, and in particular is not\n implemented for VxWorks or LynxOS.\n \n .. _`GNAT.Expect.TTY_(g-exptty.ads)`:\n \n-`GNAT.Expect.TTY` (:file:`g-exptty.ads`)\n-========================================\n+``GNAT.Expect.TTY`` (:file:`g-exptty.ads`)\n+==========================================\n \n .. index:: GNAT.Expect.TTY (g-exptty.ads)\n \n As GNAT.Expect but using pseudo-terminal.\n-Currently `GNAT.Expect.TTY` is implemented on all native GNAT\n+Currently ``GNAT.Expect.TTY`` is implemented on all native GNAT\n ports. It is not implemented for cross ports, and\n in particular is not implemented for VxWorks or LynxOS.\n \n .. _`GNAT.Float_Control_(g-flocon.ads)`:\n \n-`GNAT.Float_Control` (:file:`g-flocon.ads`)\n-===========================================\n+``GNAT.Float_Control`` (:file:`g-flocon.ads`)\n+=============================================\n \n .. index:: GNAT.Float_Control (g-flocon.ads)\n \n@@ -1186,8 +1254,8 @@ in this package can be used to reestablish the required mode.\n \n .. _`GNAT.Formatted_String_(g-forstr.ads)`:\n \n-`GNAT.Formatted_String` (:file:`g-forstr.ads`)\n-==============================================\n+``GNAT.Formatted_String`` (:file:`g-forstr.ads`)\n+================================================\n \n .. index:: GNAT.Formatted_String (g-forstr.ads)\n \n@@ -1201,8 +1269,8 @@ formatted string.\n \n .. _`GNAT.Heap_Sort_(g-heasor.ads)`:\n \n-`GNAT.Heap_Sort` (:file:`g-heasor.ads`)\n-=======================================\n+``GNAT.Heap_Sort`` (:file:`g-heasor.ads`)\n+=========================================\n \n .. index:: GNAT.Heap_Sort (g-heasor.ads)\n \n@@ -1215,8 +1283,8 @@ that performs approximately N*log(N) comparisons in the worst case.\n \n .. _`GNAT.Heap_Sort_A_(g-hesora.ads)`:\n \n-`GNAT.Heap_Sort_A` (:file:`g-hesora.ads`)\n-=========================================\n+``GNAT.Heap_Sort_A`` (:file:`g-hesora.ads`)\n+===========================================\n \n .. index:: GNAT.Heap_Sort_A (g-hesora.ads)\n \n@@ -1226,27 +1294,27 @@ Provides a general implementation of heap sort usable for sorting arbitrary\n data items. Move and comparison procedures are provided by passing\n access-to-procedure values.  The algorithm used is a modified heap sort\n that performs approximately N*log(N) comparisons in the worst case.\n-This differs from `GNAT.Heap_Sort` in having a less convenient\n+This differs from ``GNAT.Heap_Sort`` in having a less convenient\n interface, but may be slightly more efficient.\n \n .. _`GNAT.Heap_Sort_G_(g-hesorg.ads)`:\n \n-`GNAT.Heap_Sort_G` (:file:`g-hesorg.ads`)\n-=========================================\n+``GNAT.Heap_Sort_G`` (:file:`g-hesorg.ads`)\n+===========================================\n \n .. index:: GNAT.Heap_Sort_G (g-hesorg.ads)\n \n .. index:: Sorting\n \n-Similar to `Heap_Sort_A` except that the move and sorting procedures\n+Similar to ``Heap_Sort_A`` except that the move and sorting procedures\n are provided as generic parameters, this improves efficiency, especially\n if the procedures can be inlined, at the expense of duplicating code for\n multiple instantiations.\n \n .. _`GNAT.HTable_(g-htable.ads)`:\n \n-`GNAT.HTable` (:file:`g-htable.ads`)\n-====================================\n+``GNAT.HTable`` (:file:`g-htable.ads`)\n+======================================\n \n .. index:: GNAT.HTable (g-htable.ads)\n \n@@ -1258,8 +1326,8 @@ allowing arbitrary dynamic hash tables.\n \n .. _`GNAT.IO_(g-io.ads)`:\n \n-`GNAT.IO` (:file:`g-io.ads`)\n-============================\n+``GNAT.IO`` (:file:`g-io.ads`)\n+==============================\n \n .. index:: GNAT.IO (g-io.ads)\n \n@@ -1274,8 +1342,8 @@ Standard_Output or Standard_Error.\n \n .. _`GNAT.IO_Aux_(g-io_aux.ads)`:\n \n-`GNAT.IO_Aux` (:file:`g-io_aux.ads`)\n-====================================\n+``GNAT.IO_Aux`` (:file:`g-io_aux.ads`)\n+======================================\n \n .. index:: GNAT.IO_Aux (g-io_aux.ads)\n \n@@ -1288,8 +1356,8 @@ for whether a file exists, and functions for reading a line of text.\n \n .. _`GNAT.Lock_Files_(g-locfil.ads)`:\n \n-`GNAT.Lock_Files` (:file:`g-locfil.ads`)\n-========================================\n+``GNAT.Lock_Files`` (:file:`g-locfil.ads`)\n+==========================================\n \n .. index:: GNAT.Lock_Files (g-locfil.ads)\n \n@@ -1302,32 +1370,32 @@ providing program level synchronization.\n \n .. _`GNAT.MBBS_Discrete_Random_(g-mbdira.ads)`:\n \n-`GNAT.MBBS_Discrete_Random` (:file:`g-mbdira.ads`)\n-==================================================\n+``GNAT.MBBS_Discrete_Random`` (:file:`g-mbdira.ads`)\n+====================================================\n \n .. index:: GNAT.MBBS_Discrete_Random (g-mbdira.ads)\n \n .. index:: Random number generation\n \n-The original implementation of `Ada.Numerics.Discrete_Random`.  Uses\n+The original implementation of ``Ada.Numerics.Discrete_Random``.  Uses\n a modified version of the Blum-Blum-Shub generator.\n \n .. _`GNAT.MBBS_Float_Random_(g-mbflra.ads)`:\n \n-`GNAT.MBBS_Float_Random` (:file:`g-mbflra.ads`)\n-===============================================\n+``GNAT.MBBS_Float_Random`` (:file:`g-mbflra.ads`)\n+=================================================\n \n .. index:: GNAT.MBBS_Float_Random (g-mbflra.ads)\n \n .. index:: Random number generation\n \n-The original implementation of `Ada.Numerics.Float_Random`.  Uses\n+The original implementation of ``Ada.Numerics.Float_Random``.  Uses\n a modified version of the Blum-Blum-Shub generator.\n \n .. _`GNAT.MD5_(g-md5.ads)`:\n \n-`GNAT.MD5` (:file:`g-md5.ads`)\n-==============================\n+``GNAT.MD5`` (:file:`g-md5.ads`)\n+================================\n \n .. index:: GNAT.MD5 (g-md5.ads)\n \n@@ -1339,8 +1407,8 @@ FIPS PUB 198.\n \n .. _`GNAT.Memory_Dump_(g-memdum.ads)`:\n \n-`GNAT.Memory_Dump` (:file:`g-memdum.ads`)\n-=========================================\n+``GNAT.Memory_Dump`` (:file:`g-memdum.ads`)\n+===========================================\n \n .. index:: GNAT.Memory_Dump (g-memdum.ads)\n \n@@ -1352,8 +1420,8 @@ output.\n \n .. _`GNAT.Most_Recent_Exception_(g-moreex.ads)`:\n \n-`GNAT.Most_Recent_Exception` (:file:`g-moreex.ads`)\n-===================================================\n+``GNAT.Most_Recent_Exception`` (:file:`g-moreex.ads`)\n+=====================================================\n \n .. index:: GNAT.Most_Recent_Exception (g-moreex.ads)\n \n@@ -1365,8 +1433,8 @@ Ada 83 implementation dependent extensions.\n \n .. _`GNAT.OS_Lib_(g-os_lib.ads)`:\n \n-`GNAT.OS_Lib` (:file:`g-os_lib.ads`)\n-====================================\n+``GNAT.OS_Lib`` (:file:`g-os_lib.ads`)\n+======================================\n \n .. index:: GNAT.OS_Lib (g-os_lib.ads)\n \n@@ -1381,8 +1449,8 @@ and error return codes.\n \n .. _`GNAT.Perfect_Hash_Generators_(g-pehage.ads)`:\n \n-`GNAT.Perfect_Hash_Generators` (:file:`g-pehage.ads`)\n-=====================================================\n+``GNAT.Perfect_Hash_Generators`` (:file:`g-pehage.ads`)\n+=======================================================\n \n .. index:: GNAT.Perfect_Hash_Generators (g-pehage.ads)\n \n@@ -1399,8 +1467,8 @@ convenient for use with realtime applications.\n \n .. _`GNAT.Random_Numbers_(g-rannum.ads)`:\n \n-`GNAT.Random_Numbers` (:file:`g-rannum.ads`)\n-============================================\n+``GNAT.Random_Numbers`` (:file:`g-rannum.ads`)\n+==============================================\n \n .. index:: GNAT.Random_Numbers (g-rannum.ads)\n \n@@ -1411,8 +1479,8 @@ standard Ada library and are more convenient to use.\n \n .. _`GNAT.Regexp_(g-regexp.ads)`:\n \n-`GNAT.Regexp` (:file:`g-regexp.ads`)\n-====================================\n+``GNAT.Regexp`` (:file:`g-regexp.ads`)\n+======================================\n \n .. index:: GNAT.Regexp (g-regexp.ads)\n \n@@ -1427,8 +1495,8 @@ suitable for 'file globbing' applications.\n \n .. _`GNAT.Registry_(g-regist.ads)`:\n \n-`GNAT.Registry` (:file:`g-regist.ads`)\n-======================================\n+``GNAT.Registry`` (:file:`g-regist.ads`)\n+========================================\n \n .. index:: GNAT.Registry (g-regist.ads)\n \n@@ -1441,8 +1509,8 @@ package provided with the Win32Ada binding\n \n .. _`GNAT.Regpat_(g-regpat.ads)`:\n \n-`GNAT.Regpat` (:file:`g-regpat.ads`)\n-====================================\n+``GNAT.Regpat`` (:file:`g-regpat.ads`)\n+======================================\n \n .. index:: GNAT.Regpat (g-regpat.ads)\n \n@@ -1456,8 +1524,8 @@ Henry Spencer (and binary compatible with this C library).\n \n .. _`GNAT.Rewrite_Data_(g-rewdat.ads)`:\n \n-`GNAT.Rewrite_Data` (:file:`g-rewdat.ads`)\n-==========================================\n+``GNAT.Rewrite_Data`` (:file:`g-rewdat.ads`)\n+============================================\n \n .. index:: GNAT.Rewrite_Data (g-rewdat.ads)\n \n@@ -1470,8 +1538,8 @@ this interface usable for large files or socket streams.\n \n .. _`GNAT.Secondary_Stack_Info_(g-sestin.ads)`:\n \n-`GNAT.Secondary_Stack_Info` (:file:`g-sestin.ads`)\n-==================================================\n+``GNAT.Secondary_Stack_Info`` (:file:`g-sestin.ads`)\n+====================================================\n \n .. index:: GNAT.Secondary_Stack_Info (g-sestin.ads)\n \n@@ -1482,8 +1550,8 @@ secondary stack.\n \n .. _`GNAT.Semaphores_(g-semaph.ads)`:\n \n-`GNAT.Semaphores` (:file:`g-semaph.ads`)\n-========================================\n+``GNAT.Semaphores`` (:file:`g-semaph.ads`)\n+==========================================\n \n .. index:: GNAT.Semaphores (g-semaph.ads)\n \n@@ -1493,8 +1561,8 @@ Provides classic counting and binary semaphores using protected types.\n \n .. _`GNAT.Serial_Communications_(g-sercom.ads)`:\n \n-`GNAT.Serial_Communications` (:file:`g-sercom.ads`)\n-===================================================\n+``GNAT.Serial_Communications`` (:file:`g-sercom.ads`)\n+=====================================================\n \n .. index:: GNAT.Serial_Communications (g-sercom.ads)\n \n@@ -1505,8 +1573,8 @@ port. This is only supported on GNU/Linux and Windows.\n \n .. _`GNAT.SHA1_(g-sha1.ads)`:\n \n-`GNAT.SHA1` (:file:`g-sha1.ads`)\n-================================\n+``GNAT.SHA1`` (:file:`g-sha1.ads`)\n+==================================\n \n .. index:: GNAT.SHA1 (g-sha1.ads)\n \n@@ -1518,8 +1586,8 @@ in RFC 2104 and FIPS PUB 198.\n \n .. _`GNAT.SHA224_(g-sha224.ads)`:\n \n-`GNAT.SHA224` (:file:`g-sha224.ads`)\n-====================================\n+``GNAT.SHA224`` (:file:`g-sha224.ads`)\n+======================================\n \n .. index:: GNAT.SHA224 (g-sha224.ads)\n \n@@ -1531,8 +1599,8 @@ in RFC 2104 and FIPS PUB 198.\n \n .. _`GNAT.SHA256_(g-sha256.ads)`:\n \n-`GNAT.SHA256` (:file:`g-sha256.ads`)\n-====================================\n+``GNAT.SHA256`` (:file:`g-sha256.ads`)\n+======================================\n \n .. index:: GNAT.SHA256 (g-sha256.ads)\n \n@@ -1544,8 +1612,8 @@ in RFC 2104 and FIPS PUB 198.\n \n .. _`GNAT.SHA384_(g-sha384.ads)`:\n \n-`GNAT.SHA384` (:file:`g-sha384.ads`)\n-====================================\n+``GNAT.SHA384`` (:file:`g-sha384.ads`)\n+======================================\n \n .. index:: GNAT.SHA384 (g-sha384.ads)\n \n@@ -1557,8 +1625,8 @@ in RFC 2104 and FIPS PUB 198.\n \n .. _`GNAT.SHA512_(g-sha512.ads)`:\n \n-`GNAT.SHA512` (:file:`g-sha512.ads`)\n-====================================\n+``GNAT.SHA512`` (:file:`g-sha512.ads`)\n+======================================\n \n .. index:: GNAT.SHA512 (g-sha512.ads)\n \n@@ -1570,8 +1638,8 @@ in RFC 2104 and FIPS PUB 198.\n \n .. _`GNAT.Signals_(g-signal.ads)`:\n \n-`GNAT.Signals` (:file:`g-signal.ads`)\n-=====================================\n+``GNAT.Signals`` (:file:`g-signal.ads`)\n+=======================================\n \n .. index:: GNAT.Signals (g-signal.ads)\n \n@@ -1582,23 +1650,23 @@ targets.\n \n .. _`GNAT.Sockets_(g-socket.ads)`:\n \n-`GNAT.Sockets` (:file:`g-socket.ads`)\n-=====================================\n+``GNAT.Sockets`` (:file:`g-socket.ads`)\n+=======================================\n \n .. index:: GNAT.Sockets (g-socket.ads)\n \n .. index:: Sockets\n \n A high level and portable interface to develop sockets based applications.\n This package is based on the sockets thin binding found in\n-`GNAT.Sockets.Thin`. Currently `GNAT.Sockets` is implemented\n+``GNAT.Sockets.Thin``. Currently ``GNAT.Sockets`` is implemented\n on all native GNAT ports and on VxWorks cross prots.  It is not implemented for\n the LynxOS cross port.\n \n .. _`GNAT.Source_Info_(g-souinf.ads)`:\n \n-`GNAT.Source_Info` (:file:`g-souinf.ads`)\n-=========================================\n+``GNAT.Source_Info`` (:file:`g-souinf.ads`)\n+===========================================\n \n .. index:: GNAT.Source_Info (g-souinf.ads)\n \n@@ -1607,12 +1675,12 @@ the LynxOS cross port.\n Provides subprograms that give access to source code information known at\n compile time, such as the current file name and line number. Also provides\n subprograms yielding the date and time of the current compilation (like the\n-C macros `__DATE__` and `__TIME__`)\n+C macros ``__DATE__`` and ``__TIME__``)\n \n .. _`GNAT.Spelling_Checker_(g-speche.ads)`:\n \n-`GNAT.Spelling_Checker` (:file:`g-speche.ads`)\n-==============================================\n+``GNAT.Spelling_Checker`` (:file:`g-speche.ads`)\n+================================================\n \n .. index:: GNAT.Spelling_Checker (g-speche.ads)\n \n@@ -1623,8 +1691,8 @@ near misspelling of another string.\n \n .. _`GNAT.Spelling_Checker_Generic_(g-spchge.ads)`:\n \n-`GNAT.Spelling_Checker_Generic` (:file:`g-spchge.ads`)\n-======================================================\n+``GNAT.Spelling_Checker_Generic`` (:file:`g-spchge.ads`)\n+========================================================\n \n .. index:: GNAT.Spelling_Checker_Generic (g-spchge.ads)\n \n@@ -1636,8 +1704,8 @@ string.\n \n .. _`GNAT.Spitbol.Patterns_(g-spipat.ads)`:\n \n-`GNAT.Spitbol.Patterns` (:file:`g-spipat.ads`)\n-==============================================\n+``GNAT.Spitbol.Patterns`` (:file:`g-spipat.ads`)\n+================================================\n \n .. index:: GNAT.Spitbol.Patterns (g-spipat.ads)\n \n@@ -1652,8 +1720,8 @@ efficient algorithm developed by Robert Dewar for the SPITBOL system.\n \n .. _`GNAT.Spitbol_(g-spitbo.ads)`:\n \n-`GNAT.Spitbol` (:file:`g-spitbo.ads`)\n-=====================================\n+``GNAT.Spitbol`` (:file:`g-spitbo.ads`)\n+=======================================\n \n .. index:: GNAT.Spitbol (g-spitbo.ads)\n \n@@ -1667,23 +1735,23 @@ the SNOBOL4 TABLE function.\n \n .. _`GNAT.Spitbol.Table_Boolean_(g-sptabo.ads)`:\n \n-`GNAT.Spitbol.Table_Boolean` (:file:`g-sptabo.ads`)\n-===================================================\n+``GNAT.Spitbol.Table_Boolean`` (:file:`g-sptabo.ads`)\n+=====================================================\n \n .. index:: GNAT.Spitbol.Table_Boolean (g-sptabo.ads)\n \n .. index:: Sets of strings\n \n .. index:: SPITBOL Tables\n \n-A library level of instantiation of `GNAT.Spitbol.Patterns.Table`\n-for type `Standard.Boolean`, giving an implementation of sets of\n+A library level of instantiation of ``GNAT.Spitbol.Patterns.Table``\n+for type ``Standard.Boolean``, giving an implementation of sets of\n string values.\n \n .. _`GNAT.Spitbol.Table_Integer_(g-sptain.ads)`:\n \n-`GNAT.Spitbol.Table_Integer` (:file:`g-sptain.ads`)\n-===================================================\n+``GNAT.Spitbol.Table_Integer`` (:file:`g-sptain.ads`)\n+=====================================================\n \n .. index:: GNAT.Spitbol.Table_Integer (g-sptain.ads)\n \n@@ -1693,14 +1761,14 @@ string values.\n \n .. index:: SPITBOL Tables\n \n-A library level of instantiation of `GNAT.Spitbol.Patterns.Table`\n-for type `Standard.Integer`, giving an implementation of maps\n+A library level of instantiation of ``GNAT.Spitbol.Patterns.Table``\n+for type ``Standard.Integer``, giving an implementation of maps\n from string to integer values.\n \n .. _`GNAT.Spitbol.Table_VString_(g-sptavs.ads)`:\n \n-`GNAT.Spitbol.Table_VString` (:file:`g-sptavs.ads`)\n-===================================================\n+``GNAT.Spitbol.Table_VString`` (:file:`g-sptavs.ads`)\n+=====================================================\n \n .. index:: GNAT.Spitbol.Table_VString (g-sptavs.ads)\n \n@@ -1710,14 +1778,14 @@ from string to integer values.\n \n .. index:: SPITBOL Tables\n \n-A library level of instantiation of `GNAT.Spitbol.Patterns.Table` for\n+A library level of instantiation of ``GNAT.Spitbol.Patterns.Table`` for\n a variable length string type, giving an implementation of general\n maps from strings to strings.\n \n .. _`GNAT.SSE_(g-sse.ads)`:\n \n-`GNAT.SSE` (:file:`g-sse.ads`)\n-==============================\n+``GNAT.SSE`` (:file:`g-sse.ads`)\n+================================\n \n .. index:: GNAT.SSE (g-sse.ads)\n \n@@ -1728,17 +1796,17 @@ introduction to the binding contents and use.\n \n .. _`GNAT.SSE.Vector_Types_(g-ssvety.ads)`:\n \n-`GNAT.SSE.Vector_Types` (:file:`g-ssvety.ads`)\n-==============================================\n+``GNAT.SSE.Vector_Types`` (:file:`g-ssvety.ads`)\n+================================================\n \n .. index:: GNAT.SSE.Vector_Types (g-ssvety.ads)\n \n SSE vector types for use with SSE related intrinsics.\n \n .. _`GNAT.String_Hash(g-strhas.ads)`:\n \n-`GNAT.String_Hash` (:file:`g-strhas.ads`)\n-=========================================\n+``GNAT.String_Hash`` (:file:`g-strhas.ads`)\n+===========================================\n \n .. index:: GNAT.String_Hash (g-strhas.ads)\n \n@@ -1749,8 +1817,8 @@ type and the hash result type are parameters.\n \n .. _`GNAT.Strings_(g-string.ads)`:\n \n-`GNAT.Strings` (:file:`g-string.ads`)\n-=====================================\n+``GNAT.Strings`` (:file:`g-string.ads`)\n+=======================================\n \n .. index:: GNAT.Strings (g-string.ads)\n \n@@ -1759,8 +1827,8 @@ defines a string access and an array of string access types.\n \n .. _`GNAT.String_Split_(g-strspl.ads)`:\n \n-`GNAT.String_Split` (:file:`g-strspl.ads`)\n-==========================================\n+``GNAT.String_Split`` (:file:`g-strspl.ads`)\n+============================================\n \n .. index:: GNAT.String_Split (g-strspl.ads)\n \n@@ -1769,12 +1837,12 @@ defines a string access and an array of string access types.\n Useful string manipulation routines: given a set of separators, split\n a string wherever the separators appear, and provide direct access\n to the resulting slices. This package is instantiated from\n-`GNAT.Array_Split`.\n+``GNAT.Array_Split``.\n \n .. _`GNAT.Table_(g-table.ads)`:\n \n-`GNAT.Table` (:file:`g-table.ads`)\n-==================================\n+``GNAT.Table`` (:file:`g-table.ads`)\n+====================================\n \n .. index:: GNAT.Table (g-table.ads)\n \n@@ -1785,15 +1853,15 @@ to the resulting slices. This package is instantiated from\n A generic package providing a single dimension array abstraction where the\n length of the array can be dynamically modified.\n \n-This package provides a facility similar to that of `GNAT.Dynamic_Tables`,\n+This package provides a facility similar to that of ``GNAT.Dynamic_Tables``,\n except that this package declares a single instance of the table type,\n-while an instantiation of `GNAT.Dynamic_Tables` creates a type that can be\n+while an instantiation of ``GNAT.Dynamic_Tables`` creates a type that can be\n used to define dynamic instances of the table.\n \n .. _`GNAT.Task_Lock_(g-tasloc.ads)`:\n \n-`GNAT.Task_Lock` (:file:`g-tasloc.ads`)\n-=======================================\n+``GNAT.Task_Lock`` (:file:`g-tasloc.ads`)\n+=========================================\n \n .. index:: GNAT.Task_Lock (g-tasloc.ads)\n \n@@ -1809,8 +1877,8 @@ between tasks is very rarely expected.\n \n .. _`GNAT.Time_Stamp_(g-timsta.ads)`:\n \n-`GNAT.Time_Stamp` (:file:`g-timsta.ads`)\n-========================================\n+``GNAT.Time_Stamp`` (:file:`g-timsta.ads`)\n+==========================================\n \n .. index:: GNAT.Time_Stamp (g-timsta.ads)\n \n@@ -1824,8 +1892,8 @@ routine with minimal code and there are no dependencies on any other unit.\n \n .. _`GNAT.Threads_(g-thread.ads)`:\n \n-`GNAT.Threads` (:file:`g-thread.ads`)\n-=====================================\n+``GNAT.Threads`` (:file:`g-thread.ads`)\n+=======================================\n \n .. index:: GNAT.Threads (g-thread.ads)\n \n@@ -1840,8 +1908,8 @@ environment which then accesses Ada code.\n \n .. _`GNAT.Traceback_(g-traceb.ads)`:\n \n-`GNAT.Traceback` (:file:`g-traceb.ads`)\n-=======================================\n+``GNAT.Traceback`` (:file:`g-traceb.ads`)\n+=========================================\n \n .. index:: GNAT.Traceback (g-traceb.ads)\n \n@@ -1852,26 +1920,26 @@ in various debugging situations.\n \n .. _`GNAT.Traceback.Symbolic_(g-trasym.ads)`:\n \n-`GNAT.Traceback.Symbolic` (:file:`g-trasym.ads`)\n-================================================\n+``GNAT.Traceback.Symbolic`` (:file:`g-trasym.ads`)\n+==================================================\n \n .. index:: GNAT.Traceback.Symbolic (g-trasym.ads)\n \n .. index:: Trace back facilities\n \n .. _`GNAT.UTF_32_(g-table.ads)`:\n \n-`GNAT.UTF_32` (:file:`g-table.ads`)\n-===================================\n+``GNAT.UTF_32`` (:file:`g-table.ads`)\n+=====================================\n \n .. index:: GNAT.UTF_32 (g-table.ads)\n \n .. index:: Wide character codes\n \n This is a package intended to be used in conjunction with the\n-`Wide_Character` type in Ada 95 and the\n-`Wide_Wide_Character` type in Ada 2005 (available\n-in `GNAT` in Ada 2005 mode). This package contains\n+``Wide_Character`` type in Ada 95 and the\n+``Wide_Wide_Character`` type in Ada 2005 (available\n+in ``GNAT`` in Ada 2005 mode). This package contains\n Unicode categorization routines, as well as lexical\n categorization routines corresponding to the Ada 2005\n lexical rules for identifiers and strings, and also a\n@@ -1880,8 +1948,8 @@ the Ada 2005 rules for identifier equivalence.\n \n .. _`GNAT.Wide_Spelling_Checker_(g-u3spch.ads)`:\n \n-`GNAT.Wide_Spelling_Checker` (:file:`g-u3spch.ads`)\n-===================================================\n+``GNAT.Wide_Spelling_Checker`` (:file:`g-u3spch.ads`)\n+=====================================================\n \n .. index:: GNAT.Wide_Spelling_Checker (g-u3spch.ads)\n \n@@ -1893,8 +1961,8 @@ using the UTF_32_String type defined in System.Wch_Cnv.\n \n .. _`GNAT.Wide_Spelling_Checker_(g-wispch.ads)`:\n \n-`GNAT.Wide_Spelling_Checker` (:file:`g-wispch.ads`)\n-===================================================\n+``GNAT.Wide_Spelling_Checker`` (:file:`g-wispch.ads`)\n+=====================================================\n \n .. index:: GNAT.Wide_Spelling_Checker (g-wispch.ads)\n \n@@ -1905,8 +1973,8 @@ near misspelling of another wide string.\n \n .. _`GNAT.Wide_String_Split_(g-wistsp.ads)`:\n \n-`GNAT.Wide_String_Split` (:file:`g-wistsp.ads`)\n-===============================================\n+``GNAT.Wide_String_Split`` (:file:`g-wistsp.ads`)\n+=================================================\n \n .. index:: GNAT.Wide_String_Split (g-wistsp.ads)\n \n@@ -1915,12 +1983,12 @@ near misspelling of another wide string.\n Useful wide string manipulation routines: given a set of separators, split\n a wide string wherever the separators appear, and provide direct access\n to the resulting slices. This package is instantiated from\n-`GNAT.Array_Split`.\n+``GNAT.Array_Split``.\n \n .. _`GNAT.Wide_Wide_Spelling_Checker_(g-zspche.ads)`:\n \n-`GNAT.Wide_Wide_Spelling_Checker` (:file:`g-zspche.ads`)\n-========================================================\n+``GNAT.Wide_Wide_Spelling_Checker`` (:file:`g-zspche.ads`)\n+==========================================================\n \n .. index:: GNAT.Wide_Wide_Spelling_Checker (g-zspche.ads)\n \n@@ -1931,8 +1999,8 @@ near misspelling of another wide wide string.\n \n .. _`GNAT.Wide_Wide_String_Split_(g-zistsp.ads)`:\n \n-`GNAT.Wide_Wide_String_Split` (:file:`g-zistsp.ads`)\n-====================================================\n+``GNAT.Wide_Wide_String_Split`` (:file:`g-zistsp.ads`)\n+======================================================\n \n .. index:: GNAT.Wide_Wide_String_Split (g-zistsp.ads)\n \n@@ -1941,12 +2009,12 @@ near misspelling of another wide wide string.\n Useful wide wide string manipulation routines: given a set of separators, split\n a wide wide string wherever the separators appear, and provide direct access\n to the resulting slices. This package is instantiated from\n-`GNAT.Array_Split`.\n+``GNAT.Array_Split``.\n \n .. _`Interfaces.C.Extensions_(i-cexten.ads)`:\n \n-`Interfaces.C.Extensions` (:file:`i-cexten.ads`)\n-================================================\n+``Interfaces.C.Extensions`` (:file:`i-cexten.ads`)\n+==================================================\n \n .. index:: Interfaces.C.Extensions (i-cexten.ads)\n \n@@ -1956,8 +2024,8 @@ to C libraries.\n \n .. _`Interfaces.C.Streams_(i-cstrea.ads)`:\n \n-`Interfaces.C.Streams` (:file:`i-cstrea.ads`)\n-=============================================\n+``Interfaces.C.Streams`` (:file:`i-cstrea.ads`)\n+===============================================\n \n .. index:: Interfaces.C.Streams (i-cstrea.ads)\n \n@@ -1968,8 +2036,8 @@ on C streams.\n \n .. _`Interfaces.Packed_Decimal_(i-pacdec.ads)`:\n \n-`Interfaces.Packed_Decimal` (:file:`i-pacdec.ads`)\n-==================================================\n+``Interfaces.Packed_Decimal`` (:file:`i-pacdec.ads`)\n+====================================================\n \n .. index:: Interfaces.Packed_Decimal (i-pacdec.ads)\n \n@@ -1983,8 +2051,8 @@ mainframes.\n \n .. _`Interfaces.VxWorks_(i-vxwork.ads)`:\n \n-`Interfaces.VxWorks` (:file:`i-vxwork.ads`)\n-===========================================\n+``Interfaces.VxWorks`` (:file:`i-vxwork.ads`)\n+=============================================\n \n .. index:: Interfaces.VxWorks (i-vxwork.ads)\n \n@@ -1998,8 +2066,8 @@ VxWorks hardware interrupt facilities.\n \n .. _`Interfaces.VxWorks.Int_Connection_(i-vxinco.ads)`:\n \n-`Interfaces.VxWorks.Int_Connection` (:file:`i-vxinco.ads`)\n-==========================================================\n+``Interfaces.VxWorks.Int_Connection`` (:file:`i-vxinco.ads`)\n+============================================================\n \n .. index:: Interfaces.VxWorks.Int_Connection (i-vxinco.ads)\n \n@@ -2013,8 +2081,8 @@ handlers.\n \n .. _`Interfaces.VxWorks.IO_(i-vxwoio.ads)`:\n \n-`Interfaces.VxWorks.IO` (:file:`i-vxwoio.ads`)\n-==============================================\n+``Interfaces.VxWorks.IO`` (:file:`i-vxwoio.ads`)\n+================================================\n \n .. index:: Interfaces.VxWorks.IO (i-vxwoio.ads)\n \n@@ -2033,8 +2101,8 @@ to enable the use of Get_Immediate under VxWorks.\n \n .. _`System.Address_Image_(s-addima.ads)`:\n \n-`System.Address_Image` (:file:`s-addima.ads`)\n-=============================================\n+``System.Address_Image`` (:file:`s-addima.ads`)\n+===============================================\n \n .. index:: System.Address_Image (s-addima.ads)\n \n@@ -2048,8 +2116,8 @@ string which identifies an address.\n \n .. _`System.Assertions_(s-assert.ads)`:\n \n-`System.Assertions` (:file:`s-assert.ads`)\n-==========================================\n+``System.Assertions`` (:file:`s-assert.ads`)\n+============================================\n \n .. index:: System.Assertions (s-assert.ads)\n \n@@ -2063,8 +2131,8 @@ is used internally to raise this assertion.\n \n .. _`System.Atomic_Counters_(s-atocou.ads)`:\n \n-`System.Atomic_Counters` (:file:`s-atocou.ads`)\n-===============================================\n+``System.Atomic_Counters`` (:file:`s-atocou.ads`)\n+=================================================\n \n .. index:: System.Atomic_Counters (s-atocou.ads)\n \n@@ -2077,8 +2145,8 @@ x86, and x86_64 platforms.\n \n .. _`System.Memory_(s-memory.ads)`:\n \n-`System.Memory` (:file:`s-memory.ads`)\n-======================================\n+``System.Memory`` (:file:`s-memory.ads`)\n+========================================\n \n .. index:: System.Memory (s-memory.ads)\n \n@@ -2091,12 +2159,12 @@ It also provides a reallocation interface analogous to the C routine\n realloc. The body of this unit may be modified to provide alternative\n allocation mechanisms for the default pool, and in addition, direct\n calls to this unit may be made for low level allocation uses (for\n-example see the body of `GNAT.Tables`).\n+example see the body of ``GNAT.Tables``).\n \n .. _`System.Multiprocessors_(s-multip.ads)`:\n \n-`System.Multiprocessors` (:file:`s-multip.ads`)\n-===============================================\n+``System.Multiprocessors`` (:file:`s-multip.ads`)\n+=================================================\n \n .. index:: System.Multiprocessors (s-multip.ads)\n \n@@ -2108,8 +2176,8 @@ technically an implementation-defined addition).\n \n .. _`System.Multiprocessors.Dispatching_Domains_(s-mudido.ads)`:\n \n-`System.Multiprocessors.Dispatching_Domains` (:file:`s-mudido.ads`)\n-===================================================================\n+``System.Multiprocessors.Dispatching_Domains`` (:file:`s-mudido.ads`)\n+=====================================================================\n \n .. index:: System.Multiprocessors.Dispatching_Domains (s-mudido.ads)\n \n@@ -2121,21 +2189,21 @@ technically an implementation-defined addition).\n \n .. _`System.Partition_Interface_(s-parint.ads)`:\n \n-`System.Partition_Interface` (:file:`s-parint.ads`)\n-===================================================\n+``System.Partition_Interface`` (:file:`s-parint.ads`)\n+=====================================================\n \n .. index:: System.Partition_Interface (s-parint.ads)\n \n .. index:: Partition interfacing functions\n \n This package provides facilities for partition interfacing.  It\n is used primarily in a distribution context when using Annex E\n-with `GLADE`.\n+with ``GLADE``.\n \n .. _`System.Pool_Global_(s-pooglo.ads)`:\n \n-`System.Pool_Global` (:file:`s-pooglo.ads`)\n-===========================================\n+``System.Pool_Global`` (:file:`s-pooglo.ads`)\n+=============================================\n \n .. index:: System.Pool_Global (s-pooglo.ads)\n \n@@ -2150,8 +2218,8 @@ do any automatic reclamation.\n \n .. _`System.Pool_Local_(s-pooloc.ads)`:\n \n-`System.Pool_Local` (:file:`s-pooloc.ads`)\n-==========================================\n+``System.Pool_Local`` (:file:`s-pooloc.ads`)\n+============================================\n \n .. index:: System.Pool_Local (s-pooloc.ads)\n \n@@ -2166,8 +2234,8 @@ be freed automatically when the pool is finalized.\n \n .. _`System.Restrictions_(s-restri.ads)`:\n \n-`System.Restrictions` (:file:`s-restri.ads`)\n-============================================\n+``System.Restrictions`` (:file:`s-restri.ads`)\n+==============================================\n \n .. index:: System.Restrictions (s-restri.ads)\n \n@@ -2182,8 +2250,8 @@ are violated by one or more packages in the partition.\n \n .. _`System.Rident_(s-rident.ads)`:\n \n-`System.Rident` (:file:`s-rident.ads`)\n-======================================\n+``System.Rident`` (:file:`s-rident.ads`)\n+========================================\n \n .. index:: System.Rident (s-rident.ads)\n \n@@ -2192,14 +2260,14 @@ are violated by one or more packages in the partition.\n This package provides definitions of the restrictions\n identifiers supported by GNAT, and also the format of\n the restrictions provided in package System.Restrictions.\n-It is not normally necessary to `with` this generic package\n+It is not normally necessary to ``with`` this generic package\n since the necessary instantiation is included in\n package System.Restrictions.\n \n .. _`System.Strings.Stream_Ops_(s-ststop.ads)`:\n \n-`System.Strings.Stream_Ops` (:file:`s-ststop.ads`)\n-==================================================\n+``System.Strings.Stream_Ops`` (:file:`s-ststop.ads`)\n+====================================================\n \n .. index:: System.Strings.Stream_Ops (s-ststop.ads)\n \n@@ -2214,8 +2282,8 @@ package can be used directly by application programs.\n \n .. _`System.Unsigned_Types_(s-unstyp.ads)`:\n \n-`System.Unsigned_Types` (:file:`s-unstyp.ads`)\n-==============================================\n+``System.Unsigned_Types`` (:file:`s-unstyp.ads`)\n+================================================\n \n .. index:: System.Unsigned_Types (s-unstyp.ads)\n \n@@ -2227,8 +2295,8 @@ used by the compiler in connection with packed array types.\n \n .. _`System.Wch_Cnv_(s-wchcnv.ads)`:\n \n-`System.Wch_Cnv` (:file:`s-wchcnv.ads`)\n-=======================================\n+``System.Wch_Cnv`` (:file:`s-wchcnv.ads`)\n+=========================================\n \n .. index:: System.Wch_Cnv (s-wchcnv.ads)\n \n@@ -2240,18 +2308,18 @@ used by the compiler in connection with packed array types.\n \n This package provides routines for converting between\n wide and wide wide characters and a representation as a value of type\n-`Standard.String`, using a specified wide character\n+``Standard.String``, using a specified wide character\n encoding method.  It uses definitions in\n-package `System.Wch_Con`.\n+package ``System.Wch_Con``.\n \n .. _`System.Wch_Con_(s-wchcon.ads)`:\n \n-`System.Wch_Con` (:file:`s-wchcon.ads`)\n-=======================================\n+``System.Wch_Con`` (:file:`s-wchcon.ads`)\n+=========================================\n \n .. index:: System.Wch_Con (s-wchcon.ads)\n \n This package provides definitions and descriptions of\n the various methods used for encoding wide characters\n in ordinary strings.  These definitions are used by\n-the package `System.Wch_Cnv`.\n+the package ``System.Wch_Cnv``."}, {"sha": "653ace6a1343a27f162efaf560800359e0dc5bcd", "filename": "gcc/ada/doc/gnat_rm/the_implementation_of_standard_i_o.rst", "status": "modified", "additions": 101, "deletions": 101, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_implementation_of_standard_i_o.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_implementation_of_standard_i_o.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_implementation_of_standard_i_o.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -68,9 +68,9 @@ are implemented using the C\n library streams facility; where\n \n *\n-  All files are opened using `fopen`.\n+  All files are opened using ``fopen``.\n *\n-  All input/output operations use `fread`/`fwrite`.\n+  All input/output operations use ``fread``/`fwrite`.\n \n There is no internal buffering of any kind at the Ada library level. The only\n buffering is that provided at the system level in the implementation of the\n@@ -127,8 +127,8 @@ The records of a Direct_IO file are simply written to the file in index\n sequence, with the first record starting at offset zero, and subsequent\n records following.  There is no control information of any kind.  For\n example, if 32-bit integers are being written, each record takes\n-4-bytes, so the record at index `K` starts at offset\n-(`K`-1)*4.\n+4-bytes, so the record at index ``K`` starts at offset\n+(``K``-1)*4.\n \n There is no limit on the size of Direct_IO files, they are expanded as\n necessary to accommodate whatever records are written to the file.\n@@ -148,17 +148,17 @@ checking is performed on input.\n \n For the indefinite type case, the elements written consist of two\n parts.  First is the size of the data item, written as the memory image\n-of a `Interfaces.C.size_t` value, followed by the memory image of\n+of a ``Interfaces.C.size_t`` value, followed by the memory image of\n the data value.  The resulting file can only be read using the same\n (unconstrained) type.  Normal assignment checks are performed on these\n-read operations, and if these checks fail, `Data_Error` is\n+read operations, and if these checks fail, ``Data_Error`` is\n raised.  In particular, in the array case, the lengths must match, and in\n the variant record case, if the variable for a particular read operation\n is constrained, the discriminants must match.\n \n Note that it is not possible to use Sequential_IO to write variable\n length array items, and then read the data back into different length\n-arrays.  For example, the following will raise `Data_Error`:\n+arrays.  For example, the following will raise ``Data_Error``:\n \n \n .. code-block:: ada\n@@ -175,9 +175,9 @@ arrays.  For example, the following will raise `Data_Error`:\n \n \n \n-On some Ada implementations, this will print `hell`, but the program is\n+On some Ada implementations, this will print ``hell``, but the program is\n clearly incorrect, since there is only one element in the file, and that\n-element is the string `hello!`.\n+element is the string ``hello!``.\n \n In Ada 95 and Ada 2005, this kind of behavior can be legitimately achieved\n using Stream_IO, and this is the preferred mechanism.  In particular, the\n@@ -202,23 +202,23 @@ A canonical Text_IO file is defined as one in which the following\n conditions are met:\n \n *\n-  The character `LF` is used only as a line mark, i.e., to mark the end\n+  The character ``LF`` is used only as a line mark, i.e., to mark the end\n   of the line.\n \n *\n-  The character `FF` is used only as a page mark, i.e., to mark the\n+  The character ``FF`` is used only as a page mark, i.e., to mark the\n   end of a page and consequently can appear only immediately following a\n-  `LF` (line mark) character.\n+  ``LF`` (line mark) character.\n \n *\n-  The file ends with either `LF` (line mark) or `LF`-`FF`\n+  The file ends with either ``LF`` (line mark) or ``LF``-`FF`\n   (line mark, page mark).  In the former case, the page mark is implicitly\n   assumed to be present.\n \n A file written using Text_IO will be in canonical form provided that no\n-explicit `LF` or `FF` characters are written using `Put`\n-or `Put_Line`.  There will be no `FF` character at the end of\n-the file unless an explicit `New_Page` operation was performed\n+explicit ``LF`` or ``FF`` characters are written using ``Put``\n+or ``Put_Line``.  There will be no ``FF`` character at the end of\n+the file unless an explicit ``New_Page`` operation was performed\n before closing the file.\n \n A canonical Text_IO file that is a regular file (i.e., not a device or a\n@@ -230,45 +230,45 @@ A text file that does not meet the requirements for a canonical Text_IO\n file has one of the following:\n \n *\n-  The file contains `FF` characters not immediately following a\n-  `LF` character.\n+  The file contains ``FF`` characters not immediately following a\n+  ``LF`` character.\n \n *\n-  The file contains `LF` or `FF` characters written by\n-  `Put` or `Put_Line`, which are not logically considered to be\n+  The file contains ``LF`` or ``FF`` characters written by\n+  ``Put`` or ``Put_Line``, which are not logically considered to be\n   line marks or page marks.\n \n *\n-  The file ends in a character other than `LF` or `FF`,\n+  The file ends in a character other than ``LF`` or ``FF``,\n   i.e., there is no explicit line mark or page mark at the end of the file.\n \n Text_IO can be used to read such non-standard text files but subprograms\n to do with line or page numbers do not have defined meanings.  In\n-particular, a `FF` character that does not follow a `LF`\n+particular, a ``FF`` character that does not follow a ``LF``\n character may or may not be treated as a page mark from the point of\n-view of page and line numbering.  Every `LF` character is considered\n-to end a line, and there is an implied `LF` character at the end of\n+view of page and line numbering.  Every ``LF`` character is considered\n+to end a line, and there is an implied ``LF`` character at the end of\n the file.\n \n .. _Stream_Pointer_Positioning:\n \n Stream Pointer Positioning\n --------------------------\n \n-`Ada.Text_IO` has a definition of current position for a file that\n+``Ada.Text_IO`` has a definition of current position for a file that\n is being read.  No internal buffering occurs in Text_IO, and usually the\n physical position in the stream used to implement the file corresponds\n to this logical position defined by Text_IO.  There are two exceptions:\n \n *\n-  After a call to `End_Of_Page` that returns `True`, the stream\n-  is positioned past the `LF` (line mark) that precedes the page\n+  After a call to ``End_Of_Page`` that returns ``True``, the stream\n+  is positioned past the ``LF`` (line mark) that precedes the page\n   mark.  Text_IO maintains an internal flag so that subsequent read\n   operations properly handle the logical position which is unchanged by\n-  the `End_Of_Page` call.\n+  the ``End_Of_Page`` call.\n \n *\n-  After a call to `End_Of_File` that returns `True`, if the\n+  After a call to ``End_Of_File`` that returns ``True``, if the\n   Text_IO file was positioned before the line mark at the end of file\n   before the call, then the logical position is unchanged, but the stream\n   is physically positioned right at the end of file (past the line mark,\n@@ -294,12 +294,12 @@ for reading, the behavior of Text_IO is modified to avoid undesirable\n look-ahead as follows:\n \n An input file that is not a regular file is considered to have no page\n-marks.  Any `Ascii.FF` characters (the character normally used for a\n+marks.  Any ``Ascii.FF`` characters (the character normally used for a\n page mark) appearing in the file are considered to be data\n characters.  In particular:\n \n *\n-  `Get_Line` and `Skip_Line` do not test for a page mark\n+  ``Get_Line`` and ``Skip_Line`` do not test for a page mark\n   following a line mark.  If a page mark appears, it will be treated as a\n   data character.\n \n@@ -308,24 +308,24 @@ characters.  In particular:\n   entered from the pipe to complete one of these operations.\n \n *\n-  `End_Of_Page` always returns `False`\n+  ``End_Of_Page`` always returns ``False``\n \n *\n-  `End_Of_File` will return `False` if there is a page mark at\n+  ``End_Of_File`` will return ``False`` if there is a page mark at\n   the end of the file.\n \n Output to non-regular files is the same as for regular files.  Page marks\n-may be written to non-regular files using `New_Page`, but as noted\n+may be written to non-regular files using ``New_Page``, but as noted\n above they will not be treated as page marks on input if the output is\n piped to another Ada program.\n \n Another important discrepancy when reading non-regular files is that the end\n of file indication is not 'sticky'.  If an end of file is entered, e.g., by\n pressing the :kbd:`EOT` key,\n then end of file\n-is signaled once (i.e., the test `End_Of_File`\n-will yield `True`, or a read will\n-raise `End_Error`), but then reading can resume\n+is signaled once (i.e., the test ``End_Of_File``\n+will yield ``True``, or a read will\n+raise ``End_Error``), but then reading can resume\n to read data past that end of\n file indication, until another end of file indication is entered.\n \n@@ -354,14 +354,14 @@ Treating Text_IO Files as Streams\n \n .. index:: Stream files\n \n-The package `Text_IO.Streams` allows a Text_IO file to be treated\n-as a stream.  Data written to a Text_IO file in this stream mode is\n-binary data.  If this binary data contains bytes 16#0A# (`LF`) or\n-16#0C# (`FF`), the resulting file may have non-standard\n+The package ``Text_IO.Streams`` allows a ``Text_IO`` file to be treated\n+as a stream.  Data written to a ``Text_IO`` file in this stream mode is\n+binary data.  If this binary data contains bytes 16#0A# (``LF``) or\n+16#0C# (``FF``), the resulting file may have non-standard\n format.  Similarly if read operations are used to read from a Text_IO\n-file treated as a stream, then `LF` and `FF` characters may be\n+file treated as a stream, then ``LF`` and ``FF`` characters may be\n skipped and the effect is similar to that described above for\n-`Get_Immediate`.\n+``Get_Immediate``.\n \n .. _Text_IO_Extensions:\n \n@@ -371,7 +371,7 @@ Text_IO Extensions\n .. index:: Text_IO extensions\n \n A package GNAT.IO_Aux in the GNAT library provides some useful extensions\n-to the standard `Text_IO` package:\n+to the standard ``Text_IO`` package:\n \n * function File_Exists (Name : String) return Boolean;\n   Determines if a file of the given name exists.\n@@ -394,8 +394,8 @@ Text_IO Facilities for Unbounded Strings\n \n .. index:: Unbounded_String, Text_IO operations\n \n-The package `Ada.Strings.Unbounded.Text_IO`\n-in library files `a-suteio.ads/adb` contains some GNAT-specific\n+The package ``Ada.Strings.Unbounded.Text_IO``\n+in library files :file:`a-suteio.ads/adb` contains some GNAT-specific\n subprograms useful for Text_IO operations on unbounded strings:\n \n \n@@ -406,32 +406,32 @@ subprograms useful for Text_IO operations on unbounded strings:\n * procedure Put (File : File_Type; U : Unbounded_String);\n   Writes the value of the given unbounded string to the specified file\n   Similar to the effect of\n-  `Put (To_String (U))` except that an extra copy is avoided.\n+  ``Put (To_String (U))`` except that an extra copy is avoided.\n \n * procedure Put_Line (File : File_Type; U : Unbounded_String);\n   Writes the value of the given unbounded string to the specified file,\n-  followed by a `New_Line`.\n-  Similar to the effect of `Put_Line (To_String (U))` except\n+  followed by a ``New_Line``.\n+  Similar to the effect of ``Put_Line (To_String (U))`` except\n   that an extra copy is avoided.\n \n-In the above procedures, `File` is of type `Ada.Text_IO.File_Type`\n+In the above procedures, ``File`` is of type ``Ada.Text_IO.File_Type``\n and is optional.  If the parameter is omitted, then the standard input or\n output file is referenced as appropriate.\n \n-The package `Ada.Strings.Wide_Unbounded.Wide_Text_IO` in library\n+The package ``Ada.Strings.Wide_Unbounded.Wide_Text_IO`` in library\n files :file:`a-swuwti.ads` and :file:`a-swuwti.adb` provides similar extended\n-`Wide_Text_IO` functionality for unbounded wide strings.\n+``Wide_Text_IO`` functionality for unbounded wide strings.\n \n-The package `Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Text_IO` in library\n+The package ``Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Text_IO`` in library\n files :file:`a-szuzti.ads` and :file:`a-szuzti.adb` provides similar extended\n-`Wide_Wide_Text_IO` functionality for unbounded wide wide strings.\n+``Wide_Wide_Text_IO`` functionality for unbounded wide wide strings.\n \n .. _Wide_Text_IO:\n \n Wide_Text_IO\n ============\n \n-`Wide_Text_IO` is similar in most respects to Text_IO, except that\n+``Wide_Text_IO`` is similar in most respects to Text_IO, except that\n both input and output files may contain special sequences that represent\n wide character values.  The encoding scheme for a given file may be\n specified using a FORM parameter:\n@@ -443,7 +443,7 @@ specified using a FORM parameter:\n \n \n as part of the FORM string (WCEM = wide character encoding method),\n-where `x` is one of the following characters\n+where ``x`` is one of the following characters\n \n ========== ====================\n Character  Encoding\n@@ -480,11 +480,11 @@ being brackets encoding if no coding method was specified with -gnatW).\n \n ..\n \n-  where `a`, `b`, `c`, `d` are the four hexadecimal\n+  where ``a``, ``b``, ``c``, ``d`` are the four hexadecimal\n   characters (using upper case letters) of the wide character code.  For\n   example, ESC A345 is used to represent the wide character with code\n   16#A345#.  This scheme is compatible with use of the full\n-  `Wide_Character` set.\n+  ``Wide_Character`` set.\n \n \n *Upper Half Coding*\n@@ -527,7 +527,7 @@ being brackets encoding if no coding method was specified with -gnatW).\n \n ..\n \n-  where the `xxx` bits correspond to the left-padded bits of the\n+  where the ``xxx`` bits correspond to the left-padded bits of the\n   16-bit character value.  Note that all lower half ASCII characters\n   are represented as ASCII bytes and all upper half characters and\n   other wide characters are represented as sequences of upper-half\n@@ -548,14 +548,14 @@ being brackets encoding if no coding method was specified with -gnatW).\n \n ..\n \n-  where `a`, `b`, `c`, `d` are the four hexadecimal\n+  where ``a``, ``b``, ``c``, ``d`` are the four hexadecimal\n   characters (using uppercase letters) of the wide character code.  For\n-  example, `[\"A345\"]` is used to represent the wide character with code\n-  `16#A345#`.\n+  example, ``[\"A345\"]`` is used to represent the wide character with code\n+  ``16#A345#``.\n   This scheme is compatible with use of the full Wide_Character set.\n   On input, brackets coding can also be used for upper half characters,\n-  e.g., `[\"C1\"]` for lower case a.  However, on output, brackets notation\n-  is only used for wide characters with a code greater than `16#FF#`.\n+  e.g., ``[\"C1\"]`` for lower case a.  However, on output, brackets notation\n+  is only used for wide characters with a code greater than ``16#FF#``.\n \n   Note that brackets coding is not normally used in the context of\n   Wide_Text_IO or Wide_Wide_Text_IO, since it is really just designed as\n@@ -612,11 +612,11 @@ input also causes Constraint_Error to be raised.\n Stream Pointer Positioning\n --------------------------\n \n-`Ada.Wide_Text_IO` is similar to `Ada.Text_IO` in its handling\n+``Ada.Wide_Text_IO`` is similar to ``Ada.Text_IO`` in its handling\n of stream pointer positioning (:ref:`Text_IO`).  There is one additional\n case:\n \n-If `Ada.Wide_Text_IO.Look_Ahead` reads a character outside the\n+If ``Ada.Wide_Text_IO.Look_Ahead`` reads a character outside the\n normal lower ASCII set (i.e., a character in the range:\n \n \n@@ -626,11 +626,11 @@ normal lower ASCII set (i.e., a character in the range:\n \n \n then although the logical position of the file pointer is unchanged by\n-the `Look_Ahead` call, the stream is physically positioned past the\n+the ``Look_Ahead`` call, the stream is physically positioned past the\n wide character sequence.  Again this is to avoid the need for buffering\n-or backup, and all `Wide_Text_IO` routines check the internal\n+or backup, and all ``Wide_Text_IO`` routines check the internal\n indication that this situation has occurred so that this is not visible\n-to a normal program using `Wide_Text_IO`.  However, this discrepancy\n+to a normal program using ``Wide_Text_IO``.  However, this discrepancy\n can be observed if the wide text file shares a stream with another file.\n \n .. _Reading_and_Writing_Non-Regular_Files_1:\n@@ -640,16 +640,16 @@ Reading and Writing Non-Regular Files\n \n As in the case of Text_IO, when a non-regular file is read, it is\n assumed that the file contains no page marks (any form characters are\n-treated as data characters), and `End_Of_Page` always returns\n-`False`.  Similarly, the end of file indication is not sticky, so\n+treated as data characters), and ``End_Of_Page`` always returns\n+``False``.  Similarly, the end of file indication is not sticky, so\n it is possible to read beyond an end of file.\n \n .. _Wide_Wide_Text_IO:\n \n Wide_Wide_Text_IO\n =================\n \n-`Wide_Wide_Text_IO` is similar in most respects to Text_IO, except that\n+``Wide_Wide_Text_IO`` is similar in most respects to Text_IO, except that\n both input and output files may contain special sequences that represent\n wide wide character values.  The encoding scheme for a given file may be\n specified using a FORM parameter:\n@@ -661,7 +661,7 @@ specified using a FORM parameter:\n \n \n as part of the FORM string (WCEM = wide character encoding method),\n-where `x` is one of the following characters\n+where ``x`` is one of the following characters\n \n ========== ====================\n Character  Encoding\n@@ -704,7 +704,7 @@ being brackets encoding if no coding method was specified with -gnatW).\n \n ..\n \n-  where the `xxx` bits correspond to the left-padded bits of the\n+  where the ``xxx`` bits correspond to the left-padded bits of the\n   21-bit character value.  Note that all lower half ASCII characters\n   are represented as ASCII bytes and all upper half characters and\n   other wide characters are represented as sequences of upper-half\n@@ -731,16 +731,16 @@ being brackets encoding if no coding method was specified with -gnatW).\n \n ..\n \n-  where `a`, `b`, `c`, `d`, `e`, and `f`\n+  where ``a``, ``b``, ``c``, ``d``, ``e``, and ``f``\n   are the four or six hexadecimal\n   characters (using uppercase letters) of the wide wide character code.  For\n-  example, `[\"01A345\"]` is used to represent the wide wide character\n-  with code `16#01A345#`.\n+  example, ``[\"01A345\"]`` is used to represent the wide wide character\n+  with code ``16#01A345#``.\n \n   This scheme is compatible with use of the full Wide_Wide_Character set.\n   On input, brackets coding can also be used for upper half characters,\n-  e.g., `[\"C1\"]` for lower case a.  However, on output, brackets notation\n-  is only used for wide characters with a code greater than `16#FF#`.\n+  e.g., ``[\"C1\"]`` for lower case a.  However, on output, brackets notation\n+  is only used for wide characters with a code greater than ``16#FF#``.\n \n \n If is also possible to use the other Wide_Character encoding methods,\n@@ -756,11 +756,11 @@ input also causes Constraint_Error to be raised.\n Stream Pointer Positioning\n --------------------------\n \n-`Ada.Wide_Wide_Text_IO` is similar to `Ada.Text_IO` in its handling\n+``Ada.Wide_Wide_Text_IO`` is similar to ``Ada.Text_IO`` in its handling\n of stream pointer positioning (:ref:`Text_IO`).  There is one additional\n case:\n \n-If `Ada.Wide_Wide_Text_IO.Look_Ahead` reads a character outside the\n+If ``Ada.Wide_Wide_Text_IO.Look_Ahead`` reads a character outside the\n normal lower ASCII set (i.e., a character in the range:\n \n \n@@ -770,11 +770,11 @@ normal lower ASCII set (i.e., a character in the range:\n \n \n then although the logical position of the file pointer is unchanged by\n-the `Look_Ahead` call, the stream is physically positioned past the\n+the ``Look_Ahead`` call, the stream is physically positioned past the\n wide character sequence.  Again this is to avoid the need for buffering\n-or backup, and all `Wide_Wide_Text_IO` routines check the internal\n+or backup, and all ``Wide_Wide_Text_IO`` routines check the internal\n indication that this situation has occurred so that this is not visible\n-to a normal program using `Wide_Wide_Text_IO`.  However, this discrepancy\n+to a normal program using ``Wide_Wide_Text_IO``.  However, this discrepancy\n can be observed if the wide text file shares a stream with another file.\n \n .. _Reading_and_Writing_Non-Regular_Files_2:\n@@ -784,8 +784,8 @@ Reading and Writing Non-Regular Files\n \n As in the case of Text_IO, when a non-regular file is read, it is\n assumed that the file contains no page marks (any form characters are\n-treated as data characters), and `End_Of_Page` always returns\n-`False`.  Similarly, the end of file indication is not sticky, so\n+treated as data characters), and ``End_Of_Page`` always returns\n+``False``.  Similarly, the end of file indication is not sticky, so\n it is possible to read beyond an end of file.\n \n .. _Stream_IO:\n@@ -795,11 +795,11 @@ Stream_IO\n \n A stream file is a sequence of bytes, where individual elements are\n written to the file as described in the Ada Reference Manual.  The type\n-`Stream_Element` is simply a byte.  There are two ways to read or\n+``Stream_Element`` is simply a byte.  There are two ways to read or\n write a stream file.\n \n *\n-  The operations `Read` and `Write` directly read or write a\n+  The operations ``Read`` and ``Write`` directly read or write a\n   sequence of stream elements with no control information.\n \n *\n@@ -854,7 +854,7 @@ dependence, GNAT handles file sharing as follows:\n *\n   In the absence of a ``shared=xxx`` form parameter, an attempt\n   to open two or more files with the same full name is considered an error\n-  and is not supported.  The exception `Use_Error` will be\n+  and is not supported.  The exception ``Use_Error`` will be\n   raised.  Note that a file that is not explicitly closed by the program\n   remains open until the program terminates.\n \n@@ -873,12 +873,12 @@ dependence, GNAT handles file sharing as follows:\n \n When a program that opens multiple files with the same name is ported\n from another Ada compiler to GNAT, the effect will be that\n-`Use_Error` is raised.\n+``Use_Error`` is raised.\n \n The documentation of the original compiler and the documentation of the\n program should then be examined to determine if file sharing was\n-expected, and ``shared=xxx`` parameters added to `Open`\n-and `Create` calls as required.\n+expected, and ``shared=xxx`` parameters added to ``Open``\n+and ``Create`` calls as required.\n \n When a program is ported from GNAT to some other Ada compiler, no\n special attention is required unless the ``shared=xxx`` form\n@@ -961,11 +961,11 @@ This encoding is only supported on the Windows platform.\n Open Modes\n ==========\n \n-`Open` and `Create` calls result in a call to `fopen`\n+``Open`` and ``Create`` calls result in a call to ``fopen``\n using the mode shown in the following table:\n \n +----------------------------+---------------+------------------+\n-|           `Open` and `Create` Call Modes                      |\n+|           ``Open`` and ``Create`` Call Modes                  |\n +----------------------------+---------------+------------------+\n |                            |   **OPEN**    |     **CREATE**   |\n +============================+===============+==================+\n@@ -989,7 +989,7 @@ DOS-like systems, and is not relevant to other systems.\n \n A special case occurs with Stream_IO.  As shown in the above table, the\n file is initially opened in ``r`` or ``w`` mode for the\n-`In_File` and `Out_File` cases.  If a `Set_Mode` operation\n+``In_File`` and ``Out_File`` cases.  If a ``Set_Mode`` operation\n subsequently requires switching from reading to writing or vice-versa,\n then the file is reopened in ``r+`` mode to permit the required operation.\n \n@@ -998,7 +998,7 @@ then the file is reopened in ``r+`` mode to permit the required operation.\n Operations on C Streams\n =======================\n \n-The package `Interfaces.C_Streams` provides an Ada program with direct\n+The package ``Interfaces.C_Streams`` provides an Ada program with direct\n access to the C library functions for operations on C streams:\n \n \n@@ -1233,19 +1233,19 @@ operations.\n    end Ada.Stream_IO.C_Streams;\n \n \n-In each of these six packages, the `C_Stream` function obtains the\n-`FILE` pointer from a currently opened Ada file.  It is then\n-possible to use the `Interfaces.C_Streams` package to operate on\n+In each of these six packages, the ``C_Stream`` function obtains the\n+``FILE`` pointer from a currently opened Ada file.  It is then\n+possible to use the ``Interfaces.C_Streams`` package to operate on\n this stream, or the stream can be passed to a C program which can\n operate on it directly.  Of course the program is responsible for\n ensuring that only appropriate sequences of operations are executed.\n \n One particular use of relevance to an Ada program is that the\n-`setvbuf` function can be used to control the buffering of the\n+``setvbuf`` function can be used to control the buffering of the\n stream used by an Ada file.  In the absence of such a call the standard\n default buffering is used.\n \n-The `Open` procedures in these packages open a file giving an\n+The ``Open`` procedures in these packages open a file giving an\n existing C Stream instead of a file name.  Typically this stream is\n imported from a C program, allowing an Ada file to operate on an\n existing C file."}, {"sha": "b6fd18f807c4c5bcb9064e3fdb00729765df2985", "filename": "gcc/ada/doc/gnat_ugn.rst", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -1,38 +1,40 @@\n GNAT User's Guide for Native Platforms\n ======================================\n \n-*GNAT, The GNU Ada Development Environment*\n+.. only:: not latex\n \n-.. only:: PRO\n+    *GNAT, The GNU Ada Development Environment*\n \n-   *GNAT Pro Edition*\n+    .. only:: PRO\n \n-   | Version |version|\n-   | Date: |today|\n+       *GNAT Pro Edition*\n \n-.. only:: GPL\n+       | Version |version|\n+       | Date: |today|\n \n-   *GNAT GPL Edition*\n+    .. only:: GPL\n \n-   | Version |version|\n-   | Date: |today|\n+       *GNAT GPL Edition*\n \n-.. only:: FSF\n+       | Version |version|\n+       | Date: |today|\n \n-   .. raw:: texinfo\n+    .. only:: FSF\n \n-      @include gcc-common.texi\n-      GCC version @value{version-GCC}@*\n+       .. raw:: texinfo\n \n-AdaCore\n+          @include gcc-common.texi\n+          GCC version @value{version-GCC}@*\n \n-Permission is granted to copy, distribute and/or modify this document\n-under the terms of the GNU Free Documentation License, Version 1.3 or\n-any later version published by the Free Software Foundation; with no\n-Invariant Sections, with the Front-Cover Texts being\n-\"GNAT User's Guide for Native Platforms\",\n-and with no Back-Cover Texts.  A copy of the license is\n-included in the section entitled :ref:`gnu_fdl`.\n+    AdaCore\n+\n+    Permission is granted to copy, distribute and/or modify this document\n+    under the terms of the GNU Free Documentation License, Version 1.3 or\n+    any later version published by the Free Software Foundation; with no\n+    Invariant Sections, with the Front-Cover Texts being\n+    \"GNAT User's Guide for Native Platforms\",\n+    and with no Back-Cover Texts.  A copy of the license is\n+    included in the section entitled :ref:`gnu_fdl`.\n \n .. toctree::\n    :maxdepth: 3"}, {"sha": "e82172984141dfffcd895c8f375ff9d119bd89dc", "filename": "gcc/ada/doc/gnat_ugn/about_this_guide.rst", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fabout_this_guide.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fabout_this_guide.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fabout_this_guide.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -117,7 +117,7 @@ the new document structure.\n * :ref:`The_GNAT_Compilation_Model` has been extended so that it now covers\n   the following material:\n \n-  - The `gnatname`, `gnatkr`, and `gnatchop` tools\n+  - The ``gnatname``, ``gnatkr``, and ``gnatchop`` tools\n   - :ref:`Configuration_Pragmas`\n   - :ref:`GNAT_and_Libraries`\n   - :ref:`Conditional_Compilation` including :ref:`Preprocessing_with_gnatprep`\n@@ -173,9 +173,9 @@ the new document structure.\n   - :ref:`Microsoft_Windows_Topics`\n   - :ref:`Mac_OS_Topics`\n \n-* The `Compatibility and Porting Guide` appendix has been moved to the\n+* The *Compatibility and Porting Guide* appendix has been moved to the\n   :title:`GNAT Reference Manual`. It now includes a section\n-  `Writing Portable Fixed-Point Declarations` which was previously\n+  *Writing Portable Fixed-Point Declarations* which was previously\n   a separate chapter in the :title:`GNAT User's Guide`.\n \n \n@@ -188,14 +188,14 @@ Conventions\n Following are examples of the typographical and graphic conventions used\n in this guide:\n \n-* `Functions`, `utility program names`, `standard names`,\n-  and `classes`.\n+* ``Functions``, ``utility program names``, ``standard names``,\n+  and ``classes``.\n \n-* `Option flags`\n+* ``Option flags``\n \n * :file:`File names`\n \n-* `Variables`\n+* ``Variables``\n \n * *Emphasis*\n "}, {"sha": "0a85c7b44615534fe66bc221d572ba34d370901e", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 1434, "deletions": 1371, "changes": 2805, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453"}, {"sha": "688dd9961bc81057fddadea6d7ed78ebe663968c", "filename": "gcc/ada/doc/gnat_ugn/elaboration_order_handling_in_gnat.rst", "status": "modified", "additions": 236, "deletions": 234, "changes": 470, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -1,3 +1,5 @@\n+.. role:: switch(samp)\n+\n .. |with| replace:: *with*\n .. |withs| replace:: *with*\\ s\n .. |withed| replace:: *with*\\ ed\n@@ -40,7 +42,7 @@ in three contexts:\n \n * *Package initialization code*\n \n-  Code in a `BEGIN-END` section at the outer level of a package body is\n+  Code in a ``begin`` ... `` end`` section at the outer level of a package body is\n   executed as part of the package body elaboration code.\n \n * *Library level task allocators*\n@@ -60,12 +62,12 @@ we have to be sure that it is executed in an appropriate order. What we\n have is a series of elaboration code sections, potentially one section\n for each unit in the program. It is important that these execute\n in the correct order. Correctness here means that, taking the above\n-example of the declaration of `Sqrt_Half`,\n+example of the declaration of ``Sqrt_Half``,\n if some other piece of\n-elaboration code references `Sqrt_Half`,\n+elaboration code references ``Sqrt_Half``,\n then it must run after the\n section of elaboration code that contains the declaration of\n-`Sqrt_Half`.\n+``Sqrt_Half``.\n \n There would never be any order of elaboration problem if we made a rule\n that whenever you |with| a unit, you must elaborate both the spec and body\n@@ -76,8 +78,8 @@ of that unit before elaborating the unit doing the |withing|:\n      with Unit_1;\n      package Unit_2 is ...\n \n-would require that both the body and spec of `Unit_1` be elaborated\n-before the spec of `Unit_2`. However, a rule like that would be far too\n+would require that both the body and spec of ``Unit_1`` be elaborated\n+before the spec of ``Unit_2``. However, a rule like that would be far too\n restrictive. In particular, it would make it impossible to have routines\n in separate packages that were mutually recursive.\n \n@@ -86,33 +88,33 @@ elaboration code and determine an appropriate correct order of elaboration,\n but in the general case, this is not possible. Consider the following\n example.\n \n-In the body of `Unit_1`, we have a procedure `Func_1`\n+In the body of ``Unit_1``, we have a procedure ``Func_1``\n that references\n-the variable `Sqrt_1`, which is declared in the elaboration code\n-of the body of `Unit_1`:\n+the variable ``Sqrt_1``, which is declared in the elaboration code\n+of the body of ``Unit_1``:\n \n .. code-block:: ada\n \n      Sqrt_1 : Float := Sqrt (0.1);\n \n-The elaboration code of the body of `Unit_1` also contains:\n+The elaboration code of the body of ``Unit_1`` also contains:\n \n .. code-block:: ada\n \n      if expression_1 = 1 then\n         Q := Unit_2.Func_2;\n      end if;\n \n-`Unit_2` is exactly parallel,\n-it has a procedure `Func_2` that references\n-the variable `Sqrt_2`, which is declared in the elaboration code of\n-the body `Unit_2`:\n+``Unit_2`` is exactly parallel,\n+it has a procedure ``Func_2`` that references\n+the variable ``Sqrt_2``, which is declared in the elaboration code of\n+the body ``Unit_2``:\n \n .. code-block:: ada\n \n       Sqrt_2 : Float := Sqrt (0.1);\n \n-The elaboration code of the body of `Unit_2` also contains:\n+The elaboration code of the body of ``Unit_2`` also contains:\n \n .. code-block:: ada\n \n@@ -141,23 +143,23 @@ or\n \n If you carefully analyze the flow here, you will see that you cannot tell\n at compile time the answer to this question.\n-If `expression_1` is not equal to 1,\n-and `expression_2` is not equal to 2,\n+If ``expression_1`` is not equal to 1,\n+and ``expression_2`` is not equal to 2,\n then either order is acceptable, because neither of the function calls is\n executed. If both tests evaluate to true, then neither order is acceptable\n and in fact there is no correct order.\n \n If one of the two expressions is true, and the other is false, then one\n of the above orders is correct, and the other is incorrect. For example,\n-if `expression_1` /= 1 and `expression_2` = 2,\n-then the call to `Func_1`\n-will occur, but not the call to `Func_2.`\n+if ``expression_1`` /= 1 and ``expression_2`` = 2,\n+then the call to ``Func_1``\n+will occur, but not the call to ``Func_2.``\n This means that it is essential\n-to elaborate the body of `Unit_1` before\n-the body of `Unit_2`, so the first\n+to elaborate the body of ``Unit_1`` before\n+the body of ``Unit_2``, so the first\n order of elaboration is correct and the second is wrong.\n \n-By making `expression_1` and `expression_2`\n+By making ``expression_1`` and ``expression_2``\n depend on input data, or perhaps\n the time of day, we can make it impossible for the compiler or binder\n to figure out which of these expressions will be true, and hence it\n@@ -193,7 +195,7 @@ of defense:\n \n   Dynamic checks are made at run time, so that if some entity is accessed\n   before it is elaborated (typically  by means of a subprogram call)\n-  then the exception (`Program_Error`) is raised.\n+  then the exception (``Program_Error``) is raised.\n \n * *Elaboration control*\n \n@@ -214,15 +216,15 @@ easier to state:\n   has been elaborated. The rules for elaboration given above guarantee\n   that the spec of the subprogram has been elaborated before the\n   call, but not the body. If this rule is violated, then the\n-  exception `Program_Error` is raised.\n+  exception ``Program_Error`` is raised.\n \n * *Restrictions on instantiations*\n \n   A generic unit can only be instantiated if the body of the generic\n   unit has been elaborated. Again, the rules for elaboration given above\n   guarantee that the spec of the generic unit has been elaborated\n   before the instantiation, but not the body. If this rule is\n-  violated, then the exception `Program_Error` is raised.\n+  violated, then the exception ``Program_Error`` is raised.\n \n The idea is that if the body has been elaborated, then any variables\n it references must have been elaborated; by checking for the body being\n@@ -237,14 +239,14 @@ A plausible implementation can be described as follows.\n A Boolean variable is associated with each subprogram\n and each generic unit. This variable is initialized to False, and is set to\n True at the point body is elaborated. Every call or instantiation checks the\n-variable, and raises `Program_Error` if the variable is False.\n+variable, and raises ``Program_Error`` if the variable is False.\n \n Note that one might think that it would be good enough to have one Boolean\n variable for each package, but that would not deal with cases of trying\n to call a body in the same package as the call\n that has not been elaborated yet.\n Of course a compiler may be able to do enough analysis to optimize away\n-some of the Boolean variables as unnecessary, and `GNAT` indeed\n+some of the Boolean variables as unnecessary, and GNAT indeed\n does such optimizations, but still the easiest conceptual model is to\n think of there being one variable per subprogram.\n \n@@ -254,7 +256,7 @@ Controlling the Elaboration Order\n =================================\n \n In the previous section we discussed the rules in Ada which ensure\n-that `Program_Error` is raised if an incorrect elaboration order is\n+that ``Program_Error`` is raised if an incorrect elaboration order is\n chosen. This prevents erroneous executions, but we need mechanisms to\n specify a correct execution and avoid the exception altogether.\n To achieve this, Ada provides a number of features for controlling\n@@ -280,8 +282,8 @@ unit has no elaboration problems:\n           end Subp;\n        end Definitions;\n \n-  A package that |withs| `Definitions` may safely instantiate\n-  `Definitions.Subp` because the compiler can determine that there\n+  A package that |withs| ``Definitions`` may safely instantiate\n+  ``Definitions.Subp`` because the compiler can determine that there\n   definitely is no package body to worry about in this case\n \n .. index:: pragma Pure\n@@ -309,50 +311,50 @@ unit has no elaboration problems:\n * *pragma Elaborate_Body*\n \n   This pragma requires that the body of a unit be elaborated immediately\n-  after its spec. Suppose a unit `A` has such a pragma,\n-  and unit `B` does\n-  a |with| of unit `A`. Recall that the standard rules require\n-  the spec of unit `A`\n+  after its spec. Suppose a unit ``A`` has such a pragma,\n+  and unit ``B`` does\n+  a |with| of unit ``A``. Recall that the standard rules require\n+  the spec of unit ``A``\n   to be elaborated before the |withing| unit; given the pragma in\n-  `A`, we also know that the body of `A`\n-  will be elaborated before `B`, so\n-  that calls to `A` are safe and do not need a check.\n+  ``A``, we also know that the body of ``A``\n+  will be elaborated before ``B``, so\n+  that calls to ``A`` are safe and do not need a check.\n \n-  Note that, unlike pragma `Pure` and pragma `Preelaborate`,\n-  the use of `Elaborate_Body` does not guarantee that the program is\n+  Note that, unlike pragma ``Pure`` and pragma ``Preelaborate``,\n+  the use of ``Elaborate_Body`` does not guarantee that the program is\n   free of elaboration problems, because it may not be possible\n   to satisfy the requested elaboration order.\n-  Let's go back to the example with `Unit_1` and `Unit_2`.\n-  If a programmer marks `Unit_1` as `Elaborate_Body`,\n-  and not `Unit_2,` then the order of\n+  Let's go back to the example with ``Unit_1`` and ``Unit_2``.\n+  If a programmer marks ``Unit_1`` as ``Elaborate_Body``,\n+  and not ``Unit_2,`` then the order of\n   elaboration will be::\n \n        Spec of Unit_2\n        Spec of Unit_1\n        Body of Unit_1\n        Body of Unit_2\n \n-  Now that means that the call to `Func_1` in `Unit_2`\n+  Now that means that the call to ``Func_1`` in ``Unit_2``\n   need not be checked,\n-  it must be safe. But the call to `Func_2` in\n-  `Unit_1` may still fail if\n-  `Expression_1` is equal to 1,\n+  it must be safe. But the call to ``Func_2`` in\n+  ``Unit_1`` may still fail if\n+  ``Expression_1`` is equal to 1,\n   and the programmer must still take\n   responsibility for this not being the case.\n \n-  If all units carry a pragma `Elaborate_Body`, then all problems are\n+  If all units carry a pragma ``Elaborate_Body``, then all problems are\n   eliminated, except for calls entirely within a body, which are\n   in any case fully under programmer control. However, using the pragma\n   everywhere is not always possible.\n-  In particular, for our `Unit_1`/`Unit_2` example, if\n-  we marked both of them as having pragma `Elaborate_Body`, then\n+  In particular, for our ``Unit_1``/`Unit_2` example, if\n+  we marked both of them as having pragma ``Elaborate_Body``, then\n   clearly there would be no possible elaboration order.\n \n The above pragmas allow a server to guarantee safe use by clients, and\n clearly this is the preferable approach. Consequently a good rule\n-is to mark units as `Pure` or `Preelaborate` if possible,\n+is to mark units as ``Pure`` or ``Preelaborate`` if possible,\n and if this is not possible,\n-mark them as `Elaborate_Body` if possible.\n+mark them as ``Elaborate_Body`` if possible.\n As we have seen, there are situations where neither of these\n three pragmas can be used.\n So we also provide methods for clients to control the\n@@ -380,20 +382,20 @@ order of elaboration of the servers on which they depend:\n         Unit B |withs| unit C, and B.Func calls C.Func\n \n \n-  Now if we put a pragma `Elaborate (B)`\n-  in unit `A`, this ensures that the\n-  body of `B` is elaborated before the call, but not the\n-  body of `C`, so\n-  the call to `C.Func` could still cause `Program_Error` to\n+  Now if we put a pragma ``Elaborate (B)``\n+  in unit ``A``, this ensures that the\n+  body of ``B`` is elaborated before the call, but not the\n+  body of ``C``, so\n+  the call to ``C.Func`` could still cause ``Program_Error`` to\n   be raised.\n \n-  The effect of a pragma `Elaborate_All` is stronger, it requires\n+  The effect of a pragma ``Elaborate_All`` is stronger, it requires\n   not only that the body of the named unit be elaborated before the\n   unit doing the |with|, but also the bodies of all units that the\n   named unit uses, following |with| links transitively. For example,\n-  if we put a pragma `Elaborate_All (B)` in unit `A`,\n-  then it requires not only that the body of `B` be elaborated before `A`,\n-  but also the body of `C`, because `B` |withs| `C`.\n+  if we put a pragma ``Elaborate_All (B)`` in unit ``A``,\n+  then it requires not only that the body of ``B`` be elaborated before ``A``,\n+  but also the body of ``C``, because ``B`` |withs| ``C``.\n \n We are now in a position to give a usage rule in Ada for avoiding\n elaboration problems, at least if dynamic dispatching and access to\n@@ -406,14 +408,14 @@ The rule is simple:\n indirectly make a call to a subprogram in a |withed| unit, or instantiate\n a generic package in a |withed| unit,\n then if the |withed| unit does not have\n-pragma `Pure` or `Preelaborate`, then the client should have\n-a pragma `Elaborate_All`for the |withed| unit.**\n+pragma ``Pure`` or ``Preelaborate``, then the client should have\n+a pragma ``Elaborate_All``for the |withed| unit.**\n \n By following this rule a client is\n assured that calls can be made without risk of an exception.\n \n For generic subprogram instantiations, the rule can be relaxed to\n-require only a pragma `Elaborate` since elaborating the body\n+require only a pragma ``Elaborate`` since elaborating the body\n of a subprogram cannot cause any transitive elaboration (we are\n not calling the subprogram in this case, just elaborating its\n declaration).\n@@ -424,16 +426,16 @@ states:\n * *No order exists*\n \n   No order of elaboration exists which follows the rules, taking into\n-  account any `Elaborate`, `Elaborate_All`,\n-  or `Elaborate_Body` pragmas. In\n+  account any ``Elaborate``, ``Elaborate_All``,\n+  or ``Elaborate_Body`` pragmas. In\n   this case, an Ada compiler must diagnose the situation at bind\n   time, and refuse to build an executable program.\n \n * *One or more orders exist, all incorrect*\n \n   One or more acceptable elaboration orders exist, and all of them\n   generate an elaboration order problem. In this case, the binder\n-  can build an executable program, but `Program_Error` will be raised\n+  can build an executable program, but ``Program_Error`` will be raised\n   when the program is run.\n \n * *Several orders exist, some right, some incorrect*\n@@ -454,18 +456,18 @@ states:\n   may be true even if the rule is not followed.\n \n Note that one additional advantage of following our rules on the use\n-of `Elaborate` and `Elaborate_All`\n+of ``Elaborate`` and ``Elaborate_All``\n is that the program continues to stay in the ideal (all orders OK) state\n even if maintenance\n changes some bodies of some units. Conversely, if a program that does\n not follow this rule happens to be safe at some point, this state of affairs\n may deteriorate silently as a result of maintenance changes.\n \n You may have noticed that the above discussion did not mention\n-the use of `Elaborate_Body`. This was a deliberate omission. If you\n-|with| an `Elaborate_Body` unit, it still may be the case that\n+the use of ``Elaborate_Body``. This was a deliberate omission. If you\n+|with| an ``Elaborate_Body`` unit, it still may be the case that\n code in the body makes calls to some other unit, so it is still necessary\n-to use `Elaborate_All` on such units.\n+to use ``Elaborate_All`` on such units.\n \n \n .. _Controlling_Elaboration_in_GNAT_-_Internal_Calls:\n@@ -489,9 +491,9 @@ example writing:\n           return 1.0;\n      end One;\n \n-will obviously raise `Program_Error` at run time, because function\n+will obviously raise ``Program_Error`` at run time, because function\n One will be called before its body is elaborated. In this case GNAT will\n-generate a warning that the call will raise `Program_Error`::\n+generate a warning that the call will raise ``Program_Error``::\n \n      1. procedure y is\n      2.    function One return Float;\n@@ -513,13 +515,13 @@ generate a warning that the call will raise `Program_Error`::\n \n \n Note that in this particular case, it is likely that the call is safe, because\n-the function `One` does not access any global variables.\n+the function ``One`` does not access any global variables.\n Nevertheless in Ada, we do not want the validity of the check to depend on\n the contents of the body (think about the separate compilation case), so this\n is still wrong, as we discussed in the previous sections.\n \n The error is easily corrected by rearranging the declarations so that the\n-body of `One` appears before the declaration containing the call\n+body of ``One`` appears before the declaration containing the call\n (note that in Ada 95 as well as later versions of the Ada standard,\n declarations can appear in any order, so there is no restriction that\n would prevent this reordering, and if we write:\n@@ -536,7 +538,7 @@ would prevent this reordering, and if we write:\n      Q : Float := One;\n \n then all is well, no warning is generated, and no\n-`Program_Error` exception\n+``Program_Error`` exception\n will be raised.\n Things are more complicated when a chain of subprograms is executed:\n \n@@ -553,16 +555,16 @@ Things are more complicated when a chain of subprograms is executed:\n \n      function A return Integer is begin return 1; end;\n \n-Now the call to `C`\n-at elaboration time in the declaration of `X` is correct, because\n-the body of `C` is already elaborated,\n-and the call to `B` within the body of\n-`C` is correct, but the call\n-to `A` within the body of `B` is incorrect, because the body\n-of `A` has not been elaborated, so `Program_Error`\n-will be raised on the call to `A`.\n+Now the call to ``C``\n+at elaboration time in the declaration of ``X`` is correct, because\n+the body of ``C`` is already elaborated,\n+and the call to ``B`` within the body of\n+``C`` is correct, but the call\n+to ``A`` within the body of ``B`` is incorrect, because the body\n+of ``A`` has not been elaborated, so ``Program_Error``\n+will be raised on the call to ``A``.\n In this case GNAT will generate a\n-warning that `Program_Error` may be\n+warning that ``Program_Error`` may be\n raised at the point of the call. Let's look at the warning::\n \n      1. procedure x is\n@@ -590,9 +592,9 @@ raised at the point of the call. Let's look at the warning::\n \n Note that the message here says 'may raise', instead of the direct case,\n where the message says 'will be raised'. That's because whether\n-`A` is\n+``A`` is\n actually called depends in general on run-time flow of control.\n-For example, if the body of `B` said\n+For example, if the body of ``B`` said\n \n .. code-block:: ada\n \n@@ -606,10 +608,10 @@ For example, if the body of `B` said\n      end B;\n \n then we could not know until run time whether the incorrect call to A would\n-actually occur, so `Program_Error` might\n+actually occur, so ``Program_Error`` might\n or might not be raised. It is possible for a compiler to\n do a better job of analyzing bodies, to\n-determine whether or not `Program_Error`\n+determine whether or not ``Program_Error``\n might be raised, but it certainly\n couldn't do a perfect job (that would require solving the halting problem\n and is provably impossible), and because this is a warning anyway, it does\n@@ -622,22 +624,22 @@ real errors, and should be examined carefully and eliminated.\n In the rare case where a warning is bogus, it can be suppressed by any of\n the following methods:\n \n-* Compile with the *-gnatws* switch set\n+* Compile with the :switch:`-gnatws` switch set\n \n-* Suppress `Elaboration_Check` for the called subprogram\n+* Suppress ``Elaboration_Check`` for the called subprogram\n \n-* Use pragma `Warnings_Off` to turn warnings off for the call\n+* Use pragma ``Warnings_Off`` to turn warnings off for the call\n \n For the internal elaboration check case,\n GNAT by default generates the\n necessary run-time checks to ensure\n-that `Program_Error` is raised if any\n+that ``Program_Error`` is raised if any\n call fails an elaboration check. Of course this can only happen if a\n warning has been issued as described above. The use of pragma\n-`Suppress (Elaboration_Check)` may (but is not guaranteed to) suppress\n+``Suppress (Elaboration_Check)`` may (but is not guaranteed to) suppress\n some of these checks, meaning that it may be possible (but is not\n guaranteed) for a program to be able to call a subprogram whose body\n-is not yet elaborated, without raising a `Program_Error` exception.\n+is not yet elaborated, without raising a ``Program_Error`` exception.\n \n \n .. _Controlling_Elaboration_in_GNAT_-_External_Calls:\n@@ -678,21 +680,21 @@ Consider the following:\n          ...\n       end Main;\n \n-where `Main` is the main program. When this program is executed, the\n+where ``Main`` is the main program. When this program is executed, the\n elaboration code must first be executed, and one of the jobs of the\n binder is to determine the order in which the units of a program are\n to be elaborated. In this case we have four units: the spec and body\n-of `Math`,\n-the spec of `Stuff` and the body of `Main`).\n+of ``Math``,\n+the spec of ``Stuff`` and the body of ``Main``).\n In what order should the four separate sections of elaboration code\n be executed?\n \n There are some restrictions in the order of elaboration that the binder\n can choose. In particular, if unit U has a |with|\n-for a package `X`, then you\n-are assured that the spec of `X`\n+for a package ``X``, then you\n+are assured that the spec of ``X``\n is elaborated before U , but you are\n-not assured that the body of `X`\n+not assured that the body of ``X``\n is elaborated before U.\n This means that in the above case, the binder is allowed to choose the\n order::\n@@ -702,11 +704,11 @@ order::\n      body of Math\n      body of Main\n \n-but that's not good, because now the call to `Math.Sqrt`\n+but that's not good, because now the call to ``Math.Sqrt``\n that happens during\n-the elaboration of the `Stuff`\n-spec happens before the body of `Math.Sqrt` is\n-elaborated, and hence causes `Program_Error` exception to be raised.\n+the elaboration of the ``Stuff``\n+spec happens before the body of ``Math.Sqrt`` is\n+elaborated, and hence causes ``Program_Error`` exception to be raised.\n At first glance, one might say that the binder is misbehaving, because\n obviously you want to elaborate the body of something you |with| first, but\n that is not a general rule that can be followed in all cases. Consider\n@@ -727,19 +729,19 @@ This is a common arrangement, and, apart from the order of elaboration\n problems that might arise in connection with elaboration code, this works fine.\n A rule that says that you must first elaborate the body of anything you\n |with| cannot work in this case:\n-the body of `X` |withs| `Y`,\n+the body of ``X`` |withs| ``Y``,\n which means you would have to\n-elaborate the body of `Y` first, but that |withs| `X`,\n+elaborate the body of ``Y`` first, but that |withs| ``X``,\n which means\n-you have to elaborate the body of `X` first, but ... and we have a\n+you have to elaborate the body of ``X`` first, but ... and we have a\n loop that cannot be broken.\n \n It is true that the binder can in many cases guess an order of elaboration\n-that is unlikely to cause a `Program_Error`\n+that is unlikely to cause a ``Program_Error``\n exception to be raised, and it tries to do so (in the\n-above example of `Math/Stuff/Spec`, the GNAT binder will\n+above example of ``Math/Stuff/Spec``, the GNAT binder will\n by default\n-elaborate the body of `Math` right after its spec, so all will be well).\n+elaborate the body of ``Math`` right after its spec, so all will be well).\n \n However, a program that blindly relies on the binder to be helpful can\n get into trouble, as we discussed in the previous sections, so GNAT\n@@ -759,36 +761,36 @@ rule we previously described as the right approach. Let's restate it:\n *If a unit has elaboration code that can directly or indirectly make a\n call to a subprogram in a |withed| unit, or instantiate a generic\n package in a |withed| unit, then if the |withed| unit\n-does not have pragma `Pure` or `Preelaborate`, then the client should have an\n-`Elaborate_All` pragma for the |withed| unit.*\n+does not have pragma ``Pure`` or ``Preelaborate``, then the client should have an\n+``Elaborate_All`` pragma for the |withed| unit.*\n \n *In the case of instantiating a generic subprogram, it is always\n-sufficient to have only an `Elaborate` pragma for the\n+sufficient to have only an ``Elaborate`` pragma for the\n |withed| unit.*\n \n By following this rule a client is assured that calls and instantiations\n can be made without risk of an exception.\n \n In this mode GNAT traces all calls that are potentially made from\n-elaboration code, and puts in any missing implicit `Elaborate`\n-and `Elaborate_All` pragmas.\n+elaboration code, and puts in any missing implicit ``Elaborate``\n+and ``Elaborate_All`` pragmas.\n The advantage of this approach is that no elaboration problems\n are possible if the binder can find an elaboration order that is\n-consistent with these implicit `Elaborate` and\n-`Elaborate_All` pragmas. The\n+consistent with these implicit ``Elaborate`` and\n+``Elaborate_All`` pragmas. The\n disadvantage of this approach is that no such order may exist.\n \n If the binder does not generate any diagnostics, then it means that it has\n found an elaboration order that is guaranteed to be safe. However, the binder\n-may still be relying on implicitly generated `Elaborate` and\n-`Elaborate_All` pragmas so portability to other compilers than GNAT is not\n+may still be relying on implicitly generated ``Elaborate`` and\n+``Elaborate_All`` pragmas so portability to other compilers than GNAT is not\n guaranteed.\n \n If it is important to guarantee portability, then the compilations should\n-use the *-gnatel*\n+use the :switch:`-gnatel`\n (info messages for elaboration pragmas) switch. This will cause info messages\n-to be generated indicating the missing `Elaborate` and\n-`Elaborate_All` pragmas.\n+to be generated indicating the missing ``Elaborate`` and\n+``Elaborate_All`` pragmas.\n Consider the following source program:\n \n .. code-block:: ada\n@@ -799,12 +801,12 @@ Consider the following source program:\n      end;\n \n where it is clear that there\n-should be a pragma `Elaborate_All`\n-for unit `k`. An implicit pragma will be generated, and it is\n+should be a pragma ``Elaborate_All``\n+for unit ``k``. An implicit pragma will be generated, and it is\n likely that the binder will be able to honor it. However, if you want\n to port this program to some other Ada compiler than GNAT.\n it is safer to include the pragma explicitly in the source. If this\n-unit is compiled with the *-gnatel*\n+unit is compiled with the :switch:`-gnatel`\n switch, then the compiler outputs an information message::\n \n      1. with k;\n@@ -820,7 +822,7 @@ and these messages can be used as a guide for supplying manually\n the missing pragmas. It is usually a bad idea to use this\n option during development. That's because it will tell you when\n you need to put in a pragma, but cannot tell you when it is time\n-to take it out. So the use of pragma `Elaborate_All` may lead to\n+to take it out. So the use of pragma ``Elaborate_All`` may lead to\n unnecessary dependencies and even false circularities.\n \n This default mode is more restrictive than the Ada Reference\n@@ -834,8 +836,8 @@ and in particular must have the capability of implementing the\n standard dynamic model of elaboration with run-time checks.\n \n In GNAT, this standard mode can be achieved either by the use of\n-the *-gnatE* switch on the compiler (*gcc* or\n-*gnatmake*) command, or by the use of the configuration pragma:\n+the :switch:`-gnatE` switch on the compiler (``gcc`` or\n+``gnatmake``) command, or by the use of the configuration pragma:\n \n .. code-block:: ada\n \n@@ -865,36 +867,36 @@ Treatment of Pragma Elaborate\n \n .. index:: Pragma Elaborate\n \n-The use of `pragma Elaborate`\n+The use of ``pragma Elaborate``\n should generally be avoided in Ada 95 and Ada 2005 programs,\n since there is no guarantee that transitive calls\n will be properly handled. Indeed at one point, this pragma was placed\n in Annex J (Obsolescent Features), on the grounds that it is never useful.\n \n Now that's a bit restrictive. In practice, the case in which\n-`pragma Elaborate` is useful is when the caller knows that there\n+``pragma Elaborate`` is useful is when the caller knows that there\n are no transitive calls, or that the called unit contains all necessary\n-transitive `pragma Elaborate` statements, and legacy code often\n+transitive ``pragma Elaborate`` statements, and legacy code often\n contains such uses.\n \n Strictly speaking the static mode in GNAT should ignore such pragmas,\n since there is no assurance at compile time that the necessary safety\n conditions are met. In practice, this would cause GNAT to be incompatible\n with correctly written Ada 83 code that had all necessary\n-`pragma Elaborate` statements in place. Consequently, we made the\n+``pragma Elaborate`` statements in place. Consequently, we made the\n decision that GNAT in its default mode will believe that if it encounters\n-a `pragma Elaborate` then the programmer knows what they are doing,\n+a ``pragma Elaborate`` then the programmer knows what they are doing,\n and it will trust that no elaboration errors can occur.\n \n The result of this decision is two-fold. First to be safe using the\n-static mode, you should remove all `pragma Elaborate` statements.\n+static mode, you should remove all ``pragma Elaborate`` statements.\n Second, when fixing circularities in existing code, you can selectively\n-use `pragma Elaborate` statements to convince the static mode of\n-GNAT that it need not generate an implicit `pragma Elaborate_All`\n+use ``pragma Elaborate`` statements to convince the static mode of\n+GNAT that it need not generate an implicit ``pragma Elaborate_All``\n statement.\n \n-When using the static mode with *-gnatwl*, any use of\n-`pragma Elaborate` will generate a warning about possible\n+When using the static mode with :switch:`-gnatwl`, any use of\n+``pragma Elaborate`` will generate a warning about possible\n problems.\n \n \n@@ -979,62 +981,62 @@ the following example\n \n If the above example is compiled in the default static elaboration\n mode, then a circularity occurs. The circularity comes from the call\n-`Utils.Put_Val` in the task body of `Decls.Lib_Task`. Since\n+``Utils.Put_Val`` in the task body of ``Decls.Lib_Task``. Since\n this call occurs in elaboration code, we need an implicit pragma\n-`Elaborate_All` for `Utils`. This means that not only must\n-the spec and body of `Utils` be elaborated before the body\n-of `Decls`, but also the spec and body of any unit that is\n-|withed| by the body of `Utils` must also be elaborated before\n-the body of `Decls`. This is the transitive implication of\n-pragma `Elaborate_All` and it makes sense, because in general\n-the body of `Put_Val` might have a call to something in a\n+``Elaborate_All`` for ``Utils``. This means that not only must\n+the spec and body of ``Utils`` be elaborated before the body\n+of ``Decls``, but also the spec and body of any unit that is\n+|withed| by the body of ``Utils`` must also be elaborated before\n+the body of ``Decls``. This is the transitive implication of\n+pragma ``Elaborate_All`` and it makes sense, because in general\n+the body of ``Put_Val`` might have a call to something in a\n |withed| unit.\n \n In this case, the body of Utils (actually its spec) |withs|\n-`Decls`. Unfortunately this means that the body of `Decls`\n+``Decls``. Unfortunately this means that the body of ``Decls``\n must be elaborated before itself, in case there is a call from the\n-body of `Utils`.\n+body of ``Utils``.\n \n Here is the exact chain of events we are worrying about:\n \n-* In the body of `Decls` a call is made from within the body of a library\n-  task to a subprogram in the package `Utils`. Since this call may\n+* In the body of ``Decls`` a call is made from within the body of a library\n+  task to a subprogram in the package ``Utils``. Since this call may\n   occur at elaboration time (given that the task is activated at elaboration\n   time), we have to assume the worst, i.e., that the\n   call does happen at elaboration time.\n \n-* This means that the body and spec of `Util` must be elaborated before\n-  the body of `Decls` so that this call does not cause an access before\n+* This means that the body and spec of ``Util`` must be elaborated before\n+  the body of ``Decls`` so that this call does not cause an access before\n   elaboration.\n \n-* Within the body of `Util`, specifically within the body of\n-  `Util.Put_Val` there may be calls to any unit |withed|\n+* Within the body of ``Util``, specifically within the body of\n+  ``Util.Put_Val`` there may be calls to any unit |withed|\n   by this package.\n \n-* One such |withed| package is package `Decls`, so there\n-  might be a call to a subprogram in `Decls` in `Put_Val`.\n+* One such |withed| package is package ``Decls``, so there\n+  might be a call to a subprogram in ``Decls`` in ``Put_Val``.\n   In fact there is such a call in this example, but we would have to\n   assume that there was such a call even if it were not there, since\n-  we are not supposed to write the body of `Decls` knowing what\n-  is in the body of `Utils`; certainly in the case of the\n+  we are not supposed to write the body of ``Decls`` knowing what\n+  is in the body of ``Utils``; certainly in the case of the\n   static elaboration model, the compiler does not know what is in\n   other bodies and must assume the worst.\n \n-* This means that the spec and body of `Decls` must also be\n+* This means that the spec and body of ``Decls`` must also be\n   elaborated before we elaborate the unit containing the call, but\n-  that unit is `Decls`! This means that the body of `Decls`\n+  that unit is ``Decls``! This means that the body of ``Decls``\n   must be elaborated before itself, and that's a circularity.\n \n-Indeed, if you add an explicit pragma `Elaborate_All` for `Utils` in\n-the body of `Decls` you will get a true Ada Reference Manual\n+Indeed, if you add an explicit pragma ``Elaborate_All`` for ``Utils`` in\n+the body of ``Decls`` you will get a true Ada Reference Manual\n circularity that makes the program illegal.\n \n In practice, we have found that problems with the static model of\n elaboration in existing code often arise from library tasks, so\n we must address this particular situation.\n \n Note that if we compile and run the program above, using the dynamic model of\n-elaboration (that is to say use the *-gnatE* switch),\n+elaboration (that is to say use the :switch:`-gnatE` switch),\n then it compiles, binds,\n links, and runs, printing the expected result of 2. Therefore in some sense\n the circularity here is only apparent, and we need to capture\n@@ -1046,10 +1048,10 @@ We have four possible answers to this question:\n \n * Use the dynamic model of elaboration.\n \n-  If we use the *-gnatE* switch, then as noted above, the program works.\n+  If we use the :switch:`-gnatE` switch, then as noted above, the program works.\n   Why is this? If we examine the task body, it is apparent that the task cannot\n   proceed past the\n-  `accept` statement until after elaboration has been completed, because\n+  ``accept`` statement until after elaboration has been completed, because\n   the corresponding entry call comes from the main program, not earlier.\n   This is why the dynamic model works here. But that's really giving\n   up on a precise analysis, and we prefer to take this approach only if we cannot\n@@ -1114,7 +1116,7 @@ We have four possible answers to this question:\n       end;\n \n \n-  All we have done is to split `Decls` into two packages, one\n+  All we have done is to split ``Decls`` into two packages, one\n   containing the library task, and one containing everything else. Now\n   there is no cycle, and the program compiles, binds, links and executes\n   using the default static model of elaboration.\n@@ -1181,14 +1183,14 @@ We have four possible answers to this question:\n       end;\n \n \n-  What we have done here is to replace the `task` declaration in\n-  package `Decls` with a `task type` declaration. Then we\n-  introduce a separate package `Declst` to contain the actual\n+  What we have done here is to replace the ``task`` declaration in\n+  package ``Decls`` with a ``task type`` declaration. Then we\n+  introduce a separate package ``Declst`` to contain the actual\n   task object. This separates the elaboration issues for\n-  the `task type`\n+  the ``task type``\n   declaration, which causes no trouble, from the elaboration issues\n   of the task object, which is also unproblematic, since it is now independent\n-  of the elaboration of  `Utils`.\n+  of the elaboration of  ``Utils``.\n   This separation of concerns also corresponds to\n   a generally sound engineering principle of separating declarations\n   from instances. This version of the program also compiles, binds, links,\n@@ -1205,16 +1207,16 @@ We have four possible answers to this question:\n \n   Let us consider more carefully why our original sample program works\n   under the dynamic model of elaboration. The reason is that the code\n-  in the task body blocks immediately on the `accept`\n+  in the task body blocks immediately on the ``accept``\n   statement. Now of course there is nothing to prohibit elaboration\n   code from making entry calls (for example from another library level task),\n   so we cannot tell in isolation that\n   the task will not execute the accept statement  during elaboration.\n \n   However, in practice it is very unusual to see elaboration code\n   make any entry calls, and the pattern of tasks starting\n-  at elaboration time and then immediately blocking on `accept` or\n-  `select` statements is very common. What this means is that\n+  at elaboration time and then immediately blocking on ``accept`` or\n+  ``select`` statements is very common. What this means is that\n   the compiler is being too pessimistic when it analyzes the\n   whole package body as though it might be executed at elaboration\n   time.\n@@ -1233,8 +1235,8 @@ We have four possible answers to this question:\n   in the presence of a :file:`gnat.adc` containing the above pragma,\n   then once again, we can compile, bind, link, and execute, obtaining\n   the expected result. In the presence of this pragma, the compiler does\n-  not trace calls in a task body, that appear after the first `accept`\n-  or `select` statement, and therefore does not report a potential\n+  not trace calls in a task body, that appear after the first ``accept``\n+  or ``select`` statement, and therefore does not report a potential\n   circularity in the original program.\n \n   The compiler will check to the extent it can that the above\n@@ -1260,7 +1262,7 @@ The basic rule is that\n be |withed| by a unit compiled with the dynamic model**.\n The reason for this is that in the static model, a unit assumes that\n its clients guarantee to use (the equivalent of) pragma\n-`Elaborate_All` so that no elaboration checks are required\n+``Elaborate_All`` so that no elaboration checks are required\n in inner subprograms, and this assumption is violated if the\n client is compiled with dynamic checks.\n \n@@ -1270,28 +1272,28 @@ following criteria:\n \n \n * The |withed| unit is itself compiled with dynamic elaboration\n-  checks (that is with the *-gnatE* switch.\n+  checks (that is with the :switch:`-gnatE` switch.\n \n * The |withed| unit is an internal GNAT implementation unit from\n   the System, Interfaces, Ada, or GNAT hierarchies.\n \n * The |withed| unit has pragma Preelaborate or pragma Pure.\n \n * The |withing| unit (that is the client) has an explicit pragma\n-  `Elaborate_All` for the |withed| unit.\n+  ``Elaborate_All`` for the |withed| unit.\n \n \n If this rule is violated, that is if a unit with dynamic elaboration\n checks |withs| a unit that does not meet one of the above four\n-criteria, then the binder (`gnatbind`) will issue a warning\n+criteria, then the binder (``gnatbind``) will issue a warning\n similar to that in the following example::\n \n      warning: \"x.ads\" has dynamic elaboration checks and with's\n      warning:   \"y.ads\" which has static elaboration checks\n \n These warnings indicate that the rule has been violated, and that as a result\n elaboration checks may be missed in the resulting executable file.\n-This warning may be suppressed using the *-ws* binder switch\n+This warning may be suppressed using the :switch:`-ws` binder switch\n in the usual manner.\n \n One useful application of this mixing rule is in the case of a subsystem\n@@ -1324,14 +1326,14 @@ diagnostics. For example::\n      info:     reason: pragma Elaborate in unit \"proc (body)\"\n \n In this case we have a cycle that the binder cannot break. On the one\n-hand, there is an explicit pragma Elaborate in `proc` for\n-`pack`. This means that the body of `pack` must be elaborated\n-before the body of `proc`. On the other hand, there is elaboration\n-code in `pack` that calls a subprogram in `proc`. This means\n+hand, there is an explicit pragma Elaborate in ``proc`` for\n+``pack``. This means that the body of ``pack`` must be elaborated\n+before the body of ``proc``. On the other hand, there is elaboration\n+code in ``pack`` that calls a subprogram in ``proc``. This means\n that for maximum safety, there should really be a pragma\n-Elaborate_All in `pack` for `proc` which would require that\n-the body of `proc` be elaborated before the body of\n-`pack`. Clearly both requirements cannot be satisfied.\n+Elaborate_All in ``pack`` for ``proc`` which would require that\n+the body of ``proc`` be elaborated before the body of\n+``pack``. Clearly both requirements cannot be satisfied.\n Faced with a circularity of this kind, you have three different options.\n \n \n@@ -1348,14 +1350,14 @@ Faced with a circularity of this kind, you have three different options.\n \n * *Perform dynamic checks*\n \n-  If the compilations are done using the *-gnatE*\n+  If the compilations are done using the :switch:`-gnatE`\n   (dynamic elaboration check) switch, then GNAT behaves in a quite different\n   manner. Dynamic checks are generated for all calls that could possibly result\n   in raising an exception. With this switch, the compiler does not generate\n-  implicit `Elaborate` or `Elaborate_All` pragmas. The behavior then is\n+  implicit ``Elaborate`` or ``Elaborate_All`` pragmas. The behavior then is\n   exactly as specified in the :title:`Ada Reference Manual`.\n   The binder will generate\n-  an executable program that may or may not raise `Program_Error`, and then\n+  an executable program that may or may not raise ``Program_Error``, and then\n   it is the programmer's job to ensure that it does not raise an exception. Note\n   that it is important to compile all units with the switch, it cannot be used\n   selectively.\n@@ -1367,18 +1369,18 @@ Faced with a circularity of this kind, you have three different options.\n   are absolutely sure that your program cannot raise any elaboration\n   exceptions, and you still want to use the dynamic elaboration model,\n   then you can use the configuration pragma\n-  `Suppress (Elaboration_Check)` to suppress all such checks. For\n+  ``Suppress (Elaboration_Check)`` to suppress all such checks. For\n   example this pragma could be placed in the :file:`gnat.adc` file.\n \n * *Suppress checks selectively*\n \n   When you know that certain calls or instantiations in elaboration code cannot\n   possibly lead to an elaboration error, and the binder nevertheless complains\n-  about implicit `Elaborate` and `Elaborate_All` pragmas that lead to\n+  about implicit ``Elaborate`` and ``Elaborate_All`` pragmas that lead to\n   elaboration circularities, it is possible to remove those warnings locally and\n   obtain a program that will bind. Clearly this can be unsafe, and it is the\n   responsibility of the programmer to make sure that the resulting program has no\n-  elaboration anomalies. The pragma `Suppress (Elaboration_Check)` can be\n+  elaboration anomalies. The pragma ``Suppress (Elaboration_Check)`` can be\n   used with different granularity to suppress warnings and break elaboration\n   circularities:\n \n@@ -1399,11 +1401,11 @@ Faced with a circularity of this kind, you have three different options.\n   * Use Pragma Elaborate.\n \n     As previously described in section :ref:`Treatment_of_Pragma_Elaborate`,\n-    GNAT in static mode assumes that a `pragma` Elaborate indicates correctly\n+    GNAT in static mode assumes that a ``pragma`` Elaborate indicates correctly\n     that no elaboration checks are required on calls to the designated unit.\n     There may be cases in which the caller knows that no transitive calls\n-    can occur, so that a `pragma Elaborate` will be sufficient in a\n-    case where `pragma Elaborate_All` would cause a circularity.\n+    can occur, so that a ``pragma Elaborate`` will be sufficient in a\n+    case where ``pragma Elaborate_All`` would cause a circularity.\n \n   These five cases are listed in order of decreasing safety, and therefore\n   require increasing programmer care in their application. Consider the\n@@ -1474,35 +1476,35 @@ Faced with a circularity of this kind, you have three different options.\n        info:             which is withed by:\n        info:          \"pack1 (body)\"\n \n-  The sources of the circularity are the two calls to `Pack2.Pure` and\n-  `Pack2.F2` in the body of `Pack1`. We can see that the call to\n+  The sources of the circularity are the two calls to ``Pack2.Pure`` and\n+  ``Pack2.F2`` in the body of ``Pack1``. We can see that the call to\n   F2 is safe, even though F2 calls F1, because the call appears after the\n   elaboration of the body of F1. Therefore the pragma (1) is safe, and will\n   remove the warning on the call. It is also possible to use pragma (2)\n   because there are no other potentially unsafe calls in the block.\n \n-  The call to `Pure` is safe because this function does not depend on the\n-  state of `Pack2`. Therefore any call to this function is safe, and it\n+  The call to ``Pure`` is safe because this function does not depend on the\n+  state of ``Pack2``. Therefore any call to this function is safe, and it\n   is correct to place pragma (3) in the corresponding package spec.\n \n-  Finally, we could place pragma (4) in the spec of `Pack2` to disable\n+  Finally, we could place pragma (4) in the spec of ``Pack2`` to disable\n   warnings on all calls to functions declared therein. Note that this is not\n   necessarily safe, and requires more detailed examination of the subprogram\n-  bodies involved. In particular, a call to `F2` requires that `F1`\n+  bodies involved. In particular, a call to ``F2`` requires that ``F1``\n   be already elaborated.\n \n It is hard to generalize on which of these four approaches should be\n taken. Obviously if it is possible to fix the program so that the default\n treatment works, this is preferable, but this may not always be practical.\n-It is certainly simple enough to use *-gnatE*\n+It is certainly simple enough to use :switch:`-gnatE`\n but the danger in this case is that, even if the GNAT binder\n finds a correct elaboration order, it may not always do so,\n and certainly a binder from another Ada compiler might not. A\n combination of testing and analysis (for which the\n-information messages generated with the *-gnatel*\n+information messages generated with the :switch:`-gnatel`\n switch can be useful) must be used to ensure that the program is free\n of errors. One switch that is useful in this testing is the\n-*-p (pessimistic elaboration order)* switch for `gnatbind`.\n+:switch:`-p` (pessimistic elaboration order) switch for ``gnatbind``.\n Normally the binder tries to find an order that has the best chance\n of avoiding elaboration problems. However, if this switch is used, the binder\n plays a devil's advocate role, and tries to choose the order that\n@@ -1519,7 +1521,7 @@ that the compiler can handle cases where it is impossible to determine\n a correct order statically, and it checks that an exception is indeed\n raised at run time.\n \n-This one test must be compiled and run using the *-gnatE*\n+This one test must be compiled and run using the :switch:`-gnatE`\n switch, and then it passes. Alternatively, the entire suite can\n be run using this switch. It is never wrong to run with the dynamic\n elaboration switch if your code is correct, and we assume that the\n@@ -1539,26 +1541,26 @@ In rare cases, the static elaboration model fails to prevent\n dispatching calls to not-yet-elaborated subprograms. In such cases, we\n fall back to run-time checks; premature calls to any primitive\n operation of a tagged type before the body of the operation has been\n-elaborated will raise `Program_Error`.\n+elaborated will raise ``Program_Error``.\n \n Access-to-subprogram types, however, are handled conservatively in many\n cases. This was not true in earlier versions of the compiler; you can use\n-the *-gnatd.U* debug switch to revert to the old behavior if the new\n+the :switch:`-gnatd.U` debug switch to revert to the old behavior if the new\n conservative behavior causes elaboration cycles. Here, 'conservative' means\n-that if you do `P'Access` during elaboration, the compiler will normally\n-assume that you might call `P` indirectly during elaboration, so it adds an\n-implicit `pragma Elaborate_All` on the library unit containing `P`. The\n-*-gnatd.U* switch is safe if you know there are no such calls. If the\n-program worked before, it will continue to work with *-gnatd.U*. But beware\n+that if you do ``P'Access`` during elaboration, the compiler will normally\n+assume that you might call ``P`` indirectly during elaboration, so it adds an\n+implicit ``pragma Elaborate_All`` on the library unit containing ``P``. The\n+:switch:`-gnatd.U` switch is safe if you know there are no such calls. If the\n+program worked before, it will continue to work with :switch:`-gnatd.U`. But beware\n that code modifications such as adding an indirect call can cause erroneous\n-behavior in the presence of *-gnatd.U*.\n+behavior in the presence of :switch:`-gnatd.U`.\n \n These implicit Elaborate_All pragmas are not added in all cases, because\n they cause elaboration cycles in certain common code patterns. If you want\n-even more conservative handling of P'Access, you can use the *-gnatd.o*\n+even more conservative handling of P'Access, you can use the :switch:`-gnatd.o`\n switch.\n \n-See `debug.adb` for documentation on the *-gnatd...* debug switches.\n+See :file:`debug.adb` for documentation on the :switch:`-gnatd...` debug switches.\n \n \n .. _Summary_of_Procedures_for_Elaboration_Control:\n@@ -1574,16 +1576,16 @@ binds your program, then you can be confident that, apart from issues\n raised by the use of access-to-subprogram types and dynamic dispatching,\n the program is free of elaboration errors. If it is important that the\n program be portable to other compilers than GNAT, then use the\n-*-gnatel*\n-switch to generate messages about missing `Elaborate` or\n-`Elaborate_All` pragmas, and supply the missing pragmas.\n+:switch:`-gnatel`\n+switch to generate messages about missing ``Elaborate`` or\n+``Elaborate_All`` pragmas, and supply the missing pragmas.\n \n If the program fails to bind using the default static elaboration\n handling, then you can fix the program to eliminate the binder\n message, or recompile the entire program with the\n-*-gnatE* switch to generate dynamic elaboration checks,\n+:switch:`-gnatE` switch to generate dynamic elaboration checks,\n and, if you are sure there really are no elaboration problems,\n-use a global pragma `Suppress (Elaboration_Check)`.\n+use a global pragma ``Suppress (Elaboration_Check)``.\n \n \n .. _Other_Elaboration_Order_Considerations:\n@@ -1669,10 +1671,10 @@ and\n There is no language rule to prefer one or the other, both are correct\n from an order of elaboration point of view. But the programmatic effects\n of the two orders are very different. In the first, the elaboration routine\n-of `Calc` initializes `Z` to zero, and then the main program\n+of ``Calc`` initializes ``Z`` to zero, and then the main program\n runs with this value of zero. But in the second order, the elaboration\n-routine of `Calc` runs after the body of Init_Constants has set\n-`X` and `Y` and thus `Z` is set to 7 before `Main` runs.\n+routine of ``Calc`` runs after the body of Init_Constants has set\n+``X`` and ``Y`` and thus ``Z`` is set to 7 before ``Main`` runs.\n \n One could perhaps by applying pretty clever non-artificial intelligence\n to the situation guess that it is more likely that the second order of\n@@ -1690,14 +1692,14 @@ case, that could have been achieved by adding to the spec of Calc:\n \n      pragma Elaborate_All (Constants);\n \n-which requires that the body (if any) and spec of `Constants`,\n+which requires that the body (if any) and spec of ``Constants``,\n as well as the body and spec of any unit |withed| by\n-`Constants` be elaborated before `Calc` is elaborated.\n+``Constants`` be elaborated before ``Calc`` is elaborated.\n \n Clearly no automatic method can always guess which alternative you require,\n and if you are working with legacy code that had constraints of this kind\n-which were not properly specified by adding `Elaborate` or\n-`Elaborate_All` pragmas, then indeed it is possible that two different\n+which were not properly specified by adding ``Elaborate`` or\n+``Elaborate_All`` pragmas, then indeed it is possible that two different\n compilers can choose different orders.\n \n However, GNAT does attempt to diagnose the common situation where there\n@@ -1707,13 +1709,13 @@ indirectly initializes one or more of these variables. This is the situation\n in which a pragma Elaborate_Body is usually desirable, and GNAT will generate\n a warning that suggests this addition if it detects this situation.\n \n-The `gnatbind` *-p* switch may be useful in smoking\n+The ``gnatbind` :switch:`-p` switch may be useful in smoking\n out problems. This switch causes bodies to be elaborated as late as possible\n instead of as early as possible. In the example above, it would have forced\n the choice of the first elaboration order. If you get different results\n when using this switch, and particularly if one set of results is right,\n and one is wrong as far as you are concerned, it shows that you have some\n-missing `Elaborate` pragmas. For the example above, we have the\n+missing ``Elaborate`` pragmas. For the example above, we have the\n following output:\n \n .. code-block:: sh\n@@ -1729,7 +1731,7 @@ It is of course quite unlikely that both these results are correct, so\n it is up to you in a case like this to investigate the source of the\n difference, by looking at the two elaboration orders that are chosen,\n and figuring out which is correct, and then adding the necessary\n-`Elaborate` or `Elaborate_All` pragmas to ensure the desired order.\n+``Elaborate`` or ``Elaborate_All`` pragmas to ensure the desired order.\n \n \n .. _Determining_the_Chosen_Elaboration_Order:\n@@ -1780,7 +1782,7 @@ flag that the corresponding body is now elaborated.\n \n You can also ask the binder to generate a more\n readable list of the elaboration order using the\n-`-l` switch when invoking the binder. Here is\n+:switch:`-l` switch when invoking the binder. Here is\n an example of the output generated by this switch::\n \n      ada (spec)"}, {"sha": "ad587cee6bc38301e35ea3a33b794e9d7d585c39", "filename": "gcc/ada/doc/gnat_ugn/example_of_binder_output.rst", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fexample_of_binder_output.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fexample_of_binder_output.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fexample_of_binder_output.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -731,13 +731,13 @@ Comments have been added for clarification purposes.\n \n The Ada code in the above example is exactly what is generated by the\n binder. We have added comments to more clearly indicate the function\n-of each part of the generated `Ada_Main` package.\n+of each part of the generated ``Ada_Main`` package.\n \n The code is standard Ada in all respects, and can be processed by any\n tools that handle Ada. In particular, it is possible to use the debugger\n-in Ada mode to debug the generated `Ada_Main` package. For example,\n+in Ada mode to debug the generated ``Ada_Main`` package. For example,\n suppose that for reasons that you do not understand, your program is crashing\n-during elaboration of the body of `Ada.Text_IO`. To locate this bug,\n+during elaboration of the body of ``Ada.Text_IO``. To locate this bug,\n you can place a breakpoint on the call:\n \n   .. code-block:: ada"}, {"sha": "756e301c1181d184b3499c2027641046b75e21a5", "filename": "gcc/ada/doc/gnat_ugn/getting_started_with_gnat.rst", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgetting_started_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgetting_started_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgetting_started_with_gnat.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -1,3 +1,5 @@\n+.. role:: switch(samp)\n+\n .. _Getting_Started_with_GNAT:\n \n *************************\n@@ -27,7 +29,7 @@ file:\n *   The file(s) must be bound using the GNAT binder.\n *   All appropriate object files must be linked to produce an executable.\n \n-All three steps are most commonly handled by using the *gnatmake*\n+All three steps are most commonly handled by using the ``gnatmake``\n utility program that, given the name of the main program, automatically\n performs the necessary compilation, binding and linking steps.\n \n@@ -61,31 +63,31 @@ with periods replaced by hyphens; the\n extension is :file:`ads` for a\n spec and :file:`adb` for a body.\n You can override this default file naming convention by use of the\n-special pragma `Source_File_Name` (for further information please\n+special pragma ``Source_File_Name`` (for further information please\n see :ref:`Using_Other_File_Names`).\n Alternatively, if you want to rename your files according to this default\n convention, which is probably more convenient if you will be using GNAT\n-for all your compilations, then the `gnatchop` utility\n+for all your compilations, then the ``gnatchop`` utility\n can be used to generate correctly-named source files\n (see :ref:`Renaming_Files_with_gnatchop`).\n \n-You can compile the program using the following command (`$` is used\n+You can compile the program using the following command (``$`` is used\n as the command prompt in the examples in this document):\n \n .. code-block:: sh\n \n   $ gcc -c hello.adb\n \n \n-*gcc* is the command used to run the compiler. This compiler is\n+``gcc`` is the command used to run the compiler. This compiler is\n capable of compiling programs in several languages, including Ada and\n C. It assumes that you have given it an Ada program if the file extension is\n either :file:`.ads` or :file:`.adb`, and it will then call\n the GNAT compiler to compile the specified file.\n \n-The :option:`-c` switch is required. It tells *gcc* to only do a\n-compilation. (For C programs, *gcc* can also do linking, but this\n-capability is not used directly for Ada programs, so the :option:`-c`\n+The :switch:`-c` switch is required. It tells ``gcc`` to only do a\n+compilation. (For C programs, ``gcc`` can also do linking, but this\n+capability is not used directly for Ada programs, so the :switch:`-c`\n switch must always be present.)\n \n This compile command generates a file\n@@ -95,9 +97,9 @@ an 'Ada Library Information' file :file:`hello.ali`,\n which contains additional information used to check\n that an Ada program is consistent.\n To build an executable file,\n-use `gnatbind` to bind the program\n-and *gnatlink* to link it. The\n-argument to both `gnatbind` and *gnatlink* is the name of the\n+use ``gnatbind`` to bind the program\n+and ``gnatlink`` to link it. The\n+argument to both ``gnatbind`` and ``gnatlink`` is the name of the\n :file:`ALI` file, but the default extension of :file:`.ali` can\n be omitted. This means that in the most common case, the argument\n is simply the name of the main program:\n@@ -107,14 +109,14 @@ is simply the name of the main program:\n   $ gnatbind hello\n   $ gnatlink hello\n \n-A simpler method of carrying out these steps is to use *gnatmake*,\n+A simpler method of carrying out these steps is to use ``gnatmake``,\n a master program that invokes all the required\n compilation, binding and linking tools in the correct order. In particular,\n-*gnatmake* automatically recompiles any sources that have been\n+``gnatmake`` automatically recompiles any sources that have been\n modified since they were last compiled, or sources that depend\n on such modified sources, so that 'version skew' is avoided.\n \n-.. index:: Version skew (avoided by *gnatmake*)\n+.. index:: Version skew (avoided by ``gnatmake``)\n \n .. code-block:: sh\n \n@@ -178,11 +180,11 @@ following three separate files:\n \n \n *greetings.ads*\n-  spec of package `Greetings`\n+  spec of package ``Greetings``\n \n \n *greetings.adb*\n-  body of package `Greetings`\n+  body of package ``Greetings``\n \n \n *gmain.adb*\n@@ -204,32 +206,32 @@ In particular it is perfectly fine to compile the main program first.\n Also, it is not necessary to compile package specs in the case where\n there is an accompanying body; you only need to compile the body. If you want\n to submit these files to the compiler for semantic checking and not code\n-generation, then use the :option:`-gnatc` switch:\n+generation, then use the :switch:`-gnatc` switch:\n \n .. code-block:: sh\n \n   $ gcc -c greetings.ads -gnatc\n \n Although the compilation can be done in separate steps as in the\n above example, in practice it is almost always more convenient\n-to use the *gnatmake* tool. All you need to know in this case\n+to use the ``gnatmake`` tool. All you need to know in this case\n is the name of the main program's source file. The effect of the above four\n commands can be achieved with a single one:\n \n .. code-block:: sh\n \n   $ gnatmake gmain.adb\n \n-In the next section we discuss the advantages of using *gnatmake* in\n+In the next section we discuss the advantages of using ``gnatmake`` in\n more detail.\n \n .. _Using_the_gnatmake_Utility:\n \n-Using the *gnatmake* Utility\n-============================\n+Using the ``gnatmake`` Utility\n+==============================\n \n If you work on a program by compiling single components at a time using\n-*gcc*, you typically keep track of the units you modify. In order to\n+``gcc``, you typically keep track of the units you modify. In order to\n build a consistent system, you compile not only these units, but also any\n units that depend on the units you have modified.\n For example, in the preceding case,\n@@ -238,7 +240,7 @@ you edit :file:`greetings.ads`, you must recompile both\n :file:`greetings.adb` and :file:`gmain.adb`, because both files contain\n units that depend on :file:`greetings.ads`.\n \n-*gnatbind* will warn you if you forget one of these compilation\n+``gnatbind`` will warn you if you forget one of these compilation\n steps, so that it is impossible to generate an inconsistent program as a\n result of forgetting to do a compilation. Nevertheless it is tedious and\n error-prone to keep track of dependencies among units.\n@@ -248,7 +250,7 @@ if the dependencies change as you change the program, you must make\n sure that the makefile is kept up-to-date manually, which is also an\n error-prone process.\n \n-The *gnatmake* utility takes care of these details automatically.\n+The ``gnatmake`` utility takes care of these details automatically.\n Invoke it using either one of the following forms:\n \n .. code-block:: sh\n@@ -257,19 +259,19 @@ Invoke it using either one of the following forms:\n   $ gnatmake gmain\n \n The argument is the name of the file containing the main program;\n-you may omit the extension. *gnatmake*\n+you may omit the extension. ``gnatmake``\n examines the environment, automatically recompiles any files that need\n recompiling, and binds and links the resulting set of object files,\n generating the executable file, :file:`gmain`.\n In a large program, it\n-can be extremely helpful to use *gnatmake*, because working out by hand\n+can be extremely helpful to use ``gnatmake``, because working out by hand\n what needs to be recompiled can be difficult.\n \n-Note that *gnatmake* takes into account all the Ada rules that\n+Note that ``gnatmake`` takes into account all the Ada rules that\n establish dependencies among units. These include dependencies that result\n from inlining subprogram bodies, and from\n generic instantiation. Unlike some other\n-Ada make tools, *gnatmake* does not rely on the dependencies that were\n+Ada make tools, ``gnatmake`` does not rely on the dependencies that were\n found by the compiler on a previous compilation, which may possibly\n-be wrong when sources change. *gnatmake* determines the exact set of\n+be wrong when sources change. ``gnatmake`` determines the exact set of\n dependencies from scratch each time it is run."}, {"sha": "64c3d9c05fce70483bec399740bbee2cd013fabe", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 588, "deletions": 494, "changes": 1082, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453"}, {"sha": "3d9d0b93d01fefe47e14929e4198f02ee019a98a", "filename": "gcc/ada/doc/gnat_ugn/gnat_utility_programs.rst", "status": "modified", "additions": 924, "deletions": 896, "changes": 1820, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453"}, {"sha": "b539e1754251916613fcbab80863c4ff6d2b413e", "filename": "gcc/ada/doc/gnat_ugn/inline_assembler.rst", "status": "modified", "additions": 110, "deletions": 108, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Finline_assembler.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Finline_assembler.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Finline_assembler.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -1,3 +1,5 @@\n+.. role:: switch(samp)\n+\n .. _Inline_Assembler:\n \n ****************\n@@ -13,7 +15,7 @@ external routines written in assembly language, an Ada feature fully\n supported by GNAT.  However, for small sections of code it may be simpler\n or more efficient to include assembly language statements directly\n in your Ada source program, using the facilities of the implementation-defined\n-package `System.Machine_Code`, which incorporates the gcc\n+package ``System.Machine_Code``, which incorporates the gcc\n Inline Assembler.  The Inline Assembler approach offers a number of advantages,\n including the following:\n \n@@ -38,58 +40,58 @@ Basic Assembler Syntax\n \n The assembler used by GNAT and gcc is based not on the Intel assembly\n language, but rather on a language that descends from the AT&T Unix\n-assembler *as* (and which is often referred to as 'AT&T syntax').\n-The following table summarizes the main features of *as* syntax\n+assembler ``as`` (and which is often referred to as 'AT&T syntax').\n+The following table summarizes the main features of ``as`` syntax\n and points out the differences from the Intel conventions.\n-See the gcc *as* and *gas* (an *as* macro\n+See the gcc ``as`` and ``gas`` (an ``as`` macro\n pre-processor) documentation for further information.\n \n \n | *Register names*\n-|   gcc / *as*: Prefix with '%'; for example `%eax`\n-|   Intel: No extra punctuation; for example `eax`\n+|   gcc / ``as``: Prefix with '%'; for example ``%eax``\n+|   Intel: No extra punctuation; for example ``eax``\n \n \n | *Immediate operand*\n-|   gcc / *as*: Prefix with '$'; for example `$4`\n-|   Intel: No extra punctuation; for example `4`\n+|   gcc / ``as``: Prefix with '$'; for example ``$4``\n+|   Intel: No extra punctuation; for example ``4``\n \n \n | *Address*\n-|   gcc / *as*: Prefix with '$'; for example `$loc`\n-|   Intel: No extra punctuation; for example `loc`\n+|   gcc / ``as``: Prefix with '$'; for example ``$loc``\n+|   Intel: No extra punctuation; for example ``loc``\n \n \n | *Memory contents*\n-|   gcc / *as*: No extra punctuation; for example `loc`\n-|   Intel: Square brackets; for example `[loc]`\n+|   gcc / ``as``: No extra punctuation; for example ``loc``\n+|   Intel: Square brackets; for example ``[loc]``\n \n \n | *Register contents*\n-|   gcc / *as*: Parentheses; for example `(%eax)`\n-|   Intel: Square brackets; for example `[eax]`\n+|   gcc / ``as``: Parentheses; for example ``(%eax)``\n+|   Intel: Square brackets; for example ``[eax]``\n \n \n | *Hexadecimal numbers*\n-|   gcc / *as*: Leading '0x' (C language syntax); for example `0xA0`\n-|   Intel: Trailing 'h'; for example `A0h`\n+|   gcc / ``as``: Leading '0x' (C language syntax); for example ``0xA0``\n+|   Intel: Trailing 'h'; for example ``A0h``\n \n \n | *Operand size*\n-|   gcc / *as*: Explicit in op code; for example `movw` to move a 16-bit word\n-|   Intel: Implicit, deduced by assembler; for example `mov`\n+|   gcc / ``as``: Explicit in op code; for example ``movw`` to move a 16-bit word\n+|   Intel: Implicit, deduced by assembler; for example ``mov``\n \n \n | *Instruction repetition*\n-|   gcc / *as*: Split into two lines; for example\n-|     `rep`\n-|     `stosl`\n-|   Intel: Keep on one line; for example `rep stosl`\n+|   gcc / ``as``: Split into two lines; for example\n+|     ``rep``\n+|     ``stosl``\n+|   Intel: Keep on one line; for example ``rep stosl``\n \n \n | *Order of operands*\n-|   gcc / *as*: Source first; for example `movw $4, %eax`\n-|   Intel: Destination first; for example `mov eax, 4`\n+|   gcc / ``as``: Source first; for example ``movw $4, %eax``\n+|   Intel: Destination first; for example ``mov eax, 4``\n \n \n .. _A_Simple_Example_of_Inline_Assembler:\n@@ -98,7 +100,7 @@ A Simple Example of Inline Assembler\n ====================================\n \n The following example will generate a single assembly language statement,\n-`nop`, which does nothing.  Despite its lack of run-time effect,\n+``nop``, which does nothing.  Despite its lack of run-time effect,\n the example will be useful in illustrating the basics of\n the Inline Assembler facility.\n \n@@ -110,19 +112,19 @@ the Inline Assembler facility.\n         Asm (\"nop\");\n      end Nothing;\n \n-`Asm` is a procedure declared in package `System.Machine_Code`;\n+``Asm`` is a procedure declared in package ``System.Machine_Code``;\n here it takes one parameter, a *template string* that must be a static\n expression and that will form the generated instruction.\n-`Asm` may be regarded as a compile-time procedure that parses\n+``Asm`` may be regarded as a compile-time procedure that parses\n the template string and additional parameters (none here),\n from which it generates a sequence of assembly language instructions.\n \n The examples in this chapter will illustrate several of the forms\n-for invoking `Asm`; a complete specification of the syntax\n-is found in the `Machine_Code_Insertions` section of the\n+for invoking ``Asm``; a complete specification of the syntax\n+is found in the ``Machine_Code_Insertions`` section of the\n :title:`GNAT Reference Manual`.\n \n-Under the standard GNAT conventions, the `Nothing` procedure\n+Under the standard GNAT conventions, the ``Nothing`` procedure\n should be in a file named :file:`nothing.adb`.\n You can build the executable in the usual way:\n \n@@ -140,20 +142,20 @@ To see this output, invoke the compiler as follows:\n \n where the options are:\n \n-* :samp:`-c`\n+* :switch:`-c`\n     compile only (no bind or link)\n \n-* :samp:`-S`\n+* :switch:`-S`\n     generate assembler listing\n \n-* :samp:`-fomit-frame-pointer`\n+* :switch:`-fomit-frame-pointer`\n     do not set up separate stack frames\n \n-* :samp:`-gnatp`\n+* :switch:`-gnatp`\n     do not add runtime checks\n \n This gives a human-readable assembler version of the code. The resulting\n-file will have the same name as the Ada source file, but with a `.s`\n+file will have the same name as the Ada source file, but with a ``.s``\n extension. In our example, the file :file:`nothing.s` has the following\n contents:\n \n@@ -175,7 +177,7 @@ contents:\n         ret\n \n The assembly code you included is clearly indicated by\n-the compiler, between the `#APP` and `#NO_APP`\n+the compiler, between the ``#APP`` and ``#NO_APP``\n delimiters. The character before the 'APP' and 'NOAPP'\n can differ on different targets. For example, GNU/Linux uses '#APP' while\n on NT you will see '/APP'.\n@@ -185,7 +187,7 @@ wrong size modifier, or using a wrong operand for the instruction) GNAT\n will report this error in a temporary file, which will be deleted when\n the compilation is finished.  Generating an assembler file will help\n in such cases, since you can assemble this file separately using the\n-*as* assembler that comes with gcc.\n+``as`` assembler that comes with gcc.\n \n Assembling the file using the command\n \n@@ -195,7 +197,7 @@ Assembling the file using the command\n \n will give you error messages whose lines correspond to the assembler\n input file, so you can easily find and correct any mistakes you made.\n-If there are no errors, *as* will generate an object file\n+If there are no errors, ``as`` will generate an object file\n :file:`nothing.out`.\n \n \n@@ -261,12 +263,12 @@ actually do.  This is a useful convention.\n When writing Inline Assembler instructions, you need to precede each register\n and variable name with a percent sign.  Since the assembler already requires\n a percent sign at the beginning of a register name, you need two consecutive\n-percent signs for such names in the Asm template string, thus `%%eax`.\n+percent signs for such names in the Asm template string, thus ``%%eax``.\n In the generated assembly code, one of the percent signs will be stripped off.\n \n-Names such as `%0`, `%1`, `%2`, etc., denote input or output\n-variables: operands you later define using `Input` or `Output`\n-parameters to `Asm`.\n+Names such as ``%0``, ``%1``, ``%2``, etc., denote input or output\n+variables: operands you later define using ``Input`` or ``Output``\n+parameters to ``Asm``.\n An output variable is illustrated in\n the third statement in the Asm template string:\n \n@@ -275,21 +277,21 @@ the third statement in the Asm template string:\n      movl %%eax, %0\n \n The intent is to store the contents of the eax register in a variable that can\n-be accessed in Ada.  Simply writing `movl %%eax, Flags` would not\n+be accessed in Ada.  Simply writing ``movl %%eax, Flags`` would not\n necessarily work, since the compiler might optimize by using a register\n-to hold Flags, and the expansion of the `movl` instruction would not be\n+to hold Flags, and the expansion of the ``movl`` instruction would not be\n aware of this optimization.  The solution is not to store the result directly\n but rather to advise the compiler to choose the correct operand form;\n-that is the purpose of the `%0` output variable.\n+that is the purpose of the ``%0`` output variable.\n \n-Information about the output variable is supplied in the `Outputs`\n-parameter to `Asm`:\n+Information about the output variable is supplied in the ``Outputs``\n+parameter to ``Asm``:\n \n   .. code-block:: ada\n \n      Outputs => Unsigned_32'Asm_Output (\"=g\", Flags));\n \n-The output is defined by the `Asm_Output` attribute of the target type;\n+The output is defined by the ``Asm_Output`` attribute of the target type;\n the general format is\n \n   .. code-block:: ada\n@@ -303,21 +305,21 @@ to store/access the associated variable.  In the example\n \n      Unsigned_32'Asm_Output (\"=m\", Flags);\n \n-the `\"m\"` (memory) constraint tells the compiler that the variable\n-`Flags` should be stored in a memory variable, thus preventing\n+the ``\"m\"`` (memory) constraint tells the compiler that the variable\n+``Flags`` should be stored in a memory variable, thus preventing\n the optimizer from keeping it in a register.  In contrast,\n \n   .. code-block:: ada\n \n      Unsigned_32'Asm_Output (\"=r\", Flags);\n \n-uses the `\"r\"` (register) constraint, telling the compiler to\n+uses the ``\"r\"`` (register) constraint, telling the compiler to\n store the variable in a register.\n \n If the constraint is preceded by the equal character '=', it tells\n the compiler that the variable will be used to store data into it.\n \n-In the `Get_Flags` example, we used the `\"g\"` (global) constraint,\n+In the ``Get_Flags`` example, we used the ``\"g\"`` (global) constraint,\n allowing the optimizer to choose whatever it deems best.\n \n There are a fairly large number of constraints, but the ones that are\n@@ -338,7 +340,7 @@ most useful (for the Intel x86 processor) are the following:\n  *q*    use one of eax, ebx, ecx, edx, esi or edi\n  ====== ==========================================\n \n-The full set of constraints is described in the gcc and *as*\n+The full set of constraints is described in the gcc and ``as``\n documentation; note that it is possible to combine certain constraints\n in one constraint string.\n \n@@ -354,16 +356,16 @@ integer.  Thus in\n           Outputs => Unsigned_32'Asm_Output (\"=g\", Flags));\n \n \n-`%0` will be replaced in the expanded code by the appropriate operand,\n+``%0`` will be replaced in the expanded code by the appropriate operand,\n whatever\n-the compiler decided for the `Flags` variable.\n+the compiler decided for the ``Flags`` variable.\n \n In general, you may have any number of output variables:\n \n-* Count the operands starting at 0; thus `%0`, `%1`, etc.\n+* Count the operands starting at 0; thus ``%0``, ``%1``, etc.\n \n-* Specify the `Outputs` parameter as a parenthesized comma-separated list\n-  of `Asm_Output` attributes\n+* Specify the ``Outputs`` parameter as a parenthesized comma-separated list\n+  of ``Asm_Output`` attributes\n \n For example:\n \n@@ -376,13 +378,13 @@ For example:\n                       Unsigned_32'Asm_Output (\"=g\", Var_B),   --  %1 = Var_B\n                       Unsigned_32'Asm_Output (\"=g\", Var_C))); --  %2 = Var_C\n \n-where `Var_A`, `Var_B`, and `Var_C` are variables\n+where ``Var_A``, ``Var_B``, and ``Var_C`` are variables\n in the Ada program.\n \n-As a variation on the `Get_Flags` example, we can use the constraints\n-string to direct the compiler to store the eax register into the `Flags`\n+As a variation on the ``Get_Flags`` example, we can use the constraints\n+string to direct the compiler to store the eax register into the ``Flags``\n variable, instead of including the store instruction explicitly in the\n-`Asm` template string:\n+``Asm`` template string:\n \n   .. code-block:: ada\n \n@@ -399,7 +401,7 @@ variable, instead of including the store instruction explicitly in the\n         Put_Line (\"Flags register:\" & Flags'Img);\n      end Get_Flags_2;\n \n-The `\"a\"` constraint tells the compiler that the `Flags`\n+The ``\"a\"`` constraint tells the compiler that the ``Flags``\n variable will come from the eax register. Here is the resulting code:\n \n   ::\n@@ -466,32 +468,32 @@ The program simply increments its input value by 1:\n        Put_Line (\"Value after is\" & Value'Img);\n      end Increment;\n \n-The `Outputs` parameter to `Asm` specifies\n+The ``Outputs`` parameter to ``Asm`` specifies\n that the result will be in the eax register and that it is to be stored\n-in the `Result` variable.\n+in the ``Result`` variable.\n \n-The `Inputs` parameter looks much like the `Outputs` parameter,\n-but with an `Asm_Input` attribute.\n-The `\"=\"` constraint, indicating an output value, is not present.\n+The ``Inputs`` parameter looks much like the ``Outputs`` parameter,\n+but with an ``Asm_Input`` attribute.\n+The ``\"=\"`` constraint, indicating an output value, is not present.\n \n You can have multiple input variables, in the same way that you can have more\n than one output variable.\n \n The parameter count (%0, %1) etc, still starts at the first output statement,\n and continues with the input statements.\n \n-Just as the `Outputs` parameter causes the register to be stored into the\n+Just as the ``Outputs`` parameter causes the register to be stored into the\n target variable after execution of the assembler statements, so does the\n-`Inputs` parameter cause its variable to be loaded into the register\n+``Inputs`` parameter cause its variable to be loaded into the register\n before execution of the assembler statements.\n \n-Thus the effect of the `Asm` invocation is:\n+Thus the effect of the ``Asm`` invocation is:\n \n-* load the 32-bit value of `Value` into eax\n-* execute the `incl %eax` instruction\n-* store the contents of eax into the `Result` variable\n+* load the 32-bit value of ``Value`` into eax\n+* execute the ``incl %eax`` instruction\n+* store the contents of eax into the ``Result`` variable\n \n-The resulting assembler file (with *-O2* optimization) contains:\n+The resulting assembler file (with :switch:`-O2` optimization) contains:\n \n   ::\n \n@@ -512,10 +514,10 @@ The resulting assembler file (with *-O2* optimization) contains:\n Inlining Inline Assembler Code\n ==============================\n \n-For a short subprogram such as the `Incr` function in the previous\n+For a short subprogram such as the ``Incr`` function in the previous\n section, the overhead of the call and return (creating / deleting the stack\n frame) can be significant, compared to the amount of code in the subprogram\n-body.  A solution is to apply Ada's `Inline` pragma to the subprogram,\n+body.  A solution is to apply Ada's ``Inline`` pragma to the subprogram,\n which directs the compiler to expand invocations of the subprogram at the\n point(s) of call, instead of setting up a stack frame for out-of-line calls.\n Here is the resulting program:\n@@ -546,11 +548,11 @@ Here is the resulting program:\n         Put_Line (\"Value after is\" & Value'Img);\n      end Increment_2;\n \n-Compile the program with both optimization (*-O2*) and inlining\n-(*-gnatn*) enabled.\n+Compile the program with both optimization (:switch:`-O2`) and inlining\n+(:switch:`-gnatn`) enabled.\n \n-The `Incr` function is still compiled as usual, but at the\n-point in `Increment` where our function used to be called:\n+The ``Incr`` function is still compiled as usual, but at the\n+point in ``Increment`` where our function used to be called:\n \n \n   ::\n@@ -572,31 +574,31 @@ the code for the function body directly appears:\n thus saving the overhead of stack frame setup and an out-of-line call.\n \n \n-.. _Other_`Asm`_Functionality:\n+.. _Other_Asm_Functionality:\n \n-Other `Asm` Functionality\n-=========================\n+Other ``Asm`` Functionality\n+===========================\n \n-This section describes two important parameters to the `Asm`\n-procedure: `Clobber`, which identifies register usage;\n-and `Volatile`, which inhibits unwanted optimizations.\n+This section describes two important parameters to the ``Asm``\n+procedure: ``Clobber``, which identifies register usage;\n+and ``Volatile``, which inhibits unwanted optimizations.\n \n-.. _The_`Clobber`_Parameter:\n+.. _The_Clobber_Parameter:\n \n-The `Clobber` Parameter\n------------------------\n+The ``Clobber`` Parameter\n+-------------------------\n \n One of the dangers of intermixing assembly language and a compiled language\n such as Ada is that the compiler needs to be aware of which registers are\n being used by the assembly code.  In some cases, such as the earlier examples,\n the constraint string is sufficient to indicate register usage (e.g.,\n-`\"a\"` for\n+``\"a\"`` for\n the eax register).  But more generally, the compiler needs an explicit\n identification of the registers that are used by the Inline Assembly\n statements.\n \n Using a register that the compiler doesn't know about\n-could be a side effect of an instruction (like `mull`\n+could be a side effect of an instruction (like ``mull``\n storing its result in both eax and edx).\n It can also arise from explicit register usage in your\n assembly code; for example:\n@@ -608,10 +610,10 @@ assembly code; for example:\n           Outputs => Unsigned_32'Asm_Output (\"=g\", Var_Out),\n           Inputs  => Unsigned_32'Asm_Input  (\"g\", Var_In));\n \n-where the compiler (since it does not analyze the `Asm` template string)\n+where the compiler (since it does not analyze the ``Asm`` template string)\n does not know you are using the ebx register.\n \n-In such cases you need to supply the `Clobber` parameter to `Asm`,\n+In such cases you need to supply the ``Clobber`` parameter to ``Asm``,\n to identify the registers that will be used by your assembly code:\n \n \n@@ -626,28 +628,28 @@ to identify the registers that will be used by your assembly code:\n The Clobber parameter is a static string expression specifying the\n register(s) you are using.  Note that register names are *not* prefixed\n by a percent sign. Also, if more than one register is used then their names\n-are separated by commas; e.g., `\"eax, ebx\"`\n+are separated by commas; e.g., ``\"eax, ebx\"``\n \n-The `Clobber` parameter has several additional uses:\n+The ``Clobber`` parameter has several additional uses:\n \n-* Use 'register' name `cc` to indicate that flags might have changed\n-* Use 'register' name `memory` if you changed a memory location\n+* Use 'register' name ``cc`` to indicate that flags might have changed\n+* Use 'register' name ``memory`` if you changed a memory location\n \n \n-.. _The_`Volatile`_Parameter:\n+.. _The_Volatile_Parameter:\n \n-The `Volatile` Parameter\n-------------------------\n+The ``Volatile`` Parameter\n+--------------------------\n \n .. index:: Volatile parameter\n \n Compiler optimizations in the presence of Inline Assembler may sometimes have\n-unwanted effects.  For example, when an `Asm` invocation with an input\n+unwanted effects.  For example, when an ``Asm`` invocation with an input\n variable is inside a loop, the compiler might move the loading of the input\n variable outside the loop, regarding it as a one-time initialization.\n \n If this effect is not desired, you can disable such optimizations by setting\n-the `Volatile` parameter to `True`; for example:\n+the ``Volatile`` parameter to ``True``; for example:\n \n   .. code-block:: ada\n \n@@ -658,11 +660,11 @@ the `Volatile` parameter to `True`; for example:\n           Clobber  => \"ebx\",\n           Volatile => True);\n \n-By default, `Volatile` is set to `False` unless there is no\n-`Outputs` parameter.\n+By default, ``Volatile`` is set to ``False`` unless there is no\n+``Outputs`` parameter.\n \n-Although setting `Volatile` to `True` prevents unwanted\n+Although setting ``Volatile`` to ``True`` prevents unwanted\n optimizations, it will also disable other optimizations that might be\n-important for efficiency. In general, you should set `Volatile`\n-to `True` only if the compiler's optimizations have created\n+important for efficiency. In general, you should set ``Volatile``\n+to ``True`` only if the compiler's optimizations have created\n problems."}, {"sha": "05270e5ae7bd9f08db87222326332497283137eb", "filename": "gcc/ada/doc/gnat_ugn/platform_specific_information.rst", "status": "modified", "additions": 277, "deletions": 275, "changes": 552, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453", "patch": "@@ -1,3 +1,5 @@\n+.. role:: switch(samp)\n+\n .. -- Non-breaking space in running text\n    -- E.g. Ada |nbsp| 95\n \n@@ -199,7 +201,7 @@ Alternatively, you can specify :file:`rts-sjlj/adainclude` in the file\n .. index:: --RTS option\n \n Selecting another run-time library temporarily can be\n-achieved by using the *--RTS* switch, e.g., *--RTS=sjlj*\n+achieved by using the :switch:`--RTS` switch, e.g., :switch:`--RTS=sjlj`\n \n \n .. _Choosing_the_Scheduling_Policy:\n@@ -212,28 +214,28 @@ Choosing the Scheduling Policy\n ------------------------------\n \n When using a POSIX threads implementation, you have a choice of several\n-scheduling policies: `SCHED_FIFO`, `SCHED_RR` and `SCHED_OTHER`.\n+scheduling policies: ``SCHED_FIFO``, ``SCHED_RR`` and ``SCHED_OTHER``.\n \n-Typically, the default is `SCHED_OTHER`, while using `SCHED_FIFO`\n-or `SCHED_RR` requires special (e.g., root) privileges.\n+Typically, the default is ``SCHED_OTHER``, while using ``SCHED_FIFO``\n+or ``SCHED_RR`` requires special (e.g., root) privileges.\n \n .. index:: pragma Time_Slice\n .. index:: -T0 option\n .. index:: pragma Task_Dispatching_Policy\n \n \n-By default, GNAT uses the `SCHED_OTHER` policy. To specify\n-`SCHED_FIFO`,\n+By default, GNAT uses the ``SCHED_OTHER`` policy. To specify\n+``SCHED_FIFO``,\n you can use one of the following:\n \n-* `pragma Time_Slice (0.0)`\n-* the corresponding binder option *-T0*\n-* `pragma Task_Dispatching_Policy (FIFO_Within_Priorities)`\n+* ``pragma Time_Slice (0.0)``\n+* the corresponding binder option :switch:`-T0`\n+* ``pragma Task_Dispatching_Policy (FIFO_Within_Priorities)``\n \n \n-To specify `SCHED_RR`,\n-you should use `pragma Time_Slice` with a\n-value greater than 0.0, or else use the corresponding *-T*\n+To specify ``SCHED_RR``,\n+you should use ``pragma Time_Slice`` with a\n+value greater than 0.0, or else use the corresponding :switch:`-T`\n binder option.\n \n \n@@ -279,15 +281,15 @@ library based on POSIX threads --- *rts-pthread*.\n \n This run-time library has the advantage of being mostly shared across all\n POSIX-compliant thread implementations, and it also provides under\n-Solaris |nbsp| 8 the `PTHREAD_PRIO_INHERIT`\n-and `PTHREAD_PRIO_PROTECT`\n+Solaris |nbsp| 8 the ``PTHREAD_PRIO_INHERIT``\n+and ``PTHREAD_PRIO_PROTECT``\n semantics that can be selected using the predefined pragma\n-`Locking_Policy`\n+``Locking_Policy``\n with respectively\n-`Inheritance_Locking` and `Ceiling_Locking` as the policy.\n+``Inheritance_Locking`` and ``Ceiling_Locking`` as the policy.\n \n As explained above, the native run-time library is based on the Solaris thread\n-library (`libthread`) and is the default library.\n+library (``libthread``) and is the default library.\n \n .. index:: GNAT_PROCESSOR environment variable (on Sparc Solaris)\n \n@@ -303,14 +305,14 @@ to one of the following:\n   ========================= ===================================================================\n   ``GNAT_PROCESSOR`` Value             Effect\n   ========================= ===================================================================\n-  *-2*                      Use the default configuration (run the program on all\n-                            available processors) - this is the same as having `GNAT_PROCESSOR`\n+  ``-2``                    Use the default configuration (run the program on all\n+                            available processors) - this is the same as having ``GNAT_PROCESSOR``\n                             unset\n-  *-1*                      Let the run-time implementation choose one processor and run the\n+  ``-1``                    Let the run-time implementation choose one processor and run the\n                             program on that processor\n-  *0 .. Last_Proc*          Run the program on the specified processor.\n-                            `Last_Proc` is equal to `_SC_NPROCESSORS_CONF - 1`\n-                            (where `_SC_NPROCESSORS_CONF` is a system variable).\n+  ``0 .. Last_Proc``        Run the program on the specified processor.\n+                            ``Last_Proc`` is equal to ``_SC_NPROCESSORS_CONF - 1``\n+                            (where ``_SC_NPROCESSORS_CONF`` is a system variable).\n   ========================= ===================================================================\n \n \n@@ -322,16 +324,16 @@ AIX-Specific Considerations\n .. index:: AIX resolver library\n \n On AIX, the resolver library initializes some internal structure on\n-the first call to `get*by*` functions, which are used to implement\n-`GNAT.Sockets.Get_Host_By_Name` and\n-`GNAT.Sockets.Get_Host_By_Address`.\n+the first call to ``get*by*`` functions, which are used to implement\n+``GNAT.Sockets.Get_Host_By_Name`` and\n+``GNAT.Sockets.Get_Host_By_Address``.\n If such initialization occurs within an Ada task, and the stack size for\n the task is the default size, a stack overflow may occur.\n \n To avoid this overflow, the user should either ensure that the first call\n-to `GNAT.Sockets.Get_Host_By_Name` or\n-`GNAT.Sockets.Get_Host_By_Addrss`\n-occurs in the environment task, or use `pragma Storage_Size` to\n+to ``GNAT.Sockets.Get_Host_By_Name`` or\n+``GNAT.Sockets.Get_Host_By_Addrss``\n+occurs in the environment task, or use ``pragma Storage_Size`` to\n specify a sufficiently large size for the stack of the task that contains\n this call.\n \n@@ -359,20 +361,20 @@ platforms.\n   using the command-line interface.\n \n   In order to install one of the GNAT installers from the command\n-  line you should pass parameter `/S` (and, optionally,\n-  `/D=<directory>`) as command-line arguments.\n+  line you should pass parameter :switch:`/S` (and, optionally,\n+  :switch:`/D=<directory>`) as command-line arguments.\n \n .. only:: PRO\n \n    For example, for an unattended installation of\n    GNAT 7.0.2 into the default directory\n-   `C:\\\\GNATPRO\\\\7.0.2` you would run:\n+   ``C:\\\\GNATPRO\\\\7.0.2`` you would run:\n \n      ::\n \n         gnatpro-7.0.2-i686-pc-mingw32-bin.exe /S\n \n-   To install into a custom directory, say, `C:\\\\TOOLS\\\\GNATPRO\\\\7.0.2`:\n+   To install into a custom directory, say, ``C:\\\\TOOLS\\\\GNATPRO\\\\7.0.2``:\n \n      ::\n \n@@ -381,7 +383,7 @@ platforms.\n .. only:: GPL\n \n    For example, for an unattended installation of\n-   GNAT 2012 into `C:\\\\GNAT\\\\2012`:\n+   GNAT 2012 into ``C:\\\\GNAT\\\\2012``:\n \n      ::\n \n@@ -402,16 +404,16 @@ Using GNAT on Windows\n ---------------------\n \n One of the strengths of the GNAT technology is that its tool set\n-(*gcc*, *gnatbind*, *gnatlink*, *gnatmake*, the\n-`gdb` debugger, etc.) is used in the same way regardless of the\n+(``gcc``, ``gnatbind``, ``gnatlink``, ``gnatmake``, the\n+``gdb`` debugger, etc.) is used in the same way regardless of the\n platform.\n \n On Windows this tool set is complemented by a number of Microsoft-specific\n tools that have been provided to facilitate interoperability with Windows\n when this is required. With these tools:\n \n \n-* You can build applications using the `CONSOLE` or `WINDOWS`\n+* You can build applications using the ``CONSOLE`` or ``WINDOWS``\n   subsystems.\n \n * You can use any Dynamically Linked Library (DLL) in your Ada code (both\n@@ -430,12 +432,12 @@ Other restrictions about specific features like Windows Resources and DLLs\n are listed in separate sections below.\n \n \n-* It is not possible to use `GetLastError` and `SetLastError`\n+* It is not possible to use ``GetLastError`` and ``SetLastError``\n   when tasking, protected records, or exceptions are used. In these\n   cases, in order to implement Ada semantics, the GNAT run-time system\n   calls certain Win32 routines that set the last error variable to 0 upon\n-  success. It should be possible to use `GetLastError` and\n-  `SetLastError` when tasking, protected record, and exception\n+  success. It should be possible to use ``GetLastError`` and\n+  ``SetLastError`` when tasking, protected record, and exception\n   features are not used, but it is not guaranteed to work.\n \n * It is not possible to link against Microsoft C++ libraries except for\n@@ -466,7 +468,7 @@ Using a network installation of GNAT\n Make sure the system on which GNAT is installed is accessible from the\n current machine, i.e., the install location is shared over the network.\n Shared resources are accessed on Windows by means of UNC paths, which\n-have the format `\\\\\\\\server\\\\sharename\\\\path`\n+have the format ``\\\\\\\\server\\\\sharename\\\\path``\n \n In order to use such a network installation, simply add the UNC path of the\n :file:`bin` directory of your GNAT installation in front of your PATH. For\n@@ -491,12 +493,12 @@ CONSOLE and WINDOWS subsystems\n .. index:: WINDOWS Subsystem\n .. index:: -mwindows\n \n-There are two main subsystems under Windows. The `CONSOLE` subsystem\n+There are two main subsystems under Windows. The ``CONSOLE`` subsystem\n (which is the default subsystem) will always create a console when\n launching the application. This is not something desirable when the\n application has a Windows GUI. To get rid of this console the\n-application must be using the `WINDOWS` subsystem. To do so\n-the *-mwindows* linker option must be specified.\n+application must be using the ``WINDOWS`` subsystem. To do so\n+the :switch:`-mwindows` linker option must be specified.\n \n    ::\n \n@@ -530,7 +532,7 @@ Disabling Command Line Argument Expansion\n \n .. index:: Command Line Argument Expansion\n \n-By default, an executable compiled for the **Windows** platform will do\n+By default, an executable compiled for the Windows platform will do\n the following postprocessing on the arguments passed on the command\n line:\n \n@@ -555,13 +557,13 @@ line:\n \n       Ada.Command_Line.Argument (1) -> \"*.txt\"\n \n-Note that if the program is launched from a shell such as **Cygwin** **Bash**\n+Note that if the program is launched from a shell such as Cygwin Bash\n then quote removal might be performed by the shell.\n \n In some contexts it might be useful to disable this feature (for example if\n the program performs its own argument expansion). In order to do this, a C\n symbol needs to be defined and set to ``0``. You can do this by\n-adding the following code fragment in one of your **Ada** units:\n+adding the following code fragment in one of your Ada units:\n \n .. code-block:: ada\n \n@@ -588,7 +590,7 @@ application that contains a mix of Ada and C/C++, the choice of your\n Windows C/C++ development environment conditions your overall\n interoperability strategy.\n \n-If you use *gcc* or Microsoft C to compile the non-Ada part of\n+If you use ``gcc`` or Microsoft C to compile the non-Ada part of\n your application, there are no Windows-specific restrictions that\n affect the overall interoperability with your Ada code. If you do want\n to use the Microsoft tools for your C++ code, you have two choices:\n@@ -649,38 +651,38 @@ This section pertain only to Win32. On Win64 there is a single native\n calling convention. All convention specifiers are ignored on this\n platform.\n \n-When a subprogram `F` (caller) calls a subprogram `G`\n-(callee), there are several ways to push `G`'s parameters on the\n+When a subprogram ``F`` (caller) calls a subprogram ``G``\n+(callee), there are several ways to push ``G``\\ 's parameters on the\n stack and there are several possible scenarios to clean up the stack\n-upon `G`'s return. A calling convention is an agreed upon software\n-protocol whereby the responsibilities between the caller (`F`) and\n-the callee (`G`) are clearly defined. Several calling conventions\n+upon ``G``\\ 's return. A calling convention is an agreed upon software\n+protocol whereby the responsibilities between the caller (``F``) and\n+the callee (``G``) are clearly defined. Several calling conventions\n are available for Windows:\n \n-* `C` (Microsoft defined)\n+* ``C`` (Microsoft defined)\n \n-* `Stdcall` (Microsoft defined)\n+* ``Stdcall`` (Microsoft defined)\n \n-* `Win32` (GNAT specific)\n+* ``Win32`` (GNAT specific)\n \n-* `DLL` (GNAT specific)\n+* ``DLL`` (GNAT specific)\n \n \n .. _C_Calling_Convention:\n \n-`C` Calling Convention\n-\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n+``C`` Calling Convention\n+\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n \n This is the default calling convention used when interfacing to C/C++\n-routines compiled with either *gcc* or Microsoft Visual C++.\n+routines compiled with either ``gcc`` or Microsoft Visual C++.\n \n-In the `C` calling convention subprogram parameters are pushed on the\n+In the ``C`` calling convention subprogram parameters are pushed on the\n stack by the caller from right to left. The caller itself is in charge of\n cleaning up the stack after the call. In addition, the name of a routine\n-with `C` calling convention is mangled by adding a leading underscore.\n+with ``C`` calling convention is mangled by adding a leading underscore.\n \n The name to use on the Ada side when importing (or exporting) a routine\n-with `C` calling convention is the name of the routine. For\n+with ``C`` calling convention is the name of the routine. For\n instance the C function:\n \n    ::\n@@ -694,38 +696,38 @@ should be imported from Ada as follows:\n      function Get_Val (V : Interfaces.C.long) return Interfaces.C.int;\n      pragma Import (C, Get_Val, External_Name => \"get_val\");\n \n-Note that in this particular case the `External_Name` parameter could\n+Note that in this particular case the ``External_Name`` parameter could\n have been omitted since, when missing, this parameter is taken to be the\n-name of the Ada entity in lower case. When the `Link_Name` parameter\n+name of the Ada entity in lower case. When the ``Link_Name`` parameter\n is missing, as in the above example, this parameter is set to be the\n-`External_Name` with a leading underscore.\n+``External_Name`` with a leading underscore.\n \n-When importing a variable defined in C, you should always use the `C`\n+When importing a variable defined in C, you should always use the ``C``\n calling convention unless the object containing the variable is part of a\n-DLL (in which case you should use the `Stdcall` calling\n+DLL (in which case you should use the ``Stdcall`` calling\n convention, :ref:`Stdcall_Calling_Convention`).\n \n \n .. _Stdcall_Calling_Convention:\n \n-`Stdcall` Calling Convention\n-\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n+``Stdcall`` Calling Convention\n+\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n \n This convention, which was the calling convention used for Pascal\n programs, is used by Microsoft for all the routines in the Win32 API for\n efficiency reasons. It must be used to import any routine for which this\n convention was specified.\n \n-In the `Stdcall` calling convention subprogram parameters are pushed\n+In the ``Stdcall`` calling convention subprogram parameters are pushed\n on the stack by the caller from right to left. The callee (and not the\n caller) is in charge of cleaning the stack on routine exit. In addition,\n-the name of a routine with `Stdcall` calling convention is mangled by\n-adding a leading underscore (as for the `C` calling convention) and a\n-trailing :samp:`@{nn}`, where `nn` is the overall size (in\n+the name of a routine with ``Stdcall`` calling convention is mangled by\n+adding a leading underscore (as for the ``C`` calling convention) and a\n+trailing :samp:`@{nn}`, where ``nn`` is the overall size (in\n bytes) of the parameters passed to the routine.\n \n The name to use on the Ada side when importing a C routine with a\n-`Stdcall` calling convention is the name of the C routine. The leading\n+``Stdcall`` calling convention is the name of the C routine. The leading\n underscore and trailing :samp:`@{nn}` are added automatically by\n the compiler. For instance the Win32 function:\n \n@@ -741,7 +743,7 @@ should be imported from Ada as follows:\n      pragma Import (Stdcall, Get_Val);\n      --  On the x86 a long is 4 bytes, so the Link_Name is \"_get_val@4\"\n \n-As for the `C` calling convention, when the `External_Name`\n+As for the ``C`` calling convention, when the ``External_Name``\n parameter is missing, it is taken to be the name of the Ada entity in lower\n case. If instead of writing the above import pragma you write:\n \n@@ -750,16 +752,16 @@ case. If instead of writing the above import pragma you write:\n      function Get_Val (V : Interfaces.C.long) return Interfaces.C.int;\n      pragma Import (Stdcall, Get_Val, External_Name => \"retrieve_val\");\n \n-then the imported routine is `_retrieve_val@4`. However, if instead\n-of specifying the `External_Name` parameter you specify the\n-`Link_Name` as in the following example:\n+then the imported routine is ``_retrieve_val@4``. However, if instead\n+of specifying the ``External_Name`` parameter you specify the\n+``Link_Name`` as in the following example:\n \n   .. code-block:: ada\n \n      function Get_Val (V : Interfaces.C.long) return Interfaces.C.int;\n      pragma Import (Stdcall, Get_Val, Link_Name => \"retrieve_val\");\n \n-then the imported routine is `retrieve_val`, that is, there is no\n+then the imported routine is ``retrieve_val``, that is, there is no\n decoration at all. No leading underscore and no Stdcall suffix\n :samp:`@{nn}`.\n \n@@ -783,25 +785,25 @@ then, to access this variable from Ada you should write:\n       pragma Import (Stdcall, My_Var);\n \n Note that to ease building cross-platform bindings this convention\n-will be handled as a `C` calling convention on non-Windows platforms.\n+will be handled as a ``C`` calling convention on non-Windows platforms.\n \n \n .. _Win32_Calling_Convention:\n \n-`Win32` Calling Convention\n-\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n+``Win32`` Calling Convention\n+\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n \n This convention, which is GNAT-specific is fully equivalent to the\n-`Stdcall` calling convention described above.\n+``Stdcall`` calling convention described above.\n \n \n .. _DLL_Calling_Convention:\n \n-`DLL` Calling Convention\n-\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n+``DLL`` Calling Convention\n+\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n \n This convention, which is GNAT-specific is fully equivalent to the\n-`Stdcall` calling convention described above.\n+``Stdcall`` calling convention described above.\n \n \n .. _Introduction_to_Dynamic_Link_Libraries_DLLs:\n@@ -852,8 +854,8 @@ and you run your application, here is what happens:\n   which is part of your application are initialized with the addresses\n   of the routines and variables in :file:`API.dll`.\n \n-* If present in :file:`API.dll`, routines `DllMain` or\n-  `DllMainCRTStartup` are invoked. These routines typically contain\n+* If present in :file:`API.dll`, routines ``DllMain`` or\n+  ``DllMainCRTStartup`` are invoked. These routines typically contain\n   the initialization code needed for the well-being of the routines and\n   variables exported by the DLL.\n \n@@ -865,7 +867,7 @@ non-relocatable DLLs overlap and these happen to be used by the same\n application, a conflict will occur and the application will run\n incorrectly. Hence, when possible, it is always preferable to use and\n build relocatable DLLs. Both relocatable and non-relocatable DLLs are\n-supported by GNAT. Note that the *-s* linker option (see GNU Linker\n+supported by GNAT. Note that the :switch:`-s` linker option (see GNU Linker\n User's Guide) removes the debugging symbols from the DLL but the DLL can\n still be relocated.\n \n@@ -898,14 +900,14 @@ you must have:\n * The actual DLL, :file:`API.dll`.\n \n Once you have all the above, to compile an Ada application that uses the\n-services of :file:`API.dll` and whose main subprogram is `My_Ada_App`,\n+services of :file:`API.dll` and whose main subprogram is ``My_Ada_App``,\n you simply issue the command\n \n   ::\n \n       $ gnatmake my_ada_app -largs -lAPI\n \n-The argument *-largs -lAPI* at the end of the *gnatmake* command\n+The argument :switch:`-largs -lAPI` at the end of the ``gnatmake`` command\n tells the GNAT linker to look for an import library. The linker will\n look for a library name in this specific order:\n \n@@ -926,8 +928,8 @@ following pragma\n \n       pragma Linker_Options (\"-lAPI\");\n \n-you do not have to add *-largs -lAPI* at the end of the\n-*gnatmake* command.\n+you do not have to add :switch:`-largs -lAPI` at the end of the\n+``gnatmake`` command.\n \n If any one of the items above is missing you will have to create it\n yourself. The following sections explain how to do so using as an\n@@ -993,30 +995,30 @@ DLL. Otherwise read on.\n As previously mentioned, and unlike Unix systems, the list of symbols\n that are exported from a DLL must be provided explicitly in Windows.\n The main goal of a definition file is precisely that: list the symbols\n-exported by a DLL. A definition file (usually a file with a `.def`\n+exported by a DLL. A definition file (usually a file with a ``.def``\n suffix) has the following structure:\n \n   ::\n \n-      [LIBRARY `name`]\n-      [DESCRIPTION `string`]\n+      [LIBRARY ``name``]\n+      [DESCRIPTION ``string``]\n       EXPORTS\n-         `symbol1`\n-         `symbol2`\n+         ``symbol1``\n+         ``symbol2``\n          ...\n \n-*LIBRARY `name`*\n+*LIBRARY name*\n   This section, which is optional, gives the name of the DLL.\n \n \n-*DESCRIPTION `string`*\n+*DESCRIPTION string*\n   This section, which is optional, gives a description string that will be\n   embedded in the import library.\n \n \n *EXPORTS*\n   This section gives the list of exported symbols (procedures, functions or\n-  variables). For instance in the case of :file:`API.dll` the `EXPORTS`\n+  variables). For instance in the case of :file:`API.dll` the ``EXPORTS``\n   section of :file:`API.def` looks like:\n \n   ::\n@@ -1039,21 +1041,21 @@ sections are not relevant to the discussion at hand.\n \n You can automatically create the definition file :file:`API.def`\n (see :ref:`The Definition File <The_Definition_File>`) from a DLL.\n-For that use the `dlltool` program as follows:\n+For that use the ``dlltool`` program as follows:\n \n   ::\n \n       $ dlltool API.dll -z API.def --export-all-symbols\n \n-  Note that if some routines in the DLL have the `Stdcall` convention\n+  Note that if some routines in the DLL have the ``Stdcall`` convention\n   (:ref:`Windows_Calling_Conventions`) with stripped :samp:`@{nn}`\n   suffix then you'll have to edit :file:`api.def` to add it, and specify\n-  *-k* to *gnatdll* when creating the import library.\n+  :switch:`-k` to ``gnatdll`` when creating the import library.\n \n   Here are some hints to find the right :samp:`@{nn}` suffix.\n \n   - If you have the Microsoft import library (.lib), it is possible to get\n-    the right symbols by using Microsoft `dumpbin` tool (see the\n+    the right symbols by using Microsoft ``dumpbin`` tool (see the\n     corresponding Microsoft documentation for further details).\n \n     ::\n@@ -1070,22 +1072,22 @@ For that use the `dlltool` program as follows:\n .. rubric:: GNAT-Style Import Library\n \n To create a static import library from :file:`API.dll` with the GNAT tools\n-you should create the .def file, then use `gnatdll` tool\n+you should create the .def file, then use ``gnatdll`` tool\n (see :ref:`Using_gnatdll`) as follows:\n \n   ::\n \n       $ gnatdll -e API.def -d API.dll\n \n-  `gnatdll` takes as input a definition file :file:`API.def` and the\n+  ``gnatdll`` takes as input a definition file :file:`API.def` and the\n   name of the DLL containing the services listed in the definition file\n   :file:`API.dll`. The name of the static import library generated is\n   computed from the name of the definition file as follows: if the\n-  definition file name is `xyz``.def`, the import library name will\n-  be `lib``xyz``.a`. Note that in the previous example option\n-  *-e* could have been removed because the name of the definition\n-  file (before the '`.def`' suffix) is the same as the name of the\n-  DLL (:ref:`Using_gnatdll` for more information about `gnatdll`).\n+  definition file name is :file:`xyz.def`, the import library name will\n+  be :file:`libxyz.a`. Note that in the previous example option\n+  :switch:`-e` could have been removed because the name of the definition\n+  file (before the ``.def`` suffix) is the same as the name of the\n+  DLL (:ref:`Using_gnatdll` for more information about ``gnatdll``).\n \n \n .. _MSVS-Style_Import_Library:\n@@ -1098,7 +1100,7 @@ tools (:ref:`Mixed-Language_Programming_on_Windows`).\n \n To create a Microsoft-style import library for :file:`API.dll` you\n should create the .def file, then build the actual import library using\n-Microsoft's `lib` utility:\n+Microsoft's ``lib`` utility:\n \n   ::\n \n@@ -1112,7 +1114,7 @@ Microsoft's `lib` utility:\n       LIBRARY      \"API\"\n \n   See the Microsoft documentation for further details about the usage of\n-  `lib`.\n+  ``lib``.\n \n \n .. _Building_DLLs_with_GNAT_Project_files:\n@@ -1127,7 +1129,7 @@ See the *Library Projects* section in the *GNAT Project Manager*\n chapter of the *GPRbuild User's Guide*.\n \n Due to a system limitation, it is not possible under Windows to create threads\n-when inside the `DllMain` routine which is used for auto-initialization\n+when inside the ``DllMain`` routine which is used for auto-initialization\n of shared libraries, so it is not possible to have library level tasks in SALs.\n \n \n@@ -1145,19 +1147,19 @@ and use DLLs with GNAT.\n \n * Building object files.\n   The first step is to build all objects files that are to be included\n-  into the DLL. This is done by using the standard *gnatmake* tool.\n+  into the DLL. This is done by using the standard ``gnatmake`` tool.\n \n * Building the DLL.\n-  To build the DLL you must use *gcc*'s *-shared* and\n-  *-shared-libgcc* options. It is quite simple to use this method:\n+  To build the DLL you must use the ``gcc`` :switch:`-shared` and\n+  :switch:`-shared-libgcc` options. It is quite simple to use this method:\n \n   ::\n \n       $ gcc -shared -shared-libgcc -o api.dll obj1.o obj2.o ...\n \n   It is important to note that in this case all symbols found in the\n   object files are automatically exported. It is possible to restrict\n-  the set of symbols to export by passing to *gcc* a definition\n+  the set of symbols to export by passing to ``gcc`` a definition\n   file (see :ref:`The Definition File <The_Definition_File>`).\n   For example:\n \n@@ -1183,7 +1185,7 @@ and use DLLs with GNAT.\n \n At this point it is possible to use the DLL by directly linking\n against it. Note that you must use the GNAT shared runtime when using\n-GNAT shared libraries. This is achieved by using *-shared* binder's\n+GNAT shared libraries. This is achieved by using the :switch:`-shared` binder\n option.\n \n   ::\n@@ -1203,26 +1205,26 @@ Note that it is preferred to use GNAT Project files\n DLL support (:ref:`Building_DLLs_with_GNAT`) or to build DLLs.\n \n This section explains how to build DLLs containing Ada code using\n-`gnatdll`. These DLLs will be referred to as Ada DLLs in the\n+``gnatdll``. These DLLs will be referred to as Ada DLLs in the\n remainder of this section.\n \n The steps required to build an Ada DLL that is to be used by Ada as well as\n non-Ada applications are as follows:\n \n-* You need to mark each Ada *entity* exported by the DLL with a `C` or\n-  `Stdcall` calling convention to avoid any Ada name mangling for the\n+* You need to mark each Ada entity exported by the DLL with a ``C`` or\n+  ``Stdcall`` calling convention to avoid any Ada name mangling for the\n   entities exported by the DLL\n   (see :ref:`Exporting Ada Entities <Exporting_Ada_Entities>`). You can\n   skip this step if you plan to use the Ada DLL only from Ada applications.\n \n * Your Ada code must export an initialization routine which calls the routine\n-  `adainit` generated by *gnatbind* to perform the elaboration of\n+  ``adainit`` generated by ``gnatbind`` to perform the elaboration of\n   the Ada code in the DLL (:ref:`Ada_DLLs_and_Elaboration`). The initialization\n   routine exported by the Ada DLL must be invoked by the clients of the DLL\n   to initialize the DLL.\n \n * When useful, the DLL should also export a finalization routine which calls\n-  routine `adafinal` generated by *gnatbind* to perform the\n+  routine ``adafinal`` generated by ``gnatbind`` to perform the\n   finalization of the Ada code in the DLL (:ref:`Ada_DLLs_and_Finalization`).\n   The finalization routine exported by the Ada DLL must be invoked by the\n   clients of the DLL when the DLL services are no further needed.\n@@ -1233,12 +1235,12 @@ non-Ada applications are as follows:\n * You must provide a definition file listing the exported entities\n   (:ref:`The Definition File <The_Definition_File>`).\n \n-* Finally you must use `gnatdll` to produce the DLL and the import\n+* Finally you must use ``gnatdll`` to produce the DLL and the import\n   library (:ref:`Using_gnatdll`).\n \n-Note that a relocatable DLL stripped using the `strip`\n+Note that a relocatable DLL stripped using the ``strip``\n binutils tool will not be relocatable anymore. To build a DLL without\n-debug information pass `-largs -s` to `gnatdll`. This\n+debug information pass :switch:`-largs -s` to ``gnatdll``. This\n restriction does not apply to a DLL built using a Library Project.\n See the *Library Projects* section in the *GNAT Project Manager*\n chapter of the *GPRbuild User's Guide*.\n@@ -1259,7 +1261,7 @@ one in the main program.\n \n It is therefore not possible to exchange GNAT run-time objects between the\n Ada DLL and the main Ada program. Example of GNAT run-time objects are file\n-handles (e.g., `Text_IO.File_Type`), tasks types, protected objects\n+handles (e.g., ``Text_IO.File_Type``), tasks types, protected objects\n types, etc.\n \n It is completely safe to exchange plain elementary, array or record types,\n@@ -1275,9 +1277,9 @@ Exporting Ada Entities\n \n Building a DLL is a way to encapsulate a set of services usable from any\n application. As a result, the Ada entities exported by a DLL should be\n-exported with the `C` or `Stdcall` calling conventions to avoid\n+exported with the ``C`` or ``Stdcall`` calling conventions to avoid\n any Ada name mangling. As an example here is an Ada package\n-`API`, spec and body, exporting two procedures, a function, and a\n+``API``, spec and body, exporting two procedures, a function, and a\n variable:\n \n \n@@ -1327,7 +1329,7 @@ variable:\n      end API;\n \n If the Ada DLL you are building will only be used by Ada applications\n-you do not have to export Ada entities with a `C` or `Stdcall`\n+you do not have to export Ada entities with a ``C`` or ``Stdcall``\n convention. As an example, the previous package could be written as\n follows:\n \n@@ -1359,8 +1361,8 @@ follows:\n         --  The remainder of this package body is unchanged.\n      end API;\n \n-Note that if you do not export the Ada entities with a `C` or\n-`Stdcall` convention you will have to provide the mangled Ada names\n+Note that if you do not export the Ada entities with a ``C`` or\n+``Stdcall`` convention you will have to provide the mangled Ada names\n in the definition file of the Ada DLL\n (:ref:`Creating_the_Definition_File`).\n \n@@ -1378,20 +1380,20 @@ user of your DLL must do is elaborate the Ada code\n (:ref:`Elaboration_Order_Handling_in_GNAT`).\n \n To achieve this you must export an initialization routine\n-(`Initialize_API` in the previous example), which must be invoked\n+(``Initialize_API`` in the previous example), which must be invoked\n before using any of the DLL services. This elaboration routine must call\n-the Ada elaboration routine `adainit` generated by the GNAT binder\n+the Ada elaboration routine ``adainit`` generated by the GNAT binder\n (:ref:`Binding_with_Non-Ada_Main_Programs`). See the body of\n-`Initialize_Api` for an example. Note that the GNAT binder is\n-automatically invoked during the DLL build process by the `gnatdll`\n+``Initialize_Api`` for an example. Note that the GNAT binder is\n+automatically invoked during the DLL build process by the ``gnatdll``\n tool (:ref:`Using_gnatdll`).\n \n When a DLL is loaded, Windows systematically invokes a routine called\n-`DllMain`. It would therefore be possible to call `adainit`\n-directly from `DllMain` without having to provide an explicit\n+``DllMain``. It would therefore be possible to call ``adainit``\n+directly from ``DllMain`` without having to provide an explicit\n initialization routine. Unfortunately, it is not possible to call\n-`adainit` from the `DllMain` if your program has library level\n-tasks because access to the `DllMain` entry point is serialized by\n+``adainit`` from the ``DllMain`` if your program has library level\n+tasks because access to the ``DllMain`` entry point is serialized by\n the system (that is, only a single thread can execute 'through' it at a\n time), which means that the GNAT run time will deadlock waiting for the\n newly created task to complete its initialization.\n@@ -1408,11 +1410,11 @@ When the services of an Ada DLL are no longer needed, the client code should\n invoke the DLL finalization routine, if available. The DLL finalization\n routine is in charge of releasing all resources acquired by the DLL. In the\n case of the Ada code contained in the DLL, this is achieved by calling\n-routine `adafinal` generated by the GNAT binder\n+routine ``adafinal`` generated by the GNAT binder\n (:ref:`Binding_with_Non-Ada_Main_Programs`).\n-See the body of `Finalize_Api` for an\n+See the body of ``Finalize_Api`` for an\n example. As already pointed out the GNAT binder is automatically invoked\n-during the DLL build process by the `gnatdll` tool\n+during the DLL build process by the ``gnatdll`` tool\n (:ref:`Using_gnatdll`).\n \n \n@@ -1423,7 +1425,7 @@ Creating a Spec for Ada DLLs\n \n To use the services exported by the Ada DLL from another programming\n language (e.g., C), you have to translate the specs of the exported Ada\n-entities in that language. For instance in the case of `API.dll`,\n+entities in that language. For instance in the case of ``API.dll``,\n the corresponding C header file could look like:\n \n   .. code-block:: c\n@@ -1435,10 +1437,10 @@ the corresponding C header file could look like:\n It is important to understand that when building an Ada DLL to be used by\n other Ada applications, you need two different specs for the packages\n contained in the DLL: one for building the DLL and the other for using\n-the DLL. This is because the `DLL` calling convention is needed to\n+the DLL. This is because the ``DLL`` calling convention is needed to\n use a variable defined in a DLL, but when building the DLL, the variable\n-must have either the `Ada` or `C` calling convention. As an\n-example consider a DLL comprising the following package `API`:\n+must have either the ``Ada`` or ``C`` calling convention. As an\n+example consider a DLL comprising the following package ``API``:\n \n   .. code-block:: ada\n \n@@ -1448,8 +1450,8 @@ example consider a DLL comprising the following package `API`:\n         --  Remainder of the package omitted.\n      end API;\n \n-After producing a DLL containing package `API`, the spec that\n-must be used to import `API.Count` from Ada code outside of the\n+After producing a DLL containing package ``API``, the spec that\n+must be used to import ``API.Count`` from Ada code outside of the\n DLL is:\n \n   .. code-block:: ada\n@@ -1467,8 +1469,8 @@ Creating the Definition File\n \n The definition file is the last file needed to build the DLL. It lists\n the exported symbols. As an example, the definition file for a DLL\n-containing only package `API` (where all the entities are exported\n-with a `C` calling convention) is:\n+containing only package ``API`` (where all the entities are exported\n+with a ``C`` calling convention) is:\n \n   ::\n \n@@ -1478,7 +1480,7 @@ with a `C` calling convention) is:\n         finalize_api\n         initialize_api\n \n-If the `C` calling convention is missing from package `API`,\n+If the ``C`` calling convention is missing from package ``API``,\n then the definition file contains the mangled Ada names of the above\n entities, which in this case are:\n \n@@ -1493,141 +1495,141 @@ entities, which in this case are:\n \n .. _Using_gnatdll:\n \n-Using `gnatdll`\n-\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n+Using ``gnatdll``\n+\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n \n .. index:: gnatdll\n \n-`gnatdll` is a tool to automate the DLL build process once all the Ada\n+``gnatdll`` is a tool to automate the DLL build process once all the Ada\n and non-Ada sources that make up your DLL have been compiled.\n-`gnatdll` is actually in charge of two distinct tasks: build the\n+``gnatdll`` is actually in charge of two distinct tasks: build the\n static import library for the DLL and the actual DLL. The form of the\n-`gnatdll` command is\n+``gnatdll`` command is\n \n   ::\n \n-      $ gnatdll [`switches`] `list-of-files` [-largs `opts`]\n+      $ gnatdll [ switches ] list-of-files [ -largs opts ]\n \n-where `list-of-files` is a list of ALI and object files. The object\n+where ``list-of-files`` is a list of ALI and object files. The object\n file list must be the exact list of objects corresponding to the non-Ada\n sources whose services are to be included in the DLL. The ALI file list\n must be the exact list of ALI files for the corresponding Ada sources\n-whose services are to be included in the DLL. If `list-of-files` is\n+whose services are to be included in the DLL. If ``list-of-files`` is\n missing, only the static import library is generated.\n \n-You may specify any of the following switches to `gnatdll`:\n+You may specify any of the following switches to ``gnatdll``:\n \n \n   .. index:: -a (gnatdll)\n \n-:samp:`-a[{address}]`\n-  Build a non-relocatable DLL at `address`. If `address` is not\n-  specified the default address `0x11000000` will be used. By default,\n-  when this switch is missing, `gnatdll` builds relocatable DLL. We\n+:switch:`-a[{address}]`\n+  Build a non-relocatable DLL at ``address``. If ``address`` is not\n+  specified the default address ``0x11000000`` will be used. By default,\n+  when this switch is missing, ``gnatdll`` builds relocatable DLL. We\n   advise the reader to build relocatable DLL.\n \n \n   .. index:: -b (gnatdll)\n \n-:samp:`-b {address}`\n+:switch:`-b {address}`\n   Set the relocatable DLL base address. By default the address is\n-  `0x11000000`.\n+  ``0x11000000``.\n \n \n   .. index:: -bargs (gnatdll)\n \n-:samp:`-bargs {opts}`\n-  Binder options. Pass `opts` to the binder.\n+:switch:`-bargs {opts}`\n+  Binder options. Pass ``opts`` to the binder.\n \n \n   .. index:: -d (gnatdll)\n \n-:samp:`-d {dllfile}`\n-  `dllfile` is the name of the DLL. This switch must be present for\n-  `gnatdll` to do anything. The name of the generated import library is\n-  obtained algorithmically from `dllfile` as shown in the following\n-  example: if `dllfile` is `xyz.dll`, the import library name is\n-  `libxyz.dll.a`. The name of the definition file to use (if not specified\n-  by option *-e*) is obtained algorithmically from `dllfile`\n+:switch:`-d {dllfile}`\n+  ``dllfile`` is the name of the DLL. This switch must be present for\n+  ``gnatdll`` to do anything. The name of the generated import library is\n+  obtained algorithmically from ``dllfile`` as shown in the following\n+  example: if ``dllfile`` is :file:`xyz.dll`, the import library name is\n+  :file:`libxyz.dll.a`. The name of the definition file to use (if not specified\n+  by option :switch:`-e`) is obtained algorithmically from ``dllfile``\n   as shown in the following example:\n-  if `dllfile` is `xyz.dll`, the definition\n-  file used is `xyz.def`.\n+  if ``dllfile`` is :file:`xyz.dll`, the definition\n+  file used is :file:`xyz.def`.\n \n \n   .. index:: -e (gnatdll)\n \n-:samp:`-e {deffile}`\n-  `deffile` is the name of the definition file.\n+:switch:`-e {deffile}`\n+  ``deffile`` is the name of the definition file.\n \n \n   .. index:: -g (gnatdll)\n \n-:samp:`-g`\n+:switch:`-g`\n   Generate debugging information. This information is stored in the object\n   file and copied from there to the final DLL file by the linker,\n   where it can be read by the debugger. You must use the\n-  *-g* switch if you plan on using the debugger or the symbolic\n+  :switch:`-g` switch if you plan on using the debugger or the symbolic\n   stack traceback.\n \n \n   .. index:: -h (gnatdll)\n \n-:samp:`-h`\n-  Help mode. Displays `gnatdll` switch usage information.\n+:switch:`-h`\n+  Help mode. Displays ``gnatdll`` switch usage information.\n \n \n   .. index:: -I (gnatdll)\n \n-:samp:`-I{dir}`\n-  Direct `gnatdll` to search the `dir` directory for source and\n+:switch:`-I{dir}`\n+  Direct ``gnatdll`` to search the ``dir`` directory for source and\n   object files needed to build the DLL.\n   (:ref:`Search_Paths_and_the_Run-Time_Library_RTL`).\n \n \n   .. index:: -k (gnatdll)\n \n-:samp:`-k`\n+:switch:`-k`\n   Removes the :samp:`@{nn}` suffix from the import library's exported\n   names, but keeps them for the link names. You must specify this\n-  option if you want to use a `Stdcall` function in a DLL for which\n+  option if you want to use a ``Stdcall`` function in a DLL for which\n   the :samp:`@{nn}` suffix has been removed. This is the case for most\n   of the Windows NT DLL for example. This option has no effect when\n-  *-n* option is specified.\n+  :switch:`-n` option is specified.\n \n \n   .. index:: -l (gnatdll)\n \n-:samp:`-l {file}`\n+:switch:`-l {file}`\n   The list of ALI and object files used to build the DLL are listed in\n-  `file`, instead of being given in the command line. Each line in\n-  `file` contains the name of an ALI or object file.\n+  ``file``, instead of being given in the command line. Each line in\n+  ``file`` contains the name of an ALI or object file.\n \n \n   .. index:: -n (gnatdll)\n \n-:samp:`-n`\n+:switch:`-n`\n   No Import. Do not create the import library.\n \n \n   .. index:: -q (gnatdll)\n \n-:samp:`-q`\n+:switch:`-q`\n   Quiet mode. Do not display unnecessary messages.\n \n \n   .. index:: -v (gnatdll)\n \n-:samp:`-v`\n+:switch:`-v`\n   Verbose mode. Display extra information.\n \n \n   .. index:: -largs (gnatdll)\n \n-:samp:`-largs {opts}`\n-  Linker options. Pass `opts` to the linker.\n+:switch:`-largs {opts}`\n+  Linker options. Pass ``opts`` to the linker.\n \n \n-.. rubric:: `gnatdll` Example\n+.. rubric:: ``gnatdll`` Example\n \n As an example the command to build a relocatable DLL from :file:`api.adb`\n once :file:`api.adb` has been compiled and :file:`api.def` created is\n@@ -1651,20 +1653,20 @@ Alternatively if you want to create just the import library, type:\n      $ gnatdll -d api.dll\n \n \n-.. rubric:: `gnatdll` behind the Scenes\n+.. rubric:: ``gnatdll`` behind the Scenes\n \n-This section details the steps involved in creating a DLL. `gnatdll`\n+This section details the steps involved in creating a DLL. ``gnatdll``\n does these steps for you. Unless you are interested in understanding what\n goes on behind the scenes, you should skip this section.\n \n-We use the previous example of a DLL containing the Ada package `API`,\n+We use the previous example of a DLL containing the Ada package ``API``,\n to illustrate the steps necessary to build a DLL. The starting point is a\n set of objects that will make up the DLL and the corresponding ALI\n files. In the case of this example this means that :file:`api.o` and\n-:file:`api.ali` are available. To build a relocatable DLL, `gnatdll` does\n+:file:`api.ali` are available. To build a relocatable DLL, ``gnatdll`` does\n the following:\n \n-* `gnatdll` builds the base file (:file:`api.base`). A base file gives\n+* ``gnatdll`` builds the base file (:file:`api.base`). A base file gives\n   the information necessary to generate relocation information for the\n   DLL.\n \n@@ -1673,13 +1675,13 @@ the following:\n       $ gnatbind -n api\n       $ gnatlink api -o api.jnk -mdll -Wl,--base-file,api.base\n \n-  In addition to the base file, the *gnatlink* command generates an\n-  output file :file:`api.jnk` which can be discarded. The *-mdll* switch\n-  asks *gnatlink* to generate the routines `DllMain` and\n-  `DllMainCRTStartup` that are called by the Windows loader when the DLL\n+  In addition to the base file, the ``gnatlink`` command generates an\n+  output file :file:`api.jnk` which can be discarded. The :switch:`-mdll` switch\n+  asks ``gnatlink`` to generate the routines ``DllMain`` and\n+  ``DllMainCRTStartup`` that are called by the Windows loader when the DLL\n   is loaded into memory.\n \n-* `gnatdll` uses `dlltool` (see :ref:`Using dlltool <Using_dlltool>`) to build the\n+* ``gnatdll`` uses ``dlltool`` (see :ref:`Using dlltool <Using_dlltool>`) to build the\n   export table (:file:`api.exp`). The export table contains the relocation\n   information in a form which can be used during the final link to ensure\n   that the Windows loader is able to place the DLL anywhere in memory.\n@@ -1689,9 +1691,9 @@ the following:\n       $ dlltool --dllname api.dll --def api.def --base-file api.base \\\\\n                 --output-exp api.exp\n \n-* `gnatdll` builds the base file using the new export table. Note that\n-  *gnatbind* must be called once again since the binder generated file\n-  has been deleted during the previous call to *gnatlink*.\n+* ``gnatdll`` builds the base file using the new export table. Note that\n+  ``gnatbind`` must be called once again since the binder generated file\n+  has been deleted during the previous call to ``gnatlink``.\n \n   ::\n \n@@ -1700,7 +1702,7 @@ the following:\n             -Wl,--base-file,api.base\n \n \n-* `gnatdll` builds the new export table using the new base file and\n+* ``gnatdll`` builds the new export table using the new base file and\n   generates the DLL import library :file:`libAPI.dll.a`.\n \n \n@@ -1709,7 +1711,7 @@ the following:\n       $ dlltool --dllname api.dll --def api.def --base-file api.base \\\\\n                 --output-exp api.exp --output-lib libAPI.a\n \n-* Finally `gnatdll` builds the relocatable DLL using the final export\n+* Finally ``gnatdll`` builds the relocatable DLL using the final export\n   table.\n \n   ::\n@@ -1720,78 +1722,78 @@ the following:\n \n .. _Using_dlltool:\n \n-.. rubric:: Using `dlltool`\n+.. rubric:: Using ``dlltool``\n \n-`dlltool` is the low-level tool used by `gnatdll` to build\n+``dlltool`` is the low-level tool used by ``gnatdll`` to build\n DLLs and static import libraries. This section summarizes the most\n-common `dlltool` switches. The form of the `dlltool` command\n+common ``dlltool`` switches. The form of the ``dlltool`` command\n is\n \n   ::\n \n     $ dlltool [`switches`]\n \n-`dlltool` switches include:\n+``dlltool`` switches include:\n \n \n .. index:: --base-file (dlltool)\n \n-:samp:`--base-file {basefile}`\n-  Read the base file `basefile` generated by the linker. This switch\n+:switch:`--base-file {basefile}`\n+  Read the base file ``basefile`` generated by the linker. This switch\n   is used to create a relocatable DLL.\n \n \n .. index:: --def (dlltool)\n \n-:samp:`--def {deffile}`\n+:switch:`--def {deffile}`\n   Read the definition file.\n \n \n .. index:: --dllname (dlltool)\n \n-:samp:`--dllname {name}`\n+:switch:`--dllname {name}`\n   Gives the name of the DLL. This switch is used to embed the name of the\n-  DLL in the static import library generated by `dlltool` with switch\n-  *--output-lib*.\n+  DLL in the static import library generated by ``dlltool`` with switch\n+  :switch:`--output-lib`.\n \n \n .. index:: -k (dlltool)\n \n-:samp:`-k`\n+:switch:`-k`\n   Kill :samp:`@{nn}` from exported names\n   (:ref:`Windows_Calling_Conventions`\n-  for a discussion about `Stdcall`-style symbols.\n+  for a discussion about ``Stdcall``-style symbols.\n \n \n .. index:: --help (dlltool)\n \n-:samp:`--help`\n-  Prints the `dlltool` switches with a concise description.\n+:switch:`--help`\n+  Prints the ``dlltool`` switches with a concise description.\n \n \n .. index:: --output-exp (dlltool)\n \n-:samp:`--output-exp {exportfile}`\n-  Generate an export file `exportfile`. The export file contains the\n+:switch:`--output-exp {exportfile}`\n+  Generate an export file ``exportfile``. The export file contains the\n   export table (list of symbols in the DLL) and is used to create the DLL.\n \n \n .. index:: --output-lib (dlltool)\n \n-:samp:`--output-lib {libfile}`\n-  Generate a static import library `libfile`.\n+:switch:`--output-lib {libfile}`\n+  Generate a static import library ``libfile``.\n \n \n .. index:: -v (dlltool)\n \n-:samp:`-v`\n+:switch:`-v`\n   Verbose mode.\n \n \n .. index:: --as (dlltool)\n \n-:samp:`--as {assembler-name}`\n-  Use `assembler-name` as the assembler. The default is `as`.\n+:switch:`--as {assembler-name}`\n+  Use ``assembler-name`` as the assembler. The default is ``as``.\n \n \n .. _GNAT_and_Windows_Resources:\n@@ -1857,8 +1859,8 @@ resource:\n        END\n      END\n \n-The value `0809` (langID) is for the U.K English language and\n-`04E4` (charsetID), which is equal to `1252` decimal, for\n+The value ``0809`` (langID) is for the U.K English language and\n+``04E4`` (charsetID), which is equal to ``1252`` decimal, for\n multilingual.\n \n This section explains how to build, compile and use resources. Note that this\n@@ -1876,8 +1878,8 @@ Building Resources\n A resource file is an ASCII file. By convention resource files have an\n :file:`.rc` extension.\n The easiest way to build a resource file is to use Microsoft tools\n-such as `imagedit.exe` to build bitmaps, icons and cursors and\n-`dlgedit.exe` to build dialogs.\n+such as ``imagedit.exe`` to build bitmaps, icons and cursors and\n+``dlgedit.exe`` to build dialogs.\n It is always possible to build an :file:`.rc` file yourself by writing a\n resource script.\n \n@@ -1897,22 +1899,22 @@ Compiling Resources\n \n This section describes how to build a GNAT-compatible (COFF) object file\n containing the resources. This is done using the Resource Compiler\n-`windres` as follows:\n+``windres`` as follows:\n \n   ::\n \n      $ windres -i myres.rc -o myres.o\n \n-By default `windres` will run *gcc* to preprocess the :file:`.rc`\n+By default ``windres`` will run ``gcc`` to preprocess the :file:`.rc`\n file. You can specify an alternate preprocessor (usually named\n-:file:`cpp.exe`) using the `windres` *--preprocessor*\n+:file:`cpp.exe`) using the ``windres`` :switch:`--preprocessor`\n parameter. A list of all possible options may be obtained by entering\n-the command `windres` *--help*.\n+the command ``windres`` :switch:`--help`.\n \n-It is also possible to use the Microsoft resource compiler `rc.exe`\n+It is also possible to use the Microsoft resource compiler ``rc.exe``\n to produce a :file:`.res` file (binary resource file). See the\n corresponding Microsoft documentation for further details. In this case\n-you need to use `windres` to translate the :file:`.res` file to a\n+you need to use ``windres`` to translate the :file:`.res` file to a\n GNAT-compatible object file as follows:\n \n   ::\n@@ -1929,7 +1931,7 @@ Using Resources\n \n To include the resource file in your program just add the\n GNAT-compatible object file for the resource(s) to the linker\n-arguments. With *gnatmake* this is done by using the *-largs*\n+arguments. With ``gnatmake`` this is done by using the :switch:`-largs`\n option:\n \n   ::\n@@ -1951,7 +1953,7 @@ be developed following the general guidelines outlined above; below is the\n cookbook-style sequence of steps to follow:\n \n 1. First develop and build the GNAT shared library using a library project\n-   (let's assume the project is `mylib.gpr`, producing the library `libmylib.dll`):\n+   (let's assume the project is :file:`mylib.gpr`, producing the library :file:`libmylib.dll`):\n \n   ::\n \n@@ -2000,15 +2002,15 @@ Debugging a DLL is similar to debugging a standard program. But\n we have to deal with two different executable parts: the DLL and the\n program that uses it. We have the following four possibilities:\n \n-* The program and the DLL are built with `GCC/GNAT`.\n+* The program and the DLL are built with GCC/GNAT.\n * The program is built with foreign tools and the DLL is built with\n-  `GCC/GNAT`.\n-* The program is built with `GCC/GNAT` and the DLL is built with\n+  GCC/GNAT.\n+* The program is built with GCC/GNAT and the DLL is built with\n   foreign tools.\n \n In this section we address only cases one and two above.\n There is no point in trying to debug\n-a DLL with `GNU/GDB`, if there is no GDB-compatible debugging\n+a DLL with GNU/GDB, if there is no GDB-compatible debugging\n information in it. To do so you must use a debugger compatible with the\n tools suite used to build the DLL.\n \n@@ -2017,17 +2019,17 @@ tools suite used to build the DLL.\n Program and DLL Both Built with GCC/GNAT\n \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n \n-This is the simplest case. Both the DLL and the program have `GDB`\n+This is the simplest case. Both the DLL and the program have ``GDB``\n compatible debugging information. It is then possible to break anywhere in\n the process. Let's suppose here that the main procedure is named\n-`ada_main` and that in the DLL there is an entry point named\n-`ada_dll`.\n+``ada_main`` and that in the DLL there is an entry point named\n+``ada_dll``.\n \n The DLL (:ref:`Introduction_to_Dynamic_Link_Libraries_DLLs`) and\n program must have been built with the debugging information (see GNAT -g\n switch). Here are the step-by-step instructions for debugging it:\n \n-* Launch `GDB` on the main program.\n+* Launch ``GDB`` on the main program.\n \n   ::\n \n@@ -2064,18 +2066,18 @@ Program Built with Foreign Tools and DLL Built with GCC/GNAT\n In this case things are slightly more complex because it is not possible to\n start the main program and then break at the beginning to load the DLL and the\n associated DLL debugging information. It is not possible to break at the\n-beginning of the program because there is no `GDB` debugging information,\n+beginning of the program because there is no ``GDB`` debugging information,\n and therefore there is no direct way of getting initial control. This\n section addresses this issue by describing some methods that can be used\n to break somewhere in the DLL to debug it.\n \n-First suppose that the main procedure is named `main` (this is for\n+First suppose that the main procedure is named ``main`` (this is for\n example some C code built with Microsoft Visual C) and that there is a\n-DLL named `test.dll` containing an Ada entry point named\n-`ada_dll`.\n+DLL named ``test.dll`` containing an Ada entry point named\n+``ada_dll``.\n \n The DLL (see :ref:`Introduction_to_Dynamic_Link_Libraries_DLLs`) must have\n-been built with debugging information (see GNAT `-g` option).\n+been built with debugging information (see the GNAT :switch:`-g` option).\n \n \n .. rubric:: Debugging the DLL Directly\n@@ -2141,7 +2143,7 @@ It is also possible to debug the DLL by attaching to a running process.\n \n .. index:: DLL debugging, attach to process\n \n-With `GDB` it is always possible to debug a running process by\n+With ``GDB`` it is always possible to debug a running process by\n attaching to it. It is possible to debug a DLL this way. The limitation\n of this approach is that the DLL must run long enough to perform the\n attach operation. It may be useful for instance to insert a time wasting\n@@ -2194,8 +2196,8 @@ approach to debug a program as described in\n \n .. _Setting_Stack_Size_from_gnatlink:\n \n-Setting Stack Size from *gnatlink*\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+Setting Stack Size from ``gnatlink``\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n It is possible to specify the program stack size at link time. On modern\n versions of Windows, starting with XP, this is mostly useful to set the size of\n@@ -2208,10 +2210,10 @@ tasks, and pragma Storage_Size has no effect.\n In particular, Stack Overflow checks are made against this\n link-time specified size.\n \n-This setting can be done with *gnatlink* using either of the following:\n+This setting can be done with ``gnatlink`` using either of the following:\n \n \n-* *-Xlinker* linker option\n+* :switch:`-Xlinker` linker option\n \n   ::\n \n@@ -2221,26 +2223,26 @@ This setting can be done with *gnatlink* using either of the following:\n   This sets the stack reserve size to 0x10000 bytes and the stack commit\n   size to 0x1000 bytes.\n \n-* *-Wl* linker option\n+* :switch:`-Wl` linker option\n \n   ::\n \n     $ gnatlink hello -Wl,--stack=0x1000000\n \n   This sets the stack reserve size to 0x1000000 bytes. Note that with\n-  *-Wl* option it is not possible to set the stack commit size\n+  :switch:`-Wl` option it is not possible to set the stack commit size\n   because the comma is a separator for this option.\n \n \n .. _Setting_Heap_Size_from_gnatlink:\n \n-Setting Heap Size from *gnatlink*\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+Setting Heap Size from ``gnatlink``\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n Under Windows systems, it is possible to specify the program heap size from\n-*gnatlink* using either of the following:\n+``gnatlink`` using either of the following:\n \n-* *-Xlinker* linker option\n+* :switch:`-Xlinker` linker option\n \n   ::\n \n@@ -2249,15 +2251,15 @@ Under Windows systems, it is possible to specify the program heap size from\n   This sets the heap reserve size to 0x10000 bytes and the heap commit\n   size to 0x1000 bytes.\n \n-* *-Wl* linker option\n+* :switch:`-Wl` linker option\n \n   ::\n \n       $ gnatlink hello -Wl,--heap=0x1000000\n \n \n   This sets the heap reserve size to 0x1000000 bytes. Note that with\n-  *-Wl* option it is not possible to set the heap commit size\n+  :switch:`-Wl` option it is not possible to set the heap commit size\n   because the comma is a separator for this option.\n \n "}, {"sha": "258494fd07efd9ad93cc74926f18ad8facfd601c", "filename": "gcc/ada/doc/gnat_ugn/the_gnat_compilation_model.rst", "status": "modified", "additions": 551, "deletions": 535, "changes": 1086, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst?ref=08705a15833a3df17b372fcf2a03ea9b017b2453"}, {"sha": "b64399b6d125d5277781acb47e0c66cf4593ad09", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 3100, "deletions": 2902, "changes": 6002, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=08705a15833a3df17b372fcf2a03ea9b017b2453"}, {"sha": "976c4c8d68ba278b6404db786656bc45165ecc88", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2799, "deletions": 2585, "changes": 5384, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08705a15833a3df17b372fcf2a03ea9b017b2453/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=08705a15833a3df17b372fcf2a03ea9b017b2453"}]}