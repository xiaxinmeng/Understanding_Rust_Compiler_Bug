{"sha": "e083f3f9268a7baf16973065da1debb88d1b90d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA4M2YzZjkyNjhhN2JhZjE2OTczMDY1ZGExZGViYjg4ZDFiOTBkMA==", "commit": {"author": {"name": "Richard Frith-Macdonald", "email": "rfm@gnu.org", "date": "2003-05-15T09:34:32Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2003-05-15T09:34:32Z"}, "message": "Fixed getting the superclass when building class tree used for +load, would\ncause extremely rare crashes\n\nCo-Authored-By: Nicola Pero <n.pero@mi.flashnet.it>\n\nFrom-SVN: r66822", "tree": {"sha": "91e76f6c119b9d3e48940311726548c27847150c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91e76f6c119b9d3e48940311726548c27847150c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e083f3f9268a7baf16973065da1debb88d1b90d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e083f3f9268a7baf16973065da1debb88d1b90d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e083f3f9268a7baf16973065da1debb88d1b90d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e083f3f9268a7baf16973065da1debb88d1b90d0/comments", "author": {"login": "rfm", "id": 4929621, "node_id": "MDQ6VXNlcjQ5Mjk2MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4929621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfm", "html_url": "https://github.com/rfm", "followers_url": "https://api.github.com/users/rfm/followers", "following_url": "https://api.github.com/users/rfm/following{/other_user}", "gists_url": "https://api.github.com/users/rfm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfm/subscriptions", "organizations_url": "https://api.github.com/users/rfm/orgs", "repos_url": "https://api.github.com/users/rfm/repos", "events_url": "https://api.github.com/users/rfm/events{/privacy}", "received_events_url": "https://api.github.com/users/rfm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b972239e83e93232fbe72327d8b272bf66ab182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b972239e83e93232fbe72327d8b272bf66ab182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b972239e83e93232fbe72327d8b272bf66ab182"}], "stats": {"total": 66, "additions": 56, "deletions": 10}, "files": [{"sha": "a763693121656883649c0c80c0262d8f5bda153d", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e083f3f9268a7baf16973065da1debb88d1b90d0/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e083f3f9268a7baf16973065da1debb88d1b90d0/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=e083f3f9268a7baf16973065da1debb88d1b90d0", "patch": "@@ -1,3 +1,12 @@\n+Tue May 13 14:56:03 2003  Richard Frith-Macdonald <rfm@gnu.org>\n+\t                  Nicola Pero  <n.pero@mi.flashnet.it>\n+\n+\tlibobjc/10742\n+\t* init.c (class_superclass_of_class): New function.\n+\t(create_tree_of_subclasses_inherited_from): Use it.\n+\t(__objc_tree_insert_class): Likewise.\n+\t(class_is_subclass_of_class): Likewise.\n+\t\n 2003-04-11  David Chad  <davidc@freebsd.org>\n \t    Loren J. Rittle  <ljrittle@acm.org>\n "}, {"sha": "8554906a809125dae8e5d92d8899e92c95b2a745", "filename": "libobjc/init.c", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e083f3f9268a7baf16973065da1debb88d1b90d0/libobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e083f3f9268a7baf16973065da1debb88d1b90d0/libobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Finit.c?ref=e083f3f9268a7baf16973065da1debb88d1b90d0", "patch": "@@ -99,6 +99,50 @@ static struct objc_list *__objc_class_tree_list = NULL;\n    should not be destroyed during the execution of the program.  */\n static cache_ptr __objc_load_methods = NULL;\n \n+/* This function is used when building the class tree used to send\n+   ordinately the +load message to all classes needing it.  The tree\n+   is really needed so that superclasses will get the message before\n+   subclasses.\n+\n+   This tree will contain classes which are being loaded (or have just\n+   being loaded), and whose super_class pointers have not yet been\n+   resolved.  This implies that their super_class pointers point to a\n+   string with the name of the superclass; when the first message is\n+   sent to the class (/an object of that class) the class links will\n+   be resolved, which will replace the super_class pointers with\n+   pointers to the actual superclasses.\n+\n+   Unfortunately, the tree might also contain classes which had been\n+   loaded previously, and whose class links have already been\n+   resolved.\n+\n+   This function returns the superclass of a class in both cases, and\n+   can be used to build the determine the class relationships while\n+   building the tree.\n+*/\n+static Class  class_superclass_of_class (Class class)\n+{\n+  char *super_class_name;\n+\n+  /* If the class links have been resolved, use the resolved\n+   * links.  */\n+  if (CLS_ISRESOLV (class))\n+    return class->super_class;\n+  \n+  /* Else, 'class' has not yet been resolved.  This means that its\n+   * super_class pointer is really the name of the super class (rather\n+   * than a pointer to the actual superclass).  */\n+  super_class_name = (char *)class->super_class;\n+\n+  /* Return Nil for a root class.  */\n+  if (super_class_name == NULL)\n+    return Nil;\n+\n+  /* Lookup the superclass of non-root classes.  */\n+  return objc_lookup_class (super_class_name);\n+}\n+\n+\n /* Creates a tree of classes whose topmost class is directly inherited\n    from `upper' and the bottom class in this tree is\n    `bottom_class'. The classes in this tree are super classes of\n@@ -127,9 +171,7 @@ create_tree_of_subclasses_inherited_from (Class bottom_class, Class upper)\n       tree = objc_calloc (1, sizeof (objc_class_tree));\n       tree->class = superclass;\n       tree->subclasses = list_cons (prev, tree->subclasses);\n-      superclass = (superclass->super_class ?\n-\t\t\tobjc_lookup_class ((char *) superclass->super_class)\n-\t\t      : Nil);\n+      superclass = class_superclass_of_class (superclass);\n       prev = tree;\n     }\n \n@@ -157,10 +199,7 @@ __objc_tree_insert_class (objc_class_tree *tree, Class class)\n       DEBUG_PRINTF (\"1. class %s was previously inserted\\n\", class->name);\n       return tree;\n     }\n-  else if ((class->super_class ?\n-\t\t    objc_lookup_class ((char *) class->super_class)\n-\t\t  : Nil)\n-\t    == tree->class)\n+  else if (class_superclass_of_class (class) == tree->class)\n     {\n       /* If class is a direct subclass of tree->class then add class to the\n \t list of subclasses. First check to see if it wasn't already\n@@ -370,9 +409,7 @@ class_is_subclass_of_class (Class class, Class superclass)\n     {\n       if (class == superclass)\n \treturn YES;\n-      class = (class->super_class ?\n-\t\t  objc_lookup_class ((char *) class->super_class)\n-\t\t: Nil);\n+      class = class_superclass_of_class (class);\n     }\n \n   return NO;"}]}