{"sha": "69b89883e86e2d346d28c17e64681ff87b1f61cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjliODk4ODNlODZlMmQzNDZkMjhjMTdlNjQ2ODFmZjg3YjFmNjFjYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-03-09T18:53:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-03-09T18:53:38Z"}, "message": "re PR bootstrap/43299 (Subversion id 157264 breaks powerpc 64-bit bootstraps)\n\n\tPR debug/43299\n\t* var-tracking.c (adjust_sets): New function.\n\t(count_with_sets, add_with_sets): Use it.\n\t(get_adjusted_src): New inline function.\n\t(add_stores): Use it.\n\n\t* gcc.dg/pr43299.c: New test.\n\nFrom-SVN: r157316", "tree": {"sha": "f0d0d5bcffd5d95533a5ae9c7106738aa46625e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0d0d5bcffd5d95533a5ae9c7106738aa46625e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69b89883e86e2d346d28c17e64681ff87b1f61cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b89883e86e2d346d28c17e64681ff87b1f61cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69b89883e86e2d346d28c17e64681ff87b1f61cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b89883e86e2d346d28c17e64681ff87b1f61cb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b7998ea24e0b9aa47b9d2c692852a8f02ecdb2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b7998ea24e0b9aa47b9d2c692852a8f02ecdb2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b7998ea24e0b9aa47b9d2c692852a8f02ecdb2f"}], "stats": {"total": 95, "additions": 91, "deletions": 4}, "files": [{"sha": "105d366691bf6308ad1c576b8ed40e2bb0f6b789", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b89883e86e2d346d28c17e64681ff87b1f61cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b89883e86e2d346d28c17e64681ff87b1f61cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69b89883e86e2d346d28c17e64681ff87b1f61cb", "patch": "@@ -1,5 +1,11 @@\n 2010-03-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/43299\n+\t* var-tracking.c (adjust_sets): New function.\n+\t(count_with_sets, add_with_sets): Use it.\n+\t(get_adjusted_src): New inline function.\n+\t(add_stores): Use it.\n+\n \tPR debug/43304\n \t* var-tracking.c (vt_expand_loc_callback) <case SUBREG>: If dummy,\n \tcall cselib_dummy_expand_value_rtx_cb instead of"}, {"sha": "6f3709339880a6d912680f93ff00db00b54c7f2a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b89883e86e2d346d28c17e64681ff87b1f61cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b89883e86e2d346d28c17e64681ff87b1f61cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=69b89883e86e2d346d28c17e64681ff87b1f61cb", "patch": "@@ -1,5 +1,8 @@\n 2010-03-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/43299\n+\t* gcc.dg/pr43299.c: New test.\n+\n \tPR debug/43290\n \t* g++.dg/eh/unwind2.C: New test.\n "}, {"sha": "d71c896893fc904b45c695a85ca8e31f584e19fd", "filename": "gcc/testsuite/gcc.dg/pr43299.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b89883e86e2d346d28c17e64681ff87b1f61cb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43299.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b89883e86e2d346d28c17e64681ff87b1f61cb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43299.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43299.c?ref=69b89883e86e2d346d28c17e64681ff87b1f61cb", "patch": "@@ -0,0 +1,28 @@\n+/* PR debug/43299 */\n+/* { dg-do assemble } */\n+/* { dg-options \"-g -O2\" } */\n+\n+extern void *emit_insn (void *);\n+\n+__attribute__((noinline))\n+void *gen_load_locked_si (void *x, void *y)\n+{\n+  return x;\n+}\n+\n+__attribute__((noinline))\n+void *gen_load_locked_di (void *x, void *y)\n+{\n+  return x;\n+}\n+\n+void\n+emit_load_locked (int mode, void *reg, void *mem)\n+{\n+  void * (*fn) (void *, void *) = ((void *)0);\n+  if (mode == 9)\n+    fn = gen_load_locked_si;\n+  else if (mode == 10)\n+    fn = gen_load_locked_di;\n+  emit_insn (fn (reg, mem));\n+}"}, {"sha": "ece779027934306e17559cbc24989b4d9b7d5f0b", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b89883e86e2d346d28c17e64681ff87b1f61cb/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b89883e86e2d346d28c17e64681ff87b1f61cb/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=69b89883e86e2d346d28c17e64681ff87b1f61cb", "patch": "@@ -4601,6 +4601,30 @@ count_stores (rtx loc, const_rtx expr ATTRIBUTE_UNUSED, void *cui)\n   count_uses (&loc, cui);\n }\n \n+/* Adjust sets if needed.  Currently this optimizes read-only MEM loads\n+   if REG_EQUAL/REG_EQUIV note is present.  */\n+\n+static void\n+adjust_sets (rtx insn, struct cselib_set *sets, int n_sets)\n+{\n+  if (n_sets == 1 && MEM_P (sets[0].src) && MEM_READONLY_P (sets[0].src))\n+    {\n+      /* For read-only MEMs containing some constant, prefer those\n+\t constants.  */\n+      rtx note = find_reg_equal_equiv_note (insn), src;\n+\n+      if (note && CONSTANT_P (XEXP (note, 0)))\n+\t{\n+\t  sets[0].src = src = XEXP (note, 0);\n+\t  if (GET_CODE (PATTERN (insn)) == COND_EXEC)\n+\t    src = gen_rtx_IF_THEN_ELSE (GET_MODE (sets[0].dest),\n+\t\t\t\t\tCOND_EXEC_TEST (PATTERN (insn)),\n+\t\t\t\t\tsrc, sets[0].dest);\n+\t  sets[0].src_elt = cselib_lookup (src, GET_MODE (sets[0].dest), 1);\n+\t}\n+    }\n+}\n+\n /* Callback for cselib_record_sets_hook, that counts how many micro\n    operations it takes for uses and stores in an insn after\n    cselib_record_sets has analyzed the sets in an insn, but before it\n@@ -4617,6 +4641,8 @@ count_with_sets (rtx insn, struct cselib_set *sets, int n_sets)\n \n   cselib_hook_called = true;\n \n+  adjust_sets (insn, sets, n_sets);\n+\n   cui.insn = insn;\n   cui.bb = bb;\n   cui.sets = sets;\n@@ -4934,6 +4960,21 @@ reverse_op (rtx val, const_rtx expr)\n   return gen_rtx_CONCAT (GET_MODE (v->val_rtx), v->val_rtx, ret);\n }\n \n+/* Return SRC, or, if it is a read-only MEM for which adjust_sets\n+   replated it with a constant from REG_EQUIV/REG_EQUAL note,\n+   that constant.  */\n+\n+static inline rtx\n+get_adjusted_src (struct count_use_info *cui, rtx src)\n+{\n+  if (cui->n_sets == 1\n+      && MEM_P (src)\n+      && MEM_READONLY_P (src)\n+      && CONSTANT_P (cui->sets[0].src))\n+    return cui->sets[0].src;\n+  return src;\n+}\n+\n /* Add stores (register and memory references) LOC which will be tracked\n    to VTI (bb)->mos.  EXPR is the RTL expression containing the store.\n    CUIP->insn is instruction which the LOC is part of.  */\n@@ -4971,7 +5012,10 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n       else\n \t{\n \t  if (GET_CODE (expr) == SET && SET_DEST (expr) == loc)\n-\t    src = var_lowpart (mode2, SET_SRC (expr));\n+\t    {\n+\t      src = get_adjusted_src (cui, SET_SRC (expr));\n+\t      src = var_lowpart (mode2, src);\n+\t    }\n \t  loc = var_lowpart (mode2, loc);\n \n \t  if (src == NULL)\n@@ -5030,7 +5074,10 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n       else\n \t{\n \t  if (GET_CODE (expr) == SET && SET_DEST (expr) == loc)\n-\t    src = var_lowpart (mode2, SET_SRC (expr));\n+\t    {\n+\t      src = get_adjusted_src (cui, SET_SRC (expr));\n+\t      src = var_lowpart (mode2, src);\n+\t    }\n \t  loc = var_lowpart (mode2, loc);\n \n \t  if (src == NULL)\n@@ -5099,12 +5146,13 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n     }\n   else if (resolve && GET_CODE (mo->u.loc) == SET)\n     {\n-      nloc = replace_expr_with_values (SET_SRC (expr));\n+      src = get_adjusted_src (cui, SET_SRC (expr));\n+      nloc = replace_expr_with_values (src);\n \n       /* Avoid the mode mismatch between oexpr and expr.  */\n       if (!nloc && mode != mode2)\n \t{\n-\t  nloc = SET_SRC (expr);\n+\t  nloc = src;\n \t  gcc_assert (oloc == SET_DEST (expr));\n \t}\n \n@@ -5201,6 +5249,8 @@ add_with_sets (rtx insn, struct cselib_set *sets, int n_sets)\n \n   cselib_hook_called = true;\n \n+  adjust_sets (insn, sets, n_sets);\n+\n   cui.insn = insn;\n   cui.bb = bb;\n   cui.sets = sets;"}]}