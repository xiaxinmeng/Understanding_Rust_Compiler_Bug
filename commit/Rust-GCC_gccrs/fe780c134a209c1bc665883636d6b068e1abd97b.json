{"sha": "fe780c134a209c1bc665883636d6b068e1abd97b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU3ODBjMTM0YTIwOWMxYmM2NjU4ODM2MzZkNmIwNjhlMWFiZDk3Yg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-09-30T15:15:23Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-09-30T15:15:23Z"}, "message": "re PR target/50566 ([avr]: Add support for better logging similar to -mdeb)\n\n\tPR target/50566\n\t* config/avr/avr-protos.h (avr_log_t): New field address_cost.\n\t* config/avr/avr.c (avr_address_cost): Use it.\n\t* config/avr/avr-log.c (avr_log_set_avr_log): Initialize it.\n\t(avr_log_vadump): Unknown %-codes finish printing.\n\nFrom-SVN: r179391", "tree": {"sha": "f652d079d4a1031fa67ff8dd0562452d9064b563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f652d079d4a1031fa67ff8dd0562452d9064b563"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe780c134a209c1bc665883636d6b068e1abd97b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe780c134a209c1bc665883636d6b068e1abd97b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe780c134a209c1bc665883636d6b068e1abd97b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe780c134a209c1bc665883636d6b068e1abd97b/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "383841506e318ffddda4f29d7e6d8bd9933b7d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/383841506e318ffddda4f29d7e6d8bd9933b7d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/383841506e318ffddda4f29d7e6d8bd9933b7d45"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "3201f3fdaed1b9d96c81c3e903d1f7484d9e7dcd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe780c134a209c1bc665883636d6b068e1abd97b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe780c134a209c1bc665883636d6b068e1abd97b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe780c134a209c1bc665883636d6b068e1abd97b", "patch": "@@ -1,3 +1,11 @@\n+2011-09-30  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/50566\n+\t* config/avr/avr-protos.h (avr_log_t): New field address_cost.\n+\t* config/avr/avr.c (avr_address_cost): Use it.\n+\t* config/avr/avr-log.c (avr_log_set_avr_log): Initialize it.\n+\t(avr_log_vadump): Unknown %-codes finish printing.\n+\n 2011-09-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR inline-asm/50571"}, {"sha": "cdeb6690fde004316413b335af451d976878b6a8", "filename": "gcc/config/avr/avr-log.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe780c134a209c1bc665883636d6b068e1abd97b/gcc%2Fconfig%2Favr%2Favr-log.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe780c134a209c1bc665883636d6b068e1abd97b/gcc%2Fconfig%2Favr%2Favr-log.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-log.c?ref=fe780c134a209c1bc665883636d6b068e1abd97b", "patch": "@@ -283,7 +283,12 @@ avr_log_vadump (FILE *file, const char *fmt, va_list ap)\n               abort();\n               \n             default:\n-              fputc (*(fmt-1), file);\n+              /* Unknown %-code: Stop printing */\n+              \n+              fprintf (file, \"??? %%%c ???%s\\n\", *(fmt-1), fmt);\n+              fmt = \"\";\n+              \n+              break;\n             }\n           break; /* % */\n         }\n@@ -318,6 +323,7 @@ avr_log_set_avr_log (void)\n       SET_DUMP_DETAIL (legitimize_address);\n       SET_DUMP_DETAIL (legitimize_reload_address);\n       SET_DUMP_DETAIL (constraints);\n+      SET_DUMP_DETAIL (address_cost);\n \n #undef SET_DUMP_DETAIL\n     }"}, {"sha": "91e51088917437a7ba83e2401fbb52537936eb05", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe780c134a209c1bc665883636d6b068e1abd97b/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe780c134a209c1bc665883636d6b068e1abd97b/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=fe780c134a209c1bc665883636d6b068e1abd97b", "patch": "@@ -129,6 +129,7 @@ typedef struct\n   unsigned legitimize_address :1;\n   unsigned legitimize_reload_address :1;\n   unsigned constraints :1;\n+  unsigned address_cost :1;\n } avr_log_t;\n \n extern avr_log_t avr_log;"}, {"sha": "55fbae4649e9196e476d5e99fd6e79ab62064847", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe780c134a209c1bc665883636d6b068e1abd97b/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe780c134a209c1bc665883636d6b068e1abd97b/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=fe780c134a209c1bc665883636d6b068e1abd97b", "patch": "@@ -6573,23 +6573,33 @@ avr_rtx_costs (rtx x, int codearg, int outer_code,\n   return done;\n }\n \n-/* Calculate the cost of a memory address.  */\n+\n+/* Implement `TARGET_ADDRESS_COST'.  */\n \n static int\n avr_address_cost (rtx x, bool speed ATTRIBUTE_UNUSED)\n {\n+  int cost = 4;\n+  \n   if (GET_CODE (x) == PLUS\n-      && GET_CODE (XEXP (x,1)) == CONST_INT\n-      && (REG_P (XEXP (x,0)) || GET_CODE (XEXP (x,0)) == SUBREG)\n-      && INTVAL (XEXP (x,1)) >= 61)\n-    return 18;\n-  if (CONSTANT_ADDRESS_P (x))\n+      && CONST_INT_P (XEXP (x, 1))\n+      && (REG_P (XEXP (x, 0))\n+          || GET_CODE (XEXP (x, 0)) == SUBREG))\n     {\n-      if (optimize > 0 && io_address_operand (x, QImode))\n-\treturn 2;\n-      return 4;\n+      if (INTVAL (XEXP (x, 1)) >= 61)\n+        cost = 18;\n     }\n-  return 4;\n+  else if (CONSTANT_ADDRESS_P (x))\n+    {\n+      if (optimize > 0\n+          && io_address_operand (x, QImode))\n+        cost = 2;\n+    }\n+\n+  if (avr_log.address_cost)\n+    avr_edump (\"\\n%?: %d = %r\\n\", cost, x);\n+  \n+  return cost;\n }\n \n /* Test for extra memory constraint 'Q'."}]}