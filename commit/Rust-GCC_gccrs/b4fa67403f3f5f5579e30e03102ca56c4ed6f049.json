{"sha": "b4fa67403f3f5f5579e30e03102ca56c4ed6f049", "node_id": "C_kwDOANBUbNoAKGI0ZmE2NzQwM2YzZjVmNTU3OWUzMGUwMzEwMmNhNTZjNGVkNmYwNDk", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-28T07:47:41Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-28T07:47:41Z"}, "message": "parse: Add correct location to all public visibilities", "tree": {"sha": "1bfdec255eaae4cfd70fa0df4402d2641b5b7651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bfdec255eaae4cfd70fa0df4402d2641b5b7651"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4fa67403f3f5f5579e30e03102ca56c4ed6f049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fa67403f3f5f5579e30e03102ca56c4ed6f049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4fa67403f3f5f5579e30e03102ca56c4ed6f049", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fa67403f3f5f5579e30e03102ca56c4ed6f049/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a9bb44058a8406b41bb1ab3110e08a897772bb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9bb44058a8406b41bb1ab3110e08a897772bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a9bb44058a8406b41bb1ab3110e08a897772bb0"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "5d1e0d63565a31a9f7c76a355fce7b46e8515d74", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fa67403f3f5f5579e30e03102ca56c4ed6f049/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fa67403f3f5f5579e30e03102ca56c4ed6f049/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=b4fa67403f3f5f5579e30e03102ca56c4ed6f049", "patch": "@@ -666,23 +666,25 @@ struct Visibility\n     return Visibility (PUB, SimplePath::create_empty ());\n   }\n \n-  // Creates a public visibility with crate-relative paths or whatever.\n-  static Visibility create_crate ()\n+  // Creates a public visibility with crate-relative paths\n+  static Visibility create_crate (Location crate_tok_location)\n   {\n-    return Visibility (PUB_CRATE, SimplePath::create_empty ());\n+    return Visibility (PUB_CRATE,\n+\t\t       SimplePath::from_str (\"crate\", crate_tok_location));\n   }\n \n-  // Creates a public visibility with self-relative paths or whatever.\n-  static Visibility create_self ()\n+  // Creates a public visibility with self-relative paths\n+  static Visibility create_self (Location self_tok_location)\n   {\n-    return Visibility (PUB_SELF, SimplePath::create_empty ());\n+    return Visibility (PUB_SELF,\n+\t\t       SimplePath::from_str (\"self\", self_tok_location));\n   }\n \n-  // Creates a public visibility with parent module-relative paths or\n-  // whatever.\n-  static Visibility create_super ()\n+  // Creates a public visibility with parent module-relative paths\n+  static Visibility create_super (Location super_tok_location)\n   {\n-    return Visibility (PUB_SUPER, SimplePath::create_empty ());\n+    return Visibility (PUB_SUPER,\n+\t\t       SimplePath::from_str (\"super\", super_tok_location));\n   }\n \n   // Creates a private visibility"}, {"sha": "bc613e12e49bf4c37d3770f1faf7d1d23b91e520", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fa67403f3f5f5579e30e03102ca56c4ed6f049/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fa67403f3f5f5579e30e03102ca56c4ed6f049/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=b4fa67403f3f5f5579e30e03102ca56c4ed6f049", "patch": "@@ -43,14 +43,8 @@ translate_visibility (const AST::Visibility &vis)\n     case AST::Visibility::PRIV:\n     case AST::Visibility::PUB_SELF:\n       return Visibility (Visibility::VisType::PRIVATE);\n-    // Desugar pub(crate) into pub(in crate) and so on\n-    // FIXME: How do we get a location for the SimplePath here?\n     case AST::Visibility::PUB_CRATE:\n-      return Visibility (Visibility::PUBLIC,\n-\t\t\t AST::SimplePath::from_str (\"crate\", Location ()));\n     case AST::Visibility::PUB_SUPER:\n-      return Visibility (Visibility::PUBLIC,\n-\t\t\t AST::SimplePath::from_str (\"super\", Location ()));\n     case AST::Visibility::PUB_IN_PATH:\n       return Visibility (Visibility::VisType::PUBLIC, vis.get_path ());\n       break;"}, {"sha": "23ab32c832eb889163d389907f4666bbaa6648ac", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fa67403f3f5f5579e30e03102ca56c4ed6f049/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fa67403f3f5f5579e30e03102ca56c4ed6f049/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=b4fa67403f3f5f5579e30e03102ca56c4ed6f049", "patch": "@@ -2136,6 +2136,7 @@ Parser<ManagedTokenSource>::parse_visibility ()\n   lexer.skip_token ();\n \n   const_TokenPtr t = lexer.peek_token ();\n+  auto path_loc = t->get_locus ();\n \n   switch (t->get_id ())\n     {\n@@ -2144,19 +2145,19 @@ Parser<ManagedTokenSource>::parse_visibility ()\n \n       skip_token (RIGHT_PAREN);\n \n-      return AST::Visibility::create_crate ();\n+      return AST::Visibility::create_crate (path_loc);\n     case SELF:\n       lexer.skip_token ();\n \n       skip_token (RIGHT_PAREN);\n \n-      return AST::Visibility::create_self ();\n+      return AST::Visibility::create_self (path_loc);\n     case SUPER:\n       lexer.skip_token ();\n \n       skip_token (RIGHT_PAREN);\n \n-      return AST::Visibility::create_super ();\n+      return AST::Visibility::create_super (path_loc);\n       case IN: {\n \tlexer.skip_token ();\n "}]}