{"sha": "493bc46004681c9ab631a38fc62f086f6274aaea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkzYmM0NjAwNDY4MWM5YWI2MzFhMzhmYzYyZjA4NmY2Mjc0YWFlYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-12-04T09:08:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-12-04T09:08:42Z"}, "message": "type_traits: New.\n\n2004-12-04  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: New.\n\t* include/Makefile.am: Add.\n\t* include/Makefile.in: Regenerate.\n\t* testsuite/testsuite_tr1.h: New.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_arithmetic/is_arithmetic.cc: New.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_arithmetic/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_fundamental/is_fundamental.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_fundamental/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/helper_classes/\n\ttrue_false_type.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/helper_classes/\n\ttrue_false_type_typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/helper_classes/\n\ttypedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_array/is_array.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_array/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_floating_point/is_floating_point.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_floating_point/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_integral/is_integral.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_integral/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_void/is_void.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_void/typedefs.cc: Likewise.\n\nFrom-SVN: r91723", "tree": {"sha": "b4959e78ee0e411f9e60d1a7399d0a450e6de433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4959e78ee0e411f9e60d1a7399d0a450e6de433"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/493bc46004681c9ab631a38fc62f086f6274aaea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493bc46004681c9ab631a38fc62f086f6274aaea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/493bc46004681c9ab631a38fc62f086f6274aaea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493bc46004681c9ab631a38fc62f086f6274aaea/comments", "author": null, "committer": null, "parents": [{"sha": "bad1f4626e845f0bebe71d2e4b2a82f7f458e093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad1f4626e845f0bebe71d2e4b2a82f7f458e093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bad1f4626e845f0bebe71d2e4b2a82f7f458e093"}], "stats": {"total": 1090, "additions": 1088, "deletions": 2}, "files": [{"sha": "73568bdb0424ad195495180472a45b17400db146", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -1,3 +1,40 @@\n+2004-12-04  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: New.\n+\t* include/Makefile.am: Add.\n+\t* include/Makefile.in: Regenerate.\n+\t* testsuite/testsuite_tr1.h: New.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_arithmetic/is_arithmetic.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_arithmetic/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_fundamental/is_fundamental.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_fundamental/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/helper_classes/\n+\ttrue_false_type.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/helper_classes/\n+\ttrue_false_type_typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/helper_classes/\n+\ttypedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_array/is_array.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_array/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_floating_point/is_floating_point.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_floating_point/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_integral/is_integral.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_integral/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_void/is_void.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_void/typedefs.cc: Likewise.\n+\n 2004-12-02  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/testsuite_io.h (class sync_buf): New, templatized"}, {"sha": "dcfa0e05f9831ea6a2235222c2cf66934fb55060", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -231,7 +231,8 @@ tr1_headers = \\\n \t${tr1_srcdir}/array \\\n \t${tr1_srcdir}/functional \\\n \t${tr1_srcdir}/tuple \\\n-\t${tr1_srcdir}/utility\n+\t${tr1_srcdir}/utility \\\n+\t${tr1_srcdir}/type_traits\n \n \n # This is the common subset of files that all three \"C\" header models use."}, {"sha": "44723bef1d5b77901aee44902989d525b3a3b06f", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -448,7 +448,8 @@ tr1_headers = \\\n \t${tr1_srcdir}/array \\\n \t${tr1_srcdir}/functional \\\n \t${tr1_srcdir}/tuple \\\n-\t${tr1_srcdir}/utility\n+\t${tr1_srcdir}/utility \\\n+\t${tr1_srcdir}/type_traits\n \n \n # This is the common subset of files that all three \"C\" header models use."}, {"sha": "913a2b71c818758e7a60c9c26025f28d36c9def7", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "added", "additions": 283, "deletions": 0, "changes": 283, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,283 @@\n+// TR1 type_traits -*- C++ -*-\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_TYPE_TRAITS\n+#define _TR1_TYPE_TRAITS 1\n+\n+#include <bits/c++config.h>\n+#include <cstddef>\n+\n+//namespace std::tr1\n+namespace std\n+{\n+namespace tr1\n+{\n+  /// @brief  helper classes [4.3].\n+  template<typename _Tp, _Tp __v>\n+    struct integral_constant\n+    {\n+      static const _Tp                      value = __v;\n+      typedef _Tp                           value_type;\n+      typedef integral_constant<_Tp, __v>   type;\n+    };\n+  typedef integral_constant<bool, true>     true_type;\n+  typedef integral_constant<bool, false>    false_type;\n+  \n+#define _DEFINE_PRIMARY_SPEC_HELPER(_Primary, _Type)           \\\n+  template<>                                                   \\\n+    struct _Primary<_Type>                                     \\\n+    : public true_type { };                            \n+\n+#define _DEFINE_PRIMARY_SPEC(_Primary, _Type)                  \\\n+  _DEFINE_PRIMARY_SPEC_HELPER(_Primary, _Type)                 \\\n+  _DEFINE_PRIMARY_SPEC_HELPER(_Primary, _Type const)           \\\n+  _DEFINE_PRIMARY_SPEC_HELPER(_Primary, _Type volatile)        \\\n+  _DEFINE_PRIMARY_SPEC_HELPER(_Primary, _Type const volatile)\n+  \n+  /// @brief  primary type categories [4.5.1].\n+  template<typename>\n+    struct is_void\n+    : public false_type { };\n+  _DEFINE_PRIMARY_SPEC(is_void, void)\n+\n+  template<typename>\n+    struct is_integral\n+    : public false_type { };\n+  _DEFINE_PRIMARY_SPEC(is_integral, bool)\n+  _DEFINE_PRIMARY_SPEC(is_integral, char)\n+  _DEFINE_PRIMARY_SPEC(is_integral, signed char)\n+  _DEFINE_PRIMARY_SPEC(is_integral, unsigned char)\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  _DEFINE_PRIMARY_SPEC(is_integral, wchar_t)\n+#endif\n+  _DEFINE_PRIMARY_SPEC(is_integral, short)\n+  _DEFINE_PRIMARY_SPEC(is_integral, unsigned short)\n+  _DEFINE_PRIMARY_SPEC(is_integral, int)\n+  _DEFINE_PRIMARY_SPEC(is_integral, unsigned int)\n+  _DEFINE_PRIMARY_SPEC(is_integral, long)\n+  _DEFINE_PRIMARY_SPEC(is_integral, unsigned long)\n+  _DEFINE_PRIMARY_SPEC(is_integral, long long)\n+  _DEFINE_PRIMARY_SPEC(is_integral, unsigned long long)\n+\n+  template<typename>\n+    struct is_floating_point\n+    : public false_type { };\n+  _DEFINE_PRIMARY_SPEC(is_floating_point, float)\n+  _DEFINE_PRIMARY_SPEC(is_floating_point, double)\n+  _DEFINE_PRIMARY_SPEC(is_floating_point, long double)\n+\n+  template<typename>\n+    struct is_array\n+    : public false_type { };\n+\n+  template<typename _Tp, std::size_t _Size>\n+    struct is_array<_Tp[_Size]>\n+    : public true_type { };\n+\n+  template<typename _Tp>\n+    struct is_array<_Tp[]>\n+    : public true_type { };\n+  \n+  template<typename _Tp>\n+    struct is_pointer;\n+  \n+  template<typename _Tp>\n+    struct is_reference;\n+  \n+  template<typename _Tp>\n+    struct is_member_object_pointer;\n+  \n+  template<typename _Tp>\n+    struct is_member_function_pointer;   \n+\n+  template<typename _Tp>\n+    struct is_enum;\n+  \n+  template<typename _Tp>\n+    struct is_union;\n+  \n+  template<typename _Tp>\n+    struct is_class;\n+  \n+  template<typename _Tp>\n+    struct is_function;\n+\n+#undef _DEFINE_PRIMARY_SPEC_HELPER\n+#undef _DEFINE_PRIMARY_SPEC\n+\n+  /// @brief  composite type traits [4.5.2].\n+  template<typename _Tp>\n+    struct is_arithmetic\n+    : public integral_constant<bool, (is_integral<_Tp>::value\n+\t\t\t\t      || is_floating_point<_Tp>::value)>\n+    { };\n+\n+  template<typename _Tp>\n+    struct is_fundamental\n+    : public integral_constant<bool, (is_arithmetic<_Tp>::value\n+\t\t\t\t      || is_void<_Tp>::value)>\n+    { };\n+\n+  template<typename _Tp>\n+    struct is_object\n+    : public integral_constant<bool, !(is_function<_Tp>::value\n+\t\t\t\t       || is_reference<_Tp>::value\n+\t\t\t\t       || is_void<_Tp>::value)>\n+    { };\n+\n+  template<typename _Tp>\n+    struct is_member_pointer\n+    : public integral_constant<bool,\n+\t\t\t       (is_member_object_pointer<_Tp>::value\n+\t\t\t\t|| is_member_function_pointer<_Tp>::value)>\n+    { };\n+  \n+  template<typename _Tp>\n+    struct is_scalar\n+    : public integral_constant<bool, (is_arithmetic<_Tp>::value\n+\t\t\t\t      || is_enum<_Tp>::value\n+\t\t\t\t      || is_pointer<_Tp>::value\n+\t\t\t\t      || is_member_pointer<_Tp>::value)>\n+    { };\n+  \n+  template<typename _Tp>\n+    struct is_compound\n+    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };\n+   \n+  /// @brief  type properties [4.5.3].\n+  template<typename _Tp>\n+    struct is_const;\n+  \n+  template<typename _Tp>\n+    struct is_volatile;\n+\n+  template<typename _Tp>\n+    struct is_pod;\n+  \n+  template<typename _Tp>\n+    struct is_empty;\n+  \n+  template<typename _Tp>\n+    struct is_polymorphic;\n+  \n+  template<typename _Tp>\n+    struct is_abstract;\n+  \n+  template<typename _Tp>\n+    struct has_trivial_constructor;\n+  \n+  template<typename _Tp>\n+    struct has_trivial_copy;\n+\n+  template<typename _Tp>\n+    struct has_trivial_assign;\n+  \n+  template<typename _Tp>\n+    struct has_trivial_destructor;\n+  \n+  template<typename _Tp>\n+    struct has_nothrow_constructor;\n+  \n+  template<typename _Tp>\n+    struct has_nothrow_copy;\n+\n+  template<typename _Tp>\n+    struct has_nothrow_assign;\n+  \n+  template<typename _Tp>\n+    struct has_virtual_destructor\n+    : public false_type { };\n+  \n+  template<typename _Tp>\n+    struct is_signed;\n+  \n+  template<typename _Tp>\n+    struct is_unsigned;\n+   \n+  template<typename _Tp>\n+    struct alignment_of;\n+  \n+  template<typename _Tp>\n+    struct rank;\n+   \n+  template<typename _Tp, unsigned _Uint = 0>\n+    struct extent;\n+  \n+  /// @brief  relationships between types [4.6].\n+  template<typename _Tp, typename _Up>\n+    struct is_same;\n+\n+  template<typename _From, typename _To>\n+    struct is_convertible;\n+  \n+  template<typename _Base, typename _Derived>\n+    struct is_base_of;\n+\n+  /// @brief  const-volatile modifications [4.7.1].\n+  template<typename _Tp>\n+    struct remove_const;\n+  \n+  template<typename _Tp>\n+    struct remove_volatile;\n+  \n+  template<typename _Tp>\n+    struct remove_cv;\n+  \n+  template<typename _Tp>\n+    struct add_const;\n+   \n+  template<typename _Tp>\n+    struct add_volatile;\n+  \n+  template<typename _Tp>\n+    struct add_cv;\n+\n+  /// @brief  reference modifications [4.7.2].\n+  template<typename _Tp>\n+    struct remove_reference;\n+  \n+  template<typename _Tp>\n+    struct add_reference;\n+\n+  /// @brief  array modififications [4.7.3].\n+  template<typename _Tp>\n+    struct remove_extent;\n+  \n+  template<typename _Tp>\n+    struct remove_all_extents;\n+\n+  /// @brief  pointer modifications [4.7.4].\n+  template<typename _Tp>\n+    struct remove_pointer;\n+  \n+  template<typename _Tp>\n+    struct add_pointer;\n+\n+  /// @brief  other transformations [4.8].\n+  template<std::size_t _Len, std::size_t _Align>\n+    struct aligned_storage;\n+}\n+}\n+\n+#endif"}, {"sha": "70695684024a73f95e269abe20bdf2bd294cbe95", "filename": "libstdc++-v3/testsuite/testsuite_tr1.h", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,55 @@\n+// -*- C++ -*-\n+// Testing utilities for the tr1 testsuite.\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _GLIBCXX_TESTSUITE_TR1_H\n+#define _GLIBCXX_TESTSUITE_TR1_H\n+\n+namespace __gnu_test\n+{  \n+  // For tr1/type_traits.\n+  template<template<typename> class Category,\n+\t   typename Type, bool Tv>\n+    bool\n+    test_category()\n+    {\n+      bool ret = true;\n+      ret &= Category<Type>::value == Tv;\n+      ret &= Category<Type const>::value == Tv;\n+      ret &= Category<Type volatile>::value == Tv;\n+      ret &= Category<Type const volatile>::value == Tv;\n+      ret &= Category<Type>::type::value == Tv;\n+      ret &= Category<Type const>::type::value == Tv;\n+      ret &= Category<Type volatile>::type::value == Tv;\n+      ret &= Category<Type const volatile>::type::value == Tv;\n+      return ret;\n+    }\n+}; // namespace __gnu_test\n+\n+#endif // _GLIBCXX_TESTSUITE_TR1_H"}, {"sha": "f27ad75fe81c68ffeee635334d87b4c4edf86367", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_arithmetic/is_arithmetic.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_arithmetic%2Fis_arithmetic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_arithmetic%2Fis_arithmetic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_arithmetic%2Fis_arithmetic.cc?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,63 @@\n+// 2004-12-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.2 Composite type traits\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+class ClassType { };\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_arithmetic;\n+  using __gnu_test::test_category;\n+  \n+  VERIFY( (test_category<is_arithmetic, void, false>()) );\n+\n+  VERIFY( (test_category<is_arithmetic, char, true>()) );\n+  VERIFY( (test_category<is_arithmetic, signed char, true>()) );\n+  VERIFY( (test_category<is_arithmetic, unsigned char, true>()) );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( (test_category<is_arithmetic, wchar_t, true>()) );\n+#endif\n+  VERIFY( (test_category<is_arithmetic, short, true>()) );\n+  VERIFY( (test_category<is_arithmetic, unsigned short, true>()) );\n+  VERIFY( (test_category<is_arithmetic, int, true>()) );\n+  VERIFY( (test_category<is_arithmetic, unsigned int, true>()) );\n+  VERIFY( (test_category<is_arithmetic, long, true>()) );\n+  VERIFY( (test_category<is_arithmetic, unsigned long, true>()) );\n+  VERIFY( (test_category<is_arithmetic, long long, true>()) );\n+  VERIFY( (test_category<is_arithmetic, unsigned long long, true>()) );\n+  VERIFY( (test_category<is_arithmetic, float, true>()) );\n+  VERIFY( (test_category<is_arithmetic, double, true>()) );\n+  VERIFY( (test_category<is_arithmetic, long double, true>()) );\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_arithmetic, ClassType, false>()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c4075143113d835f6ec3294b56928a945652f9af", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_arithmetic/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_arithmetic%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_arithmetic%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_arithmetic%2Ftypedefs.cc?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_arithmetic<int>        test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "2858de469acc4a5f22f84069ffef5d27e8a51bbc", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_fundamental/is_fundamental.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_fundamental%2Fis_fundamental.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_fundamental%2Fis_fundamental.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_fundamental%2Fis_fundamental.cc?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,62 @@\n+// 2004-12-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.2 Composite type traits\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+class ClassType { };\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_fundamental;\n+  using __gnu_test::test_category;\n+  \n+  VERIFY( (test_category<is_fundamental, void, true>()) );\n+  VERIFY( (test_category<is_fundamental, char, true>()) );\n+  VERIFY( (test_category<is_fundamental, signed char, true>()) );\n+  VERIFY( (test_category<is_fundamental, unsigned char, true>()) );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( (test_category<is_fundamental, wchar_t, true>()) );\n+#endif\n+  VERIFY( (test_category<is_fundamental, short, true>()) );\n+  VERIFY( (test_category<is_fundamental, unsigned short, true>()) );\n+  VERIFY( (test_category<is_fundamental, int, true>()) );\n+  VERIFY( (test_category<is_fundamental, unsigned int, true>()) );\n+  VERIFY( (test_category<is_fundamental, long, true>()) );\n+  VERIFY( (test_category<is_fundamental, unsigned long, true>()) );\n+  VERIFY( (test_category<is_fundamental, long long, true>()) );\n+  VERIFY( (test_category<is_fundamental, unsigned long long, true>()) );\n+  VERIFY( (test_category<is_fundamental, float, true>()) );\n+  VERIFY( (test_category<is_fundamental, double, true>()) );\n+  VERIFY( (test_category<is_fundamental, long double, true>()) );\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_fundamental, ClassType, false>()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "43bf14f1d59c1ec5514a647df1293926bce65857", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_fundamental/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_fundamental%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_fundamental%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_fundamental%2Ftypedefs.cc?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_fundamental<int>       test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "c7c2b04874d6fd79cc0ac91e24ba51b23297fc6d", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/helper_classes/true_false_type.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhelper_classes%2Ftrue_false_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhelper_classes%2Ftrue_false_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhelper_classes%2Ftrue_false_type.cc?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,42 @@\n+// 2004-12-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.3 Helper classes\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::true_type;\n+  using std::tr1::false_type;\n+\n+  VERIFY( true_type::value == true );\n+  VERIFY( false_type::value == false );\n+  VERIFY( true_type::type::value == true );\n+  VERIFY( false_type::type::value == false );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "403b39f6942c1ec2d1316ed3900d1674d9f28cac", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/helper_classes/true_false_type_typedefs.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhelper_classes%2Ftrue_false_type_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhelper_classes%2Ftrue_false_type_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhelper_classes%2Ftrue_false_type_typedefs.cc?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,43 @@\n+// 2004-12-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::true_type                 true_type;\n+  typedef std::tr1::false_type                false_type;\n+\n+  typedef true_type::value_type               true_value_type;\n+  typedef true_type::type                     true_type;\n+  typedef true_type::type::value_type         true_type_value_type;\n+  typedef true_type::type::type               true_type_type;\n+  \n+  typedef false_type::value_type              false_value_type;\n+  typedef false_type::type                    false_type;\n+  typedef false_type::type::value_type        false_type_value_type;\n+  typedef false_type::type::type              false_type_type;\n+}"}, {"sha": "dc5a75b5deecc149addd1d62380e5bf67bb662b4", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/helper_classes/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhelper_classes%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhelper_classes%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhelper_classes%2Ftypedefs.cc?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::integral_constant<int, 1> test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "66b1894a35395b583aeb59bdf9a4b9fdfb291c84", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_array/is_array.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_array%2Fis_array.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_array%2Fis_array.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_array%2Fis_array.cc?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,57 @@\n+// 2004-12-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.1 Primary type categories\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+class ClassType { };\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_array;\n+  using __gnu_test::test_category;\n+\n+  typedef int        int_array[5];\n+  typedef int        empty_int_array[];\n+  typedef float*     pointer_array[5];\n+  typedef float*     empty_pointer_array[];\n+  typedef ClassType  ClassType_array[5];\n+  typedef ClassType  empty_ClassType_array[];\n+\n+  VERIFY( (test_category<is_array, int_array, true>()) );\n+  VERIFY( (test_category<is_array, empty_int_array, true>()) );\n+  VERIFY( (test_category<is_array, pointer_array, true>()) );\n+  VERIFY( (test_category<is_array, empty_pointer_array, true>()) );\n+  VERIFY( (test_category<is_array, ClassType_array, true>()) );\n+  VERIFY( (test_category<is_array, empty_ClassType_array, true>()) );\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_array, ClassType, false>()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b947a02e2e03055bfb04936ed54e13511527fac0", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_array/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_array%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_array%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_array%2Ftypedefs.cc?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_array<int>             test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "deed15dbe6c412278a638491aaf019abc2341c7b", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_floating_point/is_floating_point.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_floating_point%2Fis_floating_point.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_floating_point%2Fis_floating_point.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_floating_point%2Fis_floating_point.cc?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,63 @@\n+// 2004-12-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.1 Primary type categories\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+class ClassType { };\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_floating_point;\n+  using __gnu_test::test_category;\n+\n+  VERIFY( (test_category<is_floating_point, void, false>()) );\n+  VERIFY( (test_category<is_floating_point, char, false>()) );\n+  VERIFY( (test_category<is_floating_point, signed char, false>()) );\n+  VERIFY( (test_category<is_floating_point, unsigned char, false>()) );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( (test_category<is_floating_point, wchar_t, false>()) );\n+#endif\n+  VERIFY( (test_category<is_floating_point, short, false>()) );\n+  VERIFY( (test_category<is_floating_point, unsigned short, false>()) );\n+  VERIFY( (test_category<is_floating_point, int, false>()) );\n+  VERIFY( (test_category<is_floating_point, unsigned int, false>()) );\n+  VERIFY( (test_category<is_floating_point, long, false>()) );\n+  VERIFY( (test_category<is_floating_point, unsigned long, false>()) );\n+  VERIFY( (test_category<is_floating_point, long long, false>()) );\n+  VERIFY( (test_category<is_floating_point, unsigned long long, false>()) );\n+\n+  VERIFY( (test_category<is_floating_point, float, true>()) );\n+  VERIFY( (test_category<is_floating_point, double, true>()) );\n+  VERIFY( (test_category<is_floating_point, long double, true>()) );\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_floating_point, ClassType, false>()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "00b351c3f00792c24de5480d0970cea09eea4abf", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_floating_point/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_floating_point%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_floating_point%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_floating_point%2Ftypedefs.cc?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_floating_point<int>    test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "d746edb8992a7de43194e6ceab7ec5534abdeb8b", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_integral/is_integral.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_integral%2Fis_integral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_integral%2Fis_integral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_integral%2Fis_integral.cc?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,64 @@\n+// 2004-12-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.1 Primary type categories\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+class ClassType { };\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_integral;\n+  using __gnu_test::test_category;\n+  \n+  VERIFY( (test_category<is_integral, void, false>()) );\n+  \n+  VERIFY( (test_category<is_integral, char, true>()) );\n+  VERIFY( (test_category<is_integral, signed char, true>()) );\n+  VERIFY( (test_category<is_integral, unsigned char, true>()) );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( (test_category<is_integral, wchar_t, true>()) );\n+#endif\n+  VERIFY( (test_category<is_integral, short, true>()) );\n+  VERIFY( (test_category<is_integral, unsigned short, true>()) );\n+  VERIFY( (test_category<is_integral, int, true>()) );\n+  VERIFY( (test_category<is_integral, unsigned int, true>()) );\n+  VERIFY( (test_category<is_integral, long, true>()) );\n+  VERIFY( (test_category<is_integral, unsigned long, true>()) );\n+  VERIFY( (test_category<is_integral, long long, true>()) );\n+  VERIFY( (test_category<is_integral, unsigned long long, true>()) );\n+\n+  VERIFY( (test_category<is_integral, float, false>()) );\n+  VERIFY( (test_category<is_integral, double, false>()) );\n+  VERIFY( (test_category<is_integral, long double, false>()) );\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_integral, ClassType, false>()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "59feb3625efe211ba5e55feb0964892050abc8af", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_integral/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_integral%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_integral%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_integral%2Ftypedefs.cc?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_integral<int>          test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "46b8629ade94746198c13b1bf3d6b582b4b57ca0", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_void/is_void.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_void%2Fis_void.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_void%2Fis_void.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_void%2Fis_void.cc?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,63 @@\n+// 2004-12-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.1 Primary type categories\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+class ClassType { };\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_void;\n+  using __gnu_test::test_category;\n+\n+  VERIFY( (test_category<is_void, void, true>()) );\n+  \n+  VERIFY( (test_category<is_void, char, false>()) );\n+  VERIFY( (test_category<is_void, signed char, false>()) );\n+  VERIFY( (test_category<is_void, unsigned char, false>()) );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( (test_category<is_void, wchar_t, false>()) );\n+#endif\n+  VERIFY( (test_category<is_void, short, false>()) );\n+  VERIFY( (test_category<is_void, unsigned short, false>()) );\n+  VERIFY( (test_category<is_void, int, false>()) );\n+  VERIFY( (test_category<is_void, unsigned int, false>()) );\n+  VERIFY( (test_category<is_void, long, false>()) );\n+  VERIFY( (test_category<is_void, unsigned long, false>()) );\n+  VERIFY( (test_category<is_void, long long, false>()) );\n+  VERIFY( (test_category<is_void, unsigned long long, false>()) );\n+  VERIFY( (test_category<is_void, float, false>()) );\n+  VERIFY( (test_category<is_void, double, false>()) );\n+  VERIFY( (test_category<is_void, long double, false>()) );\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_void, ClassType, false>()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "16bf98e6e6c36159d06b4b47a03ab1df76756d30", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_void/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_void%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bc46004681c9ab631a38fc62f086f6274aaea/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_void%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_void%2Ftypedefs.cc?ref=493bc46004681c9ab631a38fc62f086f6274aaea", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_void<int>              test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}]}