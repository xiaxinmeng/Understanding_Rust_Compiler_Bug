{"sha": "7a18bc4ae62081021f4fd90d591a588cac931f77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExOGJjNGFlNjIwODEwMjFmNGZkOTBkNTkxYTU4OGNhYzkzMWY3Nw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-02-03T22:57:22Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-02-05T16:11:04Z"}, "message": "c++: Fix bogus -Wvolatile warning in C++20 [PR98947]\n\nSince most of volatile is deprecated in C++20, we are required to warn\nfor compound assignments to volatile variables and so on.  But here we\nhave\n\n  volatile int x, y, z;\n  (b ? x : y) = 1;\n\nand we shouldn't warn, because simple assignments like x = 24; should\nnot provoke the warning when they are a discarded-value expression.\n\nWe warn here because when ?: is used as an lvalue, we transform it in\ncp_build_modify_expr/COND_EXPR from (a ? b : c) = rhs to\n\n  (a ? (b = rhs) : (c = rhs))\n\nand build_conditional_expr then calls mark_lvalue_use for the new\nartificial assignments, which then evokes the warning.  The calls\nto mark_lvalue_use were added in r160289 to suppress warnings in\nWunused-var-10.c, but looks like they're no longer needed.\n\nTo warn on\n\n    (b ? (x = 2) : y) = 1;\n    (b ? x : (y = 5)) = 1;\n\nI've tweaked a check in mark_use/MODIFY_EXPR.\n\nI'd argue this is a regression because GCC 9 doesn't warn.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98947\n\t* call.c (build_conditional_expr_1): Don't call mark_lvalue_use\n\ton arg2/arg3.\n\t* expr.c (mark_use) <case MODIFY_EXPR>: Don't check read_p when\n\tissuing the -Wvolatile warning.  Only set TREE_THIS_VOLATILE if\n\ta warning was emitted.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98947\n\t* g++.dg/cpp2a/volatile5.C: New test.", "tree": {"sha": "96f3a425cf90a4941e732ea85fd19c5f5afb1f69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96f3a425cf90a4941e732ea85fd19c5f5afb1f69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a18bc4ae62081021f4fd90d591a588cac931f77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a18bc4ae62081021f4fd90d591a588cac931f77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a18bc4ae62081021f4fd90d591a588cac931f77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a18bc4ae62081021f4fd90d591a588cac931f77/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cbc10d894494c34987d1f42f955e7843457ee38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cbc10d894494c34987d1f42f955e7843457ee38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cbc10d894494c34987d1f42f955e7843457ee38"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "4744c9768ecc9d4329c72ec077404d42dccd4f89", "filename": "gcc/cp/call.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a18bc4ae62081021f4fd90d591a588cac931f77/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a18bc4ae62081021f4fd90d591a588cac931f77/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=7a18bc4ae62081021f4fd90d591a588cac931f77", "patch": "@@ -5559,8 +5559,6 @@ build_conditional_expr_1 (const op_location_t &loc,\n       && same_type_p (arg2_type, arg3_type))\n     {\n       result_type = arg2_type;\n-      arg2 = mark_lvalue_use (arg2);\n-      arg3 = mark_lvalue_use (arg3);\n       goto valid_operands;\n     }\n "}, {"sha": "d16d1896f2ddd08264b389b02b9640cca332ec13", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a18bc4ae62081021f4fd90d591a588cac931f77/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a18bc4ae62081021f4fd90d591a588cac931f77/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=7a18bc4ae62081021f4fd90d591a588cac931f77", "patch": "@@ -224,17 +224,17 @@ mark_use (tree expr, bool rvalue_p, bool read_p,\n \t     a volatile-qualified type is deprecated unless the assignment\n \t     is either a discarded-value expression or appears in an\n \t     unevaluated context.\"  */\n-\t  if (read_p\n-\t      && !cp_unevaluated_operand\n+\t  if (!cp_unevaluated_operand\n \t      && (TREE_THIS_VOLATILE (lhs)\n \t\t  || CP_TYPE_VOLATILE_P (TREE_TYPE (lhs)))\n \t      && !TREE_THIS_VOLATILE (expr))\n \t    {\n-\t      warning_at (location_of (expr), OPT_Wvolatile,\n-\t\t\t  \"using value of simple assignment with %<volatile%>-\"\n-\t\t\t  \"qualified left operand is deprecated\");\n-\t      /* Make sure not to warn about this assignment again.  */\n-\t      TREE_THIS_VOLATILE (expr) = true;\n+\t      if (warning_at (location_of (expr), OPT_Wvolatile,\n+\t\t\t      \"using value of simple assignment with \"\n+\t\t\t      \"%<volatile%>-qualified left operand is \"\n+\t\t\t      \"deprecated\"))\n+\t\t/* Make sure not to warn about this assignment again.  */\n+\t\tTREE_THIS_VOLATILE (expr) = true;\n \t    }\n \t  break;\n \t}"}, {"sha": "1f9d23845b42d21d1e5acb46adf3caa07444fb75", "filename": "gcc/testsuite/g++.dg/cpp2a/volatile5.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a18bc4ae62081021f4fd90d591a588cac931f77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fvolatile5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a18bc4ae62081021f4fd90d591a588cac931f77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fvolatile5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fvolatile5.C?ref=7a18bc4ae62081021f4fd90d591a588cac931f77", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/98947\n+// { dg-do compile }\n+\n+volatile int x, y, z;\n+\n+void\n+f (bool b)\n+{\n+  (b ? x : y) = 1;\n+  (b ? x : y) += 1; // { dg-warning \"compound assignment\" \"\" { target c++20 } }\n+  z = (b ? x : y) = 1; // { dg-warning \"using value of simple assignment\" \"\" { target c++20 } }\n+  ((z = 2) ? x : y) = 1; // { dg-warning \"using value of simple assignment\" \"\" { target c++20 } }\n+  (b ? (x = 2) : y) = 1; // { dg-warning \"using value of simple assignment\" \"\" { target c++20 } }\n+  (b ? x : (y = 5)) = 1; // { dg-warning \"using value of simple assignment\" \"\" { target c++20 } }\n+}"}]}