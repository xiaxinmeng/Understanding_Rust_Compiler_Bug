{"sha": "e8070c83ab40c11447ecd42f467041d65df4e807", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgwNzBjODNhYjQwYzExNDQ3ZWNkNDJmNDY3MDQxZDY1ZGY0ZTgwNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-27T18:52:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-12-16T13:01:01Z"}, "message": "[Ada] Avoid artificial underflow in System.Val_Real\n\ngcc/ada/\n\n\t* libgnat/s-valrea.adb (Maxexp32): New constant array.\n\t(Maxexp64): Likewise.\n\t(Maxexp80): Likewise.\n\t(Integer_to_Real): New local constants Maxexp and B.\n\tWhen the exponent is too negative, do the divison in two steps.", "tree": {"sha": "18b2f139797853e084c6c00e34ed5bf9d07be566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18b2f139797853e084c6c00e34ed5bf9d07be566"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8070c83ab40c11447ecd42f467041d65df4e807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8070c83ab40c11447ecd42f467041d65df4e807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8070c83ab40c11447ecd42f467041d65df4e807", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8070c83ab40c11447ecd42f467041d65df4e807/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0d40c5c325e39f2c9365dafd86850d089eea118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d40c5c325e39f2c9365dafd86850d089eea118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0d40c5c325e39f2c9365dafd86850d089eea118"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "5ce3642f41b9de5c4c86b5b0b164591aea3b72cf", "filename": "gcc/ada/libgnat/s-valrea.adb", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8070c83ab40c11447ecd42f467041d65df4e807/gcc%2Fada%2Flibgnat%2Fs-valrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8070c83ab40c11447ecd42f467041d65df4e807/gcc%2Fada%2Flibgnat%2Fs-valrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valrea.adb?ref=e8070c83ab40c11447ecd42f467041d65df4e807", "patch": "@@ -44,6 +44,27 @@ package body System.Val_Real is\n \n    package Impl is new Value_R (Uns, Precision_Limit, Floating => True);\n \n+   subtype Base_T is Unsigned range 2 .. 16;\n+\n+   --  The following tables compute the maximum exponent of the base that can\n+   --  fit in the given floating-point format, that is to say the element at\n+   --  index N is the largest K such that N**K <= Num'Last.\n+\n+   Maxexp32 : constant array (Base_T) of Positive :=\n+     (2  => 127, 3 => 80,  4 => 63,  5 => 55,  6 => 49,\n+      7  => 45,  8 => 42,  9 => 40, 10 => 38, 11 => 37,\n+      12 => 35, 13 => 34, 14 => 33, 15 => 32, 16 => 31);\n+\n+   Maxexp64 : constant array (Base_T) of Positive :=\n+     (2  => 1023, 3 => 646,  4 => 511,  5 => 441,  6 => 396,\n+      7  => 364,  8 => 341,  9 => 323, 10 => 308, 11 => 296,\n+      12 => 285, 13 => 276, 14 => 268, 15 => 262, 16 => 255);\n+\n+   Maxexp80 : constant array (Base_T) of Positive :=\n+     (2  => 16383, 3 => 10337, 4 => 8191,  5 => 7056,  6 => 6338,\n+      7  => 5836,  8 => 5461,  9 => 5168, 10 => 4932, 11 => 4736,\n+      12 => 4570, 13 => 4427, 14 => 4303, 15 => 4193, 16 => 4095);\n+\n    function Integer_to_Real\n      (Str   : String;\n       Val   : Uns;\n@@ -69,6 +90,15 @@ package body System.Val_Real is\n \n       pragma Unsuppress (Range_Check);\n \n+      Maxexp : constant Positive :=\n+                 (if    Num'Size = 32             then Maxexp32 (Base)\n+                  elsif Num'Size = 64             then Maxexp64 (Base)\n+                  elsif Num'Machine_Mantissa = 64 then Maxexp80 (Base)\n+                  else  raise Program_Error);\n+      --  Maximum exponent of the base that can fit in Num\n+\n+      B : constant Num := Num (Base);\n+\n       R_Val : Num;\n       S     : Integer := Scale;\n \n@@ -86,16 +116,25 @@ package body System.Val_Real is\n \n       R_Val := Num (Val);\n       if Extra > 0 then\n-         R_Val := R_Val * Num (Base) + Num (Extra);\n+         R_Val := R_Val * B + Num (Extra);\n          S := S - 1;\n       end if;\n \n-      --  Compute the final value\n+      --  Compute the final value. When the exponent is positive, we can do the\n+      --  computation directly because, if the exponentiation overflows, then\n+      --  the final value overflows as well. But when the exponent is negative,\n+      --  we may need to do it in two steps to avoid an artificial underflow.\n+\n+      if S > 0 then\n+         R_Val := R_Val * B ** S;\n+\n+      elsif S < 0 then\n+         if S < -Maxexp then\n+            R_Val := R_Val / B ** Maxexp;\n+            S := S + Maxexp;\n+         end if;\n \n-      if S < 0 then\n-         R_Val := R_Val / Num (Base) ** (-S);\n-      else\n-         R_Val := R_Val * Num (Base) ** S;\n+         R_Val := R_Val / B ** (-S);\n       end if;\n \n       --  Finally deal with initial minus sign, note that this processing is"}]}