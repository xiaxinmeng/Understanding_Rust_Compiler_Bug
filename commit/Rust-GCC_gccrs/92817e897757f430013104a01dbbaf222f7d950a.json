{"sha": "92817e897757f430013104a01dbbaf222f7d950a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI4MTdlODk3NzU3ZjQzMDAxMzEwNGEwMWRiYmFmMjIyZjdkOTUwYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-05T09:37:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-05T09:37:44Z"}, "message": "[multiple changes]\n\n2010-10-05  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-env.adb, prj-env.ads (Set_Path): New subprogram.\n\t(Deep_Copy): Removed, not used.\n\n2010-10-05  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Add_Internal_Interface_Entities): Code reorganization:\n\tmove code that searches in the list of primitives of a tagged type for\n\tthe entity that will be overridden by user-defined routines.\n\t* sem_disp.adb (Find_Primitive_Covering_Interface): Move here code\n\tpreviously located in routine Add_Internal_Interface_Entities.\n\t* sem_disp.ads (Find_Primitive_Covering_Interface): Update documentation\n\t* sem_ch6.adb (New_Overloaded_Entity): Add missing check on\n\tavailability of attribute Alias.\n\n2010-10-05  Ed Falis  <falis@adacore.com>\n\n\t* s-taprop-vxworks.adb, s-osinte-vxworks.adb, s-osinte-vxworks.ads,\n\ts-vxwext.ads, s-vxwext-kernel.ads, s-vxwext-rtp.adb, s-vxwext-rtp.ads:\n\tMove definition of intContext to System.OS_Interface.\n\tAdd necessary variants in System.VxWorks.Extensions.\n\n2010-10-05  Doug Rupp  <rupp@adacore.com>\n\n\t* s-asthan-vms-alpha.adb: On VMS, a task using\n\tpragma AST_Entry exhibits a memory leak when the task terminates\n\tbecause the vector allocated for the AST interface is not freed. Fixed\n\tby making the vector a controlled type.\n\nFrom-SVN: r164972", "tree": {"sha": "497f5b4a920a207a3da99a885ebca648bd450e5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/497f5b4a920a207a3da99a885ebca648bd450e5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92817e897757f430013104a01dbbaf222f7d950a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92817e897757f430013104a01dbbaf222f7d950a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92817e897757f430013104a01dbbaf222f7d950a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92817e897757f430013104a01dbbaf222f7d950a/comments", "author": null, "committer": null, "parents": [{"sha": "eada5fd1cf4179586b126a4a6cf6a0e1f6e69a01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eada5fd1cf4179586b126a4a6cf6a0e1f6e69a01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eada5fd1cf4179586b126a4a6cf6a0e1f6e69a01"}], "stats": {"total": 227, "additions": 144, "deletions": 83}, "files": [{"sha": "4e318038511e5f4e0b7bfa85934d6a6c74a37357", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=92817e897757f430013104a01dbbaf222f7d950a", "patch": "@@ -1,3 +1,33 @@\n+2010-10-05  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj-env.adb, prj-env.ads (Set_Path): New subprogram.\n+\t(Deep_Copy): Removed, not used.\n+\n+2010-10-05  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Add_Internal_Interface_Entities): Code reorganization:\n+\tmove code that searches in the list of primitives of a tagged type for\n+\tthe entity that will be overridden by user-defined routines.\n+\t* sem_disp.adb (Find_Primitive_Covering_Interface): Move here code\n+\tpreviously located in routine Add_Internal_Interface_Entities.\n+\t* sem_disp.ads (Find_Primitive_Covering_Interface): Update documentation\n+\t* sem_ch6.adb (New_Overloaded_Entity): Add missing check on\n+\tavailability of attribute Alias.\n+\n+2010-10-05  Ed Falis  <falis@adacore.com>\n+\n+\t* s-taprop-vxworks.adb, s-osinte-vxworks.adb, s-osinte-vxworks.ads,\n+\ts-vxwext.ads, s-vxwext-kernel.ads, s-vxwext-rtp.adb, s-vxwext-rtp.ads:\n+\tMove definition of intContext to System.OS_Interface.\n+\tAdd necessary variants in System.VxWorks.Extensions.\n+\n+2010-10-05  Doug Rupp  <rupp@adacore.com>\n+\n+\t* s-asthan-vms-alpha.adb: On VMS, a task using\n+\tpragma AST_Entry exhibits a memory leak when the task terminates\n+\tbecause the vector allocated for the AST interface is not freed. Fixed\n+\tby making the vector a controlled type.\n+\n 2010-10-05  Emmanuel Briot  <briot@adacore.com>\n \n \t* prj-nmsc.adb (Expand_Subdirectory_Pattern): Check that the prefix in"}, {"sha": "a9e9a8339d3deea98699159d938071c61fe2bca4", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=92817e897757f430013104a01dbbaf222f7d950a", "patch": "@@ -1974,22 +1974,17 @@ package body Prj.Env is\n       Path := Self.Path;\n    end Get_Path;\n \n-   ---------------\n-   -- Deep_Copy --\n-   ---------------\n+   --------------\n+   -- Set_Path --\n+   --------------\n \n-   function Deep_Copy\n-     (Self : Project_Search_Path) return Project_Search_Path is\n+   procedure Set_Path\n+     (Self : in out Project_Search_Path; Path : String) is\n    begin\n-      if Self.Path = null then\n-         return Project_Search_Path'\n-           (Path => null, Cache => Projects_Paths.Nil);\n-      else\n-         return Project_Search_Path'\n-           (Path => new String'(Self.Path.all),\n-            Cache => Projects_Paths.Nil);\n-      end if;\n-   end Deep_Copy;\n+      Free (Self.Path);\n+      Self.Path := new String'(Path);\n+      Projects_Paths.Reset (Self.Cache);\n+   end Set_Path;\n \n    ------------------\n    -- Find_Project --"}, {"sha": "17d5e48c5775146a04b34c626bfe3f6c3325b7e6", "filename": "gcc/ada/prj-env.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fprj-env.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fprj-env.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.ads?ref=92817e897757f430013104a01dbbaf222f7d950a", "patch": "@@ -188,6 +188,11 @@ package Prj.Env is\n    --  been called, the value set by the last call to Set_Project_Path.\n    --  The returned value must not be modified.\n \n+   procedure Set_Path\n+     (Self : in out Project_Search_Path; Path : String);\n+   --  Override the value of the project path.\n+   --  This also removes the implicit default search directories\n+\n    procedure Find_Project\n      (Self               : in out Project_Search_Path;\n       Project_File_Name  : String;\n@@ -202,10 +207,6 @@ package Prj.Env is\n    --  (.gpr) for the file name is optional.\n    --  Returns No_Name if no such project was found.\n \n-   function Deep_Copy (Self : Project_Search_Path) return Project_Search_Path;\n-   --  Return a deep copy of Self. The result can be modified independently of\n-   --  Self, and must be freed by the caller\n-\n private\n    package Projects_Paths is new GNAT.Dynamic_HTables.Simple_HTable\n      (Header_Num => Header_Num,"}, {"sha": "623538f8613e5256fdf089df18dce5f2874ff0d0", "filename": "gcc/ada/s-asthan-vms-alpha.adb", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fs-asthan-vms-alpha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fs-asthan-vms-alpha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-asthan-vms-alpha.adb?ref=92817e897757f430013104a01dbbaf222f7d950a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,14 +48,13 @@ with System.Task_Primitives;\n with System.Task_Primitives.Operations;\n with System.Task_Primitives.Operations.DEC;\n \n---  with Ada.Finalization;\n---  removed, because of problem with controlled attribute ???\n-\n+with Ada.Finalization;\n with Ada.Task_Attributes;\n \n with Ada.Exceptions; use Ada.Exceptions;\n \n with Ada.Unchecked_Conversion;\n+with Ada.Unchecked_Deallocation;\n \n package body System.AST_Handling is\n \n@@ -190,15 +189,22 @@ package body System.AST_Handling is\n    type AST_Handler_Vector is array (Natural range <>) of AST_Handler_Data;\n    type AST_Handler_Vector_Ref is access all AST_Handler_Vector;\n \n---  type AST_Vector_Ptr is new Ada.Finalization.Controlled with record\n---  removed due to problem with controlled attribute, consequence is that\n---  we have a memory leak if a task that has AST attribute entries is\n---  terminated. ???\n-\n-   type AST_Vector_Ptr is record\n+   type AST_Vector_Ptr is new Ada.Finalization.Controlled with record\n       Vector : AST_Handler_Vector_Ref;\n    end record;\n \n+   procedure Finalize (Obj : in out AST_Vector_Ptr);\n+   --  Override Finalize so that the AST Vector gets freed.\n+\n+   procedure Finalize (Obj : in out AST_Vector_Ptr) is\n+      procedure Free is new\n+       Ada.Unchecked_Deallocation (AST_Handler_Vector, AST_Handler_Vector_Ref);\n+   begin\n+      if Obj.Vector /= null then\n+         Free (Obj.Vector);\n+      end if;\n+   end Finalize;\n+\n    AST_Vector_Init : AST_Vector_Ptr;\n    --  Initial value, treated as constant, Vector will be null\n "}, {"sha": "c3b2814474a7fc4b8bc3584c0a22c3258b22c106", "filename": "gcc/ada/s-osinte-vxworks.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fs-osinte-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fs-osinte-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.adb?ref=92817e897757f430013104a01dbbaf222f7d950a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                   B o d y                                --\n --                                                                          --\n---         Copyright (C) 1997-2009, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1997-2010, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -229,6 +229,15 @@ package body System.OS_Interface is\n          Parameter);\n    end Interrupt_Connect;\n \n+   -----------------------\n+   -- Interrupt_Context --\n+   -----------------------\n+\n+   function Interrupt_Context return int is\n+   begin\n+      return System.VxWorks.Ext.Interrupt_Context;\n+   end Interrupt_Context;\n+\n    --------------------------------\n    -- Interrupt_Number_To_Vector --\n    --------------------------------"}, {"sha": "857b7cd1c04f3b0143911288fcd845886c84a001", "filename": "gcc/ada/s-osinte-vxworks.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fs-osinte-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fs-osinte-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.ads?ref=92817e897757f430013104a01dbbaf222f7d950a", "patch": "@@ -475,6 +475,11 @@ package System.OS_Interface is\n    --  handler which is invoked after the OS has saved enough context for a\n    --  high-level language routine to be safely invoked.\n \n+   function Interrupt_Context return int;\n+   pragma Inline (Interrupt_Context);\n+   --  Return 1 if executing in an interrupt context; return 0 if executing in\n+   --  a task context.\n+\n    function Interrupt_Number_To_Vector (intNum : int) return Interrupt_Vector;\n    pragma Inline (Interrupt_Number_To_Vector);\n    --  Convert a logical interrupt number to the hardware interrupt vector"}, {"sha": "45686ea0423585b135e4a7795fe3322b08b8e32c", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=92817e897757f430013104a01dbbaf222f7d950a", "patch": "@@ -1336,12 +1336,8 @@ package body System.Task_Primitives.Operations is\n    ---------------------\n \n    function Is_Task_Context return Boolean is\n-      function intContext return int;\n-      pragma Import (C, intContext, \"intContext\");\n-      --  Binding to the C routine intContext. This function returns 1 only\n-      --  if the current execution state is an interrupt context.\n    begin\n-      return intContext /= 1;\n+      return System.OS_Interface.Interrupt_Context /= 1;\n    end Is_Task_Context;\n \n    ----------------"}, {"sha": "59dfee03ac7a07f2d9bdfe8d0a87e5537eef8799", "filename": "gcc/ada/s-vxwext-kernel.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fs-vxwext-kernel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fs-vxwext-kernel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwext-kernel.ads?ref=92817e897757f430013104a01dbbaf222f7d950a", "patch": "@@ -61,6 +61,9 @@ package System.VxWorks.Ext is\n       Parameter : System.Address := System.Null_Address) return int;\n    pragma Import (C, Interrupt_Connect, \"intConnect\");\n \n+   function Interrupt_Context return int;\n+   pragma Import (C, Interrupt_Context, \"intContext\");\n+\n    function Interrupt_Number_To_Vector\n      (intNum : int) return Interrupt_Vector;\n    pragma Import (C, Interrupt_Number_To_Vector, \"__gnat_inum_to_ivec\");"}, {"sha": "39b7acf4c13915b1e127db1a0d497fe4b6410223", "filename": "gcc/ada/s-vxwext-rtp.adb", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fs-vxwext-rtp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fs-vxwext-rtp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwext-rtp.adb?ref=92817e897757f430013104a01dbbaf222f7d950a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                   B o d y                                --\n --                                                                          --\n---            Copyright (C) 2008-2009, Free Software Foundation, Inc.       --\n+--            Copyright (C) 2008-2010, Free Software Foundation, Inc.       --\n --                                                                          --\n -- GNARL is free software;  you can redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -53,15 +53,9 @@ package body System.VxWorks.Ext is\n       return ERROR;\n    end Int_Unlock;\n \n-   --------------------\n-   -- Set_Time_Slice --\n-   --------------------\n-\n-   function Set_Time_Slice (ticks : int) return int is\n-      pragma Unreferenced (ticks);\n-   begin\n-      return ERROR;\n-   end Set_Time_Slice;\n+   -----------------------\n+   -- Interrupt_Connect --\n+   -----------------------\n \n    function Interrupt_Connect\n      (Vector    : Interrupt_Vector;\n@@ -72,13 +66,38 @@ package body System.VxWorks.Ext is\n       return ERROR;\n    end Interrupt_Connect;\n \n+   -----------------------\n+   -- Interrupt_Context --\n+   -----------------------\n+\n+   function Interrupt_Context return int is\n+   begin\n+      --  For RTPs, never in an interrupt context\n+\n+      return 0;\n+   end Interrupt_Context;\n+\n+   --------------------------------\n+   -- Interrupt_Number_To_Vector --\n+   --------------------------------\n+\n    function Interrupt_Number_To_Vector\n      (intNum : int) return Interrupt_Vector is\n       pragma Unreferenced (intNum);\n    begin\n       return 0;\n    end Interrupt_Number_To_Vector;\n \n+   --------------------\n+   -- Set_Time_Slice --\n+   --------------------\n+\n+   function Set_Time_Slice (ticks : int) return int is\n+      pragma Unreferenced (ticks);\n+   begin\n+      return ERROR;\n+   end Set_Time_Slice;\n+\n    ------------------------\n    -- taskCpuAffinitySet --\n    ------------------------"}, {"sha": "7cfd48ce340553c09729200eed87274b675d18af", "filename": "gcc/ada/s-vxwext-rtp.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fs-vxwext-rtp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fs-vxwext-rtp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwext-rtp.ads?ref=92817e897757f430013104a01dbbaf222f7d950a", "patch": "@@ -61,6 +61,9 @@ package System.VxWorks.Ext is\n       Parameter : System.Address := System.Null_Address) return int;\n    pragma Convention (C, Interrupt_Connect);\n \n+   function Interrupt_Context return int;\n+   pragma Convention (C, Interrupt_Context);\n+\n    function Interrupt_Number_To_Vector\n      (intNum : int) return Interrupt_Vector;\n    pragma Convention (C, Interrupt_Number_To_Vector);"}, {"sha": "f39ccbf3f63b48d0cdb877d499a7d8f4ce3fc7d9", "filename": "gcc/ada/s-vxwext.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fs-vxwext.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fs-vxwext.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwext.ads?ref=92817e897757f430013104a01dbbaf222f7d950a", "patch": "@@ -62,6 +62,9 @@ package System.VxWorks.Ext is\n       Parameter : System.Address := System.Null_Address) return int;\n    pragma Import (C, Interrupt_Connect, \"intConnect\");\n \n+   function Interrupt_Context return int;\n+   pragma Import (C, Interrupt_Context, \"intContext\");\n+\n    function Interrupt_Number_To_Vector\n      (intNum : int) return Interrupt_Vector;\n    pragma Import (C, Interrupt_Number_To_Vector, \"__gnat_inum_to_ivec\");"}, {"sha": "4562bfe8d98968ea243d994ff876973e06f441b2", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=92817e897757f430013104a01dbbaf222f7d950a", "patch": "@@ -1567,41 +1567,9 @@ package body Sem_Ch3 is\n                   if Is_Null_Interface_Primitive (Iface_Prim) then\n                      goto Continue;\n \n-                  --  if the tagged type is defined at library level then we\n-                  --  invoke Check_Abstract_Overriding to report the error\n-                  --  and thus avoid generating the dispatch tables.\n-\n-                  elsif Is_Library_Level_Tagged_Type (Tagged_Type) then\n-                     Check_Abstract_Overriding (Tagged_Type);\n-                     pragma Assert (Serious_Errors_Detected > 0);\n-                     return;\n-\n-                  --  For tagged types defined in nested scopes it is still\n-                  --  possible to cover this interface primitive by means of\n-                  --  late overriding (see Override_Dispatching_Operation).\n-\n-                  --  Search in the list of primitives of the type for the\n-                  --  entity that will be overridden in such case to reference\n-                  --  it in the internal entity that we build here. If the\n-                  --  primitive is not overridden then the error will be\n-                  --  reported later as part of the analysis of entities\n-                  --  defined in the enclosing scope.\n-\n                   else\n-                     declare\n-                        El : Elmt_Id;\n-\n-                     begin\n-                        El := First_Elmt (Primitive_Operations (Tagged_Type));\n-                        while Present (El)\n-                          and then Alias (Node (El)) /= Iface_Prim\n-                        loop\n-                           Next_Elmt (El);\n-                        end loop;\n-\n-                        pragma Assert (Present (El));\n-                        Prim := Node (El);\n-                     end;\n+                     pragma Assert (False);\n+                     raise Program_Error;\n                   end if;\n                end if;\n "}, {"sha": "6994b40aeb3807fd66b628e62e853ea8961ef211", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=92817e897757f430013104a01dbbaf222f7d950a", "patch": "@@ -7625,6 +7625,7 @@ package body Sem_Ch6 is\n \n          if Ada_Version >= Ada_05\n            and then Present (Derived_Type)\n+           and then Present (Alias (S))\n            and then Is_Dispatching_Operation (Alias (S))\n            and then Present (Find_Dispatching_Type (Alias (S)))\n            and then Is_Interface (Find_Dispatching_Type (Alias (S)))"}, {"sha": "0cec5546faaf7fccbb4092ae4b4dd015300a1872", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=92817e897757f430013104a01dbbaf222f7d950a", "patch": "@@ -1651,7 +1651,8 @@ package body Sem_Disp is\n      (Tagged_Type : Entity_Id;\n       Iface_Prim  : Entity_Id) return Entity_Id\n    is\n-      E : Entity_Id;\n+      E  : Entity_Id;\n+      El : Elmt_Id;\n \n    begin\n       pragma Assert (Is_Interface (Find_Dispatching_Type (Iface_Prim))\n@@ -1660,6 +1661,8 @@ package body Sem_Disp is\n                      Is_Interface\n                        (Find_Dispatching_Type (Ultimate_Alias (Iface_Prim)))));\n \n+      --  Search in the homonym chain\n+\n       E := Current_Entity (Iface_Prim);\n       while Present (E) loop\n          if Is_Subprogram (E)\n@@ -1672,6 +1675,23 @@ package body Sem_Disp is\n          E := Homonym (E);\n       end loop;\n \n+      --  Search in the list of primitives of the type\n+\n+      El := First_Elmt (Primitive_Operations (Tagged_Type));\n+      while Present (El) loop\n+         E := Node (El);\n+\n+         if No (Interface_Alias (E))\n+           and then Alias (E) = Iface_Prim\n+         then\n+            return Node (El);\n+         end if;\n+\n+         Next_Elmt (El);\n+      end loop;\n+\n+      --  Not found\n+\n       return Empty;\n    end Find_Primitive_Covering_Interface;\n "}, {"sha": "428531d03386a0a1b2183f6cfb49a8b6299ec33b", "filename": "gcc/ada/sem_disp.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fsem_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92817e897757f430013104a01dbbaf222f7d950a/gcc%2Fada%2Fsem_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.ads?ref=92817e897757f430013104a01dbbaf222f7d950a", "patch": "@@ -82,10 +82,12 @@ package Sem_Disp is\n    function Find_Primitive_Covering_Interface\n      (Tagged_Type : Entity_Id;\n       Iface_Prim  : Entity_Id) return Entity_Id;\n-   --  Search in the homonym chain for the primitive of Tagged_Type that\n-   --  covers Iface_Prim. The homonym chain traversal is required to catch\n-   --  primitives associated with the partial view of private types when\n-   --  processing the corresponding full view.\n+   --  Search in the homonym chain for the primitive of Tagged_Type that covers\n+   --  Iface_Prim. The homonym chain traversal is required to catch primitives\n+   --  associated with the partial view of private types when processing the\n+   --  corresponding full view. If the entity is not found then search for it\n+   --  in the list of primitives of Tagged_Type. This latter search is needed\n+   --  when the interface primitive is covered by a private subprogram.\n \n    function Is_Dynamically_Tagged (N : Node_Id) return Boolean;\n    --  Used to determine whether a call is dispatching, i.e. if is an"}]}