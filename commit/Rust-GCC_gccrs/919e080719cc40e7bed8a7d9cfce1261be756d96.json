{"sha": "919e080719cc40e7bed8a7d9cfce1261be756d96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE5ZTA4MDcxOWNjNDBlN2JlZDhhN2Q5Y2ZjZTEyNjFiZTc1NmQ5Ng==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-07-17T08:25:51Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-07-17T08:25:51Z"}, "message": "c90-enum-comma-1.c, [...]: New tests.\n\n        * gcc.dg/c90-enum-comma-1.c, gcc.dg/c90-idem-qual-1.c,\n        gcc.dg/c90-impl-decl-1.c, gcc.dg/c90-impl-int-1.c,\n        gcc.dg/c90-longlong.c, gcc.dg/c90-restrict-1.c,\n        gcc.dg/c90-return-1.c, gcc.dg/c99-enum-comma-1.c,\n        gcc.dg/c99-idem-qual-1.c, gcc.dg/c99-impl-decl-1.c,\n        gcc.dg/c99-impl-int-1.c, gcc.dg/c99-longlong-1.c,\n        gcc.dg/c99-restrict-1.c, gcc.dg/c99-return-1.c: New tests.\n\nFrom-SVN: r35073", "tree": {"sha": "e827b4dc57ae5e195740f501b640468fe1dac1ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e827b4dc57ae5e195740f501b640468fe1dac1ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/919e080719cc40e7bed8a7d9cfce1261be756d96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/919e080719cc40e7bed8a7d9cfce1261be756d96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/919e080719cc40e7bed8a7d9cfce1261be756d96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/919e080719cc40e7bed8a7d9cfce1261be756d96/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f42ef510b353657cce680c12a42cdb861ed5d081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f42ef510b353657cce680c12a42cdb861ed5d081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f42ef510b353657cce680c12a42cdb861ed5d081"}], "stats": {"total": 172, "additions": 172, "deletions": 0}, "files": [{"sha": "aa0b211fb226e59f9df75b16c34afb31d03f406c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=919e080719cc40e7bed8a7d9cfce1261be756d96", "patch": "@@ -1,3 +1,13 @@\n+2000-07-17  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c90-enum-comma-1.c, gcc.dg/c90-idem-qual-1.c,\n+\tgcc.dg/c90-impl-decl-1.c, gcc.dg/c90-impl-int-1.c,\n+\tgcc.dg/c90-longlong.c, gcc.dg/c90-restrict-1.c,\n+\tgcc.dg/c90-return-1.c, gcc.dg/c99-enum-comma-1.c,\n+\tgcc.dg/c99-idem-qual-1.c, gcc.dg/c99-impl-decl-1.c,\n+\tgcc.dg/c99-impl-int-1.c, gcc.dg/c99-longlong-1.c,\n+\tgcc.dg/c99-restrict-1.c, gcc.dg/c99-return-1.c: New tests.\n+\n Mon Jul 17 00:41:57 2000   Greg McGary <greg@mcgary.org>\n \n \t* gcc.c-torture/execute/20000717-1.c: New test."}, {"sha": "2029c92f593569c0c253b0a716c5c807e1a073d8", "filename": "gcc/testsuite/gcc.dg/c90-enum-comma-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-enum-comma-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-enum-comma-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-enum-comma-1.c?ref=919e080719cc40e7bed8a7d9cfce1261be756d96", "patch": "@@ -0,0 +1,7 @@\n+/* Test for commas at end of enums: in C99 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+enum foo { bar, };  /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"comma at end\" \"enum comma error\" { target *-*-* } 6 } */"}, {"sha": "ee05a82f558059a61a7410b670c7e2d7ac8fa283", "filename": "gcc/testsuite/gcc.dg/c90-idem-qual-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-idem-qual-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-idem-qual-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-idem-qual-1.c?ref=919e080719cc40e7bed8a7d9cfce1261be756d96", "patch": "@@ -0,0 +1,8 @@\n+/* Test for idempotent type qualifiers: in C99 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+typedef const int cint;\n+const cint foo; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"duplicate\" \"duplicate type qualifier error\" { target *-*-* } 7 } */"}, {"sha": "4e4431e6bec2dadd69fcf4c6418f3b14446fba5c", "filename": "gcc/testsuite/gcc.dg/c90-impl-decl-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-impl-decl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-impl-decl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-impl-decl-1.c?ref=919e080719cc40e7bed8a7d9cfce1261be756d96", "patch": "@@ -0,0 +1,22 @@\n+/* Test for implicit function declaration: in C90 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+void\n+foo (void)\n+{\n+  bar ();\n+}\n+\n+/* C90 subclause 7.1.7 says we can implicitly declare strcmp; C99 removes\n+   implict declarations.\n+*/\n+int\n+bar (const char *a, const char *b)\n+{\n+  /* This fails for GCC CVS 20000709, but is not marked XFAIL since\n+     GCC 2.95.2 passes.\n+  */\n+  return strcmp (a, b); /* { dg-bogus \"implicit\" \"implicit declaration warning for strcmp\" } */\n+}"}, {"sha": "cd995c296cb523f376c78ae93736c266ea1ab588", "filename": "gcc/testsuite/gcc.dg/c90-impl-int-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-impl-int-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-impl-int-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-impl-int-1.c?ref=919e080719cc40e7bed8a7d9cfce1261be756d96", "patch": "@@ -0,0 +1,8 @@\n+/* Test for implicit int: in C90 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+extern foo;\n+\n+bar (void) { }"}, {"sha": "e91e39e80142c155c2b60a2735c7d37f6ed9697e", "filename": "gcc/testsuite/gcc.dg/c90-longlong-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-longlong-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-longlong-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-longlong-1.c?ref=919e080719cc40e7bed8a7d9cfce1261be756d96", "patch": "@@ -0,0 +1,7 @@\n+/* Test for long long: in C99 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+long long foo; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"long long\" \"long long not in C90\" { target *-*-* } 6 } */"}, {"sha": "17af58b4b58823a5c33ff3d10b4f37e51fc6f346", "filename": "gcc/testsuite/gcc.dg/c90-restrict-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-restrict-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-restrict-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-restrict-1.c?ref=919e080719cc40e7bed8a7d9cfce1261be756d96", "patch": "@@ -0,0 +1,7 @@\n+/* Test for restrict: in C99 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+char *restrict foo; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"parse error|no type\" \"restrict not in C90\" { target *-*-* } 6 } */"}, {"sha": "59e9a920b8394f0dec9ea5a1e94bc35caab51347", "filename": "gcc/testsuite/gcc.dg/c90-return-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-return-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-return-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-return-1.c?ref=919e080719cc40e7bed8a7d9cfce1261be756d96", "patch": "@@ -0,0 +1,17 @@\n+/* Test for constraints on return statements.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+int\n+foo (void)\n+{\n+  return;\n+}\n+\n+void\n+bar (void)\n+{\n+  return 1; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  /* { dg-error \"with a value\" \"return constraint violation\" { target *-*-* } 15 } */\n+}"}, {"sha": "1b676a22917be86e0c8c127119bb106c533d2cc7", "filename": "gcc/testsuite/gcc.dg/c99-enum-comma-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-enum-comma-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-enum-comma-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-enum-comma-1.c?ref=919e080719cc40e7bed8a7d9cfce1261be756d96", "patch": "@@ -0,0 +1,6 @@\n+/* Test for commas at end of enums: in C99 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+enum foo { bar, };"}, {"sha": "c541d075cb1f63bc2c63e4de4a5dc67344d13ede", "filename": "gcc/testsuite/gcc.dg/c99-idem-qual-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-idem-qual-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-idem-qual-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-idem-qual-1.c?ref=919e080719cc40e7bed8a7d9cfce1261be756d96", "patch": "@@ -0,0 +1,7 @@\n+/* Test for idempotent type qualifiers: in C99 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+typedef const int cint;\n+const cint foo; /* { dg-bogus \"duplicate\" \"duplicate type qualifier error\" } */"}, {"sha": "5843e642065ef4f7f052c21e59ecbc59cd6b02de", "filename": "gcc/testsuite/gcc.dg/c99-impl-decl-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-impl-decl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-impl-decl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-impl-decl-1.c?ref=919e080719cc40e7bed8a7d9cfce1261be756d96", "patch": "@@ -0,0 +1,21 @@\n+/* Test for implicit function declaration: in C90 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+void\n+foo (void)\n+{\n+  bar (); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  /* { dg-error \"implicit\" \"C99 implicit declaration error\" { xfail *-*-* } 9 } */\n+}\n+\n+/* C90 subclause 7.1.7 says we can implicitly declare strcmp; C99 removes\n+   implict declarations.\n+*/\n+int\n+bar (const char *a, const char *b)\n+{\n+  return strcmp (a, b); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  /* { dg-error \"implicit\" \"C99 implicit declaration error\" { target *-*-* } 19 } */\n+}"}, {"sha": "2e5cad56d9e9929e707f459f9b0fcb01095be504", "filename": "gcc/testsuite/gcc.dg/c99-impl-int-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-impl-int-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-impl-int-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-impl-int-1.c?ref=919e080719cc40e7bed8a7d9cfce1261be756d96", "patch": "@@ -0,0 +1,9 @@\n+/* Test for implicit int: in C90 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+extern foo; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"type defaults\" \"C99 implicit int error\" { target *-*-* } 6 } */\n+bar (void) { } /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"type defaults\" \"C99 implicit int error\" { target *-*-* } 8 } */"}, {"sha": "92d5e0e806ced0350d3c57035719a98969257f9c", "filename": "gcc/testsuite/gcc.dg/c99-longlong-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-longlong-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-longlong-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-longlong-1.c?ref=919e080719cc40e7bed8a7d9cfce1261be756d96", "patch": "@@ -0,0 +1,6 @@\n+/* Test for long long: in C99 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+long long foo; /* { dg-bogus \"long long\" \"bogus long long error\" } */"}, {"sha": "30ddd96bdcc8b8b756d0e5493a41c4d533ab839b", "filename": "gcc/testsuite/gcc.dg/c99-restrict-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-restrict-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-restrict-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-restrict-1.c?ref=919e080719cc40e7bed8a7d9cfce1261be756d96", "patch": "@@ -0,0 +1,19 @@\n+/* Test for restrict: in C99 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+char *restrict foo;\n+\n+/* The following are constraint violations and should be rejected.  */\n+\n+int restrict bar; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"restrict\" \"restrict constraint violation\" { target *-*-* } 10 } */\n+\n+typedef void (*fp) (void);\n+\n+fp restrict baz; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"restrict\" \"restrict constraint violation\" { target *-*-* } 15 } */\n+\n+void quux (int restrict a[3]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"restrict\" \"restrict constraint violation\" { target *-*-* } 18 } */"}, {"sha": "017cf89a505ef36ab1cc5fda649ea18242cf1890", "filename": "gcc/testsuite/gcc.dg/c99-return-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-return-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919e080719cc40e7bed8a7d9cfce1261be756d96/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-return-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-return-1.c?ref=919e080719cc40e7bed8a7d9cfce1261be756d96", "patch": "@@ -0,0 +1,18 @@\n+/* Test for constraints on return statements.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+int\n+foo (void)\n+{\n+  return; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  /* { dg-error \"with no value\" \"return constraint violation\" { target *-*-* } 9 } */\n+}\n+\n+void\n+bar (void)\n+{\n+  return 1; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  /* { dg-error \"with a value\" \"return constraint violation\" { target *-*-* } 16 } */\n+}"}]}