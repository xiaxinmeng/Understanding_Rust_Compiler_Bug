{"sha": "296674dbc9842ac009f558390da2bf6e5a9d4409", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk2Njc0ZGJjOTg0MmFjMDA5ZjU1ODM5MGRhMmJmNmU1YTlkNDQwOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2013-12-04T22:57:20Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2013-12-04T22:57:20Z"}, "message": "re PR c/52023 ([C11] _Alignof (double) yields wrong value on x86)\n\n\tPR c/52023\nc-family:\n\t* c-common.c (c_sizeof_or_alignof_type): Add parameter min_alignof\n\tand check field alignment if set.\n\t* c-common.h (c_sizeof_or_alignof_type): Update prototype.\n\t(c_sizeof, c_alignof): Update calls to c_sizeof_or_alignof_type.\n\nc:\n\t* c-parser.c (c_parser_alignas_specifier): Use\n\tc_sizeof_or_alignof_type instead of c_alignof.\n\t(c_parser_alignof_expression): Likewise, with min_alignof\n\tparameter depending on alignof spelling used.\n\ncp:\n\t* typeck.c (cxx_sizeof_or_alignof_type): Update call to\n\tc_sizeof_or_alignof_type.\n\nobjc:\n\t* objc-act.c (objc_synthesize_getter): Update calls to\n\tc_sizeof_or_alignof_type.\n\ntestsuite:\n\t* gcc.dg/c11-align-6.c: New test.\n\nFrom-SVN: r205685", "tree": {"sha": "1d857f76a0338447e2abb6b4d8b9d3a69458fff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d857f76a0338447e2abb6b4d8b9d3a69458fff2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/296674dbc9842ac009f558390da2bf6e5a9d4409", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296674dbc9842ac009f558390da2bf6e5a9d4409", "html_url": "https://github.com/Rust-GCC/gccrs/commit/296674dbc9842ac009f558390da2bf6e5a9d4409", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296674dbc9842ac009f558390da2bf6e5a9d4409/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31e071aeb827f49ce2e891620852198e99d44a0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31e071aeb827f49ce2e891620852198e99d44a0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31e071aeb827f49ce2e891620852198e99d44a0c"}], "stats": {"total": 120, "additions": 109, "deletions": 11}, "files": [{"sha": "875b08d9bea7f33f0a437d2ce5690f1b28c7e17c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=296674dbc9842ac009f558390da2bf6e5a9d4409", "patch": "@@ -1,3 +1,11 @@\n+2013-12-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/52023\n+\t* c-common.c (c_sizeof_or_alignof_type): Add parameter min_alignof\n+\tand check field alignment if set.\n+\t* c-common.h (c_sizeof_or_alignof_type): Update prototype.\n+\t(c_sizeof, c_alignof): Update calls to c_sizeof_or_alignof_type.\n+\n 2013-12-04  Jakub Jelinek  <jakub@redhat.com>  \n \t    Marek Polacek  <polacek@redhat.com>\n "}, {"sha": "a06dea8b7f36fda0f828cb77734d3af3f84f26a9", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=296674dbc9842ac009f558390da2bf6e5a9d4409", "patch": "@@ -4921,14 +4921,17 @@ c_common_get_alias_set (tree t)\n }\n \f\n /* Compute the value of 'sizeof (TYPE)' or '__alignof__ (TYPE)', where\n-   the second parameter indicates which OPERATOR is being applied.\n+   the IS_SIZEOF parameter indicates which operator is being applied.\n    The COMPLAIN flag controls whether we should diagnose possibly\n    ill-formed constructs or not.  LOC is the location of the SIZEOF or\n-   TYPEOF operator.  */\n+   TYPEOF operator.  If MIN_ALIGNOF, the least alignment required for\n+   a type in any context should be returned, rather than the normal\n+   alignment for that type.  */\n \n tree\n c_sizeof_or_alignof_type (location_t loc,\n-\t\t\t  tree type, bool is_sizeof, int complain)\n+\t\t\t  tree type, bool is_sizeof, bool min_alignof,\n+\t\t\t  int complain)\n {\n   const char *op_name;\n   tree value = NULL;\n@@ -4994,6 +4997,22 @@ c_sizeof_or_alignof_type (location_t loc,\n \tvalue = size_binop_loc (loc, CEIL_DIV_EXPR, TYPE_SIZE_UNIT (type),\n \t\t\t\tsize_int (TYPE_PRECISION (char_type_node)\n \t\t\t\t\t  / BITS_PER_UNIT));\n+      else if (min_alignof)\n+\t{\n+\t  unsigned int align = TYPE_ALIGN (type);\n+\t  align = MIN (align, BIGGEST_ALIGNMENT);\n+#ifdef BIGGEST_FIELD_ALIGNMENT\n+\t  align = MIN (align, BIGGEST_FIELD_ALIGNMENT);\n+#endif\n+\t  tree field = build_decl (UNKNOWN_LOCATION, FIELD_DECL, NULL_TREE,\n+\t\t\t\t   type);\n+\t  unsigned int field_align = align;\n+#ifdef ADJUST_FIELD_ALIGN\n+\t  field_align = ADJUST_FIELD_ALIGN (field, field_align);\n+#endif\n+\t  align = MIN (align, field_align);\n+\t  value = size_int (align / BITS_PER_UNIT);\n+\t}\n       else\n \tvalue = size_int (TYPE_ALIGN_UNIT (type));\n     }"}, {"sha": "1df9e99243496da91dde3822929f20738d8e2e35", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=296674dbc9842ac009f558390da2bf6e5a9d4409", "patch": "@@ -759,7 +759,7 @@ extern tree c_wrap_maybe_const (tree, bool);\n extern tree c_save_expr (tree);\n extern tree c_common_truthvalue_conversion (location_t, tree);\n extern void c_apply_type_quals_to_decl (int, tree);\n-extern tree c_sizeof_or_alignof_type (location_t, tree, bool, int);\n+extern tree c_sizeof_or_alignof_type (location_t, tree, bool, bool, int);\n extern tree c_alignof_expr (location_t, tree);\n /* Print an error message for invalid operands to arith operation CODE.\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n@@ -792,8 +792,8 @@ extern bool keyword_is_type_qualifier (enum rid);\n extern bool keyword_is_decl_specifier (enum rid);\n extern bool cxx_fundamental_alignment_p (unsigned);\n \n-#define c_sizeof(LOC, T)  c_sizeof_or_alignof_type (LOC, T, true, 1)\n-#define c_alignof(LOC, T) c_sizeof_or_alignof_type (LOC, T, false, 1)\n+#define c_sizeof(LOC, T)  c_sizeof_or_alignof_type (LOC, T, true, false, 1)\n+#define c_alignof(LOC, T) c_sizeof_or_alignof_type (LOC, T, false, false, 1)\n \n /* Subroutine of build_binary_op, used for certain operations.  */\n extern tree shorten_binary_op (tree result_type, tree op0, tree op1, bool bitwise);"}, {"sha": "4f353e805f03c0712a7911b0f583e9b676dda67e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=296674dbc9842ac009f558390da2bf6e5a9d4409", "patch": "@@ -1,3 +1,11 @@\n+2013-12-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/52023\n+\t* c-parser.c (c_parser_alignas_specifier): Use\n+\tc_sizeof_or_alignof_type instead of c_alignof.\n+\t(c_parser_alignof_expression): Likewise, with min_alignof\n+\tparameter depending on alignof spelling used.\n+\n 2013-12-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/54113"}, {"sha": "c78d26909b44fd7e683d5002ed3594bc6fcccb18", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=296674dbc9842ac009f558390da2bf6e5a9d4409", "patch": "@@ -3045,7 +3045,8 @@ c_parser_alignas_specifier (c_parser * parser)\n     {\n       struct c_type_name *type = c_parser_type_name (parser);\n       if (type != NULL)\n-\tret = c_alignof (loc, groktypename (type, NULL, NULL));\n+\tret = c_sizeof_or_alignof_type (loc, groktypename (type, NULL, NULL),\n+\t\t\t\t\tfalse, true, 1);\n     }\n   else\n     ret = c_parser_expr_no_commas (parser, NULL).value;\n@@ -6446,11 +6447,12 @@ c_parser_alignof_expression (c_parser *parser)\n   location_t loc = c_parser_peek_token (parser)->location;\n   tree alignof_spelling = c_parser_peek_token (parser)->value;\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_ALIGNOF));\n+  bool is_c11_alignof = strcmp (IDENTIFIER_POINTER (alignof_spelling),\n+\t\t\t\t\"_Alignof\") == 0;\n   /* A diagnostic is not required for the use of this identifier in\n      the implementation namespace; only diagnose it for the C11\n      spelling because of existing code using the other spellings.  */\n-  if (!flag_isoc11\n-      && strcmp (IDENTIFIER_POINTER (alignof_spelling), \"_Alignof\") == 0)\n+  if (!flag_isoc11 && is_c11_alignof)\n     {\n       if (flag_isoc99)\n \tpedwarn (loc, OPT_Wpedantic, \"ISO C99 does not support %qE\",\n@@ -6494,7 +6496,9 @@ c_parser_alignof_expression (c_parser *parser)\n       /* alignof ( type-name ).  */\n       c_inhibit_evaluation_warnings--;\n       in_alignof--;\n-      ret.value = c_alignof (loc, groktypename (type_name, NULL, NULL));\n+      ret.value = c_sizeof_or_alignof_type (loc, groktypename (type_name,\n+\t\t\t\t\t\t\t       NULL, NULL),\n+\t\t\t\t\t    false, is_c11_alignof, 1);\n       ret.original_code = ERROR_MARK;\n       ret.original_type = NULL;\n       return ret;"}, {"sha": "2583e5e47aa6b5a8efcedd26c425b18c270407b3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=296674dbc9842ac009f558390da2bf6e5a9d4409", "patch": "@@ -1,3 +1,9 @@\n+2013-12-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/52023\n+\t* typeck.c (cxx_sizeof_or_alignof_type): Update call to\n+\tc_sizeof_or_alignof_type.\n+\n 2013-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/59268"}, {"sha": "74fc4d7b573d4c41091328e1798d8a020570d365", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=296674dbc9842ac009f558390da2bf6e5a9d4409", "patch": "@@ -1562,7 +1562,7 @@ cxx_sizeof_or_alignof_type (tree type, enum tree_code op, bool complain)\n     }\n \n   return c_sizeof_or_alignof_type (input_location, complete_type (type),\n-\t\t\t\t   op == SIZEOF_EXPR,\n+\t\t\t\t   op == SIZEOF_EXPR, false,\n \t\t\t\t   complain);\n }\n "}, {"sha": "366bc3f5402a137c62fb540615f1f1c53e6a7082", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=296674dbc9842ac009f558390da2bf6e5a9d4409", "patch": "@@ -1,3 +1,9 @@\n+2013-12-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/52023\n+\t* objc-act.c (objc_synthesize_getter): Update calls to\n+\tc_sizeof_or_alignof_type.\n+\n 2013-11-22  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* objc/objc-act.c: Add required include files from gimple.h."}, {"sha": "4a10f579becd177a3424d46679b072d544ef095c", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=296674dbc9842ac009f558390da2bf6e5a9d4409", "patch": "@@ -7273,6 +7273,7 @@ objc_synthesize_getter (tree klass, tree class_methods ATTRIBUTE_UNUSED, tree pr\n \t     the same type, there is no need to lookup the ivar.  */\n \t  size_of = c_sizeof_or_alignof_type (location, TREE_TYPE (property),\n \t\t\t\t\t      true /* is_sizeof */,\n+\t\t\t\t\t      false /* min_alignof */,\n \t\t\t\t\t      false /* complain */);\n \n \t  if (PROPERTY_NONATOMIC (property))\n@@ -7474,6 +7475,7 @@ objc_synthesize_setter (tree klass, tree class_methods ATTRIBUTE_UNUSED, tree pr\n \t     the same type, there is no need to lookup the ivar.  */\n \t  size_of = c_sizeof_or_alignof_type (location, TREE_TYPE (property),\n \t\t\t\t\t      true /* is_sizeof */,\n+\t\t\t\t\t      false /* min_alignof */,\n \t\t\t\t\t      false /* complain */);\n \n \t  if (PROPERTY_NONATOMIC (property))"}, {"sha": "7779db737db5ab22a1dd5fc1daf166b6d391bba7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=296674dbc9842ac009f558390da2bf6e5a9d4409", "patch": "@@ -1,3 +1,8 @@\n+2013-12-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/52023\n+\t* gcc.dg/c11-align-6.c: New test.\n+\n 2013-12-04  Marek Polacek  <polacek@redhat.com>\n \n \t* c-c++-common/ubsan/overflow-mul-2.c: New test."}, {"sha": "7ea994da4007728fc7b2107217f4edbbba853efa", "filename": "gcc/testsuite/gcc.dg/c11-align-6.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-align-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296674dbc9842ac009f558390da2bf6e5a9d4409/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-align-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-align-6.c?ref=296674dbc9842ac009f558390da2bf6e5a9d4409", "patch": "@@ -0,0 +1,40 @@\n+/* Test C11 _Alignof returning minimum alignment for a type.  PR\n+   52023.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c11\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+#define CHECK_ALIGN(TYPE)\t\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      struct { char c; TYPE v; } x;\t\t\\\n+      if (_Alignof (TYPE) > __alignof__ (x.v))\t\\\n+\tabort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+int\n+main (void)\n+{\n+  CHECK_ALIGN (_Bool);\n+  CHECK_ALIGN (char);\n+  CHECK_ALIGN (signed char);\n+  CHECK_ALIGN (unsigned char);\n+  CHECK_ALIGN (signed short);\n+  CHECK_ALIGN (unsigned short);\n+  CHECK_ALIGN (signed int);\n+  CHECK_ALIGN (unsigned int);\n+  CHECK_ALIGN (signed long);\n+  CHECK_ALIGN (unsigned long);\n+  CHECK_ALIGN (signed long long);\n+  CHECK_ALIGN (unsigned long long);\n+  CHECK_ALIGN (float);\n+  CHECK_ALIGN (double);\n+  CHECK_ALIGN (long double);\n+  CHECK_ALIGN (_Complex float);\n+  CHECK_ALIGN (_Complex double);\n+  CHECK_ALIGN (_Complex long double);\n+  exit (0);\n+}"}]}