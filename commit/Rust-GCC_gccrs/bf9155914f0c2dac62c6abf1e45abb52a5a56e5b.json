{"sha": "bf9155914f0c2dac62c6abf1e45abb52a5a56e5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY5MTU1OTE0ZjBjMmRhYzYyYzZhYmYxZTQ1YWJiNTJhNWE1NmU1Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-30T19:48:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-30T19:48:30Z"}, "message": "c: Fix ICE with _Atomic side-effect in nested fn param decls [PR94842]\n\nIf there are _Atomic side-effects in the parameter declarations\nof non-nested function, when they are parsed, current_function_decl is\nNULL, the create_artificial_label created labels during build_atomic* are\nthen adjusted by store_parm_decls through set_labels_context_r callback.\nUnfortunately, if such thing happens in nested function parameter\ndeclarations, while those decls are parsed current_function_decl is the\nparent function (and am not sure it is a good idea to temporarily clear it,\nsome code perhaps should be aware it is in a nested function, or it can\nrefer to variables from the parent function etc.) and that means\nstore_param_decls through set_labels_context_r doesn't adjust anything.\nAs those labels are emitted in the nested function body rather than in the\nparent, I think it is ok to override the context in those cases.\n\n2020-04-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/94842\n\t* c-decl.c (set_labels_context_r): In addition to context-less\n\tLABEL_DECLs adjust also LABEL_DECLs with context equal to\n\tparent function if any.\n\t(store_parm_decls): Adjust comment.\n\n\t* gcc.dg/pr94842.c: New test.", "tree": {"sha": "de693ac5e2948a01bcf8ed5843523adbdd6831eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de693ac5e2948a01bcf8ed5843523adbdd6831eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf9155914f0c2dac62c6abf1e45abb52a5a56e5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf9155914f0c2dac62c6abf1e45abb52a5a56e5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf9155914f0c2dac62c6abf1e45abb52a5a56e5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf9155914f0c2dac62c6abf1e45abb52a5a56e5b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66ec22b0d3feb96049283abe5c6c9a05ecef8b86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66ec22b0d3feb96049283abe5c6c9a05ecef8b86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66ec22b0d3feb96049283abe5c6c9a05ecef8b86"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "878f45b85889ebe54e0d32c40350c14c1c3454a6", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9155914f0c2dac62c6abf1e45abb52a5a56e5b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9155914f0c2dac62c6abf1e45abb52a5a56e5b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=bf9155914f0c2dac62c6abf1e45abb52a5a56e5b", "patch": "@@ -1,3 +1,11 @@\n+2020-04-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/94842\n+\t* c-decl.c (set_labels_context_r): In addition to context-less\n+\tLABEL_DECLs adjust also LABEL_DECLs with context equal to\n+\tparent function if any.\n+\t(store_parm_decls): Adjust comment.\n+\n 2020-04-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR objc/94637"}, {"sha": "b3e05be0af87422dab71fbaed3e0731dfcc76abb", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9155914f0c2dac62c6abf1e45abb52a5a56e5b/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9155914f0c2dac62c6abf1e45abb52a5a56e5b/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=bf9155914f0c2dac62c6abf1e45abb52a5a56e5b", "patch": "@@ -9722,15 +9722,18 @@ store_parm_decls_from (struct c_arg_info *arg_info)\n   store_parm_decls ();\n }\n \n-/* Called by walk_tree to look for and update context-less labels.  */\n+/* Called by walk_tree to look for and update context-less labels\n+   or labels with context in the parent function.  */\n \n static tree\n set_labels_context_r (tree *tp, int *walk_subtrees, void *data)\n {\n+  tree ctx = static_cast<tree>(data);\n   if (TREE_CODE (*tp) == LABEL_EXPR\n-      && DECL_CONTEXT (LABEL_EXPR_LABEL (*tp)) == NULL_TREE)\n+      && (DECL_CONTEXT (LABEL_EXPR_LABEL (*tp)) == NULL_TREE\n+\t  || DECL_CONTEXT (LABEL_EXPR_LABEL (*tp)) == DECL_CONTEXT (ctx)))\n     {\n-      DECL_CONTEXT (LABEL_EXPR_LABEL (*tp)) = static_cast<tree>(data);\n+      DECL_CONTEXT (LABEL_EXPR_LABEL (*tp)) = ctx;\n       *walk_subtrees = 0;\n     }\n \n@@ -9800,7 +9803,11 @@ store_parm_decls (void)\n \t gotos, labels, etc.  Because at that time the function decl\n \t for F has not been created yet, those labels do not have any\n \t function context.  But we have the fndecl now, so update the\n-\t labels accordingly.  gimplify_expr would crash otherwise.  */\n+\t labels accordingly.  gimplify_expr would crash otherwise.\n+\t Or with nested functions the labels could be created with parent\n+\t function's context, while when the statement is emitted at the\n+\t start of the nested function, it needs the nested function's\n+\t context.  */\n       walk_tree_without_duplicates (&arg_info->pending_sizes,\n \t\t\t\t    set_labels_context_r, fndecl);\n       add_stmt (arg_info->pending_sizes);"}, {"sha": "3df8a19a4d9db9b18c2c89462d9d50aa79d79dc5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9155914f0c2dac62c6abf1e45abb52a5a56e5b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9155914f0c2dac62c6abf1e45abb52a5a56e5b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf9155914f0c2dac62c6abf1e45abb52a5a56e5b", "patch": "@@ -1,3 +1,8 @@\n+2020-04-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/94842\n+\t* gcc.dg/pr94842.c: New test.\n+\n 2020-04-30  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/94856"}, {"sha": "33d9d42644c3c5bb3d6c3c7cbcf855f1b56e3a73", "filename": "gcc/testsuite/gcc.dg/pr94842.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9155914f0c2dac62c6abf1e45abb52a5a56e5b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94842.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9155914f0c2dac62c6abf1e45abb52a5a56e5b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94842.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94842.c?ref=bf9155914f0c2dac62c6abf1e45abb52a5a56e5b", "patch": "@@ -0,0 +1,11 @@\n+/* PR c/94842 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+_Atomic float x = 5;\n+\n+void\n+foo (void)\n+{\n+  void bar (float y[(int) (x += 2)]) {}\n+}"}]}