{"sha": "936d04b695e69a1ea5a22bba68c8e37f086f5e96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM2ZDA0YjY5NWU2OWExZWE1YTIyYmJhNjhjOGUzN2YwODZmNWU5Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-06-23T11:58:18Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-06-23T11:58:18Z"}, "message": "re PR middle-end/31541 (cannot take address of bit field)\n\n\n\tPR middle-end/31541\n\t* gimplify.c (mark_addressable): New function.\n\t(gimplify_modify_expr_rhs, gimplify_addr_expr, gimplify_expr): Use it.\n\n\t* gcc.c-torture/compile/pr31541.c: New.\n\nFrom-SVN: r125971", "tree": {"sha": "b72b47dfd8aa4cda4102f4800902e9b5f8922ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b72b47dfd8aa4cda4102f4800902e9b5f8922ab7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/936d04b695e69a1ea5a22bba68c8e37f086f5e96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/936d04b695e69a1ea5a22bba68c8e37f086f5e96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/936d04b695e69a1ea5a22bba68c8e37f086f5e96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/936d04b695e69a1ea5a22bba68c8e37f086f5e96/comments", "author": null, "committer": null, "parents": [{"sha": "bedd4d06f71d04b78cfada71c527ae49a91433ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bedd4d06f71d04b78cfada71c527ae49a91433ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bedd4d06f71d04b78cfada71c527ae49a91433ef"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "204a37f69733e313e5dfaccd52112bff0c2184b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/936d04b695e69a1ea5a22bba68c8e37f086f5e96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/936d04b695e69a1ea5a22bba68c8e37f086f5e96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=936d04b695e69a1ea5a22bba68c8e37f086f5e96", "patch": "@@ -1,3 +1,9 @@\n+2007-06-23  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/31541\n+\t* gimplify.c (mark_addressable): New function.\n+\t(gimplify_modify_expr_rhs, gimplify_addr_expr, gimplify_expr): Use it.\n+\n 2007-06-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR middle-end/32374"}, {"sha": "e4d650b78ab44095c9198e597d3845f86f804b38", "filename": "gcc/gimplify.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/936d04b695e69a1ea5a22bba68c8e37f086f5e96/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/936d04b695e69a1ea5a22bba68c8e37f086f5e96/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=936d04b695e69a1ea5a22bba68c8e37f086f5e96", "patch": "@@ -117,6 +117,17 @@ static enum gimplify_status gimplify_compound_expr (tree *, tree *, bool);\n static bool cpt_same_type (tree a, tree b);\n #endif\n \n+/* Mark X addressable.  Unlike the langhook we expect X to be in gimple\n+   form and we don't do any syntax checking.  */\n+static void\n+mark_addressable (tree x)\n+{\n+  while (handled_component_p (x))\n+    x = TREE_OPERAND (x, 0);\n+  if (TREE_CODE (x) != VAR_DECL && TREE_CODE (x) != PARM_DECL)\n+    return ;\n+  TREE_ADDRESSABLE (x) = 1;\n+}\n \n /* Return a hash value for a formal temporary table entry.  */\n \n@@ -3434,7 +3445,7 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p, tree *pre_p,\n \t    if (use_target)\n \t      {\n \t\tCALL_EXPR_RETURN_SLOT_OPT (*from_p) = 1;\n-\t\tlang_hooks.mark_addressable (*to_p);\n+\t\tmark_addressable (*to_p);\n \t      }\n \t  }\n \n@@ -3957,6 +3968,8 @@ gimplify_addr_expr (tree *expr_p, tree *pre_p, tree *post_p)\n \t the address of a call that returns a struct; see\n \t gcc.dg/c99-array-lval-1.c.  The gimplifier will correctly make\n \t the implied temporary explicit.  */\n+\n+      /* Mark the RHS addressable.  */\n       ret = gimplify_expr (&TREE_OPERAND (expr, 0), pre_p, post_p,\n \t\t\t   is_gimple_addressable, fb_either);\n       if (ret != GS_ERROR)\n@@ -3972,8 +3985,7 @@ gimplify_addr_expr (tree *expr_p, tree *pre_p, tree *post_p)\n \t     is set properly.  */\n \t  recompute_tree_invariant_for_addr_expr (expr);\n \n-\t  /* Mark the RHS addressable.  */\n-\t  lang_hooks.mark_addressable (TREE_OPERAND (expr, 0));\n+\t  mark_addressable (TREE_OPERAND (expr, 0));\n \t}\n       break;\n     }\n@@ -4011,7 +4023,7 @@ gimplify_asm_expr (tree *expr_p, tree *pre_p, tree *post_p)\n \t\t\t       &allows_mem, &allows_reg, &is_inout);\n \n       if (!allows_reg && allows_mem)\n-\tlang_hooks.mark_addressable (TREE_VALUE (link));\n+\tmark_addressable (TREE_VALUE (link));\n \n       tret = gimplify_expr (&TREE_VALUE (link), pre_p, post_p,\n \t\t\t    is_inout ? is_gimple_min_lval : is_gimple_lvalue,\n@@ -4140,7 +4152,7 @@ gimplify_asm_expr (tree *expr_p, tree *pre_p, tree *post_p)\n \t{\n \t  tret = gimplify_expr (&TREE_VALUE (link), pre_p, post_p,\n \t\t\t\tis_gimple_lvalue, fb_lvalue | fb_mayfail);\n-\t  lang_hooks.mark_addressable (TREE_VALUE (link));\n+\t  mark_addressable (TREE_VALUE (link));\n \t  if (tret == GS_ERROR)\n \t    {\n \t      error (\"memory input %d is not directly addressable\", i);\n@@ -5562,7 +5574,7 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t  if (fallback == fb_lvalue)\n \t    {\n \t      *expr_p = get_initialized_tmp_var (*expr_p, pre_p, post_p);\n-\t      lang_hooks.mark_addressable (*expr_p);\n+\t      mark_addressable (*expr_p);\n \t    }\n \t  break;\n \n@@ -5575,7 +5587,7 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t  if (fallback == fb_lvalue)\n \t    {\n \t      *expr_p = get_initialized_tmp_var (*expr_p, pre_p, post_p);\n-\t      lang_hooks.mark_addressable (*expr_p);\n+\t      mark_addressable (*expr_p);\n \t    }\n \t  break;\n \n@@ -5763,7 +5775,7 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t  else if (fallback == fb_lvalue)\n \t    {\n \t      *expr_p = get_initialized_tmp_var (*expr_p, pre_p, post_p);\n-\t      lang_hooks.mark_addressable (*expr_p);\n+\t      mark_addressable (*expr_p);\n \t    }\n \t  else\n \t    ret = GS_ALL_DONE;"}, {"sha": "435de150c8192866390edc0bb3b9da91c561559a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/936d04b695e69a1ea5a22bba68c8e37f086f5e96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/936d04b695e69a1ea5a22bba68c8e37f086f5e96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=936d04b695e69a1ea5a22bba68c8e37f086f5e96", "patch": "@@ -1,3 +1,7 @@\n+2007-06-22  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.c-torture/compile/pr31541.c: New.\n+\n 2007-06-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/large-size-array-3.c: Fix dg-do compile directive."}, {"sha": "0cac26ed09265ca6faa25041a62b5cb6fef9d21d", "filename": "gcc/testsuite/gcc.c-torture/compile/pr31541.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/936d04b695e69a1ea5a22bba68c8e37f086f5e96/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr31541.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/936d04b695e69a1ea5a22bba68c8e37f086f5e96/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr31541.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr31541.c?ref=936d04b695e69a1ea5a22bba68c8e37f086f5e96", "patch": "@@ -0,0 +1,9 @@\n+typedef unsigned char Uchar;\n+struct scsi_mode_header {\n+ unsigned char sense_data_len : 8;\n+};\n+int f(void)\n+{\n+ struct scsi_mode_header md;\n+return *(Uchar*)&md;\n+}"}]}