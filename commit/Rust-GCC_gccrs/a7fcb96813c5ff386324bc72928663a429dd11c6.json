{"sha": "a7fcb96813c5ff386324bc72928663a429dd11c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdmY2I5NjgxM2M1ZmYzODYzMjRiYzcyOTI4NjYzYTQyOWRkMTFjNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-27T15:50:11Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-27T15:50:11Z"}, "message": "(make_node, stabilize_reference_1): Abort if unknown class.\n\nFrom-SVN: r6647", "tree": {"sha": "ec9906997f8783a1323babeac1e3f94c7f5b7736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec9906997f8783a1323babeac1e3f94c7f5b7736"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7fcb96813c5ff386324bc72928663a429dd11c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7fcb96813c5ff386324bc72928663a429dd11c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7fcb96813c5ff386324bc72928663a429dd11c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7fcb96813c5ff386324bc72928663a429dd11c6/comments", "author": null, "committer": null, "parents": [{"sha": "0575fe3c3c9d675e3f033ed80a188d304ef73a70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0575fe3c3c9d675e3f033ed80a188d304ef73a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0575fe3c3c9d675e3f033ed80a188d304ef73a70"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "8c642cc17283b88f2f7fcb33c7927893df8149a5", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7fcb96813c5ff386324bc72928663a429dd11c6/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7fcb96813c5ff386324bc72928663a429dd11c6/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a7fcb96813c5ff386324bc72928663a429dd11c6", "patch": "@@ -926,6 +926,10 @@ make_node (code)\n       /* Identifier nodes are always permanent since they are\n \t unique in a compiler run.  */\n       if (code == IDENTIFIER_NODE) obstack = &permanent_obstack;\n+      break;\n+\n+    default:\n+      abort ();\n     }\n \n   t = (tree) obstack_alloc (obstack, length);\n@@ -2375,6 +2379,9 @@ stabilize_reference_1 (e)\n       /* Recursively stabilize each operand.  */\n       result = build_nt (code, stabilize_reference_1 (TREE_OPERAND (e, 0)));\n       break;\n+\n+    default:\n+      abort ();\n     }\n   \n   TREE_TYPE (result) = TREE_TYPE (e);"}]}