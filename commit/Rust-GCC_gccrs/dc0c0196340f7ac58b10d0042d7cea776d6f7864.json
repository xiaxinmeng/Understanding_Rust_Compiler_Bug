{"sha": "dc0c0196340f7ac58b10d0042d7cea776d6f7864", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMwYzAxOTYzNDBmN2FjNThiMTBkMDA0MmQ3Y2VhNzc2ZDZmNzg2NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-25T11:06:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-25T14:02:08Z"}, "message": "tree-optimization/95309 - fix invariant SLP node costing\n\nThis makes sure to compute SLP_TREE_NUMBER_OF_VEC_STMTS during SLP\nanalysis even for invariant / external nodes so costing properly\nknows what to cost.\n\n2020-05-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/95309\n\t* tree-vect-slp.c (vect_get_constant_vectors): Move number\n\tof vector computation ...\n\t(vect_slp_analyze_node_operations): ... to analysis phase.", "tree": {"sha": "425e9163bd308810320d7aaa65f4d891524c2fea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/425e9163bd308810320d7aaa65f4d891524c2fea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc0c0196340f7ac58b10d0042d7cea776d6f7864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc0c0196340f7ac58b10d0042d7cea776d6f7864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc0c0196340f7ac58b10d0042d7cea776d6f7864", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc0c0196340f7ac58b10d0042d7cea776d6f7864/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "431e762fae0faf10c6a115cd4e36d7c8867c5c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/431e762fae0faf10c6a115cd4e36d7c8867c5c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/431e762fae0faf10c6a115cd4e36d7c8867c5c17"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "ac8ab3ee21806d0b17e4fc37c8ccdacc5a04ef21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc0c0196340f7ac58b10d0042d7cea776d6f7864/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc0c0196340f7ac58b10d0042d7cea776d6f7864/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc0c0196340f7ac58b10d0042d7cea776d6f7864", "patch": "@@ -1,3 +1,10 @@\n+2020-05-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95309\n+\t* tree-vect-slp.c (vect_get_constant_vectors): Move number\n+\tof vector computation ...\n+\t(vect_slp_analyze_node_operations): ... to analysis phase.\n+\n 2020-05-25  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto-streamer-out.c (lto_output_tree): Add streamer_debugging check."}, {"sha": "c4fd045e9be241144971bc22ef42a2c25915c5c3", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc0c0196340f7ac58b10d0042d7cea776d6f7864/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc0c0196340f7ac58b10d0042d7cea776d6f7864/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=dc0c0196340f7ac58b10d0042d7cea776d6f7864", "patch": "@@ -2856,17 +2856,37 @@ vect_slp_analyze_node_operations (vec_info *vinfo, slp_tree node,\n      other referrers.  */\n   if (res)\n     FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), j, child)\n-      if (SLP_TREE_DEF_TYPE (child) != vect_internal_def)\n+      if ((SLP_TREE_DEF_TYPE (child) == vect_constant_def\n+\t   || SLP_TREE_DEF_TYPE (child) == vect_external_def)\n+\t  /* Perform usual caching, note code-generation still\n+\t     code-gens these nodes multiple times but we expect\n+\t     to CSE them later.  */\n+\t  && !visited.contains (child)\n+\t  && !lvisited.add (child))\n \t{\n \t  /* ???  After auditing more code paths make a \"default\"\n \t     and push the vector type from NODE to all children\n \t     if it is not already set.  */\n-\t  /* Perform usual caching, note code-generation still\n-\t     code-gens these nodes multiple times but we expect\n-\t     to CSE them later.  */\n-\t  if (!visited.contains (child)\n-\t      && !lvisited.add (child))\n-\t    vect_prologue_cost_for_slp (vinfo, child, cost_vec);\n+\t  /* Compute the number of vectors to be generated.  */\n+\t  tree vector_type = SLP_TREE_VECTYPE (child);\n+\t  if (!vector_type)\n+\t    {\n+\t      /* For shifts with a scalar argument we don't need\n+\t\t to cost or code-generate anything.\n+\t\t ???  Represent this more explicitely.  */\n+\t      gcc_assert ((STMT_VINFO_TYPE (SLP_TREE_SCALAR_STMTS (node)[0])\n+\t\t\t   == shift_vec_info_type)\n+\t\t\t  && j == 1);\n+\t      continue;\n+\t    }\n+\t  unsigned group_size = SLP_TREE_SCALAR_OPS (child).length ();\n+\t  poly_uint64 vf = 1;\n+\t  if (loop_vec_info loop_vinfo = dyn_cast <loop_vec_info> (vinfo))\n+\t    vf = loop_vinfo->vectorization_factor;\n+\t  SLP_TREE_NUMBER_OF_VEC_STMTS (child)\n+\t    = vect_get_num_vectors (vf * group_size, vector_type);\n+\t  /* And cost them.  */\n+\t  vect_prologue_cost_for_slp (vinfo, child, cost_vec);\n \t}\n \n   /* If this node can't be vectorized, try pruning the tree here rather\n@@ -3638,12 +3658,7 @@ vect_get_constant_vectors (vec_info *vinfo,\n \t\t\t\t\t (vinfo, TREE_TYPE (op), op_node)));\n     }\n \n-  poly_uint64 vf = 1;\n-  if (loop_vec_info loop_vinfo = dyn_cast <loop_vec_info> (vinfo))\n-    vf = loop_vinfo->vectorization_factor;\n-  unsigned int number_of_vectors\n-    = vect_get_num_vectors (vf * group_size, vector_type);\n-\n+  unsigned int number_of_vectors = SLP_TREE_NUMBER_OF_VEC_STMTS (op_node);\n   vec_oprnds->create (number_of_vectors);\n   auto_vec<tree> voprnds (number_of_vectors);\n "}]}