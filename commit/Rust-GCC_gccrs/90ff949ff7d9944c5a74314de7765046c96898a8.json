{"sha": "90ff949ff7d9944c5a74314de7765046c96898a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBmZjk0OWZmN2Q5OTQ0YzVhNzQzMTRkZTc3NjUwNDZjOTY4OThhOA==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2005-08-18T16:07:54Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2005-08-18T16:07:54Z"}, "message": "re PR tree-optimization/22228 (ICE with -ftree-vectorize in verify_ssa)\n\n        PR tree-optimization/22228\n        * tree-ssa-loop (pass_vectorize): Add TODO_verify_loops to todo_flags_start.\n        * tree-vect-transform.c (vect_transform_loop): Mark the variables that\n        are recorded in vect_vnames_to_rename for renaming.\n        * tree-vectorizer.c (vect_vnames_to_rename): New global bitmap.\n        (slpeel_update_phi_nodes_for_guard1): Record virtual vars for renaming\n        in vect_vnames_to_rename.\n        (vectorize_loops): Allocate and free the vect_vnames_to_rename bitmap.\n        * tree-vectorizer.h (vect_vnames_to_rename): New extern variable.\n\nFrom-SVN: r103252", "tree": {"sha": "5a4e2f96ccfdb102363ddcfd937e2214b062700d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a4e2f96ccfdb102363ddcfd937e2214b062700d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90ff949ff7d9944c5a74314de7765046c96898a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ff949ff7d9944c5a74314de7765046c96898a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90ff949ff7d9944c5a74314de7765046c96898a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ff949ff7d9944c5a74314de7765046c96898a8/comments", "author": null, "committer": null, "parents": [{"sha": "f17db6cd86ad1c3a67951f02abe211545efe10ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17db6cd86ad1c3a67951f02abe211545efe10ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17db6cd86ad1c3a67951f02abe211545efe10ef"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "b83091ce179cf8f3a7d6e322869c74e56e80eed4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff949ff7d9944c5a74314de7765046c96898a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff949ff7d9944c5a74314de7765046c96898a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90ff949ff7d9944c5a74314de7765046c96898a8", "patch": "@@ -1,3 +1,15 @@\n+2005-08-18  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/22228\n+\t* tree-ssa-loop (pass_vectorize): Add TODO_verify_loops to todo_flags_start.\n+\t* tree-vect-transform.c (vect_transform_loop): Mark the variables that\n+\tare recorded in vect_vnames_to_rename for renaming.\n+\t* tree-vectorizer.c (vect_vnames_to_rename): New global bitmap.\n+\t(slpeel_update_phi_nodes_for_guard1): Record virtual vars for renaming\n+\tin vect_vnames_to_rename.\n+\t(vectorize_loops): Allocate and free the vect_vnames_to_rename bitmap.\n+\t* tree-vectorizer.h (vect_vnames_to_rename): New extern variable.\n+\n 2005-08-18  Jan Hubicka  <jh@suse.cz>\n \n \tPR c++/22034"}, {"sha": "1f0c092abb5e48f4616738f5f2c20140786c49fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff949ff7d9944c5a74314de7765046c96898a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff949ff7d9944c5a74314de7765046c96898a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90ff949ff7d9944c5a74314de7765046c96898a8", "patch": "@@ -1,3 +1,8 @@\n+2005-08-18  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/22228\n+\t* g++.dg/vect/pr22543.cc: New test.\n+\n 2005-08-17  Steven Bosscher  <stevenb@suse.de>\n \n \tPR tree-optimization/21574"}, {"sha": "f5e55f195ef99eea0bbaa8965b4cf43552b7cea8", "filename": "gcc/testsuite/g++.dg/vect/pr22543.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff949ff7d9944c5a74314de7765046c96898a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr22543.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff949ff7d9944c5a74314de7765046c96898a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr22543.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr22543.cc?ref=90ff949ff7d9944c5a74314de7765046c96898a8", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+\n+struct A\n+{\n+  int i, j;\n+\n+  A() : i(), j() {}\n+  ~A() {}\n+\n+  operator int() { return 0; }\n+};\n+\n+struct B\n+{\n+  A foo() const { return A(); }\n+};\n+\n+struct X { ~X(); };\n+\n+struct C\n+{\n+  C();\n+\n+  int z[4];\n+};\n+\n+C::C()\n+{\n+  for (int i=0; i<4; ++i)\n+    z[i]=0;\n+\n+  X x;\n+\n+  for (int i=0; i<4; ++i)\n+    int j = B().foo();\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "05df8d13b6554ad4d1af33e798494820c6ce7832", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff949ff7d9944c5a74314de7765046c96898a8/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff949ff7d9944c5a74314de7765046c96898a8/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=90ff949ff7d9944c5a74314de7765046c96898a8", "patch": "@@ -212,7 +212,7 @@ struct tree_opt_pass pass_vectorize =\n   PROP_cfg | PROP_ssa,                  /* properties_required */\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n-  0,                                    /* todo_flags_start */\n+  TODO_verify_loops,\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_update_ssa,\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };"}, {"sha": "be5b77943649acbd89c2e15afbc092fa4b31f9c3", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff949ff7d9944c5a74314de7765046c96898a8/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff949ff7d9944c5a74314de7765046c96898a8/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=90ff949ff7d9944c5a74314de7765046c96898a8", "patch": "@@ -2735,10 +2735,16 @@ vect_transform_loop (loop_vec_info loop_vinfo,\n   int i;\n   tree ratio = NULL;\n   int vectorization_factor = LOOP_VINFO_VECT_FACTOR (loop_vinfo);\n+  bitmap_iterator bi;\n+  unsigned int j;\n \n   if (vect_print_dump_info (REPORT_DETAILS))\n     fprintf (vect_dump, \"=== vec_transform_loop ===\");\n \n+  /* CHECKME: we wouldn't need this if we calles update_ssa once\n+     for all loops.  */\n+  bitmap_zero (vect_vnames_to_rename);\n+\n   /* Peel the loop if there are data refs with unknown alignment.\n      Only one data ref with unknown store is allowed.  */\n \n@@ -2824,6 +2830,9 @@ vect_transform_loop (loop_vec_info loop_vinfo,\n \n   slpeel_make_loop_iterate_ntimes (loop, ratio);\n \n+  EXECUTE_IF_SET_IN_BITMAP (vect_vnames_to_rename, 0, j, bi)\n+    mark_sym_for_renaming (SSA_NAME_VAR (ssa_name (j)));\n+\n   /* The memory tags and pointers in vectorized statements need to\n      have their SSA forms updated.  FIXME, why can't this be delayed\n      until all the loops have been transformed?  */"}, {"sha": "1cce052d276262b5c5d9a0ee8cb82488051b682c", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff949ff7d9944c5a74314de7765046c96898a8/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff949ff7d9944c5a74314de7765046c96898a8/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=90ff949ff7d9944c5a74314de7765046c96898a8", "patch": "@@ -179,6 +179,9 @@ unsigned int vect_loops_num;\n \n /* Loop location.  */\n static LOC vect_loop_location;\n+\n+/* Bitmap of virtual variables to be renamed.  */\n+bitmap vect_vnames_to_rename;\n \f\n /*************************************************************************\n   Simple Loop Peeling Utilities\n@@ -511,6 +514,7 @@ slpeel_update_phi_nodes_for_guard1 (edge guard_edge, struct loop *loop,\n   basic_block orig_bb = loop->header;\n   edge new_exit_e;\n   tree current_new_name;\n+  tree name;\n \n   /* Create new bb between loop and new_merge_bb.  */\n   *new_exit_bb = split_edge (loop->single_exit);\n@@ -522,6 +526,15 @@ slpeel_update_phi_nodes_for_guard1 (edge guard_edge, struct loop *loop,\n        orig_phi && update_phi;\n        orig_phi = PHI_CHAIN (orig_phi), update_phi = PHI_CHAIN (update_phi))\n     {\n+      /* Virtual phi; Mark it for renaming. We actually want to call\n+\t mar_sym_for_renaming, but since all ssa renaming datastructures\n+\t are going to be freed before we get to call ssa_upate, we just\n+\t record this name for now in a bitmap, and will mark it for\n+\t renaming later.  */\n+      name = PHI_RESULT (orig_phi);\n+      if (!is_gimple_reg (SSA_NAME_VAR (name)))\n+        bitmap_set_bit (vect_vnames_to_rename, SSA_NAME_VERSION (name));\n+\n       /** 1. Handle new-merge-point phis  **/\n \n       /* 1.1. Generate new phi node in NEW_MERGE_BB:  */\n@@ -2010,6 +2023,10 @@ vectorize_loops (struct loops *loops)\n   /* Fix the verbosity level if not defined explicitly by the user.  */\n   vect_set_dump_settings ();\n \n+  /* Allocate the bitmap that records which virtual variables that \n+     need to be renamed.  */\n+  vect_vnames_to_rename = BITMAP_ALLOC (NULL);\n+\n   /*  ----------- Analyze loops. -----------  */\n \n   /* If some loop was duplicated, it gets bigger number \n@@ -2041,6 +2058,8 @@ vectorize_loops (struct loops *loops)\n \n   /*  ----------- Finalize. -----------  */\n \n+  BITMAP_FREE (vect_vnames_to_rename);\n+\n   for (i = 1; i < vect_loops_num; i++)\n     {\n       struct loop *loop = loops->parray[i];"}, {"sha": "be42b96dcba8dc5f4dfb5f3ecd6c5df7510876f0", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff949ff7d9944c5a74314de7765046c96898a8/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff949ff7d9944c5a74314de7765046c96898a8/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=90ff949ff7d9944c5a74314de7765046c96898a8", "patch": "@@ -263,6 +263,9 @@ extern enum verbosity_levels vect_verbosity_level;\n /* Number of loops, at the beginning of vectorization.  */\n extern unsigned int vect_loops_num;\n \n+/* Bitmap of virtual variables to be renamed.  */\n+extern bitmap vect_vnames_to_rename;\n+\n /*-----------------------------------------------------------------*/\n /* Function prototypes.                                            */\n /*-----------------------------------------------------------------*/"}]}