{"sha": "870aa1ebe0d3e05912f763ece1ed4491282d34e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcwYWExZWJlMGQzZTA1OTEyZjc2M2VjZTFlZDQ0OTEyODJkMzRlMg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-12-31T16:17:49Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-12-31T16:17:49Z"}, "message": "re PR middle-end/30322 (((-i-1) + i) +1) is turned into ~i + (i+1) and never into 0 on the tree level)\n\n\n\tPR middle-end/30322\n\t* fold-const.c (fold_binary): Fold X + ~X and ~X + X into -1 when\n\twe don't care about trapping overflow.  Only convert -A - 1 into ~A\n\twhen we don't care about trapping overflow.\n\n\t* gcc.dg/fold-plusnot-1.c: New test case.\n\nFrom-SVN: r120300", "tree": {"sha": "b1cf895f653525f285670f935e58e7beff2a7eef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1cf895f653525f285670f935e58e7beff2a7eef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/870aa1ebe0d3e05912f763ece1ed4491282d34e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870aa1ebe0d3e05912f763ece1ed4491282d34e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/870aa1ebe0d3e05912f763ece1ed4491282d34e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870aa1ebe0d3e05912f763ece1ed4491282d34e2/comments", "author": null, "committer": null, "parents": [{"sha": "7c2da05e604c27549afadf4df26c679aead5f414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c2da05e604c27549afadf4df26c679aead5f414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c2da05e604c27549afadf4df26c679aead5f414"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "be1f4fba56284136b9b9fba4e09c50a76ca12f08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870aa1ebe0d3e05912f763ece1ed4491282d34e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870aa1ebe0d3e05912f763ece1ed4491282d34e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=870aa1ebe0d3e05912f763ece1ed4491282d34e2", "patch": "@@ -1,3 +1,10 @@\n+2006-12-31  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/30322\n+\t* fold-const.c (fold_binary): Fold X + ~X and ~X + X into -1 when\n+\twe don't care about trapping overflow.  Only convert -A - 1 into ~A\n+\twhen we don't care about trapping overflow.\n+\n 2006-12-31  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/30338"}, {"sha": "da9579e6b4e5e558f3af3d01e8f11ead74c86cfe", "filename": "gcc/fold-const.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870aa1ebe0d3e05912f763ece1ed4491282d34e2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870aa1ebe0d3e05912f763ece1ed4491282d34e2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=870aa1ebe0d3e05912f763ece1ed4491282d34e2", "patch": "@@ -8662,6 +8662,26 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t  if (integer_zerop (arg1))\n \t    return non_lvalue (fold_convert (type, arg0));\n \n+\t  /* ~X + X is -1.  */\n+\t  if (TREE_CODE (arg0) == BIT_NOT_EXPR\n+\t      && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0)\n+\t      && !TYPE_TRAP_SIGNED (type))\n+\t    {\n+\t      t1 = build_int_cst (type, -1);\n+\t      t1 = force_fit_type (t1, 0, false, false);\n+\t      return omit_one_operand (type, t1, arg1);\n+\t    }\n+\n+\t  /* X + ~X is -1.  */\n+\t  if (TREE_CODE (arg1) == BIT_NOT_EXPR\n+\t      && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0)\n+\t      && !TYPE_TRAP_SIGNED (type))\n+\t    {\n+\t      t1 = build_int_cst (type, -1);\n+\t      t1 = force_fit_type (t1, 0, false, false);\n+\t      return omit_one_operand (type, t1, arg0);\n+\t  }\n+\n \t  /* If we are adding two BIT_AND_EXPR's, both of which are and'ing\n \t     with a constant, and the two constants have no bits in common,\n \t     we should treat this as a BIT_IOR_EXPR since this may produce more\n@@ -9002,7 +9022,8 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n       /* Convert -A - 1 to ~A.  */\n       if (INTEGRAL_TYPE_P (type)\n \t  && TREE_CODE (arg0) == NEGATE_EXPR\n-\t  && integer_onep (arg1))\n+\t  && integer_onep (arg1)\n+\t  && !TYPE_TRAP_SIGNED (type))\n \treturn fold_build1 (BIT_NOT_EXPR, type,\n \t\t\t    fold_convert (type, TREE_OPERAND (arg0, 0)));\n "}, {"sha": "30d25ea11dd4c78da2cab0a5f51d9ccd1b974114", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870aa1ebe0d3e05912f763ece1ed4491282d34e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870aa1ebe0d3e05912f763ece1ed4491282d34e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=870aa1ebe0d3e05912f763ece1ed4491282d34e2", "patch": "@@ -1,3 +1,8 @@\n+2006-12-31  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/30322\n+\t* gcc.dg/fold-plusnot-1.c: New test case.\n+\n 2006-12-31  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR c++/29731"}, {"sha": "81ddf46d6d0e66470f1a4ea29099b89d4bfb19ca", "filename": "gcc/testsuite/gcc.dg/fold-plusnot-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870aa1ebe0d3e05912f763ece1ed4491282d34e2/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-plusnot-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870aa1ebe0d3e05912f763ece1ed4491282d34e2/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-plusnot-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-plusnot-1.c?ref=870aa1ebe0d3e05912f763ece1ed4491282d34e2", "patch": "@@ -0,0 +1,30 @@\n+/* PR middle-end/30322 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+int test1(int a)\n+{\n+  return a + ~a;\n+}\n+\n+int test2(int b)\n+{\n+  return ~b + b;\n+}\n+\n+unsigned int test3(unsigned int c)\n+{\n+  return c + ~c;\n+}\n+\n+unsigned int test4(unsigned int d)\n+{\n+  return ~d + d;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\+ a\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ b\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ c\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ d\" 0 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */\n+"}]}