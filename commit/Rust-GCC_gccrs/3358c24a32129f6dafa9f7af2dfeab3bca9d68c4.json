{"sha": "3358c24a32129f6dafa9f7af2dfeab3bca9d68c4", "node_id": "C_kwDOANBUbNoAKDMzNThjMjRhMzIxMjlmNmRhZmE5ZjdhZjJkZmVhYjNiY2E5ZDY4YzQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-26T11:39:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-29T07:59:31Z"}, "message": "Improve compute_control_dep_chain documentation\n\nThe following refactors compute_control_dep_chain slightly by\ninlining is_loop_exit and factoring the check on the loop\ninvariant condition.  It also adds a comment as of how I\nunderstand the code and it's current problem.\n\n\t* gimple-predicate-analysis.cc (compute_control_dep_chain):\n\tInline is_loop_exit and refactor, add comment about\n\tloop exits.", "tree": {"sha": "e63f9cb803c60fb34713da5aff546a0fa3448652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e63f9cb803c60fb34713da5aff546a0fa3448652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3358c24a32129f6dafa9f7af2dfeab3bca9d68c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3358c24a32129f6dafa9f7af2dfeab3bca9d68c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3358c24a32129f6dafa9f7af2dfeab3bca9d68c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3358c24a32129f6dafa9f7af2dfeab3bca9d68c4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b9b6969a99725a171ee0ad4006cc39b0f7abf77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9b6969a99725a171ee0ad4006cc39b0f7abf77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b9b6969a99725a171ee0ad4006cc39b0f7abf77"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "934e9516e7b29b0d99d5fde4758666e32afaac51", "filename": "gcc/gimple-predicate-analysis.cc", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3358c24a32129f6dafa9f7af2dfeab3bca9d68c4/gcc%2Fgimple-predicate-analysis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3358c24a32129f6dafa9f7af2dfeab3bca9d68c4/gcc%2Fgimple-predicate-analysis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.cc?ref=3358c24a32129f6dafa9f7af2dfeab3bca9d68c4", "patch": "@@ -1110,6 +1110,10 @@ compute_control_dep_chain (basic_block dom_bb, const_basic_block dep_bb,\n \t\t\t   vec<edge> &cur_cd_chain, unsigned *num_calls,\n \t\t\t   unsigned in_region = 0, unsigned depth = 0)\n {\n+  /* In our recursive calls this doesn't happen.  */\n+  if (single_succ_p (dom_bb))\n+    return false;\n+\n   if (*num_calls > (unsigned)param_uninit_control_dep_attempts)\n     {\n       if (dump_file)\n@@ -1167,7 +1171,21 @@ compute_control_dep_chain (basic_block dom_bb, const_basic_block dep_bb,\n       basic_block cd_bb = e->dest;\n       cur_cd_chain.safe_push (e);\n       while (!dominated_by_p (CDI_POST_DOMINATORS, dom_bb, cd_bb)\n-\t     || is_loop_exit (dom_bb, cd_bb))\n+\t     /* We want to stop when the CFG merges back from the\n+\t\tbranch in dom_bb.  The post-dominance check alone\n+\t\tfalls foul of the case of a loop exit test branch\n+\t\twhere the path on the loop exit post-dominates\n+\t\tthe branch block.\n+\t\tThe following catches this but will not allow\n+\t\texploring the post-dom path further.  For the\n+\t\toutermost recursion this means we will fail to\n+\t\treach dep_bb while for others it means at least\n+\t\tdropping the loop exit predicate from the path\n+\t\twhich is problematic as it increases the domain\n+\t\tspanned by the resulting predicate.\n+\t\tSee gcc.dg/uninit-pred-11.c for the first case\n+\t\tand PR106754 for the second.  */\n+\t     || single_pred_p (cd_bb))\n \t{\n \t  if (cd_bb == dep_bb)\n \t    {\n@@ -1187,9 +1205,10 @@ compute_control_dep_chain (basic_block dom_bb, const_basic_block dep_bb,\n \t    break;\n \n \t  /* Check if DEP_BB is indirectly control-dependent on DOM_BB.  */\n-\t  if (compute_control_dep_chain (cd_bb, dep_bb, cd_chains,\n-\t\t\t\t\t num_chains, cur_cd_chain,\n-\t\t\t\t\t num_calls, in_region, depth + 1))\n+\t  if (!single_succ_p (cd_bb)\n+\t      && compute_control_dep_chain (cd_bb, dep_bb, cd_chains,\n+\t\t\t\t\t    num_chains, cur_cd_chain,\n+\t\t\t\t\t    num_calls, in_region, depth + 1))\n \t    {\n \t      found_cd_chain = true;\n \t      break;"}]}