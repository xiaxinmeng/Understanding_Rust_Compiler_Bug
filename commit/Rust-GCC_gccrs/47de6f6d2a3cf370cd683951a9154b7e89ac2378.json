{"sha": "47de6f6d2a3cf370cd683951a9154b7e89ac2378", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdkZTZmNmQyYTNjZjM3MGNkNjgzOTUxYTkxNTRiN2U4OWFjMjM3OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-09-25T10:05:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-09-25T10:05:27Z"}, "message": "re PR libstdc++/29179 (bugs in mt_allocator)\n\n2006-09-25  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/29179\n\t* include/ext/mt_allocator.h (__pool_base): Adjust/extend\n\tdocumentation in comments.\n\nFrom-SVN: r117193", "tree": {"sha": "3396c8e8917b221c952e56902ba7ded53da1a892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3396c8e8917b221c952e56902ba7ded53da1a892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47de6f6d2a3cf370cd683951a9154b7e89ac2378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47de6f6d2a3cf370cd683951a9154b7e89ac2378", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47de6f6d2a3cf370cd683951a9154b7e89ac2378", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47de6f6d2a3cf370cd683951a9154b7e89ac2378/comments", "author": null, "committer": null, "parents": [{"sha": "582df53e2aa0b43120c498c5edd11180a6e868dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582df53e2aa0b43120c498c5edd11180a6e868dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582df53e2aa0b43120c498c5edd11180a6e868dd"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "410f39f7f29209b04138972518d1c1d0e6ee42ea", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47de6f6d2a3cf370cd683951a9154b7e89ac2378/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47de6f6d2a3cf370cd683951a9154b7e89ac2378/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=47de6f6d2a3cf370cd683951a9154b7e89ac2378", "patch": "@@ -1,3 +1,9 @@\n+2006-09-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/29179\n+\t* include/ext/mt_allocator.h (__pool_base): Adjust/extend\n+\tdocumentation in comments.\n+\n 2006-09-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/boost_shared_ptr.h (shared_ptr<>::shared_ptr(const"}, {"sha": "bc2d61f6eecd8a069c0235b8348d18e71ffd9c91", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47de6f6d2a3cf370cd683951a9154b7e89ac2378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47de6f6d2a3cf370cd683951a9154b7e89ac2378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=47de6f6d2a3cf370cd683951a9154b7e89ac2378", "patch": "@@ -50,7 +50,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   struct __pool_base\n   {\n     // Using short int as type for the binmap implies we are never\n-    // caching blocks larger than 65535 with this allocator.\n+    // caching blocks larger than 32768 with this allocator.\n     typedef unsigned short int _Binmap_type;\n \n     // Variables used to configure the behavior of the allocator,\n@@ -73,27 +73,31 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // Allocation requests (after round-up to power of 2) below\n       // this value will be handled by the allocator. A raw new/\n       // call will be used for requests larger than this value.\n+      // NB: Must be much smaller than _M_chunk_size and in any\n+      // case <= 32768.\n       size_t\t_M_max_bytes; \n-      \n+\n       // Size in bytes of the smallest bin.\n-      // NB: Must be a power of 2 and >= _M_align.\n+      // NB: Must be a power of 2 and >= _M_align (and of course\n+      // much smaller than _M_max_bytes).\n       size_t\t_M_min_bin;\n-      \n+\n       // In order to avoid fragmenting and minimize the number of\n       // new() calls we always request new memory using this\n       // value. Based on previous discussions on the libstdc++\n       // mailing list we have choosen the value below.\n       // See http://gcc.gnu.org/ml/libstdc++/2001-07/msg00077.html\n+      // NB: At least one order of magnitude > _M_max_bytes. \n       size_t\t_M_chunk_size;\n-      \n+\n       // The maximum number of supported threads. For\n       // single-threaded operation, use one. Maximum values will\n       // vary depending on details of the underlying system. (For\n       // instance, Linux 2.4.18 reports 4070 in\n       // /proc/sys/kernel/threads-max, while Linux 2.6.6 reports\n       // 65534)\n       size_t \t_M_max_threads;\n-      \n+\n       // Each time a deallocation occurs in a threaded application\n       // we make sure that there are no more than\n       // _M_freelist_headroom % of used memory on the freelist. If"}]}