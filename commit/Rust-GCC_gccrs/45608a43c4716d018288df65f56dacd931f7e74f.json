{"sha": "45608a43c4716d018288df65f56dacd931f7e74f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU2MDhhNDNjNDcxNmQwMTgyODhkZjY1ZjU2ZGFjZDkzMWY3ZTc0Zg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2011-12-02T10:54:02Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2011-12-02T10:54:02Z"}, "message": "affinity.c: Use atomic rather than sync builtin.\n\n\t* config/linux/affinity.c: Use atomic rather than sync builtin.\n\t* config/linux/lock.c: Likewise.\n\t* config/linux/ptrlock.h: Likewise.\n\t* config/linux/ptrlock.c: Likewise.\n\t* config/linux/ptrlock.h (gomp_ptrlock_set): Always write here..\n\t* config/linux/ptrlock.c (gomp_ptrlock_set_slow): ..not here.\n\t* config/linux/futex.h (atomic_write_barrier): Delete unused function.\n\t* config/linux/alpha/futex.h (atomic_write_barrier): Likewise.\n\t* config/linux/ia64/futex.h (atomic_write_barrier): Likewise.\n\t* config/linux/mips/futex.h (atomic_write_barrier): Likewise.\n\t* config/linux/powerpc/futex.h (atomic_write_barrier): Likewise.\n\t* config/linux/s390/futex.h (atomic_write_barrier): Likewise.\n\t* config/linux/sparc/futex.h (atomic_write_barrier): Likewise.\n\t* config/linux/x86/futex.h (atomic_write_barrier): Likewise.\n\nFrom-SVN: r181906", "tree": {"sha": "ed5450e7e342051fc91b5bc0cb44db70ed1027e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed5450e7e342051fc91b5bc0cb44db70ed1027e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45608a43c4716d018288df65f56dacd931f7e74f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45608a43c4716d018288df65f56dacd931f7e74f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45608a43c4716d018288df65f56dacd931f7e74f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45608a43c4716d018288df65f56dacd931f7e74f/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1c83c23806e200f28a5467e682344bf828dfc9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c83c23806e200f28a5467e682344bf828dfc9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c83c23806e200f28a5467e682344bf828dfc9e"}], "stats": {"total": 129, "additions": 58, "deletions": 71}, "files": [{"sha": "11c96dd34857dca272150dedddeed5e9452f97b6", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=45608a43c4716d018288df65f56dacd931f7e74f", "patch": "@@ -1,3 +1,20 @@\n+2011-12-02  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/linux/affinity.c: Use atomic rather than sync builtin.\n+\t* config/linux/lock.c: Likewise.\n+\t* config/linux/ptrlock.h: Likewise.\n+\t* config/linux/ptrlock.c: Likewise.\n+\t* config/linux/ptrlock.h (gomp_ptrlock_set): Always write here..\n+\t* config/linux/ptrlock.c (gomp_ptrlock_set_slow): ..not here.\n+\t* config/linux/futex.h (atomic_write_barrier): Delete unused function.\n+\t* config/linux/alpha/futex.h (atomic_write_barrier): Likewise.\n+\t* config/linux/ia64/futex.h (atomic_write_barrier): Likewise.\n+\t* config/linux/mips/futex.h (atomic_write_barrier): Likewise.\n+\t* config/linux/powerpc/futex.h (atomic_write_barrier): Likewise.\n+\t* config/linux/s390/futex.h (atomic_write_barrier): Likewise.\n+\t* config/linux/sparc/futex.h (atomic_write_barrier): Likewise.\n+\t* config/linux/x86/futex.h (atomic_write_barrier): Likewise.\n+\n 2011-11-30  Alan Modra  <amodra@gmail.com>\n \n \tPR libgomp/51298"}, {"sha": "7a904df9492fd0905081abb5d6465b44eeb8c75a", "filename": "libgomp/config/linux/affinity.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Faffinity.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Faffinity.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Faffinity.c?ref=45608a43c4716d018288df65f56dacd931f7e74f", "patch": "@@ -109,7 +109,7 @@ gomp_init_thread_affinity (pthread_attr_t *attr)\n   unsigned int cpu;\n   cpu_set_t cpuset;\n \n-  cpu = __sync_fetch_and_add (&affinity_counter, 1);\n+  cpu = __atomic_fetch_add (&affinity_counter, 1, MEMMODEL_RELAXED);\n   cpu %= gomp_cpu_affinity_len;\n   CPU_ZERO (&cpuset);\n   CPU_SET (gomp_cpu_affinity[cpu], &cpuset);"}, {"sha": "c8076bd299eee40317104d5278841522be7b3fa4", "filename": "libgomp/config/linux/alpha/futex.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Falpha%2Ffutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Falpha%2Ffutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Falpha%2Ffutex.h?ref=45608a43c4716d018288df65f56dacd931f7e74f", "patch": "@@ -101,9 +101,3 @@ cpu_relax (void)\n {\n   __asm volatile (\"\" : : : \"memory\");\n }\n-\n-static inline void\n-atomic_write_barrier (void)\n-{\n-  __asm volatile (\"wmb\" : : : \"memory\");\n-}"}, {"sha": "d0136f50ac2ee5e5c51686a868bea5c3d521a801", "filename": "libgomp/config/linux/futex.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Ffutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Ffutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Ffutex.h?ref=45608a43c4716d018288df65f56dacd931f7e74f", "patch": "@@ -67,9 +67,3 @@ cpu_relax (void)\n {\n   __asm volatile (\"\" : : : \"memory\");\n }\n-\n-static inline void\n-atomic_write_barrier (void)\n-{\n-  __sync_synchronize ();\n-}"}, {"sha": "85cd02fa15c6640e9250ae78915b1be48dba2f51", "filename": "libgomp/config/linux/ia64/futex.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Fia64%2Ffutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Fia64%2Ffutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Fia64%2Ffutex.h?ref=45608a43c4716d018288df65f56dacd931f7e74f", "patch": "@@ -86,9 +86,3 @@ cpu_relax (void)\n {\n   __asm volatile (\"hint @pause\" : : : \"memory\");\n }\n-\n-static inline void\n-atomic_write_barrier (void)\n-{\n-  __sync_synchronize ();\n-}"}, {"sha": "60693439422fb53268bf8f12d6adb35f478721e9", "filename": "libgomp/config/linux/lock.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Flock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Flock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Flock.c?ref=45608a43c4716d018288df65f56dacd931f7e74f", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2005, 2008, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2005, 2008, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Richard Henderson <rth@redhat.com>.\n \n    This file is part of the GNU OpenMP Library (libgomp).\n@@ -62,7 +62,10 @@ gomp_unset_lock_30 (omp_lock_t *lock)\n int\n gomp_test_lock_30 (omp_lock_t *lock)\n {\n-  return __sync_bool_compare_and_swap (lock, 0, 1);\n+  int oldval = 0;\n+\n+  return __atomic_compare_exchange_n (lock, &oldval, 1, false,\n+\t\t\t\t      MEMMODEL_ACQUIRE, MEMMODEL_RELAXED);\n }\n \n void\n@@ -104,11 +107,14 @@ int\n gomp_test_nest_lock_30 (omp_nest_lock_t *lock)\n {\n   void *me = gomp_icv (true);\n+  int oldval;\n \n   if (lock->owner == me)\n     return ++lock->count;\n \n-  if (__sync_bool_compare_and_swap (&lock->lock, 0, 1))\n+  oldval = 0;\n+  if (__atomic_compare_exchange_n (&lock->lock, &oldval, 1, false,\n+\t\t\t\t   MEMMODEL_ACQUIRE, MEMMODEL_RELAXED))\n     {\n       lock->owner = me;\n       lock->count = 1;\n@@ -184,8 +190,9 @@ gomp_set_nest_lock_25 (omp_nest_lock_25_t *lock)\n \n   while (1)\n     {\n-      otid = __sync_val_compare_and_swap (&lock->owner, 0, tid);\n-      if (otid == 0)\n+      otid = 0;\n+      if (__atomic_compare_exchange_n (&lock->owner, &otid, tid, false,\n+\t\t\t\t       MEMMODEL_ACQUIRE, MEMMODEL_RELAXED))\n \t{\n \t  lock->count = 1;\n \t  return;\n@@ -207,7 +214,7 @@ gomp_unset_nest_lock_25 (omp_nest_lock_25_t *lock)\n \n   if (--lock->count == 0)\n     {\n-      __sync_lock_release (&lock->owner);\n+      __atomic_store_n (&lock->owner, 0, MEMMODEL_RELEASE);\n       futex_wake (&lock->owner, 1);\n     }\n }\n@@ -217,8 +224,9 @@ gomp_test_nest_lock_25 (omp_nest_lock_25_t *lock)\n {\n   int otid, tid = gomp_tid ();\n \n-  otid = __sync_val_compare_and_swap (&lock->owner, 0, tid);\n-  if (otid == 0)\n+  otid = 0;\n+  if (__atomic_compare_exchange_n (&lock->owner, &otid, tid, false,\n+\t\t\t\t   MEMMODEL_ACQUIRE, MEMMODEL_RELAXED))\n     {\n       lock->count = 1;\n       return 1;"}, {"sha": "93655d3114c185d5ee42223001bdb351b996461a", "filename": "libgomp/config/linux/mips/futex.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Fmips%2Ffutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Fmips%2Ffutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Fmips%2Ffutex.h?ref=45608a43c4716d018288df65f56dacd931f7e74f", "patch": "@@ -64,9 +64,3 @@ cpu_relax (void)\n {\n   __asm volatile (\"\" : : : \"memory\");\n }\n-\n-static inline void\n-atomic_write_barrier (void)\n-{\n-  __sync_synchronize ();\n-}"}, {"sha": "9d928e20441f7b9d1187c29f5da7a3e61373168e", "filename": "libgomp/config/linux/powerpc/futex.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Fpowerpc%2Ffutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Fpowerpc%2Ffutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Fpowerpc%2Ffutex.h?ref=45608a43c4716d018288df65f56dacd931f7e74f", "patch": "@@ -84,9 +84,3 @@ cpu_relax (void)\n {\n   __asm volatile (\"\" : : : \"memory\");\n }\n-\n-static inline void\n-atomic_write_barrier (void)\n-{\n-  __asm volatile (\"eieio\" : : : \"memory\");\n-}"}, {"sha": "5896f424a329ca7bee73019dff2fb7ea51141dda", "filename": "libgomp/config/linux/ptrlock.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Fptrlock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Fptrlock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Fptrlock.c?ref=45608a43c4716d018288df65f56dacd931f7e74f", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2008, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Jakub Jelinek <jakub@redhat.com>.\n \n    This file is part of the GNU OpenMP Library (libgomp).\n@@ -34,7 +34,10 @@ void *\n gomp_ptrlock_get_slow (gomp_ptrlock_t *ptrlock)\n {\n   int *intptr;\n-  __sync_bool_compare_and_swap (ptrlock, 1, 2);\n+  uintptr_t oldval = 1;\n+\n+  __atomic_compare_exchange_n (ptrlock, &oldval, 2, false,\n+\t\t\t       MEMMODEL_RELAXED, MEMMODEL_RELAXED);\n \n   /* futex works on ints, not pointers.\n      But a valid work share pointer will be at least\n@@ -53,11 +56,10 @@ gomp_ptrlock_get_slow (gomp_ptrlock_t *ptrlock)\n }\n \n void\n-gomp_ptrlock_set_slow (gomp_ptrlock_t *ptrlock, void *ptr)\n+gomp_ptrlock_set_slow (gomp_ptrlock_t *ptrlock)\n {\n   int *intptr;\n \n-  *ptrlock = ptr;\n   __asm volatile (\"\" : \"=r\" (intptr) : \"0\" (ptrlock));\n #if __BYTE_ORDER == __BIG_ENDIAN\n   if (sizeof (*ptrlock) > sizeof (int))"}, {"sha": "2f17e09cc7c25433311e431d412e7239ebc37f3c", "filename": "libgomp/config/linux/ptrlock.h", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Fptrlock.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Fptrlock.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Fptrlock.h?ref=45608a43c4716d018288df65f56dacd931f7e74f", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2008, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Jakub Jelinek <jakub@redhat.com>.\n \n    This file is part of the GNU OpenMP Library (libgomp).\n@@ -24,7 +24,14 @@\n \n /* This is a Linux specific implementation of a mutex synchronization\n    mechanism for libgomp.  This type is private to the library.  This\n-   implementation uses atomic instructions and the futex syscall.  */\n+   implementation uses atomic instructions and the futex syscall.\n+\n+   A ptrlock has four states:\n+   0/NULL Initial\n+   1      Owned by me, I get to write a pointer to ptrlock.\n+   2      Some thread is waiting on the ptrlock.\n+   >2     Ptrlock contains a valid pointer.\n+   It is not valid to gain the ptrlock and then write a NULL to it.  */\n \n #ifndef GOMP_PTRLOCK_H\n #define GOMP_PTRLOCK_H 1\n@@ -39,20 +46,25 @@ static inline void gomp_ptrlock_init (gomp_ptrlock_t *ptrlock, void *ptr)\n extern void *gomp_ptrlock_get_slow (gomp_ptrlock_t *ptrlock);\n static inline void *gomp_ptrlock_get (gomp_ptrlock_t *ptrlock)\n {\n+  uintptr_t oldval;\n+\n   if ((uintptr_t) *ptrlock > 2)\n     return *ptrlock;\n \n-  if (__sync_bool_compare_and_swap (ptrlock, NULL, (uintptr_t) 1))\n+  oldval = 0;\n+  if (__atomic_compare_exchange_n (ptrlock, &oldval, 1, false,\n+\t\t\t\t   MEMMODEL_ACQUIRE, MEMMODEL_ACQUIRE))\n     return NULL;\n \n   return gomp_ptrlock_get_slow (ptrlock);\n }\n \n-extern void gomp_ptrlock_set_slow (gomp_ptrlock_t *ptrlock, void *ptr);\n+extern void gomp_ptrlock_set_slow (gomp_ptrlock_t *ptrlock);\n static inline void gomp_ptrlock_set (gomp_ptrlock_t *ptrlock, void *ptr)\n {\n-  if (!__sync_bool_compare_and_swap (ptrlock, (uintptr_t) 1, ptr))\n-    gomp_ptrlock_set_slow (ptrlock, ptr);\n+  void *wait = __atomic_exchange_n (ptrlock, ptr, MEMMODEL_RELEASE);\n+  if ((uintptr_t) wait != 1)\n+    gomp_ptrlock_set_slow (ptrlock);\n }\n \n static inline void gomp_ptrlock_destroy (gomp_ptrlock_t *ptrlock)"}, {"sha": "e015c921de887a4423cb2e3acfd756aeb0784fd3", "filename": "libgomp/config/linux/s390/futex.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Fs390%2Ffutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Fs390%2Ffutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Fs390%2Ffutex.h?ref=45608a43c4716d018288df65f56dacd931f7e74f", "patch": "@@ -76,9 +76,3 @@ cpu_relax (void)\n {\n   __asm volatile (\"\" : : : \"memory\");\n }\n-\n-static inline void\n-atomic_write_barrier (void)\n-{\n-  __sync_synchronize ();\n-}"}, {"sha": "6c600446eb9c2af38053b7d52141b5005df66b88", "filename": "libgomp/config/linux/sparc/futex.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Fsparc%2Ffutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Fsparc%2Ffutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Fsparc%2Ffutex.h?ref=45608a43c4716d018288df65f56dacd931f7e74f", "patch": "@@ -96,13 +96,3 @@ cpu_relax (void)\n   __asm volatile (\"\" : : : \"memory\");\n #endif\n }\n-\n-static inline void\n-atomic_write_barrier (void)\n-{\n-#if defined __arch64__ || defined __sparc_v9__\n-  __asm volatile (\"membar #StoreStore\" : : : \"memory\");\n-#else\n-  __sync_synchronize ();\n-#endif\n-}"}, {"sha": "f6d26dc4918b6f9ed7cb1c6beb5e11d9ba47fc6c", "filename": "libgomp/config/linux/x86/futex.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Fx86%2Ffutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45608a43c4716d018288df65f56dacd931f7e74f/libgomp%2Fconfig%2Flinux%2Fx86%2Ffutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Fx86%2Ffutex.h?ref=45608a43c4716d018288df65f56dacd931f7e74f", "patch": "@@ -145,9 +145,3 @@ cpu_relax (void)\n {\n   __asm volatile (\"rep; nop\" : : : \"memory\");\n }\n-\n-static inline void\n-atomic_write_barrier (void)\n-{\n-  __sync_synchronize ();\n-}"}]}