{"sha": "4a08c95cf0604a96e6fc48102365ef0d498f11ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEwOGM5NWNmMDYwNGE5NmU2ZmM0ODEwMjM2NWVmMGQ0OThmMTFhZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-06-13T15:33:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-27T08:05:18Z"}, "message": "[Ada] Use membership tests in front-end\n\ngcc/ada/\n\n\t* aspects.adb, atree.adb, atree.ads, checks.adb, contracts.adb,\n\teinfo.adb, errout.adb, exp_aggr.adb, exp_attr.adb, exp_cg.adb,\n\texp_ch11.adb, exp_ch2.adb, exp_ch3.adb, exp_ch4.adb,\n\texp_ch5.adb, exp_ch6.adb, exp_ch7.adb, exp_ch8.adb, exp_ch9.adb,\n\texp_dbug.adb, exp_disp.adb, exp_intr.adb, exp_pakd.adb,\n\texp_prag.adb, exp_put_image.adb, exp_smem.adb, exp_tss.adb,\n\texp_unst.adb, exp_util.adb, freeze.adb, ghost.adb, gnat1drv.adb,\n\tinline.adb, lib-writ.adb, lib-xref-spark_specific.adb,\n\tlib-xref.adb, namet.adb, namet.ads, nlists.adb, par-ch10.adb,\n\tpar-ch2.adb, par-ch3.adb, par-ch4.adb, par-ch5.adb, par-ch6.adb,\n\tpar-prag.adb, par-util.adb, par_sco.adb, pprint.adb,\n\trepinfo.adb, restrict.adb, rtsfind.adb, scil_ll.adb, sem.adb,\n\tsem_aggr.adb, sem_attr.adb, sem_aux.adb, sem_cat.adb,\n\tsem_ch10.adb, sem_ch11.adb, sem_ch12.adb, sem_ch13.adb,\n\tsem_ch3.adb, sem_ch4.adb, sem_ch5.adb, sem_ch6.adb, sem_ch7.adb,\n\tsem_ch8.adb, sem_ch9.adb, sem_dim.adb, sem_disp.adb,\n\tsem_dist.adb, sem_elab.adb, sem_elim.adb, sem_eval.adb,\n\tsem_intr.adb, sem_mech.adb, sem_prag.adb, sem_res.adb,\n\tsem_scil.adb, sem_type.adb, sem_util.adb, sem_warn.adb,\n\tsinfo.adb, sinfo.ads, sprint.adb, styleg.adb, tbuild.adb,\n\ttreepr.adb (Nkind_In, Nam_In, Ekind_In): Removed, replaced by\n\tmembership tests.", "tree": {"sha": "4251c81960f577683ea9280d94b6d0ffb13948b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4251c81960f577683ea9280d94b6d0ffb13948b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a08c95cf0604a96e6fc48102365ef0d498f11ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a08c95cf0604a96e6fc48102365ef0d498f11ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a08c95cf0604a96e6fc48102365ef0d498f11ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a08c95cf0604a96e6fc48102365ef0d498f11ae/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26ac7446f607b1b031bbd38fab28265fd772f8a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ac7446f607b1b031bbd38fab28265fd772f8a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ac7446f607b1b031bbd38fab28265fd772f8a5"}], "stats": {"total": 7663, "additions": 2950, "deletions": 4713}, "files": [{"sha": "c222c33efe07ebdd2b6efc44080bda01a5b0fd5b", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -142,12 +142,9 @@ package body Aspects is\n       --  The routine should be invoked on a body [stub] with aspects\n \n       pragma Assert (Has_Aspects (N));\n-      pragma Assert (Nkind (N) in N_Body_Stub\n-                       or else Nkind_In (N, N_Entry_Body,\n-                                            N_Package_Body,\n-                                            N_Protected_Body,\n-                                            N_Subprogram_Body,\n-                                            N_Task_Body));\n+      pragma Assert\n+        (Nkind (N) in N_Body_Stub      | N_Entry_Body      | N_Package_Body |\n+                      N_Protected_Body | N_Subprogram_Body | N_Task_Body);\n \n       --  Look through all aspects and see whether they can be applied to a\n       --  body [stub].\n@@ -401,9 +398,8 @@ package body Aspects is\n             --  Note: It is better to use Is_Single_Concurrent_Type_Declaration\n             --  here, but Aspects and Sem_Util have incompatible licenses.\n \n-            elsif Nkind_In\n-                    (Original_Node (From), N_Single_Protected_Declaration,\n-                                           N_Single_Task_Declaration)\n+            elsif Nkind (Original_Node (From)) in\n+                    N_Single_Protected_Declaration | N_Single_Task_Declaration\n             then\n                Asp_Id := Get_Aspect_Id (Asp);\n "}, {"sha": "7e05a484bc6ed2356f7493a9f79b5485ab795a7e", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 0, "deletions": 495, "changes": 495, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -994,336 +994,6 @@ package body Atree is\n       return N_To_E (Nodes.Table (E + 1).Nkind);\n    end Ekind;\n \n-   --------------\n-   -- Ekind_In --\n-   --------------\n-\n-   function Ekind_In\n-     (T  : Entity_Kind;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2;\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (T  : Entity_Kind;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3;\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (T  : Entity_Kind;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4;\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (T  : Entity_Kind;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5;\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (T  : Entity_Kind;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind;\n-      V6 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5 or else\n-             T = V6;\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (T  : Entity_Kind;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind;\n-      V6 : Entity_Kind;\n-      V7 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5 or else\n-             T = V6 or else\n-             T = V7;\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (T  : Entity_Kind;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind;\n-      V6 : Entity_Kind;\n-      V7 : Entity_Kind;\n-      V8 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5 or else\n-             T = V6 or else\n-             T = V7 or else\n-             T = V8;\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (T  : Entity_Kind;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind;\n-      V6 : Entity_Kind;\n-      V7 : Entity_Kind;\n-      V8 : Entity_Kind;\n-      V9 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5 or else\n-             T = V6 or else\n-             T = V7 or else\n-             T = V8 or else\n-             T = V9;\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (T   : Entity_Kind;\n-      V1  : Entity_Kind;\n-      V2  : Entity_Kind;\n-      V3  : Entity_Kind;\n-      V4  : Entity_Kind;\n-      V5  : Entity_Kind;\n-      V6  : Entity_Kind;\n-      V7  : Entity_Kind;\n-      V8  : Entity_Kind;\n-      V9  : Entity_Kind;\n-      V10 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5 or else\n-             T = V6 or else\n-             T = V7 or else\n-             T = V8 or else\n-             T = V9 or else\n-             T = V10;\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (T   : Entity_Kind;\n-      V1  : Entity_Kind;\n-      V2  : Entity_Kind;\n-      V3  : Entity_Kind;\n-      V4  : Entity_Kind;\n-      V5  : Entity_Kind;\n-      V6  : Entity_Kind;\n-      V7  : Entity_Kind;\n-      V8  : Entity_Kind;\n-      V9  : Entity_Kind;\n-      V10 : Entity_Kind;\n-      V11 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1  or else\n-             T = V2  or else\n-             T = V3  or else\n-             T = V4  or else\n-             T = V5  or else\n-             T = V6  or else\n-             T = V7  or else\n-             T = V8  or else\n-             T = V9  or else\n-             T = V10 or else\n-             T = V11;\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (E  : Entity_Id;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return Ekind_In (Ekind (E), V1, V2);\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (E  : Entity_Id;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return Ekind_In (Ekind (E), V1, V2, V3);\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (E  : Entity_Id;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return Ekind_In (Ekind (E), V1, V2, V3, V4);\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (E  : Entity_Id;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return Ekind_In (Ekind (E), V1, V2, V3, V4, V5);\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (E  : Entity_Id;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind;\n-      V6 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return Ekind_In (Ekind (E), V1, V2, V3, V4, V5, V6);\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (E  : Entity_Id;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind;\n-      V6 : Entity_Kind;\n-      V7 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return Ekind_In (Ekind (E), V1, V2, V3, V4, V5, V6, V7);\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (E  : Entity_Id;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind;\n-      V6 : Entity_Kind;\n-      V7 : Entity_Kind;\n-      V8 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return Ekind_In (Ekind (E), V1, V2, V3, V4, V5, V6, V7, V8);\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (E  : Entity_Id;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind;\n-      V6 : Entity_Kind;\n-      V7 : Entity_Kind;\n-      V8 : Entity_Kind;\n-      V9 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return Ekind_In (Ekind (E), V1, V2, V3, V4, V5, V6, V7, V8, V9);\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (E   : Entity_Id;\n-      V1  : Entity_Kind;\n-      V2  : Entity_Kind;\n-      V3  : Entity_Kind;\n-      V4  : Entity_Kind;\n-      V5  : Entity_Kind;\n-      V6  : Entity_Kind;\n-      V7  : Entity_Kind;\n-      V8  : Entity_Kind;\n-      V9  : Entity_Kind;\n-      V10 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return Ekind_In (Ekind (E), V1, V2, V3, V4, V5, V6, V7, V8, V9, V10);\n-   end Ekind_In;\n-\n-   function Ekind_In\n-     (E   : Entity_Id;\n-      V1  : Entity_Kind;\n-      V2  : Entity_Kind;\n-      V3  : Entity_Kind;\n-      V4  : Entity_Kind;\n-      V5  : Entity_Kind;\n-      V6  : Entity_Kind;\n-      V7  : Entity_Kind;\n-      V8  : Entity_Kind;\n-      V9  : Entity_Kind;\n-      V10 : Entity_Kind;\n-      V11 : Entity_Kind) return Boolean\n-   is\n-   begin\n-      return\n-        Ekind_In (Ekind (E), V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11);\n-   end Ekind_In;\n-\n    ------------------\n    -- Error_Posted --\n    ------------------\n@@ -1783,171 +1453,6 @@ package body Atree is\n       return Nodes.Table (N).Nkind;\n    end Nkind;\n \n-   --------------\n-   -- Nkind_In --\n-   --------------\n-\n-   function Nkind_In\n-     (N  : Node_Id;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return Nkind_In (Nkind (N), V1, V2);\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (N  : Node_Id;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return Nkind_In (Nkind (N), V1, V2, V3);\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (N  : Node_Id;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return Nkind_In (Nkind (N), V1, V2, V3, V4);\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (N  : Node_Id;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return Nkind_In (Nkind (N), V1, V2, V3, V4, V5);\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (N  : Node_Id;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind;\n-      V6 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return Nkind_In (Nkind (N), V1, V2, V3, V4, V5, V6);\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (N  : Node_Id;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind;\n-      V6 : Node_Kind;\n-      V7 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return Nkind_In (Nkind (N), V1, V2, V3, V4, V5, V6, V7);\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (N  : Node_Id;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind;\n-      V6 : Node_Kind;\n-      V7 : Node_Kind;\n-      V8 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return Nkind_In (Nkind (N), V1, V2, V3, V4, V5, V6, V7, V8);\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (N  : Node_Id;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind;\n-      V6 : Node_Kind;\n-      V7 : Node_Kind;\n-      V8 : Node_Kind;\n-      V9 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return Nkind_In (Nkind (N), V1, V2, V3, V4, V5, V6, V7, V8, V9);\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (N   : Node_Id;\n-      V1  : Node_Kind;\n-      V2  : Node_Kind;\n-      V3  : Node_Kind;\n-      V4  : Node_Kind;\n-      V5  : Node_Kind;\n-      V6  : Node_Kind;\n-      V7  : Node_Kind;\n-      V8  : Node_Kind;\n-      V9  : Node_Kind;\n-      V10 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return Nkind_In (Nkind (N), V1, V2, V3, V4, V5, V6, V7, V8, V9, V10);\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (N   : Node_Id;\n-      V1  : Node_Kind;\n-      V2  : Node_Kind;\n-      V3  : Node_Kind;\n-      V4  : Node_Kind;\n-      V5  : Node_Kind;\n-      V6  : Node_Kind;\n-      V7  : Node_Kind;\n-      V8  : Node_Kind;\n-      V9  : Node_Kind;\n-      V10 : Node_Kind;\n-      V11 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return Nkind_In (Nkind (N), V1, V2, V3, V4, V5, V6, V7, V8, V9, V10,\n-                                  V11);\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (N   : Node_Id;\n-      V1  : Node_Kind;\n-      V2  : Node_Kind;\n-      V3  : Node_Kind;\n-      V4  : Node_Kind;\n-      V5  : Node_Kind;\n-      V6  : Node_Kind;\n-      V7  : Node_Kind;\n-      V8  : Node_Kind;\n-      V9  : Node_Kind;\n-      V10 : Node_Kind;\n-      V11 : Node_Kind;\n-      V12 : Node_Kind;\n-      V13 : Node_Kind;\n-      V14 : Node_Kind;\n-      V15 : Node_Kind;\n-      V16 : Node_Kind;\n-      V17 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return Nkind_In (Nkind (N), V1, V2, V3, V4, V5, V6, V7, V8, V9, V10,\n-                                  V11, V12, V13, V14, V15, V16, V17);\n-   end Nkind_In;\n-\n    --------\n    -- No --\n    --------"}, {"sha": "e958a9b7af58cb1d51a3c7a61d53e9334ec915a2", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 0, "deletions": 329, "changes": 329, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -670,335 +670,6 @@ package Atree is\n    function Sloc                         (N : Node_Id) return Source_Ptr;\n    pragma Inline (Sloc);\n \n-   ---------------------\n-   -- Node_Kind Tests --\n-   ---------------------\n-\n-   --  These are like the functions in Sinfo, but the first argument is a\n-   --  Node_Id, and the tested field is Nkind (N).\n-\n-   function Nkind_In\n-     (N  : Node_Id;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (N  : Node_Id;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (N  : Node_Id;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (N  : Node_Id;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (N  : Node_Id;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind;\n-      V6 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (N  : Node_Id;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind;\n-      V6 : Node_Kind;\n-      V7 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (N  : Node_Id;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind;\n-      V6 : Node_Kind;\n-      V7 : Node_Kind;\n-      V8 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (N  : Node_Id;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind;\n-      V6 : Node_Kind;\n-      V7 : Node_Kind;\n-      V8 : Node_Kind;\n-      V9 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (N   : Node_Id;\n-      V1  : Node_Kind;\n-      V2  : Node_Kind;\n-      V3  : Node_Kind;\n-      V4  : Node_Kind;\n-      V5  : Node_Kind;\n-      V6  : Node_Kind;\n-      V7  : Node_Kind;\n-      V8  : Node_Kind;\n-      V9  : Node_Kind;\n-      V10 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (N   : Node_Id;\n-      V1  : Node_Kind;\n-      V2  : Node_Kind;\n-      V3  : Node_Kind;\n-      V4  : Node_Kind;\n-      V5  : Node_Kind;\n-      V6  : Node_Kind;\n-      V7  : Node_Kind;\n-      V8  : Node_Kind;\n-      V9  : Node_Kind;\n-      V10 : Node_Kind;\n-      V11 : Node_Kind) return Boolean;\n-\n-   --  12..16-parameter versions are not yet needed\n-\n-   function Nkind_In\n-     (N   : Node_Id;\n-      V1  : Node_Kind;\n-      V2  : Node_Kind;\n-      V3  : Node_Kind;\n-      V4  : Node_Kind;\n-      V5  : Node_Kind;\n-      V6  : Node_Kind;\n-      V7  : Node_Kind;\n-      V8  : Node_Kind;\n-      V9  : Node_Kind;\n-      V10 : Node_Kind;\n-      V11 : Node_Kind;\n-      V12 : Node_Kind;\n-      V13 : Node_Kind;\n-      V14 : Node_Kind;\n-      V15 : Node_Kind;\n-      V16 : Node_Kind;\n-      V17 : Node_Kind) return Boolean;\n-\n-   pragma Inline (Nkind_In);\n-   --  Inline all above functions\n-\n-   -----------------------\n-   -- Entity_Kind_Tests --\n-   -----------------------\n-\n-   --  Utility functions to test whether an Entity_Kind value, either given\n-   --  directly as the first argument, or the Ekind field of an Entity given\n-   --  as the first argument, matches any of the given list of Entity_Kind\n-   --  values. Return True if any match, False if no match.\n-\n-   function Ekind_In\n-     (E  : Entity_Id;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (E  : Entity_Id;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (E  : Entity_Id;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (E  : Entity_Id;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (E  : Entity_Id;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind;\n-      V6 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (E  : Entity_Id;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind;\n-      V6 : Entity_Kind;\n-      V7 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (E  : Entity_Id;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind;\n-      V6 : Entity_Kind;\n-      V7 : Entity_Kind;\n-      V8 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (E  : Entity_Id;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind;\n-      V6 : Entity_Kind;\n-      V7 : Entity_Kind;\n-      V8 : Entity_Kind;\n-      V9 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (E   : Entity_Id;\n-      V1  : Entity_Kind;\n-      V2  : Entity_Kind;\n-      V3  : Entity_Kind;\n-      V4  : Entity_Kind;\n-      V5  : Entity_Kind;\n-      V6  : Entity_Kind;\n-      V7  : Entity_Kind;\n-      V8  : Entity_Kind;\n-      V9  : Entity_Kind;\n-      V10 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (E   : Entity_Id;\n-      V1  : Entity_Kind;\n-      V2  : Entity_Kind;\n-      V3  : Entity_Kind;\n-      V4  : Entity_Kind;\n-      V5  : Entity_Kind;\n-      V6  : Entity_Kind;\n-      V7  : Entity_Kind;\n-      V8  : Entity_Kind;\n-      V9  : Entity_Kind;\n-      V10 : Entity_Kind;\n-      V11 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (T  : Entity_Kind;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (T  : Entity_Kind;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (T  : Entity_Kind;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (T  : Entity_Kind;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (T  : Entity_Kind;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind;\n-      V6 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (T  : Entity_Kind;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind;\n-      V6 : Entity_Kind;\n-      V7 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (T  : Entity_Kind;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind;\n-      V6 : Entity_Kind;\n-      V7 : Entity_Kind;\n-      V8 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (T  : Entity_Kind;\n-      V1 : Entity_Kind;\n-      V2 : Entity_Kind;\n-      V3 : Entity_Kind;\n-      V4 : Entity_Kind;\n-      V5 : Entity_Kind;\n-      V6 : Entity_Kind;\n-      V7 : Entity_Kind;\n-      V8 : Entity_Kind;\n-      V9 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (T   : Entity_Kind;\n-      V1  : Entity_Kind;\n-      V2  : Entity_Kind;\n-      V3  : Entity_Kind;\n-      V4  : Entity_Kind;\n-      V5  : Entity_Kind;\n-      V6  : Entity_Kind;\n-      V7  : Entity_Kind;\n-      V8  : Entity_Kind;\n-      V9  : Entity_Kind;\n-      V10 : Entity_Kind) return Boolean;\n-\n-   function Ekind_In\n-     (T   : Entity_Kind;\n-      V1  : Entity_Kind;\n-      V2  : Entity_Kind;\n-      V3  : Entity_Kind;\n-      V4  : Entity_Kind;\n-      V5  : Entity_Kind;\n-      V6  : Entity_Kind;\n-      V7  : Entity_Kind;\n-      V8  : Entity_Kind;\n-      V9  : Entity_Kind;\n-      V10 : Entity_Kind;\n-      V11 : Entity_Kind) return Boolean;\n-\n-   pragma Inline (Ekind_In);\n-   --  Inline all above functions\n-\n    -----------------------------\n    -- Entity Access Functions --\n    -----------------------------"}, {"sha": "9de21d6a49c0fcab501261f842dc2e22257f2da9", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -433,7 +433,7 @@ package body Checks is\n          --  Nothing to do for Rem/Mod/Plus (overflow not possible, the check\n          --  for zero-divide is a divide check, not an overflow check).\n \n-         if Nkind_In (N, N_Op_Rem, N_Op_Mod, N_Op_Plus) then\n+         if Nkind (N) in N_Op_Rem | N_Op_Mod | N_Op_Plus then\n             return;\n          end if;\n       end if;\n@@ -585,7 +585,7 @@ package body Checks is\n       if Ada_Version >= Ada_2012\n          and then not Present (Param_Ent)\n          and then Is_Entity_Name (N)\n-         and then Ekind_In (Entity (N), E_Constant, E_Variable)\n+         and then Ekind (Entity (N)) in E_Constant | E_Variable\n          and then Present (Effective_Extra_Accessibility (Entity (N)))\n       then\n          Param_Ent := Entity (N);\n@@ -621,9 +621,8 @@ package body Checks is\n          --  deepest type level so as to appropriatly handle the rules for\n          --  RM 3.10.2 (10.1/3).\n \n-         if Ekind_In (Scope (Param_Ent), E_Function,\n-                                         E_Operator,\n-                                         E_Subprogram_Type)\n+         if Ekind (Scope (Param_Ent))\n+              in E_Function | E_Operator | E_Subprogram_Type\n            and then Present (Extra_Accessibility_Of_Result (Scope (Param_Ent)))\n          then\n             Type_Level :=\n@@ -1204,7 +1203,7 @@ package body Checks is\n          --  there is no overflow check that starts from that parent node,\n          --  so apply check now.\n \n-         if Nkind_In (P, N_If_Expression, N_Case_Expression)\n+         if Nkind (P) in N_If_Expression | N_Case_Expression\n            and then not Is_Signed_Integer_Arithmetic_Op (Parent (P))\n          then\n             null;\n@@ -2713,11 +2712,11 @@ package body Checks is\n          --    mode IN OUT - Pre, Post => Formal'Valid[_Scalars]\n          --    mode    OUT -      Post => Formal'Valid[_Scalars]\n \n-         if Ekind_In (Formal, E_In_Parameter, E_In_Out_Parameter) then\n+         if Ekind (Formal) in E_In_Parameter | E_In_Out_Parameter then\n             Add_Validity_Check (Formal, Name_Precondition, False);\n          end if;\n \n-         if Ekind_In (Formal, E_In_Out_Parameter, E_Out_Parameter) then\n+         if Ekind (Formal) in E_In_Out_Parameter | E_Out_Parameter then\n             Add_Validity_Check (Formal, Name_Postcondition, False);\n          end if;\n \n@@ -2850,7 +2849,7 @@ package body Checks is\n              (Typ, New_Occurrence_Of (Entity (N), Sloc (N))));\n          return;\n \n-      elsif Nkind_In (N, N_Aggregate, N_Extension_Aggregate) then\n+      elsif Nkind (N) in N_Aggregate | N_Extension_Aggregate then\n \n          --  If the expression is an aggregate in an assignment, apply the\n          --  check to the LHS after the assignment, rather than create a\n@@ -4037,9 +4036,9 @@ package body Checks is\n       function Left_Expression (Op : Node_Id) return Node_Id is\n          LE : Node_Id := Left_Opnd (Op);\n       begin\n-         while Nkind_In (LE, N_Qualified_Expression,\n-                             N_Type_Conversion,\n-                             N_Expression_With_Actions)\n+         while Nkind (LE) in N_Qualified_Expression\n+                           | N_Type_Conversion\n+                           | N_Expression_With_Actions\n          loop\n             LE := Expression (LE);\n          end loop;\n@@ -4249,11 +4248,11 @@ package body Checks is\n \n    begin\n       pragma Assert\n-        (Nkind_In (Kind, N_Component_Declaration,\n-                         N_Discriminant_Specification,\n-                         N_Function_Specification,\n-                         N_Object_Declaration,\n-                         N_Parameter_Specification));\n+        (Kind in N_Component_Declaration\n+               | N_Discriminant_Specification\n+               | N_Function_Specification\n+               | N_Object_Declaration\n+               | N_Parameter_Specification);\n \n       if Kind = N_Function_Specification then\n          Typ := Etype (Defining_Entity (N));\n@@ -6078,7 +6077,7 @@ package body Checks is\n             --  Likewise for Abs/Minus, the only case where the operation can\n             --  overflow is when the operand is the largest negative number.\n \n-            elsif Nkind_In (N, N_Op_Abs, N_Op_Minus) then\n+            elsif Nkind (N) in N_Op_Abs | N_Op_Minus then\n                Determine_Range\n                  (Right_Opnd (N), OK, Lo, Hi, Assume_Valid => True);\n \n@@ -6220,7 +6219,7 @@ package body Checks is\n       --  Do not set range check flag if parent is assignment statement or\n       --  object declaration with Suppress_Assignment_Checks flag set\n \n-      if Nkind_In (Parent (N), N_Assignment_Statement, N_Object_Declaration)\n+      if Nkind (Parent (N)) in N_Assignment_Statement | N_Object_Declaration\n         and then Suppress_Assignment_Checks (Parent (N))\n       then\n          return;\n@@ -6581,9 +6580,9 @@ package body Checks is\n                --  If this is an indirect or dispatching call, get signature\n                --  from the subprogram type.\n \n-               if Nkind_In (P, N_Entry_Call_Statement,\n-                               N_Function_Call,\n-                               N_Procedure_Call_Statement)\n+               if Nkind (P) in N_Entry_Call_Statement\n+                             | N_Function_Call\n+                             | N_Procedure_Call_Statement\n                then\n                   E := Get_Called_Entity (P);\n                   L := Parameter_Associations (P);\n@@ -6714,13 +6713,13 @@ package body Checks is\n       --  Integer and character literals always have valid values, where\n       --  appropriate these will be range checked in any case.\n \n-      elsif Nkind_In (Expr, N_Integer_Literal, N_Character_Literal) then\n+      elsif Nkind (Expr) in N_Integer_Literal | N_Character_Literal then\n          return True;\n \n       --  If we have a type conversion or a qualification of a known valid\n       --  value, then the result will always be valid.\n \n-      elsif Nkind_In (Expr, N_Type_Conversion, N_Qualified_Expression) then\n+      elsif Nkind (Expr) in N_Type_Conversion | N_Qualified_Expression then\n          return Expr_Known_Valid (Expression (Expr));\n \n       --  Case of expression is a non-floating-point operator. In this case we\n@@ -7059,9 +7058,7 @@ package body Checks is\n       begin\n          P := Prefix (N);\n          while not Is_Entity_Name (P) loop\n-            if not Nkind_In (P, N_Selected_Component,\n-                                N_Indexed_Component)\n-            then\n+            if Nkind (P) not in N_Selected_Component | N_Indexed_Component then\n                return Empty;\n             end if;\n \n@@ -7174,7 +7171,7 @@ package body Checks is\n                   if Nkind (A_Idx) = N_Range then\n                      A_Range := A_Idx;\n \n-                  elsif Nkind_In (A_Idx, N_Identifier, N_Expanded_Name) then\n+                  elsif Nkind (A_Idx) in N_Identifier | N_Expanded_Name then\n                      A_Range := Scalar_Range (Entity (A_Idx));\n \n                      if Nkind (A_Range) = N_Subtype_Indication then\n@@ -7362,7 +7359,8 @@ package body Checks is\n         --  the target.\n \n         and then not\n-          (Nkind_In (N, N_Integer_Literal, N_Real_Literal, N_Character_Literal)\n+          (Nkind (N) in\n+               N_Integer_Literal | N_Real_Literal | N_Character_Literal\n              or else\n                (Is_Entity_Name (N)\n                  and then Ekind (Entity (N)) = E_Enumeration_Literal))\n@@ -8533,9 +8531,8 @@ package body Checks is\n       --  need to be called while elaboration is taking place.\n \n       elsif Is_Controlled (Tag_Typ)\n-        and then Nam_In (Chars (Subp_Id), Name_Adjust,\n-                                          Name_Finalize,\n-                                          Name_Initialize)\n+        and then\n+          Chars (Subp_Id) in Name_Adjust | Name_Finalize | Name_Initialize\n       then\n          return;\n       end if;"}, {"sha": "9d3e9e99b489a7c0ec2df3b452a17dc4d14733e6", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 69, "deletions": 72, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -154,7 +154,7 @@ package body Contracts is\n       --    Refined_Post\n \n       elsif Is_Entry_Body (Id) then\n-         if Nam_In (Prag_Nam, Name_Refined_Depends, Name_Refined_Global) then\n+         if Prag_Nam in Name_Refined_Depends | Name_Refined_Global then\n             Add_Classification;\n \n          elsif Prag_Nam = Name_Refined_Post then\n@@ -179,31 +179,31 @@ package body Contracts is\n       --    Volatile_Function\n \n       elsif Is_Entry_Declaration (Id)\n-        or else Ekind_In (Id, E_Function,\n-                              E_Generic_Function,\n-                              E_Generic_Procedure,\n-                              E_Procedure)\n+        or else Ekind (Id) in E_Function\n+                            | E_Generic_Function\n+                            | E_Generic_Procedure\n+                            | E_Procedure\n       then\n-         if Nam_In (Prag_Nam, Name_Attach_Handler, Name_Interrupt_Handler)\n-           and then Ekind_In (Id, E_Generic_Procedure, E_Procedure)\n+         if Prag_Nam in Name_Attach_Handler | Name_Interrupt_Handler\n+           and then Ekind (Id) in E_Generic_Procedure | E_Procedure\n          then\n             Add_Classification;\n \n-         elsif Nam_In (Prag_Nam, Name_Depends,\n-                                 Name_Extensions_Visible,\n-                                 Name_Global)\n+         elsif Prag_Nam in Name_Depends\n+                         | Name_Extensions_Visible\n+                         | Name_Global\n          then\n             Add_Classification;\n \n          elsif Prag_Nam = Name_Volatile_Function\n-           and then Ekind_In (Id, E_Function, E_Generic_Function)\n+           and then Ekind (Id) in E_Function | E_Generic_Function\n          then\n             Add_Classification;\n \n-         elsif Nam_In (Prag_Nam, Name_Contract_Cases, Name_Test_Case) then\n+         elsif Prag_Nam in Name_Contract_Cases | Name_Test_Case then\n             Add_Contract_Test_Case;\n \n-         elsif Nam_In (Prag_Nam, Name_Postcondition, Name_Precondition) then\n+         elsif Prag_Nam in Name_Postcondition | Name_Precondition then\n             Add_Pre_Post_Condition;\n \n          --  The pragma is not a proper contract item\n@@ -219,9 +219,9 @@ package body Contracts is\n       --    Part_Of (instantiation only)\n \n       elsif Is_Package_Or_Generic_Package (Id) then\n-         if Nam_In (Prag_Nam, Name_Abstract_State,\n-                              Name_Initial_Condition,\n-                              Name_Initializes)\n+         if Prag_Nam in Name_Abstract_State\n+                      | Name_Initial_Condition\n+                      | Name_Initializes\n          then\n             Add_Classification;\n \n@@ -256,14 +256,14 @@ package body Contracts is\n       elsif Is_Type (Id) then\n          declare\n             Is_OK : constant Boolean :=\n-              Nam_In (Prag_Nam, Name_Async_Readers,\n-                                Name_Async_Writers,\n-                                Name_Effective_Reads,\n-                                Name_Effective_Writes)\n+              Prag_Nam in Name_Async_Readers\n+                        | Name_Async_Writers\n+                        | Name_Effective_Reads\n+                        | Name_Effective_Writes\n               or else (Ekind (Id) = E_Task_Type\n-                         and Nam_In (Prag_Nam, Name_Part_Of,\n-                                               Name_Depends,\n-                                               Name_Global))\n+                         and Prag_Nam in Name_Part_Of\n+                                       | Name_Depends\n+                                       | Name_Global)\n               or else (Ekind (Id) = E_Protected_Type\n                          and Prag_Nam = Name_Part_Of);\n          begin\n@@ -285,12 +285,12 @@ package body Contracts is\n       --    Refined_Post\n \n       elsif Ekind (Id) = E_Subprogram_Body then\n-         if Nam_In (Prag_Nam, Name_Refined_Depends, Name_Refined_Global) then\n+         if Prag_Nam in Name_Refined_Depends | Name_Refined_Global then\n             Add_Classification;\n \n-         elsif Nam_In (Prag_Nam, Name_Postcondition,\n-                                 Name_Precondition,\n-                                 Name_Refined_Post)\n+         elsif Prag_Nam in Name_Postcondition\n+                         | Name_Precondition\n+                         | Name_Refined_Post\n          then\n             Add_Pre_Post_Condition;\n \n@@ -305,7 +305,7 @@ package body Contracts is\n       --    Refined_Global\n \n       elsif Ekind (Id) = E_Task_Body then\n-         if Nam_In (Prag_Nam, Name_Refined_Depends, Name_Refined_Global) then\n+         if Prag_Nam in Name_Refined_Depends | Name_Refined_Global then\n             Add_Classification;\n \n          --  The pragma is not a proper contract item\n@@ -331,15 +331,15 @@ package body Contracts is\n       --    Part_Of\n \n       elsif Ekind (Id) = E_Variable then\n-         if Nam_In (Prag_Nam, Name_Async_Readers,\n-                              Name_Async_Writers,\n-                              Name_Constant_After_Elaboration,\n-                              Name_Depends,\n-                              Name_Effective_Reads,\n-                              Name_Effective_Writes,\n-                              Name_Global,\n-                              Name_No_Caching,\n-                              Name_Part_Of)\n+         if Prag_Nam in Name_Async_Readers\n+                      | Name_Async_Writers\n+                      | Name_Constant_After_Elaboration\n+                      | Name_Depends\n+                      | Name_Effective_Reads\n+                      | Name_Effective_Writes\n+                      | Name_Global\n+                      | Name_No_Caching\n+                      | Name_Part_Of\n          then\n             Add_Classification;\n \n@@ -367,10 +367,10 @@ package body Contracts is\n \n          --  Entry or subprogram declarations\n \n-         if Nkind_In (Decl, N_Abstract_Subprogram_Declaration,\n-                            N_Entry_Declaration,\n-                            N_Generic_Subprogram_Declaration,\n-                            N_Subprogram_Declaration)\n+         if Nkind (Decl) in N_Abstract_Subprogram_Declaration\n+                          | N_Entry_Declaration\n+                          | N_Generic_Subprogram_Declaration\n+                          | N_Subprogram_Declaration\n          then\n             declare\n                Subp_Id : constant Entity_Id := Defining_Entity (Decl);\n@@ -392,7 +392,7 @@ package body Contracts is\n \n          --  Entry or subprogram bodies\n \n-         elsif Nkind_In (Decl, N_Entry_Body, N_Subprogram_Body) then\n+         elsif Nkind (Decl) in N_Entry_Body | N_Subprogram_Body then\n             Analyze_Entry_Or_Subprogram_Body_Contract (Defining_Entity (Decl));\n \n          --  Objects\n@@ -407,8 +407,8 @@ package body Contracts is\n \n          --  Protected units\n \n-         elsif Nkind_In (Decl, N_Protected_Type_Declaration,\n-                               N_Single_Protected_Declaration)\n+         elsif Nkind (Decl) in N_Protected_Type_Declaration\n+                             | N_Single_Protected_Declaration\n          then\n             Analyze_Protected_Contract (Defining_Entity (Decl));\n \n@@ -419,8 +419,8 @@ package body Contracts is\n \n          --  Task units\n \n-         elsif Nkind_In (Decl, N_Single_Task_Declaration,\n-                               N_Task_Type_Declaration)\n+         elsif Nkind (Decl) in N_Single_Task_Declaration\n+                             | N_Task_Type_Declaration\n          then\n             Analyze_Task_Contract (Defining_Entity (Decl));\n \n@@ -459,11 +459,11 @@ package body Contracts is\n             end;\n          end if;\n \n-         if Nkind_In (Decl, N_Full_Type_Declaration,\n-                            N_Private_Type_Declaration,\n-                            N_Task_Type_Declaration,\n-                            N_Protected_Type_Declaration,\n-                            N_Formal_Type_Declaration)\n+         if Nkind (Decl) in N_Full_Type_Declaration\n+                          | N_Private_Type_Declaration\n+                          | N_Task_Type_Declaration\n+                          | N_Protected_Type_Declaration\n+                          | N_Formal_Type_Declaration\n          then\n             Analyze_Type_Contract (Defining_Identifier (Decl));\n          end if;\n@@ -528,7 +528,7 @@ package body Contracts is\n       --  subprograms.\n \n       if SPARK_Mode = On\n-        and then Ekind_In (Body_Id, E_Function, E_Generic_Function)\n+        and then Ekind (Body_Id) in E_Function | E_Generic_Function\n         and then Comes_From_Source (Spec_Id)\n         and then not Is_Volatile_Function (Body_Id)\n       then\n@@ -737,7 +737,7 @@ package body Contracts is\n       --  processed after the analysis of the related subprogram declaration.\n \n       if SPARK_Mode = On\n-        and then Ekind_In (Subp_Id, E_Function, E_Generic_Function)\n+        and then Ekind (Subp_Id) in E_Function | E_Generic_Function\n         and then Comes_From_Source (Subp_Id)\n         and then not Is_Volatile_Function (Subp_Id)\n       then\n@@ -2882,12 +2882,9 @@ package body Contracts is\n \n       function Causes_Contract_Freezing (N : Node_Id) return Boolean is\n       begin\n-         return Nkind_In (N, N_Entry_Body,\n-                             N_Package_Body,\n-                             N_Protected_Body,\n-                             N_Subprogram_Body,\n-                             N_Subprogram_Body_Stub,\n-                             N_Task_Body);\n+         return Nkind (N) in\n+           N_Entry_Body      | N_Package_Body         | N_Protected_Body |\n+           N_Subprogram_Body | N_Subprogram_Body_Stub | N_Task_Body;\n       end Causes_Contract_Freezing;\n \n       ----------------------\n@@ -2922,10 +2919,10 @@ package body Contracts is\n \n             --  Entry or subprogram declarations\n \n-            elsif Nkind_In (Decl, N_Abstract_Subprogram_Declaration,\n-                                  N_Entry_Declaration,\n-                                  N_Generic_Subprogram_Declaration,\n-                                  N_Subprogram_Declaration)\n+            elsif Nkind (Decl) in N_Abstract_Subprogram_Declaration\n+                                | N_Entry_Declaration\n+                                | N_Generic_Subprogram_Declaration\n+                                | N_Subprogram_Declaration\n             then\n                Analyze_Entry_Or_Subprogram_Contract\n                  (Subp_Id   => Defining_Entity (Decl),\n@@ -2940,8 +2937,8 @@ package body Contracts is\n \n             --  Protected units\n \n-            elsif Nkind_In (Decl, N_Protected_Type_Declaration,\n-                                  N_Single_Protected_Declaration)\n+            elsif Nkind (Decl) in N_Protected_Type_Declaration\n+                                | N_Single_Protected_Declaration\n             then\n                Analyze_Protected_Contract (Defining_Entity (Decl));\n \n@@ -2952,17 +2949,17 @@ package body Contracts is\n \n             --  Task units\n \n-            elsif Nkind_In (Decl, N_Single_Task_Declaration,\n-                                  N_Task_Type_Declaration)\n+            elsif Nkind (Decl) in N_Single_Task_Declaration\n+                                | N_Task_Type_Declaration\n             then\n                Analyze_Task_Contract (Defining_Entity (Decl));\n             end if;\n \n-            if Nkind_In (Decl, N_Full_Type_Declaration,\n-                               N_Private_Type_Declaration,\n-                               N_Task_Type_Declaration,\n-                               N_Protected_Type_Declaration,\n-                               N_Formal_Type_Declaration)\n+            if Nkind (Decl) in N_Full_Type_Declaration\n+                             | N_Private_Type_Declaration\n+                             | N_Task_Type_Declaration\n+                             | N_Protected_Type_Declaration\n+                             | N_Formal_Type_Declaration\n             then\n                Analyze_Type_Contract (Defining_Identifier (Decl));\n             end if;"}, {"sha": "bf839a5aac6c58cb69fa4ddcf061c199b3e4ad99", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 376, "deletions": 387, "changes": 763, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -726,17 +726,17 @@ package body Einfo is\n \n    function Access_Disp_Table (Id : E) return L is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Record_Subtype,\n-                                   E_Record_Type,\n-                                   E_Record_Type_With_Private));\n+      pragma Assert (Ekind (Id) in E_Record_Subtype\n+                                 | E_Record_Type\n+                                 | E_Record_Type_With_Private);\n       return Elist16 (Implementation_Base_Type (Id));\n    end Access_Disp_Table;\n \n    function Access_Disp_Table_Elab_Flag (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Record_Subtype,\n-                                   E_Record_Type,\n-                                   E_Record_Type_With_Private));\n+      pragma Assert (Ekind (Id) in E_Record_Subtype\n+                                 | E_Record_Type\n+                                 | E_Record_Type_With_Private);\n       return Node30 (Implementation_Base_Type (Id));\n    end Access_Disp_Table_Elab_Flag;\n \n@@ -748,19 +748,19 @@ package body Einfo is\n \n    function Activation_Record_Component (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant,\n-                                   E_In_Parameter,\n-                                   E_In_Out_Parameter,\n-                                   E_Loop_Parameter,\n-                                   E_Out_Parameter,\n-                                   E_Variable));\n+      pragma Assert (Ekind (Id) in E_Constant\n+                                 | E_In_Parameter\n+                                 | E_In_Out_Parameter\n+                                 | E_Loop_Parameter\n+                                 | E_Out_Parameter\n+                                 | E_Variable);\n       return Node31 (Id);\n    end Activation_Record_Component;\n \n    function Actual_Subtype (Id : E) return E is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Constant, E_Variable, E_Generic_In_Out_Parameter)\n+        (Ekind (Id) in E_Constant | E_Variable | E_Generic_In_Out_Parameter\n            or else Is_Formal (Id));\n       return Node17 (Id);\n    end Actual_Subtype;\n@@ -781,10 +781,10 @@ package body Einfo is\n    begin\n       pragma Assert (Is_Type (Id)\n                        or else Is_Formal (Id)\n-                       or else Ekind_In (Id, E_Loop_Parameter,\n-                                             E_Constant,\n-                                             E_Exception,\n-                                             E_Variable));\n+                       or else Ekind (Id) in E_Loop_Parameter\n+                                           | E_Constant\n+                                           | E_Exception\n+                                           | E_Variable);\n       return Uint14 (Id);\n    end Alignment;\n \n@@ -796,16 +796,16 @@ package body Einfo is\n \n    function Anonymous_Masters (Id : E) return L is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function,\n-                                   E_Package,\n-                                   E_Procedure,\n-                                   E_Subprogram_Body));\n+      pragma Assert (Ekind (Id) in E_Function\n+                                 | E_Package\n+                                 | E_Procedure\n+                                 | E_Subprogram_Body);\n       return Elist29 (Id);\n    end Anonymous_Masters;\n \n    function Anonymous_Object (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Protected_Type, E_Task_Type));\n+      pragma Assert (Ekind (Id) in E_Protected_Type | E_Task_Type);\n       return Node30 (Id);\n    end Anonymous_Object;\n \n@@ -872,7 +872,7 @@ package body Einfo is\n \n    function BIP_Initialization_Call (Id : E) return N is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Constant | E_Variable);\n       return Node29 (Id);\n    end BIP_Initialization_Call;\n \n@@ -906,19 +906,19 @@ package body Einfo is\n \n    function Cloned_Subtype (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Record_Subtype, E_Class_Wide_Subtype));\n+      pragma Assert (Ekind (Id) in E_Record_Subtype | E_Class_Wide_Subtype);\n       return Node16 (Id);\n    end Cloned_Subtype;\n \n    function Component_Bit_Offset (Id : E) return U is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n+      pragma Assert (Ekind (Id) in E_Component | E_Discriminant);\n       return Uint11 (Id);\n    end Component_Bit_Offset;\n \n    function Component_Clause (Id : E) return N is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n+      pragma Assert (Ekind (Id) in E_Component | E_Discriminant);\n       return Node13 (Id);\n    end Component_Clause;\n \n@@ -975,7 +975,7 @@ package body Einfo is\n \n    function Corresponding_Record_Component (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n+      pragma Assert (Ekind (Id) in E_Component | E_Discriminant);\n       return Node21 (Id);\n    end Corresponding_Record_Component;\n \n@@ -1147,8 +1147,7 @@ package body Einfo is\n \n    function Dispatch_Table_Wrappers (Id : E) return L is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Record_Type,\n-                                   E_Record_Subtype));\n+      pragma Assert (Ekind (Id) in E_Record_Type | E_Record_Subtype);\n       return Elist26 (Implementation_Base_Type (Id));\n    end Dispatch_Table_Wrappers;\n \n@@ -1166,14 +1165,14 @@ package body Einfo is\n \n    function DT_Position (Id : E) return U is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure)\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure\n                        and then Present (DTC_Entity (Id)));\n       return Uint15 (Id);\n    end DT_Position;\n \n    function DTC_Entity (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       return Node16 (Id);\n    end DTC_Entity;\n \n@@ -1188,7 +1187,7 @@ package body Einfo is\n       pragma Assert\n         (Is_Subprogram (Id)\n            or else\n-         Ekind_In (Id, E_Entry, E_Entry_Family, E_Package)\n+         Ekind (Id) in E_Entry | E_Entry_Family | E_Package\n            or else\n          Is_Generic_Unit (Id));\n       return Node13 (Id);\n@@ -1199,15 +1198,15 @@ package body Einfo is\n       pragma Assert\n         (Is_Subprogram (Id)\n            or else\n-         Ekind_In (Id, E_Entry, E_Entry_Family, E_Package)\n+         Ekind (Id) in E_Entry | E_Entry_Family | E_Package\n            or else\n          Is_Generic_Unit (Id));\n       return Flag174 (Id);\n    end Elaboration_Entity_Required;\n \n    function Encapsulating_State (Id : E) return N is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Abstract_State, E_Constant, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Abstract_State | E_Constant | E_Variable);\n       return Node32 (Id);\n    end Encapsulating_State;\n \n@@ -1257,40 +1256,40 @@ package body Einfo is\n    function Contains_Ignored_Ghost_Code (Id : E) return B is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Block,\n-                       E_Function,\n-                       E_Generic_Function,\n-                       E_Generic_Package,\n-                       E_Generic_Procedure,\n-                       E_Package,\n-                       E_Package_Body,\n-                       E_Procedure,\n-                       E_Subprogram_Body));\n+        (Ekind (Id) in E_Block\n+                     | E_Function\n+                     | E_Generic_Function\n+                     | E_Generic_Package\n+                     | E_Generic_Procedure\n+                     | E_Package\n+                     | E_Package_Body\n+                     | E_Procedure\n+                     | E_Subprogram_Body);\n       return Flag279 (Id);\n    end Contains_Ignored_Ghost_Code;\n \n    function Contract (Id : E) return N is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Protected_Type,      --  concurrent types\n-                       E_Task_Body,\n-                       E_Task_Type)\n+        (Ekind (Id) in E_Protected_Type       --  concurrent types\n+                     | E_Task_Body\n+                     | E_Task_Type\n            or else\n-         Ekind_In (Id, E_Constant,            --  objects\n-                       E_Variable)\n+         Ekind (Id) in E_Constant             --  objects\n+                     | E_Variable\n            or else\n-         Ekind_In (Id, E_Entry,               --  overloadable\n-                       E_Entry_Family,\n-                       E_Function,\n-                       E_Generic_Function,\n-                       E_Generic_Procedure,\n-                       E_Operator,\n-                       E_Procedure,\n-                       E_Subprogram_Body)\n+         Ekind (Id) in E_Entry                --  overloadable\n+                     | E_Entry_Family\n+                     | E_Function\n+                     | E_Generic_Function\n+                     | E_Generic_Procedure\n+                     | E_Operator\n+                     | E_Procedure\n+                     | E_Subprogram_Body\n            or else\n-         Ekind_In (Id, E_Generic_Package,     --  packages\n-                       E_Package,\n-                       E_Package_Body)\n+         Ekind (Id) in E_Generic_Package      --  packages\n+                     | E_Package\n+                     | E_Package_Body\n            or else\n          Is_Type (Id)                         --  types\n            or else\n@@ -1336,13 +1335,12 @@ package body Einfo is\n    function Equivalent_Type (Id : E) return E is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Class_Wide_Type,\n-                       E_Class_Wide_Subtype,\n-                       E_Access_Subprogram_Type,\n-                       E_Access_Protected_Subprogram_Type,\n-                       E_Anonymous_Access_Protected_Subprogram_Type,\n-                       E_Access_Subprogram_Type,\n-                       E_Exception_Type));\n+        (Ekind (Id) in E_Class_Wide_Type\n+                     | E_Class_Wide_Subtype\n+                     | E_Access_Subprogram_Type\n+                     | E_Access_Protected_Subprogram_Type\n+                     | E_Anonymous_Access_Protected_Subprogram_Type\n+                     | E_Exception_Type);\n       return Node18 (Id);\n    end Equivalent_Type;\n \n@@ -1354,13 +1352,14 @@ package body Einfo is\n    function Extra_Accessibility (Id : E) return E is\n    begin\n       pragma Assert\n-        (Is_Formal (Id) or else Ekind_In (Id, E_Variable, E_Constant));\n+        (Is_Formal (Id) or else Ekind (Id) in E_Variable | E_Constant);\n       return Node13 (Id);\n    end Extra_Accessibility;\n \n    function Extra_Accessibility_Of_Result (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Operator, E_Subprogram_Type));\n+      pragma Assert\n+        (Ekind (Id) in E_Function | E_Operator | E_Subprogram_Type);\n       return Node19 (Id);\n    end Extra_Accessibility_Of_Result;\n \n@@ -1379,9 +1378,9 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Is_Overloadable (Id)\n-           or else Ekind_In (Id, E_Entry_Family,\n-                                 E_Subprogram_Body,\n-                                 E_Subprogram_Type));\n+           or else Ekind (Id) in E_Entry_Family\n+                               | E_Subprogram_Body\n+                               | E_Subprogram_Type);\n       return Node28 (Id);\n    end Extra_Formals;\n \n@@ -1405,7 +1404,7 @@ package body Einfo is\n \n    function Finalizer (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Package, E_Package_Body));\n+      pragma Assert (Ekind (Id) in E_Package | E_Package_Body);\n       return Node28 (Id);\n    end Finalizer;\n \n@@ -1681,7 +1680,7 @@ package body Einfo is\n \n    function Has_Missing_Return (Id : E) return B is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Generic_Function));\n+      pragma Assert (Ekind (Id) in E_Function | E_Generic_Function);\n       return Flag142 (Id);\n    end Has_Missing_Return;\n \n@@ -2015,23 +2014,23 @@ package body Einfo is\n    function Ignore_SPARK_Mode_Pragmas (Id : E) return B is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Protected_Body,      --  concurrent types\n-                       E_Protected_Type,\n-                       E_Task_Body,\n-                       E_Task_Type)\n+        (Ekind (Id) in E_Protected_Body      --  concurrent types\n+                     | E_Protected_Type\n+                     | E_Task_Body\n+                     | E_Task_Type\n           or else\n-         Ekind_In (Id, E_Entry,               --  overloadable\n-                       E_Entry_Family,\n-                       E_Function,\n-                       E_Generic_Function,\n-                       E_Generic_Procedure,\n-                       E_Operator,\n-                       E_Procedure,\n-                       E_Subprogram_Body)\n+         Ekind (Id) in E_Entry               --  overloadable\n+                     | E_Entry_Family\n+                     | E_Function\n+                     | E_Generic_Function\n+                     | E_Generic_Procedure\n+                     | E_Operator\n+                     | E_Procedure\n+                     | E_Subprogram_Body\n            or else\n-         Ekind_In (Id, E_Generic_Package,     --  packages\n-                       E_Package,\n-                       E_Package_Body));\n+         Ekind (Id) in E_Generic_Package     --  packages\n+                     | E_Package\n+                     | E_Package_Body);\n       return Flag301 (Id);\n    end Ignore_SPARK_Mode_Pragmas;\n \n@@ -2077,7 +2076,7 @@ package body Einfo is\n \n    function Initialization_Statements (Id : E) return N is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Constant | E_Variable);\n       return Node28 (Id);\n    end Initialization_Statements;\n \n@@ -2155,7 +2154,7 @@ package body Einfo is\n \n    function Is_Called (Id : E) return B is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Procedure, E_Function, E_Package));\n+      pragma Assert (Ekind (Id) in E_Procedure | E_Function | E_Package);\n       return Flag102 (Id);\n    end Is_Called;\n \n@@ -2244,7 +2243,7 @@ package body Einfo is\n \n    function Is_DIC_Procedure (Id : E) return B is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       return Flag132 (Id);\n    end Is_DIC_Procedure;\n \n@@ -2314,7 +2313,7 @@ package body Einfo is\n \n    function Is_Finalized_Transient (Id : E) return B is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant, E_Loop_Parameter, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Constant | E_Loop_Parameter | E_Variable);\n       return Flag252 (Id);\n    end Is_Finalized_Transient;\n \n@@ -2335,7 +2334,7 @@ package body Einfo is\n \n    function Is_Generic_Actual_Subprogram (Id : E) return B is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       return Flag274 (Id);\n    end Is_Generic_Actual_Subprogram;\n \n@@ -2382,7 +2381,7 @@ package body Einfo is\n \n    function Is_Ignored_Transient (Id : E) return B is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant, E_Loop_Parameter, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Constant | E_Loop_Parameter | E_Variable);\n       return Flag295 (Id);\n    end Is_Ignored_Transient;\n \n@@ -2409,7 +2408,7 @@ package body Einfo is\n \n    function Is_Initial_Condition_Procedure (Id : E) return B is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       return Flag302 (Id);\n    end Is_Initial_Condition_Procedure;\n \n@@ -2420,7 +2419,7 @@ package body Einfo is\n \n    function Is_Inlined_Always (Id : E) return B is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       return Flag1 (Id);\n    end Is_Inlined_Always;\n \n@@ -2453,7 +2452,7 @@ package body Einfo is\n \n    function Is_Invariant_Procedure (Id : E) return B is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       return Flag257 (Id);\n    end Is_Invariant_Procedure;\n \n@@ -2555,7 +2554,7 @@ package body Einfo is\n \n    function Is_Partial_Invariant_Procedure (Id : E) return B is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       return Flag292 (Id);\n    end Is_Partial_Invariant_Procedure;\n \n@@ -2567,13 +2566,13 @@ package body Einfo is\n \n    function Is_Predicate_Function (Id : E) return B is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       return Flag255 (Id);\n    end Is_Predicate_Function;\n \n    function Is_Predicate_Function_M (Id : E) return B is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       return Flag256 (Id);\n    end Is_Predicate_Function_M;\n \n@@ -2590,7 +2589,7 @@ package body Einfo is\n \n    function Is_Primitive_Wrapper (Id : E) return B is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       return Flag195 (Id);\n    end Is_Primitive_Wrapper;\n \n@@ -2607,7 +2606,7 @@ package body Einfo is\n \n    function Is_Private_Primitive (Id : E) return B is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       return Flag245 (Id);\n    end Is_Private_Primitive;\n \n@@ -2793,7 +2792,7 @@ package body Einfo is\n \n    function Last_Aggregate_Assignment (Id : E) return N is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Constant | E_Variable);\n       return Node30 (Id);\n    end Last_Aggregate_Assignment;\n \n@@ -2904,7 +2903,7 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Is_Overloadable (Id)\n-           or else Ekind_In (Id, E_Subprogram_Type, E_Entry_Family));\n+           or else Ekind (Id) in E_Subprogram_Type | E_Entry_Family);\n       return Flag22 (Id);\n    end Needs_No_Actuals;\n \n@@ -2984,19 +2983,19 @@ package body Einfo is\n \n    function Normalized_First_Bit (Id : E) return U is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n+      pragma Assert (Ekind (Id) in E_Component | E_Discriminant);\n       return Uint8 (Id);\n    end Normalized_First_Bit;\n \n    function Normalized_Position (Id : E) return U is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n+      pragma Assert (Ekind (Id) in E_Component | E_Discriminant);\n       return Uint14 (Id);\n    end Normalized_Position;\n \n    function Normalized_Position_Max (Id : E) return U is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n+      pragma Assert (Ekind (Id) in E_Component | E_Discriminant);\n       return Uint10 (Id);\n    end Normalized_Position_Max;\n \n@@ -3009,14 +3008,14 @@ package body Einfo is\n    function Optimize_Alignment_Space (Id : E) return B is\n    begin\n       pragma Assert\n-        (Is_Type (Id) or else Ekind_In (Id, E_Constant, E_Variable));\n+        (Is_Type (Id) or else Ekind (Id) in E_Constant | E_Variable);\n       return Flag241 (Id);\n    end Optimize_Alignment_Space;\n \n    function Optimize_Alignment_Time (Id : E) return B is\n    begin\n       pragma Assert\n-        (Is_Type (Id) or else Ekind_In (Id, E_Constant, E_Variable));\n+        (Is_Type (Id) or else Ekind (Id) in E_Constant | E_Variable);\n       return Flag242 (Id);\n    end Optimize_Alignment_Time;\n \n@@ -3039,7 +3038,7 @@ package body Einfo is\n \n    function Original_Record_Component (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Void, E_Component, E_Discriminant));\n+      pragma Assert (Ekind (Id) in E_Void | E_Component | E_Discriminant);\n       return Node22 (Id);\n    end Original_Record_Component;\n \n@@ -3074,7 +3073,7 @@ package body Einfo is\n \n    function Part_Of_Constituents (Id : E) return L is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Abstract_State, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Abstract_State | E_Variable);\n       return Elist10 (Id);\n    end Part_Of_Constituents;\n \n@@ -3098,18 +3097,17 @@ package body Einfo is\n \n    function Postconditions_Proc (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Entry,\n-                                   E_Entry_Family,\n-                                   E_Function,\n-                                   E_Procedure));\n+      pragma Assert\n+        (Ekind (Id) in E_Entry | E_Entry_Family | E_Function | E_Procedure);\n       return Node14 (Id);\n    end Postconditions_Proc;\n \n    function Predicated_Parent (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Array_Subtype,\n-                                   E_Record_Subtype,\n-                                   E_Record_Subtype_With_Private));\n+      pragma Assert\n+        (Ekind (Id) in E_Array_Subtype  |\n+                       E_Record_Subtype |\n+                       E_Record_Subtype_With_Private);\n       return Node38 (Id);\n    end Predicated_Parent;\n \n@@ -3132,7 +3130,7 @@ package body Einfo is\n \n    function Prival_Link (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Constant | E_Variable);\n       return Node20 (Id);\n    end Prival_Link;\n \n@@ -3156,16 +3154,14 @@ package body Einfo is\n \n    function Protected_Subprogram (Id : E) return N is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       return Node39 (Id);\n    end Protected_Subprogram;\n \n    function Protection_Object (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Entry,\n-                                   E_Entry_Family,\n-                                   E_Function,\n-                                   E_Procedure));\n+      pragma Assert\n+        (Ekind (Id) in E_Entry | E_Entry_Family | E_Function | E_Procedure);\n       return Node23 (Id);\n    end Protection_Object;\n \n@@ -3215,20 +3211,19 @@ package body Einfo is\n \n    function Related_Expression (Id : E) return N is\n    begin\n-      pragma Assert (Ekind (Id) in Type_Kind\n-                       or else Ekind_In (Id, E_Constant, E_Variable));\n+      pragma Assert (Ekind (Id) in Type_Kind | E_Constant | E_Variable);\n       return Node24 (Id);\n    end Related_Expression;\n \n    function Related_Instance (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Package, E_Package_Body));\n+      pragma Assert (Ekind (Id) in E_Package | E_Package_Body);\n       return Node15 (Id);\n    end Related_Instance;\n \n    function Related_Type (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Component, E_Constant, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Component | E_Constant | E_Variable);\n       return Node27 (Id);\n    end Related_Type;\n \n@@ -3332,7 +3327,7 @@ package body Einfo is\n \n    function Size_Check_Code (Id : E) return N is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Constant | E_Variable);\n       return Node19 (Id);\n    end Size_Check_Code;\n \n@@ -3355,51 +3350,51 @@ package body Einfo is\n    function SPARK_Aux_Pragma (Id : E) return N is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Protected_Type,      --  concurrent types\n-                       E_Task_Type)\n+        (Ekind (Id) in E_Protected_Type      --  concurrent types\n+                     | E_Task_Type\n            or else\n-         Ekind_In (Id, E_Generic_Package,     --  packages\n-                       E_Package,\n-                       E_Package_Body));\n+         Ekind (Id) in E_Generic_Package     --  packages\n+                     | E_Package\n+                     | E_Package_Body);\n       return Node41 (Id);\n    end SPARK_Aux_Pragma;\n \n    function SPARK_Aux_Pragma_Inherited (Id : E) return B is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Protected_Type,      --  concurrent types\n-                       E_Task_Type)\n+        (Ekind (Id) in E_Protected_Type      --  concurrent types\n+                     | E_Task_Type\n            or else\n-         Ekind_In (Id, E_Generic_Package,     --  packages\n-                       E_Package,\n-                       E_Package_Body));\n+         Ekind (Id) in E_Generic_Package     --  packages\n+                     | E_Package\n+                     | E_Package_Body);\n       return Flag266 (Id);\n    end SPARK_Aux_Pragma_Inherited;\n \n    function SPARK_Pragma (Id : E) return N is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Constant,            --  objects\n-                       E_Variable)\n+        (Ekind (Id) in E_Constant            --  objects\n+                     | E_Variable\n           or else\n-         Ekind_In (Id, E_Abstract_State,      --  overloadable\n-                       E_Entry,\n-                       E_Entry_Family,\n-                       E_Function,\n-                       E_Generic_Function,\n-                       E_Generic_Procedure,\n-                       E_Operator,\n-                       E_Procedure,\n-                       E_Subprogram_Body)\n+         Ekind (Id) in E_Abstract_State      --  overloadable\n+                     | E_Entry\n+                     | E_Entry_Family\n+                     | E_Function\n+                     | E_Generic_Function\n+                     | E_Generic_Procedure\n+                     | E_Operator\n+                     | E_Procedure\n+                     | E_Subprogram_Body\n            or else\n-         Ekind_In (Id, E_Generic_Package,     --  packages\n-                       E_Package,\n-                       E_Package_Body)\n+         Ekind (Id) in E_Generic_Package     --  packages\n+                     | E_Package\n+                     | E_Package_Body\n            or else\n-         Ekind (Id) = E_Void                  --  special purpose\n+         Ekind (Id) = E_Void                 --  special purpose\n            or else\n-         Ekind_In (Id, E_Protected_Body,      --  types\n-                       E_Task_Body)\n+         Ekind (Id) in E_Protected_Body      --  types\n+                     | E_Task_Body\n            or else\n          Is_Type (Id));\n       return Node40 (Id);\n@@ -3408,27 +3403,27 @@ package body Einfo is\n    function SPARK_Pragma_Inherited (Id : E) return B is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Constant,            --  objects\n-                       E_Variable)\n+        (Ekind (Id) in E_Constant            --  objects\n+                     | E_Variable\n           or else\n-         Ekind_In (Id, E_Abstract_State,      --  overloadable\n-                       E_Entry,\n-                       E_Entry_Family,\n-                       E_Function,\n-                       E_Generic_Function,\n-                       E_Generic_Procedure,\n-                       E_Operator,\n-                       E_Procedure,\n-                       E_Subprogram_Body)\n+         Ekind (Id) in E_Abstract_State      --  overloadable\n+                     | E_Entry\n+                     | E_Entry_Family\n+                     | E_Function\n+                     | E_Generic_Function\n+                     | E_Generic_Procedure\n+                     | E_Operator\n+                     | E_Procedure\n+                     | E_Subprogram_Body\n            or else\n-         Ekind_In (Id, E_Generic_Package,     --  packages\n-                       E_Package,\n-                       E_Package_Body)\n+         Ekind (Id) in E_Generic_Package     --  packages\n+                     | E_Package\n+                     | E_Package_Body\n            or else\n-         Ekind (Id) = E_Void                  --  special purpose\n+         Ekind (Id) = E_Void                 --  special purpose\n            or else\n-         Ekind_In (Id, E_Protected_Body,      --  types\n-                       E_Task_Body)\n+         Ekind (Id) in E_Protected_Body      --  types\n+                     | E_Task_Body\n            or else\n          Is_Type (Id));\n       return Flag265 (Id);\n@@ -3466,9 +3461,8 @@ package body Einfo is\n \n    function Status_Flag_Or_Transient_Decl (Id : E) return N is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant,\n-                                   E_Loop_Parameter,\n-                                   E_Variable));\n+      pragma Assert\n+        (Ekind (Id) in E_Constant | E_Loop_Parameter | E_Variable);\n       return Node15 (Id);\n    end Status_Flag_Or_Transient_Decl;\n \n@@ -3559,7 +3553,7 @@ package body Einfo is\n \n    function Thunk_Entity (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure)\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure\n                       and then Is_Thunk (Id));\n       return Node31 (Id);\n    end Thunk_Entity;\n@@ -3640,7 +3634,7 @@ package body Einfo is\n \n    function Wrapped_Entity (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure)\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure\n                        and then Is_Primitive_Wrapper (Id));\n       return Node27 (Id);\n    end Wrapped_Entity;\n@@ -3945,16 +3939,15 @@ package body Einfo is\n \n    procedure Set_Anonymous_Masters (Id : E; V : L) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function,\n-                                   E_Package,\n-                                   E_Procedure,\n-                                   E_Subprogram_Body));\n+      pragma Assert\n+        (Ekind (Id)\n+           in E_Function | E_Package | E_Procedure | E_Subprogram_Body);\n       Set_Elist29 (Id, V);\n    end Set_Anonymous_Masters;\n \n    procedure Set_Anonymous_Object (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Protected_Type, E_Task_Type));\n+      pragma Assert (Ekind (Id) in E_Protected_Type | E_Task_Type);\n       Set_Node30 (Id, V);\n    end Set_Anonymous_Object;\n \n@@ -3981,19 +3974,20 @@ package body Einfo is\n \n    procedure Set_Activation_Record_Component (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant,\n-                                   E_In_Parameter,\n-                                   E_In_Out_Parameter,\n-                                   E_Loop_Parameter,\n-                                   E_Out_Parameter,\n-                                   E_Variable));\n+      pragma Assert\n+        (Ekind (Id) in E_Constant\n+                     | E_In_Parameter\n+                     | E_In_Out_Parameter\n+                     | E_Loop_Parameter\n+                     | E_Out_Parameter\n+                     | E_Variable);\n       Set_Node31 (Id, V);\n    end Set_Activation_Record_Component;\n \n    procedure Set_Actual_Subtype (Id : E; V : E) is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Constant, E_Variable, E_Generic_In_Out_Parameter)\n+        (Ekind (Id) in E_Constant | E_Variable | E_Generic_In_Out_Parameter\n            or else Is_Formal (Id));\n       Set_Node17 (Id, V);\n    end Set_Actual_Subtype;\n@@ -4014,10 +4008,10 @@ package body Einfo is\n    begin\n       pragma Assert (Is_Type (Id)\n                        or else Is_Formal (Id)\n-                       or else Ekind_In (Id, E_Loop_Parameter,\n-                                             E_Constant,\n-                                             E_Exception,\n-                                             E_Variable));\n+                       or else Ekind (Id) in E_Loop_Parameter\n+                                           | E_Constant\n+                                           | E_Exception\n+                                           | E_Variable);\n       Set_Uint14 (Id, V);\n    end Set_Alignment;\n \n@@ -4062,7 +4056,7 @@ package body Einfo is\n \n    procedure Set_BIP_Initialization_Call (Id : E; V : N) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Constant | E_Variable);\n       Set_Node29 (Id, V);\n    end Set_BIP_Initialization_Call;\n \n@@ -4103,19 +4097,19 @@ package body Einfo is\n \n    procedure Set_Cloned_Subtype (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Record_Subtype, E_Class_Wide_Subtype));\n+      pragma Assert (Ekind (Id) in E_Record_Subtype | E_Class_Wide_Subtype);\n       Set_Node16 (Id, V);\n    end Set_Cloned_Subtype;\n \n    procedure Set_Component_Bit_Offset (Id : E; V : U) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n+      pragma Assert (Ekind (Id) in E_Component | E_Discriminant);\n       Set_Uint11 (Id, V);\n    end Set_Component_Bit_Offset;\n \n    procedure Set_Component_Clause (Id : E; V : N) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n+      pragma Assert (Ekind (Id) in E_Component | E_Discriminant);\n       Set_Node13 (Id, V);\n    end Set_Component_Clause;\n \n@@ -4134,46 +4128,46 @@ package body Einfo is\n    procedure Set_Contains_Ignored_Ghost_Code (Id : E; V : B := True) is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Block,\n-                       E_Function,\n-                       E_Generic_Function,\n-                       E_Generic_Package,\n-                       E_Generic_Procedure,\n-                       E_Package,\n-                       E_Package_Body,\n-                       E_Procedure,\n-                       E_Subprogram_Body));\n+        (Ekind (Id) in E_Block\n+                     | E_Function\n+                     | E_Generic_Function\n+                     | E_Generic_Package\n+                     | E_Generic_Procedure\n+                     | E_Package\n+                     | E_Package_Body\n+                     | E_Procedure\n+                     | E_Subprogram_Body);\n       Set_Flag279 (Id, V);\n    end Set_Contains_Ignored_Ghost_Code;\n \n    procedure Set_Contract (Id : E; V : N) is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Protected_Type,      --  concurrent types\n-                       E_Task_Body,\n-                       E_Task_Type)\n+        (Ekind (Id) in E_Protected_Type      --  concurrent types\n+                     | E_Task_Body\n+                     | E_Task_Type\n            or else\n-         Ekind_In (Id, E_Constant,            --  objects\n-                       E_Variable)\n+         Ekind (Id) in E_Constant            --  objects\n+                     | E_Variable\n            or else\n-         Ekind_In (Id, E_Entry,               --  overloadable\n-                       E_Entry_Family,\n-                       E_Function,\n-                       E_Generic_Function,\n-                       E_Generic_Procedure,\n-                       E_Operator,\n-                       E_Procedure,\n-                       E_Subprogram_Body)\n+         Ekind (Id) in E_Entry               --  overloadable\n+                     | E_Entry_Family\n+                     | E_Function\n+                     | E_Generic_Function\n+                     | E_Generic_Procedure\n+                     | E_Operator\n+                     | E_Procedure\n+                     | E_Subprogram_Body\n            or else\n-         Ekind_In (Id, E_Generic_Package,     --  packages\n-                       E_Package,\n-                       E_Package_Body)\n+         Ekind (Id) in E_Generic_Package     --  packages\n+                     | E_Package\n+                     | E_Package_Body\n \n            or else\n-         Is_Type (Id)                         -- types\n+         Is_Type (Id)                        -- types\n \n            or else\n-         Ekind (Id) = E_Void);                --  special purpose\n+         Ekind (Id) = E_Void);               --  special purpose\n       Set_Node34 (Id, V);\n    end Set_Contract;\n \n@@ -4219,13 +4213,13 @@ package body Einfo is\n \n    procedure Set_Corresponding_Protected_Entry (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Void, E_Subprogram_Body));\n+      pragma Assert (Ekind (Id) in E_Void | E_Subprogram_Body);\n       Set_Node18 (Id, V);\n    end Set_Corresponding_Protected_Entry;\n \n    procedure Set_Corresponding_Record_Component (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n+      pragma Assert (Ekind (Id) in E_Component | E_Discriminant);\n       Set_Node21 (Id, V);\n    end Set_Corresponding_Record_Component;\n \n@@ -4308,7 +4302,7 @@ package body Einfo is\n    procedure Set_Delay_Subprogram_Descriptors (Id : E; V : B := True) is\n    begin\n       pragma Assert\n-        (Is_Subprogram (Id) or else Ekind_In (Id, E_Package, E_Package_Body));\n+        (Is_Subprogram (Id) or else Ekind (Id) in E_Package | E_Package_Body);\n \n       Set_Flag50 (Id, V);\n    end Set_Delay_Subprogram_Descriptors;\n@@ -4416,13 +4410,13 @@ package body Einfo is\n \n    procedure Set_DT_Position (Id : E; V : U) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       Set_Uint15 (Id, V);\n    end Set_DT_Position;\n \n    procedure Set_DTC_Entity (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       Set_Node16 (Id, V);\n    end Set_DTC_Entity;\n \n@@ -4437,7 +4431,7 @@ package body Einfo is\n       pragma Assert\n         (Is_Subprogram (Id)\n            or else\n-         Ekind_In (Id, E_Entry, E_Entry_Family, E_Package)\n+         Ekind (Id) in E_Entry | E_Entry_Family | E_Package\n            or else\n          Is_Generic_Unit (Id));\n       Set_Node13 (Id, V);\n@@ -4448,15 +4442,15 @@ package body Einfo is\n       pragma Assert\n         (Is_Subprogram (Id)\n            or else\n-         Ekind_In (Id, E_Entry, E_Entry_Family, E_Package)\n+         Ekind (Id) in E_Entry | E_Entry_Family | E_Package\n            or else\n          Is_Generic_Unit (Id));\n       Set_Flag174 (Id, V);\n    end Set_Elaboration_Entity_Required;\n \n    procedure Set_Encapsulating_State (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Abstract_State, E_Constant, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Abstract_State | E_Constant | E_Variable);\n       Set_Node32 (Id, V);\n    end Set_Encapsulating_State;\n \n@@ -4535,12 +4529,12 @@ package body Einfo is\n    procedure Set_Equivalent_Type (Id : E; V : E) is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Class_Wide_Type,\n-                       E_Class_Wide_Subtype,\n-                       E_Access_Protected_Subprogram_Type,\n-                       E_Anonymous_Access_Protected_Subprogram_Type,\n-                       E_Access_Subprogram_Type,\n-                       E_Exception_Type));\n+        (Ekind (Id) in E_Class_Wide_Type\n+                     | E_Class_Wide_Subtype\n+                     | E_Access_Protected_Subprogram_Type\n+                     | E_Anonymous_Access_Protected_Subprogram_Type\n+                     | E_Access_Subprogram_Type\n+                     | E_Exception_Type);\n       Set_Node18 (Id, V);\n    end Set_Equivalent_Type;\n \n@@ -4552,13 +4546,14 @@ package body Einfo is\n    procedure Set_Extra_Accessibility (Id : E; V : E) is\n    begin\n       pragma Assert\n-        (Is_Formal (Id) or else Ekind_In (Id, E_Variable, E_Constant));\n+        (Is_Formal (Id) or else Ekind (Id) in E_Variable | E_Constant);\n       Set_Node13 (Id, V);\n    end Set_Extra_Accessibility;\n \n    procedure Set_Extra_Accessibility_Of_Result (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Operator, E_Subprogram_Type));\n+      pragma Assert\n+        (Ekind (Id) in E_Function | E_Operator | E_Subprogram_Type);\n       Set_Node19 (Id, V);\n    end Set_Extra_Accessibility_Of_Result;\n \n@@ -4577,9 +4572,9 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Is_Overloadable (Id)\n-           or else Ekind_In (Id, E_Entry_Family,\n-                                 E_Subprogram_Body,\n-                                 E_Subprogram_Type));\n+           or else Ekind (Id) in E_Entry_Family\n+                               | E_Subprogram_Body\n+                               | E_Subprogram_Type);\n       Set_Node28 (Id, V);\n    end Set_Extra_Formals;\n \n@@ -4597,7 +4592,7 @@ package body Einfo is\n \n    procedure Set_Finalizer (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Package, E_Package_Body));\n+      pragma Assert (Ekind (Id) in E_Package | E_Package_Body);\n       Set_Node28 (Id, V);\n    end Set_Finalizer;\n \n@@ -4650,7 +4645,7 @@ package body Einfo is\n    procedure Set_From_Limited_With (Id : E; V : B := True) is\n    begin\n       pragma Assert\n-        (Is_Type (Id) or else Ekind_In (Id, E_Abstract_State, E_Package));\n+        (Is_Type (Id) or else Ekind (Id) in E_Abstract_State | E_Package);\n       Set_Flag159 (Id, V);\n    end Set_From_Limited_With;\n \n@@ -4812,10 +4807,8 @@ package body Einfo is\n \n    procedure Set_Has_Expanded_Contract (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Entry,\n-                                   E_Entry_Family,\n-                                   E_Function,\n-                                   E_Procedure));\n+      pragma Assert\n+        (Ekind (Id) in E_Entry | E_Entry_Family | E_Function | E_Procedure);\n       Set_Flag240 (Id, V);\n    end Set_Has_Expanded_Contract;\n \n@@ -4870,7 +4863,7 @@ package body Einfo is\n \n    procedure Set_Has_Initial_Value (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Variable, E_Out_Parameter));\n+      pragma Assert (Ekind (Id) in E_Variable | E_Out_Parameter);\n       Set_Flag219 (Id, V);\n    end Set_Has_Initial_Value;\n \n@@ -4893,7 +4886,7 @@ package body Einfo is\n \n    procedure Set_Has_Missing_Return (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Generic_Function));\n+      pragma Assert (Ekind (Id) in E_Function | E_Generic_Function);\n       Set_Flag142 (Id, V);\n    end Set_Has_Missing_Return;\n \n@@ -4923,7 +4916,7 @@ package body Einfo is\n    procedure Set_Has_Out_Or_In_Out_Parameter (Id : E; V : B := True) is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Entry, E_Entry_Family)\n+        (Ekind (Id) in E_Entry | E_Entry_Family\n           or else Is_Subprogram_Or_Generic_Subprogram (Id));\n       Set_Flag110 (Id, V);\n    end Set_Has_Out_Or_In_Out_Parameter;\n@@ -5247,23 +5240,23 @@ package body Einfo is\n    procedure Set_Ignore_SPARK_Mode_Pragmas (Id : E; V : B := True) is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Protected_Body,      --  concurrent types\n-                       E_Protected_Type,\n-                       E_Task_Body,\n-                       E_Task_Type)\n+        (Ekind (Id) in E_Protected_Body      --  concurrent types\n+                     | E_Protected_Type\n+                     | E_Task_Body\n+                     | E_Task_Type\n           or else\n-         Ekind_In (Id, E_Entry,               --  overloadable\n-                       E_Entry_Family,\n-                       E_Function,\n-                       E_Generic_Function,\n-                       E_Generic_Procedure,\n-                       E_Operator,\n-                       E_Procedure,\n-                       E_Subprogram_Body)\n+         Ekind (Id) in E_Entry               --  overloadable\n+                     | E_Entry_Family\n+                     | E_Function\n+                     | E_Generic_Function\n+                     | E_Generic_Procedure\n+                     | E_Operator\n+                     | E_Procedure\n+                     | E_Subprogram_Body\n            or else\n-         Ekind_In (Id, E_Generic_Package,     --  packages\n-                       E_Package,\n-                       E_Package_Body));\n+         Ekind (Id) in E_Generic_Package     --  packages\n+                     | E_Package\n+                     | E_Package_Body);\n       Set_Flag301 (Id, V);\n    end Set_Ignore_SPARK_Mode_Pragmas;\n \n@@ -5278,7 +5271,7 @@ package body Einfo is\n       pragma Assert\n         (Is_Internal (Id)\n            and then Is_Hidden (Id)\n-           and then (Ekind_In (Id, E_Procedure, E_Function)));\n+           and then (Ekind (Id) in E_Procedure | E_Function));\n       Set_Node25 (Id, V);\n    end Set_Interface_Alias;\n \n@@ -5310,7 +5303,7 @@ package body Einfo is\n       --  an aggregate used as the initialization expression for an object\n       --  declaration, and this occurs before the Ekind for the object is set.\n \n-      pragma Assert (Ekind_In (Id, E_Void, E_Constant, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Void | E_Constant | E_Variable);\n       Set_Node28 (Id, V);\n    end Set_Initialization_Statements;\n \n@@ -5397,7 +5390,7 @@ package body Einfo is\n \n    procedure Set_Is_Called (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Procedure, E_Function, E_Package));\n+      pragma Assert (Ekind (Id) in E_Procedure | E_Function | E_Package);\n       Set_Flag102 (Id, V);\n    end Set_Is_Called;\n \n@@ -5569,7 +5562,7 @@ package body Einfo is\n \n    procedure Set_Is_Finalized_Transient (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant, E_Loop_Parameter, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Constant | E_Loop_Parameter | E_Variable);\n       Set_Flag252 (Id, V);\n    end Set_Is_Finalized_Transient;\n \n@@ -5591,7 +5584,7 @@ package body Einfo is\n \n    procedure Set_Is_Generic_Actual_Subprogram (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       Set_Flag274 (Id, V);\n    end Set_Is_Generic_Actual_Subprogram;\n \n@@ -5619,7 +5612,7 @@ package body Einfo is\n \n    procedure Set_Is_Hidden_Non_Overridden_Subpgm (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       Set_Flag2 (Id, V);\n    end Set_Is_Hidden_Non_Overridden_Subpgm;\n \n@@ -5639,7 +5632,7 @@ package body Einfo is\n \n    procedure Set_Is_Ignored_Transient (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant, E_Loop_Parameter, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Constant | E_Loop_Parameter | E_Variable);\n       Set_Flag295 (Id, V);\n    end Set_Is_Ignored_Transient;\n \n@@ -5666,7 +5659,7 @@ package body Einfo is\n \n    procedure Set_Is_Initial_Condition_Procedure (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       Set_Flag302 (Id, V);\n    end Set_Is_Initial_Condition_Procedure;\n \n@@ -5677,7 +5670,7 @@ package body Einfo is\n \n    procedure Set_Is_Inlined_Always (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       Set_Flag1 (Id, V);\n    end Set_Is_Inlined_Always;\n \n@@ -5804,7 +5797,7 @@ package body Einfo is\n \n    procedure Set_Is_Param_Block_Component_Type (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Void, E_General_Access_Type));\n+      pragma Assert (Ekind (Id) in E_Void | E_General_Access_Type);\n       Set_Flag215 (Id, V);\n    end Set_Is_Param_Block_Component_Type;\n \n@@ -5828,7 +5821,7 @@ package body Einfo is\n \n    procedure Set_Is_Predicate_Function_M (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       Set_Flag256 (Id, V);\n    end Set_Is_Predicate_Function_M;\n \n@@ -5845,7 +5838,7 @@ package body Einfo is\n \n    procedure Set_Is_Primitive_Wrapper (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       Set_Flag195 (Id, V);\n    end Set_Is_Primitive_Wrapper;\n \n@@ -5862,7 +5855,7 @@ package body Einfo is\n \n    procedure Set_Is_Private_Primitive (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       Set_Flag245 (Id, V);\n    end Set_Is_Private_Primitive;\n \n@@ -5936,16 +5929,14 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Is_Type (Id)\n-           or else Ekind_In (Id, E_Exception,\n-                                 E_Variable,\n-                                 E_Constant,\n-                                 E_Void));\n+           or else\n+             Ekind (Id) in E_Exception | E_Variable | E_Constant | E_Void);\n       Set_Flag28 (Id, V);\n    end Set_Is_Statically_Allocated;\n \n    procedure Set_Is_Tag (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Component, E_Constant, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Component | E_Constant | E_Variable);\n       Set_Flag78 (Id, V);\n    end Set_Is_Tag;\n \n@@ -6002,7 +5993,7 @@ package body Einfo is\n    procedure Set_Is_Uplevel_Referenced_Entity (Id : E; V : B := True) is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Constant, E_Loop_Parameter, E_Variable)\n+        (Ekind (Id) in E_Constant | E_Loop_Parameter | E_Variable\n           or else Is_Formal (Id)\n           or else Is_Type (Id));\n       Set_Flag283 (Id, V);\n@@ -6059,7 +6050,7 @@ package body Einfo is\n \n    procedure Set_Last_Aggregate_Assignment (Id : E; V : N) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Constant | E_Variable);\n       Set_Node30 (Id, V);\n    end Set_Last_Aggregate_Assignment;\n \n@@ -6171,7 +6162,7 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Is_Overloadable (Id)\n-           or else Ekind_In (Id, E_Subprogram_Type, E_Entry_Family));\n+           or else Ekind (Id) in E_Subprogram_Type | E_Entry_Family);\n       Set_Flag22 (Id, V);\n    end Set_Needs_No_Actuals;\n \n@@ -6237,7 +6228,7 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Ekind (Id) in Incomplete_Kind\n-          or else Ekind_In (Id, E_Abstract_State, E_Class_Wide_Type));\n+          or else Ekind (Id) in E_Abstract_State | E_Class_Wide_Type);\n       Set_Node19 (Id, V);\n    end Set_Non_Limited_View;\n \n@@ -6251,19 +6242,19 @@ package body Einfo is\n \n    procedure Set_Normalized_First_Bit (Id : E; V : U) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n+      pragma Assert (Ekind (Id) in E_Component | E_Discriminant);\n       Set_Uint8 (Id, V);\n    end Set_Normalized_First_Bit;\n \n    procedure Set_Normalized_Position (Id : E; V : U) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n+      pragma Assert (Ekind (Id) in E_Component | E_Discriminant);\n       Set_Uint14 (Id, V);\n    end Set_Normalized_Position;\n \n    procedure Set_Normalized_Position_Max (Id : E; V : U) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Component, E_Discriminant));\n+      pragma Assert (Ekind (Id) in E_Component | E_Discriminant);\n       Set_Uint10 (Id, V);\n    end Set_Normalized_Position_Max;\n \n@@ -6276,14 +6267,14 @@ package body Einfo is\n    procedure Set_Optimize_Alignment_Space (Id : E; V : B := True) is\n    begin\n       pragma Assert\n-        (Is_Type (Id) or else Ekind_In (Id, E_Constant, E_Variable));\n+        (Is_Type (Id) or else Ekind (Id) in E_Constant | E_Variable);\n       Set_Flag241 (Id, V);\n    end Set_Optimize_Alignment_Space;\n \n    procedure Set_Optimize_Alignment_Time (Id : E; V : B := True) is\n    begin\n       pragma Assert\n-        (Is_Type (Id) or else Ekind_In (Id, E_Constant, E_Variable));\n+        (Is_Type (Id) or else Ekind (Id) in E_Constant | E_Variable);\n       Set_Flag242 (Id, V);\n    end Set_Optimize_Alignment_Time;\n \n@@ -6301,13 +6292,13 @@ package body Einfo is\n \n    procedure Set_Original_Protected_Subprogram (Id : E; V : N) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       Set_Node41 (Id, V);\n    end Set_Original_Protected_Subprogram;\n \n    procedure Set_Original_Record_Component (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Void, E_Component, E_Discriminant));\n+      pragma Assert (Ekind (Id) in E_Void | E_Component | E_Discriminant);\n       Set_Node22 (Id, V);\n    end Set_Original_Record_Component;\n \n@@ -6324,7 +6315,7 @@ package body Einfo is\n \n    procedure Set_Package_Instantiation (Id : E; V : N) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Void, E_Generic_Package, E_Package));\n+      pragma Assert (Ekind (Id) in E_Void | E_Generic_Package | E_Package);\n       Set_Node26 (Id, V);\n    end Set_Package_Instantiation;\n \n@@ -6342,7 +6333,7 @@ package body Einfo is\n \n    procedure Set_Part_Of_Constituents (Id : E; V : L) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Abstract_State, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Abstract_State | E_Variable);\n       Set_Elist10 (Id, V);\n    end Set_Part_Of_Constituents;\n \n@@ -6366,18 +6357,16 @@ package body Einfo is\n \n    procedure Set_Postconditions_Proc (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Entry,\n-                                   E_Entry_Family,\n-                                   E_Function,\n-                                   E_Procedure));\n+      pragma Assert\n+        (Ekind (Id) in E_Entry | E_Entry_Family | E_Function | E_Procedure);\n       Set_Node14 (Id, V);\n    end Set_Postconditions_Proc;\n \n    procedure Set_Predicated_Parent (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Array_Subtype,\n-                                   E_Record_Subtype,\n-                                   E_Record_Subtype_With_Private));\n+      pragma Assert (Ekind (Id) in E_Array_Subtype\n+                                 | E_Record_Subtype\n+                                 | E_Record_Subtype_With_Private);\n       Set_Node38 (Id, V);\n    end Set_Predicated_Parent;\n \n@@ -6401,7 +6390,7 @@ package body Einfo is\n \n    procedure Set_Prival_Link (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Constant | E_Variable);\n       Set_Node20 (Id, V);\n    end Set_Prival_Link;\n \n@@ -6430,16 +6419,16 @@ package body Einfo is\n \n    procedure Set_Protected_Subprogram (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n       Set_Node39 (Id, V);\n    end Set_Protected_Subprogram;\n \n    procedure Set_Protection_Object (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Entry,\n-                                   E_Entry_Family,\n-                                   E_Function,\n-                                   E_Procedure));\n+      pragma Assert (Ekind (Id) in E_Entry\n+                                 | E_Entry_Family\n+                                 | E_Function\n+                                 | E_Procedure);\n       Set_Node23 (Id, V);\n    end Set_Protection_Object;\n \n@@ -6489,20 +6478,20 @@ package body Einfo is\n \n    procedure Set_Related_Expression (Id : E; V : N) is\n    begin\n-      pragma Assert (Ekind (Id) in Type_Kind\n-                       or else Ekind_In (Id, E_Constant, E_Variable, E_Void));\n+      pragma Assert\n+        (Ekind (Id) in Type_Kind | E_Constant | E_Variable | E_Void);\n       Set_Node24 (Id, V);\n    end Set_Related_Expression;\n \n    procedure Set_Related_Instance (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Package, E_Package_Body));\n+      pragma Assert (Ekind (Id) in E_Package | E_Package_Body);\n       Set_Node15 (Id, V);\n    end Set_Related_Instance;\n \n    procedure Set_Related_Type (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Component, E_Constant, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Component | E_Constant | E_Variable);\n       Set_Node27 (Id, V);\n    end Set_Related_Type;\n \n@@ -6610,7 +6599,7 @@ package body Einfo is\n \n    procedure Set_Size_Check_Code (Id : E; V : N) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Constant | E_Variable);\n       Set_Node19 (Id, V);\n    end Set_Size_Check_Code;\n \n@@ -6633,51 +6622,51 @@ package body Einfo is\n    procedure Set_SPARK_Aux_Pragma (Id : E; V : N) is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Protected_Type,      --  concurrent types\n-                       E_Task_Type)\n+        (Ekind (Id) in E_Protected_Type      --  concurrent types\n+                     | E_Task_Type\n            or else\n-         Ekind_In (Id, E_Generic_Package,     --  packages\n-                       E_Package,\n-                       E_Package_Body));\n+         Ekind (Id) in E_Generic_Package     --  packages\n+                     | E_Package\n+                     | E_Package_Body);\n       Set_Node41 (Id, V);\n    end Set_SPARK_Aux_Pragma;\n \n    procedure Set_SPARK_Aux_Pragma_Inherited (Id : E; V : B := True) is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Protected_Type,      --  concurrent types\n-                       E_Task_Type)\n+        (Ekind (Id) in E_Protected_Type      --  concurrent types\n+                     | E_Task_Type\n            or else\n-         Ekind_In (Id, E_Generic_Package,     --  packages\n-                       E_Package,\n-                       E_Package_Body));\n+         Ekind (Id) in E_Generic_Package     --  packages\n+                     | E_Package\n+                     | E_Package_Body);\n       Set_Flag266 (Id, V);\n    end Set_SPARK_Aux_Pragma_Inherited;\n \n    procedure Set_SPARK_Pragma (Id : E; V : N) is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Constant,            --  objects\n-                       E_Variable)\n+        (Ekind (Id) in E_Constant            --  objects\n+                     | E_Variable\n           or else\n-         Ekind_In (Id, E_Abstract_State,      --  overloadable\n-                       E_Entry,\n-                       E_Entry_Family,\n-                       E_Function,\n-                       E_Generic_Function,\n-                       E_Generic_Procedure,\n-                       E_Operator,\n-                       E_Procedure,\n-                       E_Subprogram_Body)\n+         Ekind (Id) in E_Abstract_State      --  overloadable\n+                     | E_Entry\n+                     | E_Entry_Family\n+                     | E_Function\n+                     | E_Generic_Function\n+                     | E_Generic_Procedure\n+                     | E_Operator\n+                     | E_Procedure\n+                     | E_Subprogram_Body\n            or else\n-         Ekind_In (Id, E_Generic_Package,     --  packages\n-                       E_Package,\n-                       E_Package_Body)\n+         Ekind (Id) in E_Generic_Package     --  packages\n+                     | E_Package\n+                     | E_Package_Body\n            or else\n-         Ekind (Id) = E_Void                  --  special purpose\n+         Ekind (Id) = E_Void                 --  special purpose\n            or else\n-         Ekind_In (Id, E_Protected_Body,      --  types\n-                       E_Task_Body)\n+         Ekind (Id) in E_Protected_Body      --  types\n+                     | E_Task_Body\n            or else\n          Is_Type (Id));\n       Set_Node40 (Id, V);\n@@ -6686,27 +6675,27 @@ package body Einfo is\n    procedure Set_SPARK_Pragma_Inherited (Id : E; V : B := True) is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Constant,            --  objects\n-                       E_Variable)\n+        (Ekind (Id) in E_Constant            --  objects\n+                     | E_Variable\n           or else\n-         Ekind_In (Id, E_Abstract_State,      --  overloadable\n-                       E_Entry,\n-                       E_Entry_Family,\n-                       E_Function,\n-                       E_Generic_Function,\n-                       E_Generic_Procedure,\n-                       E_Operator,\n-                       E_Procedure,\n-                       E_Subprogram_Body)\n+         Ekind (Id) in E_Abstract_State      --  overloadable\n+                     | E_Entry\n+                     | E_Entry_Family\n+                     | E_Function\n+                     | E_Generic_Function\n+                     | E_Generic_Procedure\n+                     | E_Operator\n+                     | E_Procedure\n+                     | E_Subprogram_Body\n            or else\n-         Ekind_In (Id, E_Generic_Package,     --  packages\n-                       E_Package,\n-                       E_Package_Body)\n+         Ekind (Id) in E_Generic_Package     --  packages\n+                     | E_Package\n+                     | E_Package_Body\n            or else\n-         Ekind (Id) = E_Void                  --  special purpose\n+         Ekind (Id) = E_Void                 --  special purpose\n            or else\n-         Ekind_In (Id, E_Protected_Body,      --  types\n-                       E_Task_Body)\n+         Ekind (Id) in E_Protected_Body      --  types\n+                     | E_Task_Body\n            or else\n          Is_Type (Id));\n       Set_Flag265 (Id, V);\n@@ -6749,9 +6738,9 @@ package body Einfo is\n \n    procedure Set_Status_Flag_Or_Transient_Decl (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant,\n-                                   E_Loop_Parameter,\n-                                   E_Variable));\n+      pragma Assert (Ekind (Id) in E_Constant\n+                                 | E_Loop_Parameter\n+                                 | E_Variable);\n       Set_Node15 (Id, V);\n    end Set_Status_Flag_Or_Transient_Decl;\n \n@@ -6846,7 +6835,7 @@ package body Einfo is\n \n    procedure Set_Thunk_Entity (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure)\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure\n                        and then Is_Thunk (Id));\n       Set_Node31 (Id, V);\n    end Set_Thunk_Entity;\n@@ -6928,7 +6917,7 @@ package body Einfo is\n \n    procedure Set_Wrapped_Entity (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Procedure)\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure\n                        and then Is_Primitive_Wrapper (Id));\n       Set_Node27 (Id, V);\n    end Set_Wrapped_Entity;\n@@ -7348,7 +7337,7 @@ package body Einfo is\n       end if;\n \n       loop\n-         if Nkind_In (P, N_Selected_Component, N_Expanded_Name)\n+         if Nkind (P) in N_Selected_Component | N_Expanded_Name\n            or else (Nkind (P) = N_Defining_Program_Unit_Name\n                      and then Is_Child_Unit (Id))\n          then\n@@ -7464,7 +7453,7 @@ package body Einfo is\n \n       Comp_Id := First_Entity (Id);\n       while Present (Comp_Id) loop\n-         exit when Ekind_In (Comp_Id, E_Component, E_Discriminant);\n+         exit when Ekind (Comp_Id) in E_Component | E_Discriminant;\n          Next_Entity (Comp_Id);\n       end loop;\n \n@@ -7482,9 +7471,9 @@ package body Einfo is\n       pragma Assert\n         (Is_Generic_Subprogram (Id)\n            or else Is_Overloadable (Id)\n-           or else Ekind_In (Id, E_Entry_Family,\n-                                 E_Subprogram_Body,\n-                                 E_Subprogram_Type));\n+           or else Ekind (Id) in E_Entry_Family\n+                               | E_Subprogram_Body\n+                               | E_Subprogram_Type);\n \n       if Ekind (Id) = E_Enumeration_Literal then\n          return Empty;\n@@ -7523,9 +7512,9 @@ package body Einfo is\n       pragma Assert\n         (Is_Generic_Subprogram (Id)\n            or else Is_Overloadable (Id)\n-           or else Ekind_In (Id, E_Entry_Family,\n-                                 E_Subprogram_Body,\n-                                 E_Subprogram_Type));\n+           or else Ekind (Id) in E_Entry_Family\n+                               | E_Subprogram_Body\n+                               | E_Subprogram_Type);\n \n       if Ekind (Id) = E_Enumeration_Literal then\n          return Empty;\n@@ -8095,7 +8084,7 @@ package body Einfo is\n \n    function Is_Constant_Object (Id : E) return B is\n    begin\n-      return Ekind_In (Id, E_Constant, E_In_Parameter, E_Loop_Parameter);\n+      return Ekind (Id) in E_Constant | E_In_Parameter | E_Loop_Parameter;\n    end Is_Constant_Object;\n \n    -------------------\n@@ -8113,7 +8102,7 @@ package body Einfo is\n \n    function Is_Discriminal (Id : E) return B is\n    begin\n-      return Ekind_In (Id, E_Constant, E_In_Parameter)\n+      return Ekind (Id) in E_Constant | E_In_Parameter\n                and then Present (Discriminal_Link (Id));\n    end Is_Discriminal;\n \n@@ -8175,7 +8164,7 @@ package body Einfo is\n    function Is_Elaboration_Target (Id : Entity_Id) return Boolean is\n    begin\n       return\n-        Ekind_In (Id, E_Constant, E_Package, E_Variable)\n+        Ekind (Id) in E_Constant | E_Package | E_Variable\n           or else Is_Entry        (Id)\n           or else Is_Generic_Unit (Id)\n           or else Is_Subprogram   (Id)\n@@ -8223,7 +8212,7 @@ package body Einfo is\n \n    function Is_Package_Or_Generic_Package (Id : E) return B is\n    begin\n-      return Ekind_In (Id, E_Generic_Package, E_Package);\n+      return Ekind (Id) in E_Generic_Package | E_Package;\n    end Is_Package_Or_Generic_Package;\n \n    ---------------------\n@@ -8241,7 +8230,7 @@ package body Einfo is\n \n    function Is_Prival (Id : E) return B is\n    begin\n-      return Ekind_In (Id, E_Constant, E_Variable)\n+      return Ekind (Id) in E_Constant | E_Variable\n                and then Present (Prival_Link (Id));\n    end Is_Prival;\n \n@@ -8434,9 +8423,9 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Is_Overloadable (Id)\n-          or else Ekind_In (Id, E_Entry_Family,\n-                                E_Subprogram_Body,\n-                                E_Subprogram_Type));\n+          or else Ekind (Id) in E_Entry_Family\n+                              | E_Subprogram_Body\n+                              | E_Subprogram_Type);\n \n       if Ekind (Id) = E_Enumeration_Literal then\n          return Empty;\n@@ -8607,7 +8596,7 @@ package body Einfo is\n    begin\n       Comp_Id := Next_Entity (Id);\n       while Present (Comp_Id) loop\n-         exit when Ekind_In (Comp_Id, E_Component, E_Discriminant);\n+         exit when Ekind (Comp_Id) in E_Component | E_Discriminant;\n          Next_Entity (Comp_Id);\n       end loop;\n \n@@ -8945,9 +8934,9 @@ package body Einfo is\n       then\n          Typ := Full_View (Id);\n \n-      elsif Ekind_In (Id, E_Array_Subtype,\n-                          E_Record_Subtype,\n-                          E_Record_Subtype_With_Private)\n+      elsif Ekind (Id) in E_Array_Subtype\n+                        | E_Record_Subtype\n+                        | E_Record_Subtype_With_Private\n         and then Present (Predicated_Parent (Id))\n       then\n          Typ := Predicated_Parent (Id);\n@@ -11499,7 +11488,7 @@ package body Einfo is\n    begin\n       N := Next_Entity (N);\n       while Present (N) loop\n-         exit when Ekind_In (N, E_Component, E_Discriminant);\n+         exit when Ekind (N) in E_Component | E_Discriminant;\n          N := Next_Entity (N);\n       end loop;\n    end Proc_Next_Component_Or_Discriminant;"}, {"sha": "0f46ab614f790299114ab15176c411f69445a9c2", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -3293,11 +3293,11 @@ package body Errout is\n             exit when Nkind (P) not in N_Subexpr;\n          end loop;\n \n-         if Nkind_In (P, N_Pragma_Argument_Association,\n-                         N_Component_Association,\n-                         N_Discriminant_Association,\n-                         N_Generic_Association,\n-                         N_Parameter_Association)\n+         if Nkind (P) in N_Pragma_Argument_Association\n+                       | N_Component_Association\n+                       | N_Discriminant_Association\n+                       | N_Generic_Association\n+                       | N_Parameter_Association\n          then\n             Set_Error_Posted (Parent (P));\n          end if;"}, {"sha": "168a5923944e034d09bea391dbe62d1a0c4678e1", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -534,7 +534,7 @@ package body Exp_Aggr is\n       --  Strip away any conversions from the expression as they simply\n       --  qualify the real expression.\n \n-      while Nkind_In (Expr, N_Unchecked_Type_Conversion, N_Type_Conversion)\n+      while Nkind (Expr) in N_Unchecked_Type_Conversion | N_Type_Conversion\n       loop\n          Expr := Expression (Expr);\n       end loop;\n@@ -855,8 +855,8 @@ package body Exp_Aggr is\n             Expr : Node_Id := Original_Node (N);\n \n          begin\n-            while Nkind_In (Expr, N_Type_Conversion,\n-                                  N_Unchecked_Type_Conversion)\n+            while Nkind (Expr) in\n+                    N_Type_Conversion | N_Unchecked_Type_Conversion\n             loop\n                Expr := Original_Node (Expression (Expr));\n             end loop;\n@@ -1554,9 +1554,9 @@ package body Exp_Aggr is\n             --  the initialization expression denotes. An unanalyzed function\n             --  call may appear as an identifier or an indexed component.\n \n-            if Nkind_In (Expr, N_Function_Call,\n-                               N_Identifier,\n-                               N_Indexed_Component)\n+            if Nkind (Expr) in N_Function_Call\n+                             | N_Identifier\n+                             | N_Indexed_Component\n               and then not Analyzed (Expr)\n             then\n                Preanalyze_And_Resolve (Expr, Comp_Typ);\n@@ -1737,7 +1737,7 @@ package body Exp_Aggr is\n          --  default initialized components (otherwise Expr_Q is not present).\n \n          if Present (Expr_Q)\n-           and then Nkind_In (Expr_Q, N_Aggregate, N_Extension_Aggregate)\n+           and then Nkind (Expr_Q) in N_Aggregate | N_Extension_Aggregate\n          then\n             --  At this stage the Expression may not have been analyzed yet\n             --  because the array aggregate code has not been updated to use\n@@ -3064,9 +3064,9 @@ package body Exp_Aggr is\n          --  the initialization expression denotes. Unanalyzed function calls\n          --  may appear as identifiers or indexed components.\n \n-         if Nkind_In (Init_Expr, N_Function_Call,\n-                                 N_Identifier,\n-                                 N_Indexed_Component)\n+         if Nkind (Init_Expr) in N_Function_Call\n+                               | N_Identifier\n+                               | N_Indexed_Component\n            and then not Analyzed (Init_Expr)\n          then\n             Preanalyze_And_Resolve (Init_Expr, Comp_Typ);\n@@ -3490,8 +3490,8 @@ package body Exp_Aggr is\n             --  qualified).\n \n             elsif Is_Limited_Type (Etype (Ancestor))\n-              and then Nkind_In (Unqualify (Ancestor), N_Aggregate,\n-                                                       N_Extension_Aggregate)\n+              and then Nkind (Unqualify (Ancestor)) in\n+                         N_Aggregate | N_Extension_Aggregate\n             then\n                Ancestor_Is_Expression := True;\n \n@@ -3523,8 +3523,8 @@ package body Exp_Aggr is\n                --  If the ancestor part is an aggregate, force its full\n                --  expansion, which was delayed.\n \n-               if Nkind_In (Unqualify (Ancestor), N_Aggregate,\n-                                                  N_Extension_Aggregate)\n+               if Nkind (Unqualify (Ancestor)) in\n+                    N_Aggregate | N_Extension_Aggregate\n                then\n                   Set_Analyzed (Ancestor, False);\n                   Set_Analyzed (Expression (Ancestor), False);\n@@ -4783,7 +4783,7 @@ package body Exp_Aggr is\n       Parent_Node : Node_Id;\n \n    begin\n-      pragma Assert (Nkind_In (N, N_Aggregate, N_Extension_Aggregate));\n+      pragma Assert (Nkind (N) in N_Aggregate | N_Extension_Aggregate);\n       pragma Assert (not Is_Static_Dispatch_Table_Aggregate (N));\n       pragma Assert (Is_Record_Type (Typ));\n \n@@ -4897,7 +4897,7 @@ package body Exp_Aggr is\n \n             --  The check just above may have replaced the aggregate with a CE\n \n-            if Nkind_In (N, N_Aggregate, N_Extension_Aggregate) then\n+            if Nkind (N) in N_Aggregate | N_Extension_Aggregate then\n                Target_Expr := New_Copy_Tree (Lhs);\n                Insert_Actions (Parent_Node,\n                  Build_Record_Aggr_Code (N, Typ, Target_Expr));\n@@ -6189,7 +6189,7 @@ package body Exp_Aggr is\n          if Is_Entity_Name (N) then\n             return True;\n \n-         elsif Nkind_In (N, N_Explicit_Dereference, N_Selected_Component)\n+         elsif Nkind (N) in N_Explicit_Dereference | N_Selected_Component\n            and then Safe_Left_Hand_Side (Prefix (N))\n          then\n             return True;\n@@ -6701,7 +6701,7 @@ package body Exp_Aggr is\n          if Needs_Finalization (Typ)\n            and then Is_Entity_Name (Target)\n            and then Present (Entity (Target))\n-           and then Ekind_In (Entity (Target), E_Constant, E_Variable)\n+           and then Ekind (Entity (Target)) in E_Constant | E_Variable\n          then\n             Set_Last_Aggregate_Assignment (Entity (Target), Last (Aggr_Code));\n          end if;\n@@ -8099,8 +8099,8 @@ package body Exp_Aggr is\n       begin\n          Aggr := N;\n          while Present (Parent (Aggr))\n-           and then Nkind_In (Parent (Aggr), N_Aggregate,\n-                                             N_Component_Association)\n+           and then Nkind (Parent (Aggr)) in\n+                      N_Aggregate | N_Component_Association\n          loop\n             Aggr := Parent (Aggr);\n          end loop;\n@@ -8146,8 +8146,8 @@ package body Exp_Aggr is\n       --  aggregates for C++ imported types must be expanded.\n \n       elsif Ada_Version >= Ada_2005 and then Is_Limited_View (Typ) then\n-         if not Nkind_In (Parent (N), N_Component_Association,\n-                                      N_Object_Declaration)\n+         if Nkind (Parent (N)) not in\n+              N_Component_Association | N_Object_Declaration\n          then\n             Convert_To_Assignments (N, Typ);\n \n@@ -8257,7 +8257,7 @@ package body Exp_Aggr is\n    begin\n       R := Get_Referenced_Object (N);\n \n-      while Nkind_In (R, N_Indexed_Component, N_Selected_Component, N_Slice)\n+      while Nkind (R) in N_Indexed_Component | N_Selected_Component | N_Slice\n       loop\n          R := Get_Referenced_Object (Prefix (R));\n       end loop;\n@@ -8279,7 +8279,7 @@ package body Exp_Aggr is\n       Expr  : Node_Id;\n \n    begin\n-      pragma Assert (Nkind_In (N, N_Aggregate, N_Extension_Aggregate));\n+      pragma Assert (Nkind (N) in N_Aggregate | N_Extension_Aggregate);\n \n       if No (Comps) then\n          return False;\n@@ -8307,7 +8307,7 @@ package body Exp_Aggr is\n          Expr := Expression (C);\n \n          if Present (Expr)\n-           and then Nkind_In (Expr, N_Aggregate, N_Extension_Aggregate)\n+           and then Nkind (Expr) in N_Aggregate | N_Extension_Aggregate\n            and then Has_Default_Init_Comps (Expr)\n          then\n             return True;\n@@ -8360,7 +8360,7 @@ package body Exp_Aggr is\n          Kind := Nkind (Node);\n       end if;\n \n-      if not Nkind_In (Kind, N_Aggregate, N_Extension_Aggregate) then\n+      if Kind not in N_Aggregate | N_Extension_Aggregate then\n          return False;\n       else\n          return Expansion_Delayed (Node);\n@@ -8532,7 +8532,7 @@ package body Exp_Aggr is\n       if Needs_Finalization (Typ)\n         and then Is_Entity_Name (Target)\n         and then Present (Entity (Target))\n-        and then Ekind_In (Entity (Target), E_Constant, E_Variable)\n+        and then Ekind (Entity (Target)) in E_Constant | E_Variable\n       then\n          Set_Last_Aggregate_Assignment (Entity (Target), Last (Aggr_Code));\n       end if;\n@@ -8576,13 +8576,13 @@ package body Exp_Aggr is\n       function Aggr_Context (N : Node_Id) return Node_Id is\n          Result : Node_Id := Parent (N);\n       begin\n-         if Nkind_In (Result, N_Qualified_Expression,\n-                              N_Type_Conversion,\n-                              N_Unchecked_Type_Conversion,\n-                              N_If_Expression,\n-                              N_Case_Expression,\n-                              N_Component_Association,\n-                              N_Aggregate)\n+         if Nkind (Result) in N_Qualified_Expression\n+                            | N_Type_Conversion\n+                            | N_Unchecked_Type_Conversion\n+                            | N_If_Expression\n+                            | N_Case_Expression\n+                            | N_Component_Association\n+                            | N_Aggregate\n          then\n             Result := Aggr_Context (Result);\n          end if;\n@@ -9370,7 +9370,7 @@ package body Exp_Aggr is\n \n       function Is_Static_Component (Nod : Node_Id) return Boolean is\n       begin\n-         if Nkind_In (Nod, N_Integer_Literal, N_Real_Literal) then\n+         if Nkind (Nod) in N_Integer_Literal | N_Real_Literal then\n             return True;\n \n          elsif Is_Entity_Name (Nod)"}, {"sha": "855aa29c4d4aa955f1b5d52905e266b68e162f02", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -533,10 +533,7 @@ package body Exp_Attr is\n          --  Comes_From_Source is not correct because this will eliminate the\n          --  components within the corresponding record of a protected type.\n \n-         if Nam_In (Field_Nam, Name_uObject,\n-                               Name_uParent,\n-                               Name_uTag)\n-         then\n+         if Field_Nam in Name_uObject | Name_uParent | Name_uTag then\n             null;\n \n          --  Do not process fields without any scalar components\n@@ -2030,8 +2027,8 @@ package body Exp_Attr is\n \n       if Is_Protected_Self_Reference (Pref)\n         and then not\n-          (Nkind_In (Parent (N), N_Index_Or_Discriminant_Constraint,\n-                                 N_Discriminant_Association)\n+          (Nkind (Parent (N)) in N_Index_Or_Discriminant_Constraint\n+                               | N_Discriminant_Association\n             and then Nkind (Parent (Parent (Parent (Parent (N))))) =\n                                                       N_Component_Definition)\n \n@@ -2100,9 +2097,9 @@ package body Exp_Attr is\n \n             begin\n                Obj_Name := N;\n-               while Nkind_In (Obj_Name, N_Selected_Component,\n-                                         N_Indexed_Component,\n-                                         N_Slice)\n+               while Nkind (Obj_Name) in N_Selected_Component\n+                                       | N_Indexed_Component\n+                                       | N_Slice\n                loop\n                   Obj_Name := Prefix (Obj_Name);\n                end loop;\n@@ -2270,7 +2267,7 @@ package body Exp_Attr is\n \n                         begin\n                            Subp := Current_Scope;\n-                           while Ekind_In (Subp, E_Loop, E_Block) loop\n+                           while Ekind (Subp) in E_Loop | E_Block loop\n                               Subp := Scope (Subp);\n                            end loop;\n \n@@ -7666,7 +7663,7 @@ package body Exp_Attr is\n          Cnam := Name_Last;\n       end if;\n \n-      if not Nkind_In (P, N_Assignment_Statement, N_Object_Declaration)\n+      if Nkind (P) not in N_Assignment_Statement | N_Object_Declaration\n         or else not Suppress_Assignment_Checks (P)\n       then\n          Insert_Action (N,"}, {"sha": "122a40f519942d665cf4672f9b820c06b83a996c", "filename": "gcc/ada/exp_cg.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_cg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_cg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_cg.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -268,7 +268,7 @@ package body Exp_CG is\n             return True;\n \n          elsif not Has_Fully_Qualified_Name (E) then\n-            if Nam_In (Chars (E), Name_uSize, Name_uAlignment, Name_uAssign)\n+            if Chars (E) in Name_uSize | Name_uAlignment | Name_uAssign\n               or else\n                 (Chars (E) = Name_Op_Eq\n                   and then Etype (First_Formal (E)) = Etype (Last_Formal (E)))"}, {"sha": "abc91a2f131894df58c535323174cf8b945abefd", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -1426,9 +1426,9 @@ package body Exp_Ch11 is\n       --  objects of controlled types, for example. We do not want to clean up\n       --  the return object.\n \n-      if not Nkind_In (Parent (N), N_Accept_Statement,\n-                                   N_Extended_Return_Statement,\n-                                   N_Package_Body)\n+      if Nkind (Parent (N)) not in N_Accept_Statement\n+                                 | N_Extended_Return_Statement\n+                                 | N_Package_Body\n         and then not Delay_Cleanups (Current_Scope)\n         and then not Is_Thunk (Current_Scope)\n       then"}, {"sha": "ff1029cb5f771683ded5c5ac74b554af0a7af4dd", "filename": "gcc/ada/exp_ch2.adb", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch2.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -160,11 +160,9 @@ package body Exp_Ch2 is\n \n          and then not (Nkind (Parent (N)) = N_Attribute_Reference\n                         and then\n-                          (Nam_In (Attribute_Name (Parent (N)),\n-                                   Name_Asm_Input,\n-                                   Name_Asm_Output)\n+                          (Attribute_Name (Parent (N)) in Name_Asm_Input\n+                                                        | Name_Asm_Output\n                             or else Prefix (Parent (N)) = N))\n-\n       then\n          --  Case of Current_Value is a compile time known value\n \n@@ -406,7 +404,7 @@ package body Exp_Ch2 is\n       --  Set Atomic_Sync_Required if necessary for atomic variable. Note that\n       --  this processing does NOT apply to Volatile_Full_Access variables.\n \n-      if Nkind_In (N, N_Identifier, N_Expanded_Name)\n+      if Nkind (N) in N_Identifier | N_Expanded_Name\n         and then Ekind (E) = E_Variable\n         and then (Is_Atomic (E) or else Is_Atomic (Etype (E)))\n       then\n@@ -512,8 +510,8 @@ package body Exp_Ch2 is\n          --  ??? passing a formal as actual for a mode IN formal is\n          --  considered as an assignment?\n \n-         if Nkind_In (Parent (N), N_Procedure_Call_Statement,\n-                                  N_Entry_Call_Statement)\n+         if Nkind (Parent (N)) in\n+              N_Procedure_Call_Statement | N_Entry_Call_Statement\n            or else (Nkind (Parent (N)) = N_Assignment_Statement\n                       and then N = Name (Parent (N)))\n          then\n@@ -529,9 +527,8 @@ package body Exp_Ch2 is\n          --  which case there is an implicit dereference, and the formal itself\n          --  is not being assigned to).\n \n-         elsif Nkind_In (Parent (N), N_Selected_Component,\n-                                     N_Indexed_Component,\n-                                     N_Slice)\n+         elsif Nkind (Parent (N)) in\n+                 N_Selected_Component | N_Indexed_Component | N_Slice\n            and then N = Prefix (Parent (N))\n            and then not Is_Access_Type (Etype (N))\n            and then In_Assignment_Context (Parent (N))\n@@ -748,7 +745,7 @@ package body Exp_Ch2 is\n    begin\n       --  Simple reference case\n \n-      if Nkind_In (N, N_Identifier, N_Expanded_Name) then\n+      if Nkind (N) in N_Identifier | N_Expanded_Name then\n          if Is_Formal (Entity (N)) then\n             return Entity (N);\n "}, {"sha": "0b601c56213ad99cc1d9da9928acba33782d0324", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -1976,8 +1976,8 @@ package body Exp_Ch3 is\n          --  traversing the expression. ???\n \n          if Kind = N_Attribute_Reference\n-           and then Nam_In (Attribute_Name (Default), Name_Unchecked_Access,\n-                                                      Name_Unrestricted_Access)\n+           and then Attribute_Name (Default) in Name_Unchecked_Access\n+                                              | Name_Unrestricted_Access\n            and then Is_Entity_Name (Prefix (Default))\n            and then Is_Type (Entity (Prefix (Default)))\n            and then Entity (Prefix (Default)) = Rec_Type\n@@ -2040,7 +2040,7 @@ package body Exp_Ch3 is\n          end if;\n \n          if Needs_Finalization (Typ)\n-           and then not (Nkind_In (Kind, N_Aggregate, N_Extension_Aggregate))\n+           and then Kind not in N_Aggregate | N_Extension_Aggregate\n            and then not Is_Build_In_Place_Function_Call (Exp)\n          then\n             Adj_Call :=\n@@ -3243,10 +3243,10 @@ package body Exp_Ch3 is\n \n                elsif Ekind (Scope (Id)) = E_Record_Type\n                  and then Present (Corresponding_Concurrent_Type (Scope (Id)))\n-                 and then Nam_In (Chars (Id), Name_uCPU,\n-                                              Name_uDispatching_Domain,\n-                                              Name_uPriority,\n-                                              Name_uSecondary_Stack_Size)\n+                 and then Chars (Id) in Name_uCPU\n+                                      | Name_uDispatching_Domain\n+                                      | Name_uPriority\n+                                      | Name_uSecondary_Stack_Size\n                then\n                   declare\n                      Exp   : Node_Id;\n@@ -6736,9 +6736,9 @@ package body Exp_Ch3 is\n         and then Building_Static_Dispatch_Tables\n         and then Is_Library_Level_Entity (Def_Id)\n         and then Is_Library_Level_Tagged_Type (Base_Typ)\n-        and then Ekind_In (Base_Typ, E_Record_Type,\n-                                     E_Protected_Type,\n-                                     E_Task_Type)\n+        and then Ekind (Base_Typ) in E_Record_Type\n+                                   | E_Protected_Type\n+                                   | E_Task_Type\n         and then not Has_Dispatch_Table (Base_Typ)\n       then\n          declare\n@@ -6789,7 +6789,7 @@ package body Exp_Ch3 is\n         and then not Restriction_Active (No_Secondary_Stack)\n         and then (Restriction_Active (No_Implicit_Heap_Allocations)\n           or else Restriction_Active (No_Implicit_Task_Allocations))\n-        and then not (Ekind_In (Ekind (Typ), E_Array_Type, E_Array_Subtype)\n+        and then not (Ekind (Typ) in E_Array_Type | E_Array_Subtype\n                       and then (Has_Init_Expression (N)))\n       then\n          declare\n@@ -7597,9 +7597,9 @@ package body Exp_Ch3 is\n \n       --  Do not duplicate the work of Process_Range_Expr_In_Decl in Sem_Ch3\n \n-      if Nkind_In (Parent (N), N_Constrained_Array_Definition, N_Slice)\n-        and then Nkind (Parent (Parent (N))) /= N_Full_Type_Declaration\n-        and then Nkind (Parent (Parent (N))) /= N_Object_Declaration\n+      if Nkind (Parent (N)) in N_Constrained_Array_Definition | N_Slice\n+        and then Nkind (Parent (Parent (N))) not in\n+                   N_Full_Type_Declaration | N_Object_Declaration\n       then\n          Apply_Range_Check (Ran, Typ);\n       end if;\n@@ -8032,7 +8032,7 @@ package body Exp_Ch3 is\n \n       --  See GNAT Pool packages in the Run-Time for more details\n \n-      elsif Ekind_In (Def_Id, E_Access_Type, E_General_Access_Type) then\n+      elsif Ekind (Def_Id) in E_Access_Type | E_General_Access_Type then\n          declare\n             Loc        : constant Source_Ptr := Sloc (N);\n             Desig_Type : constant Entity_Id  := Designated_Type (Def_Id);\n@@ -8698,7 +8698,7 @@ package body Exp_Ch3 is\n          --  If the initial value is null or an aggregate, qualify it with the\n          --  underlying type in order to provide a proper context.\n \n-         if Nkind_In (Expr, N_Aggregate, N_Null) then\n+         if Nkind (Expr) in N_Aggregate | N_Null then\n             Expr :=\n               Make_Qualified_Expression (Loc,\n                 Subtype_Mark => New_Occurrence_Of (Under_Typ, Loc),"}, {"sha": "30824c69fea19b687eb22e215a416983818f69d1", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 44, "deletions": 50, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -4149,7 +4149,7 @@ package body Exp_Ch4 is\n          --  we avoid never-ending loops expanding them, and we also ensure\n          --  the back end never receives nonbinary modular type expressions.\n \n-         if Nkind_In (Nkind (N), N_Op_And, N_Op_Or, N_Op_Xor) then\n+         if Nkind (N) in N_Op_And | N_Op_Or | N_Op_Xor then\n             Set_Left_Opnd (Op_Expr,\n               Unchecked_Convert_To (Standard_Unsigned,\n                 New_Copy_Tree (Left_Opnd (N))));\n@@ -4532,11 +4532,11 @@ package body Exp_Ch4 is\n          --  lifetime of the object must be associated with the named access\n          --  type. Use the finalization-related attributes of this type.\n \n-         if Nkind_In (Parent (N), N_Type_Conversion,\n-                                  N_Unchecked_Type_Conversion)\n-           and then Ekind_In (Etype (Parent (N)), E_Access_Subtype,\n-                                                  E_Access_Type,\n-                                                  E_General_Access_Type)\n+         if Nkind (Parent (N)) in N_Type_Conversion\n+                                | N_Unchecked_Type_Conversion\n+           and then Ekind (Etype (Parent (N))) in E_Access_Subtype\n+                                                | E_Access_Type\n+                                                | E_General_Access_Type\n          then\n             Rel_Typ := Etype (Parent (N));\n          else\n@@ -5084,8 +5084,8 @@ package body Exp_Ch4 is\n                                 New_Occurrence_Of\n                                   (Entity (Nam), Sloc (Nam)), T);\n \n-                        elsif Nkind_In (Nam, N_Indexed_Component,\n-                                             N_Selected_Component)\n+                        elsif Nkind (Nam) in N_Indexed_Component\n+                                           | N_Selected_Component\n                           and then Is_Entity_Name (Prefix (Nam))\n                         then\n                            Decls :=\n@@ -5355,7 +5355,7 @@ package body Exp_Ch4 is\n       --  to which it applies has a static predicate aspect, do not expand,\n       --  because it will be converted to the proper predicate form later.\n \n-      if Ekind_In (Current_Scope, E_Function, E_Procedure)\n+      if Ekind (Current_Scope) in E_Function | E_Procedure\n         and then Is_Predicate_Function (Current_Scope)\n       then\n          In_Predicate := True;\n@@ -6224,8 +6224,8 @@ package body Exp_Ch4 is\n                --  to consider???\n \n                loop\n-                  if Nkind_In (Obj_Ref, N_Type_Conversion,\n-                                        N_Unchecked_Type_Conversion)\n+                  if Nkind (Obj_Ref) in\n+                       N_Type_Conversion | N_Unchecked_Type_Conversion\n                   then\n                      Obj_Ref := Expression (Obj_Ref);\n                   else\n@@ -7081,9 +7081,9 @@ package body Exp_Ch4 is\n                return;\n \n             elsif Nkind (Parnt) = N_Attribute_Reference\n-              and then Nam_In (Attribute_Name (Parnt), Name_Address,\n-                                                       Name_Bit,\n-                                                       Name_Size)\n+              and then Attribute_Name (Parnt) in Name_Address\n+                                               | Name_Bit\n+                                               | Name_Size\n               and then Prefix (Parnt) = Child\n             then\n                return;\n@@ -8440,13 +8440,12 @@ package body Exp_Ch4 is\n       --  records because there may be padding or undefined fields.\n \n       elsif Unnest_Subprogram_Mode\n-        and then Ekind_In (Typl, E_Class_Wide_Type,\n-                                 E_Class_Wide_Subtype,\n-                                 E_Access_Subprogram_Type,\n-                                 E_Access_Protected_Subprogram_Type,\n-                                 E_Anonymous_Access_Protected_Subprogram_Type,\n-                                 E_Access_Subprogram_Type,\n-                                 E_Exception_Type)\n+        and then Ekind (Typl) in E_Class_Wide_Type\n+                               | E_Class_Wide_Subtype\n+                               | E_Access_Subprogram_Type\n+                               | E_Access_Protected_Subprogram_Type\n+                               | E_Anonymous_Access_Protected_Subprogram_Type\n+                               | E_Exception_Type\n         and then Present (Equivalent_Type (Typl))\n         and then Is_Record_Type (Equivalent_Type (Typl))\n       then\n@@ -8759,7 +8758,7 @@ package body Exp_Ch4 is\n          --  too tricky to combine the overflow check at the parent level.\n \n          if not Ovflo\n-           and then Nkind_In (Parent (N), N_Op_Divide, N_Op_Multiply)\n+           and then Nkind (Parent (N)) in N_Op_Divide | N_Op_Multiply\n          then\n             declare\n                P : constant Node_Id := Parent (N);\n@@ -9792,13 +9791,12 @@ package body Exp_Ch4 is\n \n       if Is_Elementary_Type (Typ)\n         and then Sloc (Entity (N)) = Standard_Location\n-        and then not (Ekind_In (Typ, E_Class_Wide_Type,\n-                                E_Class_Wide_Subtype,\n-                                E_Access_Subprogram_Type,\n-                                E_Access_Protected_Subprogram_Type,\n-                                E_Anonymous_Access_Protected_Subprogram_Type,\n-                                E_Access_Subprogram_Type,\n-                                E_Exception_Type)\n+        and then not (Ekind (Typ) in E_Class_Wide_Type\n+                              | E_Class_Wide_Subtype\n+                              | E_Access_Subprogram_Type\n+                              | E_Access_Protected_Subprogram_Type\n+                              | E_Anonymous_Access_Protected_Subprogram_Type\n+                              | E_Exception_Type\n                         and then Present (Equivalent_Type (Typ))\n                         and then Is_Record_Type (Equivalent_Type (Typ)))\n       then\n@@ -9978,7 +9976,7 @@ package body Exp_Ch4 is\n \n          --  Special case the negation of a binary operation\n \n-         elsif Nkind_In (Opnd, N_Op_And, N_Op_Or, N_Op_Xor)\n+         elsif Nkind (Opnd) in N_Op_And | N_Op_Or | N_Op_Xor\n            and then Safe_In_Place_Array_Op\n                       (Name (Parent (N)), Left_Opnd (Opnd), Right_Opnd (Opnd))\n          then\n@@ -11153,9 +11151,9 @@ package body Exp_Ch4 is\n             --  since these are additional cases that do can appear on\n             --  procedure actuals.\n \n-            elsif Nkind_In (Par, N_Type_Conversion,\n-                                 N_Parameter_Association,\n-                                 N_Qualified_Expression)\n+            elsif Nkind (Par) in N_Type_Conversion\n+                               | N_Parameter_Association\n+                               | N_Qualified_Expression\n             then\n                Par := Parent (Par);\n \n@@ -11885,7 +11883,7 @@ package body Exp_Ch4 is\n \n       function Has_Extra_Accessibility (Id : Entity_Id) return Boolean is\n       begin\n-         if Is_Formal (Id) or else Ekind_In (Id, E_Constant, E_Variable) then\n+         if Is_Formal (Id) or else Ekind (Id) in E_Constant | E_Variable then\n             return Present (Effective_Extra_Accessibility (Id));\n          else\n             return False;\n@@ -12135,9 +12133,9 @@ package body Exp_Ch4 is\n                       or else Attribute_Name (Original_Node (N)) = Name_Access)\n          then\n             if not Comes_From_Source (N)\n-              and then Nkind_In (Parent (N), N_Function_Call,\n-                                             N_Parameter_Association,\n-                                             N_Procedure_Call_Statement)\n+              and then Nkind (Parent (N)) in N_Function_Call\n+                                           | N_Parameter_Association\n+                                           | N_Procedure_Call_Statement\n               and then Is_Interface (Designated_Type (Target_Type))\n               and then Is_Class_Wide_Type (Designated_Type (Target_Type))\n             then\n@@ -12752,7 +12750,7 @@ package body Exp_Ch4 is\n \n             exit when No (Comp);\n \n-            exit when Ekind_In (Comp, E_Discriminant, E_Component)\n+            exit when Ekind (Comp) in E_Discriminant | E_Component\n               and then not (\n \n               --  Skip inherited components\n@@ -13530,13 +13528,9 @@ package body Exp_Ch4 is\n            --  value and unary negation. Unary \"+\" is omitted since it is a\n            --  no-op and thus can't overflow.\n \n-           and then Nkind_In (Operand, N_Op_Abs,\n-                                       N_Op_Add,\n-                                       N_Op_Divide,\n-                                       N_Op_Expon,\n-                                       N_Op_Minus,\n-                                       N_Op_Multiply,\n-                                       N_Op_Subtract);\n+           and then Nkind (Operand) in\n+                      N_Op_Abs   | N_Op_Add      | N_Op_Divide | N_Op_Expon |\n+                      N_Op_Minus | N_Op_Multiply | N_Op_Subtract;\n    end Integer_Promotion_Possible;\n \n    ------------------------------\n@@ -14746,9 +14740,9 @@ package body Exp_Ch4 is\n       --  transient object.\n \n    begin\n-      pragma Assert (Nkind_In (Expr, N_Case_Expression,\n-                                     N_Expression_With_Actions,\n-                                     N_If_Expression));\n+      pragma Assert (Nkind (Expr) in N_Case_Expression\n+                                   | N_Expression_With_Actions\n+                                   | N_If_Expression);\n \n       --  When the context is a Boolean evaluation, all three nodes capture the\n       --  result of their computation in a local temporary:\n@@ -14815,7 +14809,7 @@ package body Exp_Ch4 is\n       --      <or>\n       --    Hook := Obj_Id'Unrestricted_Access;\n \n-      if Ekind_In (Obj_Id, E_Constant, E_Variable)\n+      if Ekind (Obj_Id) in E_Constant | E_Variable\n         and then Present (Last_Aggregate_Assignment (Obj_Id))\n       then\n          Hook_Insert := Last_Aggregate_Assignment (Obj_Id);\n@@ -14949,7 +14943,7 @@ package body Exp_Ch4 is\n          elsif Is_Entity_Name (Op) then\n             return Is_Unaliased (Op);\n \n-         elsif Nkind_In (Op, N_Indexed_Component, N_Selected_Component) then\n+         elsif Nkind (Op) in N_Indexed_Component | N_Selected_Component then\n             return Is_Unaliased (Prefix (Op));\n \n          elsif Nkind (Op) = N_Slice then"}, {"sha": "309297b59098b9cadf453dbeb7a3593a555be801", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -1452,17 +1452,14 @@ package body Exp_Ch5 is\n       L_Prefix_Comp : constant Boolean :=\n         --  True if the left-hand side is a slice of a component or slice\n         Nkind (Name (N)) = N_Slice\n-        and then Nkind_In (Prefix (Name (N)),\n-                           N_Selected_Component,\n-                           N_Indexed_Component,\n-                           N_Slice);\n+          and then Nkind (Prefix (Name (N))) in\n+                     N_Selected_Component | N_Indexed_Component | N_Slice;\n       R_Prefix_Comp : constant Boolean :=\n         --  Likewise for the right-hand side\n         Nkind (Expression (N)) = N_Slice\n-        and then Nkind_In (Prefix (Expression (N)),\n-                           N_Selected_Component,\n-                           N_Indexed_Component,\n-                           N_Slice);\n+          and then Nkind (Prefix (Expression (N))) in\n+                     N_Selected_Component | N_Indexed_Component | N_Slice;\n+\n    begin\n       --  Determine whether Copy_Bitfield is appropriate (will work, and will\n       --  be more efficient than component-by-component copy). Copy_Bitfield\n@@ -1899,8 +1896,8 @@ package body Exp_Ch5 is\n          --  We know the underlying type is a record, but its current view\n          --  may be private. We must retrieve the usable record declaration.\n \n-         if Nkind_In (Decl, N_Private_Type_Declaration,\n-                            N_Private_Extension_Declaration)\n+         if Nkind (Decl) in N_Private_Type_Declaration\n+                          | N_Private_Extension_Declaration\n            and then Present (Full_View (R_Typ))\n          then\n             RDef := Type_Definition (Declaration_Node (Full_View (R_Typ)));\n@@ -2260,7 +2257,7 @@ package body Exp_Ch5 is\n       --  Since P is going to be evaluated more than once, any subscripts\n       --  in P must have their evaluation forced.\n \n-      if Nkind_In (Lhs, N_Indexed_Component, N_Selected_Component)\n+      if Nkind (Lhs) in N_Indexed_Component | N_Selected_Component\n         and then Is_Ref_To_Bit_Packed_Array (Prefix (Lhs))\n       then\n          declare\n@@ -2296,8 +2293,7 @@ package body Exp_Ch5 is\n             loop\n                Set_Analyzed (Exp, False);\n \n-               if Nkind_In (Exp, N_Indexed_Component,\n-                                 N_Selected_Component)\n+               if Nkind (Exp) in N_Indexed_Component | N_Selected_Component\n                then\n                   Exp := Prefix (Exp);\n                else\n@@ -2865,8 +2861,8 @@ package body Exp_Ch5 is\n             Actual_Rhs : Node_Id := Rhs;\n \n          begin\n-            while Nkind_In (Actual_Rhs, N_Type_Conversion,\n-                                        N_Qualified_Expression)\n+            while Nkind (Actual_Rhs) in\n+                    N_Type_Conversion | N_Qualified_Expression\n             loop\n                Actual_Rhs := Expression (Actual_Rhs);\n             end loop;\n@@ -2940,7 +2936,7 @@ package body Exp_Ch5 is\n                --  Skip this if left-hand side is an array or record component\n                --  and elementary component validity checks are suppressed.\n \n-               if Nkind_In (Lhs, N_Selected_Component, N_Indexed_Component)\n+               if Nkind (Lhs) in N_Selected_Component | N_Indexed_Component\n                  and then not Validity_Check_Components\n                then\n                   null;\n@@ -3791,9 +3787,9 @@ package body Exp_Ch5 is\n                      Else_Expr : constant Node_Id := Expression (Else_Stm);\n \n                   begin\n-                     if Nkind_In (Then_Expr, N_Expanded_Name, N_Identifier)\n+                     if Nkind (Then_Expr) in N_Expanded_Name | N_Identifier\n                           and then\n-                        Nkind_In (Else_Expr, N_Expanded_Name, N_Identifier)\n+                        Nkind (Else_Expr) in N_Expanded_Name | N_Identifier\n                      then\n                         if Entity (Then_Expr) = Standard_True\n                           and then Entity (Else_Expr) = Standard_False"}, {"sha": "b8efa5f399098e55e5b0a6b6a78bc385fda064df", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 70, "deletions": 74, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -661,8 +661,8 @@ package body Exp_Ch6 is\n         and then not Scope_Suppress.Suppress (Accessibility_Check)\n         and then\n           (Is_Class_Wide_Type (Etype (Exp))\n-            or else Nkind_In (Exp, N_Type_Conversion,\n-                                   N_Unchecked_Type_Conversion)\n+            or else Nkind (Exp) in\n+                      N_Type_Conversion | N_Unchecked_Type_Conversion\n             or else (Is_Entity_Name (Exp)\n                       and then Is_Formal (Entity (Exp)))\n             or else Scope_Depth (Enclosing_Dynamic_Scope (Etype (Exp))) >\n@@ -1070,9 +1070,9 @@ package body Exp_Ch6 is\n       Actual : Node_Id;\n \n    begin\n-      pragma Assert (Nkind_In (Subp_Call, N_Entry_Call_Statement,\n-                                          N_Function_Call,\n-                                          N_Procedure_Call_Statement));\n+      pragma Assert (Nkind (Subp_Call) in N_Entry_Call_Statement\n+                                        | N_Function_Call\n+                                        | N_Procedure_Call_Statement);\n \n       Formal := First_Formal_With_Extras (Subp_Id);\n       Actual := First_Actual (Subp_Call);\n@@ -1106,9 +1106,9 @@ package body Exp_Ch6 is\n       Actual : Node_Id;\n \n    begin\n-      pragma Assert (Nkind_In (Subp_Call, N_Entry_Call_Statement,\n-                                          N_Function_Call,\n-                                          N_Procedure_Call_Statement));\n+      pragma Assert (Nkind (Subp_Call) in N_Entry_Call_Statement\n+                                        | N_Function_Call\n+                                        | N_Procedure_Call_Statement);\n \n       Formal := First_Formal_With_Extras (Subp_Id);\n       Actual := First_Actual (Subp_Call);\n@@ -2180,7 +2180,7 @@ package body Exp_Ch6 is\n          loop\n             Set_Analyzed (Pfx, False);\n             exit when\n-              not Nkind_In (Pfx, N_Selected_Component, N_Indexed_Component);\n+              Nkind (Pfx) not in N_Selected_Component | N_Indexed_Component;\n             Pfx := Prefix (Pfx);\n          end loop;\n       end Reset_Packed_Prefix;\n@@ -2603,8 +2603,8 @@ package body Exp_Ch6 is\n                   --  root type.\n \n                   elsif\n-                    Nkind_In (Parent (Subp), N_Private_Extension_Declaration,\n-                                             N_Full_Type_Declaration)\n+                    Nkind (Parent (Subp)) in N_Private_Extension_Declaration\n+                                           | N_Full_Type_Declaration\n                   then\n                      Subp_Decl := Parent (Subp);\n \n@@ -2678,9 +2678,9 @@ package body Exp_Ch6 is\n             (Access_Subprogram_Wrapper (Etype (Name (N))));\n \n    begin\n-      pragma Assert (Nkind_In (N, N_Entry_Call_Statement,\n-                                  N_Function_Call,\n-                                  N_Procedure_Call_Statement));\n+      pragma Assert (Nkind (N) in N_Entry_Call_Statement\n+                                | N_Function_Call\n+                                | N_Procedure_Call_Statement);\n \n       --  Check that this is not the call in the body of the wrapper.\n \n@@ -3287,7 +3287,7 @@ package body Exp_Ch6 is\n \n       if Ada_Version >= Ada_2012\n         and then\n-           Nkind_In (Call_Node, N_Procedure_Call_Statement, N_Function_Call)\n+           Nkind (Call_Node) in N_Procedure_Call_Statement | N_Function_Call\n         and then Present (Parameter_Associations (Call_Node))\n       then\n          Expand_Put_Call_With_Symbol (Call_Node);\n@@ -3587,8 +3587,8 @@ package body Exp_Ch6 is\n                   --  as out parameter actuals on calls to stream procedures.\n \n                   Act_Prev := Prev;\n-                  while Nkind_In (Act_Prev, N_Type_Conversion,\n-                                            N_Unchecked_Type_Conversion)\n+                  while Nkind (Act_Prev) in N_Type_Conversion\n+                                          | N_Unchecked_Type_Conversion\n                   loop\n                      Act_Prev := Expression (Act_Prev);\n                   end loop;\n@@ -3670,9 +3670,7 @@ package body Exp_Ch6 is\n             --  constant declaration defines the accessibility level of X'Old\".\n \n             elsif Nkind (Prev_Orig) = N_Attribute_Reference\n-              and then Nam_In (Attribute_Name (Prev_Orig),\n-                               Name_Old,\n-                               Name_Loop_Entry)\n+              and then Attribute_Name (Prev_Orig) in Name_Old | Name_Loop_Entry\n               and then Is_Entity_Name (Prev)\n               and then Present (Entity (Prev))\n               and then Is_Object (Entity (Prev))\n@@ -3935,9 +3933,8 @@ package body Exp_Ch6 is\n \n                   when others =>\n                      if Nkind (Prev) = N_Expression_With_Actions\n-                       and then Nkind_In (Original_Node (Prev),\n-                                           N_If_Expression,\n-                                           N_Case_Expression)\n+                       and then Nkind (Original_Node (Prev)) in\n+                                  N_If_Expression | N_Case_Expression\n                      then\n                         declare\n                            Decl : Node_Id;\n@@ -3978,10 +3975,9 @@ package body Exp_Ch6 is\n                                  if Nkind (Expression (Assn)) =\n                                       N_Expression_With_Actions\n                                    and then\n-                                     Nkind_In\n-                                       (Original_Node (Expression (Assn)),\n-                                         N_Case_Expression,\n-                                         N_If_Expression)\n+                                     Nkind\n+                                       (Original_Node (Expression (Assn))) in\n+                                         N_Case_Expression | N_If_Expression\n                                  then\n                                     Insert_Level_Assign (Expression (Assn));\n \n@@ -4014,8 +4010,8 @@ package body Exp_Ch6 is\n \n                               Cond := First (Actions (Branch));\n                               loop\n-                                 exit when Nkind_In (Cond, N_Case_Statement,\n-                                                           N_If_Statement);\n+                                 exit when Nkind (Cond) in\n+                                             N_Case_Statement | N_If_Statement;\n \n                                  Next (Cond);\n \n@@ -4199,7 +4195,7 @@ package body Exp_Ch6 is\n             then\n                null;\n \n-            elsif Nkind_In (Prev, N_Allocator, N_Attribute_Reference) then\n+            elsif Nkind (Prev) in N_Allocator | N_Attribute_Reference then\n                null;\n \n             else\n@@ -4231,8 +4227,8 @@ package body Exp_Ch6 is\n \n                begin\n                   Nod := Actual;\n-                  while Nkind_In (Nod, N_Indexed_Component,\n-                                       N_Selected_Component)\n+                  while Nkind (Nod) in\n+                    N_Indexed_Component | N_Selected_Component\n                   loop\n                      Set_Analyzed (Nod, False);\n                      Nod := Prefix (Nod);\n@@ -4371,7 +4367,7 @@ package body Exp_Ch6 is\n       --  \"accessibility level determined by the point of call\" (AI05-0234)\n       --  passed in to it, then pass it in.\n \n-      if Ekind_In (Subp, E_Function, E_Operator, E_Subprogram_Type)\n+      if Ekind (Subp) in E_Function | E_Operator | E_Subprogram_Type\n         and then\n           Present (Extra_Accessibility_Of_Result (Ultimate_Alias (Subp)))\n       then\n@@ -4666,7 +4662,7 @@ package body Exp_Ch6 is\n       --  and reanalyzed (see Expand_Protected_Subprogram_Call).\n \n       elsif Is_Protected_Type (Scope (Subp))\n-         and then Ekind_In (Subp, E_Procedure, E_Function)\n+         and then Ekind (Subp) in E_Procedure | E_Function\n       then\n          null;\n \n@@ -4944,7 +4940,7 @@ package body Exp_Ch6 is\n          return;\n       end if;\n \n-      if Ekind_In (Subp, E_Function, E_Procedure) then\n+      if Ekind (Subp) in E_Function | E_Procedure then\n \n          --  We perform a simple optimization on calls for To_Address by\n          --  replacing them with an unchecked conversion. Not only is this\n@@ -5161,14 +5157,14 @@ package body Exp_Ch6 is\n          --  intermediate result after its use.\n \n          elsif Is_Build_In_Place_Function_Call (Call_Node)\n-           and then Nkind_In (Parent (Unqual_Conv (Call_Node)),\n-                              N_Attribute_Reference,\n-                              N_Function_Call,\n-                              N_Indexed_Component,\n-                              N_Object_Renaming_Declaration,\n-                              N_Procedure_Call_Statement,\n-                              N_Selected_Component,\n-                              N_Slice)\n+           and then Nkind (Parent (Unqual_Conv (Call_Node))) in\n+                      N_Attribute_Reference\n+                    | N_Function_Call\n+                    | N_Indexed_Component\n+                    | N_Object_Renaming_Declaration\n+                    | N_Procedure_Call_Statement\n+                    | N_Selected_Component\n+                    | N_Slice\n            and then\n              (Ekind (Current_Scope) /= E_Loop\n                or else Nkind (Parent (Call_Node)) /= N_Function_Call\n@@ -6737,7 +6733,7 @@ package body Exp_Ch6 is\n       --  For a procedure, we add a return for all possible syntactic ends of\n       --  the subprogram.\n \n-      if Ekind_In (Spec_Id, E_Procedure, E_Generic_Procedure) then\n+      if Ekind (Spec_Id) in E_Procedure | E_Generic_Procedure then\n          Add_Return (Spec_Id, Statements (HSS));\n \n          if Present (Exception_Handlers (HSS)) then\n@@ -6969,7 +6965,7 @@ package body Exp_Ch6 is\n       --  Call the _Postconditions procedure if the related subprogram has\n       --  contract assertions that need to be verified on exit.\n \n-      if Ekind_In (Scope_Id, E_Entry, E_Entry_Family, E_Procedure)\n+      if Ekind (Scope_Id) in E_Entry | E_Entry_Family | E_Procedure\n         and then Present (Postconditions_Proc (Scope_Id))\n       then\n          Insert_Action (N,\n@@ -7719,8 +7715,8 @@ package body Exp_Ch6 is\n       if Present (Utyp)\n         and then Is_Tagged_Type (Utyp)\n         and then not Is_Class_Wide_Type (Utyp)\n-        and then (Nkind_In (Exp, N_Type_Conversion,\n-                                 N_Unchecked_Type_Conversion)\n+        and then (Nkind (Exp) in\n+                      N_Type_Conversion | N_Unchecked_Type_Conversion\n                     or else (Is_Entity_Name (Exp)\n                                and then Is_Formal (Entity (Exp))))\n       then\n@@ -7871,8 +7867,8 @@ package body Exp_Ch6 is\n                end if;\n \n             elsif Nkind (Discrim_Source) = N_Identifier\n-              and then Nkind_In (Original_Node (Discrim_Source),\n-                                 N_Aggregate, N_Extension_Aggregate)\n+              and then Nkind (Original_Node (Discrim_Source)) in\n+                         N_Aggregate | N_Extension_Aggregate\n             then\n                Discrim_Source := Original_Node (Discrim_Source);\n \n@@ -8354,9 +8350,9 @@ package body Exp_Ch6 is\n       --  in an expression context.\n \n       if not Is_List_Member (N)\n-        or else Nkind_In (Context, N_Function_Call,\n-                                   N_If_Expression,\n-                                   N_Indexed_Component)\n+        or else Nkind (Context) in N_Function_Call\n+                                 | N_If_Expression\n+                                 | N_Indexed_Component\n       then\n          --  In Ada 2012 the call may be a function call in an expression\n          --  (since OUT and IN OUT parameters are now allowed for such calls).\n@@ -8434,8 +8430,8 @@ package body Exp_Ch6 is\n          --  corresponding statement list.\n \n          else\n-            pragma Assert (Nkind_In (Context, N_Entry_Call_Alternative,\n-                                              N_Triggering_Alternative));\n+            pragma Assert (Nkind (Context) in N_Entry_Call_Alternative\n+                                            | N_Triggering_Alternative);\n \n             if Is_Non_Empty_List (Statements (Context)) then\n                Insert_List_Before_And_Analyze\n@@ -8591,7 +8587,7 @@ package body Exp_Ch6 is\n       --  type whose result subtype is inherently limited. Later this test\n       --  may be revised to allow composite nonlimited types.\n \n-      if Ekind_In (E, E_Function, E_Generic_Function)\n+      if Ekind (E) in E_Function | E_Generic_Function\n         or else (Ekind (E) = E_Subprogram_Type\n                   and then Etype (E) /= Standard_Void_Type)\n       then\n@@ -8745,9 +8741,9 @@ package body Exp_Ch6 is\n       --  Step past qualification or unchecked conversion (the latter can occur\n       --  in cases of calls to 'Input).\n \n-      if Nkind_In (Func_Call, N_Qualified_Expression,\n-                              N_Type_Conversion,\n-                              N_Unchecked_Type_Conversion)\n+      if Nkind (Func_Call) in N_Qualified_Expression\n+                            | N_Type_Conversion\n+                            | N_Unchecked_Type_Conversion\n       then\n          Func_Call := Expression (Func_Call);\n       end if;\n@@ -8868,8 +8864,8 @@ package body Exp_Ch6 is\n \n          Temp_Init := Relocate_Node (Allocator);\n \n-         if Nkind_In (Function_Call, N_Type_Conversion,\n-                                     N_Unchecked_Type_Conversion)\n+         if Nkind (Function_Call) in\n+              N_Type_Conversion | N_Unchecked_Type_Conversion\n          then\n             Temp_Init := Unchecked_Convert_To (Acc_Type, Temp_Init);\n          end if;\n@@ -8914,8 +8910,8 @@ package body Exp_Ch6 is\n       --  that the full types will be compatible, but the types not visibly\n       --  compatible.\n \n-      elsif Nkind_In (Function_Call, N_Type_Conversion,\n-                                     N_Unchecked_Type_Conversion)\n+      elsif Nkind (Function_Call)\n+              in N_Type_Conversion | N_Unchecked_Type_Conversion\n       then\n          Ref_Func_Call := Unchecked_Convert_To (Acc_Type, Ref_Func_Call);\n       end if;\n@@ -9379,7 +9375,7 @@ package body Exp_Ch6 is\n \n             begin\n                while Present (N)\n-                 and then Nkind_In (N, N_Attribute_Reference, N_Pragma)\n+                 and then Nkind (N) in N_Attribute_Reference | N_Pragma\n                loop\n                   Analyze (N);\n                   D := N;\n@@ -9601,8 +9597,8 @@ package body Exp_Ch6 is\n       Set_Etype (Def_Id, Ptr_Typ);\n       Set_Is_Known_Non_Null (Def_Id);\n \n-      if Nkind_In (Function_Call, N_Type_Conversion,\n-                                  N_Unchecked_Type_Conversion)\n+      if Nkind (Function_Call) in N_Type_Conversion\n+                                | N_Unchecked_Type_Conversion\n       then\n          Res_Decl :=\n            Make_Object_Declaration (Loc,\n@@ -10250,7 +10246,7 @@ package body Exp_Ch6 is\n          --  Mark the label of a source or internally generated block or\n          --  loop.\n \n-         if Nkind_In (P, N_Block_Statement, N_Loop_Statement) then\n+         if Nkind (P) in N_Block_Statement | N_Loop_Statement then\n             Set_Sec_Stack_Needed_For_Return (Entity (Identifier (P)));\n \n          --  Mark the enclosing function\n@@ -10297,26 +10293,26 @@ package body Exp_Ch6 is\n          --  Recurse to handle case of multiple levels of qualification and/or\n          --  conversion.\n \n-         if Nkind_In (Expr, N_Qualified_Expression,\n-                            N_Type_Conversion,\n-                            N_Unchecked_Type_Conversion)\n+         if Nkind (Expr) in N_Qualified_Expression\n+                          | N_Type_Conversion\n+                          | N_Unchecked_Type_Conversion\n          then\n             return Unqual_BIP_Function_Call (Expression (Expr));\n \n          --  Recurse to handle case of multiple levels of references and\n          --  explicit dereferences.\n \n-         elsif Nkind_In (Expr, N_Attribute_Reference,\n-                               N_Explicit_Dereference,\n-                               N_Reference)\n+         elsif Nkind (Expr) in N_Attribute_Reference\n+                             | N_Explicit_Dereference\n+                             | N_Reference\n          then\n             return Unqual_BIP_Function_Call (Prefix (Expr));\n \n          --  Recurse on object renamings\n \n          elsif Nkind (Expr) = N_Identifier\n            and then Present (Entity (Expr))\n-           and then Ekind_In (Entity (Expr), E_Constant, E_Variable)\n+           and then Ekind (Entity (Expr)) in E_Constant | E_Variable\n            and then Nkind (Parent (Entity (Expr))) =\n                       N_Object_Renaming_Declaration\n            and then Present (Renamed_Object (Entity (Expr)))\n@@ -10329,7 +10325,7 @@ package body Exp_Ch6 is\n          elsif not On_Object_Declaration\n            and then Nkind (Expr) = N_Identifier\n            and then Present (Entity (Expr))\n-           and then Ekind_In (Entity (Expr), E_Constant, E_Variable)\n+           and then Ekind (Entity (Expr)) in E_Constant | E_Variable\n            and then Nkind (Parent (Entity (Expr))) = N_Object_Declaration\n            and then Present (Expression (Parent (Entity (Expr))))\n          then"}, {"sha": "07640bf61652f4db43c1efe70a648cdf2c2a3433", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 36, "deletions": 42, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -1343,8 +1343,8 @@ package body Exp_Ch7 is\n             --  Treat use clauses as declarations and insert directly in front\n             --  of them.\n \n-            if Nkind_In (Insertion_Node, N_Use_Package_Clause,\n-                                         N_Use_Type_Clause)\n+            if Nkind (Insertion_Node) in\n+                 N_Use_Package_Clause | N_Use_Type_Clause\n             then\n                Insert_List_Before_And_Analyze (Insertion_Node, Actions);\n             else\n@@ -2050,10 +2050,8 @@ package body Exp_Ch7 is\n                --  freeze node, the body must be inserted directly after the\n                --  construct.\n \n-               if Nkind_In (Last_Top_Level_Ctrl_Construct,\n-                              N_Freeze_Entity,\n-                              N_Package_Declaration,\n-                              N_Package_Body)\n+               if Nkind (Last_Top_Level_Ctrl_Construct) in\n+                    N_Freeze_Entity | N_Package_Declaration | N_Package_Body\n                then\n                   Finalizer_Insert_Nod := Last_Top_Level_Ctrl_Construct;\n                end if;\n@@ -2845,11 +2843,8 @@ package body Exp_Ch7 is\n \n                Result := Next (Stmt);\n                while Present (Result) loop\n-                  if not Nkind_In (Result, N_Call_Marker,\n-                                           N_Raise_Program_Error)\n-                  then\n-                     exit;\n-                  end if;\n+                  exit when Nkind (Result) not in\n+                              N_Call_Marker | N_Raise_Program_Error;\n \n                   Next (Result);\n                end loop;\n@@ -3045,7 +3040,7 @@ package body Exp_Ch7 is\n          --  Insert the counter after all initialization has been done. The\n          --  place of insertion depends on the context.\n \n-         if Ekind_In (Obj_Id, E_Constant, E_Variable) then\n+         if Ekind (Obj_Id) in E_Constant | E_Variable then\n \n             --  The object is initialized by a build-in-place function call.\n             --  The counter insertion point is after the function call.\n@@ -3270,7 +3265,7 @@ package body Exp_Ch7 is\n                end;\n             end if;\n \n-            if Ekind_In (Obj_Id, E_Constant, E_Variable)\n+            if Ekind (Obj_Id) in E_Constant | E_Variable\n               and then Present (Status_Flag_Or_Transient_Decl (Obj_Id))\n             then\n                --  Temporaries created for the purpose of \"exporting\" a\n@@ -4361,7 +4356,7 @@ package body Exp_Ch7 is\n          if Is_Subprogram (E) then\n             return True;\n \n-         elsif Ekind_In (E, E_Block, E_Loop)\n+         elsif Ekind (E) in E_Block | E_Loop\n            and then Contains_Subprogram (E)\n          then\n             return True;\n@@ -4393,7 +4388,7 @@ package body Exp_Ch7 is\n \n       Ftyp := Etype (Fent);\n \n-      if Nkind_In (Arg, N_Type_Conversion, N_Unchecked_Type_Conversion) then\n+      if Nkind (Arg) in N_Type_Conversion | N_Unchecked_Type_Conversion then\n          Atyp := Entity (Subtype_Mark (Arg));\n       else\n          Atyp := Etype (Arg);\n@@ -4414,7 +4409,7 @@ package body Exp_Ch7 is\n       --  Make_Init_Call, set the target type to the type of the formal\n       --  directly, to avoid spurious typing problems.\n \n-      elsif Nkind_In (Arg, N_Unchecked_Type_Conversion, N_Type_Conversion)\n+      elsif Nkind (Arg) in N_Unchecked_Type_Conversion | N_Type_Conversion\n         and then not Is_Class_Wide_Type (Atyp)\n       then\n          Set_Subtype_Mark (Arg, New_Occurrence_Of (Ftyp, Sloc (Arg)));\n@@ -4633,12 +4628,12 @@ package body Exp_Ch7 is\n \n       function Is_Package_Or_Subprogram (Id : Entity_Id) return Boolean is\n       begin\n-         return Ekind_In (Id, E_Entry,\n-                              E_Entry_Family,\n-                              E_Function,\n-                              E_Package,\n-                              E_Procedure,\n-                              E_Subprogram_Body);\n+         return Ekind (Id) in E_Entry\n+                            | E_Entry_Family\n+                            | E_Function\n+                            | E_Package\n+                            | E_Procedure\n+                            | E_Subprogram_Body;\n       end Is_Package_Or_Subprogram;\n \n       --  Local variables\n@@ -4711,11 +4706,12 @@ package body Exp_Ch7 is\n    ----------------------------\n \n    procedure Expand_Cleanup_Actions (N : Node_Id) is\n-      pragma Assert (Nkind_In (N, N_Block_Statement,\n-                                  N_Entry_Body,\n-                                  N_Extended_Return_Statement,\n-                                  N_Subprogram_Body,\n-                                  N_Task_Body));\n+      pragma Assert\n+        (Nkind (N) in N_Block_Statement\n+                    | N_Entry_Body\n+                    | N_Extended_Return_Statement\n+                    | N_Subprogram_Body\n+                    | N_Task_Body);\n \n       Scop : constant Entity_Id := Current_Scope;\n \n@@ -5305,9 +5301,8 @@ package body Exp_Ch7 is\n                --  of the alternative.\n \n                if Nkind (Parent (Curr)) = N_Entry_Call_Alternative\n-                 and then Nkind_In (Parent (Parent (Curr)),\n-                                    N_Conditional_Entry_Call,\n-                                    N_Timed_Entry_Call)\n+                 and then Nkind (Parent (Parent (Curr))) in\n+                            N_Conditional_Entry_Call | N_Timed_Entry_Call\n                then\n                   return Parent (Parent (Curr));\n \n@@ -5648,7 +5643,7 @@ package body Exp_Ch7 is\n                --      <or>\n                --    Hook := Obj_Id'Unrestricted_Access;\n \n-               if Ekind_In (Obj_Id, E_Constant, E_Variable)\n+               if Ekind (Obj_Id) in E_Constant | E_Variable\n                  and then Present (Last_Aggregate_Assignment (Obj_Id))\n                then\n                   Hook_Insert := Last_Aggregate_Assignment (Obj_Id);\n@@ -9012,10 +9007,9 @@ package body Exp_Ch7 is\n          Par : Node_Id := Parent (N);\n \n       begin\n-         while not (Nkind_In (Par, N_Handled_Sequence_Of_Statements,\n-                                   N_Loop_Statement,\n-                                   N_Package_Specification)\n-                      or else Nkind (Par) in N_Proper_Body)\n+         while Nkind (Par) not in\n+           N_Handled_Sequence_Of_Statements | N_Loop_Statement |\n+           N_Package_Specification          | N_Proper_Body\n          loop\n             pragma Assert (Present (Par));\n             Par := Parent (Par);\n@@ -9102,12 +9096,12 @@ package body Exp_Ch7 is\n             --  Prevent the search from going too far because transient blocks\n             --  are bounded by packages and subprogram scopes.\n \n-            elsif Ekind_In (Scop, E_Entry,\n-                                  E_Entry_Family,\n-                                  E_Function,\n-                                  E_Package,\n-                                  E_Procedure,\n-                                  E_Subprogram_Body)\n+            elsif Ekind (Scop) in E_Entry\n+                                | E_Entry_Family\n+                                | E_Function\n+                                | E_Package\n+                                | E_Procedure\n+                                | E_Subprogram_Body\n             then\n                exit;\n             end if;\n@@ -9398,7 +9392,7 @@ package body Exp_Ch7 is\n          Manage_SS =>\n            Uses_Sec_Stack (Curr_S)\n              and then Nkind (N) = N_Object_Declaration\n-             and then Ekind_In (Encl_S, E_Package, E_Package_Body)\n+             and then Ekind (Encl_S) in E_Package | E_Package_Body\n              and then Is_Library_Level_Entity (Encl_S));\n       Pop_Scope;\n "}, {"sha": "630d62f459e775a02a383a0d46393743f07c5ef6", "filename": "gcc/ada/exp_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch8.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -125,7 +125,7 @@ package body Exp_Ch8 is\n          if Modify_Tree_For_C then\n             return True;\n \n-         elsif Nkind_In (Nam, N_Indexed_Component, N_Slice) then\n+         elsif Nkind (Nam) in N_Indexed_Component | N_Slice then\n             if Is_Packed (Etype (Prefix (Nam))) then\n                return True;\n "}, {"sha": "9cf90d1c0c185573564ce6cd64dff7216df9b1fe", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 39, "deletions": 46, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -1248,9 +1248,8 @@ package body Exp_Ch9 is\n                      --  and the environment task is our effective master,\n                      --  so nothing to mark.\n \n-                     if Nkind_In (Par, N_Block_Statement,\n-                                       N_Subprogram_Body,\n-                                       N_Task_Body)\n+                     if Nkind (Par) in\n+                          N_Block_Statement | N_Subprogram_Body | N_Task_Body\n                      then\n                         Set_Is_Task_Master (Par);\n                         exit;\n@@ -1460,8 +1459,8 @@ package body Exp_Ch9 is\n \n          Prag := Pre_Post_Conditions (Items);\n          while Present (Prag) loop\n-            if Nam_In (Pragma_Name_Unmapped (Prag),\n-                       Name_Postcondition, Name_Precondition)\n+            if Pragma_Name_Unmapped (Prag) in Name_Postcondition\n+                                            | Name_Precondition\n               and then Is_Checked (Prag)\n             then\n                Has_Pragma := True;\n@@ -3185,10 +3184,8 @@ package body Exp_Ch9 is\n                  and then ((Nkind (N) = N_Simple_Return_Statement\n                              and then N /= Last (Stmts))\n                             or else Nkind (N) = N_Extended_Return_Statement\n-                            or else (Nkind_In (N, N_Raise_Constraint_Error,\n-                                                  N_Raise_Program_Error,\n-                                                  N_Raise_Statement,\n-                                                  N_Raise_Storage_Error)\n+                            or else (Nkind (N) in\n+                                       N_Raise_xxx_Error | N_Raise_Statement\n                                       and then Comes_From_Source (N)))\n                then\n                   Wrap_Statement (N);\n@@ -3537,9 +3534,8 @@ package body Exp_Ch9 is\n       while Present (Context)\n         and then Nkind (Context) /= N_Compilation_Unit\n       loop\n-         if Nkind_In (Context, N_Block_Statement,\n-                               N_Subprogram_Body,\n-                               N_Task_Body)\n+         if Nkind (Context) in\n+              N_Block_Statement | N_Subprogram_Body | N_Task_Body\n          then\n             Set_Is_Task_Master (Context);\n             exit;\n@@ -3595,15 +3591,15 @@ package body Exp_Ch9 is\n                if Nkind (Context) = N_Discriminant_Specification then\n                   Ctx := Parent (Ctx);\n                else\n-                  while Nkind_In (Ctx, N_Component_Declaration,\n-                                       N_Component_List)\n+                  while Nkind (Ctx) in\n+                          N_Component_Declaration | N_Component_List\n                   loop\n                      Ctx := Parent (Ctx);\n                   end loop;\n                end if;\n \n-               if Nkind_In (Ctx, N_Private_Type_Declaration,\n-                                 N_Private_Extension_Declaration)\n+               if Nkind (Ctx) in N_Private_Type_Declaration\n+                               | N_Private_Extension_Declaration\n                then\n                   Context := Parent (Full_View (Defining_Identifier (Ctx)));\n                end if;\n@@ -5575,7 +5571,7 @@ package body Exp_Ch9 is\n          --    _object : prot_typVP := prot_typV (_O);\n          --    subtype Jnn is <Type of Index> range Low .. High;\n \n-         if Nkind_In (Decl, N_Full_Type_Declaration, N_Object_Declaration) then\n+         if Nkind (Decl) in N_Full_Type_Declaration | N_Object_Declaration then\n             Set_Debug_Info_Needed (Defining_Identifier (Decl));\n \n          --  Declaration for the Protection object, discriminals, privals, and\n@@ -6188,7 +6184,7 @@ package body Exp_Ch9 is\n          if Is_Static_Expression (N) then\n             return True;\n          elsif Ada_Version >= Ada_2020\n-           and then Nkind_In (N, N_Selected_Component, N_Indexed_Component)\n+           and then Nkind (N) in N_Selected_Component | N_Indexed_Component\n            and then Statically_Names_Object (N)\n          then\n             --  Restriction relaxed in Ada2020 to allow statically named\n@@ -7130,8 +7126,8 @@ package body Exp_Ch9 is\n \n       if Nkind (Ecall) = N_Block_Statement then\n          Ecall := First (Statements (Handled_Statement_Sequence (Ecall)));\n-         while not Nkind_In (Ecall, N_Procedure_Call_Statement,\n-                                    N_Entry_Call_Statement)\n+         while Nkind (Ecall) not in\n+                 N_Procedure_Call_Statement | N_Entry_Call_Statement\n          loop\n             Next (Ecall);\n          end loop;\n@@ -7144,9 +7140,8 @@ package body Exp_Ch9 is\n          if Ada_Version >= Ada_2005\n            and then\n              (No (Original_Node (Ecall))\n-               or else not Nkind_In (Original_Node (Ecall),\n-                                     N_Delay_Relative_Statement,\n-                                     N_Delay_Until_Statement))\n+               or else Nkind (Original_Node (Ecall)) not in\n+                         N_Delay_Relative_Statement | N_Delay_Until_Statement)\n          then\n             Extract_Dispatching_Call (Ecall, Call_Ent, Obj, Actuals, Formals);\n \n@@ -10108,8 +10103,7 @@ package body Exp_Ch9 is\n \n          Acc_Ent := N;\n          while Present (Acc_Ent)\n-           and then not Nkind_In (Acc_Ent, N_Accept_Statement,\n-                                           N_Entry_Body)\n+           and then Nkind (Acc_Ent) not in N_Accept_Statement | N_Entry_Body\n          loop\n             Acc_Ent := Parent (Acc_Ent);\n          end loop;\n@@ -12523,7 +12517,7 @@ package body Exp_Ch9 is\n       begin\n          Ent := First_Entity (Tasktyp);\n          while Present (Ent) loop\n-            if Ekind_In (Ent, E_Entry, E_Entry_Family) then\n+            if Ekind (Ent) in E_Entry | E_Entry_Family then\n                Build_Contract_Wrapper (Ent, N);\n             end if;\n \n@@ -12713,8 +12707,8 @@ package body Exp_Ch9 is\n \n       if Nkind (E_Call) = N_Block_Statement then\n          E_Call := First (Statements (Handled_Statement_Sequence (E_Call)));\n-         while not Nkind_In (E_Call, N_Procedure_Call_Statement,\n-                                     N_Entry_Call_Statement)\n+         while Nkind (E_Call) not in\n+                 N_Procedure_Call_Statement | N_Entry_Call_Statement\n          loop\n             Next (E_Call);\n          end loop;\n@@ -13417,12 +13411,12 @@ package body Exp_Ch9 is\n \n       Context := Parent (N);\n       while Present (Context) loop\n-         if Nkind_In (Context, N_Entry_Body,\n-                               N_Extended_Return_Statement,\n-                               N_Package_Body,\n-                               N_Package_Declaration,\n-                               N_Subprogram_Body,\n-                               N_Task_Body)\n+         if Nkind (Context) in N_Entry_Body\n+                             | N_Extended_Return_Statement\n+                             | N_Package_Body\n+                             | N_Package_Declaration\n+                             | N_Subprogram_Body\n+                             | N_Task_Body\n          then\n             exit;\n \n@@ -13551,7 +13545,7 @@ package body Exp_Ch9 is\n    begin\n       First_Op := First (D);\n       while Present (First_Op)\n-        and then not Nkind_In (First_Op, N_Subprogram_Body, N_Entry_Body)\n+        and then Nkind (First_Op) not in N_Subprogram_Body | N_Entry_Body\n       loop\n          Next (First_Op);\n       end loop;\n@@ -14029,8 +14023,8 @@ package body Exp_Ch9 is\n       --  of this type should have been removed during semantic analysis.\n \n       Pdec := Parent (Ptyp);\n-      while not Nkind_In (Pdec, N_Protected_Type_Declaration,\n-                                N_Single_Protected_Declaration)\n+      while Nkind (Pdec) not in\n+              N_Protected_Type_Declaration | N_Single_Protected_Declaration\n       loop\n          Next (Pdec);\n       end loop;\n@@ -14461,8 +14455,8 @@ package body Exp_Ch9 is\n       --  this type should have been removed during semantic analysis.\n \n       Tdec := Parent (Ttyp);\n-      while not Nkind_In (Tdec, N_Task_Type_Declaration,\n-                                N_Single_Task_Declaration)\n+      while Nkind (Tdec) not in\n+              N_Task_Type_Declaration | N_Single_Task_Declaration\n       loop\n          Next (Tdec);\n       end loop;\n@@ -14811,8 +14805,8 @@ package body Exp_Ch9 is\n \n       Next_Op := Next (N);\n       while Present (Next_Op)\n-        and then not Nkind_In (Next_Op,\n-           N_Subprogram_Body, N_Entry_Body, N_Expression_Function)\n+        and then Nkind (Next_Op) not in\n+                   N_Subprogram_Body | N_Entry_Body | N_Expression_Function\n       loop\n          Next (Next_Op);\n       end loop;\n@@ -14830,14 +14824,13 @@ package body Exp_Ch9 is\n    begin\n       Stmt := First (Stats);\n       while Nkind (Stmt) /= N_Empty\n-        and then (Nkind_In (Stmt, N_Null_Statement, N_Label)\n+        and then (Nkind (Stmt) in N_Null_Statement | N_Label\n                    or else\n                      (Nkind (Stmt) = N_Pragma\n                        and then\n-                         Nam_In (Pragma_Name_Unmapped (Stmt),\n-                                 Name_Unreferenced,\n-                                 Name_Unmodified,\n-                                 Name_Warnings)))\n+                         Pragma_Name_Unmapped (Stmt) in Name_Unreferenced\n+                                                      | Name_Unmodified\n+                                                      | Name_Warnings))\n       loop\n          Next (Stmt);\n       end loop;"}, {"sha": "b973fb68ad319f9a451aeda9798888dd66561263", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -424,7 +424,7 @@ package body Exp_Dbug is\n                   --  anyway, so the renaming entity will be available in\n                   --  debuggers.\n \n-                  exit when not Ekind_In (Sel_Id, E_Component, E_Discriminant);\n+                  exit when Ekind (Sel_Id) not in E_Component | E_Discriminant;\n \n                   First_Bit := Normalized_First_Bit (Sel_Id);\n                   Enable :=\n@@ -839,11 +839,11 @@ package body Exp_Dbug is\n \n       --  Case of interface name being used\n \n-      if Ekind_In (E, E_Constant,\n-                      E_Exception,\n-                      E_Function,\n-                      E_Procedure,\n-                      E_Variable)\n+      if Ekind (E) in E_Constant\n+                    | E_Exception\n+                    | E_Function\n+                    | E_Procedure\n+                    | E_Variable\n         and then Present (Interface_Name (E))\n         and then No (Address_Clause (E))\n         and then not Has_Suffix\n@@ -874,7 +874,7 @@ package body Exp_Dbug is\n          if Is_Generic_Instance (E)\n            and then Is_Subprogram (E)\n            and then not Is_Compilation_Unit (Scope (E))\n-           and then Ekind_In (Scope (E), E_Package, E_Package_Body)\n+           and then Ekind (Scope (E)) in E_Package | E_Package_Body\n            and then Present (Related_Instance (Scope (E)))\n          then\n             E := Related_Instance (Scope (E));"}, {"sha": "1a41d794bfd1c5e25f8adba5dcbfb09a19a1de90", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -389,8 +389,8 @@ package body Exp_Disp is\n             --  Handle full type declarations and derivations of library level\n             --  tagged types\n \n-            elsif Nkind_In (D, N_Full_Type_Declaration,\n-                               N_Derived_Type_Definition)\n+            elsif Nkind (D) in\n+                    N_Full_Type_Declaration | N_Derived_Type_Definition\n               and then Is_Library_Level_Tagged_Type (Defining_Entity (D))\n               and then Ekind (Defining_Entity (D)) /= E_Record_Subtype\n               and then not Is_Private_Type (Defining_Entity (D))\n@@ -1223,9 +1223,8 @@ package body Exp_Disp is\n          --  the corresponding object or parameter declaration\n \n          elsif Nkind (Controlling_Tag) = N_Identifier\n-           and then Nkind_In (Parent (Entity (Controlling_Tag)),\n-                              N_Object_Declaration,\n-                              N_Parameter_Specification)\n+           and then Nkind (Parent (Entity (Controlling_Tag))) in\n+                      N_Object_Declaration | N_Parameter_Specification\n          then\n             Set_SCIL_Controlling_Tag (SCIL_Node,\n               Parent (Entity (Controlling_Tag)));\n@@ -1235,9 +1234,8 @@ package body Exp_Disp is\n \n          elsif Nkind (Controlling_Tag) = N_Explicit_Dereference\n             and then Nkind (Prefix (Controlling_Tag)) = N_Identifier\n-            and then Nkind_In (Parent (Entity (Prefix (Controlling_Tag))),\n-                               N_Object_Declaration,\n-                               N_Parameter_Specification)\n+            and then Nkind (Parent (Entity (Prefix (Controlling_Tag)))) in\n+                       N_Object_Declaration | N_Parameter_Specification\n          then\n             Set_SCIL_Controlling_Tag (SCIL_Node,\n               Parent (Entity (Prefix (Controlling_Tag))));\n@@ -8562,7 +8560,7 @@ package body Exp_Disp is\n \n       --  Propagate the value to the wrapped subprogram (if one is present)\n \n-      if Ekind_In (Prim, E_Function, E_Procedure)\n+      if Ekind (Prim) in E_Function | E_Procedure\n         and then Is_Primitive_Wrapper (Prim)\n         and then Present (Wrapped_Entity (Prim))\n         and then Is_Dispatching_Operation (Wrapped_Entity (Prim))\n@@ -8595,7 +8593,7 @@ package body Exp_Disp is\n \n       --  Propagate the value to the wrapped subprogram (if one is present)\n \n-      if Ekind_In (Prim, E_Function, E_Procedure)\n+      if Ekind (Prim) in E_Function | E_Procedure\n         and then Is_Primitive_Wrapper (Prim)\n         and then Present (Wrapped_Entity (Prim))\n         and then Is_Dispatching_Operation (Wrapped_Entity (Prim))\n@@ -8732,7 +8730,7 @@ package body Exp_Disp is\n             --  If the DTC_Entity attribute is already set we can also output\n             --  the name of the interface covered by this primitive (if any).\n \n-            if Ekind_In (Alias (Prim), E_Function, E_Procedure)\n+            if Ekind (Alias (Prim)) in E_Function | E_Procedure\n               and then Present (DTC_Entity (Alias (Prim)))\n               and then Is_Interface (Scope (DTC_Entity (Alias (Prim))))\n             then"}, {"sha": "04ad92bd51d16e3a79560f5b8d68e439fef416c5", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -138,7 +138,7 @@ package body Exp_Intr is\n                Ent : Entity_Id := Current_Scope;\n             begin\n                while Present (Ent) loop\n-                  exit when not Ekind_In (Ent, E_Block, E_Loop);\n+                  exit when Ekind (Ent) not in E_Block | E_Loop;\n                   Ent := Scope (Ent);\n                end loop;\n \n@@ -627,9 +627,9 @@ package body Exp_Intr is\n       elsif Nam = Name_Generic_Dispatching_Constructor then\n          Expand_Dispatching_Constructor_Call (N);\n \n-      elsif Nam_In (Nam, Name_Import_Address,\n-                         Name_Import_Largest_Value,\n-                         Name_Import_Value)\n+      elsif Nam in Name_Import_Address\n+                 | Name_Import_Largest_Value\n+                 | Name_Import_Value\n       then\n          Expand_Import_Call (N);\n \n@@ -663,30 +663,30 @@ package body Exp_Intr is\n       elsif Nam = Name_To_Pointer then\n          Expand_To_Pointer (N);\n \n-      elsif Nam_In (Nam, Name_File,\n-                         Name_Line,\n-                         Name_Source_Location,\n-                         Name_Enclosing_Entity,\n-                         Name_Compilation_ISO_Date,\n-                         Name_Compilation_Date,\n-                         Name_Compilation_Time)\n+      elsif Nam in Name_File\n+                 | Name_Line\n+                 | Name_Source_Location\n+                 | Name_Enclosing_Entity\n+                 | Name_Compilation_ISO_Date\n+                 | Name_Compilation_Date\n+                 | Name_Compilation_Time\n       then\n          Expand_Source_Info (N, Nam);\n \n-         --  If we have a renaming, expand the call to the original operation,\n-         --  which must itself be intrinsic, since renaming requires matching\n-         --  conventions and this has already been checked.\n+      --  If we have a renaming, expand the call to the original operation,\n+      --  which must itself be intrinsic, since renaming requires matching\n+      --  conventions and this has already been checked.\n \n       elsif Present (Alias (E)) then\n          Expand_Intrinsic_Call (N, Alias (E));\n \n       elsif Nkind (N) in N_Binary_Op then\n          Expand_Binary_Operator_Call (N);\n \n-         --  The only other case is where an external name was specified, since\n-         --  this is the only way that an otherwise unrecognized name could\n-         --  escape the checking in Sem_Prag. Nothing needs to be done in such\n-         --  a case, since we pass such a call to the back end unchanged.\n+      --  The only other case is where an external name was specified, since\n+      --  this is the only way that an otherwise unrecognized name could\n+      --  escape the checking in Sem_Prag. Nothing needs to be done in such\n+      --  a case, since we pass such a call to the back end unchanged.\n \n       else\n          null;"}, {"sha": "b95bd327ae20b88c48cbaae82d55b298f66b0892", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -469,7 +469,7 @@ package body Exp_Pakd is\n         or else\n            (Nkind (Aexp) = N_Indexed_Component\n              and then Is_Entity_Name (Prefix (Aexp)))\n-        or else Nkind_In (Aexp, N_Explicit_Dereference, N_Function_Call)\n+        or else Nkind (Aexp) in N_Explicit_Dereference | N_Function_Call\n       then\n          Set_Analyzed (Aexp);\n       end if;"}, {"sha": "81e4330cef1fa7bc89491b5f26aa1a27519035d5", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -520,7 +520,7 @@ package body Exp_Prag is\n                --  that the failure is not at the point of occurrence of the\n                --  pragma, unlike the other Check cases.\n \n-               elsif Nam_In (Nam, Name_Precondition, Name_Postcondition) then\n+               elsif Nam in Name_Precondition | Name_Postcondition then\n                   Get_Name_String (Nam);\n                   Insert_Str_In_Name_Buffer (\"failed \", 1);\n                   Add_Str_To_Name_Buffer (\" from \");"}, {"sha": "80b49a70cce7bd3360f23ac7c64e665d1d8ead44", "filename": "gcc/ada/exp_put_image.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_put_image.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_put_image.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -645,8 +645,8 @@ package body Exp_Put_Image is\n             --  with no components there is no need to handle it.\n \n             while Present (Item) loop\n-               if Nkind_In (Item, N_Component_Declaration,\n-                                  N_Discriminant_Specification)\n+               if Nkind (Item) in\n+                    N_Component_Declaration | N_Discriminant_Specification\n                  and then\n                    ((Chars (Defining_Identifier (Item)) = Name_uParent\n                        and then not Is_Interface"}, {"sha": "fa4aeb6a03818618c8b96ab1cafe0f0fbc7d4e5b", "filename": "gcc/ada/exp_smem.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_smem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_smem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_smem.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -372,7 +372,7 @@ package body Exp_Smem is\n          return False;\n \n       else\n-         if Ekind_In (Formal, E_Out_Parameter, E_In_Out_Parameter) then\n+         if Ekind (Formal) in E_Out_Parameter | E_In_Out_Parameter then\n             Insert_Node := Call;\n             return True;\n          else\n@@ -477,7 +477,7 @@ package body Exp_Smem is\n             return False;\n          end if;\n \n-      elsif Nkind_In (P, N_Indexed_Component, N_Selected_Component)\n+      elsif Nkind (P) in N_Indexed_Component | N_Selected_Component\n         and then N = Prefix (P)\n       then\n          return On_Lhs_Of_Assignment (P);"}, {"sha": "b640843c2c3f5bb00559142901f3e977ca259b68", "filename": "gcc/ada/exp_tss.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_tss.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_tss.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_tss.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -291,12 +291,12 @@ package body Exp_Tss is\n                   then\n                      exit;\n \n-                  elsif Ekind_In (Etype (E1),\n-                          E_Anonymous_Access_Subprogram_Type,\n-                          E_Anonymous_Access_Protected_Subprogram_Type)\n-                    and then Ekind_In (Etype (E2),\n-                               E_Anonymous_Access_Subprogram_Type,\n-                               E_Anonymous_Access_Protected_Subprogram_Type)\n+                  elsif Ekind (Etype (E1)) in\n+                          E_Anonymous_Access_Subprogram_Type |\n+                          E_Anonymous_Access_Protected_Subprogram_Type\n+                    and then Ekind (Etype (E2)) in\n+                               E_Anonymous_Access_Subprogram_Type |\n+                               E_Anonymous_Access_Protected_Subprogram_Type\n                     and then not Conforming_Types\n                                    (Etype (E1), Etype (E2), Fully_Conformant)\n                   then"}, {"sha": "29fe2e59061afb39b0ade6133da9b53e093a59b0", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -546,8 +546,8 @@ package body Exp_Unst is\n \n                   --  Attribute or indexed component case\n \n-                  elsif Nkind_In (N, N_Attribute_Reference,\n-                                     N_Indexed_Component)\n+                  elsif Nkind (N) in\n+                          N_Attribute_Reference | N_Indexed_Component\n                   then\n                      Note_Uplevel_Bound (Prefix (N), Ref);\n \n@@ -601,8 +601,8 @@ package body Exp_Unst is\n \n                   --  Explicit dereference and selected component case\n \n-                  elsif Nkind_In (N, N_Explicit_Dereference,\n-                                     N_Selected_Component)\n+                  elsif Nkind (N) in\n+                          N_Explicit_Dereference | N_Selected_Component\n                   then\n                      Note_Uplevel_Bound (Prefix (N), Ref);\n \n@@ -786,7 +786,7 @@ package body Exp_Unst is\n                then\n                   return;\n \n-               elsif Ekind_In (Callee, E_Entry, E_Entry_Family) then\n+               elsif Ekind (Callee) in E_Entry | E_Entry_Family then\n                   return;\n                end if;\n \n@@ -1271,9 +1271,9 @@ package body Exp_Unst is\n                         --  references to global declarations.\n \n                        and then\n-                         (Ekind_In (Ent, E_Constant,\n-                                         E_Loop_Parameter,\n-                                         E_Variable)\n+                         (Ekind (Ent) in E_Constant\n+                                       | E_Loop_Parameter\n+                                       | E_Variable\n \n                            --  Formals are interesting, but not if being used\n                            --  as mere names of parameters for name notation\n@@ -2131,9 +2131,9 @@ package body Exp_Unst is\n                                  --  N_Loop_Parameter_Specification or to\n                                  --  an N_Iterator_Specification.\n \n-                                 if Nkind_In\n-                                      (Ins, N_Iterator_Specification,\n-                                            N_Loop_Parameter_Specification)\n+                                 if Nkind (Ins) in\n+                                      N_Iterator_Specification |\n+                                      N_Loop_Parameter_Specification\n                                  then\n                                     --  Quantified expression are rewritten as\n                                     --  loops during expansion.\n@@ -2366,9 +2366,8 @@ package body Exp_Unst is\n                --  processing this dereference\n \n                if Opt.Modify_Tree_For_C\n-                 and then Nkind_In (Parent (UPJ.Ref),\n-                            N_Type_Conversion,\n-                            N_Unchecked_Type_Conversion)\n+                 and then Nkind (Parent (UPJ.Ref)) in\n+                            N_Type_Conversion | N_Unchecked_Type_Conversion\n                then\n                   Force_Evaluation (UPJ.Ref, Mode => Strict);\n                end if;\n@@ -2554,7 +2553,7 @@ package body Exp_Unst is\n \n       function Search_Subprograms (N : Node_Id) return Traverse_Result is\n       begin\n-         if Nkind_In (N, N_Subprogram_Body, N_Subprogram_Body_Stub) then\n+         if Nkind (N) in N_Subprogram_Body | N_Subprogram_Body_Stub then\n             declare\n                Spec_Id : constant Entity_Id := Unique_Defining_Entity (N);\n "}, {"sha": "0f8505f1ad7527342ee518206d07e3bfbf900e43", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 52, "deletions": 60, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -5064,7 +5064,7 @@ package body Exp_Util is\n    -----------------------------------------\n \n    procedure Expand_Static_Predicates_In_Choices (N : Node_Id) is\n-      pragma Assert (Nkind_In (N, N_Case_Statement_Alternative, N_Variant));\n+      pragma Assert (Nkind (N) in N_Case_Statement_Alternative | N_Variant);\n \n       Choices : constant List_Id := Discrete_Choices (N);\n \n@@ -5842,7 +5842,7 @@ package body Exp_Util is\n    begin\n       S := Scop;\n       while Present (S) loop\n-         if Ekind_In (S, E_Entry, E_Entry_Family, E_Function, E_Procedure)\n+         if Ekind (S) in E_Entry | E_Entry_Family | E_Function | E_Procedure\n            and then Present (Protection_Object (S))\n          then\n             return Protection_Object (S);\n@@ -5920,8 +5920,8 @@ package body Exp_Util is\n          Par := N;\n          Top := N;\n          while Present (Par) loop\n-            if Nkind_In (Original_Node (Par), N_Case_Expression,\n-                                              N_If_Expression)\n+            if Nkind (Original_Node (Par)) in\n+                 N_Case_Expression | N_If_Expression\n             then\n                Top := Par;\n \n@@ -5942,13 +5942,13 @@ package body Exp_Util is\n          Par := Top;\n          while Present (Par) loop\n             if Is_List_Member (Par)\n-              and then not Nkind_In (Par, N_Component_Association,\n-                                          N_Discriminant_Association,\n-                                          N_Parameter_Association,\n-                                          N_Pragma_Argument_Association)\n-              and then not Nkind_In (Parent (Par), N_Function_Call,\n-                                                   N_Procedure_Call_Statement,\n-                                                   N_Entry_Call_Statement)\n+              and then Nkind (Par) not in N_Component_Association\n+                                        | N_Discriminant_Association\n+                                        | N_Parameter_Association\n+                                        | N_Pragma_Argument_Association\n+              and then Nkind (Parent (Par)) not in N_Function_Call\n+                                                 | N_Procedure_Call_Statement\n+                                                 | N_Entry_Call_Statement\n \n             then\n                return Par;\n@@ -5971,7 +5971,7 @@ package body Exp_Util is\n             --  Keep climbing past various operators\n \n             if Nkind (Parent (Par)) in N_Op\n-              or else Nkind_In (Parent (Par), N_And_Then, N_Or_Else)\n+              or else Nkind (Parent (Par)) in N_And_Then | N_Or_Else\n             then\n                Par := Parent (Par);\n             else\n@@ -6009,11 +6009,11 @@ package body Exp_Util is\n \n          while Present (Par) loop\n             if Par = Wrapped_Node\n-              or else Nkind_In (Par, N_Assignment_Statement,\n-                                     N_Object_Declaration,\n-                                     N_Pragma,\n-                                     N_Procedure_Call_Statement,\n-                                     N_Simple_Return_Statement)\n+              or else Nkind (Par) in N_Assignment_Statement\n+                                   | N_Object_Declaration\n+                                   | N_Pragma\n+                                   | N_Procedure_Call_Statement\n+                                   | N_Simple_Return_Statement\n             then\n                return Par;\n \n@@ -6276,10 +6276,9 @@ package body Exp_Util is\n             --  Deal with conversions, qualifications, and expressions with\n             --  actions.\n \n-            while Nkind_In (Cond,\n-                    N_Type_Conversion,\n-                    N_Qualified_Expression,\n-                    N_Expression_With_Actions)\n+            while Nkind (Cond) in N_Type_Conversion\n+                                | N_Qualified_Expression\n+                                | N_Expression_With_Actions\n             loop\n                Cond := Expression (Cond);\n             end loop;\n@@ -6289,7 +6288,7 @@ package body Exp_Util is\n \n          --  Deal with AND THEN and AND cases\n \n-         if Nkind_In (Cond, N_And_Then, N_Op_And) then\n+         if Nkind (Cond) in N_And_Then | N_Op_And then\n \n             --  Don't ever try to invert a condition that is of the form of an\n             --  AND or AND THEN (since we are not doing sufficiently general\n@@ -6365,10 +6364,9 @@ package body Exp_Util is\n \n             return;\n \n-         elsif Nkind_In (Cond,\n-                 N_Type_Conversion,\n-                 N_Qualified_Expression,\n-                 N_Expression_With_Actions)\n+         elsif Nkind (Cond) in N_Type_Conversion\n+                             | N_Qualified_Expression\n+                             | N_Expression_With_Actions\n          then\n             Cond := Expression (Cond);\n \n@@ -7265,7 +7263,7 @@ package body Exp_Util is\n                --  actions should be inserted outside the complete record\n                --  declaration.\n \n-               elsif Nkind_In (Parent (P), N_Variant, N_Record_Definition) then\n+               elsif Nkind (Parent (P)) in N_Variant | N_Record_Definition then\n                   null;\n \n                --  Do not insert freeze nodes within the loop generated for\n@@ -7653,8 +7651,8 @@ package body Exp_Util is\n          P := Parent (P);\n \n          if Is_List_Member (P) then\n-            exit when Nkind_In (Parent (P), N_Package_Specification,\n-                                            N_Subprogram_Body);\n+            exit when Nkind (Parent (P)) in\n+                        N_Package_Specification | N_Subprogram_Body;\n \n             --  Special handling for handled sequence of statements, we must\n             --  insert in the statements not the exception handlers!\n@@ -7874,8 +7872,8 @@ package body Exp_Util is\n             if Nkind (Result) = N_Explicit_Dereference then\n                Result := Prefix (Result);\n \n-            elsif Nkind_In (Result, N_Type_Conversion,\n-                                    N_Unchecked_Type_Conversion)\n+            elsif Nkind (Result) in\n+                    N_Type_Conversion | N_Unchecked_Type_Conversion\n             then\n                Result := Expression (Result);\n \n@@ -8125,7 +8123,7 @@ package body Exp_Util is\n \n                if Nkind (N) = N_Identifier\n                  and then Present (Entity (N))\n-                 and then Ekind_In (Entity (N), E_Constant, E_Variable)\n+                 and then Ekind (Entity (N)) in E_Constant | E_Variable\n                then\n                   Ren_Obj := Entity (N);\n                   return Abandon;\n@@ -8332,7 +8330,7 @@ package body Exp_Util is\n       end if;\n \n       return\n-        Ekind_In (Obj_Id, E_Constant, E_Variable)\n+        Ekind (Obj_Id) in E_Constant | E_Variable\n           and then Needs_Finalization (Desig)\n           and then Requires_Transient_Scope (Desig)\n           and then Nkind (Rel_Node) /= N_Simple_Return_Statement\n@@ -8758,7 +8756,7 @@ package body Exp_Util is\n          return Is_Ref_To_Bit_Packed_Array (Renamed_Object (Entity (N)));\n       end if;\n \n-      if Nkind_In (N, N_Indexed_Component, N_Selected_Component) then\n+      if Nkind (N) in N_Indexed_Component | N_Selected_Component then\n          if Is_Bit_Packed_Array (Etype (Prefix (N))) then\n             Result := True;\n          else\n@@ -8800,7 +8798,7 @@ package body Exp_Util is\n       then\n          return True;\n \n-      elsif Nkind_In (N, N_Indexed_Component, N_Selected_Component) then\n+      elsif Nkind (N) in N_Indexed_Component | N_Selected_Component then\n          return Is_Ref_To_Bit_Packed_Slice (Prefix (N));\n \n       else\n@@ -8818,7 +8816,7 @@ package body Exp_Util is\n    begin\n       if Kind = N_Object_Renaming_Declaration then\n          return True;\n-      elsif Nkind_In (Kind, N_Indexed_Component, N_Selected_Component) then\n+      elsif Kind in N_Indexed_Component | N_Selected_Component then\n          return Is_Renamed_Object (Pnod);\n       else\n          return False;\n@@ -8976,7 +8974,7 @@ package body Exp_Util is\n \n       --  True if volatile component\n \n-      elsif Nkind_In (N, N_Indexed_Component, N_Selected_Component) then\n+      elsif Nkind (N) in N_Indexed_Component | N_Selected_Component then\n          if (Is_Entity_Name (Prefix (N))\n               and then Has_Volatile_Components (Entity (Prefix (N))))\n            or else (Present (Etype (Prefix (N)))\n@@ -11005,7 +11003,7 @@ package body Exp_Util is\n          =>\n             --  Check the \"then statements\" for elsif parts and if statements\n \n-            if Nkind_In (N, N_Elsif_Part, N_If_Statement)\n+            if Nkind (N) in N_Elsif_Part | N_If_Statement\n               and then not Is_Empty_List (Then_Statements (N))\n               and then not Are_Wrapped (Then_Statements (N))\n               and then Requires_Cleanup_Actions\n@@ -11022,9 +11020,8 @@ package body Exp_Util is\n             --  Check the \"else statements\" for conditional entry calls, if\n             --  statements and selective accepts.\n \n-            if Nkind_In (N, N_Conditional_Entry_Call,\n-                            N_If_Statement,\n-                            N_Selective_Accept)\n+            if Nkind (N) in\n+                 N_Conditional_Entry_Call | N_If_Statement | N_Selective_Accept\n               and then not Is_Empty_List (Else_Statements (N))\n               and then not Are_Wrapped (Else_Statements (N))\n               and then Requires_Cleanup_Actions\n@@ -11556,7 +11553,7 @@ package body Exp_Util is\n          --  by the expression it renames, which would defeat the purpose of\n          --  removing the side effect.\n \n-         if Nkind_In (Exp, N_Selected_Component, N_Indexed_Component)\n+         if Nkind (Exp) in N_Selected_Component | N_Indexed_Component\n            and then Has_Non_Standard_Rep (Etype (Prefix (Exp)))\n          then\n             null;\n@@ -11983,8 +11980,8 @@ package body Exp_Util is\n                --  and view swaps, the parent type is taken from the formal\n                --  parameter of the subprogram being called.\n \n-               if Nkind_In (Context, N_Function_Call,\n-                                     N_Procedure_Call_Statement)\n+               if Nkind (Context) in\n+                    N_Function_Call | N_Procedure_Call_Statement\n                  and then No (Type_Map.Get (Entity (Name (Context))))\n                then\n                   New_Ref :=\n@@ -12150,9 +12147,8 @@ package body Exp_Util is\n       Lib_Level : Boolean) return Boolean\n    is\n       At_Lib_Level : constant Boolean :=\n-                       Lib_Level\n-                         and then Nkind_In (N, N_Package_Body,\n-                                               N_Package_Specification);\n+        Lib_Level\n+          and then Nkind (N) in N_Package_Body | N_Package_Specification;\n       --  N is at the library level if the top-most context is a package and\n       --  the path taken to reach N does not include nonpackage constructs.\n \n@@ -12529,8 +12525,8 @@ package body Exp_Util is\n \n       if (Nkind (Pexp) = N_Assignment_Statement\n            and then Expression (Pexp) = Exp)\n-        or else Nkind_In (Pexp, N_Object_Declaration,\n-                                N_Object_Renaming_Declaration)\n+        or else Nkind (Pexp)\n+                  in N_Object_Declaration | N_Object_Renaming_Declaration\n       then\n          return True;\n \n@@ -12786,10 +12782,9 @@ package body Exp_Util is\n                Set_Entity_Current_Value (Right_Opnd (Cond));\n             end if;\n \n-         elsif Nkind_In (Cond,\n-                 N_Type_Conversion,\n-                 N_Qualified_Expression,\n-                 N_Expression_With_Actions)\n+         elsif Nkind (Cond) in N_Type_Conversion\n+                             | N_Qualified_Expression\n+                             | N_Expression_With_Actions\n          then\n             Set_Expression_Current_Value (Expression (Cond));\n \n@@ -12862,7 +12857,7 @@ package body Exp_Util is\n             if Nkind (N) = N_Subprogram_Body\n               and then Address_Taken (Spec_Id)\n               and then\n-                Ekind_In (Scope (Spec_Id), E_Block, E_Procedure, E_Function)\n+                Ekind (Scope (Spec_Id)) in E_Block | E_Procedure | E_Function\n             then\n                declare\n                   Loc   : constant Source_Ptr := Sloc (N);\n@@ -13086,7 +13081,7 @@ package body Exp_Util is\n          elsif Is_Entity_Name (N) then\n             return Ekind (Entity (N)) = E_In_Parameter;\n \n-         elsif Nkind_In (N, N_Indexed_Component, N_Selected_Component) then\n+         elsif Nkind (N) in N_Indexed_Component | N_Selected_Component then\n             return Within_In_Parameter (Prefix (N));\n \n          else\n@@ -13167,9 +13162,7 @@ package body Exp_Util is\n             --  explicit dereference, then the designated object could\n             --  be modified by an assignment.\n \n-            if Nkind_In (RO, N_Indexed_Component,\n-                             N_Explicit_Dereference)\n-            then\n+            if Nkind (RO) in N_Indexed_Component | N_Explicit_Dereference then\n                return False;\n \n             --  A selected component must have a safe prefix\n@@ -13698,8 +13691,7 @@ package body Exp_Util is\n \n       Par := Parent (N);\n       while Present (Par) loop\n-         if Nkind_In (Original_Node (Par), N_Case_Expression,\n-                                           N_If_Expression)\n+         if Nkind (Original_Node (Par)) in N_Case_Expression | N_If_Expression\n          then\n             return True;\n "}, {"sha": "1c177b1702be7bd5342ae131760d71b5ac02fcd0", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 39, "deletions": 41, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -283,11 +283,11 @@ package body Freeze is\n \n         and then\n           (Present (Interface_Name (Renamed_Subp))\n-            or else Nam_In (Chars (Renamed_Subp), Name_Rotate_Left,\n-                                                  Name_Rotate_Right,\n-                                                  Name_Shift_Left,\n-                                                  Name_Shift_Right,\n-                                                  Name_Shift_Right_Arithmetic))\n+            or else Chars (Renamed_Subp) in Name_Rotate_Left\n+                                          | Name_Rotate_Right\n+                                          | Name_Shift_Left\n+                                          | Name_Shift_Right\n+                                          | Name_Shift_Right_Arithmetic)\n       then\n          Set_Interface_Name (Ent, Interface_Name (Renamed_Subp));\n \n@@ -412,7 +412,7 @@ package body Freeze is\n       --  as we need to check other conditions for creating a body to inline\n       --  in that case, which are controlled in Analyze_Subprogram_Body_Helper.\n \n-      if Ekind_In (Old_S, E_Function, E_Procedure)\n+      if Ekind (Old_S) in E_Function | E_Procedure\n         and then Nkind (Decl) = N_Subprogram_Declaration\n         and then not Is_Generic_Instance (Old_S)\n         and then not GNATprove_Mode\n@@ -1894,8 +1894,8 @@ package body Freeze is\n                end if;\n \n             elsif Ekind (E) in Task_Kind\n-              and then Nkind_In (Parent (E), N_Single_Task_Declaration,\n-                                             N_Task_Type_Declaration)\n+              and then Nkind (Parent (E)) in\n+                         N_Single_Task_Declaration | N_Task_Type_Declaration\n             then\n                Push_Scope (E);\n                Freeze_All (First_Entity (E), After);\n@@ -1986,15 +1986,15 @@ package body Freeze is\n                   --  current package, but this body does not freeze incomplete\n                   --  types that may be declared in this private part.\n \n-                  if (Nkind_In (Bod, N_Entry_Body,\n-                                     N_Package_Body,\n-                                     N_Protected_Body,\n-                                     N_Subprogram_Body,\n-                                     N_Task_Body)\n-                        or else Nkind (Bod) in N_Body_Stub)\n+                  if Comes_From_Source (Bod)\n+                    and then Nkind (Bod) in N_Entry_Body\n+                                          | N_Package_Body\n+                                          | N_Protected_Body\n+                                          | N_Subprogram_Body\n+                                          | N_Task_Body\n+                                          | N_Body_Stub\n                     and then\n                       List_Containing (After) = List_Containing (Parent (E))\n-                    and then Comes_From_Source (Bod)\n                   then\n                      Error_Msg_Sloc := Sloc (Next (After));\n                      Error_Msg_NE\n@@ -2373,8 +2373,7 @@ package body Freeze is\n          begin\n             case Nkind (N) is\n                when N_Attribute_Reference =>\n-                  if Nam_In (Attribute_Name (N), Name_Access,\n-                                                 Name_Unchecked_Access)\n+                  if Attribute_Name (N) in Name_Access | Name_Unchecked_Access\n                     and then Is_Entity_Name (Prefix (N))\n                     and then Is_Type (Entity (Prefix (N)))\n                     and then Entity (Prefix (N)) = E\n@@ -4140,7 +4139,7 @@ package body Freeze is\n \n             --  Handle the component and discriminant case\n \n-            if Ekind_In (Comp, E_Component, E_Discriminant) then\n+            if Ekind (Comp) in E_Component | E_Discriminant then\n                declare\n                   CC : constant Node_Id := Component_Clause (Comp);\n \n@@ -5203,7 +5202,7 @@ package body Freeze is\n             --  case, both the body and imported function utilize the same\n             --  type.\n \n-            if Ekind_In (E, E_Function, E_Generic_Function) then\n+            if Ekind (E) in E_Function | E_Generic_Function then\n                Stmt :=\n                  Make_Simple_Return_Statement (Loc,\n                    Expression =>\n@@ -5573,10 +5572,9 @@ package body Freeze is\n \n                begin\n                   while Present (Prag) loop\n-                     if Nam_In (Pragma_Name_Unmapped (Prag),\n-                                Name_Post,\n-                                Name_Postcondition,\n-                                Name_Refined_Post)\n+                     if Pragma_Name_Unmapped (Prag) in Name_Post\n+                                                     | Name_Postcondition\n+                                                     | Name_Refined_Post\n                      then\n                         Exp :=\n                           Expression\n@@ -5673,7 +5671,7 @@ package body Freeze is\n \n             --  Remaining step is to layout objects\n \n-            if Ekind_In (E, E_Variable, E_Constant, E_Loop_Parameter)\n+            if Ekind (E) in E_Variable | E_Constant | E_Loop_Parameter\n               or else Is_Formal (E)\n             then\n                Layout_Object (E);\n@@ -5684,7 +5682,7 @@ package body Freeze is\n             --  statement, move them back now directly within the enclosing\n             --  statement sequence.\n \n-            if Ekind_In (E, E_Constant, E_Variable)\n+            if Ekind (E) in E_Constant | E_Variable\n               and then not Has_Delayed_Freeze (E)\n             then\n                Explode_Initialization_Compound_Statement (E);\n@@ -6045,7 +6043,7 @@ package body Freeze is\n          --  for the case of a private type with record extension (we will do\n          --  that later when the full type is frozen).\n \n-         elsif Ekind_In (E, E_Record_Type, E_Record_Subtype) then\n+         elsif Ekind (E) in E_Record_Type | E_Record_Subtype then\n             if not In_Generic_Scope (E) then\n                Freeze_Record_Type (E);\n             end if;\n@@ -6625,9 +6623,9 @@ package body Freeze is\n \n                   begin\n                      pragma Assert\n-                       (Nam_In (Op_Name, Name_Allocate,\n-                                         Name_Deallocate,\n-                                         Name_Storage_Size));\n+                       (Op_Name in Name_Allocate\n+                                 | Name_Deallocate\n+                                 | Name_Storage_Size);\n \n                      Error_Msg_Name_1 := Op_Name;\n \n@@ -6639,7 +6637,7 @@ package body Freeze is\n \n                      Op := Get_Name_Entity_Id (Op_Name);\n                      while Present (Op) loop\n-                        if Ekind_In (Op, E_Function, E_Procedure)\n+                        if Ekind (Op) in E_Function | E_Procedure\n                           and then Scope (Op) = Current_Scope\n                         then\n                            Formal := First_Entity (Op);\n@@ -6770,7 +6768,7 @@ package body Freeze is\n             Check_Strict_Alignment (E);\n          end if;\n \n-         if Ekind_In (E, E_Record_Type, E_Record_Subtype) then\n+         if Ekind (E) in E_Record_Type | E_Record_Subtype then\n             declare\n                RC : constant Node_Id := Get_Record_Representation_Clause (E);\n             begin\n@@ -7499,7 +7497,7 @@ package body Freeze is\n \n                   --  The case we are looking for is an enumeration literal\n \n-                  if Nkind_In (N, N_Identifier, N_Character_Literal)\n+                  if Nkind (N) in N_Identifier | N_Character_Literal\n                     and then Is_Enumeration_Type (Etype (N))\n                   then\n                      --  If enumeration literal appears directly as the choice,\n@@ -7874,8 +7872,8 @@ package body Freeze is\n \n          function Clone_Id (Node : Node_Id) return Traverse_Result is\n          begin\n-            if Nkind_In (Node, N_Iterator_Specification,\n-                               N_Loop_Parameter_Specification)\n+            if Nkind (Node) in\n+                 N_Iterator_Specification | N_Loop_Parameter_Specification\n             then\n                Set_Defining_Identifier\n                  (Node, New_Copy (Defining_Identifier (Node)));\n@@ -7966,7 +7964,7 @@ package body Freeze is\n \n             --  Check that the enclosing record type can be frozen\n \n-            if Ekind_In (Entity (Node), E_Component, E_Discriminant) then\n+            if Ekind (Entity (Node)) in E_Component | E_Discriminant then\n                Check_And_Freeze_Type (Scope (Entity (Node)));\n             end if;\n \n@@ -8833,7 +8831,7 @@ package body Freeze is\n \n          --  Check attribute Extra_Accessibility_Of_Result\n \n-         if Ekind_In (E, E_Function, E_Subprogram_Type)\n+         if Ekind (E) in E_Function | E_Subprogram_Type\n            and then Needs_Result_Accessibility_Level (E)\n            and then No (Extra_Accessibility_Of_Result (E))\n          then\n@@ -9234,11 +9232,11 @@ package body Freeze is\n             --  directly.\n \n             if Nkind (Dcopy) = N_Identifier\n-              or else Nkind_In (Dcopy, N_Expanded_Name,\n-                                       N_Integer_Literal,\n-                                       N_Character_Literal,\n-                                       N_String_Literal,\n-                                       N_Real_Literal)\n+              or else Nkind (Dcopy) in N_Expanded_Name\n+                                     | N_Integer_Literal\n+                                     | N_Character_Literal\n+                                     | N_String_Literal\n+                                     | N_Real_Literal\n               or else (Nkind (Dcopy) = N_Attribute_Reference\n                         and then Attribute_Name (Dcopy) = Name_Null_Parameter)\n               or else Known_Null (Dcopy)"}, {"sha": "54d52baf2720d2ce0aef7af2eb46f246ba0dd1bc", "filename": "gcc/ada/ghost.adb", "status": "modified", "additions": 41, "deletions": 42, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fghost.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fghost.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -370,12 +370,12 @@ package body Ghost is\n                --  treated as Ghost when they contain a reference to a Ghost\n                --  entity (SPARK RM 6.9(11)).\n \n-               elsif Nam_In (Prag_Nam, Name_Global,\n-                                       Name_Depends,\n-                                       Name_Initializes,\n-                                       Name_Refined_Global,\n-                                       Name_Refined_Depends,\n-                                       Name_Refined_State)\n+               elsif Prag_Nam in Name_Global\n+                               | Name_Depends\n+                               | Name_Initializes\n+                               | Name_Refined_Global\n+                               | Name_Refined_Depends\n+                               | Name_Refined_State\n                then\n                   return True;\n                end if;\n@@ -1124,15 +1124,14 @@ package body Ghost is\n       --  When the context is a [generic] package declaration, pragma Ghost\n       --  resides in the visible declarations.\n \n-      if Nkind_In (N, N_Generic_Package_Declaration,\n-                      N_Package_Declaration)\n+      if Nkind (N) in N_Generic_Package_Declaration | N_Package_Declaration\n       then\n          Decl := First (Visible_Declarations (Specification (N)));\n \n       --  When the context is a package or a subprogram body, pragma Ghost\n       --  resides in the declarative part.\n \n-      elsif Nkind_In (N, N_Package_Body, N_Subprogram_Body) then\n+      elsif Nkind (N) in N_Package_Body | N_Subprogram_Body then\n          Decl := First (Declarations (N));\n \n       --  Otherwise pragma Ghost appears in the declarations following N\n@@ -1363,15 +1362,15 @@ package body Ghost is\n       --  A child package or subprogram declaration becomes Ghost when its\n       --  parent is Ghost (SPARK RM 6.9(2)).\n \n-      elsif Nkind_In (N, N_Generic_Function_Renaming_Declaration,\n-                         N_Generic_Package_Declaration,\n-                         N_Generic_Package_Renaming_Declaration,\n-                         N_Generic_Procedure_Renaming_Declaration,\n-                         N_Generic_Subprogram_Declaration,\n-                         N_Package_Declaration,\n-                         N_Package_Renaming_Declaration,\n-                         N_Subprogram_Declaration,\n-                         N_Subprogram_Renaming_Declaration)\n+      elsif Nkind (N) in N_Generic_Function_Renaming_Declaration\n+                       | N_Generic_Package_Declaration\n+                       | N_Generic_Package_Renaming_Declaration\n+                       | N_Generic_Procedure_Renaming_Declaration\n+                       | N_Generic_Subprogram_Declaration\n+                       | N_Package_Declaration\n+                       | N_Package_Renaming_Declaration\n+                       | N_Subprogram_Declaration\n+                       | N_Subprogram_Renaming_Declaration\n         and then Present (Parent_Spec (N))\n       then\n          Par_Id := Defining_Entity (Unit (Parent_Spec (N)));\n@@ -1569,14 +1568,14 @@ package body Ghost is\n       --  ??? could extra formal parameters cause a Ghost leak?\n \n       if Mark_Formals\n-        and then Nkind_In (N, N_Abstract_Subprogram_Declaration,\n-                              N_Formal_Abstract_Subprogram_Declaration,\n-                              N_Formal_Concrete_Subprogram_Declaration,\n-                              N_Generic_Subprogram_Declaration,\n-                              N_Subprogram_Body,\n-                              N_Subprogram_Body_Stub,\n-                              N_Subprogram_Declaration,\n-                              N_Subprogram_Renaming_Declaration)\n+        and then Nkind (N) in N_Abstract_Subprogram_Declaration\n+                            | N_Formal_Abstract_Subprogram_Declaration\n+                            | N_Formal_Concrete_Subprogram_Declaration\n+                            | N_Generic_Subprogram_Declaration\n+                            | N_Subprogram_Body\n+                            | N_Subprogram_Body_Stub\n+                            | N_Subprogram_Declaration\n+                            | N_Subprogram_Renaming_Declaration\n       then\n          Param := First (Parameter_Specifications (Specification (N)));\n          while Present (Param) loop\n@@ -1659,7 +1658,7 @@ package body Ghost is\n       --      subject to any Ghost annotation.\n \n       else\n-         pragma Assert (Nam_In (Mode, Name_Disable, Name_None, No_Name));\n+         pragma Assert (Mode in Name_Disable | Name_None | No_Name);\n          return None;\n       end if;\n    end Name_To_Ghost_Mode;\n@@ -1678,20 +1677,20 @@ package body Ghost is\n       if Is_Body (N)\n         or else Is_Declaration (N)\n         or else Nkind (N) in N_Generic_Instantiation\n-        or else Nkind (N) in N_Push_Pop_xxx_Label\n-        or else Nkind (N) in N_Raise_xxx_Error\n-        or else Nkind (N) in N_Representation_Clause\n-        or else Nkind (N) in N_Statement_Other_Than_Procedure_Call\n-        or else Nkind_In (N, N_Call_Marker,\n-                             N_Freeze_Entity,\n-                             N_Freeze_Generic_Entity,\n-                             N_Itype_Reference,\n-                             N_Pragma,\n-                             N_Procedure_Call_Statement,\n-                             N_Use_Package_Clause,\n-                             N_Use_Type_Clause,\n-                             N_Variable_Reference_Marker,\n-                             N_With_Clause)\n+                           | N_Push_Pop_xxx_Label\n+                           | N_Raise_xxx_Error\n+                           | N_Representation_Clause\n+                           | N_Statement_Other_Than_Procedure_Call\n+                           | N_Call_Marker\n+                           | N_Freeze_Entity\n+                           | N_Freeze_Generic_Entity\n+                           | N_Itype_Reference\n+                           | N_Pragma\n+                           | N_Procedure_Call_Statement\n+                           | N_Use_Package_Clause\n+                           | N_Use_Type_Clause\n+                           | N_Variable_Reference_Marker\n+                           | N_With_Clause\n       then\n          --  Only ignored Ghost nodes must be recorded in the table\n \n@@ -1815,7 +1814,7 @@ package body Ghost is\n       --  The Ghost mode of a [generic] freeze node depends on the Ghost mode\n       --  of the entity being frozen.\n \n-      elsif Nkind_In (N, N_Freeze_Entity, N_Freeze_Generic_Entity) then\n+      elsif Nkind (N) in N_Freeze_Entity | N_Freeze_Generic_Entity then\n          Set_Ghost_Mode_From_Entity (Entity (N));\n \n       --  The Ghost mode of a pragma depends on the associated entity. The"}, {"sha": "a9f48ce997e9f4db848b81c75e0074a9bf3046e7", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -1346,8 +1346,7 @@ begin\n       --  We can generate code for a package declaration or a subprogram\n       --  declaration only if it does not required a body.\n \n-      elsif Nkind_In (Main_Unit_Kind, N_Package_Declaration,\n-                                      N_Subprogram_Declaration)\n+      elsif Main_Unit_Kind in N_Package_Declaration | N_Subprogram_Declaration\n         and then\n           (not Body_Required (Main_Unit_Node)\n              or else Distribution_Stub_Mode = Generate_Caller_Stub_Body)\n@@ -1357,17 +1356,17 @@ begin\n       --  We can generate code for a generic package declaration of a generic\n       --  subprogram declaration only if does not require a body.\n \n-      elsif Nkind_In (Main_Unit_Kind, N_Generic_Package_Declaration,\n-                                      N_Generic_Subprogram_Declaration)\n+      elsif Main_Unit_Kind in\n+              N_Generic_Package_Declaration | N_Generic_Subprogram_Declaration\n         and then not Body_Required (Main_Unit_Node)\n       then\n          Back_End_Mode := Generate_Object;\n \n       --  Compilation units that are renamings do not require bodies, so we can\n       --  generate code for them.\n \n-      elsif Nkind_In (Main_Unit_Kind, N_Package_Renaming_Declaration,\n-                                      N_Subprogram_Renaming_Declaration)\n+      elsif Main_Unit_Kind in N_Package_Renaming_Declaration |\n+                              N_Subprogram_Renaming_Declaration\n       then\n          Back_End_Mode := Generate_Object;\n "}, {"sha": "7293cf24b11da343d7eb0355ef9d5488736de7ef", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -2793,9 +2793,9 @@ package body Inline is\n          else\n             Decl := Unit_Declaration_Node (Scop);\n \n-            if Nkind_In (Decl, N_Subprogram_Declaration,\n-                               N_Task_Type_Declaration,\n-                               N_Subprogram_Body_Stub)\n+            if Nkind (Decl) in N_Subprogram_Declaration\n+                             | N_Task_Type_Declaration\n+                             | N_Subprogram_Body_Stub\n             then\n                Decl := Unit_Declaration_Node (Corresponding_Body (Decl));\n             end if;\n@@ -2968,9 +2968,8 @@ package body Inline is\n                and then not GNATprove_Mode)\n \n            or else\n-             (Nkind_In (A, N_Real_Literal,\n-                           N_Integer_Literal,\n-                           N_Character_Literal)\n+             (Nkind (A) in\n+                N_Real_Literal | N_Integer_Literal | N_Character_Literal\n                and then not Address_Taken (F))\n          then\n             if Etype (F) /= Etype (A) then\n@@ -3378,10 +3377,10 @@ package body Inline is\n                --  and string literals, and attributes that yield a universal\n                --  type, because those must be resolved to a specific type.\n \n-               if Nkind_In (Expression (N), N_Aggregate,\n-                                            N_Character_Literal,\n-                                            N_Null,\n-                                            N_String_Literal)\n+               if Nkind (Expression (N)) in N_Aggregate\n+                                          | N_Character_Literal\n+                                          | N_Null\n+                                          | N_String_Literal\n                  or else Yields_Universal_Type (Expression (N))\n                then\n                   Ret :=\n@@ -4234,7 +4233,7 @@ package body Inline is\n          then\n             Conv := Current_Entity (Id);\n \n-         elsif Nkind_In (Id, N_Selected_Component, N_Expanded_Name)\n+         elsif Nkind (Id) in N_Selected_Component | N_Expanded_Name\n            and then Chars (Selector_Name (Id)) = Name_Unchecked_Conversion\n          then\n             Conv := Current_Entity (Selector_Name (Id));\n@@ -4366,13 +4365,13 @@ package body Inline is\n \n       S := First (Stats);\n       while Present (S) loop\n-         if Nkind_In (S, N_Abort_Statement,\n-                         N_Asynchronous_Select,\n-                         N_Conditional_Entry_Call,\n-                         N_Delay_Relative_Statement,\n-                         N_Delay_Until_Statement,\n-                         N_Selective_Accept,\n-                         N_Timed_Entry_Call)\n+         if Nkind (S) in N_Abort_Statement\n+                       | N_Asynchronous_Select\n+                       | N_Conditional_Entry_Call\n+                       | N_Delay_Relative_Statement\n+                       | N_Delay_Until_Statement\n+                       | N_Selective_Accept\n+                       | N_Timed_Entry_Call\n          then\n             Cannot_Inline\n               (\"cannot inline & (non-allowed statement)?\", S, Subp);\n@@ -5112,18 +5111,18 @@ package body Inline is\n             end if;\n \n             if Present (Item_Id)\n-              and then Nam_In (Chars (Item_Id), Name_Contract_Cases,\n-                                                Name_Global,\n-                                                Name_Depends,\n-                                                Name_Postcondition,\n-                                                Name_Precondition,\n-                                                Name_Refined_Global,\n-                                                Name_Refined_Depends,\n-                                                Name_Refined_Post,\n-                                                Name_Test_Case,\n-                                                Name_Unmodified,\n-                                                Name_Unreferenced,\n-                                                Name_Unused)\n+              and then Chars (Item_Id) in Name_Contract_Cases\n+                                        | Name_Global\n+                                        | Name_Depends\n+                                        | Name_Postcondition\n+                                        | Name_Precondition\n+                                        | Name_Refined_Global\n+                                        | Name_Refined_Depends\n+                                        | Name_Refined_Post\n+                                        | Name_Test_Case\n+                                        | Name_Unmodified\n+                                        | Name_Unreferenced\n+                                        | Name_Unused\n             then\n                Remove (Item);\n             end if;"}, {"sha": "6fbcdceba69e8b1069273ef282685e094148c49a", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -562,7 +562,7 @@ package body Lib.Writ is\n          Write_Info_Str (\" O\");\n          Write_Info_Char (OA_Setting (Unit_Num));\n \n-         if Ekind_In (Uent, E_Package, E_Package_Body)\n+         if Ekind (Uent) in E_Package | E_Package_Body\n            and then Present (Finalizer (Uent))\n          then\n             Write_Info_Str (\" PF\");\n@@ -1220,8 +1220,8 @@ package body Lib.Writ is\n             if Nkind (U) = N_Subprogram_Body\n               and then Present (Corresponding_Spec (U))\n               and then\n-                Ekind_In (Corresponding_Spec (U), E_Generic_Procedure,\n-                                                  E_Generic_Function)\n+                Ekind (Corresponding_Spec (U)) in E_Generic_Procedure\n+                                                | E_Generic_Function\n             then\n                null;\n "}, {"sha": "269d8eea18f228d15489993c55a67b1bce8d17f8", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -181,11 +181,11 @@ package body SPARK_Specific is\n       --  If N is the defining identifier for a subprogram, then return the\n       --  enclosing subprogram or package, not this subprogram.\n \n-      if Nkind_In (N, N_Defining_Identifier, N_Defining_Operator_Symbol)\n-        and then (Ekind (N) in Entry_Kind\n-                   or else Ekind (N) = E_Subprogram_Body\n-                   or else Ekind (N) in Generic_Subprogram_Kind\n-                   or else Ekind (N) in Subprogram_Kind)\n+      if Nkind (N) in N_Defining_Identifier | N_Defining_Operator_Symbol\n+        and then Ekind (N) in Entry_Kind\n+                            | E_Subprogram_Body\n+                            | Generic_Subprogram_Kind\n+                            | Subprogram_Kind\n       then\n          Context := Parent (Unit_Declaration_Node (N));\n "}, {"sha": "ac59ccc094f6ee3c7eb11f4c65c80077ff73e623", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -569,10 +569,9 @@ package body Lib.Xref is\n                P := Parent (P);\n \n                if Nkind (P) = N_Pragma then\n-                  if Nam_In (Pragma_Name_Unmapped (P),\n-                             Name_Warnings,\n-                             Name_Unmodified,\n-                             Name_Unreferenced)\n+                  if Pragma_Name_Unmapped (P) in Name_Warnings\n+                                               | Name_Unmodified\n+                                               | Name_Unreferenced\n                   then\n                      return False;\n                   end if;\n@@ -911,7 +910,7 @@ package body Lib.Xref is\n             --  since the attribute acts as an anonymous alias of the function\n             --  result and not as a real reference to the function.\n \n-            elsif Ekind_In (E, E_Function, E_Generic_Function)\n+            elsif Ekind (E) in E_Function | E_Generic_Function\n               and then Is_Entity_Name (N)\n               and then Is_Attribute_Result (Parent (N))\n             then\n@@ -1006,18 +1005,18 @@ package body Lib.Xref is\n \n         and then Typ /= ' '\n       then\n-         if Nkind_In (N, N_Identifier,\n-                         N_Defining_Identifier,\n-                         N_Defining_Operator_Symbol,\n-                         N_Operator_Symbol,\n-                         N_Defining_Character_Literal)\n-           or else Nkind (N) in N_Op\n+         if Nkind (N) in N_Identifier\n+                       | N_Defining_Identifier\n+                       | N_Defining_Operator_Symbol\n+                       | N_Operator_Symbol\n+                       | N_Defining_Character_Literal\n+                       | N_Op\n            or else (Nkind (N) = N_Character_Literal\n                      and then Sloc (Entity (N)) /= Standard_Location)\n          then\n             Nod := N;\n \n-         elsif Nkind_In (N, N_Expanded_Name, N_Selected_Component) then\n+         elsif Nkind (N) in N_Expanded_Name | N_Selected_Component then\n             Nod := Selector_Name (N);\n \n          else\n@@ -1135,7 +1134,7 @@ package body Lib.Xref is\n             --  reads/writes of private protected components) and not worth the\n             --  effort.\n \n-            if Ekind_In (Ent, E_Abstract_State, E_Constant, E_Variable)\n+            if Ekind (Ent) in E_Abstract_State | E_Constant | E_Variable\n               and then Present (Encapsulating_State (Ent))\n               and then Is_Single_Concurrent_Object (Encapsulating_State (Ent))\n             then\n@@ -2314,15 +2313,15 @@ package body Lib.Xref is\n                   --  Special handling for access parameters and objects and\n                   --  components of an anonymous access type.\n \n-                  if Ekind_In (Etype (XE.Key.Ent),\n-                               E_Anonymous_Access_Type,\n-                               E_Anonymous_Access_Subprogram_Type,\n-                               E_Anonymous_Access_Protected_Subprogram_Type)\n+                  if Ekind (Etype (XE.Key.Ent)) in\n+                               E_Anonymous_Access_Type\n+                             | E_Anonymous_Access_Subprogram_Type\n+                             | E_Anonymous_Access_Protected_Subprogram_Type\n                   then\n                      if Is_Formal (XE.Key.Ent)\n                        or else\n-                         Ekind_In\n-                           (XE.Key.Ent, E_Variable, E_Constant, E_Component)\n+                         Ekind (XE.Key.Ent) in\n+                           E_Variable | E_Constant | E_Component\n                      then\n                         Ctyp := 'p';\n                      end if;"}, {"sha": "e39e0b927d2cf5e78aa45b0d93571adeb2516439", "filename": "gcc/ada/namet.adb", "status": "modified", "additions": 0, "deletions": 224, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fnamet.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fnamet.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -1265,230 +1265,6 @@ package body Namet is\n       return Name_Find (Buf);\n    end Name_Find;\n \n-   -------------\n-   -- Nam_In --\n-   -------------\n-\n-   function Nam_In\n-     (T  : Name_Id;\n-      V1 : Name_Id;\n-      V2 : Name_Id) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2;\n-   end Nam_In;\n-\n-   function Nam_In\n-     (T  : Name_Id;\n-      V1 : Name_Id;\n-      V2 : Name_Id;\n-      V3 : Name_Id) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3;\n-   end Nam_In;\n-\n-   function Nam_In\n-     (T  : Name_Id;\n-      V1 : Name_Id;\n-      V2 : Name_Id;\n-      V3 : Name_Id;\n-      V4 : Name_Id) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4;\n-   end Nam_In;\n-\n-   function Nam_In\n-     (T  : Name_Id;\n-      V1 : Name_Id;\n-      V2 : Name_Id;\n-      V3 : Name_Id;\n-      V4 : Name_Id;\n-      V5 : Name_Id) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5;\n-   end Nam_In;\n-\n-   function Nam_In\n-     (T  : Name_Id;\n-      V1 : Name_Id;\n-      V2 : Name_Id;\n-      V3 : Name_Id;\n-      V4 : Name_Id;\n-      V5 : Name_Id;\n-      V6 : Name_Id) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5 or else\n-             T = V6;\n-   end Nam_In;\n-\n-   function Nam_In\n-     (T  : Name_Id;\n-      V1 : Name_Id;\n-      V2 : Name_Id;\n-      V3 : Name_Id;\n-      V4 : Name_Id;\n-      V5 : Name_Id;\n-      V6 : Name_Id;\n-      V7 : Name_Id) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5 or else\n-             T = V6 or else\n-             T = V7;\n-   end Nam_In;\n-\n-   function Nam_In\n-     (T  : Name_Id;\n-      V1 : Name_Id;\n-      V2 : Name_Id;\n-      V3 : Name_Id;\n-      V4 : Name_Id;\n-      V5 : Name_Id;\n-      V6 : Name_Id;\n-      V7 : Name_Id;\n-      V8 : Name_Id) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5 or else\n-             T = V6 or else\n-             T = V7 or else\n-             T = V8;\n-   end Nam_In;\n-\n-   function Nam_In\n-     (T  : Name_Id;\n-      V1 : Name_Id;\n-      V2 : Name_Id;\n-      V3 : Name_Id;\n-      V4 : Name_Id;\n-      V5 : Name_Id;\n-      V6 : Name_Id;\n-      V7 : Name_Id;\n-      V8 : Name_Id;\n-      V9 : Name_Id) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5 or else\n-             T = V6 or else\n-             T = V7 or else\n-             T = V8 or else\n-             T = V9;\n-   end Nam_In;\n-\n-   function Nam_In\n-     (T   : Name_Id;\n-      V1  : Name_Id;\n-      V2  : Name_Id;\n-      V3  : Name_Id;\n-      V4  : Name_Id;\n-      V5  : Name_Id;\n-      V6  : Name_Id;\n-      V7  : Name_Id;\n-      V8  : Name_Id;\n-      V9  : Name_Id;\n-      V10 : Name_Id) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5 or else\n-             T = V6 or else\n-             T = V7 or else\n-             T = V8 or else\n-             T = V9 or else\n-             T = V10;\n-   end Nam_In;\n-\n-   function Nam_In\n-     (T   : Name_Id;\n-      V1  : Name_Id;\n-      V2  : Name_Id;\n-      V3  : Name_Id;\n-      V4  : Name_Id;\n-      V5  : Name_Id;\n-      V6  : Name_Id;\n-      V7  : Name_Id;\n-      V8  : Name_Id;\n-      V9  : Name_Id;\n-      V10 : Name_Id;\n-      V11 : Name_Id) return Boolean\n-   is\n-   begin\n-      return T = V1  or else\n-             T = V2  or else\n-             T = V3  or else\n-             T = V4  or else\n-             T = V5  or else\n-             T = V6  or else\n-             T = V7  or else\n-             T = V8  or else\n-             T = V9  or else\n-             T = V10 or else\n-             T = V11;\n-   end Nam_In;\n-\n-   function Nam_In\n-     (T   : Name_Id;\n-      V1  : Name_Id;\n-      V2  : Name_Id;\n-      V3  : Name_Id;\n-      V4  : Name_Id;\n-      V5  : Name_Id;\n-      V6  : Name_Id;\n-      V7  : Name_Id;\n-      V8  : Name_Id;\n-      V9  : Name_Id;\n-      V10 : Name_Id;\n-      V11 : Name_Id;\n-      V12 : Name_Id) return Boolean\n-   is\n-   begin\n-      return T = V1  or else\n-             T = V2  or else\n-             T = V3  or else\n-             T = V4  or else\n-             T = V5  or else\n-             T = V6  or else\n-             T = V7  or else\n-             T = V8  or else\n-             T = V9  or else\n-             T = V10 or else\n-             T = V11 or else\n-             T = V12;\n-   end Nam_In;\n-\n    -----------------\n    -- Name_Equals --\n    -----------------"}, {"sha": "ce7cac1affb171a496c6a035fcb06a5f19d11dfb", "filename": "gcc/ada/namet.ads", "status": "modified", "additions": 0, "deletions": 124, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fnamet.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fnamet.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.ads?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -207,130 +207,6 @@ package Namet is\n    pragma Inline (Present);\n    --  Determine whether name Nam exists\n \n-   ------------------------------\n-   -- Name_Id Membership Tests --\n-   ------------------------------\n-\n-   --  The following functions allow a convenient notation for testing whether\n-   --  a Name_Id value matches any one of a list of possible values. In each\n-   --  case True is returned if the given T argument is equal to any of the V\n-   --  arguments. These essentially duplicate the Ada 2012 membership tests,\n-   --  but we cannot use the latter (yet) in the compiler front end, because\n-   --  of bootstrap considerations\n-\n-   function Nam_In\n-     (T  : Name_Id;\n-      V1 : Name_Id;\n-      V2 : Name_Id) return Boolean;\n-\n-   function Nam_In\n-     (T  : Name_Id;\n-      V1 : Name_Id;\n-      V2 : Name_Id;\n-      V3 : Name_Id) return Boolean;\n-\n-   function Nam_In\n-     (T  : Name_Id;\n-      V1 : Name_Id;\n-      V2 : Name_Id;\n-      V3 : Name_Id;\n-      V4 : Name_Id) return Boolean;\n-\n-   function Nam_In\n-     (T  : Name_Id;\n-      V1 : Name_Id;\n-      V2 : Name_Id;\n-      V3 : Name_Id;\n-      V4 : Name_Id;\n-      V5 : Name_Id) return Boolean;\n-\n-   function Nam_In\n-     (T  : Name_Id;\n-      V1 : Name_Id;\n-      V2 : Name_Id;\n-      V3 : Name_Id;\n-      V4 : Name_Id;\n-      V5 : Name_Id;\n-      V6 : Name_Id) return Boolean;\n-\n-   function Nam_In\n-     (T  : Name_Id;\n-      V1 : Name_Id;\n-      V2 : Name_Id;\n-      V3 : Name_Id;\n-      V4 : Name_Id;\n-      V5 : Name_Id;\n-      V6 : Name_Id;\n-      V7 : Name_Id) return Boolean;\n-\n-   function Nam_In\n-     (T  : Name_Id;\n-      V1 : Name_Id;\n-      V2 : Name_Id;\n-      V3 : Name_Id;\n-      V4 : Name_Id;\n-      V5 : Name_Id;\n-      V6 : Name_Id;\n-      V7 : Name_Id;\n-      V8 : Name_Id) return Boolean;\n-\n-   function Nam_In\n-     (T  : Name_Id;\n-      V1 : Name_Id;\n-      V2 : Name_Id;\n-      V3 : Name_Id;\n-      V4 : Name_Id;\n-      V5 : Name_Id;\n-      V6 : Name_Id;\n-      V7 : Name_Id;\n-      V8 : Name_Id;\n-      V9 : Name_Id) return Boolean;\n-\n-   function Nam_In\n-     (T   : Name_Id;\n-      V1  : Name_Id;\n-      V2  : Name_Id;\n-      V3  : Name_Id;\n-      V4  : Name_Id;\n-      V5  : Name_Id;\n-      V6  : Name_Id;\n-      V7  : Name_Id;\n-      V8  : Name_Id;\n-      V9  : Name_Id;\n-      V10 : Name_Id) return Boolean;\n-\n-   function Nam_In\n-     (T   : Name_Id;\n-      V1  : Name_Id;\n-      V2  : Name_Id;\n-      V3  : Name_Id;\n-      V4  : Name_Id;\n-      V5  : Name_Id;\n-      V6  : Name_Id;\n-      V7  : Name_Id;\n-      V8  : Name_Id;\n-      V9  : Name_Id;\n-      V10 : Name_Id;\n-      V11 : Name_Id) return Boolean;\n-\n-   function Nam_In\n-     (T   : Name_Id;\n-      V1  : Name_Id;\n-      V2  : Name_Id;\n-      V3  : Name_Id;\n-      V4  : Name_Id;\n-      V5  : Name_Id;\n-      V6  : Name_Id;\n-      V7  : Name_Id;\n-      V8  : Name_Id;\n-      V9  : Name_Id;\n-      V10 : Name_Id;\n-      V11 : Name_Id;\n-      V12 : Name_Id) return Boolean;\n-\n-   pragma Inline (Nam_In);\n-   --  Inline all above functions\n-\n    -----------------\n    -- Subprograms --\n    -----------------"}, {"sha": "29eec045caa046180cb32bfbdbcbce06f2117acd", "filename": "gcc/ada/nlists.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fnlists.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fnlists.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -991,7 +991,7 @@ package body Nlists is\n       N := Node;\n       loop\n          Next (N);\n-         exit when not Nkind_In (N, N_Pragma, N_Null_Statement);\n+         exit when Nkind (N) not in N_Pragma | N_Null_Statement;\n       end loop;\n \n       return N;"}, {"sha": "e4298e88f4bc611ec59a23cf04b3bedf8750eded", "filename": "gcc/ada/par-ch10.adb", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar-ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar-ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch10.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -511,7 +511,7 @@ package body Ch10 is\n \n       --  Another error from which it is hard to recover\n \n-      if Nkind_In (Unit_Node, N_Subprogram_Body_Stub, N_Package_Body_Stub) then\n+      if Nkind (Unit_Node) in N_Subprogram_Body_Stub | N_Package_Body_Stub then\n          Cunit_Error_Flag := True;\n          return Error;\n       end if;\n@@ -527,10 +527,10 @@ package body Ch10 is\n             Unit_Node := Specification (Unit_Node);\n          end if;\n \n-         if Nkind_In (Unit_Node, N_Package_Declaration,\n-                                 N_Subprogram_Declaration,\n-                                 N_Subprogram_Body,\n-                                 N_Subprogram_Renaming_Declaration)\n+         if Nkind (Unit_Node) in N_Package_Declaration\n+                               | N_Subprogram_Declaration\n+                               | N_Subprogram_Body\n+                               | N_Subprogram_Renaming_Declaration\n          then\n             Unit_Node := Specification (Unit_Node);\n \n@@ -541,27 +541,26 @@ package body Ch10 is\n             end if;\n          end if;\n \n-         if Nkind_In (Unit_Node, N_Task_Body,\n-                                 N_Protected_Body,\n-                                 N_Task_Type_Declaration,\n-                                 N_Protected_Type_Declaration,\n-                                 N_Single_Task_Declaration,\n-                                 N_Single_Protected_Declaration)\n+         if Nkind (Unit_Node) in N_Task_Body\n+                               | N_Protected_Body\n+                               | N_Task_Type_Declaration\n+                               | N_Protected_Type_Declaration\n+                               | N_Single_Task_Declaration\n+                               | N_Single_Protected_Declaration\n          then\n             Name_Node := Defining_Identifier (Unit_Node);\n \n-         elsif Nkind_In (Unit_Node, N_Function_Instantiation,\n-                                    N_Function_Specification,\n-                                    N_Generic_Function_Renaming_Declaration,\n-                                    N_Generic_Package_Renaming_Declaration,\n-                                    N_Generic_Procedure_Renaming_Declaration)\n-          or else\n-               Nkind_In (Unit_Node, N_Package_Body,\n-                                    N_Package_Instantiation,\n-                                    N_Package_Renaming_Declaration,\n-                                    N_Package_Specification,\n-                                    N_Procedure_Instantiation,\n-                                    N_Procedure_Specification)\n+         elsif Nkind (Unit_Node) in N_Function_Instantiation\n+                                  | N_Function_Specification\n+                                  | N_Generic_Function_Renaming_Declaration\n+                                  | N_Generic_Package_Renaming_Declaration\n+                                  | N_Generic_Procedure_Renaming_Declaration\n+          or else Nkind (Unit_Node) in N_Package_Body\n+                                  | N_Package_Instantiation\n+                                  | N_Package_Renaming_Declaration\n+                                  | N_Package_Specification\n+                                  | N_Procedure_Instantiation\n+                                  | N_Procedure_Specification\n          then\n             Name_Node := Defining_Unit_Name (Unit_Node);\n "}, {"sha": "78febbf0446dd9ceab36518b60425777a6d95f77", "filename": "gcc/ada/par-ch2.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar-ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar-ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch2.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -324,8 +324,7 @@ package body Ch2 is\n               (Identifier_Seen   => Identifier_Seen,\n                Association       => Assoc_Node,\n                Reserved_Words_OK =>\n-                 Nam_In (Prag_Name, Name_Restriction_Warnings,\n-                                    Name_Restrictions));\n+                 Prag_Name in Name_Restriction_Warnings | Name_Restrictions);\n \n             if Arg_Count = 2 and then Import_Check_Required then\n                --  Here is where we cancel the SIS active status if this pragma\n@@ -444,7 +443,7 @@ package body Ch2 is\n          P := P_Pragma;\n \n          if Nkind (P) /= N_Error\n-           and then Nam_In (Pragma_Name_Unmapped (P), Name_Assert, Name_Debug)\n+           and then Pragma_Name_Unmapped (P) in Name_Assert | Name_Debug\n          then\n             Error_Msg_Name_1 := Pragma_Name_Unmapped (P);\n             Error_Msg_N"}, {"sha": "adaa3e2a8265d0af5ee62ad4a6a9db5131fcaf56", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -123,11 +123,12 @@ package body Ch3 is\n \n    procedure Check_Restricted_Expression (N : Node_Id) is\n    begin\n-      if Nkind_In (N, N_Op_And, N_Op_Or, N_Op_Xor, N_And_Then, N_Or_Else) then\n+      if Nkind (N) in N_Op_And | N_Op_Or | N_Op_Xor | N_And_Then | N_Or_Else\n+      then\n          Check_Restricted_Expression (Left_Opnd (N));\n          Check_Restricted_Expression (Right_Opnd (N));\n \n-      elsif Nkind_In (N, N_In, N_Not_In)\n+      elsif Nkind (N) in N_In | N_Not_In\n         and then Paren_Count (N) = 0\n       then\n          Error_Msg_N (\"|this expression must be parenthesized!\", N);\n@@ -4777,7 +4778,7 @@ package body Ch3 is\n             --  Complete declaration of mangled subprogram body, for better\n             --  recovery if analysis is attempted.\n \n-            if Nkind_In (Decl, N_Subprogram_Body, N_Package_Body, N_Task_Body)\n+            if Nkind (Decl) in N_Subprogram_Body | N_Package_Body | N_Task_Body\n               and then No (Handled_Statement_Sequence (Decl))\n             then\n                Set_Handled_Statement_Sequence (Decl,"}, {"sha": "9815ca1522a489051d59fda49aab879dd77350ea", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -1907,7 +1907,7 @@ package body Ch4 is\n                      Logop := P_Logical_Operator;\n                      Restore_Scan_State (Scan_State); -- to comma/semicolon\n \n-                     if Nkind_In (Logop, N_And_Then, N_Or_Else) then\n+                     if Logop in N_And_Then | N_Or_Else then\n                         Scan; -- past comma/semicolon\n \n                         if Com then"}, {"sha": "5b002c46f06394b51dfe3f76872ab3be9d4ebee2", "filename": "gcc/ada/par-ch5.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar-ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar-ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch5.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -1307,9 +1307,9 @@ package body Ch5 is\n \n       else\n          if Style_Check and then Paren_Count (Cond) > 0 then\n-            if not Nkind_In (Cond, N_If_Expression,\n-                                   N_Case_Expression,\n-                                   N_Quantified_Expression)\n+            if Nkind (Cond) not in N_If_Expression\n+                                 | N_Case_Expression\n+                                 | N_Quantified_Expression\n               or else Paren_Count (Cond) > 1\n             then\n                Style.Check_Xtra_Parens (First_Sloc (Cond));"}, {"sha": "1ff79506b7b09a05c5fe77bb041758f460a14568", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -883,9 +883,9 @@ package body Ch6 is\n                      --  with syntactic parentheses.\n \n                      if not (Paren_Count (Expr) /= 0\n-                              or else Nkind_In (Expr, N_Aggregate,\n-                                                      N_Extension_Aggregate,\n-                                                      N_Quantified_Expression))\n+                              or else Nkind (Expr) in N_Aggregate\n+                                                    | N_Extension_Aggregate\n+                                                    | N_Quantified_Expression)\n                      then\n                         Error_Msg\n                           (\"expression function must be enclosed in \""}, {"sha": "265f187206abb089c4660140411639de70e71767", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -169,7 +169,7 @@ function Prag (Pragma_Node : Node_Id; Semi : Source_Ptr) return Node_Id is\n \n    begin\n       if Nkind (Expression (Arg)) /= N_Identifier\n-        or else not Nam_In (Chars (Argx), Name_On, Name_Off)\n+        or else Chars (Argx) not in Name_On | Name_Off\n       then\n          Error_Msg_Name_2 := Name_On;\n          Error_Msg_Name_3 := Name_Off;"}, {"sha": "1f26075f93e98fdda17767a8af7672a3cf2385d1", "filename": "gcc/ada/par-util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-util.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -181,7 +181,7 @@ package body Util is\n       if Ada_Version = Ada_95\n         and then Warn_On_Ada_2005_Compatibility\n       then\n-         if Nam_In (Token_Name, Name_Overriding, Name_Synchronized)\n+         if Token_Name in Name_Overriding | Name_Synchronized\n            or else (Token_Name = Name_Interface\n                      and then Prev_Token /= Tok_Pragma)\n          then"}, {"sha": "157965323310e31c0d4e964db7dc12dad8a322eb", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -459,9 +459,9 @@ package body Par_SCO is\n \n    function Is_Logical_Operator (N : Node_Id) return Tristate is\n    begin\n-      if Nkind_In (N, N_And_Then, N_Op_Not, N_Or_Else) then\n+      if Nkind (N) in N_And_Then | N_Op_Not | N_Or_Else then\n          return True;\n-      elsif Nkind_In (N, N_Op_And, N_Op_Or) then\n+      elsif Nkind (N) in N_Op_And | N_Op_Or then\n          return Unknown;\n       else\n          return False;\n@@ -599,9 +599,9 @@ package body Par_SCO is\n             else\n                L := Left_Opnd (N);\n \n-               if Nkind_In (N, N_Op_Or, N_Or_Else) then\n+               if Nkind (N) in N_Op_Or | N_Or_Else then\n                   C1 := '|';\n-               else pragma Assert (Nkind_In (N, N_Op_And, N_And_Then));\n+               else pragma Assert (Nkind (N) in N_Op_And | N_And_Then);\n                   C1 := '&';\n                end if;\n             end if;\n@@ -688,9 +688,9 @@ package body Par_SCO is\n                --  Doesn't this requirement of using First_Sloc need to be\n                --  documented in the spec ???\n \n-               if Nkind_In (Parent (N), N_Accept_Alternative,\n-                                        N_Delay_Alternative,\n-                                        N_Terminate_Alternative)\n+               if Nkind (Parent (N)) in N_Accept_Alternative\n+                                      | N_Delay_Alternative\n+                                      | N_Terminate_Alternative\n                then\n                   Loc := First_Sloc (N);\n                else"}, {"sha": "c00962d0707a53c8874e034baab9bd0a89d0e282", "filename": "gcc/ada/pprint.adb", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fpprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpprint.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -329,12 +329,10 @@ package body Pprint is\n                                   (Constraint (Subtype_Indication (N)));\n \n                               if List_Length (Ranges) = 1\n-                                and then\n-                                  Nkind_In\n-                                    (First (Ranges),\n-                                     N_Range,\n-                                     N_Real_Range_Specification,\n-                                     N_Signed_Integer_Type_Definition)\n+                                and then Nkind (First (Ranges)) in\n+                                           N_Range                          |\n+                                           N_Real_Range_Specification       |\n+                                           N_Signed_Integer_Type_Definition\n                               then\n                                  if Id = Attribute_First then\n                                     return\n@@ -765,8 +763,7 @@ package body Pprint is\n                --  If argument does not already account for a closing\n                --  parenthesis, count one here.\n \n-               if not Nkind_In (Right, N_Aggregate,\n-                                       N_Quantified_Expression)\n+               if Nkind (Right) not in N_Aggregate | N_Quantified_Expression\n                then\n                   Append_Paren := Append_Paren + 1;\n                end if;"}, {"sha": "dff327221a5ad8e462ddd0ad5d9e82bffd0c8ed4", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -527,9 +527,9 @@ package body Repinfo is\n \n                   List_Entities (E, Bytes_Big_Endian, True);\n \n-               elsif Ekind_In (E, E_Entry,\n-                                  E_Entry_Family,\n-                                  E_Subprogram_Type)\n+               elsif Ekind (E) in E_Entry\n+                                | E_Entry_Family\n+                                | E_Subprogram_Type\n                then\n                   if List_Representation_Info_Mechanisms then\n                      List_Subprogram_Info (E);\n@@ -558,9 +558,9 @@ package body Repinfo is\n \n                --  Note that formals are not annotated so we skip them here\n \n-               elsif Ekind_In (E, E_Constant,\n-                                  E_Loop_Parameter,\n-                                  E_Variable)\n+               elsif Ekind (E) in E_Constant\n+                                | E_Loop_Parameter\n+                                | E_Variable\n                then\n                   if List_Representation_Info >= 2 then\n                      List_Object_Info (E);\n@@ -578,12 +578,12 @@ package body Repinfo is\n \n                --  Recurse into bodies\n \n-               elsif Ekind_In (E, E_Package_Body,\n-                                  E_Protected_Body,\n-                                  E_Protected_Type,\n-                                  E_Subprogram_Body,\n-                                  E_Task_Body,\n-                                  E_Task_Type)\n+               elsif Ekind (E) in E_Package_Body\n+                                | E_Protected_Body\n+                                | E_Protected_Type\n+                                | E_Subprogram_Body\n+                                | E_Task_Body\n+                                | E_Task_Type\n                then\n                   List_Entities (E, Bytes_Big_Endian);\n "}, {"sha": "c63c881dd527834b7a6c6fadde7b3d073cca5fd1", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -237,7 +237,7 @@ package body Restrict is\n \n       --  For type conversion, check converted expression\n \n-      elsif Nkind_In (Obj, N_Unchecked_Type_Conversion, N_Type_Conversion) then\n+      elsif Nkind (Obj) in N_Unchecked_Type_Conversion | N_Type_Conversion then\n          Check_No_Implicit_Aliasing (Expression (Obj));\n          return;\n \n@@ -746,7 +746,7 @@ package body Restrict is\n                            and then Chars (Scope (Ent)) = Name_Ada\n                            and then Scope (Scope (Ent)) = Standard_Standard)\n                then\n-                  if Nkind_In (Expr, N_Identifier, N_Operator_Symbol)\n+                  if Nkind (Expr) in N_Identifier | N_Operator_Symbol\n                     and then Chars (Ent) = Chars (Expr)\n                   then\n                      Error_Msg_Node_1 := N;\n@@ -763,7 +763,7 @@ package body Restrict is\n \n                --  Here if at outer level of entity name in table\n \n-               elsif Nkind_In (Expr, N_Identifier, N_Operator_Symbol) then\n+               elsif Nkind (Expr) in N_Identifier | N_Operator_Symbol then\n                   exit;\n \n                --  Here if neither at the outer level\n@@ -977,7 +977,7 @@ package body Restrict is\n              and then\n            OK_No_Use_Of_Entity_Name (Selector_Name (N));\n \n-      elsif Nkind_In (N, N_Identifier, N_Operator_Symbol) then\n+      elsif Nkind (N) in N_Identifier | N_Operator_Symbol then\n          return True;\n \n       else\n@@ -1258,15 +1258,15 @@ package body Restrict is\n \n    function Same_Entity (E1, E2 : Node_Id) return Boolean is\n    begin\n-      if Nkind_In (E1, N_Identifier, N_Operator_Symbol)\n+      if Nkind (E1) in N_Identifier | N_Operator_Symbol\n            and then\n-         Nkind_In (E2, N_Identifier, N_Operator_Symbol)\n+         Nkind (E2) in N_Identifier | N_Operator_Symbol\n       then\n          return Chars (E1) = Chars (E2);\n \n-      elsif Nkind_In (E1, N_Selected_Component, N_Expanded_Name)\n+      elsif Nkind (E1) in N_Selected_Component | N_Expanded_Name\n               and then\n-            Nkind_In (E2, N_Selected_Component, N_Expanded_Name)\n+            Nkind (E2) in N_Selected_Component | N_Expanded_Name\n       then\n          return Same_Unit (Prefix (E1), Prefix (E2))\n                   and then\n@@ -1285,9 +1285,9 @@ package body Restrict is\n       if Nkind (U1) = N_Identifier and then Nkind (U2) = N_Identifier then\n          return Chars (U1) = Chars (U2);\n \n-      elsif Nkind_In (U1, N_Selected_Component, N_Expanded_Name)\n+      elsif Nkind (U1) in N_Selected_Component | N_Expanded_Name\n               and then\n-            Nkind_In (U2, N_Selected_Component, N_Expanded_Name)\n+            Nkind (U2) in N_Selected_Component | N_Expanded_Name\n       then\n          return Same_Unit (Prefix (U1), Prefix (U2))\n                   and then\n@@ -1534,13 +1534,13 @@ package body Restrict is\n \n       --  Now we need to find the direct name and set Boolean2 flag\n \n-      if Nkind_In (Entity, N_Identifier, N_Operator_Symbol) then\n+      if Nkind (Entity) in N_Identifier | N_Operator_Symbol then\n          Nam := Entity;\n \n       else\n          pragma Assert (Nkind (Entity) = N_Selected_Component);\n          Nam := Selector_Name (Entity);\n-         pragma Assert (Nkind_In (Nam, N_Identifier, N_Operator_Symbol));\n+         pragma Assert (Nkind (Nam) in N_Identifier | N_Operator_Symbol);\n       end if;\n \n       Set_Name_Table_Boolean2 (Chars (Nam), True);"}, {"sha": "76893753df05339b4de90ef3bcc5973e7df2a291", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -904,9 +904,9 @@ package body Rtsfind is\n       return\n         Nkind (Prf) = N_Identifier\n           and then\n-            Nam_In (Chars (Prf), Name_Text_IO,\n-                                 Name_Wide_Text_IO,\n-                                 Name_Wide_Wide_Text_IO)\n+            Chars (Prf) in Name_Text_IO\n+                         | Name_Wide_Text_IO\n+                         | Name_Wide_Wide_Text_IO\n           and then Nkind (Sel) = N_Identifier\n           and then Chars (Sel) in Text_IO_Package_Name;\n    end Is_Text_IO_Special_Unit;"}, {"sha": "98ca30d8d75088616dd7245a24b0c13a0cf954f5", "filename": "gcc/ada/scil_ll.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fscil_ll.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fscil_ll.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscil_ll.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -120,10 +120,9 @@ package body SCIL_LL is\n                null;\n \n             when N_SCIL_Membership_Test =>\n-               pragma Assert (Nkind_In (N, N_Identifier,\n-                                           N_And_Then,\n-                                           N_Or_Else,\n-                                           N_Expression_With_Actions));\n+               pragma Assert\n+                 (Nkind (N) in N_Identifier | N_And_Then | N_Or_Else |\n+                               N_Expression_With_Actions);\n                null;\n \n             when others =>"}, {"sha": "4429b6bb52db3c0458599a7b0e3ab75b162a381a", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -799,7 +799,7 @@ package body Sem is\n       --  and because the reference may become overloaded in the instance.\n \n       elsif GNATprove_Mode\n-        and then Nkind_In (N, N_Expanded_Name, N_Identifier)\n+        and then Nkind (N) in N_Expanded_Name | N_Identifier\n         and then not Is_Overloaded (N)\n         and then not Inside_A_Generic\n       then\n@@ -1739,7 +1739,7 @@ package body Sem is\n       begin\n          --  Problem does not arise with main subprograms\n \n-         if not Nkind_In (MCU, N_Package_Body, N_Package_Declaration) then\n+         if Nkind (MCU) not in N_Package_Body | N_Package_Declaration then\n             return False;\n          end if;\n \n@@ -1854,13 +1854,12 @@ package body Sem is\n                      --  N_Null_Statement will happen in case of a ghost unit\n                      --  which gets rewritten.\n \n-                     if not Nkind_In\n-                              (Unit (Withed_Unit),\n-                                 N_Generic_Package_Declaration,\n-                                 N_Package_Body,\n-                                 N_Package_Renaming_Declaration,\n-                                 N_Subprogram_Body,\n-                                 N_Null_Statement)\n+                     if Nkind (Unit (Withed_Unit)) not in\n+                          N_Generic_Package_Declaration  |\n+                          N_Package_Body                 |\n+                          N_Package_Renaming_Declaration |\n+                          N_Subprogram_Body              |\n+                          N_Null_Statement\n                      then\n                         Write_Unit_Name\n                           (Unit_Name (Get_Cunit_Unit_Number (Withed_Unit)));\n@@ -1960,7 +1959,7 @@ package body Sem is\n             --  Process the unit if it is a spec or the main unit, if it\n             --  has no previous spec or we have done all other units.\n \n-            if not Nkind_In (Item, N_Package_Body, N_Subprogram_Body)\n+            if Nkind (Item) not in N_Package_Body | N_Subprogram_Body\n               or else Acts_As_Spec (CU)\n             then\n                if CU = Main_CU and then not Do_Main then"}, {"sha": "f77230cef3cd1fe87165a585c3cb8fb783c3540a", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -960,24 +960,24 @@ package body Sem_Aggr is\n             if Nkind (Parent (N)) = N_Assignment_Statement\n               or else Inside_Init_Proc\n               or else (Is_Constrained (Typ)\n-                        and then Nkind_In (Parent (N),\n-                                           N_Parameter_Association,\n-                                           N_Function_Call,\n-                                           N_Procedure_Call_Statement,\n-                                           N_Generic_Association,\n-                                           N_Formal_Object_Declaration,\n-                                           N_Simple_Return_Statement,\n-                                           N_Object_Declaration,\n-                                           N_Component_Declaration,\n-                                           N_Parameter_Specification,\n-                                           N_Qualified_Expression,\n-                                           N_Reference,\n-                                           N_Aggregate,\n-                                           N_Extension_Aggregate,\n-                                           N_Component_Association,\n-                                           N_Case_Expression_Alternative,\n-                                           N_If_Expression,\n-                                           N_Expression_With_Actions))\n+                        and then Nkind (Parent (N)) in\n+                                   N_Parameter_Association\n+                                 | N_Function_Call\n+                                 | N_Procedure_Call_Statement\n+                                 | N_Generic_Association\n+                                 | N_Formal_Object_Declaration\n+                                 | N_Simple_Return_Statement\n+                                 | N_Object_Declaration\n+                                 | N_Component_Declaration\n+                                 | N_Parameter_Specification\n+                                 | N_Qualified_Expression\n+                                 | N_Reference\n+                                 | N_Aggregate\n+                                 | N_Extension_Aggregate\n+                                 | N_Component_Association\n+                                 | N_Case_Expression_Alternative\n+                                 | N_If_Expression\n+                                 | N_Expression_With_Actions)\n             then\n                Aggr_Resolved :=\n                  Resolve_Array_Aggregate\n@@ -1424,7 +1424,7 @@ package body Sem_Aggr is\n \n                if Is_Character_Type (Component_Typ)\n                  and then No (Next_Index (Nxt_Ind))\n-                 and then Nkind_In (Expr, N_String_Literal, N_Operator_Symbol)\n+                 and then Nkind (Expr) in N_String_Literal | N_Operator_Symbol\n                then\n                   --  A string literal used in a multidimensional array\n                   --  aggregate in place of the final one-dimensional\n@@ -1698,8 +1698,8 @@ package body Sem_Aggr is\n \n                   if Ada_Version = Ada_83\n                     and then Assoc /= First (Component_Associations (N))\n-                    and then Nkind_In (Parent (N), N_Assignment_Statement,\n-                                                   N_Object_Declaration)\n+                    and then Nkind (Parent (N)) in\n+                               N_Assignment_Statement | N_Object_Declaration\n                   then\n                      Error_Msg_N\n                        (\"(Ada 83) illegal context for OTHERS choice\", N);\n@@ -3253,9 +3253,9 @@ package body Sem_Aggr is\n          --  The ancestor must be a call or an aggregate, but a call may\n          --  have been expanded into a temporary, so check original node.\n \n-         elsif Nkind_In (Anc, N_Aggregate,\n-                              N_Extension_Aggregate,\n-                              N_Function_Call)\n+         elsif Nkind (Anc) in N_Aggregate\n+                            | N_Extension_Aggregate\n+                            | N_Function_Call\n          then\n             return True;\n \n@@ -4185,7 +4185,7 @@ package body Sem_Aggr is\n          function Has_Expansion_Delayed (Expr : Node_Id) return Boolean is\n          begin\n             return\n-               (Nkind_In (Expr, N_Aggregate, N_Extension_Aggregate)\n+               (Nkind (Expr) in N_Aggregate | N_Extension_Aggregate\n                  and then Present (Etype (Expr))\n                  and then Is_Record_Type (Etype (Expr))\n                  and then Expansion_Delayed (Expr))"}, {"sha": "16938e6ab9ea2e520215d9f84522aafd3179ab91", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 78, "deletions": 82, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -786,7 +786,7 @@ package body Sem_Attr is\n                (Nkind (Par) = N_Component_Association\n                  or else Nkind (Par) in N_Subexpr)\n             loop\n-               if Nkind_In (Par, N_Aggregate, N_Extension_Aggregate) then\n+               if Nkind (Par) in N_Aggregate | N_Extension_Aggregate then\n                   if Etype (Par) = Typ then\n                      Set_Has_Self_Reference (Par);\n \n@@ -988,9 +988,10 @@ package body Sem_Attr is\n \n                   if not In_Spec_Expression\n                     and then not Has_Completion (Scop)\n-                    and then not\n-                      Nkind_In (Parent (N), N_Discriminant_Association,\n-                                            N_Index_Or_Discriminant_Constraint)\n+                    and then\n+                      Nkind (Parent (N)) not in\n+                        N_Discriminant_Association |\n+                        N_Index_Or_Discriminant_Constraint\n                   then\n                      Error_Msg_N\n                        (\"current instance attribute must appear alone\", N);\n@@ -1113,8 +1114,7 @@ package body Sem_Attr is\n                   Kill_Current_Values (Ent);\n                   exit;\n \n-               elsif Nkind_In (PP, N_Selected_Component,\n-                                   N_Indexed_Component)\n+               elsif Nkind (PP) in N_Selected_Component | N_Indexed_Component\n                then\n                   PP := Prefix (PP);\n \n@@ -1168,10 +1168,10 @@ package body Sem_Attr is\n          begin\n             --  The \"Name\" argument of pragma Check denotes a postcondition\n \n-            if Nam_In (Nam, Name_Post,\n-                            Name_Post_Class,\n-                            Name_Postcondition,\n-                            Name_Refined_Post)\n+            if Nam in Name_Post\n+                    | Name_Post_Class\n+                    | Name_Postcondition\n+                    | Name_Refined_Post\n             then\n                null;\n \n@@ -1317,7 +1317,7 @@ package body Sem_Attr is\n \n          Prag := N;\n          while Present (Prag) loop\n-            if Nkind_In (Prag, N_Aspect_Specification, N_Pragma) then\n+            if Nkind (Prag) in N_Aspect_Specification | N_Pragma then\n                exit;\n \n             --  Prevent the search from going too far\n@@ -1332,7 +1332,7 @@ package body Sem_Attr is\n          --  The attribute is allowed to appear only in postcondition-like\n          --  aspects or pragmas.\n \n-         if Nkind_In (Prag, N_Aspect_Specification, N_Pragma) then\n+         if Nkind (Prag) in N_Aspect_Specification | N_Pragma then\n             if Nkind (Prag) = N_Aspect_Specification then\n                Prag_Nam := Chars (Identifier (Prag));\n             else\n@@ -1348,7 +1348,7 @@ package body Sem_Attr is\n             --  Attribute 'Result is allowed to appear in aspect or pragma\n             --  [Refined_]Depends (SPARK RM 6.1.5(11)).\n \n-            elsif Nam_In (Prag_Nam, Name_Depends, Name_Refined_Depends)\n+            elsif Prag_Nam in Name_Depends | Name_Refined_Depends\n               and then Aname = Name_Result\n             then\n                null;\n@@ -1361,10 +1361,10 @@ package body Sem_Attr is\n             then\n                null;\n \n-            elsif Nam_In (Prag_Nam, Name_Post,\n-                                    Name_Post_Class,\n-                                    Name_Postcondition,\n-                                    Name_Refined_Post)\n+            elsif Prag_Nam in Name_Post\n+                            | Name_Post_Class\n+                            | Name_Postcondition\n+                            | Name_Refined_Post\n             then\n                null;\n \n@@ -1408,14 +1408,14 @@ package body Sem_Attr is\n          then\n             null;\n \n-         elsif not Nkind_In (Subp_Decl, N_Abstract_Subprogram_Declaration,\n-                                        N_Entry_Declaration,\n-                                        N_Expression_Function,\n-                                        N_Generic_Subprogram_Declaration,\n-                                        N_Subprogram_Body,\n-                                        N_Subprogram_Body_Stub,\n-                                        N_Subprogram_Declaration,\n-                                        N_Subprogram_Renaming_Declaration)\n+         elsif Nkind (Subp_Decl) not in N_Abstract_Subprogram_Declaration\n+                                      | N_Entry_Declaration\n+                                      | N_Expression_Function\n+                                      | N_Generic_Subprogram_Declaration\n+                                      | N_Subprogram_Body\n+                                      | N_Subprogram_Body_Stub\n+                                      | N_Subprogram_Declaration\n+                                      | N_Subprogram_Renaming_Declaration\n          then\n             return;\n          end if;\n@@ -1905,9 +1905,9 @@ package body Sem_Attr is\n             --  the prefix of another attribute. Error is posted on parent.\n \n             if Nkind (Parent (N)) = N_Attribute_Reference\n-              and then Nam_In (Attribute_Name (Parent (N)), Name_Address,\n-                                                            Name_Code_Address,\n-                                                            Name_Access)\n+              and then Attribute_Name (Parent (N)) in Name_Address\n+                                                    | Name_Code_Address\n+                                                    | Name_Access\n             then\n                Error_Msg_Name_1 := Attribute_Name (Parent (N));\n                Error_Msg_N (\"illegal prefix for % attribute\", Parent (N));\n@@ -2366,8 +2366,8 @@ package body Sem_Attr is\n          --  parameter or component association, which is wrong.\n \n          if Is_List_Member (N)\n-           and then not Nkind_In (Parent (N), N_Procedure_Call_Statement,\n-                                              N_Aggregate)\n+           and then Nkind (Parent (N)) not in\n+                      N_Procedure_Call_Statement | N_Aggregate\n          then\n             null;\n          else\n@@ -2423,8 +2423,8 @@ package body Sem_Attr is\n             null;\n \n          elsif Is_List_Member (N)\n-           and then not Nkind_In (Parent (N), N_Procedure_Call_Statement,\n-                                              N_Aggregate)\n+           and then Nkind (Parent (N)) not in\n+                      N_Procedure_Call_Statement | N_Aggregate\n          then\n             null;\n \n@@ -2662,7 +2662,7 @@ package body Sem_Attr is\n          if Nkind (Nod) = N_Identifier then\n             return;\n \n-         elsif Nkind_In (Nod, N_Selected_Component, N_Expanded_Name) then\n+         elsif Nkind (Nod) in N_Selected_Component | N_Expanded_Name then\n             Check_Unit_Name (Prefix (Nod));\n \n             if Nkind (Selector_Name (Nod)) = N_Identifier then\n@@ -3032,7 +3032,7 @@ package body Sem_Attr is\n          --  parameterless call. Entry attributes are handled specially below.\n \n          if Is_Entity_Name (P)\n-           and then not Nam_In (Aname, Name_Count, Name_Caller)\n+           and then Aname not in Name_Count | Name_Caller\n          then\n             Check_Parameterless_Call (P);\n          end if;\n@@ -3043,7 +3043,7 @@ package body Sem_Attr is\n             --  primitive entry wrappers, the attributes Count, and Caller\n             --  require a context check\n \n-            if Nam_In (Aname, Name_Count, Name_Caller) then\n+            if Aname in Name_Count | Name_Caller then\n                declare\n                   Count : Natural := 0;\n                   I     : Interp_Index;\n@@ -3341,7 +3341,7 @@ package body Sem_Attr is\n       begin\n          Check_E0;\n \n-         if Nkind_In (P, N_Identifier, N_Expanded_Name) then\n+         if Nkind (P) in N_Identifier | N_Expanded_Name then\n             Ent := Entity (P);\n \n             if not Is_Entry (Ent) then\n@@ -3411,7 +3411,7 @@ package body Sem_Attr is\n          Check_E0;\n \n          if Nkind (P) = N_Attribute_Reference\n-           and then Nam_In (Attribute_Name (P), Name_Elab_Body, Name_Elab_Spec)\n+           and then Attribute_Name (P) in Name_Elab_Body | Name_Elab_Spec\n          then\n             null;\n \n@@ -3598,7 +3598,7 @@ package body Sem_Attr is\n       begin\n          Check_E0;\n \n-         if Nkind_In (P, N_Identifier, N_Expanded_Name) then\n+         if Nkind (P) in N_Identifier | N_Expanded_Name then\n             Ent := Entity (P);\n \n             if Ekind (Ent) /= E_Entry then\n@@ -3664,10 +3664,10 @@ package body Sem_Attr is\n                exit;\n \n             elsif Ekind (Scope (Ent)) in Task_Kind\n-              and then not Ekind_In (S, E_Block,\n-                                        E_Entry,\n-                                        E_Entry_Family,\n-                                        E_Loop)\n+              and then Ekind (S) not in E_Block\n+                                      | E_Entry\n+                                      | E_Entry_Family\n+                                      | E_Loop\n             then\n                Error_Attr (\"Attribute % cannot appear in inner unit\", N);\n \n@@ -4538,12 +4538,13 @@ package body Sem_Attr is\n             --  that the pragma appears in an appropriate loop location.\n \n             if Nkind (Original_Node (Stmt)) = N_Pragma\n-              and then Nam_In (Pragma_Name_Unmapped (Original_Node (Stmt)),\n-                               Name_Loop_Invariant,\n-                               Name_Loop_Variant,\n-                               Name_Assert,\n-                               Name_Assert_And_Cut,\n-                               Name_Assume)\n+              and then\n+                Pragma_Name_Unmapped (Original_Node (Stmt))\n+                  in Name_Loop_Invariant\n+                   | Name_Loop_Variant\n+                   | Name_Assert\n+                   | Name_Assert_And_Cut\n+                   | Name_Assume\n             then\n                Encl_Prag := Original_Node (Stmt);\n \n@@ -4606,7 +4607,7 @@ package body Sem_Attr is\n \n             if Ekind (Scop) = E_Loop and then Scop = Loop_Id then\n                exit;\n-            elsif Ekind_In (Scop, E_Block, E_Loop, E_Return_Statement) then\n+            elsif Ekind (Scop) in E_Block | E_Loop | E_Return_Statement then\n                null;\n             else\n                Error_Attr\n@@ -5000,8 +5001,7 @@ package body Sem_Attr is\n                --  another attribute 'Old.\n \n                if Nkind (Nod) = N_Attribute_Reference\n-                 and then Nam_In (Attribute_Name (Nod), Name_Old,\n-                                                        Name_Result)\n+                 and then Attribute_Name (Nod) in Name_Old | Name_Result\n                then\n                   Error_Msg_Name_1 := Attribute_Name (Nod);\n                   Error_Msg_Name_2 := Name_Old;\n@@ -5146,7 +5146,7 @@ package body Sem_Attr is\n             then\n                Pref_Id := Entity (Name (P));\n \n-               if Ekind_In (Spec_Id, E_Function, E_Generic_Function)\n+               if Ekind (Spec_Id) in E_Function | E_Generic_Function\n                  and then Pref_Id = Spec_Id\n                then\n                   Error_Msg_Warn := SPARK_Mode /= On;\n@@ -5432,7 +5432,7 @@ package body Sem_Attr is\n \n             elsif Nkind (Subp_Spec) = N_Function_Specification\n               and then Present (Generic_Parent (Subp_Spec))\n-              and then Ekind_In (Pref_Id, E_Generic_Function, E_Function)\n+              and then Ekind (Pref_Id) in E_Generic_Function | E_Function\n             then\n                if Generic_Parent (Subp_Spec) = Pref_Id then\n                   return True;\n@@ -5538,7 +5538,7 @@ package body Sem_Attr is\n                --  functions, or the prefix must be generic and the spec\n                --  must be nongeneric (i.e. it must denote an instance).\n \n-               if (Ekind_In (Pref_Id, E_Function, E_Generic_Function)\n+               if (Ekind (Pref_Id) in E_Function | E_Generic_Function\n                     and then Ekind (Pref_Id) = Ekind (Spec_Id))\n                  or else\n                    (Ekind (Pref_Id) = E_Generic_Function\n@@ -6615,7 +6615,7 @@ package body Sem_Attr is\n                   Negative := False;\n                end if;\n \n-               if not Nkind_In (Expr, N_Integer_Literal, N_Real_Literal) then\n+               if Nkind (Expr) not in N_Integer_Literal | N_Real_Literal then\n                   Error_Attr\n                     (\"named number for % attribute must be simple literal\", N);\n                end if;\n@@ -7814,8 +7814,7 @@ package body Sem_Attr is\n                begin\n                   --  P'Enum_Rep case\n \n-                  if Ekind_In (Entity (P), E_Constant,\n-                                           E_Enumeration_Literal)\n+                  if Ekind (Entity (P)) in E_Constant | E_Enumeration_Literal\n                   then\n                      Enum_Expr := P;\n \n@@ -8111,7 +8110,7 @@ package body Sem_Attr is\n \n       --  Second foldable possibility is an array object (RM 4.9(8))\n \n-      elsif Ekind_In (P_Entity, E_Variable, E_Constant)\n+      elsif Ekind (P_Entity) in E_Variable | E_Constant\n         and then Is_Array_Type (Etype (P_Entity))\n         and then (not Is_Generic_Type (Etype (P_Entity)))\n       then\n@@ -10482,10 +10481,10 @@ package body Sem_Attr is\n       --  An exception is the GNAT attribute Constrained_Array which is\n       --  defined to be a static attribute in all cases.\n \n-      if Nkind_In (N, N_Integer_Literal,\n-                      N_Real_Literal,\n-                      N_Character_Literal,\n-                      N_String_Literal)\n+      if Nkind (N) in N_Integer_Literal\n+                    | N_Real_Literal\n+                    | N_Character_Literal\n+                    | N_String_Literal\n         or else (Is_Entity_Name (N)\n                   and then Ekind (Entity (N)) = E_Enumeration_Literal)\n       then\n@@ -10592,8 +10591,8 @@ package body Sem_Attr is\n \n             if Is_Record_Type (Current_Scope)\n               and then\n-                Nkind_In (Parent (N), N_Discriminant_Association,\n-                                      N_Index_Or_Discriminant_Constraint)\n+                Nkind (Parent (N)) in N_Discriminant_Association\n+                                    | N_Index_Or_Discriminant_Constraint\n             then\n                Indic := Parent (Parent (N));\n                while Present (Indic)\n@@ -10656,24 +10655,21 @@ package body Sem_Attr is\n \n          begin\n             loop\n-               if Nkind_In (PP, N_Selected_Component,\n-                                N_Indexed_Component)\n-               then\n+               if Nkind (PP) in N_Selected_Component | N_Indexed_Component then\n                   PP := Prefix (PP);\n \n                elsif Comes_From_Source (PP)\n-                 and then Nkind_In (PP, N_Type_Conversion,\n-                                        N_Unchecked_Type_Conversion)\n+                 and then Nkind (PP) in N_Type_Conversion\n+                                      | N_Unchecked_Type_Conversion\n                  and then Is_Array_Type (Etype (PP))\n                then\n                   return False;\n \n                elsif Comes_From_Source (PP)\n                  and then Nkind (PP) = N_Qualified_Expression\n                  and then Is_Array_Type (Etype (PP))\n-                 and then Nkind_In (Original_Node (Expression (PP)),\n-                             N_Aggregate,\n-                             N_Extension_Aggregate)\n+                 and then Nkind (Original_Node (Expression (PP))) in\n+                            N_Aggregate | N_Extension_Aggregate\n                then\n                   return False;\n \n@@ -10793,7 +10789,7 @@ package body Sem_Attr is\n             --  test, which breaks several filed tests???\n \n             if Ekind (Typ) = E_Anonymous_Access_Type\n-              and then Nkind_In (Parent (N), N_Op_Eq, N_Op_Ne)\n+              and then Nkind (Parent (N)) in N_Op_Eq | N_Op_Ne\n               and then False\n             then\n                Error_Msg_N (\"need unique type to resolve 'Access\", N);\n@@ -10894,10 +10890,10 @@ package body Sem_Attr is\n                --  also be accessibility checks on those, this is where the\n                --  checks can eventually be centralized ???\n \n-               if Ekind_In (Btyp, E_Access_Protected_Subprogram_Type,\n-                                  E_Access_Subprogram_Type,\n-                                  E_Anonymous_Access_Protected_Subprogram_Type,\n-                                  E_Anonymous_Access_Subprogram_Type)\n+               if Ekind (Btyp) in E_Access_Protected_Subprogram_Type\n+                                | E_Access_Subprogram_Type\n+                                | E_Anonymous_Access_Protected_Subprogram_Type\n+                                | E_Anonymous_Access_Subprogram_Type\n                then\n                   --  Deal with convention mismatch\n \n@@ -11413,8 +11409,8 @@ package body Sem_Attr is\n                end if;\n             end if;\n \n-            if Ekind_In (Btyp, E_Access_Protected_Subprogram_Type,\n-                               E_Anonymous_Access_Protected_Subprogram_Type)\n+            if Ekind (Btyp) in E_Access_Protected_Subprogram_Type\n+                             | E_Anonymous_Access_Protected_Subprogram_Type\n             then\n                if Is_Entity_Name (P)\n                  and then not Is_Protected_Type (Scope (Entity (P)))\n@@ -11451,8 +11447,8 @@ package body Sem_Attr is\n                   Check_Internal_Protected_Use (N, Entity (P));\n                end if;\n \n-            elsif Ekind_In (Btyp, E_Access_Subprogram_Type,\n-                                  E_Anonymous_Access_Subprogram_Type)\n+            elsif Ekind (Btyp) in E_Access_Subprogram_Type\n+                                | E_Anonymous_Access_Subprogram_Type\n               and then Ekind (Etype (N)) = E_Access_Protected_Subprogram_Type\n             then\n                Error_Msg_F (\"context requires a non-protected subprogram\", P);\n@@ -11594,7 +11590,7 @@ package body Sem_Attr is\n                     and then Comes_From_Source (Subp_Id)\n                     and then Comes_From_Source (N)\n                     and then In_Open_Scopes (Scop)\n-                    and then Ekind_In (Scop, E_Block, E_Procedure, E_Function)\n+                    and then Ekind (Scop) in E_Block | E_Procedure | E_Function\n                     and then not Has_Completion (Subp_Id)\n                     and then No (Elaboration_Entity (Subp_Id))\n                     and then Nkind (Subp_Decl) = N_Subprogram_Declaration"}, {"sha": "4a16c124823e7766a54aa335d2ada09862e47b45", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -711,11 +711,11 @@ package body Sem_Aux is\n \n    begin\n       pragma Assert\n-        (Nkind_In (N, N_Aspect_Specification,\n-                      N_Attribute_Definition_Clause,\n-                      N_Enumeration_Representation_Clause,\n-                      N_Pragma,\n-                      N_Record_Representation_Clause));\n+        (Nkind (N) in N_Aspect_Specification\n+                    | N_Attribute_Definition_Clause\n+                    | N_Enumeration_Representation_Clause\n+                    | N_Pragma\n+                    | N_Record_Representation_Clause);\n \n       Item := First_Rep_Item (E);\n       while Present (Item) loop\n@@ -877,13 +877,9 @@ package body Sem_Aux is\n \n    function Is_Body (N : Node_Id) return Boolean is\n    begin\n-      return\n-        Nkind (N) in N_Body_Stub\n-          or else Nkind_In (N, N_Entry_Body,\n-                               N_Package_Body,\n-                               N_Protected_Body,\n-                               N_Subprogram_Body,\n-                               N_Task_Body);\n+      return Nkind (N) in\n+        N_Body_Stub       | N_Entry_Body | N_Package_Body | N_Protected_Body |\n+        N_Subprogram_Body | N_Task_Body;\n    end Is_Body;\n \n    ---------------------\n@@ -1072,8 +1068,7 @@ package body Sem_Aux is\n          Kind := Nkind (Original_Node (Parent (E)));\n \n          return\n-           Nkind_In (Kind, N_Formal_Object_Declaration,\n-                           N_Formal_Type_Declaration)\n+           Kind in N_Formal_Object_Declaration | N_Formal_Type_Declaration\n              or else Is_Formal_Subprogram (E)\n              or else\n                (Ekind (E) = E_Package"}, {"sha": "be1e67e57c6d2bfd4e4e396244e2f806b0dbd313", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -793,8 +793,8 @@ package body Sem_Cat is\n          if Ekind (E) in Subprogram_Kind then\n             Declaration := Unit_Declaration_Node (E);\n \n-            if Nkind_In (Declaration, N_Subprogram_Body,\n-                                      N_Subprogram_Renaming_Declaration)\n+            if Nkind (Declaration) in\n+                 N_Subprogram_Body | N_Subprogram_Renaming_Declaration\n             then\n                Specification := Corresponding_Spec (Declaration);\n             end if;\n@@ -1003,7 +1003,7 @@ package body Sem_Cat is\n       --  Body of RCI unit does not need validation\n \n       if Is_Remote_Call_Interface (E)\n-        and then Nkind_In (N, N_Package_Body, N_Subprogram_Body)\n+        and then Nkind (N) in N_Package_Body | N_Subprogram_Body\n       then\n          return;\n       end if;\n@@ -1506,8 +1506,8 @@ package body Sem_Cat is\n \n             null;\n \n-         elsif Ekind_In (Param_Type, E_Anonymous_Access_Type,\n-                                     E_Anonymous_Access_Subprogram_Type)\n+         elsif Ekind (Param_Type) in E_Anonymous_Access_Type\n+                                   | E_Anonymous_Access_Subprogram_Type\n          then\n             --  From RM E.2.2(14), no anonymous access parameter other than\n             --  controlling ones may be used (because an anonymous access\n@@ -1583,9 +1583,9 @@ package body Sem_Cat is\n                  (\"limited type not allowed in rci unit\", Parent (E));\n                Explain_Limited_Type (E, Parent (E));\n \n-            elsif Ekind_In (E, E_Generic_Function,\n-                               E_Generic_Package,\n-                               E_Generic_Procedure)\n+            elsif Ekind (E) in E_Generic_Function\n+                             | E_Generic_Package\n+                             | E_Generic_Procedure\n             then\n                Error_Msg_N (\"generic declaration not allowed in rci unit\",\n                  Parent (E));"}, {"sha": "76b68a190c046960c156813dc6c2b960e408d84f", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 72, "deletions": 80, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -413,8 +413,8 @@ package body Sem_Ch10 is\n \n                elsif Nkind (Cont_Item) = N_Pragma\n                  and then\n-                   Nam_In (Pragma_Name_Unmapped (Cont_Item),\n-                           Name_Elaborate, Name_Elaborate_All)\n+                   Pragma_Name_Unmapped (Cont_Item)\n+                     in Name_Elaborate | Name_Elaborate_All\n                  and then not Used_Type_Or_Elab\n                then\n                   Prag_Unit :=\n@@ -724,8 +724,8 @@ package body Sem_Ch10 is\n \n             --  Verify that the library unit is a package declaration\n \n-            if not Nkind_In (Unit (Lib_Unit), N_Package_Declaration,\n-                                              N_Generic_Package_Declaration)\n+            if Nkind (Unit (Lib_Unit)) not in\n+                 N_Package_Declaration | N_Generic_Package_Declaration\n             then\n                Error_Msg_N\n                  (\"no legal package declaration for package body\", N);\n@@ -952,8 +952,8 @@ package body Sem_Ch10 is\n       --  Analyze the contract of a [generic] subprogram that acts as a\n       --  compilation unit after all compilation pragmas have been analyzed.\n \n-      if Nkind_In (Unit_Node, N_Generic_Subprogram_Declaration,\n-                              N_Subprogram_Declaration)\n+      if Nkind (Unit_Node) in\n+           N_Generic_Subprogram_Declaration | N_Subprogram_Declaration\n       then\n          Analyze_Entry_Or_Subprogram_Contract (Defining_Entity (Unit_Node));\n       end if;\n@@ -998,10 +998,10 @@ package body Sem_Ch10 is\n       --  next compilation, which is either the main unit or some other unit\n       --  in the context.\n \n-      if Nkind_In (Unit_Node, N_Package_Declaration,\n-                              N_Package_Renaming_Declaration,\n-                              N_Subprogram_Declaration)\n-        or else Nkind (Unit_Node) in N_Generic_Declaration\n+      if Nkind (Unit_Node) in N_Package_Declaration\n+                            | N_Package_Renaming_Declaration\n+                            | N_Subprogram_Declaration\n+                            | N_Generic_Declaration\n         or else (Nkind (Unit_Node) = N_Subprogram_Body\n                   and then Acts_As_Spec (Unit_Node))\n       then\n@@ -1149,9 +1149,9 @@ package body Sem_Ch10 is\n          --  are triggered by these subprograms.\n \n          if GNATprove_Mode\n-           and then Nkind_In (Unit_Node, N_Function_Instantiation,\n-                                         N_Procedure_Instantiation,\n-                                         N_Subprogram_Body)\n+           and then Nkind (Unit_Node) in N_Function_Instantiation\n+                                       | N_Procedure_Instantiation\n+                                       | N_Subprogram_Body\n          then\n             declare\n                Spec : Node_Id;\n@@ -1190,10 +1190,10 @@ package body Sem_Ch10 is\n       --  units manufactured by the compiler never need elab checks.\n \n       if Comes_From_Source (N)\n-        and then Nkind_In (Unit_Node, N_Package_Declaration,\n-                                      N_Generic_Package_Declaration,\n-                                      N_Subprogram_Declaration,\n-                                      N_Generic_Subprogram_Declaration)\n+        and then Nkind (Unit_Node) in N_Package_Declaration\n+                                    | N_Generic_Package_Declaration\n+                                    | N_Subprogram_Declaration\n+                                    | N_Generic_Subprogram_Declaration\n       then\n          declare\n             Loc  : constant Source_Ptr       := Sloc (N);\n@@ -1478,10 +1478,10 @@ package body Sem_Ch10 is\n                --  Verify that the illegal contexts given in 10.1.2 (18/2) are\n                --  properly rejected, including renaming declarations.\n \n-               if not Nkind_In (Ukind, N_Package_Declaration,\n-                                       N_Subprogram_Declaration)\n-                 and then Ukind not in N_Generic_Declaration\n-                 and then Ukind not in N_Generic_Instantiation\n+               if Ukind not in N_Package_Declaration\n+                             | N_Subprogram_Declaration\n+                             | N_Generic_Declaration\n+                             | N_Generic_Instantiation\n                then\n                   Error_Msg_N (\"limited with_clause not allowed here\", Item);\n \n@@ -1536,10 +1536,9 @@ package body Sem_Ch10 is\n                         if Item /= It\n                           and then Nkind (It) = N_With_Clause\n                           and then not Limited_Present (It)\n-                          and then\n-                            Nkind_In (Unit (Library_Unit (It)),\n-                                      N_Package_Declaration,\n-                                      N_Package_Renaming_Declaration)\n+                          and then Nkind (Unit (Library_Unit (It))) in\n+                                     N_Package_Declaration |\n+                                     N_Package_Renaming_Declaration\n                         then\n                            if Nkind (Unit (Library_Unit (It))) =\n                                                       N_Package_Declaration\n@@ -2022,9 +2021,8 @@ package body Sem_Ch10 is\n       --  Verify that the identifier for the stub is unique within this\n       --  declarative part.\n \n-      if Nkind_In (Parent (N), N_Block_Statement,\n-                               N_Package_Body,\n-                               N_Subprogram_Body)\n+      if Nkind (Parent (N)) in\n+           N_Block_Statement | N_Package_Body | N_Subprogram_Body\n       then\n          Decl := First (Declarations (Parent (N)));\n          while Present (Decl) and then Decl /= N loop\n@@ -2361,8 +2359,7 @@ package body Sem_Ch10 is\n                Remove_Scope;\n             end if;\n \n-            if Nkind_In (Unit (Lib_Spec), N_Package_Body,\n-                                          N_Subprogram_Body)\n+            if Nkind (Unit (Lib_Spec)) in N_Package_Body | N_Subprogram_Body\n             then\n                Remove_Context (Library_Unit (Lib_Spec));\n             end if;\n@@ -2655,9 +2652,8 @@ package body Sem_Ch10 is\n          if Nkind (Nam) = N_Selected_Component\n            and then Nkind (Prefix (Nam)) = N_Identifier\n            and then Chars (Prefix (Nam)) = Name_Gnat\n-           and then Nam_In (Chars (Selector_Name (Nam)),\n-                            Name_Most_Recent_Exception,\n-                            Name_Exception_Traces)\n+           and then Chars (Selector_Name (Nam))\n+                      in Name_Most_Recent_Exception | Name_Exception_Traces\n          then\n             Check_Restriction (No_Exception_Propagation, N);\n             Special_Exception_Package_Used := True;\n@@ -2967,7 +2963,7 @@ package body Sem_Ch10 is\n    --  Start of processing for Check_Private_Child_Unit\n \n    begin\n-      if Nkind_In (Lib_Unit, N_Package_Body, N_Subprogram_Body) then\n+      if Nkind (Lib_Unit) in N_Package_Body | N_Subprogram_Body then\n          Curr_Unit := Defining_Entity (Unit (Library_Unit (N)));\n          Par_Lib   := Curr_Unit;\n \n@@ -3074,7 +3070,7 @@ package body Sem_Ch10 is\n \n                elsif Curr_Private\n                  or else Private_Present (Item)\n-                 or else Nkind_In (Lib_Unit, N_Package_Body, N_Subunit)\n+                 or else Nkind (Lib_Unit) in N_Package_Body | N_Subunit\n                  or else (Nkind (Lib_Unit) = N_Subprogram_Body\n                            and then not Acts_As_Spec (Parent (Lib_Unit)))\n                then\n@@ -3101,11 +3097,9 @@ package body Sem_Ch10 is\n       Kind : constant Node_Kind := Nkind (Par);\n \n    begin\n-      if Nkind_In (Kind, N_Package_Body,\n-                         N_Subprogram_Body,\n-                         N_Task_Body,\n-                         N_Protected_Body)\n-        and then Nkind_In (Parent (Par), N_Compilation_Unit, N_Subunit)\n+      if Kind in\n+           N_Package_Body | N_Subprogram_Body | N_Task_Body | N_Protected_Body\n+        and then Nkind (Parent (Par)) in N_Compilation_Unit | N_Subunit\n       then\n          null;\n \n@@ -3202,11 +3196,11 @@ package body Sem_Ch10 is\n       --  on a child unit implies that the implicit with on the parent is also\n       --  private.\n \n-      if Nkind_In (Unit (N), N_Generic_Package_Declaration,\n-                             N_Package_Declaration,\n-                             N_Generic_Subprogram_Declaration,\n-                             N_Subprogram_Declaration,\n-                             N_Subprogram_Body)\n+      if Nkind (Unit (N)) in N_Generic_Package_Declaration\n+                           | N_Package_Declaration\n+                           | N_Generic_Subprogram_Declaration\n+                           | N_Subprogram_Declaration\n+                           | N_Subprogram_Body\n       then\n          Set_Private_Present (Withn, Private_Present (Item));\n       end if;\n@@ -3715,10 +3709,10 @@ package body Sem_Ch10 is\n          Install_Siblings (Defining_Entity (Unit (Library_Unit (N))), N);\n       end if;\n \n-      if Nkind_In (Lib_Unit, N_Generic_Package_Declaration,\n-                             N_Generic_Subprogram_Declaration,\n-                             N_Package_Declaration,\n-                             N_Subprogram_Declaration)\n+      if Nkind (Lib_Unit) in N_Generic_Package_Declaration\n+                           | N_Generic_Subprogram_Declaration\n+                           | N_Package_Declaration\n+                           | N_Subprogram_Declaration\n       then\n          if Is_Child_Spec (Lib_Unit) then\n             Lib_Parent := Defining_Entity (Unit (Parent_Spec (Lib_Unit)));\n@@ -3908,9 +3902,8 @@ package body Sem_Ch10 is\n          elsif Private_Present (Parent (Item))\n             or else Curr_Private\n             or else Private_Present (Item)\n-            or else Nkind_In (Unit (Parent (Item)), N_Package_Body,\n-                                                    N_Subprogram_Body,\n-                                                    N_Subunit)\n+            or else Nkind (Unit (Parent (Item))) in\n+                      N_Package_Body | N_Subprogram_Body | N_Subunit\n          then\n             --  Current unit is private, of descendant of a private unit\n \n@@ -4068,9 +4061,8 @@ package body Sem_Ch10 is\n             then\n                if not Private_Present (Item)\n                  or else Private_Present (N)\n-                 or else Nkind_In (Unit (N), N_Package_Body,\n-                                             N_Subprogram_Body,\n-                                             N_Subunit)\n+                 or else Nkind (Unit (N)) in\n+                           N_Package_Body | N_Subprogram_Body | N_Subunit\n                then\n                   Install_Limited_With_Clause (Item);\n                end if;\n@@ -4162,9 +4154,9 @@ package body Sem_Ch10 is\n       end if;\n \n       if Ekind (P_Name) = E_Generic_Package\n-        and then not Nkind_In (Lib_Unit, N_Generic_Subprogram_Declaration,\n-                                         N_Generic_Package_Declaration)\n-        and then Nkind (Lib_Unit) not in N_Generic_Renaming_Declaration\n+        and then Nkind (Lib_Unit) not in N_Generic_Subprogram_Declaration\n+                                       | N_Generic_Package_Declaration\n+                                       | N_Generic_Renaming_Declaration\n       then\n          Error_Msg_N\n            (\"child of a generic package must be a generic unit\", Lib_Unit);\n@@ -4627,17 +4619,17 @@ package body Sem_Ch10 is\n                --  Save for subsequent examination of import pragmas.\n \n                if Comes_From_Source (Decl)\n-                 and then (Nkind_In (Decl, N_Subprogram_Declaration,\n-                                           N_Subprogram_Renaming_Declaration,\n-                                           N_Generic_Subprogram_Declaration))\n+                 and then (Nkind (Decl) in N_Subprogram_Declaration\n+                                         | N_Subprogram_Renaming_Declaration\n+                                         | N_Generic_Subprogram_Declaration)\n                then\n                   Append_Elmt (Defining_Entity (Decl), Subp_List);\n \n                --  Package declaration of generic package declaration. We need\n                --  to recursively examine nested declarations.\n \n-               elsif Nkind_In (Decl, N_Package_Declaration,\n-                                     N_Generic_Package_Declaration)\n+               elsif Nkind (Decl) in N_Package_Declaration\n+                                   | N_Generic_Package_Declaration\n                then\n                   Check_Declarations (Specification (Decl));\n \n@@ -4657,14 +4649,14 @@ package body Sem_Ch10 is\n             Decl := First (Private_Declarations (Spec));\n             while Present (Decl) loop\n                if Comes_From_Source (Decl)\n-                 and then (Nkind_In (Decl, N_Subprogram_Declaration,\n-                                           N_Subprogram_Renaming_Declaration,\n-                                           N_Generic_Subprogram_Declaration))\n+                 and then Nkind (Decl) in N_Subprogram_Declaration\n+                                        | N_Subprogram_Renaming_Declaration\n+                                        | N_Generic_Subprogram_Declaration\n                then\n                   Append_Elmt (Defining_Entity (Decl), Subp_List);\n \n-               elsif Nkind_In (Decl, N_Package_Declaration,\n-                                     N_Generic_Package_Declaration)\n+               elsif Nkind (Decl) in N_Package_Declaration\n+                                   | N_Generic_Package_Declaration\n                then\n                   Check_Declarations (Specification (Decl));\n \n@@ -4899,8 +4891,8 @@ package body Sem_Ch10 is\n             --  corresponding spec, otherwise follow pointer to parent spec.\n \n             if Present (Library_Unit (Aux_Unit))\n-              and then Nkind_In (Unit (Aux_Unit),\n-                                 N_Package_Body, N_Subprogram_Body)\n+              and then Nkind (Unit (Aux_Unit)) in\n+                         N_Package_Body | N_Subprogram_Body\n             then\n                if Aux_Unit = Library_Unit (Aux_Unit) then\n \n@@ -5551,7 +5543,7 @@ package body Sem_Ch10 is\n       E1 : constant Entity_Id := Defining_Entity (Unit (U1));\n       E2 : Entity_Id;\n    begin\n-      if Nkind_In (Unit (U2), N_Package_Body, N_Subprogram_Body) then\n+      if Nkind (Unit (U2)) in N_Package_Body | N_Subprogram_Body then\n          E2 := Defining_Entity (Unit (Library_Unit (U2)));\n          return Is_Ancestor_Package (E1, E2);\n       else\n@@ -6058,12 +6050,12 @@ package body Sem_Ch10 is\n \n             --  Types\n \n-            elsif Nkind_In (Decl, N_Full_Type_Declaration,\n-                                  N_Incomplete_Type_Declaration,\n-                                  N_Private_Extension_Declaration,\n-                                  N_Private_Type_Declaration,\n-                                  N_Protected_Type_Declaration,\n-                                  N_Task_Type_Declaration)\n+            elsif Nkind (Decl) in N_Full_Type_Declaration\n+                                | N_Incomplete_Type_Declaration\n+                                | N_Private_Extension_Declaration\n+                                | N_Private_Type_Declaration\n+                                | N_Protected_Type_Declaration\n+                                | N_Task_Type_Declaration\n             then\n                Def_Id := Defining_Entity (Decl);\n \n@@ -6082,8 +6074,8 @@ package body Sem_Ch10 is\n                      (Nkind (Def) = N_Derived_Type_Definition\n                         and then Present (Record_Extension_Part (Def)));\n \n-               elsif Nkind_In (Decl, N_Incomplete_Type_Declaration,\n-                                     N_Private_Type_Declaration)\n+               elsif Nkind (Decl) in N_Incomplete_Type_Declaration\n+                                   | N_Private_Type_Declaration\n                then\n                   Is_Tagged := Tagged_Present (Decl);\n \n@@ -6365,7 +6357,7 @@ package body Sem_Ch10 is\n       then\n          Set_Body_Needed_For_SAL (Unit_Name);\n \n-      elsif Ekind_In (Unit_Name, E_Generic_Procedure, E_Generic_Function) then\n+      elsif Ekind (Unit_Name) in E_Generic_Procedure | E_Generic_Function then\n          Set_Body_Needed_For_SAL (Unit_Name);\n \n       elsif Is_Subprogram (Unit_Name)"}, {"sha": "940c93b946c5e42c31059ee1eb23d7945db11ec7", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -433,7 +433,7 @@ package body Sem_Ch11 is\n \n       if ((Is_Subprogram (Current_Scope) or else Is_Entry (Current_Scope))\n            and then Chars (Current_Scope) /= Name_uPostconditions)\n-         or else Ekind_In (Current_Scope, E_Block, E_Task_Type)\n+         or else Ekind (Current_Scope) in E_Block | E_Task_Type\n       then\n          Warn_On_Useless_Assignments (Current_Scope);\n       end if;\n@@ -537,7 +537,7 @@ package body Sem_Ch11 is\n             --  Skip past null statements and pragmas\n \n             while Present (P)\n-              and then Nkind_In (P, N_Null_Statement, N_Pragma)\n+              and then Nkind (P) in N_Null_Statement | N_Pragma\n             loop\n                P := Prev (P);\n             end loop;\n@@ -594,11 +594,9 @@ package body Sem_Ch11 is\n \n       if No (Exception_Id) then\n          P := Parent (N);\n-         while not Nkind_In (P, N_Exception_Handler,\n-                                N_Subprogram_Body,\n-                                N_Package_Body,\n-                                N_Task_Body,\n-                                N_Entry_Body)\n+         while Nkind (P) not in\n+                 N_Exception_Handler | N_Subprogram_Body | N_Package_Body |\n+                 N_Task_Body         | N_Entry_Body\n          loop\n             P := Parent (P);\n          end loop;"}, {"sha": "cbf27e216eedf9518bd1d055c41daf581bc28d2f", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 90, "deletions": 92, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -1573,9 +1573,9 @@ package body Sem_Ch12 is\n                         (Defining_Unit_Name (Specification (Analyzed_Formal)));\n \n                when N_Formal_Package_Declaration =>\n-                  exit when Nkind_In (Kind, N_Formal_Package_Declaration,\n-                                            N_Generic_Package_Declaration,\n-                                            N_Package_Declaration);\n+                  exit when Kind in N_Formal_Package_Declaration\n+                                  | N_Generic_Package_Declaration\n+                                  | N_Package_Declaration;\n \n                when N_Use_Package_Clause\n                   | N_Use_Type_Clause\n@@ -1589,10 +1589,10 @@ package body Sem_Ch12 is\n \n                   exit when\n                     Kind not in N_Formal_Subprogram_Declaration\n-                      and then not Nkind_In (Kind, N_Subprogram_Declaration,\n-                                                   N_Freeze_Entity,\n-                                                   N_Null_Statement,\n-                                                   N_Itype_Reference)\n+                      and then Kind not in N_Subprogram_Declaration\n+                                         | N_Freeze_Entity\n+                                         | N_Null_Statement\n+                                         | N_Itype_Reference\n                       and then Chars (Defining_Identifier (Formal)) =\n                                Chars (Defining_Identifier (Analyzed_Formal));\n             end case;\n@@ -2103,10 +2103,10 @@ package body Sem_Ch12 is\n \n                            S := Current_Scope;\n                            while Present (S) loop\n-                              if Ekind_In (S, E_Block,\n-                                              E_Function,\n-                                              E_Loop,\n-                                              E_Procedure)\n+                              if Ekind (S) in E_Block\n+                                            | E_Function\n+                                            | E_Loop\n+                                            | E_Procedure\n                               then\n                                  Needs_Freezing := False;\n                                  exit;\n@@ -2250,9 +2250,9 @@ package body Sem_Ch12 is\n       if Nkind (Def) = N_Constrained_Array_Definition then\n          DSS := First (Discrete_Subtype_Definitions (Def));\n          while Present (DSS) loop\n-            if Nkind_In (DSS, N_Subtype_Indication,\n-                              N_Range,\n-                              N_Attribute_Reference)\n+            if Nkind (DSS) in N_Subtype_Indication\n+                            | N_Range\n+                            | N_Attribute_Reference\n             then\n                Error_Msg_N (\"only a subtype mark is allowed in a formal\", DSS);\n             end if;\n@@ -5032,7 +5032,7 @@ package body Sem_Ch12 is\n          while Present (S) and then S /= Standard_Standard loop\n             if Is_Generic_Instance (S)\n               and then (In_Package_Body (S)\n-                         or else Ekind_In (S, E_Procedure, E_Function))\n+                         or else Ekind (S) in E_Procedure | E_Function)\n             then\n                --  We still have to remove the entities of the enclosing\n                --  instance from direct visibility.\n@@ -5201,7 +5201,7 @@ package body Sem_Ch12 is\n                Set_Is_Generic_Instance (Inst, True);\n \n                if In_Package_Body (Inst)\n-                 or else Ekind_In (S, E_Procedure, E_Function)\n+                 or else Ekind (S) in E_Procedure | E_Function\n                then\n                   E := First_Entity (Instances (J));\n                   while Present (E) loop\n@@ -5974,7 +5974,7 @@ package body Sem_Ch12 is\n       if Nkind (Assoc) /= Nkind (N) then\n          return Assoc;\n \n-      elsif Nkind_In (Assoc, N_Aggregate, N_Extension_Aggregate) then\n+      elsif Nkind (Assoc) in N_Aggregate | N_Extension_Aggregate then\n          return Assoc;\n \n       else\n@@ -5994,11 +5994,11 @@ package body Sem_Ch12 is\n \n          if (Nkind (Assoc) = N_Identifier or else Nkind (Assoc) in N_Op)\n            and then Present (Associated_Node (Assoc))\n-           and then (Nkind_In (Associated_Node (Assoc), N_Function_Call,\n-                                                        N_Explicit_Dereference,\n-                                                        N_Integer_Literal,\n-                                                        N_Real_Literal,\n-                                                        N_String_Literal))\n+           and then Nkind (Associated_Node (Assoc)) in N_Function_Call\n+                                                     | N_Explicit_Dereference\n+                                                     | N_Integer_Literal\n+                                                     | N_Real_Literal\n+                                                     | N_String_Literal\n          then\n             Assoc := Associated_Node (Assoc);\n          end if;\n@@ -6506,9 +6506,9 @@ package body Sem_Ch12 is\n          if Kind = N_Formal_Type_Declaration then\n             return;\n \n-         elsif Nkind_In (Kind, N_Formal_Object_Declaration,\n-                               N_Formal_Package_Declaration)\n-           or else Kind in N_Formal_Subprogram_Declaration\n+         elsif Kind in N_Formal_Object_Declaration\n+                     | N_Formal_Package_Declaration\n+                     | N_Formal_Subprogram_Declaration\n          then\n             null;\n \n@@ -6701,9 +6701,8 @@ package body Sem_Ch12 is\n          --  If the formal entity comes from a formal declaration, it was\n          --  defaulted in the formal package, and no check is needed on it.\n \n-         elsif Nkind_In (Original_Node (Parent (E2)),\n-                         N_Formal_Object_Declaration,\n-                         N_Formal_Type_Declaration)\n+         elsif Nkind (Original_Node (Parent (E2))) in\n+                 N_Formal_Object_Declaration | N_Formal_Type_Declaration\n          then\n             --  If the formal is a tagged type the corresponding class-wide\n             --  type has been generated as well, and it must be skipped.\n@@ -7958,11 +7957,11 @@ package body Sem_Ch12 is\n \n       --  Special casing for identifiers and other entity names and operators\n \n-      if Nkind_In (New_N, N_Character_Literal,\n-                          N_Expanded_Name,\n-                          N_Identifier,\n-                          N_Operator_Symbol)\n-        or else Nkind (New_N) in N_Op\n+      if Nkind (New_N) in N_Character_Literal\n+                        | N_Expanded_Name\n+                        | N_Identifier\n+                        | N_Operator_Symbol\n+                        | N_Op\n       then\n          if not Instantiating then\n \n@@ -8006,10 +8005,9 @@ package body Sem_Ch12 is\n                end if;\n \n             elsif No (Ent)\n-              or else\n-                not Nkind_In (Ent, N_Defining_Identifier,\n-                                   N_Defining_Character_Literal,\n-                                   N_Defining_Operator_Symbol)\n+              or else Nkind (Ent) not in N_Defining_Identifier\n+                                       | N_Defining_Character_Literal\n+                                       | N_Defining_Operator_Symbol\n               or else No (Scope (Ent))\n               or else\n                 (Scope (Ent) = Current_Instantiated_Parent.Gen_Id\n@@ -8176,9 +8174,9 @@ package body Sem_Ch12 is\n                   then\n                      Set_Entity (New_N, Entity (Name (Assoc)));\n \n-                  elsif Nkind_In (Assoc, N_Defining_Identifier,\n-                                         N_Defining_Character_Literal,\n-                                         N_Defining_Operator_Symbol)\n+                  elsif Nkind (Assoc) in N_Defining_Identifier\n+                                       | N_Defining_Character_Literal\n+                                       | N_Defining_Operator_Symbol\n                     and then Expander_Active\n                   then\n                      --  Inlining case: we are copying a tree that contains\n@@ -8387,7 +8385,7 @@ package body Sem_Ch12 is\n             Set_Assignment_OK (Name (New_N), True);\n          end if;\n \n-      elsif Nkind_In (N, N_Aggregate, N_Extension_Aggregate) then\n+      elsif Nkind (N) in N_Aggregate | N_Extension_Aggregate then\n          if not Instantiating then\n             Set_Associated_Node (N, New_N);\n \n@@ -8507,7 +8505,7 @@ package body Sem_Ch12 is\n          --  Do not copy Comment or Ident pragmas their content is relevant to\n          --  the generic unit, not to the instantiating unit.\n \n-         if Nam_In (Pragma_Name_Unmapped (N), Name_Comment, Name_Ident) then\n+         if Pragma_Name_Unmapped (N) in Name_Comment | Name_Ident then\n             New_N := Make_Null_Statement (Sloc (N));\n \n          --  Do not copy pragmas generated from aspects because the pragmas do\n@@ -8527,7 +8525,7 @@ package body Sem_Ch12 is\n             Copy_Descendants;\n          end if;\n \n-      elsif Nkind_In (N, N_Integer_Literal, N_Real_Literal) then\n+      elsif Nkind (N) in N_Integer_Literal | N_Real_Literal then\n \n          --  No descendant fields need traversing\n \n@@ -9226,10 +9224,10 @@ package body Sem_Ch12 is\n \n       else\n          Inst := Next (Decl);\n-         while not Nkind_In (Inst, N_Formal_Package_Declaration,\n-                                   N_Function_Instantiation,\n-                                   N_Package_Instantiation,\n-                                   N_Procedure_Instantiation)\n+         while Nkind (Inst) not in N_Formal_Package_Declaration\n+                                 | N_Function_Instantiation\n+                                 | N_Package_Instantiation\n+                                 | N_Procedure_Instantiation\n          loop\n             Next (Inst);\n          end loop;\n@@ -9522,7 +9520,7 @@ package body Sem_Ch12 is\n          while Present (P)\n            and then Nkind (Parent (P)) /= N_Compilation_Unit\n          loop\n-            if Nkind_In (P, N_Package_Body, N_Subprogram_Body) then\n+            if Nkind (P) in N_Package_Body | N_Subprogram_Body then\n                if Nkind (Parent (P)) = N_Subunit then\n                   return Corresponding_Stub (Parent (P));\n                else\n@@ -9620,8 +9618,8 @@ package body Sem_Ch12 is\n                   --  the current scope as well.\n \n                   elsif Present (Next (N))\n-                    and then Nkind_In (Next (N), N_Subprogram_Body,\n-                                                 N_Package_Body)\n+                    and then Nkind (Next (N)) in N_Subprogram_Body\n+                                               | N_Package_Body\n                     and then Comes_From_Source (Next (N))\n                   then\n                      null;\n@@ -9835,8 +9833,8 @@ package body Sem_Ch12 is\n \n       Must_Delay :=\n         (Gen_Unit = Act_Unit\n-          and then (Nkind_In (Gen_Unit, N_Generic_Package_Declaration,\n-                                        N_Package_Declaration)\n+          and then (Nkind (Gen_Unit) in N_Generic_Package_Declaration\n+                                      | N_Package_Declaration\n                      or else (Gen_Unit = Body_Unit\n                                and then True_Sloc (N, Act_Unit) <\n                                           Sloc (Orig_Body)))\n@@ -9907,7 +9905,7 @@ package body Sem_Ch12 is\n             --  Freeze package enclosing instance of inner generic after\n             --  instance of enclosing generic.\n \n-            elsif Nkind_In (Parent (N), N_Package_Body, N_Subprogram_Body)\n+            elsif Nkind (Parent (N)) in N_Package_Body | N_Subprogram_Body\n               and then In_Same_Declarative_Part\n                          (Parent (Freeze_Node (Par)), Parent (N))\n             then\n@@ -10910,10 +10908,10 @@ package body Sem_Ch12 is\n          end if;\n \n          if (Present (Act_E) and then Is_Overloadable (Act_E))\n-           or else Nkind_In (Act, N_Attribute_Reference,\n-                                  N_Indexed_Component,\n-                                  N_Character_Literal,\n-                                  N_Explicit_Dereference)\n+           or else Nkind (Act) in N_Attribute_Reference\n+                                | N_Indexed_Component\n+                                | N_Character_Literal\n+                                | N_Explicit_Dereference\n          then\n             return;\n          end if;\n@@ -11012,10 +11010,10 @@ package body Sem_Ch12 is\n          Nam := Actual;\n \n       elsif Present (Default_Name (Formal)) then\n-         if not Nkind_In (Default_Name (Formal), N_Attribute_Reference,\n-                                                 N_Selected_Component,\n-                                                 N_Indexed_Component,\n-                                                 N_Character_Literal)\n+         if Nkind (Default_Name (Formal)) not in N_Attribute_Reference\n+                                               | N_Selected_Component\n+                                               | N_Indexed_Component\n+                                               | N_Character_Literal\n            and then Present (Entity (Default_Name (Formal)))\n          then\n             Nam := New_Occurrence_Of (Entity (Default_Name (Formal)), Loc);\n@@ -11588,8 +11586,8 @@ package body Sem_Ch12 is\n \n       if Ada_Version >= Ada_2005\n         and then Present (Actual_Decl)\n-        and then Nkind_In (Actual_Decl, N_Formal_Object_Declaration,\n-                                        N_Object_Declaration)\n+        and then Nkind (Actual_Decl) in N_Formal_Object_Declaration\n+                                      | N_Object_Declaration\n         and then Nkind (Analyzed_Formal) = N_Formal_Object_Declaration\n         and then not Has_Null_Exclusion (Actual_Decl)\n         and then Has_Null_Exclusion (Analyzed_Formal)\n@@ -12652,8 +12650,8 @@ package body Sem_Ch12 is\n                                  Root_Type (Act_T)))\n \n            or else\n-             (Ekind_In (Gen_T, E_Anonymous_Access_Subprogram_Type,\n-                               E_Anonymous_Access_Type)\n+             (Ekind (Gen_T) in E_Anonymous_Access_Subprogram_Type\n+                             | E_Anonymous_Access_Type\n                and then Ekind (Act_T) = Ekind (Gen_T)\n                and then Subtypes_Statically_Match\n                           (Designated_Type (Gen_T), Designated_Type (Act_T)));\n@@ -14052,8 +14050,8 @@ package body Sem_Ch12 is\n             Set_Generic_Parent_Type (Decl_Node, Ancestor);\n          end if;\n \n-      elsif Nkind_In (Def, N_Formal_Private_Type_Definition,\n-                           N_Formal_Incomplete_Type_Definition)\n+      elsif Nkind (Def) in N_Formal_Private_Type_Definition\n+                         | N_Formal_Incomplete_Type_Definition\n       then\n          Set_Generic_Parent_Type (Decl_Node, A_Gen_T);\n       end if;\n@@ -14204,8 +14202,8 @@ package body Sem_Ch12 is\n             --  For a subprogram instantiation, omit instantiations intrinsic\n             --  operations (Unchecked_Conversions, etc.) that have no bodies.\n \n-            elsif Nkind_In (Decl, N_Function_Instantiation,\n-                                  N_Procedure_Instantiation)\n+            elsif Nkind (Decl) in N_Function_Instantiation\n+                                | N_Procedure_Instantiation\n               and then not Is_Intrinsic_Subprogram (Entity (Name (Decl)))\n             then\n                Append_Elmt (Decl, Previous_Instances);\n@@ -14447,10 +14445,10 @@ package body Sem_Ch12 is\n                                           (Last (Visible_Declarations\n                                             (Specification (Info.Act_Decl))));\n                               begin\n-                                 while Nkind_In (Decl,\n-                                   N_Null_Statement,\n-                                   N_Pragma,\n-                                   N_Subprogram_Renaming_Declaration)\n+                                 while Nkind (Decl) in\n+                                   N_Null_Statement                  |\n+                                   N_Pragma                          |\n+                                   N_Subprogram_Renaming_Declaration\n                                  loop\n                                     Decl := Prev (Decl);\n                                  end loop;\n@@ -15169,9 +15167,9 @@ package body Sem_Ch12 is\n          --  explicitly now, in order to remain consistent with the view of the\n          --  parent type.\n \n-         if Ekind_In (Typ, E_Private_Type,\n-                           E_Limited_Private_Type,\n-                           E_Record_Type_With_Private)\n+         if Ekind (Typ) in E_Private_Type\n+                         | E_Limited_Private_Type\n+                         | E_Record_Type_With_Private\n          then\n             Dep_Elmt := First_Elmt (Private_Dependents (Typ));\n             while Present (Dep_Elmt) loop\n@@ -15658,9 +15656,9 @@ package body Sem_Ch12 is\n             --  preserve in this case, since the expansion will be redone in\n             --  the instance.\n \n-            if not Nkind_In (E, N_Defining_Character_Literal,\n-                                N_Defining_Identifier,\n-                                N_Defining_Operator_Symbol)\n+            if Nkind (E) not in N_Defining_Character_Literal\n+                              | N_Defining_Identifier\n+                              | N_Defining_Operator_Symbol\n             then\n                Set_Associated_Node (N, Empty);\n                Set_Etype (N, Empty);\n@@ -15751,7 +15749,7 @@ package body Sem_Ch12 is\n          --  its value. Otherwise the folding will happen in any instantiation.\n \n          elsif Nkind (Parent (N)) = N_Selected_Component\n-           and then Nkind_In (Parent (N2), N_Integer_Literal, N_Real_Literal)\n+           and then Nkind (Parent (N2)) in N_Integer_Literal | N_Real_Literal\n          then\n             if Present (Entity (Original_Node (Parent (N2))))\n               and then Is_Global (Entity (Original_Node (Parent (N2))))\n@@ -16053,12 +16051,12 @@ package body Sem_Ch12 is\n             --  global references within their aspects due to the timing of\n             --  annotation analysis.\n \n-            if Nkind_In (Nod, N_Generic_Package_Declaration,\n-                              N_Generic_Subprogram_Declaration,\n-                              N_Package_Body,\n-                              N_Package_Body_Stub,\n-                              N_Subprogram_Body,\n-                              N_Subprogram_Body_Stub)\n+            if Nkind (Nod) in N_Generic_Package_Declaration\n+                            | N_Generic_Subprogram_Declaration\n+                            | N_Package_Body\n+                            | N_Package_Body_Stub\n+                            | N_Subprogram_Body\n+                            | N_Subprogram_Body_Stub\n             then\n                --  Since the capture of global references is done on the\n                --  unanalyzed generic template, there is no information around\n@@ -16248,7 +16246,7 @@ package body Sem_Ch12 is\n                --  constant folding which will be repeated in the instance.\n                --  Is this still needed???\n \n-               elsif Nkind_In (N2, N_Integer_Literal, N_Real_Literal)\n+               elsif Nkind (N2) in N_Integer_Literal | N_Real_Literal\n                  and then Is_Entity_Name (Original_Node (N2))\n                then\n                   Set_Associated_Node (N, Original_Node (N2));\n@@ -16350,9 +16348,9 @@ package body Sem_Ch12 is\n \n                --  The operator was folded into a literal\n \n-               elsif Nkind_In (N2, N_Integer_Literal,\n-                                   N_Real_Literal,\n-                                   N_String_Literal)\n+               elsif Nkind (N2) in N_Integer_Literal\n+                                 | N_Real_Literal\n+                                 | N_String_Literal\n                then\n                   if Present (Original_Node (N2))\n                     and then Nkind (Original_Node (N2)) = Nkind (N)\n@@ -16462,12 +16460,12 @@ package body Sem_Ch12 is\n \n          --  Aggregates\n \n-         elsif Nkind_In (N, N_Aggregate, N_Extension_Aggregate) then\n+         elsif Nkind (N) in N_Aggregate | N_Extension_Aggregate then\n             Save_References_In_Aggregate (N);\n \n          --  Character literals, operator symbols\n \n-         elsif Nkind_In (N, N_Character_Literal, N_Operator_Symbol) then\n+         elsif Nkind (N) in N_Character_Literal | N_Operator_Symbol then\n             Save_References_In_Char_Lit_Or_Op_Symbol (N);\n \n          --  Defining identifiers"}, {"sha": "30cade8d63ba59fb80fe68a4fec03b48de2040a1", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 62, "deletions": 67, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -985,7 +985,7 @@ package body Sem_Ch13 is\n             function Find_Type (N : Node_Id) return Traverse_Result is\n             begin\n                if N = Typ\n-                 or else (Nkind_In (N, N_Identifier, N_Expanded_Name)\n+                 or else (Nkind (N) in N_Identifier | N_Expanded_Name\n                            and then Present (Entity (N))\n                            and then Entity (N) = Typ)\n                then\n@@ -1587,11 +1587,11 @@ package body Sem_Ch13 is\n          --    package body Pack is\n          --       pragma Prag;\n \n-         if Nkind_In (N, N_Entry_Body,\n-                         N_Package_Body,\n-                         N_Protected_Body,\n-                         N_Subprogram_Body,\n-                         N_Task_Body)\n+         if Nkind (N) in N_Entry_Body\n+                       | N_Package_Body\n+                       | N_Protected_Body\n+                       | N_Subprogram_Body\n+                       | N_Task_Body\n          then\n             Decls := Declarations (N);\n \n@@ -1611,8 +1611,8 @@ package body Sem_Ch13 is\n          --    package Pack is\n          --       pragma Prag;\n \n-         elsif Nkind_In (N, N_Generic_Package_Declaration,\n-                            N_Package_Declaration)\n+         elsif Nkind (N) in N_Generic_Package_Declaration\n+                          | N_Package_Declaration\n          then\n             Decls := Visible_Declarations (Specification (N));\n \n@@ -2098,10 +2098,9 @@ package body Sem_Ch13 is\n                   begin\n                      while Present (Disc) loop\n                         if Chars (Expr) = Chars (Disc)\n-                          and then Ekind_In\n-                            (Etype (Disc),\n-                             E_Anonymous_Access_Subprogram_Type,\n-                             E_Anonymous_Access_Type)\n+                          and then Ekind (Etype (Disc)) in\n+                            E_Anonymous_Access_Subprogram_Type |\n+                            E_Anonymous_Access_Type\n                         then\n                            Set_Has_Implicit_Dereference (E);\n                            Set_Has_Implicit_Dereference (Disc);\n@@ -2169,7 +2168,7 @@ package body Sem_Ch13 is\n                begin\n                   --  The relaxed parameter is a formal parameter\n \n-                  if Nkind_In (Param, N_Identifier, N_Expanded_Name) then\n+                  if Nkind (Param) in N_Identifier | N_Expanded_Name then\n                      Analyze (Param);\n \n                      declare\n@@ -2203,7 +2202,7 @@ package body Sem_Ch13 is\n                      begin\n                         if Present (Pref)\n                           and then\n-                            Nkind_In (Pref, N_Identifier, N_Expanded_Name)\n+                            Nkind (Pref) in N_Identifier | N_Expanded_Name\n                           and then\n                             Entity (Pref) = Subp_Id\n                         then\n@@ -2586,11 +2585,11 @@ package body Sem_Ch13 is\n             begin\n                --  Check valid declarations for 'Yield\n \n-               if (Nkind_In (N, N_Abstract_Subprogram_Declaration,\n-                                N_Entry_Declaration,\n-                                N_Generic_Subprogram_Declaration,\n-                                N_Subprogram_Declaration)\n-                     or else Nkind (N) in N_Formal_Subprogram_Declaration)\n+               if Nkind (N) in N_Abstract_Subprogram_Declaration\n+                             | N_Entry_Declaration\n+                             | N_Generic_Subprogram_Declaration\n+                             | N_Subprogram_Declaration\n+                             | N_Formal_Subprogram_Declaration\n                  and then not Within_Protected_Type (E)\n                then\n                   null;\n@@ -3243,8 +3242,7 @@ package body Sem_Ch13 is\n                   | Aspect_Interrupt_Priority\n                   | Aspect_Priority\n                =>\n-                  if Nkind_In (N, N_Subprogram_Body,\n-                                  N_Subprogram_Declaration)\n+                  if Nkind (N) in N_Subprogram_Body | N_Subprogram_Declaration\n                   then\n                      --  Analyze the aspect expression\n \n@@ -3434,8 +3432,8 @@ package body Sem_Ch13 is\n                      Context := Instance_Spec (Context);\n                   end if;\n \n-                  if Nkind_In (Context, N_Generic_Package_Declaration,\n-                                        N_Package_Declaration)\n+                  if Nkind (Context) in N_Generic_Package_Declaration\n+                                      | N_Package_Declaration\n                   then\n                      Make_Aitem_Pragma\n                        (Pragma_Argument_Associations => New_List (\n@@ -3661,8 +3659,8 @@ package body Sem_Ch13 is\n                      Context := Instance_Spec (Context);\n                   end if;\n \n-                  if Nkind_In (Context, N_Generic_Package_Declaration,\n-                                        N_Package_Declaration)\n+                  if Nkind (Context) in N_Generic_Package_Declaration\n+                                      | N_Package_Declaration\n                   then\n                      Make_Aitem_Pragma\n                        (Pragma_Argument_Associations => New_List (\n@@ -3709,8 +3707,8 @@ package body Sem_Ch13 is\n                      Context := Instance_Spec (Context);\n                   end if;\n \n-                  if Nkind_In (Context, N_Generic_Package_Declaration,\n-                                        N_Package_Declaration)\n+                  if Nkind (Context) in N_Generic_Package_Declaration\n+                                      | N_Package_Declaration\n                   then\n                      Make_Aitem_Pragma\n                        (Pragma_Argument_Associations => New_List (\n@@ -3811,8 +3809,8 @@ package body Sem_Ch13 is\n                --  Part_Of\n \n                when Aspect_Part_Of =>\n-                  if Nkind_In (N, N_Object_Declaration,\n-                                  N_Package_Instantiation)\n+                  if Nkind (N) in N_Object_Declaration\n+                                | N_Package_Instantiation\n                     or else Is_Single_Concurrent_Type_Declaration (N)\n                   then\n                      Make_Aitem_Pragma\n@@ -4204,7 +4202,7 @@ package body Sem_Ch13 is\n \n                   if Class_Present (Aspect)\n                     and then Is_Concurrent_Type (Current_Scope)\n-                    and then Ekind_In (E, E_Entry, E_Function, E_Procedure)\n+                    and then Ekind (E) in E_Entry | E_Function | E_Procedure\n                   then\n                      Error_Msg_Name_1 := Original_Aspect_Pragma_Name (Aspect);\n                      Error_Msg_N\n@@ -4449,8 +4447,8 @@ package body Sem_Ch13 is\n \n                   if A_Id in Library_Unit_Aspects\n                     and then\n-                      Nkind_In (N, N_Package_Declaration,\n-                                   N_Generic_Package_Declaration)\n+                      Nkind (N) in N_Package_Declaration\n+                                 | N_Generic_Package_Declaration\n                     and then Nkind (Parent (N)) /= N_Compilation_Unit\n \n                     --  Aspect is legal on a local instantiation of a library-\n@@ -4672,7 +4670,7 @@ package body Sem_Ch13 is\n             --  When delay is not required and the context is a package or a\n             --  subprogram body, insert the pragma in the body declarations.\n \n-            elsif Nkind_In (N, N_Package_Body, N_Subprogram_Body) then\n+            elsif Nkind (N) in N_Package_Body | N_Subprogram_Body then\n                if No (Declarations (N)) then\n                   Set_Declarations (N, New_List);\n                end if;\n@@ -6000,7 +5998,7 @@ package body Sem_Ch13 is\n             if Ignore_Rep_Clauses then\n                Set_Address_Taken (U_Ent);\n \n-               if Ekind_In (U_Ent, E_Variable, E_Constant) then\n+               if Ekind (U_Ent) in E_Variable | E_Constant then\n                   Record_Rep_Item (U_Ent, N);\n                end if;\n \n@@ -6079,7 +6077,7 @@ package body Sem_Ch13 is\n \n             --  Case of address clause for an object\n \n-            elsif Ekind_In (U_Ent, E_Constant, E_Variable) then\n+            elsif Ekind (U_Ent) in E_Constant | E_Variable then\n                declare\n                   Expr  : constant Node_Id := Expression (N);\n                   O_Ent : Entity_Id;\n@@ -7183,7 +7181,7 @@ package body Sem_Ch13 is\n                   Nam);\n                return;\n \n-            elsif not Ekind_In (U_Ent, E_Access_Type, E_General_Access_Type)\n+            elsif Ekind (U_Ent) not in E_Access_Type | E_General_Access_Type\n             then\n                Error_Msg_N\n                  (\"storage pool can only be given for access types\", Nam);\n@@ -7586,10 +7584,10 @@ package body Sem_Ch13 is\n          while Present (Decl) loop\n             DeclO := Original_Node (Decl);\n             if Comes_From_Source (DeclO)\n-              and not Nkind_In (DeclO, N_Pragma,\n-                                       N_Use_Package_Clause,\n-                                       N_Use_Type_Clause,\n-                                       N_Implicit_Label_Declaration)\n+              and Nkind (DeclO) not in N_Pragma\n+                                     | N_Use_Package_Clause\n+                                     | N_Use_Type_Clause\n+                                     | N_Implicit_Label_Declaration\n             then\n                Error_Msg_N\n                  (\"this declaration not allowed in machine code subprogram\",\n@@ -7618,9 +7616,8 @@ package body Sem_Ch13 is\n                null;\n \n             elsif Comes_From_Source (StmtO)\n-              and then not Nkind_In (StmtO, N_Pragma,\n-                                            N_Label,\n-                                            N_Code_Statement)\n+              and then Nkind (StmtO) not in\n+                         N_Pragma | N_Label | N_Code_Statement\n             then\n                Error_Msg_N\n                  (\"this statement is not allowed in machine code subprogram\",\n@@ -9142,7 +9139,7 @@ package body Sem_Ch13 is\n \n          --  Identifier (other than static expression) case\n \n-         else pragma Assert (Nkind_In (N, N_Expanded_Name, N_Identifier));\n+         else pragma Assert (Nkind (N) in N_Expanded_Name | N_Identifier);\n \n             --  Type case\n \n@@ -10001,11 +9998,10 @@ package body Sem_Ch13 is\n                -------------------------------------\n \n                function Reset_Quantified_Variable_Scope\n-                 (N : Node_Id) return Traverse_Result\n-               is\n+                 (N : Node_Id) return Traverse_Result is\n                begin\n-                  if Nkind_In (N, N_Iterator_Specification,\n-                                  N_Loop_Parameter_Specification)\n+                  if Nkind (N) in N_Iterator_Specification\n+                                | N_Loop_Parameter_Specification\n                   then\n                      Set_Scope (Defining_Identifier (N),\n                        Predicate_Function (Typ));\n@@ -10983,12 +10979,12 @@ package body Sem_Ch13 is\n \n                --  Otherwise look at the identifier and see if it is OK\n \n-               if Ekind_In (Ent, E_Named_Integer, E_Named_Real)\n+               if Ekind (Ent) in E_Named_Integer | E_Named_Real\n                  or else Is_Type (Ent)\n                then\n                   return;\n \n-               elsif Ekind_In (Ent, E_Constant, E_In_Parameter) then\n+               elsif Ekind (Ent) in E_Constant | E_In_Parameter then\n \n                   --  This is the case where we must have Ent defined before\n                   --  U_Ent. Clearly if they are in different units this\n@@ -11070,10 +11066,10 @@ package body Sem_Ch13 is\n                Check_Expr_Constants (Prefix (Nod));\n \n             when N_Attribute_Reference =>\n-               if Nam_In (Attribute_Name (Nod), Name_Address,\n-                                                Name_Access,\n-                                                Name_Unchecked_Access,\n-                                                Name_Unrestricted_Access)\n+               if Attribute_Name (Nod) in Name_Address\n+                                        | Name_Access\n+                                        | Name_Unchecked_Access\n+                                        | Name_Unrestricted_Access\n                then\n                   Check_At_Constant_Address (Prefix (Nod));\n \n@@ -11292,7 +11288,7 @@ package body Sem_Ch13 is\n             --  record, both at location zero. This seems a bit strange, but\n             --  it seems to happen in some circumstances, perhaps on an error.\n \n-            if Nam_In (Chars (C1_Ent), Name_uTag, Name_uTag) then\n+            if Chars (C1_Ent) = Name_uTag then\n                return;\n             end if;\n \n@@ -11687,7 +11683,7 @@ package body Sem_Ch13 is\n             Parent_Last_Bit := UI_From_Int (System_Address_Size - 1);\n             Pcomp := First_Entity (Tagged_Parent);\n             while Present (Pcomp) loop\n-               if Ekind_In (Pcomp, E_Discriminant, E_Component) then\n+               if Ekind (Pcomp) in E_Discriminant | E_Component then\n                   if Component_Bit_Offset (Pcomp) /= No_Uint\n                     and then Known_Static_Esize (Pcomp)\n                   then\n@@ -11919,7 +11915,7 @@ package body Sem_Ch13 is\n             --  This latter test is repeated recursively up the variant tree.\n \n             Main_Component_Loop : while Present (C1_Ent) loop\n-               if not Ekind_In (C1_Ent, E_Component, E_Discriminant) then\n+               if Ekind (C1_Ent) not in E_Component | E_Discriminant then\n                   goto Continue_Main_Component_Loop;\n                end if;\n \n@@ -11950,8 +11946,8 @@ package body Sem_Ch13 is\n                   --  but be careful not to flag a non-girder discriminant\n                   --  and the girder discriminant it renames as overlapping.\n \n-                  if Nkind_In (Clist, N_Full_Type_Declaration,\n-                                      N_Private_Type_Declaration)\n+                  if Nkind (Clist) in N_Full_Type_Declaration\n+                                    | N_Private_Type_Declaration\n                   then\n                      if Has_Discriminants (Defining_Identifier (Clist)) then\n                         C2_Ent :=\n@@ -12306,7 +12302,7 @@ package body Sem_Ch13 is\n             --  The subprogram is inherited (implicitly declared), it does not\n             --  override and does not cover a primitive of an interface.\n \n-            if Ekind_In (Subp_Id, E_Function, E_Procedure)\n+            if Ekind (Subp_Id) in E_Function | E_Procedure\n               and then Present (Alias (Subp_Id))\n               and then No (Interface_Alias (Subp_Id))\n               and then No (Overridden_Operation (Subp_Id))\n@@ -13062,9 +13058,8 @@ package body Sem_Ch13 is\n             return Entity (Rep_Item);\n \n          else\n-            pragma Assert (Nkind_In (Rep_Item,\n-                                     N_Attribute_Definition_Clause,\n-                                     N_Pragma));\n+            pragma Assert\n+              (Nkind (Rep_Item) in N_Attribute_Definition_Clause | N_Pragma);\n             return Entity (Name (Rep_Item));\n          end if;\n       end Rep_Item_Entity;\n@@ -13488,7 +13483,7 @@ package body Sem_Ch13 is\n       --  20. A call to a predefined boolean logical operator, where each\n       --  operand is predicate-static.\n \n-      elsif (Nkind_In (Expr, N_Op_And, N_Op_Or, N_Op_Xor)\n+      elsif (Nkind (Expr) in N_Op_And | N_Op_Or | N_Op_Xor\n               and then Is_Predicate_Static (Left_Opnd (Expr), Nam)\n               and then Is_Predicate_Static (Right_Opnd (Expr), Nam))\n         or else\n@@ -14352,7 +14347,7 @@ package body Sem_Ch13 is\n          --  A self-referential aspect is illegal if it forces freezing the\n          --  entity before the corresponding pragma has been analyzed.\n \n-         if Nkind_In (N, N_Attribute_Definition_Clause, N_Pragma)\n+         if Nkind (N) in N_Attribute_Definition_Clause | N_Pragma\n            and then From_Aspect_Specification (N)\n          then\n             Error_Msg_NE\n@@ -14478,8 +14473,8 @@ package body Sem_Ch13 is\n          declare\n             Pname : constant Name_Id := Pragma_Name (N);\n          begin\n-            if Nam_In (Pname, Name_Convention, Name_Import,   Name_Export,\n-                              Name_External,   Name_Interface)\n+            if Pname in Name_Convention | Name_Import | Name_Export\n+                      | Name_External   | Name_Interface\n             then\n                return False;\n             end if;"}, {"sha": "96f05a5eb28243cd6f4999f04814e3431d3be1c2", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 106, "deletions": 116, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -751,8 +751,8 @@ package body Sem_Ch3 is\n       --  function, scope is the current one, because it is the one of the\n       --  current type declaration, except for the pathological case below.\n \n-      if Nkind_In (Related_Nod, N_Object_Declaration,\n-                                N_Access_Function_Definition)\n+      if Nkind (Related_Nod) in\n+           N_Object_Declaration | N_Access_Function_Definition\n       then\n          Anon_Scope := Current_Scope;\n \n@@ -765,8 +765,8 @@ package body Sem_Ch3 is\n \n          begin\n             Par := Related_Nod;\n-            while Nkind_In (Par, N_Access_Function_Definition,\n-                                 N_Access_Definition)\n+            while Nkind (Par) in\n+                    N_Access_Function_Definition | N_Access_Definition\n             loop\n                Par := Parent (Par);\n             end loop;\n@@ -1078,36 +1078,33 @@ package body Sem_Ch3 is\n       --                                   (Z : access T)))\n \n       D_Ityp := Associated_Node_For_Itype (Desig_Type);\n-      while not (Nkind_In (D_Ityp, N_Full_Type_Declaration,\n-                                   N_Private_Type_Declaration,\n-                                   N_Private_Extension_Declaration,\n-                                   N_Procedure_Specification,\n-                                   N_Function_Specification,\n-                                   N_Entry_Body)\n-\n-                   or else\n-                 Nkind_In (D_Ityp, N_Object_Declaration,\n-                                   N_Object_Renaming_Declaration,\n-                                   N_Formal_Object_Declaration,\n-                                   N_Formal_Type_Declaration,\n-                                   N_Task_Type_Declaration,\n-                                   N_Protected_Type_Declaration))\n+      while Nkind (D_Ityp) not in N_Full_Type_Declaration\n+                                | N_Private_Type_Declaration\n+                                | N_Private_Extension_Declaration\n+                                | N_Procedure_Specification\n+                                | N_Function_Specification\n+                                | N_Entry_Body\n+                                | N_Object_Declaration\n+                                | N_Object_Renaming_Declaration\n+                                | N_Formal_Object_Declaration\n+                                | N_Formal_Type_Declaration\n+                                | N_Task_Type_Declaration\n+                                | N_Protected_Type_Declaration\n       loop\n          D_Ityp := Parent (D_Ityp);\n          pragma Assert (D_Ityp /= Empty);\n       end loop;\n \n       Set_Associated_Node_For_Itype (Desig_Type, D_Ityp);\n \n-      if Nkind_In (D_Ityp, N_Procedure_Specification,\n-                           N_Function_Specification)\n+      if Nkind (D_Ityp) in N_Procedure_Specification | N_Function_Specification\n       then\n          Set_Scope (Desig_Type, Scope (Defining_Entity (D_Ityp)));\n \n-      elsif Nkind_In (D_Ityp, N_Full_Type_Declaration,\n-                              N_Object_Declaration,\n-                              N_Object_Renaming_Declaration,\n-                              N_Formal_Type_Declaration)\n+      elsif Nkind (D_Ityp) in N_Full_Type_Declaration\n+                            | N_Object_Declaration\n+                            | N_Object_Renaming_Declaration\n+                            | N_Formal_Type_Declaration\n       then\n          Set_Scope (Desig_Type, Scope (Defining_Identifier (D_Ityp)));\n       end if;\n@@ -2349,9 +2346,9 @@ package body Sem_Ch3 is\n                --  because they have already been resolved.\n \n                elsif Decls = Visible_Declarations (Context)\n-                 and then Ekind_In (Typ, E_Limited_Private_Type,\n-                                         E_Private_Type,\n-                                         E_Record_Type_With_Private)\n+                 and then Ekind (Typ) in E_Limited_Private_Type\n+                                       | E_Private_Type\n+                                       | E_Record_Type_With_Private\n                  and then Has_Own_Invariants (Typ)\n                then\n                   Build_Invariant_Procedure_Body\n@@ -2496,9 +2493,9 @@ package body Sem_Ch3 is\n          --  controlled primitives.\n \n          if Nkind (Body_Spec) /= N_Procedure_Specification\n-           or else not Nam_In (Chars (Body_Id), Name_Adjust,\n-                                                Name_Finalize,\n-                                                Name_Initialize)\n+           or else Chars (Body_Id) not in Name_Adjust\n+                                        | Name_Finalize\n+                                        | Name_Initialize\n          then\n             return;\n \n@@ -2533,7 +2530,7 @@ package body Sem_Ch3 is\n          Spec_Id := Current_Entity (Body_Id);\n \n          while Present (Spec_Id) loop\n-            if Ekind_In (Spec_Id, E_Procedure, E_Generic_Procedure)\n+            if Ekind (Spec_Id) in E_Procedure | E_Generic_Procedure\n               and then Scope (Spec_Id) = Current_Scope\n               and then Present (First_Formal (Spec_Id))\n               and then No (Next_Formal (First_Formal (Spec_Id)))\n@@ -2672,8 +2669,8 @@ package body Sem_Ch3 is\n             if Nkind (Parent (L)) = N_Component_List then\n                null;\n \n-            elsif Nkind_In (Parent (L), N_Protected_Definition,\n-                                        N_Task_Definition)\n+            elsif Nkind (Parent (L)) in\n+                    N_Protected_Definition | N_Task_Definition\n             then\n                Check_Entry_Contracts;\n \n@@ -3613,7 +3610,7 @@ package body Sem_Ch3 is\n          return;\n       end if;\n \n-      if Nkind_In (E, N_Integer_Literal, N_Real_Literal) then\n+      if Nkind (E) in N_Integer_Literal | N_Real_Literal then\n          Set_Etype (E, Etype (Id));\n       end if;\n \n@@ -5086,7 +5083,7 @@ package body Sem_Ch3 is\n            (\"parent of type extension must be a tagged type \", Indic);\n          goto Leave;\n \n-      elsif Ekind_In (Parent_Type, E_Void, E_Incomplete_Type) then\n+      elsif Ekind (Parent_Type) in E_Void | E_Incomplete_Type then\n          Error_Msg_N (\"premature derivation of incomplete type\", Indic);\n          goto Leave;\n \n@@ -6436,7 +6433,7 @@ package body Sem_Ch3 is\n \n       Mark_Rewrite_Insertion (Comp);\n \n-      if Nkind_In (N, N_Object_Declaration, N_Access_Function_Definition)\n+      if Nkind (N) in N_Object_Declaration | N_Access_Function_Definition\n         or else (Nkind (Parent (N)) = N_Full_Type_Declaration\n                   and then not Is_Type (Current_Scope))\n       then\n@@ -6512,10 +6509,10 @@ package body Sem_Ch3 is\n       end Replace_Type_Name;\n \n    begin\n-      if Ekind_In (Id, E_Access_Subprogram_Type,\n-         E_Access_Protected_Subprogram_Type,\n-         E_Anonymous_Access_Protected_Subprogram_Type,\n-         E_Anonymous_Access_Subprogram_Type)\n+      if Ekind (Id) in E_Access_Subprogram_Type\n+                     | E_Access_Protected_Subprogram_Type\n+                     | E_Anonymous_Access_Protected_Subprogram_Type\n+                     | E_Anonymous_Access_Subprogram_Type\n       then\n          null;\n \n@@ -10478,9 +10475,9 @@ package body Sem_Ch3 is\n          --  build-in-place library function, child unit or not.\n \n          if (Nkind (Nod) in N_Entity and then Is_Compilation_Unit (Nod))\n-           or else (Nkind_In (Nod, N_Defining_Program_Unit_Name,\n-                                   N_Subprogram_Declaration)\n-                      and then Is_Compilation_Unit (Defining_Entity (Nod)))\n+           or else (Nkind (Nod) in\n+                      N_Defining_Program_Unit_Name | N_Subprogram_Declaration\n+                     and then Is_Compilation_Unit (Defining_Entity (Nod)))\n          then\n             Add_Global_Declaration (IR);\n          else\n@@ -10510,7 +10507,7 @@ package body Sem_Ch3 is\n \n       Analyze_And_Resolve (Bound, Base_Type (Par_T));\n \n-      if Nkind_In (Bound, N_Integer_Literal, N_Real_Literal) then\n+      if Nkind (Bound) in N_Integer_Literal | N_Real_Literal then\n          New_Bound := New_Copy (Bound);\n          Set_Etype (New_Bound, Der_T);\n          Set_Analyzed (New_Bound);\n@@ -11541,7 +11538,7 @@ package body Sem_Ch3 is\n \n       begin\n          if not Comes_From_Source (E) then\n-            if Ekind_In (E, E_Task_Type, E_Protected_Type) then\n+            if Ekind (E) in E_Task_Type | E_Protected_Type then\n \n                --  It may be an anonymous protected type created for a\n                --  single variable. Post error on variable, if present.\n@@ -11671,10 +11668,10 @@ package body Sem_Ch3 is\n          --  this kind is reserved for predefined operators, that are\n          --  intrinsic and do not need completion.\n \n-         elsif Ekind_In (E, E_Function,\n-                            E_Procedure,\n-                            E_Generic_Function,\n-                            E_Generic_Procedure)\n+         elsif Ekind (E) in E_Function\n+                          | E_Procedure\n+                          | E_Generic_Function\n+                          | E_Generic_Procedure\n          then\n             if Has_Completion (E) then\n                null;\n@@ -11733,7 +11730,7 @@ package body Sem_Ch3 is\n                Post_Error;\n             end if;\n \n-         elsif Ekind_In (E, E_Task_Type, E_Protected_Type) then\n+         elsif Ekind (E) in E_Task_Type | E_Protected_Type then\n             if not Has_Completion (E) then\n                Post_Error;\n             end if;\n@@ -14615,7 +14612,7 @@ package body Sem_Ch3 is\n          if Is_Tagged_Type (Typ) or else Has_Controlled_Component (Typ) then\n             Old_C := First_Component (Typ);\n             while Present (Old_C) loop\n-               if Nam_In (Chars (Old_C), Name_uTag, Name_uParent) then\n+               if Chars (Old_C) in Name_uTag | Name_uParent then\n                   Append_Elmt (Old_C, Comp_List);\n                end if;\n \n@@ -15460,9 +15457,9 @@ package body Sem_Ch3 is\n         or else Is_Private_Overriding\n         or else Is_Internal_Name (Chars (Parent_Subp))\n         or else (Is_Controlled (Parent_Type)\n-                  and then Nam_In (Chars (Parent_Subp), Name_Adjust,\n-                                                        Name_Finalize,\n-                                                        Name_Initialize))\n+                  and then Chars (Parent_Subp) in Name_Adjust\n+                                                | Name_Finalize\n+                                                | Name_Initialize)\n       then\n          Set_Derived_Name;\n \n@@ -15661,9 +15658,9 @@ package body Sem_Ch3 is\n       --  set on both views of the type.\n \n       if Is_Controlled (Parent_Type)\n-        and then Nam_In (Chars (Parent_Subp), Name_Initialize,\n-                                              Name_Adjust,\n-                                              Name_Finalize)\n+        and then Chars (Parent_Subp) in Name_Initialize\n+                                      | Name_Adjust\n+                                      | Name_Finalize\n         and then Is_Hidden (Parent_Subp)\n         and then not Is_Visibly_Controlled (Parent_Type)\n       then\n@@ -16882,7 +16879,7 @@ package body Sem_Ch3 is\n \n       --  Check for early use of incomplete or private type\n \n-      if Ekind_In (Parent_Type, E_Void, E_Incomplete_Type) then\n+      if Ekind (Parent_Type) in E_Void | E_Incomplete_Type then\n          Error_Msg_N (\"premature derivation of incomplete type\", Indic);\n          return;\n \n@@ -17419,14 +17416,14 @@ package body Sem_Ch3 is\n \n          --  Check invalid completion of private or incomplete type\n \n-         elsif not Nkind_In (N, N_Full_Type_Declaration,\n-                                N_Task_Type_Declaration,\n-                                N_Protected_Type_Declaration)\n+         elsif Nkind (N) not in N_Full_Type_Declaration\n+                              | N_Task_Type_Declaration\n+                              | N_Protected_Type_Declaration\n            and then\n              (Ada_Version < Ada_2012\n                or else not Is_Incomplete_Type (Prev)\n-               or else not Nkind_In (N, N_Private_Type_Declaration,\n-                                        N_Private_Extension_Declaration))\n+               or else Nkind (N) not in N_Private_Type_Declaration\n+                                      | N_Private_Extension_Declaration)\n          then\n             --  Completion must be a full type declarations (RM 7.3(4))\n \n@@ -17503,9 +17500,8 @@ package body Sem_Ch3 is\n             end if;\n \n             if Nkind (N) = N_Full_Type_Declaration\n-              and then Nkind_In\n-                         (Type_Definition (N), N_Record_Definition,\n-                                               N_Derived_Type_Definition)\n+              and then Nkind (Type_Definition (N)) in\n+                         N_Record_Definition | N_Derived_Type_Definition\n               and then Interface_Present (Type_Definition (N))\n             then\n                Error_Msg_N\n@@ -17522,15 +17518,15 @@ package body Sem_Ch3 is\n                   New_Id := Id;\n \n                elsif Ekind (Prev) = E_Private_Type\n-                 and then Nkind_In (N, N_Task_Type_Declaration,\n-                                       N_Protected_Type_Declaration)\n+                 and then Nkind (N) in N_Task_Type_Declaration\n+                                     | N_Protected_Type_Declaration\n                then\n                   Error_Msg_N\n                    (\"completion of nonlimited type cannot be limited\", N);\n \n                elsif Ekind (Prev) = E_Record_Type_With_Private\n-                 and then Nkind_In (N, N_Task_Type_Declaration,\n-                                       N_Protected_Type_Declaration)\n+                 and then Nkind (N) in N_Task_Type_Declaration\n+                                     | N_Protected_Type_Declaration\n                then\n                   if not Is_Limited_Record (Prev) then\n                      Error_Msg_N\n@@ -17547,8 +17543,8 @@ package body Sem_Ch3 is\n             --  type or a protected type. This case arises when covering\n             --  interface types.\n \n-            elsif Nkind_In (N, N_Task_Type_Declaration,\n-                               N_Protected_Type_Declaration)\n+            elsif Nkind (N) in N_Task_Type_Declaration\n+                             | N_Protected_Type_Declaration\n             then\n                null;\n \n@@ -17645,8 +17641,8 @@ package body Sem_Ch3 is\n \n             if Ada_Version >= Ada_2012\n               and then Is_Incomplete_Type (Prev)\n-              and then Nkind_In (N, N_Private_Type_Declaration,\n-                                    N_Private_Extension_Declaration)\n+              and then Nkind (N) in N_Private_Type_Declaration\n+                                  | N_Private_Extension_Declaration\n             then\n                --  No need to check private extensions since they are tagged\n \n@@ -17660,8 +17656,8 @@ package body Sem_Ch3 is\n             --  a synchronized type that implements interfaces) or a\n             --  type extension, otherwise this is an error.\n \n-            elsif Nkind_In (N, N_Task_Type_Declaration,\n-                               N_Protected_Type_Declaration)\n+            elsif Nkind (N) in N_Task_Type_Declaration\n+                             | N_Protected_Type_Declaration\n             then\n                if No (Interface_List (N)) and then not Error_Posted (N) then\n                   Tag_Mismatch;\n@@ -17729,8 +17725,8 @@ package body Sem_Ch3 is\n \n       --  Case of an anonymous array subtype\n \n-      if Nkind_In (Def_Kind, N_Constrained_Array_Definition,\n-                             N_Unconstrained_Array_Definition)\n+      if Def_Kind in\n+           N_Constrained_Array_Definition | N_Unconstrained_Array_Definition\n       then\n          T := Empty;\n          Array_Type_Declaration (T, Obj_Def);\n@@ -18669,8 +18665,7 @@ package body Sem_Ch3 is\n          then\n             null;\n \n-         elsif Ekind_In (Derived_Base, E_Private_Type,\n-                                       E_Limited_Private_Type)\n+         elsif Ekind (Derived_Base) in E_Private_Type | E_Limited_Private_Type\n          then\n             null;\n \n@@ -18814,16 +18809,13 @@ package body Sem_Ch3 is\n             return Constraint_Kind = N_Range_Constraint;\n \n          when Decimal_Fixed_Point_Kind =>\n-            return Nkind_In (Constraint_Kind, N_Digits_Constraint,\n-                                              N_Range_Constraint);\n+            return Constraint_Kind in N_Digits_Constraint | N_Range_Constraint;\n \n          when Ordinary_Fixed_Point_Kind =>\n-            return Nkind_In (Constraint_Kind, N_Delta_Constraint,\n-                                              N_Range_Constraint);\n+            return Constraint_Kind in N_Delta_Constraint | N_Range_Constraint;\n \n          when Float_Kind =>\n-            return Nkind_In (Constraint_Kind, N_Digits_Constraint,\n-                                              N_Range_Constraint);\n+            return Constraint_Kind in N_Digits_Constraint | N_Range_Constraint;\n \n          when Access_Kind\n             | Array_Kind\n@@ -18883,7 +18875,7 @@ package body Sem_Ch3 is\n    --  Start of processing for Is_Visible_Component\n \n    begin\n-      if Ekind_In (C, E_Component, E_Discriminant) then\n+      if Ekind (C) in E_Component | E_Discriminant then\n          Original_Comp := Original_Record_Component (C);\n       end if;\n \n@@ -20709,9 +20701,9 @@ package body Sem_Ch3 is\n             Priv := Node (Priv_Elmt);\n             Priv_Scop := Scope (Priv);\n \n-            if Ekind_In (Priv, E_Private_Subtype,\n-                               E_Limited_Private_Subtype,\n-                               E_Record_Subtype_With_Private)\n+            if Ekind (Priv) in E_Private_Subtype\n+                             | E_Limited_Private_Subtype\n+                             | E_Record_Subtype_With_Private\n             then\n                Full := Make_Defining_Identifier (Sloc (Priv), Chars (Priv));\n                Set_Is_Itype (Full);\n@@ -20882,7 +20874,7 @@ package body Sem_Ch3 is\n \n                Prim := Next_Entity (Full_T);\n                while Present (Prim) and then Prim /= Priv_T loop\n-                  if Ekind_In (Prim, E_Procedure, E_Function) then\n+                  if Ekind (Prim) in E_Procedure | E_Function then\n                      Disp_Typ := Find_Dispatching_Type (Prim);\n \n                      if Disp_Typ = Full_T\n@@ -21336,17 +21328,16 @@ package body Sem_Ch3 is\n                   exit when\n                     Nkind (Insert_Node) in N_Declaration\n                     and then\n-                      not Nkind_In\n-                        (Insert_Node, N_Component_Declaration,\n-                                      N_Loop_Parameter_Specification,\n-                                      N_Function_Specification,\n-                                      N_Procedure_Specification);\n-\n-                  exit when Nkind (Insert_Node) in N_Later_Decl_Item\n-                    or else Nkind (Insert_Node) in\n-                              N_Statement_Other_Than_Procedure_Call\n-                    or else Nkind_In (Insert_Node, N_Procedure_Call_Statement,\n-                                                   N_Pragma);\n+                      Nkind (Insert_Node) not in N_Component_Declaration\n+                                               | N_Loop_Parameter_Specification\n+                                               | N_Function_Specification\n+                                               | N_Procedure_Specification;\n+\n+                  exit when Nkind (Insert_Node) in\n+                              N_Later_Decl_Item                     |\n+                              N_Statement_Other_Than_Procedure_Call |\n+                              N_Procedure_Call_Statement            |\n+                              N_Pragma;\n \n                   Insert_Node := Parent (Insert_Node);\n                end loop;\n@@ -21560,20 +21551,19 @@ package body Sem_Ch3 is\n          --  The following is ugly, can't we have a range or even a flag???\n \n          May_Have_Null_Exclusion :=\n-           Nkind_In (P, N_Access_Definition,\n-                        N_Access_Function_Definition,\n-                        N_Access_Procedure_Definition,\n-                        N_Access_To_Object_Definition,\n-                        N_Allocator,\n-                        N_Component_Definition)\n-             or else\n-           Nkind_In (P, N_Derived_Type_Definition,\n-                        N_Discriminant_Specification,\n-                        N_Formal_Object_Declaration,\n-                        N_Object_Declaration,\n-                        N_Object_Renaming_Declaration,\n-                        N_Parameter_Specification,\n-                        N_Subtype_Declaration);\n+           Nkind (P) in N_Access_Definition\n+                      | N_Access_Function_Definition\n+                      | N_Access_Procedure_Definition\n+                      | N_Access_To_Object_Definition\n+                      | N_Allocator\n+                      | N_Component_Definition\n+                      | N_Derived_Type_Definition\n+                      | N_Discriminant_Specification\n+                      | N_Formal_Object_Declaration\n+                      | N_Object_Declaration\n+                      | N_Object_Renaming_Declaration\n+                      | N_Parameter_Specification\n+                      | N_Subtype_Declaration;\n \n          --  Create an Itype that is a duplicate of Entity (S) but with the\n          --  null-exclusion attribute."}, {"sha": "c92fb0674ba44de7f6383391ff4ca1e75fb99a18", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 68, "deletions": 70, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -380,7 +380,7 @@ package body Sem_Ch4 is\n       if Nkind (N) in N_Membership_Test then\n          Error_Msg_N (\"ambiguous operands for membership\",  N);\n \n-      elsif Nkind_In (N, N_Op_Eq, N_Op_Ne) then\n+      elsif Nkind (N) in N_Op_Eq | N_Op_Ne then\n          Error_Msg_N (\"ambiguous operands for equality\",  N);\n \n       else\n@@ -1063,8 +1063,8 @@ package body Sem_Ch4 is\n                      --  performing the writable actuals check.\n \n                      if Has_Arbitrary_Evaluation_Order (Nkind (P))\n-                       and then not Nkind_In (P, N_Assignment_Statement,\n-                                                 N_Object_Declaration)\n+                       and then Nkind (P) not in\n+                                  N_Assignment_Statement | N_Object_Declaration\n                      then\n                         Outermost := P;\n                      end if;\n@@ -1073,8 +1073,8 @@ package body Sem_Ch4 is\n \n                      exit when Stop_Subtree_Climbing (Nkind (P))\n                        or else (Nkind (P) = N_Range\n-                                 and then not\n-                                   Nkind_In (Parent (P), N_In, N_Not_In));\n+                                 and then\n+                                   Nkind (Parent (P)) not in N_In | N_Not_In);\n \n                      P := Parent (P);\n                   end loop;\n@@ -1124,8 +1124,7 @@ package body Sem_Ch4 is\n          --  Check for tasking cases where only an entry call will do\n \n          elsif not L\n-           and then Nkind_In (K, N_Entry_Call_Alternative,\n-                                 N_Triggering_Alternative)\n+           and then K in N_Entry_Call_Alternative | N_Triggering_Alternative\n          then\n             Error_Msg_N (\"entry name expected\", Nam);\n \n@@ -1185,10 +1184,10 @@ package body Sem_Ch4 is\n          elsif Nkind (Nam) = N_Selected_Component then\n             Nam_Ent := Entity (Selector_Name (Nam));\n \n-            if not Ekind_In (Nam_Ent, E_Entry,\n-                                      E_Entry_Family,\n-                                      E_Function,\n-                                      E_Procedure)\n+            if Ekind (Nam_Ent) not in E_Entry\n+                                    | E_Entry_Family\n+                                    | E_Function\n+                                    | E_Procedure\n             then\n                Error_Msg_N (\"name in call is not a callable entity\", Nam);\n                Set_Etype (N, Any_Type);\n@@ -1363,7 +1362,7 @@ package body Sem_Ch4 is\n                   Set_Etype (Nam, It.Typ);\n                end if;\n \n-            elsif Nkind_In (Name (N), N_Function_Call, N_Selected_Component)\n+            elsif Nkind (Name (N)) in N_Function_Call | N_Selected_Component\n             then\n                Remove_Interp (X);\n             end if;\n@@ -3786,9 +3785,9 @@ package body Sem_Ch4 is\n \n            --  Verify Nam is a non-visible controlled primitive\n \n-           and then Nam_In (Chars (Nam), Name_Adjust,\n-                                         Name_Finalize,\n-                                         Name_Initialize)\n+           and then Chars (Nam) in Name_Adjust\n+                                 | Name_Finalize\n+                                 | Name_Initialize\n            and then Ekind (Nam) = E_Procedure\n            and then Is_Controlled (Etype (First_Form))\n            and then No (Next_Formal (First_Form))\n@@ -4014,14 +4013,15 @@ package body Sem_Ch4 is\n       Find_Type (Mark);\n       T := Entity (Mark);\n \n-      if Nkind_In (Enclosing_Declaration (N), N_Formal_Type_Declaration,\n-                                              N_Full_Type_Declaration,\n-                                              N_Incomplete_Type_Declaration,\n-                                              N_Protected_Type_Declaration,\n-                                              N_Private_Extension_Declaration,\n-                                              N_Private_Type_Declaration,\n-                                              N_Subtype_Declaration,\n-                                              N_Task_Type_Declaration)\n+      if Nkind (Enclosing_Declaration (N)) in\n+           N_Formal_Type_Declaration       |\n+           N_Full_Type_Declaration         |\n+           N_Incomplete_Type_Declaration   |\n+           N_Protected_Type_Declaration    |\n+           N_Private_Extension_Declaration |\n+           N_Private_Type_Declaration      |\n+           N_Subtype_Declaration           |\n+           N_Task_Type_Declaration\n         and then T = Defining_Identifier (Enclosing_Declaration (N))\n       then\n          Error_Msg_N (\"current instance not allowed\", Mark);\n@@ -4596,7 +4596,7 @@ package body Sem_Ch4 is\n          elsif Is_Access_Type (Etype (Nod)) then\n             return True;\n \n-         elsif Nkind_In (Nod, N_Indexed_Component, N_Selected_Component) then\n+         elsif Nkind (Nod) in N_Indexed_Component | N_Selected_Component then\n             return Has_Dereference (Prefix (Nod));\n \n          else\n@@ -4615,10 +4615,10 @@ package body Sem_Ch4 is\n \n       begin\n          if Nkind (Parent (N)) = N_Attribute_Reference\n-           and then Nam_In (Attribute_Name (Parent (N)),\n-                      Name_Access,\n-                      Name_Unchecked_Access,\n-                      Name_Unrestricted_Access)\n+           and then Attribute_Name (Parent (N)) in\n+                      Name_Access\n+                    | Name_Unchecked_Access\n+                    | Name_Unrestricted_Access\n            and then Is_Class_Wide_Type (Prefix_Type)\n            and then (Is_Synchronized_Interface (Prefix_Type)\n                        or else Is_Protected_Interface (Prefix_Type))\n@@ -4873,10 +4873,10 @@ package body Sem_Ch4 is\n                      or else\n                       (Nkind (Parent_N) = N_Attribute_Reference\n                         and then\n-                          Nam_In (Attribute_Name (Parent_N), Name_First,\n-                                                             Name_Last,\n-                                                             Name_Length,\n-                                                             Name_Range)))\n+                          Attribute_Name (Parent_N) in Name_First\n+                                                     | Name_Last\n+                                                     | Name_Length\n+                                                     | Name_Range))\n                then\n                   Set_Etype (N, Etype (Comp));\n \n@@ -5057,9 +5057,9 @@ package body Sem_Ch4 is\n                   --  a visible entity is found.\n \n                   if Is_Tagged_Type (Prefix_Type)\n-                    and then Nkind_In (Parent (N), N_Function_Call,\n-                                                   N_Indexed_Component,\n-                                                   N_Procedure_Call_Statement)\n+                    and then Nkind (Parent (N)) in N_Function_Call\n+                                                 | N_Indexed_Component\n+                                                 | N_Procedure_Call_Statement\n                     and then Has_Mode_Conformant_Spec (Comp)\n                   then\n                      Has_Candidate := True;\n@@ -5068,7 +5068,7 @@ package body Sem_Ch4 is\n                --  Note: a selected component may not denote a component of a\n                --  protected type (4.1.3(7)).\n \n-               elsif Ekind_In (Comp, E_Discriminant, E_Entry_Family)\n+               elsif Ekind (Comp) in E_Discriminant | E_Entry_Family\n                  or else (In_Scope\n                             and then not Is_Protected_Type (Prefix_Type)\n                             and then Is_Entity_Name (Name))\n@@ -5657,9 +5657,9 @@ package body Sem_Ch4 is\n          end if;\n \n       elsif Nkind (Expr) = N_Attribute_Reference\n-        and then Nam_In (Attribute_Name (Expr), Name_Access,\n-                                                Name_Unchecked_Access,\n-                                                Name_Unrestricted_Access)\n+        and then Attribute_Name (Expr) in Name_Access\n+                                        | Name_Unchecked_Access\n+                                        | Name_Unrestricted_Access\n       then\n          Error_Msg_N (\"argument of conversion cannot be access\", N);\n          Error_Msg_N (\"\\use qualified expression instead\", N);\n@@ -5921,7 +5921,7 @@ package body Sem_Ch4 is\n    --  Start of processing for Check_Arithmetic_Pair\n \n    begin\n-      if Nam_In (Op_Name, Name_Op_Add, Name_Op_Subtract) then\n+      if Op_Name in Name_Op_Add | Name_Op_Subtract then\n          if Is_Numeric_Type (T1)\n            and then Is_Numeric_Type (T2)\n            and then (Covers (T1 => T1, T2 => T2)\n@@ -5931,7 +5931,7 @@ package body Sem_Ch4 is\n             Add_One_Interp (N, Op_Id, Specific_Type (T1, T2));\n          end if;\n \n-      elsif Nam_In (Op_Name, Name_Op_Multiply, Name_Op_Divide) then\n+      elsif Op_Name in Name_Op_Multiply | Name_Op_Divide then\n          if Is_Fixed_Point_Type (T1)\n            and then (Is_Fixed_Point_Type (T2) or else T2 = Universal_Real)\n          then\n@@ -6229,7 +6229,7 @@ package body Sem_Ch4 is\n \n          else\n             while Present (It.Nam) loop\n-               if Ekind_In (It.Nam, E_Function, E_Operator) then\n+               if Ekind (It.Nam) in E_Function | E_Operator then\n                   return;\n                else\n                   Get_Next_Interp (X, It);\n@@ -6657,9 +6657,7 @@ package body Sem_Ch4 is\n       procedure Check_Access_Attribute (N : Node_Id) is\n       begin\n          if Nkind (N) = N_Attribute_Reference\n-           and then Nam_In (Attribute_Name (N),\n-                            Name_Access,\n-                            Name_Unchecked_Access)\n+           and then Attribute_Name (N) in Name_Access | Name_Unchecked_Access\n          then\n             Error_Msg_N\n               (\"access attribute cannot be used as actual for \"\n@@ -7401,7 +7399,7 @@ package body Sem_Ch4 is\n             --  pretty much know that the other operand should be Boolean, so\n             --  resolve it that way (generating an error).\n \n-            elsif Nkind_In (N, N_Op_And, N_Op_Or, N_Op_Xor) then\n+            elsif Nkind (N) in N_Op_And | N_Op_Or | N_Op_Xor then\n                if Etype (L) = Standard_Boolean then\n                   Resolve (R, Standard_Boolean);\n                   return;\n@@ -7415,16 +7413,16 @@ package body Sem_Ch4 is\n             --  is not the same numeric type. If it is a non-numeric type,\n             --  then probably it is intended to match the other operand.\n \n-            elsif Nkind_In (N, N_Op_Add,\n-                               N_Op_Divide,\n-                               N_Op_Ge,\n-                               N_Op_Gt,\n-                               N_Op_Le,\n-                               N_Op_Lt,\n-                               N_Op_Mod,\n-                               N_Op_Multiply,\n-                               N_Op_Rem,\n-                               N_Op_Subtract)\n+            elsif Nkind (N) in N_Op_Add\n+                             | N_Op_Divide\n+                             | N_Op_Ge\n+                             | N_Op_Gt\n+                             | N_Op_Le\n+                             | N_Op_Lt\n+                             | N_Op_Mod\n+                             | N_Op_Multiply\n+                             | N_Op_Rem\n+                             | N_Op_Subtract\n             then\n                --  If Allow_Integer_Address is active, check whether the\n                --  operation becomes legal after converting an operand.\n@@ -7440,7 +7438,7 @@ package body Sem_Ch4 is\n                        Unchecked_Convert_To (\n                          Standard_Address, Relocate_Node (R)));\n \n-                     if Nkind_In (N, N_Op_Ge, N_Op_Gt, N_Op_Le, N_Op_Lt) then\n+                     if Nkind (N) in N_Op_Ge | N_Op_Gt | N_Op_Le | N_Op_Lt then\n                         Analyze_Comparison_Op (N);\n                      else\n                         Analyze_Arithmetic_Op (N);\n@@ -7462,7 +7460,7 @@ package body Sem_Ch4 is\n                        Unchecked_Convert_To (\n                          Standard_Address, Relocate_Node (R)));\n \n-                     if Nkind_In (N, N_Op_Ge, N_Op_Gt, N_Op_Le, N_Op_Lt) then\n+                     if Nkind (N) in N_Op_Ge | N_Op_Gt | N_Op_Le | N_Op_Lt then\n                         Analyze_Comparison_Op (N);\n                      else\n                         Analyze_Arithmetic_Op (N);\n@@ -7492,7 +7490,7 @@ package body Sem_Ch4 is\n                        Unchecked_Convert_To (\n                          Standard_Address, Relocate_Node (R)));\n \n-                     if Nkind_In (N, N_Op_Ge, N_Op_Gt, N_Op_Le, N_Op_Lt) then\n+                     if Nkind (N) in N_Op_Ge | N_Op_Gt | N_Op_Le | N_Op_Lt then\n                         Analyze_Comparison_Op (N);\n                      else\n                         Analyze_Arithmetic_Op (N);\n@@ -7516,7 +7514,7 @@ package body Sem_Ch4 is\n                elsif Null_To_Null_Address_Convert_OK (N) then\n                   Replace_Null_By_Null_Address (N);\n \n-                  if Nkind_In (N, N_Op_Ge, N_Op_Gt, N_Op_Le, N_Op_Lt) then\n+                  if Nkind (N) in N_Op_Ge | N_Op_Gt | N_Op_Le | N_Op_Lt then\n                      Analyze_Comparison_Op (N);\n                   else\n                      Analyze_Arithmetic_Op (N);\n@@ -7528,7 +7526,7 @@ package body Sem_Ch4 is\n             --  Comparisons on A'Access are common enough to deserve a\n             --  special message.\n \n-            elsif Nkind_In (N, N_Op_Eq, N_Op_Ne)\n+            elsif Nkind (N) in N_Op_Eq | N_Op_Ne\n                and then Ekind (Etype (L)) = E_Access_Attribute_Type\n                and then Ekind (Etype (R)) = E_Access_Attribute_Type\n             then\n@@ -7586,7 +7584,7 @@ package body Sem_Ch4 is\n \n                return;\n \n-            elsif Nkind_In (N, N_Op_Eq, N_Op_Ne) then\n+            elsif Nkind (N) in N_Op_Eq | N_Op_Ne then\n                if Address_Integer_Convert_OK (Etype (R), Etype (L)) then\n                   Rewrite (L,\n                     Unchecked_Convert_To (\n@@ -7677,7 +7675,7 @@ package body Sem_Ch4 is\n                            --  indicate that the integer operand should be of\n                            --  type Integer.\n \n-                           if Nkind_In (N, N_Op_Multiply, N_Op_Divide)\n+                           if Nkind (N) in N_Op_Multiply | N_Op_Divide\n                              and then Is_Fixed_Point_Type (Etype (L))\n                              and then Is_Integer_Type (Etype (R))\n                            then\n@@ -8030,8 +8028,8 @@ package body Sem_Ch4 is\n             --  resolution does not depend on the type of the parameter that\n             --  includes the indexing operation.\n \n-            elsif Nkind_In (Parent (Par), N_Function_Call,\n-                                          N_Procedure_Call_Statement)\n+            elsif Nkind (Parent (Par)) in\n+                    N_Function_Call | N_Procedure_Call_Statement\n               and then Is_Entity_Name (Name (Parent (Par)))\n             then\n                declare\n@@ -9266,7 +9264,7 @@ package body Sem_Ch4 is\n \n             Hom := Current_Entity (Subprog);\n             while Present (Hom) loop\n-               if Ekind_In (Hom, E_Procedure, E_Function)\n+               if Ekind (Hom) in E_Procedure | E_Function\n                  and then Present (Renamed_Entity (Hom))\n                  and then Is_Generic_Actual_Subprogram (Hom)\n                  and then In_Open_Scopes (Scope (Hom))\n@@ -9276,7 +9274,7 @@ package body Sem_Ch4 is\n                   Candidate := Hom;\n                end if;\n \n-               if Ekind_In (Candidate, E_Function, E_Procedure)\n+               if Ekind (Candidate) in E_Function | E_Procedure\n                  and then (not Is_Hidden (Candidate) or else In_Instance)\n                  and then Scope (Candidate) = Scope (Base_Type (Anc_Type))\n                  and then First_Formal_Match (Candidate, CW_Typ)\n@@ -9454,8 +9452,8 @@ package body Sem_Ch4 is\n             Obj_Type := Designated_Type (Obj_Type);\n          end if;\n \n-         if Ekind_In (Obj_Type, E_Private_Subtype,\n-                                E_Record_Subtype_With_Private)\n+         if Ekind (Obj_Type)\n+           in E_Private_Subtype | E_Record_Subtype_With_Private\n          then\n             Obj_Type := Base_Type (Obj_Type);\n          end if;\n@@ -9625,7 +9623,7 @@ package body Sem_Ch4 is\n             if Is_Derived_Type (T) then\n                return Primitive_Operations (T);\n \n-            elsif Ekind_In (Scope (T), E_Procedure, E_Function) then\n+            elsif Ekind (Scope (T)) in E_Procedure | E_Function then\n \n                --  Scan the list of generic formals to find subprograms\n                --  that may have a first controlling formal of the type."}, {"sha": "336507a12d5b44eed32e1aaaba52939e93773d8a", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -305,9 +305,8 @@ package body Sem_Ch5 is\n \n          if Is_Entity_Name (Opnd)\n            and then (Ekind (Entity (Opnd)) = E_Out_Parameter\n-                      or else Ekind_In (Entity (Opnd),\n-                                        E_In_Out_Parameter,\n-                                        E_Generic_In_Out_Parameter)\n+                      or else Ekind (Entity (Opnd)) in\n+                                E_In_Out_Parameter | E_Generic_In_Out_Parameter\n                       or else\n                         (Ekind (Entity (Opnd)) = E_Variable\n                           and then Nkind (Parent (Entity (Opnd))) =\n@@ -320,7 +319,7 @@ package body Sem_Ch5 is\n          --  If assignment operand is a component reference, then we get the\n          --  actual subtype of the component for the unconstrained case.\n \n-         elsif Nkind_In (Opnd, N_Selected_Component, N_Explicit_Dereference)\n+         elsif Nkind (Opnd) in N_Selected_Component | N_Explicit_Dereference\n            and then not Is_Unchecked_Union (Opnd_Type)\n          then\n             Decl := Build_Actual_Subtype_Of_Component (Opnd_Type, Opnd);\n@@ -825,7 +824,7 @@ package body Sem_Ch5 is\n         and then Is_Assignable (Entity (Lhs))\n         and then Is_Composite_Type (T1)\n         and then not Is_Constrained (Etype (Entity (Lhs)))\n-        and then Nkind_In (Rhs, N_If_Expression, N_Case_Expression)\n+        and then Nkind (Rhs) in N_If_Expression | N_Case_Expression\n       then\n          Resolve (Rhs, Base_Type (T1));\n \n@@ -1239,7 +1238,7 @@ package body Sem_Ch5 is\n \n             --  Do not install the return object\n \n-            if not Ekind_In (Id, E_Constant, E_Variable)\n+            if Ekind (Id) not in E_Constant | E_Variable\n               or else not Is_Return_Object (Id)\n             then\n                Install_Entity (Id);\n@@ -1473,9 +1472,7 @@ package body Sem_Ch5 is\n          if Is_Entity_Name (Exp) then\n             Ent := Entity (Exp);\n \n-            if Ekind_In (Ent, E_Variable,\n-                              E_In_Out_Parameter,\n-                              E_Out_Parameter)\n+            if Ekind (Ent) in E_Variable | E_In_Out_Parameter | E_Out_Parameter\n             then\n                if List_Length (Choices) = 1\n                  and then Nkind (First (Choices)) in N_Subexpr\n@@ -1752,7 +1749,8 @@ package body Sem_Ch5 is\n          Scope_Id := Scope_Stack.Table (J).Entity;\n \n          if Label_Scope = Scope_Id\n-           or else not Ekind_In (Scope_Id, E_Block, E_Loop, E_Return_Statement)\n+           or else Ekind (Scope_Id) not in\n+                     E_Block | E_Loop | E_Return_Statement\n          then\n             if Scope_Id /= Label_Scope then\n                Error_Msg_N\n@@ -2522,10 +2520,9 @@ package body Sem_Ch5 is\n                      if Nkind (Orig_Iter_Name) = N_Selected_Component\n                        and then\n                          Present (Entity (Selector_Name (Orig_Iter_Name)))\n-                       and then Ekind_In\n-                                  (Entity (Selector_Name (Orig_Iter_Name)),\n-                                   E_Component,\n-                                   E_Discriminant)\n+                       and then\n+                         Ekind (Entity (Selector_Name (Orig_Iter_Name))) in\n+                           E_Component | E_Discriminant\n                        and then Is_Dependent_Component_Of_Mutable_Object\n                                   (Orig_Iter_Name)\n                      then\n@@ -2803,8 +2800,8 @@ package body Sem_Ch5 is\n             if Analyzed (Original_Bound) then\n                return Original_Bound;\n \n-            elsif Nkind_In (Analyzed_Bound, N_Integer_Literal,\n-                                            N_Character_Literal)\n+            elsif Nkind (Analyzed_Bound) in\n+                    N_Integer_Literal | N_Character_Literal\n               or else Is_Entity_Name (Analyzed_Bound)\n             then\n                Analyze_And_Resolve (Original_Bound, Typ);\n@@ -3002,8 +2999,8 @@ package body Sem_Ch5 is\n                      and then not Is_Type (Entity (DS_Copy)))\n \n            or else (Nkind (DS_Copy) = N_Attribute_Reference\n-                     and then Nam_In (Attribute_Name (DS_Copy),\n-                                      Name_Loop_Entry, Name_Old))\n+                     and then Attribute_Name (DS_Copy) in\n+                                Name_Loop_Entry | Name_Old)\n \n            or else Has_Aspect (Etype (DS_Copy), Aspect_Iterable)\n \n@@ -3143,7 +3140,7 @@ package body Sem_Ch5 is\n \n       --  Case where we have a range or a subtype, get type bounds\n \n-      if Nkind_In (DS, N_Range, N_Subtype_Indication)\n+      if Nkind (DS) in N_Range | N_Subtype_Indication\n         and then not Error_Posted (DS)\n         and then Etype (DS) /= Any_Type\n         and then Is_Discrete_Type (Etype (DS))"}, {"sha": "ed1c326111f20bb9a8ee4671b10286769df2d376", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 99, "deletions": 106, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -760,8 +760,8 @@ package body Sem_Ch6 is\n \n          elsif Kind = N_Function_Call\n            and then Is_Entity_Name (Name (Return_Expr))\n-           and then Ekind_In (Entity (Name (Return_Expr)), E_Function,\n-                                                           E_Generic_Function)\n+           and then Ekind (Entity (Name (Return_Expr))) in\n+                      E_Function | E_Generic_Function\n            and then No_Return (Entity (Name (Return_Expr)))\n          then\n             return;\n@@ -801,8 +801,8 @@ package body Sem_Ch6 is\n \n          --  We are only interested in return statements\n \n-         if not Nkind_In (Return_Stmt, N_Extended_Return_Statement,\n-                                       N_Simple_Return_Statement)\n+         if Nkind (Return_Stmt) not in\n+              N_Extended_Return_Statement | N_Simple_Return_Statement\n          then\n             return;\n          end if;\n@@ -884,8 +884,8 @@ package body Sem_Ch6 is\n \n                if Nkind (Assoc) = N_Attribute_Reference then\n                   Expr := Assoc;\n-               elsif Nkind_In (Assoc, N_Component_Association,\n-                                      N_Discriminant_Association)\n+               elsif Nkind (Assoc) in\n+                       N_Component_Association | N_Discriminant_Association\n                then\n                   Expr := Expression (Assoc);\n                else\n@@ -911,9 +911,9 @@ package body Sem_Ch6 is\n \n                   Obj := Original_Node (Prefix (Expr));\n                   loop\n-                     while Nkind_In (Obj, N_Explicit_Dereference,\n-                                          N_Indexed_Component,\n-                                          N_Selected_Component)\n+                     while Nkind (Obj) in N_Explicit_Dereference\n+                                        | N_Indexed_Component\n+                                        | N_Selected_Component\n                      loop\n                         --  When we encounter a named access type then we can\n                         --  ignore accessibility checks on the dereference.\n@@ -1156,8 +1156,7 @@ package body Sem_Ch6 is\n             --  This early expansion is done only when the return statement is\n             --  not part of a handled sequence of statements.\n \n-            if Nkind_In (Expr, N_Aggregate,\n-                               N_Extension_Aggregate)\n+            if Nkind (Expr) in N_Aggregate | N_Extension_Aggregate\n               and then Needs_Finalization (R_Type)\n               and then Nkind (Parent (N)) /= N_Handled_Sequence_Of_Statements\n             then\n@@ -1189,7 +1188,7 @@ package body Sem_Ch6 is\n             if Expander_Active\n               and then Serious_Errors_Detected = 0\n               and then Is_Access_Type (R_Type)\n-              and then not Nkind_In (Expr, N_Null, N_Raise_Expression)\n+              and then Nkind (Expr) not in N_Null | N_Raise_Expression\n               and then Is_Interface (Designated_Type (R_Type))\n               and then Is_Progenitor (Designated_Type (R_Type),\n                                       Designated_Type (Etype (Expr)))\n@@ -1249,7 +1248,7 @@ package body Sem_Ch6 is\n               and then not Is_Constrained (R_Type)\n               and then Is_Build_In_Place_Function (Scope_Id)\n               and then Needs_BIP_Alloc_Form (Scope_Id)\n-              and then Nkind_In (Expr, N_Aggregate, N_Extension_Aggregate)\n+              and then Nkind (Expr) in N_Aggregate | N_Extension_Aggregate\n             then\n                Preanalyze (Obj_Decl);\n \n@@ -1996,9 +1995,9 @@ package body Sem_Ch6 is\n       --  Special processing for Elab_Spec, Elab_Body and Elab_Subp_Body calls\n \n       if Nkind (P) = N_Attribute_Reference\n-        and then Nam_In (Attribute_Name (P), Name_Elab_Spec,\n-                                             Name_Elab_Body,\n-                                             Name_Elab_Subp_Body)\n+        and then Attribute_Name (P) in Name_Elab_Spec\n+                                     | Name_Elab_Body\n+                                     | Name_Elab_Subp_Body\n       then\n          if Present (Actuals) then\n             Error_Msg_N\n@@ -2088,9 +2087,8 @@ package body Sem_Ch6 is\n       --  function, the context will select the operation whose type is Void.\n \n       elsif Nkind (P) = N_Selected_Component\n-        and then Ekind_In (Entity (Selector_Name (P)), E_Entry,\n-                                                       E_Function,\n-                                                       E_Procedure)\n+        and then Ekind (Entity (Selector_Name (P)))\n+                   in E_Entry | E_Function | E_Procedure\n       then\n          --  When front-end inlining is enabled, as with SPARK_Mode, a call\n          --  in prefix notation may still be missing its controlling argument,\n@@ -2189,8 +2187,8 @@ package body Sem_Ch6 is\n    ------------------------------\n \n    procedure Analyze_Return_Statement (N : Node_Id) is\n-      pragma Assert (Nkind_In (N, N_Extended_Return_Statement,\n-                                  N_Simple_Return_Statement));\n+      pragma Assert\n+        (Nkind (N) in N_Extended_Return_Statement | N_Simple_Return_Statement);\n \n       Returns_Object : constant Boolean :=\n                          Nkind (N) = N_Extended_Return_Statement\n@@ -2223,7 +2221,7 @@ package body Sem_Ch6 is\n \n          for J in reverse 0 .. Scope_Stack.Last loop\n             Result := Scope_Stack.Table (J).Entity;\n-            exit when not Ekind_In (Result, E_Block, E_Loop)\n+            exit when Ekind (Result) not in E_Block | E_Loop\n               and then Chars (Result) /= Name_uPostconditions;\n          end loop;\n \n@@ -2259,7 +2257,7 @@ package body Sem_Ch6 is\n       --  implicitly-generated return that is placed at the end.\n \n       if No_Return (Scope_Id)\n-        and then Ekind_In (Kind, E_Procedure, E_Generic_Procedure)\n+        and then Kind in E_Procedure | E_Generic_Procedure\n         and then Comes_From_Source (N)\n       then\n          Error_Msg_N\n@@ -2274,17 +2272,17 @@ package body Sem_Ch6 is\n \n       --  Check that functions return objects, and other things do not\n \n-      if Ekind_In (Kind, E_Function, E_Generic_Function) then\n+      if Kind in E_Function | E_Generic_Function then\n          if not Returns_Object then\n             Error_Msg_N (\"missing expression in return from function\", N);\n          end if;\n \n-      elsif Ekind_In (Kind, E_Procedure, E_Generic_Procedure) then\n+      elsif Kind in E_Procedure | E_Generic_Procedure then\n          if Returns_Object then\n             Error_Msg_N (\"procedure cannot return value (use function)\", N);\n          end if;\n \n-      elsif Ekind_In (Kind, E_Entry, E_Entry_Family) then\n+      elsif Kind in E_Entry | E_Entry_Family then\n          if Returns_Object then\n             if Is_Protected_Type (Scope (Scope_Id)) then\n                Error_Msg_N (\"entry body cannot return value\", N);\n@@ -2318,10 +2316,10 @@ package body Sem_Ch6 is\n          Error_Msg_N (\"illegal context for return statement\", N);\n       end if;\n \n-      if Ekind_In (Kind, E_Function, E_Generic_Function) then\n+      if Kind in E_Function | E_Generic_Function then\n          Analyze_Function_Return (N);\n \n-      elsif Ekind_In (Kind, E_Procedure, E_Generic_Procedure) then\n+      elsif Kind in E_Procedure | E_Generic_Procedure then\n          Set_Return_Present (Scope_Id);\n       end if;\n \n@@ -2486,8 +2484,8 @@ package body Sem_Ch6 is\n                      null;\n \n                   elsif Nkind (Parent (N)) = N_Subprogram_Body\n-                    or else Nkind_In (Parent (Parent (N)), N_Accept_Statement,\n-                                                           N_Entry_Body)\n+                    or else Nkind (Parent (Parent (N))) in\n+                              N_Accept_Statement | N_Entry_Body\n                   then\n                      Error_Msg_NE\n                        (\"invalid use of untagged incomplete type&\",\n@@ -3061,8 +3059,8 @@ package body Sem_Ch6 is\n                --  the environment task is our effective master, so nothing\n                --  to mark.\n \n-               if Nkind_In\n-                   (Par, N_Task_Body, N_Block_Statement, N_Subprogram_Body)\n+               if Nkind (Par)\n+                    in N_Task_Body | N_Block_Statement | N_Subprogram_Body\n                then\n                   Set_Is_Task_Master (Par, True);\n                   exit;\n@@ -3415,7 +3413,7 @@ package body Sem_Ch6 is\n          --  Do not process subprogram bodies as they already use the non-\n          --  limited view of types.\n \n-         if not Ekind_In (Subp_Id, E_Function, E_Procedure) then\n+         if Ekind (Subp_Id) not in E_Function | E_Procedure then\n             return No_Elist;\n          end if;\n \n@@ -3518,11 +3516,11 @@ package body Sem_Ch6 is\n             if Is_Entity_Name (Node) and then Present (Entity (Node)) then\n                Mask_Type (Etype (Entity (Node)));\n \n-               if Ekind_In (Entity (Node), E_Component, E_Discriminant) then\n+               if Ekind (Entity (Node)) in E_Component | E_Discriminant then\n                   Mask_Type (Scope (Entity (Node)));\n                end if;\n \n-            elsif Nkind_In (Node, N_Aggregate, N_Null, N_Type_Conversion)\n+            elsif Nkind (Node) in N_Aggregate | N_Null | N_Type_Conversion\n               and then Present (Etype (Node))\n             then\n                Mask_Type (Etype (Node));\n@@ -3585,19 +3583,18 @@ package body Sem_Ch6 is\n \n                --  Move relevant pragmas to the spec\n \n-               elsif Nam_In (Pragma_Name_Unmapped (Decl),\n-                             Name_Depends,\n-                             Name_Ghost,\n-                             Name_Global,\n-                             Name_Pre,\n-                             Name_Precondition,\n-                             Name_Post,\n-                             Name_Refined_Depends,\n-                             Name_Refined_Global,\n-                             Name_Refined_Post,\n-                             Name_Inline,\n-                             Name_Pure_Function,\n-                             Name_Volatile_Function)\n+               elsif Pragma_Name_Unmapped (Decl) in Name_Depends\n+                                                  | Name_Ghost\n+                                                  | Name_Global\n+                                                  | Name_Pre\n+                                                  | Name_Precondition\n+                                                  | Name_Post\n+                                                  | Name_Refined_Depends\n+                                                  | Name_Refined_Global\n+                                                  | Name_Refined_Post\n+                                                  | Name_Inline\n+                                                  | Name_Pure_Function\n+                                                  | Name_Volatile_Function\n                then\n                   Remove (Decl);\n                   Insert_After (Insert_Nod, Decl);\n@@ -3693,9 +3690,9 @@ package body Sem_Ch6 is\n             --  expansion. As a result, we add an exception for this case.\n \n             elsif not Present (Overridden_Operation (Spec_Id))\n-              and then not (Nam_In (Chars (Spec_Id), Name_Adjust,\n-                                                     Name_Finalize,\n-                                                     Name_Initialize)\n+              and then not (Chars (Spec_Id) in Name_Adjust\n+                                             | Name_Finalize\n+                                             | Name_Initialize\n                              and then In_Instance)\n             then\n                Error_Msg_NE\n@@ -4995,9 +4992,7 @@ package body Sem_Ch6 is\n          --  Push_xxx_Error_Label to find the first real statement.\n \n          Stm := First (Statements (HSS));\n-         while Nkind_In (Stm, N_Call_Marker, N_Label)\n-           or else Nkind (Stm) in N_Push_xxx_Label\n-         loop\n+         while Nkind (Stm) in N_Call_Marker | N_Label | N_Push_xxx_Label loop\n             Next (Stm);\n          end loop;\n \n@@ -5553,10 +5548,10 @@ package body Sem_Ch6 is\n          --  In case of primitives associated with abstract interface types\n          --  the check is applied later (see Analyze_Subprogram_Declaration).\n \n-         if not Nkind_In (Original_Node (Parent (N)),\n-                          N_Abstract_Subprogram_Declaration,\n-                          N_Formal_Abstract_Subprogram_Declaration,\n-                          N_Subprogram_Renaming_Declaration)\n+         if Nkind (Original_Node (Parent (N))) not in\n+              N_Abstract_Subprogram_Declaration        |\n+              N_Formal_Abstract_Subprogram_Declaration |\n+              N_Subprogram_Renaming_Declaration\n          then\n             if Is_Abstract_Type (Etype (Designator)) then\n                Error_Msg_N\n@@ -5685,11 +5680,11 @@ package body Sem_Ch6 is\n          --  the only way these may receive a convention is if they inherit\n          --  the convention of a related subprogram.\n \n-         if Ekind_In (Id1, E_Anonymous_Access_Subprogram_Type,\n-                           E_Subprogram_Type)\n+         if Ekind (Id1) in E_Anonymous_Access_Subprogram_Type\n+                         | E_Subprogram_Type\n               or else\n-            Ekind_In (Id2, E_Anonymous_Access_Subprogram_Type,\n-                           E_Subprogram_Type)\n+            Ekind (Id2) in E_Anonymous_Access_Subprogram_Type\n+                         | E_Subprogram_Type\n          then\n             return True;\n \n@@ -5997,7 +5992,7 @@ package body Sem_Ch6 is\n \n          if Ctype >= Mode_Conformant then\n             if Parameter_Mode (Old_Formal) /= Parameter_Mode (New_Formal) then\n-               if not Ekind_In (New_Id, E_Function, E_Procedure)\n+               if Ekind (New_Id) not in E_Function | E_Procedure\n                  or else not Is_Primitive_Wrapper (New_Id)\n                then\n                   Conformance_Error (\"\\mode of & does not match!\", New_Formal);\n@@ -6766,11 +6761,11 @@ package body Sem_Ch6 is\n          Decl := Unit_Declaration_Node (Subp);\n       end if;\n \n-      if Nkind_In (Decl, N_Subprogram_Body,\n-                         N_Subprogram_Body_Stub,\n-                         N_Subprogram_Declaration,\n-                         N_Abstract_Subprogram_Declaration,\n-                         N_Subprogram_Renaming_Declaration)\n+      if Nkind (Decl) in N_Subprogram_Body\n+                       | N_Subprogram_Body_Stub\n+                       | N_Subprogram_Declaration\n+                       | N_Abstract_Subprogram_Declaration\n+                       | N_Subprogram_Renaming_Declaration\n       then\n          Spec := Specification (Decl);\n \n@@ -6866,9 +6861,9 @@ package body Sem_Ch6 is\n       if Present (Overridden_Subp)\n         and then (not Is_Hidden (Overridden_Subp)\n                    or else\n-                     (Nam_In (Chars (Overridden_Subp), Name_Initialize,\n-                                                       Name_Adjust,\n-                                                       Name_Finalize)\n+                     (Chars (Overridden_Subp) in Name_Initialize\n+                                               | Name_Adjust\n+                                               | Name_Finalize\n                       and then Present (Alias (Overridden_Subp))\n                       and then (not Is_Hidden (Alias (Overridden_Subp))\n                                  or else In_Instance)))\n@@ -7170,12 +7165,10 @@ package body Sem_Ch6 is\n          --  Don't count exception junk\n \n            or else\n-             (Nkind_In (Last_Stm, N_Goto_Statement,\n-                                   N_Label,\n-                                   N_Object_Declaration)\n+             (Nkind (Last_Stm) in\n+                N_Goto_Statement | N_Label | N_Object_Declaration\n                and then Exception_Junk (Last_Stm))\n-           or else Nkind (Last_Stm) in N_Push_xxx_Label\n-           or else Nkind (Last_Stm) in N_Pop_xxx_Label\n+           or else Nkind (Last_Stm) in N_Push_xxx_Label | N_Pop_xxx_Label\n \n          --  Inserted code, such as finalization calls, is irrelevant: we only\n          --  need to check original source.\n@@ -7603,7 +7596,7 @@ package body Sem_Ch6 is\n       function Is_Valid_Formal (F : Entity_Id) return Boolean is\n       begin\n          return\n-           Ekind_In (F, E_In_Out_Parameter, E_Out_Parameter)\n+           Ekind (F) in E_In_Out_Parameter | E_Out_Parameter\n              or else\n                (Nkind (Parameter_Type (Parent (F))) = N_Access_Definition\n                  and then not Constant_Present (Parameter_Type (Parent (F))));\n@@ -7840,7 +7833,7 @@ package body Sem_Ch6 is\n             --  Entries and procedures can override abstract or null interface\n             --  procedures.\n \n-            elsif Ekind_In (Def_Id, E_Entry, E_Procedure)\n+            elsif Ekind (Def_Id) in E_Entry | E_Procedure\n               and then Ekind (Subp) = E_Procedure\n               and then Matches_Prefixed_View_Profile\n                          (Parameter_Specifications (Parent (Def_Id)),\n@@ -7860,7 +7853,7 @@ package body Sem_Ch6 is\n                   --  override, the first parameter of the overridden routine\n                   --  must be of mode \"out\", \"in out\", or access-to-variable.\n \n-                  if Ekind_In (Candidate, E_Entry, E_Procedure)\n+                  if Ekind (Candidate) in E_Entry | E_Procedure\n                     and then Is_Protected_Type (Typ)\n                     and then not Is_Valid_Formal (Formal)\n                   then\n@@ -8266,11 +8259,11 @@ package body Sem_Ch6 is\n       --  or both could be access to protected subprograms.\n \n       Are_Anonymous_Access_To_Subprogram_Types :=\n-        Ekind_In (Type_1, E_Anonymous_Access_Subprogram_Type,\n-                          E_Anonymous_Access_Protected_Subprogram_Type)\n+        Ekind (Type_1) in E_Anonymous_Access_Subprogram_Type\n+                        | E_Anonymous_Access_Protected_Subprogram_Type\n           and then\n-        Ekind_In (Type_2, E_Anonymous_Access_Subprogram_Type,\n-                          E_Anonymous_Access_Protected_Subprogram_Type);\n+        Ekind (Type_2) in E_Anonymous_Access_Subprogram_Type\n+                        | E_Anonymous_Access_Protected_Subprogram_Type;\n \n       --  Test anonymous access type case. For this case, static subtype\n       --  matching is required for mode conformance (RM 6.3.1(15)). We check\n@@ -8732,8 +8725,8 @@ package body Sem_Ch6 is\n                --  to this are inherited operations from a parent type in which\n                --  case the derived type acts as their parent.\n \n-               if Nkind_In (Subp_Decl, N_Function_Specification,\n-                                       N_Procedure_Specification)\n+               if Nkind (Subp_Decl) in N_Function_Specification\n+                                     | N_Procedure_Specification\n                then\n                   Subp_Decl := Parent (Subp_Decl);\n                end if;\n@@ -9259,8 +9252,8 @@ package body Sem_Ch6 is\n                   --  conformant with it. That can occur in cases where an\n                   --  actual type causes unrelated homographs in the instance.\n \n-                  if Nkind_In (N, N_Subprogram_Body,\n-                                  N_Subprogram_Renaming_Declaration)\n+                  if Nkind (N) in N_Subprogram_Body\n+                                | N_Subprogram_Renaming_Declaration\n                     and then Present (Homonym (E))\n                     and then not Fully_Conformant (Designator, E)\n                   then\n@@ -9535,9 +9528,10 @@ package body Sem_Ch6 is\n \n       function User_Defined_Numeric_Literal_Mismatch return Boolean is\n          E1_Is_User_Defined : constant Boolean :=\n-           not Nkind_In (Given_E1, N_Integer_Literal, N_Real_Literal);\n+           Nkind (Given_E1) not in N_Integer_Literal | N_Real_Literal;\n          E2_Is_User_Defined : constant Boolean :=\n-           not Nkind_In (Given_E2, N_Integer_Literal, N_Real_Literal);\n+           Nkind (Given_E2) not in N_Integer_Literal | N_Real_Literal;\n+\n       begin\n          pragma Assert (E1_Is_User_Defined = E2_Is_User_Defined);\n \n@@ -10712,10 +10706,9 @@ package body Sem_Ch6 is\n                      H := Homonym (H);\n                      exit when not Present (H) or else Scope (H) /= Scope (S);\n \n-                     if Nkind_In\n-                       (Parent (H),\n-                        N_Private_Extension_Declaration,\n-                        N_Private_Type_Declaration)\n+                     if Nkind (Parent (H)) in\n+                        N_Private_Extension_Declaration |\n+                        N_Private_Type_Declaration\n                        and then Defining_Identifier (Parent (H)) = Partial_View\n                      then\n                         return True;\n@@ -12017,9 +12010,9 @@ package body Sem_Ch6 is\n                     and then not Is_Generic_Type (Formal_Type)\n                     and then not Is_Class_Wide_Type (Formal_Type)\n                   then\n-                     if not Nkind_In\n-                              (Parent (T), N_Access_Function_Definition,\n-                                           N_Access_Procedure_Definition)\n+                     if Nkind (Parent (T)) not in\n+                          N_Access_Function_Definition |\n+                          N_Access_Procedure_Definition\n                      then\n                         Append_Elmt (Current_Scope,\n                           Private_Dependents (Base_Type (Formal_Type)));\n@@ -12036,8 +12029,8 @@ package body Sem_Ch6 is\n                      end if;\n                   end if;\n \n-               elsif not Nkind_In (Parent (T), N_Access_Function_Definition,\n-                                               N_Access_Procedure_Definition)\n+               elsif Nkind (Parent (T)) not in N_Access_Function_Definition\n+                                             | N_Access_Procedure_Definition\n                then\n                   --  AI05-0151: Tagged incomplete types are allowed in all\n                   --  formal parts. Untagged incomplete types are not allowed\n@@ -12064,9 +12057,9 @@ package body Sem_Ch6 is\n                      then\n                         null;\n \n-                     elsif Nkind_In (Context, N_Accept_Statement,\n-                                              N_Accept_Alternative,\n-                                              N_Entry_Body)\n+                     elsif Nkind (Context) in N_Accept_Statement\n+                                            | N_Accept_Alternative\n+                                            | N_Entry_Body\n                        or else (Nkind (Context) = N_Subprogram_Body\n                                  and then Comes_From_Source (Context))\n                      then\n@@ -12244,12 +12237,12 @@ package body Sem_Ch6 is\n          --  these are not standard Ada legality rules.\n \n          if SPARK_Mode = On then\n-            if Ekind_In (Scope (Formal), E_Function, E_Generic_Function) then\n+            if Ekind (Scope (Formal)) in E_Function | E_Generic_Function then\n \n                --  A function cannot have a parameter of mode IN OUT or OUT\n                --  (SPARK RM 6.1).\n \n-               if Ekind_In (Formal, E_In_Out_Parameter, E_Out_Parameter) then\n+               if Ekind (Formal) in E_In_Out_Parameter | E_Out_Parameter then\n                   Error_Msg_N\n                     (\"function cannot have parameter of mode `OUT` or \"\n                      & \"`IN OUT`\", Formal);\n@@ -12572,7 +12565,7 @@ package body Sem_Ch6 is\n             Set_Has_Out_Or_In_Out_Parameter (Id, True);\n          end if;\n \n-         if Ekind_In (Id, E_Function, E_Generic_Function) then\n+         if Ekind (Id) in E_Function | E_Generic_Function then\n \n             --  [IN] OUT parameters allowed for functions in Ada 2012\n \n@@ -12754,12 +12747,12 @@ package body Sem_Ch6 is\n       --  Verify that user-defined operators have proper number of arguments\n       --  First case of operators which can only be unary\n \n-      if Nam_In (Id, Name_Op_Not, Name_Op_Abs) then\n+      if Id in Name_Op_Not | Name_Op_Abs then\n          N_OK := (N = 1);\n \n       --  Case of operators which can be unary or binary\n \n-      elsif Nam_In (Id, Name_Op_Add, Name_Op_Subtract) then\n+      elsif Id in Name_Op_Add | Name_Op_Subtract then\n          N_OK := (N in 1 .. 2);\n \n       --  All other operators can only be binary"}, {"sha": "3ff200191b580624b897870cb02739be70a1261c", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -464,9 +464,9 @@ package body Sem_Ch7 is\n                --  if they are not followed by a construct which can reference\n                --  and export them.\n \n-               elsif Nkind_In (Decl, N_Exception_Declaration,\n-                                     N_Object_Declaration,\n-                                     N_Object_Renaming_Declaration)\n+               elsif Nkind (Decl) in N_Exception_Declaration\n+                                   | N_Object_Declaration\n+                                   | N_Object_Renaming_Declaration\n                then\n                   Decl_Id := Defining_Entity (Decl);\n \n@@ -483,8 +483,8 @@ package body Sem_Ch7 is\n                --  for them to see whether they are referenced on an individual\n                --  basis by looking into the table of referenced subprograms.\n \n-               elsif Nkind_In (Decl, N_Subprogram_Declaration,\n-                                     N_Subprogram_Renaming_Declaration)\n+               elsif Nkind (Decl) in N_Subprogram_Declaration\n+                                   | N_Subprogram_Renaming_Declaration\n                then\n                   Decl_Id := Defining_Entity (Decl);\n \n@@ -1370,8 +1370,8 @@ package body Sem_Ch7 is\n          then\n             Generate_Reference (Id, Scope (Id), 'k', False);\n \n-         elsif not Nkind_In (Unit (Cunit (Main_Unit)), N_Subprogram_Body,\n-                                                       N_Subunit)\n+         elsif Nkind (Unit (Cunit (Main_Unit))) not in\n+                 N_Subprogram_Body | N_Subunit\n          then\n             --  If current unit is an ancestor of main unit, generate a\n             --  reference to its own parent.\n@@ -1437,8 +1437,8 @@ package body Sem_Ch7 is\n             --  prevents cascaded errors when routines defined only for type\n             --  entities are called with non-type entities.\n \n-            if Nkind_In (Decl, N_Incomplete_Type_Declaration,\n-                               N_Private_Type_Declaration)\n+            if Nkind (Decl) in N_Incomplete_Type_Declaration\n+                             | N_Private_Type_Declaration\n               and then Is_Type (Defining_Identifier (Decl))\n               and then Has_Discriminants (Defining_Identifier (Decl))\n               and then Present (Full_View (Defining_Identifier (Decl)))\n@@ -1472,8 +1472,8 @@ package body Sem_Ch7 is\n          while Present (Gen_Par) and then Is_Child_Unit (Gen_Par) loop\n             Inst_Node := Get_Unit_Instantiation_Node (Inst_Par);\n \n-            if Nkind_In (Inst_Node, N_Package_Instantiation,\n-                                    N_Formal_Package_Declaration)\n+            if Nkind (Inst_Node) in\n+                 N_Package_Instantiation | N_Formal_Package_Declaration\n               and then Nkind (Name (Inst_Node)) = N_Expanded_Name\n             then\n                Inst_Par := Entity (Prefix (Name (Inst_Node)));\n@@ -2640,7 +2640,7 @@ package body Sem_Ch7 is\n       --  implicit completion at some point.\n \n       elsif (Is_Overloadable (Id)\n-              and then not Ekind_In (Id, E_Enumeration_Literal, E_Operator)\n+              and then Ekind (Id) not in E_Enumeration_Literal | E_Operator\n               and then not Is_Abstract_Subprogram (Id)\n               and then not Has_Completion (Id)\n               and then Comes_From_Source (Parent (Id)))\n@@ -2657,7 +2657,7 @@ package body Sem_Ch7 is\n             and then not Is_Generic_Type (Id))\n \n         or else\n-          (Ekind_In (Id, E_Task_Type, E_Protected_Type)\n+          (Ekind (Id) in E_Task_Type | E_Protected_Type\n             and then not Has_Completion (Id))\n \n         or else\n@@ -2959,7 +2959,7 @@ package body Sem_Ch7 is\n             Check_Conventions (Id);\n          end if;\n \n-         if Ekind_In (Id, E_Private_Type, E_Limited_Private_Type)\n+         if Ekind (Id) in E_Private_Type | E_Limited_Private_Type\n            and then No (Full_View (Id))\n            and then not Is_Generic_Type (Id)\n            and then not Is_Derived_Type (Id)"}, {"sha": "da965afdf8fb2a1f6e95e7ac551195025a6ef2c0", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 36, "deletions": 39, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -780,15 +780,15 @@ package body Sem_Ch8 is\n          Subt : Entity_Id;\n \n       begin\n-         if Nkind_In (Nam, N_Function_Call, N_Explicit_Dereference)\n+         if Nkind (Nam) in N_Function_Call | N_Explicit_Dereference\n            and then Is_Composite_Type (Typ)\n            and then not Is_Constrained (Typ)\n            and then not Has_Unknown_Discriminants (Typ)\n            and then Expander_Active\n          then\n             --  If Actual_Subtype is already set, nothing to do\n \n-            if Ekind_In (Id, E_Variable, E_Constant)\n+            if Ekind (Id) in E_Variable | E_Constant\n               and then Present (Actual_Subtype (Id))\n             then\n                null;\n@@ -1354,7 +1354,7 @@ package body Sem_Ch8 is\n       --  check.\n \n       if Comes_From_Source (N) then\n-         if Nkind_In (Nam, N_Function_Call, N_Explicit_Dereference) then\n+         if Nkind (Nam) in N_Function_Call | N_Explicit_Dereference then\n             Is_Object_Ref := Is_Object_Reference (Nam);\n          else\n             Is_Object_Ref := Is_Object_Reference (Original_Node (Nam));\n@@ -2103,7 +2103,7 @@ package body Sem_Ch8 is\n             --  Generate:\n             --    return Subp_Id (Actuals);\n \n-            if Ekind_In (Subp_Id, E_Function, E_Operator) then\n+            if Ekind (Subp_Id) in E_Function | E_Operator then\n                return\n                  Make_Simple_Return_Statement (Loc,\n                    Expression =>\n@@ -2135,7 +2135,7 @@ package body Sem_Ch8 is\n             Formal   : Node_Id;\n \n          begin\n-            pragma Assert (Ekind_In (Subp_Id, E_Function, E_Operator));\n+            pragma Assert (Ekind (Subp_Id) in E_Function | E_Operator);\n \n             --  Build the actual parameters of the call\n \n@@ -2502,7 +2502,7 @@ package body Sem_Ch8 is\n          --  dispatching call to the wrapped function is known during proof.\n \n          if GNATprove_Mode\n-           and then Ekind_In (Ren_Id, E_Function, E_Operator)\n+           and then Ekind (Ren_Id) in E_Function | E_Operator\n          then\n             New_Spec := Build_Spec (Ren_Id);\n             Body_Decl :=\n@@ -3376,7 +3376,7 @@ package body Sem_Ch8 is\n          --  Guard against previous errors, and omit renamings of predefined\n          --  operators.\n \n-         elsif not Ekind_In (Old_S, E_Function, E_Procedure) then\n+         elsif Ekind (Old_S) not in E_Function | E_Procedure then\n             null;\n \n          elsif Requires_Overriding (Old_S)\n@@ -4238,10 +4238,9 @@ package body Sem_Ch8 is\n       elsif Present (Expressions (Nam)) then\n          Error_Msg_N (\"illegal expressions in attribute reference\", Nam);\n \n-      elsif\n-        Nam_In (Aname, Name_Compose, Name_Exponent, Name_Leading_Part,\n-                       Name_Pos,     Name_Round,    Name_Scaling,\n-                       Name_Val)\n+      elsif Aname in Name_Compose | Name_Exponent | Name_Leading_Part |\n+                     Name_Pos     | Name_Round    | Name_Scaling      |\n+                     Name_Val\n       then\n          if Nkind (N) = N_Subprogram_Renaming_Declaration\n            and then Present (Corresponding_Formal_Spec (N))\n@@ -4505,8 +4504,8 @@ package body Sem_Ch8 is\n       elsif Is_Concurrent_Type (Scope (E)) then\n          P := Parent (N);\n          while Present (P)\n-           and then not Nkind_In (P, N_Parameter_Specification,\n-                                     N_Component_Declaration)\n+           and then Nkind (P) not in\n+             N_Parameter_Specification | N_Component_Declaration\n          loop\n             P := Parent (P);\n          end loop;\n@@ -4744,8 +4743,8 @@ package body Sem_Ch8 is\n             Pop_Scope;\n \n             while not (Is_List_Member (Decl))\n-              or else Nkind_In (Parent (Decl), N_Protected_Definition,\n-                                               N_Task_Definition)\n+              or else Nkind (Parent (Decl)) in N_Protected_Definition\n+                                             | N_Task_Definition\n             loop\n                Decl := Parent (Decl);\n             end loop;\n@@ -5524,7 +5523,7 @@ package body Sem_Ch8 is\n                --  is Put or Put_Line, then add a special error message (since\n                --  this is a very common error for beginners to make).\n \n-               if Nam_In (Chars (N), Name_Put, Name_Put_Line) then\n+               if Chars (N) in Name_Put | Name_Put_Line then\n                   Error_Msg_N -- CODEFIX\n                     (\"\\\\possible missing `WITH Ada.Text_'I'O; \" &\n                      \"USE Ada.Text_'I'O`!\", N);\n@@ -6109,9 +6108,9 @@ package body Sem_Ch8 is\n             if Ada_Version >= Ada_2012\n               and then\n                 (Nkind (Parent (N)) in N_Subexpr\n-                  or else Nkind_In (Parent (N), N_Assignment_Statement,\n-                                                N_Object_Declaration,\n-                                                N_Parameter_Association))\n+                  or else Nkind (Parent (N)) in N_Assignment_Statement\n+                                              | N_Object_Declaration\n+                                              | N_Parameter_Association)\n             then\n                Check_Implicit_Dereference (N, Etype (E));\n             end if;\n@@ -6198,13 +6197,13 @@ package body Sem_Ch8 is\n          Par := Nod;\n          while Present (Par) loop\n             if Nkind (Par) = N_Pragma then\n-               if Nam_In (Pragma_Name_Unmapped (Par),\n-                          Name_Abstract_State,\n-                          Name_Depends,\n-                          Name_Global,\n-                          Name_Initializes,\n-                          Name_Refined_Depends,\n-                          Name_Refined_Global)\n+               if Pragma_Name_Unmapped (Par)\n+                    in Name_Abstract_State\n+                     | Name_Depends\n+                     | Name_Global\n+                     | Name_Initializes\n+                     | Name_Refined_Depends\n+                     | Name_Refined_Global\n                then\n                   return True;\n \n@@ -6305,7 +6304,7 @@ package body Sem_Ch8 is\n             --  The non-limited view may itself be incomplete, in which case\n             --  get the full view if available.\n \n-            elsif Ekind_In (Id, E_Incomplete_Type, E_Class_Wide_Type)\n+            elsif Ekind (Id) in E_Incomplete_Type | E_Class_Wide_Type\n               and then From_Limited_With (Id)\n               and then Present (Non_Limited_View (Id))\n               and then Scope (Non_Limited_View (Id)) = P_Name\n@@ -6359,7 +6358,7 @@ package body Sem_Ch8 is\n       end;\n \n       if No (Id)\n-        and then Ekind_In (P_Name, E_Procedure, E_Function)\n+        and then Ekind (P_Name) in E_Procedure | E_Function\n         and then Is_Generic_Instance (P_Name)\n       then\n          --  Expanded name denotes entity in (instance of) generic subprogram.\n@@ -6490,9 +6489,7 @@ package body Sem_Ch8 is\n \n                         exit when S = Standard_Standard;\n \n-                        if Ekind_In (S, E_Function,\n-                                        E_Package,\n-                                        E_Procedure)\n+                        if Ekind (S) in E_Function | E_Package | E_Procedure\n                         then\n                            P :=\n                              Generic_Parent (Specification\n@@ -7499,7 +7496,7 @@ package body Sem_Ch8 is\n             --  The subprogram may be a renaming (of an enclosing scope) as\n             --  in the case of the name of the generic within an instantiation.\n \n-            if Ekind_In (P_Name, E_Procedure, E_Function)\n+            if Ekind (P_Name) in E_Procedure | E_Function\n               and then Present (Alias (P_Name))\n               and then Is_Generic_Instance (Alias (P_Name))\n             then\n@@ -8458,7 +8455,7 @@ package body Sem_Ch8 is\n \n          pragma Assert (No (Old_F));\n \n-         if Ekind_In (Old_S, E_Function, E_Enumeration_Literal) then\n+         if Ekind (Old_S) in E_Function | E_Enumeration_Literal then\n             Set_Etype (New_S, Etype (Old_S));\n          end if;\n       end if;\n@@ -8659,7 +8656,7 @@ package body Sem_Ch8 is\n       --  Use clauses in and of themselves do not count as a \"use\" of a\n       --  package.\n \n-      if Nkind_In (Parent (Id), N_Use_Package_Clause, N_Use_Type_Clause) then\n+      if Nkind (Parent (Id)) in N_Use_Package_Clause | N_Use_Type_Clause then\n          return;\n       end if;\n \n@@ -8681,11 +8678,11 @@ package body Sem_Ch8 is\n          --  Mark primitives\n \n          elsif (Ekind (Id) in Overloadable_Kind\n-                 or else Ekind_In (Id, E_Generic_Function,\n-                                       E_Generic_Procedure))\n+                 or else Ekind (Id) in\n+                           E_Generic_Function | E_Generic_Procedure)\n            and then (Is_Potentially_Use_Visible (Id)\n                       or else Is_Intrinsic_Subprogram (Id)\n-                      or else (Ekind_In (Id, E_Function, E_Procedure)\n+                      or else (Ekind (Id) in E_Function | E_Procedure\n                                 and then Is_Generic_Actual_Subprogram (Id)))\n          then\n             Mark_Parameters (Id);\n@@ -8721,7 +8718,7 @@ package body Sem_Ch8 is\n             --  Ignore fully qualified names as they do not count as a \"use\" of\n             --  a package.\n \n-            if Nkind_In (Id, N_Identifier, N_Operator_Symbol)\n+            if Nkind (Id) in N_Identifier | N_Operator_Symbol\n               or else (Present (Prefix (Id))\n                          and then Scope (Entity (Id)) /= Entity (Prefix (Id)))\n             then\n@@ -10255,7 +10252,7 @@ package body Sem_Ch8 is\n                            & \"use_type_clause #??\", Clause1, T);\n                         return;\n \n-                     elsif Nkind_In (Unit2, N_Package_Body, N_Subprogram_Body)\n+                     elsif Nkind (Unit2) in N_Package_Body | N_Subprogram_Body\n                        and then Nkind (Unit1) /= Nkind (Unit2)\n                        and then Nkind (Unit1) /= N_Subunit\n                      then"}, {"sha": "effc8586c95ac4068329508b3f8c15da9c44e8f1", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -133,8 +133,8 @@ package body Sem_Ch9 is\n       --  when Lock_Free_Given is True.\n \n    begin\n-      pragma Assert (Nkind_In (N, N_Protected_Type_Declaration,\n-                                  N_Protected_Body));\n+      pragma Assert\n+        (Nkind (N) in N_Protected_Type_Declaration | N_Protected_Body);\n \n       --  The lock-free implementation is currently enabled through a debug\n       --  flag. When Lock_Free_Given is True, an aspect Lock_Free forces the\n@@ -569,7 +569,7 @@ package body Sem_Ch9 is\n                         if Ekind (Id) = E_Component then\n                            Comp_Id := Id;\n \n-                        elsif Ekind_In (Id, E_Constant, E_Variable)\n+                        elsif Ekind (Id) in E_Constant | E_Variable\n                           and then Present (Prival_Link (Id))\n                         then\n                            Comp_Id := Prival_Link (Id);\n@@ -1113,7 +1113,7 @@ package body Sem_Ch9 is\n          Analyze_List (Pragmas_Before (N));\n       end if;\n \n-      if Nkind_In (Parent (N), N_Selective_Accept, N_Timed_Entry_Call) then\n+      if Nkind (Parent (N)) in N_Selective_Accept | N_Timed_Entry_Call then\n          Expr := Expression (Delay_Statement (N));\n \n          --  Defer full analysis until the statement is expanded, to insure\n@@ -1966,7 +1966,7 @@ package body Sem_Ch9 is\n \n       Item_Id := First_Entity (Prot_Typ);\n       while Present (Item_Id) loop\n-         if Ekind_In (Item_Id, E_Function, E_Procedure) then\n+         if Ekind (Item_Id) in E_Function | E_Procedure then\n             Set_Convention (Item_Id, Convention_Protected);\n          else\n             Propagate_Concurrent_Flags (Prot_Typ, Etype (Item_Id));\n@@ -2317,7 +2317,7 @@ package body Sem_Ch9 is\n          Enclosing := Scope_Stack.Table (J).Entity;\n          exit when Is_Entry (Enclosing);\n \n-         if not Ekind_In (Enclosing, E_Block, E_Loop) then\n+         if Ekind (Enclosing) not in E_Block | E_Loop then\n             Error_Msg_N (\"requeue must appear within accept or entry body\", N);\n             return;\n          end if;\n@@ -2550,7 +2550,7 @@ package body Sem_Ch9 is\n                   --  perform an unconditional goto so that any further\n                   --  references will not occur anyway.\n \n-                  if Ekind_In (Ent, E_Out_Parameter, E_In_Out_Parameter) then\n+                  if Ekind (Ent) in E_Out_Parameter | E_In_Out_Parameter then\n                      Set_Never_Set_In_Source (Ent, False);\n                      Set_Is_True_Constant    (Ent, False);\n                   end if;\n@@ -3470,7 +3470,7 @@ package body Sem_Ch9 is\n \n    begin\n       pragma Assert\n-        (Nkind_In (N, N_Protected_Type_Declaration, N_Task_Type_Declaration));\n+        (Nkind (N) in N_Protected_Type_Declaration | N_Task_Type_Declaration);\n \n       if Present (Interface_List (N)) then\n          Set_Is_Tagged_Type (T);"}, {"sha": "cb93fdb89dbfdc7f727a35f77d5667a4aa9d2a28", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -623,8 +623,8 @@ package body Sem_Dim is\n       --  Named symbol argument\n \n       if No (Symbol_Expr)\n-        or else not Nkind_In (Symbol_Expr, N_Character_Literal,\n-                                           N_String_Literal)\n+        or else Nkind (Symbol_Expr) not in\n+                  N_Character_Literal | N_String_Literal\n       then\n          Symbol_Expr := Empty;\n \n@@ -644,8 +644,8 @@ package body Sem_Dim is\n \n                   --  Verify symbol expression is a string or a character\n \n-                  if not Nkind_In (Symbol_Expr, N_Character_Literal,\n-                                                N_String_Literal)\n+                  if Nkind (Symbol_Expr) not in\n+                       N_Character_Literal | N_String_Literal\n                   then\n                      Symbol_Expr := Empty;\n                      Error_Msg_N\n@@ -656,8 +656,8 @@ package body Sem_Dim is\n                --  Special error if no Symbol choice but expression is string\n                --  or character.\n \n-               elsif Nkind_In (Expression (Assoc), N_Character_Literal,\n-                                                   N_String_Literal)\n+               elsif Nkind (Expression (Assoc)) in\n+                       N_Character_Literal | N_String_Literal\n                then\n                   Num_Choices := Num_Choices + 1;\n                   Error_Msg_N\n@@ -1039,8 +1039,8 @@ package body Sem_Dim is\n                --  Check the second argument for each dimension aggregate is\n                --  a string or a character.\n \n-               if not Nkind_In (Unit_Symbol, N_String_Literal,\n-                                             N_Character_Literal)\n+               if Nkind (Unit_Symbol) not in\n+                    N_String_Literal | N_Character_Literal\n                then\n                   Error_Msg_N\n                     (\"expected unit symbol (string or character)\",\n@@ -1072,8 +1072,8 @@ package body Sem_Dim is\n                --  Check the third argument for each dimension aggregate is\n                --  a string or a character.\n \n-               if not Nkind_In (Dim_Symbol, N_String_Literal,\n-                                            N_Character_Literal)\n+               if Nkind (Dim_Symbol) not in\n+                    N_String_Literal | N_Character_Literal\n                then\n                   Error_Msg_N\n                     (\"expected dimension symbol (string or character)\",\n@@ -1143,13 +1143,11 @@ package body Sem_Dim is\n          return;\n \n       elsif not Comes_From_Source (N) then\n-         if Nkind_In (N, N_Explicit_Dereference,\n-                         N_Identifier,\n-                         N_Object_Declaration,\n-                         N_Subtype_Declaration)\n+         if Nkind (N) not in N_Explicit_Dereference\n+                           | N_Identifier\n+                           | N_Object_Declaration\n+                           | N_Subtype_Declaration\n          then\n-            null;\n-         else\n             return;\n          end if;\n       end if;\n@@ -1441,9 +1439,8 @@ package body Sem_Dim is\n          return;\n       end if;\n \n-      if Nkind_In (N_Kind, N_Op_Add, N_Op_Expon, N_Op_Subtract)\n-        or else N_Kind in N_Multiplying_Operator\n-        or else N_Kind in N_Op_Compare\n+      if N_Kind in N_Op_Add | N_Op_Expon  | N_Op_Subtract\n+                 | N_Multiplying_Operator | N_Op_Compare\n       then\n          declare\n             L                : constant Node_Id        := Left_Opnd (N);\n@@ -1459,7 +1456,7 @@ package body Sem_Dim is\n          begin\n             --  N_Op_Add, N_Op_Mod, N_Op_Rem or N_Op_Subtract case\n \n-            if Nkind_In (N, N_Op_Add, N_Op_Mod, N_Op_Rem, N_Op_Subtract) then\n+            if N_Kind in N_Op_Add | N_Op_Mod | N_Op_Rem | N_Op_Subtract then\n \n                --  Check both operands have same dimension\n \n@@ -1475,7 +1472,7 @@ package body Sem_Dim is\n \n             --  N_Op_Multiply or N_Op_Divide case\n \n-            elsif Nkind_In (N_Kind, N_Op_Multiply, N_Op_Divide) then\n+            elsif N_Kind in N_Op_Multiply | N_Op_Divide then\n \n                --  Check at least one operand is not dimensionless\n \n@@ -1593,13 +1590,13 @@ package body Sem_Dim is\n                   --  literal is treated as if its dimension matches the type\n                   --  dimension.\n \n-                  elsif Nkind_In (Original_Node (L), N_Integer_Literal,\n-                                                     N_Real_Literal)\n+                  elsif Nkind (Original_Node (L)) in\n+                          N_Integer_Literal | N_Real_Literal\n                   then\n                      Dim_Warning_For_Numeric_Literal (L, Etype (R));\n \n-                  elsif Nkind_In (Original_Node (R), N_Integer_Literal,\n-                                                     N_Real_Literal)\n+                  elsif Nkind (Original_Node (R)) in\n+                          N_Integer_Literal | N_Real_Literal\n                   then\n                      Dim_Warning_For_Numeric_Literal (R, Etype (L));\n \n@@ -1875,8 +1872,8 @@ package body Sem_Dim is\n             --  dimensionless to indicate the literal is treated as if its\n             --  dimension matches the type dimension.\n \n-            if Nkind_In (Original_Node (Expr), N_Real_Literal,\n-                                               N_Integer_Literal)\n+            if Nkind (Original_Node (Expr)) in\n+                 N_Real_Literal | N_Integer_Literal\n             then\n                Dim_Warning_For_Numeric_Literal (Expr, Etyp);\n \n@@ -2065,8 +2062,8 @@ package body Sem_Dim is\n \n                if Present (Expr)\n                  and then Dims_Of_Typ /= Dimensions_Of (Expr)\n-                 and then Nkind_In (Original_Node (Expr), N_Real_Literal,\n-                                                          N_Integer_Literal)\n+                 and then Nkind (Original_Node (Expr)) in\n+                            N_Real_Literal | N_Integer_Literal\n                then\n                   Dim_Warning_For_Numeric_Literal (Expr, Etype (Typ));\n                end if;\n@@ -2105,7 +2102,7 @@ package body Sem_Dim is\n                Check_Error_Detected;\n                return;\n \n-            elsif Ekind_In (Id,  E_Constant, E_Named_Real)\n+            elsif Ekind (Id) in E_Constant | E_Named_Real\n               and then Exists (Dimensions_Of (Id))\n             then\n                Set_Dimensions (N, Dimensions_Of (Id));\n@@ -2242,8 +2239,8 @@ package body Sem_Dim is\n             --  not dimensionless to indicate the literal is treated as if\n             --  its dimension matches the type dimension.\n \n-            if Nkind_In (Original_Node (Expr), N_Real_Literal,\n-                                               N_Integer_Literal)\n+            if Nkind (Original_Node (Expr)) in\n+                 N_Real_Literal | N_Integer_Literal\n             then\n                Dim_Warning_For_Numeric_Literal (Expr, Etyp);\n "}, {"sha": "67a8cdf6095db43fbaacc03d369d49ae5b6fdf14", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -293,7 +293,7 @@ package body Sem_Disp is\n          Next_Formal (Formal);\n       end loop;\n \n-      if Ekind_In (Subp, E_Function, E_Generic_Function) then\n+      if Ekind (Subp) in E_Function | E_Generic_Function then\n          Ctrl_Type := Check_Controlling_Type (Etype (Subp), Subp);\n \n          if Present (Ctrl_Type) then\n@@ -621,7 +621,7 @@ package body Sem_Disp is\n                   Par := Parent (Par);\n                end if;\n \n-               if Nkind_In (Par, N_Function_Call, N_Procedure_Call_Statement)\n+               if Nkind (Par) in N_Function_Call | N_Procedure_Call_Statement\n                  and then Is_Entity_Name (Name (Par))\n                then\n                   declare\n@@ -684,7 +684,7 @@ package body Sem_Disp is\n                --  For equality operators, one of the operands must be\n                --  statically or dynamically tagged.\n \n-               elsif Nkind_In (Par, N_Op_Eq, N_Op_Ne) then\n+               elsif Nkind (Par) in N_Op_Eq | N_Op_Ne then\n                   if N = Right_Opnd (Par)\n                     and then Is_Tag_Indeterminate (Left_Opnd (Par))\n                   then\n@@ -993,7 +993,7 @@ package body Sem_Disp is\n    --  Start of processing for Check_Dispatching_Operation\n \n    begin\n-      if not Ekind_In (Subp, E_Function, E_Procedure) then\n+      if Ekind (Subp) not in E_Function | E_Procedure then\n          return;\n \n       --  The Default_Initial_Condition procedure is not a primitive subprogram\n@@ -1409,7 +1409,7 @@ package body Sem_Disp is\n          --  visible operation that may be declared in a partial view when\n          --  the full view is controlled.\n \n-         if Nam_In (Chars (Subp), Name_Initialize, Name_Adjust, Name_Finalize)\n+         if Chars (Subp) in Name_Initialize | Name_Adjust | Name_Finalize\n            and then Is_Controlled (Tagged_Type)\n            and then not Is_Visibly_Controlled (Tagged_Type)\n            and then not Is_Inherited_Public_Operation (Ovr_Subp)\n@@ -1569,10 +1569,10 @@ package body Sem_Disp is\n          Set_DT_Position_Value (Subp, No_Uint);\n \n       elsif Has_Controlled_Component (Tagged_Type)\n-        and then Nam_In (Chars (Subp), Name_Initialize,\n-                                       Name_Adjust,\n-                                       Name_Finalize,\n-                                       Name_Finalize_Address)\n+        and then Chars (Subp) in Name_Initialize\n+                               | Name_Adjust\n+                               | Name_Finalize\n+                               | Name_Finalize_Address\n       then\n          declare\n             F_Node   : constant Node_Id := Freeze_Node (Tagged_Type);\n@@ -2010,7 +2010,7 @@ package body Sem_Disp is\n       Ctrl_Type : Entity_Id;\n \n    begin\n-      if Ekind_In (Subp, E_Function, E_Procedure)\n+      if Ekind (Subp) in E_Function | E_Procedure\n         and then Present (DTC_Entity (Subp))\n       then\n          return Scope (DTC_Entity (Subp));"}, {"sha": "4ee6e8b59742cf0321cb094853037f8da215b9ef", "filename": "gcc/ada/sem_dist.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dist.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -746,13 +746,12 @@ package body Sem_Dist is\n       --  we are generating code.\n \n       if Comes_From_Source (P)\n+        and then Expander_Active\n         and then Is_Record_Type (ET)\n-        and then (Is_Remote_Call_Interface (ET)\n-                   or else Is_Remote_Types (ET))\n+        and then (Is_Remote_Call_Interface (ET) or else Is_Remote_Types (ET))\n         and then Present (Corresponding_Remote_Type (ET))\n-        and then Nkind_In (Parent (Parent (P)), N_Procedure_Call_Statement,\n-                                                N_Indexed_Component)\n-        and then Expander_Active\n+        and then Nkind (Parent (Parent (P))) in\n+                   N_Procedure_Call_Statement | N_Indexed_Component\n       then\n          RAS_E_Dereference (P);\n          return True;"}, {"sha": "78108e99956d03cd5cfa7cac63561633adcc632a", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 144, "deletions": 161, "changes": 305, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -2609,7 +2609,7 @@ package body Sem_Elab is\n \n             Par := Parent (Call);\n             while Present (Par) loop\n-               if Nkind_In (Par, N_Package_Body, N_Package_Declaration) then\n+               if Nkind (Par) in N_Package_Body | N_Package_Declaration then\n                   return Defining_Entity (Par);\n \n                elsif Nkind (Par) = N_Handled_Sequence_Of_Statements then\n@@ -2958,11 +2958,10 @@ package body Sem_Elab is\n             --  task objects found in the declarations.\n \n             else\n-               pragma Assert (Nkind_In (Context, N_Block_Statement,\n-                                                 N_Entry_Body,\n-                                                 N_Protected_Body,\n-                                                 N_Subprogram_Body,\n-                                                 N_Task_Body));\n+               pragma Assert\n+                 (Nkind (Context) in\n+                    N_Block_Statement | N_Entry_Body | N_Protected_Body |\n+                    N_Subprogram_Body | N_Task_Body);\n \n                Traverse_List\n                  (List      => Declarations (Context),\n@@ -2985,10 +2984,9 @@ package body Sem_Elab is\n       --  When the name denotes an array or record component, find the whole\n       --  object.\n \n-      while Nkind_In (Nam, N_Explicit_Dereference,\n-                           N_Indexed_Component,\n-                           N_Selected_Component,\n-                           N_Slice)\n+      while Nkind (Nam) in\n+        N_Explicit_Dereference | N_Indexed_Component |\n+        N_Selected_Component   | N_Slice\n       loop\n          Nam := Prefix (Nam);\n       end loop;\n@@ -3298,8 +3296,8 @@ package body Sem_Elab is\n             elsif (Debug_Flag_Underscore_A\n                     or else Restriction_Active\n                               (No_Entry_Calls_In_Elaboration_Code))\n-              and then Nkind_In (Original_Node (Scen), N_Accept_Statement,\n-                                                       N_Selective_Accept)\n+              and then Nkind (Original_Node (Scen)) in\n+                         N_Accept_Statement | N_Selective_Accept\n             then\n                return Abandon;\n \n@@ -3333,18 +3331,18 @@ package body Sem_Elab is\n             --  until expansion transforms the node and relocates the contents.\n             --  Examine these lists in case expansion is disabled.\n \n-            elsif Nkind_In (Scen, N_And_Then, N_Or_Else) then\n+            elsif Nkind (Scen) in N_And_Then | N_Or_Else then\n                Traverse_List (Actions (Scen));\n \n-            elsif Nkind_In (Scen, N_Elsif_Part, N_Iteration_Scheme) then\n+            elsif Nkind (Scen) in N_Elsif_Part | N_Iteration_Scheme then\n                Traverse_List (Condition_Actions (Scen));\n \n             elsif Nkind (Scen) = N_If_Expression then\n                Traverse_List (Then_Actions (Scen));\n                Traverse_List (Else_Actions (Scen));\n \n-            elsif Nkind_In (Scen, N_Component_Association,\n-                                  N_Iterated_Component_Association)\n+            elsif Nkind (Scen) in\n+                    N_Component_Association | N_Iterated_Component_Association\n             then\n                Traverse_List (Loop_Actions (Scen));\n \n@@ -3515,8 +3513,7 @@ package body Sem_Elab is\n             --  contexts because nested calls has not been relocated to their\n             --  final context.\n \n-            if Nkind_In (Par, N_Aspect_Specification,\n-                              N_Generic_Association)\n+            if Nkind (Par) in N_Aspect_Specification | N_Generic_Association\n             then\n                return True;\n \n@@ -3544,9 +3541,9 @@ package body Sem_Elab is\n          --  To qualify, the node must appear immediately within a source call\n          --  which invokes a source target.\n \n-         if Nkind_In (Outer_Call, N_Entry_Call_Statement,\n-                                  N_Function_Call,\n-                                  N_Procedure_Call_Statement)\n+         if Nkind (Outer_Call) in N_Entry_Call_Statement\n+                                | N_Function_Call\n+                                | N_Procedure_Call_Statement\n            and then Comes_From_Source (Outer_Call)\n          then\n             Outer_Nam := Call_Name (Outer_Call);\n@@ -3576,9 +3573,9 @@ package body Sem_Elab is\n          return\n            Nkind (Subp_Decl) = N_Subprogram_Renaming_Declaration\n              and then not Comes_From_Source (Subp_Decl)\n-             and then Nkind_In (Context, N_Function_Specification,\n-                                         N_Package_Specification,\n-                                         N_Procedure_Specification)\n+             and then Nkind (Context) in N_Function_Specification\n+                                       | N_Package_Specification\n+                                       | N_Procedure_Specification\n              and then Present (Generic_Parent (Context));\n       end Is_Generic_Formal_Subp;\n \n@@ -3612,10 +3609,10 @@ package body Sem_Elab is\n \n       --  Nothing to do when the input does not denote a call or a requeue\n \n-      elsif not Nkind_In (N, N_Entry_Call_Statement,\n-                             N_Function_Call,\n-                             N_Procedure_Call_Statement,\n-                             N_Requeue_Statement)\n+      elsif Nkind (N) not in N_Entry_Call_Statement\n+                           | N_Function_Call\n+                           | N_Procedure_Call_Statement\n+                           | N_Requeue_Statement\n       then\n          return;\n \n@@ -3624,7 +3621,7 @@ package body Sem_Elab is\n       --  elaboration) is in effect.\n \n       elsif Debug_Flag_Underscore_E\n-        and then Nkind_In (N, N_Entry_Call_Statement, N_Requeue_Statement)\n+        and then Nkind (N) in N_Entry_Call_Statement | N_Requeue_Statement\n       then\n          return;\n \n@@ -3740,8 +3737,9 @@ package body Sem_Elab is\n         (Marker, Find_Enclosing_Level (N) = Declaration_Level);\n \n       Set_Is_Dispatching_Call\n-        (Marker, Nkind_In (N, N_Function_Call, N_Procedure_Call_Statement)\n-                   and then Present (Controlling_Argument (N)));\n+        (Marker,\n+         Nkind (N) in N_Function_Call | N_Procedure_Call_Statement\n+           and then Present (Controlling_Argument (N)));\n \n       Set_Is_Elaboration_Checks_OK_Node\n         (Marker, Is_Elaboration_Checks_OK_Node (N));\n@@ -4537,8 +4535,8 @@ package body Sem_Elab is\n       --  statement due to expansion activities.\n \n       if Nkind (Comp_Unit) = N_Null_Statement\n-        and then Nkind_In (Original_Node (Comp_Unit), N_Protected_Body,\n-                                                      N_Task_Body)\n+        and then Nkind (Original_Node (Comp_Unit)) in\n+                   N_Protected_Body | N_Task_Body\n       then\n          Comp_Unit := Parent (Comp_Unit);\n          pragma Assert (Nkind (Comp_Unit) = N_Subunit);\n@@ -4554,9 +4552,8 @@ package body Sem_Elab is\n       --  the instantiated subprogram.\n \n       if Nkind (Comp_Unit) = N_Package_Specification\n-        and then Nkind_In (Original_Node (Parent (Comp_Unit)),\n-                           N_Function_Instantiation,\n-                           N_Procedure_Instantiation)\n+        and then Nkind (Original_Node (Parent (Comp_Unit))) in\n+                   N_Function_Instantiation | N_Procedure_Instantiation\n       then\n          Comp_Unit := Parent (Parent (Comp_Unit));\n \n@@ -7031,7 +7028,7 @@ package body Sem_Elab is\n                --  Enter encapsulators by inspecting their declarations and/or\n                --  statements.\n \n-               if Nkind_In (Curr, N_Block_Statement, N_Package_Body) then\n+               if Nkind (Curr) in N_Block_Statement | N_Package_Body then\n                   Enter_Handled_Body (Curr);\n \n                elsif Nkind (Curr) = N_Package_Declaration then\n@@ -7062,7 +7059,7 @@ package body Sem_Elab is\n                --    amount of work, but has the beneficial effect of computing\n                --    the early call regions of all preceding bodies.\n \n-               elsif Nkind_In (Curr, N_Entry_Body, N_Subprogram_Body) then\n+               elsif Nkind (Curr) in N_Entry_Body | N_Subprogram_Body then\n                   Start :=\n                     Find_Early_Call_Region\n                       (Body_Decl        => Curr,\n@@ -7098,9 +7095,9 @@ package body Sem_Elab is\n                --    visible declarations -> upper level\n                --    visible declarations -> terminate\n \n-               if Nkind_In (Context, N_Package_Specification,\n-                                     N_Protected_Definition,\n-                                     N_Task_Definition)\n+               if Nkind (Context) in N_Package_Specification\n+                                   | N_Protected_Definition\n+                                   | N_Task_Definition\n                then\n                   Transition_Spec_Declarations (Context, Curr);\n \n@@ -7120,12 +7117,12 @@ package body Sem_Elab is\n                --    declarations -> corresponding package spec (Elab_Body)\n                --    declarations -> terminate\n \n-               elsif Nkind_In (Context, N_Block_Statement,\n-                                        N_Entry_Body,\n-                                        N_Package_Body,\n-                                        N_Protected_Body,\n-                                        N_Subprogram_Body,\n-                                        N_Task_Body)\n+               elsif Nkind (Context) in N_Block_Statement\n+                                      | N_Entry_Body\n+                                      | N_Package_Body\n+                                      | N_Protected_Body\n+                                      | N_Subprogram_Body\n+                                      | N_Task_Body\n                then\n                   Transition_Body_Declarations (Context, Curr);\n \n@@ -7430,12 +7427,14 @@ package body Sem_Elab is\n             --  The search must come from the statements of certain bodies or\n             --  statements.\n \n-            pragma Assert (Nkind_In (Bod, N_Block_Statement,\n-                                          N_Entry_Body,\n-                                          N_Package_Body,\n-                                          N_Protected_Body,\n-                                          N_Subprogram_Body,\n-                                          N_Task_Body));\n+            pragma Assert\n+              (Nkind (Bod) in\n+                 N_Block_Statement |\n+                 N_Entry_Body      |\n+                 N_Package_Body    |\n+                 N_Protected_Body  |\n+                 N_Subprogram_Body |\n+                 N_Task_Body);\n \n             --  The search must come from the statements of the handled\n             --  sequence.\n@@ -7831,7 +7830,7 @@ package body Sem_Elab is\n          begin\n             --  Nothing to do if the pragma is not related to elaboration\n \n-            if not Nam_In (Prag_Nam, Name_Elaborate, Name_Elaborate_All) then\n+            if Prag_Nam not in Name_Elaborate | Name_Elaborate_All then\n                return;\n \n             --  Nothing to do when the pragma is illegal\n@@ -8006,7 +8005,7 @@ package body Sem_Elab is\n          --    body -> spec\n \n          if Present (Unit_Id)\n-           and then Nkind_In (Unit_Id, N_Package_Body, N_Subprogram_Body)\n+           and then Nkind (Unit_Id) in N_Package_Body | N_Subprogram_Body\n          then\n             Find_Elaboration_Context (Parent (Unit_Id));\n \n@@ -8026,10 +8025,10 @@ package body Sem_Elab is\n          --    parent spec -> grandparent spec and so on\n \n          if Present (Unit_Id)\n-           and then Nkind_In (Unit_Id, N_Generic_Package_Declaration,\n-                                   N_Generic_Subprogram_Declaration,\n-                                   N_Package_Declaration,\n-                                   N_Subprogram_Declaration)\n+           and then Nkind (Unit_Id) in N_Generic_Package_Declaration\n+                                     | N_Generic_Subprogram_Declaration\n+                                     | N_Package_Declaration\n+                                     | N_Subprogram_Declaration\n          then\n             Find_Elaboration_Context (Parent (Unit_Id));\n \n@@ -8110,7 +8109,7 @@ package body Sem_Elab is\n          Prag_Nam : Name_Id;\n          In_State : Processing_In_State)\n       is\n-         pragma Assert (Nam_In (Prag_Nam, Name_Elaborate, Name_Elaborate_All));\n+         pragma Assert (Prag_Nam in Name_Elaborate | Name_Elaborate_All);\n \n       begin\n          --  Nothing to do when the need for prior elaboration came from a\n@@ -8581,7 +8580,7 @@ package body Sem_Elab is\n          Req_Nam  : Name_Id;\n          In_State : Processing_In_State)\n       is\n-         pragma Assert (Nam_In (Req_Nam, Name_Elaborate, Name_Elaborate_All));\n+         pragma Assert (Req_Nam in Name_Elaborate | Name_Elaborate_All);\n \n          Main_Id : constant Entity_Id := Main_Unit_Entity;\n          Unit_Id : constant Entity_Id := Find_Top_Unit (Targ_Id);\n@@ -8777,8 +8776,7 @@ package body Sem_Elab is\n             --  requirement.\n \n             if Present (Unit_Prag)\n-              and then Nam_In (Pragma_Name (Unit_Prag), Name_Elaborate_All,\n-                                                        Req_Nam)\n+              and then Pragma_Name (Unit_Prag) in Name_Elaborate_All | Req_Nam\n             then\n                Req_Met := True;\n \n@@ -8907,10 +8905,10 @@ package body Sem_Elab is\n \n       Par := N;\n       while Present (Par) loop\n-         if Nkind_In (Par, N_Package_Body,\n-                           N_Package_Declaration,\n-                           N_Subprogram_Body,\n-                           N_Subprogram_Declaration)\n+         if Nkind (Par) in N_Package_Body\n+                         | N_Package_Declaration\n+                         | N_Subprogram_Body\n+                         | N_Subprogram_Declaration\n            and then Is_Generic_Instance (Unique_Defining_Entity (Par))\n          then\n             return Par;\n@@ -8983,10 +8981,10 @@ package body Sem_Elab is\n       --  but are later relocated in a different context retain their original\n       --  declaration level.\n \n-      if Nkind_In (N, N_Call_Marker,\n-                      N_Function_Instantiation,\n-                      N_Package_Instantiation,\n-                      N_Procedure_Instantiation)\n+      if Nkind (N) in N_Call_Marker\n+                    | N_Function_Instantiation\n+                    | N_Package_Instantiation\n+                    | N_Procedure_Instantiation\n         and then Is_Declaration_Level_Node (N)\n       then\n          return Declaration_Level;\n@@ -9007,7 +9005,7 @@ package body Sem_Elab is\n          --  they are always elaborated when the enclosing context is invoked\n          --  or elaborated.\n \n-         elsif Nkind_In (Curr, N_Package_Body, N_Package_Declaration) then\n+         elsif Nkind (Curr) in N_Package_Body | N_Package_Declaration then\n             null;\n \n          --  The current construct is a block statement\n@@ -9039,9 +9037,8 @@ package body Sem_Elab is\n \n          --  The current construct is a declaration-level encapsulator\n \n-         elsif Nkind_In (Curr, N_Entry_Body,\n-                               N_Subprogram_Body,\n-                               N_Task_Body)\n+         elsif Nkind (Curr) in\n+                 N_Entry_Body | N_Subprogram_Body | N_Task_Body\n          then\n             --  If the traversal came from the handled sequence of statments,\n             --  then the node cannot possibly appear at any level. This is\n@@ -9129,8 +9126,8 @@ package body Sem_Elab is\n       --  that of the \"related instance\".\n \n       elsif Nkind (N) = N_Package_Declaration\n-        and then Nkind_In (Orig_N, N_Function_Instantiation,\n-                                   N_Procedure_Instantiation)\n+        and then Nkind (Orig_N) in\n+                   N_Function_Instantiation | N_Procedure_Instantiation\n         and then Nkind (Context) = N_Compilation_Unit\n       then\n          return Related_Instance (Defining_Entity (N));\n@@ -9141,8 +9138,8 @@ package body Sem_Elab is\n \n       elsif Nkind (N) = N_Subunit\n         and then Nkind (Proper_Body (N)) = N_Null_Statement\n-        and then Nkind_In (Original_Node (Proper_Body (N)), N_Protected_Body,\n-                                                            N_Task_Body)\n+        and then Nkind (Original_Node (Proper_Body (N))) in\n+                   N_Protected_Body | N_Task_Body\n       then\n          return Defining_Entity (Original_Node (Proper_Body (N)));\n \n@@ -9168,7 +9165,7 @@ package body Sem_Elab is\n          --  Handle various combinations of concurrent and private types\n \n          loop\n-            if Ekind_In (Typ, E_Protected_Type, E_Task_Type)\n+            if Ekind (Typ) in E_Protected_Type | E_Task_Type\n               and then Present (Anonymous_Object (Typ))\n             then\n                Typ := Anonymous_Object (Typ);\n@@ -10911,13 +10908,10 @@ package body Sem_Elab is\n          elsif Is_Task_Type (Id) then\n             Rec := Create_Task_Rep (Id);\n \n-         elsif Ekind_In (Id, E_Constant, E_Variable) then\n+         elsif Ekind (Id) in E_Constant | E_Variable then\n             Rec := Create_Variable_Rep (Id);\n \n-         elsif Ekind_In (Id, E_Entry,\n-                             E_Function,\n-                             E_Operator,\n-                             E_Procedure)\n+         elsif Ekind (Id) in E_Entry | E_Function | E_Operator | E_Procedure\n          then\n             Rec := Create_Subprogram_Rep (Id);\n \n@@ -12094,14 +12088,13 @@ package body Sem_Elab is\n \n                --  The main unit is a body\n \n-               if Ekind_In (Main_Unit_Id, E_Package_Body,\n-                                          E_Subprogram_Body)\n+               if Ekind (Main_Unit_Id) in E_Package_Body | E_Subprogram_Body\n                then\n                   return In_Body;\n \n                --  The main unit is a stand-alone subprogram body\n \n-               elsif Ekind_In (Main_Unit_Id, E_Function, E_Procedure)\n+               elsif Ekind (Main_Unit_Id) in E_Function | E_Procedure\n                  and then Nkind (Unit_Declaration_Node (Main_Unit_Id)) =\n                             N_Subprogram_Body\n                then\n@@ -12116,8 +12109,7 @@ package body Sem_Elab is\n             --  Otherwise the node is in the complementary unit of the main\n             --  unit. The main unit is a body, the node is in the spec.\n \n-            elsif Ekind_In (Main_Unit_Id, E_Package_Body,\n-                                          E_Subprogram_Body)\n+            elsif Ekind (Main_Unit_Id) in E_Package_Body | E_Subprogram_Body\n             then\n                return In_Spec;\n \n@@ -12342,17 +12334,17 @@ package body Sem_Elab is\n \n             --  Protected type\n \n-            elsif Nkind_In (Decl, N_Protected_Type_Declaration,\n-                                  N_Single_Protected_Declaration)\n+            elsif Nkind (Decl) in N_Protected_Type_Declaration\n+                                | N_Single_Protected_Declaration\n             then\n                Process_Protected_Type_Declaration\n                  (Prot_Decl => Decl,\n                   In_State  => In_State);\n \n             --  Subprogram or entry\n \n-            elsif Nkind_In (Decl, N_Entry_Declaration,\n-                                  N_Subprogram_Declaration)\n+            elsif Nkind (Decl) in N_Entry_Declaration\n+                                | N_Subprogram_Declaration\n             then\n                Process_Subprogram_Declaration\n                  (Subp_Decl => Decl,\n@@ -12376,8 +12368,8 @@ package body Sem_Elab is\n \n             --  Task type\n \n-            elsif Nkind_In (Decl, N_Single_Task_Declaration,\n-                                  N_Task_Type_Declaration)\n+            elsif Nkind (Decl) in N_Single_Task_Declaration\n+                                | N_Task_Type_Declaration\n             then\n                Process_Task_Type_Declaration\n                  (Task_Decl => Decl,\n@@ -12497,7 +12489,7 @@ package body Sem_Elab is\n          --  Nothing to do for an abstract subprogram because it has no body to\n          --  examine.\n \n-         elsif Ekind_In (Subp_Id, E_Function, E_Procedure)\n+         elsif Ekind (Subp_Id) in E_Function | E_Procedure\n            and then Is_Abstract_Subprogram (Subp_Id)\n          then\n             return;\n@@ -12513,7 +12505,7 @@ package body Sem_Elab is\n          --  DFS traversal into its barrier function and body.\n \n          if In_Extended_Main_Code_Unit (Subp_Id) then\n-            if Ekind_In (Subp_Id, E_Entry, E_Entry_Family, E_Procedure) then\n+            if Ekind (Subp_Id) in E_Entry | E_Entry_Family | E_Procedure then\n                Traverse_Invocation_Body\n                  (N        => Barrier_Body_Declaration (Subp_Rep),\n                   In_State => In_State);\n@@ -12893,8 +12885,8 @@ package body Sem_Elab is\n          --  Process the entries of the task type because they represent valid\n          --  entry points into the task body.\n \n-         if Nkind_In (Task_Decl, N_Single_Task_Declaration,\n-                                 N_Task_Type_Declaration)\n+         if Nkind (Task_Decl) in N_Single_Task_Declaration\n+                               | N_Task_Type_Declaration\n          then\n             Task_Def := Task_Definition (Task_Decl);\n \n@@ -13192,10 +13184,8 @@ package body Sem_Elab is\n             --  Entry, operator, or subprogram call. This case must come last\n             --  because most invocations above are variations of this case.\n \n-            elsif Ekind_In (Targ_Id, E_Entry,\n-                                     E_Function,\n-                                     E_Operator,\n-                                     E_Procedure)\n+            elsif Ekind (Targ_Id) in\n+                    E_Entry | E_Function | E_Operator | E_Procedure\n             then\n                Extra := Empty;\n                Kind  := Call;\n@@ -14460,9 +14450,7 @@ package body Sem_Elab is\n       begin\n          --  An abstract subprogram does not have a body\n \n-         if Ekind_In (Subp_Id, E_Function,\n-                               E_Operator,\n-                               E_Procedure)\n+         if Ekind (Subp_Id) in E_Function | E_Operator | E_Procedure\n            and then Is_Abstract_Subprogram (Subp_Id)\n          then\n             return True;\n@@ -14510,9 +14498,8 @@ package body Sem_Elab is\n          Formal_Id : Entity_Id;\n \n       begin\n-         pragma Assert (Nam_In (Subp_Nam, Name_Adjust,\n-                                          Name_Finalize,\n-                                          Name_Initialize));\n+         pragma Assert\n+           (Subp_Nam in Name_Adjust | Name_Finalize | Name_Initialize);\n \n          --  To qualify, the subprogram must denote a source procedure with\n          --  name Adjust, Finalize, or Initialize where the sole formal is\n@@ -14700,7 +14687,7 @@ package body Sem_Elab is\n          --  protected type.\n \n          return\n-           Ekind_In (Id, E_Function, E_Procedure)\n+           Ekind (Id) in E_Function | E_Procedure\n              and then Is_Protected_Type (Non_Private_View (Scope (Id)));\n       end Is_Protected_Subp;\n \n@@ -14714,7 +14701,7 @@ package body Sem_Elab is\n          --  Protected_Subprogram set.\n \n          return\n-           Ekind_In (Id, E_Function, E_Procedure)\n+           Ekind (Id) in E_Function | E_Procedure\n              and then Present (Protected_Subprogram (Id));\n       end Is_Protected_Body_Subp;\n \n@@ -14766,7 +14753,7 @@ package body Sem_Elab is\n          --  is hidden within an anonymous package, and is a generic instance.\n \n          return\n-           Ekind_In (Id, E_Function, E_Procedure)\n+           Ekind (Id) in E_Function | E_Procedure\n              and then Is_Hidden (Id)\n              and then Is_Generic_Instance (Id);\n       end Is_Subprogram_Inst;\n@@ -14835,7 +14822,7 @@ package body Sem_Elab is\n              --  The attribute name must be one of the 'Access forms. Note that\n              --  'Unchecked_Access cannot apply to a subprogram.\n \n-             and then Nam_In (Nam, Name_Access, Name_Unrestricted_Access);\n+             and then Nam in Name_Access | Name_Unrestricted_Access;\n       end Is_Suitable_Access_Taken;\n \n       ----------------------\n@@ -15869,10 +15856,10 @@ package body Sem_Elab is\n \n       --  Bodies\n \n-      if Nkind_In (N, N_Package_Body,\n-                      N_Protected_Body,\n-                      N_Subprogram_Body,\n-                      N_Task_Body)\n+      if Nkind (N) in N_Package_Body\n+                    | N_Protected_Body\n+                    | N_Subprogram_Body\n+                    | N_Task_Body\n       then\n          Spec_Id := Corresponding_Spec (N);\n \n@@ -15892,13 +15879,13 @@ package body Sem_Elab is\n \n       --  Declarations\n \n-      elsif Nkind_In (N, N_Entry_Declaration,\n-                         N_Generic_Package_Declaration,\n-                         N_Generic_Subprogram_Declaration,\n-                         N_Package_Declaration,\n-                         N_Protected_Type_Declaration,\n-                         N_Subprogram_Declaration,\n-                         N_Task_Type_Declaration)\n+      elsif Nkind (N) in N_Entry_Declaration\n+                       | N_Generic_Package_Declaration\n+                       | N_Generic_Subprogram_Declaration\n+                       | N_Package_Declaration\n+                       | N_Protected_Type_Declaration\n+                       | N_Subprogram_Declaration\n+                       | N_Task_Type_Declaration\n       then\n          Spec_Decl := N;\n \n@@ -15972,12 +15959,12 @@ package body Sem_Elab is\n \n       begin\n          return\n-           Nkind_In (Decl, N_Generic_Package_Declaration,\n-                           N_Generic_Subprogram_Declaration,\n-                           N_Package_Declaration,\n-                           N_Protected_Type_Declaration,\n-                           N_Subprogram_Declaration,\n-                           N_Task_Type_Declaration)\n+           Nkind (Decl) in N_Generic_Package_Declaration\n+                         | N_Generic_Subprogram_Declaration\n+                         | N_Package_Declaration\n+                         | N_Protected_Type_Declaration\n+                         | N_Subprogram_Declaration\n+                         | N_Task_Type_Declaration\n              and then Present (Corresponding_Body (Decl))\n              and then Nkind (Parent (Unit_Declaration_Node\n                         (Corresponding_Body (Decl)))) = N_Subunit;\n@@ -16846,8 +16833,8 @@ package body Sem_Elab is\n          if Nkind (Decl) = N_Subprogram_Body then\n             Body_Acts_As_Spec := True;\n \n-         elsif Nkind_In (Decl, N_Subprogram_Declaration,\n-                               N_Subprogram_Body_Stub)\n+         elsif Nkind (Decl) in\n+                 N_Subprogram_Declaration | N_Subprogram_Body_Stub\n            or else Inst_Case\n          then\n             Body_Acts_As_Spec := False;\n@@ -17523,8 +17510,7 @@ package body Sem_Elab is\n \n       P := Parent (N);\n       while Present (P) loop\n-         if Nkind_In (P, N_Parameter_Specification,\n-                         N_Component_Declaration)\n+         if Nkind (P) in N_Parameter_Specification | N_Component_Declaration\n          then\n             return;\n \n@@ -17619,8 +17605,8 @@ package body Sem_Elab is\n                   --  Filter out case of default expressions, where we do not\n                   --  do the check at this stage.\n \n-                  if Nkind_In (P, N_Parameter_Specification,\n-                                  N_Component_Declaration)\n+                  if Nkind (P) in\n+                       N_Parameter_Specification | N_Component_Declaration\n                   then\n                      return;\n                   end if;\n@@ -17631,10 +17617,10 @@ package body Sem_Elab is\n                   if Nkind (P) = N_Protected_Body then\n                      return;\n \n-                  elsif Nkind_In (P, N_Subprogram_Body,\n-                                     N_Task_Body,\n-                                     N_Block_Statement,\n-                                     N_Entry_Body)\n+                  elsif Nkind (P) in N_Subprogram_Body\n+                                   | N_Task_Body\n+                                   | N_Block_Statement\n+                                   | N_Entry_Body\n                   then\n                      if L = Declarations (P) then\n                         exit;\n@@ -17857,10 +17843,7 @@ package body Sem_Elab is\n       --  then there is nothing to do (we do not know what is being assigned),\n       --  but otherwise this is an assignment to the prefix.\n \n-      if Nkind_In (N, N_Indexed_Component,\n-                      N_Selected_Component,\n-                      N_Slice)\n-      then\n+      if Nkind (N) in N_Indexed_Component | N_Selected_Component | N_Slice then\n          if not Is_Access_Type (Etype (Prefix (N))) then\n             Check_Elab_Assign (Prefix (N));\n          end if;\n@@ -18285,9 +18268,9 @@ package body Sem_Elab is\n       --  If not function or procedure call, instantiation, or 'Access, then\n       --  ignore call (this happens in some error cases and rewriting cases).\n \n-      elsif not Nkind_In (N, N_Attribute_Reference,\n-                             N_Function_Call,\n-                             N_Procedure_Call_Statement)\n+      elsif Nkind (N) not in N_Attribute_Reference\n+                           | N_Function_Call\n+                           | N_Procedure_Call_Statement\n         and then not Inst_Case\n       then\n          return;\n@@ -18387,8 +18370,8 @@ package body Sem_Elab is\n          --  code, do not trace past an accept statement, because the rendez-\n          --  vous will happen after elaboration.\n \n-         if Nkind_In (Original_Node (N), N_Accept_Statement,\n-                                         N_Selective_Accept)\n+         if Nkind (Original_Node (N)) in\n+              N_Accept_Statement | N_Selective_Accept\n            and then Restriction_Active (No_Entry_Calls_In_Elaboration_Code)\n          then\n             return Abandon;\n@@ -18421,8 +18404,8 @@ package body Sem_Elab is\n \n          elsif not Debug_Flag_Dot_UU\n            and then Nkind (N) = N_Attribute_Reference\n-           and then Nam_In (Attribute_Name (N), Name_Access,\n-                                                Name_Unrestricted_Access)\n+           and then\n+             Attribute_Name (N) in Name_Access | Name_Unrestricted_Access\n            and then Is_Entity_Name (Prefix (N))\n            and then Is_Subprogram (Entity (Prefix (N)))\n          then\n@@ -18503,7 +18486,7 @@ package body Sem_Elab is\n \n       Sbody := Unit_Declaration_Node (E);\n \n-      if not Nkind_In (Sbody, N_Subprogram_Body, N_Package_Body) then\n+      if Nkind (Sbody) not in N_Subprogram_Body | N_Package_Body then\n          Ebody := Corresponding_Body (Sbody);\n \n          if No (Ebody) then\n@@ -18597,7 +18580,7 @@ package body Sem_Elab is\n                --  Check we have an If statement or a null statement (happens\n                --  when the If has been expanded to be True).\n \n-               exit when not Nkind_In (P, N_If_Statement, N_Null_Statement);\n+               exit when Nkind (P) not in N_If_Statement | N_Null_Statement;\n \n                --  Our special case will be indicated either by the pragma\n                --  coming from an aspect ...\n@@ -18758,9 +18741,9 @@ package body Sem_Elab is\n                --  A rather specific check. For Finalize/Adjust/Initialize, if\n                --  the type has Warnings_Off set, suppress the warning.\n \n-               if Nam_In (Chars (E), Name_Adjust,\n-                                     Name_Finalize,\n-                                     Name_Initialize)\n+               if Chars (E) in Name_Adjust\n+                             | Name_Finalize\n+                             | Name_Initialize\n                  and then Present (First_Formal (E))\n                then\n                   declare\n@@ -19378,7 +19361,7 @@ package body Sem_Elab is\n \n    function Is_Call_Of_Generic_Formal (N : Node_Id) return Boolean is\n    begin\n-      return Nkind_In (N, N_Function_Call, N_Procedure_Call_Statement)\n+      return Nkind (N) in N_Function_Call | N_Procedure_Call_Statement\n \n         --  Always return False if debug flag -gnatd.G is set\n \n@@ -19545,7 +19528,7 @@ package body Sem_Elab is\n       S1 := Scop1;\n       while S1 /= Standard_Standard\n         and then not Is_Compilation_Unit (S1)\n-        and then Ekind_In (S1, E_Package, E_Protected_Type, E_Block)\n+        and then Ekind (S1) in E_Package | E_Protected_Type | E_Block\n       loop\n          S1 := Scope (S1);\n       end loop;\n@@ -19555,7 +19538,7 @@ package body Sem_Elab is\n       S2 := Scop2;\n       while S2 /= Standard_Standard\n         and then not Is_Compilation_Unit (S2)\n-        and then Ekind_In (S2, E_Package, E_Protected_Type, E_Block)\n+        and then Ekind (S2) in E_Package | E_Protected_Type | E_Block\n       loop\n          S2 := Scope (S2);\n       end loop;\n@@ -19680,7 +19663,7 @@ package body Sem_Elab is\n       --  Check for case of body entity\n       --  Why is the check for E_Void needed???\n \n-      if Ekind_In (E, E_Void, E_Subprogram_Body, E_Package_Body) then\n+      if Ekind (E) in E_Void | E_Subprogram_Body | E_Package_Body then\n          Decl := E;\n \n          loop"}, {"sha": "d693a8de453836c4e90d28049e4492657e58c589", "filename": "gcc/ada/sem_elim.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_elim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_elim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elim.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -428,7 +428,7 @@ package body Sem_Elim is\n \n             --  Check for case of subprogram\n \n-            elsif Ekind_In (E, E_Function, E_Procedure) then\n+            elsif Ekind (E) in E_Function | E_Procedure then\n \n                --  If Source_Location present, then see if it matches\n "}, {"sha": "8c13abc7000979a8dcf4bca09a189f5b7c3df56f", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -626,8 +626,8 @@ package body Sem_Eval is\n             --  Determine if the out-of-range violation constitutes a warning\n             --  or an error based on context, according to RM 4.9 (34/3).\n \n-            elsif Nkind_In (Original_Node (N), N_Type_Conversion,\n-                                               N_Qualified_Expression)\n+            elsif Nkind (Original_Node (N)) in\n+                    N_Type_Conversion | N_Qualified_Expression\n               and then Comes_From_Source (Original_Node (N))\n             then\n                Apply_Compile_Time_Constraint_Error\n@@ -958,7 +958,7 @@ package body Sem_Eval is\n          --  Fixup only required for First/Last attribute reference\n \n          if Nkind (N) = N_Attribute_Reference\n-           and then Nam_In (Attribute_Name (N), Name_First, Name_Last)\n+           and then Attribute_Name (N) in Name_First | Name_Last\n          then\n             Xtyp := Etype (Prefix (N));\n \n@@ -1111,8 +1111,8 @@ package body Sem_Eval is\n          --  Values are the same if they refer to the same entity and the\n          --  entity is nonvolatile.\n \n-         elsif Nkind_In (Lf, N_Identifier, N_Expanded_Name)\n-           and then Nkind_In (Rf, N_Identifier, N_Expanded_Name)\n+         elsif Nkind (Lf) in N_Identifier | N_Expanded_Name\n+           and then Nkind (Rf) in N_Identifier | N_Expanded_Name\n            and then Entity (Lf) = Entity (Rf)\n \n            --  If the entity is a discriminant, the two expressions may be\n@@ -1154,9 +1154,9 @@ package body Sem_Eval is\n \n          elsif Nkind (Lf) = N_Attribute_Reference\n            and then Attribute_Name (Lf) = Attribute_Name (Rf)\n-           and then Nam_In (Attribute_Name (Lf), Name_First, Name_Last)\n-           and then Nkind_In (Prefix (Lf), N_Identifier, N_Expanded_Name)\n-           and then Nkind_In (Prefix (Rf), N_Identifier, N_Expanded_Name)\n+           and then Attribute_Name (Lf) in Name_First | Name_Last\n+           and then Nkind (Prefix (Lf)) in N_Identifier | N_Expanded_Name\n+           and then Nkind (Prefix (Rf)) in N_Identifier | N_Expanded_Name\n            and then Entity (Prefix (Lf)) = Entity (Prefix (Rf))\n            and then Is_Same_Subscript (Expressions (Lf), Expressions (Rf))\n          then\n@@ -1849,11 +1849,8 @@ package body Sem_Eval is\n \n          --  Other literals and NULL are known at compile time\n \n-         elsif\n-            Nkind_In (K, N_Character_Literal,\n-                         N_Real_Literal,\n-                         N_String_Literal,\n-                         N_Null)\n+         elsif K in\n+           N_Character_Literal | N_Real_Literal | N_String_Literal | N_Null\n          then\n             return True;\n          end if;\n@@ -2830,11 +2827,11 @@ package body Sem_Eval is\n          --  so we can safely ignore these cases.\n \n          return\n-           Nkind_In (Context, N_Attribute_Definition_Clause,\n-                              N_Attribute_Reference,\n-                              N_Modular_Type_Definition,\n-                              N_Number_Declaration,\n-                              N_Signed_Integer_Type_Definition);\n+           Nkind (Context) in N_Attribute_Definition_Clause\n+                            | N_Attribute_Reference\n+                            | N_Modular_Type_Definition\n+                            | N_Number_Declaration\n+                            | N_Signed_Integer_Type_Definition;\n       end In_Any_Integer_Context;\n \n       --  Local variables\n@@ -2857,10 +2854,10 @@ package body Sem_Eval is\n       --  Check_Non_Static_Context on an expanded literal may lead to spurious\n       --  and misleading warnings.\n \n-      if (Nkind_In (Par, N_Case_Expression_Alternative, N_If_Expression)\n+      if (Nkind (Par) in N_Case_Expression_Alternative | N_If_Expression\n            or else Nkind (Par) not in N_Subexpr)\n-        and then (not Nkind_In (Par, N_Case_Expression_Alternative,\n-                                     N_If_Expression)\n+        and then (Nkind (Par) not in N_Case_Expression_Alternative\n+                                   | N_If_Expression\n                    or else Comes_From_Source (N))\n         and then not In_Any_Integer_Context (Par)\n       then\n@@ -3720,7 +3717,7 @@ package body Sem_Eval is\n       if Is_Array_Type (Left_Typ)\n         and then Left_Typ /= Any_Composite\n         and then Number_Dimensions (Left_Typ) = 1\n-        and then Nkind_In (N, N_Op_Eq, N_Op_Ne)\n+        and then Nkind (N) in N_Op_Eq | N_Op_Ne\n       then\n          if Raises_Constraint_Error (Left)\n               or else\n@@ -3775,7 +3772,7 @@ package body Sem_Eval is\n          if Is_String_Type (Left_Typ) then\n             if Ada_Version < Ada_2020\n               and then (Comes_From_Source (N)\n-                         or else not Nkind_In (N, N_Op_Eq, N_Op_Ne))\n+                         or else Nkind (N) not in N_Op_Eq | N_Op_Ne)\n             then\n                Is_Static_Expression := False;\n                Set_Is_Static_Expression (N, False);\n@@ -5005,7 +5002,7 @@ package body Sem_Eval is\n \n    function Get_String_Val (N : Node_Id) return Node_Id is\n    begin\n-      if Nkind_In (N, N_String_Literal, N_Character_Literal) then\n+      if Nkind (N) in N_String_Literal | N_Character_Literal then\n          return N;\n       else\n          pragma Assert (Is_Entity_Name (N));\n@@ -6593,8 +6590,8 @@ package body Sem_Eval is\n          if Can_Never_Be_Null (T1) /= Can_Never_Be_Null (T2) then\n             return False;\n \n-         elsif Ekind_In (T1, E_Access_Subprogram_Type,\n-                             E_Anonymous_Access_Subprogram_Type)\n+         elsif Ekind (T1) in E_Access_Subprogram_Type\n+                           | E_Anonymous_Access_Subprogram_Type\n          then\n             return\n               Subtype_Conformant\n@@ -7302,9 +7299,8 @@ package body Sem_Eval is\n             --  Flag array cases\n \n             elsif Is_Array_Type (E) then\n-               if not Nam_In (Attribute_Name (N), Name_First,\n-                                                  Name_Last,\n-                                                  Name_Length)\n+               if Attribute_Name (N)\n+                    not in Name_First | Name_Last | Name_Length\n                then\n                   Error_Msg_N\n                     (\"!static array attribute must be Length, First, or Last \""}, {"sha": "15bb146f5ba4f3a8a537606661c2142bb0b7ec24", "filename": "gcc/ada/sem_intr.adb", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_intr.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -76,7 +76,7 @@ package body Sem_Intr is\n \n    procedure Check_Exception_Function (E : Entity_Id; N : Node_Id) is\n    begin\n-      if not Ekind_In (E, E_Function, E_Generic_Function) then\n+      if Ekind (E) not in E_Function | E_Generic_Function then\n          Errint\n            (\"intrinsic exception subprogram must be a function\", E, N);\n \n@@ -129,9 +129,9 @@ package body Sem_Intr is\n       --  literal is legal even in Ada 83 mode, where such literals are\n       --  not static.\n \n-      if Nam_In (Cnam, Name_Import_Address,\n-                       Name_Import_Largest_Value,\n-                       Name_Import_Value)\n+      if Cnam in Name_Import_Address\n+               | Name_Import_Largest_Value\n+               | Name_Import_Value\n       then\n          if Etype (Arg1) = Any_Type\n            or else Raises_Constraint_Error (Arg1)\n@@ -190,13 +190,14 @@ package body Sem_Intr is\n    begin\n       --  Arithmetic operators\n \n-      if Nam_In (Nam, Name_Op_Add, Name_Op_Subtract, Name_Op_Multiply,\n-                      Name_Op_Divide, Name_Op_Rem, Name_Op_Mod, Name_Op_Abs)\n+      if Nam in Name_Op_Add    | Name_Op_Subtract | Name_Op_Multiply |\n+                Name_Op_Divide | Name_Op_Rem      | Name_Op_Mod      |\n+                Name_Op_Abs\n       then\n          T1 := Etype (First_Formal (E));\n \n          if No (Next_Formal (First_Formal (E))) then\n-            if Nam_In (Nam, Name_Op_Add, Name_Op_Subtract, Name_Op_Abs) then\n+            if Nam in Name_Op_Add | Name_Op_Subtract | Name_Op_Abs then\n                T2 := T1;\n \n             --  Previous error in declaration\n@@ -231,8 +232,8 @@ package body Sem_Intr is\n \n       --  Comparison operators\n \n-      elsif Nam_In (Nam, Name_Op_Eq, Name_Op_Ge, Name_Op_Gt, Name_Op_Le,\n-                         Name_Op_Lt, Name_Op_Ne)\n+      elsif Nam in Name_Op_Eq | Name_Op_Ge | Name_Op_Gt | Name_Op_Le |\n+                   Name_Op_Lt | Name_Op_Ne\n       then\n          T1 := Etype (First_Formal (E));\n \n@@ -327,8 +328,8 @@ package body Sem_Intr is\n       --  Shift cases. We allow user specification of intrinsic shift operators\n       --  for any numeric types.\n \n-      elsif Nam_In (Nam, Name_Rotate_Left, Name_Rotate_Right, Name_Shift_Left,\n-                         Name_Shift_Right, Name_Shift_Right_Arithmetic)\n+      elsif Nam in Name_Rotate_Left | Name_Rotate_Right | Name_Shift_Left |\n+                   Name_Shift_Right | Name_Shift_Right_Arithmetic\n       then\n          Check_Shift (E, N);\n \n@@ -344,9 +345,9 @@ package body Sem_Intr is\n \n       --  Exception functions\n \n-      elsif Nam_In (Nam, Name_Exception_Information,\n-                         Name_Exception_Message,\n-                         Name_Exception_Name)\n+      elsif Nam in Name_Exception_Information\n+                 | Name_Exception_Message\n+                 | Name_Exception_Name\n       then\n          Check_Exception_Function (E, N);\n \n@@ -357,13 +358,13 @@ package body Sem_Intr is\n \n       --  Source_Location and navigation functions\n \n-      elsif Nam_In (Nam, Name_File,\n-                         Name_Line,\n-                         Name_Source_Location,\n-                         Name_Enclosing_Entity,\n-                         Name_Compilation_ISO_Date,\n-                         Name_Compilation_Date,\n-                         Name_Compilation_Time)\n+      elsif Nam in Name_File\n+                 | Name_Line\n+                 | Name_Source_Location\n+                 | Name_Enclosing_Entity\n+                 | Name_Compilation_ISO_Date\n+                 | Name_Compilation_Date\n+                 | Name_Compilation_Time\n       then\n          null;\n \n@@ -388,7 +389,7 @@ package body Sem_Intr is\n       Ptyp2 : Node_Id;\n \n    begin\n-      if not Ekind_In (E, E_Function, E_Generic_Function) then\n+      if Ekind (E) not in E_Function | E_Generic_Function then\n          Errint (\"intrinsic shift subprogram must be a function\", E, N);\n          return;\n       end if;"}, {"sha": "4130cd811b6e0cacf1f66755509a12ebcffee4a9", "filename": "gcc/ada/sem_mech.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_mech.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_mech.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_mech.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -230,8 +230,8 @@ package body Sem_Mech is\n                      --  OUT and IN OUT parameters of record types are passed\n                      --  by reference regardless of pragmas (RM B.3 (69/2)).\n \n-                     elsif Ekind_In (Formal, E_Out_Parameter,\n-                                             E_In_Out_Parameter)\n+                     elsif Ekind (Formal) in\n+                             E_Out_Parameter | E_In_Out_Parameter\n                      then\n                         Set_Mechanism (Formal, By_Reference);\n "}, {"sha": "b7148d80f8ce962f16a05219ca5bdb2c9e484ccb", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 295, "deletions": 318, "changes": 613, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -697,8 +697,8 @@ package body Sem_Prag is\n          elsif Ekind (Item_Id) = E_Constant then\n             Add_Str_To_Name_Buffer (\"constant\");\n \n-         elsif Ekind_In (Item_Id, E_Generic_In_Out_Parameter,\n-                                  E_Generic_In_Parameter)\n+         elsif Ekind (Item_Id) in\n+                 E_Generic_In_Out_Parameter | E_Generic_In_Parameter\n          then\n             Add_Str_To_Name_Buffer (\"generic parameter\");\n \n@@ -972,32 +972,32 @@ package body Sem_Prag is\n \n                   --  Constants\n \n-                  if Ekind_In (Item_Id, E_Constant, E_Loop_Parameter)\n+                  if Ekind (Item_Id) in E_Constant | E_Loop_Parameter\n                       or else\n \n                     --  Current instances of concurrent types\n \n-                    Ekind_In (Item_Id, E_Protected_Type, E_Task_Type)\n+                    Ekind (Item_Id) in E_Protected_Type | E_Task_Type\n                       or else\n \n                     --  Formal parameters\n \n-                    Ekind_In (Item_Id, E_Generic_In_Out_Parameter,\n-                                       E_Generic_In_Parameter,\n-                                       E_In_Parameter,\n-                                       E_In_Out_Parameter,\n-                                       E_Out_Parameter)\n+                    Ekind (Item_Id) in E_Generic_In_Out_Parameter\n+                                     | E_Generic_In_Parameter\n+                                     | E_In_Parameter\n+                                     | E_In_Out_Parameter\n+                                     | E_Out_Parameter\n                       or else\n \n                     --  States, variables\n \n-                    Ekind_In (Item_Id, E_Abstract_State, E_Variable)\n+                    Ekind (Item_Id) in E_Abstract_State | E_Variable\n                   then\n                      --  A [generic] function is not allowed to have Output\n                      --  items in its dependency relations. Note that \"null\"\n                      --  and attribute 'Result are still valid items.\n \n-                     if Ekind_In (Spec_Id, E_Function, E_Generic_Function)\n+                     if Ekind (Spec_Id) in E_Function | E_Generic_Function\n                        and then not Is_Input\n                      then\n                         SPARK_Msg_N\n@@ -1009,7 +1009,7 @@ package body Sem_Prag is\n                      --  they behave as objects in the context of pragma\n                      --  [Refined_]Depends.\n \n-                     if Ekind_In (Item_Id, E_Protected_Type, E_Task_Type) then\n+                     if Ekind (Item_Id) in E_Protected_Type | E_Task_Type then\n \n                         --  This use is legal as long as the concurrent type is\n                         --  the current instance of an enclosing type.\n@@ -1144,9 +1144,9 @@ package body Sem_Prag is\n                            Ref    => Item);\n                      end if;\n \n-                     if Ekind_In (Item_Id, E_Abstract_State,\n-                                           E_Constant,\n-                                           E_Variable)\n+                     if Ekind (Item_Id) in E_Abstract_State\n+                                         | E_Constant\n+                                         | E_Variable\n                        and then Present (Encapsulating_State (Item_Id))\n                      then\n                         Append_New_Elmt (Item_Id, Constits_Seen);\n@@ -1222,7 +1222,7 @@ package body Sem_Prag is\n \n       procedure Check_Function_Return is\n       begin\n-         if Ekind_In (Spec_Id, E_Function, E_Generic_Function)\n+         if Ekind (Spec_Id) in E_Function | E_Generic_Function\n            and then not Result_Seen\n          then\n             SPARK_Msg_NE\n@@ -1269,9 +1269,9 @@ package body Sem_Prag is\n             Adjusted_Kind : Entity_Kind := Ekind (Item_Id);\n \n          begin\n-            if Ekind_In (Item_Id, E_Constant,\n-                                  E_Generic_In_Parameter,\n-                                  E_In_Parameter)\n+            if Ekind (Item_Id) in E_Constant\n+                                | E_Generic_In_Parameter\n+                                | E_In_Parameter\n               and then Is_Access_Type (Etype (Item_Id))\n             then\n                Adjusted_Kind := E_Variable;\n@@ -2280,7 +2280,7 @@ package body Sem_Prag is\n                --  the current instance of an enclosing protected or task type\n                --  (SPARK RM 6.1.4).\n \n-               elsif Ekind_In (Item_Id, E_Protected_Type, E_Task_Type) then\n+               elsif Ekind (Item_Id) in E_Protected_Type | E_Task_Type then\n                   if Is_CCT_Instance (Item_Id, Spec_Id) then\n \n                      --  Pragma [Refined_]Global associated with a protected\n@@ -2367,10 +2367,10 @@ package body Sem_Prag is\n                --  The only legal references are those to abstract states,\n                --  objects and various kinds of constants (SPARK RM 6.1.4(4)).\n \n-               elsif not Ekind_In (Item_Id, E_Abstract_State,\n-                                            E_Constant,\n-                                            E_Loop_Parameter,\n-                                            E_Variable)\n+               elsif Ekind (Item_Id) not in E_Abstract_State\n+                                          | E_Constant\n+                                          | E_Loop_Parameter\n+                                          | E_Variable\n                then\n                   SPARK_Msg_N\n                     (\"global item must denote object, state or current \"\n@@ -2414,7 +2414,7 @@ package body Sem_Prag is\n                   --  nonvolatile function (SPARK RM 7.1.3(8)).\n \n                   elsif Is_External_State (Item_Id)\n-                    and then Ekind_In (Spec_Id, E_Function, E_Generic_Function)\n+                    and then Ekind (Spec_Id) in E_Function | E_Generic_Function\n                     and then not Is_Volatile_Function (Spec_Id)\n                   then\n                      SPARK_Msg_NE\n@@ -2441,7 +2441,7 @@ package body Sem_Prag is\n                   --  Unless it is of an access type, a constant is a read-only\n                   --  item, therefore it cannot act as an output.\n \n-                  if Nam_In (Global_Mode, Name_In_Out, Name_Output) then\n+                  if Global_Mode in Name_In_Out | Name_Output then\n                      SPARK_Msg_NE\n                        (\"constant & cannot act as output\", Item, Item_Id);\n                      return;\n@@ -2454,7 +2454,7 @@ package body Sem_Prag is\n                   --  A loop parameter is a read-only item, therefore it cannot\n                   --  act as an output.\n \n-                  if Nam_In (Global_Mode, Name_In_Out, Name_Output) then\n+                  if Global_Mode in Name_In_Out | Name_Output then\n                      SPARK_Msg_NE\n                        (\"loop parameter & cannot act as output\",\n                         Item, Item_Id);\n@@ -2472,7 +2472,7 @@ package body Sem_Prag is\n                   --  An effectively volatile object cannot appear as a global\n                   --  item of a nonvolatile function (SPARK RM 7.1.3(8)).\n \n-                  if Ekind_In (Spec_Id, E_Function, E_Generic_Function)\n+                  if Ekind (Spec_Id) in E_Function | E_Generic_Function\n                     and then not Is_Volatile_Function (Spec_Id)\n                   then\n                      Error_Msg_NE\n@@ -2515,7 +2515,7 @@ package body Sem_Prag is\n             --  Verify that an output does not appear as an input in an\n             --  enclosing subprogram.\n \n-            if Nam_In (Global_Mode, Name_In_Out, Name_Output) then\n+            if Global_Mode in Name_In_Out | Name_Output then\n                Check_Mode_Restriction_In_Enclosing_Context (Item, Item_Id);\n             end if;\n \n@@ -2546,7 +2546,7 @@ package body Sem_Prag is\n                      Ref    => Item);\n                end if;\n \n-               if Ekind_In (Item_Id, E_Abstract_State, E_Constant, E_Variable)\n+               if Ekind (Item_Id) in E_Abstract_State | E_Constant | E_Variable\n                  and then Present (Encapsulating_State (Item_Id))\n                then\n                   Append_New_Elmt (Item_Id, Constits_Seen);\n@@ -2650,7 +2650,7 @@ package body Sem_Prag is\n \n          procedure Check_Mode_Restriction_In_Function (Mode : Node_Id) is\n          begin\n-            if Ekind_In (Spec_Id, E_Function, E_Generic_Function) then\n+            if Ekind (Spec_Id) in E_Function | E_Generic_Function then\n                SPARK_Msg_N\n                  (\"global mode & is not applicable to functions\", Mode);\n             end if;\n@@ -2670,9 +2670,9 @@ package body Sem_Prag is\n \n          --  Single global item declaration\n \n-         elsif Nkind_In (List, N_Expanded_Name,\n-                               N_Identifier,\n-                               N_Selected_Component)\n+         elsif Nkind (List) in N_Expanded_Name\n+                             | N_Identifier\n+                             | N_Selected_Component\n          then\n             Analyze_Global_Item (List, Global_Mode);\n \n@@ -2927,9 +2927,8 @@ package body Sem_Prag is\n             Item_Id := Entity_Of (Item);\n \n             if Present (Item_Id)\n-              and then Ekind_In (Item_Id, E_Abstract_State,\n-                                          E_Constant,\n-                                          E_Variable)\n+              and then Ekind (Item_Id) in\n+                         E_Abstract_State | E_Constant | E_Variable\n             then\n                --  When the initialization item is undefined, it appears as\n                --  Any_Id. Do not continue with the analysis of the item.\n@@ -3039,16 +3038,16 @@ package body Sem_Prag is\n                   Input_Id := Entity_Of (Input);\n \n                   if Present (Input_Id)\n-                    and then Ekind_In (Input_Id, E_Abstract_State,\n-                                                 E_Constant,\n-                                                 E_Generic_In_Out_Parameter,\n-                                                 E_Generic_In_Parameter,\n-                                                 E_In_Parameter,\n-                                                 E_In_Out_Parameter,\n-                                                 E_Out_Parameter,\n-                                                 E_Protected_Type,\n-                                                 E_Task_Type,\n-                                                 E_Variable)\n+                    and then Ekind (Input_Id) in E_Abstract_State\n+                                               | E_Constant\n+                                               | E_Generic_In_Out_Parameter\n+                                               | E_Generic_In_Parameter\n+                                               | E_In_Parameter\n+                                               | E_In_Out_Parameter\n+                                               | E_Out_Parameter\n+                                               | E_Protected_Type\n+                                               | E_Task_Type\n+                                               | E_Variable\n                   then\n                      --  The input cannot denote states or objects declared\n                      --  within the related package (SPARK RM 7.1.5(4)).\n@@ -3061,12 +3060,12 @@ package body Sem_Prag is\n                         --  it is allowed for an initialization item to depend\n                         --  on an input item.\n \n-                        if Ekind_In (Input_Id, E_Generic_In_Out_Parameter,\n-                                               E_Generic_In_Parameter)\n+                        if Ekind (Input_Id) in E_Generic_In_Out_Parameter\n+                                             | E_Generic_In_Parameter\n                         then\n                            null;\n \n-                        elsif Ekind_In (Input_Id, E_Constant, E_Variable)\n+                        elsif Ekind (Input_Id) in E_Constant | E_Variable\n                           and then Present (Corresponding_Generic_Association\n                                      (Declaration_Node (Input_Id)))\n                         then\n@@ -3098,9 +3097,9 @@ package body Sem_Prag is\n                         Append_New_Elmt (Input_Id, States_Seen);\n                      end if;\n \n-                     if Ekind_In (Input_Id, E_Abstract_State,\n-                                            E_Constant,\n-                                            E_Variable)\n+                     if Ekind (Input_Id) in E_Abstract_State\n+                                          | E_Constant\n+                                          | E_Variable\n                        and then Present (Encapsulating_State (Input_Id))\n                      then\n                         Append_New_Elmt (Input_Id, Constits_Seen);\n@@ -3201,8 +3200,8 @@ package body Sem_Prag is\n             Decl := First (Visible_Declarations (Pack_Spec));\n             while Present (Decl) loop\n                if Comes_From_Source (Decl)\n-                 and then Nkind_In (Decl, N_Object_Declaration,\n-                                          N_Object_Renaming_Declaration)\n+                 and then Nkind (Decl) in N_Object_Declaration\n+                                        | N_Object_Renaming_Declaration\n                then\n                   Append_New_Elmt (Defining_Entity (Decl), States_And_Objs);\n \n@@ -3508,7 +3507,7 @@ package body Sem_Prag is\n          --  Only abstract states and variables can act as constituents of an\n          --  encapsulating single concurrent type.\n \n-         if Ekind_In (Item_Id, E_Abstract_State, E_Variable) then\n+         if Ekind (Item_Id) in E_Abstract_State | E_Variable then\n             null;\n \n          --  The constituent is a constant\n@@ -3551,9 +3550,9 @@ package body Sem_Prag is\n          --  the single concurrent type (SPARK RM 9(3)).\n \n          if Item_Context = Encap_Context then\n-            if Nkind_In (Item_Context, N_Package_Specification,\n-                                       N_Protected_Definition,\n-                                       N_Task_Definition)\n+            if Nkind (Item_Context) in N_Package_Specification\n+                                     | N_Protected_Definition\n+                                     | N_Task_Definition\n             then\n                Prv_Decls := Private_Declarations (Item_Context);\n                Vis_Decls := Visible_Declarations (Item_Context);\n@@ -3638,9 +3637,8 @@ package body Sem_Prag is\n       Encap_Id := Empty;\n       Legal    := False;\n \n-      if Nkind_In (Encap, N_Expanded_Name,\n-                          N_Identifier,\n-                          N_Selected_Component)\n+      if Nkind (Encap) in\n+           N_Expanded_Name | N_Identifier | N_Selected_Component\n       then\n          Analyze       (Encap);\n          Resolve_State (Encap);\n@@ -4630,12 +4628,12 @@ package body Sem_Prag is\n          --  original pragma name by routine Original_Aspect_Pragma_Name.\n \n          if Comes_From_Source (N) then\n-            if Nam_In (Pname, Name_Pre, Name_Pre_Class) then\n+            if Pname in Name_Pre | Name_Pre_Class then\n                Is_Pre_Post := True;\n                Set_Class_Present (N, Pname = Name_Pre_Class);\n                Rewrite (Prag_Iden, Make_Identifier (Loc, Name_Precondition));\n \n-            elsif Nam_In (Pname, Name_Post, Name_Post_Class) then\n+            elsif Pname in Name_Post | Name_Post_Class then\n                Is_Pre_Post := True;\n                Set_Class_Present (N, Pname = Name_Post_Class);\n                Rewrite (Prag_Iden, Make_Identifier (Loc, Name_Postcondition));\n@@ -4646,7 +4644,7 @@ package body Sem_Prag is\n          --  in a body. Pragmas Precondition and Postcondition were introduced\n          --  before aspects and are not subject to the same aspect-like rules.\n \n-         if Nam_In (Pname, Name_Precondition, Name_Postcondition) then\n+         if Pname in Name_Precondition | Name_Postcondition then\n             Duplicates_OK := True;\n             In_Body_OK    := True;\n          end if;\n@@ -4803,9 +4801,9 @@ package body Sem_Prag is\n          --  Fully analyze the pragma when it appears inside an entry or\n          --  subprogram body because it cannot benefit from forward references.\n \n-         if Nkind_In (Subp_Decl, N_Entry_Body,\n-                                 N_Subprogram_Body,\n-                                 N_Subprogram_Body_Stub)\n+         if Nkind (Subp_Decl) in N_Entry_Body\n+                               | N_Subprogram_Body\n+                               | N_Subprogram_Body_Stub\n          then\n             --  The legality checks of pragmas Precondition and Postcondition\n             --  are affected by the SPARK mode in effect and the volatility of\n@@ -4845,11 +4843,9 @@ package body Sem_Prag is\n \n          Body_Decl := Find_Related_Declaration_Or_Body (N, Do_Checks => True);\n \n-         if not Nkind_In (Body_Decl, N_Entry_Body,\n-                                     N_Subprogram_Body,\n-                                     N_Subprogram_Body_Stub,\n-                                     N_Task_Body,\n-                                     N_Task_Body_Stub)\n+         if Nkind (Body_Decl) not in\n+              N_Entry_Body | N_Subprogram_Body | N_Subprogram_Body_Stub |\n+              N_Task_Body  | N_Task_Body_Stub\n          then\n             Pragma_Misplaced;\n             return;\n@@ -4882,10 +4878,10 @@ package body Sem_Prag is\n          --  When dealing with protected entries or protected subprograms, use\n          --  the enclosing protected type as the proper context.\n \n-         if Ekind_In (Spec_Id, E_Entry,\n-                               E_Entry_Family,\n-                               E_Function,\n-                               E_Procedure)\n+         if Ekind (Spec_Id) in E_Entry\n+                             | E_Entry_Family\n+                             | E_Function\n+                             | E_Procedure\n            and then Ekind (Scope (Spec_Id)) = E_Protected_Type\n          then\n             Spec_Decl := Declaration_Node (Scope (Spec_Id));\n@@ -4907,7 +4903,7 @@ package body Sem_Prag is\n \n          Mark_Ghost_Pragma (N, Spec_Id);\n \n-         if Nam_In (Pname, Name_Refined_Depends, Name_Refined_Global) then\n+         if Pname in Name_Refined_Depends | Name_Refined_Global then\n             Ensure_Aggregate_Form (Get_Argument (N, Spec_Id));\n          end if;\n       end Analyze_Refined_Depends_Global_Post;\n@@ -5472,7 +5468,7 @@ package body Sem_Prag is\n       begin\n          Check_Arg_Is_Identifier (Argx);\n \n-         if not Nam_In (Chars (Argx), N1, N2) then\n+         if Chars (Argx) not in N1 | N2 then\n             Error_Msg_Name_2 := N1;\n             Error_Msg_Name_3 := N2;\n             Error_Pragma_Arg (\"argument for pragma% must be% or%\", Argx);\n@@ -5488,7 +5484,7 @@ package body Sem_Prag is\n       begin\n          Check_Arg_Is_Identifier (Argx);\n \n-         if not Nam_In (Chars (Argx), N1, N2, N3) then\n+         if Chars (Argx) not in N1 | N2 | N3 then\n             Error_Pragma_Arg (\"invalid argument for pragma%\", Argx);\n          end if;\n       end Check_Arg_Is_One_Of;\n@@ -5502,7 +5498,7 @@ package body Sem_Prag is\n       begin\n          Check_Arg_Is_Identifier (Argx);\n \n-         if not Nam_In (Chars (Argx), N1, N2, N3, N4) then\n+         if Chars (Argx) not in N1 | N2 | N3 | N4 then\n             Error_Pragma_Arg (\"invalid argument for pragma%\", Argx);\n          end if;\n       end Check_Arg_Is_One_Of;\n@@ -5516,7 +5512,7 @@ package body Sem_Prag is\n       begin\n          Check_Arg_Is_Identifier (Argx);\n \n-         if not Nam_In (Chars (Argx), N1, N2, N3, N4, N5) then\n+         if Chars (Argx) not in N1 | N2 | N3 | N4 | N5 then\n             Error_Pragma_Arg (\"invalid argument for pragma%\", Argx);\n          end if;\n       end Check_Arg_Is_One_Of;\n@@ -5899,7 +5895,7 @@ package body Sem_Prag is\n             --  For a single protected or a single task object, the error is\n             --  issued on the original entity.\n \n-            if Ekind_In (Id, E_Task_Type, E_Protected_Type) then\n+            if Ekind (Id) in E_Task_Type | E_Protected_Type then\n                Id := Defining_Identifier (Original_Node (Parent (Id)));\n             end if;\n \n@@ -5912,7 +5908,7 @@ package body Sem_Prag is\n                --  [No_]Inline which is suspicious but not an error, generate\n                --  an error for other pragmas.\n \n-               if Nam_In (Pragma_Name (N), Name_Inline, Name_No_Inline) then\n+               if Pragma_Name (N) in Name_Inline | Name_No_Inline then\n                   if Warn_On_Redundant_Constructs then\n                      Error_Msg_NE\n                        (\"?r?pragma% for & duplicates pragma#\", N, Id);\n@@ -6338,9 +6334,8 @@ package body Sem_Prag is\n \n             if Nkind (Original_Node (Stmt)) = N_Pragma then\n                return\n-                 Nam_In (Pragma_Name_Unmapped (Original_Node (Stmt)),\n-                         Name_Loop_Invariant,\n-                         Name_Loop_Variant);\n+                 Pragma_Name_Unmapped (Original_Node (Stmt))\n+                   in Name_Loop_Invariant | Name_Loop_Variant;\n             else\n                return False;\n             end if;\n@@ -6465,9 +6460,7 @@ package body Sem_Prag is\n             elsif Nkind (P) = N_Handled_Sequence_Of_Statements then\n                exit;\n \n-            elsif Nkind_In (P, N_Package_Specification,\n-                               N_Block_Statement)\n-            then\n+            elsif Nkind (P) in N_Package_Specification | N_Block_Statement then\n                return;\n \n             --  Note: the following tests seem a little peculiar, because\n@@ -6476,10 +6469,8 @@ package body Sem_Prag is\n             --  sequence, so the only way we get here is by being in the\n             --  declarative part of the body.\n \n-            elsif Nkind_In (P, N_Subprogram_Body,\n-                               N_Package_Body,\n-                               N_Task_Body,\n-                               N_Entry_Body)\n+            elsif Nkind (P) in\n+              N_Subprogram_Body | N_Package_Body | N_Task_Body | N_Entry_Body\n             then\n                return;\n             end if;\n@@ -6977,9 +6968,9 @@ package body Sem_Prag is\n          if Nkind (P) = N_Compilation_Unit then\n             Unit_Kind := Nkind (Unit (P));\n \n-            if Nkind_In (Unit_Kind, N_Subprogram_Declaration,\n-                                    N_Package_Declaration)\n-              or else Unit_Kind in N_Generic_Declaration\n+            if Unit_Kind in N_Subprogram_Declaration\n+                          | N_Package_Declaration\n+                          | N_Generic_Declaration\n             then\n                Unit_Name := Defining_Entity (Unit (P));\n \n@@ -7685,12 +7676,12 @@ package body Sem_Prag is\n \n          if SPARK_Mode = On\n            and then Prag_Id = Pragma_Volatile\n-           and then not Nkind_In (Original_Node (Decl),\n-                                  N_Full_Type_Declaration,\n-                                  N_Formal_Type_Declaration,\n-                                  N_Object_Declaration,\n-                                  N_Single_Protected_Declaration,\n-                                  N_Single_Task_Declaration)\n+           and then Nkind (Original_Node (Decl)) not in\n+                      N_Full_Type_Declaration        |\n+                      N_Formal_Type_Declaration      |\n+                      N_Object_Declaration           |\n+                      N_Single_Protected_Declaration |\n+                      N_Single_Task_Declaration\n          then\n             Error_Pragma_Arg\n               (\"argument of pragma % must denote a full type or object \"\n@@ -7772,7 +7763,7 @@ package body Sem_Prag is\n          else\n             while Present (P) and then Nkind (P) not in N_Generic_Declaration\n             loop\n-               if Nkind_In (P, N_Package_Body, N_Subprogram_Body) then\n+               if Nkind (P) in N_Package_Body | N_Subprogram_Body then\n                   P := Corresponding_Spec (P);\n                else\n                   P := Parent (P);\n@@ -7918,17 +7909,17 @@ package body Sem_Prag is\n                   then\n                      --  Give error if same as our pragma or Export/Convention\n \n-                     if Nam_In (Pragma_Name_Unmapped (Decl),\n-                                Name_Export,\n-                                Name_Convention,\n-                                Pragma_Name_Unmapped (N))\n+                     if Pragma_Name_Unmapped (Decl)\n+                          in Name_Export\n+                           | Name_Convention\n+                           | Pragma_Name_Unmapped (N)\n                      then\n                         exit;\n \n                      --  Case of Import/Interface or the other way round\n \n-                     elsif Nam_In (Pragma_Name_Unmapped (Decl),\n-                                   Name_Interface, Name_Import)\n+                     elsif Pragma_Name_Unmapped (Decl)\n+                             in Name_Interface | Name_Import\n                      then\n                         --  Here we know that we have Import and Interface. It\n                         --  doesn't matter which way round they are. See if\n@@ -8028,9 +8019,9 @@ package body Sem_Prag is\n                      while Present (Comp) loop\n                         if Present (Etype (Comp))\n                           and then\n-                            Ekind_In (Etype (Comp),\n-                                      E_Anonymous_Access_Type,\n-                                      E_Anonymous_Access_Subprogram_Type)\n+                            Ekind (Etype (Comp)) in\n+                              E_Anonymous_Access_Type |\n+                              E_Anonymous_Access_Subprogram_Type\n                           and then not Has_Convention_Pragma (Comp)\n                         then\n                            Set_Convention (Comp, C);\n@@ -8041,9 +8032,9 @@ package body Sem_Prag is\n                   end;\n \n                elsif Is_Array_Type (E)\n-                 and then Ekind_In (Component_Type (E),\n-                                    E_Anonymous_Access_Type,\n-                                    E_Anonymous_Access_Subprogram_Type)\n+                 and then Ekind (Component_Type (E)) in\n+                            E_Anonymous_Access_Type |\n+                            E_Anonymous_Access_Subprogram_Type\n                then\n                   Set_Convention (Designated_Type (Component_Type (E)), C);\n                end if;\n@@ -8205,8 +8196,8 @@ package body Sem_Prag is\n \n                E := Alias (E);\n \n-            elsif Nkind_In (Parent (E), N_Full_Type_Declaration,\n-                                        N_Private_Extension_Declaration)\n+            elsif Nkind (Parent (E)) in\n+                    N_Full_Type_Declaration | N_Private_Extension_Declaration\n               and then Scope (E) = Scope (Alias (E))\n             then\n                E := Alias (E);\n@@ -8230,7 +8221,7 @@ package body Sem_Prag is\n \n          --  Check that we are not applying this to a named constant\n \n-         if Ekind_In (E, E_Named_Integer, E_Named_Real) then\n+         if Ekind (E) in E_Named_Integer | E_Named_Real then\n             Error_Msg_Name_1 := Pname;\n             Error_Msg_N\n               (\"cannot apply pragma% to named constant!\",\n@@ -8586,7 +8577,7 @@ package body Sem_Prag is\n          Process_Extended_Import_Export_Internal_Arg (Arg_Internal);\n          Def_Id := Entity (Arg_Internal);\n \n-         if not Ekind_In (Def_Id, E_Constant, E_Variable) then\n+         if Ekind (Def_Id) not in E_Constant | E_Variable then\n             Error_Pragma_Arg\n               (\"pragma% must designate an object\", Arg_Internal);\n          end if;\n@@ -8811,8 +8802,8 @@ package body Sem_Prag is\n                   Match := False;\n \n                elsif Etype (Def_Id) /= Standard_Void_Type\n-                 and then Nam_In (Pname, Name_Export_Procedure,\n-                                         Name_Import_Procedure)\n+                 and then\n+                   Pname in Name_Export_Procedure | Name_Import_Procedure\n                then\n                   Match := False;\n \n@@ -9223,7 +9214,7 @@ package body Sem_Prag is\n \n          --  Various error checks\n \n-         if Ekind_In (Def_Id, E_Variable, E_Constant) then\n+         if Ekind (Def_Id) in E_Variable | E_Constant then\n \n             --  We do not permit Import to apply to a renaming declaration\n \n@@ -9722,9 +9713,9 @@ package body Sem_Prag is\n                   --       pragma Inline_Always (Proc);\n                   --    end Pack;\n \n-                  elsif Nkind_In (Context, N_Package_Specification,\n-                                           N_Protected_Definition,\n-                                           N_Task_Definition)\n+                  elsif Nkind (Context) in N_Package_Specification\n+                                         | N_Protected_Definition\n+                                         | N_Task_Definition\n                     and then Init_List = Visible_Declarations (Context)\n                     and then Prag_List = Private_Declarations (Context)\n                   then\n@@ -11844,10 +11835,10 @@ package body Sem_Prag is\n                   --  external properties.\n \n                   elsif Nkind (Prop) = N_Identifier\n-                    and then Nam_In (Chars (Prop), Name_Async_Readers,\n-                                                   Name_Async_Writers,\n-                                                   Name_Effective_Reads,\n-                                                   Name_Effective_Writes)\n+                    and then Chars (Prop) in Name_Async_Readers\n+                                           | Name_Async_Writers\n+                                           | Name_Effective_Reads\n+                                           | Name_Effective_Writes\n                   then\n                      null;\n \n@@ -12324,8 +12315,8 @@ package body Sem_Prag is\n \n             Pack_Decl := Find_Related_Package_Or_Body (N, Do_Checks => True);\n \n-            if not Nkind_In (Pack_Decl, N_Generic_Package_Declaration,\n-                                        N_Package_Declaration)\n+            if Nkind (Pack_Decl) not in\n+                 N_Generic_Package_Declaration | N_Package_Declaration\n             then\n                Pragma_Misplaced;\n                return;\n@@ -13160,9 +13151,7 @@ package body Sem_Prag is\n                      --  The Ghost policy must be either Check or Ignore\n                      --  (SPARK RM 6.9(6)).\n \n-                     if not Nam_In (Chars (Policy), Name_Check,\n-                                                    Name_Ignore)\n-                     then\n+                     if Chars (Policy) not in Name_Check | Name_Ignore then\n                         Error_Pragma_Arg\n                           (\"argument of pragma % Ghost must be Check or \"\n                            & \"Ignore\", Policy);\n@@ -13310,12 +13299,12 @@ package body Sem_Prag is\n \n             if Nkind (Obj_Or_Type_Decl) /= N_Object_Declaration then\n                if Prag_Id = Pragma_No_Caching\n-                  or not Nkind_In (Original_Node (Obj_Or_Type_Decl),\n-                                   N_Full_Type_Declaration,\n-                                   N_Private_Type_Declaration,\n-                                   N_Formal_Type_Declaration,\n-                                   N_Task_Type_Declaration,\n-                                   N_Protected_Type_Declaration)\n+                  or else Nkind (Original_Node (Obj_Or_Type_Decl)) not in\n+                            N_Full_Type_Declaration    |\n+                            N_Private_Type_Declaration |\n+                            N_Formal_Type_Declaration  |\n+                            N_Task_Type_Declaration    |\n+                            N_Protected_Type_Declaration\n                then\n                   Pragma_Misplaced;\n                   return;\n@@ -13570,7 +13559,7 @@ package body Sem_Prag is\n             if (Nkind (D) = N_Full_Type_Declaration and then Is_Array_Type (E))\n               or else\n                 (Nkind (D) = N_Object_Declaration\n-                   and then Ekind_In (E, E_Constant, E_Variable)\n+                   and then Ekind (E) in E_Constant | E_Variable\n                    and then Nkind (Object_Definition (D)) =\n                                        N_Constrained_Array_Definition)\n               or else\n@@ -14003,7 +13992,7 @@ package body Sem_Prag is\n             --  identifier is Name.\n \n             if Nkind (Arg1) /= N_Pragma_Argument_Association\n-              or else Nam_In (Chars (Arg1), No_Name, Name_Name)\n+              or else Chars (Arg1) in No_Name | Name_Name\n             then\n                --  Old syntax\n \n@@ -14016,7 +14005,7 @@ package body Sem_Prag is\n \n                --  Check forbidden check kind\n \n-               if Nam_In (Chars (Kind), Name_Name, Name_Policy) then\n+               if Chars (Kind) in Name_Name | Name_Policy then\n                   Error_Msg_Name_2 := Chars (Kind);\n                   Error_Pragma_Arg\n                     (\"pragma% does not allow% as check name\", Arg1);\n@@ -14539,9 +14528,9 @@ package body Sem_Prag is\n             --  or subprogram body because it cannot benefit from forward\n             --  references.\n \n-            if Nkind_In (Subp_Decl, N_Entry_Body,\n-                                    N_Subprogram_Body,\n-                                    N_Subprogram_Body_Stub)\n+            if Nkind (Subp_Decl) in N_Entry_Body\n+                                  | N_Subprogram_Body\n+                                  | N_Subprogram_Body_Stub\n             then\n                --  The legality checks of pragma Contract_Cases are affected by\n                --  the SPARK mode in effect and the volatility of the context.\n@@ -15092,11 +15081,11 @@ package body Sem_Prag is\n                Call := Get_Pragma_Arg (Arg1);\n             end if;\n \n-            if Nkind_In (Call, N_Expanded_Name,\n-                               N_Function_Call,\n-                               N_Identifier,\n-                               N_Indexed_Component,\n-                               N_Selected_Component)\n+            if Nkind (Call) in N_Expanded_Name\n+                             | N_Function_Call\n+                             | N_Identifier\n+                             | N_Indexed_Component\n+                             | N_Selected_Component\n             then\n                --  If this pragma Debug comes from source, its argument was\n                --  parsed as a name form (which is syntactically identical).\n@@ -15231,8 +15220,8 @@ package body Sem_Prag is\n                --  The associated private type [extension] has been found, stop\n                --  the search.\n \n-               elsif Nkind_In (Stmt, N_Private_Extension_Declaration,\n-                                     N_Private_Type_Declaration)\n+               elsif Nkind (Stmt) in N_Private_Extension_Declaration\n+                                   | N_Private_Type_Declaration\n                then\n                   Typ := Defining_Entity (Stmt);\n                   exit;\n@@ -15481,9 +15470,9 @@ package body Sem_Prag is\n                --  or subprogram body because it cannot benefit from forward\n                --  references.\n \n-               if Nkind_In (Subp_Decl, N_Entry_Body,\n-                                       N_Subprogram_Body,\n-                                       N_Subprogram_Body_Stub)\n+               if Nkind (Subp_Decl) in N_Entry_Body\n+                                     | N_Subprogram_Body\n+                                     | N_Subprogram_Body_Stub\n                then\n                   --  The legality checks of pragmas Depends and Global are\n                   --  affected by the SPARK mode in effect and the volatility\n@@ -15837,8 +15826,8 @@ package body Sem_Prag is\n \n             Mark_Ghost_Pragma (N, Cunit_Ent);\n \n-            if Nkind_In (Unit (Cunit_Node), N_Package_Body,\n-                                            N_Subprogram_Body)\n+            if Nkind (Unit (Cunit_Node)) in\n+                 N_Package_Body | N_Subprogram_Body\n             then\n                Error_Pragma (\"pragma% must refer to a spec, not a body\");\n             else\n@@ -16812,8 +16801,8 @@ package body Sem_Prag is\n                --  Task unit declared without a definition cannot be subject to\n                --  pragma Ghost (SPARK RM 6.9(19)).\n \n-               elsif Nkind_In (Stmt, N_Single_Task_Declaration,\n-                                     N_Task_Type_Declaration)\n+               elsif Nkind (Stmt) in\n+                       N_Single_Task_Declaration | N_Task_Type_Declaration\n                then\n                   Error_Pragma (\"pragma % cannot apply to a task type\");\n                   return;\n@@ -16826,8 +16815,8 @@ package body Sem_Prag is\n                   --  When pragma Ghost applies to an untagged derivation, the\n                   --  derivation is transformed into a [sub]type declaration.\n \n-                  if Nkind_In (Stmt, N_Full_Type_Declaration,\n-                                     N_Subtype_Declaration)\n+                  if Nkind (Stmt) in\n+                       N_Full_Type_Declaration | N_Subtype_Declaration\n                     and then Comes_From_Source (Orig_Stmt)\n                     and then Nkind (Orig_Stmt) = N_Full_Type_Declaration\n                     and then Nkind (Type_Definition (Orig_Stmt)) =\n@@ -16861,14 +16850,14 @@ package body Sem_Prag is\n \n                --  The pragma applies to a legal construct, stop the traversal\n \n-               elsif Nkind_In (Stmt, N_Abstract_Subprogram_Declaration,\n-                                     N_Full_Type_Declaration,\n-                                     N_Generic_Subprogram_Declaration,\n-                                     N_Object_Declaration,\n-                                     N_Private_Extension_Declaration,\n-                                     N_Private_Type_Declaration,\n-                                     N_Subprogram_Declaration,\n-                                     N_Subtype_Declaration)\n+               elsif Nkind (Stmt) in N_Abstract_Subprogram_Declaration\n+                                   | N_Full_Type_Declaration\n+                                   | N_Generic_Subprogram_Declaration\n+                                   | N_Object_Declaration\n+                                   | N_Private_Extension_Declaration\n+                                   | N_Private_Type_Declaration\n+                                   | N_Subprogram_Declaration\n+                                   | N_Subtype_Declaration\n                then\n                   Id := Defining_Entity (Stmt);\n                   exit;\n@@ -16897,12 +16886,12 @@ package body Sem_Prag is\n             --  Protected and task types cannot be subject to pragma Ghost\n             --  (SPARK RM 6.9(19)).\n \n-            if Nkind_In (Context, N_Protected_Body, N_Protected_Definition)\n+            if Nkind (Context) in N_Protected_Body | N_Protected_Definition\n             then\n                Error_Pragma (\"pragma % cannot apply to a protected type\");\n                return;\n \n-            elsif Nkind_In (Context, N_Task_Body, N_Task_Definition) then\n+            elsif Nkind (Context) in N_Task_Body | N_Task_Definition then\n                Error_Pragma (\"pragma % cannot apply to a task type\");\n                return;\n             end if;\n@@ -17096,9 +17085,9 @@ package body Sem_Prag is\n                --  or subprogram body because it cannot benefit from forward\n                --  references.\n \n-               if Nkind_In (Subp_Decl, N_Entry_Body,\n-                                       N_Subprogram_Body,\n-                                       N_Subprogram_Body_Stub)\n+               if Nkind (Subp_Decl) in N_Entry_Body\n+                                     | N_Subprogram_Body\n+                                     | N_Subprogram_Body_Stub\n                then\n                   --  The legality checks of pragmas Depends and Global are\n                   --  affected by the SPARK mode in effect and the volatility\n@@ -17149,8 +17138,8 @@ package body Sem_Prag is\n             begin\n                GP := Parent (Parent (N));\n \n-               if Nkind_In (GP, N_Package_Declaration,\n-                                N_Generic_Package_Declaration)\n+               if Nkind (GP) in\n+                    N_Package_Declaration | N_Generic_Package_Declaration\n                then\n                   GP := Parent (GP);\n                end if;\n@@ -17298,8 +17287,8 @@ package body Sem_Prag is\n                   --  \"synchronized\".\n \n                    or else\n-                    (Ekind_In (Typ, E_Record_Type_With_Private,\n-                                    E_Record_Subtype_With_Private)\n+                    (Ekind (Typ) in E_Record_Type_With_Private\n+                                  | E_Record_Subtype_With_Private\n                        and then Synchronized_Present (Parent (Typ))))\n                then\n                   null;\n@@ -17755,8 +17744,8 @@ package body Sem_Prag is\n \n             Pack_Decl := Find_Related_Package_Or_Body (N, Do_Checks => True);\n \n-            if not Nkind_In (Pack_Decl, N_Generic_Package_Declaration,\n-                                        N_Package_Declaration)\n+            if Nkind (Pack_Decl) not in\n+                 N_Generic_Package_Declaration | N_Package_Declaration\n             then\n                Pragma_Misplaced;\n                return;\n@@ -18027,8 +18016,8 @@ package body Sem_Prag is\n \n             Pack_Decl := Find_Related_Package_Or_Body (N, Do_Checks => True);\n \n-            if not Nkind_In (Pack_Decl, N_Generic_Package_Declaration,\n-                                        N_Package_Declaration)\n+            if Nkind (Pack_Decl) not in\n+                 N_Generic_Package_Declaration | N_Package_Declaration\n             then\n                Pragma_Misplaced;\n                return;\n@@ -18365,7 +18354,7 @@ package body Sem_Prag is\n                Preanalyze_Spec_Expression (Arg, RTE (RE_Interrupt_Priority));\n             end if;\n \n-            if not Nkind_In (P, N_Task_Definition, N_Protected_Definition) then\n+            if Nkind (P) not in N_Task_Definition | N_Protected_Definition then\n                Pragma_Misplaced;\n                return;\n \n@@ -18564,9 +18553,9 @@ package body Sem_Prag is\n             --  A [class-wide] invariant may be associated a [limited] private\n             --  type or a private extension.\n \n-            elsif Ekind_In (Typ, E_Limited_Private_Type,\n-                                 E_Private_Type,\n-                                 E_Record_Type_With_Private)\n+            elsif Ekind (Typ) in E_Limited_Private_Type\n+                               | E_Private_Type\n+                               | E_Record_Type_With_Private\n             then\n                null;\n \n@@ -19217,8 +19206,7 @@ package body Sem_Prag is\n                if Chars (Variant) = No_Name then\n                   Error_Pragma_Arg_Ident (\"expect name `Increases`\", Variant);\n \n-               elsif not Nam_In (Chars (Variant), Name_Decreases,\n-                                                  Name_Increases)\n+               elsif Chars (Variant) not in Name_Decreases | Name_Increases\n                then\n                   declare\n                      Name : String := Get_Name_String (Chars (Variant));\n@@ -19531,11 +19519,11 @@ package body Sem_Prag is\n \n             --  Must appear for a spec or generic spec\n \n-            if not Nkind_In (Unit (Cunit (Current_Sem_Unit)),\n-                             N_Generic_Package_Declaration,\n-                             N_Generic_Subprogram_Declaration,\n-                             N_Package_Declaration,\n-                             N_Subprogram_Declaration)\n+            if Nkind (Unit (Cunit (Current_Sem_Unit))) not in\n+                 N_Generic_Package_Declaration    |\n+                 N_Generic_Subprogram_Declaration |\n+                 N_Package_Declaration            |\n+                 N_Subprogram_Declaration\n             then\n                Error_Pragma\n                  (Fix_Error\n@@ -19666,7 +19654,7 @@ package body Sem_Prag is\n \n                --  The pragma must apply to an access-to-object type\n \n-               if Ekind_In (Typ, E_Access_Type, E_General_Access_Type) then\n+               if Ekind (Typ) in E_Access_Type | E_General_Access_Type then\n                   null;\n \n                --  Give a detailed error message on all other access type kinds\n@@ -19794,10 +19782,10 @@ package body Sem_Prag is\n                loop\n                   --  Ada 2020 (AI12-0269): A function can be No_Return\n \n-                  if Ekind_In (E, E_Generic_Procedure, E_Procedure)\n+                  if Ekind (E) in E_Generic_Procedure | E_Procedure\n                     or else (Ada_Version >= Ada_2020\n                               and then\n-                             Ekind_In (E, E_Generic_Function, E_Function))\n+                             Ekind (E) in E_Generic_Function | E_Function)\n                   then\n                      --  Check that the pragma is not applied to a body.\n                      --  First check the specless body case, to give a\n@@ -20189,9 +20177,8 @@ package body Sem_Prag is\n               and then\n                 (Chars (Arg1) = Name_Entity\n                    or else\n-                     Nkind_In (Get_Pragma_Arg (Arg1), N_Character_Literal,\n-                                                      N_Identifier,\n-                                                      N_Operator_Symbol))\n+                     Nkind (Get_Pragma_Arg (Arg1)) in\n+                       N_Character_Literal | N_Identifier | N_Operator_Symbol)\n             then\n                Ename := Get_Pragma_Arg (Arg1);\n \n@@ -20627,9 +20614,8 @@ package body Sem_Prag is\n                      --  they may not depend on variable input. This check is\n                      --  left to the SPARK prover.\n \n-                     elsif Ekind_In (Item_Id, E_Abstract_State,\n-                                              E_Constant,\n-                                              E_Variable)\n+                     elsif Ekind (Item_Id) in\n+                             E_Abstract_State | E_Constant | E_Variable\n                      then\n                         Has_Item := True;\n                         Constits := Part_Of_Constituents (State_Id);\n@@ -20946,9 +20932,9 @@ package body Sem_Prag is\n                Check_Arg_Is_Library_Level_Local_Name (Arg1);\n \n                if not Is_Entity_Name (Get_Pragma_Arg (Arg1))\n-                 or else not\n-                   Ekind_In (Entity (Get_Pragma_Arg (Arg1)), E_Variable,\n-                                                             E_Constant)\n+                 or else\n+                   Ekind (Entity (Get_Pragma_Arg (Arg1))) not in\n+                     E_Variable | E_Constant\n                then\n                   Error_Pragma_Arg (\"pragma% only applies to objects\", Arg1);\n                end if;\n@@ -21404,7 +21390,7 @@ package body Sem_Prag is\n \n             --  Task or Protected, must be of type Integer\n \n-            elsif Nkind_In (P, N_Protected_Definition, N_Task_Definition) then\n+            elsif Nkind (P) in N_Protected_Definition | N_Task_Definition then\n                Arg := Get_Pragma_Arg (Arg1);\n                Ent := Defining_Identifier (Parent (P));\n \n@@ -21816,9 +21802,8 @@ package body Sem_Prag is\n \n             procedure Check_Arg (Arg : Node_Id) is\n             begin\n-               if not Nkind_In (Original_Node (Arg),\n-                                N_String_Literal,\n-                                N_Identifier)\n+               if Nkind (Original_Node (Arg)) not in\n+                    N_String_Literal | N_Identifier\n                then\n                   Error_Pragma_Arg\n                     (\"inappropriate argument for pragma %\", Arg);\n@@ -21834,7 +21819,7 @@ package body Sem_Prag is\n \n             Def_Id := Entity (Internal);\n \n-            if not Ekind_In (Def_Id, E_Constant, E_Variable) then\n+            if Ekind (Def_Id) not in E_Constant | E_Variable then\n                Error_Pragma_Arg\n                  (\"pragma% must designate an object\", Internal);\n             end if;\n@@ -21984,9 +21969,8 @@ package body Sem_Prag is\n                loop\n                   Def_Id := Get_Base_Subprogram (E);\n \n-                  if not Ekind_In (Def_Id, E_Function,\n-                                           E_Generic_Function,\n-                                           E_Operator)\n+                  if Ekind (Def_Id) not in\n+                       E_Function | E_Generic_Function | E_Operator\n                   then\n                      Error_Pragma_Arg\n                        (\"pragma% requires a function name\", Arg1);\n@@ -22521,8 +22505,8 @@ package body Sem_Prag is\n \n             Mark_Ghost_Pragma (N, Cunit_Ent);\n \n-            if not Nkind_In (Unit (Cunit_Node), N_Package_Declaration,\n-                                                N_Generic_Package_Declaration)\n+            if Nkind (Unit (Cunit_Node)) not in\n+                 N_Package_Declaration | N_Generic_Package_Declaration\n             then\n                Error_Pragma\n                  (\"pragma% can only apply to a package declaration\");\n@@ -22721,8 +22705,8 @@ package body Sem_Prag is\n \n             Mark_Ghost_Pragma (N, Cunit_Ent);\n \n-            if not Nkind_In (Unit (Cunit_Node), N_Package_Declaration,\n-                                                N_Generic_Package_Declaration)\n+            if Nkind (Unit (Cunit_Node)) not in\n+                 N_Package_Declaration | N_Generic_Package_Declaration\n             then\n                Error_Pragma\n                  (\"pragma% can only apply to a package declaration\");\n@@ -23024,7 +23008,7 @@ package body Sem_Prag is\n                   --  anonymous type whose name cannot be used to issue error\n                   --  messages. Recover the original entity of the type.\n \n-                  if Ekind_In (Entity, E_Protected_Type, E_Task_Type) then\n+                  if Ekind (Entity) in E_Protected_Type | E_Task_Type then\n                      Err_Id :=\n                        Defining_Entity\n                          (Original_Node (Unit_Declaration_Node (Entity)));\n@@ -23086,28 +23070,28 @@ package body Sem_Prag is\n \n                procedure Add_Entity_To_Name_Buffer is\n                begin\n-                  if Ekind_In (E, E_Entry, E_Entry_Family) then\n+                  if Ekind (E) in E_Entry | E_Entry_Family then\n                      Add_Str_To_Name_Buffer (\"entry\");\n \n-                  elsif Ekind_In (E, E_Generic_Package,\n-                                     E_Package,\n-                                     E_Package_Body)\n+                  elsif Ekind (E) in E_Generic_Package\n+                                   | E_Package\n+                                   | E_Package_Body\n                   then\n                      Add_Str_To_Name_Buffer (\"package\");\n \n-                  elsif Ekind_In (E, E_Protected_Body, E_Protected_Type) then\n+                  elsif Ekind (E) in E_Protected_Body | E_Protected_Type then\n                      Add_Str_To_Name_Buffer (\"protected type\");\n \n-                  elsif Ekind_In (E, E_Function,\n-                                     E_Generic_Function,\n-                                     E_Generic_Procedure,\n-                                     E_Procedure,\n-                                     E_Subprogram_Body)\n+                  elsif Ekind (E) in E_Function\n+                                   | E_Generic_Function\n+                                   | E_Generic_Procedure\n+                                   | E_Procedure\n+                                   | E_Subprogram_Body\n                   then\n                      Add_Str_To_Name_Buffer (\"subprogram\");\n \n                   else\n-                     pragma Assert (Ekind_In (E, E_Task_Body, E_Task_Type));\n+                     pragma Assert (Ekind (E) in E_Task_Body | E_Task_Type);\n                      Add_Str_To_Name_Buffer (\"task type\");\n                   end if;\n                end Add_Entity_To_Name_Buffer;\n@@ -23166,7 +23150,7 @@ package body Sem_Prag is\n                --    * The mode of the context\n                --    * The mode of the spec (if any)\n \n-               if Nkind_In (Decl, N_Entry_Body, N_Subprogram_Body) then\n+               if Nkind (Decl) in N_Entry_Body | N_Subprogram_Body then\n \n                   --  A stand-alone subprogram body\n \n@@ -23216,7 +23200,7 @@ package body Sem_Prag is\n \n                else\n                   pragma Assert\n-                    (Nkind_In (Decl, N_Protected_Body, N_Task_Body));\n+                    (Nkind (Decl) in N_Protected_Body | N_Task_Body);\n \n                   Check_Pragma_Conformance\n                     (Context_Pragma => SPARK_Pragma (Body_Id),\n@@ -23338,8 +23322,8 @@ package body Sem_Prag is\n                --  SPARK_Mode of the context because the task does not have any\n                --  entries that could inherit the mode.\n \n-               if not Nkind_In (Decl, N_Single_Task_Declaration,\n-                                      N_Task_Type_Declaration)\n+               if Nkind (Decl) not in\n+                    N_Single_Task_Declaration | N_Task_Type_Declaration\n                then\n                   Set_SPARK_Context;\n                end if;\n@@ -23500,8 +23484,8 @@ package body Sem_Prag is\n                   --    procedure Proc ...;\n                   --    pragma SPARK_Mode ...;\n \n-                  elsif Nkind_In (Stmt, N_Generic_Subprogram_Declaration,\n-                                        N_Subprogram_Declaration)\n+                  elsif Nkind (Stmt) in N_Generic_Subprogram_Declaration\n+                                      | N_Subprogram_Declaration\n                     or else (Nkind (Stmt) = N_Entry_Declaration\n                               and then Is_Protected_Type\n                                          (Scope (Defining_Entity (Stmt))))\n@@ -23546,11 +23530,11 @@ package body Sem_Prag is\n                --    protected body Prot is\n                --       pragma SPARK_Mode ...;\n \n-               if Nkind_In (Context, N_Entry_Body,\n-                                     N_Package_Body,\n-                                     N_Protected_Body,\n-                                     N_Subprogram_Body,\n-                                     N_Task_Body)\n+               if Nkind (Context) in N_Entry_Body\n+                                   | N_Package_Body\n+                                   | N_Protected_Body\n+                                   | N_Subprogram_Body\n+                                   | N_Task_Body\n                then\n                   Process_Body (Context);\n \n@@ -23567,9 +23551,9 @@ package body Sem_Prag is\n                --    private\n                --       pragma SPARK_Mode ...;\n \n-               elsif Nkind_In (Context, N_Package_Specification,\n-                                        N_Protected_Definition,\n-                                        N_Task_Definition)\n+               elsif Nkind (Context) in N_Package_Specification\n+                                      | N_Protected_Definition\n+                                      | N_Task_Definition\n                then\n                   if List_Containing (N) = Visible_Declarations (Context) then\n                      Process_Visible_Part (Parent (Context));\n@@ -23595,8 +23579,8 @@ package body Sem_Prag is\n                --    procedure Proc ...;\n                --    pragma SPARK_Mode ...;\n \n-               elsif Nkind_In (Context, N_Generic_Subprogram_Declaration,\n-                                        N_Subprogram_Declaration)\n+               elsif Nkind (Context) in N_Generic_Subprogram_Declaration\n+                                      | N_Subprogram_Declaration\n                then\n                   Process_Overloadable (Context);\n \n@@ -24357,8 +24341,8 @@ package body Sem_Prag is\n             --  in a library-level package. First determine whether the current\n             --  compilation unit is a legal context.\n \n-            if Nkind_In (Pack_Decl, N_Package_Declaration,\n-                                    N_Generic_Package_Declaration)\n+            if Nkind (Pack_Decl) in N_Package_Declaration\n+                                  | N_Generic_Package_Declaration\n             then\n                null;\n \n@@ -24394,11 +24378,11 @@ package body Sem_Prag is\n             --  The context is a [generic] subprogram declared at the top level\n             --  of the [generic] package unit.\n \n-            elsif Nkind_In (Subp_Decl, N_Generic_Subprogram_Declaration,\n-                                       N_Subprogram_Declaration)\n+            elsif Nkind (Subp_Decl) in N_Generic_Subprogram_Declaration\n+                                     | N_Subprogram_Declaration\n               and then Present (Context)\n-              and then Nkind_In (Context, N_Generic_Package_Declaration,\n-                                          N_Package_Declaration)\n+              and then Nkind (Context) in N_Generic_Package_Declaration\n+                                        | N_Package_Declaration\n             then\n                null;\n \n@@ -24452,9 +24436,9 @@ package body Sem_Prag is\n             --  or subprogram body because it cannot benefit from forward\n             --  references.\n \n-            if Nkind_In (Subp_Decl, N_Entry_Body,\n-                                    N_Subprogram_Body,\n-                                    N_Subprogram_Body_Stub)\n+            if Nkind (Subp_Decl) in N_Entry_Body\n+                                  | N_Subprogram_Body\n+                                  | N_Subprogram_Body_Stub\n             then\n                --  The legality checks of pragma Test_Case are affected by the\n                --  SPARK mode in effect and the volatility of the context.\n@@ -25117,7 +25101,7 @@ package body Sem_Prag is\n \n             Spec_Id := Unique_Defining_Entity (Subp_Decl);\n \n-            if not Ekind_In (Spec_Id, E_Function, E_Generic_Function) then\n+            if Ekind (Spec_Id) not in E_Function | E_Generic_Function then\n                Pragma_Misplaced;\n                return;\n             end if;\n@@ -25278,7 +25262,7 @@ package body Sem_Prag is\n                --  was given otherwise, by shifting the arguments.\n \n                if Nkind (Argx) = N_Identifier\n-                 and then Nam_In (Chars (Argx), Name_Gnat, Name_Gnatprove)\n+                 and then Chars (Argx) in Name_Gnat | Name_Gnatprove\n                then\n                   if Chars (Argx) = Name_Gnat then\n                      if CodePeer_Mode or GNATprove_Mode then\n@@ -25331,7 +25315,7 @@ package body Sem_Prag is\n                   --  On/Off one argument case was processed by parser\n \n                   if Nkind (Argx) = N_Identifier\n-                    and then Nam_In (Chars (Argx), Name_On, Name_Off)\n+                    and then Chars (Argx) in Name_On | Name_Off\n                   then\n                      null;\n \n@@ -25703,7 +25687,7 @@ package body Sem_Prag is\n            and then\n              (Etype (Nod) = Disp_Typ\n                or else Etype (Nod) = Class_Wide_Type (Disp_Typ))\n-           and then Ekind_In (Entity (Nod), E_Constant, E_Variable)\n+           and then Ekind (Entity (Nod)) in E_Constant | E_Variable\n          then\n             Error_Msg_NE\n               (\"object in class-wide condition must be formal of type &\",\n@@ -26081,9 +26065,8 @@ package body Sem_Prag is\n                      if Is_Entity_Name (Ref_Item) then\n                         Ref_Item_Id := Entity_Of (Ref_Item);\n \n-                        if Ekind_In (Ref_Item_Id, E_Abstract_State,\n-                                                  E_Constant,\n-                                                  E_Variable)\n+                        if Ekind (Ref_Item_Id) in\n+                             E_Abstract_State | E_Constant | E_Variable\n                           and then Present (Encapsulating_State (Ref_Item_Id))\n                           and then Find_Encapsulating_State\n                                      (Dep_States, Ref_Item_Id) = Dep_Item_Id\n@@ -26720,9 +26703,8 @@ package body Sem_Prag is\n \n                --  The input must be a constituent of a state\n \n-               if Ekind_In (Input_Id, E_Abstract_State,\n-                                      E_Constant,\n-                                      E_Variable)\n+               if Ekind (Input_Id) in\n+                    E_Abstract_State | E_Constant | E_Variable\n                  and then Present (Encapsulating_State (Input_Id))\n                then\n                   State_Id := Encapsulating_State (Input_Id);\n@@ -27630,9 +27612,7 @@ package body Sem_Prag is\n          --  Start of processing for Check_Refined_Global_Item\n \n          begin\n-            if Ekind_In (Item_Id, E_Abstract_State,\n-                                  E_Constant,\n-                                  E_Variable)\n+            if Ekind (Item_Id) in E_Abstract_State | E_Constant | E_Variable\n             then\n                Enc_State := Find_Encapsulating_State (States, Item_Id);\n             end if;\n@@ -27726,9 +27706,9 @@ package body Sem_Prag is\n \n          --  Single global item declaration\n \n-         elsif Nkind_In (List, N_Expanded_Name,\n-                               N_Identifier,\n-                               N_Selected_Component)\n+         elsif Nkind (List) in N_Expanded_Name\n+                             | N_Identifier\n+                             | N_Selected_Component\n          then\n             Check_Refined_Global_Item (List, Global_Mode);\n \n@@ -27858,9 +27838,9 @@ package body Sem_Prag is\n \n          --  Single global item declaration\n \n-         elsif Nkind_In (List, N_Expanded_Name,\n-                               N_Identifier,\n-                               N_Selected_Component)\n+         elsif Nkind (List) in N_Expanded_Name\n+                             | N_Identifier\n+                             | N_Selected_Component\n          then\n             Collect_Global_Item (List, Mode);\n \n@@ -28547,9 +28527,8 @@ package body Sem_Prag is\n \n                   --  The constituent is a valid state or object\n \n-                  elsif Ekind_In (Constit_Id, E_Abstract_State,\n-                                              E_Constant,\n-                                              E_Variable)\n+                  elsif Ekind (Constit_Id) in\n+                          E_Abstract_State | E_Constant | E_Variable\n                   then\n                      Match_Constituent (Constit_Id);\n \n@@ -29238,11 +29217,11 @@ package body Sem_Prag is\n             if Ename = Pnm\n               or else Pnm = Name_Assertion\n               or else (Pnm = Name_Statement_Assertions\n-                        and then Nam_In (Ename, Name_Assert,\n-                                                Name_Assert_And_Cut,\n-                                                Name_Assume,\n-                                                Name_Loop_Invariant,\n-                                                Name_Loop_Variant))\n+                        and then Ename in Name_Assert\n+                                        | Name_Assert_And_Cut\n+                                        | Name_Assume\n+                                        | Name_Loop_Invariant\n+                                        | Name_Loop_Variant)\n             then\n                Policy := Chars (Get_Pragma_Arg (Last (PPA)));\n \n@@ -29377,11 +29356,11 @@ package body Sem_Prag is\n               or else (Pnm = Name_Assertion\n                         and then Is_Valid_Assertion_Kind (Nam))\n               or else (Pnm = Name_Statement_Assertions\n-                        and then Nam_In (Nam, Name_Assert,\n-                                              Name_Assert_And_Cut,\n-                                              Name_Assume,\n-                                              Name_Loop_Invariant,\n-                                              Name_Loop_Variant))\n+                        and then Nam in Name_Assert\n+                                      | Name_Assert_And_Cut\n+                                      | Name_Assume\n+                                      | Name_Loop_Invariant\n+                                      | Name_Loop_Variant)\n             then\n                case (Chars (Get_Pragma_Arg (Last (PPA)))) is\n                   when Name_Check\n@@ -29461,7 +29440,7 @@ package body Sem_Prag is\n             --  they depend on variable input. This check is left to the SPARK\n             --  prover.\n \n-            elsif Ekind_In (Item_Id, E_Abstract_State, E_Variable) then\n+            elsif Ekind (Item_Id) in E_Abstract_State | E_Variable then\n                return True;\n \n             --  Recursively peek into nested packages and instantiations\n@@ -29698,8 +29677,8 @@ package body Sem_Prag is\n          Prag := Pre_Post_Conditions (Prags);\n \n          while Present (Prag) loop\n-            if Nam_In (Pragma_Name_Unmapped (Prag),\n-                       Name_Precondition, Name_Postcondition)\n+            if Pragma_Name_Unmapped (Prag)\n+                 in Name_Precondition | Name_Postcondition\n               and then Class_Present (Prag)\n             then\n                --  The generated pragma must be analyzed in the context of\n@@ -29852,11 +29831,11 @@ package body Sem_Prag is\n \n          procedure Collect_Global_Item (Item : Node_Id; Mode : Name_Id) is\n          begin\n-            if Nam_In (Mode, Name_In_Out, Name_Input) then\n+            if Mode in Name_In_Out | Name_Input then\n                Append_New_Elmt (Item, Subp_Inputs);\n             end if;\n \n-            if Nam_In (Mode, Name_In_Out, Name_Output) then\n+            if Mode in Name_In_Out | Name_Output then\n                Append_New_Elmt (Item, Subp_Outputs);\n             end if;\n          end Collect_Global_Item;\n@@ -29874,9 +29853,9 @@ package body Sem_Prag is\n \n          --  Single global item declaration\n \n-         elsif Nkind_In (List, N_Expanded_Name,\n-                               N_Identifier,\n-                               N_Selected_Component)\n+         elsif Nkind (List) in N_Expanded_Name\n+                             | N_Identifier\n+                             | N_Selected_Component\n          then\n             Collect_Global_Item (List, Mode);\n \n@@ -29928,13 +29907,13 @@ package body Sem_Prag is\n       --  Process all formal parameters of entries, [generic] subprograms, and\n       --  their bodies.\n \n-      if Ekind_In (Subp_Id, E_Entry,\n-                            E_Entry_Family,\n-                            E_Function,\n-                            E_Generic_Function,\n-                            E_Generic_Procedure,\n-                            E_Procedure,\n-                            E_Subprogram_Body)\n+      if Ekind (Subp_Id) in E_Entry\n+                          | E_Entry_Family\n+                          | E_Function\n+                          | E_Generic_Function\n+                          | E_Generic_Procedure\n+                          | E_Procedure\n+                          | E_Subprogram_Body\n       then\n          Subp_Decl := Unit_Declaration_Node (Subp_Id);\n          Spec_Id   := Unique_Defining_Entity (Subp_Decl);\n@@ -29943,11 +29922,11 @@ package body Sem_Prag is\n \n          Formal := First_Entity (Spec_Id);\n          while Present (Formal) loop\n-            if Ekind_In (Formal, E_In_Out_Parameter, E_In_Parameter) then\n+            if Ekind (Formal) in E_In_Out_Parameter | E_In_Parameter then\n                Append_New_Elmt (Formal, Subp_Inputs);\n             end if;\n \n-            if Ekind_In (Formal, E_In_Out_Parameter, E_Out_Parameter) then\n+            if Ekind (Formal) in E_In_Out_Parameter | E_Out_Parameter then\n                Append_New_Elmt (Formal, Subp_Outputs);\n \n                --  Out parameters can act as inputs when the related type is\n@@ -29967,7 +29946,7 @@ package body Sem_Prag is\n       --  Otherwise the input denotes a task type, a task body, or the\n       --  anonymous object created for a single task type.\n \n-      elsif Ekind_In (Subp_Id, E_Task_Type, E_Task_Body)\n+      elsif Ekind (Subp_Id) in E_Task_Type | E_Task_Body\n         or else Is_Single_Task_Object (Subp_Id)\n       then\n          Subp_Decl := Declaration_Node (Subp_Id);\n@@ -29979,7 +29958,7 @@ package body Sem_Prag is\n       --  outputs.\n \n       if Is_Entry_Body (Subp_Id)\n-        or else Ekind_In (Subp_Id, E_Subprogram_Body, E_Task_Body)\n+        or else Ekind (Subp_Id) in E_Subprogram_Body | E_Task_Body\n       then\n          Depends := Get_Pragma (Subp_Id, Pragma_Refined_Depends);\n          Global  := Get_Pragma (Subp_Id, Pragma_Refined_Global);\n@@ -30037,7 +30016,7 @@ package body Sem_Prag is\n \n          Append_New_Elmt (Typ, Subp_Inputs);\n \n-         if Ekind_In (Spec_Id, E_Entry, E_Entry_Family, E_Procedure) then\n+         if Ekind (Spec_Id) in E_Entry | E_Entry_Family | E_Procedure then\n             Append_New_Elmt (Typ, Subp_Outputs);\n          end if;\n \n@@ -30086,8 +30065,8 @@ package body Sem_Prag is\n \n    function Delay_Config_Pragma_Analyze (N : Node_Id) return Boolean is\n    begin\n-      return Nam_In (Pragma_Name_Unmapped (N),\n-                     Name_Interrupt_State, Name_Priority_Specific_Dispatching);\n+      return Pragma_Name_Unmapped (N)\n+        in Name_Interrupt_State | Name_Priority_Specific_Dispatching;\n    end Delay_Config_Pragma_Analyze;\n \n    -----------------------\n@@ -30244,10 +30223,10 @@ package body Sem_Prag is\n       Stmt    : Node_Id;\n \n       Look_For_Body : constant Boolean :=\n-                        Nam_In (Prag_Nam, Name_Refined_Depends,\n-                                          Name_Refined_Global,\n-                                          Name_Refined_Post,\n-                                          Name_Refined_State);\n+                        Prag_Nam in Name_Refined_Depends\n+                                  | Name_Refined_Global\n+                                  | Name_Refined_Post\n+                                  | Name_Refined_State;\n       --  Refinement pragmas must be associated with a subprogram body [stub]\n \n    --  Start of processing for Find_Related_Declaration_Or_Body\n@@ -31994,10 +31973,8 @@ package body Sem_Prag is\n       Args   : Node_Id;\n \n    begin\n-      pragma Assert (Nam_In (Arg_Nam, Name_Ensures,\n-                                      Name_Mode,\n-                                      Name_Name,\n-                                      Name_Requires));\n+      pragma Assert\n+        (Arg_Nam in Name_Ensures | Name_Mode | Name_Name | Name_Requires);\n \n       --  The caller requests the aspect argument\n "}, {"sha": "c1c5b3e36f22e61a6b65a067ab7b68a92bd3203d", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 123, "deletions": 128, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -455,8 +455,8 @@ package body Sem_Res is\n               and then not\n                 (Nkind (Parent (P)) = N_Subtype_Indication\n                   and then\n-                    Nkind_In (Parent (Parent (P)), N_Component_Definition,\n-                                                   N_Subtype_Declaration)\n+                    Nkind (Parent (Parent (P))) in N_Component_Definition\n+                                                 | N_Subtype_Declaration\n                   and then Paren_Count (N) = 0)\n             then\n                Error_Msg_N\n@@ -580,8 +580,8 @@ package body Sem_Res is\n \n       --  Legal case is in index or discriminant constraint\n \n-      elsif Nkind_In (PN, N_Index_Or_Discriminant_Constraint,\n-                          N_Discriminant_Association)\n+      elsif Nkind (PN) in N_Index_Or_Discriminant_Constraint\n+                        | N_Discriminant_Association\n       then\n          if Paren_Count (N) > 0 then\n             Error_Msg_N\n@@ -602,9 +602,8 @@ package body Sem_Res is\n       else\n          D := PN;\n          P := Parent (PN);\n-         while not Nkind_In (P, N_Component_Declaration,\n-                                N_Subtype_Indication,\n-                                N_Entry_Declaration)\n+         while Nkind (P) not in\n+           N_Component_Declaration | N_Subtype_Indication | N_Entry_Declaration\n          loop\n             D := P;\n             P := Parent (P);\n@@ -617,8 +616,8 @@ package body Sem_Res is\n          --  course a double fault.\n \n          if (Nkind (P) = N_Subtype_Indication\n-              and then Nkind_In (Parent (P), N_Component_Definition,\n-                                             N_Derived_Type_Definition)\n+              and then Nkind (Parent (P)) in N_Component_Definition\n+                                           | N_Derived_Type_Definition\n               and then D = Constraint (P))\n \n            --  The constraint itself may be given by a subtype indication,\n@@ -810,12 +809,12 @@ package body Sem_Res is\n       function Is_Conditional_Statement (N : Node_Id) return Boolean is\n       begin\n          return\n-           Nkind_In (N, N_And_Then,\n-                        N_Case_Expression,\n-                        N_Case_Statement,\n-                        N_If_Expression,\n-                        N_If_Statement,\n-                        N_Or_Else);\n+           Nkind (N) in N_And_Then\n+                      | N_Case_Expression\n+                      | N_Case_Statement\n+                      | N_If_Expression\n+                      | N_If_Statement\n+                      | N_Or_Else;\n       end Is_Conditional_Statement;\n \n       -------------------------------\n@@ -841,7 +840,7 @@ package body Sem_Res is\n       begin\n          return\n            Nkind (HSS) = N_Handled_Sequence_Of_Statements\n-             and then Nkind_In (Parent (HSS), N_Entry_Body, N_Subprogram_Body)\n+             and then Nkind (Parent (HSS)) in N_Entry_Body | N_Subprogram_Body\n              and then Is_List_Member (N)\n              and then List_Containing (N) = Statements (HSS);\n       end Is_Immediately_Within_Body;\n@@ -1149,9 +1148,8 @@ package body Sem_Res is\n          --  functions, this is never a parameterless call (RM 4.1.4(6)).\n \n          if Nkind (Parent (N)) = N_Attribute_Reference\n-            and then Nam_In (Attribute_Name (Parent (N)), Name_Address,\n-                                                          Name_Code_Address,\n-                                                          Name_Access)\n+            and then Attribute_Name (Parent (N))\n+                       in Name_Address | Name_Code_Address | Name_Access\n          then\n             return False;\n          end if;\n@@ -1201,9 +1199,9 @@ package body Sem_Res is\n         and then Ekind (Entity (N)) = E_Procedure\n         and then not Is_Overloaded (N)\n         and then\n-         Nkind_In (Parent (N), N_Parameter_Association,\n-                               N_Function_Call,\n-                               N_Procedure_Call_Statement)\n+         Nkind (Parent (N)) in N_Parameter_Association\n+                             | N_Function_Call\n+                             | N_Procedure_Call_Statement\n       then\n          return;\n       end if;\n@@ -1238,8 +1236,8 @@ package body Sem_Res is\n         (Nkind (N) = N_Selected_Component\n           and then (Ekind (Entity (Selector_Name (N))) = E_Function\n                      or else\n-                       (Ekind_In (Entity (Selector_Name (N)), E_Entry,\n-                                                              E_Procedure)\n+                       (Ekind (Entity (Selector_Name (N))) in\n+                          E_Entry | E_Procedure\n                          and then Is_Overloaded (Selector_Name (N)))))\n \n       --  If one of the above three conditions is met, rewrite as call. Apply\n@@ -1547,7 +1545,7 @@ package body Sem_Res is\n          elsif In_Instance then\n             null;\n \n-         elsif Nam_In (Op_Name, Name_Op_Multiply, Name_Op_Divide)\n+         elsif Op_Name in Name_Op_Multiply | Name_Op_Divide\n            and then Is_Fixed_Point_Type (Etype (Act1))\n            and then Is_Fixed_Point_Type (Etype (Act2))\n          then\n@@ -1559,7 +1557,7 @@ package body Sem_Res is\n          --  available.\n \n          elsif Ada_Version >= Ada_2005\n-           and then Nam_In (Op_Name, Name_Op_Eq, Name_Op_Ne)\n+           and then Op_Name in Name_Op_Eq | Name_Op_Ne\n            and then (Is_Anonymous_Access_Type (Etype (Act1))\n                       or else Is_Anonymous_Access_Type (Etype (Act2)))\n          then\n@@ -1670,7 +1668,7 @@ package body Sem_Res is\n            and then not In_Instance\n          then\n             if Is_Fixed_Point_Type (Typ)\n-              and then Nam_In (Op_Name, Name_Op_Multiply, Name_Op_Divide)\n+              and then Op_Name in Name_Op_Multiply | Name_Op_Divide\n             then\n                --  Already checked above\n \n@@ -1707,7 +1705,7 @@ package body Sem_Res is\n       --  the equality node will not resolve any remaining ambiguity, and it\n       --  assumes that the first operand is not overloaded.\n \n-      if Nam_In (Op_Name, Name_Op_Eq, Name_Op_Ne)\n+      if Op_Name in Name_Op_Eq | Name_Op_Ne\n         and then Ekind (Func) = E_Function\n         and then Is_Overloaded (Act1)\n       then\n@@ -2162,9 +2160,9 @@ package body Sem_Res is\n       --  access-to-subprogram type.\n \n       if Nkind (N) = N_Attribute_Reference\n-        and then Nam_In (Attribute_Name (N), Name_Access,\n-                                             Name_Unrestricted_Access,\n-                                             Name_Unchecked_Access)\n+        and then Attribute_Name (N) in Name_Access\n+                                     | Name_Unrestricted_Access\n+                                     | Name_Unchecked_Access\n         and then Comes_From_Source (N)\n         and then Is_Entity_Name (Prefix (N))\n         and then Is_Subprogram (Entity (Prefix (N)))\n@@ -2582,10 +2580,10 @@ package body Sem_Res is\n                   Set_Entity (N, Seen);\n                   Generate_Reference (Seen, N);\n \n-               elsif Nkind_In (N, N_Case_Expression,\n-                                  N_Character_Literal,\n-                                  N_Delta_Aggregate,\n-                                  N_If_Expression)\n+               elsif Nkind (N) in N_Case_Expression\n+                                | N_Character_Literal\n+                                | N_Delta_Aggregate\n+                                | N_If_Expression\n                then\n                   Set_Etype (N, Expr_Type);\n \n@@ -2651,15 +2649,15 @@ package body Sem_Res is\n                --  with a name that is an explicit dereference, there is\n                --  nothing to be done at this point.\n \n-               elsif Nkind_In (N, N_Attribute_Reference,\n-                                  N_And_Then,\n-                                  N_Explicit_Dereference,\n-                                  N_Identifier,\n-                                  N_Indexed_Component,\n-                                  N_Or_Else,\n-                                  N_Range,\n-                                  N_Selected_Component,\n-                                  N_Slice)\n+               elsif Nkind (N) in N_Attribute_Reference\n+                                | N_And_Then\n+                                | N_Explicit_Dereference\n+                                | N_Identifier\n+                                | N_Indexed_Component\n+                                | N_Or_Else\n+                                | N_Range\n+                                | N_Selected_Component\n+                                | N_Slice\n                  or else Nkind (Name (N)) = N_Explicit_Dereference\n                then\n                   null;\n@@ -4546,7 +4544,7 @@ package body Sem_Res is\n \n             --  Apply appropriate constraint/predicate checks for IN [OUT] case\n \n-            if Ekind_In (F, E_In_Parameter, E_In_Out_Parameter) then\n+            if Ekind (F) in E_In_Parameter | E_In_Out_Parameter then\n \n                --  Apply predicate tests except in certain special cases. Note\n                --  that it might be more consistent to apply these only when\n@@ -4628,7 +4626,7 @@ package body Sem_Res is\n \n             --  Checks for OUT parameters and IN OUT parameters\n \n-            if Ekind_In (F, E_Out_Parameter, E_In_Out_Parameter) then\n+            if Ekind (F) in E_Out_Parameter | E_In_Out_Parameter then\n \n                --  If there is a type conversion, make sure the return value\n                --  meets the constraints of the variable before the conversion.\n@@ -4947,7 +4945,7 @@ package body Sem_Res is\n \n             if Comes_From_Source (Nam)\n               and then Is_Ghost_Entity (Nam)\n-              and then Ekind_In (F, E_In_Out_Parameter, E_Out_Parameter)\n+              and then Ekind (F) in E_In_Out_Parameter | E_Out_Parameter\n               and then Is_Entity_Name (A)\n               and then Present (Entity (A))\n               and then not Is_Ghost_Entity (Entity (A))\n@@ -5234,7 +5232,7 @@ package body Sem_Res is\n             Aggr := Original_Node (Expression (E));\n \n             if Has_Discriminants (Subtyp)\n-              and then Nkind_In (Aggr, N_Aggregate, N_Extension_Aggregate)\n+              and then Nkind (Aggr) in N_Aggregate | N_Extension_Aggregate\n             then\n                Discrim := First_Discriminant (Base_Type (Subtyp));\n \n@@ -5591,18 +5589,18 @@ package body Sem_Res is\n          --  N is the expression after \"delta\" in a fixed_point_definition;\n          --  see RM-3.5.9(6):\n \n-         return Nkind_In (Parent (N), N_Ordinary_Fixed_Point_Definition,\n-                                      N_Decimal_Fixed_Point_Definition,\n+         return Nkind (Parent (N)) in N_Ordinary_Fixed_Point_Definition\n+                                    | N_Decimal_Fixed_Point_Definition\n \n          --  N is one of the bounds in a real_range_specification;\n          --  see RM-3.5.7(5):\n \n-                                      N_Real_Range_Specification,\n+                                    | N_Real_Range_Specification\n \n          --  N is the expression of a delta_constraint;\n          --  see RM-J.3(3):\n \n-                                      N_Delta_Constraint);\n+                                    | N_Delta_Constraint;\n       end Expected_Type_Is_Any_Real;\n \n       -----------------------------\n@@ -5684,7 +5682,7 @@ package body Sem_Res is\n             --  a conversion will be applied to each operand, so resolve it\n             --  with its own type.\n \n-            if Nkind_In (Parent (N), N_Op_Divide, N_Op_Multiply) then\n+            if Nkind (Parent (N)) in N_Op_Divide | N_Op_Multiply then\n                Resolve (N);\n \n             else\n@@ -5772,7 +5770,7 @@ package body Sem_Res is\n          --  involving a fixed-point operand) the conditional expression must\n          --  resolve to a unique visible fixed_point type, normally Duration.\n \n-         elsif Nkind_In (N, N_Case_Expression, N_If_Expression)\n+         elsif Nkind (N) in N_Case_Expression | N_If_Expression\n            and then Etype (N) = Universal_Real\n            and then Is_Fixed_Point_Type (B_Typ)\n          then\n@@ -5837,7 +5835,7 @@ package body Sem_Res is\n                         and then (Is_Integer_Or_Universal (L)\n                                     or else\n                                   Is_Integer_Or_Universal (R))))\n-        and then Nkind_In (N, N_Op_Multiply, N_Op_Divide)\n+        and then Nkind (N) in N_Op_Multiply | N_Op_Divide\n       then\n          if TL = Universal_Integer or else TR = Universal_Integer then\n             Check_For_Visible_Operator (N, B_Typ);\n@@ -5883,8 +5881,8 @@ package body Sem_Res is\n          then\n             if B_Typ = Universal_Fixed\n               and then not Expected_Type_Is_Any_Real (N)\n-              and then not Nkind_In (Parent (N), N_Type_Conversion,\n-                                                 N_Unchecked_Type_Conversion)\n+              and then Nkind (Parent (N)) not in\n+                         N_Type_Conversion | N_Unchecked_Type_Conversion\n             then\n                Error_Msg_N (\"type cannot be determined from context!\", N);\n                Error_Msg_N (\"\\explicit conversion to result type required\", N);\n@@ -5895,9 +5893,8 @@ package body Sem_Res is\n             else\n                if Ada_Version = Ada_83\n                  and then Etype (N) = Universal_Fixed\n-                 and then not\n-                   Nkind_In (Parent (N), N_Type_Conversion,\n-                                         N_Unchecked_Type_Conversion)\n+                 and then Nkind (Parent (N)) not in\n+                            N_Type_Conversion | N_Unchecked_Type_Conversion\n                then\n                   Error_Msg_N\n                     (\"(Ada 83) fixed-point operation needs explicit \"\n@@ -5985,7 +5982,7 @@ package body Sem_Res is\n \n          --  Give warning if explicit division by zero\n \n-         if Nkind_In (N, N_Op_Divide, N_Op_Rem, N_Op_Mod)\n+         if Nkind (N) in N_Op_Divide | N_Op_Rem | N_Op_Mod\n            and then not Division_Checks_Suppressed (Etype (N))\n          then\n             Rop := Right_Opnd (N);\n@@ -6066,7 +6063,7 @@ package body Sem_Res is\n          --  if both operands can be negative.\n \n          if Restriction_Check_Required (No_Implicit_Conditionals)\n-           and then Nkind_In (N, N_Op_Rem, N_Op_Mod)\n+           and then Nkind (N) in N_Op_Rem | N_Op_Mod\n          then\n             declare\n                Lo : Uint;\n@@ -6216,7 +6213,7 @@ package body Sem_Res is\n       --  operations use the same circuitry because the name in the call\n       --  can be an arbitrary expression with special resolution rules.\n \n-      elsif Nkind_In (Subp, N_Selected_Component, N_Indexed_Component)\n+      elsif Nkind (Subp) in N_Selected_Component | N_Indexed_Component\n         or else (Is_Entity_Name (Subp) and then Is_Entry (Entity (Subp)))\n       then\n          Resolve_Entry_Call (N, Typ);\n@@ -6647,8 +6644,8 @@ package body Sem_Res is\n                         begin\n                            P := Prev (N);\n                            while Present (P) loop\n-                              if not Nkind_In (P, N_Assignment_Statement,\n-                                                  N_Raise_Constraint_Error)\n+                              if Nkind (P) not in N_Assignment_Statement\n+                                                | N_Raise_Constraint_Error\n                               then\n                                  exit Scope_Loop;\n                               end if;\n@@ -6765,7 +6762,7 @@ package body Sem_Res is\n       --  secondary stack (or any other one).\n \n       elsif Expander_Active\n-        and then Ekind_In (Nam, E_Function, E_Subprogram_Type)\n+        and then Ekind (Nam) in E_Function | E_Subprogram_Type\n         and then Requires_Transient_Scope (Etype (Nam))\n         and then not Is_Ignored_Ghost_Entity (Nam)\n       then\n@@ -6864,7 +6861,7 @@ package body Sem_Res is\n             F := First_Formal (Nam);\n             A := First_Actual (N);\n             while Present (F) and then Present (A) loop\n-               if Ekind_In (F, E_Out_Parameter, E_In_Out_Parameter)\n+               if Ekind (F) in E_Out_Parameter | E_In_Out_Parameter\n                  and then Warn_On_Modified_As_Out_Parameter (F)\n                  and then Is_Entity_Name (A)\n                  and then Present (Entity (A))\n@@ -7579,24 +7576,24 @@ package body Sem_Res is\n          Expr    : Node_Id) return Boolean\n       is\n       begin\n-         if Nkind_In (Context, N_Assignment_Statement,\n-                               N_Object_Declaration)\n+         if Nkind (Context) in\n+              N_Assignment_Statement | N_Object_Declaration\n            and then Expression (Context) = Expr\n          then\n             return True;\n \n          --  Check whether a construct that yields a name is the expression of\n          --  an assignment statement or an object declaration.\n \n-         elsif (Nkind_In (Context, N_Attribute_Reference,\n-                                   N_Explicit_Dereference,\n-                                   N_Indexed_Component,\n-                                   N_Selected_Component,\n-                                   N_Slice)\n+         elsif (Nkind (Context) in N_Attribute_Reference\n+                                 | N_Explicit_Dereference\n+                                 | N_Indexed_Component\n+                                 | N_Selected_Component\n+                                 | N_Slice\n                   and then Prefix (Context) = Expr)\n            or else\n-               (Nkind_In (Context, N_Type_Conversion,\n-                                   N_Unchecked_Type_Conversion)\n+               (Nkind (Context) in N_Type_Conversion\n+                                 | N_Unchecked_Type_Conversion\n                   and then Expression (Context) = Expr)\n          then\n             return\n@@ -8460,13 +8457,11 @@ package body Sem_Res is\n          S   : Entity_Id;\n \n       begin\n-         if Ekind_In (Etype (R), E_Allocator_Type,\n-                                 E_Access_Attribute_Type)\n+         if Ekind (Etype (R)) in E_Allocator_Type | E_Access_Attribute_Type\n          then\n             Acc := Designated_Type (Etype (R));\n \n-         elsif Ekind_In (Etype (L), E_Allocator_Type,\n-                                    E_Access_Attribute_Type)\n+         elsif Ekind (Etype (L)) in E_Allocator_Type | E_Access_Attribute_Type\n          then\n             Acc := Designated_Type (Etype (L));\n          else\n@@ -8519,7 +8514,7 @@ package body Sem_Res is\n             return;\n \n          elsif T = Any_Access\n-           or else Ekind_In (T, E_Allocator_Type, E_Access_Attribute_Type)\n+           or else Ekind (T) in E_Allocator_Type | E_Access_Attribute_Type\n          then\n             T := Find_Unique_Access_Type;\n \n@@ -8660,8 +8655,8 @@ package body Sem_Res is\n \n          if Expander_Active\n            and then\n-             (Ekind_In (T, E_Anonymous_Access_Type,\n-                           E_Anonymous_Access_Subprogram_Type)\n+             (Ekind (T) in E_Anonymous_Access_Type\n+                         | E_Anonymous_Access_Subprogram_Type\n                or else Is_Private_Type (T))\n          then\n             if Etype (L) /= T then\n@@ -9258,7 +9253,7 @@ package body Sem_Res is\n          Res : Node_Id;\n \n       begin\n-         if Nkind_In (Opnd, N_Integer_Literal, N_Real_Literal) then\n+         if Nkind (Opnd) in N_Integer_Literal | N_Real_Literal then\n             Res :=\n               Make_Qualified_Expression (Loc,\n                 Subtype_Mark => New_Occurrence_Of (Btyp, Loc),\n@@ -9451,7 +9446,7 @@ package body Sem_Res is\n \n       if Short_Circuit_And_Or\n         and then B_Typ = Standard_Boolean\n-        and then Nkind_In (N, N_Op_And, N_Op_Or)\n+        and then Nkind (N) in N_Op_And | N_Op_Or\n       then\n          --  Mark the corresponding putative SCO operator as truly a logical\n          --  (and short-circuit) operator.\n@@ -9584,9 +9579,9 @@ package body Sem_Res is\n                Alt := First (Alternatives (N));\n                while Present (Alt) loop\n                   if Is_OK_Static_Expression (Alt)\n-                    and then (Nkind_In (Alt, N_Integer_Literal,\n-                                             N_Character_Literal)\n-                               or else Nkind (Alt) in N_Has_Entity)\n+                    and then Nkind (Alt) in N_Integer_Literal\n+                                          | N_Character_Literal\n+                                          | N_Has_Entity\n                   then\n                      Nalts := Nalts + 1;\n                      Alts (Nalts) := (Alt, Expr_Value (Alt));\n@@ -10239,7 +10234,7 @@ package body Sem_Res is\n \n          begin\n             if B_Typ = Standard_Boolean\n-              and then Nkind_In (Opnd, N_Op_Eq, N_Op_Ne)\n+              and then Nkind (Opnd) in N_Op_Eq | N_Op_Ne\n               and then Is_Overloaded (Opnd)\n             then\n                Resolve_Equality_Op (Opnd, B_Typ);\n@@ -11257,10 +11252,10 @@ package body Sem_Res is\n \n       elsif Nkind (Parent (N)) = N_Op_Concat\n         and then not Need_Check\n-        and then not Nkind_In (Original_Node (N), N_Character_Literal,\n-                                                  N_Attribute_Reference,\n-                                                  N_Qualified_Expression,\n-                                                  N_Type_Conversion)\n+        and then Nkind (Original_Node (N)) not in N_Character_Literal\n+                                                | N_Attribute_Reference\n+                                                | N_Qualified_Expression\n+                                                | N_Type_Conversion\n       then\n          Subtype_Id := Typ;\n \n@@ -11546,14 +11541,14 @@ package body Sem_Res is\n          --  precision.\n \n          if Is_Fixed_Point_Type (Typ)\n-           and then Nkind_In (Operand, N_Op_Divide, N_Op_Multiply)\n+           and then Nkind (Operand) in N_Op_Divide | N_Op_Multiply\n            and then Etype (Left_Opnd  (Operand)) = Any_Fixed\n            and then Etype (Right_Opnd (Operand)) = Any_Fixed\n          then\n             Set_Etype (Operand, Universal_Real);\n \n          elsif Is_Numeric_Type (Typ)\n-           and then Nkind_In (Operand, N_Op_Multiply, N_Op_Divide)\n+           and then Nkind (Operand) in N_Op_Multiply | N_Op_Divide\n            and then (Etype (Right_Opnd (Operand)) = Universal_Real\n                        or else\n                      Etype (Left_Opnd  (Operand)) = Universal_Real)\n@@ -11715,11 +11710,11 @@ package body Sem_Res is\n             --  newer language version.\n \n             elsif Nkind (Orig_N) = N_Qualified_Expression\n-              and then Nkind_In (Parent (N), N_Attribute_Reference,\n-                                             N_Indexed_Component,\n-                                             N_Selected_Component,\n-                                             N_Slice,\n-                                             N_Explicit_Dereference)\n+              and then Nkind (Parent (N)) in N_Attribute_Reference\n+                                           | N_Indexed_Component\n+                                           | N_Selected_Component\n+                                           | N_Slice\n+                                           | N_Explicit_Dereference\n             then\n                null;\n \n@@ -11849,7 +11844,7 @@ package body Sem_Res is\n \n                --  Handle subtypes\n \n-               if Ekind_In (Opnd, E_Protected_Subtype, E_Task_Subtype) then\n+               if Ekind (Opnd) in E_Protected_Subtype | E_Task_Subtype then\n                   Opnd := Etype (Opnd);\n                end if;\n \n@@ -12007,7 +12002,7 @@ package body Sem_Res is\n             --  mod. These are the cases where the grouping can affect results.\n \n             if Paren_Count (Rorig) = 0\n-              and then Nkind_In (Rorig, N_Op_Mod, N_Op_Multiply, N_Op_Divide)\n+              and then Nkind (Rorig) in N_Op_Mod | N_Op_Multiply | N_Op_Divide\n             then\n                --  For mod, we always give the warning, since the value is\n                --  affected by the parenthesization (e.g. (-5) mod 315 /=\n@@ -12089,7 +12084,7 @@ package body Sem_Res is\n                --  overflow is impossible (divisor > 1) or we have a case of\n                --  division by zero in any case.\n \n-               if Nkind_In (Rorig, N_Op_Divide, N_Op_Rem)\n+               if Nkind (Rorig) in N_Op_Divide | N_Op_Rem\n                  and then Compile_Time_Known_Value (Right_Opnd (Rorig))\n                  and then UI_Abs (Expr_Value (Right_Opnd (Rorig))) /= 1\n                then\n@@ -12567,9 +12562,9 @@ package body Sem_Res is\n                   or else (Is_Fixed_Point_Type (Target_Typ)\n                             and then Conversion_OK (N)))\n               and then Nkind (Operand) = N_Attribute_Reference\n-              and then Nam_In (Attribute_Name (Operand), Name_Rounding,\n-                                                         Name_Machine_Rounding,\n-                                                         Name_Truncation)\n+              and then Attribute_Name (Operand) in Name_Rounding\n+                                                 | Name_Machine_Rounding\n+                                                 | Name_Truncation\n             then\n                declare\n                   Truncate : constant Boolean :=\n@@ -12702,7 +12697,7 @@ package body Sem_Res is\n          --  When the context is a type conversion, issue the warning on the\n          --  expression of the conversion because it is the actual operation.\n \n-         if Nkind_In (N, N_Type_Conversion, N_Unchecked_Type_Conversion) then\n+         if Nkind (N) in N_Type_Conversion | N_Unchecked_Type_Conversion then\n             ErrN := Expression (N);\n          else\n             ErrN := N;\n@@ -12923,11 +12918,10 @@ package body Sem_Res is\n          --     <prefix>.all.Access_Discrim.all.Access_Discrim case,\n          --  where the correct result depends on <prefix>.\n \n-         return Nkind_In (Associated_Node,\n-           N_Procedure_Specification, -- access parameter\n-           N_Function_Specification,  -- access parameter\n-           N_Object_Declaration       -- saooaaat\n-           )\n+         return Nkind (Associated_Node) in\n+                  N_Procedure_Specification |  -- access parameter\n+                  N_Function_Specification  |  -- access parameter\n+                  N_Object_Declaration         -- saooaaat\n            or else Is_Discrim_Of_Bad_Access_Conversion_Argument (Deref_Prefix);\n       end Is_Discrim_Of_Bad_Access_Conversion_Argument;\n \n@@ -13001,9 +12995,9 @@ package body Sem_Res is\n                --  checks that must be applied to such conversions to prevent\n                --  out-of-scope references.\n \n-            elsif Ekind_In\n-                    (Target_Comp_Base, E_Anonymous_Access_Type,\n-                                       E_Anonymous_Access_Subprogram_Type)\n+            elsif Ekind (Target_Comp_Base) in\n+                    E_Anonymous_Access_Type\n+                  | E_Anonymous_Access_Subprogram_Type\n               and then Ekind (Opnd_Comp_Base) = Ekind (Target_Comp_Base)\n               and then\n                 Subtypes_Statically_Match (Target_Comp_Type, Opnd_Comp_Type)\n@@ -13312,8 +13306,8 @@ package body Sem_Res is\n       --  interface type.\n \n       elsif Is_Access_Type (Opnd_Type)\n-        and then Ekind_In (Target_Type, E_General_Access_Type,\n-                                        E_Anonymous_Access_Type)\n+        and then Ekind (Target_Type) in\n+                   E_General_Access_Type | E_Anonymous_Access_Type\n         and then Is_Interface (Directly_Designated_Type (Target_Type))\n       then\n          --  Check the static accessibility rule of 4.6(17). Note that the\n@@ -13393,7 +13387,7 @@ package body Sem_Res is\n                if Is_Entity_Name (Operand)\n                  and then not Is_Local_Anonymous_Access (Opnd_Type)\n                  and then\n-                   Ekind_In (Entity (Operand), E_In_Parameter, E_Constant)\n+                   Ekind (Entity (Operand)) in E_In_Parameter | E_Constant\n                  and then Present (Discriminal_Link (Entity (Operand)))\n                then\n                   Conversion_Error_N\n@@ -13408,14 +13402,15 @@ package body Sem_Res is\n \n       --  General and anonymous access types\n \n-      elsif Ekind_In (Target_Type, E_General_Access_Type,\n-                                   E_Anonymous_Access_Type)\n+      elsif Ekind (Target_Type) in\n+              E_General_Access_Type | E_Anonymous_Access_Type\n           and then\n             Conversion_Check\n               (Is_Access_Type (Opnd_Type)\n-                and then not\n-                  Ekind_In (Opnd_Type, E_Access_Subprogram_Type,\n-                                       E_Access_Protected_Subprogram_Type),\n+                and then\n+                  Ekind (Opnd_Type) not in\n+                    E_Access_Subprogram_Type |\n+                    E_Access_Protected_Subprogram_Type,\n                \"must be an access-to-object type\")\n       then\n          if Is_Access_Constant (Opnd_Type)\n@@ -13471,10 +13466,10 @@ package body Sem_Res is\n                   --  as universal_access \"=\".\n \n                   elsif not Is_Local_Anonymous_Access (Opnd_Type)\n-                    and then Nkind_In (Associated_Node_For_Itype (Opnd_Type),\n-                                       N_Function_Specification,\n-                                       N_Procedure_Specification)\n-                    and then not Nkind_In (Parent (N), N_Op_Eq, N_Op_Ne)\n+                    and then Nkind (Associated_Node_For_Itype (Opnd_Type)) in\n+                               N_Function_Specification |\n+                               N_Procedure_Specification\n+                    and then Nkind (Parent (N)) not in N_Op_Eq | N_Op_Ne\n                   then\n                      Conversion_Error_N\n                        (\"implicit conversion of anonymous access parameter \"\n@@ -13588,7 +13583,7 @@ package body Sem_Res is\n \n                if Is_Entity_Name (Operand)\n                  and then\n-                   Ekind_In (Entity (Operand), E_In_Parameter, E_Constant)\n+                   Ekind (Entity (Operand)) in E_In_Parameter | E_Constant\n                  and then Present (Discriminal_Link (Entity (Operand)))\n                then\n                   Conversion_Error_N"}, {"sha": "f8ad56bb5fa413b9c8ae3a3b45834c6db003a77c", "filename": "gcc/ada/sem_scil.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_scil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_scil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_scil.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -86,8 +86,8 @@ package body Sem_SCIL is\n             --  object or parameter declaration. Interface types are still\n             --  unsupported.\n \n-            elsif Nkind_In (Ctrl_Tag, N_Object_Declaration,\n-                                      N_Parameter_Specification)\n+            elsif Nkind (Ctrl_Tag) in\n+                    N_Object_Declaration | N_Parameter_Specification\n             then\n                Ctrl_Typ := Etype (Defining_Identifier (Ctrl_Tag));\n \n@@ -132,10 +132,10 @@ package body Sem_SCIL is\n             --  Check contents of the boolean expression associated with the\n             --  membership test.\n \n-            pragma Assert (Nkind_In (N, N_Identifier,\n-                                        N_And_Then,\n-                                        N_Or_Else,\n-                                        N_Expression_With_Actions)\n+            pragma Assert\n+              (Nkind (N) in\n+                 N_Identifier | N_And_Then | N_Or_Else |\n+                 N_Expression_With_Actions\n               and then Etype (N) = Standard_Boolean);\n \n             --  Check the entity identifier of the associated tagged type (that"}, {"sha": "a5e62a72cd92d469d0f3237e69c1999a840a412f", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -1039,8 +1039,8 @@ package body Sem_Type is\n       --  An Access_To_Subprogram is compatible with itself, or with an\n       --  anonymous type created for an attribute reference Access.\n \n-      elsif Ekind_In (BT1, E_Access_Subprogram_Type,\n-                           E_Access_Protected_Subprogram_Type)\n+      elsif Ekind (BT1) in E_Access_Subprogram_Type\n+                         | E_Access_Protected_Subprogram_Type\n         and then Is_Access_Type (T2)\n         and then (not Comes_From_Source (T1)\n                    or else not Comes_From_Source (T2))\n@@ -1055,8 +1055,8 @@ package body Sem_Type is\n       --  with itself, or with an anonymous type created for an attribute\n       --  reference Access.\n \n-      elsif Ekind_In (BT1, E_Anonymous_Access_Subprogram_Type,\n-                           E_Anonymous_Access_Protected_Subprogram_Type)\n+      elsif Ekind (BT1) in E_Anonymous_Access_Subprogram_Type\n+                         | E_Anonymous_Access_Protected_Subprogram_Type\n         and then Is_Access_Type (T2)\n         and then (not Comes_From_Source (T1)\n                    or else not Comes_From_Source (T2))\n@@ -1106,7 +1106,7 @@ package body Sem_Type is\n       --  imposed by context.\n \n       elsif Ekind (T2) = E_Access_Attribute_Type\n-        and then Ekind_In (BT1, E_General_Access_Type, E_Access_Type)\n+        and then Ekind (BT1) in E_General_Access_Type | E_Access_Type\n         and then Covers (Designated_Type (T1), Designated_Type (T2))\n       then\n          --  If the target type is a RACW type while the source is an access\n@@ -1599,10 +1599,10 @@ package body Sem_Type is\n                  and then Is_Overloaded (Act1)\n                  and then\n                    (Nkind (Act1) in N_Unary_Op\n-                     or else Nkind_In (Left_Opnd (Act1), N_Integer_Literal,\n-                                                         N_Real_Literal))\n-                 and then Nkind_In (Right_Opnd (Act1), N_Integer_Literal,\n-                                                       N_Real_Literal)\n+                     or else Nkind (Left_Opnd (Act1)) in\n+                               N_Integer_Literal | N_Real_Literal)\n+                 and then Nkind (Right_Opnd (Act1)) in\n+                            N_Integer_Literal | N_Real_Literal\n                  and then Has_Compatible_Type (Act1, Standard_Boolean)\n                  and then Etype (F1) = Standard_Boolean\n                then\n@@ -1627,8 +1627,8 @@ package body Sem_Type is\n                   elsif Present (Act2)\n                     and then Nkind (Act2) in N_Op\n                     and then Is_Overloaded (Act2)\n-                    and then Nkind_In (Right_Opnd (Act2), N_Integer_Literal,\n-                                                          N_Real_Literal)\n+                    and then Nkind (Right_Opnd (Act2)) in\n+                               N_Integer_Literal | N_Real_Literal\n                     and then Has_Compatible_Type (Act2, Standard_Boolean)\n                   then\n                      --  The preference rule on the first actual is not\n@@ -2094,7 +2094,7 @@ package body Sem_Type is\n            and then not In_Instance\n          then\n             if Is_Fixed_Point_Type (Typ)\n-              and then Nam_In (Chars (Nam1), Name_Op_Multiply, Name_Op_Divide)\n+              and then Chars (Nam1) in Name_Op_Multiply | Name_Op_Divide\n               and then\n                 (Ada_Version = Ada_83\n                   or else (Ada_Version >= Ada_2012\n@@ -2114,7 +2114,7 @@ package body Sem_Type is\n             --  declared in the same declarative list as the type. The node\n             --  may be an operator or a function call.\n \n-            elsif Nam_In (Chars (Nam1), Name_Op_Eq, Name_Op_Ne)\n+            elsif Chars (Nam1) in Name_Op_Eq | Name_Op_Ne\n               and then Ada_Version >= Ada_2005\n               and then Etype (User_Subp) = Standard_Boolean\n               and then Is_Anonymous_Access_Type (Operand_Type)\n@@ -3105,7 +3105,7 @@ package body Sem_Type is\n       elsif Num = 1 then\n          T1 := Etype (New_First_F);\n \n-         if Nam_In (Op_Name, Name_Op_Subtract, Name_Op_Add, Name_Op_Abs) then\n+         if Op_Name in Name_Op_Subtract | Name_Op_Add | Name_Op_Abs then\n             return Base_Type (T1) = Base_Type (T)\n               and then Is_Numeric_Type (T);\n \n@@ -3123,24 +3123,23 @@ package body Sem_Type is\n          T1 := Etype (New_First_F);\n          T2 := Etype (Next_Formal (New_First_F));\n \n-         if Nam_In (Op_Name, Name_Op_And, Name_Op_Or, Name_Op_Xor) then\n+         if Op_Name in Name_Op_And | Name_Op_Or | Name_Op_Xor then\n             return Base_Type (T1) = Base_Type (T2)\n               and then Base_Type (T1) = Base_Type (T)\n               and then Valid_Boolean_Arg (Base_Type (T));\n \n-         elsif Nam_In (Op_Name, Name_Op_Eq, Name_Op_Ne) then\n+         elsif Op_Name in Name_Op_Eq | Name_Op_Ne then\n             return Base_Type (T1) = Base_Type (T2)\n               and then not Is_Limited_Type (T1)\n               and then Is_Boolean_Type (T);\n \n-         elsif Nam_In (Op_Name, Name_Op_Lt, Name_Op_Le,\n-                                Name_Op_Gt, Name_Op_Ge)\n+         elsif Op_Name in Name_Op_Lt | Name_Op_Le | Name_Op_Gt | Name_Op_Ge\n          then\n             return Base_Type (T1) = Base_Type (T2)\n               and then Valid_Comparison_Arg (T1)\n               and then Is_Boolean_Type (T);\n \n-         elsif Nam_In (Op_Name, Name_Op_Add, Name_Op_Subtract) then\n+         elsif Op_Name in Name_Op_Add | Name_Op_Subtract then\n             return Base_Type (T1) = Base_Type (T2)\n               and then Base_Type (T1) = Base_Type (T)\n               and then Is_Numeric_Type (T);\n@@ -3193,7 +3192,7 @@ package body Sem_Type is\n                         and then Is_Floating_Point_Type (T2)\n                         and then Base_Type (T2) = Base_Type (T));\n \n-         elsif Nam_In (Op_Name, Name_Op_Mod, Name_Op_Rem) then\n+         elsif Op_Name in Name_Op_Mod | Name_Op_Rem then\n             return Base_Type (T1) = Base_Type (T2)\n               and then Base_Type (T1) = Base_Type (T)\n               and then Is_Integer_Type (T);\n@@ -3423,26 +3422,26 @@ package body Sem_Type is\n       then\n          return T2;\n \n-      elsif Ekind_In (B1, E_Access_Subprogram_Type,\n-                          E_Access_Protected_Subprogram_Type)\n+      elsif Ekind (B1) in E_Access_Subprogram_Type\n+                        | E_Access_Protected_Subprogram_Type\n         and then Ekind (Designated_Type (B1)) /= E_Subprogram_Type\n         and then Is_Access_Type (T2)\n       then\n          return T2;\n \n-      elsif Ekind_In (B2, E_Access_Subprogram_Type,\n-                          E_Access_Protected_Subprogram_Type)\n+      elsif Ekind (B2) in E_Access_Subprogram_Type\n+                        | E_Access_Protected_Subprogram_Type\n         and then Ekind (Designated_Type (B2)) /= E_Subprogram_Type\n         and then Is_Access_Type (T1)\n       then\n          return T1;\n \n-      elsif Ekind_In (T1, E_Allocator_Type, E_Access_Attribute_Type)\n+      elsif Ekind (T1) in E_Allocator_Type | E_Access_Attribute_Type\n         and then Is_Access_Type (T2)\n       then\n          return T2;\n \n-      elsif Ekind_In (T2, E_Allocator_Type, E_Access_Attribute_Type)\n+      elsif Ekind (T2) in E_Allocator_Type | E_Access_Attribute_Type\n         and then Is_Access_Type (T1)\n       then\n          return T1;"}, {"sha": "917538258510356cec9bfe80539ef4d47e74561a", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 422, "deletions": 468, "changes": 890, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -195,8 +195,7 @@ package body Sem_Util is\n \n          Nod := Declaration_Node (Base_Type (Typ));\n \n-         if Nkind_In (Nod, N_Full_Type_Declaration,\n-                           N_Private_Type_Declaration)\n+         if Nkind (Nod) in N_Full_Type_Declaration | N_Private_Type_Declaration\n          then\n             return Empty_List;\n          end if;\n@@ -1024,11 +1023,13 @@ package body Sem_Util is\n       HSS : Node_Id;\n \n    begin\n-      pragma Assert (Nkind_In (N, N_Block_Statement,\n-                                  N_Entry_Body,\n-                                  N_Package_Body,\n-                                  N_Subprogram_Body,\n-                                  N_Task_Body));\n+      pragma Assert\n+        (Nkind (N) in\n+           N_Block_Statement |\n+           N_Entry_Body      |\n+           N_Package_Body    |\n+           N_Subprogram_Body |\n+           N_Task_Body);\n \n       HSS := Handled_Statement_Sequence (N);\n \n@@ -2570,10 +2571,8 @@ package body Sem_Util is\n \n                --  Don't collect identifiers of packages, called functions, etc\n \n-               elsif Ekind_In (Entity (N), E_Package,\n-                                           E_Function,\n-                                           E_Procedure,\n-                                           E_Entry)\n+               elsif Ekind (Entity (N)) in\n+                       E_Package | E_Function | E_Procedure | E_Entry\n                then\n                   return Skip;\n \n@@ -2593,9 +2592,8 @@ package body Sem_Util is\n                --  to identify a corner case???\n \n                elsif Nkind (Parent (N)) = N_Component_Association\n-                  and then Nkind_In (Parent (Parent (N)),\n-                                     N_Aggregate,\n-                                     N_Extension_Aggregate)\n+                  and then Nkind (Parent (Parent (N))) in\n+                             N_Aggregate | N_Extension_Aggregate\n                then\n                   declare\n                      Choice : constant Node_Id := First (Choices (Parent (N)));\n@@ -2629,15 +2627,15 @@ package body Sem_Util is\n                         return Abandon;\n                      end if;\n \n-                     if Ekind_In (Id, E_Function, E_Generic_Function)\n+                     if Ekind (Id) in E_Function | E_Generic_Function\n                        and then Has_Out_Or_In_Out_Parameter (Id)\n                      then\n                         Formal := First_Formal (Id);\n                         Actual := First_Actual (Call);\n                         while Present (Actual) and then Present (Formal) loop\n                            if Actual = N then\n-                              if Ekind_In (Formal, E_Out_Parameter,\n-                                                   E_In_Out_Parameter)\n+                              if Ekind (Formal) in E_Out_Parameter\n+                                                 | E_In_Out_Parameter\n                               then\n                                  Is_Writable_Actual := True;\n                               end if;\n@@ -2788,15 +2786,15 @@ package body Sem_Util is\n \n       if Ada_Version < Ada_2012\n         or else not Check_Actuals (N)\n-        or else (not (Nkind (N) in N_Op)\n-                  and then not (Nkind (N) in N_Membership_Test)\n-                  and then not Nkind_In (N, N_Range,\n-                                            N_Aggregate,\n-                                            N_Extension_Aggregate,\n-                                            N_Full_Type_Declaration,\n-                                            N_Function_Call,\n-                                            N_Procedure_Call_Statement,\n-                                            N_Entry_Call_Statement))\n+        or else Nkind (N) not in N_Op\n+                               | N_Membership_Test\n+                               | N_Range\n+                               | N_Aggregate\n+                               | N_Extension_Aggregate\n+                               | N_Full_Type_Declaration\n+                               | N_Function_Call\n+                               | N_Procedure_Call_Statement\n+                               | N_Entry_Call_Statement\n         or else (Nkind (N) = N_Full_Type_Declaration\n                   and then not Is_Record_Type (Defining_Identifier (N)))\n \n@@ -2836,7 +2834,7 @@ package body Sem_Util is\n                   Collect_Identifiers (Right_Opnd (N));\n                end if;\n \n-               if Nkind_In (N, N_In, N_Not_In)\n+               if Nkind (N) in N_In | N_Not_In\n                  and then Present (Alternatives (N))\n                then\n                   Expr := First (Alternatives (N));\n@@ -2914,8 +2912,7 @@ package body Sem_Util is\n                Formal := First_Formal (Id);\n                Actual := First_Actual (N);\n                while Present (Actual) and then Present (Formal) loop\n-                  if Ekind_In (Formal, E_Out_Parameter,\n-                                       E_In_Out_Parameter)\n+                  if Ekind (Formal) in E_Out_Parameter | E_In_Out_Parameter\n                   then\n                      Collect_Identifiers (Actual);\n                   end if;\n@@ -2982,8 +2979,8 @@ package body Sem_Util is\n \n                            --  Count several components\n \n-                           elsif Nkind_In (Choice, N_Range,\n-                                                   N_Subtype_Indication)\n+                           elsif Nkind (Choice) in\n+                                   N_Range | N_Subtype_Indication\n                              or else (Is_Entity_Name (Choice)\n                                        and then Is_Type (Entity (Choice)))\n                            then\n@@ -3085,8 +3082,8 @@ package body Sem_Util is\n                      while Present (Assoc) loop\n                         Choice := First (Choices (Assoc));\n                         while Present (Choice) loop\n-                           if Nkind_In (Choice, N_Range,\n-                                                   N_Subtype_Indication)\n+                           if Nkind (Choice) in\n+                                N_Range | N_Subtype_Indication\n                              or else (Is_Entity_Name (Choice)\n                                        and then Is_Type (Entity (Choice)))\n                            then\n@@ -3446,8 +3443,8 @@ package body Sem_Util is\n \n                elsif Nkind (P) = N_Parameter_Specification\n                  and then Scope (Current_Scope) = Scope (Nam)\n-                 and then Nkind_In (Parent (P), N_Entry_Declaration,\n-                                                N_Subprogram_Declaration)\n+                 and then Nkind (Parent (P)) in\n+                            N_Entry_Declaration | N_Subprogram_Declaration\n                then\n                   Error_Msg_N\n                     (\"internal call cannot appear in default for formal of \"\n@@ -3516,7 +3513,8 @@ package body Sem_Util is\n       --  Loop through sequence of basic declarative items\n \n       Outer : while Present (Decl) loop\n-         if not Nkind_In (Decl, N_Subprogram_Body, N_Package_Body, N_Task_Body)\n+         if Nkind (Decl) not in\n+              N_Subprogram_Body | N_Package_Body | N_Task_Body\n            and then Nkind (Decl) not in N_Body_Stub\n          then\n             Next (Decl);\n@@ -3554,7 +3552,7 @@ package body Sem_Util is\n       Scop        : Entity_Id;\n \n    begin\n-      pragma Assert (Ekind_In (Id, E_Abstract_State, E_Variable));\n+      pragma Assert (Ekind (Id) in E_Abstract_State | E_Variable);\n \n       --  Nothing to do for internally-generated abstract states and variables\n       --  because they do not represent the hidden state of the source unit.\n@@ -3585,7 +3583,7 @@ package body Sem_Util is\n          --  or a task.\n \n          elsif Is_Subprogram_Or_Entry (Context)\n-           or else Ekind_In (Context, E_Block, E_Task_Type)\n+           or else Ekind (Context) in E_Block | E_Task_Type\n          then\n             return;\n          end if;\n@@ -3803,15 +3801,15 @@ package body Sem_Util is\n             --  Initial_Condition and Initializes as this is part of the\n             --  elaboration checks for the constituent (SPARK RM 9(3)).\n \n-            if Nam_In (Prag_Nam, Name_Initial_Condition, Name_Initializes) then\n+            if Prag_Nam in Name_Initial_Condition | Name_Initializes then\n                return;\n \n             --  When the reference appears within pragma Depends or Global,\n             --  check whether the pragma applies to a single task type. Note\n             --  that the pragma may not encapsulated by the type definition,\n             --  but this is still a valid context.\n \n-            elsif Nam_In (Prag_Nam, Name_Depends, Name_Global)\n+            elsif Prag_Nam in Name_Depends | Name_Global\n               and then Is_Single_Task_Pragma (Par, Conc_Obj)\n             then\n                return;\n@@ -3820,19 +3818,19 @@ package body Sem_Util is\n          --  The reference appears somewhere in the definition of a single\n          --  concurrent type (SPARK RM 9(3)).\n \n-         elsif Nkind_In (Par, N_Single_Protected_Declaration,\n-                              N_Single_Task_Declaration)\n+         elsif Nkind (Par) in\n+                 N_Single_Protected_Declaration | N_Single_Task_Declaration\n            and then Defining_Entity (Par) = Conc_Obj\n          then\n             return;\n \n          --  The reference appears within the declaration or body of a single\n          --  concurrent type (SPARK RM 9(3)).\n \n-         elsif Nkind_In (Par, N_Protected_Body,\n-                              N_Protected_Type_Declaration,\n-                              N_Task_Body,\n-                              N_Task_Type_Declaration)\n+         elsif Nkind (Par) in N_Protected_Body\n+                            | N_Protected_Type_Declaration\n+                            | N_Task_Body\n+                            | N_Task_Type_Declaration\n            and then Is_Single_Declaration_Or_Body (Par, Conc_Obj)\n          then\n             return;\n@@ -3851,10 +3849,10 @@ package body Sem_Util is\n          --  real check was already performed in the original context of the\n          --  reference.\n \n-         elsif Nkind_In (Par, N_Package_Body,\n-                              N_Package_Declaration,\n-                              N_Subprogram_Body,\n-                              N_Subprogram_Declaration)\n+         elsif Nkind (Par) in N_Package_Body\n+                            | N_Package_Declaration\n+                            | N_Subprogram_Body\n+                            | N_Subprogram_Declaration\n            and then Is_Internal_Declaration_Or_Body (Par)\n          then\n             return;\n@@ -4064,10 +4062,10 @@ package body Sem_Util is\n                --  Empty list (no global items) or single global item\n                --  declaration (only input items).\n \n-               if Nkind_In (List, N_Null,\n-                                  N_Expanded_Name,\n-                                  N_Identifier,\n-                                  N_Selected_Component)\n+               if Nkind (List) in N_Null\n+                                | N_Expanded_Name\n+                                | N_Identifier\n+                                | N_Selected_Component\n                then\n                   return False;\n \n@@ -4118,7 +4116,7 @@ package body Sem_Util is\n \n                Param := First_Formal (Subp);\n                while Present (Param) loop\n-                  if Ekind_In (Param, E_Out_Parameter, E_In_Out_Parameter) then\n+                  if Ekind (Param) in E_Out_Parameter | E_In_Out_Parameter then\n                      return False;\n                   end if;\n \n@@ -4183,7 +4181,7 @@ package body Sem_Util is\n \n          procedure Check_Conjuncts (Expr : Node_Id) is\n          begin\n-            if Nkind_In (Expr, N_Op_And, N_And_Then) then\n+            if Nkind (Expr) in N_Op_And | N_And_Then then\n                Check_Conjuncts (Left_Opnd (Expr));\n                Check_Conjuncts (Right_Opnd (Expr));\n             else\n@@ -4265,11 +4263,11 @@ package body Sem_Util is\n                Ent : Entity_Id;\n \n             begin\n-               if Nkind_In (N, N_Explicit_Dereference, N_Function_Call) then\n+               if Nkind (N) in N_Explicit_Dereference | N_Function_Call then\n                   Post_State_Seen := True;\n                   return Abandon;\n \n-               elsif Nkind_In (N, N_Expanded_Name, N_Identifier) then\n+               elsif Nkind (N) in N_Expanded_Name | N_Identifier then\n                   Ent := Entity (N);\n \n                   --  Treat an undecorated reference as OK\n@@ -4279,10 +4277,10 @@ package body Sem_Util is\n                     --  A reference to an assignable entity is considered a\n                     --  change in the post-state of a subprogram.\n \n-                    or else Ekind_In (Ent, E_Generic_In_Out_Parameter,\n-                                           E_In_Out_Parameter,\n-                                           E_Out_Parameter,\n-                                           E_Variable)\n+                    or else Ekind (Ent) in E_Generic_In_Out_Parameter\n+                                         | E_In_Out_Parameter\n+                                         | E_Out_Parameter\n+                                         | E_Variable\n \n                     --  The reference may be modified through a dereference\n \n@@ -4340,8 +4338,7 @@ package body Sem_Util is\n \n          --  Examine the expression of a postcondition\n \n-         else pragma Assert (Nam_In (Nam, Name_Postcondition,\n-                                          Name_Refined_Post));\n+         else pragma Assert (Nam in Name_Postcondition | Name_Refined_Post);\n             Check_Expression (Expr);\n          end if;\n       end Check_Result_And_Post_State_In_Pragma;\n@@ -4415,8 +4412,8 @@ package body Sem_Util is\n \n       Prag := Pre_Post_Conditions (Items);\n       while Present (Prag) loop\n-         if Nam_In (Pragma_Name_Unmapped (Prag),\n-                    Name_Postcondition, Name_Refined_Post)\n+         if Pragma_Name_Unmapped (Prag)\n+              in Name_Postcondition | Name_Refined_Post\n            and then not Error_Posted (Prag)\n          then\n             Post_Prag := Prag;\n@@ -4443,7 +4440,7 @@ package body Sem_Util is\n \n       --  Do not emit any errors if the subprogram is not a function\n \n-      if not Ekind_In (Spec_Id, E_Function, E_Generic_Function) then\n+      if Ekind (Spec_Id) not in E_Function | E_Generic_Function then\n          null;\n \n       --  Regardless of whether the function has postconditions or contract\n@@ -4576,8 +4573,8 @@ package body Sem_Util is\n          if Present (Decls) then\n             Decl := First (Decls);\n             while Present (Decl) loop\n-               if Nkind_In (Decl, N_Generic_Package_Declaration,\n-                                  N_Package_Declaration)\n+               if Nkind (Decl) in N_Generic_Package_Declaration\n+                                | N_Package_Declaration\n                then\n                   Check_Package (Decl);\n                end if;\n@@ -4620,10 +4617,10 @@ package body Sem_Util is\n       --  An entry, protected, subprogram, or task body may declare a nested\n       --  package.\n \n-      elsif Nkind_In (Context, N_Entry_Body,\n-                               N_Protected_Body,\n-                               N_Subprogram_Body,\n-                               N_Task_Body)\n+      elsif Nkind (Context) in N_Entry_Body\n+                             | N_Protected_Body\n+                             | N_Subprogram_Body\n+                             | N_Task_Body\n       then\n          --  Do not verify proper state refinement when the body is subject to\n          --  pragma SPARK_Mode Off because this disables the requirement for\n@@ -4648,8 +4645,8 @@ package body Sem_Util is\n \n       --  A library level [generic] package may declare a nested package\n \n-      elsif Nkind_In (Context, N_Generic_Package_Declaration,\n-                               N_Package_Declaration)\n+      elsif Nkind (Context) in\n+              N_Generic_Package_Declaration | N_Package_Declaration\n         and then Is_Main_Unit\n       then\n          Check_Package (Context);\n@@ -4702,7 +4699,7 @@ package body Sem_Util is\n \n          --  For indexed and selected components, recursively check the prefix\n \n-         if Nkind_In (Obj, N_Indexed_Component, N_Selected_Component) then\n+         if Nkind (Obj) in N_Indexed_Component | N_Selected_Component then\n             return Enclosing_Protected_Type (Prefix (Obj));\n \n          --  The object does not denote a protected component\n@@ -4806,9 +4803,8 @@ package body Sem_Util is\n                Constit_Id := Entity_Of (Constit);\n \n                if Present (Constit_Id)\n-                 and then Ekind_In (Constit_Id, E_Abstract_State,\n-                                                E_Constant,\n-                                                E_Variable)\n+                 and then Ekind (Constit_Id) in\n+                            E_Abstract_State | E_Constant | E_Variable\n                then\n                   Remove (States, Constit_Id);\n                end if;\n@@ -5080,7 +5076,7 @@ package body Sem_Util is\n             elsif Ekind (Item_Id) = E_Abstract_State then\n                Append_New_Elmt (Item_Id, States);\n \n-            elsif Ekind_In (Item_Id, E_Constant, E_Variable)\n+            elsif Ekind (Item_Id) in E_Constant | E_Variable\n               and then Is_Visible_Object (Item_Id)\n             then\n                Append_New_Elmt (Item_Id, States);\n@@ -6670,7 +6666,7 @@ package body Sem_Util is\n    function Denotes_Same_Prefix (A1, A2 : Node_Id) return Boolean is\n    begin\n       if Is_Entity_Name (A1) then\n-         if Nkind_In (A2, N_Selected_Component, N_Indexed_Component)\n+         if Nkind (A2) in N_Selected_Component | N_Indexed_Component\n            and then not Is_Access_Type (Etype (A1))\n          then\n             return Denotes_Same_Object (A1, Prefix (A2))\n@@ -6682,9 +6678,9 @@ package body Sem_Util is\n       elsif Is_Entity_Name (A2) then\n          return Denotes_Same_Prefix (A1 => A2, A2 => A1);\n \n-      elsif Nkind_In (A1, N_Selected_Component, N_Indexed_Component, N_Slice)\n+      elsif Nkind (A1) in N_Selected_Component | N_Indexed_Component | N_Slice\n               and then\n-            Nkind_In (A2, N_Selected_Component, N_Indexed_Component, N_Slice)\n+            Nkind (A2) in N_Selected_Component | N_Indexed_Component | N_Slice\n       then\n          declare\n             Root1, Root2   : Node_Id;\n@@ -6693,8 +6689,8 @@ package body Sem_Util is\n          begin\n             Root1 := Prefix (A1);\n             while not Is_Entity_Name (Root1) loop\n-               if not Nkind_In\n-                 (Root1, N_Selected_Component, N_Indexed_Component)\n+               if Nkind (Root1) not in\n+                    N_Selected_Component | N_Indexed_Component\n                then\n                   return False;\n                else\n@@ -6706,8 +6702,8 @@ package body Sem_Util is\n \n             Root2 := Prefix (A2);\n             while not Is_Entity_Name (Root2) loop\n-               if not Nkind_In (Root2, N_Selected_Component,\n-                                       N_Indexed_Component)\n+               if Nkind (Root2) not in\n+                    N_Selected_Component | N_Indexed_Component\n                then\n                   return False;\n                else\n@@ -6817,19 +6813,19 @@ package body Sem_Util is\n    --  Start of processing for Designate_Same_Unit\n \n    begin\n-      if Nkind_In (K1, N_Identifier, N_Defining_Identifier)\n+      if K1 in N_Identifier | N_Defining_Identifier\n            and then\n-         Nkind_In (K2, N_Identifier, N_Defining_Identifier)\n+         K2 in N_Identifier | N_Defining_Identifier\n       then\n          return Chars (Name1) = Chars (Name2);\n \n-      elsif Nkind_In (K1, N_Expanded_Name,\n-                          N_Selected_Component,\n-                          N_Defining_Program_Unit_Name)\n-              and then\n-            Nkind_In (K2, N_Expanded_Name,\n-                          N_Selected_Component,\n-                          N_Defining_Program_Unit_Name)\n+      elsif K1 in N_Expanded_Name\n+                | N_Selected_Component\n+                | N_Defining_Program_Unit_Name\n+        and then\n+            K2 in N_Expanded_Name\n+                | N_Selected_Component\n+                | N_Defining_Program_Unit_Name\n       then\n          return\n            (Chars (Select_Node (Name1)) = Chars (Select_Node (Name2)))\n@@ -6925,7 +6921,7 @@ package body Sem_Util is\n          end if;\n \n          if (Is_Formal (E)\n-              or else Ekind_In (E, E_Variable, E_Constant))\n+              or else Ekind (E) in E_Variable | E_Constant)\n            and then Present (Get_Accessibility (E))\n          then\n             return New_Occurrence_Of (Get_Accessibility (E), Loc);\n@@ -6935,7 +6931,7 @@ package body Sem_Util is\n       --  Handle a constant-folded conditional expression by avoiding use of\n       --  the original node.\n \n-      if Nkind_In (Expr, N_Case_Expression, N_If_Expression) then\n+      if Nkind (Expr) in N_Case_Expression | N_If_Expression then\n          Expr := N;\n       end if;\n \n@@ -7254,13 +7250,13 @@ package body Sem_Util is\n    begin\n       Par := Parent (N);\n       while Present (Par) loop\n-         if Nkind_In (Par, N_Package_Body, N_Subprogram_Body) then\n+         if Nkind (Par) in N_Package_Body | N_Subprogram_Body then\n             Spec_Id := Corresponding_Spec (Par);\n \n             if Present (Spec_Id)\n-              and then Nkind_In (Unit_Declaration_Node (Spec_Id),\n-                                 N_Generic_Package_Declaration,\n-                                 N_Generic_Subprogram_Declaration)\n+              and then Nkind (Unit_Declaration_Node (Spec_Id)) in\n+                         N_Generic_Package_Declaration |\n+                         N_Generic_Subprogram_Declaration\n             then\n                return Par;\n             end if;\n@@ -7284,19 +7280,19 @@ package body Sem_Util is\n    begin\n       Par := Parent (N);\n       while Present (Par) loop\n-         if Nkind_In (Par, N_Generic_Package_Declaration,\n-                           N_Generic_Subprogram_Declaration)\n+         if Nkind (Par) in N_Generic_Package_Declaration\n+                         | N_Generic_Subprogram_Declaration\n          then\n             return Par;\n \n-         elsif Nkind_In (Par, N_Package_Body, N_Subprogram_Body) then\n+         elsif Nkind (Par) in N_Package_Body | N_Subprogram_Body then\n             Spec_Id := Corresponding_Spec (Par);\n \n             if Present (Spec_Id) then\n                Spec_Decl := Unit_Declaration_Node (Spec_Id);\n \n-               if Nkind_In (Spec_Decl, N_Generic_Package_Declaration,\n-                                       N_Generic_Subprogram_Declaration)\n+               if Nkind (Spec_Decl) in N_Generic_Package_Declaration\n+                                     | N_Generic_Subprogram_Declaration\n                then\n                   return Spec_Decl;\n                end if;\n@@ -7366,9 +7362,8 @@ package body Sem_Util is\n       elsif Dynamic_Scope = Empty then\n          return Empty;\n \n-      elsif Ekind_In (Dynamic_Scope, E_Generic_Package,\n-                                     E_Package,\n-                                     E_Package_Body)\n+      elsif Ekind (Dynamic_Scope) in\n+              E_Generic_Package | E_Package | E_Package_Body\n       then\n          return Dynamic_Scope;\n \n@@ -7417,10 +7412,10 @@ package body Sem_Util is\n       elsif Ekind (Dyn_Scop) = E_Subprogram_Body then\n          return Corresponding_Spec (Parent (Parent (Dyn_Scop)));\n \n-      elsif Ekind_In (Dyn_Scop, E_Block, E_Loop, E_Return_Statement) then\n+      elsif Ekind (Dyn_Scop) in E_Block | E_Loop | E_Return_Statement then\n          return Enclosing_Subprogram (Dyn_Scop);\n \n-      elsif Ekind_In (Dyn_Scop, E_Entry, E_Entry_Family) then\n+      elsif Ekind (Dyn_Scop) in E_Entry | E_Entry_Family then\n \n          --  For a task entry or entry family, return the enclosing subprogram\n          --  of the task itself.\n@@ -7442,10 +7437,10 @@ package body Sem_Util is\n       --  The scope may appear as a private type or as a private extension\n       --  whose completion is a task or protected type.\n \n-      elsif Ekind_In (Dyn_Scop, E_Limited_Private_Type,\n-                                E_Record_Type_With_Private)\n+      elsif Ekind (Dyn_Scop) in\n+              E_Limited_Private_Type | E_Record_Type_With_Private\n         and then Present (Full_View (Dyn_Scop))\n-        and then Ekind_In (Full_View (Dyn_Scop), E_Task_Type, E_Protected_Type)\n+        and then Ekind (Full_View (Dyn_Scop)) in E_Task_Type | E_Protected_Type\n       then\n          return Get_Task_Body_Procedure (Full_View (Dyn_Scop));\n \n@@ -7503,11 +7498,11 @@ package body Sem_Util is\n    --  Start of processing for End_Keyword_Location\n \n    begin\n-      if Nkind_In (N, N_Block_Statement,\n-                      N_Entry_Body,\n-                      N_Package_Body,\n-                      N_Subprogram_Body,\n-                      N_Task_Body)\n+      if Nkind (N) in N_Block_Statement\n+                    | N_Entry_Body\n+                    | N_Package_Body\n+                    | N_Subprogram_Body\n+                    | N_Task_Body\n       then\n          Owner := Handled_Statement_Sequence (N);\n \n@@ -7517,13 +7512,12 @@ package body Sem_Util is\n       elsif Nkind (N) = N_Protected_Body then\n          Owner := N;\n \n-      elsif Nkind_In (N, N_Protected_Type_Declaration,\n-                         N_Single_Protected_Declaration)\n+      elsif Nkind (N) in N_Protected_Type_Declaration\n+                       | N_Single_Protected_Declaration\n       then\n          Owner := Protected_Definition (N);\n \n-      elsif Nkind_In (N, N_Single_Task_Declaration,\n-                         N_Task_Type_Declaration)\n+      elsif Nkind (N) in N_Single_Task_Declaration | N_Task_Type_Declaration\n       then\n          Owner := Task_Definition (N);\n \n@@ -7779,7 +7773,7 @@ package body Sem_Util is\n                --  Avoid cascaded messages with duplicate components in\n                --  derived types.\n \n-               if Ekind_In (E, E_Component, E_Discriminant) then\n+               if Ekind (E) in E_Component | E_Discriminant then\n                   return;\n                end if;\n             end if;\n@@ -7814,7 +7808,7 @@ package body Sem_Util is\n       --  of inheriting components in a derived record definition. Preserve\n       --  their Ekind and Etype.\n \n-      if Ekind_In (Def_Id, E_Discriminant, E_Component) then\n+      if Ekind (Def_Id) in E_Discriminant | E_Component then\n          null;\n \n       --  If a type is already set, leave it alone (happens when a type\n@@ -7837,7 +7831,7 @@ package body Sem_Util is\n       --  Unless the Itype is for a record type with a corresponding remote\n       --  type (what is that about, it was not commented ???)\n \n-      if Ekind_In (Def_Id, E_Discriminant, E_Component)\n+      if Ekind (Def_Id) in E_Discriminant | E_Component\n         or else\n           ((not Is_Record_Type (Def_Id)\n              or else No (Corresponding_Remote_Type (Def_Id)))\n@@ -8189,8 +8183,7 @@ package body Sem_Util is\n \n             elsif Comes_From_Source (Decl)\n               or else\n-                (Nkind_In (Decl, N_Subprogram_Body,\n-                                 N_Subprogram_Declaration)\n+                (Nkind (Decl) in N_Subprogram_Body | N_Subprogram_Declaration\n                   and then Is_Expression_Function (Defining_Entity (Decl)))\n             then\n                exit;\n@@ -8262,7 +8255,7 @@ package body Sem_Util is\n       Call_Nam : Node_Id;\n \n    begin\n-      if Nkind_In (Context, N_Indexed_Component, N_Selected_Component)\n+      if Nkind (Context) in N_Indexed_Component | N_Selected_Component\n         and then N = Prefix (Context)\n       then\n          Find_Actual (Context, Formal, Call);\n@@ -8273,9 +8266,9 @@ package body Sem_Util is\n       then\n          Call := Parent (Context);\n \n-      elsif Nkind_In (Context, N_Entry_Call_Statement,\n-                               N_Function_Call,\n-                               N_Procedure_Call_Statement)\n+      elsif Nkind (Context) in N_Entry_Call_Statement\n+                             | N_Function_Call\n+                             | N_Procedure_Call_Statement\n       then\n          Call := Context;\n \n@@ -8289,9 +8282,9 @@ package body Sem_Util is\n       --  we exclude overloaded calls, since we don't know enough to be sure\n       --  of giving the right answer in this case.\n \n-      if Nkind_In (Call, N_Entry_Call_Statement,\n-                         N_Function_Call,\n-                         N_Procedure_Call_Statement)\n+      if Nkind (Call) in N_Entry_Call_Statement\n+                       | N_Function_Call\n+                       | N_Procedure_Call_Statement\n       then\n          Call_Nam := Name (Call);\n \n@@ -8717,8 +8710,7 @@ package body Sem_Util is\n \n             --  Check for components\n \n-            elsif\n-              Nkind_In (Expr, N_Selected_Component, N_Indexed_Component)\n+            elsif Nkind (Expr) in N_Selected_Component | N_Indexed_Component\n             then\n                Expr := Prefix (Expr);\n                Off := True;\n@@ -9069,7 +9061,7 @@ package body Sem_Util is\n \n          --  Single global item declaration (only input items)\n \n-         elsif Nkind_In (List, N_Expanded_Name, N_Identifier) then\n+         elsif Nkind (List) in N_Expanded_Name | N_Identifier then\n             if Global_Mode = Name_Input then\n                return List;\n             else\n@@ -9123,10 +9115,10 @@ package body Sem_Util is\n    --  Start of processing for First_Global\n \n    begin\n-      pragma Assert (Nam_In (Global_Mode, Name_In_Out,\n-                                          Name_Input,\n-                                          Name_Output,\n-                                          Name_Proof_In));\n+      pragma Assert (Global_Mode in Name_In_Out\n+                                  | Name_Input\n+                                  | Name_Output\n+                                  | Name_Proof_In);\n \n       --  Retrieve the suitable pragma Global or Refined_Global. In the second\n       --  case, it can only be located on the body entity.\n@@ -9175,7 +9167,7 @@ package body Sem_Util is\n \n    function Fix_Msg (Id : Entity_Id; Msg : String) return String is\n       Is_Task   : constant Boolean :=\n-                    Ekind_In (Id, E_Task_Body, E_Task_Type)\n+                    Ekind (Id) in E_Task_Body | E_Task_Type\n                       or else Is_Single_Task_Object (Id);\n       Msg_Last  : constant Natural := Msg'Last;\n       Msg_Index : Natural;\n@@ -10218,12 +10210,12 @@ package body Sem_Util is\n       pragma Assert\n         (Is_Type (Typ)\n          and then\n-         Nam_In (Nam, Name_Element,\n-                      Name_First,\n-                      Name_Has_Element,\n-                      Name_Last,\n-                      Name_Next,\n-                      Name_Previous));\n+           Nam in Name_Element\n+                | Name_First\n+                | Name_Has_Element\n+                | Name_Last\n+                | Name_Next\n+                | Name_Previous);\n \n       Funcs : constant Node_Id := Find_Value_Of_Aspect (Typ, Aspect_Iterable);\n       Assoc : Node_Id;\n@@ -10526,14 +10518,14 @@ package body Sem_Util is\n       --  Strip the subprogram call\n \n       loop\n-         if Nkind_In (Subp, N_Explicit_Dereference,\n-                            N_Indexed_Component,\n-                            N_Selected_Component)\n+         if Nkind (Subp) in N_Explicit_Dereference\n+                          | N_Indexed_Component\n+                          | N_Selected_Component\n          then\n             Subp := Prefix (Subp);\n \n-         elsif Nkind_In (Subp, N_Type_Conversion,\n-                               N_Unchecked_Type_Conversion)\n+         elsif Nkind (Subp) in N_Type_Conversion\n+                             | N_Unchecked_Type_Conversion\n          then\n             Subp := Expression (Subp);\n \n@@ -10667,14 +10659,14 @@ package body Sem_Util is\n             UFull_Typ := Underlying_Full_View (Full_Typ);\n \n             if Present (UFull_Typ)\n-              and then Ekind_In (UFull_Typ, E_Protected_Type, E_Task_Type)\n+              and then Ekind (UFull_Typ) in E_Protected_Type | E_Task_Type\n             then\n                CRec_Typ := Corresponding_Record_Type (UFull_Typ);\n             end if;\n \n          else\n             if Present (Full_Typ)\n-              and then Ekind_In (Full_Typ, E_Protected_Type, E_Task_Type)\n+              and then Ekind (Full_Typ) in E_Protected_Type | E_Task_Type\n             then\n                CRec_Typ := Corresponding_Record_Type (Full_Typ);\n             end if;\n@@ -11069,15 +11061,15 @@ package body Sem_Util is\n \n    function Has_Declarations (N : Node_Id) return Boolean is\n    begin\n-      return Nkind_In (Nkind (N), N_Accept_Statement,\n-                                  N_Block_Statement,\n-                                  N_Compilation_Unit_Aux,\n-                                  N_Entry_Body,\n-                                  N_Package_Body,\n-                                  N_Protected_Body,\n-                                  N_Subprogram_Body,\n-                                  N_Task_Body,\n-                                  N_Package_Specification);\n+      return Nkind (N) in N_Accept_Statement\n+                        | N_Block_Statement\n+                        | N_Compilation_Unit_Aux\n+                        | N_Entry_Body\n+                        | N_Package_Body\n+                        | N_Protected_Body\n+                        | N_Subprogram_Body\n+                        | N_Task_Body\n+                        | N_Package_Specification;\n    end Has_Declarations;\n \n    ---------------------------------\n@@ -11179,7 +11171,7 @@ package body Sem_Util is\n \n       --  Inspect the return type of functions\n \n-      if Ekind_In (Subp_Id, E_Function, E_Generic_Function)\n+      if Ekind (Subp_Id) in E_Function | E_Generic_Function\n         and then Is_Effectively_Volatile (Etype (Subp_Id))\n       then\n          return True;\n@@ -11406,7 +11398,7 @@ package body Sem_Util is\n          --  Synchronous (SPARK RM 7.1.4(9)).\n \n          elsif Has_Synchronous then\n-            return Nam_In (Property, Name_Async_Readers, Name_Async_Writers);\n+            return Property in Name_Async_Readers | Name_Async_Writers;\n          end if;\n \n          return False;\n@@ -11828,12 +11820,10 @@ package body Sem_Util is\n \n       elsif Nkind (N) in N_Has_Entity then\n          return Present (Entity (N))\n-           and then Ekind_In (Entity (N), E_Variable,\n-                                          E_Constant,\n-                                          E_Enumeration_Literal,\n-                                          E_In_Parameter,\n-                                          E_Out_Parameter,\n-                                          E_In_Out_Parameter)\n+           and then\n+             Ekind (Entity (N)) in\n+               E_Variable     | E_Constant      | E_Enumeration_Literal |\n+               E_In_Parameter | E_Out_Parameter | E_In_Out_Parameter\n            and then not Is_Volatile (Entity (N));\n \n       else\n@@ -11872,7 +11862,7 @@ package body Sem_Util is\n          Node := First (L);\n \n          loop\n-            if not Nkind_In (Node, N_Null_Statement, N_Call_Marker) then\n+            if Nkind (Node) not in N_Null_Statement | N_Call_Marker then\n                return True;\n             end if;\n \n@@ -12420,14 +12410,10 @@ package body Sem_Util is\n \n    function Has_Prefix (N : Node_Id) return Boolean is\n    begin\n-      return\n-        Nkind_In (N, N_Attribute_Reference,\n-                     N_Expanded_Name,\n-                     N_Explicit_Dereference,\n-                     N_Indexed_Component,\n-                     N_Reference,\n-                     N_Selected_Component,\n-                     N_Slice);\n+      return Nkind (N) in\n+        N_Attribute_Reference | N_Expanded_Name | N_Explicit_Dereference |\n+        N_Indexed_Component   | N_Reference     | N_Selected_Component   |\n+        N_Slice;\n    end Has_Prefix;\n \n    ---------------------------\n@@ -12510,11 +12496,9 @@ package body Sem_Util is\n \n       function Denotes_Relaxed_Parameter\n         (Expr  : Node_Id;\n-         Param : Entity_Id)\n-         return Boolean\n-      is\n+         Param : Entity_Id) return Boolean is\n       begin\n-         if Nkind_In (Expr, N_Identifier, N_Expanded_Name) then\n+         if Nkind (Expr) in N_Identifier | N_Expanded_Name then\n             return Entity (Expr) = Param;\n          else\n             pragma Assert (Is_Attribute_Result (Expr));\n@@ -12805,13 +12789,9 @@ package body Sem_Util is\n \n    begin\n       pragma Assert (Relaxed_RM_Semantics);\n-      pragma Assert (Nkind_In (N, N_Null,\n-                                  N_Op_Eq,\n-                                  N_Op_Ge,\n-                                  N_Op_Gt,\n-                                  N_Op_Le,\n-                                  N_Op_Lt,\n-                                  N_Op_Ne));\n+      pragma Assert\n+        (Nkind (N) in\n+           N_Null | N_Op_Eq | N_Op_Ge | N_Op_Gt | N_Op_Le | N_Op_Lt | N_Op_Ne);\n \n       if Nkind (N) = N_Null then\n          Rewrite (N, New_Occurrence_Of (RTE (RE_Null_Address), Sloc (N)));\n@@ -13159,7 +13139,7 @@ package body Sem_Util is\n    begin\n       S := Current_Scope;\n       while Present (S) and then S /= Standard_Standard loop\n-         if Ekind_In (S, E_Function, E_Procedure)\n+         if Ekind (S) in E_Function | E_Procedure\n            and then Is_Generic_Instance (S)\n          then\n             return True;\n@@ -13187,7 +13167,7 @@ package body Sem_Util is\n    begin\n       S := Current_Scope;\n       while Present (S) and then S /= Standard_Standard loop\n-         if Ekind_In (S, E_Function, E_Procedure)\n+         if Ekind (S) in E_Function | E_Procedure\n            and then Is_Generic_Instance (S)\n          then\n             return True;\n@@ -13391,15 +13371,15 @@ package body Sem_Util is\n          if Nod = Cont then\n             return True;\n \n-         elsif Nkind_In (Nod, N_Accept_Statement,\n-                              N_Block_Statement,\n-                              N_Compilation_Unit,\n-                              N_Entry_Body,\n-                              N_Package_Body,\n-                              N_Package_Declaration,\n-                              N_Protected_Body,\n-                              N_Subprogram_Body,\n-                              N_Task_Body)\n+         elsif Nkind (Nod) in N_Accept_Statement\n+                            | N_Block_Statement\n+                            | N_Compilation_Unit\n+                            | N_Entry_Body\n+                            | N_Package_Body\n+                            | N_Package_Declaration\n+                            | N_Protected_Body\n+                            | N_Subprogram_Body\n+                            | N_Task_Body\n          then\n             return False;\n \n@@ -13564,9 +13544,9 @@ package body Sem_Util is\n             --  declaration hold the partial view and the full view is an\n             --  itype.\n \n-            elsif Nkind_In (Decl, N_Full_Type_Declaration,\n-                                  N_Private_Extension_Declaration,\n-                                  N_Private_Type_Declaration)\n+            elsif Nkind (Decl) in N_Full_Type_Declaration\n+                                | N_Private_Extension_Declaration\n+                                | N_Private_Type_Declaration\n             then\n                Match := Defining_Identifier (Decl);\n             end if;\n@@ -13983,13 +13963,12 @@ package body Sem_Util is\n          --  For a retrieval of a subcomponent of some composite object,\n          --  retrieve the ultimate entity if there is one.\n \n-         elsif Nkind_In (New_Prefix, N_Selected_Component,\n-                                     N_Indexed_Component)\n+         elsif Nkind (New_Prefix) in N_Selected_Component | N_Indexed_Component\n          then\n             Pref := Prefix (New_Prefix);\n             while Present (Pref)\n-              and then Nkind_In (Pref, N_Selected_Component,\n-                                       N_Indexed_Component)\n+              and then Nkind (Pref) in\n+                         N_Selected_Component | N_Indexed_Component\n             loop\n                Pref := Prefix (Pref);\n             end loop;\n@@ -14276,9 +14255,9 @@ package body Sem_Util is\n \n       Par := Parent (N);\n       while Present (Par)\n-        and then Nkind_In (Par, N_Case_Expression,\n-                                N_If_Expression,\n-                                N_Parameter_Association)\n+        and then Nkind (Par) in N_Case_Expression\n+                              | N_If_Expression\n+                              | N_Parameter_Association\n       loop\n          Par := Parent (Par);\n       end loop;\n@@ -14382,7 +14361,7 @@ package body Sem_Util is\n                and then Has_Aliased_Components\n                           (Designated_Type (Etype (Prefix (Obj)))));\n \n-      elsif Nkind_In (Obj, N_Unchecked_Type_Conversion, N_Type_Conversion) then\n+      elsif Nkind (Obj) in N_Unchecked_Type_Conversion | N_Type_Conversion then\n          return Is_Tagged_Type (Etype (Obj))\n            and then Is_Aliased_View (Expression (Obj));\n \n@@ -14585,21 +14564,17 @@ package body Sem_Util is\n       Context_Id : Entity_Id) return Boolean\n    is\n    begin\n-      pragma Assert (Ekind_In (Ref_Id, E_Protected_Type, E_Task_Type));\n+      pragma Assert (Ekind (Ref_Id) in E_Protected_Type | E_Task_Type);\n \n       if Is_Single_Task_Object (Context_Id) then\n          return Scope_Within_Or_Same (Etype (Context_Id), Ref_Id);\n \n       else\n-         pragma Assert (Ekind_In (Context_Id, E_Entry,\n-                                              E_Entry_Family,\n-                                              E_Function,\n-                                              E_Package,\n-                                              E_Procedure,\n-                                              E_Protected_Type,\n-                                              E_Task_Type)\n-                          or else\n-                        Is_Record_Type (Context_Id));\n+         pragma Assert\n+           (Ekind (Context_Id) in\n+              E_Entry     | E_Entry_Family   | E_Function  | E_Package |\n+              E_Procedure | E_Protected_Type | E_Task_Type\n+             or else Is_Record_Type (Context_Id));\n          return Scope_Within_Or_Same (Context_Id, Ref_Id);\n       end if;\n    end Is_CCT_Instance;\n@@ -14913,10 +14888,10 @@ package body Sem_Util is\n                elsif Nkind (Parent (Par)) = N_Object_Renaming_Declaration then\n                   return False;\n \n-               elsif Nkind_In\n-                 (Nkind (Parent (Par)), N_Function_Call,\n-                                        N_Procedure_Call_Statement,\n-                                        N_Entry_Call_Statement)\n+               elsif Nkind (Parent (Par)) in\n+                       N_Function_Call            |\n+                       N_Procedure_Call_Statement |\n+                       N_Entry_Call_Statement\n                then\n                   --  Check that the element is not part of an actual for an\n                   --  in-out parameter.\n@@ -15076,9 +15051,9 @@ package body Sem_Util is\n \n          P := Parent (N);\n          while Present (P) loop\n-            if Nkind_In (P, N_Full_Type_Declaration,\n-                            N_Private_Type_Declaration,\n-                            N_Subtype_Declaration)\n+            if Nkind (P) in N_Full_Type_Declaration\n+                          | N_Private_Type_Declaration\n+                          | N_Subtype_Declaration\n               and then Comes_From_Source (P)\n               and then Defining_Entity (P) = Typ\n             then\n@@ -15129,7 +15104,7 @@ package body Sem_Util is\n       if Is_Entity_Name (N) then\n          return Present (Entity (N))\n            and then Ekind (Entity (N)) = E_In_Parameter\n-           and then Ekind_In (Scope (Entity (N)), E_Function, E_Procedure)\n+           and then Ekind (Scope (Entity (N))) in E_Function | E_Procedure\n            and then\n              (Is_Predicate_Function (Scope (Entity (N)))\n                or else Is_Predicate_Function_M (Scope (Entity (N)))\n@@ -15306,9 +15281,8 @@ package body Sem_Util is\n    begin\n       --  Find the dereference node if any\n \n-      while Nkind_In (Deref, N_Indexed_Component,\n-                             N_Selected_Component,\n-                             N_Slice)\n+      while Nkind (Deref) in\n+              N_Indexed_Component | N_Selected_Component | N_Slice\n       loop\n          Deref := Prefix (Deref);\n       end loop;\n@@ -15344,8 +15318,8 @@ package body Sem_Util is\n             --  False (it could be a function selector in a prefix form call\n             --  occurring in an iterator specification).\n \n-            if not Ekind_In (Entity (Selector_Name (Object)), E_Component,\n-                                                              E_Discriminant)\n+            if Ekind (Entity (Selector_Name (Object))) not in\n+                 E_Component | E_Discriminant\n             then\n                return False;\n             end if;\n@@ -15511,10 +15485,10 @@ package body Sem_Util is\n    function Is_Dereferenced (N : Node_Id) return Boolean is\n       P : constant Node_Id := Parent (N);\n    begin\n-      return Nkind_In (P, N_Selected_Component,\n-                          N_Explicit_Dereference,\n-                          N_Indexed_Component,\n-                          N_Slice)\n+      return Nkind (P) in N_Selected_Component\n+                        | N_Explicit_Dereference\n+                        | N_Indexed_Component\n+                        | N_Slice\n         and then Prefix (P) = N;\n    end Is_Dereferenced;\n \n@@ -15707,7 +15681,7 @@ package body Sem_Util is\n          return Is_Object (Entity (N))\n            and then Is_Effectively_Volatile (Entity (N));\n \n-      elsif Nkind_In (N, N_Indexed_Component, N_Slice) then\n+      elsif Nkind (N) in N_Indexed_Component | N_Slice then\n          return Is_Effectively_Volatile_Object (Prefix (N));\n \n       elsif Nkind (N) = N_Selected_Component then\n@@ -15716,9 +15690,9 @@ package body Sem_Util is\n              or else\n            Is_Effectively_Volatile_Object (Selector_Name (N));\n \n-      elsif Nkind_In (N, N_Qualified_Expression,\n-                         N_Unchecked_Type_Conversion,\n-                         N_Type_Conversion)\n+      elsif Nkind (N) in N_Qualified_Expression\n+                       | N_Unchecked_Type_Conversion\n+                       | N_Type_Conversion\n       then\n          return Is_Effectively_Volatile_Object (Expression (N));\n \n@@ -15769,7 +15743,7 @@ package body Sem_Util is\n \n    function Is_Expression_Function (Subp : Entity_Id) return Boolean is\n    begin\n-      if Ekind_In (Subp, E_Function, E_Subprogram_Body) then\n+      if Ekind (Subp) in E_Function | E_Subprogram_Body then\n          return\n            Nkind (Original_Node (Unit_Declaration_Node (Subp))) =\n              N_Expression_Function;\n@@ -15864,19 +15838,19 @@ package body Sem_Util is\n       --  A qualified expression or a type conversion is an EVF expression when\n       --  its operand is an EVF expression.\n \n-      elsif Nkind_In (N, N_Qualified_Expression,\n-                         N_Unchecked_Type_Conversion,\n-                         N_Type_Conversion)\n+      elsif Nkind (N) in N_Qualified_Expression\n+                       | N_Unchecked_Type_Conversion\n+                       | N_Type_Conversion\n       then\n          return Is_EVF_Expression (Expression (N));\n \n       --  Attributes 'Loop_Entry, 'Old, and 'Update are EVF expressions when\n       --  their prefix denotes an EVF expression.\n \n       elsif Nkind (N) = N_Attribute_Reference\n-        and then Nam_In (Attribute_Name (N), Name_Loop_Entry,\n-                                             Name_Old,\n-                                             Name_Update)\n+        and then Attribute_Name (N) in Name_Loop_Entry\n+                                     | Name_Old\n+                                     | Name_Update\n       then\n          return Is_EVF_Expression (Prefix (N));\n       end if;\n@@ -16202,14 +16176,14 @@ package body Sem_Util is\n    begin\n       --  Package/subprogram body\n \n-      if Nkind_In (Decl, N_Package_Body, N_Subprogram_Body)\n+      if Nkind (Decl) in N_Package_Body | N_Subprogram_Body\n         and then Present (Corresponding_Spec (Decl))\n       then\n          Spec_Decl := Unit_Declaration_Node (Corresponding_Spec (Decl));\n \n       --  Package/subprogram body stub\n \n-      elsif Nkind_In (Decl, N_Package_Body_Stub, N_Subprogram_Body_Stub)\n+      elsif Nkind (Decl) in N_Package_Body_Stub | N_Subprogram_Body_Stub\n         and then Present (Corresponding_Spec_Of_Stub (Decl))\n       then\n          Spec_Decl :=\n@@ -16227,8 +16201,8 @@ package body Sem_Util is\n       --  calls.\n \n       return\n-        Nkind_In (Spec_Decl, N_Generic_Package_Declaration,\n-                             N_Generic_Subprogram_Declaration);\n+        Nkind (Spec_Decl) in N_Generic_Package_Declaration\n+                           | N_Generic_Subprogram_Declaration;\n    end Is_Generic_Declaration_Or_Body;\n \n    ---------------------------\n@@ -16387,8 +16361,7 @@ package body Sem_Util is\n          --  a predefined unit, i.e the one that declares iterator interfaces.\n \n          return\n-           Nam_In (Chars (Iter_Typ), Name_Forward_Iterator,\n-                                     Name_Reversible_Iterator)\n+           Chars (Iter_Typ) in Name_Forward_Iterator | Name_Reversible_Iterator\n              and then In_Predefined_Unit (Root_Type (Iter_Typ));\n       end Denotes_Iterator;\n \n@@ -16464,7 +16437,7 @@ package body Sem_Util is\n \n       --  Case of prefix of indexed or selected component or slice\n \n-      elsif Nkind_In (P, N_Indexed_Component, N_Selected_Component, N_Slice)\n+      elsif Nkind (P) in N_Indexed_Component | N_Selected_Component | N_Slice\n         and then N = Prefix (P)\n       then\n          --  Here we have the case where the parent P is N.Q or N(Q .. R).\n@@ -16542,7 +16515,7 @@ package body Sem_Util is\n             Ent : constant Entity_Id := Entity (Expr);\n             Sub : constant Entity_Id := Enclosing_Subprogram (Ent);\n          begin\n-            if not Ekind_In (Ent, E_Variable, E_In_Out_Parameter) then\n+            if Ekind (Ent) not in E_Variable | E_In_Out_Parameter then\n                return False;\n             else\n                return Present (Sub) and then Sub = Current_Subprogram;\n@@ -16572,8 +16545,7 @@ package body Sem_Util is\n          --  Attributes 'Input, 'Old and 'Result produce objects\n \n          when N_Attribute_Reference =>\n-            return\n-              Nam_In (Attribute_Name (N), Name_Input, Name_Old, Name_Result);\n+            return Attribute_Name (N) in Name_Input | Name_Old | Name_Result;\n \n          when N_Selected_Component =>\n             return\n@@ -17022,7 +16994,7 @@ package body Sem_Util is\n                         if Ekind (Id) = E_Discriminant then\n                            null;\n \n-                        elsif Ekind_In (Id, E_Constant, E_In_Parameter)\n+                        elsif Ekind (Id) in E_Constant | E_In_Parameter\n                           and then Present (Discriminal_Link (Id))\n                         then\n                            null;\n@@ -17161,10 +17133,10 @@ package body Sem_Util is\n \n             when N_Attribute_Reference =>\n                return\n-                 Nam_In (Attribute_Name (N), Name_Loop_Entry,\n-                                             Name_Old,\n-                                             Name_Priority,\n-                                             Name_Result)\n+                 Attribute_Name (N) in Name_Loop_Entry\n+                                     | Name_Old\n+                                     | Name_Priority\n+                                     | Name_Result\n                    or else Is_Function_Attribute_Name (Attribute_Name (N));\n \n             when N_Selected_Component =>\n@@ -17180,8 +17152,8 @@ package body Sem_Util is\n             --  names.\n \n             when N_Explicit_Dereference =>\n-               return not Nkind_In (Original_Node (N), N_Case_Expression,\n-                                                       N_If_Expression);\n+               return Nkind (Original_Node (N)) not in\n+                        N_Case_Expression | N_If_Expression;\n \n             --  A view conversion of a tagged object is an object reference\n \n@@ -17280,7 +17252,7 @@ package body Sem_Util is\n       --  expansion of a packed array aggregate).\n \n       elsif Nkind (AV) = N_Unchecked_Type_Conversion then\n-         if Nkind_In (Original_Node (AV), N_Function_Call, N_Aggregate) then\n+         if Nkind (Original_Node (AV)) in N_Function_Call | N_Aggregate then\n             return False;\n \n          elsif Comes_From_Source (AV)\n@@ -17376,10 +17348,8 @@ package body Sem_Util is\n                 and then Is_Protected_Type (Etype (Pref))\n                 and then Is_Entity_Name (Subp)\n                 and then Present (Entity (Subp))\n-                and then Ekind_In (Entity (Subp), E_Entry,\n-                                                  E_Entry_Family,\n-                                                  E_Function,\n-                                                  E_Procedure);\n+                and then Ekind (Entity (Subp)) in\n+                           E_Entry | E_Entry_Family | E_Function | E_Procedure;\n          else\n             return False;\n          end if;\n@@ -17424,7 +17394,7 @@ package body Sem_Util is\n \n          Func_Id := Id;\n          while Present (Func_Id) and then Func_Id /= Standard_Standard loop\n-            if Ekind_In (Func_Id, E_Function, E_Generic_Function) then\n+            if Ekind (Func_Id) in E_Function | E_Generic_Function then\n                return Is_Volatile_Function (Func_Id);\n             end if;\n \n@@ -17504,11 +17474,12 @@ package body Sem_Util is\n       --  The volatile object appears as the prefix of a name occurring in a\n       --  non-interfering context.\n \n-      elsif Nkind_In (Context, N_Attribute_Reference,\n-                      N_Explicit_Dereference,\n-                      N_Indexed_Component,\n-                      N_Selected_Component,\n-                      N_Slice)\n+      elsif Nkind (Context) in\n+              N_Attribute_Reference  |\n+              N_Explicit_Dereference |\n+              N_Indexed_Component    |\n+              N_Selected_Component   |\n+              N_Slice\n         and then Prefix (Context) = Obj_Ref\n         and then Is_OK_Volatile_Context\n                    (Context => Parent (Context),\n@@ -17522,26 +17493,26 @@ package body Sem_Util is\n \n       elsif Nkind (Context) = N_Attribute_Reference\n         and then Prefix (Context) = Obj_Ref\n-        and then Nam_In (Attribute_Name (Context), Name_Address,\n-                                                   Name_Alignment,\n-                                                   Name_Component_Size,\n-                                                   Name_First,\n-                                                   Name_First_Bit,\n-                                                   Name_Last,\n-                                                   Name_Last_Bit,\n-                                                   Name_Length,\n-                                                   Name_Position,\n-                                                   Name_Size,\n-                                                   Name_Storage_Size)\n+        and then Attribute_Name (Context) in Name_Address\n+                                           | Name_Alignment\n+                                           | Name_Component_Size\n+                                           | Name_First\n+                                           | Name_First_Bit\n+                                           | Name_Last\n+                                           | Name_Last_Bit\n+                                           | Name_Length\n+                                           | Name_Position\n+                                           | Name_Size\n+                                           | Name_Storage_Size\n       then\n          return True;\n \n       --  The volatile object appears as the expression of a type conversion\n       --  occurring in a non-interfering context.\n \n-      elsif Nkind_In (Context, N_Qualified_Expression,\n-                               N_Type_Conversion,\n-                               N_Unchecked_Type_Conversion)\n+      elsif Nkind (Context) in N_Qualified_Expression\n+                             | N_Type_Conversion\n+                             | N_Unchecked_Type_Conversion\n         and then Expression (Context) = Obj_Ref\n         and then Is_OK_Volatile_Context\n                    (Context => Parent (Context),\n@@ -17857,10 +17828,10 @@ package body Sem_Util is\n          elsif Nkind (Par) = N_Case_Expression then\n             return Expr /= Expression (Par);\n \n-         elsif Nkind_In (Par, N_And_Then, N_Or_Else) then\n+         elsif Nkind (Par) in N_And_Then | N_Or_Else then\n             return Expr = Right_Opnd (Par);\n \n-         elsif Nkind_In (Par, N_In, N_Not_In) then\n+         elsif Nkind (Par) in N_In | N_Not_In then\n \n             --  If the membership includes several alternatives, only the first\n             --  is definitely evaluated.\n@@ -18056,7 +18027,7 @@ package body Sem_Util is\n            TSS_Name_Type\n              (Name_Buffer (Name_Len - TSS_Name'Length + 1 .. Name_Len));\n \n-         if Nam_In (Chars (E), Name_uAssign, Name_uSize)\n+         if Chars (E) in Name_uAssign | Name_uSize\n            or else\n              (Chars (E) = Name_Op_Eq\n                and then Etype (First_Formal (E)) = Etype (Last_Formal (E)))\n@@ -18087,12 +18058,12 @@ package body Sem_Util is\n       --  these primitives.\n \n       return (Ada_Version >= Ada_2005 or else not Tagged_Type_Expansion)\n-        and then Nam_In (Chars (E), Name_uDisp_Asynchronous_Select,\n-                                    Name_uDisp_Conditional_Select,\n-                                    Name_uDisp_Get_Prim_Op_Kind,\n-                                    Name_uDisp_Get_Task_Id,\n-                                    Name_uDisp_Requeue,\n-                                    Name_uDisp_Timed_Select);\n+        and then Chars (E) in Name_uDisp_Asynchronous_Select\n+                            | Name_uDisp_Conditional_Select\n+                            | Name_uDisp_Get_Prim_Op_Kind\n+                            | Name_uDisp_Get_Task_Id\n+                            | Name_uDisp_Requeue\n+                            | Name_uDisp_Timed_Select;\n    end Is_Predefined_Interface_Primitive;\n \n    ---------------------------------------\n@@ -18120,7 +18091,7 @@ package body Sem_Util is\n            TSS_Name_Type\n              (Name_Buffer (Name_Len - TSS_Name'Length + 1 .. Name_Len));\n \n-         if Nam_In (Chars (E), Name_uSize, Name_uAssign)\n+         if Chars (E) in Name_uSize | Name_uAssign\n            or else\n              (Chars (E) = Name_Op_Eq\n                and then Etype (First_Formal (E)) = Etype (Last_Formal (E)))\n@@ -18250,7 +18221,7 @@ package body Sem_Util is\n    begin\n       --  Aggregates\n \n-      if Nkind_In (N, N_Aggregate, N_Extension_Aggregate) then\n+      if Nkind (N) in N_Aggregate | N_Extension_Aggregate then\n          return Is_Preelaborable_Aggregate (N);\n \n       --  Attributes are allowed in general, even if their prefix is a formal\n@@ -18275,7 +18246,7 @@ package body Sem_Util is\n         and then Present (Entity (N))\n         and then\n           (Ekind (Entity (N)) = E_Discriminant\n-            or else (Ekind_In (Entity (N), E_Constant, E_In_Parameter)\n+            or else (Ekind (Entity (N)) in E_Constant | E_In_Parameter\n                       and then Present (Discriminal_Link (Entity (N)))))\n       then\n          return True;\n@@ -18609,12 +18580,12 @@ package body Sem_Util is\n    begin\n       if not Is_List_Member (N) then\n          declare\n-            P : constant Node_Id   := Parent (N);\n+            P : constant Node_Id := Parent (N);\n          begin\n-            return Nkind_In (P, N_Expanded_Name,\n-                                N_Generic_Association,\n-                                N_Parameter_Association,\n-                                N_Selected_Component)\n+            return Nkind (P) in N_Expanded_Name\n+                              | N_Generic_Association\n+                              | N_Parameter_Association\n+                              | N_Selected_Component\n               and then Selector_Name (P) = N;\n          end;\n \n@@ -18649,7 +18620,7 @@ package body Sem_Util is\n    function Is_Single_Concurrent_Type (Id : Entity_Id) return Boolean is\n    begin\n       return\n-        Ekind_In (Id, E_Protected_Type, E_Task_Type)\n+        Ekind (Id) in E_Protected_Type | E_Task_Type\n           and then Is_Single_Concurrent_Type_Declaration\n                      (Declaration_Node (Id));\n    end Is_Single_Concurrent_Type;\n@@ -18662,8 +18633,8 @@ package body Sem_Util is\n      (N : Node_Id) return Boolean\n    is\n    begin\n-      return Nkind_In (Original_Node (N), N_Single_Protected_Declaration,\n-                                          N_Single_Task_Declaration);\n+      return Nkind (Original_Node (N)) in\n+               N_Single_Protected_Declaration | N_Single_Task_Declaration;\n    end Is_Single_Concurrent_Type_Declaration;\n \n    ---------------------------------------------\n@@ -18735,9 +18706,8 @@ package body Sem_Util is\n            and then Is_Aliased (Entity (P_Ult))\n            and then Is_Formal  (Entity (P_Ult))\n            and then Scope (Entity (P_Ult)) = Scop\n-           and then Ekind_In (Scop, E_Function,\n-                                    E_Operator,\n-                                    E_Subprogram_Type)\n+           and then Ekind (Scop) in\n+                      E_Function | E_Operator | E_Subprogram_Type\n            and then Needs_Result_Accessibility_Level (Scop);\n       end;\n    end Is_Special_Aliased_Formal_Access;\n@@ -18852,7 +18822,7 @@ package body Sem_Util is\n    begin\n       R := Get_Referenced_Object (N);\n \n-      while Nkind_In (R, N_Indexed_Component, N_Selected_Component, N_Slice)\n+      while Nkind (R) in N_Indexed_Component | N_Selected_Component | N_Slice\n       loop\n          R := Get_Referenced_Object (Prefix (R));\n \n@@ -19551,7 +19521,7 @@ package body Sem_Util is\n \n    function Is_Volatile_Function (Func_Id : Entity_Id) return Boolean is\n    begin\n-      pragma Assert (Ekind_In (Func_Id, E_Function, E_Generic_Function));\n+      pragma Assert (Ekind (Func_Id) in E_Function | E_Generic_Function);\n \n       --  A function declared within a protected type is volatile\n \n@@ -19682,8 +19652,8 @@ package body Sem_Util is\n    begin\n       pragma Assert (Is_Itype (Id));\n       return Present (Parent (Id))\n-        and then Nkind_In (Parent (Id), N_Full_Type_Declaration,\n-                                        N_Subtype_Declaration)\n+        and then Nkind (Parent (Id)) in\n+                   N_Full_Type_Declaration | N_Subtype_Declaration\n         and then Defining_Entity (Parent (Id)) = Id;\n    end Itype_Has_Declaration;\n \n@@ -20094,9 +20064,8 @@ package body Sem_Util is\n       --    Obj := new ...'(new Coextension ...);\n \n       if Nkind (Context_Nod) = N_Assignment_Statement then\n-         Is_Dynamic :=\n-           Nkind_In (Expression (Context_Nod), N_Allocator,\n-                                               N_Qualified_Expression);\n+         Is_Dynamic := Nkind (Expression (Context_Nod)) in\n+                         N_Allocator | N_Qualified_Expression;\n \n       --  An allocator that appears within the expression of a simple return\n       --  statement is treated as a potentially dynamic coextension when the\n@@ -20106,10 +20075,8 @@ package body Sem_Util is\n       --    return new ...'(new Coextension ...);\n \n       elsif Nkind (Context_Nod) = N_Simple_Return_Statement then\n-         Is_Dynamic :=\n-           Nkind_In (Expression (Context_Nod), N_Aggregate,\n-                                               N_Allocator,\n-                                               N_Qualified_Expression);\n+         Is_Dynamic := Nkind (Expression (Context_Nod)) in\n+                         N_Aggregate | N_Allocator | N_Qualified_Expression;\n \n       --  An alloctor that appears within the initialization expression of an\n       --  object declaration is considered a potentially dynamic coextension\n@@ -20125,10 +20092,8 @@ package body Sem_Util is\n       --    return Obj : ... := (new Coextension ...);\n \n       elsif Nkind (Context_Nod) = N_Object_Declaration then\n-         Is_Dynamic :=\n-           Nkind_In (Root_Nod, N_Allocator, N_Qualified_Expression)\n-             or else\n-               Nkind (Parent (Context_Nod)) = N_Extended_Return_Statement;\n+         Is_Dynamic := Nkind (Root_Nod) in N_Allocator | N_Qualified_Expression\n+           or else Nkind (Parent (Context_Nod)) = N_Extended_Return_Statement;\n \n       --  This routine should not be called with constructs that cannot contain\n       --  coextensions.\n@@ -20294,12 +20259,12 @@ package body Sem_Util is\n             --  suppressed. As a result the elaboration checks of the call must\n             --  be disabled in order to preserve this dependency.\n \n-            if Nkind_In (N, N_Entry_Call_Statement,\n-                            N_Function_Call,\n-                            N_Function_Instantiation,\n-                            N_Package_Instantiation,\n-                            N_Procedure_Call_Statement,\n-                            N_Procedure_Instantiation)\n+            if Nkind (N) in N_Entry_Call_Statement\n+                          | N_Function_Call\n+                          | N_Function_Instantiation\n+                          | N_Package_Instantiation\n+                          | N_Procedure_Call_Statement\n+                          | N_Procedure_Instantiation\n             then\n                Nam := Extract_Name (N);\n \n@@ -20378,16 +20343,16 @@ package body Sem_Util is\n \n       --  Obtain the complimentary unit of the main unit\n \n-      if Nkind_In (Main_Unit, N_Generic_Package_Declaration,\n-                              N_Generic_Subprogram_Declaration,\n-                              N_Package_Declaration,\n-                              N_Subprogram_Declaration)\n+      if Nkind (Main_Unit) in N_Generic_Package_Declaration\n+                            | N_Generic_Subprogram_Declaration\n+                            | N_Package_Declaration\n+                            | N_Subprogram_Declaration\n       then\n          Aux_Id := Corresponding_Body (Main_Unit);\n \n-      elsif Nkind_In (Main_Unit, N_Package_Body,\n-                                 N_Subprogram_Body,\n-                                 N_Subprogram_Renaming_Declaration)\n+      elsif Nkind (Main_Unit) in N_Package_Body\n+                               | N_Subprogram_Body\n+                               | N_Subprogram_Renaming_Declaration\n       then\n          Aux_Id := Corresponding_Spec (Main_Unit);\n       end if;\n@@ -20718,12 +20683,10 @@ package body Sem_Util is\n \n       function Process (N : Node_Id) return Traverse_Result is\n       begin\n-         if Nkind_In (N, N_Procedure_Call_Statement,\n-                         N_Function_Call,\n-                         N_Raise_Statement,\n-                         N_Raise_Constraint_Error,\n-                         N_Raise_Program_Error,\n-                         N_Raise_Storage_Error)\n+         if Nkind (N) in N_Procedure_Call_Statement\n+                       | N_Function_Call\n+                       | N_Raise_Statement\n+                       | N_Raise_xxx_Error\n          then\n             Result := True;\n             return Abandon;\n@@ -21152,9 +21115,9 @@ package body Sem_Util is\n             --  subprogram call, and the caller requests this behavior.\n \n             elsif not Calls_OK\n-              and then Nkind_In (Par, N_Entry_Call_Statement,\n-                                      N_Function_Call,\n-                                      N_Procedure_Call_Statement)\n+              and then Nkind (Par) in N_Entry_Call_Statement\n+                                    | N_Function_Call\n+                                    | N_Procedure_Call_Statement\n             then\n                return False;\n \n@@ -21193,7 +21156,7 @@ package body Sem_Util is\n \n       --  Only references warrant a marker\n \n-      elsif not Nkind_In (N, N_Expanded_Name, N_Identifier) then\n+      elsif Nkind (N) not in N_Expanded_Name | N_Identifier then\n          return False;\n \n       --  Only source references warrant a marker\n@@ -21349,17 +21312,17 @@ package body Sem_Util is\n                   Decl := Specification (Decl);\n                end if;\n \n-               if Nkind_In (Decl, N_Function_Instantiation,\n-                                  N_Function_Specification,\n-                                  N_Generic_Function_Renaming_Declaration,\n-                                  N_Generic_Package_Renaming_Declaration,\n-                                  N_Generic_Procedure_Renaming_Declaration,\n-                                  N_Package_Body,\n-                                  N_Package_Instantiation,\n-                                  N_Package_Renaming_Declaration,\n-                                  N_Package_Specification,\n-                                  N_Procedure_Instantiation,\n-                                  N_Procedure_Specification)\n+               if Nkind (Decl) in N_Function_Instantiation\n+                                | N_Function_Specification\n+                                | N_Generic_Function_Renaming_Declaration\n+                                | N_Generic_Package_Renaming_Declaration\n+                                | N_Generic_Procedure_Renaming_Declaration\n+                                | N_Package_Body\n+                                | N_Package_Instantiation\n+                                | N_Package_Renaming_Declaration\n+                                | N_Package_Specification\n+                                | N_Procedure_Instantiation\n+                                | N_Procedure_Specification\n                then\n                   Set_Chars (New_E, Chars (Defining_Unit_Name (Decl)));\n                   Set_Defining_Unit_Name (Decl, New_E);\n@@ -21816,15 +21779,15 @@ package body Sem_Util is\n \n          function Has_More_Ids (N : Node_Id) return Boolean is\n          begin\n-            if Nkind_In (N, N_Component_Declaration,\n-                            N_Discriminant_Specification,\n-                            N_Exception_Declaration,\n-                            N_Formal_Object_Declaration,\n-                            N_Number_Declaration,\n-                            N_Object_Declaration,\n-                            N_Parameter_Specification,\n-                            N_Use_Package_Clause,\n-                            N_Use_Type_Clause)\n+            if Nkind (N) in N_Component_Declaration\n+                          | N_Discriminant_Specification\n+                          | N_Exception_Declaration\n+                          | N_Formal_Object_Declaration\n+                          | N_Number_Declaration\n+                          | N_Object_Declaration\n+                          | N_Parameter_Specification\n+                          | N_Use_Package_Clause\n+                          | N_Use_Type_Clause\n             then\n                return More_Ids (N);\n             else\n@@ -22065,9 +22028,9 @@ package body Sem_Util is\n             --  Update the First/Next_Named_Association chain for a replicated\n             --  call.\n \n-            if Nkind_In (N, N_Entry_Call_Statement,\n-                            N_Function_Call,\n-                            N_Procedure_Call_Statement)\n+            if Nkind (N) in N_Entry_Call_Statement\n+                          | N_Function_Call\n+                          | N_Procedure_Call_Statement\n             then\n                Update_Named_Associations\n                  (Old_Call => N,\n@@ -22489,12 +22452,9 @@ package body Sem_Util is\n          --  an entity declaration that must be replaced when the expander is\n          --  active if the expression has been preanalyzed or analyzed.\n \n-         elsif not Ekind_In (Id, E_Block,\n-                                 E_Constant,\n-                                 E_Label,\n-                                 E_Loop_Parameter,\n-                                 E_Procedure,\n-                                 E_Variable)\n+         elsif Ekind (Id) not in\n+                 E_Block     | E_Constant | E_Label | E_Loop_Parameter |\n+                 E_Procedure | E_Variable\n            and then not Is_Type (Id)\n          then\n             return;\n@@ -22699,7 +22659,7 @@ package body Sem_Util is\n          --  shared. Thus cloned_Subtype must be set to indicate the sharing.\n          --  ??? What does this do?\n \n-         if Ekind_In (Itype, E_Class_Wide_Subtype, E_Record_Subtype) then\n+         if Ekind (Itype) in E_Class_Wide_Subtype | E_Record_Subtype then\n             Set_Cloned_Subtype (New_Itype, Itype);\n          end if;\n \n@@ -22787,9 +22747,9 @@ package body Sem_Util is\n             EWA_Level := EWA_Level + 1;\n \n          elsif EWA_Level > 0\n-           and then Nkind_In (N, N_Block_Statement,\n-                                 N_Subprogram_Body,\n-                                 N_Subprogram_Declaration)\n+           and then Nkind (N) in N_Block_Statement\n+                               | N_Subprogram_Body\n+                               | N_Subprogram_Declaration\n          then\n             EWA_Inner_Scope_Level := EWA_Inner_Scope_Level + 1;\n          end if;\n@@ -22815,9 +22775,9 @@ package body Sem_Util is\n            Par_Nod => N);\n \n          if EWA_Level > 0\n-           and then Nkind_In (N, N_Block_Statement,\n-                                 N_Subprogram_Body,\n-                                 N_Subprogram_Declaration)\n+           and then Nkind (N) in N_Block_Statement\n+                               | N_Subprogram_Body\n+                               | N_Subprogram_Declaration\n          then\n             EWA_Inner_Scope_Level := EWA_Inner_Scope_Level - 1;\n \n@@ -23084,9 +23044,9 @@ package body Sem_Util is\n             --  In case of a build-in-place call, the call will no longer be a\n             --  call; it will have been rewritten.\n \n-            if Nkind_In (Par, N_Entry_Call_Statement,\n-                              N_Function_Call,\n-                              N_Procedure_Call_Statement)\n+            if Nkind (Par) in N_Entry_Call_Statement\n+                            | N_Function_Call\n+                            | N_Procedure_Call_Statement\n             then\n                return First_Named_Actual (Par);\n \n@@ -23399,7 +23359,7 @@ package body Sem_Util is\n \n    function No_Heap_Finalization (Typ : Entity_Id) return Boolean is\n    begin\n-      if Ekind_In (Typ, E_Access_Type, E_General_Access_Type)\n+      if Ekind (Typ) in E_Access_Type | E_General_Access_Type\n         and then Is_Library_Level_Entity (Typ)\n       then\n          --  A global No_Heap_Finalization pragma applies to all library-level\n@@ -23629,9 +23589,9 @@ package body Sem_Util is\n                      then\n                         if No (Actuals)\n                           and then\n-                            Nkind_In (Parent (N), N_Procedure_Call_Statement,\n-                                                  N_Function_Call,\n-                                                  N_Parameter_Association)\n+                            Nkind (Parent (N)) in N_Procedure_Call_Statement\n+                                                | N_Function_Call\n+                                                | N_Parameter_Association\n                           and then Ekind (S) /= E_Function\n                         then\n                            Set_Etype (N, Etype (S));\n@@ -23783,15 +23743,13 @@ package body Sem_Util is\n                end if;\n             end;\n \n-         elsif Nkind_In (Exp, N_Type_Conversion,\n-                              N_Unchecked_Type_Conversion)\n+         elsif Nkind (Exp) in N_Type_Conversion | N_Unchecked_Type_Conversion\n          then\n             Exp := Expression (Exp);\n             goto Continue;\n \n-         elsif Nkind_In (Exp, N_Slice,\n-                              N_Indexed_Component,\n-                              N_Selected_Component)\n+         elsif Nkind (Exp) in\n+                 N_Slice | N_Indexed_Component | N_Selected_Component\n          then\n             --  Special check, if the prefix is an access type, then return\n             --  since we are modifying the thing pointed to, not the prefix.\n@@ -23852,7 +23810,7 @@ package body Sem_Util is\n \n                --  Follow renaming chain\n \n-               if Ekind_In (Ent, E_Variable, E_Constant)\n+               if Ekind (Ent) in E_Variable | E_Constant\n                  and then Present (Renamed_Object (Ent))\n                then\n                   Exp := Renamed_Object (Ent);\n@@ -23875,8 +23833,8 @@ package body Sem_Util is\n                --  a modification of the container.\n \n                elsif Comes_From_Source (Original_Node (Exp))\n-                 and then Nkind_In (Original_Node (Exp), N_Selected_Component,\n-                                                         N_Indexed_Component)\n+                 and then Nkind (Original_Node (Exp)) in\n+                            N_Selected_Component | N_Indexed_Component\n                then\n                   Exp := Prefix (Original_Node (Exp));\n                   goto Continue;\n@@ -23969,13 +23927,12 @@ package body Sem_Util is\n \n       function Is_Null_Excluding_Def (Def : Node_Id) return Boolean is\n       begin\n-         return\n-           Nkind_In (Def, N_Access_Definition,\n-                          N_Access_Function_Definition,\n-                          N_Access_Procedure_Definition,\n-                          N_Access_To_Object_Definition,\n-                          N_Component_Definition,\n-                          N_Derived_Type_Definition)\n+         return Nkind (Def) in N_Access_Definition\n+                             | N_Access_Function_Definition\n+                             | N_Access_Procedure_Definition\n+                             | N_Access_To_Object_Definition\n+                             | N_Component_Definition\n+                             | N_Derived_Type_Definition\n              and then Null_Exclusion_Present (Def);\n       end Is_Null_Excluding_Def;\n \n@@ -23997,12 +23954,12 @@ package body Sem_Util is\n          if Is_Imported (Id) or else Is_Exported (Id) then\n             return Unknown;\n \n-         elsif Nkind_In (Decl, N_Component_Declaration,\n-                               N_Discriminant_Specification,\n-                               N_Formal_Object_Declaration,\n-                               N_Object_Declaration,\n-                               N_Object_Renaming_Declaration,\n-                               N_Parameter_Specification)\n+         elsif Nkind (Decl) in N_Component_Declaration\n+                             | N_Discriminant_Specification\n+                             | N_Formal_Object_Declaration\n+                             | N_Object_Declaration\n+                             | N_Object_Renaming_Declaration\n+                             | N_Parameter_Specification\n          then\n             --  A component declaration yields a non-null value when either\n             --  its component definition or access definition carries a null\n@@ -24123,9 +24080,9 @@ package body Sem_Util is\n       --  Taking the 'Access of something yields a non-null value\n \n       elsif Nkind (N) = N_Attribute_Reference\n-        and then Nam_In (Attribute_Name (N), Name_Access,\n-                                             Name_Unchecked_Access,\n-                                             Name_Unrestricted_Access)\n+        and then Attribute_Name (N) in Name_Access\n+                                     | Name_Unchecked_Access\n+                                     | Name_Unrestricted_Access\n       then\n          return Is_Non_Null;\n \n@@ -24169,7 +24126,8 @@ package body Sem_Util is\n       if Nkind (N) = N_Null then\n          return Present (Typ) and then Is_Descendant_Of_Address (Typ);\n \n-      elsif Nkind_In (N, N_Op_Eq, N_Op_Ge, N_Op_Gt, N_Op_Le, N_Op_Lt, N_Op_Ne)\n+      elsif Nkind (N) in\n+              N_Op_Eq | N_Op_Ge | N_Op_Gt | N_Op_Le | N_Op_Lt | N_Op_Ne\n       then\n          declare\n             L : constant Node_Id := Left_Opnd (N);\n@@ -24357,7 +24315,7 @@ package body Sem_Util is\n             return Scope_Depth (Enclosing_Dynamic_Scope (E));\n          end if;\n \n-      elsif Nkind_In (Orig_Obj, N_Indexed_Component, N_Selected_Component) then\n+      elsif Nkind (Orig_Obj) in N_Indexed_Component | N_Selected_Component then\n          Orig_Pre := Original_Node (Prefix (Orig_Obj));\n \n          if Is_Access_Type (Etype (Orig_Pre)) then\n@@ -24415,8 +24373,7 @@ package body Sem_Util is\n             return Type_Access_Level (Etype (Prefix (Orig_Obj)));\n          end if;\n \n-      elsif Nkind_In (Orig_Obj, N_Type_Conversion,\n-                                N_Unchecked_Type_Conversion)\n+      elsif Nkind (Orig_Obj) in N_Type_Conversion | N_Unchecked_Type_Conversion\n       then\n          return Object_Access_Level (Expression (Orig_Obj));\n \n@@ -24559,18 +24516,16 @@ package body Sem_Util is\n       --  we are trying to implement here.\n \n       elsif Nkind (Orig_Obj) = N_Attribute_Reference\n-        and then Nam_In (Attribute_Name (Orig_Obj),\n-                         Name_Old,\n-                         Name_Loop_Entry)\n+        and then Attribute_Name (Orig_Obj) in Name_Old | Name_Loop_Entry\n       then\n          return Object_Access_Level (Current_Scope);\n \n       --  Move up the attribute reference when we encounter a 'Access variation\n \n       elsif Nkind (Orig_Obj) = N_Attribute_Reference\n-        and then Nam_In (Attribute_Name (Orig_Obj), Name_Access,\n-                                                    Name_Unchecked_Access,\n-                                                    Name_Unrestricted_Access)\n+        and then Attribute_Name (Orig_Obj) in Name_Access\n+                                            | Name_Unchecked_Access\n+                                            | Name_Unrestricted_Access\n       then\n          return Object_Access_Level (Prefix (Orig_Obj));\n \n@@ -24691,7 +24646,7 @@ package body Sem_Util is\n       Item_Nam : Name_Id;\n \n    begin\n-      pragma Assert (Nkind_In (N, N_Aspect_Specification, N_Pragma));\n+      pragma Assert (Nkind (N) in N_Aspect_Specification | N_Pragma);\n \n       Item := N;\n \n@@ -24730,8 +24685,7 @@ package body Sem_Util is\n          elsif Item_Nam = Name_Pre then\n             Item_Nam := Name_uPre;\n \n-         elsif Nam_In (Item_Nam, Name_Type_Invariant,\n-                                 Name_Type_Invariant_Class)\n+         elsif Item_Nam in Name_Type_Invariant | Name_Type_Invariant_Class\n          then\n             Item_Nam := Name_uType_Invariant;\n \n@@ -24839,7 +24793,7 @@ package body Sem_Util is\n             --  The current Check_Policy pragma matches the requested policy or\n             --  appears in the single argument form (Assertion, policy_id).\n \n-            if Nam_In (Chars (Arg1), Name_Assertion, Policy) then\n+            if Chars (Arg1) in Name_Assertion | Policy then\n                return Chars (Arg2);\n             end if;\n \n@@ -24886,7 +24840,7 @@ package body Sem_Util is\n       --  assertions, unless they are disabled. Force Name_Check on\n       --  ignored assertions.\n \n-      if Nam_In (Kind, Name_Ignore, Name_Off)\n+      if Kind in Name_Ignore | Name_Off\n         and then (CodePeer_Mode or GNATprove_Mode)\n       then\n          Kind := Name_Check;\n@@ -25615,7 +25569,7 @@ package body Sem_Util is\n       --  The entity denotes a primitive subprogram. Remove it from the list of\n       --  primitives of the associated controlling type.\n \n-      if Ekind_In (Id, E_Function, E_Procedure) and then Is_Primitive (Id) then\n+      if Ekind (Id) in E_Function | E_Procedure and then Is_Primitive (Id) then\n          Formal := First_Formal (Id);\n          while Present (Formal) loop\n             if Is_Controlling_Formal (Formal) then\n@@ -25910,7 +25864,7 @@ package body Sem_Util is\n          while R_Scope /= Standard_Standard loop\n             exit when R_Scope = E_Scope;\n \n-            if not Ekind_In (R_Scope, E_Package, E_Block, E_Loop) then\n+            if Ekind (R_Scope) not in E_Package | E_Block | E_Loop then\n                return False;\n             else\n                R_Scope := Scope (R_Scope);\n@@ -26024,7 +25978,7 @@ package body Sem_Util is\n             EN2 : constant Entity_Id := Entity (N2);\n          begin\n             if Present (EN1) and then Present (EN2)\n-              and then (Ekind_In (EN1, E_Variable, E_Constant)\n+              and then (Ekind (EN1) in E_Variable | E_Constant\n                          or else Is_Formal (EN1))\n               and then EN1 = EN2\n             then\n@@ -26314,8 +26268,8 @@ package body Sem_Util is\n             Typ : constant Entity_Id := Etype (E);\n \n          begin\n-            if Ekind_In (Typ, E_Anonymous_Access_Type,\n-                              E_Anonymous_Access_Subprogram_Type)\n+            if Ekind (Typ) in E_Anonymous_Access_Type\n+                            | E_Anonymous_Access_Subprogram_Type\n               and then not Has_Convention_Pragma (Typ)\n             then\n                Basic_Set_Convention (Typ, Val);\n@@ -26783,8 +26737,8 @@ package body Sem_Util is\n             if No (N) then\n                return False;\n \n-            elsif Nkind_In (N, N_Handled_Sequence_Of_Statements,\n-                               N_If_Statement)\n+            elsif Nkind (N) in\n+                    N_Handled_Sequence_Of_Statements | N_If_Statement\n             then\n                return True;\n             end if;\n@@ -26810,8 +26764,8 @@ package body Sem_Util is\n       --  never needs to be made public and furthermore, making it public can\n       --  cause back end problems.\n \n-      elsif Nkind_In (Parent (Id), N_Object_Declaration,\n-                                   N_Function_Specification)\n+      elsif Nkind (Parent (Id)) in\n+              N_Object_Declaration | N_Function_Specification\n         and then Within_HSS_Or_If (Id)\n       then\n          return;\n@@ -26843,7 +26797,7 @@ package body Sem_Util is\n    begin\n       --  Deal with indexed or selected component where prefix is modified\n \n-      if Nkind_In (N, N_Indexed_Component, N_Selected_Component) then\n+      if Nkind (N) in N_Indexed_Component | N_Selected_Component then\n          Pref := Prefix (N);\n \n          --  If prefix is access type, then it is the designated object that is\n@@ -27122,8 +27076,8 @@ package body Sem_Util is\n                return False;\n             end if;\n \n-            if not Ekind_In (Entity (Selector_Name (N)), E_Component,\n-                                                         E_Discriminant)\n+            if Ekind (Entity (Selector_Name (N))) not in\n+                 E_Component | E_Discriminant\n             then\n                return False;\n             end if;\n@@ -27221,7 +27175,7 @@ package body Sem_Util is\n       --  'Loop_Entry attribute into a conditional block. Infinite loops lack\n       --  the conditional part.\n \n-      if Nkind_In (Stmt, N_Block_Statement, N_If_Statement)\n+      if Nkind (Stmt) in N_Block_Statement | N_If_Statement\n         and then Nkind (Original_Node (N)) = N_Loop_Statement\n       then\n          Stmt := Original_Node (N);\n@@ -27883,10 +27837,10 @@ package body Sem_Util is\n \n    begin\n       Pref := N;\n-      while Nkind_In (Pref, N_Explicit_Dereference,\n-                            N_Indexed_Component,\n-                            N_Selected_Component,\n-                            N_Slice)\n+      while Nkind (Pref) in N_Explicit_Dereference\n+                          | N_Indexed_Component\n+                          | N_Selected_Component\n+                          | N_Slice\n       loop\n          Pref := Prefix (Pref);\n       end loop;\n@@ -28357,9 +28311,9 @@ package body Sem_Util is\n       --  Recurse to handle unlikely case of multiple levels of qualification\n       --  and/or conversion.\n \n-      if Nkind_In (Expr, N_Qualified_Expression,\n-                         N_Type_Conversion,\n-                         N_Unchecked_Type_Conversion)\n+      if Nkind (Expr) in N_Qualified_Expression\n+                       | N_Type_Conversion\n+                       | N_Unchecked_Type_Conversion\n       then\n          return Unqual_Conv (Expression (Expr));\n \n@@ -28513,9 +28467,9 @@ package body Sem_Util is\n \n       Par := N;\n       while Present (Par) loop\n-         if Nkind_In (Par, N_Entry_Call_Statement,\n-                           N_Function_Call,\n-                           N_Procedure_Call_Statement)\n+         if Nkind (Par) in N_Entry_Call_Statement\n+                         | N_Function_Call\n+                         | N_Procedure_Call_Statement\n          then\n             return True;\n \n@@ -28589,8 +28543,8 @@ package body Sem_Util is\n                if No (E) then\n                   return False;\n \n-               elsif not Ekind_In (E, E_Discriminant, E_Component)\n-                 or else Nam_In (Chars (E), Name_uTag, Name_uParent)\n+               elsif Ekind (E) not in E_Discriminant | E_Component\n+                 or else Chars (E) in Name_uTag | Name_uParent\n                then\n                   Next_Entity (E);\n \n@@ -28744,7 +28698,7 @@ package body Sem_Util is\n \n       elsif Is_Integer_Type (Expec_Type)\n         and then Is_RTE (Found_Type, RE_Address)\n-        and then Nkind_In (Parent (Expr), N_Op_Add, N_Op_Subtract)\n+        and then Nkind (Parent (Expr)) in N_Op_Add | N_Op_Subtract\n         and then Expr = Left_Opnd (Parent (Expr))\n         and then Is_Integer_Type (Etype (Right_Opnd (Parent (Expr))))\n       then\n@@ -28834,7 +28788,7 @@ package body Sem_Util is\n             Error_Msg_N (\"\\\\found package name!\", Expr);\n \n          elsif Is_Entity_Name (Expr)\n-           and then Ekind_In (Entity (Expr), E_Procedure, E_Generic_Procedure)\n+           and then Ekind (Entity (Expr)) in E_Procedure | E_Generic_Procedure\n          then\n             if Ekind (Expec_Type) = E_Access_Subprogram_Type then\n                Error_Msg_N\n@@ -28882,7 +28836,7 @@ package body Sem_Util is\n \n          if Expec_Type = Standard_Boolean\n            and then Is_Modular_Integer_Type (Found_Type)\n-           and then Nkind_In (Parent (Expr), N_Op_And, N_Op_Or, N_Op_Xor)\n+           and then Nkind (Parent (Expr)) in N_Op_And | N_Op_Or | N_Op_Xor\n            and then Nkind (Right_Opnd (Parent (Expr))) in N_Op_Compare\n          then\n             declare\n@@ -29021,7 +28975,7 @@ package body Sem_Util is\n    begin\n       --  Integer and real literals are of a universal type\n \n-      if Nkind_In (N, N_Integer_Literal, N_Real_Literal) then\n+      if Nkind (N) in N_Integer_Literal | N_Real_Literal then\n          return True;\n \n       --  The values of certain attributes are of a universal type"}, {"sha": "b67bb7d5865668c1bccf97f365f0187ae5d407ca", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -1165,7 +1165,7 @@ package body Sem_Warn is\n \n             if Ekind (E1) = E_Variable\n               or else\n-                (Ekind_In (E1, E_Out_Parameter, E_In_Out_Parameter)\n+                (Ekind (E1) in E_Out_Parameter | E_In_Out_Parameter\n                   and then not Is_Protected_Type (Current_Scope))\n             then\n                --  If the formal has a class-wide type, retrieve its type\n@@ -1469,9 +1469,9 @@ package body Sem_Warn is\n \n                   UR := Original_Node (UR);\n                   loop\n-                     if Nkind_In (UR, N_Expression_With_Actions,\n-                                      N_Qualified_Expression,\n-                                      N_Type_Conversion)\n+                     if Nkind (UR) in N_Expression_With_Actions\n+                                    | N_Qualified_Expression\n+                                    | N_Type_Conversion\n                      then\n                         UR := Expression (UR);\n \n@@ -1612,9 +1612,9 @@ package body Sem_Warn is\n               and then (Is_Object (E1)\n                          or else Is_Type (E1)\n                          or else Ekind (E1) = E_Label\n-                         or else Ekind_In (E1, E_Exception,\n-                                               E_Named_Integer,\n-                                               E_Named_Real)\n+                         or else Ekind (E1) in E_Exception\n+                                             | E_Named_Integer\n+                                             | E_Named_Real\n                          or else Is_Overloadable (E1)\n \n                          --  Package case, if the main unit is a package spec\n@@ -1895,7 +1895,7 @@ package body Sem_Warn is\n                E : constant Entity_Id := Entity (N);\n \n             begin\n-               if Ekind_In (E, E_Variable, E_Out_Parameter)\n+               if Ekind (E) in E_Variable | E_Out_Parameter\n                  and then Never_Set_In_Source_Check_Spec (E)\n                  and then not Has_Initial_Value (E)\n                  and then (No (Unset_Reference (E))\n@@ -1975,10 +1975,11 @@ package body Sem_Warn is\n                         Nod := Parent (N);\n                         while Present (Nod) loop\n                            if Nkind (Nod) = N_Pragma\n-                             and then Nam_In (Pragma_Name_Unmapped (Nod),\n-                                              Name_Postcondition,\n-                                              Name_Refined_Post,\n-                                              Name_Contract_Cases)\n+                             and then\n+                               Pragma_Name_Unmapped (Nod)\n+                                in Name_Postcondition\n+                                 | Name_Refined_Post\n+                                 | Name_Contract_Cases\n                            then\n                               return True;\n \n@@ -2102,7 +2103,7 @@ package body Sem_Warn is\n                               P := Parent (P);\n                               exit when No (P);\n \n-                              if Nkind_In (P, N_If_Statement, N_Elsif_Part)\n+                              if Nkind (P) in N_If_Statement | N_Elsif_Part\n                                 and then Ref_In (Condition (P))\n                               then\n                                  return;\n@@ -3188,7 +3189,7 @@ package body Sem_Warn is\n \n       --  Reference to obsolescent component\n \n-      elsif Ekind_In (E, E_Component, E_Discriminant) then\n+      elsif Ekind (E) in E_Component | E_Discriminant then\n          Error_Msg_NE\n            (\"??reference to obsolescent component& declared#\", N, E);\n \n@@ -3567,8 +3568,9 @@ package body Sem_Warn is\n             --  node, since assert pragmas get rewritten at analysis time.\n \n             elsif Nkind (Original_Node (P)) = N_Pragma\n-              and then Nam_In (Pragma_Name_Unmapped (Original_Node (P)),\n-                               Name_Assert, Name_Check)\n+              and then\n+                Pragma_Name_Unmapped (Original_Node (P))\n+                  in Name_Assert | Name_Check\n             then\n                return;\n             end if;\n@@ -4232,7 +4234,7 @@ package body Sem_Warn is\n       --  Only process if warnings activated\n \n       if Warn_On_Suspicious_Contract then\n-         if Nkind_In (Par, N_Op_Eq, N_Op_Ne) then\n+         if Nkind (Par) in N_Op_Eq | N_Op_Ne then\n             if N = Left_Opnd (Par) then\n                Arg := Right_Opnd (Par);\n             else\n@@ -4422,10 +4424,10 @@ package body Sem_Warn is\n                         B : constant Node_Id := Parent (Parent (Scope (E)));\n                         S : Entity_Id := Empty;\n                      begin\n-                        if Nkind_In (B,\n-                                     N_Expression_Function,\n-                                     N_Subprogram_Body,\n-                                     N_Subprogram_Renaming_Declaration)\n+                        if Nkind (B) in\n+                             N_Expression_Function |\n+                             N_Subprogram_Body     |\n+                             N_Subprogram_Renaming_Declaration\n                         then\n                            S := Corresponding_Spec (B);\n                         end if;\n@@ -4587,10 +4589,10 @@ package body Sem_Warn is\n \n             --  When we hit a package/subprogram body, issue warning and exit\n \n-            elsif Nkind_In (P, N_Entry_Body,\n-                               N_Package_Body,\n-                               N_Subprogram_Body,\n-                               N_Task_Body)\n+            elsif Nkind (P) in N_Entry_Body\n+                             | N_Package_Body\n+                             | N_Subprogram_Body\n+                             | N_Task_Body\n             then\n                --  Case of assigned value never referenced\n \n@@ -4614,8 +4616,8 @@ package body Sem_Warn is\n                         --  Give appropriate message, distinguishing between\n                         --  assignment statements and out parameters.\n \n-                        if Nkind_In (Parent (LA), N_Parameter_Association,\n-                                                  N_Procedure_Call_Statement)\n+                        if Nkind (Parent (LA)) in N_Parameter_Association\n+                                                | N_Procedure_Call_Statement\n                         then\n                            Error_Msg_NE\n                              (\"?m?& modified by call, but value might not be \"\n@@ -4641,8 +4643,8 @@ package body Sem_Warn is\n                      --  Give appropriate message, distinguishing between\n                      --  assignment statements and out parameters.\n \n-                     if Nkind_In (Parent (LA), N_Procedure_Call_Statement,\n-                                               N_Parameter_Association)\n+                     if Nkind (Parent (LA)) in N_Procedure_Call_Statement\n+                                             | N_Parameter_Association\n                      then\n                         Error_Msg_NE\n                           (\"?m?& modified by call, but value overwritten #!\",\n@@ -4673,10 +4675,10 @@ package body Sem_Warn is\n                   --  not generate the warning, since the variable in question\n                   --  may be accessed after an exception in the outer block.\n \n-                  if not Nkind_In (Parent (P), N_Entry_Body,\n-                                               N_Package_Body,\n-                                               N_Subprogram_Body,\n-                                               N_Task_Body)\n+                  if Nkind (Parent (P)) not in N_Entry_Body\n+                                             | N_Package_Body\n+                                             | N_Subprogram_Body\n+                                             | N_Task_Body\n                   then\n                      Set_Last_Assignment (Ent, Empty);\n                      return;"}, {"sha": "082f06f4b2a3bd432fd79073611dfff4856beb5a", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 0, "deletions": 234, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -7123,240 +7123,6 @@ package body Sinfo is\n         UI_From_Int (Int (S) - Int (Sloc (N))));\n    end Set_End_Location;\n \n-   --------------\n-   -- Nkind_In --\n-   --------------\n-\n-   function Nkind_In\n-     (T  : Node_Kind;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2;\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (T  : Node_Kind;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3;\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (T  : Node_Kind;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4;\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (T  : Node_Kind;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5;\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (T  : Node_Kind;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind;\n-      V6 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5 or else\n-             T = V6;\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (T  : Node_Kind;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind;\n-      V6 : Node_Kind;\n-      V7 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5 or else\n-             T = V6 or else\n-             T = V7;\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (T  : Node_Kind;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind;\n-      V6 : Node_Kind;\n-      V7 : Node_Kind;\n-      V8 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5 or else\n-             T = V6 or else\n-             T = V7 or else\n-             T = V8;\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (T  : Node_Kind;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind;\n-      V6 : Node_Kind;\n-      V7 : Node_Kind;\n-      V8 : Node_Kind;\n-      V9 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5 or else\n-             T = V6 or else\n-             T = V7 or else\n-             T = V8 or else\n-             T = V9;\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (T   : Node_Kind;\n-      V1  : Node_Kind;\n-      V2  : Node_Kind;\n-      V3  : Node_Kind;\n-      V4  : Node_Kind;\n-      V5  : Node_Kind;\n-      V6  : Node_Kind;\n-      V7  : Node_Kind;\n-      V8  : Node_Kind;\n-      V9  : Node_Kind;\n-      V10 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1 or else\n-             T = V2 or else\n-             T = V3 or else\n-             T = V4 or else\n-             T = V5 or else\n-             T = V6 or else\n-             T = V7 or else\n-             T = V8 or else\n-             T = V9 or else\n-             T = V10;\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (T   : Node_Kind;\n-      V1  : Node_Kind;\n-      V2  : Node_Kind;\n-      V3  : Node_Kind;\n-      V4  : Node_Kind;\n-      V5  : Node_Kind;\n-      V6  : Node_Kind;\n-      V7  : Node_Kind;\n-      V8  : Node_Kind;\n-      V9  : Node_Kind;\n-      V10 : Node_Kind;\n-      V11 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1  or else\n-             T = V2  or else\n-             T = V3  or else\n-             T = V4  or else\n-             T = V5  or else\n-             T = V6  or else\n-             T = V7  or else\n-             T = V8  or else\n-             T = V9  or else\n-             T = V10 or else\n-             T = V11;\n-   end Nkind_In;\n-\n-   function Nkind_In\n-     (T   : Node_Kind;\n-      V1  : Node_Kind;\n-      V2  : Node_Kind;\n-      V3  : Node_Kind;\n-      V4  : Node_Kind;\n-      V5  : Node_Kind;\n-      V6  : Node_Kind;\n-      V7  : Node_Kind;\n-      V8  : Node_Kind;\n-      V9  : Node_Kind;\n-      V10 : Node_Kind;\n-      V11 : Node_Kind;\n-      V12 : Node_Kind;\n-      V13 : Node_Kind;\n-      V14 : Node_Kind;\n-      V15 : Node_Kind;\n-      V16 : Node_Kind;\n-      V17 : Node_Kind) return Boolean\n-   is\n-   begin\n-      return T = V1  or else\n-             T = V2  or else\n-             T = V3  or else\n-             T = V4  or else\n-             T = V5  or else\n-             T = V6  or else\n-             T = V7  or else\n-             T = V8  or else\n-             T = V9  or else\n-             T = V10 or else\n-             T = V11 or else\n-             T = V12 or else\n-             T = V13 or else\n-             T = V14 or else\n-             T = V15 or else\n-             T = V16 or else\n-             T = V17;\n-   end Nkind_In;\n-\n    --------------------------\n    -- Pragma_Name_Unmapped --\n    --------------------------"}, {"sha": "2583f9144b165699ffa3abbf733315a11677f98b", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 0, "deletions": 130, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -11410,136 +11410,6 @@ package Sinfo is\n    --  for the argument. This is Arg itself, or, in the case where Arg is a\n    --  pragma argument association node, the expression from this node.\n \n-   --------------------------------\n-   -- Node_Kind Membership Tests --\n-   --------------------------------\n-\n-   --  The following functions allow a convenient notation for testing whether\n-   --  a Node_Kind value matches any one of a list of possible values. In each\n-   --  case True is returned if the given T argument is equal to any of the V\n-   --  arguments. Note that there is a similar set of functions defined in\n-   --  Atree where the first argument is a Node_Id whose Nkind field is tested.\n-\n-   function Nkind_In\n-     (T  : Node_Kind;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (T  : Node_Kind;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (T  : Node_Kind;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (T  : Node_Kind;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (T  : Node_Kind;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind;\n-      V6 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (T  : Node_Kind;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind;\n-      V6 : Node_Kind;\n-      V7 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (T  : Node_Kind;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind;\n-      V6 : Node_Kind;\n-      V7 : Node_Kind;\n-      V8 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (T  : Node_Kind;\n-      V1 : Node_Kind;\n-      V2 : Node_Kind;\n-      V3 : Node_Kind;\n-      V4 : Node_Kind;\n-      V5 : Node_Kind;\n-      V6 : Node_Kind;\n-      V7 : Node_Kind;\n-      V8 : Node_Kind;\n-      V9 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (T   : Node_Kind;\n-      V1  : Node_Kind;\n-      V2  : Node_Kind;\n-      V3  : Node_Kind;\n-      V4  : Node_Kind;\n-      V5  : Node_Kind;\n-      V6  : Node_Kind;\n-      V7  : Node_Kind;\n-      V8  : Node_Kind;\n-      V9  : Node_Kind;\n-      V10 : Node_Kind) return Boolean;\n-\n-   function Nkind_In\n-     (T   : Node_Kind;\n-      V1  : Node_Kind;\n-      V2  : Node_Kind;\n-      V3  : Node_Kind;\n-      V4  : Node_Kind;\n-      V5  : Node_Kind;\n-      V6  : Node_Kind;\n-      V7  : Node_Kind;\n-      V8  : Node_Kind;\n-      V9  : Node_Kind;\n-      V10 : Node_Kind;\n-      V11 : Node_Kind) return Boolean;\n-\n-   --  12..16-parameter versions are not yet needed\n-\n-   function Nkind_In\n-     (T   : Node_Kind;\n-      V1  : Node_Kind;\n-      V2  : Node_Kind;\n-      V3  : Node_Kind;\n-      V4  : Node_Kind;\n-      V5  : Node_Kind;\n-      V6  : Node_Kind;\n-      V7  : Node_Kind;\n-      V8  : Node_Kind;\n-      V9  : Node_Kind;\n-      V10 : Node_Kind;\n-      V11 : Node_Kind;\n-      V12 : Node_Kind;\n-      V13 : Node_Kind;\n-      V14 : Node_Kind;\n-      V15 : Node_Kind;\n-      V16 : Node_Kind;\n-      V17 : Node_Kind) return Boolean;\n-\n-   pragma Inline (Nkind_In);\n-   --  Inline all above functions\n-\n    -----------------------\n    -- Utility Functions --\n    -----------------------"}, {"sha": "3aeb95f0493cf5f556c4c4de57461f6af778cc52", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -532,7 +532,7 @@ package body Sprint is\n          --  We do not know the actual end location in the generated code and\n          --  it could be much closer than in the source code, so play safe.\n \n-         if Nkind_In (Dump_Node, N_Case_Statement, N_If_Statement) then\n+         if Nkind (Dump_Node) in N_Case_Statement | N_If_Statement then\n             Set_End_Location (Dump_Node, Debug_Sloc + Source_Ptr (Column - 1));\n          end if;\n \n@@ -3537,8 +3537,8 @@ package body Sprint is\n       --  where the aspects are printed inside the package specification.\n \n       if Has_Aspects (Node)\n-        and then not Nkind_In (Node, N_Generic_Package_Declaration,\n-                                     N_Package_Declaration)\n+        and then Nkind (Node) not in\n+                   N_Generic_Package_Declaration | N_Package_Declaration\n         and then not Is_Empty_List (Aspect_Specifications (Node))\n       then\n          Sprint_Aspect_Specifications (Node, Semicolon => True);\n@@ -4745,9 +4745,7 @@ package body Sprint is\n \n       --  See if we have extra formals\n \n-      if Nkind_In (N, N_Function_Specification,\n-                      N_Procedure_Specification)\n-      then\n+      if Nkind (N) in N_Function_Specification | N_Procedure_Specification then\n          Ent := Defining_Entity (N);\n \n          --  Loop to write extra formals (if any)"}, {"sha": "565c41a2b60ce8c7b1a20e5e153c35eb2ac025ca", "filename": "gcc/ada/styleg.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fstyleg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Fstyleg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyleg.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -207,13 +207,13 @@ package body Styleg is\n \n       function OK_Boolean_Operand (N : Node_Id) return Boolean is\n       begin\n-         if Nkind_In (N, N_Identifier, N_Expanded_Name) then\n+         if Nkind (N) in N_Identifier | N_Expanded_Name then\n             return True;\n \n          elsif Nkind (N) = N_Op_Not then\n             return OK_Boolean_Operand (Original_Node (Right_Opnd (N)));\n \n-         elsif Nkind_In (N, N_Op_And, N_Op_Or) then\n+         elsif Nkind (N) in N_Op_And | N_Op_Or then\n             return OK_Boolean_Operand (Original_Node (Left_Opnd (N)))\n                      and then\n                    OK_Boolean_Operand (Original_Node (Right_Opnd (N)));\n@@ -233,7 +233,7 @@ package body Styleg is\n             Orig : constant Node_Id := Original_Node (Node);\n \n          begin\n-            if Nkind_In (Orig, N_Op_And, N_Op_Or) then\n+            if Nkind (Orig) in N_Op_And | N_Op_Or then\n                declare\n                   L : constant Node_Id := Original_Node (Left_Opnd  (Orig));\n                   R : constant Node_Id := Original_Node (Right_Opnd (Orig));"}, {"sha": "3b33ee76d7d27ed355ea1cb64065fe8d5e7e0a99", "filename": "gcc/ada/tbuild.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Ftbuild.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Ftbuild.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftbuild.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -175,8 +175,8 @@ package body Tbuild is\n               Attribute_Name => Attribute_Name);\n \n    begin\n-      pragma Assert (Nam_In (Attribute_Name, Name_Address,\n-                                             Name_Unrestricted_Access));\n+      pragma Assert\n+        (Attribute_Name in Name_Address | Name_Unrestricted_Access);\n       Set_Must_Be_Byte_Aligned (N, True);\n       return N;\n    end Make_Byte_Aligned_Attribute_Reference;"}, {"sha": "e76b138efb45016b32f7e9fdbaa8aa9df945bb10", "filename": "gcc/ada/treepr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Ftreepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a08c95cf0604a96e6fc48102365ef0d498f11ae/gcc%2Fada%2Ftreepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.adb?ref=4a08c95cf0604a96e6fc48102365ef0d498f11ae", "patch": "@@ -1274,7 +1274,7 @@ package body Treepr is\n                --  Special case End_Span = Uint5\n \n                when F_Field5 =>\n-                  if Nkind_In (N, N_Case_Statement, N_If_Statement) then\n+                  if Nkind (N) in N_Case_Statement | N_If_Statement then\n                      Print_End_Span (N);\n                   else\n                      Print_Field (Field5 (N), Fmt);"}]}