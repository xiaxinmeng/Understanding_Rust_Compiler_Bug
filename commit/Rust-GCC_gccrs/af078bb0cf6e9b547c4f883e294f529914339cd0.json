{"sha": "af078bb0cf6e9b547c4f883e294f529914339cd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYwNzhiYjBjZjZlOWI1NDdjNGY4ODNlMjk0ZjUyOTkxNDMzOWNkMA==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2009-12-09T17:44:47Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2009-12-09T17:44:47Z"}, "message": "fixing pr42337\n\nFrom-SVN: r155111", "tree": {"sha": "ae0c35d1af3c096f401e85a1ad4720f640c8b5d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae0c35d1af3c096f401e85a1ad4720f640c8b5d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af078bb0cf6e9b547c4f883e294f529914339cd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af078bb0cf6e9b547c4f883e294f529914339cd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af078bb0cf6e9b547c4f883e294f529914339cd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af078bb0cf6e9b547c4f883e294f529914339cd0/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab8d2734416b73d1f7e0c6b38bb30598f5bbf91f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab8d2734416b73d1f7e0c6b38bb30598f5bbf91f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab8d2734416b73d1f7e0c6b38bb30598f5bbf91f"}], "stats": {"total": 194, "additions": 192, "deletions": 2}, "files": [{"sha": "9fff002fe263e231d3affaa515ff2ced01b35695", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af078bb0cf6e9b547c4f883e294f529914339cd0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af078bb0cf6e9b547c4f883e294f529914339cd0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af078bb0cf6e9b547c4f883e294f529914339cd0", "patch": "@@ -1,3 +1,8 @@\n+2009-12-09  Xinliang David Li  <davidxl@google.com>\n+\n+\tPR tree-optimization/42337\n+\t* tree-ssa-pre.c (phi_translate_1): Push and Pop SEEN set.\n+\n 2009-12-09  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/rs6000/vector.md (absv2sf2, negv2sf2, addv2sf3, subv2sf3,"}, {"sha": "4e0e720cfb94b305961ac0ad3e408ba146c2d8de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af078bb0cf6e9b547c4f883e294f529914339cd0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af078bb0cf6e9b547c4f883e294f529914339cd0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=af078bb0cf6e9b547c4f883e294f529914339cd0", "patch": "@@ -1,3 +1,8 @@\n+2009-12-09  Xinliang David Li  <davidxl@google.com>\n+\n+\tPR tree-optimization/42337\n+\t* g++.dg/tree-ssa/pr42337.C: New test.\n+\n 2009-12-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/41711"}, {"sha": "8abd4b2d161d8567cb59dba7e85610f9e33243fa", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr42337.C", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af078bb0cf6e9b547c4f883e294f529914339cd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr42337.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af078bb0cf6e9b547c4f883e294f529914339cd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr42337.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr42337.C?ref=af078bb0cf6e9b547c4f883e294f529914339cd0", "patch": "@@ -0,0 +1,173 @@\n+// PR tree-optimize/42337\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+template<class _T1, class _T2> struct pair {\n+  _T2 second;\n+};\n+template<typename _Tp>\n+inline const _Tp& max(const _Tp& __a, const _Tp& __b) { }\n+\n+template<typename _ForwardIterator, typename _Tp, typename _Compare> _ForwardIterator\n+lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp) { }\n+template<class _CharT> struct char_traits {};\n+\n+template<typename _Iterator, typename _Container> class __normal_iterator {\n+ public: typedef _Iterator iterator_type;\n+  __normal_iterator& operator++() {\n+  }\n+};\n+template<typename _IteratorL, typename _IteratorR, typename _Container>\n+inline bool operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs) { }\n+template<typename _Tp> class new_allocator {\n+ public:\n+  typedef _Tp* pointer;\n+  typedef const _Tp* const_pointer;\n+};\n+\n+template<typename _Tp>\n+class allocator: public new_allocator<_Tp> {\n+ public:\n+  template<typename _Tp1> struct rebind {\n+    typedef allocator<_Tp1> other;\n+  };\n+};\n+\n+template<typename _Arg, typename _Result> struct unary_function { };\n+template<typename _Arg1, typename _Arg2, typename _Result> struct binary_function { };\n+template<typename _Tp> struct less : public binary_function<_Tp, _Tp, bool> { };\n+template<typename _Pair> struct _Select1st : public unary_function<_Pair, typename _Pair::first_type> { };\n+template<typename _Tp> struct _Rb_tree_iterator {\n+  typedef _Tp* pointer;\n+  pointer operator->() const {\n+  }\n+};\n+template<typename _Key, typename _Val, typename _KeyOfValue, typename _Compare, typename _Alloc = allocator<_Val> >\n+class _Rb_tree {\n+  typedef _Val value_type;\n+ public: typedef _Rb_tree_iterator<value_type> iterator;\n+};\n+template <typename _Key, typename _Tp, typename _Compare = less<_Key>, typename _Alloc = allocator<pair<const _Key, _Tp> > >\n+class map {\n+ public: typedef _Key key_type;\n+  typedef pair<const _Key, _Tp> value_type;\n+  typedef _Compare key_compare;\n+ private: typedef typename _Alloc::template rebind<value_type>::other _Pair_alloc_type;\n+  typedef _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type> _Rep_type;\n+ public: typedef typename _Pair_alloc_type::pointer pointer;\n+  typedef typename _Rep_type::iterator iterator;\n+  iterator find(const key_type& __x) { }\n+};\n+\n+template<typename _Tp, typename _Alloc> struct _Vector_base {\n+  typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;\n+};\n+template<typename _Tp, typename _Alloc = allocator<_Tp> >\n+class vector : protected _Vector_base<_Tp, _Alloc> {\n+  typedef _Vector_base<_Tp, _Alloc> _Base;\n+  typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;\n+ public:\n+  typedef typename _Tp_alloc_type::pointer pointer;\n+  typedef typename _Tp_alloc_type::const_pointer const_pointer;\n+  typedef __normal_iterator<pointer, vector> iterator;\n+  typedef __normal_iterator<const_pointer, vector> const_iterator;\n+  iterator begin() { }\n+  const_iterator begin() const { }\n+  const_iterator end() const { }\n+  unsigned long size() const { }\n+};\n+\n+class SSC {\n+ public:\n+  SSC () {}\n+  SSC (const int& cs);\n+};\n+extern int flag;\n+\n+struct TP {\n+   const int cl_;\n+   const vector<int> &its_;\n+   int max_s_;\n+ };\n+\n+double foo(TP *p);\n+map<int, int> cs_;\n+\n+template <typename T> class vector32 {\n+ public:\n+  typedef T& reference;\n+  typedef T* iterator;\n+  typedef const T* const_iterator;\n+  iterator begin() { return data_; }\n+  iterator end() { return data_ + size_; }\n+  long unsigned int size() const { return size_; }\n+  T* data_;\n+  unsigned size_;\n+};\n+\n+struct SF : public pair<unsigned long long, double> { };\n+\n+template<typename KEY, typename VALUE> class SFVT {\n+ private: typedef vector32<SF> Container;\n+  typedef typename Container::const_iterator CI;\n+  mutable Container v_;\n+  mutable bool sorted_;\n+  struct Cmp : public binary_function<SF, SF, bool> {\n+  };\n+  __attribute__((always_inline)) VALUE IS(const SFVT &sfv) const {\n+    if (sfv.v_.size() < v_.size()) {\n+      return sfv.IS(*this);\n+    }\n+    else {\n+      VALUE sum = 0.0;\n+      CI beg = sfv.v_.begin();\n+      CI end = sfv.v_.end();\n+      for (CI i = v_.begin();\n+           i != v_.end();\n+           ++i) { beg = lower_bound(beg, end, *i, Cmp()); if (beg == end) { return sum; } }\n+    }\n+  }\n+ public: explicit SFVT(const int capacity = 0) : sorted_(true) { }\n+  long unsigned int size() const { }\n+  __attribute__((always_inline)) VALUE DP(const SFVT &sfv) const {\n+    return IS(sfv);\n+  }\n+};\n+class SFV : public SFVT<unsigned long long, double> { };\n+\n+class Edge;\n+extern int flag2;\n+\n+double foo(TP *p) {\n+  int nbests_requested = max(p->max_s_, flag);\n+  map<int, int>::iterator it = cs_.find(p->cl_);\n+  int* c = &it->second;\n+  for (vector<int>::const_iterator iter = p->its_.begin();\n+       iter != p->its_.end();\n+       ++iter) {\n+  }\n+  vector<int*> fb;\n+  vector<double> w;\n+  int *hg = 0;\n+  if (flag2 == 10) {\n+    hg = &flag2;\n+  }\n+  int nr = 0;\n+  for (vector<int*>::iterator iter = fb.begin();\n+       (iter != fb.end() && nr < nbests_requested);\n+       ++iter) {\n+  }\n+  if (hg) {\n+    SFV s_weights;\n+    for (int i = 0;\n+         i < w.size();\n+         ++i) {\n+    }\n+    SFV uw;\n+    for (int i = 0, j = 0;\n+         i < uw.size() && j < s_weights.size();\n+         ) {\n+    }\n+    const double tc = uw.DP(s_weights);\n+  }\n+}"}, {"sha": "b8e999ccdcaaf242f1ed93c6c60abbd4fdf3f0c5", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af078bb0cf6e9b547c4f883e294f529914339cd0/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af078bb0cf6e9b547c4f883e294f529914339cd0/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=af078bb0cf6e9b547c4f883e294f529914339cd0", "patch": "@@ -1490,10 +1490,17 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t      continue;\n \t    else\n \t      {\n+                pre_expr leader, result;\n+                bitmap temp = BITMAP_ALLOC (&grand_bitmap_obstack);\n \t\tunsigned int op_val_id = VN_INFO (newnary.op[i])->value_id;\n-\t\tpre_expr leader = find_leader_in_sets (op_val_id, set1, set2);\n-\t\tpre_expr result = phi_translate_1 (leader, set1, set2,\n+\n+                bitmap_copy (temp, seen);\n+\t\tleader = find_leader_in_sets (op_val_id, set1, set2);\n+                result = phi_translate_1 (leader, set1, set2,\n \t\t\t\t\t\t   pred, phiblock, seen);\n+                bitmap_copy (seen, temp);\n+                BITMAP_FREE (temp);\n+\n \t\tif (result && result != leader)\n \t\t  {\n \t\t    tree name = get_representative_for (result);"}]}