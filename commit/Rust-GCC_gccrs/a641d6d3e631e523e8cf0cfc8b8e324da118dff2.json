{"sha": "a641d6d3e631e523e8cf0cfc8b8e324da118dff2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY0MWQ2ZDNlNjMxZTUyM2U4Y2YwY2ZjOGI4ZTMyNGRhMTE4ZGZmMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-19T13:11:22Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-19T13:19:31Z"}, "message": "preprocessor: Fix ICE with EOF in macro args [pr95182]\n\nThis was another latent case of us losing an EOF token, but succeeding\nanyway.  Since my patch to make us pay more attention to EOFs it came\nto light.  We also need to keep the EOF if we fall off the end of the\nmain file.  Forced includes look like regular nested includes at this\npoint.\n\n\tPR preprocessor/95182\n\tlibcpp/\n\t* macro.c (collect_args): Preserve EOFif we fell out of the main\n\tfile.\n\t(cpp_get_token_1): Reformat a couple of short lines.", "tree": {"sha": "e758c982763a130f5ec3e92f0decd43d84affaf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e758c982763a130f5ec3e92f0decd43d84affaf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a641d6d3e631e523e8cf0cfc8b8e324da118dff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a641d6d3e631e523e8cf0cfc8b8e324da118dff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a641d6d3e631e523e8cf0cfc8b8e324da118dff2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a641d6d3e631e523e8cf0cfc8b8e324da118dff2/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92ea8e1bccc6a703407570471f6323bfa554af99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ea8e1bccc6a703407570471f6323bfa554af99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92ea8e1bccc6a703407570471f6323bfa554af99"}], "stats": {"total": 52, "additions": 43, "deletions": 9}, "files": [{"sha": "0a06f091d9355724f1d84382a4ea1aa3044d5306", "filename": "gcc/testsuite/c-c++-common/cpp/eof-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a641d6d3e631e523e8cf0cfc8b8e324da118dff2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a641d6d3e631e523e8cf0cfc8b8e324da118dff2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-1.c?ref=a641d6d3e631e523e8cf0cfc8b8e324da118dff2", "patch": "@@ -0,0 +1,7 @@\n+/* PR preprocess/95183  */\n+\n+/* { dg-do preprocess } */\n+\n+#define f(x) x\n+\n+f( /* { dg-error \"-:unterminated\" \"unterminated macro\" } */"}, {"sha": "3a4af7f685002797c037da33dc87b79ae62f4f13", "filename": "gcc/testsuite/c-c++-common/cpp/eof-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a641d6d3e631e523e8cf0cfc8b8e324da118dff2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a641d6d3e631e523e8cf0cfc8b8e324da118dff2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-2.c?ref=a641d6d3e631e523e8cf0cfc8b8e324da118dff2", "patch": "@@ -0,0 +1,8 @@\n+/* PR preprocess/95183  */\n+\n+/* { dg-do preprocess } */\n+\n+#define f(x) x\n+\n+#include \"eof-2.h\"\n+ /* { dg-regexp {[^\\n]*eof-2.h:4: error: unterminated argument list invoking macro \"f\"\\n} } */"}, {"sha": "48ad85791dbea64e20a50ee07a4e87cfebab7e8d", "filename": "gcc/testsuite/c-c++-common/cpp/eof-2.h", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a641d6d3e631e523e8cf0cfc8b8e324da118dff2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a641d6d3e631e523e8cf0cfc8b8e324da118dff2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-2.h?ref=a641d6d3e631e523e8cf0cfc8b8e324da118dff2", "patch": "@@ -0,0 +1,4 @@\n+\n+#define f(x) x\n+\n+f( /* Error here  */"}, {"sha": "316918e3a6cb74dde45ec104f1581434bcc033f3", "filename": "gcc/testsuite/c-c++-common/cpp/eof-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a641d6d3e631e523e8cf0cfc8b8e324da118dff2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a641d6d3e631e523e8cf0cfc8b8e324da118dff2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-3.c?ref=a641d6d3e631e523e8cf0cfc8b8e324da118dff2", "patch": "@@ -0,0 +1,8 @@\n+/* PR preprocess/95183  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-additional-options \"-include $srcdir/c-c++-common/cpp/eof-2.h\" } */\n+\n+ /* { dg-regexp {[^\\n]*eof-2.h:4: error: unterminated argument list invoking macro \"f\"\\n} } */\n+\n+token )"}, {"sha": "6c3cf092913a5c51f780d0ab2c4fc15627933152", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a641d6d3e631e523e8cf0cfc8b8e324da118dff2/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a641d6d3e631e523e8cf0cfc8b8e324da118dff2/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=a641d6d3e631e523e8cf0cfc8b8e324da118dff2", "patch": "@@ -1,3 +1,10 @@\n+2020-05-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR preprocessor/95182\n+\t* macro.c (collect_args): Preserve EOFif we fell out of the main\n+\tfile.\n+\t(cpp_get_token_1): Reformat a couple of short lines.\n+\n 2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* configure: Regenerated."}, {"sha": "2c7d7322e09c6ca425b58392f591dc5bc87de70f", "filename": "libcpp/macro.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a641d6d3e631e523e8cf0cfc8b8e324da118dff2/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a641d6d3e631e523e8cf0cfc8b8e324da118dff2/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=a641d6d3e631e523e8cf0cfc8b8e324da118dff2", "patch": "@@ -1258,11 +1258,13 @@ collect_args (cpp_reader *pfile, const cpp_hashnode *node,\n \n   if (token->type == CPP_EOF)\n     {\n-      /* We still need the CPP_EOF to end directives, and to end\n-\t pre-expansion of a macro argument.  Step back is not\n-\t unconditional, since we don't want to return a CPP_EOF to our\n-\t callers at the end of an -include-d file.  */\n-      if (pfile->context->prev || pfile->state.in_directive)\n+      /* We still need the CPP_EOF to end directives, to end\n+\t pre-expansion of a macro argument, and at the end of the main\n+\t file.  We do not want it at the end of a -include'd (forced)\n+\t header file.  */\n+      if (pfile->state.in_directive\n+\t  || !pfile->line_table->depth\n+\t  || pfile->context->prev)\n \t_cpp_backup_tokens (pfile, 1);\n       cpp_error (pfile, CPP_DL_ERROR,\n \t\t \"unterminated argument list invoking macro \\\"%s\\\"\",\n@@ -2870,8 +2872,7 @@ cpp_get_token_1 (cpp_reader *pfile, location_t *location)\n \t\t\t\t      || (peek_tok->flags & PREV_WHITE));\n \t\t  node = pfile->cb.macro_to_expand (pfile, result);\n \t\t  if (node)\n-\t\t    ret = enter_macro_context (pfile, node, result,\n-\t\t\t\t\t       virt_loc);\n+\t\t    ret = enter_macro_context (pfile, node, result, virt_loc);\n \t\t  else if (whitespace_after)\n \t\t    {\n \t\t      /* If macro_to_expand hook returned NULL and it\n@@ -2888,8 +2889,7 @@ cpp_get_token_1 (cpp_reader *pfile, location_t *location)\n \t\t}\n \t    }\n \t  else\n-\t    ret = enter_macro_context (pfile, node, result, \n-\t\t\t\t       virt_loc);\n+\t    ret = enter_macro_context (pfile, node, result, virt_loc);\n \t  if (ret)\n  \t    {\n \t      if (pfile->state.in_directive || ret == 2)"}]}