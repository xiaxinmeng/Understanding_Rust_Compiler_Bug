{"sha": "9b2133cd43147d8172168d193015f222d8f2fe61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIyMTMzY2Q0MzE0N2Q4MTcyMTY4ZDE5MzAxNWYyMjJkOGYyZmU2MQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2010-06-23T14:11:23Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-06-23T14:11:23Z"}, "message": "Split AVX vec_extract_lo_XXX and 128bit to 256bit cast.\n\nRemove 256bit to 128bit cast.\n\n2010-06-23  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (bdesc_args): Replace CODE_FOR_avx_si_si256,\n\tCODE_FOR_avx_ps_ps256 and CODE_FOR_avx_pd_pd256 with\n\tCODE_FOR_vec_extract_lo_v8si, CODE_FOR_vec_extract_lo_v8sf\n\tand CODE_FOR_vec_extract_lo_v4df.\n\n\t* config/i386/sse.md (vec_extract_lo_<AVX256MODE4P:mode>):\n\tChanged to define_insn_and_split.\n\t(vec_extract_lo_<AVX256MODE8P:mode>): Likewise.\n\t(vec_extract_lo_v16hi): Likewise.\n\t(vec_extract_lo_v32qi): Likewise.\n\t(avx_<avxmodesuffixp><avxmodesuffix>_<avxmodesuffixp>): Likewise.\n\t(avx_<avxmodesuffixp>_<avxmodesuffixp><avxmodesuffix>): Removed.\n\nFrom-SVN: r161279", "tree": {"sha": "011976420f9976f0d209bb6859f20bd36eb5f710", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/011976420f9976f0d209bb6859f20bd36eb5f710"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b2133cd43147d8172168d193015f222d8f2fe61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2133cd43147d8172168d193015f222d8f2fe61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b2133cd43147d8172168d193015f222d8f2fe61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2133cd43147d8172168d193015f222d8f2fe61/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e487f350e432d9182a0e19da9c5eb444caba8d0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e487f350e432d9182a0e19da9c5eb444caba8d0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e487f350e432d9182a0e19da9c5eb444caba8d0c"}], "stats": {"total": 194, "additions": 88, "deletions": 106}, "files": [{"sha": "efb514afa019c61c8a165f52db05575234019e19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2133cd43147d8172168d193015f222d8f2fe61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2133cd43147d8172168d193015f222d8f2fe61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b2133cd43147d8172168d193015f222d8f2fe61", "patch": "@@ -1,3 +1,18 @@\n+2010-06-23  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (bdesc_args): Replace CODE_FOR_avx_si_si256,\n+\tCODE_FOR_avx_ps_ps256 and CODE_FOR_avx_pd_pd256 with\n+\tCODE_FOR_vec_extract_lo_v8si, CODE_FOR_vec_extract_lo_v8sf\n+\tand CODE_FOR_vec_extract_lo_v4df.\n+\n+\t* config/i386/sse.md (vec_extract_lo_<AVX256MODE4P:mode>):\n+\tChanged to define_insn_and_split.\n+\t(vec_extract_lo_<AVX256MODE8P:mode>): Likewise.\n+\t(vec_extract_lo_v16hi): Likewise.\n+\t(vec_extract_lo_v32qi): Likewise.\n+\t(avx_<avxmodesuffixp><avxmodesuffix>_<avxmodesuffixp>): Likewise.\n+\t(avx_<avxmodesuffixp>_<avxmodesuffixp><avxmodesuffix>): Removed.\n+\n 2010-06-23  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \tPR target/44640"}, {"sha": "d5a91e6c629d01a9ca1995bf6a9a3910050db11d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2133cd43147d8172168d193015f222d8f2fe61/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2133cd43147d8172168d193015f222d8f2fe61/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9b2133cd43147d8172168d193015f222d8f2fe61", "patch": "@@ -22457,9 +22457,9 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_si256_si, \"__builtin_ia32_si256_si\", IX86_BUILTIN_SI256_SI, UNKNOWN, (int) V8SI_FTYPE_V4SI },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_ps256_ps, \"__builtin_ia32_ps256_ps\", IX86_BUILTIN_PS256_PS, UNKNOWN, (int) V8SF_FTYPE_V4SF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_pd256_pd, \"__builtin_ia32_pd256_pd\", IX86_BUILTIN_PD256_PD, UNKNOWN, (int) V4DF_FTYPE_V2DF },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_si_si256, \"__builtin_ia32_si_si256\", IX86_BUILTIN_SI_SI256, UNKNOWN, (int) V4SI_FTYPE_V8SI },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_ps_ps256, \"__builtin_ia32_ps_ps256\", IX86_BUILTIN_PS_PS256, UNKNOWN, (int) V4SF_FTYPE_V8SF },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_pd_pd256, \"__builtin_ia32_pd_pd256\", IX86_BUILTIN_PD_PD256, UNKNOWN, (int) V2DF_FTYPE_V4DF },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_vec_extract_lo_v8si, \"__builtin_ia32_si_si256\", IX86_BUILTIN_SI_SI256, UNKNOWN, (int) V4SI_FTYPE_V8SI },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_vec_extract_lo_v8sf, \"__builtin_ia32_ps_ps256\", IX86_BUILTIN_PS_PS256, UNKNOWN, (int) V4SF_FTYPE_V8SF },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_vec_extract_lo_v4df, \"__builtin_ia32_pd_pd256\", IX86_BUILTIN_PD_PD256, UNKNOWN, (int) V2DF_FTYPE_V4DF },\n \n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vtestpd, \"__builtin_ia32_vtestzpd\", IX86_BUILTIN_VTESTZPD, EQ, (int) INT_FTYPE_V2DF_V2DF_PTEST },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vtestpd, \"__builtin_ia32_vtestcpd\", IX86_BUILTIN_VTESTCPD, LTU, (int) INT_FTYPE_V2DF_V2DF_PTEST },"}, {"sha": "f5e716f21497d075ffeeb994429f89ee7b5f06e0", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 70, "deletions": 103, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2133cd43147d8172168d193015f222d8f2fe61/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2133cd43147d8172168d193015f222d8f2fe61/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=9b2133cd43147d8172168d193015f222d8f2fe61", "patch": "@@ -4171,19 +4171,24 @@\n   DONE;\n })\n \n-(define_insn \"vec_extract_lo_<mode>\"\n+(define_insn_and_split \"vec_extract_lo_<mode>\"\n   [(set (match_operand:<avxhalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n \t(vec_select:<avxhalfvecmode>\n-\t  (match_operand:AVX256MODE4P 1 \"register_operand\" \"x,x\")\n+\t  (match_operand:AVX256MODE4P 1 \"nonimmediate_operand\" \"xm,x\")\n \t  (parallel [(const_int 0) (const_int 1)])))]\n   \"TARGET_AVX\"\n-  \"vextractf128\\t{$0x0, %1, %0|%0, %1, 0x0}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"memory\" \"none,store\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V8SF\")])\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx op1 = operands[1];\n+  if (REG_P (op1))\n+    op1 = gen_rtx_REG (<avxhalfvecmode>mode, REGNO (op1));\n+  else\n+    op1 = gen_lowpart (<avxhalfvecmode>mode, op1);\n+  emit_move_insn (operands[0], op1);\n+  DONE;\n+})\n \n (define_insn \"vec_extract_hi_<mode>\"\n   [(set (match_operand:<avxhalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n@@ -4199,20 +4204,25 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_insn \"vec_extract_lo_<mode>\"\n+(define_insn_and_split \"vec_extract_lo_<mode>\"\n   [(set (match_operand:<avxhalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n \t(vec_select:<avxhalfvecmode>\n-\t  (match_operand:AVX256MODE8P 1 \"register_operand\" \"x,x\")\n+\t  (match_operand:AVX256MODE8P 1 \"nonimmediate_operand\" \"xm,x\")\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 3)])))]\n   \"TARGET_AVX\"\n-  \"vextractf128\\t{$0x0, %1, %0|%0, %1, 0x0}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"memory\" \"none,store\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V8SF\")])\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx op1 = operands[1];\n+  if (REG_P (op1))\n+    op1 = gen_rtx_REG (<avxhalfvecmode>mode, REGNO (op1));\n+  else\n+    op1 = gen_lowpart (<avxhalfvecmode>mode, op1);\n+  emit_move_insn (operands[0], op1);\n+  DONE;\n+})\n \n (define_insn \"vec_extract_hi_<mode>\"\n   [(set (match_operand:<avxhalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n@@ -4229,22 +4239,27 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_insn \"vec_extract_lo_v16hi\"\n+(define_insn_and_split \"vec_extract_lo_v16hi\"\n   [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=x,m\")\n \t(vec_select:V8HI\n-\t  (match_operand:V16HI 1 \"register_operand\" \"x,x\")\n+\t  (match_operand:V16HI 1 \"nonimmediate_operand\" \"xm,x\")\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 3)\n \t\t     (const_int 4) (const_int 5)\n \t\t     (const_int 6) (const_int 7)])))]\n   \"TARGET_AVX\"\n-  \"vextractf128\\t{$0x0, %1, %0|%0, %1, 0x0}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"memory\" \"none,store\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V8SF\")])\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx op1 = operands[1];\n+  if (REG_P (op1))\n+    op1 = gen_rtx_REG (V8HImode, REGNO (op1));\n+  else\n+    op1 = gen_lowpart (V8HImode, op1);\n+  emit_move_insn (operands[0], op1);\n+  DONE;\n+})\n \n (define_insn \"vec_extract_hi_v16hi\"\n   [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=x,m\")\n@@ -4263,10 +4278,10 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_insn \"vec_extract_lo_v32qi\"\n+(define_insn_and_split \"vec_extract_lo_v32qi\"\n   [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=x,m\")\n \t(vec_select:V16QI\n-\t  (match_operand:V32QI 1 \"register_operand\" \"x,x\")\n+\t  (match_operand:V32QI 1 \"nonimmediate_operand\" \"xm,x\")\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 3)\n \t\t     (const_int 4) (const_int 5)\n@@ -4276,13 +4291,18 @@\n \t\t     (const_int 12) (const_int 13)\n \t\t     (const_int 14) (const_int 15)])))]\n   \"TARGET_AVX\"\n-  \"vextractf128\\t{$0x0, %1, %0|%0, %1, 0x0}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"memory\" \"none,store\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V8SF\")])\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx op1 = operands[1];\n+  if (REG_P (op1))\n+    op1 = gen_rtx_REG (V16QImode, REGNO (op1));\n+  else\n+    op1 = gen_lowpart (V16QImode, op1);\n+  emit_move_insn (operands[0], op1);\n+  DONE;\n+})\n \n (define_insn \"vec_extract_hi_v32qi\"\n   [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=x,m\")\n@@ -12244,77 +12264,24 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx_<avxmodesuffixp><avxmodesuffix>_<avxmodesuffixp>\"\n-  [(set (match_operand:AVX256MODE2P 0 \"register_operand\" \"=x,x\")\n+(define_insn_and_split \"avx_<avxmodesuffixp><avxmodesuffix>_<avxmodesuffixp>\"\n+  [(set (match_operand:AVX256MODE2P 0 \"nonimmediate_operand\" \"=x,m\")\n \t(unspec:AVX256MODE2P\n-\t  [(match_operand:<avxhalfvecmode> 1 \"nonimmediate_operand\" \"0,xm\")]\n-\t  UNSPEC_CAST))]\n-  \"TARGET_AVX\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \"\";\n-    case 1:\n-      switch (get_attr_mode (insn))\n-        {\n-\tcase MODE_V8SF:\n-\t  return \"vmovaps\\t{%1, %x0|%x0, %1}\";\n-\tcase MODE_V4DF:\n-\t  return \"vmovapd\\t{%1, %x0|%x0, %1}\";\n-\tcase MODE_OI:\n-\t  return \"vmovdqa\\t{%1, %x0|%x0, %1}\";\n-\tdefault:\n-\t  break;\n-\t}\n-    default:\n-      break;\n-    }\n-  gcc_unreachable ();\n-}\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"<avxvecmode>\")\n-   (set (attr \"length\")\n-    (if_then_else (eq_attr \"alternative\" \"0\")\n-       (const_string \"0\")\n-       (const_string \"*\")))])\n-\n-(define_insn \"avx_<avxmodesuffixp>_<avxmodesuffixp><avxmodesuffix>\"\n-  [(set (match_operand:<avxhalfvecmode> 0 \"register_operand\" \"=x,x\")\n-\t(unspec:<avxhalfvecmode>\n-\t  [(match_operand:AVX256MODE2P 1 \"nonimmediate_operand\" \"0,xm\")]\n+\t  [(match_operand:<avxhalfvecmode> 1 \"nonimmediate_operand\" \"xm,x\")]\n \t  UNSPEC_CAST))]\n   \"TARGET_AVX\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n {\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \"\";\n-    case 1:\n-      switch (get_attr_mode (insn))\n-        {\n-\tcase MODE_V8SF:\n-\t  return \"vmovaps\\t{%x1, %0|%0, %x1}\";\n-\tcase MODE_V4DF:\n-\t  return \"vmovapd\\t{%x1, %0|%0, %x1}\";\n-\tcase MODE_OI:\n-\t  return \"vmovdqa\\t{%x1, %0|%0, %x1}\";\n-\tdefault:\n-\t  break;\n-\t}\n-    default:\n-      break;\n-    }\n-  gcc_unreachable ();\n-}\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"<avxvecmode>\")\n-   (set (attr \"length\")\n-    (if_then_else (eq_attr \"alternative\" \"0\")\n-       (const_string \"0\")\n-       (const_string \"*\")))])\n+  rtx op1 = operands[1];\n+  if (REG_P (op1))\n+    op1 = gen_rtx_REG (<MODE>mode, REGNO (op1));\n+  else\n+    op1 = gen_lowpart (<MODE>mode, op1);\n+  emit_move_insn (operands[0], op1);\n+  DONE;\n+})\n \n (define_expand \"vec_init<mode>\"\n   [(match_operand:AVX256MODE 0 \"register_operand\" \"\")"}]}