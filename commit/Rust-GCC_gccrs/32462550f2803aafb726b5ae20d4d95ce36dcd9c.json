{"sha": "32462550f2803aafb726b5ae20d4d95ce36dcd9c", "node_id": "C_kwDOANBUbNoAKDMyNDYyNTUwZjI4MDNhYWZiNzI2YjVhZTIwZDRkOTVjZTM2ZGNkOWM", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-05-11T11:50:11Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-16T19:31:17Z"}, "message": "RISC-V: Split \"(a & (1UL << bitno)) ? 0 : -1\" to bext + addi\n\nFor a straightforward application of bext for the following function\n  long bext64(long a, char bitno)\n  {\n    return (a & (1UL << bitno)) ? 0 : -1;\n  }\nwe generate\n\tsrl\ta0,a0,a1\t# 7\t[c=4 l=4]  lshrdi3\n\tandi\ta0,a0,1\t# 8\t[c=4 l=4]  anddi3/1\n\taddi\ta0,a0,-1\t# 14\t[c=4 l=4]  adddi3/1\ndue to the following failed match at combine time:\n  (set (reg:DI 82)\n       (zero_extract:DI (reg:DI 83)\n            (const_int 1 [0x1])\n            (reg:DI 84)))\n\nThe existing pattern for bext requires the 3rd argument to\nzero_extract to be a QImode register wrapped in a zero_extension.\nThis adds an additional pattern that allows an Xmode argument.\n\nWith this change, the testcase compiles to\n\tbext\ta0,a0,a1\t# 8\t[c=4 l=4]  *bextdi\n\taddi\ta0,a0,-1\t# 14\t[c=4 l=4]  adddi3/1\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md (*bext<mode>): Add an additional\n\tpattern that allows the 3rd argument to zero_extract to be\n\tan Xmode register operand.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zbs-bext.c: Add testcases.\n\t* gcc.target/riscv/zbs-bexti.c: Add testcases.", "tree": {"sha": "f687f33888770a4ec5c9144ae43d899b9e56fe98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f687f33888770a4ec5c9144ae43d899b9e56fe98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32462550f2803aafb726b5ae20d4d95ce36dcd9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32462550f2803aafb726b5ae20d4d95ce36dcd9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32462550f2803aafb726b5ae20d4d95ce36dcd9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32462550f2803aafb726b5ae20d4d95ce36dcd9c/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91d51457532da6c2179b23359435f06d89488e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e91d51457532da6c2179b23359435f06d89488e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e91d51457532da6c2179b23359435f06d89488e7"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "86cc85001c35c9fa64c6c77fef946002ca10f9b4", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32462550f2803aafb726b5ae20d4d95ce36dcd9c/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32462550f2803aafb726b5ae20d4d95ce36dcd9c/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=32462550f2803aafb726b5ae20d4d95ce36dcd9c", "patch": "@@ -394,6 +394,18 @@\n   \"bext\\t%0,%1,%2\"\n   [(set_attr \"type\" \"bitmanip\")])\n \n+;; When performing `(a & (1UL << bitno)) ? 0 : -1` the combiner\n+;; usually has the `bitno` typed as X-mode (i.e. no further\n+;; zero-extension is performed around the bitno).\n+(define_insn \"*bext<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(zero_extract:X (match_operand:X 1 \"register_operand\" \"r\")\n+\t\t\t(const_int 1)\n+\t\t\t(match_operand:X 2 \"register_operand\" \"r\")))]\n+  \"TARGET_ZBS\"\n+  \"bext\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n (define_insn \"*bexti\"\n   [(set (match_operand:X 0 \"register_operand\" \"=r\")\n \t(zero_extract:X (match_operand:X 1 \"register_operand\" \"r\")"}, {"sha": "8de9c5a167c6b5b75c50551cce7f61f01a111afd", "filename": "gcc/testsuite/gcc.target/riscv/zbs-bext.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32462550f2803aafb726b5ae20d4d95ce36dcd9c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32462550f2803aafb726b5ae20d4d95ce36dcd9c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bext.c?ref=32462550f2803aafb726b5ae20d4d95ce36dcd9c", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-march=rv64gc_zbs -mabi=lp64\" } */\n-/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-Og\" } } */\n \n /* bext */\n long\n@@ -16,6 +16,23 @@ foo1 (long i)\n   return 1L & (i >> 20);\n }\n \n+long bext64_1(long a, char bitno)\n+{\n+  return (a & (1UL << bitno)) ? 1 : 0;\n+}\n+\n+long bext64_2(long a, char bitno)\n+{\n+  return (a & (1UL << bitno)) ? 0 : -1;\n+}\n+\n+long bext64_3(long a, char bitno)\n+{\n+  return (a & (1UL << bitno)) ? -1 : 0;\n+}\n+\n /* { dg-final { scan-assembler-times \"bexti\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"bext\\t\" 1 } } */\n-/* { dg-final { scan-assembler-not \"andi\" } } */\n+/* { dg-final { scan-assembler-times \"bext\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"addi\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"neg\\t\" 1 } } */\n+/* { dg-final { scan-assembler-not \"andi\" } } */\n\\ No newline at end of file"}, {"sha": "30b69c9bc3e531ba94c941994291430770dee447", "filename": "gcc/testsuite/gcc.target/riscv/zbs-bexti.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32462550f2803aafb726b5ae20d4d95ce36dcd9c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bexti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32462550f2803aafb726b5ae20d4d95ce36dcd9c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bexti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bexti.c?ref=32462550f2803aafb726b5ae20d4d95ce36dcd9c", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbs -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-Og\" } } */\n+\n+/* bexti */\n+#define BIT_NO  21\n+\n+long bexti64_1(long a, char bitno)\n+{\n+  return (a & (1UL << BIT_NO)) ? 1 : 0;\n+}\n+\n+long bexti64_2(long a, char bitno)\n+{\n+  return (a & (1UL << BIT_NO)) ? 0 : -1;\n+}\n+\n+long bexti64_3(long a, char bitno)\n+{\n+  return (a & (1UL << BIT_NO)) ? -1 : 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bexti\\t\" 3 } } */\n+/* { dg-final { scan-assembler-times \"addi\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"neg\\t\" 1 } } */"}]}