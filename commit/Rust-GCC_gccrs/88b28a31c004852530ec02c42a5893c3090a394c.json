{"sha": "88b28a31c004852530ec02c42a5893c3090a394c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhiMjhhMzFjMDA0ODUyNTMwZWMwMmM0MmE1ODkzYzMwOTBhMzk0Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2004-04-15T02:43:46Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-04-15T02:43:46Z"}, "message": "optabs.h (enum optab_index): Add new OTI_logb and OTI_ilogb.\n\n2004-04-14  Uros Bizjak  <uros@kss-loka.si>\n\n\t* optabs.h (enum optab_index): Add new OTI_logb and OTI_ilogb.\n\t(logb_optab, ilogb_optab): Define corresponding macros.\n\t* optabs.c (init_optabs): Initialize logb_optab and ilogb_optab.\n\t* genopinit.c (optabs): Implement logb_optab and ilogb_optab\n\tusing logb?f2 and ilogb?i2 patterns.\n\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_LOGB{,F,L}\n\tusing logb_optab, and BUILT_IN_ILOGB{,F,L} using ilogb_optab.\n\t(expand_builtin): Expand BUILT_IN_LOGB{,F,L} and BUILT_IN_ILOGB{,F,L}\n\tusing expand_builtin_mathfn if flag_unsafe_math_optimizations is set.\n\n\t* reg-stack.c (subst_stack_regs_pat): Handle UNSPEC_XTRACT_FRACT\n\tand UNSPEC_XTRACT_EXP.\n\n\t* config/i386/i386.md (*fxtractdf3, *fxtractsf3, *fxtractxf3): New\n\tpatterns to implement fxtract x87 instruction.\n\t(logbdf2, logbsf2, logbxf2, ilogbsi2): New expanders to implement\n\tlogb, logbf, logbl, ilogb, ilogbf and ilogbl built-ins as inline x87\n\tintrinsics.\n\t(UNSPEC_XTRACT_FRACT, UNSPEC_XTRACT_EXP): New unspecs to represent\n\tx87's fxtract insn.\n\n\t* gcc.dg/builtins-38.c: New test.\n\nFrom-SVN: r80709", "tree": {"sha": "a547f0ea372bc9cb69e8d7bac590390b63bae146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a547f0ea372bc9cb69e8d7bac590390b63bae146"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88b28a31c004852530ec02c42a5893c3090a394c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b28a31c004852530ec02c42a5893c3090a394c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b28a31c004852530ec02c42a5893c3090a394c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b28a31c004852530ec02c42a5893c3090a394c/comments", "author": null, "committer": null, "parents": [{"sha": "2aa01719a5e9edfec61575b30364c9271592572a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa01719a5e9edfec61575b30364c9271592572a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aa01719a5e9edfec61575b30364c9271592572a"}], "stats": {"total": 190, "additions": 190, "deletions": 0}, "files": [{"sha": "428b3fb0c4bbf041640097f444f108323015fa8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88b28a31c004852530ec02c42a5893c3090a394c", "patch": "@@ -1,3 +1,26 @@\n+2004-04-14  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* optabs.h (enum optab_index): Add new OTI_logb and OTI_ilogb.\n+\t(logb_optab, ilogb_optab): Define corresponding macros.\n+\t* optabs.c (init_optabs): Initialize logb_optab and ilogb_optab.\n+\t* genopinit.c (optabs): Implement logb_optab and ilogb_optab\n+\tusing logb?f2 and ilogb?i2 patterns.\n+\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_LOGB{,F,L}\n+\tusing logb_optab, and BUILT_IN_ILOGB{,F,L} using ilogb_optab.\n+\t(expand_builtin): Expand BUILT_IN_LOGB{,F,L} and BUILT_IN_ILOGB{,F,L}\n+\tusing expand_builtin_mathfn if flag_unsafe_math_optimizations is set.\n+\n+\t* reg-stack.c (subst_stack_regs_pat): Handle UNSPEC_XTRACT_FRACT\n+\tand UNSPEC_XTRACT_EXP.\n+\n+\t* config/i386/i386.md (*fxtractdf3, *fxtractsf3, *fxtractxf3): New\n+\tpatterns to implement fxtract x87 instruction.\n+\t(logbdf2, logbsf2, logbxf2, ilogbsi2): New expanders to implement\n+\tlogb, logbf, logbl, ilogb, ilogbf and ilogbl built-ins as inline x87\n+\tintrinsics.\n+\t(UNSPEC_XTRACT_FRACT, UNSPEC_XTRACT_EXP): New unspecs to represent\n+\tx87's fxtract insn.\n+\n 2004-04-14  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/t-elf: Enable multilibs by default."}, {"sha": "d653ec75f1ad574e47ea699e334cbe62d6d17507", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=88b28a31c004852530ec02c42a5893c3090a394c", "patch": "@@ -1565,6 +1565,14 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n     case BUILT_IN_EXP2F:\n     case BUILT_IN_EXP2L:\n       errno_set = true; builtin_optab = exp2_optab; break;\n+    case BUILT_IN_LOGB:\n+    case BUILT_IN_LOGBF:\n+    case BUILT_IN_LOGBL:\n+      errno_set = true; builtin_optab = logb_optab; break;\n+    case BUILT_IN_ILOGB:\n+    case BUILT_IN_ILOGBF:\n+    case BUILT_IN_ILOGBL:\n+      errno_set = true; builtin_optab = ilogb_optab; break;\n     case BUILT_IN_LOG:\n     case BUILT_IN_LOGF:\n     case BUILT_IN_LOGL:\n@@ -5178,6 +5186,12 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_EXP2:\n     case BUILT_IN_EXP2F:\n     case BUILT_IN_EXP2L:\n+    case BUILT_IN_LOGB:\n+    case BUILT_IN_LOGBF:\n+    case BUILT_IN_LOGBL:\n+    case BUILT_IN_ILOGB:\n+    case BUILT_IN_ILOGBF:\n+    case BUILT_IN_ILOGBL:\n     case BUILT_IN_LOG:\n     case BUILT_IN_LOGF:\n     case BUILT_IN_LOGL:"}, {"sha": "2c498e0bf9f39f7d0151a032f9a8bead431d9bf2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=88b28a31c004852530ec02c42a5893c3090a394c", "patch": "@@ -126,6 +126,8 @@\n    (UNSPEC_SINCOS_SIN\t\t81)\n    (UNSPEC_TAN_ONE\t\t82)\n    (UNSPEC_TAN_TAN\t\t83)\n+   (UNSPEC_XTRACT_FRACT\t\t84)\n+   (UNSPEC_XTRACT_EXP\t\t85)\n \n    ; REP instruction\n    (UNSPEC_REP\t\t\t75)\n@@ -15445,6 +15447,94 @@\n   emit_move_insn (operands[2], CONST1_RTX (XFmode));  /* fld1 */\n })\n \n+(define_insn \"*fxtractdf3\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 2 \"register_operand\" \"0\")]\n+\t\t   UNSPEC_XTRACT_FRACT))\n+   (set (match_operand:DF 1 \"register_operand\" \"=u\")\n+        (unspec:DF [(match_dup 2)] UNSPEC_XTRACT_EXP))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+  \"fxtract\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"DF\")])\n+\n+(define_expand \"logbdf2\"\n+  [(parallel [(set (match_dup 2)\n+\t\t   (unspec:DF [(match_operand:DF 1 \"register_operand\" \"\")]\n+\t\t\t      UNSPEC_XTRACT_FRACT))\n+\t      (set (match_operand:DF 0 \"register_operand\" \"\")\n+\t\t   (unspec:DF [(match_dup 1)] UNSPEC_XTRACT_EXP))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  operands[2] = gen_reg_rtx (DFmode);\n+})\n+\n+(define_insn \"*fxtractsf3\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 2 \"register_operand\" \"0\")]\n+\t\t   UNSPEC_XTRACT_FRACT))\n+   (set (match_operand:SF 1 \"register_operand\" \"=u\")\n+        (unspec:SF [(match_dup 2)] UNSPEC_XTRACT_EXP))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+  \"fxtract\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+(define_expand \"logbsf2\"\n+  [(parallel [(set (match_dup 2)\n+\t\t   (unspec:SF [(match_operand:SF 1 \"register_operand\" \"\")]\n+\t\t\t      UNSPEC_XTRACT_FRACT))\n+\t      (set (match_operand:SF 0 \"register_operand\" \"\")\n+\t\t   (unspec:SF [(match_dup 1)] UNSPEC_XTRACT_EXP))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  operands[2] = gen_reg_rtx (SFmode);\n+})\n+\n+(define_insn \"*fxtractxf3\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")]\n+\t\t   UNSPEC_XTRACT_FRACT))\n+   (set (match_operand:XF 1 \"register_operand\" \"=u\")\n+        (unspec:XF [(match_dup 2)] UNSPEC_XTRACT_EXP))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+  \"fxtract\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_expand \"logbxf2\"\n+  [(parallel [(set (match_dup 2)\n+\t\t   (unspec:XF [(match_operand:XF 1 \"register_operand\" \"\")]\n+\t\t\t      UNSPEC_XTRACT_FRACT))\n+\t      (set (match_operand:XF 0 \"register_operand\" \"\")\n+\t\t   (unspec:XF [(match_dup 1)] UNSPEC_XTRACT_EXP))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  operands[2] = gen_reg_rtx (XFmode);\n+})\n+\n+(define_expand \"ilogbsi2\"\n+  [(parallel [(set (match_dup 2)\n+\t\t   (unspec:XF [(match_operand:XF 1 \"register_operand\" \"\")]\n+\t\t\t      UNSPEC_XTRACT_FRACT))\n+\t      (set (match_operand:XF 3 \"register_operand\" \"\")\n+\t\t   (unspec:XF [(match_dup 1)] UNSPEC_XTRACT_EXP))])\n+   (parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t           (fix:SI (match_dup 3)))\n+\t      (clobber (reg:CC 17))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  operands[2] = gen_reg_rtx (XFmode);\n+  operands[3] = gen_reg_rtx (XFmode);\n+})\n+\n (define_insn \"*fscale_sfxf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t (unspec:SF [(match_operand:XF 2 \"register_operand\" \"0\")"}, {"sha": "f817969cf99073548fb334fada5fa8b23a72a3c5", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=88b28a31c004852530ec02c42a5893c3090a394c", "patch": "@@ -128,6 +128,8 @@ static const char * const optabs[] =\n   \"exp_optab->handlers[$A].insn_code = CODE_FOR_$(exp$a2$)\",\n   \"exp10_optab->handlers[$A].insn_code = CODE_FOR_$(exp10$a2$)\",\n   \"exp2_optab->handlers[$A].insn_code = CODE_FOR_$(exp2$a2$)\",\n+  \"logb_optab->handlers[$A].insn_code = CODE_FOR_$(logb$a2$)\",\n+  \"ilogb_optab->handlers[$A].insn_code = CODE_FOR_$(ilogb$a2$)\",\n   \"log_optab->handlers[$A].insn_code = CODE_FOR_$(log$a2$)\",\n   \"log10_optab->handlers[$A].insn_code = CODE_FOR_$(log10$a2$)\",  \n   \"log2_optab->handlers[$A].insn_code = CODE_FOR_$(log2$a2$)\",  "}, {"sha": "e8f4dc055daa9c498e3d74daab333e2c9ed9d563", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=88b28a31c004852530ec02c42a5893c3090a394c", "patch": "@@ -5384,6 +5384,8 @@ init_optabs (void)\n   exp_optab = init_optab (UNKNOWN);\n   exp10_optab = init_optab (UNKNOWN);\n   exp2_optab = init_optab (UNKNOWN);\n+  logb_optab = init_optab (UNKNOWN);\n+  ilogb_optab = init_optab (UNKNOWN);\n   log_optab = init_optab (UNKNOWN);\n   log10_optab = init_optab (UNKNOWN);\n   log2_optab = init_optab (UNKNOWN);"}, {"sha": "16caa1855d6a305d7ff95fa07e3abb2acf9c5044", "filename": "gcc/optabs.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=88b28a31c004852530ec02c42a5893c3090a394c", "patch": "@@ -160,6 +160,9 @@ enum optab_index\n   OTI_exp10,\n   /* Base-2 Exponential */\n   OTI_exp2,\n+  /* Radix-independent exponent */\n+  OTI_logb,\n+  OTI_ilogb,\n   /* Natural Logarithm */\n   OTI_log,\n   /* Base-10 Logarithm */\n@@ -272,6 +275,8 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define exp_optab (optab_table[OTI_exp])\n #define exp10_optab (optab_table[OTI_exp10])\n #define exp2_optab (optab_table[OTI_exp2])\n+#define logb_optab (optab_table[OTI_logb])\n+#define ilogb_optab (optab_table[OTI_ilogb])\n #define log_optab (optab_table[OTI_log])\n #define log10_optab (optab_table[OTI_log10])\n #define log2_optab (optab_table[OTI_log2])"}, {"sha": "c3279d0206f55556afb767326e50f8e5dd245f73", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=88b28a31c004852530ec02c42a5893c3090a394c", "patch": "@@ -1770,6 +1770,7 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \n \t      case UNSPEC_SINCOS_COS:\n \t      case UNSPEC_TAN_ONE:\n+\t      case UNSPEC_XTRACT_FRACT:\n \t\t/* These insns operate on the top two stack slots,\n \t\t   first part of one input, double output insn.  */\n \n@@ -1798,6 +1799,7 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \n \t      case UNSPEC_SINCOS_SIN:\n \t      case UNSPEC_TAN_TAN:\n+\t      case UNSPEC_XTRACT_EXP:\n \t\t/* These insns operate on the top two stack slots,\n \t\t   second part of one input, double output insn.  */\n "}, {"sha": "b5be953740e85af8a094d19ba62f8293e2f97b9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88b28a31c004852530ec02c42a5893c3090a394c", "patch": "@@ -1,3 +1,7 @@\n+2004-04-14  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* gcc.dg/builtins-38.c: New test.\n+\n 2004-04-14  Eric Christopher  <echristo@redhat.com>\n \n \t* g++.dg/charset/charset.exp: Run .cc extension tests."}, {"sha": "210516bb7dc031566e2c7de51ab7bdff5bd0eabe", "filename": "gcc/testsuite/gcc.dg/builtins-38.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b28a31c004852530ec02c42a5893c3090a394c/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-38.c?ref=88b28a31c004852530ec02c42a5893c3090a394c", "patch": "@@ -0,0 +1,48 @@\n+/* Copyright (C) 2004 Free Software Foundation.\n+\n+   Check that logb, logbf, logbl, ilogb, ilogbf and ilogbl\n+   built-in functions compile.\n+\n+   Written by Uros Bizjak, 14th April 2004.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern double logb(double);\n+extern float logbf(float);\n+extern long double logbl(long double);\n+extern int ilogb(double);\n+extern int ilogbf(float);\n+extern int ilogbl(long double);\n+\n+\n+double test1(double x)\n+{\n+  return logb(x);\n+}\n+\n+float test1f(float x)\n+{\n+  return logbf(x);\n+}\n+\n+long double test1l(long double x)\n+{\n+  return logbl(x);\n+}\n+\n+int test2(double x)\n+{\n+  return ilogb(x);\n+}\n+\n+int test2f(float x)\n+{\n+  return ilogbf(x);\n+}\n+\n+int test2l(long double x)\n+{\n+  return ilogbl(x);\n+}\n+"}]}