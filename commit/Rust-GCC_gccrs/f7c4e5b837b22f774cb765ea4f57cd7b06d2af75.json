{"sha": "f7c4e5b837b22f774cb765ea4f57cd7b06d2af75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdjNGU1YjgzN2IyMmY3NzRjYjc2NWVhNGY1N2NkN2IwNmQyYWY3NQ==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-06-30T11:07:58Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-06-30T11:07:58Z"}, "message": "[AArch64] fix and enable non-const shuffle for bigendian using TBL instruction\n\n\t* config/aarch64/aarch64-simd.md (vec_perm): Enable for bigendian.\n\t* config/aarch64/aarch64.c (aarch64_expand_vec_perm): Remove assert\n\tagainst bigendian and adjust indices.\n\nFrom-SVN: r212142", "tree": {"sha": "6406945af69eada3b6bc32edd5a6f06b915de25c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6406945af69eada3b6bc32edd5a6f06b915de25c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7c4e5b837b22f774cb765ea4f57cd7b06d2af75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7c4e5b837b22f774cb765ea4f57cd7b06d2af75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7c4e5b837b22f774cb765ea4f57cd7b06d2af75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7c4e5b837b22f774cb765ea4f57cd7b06d2af75/comments", "author": null, "committer": null, "parents": [{"sha": "10e4b63297f2dab38e5867991762419ea7fb9daa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e4b63297f2dab38e5867991762419ea7fb9daa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10e4b63297f2dab38e5867991762419ea7fb9daa"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "463035d7c6ecaa731cdede2cda86f2daa50a0a03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c4e5b837b22f774cb765ea4f57cd7b06d2af75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c4e5b837b22f774cb765ea4f57cd7b06d2af75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7c4e5b837b22f774cb765ea4f57cd7b06d2af75", "patch": "@@ -1,3 +1,9 @@\n+2014-06-30  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (vec_perm): Enable for bigendian.\n+\t* config/aarch64/aarch64.c (aarch64_expand_vec_perm): Remove assert\n+\tagainst bigendian and adjust indices.\n+\n 2014-06-30  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/install.texi (Specific, aarch64*-*-*): Fix markup.  Reword a bit."}, {"sha": "f03d6470e957cc3c0bb656b9a5cfe373dda4cf18", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c4e5b837b22f774cb765ea4f57cd7b06d2af75/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c4e5b837b22f774cb765ea4f57cd7b06d2af75/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=f7c4e5b837b22f774cb765ea4f57cd7b06d2af75", "patch": "@@ -4361,7 +4361,7 @@\n    (match_operand:VB 1 \"register_operand\")\n    (match_operand:VB 2 \"register_operand\")\n    (match_operand:VB 3 \"register_operand\")]\n-  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n+  \"TARGET_SIMD\"\n {\n   aarch64_expand_vec_perm (operands[0], operands[1],\n \t\t\t   operands[2], operands[3]);"}, {"sha": "e9bbe0c0f04fe9e44112b996189523fc2506861d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c4e5b837b22f774cb765ea4f57cd7b06d2af75/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c4e5b837b22f774cb765ea4f57cd7b06d2af75/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f7c4e5b837b22f774cb765ea4f57cd7b06d2af75", "patch": "@@ -8733,18 +8733,24 @@ aarch64_expand_vec_perm (rtx target, rtx op0, rtx op1, rtx sel)\n   enum machine_mode vmode = GET_MODE (target);\n   unsigned int i, nelt = GET_MODE_NUNITS (vmode);\n   bool one_vector_p = rtx_equal_p (op0, op1);\n-  rtx rmask[MAX_VECT_LEN], mask;\n-\n-  gcc_checking_assert (!BYTES_BIG_ENDIAN);\n+  rtx mask;\n \n   /* The TBL instruction does not use a modulo index, so we must take care\n      of that ourselves.  */\n-  mask = GEN_INT (one_vector_p ? nelt - 1 : 2 * nelt - 1);\n-  for (i = 0; i < nelt; ++i)\n-    rmask[i] = mask;\n-  mask = gen_rtx_CONST_VECTOR (vmode, gen_rtvec_v (nelt, rmask));\n+  mask = aarch64_simd_gen_const_vector_dup (vmode,\n+      one_vector_p ? nelt - 1 : 2 * nelt - 1);\n   sel = expand_simple_binop (vmode, AND, sel, mask, NULL, 0, OPTAB_LIB_WIDEN);\n \n+  /* For big-endian, we also need to reverse the index within the vector\n+     (but not which vector).  */\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      /* If one_vector_p, mask is a vector of (nelt - 1)'s already.  */\n+      if (!one_vector_p)\n+        mask = aarch64_simd_gen_const_vector_dup (vmode, nelt - 1);\n+      sel = expand_simple_binop (vmode, XOR, sel, mask,\n+\t\t\t\t NULL, 0, OPTAB_LIB_WIDEN);\n+    }\n   aarch64_expand_vec_perm_1 (target, op0, op1, sel);\n }\n "}]}