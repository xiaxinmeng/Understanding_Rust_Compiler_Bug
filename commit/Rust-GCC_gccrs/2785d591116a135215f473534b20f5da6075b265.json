{"sha": "2785d591116a135215f473534b20f5da6075b265", "node_id": "C_kwDOANBUbNoAKDI3ODVkNTkxMTE2YTEzNTIxNWY0NzM1MzRiMjBmNWRhNjA3NWIyNjU", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-15T15:56:07Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:24Z"}, "message": "gccrs: diagnostic: Refactor Error class\n\nThe class now allows for more variants including a `Hint` one which\nthen gets emitted by calling `rust_inform`. This allows us to display\nhints/tips/notes in backtracking contexts such as the parser.\n\ngcc/rust/ChangeLog:\n\n\t* rust-diagnostics.h (struct Error): Add new Kind enum and various new\n\tstatic constructors to allow for hints as well.\n\t* rust-diagnostics.cc (Error::Error): Use new `kind` field properly.\n\t* checks/errors/privacy/rust-visibility-resolver.cc\n\t(VisibilityResolver::resolve_module_path): Use new Error API.\n\t* expand/rust-macro-builtins.cc (MacroBuiltin::include_handler): Likewise.\n\t* expand/rust-macro-expand.cc (parse_many): Likewise.\n\t(transcribe_type): Likewise.\n\t* parse/rust-parse-impl.h (Parser::parse_crate): Likewise.\n\t* rust-session-manager.cc (Session::handle_crate_name): Likewise.\n\t* ast/rust-ast.cc (Module::load_items): Likewise.", "tree": {"sha": "2efc2bab8b0f2ac49c354679a19305348249af3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2efc2bab8b0f2ac49c354679a19305348249af3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2785d591116a135215f473534b20f5da6075b265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2785d591116a135215f473534b20f5da6075b265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2785d591116a135215f473534b20f5da6075b265", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2785d591116a135215f473534b20f5da6075b265/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa7675df86ad2f22d0d349708da5cd363ed03f0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa7675df86ad2f22d0d349708da5cd363ed03f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa7675df86ad2f22d0d349708da5cd363ed03f0f"}], "stats": {"total": 119, "additions": 98, "deletions": 21}, "files": [{"sha": "68a7dfdc66219707d10804b6b47093d7717de6f8", "filename": "gcc/rust/ast/rust-ast.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2785d591116a135215f473534b20f5da6075b265/gcc%2Frust%2Fast%2Frust-ast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2785d591116a135215f473534b20f5da6075b265/gcc%2Frust%2Fast%2Frust-ast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.cc?ref=2785d591116a135215f473534b20f5da6075b265", "patch": "@@ -4084,7 +4084,7 @@ Module::load_items ()\n   inner_attrs = parser.parse_inner_attributes ();\n   auto parsed_items = parser.parse_items ();\n   for (const auto &error : parser.get_errors ())\n-    error.emit_error ();\n+    error.emit ();\n \n   items = std::move (parsed_items);\n   kind = ModuleKind::LOADED;"}, {"sha": "30afaf9174e7289adcdc2dfa2f43825a3fe406ae", "filename": "gcc/rust/checks/errors/privacy/rust-visibility-resolver.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2785d591116a135215f473534b20f5da6075b265/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2785d591116a135215f473534b20f5da6075b265/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.cc?ref=2785d591116a135215f473534b20f5da6075b265", "patch": "@@ -63,7 +63,7 @@ VisibilityResolver::resolve_module_path (const HIR::SimplePath &restriction,\n   NodeId ref_node_id = UNKNOWN_NODEID;\n   if (!resolver.lookup_resolved_name (ast_node_id, &ref_node_id))\n     {\n-      invalid_path.emit_error ();\n+      invalid_path.emit ();\n       return false;\n     }\n   // FIXME: Add a hint here if we can find the path in another scope, such as\n@@ -77,7 +77,7 @@ VisibilityResolver::resolve_module_path (const HIR::SimplePath &restriction,\n   auto module = mappings.lookup_module (ref);\n   if (!module)\n     {\n-      invalid_path.emit_error ();\n+      invalid_path.emit ();\n       return false;\n     }\n "}, {"sha": "cf90b384cb5c7e32cea3c59ee5312a4f27de1a4c", "filename": "gcc/rust/expand/rust-macro-builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2785d591116a135215f473534b20f5da6075b265/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2785d591116a135215f473534b20f5da6075b265/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc?ref=2785d591116a135215f473534b20f5da6075b265", "patch": "@@ -736,7 +736,7 @@ MacroBuiltin::include_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n   bool has_error = !parser.get_errors ().empty ();\n \n   for (const auto &error : parser.get_errors ())\n-    error.emit_error ();\n+    error.emit ();\n \n   if (has_error)\n     {"}, {"sha": "71aafef85b007ff1c49bf6176c2183c9754d10df", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2785d591116a135215f473534b20f5da6075b265/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2785d591116a135215f473534b20f5da6075b265/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=2785d591116a135215f473534b20f5da6075b265", "patch": "@@ -848,7 +848,7 @@ parse_many (Parser<MacroInvocLexer> &parser, TokenId &delimiter,\n       if (node.is_error ())\n \t{\n \t  for (auto err : parser.get_errors ())\n-\t    err.emit_error ();\n+\t    err.emit ();\n \n \t  return AST::Fragment::create_error ();\n \t}\n@@ -991,7 +991,7 @@ transcribe_type (Parser<MacroInvocLexer> &parser)\n \n   auto type = parser.parse_type (true);\n   for (auto err : parser.get_errors ())\n-    err.emit_error ();\n+    err.emit ();\n \n   auto end = lexer.get_offs ();\n "}, {"sha": "6a98bcce654c8fcdb7e7e147507ca4f6094c684e", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2785d591116a135215f473534b20f5da6075b265/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2785d591116a135215f473534b20f5da6075b265/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=2785d591116a135215f473534b20f5da6075b265", "patch": "@@ -444,7 +444,7 @@ Parser<ManagedTokenSource>::parse_crate ()\n \n   // emit all errors\n   for (const auto &error : error_table)\n-    error.emit_error ();\n+    error.emit ();\n \n   return std::unique_ptr<AST::Crate> (\n     new AST::Crate (std::move (items), std::move (inner_attrs)));"}, {"sha": "4e5c2ececd46b01ebd2a57879a376d115c98f320", "filename": "gcc/rust/rust-diagnostics.cc", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2785d591116a135215f473534b20f5da6075b265/gcc%2Frust%2Frust-diagnostics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2785d591116a135215f473534b20f5da6075b265/gcc%2Frust%2Frust-diagnostics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-diagnostics.cc?ref=2785d591116a135215f473534b20f5da6075b265", "patch": "@@ -231,14 +231,49 @@ rust_debug_loc (const Location location, const char *fmt, ...)\n }\n \n namespace Rust {\n-Error::Error (const Location location, const char *fmt, ...) : locus (location)\n+\n+/**\n+ * This function takes ownership of `args` and calls `va_end` on it\n+ */\n+static Error\n+va_constructor (Error::Kind kind, Location locus, const char *fmt, va_list args)\n+  RUST_ATTRIBUTE_GCC_DIAG (3, 0);\n+\n+static Error\n+va_constructor (Error::Kind kind, Location locus, const char *fmt, va_list args)\n+{\n+  std::string message = expand_message (fmt, args);\n+  message.shrink_to_fit ();\n+  va_end (args);\n+\n+  return Error (kind, locus, message);\n+}\n+\n+Error::Error (const Location location, const char *fmt, ...)\n+  : kind (Kind::Err), locus (location)\n {\n   va_list ap;\n+  va_start (ap, fmt);\n \n+  *this = va_constructor (Kind::Err, location, fmt, ap);\n+}\n+\n+Error\n+Error::Hint (const Location location, const char *fmt, ...)\n+{\n+  va_list ap;\n   va_start (ap, fmt);\n-  message = expand_message (fmt, ap);\n-  va_end (ap);\n \n-  message.shrink_to_fit ();\n+  return va_constructor (Kind::Hint, location, fmt, ap);\n+}\n+\n+Error\n+Error::Fatal (const Location location, const char *fmt, ...)\n+{\n+  va_list ap;\n+  va_start (ap, fmt);\n+\n+  return va_constructor (Kind::FatalErr, location, fmt, ap);\n }\n+\n } // namespace Rust"}, {"sha": "43fee8baf4f7f9147d223da5299ef5d7b63707f3", "filename": "gcc/rust/rust-diagnostics.h", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2785d591116a135215f473534b20f5da6075b265/gcc%2Frust%2Frust-diagnostics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2785d591116a135215f473534b20f5da6075b265/gcc%2Frust%2Frust-diagnostics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-diagnostics.h?ref=2785d591116a135215f473534b20f5da6075b265", "patch": "@@ -114,27 +114,69 @@ namespace Rust {\n  * errors to be ignored, e.g. if backtracking. */\n struct Error\n {\n+  enum class Kind\n+  {\n+    Hint,\n+    Err,\n+    FatalErr,\n+  };\n+\n+  Kind kind;\n   Location locus;\n   std::string message;\n   // TODO: store more stuff? e.g. node id?\n \n-  Error (Location locus, std::string message)\n-    : locus (locus), message (std::move (message))\n+  Error (Kind kind, Location locus, std::string message)\n+    : kind (kind), locus (locus), message (std::move (message))\n   {\n     message.shrink_to_fit ();\n   }\n \n+  Error (Location locus, std::string message)\n+  {\n+    Error (Kind::Err, locus, std::move (message));\n+  }\n+\n+  static Error Hint (Location locus, std::string message)\n+  {\n+    return Error (Kind::Hint, locus, std::move (message));\n+  }\n+\n+  static Error Fatal (Location locus, std::string message)\n+  {\n+    return Error (Kind::FatalErr, locus, std::move (message));\n+  }\n+\n   // TODO: the attribute part might be incorrect\n   Error (Location locus, const char *fmt,\n \t ...) /*RUST_ATTRIBUTE_GCC_DIAG (2, 3)*/ RUST_ATTRIBUTE_GCC_DIAG (3, 4);\n \n-  // Irreversibly emits the error as an error.\n-  void emit_error () const { rust_error_at (locus, \"%s\", message.c_str ()); }\n+  /**\n+   * printf-like overload of Error::Hint\n+   */\n+  static Error Hint (Location locus, const char *fmt, ...)\n+    RUST_ATTRIBUTE_GCC_DIAG (2, 3);\n+\n+  /**\n+   * printf-like overload of Error::Fatal\n+   */\n+  static Error Fatal (Location locus, const char *fmt, ...)\n+    RUST_ATTRIBUTE_GCC_DIAG (2, 3);\n \n-  // Irreversibly emits the error as a fatal error.\n-  void emit_fatal_error () const\n+  void emit () const\n   {\n-    rust_fatal_error (locus, \"%s\", message.c_str ());\n+    switch (kind)\n+      {\n+      case Kind::Hint:\n+\trust_inform (locus, \"%s\", message.c_str ());\n+\tbreak;\n+      case Kind::Err:\n+\trust_error_at (locus, \"%s\", message.c_str ());\n+\tbreak;\n+      case Kind::FatalErr:\n+\trust_fatal_error (locus, \"%s\", message.c_str ());\n+\tbreak;\n+      }\n   }\n };\n } // namespace Rust"}, {"sha": "074bad9c5d7f74e75dab14534ef278248a249323", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2785d591116a135215f473534b20f5da6075b265/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2785d591116a135215f473534b20f5da6075b265/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=2785d591116a135215f473534b20f5da6075b265", "patch": "@@ -193,7 +193,7 @@ Session::handle_option (\n \t  else\n \t    {\n \t      rust_assert (!error.message.empty ());\n-\t      error.emit_error ();\n+\t      error.emit ();\n \t    }\n \t}\n       else\n@@ -391,7 +391,7 @@ Session::handle_crate_name (const AST::Crate &parsed_crate)\n       if (!validate_crate_name (msg_str, error))\n \t{\n \t  error.locus = attr.get_locus ();\n-\t  error.emit_error ();\n+\t  error.emit ();\n \t  continue;\n \t}\n \n@@ -412,7 +412,7 @@ Session::handle_crate_name (const AST::Crate &parsed_crate)\n   if (!options.crate_name_set_manually\n       && !validate_crate_name (options.crate_name, error))\n     {\n-      error.emit_error ();\n+      error.emit ();\n       rust_inform (linemap->get_location (0),\n \t\t   \"crate name inferred from this file\");\n     }"}]}