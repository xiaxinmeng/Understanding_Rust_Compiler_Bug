{"sha": "71d0d50aa3b292a1137dc2e7ed468aff24efdb83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFkMGQ1MGFhM2IyOTJhMTEzN2RjMmU3ZWQ0NjhhZmYyNGVmZGI4Mw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-01-06T19:24:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-01-06T19:24:23Z"}, "message": "go/build: Set GOARCH on arm64 systems.\n\nI am reliably informed that the architecture name and letter for the\nplan9/inferno compilers for 64-bit ARM systems will be \"arm64\" and \"7\"\nrespectively, so let's get that bit in nice and early.\n\nFrom Michael Hudson-Doyle.\nhttps://codereview.appspot.com/34830045/\n\nFrom-SVN: r206374", "tree": {"sha": "23b882305679e1e26e46b19513733540100b19e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23b882305679e1e26e46b19513733540100b19e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71d0d50aa3b292a1137dc2e7ed468aff24efdb83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71d0d50aa3b292a1137dc2e7ed468aff24efdb83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71d0d50aa3b292a1137dc2e7ed468aff24efdb83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71d0d50aa3b292a1137dc2e7ed468aff24efdb83/comments", "author": null, "committer": null, "parents": [{"sha": "96066ce19be4b8187ac2c1a45a55986bf2655697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96066ce19be4b8187ac2c1a45a55986bf2655697", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96066ce19be4b8187ac2c1a45a55986bf2655697"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "a5439ebd84879570e54fe598344b7a406a956742", "filename": "libgo/configure", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d0d50aa3b292a1137dc2e7ed468aff24efdb83/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d0d50aa3b292a1137dc2e7ed468aff24efdb83/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=71d0d50aa3b292a1137dc2e7ed468aff24efdb83", "patch": "@@ -647,6 +647,8 @@ LIBGO_IS_MIPS_FALSE\n LIBGO_IS_MIPS_TRUE\n LIBGO_IS_M68K_FALSE\n LIBGO_IS_M68K_TRUE\n+LIBGO_IS_ARM64_FALSE\n+LIBGO_IS_ARM64_TRUE\n LIBGO_IS_ARM_FALSE\n LIBGO_IS_ARM_TRUE\n LIBGO_IS_ALPHA_FALSE\n@@ -11113,7 +11115,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11116 \"configure\"\n+#line 11118 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11219,7 +11221,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11222 \"configure\"\n+#line 11224 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13592,6 +13594,7 @@ esac\n is_386=no\n is_alpha=no\n is_arm=no\n+is_arm64=no\n is_m68k=no\n mips_abi=unknown\n is_ppc=no\n@@ -13605,6 +13608,10 @@ case ${host} in\n     is_alpha=yes\n     GOARCH=alpha\n     ;;\n+  aarch64-*-*)\n+    is_arm64=yes\n+    GOARCH=arm64\n+    ;;\n   arm*-*-* | strongarm*-*-* | ep9312*-*-* | xscale-*-*)\n     is_arm=yes\n     GOARCH=arm\n@@ -13756,6 +13763,14 @@ else\n   LIBGO_IS_ARM_FALSE=\n fi\n \n+ if test $is_arm64 = yes; then\n+  LIBGO_IS_ARM64_TRUE=\n+  LIBGO_IS_ARM64_FALSE='#'\n+else\n+  LIBGO_IS_ARM64_TRUE='#'\n+  LIBGO_IS_ARM64_FALSE=\n+fi\n+\n  if test $is_m68k = yes; then\n   LIBGO_IS_M68K_TRUE=\n   LIBGO_IS_M68K_FALSE='#'\n@@ -15538,6 +15553,10 @@ if test -z \"${LIBGO_IS_ARM_TRUE}\" && test -z \"${LIBGO_IS_ARM_FALSE}\"; then\n   as_fn_error \"conditional \\\"LIBGO_IS_ARM\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${LIBGO_IS_ARM64_TRUE}\" && test -z \"${LIBGO_IS_ARM64_FALSE}\"; then\n+  as_fn_error \"conditional \\\"LIBGO_IS_ARM64\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${LIBGO_IS_M68K_TRUE}\" && test -z \"${LIBGO_IS_M68K_FALSE}\"; then\n   as_fn_error \"conditional \\\"LIBGO_IS_M68K\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "dc1f9082a0a1f0adf7278dd3120e4aaf19f751a8", "filename": "libgo/configure.ac", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d0d50aa3b292a1137dc2e7ed468aff24efdb83/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d0d50aa3b292a1137dc2e7ed468aff24efdb83/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=71d0d50aa3b292a1137dc2e7ed468aff24efdb83", "patch": "@@ -174,6 +174,7 @@ dnl N.B. Keep in sync with gcc/testsuite/go.test/go-test.exp (go-set-goarch).\n is_386=no\n is_alpha=no\n is_arm=no\n+is_arm64=no\n is_m68k=no\n mips_abi=unknown\n is_ppc=no\n@@ -187,6 +188,10 @@ case ${host} in\n     is_alpha=yes\n     GOARCH=alpha\n     ;;\n+  aarch64-*-*)\n+    is_arm64=yes\n+    GOARCH=arm64\n+    ;;\n   arm*-*-* | strongarm*-*-* | ep9312*-*-* | xscale-*-*)\n     is_arm=yes\n     GOARCH=arm\n@@ -267,6 +272,7 @@ esac\n AM_CONDITIONAL(LIBGO_IS_386, test $is_386 = yes)\n AM_CONDITIONAL(LIBGO_IS_ALPHA, test $is_alpha = yes)\n AM_CONDITIONAL(LIBGO_IS_ARM, test $is_arm = yes)\n+AM_CONDITIONAL(LIBGO_IS_ARM64, test $is_arm64 = yes)\n AM_CONDITIONAL(LIBGO_IS_M68K, test $is_m68k = yes)\n AM_CONDITIONAL(LIBGO_IS_MIPS, test $mips_abi != unknown)\n AM_CONDITIONAL(LIBGO_IS_MIPSO32, test $mips_abi = o32)"}, {"sha": "d06a9be53123a2c6d58693f1f3f4be7dc91a1a91", "filename": "libgo/go/go/build/build.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d0d50aa3b292a1137dc2e7ed468aff24efdb83/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d0d50aa3b292a1137dc2e7ed468aff24efdb83/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild.go?ref=71d0d50aa3b292a1137dc2e7ed468aff24efdb83", "patch": "@@ -1211,6 +1211,8 @@ func ArchChar(goarch string) (string, error) {\n \t\treturn \"6\", nil\n \tcase \"arm\":\n \t\treturn \"5\", nil\n+\tcase \"arm64\":\n+\t\treturn \"7\", nil\n \t}\n \treturn \"\", errors.New(\"unsupported GOARCH \" + goarch)\n }"}, {"sha": "88f3eca4ed29a76d66321c8708fb3910ca815307", "filename": "libgo/go/go/build/deps_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d0d50aa3b292a1137dc2e7ed468aff24efdb83/libgo%2Fgo%2Fgo%2Fbuild%2Fdeps_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d0d50aa3b292a1137dc2e7ed468aff24efdb83/libgo%2Fgo%2Fgo%2Fbuild%2Fdeps_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fdeps_test.go?ref=71d0d50aa3b292a1137dc2e7ed468aff24efdb83", "patch": "@@ -360,7 +360,7 @@ func allowed(pkg string) map[string]bool {\n \n var bools = []bool{false, true}\n var geese = []string{\"darwin\", \"dragonfly\", \"freebsd\", \"linux\", \"netbsd\", \"openbsd\", \"plan9\", \"windows\"}\n-var goarches = []string{\"386\", \"amd64\", \"arm\"}\n+var goarches = []string{\"386\", \"amd64\", \"arm\", \"arm64\"}\n \n type osPkg struct {\n \tgoos, pkg string"}, {"sha": "3580d823b08d8eac8a94ac1a794fd024979a3bac", "filename": "libgo/go/go/build/syslist.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d0d50aa3b292a1137dc2e7ed468aff24efdb83/libgo%2Fgo%2Fgo%2Fbuild%2Fsyslist.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d0d50aa3b292a1137dc2e7ed468aff24efdb83/libgo%2Fgo%2Fgo%2Fbuild%2Fsyslist.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fsyslist.go?ref=71d0d50aa3b292a1137dc2e7ed468aff24efdb83", "patch": "@@ -5,4 +5,4 @@\n package build\n \n const goosList = \"darwin dragonfly freebsd linux netbsd openbsd plan9 windows solaris \"\n-const goarchList = \"386 amd64 arm alpha m68k mipso32 mipsn32 mipsn64 mipso64 ppc ppc64 sparc sparc64 \"\n+const goarchList = \"386 amd64 arm arm64 alpha m68k mipso32 mipsn32 mipsn64 mipso64 ppc ppc64 sparc sparc64 \""}, {"sha": "f45104fcfc2fdfa5878cd37210300a95c5ebc620", "filename": "libgo/go/runtime/extern.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d0d50aa3b292a1137dc2e7ed468aff24efdb83/libgo%2Fgo%2Fruntime%2Fextern.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d0d50aa3b292a1137dc2e7ed468aff24efdb83/libgo%2Fgo%2Fruntime%2Fextern.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fextern.go?ref=71d0d50aa3b292a1137dc2e7ed468aff24efdb83", "patch": "@@ -185,5 +185,5 @@ func Version() string {\n const GOOS string = theGoos\n \n // GOARCH is the running program's architecture target:\n-// 386, amd64, or arm.\n+// 386, amd64, arm or arm64.\n const GOARCH string = theGoarch"}]}