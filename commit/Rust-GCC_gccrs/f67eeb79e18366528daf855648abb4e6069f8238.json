{"sha": "f67eeb79e18366528daf855648abb4e6069f8238", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY3ZWViNzllMTgzNjY1MjhkYWY4NTU2NDhhYmI0ZTYwNjlmODIzOA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2018-12-23T10:28:51Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2018-12-23T10:28:51Z"}, "message": "Ensure collect2 responds to intended commmand line options.\n\nTo ensure compatibility with the flags consumed by ld, some of the flags\nneeded by collect2 come from the command line and some are passed\nin the COLLECT_GCC_OPTIONS.\n\nHere we combine initial parses of both and then set the LTO mode accordingly.\n\n2018-12-23  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* collect2.c (main): Combine flags from both the command line and\n\tCOLLECT_GCC_OPTIONS to determine the set in force\n\nFrom-SVN: r267369", "tree": {"sha": "21edc059a38f46830baa8bf2975ff8a8e92367ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21edc059a38f46830baa8bf2975ff8a8e92367ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f67eeb79e18366528daf855648abb4e6069f8238", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f67eeb79e18366528daf855648abb4e6069f8238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f67eeb79e18366528daf855648abb4e6069f8238", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f67eeb79e18366528daf855648abb4e6069f8238/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0652a1512130cfda8a7ffb192f47bf19c9be2525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0652a1512130cfda8a7ffb192f47bf19c9be2525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0652a1512130cfda8a7ffb192f47bf19c9be2525"}], "stats": {"total": 60, "additions": 37, "deletions": 23}, "files": [{"sha": "dd9b2c5a09d60f92fdd47169a4088dee7a08140b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f67eeb79e18366528daf855648abb4e6069f8238/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f67eeb79e18366528daf855648abb4e6069f8238/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f67eeb79e18366528daf855648abb4e6069f8238", "patch": "@@ -1,3 +1,8 @@\n+2018-12-23  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* collect2.c (main): Combine flags from both the command line and\n+\tCOLLECT_GCC_OPTIONS to determine the set in force\n+\n 2018-12-21  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-utils.c (ipa_merge_profiles): Recompute summaries."}, {"sha": "2fc4ad18c9bc0b6ff44918a9bf44ae6babfac359", "filename": "gcc/collect2.c", "status": "modified", "additions": 32, "deletions": 23, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f67eeb79e18366528daf855648abb4e6069f8238/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f67eeb79e18366528daf855648abb4e6069f8238/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=f67eeb79e18366528daf855648abb4e6069f8238", "patch": "@@ -981,22 +981,21 @@ main (int argc, char **argv)\n   object = CONST_CAST2 (const char **, char **, object_lst);\n \n #ifdef DEBUG\n-  debug = 1;\n+  debug = true;\n #endif\n \n-  /* Parse command line early for instances of -debug.  This allows\n-     the debug flag to be set before functions like find_a_file()\n-     are called.  We also look for the -flto or -flto-partition=none flag to know\n-     what LTO mode we are in.  */\n+  save_temps = false;\n+  verbose = false;\n+  /* Parse command line / environment for flags we want early.\n+     This allows the debug flag to be set before functions like find_a_file()\n+     are called. */\n   {\n     bool no_partition = false;\n \n     for (i = 1; argv[i] != NULL; i ++)\n       {\n \tif (! strcmp (argv[i], \"-debug\"))\n \t  debug = true;\n-        else if (! strcmp (argv[i], \"-flto-partition=none\"))\n-\t  no_partition = true;\n \telse if (!strncmp (argv[i], \"-fno-lto\", 8))\n \t  lto_mode = LTO_MODE_NONE;\n         else if (! strcmp (argv[i], \"-plugin\"))\n@@ -1031,34 +1030,44 @@ main (int argc, char **argv)\n \t    aixlazy_flag = 1;\n #endif\n       }\n-    verbose = debug;\n-    find_file_set_debug (debug);\n-    if (use_plugin)\n-      lto_mode = LTO_MODE_NONE;\n-    if (no_partition && lto_mode == LTO_MODE_WHOPR)\n-      lto_mode = LTO_MODE_LTO;\n-  }\n \n #ifndef DEFAULT_A_OUT_NAME\n   output_file = \"a.out\";\n #else\n   output_file = DEFAULT_A_OUT_NAME;\n #endif\n \n-  obstack_begin (&temporary_obstack, 0);\n-  temporary_firstobj = (char *) obstack_alloc (&temporary_obstack, 0);\n+    obstack_begin (&temporary_obstack, 0);\n+    temporary_firstobj = (char *) obstack_alloc (&temporary_obstack, 0);\n \n #ifndef HAVE_LD_DEMANGLE\n   current_demangling_style = auto_demangling;\n #endif\n-  p = getenv (\"COLLECT_GCC_OPTIONS\");\n-  while (p && *p)\n-    {\n-      const char *q = extract_string (&p);\n-      if (*q == '-' && (q[1] == 'm' || q[1] == 'f'))\n-\tnum_c_args++;\n+\n+    /* Now pick up any flags we want early from COLLECT_GCC_OPTIONS\n+       The LTO options are passed here as are other options that might\n+       be unsuitable for ld (e.g. -save-temps).  */\n+    p = getenv (\"COLLECT_GCC_OPTIONS\");\n+    while (p && *p)\n+      {\n+\tconst char *q = extract_string (&p);\n+\tif (*q == '-' && (q[1] == 'm' || q[1] == 'f'))\n+\t  num_c_args++;\n+\tif (strncmp (q, \"-flto-partition=none\", 20) == 0)\n+\t  no_partition = true;\n+\telse if (strncmp (q, \"-fno-lto\", 8) == 0)\n+\t  lto_mode = LTO_MODE_NONE;\n     }\n-  obstack_free (&temporary_obstack, temporary_firstobj);\n+    obstack_free (&temporary_obstack, temporary_firstobj);\n+\n+    verbose = verbose || debug;\n+    save_temps = save_temps || debug;\n+    find_file_set_debug (debug);\n+    if (use_plugin)\n+      lto_mode = LTO_MODE_NONE;\n+    if (no_partition && lto_mode == LTO_MODE_WHOPR)\n+      lto_mode = LTO_MODE_LTO;\n+  }\n \n   /* -fno-profile-arcs -fno-test-coverage -fno-branch-probabilities\n      -fno-exceptions -w -fno-whole-program */"}]}