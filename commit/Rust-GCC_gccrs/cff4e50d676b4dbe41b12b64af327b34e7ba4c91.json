{"sha": "cff4e50d676b4dbe41b12b64af327b34e7ba4c91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZmNGU1MGQ2NzZiNGRiZTQxYjEyYjY0YWYzMjdiMzRlN2JhNGM5MQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-05-24T11:20:29Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-05-24T11:20:29Z"}, "message": "tree-ssa-operands.h (push_stmt_changes, [...]): Delete.\n\n2009-05-24  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* tree-ssa-operands.h (push_stmt_changes, pop_stmt_changes,\n\tdiscard_stmt_changes): Delete.\n\t* tree-ssa-operands.c (scb_stack): Delete.\n\t(init_ssa_operands): Do not initialize it.\n\t(fini_ssa_operands): Do not free it.\n\t(push_stmt_changes, pop_stmt_changes, discard_stmt_changes): Delete.\n\n\t* tree-cfg.c (replace_uses_by): Replace pop_stmt_changes with \n\tupdate_stmt, remove the others.  Fix comments.\n\t* tree-dfa.c (optimize_stack_restore): Likewise.\n\t* tree-ssa-forwprop.c (forward_propagate_addr_expr): Likewise.\n\t* tree-ssa-loop-ivopts.c (rewrite_use): Likewise.\n\t* tree-ssa-dce.c (eliminate_unnecessary_stmts): Likewise.\n\t* tree-ssa-ccp.c (optimize_stack_restore, execute_fold_all_builtins):\n\tLikewise.\n\t* tree-ssa-propagate.c (substitute_and_fold): Likewise.\n\t* tree-ssa-dom.c (propagate_rhs_into_lhs): Likewise.\n\t(dom_opt_finalize_block): Likewise, adjusting access to stmts_to_rescan.\n\t(optimize_stmt): Likewise, adjusting access to stmts_to_rescan.\n\t(stmts_to_rescan): Change item type to gimple.\n\t(tree_ssa_dominator_optimize): Change type of stmts_to_rescan.\n\nFrom-SVN: r147831", "tree": {"sha": "e667e14ddbee5b77f8770a36656ac880ea9a62e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e667e14ddbee5b77f8770a36656ac880ea9a62e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cff4e50d676b4dbe41b12b64af327b34e7ba4c91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff4e50d676b4dbe41b12b64af327b34e7ba4c91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cff4e50d676b4dbe41b12b64af327b34e7ba4c91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e00e546439393178102e01e66431fa32d2205bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e00e546439393178102e01e66431fa32d2205bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e00e546439393178102e01e66431fa32d2205bd"}], "stats": {"total": 193, "additions": 51, "deletions": 142}, "files": [{"sha": "8b56f0e0b380e73ca98be7c7bd9226ea968d7cec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cff4e50d676b4dbe41b12b64af327b34e7ba4c91", "patch": "@@ -1,3 +1,27 @@\n+2009-05-24  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* tree-ssa-operands.h (push_stmt_changes, pop_stmt_changes,\n+\tdiscard_stmt_changes): Delete.\n+\t* tree-ssa-operands.c (scb_stack): Delete.\n+\t(init_ssa_operands): Do not initialize it.\n+\t(fini_ssa_operands): Do not free it.\n+\t(push_stmt_changes, pop_stmt_changes, discard_stmt_changes): Delete.\n+\n+\t* tree-cfg.c (replace_uses_by): Replace pop_stmt_changes with \n+\tupdate_stmt, remove the others.  Fix comments.\n+\t* tree-dfa.c (optimize_stack_restore): Likewise.\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr): Likewise.\n+\t* tree-ssa-loop-ivopts.c (rewrite_use): Likewise.\n+\t* tree-ssa-dce.c (eliminate_unnecessary_stmts): Likewise.\n+\t* tree-ssa-ccp.c (optimize_stack_restore, execute_fold_all_builtins):\n+\tLikewise.\n+\t* tree-ssa-propagate.c (substitute_and_fold): Likewise.\n+\t* tree-ssa-dom.c (propagate_rhs_into_lhs): Likewise.\n+\t(dom_opt_finalize_block): Likewise, adjusting access to stmts_to_rescan.\n+\t(optimize_stmt): Likewise, adjusting access to stmts_to_rescan.\n+\t(stmts_to_rescan): Change item type to gimple.\n+\t(tree_ssa_dominator_optimize): Change type of stmts_to_rescan.\n+\n 2009-05-24  Ira Rosen  <irar@il.ibm.com>\n \n \t* doc/passes.texi (Tree-SSA passes): Document SLP pass."}, {"sha": "875dd8ead94c0500b57e32ecfa1950bee239c77a", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=cff4e50d676b4dbe41b12b64af327b34e7ba4c91", "patch": "@@ -1289,9 +1289,6 @@ replace_uses_by (tree name, tree val)\n \n   FOR_EACH_IMM_USE_STMT (stmt, imm_iter, name)\n     {\n-      if (gimple_code (stmt) != GIMPLE_PHI)\n-\tpush_stmt_changes (&stmt);\n-\n       FOR_EACH_IMM_USE_ON_STMT (use, imm_iter)\n         {\n \t  replace_exp (use, val);\n@@ -1318,7 +1315,7 @@ replace_uses_by (tree name, tree val)\n \t  if (cfgcleanup_altered_bbs)\n \t    bitmap_set_bit (cfgcleanup_altered_bbs, gimple_bb (stmt)->index);\n \n-\t  /* FIXME.  This should go in pop_stmt_changes.  */\n+\t  /* FIXME.  This should go in update_stmt.  */\n \t  for (i = 0; i < gimple_num_ops (stmt); i++)\n \t    {\n \t      tree op = gimple_op (stmt, i);\n@@ -1330,8 +1327,7 @@ replace_uses_by (tree name, tree val)\n \t    }\n \n \t  maybe_clean_or_replace_eh_stmt (stmt, stmt);\n-\n-\t  pop_stmt_changes (&stmt);\n+\t  update_stmt (stmt);\n \t}\n     }\n "}, {"sha": "d4a379c333c1ba08830c654f9ce0551906527c84", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=cff4e50d676b4dbe41b12b64af327b34e7ba4c91", "patch": "@@ -651,11 +651,7 @@ get_virtual_var (tree var)\n   return var;\n }\n \n-/* Mark all the naked symbols in STMT for SSA renaming.\n-   \n-   NOTE: This function should only be used for brand new statements.\n-   If the caller is modifying an existing statement, it should use the\n-   combination push_stmt_changes/pop_stmt_changes.  */\n+/* Mark all the naked symbols in STMT for SSA renaming.  */\n \n void\n mark_symbols_for_renaming (gimple stmt)"}, {"sha": "c331619189765cc9bdc0d649b64164f36ab2f95d", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=cff4e50d676b4dbe41b12b64af327b34e7ba4c91", "patch": "@@ -3023,14 +3023,9 @@ optimize_stack_restore (gimple_stmt_iterator i)\n     return NULL_TREE;\n \n   stack_save_gsi = gsi_for_stmt (stack_save);\n-  push_stmt_changes (gsi_stmt_ptr (&stack_save_gsi));\n   rhs = build_int_cst (TREE_TYPE (gimple_call_arg (call, 0)), 0);\n   if (!update_call_from_tree (&stack_save_gsi, rhs))\n-    {\n-      discard_stmt_changes (gsi_stmt_ptr (&stack_save_gsi));\n-      return NULL_TREE;\n-    }\n-  pop_stmt_changes (gsi_stmt_ptr (&stack_save_gsi));\n+    return NULL_TREE;\n \n   /* No effect, so the statement will be deleted.  */\n   return integer_zero_node;\n@@ -3252,16 +3247,14 @@ execute_fold_all_builtins (void)\n \t    }\n \n           old_stmt = stmt;\n-\t  push_stmt_changes (gsi_stmt_ptr (&i));\n-\n           if (!update_call_from_tree (&i, result))\n \t    {\n \t      gimplify_and_update_call_from_tree (&i, result);\n \t      todoflags |= TODO_update_address_taken;\n \t    }\n \n \t  stmt = gsi_stmt (i);\n-\t  pop_stmt_changes (gsi_stmt_ptr (&i));\n+\t  update_stmt (stmt);\n \n \t  if (maybe_clean_or_replace_eh_stmt (old_stmt, stmt)\n \t      && gimple_purge_dead_eh_edges (bb))"}, {"sha": "b252ece37f449d82c98e0b88f8fe1db525dac862", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=cff4e50d676b4dbe41b12b64af327b34e7ba4c91", "patch": "@@ -983,10 +983,9 @@ eliminate_unnecessary_stmts (void)\n \t\t\t  fprintf (dump_file, \"\\n\");\n \t\t\t}\n \t\t      \n-\t\t      push_stmt_changes (gsi_stmt_ptr (&gsi));\n \t\t      gimple_call_set_lhs (stmt, NULL_TREE);\n \t\t      maybe_clean_or_replace_eh_stmt (stmt, stmt);\n-\t\t      pop_stmt_changes (gsi_stmt_ptr (&gsi));\n+\t\t      update_stmt (stmt);\n \t\t      release_ssa_name (name);\n \t\t    }\n \t\t  notice_special_calls (stmt);"}, {"sha": "55a13b9d012efc71b8c4d31cf1856835e435d507", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=cff4e50d676b4dbe41b12b64af327b34e7ba4c91", "patch": "@@ -134,7 +134,7 @@ static VEC(expr_hash_elt_t,heap) *avail_exprs_stack;\n    expressions are removed from AVAIL_EXPRS.  Else we may change the\n    hash code for an expression and be unable to find/remove it from\n    AVAIL_EXPRS.  */\n-static VEC(gimple_p,heap) *stmts_to_rescan;\n+static VEC(gimple,heap) *stmts_to_rescan;\n \n /* Structure for entries in the expression hash table.  */\n \n@@ -626,7 +626,7 @@ tree_ssa_dominator_optimize (void)\n   avail_exprs = htab_create (1024, real_avail_expr_hash, avail_expr_eq, free_expr_hash_elt);\n   avail_exprs_stack = VEC_alloc (expr_hash_elt_t, heap, 20);\n   const_and_copies_stack = VEC_alloc (tree, heap, 20);\n-  stmts_to_rescan = VEC_alloc (gimple_p, heap, 20);\n+  stmts_to_rescan = VEC_alloc (gimple, heap, 20);\n   need_eh_cleanup = BITMAP_ALLOC (NULL);\n \n   /* Setup callbacks for the generic dominator tree walker.  */\n@@ -742,7 +742,7 @@ tree_ssa_dominator_optimize (void)\n   \n   VEC_free (expr_hash_elt_t, heap, avail_exprs_stack);\n   VEC_free (tree, heap, const_and_copies_stack);\n-  VEC_free (gimple_p, heap, stmts_to_rescan);\n+  VEC_free (gimple, heap, stmts_to_rescan);\n   \n   /* Free the value-handle array.  */\n   threadedge_finalize_values ();\n@@ -1047,17 +1047,16 @@ dom_opt_finalize_block (struct dom_walk_data *walk_data, basic_block bb)\n \n   /* If we queued any statements to rescan in this block, then\n      go ahead and rescan them now.  */\n-  while (VEC_length (gimple_p, stmts_to_rescan) > 0)\n+  while (VEC_length (gimple, stmts_to_rescan) > 0)\n     {\n-      gimple *stmt_p = VEC_last (gimple_p, stmts_to_rescan);\n-      gimple stmt = *stmt_p;\n+      gimple stmt = VEC_last (gimple, stmts_to_rescan);\n       basic_block stmt_bb = gimple_bb (stmt);\n \n       if (stmt_bb != bb)\n \tbreak;\n \n-      VEC_pop (gimple_p, stmts_to_rescan);\n-      pop_stmt_changes (stmt_p);\n+      VEC_pop (gimple, stmts_to_rescan);\n+      update_stmt (stmt);\n     }\n }\n \n@@ -2130,7 +2129,6 @@ optimize_stmt (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n   \n   update_stmt_if_modified (stmt);\n   opt_stats.num_stmts++;\n-  push_stmt_changes (gsi_stmt_ptr (&si));\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -2253,21 +2251,12 @@ optimize_stmt (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n \t}\n     }\n \n+  /* Queue the statement to be re-scanned after all the\n+     AVAIL_EXPRS have been processed.  The change buffer stack for\n+     all the pushed statements will be processed when this queue\n+     is emptied.  */\n   if (may_have_exposed_new_symbols)\n-    {\n-      /* Queue the statement to be re-scanned after all the\n-\t AVAIL_EXPRS have been processed.  The change buffer stack for\n-\t all the pushed statements will be processed when this queue\n-\t is emptied.  */\n-      VEC_safe_push (gimple_p, heap, stmts_to_rescan, gsi_stmt_ptr (&si));\n-    }\n-  else\n-    {\n-      /* Otherwise, just discard the recently pushed change buffer.  If\n-\t not, the STMTS_TO_RESCAN queue will get out of synch with the\n-\t change buffer stack.  */\n-      discard_stmt_changes (gsi_stmt_ptr (&si));\n-    }\n+    VEC_safe_push (gimple, heap, stmts_to_rescan, gsi_stmt (si));\n }\n \n /* Search for an existing instance of STMT in the AVAIL_EXPRS table.\n@@ -2565,8 +2554,6 @@ propagate_rhs_into_lhs (gimple stmt, tree lhs, tree rhs, bitmap interesting_name\n \t      print_gimple_stmt (dump_file, use_stmt, 0, dump_flags);\n \t    }\n \n-\t  push_stmt_changes (&use_stmt);\n-\n \t  /* Propagate the RHS into this use of the LHS.  */\n \t  FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n \t    propagate_value (use_p, rhs);\n@@ -2601,7 +2588,6 @@ propagate_rhs_into_lhs (gimple stmt, tree lhs, tree rhs, bitmap interesting_name\n \t\t  bitmap_set_bit (interesting_names, SSA_NAME_VERSION (result));\n \t\t}\n \n-\t      discard_stmt_changes (&use_stmt);\n \t      continue;\n \t    }\n \n@@ -2618,9 +2604,8 @@ propagate_rhs_into_lhs (gimple stmt, tree lhs, tree rhs, bitmap interesting_name\n \t  fold_stmt_inplace (use_stmt);\n \n \t  /* Sometimes propagation can expose new operands to the\n-\t     renamer.  Note this will call update_stmt at the \n-\t     appropriate time.  */\n-\t  pop_stmt_changes (&use_stmt);\n+\t     renamer.  */\n+\t  update_stmt (use_stmt);\n \n \t  /* Dump details.  */\n \t  if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "8cf6ea12c1a3dec43bdd78e5f640413489327376", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=cff4e50d676b4dbe41b12b64af327b34e7ba4c91", "patch": "@@ -951,19 +951,17 @@ forward_propagate_addr_expr (tree name, tree rhs)\n \n       {\n \tgimple_stmt_iterator gsi = gsi_for_stmt (use_stmt);\n-\tpush_stmt_changes (&use_stmt);\n \tresult = forward_propagate_addr_expr_1 (name, rhs, &gsi,\n \t\t\t\t\t\tsingle_use_p);\n \t/* If the use has moved to a different statement adjust\n-\t   the update machinery.  */\n+\t   the update machinery for the old statement too.  */\n \tif (use_stmt != gsi_stmt (gsi))\n \t  {\n-\t    pop_stmt_changes (&use_stmt);\n-\t    use_stmt = gsi_stmt (gsi);\n \t    update_stmt (use_stmt);\n+\t    use_stmt = gsi_stmt (gsi);\n \t  }\n-\telse\n-\t  pop_stmt_changes (&use_stmt);\n+\n+\tupdate_stmt (use_stmt);\n       }\n       all &= result;\n "}, {"sha": "b7047e12bc9ae3cfd0f0f0629809e1d038ddc1cf", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=cff4e50d676b4dbe41b12b64af327b34e7ba4c91", "patch": "@@ -5304,8 +5304,6 @@ rewrite_use_compare (struct ivopts_data *data,\n static void\n rewrite_use (struct ivopts_data *data, struct iv_use *use, struct iv_cand *cand)\n {\n-  push_stmt_changes (&use->stmt);\n-\n   switch (use->type)\n     {\n       case USE_NONLINEAR_EXPR:\n@@ -5323,8 +5321,8 @@ rewrite_use (struct ivopts_data *data, struct iv_use *use, struct iv_cand *cand)\n       default:\n \tgcc_unreachable ();\n     }\n-\n-  pop_stmt_changes (&use->stmt);\n+  \n+  update_stmt (use->stmt);\n }\n \n /* Rewrite the uses using the selected induction variables.  */"}, {"sha": "4a8aee7c20c44150be393dd82b8c2f82ab95aef3", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=cff4e50d676b4dbe41b12b64af327b34e7ba4c91", "patch": "@@ -147,12 +147,6 @@ static void get_expr_operands (gimple, tree *, int);\n /* Number of functions with initialized ssa_operands.  */\n static int n_initialized = 0;\n \n-/* Stack of statements to change.  Every call to\n-   push_stmt_changes pushes the stmt onto the stack.  Calls to\n-   pop_stmt_changes pop a stmt off of the stack and compute the set\n-   of changes for the popped statement.  */\n-static VEC(gimple_p,heap) *scb_stack;\n-\n /* Return the DECL_UID of the base variable of T.  */\n \n static inline unsigned\n@@ -231,7 +225,6 @@ init_ssa_operands (void)\n       build_vuse = NULL_TREE;\n       build_vdef = NULL_TREE;\n       bitmap_obstack_initialize (&operands_bitmap_obstack);\n-      scb_stack = VEC_alloc (gimple_p, heap, 20);\n     }\n \n   gcc_assert (gimple_ssa_operands (cfun)->operand_memory == NULL);\n@@ -257,11 +250,6 @@ fini_ssa_operands (void)\n       VEC_free (tree, heap, build_uses);\n       build_vdef = NULL_TREE;\n       build_vuse = NULL_TREE;\n-\n-      /* The change buffer stack had better be empty.  */\n-      gcc_assert (VEC_length (gimple_p, scb_stack) == 0);\n-      VEC_free (gimple_p, heap, scb_stack);\n-      scb_stack = NULL;\n     }\n \n   gimple_ssa_operands (cfun)->free_defs = NULL;\n@@ -1329,62 +1317,6 @@ debug_immediate_uses_for (tree var)\n }\n \n \n-/* Push *STMT_P on the SCB_STACK.  This function is deprecated, do not\n-   introduce new uses of it.  */\n-\n-void\n-push_stmt_changes (gimple *stmt_p)\n-{\n-  gimple stmt = *stmt_p;\n-\n-  /* It makes no sense to keep track of PHI nodes.  */\n-  if (gimple_code (stmt) == GIMPLE_PHI)\n-    return;\n-\n-  VEC_safe_push (gimple_p, heap, scb_stack, stmt_p);\n-}\n-\n-/* Pop the top stmt from SCB_STACK and act on the differences between\n-   what was recorded by push_stmt_changes and the current state of\n-   the statement.  This function is deprecated, do not introduce\n-   new uses of it.  */\n-\n-void\n-pop_stmt_changes (gimple *stmt_p)\n-{\n-  gimple *stmt2_p, stmt = *stmt_p;\n-\n-  /* It makes no sense to keep track of PHI nodes.  */\n-  if (gimple_code (stmt) == GIMPLE_PHI)\n-    return;\n-\n-  stmt2_p = VEC_pop (gimple_p, scb_stack);\n-  gcc_assert (stmt_p == stmt2_p);\n-\n-  /* Force an operand re-scan on the statement and mark any newly\n-     exposed variables.  This also will mark the virtual operand\n-     for renaming if necessary.  */\n-  update_stmt (stmt);\n-}\n-\n-/* Discard the topmost stmt from SCB_STACK.  This is useful\n-   when the caller realized that it did not actually modified the\n-   statement.  It avoids the expensive operand re-scan.\n-   This function is deprecated, do not introduce new uses of it.  */\n-\n-void\n-discard_stmt_changes (gimple *stmt_p)\n-{\n-  gimple *stmt2_p, stmt = *stmt_p;\n-  \n-  /* It makes no sense to keep track of PHI nodes.  */\n-  if (gimple_code (stmt) == GIMPLE_PHI)\n-    return;\n-\n-  stmt2_p = VEC_pop (gimple_p, scb_stack);\n-  gcc_assert (stmt_p == stmt2_p);\n-}\n-\n /* Unlink STMTs virtual definition from the IL by propagating its use.  */\n \n void"}, {"sha": "5a8e02696d48fbe34776f7b8f80d49fb155f779a", "filename": "gcc/tree-ssa-operands.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-ssa-operands.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-ssa-operands.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.h?ref=cff4e50d676b4dbe41b12b64af327b34e7ba4c91", "patch": "@@ -114,10 +114,6 @@ extern void debug_decl_set (bitmap);\n \n extern bool ssa_operands_active (void);\n \n-extern void push_stmt_changes (gimple *);\n-extern void pop_stmt_changes (gimple *);\n-extern void discard_stmt_changes (gimple *);\n-\n extern void unlink_stmt_vdef (gimple);\n \n enum ssa_op_iter_type {"}, {"sha": "a3a87cbf7c396beb1f03c377df44fed6fa913622", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff4e50d676b4dbe41b12b64af327b34e7ba4c91/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=cff4e50d676b4dbe41b12b64af327b34e7ba4c91", "patch": "@@ -1109,9 +1109,6 @@ substitute_and_fold (prop_value_t *prop_value, bool use_ranges_p)\n \t      continue;\n \t    }\n \n-\t  /* Record the state of the statement before replacements.  */\n-\t  push_stmt_changes (gsi_stmt_ptr (&i));\n-\n \t  /* Replace the statement with its folded version and mark it\n \t     folded.  */\n \t  did_replace = false;\n@@ -1172,14 +1169,9 @@ substitute_and_fold (prop_value_t *prop_value, bool use_ranges_p)\n               }\n \n \t      /* Determine what needs to be done to update the SSA form.  */\n-\t      pop_stmt_changes (gsi_stmt_ptr (&i));\n+\t      update_stmt (stmt);\n \t      something_changed = true;\n \t    }\n-\t  else\n-\t    {\n-\t      /* The statement was not modified, discard the change buffer.  */\n-\t      discard_stmt_changes (gsi_stmt_ptr (&i));\n-\t    }\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {"}]}