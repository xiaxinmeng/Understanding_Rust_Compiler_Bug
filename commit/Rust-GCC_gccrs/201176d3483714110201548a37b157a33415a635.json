{"sha": "201176d3483714110201548a37b157a33415a635", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAxMTc2ZDM0ODM3MTQxMTAyMDE1NDhhMzdiMTU3YTMzNDE1YTYzNQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-08-31T17:17:19Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-08-31T17:17:19Z"}, "message": "re PR middle-end/49886 (pass_split_functions cannot deal with function type attributes)\n\n2011-08-31  Martin Jambor  <mjambor@suse.cz>\n\n\tPR middle-end/49886\n\t* ipa-inline-analysis.c (compute_inline_parameters): Set\n\tcan_change_signature of noes with typde attributes.\n\t* ipa-split.c (split_function): Do not skip any arguments if\n\tcan_change_signature is set.\n\n\t* testsuite/gcc.c-torture/execute/pr49886.c: New testcase.\n\nFrom-SVN: r178386", "tree": {"sha": "a322acd3f7b7a719b28233053d2eace8859ab328", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a322acd3f7b7a719b28233053d2eace8859ab328"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/201176d3483714110201548a37b157a33415a635", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201176d3483714110201548a37b157a33415a635", "html_url": "https://github.com/Rust-GCC/gccrs/commit/201176d3483714110201548a37b157a33415a635", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201176d3483714110201548a37b157a33415a635/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51093fca4c6add337ed31fe13b96d9712ab16743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51093fca4c6add337ed31fe13b96d9712ab16743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51093fca4c6add337ed31fe13b96d9712ab16743"}], "stats": {"total": 174, "additions": 154, "deletions": 20}, "files": [{"sha": "afb213b586b3d09cb0c302861e981f73dd7d53c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201176d3483714110201548a37b157a33415a635/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201176d3483714110201548a37b157a33415a635/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=201176d3483714110201548a37b157a33415a635", "patch": "@@ -1,3 +1,11 @@\n+2011-08-31  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/49886\n+\t* ipa-inline-analysis.c (compute_inline_parameters): Set\n+\tcan_change_signature of noes with typde attributes.\n+\t* ipa-split.c (split_function): Do not skip any arguments if\n+\tcan_change_signature is set.\n+\n 2011-08-31  Martin Jambor  <mjambor@suse.cz>\n \n \t* cgraphunit.c (cgraph_redirect_edge_call_stmt_to_callee): Alias"}, {"sha": "b56c66944e53db749081871403dc5803b774c892", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201176d3483714110201548a37b157a33415a635/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201176d3483714110201548a37b157a33415a635/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=201176d3483714110201548a37b157a33415a635", "patch": "@@ -1660,18 +1660,28 @@ compute_inline_parameters (struct cgraph_node *node, bool early)\n   /* Can this function be inlined at all?  */\n   info->inlinable = tree_inlinable_function_p (node->decl);\n \n-  /* Inlinable functions always can change signature.  */\n-  if (info->inlinable)\n-    node->local.can_change_signature = true;\n+  /* Type attributes can use parameter indices to describe them.  */\n+  if (TYPE_ATTRIBUTES (TREE_TYPE (node->decl)))\n+    node->local.can_change_signature = false;\n   else\n     {\n-      /* Functions calling builtin_apply can not change signature.  */\n-      for (e = node->callees; e; e = e->next_callee)\n-\tif (DECL_BUILT_IN (e->callee->decl)\n-\t    && DECL_BUILT_IN_CLASS (e->callee->decl) == BUILT_IN_NORMAL\n-\t    && DECL_FUNCTION_CODE (e->callee->decl) == BUILT_IN_APPLY_ARGS)\n-\t  break;\n-      node->local.can_change_signature = !e;\n+      /* Otherwise, inlinable functions always can change signature.  */\n+      if (info->inlinable)\n+\tnode->local.can_change_signature = true;\n+      else\n+\t{\n+\t  /* Functions calling builtin_apply can not change signature.  */\n+\t  for (e = node->callees; e; e = e->next_callee)\n+\t    {\n+\t      tree cdecl = e->callee->decl;\n+\t      if (DECL_BUILT_IN (cdecl)\n+\t\t  && DECL_BUILT_IN_CLASS (cdecl) == BUILT_IN_NORMAL\n+\t\t  && (DECL_FUNCTION_CODE (cdecl) == BUILT_IN_APPLY_ARGS\n+\t\t      || DECL_FUNCTION_CODE (cdecl) == BUILT_IN_VA_START))\n+\t\tbreak;\n+\t    }\n+\t  node->local.can_change_signature = !e;\n+\t}\n     }\n   estimate_function_body_sizes (node, early);\n "}, {"sha": "4373a1b423e122af077f584b27f1218e1e1e60ee", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201176d3483714110201548a37b157a33415a635/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201176d3483714110201548a37b157a33415a635/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=201176d3483714110201548a37b157a33415a635", "patch": "@@ -945,10 +945,10 @@ static void\n split_function (struct split_point *split_point)\n {\n   VEC (tree, heap) *args_to_pass = NULL;\n-  bitmap args_to_skip = BITMAP_ALLOC (NULL);\n+  bitmap args_to_skip;\n   tree parm;\n   int num = 0;\n-  struct cgraph_node *node;\n+  struct cgraph_node *node, *cur_node = cgraph_get_node (current_function_decl);\n   basic_block return_bb = find_return_bb ();\n   basic_block call_bb;\n   gimple_stmt_iterator gsi;\n@@ -968,17 +968,30 @@ split_function (struct split_point *split_point)\n       dump_split_point (dump_file, split_point);\n     }\n \n+  if (cur_node->local.can_change_signature)\n+    args_to_skip = BITMAP_ALLOC (NULL);\n+  else\n+    args_to_skip = NULL;\n+\n   /* Collect the parameters of new function and args_to_skip bitmap.  */\n   for (parm = DECL_ARGUMENTS (current_function_decl);\n        parm; parm = DECL_CHAIN (parm), num++)\n-    if (!is_gimple_reg (parm)\n-\t|| !gimple_default_def (cfun, parm)\n-\t|| !bitmap_bit_p (split_point->ssa_names_to_pass,\n-\t\t\t  SSA_NAME_VERSION (gimple_default_def (cfun, parm))))\n+    if (args_to_skip\n+\t&& (!is_gimple_reg (parm)\n+\t    || !gimple_default_def (cfun, parm)\n+\t    || !bitmap_bit_p (split_point->ssa_names_to_pass,\n+\t\t\t      SSA_NAME_VERSION (gimple_default_def (cfun,\n+\t\t\t\t\t\t\t\t    parm)))))\n       bitmap_set_bit (args_to_skip, num);\n     else\n       {\n \targ = gimple_default_def (cfun, parm);\n+\tif (!arg)\n+\t  {\n+\t    arg = make_ssa_name (parm, gimple_build_nop ());\n+\t    set_default_def (parm, arg);\n+\t  }\n+\n \tif (TYPE_MAIN_VARIANT (DECL_ARG_TYPE (parm))\n \t    != TYPE_MAIN_VARIANT (TREE_TYPE (arg)))\n \t  {\n@@ -1081,9 +1094,7 @@ split_function (struct split_point *split_point)\n \n   /* Now create the actual clone.  */\n   rebuild_cgraph_edges ();\n-  node = cgraph_function_versioning (cgraph_get_node (current_function_decl),\n-\t\t\t\t     NULL, NULL,\n-\t\t\t\t     args_to_skip,\n+  node = cgraph_function_versioning (cur_node, NULL, NULL, args_to_skip,\n \t\t\t\t     split_point->split_bbs,\n \t\t\t\t     split_point->entry_bb, \"part\");\n   /* For usual cloning it is enough to clear builtin only when signature\n@@ -1094,7 +1105,7 @@ split_function (struct split_point *split_point)\n       DECL_BUILT_IN_CLASS (node->decl) = NOT_BUILT_IN;\n       DECL_FUNCTION_CODE (node->decl) = (enum built_in_function) 0;\n     }\n-  cgraph_node_remove_callees (cgraph_get_node (current_function_decl));\n+  cgraph_node_remove_callees (cur_node);\n   if (!split_part_return_p)\n     TREE_THIS_VOLATILE (node->decl) = 1;\n   if (dump_file)"}, {"sha": "05ee81bc9b1ae7830379c6774a8b99e2f1c918eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201176d3483714110201548a37b157a33415a635/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201176d3483714110201548a37b157a33415a635/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=201176d3483714110201548a37b157a33415a635", "patch": "@@ -1,3 +1,8 @@\n+2011-08-31  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/49886\n+\t* gcc.c-torture/execute/pr49886.c: New testcase.\n+\n 2011-08-31  Tom de Vries  <tom@codesourcery.com>\n \n \tPR middle-end/43513"}, {"sha": "9e9ceb2629435cb24690c3474be8e2f49384d094", "filename": "gcc/testsuite/gcc.c-torture/execute/pr49886.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201176d3483714110201548a37b157a33415a635/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr49886.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201176d3483714110201548a37b157a33415a635/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr49886.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr49886.c?ref=201176d3483714110201548a37b157a33415a635", "patch": "@@ -0,0 +1,100 @@\n+struct PMC {\n+    unsigned flags;\n+};\n+\n+typedef struct Pcc_cell\n+{\n+    struct PMC *p;\n+    long bla;\n+    long type;\n+} Pcc_cell;\n+\n+int gi;\n+int cond;\n+\n+extern void abort ();\n+extern void never_ever(int interp, struct PMC *pmc)\n+  __attribute__((noinline,noclone));\n+\n+void never_ever (int interp, struct PMC *pmc)\n+{\n+  abort ();\n+}\n+\n+static void mark_cell(int * interp, Pcc_cell *c)\n+  __attribute__((__nonnull__(1)));\n+\n+static void\n+mark_cell(int * interp, Pcc_cell *c)\n+{\n+  if (!cond)\n+    return;\n+\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<18)))\n+    never_ever(gi + 1, c->p);\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<17)))\n+    never_ever(gi + 2, c->p);\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<16)))\n+    never_ever(gi + 3, c->p);\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<15)))\n+    never_ever(gi + 4, c->p);\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<14)))\n+    never_ever(gi + 5, c->p);\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<13)))\n+    never_ever(gi + 6, c->p);\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<12)))\n+    never_ever(gi + 7, c->p);\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<11)))\n+    never_ever(gi + 8, c->p);\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<10)))\n+    never_ever(gi + 9, c->p);\n+}\n+\n+static void\n+foo(int * interp, Pcc_cell *c)\n+{\n+  mark_cell(interp, c);\n+}\n+\n+static struct Pcc_cell *\n+__attribute__((noinline,noclone))\n+getnull(void)\n+{\n+  return (struct Pcc_cell *) 0;\n+}\n+\n+\n+int main()\n+{\n+  int i;\n+\n+  cond = 1;\n+  for (i = 0; i < 100; i++)\n+    foo (&gi, getnull ());\n+  return 0;\n+}\n+\n+\n+void\n+bar_1 (int * interp, Pcc_cell *c)\n+{\n+  c->bla += 1;\n+  mark_cell(interp, c);\n+}\n+\n+void\n+bar_2 (int * interp, Pcc_cell *c)\n+{\n+  c->bla += 2;\n+  mark_cell(interp, c);\n+}\n+"}]}