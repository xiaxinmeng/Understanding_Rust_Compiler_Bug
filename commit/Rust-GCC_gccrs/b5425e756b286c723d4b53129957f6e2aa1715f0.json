{"sha": "b5425e756b286c723d4b53129957f6e2aa1715f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0MjVlNzU2YjI4NmM3MjNkNGI1MzEyOTk1N2Y2ZTJhYTE3MTVmMA==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2006-12-12T15:03:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-12-12T15:03:39Z"}, "message": "re PR rtl-optimization/27761 (combine miscompiles)\n\n\tPR rtl-optimization/27761\n\t* combine.c (try_combine): Don't create a useless garbage SET\n\tif PATTERN (i2) is a PARALLEL.  If added_sets_1, save\n\tPATTERN (i1) resp. SET from i1src to i1dest in i1pat\n\tand use it to prevent accidental modification of i1src.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r119785", "tree": {"sha": "559633eed34ade6f4a5846e16fa4c3474b81f543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/559633eed34ade6f4a5846e16fa4c3474b81f543"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5425e756b286c723d4b53129957f6e2aa1715f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5425e756b286c723d4b53129957f6e2aa1715f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5425e756b286c723d4b53129957f6e2aa1715f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5425e756b286c723d4b53129957f6e2aa1715f0/comments", "author": null, "committer": null, "parents": [{"sha": "90fb678b67b084bbb5d724c01ceb6fbfa2f09269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90fb678b67b084bbb5d724c01ceb6fbfa2f09269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90fb678b67b084bbb5d724c01ceb6fbfa2f09269"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "a857f9a0483502ff4af0f5784ff6cb50388108fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5425e756b286c723d4b53129957f6e2aa1715f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5425e756b286c723d4b53129957f6e2aa1715f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5425e756b286c723d4b53129957f6e2aa1715f0", "patch": "@@ -1,3 +1,12 @@\n+2006-12-12  Jim Wilson  <wilson@specifix.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/27761\n+\t* combine.c (try_combine): Don't create a useless garbage SET\n+\tif PATTERN (i2) is a PARALLEL.  If added_sets_1, save\n+\tPATTERN (i1) resp. SET from i1src to i1dest in i1pat\n+\tand use it to prevent accidental modification of i1src.\n+\n 2006-12-12  Ira Rosen  <irar@il.ibm.com>\n \n \t* tree-vect-analyze.c (vect_analyze_data_ref_access): Add another check"}, {"sha": "32117bee219c66e2e47642336513633d1298e435", "filename": "gcc/combine.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5425e756b286c723d4b53129957f6e2aa1715f0/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5425e756b286c723d4b53129957f6e2aa1715f0/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=b5425e756b286c723d4b53129957f6e2aa1715f0", "patch": "@@ -1819,8 +1819,8 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n   rtx i3dest_killed = 0;\n   /* SET_DEST and SET_SRC of I2 and I1.  */\n   rtx i2dest, i2src, i1dest = 0, i1src = 0;\n-  /* PATTERN (I2), or a copy of it in certain cases.  */\n-  rtx i2pat;\n+  /* PATTERN (I1) and PATTERN (I2), or a copy of it in certain cases.  */\n+  rtx i1pat = 0, i2pat = 0;\n   /* Indicates if I2DEST or I1DEST is in I2SRC or I1_SRC.  */\n   int i2dest_in_i2src = 0, i1dest_in_i1src = 0, i2dest_in_i1src = 0;\n   int i2dest_killed = 0, i1dest_killed = 0;\n@@ -2218,12 +2218,21 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n      rtx.  If I2 is a PARALLEL, we just need the piece that assigns I2SRC to\n      I2DEST.  */\n \n-  i2pat = (GET_CODE (PATTERN (i2)) == PARALLEL\n-\t   ? gen_rtx_SET (VOIDmode, i2dest, i2src)\n-\t   : PATTERN (i2));\n-\n   if (added_sets_2)\n-    i2pat = copy_rtx (i2pat);\n+    {\n+      if (GET_CODE (PATTERN (i2)) == PARALLEL)\n+\ti2pat = gen_rtx_SET (VOIDmode, i2dest, copy_rtx (i2src));\n+      else\n+\ti2pat = copy_rtx (PATTERN (i2));\n+    }\n+\n+  if (added_sets_1)\n+    {\n+      if (GET_CODE (PATTERN (i1)) == PARALLEL)\n+\ti1pat = gen_rtx_SET (VOIDmode, i1dest, copy_rtx (i1src));\n+      else\n+\ti1pat = copy_rtx (PATTERN (i1));\n+    }\n \n   combine_merges++;\n \n@@ -2418,9 +2427,7 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n \t}\n \n       if (added_sets_1)\n-\tXVECEXP (newpat, 0, --total_sets)\n-\t  = (GET_CODE (PATTERN (i1)) == PARALLEL\n-\t     ? gen_rtx_SET (VOIDmode, i1dest, i1src) : PATTERN (i1));\n+\tXVECEXP (newpat, 0, --total_sets) = i1pat;\n \n       if (added_sets_2)\n \t{"}]}