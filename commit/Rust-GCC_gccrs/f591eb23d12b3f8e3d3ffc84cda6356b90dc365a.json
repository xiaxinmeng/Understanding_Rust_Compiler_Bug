{"sha": "f591eb23d12b3f8e3d3ffc84cda6356b90dc365a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU5MWViMjNkMTJiM2Y4ZTNkM2ZmYzg0Y2RhNjM1NmI5MGRjMzY1YQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-12-26T21:56:17Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-12-26T21:56:17Z"}, "message": "insert_iterator.cc (test02): Add.\n\n\n2001-12-26  Benjamin Kosnik  <bkoz@waller.constant.com>\n\n\t* testsuite/24_iterators/insert_iterator.cc (test02): Add.\n\t* testsuite/24_iterators/front_insert_iterator.cc (test02): Add.\n\t* testsuite/24_iterators/back_insert_iterator.cc (test02): Add.\n\t* testsuite/24_iterators/reverse_iterator.cc (test02): Add.\n\n\t* include/bits/stl_iterator.h (reverse_iterator): Uglify member\n\tcurrent to _M_current.\n\t(back_insert_iterator): Ulify member container to _M_container.\n\t(front_insert_iterator): Same.\n\t(insert_iterator): Same.\n\nFrom-SVN: r48318", "tree": {"sha": "5c8e3b9a675d7ddd45af4dcabfbee0c5b9e49ee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c8e3b9a675d7ddd45af4dcabfbee0c5b9e49ee8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f591eb23d12b3f8e3d3ffc84cda6356b90dc365a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f591eb23d12b3f8e3d3ffc84cda6356b90dc365a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f591eb23d12b3f8e3d3ffc84cda6356b90dc365a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f591eb23d12b3f8e3d3ffc84cda6356b90dc365a/comments", "author": null, "committer": null, "parents": [{"sha": "7d8e83691e11570c5d570fd8bdd3f4f2f3f615fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8e83691e11570c5d570fd8bdd3f4f2f3f615fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d8e83691e11570c5d570fd8bdd3f4f2f3f615fa"}], "stats": {"total": 162, "additions": 120, "deletions": 42}, "files": [{"sha": "547b641e4eab1c517ad752746b68453c4db87336", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f591eb23d12b3f8e3d3ffc84cda6356b90dc365a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f591eb23d12b3f8e3d3ffc84cda6356b90dc365a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f591eb23d12b3f8e3d3ffc84cda6356b90dc365a", "patch": "@@ -1,11 +1,24 @@\n+2001-12-26  Benjamin Kosnik  <bkoz@waller.constant.com>\n+\n+\t* testsuite/24_iterators/insert_iterator.cc (test02): Add.\n+\t* testsuite/24_iterators/front_insert_iterator.cc (test02): Add.\n+\t* testsuite/24_iterators/back_insert_iterator.cc (test02): Add.\n+\t* testsuite/24_iterators/reverse_iterator.cc (test02): Add.\n+\n+\t* include/bits/stl_iterator.h (reverse_iterator): Uglify member\n+\tcurrent to _M_current.\n+\t(back_insert_iterator): Ulify member container to _M_container.\n+\t(front_insert_iterator): Same.\n+\t(insert_iterator): Same.\n+\t\n 2001-12-25  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n \t* include/bits/std_limits.h (__glibcpp_xxx_is_modulo): New\n \tmacros for signed types; default value is true.\n \t(numeric_limits<>::is_modulo): Get value from corresponding\n \t__glibcpp_xxx_is_modulo macro.\n \n-Sun Dec 23 18:47:24 2001  Jeffrey A Law  (law@redhat.com)\n+2001-12-23  Jeffrey A Law  <law@redhat.com>\n \n \t* config/os/hpux/bits/os_defines.h: Do not include <_sys/inttypes.h>.\n \tTwiddle return types for strtoll and strtoull to avoid using\n@@ -15,13 +28,13 @@ Sun Dec 23 18:47:24 2001  Jeffrey A Law  (law@redhat.com)\n \n \t* configure.target (CPULIMITSH): Fix typo in alpha case.\n \n-Sat Dec 22 09:52:41 2001  Jeffrey A Law  (law@redhat.com)\n+2001-12-22  Jeffrey A Law  <law@redhat.com>\n \n-        * config/os/hpux/bits/os_defines.h: Update to avoid #defines\n+\t* config/os/hpux/bits/os_defines.h: Update to avoid #defines\n         for strtoll and strtoull.\n \n-Fri Dec 21 17:35:21 2001  Jeffrey A Law  (law@redhat.com)\n-\n+2001-12-21  Jeffrey A Law  <law@redhat.com>\n+\t\n \t* config/os/hpux/bits/os_defines.h: Include <sys/_inttypes.h.\n \tDefine strtoll and strtoull.  Provide prototypes for\n \t__strtoll and __strtoull.  Define _GLIBCPP_USE_LONG_LONG"}, {"sha": "5cfb5791e9afe553842c7633dbf216cdfffbe253", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 38, "deletions": 37, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f591eb23d12b3f8e3d3ffc84cda6356b90dc365a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f591eb23d12b3f8e3d3ffc84cda6356b90dc365a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=f591eb23d12b3f8e3d3ffc84cda6356b90dc365a", "patch": "@@ -66,14 +66,14 @@ namespace std\n   // 24.4.1 Reverse iterators\n   template<typename _Iterator>\n     class reverse_iterator \n-      : public iterator<typename iterator_traits<_Iterator>::iterator_category,\n-\t\t\ttypename iterator_traits<_Iterator>::value_type,\n-\t\t        typename iterator_traits<_Iterator>::difference_type,\n-\t\t        typename iterator_traits<_Iterator>::pointer,\n-                        typename iterator_traits<_Iterator>::reference>\n+    : public iterator<typename iterator_traits<_Iterator>::iterator_category,\n+\t\t      typename iterator_traits<_Iterator>::value_type,\n+\t\t      typename iterator_traits<_Iterator>::difference_type,\n+\t\t      typename iterator_traits<_Iterator>::pointer,\n+                      typename iterator_traits<_Iterator>::reference>\n     {\n     protected:\n-      _Iterator current;\n+      _Iterator _M_current;\n \n     public:\n       typedef _Iterator \t\t\t\t       iterator_type;\n@@ -83,25 +83,25 @@ namespace std\n       typedef typename iterator_traits<_Iterator>::pointer     pointer;\n \n     public:\n-      reverse_iterator() {}\n+      reverse_iterator() { }\n \n       explicit \n-      reverse_iterator(iterator_type __x) : current(__x) {}\n+      reverse_iterator(iterator_type __x) : _M_current(__x) { }\n \n       reverse_iterator(const reverse_iterator& __x) \n-\t: current(__x.current) { }\n+      : _M_current(__x._M_current) { }\n \n       template<typename _Iter>\n         reverse_iterator(const reverse_iterator<_Iter>& __x)\n-\t: current(__x.base()) {}\n+\t: _M_current(__x.base()) { }\n     \n       iterator_type \n-      base() const { return current; }\n+      base() const { return _M_current; }\n \n       reference \n       operator*() const \n       {\n-\t_Iterator __tmp = current;\n+\t_Iterator __tmp = _M_current;\n \treturn *--__tmp;\n       }\n \n@@ -111,46 +111,46 @@ namespace std\n       reverse_iterator& \n       operator++() \n       {\n-\t--current;\n+\t--_M_current;\n \treturn *this;\n       }\n \n       reverse_iterator \n       operator++(int) \n       {\n \treverse_iterator __tmp = *this;\n-\t--current;\n+\t--_M_current;\n \treturn __tmp;\n       }\n \n       reverse_iterator& \n       operator--() \n       {\n-\t++current;\n+\t++_M_current;\n \treturn *this;\n       }\n \n       reverse_iterator operator--(int) \n       {\n \treverse_iterator __tmp = *this;\n-\t++current;\n+\t++_M_current;\n \treturn __tmp;\n       }\n       \n       reverse_iterator \n       operator+(difference_type __n) const \n-      { return reverse_iterator(current - __n); }\n+      { return reverse_iterator(_M_current - __n); }\n \n       reverse_iterator& \n       operator+=(difference_type __n) \n       {\n-\tcurrent -= __n;\n+\t_M_current -= __n;\n \treturn *this;\n       }\n \n       reverse_iterator \n       operator-(difference_type __n) const \n-      { return reverse_iterator(current + __n); }\n+      { return reverse_iterator(_M_current + __n); }\n \n       reverse_iterator& \n       operator-=(difference_type __n) \n@@ -213,22 +213,22 @@ namespace std\n \n   // 24.4.2.2.1 back_insert_iterator\n   template<typename _Container>\n-  class back_insert_iterator \n+    class back_insert_iterator \n     : public iterator<output_iterator_tag, void, void, void, void>\n     {\n     protected:\n-      _Container* container;\n+      _Container* _M_container;\n \n     public:\n       typedef _Container          container_type;\n       \n       explicit \n-      back_insert_iterator(_Container& __x) : container(&__x) {}\n+      back_insert_iterator(_Container& __x) : _M_container(&__x) { }\n \n       back_insert_iterator&\n       operator=(typename _Container::const_reference __value) \n       { \n-\tcontainer->push_back(__value);\n+\t_M_container->push_back(__value);\n \treturn *this;\n       }\n \n@@ -249,20 +249,20 @@ namespace std\n \n   template<typename _Container>\n     class front_insert_iterator \n-      : public iterator<output_iterator_tag, void, void, void, void>\n+    : public iterator<output_iterator_tag, void, void, void, void>\n     {\n     protected:\n-      _Container* container;\n+      _Container* _M_container;\n \n     public:\n       typedef _Container          container_type;\n \n-      explicit front_insert_iterator(_Container& __x) : container(&__x) {}\n+      explicit front_insert_iterator(_Container& __x) : _M_container(&__x) { }\n \n       front_insert_iterator&\n       operator=(typename _Container::const_reference __value) \n       { \n-\tcontainer->push_front(__value);\n+\t_M_container->push_front(__value);\n \treturn *this;\n       }\n \n@@ -277,27 +277,28 @@ namespace std\n     };\n \n   template<typename _Container>\n-  inline front_insert_iterator<_Container> front_inserter(_Container& __x) \n-  { return front_insert_iterator<_Container>(__x); }\n+    inline front_insert_iterator<_Container> \n+    front_inserter(_Container& __x) \n+    { return front_insert_iterator<_Container>(__x); }\n \n   template<typename _Container>\n     class insert_iterator \n-      : public iterator<output_iterator_tag, void, void, void, void>\n+    : public iterator<output_iterator_tag, void, void, void, void>\n     {\n     protected:\n-      _Container* container;\n+      _Container* _M_container;\n       typename _Container::iterator iter;\n \n     public:\n       typedef _Container          container_type;\n       \n       insert_iterator(_Container& __x, typename _Container::iterator __i) \n-\t: container(&__x), iter(__i) {}\n+      : _M_container(&__x), iter(__i) {}\n    \n       insert_iterator&\n       operator=(const typename _Container::const_reference __value) \n       { \n-\titer = container->insert(iter, __value);\n+\titer = _M_container->insert(iter, __value);\n \t++iter;\n \treturn *this;\n       }\n@@ -313,11 +314,11 @@ namespace std\n     };\n   \n   template<typename _Container, typename _Iterator>\n-    inline \n-    insert_iterator<_Container> inserter(_Container& __x, _Iterator __i)\n+    inline insert_iterator<_Container> \n+    inserter(_Container& __x, _Iterator __i)\n     {\n-      typedef typename _Container::iterator __iter;\n-      return insert_iterator<_Container>(__x, __iter(__i));\n+      return insert_iterator<_Container>(__x, \n+\t\t\t\t\t typename _Container::iterator(__i));\n     }\n   \n   // This iterator adapter is 'normal' in the sense that it does not"}, {"sha": "60e7c23191116be542a17893f82cd7a8382505ec", "filename": "libstdc++-v3/testsuite/24_iterators/back_insert_iterator.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f591eb23d12b3f8e3d3ffc84cda6356b90dc365a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f591eb23d12b3f8e3d3ffc84cda6356b90dc365a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator.cc?ref=f591eb23d12b3f8e3d3ffc84cda6356b90dc365a", "patch": "@@ -43,8 +43,20 @@ void test01()\n   typedef test_iterator::container_type container_type;\n }\n \n+\n+// Make sure iterator can be instantiated.\n+template class std::back_insert_iterator<std::list<int> >;\n+\n+void test02()\n+{\n+  typedef std::back_insert_iterator<std::list<int> > iterator_type;\n+  std::list<int> li;\n+  iterator_type it = std::back_inserter(li);\n+}\n+\n int main() \n { \n   test01();\n+  test02();\n   return 0;\n }"}, {"sha": "4be3346a5ed6f443a72af445e3beb7131f15a881", "filename": "libstdc++-v3/testsuite/24_iterators/front_insert_iterator.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f591eb23d12b3f8e3d3ffc84cda6356b90dc365a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f591eb23d12b3f8e3d3ffc84cda6356b90dc365a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator.cc?ref=f591eb23d12b3f8e3d3ffc84cda6356b90dc365a", "patch": "@@ -43,8 +43,19 @@ void test01()\n   typedef test_iterator::container_type container_type;\n }\n \n+// Make sure iterator can be instantiated.\n+template class std::front_insert_iterator<std::list<int> >;\n+\n+void test02()\n+{\n+  typedef std::front_insert_iterator<std::list<int> > iterator_type;\n+  std::list<int> li;\n+  iterator_type it = std::front_inserter(li);\n+}\n+\n int main() \n { \n   test01();\n+  test02();\n   return 0;\n }"}, {"sha": "d3dcd8816a926d6510c9c5ccbe3cb0705c430340", "filename": "libstdc++-v3/testsuite/24_iterators/insert_iterator.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f591eb23d12b3f8e3d3ffc84cda6356b90dc365a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f591eb23d12b3f8e3d3ffc84cda6356b90dc365a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator.cc?ref=f591eb23d12b3f8e3d3ffc84cda6356b90dc365a", "patch": "@@ -45,8 +45,24 @@ void test01()\n   typedef test_iterator::container_type container_type;\n }\n \n+\n+\n+// Make sure iterator can be instantiated.\n+template class std::insert_iterator<std::list<int> >;\n+\n+void test02()\n+{\n+  typedef std::insert_iterator<std::list<int> > iterator_type;\n+\n+  std::list<int> li;\n+  std::list<int>::iterator liit;\n+  iterator_type it01(li, liit);\n+  iterator_type it02 = std::inserter(li, liit);\n+}\n+\n int main() \n { \n   test01();\n+  test02();\n   return 0;\n }"}, {"sha": "d20a44f8691a85630748a54c8f5efe442bfde8bf", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f591eb23d12b3f8e3d3ffc84cda6356b90dc365a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f591eb23d12b3f8e3d3ffc84cda6356b90dc365a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator.cc?ref=f591eb23d12b3f8e3d3ffc84cda6356b90dc365a", "patch": "@@ -46,8 +46,33 @@ void test01()\n   typedef test_iterator::iterator_category iteratory_category;\n }\n \n+\n+// Make sure iterator can be instantiated.\n+template class std::reverse_iterator<int*>;\n+\n+void test02()\n+{\n+  typedef std::reverse_iterator<int*> iterator_type;\n+  iterator_type it01;\n+  iterator_type it02;\n+\n+  // Sanity check non-member operators and functions can be instantiated. \n+  it01 == it02;\n+  it01 != it02;\n+  it01 < it02;\n+  it01 <= it02;\n+  it01 > it02;\n+  it01 >= it02;\n+  it01 - it02;\n+  5 + it02;\n+}\n+\n+\n int main() \n { \n   test01();\n+  test02();\n   return 0;\n }\n+\n+"}]}