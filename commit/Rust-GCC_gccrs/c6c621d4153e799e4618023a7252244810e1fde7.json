{"sha": "c6c621d4153e799e4618023a7252244810e1fde7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZjNjIxZDQxNTNlNzk5ZTQ2MTgwMjNhNzI1MjI0NDgxMGUxZmRlNw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2006-09-28T07:03:59Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-09-28T07:03:59Z"}, "message": "darwin.h (ENABLE_EXECUTE_STACK): New, use getpagesize not __sysctl.\n\n\t* config/darwin.h (ENABLE_EXECUTE_STACK): New, use getpagesize not\n\t__sysctl.\n\t* config/rs6000/darwin.h (ENABLE_EXECUTE_STACK): Remove.\n\t* config/i386/darwin.h (ENABLE_EXECUTE_STACK): Remove.\n\nFrom-SVN: r117274", "tree": {"sha": "6ac634501bdaf2ff88e85b2b5941422ceb3a20fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ac634501bdaf2ff88e85b2b5941422ceb3a20fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6c621d4153e799e4618023a7252244810e1fde7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c621d4153e799e4618023a7252244810e1fde7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6c621d4153e799e4618023a7252244810e1fde7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c621d4153e799e4618023a7252244810e1fde7/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3ed85f6eb9a97b9c75d0f5dbc12e4c4eb2756c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ed85f6eb9a97b9c75d0f5dbc12e4c4eb2756c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ed85f6eb9a97b9c75d0f5dbc12e4c4eb2756c9"}], "stats": {"total": 139, "additions": 45, "deletions": 94}, "files": [{"sha": "9e95e5ffddf125ead7477d038c581d57d00cb719", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6c621d4153e799e4618023a7252244810e1fde7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6c621d4153e799e4618023a7252244810e1fde7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6c621d4153e799e4618023a7252244810e1fde7", "patch": "@@ -1,3 +1,10 @@\n+2006-09-27  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* config/darwin.h (ENABLE_EXECUTE_STACK): New, use getpagesize not\n+\t__sysctl.\n+\t* config/rs6000/darwin.h (ENABLE_EXECUTE_STACK): Remove.\n+\t* config/i386/darwin.h (ENABLE_EXECUTE_STACK): Remove.\n+\n 2006-09-28  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.md (divsi_inv_m0): Remove unused variable."}, {"sha": "6817dc83442927c4629c010da598bf2f549545f9", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6c621d4153e799e4618023a7252244810e1fde7/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6c621d4153e799e4618023a7252244810e1fde7/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=c6c621d4153e799e4618023a7252244810e1fde7", "patch": "@@ -886,4 +886,42 @@ void add_framework_path (char *);\n #define TARGET_ASM_OUTPUT_ANCHOR NULL\n #endif\n \n+/* Attempt to turn on execute permission for the stack.  This may be\n+    used by INITIALIZE_TRAMPOLINE of the target needs it (that is,\n+    if the target machine can change execute permissions on a page).\n+\n+    There is no way to query the execute permission of the stack, so\n+    we always issue the mprotect() call.\n+\n+    Unfortunately it is not possible to make this namespace-clean.\n+\n+    Also note that no errors should be emitted by this code; it is\n+    considered dangerous for library calls to send messages to\n+    stdout/stderr.  */\n+\n+#define ENABLE_EXECUTE_STACK                                            \\\n+extern void __enable_execute_stack (void *);                            \\\n+void                                                                    \\\n+__enable_execute_stack (void *addr)                                     \\\n+{                                                                       \\\n+   extern int mprotect (void *, size_t, int);                           \\\n+   extern int getpagesize (void);\t\t\t\t\t\\\n+   static int size;                                                     \\\n+   static long mask;                                                    \\\n+                                                                        \\\n+   char *page, *end;                                                    \\\n+                                                                        \\\n+   if (size == 0)                                                       \\\n+     {                                                                  \\\n+       size = getpagesize();\t\t\t\t\t\t\\\n+       mask = ~((long) size - 1);                                       \\\n+     }                                                                  \\\n+                                                                        \\\n+   page = (char *) (((long) addr) & mask);                              \\\n+   end  = (char *) ((((long) (addr + (TARGET_64BIT ? 48 : 40))) & mask) + size); \\\n+                                                                        \\\n+   /* 7 == PROT_READ | PROT_WRITE | PROT_EXEC */                        \\\n+   (void) mprotect (page, end - page, 7);                               \\\n+}\n+\n #endif /* CONFIG_DARWIN_H */"}, {"sha": "61cdeb068906e33de08ee25370fe57e990f1353a", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6c621d4153e799e4618023a7252244810e1fde7/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6c621d4153e799e4618023a7252244810e1fde7/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=c6c621d4153e799e4618023a7252244810e1fde7", "patch": "@@ -204,53 +204,6 @@ extern void darwin_x86_file_end (void);\n    : (n) >= 11 && (n) <= 18 ? (n) + 1\t\t\t\t\t\\\n    : (n))\n \n-/* Attempt to turn on execute permission for the stack.  This may be\n-    used by INITIALIZE_TRAMPOLINE of the target needs it (that is,\n-    if the target machine can change execute permissions on a page).\n-\n-    There is no way to query the execute permission of the stack, so\n-    we always issue the mprotect() call.\n-\n-    Note that we go out of our way to use namespace-non-invasive calls\n-    here.  Unfortunately, there is no libc-internal name for mprotect().\n-\n-    Also note that no errors should be emitted by this code; it is\n-    considered dangerous for library calls to send messages to\n-    stdout/stderr.  */\n-\n-#define ENABLE_EXECUTE_STACK                                            \\\n-extern void __enable_execute_stack (void *);                            \\\n-void                                                                    \\\n-__enable_execute_stack (void *addr)                                     \\\n-{                                                                       \\\n-   extern int mprotect (void *, size_t, int);                           \\\n-   extern int __sysctl (int *, unsigned int, void *, size_t *,          \\\n-                       void *, size_t);                                 \\\n-                                                                        \\\n-   static int size;                                                     \\\n-   static long mask;                                                    \\\n-                                                                        \\\n-   char *page, *end;                                                    \\\n-                                                                        \\\n-   if (size == 0)                                                       \\\n-     {                                                                  \\\n-       int mib[2];                                                      \\\n-       size_t len;                                                      \\\n-                                                                        \\\n-       mib[0] = 6; /* CTL_HW */                                         \\\n-       mib[1] = 7; /* HW_PAGESIZE */                                    \\\n-       len = sizeof (size);                                             \\\n-       (void) __sysctl (mib, 2, &size, &len, NULL, 0);                  \\\n-       mask = ~((long) size - 1);                                       \\\n-     }                                                                  \\\n-                                                                        \\\n-   page = (char *) (((long) addr) & mask);                              \\\n-   end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n-                                                                        \\\n-   /* 7 == PROT_READ | PROT_WRITE | PROT_EXEC */                        \\\n-   (void) mprotect (page, end - page, 7);                               \\\n-}\n-\n #undef REGISTER_TARGET_PRAGMAS\n #define REGISTER_TARGET_PRAGMAS() DARWIN_REGISTER_TARGET_PRAGMAS()\n "}, {"sha": "6594c71ee7904879b3c7bbd0ebb14852380c60d2", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6c621d4153e799e4618023a7252244810e1fde7/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6c621d4153e799e4618023a7252244810e1fde7/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=c6c621d4153e799e4618023a7252244810e1fde7", "patch": "@@ -441,50 +441,3 @@ do {\t\t\t\t\t\t\t\t\t\\\n   (TARGET_64BIT\t\t\t\t\t\t\t\\\n    || (darwin_macosx_version_min\t\t\t\t\\\n        && strverscmp (darwin_macosx_version_min, \"10.3\") >= 0))\n-\n-/* Attempt to turn on execute permission for the stack.  This may be\n-    used by INITIALIZE_TRAMPOLINE of the target needs it (that is,\n-    if the target machine can change execute permissions on a page).\n-\n-    There is no way to query the execute permission of the stack, so\n-    we always issue the mprotect() call.\n-\n-    Note that we go out of our way to use namespace-non-invasive calls\n-    here.  Unfortunately, there is no libc-internal name for mprotect().\n-\n-    Also note that no errors should be emitted by this code; it is\n-    considered dangerous for library calls to send messages to\n-    stdout/stderr.  */\n-\n-#define ENABLE_EXECUTE_STACK                                            \\\n-extern void __enable_execute_stack (void *);                            \\\n-void                                                                    \\\n-__enable_execute_stack (void *addr)                                     \\\n-{                                                                       \\\n-   extern int mprotect (void *, size_t, int);                           \\\n-   extern int __sysctl (int *, unsigned int, void *, size_t *,          \\\n-                       void *, size_t);                                 \\\n-                                                                        \\\n-   static int size;                                                     \\\n-   static long mask;                                                    \\\n-                                                                        \\\n-   char *page, *end;                                                    \\\n-                                                                        \\\n-   if (size == 0)                                                       \\\n-     {                                                                  \\\n-       int mib[2];                                                      \\\n-       size_t len;                                                      \\\n-                                                                        \\\n-       mib[0] = 6; /* CTL_HW */                                         \\\n-       mib[1] = 7; /* HW_PAGESIZE */                                    \\\n-       len = sizeof (size);                                             \\\n-       (void) __sysctl (mib, 2, &size, &len, NULL, 0);                  \\\n-       mask = ~((long) size - 1);                                       \\\n-     }                                                                  \\\n-                                                                        \\\n-   page = (char *) (((long) addr) & mask);                              \\\n-   end  = (char *) ((((long) (addr + (TARGET_64BIT ? 48 : 40))) & mask) + size); \\\n-                                                                        \\\n-   /* 7 == PROT_READ | PROT_WRITE | PROT_EXEC */                        \\\n-   (void) mprotect (page, end - page, 7);                               \\\n-}"}]}