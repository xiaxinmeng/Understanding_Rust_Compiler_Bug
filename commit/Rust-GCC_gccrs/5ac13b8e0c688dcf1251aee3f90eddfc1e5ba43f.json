{"sha": "5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFjMTNiOGUwYzY4OGRjZjEyNTFhZWUzZjkwZWRkZmMxZTViYTQzZg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-10-27T21:41:52Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-10-27T21:41:52Z"}, "message": "re PR fortran/46161 ([OOP] Invalid: Passing non-polymorphic to allocatable polymorphic dummy)\n\n2010-10-27  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/46161\n\t* interface.c (compare_allocatable): Handle polymorphic allocatables.\n\t(compare_parameter): Add two error messages for polymorphic dummies.\n\n2010-10-27  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/46161\n\t* gfortran.dg/class_dummy_3.f03: New.\n\nFrom-SVN: r166018", "tree": {"sha": "d6cfcfe21cfcf637625c5a369106662858f5d290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6cfcfe21cfcf637625c5a369106662858f5d290"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfc839a4b23ef56b53de632a713b1e6d1f2b89d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc839a4b23ef56b53de632a713b1e6d1f2b89d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfc839a4b23ef56b53de632a713b1e6d1f2b89d4"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "f64d530af4c87ad763d6e160c03d719ea67d7e70", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f", "patch": "@@ -1,3 +1,9 @@\n+2010-10-27  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/46161\n+\t* interface.c (compare_allocatable): Handle polymorphic allocatables.\n+\t(compare_parameter): Add two error messages for polymorphic dummies.\n+\n 2010-10-26  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/42647"}, {"sha": "16b941cb0be4816bb621ba0c0f5b4eb9f55bf7e5", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f", "patch": "@@ -1375,7 +1375,8 @@ compare_allocatable (gfc_symbol *formal, gfc_expr *actual)\n {\n   symbol_attribute attr;\n \n-  if (formal->attr.allocatable)\n+  if (formal->attr.allocatable\n+      || (formal->ts.type == BT_CLASS && CLASS_DATA (formal)->attr.allocatable))\n     {\n       attr = gfc_expr_attr (actual);\n       if (!attr.allocatable)\n@@ -1519,6 +1520,28 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t\t   gfc_typename (&formal->ts));\n       return 0;\n     }\n+    \n+  /* F2003, 12.5.2.5.  */\n+  if (formal->ts.type == BT_CLASS\n+      && (CLASS_DATA (formal)->attr.class_pointer\n+          || CLASS_DATA (formal)->attr.allocatable))\n+    {\n+      if (actual->ts.type != BT_CLASS)\n+\t{\n+\t  if (where)\n+\t    gfc_error (\"Actual argument to '%s' at %L must be polymorphic\",\n+\t\t\tformal->name, &actual->where);\n+\t  return 0;\n+\t}\n+      if (CLASS_DATA (actual)->ts.u.derived\n+\t  != CLASS_DATA (formal)->ts.u.derived)\n+\t{\n+\t  if (where)\n+\t    gfc_error (\"Actual argument to '%s' at %L must have the same \"\n+\t\t       \"declared type\", formal->name, &actual->where);\n+\t  return 0;\n+\t}\n+    }\n \n   if (formal->attr.codimension)\n     {"}, {"sha": "a749c49a47bebfcb06a00f088a81532d71e6cf4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f", "patch": "@@ -1,3 +1,8 @@\n+2010-10-27  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/46161\n+\t* gfortran.dg/class_dummy_3.f03: New.\n+\n 2010-10-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/avx-vzeroupper-1.c: Add -mtune=generic."}, {"sha": "6b12eb892b084406c037376e4ad9f23bb73bd77a", "filename": "gcc/testsuite/gfortran.dg/class_dummy_3.f03", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_3.f03?ref=5ac13b8e0c688dcf1251aee3f90eddfc1e5ba43f", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do compile }\n+!\n+! PR 46161: [OOP] Invalid: Passing non-polymorphic to allocatable polymorphic dummy\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+  implicit none\n+\n+  type :: base\n+  end type \n+\n+  type, extends(base) :: ext\n+  end type \n+\n+  type(base), allocatable :: a\n+  class(base), pointer :: b\n+  class(ext), allocatable :: c\n+  \n+  call test(a)  ! { dg-error \"must be polymorphic\" }\n+  call test(b)  ! { dg-error \"must be ALLOCATABLE\" }\n+  call test(c)  ! { dg-error \"must have the same declared type\" }\n+\n+contains\n+\n+  subroutine test(arg)\n+    implicit none \n+    class(base), allocatable :: arg\n+  end subroutine\n+\n+end"}]}