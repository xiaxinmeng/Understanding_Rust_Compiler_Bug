{"sha": "59cbecb75d3fd270094c2008343bf86f0c3bf80d", "node_id": "C_kwDOANBUbNoAKDU5Y2JlY2I3NWQzZmQyNzAwOTRjMjAwODM0M2JmODZmMGMzYmY4MGQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2023-01-11T11:39:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-11T11:39:37Z"}, "message": "Merge #1730\n\n1730: Improve type checking on let statements r=philberty a=powerboat9\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>\r\n\r\n---\r\n\r\nImproves the typechecking of patterns in let statements.\n\nCo-authored-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "fcd5ab298190296dfc860270859ca8aa7f1a7d23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcd5ab298190296dfc860270859ca8aa7f1a7d23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59cbecb75d3fd270094c2008343bf86f0c3bf80d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjvp/5CRBK7hj4Ov3rIwAAQxgIAEx8Qazk/hFKa8SrFlwpc7QL\nDIgKZZ+y5Vkdy9x8WVaBobkR58AZ5k78ZohqY2eaja2eQqqxBPRU5QBCXFYKuF2/\n75x901QtSKOkKmO87spr+IKKlpLyu7PtMUKsi+39K+BtGp3YkSAtV3akcjp4HkCb\nPgE5aLkfJC2p+P05TExGxASzU7Wm8irekGj613/YfbmkJ5lB2lO1vTm/LbTh75wr\nYcYzaP3Mtkqt6DfTY22IH6Zh7NLZelURRZNnXJsbLTq5ZcioDMf1kdOQkyDVGeu9\nHFVFFd6e6gg2+yHzxcUR9kUPB2iG90aldBkOkXvQBK0qth4NK1NCprtUMNuW+6M=\n=EIDu\n-----END PGP SIGNATURE-----\n", "payload": "tree fcd5ab298190296dfc860270859ca8aa7f1a7d23\nparent b6fcee808fd654d2d5c13b87565f1e59cc61a138\nparent 97c1308bec6bc149b9295b882b7261ca8f3df048\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1673437177 +0000\ncommitter GitHub <noreply@github.com> 1673437177 +0000\n\nMerge #1730\n\n1730: Improve type checking on let statements r=philberty a=powerboat9\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>\r\n\r\n---\r\n\r\nImproves the typechecking of patterns in let statements.\n\nCo-authored-by: Owen Avery <powerboat9.gamer@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59cbecb75d3fd270094c2008343bf86f0c3bf80d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59cbecb75d3fd270094c2008343bf86f0c3bf80d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59cbecb75d3fd270094c2008343bf86f0c3bf80d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6fcee808fd654d2d5c13b87565f1e59cc61a138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fcee808fd654d2d5c13b87565f1e59cc61a138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6fcee808fd654d2d5c13b87565f1e59cc61a138"}, {"sha": "97c1308bec6bc149b9295b882b7261ca8f3df048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c1308bec6bc149b9295b882b7261ca8f3df048", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97c1308bec6bc149b9295b882b7261ca8f3df048"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "673d57cffe8a191b9d010e51af5ec85c61a21272", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.cc", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cbecb75d3fd270094c2008343bf86f0c3bf80d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cbecb75d3fd270094c2008343bf86f0c3bf80d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc?ref=59cbecb75d3fd270094c2008343bf86f0c3bf80d", "patch": "@@ -82,7 +82,7 @@ TypeCheckStmt::visit (HIR::LetStmt &stmt)\n {\n   infered = TyTy::TupleType::get_unit_type (stmt.get_mappings ().get_hirid ());\n \n-  const HIR::Pattern &stmt_pattern = *stmt.get_pattern ();\n+  HIR::Pattern &stmt_pattern = *stmt.get_pattern ();\n   TyTy::BaseType *init_expr_ty = nullptr;\n   Location init_expr_locus;\n   if (stmt.has_init_expr ())\n@@ -111,27 +111,25 @@ TypeCheckStmt::visit (HIR::LetStmt &stmt)\n \t\t     TyTy::TyWithLocation (specified_ty, specified_ty_locus),\n \t\t     TyTy::TyWithLocation (init_expr_ty, init_expr_locus),\n \t\t     stmt.get_locus ());\n-      context->insert_type (stmt_pattern.get_pattern_mappings (), specified_ty);\n+      TypeCheckPattern::Resolve (&stmt_pattern, specified_ty);\n     }\n   else\n     {\n       // let x:i32;\n       if (specified_ty != nullptr)\n \t{\n-\t  context->insert_type (stmt_pattern.get_pattern_mappings (),\n-\t\t\t\tspecified_ty);\n+\t  TypeCheckPattern::Resolve (&stmt_pattern, specified_ty);\n \t}\n       // let x = 123;\n       else if (init_expr_ty != nullptr)\n \t{\n-\t  context->insert_type (stmt_pattern.get_pattern_mappings (),\n-\t\t\t\tinit_expr_ty);\n+\t  TypeCheckPattern::Resolve (&stmt_pattern, init_expr_ty);\n \t}\n       // let x;\n       else\n \t{\n-\t  context->insert_type (\n-\t    stmt_pattern.get_pattern_mappings (),\n+\t  TypeCheckPattern::Resolve (\n+\t    &stmt_pattern,\n \t    new TyTy::InferType (\n \t      stmt_pattern.get_pattern_mappings ().get_hirid (),\n \t      TyTy::InferType::InferTypeKind::GENERAL, stmt.get_locus ()));"}]}