{"sha": "9de04252a07c04a9676de3c8606b0a29e66a23ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRlMDQyNTJhMDdjMDRhOTY3NmRlM2M4NjA2YjBhMjllNjZhMjNjZQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2013-05-15T10:35:59Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2013-05-15T10:35:59Z"}, "message": "ipa-prop.c (ipa_print_node_jump_functions): Print symbol order in header...\n\n2013-05-15  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-prop.c (ipa_print_node_jump_functions): Print symbol order in\n\theader, print symbol order instead of node uid, print more information\n\tabout indirect edge targets.\n\t(ipa_make_edge_direct_to_target): Print symbol order instead of node\n\tuids.\n\t(ipa_make_edge_direct_to_target): Likewise.\n\t(remove_described_reference): Likewise.\n\t(propagate_controlled_uses): Likewise.\n\t(ipa_print_node_params): Also print symbol order.\n\t(ipcp_transform_function): Print symbol order instead of node uids.\n\t* cgraph.c (cgraph_redirect_edge_call_stmt_to_callee): Likewise.\n\t(cgraph_get_create_real_symbol_node): Likewise.\n\t* ipa-cp.c (print_lattice): Likewise.\n\t(print_all_lattices): Likewise.\n\t(determine_versionability): Likewise.\n\t(initialize_node_lattices): Likewise.\n\t(estimate_local_effects): Likewise.\n\t(update_profiling_info): Likewise.\n\t(create_specialized_node): Likewise.\n\t(perhaps_add_new_callers): Likewise.\n\t(decide_about_value): Likewise.\n\t(decide_whether_version_node): Likewise.\n\t(identify_dead_nodes): Likewise.\n\t* ipa-inline-analysis.c (dump_inline_edge_summary): Likewise.\n\t(dump_inline_summary): Likewise.\n\t(estimate_node_size_and_time): Likewise.\n\t(inline_analyze_function): Likewise.\n\t* ipa-inline.c (report_inline_failed_reason): Likewise.\n\t(want_early_inline_function_p): Likewise.\n\t(edge_badness): Likewise.\n\t(update_edge_key): Likewise.\n\t(inline_small_functions): Likewise.  Add dumping of order to two other\n\tdumps.\n\t* ipa-pure-const.c (pure_const_read_summary): Print symbol order\n\tinstead of node uids.\n\t(propagate_pure_const): Likewise.\n\t(propagate_pure_const): Likewise.\n\t* ipa-utils.c (dump_cgraph_node_set): Likewise.\n\t* lto-cgraph.c (input_node): Explicitly specify we dump uid.\n\t* lto-symtab.c (lto_cgraph_replace_node): Print symbol order instead\n\tof node uids.\n\t* tree-pretty-print.c (dump_function_header): Likewise.\n\t* tree-sra.c (convert_callers_for_node): Dump in traditional format.\n\tPrint symbol order instead of node uids.\n\nlto/\n\t* lto-partition.c (lto_balanced_map): Print symbol order instead\n\tof node uids.\n\nFrom-SVN: r198925", "tree": {"sha": "58c9805dc7bf2a381e5910b508a1fe957bbb0de5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58c9805dc7bf2a381e5910b508a1fe957bbb0de5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9de04252a07c04a9676de3c8606b0a29e66a23ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de04252a07c04a9676de3c8606b0a29e66a23ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9de04252a07c04a9676de3c8606b0a29e66a23ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de04252a07c04a9676de3c8606b0a29e66a23ce/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1dd03b91ccae183b0b313cc0a54953dfc621951a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd03b91ccae183b0b313cc0a54953dfc621951a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dd03b91ccae183b0b313cc0a54953dfc621951a"}], "stats": {"total": 227, "additions": 152, "deletions": 75}, "files": [{"sha": "c8ef00489e3b752279fcfb0f7bd7f7e0f079c9b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9de04252a07c04a9676de3c8606b0a29e66a23ce", "patch": "@@ -1,3 +1,50 @@\n+2013-05-15  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.c (ipa_print_node_jump_functions): Print symbol order in\n+\theader, print symbol order instead of node uid, print more information\n+\tabout indirect edge targets.\n+\t(ipa_make_edge_direct_to_target): Print symbol order instead of node\n+\tuids.\n+\t(ipa_make_edge_direct_to_target): Likewise.\n+\t(remove_described_reference): Likewise.\n+\t(propagate_controlled_uses): Likewise.\n+\t(ipa_print_node_params): Also print symbol order.\n+\t(ipcp_transform_function): Print symbol order instead of node uids.\n+\t* cgraph.c (cgraph_redirect_edge_call_stmt_to_callee): Likewise.\n+\t(cgraph_get_create_real_symbol_node): Likewise.\n+\t* ipa-cp.c (print_lattice): Likewise.\n+\t(print_all_lattices): Likewise.\n+\t(determine_versionability): Likewise.\n+\t(initialize_node_lattices): Likewise.\n+\t(estimate_local_effects): Likewise.\n+\t(update_profiling_info): Likewise.\n+\t(create_specialized_node): Likewise.\n+\t(perhaps_add_new_callers): Likewise.\n+\t(decide_about_value): Likewise.\n+\t(decide_whether_version_node): Likewise.\n+\t(identify_dead_nodes): Likewise.\n+\t* ipa-inline-analysis.c (dump_inline_edge_summary): Likewise.\n+\t(dump_inline_summary): Likewise.\n+\t(estimate_node_size_and_time): Likewise.\n+\t(inline_analyze_function): Likewise.\n+\t* ipa-inline.c (report_inline_failed_reason): Likewise.\n+\t(want_early_inline_function_p): Likewise.\n+\t(edge_badness): Likewise.\n+\t(update_edge_key): Likewise.\n+\t(inline_small_functions): Likewise.  Add dumping of order to two other\n+\tdumps.\n+\t* ipa-pure-const.c (pure_const_read_summary): Print symbol order\n+\tinstead of node uids.\n+\t(propagate_pure_const): Likewise.\n+\t(propagate_pure_const): Likewise.\n+\t* ipa-utils.c (dump_cgraph_node_set): Likewise.\n+\t* lto-cgraph.c (input_node): Explicitly specify we dump uid.\n+\t* lto-symtab.c (lto_cgraph_replace_node): Print symbol order instead\n+\tof node uids.\n+\t* tree-pretty-print.c (dump_function_header): Likewise.\n+\t* tree-sra.c (convert_callers_for_node): Dump in traditional format.\n+\tPrint symbol order instead of node uids.\n+\n 2013-05-15  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.c (s390_register_move_cost): Don't impose the"}, {"sha": "dff391638da458c17c607c4762d800d42429f58f", "filename": "gcc/cgraph.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=9de04252a07c04a9676de3c8606b0a29e66a23ce", "patch": "@@ -1049,8 +1049,8 @@ cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *e)\n   if (cgraph_dump_file)\n     {\n       fprintf (cgraph_dump_file, \"updating call of %s/%i -> %s/%i: \",\n-\t       xstrdup (cgraph_node_name (e->caller)), e->caller->uid,\n-\t       xstrdup (cgraph_node_name (e->callee)), e->callee->uid);\n+\t       xstrdup (cgraph_node_name (e->caller)), e->caller->symbol.order,\n+\t       xstrdup (cgraph_node_name (e->callee)), e->callee->symbol.order);\n       print_gimple_stmt (cgraph_dump_file, e->call_stmt, 0, dump_flags);\n       if (e->callee->clone.combined_args_to_skip)\n \t{\n@@ -2644,11 +2644,12 @@ cgraph_get_create_real_symbol_node (tree decl)\n       if (dump_file)\n \tfprintf (dump_file, \"Introduced new external node \"\n \t\t \"(%s/%i) and turned into root of the clone tree.\\n\",\n-\t\t xstrdup (cgraph_node_name (node)), node->uid);\n+\t\t xstrdup (cgraph_node_name (node)), node->symbol.order);\n     }\n   else if (dump_file)\n     fprintf (dump_file, \"Introduced new external node \"\n-\t     \"(%s/%i).\\n\", xstrdup (cgraph_node_name (node)), node->uid);\n+\t     \"(%s/%i).\\n\", xstrdup (cgraph_node_name (node)),\n+\t     node->symbol.order);\n   return node;\n }\n #include \"gt-cgraph.h\""}, {"sha": "40c946dc1f110d8c979ddff424da8b9428de6056", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=9de04252a07c04a9676de3c8606b0a29e66a23ce", "patch": "@@ -369,7 +369,8 @@ print_lattice (FILE * f, struct ipcp_lattice *lat,\n \n \t  fprintf (f, \" [from:\");\n \t  for (s = val->sources; s; s = s->next)\n-\t    fprintf (f, \" %i(%i)\", s->cs->caller->uid,s->cs->frequency);\n+\t    fprintf (f, \" %i(%i)\", s->cs->caller->symbol.order,\n+\t\t     s->cs->frequency);\n \t  fprintf (f, \"]\");\n \t}\n \n@@ -397,7 +398,8 @@ print_all_lattices (FILE * f, bool dump_sources, bool dump_benefits)\n       struct ipa_node_params *info;\n \n       info = IPA_NODE_REF (node);\n-      fprintf (f, \"  Node: %s/%i:\\n\", cgraph_node_name (node), node->uid);\n+      fprintf (f, \"  Node: %s/%i:\\n\", cgraph_node_name (node),\n+\t       node->symbol.order);\n       count = ipa_get_param_count (info);\n       for (i = 0; i < count; i++)\n \t{\n@@ -447,7 +449,7 @@ determine_versionability (struct cgraph_node *node)\n \n   if (reason && dump_file && !node->alias && !node->thunk.thunk_p)\n     fprintf (dump_file, \"Function %s/%i is not versionable, reason: %s.\\n\",\n-\t     cgraph_node_name (node), node->uid, reason);\n+\t     cgraph_node_name (node), node->symbol.order, reason);\n \n   node->local.versionable = (reason == NULL);\n }\n@@ -727,7 +729,7 @@ initialize_node_lattices (struct cgraph_node *node)\n       if (dump_file && (dump_flags & TDF_DETAILS)\n \t  && !node->alias && !node->thunk.thunk_p)\n \tfprintf (dump_file, \"Marking all lattices of %s/%i as %s\\n\",\n-\t\t cgraph_node_name (node), node->uid,\n+\t\t cgraph_node_name (node), node->symbol.order,\n \t\t disable ? \"BOTTOM\" : \"VARIABLE\");\n     }\n \n@@ -1820,7 +1822,7 @@ estimate_local_effects (struct cgraph_node *node)\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"\\nEstimating effects for %s/%i, base_time: %i.\\n\",\n-\t     cgraph_node_name (node), node->uid, base_time);\n+\t     cgraph_node_name (node), node->symbol.order, base_time);\n \n   always_const = gather_context_independent_values (info, &known_csts,\n \t\t\t\t\t\t    &known_binfos, &known_aggs,\n@@ -2570,7 +2572,7 @@ update_profiling_info (struct cgraph_node *orig_node,\n \tfprintf (dump_file, \"    Problem: node %s/%i has too low count \"\n \t\t HOST_WIDE_INT_PRINT_DEC \" while the sum of incoming \"\n \t\t \"counts is \" HOST_WIDE_INT_PRINT_DEC \"\\n\",\n-\t\t cgraph_node_name (orig_node), orig_node->uid,\n+\t\t cgraph_node_name (orig_node), orig_node->symbol.order,\n \t\t (HOST_WIDE_INT) orig_node_count,\n \t\t (HOST_WIDE_INT) (orig_sum + new_sum));\n \n@@ -2704,7 +2706,7 @@ create_specialized_node (struct cgraph_node *node,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"     the new node is %s/%i.\\n\",\n-\t       cgraph_node_name (new_node), new_node->uid);\n+\t       cgraph_node_name (new_node), new_node->symbol.order);\n       if (aggvals)\n \tipa_dump_agg_replacement_values (dump_file, aggvals);\n     }\n@@ -3254,9 +3256,9 @@ perhaps_add_new_callers (struct cgraph_node *node, struct ipcp_value *val)\n \t\t    fprintf (dump_file, \" - adding an extra caller %s/%i\"\n \t\t\t     \" of %s/%i\\n\",\n \t\t\t     xstrdup (cgraph_node_name (cs->caller)),\n-\t\t\t     cs->caller->uid,\n+\t\t\t     cs->caller->symbol.order,\n \t\t\t     xstrdup (cgraph_node_name (val->spec_node)),\n-\t\t\t     val->spec_node->uid);\n+\t\t\t     val->spec_node->symbol.order);\n \n \t\t  cgraph_redirect_edge_callee (cs, val->spec_node);\n \t\t  redirected_sum += cs->count;\n@@ -3361,7 +3363,7 @@ decide_about_value (struct cgraph_node *node, int index, HOST_WIDE_INT offset,\n \n   if (dump_file)\n     fprintf (dump_file, \"  Creating a specialized node of %s/%i.\\n\",\n-\t     cgraph_node_name (node), node->uid);\n+\t     cgraph_node_name (node), node->symbol.order);\n \n   callers = gather_edges_for_value (val, caller_count);\n   kv = known_csts.copy ();\n@@ -3398,7 +3400,7 @@ decide_whether_version_node (struct cgraph_node *node)\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"\\nEvaluating opportunities for %s/%i.\\n\",\n-\t     cgraph_node_name (node), node->uid);\n+\t     cgraph_node_name (node), node->symbol.order);\n \n   gather_context_independent_values (info, &known_csts, &known_binfos,\n \t\t\t\t  info->do_clone_for_all_contexts ? &known_aggs\n@@ -3442,7 +3444,7 @@ decide_whether_version_node (struct cgraph_node *node)\n       if (dump_file)\n \tfprintf (dump_file, \" - Creating a specialized node of %s/%i \"\n \t\t \"for all known contexts.\\n\", cgraph_node_name (node),\n-\t\t node->uid);\n+\t\t node->symbol.order);\n \n       callers = collect_callers_of_node (node);\n       move_binfos_to_values (known_csts, known_binfos);\n@@ -3533,7 +3535,7 @@ identify_dead_nodes (struct cgraph_node *node)\n       for (v = node; v ; v = ((struct ipa_dfs_info *) v->symbol.aux)->next_cycle)\n \tif (IPA_NODE_REF (v)->node_dead)\n \t  fprintf (dump_file, \"  Marking node as dead: %s/%i.\\n\",\n-\t\t   cgraph_node_name (v), v->uid);\n+\t\t   cgraph_node_name (v), v->symbol.order);\n     }\n }\n "}, {"sha": "c6f127ebbd238e2744ac7816d97e6bcd51058559", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=9de04252a07c04a9676de3c8606b0a29e66a23ce", "patch": "@@ -1291,7 +1291,7 @@ dump_inline_edge_summary (FILE *f, int indent, struct cgraph_node *node,\n       fprintf (f,\n \t       \"%*s%s/%i %s\\n%*s  loop depth:%2i freq:%4i size:%2i\"\n \t       \" time: %2i callee size:%2i stack:%2i\",\n-\t       indent, \"\", cgraph_node_name (callee), callee->uid,\n+\t       indent, \"\", cgraph_node_name (callee), callee->symbol.order,\n \t       !edge->inline_failed\n \t       ? \"inlined\" : cgraph_inline_failed_string (edge-> inline_failed),\n \t       indent, \"\", es->loop_depth, edge->frequency,\n@@ -1357,7 +1357,7 @@ dump_inline_summary (FILE *f, struct cgraph_node *node)\n       size_time_entry *e;\n       int i;\n       fprintf (f, \"Inline summary for %s/%i\", cgraph_node_name (node),\n-\t       node->uid);\n+\t       node->symbol.order);\n       if (DECL_DISREGARD_INLINE_LIMITS (node->symbol.decl))\n \tfprintf (f, \" always_inline\");\n       if (s->inlinable)\n@@ -2870,7 +2870,8 @@ estimate_node_size_and_time (struct cgraph_node *node,\n     {\n       bool found = false;\n       fprintf (dump_file, \"   Estimating body: %s/%i\\n\"\n-\t       \"   Known to be false: \", cgraph_node_name (node), node->uid);\n+\t       \"   Known to be false: \", cgraph_node_name (node),\n+\t       node->symbol.order);\n \n       for (i = predicate_not_inlined_condition;\n \t   i < (predicate_first_dynamic_condition\n@@ -3650,7 +3651,7 @@ inline_analyze_function (struct cgraph_node *node)\n \n   if (dump_file)\n     fprintf (dump_file, \"\\nAnalyzing function: %s/%u\\n\",\n-\t     cgraph_node_name (node), node->uid);\n+\t     cgraph_node_name (node), node->symbol.order);\n   if (optimize && !node->thunk.thunk_p)\n     inline_indirect_intraprocedural_analysis (node);\n   compute_inline_parameters (node, false);"}, {"sha": "35fce6d4a1a541886dc2b5b2add293985b907311", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=9de04252a07c04a9676de3c8606b0a29e66a23ce", "patch": "@@ -218,8 +218,8 @@ report_inline_failed_reason (struct cgraph_edge *e)\n   if (dump_file)\n     {\n       fprintf (dump_file, \"  not inlinable: %s/%i -> %s/%i, %s\\n\",\n-\t       xstrdup (cgraph_node_name (e->caller)), e->caller->uid,\n-\t       xstrdup (cgraph_node_name (e->callee)), e->callee->uid,\n+\t       xstrdup (cgraph_node_name (e->caller)), e->caller->symbol.order,\n+\t       xstrdup (cgraph_node_name (e->callee)), e->callee->symbol.order,\n \t       cgraph_inline_failed_string (e->inline_failed));\n     }\n }\n@@ -424,8 +424,9 @@ want_early_inline_function_p (struct cgraph_edge *e)\n \t  if (dump_file)\n \t    fprintf (dump_file, \"  will not early inline: %s/%i->%s/%i, \"\n \t\t     \"call is cold and code would grow by %i\\n\",\n-\t\t     xstrdup (cgraph_node_name (e->caller)), e->caller->uid,\n-\t\t     xstrdup (cgraph_node_name (callee)), callee->uid,\n+\t\t     xstrdup (cgraph_node_name (e->caller)),\n+\t\t     e->caller->symbol.order,\n+\t\t     xstrdup (cgraph_node_name (callee)), callee->symbol.order,\n \t\t     growth);\n \t  want_inline = false;\n \t}\n@@ -434,8 +435,9 @@ want_early_inline_function_p (struct cgraph_edge *e)\n \t  if (dump_file)\n \t    fprintf (dump_file, \"  will not early inline: %s/%i->%s/%i, \"\n \t\t     \"growth %i exceeds --param early-inlining-insns\\n\",\n-\t\t     xstrdup (cgraph_node_name (e->caller)), e->caller->uid,\n-\t\t     xstrdup (cgraph_node_name (callee)), callee->uid,\n+\t\t     xstrdup (cgraph_node_name (e->caller)),\n+\t\t     e->caller->symbol.order,\n+\t\t     xstrdup (cgraph_node_name (callee)), callee->symbol.order,\n \t\t     growth);\n \t  want_inline = false;\n \t}\n@@ -446,8 +448,9 @@ want_early_inline_function_p (struct cgraph_edge *e)\n \t    fprintf (dump_file, \"  will not early inline: %s/%i->%s/%i, \"\n \t\t     \"growth %i exceeds --param early-inlining-insns \"\n \t\t     \"divided by number of calls\\n\",\n-\t\t     xstrdup (cgraph_node_name (e->caller)), e->caller->uid,\n-\t\t     xstrdup (cgraph_node_name (callee)), callee->uid,\n+\t\t     xstrdup (cgraph_node_name (e->caller)),\n+\t\t     e->caller->symbol.order,\n+\t\t     xstrdup (cgraph_node_name (callee)), callee->symbol.order,\n \t\t     growth);\n \t  want_inline = false;\n \t}\n@@ -851,9 +854,9 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n     {\n       fprintf (dump_file, \"    Badness calculation for %s/%i -> %s/%i\\n\",\n \t       xstrdup (cgraph_node_name (edge->caller)),\n-\t       edge->caller->uid,\n+\t       edge->caller->symbol.order,\n \t       xstrdup (cgraph_node_name (callee)),\n-\t       edge->callee->uid);\n+\t       edge->callee->symbol.order);\n       fprintf (dump_file, \"      size growth %i, time %i \",\n \t       growth,\n \t       edge_time);\n@@ -1002,9 +1005,9 @@ update_edge_key (fibheap_t heap, struct cgraph_edge *edge)\n \t      fprintf (dump_file,\n \t\t       \"  decreasing badness %s/%i -> %s/%i, %i to %i\\n\",\n \t\t       xstrdup (cgraph_node_name (edge->caller)),\n-\t\t       edge->caller->uid,\n+\t\t       edge->caller->symbol.order,\n \t\t       xstrdup (cgraph_node_name (edge->callee)),\n-\t\t       edge->callee->uid,\n+\t\t       edge->callee->symbol.order,\n \t\t       (int)n->key,\n \t\t       badness);\n \t    }\n@@ -1019,9 +1022,9 @@ update_edge_key (fibheap_t heap, struct cgraph_edge *edge)\n \t   fprintf (dump_file,\n \t\t    \"  enqueuing call %s/%i -> %s/%i, badness %i\\n\",\n \t\t    xstrdup (cgraph_node_name (edge->caller)),\n-\t\t    edge->caller->uid,\n+\t\t    edge->caller->symbol.order,\n \t\t    xstrdup (cgraph_node_name (edge->callee)),\n-\t\t    edge->callee->uid,\n+\t\t    edge->callee->symbol.order,\n \t\t    badness);\n \t }\n       edge->aux = fibheap_insert (heap, badness, edge);\n@@ -1465,7 +1468,7 @@ inline_small_functions (void)\n       {\n \tif (dump_file)\n \t  fprintf (dump_file, \"Enqueueing calls of %s/%i.\\n\",\n-\t\t   cgraph_node_name (node), node->uid);\n+\t\t   cgraph_node_name (node), node->symbol.order);\n \n \tfor (edge = node->callers; edge; edge = edge->next_caller)\n \t  if (edge->inline_failed\n@@ -1524,14 +1527,14 @@ inline_small_functions (void)\n       if (dump_file)\n \t{\n \t  fprintf (dump_file,\n-\t\t   \"\\nConsidering %s with %i size\\n\",\n-\t\t   cgraph_node_name (callee),\n+\t\t   \"\\nConsidering %s/%i with %i size\\n\",\n+\t\t   cgraph_node_name (callee), callee->symbol.order,\n \t\t   inline_summary (callee)->size);\n \t  fprintf (dump_file,\n-\t\t   \" to be inlined into %s in %s:%i\\n\"\n+\t\t   \" to be inlined into %s/%i in %s:%i\\n\"\n \t\t   \" Estimated growth after inlined into all is %+i insns.\\n\"\n \t\t   \" Estimated badness is %i, frequency %.2f.\\n\",\n-\t\t   cgraph_node_name (edge->caller),\n+\t\t   cgraph_node_name (edge->caller), edge->caller->symbol.order,\n \t\t   flag_wpa ? \"unknown\"\n \t\t   : gimple_filename ((const_gimple) edge->call_stmt),\n \t\t   flag_wpa ? -1"}, {"sha": "9ae3d69b74bdac68aaa80d09ca30c9a8553dd9f9", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 37, "deletions": 22, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=9de04252a07c04a9676de3c8606b0a29e66a23ce", "patch": "@@ -265,34 +265,45 @@ void\n ipa_print_node_jump_functions (FILE *f, struct cgraph_node *node)\n {\n   struct cgraph_edge *cs;\n-  int i;\n \n-  fprintf (f, \"  Jump functions of caller  %s:\\n\", cgraph_node_name (node));\n+  fprintf (f, \"  Jump functions of caller  %s/%i:\\n\", cgraph_node_name (node),\n+\t   node->symbol.order);\n   for (cs = node->callees; cs; cs = cs->next_callee)\n     {\n       if (!ipa_edge_args_info_available_for_edge_p (cs))\n \tcontinue;\n \n       fprintf (f, \"    callsite  %s/%i -> %s/%i : \\n\",\n-\t       xstrdup (cgraph_node_name (node)), node->uid,\n-\t       xstrdup (cgraph_node_name (cs->callee)), cs->callee->uid);\n+\t       xstrdup (cgraph_node_name (node)), node->symbol.order,\n+\t       xstrdup (cgraph_node_name (cs->callee)),\n+\t       cs->callee->symbol.order);\n       ipa_print_node_jump_functions_for_edge (f, cs);\n     }\n \n-  for (cs = node->indirect_calls, i = 0; cs; cs = cs->next_callee, i++)\n+  for (cs = node->indirect_calls; cs; cs = cs->next_callee)\n     {\n+      struct cgraph_indirect_call_info *ii;\n       if (!ipa_edge_args_info_available_for_edge_p (cs))\n \tcontinue;\n \n+      ii = cs->indirect_info;\n+      if (ii->agg_contents)\n+\tfprintf (f, \"    indirect aggregate callsite, calling param %i, \"\n+\t\t \"offset \" HOST_WIDE_INT_PRINT_DEC \", %s\",\n+\t\t ii->param_index, ii->offset,\n+\t\t ii->by_ref ? \"by reference\" : \"by_value\");\n+      else\n+\tfprintf (f, \"    indirect %s callsite, calling param %i\",\n+\t\t ii->polymorphic ? \"polymorphic\" : \"simple\", ii->param_index);\n+\n       if (cs->call_stmt)\n \t{\n-\t  fprintf (f, \"    indirect callsite %d for stmt \", i);\n+\t  fprintf (f, \", for stmt \");\n \t  print_gimple_stmt (f, cs->call_stmt, 0, TDF_SLIM);\n \t}\n       else\n-\tfprintf (f, \"    indirect callsite %d :\\n\", i);\n+\tfprintf (f, \"\\n\");\n       ipa_print_node_jump_functions_for_edge (f, cs);\n-\n     }\n }\n \n@@ -2199,8 +2210,8 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target)\n \t{\n \t  if (dump_file)\n \t    fprintf (dump_file, \"ipa-prop: Discovered direct call to non-function\"\n-\t\t\t\t\" in (%s/%i).\\n\",\n-\t\t     cgraph_node_name (ie->caller), ie->caller->uid);\n+\t\t\t\t\" in %s/%i.\\n\",\n+\t\t     cgraph_node_name (ie->caller), ie->caller->symbol.order);\n \t  return NULL;\n \t}\n     }\n@@ -2221,8 +2232,10 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target)\n \t  if (dump_file)\n \t    fprintf (dump_file, \"ipa-prop: Discovered call to a known target \"\n \t\t     \"(%s/%i -> %s/%i) but can not refer to it. Giving up.\\n\",\n-\t\t     xstrdup (cgraph_node_name (ie->caller)), ie->caller->uid,\n-\t\t     xstrdup (cgraph_node_name (ie->callee)), ie->callee->uid);\n+\t\t     xstrdup (cgraph_node_name (ie->caller)),\n+\t\t     ie->caller->symbol.order,\n+\t\t     xstrdup (cgraph_node_name (ie->callee)),\n+\t\t     ie->callee->symbol.order);\n \t  return NULL;\n \t}\n       callee = cgraph_get_create_real_symbol_node (target);\n@@ -2244,8 +2257,10 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target)\n       fprintf (dump_file, \"ipa-prop: Discovered %s call to a known target \"\n \t       \"(%s/%i -> %s/%i), for stmt \",\n \t       ie->indirect_info->polymorphic ? \"a virtual\" : \"an indirect\",\n-\t       xstrdup (cgraph_node_name (ie->caller)), ie->caller->uid,\n-\t       xstrdup (cgraph_node_name (ie->callee)), ie->callee->uid);\n+\t       xstrdup (cgraph_node_name (ie->caller)),\n+\t       ie->caller->symbol.order,\n+\t       xstrdup (cgraph_node_name (ie->callee)),\n+\t       ie->callee->symbol.order);\n       if (ie->call_stmt)\n \tprint_gimple_stmt (dump_file, ie->call_stmt, 2, TDF_SLIM);\n       else\n@@ -2298,7 +2313,7 @@ remove_described_reference (symtab_node symbol, struct ipa_cst_ref_desc *rdesc)\n   if (dump_file)\n     fprintf (dump_file, \"ipa-prop: Removed a reference from %s/%i to %s.\\n\",\n \t     xstrdup (cgraph_node_name (origin->caller)),\n-\t     origin->caller->uid, xstrdup (symtab_node_name (symbol)));\n+\t     origin->caller->symbol.order, xstrdup (symtab_node_name (symbol)));\n }\n \n /* If JFUNC has a reference description with refcount different from\n@@ -2568,8 +2583,8 @@ propagate_controlled_uses (struct cgraph_edge *cs)\n \t\t    fprintf (dump_file, \"ipa-prop: Removing cloning-created \"\n \t\t\t     \"reference from %s/%i to %s/%i.\\n\",\n \t\t\t     xstrdup (cgraph_node_name (new_root)),\n-\t\t\t     new_root->uid,\n-\t\t\t     xstrdup (cgraph_node_name (n)), n->uid);\n+\t\t\t     new_root->symbol.order,\n+\t\t\t     xstrdup (cgraph_node_name (n)), n->symbol.order);\n \t\t  ipa_remove_reference (ref);\n \t\t}\n \t    }\n@@ -2608,9 +2623,9 @@ propagate_controlled_uses (struct cgraph_edge *cs)\n \t\t\t\t     \"cloning-created reference \"\n \t\t\t\t     \"from %s/%i to %s/%i.\\n\",\n \t\t\t\t     xstrdup (cgraph_node_name (clone)),\n-\t\t\t\t     clone->uid,\n+\t\t\t\t     clone->symbol.order,\n \t\t\t\t     xstrdup (cgraph_node_name (n)),\n-\t\t\t\t     n->uid);\n+\t\t\t\t     n->symbol.order);\n \t\t\t  ipa_remove_reference (ref);\n \t\t\t}\n \t\t      clone = clone->callers->caller;\n@@ -2957,8 +2972,8 @@ ipa_print_node_params (FILE *f, struct cgraph_node *node)\n   if (!node->analyzed)\n     return;\n   info = IPA_NODE_REF (node);\n-  fprintf (f, \"  function  %s parameter descriptors:\\n\",\n-\t   cgraph_node_name (node));\n+  fprintf (f, \"  function  %s/%i parameter descriptors:\\n\",\n+\t   cgraph_node_name (node), node->symbol.order);\n   count = ipa_get_param_count (info);\n   for (i = 0; i < count; i++)\n     {\n@@ -4200,7 +4215,7 @@ ipcp_transform_function (struct cgraph_node *node)\n \n   if (dump_file)\n     fprintf (dump_file, \"Modification phase of node %s/%i\\n\",\n-\t     cgraph_node_name (node), node->uid);\n+\t     cgraph_node_name (node), node->symbol.order);\n \n   aggval = ipa_get_agg_replacements_for_node (node);\n   if (!aggval)"}, {"sha": "0dd68380161b5ae873b6b95f6eeeff45ae080aad", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=9de04252a07c04a9676de3c8606b0a29e66a23ce", "patch": "@@ -1044,7 +1044,7 @@ pure_const_read_summary (void)\n \t\t  int flags = flags_from_decl_or_type (node->symbol.decl);\n \t\t  fprintf (dump_file, \"Read info for %s/%i \",\n \t\t\t   cgraph_node_name (node),\n-\t\t\t   node->uid);\n+\t\t\t   node->symbol.order);\n \t\t  if (flags & ECF_CONST)\n \t\t    fprintf (dump_file, \" const\");\n \t\t  if (flags & ECF_PURE)\n@@ -1143,7 +1143,7 @@ propagate_pure_const (void)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    fprintf (dump_file, \"  Visiting %s/%i state:%s looping %i\\n\",\n \t\t     cgraph_node_name (w),\n-\t\t     w->uid,\n+\t\t     w->symbol.order,\n \t\t     pure_const_names[w_l->pure_const_state],\n \t\t     w_l->looping);\n \n@@ -1190,7 +1190,7 @@ propagate_pure_const (void)\n \t\t  fprintf (dump_file,\n \t\t\t   \"    Call to %s/%i\",\n \t\t\t   cgraph_node_name (e->callee),\n-\t\t\t   e->callee->uid);\n+\t\t\t   e->callee->symbol.order);\n \t\t}\n \t      if (avail > AVAIL_OVERWRITABLE)\n \t\t{"}, {"sha": "cef67de60761556fe21e7d7e91c6355b95f7c433", "filename": "gcc/ipa-utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Fipa-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Fipa-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.c?ref=9de04252a07c04a9676de3c8606b0a29e66a23ce", "patch": "@@ -465,7 +465,7 @@ dump_cgraph_node_set (FILE *f, cgraph_node_set set)\n   for (iter = csi_start (set); !csi_end_p (iter); csi_next (&iter))\n     {\n       struct cgraph_node *node = csi_node (iter);\n-      fprintf (f, \" %s/%i\", cgraph_node_name (node), node->uid);\n+      fprintf (f, \" %s/%i\", cgraph_node_name (node), node->symbol.order);\n     }\n   fprintf (f, \"\\n\");\n }"}, {"sha": "34188cbf26f2af0578c6f0a784722efccd572d62", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=9de04252a07c04a9676de3c8606b0a29e66a23ce", "patch": "@@ -982,7 +982,7 @@ input_node (struct lto_file_decl_data *file_data,\n      functions, they are expected to be read more than once.  */\n   if (node->symbol.aux && !DECL_BUILT_IN (node->symbol.decl))\n     internal_error (\"bytecode stream: found multiple instances of cgraph \"\n-\t\t    \"node %d\", node->uid);\n+\t\t    \"node with uid %d\", node->uid);\n \n   bp = streamer_read_bitpack (ib);\n   input_overwrite_node (file_data, node, tag, &bp);"}, {"sha": "a004eea24fdcdac78d57c154fb37efa06acff56a", "filename": "gcc/lto-symtab.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-symtab.c?ref=9de04252a07c04a9676de3c8606b0a29e66a23ce", "patch": "@@ -46,9 +46,9 @@ lto_cgraph_replace_node (struct cgraph_node *node,\n     {\n       fprintf (cgraph_dump_file, \"Replacing cgraph node %s/%i by %s/%i\"\n  \t       \" for symbol %s\\n\",\n-\t       cgraph_node_name (node), node->uid,\n+\t       cgraph_node_name (node), node->symbol.order,\n \t       cgraph_node_name (prevailing_node),\n-\t       prevailing_node->uid,\n+\t       prevailing_node->symbol.order,\n \t       IDENTIFIER_POINTER ((*targetm.asm_out.mangle_assembler_name)\n \t\t (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (node->symbol.decl)))));\n     }"}, {"sha": "452b4468f4cfc24884c673ae0ce5cd26109ec81f", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=9de04252a07c04a9676de3c8606b0a29e66a23ce", "patch": "@@ -1,3 +1,8 @@\n+2013-05-15  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* lto-partition.c (lto_balanced_map): Print symbol order instead\n+\tof node uids.\n+\n 2013-05-15  Jan Hubicka  <jh@suse.cz>\n \n \tPR lto/57038"}, {"sha": "b5d324764acae9b667d724b3bb8a8253d3751f66", "filename": "gcc/lto/lto-partition.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Flto%2Flto-partition.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Flto%2Flto-partition.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-partition.c?ref=9de04252a07c04a9676de3c8606b0a29e66a23ce", "patch": "@@ -691,8 +691,10 @@ lto_balanced_map (void)\n \t  best_total_size = total_size;\n \t}\n       if (cgraph_dump_file)\n-\tfprintf (cgraph_dump_file, \"Step %i: added %s/%i, size %i, cost %i/%i best %i/%i, step %i\\n\", i,\n-\t\t cgraph_node_name (order[i]), order[i]->uid, partition->insns, cost, internal,\n+\tfprintf (cgraph_dump_file, \"Step %i: added %s/%i, size %i, cost %i/%i \"\n+\t\t \"best %i/%i, step %i\\n\", i,\n+\t\t cgraph_node_name (order[i]), order[i]->symbol.order,\n+\t\t partition->insns, cost, internal,\n \t\t best_cost, best_internal, best_i);\n       /* Partition is too large, unwind into step when best cost was reached and\n \t start new partition.  */"}, {"sha": "7745f73210bd84fd80253d3f24155b542b661e8d", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=9de04252a07c04a9676de3c8606b0a29e66a23ce", "patch": "@@ -3149,7 +3149,7 @@ dump_function_header (FILE *dump_file, tree fdecl, int flags)\n     fprintf (dump_file, \", decl_uid=%d\", DECL_UID (fdecl));\n   if (node)\n     {\n-      fprintf (dump_file, \", cgraph_uid=%d)%s\\n\\n\", node->uid,\n+      fprintf (dump_file, \", symbol_order=%d)%s\\n\\n\", node->symbol.order,\n                node->frequency == NODE_FREQUENCY_HOT\n                ? \" (hot)\"\n                : node->frequency == NODE_FREQUENCY_UNLIKELY_EXECUTED"}, {"sha": "c430c54bb7c3bdc3ea2cf378e9f41e75e46b7115", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de04252a07c04a9676de3c8606b0a29e66a23ce/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=9de04252a07c04a9676de3c8606b0a29e66a23ce", "patch": "@@ -4797,10 +4797,11 @@ convert_callers_for_node (struct cgraph_node *node,\n       push_cfun (DECL_STRUCT_FUNCTION (cs->caller->symbol.decl));\n \n       if (dump_file)\n-\tfprintf (dump_file, \"Adjusting call (%i -> %i) %s -> %s\\n\",\n-\t\t cs->caller->uid, cs->callee->uid,\n+\tfprintf (dump_file, \"Adjusting call %s/%i -> %s/%i\\n\",\n \t\t xstrdup (cgraph_node_name (cs->caller)),\n-\t\t xstrdup (cgraph_node_name (cs->callee)));\n+\t\t cs->caller->symbol.order,\n+\t\t xstrdup (cgraph_node_name (cs->callee)),\n+\t\t cs->callee->symbol.order);\n \n       ipa_modify_call_arguments (cs, cs->call_stmt, *adjustments);\n "}]}