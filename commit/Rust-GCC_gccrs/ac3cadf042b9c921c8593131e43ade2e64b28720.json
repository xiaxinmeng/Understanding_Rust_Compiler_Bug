{"sha": "ac3cadf042b9c921c8593131e43ade2e64b28720", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMzY2FkZjA0MmI5YzkyMWM4NTkzMTMxZTQzYWRlMmU2NGIyODcyMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-02-14T19:04:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-02-14T19:04:00Z"}, "message": "re PR libstdc++/13858 (Bad error handling in basic_filebuf::imbue)\n\n2004-02-14  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/13858\n\t* include/bits/fstream.tcc (basic_filebuf<>::_M_convert_to_external):\n\tIn case of conversion errors, throw ios_failure; simplify.\n\t* testsuite/27_io/basic_filebuf/overflow/char/13858.cc: New.\n\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/13858.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/overflow/char/9182-2.cc: Tweak,\n\tpreviously we didn't throw in case of conversion errors, instead\n\tjust returned eof().\n\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/3.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/seekpos/wchar_t/1.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/sync/char/9182-1.cc: Ditto.\n\n\t* include/bits/fstream.tcc (basic_filebuf<>::overflow):\n\tTrivial simplification of a conditional.\n\nFrom-SVN: r77812", "tree": {"sha": "2259512cabf62cb659095d909e64aebda3945303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2259512cabf62cb659095d909e64aebda3945303"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac3cadf042b9c921c8593131e43ade2e64b28720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac3cadf042b9c921c8593131e43ade2e64b28720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac3cadf042b9c921c8593131e43ade2e64b28720", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac3cadf042b9c921c8593131e43ade2e64b28720/comments", "author": null, "committer": null, "parents": [{"sha": "d4afac5bbd0dc69a47c800b0ad4ba3e469c48963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4afac5bbd0dc69a47c800b0ad4ba3e469c48963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4afac5bbd0dc69a47c800b0ad4ba3e469c48963"}], "stats": {"total": 258, "additions": 214, "deletions": 44}, "files": [{"sha": "08b5642190b53236c89e75656ed7ded90389e635", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3cadf042b9c921c8593131e43ade2e64b28720/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3cadf042b9c921c8593131e43ade2e64b28720/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ac3cadf042b9c921c8593131e43ade2e64b28720", "patch": "@@ -1,3 +1,20 @@\n+2004-02-14  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/13858\n+\t* include/bits/fstream.tcc (basic_filebuf<>::_M_convert_to_external):\n+\tIn case of conversion errors, throw ios_failure; simplify.\n+\t* testsuite/27_io/basic_filebuf/overflow/char/13858.cc: New.\n+\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/13858.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/overflow/char/9182-2.cc: Tweak,\n+\tpreviously we didn't throw in case of conversion errors, instead\n+\tjust returned eof().\n+\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/3.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/seekpos/wchar_t/1.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/sync/char/9182-1.cc: Ditto.\n+\n+\t* include/bits/fstream.tcc (basic_filebuf<>::overflow):\n+\tTrivial simplification of a conditional.\n+\n 2004-02-12  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/13731 (final part: writev)"}, {"sha": "19530e75c49a918e610b8cf2a3d1af3c1af60eaa", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3cadf042b9c921c8593131e43ade2e64b28720/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3cadf042b9c921c8593131e43ade2e64b28720/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=ac3cadf042b9c921c8593131e43ade2e64b28720", "patch": "@@ -397,7 +397,7 @@ namespace std\n \t      // and output.\n \t      if (_M_convert_to_external(this->pbase(),\n \t\t\t\t\t this->pptr() - this->pbase())\n-\t\t  && (!__testeof || (__testeof && !_M_file.sync())))\n+\t\t  && (!__testeof || !_M_file.sync()))\n \t\t{\n \t\t  _M_set_buffer(0);\n \t\t  __ret = traits_type::not_eof(__c);\n@@ -437,12 +437,12 @@ namespace std\n     _M_convert_to_external(_CharT* __ibuf, streamsize __ilen)\n     {\n       // Sizes of external and pending output.\n-      streamsize __elen = 0;\n-      streamsize __plen = 0;\n+      streamsize __elen;\n+      streamsize __plen;\n       if (__check_facet(_M_codecvt).always_noconv())\n \t{\n-\t  __elen += _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);\n-\t  __plen += __ilen;\n+\t  __elen = _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);\n+\t  __plen = __ilen;\n \t}\n       else\n \t{\n@@ -466,19 +466,14 @@ namespace std\n \t      __blen = __ilen;\n \t    }\n \t  else\n-\t    {\n-\t      // Result == error.\n-\t      __blen = 0;\n-\t    }\n-\n-\t  if (__blen)\n-\t    {\n-\t      __elen += _M_file.xsputn(__buf, __blen);\n-\t      __plen += __blen;\n-\t    }\n+\t    __throw_ios_failure(__N(\"basic_filebuf::_M_convert_to_external \"\n+\t\t\t\t    \"conversion error\"));\n+  \n+\t  __elen = _M_file.xsputn(__buf, __blen);\n+\t  __plen = __blen;\n \n \t  // Try once more for partial conversions.\n-\t  if (__r == codecvt_base::partial)\n+\t  if (__r == codecvt_base::partial && __elen == __plen)\n \t    {\n \t      const char_type* __iresume = __iend;\n \t      streamsize __rlen = this->pptr() - __iend;\n@@ -488,12 +483,15 @@ namespace std\n \t      if (__r != codecvt_base::error)\n \t\t{\n \t\t  __rlen = __bend - __buf;\n-\t\t  __elen += _M_file.xsputn(__buf, __rlen);\n-\t\t  __plen += __rlen;\n+\t\t  __elen = _M_file.xsputn(__buf, __rlen);\n+\t\t  __plen = __rlen;\n \t\t}\n+\t      else\n+\t\t__throw_ios_failure(__N(\"basic_filebuf::_M_convert_to_external \"\n+\t\t\t\t\t\"conversion error\"));\n \t    }\n \t}\n-      return __elen && __elen == __plen;\n+      return __elen == __plen;\n     }\n \n    template<typename _CharT, typename _Traits>"}, {"sha": "1abd6a813227cf5797242054cc4c7845024cd00e", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/char/13858.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3cadf042b9c921c8593131e43ade2e64b28720/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F13858.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3cadf042b9c921c8593131e43ade2e64b28720/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F13858.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F13858.cc?ref=ac3cadf042b9c921c8593131e43ade2e64b28720", "patch": "@@ -0,0 +1,70 @@\n+// 2004-02-14  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+\n+class Cvt : public std::codecvt<char, char, std::mbstate_t>\n+{\n+protected:\n+  virtual std::codecvt_base::result\n+  do_out(std::mbstate_t&, const char* from, const char*,\n+\t const char*& from_next, char* to, char*, char*& to_next) const\n+  {\n+    from_next = from;\n+    to_next = to;\n+    return std::codecvt_base::error;\n+  }\n+\n+  virtual bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+};\n+\n+// libstdc++/13858\n+void test01()\n+{\n+  using namespace std;\n+  \n+  filebuf fb;\n+  fb.pubimbue(locale(locale::classic(), new Cvt));\n+  fb.open(\"tmp_13858_char\", ios_base::out);\n+  \n+  try\n+    {\n+      fb.sputc('a');\n+      fb.sputc('b');\n+      fb.pubimbue(locale::classic());\n+      fb.sputc('c');\n+      fb.pubsync();\n+      fb.close();\n+    }\n+  catch (exception&)\n+    {\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "862d0fd36079f453a6ff4b3e78d320f59ded49c0", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/char/9182-2.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3cadf042b9c921c8593131e43ade2e64b28720/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F9182-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3cadf042b9c921c8593131e43ade2e64b28720/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F9182-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F9182-2.cc?ref=ac3cadf042b9c921c8593131e43ade2e64b28720", "patch": "@@ -1,6 +1,6 @@\n // 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,7 +22,6 @@\n \n #include <fstream>\n #include <locale>\n-#include <testsuite_hooks.h>\n \n const char name_07[] = \"filebuf_virtuals-7.txt\"; // empty file, need to create\n \n@@ -51,7 +50,6 @@ class errorcvt : public std::codecvt<char, char, mbstate_t>\n void test14()\n {\n   using namespace std;\n-  bool test __attribute__((unused)) = true;\n   \n   locale loc =  locale::classic();\n   loc = locale(loc, new errorcvt);\n@@ -60,9 +58,15 @@ void test14()\n   fbuf1.pubimbue(loc);\n   fbuf1.pubsetbuf(0, 0);\n   fbuf1.open(name_07, ios_base::out | ios_base::trunc);\n-  streamsize n = fbuf1.sputn(\"onne\", 4);\n-  VERIFY( n == 0 );\n-  fbuf1.close();\n+\n+  try\n+    {\n+      fbuf1.sputn(\"onne\", 4);\n+      fbuf1.close();\n+    }\n+  catch (exception&)\n+    {\n+    }\n }\n \n int main() "}, {"sha": "57dd0aa30d4813e754bddfd440d0d7f6b251a7a3", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/wchar_t/13858.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3cadf042b9c921c8593131e43ade2e64b28720/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F13858.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3cadf042b9c921c8593131e43ade2e64b28720/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F13858.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F13858.cc?ref=ac3cadf042b9c921c8593131e43ade2e64b28720", "patch": "@@ -0,0 +1,71 @@\n+// 2004-02-14  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+\n+class Cvt : public std::codecvt<wchar_t, char, std::mbstate_t>\n+{\n+protected:\n+  virtual std::codecvt_base::result\n+  do_out(std::mbstate_t&, const wchar_t* from, const wchar_t*,\n+\t const wchar_t*& from_next, char* to, char*,\n+\t char*& to_next) const\n+  {\n+    from_next = from;\n+    to_next = to;\n+    return std::codecvt_base::error;\n+  }\n+  \n+  virtual bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+};\n+\n+// libstdc++/13858\n+void test01()\n+{\n+  using namespace std;\n+  \n+  wfilebuf fb;\n+  fb.pubimbue(locale(locale::classic(), new Cvt));\n+  fb.open(\"tmp_13858_wchar_t\", ios_base::out);\n+  \n+  try\n+    {\n+      fb.sputc(L'a');\n+      fb.sputc(L'b');\n+      fb.pubimbue(locale::classic());\n+      fb.sputc(L'c');\n+      fb.pubsync();\n+      fb.close();\n+    }\n+  catch (exception&)\n+    {\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "03e46d1b588f94fb683ffb2c3f0be260c248c70e", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/wchar_t/3.cc", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3cadf042b9c921c8593131e43ade2e64b28720/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3cadf042b9c921c8593131e43ade2e64b28720/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F3.cc?ref=ac3cadf042b9c921c8593131e43ade2e64b28720", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,24 +19,27 @@\n // 27.8.1.4 Overridden virtual functions\n \n #include <fstream>\n-#include <testsuite_hooks.h>\n \n void test03()\n {\n   using namespace std;\n \n-  bool test __attribute__((unused)) = true;\n   const char* name = \"tmp_seekoff_3\";\n \n   wfilebuf fb;\n \n   fb.open(name, ios_base::out);\n   fb.sputc(0xf001);\n \n-  // seekoff should flush the output sequence, which will fail\n-  // if the output buffer contains illegal characters.\n-  streampos ret = fb.pubseekoff(0, ios_base::cur);\n-  VERIFY( ret == streampos(streamoff(-1)) );\n+  try\n+    {\n+      // seekoff should flush the output sequence, which will fail\n+      // if the output buffer contains illegal characters.\n+      fb.pubseekoff(0, ios_base::cur);\n+    }\n+  catch (exception&)\n+    {\n+    }\n }\n \n int main()"}, {"sha": "bb0f4f2d65084b680fb325540dc3c1d36130aea3", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/wchar_t/1.cc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3cadf042b9c921c8593131e43ade2e64b28720/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3cadf042b9c921c8593131e43ade2e64b28720/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F1.cc?ref=ac3cadf042b9c921c8593131e43ade2e64b28720", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,13 +20,11 @@\n \n #include <locale>\n #include <fstream>\n-#include <testsuite_hooks.h>\n \n void test01()\n {\n   using namespace std;\n \n-  bool test __attribute__((unused)) = true;\n   const char* name = \"tmp_seekpos_1\";\n \n   wfilebuf fb;\n@@ -35,8 +33,13 @@ void test01()\n   streampos pos = fb.pubseekoff(0, ios_base::beg);\n   fb.sputc(0xf001);\n \n-  streampos ret = fb.pubseekpos(pos);\n-  VERIFY( ret == streampos(streamoff(-1)) );\n+  try\n+    {\n+      fb.pubseekpos(pos);\n+    }\n+  catch (exception&)\n+    {\n+    }\n }\n \n int main()"}, {"sha": "e04c9b282c1b715c6aa18415227bd4fc9b4685da", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sync/char/9182-1.cc", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3cadf042b9c921c8593131e43ade2e64b28720/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fchar%2F9182-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3cadf042b9c921c8593131e43ade2e64b28720/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fchar%2F9182-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fchar%2F9182-1.cc?ref=ac3cadf042b9c921c8593131e43ade2e64b28720", "patch": "@@ -1,6 +1,6 @@\n // 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,7 +22,6 @@\n \n #include <fstream>\n #include <locale>\n-#include <testsuite_hooks.h>\n \n const char name_07[] = \"filebuf_virtuals-7.txt\"; // empty file, need to create\n \n@@ -51,18 +50,23 @@ class errorcvt : public std::codecvt<char, char, mbstate_t>\n void test13()\n {\n   using namespace std;\n-  bool test __attribute__((unused)) = true;\n \n   locale loc =  locale::classic();\n   loc = locale(loc, new errorcvt);\n   \n   filebuf fbuf1;\n   fbuf1.pubimbue(loc);\n   fbuf1.open(name_07, ios_base::out | ios_base::trunc);\n-  fbuf1.sputn(\"ison\", 4); \n-  int r = fbuf1.pubsync();\n-  VERIFY( r == -1 );\n-  fbuf1.close();\n+\n+  try\n+    {  \n+      fbuf1.sputn(\"ison\", 4); \n+      fbuf1.pubsync();\n+      fbuf1.close();\n+    }\n+  catch (exception&)\n+    {\n+    }\n }\n \n int main() "}]}