{"sha": "d6fa2d17d4560030ede09dbb29424d2c21722790", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZmYTJkMTdkNDU2MDAzMGVkZTA5ZGJiMjk0MjRkMmMyMTcyMjc5MA==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2010-08-10T23:26:05Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2010-08-10T23:26:05Z"}, "message": "Improve address offset range computation\n\nFrom-SVN: r163081", "tree": {"sha": "f65ecb062463d44aa9700ed071e79721b5d3a2ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f65ecb062463d44aa9700ed071e79721b5d3a2ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6fa2d17d4560030ede09dbb29424d2c21722790", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6fa2d17d4560030ede09dbb29424d2c21722790", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6fa2d17d4560030ede09dbb29424d2c21722790", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6fa2d17d4560030ede09dbb29424d2c21722790/comments", "author": null, "committer": null, "parents": [{"sha": "9995f209120e33ba64ed75e753bf309c8f10bee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9995f209120e33ba64ed75e753bf309c8f10bee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9995f209120e33ba64ed75e753bf309c8f10bee9"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "5773fc3c7f93e1341c06110f7dee30791160f913", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6fa2d17d4560030ede09dbb29424d2c21722790/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6fa2d17d4560030ede09dbb29424d2c21722790/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6fa2d17d4560030ede09dbb29424d2c21722790", "patch": "@@ -1,3 +1,8 @@\n+2010-08-10  Xinliang David Li  <davidxl@google.com>\n+\n+\t* tree-ssa-loop-ivopts.c (get_address_cost): Properly\n+\tcompute max/min offset in address.\n+\n 2010-08-10  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* ira-live.c: Include sbitmap.h."}, {"sha": "38f0ee015e3aefd3783f3c54f07120bb194de994", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6fa2d17d4560030ede09dbb29424d2c21722790/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6fa2d17d4560030ede09dbb29424d2c21722790/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6fa2d17d4560030ede09dbb29424d2c21722790", "patch": "@@ -1,3 +1,7 @@\n+2010-08-10  xinliang David Li  <davidxl@google.com>\n+\t* gcc.dg/tree-ssa/loop-19.c: Add option\n+\t-fno-prefetch-loop-array\n+\n 2010-08-10  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR middle-end/45182"}, {"sha": "4dfd2277dbc5145cce463b5488aec9adde8edcf0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6fa2d17d4560030ede09dbb29424d2c21722790/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6fa2d17d4560030ede09dbb29424d2c21722790/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-19.c?ref=d6fa2d17d4560030ede09dbb29424d2c21722790", "patch": "@@ -6,7 +6,7 @@\n \n /* { dg-do compile { target { i?86-*-* || { x86_64-*-* || powerpc_hard_double } } } } */\n /* { dg-require-effective-target nonpic } */\n-/* { dg-options \"-O3 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O3 -fno-prefetch-loop-arrays -fdump-tree-optimized\" } */\n \n # define N      2000000\n static double   a[N],c[N];"}, {"sha": "c940d413de8c254a0be1a96848646adb10b011a7", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6fa2d17d4560030ede09dbb29424d2c21722790/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6fa2d17d4560030ede09dbb29424d2c21722790/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=d6fa2d17d4560030ede09dbb29424d2c21722790", "patch": "@@ -3241,9 +3241,8 @@ get_address_cost (bool symbol_present, bool var_present,\n   if (!data)\n     {\n       HOST_WIDE_INT i;\n-      HOST_WIDE_INT start = BIGGEST_ALIGNMENT / BITS_PER_UNIT;\n-      HOST_WIDE_INT rat, off;\n-      int old_cse_not_expected;\n+      HOST_WIDE_INT rat, off = 0;\n+      int old_cse_not_expected, width;\n       unsigned sym_p, var_p, off_p, rat_p, add_c;\n       rtx seq, addr, base;\n       rtx reg0, reg1;\n@@ -3252,33 +3251,40 @@ get_address_cost (bool symbol_present, bool var_present,\n \n       reg1 = gen_raw_REG (address_mode, LAST_VIRTUAL_REGISTER + 1);\n \n+      width = GET_MODE_BITSIZE (address_mode) - 1;\n+      if (width > (HOST_BITS_PER_WIDE_INT - 1))\n+\twidth = HOST_BITS_PER_WIDE_INT - 1;\n       addr = gen_rtx_fmt_ee (PLUS, address_mode, reg1, NULL_RTX);\n-      for (i = start; i <= 1 << 20; i <<= 1)\n+\n+      for (i = width; i >= 0; i--)\n \t{\n-\t  XEXP (addr, 1) = gen_int_mode (i, address_mode);\n-\t  if (!memory_address_addr_space_p (mem_mode, addr, as))\n+\t  off = -((HOST_WIDE_INT) 1 << i);\n+\t  XEXP (addr, 1) = gen_int_mode (off, address_mode);\n+\t  if (memory_address_addr_space_p (mem_mode, addr, as))\n \t    break;\n \t}\n-      data->max_offset = i == start ? 0 : i >> 1;\n-      off = data->max_offset;\n+      data->min_offset = (i == -1? 0 : off);\n \n-      for (i = start; i <= 1 << 20; i <<= 1)\n+      for (i = width; i >= 0; i--)\n \t{\n-\t  XEXP (addr, 1) = gen_int_mode (-i, address_mode);\n-\t  if (!memory_address_addr_space_p (mem_mode, addr, as))\n+\t  off = ((HOST_WIDE_INT) 1 << i) - 1;\n+\t  XEXP (addr, 1) = gen_int_mode (off, address_mode);\n+\t  if (memory_address_addr_space_p (mem_mode, addr, as))\n \t    break;\n \t}\n-      data->min_offset = i == start ? 0 : -(i >> 1);\n+      if (i == -1)\n+        off = 0;\n+      data->max_offset = off;\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"get_address_cost:\\n\");\n-\t  fprintf (dump_file, \"  min offset %s %d\\n\",\n+\t  fprintf (dump_file, \"  min offset %s \" HOST_WIDE_INT_PRINT_DEC \"\\n\",\n \t\t   GET_MODE_NAME (mem_mode),\n-\t\t   (int) data->min_offset);\n-\t  fprintf (dump_file, \"  max offset %s %d\\n\",\n+\t\t   data->min_offset);\n+\t  fprintf (dump_file, \"  max offset %s \" HOST_WIDE_INT_PRINT_DEC \"\\n\",\n \t\t   GET_MODE_NAME (mem_mode),\n-\t\t   (int) data->max_offset);\n+\t\t   data->max_offset);\n \t}\n \n       rat = 1;"}]}