{"sha": "429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI5ZDYwN2JjNDY4ODI4ZWExZTQwODUyYmJmOGExZTliYmMzNGU3YQ==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-18T18:35:17Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-18T18:35:17Z"}, "message": "[ARM][GCC][4/5x]: MVE load intrinsics with zero(_z) suffix.\n\nThis patch supports the following MVE ACLE load intrinsics with zero(_z) suffix.\n* ``_z`` (zero) which indicates false-predicated lanes are filled with zeroes, these are only used for load instructions.\n\nvldrbq_gather_offset_z_s16, vldrbq_gather_offset_z_u8, vldrbq_gather_offset_z_s32, vldrbq_gather_offset_z_u16, vldrbq_gather_offset_z_u32, vldrbq_gather_offset_z_s8, vldrbq_z_s16, vldrbq_z_u8, vldrbq_z_s8, vldrbq_z_s32, vldrbq_z_u16, vldrbq_z_u32, vldrwq_gather_base_z_u32, vldrwq_gather_base_z_s32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1]  https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm-builtins.c (LDRGBS_Z_QUALIFIERS): Define builtin\n\tqualifier.\n\t(LDRGBU_Z_QUALIFIERS): Likewise.\n\t(LDRGS_Z_QUALIFIERS): Likewise.\n\t(LDRGU_Z_QUALIFIERS): Likewise.\n\t(LDRS_Z_QUALIFIERS): Likewise.\n\t(LDRU_Z_QUALIFIERS): Likewise.\n\t* config/arm/arm_mve.h (vldrbq_gather_offset_z_s16): Define macro.\n\t(vldrbq_gather_offset_z_u8): Likewise.\n\t(vldrbq_gather_offset_z_s32): Likewise.\n\t(vldrbq_gather_offset_z_u16): Likewise.\n\t(vldrbq_gather_offset_z_u32): Likewise.\n\t(vldrbq_gather_offset_z_s8): Likewise.\n\t(vldrbq_z_s16): Likewise.\n\t(vldrbq_z_u8): Likewise.\n\t(vldrbq_z_s8): Likewise.\n\t(vldrbq_z_s32): Likewise.\n\t(vldrbq_z_u16): Likewise.\n\t(vldrbq_z_u32): Likewise.\n\t(vldrwq_gather_base_z_u32): Likewise.\n\t(vldrwq_gather_base_z_s32): Likewise.\n\t(__arm_vldrbq_gather_offset_z_s8): Define intrinsic.\n\t(__arm_vldrbq_gather_offset_z_s32): Likewise.\n\t(__arm_vldrbq_gather_offset_z_s16): Likewise.\n\t(__arm_vldrbq_gather_offset_z_u8): Likewise.\n\t(__arm_vldrbq_gather_offset_z_u32): Likewise.\n\t(__arm_vldrbq_gather_offset_z_u16): Likewise.\n\t(__arm_vldrbq_z_s8): Likewise.\n\t(__arm_vldrbq_z_s32): Likewise.\n\t(__arm_vldrbq_z_s16): Likewise.\n\t(__arm_vldrbq_z_u8): Likewise.\n\t(__arm_vldrbq_z_u32): Likewise.\n\t(__arm_vldrbq_z_u16): Likewise.\n\t(__arm_vldrwq_gather_base_z_s32): Likewise.\n\t(__arm_vldrwq_gather_base_z_u32): Likewise.\n\t(vldrbq_gather_offset_z): Define polymorphic variant.\n\t* config/arm/arm_mve_builtins.def (LDRGBS_Z_QUALIFIERS): Use builtin\n\tqualifier.\n\t(LDRGBU_Z_QUALIFIERS): Likewise.\n\t(LDRGS_Z_QUALIFIERS): Likewise.\n\t(LDRGU_Z_QUALIFIERS): Likewise.\n\t(LDRS_Z_QUALIFIERS): Likewise.\n\t(LDRU_Z_QUALIFIERS): Likewise.\n\t* config/arm/mve.md (mve_vldrbq_gather_offset_z_<supf><mode>): Define\n\tRTL pattern.\n\t(mve_vldrbq_z_<supf><mode>): Likewise.\n\t(mve_vldrwq_gather_base_z_<supf>v4si): Likewise.\n\ngcc/testsuite/ChangeLog: Likewise.\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_s16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_z_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_z_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_z_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_z_u32.c: Likewise.", "tree": {"sha": "c7ffce1df54b08dc3d57c498a09bada70d09945c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7ffce1df54b08dc3d57c498a09bada70d09945c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "405e918c31418b00b4939efefc333cd378cabf43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405e918c31418b00b4939efefc333cd378cabf43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/405e918c31418b00b4939efefc333cd378cabf43"}], "stats": {"total": 539, "additions": 537, "deletions": 2}, "files": [{"sha": "4d4f9b1ec639267494fa6f3bc3eaadde46299df3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -1,3 +1,55 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm-builtins.c (LDRGBS_Z_QUALIFIERS): Define builtin\n+\tqualifier.\n+\t(LDRGBU_Z_QUALIFIERS): Likewise.\n+\t(LDRGS_Z_QUALIFIERS): Likewise.\n+\t(LDRGU_Z_QUALIFIERS): Likewise.\n+\t(LDRS_Z_QUALIFIERS): Likewise.\n+\t(LDRU_Z_QUALIFIERS): Likewise.\n+\t* config/arm/arm_mve.h (vldrbq_gather_offset_z_s16): Define macro.\n+\t(vldrbq_gather_offset_z_u8): Likewise.\n+\t(vldrbq_gather_offset_z_s32): Likewise.\n+\t(vldrbq_gather_offset_z_u16): Likewise.\n+\t(vldrbq_gather_offset_z_u32): Likewise.\n+\t(vldrbq_gather_offset_z_s8): Likewise.\n+\t(vldrbq_z_s16): Likewise.\n+\t(vldrbq_z_u8): Likewise.\n+\t(vldrbq_z_s8): Likewise.\n+\t(vldrbq_z_s32): Likewise.\n+\t(vldrbq_z_u16): Likewise.\n+\t(vldrbq_z_u32): Likewise.\n+\t(vldrwq_gather_base_z_u32): Likewise.\n+\t(vldrwq_gather_base_z_s32): Likewise.\n+\t(__arm_vldrbq_gather_offset_z_s8): Define intrinsic.\n+\t(__arm_vldrbq_gather_offset_z_s32): Likewise.\n+\t(__arm_vldrbq_gather_offset_z_s16): Likewise.\n+\t(__arm_vldrbq_gather_offset_z_u8): Likewise.\n+\t(__arm_vldrbq_gather_offset_z_u32): Likewise.\n+\t(__arm_vldrbq_gather_offset_z_u16): Likewise.\n+\t(__arm_vldrbq_z_s8): Likewise.\n+\t(__arm_vldrbq_z_s32): Likewise.\n+\t(__arm_vldrbq_z_s16): Likewise.\n+\t(__arm_vldrbq_z_u8): Likewise.\n+\t(__arm_vldrbq_z_u32): Likewise.\n+\t(__arm_vldrbq_z_u16): Likewise.\n+\t(__arm_vldrwq_gather_base_z_s32): Likewise.\n+\t(__arm_vldrwq_gather_base_z_u32): Likewise.\n+\t(vldrbq_gather_offset_z): Define polymorphic variant.\n+\t* config/arm/arm_mve_builtins.def (LDRGBS_Z_QUALIFIERS): Use builtin\n+\tqualifier.\n+\t(LDRGBU_Z_QUALIFIERS): Likewise.\n+\t(LDRGS_Z_QUALIFIERS): Likewise.\n+\t(LDRGU_Z_QUALIFIERS): Likewise.\n+\t(LDRS_Z_QUALIFIERS): Likewise.\n+\t(LDRU_Z_QUALIFIERS): Likewise.\n+\t* config/arm/mve.md (mve_vldrbq_gather_offset_z_<supf><mode>): Define\n+\tRTL pattern.\n+\t(mve_vldrbq_z_<supf><mode>): Likewise.\n+\t(mve_vldrwq_gather_base_z_<supf>v4si): Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "c3deb9efc8849019141b6430543e93605fda4af4", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -677,6 +677,40 @@ arm_ldrgbu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_unsigned, qualifier_immediate};\n #define LDRGBU_QUALIFIERS (arm_ldrgbu_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_ldrgbs_z_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_unsigned, qualifier_immediate,\n+      qualifier_unsigned};\n+#define LDRGBS_Z_QUALIFIERS (arm_ldrgbs_z_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ldrgbu_z_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_immediate,\n+      qualifier_unsigned};\n+#define LDRGBU_Z_QUALIFIERS (arm_ldrgbu_z_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ldrgs_z_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_pointer, qualifier_unsigned,\n+      qualifier_unsigned};\n+#define LDRGS_Z_QUALIFIERS (arm_ldrgs_z_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ldrgu_z_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_pointer, qualifier_unsigned,\n+      qualifier_unsigned};\n+#define LDRGU_Z_QUALIFIERS (arm_ldrgu_z_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ldrs_z_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_pointer, qualifier_unsigned};\n+#define LDRS_Z_QUALIFIERS (arm_ldrs_z_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ldru_z_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_pointer, qualifier_unsigned};\n+#define LDRU_Z_QUALIFIERS (arm_ldru_z_qualifiers)\n+\n /* End of Qualifier for MVE builtins.  */\n \n    /* void ([T element type] *, T, immediate).  */"}, {"sha": "4570a0b16c37b11471a61f4b53686945063b4a55", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 116, "deletions": 2, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -1744,6 +1744,20 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vstrbq_scatter_offset_p_u16( __base, __offset, __value, __p) __arm_vstrbq_scatter_offset_p_u16( __base, __offset, __value, __p)\n #define vstrwq_scatter_base_p_s32(__addr,  __offset, __value, __p) __arm_vstrwq_scatter_base_p_s32(__addr,  __offset, __value, __p)\n #define vstrwq_scatter_base_p_u32(__addr,  __offset, __value, __p) __arm_vstrwq_scatter_base_p_u32(__addr,  __offset, __value, __p)\n+#define vldrbq_gather_offset_z_s16(__base, __offset, __p) __arm_vldrbq_gather_offset_z_s16(__base, __offset, __p)\n+#define vldrbq_gather_offset_z_u8(__base, __offset, __p) __arm_vldrbq_gather_offset_z_u8(__base, __offset, __p)\n+#define vldrbq_gather_offset_z_s32(__base, __offset, __p) __arm_vldrbq_gather_offset_z_s32(__base, __offset, __p)\n+#define vldrbq_gather_offset_z_u16(__base, __offset, __p) __arm_vldrbq_gather_offset_z_u16(__base, __offset, __p)\n+#define vldrbq_gather_offset_z_u32(__base, __offset, __p) __arm_vldrbq_gather_offset_z_u32(__base, __offset, __p)\n+#define vldrbq_gather_offset_z_s8(__base, __offset, __p) __arm_vldrbq_gather_offset_z_s8(__base, __offset, __p)\n+#define vldrbq_z_s16(__base, __p) __arm_vldrbq_z_s16(__base, __p)\n+#define vldrbq_z_u8(__base, __p) __arm_vldrbq_z_u8(__base, __p)\n+#define vldrbq_z_s8(__base, __p) __arm_vldrbq_z_s8(__base, __p)\n+#define vldrbq_z_s32(__base, __p) __arm_vldrbq_z_s32(__base, __p)\n+#define vldrbq_z_u16(__base, __p) __arm_vldrbq_z_u16(__base, __p)\n+#define vldrbq_z_u32(__base, __p) __arm_vldrbq_z_u32(__base, __p)\n+#define vldrwq_gather_base_z_u32(__addr,  __offset, __p) __arm_vldrwq_gather_base_z_u32(__addr,  __offset, __p)\n+#define vldrwq_gather_base_z_s32(__addr,  __offset, __p) __arm_vldrwq_gather_base_z_s32(__addr,  __offset, __p)\n #endif\n \n __extension__ extern __inline void\n@@ -11330,6 +11344,105 @@ __arm_vstrwq_scatter_base_p_u32 (uint32x4_t __addr, const int __offset, uint32x4\n {\n   __builtin_mve_vstrwq_scatter_base_p_uv4si (__addr, __offset, __value, __p);\n }\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_gather_offset_z_s8 (int8_t const * __base, uint8x16_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrbq_gather_offset_z_sv16qi ((__builtin_neon_qi *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_gather_offset_z_s32 (int8_t const * __base, uint32x4_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrbq_gather_offset_z_sv4si ((__builtin_neon_qi *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_gather_offset_z_s16 (int8_t const * __base, uint16x8_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrbq_gather_offset_z_sv8hi ((__builtin_neon_qi *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_gather_offset_z_u8 (uint8_t const * __base, uint8x16_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrbq_gather_offset_z_uv16qi ((__builtin_neon_qi *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_gather_offset_z_u32 (uint8_t const * __base, uint32x4_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrbq_gather_offset_z_uv4si ((__builtin_neon_qi *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_gather_offset_z_u16 (uint8_t const * __base, uint16x8_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrbq_gather_offset_z_uv8hi ((__builtin_neon_qi *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_z_s8 (int8_t const * __base, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrbq_z_sv16qi ((__builtin_neon_qi *) __base, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_z_s32 (int8_t const * __base, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrbq_z_sv4si ((__builtin_neon_qi *) __base, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_z_s16 (int8_t const * __base, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrbq_z_sv8hi ((__builtin_neon_qi *) __base, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_z_u8 (uint8_t const * __base, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrbq_z_uv16qi ((__builtin_neon_qi *) __base, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_z_u32 (uint8_t const * __base, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrbq_z_uv4si ((__builtin_neon_qi *) __base, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_z_u16 (uint8_t const * __base, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrbq_z_uv8hi ((__builtin_neon_qi *) __base, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_base_z_s32 (uint32x4_t __addr, const int __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrwq_gather_base_z_sv4si (__addr, __offset, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_base_z_u32 (uint32x4_t __addr, const int __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrwq_gather_base_z_uv4si (__addr, __offset, __p);\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -13471,6 +13584,7 @@ __arm_vsubq_m_n_f16 (float16x8_t __inactive, float16x8_t __a, float16_t __b, mve\n {\n   return __builtin_mve_vsubq_m_n_fv8hf (__inactive, __a, __b, __p);\n }\n+\n #endif\n \n enum {\n@@ -18034,6 +18148,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_base_p_s32 (p0, p1, __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n   int (*)[__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_base_p_u32 (p0, p1, __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n \n+#endif /* MVE Integer.  */\n+\n #define vldrbq_gather_offset_z(p0,p1,p2) __arm_vldrbq_gather_offset_z(p0,p1,p2)\n #define __arm_vldrbq_gather_offset_z(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -18045,8 +18161,6 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint8_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrbq_gather_offset_z_u16 (__ARM_mve_coerce(__p0, uint8_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n   int (*)[__ARM_mve_type_uint8_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrbq_gather_offset_z_u32 (__ARM_mve_coerce(__p0, uint8_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n \n-#endif /* MVE Integer.  */\n-\n #define vqrdmlahq_m(p0,p1,p2,p3) __arm_vqrdmlahq_m(p0,p1,p2,p3)\n #define __arm_vqrdmlahq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\"}, {"sha": "0f466e4cec295c1d791d675b52ff15e364d7016e", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -703,3 +703,9 @@ VAR3 (STRSS_P, vstrbq_scatter_offset_p_s, v16qi, v8hi, v4si)\n VAR3 (STRSU_P, vstrbq_scatter_offset_p_u, v16qi, v8hi, v4si)\n VAR1 (STRSBS_P, vstrwq_scatter_base_p_s, v4si)\n VAR1 (STRSBU_P, vstrwq_scatter_base_p_u, v4si)\n+VAR1 (LDRGBS_Z, vldrwq_gather_base_z_s, v4si)\n+VAR1 (LDRGBU_Z, vldrwq_gather_base_z_u, v4si)\n+VAR3 (LDRGS_Z, vldrbq_gather_offset_z_s, v16qi, v8hi, v4si)\n+VAR3 (LDRGU_Z, vldrbq_gather_offset_z_u, v16qi, v8hi, v4si)\n+VAR3 (LDRS_Z, vldrbq_z_s, v16qi, v8hi, v4si)\n+VAR3 (LDRU_Z, vldrbq_z_u, v16qi, v8hi, v4si)"}, {"sha": "03a90ab3212954ea881c52e1b80bc69feed59a5d", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -8142,3 +8142,69 @@\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrbq_gather_offset_z_s vldrbq_gather_offset_z_u]\n+;;\n+(define_insn \"mve_vldrbq_gather_offset_z_<supf><mode>\"\n+  [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:MVE_2 [(match_operand:<MVE_B_ELEM> 1 \"memory_operand\" \"Us\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VLDRBGOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[4];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   ops[3] = operands[3];\n+   if (!strcmp (\"<supf>\",\"s\") && <V_sz_elem> == 8)\n+     output_asm_insn (\"vpst\\n\\tvldrbt.u8\\t%q0, [%m1, %q2]\",ops);\n+   else\n+     output_asm_insn (\"vpst\\n\\tvldrbt.<supf><V_sz_elem>\\t%q0, [%m1, %q2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrbq_z_s vldrbq_z_u]\n+;;\n+(define_insn \"mve_vldrbq_z_<supf><mode>\"\n+  [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:<MVE_B_ELEM> 1 \"memory_operand\" \"Us\")\n+\t\t       (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n+\t VLDRBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[0]);\n+   ops[0] = gen_rtx_REG (TImode, regno);\n+   ops[1]  = operands[1];\n+   output_asm_insn (\"vpst\\n\\tvldrbt.<supf><V_sz_elem>\\t%q0, %E1\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrwq_gather_base_z_s vldrwq_gather_base_z_u]\n+;;\n+(define_insn \"mve_vldrwq_gather_base_z_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:SI 2 \"immediate_operand\" \"i\")\n+\t\t      (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VLDRWGBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\n\\tvldrwt.u32\\t%q0, [%q1, %2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])"}, {"sha": "451f0eee2768aa464eb9019e216697a06d230b2c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -1,3 +1,22 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_s16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_z_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_z_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_z_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_z_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_z_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_z_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_z_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_z_u32.c: Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "a51689f7740cd31de08108389df398970321aef6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_s16.c?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int8_t const * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrbq_gather_offset_z_s16 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int8_t const * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrbq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.s16\"  }  } */"}, {"sha": "4b3b8ba3249388706008f68b9535c50f9c1ba5f4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_s32.c?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int8_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrbq_gather_offset_z_s32 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int8_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrbq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.s32\"  }  } */"}, {"sha": "14e0f301d725cf5057e4799bfe5cfe59615c6377", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_s8.c?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8_t const * base, uint8x16_t offset, mve_pred16_t p)\n+{\n+  return vldrbq_gather_offset_z_s8 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.u8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8_t const * base, uint8x16_t offset, mve_pred16_t p)\n+{\n+  return vldrbq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.u8\"  }  } */"}, {"sha": "7b075001c8118c226ec8d2f4e434fe582fb51831", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_u16.c?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8_t const * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrbq_gather_offset_z_u16 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint8_t const * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrbq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.u16\"  }  } */"}, {"sha": "c81ef6d365a65c7b1908f00c200ec1418b9c1adb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_u32.c?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint8_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrbq_gather_offset_z_u32 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint8_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrbq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.u32\"  }  } */"}, {"sha": "3c91278ddc9d58dc782f0b5207bb116c756e7ea3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_z_u8.c?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8_t const * base, uint8x16_t offset, mve_pred16_t p)\n+{\n+  return vldrbq_gather_offset_z_u8 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8_t const * base, uint8x16_t offset, mve_pred16_t p)\n+{\n+  return vldrbq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.u8\"  }  } */"}, {"sha": "c709db6c3ea4afb1228cd28c81ab51b5bf1b4803", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_z_s16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_s16.c?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int8_t const * base, mve_pred16_t p)\n+{\n+  return vldrbq_z_s16 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.s16\"  }  } */"}, {"sha": "aa47e239c4b81c57009232c9a0953388c1f89722", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_z_s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_s32.c?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int8_t const * base, mve_pred16_t p)\n+{\n+  return vldrbq_z_s32 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.s32\"  }  } */"}, {"sha": "85d7ef436673be3d90a5a7e44e1e81f8946bb154", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_z_s8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_s8.c?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8_t const * base, mve_pred16_t p)\n+{\n+  return vldrbq_z_s8 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.s8\"  }  } */"}, {"sha": "054305797ebf40bf66d09f25bdbb10439b463c60", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_z_u16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_u16.c?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8_t const * base, mve_pred16_t p)\n+{\n+  return vldrbq_z_u16 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.u16\"  }  } */"}, {"sha": "73b9ea19a6e0474cab181d8b355d77521e9b95da", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_z_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_u32.c?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint8_t const * base, mve_pred16_t p)\n+{\n+  return vldrbq_z_u32 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.u32\"  }  } */"}, {"sha": "3925c9f17a2d2a5d7439178312df20c6eeee4ae1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_z_u8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_u8.c?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8_t const * base, mve_pred16_t p)\n+{\n+  return vldrbq_z_u8 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.u8\"  }  } */"}, {"sha": "2e61760ede715efa0776fba6523b974e2becc08c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_z_s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_z_s32.c?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (uint32x4_t addr, mve_pred16_t p)\n+{\n+  return vldrwq_gather_base_z_s32 (addr, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */"}, {"sha": "a71c562722db6b5f97299ab8b64d044126f1b3ef", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_z_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429d607bc468828ea1e40852bbf8a1e9bbc34e7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_z_u32.c?ref=429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t addr, mve_pred16_t p)\n+{\n+  return vldrwq_gather_base_z_u32 (addr, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */"}]}