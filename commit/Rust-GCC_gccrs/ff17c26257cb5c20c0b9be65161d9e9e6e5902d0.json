{"sha": "ff17c26257cb5c20c0b9be65161d9e9e6e5902d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYxN2MyNjI1N2NiNWMyMGMwYjliZTY1MTYxZDllOWU2ZTU5MDJkMA==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2015-11-24T18:00:52Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-11-24T18:00:52Z"}, "message": "fix PR67984: check for constants in rename map\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r230826", "tree": {"sha": "51d726cfa18c0026ca7f85fc9695eaeaaeeac1af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51d726cfa18c0026ca7f85fc9695eaeaaeeac1af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff17c26257cb5c20c0b9be65161d9e9e6e5902d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff17c26257cb5c20c0b9be65161d9e9e6e5902d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff17c26257cb5c20c0b9be65161d9e9e6e5902d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff17c26257cb5c20c0b9be65161d9e9e6e5902d0/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf98f0f49bbb11f483d131e52a0261023820e85b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf98f0f49bbb11f483d131e52a0261023820e85b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf98f0f49bbb11f483d131e52a0261023820e85b"}], "stats": {"total": 131, "additions": 92, "deletions": 39}, "files": [{"sha": "a76a86602a1d49a09193c48c24c6270d98c4bd48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff17c26257cb5c20c0b9be65161d9e9e6e5902d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff17c26257cb5c20c0b9be65161d9e9e6e5902d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff17c26257cb5c20c0b9be65161d9e9e6e5902d0", "patch": "@@ -1,4 +1,12 @@\n-2015-11-23  Aditya Kumar  <aditya.k7@samsung.com>\n+2015-11-24  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\tPR tree-optimization/67984\n+\t* graphite-isl-ast-to-gimple.c (is_constant): New.\n+\t(get_rename): Call is_constant.\n+\t(get_new_name): Same.\n+\n+2015-11-24  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n \n \t* graphite-dependences.c: Only include graphite.h."}, {"sha": "363fec70ffab28bbd73e595fda9ceec7eba8e912", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 60, "deletions": 38, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff17c26257cb5c20c0b9be65161d9e9e6e5902d0/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff17c26257cb5c20c0b9be65161d9e9e6e5902d0/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=ff17c26257cb5c20c0b9be65161d9e9e6e5902d0", "patch": "@@ -460,6 +460,16 @@ class translate_isl_ast_to_gimple\n   void print_isl_ast_node (FILE *file, __isl_keep isl_ast_node *node,\n \t\t\t   __isl_keep isl_ctx *ctx) const;\n \n+  /* Return true when OP is a constant tree.  */\n+\n+  bool is_constant (tree op) const\n+  {\n+    return TREE_CODE (op) == INTEGER_CST\n+      || TREE_CODE (op) == REAL_CST\n+      || TREE_CODE (op) == COMPLEX_CST\n+      || TREE_CODE (op) == VECTOR_CST;\n+  }\n+\n private:\n   sese_info_p region;\n \n@@ -1004,7 +1014,7 @@ translate_isl_ast_node_user (__isl_keep isl_ast_node *node,\n     {\n       fprintf (dump_file, \"[codegen] copying from basic block\\n\");\n       print_loops_bb (dump_file, GBB_BB (gbb), 0, 3);\n-      fprintf (dump_file, \"\\n[codegen] to new basic block\\n\");\n+      fprintf (dump_file, \"[codegen] to new basic block\\n\");\n       print_loops_bb (dump_file, next_e->src, 0, 3);\n     }\n \n@@ -1018,7 +1028,7 @@ translate_isl_ast_node_user (__isl_keep isl_ast_node *node,\n \n   if (dump_file)\n     {\n-      fprintf (dump_file, \"\\n[codegen] (after copy) new basic block\\n\");\n+      fprintf (dump_file, \"[codegen] (after copy) new basic block\\n\");\n       print_loops_bb (dump_file, next_e->src, 0, 3);\n     }\n \n@@ -1229,8 +1239,9 @@ is_valid_rename (tree rename, basic_block def_bb, basic_block use_bb,\n     {\n       if (dump_file)\n \t{\n-\t  fprintf (dump_file, \"\\n[codegen] rename not in loop closed ssa:\");\n+\t  fprintf (dump_file, \"[codegen] rename not in loop closed ssa:\");\n \t  print_generic_expr (dump_file, rename, 0);\n+\t  fprintf (dump_file, \"\\n\");\n \t}\n       return false;\n     }\n@@ -1275,9 +1286,17 @@ translate_isl_ast_to_gimple::get_rename (basic_block new_bb,\n   if (1 == renames->length ())\n     {\n       tree rename = (*renames)[0];\n-      basic_block bb = gimple_bb (SSA_NAME_DEF_STMT (rename));\n-      if (is_valid_rename (rename, bb, new_bb, loop_phi, old_name, old_bb))\n+      if (TREE_CODE (rename) == SSA_NAME)\n+\t{\n+\t  basic_block bb = gimple_bb (SSA_NAME_DEF_STMT (rename));\n+\t  if (is_valid_rename (rename, bb, new_bb, loop_phi, old_name, old_bb))\n+\t    return rename;\n+\t  return NULL_TREE;\n+\t}\n+\n+      if (is_constant (rename))\n \treturn rename;\n+\n       return NULL_TREE;\n     }\n \n@@ -1317,10 +1336,11 @@ translate_isl_ast_to_gimple::set_rename (tree old_name, tree expr)\n {\n   if (dump_file)\n     {\n-      fprintf (dump_file, \"\\n[codegen] setting rename: old_name = \");\n+      fprintf (dump_file, \"[codegen] setting rename: old_name = \");\n       print_generic_expr (dump_file, old_name, 0);\n       fprintf (dump_file, \", new_name = \");\n       print_generic_expr (dump_file, expr, 0);\n+      fprintf (dump_file, \"\\n\");\n     }\n \n   if (old_name == expr)\n@@ -1436,7 +1456,7 @@ translate_isl_ast_to_gimple::gsi_insert_earliest (gimple_seq seq)\n \n       if (dump_file)\n \t{\n-\t  fprintf (dump_file, \"\\n[codegen] inserting statement: \");\n+\t  fprintf (dump_file, \"[codegen] inserting statement: \");\n \t  print_gimple_stmt (dump_file, use_stmt, 0, TDF_VOPS | TDF_MEMSYMS);\n \t  print_loops_bb (dump_file, gimple_bb (use_stmt), 0, 3);\n \t}\n@@ -1718,7 +1738,7 @@ translate_isl_ast_to_gimple::rename_uses (gimple *copy,\n \n   if (dump_file)\n     {\n-      fprintf (dump_file, \"\\n[codegen] renaming uses of stmt: \");\n+      fprintf (dump_file, \"[codegen] renaming uses of stmt: \");\n       print_gimple_stmt (dump_file, copy, 0, 0);\n     }\n \n@@ -1730,8 +1750,9 @@ translate_isl_ast_to_gimple::rename_uses (gimple *copy,\n \n       if (dump_file)\n \t{\n-\t  fprintf (dump_file, \"\\n[codegen] renaming old_name = \");\n+\t  fprintf (dump_file, \"[codegen] renaming old_name = \");\n \t  print_generic_expr (dump_file, old_name, 0);\n+\t  fprintf (dump_file, \"\\n\");\n \t}\n \n       if (TREE_CODE (old_name) != SSA_NAME\n@@ -1749,8 +1770,9 @@ translate_isl_ast_to_gimple::rename_uses (gimple *copy,\n \n \t  if (dump_file)\n \t    {\n-\t      fprintf (dump_file, \"\\n[codegen] from rename_map: new_name = \");\n+\t      fprintf (dump_file, \"[codegen] from rename_map: new_name = \");\n \t      print_generic_expr (dump_file, new_expr, 0);\n+\t      fprintf (dump_file, \"\\n\");\n \t    }\n \n \t  if (type_old_name != type_new_expr\n@@ -1778,8 +1800,9 @@ translate_isl_ast_to_gimple::rename_uses (gimple *copy,\n \n       if (dump_file)\n \t{\n-\t  fprintf (dump_file, \"\\n[codegen] not in rename map, scev: \");\n+\t  fprintf (dump_file, \"[codegen] not in rename map, scev: \");\n \t  print_generic_expr (dump_file, new_expr, 0);\n+\t  fprintf (dump_file, \"\\n\");\n \t}\n \n       gsi_insert_earliest (stmts);\n@@ -1846,10 +1869,7 @@ get_new_name (basic_block new_bb, tree op,\n \t      basic_block old_bb, bool loop_phi) const\n {\n   /* For constants the names are the same.  */\n-  if (TREE_CODE (op) == INTEGER_CST\n-      || TREE_CODE (op) == REAL_CST\n-      || TREE_CODE (op) == COMPLEX_CST\n-      || TREE_CODE (op) == VECTOR_CST)\n+  if (is_constant (op))\n     return op;\n \n   return get_rename (new_bb, op, old_bb, loop_phi);\n@@ -1925,7 +1945,7 @@ copy_loop_phi_args (gphi *old_phi, init_back_edge_pair_t &ibp_old_bb,\n \t     names yet.  */\n \t  region->incomplete_phis.safe_push (std::make_pair (old_phi, new_phi));\n \t  if (dump_file)\n-\t    fprintf (dump_file, \"\\n[codegen] postpone loop phi nodes: \");\n+\t    fprintf (dump_file, \"[codegen] postpone loop phi nodes.\\n\");\n \t}\n       else\n \t/* Either we should add the arg to phi or, we should postpone.  */\n@@ -1941,7 +1961,7 @@ translate_isl_ast_to_gimple::copy_loop_phi_nodes (basic_block bb,\n \t\t\t\t\t\t  basic_block new_bb)\n {\n   if (dump_file)\n-    fprintf (dump_file, \"\\n[codegen] copying loop phi nodes in bb_%d.\",\n+    fprintf (dump_file, \"[codegen] copying loop phi nodes in bb_%d.\\n\",\n \t     new_bb->index);\n \n   /* Loop phi nodes should have only two arguments.  */\n@@ -2071,7 +2091,7 @@ translate_isl_ast_to_gimple::copy_loop_close_phi_args (basic_block old_bb,\n \t\t   get_loc (old_name));\n       if (dump_file)\n \t{\n-\t  fprintf (dump_file, \"\\n[codegen] Adding loop-closed phi: \");\n+\t  fprintf (dump_file, \"[codegen] Adding loop-closed phi: \");\n \t  print_gimple_stmt (dump_file, new_phi, 0, 0);\n \t}\n \n@@ -2095,7 +2115,7 @@ translate_isl_ast_to_gimple::copy_loop_close_phi_args (basic_block old_bb,\n \t  region->incomplete_phis.safe_push (std::make_pair (phi, new_phi));\n \t  if (dump_file)\n \t    {\n-\t      fprintf (dump_file, \"\\n[codegen] postpone close phi nodes: \");\n+\t      fprintf (dump_file, \"[codegen] postpone close phi nodes: \");\n \t      print_gimple_stmt (dump_file, new_phi, 0, 0);\n \t    }\n \t  continue;\n@@ -2116,7 +2136,7 @@ translate_isl_ast_to_gimple::copy_loop_close_phi_args (basic_block old_bb,\n       add_phi_arg (merge_phi, init, other, get_loc (old_name));\n       if (dump_file)\n \t{\n-\t  fprintf (dump_file, \"\\n[codegen] Adding guard-phi: \");\n+\t  fprintf (dump_file, \"[codegen] Adding guard-phi: \");\n \t  print_gimple_stmt (dump_file, merge_phi, 0, 0);\n \t}\n \n@@ -2133,7 +2153,7 @@ translate_isl_ast_to_gimple::copy_loop_close_phi_nodes (basic_block old_bb,\n \t\t\t\t\t\t\tbasic_block new_bb)\n {\n   if (dump_file)\n-    fprintf (dump_file, \"\\n[codegen] copying loop closed phi nodes in bb_%d.\",\n+    fprintf (dump_file, \"[codegen] copying loop closed phi nodes in bb_%d.\\n\",\n \t     new_bb->index);\n   /* Loop close phi nodes should have only one argument.  */\n   gcc_assert (1 == EDGE_COUNT (old_bb->preds));\n@@ -2324,7 +2344,7 @@ translate_isl_ast_to_gimple::copy_cond_phi_args (gphi *phi, gphi *new_phi,\n \t\t\t\t\t\t bool postpone)\n {\n   if (dump_file)\n-    fprintf (dump_file, \"\\n[codegen] copying cond phi args: \");\n+    fprintf (dump_file, \"[codegen] copying cond phi args.\\n\");\n   gcc_assert (2 == gimple_phi_num_args (phi));\n \n   basic_block new_bb = gimple_bb (new_phi);\n@@ -2365,8 +2385,9 @@ translate_isl_ast_to_gimple::copy_cond_phi_args (gphi *phi, gphi *new_phi,\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file,\n-\t\t       \"\\n[codegen] parameter argument to phi, new_expr: \");\n+\t\t       \"[codegen] parameter argument to phi, new_expr: \");\n \t      print_generic_expr (dump_file, new_phi_args[i], 0);\n+\t      fprintf (dump_file, \"\\n\");\n \t    }\n \t  continue;\n \t}\n@@ -2393,8 +2414,9 @@ translate_isl_ast_to_gimple::copy_cond_phi_args (gphi *phi, gphi *new_phi,\n \t      if (dump_file)\n \t\t{\n \t\t  fprintf (dump_file,\n-\t\t\t   \"\\n[codegen] scev analyzeable, new_expr: \");\n+\t\t\t   \"[codegen] scev analyzeable, new_expr: \");\n \t\t  print_generic_expr (dump_file, new_expr, 0);\n+\t\t  fprintf (dump_file, \"\\n\");\n \t\t}\n \t      gsi_insert_earliest (stmts);\n \t      new_phi_args [i] = new_name;\n@@ -2406,7 +2428,7 @@ translate_isl_ast_to_gimple::copy_cond_phi_args (gphi *phi, gphi *new_phi,\n \n \t  if (dump_file)\n \t    {\n-\t      fprintf (dump_file, \"\\n[codegen] postpone cond phi nodes: \");\n+\t      fprintf (dump_file, \"[codegen] postpone cond phi nodes: \");\n \t      print_gimple_stmt (dump_file, new_phi, 0, 0);\n \t    }\n \n@@ -2442,7 +2464,7 @@ translate_isl_ast_to_gimple::copy_cond_phi_nodes (basic_block bb,\n   gcc_assert (!bb_contains_loop_close_phi_nodes (bb));\n \n   if (dump_file)\n-    fprintf (dump_file, \"\\n[codegen] copying cond phi nodes in bb_%d:\",\n+    fprintf (dump_file, \"[codegen] copying cond phi nodes in bb_%d.\\n\",\n \t     new_bb->index);\n \n   /* Cond phi nodes should have exactly two arguments.  */\n@@ -2539,7 +2561,7 @@ translate_isl_ast_to_gimple::graphite_copy_stmts_from_block (basic_block bb,\n \n       if (dump_file)\n \t{\n-\t  fprintf (dump_file, \"\\n[codegen] inserting statement: \");\n+\t  fprintf (dump_file, \"[codegen] inserting statement: \");\n \t  print_gimple_stmt (dump_file, copy, 0, 0);\n \t}\n \n@@ -2645,7 +2667,7 @@ translate_isl_ast_to_gimple::copy_bb_and_scalar_dependences (basic_block bb,\n \t}\n \n       if (dump_file)\n-\tfprintf (dump_file, \"\\n[codegen] bb_%d contains loop phi nodes\",\n+\tfprintf (dump_file, \"[codegen] bb_%d contains loop phi nodes.\\n\",\n \t\t bb->index);\n       if (!copy_loop_phi_nodes (bb, phi_bb))\n \t{\n@@ -2656,7 +2678,7 @@ translate_isl_ast_to_gimple::copy_bb_and_scalar_dependences (basic_block bb,\n   else if (bb_contains_loop_close_phi_nodes (bb))\n     {\n       if (dump_file)\n-\tfprintf (dump_file, \"\\n[codegen] bb_%d contains close phi nodes\",\n+\tfprintf (dump_file, \"[codegen] bb_%d contains close phi nodes.\\n\",\n \t\t bb->index);\n \n       edge e = edge_for_new_close_phis (bb);\n@@ -2679,7 +2701,7 @@ translate_isl_ast_to_gimple::copy_bb_and_scalar_dependences (basic_block bb,\n   else if (num_phis > 0)\n     {\n       if (dump_file)\n-\tfprintf (dump_file, \"\\n[codegen] bb_%d contains cond phi nodes\",\n+\tfprintf (dump_file, \"[codegen] bb_%d contains cond phi nodes.\\n\",\n \t\t bb->index);\n \n       basic_block phi_bb = single_pred (new_bb);\n@@ -2699,7 +2721,7 @@ translate_isl_ast_to_gimple::copy_bb_and_scalar_dependences (basic_block bb,\n     }\n \n   if (dump_file)\n-    fprintf (dump_file, \"\\n[codegen] copying from bb_%d to bb_%d\",\n+    fprintf (dump_file, \"[codegen] copying from bb_%d to bb_%d.\\n\",\n \t     bb->index, new_bb->index);\n \n   vec <basic_block> *copied_bbs = region->copied_bb_map->get (bb);\n@@ -2742,7 +2764,7 @@ translate_isl_ast_to_gimple::translate_pending_phi_nodes ()\n \n       if (dump_file)\n \t{\n-\t  fprintf (dump_file, \"\\n[codegen] translating pending old-phi: \");\n+\t  fprintf (dump_file, \"[codegen] translating pending old-phi: \");\n \t  print_gimple_stmt (dump_file, old_phi, 0, 0);\n \t}\n \n@@ -2970,7 +2992,7 @@ graphite_regenerate_ast_isl (scop_p scop)\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n-      fprintf (dump_file, \"\\nISL AST generated by ISL: \\n\");\n+      fprintf (dump_file, \"ISL AST generated by ISL: \\n\");\n       t.print_isl_ast_node (dump_file, root_node, scop->isl_context);\n     }\n \n@@ -2993,8 +3015,8 @@ graphite_regenerate_ast_isl (scop_p scop)\n   if (t.codegen_error_p ())\n     {\n       if (dump_file)\n-\tfprintf (dump_file, \"\\n[codegen] unsuccessful,\"\n-\t\t \" reverting back to the original code.\");\n+\tfprintf (dump_file, \"[codegen] unsuccessful,\"\n+\t\t \" reverting back to the original code.\\n\");\n       set_ifsese_condition (if_region, integer_zero_node);\n     }\n   else\n@@ -3018,8 +3040,8 @@ graphite_regenerate_ast_isl (scop_p scop)\n       else\n \t{\n \t  if (dump_file)\n-\t    fprintf (dump_file, \"\\n[codegen] unsuccessful in translating\"\n-\t\t     \" pending phis, reverting back to the original code.\");\n+\t    fprintf (dump_file, \"[codegen] unsuccessful in translating\"\n+\t\t     \" pending phis, reverting back to the original code.\\n\");\n \t  set_ifsese_condition (if_region, integer_zero_node);\n \t}\n     }\n@@ -3041,7 +3063,7 @@ graphite_regenerate_ast_isl (scop_p scop)\n \tif (loop->can_be_parallel)\n \t  num_no_dependency++;\n \n-      fprintf (dump_file, \"\\n%d loops carried no dependency.\\n\",\n+      fprintf (dump_file, \"%d loops carried no dependency.\\n\",\n \t       num_no_dependency);\n     }\n "}, {"sha": "5fcb76941b0022e30d9d22a02b678f82b37ddd24", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff17c26257cb5c20c0b9be65161d9e9e6e5902d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff17c26257cb5c20c0b9be65161d9e9e6e5902d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff17c26257cb5c20c0b9be65161d9e9e6e5902d0", "patch": "@@ -1,3 +1,9 @@\n+2015-11-24  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\tPR tree-optimization/67984\n+\t* gcc.dg/graphite/pr67984.c: New.\n+\n 2015-11-24  Michael Matz  <matz@suse.de>\n \n \tPR rtl-optimization/68392"}, {"sha": "2077eb6f1409531d72367a35628eb7bdc1e4770d", "filename": "gcc/testsuite/gcc.dg/graphite/pr67984.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff17c26257cb5c20c0b9be65161d9e9e6e5902d0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr67984.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff17c26257cb5c20c0b9be65161d9e9e6e5902d0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr67984.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr67984.c?ref=ff17c26257cb5c20c0b9be65161d9e9e6e5902d0", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-options \"-O2 -floop-nest-optimize\" } */\n+\n+void foo(int N, float *x, float *X)\n+{\n+  float sum = 0.;\n+  for (int n = 0; n < N; ++n)\n+    sum += x[n];\n+\n+  X[0] = sum;\n+\n+  for (unsigned int k = 1; k < N; ++k) {\n+    sum = 0.;\n+    for (int n = 0; n < N; ++n)\n+      sum += x[n] * ((float)(3.14159265358979323846 * (n + .5) * k / N));\n+    X[k] = sum;\n+  }\n+}"}]}