{"sha": "9eaa7740ba3111958a29fc4d16f1ba53718ec1a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVhYTc3NDBiYTMxMTE5NThhMjlmYzRkMTZmMWJhNTM3MThlYzFhNA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-03-28T20:05:28Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-03-28T20:05:28Z"}, "message": "h8300.h (FUNCTION_VALUE_REGNO_P, [...]): Remove macros.\n\n\t* config/h8300/h8300.h (FUNCTION_VALUE_REGNO_P, FUNCTION_VALUE,\n\tLIBCALL_VALUE): Remove macros.\n\t* config/h8300/h8300.c (TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n\t(h8300_function_value, h8300_libcall_value,\n\th8300_function_value_regno_p): New functions.\n\nFrom-SVN: r171625", "tree": {"sha": "d8d2d95d195c98616c4d72306f69b0a919e437ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8d2d95d195c98616c4d72306f69b0a919e437ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eaa7740ba3111958a29fc4d16f1ba53718ec1a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eaa7740ba3111958a29fc4d16f1ba53718ec1a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eaa7740ba3111958a29fc4d16f1ba53718ec1a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eaa7740ba3111958a29fc4d16f1ba53718ec1a4/comments", "author": null, "committer": null, "parents": [{"sha": "dcec2be2c359343ac17def382b44c829828610ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcec2be2c359343ac17def382b44c829828610ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcec2be2c359343ac17def382b44c829828610ce"}], "stats": {"total": 75, "additions": 51, "deletions": 24}, "files": [{"sha": "1de788d77f4b5adf52e3c762e341a41c0926a560", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eaa7740ba3111958a29fc4d16f1ba53718ec1a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eaa7740ba3111958a29fc4d16f1ba53718ec1a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9eaa7740ba3111958a29fc4d16f1ba53718ec1a4", "patch": "@@ -1,3 +1,12 @@\n+2011-03-28  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/h8300/h8300.h (FUNCTION_VALUE_REGNO_P, FUNCTION_VALUE,\n+\tLIBCALL_VALUE): Remove macros.\n+\t* config/h8300/h8300.c (TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n+\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n+\t(h8300_function_value, h8300_libcall_value,\n+\th8300_function_value_regno_p): New functions.\n+\n 2011-03-28  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/h8300/h8300.h (ASM_OUTPUT_BSS): Remove macro."}, {"sha": "0e44a3ab425d5a4ba75f1f09f3ece62568c3e696", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eaa7740ba3111958a29fc4d16f1ba53718ec1a4/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eaa7740ba3111958a29fc4d16f1ba53718ec1a4/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=9eaa7740ba3111958a29fc4d16f1ba53718ec1a4", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for Renesas H8/300.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com),\n    Jim Wilson (wilson@cygnus.com), and Doug Evans (dje@cygnus.com).\n@@ -5860,6 +5860,38 @@ h8300_init_libfuncs (void)\n   set_optab_libfunc (umod_optab, HImode, \"__umodhi3\");\n }\n \f\n+/* Worker function for TARGET_FUNCTION_VALUE.\n+\n+   On the H8 the return value is in R0/R1.  */\n+\n+static rtx\n+h8300_function_value (const_tree ret_type,\n+\t\t      const_tree fn_decl_or_type ATTRIBUTE_UNUSED,\n+\t\t      bool outgoing ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (TYPE_MODE (ret_type), R0_REG);\n+}\n+\n+/* Worker function for TARGET_LIBCALL_VALUE.\n+\n+   On the H8 the return value is in R0/R1.  */\n+\n+static rtx\n+h8300_libcall_value (enum machine_mode mode, const_rtx fun ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (mode, R0_REG);\n+}\n+\n+/* Worker function for TARGET_FUNCTION_VALUE_REGNO_P.\n+\n+   On the H8, R0 is the only register thus used.  */\n+\n+static bool\n+h8300_function_value_regno_p (const unsigned int regno)\n+{\n+  return (regno == R0_REG);\n+}\n+\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool\n@@ -5946,6 +5978,15 @@ h8300_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS h8300_init_libfuncs\n \n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE h8300_function_value\n+\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE h8300_libcall_value\n+\n+#undef TARGET_FUNCTION_VALUE_REGNO_P\n+#define TARGET_FUNCTION_VALUE_REGNO_P h8300_function_value_regno_p\n+\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY h8300_return_in_memory\n "}, {"sha": "57fffda22970c2555bc37d840791a04913f4c25f", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eaa7740ba3111958a29fc4d16f1ba53718ec1a4/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eaa7740ba3111958a29fc4d16f1ba53718ec1a4/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=9eaa7740ba3111958a29fc4d16f1ba53718ec1a4", "patch": "@@ -527,29 +527,6 @@ enum reg_class {\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\\\n   ((OFFSET) = h8300_initial_elimination_offset ((FROM), (TO)))\n \n-/* Define how to find the value returned by a function.\n-   VALTYPE is the data type of the value (as a tree).\n-   If the precise function being called is known, FUNC is its FUNCTION_DECL;\n-   otherwise, FUNC is 0.\n-\n-   On the H8 the return value is in R0/R1.  */\n-\n-#define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-  gen_rtx_REG (TYPE_MODE (VALTYPE), R0_REG)\n-\n-/* Define how to find the value returned by a library function\n-   assuming the value has mode MODE.  */\n-\n-/* On the H8 the return value is in R0/R1.  */\n-\n-#define LIBCALL_VALUE(MODE) \\\n-  gen_rtx_REG (MODE, R0_REG)\n-\n-/* 1 if N is a possible register number for a function value.\n-   On the H8, R0 is the only register thus used.  */\n-\n-#define FUNCTION_VALUE_REGNO_P(N) ((N) == R0_REG)\n-\n /* Define this if PCC uses the nonreentrant convention for returning\n    structure and union values.  */\n "}]}