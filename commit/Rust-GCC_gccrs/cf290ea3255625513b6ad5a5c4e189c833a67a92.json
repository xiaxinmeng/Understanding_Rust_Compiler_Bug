{"sha": "cf290ea3255625513b6ad5a5c4e189c833a67a92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YyOTBlYTMyNTU2MjU1MTNiNmFkNWE1YzRlMTg5YzgzM2E2N2E5Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-05-23T16:11:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-23T16:11:06Z"}, "message": "Fix handling of an empty filename at end of a path\n\nThe C++17 std::filesystem::path grammar allows an empty filename as the\nlast component (to signify a trailing slash). The existing code does not\nhandle this consistently, sometimes an empty filename has type _Multi\nand sometimes it has type _Filename. This can result in a non-empty\niterator range for an empty filename component.\n\nThis change ensures that empty paths always have type _Filename and will\nyield an empty iterator range.\n\n\t* include/bits/fs_path.h (path::_M_type): Change default member\n\tinitializer to _Filename.\n\t(path::begin): Create past-the-end iterator for empty path.\n\t* src/filesystem/std-path.cc (path::remove_filename()): Remove\n\tdebugging check.\n\t(path::has_relative_path()): Return false for empty filenames.\n\t(path::_M_split_cmpts): Set _M_type to _Filename for empty paths.\n\tFix offset of empty final component.\n\t* testsuite/27_io/filesystem/path/itr/components.cc: New.\n\t* testsuite/27_io/filesystem/path/itr/traversal.cc: Add new inputs.\n\nFrom-SVN: r260616", "tree": {"sha": "ef3d41a212735827f10935b6954e5389c86704c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef3d41a212735827f10935b6954e5389c86704c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf290ea3255625513b6ad5a5c4e189c833a67a92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf290ea3255625513b6ad5a5c4e189c833a67a92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf290ea3255625513b6ad5a5c4e189c833a67a92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf290ea3255625513b6ad5a5c4e189c833a67a92/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aa132501308fcb42ee2b189b9971df5a04ea0e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa132501308fcb42ee2b189b9971df5a04ea0e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aa132501308fcb42ee2b189b9971df5a04ea0e7"}], "stats": {"total": 87, "additions": 75, "deletions": 12}, "files": [{"sha": "f5d6b10af1aea011936a6f2b2103619b14a47352", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf290ea3255625513b6ad5a5c4e189c833a67a92/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf290ea3255625513b6ad5a5c4e189c833a67a92/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cf290ea3255625513b6ad5a5c4e189c833a67a92", "patch": "@@ -1,3 +1,16 @@\n+2018-05-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_path.h (path::_M_type): Change default member\n+\tinitializer to _Filename.\n+\t(path::begin): Create past-the-end iterator for empty path.\n+\t* src/filesystem/std-path.cc (path::remove_filename()): Remove\n+\tdebugging check.\n+\t(path::has_relative_path()): Return false for empty filenames.\n+\t(path::_M_split_cmpts): Set _M_type to _Filename for empty paths.\n+\tFix offset of empty final component.\n+\t* testsuite/27_io/filesystem/path/itr/components.cc: New.\n+\t* testsuite/27_io/filesystem/path/itr/traversal.cc: Add new inputs.\n+\n 2018-05-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \tAdd support for opening file streams from wide character strings."}, {"sha": "79a341830dbe5ed14195badb90299b75a1e5a177", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf290ea3255625513b6ad5a5c4e189c833a67a92/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf290ea3255625513b6ad5a5c4e189c833a67a92/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=cf290ea3255625513b6ad5a5c4e189c833a67a92", "patch": "@@ -497,7 +497,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     struct _Cmpt;\n     using _List = _GLIBCXX_STD_C::vector<_Cmpt>;\n     _List _M_cmpts; // empty unless _M_type == _Type::_Multi\n-    _Type _M_type = _Type::_Multi;\n+    _Type _M_type = _Type::_Filename;\n   };\n \n   template<>\n@@ -1076,7 +1076,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   {\n     if (_M_type == _Type::_Multi)\n       return iterator(this, _M_cmpts.begin());\n-    return iterator(this, false);\n+    return iterator(this, empty());\n   }\n \n   inline path::iterator"}, {"sha": "755cb7c883aa22ee6f135e4596490af8e185b409", "filename": "libstdc++-v3/src/filesystem/std-path.cc", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf290ea3255625513b6ad5a5c4e189c833a67a92/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf290ea3255625513b6ad5a5c4e189c833a67a92/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc?ref=cf290ea3255625513b6ad5a5c4e189c833a67a92", "patch": "@@ -63,8 +63,6 @@ path::remove_filename()\n     }\n   else if (_M_type == _Type::_Filename)\n     clear();\n-  if (!empty() && _M_pathname.back() != '/')\n-    throw 1;\n   return *this;\n }\n \n@@ -292,7 +290,7 @@ path::has_root_path() const\n bool\n path::has_relative_path() const\n {\n-  if (_M_type == _Type::_Filename)\n+  if (_M_type == _Type::_Filename && !_M_pathname.empty())\n     return true;\n   if (!_M_cmpts.empty())\n     {\n@@ -301,7 +299,7 @@ path::has_relative_path() const\n         ++__it;\n       if (__it != _M_cmpts.end() && __it->_M_type == _Type::_Root_dir)\n         ++__it;\n-      if (__it != _M_cmpts.end())\n+      if (__it != _M_cmpts.end() && !__it->_M_pathname.empty())\n         return true;\n     }\n   return false;\n@@ -514,11 +512,13 @@ path::_M_find_extension() const\n void\n path::_M_split_cmpts()\n {\n-  _M_type = _Type::_Multi;\n   _M_cmpts.clear();\n-\n   if (_M_pathname.empty())\n-    return;\n+    {\n+      _M_type = _Type::_Filename;\n+      return;\n+    }\n+  _M_type = _Type::_Multi;\n \n   size_t pos = 0;\n   const size_t len = _M_pathname.size();\n@@ -593,8 +593,7 @@ path::_M_split_cmpts()\n       // An empty element, if trailing non-root directory-separator present.\n       if (_M_cmpts.back()._M_type == _Type::_Filename)\n \t{\n-\t  const auto& last = _M_cmpts.back();\n-\t  pos = last._M_pos + last._M_pathname.size();\n+\t  pos = _M_pathname.size();\n \t  _M_cmpts.emplace_back(string_type(), _Type::_Filename, pos);\n \t}\n     }"}, {"sha": "15736b22fd531d716dd11f160625b56819970402", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/itr/components.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf290ea3255625513b6ad5a5c4e189c833a67a92/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fitr%2Fcomponents.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf290ea3255625513b6ad5a5c4e189c833a67a92/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fitr%2Fcomponents.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fitr%2Fcomponents.cc?ref=cf290ea3255625513b6ad5a5c4e189c833a67a92", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <filesystem>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+#include <testsuite_fs.h>\n+\n+void\n+test01()\n+{\n+  for (std::filesystem::path p : __gnu_test::test_paths)\n+  {\n+    if (p.empty())\n+      VERIFY(std::distance(p.begin(), p.end()) == 0);\n+    else\n+      VERIFY(std::distance(p.begin(), p.end()) != 0);\n+\n+    for (const std::filesystem::path& cmpt : p)\n+    {\n+      if (cmpt.empty())\n+\tVERIFY(std::distance(cmpt.begin(), cmpt.end()) == 0);\n+      else\n+\tVERIFY(std::distance(cmpt.begin(), cmpt.end()) == 1);\n+    }\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "c23cb14fd735410a51291f1127b7dc73a6f363d5", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/itr/traversal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf290ea3255625513b6ad5a5c4e189c833a67a92/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fitr%2Ftraversal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf290ea3255625513b6ad5a5c4e189c833a67a92/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fitr%2Ftraversal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fitr%2Ftraversal.cc?ref=cf290ea3255625513b6ad5a5c4e189c833a67a92", "patch": "@@ -104,7 +104,7 @@ test02()\n void\n test03()\n {\n-  path paths[] = { \"single\", \"multiple/elements\" };\n+  path paths[] = { \"single\", \"multiple/elements\", \"trailing/slash/\", \"/.\" };\n   for (const path& p : paths)\n     for (auto iter = p.begin(); iter != p.end(); ++iter)\n     {"}]}