{"sha": "934a3a25802c8652fab728259b779c3ae59e5c1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM0YTNhMjU4MDJjODY1MmZhYjcyODI1OWI3NzljM2FlNTllNWMxZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T15:27:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T15:27:27Z"}, "message": "[multiple changes]\n\n2009-04-10  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_attr.adb: Minor reformatting\n\n2009-04-10  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_aux.adb: Minor reformatting\n\n2009-04-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Check_Precondition_Postcondition): Within a generic,\n\tanalyze the expression for a postcondition, even if the compiler mode\n\tis Generate_Code.\n\nFrom-SVN: r145923", "tree": {"sha": "18f772cc26efda100ec73485971be219e84db360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18f772cc26efda100ec73485971be219e84db360"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/934a3a25802c8652fab728259b779c3ae59e5c1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934a3a25802c8652fab728259b779c3ae59e5c1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/934a3a25802c8652fab728259b779c3ae59e5c1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934a3a25802c8652fab728259b779c3ae59e5c1e/comments", "author": null, "committer": null, "parents": [{"sha": "ab8e1b353ed60724667bfeaf0d07fc37c9fffff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab8e1b353ed60724667bfeaf0d07fc37c9fffff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab8e1b353ed60724667bfeaf0d07fc37c9fffff4"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "97ba0a6a568e6d45458efff3bb3126df2ef59c11", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934a3a25802c8652fab728259b779c3ae59e5c1e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934a3a25802c8652fab728259b779c3ae59e5c1e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=934a3a25802c8652fab728259b779c3ae59e5c1e", "patch": "@@ -1,3 +1,13 @@\n+2009-04-10  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_attr.adb: Minor reformatting\n+\n+2009-04-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Check_Precondition_Postcondition): Within a generic,\n+\tanalyze the expression for a postcondition, even if the compiler mode\n+\tis Generate_Code.\n+\n 2009-04-10  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_aux.adb: Minor reformatting"}, {"sha": "d1d6ee9862cf8ba72e3db8d6d499a4ebfd39db87", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934a3a25802c8652fab728259b779c3ae59e5c1e/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934a3a25802c8652fab728259b779c3ae59e5c1e/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=934a3a25802c8652fab728259b779c3ae59e5c1e", "patch": "@@ -1346,7 +1346,6 @@ package body Exp_Attr is\n       begin\n          --  We have an object of a task interface class-wide type as a prefix\n          --  to Callable. Generate:\n-\n          --    callable (Task_Id (Pref._disp_get_task_id));\n \n          if Ada_Version >= Ada_05\n@@ -4361,7 +4360,7 @@ package body Exp_Attr is\n                Analyze_And_Resolve (N, RTE (RE_Tag));\n             end if;\n \n-         --  (Ada 2005 (AI-251): The use of 'Tag in the sources always\n+         --  Ada 2005 (AI-251): The use of 'Tag in the sources always\n          --  references the primary tag of the actual object. If 'Tag is\n          --  applied to class-wide interface objects we generate code that\n          --  displaces \"this\" to reference the base of the object.\n@@ -4408,7 +4407,6 @@ package body Exp_Attr is\n       begin\n          --  The prefix of Terminated is of a task interface class-wide type.\n          --  Generate:\n-\n          --    terminated (Task_Id (Pref._disp_get_task_id));\n \n          if Ada_Version >= Ada_05"}, {"sha": "f2f55ce2ba01503c02f62df861ad3132eab98eb5", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934a3a25802c8652fab728259b779c3ae59e5c1e/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934a3a25802c8652fab728259b779c3ae59e5c1e/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=934a3a25802c8652fab728259b779c3ae59e5c1e", "patch": "@@ -119,7 +119,7 @@ package body Sem_Aux is\n       elsif Nkind (D) = N_Object_Renaming_Declaration then\n          return Renamed_Object (Ent);\n \n-      --  If this is a component declaration whose entity is constant, it is\n+      --  If this is a component declaration whose entity is a constant, it is\n       --  a prival within a protected function (and so has no constant value).\n \n       elsif Nkind (D) = N_Component_Declaration then"}, {"sha": "af7cf60ce8bef9f149f59c3ec59e62c90754dad4", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934a3a25802c8652fab728259b779c3ae59e5c1e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934a3a25802c8652fab728259b779c3ae59e5c1e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=934a3a25802c8652fab728259b779c3ae59e5c1e", "patch": "@@ -1456,7 +1456,9 @@ package body Sem_Prag is\n          if Nkind (Parent (N)) = N_Subprogram_Body\n            and then List_Containing (N) = Declarations (Parent (N))\n          then\n-            if Operating_Mode /= Generate_Code then\n+            if Operating_Mode /= Generate_Code\n+              or else Inside_A_Generic\n+            then\n \n                --  Analyze expression in pragma, for correctness\n                --  and for ASIS use."}]}