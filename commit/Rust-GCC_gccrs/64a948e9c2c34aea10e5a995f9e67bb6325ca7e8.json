{"sha": "64a948e9c2c34aea10e5a995f9e67bb6325ca7e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRhOTQ4ZTljMmMzNGFlYTEwZTVhOTk1ZjllNjdiYjYzMjVjYTdlOA==", "commit": {"author": {"name": "Ilya Enkovich", "email": "enkovich.gnu@gmail.com", "date": "2015-12-10T16:01:42Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-12-10T16:01:42Z"}, "message": "tree-chkp.c (chkp_call_returns_bounds_p): Return true for VA_ARG call.\n\ngcc/\n\n\t* tree-chkp.c (chkp_call_returns_bounds_p): Return true\n\tfor VA_ARG call.\n\t(chkp_fixup_inlined_call): New.\n\t* tree-chkp.h (chkp_fixup_inlined_call): New.\n\t* tree-stdarg.c: Include tree-chkp.h.\n\t(expand_ifn_va_arg_1): Fixup bndret calls for removed\n\tVA_ARG calls.\n\nFrom-SVN: r231525", "tree": {"sha": "933bb83d196ac3eeaa156a457f6a2b08e24ee50a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/933bb83d196ac3eeaa156a457f6a2b08e24ee50a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64a948e9c2c34aea10e5a995f9e67bb6325ca7e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a948e9c2c34aea10e5a995f9e67bb6325ca7e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a948e9c2c34aea10e5a995f9e67bb6325ca7e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a948e9c2c34aea10e5a995f9e67bb6325ca7e8/comments", "author": null, "committer": null, "parents": [{"sha": "da8006f341fc2a30d32fe7a1d9d540617ff5f8b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8006f341fc2a30d32fe7a1d9d540617ff5f8b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da8006f341fc2a30d32fe7a1d9d540617ff5f8b6"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "4cd1567ff84ecbb20750e443c2490bad4b06a6d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a948e9c2c34aea10e5a995f9e67bb6325ca7e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a948e9c2c34aea10e5a995f9e67bb6325ca7e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64a948e9c2c34aea10e5a995f9e67bb6325ca7e8", "patch": "@@ -1,3 +1,13 @@\n+2015-12-10  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\t* tree-chkp.c (chkp_call_returns_bounds_p): Return true\n+\tfor VA_ARG call.\n+\t(chkp_fixup_inlined_call): New.\n+\t* tree-chkp.h (chkp_fixup_inlined_call): New.\n+\t* tree-stdarg.c: Include tree-chkp.h.\n+\t(expand_ifn_va_arg_1): Fixup bndret calls for removed\n+\tVA_ARG calls.\n+\n 2015-12-10  Martin Jambor  <mjambor@suse.cz>\n \n \t* tree-inline.c (duplicate_remap_omp_clause_seq): New function."}, {"sha": "b666e9706432e5bde07633d57f0c97e3cfd4e7ab", "filename": "gcc/tree-chkp.c", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a948e9c2c34aea10e5a995f9e67bb6325ca7e8/gcc%2Ftree-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a948e9c2c34aea10e5a995f9e67bb6325ca7e8/gcc%2Ftree-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.c?ref=64a948e9c2c34aea10e5a995f9e67bb6325ca7e8", "patch": "@@ -2157,7 +2157,11 @@ static bool\n chkp_call_returns_bounds_p (gcall *call)\n {\n   if (gimple_call_internal_p (call))\n-    return false;\n+    {\n+      if (gimple_call_internal_fn (call) == IFN_VA_ARG)\n+\treturn true;\n+      return false;\n+    }\n \n   if (gimple_call_builtin_p (call, BUILT_IN_CHKP_NARROW_PTR_BOUNDS)\n       || chkp_gimple_call_builtin_p (call, BUILT_IN_CHKP_NARROW))\n@@ -2490,6 +2494,69 @@ chkp_build_bndstx (tree addr, tree ptr, tree bounds,\n     }\n }\n \n+/* This function is called when call statement\n+   is inlined and therefore we can't use bndret\n+   for its LHS anymore.  Function fixes bndret\n+   call using new RHS value if possible.  */\n+void\n+chkp_fixup_inlined_call (tree lhs, tree rhs)\n+{\n+  tree addr, bounds;\n+  gcall *retbnd, *bndldx;\n+\n+  if (!BOUNDED_P (lhs))\n+    return;\n+\n+  /* Search for retbnd call.  */\n+  retbnd = chkp_retbnd_call_by_val (lhs);\n+  if (!retbnd)\n+    return;\n+\n+  /* Currently only handle cases when call is replaced\n+     with a memory access.  In this case bndret call\n+     may be replaced with bndldx call.  Otherwise we\n+     have to search for bounds which may cause wrong\n+     result due to various optimizations applied.  */\n+  switch (TREE_CODE (rhs))\n+    {\n+    case VAR_DECL:\n+      if (DECL_REGISTER (rhs))\n+\treturn;\n+      break;\n+\n+    case MEM_REF:\n+      break;\n+\n+    case ARRAY_REF:\n+    case COMPONENT_REF:\n+      addr = get_base_address (rhs);\n+      if (!DECL_P (addr)\n+\t  && TREE_CODE (addr) != MEM_REF)\n+\treturn;\n+      if (DECL_P (addr) && DECL_REGISTER (addr))\n+\treturn;\n+      break;\n+\n+    default:\n+      return;\n+    }\n+\n+  /* Create a new statements sequence with bndldx call.  */\n+  gimple_stmt_iterator gsi = gsi_for_stmt (retbnd);\n+  addr = build_fold_addr_expr (rhs);\n+  chkp_build_bndldx (addr, lhs, &gsi);\n+  bndldx = as_a <gcall *> (gsi_stmt (gsi));\n+\n+  /* Remove bndret call.  */\n+  bounds = gimple_call_lhs (retbnd);\n+  gsi = gsi_for_stmt (retbnd);\n+  gsi_remove (&gsi, true);\n+\n+  /* Link new bndldx call.  */\n+  gimple_call_set_lhs (bndldx, bounds);\n+  update_stmt (bndldx);\n+}\n+\n /* Compute bounds for pointer NODE which was assigned in\n    assignment statement ASSIGN.  Return computed bounds.  */\n static tree"}, {"sha": "9337eb734dfb3b40e4071eb82c1baee5d9f1291a", "filename": "gcc/tree-chkp.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a948e9c2c34aea10e5a995f9e67bb6325ca7e8/gcc%2Ftree-chkp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a948e9c2c34aea10e5a995f9e67bb6325ca7e8/gcc%2Ftree-chkp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.h?ref=64a948e9c2c34aea10e5a995f9e67bb6325ca7e8", "patch": "@@ -59,5 +59,6 @@ extern tree chkp_insert_retbnd_call (tree bndval, tree retval,\n \t\t\t\t     gimple_stmt_iterator *gsi);\n extern gcall *chkp_copy_call_skip_bounds (gcall *call);\n extern bool chkp_redirect_edge (cgraph_edge *e);\n+extern void chkp_fixup_inlined_call (tree lhs, tree rhs);\n \n #endif /* GCC_TREE_CHKP_H */"}, {"sha": "ea2ef1c4f1bf9b1e11940c1778473d978be648c7", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a948e9c2c34aea10e5a995f9e67bb6325ca7e8/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a948e9c2c34aea10e5a995f9e67bb6325ca7e8/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=64a948e9c2c34aea10e5a995f9e67bb6325ca7e8", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-into-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-stdarg.h\"\n+#include \"tree-chkp.h\"\n \n /* A simple pass that attempts to optimize stdarg functions on architectures\n    that need to save register arguments to stack on entry to stdarg functions.\n@@ -1047,6 +1048,11 @@ expand_ifn_va_arg_1 (function *fun)\n \t    unsigned int nargs = gimple_call_num_args (stmt);\n \t    gcc_assert (useless_type_conversion_p (TREE_TYPE (lhs), type));\n \n+\t    /* We replace call with a new expr.  This may require\n+\t       corresponding bndret call fixup.  */\n+\t    if (chkp_function_instrumented_p (fun->decl))\n+\t      chkp_fixup_inlined_call (lhs, expr);\n+\n \t    if (nargs == 3)\n \t      {\n \t\t/* We've transported the size of with WITH_SIZE_EXPR here as"}]}