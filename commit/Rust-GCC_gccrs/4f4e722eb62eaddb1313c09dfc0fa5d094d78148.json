{"sha": "4f4e722eb62eaddb1313c09dfc0fa5d094d78148", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY0ZTcyMmViNjJlYWRkYjEzMTNjMDlkZmMwZmE1ZDA5NGQ3ODE0OA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-08-10T09:22:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-08-10T09:22:47Z"}, "message": "re PR middle-end/41006 (verify_stmts failed: error: non-trivial conversion at assignment)\n\n2009-08-10  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/41006\n\t* tree-ssa.c (useless_type_conversion_p_1): Fold into ...\n\t(useless_type_conversion_p): ... here.  Require pointer targets\n\tto be compatible.\n\n\t* gcc.c-torture/compile/pr41006-1.c: New testcase.\n\t* gcc.c-torture/compile/pr41006-2.c: Likewise.\n\nFrom-SVN: r150621", "tree": {"sha": "0ad55d17f476854e6ffa83832fc420057243cc73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ad55d17f476854e6ffa83832fc420057243cc73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f4e722eb62eaddb1313c09dfc0fa5d094d78148", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f4e722eb62eaddb1313c09dfc0fa5d094d78148", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f4e722eb62eaddb1313c09dfc0fa5d094d78148", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f4e722eb62eaddb1313c09dfc0fa5d094d78148/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "727e85447dbd3342ca487b7179dc8a06a853f681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/727e85447dbd3342ca487b7179dc8a06a853f681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/727e85447dbd3342ca487b7179dc8a06a853f681"}], "stats": {"total": 133, "additions": 85, "deletions": 48}, "files": [{"sha": "d03d9224271e90de6be60abada23537fa4062af0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4e722eb62eaddb1313c09dfc0fa5d094d78148/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4e722eb62eaddb1313c09dfc0fa5d094d78148/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f4e722eb62eaddb1313c09dfc0fa5d094d78148", "patch": "@@ -1,3 +1,10 @@\n+2009-08-10  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/41006\n+\t* tree-ssa.c (useless_type_conversion_p_1): Fold into ...\n+\t(useless_type_conversion_p): ... here.  Require pointer targets\n+\tto be compatible.\n+\n 2009-08-10  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/40866"}, {"sha": "c4be5485834262ff2e09dd23fa2d1aa5c9168938", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4e722eb62eaddb1313c09dfc0fa5d094d78148/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4e722eb62eaddb1313c09dfc0fa5d094d78148/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f4e722eb62eaddb1313c09dfc0fa5d094d78148", "patch": "@@ -1,3 +1,9 @@\n+2009-08-10  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/41006\n+\t* gcc.c-torture/compile/pr41006-1.c: New testcase.\n+\t* gcc.c-torture/compile/pr41006-2.c: Likewise.\n+\n 2009-08-10  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/40940"}, {"sha": "8aef66dbdfeb8c700c0a32a0d5f85340485fda30", "filename": "gcc/testsuite/gcc.c-torture/compile/pr41006-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4e722eb62eaddb1313c09dfc0fa5d094d78148/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41006-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4e722eb62eaddb1313c09dfc0fa5d094d78148/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41006-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41006-1.c?ref=4f4e722eb62eaddb1313c09dfc0fa5d094d78148", "patch": "@@ -0,0 +1,17 @@\n+typedef int (*FARPROC)();\n+\n+typedef int (*LPFN_ACCEPTEX)(void*);\n+static LPFN_ACCEPTEX acceptex_fn;\n+\n+int xWSAIoctl(void*);\n+static void get_fn(FARPROC* fn)\n+{\n+    FARPROC func;\n+    if (!xWSAIoctl( &func))\n+        *fn = func;\n+}\n+\n+void get_fn_pointers()\n+{\n+    get_fn((FARPROC*)&acceptex_fn);\n+}"}, {"sha": "766778d410f9bdbe1059be290a770cb8599142ef", "filename": "gcc/testsuite/gcc.c-torture/compile/pr41006-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4e722eb62eaddb1313c09dfc0fa5d094d78148/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41006-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4e722eb62eaddb1313c09dfc0fa5d094d78148/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41006-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41006-2.c?ref=4f4e722eb62eaddb1313c09dfc0fa5d094d78148", "patch": "@@ -0,0 +1,15 @@\n+typedef int *FARPROC;\n+static int * __restrict__ acceptex_fn;\n+\n+int xWSAIoctl(void*);\n+static void get_fn(FARPROC* fn)\n+{\n+  FARPROC func;\n+  if (!xWSAIoctl( &func))\n+    *fn = func;\n+}\n+\n+void get_fn_pointers()\n+{\n+  get_fn((FARPROC*)&acceptex_fn);\n+}"}, {"sha": "97e15aeaef19f92dd074086645ddef6f0dee5550", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 40, "deletions": 48, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4e722eb62eaddb1313c09dfc0fa5d094d78148/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4e722eb62eaddb1313c09dfc0fa5d094d78148/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=4f4e722eb62eaddb1313c09dfc0fa5d094d78148", "patch": "@@ -844,10 +844,31 @@ delete_tree_ssa (void)\n   redirect_edge_var_map_destroy ();\n }\n \n-/* Helper function for useless_type_conversion_p.  */\n+/* Return true if the conversion from INNER_TYPE to OUTER_TYPE is a\n+   useless type conversion, otherwise return false.\n \n-static bool\n-useless_type_conversion_p_1 (tree outer_type, tree inner_type)\n+   This function implicitly defines the middle-end type system.  With\n+   the notion of 'a < b' meaning that useless_type_conversion_p (a, b)\n+   holds and 'a > b' meaning that useless_type_conversion_p (b, a) holds,\n+   the following invariants shall be fulfilled:\n+\n+     1) useless_type_conversion_p is transitive.\n+\tIf a < b and b < c then a < c.\n+\n+     2) useless_type_conversion_p is not symmetric.\n+\tFrom a < b does not follow a > b.\n+\n+     3) Types define the available set of operations applicable to values.\n+\tA type conversion is useless if the operations for the target type\n+\tis a subset of the operations for the source type.  For example\n+\tcasts to void* are useless, casts from void* are not (void* can't\n+\tbe dereferenced or offsetted, but copied, hence its set of operations\n+\tis a strict subset of that of all other data pointer types).  Casts\n+\tto const T* are useless (can't be written to), casts from const T*\n+\tto T* are not.  */\n+\n+bool\n+useless_type_conversion_p (tree outer_type, tree inner_type)\n {\n   /* Do the following before stripping toplevel qualifiers.  */\n   if (POINTER_TYPE_P (inner_type)\n@@ -909,6 +930,16 @@ useless_type_conversion_p_1 (tree outer_type, tree inner_type)\n   else if (POINTER_TYPE_P (inner_type)\n \t   && POINTER_TYPE_P (outer_type))\n     {\n+      /* If the outer type is (void *) or a pointer to an incomplete\n+\t record type, then the conversion is not necessary.  */\n+      if (VOID_TYPE_P (TREE_TYPE (outer_type))\n+\t  || (AGGREGATE_TYPE_P (TREE_TYPE (outer_type))\n+\t      && TREE_CODE (TREE_TYPE (outer_type)) != ARRAY_TYPE\n+\t      && (TREE_CODE (TREE_TYPE (outer_type))\n+\t\t  == TREE_CODE (TREE_TYPE (inner_type)))\n+\t      && !COMPLETE_TYPE_P (TREE_TYPE (outer_type))))\n+\treturn true;\n+\n       /* Don't lose casts between pointers to volatile and non-volatile\n \t qualified types.  Doing so would result in changing the semantics\n \t of later accesses.  For function types the volatile qualifier\n@@ -938,9 +969,12 @@ useless_type_conversion_p_1 (tree outer_type, tree inner_type)\n       /* Otherwise pointers/references are equivalent if their pointed\n \t to types are effectively the same.  We can strip qualifiers\n \t on pointed-to types for further comparison, which is done in\n-\t the callee.  */\n-      return useless_type_conversion_p_1 (TREE_TYPE (outer_type),\n-\t\t\t\t          TREE_TYPE (inner_type));\n+\t the callee.  Note we have to use true compatibility here\n+\t because addresses are subject to propagation into dereferences\n+\t and thus might get the original type exposed which is equivalent\n+\t to a reverse conversion.  */\n+      return types_compatible_p (TREE_TYPE (outer_type),\n+\t\t\t\t TREE_TYPE (inner_type));\n     }\n \n   /* Recurse for complex types.  */\n@@ -1083,48 +1117,6 @@ useless_type_conversion_p_1 (tree outer_type, tree inner_type)\n   return false;\n }\n \n-/* Return true if the conversion from INNER_TYPE to OUTER_TYPE is a\n-   useless type conversion, otherwise return false.\n-\n-   This function implicitly defines the middle-end type system.  With\n-   the notion of 'a < b' meaning that useless_type_conversion_p (a, b)\n-   holds and 'a > b' meaning that useless_type_conversion_p (b, a) holds,\n-   the following invariants shall be fulfilled:\n-\n-     1) useless_type_conversion_p is transitive.\n-\tIf a < b and b < c then a < c.\n-\n-     2) useless_type_conversion_p is not symmetric.\n-\tFrom a < b does not follow a > b.\n-\n-     3) Types define the available set of operations applicable to values.\n-\tA type conversion is useless if the operations for the target type\n-\tis a subset of the operations for the source type.  For example\n-\tcasts to void* are useless, casts from void* are not (void* can't\n-\tbe dereferenced or offsetted, but copied, hence its set of operations\n-\tis a strict subset of that of all other data pointer types).  Casts\n-\tto const T* are useless (can't be written to), casts from const T*\n-\tto T* are not.  */\n-\n-bool\n-useless_type_conversion_p (tree outer_type, tree inner_type)\n-{\n-  /* If the outer type is (void *) or a pointer to an incomplete record type,\n-     then the conversion is not necessary.\n-     We have to make sure to not apply this while recursing though.  */\n-  if (POINTER_TYPE_P (inner_type)\n-      && POINTER_TYPE_P (outer_type)\n-      && (VOID_TYPE_P (TREE_TYPE (outer_type))\n-\t  || (AGGREGATE_TYPE_P (TREE_TYPE (outer_type))\n-\t      && TREE_CODE (TREE_TYPE (outer_type)) != ARRAY_TYPE\n-\t      && (TREE_CODE (TREE_TYPE (outer_type))\n-\t\t  == TREE_CODE (TREE_TYPE (inner_type)))\n-\t      && !COMPLETE_TYPE_P (TREE_TYPE (outer_type)))))\n-    return true;\n-\n-  return useless_type_conversion_p_1 (outer_type, inner_type);\n-}\n-\n /* Return true if a conversion from either type of TYPE1 and TYPE2\n    to the other is not required.  Otherwise return false.  */\n "}]}